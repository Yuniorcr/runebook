<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="falcon">
    <body>
      <group id="falcon">
        <trans-unit id="a769830cefa7afca40c1594b4a873695ab16bd91" translate="yes" xml:space="preserve">
          <source>Responses using this status code SHOULD explain how to resubmit the request successfully.</source>
          <target state="translated">이 상태 코드를 사용한 응답은 요청을 다시 제출하는 방법을 설명해야합니다.</target>
        </trans-unit>
        <trans-unit id="9944efbf8d68374ae7fb162a946a2cb7bc130271" translate="yes" xml:space="preserve">
          <source>Responses using this status code SHOULD include an explanation, in the response body, of the details of the legal demand: the party making it, the applicable legislation or regulation, and what classes of person and resource it applies to.</source>
          <target state="translated">이 상태 코드를 사용한 응답에는 법적 요구 사항에 대한 세부 사항, 즉 요청 당사자, 해당 법률 또는 규정, 그리고 적용되는 개인 및 자원 클래스에 대한 설명이 응답 본문에 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="aa58806549852b977066c63216f52a253b14d0b7" translate="yes" xml:space="preserve">
          <source>Responses with the 429 status code MUST NOT be stored by a cache.</source>
          <target state="translated">상태 코드가 429 인 응답은 캐시에 저장해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="3e55fbc2beef24fe783a6479c6de0dc874b13f5e" translate="yes" xml:space="preserve">
          <source>Responses with the 431 status code MUST NOT be stored by a cache.</source>
          <target state="translated">상태 코드가 431 인 응답은 캐시에 저장해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e93c035ceb7e90b680b0affddd58a5c0da45d0b1" translate="yes" xml:space="preserve">
          <source>Responses with the 511 status code MUST NOT be stored by a cache.</source>
          <target state="translated">상태 코드가 511 인 응답은 캐시에 저장해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="5dc287332e9f26139be40387008356d9731082ca" translate="yes" xml:space="preserve">
          <source>Restart Gunicorn (unless you&amp;rsquo;re using &lt;code&gt;--reload&lt;/code&gt;), and then try sending a GET request to the revised resource:</source>
          <target state="translated">(당신이 사용하지 않는 다시 시작 Gunicorn는 &lt;code&gt;--reload&lt;/code&gt; 을 다음), 및 개정 된 자원에 대한 GET 요청을 전송하려고 :</target>
        </trans-unit>
        <trans-unit id="35a3b811dd14f0228a9de20bdade995de2c41bc6" translate="yes" xml:space="preserve">
          <source>Restricts the cookie to a specific domain and any subdomains of that domain. By default, the user agent will return the cookie only to the origin server. When overriding this default behavior, the specified domain must include the origin server. Otherwise, the user agent will reject the cookie.</source>
          <target state="translated">쿠키를 특정 도메인 및 해당 도메인의 하위 도메인으로 제한합니다. 기본적으로 사용자 에이전트는 쿠키를 원본 서버에만 반환합니다. 이 기본 동작을 재정의 할 때 지정된 도메인에 원본 서버가 포함되어야합니다. 그렇지 않으면 사용자 에이전트는 쿠키를 거부합니다.</target>
        </trans-unit>
        <trans-unit id="71147b496964a6cc73382ffcc89e53917ec9ceaf" translate="yes" xml:space="preserve">
          <source>Retrieve the raw string value for the given header.</source>
          <target state="translated">주어진 헤더에 대한 원시 문자열 값을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="cf77305919f153f67fe36d823de2ce029588c7c0" translate="yes" xml:space="preserve">
          <source>Return a basic dictionary representing the error.</source>
          <target state="translated">에러를 나타내는 기본 사전을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="cd8fd3864bc3691b557d40e0ab1c66a69be2619a" translate="yes" xml:space="preserve">
          <source>Return a pretty-printed JSON representation of the error.</source>
          <target state="translated">오류가 잘 인쇄 된 JSON 표현을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bedb87757e8004e23f46292d7cd180ef6c1f7c2f" translate="yes" xml:space="preserve">
          <source>Return all values provided in the Cookie header for the named cookie.</source>
          <target state="translated">명명 된 쿠키의 Cookie 헤더에 제공된 모든 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="82d9791e368536beec5ca2e8cae6fde4aff7314d" translate="yes" xml:space="preserve">
          <source>Return an HTTP header with HTTP-Date values as a datetime.</source>
          <target state="translated">날짜-시간으로 HTTP-Date 값이있는 HTTP 헤더를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="1866245f8cd18a317b44c9d1efe90bae956587d8" translate="yes" xml:space="preserve">
          <source>Return an XML-encoded representation of the error.</source>
          <target state="translated">XML 인코딩 된 오류 표현을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e1db989282bc57fdadea7d9200f95ddfe4a5c8de" translate="yes" xml:space="preserve">
          <source>Return the client&amp;rsquo;s preferred media type, given several choices.</source>
          <target state="translated">몇 가지 선택 사항이 주어지면 클라이언트가 선호하는 미디어 유형을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="9e64aeebf2ae4857577a6634ee9e5eaf30ca4f36" translate="yes" xml:space="preserve">
          <source>Return the daylight saving time (DST) adjustment.</source>
          <target state="translated">서머 타임 (DST) 조정을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e2994881f096972937659fad257e153b2ee43292" translate="yes" xml:space="preserve">
          <source>Return the decoded JSON value of a query string parameter.</source>
          <target state="translated">쿼리 문자열 매개 변수의 디코딩 된 JSON 값을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="db668a80d799bb60fe236bf9a77e13bf528d409a" translate="yes" xml:space="preserve">
          <source>Return the raw value of a query string parameter as a string.</source>
          <target state="translated">쿼리 문자열 매개 변수의 원시 값을 문자열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f700eb143c1aa41869b44a2b9b175d98a95b5932" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a boolean</source>
          <target state="translated">쿼리 문자열 매개 변수의 값을 부울로 반환</target>
        </trans-unit>
        <trans-unit id="b00c8646ae8c8c8ef5186f54694117c801c4ba3c" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a boolean.</source>
          <target state="translated">쿼리 문자열 매개 변수의 값을 부울로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a7bfdf180e15eb030ea66cad36c545e69a24a87e" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a date.</source>
          <target state="translated">쿼리 문자열 매개 변수의 값을 날짜로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="b54c773588a438154ba97a3617a14ceb372ce886" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a datetime.</source>
          <target state="translated">쿼리 문자열 매개 변수의 값을 날짜 / 시간으로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="f8288e12ac673c73f03b9cd7516311c052eb147d" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as a list.</source>
          <target state="translated">쿼리 문자열 매개 변수의 값을 목록으로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="e591ed68dbf91047b27a5d434b839aeed7a015ab" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as an UUID.</source>
          <target state="translated">조회 문자열 매개 변수의 값을 UUID로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="da75d6331f2d558f018f200a1cfa599d20baddf7" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as an float.</source>
          <target state="translated">쿼리 문자열 매개 변수의 값을 부동 소수점으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="255b0f05faf2337c7baf1c1af19894585d17f1bf" translate="yes" xml:space="preserve">
          <source>Return the value of a query string parameter as an int.</source>
          <target state="translated">쿼리 문자열 매개 변수의 값을 int로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="8246453c6e901bbc2e4288b43a47949404da068a" translate="yes" xml:space="preserve">
          <source>Return type:</source>
          <target state="translated">반품 유형 :</target>
        </trans-unit>
        <trans-unit id="bb0dd176a77fd9d9196aac6a52e9878768bc4e6a" translate="yes" xml:space="preserve">
          <source>Returns a deserialized form of the request stream. When called, it will attempt to deserialize the request stream using the Content-Type header as well as the media-type handlers configured via &lt;a href=&quot;api#falcon.RequestOptions&quot;&gt;&lt;code&gt;falcon.RequestOptions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">deserialized 형식의 요청 스트림을 반환합니다. 호출되면 Content-Type 헤더와 &lt;a href=&quot;api#falcon.RequestOptions&quot;&gt; &lt;code&gt;falcon.RequestOptions&lt;/code&gt; &lt;/a&gt; 를 통해 구성된 미디어 유형 핸들러를 사용하여 요청 스트림을 역 직렬화하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="42d1cdaaf9cd46fc16f2e360843330d1776abfbb" translate="yes" xml:space="preserve">
          <source>Returns a randomly-generated string, of a random length.</source>
          <target state="translated">임의 길이의 임의로 생성 된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c4a39b69334193b94cb7de6283371fbef88de34" translate="yes" xml:space="preserve">
          <source>Returns the &amp;lsquo;host:port&amp;rsquo; portion of the request URL. The port may be ommitted if it is the default one for the URL&amp;rsquo;s schema (80 for HTTP and 443 for HTTPS).</source>
          <target state="translated">요청 URL의 'host : port'부분을 반환합니다. URL 스키마에 대한 기본 포트 (HTTP의 경우 80, HTTPS의 경우 443) 인 경우 포트를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="880bab60c588dc4babefd930af5c38450e59df4f" translate="yes" xml:space="preserve">
          <source>Returns the current UTC time as an IMF-fixdate.</source>
          <target state="translated">현재 UTC 시간을 IMF 수정 날짜로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="a2e2861fa816b96268d3d43f635cdcb63aa20fc7" translate="yes" xml:space="preserve">
          <source>Reverse proxies are often configured to set the Host header directly to the one that was originally requested by the user agent; in that case, using &lt;a href=&quot;#falcon.Request.host&quot;&gt;&lt;code&gt;host&lt;/code&gt;&lt;/a&gt; is sufficient.</source>
          <target state="translated">리버스 프록시는 종종 호스트 헤더를 사용자 에이전트가 원래 요청한 헤더로 직접 설정하도록 구성됩니다. 이 경우 &lt;a href=&quot;#falcon.Request.host&quot;&gt; &lt;code&gt;host&lt;/code&gt; &lt;/a&gt; 사용하는 것으로 충분합니다.</target>
        </trans-unit>
        <trans-unit id="ab64c7383188709ea526bd09343f63a6a92e2eaa" translate="yes" xml:space="preserve">
          <source>Right now, the image resource responds to GET requests with a simple &lt;code&gt;200 OK&lt;/code&gt; and a JSON body. Falcon&amp;rsquo;s Internet media type defaults to &lt;code&gt;application/json&lt;/code&gt; but you can set it to whatever you like. Noteworthy JSON alternatives include &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; and &lt;a href=&quot;http://msgpack.org/&quot;&gt;MessagePack&lt;/a&gt;.</source>
          <target state="translated">현재 이미지 리소스는 간단한 &lt;code&gt;200 OK&lt;/code&gt; 와 JSON 본문 으로 GET 요청에 응답합니다 . Falcon의 인터넷 미디어 유형은 기본적으로 &lt;code&gt;application/json&lt;/code&gt; 으로 설정되어 있지만 원하는대로 설정할 수 있습니다. 주목할만한 JSON 대안으로는 &lt;a href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; 및 &lt;a href=&quot;http://msgpack.org/&quot;&gt;MessagePack이&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bd2150013147b397fa44a2d4f596dd3e162e892" translate="yes" xml:space="preserve">
          <source>Routes based on URI templates RFC</source>
          <target state="translated">URI 템플릿 RFC를 기반으로하는 경로</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="00ae55c2616ea16a9afa0d1977d3c64a38d23e37" translate="yes" xml:space="preserve">
          <source>Routing Utilities</source>
          <target state="translated">라우팅 유틸리티</target>
        </trans-unit>
        <trans-unit id="a5a8d96e1c8b8d7e03040c64d95b38e83f716a85" translate="yes" xml:space="preserve">
          <source>Running your Application as a Different User</source>
          <target state="translated">다른 사용자로 애플리케이션 실행</target>
        </trans-unit>
        <trans-unit id="61a75f5b8b305be0c0f0e27bb85465e10f330bb0" translate="yes" xml:space="preserve">
          <source>Scopes the cookie to the given path plus any subdirectories under that path (the &amp;ldquo;/&amp;rdquo; character is interpreted as a directory separator). If the cookie does not specify a path, the user agent defaults to the path component of the requested URI.</source>
          <target state="translated">쿠키를 지정된 경로와 해당 경로 아래의 하위 디렉토리로 범위를 지정합니다 ( &quot;/&quot;문자는 디렉토리 구분 기호로 해석 됨). 쿠키가 경로를 지정하지 않으면 사용자 에이전트는 기본적으로 요청 된 URI의 경로 구성 요소를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="64d424c359dbbc6a46267650b7d3c82877d6250b" translate="yes" xml:space="preserve">
          <source>Search for a route that matches the given partial URI.</source>
          <target state="translated">주어진 부분 URI와 일치하는 경로를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="ca10d3a0b68b220058d87185382376f7c05a45af" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://json-schema.org/&quot;&gt;json-schema.org&lt;/a&gt; for more information on defining a compatible dictionary.</source>
          <target state="translated">호환 가능한 사전 정의에 대한 자세한 내용 은 &lt;a href=&quot;http://json-schema.org/&quot;&gt;json-schema.org&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="01f782acba170135501004e6e77c31d7e2c26113" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://json-schema.org/&quot;&gt;json-schema.org&lt;/a&gt; for more information on defining a compatible dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edd4e1df72d3aace22438d83bb38f124bf0a43a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;media#media&quot;&gt;Media&lt;/a&gt; for more information regarding media handling.</source>
          <target state="translated">미디어 처리에 대한 자세한 내용 은 &lt;a href=&quot;media#media&quot;&gt;미디어&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">또한보십시오</target>
        </trans-unit>
        <trans-unit id="0e97f4407829fc4f6f72cb89c909d165af685b9a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#environ-variables&quot;&gt;PEP 3333&lt;/a&gt; for a complete list of the variables that are provided via &lt;code&gt;environ&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;environ&lt;/code&gt; 을 통해 제공되는 변수의 전체 목록은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#environ-variables&quot;&gt;PEP 3333&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd5024cdd958df478f96e23b02b7cde852f39f71" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://github.com/falconry/falcon/blob/master/tox.ini&quot;&gt;tox.ini&lt;/a&gt; file for a full list of available environments.</source>
          <target state="translated">사용 가능한 전체 환경 목록은 &lt;a href=&quot;https://github.com/falconry/falcon/blob/master/tox.ini&quot;&gt;tox.ini&lt;/a&gt; 파일을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6b6e2ecf7dfe22a2c6c4610c6773ca4f2811a637" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides&quot;&gt;WSGI middleware example&lt;/a&gt; given in PEP-3333.</source>
          <target state="translated">PEP-3333에 제공된 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides&quot;&gt;WSGI 미들웨어 예제&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="56d1e564129af5693faa8b66bee00c7ea49b9fc5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#falcon.Request.get_cookie_values&quot;&gt;&lt;code&gt;get_cookie_values()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;#falcon.Request.get_cookie_values&quot;&gt; &lt;code&gt;get_cookie_values()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57f90c01b3ccfe4460d975bb72266d13f3309f9c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;../api/api#falcon.API.add_error_handler&quot;&gt;&lt;code&gt;add_error_handler()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/api#falcon.API.add_error_handler&quot;&gt; &lt;code&gt;add_error_handler()&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b43183d53f31190c631421abb971e11340a5c22c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://tools.ietf.org/html/rfc6265#section-4.1.2.5&quot;&gt;RFC 6265, Section 4.1.2.5&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;https://tools.ietf.org/html/rfc6265#section-4.1.2.5&quot;&gt;RFC 6265, 섹션 4.1.2.5을&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0b50d04fd950cc1f20741710972fffd4c44140d7" translate="yes" xml:space="preserve">
          <source>Serialize the ETag to a string suitable for use in a precondition header.</source>
          <target state="translated">ETag를 전제 조건 헤더에 사용하기에 적합한 문자열로 직렬화합니다.</target>
        </trans-unit>
        <trans-unit id="2cebdb06f4cc83807e41a08e8af9e45d2eb3b751" translate="yes" xml:space="preserve">
          <source>Serialize the media object on a &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;falcon.Response&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">A의 미디어 객체를 직렬화 &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt; &lt;code&gt;falcon.Response&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e46cd88bd8695dc7923d7eca97daba11572b661f" translate="yes" xml:space="preserve">
          <source>Serving Images</source>
          <target state="translated">이미지 제공</target>
        </trans-unit>
        <trans-unit id="ac0dd7cd0617a2bb10539769d872732abf30e4bb" translate="yes" xml:space="preserve">
          <source>Serving files directly from the web server, rather than through the Python app, will always be more efficient, and therefore should be preferred in production deployments.</source>
          <target state="translated">Python 앱이 아닌 웹 서버에서 직접 파일을 제공하는 것이 항상 더 효율적이므로 프로덕션 배포에서 선호되어야합니다.</target>
        </trans-unit>
        <trans-unit id="34fbebb381b8267c138db49980e56eddc8a1c3d9" translate="yes" xml:space="preserve">
          <source>Serving files directly from the web server, rather than through the Python app, will always be more efficient, and therefore should be preferred in production deployments. For security reasons, the directory and the fallback_filename (if provided) should be read only for the account running the application.</source>
          <target state="translated">Python 앱을 통하지 않고 웹 서버에서 직접 파일을 제공하는 것이 항상 더 효율적이므로 프로덕션 배포에서 선호되어야합니다. 보안상의 이유로 디렉터리 및 fallback_filename (제공된 경우)은 애플리케이션을 실행하는 계정에 대해서만 읽어야합니다.</target>
        </trans-unit>
        <trans-unit id="9ebad7462677862644cebd44c5002f349807f5d9" translate="yes" xml:space="preserve">
          <source>Set a header for this response to a given value.</source>
          <target state="translated">이 응답의 헤더를 지정된 값으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="fdc29830af6088117cf5b1d94564aaaf53bc0322" translate="yes" xml:space="preserve">
          <source>Set a response cookie.</source>
          <target state="translated">응답 쿠키를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="52a606dffbd9e8df4df445f64b9007f4f1c585d1" translate="yes" xml:space="preserve">
          <source>Set of global options passed from the API handler.</source>
          <target state="translated">API 핸들러에서 전달 된 글로벌 옵션 세트입니다.</target>
        </trans-unit>
        <trans-unit id="d59086db4fa7be57662b83c84aeef0eb195a0c1a" translate="yes" xml:space="preserve">
          <source>Set or append a header for this response.</source>
          <target state="translated">이 응답의 헤더를 설정하거나 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="1972779ac5b95baabe27e049d88742dd5e8db41e" translate="yes" xml:space="preserve">
          <source>Set several headers at once.</source>
          <target state="translated">한 번에 여러 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="26215380254873eacfdb1d8bec8440421cef8243" translate="yes" xml:space="preserve">
          <source>Set the Accept-Ranges header.</source>
          <target state="translated">Accept-Ranges 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="86e9c349af7267226a11f9a33aaf885a65b206a6" translate="yes" xml:space="preserve">
          <source>Set the Cache-Control header.</source>
          <target state="translated">Cache-Control 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="1b68d18b392bfec63a51f76b9a143b6d9a6369b5" translate="yes" xml:space="preserve">
          <source>Set the Content-Disposition header using the given filename.</source>
          <target state="translated">주어진 파일 이름을 사용하여 Content-Disposition 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="fa750520d4c1ff15369d9482c00f2662fd077b50" translate="yes" xml:space="preserve">
          <source>Set the Content-Length header.</source>
          <target state="translated">Content-Length 헤더를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="bbbba708a8fcbbe116624ce2d985711295569859" translate="yes" xml:space="preserve">
          <source>Set the Content-Location header.</source>
          <target state="translated">Content-Location 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="9eecd52727a85f04541bc9183e87293cc14fc3c7" translate="yes" xml:space="preserve">
          <source>Set the ETag header.</source>
          <target state="translated">ETag 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="d6f36ea033d38681c6c11d8b352634a01b958cd9" translate="yes" xml:space="preserve">
          <source>Set the Expires header. Set to a &lt;code&gt;datetime&lt;/code&gt; (UTC) instance.</source>
          <target state="translated">Expires 헤더를 설정합니다. &lt;code&gt;datetime&lt;/code&gt; (UTC) 인스턴스로 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="34165f27eb77ffb7a8d4a30f71f305e273982895" translate="yes" xml:space="preserve">
          <source>Set the Last-Modified header. Set to a &lt;code&gt;datetime&lt;/code&gt; (UTC) instance.</source>
          <target state="translated">Last-Modified 헤더를 설정하십시오. &lt;code&gt;datetime&lt;/code&gt; (UTC) 인스턴스로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4606ae3801abe36a4a26c28b8bf4853df54bfea" translate="yes" xml:space="preserve">
          <source>Set the Location header.</source>
          <target state="translated">위치 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="5ecc73c3a314abbadb86555e49c699ea80146143" translate="yes" xml:space="preserve">
          <source>Set the Retry-After header.</source>
          <target state="translated">재시도 후 헤더를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="45171ce26d5baa2a2634799948356c570c5b1b88" translate="yes" xml:space="preserve">
          <source>Set this property to an iterable of header names. For a single asterisk or field value, simply pass a single-element &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt;.</source>
          <target state="translated">이 속성을 반복 가능한 헤더 이름으로 설정하십시오. 단일 별표 또는 필드 값의 경우 단일 요소 &lt;code&gt;list&lt;/code&gt; 또는 &lt;code&gt;tuple&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3e90de03b0cff7c7e99dd354b70d663c88ada24" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;False&lt;/code&gt; in development environments to make the &lt;code&gt;secure&lt;/code&gt; attribute for all cookies default to &lt;code&gt;False&lt;/code&gt;. This can make testing easier by not requiring HTTPS. Note, however, that this setting can be overridden via &lt;code&gt;set_cookie()&lt;/code&gt;&amp;rsquo;s &lt;code&gt;secure&lt;/code&gt; kwarg.</source>
          <target state="translated">개발 환경에서 &lt;code&gt;False&lt;/code&gt; 로 설정하여 모든 쿠키 의 &lt;code&gt;secure&lt;/code&gt; 속성을 기본값으로 &lt;code&gt;False&lt;/code&gt; 로 설정합니다 . 이렇게하면 HTTPS가 필요하지 않으므로 테스트가 더 쉬워집니다. 그러나이 설정은 &lt;code&gt;set_cookie()&lt;/code&gt; 의 &lt;code&gt;secure&lt;/code&gt; kwarg 를 통해 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7a8a22238ef7de5ea1a3f32eae86001b2211662" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;False&lt;/code&gt; in order to retain a trailing slash, if present, at the end of the URL path (default &lt;code&gt;True&lt;/code&gt;). When this option is enabled, the URL path is normalized by stripping the trailing slash character. This lets the application define a single route to a resource for a path that may or may not end in a forward slash. However, this behavior can be problematic in certain cases, such as when working with authentication schemes that employ URL-based signatures.</source>
          <target state="translated">URL 경로 끝에 슬래시 (있는 경우)를 유지 하려면 &lt;code&gt;False&lt;/code&gt; 로 설정하십시오 (기본값은 &lt;code&gt;True&lt;/code&gt; ). 이 옵션을 사용하면 후행 슬래시 문자를 제거하여 URL 경로가 정규화됩니다. 이를 통해 응용 프로그램은 슬래시로 끝나거나 끝나지 않는 경로에 대한 리소스에 대한 단일 경로를 정의 할 수 있습니다. 그러나 URL 기반 서명을 사용하는 인증 체계를 사용하는 경우와 같은 특정 상황에서는이 동작이 문제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="693f7e11fca697512da38cb936923fcf1dd75d45" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;False&lt;/code&gt; to ignore query string params that have missing or blank values (default &lt;code&gt;True&lt;/code&gt;). For comma-separated values, this option also determines whether or not empty elements in the parsed list are retained.</source>
          <target state="translated">값이 누락되었거나 비어있는 쿼리 문자열 매개 변수를 무시 하려면 &lt;code&gt;False&lt;/code&gt; 로 설정 합니다 (기본값 &lt;code&gt;True&lt;/code&gt; ). 쉼표로 구분 된 값의 경우이 옵션은 구문 분석 된 목록의 빈 요소를 유지할지 여부도 결정합니다.</target>
        </trans-unit>
        <trans-unit id="2abcd3394f28fd96c7b36292a4e10e472214b758" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;False&lt;/code&gt; to treat commas in a query string value as literal characters, rather than as a comma- separated list (default &lt;code&gt;True&lt;/code&gt;). When this option is enabled, the value will be split on any non-percent-encoded commas. Disable this option when encoding lists as multiple occurrences of the same parameter, and when values may be encoded in alternative formats in which the comma character is significant.</source>
          <target state="translated">쿼리 문자열 값의 쉼표를 쉼표로 구분 된 목록이 아닌 리터럴 문자로 처리 하려면 &lt;code&gt;False&lt;/code&gt; 로 설정 하십시오 (기본값 &lt;code&gt;True&lt;/code&gt; ). 이 옵션을 사용하면 값이 인코딩되지 않은 쉼표로 값이 분할됩니다. 인코딩 할 때 동일한 매개 변수가 여러 번 나타날 때와 값이 쉼표 문자가 중요한 대체 형식으로 인코딩 될 때이 옵션을 비활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="2a0b7221d3da75f92f57cab78f59a8f1259b6b72" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;True&lt;/code&gt; from within a middleware method to signal to the framework that request processing should be short-circuited (see also &lt;a href=&quot;middleware#middleware&quot;&gt;Middleware&lt;/a&gt;).</source>
          <target state="translated">미들웨어 메소드 내 에서 &lt;code&gt;True&lt;/code&gt; 로 설정하여 요청 처리가 단락되어야 함을 프레임 워크에 알립니다 ( &lt;a href=&quot;middleware#middleware&quot;&gt;미들웨어&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7d3fd9ba55a0c65c774515ae69eb003d44a6d1a5" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;True&lt;/code&gt; in order to automatically consume the request stream and merge the results into the request&amp;rsquo;s query string params when the request&amp;rsquo;s content type is &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; (default &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">요청의 컨텐츠 유형이 &lt;em&gt;application / x-www-form-urlencoded&lt;/em&gt; (기본 &lt;code&gt;False&lt;/code&gt; ) 인 경우 요청 스트림을 자동으로 소비하고 결과를 요청의 쿼리 문자열 매개 변수로 병합 하려면 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0bfb394bbb941980b33bc5f06d723905e0cd45d7" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;True&lt;/code&gt; in order to strip the trailing slash, if present, at the end of the URL path (default &lt;code&gt;False&lt;/code&gt;). When this option is enabled, the URL path is normalized by stripping the trailing slash character. This lets the application define a single route to a resource for a path that may or may not end in a forward slash. However, this behavior can be problematic in certain cases, such as when working with authentication schemes that employ URL-based signatures.</source>
          <target state="translated">URL 경로 끝에있는 경우 후행 슬래시를 제거 하려면 &lt;code&gt;True&lt;/code&gt; 로 설정합니다 (기본값 &lt;code&gt;False&lt;/code&gt; ). 이 옵션을 사용하면 후행 슬래시 문자를 제거하여 URL 경로를 정규화합니다. 이를 통해 애플리케이션은 슬래시로 끝나거나 끝나지 않을 수있는 경로에 대해 리소스에 대한 단일 경로를 정의 할 수 있습니다. 그러나이 동작은 URL 기반 서명을 사용하는 인증 체계로 작업 할 때와 같은 특정 경우에 문제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c9a08e99834f7ab6619875300437d871902a166" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;True&lt;/code&gt; to split query string values on any non-percent-encoded commas (default &lt;code&gt;False&lt;/code&gt;). When &lt;code&gt;False&lt;/code&gt;, values containing commas are left as-is. In this mode, list items are taken only from multiples of the same parameter name within the query string (i.e. &lt;code&gt;/?t=1,2,3&amp;amp;t=4&lt;/code&gt; becomes &lt;code&gt;['1,2,3', '4']&lt;/code&gt;). When &lt;code&gt;auto_parse_qs_csv&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, the query string value is also split on non-percent-encoded commas and these items are added to the final list (i.e. &lt;code&gt;/?t=1,2,3&amp;amp;t=4&lt;/code&gt; becomes &lt;code&gt;['1', '2', '3', '4']&lt;/code&gt;).</source>
          <target state="translated">백분율로 인코딩되지 않은 쉼표로 쿼리 문자열 값을 분할 하려면 &lt;code&gt;True&lt;/code&gt; 로 설정 합니다 (기본값 &lt;code&gt;False&lt;/code&gt; ). 때 &lt;code&gt;False&lt;/code&gt; , 쉼표를 포함하는 값은 그대로 남아 있습니다. 이 모드에서 목록 항목은 쿼리 문자열 내에서 동일한 매개 변수 이름의 배수에서만 가져옵니다 (예 : &lt;code&gt;/?t=1,2,3&amp;amp;t=4&lt;/code&gt; 가 &lt;code&gt;['1,2,3', '4']&lt;/code&gt; ). &lt;code&gt;auto_parse_qs_csv&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 쿼리 문자열 값도 백분율로 인코딩되지 않은 쉼표로 분할되고 이러한 항목이 최종 목록에 추가됩니다 (예 : &lt;code&gt;/?t=1,2,3&amp;amp;t=4&lt;/code&gt; 는 &lt;code&gt;['1', '2', '3', '4']&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cbe1a1be3ab9ce3c5b5518e740b5f5c1a18332b5" translate="yes" xml:space="preserve">
          <source>Sets the Content-Type header.</source>
          <target state="translated">Content-Type 헤더를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="812e1510dc3a69bba7169d046432d0ac229b769f" translate="yes" xml:space="preserve">
          <source>Setting Cookies</source>
          <target state="translated">쿠키 설정</target>
        </trans-unit>
        <trans-unit id="ee8aea2755b74bfe18b18b8045d2bb9805310e69" translate="yes" xml:space="preserve">
          <source>Setting cookies on a response is done via &lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응답에 쿠키를 설정하는 것은 &lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt; &lt;code&gt;set_cookie()&lt;/code&gt; &lt;/a&gt; 를 통해 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="9028342680035b2ad208b805a21f520595fc0315" translate="yes" xml:space="preserve">
          <source>Setting cookies on a response may be done either via &lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt;&lt;code&gt;append_header()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응답에 대한 쿠키 설정은 &lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt; &lt;code&gt;set_cookie()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt; &lt;code&gt;append_header()&lt;/code&gt; &lt;/a&gt; 를 통해 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4b98c2c148cc55f43358c84052c0a677a5b68fef" translate="yes" xml:space="preserve">
          <source>Shiftgig</source>
          <target state="translated">Shiftgig</target>
        </trans-unit>
        <trans-unit id="4201119b032db5c4951c0cb35d2d2de5c804364c" translate="yes" xml:space="preserve">
          <source>Short-circuiting</source>
          <target state="translated">Short-circuiting</target>
        </trans-unit>
        <trans-unit id="bbf5e0faccce9f4212fd27e220404de17fcaccb8" translate="yes" xml:space="preserve">
          <source>Similar logic can be applied globally with middleware. (See also: &lt;a href=&quot;../api/middleware#middleware&quot;&gt;falcon.middleware&lt;/a&gt;)</source>
          <target state="translated">비슷한 논리를 미들웨어로 전체적으로 적용 할 수 있습니다. (또한 참조 : &lt;a href=&quot;../api/middleware#middleware&quot;&gt;falcon.middleware&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="fdaf2f9ce9f0c0a0bd96c1ed0494cd06d4830358" translate="yes" xml:space="preserve">
          <source>Similar to the way multiple keys in form data is handled, if a query parameter is assigned a comma-separated list of values (e.g., &lt;code&gt;foo=a,b,c&lt;/code&gt;), only one of those values will be returned, and it is undefined which one. Use &lt;a href=&quot;#falcon.Request.get_param_as_list&quot;&gt;&lt;code&gt;get_param_as_list()&lt;/code&gt;&lt;/a&gt; to retrieve all the values.</source>
          <target state="translated">쿼리 데이터에 쉼표로 구분 된 값 목록 (예 : &lt;code&gt;foo=a,b,c&lt;/code&gt; ) 이 할당되면 양식 데이터의 여러 키가 처리되는 방식과 유사하게 해당 값 중 하나만 반환되며 정의되지 않습니다. 어느 것. &lt;a href=&quot;#falcon.Request.get_param_as_list&quot;&gt; &lt;code&gt;get_param_as_list()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 모든 값을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="563523c7fb9aeb90cd3ca9914f9f94d5abfe8ef0" translate="yes" xml:space="preserve">
          <source>Simple example:</source>
          <target state="translated">간단한 예 :</target>
        </trans-unit>
        <trans-unit id="86908d09bd9d22561b8032f4362cb1ed2e837e66" translate="yes" xml:space="preserve">
          <source>Simply inherit from this class in your test case classes instead of &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;testtools.TestCase&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;testtools.TestCase&lt;/code&gt; 대신 테스트 케이스 클래스에서이 클래스를 상속하십시오 .</target>
        </trans-unit>
        <trans-unit id="24e978a144d78750b606e3ea3117ad2308417d74" translate="yes" xml:space="preserve">
          <source>Simply inherit from this class in your test case classes instead of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;testtools.TestCase&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;testtools.TestCase&lt;/code&gt; 대신 테스트 케이스 클래스의이 클래스에서 상속하기 만하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="9efe3729516697080fa3b31c3cef6c25e4944ad4" translate="yes" xml:space="preserve">
          <source>Simulates a DELETE request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 DELETE 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="2c88d03b65011d898a0f67608343b138639a3131" translate="yes" xml:space="preserve">
          <source>Simulates a GET request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 GET 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="0f65072cc15597ea07ed04c5f330c07749452b25" translate="yes" xml:space="preserve">
          <source>Simulates a HEAD request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 HEAD 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="a274d9d17eb05ebbadd3c81df6552244131d1a17" translate="yes" xml:space="preserve">
          <source>Simulates a PATCH request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 PATCH 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="4026afbf34de290320ef825ed8bc8002afa4427c" translate="yes" xml:space="preserve">
          <source>Simulates a POST request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 POST 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="b020551ee2a87787d04649de4b52ea03354c6858" translate="yes" xml:space="preserve">
          <source>Simulates a PUT request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 PUT 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="4c437ea208d8a355140917299f3fd6dbbc59f3b7" translate="yes" xml:space="preserve">
          <source>Simulates a request to &lt;code&gt;self.api&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self.api&lt;/code&gt; 요청을 시뮬레이션합니다 .</target>
        </trans-unit>
        <trans-unit id="ba77c20647151932a4a9d1d6cd46c18dd60a06ad" translate="yes" xml:space="preserve">
          <source>Simulates a request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="00af3ff2c255abf767fc2dcd20c3dd2488a1660e" translate="yes" xml:space="preserve">
          <source>Simulates an OPTIONS request to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 OPTIONS 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="974b8e9c9333ccb3135405015d459ba83e89d75f" translate="yes" xml:space="preserve">
          <source>Simulates requests to a WSGI application.</source>
          <target state="translated">WSGI 애플리케이션에 대한 요청을 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="88824c2a99b73ac27b74cb09de3fdb3efd111f18" translate="yes" xml:space="preserve">
          <source>Since this object is provided by the WSGI server itself, rather than by Falcon, it may behave differently depending on how you host your app. For example, attempting to read more bytes than are expected (as determined by the Content-Length header) may or may not block indefinitely. It&amp;rsquo;s a good idea to test your WSGI server to find out how it behaves.</source>
          <target state="translated">이 객체는 Falcon이 아닌 WSGI 서버 자체에서 제공되므로 앱 호스팅 방식에 따라 다르게 작동 할 수 있습니다. 예를 들어 (Content-Length 헤더에 의해 결정된) 예상보다 많은 바이트를 읽으려고 시도하면 무기한 차단되거나 차단되지 않을 수 있습니다. WSGI 서버를 테스트하여 작동 방식을 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c9d0de9421139e06ca3049737a4da5165914c73d" translate="yes" xml:space="preserve">
          <source>Since we are building an image-sharing API, let&amp;rsquo;s start by creating an &amp;ldquo;images&amp;rdquo; resource. Create a new module, &lt;code&gt;images.py&lt;/code&gt; next to &lt;code&gt;app.py&lt;/code&gt;, and add the following code to it:</source>
          <target state="translated">이미지 공유 API를 구축하고 있으므로 &quot;이미지&quot;리소스를 만들어 보겠습니다. &lt;code&gt;app.py&lt;/code&gt; 옆에 &lt;code&gt;images.py&lt;/code&gt; 새 모듈을 작성 하고 다음 코드를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="4a540a31340238b7255a499672950eb2f1bd6896" translate="yes" xml:space="preserve">
          <source>Snappy unit testing through WSGI helpers and mocks</source>
          <target state="translated">WSGI 헬퍼 및 모의를 통한 Snappy 단위 테스트</target>
        </trans-unit>
        <trans-unit id="662dd5ad7e76c16c0d67c23b86e41dc092cd7afb" translate="yes" xml:space="preserve">
          <source>So far we have only implemented a responder for GET. Let&amp;rsquo;s see what happens when a different method is requested:</source>
          <target state="translated">지금까지는 GET에 대한 응답자 만 구현했습니다. 다른 방법이 요청 될 때 어떻게되는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="0450c161e801905e3f771af7fcb01580c22414f6" translate="yes" xml:space="preserve">
          <source>So-called &amp;ldquo;link-extension&amp;rdquo; elements, as defined by RFC 5988, are not yet supported. See also Issue #288.</source>
          <target state="translated">RFC 5988에 의해 정의 된 소위 &quot;링크 확장&quot;요소는 아직 지원되지 않습니다. Issue # 288도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">소스 코드</target>
        </trans-unit>
        <trans-unit id="5eb74b9ae4ba084aa93615c1403c54d982f1ccfb" translate="yes" xml:space="preserve">
          <source>Specifies when the cookie should expire. By default, cookies expire when the user agent exits.</source>
          <target state="translated">쿠키 만료시기를 지정합니다. 기본적으로 쿠키는 사용자 에이전트가 종료 될 때 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="b6c6f12fa0503103d2502596ed6f908c43fa25d9" translate="yes" xml:space="preserve">
          <source>Start by defining a list of media types the service will accept. Place this constant near the top, just after the import statements in &lt;code&gt;images.py&lt;/code&gt;:</source>
          <target state="translated">서비스에서 허용 할 미디어 유형 목록을 정의하여 시작하십시오. &lt;code&gt;images.py&lt;/code&gt; 의 import 문 바로 뒤에이 상수를 맨 위 근처에 배치하십시오 .</target>
        </trans-unit>
        <trans-unit id="c53b84e1d62f70d8fac0745c7be82317a9a19840" translate="yes" xml:space="preserve">
          <source>Starting with version 2.0, the default for the &lt;a href=&quot;../api/api#falcon.RequestOptions.strip_url_path_trailing_slash&quot;&gt;&lt;code&gt;strip_url_path_trailing_slash&lt;/code&gt;&lt;/a&gt; request option changed from &lt;code&gt;True&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">버전 2.0부터 &lt;a href=&quot;../api/api#falcon.RequestOptions.strip_url_path_trailing_slash&quot;&gt; &lt;code&gt;strip_url_path_trailing_slash&lt;/code&gt; &lt;/a&gt; 요청 옵션 의 기본값이 &lt;code&gt;True&lt;/code&gt; 에서 &lt;code&gt;False&lt;/code&gt; 로 변경되었습니다 .</target>
        </trans-unit>
        <trans-unit id="fc37e6d911befd4a4898219a8d9270e2772191e8" translate="yes" xml:space="preserve">
          <source>Static routes are matched in LIFO order. Therefore, if the same prefix is used for two routes, the second one will override the first. This also means that more specific routes should be added &lt;em&gt;after&lt;/em&gt; less specific ones. For example, the following sequence would result in &lt;code&gt;'/foo/bar/thing.js'&lt;/code&gt; being mapped to the &lt;code&gt;'/foo/bar'&lt;/code&gt; route, and &lt;code&gt;'/foo/xyz/thing.js'&lt;/code&gt; being mapped to the &lt;code&gt;'/foo'&lt;/code&gt; route:</source>
          <target state="translated">고정 경로는 LIFO 순서로 일치합니다. 따라서 두 개의 경로에 동일한 접두사가 사용되면 두 번째 경로가 첫 번째 경로보다 우선합니다. 이것은 또한 덜 구체적인 경로 &lt;em&gt;뒤에&lt;/em&gt; 더 구체적인 경로를 추가해야 함을 의미 합니다. 예를 들어, 다음 순서는 &lt;code&gt;'/foo/bar/thing.js'&lt;/code&gt; 가 &lt;code&gt;'/foo/bar'&lt;/code&gt; 경로 에 매핑되고 &lt;code&gt;'/foo/xyz/thing.js'&lt;/code&gt; 가 &lt;code&gt;'/foo'&lt;/code&gt; 에 매핑됩니다. 노선:</target>
        </trans-unit>
        <trans-unit id="2e20fcad0088815384ca7643b86b510910b6d898" translate="yes" xml:space="preserve">
          <source>Static routes provide a way to serve files directly. This feature provides an alternative to serving files at the web server level when you don&amp;rsquo;t have that option, when authorization is required, or for testing purposes.</source>
          <target state="translated">고정 경로는 파일을 직접 제공하는 방법을 제공합니다. 이 기능은 옵션이없는 경우, 인증이 필요한 경우 또는 테스트 목적으로 웹 서버 수준에서 파일을 제공하는 대안을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7f5583f5096a76c834c0bcc4f4885ffca8fe34cd" translate="yes" xml:space="preserve">
          <source>Status Codes</source>
          <target state="translated">상태 코드</target>
        </trans-unit>
        <trans-unit id="b5ae3ef33e83e257a6d9f01f8f5e3b2c8b064a1d" translate="yes" xml:space="preserve">
          <source>Straightforward exception handling</source>
          <target state="translated">간단한 예외 처리</target>
        </trans-unit>
        <trans-unit id="79c55462f777bec2b086eb3b494cab24883963c8" translate="yes" xml:space="preserve">
          <source>String representing response content.</source>
          <target state="translated">응답 내용을 나타내는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4408cabddcda0e622f916a2ce317545f022d79b4" translate="yes" xml:space="preserve">
          <source>String representing response content. If Unicode, Falcon will encode as UTF-8 in the response.</source>
          <target state="translated">응답 내용을 나타내는 문자열입니다. 유니 코드 인 경우 Falcon은 응답에서 UTF-8로 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="025dc49987125a2f8778cd153f13e51b92f75079" translate="yes" xml:space="preserve">
          <source>Support for CPython 2.6 is deprecated and will be removed in Falcon 2.0.</source>
          <target state="translated">CPython 2.6에 대한 지원은 더 이상 사용되지 않으며 Falcon 2.0에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="8419d242a258bc405fcb80df0dcc4edeb5ccaae7" translate="yes" xml:space="preserve">
          <source>Supported HTTP methods are those specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7231&quot;&gt;RFC 7231&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc5789&quot;&gt;RFC 5789&lt;/a&gt;. This includes GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, and PATCH.</source>
          <target state="translated">지원되는 HTTP 메서드는 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231&quot;&gt;RFC 7231&lt;/a&gt; 및 &lt;a href=&quot;https://tools.ietf.org/html/rfc5789&quot;&gt;RFC 5789에&lt;/a&gt; 지정된 메서드 입니다. 여기에는 GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE 및 PATCH가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="dc0bfe9d44c9040a72d2a1656f382faee40c5063" translate="yes" xml:space="preserve">
          <source>Supported Handler Types</source>
          <target state="translated">지원되는 핸들러 유형</target>
        </trans-unit>
        <trans-unit id="6278ad6514f28afb3102e7328e3136c1abe2c689" translate="yes" xml:space="preserve">
          <source>Supports Python 2.6, 2.7, 3.3, 3.4 and 3.6</source>
          <target state="translated">Python 2.6, 2.7, 3.3, 3.4 및 3.6 지원</target>
        </trans-unit>
        <trans-unit id="9fb85894bb8482090e56714ed0f846201b91c8ee" translate="yes" xml:space="preserve">
          <source>Supports Python 2.7, 3.5+</source>
          <target state="translated">Python 2.7, 3.5 이상 지원</target>
        </trans-unit>
        <trans-unit id="eec6ee98efbd89d4f4f05a322d3afa1bf0a589b3" translate="yes" xml:space="preserve">
          <source>Suppose you have the following routes:</source>
          <target state="translated">다음과 같은 경로가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="4800e348d69f9583c064ceda96039ce27d1f83d4" translate="yes" xml:space="preserve">
          <source>Take a moment to run pytest again to check your progress:</source>
          <target state="translated">pytest를 다시 실행하여 진행 상황을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="caba85a38659d35c5f12809be3024b3ed7677165" translate="yes" xml:space="preserve">
          <source>Testing your application</source>
          <target state="translated">응용 프로그램 테스트</target>
        </trans-unit>
        <trans-unit id="e3e74a777f6f08e831eebf8c1a6642d5c1d71643" translate="yes" xml:space="preserve">
          <source>Tests can either be written using Python&amp;rsquo;s standard &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module, or with any of a number of third-party testing frameworks, such as &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;. For this tutorial we&amp;rsquo;ll use &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt; since it allows for more pythonic test code as compared to the JUnit-inspired &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">테스트 중 파이썬의 표준 사용하여 쓸 수있는 &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 모듈을, 또는 타사 테스트 프레임 워크, 임의의 수의 &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt; . 이 튜토리얼에서는 &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest를&lt;/a&gt; 사용 합니다. JUnit에서 영감을 얻은 &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 모듈에 비해 더 많은 pythonic 테스트 코드를 허용하기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="54c58314292008523768f9b9acf90d8214abfdb8" translate="yes" xml:space="preserve">
          <source>Tests can either be written using Python&amp;rsquo;s standard &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module, or with any of a number of third-party testing frameworks, such as &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;. For this tutorial we&amp;rsquo;ll use &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt; since it allows for more pythonic test code as compared to the JUnit-inspired &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">테스트는 Python의 표준 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 모듈을 사용하거나 &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt; 와 같은 여러 타사 테스트 프레임 워크를 사용하여 작성할 수 있습니다. 이 튜토리얼 에서는 JUnit에서 영감을받은 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 모듈에 비해 더 파이썬적인 테스트 코드를 허용하므로 &lt;a href=&quot;http://docs.pytest.org/en/latest/&quot;&gt;pytest를&lt;/a&gt; 사용할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="e1883b672a70c4a8a4e982ad76a7467e27bbdf46" translate="yes" xml:space="preserve">
          <source>Text encoding of the response body, or &lt;code&gt;None&lt;/code&gt; if the encoding can not be determined.</source>
          <target state="translated">응답 본문의 텍스트 인코딩 또는 인코딩을 결정할 수없는 경우 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d14f108604f9b9cb80e71415bbf3b0e54ea374ff" translate="yes" xml:space="preserve">
          <source>That being said, IO-bound Falcon APIs are usually scaled via green threads (courtesy of the &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; library or similar) which aren&amp;rsquo;t truly running concurrently, so there may be some edge cases where Falcon is not thread-safe that haven&amp;rsquo;t been discovered yet.</source>
          <target state="translated">즉, IO 바운드 Falcon API는 일반적으로 실제로 실행되지 않는 녹색 스레드 ( &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; 라이브러리 또는 이와 유사한)를 통해 확장 되므로 Falcon이 스레드 안전하지 않은 일부 경우가있을 수 있습니다 아직 발견되었습니다.</target>
        </trans-unit>
        <trans-unit id="b610c96c42c1de8c3ace2defdc8516d390e97dd0" translate="yes" xml:space="preserve">
          <source>That being said, IO-bound Falcon APIs are usually scaled via multiple processes and green threads (courtesy of the &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; library or similar) which aren&amp;rsquo;t truly running concurrently, so there may be some edge cases where Falcon is not thread-safe that we aren&amp;rsquo;t aware of. If you run into any issues, please let us know.</source>
          <target state="translated">즉, IO-bound Falcon API는 일반적으로 실제로 동시에 실행되지 않는 여러 프로세스와 녹색 스레드 ( &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; 라이브러리 또는 유사)를 통해 확장 되므로 Falcon이 스레드로부터 안전하지 않은 경우가있을 수 있습니다. 우리는 알지 못합니다. 문제가 발생하면 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="91760a57ebb6de47220f664ed3fe52a2307b831d" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;Vary&amp;rdquo; header field in a response describes what parts of a request message, aside from the method, Host header field, and request target, might influence the origin server&amp;rsquo;s process for selecting and representing this response. The value consists of either a single asterisk (&amp;ldquo;*&amp;rdquo;) or a list of header field names (case-insensitive).</source>
          <target state="translated">응답의 &quot;Vary&quot;헤더 필드는 메소드, 호스트 헤더 필드 및 요청 대상 외에 요청 메시지의 어떤 부분이이 응답을 선택하고 나타내는 오리진 서버의 프로세스에 영향을 미칠 수 있는지를 설명합니다. 값은 단일 별표 (&amp;ldquo;*&amp;rdquo;) 또는 헤더 필드 이름 목록 (대소 문자 구분)으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="d5569cd35f7571a8587db177ee937a538bed7742" translate="yes" xml:space="preserve">
          <source>The 301 (Moved Permanently) status code indicates that the target resource has been assigned a new permanent URI.</source>
          <target state="translated">301 (영구적으로 이동 됨) 상태 코드는 대상 리소스에 새로운 영구 URI가 할당되었음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1b3d47e4c8b5075186c10d4422e75e9fd42136d0" translate="yes" xml:space="preserve">
          <source>The 302 (Found) status code indicates that the target resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client ought to continue to use the effective request URI for future requests.</source>
          <target state="translated">302 (발견 된) 상태 코드는 대상 자원이 일시적으로 다른 URI에 있음을 나타냅니다. 경우에 따라 리디렉션이 변경 될 수 있으므로 클라이언트는 향후 요청에 효과적인 요청 URI를 계속 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="726b4242ef422047aeb3d20c6ce4e902ac145e3c" translate="yes" xml:space="preserve">
          <source>The 303 (See Other) status code indicates that the server is redirecting the user agent to a &lt;em&gt;different&lt;/em&gt; resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.</source>
          <target state="translated">303 (기타 참조) 상태 코드는 위치 헤더 필드에 URI로 표시된대로 서버가 사용자 에이전트를 &lt;em&gt;다른&lt;/em&gt; 자원으로 경로 재지 정하고 있음을 나타냅니다. 이는 원래 요청에 대한 간접 응답을 제공하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="60e2e62bbd068fa3a3dc4c65a18c4d3e392cb9eb" translate="yes" xml:space="preserve">
          <source>The 307 (Temporary Redirect) status code indicates that the target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI. Since the redirection can change over time, the client ought to continue using the original effective request URI for future requests.</source>
          <target state="translated">307 (Temporary Redirect) 상태 코드는 대상 리소스가 다른 URI 아래에 일시적으로 상주하고 사용자 에이전트가 해당 URI로 자동 리디렉션을 수행하는 경우 요청 메소드를 변경해서는 안된다는 것을 나타냅니다. 리디렉션은 시간이 지남에 따라 변경 될 수 있으므로 클라이언트는 향후 요청에 원래 유효 요청 URI를 계속 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="0d685714d7f7c4aa8d639d8628cfc53dac9a432e" translate="yes" xml:space="preserve">
          <source>The 308 (Permanent Redirect) status code indicates that the target resource has been assigned a new permanent URI.</source>
          <target state="translated">308 (영구적 리디렉션) 상태 코드는 대상 리소스에 새로운 영구 URI가 할당되었음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cc3384e0a60969e2be04db6337b00636752c28c0" translate="yes" xml:space="preserve">
          <source>The 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable and that the server owners desire that remote links to that resource be removed. Such an event is common for limited-time, promotional services and for resources belonging to individuals no longer associated with the origin server&amp;rsquo;s site. It is not necessary to mark all permanently unavailable resources as &amp;ldquo;gone&amp;rdquo; or to keep the mark for any length of time &amp;ndash; that is left to the discretion of the server owner.</source>
          <target state="translated">410 응답은 기본적으로 수신자에게 자원을 의도적으로 사용할 수 없으며 서버 소유자가 해당 자원에 대한 원격 링크를 제거하기를 원한다는 것을 통지하여 웹 유지 보수 작업을 지원하기위한 것입니다. 이러한 이벤트는 제한된 기간의 판촉 서비스 및 더 이상 원본 서버 사이트와 관련이없는 개인의 리소스에 공통적입니다. 영구적으로 사용할 수없는 모든 리소스를 &quot;사라진&quot;것으로 표시하거나 서버 소유자의 재량에 따라 오랫동안 마크를 유지할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="37d41634e1486182ae5ed330e8da9002cbdd8832" translate="yes" xml:space="preserve">
          <source>The 423 (Locked) status code means the source or destination resource of a method is locked. This response SHOULD contain an appropriate precondition or postcondition code, such as &amp;lsquo;lock-token-submitted&amp;rsquo; or &amp;lsquo;no-conflicting-lock&amp;rsquo;.</source>
          <target state="translated">423 (Locked) 상태 코드는 메소드의 소스 또는 대상 자원이 잠겨 있음을 의미합니다. 이 응답에는 '잠금 토큰 제출'또는 '충돌 방지 잠금'과 같은 적절한 사전 조건 또는 사후 조건 코드가 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="b4a2e06651b68836701d3a7cb603b045c6e96900" translate="yes" xml:space="preserve">
          <source>The 424 (Failed Dependency) status code means that the method could not be performed on the resource because the requested action depended on another action and that action failed.</source>
          <target state="translated">424 (실패 종속성) 상태 코드는 요청 된 조치가 다른 조치에 의존하고 해당 조치가 실패했기 때문에 자원에서 메소드를 수행 할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f699dbe1affd27bc27a1c4e9c8c3bf1b9d1409af" translate="yes" xml:space="preserve">
          <source>The 428 status code indicates that the origin server requires the request to be conditional.</source>
          <target state="translated">428 상태 코드는 오리진 서버가 요청이 조건부 여야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="340983f703bea50cbcfa389827e03f93960292cc" translate="yes" xml:space="preserve">
          <source>The 431 status code indicates that the server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.</source>
          <target state="translated">431 상태 코드는 헤더 필드가 너무 커서 서버가 요청을 처리하지 않을 것임을 나타냅니다. 요청 헤더 필드의 크기를 줄인 후 요청을 다시 제출할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ecb4ba8dba027dd2009504727fa8640f03dc45e" translate="yes" xml:space="preserve">
          <source>The 501 (Not Implemented) status code indicates that the server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.</source>
          <target state="translated">501 (구현되지 않음) 상태 코드는 서버가 요청을 수행하는 데 필요한 기능을 지원하지 않음을 나타냅니다. 서버가 요청 방법을 인식하지 못하고 자원을 지원할 수없는 경우 적절한 응답입니다.</target>
        </trans-unit>
        <trans-unit id="cb5a6e6224a6befed044cf459ac3ad6b9a312b3f" translate="yes" xml:space="preserve">
          <source>The 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.</source>
          <target state="translated">504 (Gateway Timeout) 상태 코드는 게이트웨이 또는 프록시 역할을하는 서버가 요청을 완료하기 위해 액세스해야하는 업스트림 서버로부터 적시에 응답을받지 못했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7d3e56bd7be8142221a29289658a2e3d7346bb69" translate="yes" xml:space="preserve">
          <source>The 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message. The server is indicating that it is unable or unwilling to complete the request using the same major version as the client (as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-2.6&quot;&gt;RFC 7230, Section 2.6&lt;/a&gt;), other than with this error message. The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.</source>
          <target state="translated">505 (HTTP 버전 지원되지 않음) 상태 코드는 서버가 요청 메시지에 사용 된 주요 HTTP 버전을 지원하지 않거나 지원하지 않음을 나타냅니다. 서버는 이 오류 메시지를 제외 하고 클라이언트와 동일한 메이저 버전 ( &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-2.6&quot;&gt;RFC 7230, 섹션 2.6에&lt;/a&gt; 설명 된 대로)을 사용하여 요청을 완료 할 수 없거나 완료하지 않음을 나타냅니다 . 서버는 해당 버전이 지원되지 않는 이유와 해당 서버에서 지원하는 다른 프로토콜을 설명하는 505 응답에 대한 표현을 생성해야합니다 (SHOULD).</target>
        </trans-unit>
        <trans-unit id="6cfe58d6c6aa1b9a0d0a3a747564d201b045f349" translate="yes" xml:space="preserve">
          <source>The 507 (Insufficient Storage) status code means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. This condition is considered to be temporary. If the request that received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.</source>
          <target state="translated">507 (부족한 저장소) 상태 코드는 서버가 요청을 성공적으로 완료하는 데 필요한 표현을 저장할 수 없기 때문에 자원에서 메소드를 수행 할 수 없음을 의미합니다. 이 상태는 일시적인 것으로 간주됩니다. 이 상태 코드를 수신 한 요청이 사용자 조치의 결과 인 경우 별도의 사용자 조치가 요청할 때까지 요청을 반복해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="57373a3fd3bc21f998e825b6baefc168ab517736" translate="yes" xml:space="preserve">
          <source>The 508 (Loop Detected) status code indicates that the server terminated an operation because it encountered an infinite loop while processing a request with &amp;ldquo;Depth: infinity&amp;rdquo;. This status indicates that the entire operation failed.</source>
          <target state="translated">508 (Loop Detected) 상태 코드는 &quot;Depth : infinity&quot;로 요청을 처리하는 동안 무한 루프가 발생하여 서버가 작업을 종료했음을 나타냅니다. 이 상태는 전체 작업이 실패했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6cd7b38dbe1a6e26eb4ce50115f5dc8d8ec3b5d7" translate="yes" xml:space="preserve">
          <source>The 511 status SHOULD NOT be generated by origin servers; it is intended for use by intercepting proxies that are interposed as a means of controlling access to the network.</source>
          <target state="translated">511 상태는 오리진 서버에 의해 생성되지 않아야한다. 네트워크에 대한 액세스를 제어하는 ​​수단으로 삽입 된 프록시를 가로 채서 사용하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="0e2021f09cffdfd7e8e3c2b6e4af6afc876e3ba4" translate="yes" xml:space="preserve">
          <source>The 511 status code indicates that the client needs to authenticate to gain network access.</source>
          <target state="translated">511 상태 코드는 클라이언트가 네트워크 액세스 권한을 얻기 위해 인증해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c7b375b386cad2cf0c706ec29c2501981f15368a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#falcon.API.add_route&quot;&gt;&lt;code&gt;add_route()&lt;/code&gt;&lt;/a&gt; method is used to associate a URI template with a resource. Falcon then maps incoming requests to resources based on these templates.</source>
          <target state="translated">&lt;a href=&quot;api#falcon.API.add_route&quot;&gt; &lt;code&gt;add_route()&lt;/code&gt; &lt;/a&gt; 메소드는 URI 리소스와 템플릿을 연결하는 데 사용된다. 그런 다음 Falcon은 이러한 템플릿을 기반으로 들어오는 요청을 리소스에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="b16e989ab1e7195020236dcccbd9b80ae4c1fe1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; class contains helper methods, such as &lt;code&gt;to_json()&lt;/code&gt; and &lt;code&gt;to_dict()&lt;/code&gt;, that can be used from within custom serializers. For example:</source>
          <target state="translated">&lt;a href=&quot;errors#falcon.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt; 클래스는 같은 헬퍼 방법, 포함 &lt;code&gt;to_json()&lt;/code&gt; 및 &lt;code&gt;to_dict()&lt;/code&gt; 사용자 정의 시리얼 라이저 내에서 사용할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="65b25e21bae5e9d50ada2a93cc95a03e94707ebe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object represents the incoming HTTP request. It exposes properties and methods for examining headers, query string parameters, and other metadata associated with the request. A file-like stream object is also provided for reading any data that was included in the body of the request.</source>
          <target state="translated">&lt;a href=&quot;request_and_response#falcon.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 객체는 들어오는 HTTP 요청을 나타냅니다. 헤더, 쿼리 문자열 매개 변수 및 요청과 관련된 기타 메타 데이터를 검사하기위한 속성과 메서드를 제공합니다. 요청 본문에 포함 된 모든 데이터를 읽기 위해 파일과 같은 스트림 개체도 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="d64cdea96b1a83d53287b37a25f2434d0d8aa000" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Request.cookies&quot;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; attribute is a regular &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;request_and_response#falcon.Request.cookies&quot;&gt; &lt;code&gt;cookies&lt;/code&gt; &lt;/a&gt; 속성은 정기적 인 &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="4734fa80d7bfc7dbe4727753201a6b446e9166c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Request.cookies&quot;&gt;&lt;code&gt;cookies&lt;/code&gt;&lt;/a&gt; attribute returns a copy of the response cookie dictionary. Assign it to a variable, as shown in the above example, to improve performance when you need to look up more than one cookie.</source>
          <target state="translated">&lt;a href=&quot;request_and_response#falcon.Request.cookies&quot;&gt; &lt;code&gt;cookies&lt;/code&gt; &lt;/a&gt; 반환 응답 쿠키 사전의 사본 때문이다. 하나 이상의 쿠키를 찾아야 할 때 성능을 향상 시키려면 위의 예와 같이 변수에 변수를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="888cea72316f9cddd409828c37a637a4cf7684e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object represents the application&amp;rsquo;s HTTP response to the above request. It provides properties and methods for setting status, header and body data. The &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object also exposes a dict-like &lt;a href=&quot;request_and_response#falcon.Response.context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; property for passing arbitrary data to hooks and middleware methods.</source>
          <target state="translated">&lt;a href=&quot;request_and_response#falcon.Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 목적은 상기 요청에 대한 응용 프로그램의 HTTP 응답을 나타냅니다. 상태, 헤더 및 본문 데이터를 설정하기위한 속성 및 방법을 제공합니다. &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 객체도 딕셔너리 같은 노출 &lt;a href=&quot;request_and_response#falcon.Response.context&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt; 후크 미들웨어 방식으로 임의의 데이터를 전달하는 속성.</target>
        </trans-unit>
        <trans-unit id="fad7b66e61b91a5b2444c8aea097a08dd5c31f62" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt; method should be used instead of &lt;a href=&quot;request_and_response#falcon.Response.set_header&quot;&gt;&lt;code&gt;set_header()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt;&lt;code&gt;append_header()&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;request_and_response#falcon.Response.set_header&quot;&gt;&lt;code&gt;set_header()&lt;/code&gt;&lt;/a&gt; you cannot set multiple headers with the same name (which is how multiple cookies are sent to the client). Furthermore, &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt;&lt;code&gt;append_header()&lt;/code&gt;&lt;/a&gt; appends multiple values to the same header field in a way that is not compatible with the special format required by the &lt;code&gt;Set-Cookie&lt;/code&gt; header.</source>
          <target state="translated">&lt;a href=&quot;request_and_response#falcon.Response.set_cookie&quot;&gt; &lt;code&gt;set_cookie()&lt;/code&gt; &lt;/a&gt; 메소드가 대신 사용되어야 &lt;a href=&quot;request_and_response#falcon.Response.set_header&quot;&gt; &lt;code&gt;set_header()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt; &lt;code&gt;append_header()&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;request_and_response#falcon.Response.set_header&quot;&gt; &lt;code&gt;set_header()&lt;/code&gt; &lt;/a&gt; 를 사용하면 이름이 같은 여러 헤더를 설정할 수 없습니다 (이는 여러 쿠키가 클라이언트에 전송되는 방식입니다). 또한 &lt;a href=&quot;request_and_response#falcon.Response.append_header&quot;&gt; &lt;code&gt;append_header()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;Set-Cookie&lt;/code&gt; 헤더에 필요한 특수 형식과 호환되지 않는 방식으로 동일한 헤더 필드에 여러 값을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="e6cd0120941e3e305c5928f34ca490f077e2361e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt; character is often used instead of &lt;code&gt;%20&lt;/code&gt; to represent spaces in query string params, due to the historical conflation of form parameter encoding (&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;) and URI percent-encoding. Therefore, Falcon, converts &lt;code&gt;+&lt;/code&gt; to a space when decoding strings.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 의 문자 종종 대신 사용되는 &lt;code&gt;%20&lt;/code&gt; 인해 형태 파라미터 인코딩 (역사적 융합에 쿼리 스트링 PARAMS 공백을 나타내는 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; )와 URI의 퍼센트 인코딩. 따라서 Falcon은 문자열을 디코딩 할 때 &lt;code&gt;+&lt;/code&gt; 를 공백으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="234169c00df14981c9c02886b9808f15714759f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;falcon&lt;/code&gt; module provides a number of constants for common media types, including &lt;code&gt;falcon.MEDIA_JSON&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_MSGPACK&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_YAML&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_XML&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_HTML&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_JS&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_TEXT&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_JPEG&lt;/code&gt;, &lt;code&gt;falcon.MEDIA_PNG&lt;/code&gt;, and &lt;code&gt;falcon.MEDIA_GIF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;falcon&lt;/code&gt; 모듈을 포함한 일반적인 미디어 유형, 상수의 수 제공 &lt;code&gt;falcon.MEDIA_JSON&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_MSGPACK&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_YAML&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_XML&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_HTML&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_JS&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_TEXT&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_JPEG&lt;/code&gt; , &lt;code&gt;falcon.MEDIA_PNG&lt;/code&gt; 을 , 및 &lt;code&gt;falcon.MEDIA_GIF&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4fdec9cfe6f041a3303843d674dec970b0300b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;falcon&lt;/code&gt; module provides a number of constants for common media types, including the following:</source>
          <target state="translated">&lt;code&gt;falcon&lt;/code&gt; 모듈은 다음과 같은 일반적인 미디어 유형에 대한 상수를 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="7cc9aab31febdd84ad6937c4d9698f52c521ed55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jsonschema`&lt;/code&gt; package must be installed separately in order to use this decorator, as Falcon does not install it by default.</source>
          <target state="translated">&lt;code&gt;jsonschema`&lt;/code&gt; 의 패키지는 팔콘 기본적으로 설치하지 않는 한,이 장식을 사용하기 위해 별도로 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="946f0a021fd82502926612850a262066eef1f472" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; settings, as shown above, are critical to securing your deployment. These values control the OS-level user and group the server will use to execute the application. The specified OS user and group should not have write permissions to the source directory. In this case, we use the &lt;code&gt;myproject-runner&lt;/code&gt; user that was created earlier for this purpose.</source>
          <target state="translated">&lt;code&gt;uid&lt;/code&gt; 및 &lt;code&gt;gid&lt;/code&gt; 위와 같이 설정, 배포를 확보에 중요하다. 이 값은 서버가 응용 프로그램을 실행하는 데 사용할 OS 수준 사용자 및 그룹을 제어합니다. 지정된 OS 사용자 및 그룹에는 소스 디렉토리에 대한 쓰기 권한이 없어야합니다. 이 경우이 목적으로 이전에 생성 된 &lt;code&gt;myproject-runner&lt;/code&gt; 사용자를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="7465499e051900ef082b21f12b081150aac7d688" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;falcon.routing&lt;/em&gt; module contains the following utilities that may be used by custom routing engines.</source>
          <target state="translated">&lt;em&gt;falcon.routing&lt;/em&gt; 모듈은 사용자 정의 라우팅 엔진에 의해 이용 될 수있는 다음과 같은 유틸리티가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="dcaebffd33aa1a0bdb9a7d943508e46ac0926bb2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;process_resource&lt;/em&gt; method is only called when the request matches a route to a resource. To take action when a route is not found, a &lt;a href=&quot;api#falcon.API.add_sink&quot;&gt;&lt;code&gt;sink&lt;/code&gt;&lt;/a&gt; may be used instead.</source>
          <target state="translated">&lt;em&gt;process_resource의&lt;/em&gt; 요청이 자원에 대한 경로 일치 할 때 메소드는 호출된다. 경로를 찾을 수 없을 때 조치를 취하기 위해 &lt;a href=&quot;api#falcon.API.add_sink&quot;&gt; &lt;code&gt;sink&lt;/code&gt; &lt;/a&gt; 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f6e6f00641c89010271ad2ba362bf0c155117f0" translate="yes" xml:space="preserve">
          <source>The API Class</source>
          <target state="translated">API 클래스</target>
        </trans-unit>
        <trans-unit id="9ad83fcf5ee047fa29ae27e82f64261064513f8a" translate="yes" xml:space="preserve">
          <source>The Accept-Ranges header field indicates to the client which range units are supported (e.g. &amp;ldquo;bytes&amp;rdquo;) for the target resource.</source>
          <target state="translated">Accept-Ranges 헤더 필드는 대상 리소스에 대해 지원되는 범위 단위 (예 : &quot;바이트&quot;)를 클라이언트에 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e21d7c49012994e774a11f0973067fce75e4bcd3" translate="yes" xml:space="preserve">
          <source>The Clang compiler treats unrecognized command-line options as errors, for example:</source>
          <target state="translated">Clang 컴파일러는 인식 할 수없는 명령 줄 옵션을 오류로 처리합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f20146bf024b68a12263443a68324850d8be45c3" translate="yes" xml:space="preserve">
          <source>The Clang compiler treats unrecognized command-line options as errors; this can cause problems under Python 2.6, for example:</source>
          <target state="translated">Clang 컴파일러는 인식 할 수없는 명령 행 옵션을 오류로 처리합니다. 예를 들어 Python 2.6에서 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15b9f7fad1411e66089824de7709062d0f9c944e" translate="yes" xml:space="preserve">
          <source>The Content-Type header, if present, will be overridden. If you wish to return custom error messages, you can create your own HTTP error class, and install an error handler to convert it into an appropriate HTTP response for the client</source>
          <target state="translated">Content-Type 헤더가있는 경우 재정의됩니다. 사용자 정의 오류 메시지를 리턴하려면 고유 한 HTTP 오류 클래스를 작성하고 오류 핸들러를 설치하여 클라이언트에 적합한 HTTP 응답으로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="e31b30578c2f0a453d7a74a21c09b470c4c32a0b" translate="yes" xml:space="preserve">
          <source>The ETag header will be wrapped with double quotes &lt;code&gt;&quot;value&quot;&lt;/code&gt; in case the user didn&amp;rsquo;t pass it.</source>
          <target state="translated">ETag 헤더는 사용자가 전달하지 않은 경우 큰 따옴표 &lt;code&gt;&quot;value&quot;&lt;/code&gt; 로 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="d9ddac2b2a870aaf2a0e0d40984dc0e7f390490e" translate="yes" xml:space="preserve">
          <source>The Falcon Web Framework</source>
          <target state="translated">팔콘 웹 프레임 워크</target>
        </trans-unit>
        <trans-unit id="4ccedec1abcc82034a9e90fd97f39e6f7c6bfe3c" translate="yes" xml:space="preserve">
          <source>The Falcon framework contains extensive inline documentation that you can query using the above technique.</source>
          <target state="translated">Falcon 프레임 워크에는 위의 기술을 사용하여 쿼리 할 수있는 광범위한 인라인 문서가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8625fdf6f18c9102cd78ef70c80d715c11b0cf5e" translate="yes" xml:space="preserve">
          <source>The Falcon framework is, itself, thread-safe. For example, new &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; objects are created for each incoming HTTP request. However, a single instance of each resource class attached to a route is shared among all requests. Middleware objects and other types of hooks, such as custom error handlers, are likewise shared. Therefore, as long as you implement these classes and callables in a thread-safe manner, and ensure that any third-party libraries used by your app are also thread-safe, your WSGI app as a whole will be thread-safe.</source>
          <target state="translated">Falcon 프레임 워크는 그 자체로 스레드로부터 안전합니다. 예를 들어, 들어오는 각 HTTP 요청에 대해 새 &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 개체가 생성됩니다. 그러나 경로에 연결된 각 리소스 클래스의 단일 인스턴스는 모든 요청간에 공유됩니다. 미들웨어 개체 및 사용자 지정 오류 처리기와 같은 기타 유형의 후크도 마찬가지로 공유됩니다. 따라서 이러한 클래스와 콜 러블을 스레드로부터 안전한 방식으로 구현하고 앱에서 사용하는 타사 라이브러리도 스레드로부터 안전한지 확인하는 한 WSGI 앱은 전체적으로 스레드로부터 안전합니다.</target>
        </trans-unit>
        <trans-unit id="355d726619940776341f0ae2510b4d6b3a789917" translate="yes" xml:space="preserve">
          <source>The Python ecosystem offers a number of great packages that you can use from within your responders, hooks, and middleware components. As a starting point, the community maintains a list of &lt;a href=&quot;https://github.com/falconry/falcon/wiki&quot;&gt;Falcon add-ons and complementary packages&lt;/a&gt;.</source>
          <target state="translated">Python 에코 시스템은 응답기, 후크 및 미들웨어 구성 요소에서 사용할 수있는 여러 가지 훌륭한 패키지를 제공합니다. 시작점으로 커뮤니티는 &lt;a href=&quot;https://github.com/falconry/falcon/wiki&quot;&gt;Falcon 애드온 및 보완 패키지&lt;/a&gt; 목록을 유지 관리 합니다 .</target>
        </trans-unit>
        <trans-unit id="ebc3db4d907e501e1bae6cceef917c9995b0f458" translate="yes" xml:space="preserve">
          <source>The Secure Attribute</source>
          <target state="translated">보안 속성</target>
        </trans-unit>
        <trans-unit id="dabcab27818bb4f19fcfa102aed7f9bd914cd3a5" translate="yes" xml:space="preserve">
          <source>The URL path to request (default: &amp;lsquo;/&amp;rsquo;).</source>
          <target state="translated">요청할 URL 경로 (기본값 : '/').</target>
        </trans-unit>
        <trans-unit id="aa156448deab481ed31349461dd8457e548f3a30" translate="yes" xml:space="preserve">
          <source>The URL path to request.</source>
          <target state="translated">요청할 URL 경로입니다.</target>
        </trans-unit>
        <trans-unit id="11dfb2e2176014b2b369487df050512b8d71196e" translate="yes" xml:space="preserve">
          <source>The URL structure of the application is centralized. This makes it easier to reason about and maintain the API over time.</source>
          <target state="translated">응용 프로그램의 URL 구조는 중앙 집중식입니다. 이를 통해 시간이 지남에 따라 API를 쉽게 추론하고 유지 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="21dd72604e094689c8df9381f73c0748ceb807d9" translate="yes" xml:space="preserve">
          <source>The above process of starting, testing, stopping, and cleaning up after each test run can (and really should be) automated. Depending on your needs, you can develop your own automation fixtures, or use a library such as &lt;a href=&quot;https://github.com/butla/mountepy&quot;&gt;mountepy&lt;/a&gt;.</source>
          <target state="translated">각 테스트 실행 후 위의 시작, 테스트, 중지 및 정리 프로세스는 자동화 될 수 있으며 실제로 이루어져야합니다. 필요에 따라 자체 자동화 설비를 개발하거나 &lt;a href=&quot;https://github.com/butla/mountepy&quot;&gt;mountepy&lt;/a&gt; 와 같은 라이브러리를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aae7a70db69d16eef24d08f8eaea3dcbb7600a7c" translate="yes" xml:space="preserve">
          <source>The character encoding for fields, before percent-encoding non-ASCII bytes, is assumed to be UTF-8. The special &lt;code&gt;_charset_&lt;/code&gt; field is ignored if present.</source>
          <target state="translated">ASCII가 아닌 바이트를 퍼센트 인코딩하기 전에 필드의 문자 인코딩은 UTF-8로 가정합니다. 존재하는 경우 특수 &lt;code&gt;_charset_&lt;/code&gt; 필드는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="61ed64cdabeb7a6c0190f4ce9a46145b79a5e8eb" translate="yes" xml:space="preserve">
          <source>The client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message body in the request message.</source>
          <target state="translated">클라이언트는 요청 메시지에 메시지 본문의 길이를 포함하는 유효한 Content-Length 헤더 필드를 추가하면 요청을 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="096820ebedfe55a0f653a3b13390687140f22682" translate="yes" xml:space="preserve">
          <source>The client&amp;rsquo;s preferred media type, based on the Accept header. Returns &lt;code&gt;None&lt;/code&gt; if the client does not accept any of the given types.</source>
          <target state="translated">Accept 헤더를 기반으로 클라이언트가 선호하는 미디어 유형. 클라이언트가 주어진 유형을 수락하지 않으면 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="7857ea1b772f5e95b383009c881d90ebe7489f73" translate="yes" xml:space="preserve">
          <source>The code portion of the HTTP status string</source>
          <target state="translated">HTTP 상태 문자열의 코드 부분</target>
        </trans-unit>
        <trans-unit id="bbf6b2ca4e0eecc451258847cd2cfd02990b1c21" translate="yes" xml:space="preserve">
          <source>The command to run the application is now:</source>
          <target state="translated">응용 프로그램을 실행하는 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6a9a7803a8553552d14c272255433e903a51a64c" translate="yes" xml:space="preserve">
          <source>The configuration presented here enables both threads and processes. However, you will have to experiment and do some research to understand your application&amp;rsquo;s unique requirements, and then tailor your uWSGI configuration accordingly. Generally speaking, uWSGI is flexible enough to support most types of applications.</source>
          <target state="translated">여기에 제시된 구성은 스레드와 프로세스를 모두 활성화합니다. 그러나 응용 프로그램의 고유 한 요구 사항을 이해하기 위해 실험하고 몇 가지 연구를 수행 한 다음 그에 따라 uWSGI 구성을 조정해야합니다. 일반적으로 uWSGI는 대부분의 응용 프로그램 유형을 지원할 수있을만큼 유연합니다.</target>
        </trans-unit>
        <trans-unit id="0f591cba7bf7edfa391b90b3d159bfa0379d4121" translate="yes" xml:space="preserve">
          <source>The cookie&amp;rsquo;s name.</source>
          <target state="translated">쿠키의 이름.</target>
        </trans-unit>
        <trans-unit id="cc9ddf1419e66a8abe968368bef4cc3083ff911b" translate="yes" xml:space="preserve">
          <source>The current UTC time as an IMF-fixdate, e.g., &amp;lsquo;Tue, 15 Nov 1994 12:45:26 GMT&amp;rsquo;.</source>
          <target state="translated">IMF 수정 날짜 인 현재 UTC 시간 (예 : '화, 1994 년 11 월 15 일 12:45:26 GMT')</target>
        </trans-unit>
        <trans-unit id="934b403a2bb69af42e0e2012d24b8ba14ba1e712" translate="yes" xml:space="preserve">
          <source>The default Internet media type (RFC 2046) to use when deserializing a response. This value is normally set to the media type provided when a &lt;a href=&quot;#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; is initialized; however, if created independently, this will default to the &lt;code&gt;DEFAULT_MEDIA_TYPE&lt;/code&gt; specified by Falcon.</source>
          <target state="translated">응답을 역 직렬화 할 때 사용할 기본 인터넷 미디어 유형 (RFC 2046)입니다. 이 값은 일반적으로 &lt;a href=&quot;#falcon.API&quot;&gt; &lt;code&gt;falcon.API&lt;/code&gt; &lt;/a&gt; 가 초기화 될 때 제공되는 미디어 유형으로 설정됩니다 . 그러나 독립적으로 생성 된 경우 기본값 은 Falcon이 지정한 &lt;code&gt;DEFAULT_MEDIA_TYPE&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6018dc87f65236389972dedf88f10138906dc0f4" translate="yes" xml:space="preserve">
          <source>The default JSON handler for &lt;code&gt;resp.media&lt;/code&gt; only supports the objects and types listed in the table documented under &lt;a href=&quot;https://docs.python.org/3.6/library/json.html#json.JSONEncoder&quot;&gt;json.JSONEncoder&lt;/a&gt;. To handle additional types, you can either serialize them beforehand, or create a custom JSON media handler that sets the &lt;code&gt;default&lt;/code&gt; param for &lt;code&gt;json.dumps()&lt;/code&gt;. When deserializing an incoming request body, you may also wish to implement &lt;code&gt;object_hook&lt;/code&gt; for &lt;code&gt;json.loads()&lt;/code&gt;. Note, however, that setting the &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;object_hook&lt;/code&gt; params can negatively impact the performance of (de)serialization.</source>
          <target state="translated">기본 JSON 핸들러 &lt;code&gt;resp.media&lt;/code&gt; 은 단지 아래에 설명 된 표에 나열된 객체와 유형을 지원 &lt;a href=&quot;https://docs.python.org/3.6/library/json.html#json.JSONEncoder&quot;&gt;json.JSONEncoder을&lt;/a&gt; . 추가 유형을 처리하려면 미리 유형을 직렬화하거나 &lt;code&gt;json.dumps()&lt;/code&gt; 의 &lt;code&gt;default&lt;/code&gt; 매개 변수를 설정하는 사용자 정의 JSON 매체 핸들러를 작성할 수 있습니다 . 들어오는 요청 본문을 역 직렬화 할 때 &lt;code&gt;json.loads()&lt;/code&gt; 대해 &lt;code&gt;object_hook&lt;/code&gt; 을 구현할 수도 있습니다 . 그러나 &lt;code&gt;default&lt;/code&gt; 또는 &lt;code&gt;object_hook&lt;/code&gt; 매개 변수 를 설정하면 직렬화 해제 성능에 부정적인 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73a879b4e8a8b20ad949b741cc3b9299cc8a50e5" translate="yes" xml:space="preserve">
          <source>The default media-type to use when deserializing a response. This value is normally set to the media type provided when a &lt;a href=&quot;#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; is initialized; however, if created independently, this will default to the &lt;code&gt;DEFAULT_MEDIA_TYPE&lt;/code&gt; specified by Falcon.</source>
          <target state="translated">응답을 역 직렬화 할 때 사용할 기본 미디어 유형입니다. 이 값은 일반적으로 &lt;a href=&quot;#falcon.API&quot;&gt; &lt;code&gt;falcon.API&lt;/code&gt; &lt;/a&gt; 가 초기화 될 때 제공되는 미디어 유형으로 설정됩니다 . 그러나 독립적으로 생성 된 경우 기본값 은 Falcon이 지정한 &lt;code&gt;DEFAULT_MEDIA_TYPE&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="40a0362ff917cc92671f5c5cfe369680f256759e" translate="yes" xml:space="preserve">
          <source>The default request/response context type has been changed from dict to a bare class in Falcon 2.0. Instead of setting dictionary items, you can now simply set attributes on the object:</source>
          <target state="translated">기본 요청 / 응답 컨텍스트 유형이 Falcon 2.0에서 dict에서 베어 클래스로 변경되었습니다. 사전 항목을 설정하는 대신 이제 간단히 객체에 속성을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="241491ef73f5024a4c4a1450dc7000b09bcf6319" translate="yes" xml:space="preserve">
          <source>The default serializer will not render any response body for &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; instances where the &lt;code&gt;has_representation&lt;/code&gt; property evaluates to &lt;code&gt;False&lt;/code&gt; (such as in the case of types that subclass &lt;a href=&quot;errors#falcon.http_error.NoRepresentation&quot;&gt;&lt;code&gt;falcon.http_error.NoRepresentation&lt;/code&gt;&lt;/a&gt;). However a custom serializer will be called regardless of the property value, and it may choose to override the representation logic.</source>
          <target state="translated">기본 serializer는 &lt;code&gt;has_representation&lt;/code&gt; 속성이 &lt;code&gt;False&lt;/code&gt; 로 평가 되는 &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt; 인스턴스에 대한 응답 본문을 렌더링하지 않습니다 (예 : &lt;a href=&quot;errors#falcon.http_error.NoRepresentation&quot;&gt; &lt;code&gt;falcon.http_error.NoRepresentation&lt;/code&gt; &lt;/a&gt; 을 하위 클래스로 분류하는 유형의 경우 ). 그러나 사용자 지정 serializer는 속성 값에 관계없이 호출되며 표현 논리를 재정의하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91d1c6f6a3a3c25fec420afd6a2b179fcc59b4d7" translate="yes" xml:space="preserve">
          <source>The default value for this argument is normally &lt;code&gt;True&lt;/code&gt;, but can be modified by setting &lt;a href=&quot;api#falcon.ResponseOptions.secure_cookies_by_default&quot;&gt;&lt;code&gt;secure_cookies_by_default&lt;/code&gt;&lt;/a&gt; via &lt;a href=&quot;api#falcon.API.resp_options&quot;&gt;&lt;code&gt;API.resp_options&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 인수의 기본값은 일반적으로 &lt;code&gt;True&lt;/code&gt; 이지만 &lt;a href=&quot;api#falcon.API.resp_options&quot;&gt; &lt;code&gt;API.resp_options&lt;/code&gt; &lt;/a&gt; 를 통해 &lt;a href=&quot;api#falcon.ResponseOptions.secure_cookies_by_default&quot;&gt; &lt;code&gt;secure_cookies_by_default&lt;/code&gt; &lt;/a&gt; 를 설정하여 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="13174a4ef171c867fcc3148332d913e50644d731" translate="yes" xml:space="preserve">
          <source>The domain to which this cookie is restricted, or &lt;code&gt;None&lt;/code&gt; if not specified.</source>
          <target state="translated">이 쿠키가 제한되는 도메인 또는 지정되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6e50b7e792989d5dabd8f345c0640d3db3943e75" translate="yes" xml:space="preserve">
          <source>The exact commands for creating a virtual environment might differ based on the Python version you are using and your operating system. At the end of the day the application needs a virtualenv in /home/myproject/venv with the project dependencies installed. Use the &lt;code&gt;pip&lt;/code&gt; binary within the virtual environment by &lt;code&gt;source venv/bin/activate&lt;/code&gt; or using the full path.</source>
          <target state="translated">가상 환경을 만들기위한 정확한 명령은 사용중인 Python 버전과 운영 체제에 따라 다를 수 있습니다. 하루가 끝나면 애플리케이션은 프로젝트 종속성이 설치된 / home / myproject / venv에 virtualenv가 필요합니다. &lt;code&gt;source venv/bin/activate&lt;/code&gt; 또는 전체 경로를 사용하여 가상 환경 내 에서 &lt;code&gt;pip&lt;/code&gt; 바이너리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9741400c80f98a463b42fa5553e22068183d5b40" translate="yes" xml:space="preserve">
          <source>The expected value is an integral number of seconds to use as the value for the header. The HTTP-date syntax is not supported.</source>
          <target state="translated">예상 값은 헤더 값으로 사용할 정수 초입니다. HTTP 날짜 구문은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b7b152017ca59b8d5565927fa54ae8827036534f" translate="yes" xml:space="preserve">
          <source>The file hierarchy should now look like this:</source>
          <target state="translated">파일 계층 구조는 이제 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="cb04c8c501207a44e1c5aa40b13287a50cadd90c" translate="yes" xml:space="preserve">
          <source>The first thing we&amp;rsquo;ll do is &lt;a href=&quot;install#install&quot;&gt;install&lt;/a&gt; Falcon inside a fresh &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtualenv&lt;/a&gt;. To that end, let&amp;rsquo;s create a new project folder called &amp;ldquo;look&amp;rdquo;, and set up a virtual environment within it that we can use for the tutorial:</source>
          <target state="translated">우리가 할 첫 번째 일은 Falcon을 새로운 &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtualenv&lt;/a&gt; 안에 &lt;a href=&quot;install#install&quot;&gt;설치&lt;/a&gt; 하는 것 입니다. 이를 위해&amp;ldquo;look&amp;rdquo;이라는 새 프로젝트 폴더를 만들고 그 안에 자습서에 사용할 수있는 가상 환경을 설정하겠습니다.</target>
        </trans-unit>
        <trans-unit id="1b6911f562a13bbc195dd8c8084800b639b52434" translate="yes" xml:space="preserve">
          <source>The following boolean strings are supported:</source>
          <target state="translated">다음과 같은 부울 문자열이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="f4f17a9a749571d7f0424d740c1b1649c07f2bf7" translate="yes" xml:space="preserve">
          <source>The following commands tell pip to install Cython, and then to invoke Falcon&amp;rsquo;s &lt;code&gt;setup.py&lt;/code&gt;, which will in turn detect the presence of Cython and then compile (AKA cythonize) the Falcon framework with the system&amp;rsquo;s default C compiler.</source>
          <target state="translated">다음 명령은 pip에게 Cython을 설치 한 다음 Falcon의 &lt;code&gt;setup.py&lt;/code&gt; 를 호출 하여 Cython의 존재를 감지 한 다음 시스템의 기본 C 컴파일러로 Falcon 프레임 워크를 컴파일 (AKA cythonize)하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="f043d59ee870371ba4af577fad20c908a4875876" translate="yes" xml:space="preserve">
          <source>The following request headers are checked, in order of preference, to determine the addresses:</source>
          <target state="translated">주소를 결정하기 위해 다음 요청 헤더가 우선 순위에 따라 점검됩니다.</target>
        </trans-unit>
        <trans-unit id="3e2ffd59ed82fcb42354aa0f4c57eeb72fb69e98" translate="yes" xml:space="preserve">
          <source>The following request headers are checked, in order of preference, to determine the forwarded scheme:</source>
          <target state="translated">전달 된 체계를 결정하기 위해 우선 순위에 따라 다음 요청 헤더를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="56febda00897b4c7c8a76d4da3cedcb77763a5e3" translate="yes" xml:space="preserve">
          <source>The format problem might be due to the request&amp;rsquo;s indicated Content- Type or Content-Encoding, or as a result of inspecting the data directly.</source>
          <target state="translated">형식 문제는 요청에 표시된 Content-Type 또는 Content-Encoding 또는 데이터를 직접 검사 한 결과 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73f50ec04d0d2258c46d95e64bb37e66bce2b5e8" translate="yes" xml:space="preserve">
          <source>The fully-qualified URI for the request.</source>
          <target state="translated">요청에 대한 정규화 된 URI입니다.</target>
        </trans-unit>
        <trans-unit id="2b172d7ca1742380833db7420354bc403e29916a" translate="yes" xml:space="preserve">
          <source>The header&amp;rsquo;s value if set, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">설정하면 헤더의 값을, 그렇지 않으면 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4cab95eeeaea077b80fccbfb3cba746626f1d9cc" translate="yes" xml:space="preserve">
          <source>The idea here is to only accept GIF, JPEG, and PNG images. You can add others to the list if you like.</source>
          <target state="translated">여기서 아이디어는 GIF, JPEG 및 PNG 이미지 만 허용하는 것입니다. 원하는 경우 다른 사람을 목록에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a59ab72bc748edec524b503a34e77a5d201e6cb0" translate="yes" xml:space="preserve">
          <source>The identifier can then be used to employ the converter within a URI template:</source>
          <target state="translated">그런 다음 식별자를 사용하여 URI 템플릿 내에서 변환기를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69966743f91a9eca444b74a1d7fd8e259495034f" translate="yes" xml:space="preserve">
          <source>The image resource above defines a single method, &lt;code&gt;on_get()&lt;/code&gt;. For any HTTP method you want your resource to support, simply add an &lt;code&gt;on_*()&lt;/code&gt; method to the class, where &lt;code&gt;*&lt;/code&gt; is any one of the standard HTTP methods, lowercased (e.g., &lt;code&gt;on_get()&lt;/code&gt;, &lt;code&gt;on_put()&lt;/code&gt;, &lt;code&gt;on_head()&lt;/code&gt;, etc.).</source>
          <target state="translated">위의 이미지 리소스는 단일 메소드 &lt;code&gt;on_get()&lt;/code&gt; 정의합니다 . 리소스가 지원하는 HTTP 메소드의 경우 &lt;code&gt;on_*()&lt;/code&gt; 메소드를 클래스 에 추가하면 됩니다 . 여기서 &lt;code&gt;*&lt;/code&gt; 는 소문자로 된 표준 HTTP 메소드 중 하나입니다 (예 : &lt;code&gt;on_get()&lt;/code&gt; , &lt;code&gt;on_put()&lt;/code&gt; , &lt;code&gt;on_head()&lt;/code&gt; , 기타.).</target>
        </trans-unit>
        <trans-unit id="2ead8a12ea8ea21c86b45d9d219921980be75e95" translate="yes" xml:space="preserve">
          <source>The initial portion of the request URI&amp;rsquo;s path that corresponds to the application object, so that the application knows its virtual &amp;ldquo;location&amp;rdquo;. This may be an empty string, if the application corresponds to the &amp;ldquo;root&amp;rdquo; of the server.</source>
          <target state="translated">응용 프로그램이 가상 &quot;위치&quot;를 알 수 있도록 응용 프로그램 개체에 해당하는 요청 URI 경로의 초기 부분입니다. 응용 프로그램이 서버의 &quot;루트&quot;에 해당하는 경우 빈 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03340e84a271fd6bc0504149d7b730684e9cb4d1" translate="yes" xml:space="preserve">
          <source>The last Request object passed into any one of the responder methods.</source>
          <target state="translated">응답자 메서드 중 하나로 전달 된 마지막 Request 개체입니다.</target>
        </trans-unit>
        <trans-unit id="d285b9581b2a3bd63a55631784c5eb732fc84ac4" translate="yes" xml:space="preserve">
          <source>The last Response object passed into any one of the responder methods.</source>
          <target state="translated">응답자 메서드 중 하나에 전달 된 마지막 Response 개체입니다.</target>
        </trans-unit>
        <trans-unit id="3812cb543bb863d75507c79814503c853d2cddd4" translate="yes" xml:space="preserve">
          <source>The last dictionary of kwargs, beyond &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;resp&lt;/code&gt;, that were passed into any one of the responder methods.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; 및 &lt;code&gt;resp&lt;/code&gt; 이외 의 응답자 메서드 중 하나로 전달 된 kwargs의 마지막 사전입니다 .</target>
        </trans-unit>
        <trans-unit id="73040cf265dde4fd514f452dd721e59d95027a4a" translate="yes" xml:space="preserve">
          <source>The last line in the &lt;code&gt;on_post()&lt;/code&gt; responder sets the Location header for the newly created resource. (We will create a route for that path in just a minute.) The &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; classes contain convenient attributes for reading and setting common headers, but you can always access any header by name with the &lt;code&gt;req.get_header()&lt;/code&gt; and &lt;code&gt;resp.set_header()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;on_post()&lt;/code&gt; 응답자 의 마지막 줄 은 새로 생성 된 리소스의 Location 헤더를 설정합니다. (1 분 안에 해당 경로에 대한 경로를 생성 할 것입니다.) &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 클래스에는 공통 헤더를 읽고 설정하기위한 편리한 속성이 포함되어 있지만 &lt;code&gt;req.get_header()&lt;/code&gt; 및 &lt;code&gt;resp.set_header()&lt;/code&gt; 사용하여 이름별로 모든 헤더에 액세스 할 수 있습니다. () 방법.</target>
        </trans-unit>
        <trans-unit id="0c9195108770b6c549887275ea2f9e30ae5f97b0" translate="yes" xml:space="preserve">
          <source>The last line in the &lt;code&gt;on_post()&lt;/code&gt; responder sets the Location header for the newly created resource. (We will create a route for that path in just a minute.) The &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; classes contain convent attributes for reading and setting common headers, but you can always access any header by name with the &lt;code&gt;req.get_header()&lt;/code&gt; and &lt;code&gt;resp.set_header()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;on_post()&lt;/code&gt; 응답자 의 마지막 행 은 새로 작성된 자원의 위치 헤더를 설정합니다. (우리는. 다만 분에 해당 경로에 대한 경로를 생성한다)를 &lt;a href=&quot;../api/request_and_response#falcon.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/request_and_response#falcon.Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 클래스는 공통의 헤더를 읽고 설정하기위한 수도원 속성을 포함,하지만 당신은 항상 함께 이름으로 모든 헤더에 액세스 할 수 있습니다 &lt;code&gt;req.get_header()&lt;/code&gt; 및 &lt;code&gt;resp.set_header()&lt;/code&gt; 메소드.</target>
        </trans-unit>
        <trans-unit id="bb58ace966de22d92d58b96e1abfd9d9215310db" translate="yes" xml:space="preserve">
          <source>The lifetime of the cookie in seconds, or &lt;code&gt;None&lt;/code&gt; if not specified.</source>
          <target state="translated">쿠키의 수명 (초) 또는 지정되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="27be89869f8c494f067968bddf4024b0de97befd" translate="yes" xml:space="preserve">
          <source>The mapping of request query parameter names to their values. Where the parameter appears multiple times in the query string, the value mapped to that parameter key will be a list of all the values in the order seen.</source>
          <target state="translated">요청 쿼리 매개 변수 이름을 해당 값에 매핑합니다. 매개 변수가 쿼리 문자열에 여러 번 나타나는 경우 해당 매개 변수 키에 매핑 된 값은 표시된 순서대로 모든 값의 목록이됩니다.</target>
        </trans-unit>
        <trans-unit id="a49b9ebb554e404f8649f14848772fa46d70388a" translate="yes" xml:space="preserve">
          <source>The method received in the request-line is known by the origin server but not supported by the target resource.</source>
          <target state="translated">요청 라인에서 수신 된 메소드는 오리진 서버에 알려져 있지만 대상 자원에 의해 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9b8fda2627f67ba1f06ba95f7c064e644c85b8a0" translate="yes" xml:space="preserve">
          <source>The methods all call &lt;code&gt;self.simulate_request()&lt;/code&gt; for convenient overriding of request preparation by child classes.</source>
          <target state="translated">메소드는 모두 자식 클래스에 의한 요청 준비를 편리하게 재정의하기 위해 &lt;code&gt;self.simulate_request()&lt;/code&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="80f712cc078ed640970a18e9fc668cddfdc82cf9" translate="yes" xml:space="preserve">
          <source>The new URI in the Location header field is not considered equivalent to the effective request URI.</source>
          <target state="translated">위치 헤더 필드의 새 URI는 유효 요청 URI와 동등한 것으로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="032b696dccfa3be9e0276180a1b631cfe3b6a567" translate="yes" xml:space="preserve">
          <source>The new default context type emulates a dict-like mapping interface in a way that context attributes are linked to dict items, i.e. setting an object attribute also sets the corresponding dict item, and vice versa. As a result, existing code will largely work unmodified with Falcon 2.0. Nevertheless, it is recommended to migrate to the new interface as outlined above since the dict-like mapping interface may be removed from the context type in a future release.</source>
          <target state="translated">새로운 기본 컨텍스트 유형은 컨텍스트 속성이 dict 항목에 연결되는 방식으로 dict와 유사한 매핑 인터페이스를 에뮬레이트합니다. 즉, 객체 속성을 설정하면 해당 dict 항목도 설정되고 그 반대의 경우도 마찬가지입니다. 결과적으로 기존 코드는 대부분 Falcon 2.0에서 수정되지 않고 작동합니다. 그럼에도 불구하고 dict와 유사한 매핑 인터페이스는 향후 릴리스에서 컨텍스트 유형에서 제거 될 수 있으므로 위에서 설명한대로 새 인터페이스로 마이그레이션하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="37e294887b3bed9e4a046dec5682df3777a9b4ea" translate="yes" xml:space="preserve">
          <source>The origin server MUST generate an Allow header field in a 405 response containing a list of the target resource&amp;rsquo;s currently supported methods.</source>
          <target state="translated">오리진 서버는 대상 리소스의 현재 지원되는 메소드 목록을 포함하는 405 응답에 Allow header 필드를 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="0d6fb34b8ea78b6fbeca2b2e317e9ef726d69fed" translate="yes" xml:space="preserve">
          <source>The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</source>
          <target state="translated">오리진 서버가 대상 자원에 대한 현재 표현을 찾지 못했거나 존재한다는 것을 공개하려고하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b34c761e769bf51db8fe8807c38ff55b38e20605" translate="yes" xml:space="preserve">
          <source>The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.</source>
          <target state="translated">페이로드가 대상 자원에서이 메소드가 지원하지 않는 형식이므로 원래 서버가 요청 서비스를 거부합니다.</target>
        </trans-unit>
        <trans-unit id="ce2dd203ced147a1a44a450a141a5b7bb8ac48b8" translate="yes" xml:space="preserve">
          <source>The path and query string portion of the request URI, omitting the scheme and host.</source>
          <target state="translated">스키마 및 호스트를 생략 한 요청 URI의 경로 및 쿼리 문자열 부분입니다.</target>
        </trans-unit>
        <trans-unit id="d277bc007a935f2f58dfd6ed558fbf32fd7f9a13" translate="yes" xml:space="preserve">
          <source>The path may contain a query string. However, neither &lt;code&gt;query_string&lt;/code&gt; nor &lt;code&gt;params&lt;/code&gt; may be specified in this case.</source>
          <target state="translated">경로에는 쿼리 문자열이 포함될 수 있습니다. 그러나이 경우 &lt;code&gt;query_string&lt;/code&gt; 또는 &lt;code&gt;params&lt;/code&gt; 를 지정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a77e8ad519a79ebb8e35ae3f6641f422e91f2f95" translate="yes" xml:space="preserve">
          <source>The path prefix to match for this route. If the path in the requested URI starts with this string, the remainder of the path will be appended to the source directory to determine the file to serve. This is done in a secure manner to prevent an attacker from requesting a file outside the specified directory.</source>
          <target state="translated">이 경로와 일치하는 경로 접두사입니다. 요청 된 URI의 경로가이 문자열로 시작하면 나머지 경로가 소스 디렉토리에 추가되어 제공 할 파일을 결정합니다. 이는 공격자가 지정된 디렉토리 외부의 파일을 요청하지 못하도록 안전한 방식으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f60eb87b839ea734c464a395cefb24b8735ffe12" translate="yes" xml:space="preserve">
          <source>The path prefix to which this cookie is restricted, or &lt;code&gt;None&lt;/code&gt; if not specified.</source>
          <target state="translated">이 쿠키가 제한되는 경로 접두사 또는 지정되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9004ca38fea8c5e7e7fcdde6fbdbe4c405aae722" translate="yes" xml:space="preserve">
          <source>The prefix of the original URI for proxied requests. Uses &lt;a href=&quot;#falcon.Request.forwarded_scheme&quot;&gt;&lt;code&gt;forwarded_scheme&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#falcon.Request.forwarded_host&quot;&gt;&lt;code&gt;forwarded_host&lt;/code&gt;&lt;/a&gt; in order to reconstruct the original URI.</source>
          <target state="translated">프록시 요청에 대한 원래 URI의 접두사입니다. 원래 URI를 재구성하기 위해 &lt;a href=&quot;#falcon.Request.forwarded_scheme&quot;&gt; &lt;code&gt;forwarded_scheme&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#falcon.Request.forwarded_host&quot;&gt; &lt;code&gt;forwarded_host&lt;/code&gt; &lt;/a&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="07621fb6c1cb4dc38a17eb7ba5be337cc8501511" translate="yes" xml:space="preserve">
          <source>The prefix of the request URI, including scheme, host, and WSGI app (if any).</source>
          <target state="translated">체계, 호스트 및 WSGI 앱 (있는 경우)을 포함한 요청 URI의 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="0078e136c81b27abb7bd345b478b834e8c6ff0d1" translate="yes" xml:space="preserve">
          <source>The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.</source>
          <target state="translated">대상 자원의 현재 상태와 충돌하여 요청을 완료 할 수 없습니다. 이 코드는 사용자가 충돌을 해결하고 요청을 다시 제출할 수있는 상황에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="00867c1953ecaf6baf1550c3cc4ed9f59332f743" translate="yes" xml:space="preserve">
          <source>The request has not been applied because it lacks valid authentication credentials for the target resource.</source>
          <target state="translated">대상 자원에 대한 유효한 인증 신임 정보가 없기 때문에 요청이 적용되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="a1b78db4ab9118cc4d9395bc6624fa9077a703af" translate="yes" xml:space="preserve">
          <source>The response representation SHOULD contain a link to a resource that allows the user to submit credentials.</source>
          <target state="translated">응답 표현에는 사용자가 자격 증명을 제출할 수있는 리소스에 대한 링크가 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="8446631eb3a62fa0aca910b0b54fcb954f879889" translate="yes" xml:space="preserve">
          <source>The response representations SHOULD include details explaining the condition, and MAY include a Retry-After header indicating how long to wait before making a new request.</source>
          <target state="translated">응답 표현은 조건을 설명하는 세부 사항을 포함해야하며, 새로운 요청을하기 전에 대기하는 시간을 나타내는 Retry-After 헤더를 포함 할 수있다.</target>
        </trans-unit>
        <trans-unit id="c0731854ce07d2f5e30293ebd1a7e6d8309971c2" translate="yes" xml:space="preserve">
          <source>The result of the request</source>
          <target state="translated">요청의 결과</target>
        </trans-unit>
        <trans-unit id="a31781f607b998fb61249cad17bc93825af2f7ce" translate="yes" xml:space="preserve">
          <source>The resulting serialized bytes from the input object.</source>
          <target state="translated">입력 객체의 결과 직렬화 된 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="31ef0eb28d0cf12aeb9ff6e8c7dc07f950ca8a24" translate="yes" xml:space="preserve">
          <source>The router treats URI paths as a tree of URI segments and searches by checking the URI one segment at a time. Instead of interpreting the route tree for each look-up, it generates inlined, bespoke Python code to perform the search, then compiles that code. This makes the route processing quite fast.</source>
          <target state="translated">라우터는 URI 경로를 URI 세그먼트 트리로 취급하고 한 번에 한 세그먼트 씩 URI를 확인하여 검색합니다. 각 조회에 대한 경로 트리를 해석하는 대신 인라인 맞춤형 Python 코드를 생성하여 검색을 수행 한 다음 해당 코드를 컴파일합니다. 이것은 경로 처리를 매우 빠르게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="af666108381c242146bcdcd35e7d167de334e5fc" translate="yes" xml:space="preserve">
          <source>The server MAY close the connection to prevent the client from continuing the request.</source>
          <target state="translated">서버는 클라이언트가 요청을 계속하지 못하도록 연결을 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ac1710f3b36c5dbb6a09e2a65fdda2f2afb8e4e" translate="yes" xml:space="preserve">
          <source>The server MAY send a Retry-After header field to suggest an appropriate amount of time for the client to wait before retrying the request.</source>
          <target state="translated">서버는 Retry-After 헤더 필드를 전송하여 요청을 재 시도하기 전에 클라이언트가 대기 할 적절한 시간을 제안 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1e7c1beafd0016689e0db441e53eea4df8c11cd" translate="yes" xml:space="preserve">
          <source>The server SHOULD generate a payload containing a list of available representation characteristics and corresponding resource identifiers from which the user or user agent can choose the one most appropriate. A user agent MAY automatically select the most appropriate choice from that list. However, this specification does not define any standard for such automatic selection, as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.4.1&quot;&gt;RFC 7231, Section 6.4.1&lt;/a&gt;</source>
          <target state="translated">서버는 사용 가능한 표현 특성 목록과 사용자 또는 사용자 에이전트가 가장 적합한 것을 선택할 수있는 해당 자원 식별자를 포함하는 페이로드를 생성해야합니다. 사용자 에이전트는 해당 목록에서 가장 적합한 선택을 자동으로 선택할 수 있습니다. 그러나이 사양은 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-6.4.1&quot;&gt;RFC 7231, 섹션 6.4.1에&lt;/a&gt; 설명 된 대로 자동 선택에 대한 표준을 정의하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="93ee680d6eb3408c02f31d764090d264b0e17d54" translate="yes" xml:space="preserve">
          <source>The server SHOULD generate a payload that includes enough information for a user to recognize the source of the conflict.</source>
          <target state="translated">서버는 사용자가 충돌의 원인을 인식하기에 충분한 정보를 포함하는 페이로드를 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="7aaf9f23ec983dd85ab1a278a64450cd85aa44cd" translate="yes" xml:space="preserve">
          <source>The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).</source>
          <target state="translated">서버는 클라이언트 오류 (예 : 잘못된 요청 구문, 잘못된 요청 메시지 프레이밍 또는 사기성 요청 라우팅)로 인식되는 요청으로 인해 요청을 처리 할 수 ​​없거나 처리하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2738f3ee171ecbfe4de6890004f5afd82b3a2139" translate="yes" xml:space="preserve">
          <source>The server encountered an unexpected condition that prevented it from fulfilling the request.</source>
          <target state="translated">서버에 예기치 않은 조건이 발생하여 요청을 이행하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="cd7add0f800abbbd1e66c60f6069c92792837f55" translate="yes" xml:space="preserve">
          <source>The server generating a 401 response MUST send a WWW-Authenticate header field containing at least one challenge applicable to the target resource.</source>
          <target state="translated">401 응답을 생성하는 서버는 대상 자원에 적용 가능한 하나 이상의 시도를 포함하는 WWW-Authenticate 헤더 필드를 보내야합니다.</target>
        </trans-unit>
        <trans-unit id="41a2d9f5661258161ce73028169bd11725906a95" translate="yes" xml:space="preserve">
          <source>The server in question might not be an origin server. This type of legal demand typically most directly affects the operations of ISPs and search engines.</source>
          <target state="translated">해당 서버가 오리진 서버가 아닐 수 있습니다. 이러한 유형의 법적 요구는 일반적으로 ISP 및 검색 엔진의 운영에 가장 직접적인 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="68af0c18b8da8b50b98dab365e6c44bda0a1c0cd" translate="yes" xml:space="preserve">
          <source>The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.</source>
          <target state="translated">서버는 현재 일시적인 과부하 또는 예정된 유지 보수로 인해 요청을 처리 할 수 ​​없으며, 약간의 지연 후에 완화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4dda833aeaa6eec15f7e431b7af24cbb15ca852" translate="yes" xml:space="preserve">
          <source>The server is denying access to the resource as a consequence of a legal demand.</source>
          <target state="translated">서버는 법적 요구의 결과로 리소스에 대한 액세스를 거부하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="535642727fdc8b05ddf05462e53eb1fd72f395b8" translate="yes" xml:space="preserve">
          <source>The server is refusing to process a request because the request payload is larger than the server is willing or able to process.</source>
          <target state="translated">요청 페이로드가 서버가 처리 할 수 ​​있거나 처리 할 수있는 것보다 크기 때문에 서버가 요청 처리를 거부하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e835932fee03c296bcb72aa909e221b2d76df64" translate="yes" xml:space="preserve">
          <source>The server is refusing to service the request because the request- target is longer than the server is willing to interpret.</source>
          <target state="translated">요청 대상이 서버가 해석하려는 것보다 길기 때문에 서버가 요청 서비스를 거부합니다.</target>
        </trans-unit>
        <trans-unit id="a4600a172dd46594584138ffb4cdeee256ec3eab" translate="yes" xml:space="preserve">
          <source>The server refuses to accept the request without a defined Content- Length.</source>
          <target state="translated">서버는 정의 된 Content- Length없이 요청 수락을 거부합니다.</target>
        </trans-unit>
        <trans-unit id="7dc1d18d1de8086e00c33e14e7fbb9d98447499e" translate="yes" xml:space="preserve">
          <source>The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.</source>
          <target state="translated">서버가 요청 엔티티의 컨텐츠 유형을 이해하므로 (415 개의 지원되지 않는 매체 유형 상태 코드가 적합하지 않음) 요청 엔티티의 구문이 정확하지만 (400 잘못된 요청 상태 코드가 부적절 함) 포함 된 파일을 처리 할 수 ​​없습니다 명령.</target>
        </trans-unit>
        <trans-unit id="00efdb0f4aeceed7ddf3062cf505b924f1c16f43" translate="yes" xml:space="preserve">
          <source>The server understood the request but refuses to authorize it.</source>
          <target state="translated">서버는 요청을 이해했지만 승인을 거부합니다.</target>
        </trans-unit>
        <trans-unit id="3bc7b5094022e10cd3f5974753072f15a6924c81" translate="yes" xml:space="preserve">
          <source>The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.</source>
          <target state="translated">게이트웨이 또는 프록시 역할을하는 서버가 요청을 수행하는 동안 액세스 한 인바운드 서버로부터 유효하지 않은 응답을 수신했습니다.</target>
        </trans-unit>
        <trans-unit id="1ad5ea6a882bec7a2333c040e57cc408b262dbcc" translate="yes" xml:space="preserve">
          <source>The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.</source>
          <target state="translated">요청에서 수신 한 사전 협상 헤더 필드에 따라 대상 자원에 사용자 에이전트가 승인 할 수있는 현재 표시가 없으며 서버가 기본 표시를 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="84928f27c78f4d3dd3859d6e787340fd92b3293c" translate="yes" xml:space="preserve">
          <source>The target resource is no longer available at the origin server and this condition is likely to be permanent.</source>
          <target state="translated">원래 자원 서버에서 대상 자원을 더 이상 사용할 수 없으며이 조건은 영구적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="39a48107effc54ae1ebb331b03732df3b31a31d3" translate="yes" xml:space="preserve">
          <source>The template for the route that was matched for this request. May be &lt;code&gt;None&lt;/code&gt; if the request has not yet been routed, as would be the case for &lt;code&gt;process_request()&lt;/code&gt; middleware methods. May also be &lt;code&gt;None&lt;/code&gt; if your app uses a custom routing engine and the engine does not provide the URI template when resolving a route.</source>
          <target state="translated">이 요청과 일치 한 경로의 템플릿입니다. &lt;code&gt;process_request()&lt;/code&gt; 미들웨어 메서드 의 경우처럼 요청이 아직 라우팅되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 일 수 있습니다 . 앱에서 사용자 지정 라우팅 엔진을 사용하고 엔진이 경로를 확인할 때 URI 템플릿을 제공하지 않는 경우 에도 &lt;code&gt;None&lt;/code&gt; 이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="560ef3168387f14d4c503a6c7e672693a800eea4" translate="yes" xml:space="preserve">
          <source>The test will fail since it expects the image file to reside under &lt;code&gt;/tmp&lt;/code&gt;. To fix this, modify &lt;code&gt;app.py&lt;/code&gt; to add the ability to configure the image storage directory with an environment variable:</source>
          <target state="translated">이미지 파일이 &lt;code&gt;/tmp&lt;/code&gt; 아래에있을 것으로 예상되므로 테스트가 실패합니다 . 이 문제를 해결하려면 &lt;code&gt;app.py&lt;/code&gt; 를 수정 하여 환경 변수를 사용하여 이미지 스토리지 디렉토리를 구성하는 기능을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="e63226da4e48b2753f9c00270082318c99e2075c" translate="yes" xml:space="preserve">
          <source>The testing framework supports both unittest and pytest:</source>
          <target state="translated">테스트 프레임 워크는 unittest와 pytest를 모두 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f21ed17654736dc2f507cb0fc27a983c93509271" translate="yes" xml:space="preserve">
          <source>The tuple has the form (&lt;em&gt;start&lt;/em&gt;, &lt;em&gt;end&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt;, [&lt;em&gt;unit&lt;/em&gt;]), where &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; designate the range (inclusive), and &lt;em&gt;length&lt;/em&gt; is the total length, or &amp;lsquo;*&amp;rsquo; if unknown. You may pass &lt;code&gt;int&lt;/code&gt;&amp;rsquo;s for these numbers (no need to convert to &lt;code&gt;str&lt;/code&gt; beforehand). The optional value &lt;em&gt;unit&lt;/em&gt; describes the range unit and defaults to &amp;lsquo;bytes&amp;rsquo;</source>
          <target state="translated">튜플의 형식은 &lt;em&gt;start&lt;/em&gt; , &lt;em&gt;end&lt;/em&gt; , &lt;em&gt;length&lt;/em&gt; , [ &lt;em&gt;unit&lt;/em&gt; ]입니다. 여기서 &lt;em&gt;start&lt;/em&gt; 및 &lt;em&gt;end&lt;/em&gt; 는 범위를 포함하고 &lt;em&gt;길이&lt;/em&gt; 는 총 길이이거나 &lt;em&gt;길이&lt;/em&gt; 는 전체 길이이거나 알 수없는 경우 '*'입니다. 이 숫자에 대해 &lt;code&gt;int&lt;/code&gt; 를 전달할 수 있습니다 ( 사전 &lt;code&gt;str&lt;/code&gt; 로 변환 할 필요 없음 ). 선택적 값 &lt;em&gt;단위&lt;/em&gt; 는 범위 &lt;em&gt;단위를&lt;/em&gt; 설명하며 기본값은 '바이트'입니다.</target>
        </trans-unit>
        <trans-unit id="7e542f74360d3b19f30c86cf27581abf2b0937e7" translate="yes" xml:space="preserve">
          <source>The two different ways of specifying lists may not be mixed in a single query string for the same parameter.</source>
          <target state="translated">목록을 지정하는 두 가지 다른 방법은 동일한 매개 변수에 대해 단일 쿼리 문자열에서 혼합되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3229a7f8d1c9ec14f29035b3656c407de7855779" translate="yes" xml:space="preserve">
          <source>The two members correspond to the first and last byte positions of the requested resource, inclusive. Negative indices indicate offset from the end of the resource, where -1 is the last byte, -2 is the second-to-last byte, and so forth.</source>
          <target state="translated">두 멤버는 요청 된 리소스의 첫 번째 바이트 위치와 마지막 바이트 위치에 해당합니다. 음수 인덱스는 리소스 끝에서의 오프셋을 나타냅니다. 여기서 -1은 마지막 바이트이고 -2는 마지막 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="cbe94a101ecb954714958d80e536d52312ee6544" translate="yes" xml:space="preserve">
          <source>The use of resource classes maps somewhat naturally to the REST architectural style, in which a URL is used to identify a resource only, not the action to perform on that resource.</source>
          <target state="translated">자원 클래스 사용은 REST 아키텍처 스타일에 다소 자연스럽게 맵핑되며, URL은 자원을 수행하기위한 조치가 아니라 자원 만 식별하기 위해 URL이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7d74bfe58e769d4f1b69188a4defa69daa66991d" translate="yes" xml:space="preserve">
          <source>The user has sent too many requests in a given amount of time (&amp;ldquo;rate limiting&amp;rdquo;).</source>
          <target state="translated">사용자가 지정된 시간 내에 너무 많은 요청을 보냈습니다 (&amp;ldquo;속도 제한&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="ed736a4422453de2b39534f691289638c4da5cd4" translate="yes" xml:space="preserve">
          <source>The value of the &amp;ldquo;by&amp;rdquo; parameter, or &lt;code&gt;None&lt;/code&gt; if the parameter is absent. Identifies the client-facing interface of the proxy.</source>
          <target state="translated">&quot;by&quot;매개 변수의 값 또는 매개 변수가없는 경우 &lt;code&gt;None&lt;/code&gt; . 프록시의 클라이언트 연결 인터페이스를 식별합니다.</target>
        </trans-unit>
        <trans-unit id="fe5d5235e6af2c980a1a7719023d6bacecf0102b" translate="yes" xml:space="preserve">
          <source>The value of the &amp;ldquo;for&amp;rdquo; parameter, or &lt;code&gt;None&lt;/code&gt; if the parameter is absent. Identifies the node making the request to the proxy.</source>
          <target state="translated">&quot;for&quot;매개 변수의 값 또는 매개 변수가없는 경우 &lt;code&gt;None&lt;/code&gt; . 프록시에 요청하는 노드를 식별합니다.</target>
        </trans-unit>
        <trans-unit id="c3cc9f7009c46155dfea17f1db4084fb11017ade" translate="yes" xml:space="preserve">
          <source>The value of the &amp;ldquo;host&amp;rdquo; parameter, or &lt;code&gt;None&lt;/code&gt; if the parameter is absent. Provides the host request header field as received by the proxy.</source>
          <target state="translated">&quot;host&quot;매개 변수의 값 또는 매개 변수가없는 경우 &lt;code&gt;None&lt;/code&gt; . 프록시에서받은 호스트 요청 헤더 필드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cc9de95ebea613e82379fd23948de63ee23c4ca8" translate="yes" xml:space="preserve">
          <source>The value of the &amp;ldquo;proto&amp;rdquo; parameter, or &lt;code&gt;None&lt;/code&gt; if the parameter is absent. Indicates the protocol that was used to make the request to the proxy.</source>
          <target state="translated">&quot;proto&quot;매개 변수의 값 또는 매개 변수가없는 경우 &lt;code&gt;None&lt;/code&gt; . 프록시에 요청하는 데 사용 된 프로토콜을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b6df41c014faa1a95a93823c98dc9147024275f4" translate="yes" xml:space="preserve">
          <source>The value of the cookie.</source>
          <target state="translated">쿠키의 가치.</target>
        </trans-unit>
        <trans-unit id="dcb8620ba5c44a1cfc855c78a2df03ace6f5c9a0" translate="yes" xml:space="preserve">
          <source>The value of the param as a string, or &lt;code&gt;None&lt;/code&gt; if param is not found and is not required.</source>
          <target state="translated">param의 값을 문자열로, 또는 param을 찾을 수없고 필요하지 않은 경우 &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d23427a9edf8da3ab8c4e45367ce71a37e75fc1c" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;UUID&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt;, unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">발견되고 &lt;code&gt;UUID&lt;/code&gt; 로 변환 될 수있는 경우 매개 변수의 값입니다 . PARAM이 발견되지 않으면, 반환 &lt;code&gt;None&lt;/code&gt; ,하지 않는 &lt;code&gt;required&lt;/code&gt; 없는 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e30e809e212d37b72808017153591429d5036c66" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;UUID&lt;/code&gt;. If the param is not found, returns &lt;code&gt;default&lt;/code&gt; (default &lt;code&gt;None&lt;/code&gt;), unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">매개 변수가 발견되고 &lt;code&gt;UUID&lt;/code&gt; 로 변환 될 수있는 경우의 값입니다 . 매개 변수를 찾을 수 없는 경우 &lt;code&gt;required&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 인경우 가 아니면 &lt;code&gt;default&lt;/code&gt; (기본값 &lt;code&gt;None&lt;/code&gt; )을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c2c38d28df28c13cc5f6efed13b1f6ddacdc6f86" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;bool&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt; unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">매개 변수가 발견되고 &lt;code&gt;bool&lt;/code&gt; 로 변환 될 수있는 경우의 값입니다 . 매개 변수를 찾을 수 없는 경우 &lt;code&gt;required&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 인경우 가 아니면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="141af8d14c2db9bc948d3ea3a43dbcfc3f949355" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;bool&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">발견되고 &lt;code&gt;bool&lt;/code&gt; 로 변환 될 수있는 경우 매개 변수의 값입니다 . param을 찾을 수 없으면 필요한 값이 &lt;code&gt;True&lt;/code&gt; 가 아니면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a61aada73962caa6ee95a077deea6836b15fcb56" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;date&lt;/code&gt; according to the supplied format string. If the param is not found, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">제공된 매개 변수 문자열에 따라 &lt;code&gt;date&lt;/code&gt; 로 변환 될 수있는 경우 매개 변수의 값입니다 . param을 찾을 수 없으면 필요한 값이 &lt;code&gt;True&lt;/code&gt; 가 아니면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="003871e937e399cc9fd3cce149ac07e189cb62a6" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to a &lt;code&gt;datetime&lt;/code&gt; according to the supplied format string. If the param is not found, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">매개 변수가 발견 되면 제공된 형식 문자열에 따라 &lt;code&gt;datetime&lt;/code&gt; 으로 변환 될 수있는 경우 매개 변수의 값입니다 . param을 찾을 수 없으면 필요한 값이 &lt;code&gt;True&lt;/code&gt; 가 아니면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9763e04fcea72b51618993ca34d8891b9d75d739" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to an &lt;code&gt;float&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt;, unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">매개 변수가 발견되고 &lt;code&gt;float&lt;/code&gt; 로 변환 될 수있는 경우의 값입니다 . 매개 변수를 찾을 수 없는 경우 &lt;code&gt;required&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 인경우 가 아니면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2a04e40fabb0363acc0fd95c2220173a0b5339fd" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found and can be converted to an &lt;code&gt;int&lt;/code&gt;. If the param is not found, returns &lt;code&gt;None&lt;/code&gt;, unless &lt;code&gt;required&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">발견되고 &lt;code&gt;int&lt;/code&gt; 로 변환 될 수있는 경우 매개 변수의 값입니다 . PARAM이 발견되지 않으면, 반환 &lt;code&gt;None&lt;/code&gt; ,하지 않는 &lt;code&gt;required&lt;/code&gt; 없는 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6edf547580040ef96e52ce854deb6a35c38d2ae6" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found. Otherwise, returns &lt;code&gt;None&lt;/code&gt; unless required is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">발견 된 경우 매개 변수의 값입니다. 그렇지 않으면 필요한 것이 &lt;code&gt;True&lt;/code&gt; 가 아니면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="59d19a65947f61ee924072efddefb40f45b95692" translate="yes" xml:space="preserve">
          <source>The value of the param if it is found. Otherwise, returns &lt;code&gt;None&lt;/code&gt; unless required is True. Empty list elements will be discarded. For example, the following query strings would both result in &lt;code&gt;[&amp;lsquo;1&amp;rsquo;, &amp;lsquo;3&amp;rsquo;]&lt;/code&gt;:</source>
          <target state="translated">발견 된 경우 매개 변수의 값입니다. 그렇지 않으면, True가 아닌 경우 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 . 빈 목록 요소는 삭제됩니다. 예를 들어 다음 쿼리 문자열은 &lt;code&gt;[&amp;lsquo;1&amp;rsquo;, &amp;lsquo;3&amp;rsquo;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e74ca400152e8b06eb7f5405a98421e0e569b44f" translate="yes" xml:space="preserve">
          <source>The value of the specified header if it exists, or &lt;code&gt;None&lt;/code&gt; if the header is not found and is not required.</source>
          <target state="translated">지정된 헤더의 값 (있는 경우) 또는 헤더가없고 필요하지 않은 경우 &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76dea009c39601f4179b06d38cec442d76bb7f30" translate="yes" xml:space="preserve">
          <source>The value of the specified header if it exists, or the default value if the header is not found and is not required.</source>
          <target state="translated">지정된 헤더의 값 (있는 경우) 또는 헤더를 찾을 수없고 필요하지 않은 경우 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="1a516e631415cabd578c4e94014f4cd1ad98326c" translate="yes" xml:space="preserve">
          <source>The value of the specified header if set, or the default value if not set.</source>
          <target state="translated">설정된 경우 지정된 헤더의 값, 설정되지 않은 경우 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="790b5d3d63196f60f863de5f299fd2dd40f6704a" translate="yes" xml:space="preserve">
          <source>The value to convert must conform to the standard UUID string representation per RFC 4122. For example, the following strings are all valid:</source>
          <target state="translated">변환 할 값은 RFC 4122에 따른 표준 UUID 문자열 표현을 준수해야합니다. 예를 들어 다음 문자열은 모두 유효합니다.</target>
        </trans-unit>
        <trans-unit id="e1372f83ebe6b2c30954a57346db8a03c2f87bbd" translate="yes" xml:space="preserve">
          <source>The value will be used for the &lt;em&gt;filename&lt;/em&gt; directive. For example, given &lt;code&gt;'report.pdf'&lt;/code&gt;, the Content-Disposition header would be set to: &lt;code&gt;'attachment; filename=&quot;report.pdf&quot;'&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;파일 이름&lt;/em&gt; 지시문에 값이 사용됩니다 . 예를 들어 &lt;code&gt;'report.pdf'&lt;/code&gt; 가 주어지면 Content-Disposition 헤더는 다음과 같이 설정됩니다. &lt;code&gt;'attachment; filename=&quot;report.pdf&quot;'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="856d32bcc87da698ed07c5840a22d1f12723ae41" translate="yes" xml:space="preserve">
          <source>The workaround is fairly straightforward, if verbose:</source>
          <target state="translated">자세한 해결 방법은 다음과 같이 매우 간단합니다.</target>
        </trans-unit>
        <trans-unit id="ed5933000995a5383c6ed2ff9c04f419b1949054" translate="yes" xml:space="preserve">
          <source>Then install your dependencies.</source>
          <target state="translated">그런 다음 종속성을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="c83957b99bd64191b085e333677d9ea4dd57c0d0" translate="yes" xml:space="preserve">
          <source>Then, create an NGINX conf file that looks something like this:</source>
          <target state="translated">그런 다음 다음과 같은 NGINX conf 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e710dd0f5ea5fb473740119a58eb640ed1794dff" translate="yes" xml:space="preserve">
          <source>Then, in another terminal, try running the new test:</source>
          <target state="translated">그런 다음 다른 터미널에서 새 테스트를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="058ff83bf433fdce34d17ad46cb30fd2b9c0f837" translate="yes" xml:space="preserve">
          <source>Then, in another terminal:</source>
          <target state="translated">그런 다음 다른 터미널에서 :</target>
        </trans-unit>
        <trans-unit id="ea446e4aed260aeac1ea4108515a92392503fb68" translate="yes" xml:space="preserve">
          <source>Then, update the responder to use the new media type:</source>
          <target state="translated">그런 다음 새 매체 유형을 사용하도록 응답자를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="3bd31e3411e006ec0faad400ac680109665df979" translate="yes" xml:space="preserve">
          <source>Then, within &lt;code&gt;SomeResource&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;SomeResource&lt;/code&gt; 내에서 :</target>
        </trans-unit>
        <trans-unit id="3892dca92a640808a47561f9deddbea96a1c9202" translate="yes" xml:space="preserve">
          <source>There are many questions to consider when deciding how to manage the processes that actually run your Python code. Are you generally CPU bound or IO bound? Is your application thread-safe? How many CPU&amp;rsquo;s do you have? What system are you on? Do you need an in-process cache?</source>
          <target state="translated">실제로 Python 코드를 실행하는 프로세스를 관리하는 방법을 결정할 때 고려해야 할 많은 질문이 있습니다. 일반적으로 CPU 바운드입니까, IO 바운드입니까? 응용 프로그램이 스레드로부터 안전합니까? CPU가 몇 개 있습니까? 어떤 시스템을 사용하고 있습니까? 프로세스 내 캐시가 필요합니까?</target>
        </trans-unit>
        <trans-unit id="538864632e70a45bc46d9e734ace15ce30ef3609" translate="yes" xml:space="preserve">
          <source>There are many ways to deploy a Python application. The aim of these quickstarts is to simply get you up and running, not to give you a perfectly tuned or secure environment. You will almost certainly need to customize these configurations for any serious production deployment.</source>
          <target state="translated">Python 애플리케이션을 배포하는 방법에는 여러 가지가 있습니다. 이 빠른 시작의 목표는 완벽하게 조정되거나 안전한 환경을 제공하는 것이 아니라 단순히 시작하고 실행하는 것입니다. 심각한 프로덕션 배포를 위해 이러한 구성을 사용자 정의해야 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="0468dcf4b5be0721986ed4c45b049ebe65c3b358" translate="yes" xml:space="preserve">
          <source>This approach reduces the number of (often) extraneous checks that Falcon would otherwise have to perform, making the framework more efficient. With that in mind, writing a high-quality API based on Falcon requires that:</source>
          <target state="translated">이 접근 방식은 Falcon이 수행해야 할 외부 검사의 수를 줄여서 프레임 워크를보다 효율적으로 만듭니다. 이를 염두에두고 Falcon 기반의 고품질 API를 작성하려면 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="cf6ef8fcde3b7971f8ad9f43dec093d58e153493" translate="yes" xml:space="preserve">
          <source>This approach reduces the number of checks that Falcon would otherwise have to perform, making the framework more efficient. With that in mind, writing a high-quality API based on Falcon requires that:</source>
          <target state="translated">이 접근 방식은 Falcon이 수행해야하는 검사 횟수를 줄여 프레임 워크를보다 효율적으로 만듭니다. 이를 염두에두고 Falcon 기반의 고품질 API를 작성하려면 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="3de18ed0edd3b4aca2fe609cbad145d38cd03dc8" translate="yes" xml:space="preserve">
          <source>This base class provides some extra plumbing for unittest-style test cases, to help simulate WSGI calls without having to spin up an actual web server. Simply inherit from this class in your test case classes instead of &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;testtools.TestCase&lt;/code&gt;.</source>
          <target state="translated">이 기본 클래스는 실제 웹 서버를 가동하지 않고도 WSGI 호출을 시뮬레이션하는 데 도움이되도록 단위 테스트 스타일 테스트 사례에 대한 추가 배관을 제공합니다. &lt;a href=&quot;https://docs.python.org/2/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;testtools.TestCase&lt;/code&gt; 대신 테스트 케이스 클래스에서이 클래스를 상속하십시오 .</target>
        </trans-unit>
        <trans-unit id="1eb37faa802d15d2ef35c1f3857902ea4e87b3f0" translate="yes" xml:space="preserve">
          <source>This base class provides some extra plumbing for unittest-style test cases, to help simulate WSGI calls without having to spin up an actual web server. Various simulation methods are derived from &lt;a href=&quot;#falcon.testing.TestClient&quot;&gt;&lt;code&gt;falcon.testing.TestClient&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 기본 클래스는 실제 웹 서버를 가동하지 않고도 WSGI 호출을 시뮬레이션하는 데 도움이되도록 단위 테스트 스타일 테스트 사례에 대한 추가 배관을 제공합니다. 다양한 시뮬레이션 방법은 &lt;a href=&quot;#falcon.testing.TestClient&quot;&gt; &lt;code&gt;falcon.testing.TestClient&lt;/code&gt; &lt;/a&gt; 에서 파생됩니다 .</target>
        </trans-unit>
        <trans-unit id="83db430eaf0691c925d9163a816c8faa18a83903" translate="yes" xml:space="preserve">
          <source>This behavior is an unfortunate artifact of the request body mechanics not being fully defined by the WSGI spec (PEP-3333). This is discussed in the reference documentation for &lt;a href=&quot;../api/request_and_response#falcon.Request.stream&quot;&gt;&lt;code&gt;stream&lt;/code&gt;&lt;/a&gt;, and a workaround is provided in the form of &lt;a href=&quot;../api/request_and_response#falcon.Request.bounded_stream&quot;&gt;&lt;code&gt;bounded_stream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 동작은 WSGI 스펙 (PEP-3333)에 의해 완전히 정의되지 않은 요청 본문 메커니즘의 유감스러운 결과입니다. 이것은 &lt;a href=&quot;../api/request_and_response#falcon.Request.stream&quot;&gt; &lt;code&gt;stream&lt;/code&gt; &lt;/a&gt; 참조 문서에서 논의되었으며, 해결 방법은 &lt;a href=&quot;../api/request_and_response#falcon.Request.bounded_stream&quot;&gt; &lt;code&gt;bounded_stream&lt;/code&gt; &lt;/a&gt; 형식으로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="575831cdc881e2c205f21ddb1875abef45352fbb" translate="yes" xml:space="preserve">
          <source>This can be particulary problematic when a request body is expected, but none is given. In this case, the following call blocks under certain WSGI servers:</source>
          <target state="translated">이것은 요청 본문이 예상 될 때 특히 문제가 될 수 있지만 아무것도 주어지지 않습니다. 이 경우 특정 WSGI 서버에서 다음 호출이 차단됩니다.</target>
        </trans-unit>
        <trans-unit id="1a37dd36e16db22a7706a17bca1712e3fd6f0da7" translate="yes" xml:space="preserve">
          <source>This class can be mixed in when inheriting from &lt;code&gt;HTTPError&lt;/code&gt;, in order to override the &lt;code&gt;has_representation&lt;/code&gt; property such that it always returns &lt;code&gt;False&lt;/code&gt;. This, in turn, will cause Falcon to return an empty response body to the client.</source>
          <target state="translated">&lt;code&gt;has_representation&lt;/code&gt; 속성 을 재정 의하여 항상 &lt;code&gt;False&lt;/code&gt; 를 반환 하도록 &lt;code&gt;HTTPError&lt;/code&gt; 에서 상속 할 때이 클래스를 혼합 할 수 있습니다 . 결과적으로 Falcon은 빈 응답 본문을 클라이언트에게 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f1d8858f685a8ded21353732192737a29def0c0e" translate="yes" xml:space="preserve">
          <source>This class has been deprecated and will be removed in a future release. Please use &lt;a href=&quot;#falcon.testing.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 클래스는 더 이상 사용되지 않으며 향후 릴리스에서 제거 될 예정입니다. 사용하십시오 &lt;a href=&quot;#falcon.testing.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="ea5b0095b7b30ccbb9703087a824cb40cf6b1f36" translate="yes" xml:space="preserve">
          <source>This class implements a simple test resource that can be extended as needed to test middleware, hooks, and the Falcon framework itself.</source>
          <target state="translated">이 클래스는 미들웨어, 후크 및 Falcon 프레임 워크 자체를 테스트하는 데 필요한만큼 확장 할 수있는 간단한 테스트 자원을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="86b8134b6fbe09022de3424bd9b9967809980cd5" translate="yes" xml:space="preserve">
          <source>This class implements the &lt;code&gt;on_get&lt;/code&gt; responder, captures request data, and sets response body and headers.</source>
          <target state="translated">이 클래스는 &lt;code&gt;on_get&lt;/code&gt; 응답자를 구현하고 요청 데이터를 캡처하며 응답 본문 및 헤더를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d8d2d1fe375d7a7963ea3acc36c9ad2ba168baa2" translate="yes" xml:space="preserve">
          <source>This class is deprecated and will be removed in a future release. Please use &lt;a href=&quot;#falcon.testing.SimpleTestResource&quot;&gt;&lt;code&gt;SimpleTestResource&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 클래스는 더 이상 사용되지 않으며 향후 릴리스에서 제거 될 예정입니다. 사용하십시오 &lt;a href=&quot;#falcon.testing.SimpleTestResource&quot;&gt; &lt;code&gt;SimpleTestResource&lt;/code&gt; 을&lt;/a&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="e569a52f104c2326e052d9e403727badcff650bc" translate="yes" xml:space="preserve">
          <source>This class is simply a subclass of &lt;code&gt;str&lt;/code&gt; with a few helper methods and an extra attribute to indicate whether the entity-tag is weak or strong. The value of the string is equivalent to what RFC 7232 calls an &amp;ldquo;opaque-tag&amp;rdquo;, i.e. an entity-tag sans quotes and the weakness indicator.</source>
          <target state="translated">이 클래스는 몇 개의 도우미 메서드와 엔티티 태그가 약한 지 강한지를 나타내는 추가 속성이있는 &lt;code&gt;str&lt;/code&gt; 의 하위 클래스입니다 . 문자열의 값은 RFC 7232가 &quot;불투명 태그&quot;라고 부르는 것과 동일합니다. 즉, 엔티티 태그에는 따옴표와 약점 표시기가 없습니다.</target>
        </trans-unit>
        <trans-unit id="351cdfeec80935d64fb2d071bc70465e3812d318" translate="yes" xml:space="preserve">
          <source>This class is the main entry point into a Falcon-based app.</source>
          <target state="translated">이 클래스는 Falcon 기반 앱의 주요 진입 점입니다.</target>
        </trans-unit>
        <trans-unit id="b26eab43c7014443739176608ddaa6fdb3345378" translate="yes" xml:space="preserve">
          <source>This class is used as the default &lt;a href=&quot;request_and_response#falcon.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; context type (see &lt;a href=&quot;request_and_response#falcon.Request.context_type&quot;&gt;&lt;code&gt;Request.context_type&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;request_and_response#falcon.Response.context_type&quot;&gt;&lt;code&gt;Response.context_type&lt;/code&gt;&lt;/a&gt;, respectively).</source>
          <target state="translated">이 클래스는 기본 &lt;a href=&quot;request_and_response#falcon.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;request_and_response#falcon.Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 컨텍스트 유형 으로 사용됩니다 ( 각각 &lt;a href=&quot;request_and_response#falcon.Request.context_type&quot;&gt; &lt;code&gt;Request.context_type&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;request_and_response#falcon.Response.context_type&quot;&gt; &lt;code&gt;Response.context_type&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="d8a02a423c96eb71f1e38d9c3c2977a19e9708a8" translate="yes" xml:space="preserve">
          <source>This class provides a contextual wrapper for Falcon&amp;rsquo;s &lt;code&gt;simulate_*&lt;/code&gt; test functions. It lets you replace this:</source>
          <target state="translated">이 클래스는 Falcon의 &lt;code&gt;simulate_*&lt;/code&gt; 테스트 함수를 위한 컨텍스트 래퍼를 제공 합니다. 이를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec6c8f9e435bda115a0f1e3103cb8f7afa2083f5" translate="yes" xml:space="preserve">
          <source>This code creates your WSGI application and aliases it as &lt;code&gt;api&lt;/code&gt;. You can use any variable names you like, but we&amp;rsquo;ll use &lt;code&gt;application&lt;/code&gt; since that is what Gunicorn, by default, expects it to be called (we&amp;rsquo;ll see how this works in the next section of the tutorial).</source>
          <target state="translated">이 코드는 WSGI 애플리케이션을 작성하고이를 별명으로 &lt;code&gt;api&lt;/code&gt; 로 지정 합니다. 원하는 변수 이름을 사용할 수 있지만 기본적으로 Gunicorn이 호출 할 것으로 예상되므로 &lt;code&gt;application&lt;/code&gt; 사용 합니다 (자습서의 다음 섹션에서이 기능이 작동하는 방식을 볼 것입니다).</target>
        </trans-unit>
        <trans-unit id="945916be8ee008a1326c7d3b593c0ff2b41e1ec6" translate="yes" xml:space="preserve">
          <source>This configuration, when executed, will create a new uWSGI server backed by your &lt;code&gt;wsgi.py&lt;/code&gt; file and listening at &lt;code&gt;12.0.0.1:8080&lt;/code&gt;.</source>
          <target state="translated">이 구성을 실행하면 &lt;code&gt;wsgi.py&lt;/code&gt; 파일이 지원 하고 &lt;code&gt;12.0.0.1:8080&lt;/code&gt; 에서 수신 하는 새 uWSGI 서버가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="5a11756512de7471b7c1e0f0cd0da07645562ca3" translate="yes" xml:space="preserve">
          <source>This decorator provides standard JSON Schema validation via the &lt;code&gt;jsonschema&lt;/code&gt; package available from PyPI. Semantic validation via the &lt;em&gt;format&lt;/em&gt; keyword is enabled for the default checkers implemented by &lt;code&gt;jsonschema.FormatChecker&lt;/code&gt;.</source>
          <target state="translated">이 데코레이터는 PyPI에서 제공되는 &lt;code&gt;jsonschema&lt;/code&gt; 패키지 를 통해 표준 JSON 스키마 유효성 검사를 제공합니다 . &lt;code&gt;jsonschema.FormatChecker&lt;/code&gt; 에 의해 구현 된 기본 체커에 대해 &lt;em&gt;format&lt;/em&gt; 키워드 를 통한 시맨틱 유효성 검증 이 사용 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="fabd7f658c89064a4a643939782c87696b0a5eea" translate="yes" xml:space="preserve">
          <source>This feature affords use cases in which the response may be pre-constructed, such as in the case of caching.</source>
          <target state="translated">이 기능은 캐싱의 경우와 같이 응답이 미리 구성 될 수있는 사용 사례를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c485b2df49824fb9f013b4e676fa393c36e40266" translate="yes" xml:space="preserve">
          <source>This function can be used to construct custom routing engines that iterate through a list of possible routes, attempting to match an incoming request against each route&amp;rsquo;s compiled regular expression.</source>
          <target state="translated">이 함수는 가능한 경로 목록을 반복하여 들어오는 요청을 각 경로의 컴파일 된 정규식과 일치 시키려고 시도하는 사용자 지정 라우팅 엔진을 구성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04608fac3cce4799bded346700d0a81ca00edf9c" translate="yes" xml:space="preserve">
          <source>This function does not support the more flexible templating syntax used in the default router. Only simple paths with bracketed field expressions are recognized. For example:</source>
          <target state="translated">이 기능은 기본 라우터에서 사용되는보다 유연한 템플릿 구문을 지원하지 않습니다. 대괄호 필드 표현식이있는 단순 경로 만 인식됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a62e418c97abdb6aafbc540a01a8c61b30656ad0" translate="yes" xml:space="preserve">
          <source>This function models the behavior of &lt;code&gt;urllib.parse.unquote_plus&lt;/code&gt;, albeit in a faster, more straightforward manner.</source>
          <target state="translated">이 함수는 &lt;code&gt;urllib.parse.unquote_plus&lt;/code&gt; 의 동작을 모델링 하지만 더 빠르고 간단합니다.</target>
        </trans-unit>
        <trans-unit id="6ba2990369210f2a25e64c463aea8561bef3b2b4" translate="yes" xml:space="preserve">
          <source>This function models the behavior of &lt;code&gt;urllib.unquote_plus&lt;/code&gt;, but is faster. It is also more robust, in that it will decode escaped UTF-8 mutibyte sequences.</source>
          <target state="translated">이 함수는 &lt;code&gt;urllib.unquote_plus&lt;/code&gt; 의 동작을 모델링 하지만 더 빠릅니다. 또한 이스케이프 된 UTF-8 뮤타 바이트 시퀀스를 디코딩한다는 점에서 더욱 강력합니다.</target>
        </trans-unit>
        <trans-unit id="4ed0cba5df06330c80b757635826207bb3546de9" translate="yes" xml:space="preserve">
          <source>This function returns a decorator which can be used to mark deprecated functions. Applying this decorator will result in a warning being emitted when the function is used.</source>
          <target state="translated">이 함수는 더 이상 사용되지 않는 함수를 표시하는 데 사용할 수있는 데코레이터를 반환합니다. 이 데코레이터를 적용하면 기능을 사용할 때 경고가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0e26e63e2e38fc63600018a944300dd1d5e404cc" translate="yes" xml:space="preserve">
          <source>This guide provides instructions for deploying to a Linux environment only. However, with a bit of effort you should be able to adapt this configuration to other operating systems, such as OpenBSD.</source>
          <target state="translated">이 가이드는 Linux 환경에만 배포하기위한 지침을 제공합니다. 그러나 약간의 노력을 기울이면 OpenBSD와 같은 다른 운영 체제에이 구성을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2196133afdaf7ad89fa4cc632efefcba16a652c" translate="yes" xml:space="preserve">
          <source>This handler requires the extra &lt;code&gt;msgpack&lt;/code&gt; package (version 0.5.2 or higher), which must be installed in addition to &lt;code&gt;falcon&lt;/code&gt; from PyPI:</source>
          <target state="translated">이 핸들러에는 추가 &lt;code&gt;msgpack&lt;/code&gt; 패키지 (버전 0.5.2 이상)가 필요 하며 PyPI의 &lt;code&gt;falcon&lt;/code&gt; 에 추가로 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c60d56668c7f47706ebf7f20635cf74c840165a1" translate="yes" xml:space="preserve">
          <source>This handler requires the extra &lt;code&gt;msgpack&lt;/code&gt; package, which must be installed in addition to &lt;code&gt;falcon&lt;/code&gt; from PyPI:</source>
          <target state="translated">이 핸들러에는 추가 &lt;code&gt;msgpack&lt;/code&gt; 패키지 가 필요하며 , PyPI의 &lt;code&gt;falcon&lt;/code&gt; 외에 추가로 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a2d15a8d0863c33e2f5906ebb658a07ff7d363dc" translate="yes" xml:space="preserve">
          <source>This handler uses &lt;code&gt;msgpack.unpackb()&lt;/code&gt; and &lt;code&gt;msgpack.packb()&lt;/code&gt;. The MessagePack &lt;code&gt;bin&lt;/code&gt; type is used to distinguish between Unicode strings (&lt;code&gt;str&lt;/code&gt; on Python 3, &lt;code&gt;unicode&lt;/code&gt; on Python 2) and byte strings (&lt;code&gt;bytes&lt;/code&gt; on Python 2/3, or &lt;code&gt;str&lt;/code&gt; on Python 2).</source>
          <target state="translated">이 핸들러는 &lt;code&gt;msgpack.unpackb()&lt;/code&gt; 및 &lt;code&gt;msgpack.packb()&lt;/code&gt; 합니다. MessagePack &lt;code&gt;bin&lt;/code&gt; 유형은 유니 코드 문자열 ( Python 3의 &lt;code&gt;str&lt;/code&gt; , Python 2의 &lt;code&gt;unicode&lt;/code&gt; )과 바이트 문자열 ( Python 2/3의 &lt;code&gt;bytes&lt;/code&gt; 또는 Python 2의 &lt;code&gt;str&lt;/code&gt; ) 을 구별하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="492b0b49e4c72e09038318ef3e39f858bdf3a3a5" translate="yes" xml:space="preserve">
          <source>This handler uses Python&amp;rsquo;s standard &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; library by default, but can be easily configured to use any of a number of third-party JSON libraries, depending on your needs. For example, you can often realize a significant performance boost under CPython by using an alternative library. Good options in this respect include &lt;code&gt;orjson&lt;/code&gt;, &lt;code&gt;python-rapidjson&lt;/code&gt;, and &lt;code&gt;mujson&lt;/code&gt;.</source>
          <target state="translated">이 핸들러는 기본적으로 Python의 표준 &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt; &lt;code&gt;json&lt;/code&gt; &lt;/a&gt; 라이브러리를 사용하지만 필요에 따라 여러 타사 JSON 라이브러리를 사용하도록 쉽게 구성 할 수 있습니다. 예를 들어, 대체 라이브러리를 사용하여 CPython에서 상당한 성능 향상을 실현할 수 있습니다. 이 점에서 좋은 옵션에는 &lt;code&gt;orjson&lt;/code&gt; , &lt;code&gt;python-rapidjson&lt;/code&gt; 및 &lt;code&gt;mujson&lt;/code&gt; 이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="214db402f72586b0835fc9540be5fee0eb1c673f" translate="yes" xml:space="preserve">
          <source>This is also safe:</source>
          <target state="translated">이것은 또한 안전합니다 :</target>
        </trans-unit>
        <trans-unit id="d1096d75a4c74e2ff67bbdda84e1d86249f5916a" translate="yes" xml:space="preserve">
          <source>This is generated automatically by Falcon based on the set of methods implemented by the target resource. If a resource does not include its own OPTIONS responder, the framework provides a default implementation. Therefore, OPTIONS is always included in the list of allowable methods.</source>
          <target state="translated">이는 대상 리소스에 의해 구현 된 일련의 메소드를 기반으로 Falcon에 의해 자동으로 생성됩니다. 자원에 자체 OPTIONS 응답자가 포함되지 않은 경우 프레임 워크는 기본 구현을 제공합니다. 따라서 OPTIONS는 항상 허용 가능한 메소드 목록에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c54258c9780f73bba6721118365a2c63c9c900bc" translate="yes" xml:space="preserve">
          <source>This is one of the key differences between the REST and RPC architectural styles. REST applies a standard set of verbs across any number of resources, as opposed to having each application define its own unique set of methods.</source>
          <target state="translated">이것이 REST와 RPC 아키텍처 스타일의 주요 차이점 중 하나입니다. REST는 각 애플리케이션이 고유 한 메소드 세트를 정의하는 것과 달리 여러 자원에 표준 동사 세트를 적용합니다.</target>
        </trans-unit>
        <trans-unit id="6b3d159d093d5f3f64b5c184f2ee9fa42d687ddc" translate="yes" xml:space="preserve">
          <source>This method can be called multiple times to add one or more cookies to the response.</source>
          <target state="translated">응답에 하나 이상의 쿠키를 추가하기 위해이 메소드를 여러 번 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7460f1bc8fa30745783d4ce0b5d6b8482466ee6a" translate="yes" xml:space="preserve">
          <source>This method can be used to set a collection of raw header names and values all at once.</source>
          <target state="translated">이 메서드는 원시 헤더 이름 및 값의 컬렉션을 한 번에 모두 설정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f01c9adf8ef88f379a5d015519e9e41b2a503de" translate="yes" xml:space="preserve">
          <source>This method can be useful when serializing the error to hash-like media types, such as YAML, JSON, and MessagePack.</source>
          <target state="translated">이 방법은 오류를 YAML, JSON 및 MessagePack과 같은 해시 유사 미디어 유형으로 직렬화 할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb9ea7f64e147193bdc50dfde6b4979b21593cc3" translate="yes" xml:space="preserve">
          <source>This method cannot be used to set cookies; instead, use &lt;a href=&quot;#falcon.Response.append_header&quot;&gt;&lt;code&gt;append_header()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 쿠키 설정에 사용할 수 없습니다. 대신 &lt;a href=&quot;#falcon.Response.append_header&quot;&gt; &lt;code&gt;append_header()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#falcon.Response.set_cookie&quot;&gt; &lt;code&gt;set_cookie()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bce60bb38fc793fd5739b63a509c5169b80fc122" translate="yes" xml:space="preserve">
          <source>This method cannot be used with the Set-Cookie header. Instead, use &lt;a href=&quot;#falcon.Response.unset_cookie&quot;&gt;&lt;code&gt;unset_cookie()&lt;/code&gt;&lt;/a&gt; to remove a cookie and ensure that the user agent expires its own copy of the data as well.</source>
          <target state="translated">이 메서드는 Set-Cookie 헤더와 함께 사용할 수 없습니다. 대신 &lt;a href=&quot;#falcon.Response.unset_cookie&quot;&gt; &lt;code&gt;unset_cookie()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 쿠키를 제거하고 사용자 에이전트가 자체 데이터 사본도 만료하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="fa1dcd57dade3758b919731147a59077d2415181" translate="yes" xml:space="preserve">
          <source>This method delegates to the configured router&amp;rsquo;s &lt;code&gt;add_route()&lt;/code&gt; method. To override the default behavior, pass a custom router object to the &lt;a href=&quot;#falcon.API&quot;&gt;&lt;code&gt;API&lt;/code&gt;&lt;/a&gt; initializer.</source>
          <target state="translated">이 메서드는 구성된 라우터의 &lt;code&gt;add_route()&lt;/code&gt; 메서드에 위임합니다 . 기본 동작을 재정의하려면 사용자 지정 라우터 개체를 &lt;a href=&quot;#falcon.API&quot;&gt; &lt;code&gt;API&lt;/code&gt; &lt;/a&gt; 이니셜 라이저에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="0582b3e3ed01018d1c0698bbd82f51d18ad3c1e4" translate="yes" xml:space="preserve">
          <source>This method has been deprecated and will be removed in a future release.</source>
          <target state="translated">이 방법은 더 이상 사용되지 않으며 향후 릴리스에서 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="6e3e607a875875b7b2209d58006ce3711971b130" translate="yes" xml:space="preserve">
          <source>This method is called from &lt;a href=&quot;#falcon.routing.CompiledRouter.add_route&quot;&gt;&lt;code&gt;add_route()&lt;/code&gt;&lt;/a&gt; and may be overridden to provide a custom mapping strategy.</source>
          <target state="translated">이 메서드는 &lt;a href=&quot;#falcon.routing.CompiledRouter.add_route&quot;&gt; &lt;code&gt;add_route()&lt;/code&gt; &lt;/a&gt; 에서 호출되며 사용자 지정 매핑 전략을 제공하기 위해 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="96161489153be8796208732566c8a6f3921896df" translate="yes" xml:space="preserve">
          <source>This method is deprecated and will be removed in a future release. Please use &lt;a href=&quot;#falcon.routing.map_http_methods&quot;&gt;&lt;code&gt;map_http_methods()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#falcon.routing.map_http_methods&quot;&gt;&lt;code&gt;map_http_methods()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 방법은 더 이상 사용되지 않으며 향후 릴리스에서 제거 될 예정입니다. 사용하십시오 &lt;a href=&quot;#falcon.routing.map_http_methods&quot;&gt; &lt;code&gt;map_http_methods()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#falcon.routing.map_http_methods&quot;&gt; &lt;code&gt;map_http_methods()&lt;/code&gt; &lt;/a&gt; 대신합니다.</target>
        </trans-unit>
        <trans-unit id="b751081b13b2508aaccd831281a5e9f01a1e0fb9" translate="yes" xml:space="preserve">
          <source>This method is meant to be used only for parsing a single entity-tag. It can not be used to parse a comma-separated list of values.</source>
          <target state="translated">이 메소드는 단일 엔티티 태그를 구문 분석하는 데만 사용됩니다. 쉼표로 구분 된 값 목록을 구문 분석하는 데 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9420f3e95c415620ac685c4b8afb54d6e4f9c116" translate="yes" xml:space="preserve">
          <source>This method may be overridden to customize how a route is added.</source>
          <target state="translated">이 메서드는 경로 추가 방법을 사용자 지정하기 위해 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6f3015929de3281597f6a9caf26301403aef5d0" translate="yes" xml:space="preserve">
          <source>This method treats valueless parameters as flags. By default, if no value is provided for the parameter in the query string, &lt;code&gt;True&lt;/code&gt; is assumed and returned. If the parameter is missing altogether, &lt;code&gt;None&lt;/code&gt; is returned as with other &lt;code&gt;get_param_*()&lt;/code&gt; methods, which can be easily treated as falsy by the caller as needed.</source>
          <target state="translated">이 메소드는 값이없는 매개 변수를 플래그로 처리합니다. 기본적으로 쿼리 문자열의 매개 변수에 값이 제공되지 않으면 &lt;code&gt;True&lt;/code&gt; 로 간주되어 반환됩니다. 매개 변수가 모두 누락 된 경우 &lt;code&gt;None&lt;/code&gt; 이 다른 &lt;code&gt;get_param_*()&lt;/code&gt; 메서드 와 마찬가지로 반환되며 , 필요에 따라 호출자가 쉽게 거짓으로 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="c6cd18be45da31ff2d32fa091b9fc5a197ecf3d2" translate="yes" xml:space="preserve">
          <source>This mixin class must appear before &lt;code&gt;HTTPError&lt;/code&gt; in the base class list when defining the child; otherwise, it will not override the &lt;code&gt;has_representation&lt;/code&gt; property as expected.</source>
          <target state="translated">이 믹스 인 클래스는 하위 클래스를 정의 할 때 기본 클래스 목록에서 &lt;code&gt;HTTPError&lt;/code&gt; 앞에 나타나야합니다 . 그렇지 않으면 예상대로 &lt;code&gt;has_representation&lt;/code&gt; 특성을 대체하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="6180722d18e73a8a5c55f85aed9d2bed0aaeaa87" translate="yes" xml:space="preserve">
          <source>This module provides utility functions to parse, encode, decode, and otherwise manipulate a URI. These functions are not available directly in the &lt;code&gt;falcon&lt;/code&gt; module, and so must be explicitly imported:</source>
          <target state="translated">이 모듈은 URI 구문 분석, 인코딩, 디코딩 및 조작을위한 유틸리티 기능을 제공합니다. 이러한 기능은 &lt;code&gt;falcon&lt;/code&gt; 모듈 에서 직접 사용할 수 없으므로 명시 적으로 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="c1efc76481c003bbe435b715451a6bf56bd1be96" translate="yes" xml:space="preserve">
          <source>This operation will consume the request stream the first time it&amp;rsquo;s called and cache the results. Follow-up calls will just retrieve a cached version of the object.</source>
          <target state="translated">이 작업은 요청 스트림을 처음 호출 할 때 요청 스트림을 소비하고 결과를 캐시합니다. 후속 호출은 캐시 된 버전의 객체 만 검색합니다.</target>
        </trans-unit>
        <trans-unit id="9f935167805cd94ee346793be1a31e18f0b5e396" translate="yes" xml:space="preserve">
          <source>This property can be used for responding to HEAD requests when you aren&amp;rsquo;t actually providing the response body, or when streaming the response. If either the &lt;code&gt;body&lt;/code&gt; property or the &lt;code&gt;data&lt;/code&gt; property is set on the response, the framework will force Content-Length to be the length of the given body bytes. Therefore, it is only necessary to manually set the content length when those properties are not used.</source>
          <target state="translated">이 속성은 실제로 응답 본문을 제공하지 않거나 응답을 스트리밍 할 때 HEAD 요청에 응답하는 데 사용할 수 있습니다. 중 하나를하면 &lt;code&gt;body&lt;/code&gt; 속성 또는 &lt;code&gt;data&lt;/code&gt; 속성이 응답에 설정되어, 프레임 워크는 주어진 몸 바이트의 길이로 콘텐츠 길이를 강제 할 것이다. 따라서 해당 속성을 사용하지 않을 때 콘텐츠 길이를 수동으로 설정하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="1355279adc09b08a5bf566a08dc757aa293bd7c9" translate="yes" xml:space="preserve">
          <source>This property is determined by the value of &lt;code&gt;REMOTE_ADDR&lt;/code&gt; in the WSGI environment dict. Since this address is not derived from an HTTP header, clients and proxies can not forge it.</source>
          <target state="translated">이 특성은 WSGI 환경 dict 의 &lt;code&gt;REMOTE_ADDR&lt;/code&gt; 값에 의해 결정됩니다 . 이 주소는 HTTP 헤더에서 파생되지 않으므로 클라이언트와 프록시는이를 위조 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="618a134f818ea46a1df87da0c3e4d1659a8d85b8" translate="yes" xml:space="preserve">
          <source>This property provides a list of all &lt;code&gt;entity-tags&lt;/code&gt; in the header, both strong and weak, in the same order as listed in the header.</source>
          <target state="translated">이 속성은 헤더에 나열된 것과 동일한 순서로 헤더 의 모든 &lt;code&gt;entity-tags&lt;/code&gt; 강함 및 약함) 목록을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="30c9e0ec02ed118a193d716c52418291eb23388d" translate="yes" xml:space="preserve">
          <source>This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a &amp;ldquo;black hole&amp;rdquo; of redirection (e.g., a redirected URI prefix that points to a suffix of itself) or when the server is under attack by a client attempting to exploit potential security holes.</source>
          <target state="translated">클라이언트가 리디렉션의 &quot;블랙홀&quot;로 내려갈 때 (예 : 리디렉션 된 URI 접두사) 클라이언트가 POST 요청을 긴 쿼리 정보가있는 GET 요청으로 잘못 변환 한 경우에만이 드문 조건이 발생할 수 있습니다. 접미사 자체) 또는 잠재적 보안 허점을 악용하려는 클라이언트가 서버를 공격하는 경우.</target>
        </trans-unit>
        <trans-unit id="b02f0958ff93b5ce14d8ee29f8adf7d4415aa166" translate="yes" xml:space="preserve">
          <source>This response code allows the client to place preconditions on the current resource state (its current representations and metadata) and, thus, prevent the request method from being applied if the target resource is in an unexpected state.</source>
          <target state="translated">이 응답 코드를 통해 클라이언트는 현재 자원 상태 (현재 표현 및 메타 데이터)에 사전 조건을 배치 할 수 있으므로 대상 자원이 예기치 않은 상태 인 경우 요청 메소드가 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="64ed799c0a5556073d44f18ee9829382b62cf221" translate="yes" xml:space="preserve">
          <source>This status code is similar to 301 (Moved Permanently), except that it does not allow changing the request method from POST to GET.</source>
          <target state="translated">이 상태 코드는 요청 방법을 POST에서 GET으로 변경할 수 없다는 점을 제외하고 301 (영구적으로 이동)과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="bbb350f8840e12956cd2735dc6b2e5035c5e47b8" translate="yes" xml:space="preserve">
          <source>This status code is similar to 302 (Found), except that it does not allow changing the request method from POST to GET.</source>
          <target state="translated">이 상태 코드는 요청 방법을 POST에서 GET으로 변경할 수 없다는 점을 제외하고 302 (발견)와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="6aade9c997727eb85db542b7b00d3954e70222e0" translate="yes" xml:space="preserve">
          <source>This time you should get back &lt;code&gt;405 Method Not Allowed&lt;/code&gt;, since the resource does not support the &lt;code&gt;PUT&lt;/code&gt; method. Note the value of the Allow header:</source>
          <target state="translated">자원이 &lt;code&gt;PUT&lt;/code&gt; 메소드를 지원하지 않으므로 이번에는 &lt;code&gt;405 Method Not Allowed&lt;/code&gt; 를 리턴 해야합니다 . Allow 헤더의 값에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="e8456960a933ab83810e07e09c95d3a5bebd3a81" translate="yes" xml:space="preserve">
          <source>This utility is faster in the average case than the similar &lt;code&gt;quote&lt;/code&gt; function found in &lt;code&gt;urlib&lt;/code&gt;. It also strives to be easier to use by assuming a sensible default of allowed characters.</source>
          <target state="translated">이 유틸리티는 &lt;code&gt;urlib&lt;/code&gt; 에 있는 유사한 &lt;code&gt;quote&lt;/code&gt; 함수 보다 평균적으로 더 빠릅니다 . 또한 허용되는 기본 문자를 적절하게 가정하여 사용하기가 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="7875c02ed00683a74753216d4257c015a1dcc582" translate="yes" xml:space="preserve">
          <source>This value will be URI encoded per RFC 3986. If the value that is being set is already URI encoded it should be decoded first or the header should be set manually using the set_header method.</source>
          <target state="translated">이 값은 RFC 3986에 따라 URI로 인코딩됩니다. 설정중인 값이 이미 URI로 인코딩 된 경우 먼저 디코딩하거나 헤더를 set_header 메소드를 사용하여 수동으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="81c65c066261de5a75c91cf877351767d694e4d8" translate="yes" xml:space="preserve">
          <source>This will be useful when creating a POST endpoint in the application that can add new image resources to our collection. We&amp;rsquo;ll tackle this functionality next.</source>
          <target state="translated">이것은 컬렉션에 새로운 이미지 리소스를 추가 할 수있는 응용 프로그램에서 POST 엔드 포인트를 생성 할 때 유용합니다. 다음에이 기능을 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="translated">Tip</target>
        </trans-unit>
        <trans-unit id="3c2984e4e70e730cfc6f0babe984a2d9daaf48db" translate="yes" xml:space="preserve">
          <source>To avoid unnecessary overhead, Falcon will only process request media the first time the media property is referenced. Once it has been referenced, it&amp;rsquo;ll use the cached result for subsequent interactions.</source>
          <target state="translated">불필요한 오버 헤드를 피하기 위해 Falcon은 미디어 속성을 처음 참조 할 때만 요청 미디어를 처리합니다. 참조 된 후에는 후속 상호 작용에 캐시 된 결과를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6cce23c468a4657925493b1b2f347fff376a18f0" translate="yes" xml:space="preserve">
          <source>To customize the error presentation, implement a custom error serializer and set it on the &lt;a href=&quot;api#falcon.API&quot;&gt;&lt;code&gt;API&lt;/code&gt;&lt;/a&gt; instance via &lt;a href=&quot;api#falcon.API.set_error_serializer&quot;&gt;&lt;code&gt;set_error_serializer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">오류 표시를 사용자 정의하려면 사용자 정의 오류 직렬 변환기를 구현하고 &lt;a href=&quot;api#falcon.API.set_error_serializer&quot;&gt; &lt;code&gt;set_error_serializer()&lt;/code&gt; &lt;/a&gt; 를 통해 &lt;a href=&quot;api#falcon.API&quot;&gt; &lt;code&gt;API&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4ee0411fa4ecb63785397e328d283cadcdbdf1e" translate="yes" xml:space="preserve">
          <source>To customize what data is passed to the serializer, subclass &lt;a href=&quot;#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; or any of its child classes, and override the &lt;a href=&quot;#falcon.HTTPError.to_dict&quot;&gt;&lt;code&gt;to_dict()&lt;/code&gt;&lt;/a&gt; method. To also support XML, override the &lt;a href=&quot;#falcon.HTTPError.to_xml&quot;&gt;&lt;code&gt;to_xml()&lt;/code&gt;&lt;/a&gt; method. For example:</source>
          <target state="translated">직렬화 기, 서브 클래스 &lt;a href=&quot;#falcon.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt; 또는 해당 하위 클래스 로 전달되는 데이터를 사용자 정의 하고 &lt;a href=&quot;#falcon.HTTPError.to_dict&quot;&gt; &lt;code&gt;to_dict()&lt;/code&gt; &lt;/a&gt; 메소드를 대체하십시오 . XML도 지원하려면 &lt;a href=&quot;#falcon.HTTPError.to_xml&quot;&gt; &lt;code&gt;to_xml()&lt;/code&gt; &lt;/a&gt; 메소드를 대체하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0d0858657dcd844dca6515f7700d7655e269dafc" translate="yes" xml:space="preserve">
          <source>To customize what data is passed to the serializer, subclass &lt;code&gt;HTTPError&lt;/code&gt; and override the &lt;code&gt;to_dict()&lt;/code&gt; method (&lt;code&gt;to_json()&lt;/code&gt; is implemented via &lt;code&gt;to_dict()&lt;/code&gt;). To also support XML, override the &lt;code&gt;to_xml()&lt;/code&gt; method.</source>
          <target state="translated">직렬화 &lt;code&gt;to_dict()&lt;/code&gt; 전달되는 데이터를 사용자 정의하려면 &lt;code&gt;HTTPError&lt;/code&gt; 서브 클래스를 작성 하고 to_dict () 메소드를 대체하십시오 ( &lt;code&gt;to_json()&lt;/code&gt; 은 &lt;code&gt;to_dict()&lt;/code&gt; 를 통해 구현 됨 ). XML도 지원하려면 &lt;code&gt;to_xml()&lt;/code&gt; 메소드를 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="d908b2d890e345b72f4d7418cd64ce389eaaefe5" translate="yes" xml:space="preserve">
          <source>To fix this, simply edit &lt;code&gt;app.py&lt;/code&gt; and pass in a path to the initializer. For now, just use the working directory from which you started the service:</source>
          <target state="translated">이 문제를 해결하려면 &lt;code&gt;app.py&lt;/code&gt; 를 편집 하고 초기화 프로그램의 경로를 전달하십시오. 지금은 서비스를 시작한 작업 디렉토리를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bb6d8d1c423b819dca1d426a146a15f3e2fbc463" translate="yes" xml:space="preserve">
          <source>To learn more about TDD, you may wish to check out one of the many books on the topic, such as &lt;a href=&quot;http://www.obeythetestinggoat.com/pages/book.html&quot;&gt;Test Driven Development with Python&lt;/a&gt;. The examples in this particular book use the Django framework and even JavaScript, but the author covers a number of testing principles that are widely applicable.</source>
          <target state="translated">TDD에 대해 더 배우려면 &lt;a href=&quot;http://www.obeythetestinggoat.com/pages/book.html&quot;&gt;Python을 사용한 Test Driven Development와&lt;/a&gt; 같은 주제에 관한 많은 책 중 하나를 확인하십시오 . 이 특정 책의 예제는 Django 프레임 워크 및 JavaScript를 사용하지만 저자는 광범위하게 적용 할 수있는 여러 테스트 원칙을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="9b490dc41e827609d6d215c1ca260b9d2987d559" translate="yes" xml:space="preserve">
          <source>To learn more about setting cookies, see &lt;a href=&quot;cookies#setting-cookies&quot;&gt;Setting Cookies&lt;/a&gt;. The parameters listed below correspond to those defined in &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt;.</source>
          <target state="translated">쿠키 설정에 대한 자세한 내용은 쿠키 &lt;a href=&quot;cookies#setting-cookies&quot;&gt;설정을&lt;/a&gt; 참조하십시오 . 아래에 나열된 매개 변수는 &lt;a href=&quot;http://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265에&lt;/a&gt; 정의 된 매개 변수에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="4c7db2dcb80ea723400b53832ad9a3046a757114" translate="yes" xml:space="preserve">
          <source>To learn more about setting cookies, see &lt;a href=&quot;cookies#setting-cookies&quot;&gt;Setting Cookies&lt;/a&gt;. The parameters listed below correspond to those defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a091be808a116ed42feee6115d09c997b7038bea" translate="yes" xml:space="preserve">
          <source>To make the new test pass, we need to add a new method for handling POSTs. Open &lt;code&gt;images.py&lt;/code&gt; and add a POST responder to the &lt;code&gt;Resource&lt;/code&gt; class as follows:</source>
          <target state="translated">새로운 테스트를 통과하려면 POST 처리를위한 새로운 방법을 추가해야합니다. &lt;code&gt;images.py&lt;/code&gt; 를 열고 다음과 같이 POST 응답자를 &lt;code&gt;Resource&lt;/code&gt; 클래스에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="9f075b71ee1f0a8ecfc3079311dd870008c1fe75" translate="yes" xml:space="preserve">
          <source>To test this example go to the another terminal and run:</source>
          <target state="translated">이 예제를 테스트하려면 다른 터미널로 이동하여 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="efaf408f108b958a95337a23ca8c8dc57fe72264" translate="yes" xml:space="preserve">
          <source>To work around this, RFC 3986 specifies &lt;code&gt;+&lt;/code&gt; as a reserved character, and recommends percent-encoding any such characters when their literal value is desired (&lt;code&gt;%2B&lt;/code&gt; in the case of &lt;code&gt;+&lt;/code&gt;).</source>
          <target state="translated">이 문제를 해결하기 위해 RFC 3986은 &lt;code&gt;+&lt;/code&gt; 를 예약 문자로 지정 하고 리터럴 값을 원할 때 이러한 문자를 백분율로 인코딩하는 것이 좋습니다 ( &lt;code&gt;+&lt;/code&gt; 의 경우 &lt;code&gt;%2B&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="63b6df82bf73a656f50ab1e70b9c2eeacae1c6e9" translate="yes" xml:space="preserve">
          <source>Try executing the following:</source>
          <target state="translated">다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="ec61eef14ea59a4d5b0288e2be9ae99fdbcdff2e" translate="yes" xml:space="preserve">
          <source>Try running the tests again. This time, they should pass with flying colors!</source>
          <target state="translated">테스트를 다시 실행하십시오. 이번에는 비행 색상으로 전달해야합니다!</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="9413bdd154a51f8ae2f9a6bcd62ebd547a454a54" translate="yes" xml:space="preserve">
          <source>Two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.</source>
          <target state="translated">둘 다 약하지 않고 불투명 태그가 문자별로 일치하는 경우 두 개의 엔티티 태그는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ee3fb11d05c90c37311491cf33008925b13b487f" translate="yes" xml:space="preserve">
          <source>Type:</source>
          <target state="translated">Type:</target>
        </trans-unit>
        <trans-unit id="77dbbe969278a4a76b3a545f1daaf93d087e2ea8" translate="yes" xml:space="preserve">
          <source>URI Functions</source>
          <target state="translated">URI 함수</target>
        </trans-unit>
        <trans-unit id="79c179ef01c2467c00442c91909f98b2587e0440" translate="yes" xml:space="preserve">
          <source>URI utilities.</source>
          <target state="translated">URI 유틸리티.</target>
        </trans-unit>
        <trans-unit id="788796ddccfc99b3425644561c6ea57a8b8b7280" translate="yes" xml:space="preserve">
          <source>URL scheme used for the request. Either &amp;lsquo;http&amp;rsquo; or &amp;lsquo;https&amp;rsquo;.</source>
          <target state="translated">요청에 사용되는 URL 체계입니다. 'http'또는 'https'입니다.</target>
        </trans-unit>
        <trans-unit id="a1d281ac63b121ed81137d88b2854573c7464a22" translate="yes" xml:space="preserve">
          <source>URLs provide a way for the client to uniquely identify resources. For example, &lt;code&gt;/players&lt;/code&gt; might identify the &amp;ldquo;list of all players&amp;rdquo; resource, while &lt;code&gt;/players/45301f54&lt;/code&gt; might identify the &amp;ldquo;individual player with ID 45301f54&amp;rdquo;, and &lt;code&gt;/players/45301f54/achievements&lt;/code&gt; the &amp;ldquo;list of all achievements for the player resource with ID 45301f54&amp;rdquo;.</source>
          <target state="translated">URL은 클라이언트가 리소스를 고유하게 식별 할 수있는 방법을 제공합니다. 예를 들어, &lt;code&gt;/players&lt;/code&gt; 는 &quot;모든 플레이어 목록&quot;리소스를 식별하고 &lt;code&gt;/players/45301f54&lt;/code&gt; 는 &quot;ID가 45301f54 인 개별 플레이어&quot;를 식별하고 &lt;code&gt;/players/45301f54/achievements&lt;/code&gt; 는 &quot;플레이어 리소스에 대한 모든 업적 목록을 ID 45301f54&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="21bf75a5255af008f6315cb6aca4bb3bdccee521" translate="yes" xml:space="preserve">
          <source>UUID</source>
          <target state="translated">UUID</target>
        </trans-unit>
        <trans-unit id="36551329945cf2d4f69f47a2e48542b71242727a" translate="yes" xml:space="preserve">
          <source>Under Python 2.x, if your content is of type &lt;code&gt;str&lt;/code&gt;, using the &lt;code&gt;data&lt;/code&gt; attribute instead of &lt;code&gt;body&lt;/code&gt; is the most efficient approach. However, if your text is of type &lt;code&gt;unicode&lt;/code&gt;, you will need to use the &lt;code&gt;body&lt;/code&gt; attribute instead.</source>
          <target state="translated">Python 2.x에서 컨텐츠가 &lt;code&gt;str&lt;/code&gt; 유형 인 경우 &lt;code&gt;body&lt;/code&gt; 대신 &lt;code&gt;data&lt;/code&gt; 속성을 사용하는 것이 가장 효율적인 방법입니다. 그러나 텍스트가 &lt;code&gt;unicode&lt;/code&gt; 유형 인 경우 &lt;code&gt;body&lt;/code&gt; 속성을 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9186b62f6629cc54aaec261451fff3551169042c" translate="yes" xml:space="preserve">
          <source>Under Python 3.x, on the other hand, the 2.x &lt;code&gt;str&lt;/code&gt; type can be thought of as having been replaced by what was once the &lt;code&gt;unicode&lt;/code&gt; type, and so you will need to always use the &lt;code&gt;body&lt;/code&gt; attribute for strings to ensure Unicode characters are properly encoded in the HTTP response.</source>
          <target state="translated">반면에 Python 3.x에서는 2.x &lt;code&gt;str&lt;/code&gt; 유형을 한 &lt;code&gt;unicode&lt;/code&gt; 유형 으로 대체 한 것으로 생각할 수 있으므로 유니 코드 문자를 보장 하려면 항상 문자열 의 &lt;code&gt;body&lt;/code&gt; 속성을 사용해야합니다 HTTP 응답으로 올바르게 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="711ecf3ae739cf2c98ef6a3737aebf3003b26277" translate="yes" xml:space="preserve">
          <source>Unit of the range parsed from the value of the Range header, or &lt;code&gt;None&lt;/code&gt; if the header is missing</source>
          <target state="translated">Range 헤더의 값에서 구문 분석 된 범위의 단위 또는 헤더가 누락 된 경우 &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0aa6825aba3252c5cebbc0305750407b383e14f4" translate="yes" xml:space="preserve">
          <source>Universal and manylinux wheels are available on PyPI for the Falcon framework. Installation is as simple as:</source>
          <target state="translated">Falcon 프레임 워크 용 PyPI에서 범용 및 많은 Linux 휠을 사용할 수 있습니다. 설치는 다음과 같이 간단합니다.</target>
        </trans-unit>
        <trans-unit id="bf36c74e851db7c2ce95b5900cf8acc21ac10271" translate="yes" xml:space="preserve">
          <source>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &amp;ldquo;AS IS&amp;rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</source>
          <target state="translated">해당 법률에서 요구하거나 서면으로 동의하지 않는 한, 라이센스에 따라 배포 된 소프트웨어는 명시 적이든 묵시적이든 어떠한 종류의 보증이나 조건없이 &quot;있는 그대로&quot;배포됩니다. 라이센스에 따른 특정 언어 관리 권한 및 제한 사항에 대해서는 라이센스를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a017948c567109be5608efb518882e99231cb44b" translate="yes" xml:space="preserve">
          <source>Unlike hooks, middleware methods apply globally to the entire API.</source>
          <target state="translated">후크와 달리 미들웨어 메소드는 전체 API에 전체적으로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="075a6caa06099c7bf3a201c8df9d83db7ce42ff4" translate="yes" xml:space="preserve">
          <source>Unquote an RFC 7320 &amp;ldquo;quoted-string&amp;rdquo;.</source>
          <target state="translated">RFC 7320&amp;ldquo;인용 문자열&amp;rdquo;을 인용 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="70a55d91487d32e499d29801011e31507f72db23" translate="yes" xml:space="preserve">
          <source>Unset a cookie in the response</source>
          <target state="translated">응답에서 쿠키 설정 해제</target>
        </trans-unit>
        <trans-unit id="a7b022fd4205d3b503a70e035a72eceb5222b065" translate="yes" xml:space="preserve">
          <source>Untrusted input (i.e., input from an external client or service) is validated.</source>
          <target state="translated">신뢰할 수없는 입력 (즉, 외부 클라이언트 또는 서비스의 입력)이 검증됩니다.</target>
        </trans-unit>
        <trans-unit id="1aaf33dc6b1c08e0c1fed0611853aa50c296bc3b" translate="yes" xml:space="preserve">
          <source>Upward and onward!</source>
          <target state="translated">앞으로 그리고 앞으로!</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="608e04c768061d38c80d1a3e6baed1d4408e88f8" translate="yes" xml:space="preserve">
          <source>Use this attribute in lieu of &lt;code&gt;body&lt;/code&gt; when your content is already a byte string (&lt;code&gt;str&lt;/code&gt; or &lt;code&gt;bytes&lt;/code&gt; in Python 2, or simply &lt;code&gt;bytes&lt;/code&gt; in Python 3). See also the note below.</source>
          <target state="translated">내용이 이미 바이트 문자열 ( Python 2의 &lt;code&gt;str&lt;/code&gt; 또는 &lt;code&gt;bytes&lt;/code&gt; 또는 Python 3의 &lt;code&gt;bytes&lt;/code&gt; )인 경우 &lt;code&gt;body&lt;/code&gt; 대신이 속성을 사용하십시오 . 아래 참고 사항도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b5c8541b4996920925216f70917012d01caf9531" translate="yes" xml:space="preserve">
          <source>Used to set a list of cache directives to use as the value of the Cache-Control header. The list will be joined with &amp;ldquo;, &amp;rdquo; to produce the value for the header.</source>
          <target state="translated">Cache-Control 헤더의 값으로 사용할 캐시 지시문 목록을 설정하는 데 사용됩니다. 목록은&amp;ldquo;,&amp;rdquo;와 결합되어 헤더 값을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="bec249e659662f7d5947bf09a1ea1d4a552885b0" translate="yes" xml:space="preserve">
          <source>User Guide</source>
          <target state="translated">사용자 설명서</target>
        </trans-unit>
        <trans-unit id="33b4114eb22e4012955db64bea630b07e5787029" translate="yes" xml:space="preserve">
          <source>User agent interfaces do not always isolate cookies by path, and so this should not be considered an effective security measure.</source>
          <target state="translated">사용자 에이전트 인터페이스가 경로별로 쿠키를 항상 분리하지는 않으므로 효과적인 보안 조치로 간주해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="0650ef3acb809d5f2ed8947cb6731fe8a5590c01" translate="yes" xml:space="preserve">
          <source>Using sinks, you can drain and dynamically handle a large number of routes, when creating static resources and responders would be impractical. For example, you might use a sink to create a smart proxy that forwards requests to one or more backend services.</source>
          <target state="translated">정적 리소스를 만들 때 싱크를 사용하면 많은 수의 경로를 비우고 동적으로 처리 할 수 ​​있으며 응답자는 실용적이지 않습니다. 예를 들어 싱크를 사용하여 하나 이상의 백엔드 서비스로 요청을 전달하는 스마트 프록시를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7154685c0e27d59e31175c4d54067b392382c507" translate="yes" xml:space="preserve">
          <source>Using these constants helps avoid typos and cuts down on the number of string objects that must be created when preparing responses.</source>
          <target state="translated">이 상수를 사용하면 오타를 피하고 응답을 준비 할 때 작성해야하는 문자열 객체 수를 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="e33c0f237d7f92d0c9d5cdf68a91fab5acef1a35" translate="yes" xml:space="preserve">
          <source>Validating Media</source>
          <target state="translated">미디어 검증</target>
        </trans-unit>
        <trans-unit id="ec5e2a071d6ac4b70e8c35355cdfd7450ff88561" translate="yes" xml:space="preserve">
          <source>Value of the Accept header, or &amp;lsquo;&lt;em&gt;/&lt;/em&gt;&amp;rsquo; if the header is missing.</source>
          <target state="translated">Value of the Accept header, or &amp;lsquo;&lt;em&gt;/&lt;/em&gt;&amp;rsquo; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="de252c70deb5a2e95ae409f61eb838936a1f1ad7" translate="yes" xml:space="preserve">
          <source>Value of the Authorization header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the Authorization header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="a223276f8cfcc1b20432098e717eb5d6f99ce910" translate="yes" xml:space="preserve">
          <source>Value of the Content-Length header converted to an &lt;code&gt;int&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the Content-Length header converted to an &lt;code&gt;int&lt;/code&gt; , or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="9a1277568897e1f64441520148a658706373a929" translate="yes" xml:space="preserve">
          <source>Value of the Content-Type header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the Content-Type header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="fa454f1ba11d98d1094f6f9522f5d4e8bd8d8efe" translate="yes" xml:space="preserve">
          <source>Value of the Date header, converted to a &lt;code&gt;datetime&lt;/code&gt; instance. The header value is assumed to conform to RFC 1123.</source>
          <target state="translated">Value of the Date header, converted to a &lt;code&gt;datetime&lt;/code&gt; instance. The header value is assumed to conform to RFC 1123.</target>
        </trans-unit>
        <trans-unit id="7266864be8bbd1003bbf7e4243d320afffca5a63" translate="yes" xml:space="preserve">
          <source>Value of the Expect header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the Expect header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="77065231dc46b183dcf292c5d3bd4837dd0c4ece" translate="yes" xml:space="preserve">
          <source>Value of the Forwarded header, as a parsed list of &lt;a href=&quot;#falcon.Forwarded&quot;&gt;&lt;code&gt;falcon.Forwarded&lt;/code&gt;&lt;/a&gt; objects, or &lt;code&gt;None&lt;/code&gt; if the header is missing. If the header value is malformed, Falcon will make a best effort to parse what it can.</source>
          <target state="translated">Value of the Forwarded header, as a parsed list of &lt;a href=&quot;#falcon.Forwarded&quot;&gt; &lt;code&gt;falcon.Forwarded&lt;/code&gt; &lt;/a&gt; objects, or &lt;code&gt;None&lt;/code&gt; if the header is missing. If the header value is malformed, Falcon will make a best effort to parse what it can.</target>
        </trans-unit>
        <trans-unit id="d83089667c585aab27ec3d72b8342b161d4f870a" translate="yes" xml:space="preserve">
          <source>Value of the If-Match header, as a parsed list of &lt;a href=&quot;util#falcon.ETag&quot;&gt;&lt;code&gt;falcon.ETag&lt;/code&gt;&lt;/a&gt; objects or &lt;code&gt;None&lt;/code&gt; if the header is missing or its value is blank.</source>
          <target state="translated">Value of the If-Match header, as a parsed list of &lt;a href=&quot;util#falcon.ETag&quot;&gt; &lt;code&gt;falcon.ETag&lt;/code&gt; &lt;/a&gt; objects or &lt;code&gt;None&lt;/code&gt; if the header is missing or its value is blank.</target>
        </trans-unit>
        <trans-unit id="d68afe875eb3b89f097dcd53d623511365477924" translate="yes" xml:space="preserve">
          <source>Value of the If-Modified-Since header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the If-Modified-Since header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="dd98a0483d8c7bc7ee537a8f6388a1332f9d9716" translate="yes" xml:space="preserve">
          <source>Value of the If-None-Match header, as a parsed list of &lt;a href=&quot;util#falcon.ETag&quot;&gt;&lt;code&gt;falcon.ETag&lt;/code&gt;&lt;/a&gt; objects or &lt;code&gt;None&lt;/code&gt; if the header is missing or its value is blank.</source>
          <target state="translated">Value of the If-None-Match header, as a parsed list of &lt;a href=&quot;util#falcon.ETag&quot;&gt; &lt;code&gt;falcon.ETag&lt;/code&gt; &lt;/a&gt; objects or &lt;code&gt;None&lt;/code&gt; if the header is missing or its value is blank.</target>
        </trans-unit>
        <trans-unit id="43c59b4529ec9cad37260c43b79f4e6bd3675d69" translate="yes" xml:space="preserve">
          <source>Value of the If-Range header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the If-Range header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="f5ee4108008c11def53a881c8cf4b0f94f020fab" translate="yes" xml:space="preserve">
          <source>Value of the If-Unmodified-Since header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the If-Unmodified-Since header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="5553127a6aefcdd4dba86edb0023d59b202241bf" translate="yes" xml:space="preserve">
          <source>Value of the Referer header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the Referer header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="c5219ac49a602addc39ce8f09ddd6742e3f1353a" translate="yes" xml:space="preserve">
          <source>Value of the User-Agent header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</source>
          <target state="translated">Value of the User-Agent header, or &lt;code&gt;None&lt;/code&gt; if the header is missing.</target>
        </trans-unit>
        <trans-unit id="58877aa135af87c6152d35bec12d56ac77317795" translate="yes" xml:space="preserve">
          <source>Value to use for the Vary header.</source>
          <target state="translated">Vary 헤더에 사용할 값입니다.</target>
        </trans-unit>
        <trans-unit id="2c7fda5d092b0a9b1af3f0f496ee105b32f8db7e" translate="yes" xml:space="preserve">
          <source>WSGI Server</source>
          <target state="translated">WSGI 서버</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="921f206c14d5e5353fc2466ffd92e059e0b949a3" translate="yes" xml:space="preserve">
          <source>We call these well-known methods &amp;ldquo;responders&amp;rdquo;. Each responder takes (at least) two params, one representing the HTTP request, and one representing the HTTP response to that request. By convention, these are called &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;resp&lt;/code&gt;, respectively. Route templates and hooks can inject extra params, as we shall see later on.</source>
          <target state="translated">우리는 이러한 잘 알려진 방법을&amp;ldquo;응답자&amp;rdquo;라고 부릅니다. 각 응답자는 하나 이상의 HTTP 요청을 나타내는 매개 변수와 해당 요청에 대한 HTTP 응답을 나타내는 매개 변수를 두 개 이상받습니다. 일반적으로이를 각각 &lt;code&gt;req&lt;/code&gt; 및 &lt;code&gt;resp&lt;/code&gt; 라고 합니다. 루트 템플릿과 후크는 나중에 볼 수 있듯이 추가 매개 변수를 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed54f7acdf60b84dde096f38150eef60d5a84539" translate="yes" xml:space="preserve">
          <source>We can break this down into three resources:</source>
          <target state="translated">우리는 이것을 세 가지 자원으로 나눌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11c1278fd3553d645ff750d02cd067ccb361bc86" translate="yes" xml:space="preserve">
          <source>We designed Falcon to support the demanding needs of large-scale microservices and responsive app backends. Falcon complements more general Python web frameworks by providing bare-metal performance, reliability, and flexibility wherever you need it.</source>
          <target state="translated">Falcon은 대규모 마이크로 서비스 및 반응 형 앱 백엔드의 까다로운 요구를 지원하도록 Falcon을 설계했습니다. Falcon은 필요할 때마다 베어 메탈 성능, 안정성 및 유연성을 제공하여보다 일반적인 Python 웹 프레임 워크를 보완합니다.</target>
        </trans-unit>
        <trans-unit id="8d7a19e3109efbcfe6bfc7d50d6e4982c224ea20" translate="yes" xml:space="preserve">
          <source>We did not explain how to configure TLS (HTTPS) for NGINX, leaving that as an exercise for the reader. However, we do recommend using Let&amp;rsquo;s Encrypt, which offers free, short-term certificates with auto-renewal. Visit the &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;Let&amp;rsquo;s Encrypt site&lt;/a&gt; to learn how to integrate their service directly with NGINX.</source>
          <target state="translated">We did not explain how to configure TLS (HTTPS) for NGINX, leaving that as an exercise for the reader. However, we do recommend using Let&amp;rsquo;s Encrypt, which offers free, short-term certificates with auto-renewal. Visit the &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;Let&amp;rsquo;s Encrypt site&lt;/a&gt; to learn how to integrate their service directly with NGINX.</target>
        </trans-unit>
        <trans-unit id="eea9a6603619cf677fb68f11cd2fadad2c8ffe66" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll start by factoring out the business logic from the resource&amp;rsquo;s POST responder in &lt;code&gt;images.py&lt;/code&gt; so that it can be tested independently. In this case, the resource&amp;rsquo;s &amp;ldquo;business logic&amp;rdquo; is simply the image-saving operation:</source>
          <target state="translated">우리는 &lt;code&gt;images.py&lt;/code&gt; 에 있는 리소스의 POST 응답자로부터 비즈니스 로직을 분리하여 독립적으로 테스트 할 수 있도록 시작할 것 입니다. 이 경우 리소스의 &quot;비즈니스 로직&quot;은 단순히 이미지 저장 작업입니다.</target>
        </trans-unit>
        <trans-unit id="71c37380f9bc00d7afaf107ed7f9050e1280832f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll use TDD this time around, to demonstrate how to apply this particular testing strategy when developing a Falcon application. Via tests, we&amp;rsquo;ll first define precisely what we want the application to do, and then code until the tests tell us that we&amp;rsquo;re done.</source>
          <target state="translated">이번에는 TDD를 사용하여 Falcon 응용 프로그램을 개발할 때이 특정 테스트 전략을 적용하는 방법을 보여줍니다. 테스트를 통해 먼저 애플리케이션이 수행 할 작업을 정확하게 정의한 다음 테스트가 완료 될 때까지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="b149bbb13ee375cda12062f4a351f9bf2dd2c4f1" translate="yes" xml:space="preserve">
          <source>What Now?</source>
          <target state="translated">지금 무엇?</target>
        </trans-unit>
        <trans-unit id="1dc23e9126d4d3ffedcd374faff18887fd6788e1" translate="yes" xml:space="preserve">
          <source>What People are Saying</source>
          <target state="translated">사람들이 말하는 것</target>
        </trans-unit>
        <trans-unit id="5c315f7351633a034058ba60fbe5d0afe8e89e2c" translate="yes" xml:space="preserve">
          <source>What is the recommended approach for making configuration variables available to multiple resource classes?</source>
          <target state="translated">여러 자원 클래스에서 구성 변수를 사용할 수 있도록 권장되는 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="c342921f40fd555419aabc1a30de71e798639647" translate="yes" xml:space="preserve">
          <source>What is the recommended way to map related routes to resource classes?</source>
          <target state="translated">관련 경로를 리소스 클래스에 매핑하는 권장 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="c6c7c16081c6f6c86d432287d2502f004f405047" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/api#falcon.RequestOptions.auto_parse_qs_csv&quot;&gt;&lt;code&gt;auto_parse_qs_csv&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;, the value of the query string &lt;code&gt;?c={'a':1,'b':2}&lt;/code&gt; will be added to the &lt;code&gt;req.params&lt;/code&gt; dictionary as &lt;code&gt;{'c': &quot;{'a':1,'b':2}&quot;}&lt;/code&gt;. This lets you consume JSON whether or not the client chooses to escape commas in the request.</source>
          <target state="translated">&lt;a href=&quot;../api/api#falcon.RequestOptions.auto_parse_qs_csv&quot;&gt; &lt;code&gt;auto_parse_qs_csv&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 로 설정 되면 쿼리 문자열 &lt;code&gt;?c={'a':1,'b':2}&lt;/code&gt; 이 &lt;code&gt;{'c': &quot;{'a':1,'b':2}&quot;}&lt;/code&gt; 로 &lt;code&gt;req.params&lt;/code&gt; 사전에 추가됩니다 . 1, 'b': 2} &quot;} 입니다. 이를 통해 클라이언트가 요청에서 쉼표를 이스케이프하도록 선택했는지 여부에 관계없이 JSON을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="146da74fd2f2c5dff41da45caec5d2b12c5afe1f" translate="yes" xml:space="preserve">
          <source>When a responder raises an instance of &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;, Falcon converts it to an HTTP response automatically. The default serializer supports JSON and XML, but may be overridden by this method to use a custom serializer in order to support other media types.</source>
          <target state="translated">응답자가 &lt;a href=&quot;errors#falcon.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt; 인스턴스를 발생 시키면 Falcon 은이를 자동으로 HTTP 응답으로 변환합니다. 기본 직렬 변환기는 JSON 및 XML을 지원하지만이 방법으로 다른 매체 유형을 지원하기 위해 사용자 정의 직렬 변환기를 사용하도록 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c10698d1d5e916886e696ed0ff1baf39f1a9692a" translate="yes" xml:space="preserve">
          <source>When a route can not be found for an incoming request, Falcon uses a default responder that simply raises an instance of &lt;a href=&quot;../api/errors#falcon.HTTPNotFound&quot;&gt;&lt;code&gt;falcon.HTTPNotFound&lt;/code&gt;&lt;/a&gt;. You can use &lt;a href=&quot;../api/api#falcon.API.add_error_handler&quot;&gt;&lt;code&gt;falcon.API.add_error_handler()&lt;/code&gt;&lt;/a&gt; to register a custom error handler for this exception type. Alternatively, you may be able to configure your web server to transform the response for you (e.g., using Nginx&amp;rsquo;s &lt;code&gt;error_page&lt;/code&gt; directive).</source>
          <target state="translated">들어오는 요청에 대한 경로를 찾을 수 없으면 Falcon은 단순히 &lt;a href=&quot;../api/errors#falcon.HTTPNotFound&quot;&gt; &lt;code&gt;falcon.HTTPNotFound&lt;/code&gt; &lt;/a&gt; 인스턴스를 발생 시키는 기본 응답자를 사용합니다 . &lt;a href=&quot;../api/api#falcon.API.add_error_handler&quot;&gt; &lt;code&gt;falcon.API.add_error_handler()&lt;/code&gt; &lt;/a&gt; 를 사용 하여이 예외 유형에 대한 사용자 정의 오류 처리기를 등록 할 수 있습니다 . 또는 응답을 변환하도록 웹 서버를 구성 할 수 있습니다 (예 : Nginx 's &lt;code&gt;error_page&lt;/code&gt; 지시문 사용).</target>
        </trans-unit>
        <trans-unit id="68822bf6a4714306a0c114035505efd0246cf116" translate="yes" xml:space="preserve">
          <source>When creating your API object you can either add or completely replace all of the handlers. For example, lets say you want to write an API that sends and receives MessagePack. We can easily do this by telling our Falcon API that we want a default media-type of &lt;code&gt;application/msgpack&lt;/code&gt; and then create a new &lt;a href=&quot;#falcon.media.Handlers&quot;&gt;&lt;code&gt;Handlers&lt;/code&gt;&lt;/a&gt; object specifying the desired media type and a handler that can process that data.</source>
          <target state="translated">API 객체를 생성 할 때 모든 핸들러를 추가하거나 완전히 대체 할 수 있습니다. 예를 들어 MessagePack을 보내고받는 API를 작성한다고 가정하겠습니다. Falcon API에 기본 미디어 유형의 &lt;code&gt;application/msgpack&lt;/code&gt; 을 원한다고 말한 다음 원하는 미디어 유형과 해당 데이터를 처리 할 수있는 처리기를 지정 하는 새 &lt;a href=&quot;#falcon.media.Handlers&quot;&gt; &lt;code&gt;Handlers&lt;/code&gt; &lt;/a&gt; 객체 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="3f96b6cda704ef8a364dd1cc7442388423664890" translate="yes" xml:space="preserve">
          <source>When decorating an entire resource class, all method names that resemble responders, including &lt;em&gt;suffix&lt;/em&gt;ed (see also &lt;a href=&quot;api#falcon.API.add_route&quot;&gt;&lt;code&gt;add_route()&lt;/code&gt;&lt;/a&gt;) ones, are decorated. If, for instance, a method is called &lt;code&gt;on_get_items&lt;/code&gt;, but it is not meant for handling &lt;code&gt;GET&lt;/code&gt; requests under a route with the &lt;em&gt;suffix&lt;/em&gt;&lt;code&gt;items&lt;/code&gt;, the easiest workaround for preventing the hook function from being applied to the method is renaming it not to clash with the responder pattern.</source>
          <target state="translated">When decorating an entire resource class, all method names that resemble responders, including &lt;em&gt;suffix&lt;/em&gt;ed (see also &lt;a href=&quot;api#falcon.API.add_route&quot;&gt; &lt;code&gt;add_route()&lt;/code&gt; &lt;/a&gt;) ones, are decorated. If, for instance, a method is called &lt;code&gt;on_get_items&lt;/code&gt; , but it is not meant for handling &lt;code&gt;GET&lt;/code&gt; requests under a route with the &lt;em&gt;suffix&lt;/em&gt; &lt;code&gt;items&lt;/code&gt; , the easiest workaround for preventing the hook function from being applied to the method is renaming it not to clash with the responder pattern.</target>
        </trans-unit>
        <trans-unit id="dca97a77a11943662f4fa8b170359d5482b8d461" translate="yes" xml:space="preserve">
          <source>When it comes to API documentation, some developers prefer to use the API implementation as the user contract or source of truth (taking an implementation-first approach), while other developers prefer to use the API spec itself as the contract, implementing and testing the API against that spec (taking a design-first approach).</source>
          <target state="translated">API 문서와 관련하여 일부 개발자는 API 구현을 사용자 계약 또는 진실의 소스 (구현 우선 접근)로 사용하는 것을 선호하는 반면 다른 개발자는 API 사양 자체를 계약, 구현 및 테스트로 사용하는 것을 선호합니다. 해당 사양에 대한 API (디자인 우선 접근).</target>
        </trans-unit>
        <trans-unit id="a0e28b8953f401936ecb44577cd982868d1d8bb4" translate="yes" xml:space="preserve">
          <source>When it comes to building HTTP APIs, other frameworks weigh you down with tons of dependencies and unnecessary abstractions. Falcon cuts to the chase with a clean design that embraces HTTP and the REST architectural style.</source>
          <target state="translated">HTTP API 빌드와 관련하여 다른 프레임 워크는 수많은 종속성과 불필요한 추상화로 무게를 측정합니다. Falcon은 HTTP와 REST 아키텍처 스타일을 포용하는 깔끔한 디자인으로 추격을 자릅니다.</target>
        </trans-unit>
        <trans-unit id="cba93f2b287f4dfe3bc7fb2254181d43cea8c316" translate="yes" xml:space="preserve">
          <source>When it comes to error handling, you can always directly set the error status, appropriate response headers, and error body using the &lt;code&gt;resp&lt;/code&gt; object. However, Falcon tries to make things a little easier by providing a &lt;a href=&quot;../api/errors#predefined-errors&quot;&gt;set of error classes&lt;/a&gt; you can raise when something goes wrong. Falcon will convert any instance or subclass of &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;falcon.HTTPError&lt;/code&gt;&lt;/a&gt; raised by a responder, hook, or middleware component into an appropriate HTTP response.</source>
          <target state="translated">오류 처리와 관련하여 &lt;code&gt;resp&lt;/code&gt; 객체를 사용하여 오류 상태, 적절한 응답 헤더 및 오류 본문을 항상 직접 설정할 수 있습니다 . 그러나 Falcon 은 문제가 발생했을 때 &lt;a href=&quot;../api/errors#predefined-errors&quot;&gt;발생할&lt;/a&gt; 수 있는 일련의 오류 클래스 를 제공하여 작업을 좀 더 쉽게 만듭니다 . Falcon은 응답자, 후크 또는 미들웨어 구성 요소에서 발생한 &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt; &lt;code&gt;falcon.HTTPError&lt;/code&gt; 의&lt;/a&gt; 인스턴스 또는 서브 클래스를 적절한 HTTP 응답으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="69e2c6591d99f44113c21ad6fa99ab0edeb6afab" translate="yes" xml:space="preserve">
          <source>When it comes to error handling, you can always directly set the error status, appropriate response headers, and error body using the &lt;code&gt;resp&lt;/code&gt; object. However, Falcon tries to make things a little easier by providing a set of error classes you can raise when something goes wrong. All of these classes inherit from &lt;a href=&quot;#falcon.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">오류 처리와 관련하여 &lt;code&gt;resp&lt;/code&gt; 객체를 사용하여 오류 상태, 적절한 응답 헤더 및 오류 본문을 항상 직접 설정할 수 있습니다 . 그러나 Falcon은 문제가 발생했을 때 발생할 수있는 일련의 오류 클래스를 제공하여 작업을 좀 더 쉽게 만듭니다. 이러한 모든 클래스는 &lt;a href=&quot;#falcon.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt; 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="d2097a1d2d83b753e8f269d9b3a67ee85da8e241" translate="yes" xml:space="preserve">
          <source>When overriding &lt;code&gt;context_type&lt;/code&gt; with a factory function (as opposed to a class), the function is called like a method of the current Request instance. Therefore the first argument is the Request instance itself (self).</source>
          <target state="translated">클래스와 달리 팩토리 함수로 &lt;code&gt;context_type&lt;/code&gt; 을 재정의 하는 경우 함수는 현재 Request 인스턴스의 메서드처럼 호출됩니다. 따라서 첫 번째 인수는 Request 인스턴스 자체 (자체)입니다.</target>
        </trans-unit>
        <trans-unit id="d0e22b5c366357a57be3445e205c88d270af1bff" translate="yes" xml:space="preserve">
          <source>When overriding &lt;code&gt;context_type&lt;/code&gt; with a factory function (as opposed to a class), the function is called like a method of the current Response instance. Therefore the first argument is the Response instance itself (self).</source>
          <target state="translated">클래스와 달리 팩토리 함수로 &lt;code&gt;context_type&lt;/code&gt; 을 재정의 하는 경우 함수는 현재 Response 인스턴스의 메서드처럼 호출됩니다. 따라서 첫 번째 인수는 Response 인스턴스 자체 (자체)입니다.</target>
        </trans-unit>
        <trans-unit id="bccb41c7ebb828d3737b32ee0de7a373beeecd82" translate="yes" xml:space="preserve">
          <source>When running your application in a development environment, you can disable this default behavior by setting &lt;a href=&quot;api#falcon.ResponseOptions.secure_cookies_by_default&quot;&gt;&lt;code&gt;secure_cookies_by_default&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt; via &lt;a href=&quot;api#falcon.API.resp_options&quot;&gt;&lt;code&gt;API.resp_options&lt;/code&gt;&lt;/a&gt;. This lets you test your app locally without having to set up TLS. You can make this option configurable to easily switch between development and production environments.</source>
          <target state="translated">개발 환경에서 애플리케이션을 실행할 때 &lt;a href=&quot;api#falcon.API.resp_options&quot;&gt; &lt;code&gt;API.resp_options&lt;/code&gt; &lt;/a&gt; 를 통해 &lt;a href=&quot;api#falcon.ResponseOptions.secure_cookies_by_default&quot;&gt; &lt;code&gt;secure_cookies_by_default&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정하여이 기본 동작을 사용하지 않을 수 있습니다 . 이를 통해 TLS를 설정하지 않고도 앱을 로컬에서 테스트 할 수 있습니다. 개발 환경과 프로덕션 환경간에 쉽게 전환 할 수 있도록이 옵션을 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16af961f30779e3c118487082703c9712f8795e4" translate="yes" xml:space="preserve">
          <source>When something goes wrong, you usually want to give your users some info to help them resolve the issue. The exception to this rule is when an error occurs because the user is requested something they are not authorized to access. In that case, you may wish to simply return &lt;code&gt;404 Not Found&lt;/code&gt; with an empty body, in case a malicious user is fishing for information that will help them crack your app.</source>
          <target state="translated">문제가 발생하면 일반적으로 사용자에게 문제 해결에 도움이되는 정보를 제공하려고합니다. 이 규칙의 예외는 사용자에게 액세스 권한이없는 것이 요청되어 오류가 발생한 경우입니다. 이 경우 악의적 인 사용자가 앱을 해독하는 데 도움이되는 정보를 찾기 위해 빈 몸통으로 &lt;code&gt;404 Not Found&lt;/code&gt; 를 반환 하면됩니다.</target>
        </trans-unit>
        <trans-unit id="97aed7f61912114b0a68bae7e0c831a33fc6ecfd" translate="yes" xml:space="preserve">
          <source>When this option is enabled, the request&amp;rsquo;s body stream will be left at EOF. The original data is not retained by the framework.</source>
          <target state="translated">이 옵션을 사용하면 요청의 본문 스트림이 EOF에 남습니다. 원래 데이터는 프레임 워크에 의해 유지되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="645cb66a61c738cb5427f46a7100d0e53aa4d1ab" translate="yes" xml:space="preserve">
          <source>When using a data access layer, simply pass the engine into your data access objects instead. See also &lt;a href=&quot;https://github.com/jmvrbanac/falcon-example&quot;&gt;this sample Falcon project&lt;/a&gt; that demonstrates using an ORM with Falcon.</source>
          <target state="translated">데이터 액세스 계층을 사용할 때는 단순히 엔진을 데이터 액세스 개체로 전달하십시오. &lt;a href=&quot;https://github.com/jmvrbanac/falcon-example&quot;&gt;Falcon&lt;/a&gt; 과 함께 ORM을 사용하는 방법을 보여주는 이 샘플 Falcon 프로젝트 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9528403cfffd1324ef25630afc7cff183293f431" translate="yes" xml:space="preserve">
          <source>When using the above approach, OPTIONS requests must also be special-cased in any other middleware or hooks you use for auth, content-negotiation, etc. For example, you will typically skip auth for preflight requests because it is simply unnecessary; note that such request do not include the Authorization header in any case.</source>
          <target state="translated">위의 접근 방식을 사용하는 경우 OPTIONS 요청은 인증, 컨텐츠 협상 등에 사용하는 다른 미들웨어 또는 후크에서 특수한 경우도 포함해야합니다. 예를 들어, 프리 플라이트 요청에 대해서는 일반적으로 불필요하므로 인증을 건너 뜁니다. 이러한 요청에는 어떠한 경우에도 Authorization 헤더가 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="22af9b191ecdcaf8063a1cd60db2ca2f0b4c8578" translate="yes" xml:space="preserve">
          <source>When using this format, all commas uri-encoded will not be treated by Falcon as a delimiter. If the client wants to send a value as a list, it must not encode the commas with the values.</source>
          <target state="translated">이 형식을 사용하는 경우 인코딩 된 모든 쉼표는 Falcon에서 구분 기호로 처리되지 않습니다. 클라이언트가 값을 목록으로 보내려면 쉼표를 값으로 인코딩하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="06a0d6ce60e0db1d7fd6ac6d35c775db4b53205c" translate="yes" xml:space="preserve">
          <source>Whether or not a req/resp was captured.</source>
          <target state="translated">Whether or not a req/resp was captured.</target>
        </trans-unit>
        <trans-unit id="ba56d8abd5135c093dbea8e5efaf46bcc6fec01b" translate="yes" xml:space="preserve">
          <source>Whether or not the cookie may only be included in unscripted requests from the client.</source>
          <target state="translated">Whether or not the cookie may only be included in unscripted requests from the client.</target>
        </trans-unit>
        <trans-unit id="bfbdf1e33300820d42fead1b00777b3bfc059f8a" translate="yes" xml:space="preserve">
          <source>Whether or not the cookie may only only be transmitted from the client via HTTPS.</source>
          <target state="translated">Whether or not the cookie may only only be transmitted from the client via HTTPS.</target>
        </trans-unit>
        <trans-unit id="d40baddaa5c88f3019ba49dcb2fe16c3eb9b08fc" translate="yes" xml:space="preserve">
          <source>While curl certainly gets the job done, it can be a bit crufty to use. &lt;a href=&quot;https://github.com/jkbr/httpie&quot;&gt;HTTPie&lt;/a&gt; is a modern, user-friendly alternative. Let&amp;rsquo;s install HTTPie and use it from now on:</source>
          <target state="translated">curl은 확실히 작업을 수행하지만 사용하기에는 다소 무례 할 수 있습니다. &lt;a href=&quot;https://github.com/jkbr/httpie&quot;&gt;HTTPie&lt;/a&gt; 는 현대적이고 사용자 친화적 인 대안입니다. HTTPie를 설치하고 지금부터 사용하자 :</target>
        </trans-unit>
        <trans-unit id="24e040b27792e364592263b86f6c4fb936290263" translate="yes" xml:space="preserve">
          <source>While this method can be used to efficiently append raw Set-Cookie headers to the response, you may find &lt;a href=&quot;#falcon.Response.set_cookie&quot;&gt;&lt;code&gt;set_cookie()&lt;/code&gt;&lt;/a&gt; to be more convenient.</source>
          <target state="translated">While this method can be used to efficiently append raw Set-Cookie headers to the response, you may find &lt;a href=&quot;#falcon.Response.set_cookie&quot;&gt; &lt;code&gt;set_cookie()&lt;/code&gt; &lt;/a&gt; to be more convenient.</target>
        </trans-unit>
        <trans-unit id="a1cb97c392a99daad01e60de73a0ba6de2e7eea7" translate="yes" xml:space="preserve">
          <source>Who&amp;rsquo;s Using Falcon?</source>
          <target state="translated">누가 팔콘을 사용하고 있습니까?</target>
        </trans-unit>
        <trans-unit id="11cd5fbcd56d7cb5a299305ead356cd06a6166b3" translate="yes" xml:space="preserve">
          <source>Why are &amp;lsquo;+&amp;rsquo; characters in my params being converted to spaces?</source>
          <target state="translated">매개 변수의 '+'문자가 공백으로 변환되는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="8096d5fab46a9a3d03316c3614ac42daeab5daa2" translate="yes" xml:space="preserve">
          <source>Why are trailing slashes trimmed from req.path?</source>
          <target state="translated">req.path에서 슬래시가 잘리는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="f74b9e055e78884c7a0ea3a19e2b6cf35a53bfd6" translate="yes" xml:space="preserve">
          <source>Why does raising an error inside a resource crash my app?</source>
          <target state="translated">리소스 내부에서 오류가 발생하면 앱이 중단되는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="29eabbff5f4a5b1f6242cffdb031389507269c20" translate="yes" xml:space="preserve">
          <source>Why does req.stream.read() hang for certain requests?</source>
          <target state="translated">특정 요청에 대해 req.stream.read ()가 중단되는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="c571bf6f6d76aa4b97a767b6085981a5a49f539c" translate="yes" xml:space="preserve">
          <source>Why doesn&amp;rsquo;t Falcon come with batteries included?</source>
          <target state="translated">팔콘에는 왜 배터리가 포함되어 있지 않습니까?</target>
        </trans-unit>
        <trans-unit id="2a3ff26f23d68d00ada68e3cf74f6794e88ebada" translate="yes" xml:space="preserve">
          <source>Why doesn&amp;rsquo;t Falcon create a new Resource instance for every request?</source>
          <target state="translated">Falcon이 모든 요청에 ​​대해 새로운 리소스 인스턴스를 생성하지 않는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="9032619c9647c23f488136bb9afcbc39b0b13b0f" translate="yes" xml:space="preserve">
          <source>Why is an empty response body returned when I raise an instance of HTTPError?</source>
          <target state="translated">HTTPError 인스턴스를 발생시킬 때 빈 응답 본문이 반환되는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="4ddb9245cca26f6459be92a0fff734ff5fb0b688" translate="yes" xml:space="preserve">
          <source>Why is my query parameter missing from the req object?</source>
          <target state="translated">req 객체에서 쿼리 매개 변수가 누락 된 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="a37905a6478159e9e621100e9148b19c3cccf280" translate="yes" xml:space="preserve">
          <source>With test helpers such as &lt;code&gt;simulate_get()&lt;/code&gt; and &lt;code&gt;simulate_post()&lt;/code&gt;, we can create tests that span multiple units. But we can also go one step further and run the application as a normal, separate process (e.g. with Gunicorn). We can then write tests that interact with the running process through HTTP, behaving like a normal client.</source>
          <target state="translated">같은 테스트 헬퍼와 함께 &lt;code&gt;simulate_get()&lt;/code&gt; 및 &lt;code&gt;simulate_post()&lt;/code&gt; , 우리는 여러 대에 걸쳐 테스트를 만들 수 있습니다. 그러나 한 단계 더 나아가 응용 프로그램을 일반적인 별도의 프로세스 (예 : Gunicorn)로 실행할 수 있습니다. 그런 다음 일반 클라이언트처럼 동작하는 HTTP를 통해 실행중인 프로세스와 상호 작용하는 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36ccd517ee9f09422d29e269708c0d6b789bedaa" translate="yes" xml:space="preserve">
          <source>With the latter approach, to control when the config is actually loaded, it&amp;rsquo;s best not to instantiate it at the top level of the config module&amp;rsquo;s namespace. This avoids any problematic side-effects that may be caused by loading the config whenever Python happens to process the first import of the config module. Instead, consider implementing a function in the module that returns a new or cached config object on demand.</source>
          <target state="translated">후자의 경우 구성이 실제로로드되는시기를 제어하려면 구성 모듈 네임 스페이스의 최상위 수준에서 인스턴스를 인스턴스화하지 않는 것이 가장 좋습니다. 이렇게하면 Python이 구성 모듈의 첫 번째 가져 오기를 처리 할 때마다 구성을로드하여 발생할 수있는 문제가되는 부작용을 피할 수 있습니다. 대신 요청시 새 구성 또는 캐시 된 구성 오브젝트를 리턴하는 함수를 모듈에 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="b5f1527e2c0bfbc4f9d7a666a48de4fb7afc61f1" translate="yes" xml:space="preserve">
          <source>With your &lt;code&gt;wsgi.py&lt;/code&gt; file in place, it is time to configure uWSGI. Start by creating a simple &lt;code&gt;uwsgi.ini&lt;/code&gt; file. In general, you shouldn&amp;rsquo;t commit this file to source control; it should be generated from a template by your deployment toolchain according to the target environment (number of CPUs, etc.).</source>
          <target state="translated">With your &lt;code&gt;wsgi.py&lt;/code&gt; file in place, it is time to configure uWSGI. Start by creating a simple &lt;code&gt;uwsgi.ini&lt;/code&gt; file. In general, you shouldn&amp;rsquo;t commit this file to source control; it should be generated from a template by your deployment toolchain according to the target environment (number of CPUs, etc.).</target>
        </trans-unit>
        <trans-unit id="e301725039830fd5643f844501d991e2bfcf65f0" translate="yes" xml:space="preserve">
          <source>Works great with async libraries like gevent</source>
          <target state="translated">gevent와 같은 비동기 라이브러리에서 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ecf378e8acef00c8d6949f4d777fbf1a330ec53e" translate="yes" xml:space="preserve">
          <source>Wraps &lt;a href=&quot;#falcon.testing.simulate_request&quot;&gt;&lt;code&gt;falcon.testing.simulate_request()&lt;/code&gt;&lt;/a&gt; to perform a WSGI request directly against &lt;code&gt;self.app&lt;/code&gt;. Equivalent to:</source>
          <target state="translated">&lt;a href=&quot;#falcon.testing.simulate_request&quot;&gt; &lt;code&gt;falcon.testing.simulate_request()&lt;/code&gt; &lt;/a&gt; 를 래핑 하여 &lt;code&gt;self.app&lt;/code&gt; 에 대해 직접 WSGI 요청을 수행합니다 . 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c3ec58ae1a794690dd49ba22c513f79c4665ddd0" translate="yes" xml:space="preserve">
          <source>Wraps an iterable to ensure its &lt;code&gt;close()&lt;/code&gt; method is called.</source>
          <target state="translated">Wraps an iterable to ensure its &lt;code&gt;close()&lt;/code&gt; method is called.</target>
        </trans-unit>
        <trans-unit id="7f5d670b18473c3fc9caf5bd991dd42ae6966dde" translate="yes" xml:space="preserve">
          <source>Wraps the given &lt;code&gt;iterable&lt;/code&gt; in an iterator utilizing a &lt;code&gt;for&lt;/code&gt; loop as illustrated in &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#the-server-gateway-side&quot;&gt;the PEP-3333 server/gateway side example&lt;/a&gt;. Finally, if the iterable has a &lt;code&gt;close()&lt;/code&gt; method, it is called upon exception or exausting iteration.</source>
          <target state="translated">Wraps the given &lt;code&gt;iterable&lt;/code&gt; in an iterator utilizing a &lt;code&gt;for&lt;/code&gt; loop as illustrated in &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#the-server-gateway-side&quot;&gt;the PEP-3333 server/gateway side example&lt;/a&gt;. Finally, if the iterable has a &lt;code&gt;close()&lt;/code&gt; method, it is called upon exception or exausting iteration.</target>
        </trans-unit>
        <trans-unit id="630f5f95d6ec652e020b684565b2492cfb456439" translate="yes" xml:space="preserve">
          <source>Write an error message to the server&amp;rsquo;s log.</source>
          <target state="translated">서버 로그에 오류 메시지를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="63dbb48f79311b945d143d6838d8a92702053301" translate="yes" xml:space="preserve">
          <source>Xcode Command Line Tools are required to compile Cython. Install them with this command:</source>
          <target state="translated">Cython을 컴파일하려면 Xcode 명령 행 도구가 필요합니다. 이 명령으로 설치하십시오 :</target>
        </trans-unit>
        <trans-unit id="f60f75a250258dedcf5016aa5cc04c550b8f8a79" translate="yes" xml:space="preserve">
          <source>You can also create a middleware component to automatically check out database connections for each request, but this can make it harder to track down errors, or to tune for the needs of individual requests.</source>
          <target state="translated">각 요청에 대한 데이터베이스 연결을 자동으로 체크 아웃하는 미들웨어 구성 요소를 작성할 수도 있지만,이를 통해 오류를 추적하거나 개별 요청의 요구를 조정하기가 어려워 질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="980a90aa68dc0e276f956287011d35fe5c025d46" translate="yes" xml:space="preserve">
          <source>You can also instruct the client to remove a cookie with the &lt;a href=&quot;request_and_response#falcon.Response.unset_cookie&quot;&gt;&lt;code&gt;unset_cookie()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">&lt;a href=&quot;request_and_response#falcon.Response.unset_cookie&quot;&gt; &lt;code&gt;unset_cookie()&lt;/code&gt; &lt;/a&gt; 메소드 를 사용하여 클라이언트에게 쿠키를 제거하도록 지시 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2845239ff9c2d9cb3c23b6852cba1e1aae550d6e" translate="yes" xml:space="preserve">
          <source>You can implement this sort of API by simply using two Python classes, one to represent a single resource, and another to represent the collection of said resources. It is common to place both classes in the same module (see also &lt;a href=&quot;tutorial#tutorial-serving-images&quot;&gt;this section of the tutorial&lt;/a&gt;.)</source>
          <target state="translated">You can implement this sort of API by simply using two Python classes, one to represent a single resource, and another to represent the collection of said resources. It is common to place both classes in the same module (see also &lt;a href=&quot;tutorial#tutorial-serving-images&quot;&gt;this section of the tutorial&lt;/a&gt;.)</target>
        </trans-unit>
        <trans-unit id="d14a2d35bb07bdbd0f3e8b7418efbcaa540d26c7" translate="yes" xml:space="preserve">
          <source>You can implement this sort of API by simply using two Python classes, one to represent a single resource, and another to represent the collection of said resources. It is common to place both classes in the same module.</source>
          <target state="translated">두 개의 Python 클래스를 사용하여 (하나는 단일 리소스를 나타내고 다른 하나는 해당 리소스의 컬렉션을 나타냄) 이러한 API를 구현할 수 있습니다. 두 클래스를 동일한 모듈에 배치하는 것이 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="9f735d8674e2de5cfcdbdf00cd9e9f855b2ed552" translate="yes" xml:space="preserve">
          <source>You can inject extra responder kwargs from a hook by adding them to the &lt;em&gt;params&lt;/em&gt; dict passed into the hook. You can also add custom data to the &lt;code&gt;req.context&lt;/code&gt; dict, as a way of passing contextual information around.</source>
          <target state="translated">후크에 전달 된 &lt;em&gt;매개 변수&lt;/em&gt; 사전 에 추가하여 응답자 크워 그를 추가 할 수 있습니다. 컨텍스트 정보를 전달하는 방법으로 &lt;code&gt;req.context&lt;/code&gt; dict 에 사용자 정의 데이터를 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4872128f5d4c7b24705019f8d2fe9ccc8b2f137f" translate="yes" xml:space="preserve">
          <source>You can inject extra responder kwargs from a hook by adding them to the &lt;em&gt;params&lt;/em&gt; dict passed into the hook. You can also set custom attributes on the &lt;code&gt;req.context&lt;/code&gt; object, as a way of passing contextual information around:</source>
          <target state="translated">You can inject extra responder kwargs from a hook by adding them to the &lt;em&gt;params&lt;/em&gt; dict passed into the hook. You can also set custom attributes on the &lt;code&gt;req.context&lt;/code&gt; object, as a way of passing contextual information around:</target>
        </trans-unit>
        <trans-unit id="536278b7175149e76eeaaf6ea6df40dd2dce2ae6" translate="yes" xml:space="preserve">
          <source>You can manually test changes to the Falcon framework by switching to the directory of the cloned repo and then running pytest:</source>
          <target state="translated">복제 된 저장소의 디렉토리로 전환 한 다음 pytest를 실행하여 Falcon 프레임 워크의 변경 사항을 수동으로 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="968bec380a9070e2422a41503e55a4fa6ef65fec" translate="yes" xml:space="preserve">
          <source>You can now start uWSGI like this:</source>
          <target state="translated">You can now start uWSGI like this:</target>
        </trans-unit>
        <trans-unit id="0c9d37c044435ad9485949c1e5b3271834115f1f" translate="yes" xml:space="preserve">
          <source>You can of course also set the domain, path and lifetime of the cookie.</source>
          <target state="translated">쿠키의 도메인, 경로 및 수명을 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8213796246cc13c7a664c2b4cff5b6ee3472e803" translate="yes" xml:space="preserve">
          <source>You can run the above example using any WSGI server, such as uWSGI or Gunicorn. For example:</source>
          <target state="translated">uWSGI 또는 Gunicorn과 같은 WSGI 서버를 사용하여 위 예제를 실행할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="39fb6ff96745c5f1646439add75c67fd70380190" translate="yes" xml:space="preserve">
          <source>You can use this mixin when defining errors that either should not have a body (as dictated by HTTP standards or common practice), or in the case that a detailed error response may leak information to an attacker.</source>
          <target state="translated">본문이 없어야하는 오류를 정의 할 때 (HTTP 표준 또는 일반적인 관행에 따라) 또는 자세한 오류 응답으로 공격자에게 정보가 유출 될 수있는 경우이 믹스 인을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71a99c75ffb85508225027ca9ac3ee50f1a0c466" translate="yes" xml:space="preserve">
          <source>You could use a tarball, zip file, scp or any other means to get your source onto a server.</source>
          <target state="translated">You could use a tarball, zip file, scp or any other means to get your source onto a server.</target>
        </trans-unit>
        <trans-unit id="9c1f3825ed9f85c82ca1095819f6834f45037bed" translate="yes" xml:space="preserve">
          <source>You may raise an instance of &lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt;&lt;code&gt;falcon.HTTPError&lt;/code&gt;&lt;/a&gt; directly, or use any one of a number of &lt;a href=&quot;../api/errors#predefined-errors&quot;&gt;predefined errors&lt;/a&gt; that are designed to set the response headers and body appropriately for each error type.</source>
          <target state="translated">&lt;a href=&quot;../api/errors#falcon.HTTPError&quot;&gt; &lt;code&gt;falcon.HTTPError&lt;/code&gt; &lt;/a&gt; 의 인스턴스를 직접 올리 거나 각 오류 유형에 맞게 응답 헤더 및 본문을 적절하게 설정하도록 설계된 여러 &lt;a href=&quot;../api/errors#predefined-errors&quot;&gt;사전 정의 된 오류&lt;/a&gt; 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ab748215e4a08b84f6e6d239604cb6df099862e" translate="yes" xml:space="preserve">
          <source>You might also like to view our &lt;a href=&quot;https://github.com/falconry/falcon/wiki/Add-on-Catalog&quot;&gt;Add-on Catalog&lt;/a&gt;, where you can find a list of add-ons maintained by the community.</source>
          <target state="translated">커뮤니티에서 유지 관리하는 애드온 목록을 찾을 수있는 애드온 &lt;a href=&quot;https://github.com/falconry/falcon/wiki/Add-on-Catalog&quot;&gt;카탈로그&lt;/a&gt; 를 볼 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="68093482c3d1393ed1022814b68c7d5988e22976" translate="yes" xml:space="preserve">
          <source>You might also see warnings about unused functions. You can work around these issues by setting additional Clang C compiler flags as follows:</source>
          <target state="translated">사용하지 않는 기능에 대한 경고가 표시 될 수도 있습니다. 다음과 같이 추가 Clang C 컴파일러 플래그를 설정하여 이러한 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ef956ed2f1ddeb4894205c896971bcbe1375f7a" translate="yes" xml:space="preserve">
          <source>You might also try this &lt;a href=&quot;https://streaming-form-data.readthedocs.io/en/latest/&quot;&gt;streaming_form_data&lt;/a&gt; package by Siddhant Goel, or searching PyPI for additional options from the community.</source>
          <target state="translated">Siddhant Goel 의이 &lt;a href=&quot;https://streaming-form-data.readthedocs.io/en/latest/&quot;&gt;streaming_form_data&lt;/a&gt; 패키지를 사용하거나 커뮤니티의 추가 옵션에 대해 PyPI를 검색 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6b49ad2a5fe6075b147d65ca4f46f01b010b179" translate="yes" xml:space="preserve">
          <source>You only need to use the alternate form, &amp;lsquo;bytes */1234&amp;rsquo;, for responses that use the status &amp;lsquo;416 Range Not Satisfiable&amp;rsquo;. In this case, raising &lt;code&gt;falcon.HTTPRangeNotSatisfiable&lt;/code&gt; will do the right thing.</source>
          <target state="translated">'416 Range Not Satisfiable'상태를 사용하는 응답에는 대체 양식 'bytes * / 1234'만 사용해야합니다. 이 경우 &lt;code&gt;falcon.HTTPRangeNotSatisfiable&lt;/code&gt; 을 올리면 올바른 작업 이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="7f91513fb63afe28b5cce9c48866fa360096281f" translate="yes" xml:space="preserve">
          <source>You should get a 404. That&amp;rsquo;s actually OK, because we haven&amp;rsquo;t specified any routes yet. Falcon includes a default 404 response handler that will fire for any requested path for which a route does not exist.</source>
          <target state="translated">404를 받아야합니다. 아직 경로를 지정하지 않았기 때문에 실제로는 괜찮습니다. Falcon에는 경로가 존재하지 않는 요청 된 경로에 대해 발생하는 기본 404 응답 핸들러가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c6ad4a9c30834116292de2f74b288644dff911e" translate="yes" xml:space="preserve">
          <source>You should get back a &lt;code&gt;400 Bad Request&lt;/code&gt; status and a nicely structured error body.</source>
          <target state="translated">&lt;code&gt;400 Bad Request&lt;/code&gt; 상태와 체계적으로 구성된 오류 본문을 다시 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="d979d8dddb74508a627a3baf2396ea37f146b1ad" translate="yes" xml:space="preserve">
          <source>You should now be able to re-run the test and see it succeed:</source>
          <target state="translated">이제 테스트를 다시 실행하고 성공했는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e37f43eaf002095fa4325a2a9e54646343505be8" translate="yes" xml:space="preserve">
          <source>You should now have a working application. Check your uWSGI and NGINX logs for errors if the application does not start.</source>
          <target state="translated">You should now have a working application. Check your uWSGI and NGINX logs for errors if the application does not start.</target>
        </trans-unit>
        <trans-unit id="ceea30f0f00a45ae419f410e484e1a6f06df365d" translate="yes" xml:space="preserve">
          <source>You should receive a &lt;code&gt;200 OK&lt;/code&gt; response, including a JSON-encoded representation of the &amp;ldquo;images&amp;rdquo; resource.</source>
          <target state="translated">JSON으로 인코딩 된 &quot;이미지&quot;리소스 표현을 포함 하여 &lt;code&gt;200 OK&lt;/code&gt; 응답을 받아야 합니다.</target>
        </trans-unit>
        <trans-unit id="d0f6e1d28afc0ac0212f6101df094b071181e3e2" translate="yes" xml:space="preserve">
          <source>You should see a &lt;code&gt;TypeError&lt;/code&gt; as a consequence of adding the &lt;code&gt;storage_path&lt;/code&gt; parameter to &lt;code&gt;Resource.__init__()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;storage_path&lt;/code&gt; 매개 변수를 &lt;code&gt;Resource.__init__()&lt;/code&gt; 에 추가 한 결과 &lt;code&gt;TypeError&lt;/code&gt; 가 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="90138ddebcca4e1eadaf77570e260b1b6092ea76" translate="yes" xml:space="preserve">
          <source>You will need to expose the &lt;a href=&quot;../api/api#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; instance in some way so that uWSGI can find it. For this tutorial we recommend creating a &lt;code&gt;wsgi.py&lt;/code&gt; file. Modify the logic of the following example file to properly configure your application. Ensure that you expose a variable called &lt;code&gt;application&lt;/code&gt; which is assigned to your &lt;a href=&quot;../api/api#falcon.API&quot;&gt;&lt;code&gt;falcon.API&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">You will need to expose the &lt;a href=&quot;../api/api#falcon.API&quot;&gt; &lt;code&gt;falcon.API&lt;/code&gt; &lt;/a&gt; instance in some way so that uWSGI can find it. For this tutorial we recommend creating a &lt;code&gt;wsgi.py&lt;/code&gt; file. Modify the logic of the following example file to properly configure your application. Ensure that you expose a variable called &lt;code&gt;application&lt;/code&gt; which is assigned to your &lt;a href=&quot;../api/api#falcon.API&quot;&gt; &lt;code&gt;falcon.API&lt;/code&gt; &lt;/a&gt; instance.</target>
        </trans-unit>
        <trans-unit id="126a3300d6835c9b340758a88a9d1da96964ce06" translate="yes" xml:space="preserve">
          <source>You would attach this hook to an &lt;code&gt;on_post&lt;/code&gt; responder like so:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;on_post&lt;/code&gt; 응답자 에이 후크를 연결하십시오 .</target>
        </trans-unit>
        <trans-unit id="387a0f004258ddb8e71a64032869344bad02674e" translate="yes" xml:space="preserve">
          <source>Your code is well-tested, with high code coverage.</source>
          <target state="translated">높은 코드 적용 범위로 코드가 잘 테스트되었습니다.</target>
        </trans-unit>
        <trans-unit id="606b3dcbbd39e2bb17d50bbae4ee2319f70ce136" translate="yes" xml:space="preserve">
          <source>Zero configuration is needed if you&amp;rsquo;re creating a JSON API. Just access or set the &lt;code&gt;media&lt;/code&gt; attribute as appropriate and let Falcon do the heavy lifting for you.</source>
          <target state="translated">JSON API를 생성하는 경우 구성이 필요 없습니다. &lt;code&gt;media&lt;/code&gt; 속성에 액세스하거나 적절하게 설정하면 Falcon이 큰 도움을줍니다.</target>
        </trans-unit>
        <trans-unit id="e5aee47bb3c6f19c802da6b38b1b64eb80952a94" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;#falcon.testing.StartResponseMock&quot;&gt;&lt;code&gt;StartResponseMock&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#falcon.testing.StartResponseMock&quot;&gt; &lt;code&gt;StartResponseMock&lt;/code&gt; 의&lt;/a&gt; 별칭</target>
        </trans-unit>
        <trans-unit id="e4c56758791cb43e65ce47a0c133ae3cbe2c21a7" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; 의&lt;/a&gt; 별칭</target>
        </trans-unit>
        <trans-unit id="a29a4e6f49c8665e526a59be66fd37b7baee710d" translate="yes" xml:space="preserve">
          <source>alias of &lt;code&gt;API&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;API&lt;/code&gt; 별명</target>
        </trans-unit>
        <trans-unit id="b55eaec9da687d675362db4377f1dae56d61f16f" translate="yes" xml:space="preserve">
          <source>alias of &lt;code&gt;falcon.util.structures.Context&lt;/code&gt;</source>
          <target state="translated">alias of &lt;code&gt;falcon.util.structures.Context&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5039d155a71c0a5f7a2b2654ad49cb7ee47a8980" translate="yes" xml:space="preserve">
          <source>bool</source>
          <target state="translated">bool</target>
        </trans-unit>
        <trans-unit id="daf529a73101c2be626b99fc6938163e7a27620b" translate="yes" xml:space="preserve">
          <source>bytes</source>
          <target state="translated">bytes</target>
        </trans-unit>
        <trans-unit id="de9c72801733194831e17b9b87aa8e6dbdefbeae" translate="yes" xml:space="preserve">
          <source>can not be converted.</source>
          <target state="translated">변환 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c262eb1a29fe5bc38ddeb9c0ee8a09151aa79da6" translate="yes" xml:space="preserve">
          <source>captured_kwargs</source>
          <target state="translated">captured_kwargs</target>
        </trans-unit>
        <trans-unit id="48511e86b4ad8da546c40fcc260597bc3c691395" translate="yes" xml:space="preserve">
          <source>captured_req</source>
          <target state="translated">captured_req</target>
        </trans-unit>
        <trans-unit id="5b8e028110db1e1db225fff0a866cc0279233287" translate="yes" xml:space="preserve">
          <source>captured_resp</source>
          <target state="translated">captured_resp</target>
        </trans-unit>
        <trans-unit id="8d767bf5b72373d12f0efd4406677e9ed076f592" translate="yes" xml:space="preserve">
          <source>class</source>
          <target state="translated">class</target>
        </trans-unit>
        <trans-unit id="89ffad089c042f31dcc81269da38bef3ca44ab1f" translate="yes" xml:space="preserve">
          <source>datetime</source>
          <target state="translated">datetime</target>
        </trans-unit>
        <trans-unit id="e6efbb61348f24afba1c8ddd30d2ad8be7bcb213" translate="yes" xml:space="preserve">
          <source>datetime.date</source>
          <target state="translated">datetime.date</target>
        </trans-unit>
        <trans-unit id="53910fb46a116dbf1909866b879783e783b61217" translate="yes" xml:space="preserve">
          <source>datetime.datetime</source>
          <target state="translated">datetime.datetime</target>
        </trans-unit>
        <trans-unit id="3f0104c3ae690c900897cfff32dcdbbb5ba029cd" translate="yes" xml:space="preserve">
          <source>datetime.timedelta</source>
          <target state="translated">datetime.timedelta</target>
        </trans-unit>
        <trans-unit id="76e94348139b788d21edc7b9cd011af238d0de03" translate="yes" xml:space="preserve">
          <source>dict</source>
          <target state="translated">dict</target>
        </trans-unit>
        <trans-unit id="4f7f64c1613218412d7173f07c7407d18b5776a8" translate="yes" xml:space="preserve">
          <source>e.g.:</source>
          <target state="translated">e.g.:</target>
        </trans-unit>
        <trans-unit id="c590afa9bb59191ffab30f223791e82d3fd3e3af" translate="yes" xml:space="preserve">
          <source>falcon</source>
          <target state="translated">falcon</target>
        </trans-unit>
        <trans-unit id="d3ef3ca87c676fc4d7094450194cbf2fa0164ba8" translate="yes" xml:space="preserve">
          <source>falcon.API</source>
          <target state="translated">falcon.API</target>
        </trans-unit>
        <trans-unit id="c958e1f0cced585001e6c74e4a2962395e6b216a" translate="yes" xml:space="preserve">
          <source>falcon.ETag</source>
          <target state="translated">falcon.ETag</target>
        </trans-unit>
        <trans-unit id="843ab9d54797d1e962170059457d1178094557a5" translate="yes" xml:space="preserve">
          <source>falcon.Request</source>
          <target state="translated">falcon.Request</target>
        </trans-unit>
        <trans-unit id="5e79000fed462fd6851eece6c1e777046acd7f08" translate="yes" xml:space="preserve">
          <source>falcon.Response</source>
          <target state="translated">falcon.Response</target>
        </trans-unit>
        <trans-unit id="00f06f73e37d07abc785f9701f81e7470745dd8d" translate="yes" xml:space="preserve">
          <source>falcon.http_error</source>
          <target state="translated">falcon.http_error</target>
        </trans-unit>
        <trans-unit id="3c21b206aadf450b92be33de294904f14a908d0f" translate="yes" xml:space="preserve">
          <source>falcon.media</source>
          <target state="translated">falcon.media</target>
        </trans-unit>
        <trans-unit id="2f1a5b71245f7ce590c3bf1a51bcc88f0b0b3c56" translate="yes" xml:space="preserve">
          <source>falcon.media.validators.jsonschema</source>
          <target state="translated">falcon.media.validators.jsonschema</target>
        </trans-unit>
        <trans-unit id="d5f6b3e61b8a2197513182e229f1b062f0871556" translate="yes" xml:space="preserve">
          <source>falcon.routing</source>
          <target state="translated">falcon.routing</target>
        </trans-unit>
        <trans-unit id="ee982cec8deb0cb1c68ef3bd0c3236199acd49bf" translate="yes" xml:space="preserve">
          <source>falcon.testing</source>
          <target state="translated">falcon.testing</target>
        </trans-unit>
        <trans-unit id="a5667ba70a60a487e5b0a1f2d9e999c755e4263b" translate="yes" xml:space="preserve">
          <source>falcon.uri</source>
          <target state="translated">falcon.uri</target>
        </trans-unit>
        <trans-unit id="685e80366130387cb75c055248326976d16fdf8d" translate="yes" xml:space="preserve">
          <source>float</source>
          <target state="translated">float</target>
        </trans-unit>
        <trans-unit id="3a477d7834bb88d2370fd6aed584e6eb35a4add7" translate="yes" xml:space="preserve">
          <source>ing Falcon on Linux with NGINX and uWSGI</source>
          <target state="translated">ing Falcon on Linux with NGINX and uWSGI</target>
        </trans-unit>
        <trans-unit id="46f8ab7c0cff9df7cd124852e26022a6bf89e315" translate="yes" xml:space="preserve">
          <source>int</source>
          <target state="translated">int</target>
        </trans-unit>
        <trans-unit id="d30dbe0537c2c09dfccbe31c864115a796a2aba7" translate="yes" xml:space="preserve">
          <source>it was required to be there, or it was found but could not be converted to a &lt;code&gt;UUID&lt;/code&gt;.</source>
          <target state="translated">거기에 있어야하거나 발견되었지만 &lt;code&gt;UUID&lt;/code&gt; 로 변환 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="fe69f9581bd7a58b5e1c1e60e021f59349fe690f" translate="yes" xml:space="preserve">
          <source>it was required to be there, or it was found but could not be converted to an &lt;code&gt;float&lt;/code&gt;. Also raised if the param&amp;rsquo;s value falls outside the given interval, i.e., the value must be in the interval: min_value &amp;lt;= value &amp;lt;= max_value to avoid triggering an error.</source>
          <target state="translated">it was required to be there, or it was found but could not be converted to an &lt;code&gt;float&lt;/code&gt; . Also raised if the param&amp;rsquo;s value falls outside the given interval, i.e., the value must be in the interval: min_value &amp;lt;= value &amp;lt;= max_value to avoid triggering an error.</target>
        </trans-unit>
        <trans-unit id="3d81c4df317bfab85f65c9f2994992354bc6b6d5" translate="yes" xml:space="preserve">
          <source>it was required to be there, or it was found but could not be converted to an &lt;code&gt;int&lt;/code&gt;. Also raised if the param&amp;rsquo;s value falls outside the given interval, i.e., the value must be in the interval: min &amp;lt;= value &amp;lt;= max to avoid triggering an error.</source>
          <target state="translated">거기에 있어야하거나 발견되었지만 &lt;code&gt;int&lt;/code&gt; 로 변환 할 수 없습니다 . 매개 변수 값이 지정된 간격을 벗어나는 경우에도 발생합니다. 즉, 오류 트리거를 피하려면 값이 최소 간격 &amp;lt;= 값 &amp;lt;= 최대에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="ebcc670dcb9c4d682ff9d9bccd79201012235e2d" translate="yes" xml:space="preserve">
          <source>it was required to be there, or it was found but could not be converted to an &lt;code&gt;int&lt;/code&gt;. Also raised if the param&amp;rsquo;s value falls outside the given interval, i.e., the value must be in the interval: min_value &amp;lt;= value &amp;lt;= max_value to avoid triggering an error.</source>
          <target state="translated">it was required to be there, or it was found but could not be converted to an &lt;code&gt;int&lt;/code&gt; . Also raised if the param&amp;rsquo;s value falls outside the given interval, i.e., the value must be in the interval: min_value &amp;lt;= value &amp;lt;= max_value to avoid triggering an error.</target>
        </trans-unit>
        <trans-unit id="bef4aaaa11015ef79d88f3701f4c69ad690eb4c7" translate="yes" xml:space="preserve">
          <source>iterator</source>
          <target state="translated">iterator</target>
        </trans-unit>
        <trans-unit id="38b62be4bddaa5661c7d6b8e36e28159314df5c7" translate="yes" xml:space="preserve">
          <source>list</source>
          <target state="translated">list</target>
        </trans-unit>
        <trans-unit id="1615307cc4523f183e777df67f168c86908e8007" translate="yes" xml:space="preserve">
          <source>object</source>
          <target state="translated">object</target>
        </trans-unit>
        <trans-unit id="786c19c96c9218afc77e1e97cbb2be236ad9cc30" translate="yes" xml:space="preserve">
          <source>params, uri_template), or &lt;code&gt;None&lt;/code&gt; if no route matches the requested path.</source>
          <target state="translated">params, uri_template), or &lt;code&gt;None&lt;/code&gt; if no route matches the requested path.</target>
        </trans-unit>
        <trans-unit id="a454c3eeb05372d65db8974663884adbcdfe0e0b" translate="yes" xml:space="preserve">
          <source>status code e.g. &amp;ldquo;404 Not Found&amp;rdquo;</source>
          <target state="translated">상태 코드, 예 : &quot;404 Not Found&quot;</target>
        </trans-unit>
        <trans-unit id="3442496b96dd01591a8cd44b1eec1368ab728aba" translate="yes" xml:space="preserve">
          <source>str</source>
          <target state="translated">str</target>
        </trans-unit>
        <trans-unit id="91a58bbf6422870801d8bf676712611df0dc19ca" translate="yes" xml:space="preserve">
          <source>tempfil.es</source>
          <target state="translated">tempfil.es</target>
        </trans-unit>
        <trans-unit id="49f80ea5aacfb5a957337dc906635fccbde446fc" translate="yes" xml:space="preserve">
          <source>tuple</source>
          <target state="translated">tuple</target>
        </trans-unit>
        <trans-unit id="61bca4e1c8e91e5f860b904a0e33a4ac88f252fd" translate="yes" xml:space="preserve">
          <source>tuple of int</source>
          <target state="translated">tuple of int</target>
        </trans-unit>
        <trans-unit id="65fab00dbe412afe5b428b51f6d5d3c7bfccb378" translate="yes" xml:space="preserve">
          <source>unquoted string</source>
          <target state="translated">따옴표없는 문자열</target>
        </trans-unit>
        <trans-unit id="7013f74e318b89f5559deba7d2dc1e1ab3b9d133" translate="yes" xml:space="preserve">
          <source>with redirected(stderr=os.devnull):</source>
          <target state="translated">리디렉션 된 (stderr = os.devnull) :</target>
        </trans-unit>
        <trans-unit id="31aecd6741069fc1fdae0e4eb1c2a4bd36357d36" translate="yes" xml:space="preserve">
          <source>with this:</source>
          <target state="translated">이것으로 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
