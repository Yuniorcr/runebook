<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="25567346f43137d74e25b1241822cf22abb5ddac" translate="yes" xml:space="preserve">
          <source>Splits &lt;code&gt;Subject&lt;/code&gt; into a list of binaries based on &lt;code&gt;Pattern&lt;/code&gt;. If option &lt;code&gt;global&lt;/code&gt; is not specified, only the first occurrence of &lt;code&gt;Pattern&lt;/code&gt; in &lt;code&gt;Subject&lt;/code&gt; gives rise to a split.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 기준으로 &lt;code&gt;Subject&lt;/code&gt; 를 이진 목록으로 분할 합니다. &lt;code&gt;global&lt;/code&gt; 옵션을 지정하지 않으면 &lt;code&gt;Subject&lt;/code&gt; 에서 처음 나타나는 &lt;code&gt;Pattern&lt;/code&gt; 만 분할됩니다.</target>
        </trans-unit>
        <trans-unit id="da62e8a84d56891f5e9a2c98b379c231edd8869e" translate="yes" xml:space="preserve">
          <source>Splits the input into parts by finding tokens according to the regular expression supplied. The splitting is basically done by running a global regular expression match and dividing the initial string wherever a match occurs. The matching part of the string is removed from the output.</source>
          <target state="translated">제공된 정규식에 따라 토큰을 찾아 입력을 부분으로 분할합니다. 분할은 기본적으로 전역 정규 표현식 일치를 실행하고 일치가 발생할 때마다 초기 문자열을 나누어 수행됩니다. 문자열에서 일치하는 부분이 출력에서 ​​제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ac38be70f239ed094aabcbd90c172f845622bd15" translate="yes" xml:space="preserve">
          <source>Splitting and appending strings is to be done on grapheme clusters borders. There is no verification that the results of appending strings are valid or normalized.</source>
          <target state="translated">스트링 분할 및 추가는 grapheme 클러스터 경계에서 수행됩니다. 문자열을 추가 한 결과가 유효하거나 정규화되어 있는지 확인할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="229513622f252f0aba5f7af616df09142675a084" translate="yes" xml:space="preserve">
          <source>SrcMod :: module(),</source>
          <target state="translated">SrcMod :: 모듈 (),</target>
        </trans-unit>
        <trans-unit id="51941fe5abe5ef1a454497154e12d0819085c6a9" translate="yes" xml:space="preserve">
          <source>Ssh_agent implements the &lt;code&gt;ssh_client_key_api&lt;/code&gt;, to allow it to be used by setting the option &lt;code&gt;key_cb&lt;/code&gt; when starting a client (with for example &lt;code&gt;ssh:connect&lt;/code&gt;, &lt;code&gt;ssh:shell&lt;/code&gt; ).</source>
          <target state="translated">Ssh_agent 구현 &lt;code&gt;ssh_client_key_api&lt;/code&gt; 는 ,이 옵션으로 설정하여 사용할 수 있도록하는 &lt;code&gt;key_cb&lt;/code&gt; 를 (예를 들어,에와 클라이언트를 시작할 때 &lt;code&gt;ssh:connect&lt;/code&gt; , &lt;code&gt;ssh:shell&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e1186630cb2a37afee3b45adf839c33685169918" translate="yes" xml:space="preserve">
          <source>Ssh_file implements the &lt;code&gt;ssh_server_key_api&lt;/code&gt; and the &lt;code&gt;ssh_client_key_api&lt;/code&gt;. This enables the user to make an own interface using for example a database handler.</source>
          <target state="translated">Ssh_file 구현 &lt;code&gt;ssh_server_key_api&lt;/code&gt; 와 &lt;code&gt;ssh_client_key_api&lt;/code&gt; . 이를 통해 사용자는 예를 들어 데이터베이스 핸들러를 사용하여 자체 인터페이스를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79f44f54d6ee53905261369247f4630b34d0d1af" translate="yes" xml:space="preserve">
          <source>Ssl data types</source>
          <target state="translated">SSL 데이터 형식</target>
        </trans-unit>
        <trans-unit id="edf3917fbbe05297a4f0e607b72584b93f012f67" translate="yes" xml:space="preserve">
          <source>Stack back-traces cannot be displayed for the process.</source>
          <target state="translated">프로세스에 스택 역 추적을 표시 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="251ddefdba6ee3bf265241244e04f8a519aed58c" translate="yes" xml:space="preserve">
          <source>Stack backtrace for a process. Equivalent to &lt;code&gt;erlang:process_display(Pid, backtrace)&lt;/code&gt;.</source>
          <target state="translated">프로세스의 스택 역 추적. 상당 &lt;code&gt;erlang:process_display(Pid, backtrace)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="11178782316574672ef20b040b0f0b8a456d4d59" translate="yes" xml:space="preserve">
          <source>Staged install using &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;DESTDIR&lt;/a&gt;&lt;/code&gt;. You can perform the install phase in a temporary directory and later move the installation into its correct location by use of the &lt;code&gt;DESTDIR&lt;/code&gt; variable:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;DESTDIR&lt;/a&gt;&lt;/code&gt; 을 사용한 단계별 설치 . 임시 디렉토리에서 설치 단계를 수행 한 후 &lt;code&gt;DESTDIR&lt;/code&gt; 변수를 사용하여 설치를 올바른 위치로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6661192335c5c804d3069b1f4dbc27fd13fc714e" translate="yes" xml:space="preserve">
          <source>Standalone Event Managers</source>
          <target state="translated">독립형 이벤트 관리자</target>
        </trans-unit>
        <trans-unit id="03708aa7b175e01204c3629d37f2940b2f6757bc" translate="yes" xml:space="preserve">
          <source>Standalone Gen_Servers</source>
          <target state="translated">독립형 Gen_Server</target>
        </trans-unit>
        <trans-unit id="bae65126a12af2815b701369ff8ed682881eab39" translate="yes" xml:space="preserve">
          <source>Standard Error</source>
          <target state="translated">표준 에러</target>
        </trans-unit>
        <trans-unit id="700a43e0b226296e1e2343135d60500c33122d9f" translate="yes" xml:space="preserve">
          <source>Standard I/O server interface functions.</source>
          <target state="translated">표준 I / O 서버 인터페이스 기능.</target>
        </trans-unit>
        <trans-unit id="6620fb1c420f5a7a98e861cfb25ef24529d1cb55" translate="yes" xml:space="preserve">
          <source>Standard Input/Output</source>
          <target state="translated">표준 입력 / 출력</target>
        </trans-unit>
        <trans-unit id="cef02ce2d33e50fe72c884a4198cd194948a8508" translate="yes" xml:space="preserve">
          <source>Standard handler for Logger.</source>
          <target state="translated">로거의 표준 처리기</target>
        </trans-unit>
        <trans-unit id="8fcc643845c989ee1c6b2b5c547d3c8055ba7baf" translate="yes" xml:space="preserve">
          <source>Standard logging using the &quot;Common Logfile Format&quot; and &lt;code&gt;disk_log(3)&lt;/code&gt;.</source>
          <target state="translated">&quot;Common Logfile Format&quot;및 &lt;code&gt;disk_log(3)&lt;/code&gt; 사용한 표준 로깅 .</target>
        </trans-unit>
        <trans-unit id="a6ec4f034df68e76533f89deee41d466872edd1f" translate="yes" xml:space="preserve">
          <source>Standard logging using the &quot;Common Logfile Format&quot; and text files.</source>
          <target state="translated">&quot;공통 로그 파일 형식&quot;및 텍스트 파일을 사용한 표준 로깅.</target>
        </trans-unit>
        <trans-unit id="53bdf22647903c9b0c335419e1ec20d56fe2dea8" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;Inets&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; 시작 :</target>
        </trans-unit>
        <trans-unit id="5e8244363931878e0677e2dbef98807fd92b4a23" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;Mnesia&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 시작</target>
        </trans-unit>
        <trans-unit id="dad23844314919d2a62d1a3f6ac6d2ed6a4a9542" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;Mnesia&lt;/code&gt; by calling the following function:</source>
          <target state="translated">다음 함수를 호출하여 &lt;code&gt;Mnesia&lt;/code&gt; 를 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b8b316378031476c31829139e69a6a50052bb0d" translate="yes" xml:space="preserve">
          <source>Start Erlang Top in either of the following ways:</source>
          <target state="translated">다음 방법 중 하나로 Erlang Top을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="eb621d5047b1047e6aebe100165918c26eef2e9f" translate="yes" xml:space="preserve">
          <source>Start Erlang Top with the provided scripts &lt;code&gt;etop&lt;/code&gt;. This starts a hidden Erlang node that connects to the node to be measured. The measured node is specified with option &lt;code&gt;-node&lt;/code&gt;. If the measured node has a different cookie than the default cookie for the user who invokes the script, the cookie must be explicitly specified with option &lt;code&gt;-setcookie&lt;/code&gt;.</source>
          <target state="translated">제공된 스크립트 &lt;code&gt;etop&lt;/code&gt; 으로 Erlang Top을 시작하십시오 . 그러면 측정 할 노드에 연결되는 숨겨진 Erlang 노드가 시작됩니다. 측정 된 노드는 &lt;code&gt;-node&lt;/code&gt; 옵션으로 지정됩니다 . 측정 된 노드에 스크립트를 호출하는 사용자의 기본 쿠키와 다른 쿠키가있는 경우 쿠키는 &lt;code&gt;-setcookie&lt;/code&gt; 옵션으로 명시 적으로 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ad2ca43e26eda732ea32736c07d70864e4704d08" translate="yes" xml:space="preserve">
          <source>Start Erlang for embedded systems on Windows systems.</source>
          <target state="translated">Windows 시스템에서 임베디드 시스템에 대해 Erlang을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="31defa34584f2d2fd63602c179bfe836119f2304" translate="yes" xml:space="preserve">
          <source>Start Erlang with the command:</source>
          <target state="translated">다음 명령으로 Erlang을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="520a079784472e3d1823a878ad281dc5a99c298b" translate="yes" xml:space="preserve">
          <source>Start Erlang/OTP by double-clicking on the Erlang shortcut icon on the desktop.</source>
          <target state="translated">바탕 화면에서 Erlang 단축 아이콘을 두 번 클릭하여 Erlang / OTP를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="d16d08c910b2a4218780695f7593dfaf225663b7" translate="yes" xml:space="preserve">
          <source>Start LTTng tracing.</source>
          <target state="translated">LTTng 추적을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="15d2180070f6e6af1199295111affa55ef653d4b" translate="yes" xml:space="preserve">
          <source>Start a Common Test Master Node</source>
          <target state="translated">공통 테스트 마스터 노드 시작</target>
        </trans-unit>
        <trans-unit id="c8a953b6f8f8ba39dbaef9ec11c3be24d80f6ed4" translate="yes" xml:space="preserve">
          <source>Start a collector process.</source>
          <target state="translated">수집기 프로세스를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="60f2492470a3a706e4a2a3a0e00346cf63a2b625" translate="yes" xml:space="preserve">
          <source>Start a diameter service.</source>
          <target state="translated">직경 서비스를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="b2bb422457ebaed1a11bb8e57e6f599477a32311" translate="yes" xml:space="preserve">
          <source>Start a generic time-out, read more in section &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-Outs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">일반적인 타임 아웃 시작 부분에서 더 읽기 &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-Outs&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e6f98e9aeaba198edabc27bec06fb2b6feb21df" translate="yes" xml:space="preserve">
          <source>Start a main window process with default options</source>
          <target state="translated">기본 옵션으로 기본 창 프로세스 시작</target>
        </trans-unit>
        <trans-unit id="655c4c11799a34b51835aa7e0f2a85fa0a2386e2" translate="yes" xml:space="preserve">
          <source>Start a main window process with options</source>
          <target state="translated">옵션으로 메인 윈도우 프로세스 시작</target>
        </trans-unit>
        <trans-unit id="5d8abe55c9b6c97b89e425de0450efb23b2cd399" translate="yes" xml:space="preserve">
          <source>Start a main window process with options. The process is linked.</source>
          <target state="translated">옵션으로 기본 창 프로세스를 시작하십시오. 프로세스가 연결되었습니다.</target>
        </trans-unit>
        <trans-unit id="94719cd11a6d0d111bdcbfd01716e4ece9bcb009" translate="yes" xml:space="preserve">
          <source>Start a new event viewer and a corresponding collector and load them with trace events from a trace file.</source>
          <target state="translated">새 이벤트 뷰어 및 해당 콜렉터를 시작하고 추적 파일에서 추적 이벤트와 함께로드하십시오.</target>
        </trans-unit>
        <trans-unit id="0614ec8508a1191ef011f92e456a3c6f781cfb4d" translate="yes" xml:space="preserve">
          <source>Start a new shell</source>
          <target state="translated">새로운 쉘을 시작하십시오</target>
        </trans-unit>
        <trans-unit id="c5fc885fb8da5c3ed28e6ed436cbdbb6805dd6cf" translate="yes" xml:space="preserve">
          <source>Start a sequence chart viewer for trace events (messages/actions)</source>
          <target state="translated">추적 이벤트 (메시지 / 작업)에 대한 시퀀스 차트 뷰어를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="637c363c01eed6b89c5dbe212445ef7ff5efab16" translate="yes" xml:space="preserve">
          <source>Start a server process with options. The server process identity can be given as an argument to several other functions in the API.</source>
          <target state="translated">옵션으로 서버 프로세스를 시작하십시오. 서버 프로세스 ID는 API의 다른 여러 함수에 대한 인수로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a0179f2492a86b0f3803e163cf8bb27ee8758fd" translate="yes" xml:space="preserve">
          <source>Start a state time-out, read more in section &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">상태 시간 제한을 시작 섹션에서 더 읽어 &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ef124e59a0fed40b060c55290aa0af49720d77f" translate="yes" xml:space="preserve">
          <source>Start a transport process. Called by diameter as a consequence of a call to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; in order to establish or accept a transport connection respectively. A transport process maintains a connection with a single remote peer.</source>
          <target state="translated">운송 프로세스를 시작하십시오. 전송 연결을 각각 설정하거나 수락하기 위해 &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; 에 대한 호출의 결과로 Diameter에 의해 호출됩니다 . 전송 프로세스는 단일 원격 피어와의 연결을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="cc2df8cf2e7f5d0dc12c3ea37fb1341179fb603e" translate="yes" xml:space="preserve">
          <source>Start an Erlang node with lttng enabled.</source>
          <target state="translated">lttng가 활성화 된 Erlang 노드를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="2d23d8be51a26688c8dab060c764e5dc326e1c0d" translate="yes" xml:space="preserve">
          <source>Start an HTTP client profile:</source>
          <target state="translated">HTTP 클라이언트 프로파일을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="87c3c544f050cf5225972fb179fff0473f5ce69d" translate="yes" xml:space="preserve">
          <source>Start an HTTP server with minimal required configuration. If you specify port &lt;code&gt;0&lt;/code&gt;, an arbitrary available port is used, and you can use function &lt;code&gt;info&lt;/code&gt; to find which port number that was picked:</source>
          <target state="translated">최소한의 필수 구성으로 HTTP 서버를 시작하십시오. 포트 &lt;code&gt;0&lt;/code&gt; 을 지정 하면 임의의 사용 가능한 포트가 사용되며 기능 &lt;code&gt;info&lt;/code&gt; 를 사용 하여 선택된 포트 번호를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6265e6ae25c6b7d2b0fb9b4ff5bf68c14a56b2ea" translate="yes" xml:space="preserve">
          <source>Start an emulator of a different type. For example, to start the lock-counter emualator, use &lt;code&gt;-emu_type lcnt&lt;/code&gt;. (The emulator must already be built. Use the &lt;code&gt;configure&lt;/code&gt; option &lt;code&gt;--enable-lock-counter&lt;/code&gt; to build the lock-counter emulator.)</source>
          <target state="translated">다른 유형의 에뮬레이터를 시작하십시오. 예를 들어, 잠금 카운터 에뮬레이터를 시작하려면 &lt;code&gt;-emu_type lcnt&lt;/code&gt; 를 사용 하십시오 . (에뮬레이터는 이미 빌드되어 있어야합니다. &lt;code&gt;configure&lt;/code&gt; 옵션 &lt;code&gt;--enable-lock-counter&lt;/code&gt; 를 사용하여 잠금 카운터 에뮬레이터를 빌드하십시오.)</target>
        </trans-unit>
        <trans-unit id="e3e41bf04dd7a1d00f41d93a957341e9b4a47d42" translate="yes" xml:space="preserve">
          <source>Start an event time-out, see more in section &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">이벤트 시간 제한을 시작 섹션에서 더 볼 &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58e8ba5a06e5db6072690dffc78d7f81e4e31cfa" translate="yes" xml:space="preserve">
          <source>Start an event time-out, see more in sections &lt;code&gt;&lt;a href=&quot;#Time-Outs&quot;&gt;Time-Outs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이벤트 시간 제한을 시작합니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#Time-Outs&quot;&gt;Time-Outs&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="87b36a7dc71e12bf0965a676888e24483751bad7" translate="yes" xml:space="preserve">
          <source>Start and control of slave nodes</source>
          <target state="translated">슬레이브 노드의 시작 및 제어</target>
        </trans-unit>
        <trans-unit id="6aeb8c6576f8a25c3a88947d8872e30aec78aac0" translate="yes" xml:space="preserve">
          <source>Start and control of slave nodes.</source>
          <target state="translated">슬레이브 노드의 시작 및 제어</target>
        </trans-unit>
        <trans-unit id="7e2774aa68236decebd3156f9f5c43e8be2396b0" translate="yes" xml:space="preserve">
          <source>Start and use the crypto application as usual. However take care to avoid the non-FIPS validated algorithms, they will all throw exception &lt;code&gt;not_supported&lt;/code&gt;.</source>
          <target state="translated">평소와 같이 암호화 응용 프로그램을 시작하고 사용하십시오. 그러나 비 FIPS 유효성 검증 알고리즘을 피하도록주의 &lt;code&gt;not_supported&lt;/code&gt; . 모두 예외 not_supported가 발생 합니다 .</target>
        </trans-unit>
        <trans-unit id="c3f1297829f84aa7bac643add8db51f47184db91" translate="yes" xml:space="preserve">
          <source>Start any processes needed by the discovery module.</source>
          <target state="translated">감지 모듈에 필요한 프로세스를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="2b43e7001e6df06b683744b1abd8fc9d3a46c001" translate="yes" xml:space="preserve">
          <source>Start by unpacking the Erlang/OTP distribution file with your GNU compatible TAR program.</source>
          <target state="translated">GNU 호환 TAR 프로그램으로 Erlang / OTP 배포 파일의 압축을 푸십시오.</target>
        </trans-unit>
        <trans-unit id="cf3d5b196df0e1f59eb20fb6e05d4aa8c0bbb77f" translate="yes" xml:space="preserve">
          <source>Start call count tracing for all functions in all modules, and also for all functions in modules to be loaded. This is the same as &lt;code&gt;(start({'_','_','_'})+start({on_load}))&lt;/code&gt;.</source>
          <target state="translated">모든 모듈의 모든 기능과로드 할 모듈의 모든 기능에 대한 호출 카운트 추적을 시작하십시오. 이것은 &lt;code&gt;(start({'_','_','_'})+start({on_load}))&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="7a13d2eb0592573c780c4ef7df18d009929f7f24" translate="yes" xml:space="preserve">
          <source>Start call count tracing for matching functions in matching modules. The &lt;code&gt;FS&lt;/code&gt; argument can be used to specify the first argument to &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;, for example &lt;code&gt;on_load&lt;/code&gt;. See erlang(3).</source>
          <target state="translated">일치하는 모듈에서 일치하는 기능에 대한 호출 횟수 추적을 시작하십시오. &lt;code&gt;FS&lt;/code&gt; 의 인수에 첫번째 인수 지정하는 데 사용될 수 &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; 예에 대해 &lt;code&gt;on_load&lt;/code&gt; . erlang (3)을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8be851826e9ed34b2814a83947b11d6ac73cd047" translate="yes" xml:space="preserve">
          <source>Start calltrace on all processes and trace the specified function(s). The format handler used is &lt;code&gt;multitrace:handle_debug/4&lt;/code&gt; that prints each call and returns. &lt;code&gt;What&lt;/code&gt; must be an item or a list of items to trace, specified on the format &lt;code&gt;{Module,Function,Arity}&lt;/code&gt;, &lt;code&gt;{Module,Function}&lt;/code&gt;, or only &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">모든 프로세스에서 calltrace를 시작하고 지정된 기능을 추적하십시오. 사용되는 형식 핸들러는 각 호출을 인쇄하고 리턴하는 &lt;code&gt;multitrace:handle_debug/4&lt;/code&gt; 입니다. &lt;code&gt;What&lt;/code&gt; 형식에 지정된 항목이나 추적에 항목의 목록이어야합니다 &lt;code&gt;{Module,Function,Arity}&lt;/code&gt; , &lt;code&gt;{Module,Function}&lt;/code&gt; , 또는 유일한 &lt;code&gt;Module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c3bf6bebd6e5c5f23103da948451144938c08098" translate="yes" xml:space="preserve">
          <source>Start character class definition</source>
          <target state="translated">캐릭터 클래스 정의 시작</target>
        </trans-unit>
        <trans-unit id="a698528285ad96061310af0c863ee80b8d407923" translate="yes" xml:space="preserve">
          <source>Start flag/option &lt;code&gt;silent_connections&lt;/code&gt; and the test specification term override any settings made by the information functions inside the test suite.</source>
          <target state="translated">시작 플래그 / 옵션 &lt;code&gt;silent_connections&lt;/code&gt; 및 테스트 스펙 용어는 테스트 스위트 내의 정보 기능에 의해 작성된 모든 설정을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="da25e9ed10a3cfc1518bbbf2b9997cc520ba8f8e" translate="yes" xml:space="preserve">
          <source>Start matching at the offset (position) specified in the subject string. The offset is zero-based, so that the default is &lt;code&gt;{offset,0}&lt;/code&gt; (all of the subject string).</source>
          <target state="translated">제목 문자열에 지정된 오프셋 (위치)에서 일치를 시작하십시오. 오프셋은 0부터 시작하므로 기본값은 &lt;code&gt;{offset,0}&lt;/code&gt; (모든 주제 문자열)입니다.</target>
        </trans-unit>
        <trans-unit id="24c5f1750afbdf6104fd12ea4a1be8c8eec9e53f" translate="yes" xml:space="preserve">
          <source>Start microstate accounting. Returns whether it was previously enabled or disabled.</source>
          <target state="translated">소액 회계를 시작하십시오. 이전에 활성화되었는지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="95b2f407a4c216d2511b77163fb1447cfebcdf5c" translate="yes" xml:space="preserve">
          <source>Start min/max quantifier</source>
          <target state="translated">최소 / 최대 수량화 시작</target>
        </trans-unit>
        <trans-unit id="443680ebd11c06301421c58e471fe7e962adebab" translate="yes" xml:space="preserve">
          <source>Start of a sequence chart viewer without linking to the parent process.</source>
          <target state="translated">부모 프로세스에 연결하지 않고 시퀀스 차트 뷰어를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="209793eaf330a4f3a8b0340142553e1959f4d8d1" translate="yes" xml:space="preserve">
          <source>Start of alternative branch</source>
          <target state="translated">대체 지점의 시작</target>
        </trans-unit>
        <trans-unit id="2206aaf62477f1b94d6a89b4207602aab909f514" translate="yes" xml:space="preserve">
          <source>Start phases are defined by the &lt;code&gt;start_phases&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file as a list of tuples &lt;code&gt;{Phase,PhaseArgs}&lt;/code&gt;, where &lt;code&gt;Phase&lt;/code&gt; is an atom and &lt;code&gt;PhaseArgs&lt;/code&gt; is a term.</source>
          <target state="translated">시작 단계는 &lt;code&gt;.app&lt;/code&gt; 파일 의 &lt;code&gt;start_phases&lt;/code&gt; 키에 의해 튜플 &lt;code&gt;{Phase,PhaseArgs}&lt;/code&gt; 목록으로 정의됩니다. 여기서 &lt;code&gt;Phase&lt;/code&gt; 는 원자이고 &lt;code&gt;PhaseArgs&lt;/code&gt; 는 용어입니다.</target>
        </trans-unit>
        <trans-unit id="6d1aae1d67148988e4843cf538f6b7eef58f5e3f" translate="yes" xml:space="preserve">
          <source>Start phases can be used to synchronize startup of an application and its included applications. In this case, key &lt;code&gt;mod&lt;/code&gt; must be specified as follows:</source>
          <target state="translated">시작 단계를 사용하여 응용 프로그램과 포함 된 응용 프로그램의 시작을 동기화 할 수 있습니다. 이 경우 키 &lt;code&gt;mod&lt;/code&gt; 는 다음과 같이 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="179fc5ea0f74609f68ce915055ba1369b0a78e85" translate="yes" xml:space="preserve">
          <source>Start specification for the child.</source>
          <target state="translated">자식에 대한 사양을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="bdd161afb5351491f3335bd7e0376e7c5f3b0f75" translate="yes" xml:space="preserve">
          <source>Start specification for the successfully started child.</source>
          <target state="translated">성공적으로 시작된 자식에 대한 사양을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="997196a5ac567566b18439d8586eca877f276ae1" translate="yes" xml:space="preserve">
          <source>Start subpattern</source>
          <target state="translated">하위 패턴 시작</target>
        </trans-unit>
        <trans-unit id="f2dd89330c52e69f75583db61bed0f7381f2e054" translate="yes" xml:space="preserve">
          <source>Start the &lt;code&gt;os_mon&lt;/code&gt; application in Erlang.</source>
          <target state="translated">Erlang 에서 &lt;code&gt;os_mon&lt;/code&gt; 어플리케이션을 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9a2126c26a8de422d027c6d071de39f42e46a61" translate="yes" xml:space="preserve">
          <source>Start the &lt;code&gt;rb_server&lt;/code&gt; with function &lt;code&gt;&lt;a href=&quot;rb#start-1&quot;&gt;rb:start([Options])&lt;/a&gt;&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">다음 예제와 같이 &lt;code&gt;&lt;a href=&quot;rb#start-1&quot;&gt;rb:start([Options])&lt;/a&gt;&lt;/code&gt; 함수를 사용 하여 &lt;code&gt;rb_server&lt;/code&gt; 를 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="57d0bada7b23796f78292587d5bc6b53cc19ee1c" translate="yes" xml:space="preserve">
          <source>Start the C program &lt;code&gt;cserver&lt;/code&gt; and Erlang in different windows.</source>
          <target state="translated">다른 창에서 C 프로그램 &lt;code&gt;cserver&lt;/code&gt; 및 Erlang을 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="d90b668ba2fe5103be699ea3b9e11564d3c63d58" translate="yes" xml:space="preserve">
          <source>Start the Erlang &lt;code&gt;ssh&lt;/code&gt; daemon with the SFTP subsystem:</source>
          <target state="translated">SFTP 서브 시스템으로 Erlang &lt;code&gt;ssh&lt;/code&gt; 디먼을 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="7266185b42e91021e6fb89f5dd66cfd3a44cca1b" translate="yes" xml:space="preserve">
          <source>Start the Erlang shell (in Linux or UNIX) by starting a shell or command interpreter in your operating system and typing &lt;code&gt;erl&lt;/code&gt;. You will see something like this.</source>
          <target state="translated">운영 체제에서 쉘 또는 명령 인터프리터를 시작하고 &lt;code&gt;erl&lt;/code&gt; 을 입력하여 Erlang 쉘 (Linux 또는 UNIX)을 시작하십시오 . 이와 같은 것을 보게 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="1b9c3597291cdf21e6d808993841f636377d0f73" translate="yes" xml:space="preserve">
          <source>Start the MG user. This may either be done explicitly with megaco:start_user/2 or implicitly by providing the -megaco users configuration parameter.</source>
          <target state="translated">MG 사용자를 시작하십시오. megaco : start_user / 2를 사용하여 명시 적으로 수행하거나 -megaco users 구성 매개 변수를 제공하여 내재적으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="deba1586440053389f3b6a02a5e3d64c0d8e7189" translate="yes" xml:space="preserve">
          <source>Start the MGC user. This may either be done explicitly with megaco:start_user/2 or implicitly by providing the -megaco users configuration parameter.</source>
          <target state="translated">MGC 사용자를 시작하십시오. megaco : start_user / 2를 사용하여 명시 적으로 수행하거나 -megaco users 구성 매개 변수를 제공하여 내재적으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81e24fc749f1c90814f08a1e1800e2eed1333bd3" translate="yes" xml:space="preserve">
          <source>Start the Megaco application.</source>
          <target state="translated">Megaco 애플리케이션을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="fab74e170caad8778f19de050d73cf66ba71fca2" translate="yes" xml:space="preserve">
          <source>Start the application (agent).</source>
          <target state="translated">응용 프로그램 (에이전트)을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="3f1ddfd48c696c3a42be4d905b3f270c2ddc174b" translate="yes" xml:space="preserve">
          <source>Start the application (manager).</source>
          <target state="translated">응용 프로그램 (관리자)을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="495056b1cbcaf654de6cef46d3c1505cbc015681" translate="yes" xml:space="preserve">
          <source>Start the damon with a reference to a &lt;code&gt;fun()&lt;/code&gt; that handles the evaluation:</source>
          <target state="translated">평가를 처리 하는 &lt;code&gt;fun()&lt;/code&gt; 대한 참조로 데이먼을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="4893b0230c895fed532273767d912224df8b0092" translate="yes" xml:space="preserve">
          <source>Start the diameter application.</source>
          <target state="translated">직경 적용을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="bbffe1635e2f806efb8bed4f06625808af59577c" translate="yes" xml:space="preserve">
          <source>Start the lock-counting VM like this:</source>
          <target state="translated">다음과 같이 잠금 계산 VM을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="20c8855e2dbb5e94e0d46ecdeba9337f511f113a" translate="yes" xml:space="preserve">
          <source>Start tracing to file ports on many nodes with one function call.</source>
          <target state="translated">한 번의 함수 호출로 많은 노드에서 파일 포트 추적을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="384a2d05726e61a1cd79f1fc9be9d93843183709" translate="yes" xml:space="preserve">
          <source>Start tracing:</source>
          <target state="translated">추적을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="25b010fc5d4c4613f3c41b87a9a3f04434928a65" translate="yes" xml:space="preserve">
          <source>Start type of an application included in the release.</source>
          <target state="translated">릴리스에 포함 된 응용 프로그램의 시작 유형입니다.</target>
        </trans-unit>
        <trans-unit id="4eab2a2380f4fe4a3a525c45cde744d25b15591b" translate="yes" xml:space="preserve">
          <source>Start with version 1. When the initial service change has been performed and version 2 has been negotiated, upgrade the megaco_receive_handle of the transport process (control_pid) to version 2. See &lt;code&gt;&lt;a href=&quot;megaco_tcp#upgrade_receive_handle&quot;&gt;megaco_tcp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;megaco_udp#upgrade_receive_handle&quot;&gt;megaco_udp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">버전 1부터 시작하십시오. 초기 서비스 변경이 수행되고 버전 2가 협상 된 경우 전송 프로세스 (control_pid)의 &lt;code&gt;&lt;a href=&quot;megaco_tcp#upgrade_receive_handle&quot;&gt;megaco_tcp&lt;/a&gt;&lt;/code&gt; 을 버전 2로 업그레이드하십시오. megaco_tcp 및 &lt;code&gt;&lt;a href=&quot;megaco_udp#upgrade_receive_handle&quot;&gt;megaco_udp&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="833344ce276b1ce6b197007d7adce4565308d4d0" translate="yes" xml:space="preserve">
          <source>Start, stop, supervision, configuration, and distribution of applications</source>
          <target state="translated">응용 프로그램의 시작, 중지, 감독, 구성 및 배포</target>
        </trans-unit>
        <trans-unit id="746dd398817654653efa327eed88d25145fb1293" translate="yes" xml:space="preserve">
          <source>Start, update or cancel a generic time-out, read more in sections &lt;code&gt;&lt;a href=&quot;#Time-Outs&quot;&gt;Time-Outs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-Outs&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">일반 시간 제한을 시작, 업데이트 또는 취소하고 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#Time-Outs&quot;&gt;Time-Outs&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-Outs&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e3fd3bbb4e1a105b9274e439df40eb5c2a18cb29" translate="yes" xml:space="preserve">
          <source>Start, update or cancel a state time-out, read more in sections &lt;code&gt;&lt;a href=&quot;#Time-Outs&quot;&gt;Time-Outs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">상태 시간 제한을 시작, 업데이트 또는 취소하고 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#Time-Outs&quot;&gt;Time-Outs&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6da75736d5937ed0a1b193099ce61b4ee9e11937" translate="yes" xml:space="preserve">
          <source>Start-link the network interface process.</source>
          <target state="translated">네트워크 인터페이스 프로세스를 시작 링크하십시오.</target>
        </trans-unit>
        <trans-unit id="0001893d31063584d883c54a96d9b910c3e81156" translate="yes" xml:space="preserve">
          <source>StartTime,</source>
          <target state="translated">StartTime,</target>
        </trans-unit>
        <trans-unit id="bbdb8a72a151f3cecd1f521369c3902f46edc467" translate="yes" xml:space="preserve">
          <source>Starting &lt;code&gt;Mnesia&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 시작 .</target>
        </trans-unit>
        <trans-unit id="c71073f3ce9b0e94c5909cdd13d75187f081b0f9" translate="yes" xml:space="preserve">
          <source>Starting Erlang target nodes on local or remote hosts (application &lt;code&gt;SSH&lt;/code&gt; is used for communication).</source>
          <target state="translated">로컬 또는 원격 호스트에서 Erlang 대상 노드 시작 (응용 프로그램 &lt;code&gt;SSH&lt;/code&gt; 는 통신에 사용됨).</target>
        </trans-unit>
        <trans-unit id="7be869c81b44e9ac303b9b8ab5cf167e39506fb9" translate="yes" xml:space="preserve">
          <source>Starting IMenu</source>
          <target state="translated">IMenu 시작</target>
        </trans-unit>
        <trans-unit id="2e0e4fcee5b687c20d7f847f91f8662ffbb2f5ce" translate="yes" xml:space="preserve">
          <source>Starting Report Browser</source>
          <target state="translated">보고서 브라우저 시작</target>
        </trans-unit>
        <trans-unit id="0561db8cc639e29dd05a36cae5cbcfe8a800a244" translate="yes" xml:space="preserve">
          <source>Starting a Shell or Command (RFC 4254, section 6.5)</source>
          <target state="translated">셸 또는 명령 시작 (RFC 4254, 섹션 6.5)</target>
        </trans-unit>
        <trans-unit id="b26ade6f646ea753fbd6856c17083538071400bf" translate="yes" xml:space="preserve">
          <source>Starting a distributed node without also specifying &lt;code&gt;-proto_dist inet_tls&lt;/code&gt; will expose the node to attacks that may give the attacker complete access to the node and in extension the cluster. When using un-secure distributed nodes, make sure that the network is configured to keep potential attackers out. See the &lt;code&gt; Using SSL for Erlang Distribution&lt;/code&gt; User's Guide for details on how to setup a secure distributed node.</source>
          <target state="translated">&lt;code&gt;-proto_dist inet_tls&lt;/code&gt; 를 지정하지 않고 분산 노드를 시작 하면 공격자에게 노드 및 확장 클러스터에 대한 완전한 액세스 권한을 부여 할 수있는 공격에 노드가 노출됩니다. 비보안 분산 노드를 사용하는 경우 네트워크가 잠재적 공격자를 차단하도록 구성되어 있는지 확인하십시오. 참고 항목 &lt;code&gt; Using SSL for Erlang Distribution&lt;/code&gt; 설정하는 방법에 대한 보안 분산 노드에 대한 자세한 내용은 사용 설명서를.</target>
        </trans-unit>
        <trans-unit id="402188e44e346d067478a132829ccae3fbf7624c" translate="yes" xml:space="preserve">
          <source>Starting a distributed node without also specifying &lt;code&gt;-proto_dist inet_tls&lt;/code&gt; will expose the node to attacks that may give the attacker complete access to the node and in extension the cluster. When using un-secure distributed nodes, make sure that the network is configured to keep potential attackers out. See the &lt;code&gt;Using SSL for Erlang Distribution&lt;/code&gt; User's Guide for details on how to setup a secure distributed node.</source>
          <target state="translated">&lt;code&gt;-proto_dist inet_tls&lt;/code&gt; 를 지정하지 않고 분산 노드를 시작 하면 노드가 공격에 노출되어 공격자가 노드 및 클러스터에 대한 완전한 액세스 권한을 부여 할 수 있습니다. 비보안 분산 노드를 사용하는 경우 네트워크가 잠재적 인 공격자를 차단하도록 구성되어 있는지 확인하십시오. 참고 항목 &lt;code&gt;Using SSL for Erlang Distribution&lt;/code&gt; 설정하는 방법에 대한 보안 분산 노드에 대한 자세한 내용은 사용 설명서를.</target>
        </trans-unit>
        <trans-unit id="917fe9ff6b20485feb18687c134b0b909a7034b5" translate="yes" xml:space="preserve">
          <source>Starting a distributed node without also specifying &lt;code&gt;&lt;a href=&quot;#proto_dist&quot;&gt;-proto_dist inet_tls&lt;/a&gt;&lt;/code&gt; will expose the node to attacks that may give the attacker complete access to the node and in extension the cluster. When using un-secure distributed nodes, make sure that the network is configured to keep potential attackers out.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#proto_dist&quot;&gt;-proto_dist inet_tls&lt;/a&gt;&lt;/code&gt; 를 지정하지 않고 분산 노드를 시작 하면 노드가 공격에 노출되어 공격자가 노드 및 클러스터에 대한 완전한 액세스 권한을 부여 할 수 있습니다. 비보안 분산 노드를 사용하는 경우 네트워크가 잠재적 인 공격자를 차단하도록 구성되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="45c706e7a5f11841b498f42fb315f298445ece84" translate="yes" xml:space="preserve">
          <source>Starting a test case from another not only tests the same thing twice, but also makes it harder to follow what is being tested. Also, if the called test case fails for some reason, so do the caller. This way, one error gives cause to several error reports, which is to be avoided.</source>
          <target state="translated">다른 사례에서 테스트 사례를 시작하면 동일한 것을 두 번 테스트 할뿐만 아니라 테스트 대상을 따르기가 더 어려워집니다. 또한 어떤 이유로 인해 호출 된 테스트 케이스가 실패하면 호출자도 실패합니다. 이런 식으로, 하나의 오류는 여러 가지 오류 보고서의 원인이되므로 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="462ac139ec0141a4ee6c1922e00c19341e076c66" translate="yes" xml:space="preserve">
          <source>Starting and stopping, boot scripts, code loading, &lt;code&gt; logging&lt;/code&gt;, &lt;code&gt; creating target systems&lt;/code&gt;</source>
          <target state="translated">시작 및 중지, 부트 스크립트, 코드로드, &lt;code&gt; logging&lt;/code&gt; , &lt;code&gt; creating target systems&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0236d027a8777babb601d32afaaf0dd15c40fe3" translate="yes" xml:space="preserve">
          <source>Starting and stopping, boot scripts, code loading, &lt;code&gt;logging&lt;/code&gt;, &lt;code&gt;creating target systems&lt;/code&gt;</source>
          <target state="translated">시작 및 중지, 부팅 스크립트, 코드 로딩, &lt;code&gt;logging&lt;/code&gt; , &lt;code&gt;creating target systems&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b49db1c6028bfb3b49f7b419c6efca3ed86a8033" translate="yes" xml:space="preserve">
          <source>Starting in OTP 23, the size can be a guard expression:</source>
          <target state="translated">OTP 23부터 크기는 가드 표현식이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03b261842f5fe66250c4d263ad01724516046766" translate="yes" xml:space="preserve">
          <source>Starting sequential tracing requires that a tracer is started with function &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt;. Sequential tracing can then be started in either of the following ways:</source>
          <target state="translated">순차 추적을 시작하려면 &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt; 함수로 추적 프로그램을 시작해야합니다 . 그런 다음 다음 방법 중 하나로 순차 추적을 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2dd818d38446ff18d61467795b3e5eee580634ab" translate="yes" xml:space="preserve">
          <source>Starting sequential tracing with a trigger is more useful if the trigger function is not called directly from the shell, but rather implicitly within a larger system. When calling a function from the shell, it is simpler to start sequential tracing directly, for example, as follows:</source>
          <target state="translated">트리거 기능을 쉘에서 직접 호출하지 않고 더 큰 시스템 내에서 암시 적으로 호출하는 경우 트리거로 순차 추적을 시작하는 것이 더 유용합니다. 쉘에서 함수를 호출 할 때 다음과 같이 순차적 추적을 직접 시작하는 것이 더 간단합니다.</target>
        </trans-unit>
        <trans-unit id="6bb7aa0141d4707a7a28174e85ac5ee32250a9ae" translate="yes" xml:space="preserve">
          <source>Starting the Erlang session.</source>
          <target state="translated">Erlang 세션을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="a27ccd0d48d8a1f3edd9061244f3ac15977f218c" translate="yes" xml:space="preserve">
          <source>Starting the Process</source>
          <target state="translated">프로세스 시작</target>
        </trans-unit>
        <trans-unit id="317d49bb0215c341c0bb18c9da4c9a7908ce3acf" translate="yes" xml:space="preserve">
          <source>Starting the server</source>
          <target state="translated">서버 시작</target>
        </trans-unit>
        <trans-unit id="bf38754c7ce28ef111b73837f6ee1f056abc6942" translate="yes" xml:space="preserve">
          <source>Starting to receive incoming messages from the socket again.</source>
          <target state="translated">소켓에서 들어오는 메시지를 다시 받기 시작합니다.</target>
        </trans-unit>
        <trans-unit id="0125f6516d930f247b6d9de13cf378cd993bb40e" translate="yes" xml:space="preserve">
          <source>Starting with R9C, the module attribute tag &lt;code&gt;deprecated&lt;/code&gt; can be used to inform Xref about  &lt;strong id=&quot;deprecated_function&quot;&gt;deprecated functions&lt;/strong&gt; and optionally when functions are planned to be removed. A few examples show the idea:</source>
          <target state="translated">R9C부터는 &lt;code&gt;deprecated&lt;/code&gt; 모듈 속성 태그를 사용하여 Xref에 &lt;strong id=&quot;deprecated_function&quot;&gt;더 이상 사용되지 않는 기능&lt;/strong&gt; 및 선택적으로 기능을 제거 할 계획을 알릴 수 있습니다 . 몇 가지 예는 아이디어를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7e12123fa7b2cadded8d63086529faebd9df090f" translate="yes" xml:space="preserve">
          <source>Starts (&lt;code&gt;MatchSpec == true&lt;/code&gt;) or stops (&lt;code&gt;MatchSpec == false&lt;/code&gt;) call count tracing for all types of function calls. For every function, a counter is incremented when the function is called, in any process. No process trace flags need to be activated.</source>
          <target state="translated">모든 유형의 함수 호출에 대해 호출 횟수 추적을 시작 ( &lt;code&gt;MatchSpec == true&lt;/code&gt; ) 또는 중지 ( &lt;code&gt;MatchSpec == false&lt;/code&gt; )합니다. 모든 함수에 대해 프로세스가 호출 될 때 카운터가 증가합니다. 프로세스 추적 플래그를 활성화 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ac1aa2f73a5701bba346c50333e78b643887c3d2" translate="yes" xml:space="preserve">
          <source>Starts (&lt;code&gt;MatchSpec == true&lt;/code&gt;) or stops (&lt;code&gt;MatchSpec == false&lt;/code&gt;) call time tracing for all types of function calls. For every function, a counter is incremented when the function is called. Time spent in the function is accumulated in two other counters, seconds and microseconds. The counters are stored for each call traced process.</source>
          <target state="translated">모든 유형의 함수 호출에 대한 호출 시간 추적을 시작 ( &lt;code&gt;MatchSpec == true&lt;/code&gt; ) 또는 중지 ( &lt;code&gt;MatchSpec == false&lt;/code&gt; )합니다. 모든 함수에 대해 함수가 호출 될 때 카운터가 증가합니다. 함수에서 소비 된 시간은 초와 마이크로 초의 두 개의 다른 카운터에 누적됩니다. 카운터는 각 통화 추적 프로세스에 대해 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="8dfca718f943da347a10276243887396ab9a4415" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;Application&lt;/code&gt;. If it is not loaded, the application controller first loads it using &lt;code&gt;load/1&lt;/code&gt;. It ensures that any included applications are loaded, but does not start them. That is assumed to be taken care of in the code for &lt;code&gt;Application&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Application&lt;/code&gt; 시작합니다 . 로드되지 않은 경우 애플리케이션 컨트롤러는 먼저 &lt;code&gt;load/1&lt;/code&gt; 을 사용하여 로드 합니다. 포함 된 응용 프로그램이로드되도록하지만 시작하지는 않습니다. 이는 &lt;code&gt;Application&lt;/code&gt; 코드에서 처리 된 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="e41c1f0cd2741e2ec0d88676f1c8dab02ec5214c" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;Common Test&lt;/code&gt; in interactive mode.</source>
          <target state="translated">대화식 모드에서 &lt;code&gt;Common Test&lt;/code&gt; 를 시작 합니다.</target>
        </trans-unit>
        <trans-unit id="acb64bb39ae476ce0d4c4f4aa9ddab2ada30630c" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;epmd&lt;/code&gt; detached from the controlling terminal. Logging ends up in syslog when available and correctly configured. If the &lt;code&gt;epmd&lt;/code&gt; daemon is started at boot, this option is definitely to be used. It is also used when command &lt;code&gt;erl&lt;/code&gt; automatically starts &lt;code&gt;epmd&lt;/code&gt;.</source>
          <target state="translated">제어 터미널에서 분리 된 &lt;code&gt;epmd&lt;/code&gt; 를 시작합니다 . 사용 가능하고 올바르게 구성되면 로깅이 syslog에 종료됩니다. 경우 &lt;code&gt;epmd&lt;/code&gt; 데몬이 부팅시 시작되는이 옵션은 확실히 사용됩니다. &lt;code&gt;erl&lt;/code&gt; 명령 이 &lt;code&gt;epmd&lt;/code&gt; 를 자동으로 시작할 때도 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="32f3ce935732a5791ba453e1a3cf95161f88d028" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;etop&lt;/code&gt;. Notice that &lt;code&gt;etop&lt;/code&gt; is preferably started with the &lt;code&gt;etop&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; 을 시작합니다 . 것을 알 수 &lt;code&gt;etop&lt;/code&gt; 가 바람직 시작됩니다 &lt;code&gt;etop&lt;/code&gt; 의 스크립트.</target>
        </trans-unit>
        <trans-unit id="7f6bccd2a657e447114cf6a5bdb61431868fa24e" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;etop&lt;/code&gt;. To view the possible options, use &lt;code&gt;&lt;a href=&quot;#help-0&quot;&gt;help/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; 을 시작합니다 . 가능한 옵션을 보려면 &lt;code&gt;&lt;a href=&quot;#help-0&quot;&gt;help/0&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2776ebfb2f31c3ad4531354111de4091106498e5" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;mnesia:dirty_index_match_object(Tab, Pattern, Pos)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Pattern)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_index_match_object(Tab, Pattern, Pos)&lt;/code&gt; 시작합니다 . 여기서 &lt;code&gt;Tab&lt;/code&gt; 은 &lt;code&gt;element(1, Pattern)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="99151b334eeb9f1bf8f1838b00c688a2a02c3a37" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;mnesia:index_match_object(Tab, Pattern, Pos, read)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Pattern)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:index_match_object(Tab, Pattern, Pos, read)&lt;/code&gt; 시작합니다 . 여기서 &lt;code&gt;Tab&lt;/code&gt; 은 &lt;code&gt;element(1, Pattern)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="512ae5405738ff0862cdf2ea3b9b95320eac632a" translate="yes" xml:space="preserve">
          <source>Starts Debugger.</source>
          <target state="translated">디버거를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="69856238949073ab5f89af0bc275ca3c509327b5" translate="yes" xml:space="preserve">
          <source>Starts Erlang with a remote shell connected to &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 연결된 원격 쉘로 Erlang을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="2641f0f8b4abbebe30f75da005bfceafc407881f" translate="yes" xml:space="preserve">
          <source>Starts a Cover server on the each of given nodes, and loads all cover compiled modules.</source>
          <target state="translated">주어진 각 노드에서 Cover 서버를 시작하고 모든 Cover 컴파일 된 모듈을로드합니다.</target>
        </trans-unit>
        <trans-unit id="65d44d0e6d1f43162723d87c8dc05c1f9f6a3f33" translate="yes" xml:space="preserve">
          <source>Starts a Cover server on the each of given nodes, and loads all cover compiled modules. This call will fail if &lt;code&gt;cover:local_only/0&lt;/code&gt; has been called.</source>
          <target state="translated">주어진 각 노드에서 커버 서버를 시작하고 커버 컴파일 된 모든 모듈을로드합니다. &lt;code&gt;cover:local_only/0&lt;/code&gt; 이 호출되면이 호출은 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="ada3efa42e714462919dfd309f115a4ae415659a" translate="yes" xml:space="preserve">
          <source>Starts a daemon process listening for UDP packets on a port. When it receives a request for read or write, it spawns a temporary server process handling the actual transfer of the (virtual) file.</source>
          <target state="translated">포트에서 UDP 패킷을 수신하는 데몬 프로세스를 시작합니다. 읽기 또는 쓰기 요청을 받으면 (가상) 파일의 실제 전송을 처리하는 임시 서버 프로세스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="cd8e52b7c2bc6c8f4f86e0c32ac1029bb5bad153" translate="yes" xml:space="preserve">
          <source>Starts a dbg tracer that prints trace events to stdout (using plain io:format after a minor formatting).</source>
          <target state="translated">추적 이벤트를 stdout에 인쇄하는 dbg 추적 프로그램을 시작합니다 (사소한 형식화 후 일반 io : format 사용).</target>
        </trans-unit>
        <trans-unit id="0c7c8a03e3d0fed106ef41dec89e7414b7449cb1" translate="yes" xml:space="preserve">
          <source>Starts a file trace port on all specified nodes and points the system tracer for sequential tracing to the same port.</source>
          <target state="translated">지정된 모든 노드에서 파일 추적 포트를 시작하고 순차 추적을위한 시스템 추적 프로그램이 동일한 포트를 가리 키도록합니다.</target>
        </trans-unit>
        <trans-unit id="59da427ccafcd8c79ab647a06072a22ae74a0012" translate="yes" xml:space="preserve">
          <source>Starts a new graphical monitor. This is the Monitor window, the main window of Debugger. All the Debugger and interpreter functionality is accessed from the Monitor window. This window displays the status of all processes that have been or are executing interpreted modules.</source>
          <target state="translated">새로운 그래픽 모니터를 시작합니다. 디버거의 메인 창인 모니터 창입니다. 모든 디버거 및 인터프리터 기능은 모니터 창에서 액세스합니다. 이 창에는 해석 된 모듈이 있거나 실행중인 모든 프로세스의 상태가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="23b41e57adc06ecb4a9ee1036704a3e47931472d" translate="yes" xml:space="preserve">
          <source>Starts a new job. This is assigned the new index &lt;code&gt;[nn]&lt;/code&gt;, which can be used in references.</source>
          <target state="translated">새 작업을 시작합니다. 여기 에는 참조로 사용할 수있는 새로운 인덱스 &lt;code&gt;[nn]&lt;/code&gt; 이 할당 됩니다.</target>
        </trans-unit>
        <trans-unit id="a89eda1d44e92bc7fb254ab2af9dad2b5339a832" translate="yes" xml:space="preserve">
          <source>Starts a new job. This is assigned the new index &lt;code&gt;[nn]&lt;/code&gt;, which can be used in references. If optional argument &lt;code&gt;shell&lt;/code&gt; is specified, it is assumed to be a module that implements an alternative shell.</source>
          <target state="translated">새 작업을 시작합니다. 여기 에는 참조로 사용할 수있는 새로운 인덱스 &lt;code&gt;[nn]&lt;/code&gt; 이 할당 됩니다. 선택적 인수 &lt;code&gt;shell&lt;/code&gt; 이 지정된 경우 대체 쉘을 구현하는 모듈 인 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="efaa57c54001ac761f99265a7cce8071a2e07048" translate="yes" xml:space="preserve">
          <source>Starts a new pool. The file &lt;code&gt;.hosts.erlang&lt;/code&gt; is read to find host names where the pool nodes can be started; see section &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt;. The startup procedure fails if the file is not found.</source>
          <target state="translated">새 풀을 시작합니다. 풀 노드를 시작할 수있는 호스트 이름을 찾기 위해 &lt;code&gt;.hosts.erlang&lt;/code&gt; 파일을 읽습니다. &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 . 파일을 찾을 수 없으면 시작 절차가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="1aa9ea99aa15f69d6b5f89afcbd9bcc0ebb00812" translate="yes" xml:space="preserve">
          <source>Starts a new process synchronously. Spawns the process and waits for it to start. A link is atomically set on the newly spawned process. When the process has started, it &lt;strong&gt;must&lt;/strong&gt; call &lt;code&gt;&lt;a href=&quot;#init_ack-2&quot;&gt;init_ack(Parent, Ret)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#init_ack-1&quot;&gt;init_ack(Ret)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Parent&lt;/code&gt; is the process that evaluates this function. At this time, &lt;code&gt;Ret&lt;/code&gt; is returned.</source>
          <target state="translated">새 프로세스를 동 기적으로 시작합니다. 프로세스를 생성하고 시작될 때까지 기다립니다. 링크는 새로 생성 된 프로세스에 원자 적으로 설정됩니다. 프로세스가 시작되면 &lt;code&gt;&lt;a href=&quot;#init_ack-2&quot;&gt;init_ack(Parent, Ret)&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#init_ack-1&quot;&gt;init_ack(Ret)&lt;/a&gt;&lt;/code&gt; 호출 &lt;strong&gt;해야합니다&lt;/strong&gt; . 여기서 &lt;code&gt;Parent&lt;/code&gt; 는이 함수를 평가하는 프로세스입니다. 이때 &lt;code&gt;Ret&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="13e0ac2ea9566d52e7fc217187d4828b54ef7295" translate="yes" xml:space="preserve">
          <source>Starts a new process synchronously. Spawns the process and waits for it to start. A monitor is atomically set on the newly spawned process. When the process has started, it &lt;strong&gt;must&lt;/strong&gt; call &lt;code&gt;&lt;a href=&quot;#init_ack-2&quot;&gt;init_ack(Parent, Ret)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#init_ack-1&quot;&gt;init_ack(Ret)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Parent&lt;/code&gt; is the process that evaluates this function. At this time, &lt;code&gt;Ret&lt;/code&gt; is returned.</source>
          <target state="translated">새 프로세스를 동 기적으로 시작합니다. 프로세스를 생성하고 시작될 때까지 기다립니다. 모니터는 새로 생성 된 프로세스에 원자 적으로 설정됩니다. 프로세스가 시작되면 &lt;code&gt;&lt;a href=&quot;#init_ack-2&quot;&gt;init_ack(Parent, Ret)&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#init_ack-1&quot;&gt;init_ack(Ret)&lt;/a&gt;&lt;/code&gt; 호출 &lt;strong&gt;해야합니다&lt;/strong&gt; . 여기서 &lt;code&gt;Parent&lt;/code&gt; 는이 함수를 평가하는 프로세스입니다. 이때 &lt;code&gt;Ret&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b00506014e39feeea0f51d2896c54ec93c350317" translate="yes" xml:space="preserve">
          <source>Starts a new process synchronously. Spawns the process and waits for it to start. When the process has started, it &lt;strong&gt;must&lt;/strong&gt; call &lt;code&gt;&lt;a href=&quot;#init_ack-2&quot;&gt;init_ack(Parent, Ret)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#init_ack-1&quot;&gt;init_ack(Ret)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Parent&lt;/code&gt; is the process that evaluates this function. At this time, &lt;code&gt;Ret&lt;/code&gt; is returned.</source>
          <target state="translated">새로운 프로세스를 동 기적으로 시작합니다. 프로세스를 생성하고 시작될 때까지 기다립니다. 프로세스가 시작되면 &lt;code&gt;&lt;a href=&quot;#init_ack-2&quot;&gt;init_ack(Parent, Ret)&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#init_ack-1&quot;&gt;init_ack(Ret)&lt;/a&gt;&lt;/code&gt; 호출 &lt;strong&gt;해야합니다&lt;/strong&gt; . 여기서 &lt;code&gt;Parent&lt;/code&gt; 는이 함수를 평가하는 프로세스입니다. 이때 &lt;code&gt;Ret&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b569bcb4113eeae02f451a486b80ee36e374b784" translate="yes" xml:space="preserve">
          <source>Starts a number of pseudo servers. A pseudo server is a server with a registered name that does nothing but pass on all message to the real server that executes at a master node. A pseudo server is an intermediary that only has the same registered name as the real server.</source>
          <target state="translated">여러 의사 서버를 시작합니다. 의사 서버는 등록 된 이름을 가진 서버로 모든 메시지를 마스터 노드에서 실행되는 실제 서버로 전달합니다. 의사 서버는 실제 서버와 등록 된 이름 만 동일한 중개자입니다.</target>
        </trans-unit>
        <trans-unit id="daab94fe451c919cef2334273fd628fc416d954b" translate="yes" xml:space="preserve">
          <source>Starts a process that handles an SSH channel. It is called internally, by the &lt;code&gt;ssh&lt;/code&gt; daemon, or explicitly by the &lt;code&gt;ssh&lt;/code&gt; client implementations. The behavior sets the &lt;code&gt;trap_exit&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">SSH 채널을 처리하는 프로세스를 시작합니다. 내부적으로, &lt;code&gt;ssh&lt;/code&gt; 데몬에 의해 또는 &lt;code&gt;ssh&lt;/code&gt; 클라이언트 구현에 의해 명시 적으로 호출 됩니다. 이 동작은 &lt;code&gt;trap_exit&lt;/code&gt; 플래그를 &lt;code&gt;true&lt;/code&gt; 로 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="631b3d7c29c7f259a3757cbd5553ce641fb166df" translate="yes" xml:space="preserve">
          <source>Starts a remote job on &lt;code&gt;node&lt;/code&gt;. This is used in distributed Erlang to allow a shell running on one node to control a number of applications running on a network of nodes. If optional argument &lt;code&gt;shell&lt;/code&gt; is specified, it is assumed to be a module that implements an alternative shell.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 에서 원격 작업을 시작합니다 . 이는 분산 Erlang에서 사용되어 한 노드에서 실행중인 쉘이 노드 네트워크에서 실행되는 여러 응용 프로그램을 제어 할 수 있도록합니다. 선택적 인수 &lt;code&gt;shell&lt;/code&gt; 이 지정된 경우 대체 쉘을 구현하는 모듈 인 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="f9dabed2e7c24418b36f72b598709d74463de0e3" translate="yes" xml:space="preserve">
          <source>Starts a server listening for SSH connections on the given port. If the &lt;code&gt;Port&lt;/code&gt; is 0, a random free port is selected. See &lt;code&gt;&lt;a href=&quot;#daemon_info-1&quot;&gt;daemon_info/1&lt;/a&gt;&lt;/code&gt; about how to find the selected port number.</source>
          <target state="translated">주어진 포트에서 SSH 연결을 수신 대기하는 서버를 시작합니다. 는 IF &lt;code&gt;Port&lt;/code&gt; 0, 임의의 사용 가능한 포트가 선택됩니다. 선택된 포트 번호를 찾는 방법 은 &lt;code&gt;&lt;a href=&quot;#daemon_info-1&quot;&gt;daemon_info/1&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1f72eca12e0faab8d39ef97537354c30603c27b1" translate="yes" xml:space="preserve">
          <source>Starts a slave node in the same way as &lt;code&gt;start/1,2,3&lt;/code&gt;, except that the slave node is linked to the currently executing process. If that process terminates, the slave node also terminates.</source>
          <target state="translated">슬레이브 노드가 현재 실행중인 프로세스에 링크되어 있다는 점을 제외하고 &lt;code&gt;start/1,2,3&lt;/code&gt; 과 동일한 방식으로 슬레이브 노드를 시작합니다 . 해당 프로세스가 종료되면 슬레이브 노드도 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="763c91593ece99aa3bac01499ddd2a5c62a34e93" translate="yes" xml:space="preserve">
          <source>Starts a slave node on host &lt;code&gt;Host&lt;/code&gt;. Host names need not necessarily be specified as fully qualified names; short names can also be used. This is the same condition that applies to names of distributed Erlang nodes.</source>
          <target state="translated">호스트 &lt;code&gt;Host&lt;/code&gt; 에서 슬레이브 노드를 시작합니다 . 호스트 이름을 반드시 정규화 된 이름으로 지정할 필요는 없습니다. 짧은 이름도 사용할 수 있습니다. 이는 분산 Erlang 노드의 이름에 적용되는 것과 동일한 조건입니다.</target>
        </trans-unit>
        <trans-unit id="eed806b3647c7ac7c1bb6a97b5a09fc434394236" translate="yes" xml:space="preserve">
          <source>Starts a standalone FTP client process (without the &lt;code&gt;ftp&lt;/code&gt; service framework) and opens a session with the FTP server at &lt;code&gt;Host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ftp&lt;/code&gt; 서비스 프레임 워크 없이 독립형 FTP 클라이언트 프로세스를 시작하고 &lt;code&gt;Host&lt;/code&gt; 에서 FTP 서버와의 세션을 엽니 다 .</target>
        </trans-unit>
        <trans-unit id="8e81f7fc69f8fd2c15b215cc24034ee870b974d7" translate="yes" xml:space="preserve">
          <source>Starts a sub-agent on the node where the function is called. The &lt;code&gt;snmpa_supervisor&lt;/code&gt; must be running.</source>
          <target state="translated">함수가 호출 된 노드에서 서브 에이전트를 시작합니다. &lt;code&gt;snmpa_supervisor&lt;/code&gt; 는 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="d8ad3b7242888dd584efd361f94a244fe75bfd5a" translate="yes" xml:space="preserve">
          <source>Starts a supervisor for the SNMP agent system without a master agent. The supervisor starts all involved SNMP processes, but no agent processes. Sub-agents should be started by calling &lt;code&gt;start_sub_agent/3&lt;/code&gt;.</source>
          <target state="translated">마스터 에이전트없이 SNMP 에이전트 시스템에 대한 감독자를 시작합니다. 수퍼바이저는 관련된 모든 SNMP 프로세스를 시작하지만 에이전트 프로세스는 시작하지 않습니다. &lt;code&gt;start_sub_agent/3&lt;/code&gt; 를 호출하여 서브 에이전트를 시작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="562a3d8c26c6f9da4fd602114de485e2bc6479ad" translate="yes" xml:space="preserve">
          <source>Starts a supervisor for the SNMP agent system. The supervisor starts all involved SNMP processes, including the master agent. Sub-agents should be started by calling &lt;code&gt;start_subagent/3&lt;/code&gt;.</source>
          <target state="translated">SNMP 에이전트 시스템의 감독자를 시작합니다. 수퍼바이저는 마스터 에이전트를 포함하여 관련된 모든 SNMP 프로세스를 시작합니다. &lt;code&gt;start_subagent/3&lt;/code&gt; 를 호출하여 서브 에이전트를 시작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="22c5856ebde5c5ce4f3d5bf1703f82ff0386abc1" translate="yes" xml:space="preserve">
          <source>Starts a timer set by &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;state_timeout&lt;/code&gt;. When the timer expires an event of &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;state_timeout&lt;/code&gt; will be generated. See &lt;code&gt;erlang:start_timer/4&lt;/code&gt; for how &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; are interpreted. Future &lt;code&gt;erlang:start_timer/4&lt;/code&gt;&lt;code&gt;Options&lt;/code&gt; will not necessarily be supported.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;state_timeout&lt;/code&gt; 에 의해 설정된 타이머를 시작합니다 . 타이머가 만료되면 &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; 이벤트 가 발생합니다. &lt;code&gt;state_timeout&lt;/code&gt; . &lt;code&gt;Time&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; 의 해석 방법 은 &lt;code&gt;erlang:start_timer/4&lt;/code&gt; 를 참조하십시오 . 향후 &lt;code&gt;erlang:start_timer/4&lt;/code&gt; &lt;code&gt;Options&lt;/code&gt; 이 반드시 지원되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="108aa35f9dc94c4df1568152dc3d42687dc24580" translate="yes" xml:space="preserve">
          <source>Starts a timer set by &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;timeout&lt;/code&gt;. When the timer expires an event of &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;timeout&lt;/code&gt; will be generated. See &lt;code&gt;erlang:start_timer/4&lt;/code&gt; for how &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; are interpreted. Future &lt;code&gt;erlang:start_timer/4&lt;/code&gt;&lt;code&gt;Options&lt;/code&gt; will not necessarily be supported.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;timeout&lt;/code&gt; 에 의해 설정된 타이머를 시작합니다 . 타이머가 만료되면 &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;timeout&lt;/code&gt; 이벤트 가 생성됩니다. &lt;code&gt;Time&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; 의 해석 방법 은 &lt;code&gt;erlang:start_timer/4&lt;/code&gt; 를 참조하십시오 . 향후 &lt;code&gt;erlang:start_timer/4&lt;/code&gt; &lt;code&gt;Options&lt;/code&gt; 이 반드시 지원되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f416700a9e2b5e3828f5eb7875b5c955138db191" translate="yes" xml:space="preserve">
          <source>Starts a timer set by &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{timeout,Name}&lt;/code&gt;. When the timer expires an event of &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{timeout,Name}&lt;/code&gt; will be generated. See &lt;code&gt;erlang:start_timer/4&lt;/code&gt; for how &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; are interpreted. Future &lt;code&gt;erlang:start_timer/4&lt;/code&gt;&lt;code&gt;Options&lt;/code&gt; will not necessarily be supported.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;{timeout,Name}&lt;/code&gt; 에 의해 설정된 타이머를 시작합니다 . 타이머가 만료되면 &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;{timeout,Name}&lt;/code&gt; 이벤트 가 생성됩니다. &lt;code&gt;Time&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; 의 해석 방법 은 &lt;code&gt;erlang:start_timer/4&lt;/code&gt; 를 참조하십시오 . 향후 &lt;code&gt;erlang:start_timer/4&lt;/code&gt; &lt;code&gt;Options&lt;/code&gt; 이 반드시 지원되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="08d18548f4968644af5cac524c3ab825e21d5db8" translate="yes" xml:space="preserve">
          <source>Starts a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt; erlang:send_after(Time, Dest, Msg, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">타이머를 시작합니다. &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt; erlang:send_after(Time, Dest, Msg, [])&lt;/a&gt;&lt;/code&gt; 를 호출하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="719d6d0668a04cd76448cf3570d89a6bcd0c8280" translate="yes" xml:space="preserve">
          <source>Starts a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after(Time,Dest,Msg, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">타이머를 시작합니다. &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after(Time,Dest,Msg, [])&lt;/a&gt;&lt;/code&gt; 호출과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="d18dc474d68415a4d06a0b0ec47e7d5f1fd7a088" translate="yes" xml:space="preserve">
          <source>Starts a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt; erlang:start_timer(Time, Dest, Msg, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">타이머를 시작합니다. &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt; erlang:start_timer(Time, Dest, Msg, [])&lt;/a&gt;&lt;/code&gt; 호출과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="86f795b67a1487dda314d37a3c6fe72707cfbd6d" translate="yes" xml:space="preserve">
          <source>Starts a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer(Time,Dest,Msg, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">타이머를 시작합니다. &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer(Time,Dest,Msg, [])&lt;/a&gt;&lt;/code&gt; 호출과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="c5a8250d5fb1860eaa0ef74b5639e0f5e369ff0d" translate="yes" xml:space="preserve">
          <source>Starts a timer. When the timer expires, the message &lt;code&gt;Msg&lt;/code&gt; is sent to the process identified by &lt;code&gt;Dest&lt;/code&gt;. Apart from the format of the time-out message, this function works exactly as &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt; erlang:start_timer/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">타이머를 시작합니다. 타이머가 만료되면 메시지 &lt;code&gt;Msg&lt;/code&gt; 가 &lt;code&gt;Dest&lt;/code&gt; 로 식별되는 프로세스로 전송됩니다 . 시간 제한 메시지의 형식과는 별도로이 함수는 &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt; erlang:start_timer/4&lt;/a&gt;&lt;/code&gt; 와 똑같이 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="ba653d76c9aa38651a774ebfe600b79e8c510f7a" translate="yes" xml:space="preserve">
          <source>Starts a timer. When the timer expires, the message &lt;code&gt;Msg&lt;/code&gt; is sent to the process identified by &lt;code&gt;Dest&lt;/code&gt;. Apart from the format of the time-out message, this function works exactly as &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">타이머를 시작합니다. 타이머가 만료되면 &lt;code&gt;Msg&lt;/code&gt; 메시지 가 &lt;code&gt;Dest&lt;/code&gt; 로 식별 된 프로세스로 전송됩니다 . 시간 초과 메시지의 형식 외에도이 기능은 &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer/4&lt;/a&gt;&lt;/code&gt; 와 동일하게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="a64c4e6780c14c723aed66bc72558edb7a91b73c" translate="yes" xml:space="preserve">
          <source>Starts a timer. When the timer expires, the message &lt;code&gt;{timeout, TimerRef, Msg}&lt;/code&gt; is sent to the process identified by &lt;code&gt;Dest&lt;/code&gt;.</source>
          <target state="translated">타이머를 시작합니다. 타이머가 만료되면 &lt;code&gt;{timeout, TimerRef, Msg}&lt;/code&gt; 가 &lt;code&gt;Dest&lt;/code&gt; 로 식별 된 프로세스로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="b5724274ddf67ec9356b93b02cf4343cf416770c" translate="yes" xml:space="preserve">
          <source>Starts a tracer process that profiles trace data in runtime. The call will return immediately with the return value &lt;code&gt;{ok, Tracer}&lt;/code&gt; if successful. This option is not allowed with the &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;{file, Filename}&lt;/code&gt; options.</source>
          <target state="translated">런타임시 추적 데이터를 프로파일 링하는 추적 프로그램 프로세스를 시작합니다. 성공하면 호출은 반환 값 &lt;code&gt;{ok, Tracer}&lt;/code&gt; 와 함께 즉시 반환 됩니다. 이 옵션은 &lt;code&gt;stop&lt;/code&gt; , &lt;code&gt;file&lt;/code&gt; 또는 &lt;code&gt;{file, Filename}&lt;/code&gt; 옵션 과 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8c33507ba827616609be2a1593ebd28d188f3218" translate="yes" xml:space="preserve">
          <source>Starts additional scope.</source>
          <target state="translated">추가 범위를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="9a5206e769b1b06b770bdbcfa1c39c610fe529c5" translate="yes" xml:space="preserve">
          <source>Starts all stopped processes using a module &lt;code&gt;Mod&lt;/code&gt; by calling &lt;code&gt;supervisor:restart_child/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;supervisor:restart_child/2&lt;/code&gt; 를 호출 하여 모듈 &lt;code&gt;Mod&lt;/code&gt; 를 사용하여 중지 된 모든 프로세스를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="3c82ec30723e9d96dfd07cca4407233aae0ac309" translate="yes" xml:space="preserve">
          <source>Starts an Erlang node with default options on a specified host, or on the local host with specified options. That is, the call is interpreted as &lt;code&gt;start(Host, Node)&lt;/code&gt; when the second argument is atom-valued and &lt;code&gt;start(Node, Opts)&lt;/code&gt; when it is list-valued.</source>
          <target state="translated">지정된 호스트 또는 지정된 옵션을 가진 로컬 호스트에서 기본 옵션으로 Erlang 노드를 시작합니다. 즉, 두 번째 인수가 원자 값일 경우 호출은 &lt;code&gt;start(Host, Node)&lt;/code&gt; &lt;code&gt;start(Node, Opts)&lt;/code&gt; 목록 값일 경우 start (Node, Opts) 로 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="b15b33895d20933a37075477aa3ece20f6b0a761" translate="yes" xml:space="preserve">
          <source>Starts an Erlang node with name &lt;code&gt;Node&lt;/code&gt; on host &lt;code&gt;Host&lt;/code&gt; as specified by the combination of options in &lt;code&gt;Opts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; 의 옵션 조합으로 지정된대로 호스트 &lt;code&gt;Host&lt;/code&gt; 에서 이름이 &lt;code&gt;Node&lt;/code&gt; 인 Erlang 노드를 시작 합니다 .</target>
        </trans-unit>
        <trans-unit id="c1de69fc5e803030d203925fb71214c2fd3f8276" translate="yes" xml:space="preserve">
          <source>Starts an Erlang node with name &lt;code&gt;Node&lt;/code&gt; on the local host.</source>
          <target state="translated">로컬 호스트에서 이름이 &lt;code&gt;Node&lt;/code&gt; 인 Erlang 노드를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="f927aee75024326c3417e3732e902dd3f78813fe" translate="yes" xml:space="preserve">
          <source>Starts an Erlang runtime system with no shell. This flag makes it possible to have the Erlang runtime system as a component in a series of Unix pipes.</source>
          <target state="translated">쉘없이 Erlang 런타임 시스템을 시작합니다. 이 플래그를 사용하면 Erlang 런타임 시스템을 일련의 Unix 파이프에서 컴포넌트로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb202ef51a8129fa629b94084042224c3bc9b1cd" translate="yes" xml:space="preserve">
          <source>Starts an Erlang runtime system.</source>
          <target state="translated">Erlang 런타임 시스템을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="1d1dffa0fd50ee05245e4715d03b85d73353586b" translate="yes" xml:space="preserve">
          <source>Starts an SFTP session on an already existing SSH connection. &lt;code&gt;Server&lt;/code&gt; identifies the new session and must be specified whenever SFTP requests are to be sent.</source>
          <target state="translated">이미 존재하는 SSH 연결에서 SFTP 세션을 시작합니다. &lt;code&gt;Server&lt;/code&gt; 는 새 세션을 식별하며 SFTP 요청을 보낼 때마다 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="3466ce8aa2b44ba85767671cdf4874970665be22" translate="yes" xml:space="preserve">
          <source>Starts an SNMP manager and/or agent. In the manager case, registrations of users and agents, as specified by the configuration &lt;code&gt;MgrAgentConfName&lt;/code&gt;, are performed. When using SNMPv3, called USM users are also registered. Users, &lt;code&gt;usm_users&lt;/code&gt;, and managed agents can also be registered later using &lt;code&gt;&lt;a href=&quot;#register_users-2&quot;&gt;ct_snmp:register_users/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#register_agents-2&quot;&gt;ct_snmp:register_agents/2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#register_usm_users-2&quot;&gt;ct_snmp:register_usm_users/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SNMP 관리자 및 / 또는 에이전트를 시작합니다. 관리자의 경우, 구성 &lt;code&gt;MgrAgentConfName&lt;/code&gt; 에 의해 지정된대로 사용자 및 에이전트의 등록 이 수행됩니다. SNMPv3을 사용하면 USM이라는 사용자도 등록됩니다. &lt;code&gt;&lt;a href=&quot;#register_users-2&quot;&gt;ct_snmp:register_users/2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#register_agents-2&quot;&gt;ct_snmp:register_agents/2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#register_usm_users-2&quot;&gt;ct_snmp:register_usm_users/2&lt;/a&gt;&lt;/code&gt; 를 사용하여 사용자, &lt;code&gt;usm_users&lt;/code&gt; 및 관리 에이전트를 나중에 등록 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f64cab62f4fd9209162a8f3f266a24925dc95a0" translate="yes" xml:space="preserve">
          <source>Starts an application with included applications, when synchronization is needed between processes in the different applications during startup.</source>
          <target state="translated">시작하는 동안 다른 응용 프로그램의 프로세스간에 동기화가 필요한 경우 포함 된 응용 프로그램으로 응용 프로그램을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="9a060e6720749e5155082ae66e130d1ae13af3e7" translate="yes" xml:space="preserve">
          <source>Starts an external program. &lt;code&gt;Command&lt;/code&gt; is the name of the external program to be run. &lt;code&gt;Command&lt;/code&gt; runs outside the Erlang work space unless an Erlang driver with the name &lt;code&gt;Command&lt;/code&gt; is found. If found, that driver is started. A driver runs in the Erlang work space, which means that it is linked with the Erlang runtime system.</source>
          <target state="translated">외부 프로그램을 시작합니다. &lt;code&gt;Command&lt;/code&gt; 는 실행할 외부 프로그램의 이름입니다. 이름이 &lt;code&gt;Command&lt;/code&gt; 인 Erlang 드라이버가 없으면 &lt;code&gt;Command&lt;/code&gt; 이 Erlang 작업 공간 외부에서 실행 됩니다. 발견되면 해당 드라이버가 시작됩니다. 드라이버는 Erlang 작업 공간에서 실행되며 이는 Erlang 런타임 시스템과 연결되어 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="94469b7faff35d4d7482bb06cee87f5e9db810a5" translate="yes" xml:space="preserve">
          <source>Starts capturing all text strings printed to &lt;code&gt;stdout&lt;/code&gt; during execution of the test case.</source>
          <target state="translated">테스트 케이스 실행 중 &lt;code&gt;stdout&lt;/code&gt; 으로 인쇄 된 모든 텍스트 문자열 캡처를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="9f304510f569c286b85cc69b6592f01756851dbd" translate="yes" xml:space="preserve">
          <source>Starts heartbeat monitoring of the Erlang runtime system; see &lt;code&gt; heart(3)&lt;/code&gt;.</source>
          <target state="translated">Erlang 런타임 시스템의 하트 비트 모니터링을 시작합니다. &lt;code&gt; heart(3)&lt;/code&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="e7ec85a070f6ce7984961849f61e236a3518fbf3" translate="yes" xml:space="preserve">
          <source>Starts heartbeat monitoring of the Erlang runtime system; see &lt;code&gt;heart(3)&lt;/code&gt;.</source>
          <target state="translated">Erlang 런타임 시스템의 하트 비트 모니터링을 시작합니다. &lt;code&gt;heart(3)&lt;/code&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="c4aa91736e7bddeabeb3758bada8fbe60819b6f6" translate="yes" xml:space="preserve">
          <source>Starts interactive shell mode (described later).</source>
          <target state="translated">대화식 쉘 모드를 시작합니다 (나중에 설명).</target>
        </trans-unit>
        <trans-unit id="7ac47ffc62c753e37eae350aef1af837b8f4278c" translate="yes" xml:space="preserve">
          <source>Starts logging to file, registered name, or &lt;code&gt;io_device&lt;/code&gt;. All reports are printed to the specified destination. Default is &lt;code&gt;standard_io&lt;/code&gt;. Option &lt;code&gt;{start_log, standard_error}&lt;/code&gt; is not allowed and will be replaced by default &lt;code&gt;standard_io&lt;/code&gt;.</source>
          <target state="translated">파일, 등록 된 이름 또는 &lt;code&gt;io_device&lt;/code&gt; 로 로깅을 시작합니다 . 모든 보고서는 지정된 대상으로 인쇄됩니다. 기본값은 &lt;code&gt;standard_io&lt;/code&gt; 입니다. &lt;code&gt;{start_log, standard_error}&lt;/code&gt; 옵션 은 허용되지 않으며 기본 &lt;code&gt;standard_io&lt;/code&gt; 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="6d71cd3e028f21e55ec63fd3f9565341eb3c78d5" translate="yes" xml:space="preserve">
          <source>Starts monitoring a process from a driver. When a process is monitored, a process exit results in a call to the provided &lt;code&gt;&lt;a href=&quot;driver_entry#process_exit&quot;&gt; process_exit&lt;/a&gt;&lt;/code&gt; callback in the &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;ErlDrvEntry&lt;/a&gt;&lt;/code&gt; structure. The &lt;code&gt;ErlDrvMonitor&lt;/code&gt; structure is filled in, for later removal or compare.</source>
          <target state="translated">드라이버에서 프로세스 모니터링을 시작합니다. 프로세스가 모니터링 될 때 프로세스 종료 는 &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;ErlDrvEntry&lt;/a&gt;&lt;/code&gt; 구조 에서 제공된 &lt;code&gt;&lt;a href=&quot;driver_entry#process_exit&quot;&gt; process_exit&lt;/a&gt;&lt;/code&gt; 콜백을 호출합니다 . &lt;code&gt;ErlDrvMonitor&lt;/code&gt; 의 구조는 나중에 제거 또는 비교를 위해, 채워집니다.</target>
        </trans-unit>
        <trans-unit id="5f909fca2608faffdb2b867766fcf669448d759f" translate="yes" xml:space="preserve">
          <source>Starts monitoring a process from a driver. When a process is monitored, a process exit results in a call to the provided &lt;code&gt;&lt;a href=&quot;driver_entry#process_exit&quot;&gt;process_exit&lt;/a&gt;&lt;/code&gt; callback in the &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;ErlDrvEntry&lt;/a&gt;&lt;/code&gt; structure. The &lt;code&gt;ErlDrvMonitor&lt;/code&gt; structure is filled in, for later removal or compare.</source>
          <target state="translated">드라이버에서 프로세스 모니터링을 시작합니다. 프로세스가 모니터 될 때 프로세스 종료 는 &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;ErlDrvEntry&lt;/a&gt;&lt;/code&gt; 구조 에서 제공된 &lt;code&gt;&lt;a href=&quot;driver_entry#process_exit&quot;&gt;process_exit&lt;/a&gt;&lt;/code&gt; 콜백을 호출합니다 . &lt;code&gt;ErlDrvMonitor&lt;/code&gt; 의 구조는 나중에 제거 또는 비교를 위해, 채워집니다.</target>
        </trans-unit>
        <trans-unit id="d58b898c3e4a92861e5140dcc97c1c5126165906" translate="yes" xml:space="preserve">
          <source>Starts monitoring a process from a resource. When a process is monitored, a process exit results in a call to the provided &lt;code&gt;&lt;a href=&quot;#ErlNifResourceDown&quot;&gt; down&lt;/a&gt;&lt;/code&gt; callback associated with the resource type.</source>
          <target state="translated">리소스에서 프로세스 모니터링을 시작합니다. 프로세스가 모니터링되면 프로세스 종료 로 인해 리소스 유형과 관련된 제공된 &lt;code&gt;&lt;a href=&quot;#ErlNifResourceDown&quot;&gt; down&lt;/a&gt;&lt;/code&gt; 콜백 이 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="c2b109ec077023a50e452441512008e020791060" translate="yes" xml:space="preserve">
          <source>Starts monitoring a process from a resource. When a process is monitored, a process exit results in a call to the provided &lt;code&gt;&lt;a href=&quot;#ErlNifResourceDown&quot;&gt;down&lt;/a&gt;&lt;/code&gt; callback associated with the resource type.</source>
          <target state="translated">자원에서 프로세스 모니터링을 시작합니다. 프로세스가 모니터 될 때 프로세스 종료 는 자원 유형과 연관된 제공된 &lt;code&gt;&lt;a href=&quot;#ErlNifResourceDown&quot;&gt;down&lt;/a&gt;&lt;/code&gt; 콜백을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="c6367bafed62c8a9d85484e608eedfc2042b8a13" translate="yes" xml:space="preserve">
          <source>Starts or stops tracing.</source>
          <target state="translated">추적을 시작하거나 중지합니다.</target>
        </trans-unit>
        <trans-unit id="179da7e667df02632db879e9575c5cac843683f0" translate="yes" xml:space="preserve">
          <source>Starts profiling for the processes in &lt;code&gt;Rootset&lt;/code&gt; (and any new processes spawned from them). Information about activity in any profiled process is stored in the Eprof database.</source>
          <target state="translated">&lt;code&gt;Rootset&lt;/code&gt; 의 프로세스 (및 프로세스에서 생성 된 새 프로세스) 에 대한 프로파일 링을 시작합니다 . 프로파일 링 된 프로세스의 활동에 대한 정보는 Eprof 데이터베이스에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="6000aaf61f07cd77216dee10f3ab8d614948e601" translate="yes" xml:space="preserve">
          <source>Starts profiling with zeroed call counters for specified functions by setting call count breakpoints on them.</source>
          <target state="translated">호출 횟수 중단 점을 설정하여 지정된 기능에 대해 호출 카운터가 0 인 프로파일 링을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="b2f21d99cab8cea174f1b178ad06b80bb489d815" translate="yes" xml:space="preserve">
          <source>Starts the &quot;kernel process&quot; &lt;code&gt;Name&lt;/code&gt; by evaluating &lt;code&gt;apply(Mod, Func, Args)&lt;/code&gt;. The start function is to return &lt;code&gt;{ok, Pid}&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt;. The &lt;code&gt;init&lt;/code&gt; process monitors the behavior of &lt;code&gt;Pid&lt;/code&gt; and terminates the system if &lt;code&gt;Pid&lt;/code&gt; dies. Kernel processes are key components of the runtime system. Users do not normally add new kernel processes.</source>
          <target state="translated">&lt;code&gt;apply(Mod, Func, Args)&lt;/code&gt; 를 평가 하여 &quot;커널 프로세스&quot; &lt;code&gt;Name&lt;/code&gt; 을 시작합니다 . 시작 기능은 &lt;code&gt;{ok, Pid}&lt;/code&gt; 를 반환 하거나 &lt;code&gt;ignore&lt;/code&gt; 입니다. &lt;code&gt;init&lt;/code&gt; 프로세스 모니터의 동작 &lt;code&gt;Pid&lt;/code&gt; 면, 시스템 종료 &lt;code&gt;Pid&lt;/code&gt; 죽는다. 커널 프로세스는 런타임 시스템의 핵심 구성 요소입니다. 사용자는 일반적으로 새 커널 프로세스를 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1e9d37968b218c196d847b558f37ea7f92c38537" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;Inets&lt;/code&gt; application. Default type is &lt;code&gt;temporary&lt;/code&gt;. See also &lt;code&gt;application(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; 응용 프로그램을 시작합니다 . 기본 유형은 &lt;code&gt;temporary&lt;/code&gt; 입니다. &lt;code&gt;application(3)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ea4ef9eee3a94c8a4b06896ecc78585826852d3" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;epmd&lt;/code&gt; program with relaxed command checking (mostly for backward compatibility). This affects the following:</source>
          <target state="translated">편안한 명령 검사 (대부분 이전 버전과의 호환성을 위해)로 &lt;code&gt;epmd&lt;/code&gt; 프로그램을 시작합니다 . 이것은 다음에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="8d1b07599eee95054ad675f62689deef55e3582e" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;fprof&lt;/code&gt; server.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 서버를 시작 합니다.</target>
        </trans-unit>
        <trans-unit id="574da9c309370d144dd43761126d49c0926e9f41" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;pg2&lt;/code&gt; server. Normally, the server does not need to be started explicitly, as it is started dynamically if it is needed. This is useful during development, but in a target system the server is to be started explicitly. Use the configuration parameters for &lt;code&gt;kernel(6)&lt;/code&gt; for this.</source>
          <target state="translated">&lt;code&gt;pg2&lt;/code&gt; 서버를 시작 합니다. 일반적으로 서버는 필요한 경우 동적으로 시작되므로 명시 적으로 시작할 필요가 없습니다. 이는 개발 중에 유용하지만 대상 시스템에서 서버를 명시 적으로 시작해야합니다. 이를 위해 &lt;code&gt;kernel(6)&lt;/code&gt; 의 구성 매개 변수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="44a2059dda34d538937f0c7112eb87b5ed3c95a0" translate="yes" xml:space="preserve">
          <source>Starts the Cover server which owns the Cover internal database. This function is called automatically by the other functions in the module.</source>
          <target state="translated">Cover 내부 데이터베이스를 소유 한 Cover 서버를 시작합니다. 이 기능은 모듈의 다른 기능에 의해 자동으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="2576e5a6148a69c85ee88f13279d993436fd68bf" translate="yes" xml:space="preserve">
          <source>Starts the Crashdump Viewer GUI and loads the specified crashdump.</source>
          <target state="translated">Crashdump Viewer GUI를 시작하고 지정된 크래시 덤프를로드합니다.</target>
        </trans-unit>
        <trans-unit id="16622ea244cc7ec9d12ab584d977ad097b7d7420" translate="yes" xml:space="preserve">
          <source>Starts the EUnit server. Normally, you don't need to call this function; it is started automatically.</source>
          <target state="translated">EUnit 서버를 시작합니다. 일반적으로이 함수를 호출 할 필요는 없습니다. 자동으로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="899a01913ddca89bd15fad32669bbfa2fc781608" translate="yes" xml:space="preserve">
          <source>Starts the Eprof server which holds the internal state of the collected data.</source>
          <target state="translated">수집 된 데이터의 내부 상태를 보유하는 Eprof 서버를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="9069eb1d33aaa849bccdbc282245a6ee00e7308e" translate="yes" xml:space="preserve">
          <source>Starts the Erlang runtime system as a hidden node, if it is run as a distributed node. Hidden nodes always establish hidden connections to all other nodes except for nodes in the same global group. Hidden connections are not published on any of the connected nodes, that is, none of the connected nodes are part of the result from &lt;code&gt;nodes/0&lt;/code&gt; on the other node. See also hidden global groups; &lt;code&gt; global_group(3)&lt;/code&gt;.</source>
          <target state="translated">분산 노드로 실행되는 경우 Erlang 런타임 시스템을 숨겨진 노드로 시작합니다. 숨겨진 노드는 항상 동일한 글로벌 그룹의 노드를 제외한 다른 모든 노드에 숨겨진 연결을 설정합니다. 숨겨진 연결은 연결된 노드에 게시되지 않습니다. 즉, 연결된 노드 중 어떤 것도 다른 노드의 &lt;code&gt;nodes/0&lt;/code&gt; 결과에 포함되지 않습니다 . 숨겨진 글로벌 그룹도 참조하십시오. &lt;code&gt; global_group(3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="60ae351aec565f845ef4a3d6c95096aa147fefd0" translate="yes" xml:space="preserve">
          <source>Starts the Erlang runtime system as a hidden node, if it is run as a distributed node. Hidden nodes always establish hidden connections to all other nodes except for nodes in the same global group. Hidden connections are not published on any of the connected nodes, that is, none of the connected nodes are part of the result from &lt;code&gt;nodes/0&lt;/code&gt; on the other node. See also hidden global groups; &lt;code&gt;global_group(3)&lt;/code&gt;.</source>
          <target state="translated">분산 노드로 실행되는 경우 Erlang 런타임 시스템을 숨겨진 노드로 시작합니다. 숨겨진 노드는 항상 동일한 글로벌 그룹의 노드를 제외한 다른 모든 노드에 대한 숨겨진 연결을 설정합니다. 숨겨진 연결은 연결된 노드에 게시되지 않습니다. 즉, 연결된 노드 중 어느 것도 다른 노드의 &lt;code&gt;nodes/0&lt;/code&gt; 결과에 포함되지 않습니다 . 숨겨진 글로벌 그룹도 참조하십시오. &lt;code&gt;global_group(3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dedcace744b807440e83d820164324ecf6f22502" translate="yes" xml:space="preserve">
          <source>Starts the Erlang runtime system detached from the system console. Useful for running daemons and backgrounds processes. Implies &lt;code&gt;-noinput&lt;/code&gt;.</source>
          <target state="translated">시스템 콘솔에서 분리 된 Erlang 런타임 시스템을 시작합니다. 데몬 및 백그라운드 프로세스를 실행하는 데 유용합니다. &lt;code&gt;-noinput&lt;/code&gt; 을 의미 합니다 .</target>
        </trans-unit>
        <trans-unit id="def98c1320baa5942b533df544583e5b51b91f59" translate="yes" xml:space="preserve">
          <source>Starts the Erlang runtime system. This function is called when the emulator is started and coordinates system startup.</source>
          <target state="translated">Erlang 런타임 시스템을 시작합니다. 이 함수는 에뮬레이터가 시작될 때 호출되며 시스템 시작을 조정합니다.</target>
        </trans-unit>
        <trans-unit id="277448e8ce9df100b6cf6861f6f3031811a904de" translate="yes" xml:space="preserve">
          <source>Starts the Megaco application</source>
          <target state="translated">Megaco 응용 프로그램을 시작합니다</target>
        </trans-unit>
        <trans-unit id="10ab183c0317dd2f1527800bcb8b0e1d7859292e" translate="yes" xml:space="preserve">
          <source>Starts the Observer GUI. To stop the tool, close the window.</source>
          <target state="translated">관찰자 GUI를 시작합니다. 공구를 멈추려면 창을 닫으십시오.</target>
        </trans-unit>
        <trans-unit id="b8df47d1e79f68db19208af97b7dce6918a26c78" translate="yes" xml:space="preserve">
          <source>Starts the SNMP application.</source>
          <target state="translated">SNMP 응용 프로그램을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5b0819585b08c5884200ce71cb4b36cb156953d9" translate="yes" xml:space="preserve">
          <source>Starts the SSL application. Default type is &lt;code&gt;temporary&lt;/code&gt;.</source>
          <target state="translated">SSL 응용 프로그램을 시작합니다. 기본 유형은 &lt;code&gt;temporary&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2bd78912e9b365d22c64943d5188d3fb7ec726f0" translate="yes" xml:space="preserve">
          <source>Starts the boot server and links to the caller. This function is used to start the server if it is included in a supervision tree.</source>
          <target state="translated">부팅 서버를 시작하고 발신자에게 연결합니다. 이 기능은 감독 트리에 서버가 포함 된 경우 서버를 시작하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6a6e3991f7abe8df44d1412260f8d53222a13a68" translate="yes" xml:space="preserve">
          <source>Starts the boot server. &lt;code&gt;Slaves&lt;/code&gt; is a list of IP addresses for hosts, which are allowed to use this server as a boot server.</source>
          <target state="translated">부팅 서버를 시작합니다. &lt;code&gt;Slaves&lt;/code&gt; 는이 서버를 부트 서버로 사용할 수있는 호스트의 IP 주소 목록입니다.</target>
        </trans-unit>
        <trans-unit id="dc6c0e63ee596d0378c8969f4752b03283cc8486" translate="yes" xml:space="preserve">
          <source>Starts the default &lt;code&gt;pg&lt;/code&gt; scope within supervision tree. Kernel may be configured to do it automatically, see &lt;code&gt;kernel(6)&lt;/code&gt; configuration manual.</source>
          <target state="translated">감독 트리 내 에서 기본 &lt;code&gt;pg&lt;/code&gt; 범위를 시작합니다 . 커널을 자동으로 구성 할 수 있습니다. &lt;code&gt;kernel(6)&lt;/code&gt; 구성 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8d7dc56165e92731893ca53399e75b335c60782" translate="yes" xml:space="preserve">
          <source>Starts the lock profiler server. The server only act as a medium for the user and performs filtering and printing of data collected by &lt;code&gt;lcnt:collect/1&lt;/code&gt;.</source>
          <target state="translated">잠금 프로파일 러 서버를 시작합니다. 서버는 사용자의 매체 역할 &lt;code&gt;lcnt:collect/1&lt;/code&gt; 의해 수집 된 데이터의 필터링 및 인쇄를 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="9850d976b32c52f9394d252d49a43e4647e02e3a" translate="yes" xml:space="preserve">
          <source>Starts the odbc application. Default type is temporary. &lt;code&gt;See application(3)&lt;/code&gt;</source>
          <target state="translated">odbc 응용 프로그램을 시작합니다. 기본 유형은 임시입니다. &lt;code&gt;See application(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="481130886e0eae2352bf5b8e3bc36316c12f4c82" translate="yes" xml:space="preserve">
          <source>Starts the port mapper daemon.</source>
          <target state="translated">포트 매퍼 데몬을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="f1d0800f9d2a9f41544b48c8a8ea67788405a568" translate="yes" xml:space="preserve">
          <source>Starts the runtime system of the version found.</source>
          <target state="translated">찾은 버전의 런타임 시스템을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="f1292cbe8e81fd70f37a219d8b800f7425c01221" translate="yes" xml:space="preserve">
          <source>Starts the timer server. Normally, the server does not need to be started explicitly. It is started dynamically if it is needed. This is useful during development, but in a target system the server is to be started explicitly. Use configuration parameters for &lt;code&gt;Kernel&lt;/code&gt; for this.</source>
          <target state="translated">타이머 서버를 시작합니다. 일반적으로 서버를 명시 적으로 시작할 필요는 없습니다. 필요한 경우 동적으로 시작됩니다. 이는 개발 중에 유용하지만 대상 시스템에서 서버를 명시 적으로 시작해야합니다. 이를 위해 &lt;code&gt;Kernel&lt;/code&gt; 구성 매개 변수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d00ebd05c02ed0dae949b1ae8996114705f2fa35" translate="yes" xml:space="preserve">
          <source>Starts the transfer of chunks for appending to the file &lt;code&gt;File&lt;/code&gt; at the remote server. If the file does not exist, it is created.</source>
          <target state="translated">원격 서버에서 파일 &lt;code&gt;File&lt;/code&gt; 에 추가하기위한 청크 전송을 시작 합니다. 파일이 없으면 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="1ef772787692b2f75a65b9e1edb4a0ef2c9a0820" translate="yes" xml:space="preserve">
          <source>Starts transfer of chunks into the file &lt;code&gt;File&lt;/code&gt; at the remote server.</source>
          <target state="translated">시작은 파일에 청크 전송 &lt;code&gt;File&lt;/code&gt; 원격 서버에서.</target>
        </trans-unit>
        <trans-unit id="a6e48af9fb89f78a737aac22014faf9f6396b28a" translate="yes" xml:space="preserve">
          <source>Starts transfer of the file &lt;code&gt;RemoteFile&lt;/code&gt; from the remote server.</source>
          <target state="translated">원격 서버에서 &lt;code&gt;RemoteFile&lt;/code&gt; 파일의 전송을 시작 합니다.</target>
        </trans-unit>
        <trans-unit id="2a971662758e82a4387d6fa65437788a16c07668" translate="yes" xml:space="preserve">
          <source>Starts web-based GUI (described later).</source>
          <target state="translated">웹 기반 GUI를 시작합니다 (나중에 설명).</target>
        </trans-unit>
        <trans-unit id="b2dec697be33b0f9b93406658511dccf9ef7d6e1" translate="yes" xml:space="preserve">
          <source>Starts when a fragmented table is created with the function &lt;code&gt;mnesia:create_table/2&lt;/code&gt; or when a normal (unfragmented) table is converted to be a fragmented table with &lt;code&gt;mnesia:change_table_frag/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:create_table/2&lt;/code&gt; 함수를 사용하여 조각화 된 테이블을 작성 하거나 일반 (조각화되지 않은) 테이블이 &lt;code&gt;mnesia:change_table_frag/2&lt;/code&gt; 를 가진 조각화 된 테이블로 변환 될 때 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="0379a8eb0f9246ca239d958203cafdb71be35c0a" translate="yes" xml:space="preserve">
          <source>Starts whenever Mnesia needs to determine which fragment a certain record belongs to. It is typically started at &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">Mnesia가 특정 레코드가 속하는 조각을 결정해야 할 때마다 시작합니다. 일반적으로 &lt;code&gt;read&lt;/code&gt; , &lt;code&gt;write&lt;/code&gt; 및 &lt;code&gt;delete&lt;/code&gt; 에서 시작됩니다 .</target>
        </trans-unit>
        <trans-unit id="99b605da658b65d10cfcadb73da8e8e994cc67f7" translate="yes" xml:space="preserve">
          <source>Startup Files</source>
          <target state="translated">시작 파일</target>
        </trans-unit>
        <trans-unit id="1d27a7f60429e08546be29698be436ff12481f07" translate="yes" xml:space="preserve">
          <source>Startup Procedure</source>
          <target state="translated">시작 절차</target>
        </trans-unit>
        <trans-unit id="e6bfd36e7306106369afe7d8f8e9b03ccbb960be" translate="yes" xml:space="preserve">
          <source>Startup files, log file, and data files</source>
          <target state="translated">시작 파일, 로그 파일 및 데이터 파일</target>
        </trans-unit>
        <trans-unit id="146b9df97eaaa27027d75882c64aee619ecac5b4" translate="yes" xml:space="preserve">
          <source>State :: &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">상태 :: &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="7aac669f035ad757512afde0021d1b9aa78fa563" translate="yes" xml:space="preserve">
          <source>State enter calls are also handled by the event handler and have slightly different arguments. See the section &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">상태 입력 호출은 이벤트 핸들러에 의해 처리되며 약간 다른 인수를 갖습니다. &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b08a36d8080bb27d224de4b7c2d72f9ce6a1d1f8" translate="yes" xml:space="preserve">
          <source>State that is accessible in the continuation call back function.</source>
          <target state="translated">연속 콜백 기능에서 액세스 할 수있는 상태입니다.</target>
        </trans-unit>
        <trans-unit id="d836aba139f55775c8d137a6e52c6ba84e2be3b0" translate="yes" xml:space="preserve">
          <source>State that is accessible in the event call back function.</source>
          <target state="translated">이벤트 콜백 기능에서 액세스 할 수있는 상태입니다.</target>
        </trans-unit>
        <trans-unit id="ed8d5d677e445c86f63f3450e9ce265bb8247603" translate="yes" xml:space="preserve">
          <source>State time-out</source>
          <target state="translated">상태 시간 초과</target>
        </trans-unit>
        <trans-unit id="51a53304bc311a383750e9978a3c0e966f75ecdc" translate="yes" xml:space="preserve">
          <source>State | &lt;code&gt;&lt;a href=&quot;#type-descriptive_error&quot;&gt;descriptive_error()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">상태 | &lt;code&gt;&lt;a href=&quot;#type-descriptive_error&quot;&gt;descriptive_error()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e742a93b1c6d38365b3d1a2c91f9e76120c9503" translate="yes" xml:space="preserve">
          <source>State0 :: &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">State0 :: &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; )-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d58dd1e0755a161b9e61dc35ad7bdc69aabcbbbe" translate="yes" xml:space="preserve">
          <source>Statement ::= Assignment | Expression</source>
          <target state="translated">문 :: = 할당 | 표현</target>
        </trans-unit>
        <trans-unit id="d147756fd7c86028ccf093e0054acc39287e03dc" translate="yes" xml:space="preserve">
          <source>Statically linked to the emulator, which can be an alternative when using the open source distribution of Erlang, or</source>
          <target state="translated">Erlang의 오픈 소스 배포판을 사용할 때 대안이 될 수있는 에뮬레이터에 정적으로 링크</target>
        </trans-unit>
        <trans-unit id="b5345eb3e404449d04020a179a86ac15756f7dfd" translate="yes" xml:space="preserve">
          <source>Status and Trigger Action</source>
          <target state="translated">상태 및 트리거 조치</target>
        </trans-unit>
        <trans-unit id="4aa1ecf928513d0f2c8f7497724e0e18baf96328" translate="yes" xml:space="preserve">
          <source>Status information retrieval from the &lt;code&gt;Port&lt;/code&gt; holding the connection failed.</source>
          <target state="translated">연결을 보유한 &lt;code&gt;Port&lt;/code&gt; 에서 상태 정보를 검색 하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="00f70de9f47a8810a77a81dc808fa1f58184966c" translate="yes" xml:space="preserve">
          <source>Step 1 - Automated Session Reuse</source>
          <target state="translated">1 단계-자동화 된 세션 재사용</target>
        </trans-unit>
        <trans-unit id="cd16502061789631c62a39e2b65bf363bf035162" translate="yes" xml:space="preserve">
          <source>Step 2- Using &lt;code&gt;save&lt;/code&gt; Option</source>
          <target state="translated">2 단계 : &lt;code&gt;save&lt;/code&gt; 옵션 사용</target>
        </trans-unit>
        <trans-unit id="e8af22d2e2e6d48fd452e7fdc45cb3940307a212" translate="yes" xml:space="preserve">
          <source>Step 3 - Explicit Session Reuse</source>
          <target state="translated">3 단계-명시 적 세션 재사용</target>
        </trans-unit>
        <trans-unit id="a5bdb3dab98d0fc2162f8a76d7f3384ccd30fe12" translate="yes" xml:space="preserve">
          <source>Step 3 is repeated by all subagents.</source>
          <target state="translated">모든 하위 에이전트가 3 단계를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="b7d2f017ee2e50b45046bc4ec1741f7feab590b9" translate="yes" xml:space="preserve">
          <source>Step 4 - Not Possible to Reuse Explicit Session by ID Only</source>
          <target state="translated">4 단계-ID만으로 명시 적 세션을 재사용 할 수 없음</target>
        </trans-unit>
        <trans-unit id="8d31bdfed65e6da4bf4e50959ed2f7aa3618e7af" translate="yes" xml:space="preserve">
          <source>Step-by-step execution of test cases</source>
          <target state="translated">테스트 사례의 단계별 실행</target>
        </trans-unit>
        <trans-unit id="67d678ecb114c0beb11c6a84fcb619e0cb4f8d5e" translate="yes" xml:space="preserve">
          <source>Steps through a test case with the debugger.</source>
          <target state="translated">디버거로 테스트 사례를 단계별로 진행합니다.</target>
        </trans-unit>
        <trans-unit id="1f94e1ac6e93066eff71c7d32b221e6b31536f0d" translate="yes" xml:space="preserve">
          <source>Steps through a test case with the debugger. If option &lt;code&gt;config&lt;/code&gt; has been specifed, breakpoints are also set on the configuration functions in &lt;code&gt;Suite&lt;/code&gt;.</source>
          <target state="translated">디버거로 테스트 사례를 단계별로 진행합니다. 옵션 &lt;code&gt;config&lt;/code&gt; 가 지정 되면 &lt;code&gt;Suite&lt;/code&gt; 의 구성 기능에 중단 점이 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="d1a82323c8609261393308aca926f7b6c03de1f0" translate="yes" xml:space="preserve">
          <source>Steps through test cases using the Erlang Debugger (described later).</source>
          <target state="translated">Erlang 디버거를 사용하여 테스트 사례를 단계별로 설명합니다 (나중에 설명).</target>
        </trans-unit>
        <trans-unit id="4d6e1b643fae48290785512dda8ba86db49bc6fa" translate="yes" xml:space="preserve">
          <source>Sticky Locks</source>
          <target state="translated">끈적한 자물쇠</target>
        </trans-unit>
        <trans-unit id="f4758c56fedaa9235a4bfe02d878e39600c60d4f" translate="yes" xml:space="preserve">
          <source>Sticky write locks are a mechanism that can be used to optimize write lock acquisition. If your application uses replicated tables mainly for fault tolerance (as opposed to read access optimization purpose), sticky locks can be the best option available.</source>
          <target state="translated">고정 쓰기 잠금은 쓰기 잠금 획득을 최적화하는 데 사용할 수있는 메커니즘입니다. 애플리케이션이 주로 읽기 허용 최적화 목적과 달리 내결함성을 위해 복제 된 테이블을 사용하는 경우 고정 잠금이 사용 가능한 최상의 옵션이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c3e72d768c74a7fceb812ad53d6b65ffc213e41" translate="yes" xml:space="preserve">
          <source>Stop LTTng tracing and view the result.</source>
          <target state="translated">LTTng 추적을 중지하고 결과를보십시오.</target>
        </trans-unit>
        <trans-unit id="1a90f6134a15d8079a96dd873a903c3e1224eead" translate="yes" xml:space="preserve">
          <source>Stop Server</source>
          <target state="translated">서버 중지</target>
        </trans-unit>
        <trans-unit id="039f1015521371a5e4200cda3bac916d02c11a37" translate="yes" xml:space="preserve">
          <source>Stop a collector process.</source>
          <target state="translated">콜렉터 프로세스를 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="9bab5af53967d1095e1acf806b39919114c37e1c" translate="yes" xml:space="preserve">
          <source>Stop a diameter service.</source>
          <target state="translated">직경 서비스를 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="ff39d1c80ea9985b5295d37db3796216335b8dc8" translate="yes" xml:space="preserve">
          <source>Stop a server or window process</source>
          <target state="translated">서버 또는 창 프로세스 중지</target>
        </trans-unit>
        <trans-unit id="aac42da431976f19707eb5bb512d7495a7138ec4" translate="yes" xml:space="preserve">
          <source>Stop call count tracing for all functions in all modules, and also for all functions in modules to be loaded. This is the same as &lt;code&gt;(stop({'_','_','_'})+stop({on_load}))&lt;/code&gt;.</source>
          <target state="translated">모든 모듈의 모든 기능과로드 할 모듈의 모든 기능에 대한 콜 카운트 추적을 중지합니다. 이는 &lt;code&gt;(stop({'_','_','_'})+stop({on_load}))&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="f32f032a94ae5cfb2922553e34498250c219e07a" translate="yes" xml:space="preserve">
          <source>Stop call count tracing for matching functions in matching modules. The &lt;code&gt;FS&lt;/code&gt; argument can be used to specify the first argument to &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;, for example &lt;code&gt;on_load&lt;/code&gt;. See erlang(3).</source>
          <target state="translated">일치하는 모듈에서 일치하는 기능에 대한 호출 횟수 추적을 중지하십시오. &lt;code&gt;FS&lt;/code&gt; 의 인수에 첫번째 인수 지정하는 데 사용될 수 &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; 예에 대해 &lt;code&gt;on_load&lt;/code&gt; . erlang (3)을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="77a73c19a935a96f9801d4c4f1f86e6a1e50694f" translate="yes" xml:space="preserve">
          <source>Stop microstate accounting. Returns whether is was previously enabled or disabled.</source>
          <target state="translated">소액 회계를 중지하십시오. 이전에 활성화되었는지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="82a9ecda7412fa214b9029314d2337db4fd6b20a" translate="yes" xml:space="preserve">
          <source>Stop receiving incoming messages on the socket.</source>
          <target state="translated">소켓에서 수신 메시지 수신을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="c502883ae7a9e7204f50f522f31edf195b9c9fe9" translate="yes" xml:space="preserve">
          <source>Stop the HTTP client profile:</source>
          <target state="translated">HTTP 클라이언트 프로파일을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="e1372b828b448e6c19ba41741713843d08035adc" translate="yes" xml:space="preserve">
          <source>Stop the diameter application.</source>
          <target state="translated">직경 적용을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="62367b6018cfdca2b2a5c53e9fca8a008e441ff2" translate="yes" xml:space="preserve">
          <source>Stop the network interface process.</source>
          <target state="translated">네트워크 인터페이스 프로세스를 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="fd81b68a1f353397e65a4b1eabc5dffc6fcf0fb8" translate="yes" xml:space="preserve">
          <source>Stop the server with reason &lt;code&gt;Reason&lt;/code&gt;. If the &lt;code&gt;NewData&lt;/code&gt; field is used, first update the server data.</source>
          <target state="translated">이유로 서버 중지 &lt;code&gt;Reason&lt;/code&gt; . 는 IF &lt;code&gt;NewData&lt;/code&gt; 필드가 사용되며, 먼저 서버 데이터를 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffef395da60146c96ad22df81a73e9f7b9191416" translate="yes" xml:space="preserve">
          <source>Stop the tracer.</source>
          <target state="translated">추적기를 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="25393f11049a5dc551d1a80cade60559a0242923" translate="yes" xml:space="preserve">
          <source>StopTime,</source>
          <target state="translated">StopTime,</target>
        </trans-unit>
        <trans-unit id="7f7b974f412dfca8f58293bce94bfe12a1a4171e" translate="yes" xml:space="preserve">
          <source>Stopping a service causes all associated transport connections to be broken. A DPR message will be sent as in the case of &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">서비스를 중지하면 관련된 모든 전송 연결이 끊어집니다. &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt; 의 경우와 같이 DPR 메시지가 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="c87c2d242e2969cedc9e23a4644712bd0fc8b0b8" translate="yes" xml:space="preserve">
          <source>Stopping a service does not remove any associated transports: &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt; must be called to remove transport configuration.</source>
          <target state="translated">서비스를 중지해도 연관된 전송이 제거되지 않습니다 . 전송 구성을 제거하려면 &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt; 를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="6d94822203b3adba9a2b563e418ebd7203a01dfc" translate="yes" xml:space="preserve">
          <source>Stopping the server</source>
          <target state="translated">서버 중지</target>
        </trans-unit>
        <trans-unit id="0d9abc2ec4b99db4f07f9f2f54eea0998763e328" translate="yes" xml:space="preserve">
          <source>Stops (kills) a node.</source>
          <target state="translated">노드를 중지 (킬)합니다.</target>
        </trans-unit>
        <trans-unit id="ca95f7ad8a82d1f522b0079e0b4cd9589d3a62df" translate="yes" xml:space="preserve">
          <source>Stops &lt;code&gt;Application&lt;/code&gt;. The application master calls &lt;code&gt;Module:prep_stop/1&lt;/code&gt;, if such a function is defined, and then tells the top supervisor of the application to shut down (see &lt;code&gt;supervisor(3)&lt;/code&gt;). This means that the entire supervision tree, including included applications, is terminated in reversed start order. After the shutdown, the application master calls &lt;code&gt;Module:stop/1&lt;/code&gt;. &lt;code&gt;Module&lt;/code&gt; is the callback module as defined by the application specification key &lt;code&gt;mod&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Application&lt;/code&gt; 중지 합니다. 이러한 함수가 정의 된 경우 응용 프로그램 마스터는 &lt;code&gt;Module:prep_stop/1&lt;/code&gt; 을 호출 한 다음 응용 프로그램의 최고 감독자에게 종료하도록 &lt;code&gt;supervisor(3)&lt;/code&gt; 참조 ). 즉, 포함 된 응용 프로그램을 포함하여 전체 감독 트리는 시작 순서가 반대로 종료됩니다. 종료 후 애플리케이션 마스터는 &lt;code&gt;Module:stop/1&lt;/code&gt; 을 호출합니다 . &lt;code&gt;Module&lt;/code&gt; 은 응용 프로그램 사양 키 &lt;code&gt;mod&lt;/code&gt; 에 의해 정의 된 콜백 모듈 입니다.</target>
        </trans-unit>
        <trans-unit id="8cf83ce5626a595832beae38a1de7fd4f09f15da" translate="yes" xml:space="preserve">
          <source>Stops &lt;code&gt;nteventlog&lt;/code&gt;. Usually only used during development. The server does not have to be shut down gracefully to maintain its state.</source>
          <target state="translated">&lt;code&gt;nteventlog&lt;/code&gt; 를 중지 합니다. 일반적으로 개발 중에 만 사용됩니다. 상태를 유지하기 위해 서버를 정상적으로 종료 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="e9cc1153946669b7da49488b06502cbfc7ba48a2" translate="yes" xml:space="preserve">
          <source>Stops &lt;code&gt;rb_server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rb_server&lt;/code&gt; 를 중지 합니다 .</target>
        </trans-unit>
        <trans-unit id="ad13039b52044558d08e339bea4b17573a95abe9" translate="yes" xml:space="preserve">
          <source>Stops Debugger.</source>
          <target state="translated">디버거를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="e555260711312cdc7c6d36b63b1e55734b8f6031" translate="yes" xml:space="preserve">
          <source>Stops Mnesia locally on the current node.</source>
          <target state="translated">현재 노드에서 Mnesia를 로컬로 중지합니다.</target>
        </trans-unit>
        <trans-unit id="d502b9ed8eaf05bd136e76804c52902f1139d827" translate="yes" xml:space="preserve">
          <source>Stops a running &lt;code&gt;fprof&lt;/code&gt; trace and clears all tracing from the node. Either option &lt;code&gt;stop&lt;/code&gt; or &lt;code&gt;start&lt;/code&gt; must be specified, but not both.</source>
          <target state="translated">실행중인 &lt;code&gt;fprof&lt;/code&gt; 추적을 중지 하고 노드에서 모든 추적을 지 웁니다. &lt;code&gt;stop&lt;/code&gt; 또는 &lt;code&gt;start&lt;/code&gt; 옵션을 지정해야하지만 둘 다 지정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="c905613219ad37fbf34837132f20e8c02aa1887e" translate="yes" xml:space="preserve">
          <source>Stops a started FTP session.</source>
          <target state="translated">시작된 FTP 세션을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="d30317e01e94d06e917fd3a9f2bb6877b71c61e5" translate="yes" xml:space="preserve">
          <source>Stops a started service of the &lt;code&gt;Inets&lt;/code&gt; application or takes down a &lt;code&gt;stand_alone&lt;/code&gt;-service gracefully. When option &lt;code&gt;stand_alone&lt;/code&gt; is used in start, only the pid is a valid argument to stop.</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; 응용 프로그램 의 시작된 서비스를 중지 하거나 &lt;code&gt;stand_alone&lt;/code&gt; -service를 정상적으로 종료합니다. &lt;code&gt;stand_alone&lt;/code&gt; 옵션 을 시작할 때 pid 만 유효한 인수입니다.</target>
        </trans-unit>
        <trans-unit id="135abf973bb07bdc9fd8ff9e5bb3c30a847ced5e" translate="yes" xml:space="preserve">
          <source>Stops a viewer process.</source>
          <target state="translated">뷰어 프로세스를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="43b9726e77dd3618c0754741aeb77cc9450e62ca" translate="yes" xml:space="preserve">
          <source>Stops all processes using a module &lt;code&gt;Mod&lt;/code&gt; by calling &lt;code&gt;supervisor:terminate_child/2&lt;/code&gt;. This instruction is useful when the simplest way to change code is to stop and restart the processes that run the code.</source>
          <target state="translated">&lt;code&gt;supervisor:terminate_child/2&lt;/code&gt; 를 호출 하여 모듈 &lt;code&gt;Mod&lt;/code&gt; 를 사용하는 모든 프로세스를 중지합니다 . 이 지침은 코드를 변경하는 가장 간단한 방법이 코드를 실행하는 프로세스를 중지했다가 다시 시작하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="629e1bd57d735533259c5d5c4185f604004a72d4" translate="yes" xml:space="preserve">
          <source>Stops all running tests.</source>
          <target state="translated">실행중인 모든 테스트를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="17fb4b38f65a8ddb69910e4323e97e9894aad5c0" translate="yes" xml:space="preserve">
          <source>Stops an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 중지 합니다 .</target>
        </trans-unit>
        <trans-unit id="e537881808e8c38357bb1645973eafdf6b40457e" translate="yes" xml:space="preserve">
          <source>Stops an SFTP channel. Does not close the SSH connection. Use &lt;code&gt;&lt;a href=&quot;ssh#close-1&quot;&gt;ssh:close/1&lt;/a&gt;&lt;/code&gt; to close it.</source>
          <target state="translated">SFTP 채널을 중지합니다. SSH 연결을 닫지 않습니다. &lt;code&gt;&lt;a href=&quot;ssh#close-1&quot;&gt;ssh:close/1&lt;/a&gt;&lt;/code&gt; 을 사용 하여 닫으십시오.</target>
        </trans-unit>
        <trans-unit id="e319adb636cc20e18a55f4f9e28eead6c221e65d" translate="yes" xml:space="preserve">
          <source>Stops capturing text strings (a session started with &lt;code&gt;capture_start/0&lt;/code&gt;).</source>
          <target state="translated">텍스트 문자열 캡처를 중지합니다 ( &lt;code&gt;capture_start/0&lt;/code&gt; 으로 시작된 세션 ).</target>
        </trans-unit>
        <trans-unit id="29739884929921c00e082190c0a73f7760912fbd" translate="yes" xml:space="preserve">
          <source>Stops interpreting all modules. Processes executing in interpreted modules terminate.</source>
          <target state="translated">모든 모듈의 해석을 중지합니다. 해석 된 모듈에서 실행되는 프로세스가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="e66c1a6048504fa19c10e2accd1fb95a929db52b" translate="yes" xml:space="preserve">
          <source>Stops interpreting the selected module. Processes executing in this module terminate.</source>
          <target state="translated">선택한 모듈의 해석을 중지합니다. 이 모듈에서 실행중인 프로세스가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="2d8e4b8df8805c2dd707ba4342abfa844aedd925" translate="yes" xml:space="preserve">
          <source>Stops interpreting the specified module. &lt;code&gt;iq/1&lt;/code&gt; stops interpreting the module only at the current node. &lt;code&gt;inq/1&lt;/code&gt; stops interpreting the module at all known nodes.</source>
          <target state="translated">지정된 모듈의 해석을 중지합니다. &lt;code&gt;iq/1&lt;/code&gt; 은 현재 노드에서만 모듈 해석을 중지합니다. &lt;code&gt;inq/1&lt;/code&gt; 은 알려진 모든 노드에서 모듈 해석을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="7a9284bea6c256701ed98c668faf3ffbfe5b3ade" translate="yes" xml:space="preserve">
          <source>Stops interpreting the specified module. &lt;code&gt;n/1&lt;/code&gt; stops interpreting the module only at the current node. &lt;code&gt;nn/1&lt;/code&gt; stops interpreting the module at all known nodes.</source>
          <target state="translated">지정된 모듈의 해석을 중지합니다. &lt;code&gt;n/1&lt;/code&gt; 은 현재 노드에서만 모듈 해석을 중지합니다. &lt;code&gt;nn/1&lt;/code&gt; 은 알려진 모든 노드에서 모듈 해석을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="9d6ca45447e17351392e0d7969c3980708c5b5a6" translate="yes" xml:space="preserve">
          <source>Stops or allows log events originating from a process that has its group leader on a remote node.</source>
          <target state="translated">원격 노드에서 그룹 리더가있는 프로세스에서 발생하는 로그 이벤트를 중지하거나 허용합니다.</target>
        </trans-unit>
        <trans-unit id="f52061a43a232554522fe3961408156e39ace90c" translate="yes" xml:space="preserve">
          <source>Stops or allows progress reports from &lt;code&gt;supervisor&lt;/code&gt; and &lt;code&gt;application_controller&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; 및 &lt;code&gt;application_controller&lt;/code&gt; 의 진행 보고서를 중지하거나 허용 합니다 .</target>
        </trans-unit>
        <trans-unit id="8779f95ff6ff864d85ede87b4e99e86c9be55442" translate="yes" xml:space="preserve">
          <source>Stops profiling by removing call count breakpoints from specified functions.</source>
          <target state="translated">지정된 함수에서 호출 횟수 중단 점을 제거하여 프로파일 링을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="d5b7eaa3f6a0f791e2066f3cd14348cc255609bb" translate="yes" xml:space="preserve">
          <source>Stops profiling started with &lt;code&gt;start_profiling/1&lt;/code&gt; or &lt;code&gt;profile/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start_profiling/1&lt;/code&gt; 또는 &lt;code&gt;profile/1&lt;/code&gt; 로 시작된 프로파일 링을 중지 합니다.</target>
        </trans-unit>
        <trans-unit id="8a50167510b0c2ad4e89550cbacfaceb1e415b26" translate="yes" xml:space="preserve">
          <source>Stops sending events of type &lt;code&gt;EventCategory&lt;/code&gt; to the caller.</source>
          <target state="translated">&lt;code&gt;EventCategory&lt;/code&gt; 유형의 이벤트를 호출자에게 보내는 것을 중지 합니다.</target>
        </trans-unit>
        <trans-unit id="460ec181f02efacaff3a88ffc17f71e719bbfea0" translate="yes" xml:space="preserve">
          <source>Stops tests on specified nodes.</source>
          <target state="translated">지정된 노드에서 테스트를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="f752f119e42a272067b50974d8fa691e5596c3a6" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;Inets&lt;/code&gt; application. See also &lt;code&gt;application(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; 응용 프로그램을 중지합니다 . &lt;code&gt;application(3)&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d5894b7c2591cd7cf181b8ddc05bb7cab6d6583" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;dbg&lt;/code&gt; server and clears all trace flags for all processes and all local trace patterns for all functions. Also shuts down all trace clients and closes all trace ports.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; 서버를 중지하고 모든 프로세스에 대한 모든 추적 플래그와 모든 기능에 대한 모든 로컬 추적 패턴을 지 웁니다. 또한 모든 추적 클라이언트를 종료하고 모든 추적 포트를 닫습니다.</target>
        </trans-unit>
        <trans-unit id="901a533e9d9184048183f9b0cbe5a848c0dcae3d" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;fprof&lt;/code&gt; server.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 서버를 중지 합니다.</target>
        </trans-unit>
        <trans-unit id="2979c227903c2114972c20f07a917b299413909c" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;ssh&lt;/code&gt; application. For more information, see the &lt;code&gt;application(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; 응용 프로그램을 중지합니다 . 자세한 내용 은 커널 의 &lt;code&gt;application(3)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9d876e9bbe5d9a3e92636183d4a3fdcd76aed4ad" translate="yes" xml:space="preserve">
          <source>Stops the Cover server and unloads all Cover compiled code on the given nodes. Data stored in the Cover database on the remote nodes is fetched and stored on the main node.</source>
          <target state="translated">Cover 서버를 중지하고 지정된 노드에서 모든 Cover 컴파일 된 코드를 언로드합니다. 원격 노드의 Cover 데이터베이스에 저장된 데이터는 페치되어 기본 노드에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="8108116065adad4523941ea63866efd10eadcf25" translate="yes" xml:space="preserve">
          <source>Stops the Cover server and unloads all Cover compiled code.</source>
          <target state="translated">Cover 서버를 중지하고 모든 Cover 컴파일 된 코드를 언로드합니다.</target>
        </trans-unit>
        <trans-unit id="f959f8b61d83f8d6fa60183a7f4ec1c2451316e7" translate="yes" xml:space="preserve">
          <source>Stops the EUnit server. Normally, you don't need to call this function.</source>
          <target state="translated">EUnit 서버를 중지합니다. 일반적으로이 함수를 호출 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="72f25b89489396ee9daeadc62aae0f3e875536f5" translate="yes" xml:space="preserve">
          <source>Stops the Eprof server.</source>
          <target state="translated">Eprof 서버를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="147093ee4f66890cea62bcb1cd5d9fa37fc8c4f5" translate="yes" xml:space="preserve">
          <source>Stops the Megaco application</source>
          <target state="translated">Megaco 응용 프로그램을 중지합니다</target>
        </trans-unit>
        <trans-unit id="51e724d72a8ad3d091ce3c3cb0d9fee02def0611" translate="yes" xml:space="preserve">
          <source>Stops the SNMP manager and/or agent, and removes all files created.</source>
          <target state="translated">SNMP 관리자 및 / 또는 에이전트를 중지하고 작성된 모든 파일을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="1b2f76a2538e4443f69384dde50cd823f6f51efd" translate="yes" xml:space="preserve">
          <source>Stops the SSL application.</source>
          <target state="translated">SSL 애플리케이션을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="3ef82930ec72803adc918a8e6eac4cd72b705c7e" translate="yes" xml:space="preserve">
          <source>Stops the current evaluator process for job number &lt;code&gt;nn&lt;/code&gt; or the current job, but does not kill the shell process. So, any variable bindings and the process dictionary are preserved and the job can be connected again. This command can be used to interrupt an endless loop.</source>
          <target state="translated">작업 번호 &lt;code&gt;nn&lt;/code&gt; 또는 현재 작업에 대한 현재 평가 기 프로세스를 중지 하지만 쉘 프로세스는 종료하지 않습니다. 따라서 모든 변수 바인딩 및 프로세스 사전이 유지되고 작업을 다시 연결할 수 있습니다. 이 명령은 무한 루프를 중단하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b8d15aa311571c18703c7fb305401c4c6cad6f7" translate="yes" xml:space="preserve">
          <source>Stops the execution of a running process, that is, make the process stop at a breakpoint. The command takes effect (visibly) the next time the process receives a message.</source>
          <target state="translated">실행중인 프로세스의 실행을 중지합니다. 즉, 프로세스를 중단 점에서 중지시킵니다. 다음에 프로세스가 메시지를 수신 할 때 명령이 (표시 적으로) 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="7b982df45432b3734416fc057907a698eee9e06b" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with an exception of the specified class, reason, and call stack backtrace (&lt;strong&gt;stacktrace&lt;/strong&gt;).</source>
          <target state="translated">지정된 클래스, 이유 및 호출 스택 역 추적 ( &lt;strong&gt;stacktrace&lt;/strong&gt; )을 제외하고 호출 프로세스의 실행을 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="91422279079cb952fc53cb48b7cffa73686cf498" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with exit reason &lt;code&gt;Reason&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term. As evaluating this function causes the process to terminate, it has no return value. Example:</source>
          <target state="translated">종료 이유 &lt;code&gt;Reason&lt;/code&gt; 으로 호출 프로세스의 실행을 중지합니다 . 여기서 &lt;code&gt;Reason&lt;/code&gt; 은 임의의 용어입니다. 이 함수를 평가하면 프로세스가 종료되므로 리턴 값이 없습니다. 예:</target>
        </trans-unit>
        <trans-unit id="fdd7d7d518346fd296b85e676a982b6a8f1c92aa" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with the reason &lt;code&gt;Reason&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term. The exit reason is &lt;code&gt;{Reason, Where}&lt;/code&gt;, where &lt;code&gt;Where&lt;/code&gt; is a list of the functions most recently called (the current function first). &lt;code&gt;Args&lt;/code&gt; is expected to be the list of arguments for the current function; in Beam it is used to provide the arguments for the current function in the term &lt;code&gt;Where&lt;/code&gt;. As evaluating this function causes the process to terminate, it has no return value.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 이유 (여기서 &lt;code&gt;Reason&lt;/code&gt; 은 임의의 용어 임)로 호출 프로세스의 실행을 중지합니다 . 종료 이유는 &lt;code&gt;{Reason, Where}&lt;/code&gt; 이며, 여기서 &lt;code&gt;Where&lt;/code&gt; 는 가장 최근에 호출 된 함수의 목록입니다 (현재 함수가 먼저). &lt;code&gt;Args&lt;/code&gt; 는 현재 함수에 대한 인수 목록이 될 것으로 예상됩니다. Beam에서는 &lt;code&gt;Where&lt;/code&gt; 라는 용어로 현재 기능에 대한 인수를 제공하는 데 사용됩니다 . 이 함수를 평가하면 프로세스가 종료되므로 리턴 값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="4007536e1c49f46e8cd160560d39457228cf042b" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with the reason &lt;code&gt;Reason&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term. The exit reason is &lt;code&gt;{Reason, Where}&lt;/code&gt;, where &lt;code&gt;Where&lt;/code&gt; is a list of the functions most recently called (the current function first). As evaluating this function causes the process to terminate, it has no return value. Example:</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 이유 (여기서 &lt;code&gt;Reason&lt;/code&gt; 은 임의의 용어 임)로 호출 프로세스의 실행을 중지합니다 . 종료 이유는 &lt;code&gt;{Reason, Where}&lt;/code&gt; 이며, 여기서 &lt;code&gt;Where&lt;/code&gt; 는 가장 최근에 호출 된 함수의 목록입니다 (현재 함수가 먼저). 이 함수를 평가하면 프로세스가 종료되므로 리턴 값이 없습니다. 예:</target>
        </trans-unit>
        <trans-unit id="6f90d0c6b0f3d8ca6a35f37efb0898a2905111cd" translate="yes" xml:space="preserve">
          <source>Stops the listener and all connections started by the listener.</source>
          <target state="translated">리스너와 리스너가 시작한 모든 연결을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="c3e1073472cc279b5ae2a855a49be0bf285255a2" translate="yes" xml:space="preserve">
          <source>Stops the listener, but leaves existing connections started by the listener operational.</source>
          <target state="translated">리스너를 중지하지만 리스너가 시작한 기존 연결을 작동 상태로 둡니다.</target>
        </trans-unit>
        <trans-unit id="0395c0b2fc3e08bbed0a4ffb37bea8dfd62d85e9" translate="yes" xml:space="preserve">
          <source>Stops the lock profiler server.</source>
          <target state="translated">잠금 프로파일 러 서버를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="e4335c2a5c1ca42347443cd087ef6302c70af331" translate="yes" xml:space="preserve">
          <source>Stops the odbc application. &lt;code&gt;See application(3)&lt;/code&gt;</source>
          <target state="translated">odbc 응용 프로그램을 중지합니다. &lt;code&gt;See application(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d9bab507060333a44bed1ffcf78f34fdb53e89e" translate="yes" xml:space="preserve">
          <source>Stops the pool and kills all the slave nodes.</source>
          <target state="translated">풀을 중지하고 모든 슬레이브 노드를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="10c22956f832cff606f980b7320b9b436a5de83f" translate="yes" xml:space="preserve">
          <source>Stops the running Erlang node with name &lt;code&gt;Node&lt;/code&gt; on host &lt;code&gt;Host&lt;/code&gt;.</source>
          <target state="translated">호스트 &lt;code&gt;Host&lt;/code&gt; 에서 이름이 &lt;code&gt;Node&lt;/code&gt; 인 실행중인 Erlang 노드를 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="c0a8165fd6721bdb6ad756d3d1cafea28752ab1e" translate="yes" xml:space="preserve">
          <source>Stops the running Erlang node with name &lt;code&gt;Node&lt;/code&gt; on the local host.</source>
          <target state="translated">로컬 호스트에서 이름이 &lt;code&gt;Node&lt;/code&gt; 인 실행중인 Erlang 노드를 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="83968c4fe88e6b53869a585d2130d4dd6a60bf69" translate="yes" xml:space="preserve">
          <source>Stops the server that saves runtime scenarios.</source>
          <target state="translated">런타임 시나리오를 저장하는 서버를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="9368df75af0a5d44ef58c3a1405a72c68901910c" translate="yes" xml:space="preserve">
          <source>Stops the sub-agent on the node where the function is called. The &lt;code&gt;snmpa_supervisor&lt;/code&gt; must be running.</source>
          <target state="translated">함수가 호출 된 노드에서 서브 에이전트를 중지합니다. &lt;code&gt;snmpa_supervisor&lt;/code&gt; 는 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="1debcdfeaf7581e96bc43a89f2ae6ba6368066f6" translate="yes" xml:space="preserve">
          <source>Stops the tracer process that profiles trace data in runtime. The return value will be value &lt;code&gt;ok&lt;/code&gt; if successful. This option is not allowed with the &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;{file, Filename}&lt;/code&gt; options.</source>
          <target state="translated">런타임시 추적 데이터를 프로파일 링하는 추적 프로그램 프로세스를 중지합니다. 성공하면 반환 값은 &lt;code&gt;ok&lt;/code&gt; 습니다. 이 옵션은 &lt;code&gt;start&lt;/code&gt; , &lt;code&gt;file&lt;/code&gt; 또는 &lt;code&gt;{file, Filename}&lt;/code&gt; 옵션 과 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="386d4243e9ad9035f61e102ca44022677cf8a3b9" translate="yes" xml:space="preserve">
          <source>Stops tracing on all nodes, deletes all trace patterns, and flushes the trace port buffer.</source>
          <target state="translated">모든 노드에서 추적을 중지하고 모든 추적 패턴을 삭제하며 추적 포트 버퍼를 비 웁니다.</target>
        </trans-unit>
        <trans-unit id="ecf184d92ac0d3d11f1052ee50e659431f52e003" translate="yes" xml:space="preserve">
          <source>Stops tracing on all nodes. Logs and trace information files are sent to the trace control node and stored in a directory named &lt;code&gt;ttb_upload_FileName-Timestamp&lt;/code&gt;, where &lt;code&gt;Filename&lt;/code&gt; is the one provided with &lt;code&gt;{file, File}&lt;/code&gt; during trace setup and &lt;code&gt;Timestamp&lt;/code&gt; is of the form &lt;code&gt;yyyymmdd-hhmmss&lt;/code&gt;. Even logs from nodes on the same machine as the trace control node are moved to this directory. The history list is saved to a file named &lt;code&gt;ttb_last_config&lt;/code&gt; for further reference (as it is no longer accessible through history and configuration management functions, like &lt;code&gt;ttb:list_history/0&lt;/code&gt;).</source>
          <target state="translated">모든 노드에서 추적을 중지합니다. 로그 및 추적 정보 파일은 추적 제어 노드로 전송되고 &lt;code&gt;ttb_upload_FileName-Timestamp&lt;/code&gt; 라는 디렉토리에 저장됩니다. 여기서 &lt;code&gt;Filename&lt;/code&gt; 은 추적 설정 중에 &lt;code&gt;{file, File}&lt;/code&gt; 과 함께 제공 되고 &lt;code&gt;Timestamp&lt;/code&gt; 는 &lt;code&gt;yyyymmdd-hhmmss&lt;/code&gt; 형식 입니다. 추적 제어 노드와 동일한 시스템에있는 노드의 로그조차도이 디렉토리로 이동됩니다. 히스토리 목록은 추가 참조를 위해 &lt;code&gt;ttb_last_config&lt;/code&gt; 파일에 저장됩니다 ( &lt;code&gt;ttb:list_history/0&lt;/code&gt; 과 같은 히스토리 및 구성 관리 기능을 통해 더 이상 액세스 할 수 없으므로 ).</target>
        </trans-unit>
        <trans-unit id="b8f5f9ba0647fb66d4142eb11e286a7e1c03fa4e" translate="yes" xml:space="preserve">
          <source>Stops transfer of chunks for appending to the remote server. The file at the remote server, specified in the call to &lt;code&gt;append_chunk_start/2&lt;/code&gt;, is closed by the server.</source>
          <target state="translated">원격 서버에 추가하기위한 청크 전송을 중지합니다. &lt;code&gt;append_chunk_start/2&lt;/code&gt; 호출에 지정된 원격 서버의 파일은 서버에 의해 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="7f299bc5c8dbc72b45c7aa07045bf23a3477f37a" translate="yes" xml:space="preserve">
          <source>Stops transfer of chunks to the remote server. The file at the remote server, specified in the call to &lt;code&gt;send_chunk_start/2&lt;/code&gt; is closed by the server.</source>
          <target state="translated">원격 서버로 청크 전송을 중지합니다. &lt;code&gt;send_chunk_start/2&lt;/code&gt; 에 대한 호출에 지정된 원격 서버의 파일 이 서버에 의해 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="cd741f1b77e8eaea6949b983b6ec8b7f74d6e5b2" translate="yes" xml:space="preserve">
          <source>Store and back up key-value pairs.</source>
          <target state="translated">키-값 쌍을 저장하고 백업하십시오.</target>
        </trans-unit>
        <trans-unit id="55922e278c2a3834475600185c8e4a7f7d136daa" translate="yes" xml:space="preserve">
          <source>Store the PLT at the specified file after building it.</source>
          <target state="translated">PLT를 빌드 한 후 지정된 파일에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="4887831dbac423b8d0659ca08c5f7c1efa077c0c" translate="yes" xml:space="preserve">
          <source>Store the key in a text file named &lt;code&gt;.erlang.crypt&lt;/code&gt;.</source>
          <target state="translated">키를 &lt;code&gt;.erlang.crypt&lt;/code&gt; 라는 텍스트 파일에 저장하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2eadb1978edf9bf2fb82c4d1f5d93f8ba9a8374" translate="yes" xml:space="preserve">
          <source>Store the value &lt;code&gt;Value&lt;/code&gt; as a persistent term and associate it with the key &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; 값 을 영구 용어로 저장하고 &lt;code&gt;Key&lt;/code&gt; 와 연결합니다 .</target>
        </trans-unit>
        <trans-unit id="327f7e222ef735d18249da47cfbace7ad2d747af" translate="yes" xml:space="preserve">
          <source>Stored values are retrieved from the registry as follows:</source>
          <target state="translated">저장된 값은 다음과 같이 레지스트리에서 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="877c428d2db530a5a57f362da9ba05a197475ee8" translate="yes" xml:space="preserve">
          <source>Stores a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; pair in a dictionary. If the &lt;code&gt;Key&lt;/code&gt; already exists in &lt;code&gt;Orddict1&lt;/code&gt;, the associated value is replaced by &lt;code&gt;Value&lt;/code&gt;.</source>
          <target state="translated">사전에 &lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 쌍을 저장합니다 . &lt;code&gt;Key&lt;/code&gt; 가 &lt;code&gt;Orddict1&lt;/code&gt; 에 이미 있으면 연관된 값이 &lt;code&gt;Value&lt;/code&gt; 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="5240b8af10b81e18a0a9ffb7e537d54cc8686ed4" translate="yes" xml:space="preserve">
          <source>Stores a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; pair in dictionary &lt;code&gt;Dict2&lt;/code&gt;. If &lt;code&gt;Key&lt;/code&gt; already exists in &lt;code&gt;Dict1&lt;/code&gt;, the associated value is replaced by &lt;code&gt;Value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 쌍을 사전 &lt;code&gt;Dict2&lt;/code&gt; 에 저장합니다 . &lt;code&gt;Dict1&lt;/code&gt; 에 &lt;code&gt;Key&lt;/code&gt; 가 이미 있으면 연관된 값이 &lt;code&gt;Value&lt;/code&gt; 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="f8f349ae2da0c0b55816e7771c375dfda4bc3b49" translate="yes" xml:space="preserve">
          <source>Stores the provided data for further retrieval. It is important to realize that the data storage used must not be affected by the node crash.</source>
          <target state="translated">추가 검색을 위해 제공된 데이터를 저장합니다. 사용 된 데이터 스토리지가 노드 충돌의 영향을 받아서는 안된다는 것을 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="4e4b0ddfb4c167975df80f4c82b6cb2eded27a36" translate="yes" xml:space="preserve">
          <source>Storing Huge Persistent Terms</source>
          <target state="translated">거대한 영구 용어 저장</target>
        </trans-unit>
        <trans-unit id="bb4b1cc92a13eeaad29893037d4bcc9d57d9141b" translate="yes" xml:space="preserve">
          <source>Storing Strings and Binaries</source>
          <target state="translated">문자열과 바이너리 저장</target>
        </trans-unit>
        <trans-unit id="3e9f14f5cd469da7e366e0600dedd6ed27268440" translate="yes" xml:space="preserve">
          <source>Storing an atom to indicate a logging level or whether debugging is turned on.</source>
          <target state="translated">로깅 수준 또는 디버깅이 켜져 있는지 여부를 나타내는 원자를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="ba2dd81ce8874ecfd40aa5d1ecefd53dad79d4d6" translate="yes" xml:space="preserve">
          <source>Storing of configuration data that must be easily accessible by all processes.</source>
          <target state="translated">모든 프로세스에서 쉽게 액세스 할 수 있어야하는 구성 데이터 저장.</target>
        </trans-unit>
        <trans-unit id="af42a1ead50bec44570afe4c08e0561598a853bf" translate="yes" xml:space="preserve">
          <source>Storing of references for NIF resources.</source>
          <target state="translated">NIF 리소스에 대한 참조 저장.</target>
        </trans-unit>
        <trans-unit id="49d9a62e360d845120f47e145aa20c946f67d76d" translate="yes" xml:space="preserve">
          <source>Storing of references for efficient counters.</source>
          <target state="translated">효율적인 카운터를위한 참조 저장.</target>
        </trans-unit>
        <trans-unit id="41497ecb15ba568974e439fbe57b6142d4c43073" translate="yes" xml:space="preserve">
          <source>Storing or updating a term (using &lt;code&gt;&lt;a href=&quot;#put-2&quot;&gt;put/2&lt;/a&gt;&lt;/code&gt;) is proportional to the number of already created persistent terms because the hash table holding the keys will be copied. In addition, the term itself will be copied.</source>
          <target state="translated">용어 저장 또는 업데이트 ( &lt;code&gt;&lt;a href=&quot;#put-2&quot;&gt;put/2&lt;/a&gt;&lt;/code&gt; 사용 )는 키를 포함하는 해시 테이블이 복사되기 때문에 이미 생성 된 영구 용어 수에 비례합니다. 또한 용어 자체가 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="2bb5f27e3aec1699c729998a9ff996dd5c81ad27" translate="yes" xml:space="preserve">
          <source>Strategy: Do not search for a fit, inspect only one free block to see if it satisfies the request. This strategy is only intended to be used for temporary allocations.</source>
          <target state="translated">전략 : 피팅을 검색하지 말고 자유 블록을 하나만 검사하여 요청을 충족하는지 확인하십시오. 이 전략은 임시 할당에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6c50c1fa5a5445533422460f66a67a0c5e7ad76d" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;carrier&lt;/strong&gt; with the lowest address that can satisfy the requested block size, then find a block within that carrier using the &quot;address order best fit&quot; strategy.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족할 수있는 가장 낮은 주소 의 &lt;strong&gt;캐리어&lt;/strong&gt; 를 찾은 다음 &quot;주소 순서에 가장 적합&quot;전략을 사용하여 해당 캐리어 내에서 블록을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="c0898af4b89cfc68c62ddd64be3608ef0887164d" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;carrier&lt;/strong&gt; with the lowest address that can satisfy the requested block size, then find a block within that carrier using the &quot;best fit&quot; strategy.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족할 수있는 가장 낮은 주소 의 &lt;strong&gt;캐리어&lt;/strong&gt; 를 찾은 다음 &quot;최 적합&quot;전략을 사용하여 해당 캐리어 내에서 블록을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="953d782201c39277ca3699ca389e05e45af21107" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;oldest carrier&lt;/strong&gt; that can satisfy the requested block size, then find a block within that carrier using the &quot;address order best fit&quot; strategy.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족할 수 있는 &lt;strong&gt;가장 오래된 캐리어&lt;/strong&gt; 를 찾은 다음 &quot;주소 순서에 가장 적합&quot;전략을 사용하여 해당 캐리어 내에서 블록을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="088cb0a38c455433ecf8104c274d76a2bc0ff6de" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;oldest carrier&lt;/strong&gt; that can satisfy the requested block size, then find a block within that carrier using the &quot;address order first fit&quot; strategy.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족할 수 있는 &lt;strong&gt;가장 오래된 캐리어&lt;/strong&gt; 를 찾은 다음 &quot;주소 순서 우선 맞춤&quot;전략을 사용하여 해당 캐리어 내에서 블록을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="f8a8979b9e4c554bce63a7e277dfc4977bcb5b81" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;oldest carrier&lt;/strong&gt; that can satisfy the requested block size, then find a block within that carrier using the &quot;best fit&quot; strategy.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족할 수 있는 &lt;strong&gt;가장 오래된 캐리어&lt;/strong&gt; 를 찾은 다음 &quot;최 적합&quot;전략을 사용하여 해당 캐리어 내에서 블록을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="6279ffa4297b30182dc5202b001cb1dfc83a3bb5" translate="yes" xml:space="preserve">
          <source>Strategy: Find the block with the lowest address satisfying the requested block size.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족하는 가장 낮은 주소의 블록을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="fd04785e47c956a9f5fba602264a5dd14a34605a" translate="yes" xml:space="preserve">
          <source>Strategy: Find the smallest block satisfying the requested block size.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족하는 가장 작은 블록을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="44a887b6549779200c93196b47117dc9e9fd22f9" translate="yes" xml:space="preserve">
          <source>Strategy: Find the smallest block satisfying the requested block size. If multiple blocks are found, choose the one with the lowest address.</source>
          <target state="translated">전략 : 요청 된 블록 크기를 만족하는 가장 작은 블록을 찾으십시오. 여러 블록이 발견되면 가장 낮은 주소를 가진 블록을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="657b8318e9423de7a8d3e2e9ef2f190f7d6a01fe" translate="yes" xml:space="preserve">
          <source>Strategy: Try to find the best fit, but settle for the best fit found during a limited search.</source>
          <target state="translated">전략 : 가장 적합한 것을 찾으십시오. 그러나 제한된 검색 중에 찾은 가장 적합한 것을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="6e2468579e888156845cdf95a718fdd7fbffc72f" translate="yes" xml:space="preserve">
          <source>Stream information as returned by &lt;code&gt;&lt;a href=&quot;#get_event_streams-1&quot;&gt;get_event_streams/1-3&lt;/a&gt;&lt;/code&gt;. See RFC 5277, &quot;XML Schema for Event Notifications&quot;, for detail on the format of the string values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#get_event_streams-1&quot;&gt;get_event_streams/1-3&lt;/a&gt;&lt;/code&gt; 에서 반환 된 스트림 정보 . 문자열 값의 형식에 대한 자세한 내용은 RFC 5277, &quot;이벤트 알림을위한 XML 스키마&quot;를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5fcdff9196474123b66108d821dc8c835b72a528" translate="yes" xml:space="preserve">
          <source>Stream number (0-base) within the association to send the messages through;</source>
          <target state="translated">메시지를 전송하기 위해 연관 내의 스트림 번호 (0-base);</target>
        </trans-unit>
        <trans-unit id="032322e337daa5362eff97379f0768caa1c4a70b" translate="yes" xml:space="preserve">
          <source>Stream,</source>
          <target state="translated">Stream,</target>
        </trans-unit>
        <trans-unit id="14c7fe8eb4bedf847bae92f16bee1373dae3ee7d" translate="yes" xml:space="preserve">
          <source>Streams the body of a 200 or 206 response to the calling process or to a file. When streaming to the calling process using option &lt;code&gt;self&lt;/code&gt;, the following stream messages are sent to that process: &lt;code&gt;{http, {RequestId, stream_start, Headers}}, {http, {RequestId, stream, BinBodyPart}}, and {http, {RequestId, stream_end, Headers}}&lt;/code&gt;.</source>
          <target state="translated">200 또는 206 응답의 본문을 호출 프로세스 또는 파일로 스트리밍합니다. &lt;code&gt;self&lt;/code&gt; 옵션을 사용하여 호출 프로세스로 스트리밍하면 &lt;code&gt;{http, {RequestId, stream_start, Headers}}, {http, {RequestId, stream, BinBodyPart}}, and {http, {RequestId, stream_end, Headers}}&lt;/code&gt; 같은 스트림 메시지가 해당 프로세스로 전송됩니다. , stream_end, 헤더}} .</target>
        </trans-unit>
        <trans-unit id="9a376bfef88f4a5837ec22e75ca9bb2ad71a85ca" translate="yes" xml:space="preserve">
          <source>Strict version control, i.e. when a message is received, verify that the version is that which was negotiated.</source>
          <target state="translated">엄격한 버전 제어 (예 : 메시지 수신시) 버전이 협상 된 버전인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a96509cca7de94a89b53cb4e36058d9b9c30522d" translate="yes" xml:space="preserve">
          <source>Strictly Monotonically Increasing</source>
          <target state="translated">엄격하게 단조롭게 증가</target>
        </trans-unit>
        <trans-unit id="48c954c05304b9e81c5d975679386755a836c64c" translate="yes" xml:space="preserve">
          <source>Strictly as it appears in the &lt;code&gt;boot script&lt;/code&gt;, or</source>
          <target state="translated">&lt;code&gt;boot script&lt;/code&gt; 에 표시된대로 엄격하게 또는</target>
        </trans-unit>
        <trans-unit id="9c8e1fe6c3b86d4950a4f14e9e1b7a58807d6feb" translate="yes" xml:space="preserve">
          <source>Strictly monotonically increasing values are inherently quite expensive to generate and scales poorly. This is because the values need to be synchronized between CPU cores. That is, do not pass the &lt;code&gt;monotonic&lt;/code&gt; modifier unless you really need strictly monotonically increasing values.</source>
          <target state="translated">엄격하게 단조 증가하는 값은 본질적으로 생성하는 데 비용이 많이 들고 스케일이 잘못됩니다. CPU 코어간에 값을 동기화해야하기 때문입니다. 즉, 단조 증가하는 값이 꼭 필요한 경우가 아니면 &lt;code&gt;monotonic&lt;/code&gt; 수정자를 전달하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="34e63cef9636b51db449734a3cb5f4c085f07fd5" translate="yes" xml:space="preserve">
          <source>String (is the same as a list of integers)</source>
          <target state="translated">문자열 (정수 목록과 동일)</target>
        </trans-unit>
        <trans-unit id="ce73e02f376fb0c5973feb5fb1edd68768c44744" translate="yes" xml:space="preserve">
          <source>String Prefix in Patterns</source>
          <target state="translated">패턴의 문자열 접두사</target>
        </trans-unit>
        <trans-unit id="934057934111f63420c118444d17649ac90f696e" translate="yes" xml:space="preserve">
          <source>String and Character Literals</source>
          <target state="translated">문자열 및 문자 리터럴</target>
        </trans-unit>
        <trans-unit id="d118085e29d4750504557a8145b47af2cb2659cf" translate="yes" xml:space="preserve">
          <source>String containing the user's password. Only used if the private keyfile is password-protected.</source>
          <target state="translated">사용자 비밀번호가 포함 된 문자열입니다. 개인 키 파일이 비밀번호로 보호 된 경우에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="59ef56804edeb88e3ae1bcc6b7e688b7402b030a" translate="yes" xml:space="preserve">
          <source>String does &lt;strong&gt;not&lt;/strong&gt; have a corresponding Erlang representation, but is an optimization for sending lists of bytes (integer in the range 0-255) more efficiently over the distribution. As field &lt;code&gt;Length&lt;/code&gt; is an unsigned 2 byte integer (big-endian), implementations must ensure that lists longer than 65535 elements are encoded as &lt;code&gt;&lt;a href=&quot;#LIST_EXT&quot;&gt;LIST_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">문자열 않습니다 &lt;strong&gt;하지&lt;/strong&gt; 상응하는 얼랑 표현을 가지고 있지만, 유통을 통해보다 효율적으로 (0 ~ 255의 범위에서 정수) 바이트의 목록을 보내기위한 최적화입니다. 필드 &lt;code&gt;Length&lt;/code&gt; 는 부호없는 2 바이트 정수 (빅 엔디안)이므로 구현시 65535보다 긴 요소가 &lt;code&gt;&lt;a href=&quot;#LIST_EXT&quot;&gt;LIST_EXT&lt;/a&gt;&lt;/code&gt; 로 인코딩되도록 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="059d063f4edd2896cbea701659c169723f6c691b" translate="yes" xml:space="preserve">
          <source>String handling can be slow if done improperly. In Erlang, you need to think a little more about how the strings are used and choose an appropriate representation. If you use regular expressions, use the &lt;code&gt;re&lt;/code&gt; module in STDLIB instead of the obsolete &lt;code&gt;regexp&lt;/code&gt; module.</source>
          <target state="translated">잘못 처리하면 문자열 처리가 느려질 수 있습니다. Erlang에서는 문자열이 어떻게 사용되는지에 대해 조금 더 생각하고 적절한 표현을 선택해야합니다. 정규식을 사용하는 경우 사용되지 않는 &lt;code&gt;regexp&lt;/code&gt; 모듈 대신 STDLIB 에서 &lt;code&gt;re&lt;/code&gt; 모듈을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab7791e7c77db49941bf49b683f3c9df1fec0bac" translate="yes" xml:space="preserve">
          <source>String processing functions.</source>
          <target state="translated">문자열 처리 기능.</target>
        </trans-unit>
        <trans-unit id="7073c72847419cc61b613d7b0ddbaa7534b00711" translate="yes" xml:space="preserve">
          <source>String | Binary (configurable)</source>
          <target state="translated">문자열 | 이진 (구성 가능)</target>
        </trans-unit>
        <trans-unit id="74d55dbdca8b484ae2bf6a9ace6819676c736d3c" translate="yes" xml:space="preserve">
          <source>Strings are enclosed in double quotes (&quot;), but is not a data type in Erlang. Instead, a string &lt;code&gt;&quot;hello&quot;&lt;/code&gt; is shorthand for the list &lt;code&gt;[$h,$e,$l,$l,$o]&lt;/code&gt;, that is, &lt;code&gt;[104,101,108,108,111]&lt;/code&gt;.</source>
          <target state="translated">문자열은 큰 따옴표 ( &quot;)로 묶지 만 Erlang의 데이터 유형은 아닙니다. 대신 문자열 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; 는 목록 &lt;code&gt;[$h,$e,$l,$l,$o]&lt;/code&gt; 줄임말 입니다. , &lt;code&gt;[104,101,108,108,111]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38229828f5ce707e9c637d7e4f9c75370c8f2483" translate="yes" xml:space="preserve">
          <source>Strings in the template are printed literally.</source>
          <target state="translated">템플릿의 문자열은 그대로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="f9dab1696115bedd1587cdcd962fbaa87eb8dd52" translate="yes" xml:space="preserve">
          <source>Strings starting with &lt;code&gt;&quot;'@&lt;/code&gt;, for example &lt;code&gt;&quot;'@File&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;'@&lt;/code&gt; 시작하는 문자열 ( 예 &lt;code&gt;&quot;'@File&quot;&lt;/code&gt; &quot;'@ File &quot;</target>
        </trans-unit>
        <trans-unit id="57df87fb39970ecfe64667610e08517b0f8ba060" translate="yes" xml:space="preserve">
          <source>Strings, other than &lt;code&gt;&quot;Z&quot;&lt;/code&gt;, &lt;code&gt;&quot;z&quot;&lt;/code&gt;, or &lt;code&gt;&quot;&quot;&lt;/code&gt;, must be on the form &lt;code&gt;&amp;plusmn;[hh]:[mm]&lt;/code&gt;, for example &lt;code&gt;&quot;-02:00&quot;&lt;/code&gt; or &lt;code&gt;&quot;+00:00&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;Z&quot;&lt;/code&gt; , &lt;code&gt;&quot;z&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 이외의 문자열 은 &lt;code&gt;&amp;plusmn;[hh]:[mm]&lt;/code&gt; 형식이어야합니다 ( 예 &lt;code&gt;&quot;-02:00&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;+00:00&quot;&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="ff45adb38fefec5f9f9119da2b6a8be7c494888b" translate="yes" xml:space="preserve">
          <source>Structure written by &lt;code&gt;&lt;a href=&quot;#ei_decode_ei_term&quot;&gt;ei_decode_ei_term()&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;ei_type&lt;/code&gt; field is the type of the term which equals to what &lt;code&gt;&lt;a href=&quot;#ei_get_type&quot;&gt;ei_get_type()&lt;/a&gt;&lt;/code&gt; sets &lt;code&gt;*type&lt;/code&gt; to.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ei_decode_ei_term&quot;&gt;ei_decode_ei_term()&lt;/a&gt;&lt;/code&gt; 의해 작성된 구조 . &lt;code&gt;ei_type&lt;/code&gt; 의 필드는 무엇을 동일 용어의 유형입니다 &lt;code&gt;&lt;a href=&quot;#ei_get_type&quot;&gt;ei_get_type()&lt;/a&gt;&lt;/code&gt; 세트 &lt;code&gt;*type&lt;/code&gt; 에.</target>
        </trans-unit>
        <trans-unit id="b5570cbce59d54b3e8e89f954758052e0ea23cd1" translate="yes" xml:space="preserve">
          <source>Stub module files are created for those modules that are to be exported by the target module (see options &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;stub_dir&lt;/code&gt;).</source>
          <target state="translated">스텁 모듈 파일은 대상 모듈에서 내보낼 모듈에 대해 작성됩니다 ( &lt;code&gt;export&lt;/code&gt; , &lt;code&gt;stubs&lt;/code&gt; 및 &lt;code&gt;stub_dir&lt;/code&gt; 옵션 참조 ).</target>
        </trans-unit>
        <trans-unit id="db2cf9d107c5a79e75ca3fa12c082098b033a749" translate="yes" xml:space="preserve">
          <source>Stub modules will automatically be created (see the &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;stub_dir&lt;/code&gt; options below) for each module that is renamed. These can be used to redirect any calls still using the old module names. The stub files are created in the same directory as the source file (typically overwriting the original file).</source>
          <target state="translated">이름이 바뀐 각 모듈에 대해 스텁 모듈이 자동으로 작성됩니다 ( 아래 &lt;code&gt;stubs&lt;/code&gt; 및 &lt;code&gt;stub_dir&lt;/code&gt; 옵션 참조). 이전 모듈 이름을 사용하는 통화를 재전송하는 데 사용할 수 있습니다. 스텁 파일은 소스 파일과 동일한 디렉토리에 작성됩니다 (일반적으로 원본 파일을 겹쳐 씁니다).</target>
        </trans-unit>
        <trans-unit id="4ca257e1525674f4f984164e97623ebf24612def" translate="yes" xml:space="preserve">
          <source>Style sheets can also be installed on a per suite and per test case basis.</source>
          <target state="translated">스타일 시트는 스위트 및 테스트 사례별로 설치할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4034adb44b9bee0dad05d82c761d77ccbea4e6e2" translate="yes" xml:space="preserve">
          <source>Sub Binaries</source>
          <target state="translated">하위 바이너리</target>
        </trans-unit>
        <trans-unit id="f75ee601c4bca44d53eeba5a2dd7ecbd21deeffc" translate="yes" xml:space="preserve">
          <source>Sub-agent Path</source>
          <target state="translated">하위 에이전트 경로</target>
        </trans-unit>
        <trans-unit id="0e3cd3b3663e36b6010fa328e4878eaf1bb09c78" translate="yes" xml:space="preserve">
          <source>Sub-agents and dependencies</source>
          <target state="translated">서브 에이전트 및 종속성</target>
        </trans-unit>
        <trans-unit id="90d7d767804a80af239bef8ee766d71a4944c07e" translate="yes" xml:space="preserve">
          <source>Sub-agents are only needed if your application requires special support for distribution from the SNMP toolkit. A sub-agent can also be used if the application requires a more complex set transaction scheme than is found in the master agent.</source>
          <target state="translated">서브 에이전트는 응용 프로그램에 SNMP 툴킷에서 분배를위한 특별한 지원이 필요한 경우에만 필요합니다. 응용 프로그램이 마스터 에이전트에서 발견되는 것보다 더 복잡한 세트 트랜잭션 체계를 요구하는 경우 서브 에이전트를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5055cc4d96f14720694a56d07a68ee7980c81af5" translate="yes" xml:space="preserve">
          <source>Sub-agents are used for the following reasons:</source>
          <target state="translated">하위 에이전트는 다음과 같은 이유로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9b6045ebe7d947335fe83f7f64672894d696d0bd" translate="yes" xml:space="preserve">
          <source>Sub-agents can also have sub-agents. Each sub-agent can have an arbitrary number of child sub-agents registered, forming a hierarchy.</source>
          <target state="translated">하위 에이전트는 하위 에이전트를 가질 수도 있습니다. 각 하위 에이전트는 임의의 수의 하위 하위 에이전트를 등록하여 계층을 형성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ac63ce8e1d74adcfdfbe2ca29ab772206b57ae0" translate="yes" xml:space="preserve">
          <source>Subpatterns are delimited by parentheses (round brackets), which can be nested. Turning part of a pattern into a subpattern does two things:</source>
          <target state="translated">하위 패턴은 괄호 (둥글 대괄호)로 구분되며 중첩 될 수 있습니다. 패턴의 일부를 서브 패턴으로 바꾸는 것은 두 가지 일을합니다 :</target>
        </trans-unit>
        <trans-unit id="a820e243668b15a93364d75cb27a52bf2716a1a1" translate="yes" xml:space="preserve">
          <source>Subscribe to &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; messages from a service.</source>
          <target state="translated">서비스의 &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; 메시지를 구독하십시오 .</target>
        </trans-unit>
        <trans-unit id="49f060764145c09021e9ae846a9e90442c5fb5e4" translate="yes" xml:space="preserve">
          <source>Subscribe to node status change messages for both visible and hidden nodes. The tuple &lt;code&gt;{node_type, visible | hidden}&lt;/code&gt; is included in &lt;code&gt;InfoList&lt;/code&gt;.</source>
          <target state="translated">보이는 노드와 숨겨진 노드 모두에 대한 노드 상태 변경 메시지를 구독합니다. 튜플 &lt;code&gt;{node_type, visible | hidden}&lt;/code&gt; 이 &lt;code&gt;InfoList&lt;/code&gt; 에 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="928a7f14face133bf1a5d5c5ab3ba7234d171192" translate="yes" xml:space="preserve">
          <source>Subscribe to node status change messages for hidden nodes only. The tuple &lt;code&gt;{node_type, hidden}&lt;/code&gt; is included in &lt;code&gt;InfoList&lt;/code&gt;.</source>
          <target state="translated">숨겨진 노드에 대해서만 노드 상태 변경 메시지를 구독하십시오. 튜플 &lt;code&gt;{node_type, hidden}&lt;/code&gt; 은 &lt;code&gt;InfoList&lt;/code&gt; 에 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e29b065f6418ba8f113a030561ebffc2353317d" translate="yes" xml:space="preserve">
          <source>Subscribe to node status change messages for visible nodes only. The tuple &lt;code&gt;{node_type, visible}&lt;/code&gt; is included in &lt;code&gt;InfoList&lt;/code&gt;.</source>
          <target state="translated">보이는 노드에 대해서만 노드 상태 변경 메시지를 구독하십시오. 튜플 &lt;code&gt;{node_type, visible}&lt;/code&gt; 은 &lt;code&gt;InfoList&lt;/code&gt; 에 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7eeb3cfb3316bcf069c616fd3d9feb459ed3e566" translate="yes" xml:space="preserve">
          <source>Subscriptions are not triggered and no checkpoints are updated, but this operation is blindingly fast. Disc resident tables are not to be updated with the &lt;code&gt;ets&lt;/code&gt; function, as the disc is not updated.</source>
          <target state="translated">구독이 트리거되지 않고 체크 포인트가 업데이트되지 않지만이 작업은 맹목적으로 빠릅니다. 디스크가 업데이트되지 않기 때문에 디스크 상주 테이블은 &lt;code&gt;ets&lt;/code&gt; 기능으로 업데이트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="433c536aabeab0d4376379abd1511ea5ccc8273f" translate="yes" xml:space="preserve">
          <source>Subsequent calls to &lt;code&gt;allow/1&lt;/code&gt; will add the specified nodes to the list of allowed nodes. It is not possible to remove nodes from the list.</source>
          <target state="translated">&lt;code&gt;allow/1&lt;/code&gt; 에 대한 후속 호출 은 지정된 노드를 허용 된 노드 목록에 추가합니다. 목록에서 노드를 제거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="98c371de37ef5b00542c424b2f24ba4d88b3c58c" translate="yes" xml:space="preserve">
          <source>Subsequent calls to this function overwrites previous data set. To update existing data instead of overwriting it, see &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt; update_process_metadata/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 함수에 대한 후속 호출은 이전 데이터 세트를 덮어 씁니다. 덮어 쓰지 않고 기존 데이터를 업데이트하려면 &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt; update_process_metadata/1&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b5948f4a8c2efd083dca1a5d8f87dd377c41053" translate="yes" xml:space="preserve">
          <source>Subsequent calls to this function overwrites previous data set. To update existing data instead of overwriting it, see &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 함수에 대한 후속 호출은 이전 데이터 세트를 겹쳐 씁니다. 기존 데이터를 덮어 쓰지 않고 업데이트하려면 &lt;code&gt;&lt;a href=&quot;#update_process_metadata-1&quot;&gt;update_process_metadata/1&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b62f60ecebed480c0f7cf1234a4d74b31ff5ce6" translate="yes" xml:space="preserve">
          <source>Subsequently, these types can be used to specify types of record fields and also the argument and return types of functions.</source>
          <target state="translated">결과적으로 이러한 유형을 사용하여 레코드 필드 유형과 인수 및 리턴 유형 함수를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb7698f2ce2f777969263d3a8ba0cef76e027f42" translate="yes" xml:space="preserve">
          <source>Subsets of test cases, called test case groups, can also be defined. A test case group can have execution properties associated with it. Execution properties specify if the test cases in the group are to be executed in random order, in parallel, or in sequence, and if the execution of the group is to be repeated. Test case groups can also be nested (that is, a group can, besides test cases, contain subgroups).</source>
          <target state="translated">테스트 사례 그룹이라고하는 테스트 사례의 하위 집합도 정의 할 수 있습니다. 테스트 케이스 그룹에는 연관된 실행 특성이있을 수 있습니다. 실행 속성은 그룹의 테스트 사례를 임의의 순서로, 병렬 또는 순서대로 실행할지 여부와 그룹의 실행을 반복할지 여부를 지정합니다. 테스트 사례 그룹을 중첩 할 수도 있습니다 (즉, 테스트 사례 외에 그룹에 하위 그룹을 포함 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="2a8724dcdb51c1cfe957da926417b908e509eba3" translate="yes" xml:space="preserve">
          <source>Substitute metavariables in a pattern or list of patterns, yielding a syntax tree or list of trees as result. Both for normal metavariables and glob metavariables, the substituted value may be a single element or a list of elements. For example, if a list representing &lt;code&gt;1, 2, 3&lt;/code&gt; is substituted for &lt;code&gt;var&lt;/code&gt; in either of &lt;code&gt;[foo, _@var, bar]&lt;/code&gt; or &lt;code&gt;[foo, _@var, bar]&lt;/code&gt;, the result represents &lt;code&gt;[foo, 1, 2, 3, bar]&lt;/code&gt;.</source>
          <target state="translated">패턴 또는 패턴 목록에서 메타 변수를 대체하여 구문 트리 또는 트리 목록을 생성합니다. 정규 메타 변수와 glob 메타 변수의 경우 대체 값은 단일 요소 또는 요소 목록 일 수 있습니다. 예를 들어, &lt;code&gt;1, 2, 3&lt;/code&gt; 나타내는 목록 이 &lt;code&gt;[foo, _@var, bar]&lt;/code&gt; 또는 &lt;code&gt;[foo, _@var, bar]&lt;/code&gt; 중 하나에서 &lt;code&gt;var&lt;/code&gt; 로 대체 되면 결과는 &lt;code&gt;[foo, 1, 2, 3, bar]&lt;/code&gt; 나타냅니다 . , 바] .</target>
        </trans-unit>
        <trans-unit id="05ffcb976452c5c75ac29c7a75347990e68c424b" translate="yes" xml:space="preserve">
          <source>Substitutes &lt;code&gt;%FINAL_ROOTDIR%&lt;/code&gt; and &lt;code&gt;%EMU%&lt;/code&gt; for &lt;code&gt;/usr/local/erl-target&lt;/code&gt; and &lt;code&gt;beam&lt;/code&gt;, respectively, in the files &lt;code&gt;erl.src&lt;/code&gt;, &lt;code&gt;start.src&lt;/code&gt;, and &lt;code&gt;start_erl.src&lt;/code&gt; of the target &lt;code&gt;erts-5.10.4/bin&lt;/code&gt; directory, and puts the resulting files &lt;code&gt;erl&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt;, and &lt;code&gt;run_erl&lt;/code&gt; in the target &lt;code&gt;bin&lt;/code&gt; directory.</source>
          <target state="translated">대체품 &lt;code&gt;%FINAL_ROOTDIR%&lt;/code&gt; 및 &lt;code&gt;%EMU%&lt;/code&gt; 대 &lt;code&gt;/usr/local/erl-target&lt;/code&gt; 과 &lt;code&gt;beam&lt;/code&gt; 각각의 파일에 &lt;code&gt;erl.src&lt;/code&gt; , &lt;code&gt;start.src&lt;/code&gt; 및 &lt;code&gt;start_erl.src&lt;/code&gt; 대상의 &lt;code&gt;erts-5.10.4/bin&lt;/code&gt; 디렉토리 및 결과 파일 &lt;code&gt;erl&lt;/code&gt; , &lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;run_erl&lt;/code&gt; 을 대상 &lt;code&gt;bin&lt;/code&gt; 디렉토리에 넣 습니다 .</target>
        </trans-unit>
        <trans-unit id="38cd1412b4c1332531bc1e9ed8b6af837eca48b0" translate="yes" xml:space="preserve">
          <source>Substitutes keys of boolean-valued properties and simultaneously negates their values. For each entry in &lt;code&gt;ListIn&lt;/code&gt;, if it is associated with some key &lt;code&gt;K1&lt;/code&gt; such that &lt;code&gt;{K1, K2}&lt;/code&gt; occurs in &lt;code&gt;Negations&lt;/code&gt;: if the entry was &lt;code&gt;{K1, true}&lt;/code&gt;, it is replaced with &lt;code&gt;{K2, false}&lt;/code&gt;, otherwise with &lt;code&gt;K2&lt;/code&gt;, thus changing the name of the option and simultaneously negating the value specified by &lt;code&gt;&lt;a href=&quot;#get_bool-2&quot;&gt; get_bool(Key, ListIn)&lt;/a&gt;&lt;/code&gt;. If the same &lt;code&gt;K1&lt;/code&gt; occurs more than once in &lt;code&gt;Negations&lt;/code&gt;, only the first occurrence is used.</source>
          <target state="translated">부울 값 속성의 키를 대체하고 동시에 해당 값을 부정합니다. 각 항목에 대해 &lt;code&gt;ListIn&lt;/code&gt; 가 어떤 키와 관련된 경우, &lt;code&gt;K1&lt;/code&gt; 되도록 &lt;code&gt;{K1, K2}&lt;/code&gt; 발생 &lt;code&gt;Negations&lt;/code&gt; : 엔트리 였다면 &lt;code&gt;{K1, true}&lt;/code&gt; ,이으로 대체된다 &lt;code&gt;{K2, false}&lt;/code&gt; 달리하여 &lt;code&gt;K2&lt;/code&gt; 따라서 옵션의 이름을 변경하고 동시에 &lt;code&gt;&lt;a href=&quot;#get_bool-2&quot;&gt; get_bool(Key, ListIn)&lt;/a&gt;&lt;/code&gt; 지정된 값을 부정합니다 . &lt;code&gt;Negations&lt;/code&gt; 에서 동일한 &lt;code&gt;K1&lt;/code&gt; 이 두 번 이상 발생하는 경우 첫 번째 발생 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bc3669ecd23d63b80d0c44dfa313091853f8eced" translate="yes" xml:space="preserve">
          <source>Substitutes keys of boolean-valued properties and simultaneously negates their values. For each entry in &lt;code&gt;ListIn&lt;/code&gt;, if it is associated with some key &lt;code&gt;K1&lt;/code&gt; such that &lt;code&gt;{K1, K2}&lt;/code&gt; occurs in &lt;code&gt;Negations&lt;/code&gt;: if the entry was &lt;code&gt;{K1, true}&lt;/code&gt;, it is replaced with &lt;code&gt;{K2, false}&lt;/code&gt;, otherwise with &lt;code&gt;{K2, true}&lt;/code&gt;, thus changing the name of the option and simultaneously negating the value specified by &lt;code&gt;&lt;a href=&quot;#get_bool-2&quot;&gt;get_bool(Key,ListIn)&lt;/a&gt;&lt;/code&gt;. If the same &lt;code&gt;K1&lt;/code&gt; occurs more than once in &lt;code&gt;Negations&lt;/code&gt;, only the first occurrence is used.</source>
          <target state="translated">부울 값 속성의 키를 대체하고 동시에 해당 값을 무시합니다. &lt;code&gt;ListIn&lt;/code&gt; 의 각 항목에 대해 일부 키 &lt;code&gt;K1&lt;/code&gt; 과 연관되어 &lt;code&gt;{K1, K2}&lt;/code&gt; 가 &lt;code&gt;Negations&lt;/code&gt; 에서 발생하는 경우 : 항목이 &lt;code&gt;{K1, true}&lt;/code&gt; &lt;code&gt;{K2, false}&lt;/code&gt; 로 대체되고 그렇지 않으면 &lt;code&gt;{K2, true}&lt;/code&gt; 이므로 옵션 이름을 변경하고 &lt;code&gt;&lt;a href=&quot;#get_bool-2&quot;&gt;get_bool(Key,ListIn)&lt;/a&gt;&lt;/code&gt; 의해 지정된 값을 동시에 무시합니다 . &lt;code&gt;Negations&lt;/code&gt; 에서 동일한 &lt;code&gt;K1&lt;/code&gt; 이 두 번 이상 발생하면 첫 번째 항목 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1e27236324c145734276c060f10c3123a295b532" translate="yes" xml:space="preserve">
          <source>Substitutes keys of properties. For each entry in &lt;code&gt;ListIn&lt;/code&gt;, if it is associated with some key &lt;code&gt;K1&lt;/code&gt; such that &lt;code&gt;{K1, K2}&lt;/code&gt; occurs in &lt;code&gt;Aliases&lt;/code&gt;, the key of the entry is changed to &lt;code&gt;K2&lt;/code&gt;. If the same &lt;code&gt;K1&lt;/code&gt; occurs more than once in &lt;code&gt;Aliases&lt;/code&gt;, only the first occurrence is used.</source>
          <target state="translated">속성 키를 대체합니다. &lt;code&gt;ListIn&lt;/code&gt; 의 각 항목에 대해 &lt;code&gt;{K1, K2}&lt;/code&gt; 가 &lt;code&gt;Aliases&lt;/code&gt; 에서 발생 하도록 일부 키 &lt;code&gt;K1&lt;/code&gt; 과 연관되어 있으면 항목 의 키가 &lt;code&gt;K2&lt;/code&gt; 로 변경됩니다 . &lt;code&gt;Aliases&lt;/code&gt; 에서 동일한 &lt;code&gt;K1&lt;/code&gt; 이 두 번 이상 발생하면 첫 번째 항목 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1801b03e3699f70bce4dca242ce669128127a4dd" translate="yes" xml:space="preserve">
          <source>Subtract &lt;code&gt;Decr&lt;/code&gt; from atomic.</source>
          <target state="translated">원자에서 &lt;code&gt;Decr&lt;/code&gt; 을 뺍니다 .</target>
        </trans-unit>
        <trans-unit id="37f5f28556e45e356836c418448041928daf073b" translate="yes" xml:space="preserve">
          <source>Subtract &lt;code&gt;Decr&lt;/code&gt; from counter at index &lt;code&gt;Ix&lt;/code&gt;.</source>
          <target state="translated">인덱스 &lt;code&gt;Ix&lt;/code&gt; 의 카운터에서 &lt;code&gt;Decr&lt;/code&gt; 을 뺍니다 .</target>
        </trans-unit>
        <trans-unit id="42a8f651d79fd005eeac0612df6442b983a01184" translate="yes" xml:space="preserve">
          <source>Success</source>
          <target state="translated">Success</target>
        </trans-unit>
        <trans-unit id="80c7261dc13f63e8ac3c5ef932b61d4d0f95604d" translate="yes" xml:space="preserve">
          <source>Success | {error, term()}</source>
          <target state="translated">성공 | {오류, 용어 ()}</target>
        </trans-unit>
        <trans-unit id="8a0a4ea66889be40114ddfe9594dd7d12e174b44" translate="yes" xml:space="preserve">
          <source>Successful evaluations of the timer functions give return values containing a timer reference, denoted &lt;code&gt;TRef&lt;/code&gt;. By using &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt;, the returned reference can be used to cancel any requested action. A &lt;code&gt;TRef&lt;/code&gt; is an Erlang term, which contents must not be changed.</source>
          <target state="translated">타이머 함수의 성공적인 평가는 &lt;code&gt;TRef&lt;/code&gt; 로 표시된 타이머 참조를 포함하는 리턴 값을 제공합니다 . &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt; 을 사용 하면 리턴 된 참조를 사용하여 요청 된 조치를 취소 할 수 있습니다. &lt;code&gt;TRef&lt;/code&gt; 내용을 변경할 수 없습니다되어야하는 얼랑 용어입니다.</target>
        </trans-unit>
        <trans-unit id="06863fc24f520b1140c18c4fa8cbe27b0b51428c" translate="yes" xml:space="preserve">
          <source>Such an application is called a &lt;strong&gt;distributed application&lt;/strong&gt;. Notice that it is the control of the application that is distributed. All applications can be distributed in the sense that they, for example, use services on other nodes.</source>
          <target state="translated">이러한 응용 프로그램을 &lt;strong&gt;분산 응용 프로그램&lt;/strong&gt; 이라고합니다 . 배포 된 응용 프로그램의 제어입니다. 예를 들어 다른 노드의 서비스를 사용한다는 의미에서 모든 응용 프로그램을 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3074117af859e520c7cb63eb135640878edd509" translate="yes" xml:space="preserve">
          <source>Such an argument line must start with &lt;code&gt;%%!&lt;/code&gt; and the remaining line is interpreted as arguments to the emulator.</source>
          <target state="translated">이러한 인수 행은 &lt;code&gt;%%!&lt;/code&gt; 시작해야합니다 ! 나머지 줄은 에뮬레이터에 대한 인수로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="a7ae5388f7f85f99825857ef68538854979c6588" translate="yes" xml:space="preserve">
          <source>Such another callback module could be used by setting the option &lt;code&gt;key_cb&lt;/code&gt; when starting a client or a server (with for example &lt;code&gt;ssh:connect&lt;/code&gt;, &lt;code&gt;ssh:daemon&lt;/code&gt; of &lt;code&gt;ssh:shell&lt;/code&gt; ).</source>
          <target state="translated">이러한 또 다른 콜백 모듈은 클라이언트 또는 서버를 시작할 때 &lt;code&gt;key_cb&lt;/code&gt; 옵션을 설정하여 사용할 수 있습니다 (예 &lt;code&gt;ssh:connect&lt;/code&gt; &lt;code&gt;ssh:shell&lt;/code&gt; 의 ssh : connect , &lt;code&gt;ssh:daemon&lt;/code&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="0798de14385866f626c39da2456b2b12c915aee8" translate="yes" xml:space="preserve">
          <source>Such code is difficult to read and understand, and errors occur if the numbering of the elements in the tuple is wrong. If the data representation of the fields is changed, by re-ordering, adding, or removing fields, all references to the person tuple must be checked and possibly modified.</source>
          <target state="translated">이러한 코드는 읽고 이해하기 어렵고 튜플의 요소 번호가 잘못되면 오류가 발생합니다. 필드의 순서를 바꾸거나 추가 또는 제거하여 필드의 데이터 표시가 변경되면 개인 튜플에 대한 모든 참조를 확인하고 수정해야합니다.</target>
        </trans-unit>
        <trans-unit id="f433654caeb1dadceed6f988cc45cba92d4659f9" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for dirty CPU scheduler threads. Valid range is 20-8192 kilowords. The default suggested stack size is 40 kilowords.</source>
          <target state="translated">더티 CPU 스케줄러 스레드에 권장되는 스택 크기 (KB)입니다. 유효한 범위는 20-8192 킬로 워드입니다. 기본 제안 된 스택 크기는 40 킬로 워드입니다.</target>
        </trans-unit>
        <trans-unit id="af6be2dcf5716a0725659c157d5e2c536263c156" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for dirty IO scheduler threads. Valid range is 20-8192 kilowords. The default suggested stack size is 40 kilowords.</source>
          <target state="translated">더티 IO 스케줄러 스레드에 권장되는 스택 크기 (KB)입니다. 유효한 범위는 20-8192 킬로 워드입니다. 기본 제안 된 스택 크기는 40 킬로 워드입니다.</target>
        </trans-unit>
        <trans-unit id="bcf432451d4daca2de4246fc100508b99bcd1023" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for scheduler threads. Valid range is 20-8192 kilowords. The default suggested stack size is 128 kilowords.</source>
          <target state="translated">스케줄러 스레드에 권장되는 스택 크기 (KB)입니다. 유효한 범위는 20-8192 킬로 워드입니다. 기본 제안 된 스택 크기는 128 킬로 워드입니다.</target>
        </trans-unit>
        <trans-unit id="0609d0a61cf8d8ef3d8e47d17eb6ede964b04431" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for threads in the async thread pool. Valid range is 16-8192 kilowords. The default suggested stack size is 16 kilowords, that is, 64 kilobyte on 32-bit architectures. This small default size has been chosen because the number of async threads can be large. The default size is enough for drivers delivered with Erlang/OTP, but might not be large enough for other dynamically linked-in drivers that use the &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt; driver_async()&lt;/a&gt;&lt;/code&gt; functionality. Notice that the value passed is only a suggestion, and it can even be ignored on some platforms.</source>
          <target state="translated">비동기 스레드 풀의 스레드에 대해 제안 된 스택 크기 (KB)입니다. 유효 범위는 16-8192 킬로 워드입니다. 기본 권장 스택 크기는 16KB, 즉 32 비트 아키텍처에서 64KB입니다. 이 작은 기본 크기는 비동기 스레드 수가 클 수 있기 때문에 선택되었습니다. 기본 크기는 Erlang / OTP와 함께 제공되는 드라이버에는 충분하지만 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt; driver_async()&lt;/a&gt;&lt;/code&gt; 기능 을 사용하는 다른 동적으로 연결된 드라이버에는 충분하지 않을 수 있습니다 . 전달 된 값은 제안 일 뿐이며 일부 플랫폼에서는 무시할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8bd14d1892c2129895ed57dfa2db4ceb46d0dc7" translate="yes" xml:space="preserve">
          <source>Suggested stack size, in kilowords, for threads in the async thread pool. Valid range is 16-8192 kilowords. The default suggested stack size is 16 kilowords, that is, 64 kilobyte on 32-bit architectures. This small default size has been chosen because the number of async threads can be large. The default size is enough for drivers delivered with Erlang/OTP, but might not be large enough for other dynamically linked-in drivers that use the &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt;driver_async()&lt;/a&gt;&lt;/code&gt; functionality. Notice that the value passed is only a suggestion, and it can even be ignored on some platforms.</source>
          <target state="translated">비동기 스레드 풀의 스레드에 권장되는 스택 크기 (킬로 워드)입니다. 유효한 범위는 16-8192 킬로 워드입니다. 기본 제안 된 스택 크기는 16 킬로 워드, 즉 32 비트 아키텍처에서 64 킬로바이트입니다. 비동기 스레드 수가 클 수 있으므로이 작은 기본 크기가 선택되었습니다. 기본 크기는 Erlang / OTP와 함께 제공되는 드라이버에는 충분하지만 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt;driver_async()&lt;/a&gt;&lt;/code&gt; 기능 을 사용하는 다른 동적으로 링크 된 드라이버에는 충분하지 않을 수 있습니다 . 전달 된 값은 제안 일 뿐이며 일부 플랫폼에서는 무시 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="da7ae3ce7097a50ecd686c674729f1c7303f10ff" translate="yes" xml:space="preserve">
          <source>Suite level configuration function, executed after the last test case. (Optional)</source>
          <target state="translated">마지막 테스트 사례 이후에 실행 된 스위트 레벨 구성 기능. (선택 과목)</target>
        </trans-unit>
        <trans-unit id="2b05185a141699c8f8fb351934189959847a1edf" translate="yes" xml:space="preserve">
          <source>Suite level configuration function, executed before the first test case. (Optional)</source>
          <target state="translated">첫 번째 테스트 케이스 전에 실행 된 스위트 레벨 구성 기능. (선택 과목)</target>
        </trans-unit>
        <trans-unit id="04518d1a0192d1131132db139b0e5008f6d17e70" translate="yes" xml:space="preserve">
          <source>Suite-related information is sent to the major log file.</source>
          <target state="translated">스위트 관련 정보는 주요 로그 파일로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="a5a27f3edcde9ae36844a365f84f2f1240d62f6e" translate="yes" xml:space="preserve">
          <source>Suites (&lt;code&gt;*_SUITE.erl&lt;/code&gt;) files must be stored in &lt;code&gt;TestDir&lt;/code&gt; or &lt;code&gt;TestDir/test&lt;/code&gt;. All suites are compiled when the test is run.</source>
          <target state="translated">스위트 ( &lt;code&gt;*_SUITE.erl&lt;/code&gt; ) 파일은 &lt;code&gt;TestDir&lt;/code&gt; 또는 &lt;code&gt;TestDir/test&lt;/code&gt; 에 저장해야합니다 . 테스트가 실행될 때 모든 스위트가 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="378fda76844d25f760b8a3232570c6811c1f60f2" translate="yes" xml:space="preserve">
          <source>Summary of options not previously described for function &lt;code&gt;run/3&lt;/code&gt;:</source>
          <target state="translated">함수 &lt;code&gt;run/3&lt;/code&gt; 에 대해 이전에 설명되지 않은 옵션 요약 :</target>
        </trans-unit>
        <trans-unit id="2270dca3d5a482193570efd95b8b721376d2e899" translate="yes" xml:space="preserve">
          <source>Summary of options:</source>
          <target state="translated">옵션 요약 :</target>
        </trans-unit>
        <trans-unit id="f1ea23086ee2ae5acc3750e0b83a8ad5e05aec73" translate="yes" xml:space="preserve">
          <source>Summary of the options:</source>
          <target state="translated">옵션 요약 :</target>
        </trans-unit>
        <trans-unit id="68214c5d6d790a263205249ceaedff42f792b42f" translate="yes" xml:space="preserve">
          <source>Summing the elements in a list and double them at the same time:</source>
          <target state="translated">목록에서 요소를 합산하고 동시에 두 배로 늘리십시오.</target>
        </trans-unit>
        <trans-unit id="03121a488934e060630fcbde75ce3dedf8aac8f2" translate="yes" xml:space="preserve">
          <source>Sun's Java JDK 1.6.0 or later. Our Java code (jinterface, ic) is written for JDK 1.6.0. Get it for Windows and install it, the JRE is not enough. If you don't care about Java, you can skip this step. The result will be that jinterface is not built.</source>
          <target state="translated">Sun의 Java JDK 1.6.0 이상 Java 코드 (jinterface, ic)는 JDK 1.6.0 용으로 작성되었습니다. Windows 용으로 가져 와서 설치하십시오 .JRE로는 충분하지 않습니다. Java에 관심이 없으면이 단계를 건너 뛸 수 있습니다. 결과적으로 jinterface가 빌드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="14bb55d7d7430a4e707657bbba24d20d9e03a1c8" translate="yes" xml:space="preserve">
          <source>Sundanese</source>
          <target state="translated">Sundanese</target>
        </trans-unit>
        <trans-unit id="80226badb4fe578fcd3821c9a1fd88e31eb75b5b" translate="yes" xml:space="preserve">
          <source>Supervision of Erlang/OTP</source>
          <target state="translated">Erlang / OTP 감독</target>
        </trans-unit>
        <trans-unit id="829f8d39f75c9bc9f969226bb510126e3c23e139" translate="yes" xml:space="preserve">
          <source>Supervision of a node being started using internal callback functions. Used to prevent hanging nodes. (Configurable.)</source>
          <target state="translated">내부 콜백 함수를 사용하여 시작된 노드의 감독 중단 노드를 방지하는 데 사용됩니다. (구성 가능)</target>
        </trans-unit>
        <trans-unit id="924f7769a101580d991ad9414eee8efcbffebbdb" translate="yes" xml:space="preserve">
          <source>Supervisor - skeleton for the OTP supervisor behavior</source>
          <target state="translated">수퍼바이저-OTP 수퍼바이저 동작의 골격</target>
        </trans-unit>
        <trans-unit id="323811135ee8c95f4855f00e4ef8542d2be8796b" translate="yes" xml:space="preserve">
          <source>Supervisor Bridge - skeleton for the OTP supervisor bridge behavior</source>
          <target state="translated">수퍼바이저 브리지-OTP 수퍼바이저 브리지 동작의 골격</target>
        </trans-unit>
        <trans-unit id="3d025abf18d0953e11c3f4ac2e2077550e0b1079" translate="yes" xml:space="preserve">
          <source>Supervisor Change</source>
          <target state="translated">감독자 변경</target>
        </trans-unit>
        <trans-unit id="da3aea84a47845aadb4debb823b5071baf475b58" translate="yes" xml:space="preserve">
          <source>Supervisor report</source>
          <target state="translated">감독자 보고서</target>
        </trans-unit>
        <trans-unit id="87df9f02b7ab7494841fbdf4d8bc6ea62d2782fd" translate="yes" xml:space="preserve">
          <source>Supervisor reports and crash reports are issued as &lt;code&gt;error&lt;/code&gt; level log events, and are logged through the default handler started by Kernel.</source>
          <target state="translated">감독자 보고서 및 충돌 보고서는 &lt;code&gt;error&lt;/code&gt; 수준 로그 이벤트 로 발행 되며 커널에서 시작한 기본 처리기를 통해 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="8134165a77d04e2d6551122c49e5bdd280bc54b0" translate="yes" xml:space="preserve">
          <source>Supervisor reports, crash reports, and progress reports are no longer connected to the SASL application.</source>
          <target state="translated">감독자 보고서, 충돌 보고서 및 진행률 보고서가 더 이상 SASL 응용 프로그램에 연결되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9969a639fd5f6ed1ac8b07340d0c05f6c0b8953c" translate="yes" xml:space="preserve">
          <source>Supervisors are processes that monitor the behaviour of workers. A supervisor can restart a worker if something goes wrong.</source>
          <target state="translated">감독자는 근로자의 행동을 모니터링하는 프로세스입니다. 문제가 발생하면 감독자가 작업자를 다시 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b867b17045f3842a273db8cba0550b3d1ac6614" translate="yes" xml:space="preserve">
          <source>Support all platforms that implement DTrace: OS X, Solaris, and (I hope) FreeBSD and NetBSD.</source>
          <target state="translated">DTrace를 구현하는 모든 플랫폼 (OS X, Solaris 및 FreeBSD 및 NetBSD)을 지원하십시오.</target>
        </trans-unit>
        <trans-unit id="69fe8cf7ba05f1cc818c0855d845cf60eed872f5" translate="yes" xml:space="preserve">
          <source>Support for CGI-1.1 is implemented in accordance with &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3875.txt&quot;&gt;RFC 3875&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">CGI-1.1에 대한 지원은 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3875.txt&quot;&gt;RFC 3875&lt;/a&gt;&lt;/code&gt; 에 따라 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="379555e985a481d7ba0ecd76f90944420c066b82" translate="yes" xml:space="preserve">
          <source>Support for IPv6 has been implemented but &lt;strong&gt;not&lt;/strong&gt; tested.</source>
          <target state="translated">IPv6에 대한 지원이 구현되었지만 테스트 &lt;strong&gt;되지 않았습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="0bd08a8b5162c0eb0a1a1944e69893cca2829f27" translate="yes" xml:space="preserve">
          <source>Support for UTF-8 encoded atoms in the external format has been available since ERTS 5.10 (OTP R16). This ability allows such old nodes to decode, store and encode any Unicode atoms received from a new OTP 20 node.</source>
          <target state="translated">ERTS 5.10 (OTP R16)부터 외부 형식의 UTF-8 인코딩 원자에 대한 지원이 제공되었습니다. 이 기능을 통해 이러한 오래된 노드는 새로운 OTP 20 노드에서 수신 된 모든 유니 코드 원자를 디코딩, 저장 및 인코딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cab27f867ed7b84d1da4274c9b4c8a517efc3269" translate="yes" xml:space="preserve">
          <source>Support for UTF-8 encoded atoms in the external format has been available since ERTS 5.10 (OTP R16). This abillity allows such old nodes to decode, store and encode any Unicode atoms received from a new OTP 20 node.</source>
          <target state="translated">외부 형식의 UTF-8 인코딩 원자에 대한 지원은 ERTS 5.10 (OTP R16) 이후에 사용 가능합니다. 이러한 어빌리티는 그러한 오래된 노드가 새로운 OTP 20 노드로부터 수신 된 모든 유니 코드 원자를 디코딩, 저장 및 인코딩 할 수있게한다.</target>
        </trans-unit>
        <trans-unit id="193baef9a2c52722bfd0c24ca1ca0d35adeafcf4" translate="yes" xml:space="preserve">
          <source>Support for Unicode is increasing throughout the world of computing, as the benefits of one common character set are overwhelming when programs are used in a global environment. Along with the base of the standard, the code points for all the scripts, some &lt;strong&gt;encoding standards&lt;/strong&gt; are available.</source>
          <target state="translated">프로그램이 글로벌 환경에서 사용될 때 하나의 공통 문자 세트의 이점이 압도적이므로 유니 코드에 대한 지원은 컴퓨팅 세계에서 점차 증가하고 있습니다. 표준의 기초와 함께 모든 스크립트의 코드 포인트와 함께 일부 &lt;strong&gt;인코딩 표준&lt;/strong&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c2f9dd6f5702da3c88342435df89150ecd767f5" translate="yes" xml:space="preserve">
          <source>Support for alternative node discovery mechanisms was added in Erlang/OTP 21.</source>
          <target state="translated">대체 노드 검색 메커니즘에 대한 지원이 Erlang / OTP 21에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="8f1a1f5f1f39e75130f9a4b8fb8862e77cf4de40" translate="yes" xml:space="preserve">
          <source>Support for alternative service discovery mechanisms was added in Erlang/OTP 21.</source>
          <target state="translated">대체 서비스 검색 메커니즘에 대한 지원이 Erlang / OTP 21에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="e22a6b0bd6435965b7e9c8e93a6cbfa481495388" translate="yes" xml:space="preserve">
          <source>Support for the curves ed25519 and ed448 is implemented. The actual supported named curves could be checked by examining the list with the list returned by &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(curves)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">곡선 ed25519 및 ed448에 대한 지원이 구현되었습니다. 실제로 지원되는 명명 된 곡선은 &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(curves)&lt;/a&gt;&lt;/code&gt; 반환 된 목록으로 목록을 검사하여 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d962630c5d6ce765c1eae0f7d5dc468e364cb4b" translate="yes" xml:space="preserve">
          <source>Support for the following encoding rules:</source>
          <target state="translated">다음 인코딩 규칙을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="cf1c782df2c96e8282de7b476d79cc67e49828fb" translate="yes" xml:space="preserve">
          <source>Support for time measurement in NIF libraries:</source>
          <target state="translated">NIF 라이브러리에서 시간 측정 지원 :</target>
        </trans-unit>
        <trans-unit id="4c3f03f63be41e2febacf4326efd1546b9941350" translate="yes" xml:space="preserve">
          <source>Support for time measurement in drivers:</source>
          <target state="translated">드라이버에서 시간 측정 지원 :</target>
        </trans-unit>
        <trans-unit id="dc296a0486ec5f87002aad7f28ba0562ca867666" translate="yes" xml:space="preserve">
          <source>Support functions for property lists.</source>
          <target state="translated">속성 목록에 대한 지원 기능.</target>
        </trans-unit>
        <trans-unit id="93baf438b0613f3c74f0fdc2ba5aba73338aaf24" translate="yes" xml:space="preserve">
          <source>Support functions for test suite authors</source>
          <target state="translated">테스트 스위트 작성자를위한 지원 기능</target>
        </trans-unit>
        <trans-unit id="7b27d62da68aa4674a9a6a3ba02dbef34df9939e" translate="yes" xml:space="preserve">
          <source>Support in Common Test for running property-based tests.</source>
          <target state="translated">속성 기반 테스트 실행을위한 Common Test 지원.</target>
        </trans-unit>
        <trans-unit id="76ec5026dd3939812f4e93c176c2a0f384d8c0e6" translate="yes" xml:space="preserve">
          <source>Support libraries contain functions that are useful for all test suites, or for test suites in a specific functional area or subsystem. In addition to the general support libraries provided by the &lt;code&gt;Common Test&lt;/code&gt; framework, and the various libraries and applications provided by Erlang/OTP, there can also be a need for customized (user specific) support libraries.</source>
          <target state="translated">지원 라이브러리에는 모든 테스트 스위트 또는 특정 기능 영역 또는 서브 시스템의 테스트 스위트에 유용한 기능이 있습니다. &lt;code&gt;Common Test&lt;/code&gt; 프레임 워크에서 제공하는 일반 지원 라이브러리 와 Erlang / OTP에서 제공하는 다양한 라이브러리 및 응용 프로그램 외에도 사용자 정의 된 (사용자 별) 지원 라이브러리가 필요할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0362ec0d097a5a157104529b450e00204f9cbbb5" translate="yes" xml:space="preserve">
          <source>Support library for abstract Erlang syntax trees.</source>
          <target state="translated">추상 Erlang 구문 트리를위한 지원 라이브러리.</target>
        </trans-unit>
        <trans-unit id="e9eea1dd92def1101125de3b37a7409d58a3f281" translate="yes" xml:space="preserve">
          <source>Support the &lt;code&gt;sys&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#debug&quot;&gt;debug facilities&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#debug&quot;&gt;debug facilities&lt;/a&gt;&lt;/code&gt; 지원</target>
        </trans-unit>
        <trans-unit id="95c22864cfced2306503ecdcaa13a389468c1121" translate="yes" xml:space="preserve">
          <source>Support was added for normalizations forms in &lt;code&gt;unicode&lt;/code&gt; and the &lt;code&gt;string&lt;/code&gt; module now handles utf8-encoded binaries.</source>
          <target state="translated">지원에 정상화 양식에 추가 된 &lt;code&gt;unicode&lt;/code&gt; 와 &lt;code&gt;string&lt;/code&gt; 모듈은 이제 UTF8 인코딩 된 바이너리를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="0bf8509ba5ecde4589d8872597ed2ff4969a9a4c" translate="yes" xml:space="preserve">
          <source>Supported</source>
          <target state="translated">Supported</target>
        </trans-unit>
        <trans-unit id="94d784030e6368881b7c47bc472d34ce0f6f0d06" translate="yes" xml:space="preserve">
          <source>Supported (based on TLS 1.2)</source>
          <target state="translated">지원됨 (TLS 1.2 기반)</target>
        </trans-unit>
        <trans-unit id="a65b7f12a991185f44b505808bc867e90d749e20" translate="yes" xml:space="preserve">
          <source>Supported Compilers</source>
          <target state="translated">지원되는 컴파일러</target>
        </trans-unit>
        <trans-unit id="27688c5327abb2b73ea437b43fa29c356a128ee7" translate="yes" xml:space="preserve">
          <source>Supported Versions</source>
          <target state="translated">지원되는 버전</target>
        </trans-unit>
        <trans-unit id="8c3d6e2b0c4b55646256fe3e98da277b50ee5de3" translate="yes" xml:space="preserve">
          <source>Supported cipher suites. The function &lt;code&gt;cipher_suites/0&lt;/code&gt; can be used to find all ciphers that are supported by default. &lt;code&gt;cipher_suites(all)&lt;/code&gt; can be called to find all available cipher suites. Pre-Shared Key (&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4279.txt&quot;&gt;RFC 4279&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5487.txt&quot;&gt;RFC 5487&lt;/a&gt;&lt;/code&gt;), Secure Remote Password (&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5054.txt&quot;&gt;RFC 5054&lt;/a&gt;&lt;/code&gt;), RC4 cipher suites, and anonymous cipher suites only work if explicitly enabled by this option; they are supported/enabled by the peer also. Anonymous cipher suites are supported for testing purposes only and are not be used when security matters.</source>
          <target state="translated">지원되는 암호 제품군. &lt;code&gt;cipher_suites/0&lt;/code&gt; 기능을 사용하여 기본적으로 지원되는 모든 암호를 찾을 수 있습니다. 사용 가능한 모든 암호 스위트를 찾기 위해 &lt;code&gt;cipher_suites(all)&lt;/code&gt; 를 호출 할 수 있습니다. 사전 공유 키 ( &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4279.txt&quot;&gt;RFC 4279&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5487.txt&quot;&gt;RFC 5487&lt;/a&gt;&lt;/code&gt; ), 보안 원격 비밀번호 ( &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5054.txt&quot;&gt;RFC 5054&lt;/a&gt;&lt;/code&gt; ), RC4 암호 제품군 및 익명 암호 제품군은이 옵션으로 명시 적으로 활성화 된 경우에만 작동합니다. 또한 피어가 지원 / 활성화합니다. 익명 암호 스위트는 테스트 목적으로 만 지원되며 보안이 중요한 경우에는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6ace0dceed0dc79156d544bb1e740bd6e2e4245f" translate="yes" xml:space="preserve">
          <source>Supported option: &lt;code&gt;-o&lt;/code&gt;.</source>
          <target state="translated">지원 옵션 : &lt;code&gt;-o&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8862943cc8300abfb1bde27326d75dc9a30f07d9" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-D&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt;.</source>
          <target state="translated">지원 옵션 : &lt;code&gt;-I&lt;/code&gt; , &lt;code&gt;-o&lt;/code&gt; , &lt;code&gt;-D&lt;/code&gt; , &lt;code&gt;-v&lt;/code&gt; , &lt;code&gt;-W&lt;/code&gt; , &lt;code&gt;-b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b18222290f4691ea2e1803f27d33f984dc4fed35" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;.</source>
          <target state="translated">지원 옵션 : &lt;code&gt;-I&lt;/code&gt; , &lt;code&gt;-o&lt;/code&gt; , &lt;code&gt;-W&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="611e3fc6659a77f464d1ef09b1a3f966abeee562" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;.</source>
          <target state="translated">지원 옵션 : &lt;code&gt;-I&lt;/code&gt; , &lt;code&gt;-o&lt;/code&gt; , &lt;code&gt;-b&lt;/code&gt; , &lt;code&gt;-W&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13af750ddec082e015f88004babe3e1a9cbf2249" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;.</source>
          <target state="translated">지원되는 옵션 : &lt;code&gt;-I&lt;/code&gt; , &lt;code&gt;-o&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee8aa3fc6cd2da1cc08dd61046fb6b0ad0efa14b" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;-W&lt;/code&gt;.</source>
          <target state="translated">지원 옵션 : &lt;code&gt;-o&lt;/code&gt; , &lt;code&gt;-v&lt;/code&gt; , &lt;code&gt;-I&lt;/code&gt; , &lt;code&gt;-W&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9956c47dfedf732cac76d6c7cf8152d9c9559ea6" translate="yes" xml:space="preserve">
          <source>Supported options: &lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt;.</source>
          <target state="translated">지원 옵션 : &lt;code&gt;-o&lt;/code&gt; , &lt;code&gt;-v&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6162eeb9b9f8ad636a290938543b85a83786b99" translate="yes" xml:space="preserve">
          <source>Supported options: same as for &lt;code&gt;.erl&lt;/code&gt;.</source>
          <target state="translated">지원되는 옵션 : &lt;code&gt;.erl&lt;/code&gt; 과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="002fcc7d4fbae71f711cdd87becc1cce73be8aaf" translate="yes" xml:space="preserve">
          <source>Supported time unit representations:</source>
          <target state="translated">지원되는 시간 단위 표현 :</target>
        </trans-unit>
        <trans-unit id="ae00ef55d1dcfbb028df51241440b188a57ac58d" translate="yes" xml:space="preserve">
          <source>Supported-Vendor-Id AVP</source>
          <target state="translated">지원되는 공급 업체 ID AVP</target>
        </trans-unit>
        <trans-unit id="e769daffee112f18015a5281f7f10cc6e2232070" translate="yes" xml:space="preserve">
          <source>Supports automatic repair of log files that are not properly closed and enables efficient reading of logged items in &lt;strong&gt;chunks&lt;/strong&gt; using a set of functions defined in this module. This is the only way to read internally formatted logs. An item logged to an internally formatted log must not occupy more than 4 GB of disk space (the size must fit in 4 bytes).</source>
          <target state="translated">올바르게 닫히지 않은 로그 파일의 자동 복구를 지원 하고이 모듈에 정의 된 기능 세트를 사용하여 &lt;strong&gt;덩어리&lt;/strong&gt; 로 기록 된 항목을 효율적으로 읽을 수 있습니다 . 내부 형식의 로그를 읽는 유일한 방법입니다. 내부 형식의 로그에 기록 된 항목은 4GB 이상의 디스크 공간을 차지하지 않아야합니다 (크기는 4 바이트 여야합니다).</target>
        </trans-unit>
        <trans-unit id="feeb97de252d85c97be0921569e919e2f578a240" translate="yes" xml:space="preserve">
          <source>Supports calling Erlang functions on remote nodes. &lt;code&gt;ei_rpc_to()&lt;/code&gt; sends an RPC request to a remote node and &lt;code&gt;ei_rpc_from()&lt;/code&gt; receives the results of such a call. &lt;code&gt;ei_rpc()&lt;/code&gt; combines the functionality of these two functions by sending an RPC request and waiting for the results. See also &lt;code&gt; rpc:call/4&lt;/code&gt; in Kernel.</source>
          <target state="translated">원격 노드에서 Erlang 함수 호출을 지원합니다. &lt;code&gt;ei_rpc_to()&lt;/code&gt; 는 원격 노드에 RPC 요청을 보내고 &lt;code&gt;ei_rpc_from()&lt;/code&gt; 은 이러한 호출의 결과를받습니다. &lt;code&gt;ei_rpc()&lt;/code&gt; 는 RPC 요청을 보내고 결과를 기다림 으로써이 두 함수의 기능을 결합합니다. 커널의 &lt;code&gt; rpc:call/4&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbbfa591a4b290b4ae62ef1ecc1698736ec6299b" translate="yes" xml:space="preserve">
          <source>Supports calling Erlang functions on remote nodes. &lt;code&gt;ei_rpc_to()&lt;/code&gt; sends an RPC request to a remote node and &lt;code&gt;ei_rpc_from()&lt;/code&gt; receives the results of such a call. &lt;code&gt;ei_rpc()&lt;/code&gt; combines the functionality of these two functions by sending an RPC request and waiting for the results. See also &lt;code&gt;rpc:call/4&lt;/code&gt; in Kernel.</source>
          <target state="translated">원격 노드에서 Erlang 함수 호출을 지원합니다. &lt;code&gt;ei_rpc_to()&lt;/code&gt; 는 RPC 요청을 원격 노드로 &lt;code&gt;ei_rpc_from()&lt;/code&gt; 은 이러한 호출의 결과를받습니다. &lt;code&gt;ei_rpc()&lt;/code&gt; 는 RPC 요청을 보내고 결과를 기다리 면서이 두 함수의 기능을 결합합니다. 커널의 &lt;code&gt;rpc:call/4&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa8c650384582fade821d1435197dd4d799e10f6" translate="yes" xml:space="preserve">
          <source>Supports calling Erlang functions on remote nodes. &lt;code&gt;erl_rpc_to()&lt;/code&gt; sends an RPC request to a remote node and &lt;code&gt;erl_rpc_from()&lt;/code&gt; receives the results of such a call. &lt;code&gt;erl_rpc()&lt;/code&gt; combines the functionality of these two functions by sending an RPC request and waiting for the results. See also &lt;code&gt;rpc:call/4&lt;/code&gt; in &lt;code&gt;Kernel&lt;/code&gt;.</source>
          <target state="translated">원격 노드에서 Erlang 함수 호출을 지원합니다. &lt;code&gt;erl_rpc_to()&lt;/code&gt; 는 RPC 요청을 원격 노드로 &lt;code&gt;erl_rpc_from()&lt;/code&gt; 은 이러한 호출의 결과를 수신합니다. &lt;code&gt;erl_rpc()&lt;/code&gt; 는 RPC 요청을 보내고 결과를 기다리 면서이 두 함수의 기능을 결합합니다. 참조 &lt;code&gt;rpc:call/4&lt;/code&gt; 의 &lt;code&gt;Kernel&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3811292723c6d7a387a20acab2375d3a48075ff" translate="yes" xml:space="preserve">
          <source>Suppose now that &lt;code&gt;cp2&lt;/code&gt; goes also down and does not restart within 5 seconds. &lt;code&gt;myapp&lt;/code&gt; is now restarted on &lt;code&gt;cp3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cp2&lt;/code&gt; 도 다운되고 5 초 내에 다시 시작되지 않는다고 가정하십시오 . &lt;code&gt;myapp&lt;/code&gt; 는 이제 &lt;code&gt;cp3&lt;/code&gt; 에서 다시 시작됩니다 .</target>
        </trans-unit>
        <trans-unit id="c2a35d6565243a0a37ae621d98c111036eb6b54a" translate="yes" xml:space="preserve">
          <source>Suppose now that we call &lt;code&gt;set_lock_button&lt;/code&gt; while the door is open, and we have already postponed a button event that was the new lock button:</source>
          <target state="translated">문이 열린 상태에서 &lt;code&gt;set_lock_button&lt;/code&gt; 을 호출 하고 새로운 잠금 버튼 인 버튼 이벤트를 이미 연기했다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="4f259e320457b94f7101d49c931d3f7e53c48f31" translate="yes" xml:space="preserve">
          <source>Suppose our client expects to connect to the web server https://www.example.net. This URI is therefore the Reference IDs of the client. The call will be:</source>
          <target state="translated">클라이언트가 웹 서버 https://www.example.net에 연결한다고 가정합니다. 따라서이 URI는 클라이언트의 참조 ID입니다. 전화는 :</target>
        </trans-unit>
        <trans-unit id="f86d7a4fa0c16e05b4083974f68f3f6c6ca32ef5" translate="yes" xml:space="preserve">
          <source>Suppose you have the following private key and a corresponding public key:</source>
          <target state="translated">다음 개인 키와 해당 공개 키가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="161e2a3301f56050bd72a9a234717ac0bdcee365" translate="yes" xml:space="preserve">
          <source>Suppress erl and hrl generation, respectively.</source>
          <target state="translated">erl 및 hrl 생성을 각각 억제하십시오.</target>
        </trans-unit>
        <trans-unit id="fd85d4a3e5b009ade7267fa909dd246107f8cd7a" translate="yes" xml:space="preserve">
          <source>Suppress warnings about behavior callbacks that drift from the published recommended interfaces.</source>
          <target state="translated">게시 된 권장 인터페이스에서 벗어난 동작 콜백에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="658d4e7b1b098b27aa4e9901e6a6a91fde3e7e4d" translate="yes" xml:space="preserve">
          <source>Suppress warnings about behaviors that have no &lt;code&gt;-callback&lt;/code&gt; attributes for their callbacks.</source>
          <target state="translated">더없는 행동에 대한 억제 경고 &lt;code&gt;-callback&lt;/code&gt; 자신의 콜백의 속성을.</target>
        </trans-unit>
        <trans-unit id="99d8fcbfb989e4e7fda7c9452d49bb803228dd19" translate="yes" xml:space="preserve">
          <source>Suppress warnings about calls to missing functions.</source>
          <target state="translated">누락 된 함수 호출에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f5f104449e97fb4d3d9fd5d369f54de49da0d189" translate="yes" xml:space="preserve">
          <source>Suppress warnings about invalid contracts.</source>
          <target state="translated">유효하지 않은 계약에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="896f6537b177bdb199d5aeaf1e91ac70a0c3690d" translate="yes" xml:space="preserve">
          <source>Suppress warnings for construction of improper lists.</source>
          <target state="translated">부적절한 목록 구성에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9e5a8003fe113325954491747d862630cd7a5e51" translate="yes" xml:space="preserve">
          <source>Suppress warnings for failing calls.</source>
          <target state="translated">통화 실패에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="03070bddd1c1713fe09504f3e04390b0f76857ef" translate="yes" xml:space="preserve">
          <source>Suppress warnings for fun applications that will fail.</source>
          <target state="translated">실패 할 재미있는 응용 프로그램에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e363bcef03fbcf4ab0a513ebe34c444e24468b1f" translate="yes" xml:space="preserve">
          <source>Suppress warnings for functions that will never return a value.</source>
          <target state="translated">값을 반환하지 않는 함수에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9e7a409dd7e022c1a6f54bf31cd4e3da6ea87e20" translate="yes" xml:space="preserve">
          <source>Suppress warnings for patterns that are unused or cannot match.</source>
          <target state="translated">사용하지 않거나 일치 할 수없는 패턴에 대해서는 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38c67ecef5210cce75595b7c59b94ce46cbf5939" translate="yes" xml:space="preserve">
          <source>Suppress warnings for unused functions.</source>
          <target state="translated">사용하지 않는 기능에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0e23a74a695d05be9cf7ca7b4cd92c59cd8c658c" translate="yes" xml:space="preserve">
          <source>Suppress warnings for violations of opacity of data types.</source>
          <target state="translated">데이터 유형의 불투명도 위반에 대한 경고를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="00dba67736694228fe581698490416aec0e4a248" translate="yes" xml:space="preserve">
          <source>Suppresses the call statistics for each process from the analysis.</source>
          <target state="translated">분석에서 각 프로세스의 통화 통계를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5fe98e618f2833867a376cb98a815ac9ec990dd1" translate="yes" xml:space="preserve">
          <source>Suppresses the printing of callers and called information in the analysis.</source>
          <target state="translated">분석에서 발신자와 인쇄 된 정보의 인쇄를 억제합니다.</target>
        </trans-unit>
        <trans-unit id="df8a60c08e48d602804f88560585bc9fbb66d14d" translate="yes" xml:space="preserve">
          <source>Suppresses the writing of a crash dump file entirely, thus rebooting the runtime system immediately. This is the same as not setting the environment variable.</source>
          <target state="translated">크래시 덤프 파일의 쓰기를 완전히 억제하여 런타임 시스템을 즉시 재부팅합니다. 이것은 환경 변수를 설정하지 않는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a988c8ef2b296fc0ea2e2d3047e7e09c23301de2" translate="yes" xml:space="preserve">
          <source>Supresses the totals section in the analysis, which is the default.</source>
          <target state="translated">분석에서 총계 섹션을 억제합니다 (기본값).</target>
        </trans-unit>
        <trans-unit id="0ef25d72e538682415b03c36a263df0107df3d7d" translate="yes" xml:space="preserve">
          <source>Surefire XML can, for example, be used by Jenkins to display test results.</source>
          <target state="translated">예를 들어 Jenkins는 Surefire XML을 사용하여 테스트 결과를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b793def872c04362cbd57644640b08e1bf84da10" translate="yes" xml:space="preserve">
          <source>Surefire reports for EUnit (Format used by Maven and Atlassian Bamboo for example to integrate test results).</source>
          <target state="translated">EUnit에 대한 Surefire 보고서 (예 : 테스트 결과를 통합하기 위해 Maven 및 Atlassian Bamboo에서 사용하는 형식)</target>
        </trans-unit>
        <trans-unit id="7631dc723852ac4b0bb4fd7d3058478eb65f5073" translate="yes" xml:space="preserve">
          <source>Surefire reports for EUnit (Format used by Maven and Atlassian Bamboo for example to integrate test results). Based on initial code from Paul Guyot.</source>
          <target state="translated">EUnit에 대한 Surefire 보고서 (예 : 테스트 결과를 통합하기 위해 Maven 및 Atlassian Bamboo에서 사용하는 형식) Paul Guyot의 초기 코드를 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="c948ea0246807256cf48a7cfaaf94b78e7b2095a" translate="yes" xml:space="preserve">
          <source>Surrogate</source>
          <target state="translated">Surrogate</target>
        </trans-unit>
        <trans-unit id="c2d08767ce3738536171addb59e65d4ef23dd87d" translate="yes" xml:space="preserve">
          <source>Suspend the loader process.</source>
          <target state="translated">로더 프로세스를 일시 중단하십시오.</target>
        </trans-unit>
        <trans-unit id="e9bce0f224084ad788d49010d7d7d29a8ae63144" translate="yes" xml:space="preserve">
          <source>Suspend the processes using the module (to avoid that they try to handle any requests before the code replacement is completed).</source>
          <target state="translated">코드 교체가 완료되기 전에 요청을 처리하지 않도록 모듈을 사용하여 프로세스를 일시 중단하십시오.</target>
        </trans-unit>
        <trans-unit id="d39141a48920c1be93a6f36d09eebe0906941a82" translate="yes" xml:space="preserve">
          <source>Suspends the process calling this function for &lt;code&gt;Time&lt;/code&gt; milliseconds and then returns &lt;code&gt;ok&lt;/code&gt;, or suspends the process forever if &lt;code&gt;Time&lt;/code&gt; is the atom &lt;code&gt;infinity&lt;/code&gt;. Naturally, this function does &lt;strong&gt;not&lt;/strong&gt; return immediately.</source>
          <target state="translated">&lt;code&gt;Time&lt;/code&gt; 밀리 초 동안이 함수를 호출하는 프로세스를 일시 중단 한 다음 &lt;code&gt;ok&lt;/code&gt; 를 반환 하거나 &lt;code&gt;Time&lt;/code&gt; 이 원자 &lt;code&gt;infinity&lt;/code&gt; 경우 프로세스를 영원히 일시 중단합니다 . 당연히이 함수는 즉시 반환 되지 &lt;strong&gt;않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="e194543ef37bb55fceb51cd3ea6f4921bf279bc2" translate="yes" xml:space="preserve">
          <source>Suspends the process identified by &lt;code&gt;Suspendee&lt;/code&gt;. The same as calling &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt; erlang:suspend_process(Suspendee, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; 에서 식별 한 프로세스를 일시 중단합니다 . &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt; erlang:suspend_process(Suspendee, [])&lt;/a&gt;&lt;/code&gt; 호출과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="a2e824b6e4f75be4a07d7079e9c06b0752d0649c" translate="yes" xml:space="preserve">
          <source>Suspends the process identified by &lt;code&gt;Suspendee&lt;/code&gt;. The same as calling &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt;erlang:suspend_process(Suspendee, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; 가 식별 한 프로세스를 일시 중단합니다 . &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt;erlang:suspend_process(Suspendee, [])&lt;/a&gt;&lt;/code&gt; 호출과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="d982fb65e6d52487c1ff358f3e710016d64e310b" translate="yes" xml:space="preserve">
          <source>Suspends the process. When the process is suspended, it only responds to other system messages, but not other messages.</source>
          <target state="translated">프로세스를 일시 중단합니다. 프로세스가 일시 중단되면 다른 시스템 메시지에만 응답하지만 다른 메시지에는 응답하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4868e2fd51bda36328ddd3547e74c2e3f69d3c0e" translate="yes" xml:space="preserve">
          <source>Swaps places on &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Id&lt;/code&gt; space for ports and processes.</source>
          <target state="translated">포트 및 프로세스를 위해 &lt;code&gt;Name&lt;/code&gt; 및 &lt;code&gt;Id&lt;/code&gt; 공간의 위치를 교환 합니다.</target>
        </trans-unit>
        <trans-unit id="85a66af5fe9577ba36cb5dc160b5ab726c351f25" translate="yes" xml:space="preserve">
          <source>Switches off HTML enhancements that can be incompatible with older browsers.</source>
          <target state="translated">이전 브라우저와 호환되지 않는 HTML 향상 기능을 끕니다.</target>
        </trans-unit>
        <trans-unit id="f73cc71db4a1a943c0921fa8a5b8bb091227bf54" translate="yes" xml:space="preserve">
          <source>Syloti_Nagri</source>
          <target state="translated">Syloti_Nagri</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="ff671c52be278a122290e8362f747edf95308739" translate="yes" xml:space="preserve">
          <source>Symbolic Links in --bindir</source>
          <target state="translated">--bindir의 심볼릭 링크</target>
        </trans-unit>
        <trans-unit id="38614ef7ffaabdccf540bb23f1bf4109a9456e2e" translate="yes" xml:space="preserve">
          <source>Symbolic links are not supported on this platform.</source>
          <target state="translated">이 플랫폼에서는 기호 링크가 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b2db0c5c047d755597fe723f5b3906e0e790e5fa" translate="yes" xml:space="preserve">
          <source>Symbolic names must be unique within a MIB and within a system.</source>
          <target state="translated">기호 이름은 MIB 및 시스템 내에서 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="bc20e08aa6ee36e007fb8be42c9963c3987432d6" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the native time unit used by the Erlang runtime system.</source>
          <target state="translated">Erlang 런타임 시스템이 사용하는 기본 시간 단위를 상징적으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="9c3de4c1d499b9c4d2940a999036876a992d4f1a" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the performance counter time unit used by the Erlang runtime system.</source>
          <target state="translated">Erlang 런타임 시스템이 사용하는 성능 카운터 시간 단위의 상징적 표현.</target>
        </trans-unit>
        <trans-unit id="07800dda6fdaf0f476886edeef6a9aeb0d872f21" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000000000&lt;/code&gt;.</source>
          <target state="translated">시간 단위의 상징적 표현은 정수로 표현 &lt;code&gt;1000000000&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2649cc9e01c228ec0f5a481c6b1745e523dc1efc" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000000&lt;/code&gt;.</source>
          <target state="translated">시간 단위의 상징적 표현은 정수로 표현 &lt;code&gt;1000000&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b93ca2c4c24c9b54782ff7202cd91a428f51d3f7" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000&lt;/code&gt;.</source>
          <target state="translated">시간 단위의 상징적 표현은 정수로 표현 &lt;code&gt;1000&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="633bd41afc90fc634bd608830597b4174bcee6b4" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000_000&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;1000_000&lt;/code&gt; 정수로 표시되는 시간 단위의 기호 표시 .</target>
        </trans-unit>
        <trans-unit id="72ee087b32efaaf8f6368834f2240e7888911d07" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1000_000_000&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;1000_000_000&lt;/code&gt; 정수로 표시되는 시간 단위의 기호 표시 .</target>
        </trans-unit>
        <trans-unit id="9196744d900f2593e47a8bb8e5453768b4547c96" translate="yes" xml:space="preserve">
          <source>Symbolic representation of the time unit represented by the integer &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">시간 단위의 상징적 표현은 정수로 표현 &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fde31cc35fbdb6242bd81a4ff154a0d240c0fc6b" translate="yes" xml:space="preserve">
          <source>Symbols such as &lt;code&gt;'{'&lt;/code&gt;, &lt;code&gt;'.'&lt;/code&gt;, etc., have to be enclosed in single quotes when used as terminal or non-terminal symbols in grammar rules. The use of the symbols &lt;code&gt;'$empty'&lt;/code&gt;, &lt;code&gt;'$end'&lt;/code&gt;, and &lt;code&gt;'$undefined'&lt;/code&gt; should be avoided.</source>
          <target state="translated">&lt;code&gt;'{'&lt;/code&gt; , &lt;code&gt;'.'&lt;/code&gt; 와 같은 기호 등은 문법 규칙에서 터미널 또는 비 터미널 기호로 사용될 때 작은 따옴표로 묶어야합니다. 기호의 사용 &lt;code&gt;'$empty'&lt;/code&gt; , &lt;code&gt;'$end'&lt;/code&gt; , 그리고 &lt;code&gt;'$undefined'&lt;/code&gt; 피해야한다.</target>
        </trans-unit>
        <trans-unit id="555c3c32e1ed55b33d954d845c372bf2bb31a5de" translate="yes" xml:space="preserve">
          <source>Symbols that are defined in directives</source>
          <target state="translated">지시문에 정의 된 기호</target>
        </trans-unit>
        <trans-unit id="e6c13be05542d397298f393613981e3279a425af" translate="yes" xml:space="preserve">
          <source>Symetric cipher algorithm used for the payload encryption. This algorithm will use the key calculated in the kex phase (together with other info) to genereate the actual key used. Examples are tripple-DES &lt;code&gt;'3des-cbc'&lt;/code&gt; and one of many AES variants &lt;code&gt;'aes192-ctr'&lt;/code&gt;.</source>
          <target state="translated">페이로드 암호화에 사용되는 Symetric 암호 알고리즘. 이 알고리즘은 kex 단계에서 계산 된 키 (다른 정보와 함께)를 사용하여 사용 된 실제 키를 생성합니다. 예는 tripple-DES &lt;code&gt;'3des-cbc'&lt;/code&gt; 및 많은 AES 변형 &lt;code&gt;'aes192-ctr'&lt;/code&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="87f15c5c25b82750fdbe6837aad13a797f701d1e" translate="yes" xml:space="preserve">
          <source>Synchronization error during chunk sending according to one of the following:</source>
          <target state="translated">다음 중 하나에 따라 청크 전송 중 동기화 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="32b88210af732b7fa6f0597cd05eb328619f14e7" translate="yes" xml:space="preserve">
          <source>Synchronize (write to disc, if possible) the mib-server data. This depends on the &lt;code&gt;mib_storage&lt;/code&gt; option, and will only have an effect if the mib-storage option has an actual disc component (such as dets, or ets with a file).</source>
          <target state="translated">mib 서버 데이터를 동기화 (가능한 경우 디스크에 기록)하십시오. 이는 &lt;code&gt;mib_storage&lt;/code&gt; 옵션 에 따라 다르며 mib-storage 옵션에 실제 디스크 구성 요소 (예 : det 또는 파일이있는 ets)가있는 경우에만 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="312c1653b8bc7388af6f57b8ea1d1432ae577b59" translate="yes" xml:space="preserve">
          <source>Synchronize the mib-storage table.</source>
          <target state="translated">mib-storage 테이블을 동기화하십시오.</target>
        </trans-unit>
        <trans-unit id="e07fb72859a7d37936b725af7a1d5239adfbbe40" translate="yes" xml:space="preserve">
          <source>Synchronized code replacement of processes using module &lt;code&gt;Mod&lt;/code&gt;.</source>
          <target state="translated">모듈 &lt;code&gt;Mod&lt;/code&gt; 를 사용한 프로세스의 동기화 된 코드 교체 .</target>
        </trans-unit>
        <trans-unit id="01a1092f1791521fc50b0a1a453d3d4948b7f226" translate="yes" xml:space="preserve">
          <source>Synchronizes the global name server with all nodes known to this node. These are the nodes that are returned from &lt;code&gt;erlang:nodes()&lt;/code&gt;. When this function returns, the global name server receives global information from all nodes. This function can be called when new nodes are added to the network.</source>
          <target state="translated">글로벌 이름 서버를이 노드에 알려진 모든 노드와 동기화합니다. 이들은 &lt;code&gt;erlang:nodes()&lt;/code&gt; 에서 반환되는 노드입니다 . 이 함수가 반환되면 전역 이름 서버는 모든 노드에서 전역 정보를받습니다. 이 기능은 새로운 노드가 네트워크에 추가 될 때 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89fe354cd7884bf36eefa9b3c8217acccc91948e" translate="yes" xml:space="preserve">
          <source>Synchronizes the group nodes, that is, the global name servers on the group nodes. Also checks the names globally registered in the current global group and unregisters them on any known node not part of the group.</source>
          <target state="translated">그룹 노드, 즉 그룹 노드의 글로벌 이름 서버를 동기화합니다. 또한 현재 글로벌 그룹에 글로벌로 등록 된 이름을 확인하고 그룹의 일부가 아닌 알려진 노드에서 등록을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="07710d25b770f253a75d0aab226aa1ae135666c1" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;get-bulk-request&lt;/code&gt; (See RFC1905).</source>
          <target state="translated">동기 &lt;code&gt;get-bulk-request&lt;/code&gt; (RFC1905 참조).</target>
        </trans-unit>
        <trans-unit id="f448ebbd4129a3291d4535aeab92c4cc47e4ddab" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;get-next-request&lt;/code&gt;.</source>
          <target state="translated">동기식 &lt;code&gt;get-next-request&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0b2b2fa27dbb4052bd3748ef0458bfd012b62beb" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;get-request&lt;/code&gt;.</source>
          <target state="translated">동기식 &lt;code&gt;get-request&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e513e56abe4ab6731c1a205d51fc5b5980806174" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;code&gt;set-request&lt;/code&gt;.</source>
          <target state="translated">동기식 &lt;code&gt;set-request&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="33a68e25327ecc51a99120fe1d23ee0e50bf0b8b" translate="yes" xml:space="preserve">
          <source>Synchronously appends a list of items to the log. It is more efficient to use these functions instead of functions &lt;code&gt;log/2&lt;/code&gt; and &lt;code&gt;blog/2&lt;/code&gt;. The specified list is split into as large sublists as possible (limited by the size of wrap log files), and each sublist is logged as one single item, which reduces the overhead.</source>
          <target state="translated">항목 목록을 동 기적으로 로그에 추가합니다. &lt;code&gt;log/2&lt;/code&gt; 및 &lt;code&gt;blog/2&lt;/code&gt; 함수 대신 이러한 함수를 사용하는 것이 더 효율적 입니다. 지정된 목록은 가능한 한 큰 하위 목록 (랩 로그 파일의 크기로 제한됨)으로 분할되며 각 하위 목록은 하나의 단일 항목으로 기록되므로 오버 헤드가 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="089dc8c699a717858006211347bb6b82478e752b" translate="yes" xml:space="preserve">
          <source>Synchronously appends a term to a disk log. Returns &lt;code&gt;ok&lt;/code&gt; or &lt;code&gt;{error, Reason}&lt;/code&gt; when the term is written to disk. If the log is distributed, &lt;code&gt;ok&lt;/code&gt; is returned, unless all nodes are down. Terms are written by the ordinary &lt;code&gt;write()&lt;/code&gt; function of the operating system. Hence, it is not guaranteed that the term is written to disk, it can linger in the operating system kernel for a while. To ensure that the item is written to disk, function &lt;code&gt;&lt;a href=&quot;#sync-1&quot;&gt;sync/1&lt;/a&gt;&lt;/code&gt; must be called.</source>
          <target state="translated">디스크 로그에 용어를 동 기적으로 추가합니다. 용어를 디스크에 쓸 때 &lt;code&gt;ok&lt;/code&gt; 또는 &lt;code&gt;{error, Reason}&lt;/code&gt; 반환 합니다. 로그가 분배되면 모든 노드가 작동 중지되지 않는 한 &lt;code&gt;ok&lt;/code&gt; 가 리턴됩니다. 용어는 운영 체제 의 일반적인 &lt;code&gt;write()&lt;/code&gt; 함수로 작성됩니다 . 따라서이 용어가 디스크에 기록된다고 보장 할 수 없으며 운영 체제 커널에 잠시 동안 머무를 수 있습니다. 항목이 디스크에 기록되도록하려면 &lt;code&gt;&lt;a href=&quot;#sync-1&quot;&gt;sync/1&lt;/a&gt;&lt;/code&gt; 기능을 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bf88f88a2eeb237b14ce9670bec894268afdc26e" translate="yes" xml:space="preserve">
          <source>Syntactic sugar for specific instructions</source>
          <target state="translated">특정 지침에 대한 구문 설탕</target>
        </trans-unit>
        <trans-unit id="34f5f72fe0e623ff3475c94b03480e1803098c61" translate="yes" xml:space="preserve">
          <source>Syntactic tests are used in the code associated with some rules, and an error is thrown (and caught by the generated parser to produce an error message) when a test fails. The same effect can be achieved with a call to &lt;code&gt;return_error(Error_line, Message_string)&lt;/code&gt;, which is defined in the &lt;code&gt;yeccpre.hrl&lt;/code&gt; default header file.</source>
          <target state="translated">구문 테스트는 일부 규칙과 관련된 코드에서 사용되며 테스트에 실패하면 오류가 발생합니다 (생성 된 구문 분석기가 오류 메시지를 생성하기 위해 발생 함). &lt;code&gt;yeccpre.hrl&lt;/code&gt; 기본 헤더 파일에 정의 된 &lt;code&gt;return_error(Error_line, Message_string)&lt;/code&gt; 호출로도 동일한 효과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8ebec072eed621a03687383916a65b1244e3a80a" translate="yes" xml:space="preserve">
          <source>Syntactically QLCs have the same parts as ordinary list comprehensions:</source>
          <target state="translated">구문 적으로 QLC는 일반 목록 이해와 동일한 부분을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="f8f94a7abd535bc567b210e7feb24b95dcc145dd" translate="yes" xml:space="preserve">
          <source>Syntax according to the URI definition in RFC 3986, for example, &quot;http://www.erlang.org/&quot;</source>
          <target state="translated">RFC 3986의 URI 정의에 따른 구문 (예 : &quot;http://www.erlang.org/&quot;</target>
        </trans-unit>
        <trans-unit id="3aef52650439fcc381066161b6a33ff26aa88627" translate="yes" xml:space="preserve">
          <source>Syntax errors are detected locally on this side of the protocol and may have many causes, e.g. a malfunctioning transport layer, wrong encoder/decoder selected, bad configuration of the selected encoder/decoder etc.</source>
          <target state="translated">구문 오류는 프로토콜의이 측면에서 로컬로 감지되며 전송 계층 오작동, 잘못된 인코더 / 디코더 선택, 선택한 인코더 / 디코더의 잘못된 구성 등 여러 가지 원인이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3b09d06cdfdc92cef412c5e43702c1e9bf45027" translate="yes" xml:space="preserve">
          <source>Syntax errors in these files are discovered and reported with the function &lt;code&gt;config_err/2&lt;/code&gt; of the error report module at start-up.</source>
          <target state="translated">이러한 파일의 구문 오류는 시작시 오류 보고서 모듈의 &lt;code&gt;config_err/2&lt;/code&gt; 기능으로 감지 및보고 됩니다.</target>
        </trans-unit>
        <trans-unit id="037fceb004812e2c76fd4ee125e5787960e7ee91" translate="yes" xml:space="preserve">
          <source>Syntax highlighting</source>
          <target state="translated">구문 강조</target>
        </trans-unit>
        <trans-unit id="bf9043e36932db78d75fd6b5431b30a3a7d8a459" translate="yes" xml:space="preserve">
          <source>Syntax trees are defined in the module &lt;code&gt;&lt;a href=&quot;cerl&quot;&gt;cerl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">구문 트리는 &lt;code&gt;&lt;a href=&quot;cerl&quot;&gt;cerl&lt;/a&gt;&lt;/code&gt; 모듈에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bc253a36e8ace3c94e28555bf56cc77650f265b" translate="yes" xml:space="preserve">
          <source>Syriac</source>
          <target state="translated">Syriac</target>
        </trans-unit>
        <trans-unit id="713b52817cd3e83897b2deeaff697e599a41a58e" translate="yes" xml:space="preserve">
          <source>System Events</source>
          <target state="translated">시스템 이벤트</target>
        </trans-unit>
        <trans-unit id="5131fe5695bc3ce3887d236a54747934336afaf8" translate="yes" xml:space="preserve">
          <source>System Information</source>
          <target state="translated">시스템 정보</target>
        </trans-unit>
        <trans-unit id="d6199bfc4f61462fd3d98e726e6c8768fbe7445e" translate="yes" xml:space="preserve">
          <source>System Messages</source>
          <target state="translated">시스템 메시지</target>
        </trans-unit>
        <trans-unit id="b35b204150b6742e0c35cf28de6a47c6519eee30" translate="yes" xml:space="preserve">
          <source>System events and table events are the two event categories that &lt;code&gt;Mnesia&lt;/code&gt; generates in various situations.</source>
          <target state="translated">시스템 이벤트 및 테이블 이벤트는 &lt;code&gt;Mnesia&lt;/code&gt; 가 다양한 상황에서 생성 하는 두 가지 이벤트 범주입니다 .</target>
        </trans-unit>
        <trans-unit id="7ca52b12819dad012ad5eb499f8d3b89db539ac8" translate="yes" xml:space="preserve">
          <source>System flags effecting specific allocators have an uppercase letter as &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;. The following letters are used for the allocators:</source>
          <target state="translated">특정 할당 자에 영향을주는 시스템 플래그는 대문자가 &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; 입니다. 다음 문자는 할당 자에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="906ee68749a5a73a7e6af2237eb2dee1edbbf171" translate="yes" xml:space="preserve">
          <source>System info - System wide information. Read only.</source>
          <target state="translated">시스템 정보-시스템 전체 정보. 읽기 전용.</target>
        </trans-unit>
        <trans-unit id="5474f690d82670c5da64f04996c609d92047ddb8" translate="yes" xml:space="preserve">
          <source>System messages are messages with a special meaning, used in the supervision tree. Typical system messages are requests for trace output, and requests to suspend or resume process execution (used during release handling). Processes implemented using standard behaviours automatically understand these messages.</source>
          <target state="translated">시스템 메시지는 감독 트리에서 사용되는 특별한 의미의 메시지입니다. 일반적인 시스템 메시지는 추적 출력 요청 및 프로세스 실행 일시 중지 또는 재개 요청 (릴리스 처리 중 사용)입니다. 표준 동작을 사용하여 구현 된 프로세스는 이러한 메시지를 자동으로 이해합니다.</target>
        </trans-unit>
        <trans-unit id="1b4c8fad84bf9ee2ed69c28438abdf60dfd04975" translate="yes" xml:space="preserve">
          <source>System settings</source>
          <target state="translated">환경 설정</target>
        </trans-unit>
        <trans-unit id="97a5f85605eef008a7bb7f2a0d512d9d724526bc" translate="yes" xml:space="preserve">
          <source>SystemTap &amp;gt; 1.6</source>
          <target state="translated">SystemTap&amp;gt; 1.6</target>
        </trans-unit>
        <trans-unit id="5bf881dc1f558738602aecd490c360ffa2d35d9f" translate="yes" xml:space="preserve">
          <source>SystemTap is DTrace for Linux. In fact Erlang's SystemTap support is build using SystemTap's DTrace compatibility's layer. For an introduction to Erlang DTrace support read &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;$ERL_TOP/HOWTO/DTRACE.md&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SystemTap은 Linux 용 DTrace입니다. 실제로 Erlang의 SystemTap 지원은 SystemTap의 DTrace 호환성 계층을 사용하여 빌드됩니다. Erlang DTrace 지원에 대한 소개는 &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;$ERL_TOP/HOWTO/DTRACE.md&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="647626181c6b841116274ba423880c16dad59779" translate="yes" xml:space="preserve">
          <source>SystemTap is DTrace for Linux. In fact Erlang's SystemTap support is built using SystemTap's DTrace compatibility's layer. For an introduction to Erlang DTrace support read &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;$ERL_TOP/HOWTO/DTRACE.md&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SystemTap은 Linux 용 DTrace입니다. 사실 Erlang의 SystemTap 지원은 SystemTap의 DTrace 호환성 레이어를 사용하여 구축되었습니다. Erlang DTrace 지원에 대한 소개는 &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;$ERL_TOP/HOWTO/DTRACE.md&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a67e86af30e598c1b8dd4410e063b04f3f531fa" translate="yes" xml:space="preserve">
          <source>SystemTap, unlike DTrace, needs to know what binary it is tracing and has to be able to read that binary before it starts tracing. Your probe script therefor has to reference the correct beam emulator and stap needs to be able to find that binary. The examples are written for &quot;beam&quot;, but other versions such as &quot;beam.smp&quot; or &quot;beam.debug.smp&quot; might exist (depending on your configuration). Make sure you either specify the full the path of the binary in the probe or your &quot;beam&quot; binary is in the search path.</source>
          <target state="translated">DTrace와 달리 SystemTap은 추적중인 바이너리를 알아야하며 추적을 시작하기 전에 해당 바이너리를 읽을 수 있어야합니다. 이를위한 프로브 스크립트는 올바른 빔 에뮬레이터를 참조해야하며 스태프가 해당 바이너리를 찾을 수 있어야합니다. 예제는 &quot;beam&quot;용으로 작성되었지만 &quot;beam.smp&quot;또는 &quot;beam.debug.smp&quot;와 같은 다른 버전이있을 수 있습니다 (구성에 따라 다름). 프로브에서 바이너리의 전체 경로를 지정하거나 &quot;빔&quot;바이너리가 검색 경로에 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="3890f6e1eeb7c8b9e6d4cda8af3654adab1e5a34" translate="yes" xml:space="preserve">
          <source>TCP over IPv4 (the default)</source>
          <target state="translated">IPv4를 통한 TCP (기본값)</target>
        </trans-unit>
        <trans-unit id="dd63ca133c7c9505341195d3fb66a2e4d3b97381" translate="yes" xml:space="preserve">
          <source>TCP over IPv6</source>
          <target state="translated">IPv6을 통한 TCP</target>
        </trans-unit>
        <trans-unit id="632a64251d0c7abdae5037898015259a35971d19" translate="yes" xml:space="preserve">
          <source>TLS 1.2 is required</source>
          <target state="translated">TLS 1.2가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="293be597ea71b326fa60a72a8c70b5056933dfed" translate="yes" xml:space="preserve">
          <source>TLS 1.3 introduces a new secure way of resuming sessions by using session tickets. A session ticket is an opaque data structure that is sent in the pre_shared_key extension of a ClientHello, when a client attempts to resume a session with keying material from a previous successful handshake.</source>
          <target state="translated">TLS 1.3에는 세션 티켓을 사용하여 세션을 재개하는 새로운 보안 방법이 도입되었습니다. 세션 티켓은 클라이언트가 이전에 성공한 핸드 셰이크의 키 자료로 세션을 재개하려고 할 때 ClientHello의 pre_shared_key 확장으로 전송되는 불투명 한 데이터 구조입니다.</target>
        </trans-unit>
        <trans-unit id="ff398a94404df22fe1dbea6cf0a7d6d8413176c0" translate="yes" xml:space="preserve">
          <source>TLS 1.3 introduces the &quot;supported_groups&quot; extension that is used for negotiating the Diffie-Hellman parameters in a TLS 1.3 handshake. Both client and server can specify a list of parameters that they are willing to use.</source>
          <target state="translated">TLS 1.3에는 TLS 1.3 핸드 셰이크에서 Diffie-Hellman 매개 변수를 협상하는 데 사용되는 &quot;supported_groups&quot;확장이 도입되었습니다. 클라이언트와 서버는 모두 사용할 매개 변수 목록을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04ee2e323dc35fc805718ec013670729358e3a49" translate="yes" xml:space="preserve">
          <source>TLS protocol versions supported by started clients and servers. This option overrides the application environment option &lt;code&gt;protocol_version&lt;/code&gt; and &lt;code&gt;dtls_protocol_version&lt;/code&gt;. If the environment option is not set, it defaults to all versions, except SSL-3.0, supported by the SSL application. See also &lt;code&gt;ssl(6).&lt;/code&gt;</source>
          <target state="translated">시작된 클라이언트 및 서버가 지원하는 TLS 프로토콜 버전. 이 옵션은 애플리케이션 환경 옵션 &lt;code&gt;protocol_version&lt;/code&gt; 및 &lt;code&gt;dtls_protocol_version&lt;/code&gt; 을 대체합니다 . 환경 옵션이 설정되어 있지 않으면 SSL 응용 프로그램에서 지원하는 SSL-3.0을 제외한 모든 버전으로 기본 설정됩니다. &lt;code&gt;ssl(6).&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c66ecfe8a8331b0fda5f8d9e9d4fc3bb224f5e4b" translate="yes" xml:space="preserve">
          <source>TLS protocol versions supported by started clients and servers. This option overrides the application environment option &lt;code&gt;protocol_version&lt;/code&gt; and &lt;code&gt;dtls_protocol_version&lt;/code&gt;. If the environment option is not set, it defaults to all versions, supported by the SSL application. See also &lt;code&gt;ssl(6).&lt;/code&gt;</source>
          <target state="translated">시작된 클라이언트 및 서버에서 지원하는 TLS 프로토콜 버전. 이 옵션은 응용 프로그램 환경 옵션 &lt;code&gt;protocol_version&lt;/code&gt; 및 &lt;code&gt;dtls_protocol_version&lt;/code&gt; 을 재정의합니다 . 환경 옵션이 설정되지 않은 경우 기본값은 SSL 애플리케이션에서 지원하는 모든 버전입니다. &lt;code&gt;ssl(6).&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="981d4d11fc961a401155c4cc0aa1d985387ff5d6" translate="yes" xml:space="preserve">
          <source>TLS session cache API</source>
          <target state="translated">TLS 세션 캐시 API</target>
        </trans-unit>
        <trans-unit id="7c0e6ea268c454f62fab725d1820561944c1a4ee" translate="yes" xml:space="preserve">
          <source>TLS versions supported with current application environment and crypto library configuration. Overridden by a version option on &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt; connect/[2,3,4]&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt; listen/2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#ssl_accept-2&quot;&gt;ssl_accept/[1,2,3]&lt;/a&gt;&lt;/code&gt;. For the negotiated TLS version, see &lt;code&gt;&lt;a href=&quot;#connection_information-1&quot;&gt;connection_information/1 &lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">현재 애플리케이션 환경 및 암호화 라이브러리 구성에서 지원되는 TLS 버전. &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt; connect/[2,3,4]&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt; listen/2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#ssl_accept-2&quot;&gt;ssl_accept/[1,2,3]&lt;/a&gt;&lt;/code&gt; 의 버전 옵션으로 재정의됩니다 . 협상 된 TLS 버전은 &lt;code&gt;&lt;a href=&quot;#connection_information-1&quot;&gt;connection_information/1 &lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9826fb8e341b5be4b1c980dfe0b80fa88cb57737" translate="yes" xml:space="preserve">
          <source>TLS-1.3 has no overlapping cipher suites with previous TLS versions, that is the result of &lt;code&gt;cipher_suites(all, 'tlsv1.3').&lt;/code&gt; contains a separate set of suites that can be used with TLS-1.3 an other set that can be used if a lower version is negotiated. No anonymous suites are supported by TLS-1.3.</source>
          <target state="translated">TLS-1.3에는 이전 TLS 버전과 겹치는 암호 제품군이 없습니다. 즉, &lt;code&gt;cipher_suites(all, 'tlsv1.3').&lt;/code&gt; 의 결과입니다 . TLS-1.3과 함께 사용할 수있는 별도의 제품군 집합이 포함되어 있으며 하위 버전이 협상되는 경우 사용할 수있는 다른 집합이 있습니다. TLS-1.3은 익명 제품군을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e94e9c75d010097e7531f3a3ba84f1488ca64dd6" translate="yes" xml:space="preserve">
          <source>TLS/DTLS OPTION DESCRIPTIONS - CLIENT</source>
          <target state="translated">TLS / DTLS 옵션 설명-클라이언트</target>
        </trans-unit>
        <trans-unit id="12fd59aafefdbaff5d73622ebb4d18962d0499ca" translate="yes" xml:space="preserve">
          <source>TLS/DTLS OPTION DESCRIPTIONS - COMMON for SERVER and CLIENT</source>
          <target state="translated">TLS / DTLS 옵션 설명-서버 및 클라이언트에 공통</target>
        </trans-unit>
        <trans-unit id="e0296c2260dd50dc1c748dea7f9eaf92fa1a1468" translate="yes" xml:space="preserve">
          <source>TLS/DTLS OPTION DESCRIPTIONS - SERVER</source>
          <target state="translated">TLS / DTLS 옵션 설명-서버</target>
        </trans-unit>
        <trans-unit id="e297ce43abfa4341900c35352befe7e5a48a3921" translate="yes" xml:space="preserve">
          <source>TLS/TCP and DTLS/SCTP Usage</source>
          <target state="translated">TLS / TCP 및 DTLS / SCTP 사용법</target>
        </trans-unit>
        <trans-unit id="c623d902979695280289e74ae4ece46478b14011" translate="yes" xml:space="preserve">
          <source>TLS_AES_128_CCM_8_SHA256</source>
          <target state="translated">TLS_AES_128_CCM_8_SHA256</target>
        </trans-unit>
        <trans-unit id="3aaa122d8f60ab32205d3dc283fc0ad1deb2e4ea" translate="yes" xml:space="preserve">
          <source>TLS_AES_128_CCM_SHA256</source>
          <target state="translated">TLS_AES_128_CCM_SHA256</target>
        </trans-unit>
        <trans-unit id="772908328acd88856cb8ed5ee55f887c1247f9ec" translate="yes" xml:space="preserve">
          <source>TLS_AES_128_GCM_SHA256</source>
          <target state="translated">TLS_AES_128_GCM_SHA256</target>
        </trans-unit>
        <trans-unit id="ec2af1293141c65bcb82a2dec0ed17cfa44e8ca4" translate="yes" xml:space="preserve">
          <source>TLS_AES_256_GCM_SHA384</source>
          <target state="translated">TLS_AES_256_GCM_SHA384</target>
        </trans-unit>
        <trans-unit id="6d3746fa6ba7e82f5ce446eb2970dd18e965a14b" translate="yes" xml:space="preserve">
          <source>TLS_CHACHA20_POLY1305_SHA256</source>
          <target state="translated">TLS_CHACHA20_POLY1305_SHA256</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="d7f5ee722fd0ae504f8d3c4d7a205b2fef8a3d7f" translate="yes" xml:space="preserve">
          <source>Tab (hex 09)</source>
          <target state="translated">탭 (16 진수 09)</target>
        </trans-unit>
        <trans-unit id="ac4a8afcda713e36d6e9d6a34b43dbf38fa7e2cb" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Applications&lt;/strong&gt; presents application information. Select an application in the left list to display its supervisor tree. The right-click options in the tree are as follows:</source>
          <target state="translated">&lt;strong&gt;응용 프로그램&lt;/strong&gt; 탭 에는 응용 프로그램 정보가 표시됩니다. 왼쪽 목록에서 응용 프로그램을 선택하여 수퍼바이저 트리를 표시하십시오. 트리에서 마우스 오른쪽 버튼 클릭 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a99c25e3c4704f469b96b031da459e53abfe6fa8" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Atoms&lt;/strong&gt; lists all atoms found in the dump. By default the atoms are sorted in creation order from first to last. This is opposite of the raw crashdump where atoms are listed from last to first, meaning that if the dump was truncated in the middle of the atom list, only the last created atoms are visible in the &lt;strong&gt;Atoms&lt;/strong&gt; tab.</source>
          <target state="translated">탭 &lt;strong&gt;원자&lt;/strong&gt; 는 덤프에서 발견 된 모든 &lt;strong&gt;원자를&lt;/strong&gt; 나열합니다. 기본적으로 원자는 처음부터 끝까지 생성 순서대로 정렬됩니다. 원자가 마지막에서 처음으로 나열되는 원시 크래시 덤프와 반대입니다. 즉, 원자 목록의 중간에서 덤프가 잘린 경우 마지막으로 생성 된 원자 만 &lt;strong&gt;원자&lt;/strong&gt; 탭에 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="33be1b6f25987c84258604714f597ef47abe12d6" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;ETS Tables&lt;/strong&gt; shows all ETS table information found in the dump. &lt;strong&gt;Id&lt;/strong&gt; is the same as the 'Table' field in the raw crashdump. &lt;strong&gt;Memory&lt;/strong&gt; is the 'Words' field from the raw crashdump translated into bytes. For tree tables, there is no value in the 'Objects' field.</source>
          <target state="translated">탭 &lt;strong&gt;ETS 테이블&lt;/strong&gt; 에는 덤프에서 찾은 모든 ETS 테이블 정보가 표시됩니다. &lt;strong&gt;ID&lt;/strong&gt; 는 원시 크래시 덤프의 '테이블'필드와 동일합니다. &lt;strong&gt;메모리&lt;/strong&gt; 는 원시 크래시 덤프의 '워드'필드로 바이트로 변환됩니다. 트리 테이블의 경우 '개체'필드에 값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d086aaa9e2e638560ca52f2f78e7b03c35094870" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Funs&lt;/strong&gt; shows all fun information found in the dump.</source>
          <target state="translated">탭 &lt;strong&gt;기능&lt;/strong&gt; 은 덤프에서 발견 된 모든 기능 정보를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="25121d69819c8efb4b19c73b31c386b78a1fdbb2" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;General&lt;/strong&gt; shows a short overview of the dump.</source>
          <target state="translated">&lt;strong&gt;일반&lt;/strong&gt; 탭 에는 덤프에 대한 간략한 개요가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="07e01288b5805bf1432af8b394a9b45442c593c3" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Load Charts&lt;/strong&gt; displays graphs of the current resource use on the active Erlang node.</source>
          <target state="translated">탭 &lt;strong&gt;로드 차트&lt;/strong&gt; 는 활성 Erlang 노드에서 현재 자원 사용 그래프를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="853f32a45947eb4c6d161de3626c9eaa0a83a4aa" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Memory Allocators&lt;/strong&gt; displays detailed information of the carrier size and current memory carriers. For details about memory carriers, see module &lt;code&gt;erts_alloc&lt;/code&gt; in application ERTS.</source>
          <target state="translated">탭 &lt;strong&gt;메모리 할당&lt;/strong&gt; 자는 캐리어 크기 및 현재 메모리 캐리어에 대한 자세한 정보를 표시합니다. 메모리 캐리어에 대한 자세한 내용은 애플리케이션 ERTS의 모듈 &lt;code&gt;erts_alloc&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc3b4b0a4502f9b7b7c51416e31fdfd021b9067e" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Memory&lt;/strong&gt; shows memory and allocator information. From the left-hand menu you can select the following:</source>
          <target state="translated">탭 &lt;strong&gt;메모리&lt;/strong&gt; 는 메모리 및 할당 자 정보를 보여줍니다. 왼쪽 메뉴에서 다음을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27ba8745969c8d5f12e6c931fd214d70f5efac15" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Modules&lt;/strong&gt; lists all modules loaded on the originating node, and the current code size. If old code exists, the old size is also shown.</source>
          <target state="translated">탭 &lt;strong&gt;모듈&lt;/strong&gt; 은 원래 노드에로드 된 모든 모듈과 현재 코드 크기를 나열합니다. 이전 코드가 존재하면 이전 크기도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="eaf448913218cac98b494d3245a11c82d5371831" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Nodes&lt;/strong&gt; shows a list of all external Erlang nodes that are referenced from the crashdump.</source>
          <target state="translated">탭 &lt;strong&gt;노드&lt;/strong&gt; 는 크래시 덤프에서 참조되는 모든 외부 Erlang 노드 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="80764d8faf4781bc8ce3e0b8874a18d7e0699dd0" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Ports&lt;/strong&gt; is similar to the &lt;strong&gt;Processes&lt;/strong&gt; tab, except it lists all ports found in the crashdump.</source>
          <target state="translated">탭 &lt;strong&gt;포트&lt;/strong&gt; 는 크래시 덤프에서 발견 된 모든 포트를 나열한다는 점을 제외하고 &lt;strong&gt;프로세스&lt;/strong&gt; 탭 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="76b66410e4f2402b3acc96cda65eec1371b79f1b" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Ports&lt;/strong&gt; lists port information in columns. For each port the following information is displayed:</source>
          <target state="translated">탭 &lt;strong&gt;포트&lt;/strong&gt; 는 포트 정보를 열로 나열합니다. 각 포트에 대해 다음 정보가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="5f5391882f31ea5c33386e235a2386ab3a7ce9b1" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Processes&lt;/strong&gt; lists process information in columns. For each process the following information is displayed:</source>
          <target state="translated">탭 &lt;strong&gt;프로세스&lt;/strong&gt; 는 프로세스 정보를 열로 나열합니다. 각 프로세스마다 다음 정보가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="81e00bdbb07b70180cc90e9aaa68bf4d038cb024" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Processes&lt;/strong&gt; shows a list of all processes found in the crashdump, including brief information about each process. By default, the processes are sorted by their pids. To sort by another topic, click the desired column heading.</source>
          <target state="translated">탭 &lt;strong&gt;프로세스&lt;/strong&gt; 에는 각 프로세스에 대한 간단한 정보를 포함하여 크래시 덤프에서 발견 된 모든 프로세스의 목록이 표시됩니다. 기본적으로 프로세스는 pid로 정렬됩니다. 다른 주제별로 정렬하려면 원하는 열 제목을 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="37ee8ff7801abf11d7bda8a37bc6cfc86f955eeb" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Schedulers&lt;/strong&gt; shows all scheduler information found in the dump.</source>
          <target state="translated">탭 &lt;strong&gt;스케줄러&lt;/strong&gt; 는 덤프에서 찾은 모든 스케줄러 정보를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ae16dafe965fd6bba4b8e61efd1280d8b73f7cdd" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;System&lt;/strong&gt; displays general information about the active Erlang node and its runtime system, such as build configuration, system capabilities, and overall use statistics.</source>
          <target state="translated">탭 &lt;strong&gt;시스템&lt;/strong&gt; 은 빌드 구성, 시스템 기능 및 전체 사용 통계와 같은 활성 Erlang 노드 및 해당 런타임 시스템에 대한 일반 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="2dc8b2d71fceee93b7ee5110352b556240629d35" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Table Viewer&lt;/strong&gt; lists tables. By default, ETS tables are displayed whereas unreadable private ETS tables and tables created by OTP applications are not diplayed. Use menu &lt;strong&gt;View&lt;/strong&gt; to view &quot;system&quot; ETS tables, unreadable ETS tables, or Mnesia tables.</source>
          <target state="translated">탭 &lt;strong&gt;테이블 뷰어&lt;/strong&gt; 는 테이블을 나열합니다. 기본적으로 ETS 테이블이 표시되는 반면 읽을 수없는 개인 ETS 테이블과 OTP 응용 프로그램에서 만든 테이블은 표시되지 않습니다. &quot;시스템&quot;ETS 테이블, 읽을 수없는 ETS 테이블 또는 Mnesia 테이블을 보려면 메뉴 &lt;strong&gt;보기&lt;/strong&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c749a9404534acc9874c4dddfbf96e28d745b82f" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Timers&lt;/strong&gt; shows all timer information found in the dump.</source>
          <target state="translated">탭 &lt;strong&gt;타이머&lt;/strong&gt; 는 덤프에서 찾은 모든 타이머 정보를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="532adb7424e374188bddb153f94b5dffdd01a32b" translate="yes" xml:space="preserve">
          <source>Tab &lt;strong&gt;Trace Overview&lt;/strong&gt; handles tracing. Trace by selecting the processes or ports to be traced and how to trace them. For processes, you can trace messages, function calls, scheduling, garbage collections, and process-related events such as &lt;code&gt;spawn&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, and many others. For ports, you can trace messages, scheduling and port-related events.</source>
          <target state="translated">탭 &lt;strong&gt;추적 개요&lt;/strong&gt; 는 추적을 처리합니다. 추적 할 프로세스 또는 포트와 추적 방법을 선택하여 추적하십시오. 프로세스의 경우, 메시지, 함수 호출, 스케줄링, 가비지 콜렉션 및 &lt;code&gt;spawn&lt;/code&gt; , &lt;code&gt;exit&lt;/code&gt; 및 기타 여러 가지와 같은 프로세스 관련 이벤트를 추적 할 수 있습니다. 포트의 경우 메시지, 스케줄링 및 포트 관련 이벤트를 추적 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3b24916106c05d16fc45b26f326aea8327897c3" translate="yes" xml:space="preserve">
          <source>Tab.</source>
          <target state="translated">Tab.</target>
        </trans-unit>
        <trans-unit id="78e563ed4498b45afa55a612a7d50d8010f51d47" translate="yes" xml:space="preserve">
          <source>Table 1.1:</source>
          <target state="translated">표 1.1 :</target>
        </trans-unit>
        <trans-unit id="2ba8d01b5f4587ab25a8cf9806410e2f7f1f467f" translate="yes" xml:space="preserve">
          <source>Table 1.1: Configuration Parameters</source>
          <target state="translated">표 1.1 : 구성 매개 변수</target>
        </trans-unit>
        <trans-unit id="458a619e647863b2edbd583f53f1c4f27cc2c7fd" translate="yes" xml:space="preserve">
          <source>Table 1.1: File Types</source>
          <target state="translated">표 1.1 : 파일 형식</target>
        </trans-unit>
        <trans-unit id="d257f726296380c878ec40caabc8bee011031308" translate="yes" xml:space="preserve">
          <source>Table 10.1: Memory Size of Different Data Types</source>
          <target state="translated">표 10.1 : 다른 데이터 유형의 메모리 크기</target>
        </trans-unit>
        <trans-unit id="1177d151257b31d9c29f7aa373dc11ffece292c4" translate="yes" xml:space="preserve">
          <source>Table 10.2: System Limits</source>
          <target state="translated">표 10.2 : 시스템 제한</target>
        </trans-unit>
        <trans-unit id="fd59220c9b680aec464f9d24199fa3a8abdb16d2" translate="yes" xml:space="preserve">
          <source>Table 11.1: Exception Classes.</source>
          <target state="translated">표 11.1 : 예외 클래스</target>
        </trans-unit>
        <trans-unit id="d6b64accf1c2234e132511d0019f44d13d7aeb9f" translate="yes" xml:space="preserve">
          <source>Table 11.1: Tool Summary</source>
          <target state="translated">표 11.1 : 도구 요약</target>
        </trans-unit>
        <trans-unit id="f6169b398a7ff5ef27d299293d71cfddab2f0858" translate="yes" xml:space="preserve">
          <source>Table 11.2: Exit Reasons</source>
          <target state="translated">표 11.2 : 종료 이유</target>
        </trans-unit>
        <trans-unit id="d2e0fc522c39a48dc20fe0402d75767f7f7470a7" translate="yes" xml:space="preserve">
          <source>Table 12.10: Continuing Fragmented Distribution Header Format</source>
          <target state="translated">표 12.10 : 계속되는 조각난 배포 헤더 형식</target>
        </trans-unit>
        <trans-unit id="b30a60a6dd809b8b57e40c37cb359be1d19a90fa" translate="yes" xml:space="preserve">
          <source>Table 12.10: SMALL_INTEGER_EXT</source>
          <target state="translated">표 12.10 : SMALL_INTEGER_EXT</target>
        </trans-unit>
        <trans-unit id="ac036096f824df0f511cebb8051eb6de69898bb2" translate="yes" xml:space="preserve">
          <source>Table 12.11: ATOM_CACHE_REF</source>
          <target state="translated">표 12.11 : ATOM_CACHE_REF</target>
        </trans-unit>
        <trans-unit id="9866b94803a8e807cf22a1060604d66f72a8ea46" translate="yes" xml:space="preserve">
          <source>Table 12.11: INTEGER_EXT</source>
          <target state="translated">표 12.11 : INTEGER_EXT</target>
        </trans-unit>
        <trans-unit id="58ca896888c5b6bdb23917ab9d4badd52b5d9e0c" translate="yes" xml:space="preserve">
          <source>Table 12.12: FLOAT_EXT</source>
          <target state="translated">표 12.12 : FLOAT_EXT</target>
        </trans-unit>
        <trans-unit id="cb7afb2437d414486d5918fdcc863243eaa8575e" translate="yes" xml:space="preserve">
          <source>Table 12.12: SMALL_INTEGER_EXT</source>
          <target state="translated">표 12.12 : SMALL_INTEGER_EXT</target>
        </trans-unit>
        <trans-unit id="9eced4132aff48c73c92e33af7f07065f4889786" translate="yes" xml:space="preserve">
          <source>Table 12.13: INTEGER_EXT</source>
          <target state="translated">표 12.13 : INTEGER_EXT</target>
        </trans-unit>
        <trans-unit id="2fd6bbf622d7c5bf5fb9063eb1831d2717f4dd60" translate="yes" xml:space="preserve">
          <source>Table 12.13: REFERENCE_EXT</source>
          <target state="translated">표 12.13 : REFERENCE_EXT</target>
        </trans-unit>
        <trans-unit id="93eba1e4bb53d2d3fb1e657845aaad742e617b82" translate="yes" xml:space="preserve">
          <source>Table 12.14: FLOAT_EXT</source>
          <target state="translated">표 12.14 : FLOAT_EXT</target>
        </trans-unit>
        <trans-unit id="0578060eac8303938de8c878ec3873fcb4318376" translate="yes" xml:space="preserve">
          <source>Table 12.14: PORT_EXT</source>
          <target state="translated">표 12.14 : PORT_EXT</target>
        </trans-unit>
        <trans-unit id="96819e46fe9160b7684601591232299db1b36df4" translate="yes" xml:space="preserve">
          <source>Table 12.15: PID_EXT</source>
          <target state="translated">표 12.15 : PID_EXT</target>
        </trans-unit>
        <trans-unit id="aca8c57af9b0105ba7e96489697e52bcb0e7644c" translate="yes" xml:space="preserve">
          <source>Table 12.15: PORT_EXT</source>
          <target state="translated">표 12.15 : PORT_EXT</target>
        </trans-unit>
        <trans-unit id="36c5940497810bb57f27396a9be048a575101e33" translate="yes" xml:space="preserve">
          <source>Table 12.16: NEW_PORT_EXT</source>
          <target state="translated">표 12.16 : NEW_PORT_EXT</target>
        </trans-unit>
        <trans-unit id="929ef647be6942415e3f171358774bf82ec22c90" translate="yes" xml:space="preserve">
          <source>Table 12.16: SMALL_TUPLE_EXT</source>
          <target state="translated">표 12.16 : SMALL_TUPLE_EXT</target>
        </trans-unit>
        <trans-unit id="2bc9e7a9f0cdd26ab796e08ac173c9214cf33bb2" translate="yes" xml:space="preserve">
          <source>Table 12.17: LARGE_TUPLE_EXT</source>
          <target state="translated">표 12.17 : LARGE_TUPLE_EXT</target>
        </trans-unit>
        <trans-unit id="b5c6b01f176a82a507d2ca56ddd2ee64cdaaff51" translate="yes" xml:space="preserve">
          <source>Table 12.17: PID_EXT</source>
          <target state="translated">표 12.17 : PID_EXT</target>
        </trans-unit>
        <trans-unit id="adb693dcc7fb1fd77fe8a58008cf68aa105437ec" translate="yes" xml:space="preserve">
          <source>Table 12.18: MAP_EXT</source>
          <target state="translated">표 12.18 : MAP_EXT</target>
        </trans-unit>
        <trans-unit id="47c298b8ec2745b359feaa13c0c03cba98158fa1" translate="yes" xml:space="preserve">
          <source>Table 12.18: NEW_PID_EXT</source>
          <target state="translated">표 12.18 : NEW_PID_EXT</target>
        </trans-unit>
        <trans-unit id="0058992413b1a2072f46a8bef8849c819a9bd27c" translate="yes" xml:space="preserve">
          <source>Table 12.19: NIL_EXT</source>
          <target state="translated">표 12.19 : NIL_EXT</target>
        </trans-unit>
        <trans-unit id="9f0130d3bb2f1380afe50f2f71ee401d65ddd7d1" translate="yes" xml:space="preserve">
          <source>Table 12.19: SMALL_TUPLE_EXT</source>
          <target state="translated">표 12.19 : SMALL_TUPLE_EXT</target>
        </trans-unit>
        <trans-unit id="8c7f1e0a03ffe076870e398ec25b8453d8eadb76" translate="yes" xml:space="preserve">
          <source>Table 12.1: Name Registration BIFs</source>
          <target state="translated">표 12.1 : 이름 등록 BIF</target>
        </trans-unit>
        <trans-unit id="ad64574492eb17bfd807110b90dea335f1c7aae2" translate="yes" xml:space="preserve">
          <source>Table 12.1: Term Format</source>
          <target state="translated">표 12.1 : 용어 형식</target>
        </trans-unit>
        <trans-unit id="2e3876d4c2dc0c7a502f8c549f2c229e114c2436" translate="yes" xml:space="preserve">
          <source>Table 12.20: LARGE_TUPLE_EXT</source>
          <target state="translated">표 12.20 : LARGE_TUPLE_EXT</target>
        </trans-unit>
        <trans-unit id="0df8d7a0af860ca015d80e7243b43bef49703f4d" translate="yes" xml:space="preserve">
          <source>Table 12.20: STRING_EXT</source>
          <target state="translated">표 12.20 : STRING_EXT</target>
        </trans-unit>
        <trans-unit id="7c0155dab34e626428cf77c18f392f114ec8b923" translate="yes" xml:space="preserve">
          <source>Table 12.21: LIST_EXT</source>
          <target state="translated">표 12.21 : LIST_EXT</target>
        </trans-unit>
        <trans-unit id="e90459c05514d1e1a3d6a0dc385c1fc7585f3f34" translate="yes" xml:space="preserve">
          <source>Table 12.21: MAP_EXT</source>
          <target state="translated">표 12.21 : MAP_EXT</target>
        </trans-unit>
        <trans-unit id="aa41c1d8936052f161d20f526c915bdfa140ba72" translate="yes" xml:space="preserve">
          <source>Table 12.22: BINARY_EXT</source>
          <target state="translated">표 12.22 : BINARY_EXT</target>
        </trans-unit>
        <trans-unit id="52d52365520c26b490f559e45c972b0670fcb587" translate="yes" xml:space="preserve">
          <source>Table 12.22: NIL_EXT</source>
          <target state="translated">표 12.22 : NIL_EXT</target>
        </trans-unit>
        <trans-unit id="36cf93a4b7064da1028c95fc5d153f969a05f23b" translate="yes" xml:space="preserve">
          <source>Table 12.23: SMALL_BIG_EXT</source>
          <target state="translated">표 12.23 : SMALL_BIG_EXT</target>
        </trans-unit>
        <trans-unit id="2f3b3a40be9a84bc7e58321f9672a02ee16cd5cd" translate="yes" xml:space="preserve">
          <source>Table 12.23: STRING_EXT</source>
          <target state="translated">표 12.23 : STRING_EXT</target>
        </trans-unit>
        <trans-unit id="8b7dc77f03315b79ffa7b47922ecb22f0aa5f2e7" translate="yes" xml:space="preserve">
          <source>Table 12.24: LARGE_BIG_EXT</source>
          <target state="translated">표 12.24 : LARGE_BIG_EXT</target>
        </trans-unit>
        <trans-unit id="56a7e5aaf242565b06bbbeac46b2488645a0f0ce" translate="yes" xml:space="preserve">
          <source>Table 12.24: LIST_EXT</source>
          <target state="translated">표 12.24 : LIST_EXT</target>
        </trans-unit>
        <trans-unit id="fdb7ce7cd36ccae54995a9e0cdd0e332ea0e9eb2" translate="yes" xml:space="preserve">
          <source>Table 12.25: BINARY_EXT</source>
          <target state="translated">표 12.25 : BINARY_EXT</target>
        </trans-unit>
        <trans-unit id="0bcc99ccfd58c2a94d4cf75fd172c14957bee41a" translate="yes" xml:space="preserve">
          <source>Table 12.25: NEW_REFERENCE_EXT</source>
          <target state="translated">표 12.25 : NEW_REFERENCE_EXT</target>
        </trans-unit>
        <trans-unit id="1b3e3a9c2a02cf90a00369084f14b0b26a667ff3" translate="yes" xml:space="preserve">
          <source>Table 12.26: FUN_EXT</source>
          <target state="translated">표 12.26 : FUN_EXT</target>
        </trans-unit>
        <trans-unit id="bbf08646a3f041b6afae6d8e3ea159751af2d339" translate="yes" xml:space="preserve">
          <source>Table 12.26: SMALL_BIG_EXT</source>
          <target state="translated">표 12.26 : SMALL_BIG_EXT</target>
        </trans-unit>
        <trans-unit id="0e2944de37169f948f3ac94a26098fb6e9477fb1" translate="yes" xml:space="preserve">
          <source>Table 12.27: LARGE_BIG_EXT</source>
          <target state="translated">표 12.27 : LARGE_BIG_EXT</target>
        </trans-unit>
        <trans-unit id="29a4858c0789b86f5465f8cb5db1421d2810276a" translate="yes" xml:space="preserve">
          <source>Table 12.27: NEW_FUN_EXT</source>
          <target state="translated">표 12.27 : NEW_FUN_EXT</target>
        </trans-unit>
        <trans-unit id="f399cbd0c09e84ad8dba436d6454ceb339fc9356" translate="yes" xml:space="preserve">
          <source>Table 12.28: EXPORT_EXT</source>
          <target state="translated">표 12.28 : EXPORT_EXT</target>
        </trans-unit>
        <trans-unit id="9fe29c7b738bd39fc5374a16348a7afb3518705a" translate="yes" xml:space="preserve">
          <source>Table 12.28: REFERENCE_EXT</source>
          <target state="translated">표 12.28 : REFERENCE_EXT</target>
        </trans-unit>
        <trans-unit id="c4f8c6d2a98bb834eb44bbc5c62a5c56f9612215" translate="yes" xml:space="preserve">
          <source>Table 12.29: BIT_BINARY_EXT</source>
          <target state="translated">표 12.29 : BIT_BINARY_EXT</target>
        </trans-unit>
        <trans-unit id="7b0ff6ca6679dfa6b2dbab3567f88c0b641b3222" translate="yes" xml:space="preserve">
          <source>Table 12.29: NEW_REFERENCE_EXT</source>
          <target state="translated">표 12.29 : NEW_REFERENCE_EXT</target>
        </trans-unit>
        <trans-unit id="9a7845dbd38fceef2f98e2021ad2db0a951f1f90" translate="yes" xml:space="preserve">
          <source>Table 12.2: Compressed Term Format</source>
          <target state="translated">표 12.2 : 압축 용어 형식</target>
        </trans-unit>
        <trans-unit id="ed634462783d4ebd62433fa1120c434342ea16b3" translate="yes" xml:space="preserve">
          <source>Table 12.30: NEWER_REFERENCE_EXT</source>
          <target state="translated">표 12.30 : NEWER_REFERENCE_EXT</target>
        </trans-unit>
        <trans-unit id="69dd6d35b4f19964994f900ee8e129693a9ce6e5" translate="yes" xml:space="preserve">
          <source>Table 12.30: NEW_FLOAT_EXT</source>
          <target state="translated">표 12.30 : NEW_FLOAT_EXT</target>
        </trans-unit>
        <trans-unit id="39ba0ff930d671e34c458d513192e51e5782463c" translate="yes" xml:space="preserve">
          <source>Table 12.31: ATOM_UTF8_EXT</source>
          <target state="translated">표 12.31 : ATOM_UTF8_EXT</target>
        </trans-unit>
        <trans-unit id="97ab0a3b6bbbb940c853cc0f1a0fe244b0ee7687" translate="yes" xml:space="preserve">
          <source>Table 12.31: FUN_EXT</source>
          <target state="translated">표 12.31 : FUN_EXT</target>
        </trans-unit>
        <trans-unit id="d7121b6337d1bd41e576d6f3052cce01b7aa2afb" translate="yes" xml:space="preserve">
          <source>Table 12.32: NEW_FUN_EXT</source>
          <target state="translated">표 12.32 : NEW_FUN_EXT</target>
        </trans-unit>
        <trans-unit id="71ae7d46f883a6cf5ca44c387bf96b8bf0304071" translate="yes" xml:space="preserve">
          <source>Table 12.32: SMALL_ATOM_UTF8_EXT</source>
          <target state="translated">표 12.32 : SMALL_ATOM_UTF8_EXT</target>
        </trans-unit>
        <trans-unit id="4f3e60db57ebf4f9ad1c8702519818c61269fd7b" translate="yes" xml:space="preserve">
          <source>Table 12.33: ATOM_EXT</source>
          <target state="translated">표 12.33 : ATOM_EXT</target>
        </trans-unit>
        <trans-unit id="053e398edd1507650d9db865eb1beae09542110e" translate="yes" xml:space="preserve">
          <source>Table 12.33: EXPORT_EXT</source>
          <target state="translated">표 12.33 : EXPORT_EXT</target>
        </trans-unit>
        <trans-unit id="7093744f98d7abd5ea3af30fa3015d87af1bed62" translate="yes" xml:space="preserve">
          <source>Table 12.34: BIT_BINARY_EXT</source>
          <target state="translated">표 12.34 : BIT_BINARY_EXT</target>
        </trans-unit>
        <trans-unit id="d9763dcc196c99566fefe285bf27864c20b2a376" translate="yes" xml:space="preserve">
          <source>Table 12.34: SMALL_ATOM_EXT</source>
          <target state="translated">표 12.34 : SMALL_ATOM_EXT</target>
        </trans-unit>
        <trans-unit id="ecda6968197f7726b973d49ca77e89dccd0a9cde" translate="yes" xml:space="preserve">
          <source>Table 12.35: NEW_FLOAT_EXT</source>
          <target state="translated">표 12.35 : NEW_FLOAT_EXT</target>
        </trans-unit>
        <trans-unit id="8bbf652d7573a9f143a8a70a1ea847431c0fc0a0" translate="yes" xml:space="preserve">
          <source>Table 12.36: ATOM_UTF8_EXT</source>
          <target state="translated">표 12.36 : ATOM_UTF8_EXT</target>
        </trans-unit>
        <trans-unit id="198ebc97f2944e35b814444edcb32091611f5fac" translate="yes" xml:space="preserve">
          <source>Table 12.37: SMALL_ATOM_UTF8_EXT</source>
          <target state="translated">표 12.37 : SMALL_ATOM_UTF8_EXT</target>
        </trans-unit>
        <trans-unit id="1d472c0db3da8a1027e5c8bd325b1ab3c4bcf339" translate="yes" xml:space="preserve">
          <source>Table 12.38: ATOM_EXT</source>
          <target state="translated">표 12.38 : ATOM_EXT</target>
        </trans-unit>
        <trans-unit id="f86301f6d21af518e531a44e8eb67b130d19647e" translate="yes" xml:space="preserve">
          <source>Table 12.39: SMALL_ATOM_EXT</source>
          <target state="translated">표 12.39 : SMALL_ATOM_EXT</target>
        </trans-unit>
        <trans-unit id="7f4f07bb52b5e0ac65f5c4b09be7c563c9af2a2a" translate="yes" xml:space="preserve">
          <source>Table 12.3: Compressed Data Format when Expanded</source>
          <target state="translated">표 12.3 : 확장시 압축 데이터 형식</target>
        </trans-unit>
        <trans-unit id="a1b25601d5798e4ada95d734eebfad09c3438475" translate="yes" xml:space="preserve">
          <source>Table 12.4: Distribution Header Format</source>
          <target state="translated">표 12.4 : 배포 헤더 형식</target>
        </trans-unit>
        <trans-unit id="dad67d6192f27852311a43b13eb10d080a19eb59" translate="yes" xml:space="preserve">
          <source>Table 12.4: Normal Distribution Header Format</source>
          <target state="translated">표 12.4 : 정규 분포 헤더 형식</target>
        </trans-unit>
        <trans-unit id="7ae3242d88a1907427a116698d6e7daa006dee20" translate="yes" xml:space="preserve">
          <source>Table 12.5:</source>
          <target state="translated">표 12.5 :</target>
        </trans-unit>
        <trans-unit id="5a71917f82a2759e5a495c12c44a7eb3c885d967" translate="yes" xml:space="preserve">
          <source>Table 12.6:</source>
          <target state="translated">표 12.6 :</target>
        </trans-unit>
        <trans-unit id="7a6b6888acaa7d0157552bfe1d147e5f2ffc5c2a" translate="yes" xml:space="preserve">
          <source>Table 12.7:</source>
          <target state="translated">표 12.7 :</target>
        </trans-unit>
        <trans-unit id="d455469fa598129902ab217f6b876f8e08b0c329" translate="yes" xml:space="preserve">
          <source>Table 12.8:</source>
          <target state="translated">표 12.8 :</target>
        </trans-unit>
        <trans-unit id="7e4fc9ad71d6c65901eeebf5f25e8c4321f8fd5d" translate="yes" xml:space="preserve">
          <source>Table 12.9: ATOM_CACHE_REF</source>
          <target state="translated">표 12.9 : ATOM_CACHE_REF</target>
        </trans-unit>
        <trans-unit id="4d8ad35aaffe6c4d3ab9f97627ef801809ecdbb5" translate="yes" xml:space="preserve">
          <source>Table 12.9: Starting Fragmented Distribution Header Format</source>
          <target state="translated">표 12.9 : 조각난 배포 헤더 형식 시작</target>
        </trans-unit>
        <trans-unit id="8ccc6975faccb3866dd7fc3b6eecae7228fd58dc" translate="yes" xml:space="preserve">
          <source>Table 13.10: DUMP_REQ</source>
          <target state="translated">표 13.10 : DUMP_REQ</target>
        </trans-unit>
        <trans-unit id="2b3c51ca48ed62a11f8f6b268d0cfb454be00ab2" translate="yes" xml:space="preserve">
          <source>Table 13.10: DUMP_RESP</source>
          <target state="translated">표 13.10 : DUMP_RESP</target>
        </trans-unit>
        <trans-unit id="b9c617d1c57ab6309319ef59fbacc68681e77fa9" translate="yes" xml:space="preserve">
          <source>Table 13.11: DUMP_RESP</source>
          <target state="translated">표 13.11 : DUMP_RESP</target>
        </trans-unit>
        <trans-unit id="a1268f8a739adc2dd0b6cf61f8bcf9b2c1a25af3" translate="yes" xml:space="preserve">
          <source>Table 13.11: KILL_REQ</source>
          <target state="translated">표 13.11 : KILL_REQ</target>
        </trans-unit>
        <trans-unit id="6e309119bed66c166c969201ee205fa687375461" translate="yes" xml:space="preserve">
          <source>Table 13.12: KILL_REQ</source>
          <target state="translated">표 13.12 : KILL_REQ</target>
        </trans-unit>
        <trans-unit id="9924291901a5a0b8fe67cb8613a69112ee2d49ab" translate="yes" xml:space="preserve">
          <source>Table 13.12: KILL_RESP</source>
          <target state="translated">표 13.12 : KILL_RESP</target>
        </trans-unit>
        <trans-unit id="ff3e7e8ebe846c573ad4c860d30021a20c6fd22e" translate="yes" xml:space="preserve">
          <source>Table 13.13: KILL_RESP</source>
          <target state="translated">표 13.13 : KILL_RESP</target>
        </trans-unit>
        <trans-unit id="521337e4c6544841a20f88ecfc0c1ea60912a86c" translate="yes" xml:space="preserve">
          <source>Table 13.13: STOP_REQ</source>
          <target state="translated">표 13.13 : STOP_REQ</target>
        </trans-unit>
        <trans-unit id="b9ffe9aaca6858d20d97d014a90e1c316550e1c6" translate="yes" xml:space="preserve">
          <source>Table 13.14: STOP_REQ</source>
          <target state="translated">표 13.14 : STOP_REQ</target>
        </trans-unit>
        <trans-unit id="0ff58a2b54089117b1d4d95d994b2ed678f3c4cf" translate="yes" xml:space="preserve">
          <source>Table 13.14: STOP_RESP</source>
          <target state="translated">표 13.14 : STOP_RESP</target>
        </trans-unit>
        <trans-unit id="a5cdc90bbaefb168ea142b2790c03070e154af9b" translate="yes" xml:space="preserve">
          <source>Table 13.15: STOP_NOTOK_RESP</source>
          <target state="translated">표 13.15 : STOP_NOTOK_RESP</target>
        </trans-unit>
        <trans-unit id="9ad086f0d0e1ac79ce2ca47e16dd410124a83151" translate="yes" xml:space="preserve">
          <source>Table 13.15: STOP_RESP</source>
          <target state="translated">표 13.15 : STOP_RESP</target>
        </trans-unit>
        <trans-unit id="7b97daf857d1cf5519b64b59f2c01112e80fd279" translate="yes" xml:space="preserve">
          <source>Table 13.16: Format of Messages Passed between Nodes (as from ERTS 5.7.2)</source>
          <target state="translated">표 13.16 : 노드간에 전달 된 메시지 형식 (ERTS 5.7.2에서와 같이)</target>
        </trans-unit>
        <trans-unit id="6dd9c282a36e9a800bfe9d1738d8c4dada1e91e6" translate="yes" xml:space="preserve">
          <source>Table 13.16: STOP_NOTOK_RESP</source>
          <target state="translated">표 13.16 : STOP_NOTOK_RESP</target>
        </trans-unit>
        <trans-unit id="0235810478165bd4a5414161e73679ab6e077e20" translate="yes" xml:space="preserve">
          <source>Table 13.17: Format of Messages Passed between Nodes (before ERTS 5.7.2)</source>
          <target state="translated">표 13.17 : 노드간에 전달 된 메시지 형식 (ERTS 5.7.2 이전)</target>
        </trans-unit>
        <trans-unit id="73cc43bea00c705b2804d57b685f96e1d8f592ab" translate="yes" xml:space="preserve">
          <source>Table 13.17: Old send_name ('n') for protocol version 5</source>
          <target state="translated">표 13.17 : 프로토콜 버전 5의 이전 send_name ( 'n')</target>
        </trans-unit>
        <trans-unit id="038c2787006396ac25ff9a9ebaa8a7d36e194b36" translate="yes" xml:space="preserve">
          <source>Table 13.18: New send_name ('N') for protocol version 6</source>
          <target state="translated">표 13.18 : 프로토콜 버전 6에 대한 새로운 send_name ( 'N')</target>
        </trans-unit>
        <trans-unit id="3d6b7925180459f078783b224e6b0dd0d18bd901" translate="yes" xml:space="preserve">
          <source>Table 13.19: The format of the status message</source>
          <target state="translated">표 13.19 : 상태 메시지의 형식</target>
        </trans-unit>
        <trans-unit id="03bda7e932b3f1c5bed1e5d6d2070739f08eaf1c" translate="yes" xml:space="preserve">
          <source>Table 13.1: Distribution BIFs</source>
          <target state="translated">표 13.1 : 분포 BIF</target>
        </trans-unit>
        <trans-unit id="61638ac22a7cbdb6b5559917090de7497beade99" translate="yes" xml:space="preserve">
          <source>Table 13.1: Request Format</source>
          <target state="translated">표 13.1 : 요청 형식</target>
        </trans-unit>
        <trans-unit id="ace8fef36c371236e6f59678f520ae5030c1f393" translate="yes" xml:space="preserve">
          <source>Table 13.20: The format of the 'named:' status message</source>
          <target state="translated">표 13.20 : 'named :'상태 메시지의 형식</target>
        </trans-unit>
        <trans-unit id="cacafe879eacb21e6d88eae28d298fed002c5024" translate="yes" xml:space="preserve">
          <source>Table 13.21: The old challenge message format (version 5)</source>
          <target state="translated">표 13.21 : 이전 챌린지 메시지 형식 (버전 5)</target>
        </trans-unit>
        <trans-unit id="1452cb0882f836e9762f2c814dd46d90ff344d77" translate="yes" xml:space="preserve">
          <source>Table 13.22: The new challenge message format (version 6)</source>
          <target state="translated">표 13.22 : 새로운 챌린지 메시지 형식 (버전 6)</target>
        </trans-unit>
        <trans-unit id="b70710a01063febf47b2365573357841fdf33c0a" translate="yes" xml:space="preserve">
          <source>Table 13.23: The complement message</source>
          <target state="translated">표 13.23 : 보완 메시지</target>
        </trans-unit>
        <trans-unit id="946922f548940b95717a7ef399b0d37853f6fa1c" translate="yes" xml:space="preserve">
          <source>Table 13.24: The challenge_reply message</source>
          <target state="translated">표 13.24 : challenge_reply 메시지</target>
        </trans-unit>
        <trans-unit id="b1efaa80b20fe5c34e523a912b0e25cabba7f945" translate="yes" xml:space="preserve">
          <source>Table 13.25: The challenge_ack message</source>
          <target state="translated">표 13.25 : challenge_ack 메시지</target>
        </trans-unit>
        <trans-unit id="9ac65d4f45b7abd478c26c0069267b418f368f0f" translate="yes" xml:space="preserve">
          <source>Table 13.26: Format of Messages Passed between Nodes (as from ERTS 5.7.2 (OTP R13B))</source>
          <target state="translated">표 13.26 : 노드간에 전달되는 메시지 형식 (ERTS 5.7.2 (OTP R13B)에서와 같음)</target>
        </trans-unit>
        <trans-unit id="d50df0826ada3607fcfb36eef8b15e57db84d2b3" translate="yes" xml:space="preserve">
          <source>Table 13.27: Format of Messages Passed between Nodes (before ERTS 5.7.2 (OTP R13B))</source>
          <target state="translated">표 13.27 : 노드간에 전달되는 메시지 형식 (ERTS 5.7.2 (OTP R13B) 이전)</target>
        </trans-unit>
        <trans-unit id="42e15dae13f3c331c9200d0729d1ddc9e0e50071" translate="yes" xml:space="preserve">
          <source>Table 13.2: ALIVE2_REQ (120)</source>
          <target state="translated">표 13.2 : ALIVE2_REQ (120)</target>
        </trans-unit>
        <trans-unit id="c6a77d421f864fb58dddfaf3e3633bdb241cbfda" translate="yes" xml:space="preserve">
          <source>Table 13.2: Distribution Command-Line Flags</source>
          <target state="translated">표 13.2 : 배포 명령 줄 플래그</target>
        </trans-unit>
        <trans-unit id="9aea119540385e38157e1b773684ae3d6cbe0ba8" translate="yes" xml:space="preserve">
          <source>Table 13.3: ALIVE2_RESP (121)</source>
          <target state="translated">표 13.3 : ALIVE2_RESP (121)</target>
        </trans-unit>
        <trans-unit id="0f0b90e91037307b65260987f10fcefe0727f642" translate="yes" xml:space="preserve">
          <source>Table 13.3: ALIVE2_X_RESP (118) with 32 bit creation</source>
          <target state="translated">표 13.3 : 32 비트 생성이있는 ALIVE2_X_RESP (118)</target>
        </trans-unit>
        <trans-unit id="94bfc83da20e2a496446d2150cfc714838620ceb" translate="yes" xml:space="preserve">
          <source>Table 13.3: Kernel Modules Useful For Distribution.</source>
          <target state="translated">표 13.3 : 배포에 유용한 커널 모듈.</target>
        </trans-unit>
        <trans-unit id="2e7173794ea3a888594a54576cb87893fc9f9293" translate="yes" xml:space="preserve">
          <source>Table 13.4: ALIVE2_RESP (121) with 16-bit creation</source>
          <target state="translated">표 13.4 : 16 비트 생성이있는 ALIVE2_RESP (121)</target>
        </trans-unit>
        <trans-unit id="4aac3932070e2c73da7f9a23bb587d59bdb5f802" translate="yes" xml:space="preserve">
          <source>Table 13.4: PORT_PLEASE2_REQ (122)</source>
          <target state="translated">표 13.4 : PORT_PLEASE2_REQ (122)</target>
        </trans-unit>
        <trans-unit id="719629eb907013d0ec53e4c81e41dc5f23ae20a4" translate="yes" xml:space="preserve">
          <source>Table 13.4: STDLIB Modules Useful For Distribution.</source>
          <target state="translated">표 13.4 : 분배에 유용한 STDLIB 모듈.</target>
        </trans-unit>
        <trans-unit id="0f35a1a83b6107724dd65d19a2ced52d720d62b9" translate="yes" xml:space="preserve">
          <source>Table 13.5: PORT2_RESP (119) Response Indicating Error, Result &amp;gt; 0</source>
          <target state="translated">표 13.5 : PORT2_RESP (119) 응답 오류, 결과&amp;gt; 0</target>
        </trans-unit>
        <trans-unit id="6faa5a486cf240c77173f9c2b4d29cf0afd9b16d" translate="yes" xml:space="preserve">
          <source>Table 13.5: PORT_PLEASE2_REQ (122)</source>
          <target state="translated">표 13.5 : PORT_PLEASE2_REQ (122)</target>
        </trans-unit>
        <trans-unit id="95bcb9bd6851cec84122a97026533af33077046d" translate="yes" xml:space="preserve">
          <source>Table 13.6: PORT2_RESP (119) Response Indicating Error, Result &amp;gt; 0</source>
          <target state="translated">표 13.6 : PORT2_RESP (119) 오류를 나타내는 응답, 결과&amp;gt; 0</target>
        </trans-unit>
        <trans-unit id="d7346d09d095d6d89b7bb97b2f6f60397d92b506" translate="yes" xml:space="preserve">
          <source>Table 13.6: PORT2_RESP, Result = 0</source>
          <target state="translated">표 13.6 : PORT2_RESP, 결과 = 0</target>
        </trans-unit>
        <trans-unit id="7651664c52537de188b4793cbd87741bdb99dbbe" translate="yes" xml:space="preserve">
          <source>Table 13.7: NAMES_REQ (110)</source>
          <target state="translated">표 13.7 : NAMES_REQ (110)</target>
        </trans-unit>
        <trans-unit id="6a9d3990ba84b47a180e490647b9a0adc3431416" translate="yes" xml:space="preserve">
          <source>Table 13.7: PORT2_RESP, Result = 0</source>
          <target state="translated">표 13.7 : PORT2_RESP, 결과 = 0</target>
        </trans-unit>
        <trans-unit id="a321e6d64e5d6ac0243fae6088dd13a5f1cdd4de" translate="yes" xml:space="preserve">
          <source>Table 13.8: NAMES_REQ (110)</source>
          <target state="translated">표 13.8 : NAMES_REQ (110)</target>
        </trans-unit>
        <trans-unit id="b2f285bf0e8f76155a1b2ba2e26572814a0b098a" translate="yes" xml:space="preserve">
          <source>Table 13.8: NAMES_RESP</source>
          <target state="translated">표 13.8 : NAMES_RESP</target>
        </trans-unit>
        <trans-unit id="4db4ef3f34f7a95b11e9b62f8eb6359c7f0c035b" translate="yes" xml:space="preserve">
          <source>Table 13.9: DUMP_REQ</source>
          <target state="translated">표 13.9 : DUMP_REQ</target>
        </trans-unit>
        <trans-unit id="5ccdce75834f9d02651f9d233f36c417e4f8f18f" translate="yes" xml:space="preserve">
          <source>Table 13.9: NAMES_RESP</source>
          <target state="translated">표 13.9 : NAMES_RESP</target>
        </trans-unit>
        <trans-unit id="a28dfe55e369b981e9989ca655f8070823b288d4" translate="yes" xml:space="preserve">
          <source>Table 14.1: Scope of a CTH</source>
          <target state="translated">표 14.1 : CTH의 범위</target>
        </trans-unit>
        <trans-unit id="6f346618d895fae04b070f63801d27512e0a114e" translate="yes" xml:space="preserve">
          <source>Table 15.1: Port Creation BIF</source>
          <target state="translated">표 15.1 : 포트 생성 BIF</target>
        </trans-unit>
        <trans-unit id="5702cda3079894261cf21470de9842cbf06107d1" translate="yes" xml:space="preserve">
          <source>Table 15.2: Messages Sent To a Port</source>
          <target state="translated">표 15.2 : 포트로 보낸 메시지</target>
        </trans-unit>
        <trans-unit id="d888dee5eb271a175c076f3da8428908d38f7a20" translate="yes" xml:space="preserve">
          <source>Table 15.3: Messages Received From a Port</source>
          <target state="translated">표 15.3 : 포트에서받은 메시지</target>
        </trans-unit>
        <trans-unit id="728ee03beb77f2dd0af6fd6ba498d0eba5ed22d9" translate="yes" xml:space="preserve">
          <source>Table 15.4: Port BIFs</source>
          <target state="translated">표 15.4 : 포트 BIF</target>
        </trans-unit>
        <trans-unit id="b27132ceaa20acb15aedc85775feadc97cf98c9c" translate="yes" xml:space="preserve">
          <source>Table 16.1: Error Messages</source>
          <target state="translated">표 16.1 : 오류 메시지</target>
        </trans-unit>
        <trans-unit id="5f4934e67a618cf41c7091ca6f0fc3ad49ab6cce" translate="yes" xml:space="preserve">
          <source>Table 2.1: Character Classes</source>
          <target state="translated">표 2.1 : 문자 클래스</target>
        </trans-unit>
        <trans-unit id="6eaaaa238c86c88e40d4df41a53e15cc0448911e" translate="yes" xml:space="preserve">
          <source>Table 2.1: Log Levels</source>
          <target state="translated">표 2.1 : 로그 수준</target>
        </trans-unit>
        <trans-unit id="4fc595026f67776148a8c9da2e83cff6c4e748e1" translate="yes" xml:space="preserve">
          <source>Table 2.1: Signature Algorithm OIDs</source>
          <target state="translated">표 2.1 : 서명 알고리즘 OID</target>
        </trans-unit>
        <trans-unit id="a4fbf3af1b4fe90317081f765c7533e193877b36" translate="yes" xml:space="preserve">
          <source>Table 2.1: socket message info value type</source>
          <target state="translated">표 2.1 : 소켓 메시지 정보 값 유형</target>
        </trans-unit>
        <trans-unit id="b559a4c56db17477d2000244623dc69a859d8ced" translate="yes" xml:space="preserve">
          <source>Table 2.2: Attribute OIDs</source>
          <target state="translated">표 2.2 : 속성 OID</target>
        </trans-unit>
        <trans-unit id="0327859772455d2cac52192c0815d138b5c6c3d5" translate="yes" xml:space="preserve">
          <source>Table 2.2: option levels</source>
          <target state="translated">표 2.2 : 옵션 수준</target>
        </trans-unit>
        <trans-unit id="61329aaff17f9cdc353879f67a1b6c2c2ced1057" translate="yes" xml:space="preserve">
          <source>Table 2.3: Public-Key Algorithm OIDs</source>
          <target state="translated">표 2.3 : 공개 키 알고리즘 OID</target>
        </trans-unit>
        <trans-unit id="0b7f8106e7910ea76a23bde5c891426fb49d2a2e" translate="yes" xml:space="preserve">
          <source>Table 2.3: socket options</source>
          <target state="translated">표 2.3 : 소켓 옵션</target>
        </trans-unit>
        <trans-unit id="63c67e425d843f44c3ad3944ba2ea398bf3390ac" translate="yes" xml:space="preserve">
          <source>Table 2.4: Standard Certificate Extensions</source>
          <target state="translated">표 2.4 : 표준 인증서 확장</target>
        </trans-unit>
        <trans-unit id="df089017364075f113052522b89497d67c55d32d" translate="yes" xml:space="preserve">
          <source>Table 2.4: ip options</source>
          <target state="translated">표 2.4 : ip 옵션</target>
        </trans-unit>
        <trans-unit id="1d07377a9b4d3d0fdc53c19f9b80541a838d71a0" translate="yes" xml:space="preserve">
          <source>Table 2.5: Key Purpose OIDs</source>
          <target state="translated">표 2.5 : 주요 목적 OID</target>
        </trans-unit>
        <trans-unit id="60c98e0f4e15f3d0135a473d0a560ef231a463e3" translate="yes" xml:space="preserve">
          <source>Table 2.5: ipv6 options</source>
          <target state="translated">표 2.5 : ipv6 옵션</target>
        </trans-unit>
        <trans-unit id="c9a0d1dbd63f25fa4cab07cb6e81975a5434e58c" translate="yes" xml:space="preserve">
          <source>Table 2.6: Private Internet Extensions</source>
          <target state="translated">도표 2.6 : 개인 인터넷 연장</target>
        </trans-unit>
        <trans-unit id="399ceba4f0cfb550ff550b55b95b83bdd5f55c72" translate="yes" xml:space="preserve">
          <source>Table 2.6: tcp options</source>
          <target state="translated">표 2.6 : tcp 옵션</target>
        </trans-unit>
        <trans-unit id="3c4523326210a6e49a84a168a517493f6b494085" translate="yes" xml:space="preserve">
          <source>Table 2.7: CRL Extensions</source>
          <target state="translated">표 2.7 : CRL 확장</target>
        </trans-unit>
        <trans-unit id="cc21aadbf0b74de9430f910073c1a08c3dde08c8" translate="yes" xml:space="preserve">
          <source>Table 2.7: udp options</source>
          <target state="translated">표 2.7 : udp 옵션</target>
        </trans-unit>
        <trans-unit id="e599a4ff0cd3050fdc6bb940882734dade0ed796" translate="yes" xml:space="preserve">
          <source>Table 2.8: CRL Entry Extensions</source>
          <target state="translated">표 2.8 : CRL 항목 확장</target>
        </trans-unit>
        <trans-unit id="fbd963a8747468af94667098b70d2728dc8951eb" translate="yes" xml:space="preserve">
          <source>Table 2.8: sctp options</source>
          <target state="translated">표 2.8 : sctp 옵션</target>
        </trans-unit>
        <trans-unit id="4349a3a03eb9251860dc9282e3b336ab2fd4bca2" translate="yes" xml:space="preserve">
          <source>Table 3.1: Log Levels</source>
          <target state="translated">표 3.1 : 로그 수준</target>
        </trans-unit>
        <trans-unit id="69a5a550952ff1d1582f1327251b38f6f3925307" translate="yes" xml:space="preserve">
          <source>Table 3.1: Mapping of ODBC data types to the Erlang data types returned to the Erlang application.</source>
          <target state="translated">표 3.1 : Erlang 응용 프로그램에 리턴 된 Erlang 데이터 유형에 ODBC 데이터 유형 맵핑</target>
        </trans-unit>
        <trans-unit id="f8612a65d1f97ebf0034cd75baf0addcfe1c0893" translate="yes" xml:space="preserve">
          <source>Table 3.1: Recognized Escape Sequences</source>
          <target state="translated">표 3.1 : 인식 된 탈출 시퀀스</target>
        </trans-unit>
        <trans-unit id="9809e96d44e0af0600d936e259f842538f07e64b" translate="yes" xml:space="preserve">
          <source>Table 3.1: Supported ASN.1 Types</source>
          <target state="translated">표 3.1 : 지원되는 ASN.1 유형</target>
        </trans-unit>
        <trans-unit id="02b78e9c5cb42c3363db65995522a67a8422f0e9" translate="yes" xml:space="preserve">
          <source>Table 3.1: employee Database Record</source>
          <target state="translated">표 3.1 : 직원 데이터베이스 레코드</target>
        </trans-unit>
        <trans-unit id="e2e04ae1720c523c09ad885d4bba619975d91dfd" translate="yes" xml:space="preserve">
          <source>Table 3.2: Mapping of extended ODBC data types to the Erlang data types returned to the Erlang application.</source>
          <target state="translated">표 3.2 : 확장 된 ODBC 데이터 유형을 Erlang 애플리케이션에 리턴 된 Erlang 데이터 유형으로 맵핑</target>
        </trans-unit>
        <trans-unit id="c8fbe8731442bcc46734767ff421f607aa0f0b93" translate="yes" xml:space="preserve">
          <source>Table 3.2: at_dep Database Record</source>
          <target state="translated">표 3.2 : at_dep 데이터베이스 레코드</target>
        </trans-unit>
        <trans-unit id="472618ae5b8faf29f64e6182f23e94d8e8d2b3ff" translate="yes" xml:space="preserve">
          <source>Table 3.3: in_proj Database Record</source>
          <target state="translated">표 3.3 : in_proj 데이터베이스 레코드</target>
        </trans-unit>
        <trans-unit id="bd55e55c0bac662bbb91c2dab6fadd4546456110" translate="yes" xml:space="preserve">
          <source>Table 4.1: Match target depending on context</source>
          <target state="translated">표 4.1 : 상황에 따른 일치 대상</target>
        </trans-unit>
        <trans-unit id="2d25688454b2bb5450c1309279e78263e6dbd7f4" translate="yes" xml:space="preserve">
          <source>Table 4.1: RFC 6733 Compliance</source>
          <target state="translated">표 4.1 : RFC 6733 준수</target>
        </trans-unit>
        <trans-unit id="732bc539aa9e2aceaab8c419c46c7186220b8351" translate="yes" xml:space="preserve">
          <source>Table 4.1: Results of Complete, Exclusive, and Selective Decode</source>
          <target state="translated">표 4.1 : 완전, 독점 및 선택적 디코딩 결과</target>
        </trans-unit>
        <trans-unit id="2f6119a0a2c06c96a45bed121e21994c92602dec" translate="yes" xml:space="preserve">
          <source>Table 4.2: Literals in MatchCondition/MatchBody Parts of a Match Specification</source>
          <target state="translated">표 4.2 : 일치 사양의 MatchCondition / MatchBody 부분에있는 리터럴</target>
        </trans-unit>
        <trans-unit id="03c941b5ad0f9163428dd761c1aa72825546017a" translate="yes" xml:space="preserve">
          <source>Table 4.2: Results of Complete, Exclusive + decode_part, and Selective + complete decodes</source>
          <target state="translated">표 4.2 : Complete, Exclusive + decode_part 및 Selective + complete 디코드 결과</target>
        </trans-unit>
        <trans-unit id="36b860414598350fa4a96bda9e094918253576f8" translate="yes" xml:space="preserve">
          <source>Table 5.1: Ciphers without IV</source>
          <target state="translated">표 5.1 : IV가없는 암호</target>
        </trans-unit>
        <trans-unit id="33953a6f4cee84714f12e9d7c60a76586000bee3" translate="yes" xml:space="preserve">
          <source>Table 5.1: Standards Compliance</source>
          <target state="translated">표 5.1 : 표준 준수</target>
        </trans-unit>
        <trans-unit id="55f7882a0cda57bcd4252e628badfb1143164a8f" translate="yes" xml:space="preserve">
          <source>Table 5.2: Ciphers with IV</source>
          <target state="translated">표 5.2 : IV를 사용한 암호</target>
        </trans-unit>
        <trans-unit id="ac6792f02bb7bcdbd2fff50a3691f12f0636c8e8" translate="yes" xml:space="preserve">
          <source>Table 5.3: AEAD ciphers</source>
          <target state="translated">표 5.3 : AEAD 암호</target>
        </trans-unit>
        <trans-unit id="e4d92042ced92637dfb52dfe79a2086ac70923e8" translate="yes" xml:space="preserve">
          <source>Table 5.4: CMAC cipher key lengths</source>
          <target state="translated">표 5.4 : CMAC 암호 키 길이</target>
        </trans-unit>
        <trans-unit id="afa10e79d3f249cb48f855b1964335f3e354f36d" translate="yes" xml:space="preserve">
          <source>Table 5.5: HMAC output sizes</source>
          <target state="translated">표 5.5 : HMAC 출력 크기</target>
        </trans-unit>
        <trans-unit id="5bb81dc91710c9767c0d79768a8bff49f7aebe59" translate="yes" xml:space="preserve">
          <source>Table 5.6:</source>
          <target state="translated">표 5.6 :</target>
        </trans-unit>
        <trans-unit id="471c26521c9b6b31eb7a3c435020af615c80eec7" translate="yes" xml:space="preserve">
          <source>Table 5.7:</source>
          <target state="translated">표 5.7 :</target>
        </trans-unit>
        <trans-unit id="46ae1811653a364bf5c74fa9d0dbfd91efb3844a" translate="yes" xml:space="preserve">
          <source>Table 6.1:</source>
          <target state="translated">표 6.1 :</target>
        </trans-unit>
        <trans-unit id="998575c4a113a89d67de8200527ab2f0671412a3" translate="yes" xml:space="preserve">
          <source>Table 7.1: Built-in types, predefined aliases</source>
          <target state="translated">표 7.1 : 내장 유형, 사전 정의 된 별명</target>
        </trans-unit>
        <trans-unit id="7a46d02c216b62f4c7966fc627277fbbd5dca1db" translate="yes" xml:space="preserve">
          <source>Table 7.2: Additional built-in types</source>
          <target state="translated">표 7.2 : 추가 내장형</target>
        </trans-unit>
        <trans-unit id="f425729931f6d1bdbaed18495dcda8f6c61e9665" translate="yes" xml:space="preserve">
          <source>Table 8.1: Codec performance</source>
          <target state="translated">표 8.1 : 코덱 성능</target>
        </trans-unit>
        <trans-unit id="f02b919abba6c2f9f7cea19a79d8563e91342705" translate="yes" xml:space="preserve">
          <source>Table 8.1: Term Comparison Operators.</source>
          <target state="translated">표 8.1 : 용어 비교 연산자.</target>
        </trans-unit>
        <trans-unit id="44dbfccf55391a47eda37e5337bceb5e6751ff98" translate="yes" xml:space="preserve">
          <source>Table 8.2: Arithmetic Operators.</source>
          <target state="translated">표 8.2 : 산술 연산자.</target>
        </trans-unit>
        <trans-unit id="80ab66478c80211ef28ea87ebf180af9badfa505" translate="yes" xml:space="preserve">
          <source>Table 8.3: Logical Operators.</source>
          <target state="translated">표 8.3 : 논리 연산자</target>
        </trans-unit>
        <trans-unit id="d1b590658d7f606934706fe12855a35158b7b9ae" translate="yes" xml:space="preserve">
          <source>Table 8.4: Type Test BIFs</source>
          <target state="translated">표 8.4 : 유형 테스트 BIF</target>
        </trans-unit>
        <trans-unit id="e2253a5b23eb77ff9aec768859a9f84ff6371656" translate="yes" xml:space="preserve">
          <source>Table 8.5: Other BIFs Allowed in Guard Expressions</source>
          <target state="translated">표 8.5 : 가드 식에서 허용되는 다른 BIF</target>
        </trans-unit>
        <trans-unit id="0053f71504d170421443aa2340e9bdc8a8bc2b06" translate="yes" xml:space="preserve">
          <source>Table 8.6: Operator Precedence</source>
          <target state="translated">표 8.6 : 운영자 우선 순위</target>
        </trans-unit>
        <trans-unit id="a654ccdbe37f52ad3e2371abec18594740d9d987" translate="yes" xml:space="preserve">
          <source>Table 9.1: tty Text Editing</source>
          <target state="translated">표 9.1 : tty 텍스트 편집</target>
        </trans-unit>
        <trans-unit id="2ae808e0110b567ca136c42fbd3e8dd397c8d335" translate="yes" xml:space="preserve">
          <source>Table Events</source>
          <target state="translated">테이블 이벤트</target>
        </trans-unit>
        <trans-unit id="e85c6e2f2b0b6aed0ba81d7cccbe0078c9d4793e" translate="yes" xml:space="preserve">
          <source>Table Locks</source>
          <target state="translated">테이블 잠금</target>
        </trans-unit>
        <trans-unit id="ffe55a0395422e7c6bc873ed81500d8be7ee8f09" translate="yes" xml:space="preserve">
          <source>Table Operations</source>
          <target state="translated">테이블 작업</target>
        </trans-unit>
        <trans-unit id="785160c54069d8c0488a6885b676c3ed7ac94f33" translate="yes" xml:space="preserve">
          <source>Table attributes are specified when the table is created. For example, the following function creates a table with two RAM replicas:</source>
          <target state="translated">테이블 속성은 테이블이 생성 될 때 지정됩니다. 예를 들어 다음 함수는 두 개의 RAM 복제본이있는 테이블을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="920197fc8c7d9a17f9bba1e891a31f5e6bab2db5" translate="yes" xml:space="preserve">
          <source>Table events are events related to table updates. There are two types of table events, simple and detailed.</source>
          <target state="translated">테이블 이벤트는 테이블 업데이트와 관련된 이벤트입니다. 단순 및 상세의 두 가지 유형의 테이블 이벤트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdb5ca78cafe4367f8a8f545689e76f5c4e0b916" translate="yes" xml:space="preserve">
          <source>Table fixations are not limited to &lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt; safe_fixtable/2&lt;/a&gt;&lt;/code&gt;. Temporary fixations may also be done by for example &lt;code&gt;&lt;a href=&quot;#traversal&quot;&gt;traversing functions&lt;/a&gt;&lt;/code&gt; like &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt;. Such table fixations are automatically released before the corresponding functions returns, but they may be seen by a concurrent call to &lt;code&gt;ets:info(T,safe_fixed|safe_fixed_monotonic_time)&lt;/code&gt;.</source>
          <target state="translated">테이블 고정은 &lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt; safe_fixtable/2&lt;/a&gt;&lt;/code&gt; 로 제한되지 않습니다 . 임시 고정은 예를 들어 &lt;code&gt;select&lt;/code&gt; 및 &lt;code&gt;match&lt;/code&gt; 와 같은 &lt;code&gt;&lt;a href=&quot;#traversal&quot;&gt;traversing functions&lt;/a&gt;&lt;/code&gt; 하여 수행 할 수도 있습니다 . 이러한 테이블 고정은 해당 함수가 반환되기 전에 자동으로 해제되지만 &lt;code&gt;ets:info(T,safe_fixed|safe_fixed_monotonic_time)&lt;/code&gt; 에 대한 동시 호출에서 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f2cbbd1fe71c50be54063ec6ec279f2e5068eec" translate="yes" xml:space="preserve">
          <source>Table fragmentation</source>
          <target state="translated">테이블 조각화</target>
        </trans-unit>
        <trans-unit id="b321d78d8188930584227fd683d25947228f5912" translate="yes" xml:space="preserve">
          <source>Table indexes can be used whenever the user wants to use frequently some other field than the key field to look up records. If this other field has an associated index, these lookups can occur in constant time and space. For example, if your application wishes to use field &lt;code&gt;age&lt;/code&gt; to find efficiently all persons with a specific age, it can be a good idea to have an index on field &lt;code&gt;age&lt;/code&gt;. This can be done with the following call:</source>
          <target state="translated">사용자가 키 필드 이외의 다른 필드를 자주 사용하여 레코드를 조회하려고 할 때마다 테이블 인덱스를 사용할 수 있습니다. 이 다른 필드에 관련 인덱스가있는 경우 이러한 조회는 일정한 시간과 공간에서 발생할 수 있습니다. 응용 프로그램 소원 필드의 사용 예를 들어, &lt;code&gt;age&lt;/code&gt; 효율적으로 특정 연령과 모든 사람을 찾기 위해,이 필드에 대한 인덱스가 좋은 아이디어가 될 수있는 &lt;code&gt;age&lt;/code&gt; . 다음과 같은 호출로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c88fa77c87adc2265ab448874618640494fc6308" translate="yes" xml:space="preserve">
          <source>Table initialization is asynchronous. The function call &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; returns the atom &lt;code&gt;ok&lt;/code&gt; and then starts to initialize the different tables. Depending on the size of the database, this can take some time, and the application programmer must wait for the tables that the application needs before they can be used. This is achieved by using the function &lt;code&gt;&lt;a href=&quot;mnesia#wait_for_tables-2&quot;&gt;mnesia:wait_for_tables(TabList, Timeout)&lt;/a&gt;&lt;/code&gt;, which suspends the caller until all tables specified in &lt;code&gt;TabList&lt;/code&gt; are properly initiated.</source>
          <target state="translated">테이블 초기화는 비동기 적입니다. 함수 호출 &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; 원자 반환 &lt;code&gt;ok&lt;/code&gt; 한 후 다른 테이블을 초기화하기 시작합니다. 데이터베이스의 크기에 따라 시간이 걸릴 수 있으며 응용 프로그램 프로그래머는 응용 프로그램이 사용하기 전에 필요한 테이블을 기다려야합니다. 이 함수를 이용함으로써 달성된다 &lt;code&gt;&lt;a href=&quot;mnesia#wait_for_tables-2&quot;&gt;mnesia:wait_for_tables(TabList, Timeout)&lt;/a&gt;&lt;/code&gt; 에서 지정된 모든 테이블까지 호출을 중단, &lt;code&gt;TabList&lt;/code&gt; 적절히 개시되어있다.</target>
        </trans-unit>
        <trans-unit id="3d3b49fdca0320ed3b3453c5ed3280cae1c7efa5" translate="yes" xml:space="preserve">
          <source>Table locations are transparent to the programmer. Programs address table names and the system itself keeps track of table locations.</source>
          <target state="translated">테이블 위치는 프로그래머에게 투명합니다. 프로그램은 테이블 이름을 지정하고 시스템 자체는 테이블 위치를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="866e46fb585eb175d52c33c7d9ae3c6b97b99178" translate="yes" xml:space="preserve">
          <source>Table replicas of type &lt;code&gt;ram_copies&lt;/code&gt; can be dumped to disc with the function &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ram_copies&lt;/code&gt; 유형의 테이블 복제본은 &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt; 함수를 사용하여 디스크에 덤프 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="af955ef17e57c071c4e89fa1503d4f412aa17a54" translate="yes" xml:space="preserve">
          <source>Table type &lt;code&gt;ordered_set&lt;/code&gt; is not affected by this option. Also, the memory consumption inflicted by both &lt;code&gt;write_concurrency&lt;/code&gt; and &lt;code&gt;read_concurrency&lt;/code&gt; is a constant overhead per table. This overhead can be especially large when both options are combined.</source>
          <target state="translated">&lt;code&gt;ordered_set&lt;/code&gt; 테이블 유형 은이 옵션의 영향을받지 않습니다. 또한 &lt;code&gt;write_concurrency&lt;/code&gt; 와 &lt;code&gt;read_concurrency&lt;/code&gt; 에 의해 발생하는 메모리 소비 는 테이블 당 일정한 오버 헤드입니다. 이 옵션은 두 옵션을 결합 할 때 특히 클 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ae7173fc695a7e90d392ed4e8e9a097c6a14f85" translate="yes" xml:space="preserve">
          <source>Tables are divided into four different types, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;ordered_set&lt;/code&gt;, &lt;code&gt;bag&lt;/code&gt;, and &lt;code&gt;duplicate_bag&lt;/code&gt;. A &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;ordered_set&lt;/code&gt; table can only have one object associated with each key. A &lt;code&gt;bag&lt;/code&gt; or &lt;code&gt;duplicate_bag&lt;/code&gt; table can have many objects associated with each key.</source>
          <target state="translated">테이블은 &lt;code&gt;set&lt;/code&gt; , &lt;code&gt;ordered_set&lt;/code&gt; , &lt;code&gt;bag&lt;/code&gt; 및 &lt;code&gt;duplicate_bag&lt;/code&gt; 의 네 가지 유형으로 나뉩니다 . &lt;code&gt;set&lt;/code&gt; 또는 &lt;code&gt;ordered_set&lt;/code&gt; 표는 각 키와 연관된 하나의 개체를 가질 수 있습니다. &lt;code&gt;bag&lt;/code&gt; 또는 &lt;code&gt;duplicate_bag&lt;/code&gt; 표는 각 키와 연관된 많은 개체를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34d69fb54ae6920c0beb5343651ca15f5e6afaac" translate="yes" xml:space="preserve">
          <source>Tables can also have the following properties, where each attribute has a list of Erlang nodes as its value:</source>
          <target state="translated">테이블에는 다음과 같은 속성이있을 수 있습니다. 여기서 각 속성에는 값으로 Erlang 노드 목록이 있습니다.</target>
        </trans-unit>
        <trans-unit id="de93908f0780db239ff5e538fea7ea2e43c2dd38" translate="yes" xml:space="preserve">
          <source>Tables can be created and new replicas can be added without starting all the disc-full nodes.</source>
          <target state="translated">디스크 전체 노드를 모두 시작하지 않고도 테이블을 작성하고 새 복제본을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d07956b5358d935c57f6803cf4b6ad1ef2830cb4" translate="yes" xml:space="preserve">
          <source>Tables can be declared to have properties such as location, replication, and persistence.</source>
          <target state="translated">위치, 복제 및 지속성과 같은 속성을 갖도록 테이블을 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f511e28cba4a01c743772e67af1ac7ec40828dab" translate="yes" xml:space="preserve">
          <source>Tables can be moved or deleted, and the layout of a table can be reconfigured in various ways. An important aspect of the implementation of these functions is that user programs can continue to use a table while it is being reconfigured. For example, it is possible to move a table and perform write operations to the table at the same time. This is important for many applications that require continuously available services. For more information, see &lt;code&gt;&lt;a href=&quot;mnesia_chap4#trans_prop&quot;&gt;Transactions and Other Access Contexts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">테이블을 이동하거나 삭제할 수 있으며 테이블 레이아웃을 다양한 방식으로 재구성 할 수 있습니다. 이러한 기능 구현의 중요한 측면은 사용자 프로그램이 재구성되는 동안 테이블을 계속 사용할 수 있다는 것입니다. 예를 들어, 테이블을 이동하고 동시에 테이블에 대한 쓰기 작업을 수행 할 수 있습니다. 지속적으로 사용 가능한 서비스가 필요한 많은 응용 프로그램에 중요합니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;mnesia_chap4#trans_prop&quot;&gt;Transactions and Other Access Contexts&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d7bc03ffa55eb50ff02b4db69153553fd45996c" translate="yes" xml:space="preserve">
          <source>Tables can be moved or replicated to several nodes to improve fault tolerance. The rest of the system can still access the tables to read, write, and delete records.</source>
          <target state="translated">내결함성을 향상시키기 위해 테이블을 여러 노드로 이동하거나 복제 할 수 있습니다. 나머지 시스템은 여전히 ​​테이블에 액세스하여 레코드를 읽고 쓰고 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0e957eb66e13f1765798b7a25ea084ce54f8043" translate="yes" xml:space="preserve">
          <source>Tables can be restored online from a backup without restarting &lt;code&gt;Mnesia&lt;/code&gt;. A restore is performed with the function &lt;code&gt;&lt;a href=&quot;mnesia#restore-2&quot;&gt;mnesia:restore(Opaque, Args)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; can contain the following tuples:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 를 다시 시작하지 않고도 백업에서 테이블을 온라인으로 복원 할 수 있습니다 . 복원은 &lt;code&gt;&lt;a href=&quot;mnesia#restore-2&quot;&gt;mnesia:restore(Opaque, Args)&lt;/a&gt;&lt;/code&gt; 함수로 수행 되며 &lt;code&gt;Args&lt;/code&gt; 는 다음 튜플을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d57d67e1acfe0bf746b51a2068d14140f7e2255b" translate="yes" xml:space="preserve">
          <source>Tables must be written in the following order: &lt;code&gt;tableObject&lt;/code&gt;, &lt;code&gt;entryObject&lt;/code&gt;, &lt;code&gt;column1&lt;/code&gt;, ..., &lt;code&gt;columnN&lt;/code&gt; (in order).</source>
          <target state="translated">테이블은 &lt;code&gt;tableObject&lt;/code&gt; , &lt;code&gt;entryObject&lt;/code&gt; , &lt;code&gt;column1&lt;/code&gt; , ..., &lt;code&gt;columnN&lt;/code&gt; 순서대로 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0c69aeb6234da315154088828f3897ee8809919c" translate="yes" xml:space="preserve">
          <source>Tables of type &lt;code&gt;ram_copies&lt;/code&gt; are by definition stored in memory only. However, these tables can be dumped to disc, either at regular intervals or before the system is shut down. The function &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt; dumps all replicas of a set of RAM tables to disc. The tables can be accessed while being dumped to disc. To dump the tables to disc, all replicas must have the storage type &lt;code&gt;ram_copies&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ram_copies&lt;/code&gt; 유형의 테이블은 정의상 메모리에만 저장됩니다. 그러나 이러한 테이블은 정기적으로 또는 시스템이 종료되기 전에 디스크에 덤프 될 수 있습니다. &lt;code&gt;&lt;a href=&quot;mnesia#dump_tables-1&quot;&gt;mnesia:dump_tables(TabList)&lt;/a&gt;&lt;/code&gt; 함수 는 RAM 테이블 세트의 모든 복제본을 디스크에 덤프합니다. 디스크에 덤프되는 동안 테이블에 액세스 할 수 있습니다. 테이블을 디스크에 덤프하려면 모든 복제본에 스토리지 유형 &lt;code&gt;ram_copies&lt;/code&gt; 가 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="f5f87c90bac9b358ab772324758ec3588f0e6d15" translate="yes" xml:space="preserve">
          <source>Tables that are created with these functions can be administered as all other Mnesia tables. They can be included in backups, replicas can be added, and so on. The tables are normal Mnesia tables owned by the user of the corresponding &lt;code&gt;erl_interface&lt;/code&gt; registries.</source>
          <target state="translated">이 기능으로 작성된 테이블은 다른 모든 Mnesia 테이블로 관리 할 수 ​​있습니다. 백업에 포함시킬 수 있고 복제본을 추가 할 수 있습니다. 테이블은 해당 &lt;code&gt;erl_interface&lt;/code&gt; 레지스트리 사용자가 소유 한 일반 Mnesia 테이블 입니다.</target>
        </trans-unit>
        <trans-unit id="743d28560816377de1f1a84b0e5ab1bcad9a2851" translate="yes" xml:space="preserve">
          <source>Tables that are only stored locally are initialized from the local &lt;code&gt;Mnesia&lt;/code&gt; directory.</source>
          <target state="translated">로컬로만 저장된 테이블은 로컬 &lt;code&gt;Mnesia&lt;/code&gt; 디렉토리 에서 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="15e17f79ab456ddb783d4d81329edb91056f584b" translate="yes" xml:space="preserve">
          <source>Tables that reside on remote nodes are available to other nodes as soon as they are loaded.</source>
          <target state="translated">원격 노드에 상주하는 테이블은 다른 노드가로드 되 자마자 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="ecc1e9ce18cc1f51b207c2bdf13311e34431c5b1" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;ct_hooks&lt;/code&gt; specifies the &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; to be run with this suite.</source>
          <target state="translated">&lt;code&gt;ct_hooks&lt;/code&gt; 태그 는이 스위트에서 실행할 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; 를 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="15ecb35628e9ad80298a11e2caca7262306b1658" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;require&lt;/code&gt; specifies configuration variables required by test cases (or configuration functions) in the suite. If the required configuration variables are not found in any of the configuration files, all test cases are skipped. For details about the &lt;code&gt;require&lt;/code&gt; functionality, see funtion &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">태그 &lt;code&gt;require&lt;/code&gt; 는 스위트에서 테스트 케이스 (또는 구성 기능)에 필요한 구성 변수를 지정합니다. 필요한 구성 변수가 구성 파일에 없으면 모든 테스트 사례를 건너 뜁니다. &lt;code&gt;require&lt;/code&gt; 기능 에 대한 자세한 내용 은 funct &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2131aee1075ebd4d5a669ce0e3a2b0c83464a600" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;require&lt;/code&gt; specifies configuration variables required by test cases (or configuration functions) in the suite. If the required configuration variables are not found in any of the configuration files, all test cases in this group are skipped. For details about the &lt;code&gt;require&lt;/code&gt; functionality, see function &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">태그 &lt;code&gt;require&lt;/code&gt; 는 스위트에서 테스트 케이스 (또는 구성 기능)에 필요한 구성 변수를 지정합니다. 필요한 구성 변수가 구성 파일에 없으면이 그룹의 모든 테스트 사례를 건너 뜁니다. &lt;code&gt;require&lt;/code&gt; 기능 에 대한 자세한 내용 은 함수 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4f43fa665fa7746b66b55e1550ce1441ca788c63" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;require&lt;/code&gt; specifies configuration variables that are required by the test case (or &lt;code&gt;init_per_testcase/2&lt;/code&gt; or &lt;code&gt;end_per_testcase/2&lt;/code&gt;). If the required configuration variables are not found in any of the configuration files, the test case is skipped. For details about the &lt;code&gt;require&lt;/code&gt; functionality, see function &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">태그 &lt;code&gt;require&lt;/code&gt; 는 테스트 케이스에 필요한 구성 변수 (또는 &lt;code&gt;init_per_testcase/2&lt;/code&gt; 또는 &lt;code&gt;end_per_testcase/2&lt;/code&gt; )를 지정합니다. 필요한 구성 변수가 구성 파일에 없으면 테스트 사례를 건너 뜁니다. &lt;code&gt;require&lt;/code&gt; 기능 에 대한 자세한 내용 은 함수 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="04d278975824b5e79ef1d1bf215d17175d4b156d" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;timetrap&lt;/code&gt; sets the maximum time that each test case is allowed to execute (including &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;Module:init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;Module:end_per_testcase/2&lt;/a&gt;&lt;/code&gt;). If the timetrap time is exceeded, the test case fails with reason &lt;code&gt;timetrap_timeout&lt;/code&gt;. A &lt;code&gt;TimeFunc&lt;/code&gt; function can be used to set a new timetrap by returning a &lt;code&gt;TimeVal&lt;/code&gt;. It can also be used to trigger a timetrap time-out by, at some point, returning a value other than a &lt;code&gt;TimeVal&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">태그 &lt;code&gt;timetrap&lt;/code&gt; 은 각 테스트 케이스를 실행할 수있는 최대 시간을 설정합니다 ( &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;Module:init_per_testcase/2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;Module:end_per_testcase/2&lt;/a&gt;&lt;/code&gt; 포함 ). 타임 트랩 시간이 초과되면 &lt;code&gt;timetrap_timeout&lt;/code&gt; 이유와 함께 테스트 케이스가 실패합니다 . &lt;code&gt;TimeFunc&lt;/code&gt; 의 함수는 반환하여 새로운 timetrap을 설정하는 데 사용할 수 있습니다 &lt;code&gt;TimeVal&lt;/code&gt; . 또한 어떤 시점에서 &lt;code&gt;TimeVal&lt;/code&gt; 이외의 값을 반환하여 타임 트랩 타임 아웃을 트리거하는 데 사용할 수도 있습니다 . 자세한 내용 은 사용자 가이드의 &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb7858b354350ab4f0327568ec7e4c4a738e1efd" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;timetrap&lt;/code&gt; sets the maximum time that each test case is allowed to execute (including &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt;). If the timetrap time is exceeded, the test case fails with reason &lt;code&gt;timetrap_timeout&lt;/code&gt;. A &lt;code&gt;TimeFunc&lt;/code&gt; function can be used to set a new timetrap by returning a &lt;code&gt;TimeVal&lt;/code&gt;. It can also be used to trigger a timetrap time-out by, at some point, returning a value other than a &lt;code&gt;TimeVal&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">태그 &lt;code&gt;timetrap&lt;/code&gt; 은 각 테스트 케이스가 실행될 수있는 최대 시간을 설정합니다 ( &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; 포함 ). 타임 트랩 시간이 초과되면 &lt;code&gt;timetrap_timeout&lt;/code&gt; 이유로 테스트 케이스가 실패합니다 . &lt;code&gt;TimeFunc&lt;/code&gt; 의 함수는 반환하여 새로운 timetrap을 설정하는 데 사용할 수 있습니다 &lt;code&gt;TimeVal&lt;/code&gt; . 어떤 시점에서 &lt;code&gt;TimeVal&lt;/code&gt; 이외의 값을 반환하여 타임 트랩 시간 초과를 트리거하는 데 사용할 수도 있습니다 . 자세한 내용 은 사용 설명서의 &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="905f5a4fc7a38e438f1b754b69df7c5bea59753a" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;timetrap&lt;/code&gt; sets the maximum time that the test case is allowed to execute. If the timetrap time is exceeded, the test case fails with reason &lt;code&gt;timetrap_timeout&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;Module:init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;Module:end_per_testcase/2&lt;/a&gt;&lt;/code&gt; are included in the timetrap time. A &lt;code&gt;TimeFunc&lt;/code&gt; function can be used to set a new timetrap by returning a &lt;code&gt;TimeVal&lt;/code&gt;. It can also be used to trigger a timetrap time-out by, at some point, returning a value other than a &lt;code&gt;TimeVal&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">태그 &lt;code&gt;timetrap&lt;/code&gt; 은 테스트 케이스 실행이 허용되는 최대 시간을 설정합니다. 타임 트랩 시간이 초과되면 &lt;code&gt;timetrap_timeout&lt;/code&gt; 이유와 함께 테스트 케이스가 실패합니다 . &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;Module:init_per_testcase/2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;Module:end_per_testcase/2&lt;/a&gt;&lt;/code&gt; 는 타임 트랩 시간에 포함됩니다. &lt;code&gt;TimeFunc&lt;/code&gt; 의 함수는 반환하여 새로운 timetrap을 설정하는 데 사용할 수 있습니다 &lt;code&gt;TimeVal&lt;/code&gt; . 또한 어떤 시점에서 &lt;code&gt;TimeVal&lt;/code&gt; 이외의 값을 반환하여 타임 트랩 타임 아웃을 트리거하는 데 사용할 수도 있습니다 . 자세한 내용 은 사용자 가이드의 &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="22c64cb3bbc94cdf7758855dd0abf0e6e66c2d5d" translate="yes" xml:space="preserve">
          <source>Tag &lt;code&gt;timetrap&lt;/code&gt; sets the maximum time that the test case is allowed to execute. If the timetrap time is exceeded, the test case fails with reason &lt;code&gt;timetrap_timeout&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; are included in the timetrap time. A &lt;code&gt;TimeFunc&lt;/code&gt; function can be used to set a new timetrap by returning a &lt;code&gt;TimeVal&lt;/code&gt;. It can also be used to trigger a timetrap time-out by, at some point, returning a value other than a &lt;code&gt;TimeVal&lt;/code&gt;. For details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">태그 &lt;code&gt;timetrap&lt;/code&gt; 은 테스트 사례를 실행할 수있는 최대 시간을 설정합니다. 타임 트랩 시간이 초과되면 &lt;code&gt;timetrap_timeout&lt;/code&gt; 이유로 테스트 케이스가 실패합니다 . &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; 는 타임 트랩 시간에 포함됩니다. &lt;code&gt;TimeFunc&lt;/code&gt; 의 함수는 반환하여 새로운 timetrap을 설정하는 데 사용할 수 있습니다 &lt;code&gt;TimeVal&lt;/code&gt; . 어떤 시점에서 &lt;code&gt;TimeVal&lt;/code&gt; 이외의 값을 반환하여 타임 트랩 시간 초과를 트리거하는 데 사용할 수도 있습니다 . 자세한 내용 은 사용 설명서의 &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="89a60b10c6d51637e3c074271431727f5e04acf4" translate="yes" xml:space="preserve">
          <source>Tag = atom()</source>
          <target state="translated">태그 = atom ()</target>
        </trans-unit>
        <trans-unit id="68ddd91d0b9671a791224a07e7c4440e749e446a" translate="yes" xml:space="preserve">
          <source>Tagalog</source>
          <target state="translated">Tagalog</target>
        </trans-unit>
        <trans-unit id="d97ec9a0d0dd8012061bd1e25a018f7d246bc720" translate="yes" xml:space="preserve">
          <source>Tagbanwa</source>
          <target state="translated">Tagbanwa</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="0ea98ee2966f1a8d2f98d0a5da489f41da74714d" translate="yes" xml:space="preserve">
          <source>Tags aprops (&lt;code&gt;tags-apropos&lt;/code&gt;) - Display list of all tags in tags table REGEXP matches.</source>
          <target state="translated">태그 aprops ( &lt;code&gt;tags-apropos&lt;/code&gt; )-태그 테이블 REGEXP와 일치하는 모든 태그 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d4f0c99b831a4946575130ded67ce565cb0d708d" translate="yes" xml:space="preserve">
          <source>Tags are not mentioned any more in this User's Guide.</source>
          <target state="translated">이 사용자 안내서에는 더 이상 태그가 언급되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0f82a46a5e411e593e3fc9e2da286865bcb2e4ed" translate="yes" xml:space="preserve">
          <source>Tags is a standard Emacs package used to record information about source files in large development projects. In addition to listing the files of a project, a tags file normally contains information about all functions and variables that are defined. By far, the most useful command of the tags system is its ability to find the definition of functions in any file in the project. However the Tags system is not limited to this feature, for example, it is possible to do a text search in all files in a project, or to perform a project-wide search and replace.</source>
          <target state="translated">태그는 대규모 개발 프로젝트에서 소스 파일에 대한 정보를 기록하는 데 사용되는 표준 Emacs 패키지입니다. 프로젝트 파일을 나열하는 것 외에도 태그 파일에는 일반적으로 정의 된 모든 함수 및 변수에 대한 정보가 포함됩니다. 태그 시스템의 가장 유용한 명령은 프로젝트의 모든 파일에서 함수의 정의를 찾는 기능입니다. 그러나 태그 시스템은이 기능으로 제한되지 않습니다. 예를 들어, 프로젝트의 모든 파일에서 텍스트 검색을 수행하거나 프로젝트 전체 검색 및 바꾸기를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e5cc17a9625b1ef996d5f041d154602dfcaa438" translate="yes" xml:space="preserve">
          <source>Tags other than the earlier mentioned are ignored by the test server.</source>
          <target state="translated">앞에서 언급 한 것 이외의 태그는 테스트 서버에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f4446936a2326a1b426b4bb095f8f0bc39469810" translate="yes" xml:space="preserve">
          <source>Tags used to be important for all users of ASN.1, because it was necessary to add tags manually to certain constructs in order for the ASN.1 specification to be valid. Example of an old-style specification:</source>
          <target state="translated">태그는 ASN.1 스펙이 유효하기 위해 특정 구문에 수동으로 태그를 추가해야했기 때문에 모든 ASN.1 사용자에게 중요했습니다. 구식 사양의 예 :</target>
        </trans-unit>
        <trans-unit id="7ce68ff3f210c997cf191cc3047dad75cfbe97db" translate="yes" xml:space="preserve">
          <source>Tai_Le</source>
          <target state="translated">Tai_Le</target>
        </trans-unit>
        <trans-unit id="30754c9b404b9f791325a342fd0c615c1607ad6a" translate="yes" xml:space="preserve">
          <source>Tai_Tham</source>
          <target state="translated">Tai_Tham</target>
        </trans-unit>
        <trans-unit id="d56a5ea60a6f1aee9d29df15fa3ff172f1ecef8f" translate="yes" xml:space="preserve">
          <source>Tai_Viet</source>
          <target state="translated">Tai_Viet</target>
        </trans-unit>
        <trans-unit id="712d7b0229a9c9b792d9ee5e5f566583688440d1" translate="yes" xml:space="preserve">
          <source>Take a look at the DTD and observe that the structure of an XML document that is conformant to this DTD must have one motorcycles element (the root element). The motorcycles element must have at least one bike element. After each bike element it may be a date element. The content of the date element is #PCDATA (Parsed Character DATA), i.e. raw text. Observe that if #PCDATA must have a &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; or a &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; character it must be written as &lt;code&gt;&quot;&amp;amp;lt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;amp;amp;&quot;&lt;/code&gt; respectively. Also other character entities exists similar to the ones in HTML and SGML.</source>
          <target state="translated">DTD를 살펴보고이 DTD를 준수하는 XML 문서의 구조에는 하나의 모터 사이클 요소 (루트 요소)가 있어야합니다. 모터 사이클 요소에는 하나 이상의 자전거 요소가 있어야합니다. 각 자전거 요소 다음에는 날짜 요소 일 수 있습니다. 날짜 요소의 내용은 #PCDATA (구문 분석 된 문자 데이터), 즉 원시 텍스트입니다. #PCDATA에 &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 문자가 있어야하는 경우 &lt;code&gt;&quot;&amp;amp;lt;&quot;&lt;/code&gt; 로 작성해야합니다 . 및 &lt;code&gt;&quot;&amp;amp;amp;&quot;&lt;/code&gt; 각기. 또한 다른 문자 엔티티는 HTML 및 SGML의 문자 엔티티와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="f1944ad3e238ccbfad283666266458fed59a2c12" translate="yes" xml:space="preserve">
          <source>Take care of &lt;code&gt;&lt;a href=&quot;#msg&quot;&gt;system messages&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#msg&quot;&gt;system messages&lt;/a&gt;&lt;/code&gt; 관리하십시오 .</target>
        </trans-unit>
        <trans-unit id="06e9f830a71a68d64cd35058d9ef93e5039e2ec7" translate="yes" xml:space="preserve">
          <source>Take time stamps with &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt; erlang:monotonic_time/0&lt;/a&gt;&lt;/code&gt; and calculate the time difference using ordinary subtraction. The result is in &lt;code&gt;native&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;erlang#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt;. If you want to convert the result to another time unit, you can use &lt;code&gt;&lt;a href=&quot;erlang#convert_time_unit-3&quot;&gt; erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt; erlang:monotonic_time/0&lt;/a&gt;&lt;/code&gt; 으로 타임 스탬프를 찍고 일반 빼기를 사용하여 시차를 계산합니다. 결과는 &lt;code&gt;native&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;erlang#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; 입니다. 결과를 다른 시간 단위로 변환하려면 &lt;code&gt;&lt;a href=&quot;erlang#convert_time_unit-3&quot;&gt; erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5cb213c0c3fbc91fd264762706d8f4c2755430c" translate="yes" xml:space="preserve">
          <source>Take time stamps with &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;erlang:monotonic_time/0&lt;/a&gt;&lt;/code&gt; and calculate the time difference using ordinary subtraction. The result is in &lt;code&gt;native&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;erlang#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt;. If you want to convert the result to another time unit, you can use &lt;code&gt;&lt;a href=&quot;erlang#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;erlang:monotonic_time/0&lt;/a&gt;&lt;/code&gt; 을 사용하여 타임 스탬프를 가져 와서 일반 빼기를 사용하여 시차를 계산하십시오. 결과는 &lt;code&gt;native&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;erlang#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; 입니다. 결과를 다른 시간 단위로 변환하려면 &lt;code&gt;&lt;a href=&quot;erlang#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2cbdce0d65c7f6b3da528a651f3abbeb81fa3793" translate="yes" xml:space="preserve">
          <source>Take time stamps with &lt;code&gt;erlang:now/0&lt;/code&gt; and calculate the difference in time with &lt;code&gt; timer:now_diff/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:now/0&lt;/code&gt; 으로 타임 스탬프를 &lt;code&gt; timer:now_diff/2&lt;/code&gt; 하여 시간 차이를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="e9ada3a67eabb29a57989f4f801f3c2a4ec53a23" translate="yes" xml:space="preserve">
          <source>Take time stamps with &lt;code&gt;erlang:now/0&lt;/code&gt; and calculate the difference in time with &lt;code&gt;timer:now_diff/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:now/0&lt;/code&gt; 으로 타임 스탬프를 &lt;code&gt;timer:now_diff/2&lt;/code&gt; 로 시간 차이를 계산하십시오 .</target>
        </trans-unit>
        <trans-unit id="aad56d0b07d8624ffdf8f3dd6234bf0a87980ba7" translate="yes" xml:space="preserve">
          <source>Takes a compiled regular expression and an item, and returns the relevant data from the regular expression. The only supported item is &lt;code&gt;namelist&lt;/code&gt;, which returns the tuple &lt;code&gt;{namelist, [binary()]}&lt;/code&gt;, containing the names of all (unique) named subpatterns in the regular expression. For example:</source>
          <target state="translated">컴파일 된 정규식과 항목을 가져 와서 정규식에서 관련 데이터를 반환합니다. 유일하게 지원되는 항목은 &lt;code&gt;namelist&lt;/code&gt; 이며 , 정규 표현식에서 이름이 지정된 모든 서브 패턴의 이름을 포함하는 튜플 &lt;code&gt;{namelist, [binary()]}&lt;/code&gt; 을 리턴합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="19bfeb3244c87dc7345b2a90b3a504725b9fc5d5" translate="yes" xml:space="preserve">
          <source>Takes a function from &lt;code&gt;A&lt;/code&gt;s to &lt;code&gt;B&lt;/code&gt;s, and a list of &lt;code&gt;A&lt;/code&gt;s and produces a list of &lt;code&gt;B&lt;/code&gt;s by applying the function to every element in the list. This function is used to obtain the return values. The evaluation order depends on the implementation.</source>
          <target state="translated">함수를 &lt;code&gt;A&lt;/code&gt; 에서 &lt;code&gt;B&lt;/code&gt; 로 가져오고 &lt;code&gt;A&lt;/code&gt; 목록을 가져 오고 목록의 모든 요소에 함수를 적용하여 &lt;code&gt;B&lt;/code&gt; 목록을 생성 합니다. 이 함수는 반환 값을 얻는 데 사용됩니다. 평가 순서는 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="55656bdc88d1b3d6dee5f6b3418d04f6d2a52efe" translate="yes" xml:space="preserve">
          <source>Takes a function from &lt;code&gt;A&lt;/code&gt;s to lists of &lt;code&gt;B&lt;/code&gt;s, and a list of &lt;code&gt;A&lt;/code&gt;s (&lt;code&gt;List1&lt;/code&gt;) and produces a list of &lt;code&gt;B&lt;/code&gt;s by applying the function to every element in &lt;code&gt;List1&lt;/code&gt; and appending the resulting lists.</source>
          <target state="translated">함수로부터 얻어 리스트에 S &lt;code&gt;B&lt;/code&gt; S 및 목록 S ( &lt;code&gt;List1&lt;/code&gt; 입니다 )과 목록 생성 &lt;code&gt;B&lt;/code&gt; 내의 각 요소에 함수를 적용함으로써들 &lt;code&gt;List1&lt;/code&gt; 이 생성 된 목록을 추가. &lt;code&gt;A&lt;/code&gt; &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52fae012e5e055efc934f9ec9bd9253885a38340" translate="yes" xml:space="preserve">
          <source>Takes a list of child specification as argument and returns &lt;code&gt;ok&lt;/code&gt; if all of them are syntactically correct, otherwise &lt;code&gt;{error,Error}&lt;/code&gt;.</source>
          <target state="translated">하위 스펙 목록을 인수로 사용하고 구문이 올 바르면 &lt;code&gt;ok&lt;/code&gt; 를 리턴하고 , 그렇지 않으면 &lt;code&gt;{error,Error}&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="506646efe2a13a3aaee03a7ed507effbc3b857f9" translate="yes" xml:space="preserve">
          <source>Takes a list of key-value tuples elements and builds a map. The associations can be in any order, and both keys and values in the association can be of any term. If the same key appears more than once, the latter (right-most) value is used and the previous values are ignored.</source>
          <target state="translated">키-값 튜플 요소 목록을 가져 와서 맵을 만듭니다. 연관은 임의의 순서 일 수 있으며, 연관의 키 및 값 둘다는 임의의 용어 일 수있다. 동일한 키가 두 번 이상 나타나면 후자 (가장 오른쪽) 값이 사용되고 이전 값은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="8b5587ad9b89a81a22b94093c25712098169010e" translate="yes" xml:space="preserve">
          <source>Takes a pattern with &quot;don't care&quot; variables denoted as a &lt;code&gt;'_'&lt;/code&gt; parameter. This function returns a list of records that matched the pattern. Since the second element of a record in a table is considered to be the key for the record, the performance of this function depends on whether this key is bound or not.</source>
          <target state="translated">&lt;code&gt;'_'&lt;/code&gt; 매개 변수로 표시된 &quot;무정의&quot;변수가있는 패턴을 사용 합니다. 이 함수는 패턴과 일치하는 레코드 목록을 리턴합니다. 테이블에서 레코드의 두 번째 요소가 레코드의 키로 간주되므로이 기능의 성능은이 키의 바인드 여부에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="6aa0f10b3c4d20cfef7ffd9aac9c02c7e099a09b" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;ErrorDesc&lt;/code&gt; returned by load, unload, or reload functions and returns a string that describes the error or warning.</source>
          <target state="translated">로드, 언로드 또는 재로드 기능에 의해 리턴 된 &lt;code&gt;ErrorDesc&lt;/code&gt; 를 가져 와서 오류 또는 경고를 설명하는 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="57cbfc69dd180e338745075476b0f2367b010aeb" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;ErrorDescriptor&lt;/code&gt; and returns a string that describes the error or warning. This function is usually called implicitly when processing an &lt;code&gt;ErrorInfo&lt;/code&gt; structure (see section &lt;code&gt;&lt;a href=&quot;#errorinfo&quot;&gt;Error Information&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ErrorDescriptor&lt;/code&gt; 를 가져 와서 오류 또는 경고를 설명하는 문자열을 반환합니다. 이 함수는 일반적으로 &lt;code&gt;ErrorInfo&lt;/code&gt; 구조를 처리 할 때 암시 적으로 호출됩니다 (섹션 &lt;code&gt;&lt;a href=&quot;#errorinfo&quot;&gt;Error Information&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="93bf5f96e7a486360d69cd80e7309017ce816941" translate="yes" xml:space="preserve">
          <source>Takes an additional parameter, which &lt;strong&gt;must&lt;/strong&gt; be the result of &lt;code&gt;record_info(size, &amp;lt;record_type&amp;gt;)&lt;/code&gt;, like in &lt;code&gt;{is_record, '$1', rectype, record_info(size, rectype)}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{is_record, '$1', rectype, record_info(size, rectype)}&lt;/code&gt; 과 같이 &lt;code&gt;record_info(size, &amp;lt;record_type&amp;gt;)&lt;/code&gt; 의 결과 &lt;strong&gt;여야&lt;/strong&gt; 하는 추가 매개 변수를 사용 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="6c1469847249171e76b7f608e5d60058ff04bd25" translate="yes" xml:space="preserve">
          <source>Takes an error code returned by one of the other functions in the module and creates a textual description of the error.</source>
          <target state="translated">모듈의 다른 함수 중 하나가 리턴 한 오류 코드를 사용하여 오류에 대한 텍스트 설명을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="a79e919b8abfed5dd81802687c1118f9e75fc341" translate="yes" xml:space="preserve">
          <source>Takes care of any work that is not specifically assigned to a scheduler.</source>
          <target state="translated">스케줄러에 특별히 지정되지 않은 작업을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="b31c0f53fdbe49aa50563e165f4e3a62fb484ea0" translate="yes" xml:space="preserve">
          <source>Takes care of possible cleanup that is needed when the cache handling process terminates.</source>
          <target state="translated">캐시 처리 프로세스가 종료 될 때 필요한 가능한 정리를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="46509e2dee350637229abb5245a0cb50da574d1e" translate="yes" xml:space="preserve">
          <source>Takes characters from &lt;code&gt;String&lt;/code&gt; as long as the characters are members of set &lt;code&gt;Characters&lt;/code&gt; or the complement of set &lt;code&gt;Characters&lt;/code&gt;. &lt;code&gt;Dir&lt;/code&gt;, which can be &lt;code&gt;leading&lt;/code&gt; or &lt;code&gt;trailing&lt;/code&gt;, indicates from which direction characters are to be taken.</source>
          <target state="translated">문자를 취 &lt;code&gt;String&lt;/code&gt; 긴 문자 세트의 구성원 인만큼 &lt;code&gt;Characters&lt;/code&gt; 또는 세트의 보완 &lt;code&gt;Characters&lt;/code&gt; . &lt;code&gt;leading&lt;/code&gt; 또는 &lt;code&gt;trailing&lt;/code&gt; 일 수있는 &lt;code&gt;Dir&lt;/code&gt; 은 어느 방향에서 문자를 가져갈지를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e93b486ac5971a63d69d4eadcbdf142bace13b4a" translate="yes" xml:space="preserve">
          <source>Takes elements &lt;code&gt;Elem&lt;/code&gt; from &lt;code&gt;List1&lt;/code&gt; while &lt;code&gt;Pred(Elem)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, that is, the function returns the longest prefix of the list for which all elements satisfy the predicate.</source>
          <target state="translated">&lt;code&gt;Pred(Elem)&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 를 반환 하는 동안 &lt;code&gt;List1&lt;/code&gt; 에서 요소 &lt;code&gt;Elem&lt;/code&gt; 을 가져 옵니다 . 즉, 함수는 모든 요소가 조건자를 만족하는 목록의 가장 긴 접두사를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fbb4f090d8ca065719386cdc9464916982f88f35" translate="yes" xml:space="preserve">
          <source>Takes no argument and returns the value of the node's trace control word. The same is done by &lt;code&gt;erlang:system_info(trace_control_word)&lt;/code&gt;.</source>
          <target state="translated">인수를 취하지 않고 노드의 추적 제어 단어 값을 리턴합니다. 동일하여 수행됩니다 &lt;code&gt;erlang:system_info(trace_control_word)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de7cf647d0f18821ebb79f5e2e860bbb7ec66c82" translate="yes" xml:space="preserve">
          <source>Takes one argument. If the argument is &lt;code&gt;true&lt;/code&gt;, the call trace message mode for the current process is set to silent for this call and all later calls, that is, call trace messages are inhibited even if &lt;code&gt;{message, true}&lt;/code&gt; is called in the &lt;code&gt;MatchBody&lt;/code&gt; part for a traced function.</source>
          <target state="translated">하나의 주장을 취합니다. 인수가 &lt;code&gt;true&lt;/code&gt; 인 경우 현재 프로세스의 통화 추적 메시지 모드는이 호출에 대해 자동으로 설정되며 이후의 모든 호출, 즉 &lt;code&gt;{message, true}&lt;/code&gt; 가 &lt;code&gt;MatchBody&lt;/code&gt; 파트에서 추적 기능.</target>
        </trans-unit>
        <trans-unit id="fd489e11a7379f3da46a8f5de6664950f616c21a" translate="yes" xml:space="preserve">
          <source>Takes one argument: the message. Returns &lt;code&gt;true&lt;/code&gt; and can only be used in the &lt;code&gt;MatchBody&lt;/code&gt; part and when tracing.</source>
          <target state="translated">메시지 하나의 인수를 취합니다. &lt;code&gt;true&lt;/code&gt; 반환 하며 &lt;code&gt;MatchBody&lt;/code&gt; 부분과 추적시 에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30493b8e01e1c19322e9bf0b28ad578877d961a6" translate="yes" xml:space="preserve">
          <source>Takes one unsigned integer argument, sets the value of the node's trace control word to the value of the argument, and returns the previous value. The same is done by &lt;code&gt;erlang:system_flag(trace_control_word, Value)&lt;/code&gt;. It is only allowed to use &lt;code&gt;set_tcw&lt;/code&gt; in the &lt;code&gt;MatchBody&lt;/code&gt; part when tracing.</source>
          <target state="translated">부호없는 정수 인수 하나를 가져 와서 노드의 추적 제어 단어 값을 인수 값으로 설정 한 후 이전 값을 반환합니다. 동일은에 의해 이루어집니다 &lt;code&gt;erlang:system_flag(trace_control_word, Value)&lt;/code&gt; . 에만 사용할 수 있습니다 &lt;code&gt;set_tcw&lt;/code&gt; 을 에 &lt;code&gt;MatchBody&lt;/code&gt; 의 추적을 할 때 일부입니다.</target>
        </trans-unit>
        <trans-unit id="09da2fcd1e2efe51ebf24c738e905ab46e139be1" translate="yes" xml:space="preserve">
          <source>Takes over the distributed application &lt;code&gt;Application&lt;/code&gt;, which executes at another node &lt;code&gt;Node&lt;/code&gt;. At the current node, the application is restarted by calling &lt;code&gt;Module:start({takeover,Node},StartArgs)&lt;/code&gt;. &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;StartArgs&lt;/code&gt; are retrieved from the loaded application specification. The application at the other node is not stopped until the startup is completed, that is, when &lt;code&gt;Module:start/2&lt;/code&gt; and any calls to &lt;code&gt;Module:start_phase/3&lt;/code&gt; have returned.</source>
          <target state="translated">다른 노드 &lt;code&gt;Node&lt;/code&gt; 에서 실행되는 분산 응용 프로그램 &lt;code&gt;Application&lt;/code&gt; 을 인계합니다 . 현재 노드에서 &lt;code&gt;Module:start({takeover,Node},StartArgs)&lt;/code&gt; 를 호출하여 애플리케이션을 다시 시작합니다 . 로드 된 애플리케이션 사양에서 &lt;code&gt;Module&lt;/code&gt; 및 &lt;code&gt;StartArgs&lt;/code&gt; 가 검색됩니다. 다른 노드의 응용 프로그램은 시작이 완료 될 때까지, 즉 &lt;code&gt;Module:start/2&lt;/code&gt; 및 &lt;code&gt;Module:start_phase/3&lt;/code&gt; 에 대한 호출 이 리턴 될 때까지 중지되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0a647ce123db14489ad591cd488d47d856711e8f" translate="yes" xml:space="preserve">
          <source>Takes the list of characters &lt;code&gt;String&lt;/code&gt; and tries to scan (tokenize) them. Returns one of the following:</source>
          <target state="translated">문자 목록 취 &lt;code&gt;String&lt;/code&gt; 스캔 (토큰 화)과 시도를. 다음 중 하나를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3d44d06fda277fec8865be5e542736e38ae54f97" translate="yes" xml:space="preserve">
          <source>Takri</source>
          <target state="translated">Takri</target>
        </trans-unit>
        <trans-unit id="86c2b6275f076b31c4be9812e835dab2a6f07ccf" translate="yes" xml:space="preserve">
          <source>Tamil</source>
          <target state="translated">Tamil</target>
        </trans-unit>
        <trans-unit id="efa2b1a6ae1600d5f4d3d0746df43e1f2e23a7fa" translate="yes" xml:space="preserve">
          <source>Tar files can be created in one operation using function &lt;code&gt;&lt;a href=&quot;#create-2&quot;&gt;create/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#create-3&quot;&gt;create/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Tar 파일은 &lt;code&gt;&lt;a href=&quot;#create-2&quot;&gt;create/2&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#create-3&quot;&gt;create/3&lt;/a&gt;&lt;/code&gt; 함수를 사용하여 한 번의 조작으로 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9bc5b0268b6ae51208c62e2113be16eb4ea5cb4b" translate="yes" xml:space="preserve">
          <source>Task Queue</source>
          <target state="translated">작업 대기열</target>
        </trans-unit>
        <trans-unit id="25d3b39619df66bdd0c7bc6d8ee96ee14afa2c24" translate="yes" xml:space="preserve">
          <source>Tear down a &quot;virtual&quot; connection</source>
          <target state="translated">&quot;가상&quot;연결을 해제</target>
        </trans-unit>
        <trans-unit id="82bd3966ddc98061bf824297ca3d00cb4214a988" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;dbg&lt;/code&gt; to trace function Calls</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; 에게 함수 호출을 추적하도록 지시하십시오.</target>
        </trans-unit>
        <trans-unit id="835e2ece47c360b333f1a47931eef30669499f1b" translate="yes" xml:space="preserve">
          <source>Tell Erlang to use another primitive TCP module than &lt;code&gt;inet_tcp&lt;/code&gt;.</source>
          <target state="translated">Erlang에게 &lt;code&gt;inet_tcp&lt;/code&gt; 이외의 다른 기본 TCP 모듈을 사용하도록 지시하십시오 .</target>
        </trans-unit>
        <trans-unit id="6cb70b65ff1780e8afb327f1a87fff375570f8ad" translate="yes" xml:space="preserve">
          <source>Tell Erlang to use another primitive UDP module than &lt;code&gt;inet_udp&lt;/code&gt;.</source>
          <target state="translated">Erlang에게 &lt;code&gt;inet_udp&lt;/code&gt; 이외의 다른 기본 UDP 모듈을 사용하도록 지시하십시오 .</target>
        </trans-unit>
        <trans-unit id="9b7ea6ec990e7644aa1c8797918e78fc5d49e152" translate="yes" xml:space="preserve">
          <source>Tell it specifically to trace the &lt;code&gt;et:trace_me/5&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;et:trace_me/5&lt;/code&gt; 함수 를 추적하도록 구체적으로 지시하십시오 .</target>
        </trans-unit>
        <trans-unit id="57dd041bbdd098628d1f020b85579436c5820b6e" translate="yes" xml:space="preserve">
          <source>Tell the release handler to use the &lt;code&gt;releases&lt;/code&gt; directory in our target structure instead of &lt;code&gt;$OTP_ROOT/releases&lt;/code&gt;. This is done by setting the SASL environment variable &lt;code&gt;releases_dir&lt;/code&gt;, either from the command line (&lt;code&gt;-sasl releases_dir &amp;lt;target-dir&amp;gt;/releases&lt;/code&gt;) or in &lt;code&gt;sys.config&lt;/code&gt;.</source>
          <target state="translated">릴리스 핸들러에게 &lt;code&gt;$OTP_ROOT/releases&lt;/code&gt; 대신 대상 구조에서 &lt;code&gt;releases&lt;/code&gt; 디렉토리 를 사용하도록 지시하십시오 . 이 SASL는 환경 변수 설정에 의해 수행 &lt;code&gt;releases_dir&lt;/code&gt; 을 명령 행하거나, ( &lt;code&gt;-sasl releases_dir &amp;lt;target-dir&amp;gt;/releases&lt;/code&gt; ) 또는 &lt;code&gt;sys.config&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="572e18ff0add697584fb4ac9dc773051bb0e16f3" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;Common Test&lt;/code&gt; to repeat the tests &lt;code&gt;n&lt;/code&gt; times (described later).</source>
          <target state="translated">지시 &lt;code&gt;Common Test&lt;/code&gt; 테스트 반복 &lt;code&gt;n&lt;/code&gt; 배 (나중에 설명 참조).</target>
        </trans-unit>
        <trans-unit id="e4b8cb1936cb9df69d4554104909777bb2678271" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;Common Test&lt;/code&gt; to repeat the tests for duration of time (described later).</source>
          <target state="translated">지시 &lt;code&gt;Common Test&lt;/code&gt; 시간 동안 테스트를 반복 (나중에 설명).</target>
        </trans-unit>
        <trans-unit id="2898ea99fa920352a923e39692a4049acc36eb31" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;Common Test&lt;/code&gt; to repeat the tests until &lt;code&gt;stop_time&lt;/code&gt; (described later).</source>
          <target state="translated">지시 &lt;code&gt;Common Test&lt;/code&gt; 테스트 할 때까지 반복 &lt;code&gt;stop_time&lt;/code&gt; (나중에 설명 참조).</target>
        </trans-unit>
        <trans-unit id="c92112317bc19f17ac0b4b2471fd5a9c1e5815d5" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;erlc&lt;/code&gt; to identify the &lt;code&gt;&lt;a href=&quot;#compile_server&quot;&gt;compile server&lt;/a&gt;&lt;/code&gt; by the given name, allowing a single user to run multiple unrelated builds in parallel without them affecting each other, which can be useful for shared build machines and the like. The name must be alpha&amp;shy;numeric, and it defaults to being empty.</source>
          <target state="translated">지시 &lt;code&gt;erlc&lt;/code&gt; 식별하기 위해 &lt;code&gt;&lt;a href=&quot;#compile_server&quot;&gt;compile server&lt;/a&gt;&lt;/code&gt; 관련이없는 여러 그들을 공유 빌드 머신 등이 유용 할 수있는, 서로 영향을주지 않고 병렬로 빌드를 실행하는 단일 사용자를 허용, 지정된 이름으로. 이름은 영숫자 여야하며 기본값은 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e085c8fd09860d3c0a7a2525ced06370c6aa9e09" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;erlsrv&lt;/code&gt; how to stop the Erlang emulator. Default is to kill it (Win32 TerminateProcess), but this action can specify any Erlang shell command that will be executed in the emulator to make it stop. The emulator is expected to stop within 30 seconds after the command is issued in the shell. If the emulator is not stopped, it reports a running state to the service manager.</source>
          <target state="translated">&lt;code&gt;erlsrv&lt;/code&gt; 에게 Erlang 에뮬레이터를 중지하는 방법을 알려줍니다 . 기본값은 강제 종료 (Win32 TerminateProcess)이지만이 조치는 에뮬레이터에서 실행될 Erlang 쉘 명령을 지정하여 중지시킬 수 있습니다. 에뮬레이터는 명령이 셸에서 실행 된 후 30 초 이내에 중지됩니다. 에뮬레이터가 중지되지 않은 경우 서비스 관리자에게 실행 상태를보고합니다.</target>
        </trans-unit>
        <trans-unit id="c0b8c2f094ce49a65d1ca33bf7b4040a376bc6cf" translate="yes" xml:space="preserve">
          <source>Tells explicitly which XML Schema documents to use to validate the XML document. Used together with the &lt;code&gt;{validation,schema}&lt;/code&gt; option.</source>
          <target state="translated">XML 문서의 유효성을 검사하는 데 사용할 XML 스키마 문서를 명시 적으로 알려줍니다. &lt;code&gt;{validation,schema}&lt;/code&gt; 옵션 과 함께 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f27ad2c99675baa756699913dd57ef07b0c20bd8" translate="yes" xml:space="preserve">
          <source>Tells supervisor &lt;code&gt;SupRef&lt;/code&gt; to delete the child specification identified by &lt;code&gt;Id&lt;/code&gt;. The corresponding child process must not be running. Use &lt;code&gt;&lt;a href=&quot;#terminate_child-2&quot;&gt; terminate_child/2&lt;/a&gt;&lt;/code&gt; to terminate it.</source>
          <target state="translated">감독자 &lt;code&gt;SupRef&lt;/code&gt; 에게 &lt;code&gt;Id&lt;/code&gt; 로 식별되는 하위 사양을 삭제하도록 지시 합니다 . 해당 하위 프로세스가 실행되고 있지 않아야합니다. &lt;code&gt;&lt;a href=&quot;#terminate_child-2&quot;&gt; terminate_child/2&lt;/a&gt;&lt;/code&gt; 하려면 terminate_child / 2 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0492b5903796ca58eb4f908e0044cfd75d4cdeda" translate="yes" xml:space="preserve">
          <source>Tells supervisor &lt;code&gt;SupRef&lt;/code&gt; to delete the child specification identified by &lt;code&gt;Id&lt;/code&gt;. The corresponding child process must not be running. Use &lt;code&gt;&lt;a href=&quot;#terminate_child-2&quot;&gt;terminate_child/2&lt;/a&gt;&lt;/code&gt; to terminate it.</source>
          <target state="translated">감독자 &lt;code&gt;SupRef&lt;/code&gt; 에게 &lt;code&gt;Id&lt;/code&gt; 로 식별 된 하위 사양을 삭제하도록 지시 합니다 . 해당 하위 프로세스가 실행되고 있지 않아야합니다. &lt;code&gt;&lt;a href=&quot;#terminate_child-2&quot;&gt;terminate_child/2&lt;/a&gt;&lt;/code&gt; 를 사용 하여 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="854d6e6ea1b17fd3503e1214e269e4327574ba1f" translate="yes" xml:space="preserve">
          <source>Tells supervisor &lt;code&gt;SupRef&lt;/code&gt; to restart a child process corresponding to the child specification identified by &lt;code&gt;Id&lt;/code&gt;. The child specification must exist, and the corresponding child process must not be running.</source>
          <target state="translated">감독자 &lt;code&gt;SupRef&lt;/code&gt; 에게 &lt;code&gt;Id&lt;/code&gt; 로 식별 된 하위 사양에 해당하는 하위 프로세스를 다시 시작하도록 지시 합니다 . 하위 스펙이 존재해야하며 해당 하위 프로세스가 실행되고 있지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="83cd5f49c19723bcbd4b9d8efb377bc645bf4fe0" translate="yes" xml:space="preserve">
          <source>Tells supervisor &lt;code&gt;SupRef&lt;/code&gt; to terminate the specified child.</source>
          <target state="translated">감독자 &lt;code&gt;SupRef&lt;/code&gt; 에게 지정된 자식을 종료하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="caff595a530bcc59815e7fe18f59345b5ce49ff6" translate="yes" xml:space="preserve">
          <source>Tells the DNS client &lt;code&gt;inet_res(3)&lt;/code&gt; to look up IPv6 addresses. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">DNS 클라이언트 &lt;code&gt;inet_res(3)&lt;/code&gt; 에게 IPv6 주소를 찾도록 지시합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6fdb6ce16675d8c8dd66ce3986070e67a82e2171" translate="yes" xml:space="preserve">
          <source>Tells the DNS client &lt;code&gt;inet_res(3)&lt;/code&gt; to use TCP (Virtual Circuit) instead of UDP. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">DNS 클라이언트 &lt;code&gt;inet_res(3)&lt;/code&gt; 에게 UDP 대신 TCP (Virtual Circuit)를 사용하도록 지시합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="78c529a078634064f178098741caf31cb78a48a7" translate="yes" xml:space="preserve">
          <source>Tells the compiler to generate functions for conversion between names (as atoms) and numbers and conversely for the specified &lt;code&gt;EnumTypeName&lt;/code&gt;. There can be multiple occurrences of this option to specify several type names. The type names must be declared as &lt;code&gt;ENUMERATIONS&lt;/code&gt; in the ASN.1 specification.</source>
          <target state="translated">컴파일러에게 이름 (원자)과 숫자 사이의 변환 및 반대로 지정된 &lt;code&gt;EnumTypeName&lt;/code&gt; 에 대한 함수를 생성하도록 지시합니다 . 여러 유형 이름을 지정하기 위해이 옵션이 여러 번 나타날 수 있습니다. 유형 이름은 ASN.1 사양에서 &lt;code&gt;ENUMERATIONS&lt;/code&gt; 로 선언해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e172f20b4d566d8aacc2518381b97748aac82bd1" translate="yes" xml:space="preserve">
          <source>Tells the local client to listen to &lt;code&gt;ListenHost:ListenPort&lt;/code&gt;. When someone connects to that address, the connection is forwarded in an encrypted channel to the peer server of &lt;code&gt;ConnectionRef&lt;/code&gt;. That server then connects to &lt;code&gt;ConnectToHost:ConnectToPort&lt;/code&gt;.</source>
          <target state="translated">로컬 클라이언트에게 &lt;code&gt;ListenHost:ListenPort&lt;/code&gt; 를 수신하도록 지시 합니다. 누군가가 해당 주소에 연결하면 연결이 암호화 된 채널에서 &lt;code&gt;ConnectionRef&lt;/code&gt; 의 피어 서버로 전달됩니다 . 그런 다음 해당 서버는 &lt;code&gt;ConnectToHost:ConnectToPort&lt;/code&gt; 에 연결됩니다 .</target>
        </trans-unit>
        <trans-unit id="0a526775f5490371c812a9e90593190860b2feeb" translate="yes" xml:space="preserve">
          <source>Tells the process to change code. The process must be suspended to handle this message. Argument &lt;code&gt;Extra&lt;/code&gt; is reserved for each process to use as its own. Function &lt;code&gt;Module:system_code_change/4&lt;/code&gt; is called. &lt;code&gt;OldVsn&lt;/code&gt; is the old version of the &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">프로세스가 코드를 변경하도록 지시합니다. 이 메시지를 처리하려면 프로세스를 일시 중단해야합니다. 인수 &lt;code&gt;Extra&lt;/code&gt; 는 각 프로세스가 자체적으로 사용하도록 예약되어 있습니다. 함수 &lt;code&gt;Module:system_code_change/4&lt;/code&gt; 가 호출됩니다. &lt;code&gt;OldVsn&lt;/code&gt; 은 &lt;code&gt;Module&lt;/code&gt; 의 이전 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="ea6c03461dc3a543514f149ca6bb793d0a9e158a" translate="yes" xml:space="preserve">
          <source>Telugu</source>
          <target state="translated">Telugu</target>
        </trans-unit>
        <trans-unit id="48a0458cda5329a0ce2df604a592dac2d33cdef2" translate="yes" xml:space="preserve">
          <source>Temporary error: Try again.</source>
          <target state="translated">일시적인 오류 : 다시 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="c5c7003721dac5bbb05b8381d825683179e7de3e" translate="yes" xml:space="preserve">
          <source>Temporary files and the output file can be compressed. Defaults &lt;code&gt;false&lt;/code&gt;, which implies that written files are not compressed. Regardless of the value of option &lt;code&gt;compressed&lt;/code&gt;, compressed files can always be read. Notice that reading and writing compressed files are significantly slower than reading and writing uncompressed files.</source>
          <target state="translated">임시 파일과 출력 파일을 압축 할 수 있습니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 이며, 이는 작성된 파일이 압축되지 않았 음을 나타냅니다. &lt;code&gt;compressed&lt;/code&gt; 옵션 옵션의 값에 관계없이 압축 파일을 항상 읽을 수 있습니다. 압축 파일을 읽고 쓰는 것이 압축되지 않은 파일을 읽고 쓰는 것보다 상당히 느립니다.</target>
        </trans-unit>
        <trans-unit id="1532f885d5197fe3f8b41aeb41de89534d082e50" translate="yes" xml:space="preserve">
          <source>Term comparison operators return the Boolean value of the expression, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">용어 비교 연산자는 표현식의 부울 값 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="30fd6857122636ec1a6eaf8d0167df27dbbc2068" translate="yes" xml:space="preserve">
          <source>Term comparisons</source>
          <target state="translated">용어 비교</target>
        </trans-unit>
        <trans-unit id="36df6bde5c18fe5e5d93fd385843cb7b8a0873f6" translate="yes" xml:space="preserve">
          <source>Term constructions/literals are translated as much as is needed to get them into valid match specification. This way tuples are made into match specification tuple constructions (a one element tuple containing the tuple) and constant expressions are used when importing variables from the environment. Records are also translated into plain tuple constructions, calls to element, and so on. The guard test &lt;code&gt;is_record/2&lt;/code&gt; is translated into match specification code using the three parameter version that is built into match specification, so that &lt;code&gt;is_record(A,t)&lt;/code&gt; is translated into &lt;code&gt;{is_record,'$1',t,5}&lt;/code&gt; if the record size of record type &lt;code&gt;t&lt;/code&gt; is 5.</source>
          <target state="translated">용어 구성 / 리터럴은 유효한 일치 사양으로 만드는 데 필요한만큼 번역됩니다. 이런 방식으로 튜플은 일치하는 튜플 구성 (튜플을 포함하는 하나의 요소 튜플)로 만들어지고 환경에서 변수를 가져올 때 상수 표현식이 사용됩니다. 레코드는 일반 튜플 구성, 요소 호출 등으로 변환됩니다. 가드 테스트 &lt;code&gt;is_record/2&lt;/code&gt; 는 일치 스펙에 내장 된 3 개의 매개 변수 버전을 사용하여 일치 스펙 코드 로 변환 되므로 레코드 크기 인 경우 &lt;code&gt;is_record(A,t)&lt;/code&gt; 는 &lt;code&gt;{is_record,'$1',t,5}&lt;/code&gt; 됩니다. 레코드 유형 &lt;code&gt;t&lt;/code&gt; 의 5는 5입니다.</target>
        </trans-unit>
        <trans-unit id="908579f030e6ac5e6a39f29bf0038f9182d1fd66" translate="yes" xml:space="preserve">
          <source>Term is not a binary.</source>
          <target state="translated">용어는 이진이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="5d829d8d88e8cd49904c2d497e5f4269a47915dc" translate="yes" xml:space="preserve">
          <source>Term lookup (using &lt;code&gt;&lt;a href=&quot;#get-1&quot;&gt;get/1&lt;/a&gt;&lt;/code&gt;), is done in constant time and without taking any locks, and the term is &lt;strong&gt;not&lt;/strong&gt; copied to the heap (as is the case with terms stored in ETS tables).</source>
          <target state="translated">용어 조회 ( &lt;code&gt;&lt;a href=&quot;#get-1&quot;&gt;get/1&lt;/a&gt;&lt;/code&gt; 사용 )는 잠금을 사용하지 않고 일정한 시간에 수행되며 용어는 힙에 복사 &lt;strong&gt;되지 않습니다&lt;/strong&gt; (ETS 테이블에 저장된 용어의 경우).</target>
        </trans-unit>
        <trans-unit id="0f9a73563feaeca50f714fb97a106cd148e6a35f" translate="yes" xml:space="preserve">
          <source>Term passed as the third argument to the &lt;code&gt;&lt;a href=&quot;diameter_transport#Mod:start-3&quot;&gt;start/3&lt;/a&gt;&lt;/code&gt; function of the relevant &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport module&lt;/a&gt;&lt;/code&gt; in order to start a transport process. Defaults to the empty list.</source>
          <target state="translated">운송 프로세스를 시작하기 위해 관련 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport module&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;diameter_transport#Mod:start-3&quot;&gt;start/3&lt;/a&gt;&lt;/code&gt; 기능에 세 번째 인수로 전달 된 용어 입니다. 빈 목록이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="3f8f0ee26904835ba099c9d58d8e24027035ee73" translate="yes" xml:space="preserve">
          <source>Term to be sent to &lt;code&gt;&lt;a href=&quot;gen_event#add_handler-3&quot;&gt; gen_event:add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_event#add_handler-3&quot;&gt; gen_event:add_handler/3&lt;/a&gt;&lt;/code&gt; 로 보낼 용어 입니다.</target>
        </trans-unit>
        <trans-unit id="dfe25b408798a81c28611f4d808102f77953debd" translate="yes" xml:space="preserve">
          <source>Term to be sent to &lt;code&gt;&lt;a href=&quot;gen_event#add_handler-3&quot;&gt;gen_event:add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_event#add_handler-3&quot;&gt;gen_event:add_handler/3&lt;/a&gt;&lt;/code&gt; 으로 전송되는 용어 .</target>
        </trans-unit>
        <trans-unit id="09f89796d08f4695c60595fc0a731d30d3e1ce2a" translate="yes" xml:space="preserve">
          <source>TermConstruct = {{}} | {{ ConditionExpression, ... }} | &lt;code&gt;[]&lt;/code&gt; | [ConditionExpression, ...] | #{} | #{term() =&amp;gt; ConditionExpression, ...} | NonCompositeTerm | Constant</source>
          <target state="translated">TermConstruct = {{}} | {{ConditionExpression, ...}} | &lt;code&gt;[]&lt;/code&gt; | [조건식, ...] | # {} | # {term () =&amp;gt; ConditionExpression, ...} | 비 복합 용어 | 일정한</target>
        </trans-unit>
        <trans-unit id="301994d75fc00647fccf09f8223c73d02716a9f6" translate="yes" xml:space="preserve">
          <source>TermConstruct = {{}} | {{ ConditionExpression, ... }} | &lt;code&gt;[]&lt;/code&gt; | [ConditionExpression, ...] | &lt;code&gt;#{}&lt;/code&gt; | #{term() =&amp;gt; ConditionExpression, ...} | NonCompositeTerm | Constant</source>
          <target state="translated">TermConstruct = {{}} | {{ConditionExpression, ...}} | &lt;code&gt;[]&lt;/code&gt; | [조건식, ...] | &lt;code&gt;#{}&lt;/code&gt; | # {term () =&amp;gt; ConditionExpression, ...} | 비 복합 용어 | 일정한</target>
        </trans-unit>
        <trans-unit id="317c27ee519ee48f9c75d7b40776395c672e14f6" translate="yes" xml:space="preserve">
          <source>Terminal I/O is slightly easier than file I/O. The output is meant for human reading and is usually Erlang syntax (for example, in the shell). There exists syntactic representation of any Unicode character without displaying the glyph (instead written as &lt;code&gt;\x&lt;/code&gt;{&lt;code&gt;HHH&lt;/code&gt;}). Unicode data can therefore usually be displayed even if the terminal as such does not support the whole Unicode range.</source>
          <target state="translated">터미널 I / O는 파일 I / O보다 약간 쉽습니다. 출력은 사람이 읽기위한 것이며 대개 Erlang 구문입니다 (예 : 셸). 글리프를 표시하지 않고 모든 유니 코드 문자의 구문 표현이 있습니다 (대신 &lt;code&gt;\x&lt;/code&gt; { &lt;code&gt;HHH&lt;/code&gt; }). 따라서 터미널이 전체 유니 코드 범위를 지원하지 않더라도 유니 코드 데이터는 일반적으로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3782509534bdc8ecddfd675751de4bf801b681ec" translate="yes" xml:space="preserve">
          <source>Terminal categories may only appear in the right hand sides (= &lt;code&gt;rhs&lt;/code&gt;) of grammar rules.</source>
          <target state="translated">터미널 범주는 문법 규칙 의 오른쪽 (= &lt;code&gt;rhs&lt;/code&gt; ) 에만 나타날 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="157aa94e1d362822c48f2dff41e099927c9cb618" translate="yes" xml:space="preserve">
          <source>Terminate the transport process without Disconnect-Peer-Request being sent to the peer.</source>
          <target state="translated">연결 끊기 피어 요청이 피어로 전송되지 않고 전송 프로세스를 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="86018e6ee1482838e5a0aeb6ac5e33225172df60" translate="yes" xml:space="preserve">
          <source>Terminate the traversal and return &lt;code&gt;[Value | Acc]&lt;/code&gt;.</source>
          <target state="translated">순회를 종료하고 &lt;code&gt;[Value | Acc]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef4447a97be9cdfc58e0bd40da8f22d111904fcd" translate="yes" xml:space="preserve">
          <source>Terminates &lt;code&gt;etop&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; 을 종료 합니다 .</target>
        </trans-unit>
        <trans-unit id="baa4e4f2aee82c277b2987190bacf935eba00880" translate="yes" xml:space="preserve">
          <source>Terminates a test case with an error message specified by a format string and a list of values (used as arguments to &lt;code&gt;io_lib:format/2&lt;/code&gt;).</source>
          <target state="translated">형식 문자열과 값 목록 ( &lt;code&gt;io_lib:format/2&lt;/code&gt; 의 인수로 사용됨)으로 지정된 오류 메시지로 테스트 케이스를 종료합니다 .</target>
        </trans-unit>
        <trans-unit id="5a0abbf285140ae9fd7bfbb3aeee2d59660f0146" translate="yes" xml:space="preserve">
          <source>Terminates a test case with the specified error &lt;code&gt;Reason&lt;/code&gt;.</source>
          <target state="translated">지정된 오류 &lt;code&gt;Reason&lt;/code&gt; 테스트 케이스를 종료합니다 .</target>
        </trans-unit>
        <trans-unit id="2ab95c672b98796e32387d13d61b81abc40092fa" translate="yes" xml:space="preserve">
          <source>Terminates all processes listed in the window using &lt;code&gt;exit(Pid,kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit(Pid,kill)&lt;/code&gt; 사용하여 창에 나열된 모든 프로세스를 종료 합니다.</target>
        </trans-unit>
        <trans-unit id="004c6a43d05b92bb17dce6f779b63e9a29b1b7f4" translate="yes" xml:space="preserve">
          <source>Terminates the &lt;code&gt;gen_statem&lt;/code&gt; by calling &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;Reason&lt;/code&gt; and &lt;code&gt;NewData&lt;/code&gt;, if specified.</source>
          <target state="translated">지정된 경우 &lt;code&gt;Reason&lt;/code&gt; 및 &lt;code&gt;NewData&lt;/code&gt; 와 함께 &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt; 를 호출 하여 &lt;code&gt;gen_statem&lt;/code&gt; 을 종료 합니다.</target>
        </trans-unit>
        <trans-unit id="f271847fb13d7634791602927e994ef860fda84e" translate="yes" xml:space="preserve">
          <source>Terminates the Crashdump Viewer and closes all GUI windows.</source>
          <target state="translated">Crashdump Viewer를 종료하고 모든 GUI 창을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="519a117c3896c0663badf989d4b915309b17e65a" translate="yes" xml:space="preserve">
          <source>Terminates the calling thread with the exit value passed as argument. &lt;code&gt;exit_value&lt;/code&gt; is a pointer to an exit value or &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">종료 값을 인수로 전달하여 호출 스레드를 종료합니다. &lt;code&gt;exit_value&lt;/code&gt; 는 종료 값에 대한 포인터 또는 &lt;code&gt;NULL&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f20f699b09860115b81d54774a7222feaffe4a96" translate="yes" xml:space="preserve">
          <source>Terminates the character class</source>
          <target state="translated">캐릭터 클래스를 종료합니다</target>
        </trans-unit>
        <trans-unit id="bbd0750c043e7f8c526d39a2181c885faf307424" translate="yes" xml:space="preserve">
          <source>Terminates the process using &lt;code&gt;exit(Pid,kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit(Pid,kill)&lt;/code&gt; 사용하여 프로세스를 종료 합니다.</target>
        </trans-unit>
        <trans-unit id="442029ec5bdbe005c45a951ef68837682ec7053f" translate="yes" xml:space="preserve">
          <source>Terminating an Overloaded Handler</source>
          <target state="translated">오버로드 된 처리기 종료</target>
        </trans-unit>
        <trans-unit id="332a0cca120165a32d4b04552488dcf492ca6ec7" translate="yes" xml:space="preserve">
          <source>Terminating closing square bracket</source>
          <target state="translated">닫는 대괄호 종료</target>
        </trans-unit>
        <trans-unit id="d7c3f17b95db2d2dae8091cf37a7db7a0781a2f5" translate="yes" xml:space="preserve">
          <source>Termination of a process executing a dirty NIF can only be completed up to a certain point while it executes the dirty NIF. All Erlang resources, such as its registered name and its ETS tables, are released. All links and monitors are triggered. The execution of the NIF is, however, &lt;strong&gt;not&lt;/strong&gt; stopped. The NIF can safely continue execution, allocate heap memory, and so on, but it is of course better to stop executing as soon as possible. The NIF can check whether a current process is alive using &lt;code&gt;&lt;a href=&quot;#enif_is_current_process_alive&quot;&gt; enif_is_current_process_alive&lt;/a&gt;&lt;/code&gt;. Communication using &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#enif_port_command&quot;&gt; enif_port_command&lt;/a&gt;&lt;/code&gt; is also dropped when the sending process is not alive. Deallocation of certain internal resources, such as process heap and process control block, is delayed until the dirty NIF has completed.</source>
          <target state="translated">더티 NIF를 실행하는 프로세스의 종료는 더티 NIF를 실행하는 동안 특정 지점까지만 완료 될 수 있습니다. 등록 된 이름 및 ETS 테이블과 같은 모든 Erlang 리소스가 해제됩니다. 모든 링크와 모니터가 트리거됩니다. 그러나 NIF의 실행은 중지 &lt;strong&gt;되지 않습니다&lt;/strong&gt; . NIF는 안전하게 실행을 계속하고 힙 메모리를 할당하는 등의 작업을 수행 할 수 있지만 물론 가능한 한 빨리 실행을 중지하는 것이 좋습니다. NIF는 &lt;code&gt;&lt;a href=&quot;#enif_is_current_process_alive&quot;&gt; enif_is_current_process_alive&lt;/a&gt;&lt;/code&gt; 를 사용하여 현재 프로세스가 살아 있는지 확인할 수 있습니다 . &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#enif_port_command&quot;&gt; enif_port_command&lt;/a&gt;&lt;/code&gt; 를 사용한 통신전송 프로세스가 살아 있지 않을 때도 삭제됩니다. 프로세스 힙 및 프로세스 제어 블록과 같은 특정 내부 자원의 할당 해제는 더티 NIF가 완료 될 때까지 지연됩니다.</target>
        </trans-unit>
        <trans-unit id="0f64c2787dcc796a369590e14f97af233d6dfc3a" translate="yes" xml:space="preserve">
          <source>Termination of a process executing a dirty NIF can only be completed up to a certain point while it executes the dirty NIF. All Erlang resources, such as its registered name and its ETS tables, are released. All links and monitors are triggered. The execution of the NIF is, however, &lt;strong&gt;not&lt;/strong&gt; stopped. The NIF can safely continue execution, allocate heap memory, and so on, but it is of course better to stop executing as soon as possible. The NIF can check whether a current process is alive using &lt;code&gt;&lt;a href=&quot;#enif_is_current_process_alive&quot;&gt;enif_is_current_process_alive&lt;/a&gt;&lt;/code&gt;. Communication using &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#enif_port_command&quot;&gt;enif_port_command&lt;/a&gt;&lt;/code&gt; is also dropped when the sending process is not alive. Deallocation of certain internal resources, such as process heap and process control block, is delayed until the dirty NIF has completed.</source>
          <target state="translated">더티 NIF를 실행하는 프로세스의 종료는 더티 NIF를 실행하는 동안 특정 지점까지만 완료 할 수 있습니다. 등록 된 이름 및 ETS 테이블과 같은 모든 Erlang 자원이 해제됩니다. 모든 링크와 모니터가 트리거됩니다. 그러나 NIF의 실행은 중지 &lt;strong&gt;되지 않습니다&lt;/strong&gt; . NIF는 안전하게 실행을 계속하고 힙 메모리를 할당하는 등의 작업을 수행 할 수 있지만 가능한 빨리 실행을 중지하는 것이 좋습니다. NIF는 &lt;code&gt;&lt;a href=&quot;#enif_is_current_process_alive&quot;&gt;enif_is_current_process_alive&lt;/a&gt;&lt;/code&gt; 를 사용하여 현재 프로세스가 활성 상태인지 확인할 수 있습니다 . &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#enif_port_command&quot;&gt;enif_port_command&lt;/a&gt;&lt;/code&gt; 를 사용한 통신전송 프로세스가 활성화되지 않은 경우에도 삭제됩니다. 더티 NIF가 완료 될 때까지 프로세스 힙 및 프로세스 제어 블록과 같은 특정 내부 자원의 할당이 지연됩니다.</target>
        </trans-unit>
        <trans-unit id="50961d0e1b820684d69e8aad3d9b1e96970dd946" translate="yes" xml:space="preserve">
          <source>Termination reason.</source>
          <target state="translated">해지 사유.</target>
        </trans-unit>
        <trans-unit id="e19bcb1a4afdcf2396c1810bc351a007a00a0314" translate="yes" xml:space="preserve">
          <source>Termination-Cause AVP</source>
          <target state="translated">종료 원인 AVP</target>
        </trans-unit>
        <trans-unit id="720015dea84e939f9657bdc05e78a8f484b53980" translate="yes" xml:space="preserve">
          <source>Termination-Cause AVP Values</source>
          <target state="translated">종료 원인 AVP 값</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="4c2426cb39319941b8d1775df38271f7b4dcd16d" translate="yes" xml:space="preserve">
          <source>Terms are created on the heap by evaluating expressions. There are two major types of terms: &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L88-L97&quot;&gt;immediate terms&lt;/a&gt;&lt;/code&gt; which require no heap space (small integers, atoms, pids, port ids etc) and cons or &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L106-L120&quot;&gt;boxed terms&lt;/a&gt;&lt;/code&gt; (tuple, big num, binaries etc) that do require heap space. Immediate terms do not need any heap space because they are embedded into the containing structure.</source>
          <target state="translated">표현식을 평가하여 힙에 용어가 작성됩니다. 두 가지 주요 유형의 용어가 있습니다. &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L88-L97&quot;&gt;immediate terms&lt;/a&gt;&lt;/code&gt; , 힙 공간 (작은 정수, 원자, pid, 포트 ID 등)이 필요하지 않은 즉각적인 용어 와 힙 공간이 필요한 단점 또는 &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L106-L120&quot;&gt;boxed terms&lt;/a&gt;&lt;/code&gt; (튜플, 큰 숫자, 바이너리 등)가 있습니다. 즉각적인 용어는 포함하는 구조에 포함되기 때문에 힙 공간이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="146c4bd146babe3998863abfd062b2ff20015f96" translate="yes" xml:space="preserve">
          <source>Terms are read from the disk log running on &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 실행되는 디스크 로그에서 용어를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="f400db43c5a4bb9dcf24053b78382c5623a73df7" translate="yes" xml:space="preserve">
          <source>Terms in the current test specification (that is, the specification that has been used to configure and run the current test) can be looked up. The function &lt;code&gt;&lt;a href=&quot;ct#get_testspec_terms-0&quot;&gt;get_testspec_terms()&lt;/a&gt;&lt;/code&gt; returns a list of all test specification terms (both configuration terms and test terms), and &lt;code&gt;get_testspec_terms(Tags)&lt;/code&gt; returns the term (or a list of terms) matching the tag (or tags) in &lt;code&gt;Tags&lt;/code&gt;.</source>
          <target state="translated">현재 테스트 사양의 용어 (즉, 현재 테스트를 구성하고 실행하는 데 사용 된 사양)를 찾을 수 있습니다. 함수 &lt;code&gt;&lt;a href=&quot;ct#get_testspec_terms-0&quot;&gt;get_testspec_terms()&lt;/a&gt;&lt;/code&gt; 모든 테스트 사양 용어 (구성 규정 및 시험 기간 모두)의 목록을 반환하고 &lt;code&gt;get_testspec_terms(Tags)&lt;/code&gt; 의 태그 (또는 태그)에 일치하는 용어 (또는 용어 목록) 반환 &lt;code&gt;Tags&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2258114625478405b0794d20feae7776bb952f1d" translate="yes" xml:space="preserve">
          <source>Terms of type binary are accessed with the help of struct type &lt;code&gt;&lt;a href=&quot;#ErlNifBinary&quot;&gt;ErlNifBinary&lt;/a&gt;&lt;/code&gt;, which contains a pointer (&lt;code&gt;data&lt;/code&gt;) to the raw binary data and the length (&lt;code&gt;size&lt;/code&gt;) of the data in bytes. Both &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; are read-only and are only to be written using calls to API functions. Instances of &lt;code&gt;ErlNifBinary&lt;/code&gt; are, however, always allocated by the user (usually as local variables).</source>
          <target state="translated">이진 유형의 용어는 원시 이진 데이터에 대한 포인터 ( &lt;code&gt;data&lt;/code&gt; )와 데이터의 길이 ( &lt;code&gt;size&lt;/code&gt; )를 바이트 단위로 포함하는 struct type &lt;code&gt;&lt;a href=&quot;#ErlNifBinary&quot;&gt;ErlNifBinary&lt;/a&gt;&lt;/code&gt; 의 도움으로 액세스 됩니다. 두 &lt;code&gt;data&lt;/code&gt; 및 &lt;code&gt;size&lt;/code&gt; 읽기 전용 API 함수를 호출을 사용하여 기록 될 만하다 있습니다. 그러나 &lt;code&gt;ErlNifBinary&lt;/code&gt; 의 인스턴스는 항상 사용자가 할당합니다 (일반적으로 로컬 변수).</target>
        </trans-unit>
        <trans-unit id="0142ab8e352548de5c05f911d7e958e6b8971ba8" translate="yes" xml:space="preserve">
          <source>Test Case Groups</source>
          <target state="translated">테스트 케이스 그룹</target>
        </trans-unit>
        <trans-unit id="7f9878ecc5f8fc715c85d05e25c161e27414bea5" translate="yes" xml:space="preserve">
          <source>Test Specification File Inclusion</source>
          <target state="translated">테스트 사양 파일 포함</target>
        </trans-unit>
        <trans-unit id="944ea681bdd24695841727dfba4de9e162c43a40" translate="yes" xml:space="preserve">
          <source>Test Specification Syntax</source>
          <target state="translated">테스트 사양 구문</target>
        </trans-unit>
        <trans-unit id="920e01199bada94afb9a7c210700367bebf552cd" translate="yes" xml:space="preserve">
          <source>Test case groups can be nested so sets of groups can be configured with the same &lt;code&gt;init_per_group/2&lt;/code&gt; and &lt;code&gt;end_per_group/2&lt;/code&gt; functions. Nested groups can be defined by including a group definition, or a group name reference, in the test case list of another group.</source>
          <target state="translated">테스트 케이스 그룹을 중첩 할 수 있으므로 동일한 &lt;code&gt;init_per_group/2&lt;/code&gt; 및 &lt;code&gt;end_per_group/2&lt;/code&gt; 기능 으로 그룹 세트를 구성 할 수 있습니다 . 중첩 그룹은 다른 그룹의 테스트 사례 목록에 그룹 정의 또는 그룹 이름 참조를 포함하여 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bdbfab66783753cdeb866267c3e01eab16087f3" translate="yes" xml:space="preserve">
          <source>Test cases</source>
          <target state="translated">테스트 사례</target>
        </trans-unit>
        <trans-unit id="6ee68d1c38276f67012fb2a67884c914e7df88a5" translate="yes" xml:space="preserve">
          <source>Test cases are to restore as much of the execution environment as possible, so that subsequent test cases do not crash because of their execution order. The function &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; is suitable for this.</source>
          <target state="translated">테스트 사례는 가능한 많은 실행 환경을 복원하여 후속 테스트 사례가 실행 순서로 인해 충돌하지 않도록해야합니다. &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; 함수 가 이에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="502217b19275e3837da02eb6df6666da0c998851" translate="yes" xml:space="preserve">
          <source>Test cases are to restore as much of the execution environment as possible, so that subsequent test cases do not crash because of their execution order. The function &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; is suitable for this.</source>
          <target state="translated">테스트 케이스는 가능한 한 많은 실행 환경을 복원하여 후속 테스트 케이스가 실행 순서로 인해 충돌하지 않도록하는 것입니다. &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_testcase-2&quot;&gt;end_per_testcase&lt;/a&gt;&lt;/code&gt; 함수 가 이에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="eb3ed6107b568f9909300a05e389ccf37148b03c" translate="yes" xml:space="preserve">
          <source>Test cases can be executed individually or in batches. &lt;code&gt;Common Test&lt;/code&gt; also features a distributed testing mode with central control and logging. With this feature, multiple systems can be tested independently in one common session. This is useful, for example, when running automated large-scale regression tests.</source>
          <target state="translated">테스트 사례는 개별적으로 또는 일괄 적으로 실행될 수 있습니다. &lt;code&gt;Common Test&lt;/code&gt; 에는 중앙 제어 및 로깅 기능이있는 분산 테스트 모드도 있습니다. 이 기능을 사용하면 하나의 공통 세션에서 여러 시스템을 독립적으로 테스트 할 수 있습니다. 예를 들어 자동화 된 대규모 회귀 테스트를 실행할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4b194be204295ad16e8f14aa0046caa585dd7fd0" translate="yes" xml:space="preserve">
          <source>Test cases can be skipped in the following ways:</source>
          <target state="translated">다음과 같은 방법으로 테스트 사례를 건너 뛸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d965a3f15f28a4c03812e7925aaabc94f5d085e2" translate="yes" xml:space="preserve">
          <source>Test cases in a sequence are executed in order until all succeed or one fails. If one fails, all following cases in the sequence are skipped. The cases in the sequence that have succeeded up to that point are reported as successful in the log. Any number of sequences can be specified.</source>
          <target state="translated">순서대로 테스트 케이스는 모두 성공하거나 실패 할 때까지 순서대로 실행됩니다. 하나가 실패하면 시퀀스의 다음 모든 경우를 건너 뜁니다. 해당 시점까지 성공한 순서의 사례는 로그에서 성공한 것으로보고됩니다. 임의의 수의 시퀀스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="40d70b7f6a0f40937f01a2ea075f8ecd7645309e" translate="yes" xml:space="preserve">
          <source>Test install using &lt;code&gt;EXTRA_PREFIX&lt;/code&gt;. The content of the &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; variable will prefix all installation paths when doing &lt;code&gt;make install&lt;/code&gt;. Note that &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; is similar to &lt;code&gt;DESTDIR&lt;/code&gt;, but it does &lt;strong&gt;not&lt;/strong&gt; have the same effect as &lt;code&gt;DESTDIR&lt;/code&gt;. The installation can and have to be run from the location specified by &lt;code&gt;EXTRA_PREFIX&lt;/code&gt;. That is, it can be useful if you want to try the system out, running test suites, etc, before doing the real install without &lt;code&gt;EXTRA_PREFIX&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EXTRA_PREFIX&lt;/code&gt; 를 사용하여 설치를 테스트하십시오 . &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; 변수 의 내용은 &lt;code&gt;make install&lt;/code&gt; 을 수행 할 때 모든 설치 경로 앞에 붙습니다 . 참고 것을 &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; 은 유사하다 &lt;code&gt;DESTDIR&lt;/code&gt; 하지만 않습니다 &lt;strong&gt;하지&lt;/strong&gt; 것과 같은 효과가 &lt;code&gt;DESTDIR&lt;/code&gt; 을 . &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; 로 지정된 위치에서 설치를 실행해야합니다 . 즉, &lt;code&gt;EXTRA_PREFIX&lt;/code&gt; 없이 실제 설치를 수행하기 전에 시스템을 시험해보고 테스트 스위트를 실행하려는 경우에 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="09cd8634fdd2477138516ede0b407901933f6764" translate="yes" xml:space="preserve">
          <source>Test sets can be joined in the same way: if &lt;code&gt;S_1&lt;/code&gt;, ..., &lt;code&gt;S_K&lt;/code&gt; are test sets, then &lt;code&gt;[S_1, ..., S_K]&lt;/code&gt; is also a test set, where the tests of &lt;code&gt;S_i&lt;/code&gt; are ordered before those of &lt;code&gt;S_(i+1)&lt;/code&gt;, for each subset &lt;code&gt;S_i&lt;/code&gt;.</source>
          <target state="translated">테스트 세트는 같은 방식으로 결합 될 수 있습니다. &lt;code&gt;S_1&lt;/code&gt; , ..., &lt;code&gt;S_K&lt;/code&gt; 가 테스트 세트 인 경우 &lt;code&gt;[S_1, ..., S_K]&lt;/code&gt; 도 테스트 세트입니다. 여기서 &lt;code&gt;S_i&lt;/code&gt; 의 테스트 는 &lt;code&gt;S_(i+1)&lt;/code&gt; 각 서브 세트 &lt;code&gt;S_i&lt;/code&gt; 에 대해 i + 1) .</target>
        </trans-unit>
        <trans-unit id="c0476bc91790b91266bc97b686a581dbb9934797" translate="yes" xml:space="preserve">
          <source>Test specifications can be used to run tests both in a single test host environment and in a distributed &lt;code&gt;Common Test&lt;/code&gt; environment (Large Scale Testing). The node parameters in term &lt;code&gt;init&lt;/code&gt; are only relevant in the latter (see section &lt;code&gt;&lt;a href=&quot;ct_master_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; in Large Scale Testing). For details about the various terms, see the corresponding sections in the User's Guide, for example, the following:</source>
          <target state="translated">테스트 사양은 단일 테스트 호스트 환경과 분산 &lt;code&gt;Common Test&lt;/code&gt; 환경 (대규모 테스트) 에서 테스트를 실행하는 데 사용할 수 있습니다 . &lt;code&gt;init&lt;/code&gt; 라는 용어의 노드 매개 변수 는 후자에만 관련이 있습니다 ( 대규모 &lt;code&gt;&lt;a href=&quot;ct_master_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; 섹션 참조 ). 다양한 용어에 대한 자세한 내용은 다음과 같이 사용자 안내서의 해당 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="30c41c15ebd68c9f73776e8a167fcaff4ee08b62" translate="yes" xml:space="preserve">
          <source>Test suites are organized in test directories and each test suite can have a separate data directory. Typically, these files and directories are version-controlled similar to other forms of source code (possibly by a version control system like GIT or Subversion). However, &lt;code&gt;Common Test&lt;/code&gt; does not itself put any requirements on (or has any awareness of) possible file and directory versions.</source>
          <target state="translated">테스트 스위트는 테스트 디렉토리로 구성되며 각 테스트 스위트는 별도의 데이터 디렉토리를 가질 수 있습니다. 일반적으로 이러한 파일 및 디렉토리는 다른 형식의 소스 코드와 유사하게 버전 제어됩니다 (GIT 또는 Subversion과 같은 버전 제어 시스템에 의해 가능함). 그러나 &lt;code&gt;Common Test&lt;/code&gt; 는 가능한 파일 및 디렉토리 버전에 대한 요구 사항을 제시하지도 않습니다.</target>
        </trans-unit>
        <trans-unit id="703b1b5effc82cad270e49b3081c9a0476a73290" translate="yes" xml:space="preserve">
          <source>Test the boot script. To do this, start Erlang with the &lt;code&gt;-boot&lt;/code&gt; command-line parameter specifying this boot script (with its full path, but without the &lt;code&gt;.boot&lt;/code&gt; suffix). In UNIX it can look as follows:</source>
          <target state="translated">부팅 스크립트를 테스트하십시오. 이렇게하려면 이 부트 스크립트를 지정 하는 &lt;code&gt;-boot&lt;/code&gt; 명령 줄 매개 변수를 사용하여 Erlang을 시작하십시오 (전체 경로는 있지만 &lt;code&gt;.boot&lt;/code&gt; 접미어는 사용 하지 않음 ). UNIX에서는 다음과 같이 보일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1079562f698ab46db96db811ee51262354e5cae9" translate="yes" xml:space="preserve">
          <source>Test the function:</source>
          <target state="translated">기능을 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="5d3e2372695f63ce0c53a4f4135db20d5ae16db5" translate="yes" xml:space="preserve">
          <source>Test:</source>
          <target state="translated">Test:</target>
        </trans-unit>
        <trans-unit id="10e93232f5ee13cde5c73ae6c73ca6a57a250ad6" translate="yes" xml:space="preserve">
          <source>TestResult</source>
          <target state="translated">TestResult</target>
        </trans-unit>
        <trans-unit id="9ff287ce9b2c7f5d011b9dafc2c0e9b0834011d4" translate="yes" xml:space="preserve">
          <source>Testing can be turned off by defining the &lt;code&gt;NOTEST&lt;/code&gt; macro when compiling, for example as an option to &lt;code&gt;erlc&lt;/code&gt;, as in:</source>
          <target state="translated">다음 과 같이 컴파일 할 때 &lt;code&gt;NOTEST&lt;/code&gt; 매크로 를 정의하여 ( 예 : &lt;code&gt;erlc&lt;/code&gt; 옵션으로) 테스트를 끌 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2585f55dae2dfcc3e47a81c069669b6106c8d569" translate="yes" xml:space="preserve">
          <source>Testing is performed by running test suites (sets of test cases) or individual test cases. A test suite is implemented as an Erlang module named &lt;code&gt;&amp;lt;suite_name&amp;gt;_SUITE.erl&lt;/code&gt; which contains a number of test cases. A test case is an Erlang function that tests one or more things. The test case is the smallest unit that the &lt;code&gt;Common Test&lt;/code&gt; test server deals with.</source>
          <target state="translated">테스트 스위트 (테스트 케이스 세트) 또는 개별 테스트 케이스를 실행하여 테스트를 수행합니다. 테스트 스위트는 여러 테스트 사례를 포함하는 &lt;code&gt;&amp;lt;suite_name&amp;gt;_SUITE.erl&lt;/code&gt; 이라는 Erlang 모듈로 구현됩니다 . 테스트 케이스는 하나 이상의 것을 테스트하는 Erlang 함수입니다. 테스트 케이스는 &lt;code&gt;Common Test&lt;/code&gt; 테스트 서버 가 처리하는 가장 작은 단위입니다 .</target>
        </trans-unit>
        <trans-unit id="cc6f17d3447c6fc66e6aa450b14b5cd25f941708" translate="yes" xml:space="preserve">
          <source>Testing that a complete system behaves according to its specification. Specifically, system testing should not require knowing any details about the implementation. It typically involves testing many different aspects of the system behaviour apart from the basic functionality, such as performance, usability, and reliability.</source>
          <target state="translated">전체 시스템이 사양에 따라 작동하는지 테스트 특히 시스템 테스트는 구현에 대한 세부 사항을 알 필요가 없습니다. 일반적으로 성능, 유용성 및 안정성과 같은 기본 기능 외에도 시스템 동작의 다양한 측면을 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="20415ba2297f8ab20d67c7323905cf5ac08c6d83" translate="yes" xml:space="preserve">
          <source>Testing that a number of individually developed program units (assumed to already have been separately unit tested) work together as expected. Depending on the system being developed, integration testing may be as simple as &quot;just another level of unit testing&quot;, but might also involve other kinds of tests (compare &lt;strong&gt;system testing&lt;/strong&gt;).</source>
          <target state="translated">개별적으로 개발 된 여러 프로그램 단위 (이미 개별적으로 단위 테스트를 거친 것으로 가정) 테스트는 예상대로 함께 작동합니다. 개발중인 시스템에 따라 통합 테스트는 &quot;다른 수준의 단위 테스트&quot;처럼 간단 할 수 있지만 다른 종류의 테스트 ( &lt;strong&gt;시스템 테스트&lt;/strong&gt; 비교)도 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9f22e406cc557d808f91d5ca40281d6d87b69e3f" translate="yes" xml:space="preserve">
          <source>Testing that a program unit behaves as it is supposed to do (in itself), according to its specifications. Unit tests have an important function as regression tests, when the program later is modified for some reason, since they check that the program still behaves according to specification.</source>
          <target state="translated">프로그램 단위가 사양에 따라 (자체적으로) 예상대로 동작하는지 테스트. 단위 테스트는 프로그램이 사양에 따라 여전히 작동하는지 확인하기 때문에 나중에 어떤 이유로 프로그램이 수정 될 때 회귀 테스트로서 중요한 기능을합니다.</target>
        </trans-unit>
        <trans-unit id="4edeec23b3417c02267c0c57b9ce61f0a5bdd89d" translate="yes" xml:space="preserve">
          <source>Testing the Application Configuration File</source>
          <target state="translated">응용 프로그램 구성 파일 테스트</target>
        </trans-unit>
        <trans-unit id="d049bb261c78990b7f3a05cead76ac7f2ab8f8d3" translate="yes" xml:space="preserve">
          <source>Testing this program gives:</source>
          <target state="translated">이 프로그램을 테스트하면 다음이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="74f89af16035a3ffe47bb31788c010b03eb87ddd" translate="yes" xml:space="preserve">
          <source>Tests a match specification used in calls to &lt;code&gt;ets:select/2&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt; erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt;. The function tests both a match specification for &quot;syntactic&quot; correctness and runs the match specification against the object. If the match specification contains errors, the tuple &lt;code&gt;{error, Errors}&lt;/code&gt; is returned, where &lt;code&gt;Errors&lt;/code&gt; is a list of natural language descriptions of what was wrong with the match specification.</source>
          <target state="translated">&lt;code&gt;ets:select/2&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt; erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt; 호출에 사용되는 일치 사양을 테스트합니다 . 이 함수는 &quot;구문&quot;정확성에 대해 일치 사양을 테스트하고 개체에 대해 일치 사양을 실행합니다. 일치 사양에 오류가 포함 된 경우 튜플 &lt;code&gt;{error, Errors}&lt;/code&gt; 가 반환됩니다. 여기서 &lt;code&gt;Errors&lt;/code&gt; 는 일치 사양에 무엇이 잘못되었는지에 대한 자연어 설명 목록입니다.</target>
        </trans-unit>
        <trans-unit id="1ebcdae36a9b05a6e1ab46518e4e58eef26626f1" translate="yes" xml:space="preserve">
          <source>Tests a match specification used in calls to &lt;code&gt;ets:select/2&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt;. The function tests both a match specification for &quot;syntactic&quot; correctness and runs the match specification against the object. If the match specification contains errors, the tuple &lt;code&gt;{error, Errors}&lt;/code&gt; is returned, where &lt;code&gt;Errors&lt;/code&gt; is a list of natural language descriptions of what was wrong with the match specification.</source>
          <target state="translated">&lt;code&gt;ets:select/2&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt; 호출에 사용 된 일치 스펙을 테스트합니다 . 이 함수는 &quot;구문&quot;정확성에 대한 일치 스펙을 테스트하고 오브젝트에 대해 일치 스펙을 실행합니다. 일치 스펙에 오류가 포함 된 경우 튜플 &lt;code&gt;{error, Errors}&lt;/code&gt; 가 리턴됩니다. 여기서 &lt;code&gt;Errors&lt;/code&gt; 는 일치 스펙의 문제점에 대한 자연어 설명 목록입니다.</target>
        </trans-unit>
        <trans-unit id="20af8d3a638a732a9ca30d0034512653a2afc567" translate="yes" xml:space="preserve">
          <source>Tests are spawned on &lt;code&gt;Node&lt;/code&gt; according to &lt;code&gt;TestSpecs&lt;/code&gt;.</source>
          <target state="translated">테스트는 &lt;code&gt;TestSpecs&lt;/code&gt; 에 따라 &lt;code&gt;Node&lt;/code&gt; 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="5256271d196622c54f105bca18a5696746dffbca" translate="yes" xml:space="preserve">
          <source>Tests are spawned on &lt;code&gt;Node&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">테스트는 &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;Node&lt;/code&gt; 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="25a350c07b1dc4870d3e5fe60df517c27f4d00ae" translate="yes" xml:space="preserve">
          <source>Tests are spawned on &lt;code&gt;Node&lt;/code&gt; using &lt;code&gt;ct:run_test/1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ct:run_test/1&lt;/code&gt; 을 사용하여 &lt;code&gt;Node&lt;/code&gt; 에서 테스트가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="f9a6986bdc799652b1ed63c152d9475dfa79837d" translate="yes" xml:space="preserve">
          <source>Tests are spawned on the nodes as specified in &lt;code&gt;TestSpecs&lt;/code&gt;. Each specification in &lt;code&gt;TestSpec&lt;/code&gt; is handled separately. However, it is also possible to specify a list of specifications to be merged into one specification before the tests are executed. Any test without a particular node specification is also executed on the nodes in &lt;code&gt;InclNodes&lt;/code&gt;. Nodes in the &lt;code&gt;ExclNodes&lt;/code&gt; list are excluded from the test.</source>
          <target state="translated">&lt;code&gt;TestSpecs&lt;/code&gt; 에 지정된대로 노드에서 테스트가 생성됩니다 . &lt;code&gt;TestSpec&lt;/code&gt; 의 각 스펙 은 별도로 처리됩니다. 그러나 테스트를 실행하기 전에 하나의 사양으로 병합 할 사양 목록을 지정할 수도 있습니다. 특정 노드 지정이없는 테스트는 &lt;code&gt;InclNodes&lt;/code&gt; 의 노드에서도 실행됩니다 . &lt;code&gt;ExclNodes&lt;/code&gt; 목록의 노드 는 테스트에서 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="70b11f1992889a6b7c7c46cf1041e8db8225983d" translate="yes" xml:space="preserve">
          <source>Tests are started by calling &lt;code&gt;&lt;a href=&quot;ct_master#run-1&quot;&gt;ct_master:run(TestSpecs)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ct_master#run-3&quot;&gt;ct_master:run(TestSpecs, InclNodes, ExclNodes)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct_master#run-1&quot;&gt;ct_master:run(TestSpecs)&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;ct_master#run-3&quot;&gt;ct_master:run(TestSpecs, InclNodes, ExclNodes)&lt;/a&gt;&lt;/code&gt; 를 호출하여 테스트를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="edd1416326574341276f022d1ca99a8e16dca2e3" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Expr&lt;/code&gt; is a legal guard test. &lt;code&gt;Expr&lt;/code&gt; is an Erlang term representing the abstract form for the expression. &lt;code&gt;&lt;a href=&quot;erl_parse#parse_exprs-1&quot;&gt; erl_parse:parse_exprs(Tokens)&lt;/a&gt;&lt;/code&gt; can be used to generate a list of &lt;code&gt;Expr&lt;/code&gt;.</source>
          <target state="translated">경우 테스트 &lt;code&gt;Expr&lt;/code&gt; 법적 보호 테스트입니다. &lt;code&gt;Expr&lt;/code&gt; 은 표현식의 추상 형식을 나타내는 Erlang 용어입니다. &lt;code&gt;&lt;a href=&quot;erl_parse#parse_exprs-1&quot;&gt; erl_parse:parse_exprs(Tokens)&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;Expr&lt;/code&gt; 목록을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef16c9679cb63420148768ec48ac04c5d63e936c" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Expr&lt;/code&gt; is a legal guard test. &lt;code&gt;Expr&lt;/code&gt; is an Erlang term representing the abstract form for the expression. &lt;code&gt;&lt;a href=&quot;erl_parse#parse_exprs-1&quot;&gt;erl_parse:parse_exprs(Tokens)&lt;/a&gt;&lt;/code&gt; can be used to generate a list of &lt;code&gt;Expr&lt;/code&gt;.</source>
          <target state="translated">경우 테스트 &lt;code&gt;Expr&lt;/code&gt; 법적 보호 테스트입니다. &lt;code&gt;Expr&lt;/code&gt; 은 표현식의 추상 형식을 나타내는 Erlang 용어입니다. &lt;code&gt;&lt;a href=&quot;erl_parse#parse_exprs-1&quot;&gt;erl_parse:parse_exprs(Tokens)&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;Expr&lt;/code&gt; 목록을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c8ad645a0fe48da2850f345d9fd12acf10e03596" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Key&lt;/code&gt; is contained in dictionary &lt;code&gt;Dict&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 가 사전 &lt;code&gt;Dict&lt;/code&gt; 에 포함되어 있는지 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="6804c0c8402a7f1d95110388290468af5380b366" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Key&lt;/code&gt; is contained in dictionary &lt;code&gt;Orddict&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 가 사전 &lt;code&gt;Orddict&lt;/code&gt; 에 포함되어 있는지 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="6773efb90e5261c07cc7892c10f6e03aef593551" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Q&lt;/code&gt; is empty and returns &lt;code&gt;true&lt;/code&gt; if so, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Q&lt;/code&gt; 가 비어 있는지 테스트 하고 그렇다면 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="17470d32fe0b145b2fa6cac2598fec80f0fef633" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Q&lt;/code&gt; is empty and returns &lt;code&gt;true&lt;/code&gt; if so, otherwise otherwise.</source>
          <target state="translated">&lt;code&gt;Q&lt;/code&gt; 가 비어 있는지 테스트 하고, 그렇지 않으면 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="a356ab74ac86d19af634fb0738a567189848582f" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;Term&lt;/code&gt; is a queue and returns &lt;code&gt;true&lt;/code&gt; if so, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; 이 대기열 인지 테스트 하고, 그렇다면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="c37996f5d93af87f0cd3d137cfbd78cf77e1b111" translate="yes" xml:space="preserve">
          <source>Tests if the Actions argument is correctly composed.</source>
          <target state="translated">Actions 인수가 올바르게 구성되었는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="acacfb3b7cddace5d9eb1b40646553496edf16cd" translate="yes" xml:space="preserve">
          <source>Tests if the Reply argument is correctly composed.</source>
          <target state="translated">Reply 인수가 올바르게 구성되었는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="b509242db4fc7480982770e0d84f1754a7128ed9" translate="yes" xml:space="preserve">
          <source>Tests properties in those files using the first found Property Testing Tool.</source>
          <target state="translated">처음 발견 된 속성 테스트 도구를 사용하여 해당 파일의 속성을 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="05fe70637fd8ca288c9016c0d2d69bc952a899ac" translate="yes" xml:space="preserve">
          <source>Text to the operator console.</source>
          <target state="translated">운영자 콘솔에 텍스트.</target>
        </trans-unit>
        <trans-unit id="54d4e6a8bdb666ab45d5ae6f0905988c6b9bdfe3" translate="yes" xml:space="preserve">
          <source>Textbook basic form Box-Muller standard normal deviate</source>
          <target state="translated">교과서 기본 형식 Box-Muller 표준 표준 편차</target>
        </trans-unit>
        <trans-unit id="2f72bba0ea07edaf4c51d66fc5bb6bab86a6ccd2" translate="yes" xml:space="preserve">
          <source>Thaana</source>
          <target state="translated">Thaana</target>
        </trans-unit>
        <trans-unit id="c32767e0541fe7038ff8d87e7b8aed17f49474f8" translate="yes" xml:space="preserve">
          <source>Thai</source>
          <target state="translated">Thai</target>
        </trans-unit>
        <trans-unit id="47ca65c0b4e91b345e536ba9fcc325494b940243" translate="yes" xml:space="preserve">
          <source>Thanks to the used generator the state object supports the &lt;code&gt;rand:jump/0,1&lt;/code&gt; function with distance 2^512.</source>
          <target state="translated">사용 된 생성기 덕분에 상태 객체는 거리가 2 ^ 512 인 &lt;code&gt;rand:jump/0,1&lt;/code&gt; 함수를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="7c54512782f0b8a8a8ee3e013c2e8e72a5dedaa8" translate="yes" xml:space="preserve">
          <source>That EPMD is running</source>
          <target state="translated">EPMD가 실행 중입니다</target>
        </trans-unit>
        <trans-unit id="6d5dd72a57184dddefa9dbd040521e6e6341703b" translate="yes" xml:space="preserve">
          <source>That environment variable &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt; is set correctly</source>
          <target state="translated">해당 환경 변수 &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt; 가 올바르게 설정되었습니다.</target>
        </trans-unit>
        <trans-unit id="8e3a97a56528bdf88e1b2051f20678cae41f8ace" translate="yes" xml:space="preserve">
          <source>That is an optimization. Most applications do not send messages with shared subterms.</source>
          <target state="translated">그것은 최적화입니다. 대부분의 응용 프로그램은 공유 하위 용어가있는 메시지를 보내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5c80baa8384a9b1de6a39a6f7088119999c1a237" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;Message&lt;/code&gt; (any Erlang term) is sent to the process with identity &lt;code&gt;Pid&lt;/code&gt;.</source>
          <target state="translated">즉, &lt;code&gt;Message&lt;/code&gt; (모든 Erlang 용어)가 ID &lt;code&gt;Pid&lt;/code&gt; 로 프로세스에 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="45015129465c2268d074359ec5005e5d4d17b91b" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;filtermap&lt;/code&gt; behaves as if it had been defined as follows:</source>
          <target state="translated">즉, &lt;code&gt;filtermap&lt;/code&gt; 은 다음과 같이 정의 된 것처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="535867dd76e5b138e05f832dc9af825cc91d8cc3" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;flatmap&lt;/code&gt; behaves as if it had been defined as follows:</source>
          <target state="translated">즉, &lt;code&gt;flatmap&lt;/code&gt; 은 다음과 같이 정의 된 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="aad791da5a9f2ebf28101f220528f9b8d026646d" translate="yes" xml:space="preserve">
          <source>That is, a leap year. The next two &lt;code&gt;trunc&lt;/code&gt;-tests evaluate if the year is divisible by 100 or 4 in the same way. The first &lt;code&gt;if&lt;/code&gt; returns &lt;code&gt;leap&lt;/code&gt; or &lt;code&gt;not_leap&lt;/code&gt;, which lands up in the variable &lt;code&gt;Leap&lt;/code&gt;. This variable is used in the guard for &lt;code&gt;feb&lt;/code&gt; in the following &lt;code&gt;case&lt;/code&gt; that tells us how long the month is.</source>
          <target state="translated">즉, 윤년입니다. 다음 두 &lt;code&gt;trunc&lt;/code&gt; -tests는 연도가 같은 방식으로 100 또는 4로 나눌 수 있는지 평가합니다. 첫 번째 &lt;code&gt;if&lt;/code&gt; 는 &lt;code&gt;leap&lt;/code&gt; 또는 &lt;code&gt;not_leap&lt;/code&gt; 을 반환 하며 , 이는 &lt;code&gt;Leap&lt;/code&gt; 변수에 포함 됩니다. 이 변수는 다음의 &lt;code&gt;case&lt;/code&gt; &lt;code&gt;feb&lt;/code&gt; 의 가드에 사용되어 월이 얼마나 오래되었는지 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="b854b71df5b84451e38dd1e69632ca6e45d5445e" translate="yes" xml:space="preserve">
          <source>That is, a list of four-tuples &lt;code&gt;{Module, Function, Arity | Args, Location}&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt; are atoms, and the third element is an integer arity or an argument list. The stacktrace can also contain &lt;code&gt;{Fun, Args, Location}&lt;/code&gt; tuples, where &lt;code&gt;Fun&lt;/code&gt; is a local fun and &lt;code&gt;Args&lt;/code&gt; is an argument list.</source>
          <target state="translated">즉, 4 개의 튜플 &lt;code&gt;{Module, Function, Arity | Args, Location}&lt;/code&gt; , 여기서 &lt;code&gt;Module&lt;/code&gt; 및 &lt;code&gt;Function&lt;/code&gt; 은 원자이고 세 번째 요소는 정수 arity 또는 인수 목록입니다. stacktrace는 &lt;code&gt;{Fun, Args, Location}&lt;/code&gt; 튜플을 포함 할 수도 있습니다 . 여기서 &lt;code&gt;Fun&lt;/code&gt; 은 로컬 재미이고 &lt;code&gt;Args&lt;/code&gt; 는 인수 목록입니다.</target>
        </trans-unit>
        <trans-unit id="61bd067e8a1df03751d1301ebc5a385097e1ecce" translate="yes" xml:space="preserve">
          <source>That is, a trace output, with both the function called and the resulting value.</source>
          <target state="translated">즉, 호출 된 함수와 결과 값이 모두있는 추적 출력입니다.</target>
        </trans-unit>
        <trans-unit id="b1bb322ca91a6283f723e39d12e1d20ae13c765c" translate="yes" xml:space="preserve">
          <source>That is, all the bound variables in the match head as a list. If tuples are to be constructed, one has to write a tuple of arity 1 where the single element in the tuple is the tuple one wants to construct (as an ordinary tuple can be mistaken for a &lt;code&gt;Guard&lt;/code&gt;).</source>
          <target state="translated">즉, 일치 헤드의 모든 바운드 변수가 목록입니다. 튜플을 구성하려면 튜플의 단일 요소가 구성하려는 튜플 인 arity 1의 튜플을 작성해야합니다 (일반 튜플은 &lt;code&gt;Guard&lt;/code&gt; 로 오인 할 수 있음 ).</target>
        </trans-unit>
        <trans-unit id="11e8a09abfceb997eddb8423e1781ebd95db28e7" translate="yes" xml:space="preserve">
          <source>That is:</source>
          <target state="translated">그건:</target>
        </trans-unit>
        <trans-unit id="5b7862e3dd48cc38e9add817496ab2e5b649c353" translate="yes" xml:space="preserve">
          <source>That reduces the code size, but is slower because &lt;code&gt;S&lt;/code&gt; means that there will be extra code to test whether the operand refers to an X register or a Y register.</source>
          <target state="translated">이는 코드 크기를 줄이지 만 &lt;code&gt;S&lt;/code&gt; 는 피연산자가 X 레지스터를 참조하는지 Y 레지스터를 참조하는지 테스트 할 추가 코드가 있음을 의미 하므로 속도가 느립니다 .</target>
        </trans-unit>
        <trans-unit id="7179c2c2c75b5324944355b82ad607b610b23c74" translate="yes" xml:space="preserve">
          <source>That should make it possible to rebuild any library without hassle...</source>
          <target state="translated">번거 로움없이 라이브러리를 다시 만들 수 있어야합니다 ...</target>
        </trans-unit>
        <trans-unit id="7fa2409e343b10dfba92d13f38dd386e2e863cc5" translate="yes" xml:space="preserve">
          <source>That simple example shows that it is impossible to deliver the SSH application with default values on hardening options as well on other options that suites every need.</source>
          <target state="translated">이 간단한 예는 강화 옵션과 모든 요구에 맞는 다른 옵션에 대한 기본값으로 SSH 애플리케이션을 제공하는 것이 불가능 함을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5af23b62330311be1d934875119477b949789e10" translate="yes" xml:space="preserve">
          <source>That the</source>
          <target state="translated">그</target>
        </trans-unit>
        <trans-unit id="ff03a468de0d9ed380aa26940cb3d4ce174a3748" translate="yes" xml:space="preserve">
          <source>That the correct cookie was used</source>
          <target state="translated">올바른 쿠키가 사용되었습니다</target>
        </trans-unit>
        <trans-unit id="fbb73f156f2e40ae17a54d203d8b3537e9a4d680" translate="yes" xml:space="preserve">
          <source>That the remote Erlang node on the other side is running the same version of Erlang as the &lt;code&gt;ei&lt;/code&gt; library</source>
          <target state="translated">다른 쪽의 원격 Erlang 노드가 &lt;code&gt;ei&lt;/code&gt; 라이브러리 와 동일한 버전의 Erlang을 실행하고 있음</target>
        </trans-unit>
        <trans-unit id="43093885e0893ad901ee4b46bda00f5dc1d9a9d7" translate="yes" xml:space="preserve">
          <source>That the remote Erlang node on the other side is running the same version of Erlang as the &lt;code&gt;erl_interface&lt;/code&gt; library</source>
          <target state="translated">다른 쪽의 원격 Erlang 노드가 &lt;code&gt;erl_interface&lt;/code&gt; 라이브러리 와 동일한 버전의 Erlang을 실행하고 있음</target>
        </trans-unit>
        <trans-unit id="e3420600d759a760d25722c58727ef289f531b08" translate="yes" xml:space="preserve">
          <source>That was once true, but from R6B the BEAM compiler can see that a variable is not used.</source>
          <target state="translated">그것은 한 번 사실이지만 R6B에서 BEAM 컴파일러는 변수가 사용되지 않음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aefbfb778a6045a9feec711cee7f0b6bfe06745c" translate="yes" xml:space="preserve">
          <source>That was true to some extent before R12B. It was even more true before R7B. Today, not so much. A body-recursive function generally uses the same amount of memory as a tail-recursive function. It is generally not possible to predict whether the tail-recursive or the body-recursive version will be faster. Therefore, use the version that makes your code cleaner (hint: it is usually the body-recursive version).</source>
          <target state="translated">R12B 이전에는 어느 정도 사실이었습니다. R7B 이전에는 더욱 사실이었습니다. 오늘은 그렇게 많지 않습니다. body-recursive 함수는 일반적으로 tail-recursive 함수와 동일한 양의 메모리를 사용합니다. 꼬리 재귀 또는 신체 재귀 버전이 더 빠른지 여부를 예측하는 것은 일반적으로 불가능합니다. 따라서 코드를 더 깨끗하게 만드는 버전을 사용하십시오 (힌트 : 일반적으로 본문 재귀 버전 임).</target>
        </trans-unit>
        <trans-unit id="8ef05f15aa52cadeef34686e592834e1d7565d8c" translate="yes" xml:space="preserve">
          <source>That will copy the emulator executables.</source>
          <target state="translated">에뮬레이터 실행 파일이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="c1b9697cd4f3baa91fdf236c77e1a263c60d4132" translate="yes" xml:space="preserve">
          <source>That's basically all you need to get going.</source>
          <target state="translated">이것이 기본적으로 필요한 모든 것입니다.</target>
        </trans-unit>
        <trans-unit id="82c971d45846792b2b886cdbb85418dc5903f332" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;code&gt;--&lt;/code&gt;&quot; operator has a complexity proportional to the product of the length of its operands. This means that the operator is very slow if both of its operands are long lists:</source>
          <target state="translated">&quot; &lt;code&gt;--&lt;/code&gt; &quot;연산자는 피연산자 길이의 곱에 비례하여 복잡성이 있습니다. 이는 두 피연산자가 모두 긴 목록 인 경우 연산자가 매우 느리다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="ff5589371f0dbe70e4139850cd24f1db48567113" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;strong&gt;state callback&lt;/strong&gt;&quot; for a specific &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; in a &lt;code&gt;gen_statem&lt;/code&gt; is the callback function that is called for all events in this state. It is selected depending on which &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; that the callback module defines with the callback function &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 의 특정 &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 에 대한 &quot; &lt;strong&gt;상태 콜백&lt;/strong&gt; &quot; 은이 상태의 모든 이벤트에 대해 호출되는 콜백 함수입니다. 콜백 모듈이 콜백 함수 &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; 으로 정의 하는 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 에 따라 선택 됩니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fd11f0de519165a84c1b8fcc83fbb4913df33819" translate="yes" xml:space="preserve">
          <source>The &quot;Definitions.&quot;, &quot;Rules.&quot; and &quot;Erlang code.&quot; headings are mandatory and must occur at the beginning of a source line. The &amp;lt;Header&amp;gt;, &amp;lt;Macro Definitions&amp;gt; and &amp;lt;Erlang code&amp;gt; sections may be empty but there must be at least one rule.</source>
          <target state="translated">&quot;정의.&quot;, &quot;규칙.&quot; &quot;Erlang 코드&quot; 제목은 필수이며 소스 행의 시작 부분에 있어야합니다. &amp;lt;헤더&amp;gt;, &amp;lt;매크로 정의&amp;gt; 및 &amp;lt;Erlang 코드&amp;gt; 섹션은 비어있을 수 있지만 하나 이상의 규칙이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="0a6c1c05be408f7e65aa7a987ce718ffc02949c2" translate="yes" xml:space="preserve">
          <source>The &quot;Okasaki API&quot; is inspired by &quot;Purely Functional Data Structures&quot; by Chris Okasaki. It regards queues as lists. This API is by many regarded as strange and avoidable. For example, many reverse operations have lexically reversed names, some with more readable but perhaps less understandable aliases.</source>
          <target state="translated">&quot;Okasaki API&quot;는 Chris Okasaki의 &quot;순전히 기능적인 데이터 구조&quot;에서 영감을 얻었습니다. 대기열을 목록으로 간주합니다. 이 API는 많은 사람들에게 이상하고 피할 수있는 것으로 간주됩니다. 예를 들어, 많은 리버스 연산에는 어휘 적으로 반대되는 이름이 있으며, 일부는 더 읽기 쉽지만 이해하기 어려운 별칭이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fe7eac7bdedf25d0494e04217d2e3132e60e367" translate="yes" xml:space="preserve">
          <source>The &quot;Original API&quot; and the &quot;Extended API&quot; both use the mental picture of a waiting line of items. Both have reverse operations suffixed &quot;_r&quot;.</source>
          <target state="translated">&quot;원래 API&quot;및 &quot;확장 API&quot;는 모두 대기중인 항목의 정신적 인 그림을 사용합니다. 둘 다 &quot;_r&quot;접미어 역 연산이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3887fa2b48cbded502d3da264fbe59b3f1883ab5" translate="yes" xml:space="preserve">
          <source>The &quot;Original API&quot; item removal functions return compound terms with both the removed item and the resulting queue. The &quot;Extended API&quot; contains alternative functions that build less garbage and functions for just inspecting the queue ends. Also the &quot;Okasaki API&quot; functions build less garbage.</source>
          <target state="translated">&quot;원래 API&quot;항목 제거 함수는 제거 된 항목과 결과 큐가 모두있는 복합 용어를 리턴합니다. &quot;확장 API&quot;에는 가비지가 적은 대체 기능과 대기열 끝을 검사하기위한 기능이 포함되어 있습니다. 또한 &quot;오카 사키 API&quot;기능은 쓰레기를 줄입니다.</target>
        </trans-unit>
        <trans-unit id="7a1a738b6242350a278b4cc4eaff19808c280faf" translate="yes" xml:space="preserve">
          <source>The &quot;Oxford Advanced Learners Dictionary of Current English&quot; says the following about the word &quot;indent&quot;:</source>
          <target state="translated">&quot;현재 영어 옥스포드 고급 학습자 사전&quot;은 &quot;들여 쓰기&quot;라는 단어에 대해 다음과 같이 말합니다.</target>
        </trans-unit>
        <trans-unit id="b71ca1b4095bae581a22c9bd4dc765543e310daa" translate="yes" xml:space="preserve">
          <source>The &quot;keep alive&quot; activity (that is, that &lt;code&gt;Common Test&lt;/code&gt; sends NOP to the server every 10 seconds if the connection is idle) can be enabled or disabled for one particular connection as described here. It can be disabled for all connections using &lt;code&gt;telnet_settings&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&quot;keep alive&quot;활동 (즉 , 연결이 유휴 상태 인 경우 &lt;code&gt;Common Test&lt;/code&gt; 가 10 초마다 NOP를 서버에 전송 함)은 여기에 설명 된대로 하나의 특정 연결에 대해 활성화 또는 비활성화 될 수 있습니다. &lt;code&gt;telnet_settings&lt;/code&gt; 를 사용하여 모든 연결에 대해 비활성화 할 수 있습니다 ( &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="82d4b81efe7dcd8e24eb60d67714cfdca853f28b" translate="yes" xml:space="preserve">
          <source>The &quot;message box&quot; is implemented using a lock free single linked list through the memory blocks to deallocate. The order of the elements in this list is not important. Insertion of new free blocks will be made somewhere near the end of this list. Requiring that the new blocks need to be inserted at the end would cause unnecessary contention when large amount of memory blocks are inserted simultaneous by multiple threads.</source>
          <target state="translated">&quot;메시지 상자&quot;는 할당 해제를 위해 메모리 블록을 통해 잠금없는 단일 연결 목록을 사용하여 구현됩니다. 이 목록에있는 요소의 순서는 중요하지 않습니다. 이 목록의 끝 부분에 새 사용 가능한 블록이 삽입됩니다. 새 블록을 끝에 삽입하도록 요구하면 많은 양의 메모리 블록이 여러 스레드에 의해 동시에 삽입 될 때 불필요한 경합이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4fe589f8c1fff89269afb0db8e6111d61dec7b78" translate="yes" xml:space="preserve">
          <source>The &quot;private&quot; message &lt;code&gt;{From, rewind}&lt;/code&gt; results in the current position in the pseudo-file to be reset to &lt;code&gt;0&lt;/code&gt; (the beginning of the &quot;file&quot;). This is a typical example of I/O device-specific messages not being part of the I/O protocol. It is usually a bad idea to embed such private messages in &lt;code&gt;io_request&lt;/code&gt; tuples, as that can confuse the reader.</source>
          <target state="translated">&quot;private&quot;메시지 &lt;code&gt;{From, rewind}&lt;/code&gt; 는 의사 파일의 현재 위치가 &lt;code&gt;0&lt;/code&gt; ( &quot;파일&quot;의 시작) 으로 재설정됩니다 . 이는 I / O 장치 특정 메시지가 I / O 프로토콜의 일부가 아닌 일반적인 예입니다. 독자를 혼동시킬 수 &lt;code&gt;io_request&lt;/code&gt; 이러한 개인 메시지를 io_request 튜플 에 포함시키는 것은 일반적으로 나쁜 생각 입니다.</target>
        </trans-unit>
        <trans-unit id="df7c24b268c29aef7fecbe44c0aab51a5f20a7f3" translate="yes" xml:space="preserve">
          <source>The &quot;server_name&quot; and &quot;certificate_authorities&quot; extensions are used to guide certificate selection. As servers MAY require the presence of the &quot;server_name&quot; extension, clients SHOULD send this extension, when applicable.</source>
          <target state="translated">&quot;server_name&quot;및 &quot;certificate_authorities&quot;확장은 인증서 선택을 안내하는 데 사용됩니다. 서버에 &quot;server_name&quot;확장이 있어야 할 수 있으므로 클라이언트는 해당되는 경우이 확장을 전송해야합니다.</target>
        </trans-unit>
        <trans-unit id="e4a690e384b2d5a804cad58bd96420656c204892" translate="yes" xml:space="preserve">
          <source>The &quot;test run index&quot; page includes a link to the &lt;code&gt;Common Test&lt;/code&gt; Framework Log file in which information about imported configuration data and general test progress is written. This log file is useful to get snapshot information about the test run during execution. It can also be helpful when analyzing test results or debugging test suites.</source>
          <target state="translated">&quot;테스트 실행 색인&quot;페이지에는 가져온 구성 데이터 및 일반 테스트 진행에 대한 정보가 기록 되는 &lt;code&gt;Common Test&lt;/code&gt; Framework 로그 파일에 대한 링크가 포함되어 있습니다. 이 로그 파일은 실행 중 테스트 실행에 대한 스냅 샷 정보를 얻는 데 유용합니다. 테스트 결과를 분석하거나 테스트 스위트를 디버깅 할 때도 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c3be9bfee853a4424aae3e9b08197fdb2f6acc7" translate="yes" xml:space="preserve">
          <source>The &quot;test run index&quot; page indicates if a test has missing suites (that is, suites that &lt;code&gt;Common Test&lt;/code&gt; failed to compile). Names of the missing suites can be found in the &lt;code&gt;Common Test&lt;/code&gt; Framework Log file.</source>
          <target state="translated">&quot;test run index&quot;페이지는 테스트에 누락 된 스위트 (즉, &lt;code&gt;Common Test&lt;/code&gt; 가 컴파일하지 못한 스위트)가 있는지 표시합니다 . 누락 된 제품군의 이름은 &lt;code&gt;Common Test&lt;/code&gt; Framework 로그 파일 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19d572f8fd1e712c92a2de5cde66fc7d07a76688" translate="yes" xml:space="preserve">
          <source>The &quot;thread progress&quot; functionality in the Erlang VM is used to address these problems. The name &quot;thread progress&quot; was chosen since we want to use it to determine when all threads in a set of threads have made such progress so that two specific events have taken place for all them.</source>
          <target state="translated">Erlang VM의 &quot;스레드 진행&quot;기능은 이러한 문제를 해결하는 데 사용됩니다. &quot;스레드 진행&quot;이라는 이름은 스레드 집합의 모든 스레드가 이러한 진행을 수행하여 모든 스레드에 대해 두 개의 특정 이벤트가 발생하는시기를 결정하는 데 사용하기를 원하기 때문에 선택되었습니다.</target>
        </trans-unit>
        <trans-unit id="a60728f91de50a0cab75ed1bd09ee0c55638db56" translate="yes" xml:space="preserve">
          <source>The &quot;trim&quot; option says; &quot;give me as many parts as possible except the empty ones&quot;, which sometimes can be useful. You can also specify how many parts you want, by specifying &lt;code&gt;{parts,&lt;/code&gt;N&lt;code&gt;}&lt;/code&gt;:</source>
          <target state="translated">&quot;trim&quot;옵션이 말합니다. &quot;빈 부분을 제외하고 가능한 한 많은 부분을 알려주십시오&quot;. 때로는 유용 할 수 있습니다. &lt;code&gt;{parts,&lt;/code&gt; N &lt;code&gt;}&lt;/code&gt; 을 지정하여 원하는 부품 수를 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f31ddf356bb1296b6c57934df526e33fec2480e7" translate="yes" xml:space="preserve">
          <source>The $REFRESH_GEN_DEST() macro</source>
          <target state="translated">$ REFRESH_GEN_DEST () 매크로</target>
        </trans-unit>
        <trans-unit id="9d8edde0db65ff7f9e25c8ce9f9ce0286b2ab0b7" translate="yes" xml:space="preserve">
          <source>The &amp;lt;Regexp&amp;gt; must occur at the start of a line and not include any blanks; use &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;\s&lt;/code&gt; to include TAB and SPACE characters in the regular expression. If &amp;lt;Regexp&amp;gt; matches then the corresponding &amp;lt;Erlang code&amp;gt; is evaluated to generate a token. With the Erlang code the following predefined variables are available:</source>
          <target state="translated">&amp;lt;Regexp&amp;gt;는 줄의 시작 부분에 나타나야하며 공백을 포함하지 않아야합니다. &lt;code&gt;\t&lt;/code&gt; 및 &lt;code&gt;\s&lt;/code&gt; 를 사용 하여 정규식에 TAB 및 SPACE 문자를 포함 시키십시오. &amp;lt;Regexp&amp;gt;가 일치하면 해당 &amp;lt;Erlang 코드&amp;gt;가 평가되어 토큰을 생성합니다. Erlang 코드를 사용하면 다음과 같은 사전 정의 된 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7faf73f339f8137ba8202610ef5e79dc01a5875e" translate="yes" xml:space="preserve">
          <source>The '?' type modifier</source>
          <target state="translated">'?' 유형 수정 자</target>
        </trans-unit>
        <trans-unit id="a4ad87b21116c045fdb7bb1d623835d9ff636685" translate="yes" xml:space="preserve">
          <source>The 'process oid' &quot;tag&quot; that can be provided with the variable name / oids is indended to be used for oid post processing. The value '&lt;code&gt;keep&lt;/code&gt;', which is the default, leaves the oid as is. The value '&lt;code&gt;truncate&lt;/code&gt;', will cause the oid to be &quot;truncated&quot;. That is, any trailing &quot;.0&quot; will be removed.</source>
          <target state="translated">변수 이름 / oids와 함께 제공 될 수있는 '프로세스 oid' &quot;태그&quot;는 oid 사후 처리에 사용되도록 의도되었습니다. 기본값 인 ' &lt;code&gt;keep&lt;/code&gt; ' 값 은 oid를 그대로 둡니다. 값 ' &lt;code&gt;truncate&lt;/code&gt; '는 oid가 &quot;잘립니다&quot;. 즉, 모든 후행 &quot;.0&quot;이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="5fd6006060b360d3964e6301c70d62dfa6542605" translate="yes" xml:space="preserve">
          <source>The (*MARK) name is tagged with &quot;MK:&quot; in this output, and in this example it indicates which of the two alternatives matched. This is a more efficient way of obtaining this information than putting each alternative in its own capturing parentheses.</source>
          <target state="translated">이 출력에서 ​​(* MARK) 이름은 &quot;MK :&quot;로 태그가 지정되며이 예에서는 두 가지 대안 중 일치하는 것을 나타냅니다. 이는 각 대안을 자체 캡처 괄호 안에 넣는 것보다이 정보를 얻는보다 효율적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="7626cd8d4a95d16adbb501a045b70ff730bc3449" translate="yes" xml:space="preserve">
          <source>The (*UTF8) and (*UCP) leading sequences can be used to set UTF and Unicode property modes. They are equivalent to setting options &lt;code&gt;unicode&lt;/code&gt; and &lt;code&gt;ucp&lt;/code&gt;, respectively. The (*UTF) sequence is a generic version that can be used with any of the libraries. However, the application can set option &lt;code&gt;never_utf&lt;/code&gt;, which locks out the use of the (*UTF) sequences.</source>
          <target state="translated">(* UTF8) 및 (* UCP) 선행 시퀀스를 사용하여 UTF 및 유니 코드 특성 모드를 설정할 수 있습니다. 옵션 &lt;code&gt;unicode&lt;/code&gt; 및 &lt;code&gt;ucp&lt;/code&gt; 를 각각 설정하는 것과 같습니다 . (* UTF) 시퀀스는 모든 라이브러리에서 사용할 수있는 일반 버전입니다. 그러나 응용 프로그램은 &lt;code&gt;never_utf&lt;/code&gt; 옵션을 설정 하여 (* UTF) 시퀀스 사용을 잠급니다.</target>
        </trans-unit>
        <trans-unit id="0af8bbc7ab3d2447bd6a5d8520e9f3d0f277f0b4" translate="yes" xml:space="preserve">
          <source>The (built-in) &lt;code&gt;escript&lt;/code&gt; program first determines which Erlang runtime system to use and then starts it to execute your script. Usually the runtime system is located in the same Erlang installation as the &lt;code&gt;escript&lt;/code&gt; program itself. But for standalone systems with one or more escripts it may be the case that the &lt;code&gt;escript&lt;/code&gt; program in your path actually starts the runtime system bundled with the escript. This is intentional, and typically happens when the standalone system &lt;code&gt;bin&lt;/code&gt; directory is not in the execution path (as it may cause its &lt;code&gt;erl&lt;/code&gt; program to override the desired one) and the &lt;code&gt;escript&lt;/code&gt;(s) are referred to via symbolic links from a &lt;code&gt;bin&lt;/code&gt; directory in the path.</source>
          <target state="translated">내장 된 &lt;code&gt;escript&lt;/code&gt; 프로그램은 먼저 사용할 Erlang 런타임 시스템을 판별 한 후이를 시작하여 스크립트를 실행합니다. 일반적으로 런타임 시스템은 &lt;code&gt;escript&lt;/code&gt; 프로그램 자체 와 동일한 Erlang 설치에 있습니다. 그러나 하나 이상의 escript가있는 독립형 시스템의 경우 경로 의 &lt;code&gt;escript&lt;/code&gt; 프로그램이 실제로 escript와 번들로 제공되는 런타임 시스템을 시작하는 경우가 있습니다. 이것은 의도적 인 것이며 일반적으로 독립형 시스템 &lt;code&gt;bin&lt;/code&gt; 디렉토리가 실행 경로에 있지 않을 때 ( &lt;code&gt;erl&lt;/code&gt; 프로그램이 원하는 것을 대체 할 수 있기 때문에 ) &lt;code&gt;escript&lt;/code&gt; 는 &lt;code&gt;bin&lt;/code&gt; 디렉토리의 기호 링크를 통해 참조됩니다 . 경로.</target>
        </trans-unit>
        <trans-unit id="dfd9ff6975abbc395a9f98a9f0cbda02a2c72d28" translate="yes" xml:space="preserve">
          <source>The (compressed) tape archive file is to be extracted in the installation directory defined above.</source>
          <target state="translated">(압축 된) 테이프 아카이브 파일은 위에서 정의한 설치 디렉토리에서 추출됩니다.</target>
        </trans-unit>
        <trans-unit id="ff202b736bdf02f02856c9e0b5a48d4c81a349b4" translate="yes" xml:space="preserve">
          <source>The (encoding) config option for the full version, &lt;code&gt;{version3, 3}&lt;/code&gt;, will still be supported, even though its no longer necessary to specify it this way.</source>
          <target state="translated">정식 버전 &lt;code&gt;{version3, 3}&lt;/code&gt; 대한 (인코딩) 구성 옵션 은 더 이상 이러한 방식으로 지정할 필요가 없더라도 계속 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="bdcfaa6a575093f30922fde0b326af66b1dc8369" translate="yes" xml:space="preserve">
          <source>The (hidden) node implements atom cache (obsolete).</source>
          <target state="translated">(숨겨진) 노드는 아톰 캐시 (구식)를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="148d899ab108f6515349d4b01878d74abd02d0c9" translate="yes" xml:space="preserve">
          <source>The (host operating system) environment variable &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; can be used to give default compiler options. Its value must be a valid Erlang term. If the value is a list, it is used as is. If it is not a list, it is put into a list.</source>
          <target state="translated">(호스트 운영 체제) 환경 변수 &lt;code&gt;ERL_COMPILER_OPTIONS&lt;/code&gt; 를 사용하여 기본 컴파일러 옵션을 제공 할 수 있습니다. 값은 유효한 Erlang 용어 여야합니다. 값이 목록이면 그대로 사용됩니다. 목록이 아닌 경우 목록에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="f06fadd0b84d13f99d85c50cfc349e4a25addef3" translate="yes" xml:space="preserve">
          <source>The (possibly flattened) &lt;code&gt;Path&lt;/code&gt; parameter must be consistent throughout the system. A driver is to, by all &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt;, be loaded using the same &lt;strong&gt;literal&lt;/strong&gt;&lt;code&gt;Path&lt;/code&gt;. The exception is when &lt;strong&gt;reloading&lt;/strong&gt; is requested, in which case &lt;code&gt;Path&lt;/code&gt; can be specified differently. Notice that all &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; trying to load the driver later need to use the &lt;strong&gt;new&lt;/strong&gt;&lt;code&gt;Path&lt;/code&gt; if &lt;code&gt;Path&lt;/code&gt; is changed using a &lt;code&gt;reload&lt;/code&gt; option. This is yet another reason to have &lt;strong&gt;only one loader&lt;/strong&gt; of a driver one wants to upgrade in a running system.</source>
          <target state="translated">(아마도 평평한) &lt;code&gt;Path&lt;/code&gt; 매개 변수는 시스템 전체에서 일관성이 있어야합니다. 모든 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; 는 동일한 &lt;strong&gt;리터럴 &lt;/strong&gt; &lt;code&gt;Path&lt;/code&gt; 사용하여 드라이버를 로드해야합니다 . &lt;strong&gt;재로드&lt;/strong&gt; 가 요청 된 경우는 예외이며 ,이 경우 &lt;code&gt;Path&lt;/code&gt; 를 다르게 지정할 수 있습니다. 나중에 드라이버를로드하려는 모든 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;Path&lt;/code&gt; 가 &lt;code&gt;reload&lt;/code&gt; 옵션을 사용하여 변경 되면 &lt;strong&gt;새 &lt;/strong&gt; &lt;code&gt;Path&lt;/code&gt; 를 사용해야합니다 . 이것은 실행중인 시스템에서 업그레이드하려는 드라이버 &lt;strong&gt;로더&lt;/strong&gt; 가 &lt;strong&gt;하나만&lt;/strong&gt; 있어야하는 또 다른 이유 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83b2a48f7b5f8f51af459ed68059f2418cf4dc0c" translate="yes" xml:space="preserve">
          <source>The -no_next directive</source>
          <target state="translated">-no_next 지시어</target>
        </trans-unit>
        <trans-unit id="c7e9e710cb5f6c3ca182c389c02b5335142f703b" translate="yes" xml:space="preserve">
          <source>The -no_prefetch directive</source>
          <target state="translated">-no_prefetch 지시어</target>
        </trans-unit>
        <trans-unit id="7c443fb128bea98f3149bd2df5d12047cad839bc" translate="yes" xml:space="preserve">
          <source>The 16 bytes MD5 of the significant parts of the Beam file.</source>
          <target state="translated">Beam 파일의 중요한 부분의 16 바이트 MD5</target>
        </trans-unit>
        <trans-unit id="7d39efdef71579d11fb25cc52651c18fba9a7537" translate="yes" xml:space="preserve">
          <source>The 3-tuple form additionally specifies an interval, in milliseconds, after which a started transport process should be terminated if it has not yet established a connection. For example, the following options on a connecting transport request a connection with one peer over SCTP or another (typically the same) over TCP.</source>
          <target state="translated">3 개의 튜플 형식은 또한 연결을 아직 설정하지 않은 경우 시작된 전송 프로세스를 종료해야하는 간격 (밀리 초)을 추가로 지정합니다. 예를 들어, 연결 전송의 다음 옵션은 SCTP를 통한 한 피어 또는 TCP를 통한 다른 피어 (일반적으로 동일한)와의 연결을 요청합니다.</target>
        </trans-unit>
        <trans-unit id="acebf1a57043cf38ebb17933963dec066b1efb07" translate="yes" xml:space="preserve">
          <source>The 4-byte header is limited to 2Gb.</source>
          <target state="translated">4 바이트 헤더는 2Gb로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="c54cda7cb6bfe2ffa1c818c4fe4b01c2c1e1b503" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;cert_opt&quot;&gt;cert_opt()&lt;/code&gt; type consists of the following options:</source>
          <target state="translated">&lt;code id=&quot;cert_opt&quot;&gt;cert_opt()&lt;/code&gt; 유형은 다음의 옵션으로 구성되어 있습니다 :</target>
        </trans-unit>
        <trans-unit id="050b18a3c2818149908322c73d61c6c85b47e765" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;ei_socket_callbacks_fields&quot;&gt;&lt;a href=&quot;#ei_socket_callbacks&quot;&gt;ei_socket_callbacks&lt;/a&gt;&lt;/code&gt; structure may be enlarged in the future. All fields not set, &lt;strong&gt;needs&lt;/strong&gt; to be zeroed out. Currently the following fields exist:</source>
          <target state="translated">&lt;code id=&quot;ei_socket_callbacks_fields&quot;&gt;&lt;a href=&quot;#ei_socket_callbacks&quot;&gt;ei_socket_callbacks&lt;/a&gt;&lt;/code&gt; 의 구조는 향후 확대 될 수 있습니다. 모든 필드가 설정되지 않았습니다 . 0으로 설정 &lt;strong&gt;해야&lt;/strong&gt; 합니다. 현재 다음 필드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="865c911e774746bccfef22abcc84f0e0893f4e7b" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;emulator&quot;&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; driver API functions need a port handle that identifies the driver instance (and the port in the emulator). This is only passed to the &lt;code&gt;start&lt;/code&gt; function, but not to the other functions. The &lt;code&gt;start&lt;/code&gt; function returns a driver-defined handle that is passed to the other functions. A common practice is to have the &lt;code&gt;start&lt;/code&gt; function allocate some application-defined structure and stash the &lt;code&gt;port&lt;/code&gt; handle in it, to use it later with the driver API functions.</source>
          <target state="translated">&lt;code id=&quot;emulator&quot;&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; 의 드라이버 API 기능은 드라이버 인스턴스를 식별하는 포트 핸들 (에뮬레이터의 포트)가 필요합니다. 이것은 &lt;code&gt;start&lt;/code&gt; 기능 에만 전달 되지만 다른 기능 에는 전달 되지 않습니다. &lt;code&gt;start&lt;/code&gt; 함수가 다른 함수에 전달되는 드라이버 정의 핸들을 반환합니다. 일반적인 관행은 &lt;code&gt;start&lt;/code&gt; 함수가 애플리케이션 정의 구조를 할당하고 &lt;code&gt;port&lt;/code&gt; 핸들을 숨겨서 나중에 드라이버 API 함수와 함께 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fac23f5db2a77ff3396a2eb9379305c9a2e69b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt; Module:callback_mode() &lt;/code&gt; function may also return a list containing the &lt;strong&gt;callback mode&lt;/strong&gt; and the atom &lt;code&gt;state_enter&lt;/code&gt; in which case &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt; &lt;strong&gt;state enter calls&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; are activated for the &lt;strong&gt;callback mode&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt; Module:callback_mode() &lt;/code&gt; 함수도 포함하는 목록 반환 될 &lt;strong&gt;콜백 모드&lt;/strong&gt; 와 원자 &lt;code&gt;state_enter&lt;/code&gt; 케이스있는 &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt; &lt;strong&gt;state enter calls&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; 활성화되는 &lt;strong&gt;콜백 모드&lt;/strong&gt; . &lt;strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c7d6b2ddf1f8b4bed5ebc7bdf4fb25c7cfe43dee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt; erts_alloc_config(3)&lt;/code&gt; tool can be used to aid creation of an &lt;code&gt;erts_alloc&lt;/code&gt; configuration that is suitable for a limited number of runtime scenarios.</source>
          <target state="translated">&lt;code&gt; erts_alloc_config(3)&lt;/code&gt; 공구는 생성 돕기 위해 사용될 수있다 &lt;code&gt;erts_alloc&lt;/code&gt; 의 런타임 시나리오 제한된 수의 적합한 구성.</target>
        </trans-unit>
        <trans-unit id="418f98e4e66687632d887b26d161001270432df1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp.conf.template&lt;/code&gt; file contains all available cross configuration variables and can be used as a template when creating a cross compilation configuration. All &lt;code&gt;&lt;a href=&quot;#Currently-Used-Configuration-Variables&quot;&gt;cross configuration variables&lt;/a&gt;&lt;/code&gt; are also listed at the end of this document. For examples of working cross configurations see the &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-TileraMDE2.0-tilepro.conf&lt;/code&gt; file and the &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-x86_64-saf-linux-gnu.conf&lt;/code&gt; file. If the default behavior of a variable is satisfactory, the variable does not need to be set. However, the &lt;code&gt;configure&lt;/code&gt; script will issue a warning when a default value is used. When a variable has been set, no warning will be issued.</source>
          <target state="translated">&lt;code&gt;$ERL_TOP/xcomp/erl-xcomp.conf.template&lt;/code&gt; 파일을 사용할 수있는 모든 크로스 구성 변수를 포함하고 크로스 컴파일 구성을 만들 때 템플릿으로 사용할 수 있습니다. 모든 &lt;code&gt;&lt;a href=&quot;#Currently-Used-Configuration-Variables&quot;&gt;cross configuration variables&lt;/a&gt;&lt;/code&gt; 도이 문서의 끝에 나와 있습니다. 크로스 구성 작업의 예는 &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-TileraMDE2.0-tilepro.conf&lt;/code&gt; 파일 및 &lt;code&gt;$ERL_TOP/xcomp/erl-xcomp-x86_64-saf-linux-gnu.conf&lt;/code&gt; 파일을 참조 하십시오. 변수의 기본 동작이 만족스러운 경우 변수를 설정할 필요가 없습니다. 그러나 기본값을 사용 하면 &lt;code&gt;configure&lt;/code&gt; 스크립트가 경고를 발행합니다. 변수가 설정되면 경고가 발행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eb9365413abd348bc2e1ccbcdc327aa503fb22ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%if&lt;/code&gt; directive includes a range of lines if a condition is true. For example:</source>
          <target state="translated">&lt;code&gt;%if&lt;/code&gt; 조건에 해당하는 경우는 지정 라인의 범위를 포함한다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="2e8c049d3991b699c878b126ce3c6bdb33cc7a3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt; directory is where new release packets are installed, and where the release handler keeps information about releases. For more information, see the &lt;code&gt;release_handler(3)&lt;/code&gt; manual page in SASL.</source>
          <target state="translated">&lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt; 디렉토리는 새 릴리스 패킷이 설치되어있는 곳이며, 출시 핸들러는 릴리스에 대한 정보를 유지 곳. 자세한 내용 은 SASL 의 &lt;code&gt;release_handler(3)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="927497bac1e3aacb4e090f1231bc5491dae42268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;++&lt;/code&gt; operator has, somewhat undeservedly, got a bad reputation. It probably has something to do with code like the following, which is the most inefficient way there is to reverse a list:</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; 의 연산자는 다소 부당, 나쁜 평판을 가지고있다. 아마도 다음과 같은 코드와 관련이있을 수 있습니다. 목록을 뒤집는 가장 비효율적 인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="42130a038f0aadad4f70fd60034fb79e9e360ef9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; operators are defined for line number expressions, provided the operands are compatible. The LineOp operators are also defined for modules, applications, and releases; the operand is implicitly converted to functions. Similarly, the cast operator is defined for the interpretation of the LineOp operators.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 는 , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; 및 &lt;code&gt;#&lt;/code&gt; 의 연산자 줄 번호 식에 정의 된, 피연산자가 호환 제공. LineOp 연산자는 모듈, 응용 프로그램 및 릴리스에 대해서도 정의됩니다. 피연산자는 암시 적으로 함수로 변환됩니다. 마찬가지로 캐스트 연산자는 LineOp 연산자의 해석을 위해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="7d867665c4e36dd9997bf46a9f78b7c231955da1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+fna&lt;/code&gt; switch can be followed by &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, or &lt;code&gt;e&lt;/code&gt;. This has effect if the locale settings cause the behavior of &lt;code&gt;+fnu&lt;/code&gt; to be selected; see the description of &lt;code&gt;+fnu&lt;/code&gt; above. If the locale settings cause the behavior of &lt;code&gt;+fnl&lt;/code&gt; to be selected, then &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, or &lt;code&gt;e&lt;/code&gt; have no effect.</source>
          <target state="translated">&lt;code&gt;+fna&lt;/code&gt; 스위치 뒤에 수 &lt;code&gt;w&lt;/code&gt; , &lt;code&gt;i&lt;/code&gt; , 또는 &lt;code&gt;e&lt;/code&gt; . 이것은 로케일 설정으로 인해 &lt;code&gt;+fnu&lt;/code&gt; 동작 이 선택 되는 경우 효과 가 있습니다. 위 의 &lt;code&gt;+fnu&lt;/code&gt; 에 대한 설명을 참조하십시오 . 로케일 설정으로 인해 &lt;code&gt;+fnl&lt;/code&gt; 동작 이 선택되면 &lt;code&gt;w&lt;/code&gt; , &lt;code&gt;i&lt;/code&gt; 또는 &lt;code&gt;e&lt;/code&gt; 는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9e6133996f9262b8d90826837351bd3d8efee96b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;+fnu&lt;/code&gt; switch can be followed by &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, or &lt;code&gt;e&lt;/code&gt; to control how wrongly encoded filenames are to be reported:</source>
          <target state="translated">&lt;code&gt;+fnu&lt;/code&gt; 스위치 뒤에 수 &lt;code&gt;w&lt;/code&gt; , &lt;code&gt;i&lt;/code&gt; , 또는 &lt;code&gt;e&lt;/code&gt; 잘못 인코딩 된 파일 이름보고되어야하는 방법을 제어 :</target>
        </trans-unit>
        <trans-unit id="831e6d2347d95f44b19c16835a12096caa3382d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--enable-bootstrap-only&lt;/code&gt; argument to &lt;code&gt;configure&lt;/code&gt; isn't strictly necessary, but will speed things up. It will only run &lt;code&gt;configure&lt;/code&gt; in applications necessary for the bootstrap, and will disable a lot of things not needed by the bootstrap system. If you run &lt;code&gt;configure&lt;/code&gt; without &lt;code&gt;--enable-boostrap-only&lt;/code&gt; you also have to run make as &lt;code&gt;make bootstrap&lt;/code&gt;; otherwise, the whole system will be built.</source>
          <target state="translated">&lt;code&gt;--enable-bootstrap-only&lt;/code&gt; 에 인수 &lt;code&gt;configure&lt;/code&gt; 반드시 필요한 것은 아니지만, 일을 가속화 할 것이다. 부트 스트랩에 필요한 응용 프로그램 에서만 &lt;code&gt;configure&lt;/code&gt; 을 실행 하며 부트 스트랩 시스템에 필요하지 않은 많은 것들을 비활성화합니다. 당신이 실행하는 경우 &lt;code&gt;configure&lt;/code&gt; 하지 않고 &lt;code&gt;--enable-boostrap-only&lt;/code&gt; 당신은 또한 메이크업 실행해야 &lt;code&gt;make bootstrap&lt;/code&gt; ; 그렇지 않으면 전체 시스템이 구축됩니다.</target>
        </trans-unit>
        <trans-unit id="f9606e2fd218b40d91d81e57470942cf1aec71f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-error()&lt;/code&gt; and &lt;code&gt;-warning()&lt;/code&gt; directives were added in OTP 19.</source>
          <target state="translated">&lt;code&gt;-error()&lt;/code&gt; 및 &lt;code&gt;-warning()&lt;/code&gt; 지시어는 OTP (19)에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="c265860ecc1894d7ef2df5fb5a19bf0d362bff43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-on_load()&lt;/code&gt; directive names a function that is to be run automatically when a module is loaded.</source>
          <target state="translated">&lt;code&gt;-on_load()&lt;/code&gt; 모듈이로드 될 때입니다 지시어 이름의 함수가 자동으로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="aa13e09e4d341c2108d3357512871ca10a0cc6bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.app&lt;/code&gt; file for release may reside in the &lt;code&gt;ebin&lt;/code&gt;-directory in a development environment but it is encouraged that this is an artifact of the build step. By convention a &lt;code&gt;.app.src&lt;/code&gt; file is used, which resides in the &lt;code&gt;src&lt;/code&gt; directory. This file is nearly identical as the &lt;code&gt;.app&lt;/code&gt; file but certain fields may be replaced during the build step, such as the application version.</source>
          <target state="translated">&lt;code&gt;.app&lt;/code&gt; 릴리스에 대한 파일에 존재할 수 &lt;code&gt;ebin&lt;/code&gt; 개발 환경에서 -directory하지만이 빌드 단계의 이슈 것을 권장합니다. 일반적으로 &lt;code&gt;.app.src&lt;/code&gt; 파일이 사용되며 &lt;code&gt;src&lt;/code&gt; 디렉토리에 있습니다. 이 파일은 &lt;code&gt;.app&lt;/code&gt; 파일 과 거의 동일 하지만 응용 프로그램 버전과 같은 빌드 단계에서 특정 필드가 바뀔 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="817bfba9b560dd19b99757cc44790bf08dd077b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.app&lt;/code&gt; files</source>
          <target state="translated">&lt;code&gt;.app&lt;/code&gt; 파일</target>
        </trans-unit>
        <trans-unit id="e7a9a94b1b27ccedaac07d12dcc8d76dbbdc8458" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.appup&lt;/code&gt; file can look as follows:</source>
          <target state="translated">&lt;code&gt;.appup&lt;/code&gt; 의 다음과 같은 파일을 볼 수 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
