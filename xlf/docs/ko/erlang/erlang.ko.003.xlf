<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="9d90fb68f823d952977ab9bbfbb917024afe2fa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AncData&lt;/code&gt; may also contain &lt;code&gt;&lt;a href=&quot;inet#type-ancillary_data&quot;&gt; ancillary data &lt;/a&gt;&lt;/code&gt; from the socket &lt;code&gt;&lt;a href=&quot;#type-option&quot;&gt;options&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;inet#option-recvtos&quot;&gt;recvtos&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;inet#option-recvtclass&quot;&gt;recvtclass&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;inet#option-recvttl&quot;&gt;recvttl&lt;/a&gt;&lt;/code&gt;, if that is supported by the platform for the socket.</source>
          <target state="translated">&lt;code&gt;AncData&lt;/code&gt; 는 소켓 &lt;code&gt;&lt;a href=&quot;#type-option&quot;&gt;options&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;inet#option-recvtos&quot;&gt;recvtos&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;inet#option-recvtclass&quot;&gt;recvtclass&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;inet#option-recvttl&quot;&gt;recvttl&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;inet#type-ancillary_data&quot;&gt; ancillary data &lt;/a&gt;&lt;/code&gt; 도 포함 할 수 있습니다 ( 소켓 용 플랫폼에서 지원하는 경우).</target>
        </trans-unit>
        <trans-unit id="3c4658bb2b7cc115f93bce1fdf614e65ef8900d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AnotherFilter (2)&lt;/code&gt; - If more filters are inserted into the dictionary, these will turn up here as entries in the &lt;code&gt;Filters&lt;/code&gt; menu. The second filter will be number 2, the next one number 3 etc. The names are sorted.</source>
          <target state="translated">&lt;code&gt;AnotherFilter (2)&lt;/code&gt; 다른 필터 (2) -더 많은 필터가 사전에 삽입되면 여기에서 &lt;code&gt;Filters&lt;/code&gt; 메뉴의 항목으로 나타납니다 . 두 번째 필터는 숫자 2, 다음 하나는 숫자 3 등입니다. 이름이 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="ffd4847a8fe59b0d20481a5e7fd449c280e7906b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AnotherFilter (2)&lt;/code&gt; - If more filters are inserted into the dictionary, these will turn up here as entries in the &lt;code&gt;Filters&lt;/code&gt; menu. The second filter will get the shortcut number 2, the next one number 3 etc. The names are sorted.</source>
          <target state="translated">&lt;code&gt;AnotherFilter (2)&lt;/code&gt; 다른 필터 (2) -더 많은 필터가 사전에 삽입되면 여기에서 &lt;code&gt;Filters&lt;/code&gt; 메뉴의 항목으로 나타납니다 . 두 번째 필터는 바로 가기 번호 2, 다음 하나의 번호 3 등을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="83893ff359176c32f1798a765c235fcb4fdc1660" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Answer = [{Clause,Value}]&lt;/code&gt;, one tuple for each clause in the module. A clause is specified by its module name &lt;code&gt;M&lt;/code&gt;, function name &lt;code&gt;F&lt;/code&gt;, arity &lt;code&gt;A&lt;/code&gt; and position in the function definition &lt;code&gt;C&lt;/code&gt; as a tuple &lt;code&gt;{M,F,A,C}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Answer = [{Clause,Value}]&lt;/code&gt; , 모듈의 각 절에 대해 하나의 튜플. 절은 모듈 이름 &lt;code&gt;M&lt;/code&gt; , 함수 이름 &lt;code&gt;F&lt;/code&gt; , arity &lt;code&gt;A&lt;/code&gt; 및 함수 정의 &lt;code&gt;C&lt;/code&gt; 의 위치로 튜플 &lt;code&gt;{M,F,A,C}&lt;/code&gt; 로 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="79e4fe34267e271dc9e1f3eb7cea36d0c3633614" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Answer = [{Function,Value}]&lt;/code&gt;, one tuple for each function in the module. A function is specified by its module name &lt;code&gt;M&lt;/code&gt;, function name &lt;code&gt;F&lt;/code&gt; and arity &lt;code&gt;A&lt;/code&gt; as a tuple &lt;code&gt;{M,F,A}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Answer = [{Function,Value}]&lt;/code&gt; , 모듈의 각 함수에 대해 하나의 튜플. 함수는 모듈 이름 &lt;code&gt;M&lt;/code&gt; , 함수 이름 &lt;code&gt;F&lt;/code&gt; 및 arity &lt;code&gt;A&lt;/code&gt; 로 튜플 &lt;code&gt;{M,F,A}&lt;/code&gt; 로 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="881c2348cfc2144d5636391475ad92fa45a896b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Answer = [{Line,Value}]&lt;/code&gt;, one tuple for each executable line in the module. A line is specified by its module name &lt;code&gt;M&lt;/code&gt; and line number in the source file &lt;code&gt;N&lt;/code&gt; as a tuple &lt;code&gt;{M,N}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Answer = [{Line,Value}]&lt;/code&gt; , 모듈의 각 실행 가능한 라인 당 하나의 튜플. 행은 소스 파일 &lt;code&gt;N&lt;/code&gt; 의 모듈 이름 &lt;code&gt;M&lt;/code&gt; 및 행 번호로 튜플 &lt;code&gt;{M,N}&lt;/code&gt; 으로 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="06e77f24126954b016620058577829983b5f799b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Answer = {Module,Value}&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the module name.</source>
          <target state="translated">&lt;code&gt;Answer = {Module,Value}&lt;/code&gt; , 여기서 &lt;code&gt;Module&lt;/code&gt; 은 모듈 이름입니다.</target>
        </trans-unit>
        <trans-unit id="127a5d14627aeafdea1a0558f13f7e8a596cb1bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;App&lt;/code&gt; is &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;stdlib&lt;/code&gt;, &lt;code&gt;gs&lt;/code&gt;, or &lt;code&gt;debugger&lt;/code&gt; if &lt;code&gt;AbsModule&lt;/code&gt; belongs to one of these applications.</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; &lt;code&gt;AbsModule&lt;/code&gt; 이 이러한 애플리케이션 중 하나에 속하는 경우 App 은 &lt;code&gt;kernel&lt;/code&gt; , &lt;code&gt;stdlib&lt;/code&gt; , &lt;code&gt;gs&lt;/code&gt; 또는 &lt;code&gt;debugger&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3657c99dab94ca619fd8eab19519a118ae949bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;App&lt;/code&gt; is the name of the application, which must be started. &lt;code&gt;Dir&lt;/code&gt; is the new library directory of &lt;code&gt;App&lt;/code&gt;. The corresponding modules as well as the &lt;code&gt;.app&lt;/code&gt; and &lt;code&gt;.appup&lt;/code&gt; files are to be located under &lt;code&gt;Dir/ebin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; 은 시작해야하는 애플리케이션의 이름입니다. &lt;code&gt;Dir&lt;/code&gt; 은 &lt;code&gt;App&lt;/code&gt; 의 새로운 라이브러리 디렉토리입니다 . 해당 모듈과 &lt;code&gt;.app&lt;/code&gt; 및 &lt;code&gt;.appup&lt;/code&gt; 파일은 &lt;code&gt;Dir/ebin&lt;/code&gt; 아래에 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ec9aa546a88ba407e6d7686c2adf81e2819b1a2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;App&lt;/code&gt; is the name of the application, which must be started. &lt;code&gt;Dir&lt;/code&gt; is the previous library directory of &lt;code&gt;App&lt;/code&gt;. The corresponding modules and the old &lt;code&gt;.app&lt;/code&gt; file are to be located under &lt;code&gt;Dir/ebin&lt;/code&gt;. The &lt;code&gt;.appup&lt;/code&gt; file is to be located in the &lt;code&gt;ebin&lt;/code&gt; directory of the &lt;strong&gt;current&lt;/strong&gt; library directory of the application (&lt;code&gt;code:lib_dir(App))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; 은 시작해야하는 애플리케이션의 이름입니다. &lt;code&gt;Dir&lt;/code&gt; 은 &lt;code&gt;App&lt;/code&gt; 의 이전 라이브러리 디렉토리입니다 . 해당 모듈과 이전 &lt;code&gt;.app&lt;/code&gt; 파일은 &lt;code&gt;Dir/ebin&lt;/code&gt; 아래에 있습니다 . &lt;code&gt;.appup&lt;/code&gt; 의 파일에 위치하는 &lt;code&gt;ebin&lt;/code&gt; 의 디렉토리 &lt;strong&gt;현재&lt;/strong&gt; 응용 프로그램의 라이브러리 디렉토리 ( &lt;code&gt;code:lib_dir(App))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="426dc31ee7d2a0b16292c8d96ba002a88a6bba48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;App&lt;/code&gt; is the name of the application, which must be started. &lt;code&gt;OldVsn&lt;/code&gt; is the previous application version and can be omitted if &lt;code&gt;Dir&lt;/code&gt; is of the format &lt;code&gt;&quot;App-OldVsn&quot;&lt;/code&gt;. &lt;code&gt;Dir&lt;/code&gt; is the library directory of the previous version of &lt;code&gt;App&lt;/code&gt;. The corresponding modules and the old &lt;code&gt;.app&lt;/code&gt; file are to be located under &lt;code&gt;Dir/ebin&lt;/code&gt;. The &lt;code&gt;.appup&lt;/code&gt; file is to be located in the &lt;code&gt;ebin&lt;/code&gt; directory of the &lt;strong&gt;current&lt;/strong&gt; library directory of the application (&lt;code&gt;code:lib_dir(App)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; 은 시작해야하는 애플리케이션의 이름입니다. &lt;code&gt;OldVsn&lt;/code&gt; 은 이전 응용 프로그램 버전이며 &lt;code&gt;Dir&lt;/code&gt; 이 &lt;code&gt;&quot;App-OldVsn&quot;&lt;/code&gt; 형식 인 경우 생략 할 수 있습니다 . &lt;code&gt;Dir&lt;/code&gt; 은 이전 버전의 &lt;code&gt;App&lt;/code&gt; 라이브러리 라이브러리 입니다. 해당 모듈과 이전 &lt;code&gt;.app&lt;/code&gt; 파일은 &lt;code&gt;Dir/ebin&lt;/code&gt; 아래에 있습니다 . &lt;code&gt;.appup&lt;/code&gt; 의 파일에 위치하는 &lt;code&gt;ebin&lt;/code&gt; 의 디렉토리 &lt;strong&gt;현재&lt;/strong&gt; 응용 프로그램의 라이브러리 디렉토리 ( &lt;code&gt;code:lib_dir(App)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c42857cfa3166360411a1e730d16a74637204187" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;App&lt;/code&gt; is the name of the application, which must be started. &lt;code&gt;ToVsn&lt;/code&gt; is the version to be upgraded/downgraded to, and &lt;code&gt;ToDir&lt;/code&gt; is the library directory of this version. The corresponding modules as well as the &lt;code&gt;.app&lt;/code&gt; and &lt;code&gt;.appup&lt;/code&gt; files are to be located under &lt;code&gt;Dir/ebin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; 은 시작해야하는 애플리케이션의 이름입니다. &lt;code&gt;ToVsn&lt;/code&gt; 은 업그레이드 / 다운 그레이드 할 버전이며 &lt;code&gt;ToDir&lt;/code&gt; 은이 버전의 라이브러리 디렉토리입니다. 해당 모듈과 &lt;code&gt;.app&lt;/code&gt; 및 &lt;code&gt;.appup&lt;/code&gt; 파일은 &lt;code&gt;Dir/ebin&lt;/code&gt; 아래에 있습니다 .</target>
        </trans-unit>
        <trans-unit id="80d636ede8faaba1c5b0f98c224f636d79025320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;App&lt;/code&gt; specifies the Diameter application in which the request is defined and callbacks to the corresponding callback module will follow as described below and in &lt;code&gt;diameter_app(3)&lt;/code&gt;. Unless the &lt;code&gt;detach&lt;/code&gt; option is specified, the call returns either when an answer message is received from the peer or an error occurs. In the answer case, the return value is as returned by a &lt;code&gt;handle_answer/4&lt;/code&gt; callback. In the error case, whether or not the error is returned directly by diameter or from a &lt;code&gt;handle_error/4&lt;/code&gt; callback depends on whether or not the outgoing request is successfully encoded for transmission to the peer, the cases being documented below.</source>
          <target state="translated">&lt;code&gt;App&lt;/code&gt; 은 요청이 정의되는 Diameter 애플리케이션을 지정하고 해당 콜백 모듈에 대한 콜백은 아래에 설명 된대로 및 &lt;code&gt;diameter_app(3)&lt;/code&gt; 에 따릅니다 . &lt;code&gt;detach&lt;/code&gt; 옵션을 지정 하지 않으면 응답 메시지가 피어로부터 수신되거나 오류가 발생하면 호출이 반환됩니다. 대답의 경우 반환 값은 &lt;code&gt;handle_answer/4&lt;/code&gt; 콜백에 의해 반환됩니다 . 에러의 경우에, 에러가 직경에 의해 직접 반환되는지 또는 &lt;code&gt;handle_error/4&lt;/code&gt; 콜백 으로부터 리턴 되는지의 여부는 발신 요청이 피어로 전송하기 위해 성공적으로 인코딩되는지 여부에 따라 달라지며, 그 경우는 아래에 설명되어있다.</target>
        </trans-unit>
        <trans-unit id="8a8d448d904669c27abf57e449a854709e6d27a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AppDirs&lt;/code&gt; can be used to specify from where the modules for the specified applications are to be loaded. &lt;code&gt;App&lt;/code&gt; is the name of an application, &lt;code&gt;Vsn&lt;/code&gt; is the version, and &lt;code&gt;Dir&lt;/code&gt; is the name of the directory where &lt;code&gt;App-Vsn&lt;/code&gt; is located. The corresponding modules are to be located under &lt;code&gt;Dir/App-Vsn/ebin&lt;/code&gt;. The directories for applications not specified in &lt;code&gt;AppDirs&lt;/code&gt; are assumed to be located in &lt;code&gt;$ROOT/lib&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppDirs&lt;/code&gt; 을 사용하여 지정된 응용 프로그램의 모듈을로드 할 위치를 지정할 수 있습니다. &lt;code&gt;App&lt;/code&gt; 은 응용 프로그램의 이름이고 &lt;code&gt;Vsn&lt;/code&gt; 은 버전이며 &lt;code&gt;Dir&lt;/code&gt; 은 &lt;code&gt;App-Vsn&lt;/code&gt; 이 있는 디렉토리의 이름입니다 . 해당 모듈은 &lt;code&gt;Dir/App-Vsn/ebin&lt;/code&gt; 아래에 있습니다. &lt;code&gt;AppDirs&lt;/code&gt; 에 지정되지 않은 응용 프로그램의 디렉토리 는 &lt;code&gt;$ROOT/lib&lt;/code&gt; 에 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="207257cb2f9b1769798b94b31c3d2f6eb9475a4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Application&lt;/code&gt;, an atom, is the name of the application. The file must be named &lt;code&gt;Application.app&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Application&lt;/code&gt; 원자 인 Application 은 응용 프로그램의 이름입니다. 파일 이름은 &lt;code&gt;Application.app&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="6c15f33165e8a9e4039634ce0cddd07d8c1d4238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg&lt;/code&gt; defaults to &lt;code&gt;silent&lt;/code&gt;. If &lt;code&gt;Arg == verbose&lt;/code&gt;, the function writes information about which nodes it is pinging to &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Arg&lt;/code&gt; 는 기본적으로 &lt;code&gt;silent&lt;/code&gt; 로 설정 됩니다. 경우 &lt;code&gt;Arg == verbose&lt;/code&gt; , 기능 정보를 기록하는 대한이로 핑됩니다 노드 &lt;code&gt;stdout&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="992dec7425bd4f2e6de82a88f78a9d94966070c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg=remove_handler&lt;/code&gt; if the event handler is deleted because another callback function has returned &lt;code&gt;remove_handler&lt;/code&gt; or &lt;code&gt;{remove_handler,Reply}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Arg=remove_handler&lt;/code&gt; 다른 콜백 함수가 반환했기 때문에 이벤트 핸들러가 삭제 된 경우 &lt;code&gt;remove_handler&lt;/code&gt; 또는 &lt;code&gt;{remove_handler,Reply}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7af7677b11b798f9a3739dfe46ebad33477c1e53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg=stop&lt;/code&gt; if the event handler is deleted because the event manager is terminating.</source>
          <target state="translated">&lt;code&gt;Arg=stop&lt;/code&gt; 이벤트 관리자가 종료되어 이벤트 핸들러가 삭제되면 Arg = stop 입니다.</target>
        </trans-unit>
        <trans-unit id="5d6c6a6cd941a0cc2f9324e223acee5dea0476bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg={error,Term}&lt;/code&gt; if the event handler is deleted because a callback function returned an unexpected value &lt;code&gt;Term&lt;/code&gt;, or &lt;code&gt;Arg={error,{'EXIT',Reason}}&lt;/code&gt; if a callback function failed.</source>
          <target state="translated">&lt;code&gt;Arg={error,Term}&lt;/code&gt; 콜백 함수가 예기치 않은 값을 반환하기 때문에 이벤트 핸들러가 삭제 된 경우 &lt;code&gt;Term&lt;/code&gt; , 또는 &lt;code&gt;Arg={error,{'EXIT',Reason}}&lt;/code&gt; 콜백 기능이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="03bb56c6b98d304f7b5d70e5aa187b8ac7cdb4ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arg={stop,Reason}&lt;/code&gt; if the event handler has a supervised connection to a process that has terminated with reason &lt;code&gt;Reason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Arg={stop,Reason}&lt;/code&gt; 이벤트 핸들러 이유 때문에 종료 한 프로세스 관리 대상 연결 경우 &lt;code&gt;Reason&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c55024c4ee2c247d70d1f4859e1df12f9d43a7fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ArgList&lt;/code&gt; is a list of &lt;code&gt;{Key,Value}&lt;/code&gt; tuples. The following arguments are valid:</source>
          <target state="translated">&lt;code&gt;ArgList&lt;/code&gt; 는 &lt;code&gt;{Key,Value}&lt;/code&gt; 튜플 의 목록입니다 . 다음과 같은 인수가 유효합니다.</target>
        </trans-unit>
        <trans-unit id="147c30da947adf4a4892befade9701ab0bf0e23e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is a list of arguments to the function. The function is to produce data in the specified &lt;code&gt;Encoding&lt;/code&gt;. The I/O server is to call the function as &lt;code&gt;apply(Mod, Func, Args)&lt;/code&gt; and put the returned data on the I/O device as if it was sent in a &lt;code&gt;{put_chars, Encoding, Characters}&lt;/code&gt; request. If the function returns anything else than a binary or list, or throws an exception, an error is to be sent back to the client.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 함수에 대한 인수 목록입니다. 이 기능은 지정된 &lt;code&gt;Encoding&lt;/code&gt; 데이터를 생성하는 것입니다 . I / O 서버는 &lt;code&gt;apply(Mod, Func, Args)&lt;/code&gt; 로 함수를 호출하고 리턴 된 데이터를 마치 &lt;code&gt;{put_chars, Encoding, Characters}&lt;/code&gt; 요청 에서 전송 된 것처럼 I / O 장치에 넣 습니다 . 함수가 이진 또는 목록 이외의 것을 반환하거나 예외를 throw하면 오류가 클라이언트로 다시 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="1032ab0a45837aa5e558e55a7557977adf4f1ff9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is a list of the following tuples:</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 다음 튜플의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="fca660cdb3f8f915493fd2f6142cba49b524fd68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is an arbitrary term that is passed as the argument to &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 에 인수로 전달되는 임의의 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="6a1b0a5d9ef41fbd51f62b36125b8f3683ea6868" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is an arbitrary term that is passed as the argument to &lt;code&gt;Module:init/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 &lt;code&gt;Module:init/1&lt;/code&gt; 에 인수로 전달되는 임의의 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="9737f86063ec00431a02147c9bc27b1405f9cf2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is any term that is passed as one of the arguments to &lt;code&gt;Module:terminate/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 &lt;code&gt;Module:terminate/2&lt;/code&gt; 에 대한 인수 중 하나로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="81f7120bb52c7798b1e3af5cdb0e4547df19f32d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is any term that is passed as the argument to &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 에 인수로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="1b7fedff52eccd5376acb9aa6f4546a03adb0d02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is any term that is passed as the argument to &lt;code&gt;Module:init/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 &lt;code&gt;Module:init/1&lt;/code&gt; 에 인수로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="e060c199e7898dd4ade0f060278e73885f72ca12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is not a list. Note that the list is not verified to be a proper list at the client side.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 목록이 아닙니다. 목록은 클라이언트 측에서 적절한 목록으로 확인되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="02c601707522a54ed1a70abcee445f4c3b98a2b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is not a proper list of terms.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 적절한 용어 목록이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="97dfcc0fd8f0b1b83a4bbd0325906f5fb98db9c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is supposed to be the argument list, but can be any term if the spawn is erroneous.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 인수 목록이어야하지만 스폰이 잘못되면 어떤 용어라도 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8e48d3890aaa20887a4fa74575158a565e65fd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument provided to that start function.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 해당 시작 기능에 제공된 &lt;code&gt;Args&lt;/code&gt; 인수입니다.</target>
        </trans-unit>
        <trans-unit id="db44c4bb41d31d070f479dd89a240a5975268e6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Args&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument provided to the start function.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; 는 시작 기능에 제공된 &lt;code&gt;Args&lt;/code&gt; 인수입니다.</target>
        </trans-unit>
        <trans-unit id="ea09ec7aab32cf16535a273589f26b3f56787bd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arity&lt;/code&gt; is an integer encoded using &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt; SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Arity&lt;/code&gt; 하여 부호화 정수 &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt; SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="54eb84102726aabe0653e1fa3f1a619ad148d41e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arity&lt;/code&gt; is an integer encoded using &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Arity&lt;/code&gt; 하여 부호화 정수 &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="a124f721ef0f85ef72a2ddf715aa49913f600c90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Arity&lt;/code&gt; is the number of arguments that the fun is to be called with.</source>
          <target state="translated">&lt;code&gt;Arity&lt;/code&gt; 는 즐거움을 불러 일으키는 논쟁의 수입니다.</target>
        </trans-unit>
        <trans-unit id="3f8fba28f11b78c6f2489b5219bc0f90e925b3e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Asn1module.asn1db&lt;/code&gt; - Intermediate format used by the compiler when modules &lt;code&gt;IMPORT&lt;/code&gt; definitions from each other.</source>
          <target state="translated">&lt;code&gt;Asn1module.asn1db&lt;/code&gt; - 모듈 이 서로 정의를 &lt;code&gt;IMPORT&lt;/code&gt; 오는 경우 컴파일러에서 사용하는 중간 형식 입니다.</target>
        </trans-unit>
        <trans-unit id="27cb7f27ddb0560fbc08cb9c5f5429556733ed2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Asn1module.erl&lt;/code&gt; - Erlang module with encode, decode, and value functions</source>
          <target state="translated">&lt;code&gt;Asn1module.erl&lt;/code&gt; - 인코딩, 디코딩 및 값 함수가있는 Erlang 모듈</target>
        </trans-unit>
        <trans-unit id="e8bd75c24f151f42d3f3909872057200314f3d8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Asn1module.hrl&lt;/code&gt; (if any &lt;code&gt;SET&lt;/code&gt; or &lt;code&gt;SEQUENCE&lt;/code&gt; is defined)</source>
          <target state="translated">&lt;code&gt;Asn1module.hrl&lt;/code&gt; ( &lt;code&gt;SET&lt;/code&gt; 또는 &lt;code&gt;SEQUENCE&lt;/code&gt; 가 정의 된 경우)</target>
        </trans-unit>
        <trans-unit id="a0c8dda239cec76877038dfacf6fa4f86580305d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Atom&lt;/code&gt; is the registered process name. If the process has no registered name, this tuple is not present in the list.</source>
          <target state="translated">&lt;code&gt;Atom&lt;/code&gt; 은 등록 된 프로세스 이름입니다. 프로세스에 등록 된 이름이 없으면이 튜플이 목록에 없습니다.</target>
        </trans-unit>
        <trans-unit id="6c9fcfc631b661af3529f95b58189aaa7ea72ad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Attributes&lt;/code&gt; is a list of pairs representing the names and corresponding values of all so-called &quot;wild&quot; attributes (as e.g. &quot;&lt;code&gt;-compile(...)&lt;/code&gt;&quot;) occurring in &lt;code&gt;Forms&lt;/code&gt; (cf. &lt;code&gt;analyze_wild_attribute/1&lt;/code&gt;). We do not guarantee that each name occurs at most once in the list. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Attributes&lt;/code&gt; 은 &lt;code&gt;Forms&lt;/code&gt; 에서 발생하는 모든 소위 &quot;wild&quot;속성 (예 : &quot; &lt;code&gt;-compile(...)&lt;/code&gt; &quot;) 의 이름과 해당 값을 나타내는 쌍의 목록입니다 (cf. &lt;code&gt;analyze_wild_attribute/1&lt;/code&gt; ). 각 이름은 목록에서 최대 한 번만 발생한다고 보장하지 않습니다. 리스팅 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="492fcbbc7039ece19bae44d452a4005e217bf3bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthGroupFile&lt;/code&gt; indicates which file that contains the list of groups. The filename must contain the absolute path to the file. The format of the file is one group per row and every row contains the name of the group and the members of the group, separated by a space, for example:</source>
          <target state="translated">&lt;code&gt;AuthGroupFile&lt;/code&gt; 은 그룹 목록이 포함 된 파일을 나타냅니다. 파일 이름은 파일의 절대 경로를 포함해야합니다. 파일의 형식은 행당 하나의 그룹이며 모든 행에는 그룹 이름과 그룹 구성원이 공백으로 구분되어 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0cedcb725bb86c4e6101f75ba3b8fe2706cdc86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthKey&lt;/code&gt; is a list (of integer). This is the User's secret localized authentication key. It is not visible in the MIB. The length of this key needs to be 16 if &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt; is used and 20 if &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;AuthKey&lt;/code&gt; 는 정수 목록입니다. 이것은 사용자의 비밀 지역 인증 키입니다. MIB에서는 보이지 않습니다. &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt; 을 사용 하는 경우이 키의 길이는 16이고 usmHMACSHAAuthProtocol 을 사용하는 경우 20 &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="57c1622d7ad994ceacd3299cb2cbddb1b0bbb68d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthKey&lt;/code&gt; is a list (of integer). This is the User's secret localized authentication key. It is not visible in the MIB. The length of this key needs to be 16 if &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt; is used, and 20 if &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;AuthKey&lt;/code&gt; 는 정수 목록입니다. 이것은 사용자의 비밀 지역 인증 키입니다. MIB에서는 보이지 않습니다. &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt; 을 사용 하는 경우이 키의 길이는 16이고 usmHMACSHAAuthProtocol 을 사용하는 경우 20 &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="1b10a88c3205f2240688945e6b86371d396c206b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthKeyC&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;AuthKeyC&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="b653b0a45eb948a3ef0f15ba59caa6519d71c6c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthP&lt;/code&gt; is a &lt;code&gt;usmNoAuthProtocol&lt;/code&gt;, &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt; or &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AuthP&lt;/code&gt; 는 &lt;code&gt;usmNoAuthProtocol&lt;/code&gt; , &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt; 또는 &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7280c4a4d0a8fcd3a9cd8dffde5e47b7095111ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthP&lt;/code&gt; is a &lt;code&gt;usmNoAuthProtocol&lt;/code&gt;, &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt;, or &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AuthP&lt;/code&gt; 는 &lt;code&gt;usmNoAuthProtocol&lt;/code&gt; , &lt;code&gt;usmHMACMD5AuthProtocol&lt;/code&gt; 또는 &lt;code&gt;usmHMACSHAAuthProtocol&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f59c8c53a14be1bb1f5a3a3e9f59251f7b9b3089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthType&lt;/code&gt; specifies which authentication scheme to be used. Only Basic Authenticating using UUEncoding of the password and user ID is implemented.</source>
          <target state="translated">&lt;code&gt;AuthType&lt;/code&gt; 은 사용할 인증 체계를 지정합니다. 비밀번호 및 사용자 ID의 UUEncoding을 사용한 기본 인증 만 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="e8e1346b7c3224addac7fc39ea796bebf1107847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AuthUserFile&lt;/code&gt; indicates which file that contains the list of users. The filename must contain the absolute path to the file. The username and password are not encrypted so do not place the file with users in a directory that is accessible through the web server. The format of the file is one user per row. Every row contains &lt;code&gt;UserName&lt;/code&gt; and &lt;code&gt;Password&lt;/code&gt; separated by a colon, for example:</source>
          <target state="translated">&lt;code&gt;AuthUserFile&lt;/code&gt; 은 사용자 목록이 포함 된 파일을 나타냅니다. 파일 이름은 파일의 절대 경로를 포함해야합니다. 사용자 이름과 비밀번호는 암호화되지 않으므로 사용자와 함께 파일을 웹 서버를 통해 액세스 할 수있는 디렉토리에 두지 마십시오. 파일 형식은 행당 한 명의 사용자입니다. 모든 행에는 &lt;code&gt;UserName&lt;/code&gt; 과 &lt;code&gt;Password&lt;/code&gt; 가 콜론으로 구분 되어 있습니다 ( 예 :</target>
        </trans-unit>
        <trans-unit id="fd14a81ab8de5b14e694033bdfe0baf803068704" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AutoSkipped = integer()&lt;/code&gt;, current number of auto-skipped test cases.</source>
          <target state="translated">&lt;code&gt;AutoSkipped = integer()&lt;/code&gt; , 현재 자동 건너 뛴 테스트 사례 수입니다.</target>
        </trans-unit>
        <trans-unit id="93099738b5f578b174e8f289cac53a4b1bc52e25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt; = 256</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; = 256</target>
        </trans-unit>
        <trans-unit id="3004ad026a9658db0fdf4d25c9c4473a312496c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt; checks that the digest received from &lt;code&gt;A&lt;/code&gt; is correct and generates a digest from the challenge received from &lt;code&gt;A&lt;/code&gt;. The digest is then sent to &lt;code&gt;A&lt;/code&gt;. The message is as follows:</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 는 &lt;code&gt;A&lt;/code&gt; 에서 수신 한 다이제스트 가 올바른지 확인하고 &lt;code&gt;A&lt;/code&gt; 에서 수신 한 챌린지에서 다이제스트를 생성합니다 . 그런 다음 다이제스트는 &lt;code&gt;A&lt;/code&gt; 로 전송됩니다 . 메시지는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0d11f0d06ffd6abc0c9cd4fbd2c16a1d8563c886" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt; is a subset of &lt;code&gt;XU&lt;/code&gt; (calls to built-in functions are always external by definition, and unused built-in functions are ignored);</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 는 &lt;code&gt;XU&lt;/code&gt; 의 서브 세트입니다 (내장 함수에 대한 호출은 정의에 의해 항상 외부이며 사용되지 않는 내장 함수는 무시 됨).</target>
        </trans-unit>
        <trans-unit id="2b35a32e141d1ed3e21bbd860c385659400ee56e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt; is a subset of &lt;code&gt;XU&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 는 &lt;code&gt;XU&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="0819bbe83644a69bc189335e1796d3b7b25703dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt; is an integer &amp;gt;= &lt;code&gt;0&lt;/code&gt;. The backlog value defines the maximum length that the queue of pending connections can grow to. Defaults to &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 는 정수&amp;gt; = &lt;code&gt;0&lt;/code&gt; 입니다. 백 로그 값은 보류중인 연결 큐가 커질 수있는 최대 길이를 정의합니다. 기본값은 &lt;code&gt;5&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d4d58124bf84e8256abda316118f81ba2f8ae0af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt; sends a status message to &lt;code&gt;A&lt;/code&gt;, which indicates if the connection is allowed.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 는 연결이 허용되는지 여부를 나타내는 상태 메시지를 &lt;code&gt;A&lt;/code&gt; 로 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="6e6a228efebfc4d9fee590676228d784c22f97b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt; sends a status message to &lt;code&gt;A&lt;/code&gt;, which indicates if the connection is allowed. The following status codes are defined:</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 는 로 상태 메시지를 전송 접속이 허용되는지 나타낸다. 다음과 같은 상태 코드가 정의됩니다. &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7286c9d3e937f2b7412186bcb57a19c5de4263d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BIT STRING&lt;/code&gt;s can also be subtyped with, for example, a &lt;code&gt;SIZE&lt;/code&gt; specification:</source>
          <target state="translated">&lt;code&gt;BIT STRING&lt;/code&gt; 은 예를 들어 &lt;code&gt;SIZE&lt;/code&gt; 사양 으로 하위 유형을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6344caf14eb6a76b8dd7d9f43a323cbda87cb97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BeamInstr next_pf = BeamCodeAddr(I[1]);&lt;/code&gt; pre-fetches the address of the next instruction. Note that because both X registers operands fits into the instruction word, the next instruction is in the very next word.</source>
          <target state="translated">&lt;code&gt;BeamInstr next_pf = BeamCodeAddr(I[1]);&lt;/code&gt; 다음 명령어의 주소를 미리 가져옵니다. 두 X 레지스터 피연산자가 명령어 단어에 맞기 때문에 다음 명령어는 바로 다음 단어에 있습니다.</target>
        </trans-unit>
        <trans-unit id="7040c9d0701c690f629c91d0697cef020472b3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BeamInstr next_pf = BeamCodeAddr(I[2]);&lt;/code&gt; fetches the pointer to code for the next instruction to be executed. The &lt;code&gt;BeamCodeAddr()&lt;/code&gt; macro extracts the pointer from the lower 32 bits of the instruction word.</source>
          <target state="translated">&lt;code&gt;BeamInstr next_pf = BeamCodeAddr(I[2]);&lt;/code&gt; 다음 명령이 실행될 코드에 대한 포인터를 가져옵니다. &lt;code&gt;BeamCodeAddr()&lt;/code&gt; 매크로 추출 명령 워드의 하부 32 비트의 포인터.</target>
        </trans-unit>
        <trans-unit id="ff7ce704921453c5bef858d3bef217867e5dc235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BinInfo&lt;/code&gt; is a list containing miscellaneous information about binaries kept by the table. This &lt;code&gt;Item&lt;/code&gt; can be changed or removed without prior notice. In the current implementation &lt;code&gt;BinInfo&lt;/code&gt; is a list of tuples &lt;code&gt;{BinaryId,BinarySize,BinaryRefcCount}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BinInfo&lt;/code&gt; 는 테이블에 보관 된 바이너리에 대한 기타 정보를 포함하는 목록입니다. 이 &lt;code&gt;Item&lt;/code&gt; 은 예고없이 변경 또는 제거 될 수 있습니다. 현재 구현에서 &lt;code&gt;BinInfo&lt;/code&gt; 는 &lt;code&gt;{BinaryId,BinarySize,BinaryRefcCount}&lt;/code&gt; 튜플 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="cf845cf15586d742d38d974079a8f8161123905b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BinInfo&lt;/code&gt; is a list containing miscellaneous information about binaries on the heap of this process. This &lt;code&gt;InfoTuple&lt;/code&gt; can be changed or removed without prior notice. In the current implementation &lt;code&gt;BinInfo&lt;/code&gt; is a list of tuples. The tuples contain; &lt;code&gt;BinaryId&lt;/code&gt;, &lt;code&gt;BinarySize&lt;/code&gt;, &lt;code&gt;BinaryRefcCount&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BinInfo&lt;/code&gt; 는이 프로세스의 힙에있는 바이너리에 대한 기타 정보가 포함 된 목록입니다. 이 &lt;code&gt;InfoTuple&lt;/code&gt; 은 사전 통지없이 변경되거나 제거 될 수 있습니다. 현재 구현에서 &lt;code&gt;BinInfo&lt;/code&gt; 는 튜플 목록입니다. 튜플에는 다음이 포함됩니다. &lt;code&gt;BinaryId&lt;/code&gt; , &lt;code&gt;BinarySize&lt;/code&gt; , &lt;code&gt;BinaryRefcCount&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="90b03b704bcc9074330f66ce3a5857a625cf6d10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Binary&lt;/code&gt; contains a module that cannot be loaded because old code for this module already exists.</source>
          <target state="translated">&lt;code&gt;Binary&lt;/code&gt; 에는이 모듈의 이전 코드가 이미 있으므로로드 할 수없는 모듈이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e588e6558665f949357389e195acde6ecf95b9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BinaryCore&lt;/code&gt; is a binary containing a summary of the &lt;code&gt;Mnesia&lt;/code&gt; internal state at the time when the fatal error was detected. By default the binary is written to a unique filename on the current directory. On RAM nodes, the core is ignored.</source>
          <target state="translated">&lt;code&gt;BinaryCore&lt;/code&gt; 는 치명적 오류가 감지 된 시점 의 &lt;code&gt;Mnesia&lt;/code&gt; 내부 상태를 요약 한 바이너리 입니다. 기본적으로 바이너리는 현재 디렉토리에서 고유 한 파일 이름으로 작성됩니다. RAM 노드에서는 코어가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a67c586305f49a882bc8938e20ceff1071cdeff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bindings&lt;/code&gt; and &lt;code&gt;Vars&lt;/code&gt; are ordered-set lists (cf. module &lt;code&gt;ordsets&lt;/code&gt;) of atoms representing variable names.</source>
          <target state="translated">&lt;code&gt;Bindings&lt;/code&gt; 및 &lt;code&gt;Vars&lt;/code&gt; (참조 모듈리스트 설정된 정렬 &lt;code&gt;ordsets&lt;/code&gt; 를 변수 이름을 나타내는 원자).</target>
        </trans-unit>
        <trans-unit id="1b9cff6cf3bb3d9bd50c36d732bc28b30ff70b33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bindings&lt;/code&gt; is a list of variable bindings. To retrieve the value of &lt;code&gt;Variable&lt;/code&gt; (given as an atom), use function &lt;code&gt;&lt;a href=&quot;int#get_binding-2&quot;&gt;int:get_binding(Variable,Bindings)&lt;/a&gt;&lt;/code&gt;. The function returns &lt;code&gt;unbound&lt;/code&gt; or &lt;code&gt;{value,Value}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Bindings&lt;/code&gt; 은 변수 바인딩의 목록입니다. &lt;code&gt;Variable&lt;/code&gt; (아톰으로 제공됨) 의 값을 검색하려면 &lt;code&gt;&lt;a href=&quot;int#get_binding-2&quot;&gt;int:get_binding(Variable,Bindings)&lt;/a&gt;&lt;/code&gt; 함수를 사용하십시오 . 이 함수는 &lt;code&gt;unbound&lt;/code&gt; 또는 &lt;code&gt;{value,Value}&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f5aab7f3950ef554c87a25a113aadbca28a81c5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BitStringExpr&lt;/code&gt; is an expression that evalutes to a bit string. If &lt;code&gt;BitStringExpr&lt;/code&gt; is a function call, it must be enclosed in parentheses. Each &lt;code&gt;Qualifier&lt;/code&gt; is either a generator, a bit string generator or a filter.</source>
          <target state="translated">&lt;code&gt;BitStringExpr&lt;/code&gt; 은 비트 문자열로 증발하는 표현식입니다. 경우 &lt;code&gt;BitStringExpr&lt;/code&gt; 는 함수 호출, 그것은 괄호로 묶어야합니다. 각 &lt;code&gt;Qualifier&lt;/code&gt; 는 생성기, 비트 문자열 생성기 또는 필터입니다.</target>
        </trans-unit>
        <trans-unit id="c32b38a5db8bdca899e22c75f364db1bb8f9a9ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BitStringExpr&lt;/code&gt; must be an expression that evaluates to a bitstring.</source>
          <target state="translated">&lt;code&gt;BitStringExpr&lt;/code&gt; 은 비트 열로 평가되는 표현식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="0514c7257e1eaea7561df36739d7578afd621976" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BitStringExpr&lt;/code&gt; must be an expression, which evaluates to a bitstring.</source>
          <target state="translated">&lt;code&gt;BitStringExpr&lt;/code&gt; 은 비트 열로 평가되는 표현식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="8eab7359acd28e915a89c87c887f7488088c8155" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bits2Val1&lt;/code&gt; is assigned symbolic values. The assignment means that the bits corresponding to &lt;code&gt;gnu&lt;/code&gt; and &lt;code&gt;punk&lt;/code&gt;, that is, bits 2 and 14 are set to 1, and the rest are set to 0. The symbolic values are shown as a list of values. If a named value, which is not specified in the type definition, is shown, a runtime error occurs.</source>
          <target state="translated">&lt;code&gt;Bits2Val1&lt;/code&gt; 에는 기호 값이 할당됩니다. 할당은 &lt;code&gt;gnu&lt;/code&gt; 및 &lt;code&gt;punk&lt;/code&gt; 에 해당하는 비트 , 즉 비트 2 및 14가 1로 설정되고 나머지는 0으로 설정 됨을 의미 합니다. 기호 값은 값 목록으로 표시됩니다. 유형 정의에 지정되지 않은 명명 된 값이 표시되면 런타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="812f9f32a42f4277412f72739a9cadf2a6a5dd4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bits2Val2&lt;/code&gt; and &lt;code&gt;Bits2Val3&lt;/code&gt; denote the same value.</source>
          <target state="translated">&lt;code&gt;Bits2Val2&lt;/code&gt; 와 &lt;code&gt;Bits2Val3&lt;/code&gt; 은 동일한 값을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9ce3da41a2fc988084160e3e41693ff75079327d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BitstringPattern &amp;lt;= BitStringExpr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BitstringPattern &amp;lt;= BitStringExpr&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2c5c46192e527ee41ee7ec0bc37d6970594f46d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Body&lt;/code&gt; is the body of the HTTP response that is sent back to the client. An appropriate header is appended to the message. &lt;code&gt;StatusCode&lt;/code&gt; is the status code of the response, see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; for the appropriate values.</source>
          <target state="translated">&lt;code&gt;Body&lt;/code&gt; 은 클라이언트로 다시 전송되는 HTTP 응답의 본문입니다. 메시지에 적절한 헤더가 추가됩니다. &lt;code&gt;StatusCode&lt;/code&gt; 는 응답의 상태 코드입니다 . 적절한 값 은 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="694afe89c8f79e0bfce9810c6b85c3d348607578" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt; corresponds to the port parallelism hint used by this port. For more information, see option &lt;code&gt;&lt;a href=&quot;#open_port_parallelism&quot;&gt;parallelism&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;#open_port-2&quot;&gt;open_port/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; 은이 포트에서 사용하는 포트 병렬 처리 힌트에 해당합니다. 자세한 정보 는 &lt;code&gt;&lt;a href=&quot;#open_port-2&quot;&gt;open_port/2&lt;/a&gt;&lt;/code&gt; 의 옵션 &lt;code&gt;&lt;a href=&quot;#open_port_parallelism&quot;&gt;parallelism&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0f0e6986d84ea1793213bb71be9501f67597eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if the process is trapping exits, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; 프로세스가 종료를 트래핑하고 있으면 부울 은 &lt;code&gt;true&lt;/code&gt; 이고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1bc41657a2bfab1620223715e4f42c9e64e38af3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BootArgs&lt;/code&gt; are all command-line arguments except the emulator flags, that is, flags and plain arguments; see &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BootArgs&lt;/code&gt; 는 에뮬레이터 플래그, 즉 플래그 및 일반 인수를 제외한 모든 명령 줄 인수입니다. &lt;code&gt;erl(1)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bea73a1a0c27c5d40c70f329e2d4c5b0834f361e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bytes&lt;/code&gt; initiate rekeying when &lt;code&gt;Bytes&lt;/code&gt; number of bytes are transferred, or at latest after one hour.</source>
          <target state="translated">&lt;code&gt;Bytes&lt;/code&gt; 때 다시 입력 개시 할 &lt;code&gt;Bytes&lt;/code&gt; 바이트 수 한 시간 후 늦어도 전송,있다.</target>
        </trans-unit>
        <trans-unit id="ee5d206d608e76a280a948a37dfa6190279f6d28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bytes&lt;/code&gt; is the total number of bytes allocated for this port by the runtime system. The port itself can have allocated memory that is not included in &lt;code&gt;Bytes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Bytes&lt;/code&gt; 는 런타임 시스템에서이 포트에 할당 한 총 바이트 수입니다. 포트 자체는 &lt;code&gt;Bytes&lt;/code&gt; 포함되지 않은 메모리를 할당 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8bb19176f94c3c9d44cdd9f7bf4c1c3e1504a019" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bytes&lt;/code&gt; is the total number of bytes queued by the port using the ERTS driver queue implementation.</source>
          <target state="translated">&lt;code&gt;Bytes&lt;/code&gt; 는 ERTS 드라이버 큐 구현을 사용하여 포트가 큐에 넣은 총 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="fce439fd7e04543bfbcea6e4688e828309e6f694" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bytes&lt;/code&gt; is the total number of bytes read from the port.</source>
          <target state="translated">&lt;code&gt;Bytes&lt;/code&gt; 는 포트에서 읽은 총 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="6b11b169e80a4457b74586d364be5166f2b329be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bytes&lt;/code&gt; is the total number of bytes written to the port from Erlang processes using &lt;code&gt;&lt;a href=&quot;#port_command-2&quot;&gt;port_command/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#port_command-3&quot;&gt;port_command/3&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;Port ! {Owner, {command, Data}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Bytes&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#port_command-2&quot;&gt;port_command/2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#port_command-3&quot;&gt;port_command/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;Port ! {Owner, {command, Data}&lt;/code&gt; 사용하여 Erlang 프로세스에서 포트에 쓴 총 바이트 수입니다 . {소유자, {command, Data} .</target>
        </trans-unit>
        <trans-unit id="4b7d1478129b3712fb620e5ca23d1fdb08973847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C-a&lt;/code&gt; means pressing the &lt;strong&gt;Ctrl&lt;/strong&gt; key and the letter &lt;code&gt;a&lt;/code&gt; simultaneously.</source>
          <target state="translated">&lt;code&gt;C-a&lt;/code&gt; 는 &lt;strong&gt;Ctrl&lt;/strong&gt; 키와 문자 &lt;code&gt;a&lt;/code&gt; 동시에 누르는 것을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="7c9f4723e07523d5da648d087cdcb94cb6395c21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; determines the type of control sequence.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 는 제어 순서의 유형을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="afa4b2e15ff830bebed42e3208d953dd7cad95f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CBModule = atom()&lt;/code&gt;, &lt;code&gt;CBFunction = atom()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CBModule = atom()&lt;/code&gt; , &lt;code&gt;CBFunction = atom()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8054deaa1d48938d60584e54dc9bfd9de5e559d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CC&lt;/code&gt; - C compiler.</source>
          <target state="translated">&lt;code&gt;CC&lt;/code&gt; -C 컴파일러.</target>
        </trans-unit>
        <trans-unit id="af09e2a54a6bdcf0c1dde503142ee7dc6bdbae86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CFLAGS&lt;/code&gt; - C compiler flags.</source>
          <target state="translated">&lt;code&gt;CFLAGS&lt;/code&gt; -C 컴파일러 플래그</target>
        </trans-unit>
        <trans-unit id="9a00d06cdbffca373a47f7076fd27fda19fce8d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CFLAG_RUNTIME_LIBRARY_PATH&lt;/code&gt; - This flag should set runtime library search path for the shared libraries. Note that this actually is a linker flag, but it needs to be passed via the compiler.</source>
          <target state="translated">&lt;code&gt;CFLAG_RUNTIME_LIBRARY_PATH&lt;/code&gt; - 이 플래그는 공유 라이브러리에 대한 런타임 라이브러리 검색 경로를 설정해야합니다. 이것은 실제로 링커 플래그이지만 컴파일러를 통해 전달되어야합니다.</target>
        </trans-unit>
        <trans-unit id="15345669eb572c1855bbaa3f876df806e0bb9beb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CPP&lt;/code&gt; - C pre-processor.</source>
          <target state="translated">&lt;code&gt;CPP&lt;/code&gt; -C 전 처리기</target>
        </trans-unit>
        <trans-unit id="82b05b15ffb6bdba5683889b5e7854c44426caad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CPPFLAGS&lt;/code&gt; - C pre-processor flags.</source>
          <target state="translated">&lt;code&gt;CPPFLAGS&lt;/code&gt; -C 전 처리기 플래그.</target>
        </trans-unit>
        <trans-unit id="43d23b56411071a494335e87273ea18e71e4c8ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CTHState&lt;/code&gt; is the current internal state of the CTH.</source>
          <target state="translated">&lt;code&gt;CTHState&lt;/code&gt; 는 CTH의 현재 내부 상태입니다.</target>
        </trans-unit>
        <trans-unit id="adf7f5ede87d4efab76811b8e1acc8b71ccc1eae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CXX&lt;/code&gt; - C++ compiler.</source>
          <target state="translated">&lt;code&gt;CXX&lt;/code&gt; -C ++ 컴파일러</target>
        </trans-unit>
        <trans-unit id="c2b602d39c6157d77e425c0d1a1f4f4c39819503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CXXFLAGS&lt;/code&gt; - C++ compiler flags.</source>
          <target state="translated">&lt;code&gt;CXXFLAGS&lt;/code&gt; -C ++ 컴파일러 플래그.</target>
        </trans-unit>
        <trans-unit id="9ca1b3332c61bb373ab0cac1b520c72e6405b903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cases = integer() | unknown&lt;/code&gt;, total number of test cases.</source>
          <target state="translated">&lt;code&gt;Cases = integer() | unknown&lt;/code&gt; , 총 테스트 사례 수입니다.</target>
        </trans-unit>
        <trans-unit id="56d92e2aa46756f6faf0c9b20711393151f8ac14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CatchLevel&lt;/code&gt; is the number of currently active catches in this process. This &lt;code&gt;InfoTuple&lt;/code&gt; can be changed or removed without prior notice.</source>
          <target state="translated">&lt;code&gt;CatchLevel&lt;/code&gt; 은이 프로세스에서 현재 활성화 된 캐치 수입니다. 이 &lt;code&gt;InfoTuple&lt;/code&gt; 은 사전 통지없이 변경되거나 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1be072e08ad5c1651d0750a21c5d8c9209babcba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Challenge&lt;/code&gt; is &lt;code&gt;A&lt;/code&gt;'s challenge for &lt;code&gt;B&lt;/code&gt; to handle. &lt;code&gt;Digest&lt;/code&gt; is the MD5 digest that &lt;code&gt;A&lt;/code&gt; constructed from the challenge &lt;code&gt;B&lt;/code&gt; sent in the previous step.</source>
          <target state="translated">&lt;code&gt;Challenge&lt;/code&gt; 은 &lt;code&gt;B&lt;/code&gt; 가 처리 &lt;code&gt;A&lt;/code&gt; 의 도전입니다 . &lt;code&gt;Digest&lt;/code&gt; 는 &lt;code&gt;A&lt;/code&gt; 가 이전 단계에서 전송 한 챌린지 &lt;code&gt;B&lt;/code&gt; 에서 구성한 MD5 다이제스트입니다 .</target>
        </trans-unit>
        <trans-unit id="98e9cf397eefd5ef6594039175cac804a85aeb28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Challenge&lt;/code&gt; is a 32-bit big-endian integer. The other fields are node &lt;code&gt;B&lt;/code&gt;'s flags, creation and full node name, similar to the &lt;code&gt;send_name&lt;/code&gt; message.</source>
          <target state="translated">&lt;code&gt;Challenge&lt;/code&gt; 는 32 비트 빅 엔디안 정수입니다. 다른 필드는 &lt;code&gt;send_name&lt;/code&gt; 메시지 와 유사한 노드 &lt;code&gt;B&lt;/code&gt; 의 플래그, 생성 및 전체 노드 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="03d671e112ef9016cf4ae72f285547bd8a062a9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Changed&lt;/code&gt; and &lt;code&gt;New&lt;/code&gt; are lists of &lt;code&gt;{Par,Val}&lt;/code&gt; for all changed and added configuration parameters, respectively.</source>
          <target state="translated">&lt;code&gt;Changed&lt;/code&gt; 및 &lt;code&gt;New&lt;/code&gt; 은 각각 변경 및 추가 된 구성 매개 변수에 대한 &lt;code&gt;{Par,Val}&lt;/code&gt; 의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="f9b2c2b2ee35e4be1d8be1088b4f21d0f7f615b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Changed&lt;/code&gt; is a list of parameter-value tuples including all configuration parameters with changed values.</source>
          <target state="translated">&lt;code&gt;Changed&lt;/code&gt; 값이있는 모든 구성 매개 변수를 포함하여 매개 변수 값 튜플 목록이 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="7647ccd0276dc3ebdbffbce725102b37712f9aaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Characters&lt;/code&gt; are the data to be put on the I/O device. If &lt;code&gt;Encoding&lt;/code&gt; is &lt;code&gt;latin1&lt;/code&gt;, this is an &lt;code&gt;iolist()&lt;/code&gt;. If &lt;code&gt;Encoding&lt;/code&gt; is &lt;code&gt;unicode&lt;/code&gt;, this is an Erlang standard mixed Unicode list (one integer in a list per character, characters in binaries represented as UTF-8).</source>
          <target state="translated">&lt;code&gt;Characters&lt;/code&gt; 는 I / O 장치에 넣을 데이터입니다. 경우 &lt;code&gt;Encoding&lt;/code&gt; 입니다 &lt;code&gt;latin1&lt;/code&gt; , 이것이입니다 &lt;code&gt;iolist()&lt;/code&gt; . 경우 &lt;code&gt;Encoding&lt;/code&gt; 입니다 &lt;code&gt;unicode&lt;/code&gt; , 이것이 얼랑 표준 혼합 유니 코드 목록 (문자 당 목록에서 하나 개의 정수, 바이너리 문자는 UTF-8로 표현).</target>
        </trans-unit>
        <trans-unit id="f43d36bbb43c1ae59bbdb9aae177e3ebb65e1ca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CheckResult&lt;/code&gt; informs about the result of the request as follows:</source>
          <target state="translated">&lt;code&gt;CheckResult&lt;/code&gt; 는 다음과 같이 요청 결과를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="8835d553742413dd94a2db1eef62b3864c33be65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Child&lt;/code&gt; - The pid of the corresponding child process, the atom &lt;code&gt;restarting&lt;/code&gt; if the process is about to be restarted, or &lt;code&gt;undefined&lt;/code&gt; if there is no such process.</source>
          <target state="translated">&lt;code&gt;Child&lt;/code&gt; -해당 자식 프로세스의 pid , 프로세스를 다시 시작하려고하면 원자가 &lt;code&gt;restarting&lt;/code&gt; 되거나 그러한 프로세스가 없으면 &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ecdb1b7548428e5a8def4eb62cb8feb6d255ae5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ChildSpec&lt;/code&gt; must be a valid child specification (unless the supervisor is a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor; see below). The child process is started by using the start function as defined in the child specification.</source>
          <target state="translated">&lt;code&gt;ChildSpec&lt;/code&gt; 은 유효한 자식 사양이어야합니다 (감독자가 &lt;code&gt;simple_one_for_one&lt;/code&gt; 감독자 가 아닌 한 아래 참조). 하위 프로세스는 하위 스펙에 정의 된 시작 기능을 사용하여 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="ef131c6397b01f4c4b3826fa4ab6c4428e8ece37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Class&lt;/code&gt; is &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, or &lt;code&gt;throw&lt;/code&gt;. So, if it were not for the stacktrace, &lt;code&gt;erlang:raise(Class, Reason, Stacktrace)&lt;/code&gt; is equivalent to &lt;code&gt;erlang:Class(Reason)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 는 &lt;code&gt;error&lt;/code&gt; , &lt;code&gt;exit&lt;/code&gt; 또는 &lt;code&gt;throw&lt;/code&gt; 입니다. 따라서 스택 추적이 아닌 경우 &lt;code&gt;erlang:raise(Class, Reason, Stacktrace)&lt;/code&gt; 는 &lt;code&gt;erlang:Class(Reason)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f27e7ebd5d1aa658a4a7e1584d62c8259c4c92a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Clear all events in the Collector&lt;/code&gt; - Deletes all &lt;code&gt;Events&lt;/code&gt; stored in the &lt;code&gt;Collector&lt;/code&gt; and notifies all connected &lt;code&gt;Viewers&lt;/code&gt; about this.</source>
          <target state="translated">&lt;code&gt;Clear all events in the Collector&lt;/code&gt; - 모든 삭제 &lt;code&gt;Events&lt;/code&gt; 에 기억 &lt;code&gt;Collector&lt;/code&gt; 및 통지 연결된 모든 &lt;code&gt;Viewers&lt;/code&gt; 이것에 대해합니다.</target>
        </trans-unit>
        <trans-unit id="cab109aecb8f210712a42362a10d474247682ab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Client&lt;/code&gt; must be the &lt;code&gt;From&lt;/code&gt; argument provided to the callback function &lt;code&gt;handle_call/3&lt;/code&gt;. &lt;code&gt;Reply&lt;/code&gt; is an arbitrary term, which is given back to the client as the return value of &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/[2,3].&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Client&lt;/code&gt; 는 콜백 함수 &lt;code&gt;handle_call/3&lt;/code&gt; 에 제공된 &lt;code&gt;From&lt;/code&gt; 인수 여야합니다 . &lt;code&gt;Reply&lt;/code&gt; 은 임의의 용어로, &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/[2,3].&lt;/a&gt;&lt;/code&gt; 의 반환 값으로 클라이언트에 다시 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c15cd05d9384e66c1d26c39d377653b2cb0ead0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Client&lt;/code&gt; must be the &lt;code&gt;From&lt;/code&gt; argument provided to the callback function. &lt;code&gt;Reply&lt;/code&gt; is any term given back to the client as the return value of &lt;code&gt;call/2,3&lt;/code&gt; or &lt;code&gt;multi_call/2,3,4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Client&lt;/code&gt; 는 콜백 함수에 제공된 &lt;code&gt;From&lt;/code&gt; 인수 여야합니다 . &lt;code&gt;Reply&lt;/code&gt; 는 &lt;code&gt;call/2,3&lt;/code&gt; 또는 &lt;code&gt;multi_call/2,3,4&lt;/code&gt; 의 반환 값으로 클라이언트에게 돌려주는 용어 입니다.</target>
        </trans-unit>
        <trans-unit id="a64832544b967ec5e0a9d1e105374ea2d0d271b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Clone&lt;/code&gt; is &lt;code&gt;zeroDotZero&lt;/code&gt; or a list of integers.</source>
          <target state="translated">&lt;code&gt;Clone&lt;/code&gt; 는 &lt;code&gt;zeroDotZero&lt;/code&gt; 또는 정수 목록입니다.</target>
        </trans-unit>
        <trans-unit id="43f356b300ad6eb6d05f267d3c3cf909e8d94433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Close all Viewers and the Collector&lt;/code&gt; - Closes the &lt;code&gt;Collector&lt;/code&gt; and all &lt;code&gt;Viewers&lt;/code&gt; connected to it.</source>
          <target state="translated">&lt;code&gt;Close all Viewers and the Collector&lt;/code&gt; - &lt;code&gt;Collector&lt;/code&gt; 및 연결된 모든 &lt;code&gt;Viewers&lt;/code&gt; 닫습니다 .</target>
        </trans-unit>
        <trans-unit id="5de3cb69c7869e260b324c1c904774727ee131ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Close other Viewers, but this&lt;/code&gt; - Keeps this &lt;code&gt;Viewer&lt;/code&gt; window and its &lt;code&gt;Collector&lt;/code&gt; process, but closes all other &lt;code&gt;Viewers&lt;/code&gt; windowsconnected to the same &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Close other Viewers, but this&lt;/code&gt; -이 유지 &lt;code&gt;Viewer&lt;/code&gt; 창 및 &lt;code&gt;Collector&lt;/code&gt; 과정을하지만 다른 모든 종료 &lt;code&gt;Viewers&lt;/code&gt; 동일하게 windowsconnected &lt;code&gt;Collector&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="711ec44f41e4bec1e0704866c66a361f3a3c96f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Close this Viewer&lt;/code&gt; - Closes this &lt;code&gt;Viewer&lt;/code&gt; window, but keeps all other &lt;code&gt;Viewers&lt;/code&gt; windows and the &lt;code&gt;Collector&lt;/code&gt; process.</source>
          <target state="translated">&lt;code&gt;Close this Viewer&lt;/code&gt; -이 &lt;code&gt;Viewer&lt;/code&gt; 창을 닫지 만 다른 모든 &lt;code&gt;Viewers&lt;/code&gt; 창과 &lt;code&gt;Collector&lt;/code&gt; 프로세스 는 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="84e73ab686070f9d79423ed9320c6fc449dc62d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Close&lt;/code&gt; - Close the system window and all its subwindows.</source>
          <target state="translated">&lt;code&gt;Close&lt;/code&gt; -시스템 창과 모든 하위 창을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="34a91ef635640753a5955cabfe077ec166782fda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Close&lt;/code&gt; - Close this window.</source>
          <target state="translated">&lt;code&gt;Close&lt;/code&gt; -이 창을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="7d74c4ff77e048822e7fc3563ffe0faf7161a918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectFun&lt;/code&gt; is called with one argument: the &lt;code&gt;Cmds&lt;/code&gt;. It should return a list of the values to be counted. The following pre-defined functions exist:</source>
          <target state="translated">&lt;code&gt;CollectFun&lt;/code&gt; 은 하나의 인수 인 &lt;code&gt;Cmds&lt;/code&gt; 로 호출됩니다 . 계산할 값 목록을 반환해야합니다. 다음과 같은 사전 정의 된 함수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="28ab0fe1dd177a3d36ce4363fbc951585785d9ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cols&lt;/code&gt; is a list of &lt;code&gt;Column&lt;/code&gt;. The agent will sort incoming variables so that all operations on one row (same index) will be supplied at the same time. The reason for this is that a database normally retrieves information row by row.</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; 는 &lt;code&gt;Column&lt;/code&gt; 목록입니다 . 에이전트는 들어오는 변수를 정렬하여 한 행 (동일 인덱스)의 모든 작업이 동시에 제공되도록합니다. 그 이유는 데이터베이스가 일반적으로 정보를 한 행씩 검색하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="5ccac0c944224b75a43f8dbcc41ca1160562e38a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cols&lt;/code&gt; is a list of &lt;code&gt;{Column, NewValue}&lt;/code&gt;, where &lt;code&gt;Column&lt;/code&gt; is an integer, and &lt;code&gt;NewValue&lt;/code&gt; is guaranteed to be of the correct type, length and within ranges, as specified in the MIB. If the object is an enumerated integer or of type BITS, the integer value is used. The list is sorted by &lt;code&gt;Column&lt;/code&gt; (increasing) and each &lt;code&gt;Column&lt;/code&gt; is guaranteed to be a valid column number.</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; 는 &lt;code&gt;{Column, NewValue}&lt;/code&gt; 의 목록이며 , 여기서 &lt;code&gt;Column&lt;/code&gt; 은 정수이며 &lt;code&gt;NewValue&lt;/code&gt; 는 MIB에 지정된대로 올바른 유형, 길이 및 범위 내에 있어야합니다. 오브젝트가 열거 된 정수이거나 BITS 유형 인 경우 정수 값이 사용됩니다. 목록은 &lt;code&gt;Column&lt;/code&gt; 별로 정렬되며 (증가) 각 &lt;code&gt;Column&lt;/code&gt; 은 유효한 열 번호 여야합니다.</target>
        </trans-unit>
        <trans-unit id="a0a15b07bfc1ffe5cad05a1ae6c4e1dacbf5ac9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cols&lt;/code&gt; is a list of integers which represent the column numbers. The &lt;code&gt;Cols&lt;/code&gt; are sorted by increasing value and are guaranteed to be valid column numbers.</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; 는 열 번호를 나타내는 정수 목록입니다. &lt;code&gt;Cols&lt;/code&gt; 증가 값으로 분류되어 유효한 열 번호로 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="adccc1e4b1c97647d4925ca3c4ee2b71b8712774" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cols&lt;/code&gt; is a list of integers, all greater than or equal to zero. This indicates that the instrumentation should find the next accessible instance. This function returns the tuple &lt;code&gt;{NextOid, NextValue}&lt;/code&gt;, or &lt;code&gt;endOfTable&lt;/code&gt;. &lt;code&gt;NextOid&lt;/code&gt; should be the lexicographically next accessible instance of a managed object in the table. It should be a list of integers, where the first integer is the column, and the rest of the list is the indices for the next row. If &lt;code&gt;endOfTable&lt;/code&gt; is returned, the agent continues to search for the next instance among the other variables and tables.</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; 는 모두 0보다 크거나 같은 정수 목록입니다. 이는 계측에서 다음 액세스 가능한 인스턴스를 찾아야 함을 나타냅니다. 이 함수는 튜플 &lt;code&gt;{NextOid, NextValue}&lt;/code&gt; 또는 &lt;code&gt;endOfTable&lt;/code&gt; 을 반환 합니다. &lt;code&gt;NextOid&lt;/code&gt; 는 테이블에서 사 전적으로 액세스 가능한 관리 대상 개체의 인스턴스 여야합니다. 정수 목록이어야합니다. 여기서 첫 번째 정수는 열이고 나머지 목록은 다음 행의 인덱스입니다. 경우 &lt;code&gt;endOfTable&lt;/code&gt; 이 반환되고, 에이전트는 다른 변수와 테이블 사이가 다음에 나오는 경우를 검색하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4861bdb056a50b23344253f316b2eff656738f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cols&lt;/code&gt; is a list of integers, greater than or equal to zero, which represents the column numbers.</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; 는 0보다 크거나 같은 정수 목록이며 열 번호를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f70532464cdb5ef0aa69b3163f8460a8f9f4bd9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Cols&lt;/code&gt; is a list of tuples &lt;code&gt;{Column, NewValue}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; 는 튜플 &lt;code&gt;{Column, NewValue}&lt;/code&gt; 의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="1e60d96717432e946eca24edf788069c31202946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Column&lt;/code&gt; is the starting column; defaults to 1.</source>
          <target state="translated">&lt;code&gt;Column&lt;/code&gt; 은 시작 열입니다. 기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="d32d55525486629e372795b7d63e44541429b999" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Comm&lt;/code&gt; is the community string (string).</source>
          <target state="translated">&lt;code&gt;Comm&lt;/code&gt; 은 커뮤니티 문자열 (문자열)입니다.</target>
        </trans-unit>
        <trans-unit id="11a5d1d16617346cef60681dfb13cb5c122f85c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Command&lt;/code&gt; specified in &lt;code&gt;{spawn_executable, Command}&lt;/code&gt; does not point out an executable file.</source>
          <target state="translated">&lt;code&gt;Command&lt;/code&gt; 에 지정된 &lt;code&gt;{spawn_executable, Command}&lt;/code&gt; 지적하지 않는 실행 파일.</target>
        </trans-unit>
        <trans-unit id="b404d749c835c1becb57946324f09df2ee342fde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Comment = string()&lt;/code&gt;, why the test case was skipped.</source>
          <target state="translated">&lt;code&gt;Comment = string()&lt;/code&gt; , 테스트 사례를 건너 뛴 이유</target>
        </trans-unit>
        <trans-unit id="7ee6bc1658bdc1c3a37a750648d890a39710467b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; Master requires all test nodes to be on the same network and share a common file system. &lt;code&gt;Common Test&lt;/code&gt; Master cannot start test nodes automatically. The nodes must be started in advance for &lt;code&gt;Common Test&lt;/code&gt; Master to be able to start test sessions on them.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; Master는 모든 테스트 노드가 동일한 네트워크에 있고 공통 파일 시스템을 공유해야합니다. &lt;code&gt;Common Test&lt;/code&gt; Master는 테스트 노드를 자동으로 시작할 수 없습니다. &lt;code&gt;Common Test&lt;/code&gt; Master가 노드에서 테스트 세션을 시작할 수 있으려면 먼저 노드를 시작해야 합니다.</target>
        </trans-unit>
        <trans-unit id="0f69c4ce1d74651a6a026efc489d093a12ebda77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; also integrates use of the OTP &lt;code&gt;cover&lt;/code&gt; tool in application Tools for code coverage analysis of Erlang/OTP programs.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 또한 Erlang / OTP 프로그램의 코드 커버리지 분석을 위해 애플리케이션 툴에 OTP &lt;code&gt;cover&lt;/code&gt; 툴 사용을 통합 합니다.</target>
        </trans-unit>
        <trans-unit id="90f52e792226a552a37514868a65e1a354938899" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; also provides decryption functions, &lt;code&gt;&lt;a href=&quot;ct#decrypt_config_file-2&quot;&gt;ct:decrypt_config_file/2,3&lt;/a&gt;&lt;/code&gt;, for recreating the original text files.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 원본 텍스트 파일을 다시 작성하기위한 암호 해독 기능인 &lt;code&gt;&lt;a href=&quot;ct#decrypt_config_file-2&quot;&gt;ct:decrypt_config_file/2,3&lt;/a&gt;&lt;/code&gt; 도 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="baf54dcb0e0931fd6aea76d74b4621fb3a5024b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; always calls all available hook functions, even pre- and post hooks for configuration functions that are not implemented in the suite. For example, &lt;code&gt;pre_init_per_suite(x_SUITE, ...)&lt;/code&gt; and &lt;code&gt;post_init_per_suite(x_SUITE, ...)&lt;/code&gt; are called for test suite &lt;code&gt;x_SUITE&lt;/code&gt;, even if it does not export &lt;code&gt;init_per_suite/1&lt;/code&gt;. With this feature hooks can be used as configuration fallbacks, and all configuration functions can be replaced with hook functions.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 항상 스위트에서 구현되지 않은 구성 기능에 대한 사전 및 사후 후크를 비롯하여 사용 가능한 모든 후크 기능을 호출합니다. 예를 들어, &lt;code&gt;pre_init_per_suite(x_SUITE, ...)&lt;/code&gt; 및 &lt;code&gt;post_init_per_suite(x_SUITE, ...)&lt;/code&gt; 는 &lt;code&gt;init_per_suite/1&lt;/code&gt; 을 내 보내지 않더라도 테스트 스위트 &lt;code&gt;x_SUITE&lt;/code&gt; 에 대해 호출됩니다 . 이 기능을 사용하면 구성 폴백으로 후크를 사용할 수 있으며 모든 구성 기능을 후크 기능으로 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70e9dc44f0d138266aaa1039eaa9aacf688d1302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; can automatically delete old log. This is specified with the &lt;code&gt;keep_logs&lt;/code&gt; option. The default value for this option is &lt;code&gt;all&lt;/code&gt;, which means that no logs are deleted. If the value is set to an integer, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;Common Test&lt;/code&gt; deletes all &lt;code&gt;ct_run.&amp;lt;timestamp&amp;gt;&lt;/code&gt; directories, except the &lt;code&gt;N&lt;/code&gt; newest.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 이전 로그를 자동으로 삭제할 수 있습니다. 이것은 &lt;code&gt;keep_logs&lt;/code&gt; 옵션으로 지정됩니다 . 이 옵션의 기본값은 &lt;code&gt;all&lt;/code&gt; 이므로 로그가 삭제되지 않습니다. 값이 정수 &lt;code&gt;N&lt;/code&gt; 으로 설정 되면 &lt;code&gt;Common Test&lt;/code&gt; 는 최신 &lt;code&gt;N&lt;/code&gt; 을 제외한 모든 &lt;code&gt;ct_run.&amp;lt;timestamp&amp;gt;&lt;/code&gt; 디렉토리를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="0455ef0d4074506efec13e163df014743587524e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; does not add a newline character &lt;code&gt;(\n)&lt;/code&gt; to the end of an output string that it receives from a call to, for example, &lt;code&gt;io:format/2&lt;/code&gt;, and which it prints to the test case log.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 &lt;code&gt;io:format/2&lt;/code&gt; 와 같은 호출에서 수신 한 출력 문자열 끝에 줄 바꿈 문자 &lt;code&gt;(\n)&lt;/code&gt; 를 추가하지 않으며 테스트 케이스 로그에 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="db26db9d2a1955be3a2b7bc537141254142dd941" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; enables the Debugger auto-attach feature, which means that for every new interpreted test case function that starts to execute, a new trace window automatically pops up (as each test case executes on a dedicated Erlang process). Whenever a new test case starts, &lt;code&gt;Common Test&lt;/code&gt; attempts to close the inactive trace window of the previous test case. However, if you prefer &lt;code&gt;Common Test&lt;/code&gt; to leave inactive trace windows, use option &lt;code&gt;keep_inactive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 디버거 자동 연결 기능을 활성화합니다. 즉, 실행을 시작하는 모든 해석 된 새로운 테스트 사례 기능마다 새로운 추적 창이 자동으로 나타납니다 (각 테스트 사례가 전용 Erlang 프로세스에서 실행 됨). 새 테스트 케이스가 시작될 때마다 &lt;code&gt;Common Test&lt;/code&gt; 는 이전 테스트 케이스의 비활성 추적 창을 닫으려고 시도합니다. 그러나 &lt;code&gt;Common Test&lt;/code&gt; 를 사용하여 비활성 추적 창을 남기 &lt;code&gt;keep_inactive&lt;/code&gt; 옵션을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e885a1c24067f923a8a89f3dc59448b495078af1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; executes all test cases in the group in parallel.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 그룹의 모든 테스트 사례를 병렬로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="f71c77756baa759c2418aef0634cde295b24a12a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; executes test suite programs automatically, without operator interaction. Test progress and results are printed to logs in HTML format, easily browsed with a standard web browser. &lt;code&gt;Common Test&lt;/code&gt; also sends notifications about progress and results through an OTP event manager to event handlers plugged in to the system. This way, users can integrate their own programs for, for example, logging, database storing, or supervision with &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 운영자의 상호 작용없이 테스트 스위트 프로그램을 자동으로 실행합니다. 테스트 진행 및 결과는 표준 웹 브라우저를 사용하여 쉽게 찾아 볼 수있는 HTML 형식의 로그에 인쇄됩니다. &lt;code&gt;Common Test&lt;/code&gt; 는 또한 OTP 이벤트 관리자를 통해 진행률 및 결과에 대한 알림을 시스템에 연결된 이벤트 핸들러로 보냅니다. 이러한 방식으로 사용자는 로깅, 데이터베이스 저장 또는 &lt;code&gt;Common Test&lt;/code&gt; 감독 등의 자체 프로그램을 통합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="987c5baf22d42dc97d25ab91a004fd91b2e1c4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; framework code coverage support module.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 프레임 워크 코드 범위 지원 모듈.</target>
        </trans-unit>
        <trans-unit id="0aa33ebab6e4fde0329c9780e5df77554dc87976" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; framework functions for starting and stopping nodes for Large-Scale Testing.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 대규모 테스트를위한 노드 시작 및 중지를위한 공통 테스트 프레임 워크 기능.</target>
        </trans-unit>
        <trans-unit id="1804f031199e945d268993152acaf4c05f4c9b68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; has a framework for event handling based on the OTP event manager concept and &lt;code&gt;gen_event&lt;/code&gt; behavior. When the &lt;code&gt;Common Test&lt;/code&gt; server starts, it spawns an event manager. During test execution the manager gets a notification from the server when something of potential interest happens. Any event handler plugged into the event manager can match on events of interest, take action, or pass the information on. The event handlers are Erlang modules implemented by the &lt;code&gt;Common Test&lt;/code&gt; user according to the &lt;code&gt;gen_event&lt;/code&gt; behavior (for details, see module &lt;code&gt;gen_event&lt;/code&gt; and section &lt;code&gt;gen_event Behaviour&lt;/code&gt; in OTP Design Principles in the System Documentation).</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 에는 OTP 이벤트 관리자 개념 및 &lt;code&gt;gen_event&lt;/code&gt; 동작을 기반으로하는 이벤트 처리를위한 프레임 워크가 있습니다. 때 &lt;code&gt;Common Test&lt;/code&gt; 서버에서 시작, 그것은 이벤트 관리자를 생성합니다. 테스트 실행 중 관리자는 잠재적 인 문제가 발생할 때 서버로부터 알림을받습니다. 이벤트 관리자에 연결된 모든 이벤트 핸들러는 관심있는 이벤트를 일치 시키거나 조치를 취하거나 정보를 전달할 수 있습니다. 이벤트 핸들러는 &lt;code&gt;gen_event&lt;/code&gt; 동작 에 따라 &lt;code&gt;Common Test&lt;/code&gt; 사용자가 구현 한 Erlang 모듈입니다 (자세한 내용 은 시스템 문서의 OTP 설계 원칙의 모듈 &lt;code&gt;gen_event&lt;/code&gt; 및 섹션 &lt;code&gt;gen_event Behaviour&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="21dc25e393520f16a3d7008d0df49a60463cc92a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; includes an &lt;strong&gt;optional&lt;/strong&gt; feature to allow user HTML style sheets for customizing printouts. The functions in &lt;code&gt;ct&lt;/code&gt; that print to a test case HTML log file (&lt;code&gt;log/3,4,5&lt;/code&gt; and &lt;code&gt;pal/3,4,5&lt;/code&gt;) accept &lt;code&gt;Category&lt;/code&gt; as first argument. With this argument a category can be specified that can be mapped to a named &lt;code&gt;div&lt;/code&gt; selector in a CSS rule-set. This is useful, especially for coloring text differently depending on the type of (or reason for) the printout. Say you want one particular background color for test system configuration information, a different one for test system state information, and finally one for errors detected by the test case functions. The corresponding style sheet can look as follows:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 에는 사용자 정의 HTML 스타일 시트를 사용하여 출력물을 사용자 정의 할 수 있는 &lt;strong&gt;선택적&lt;/strong&gt; 기능이 포함되어 있습니다. 테스트 케이스 HTML 로그 파일 ( &lt;code&gt;log/3,4,5&lt;/code&gt; 및 &lt;code&gt;pal/3,4,5&lt;/code&gt; )로 인쇄하는 &lt;code&gt;ct&lt;/code&gt; 의 함수는 &lt;code&gt;Category&lt;/code&gt; 를 첫 번째 인수로 허용 합니다. 이 인수를 사용하면 명명 된 &lt;code&gt;div&lt;/code&gt; 에 매핑 할 수있는 범주를 지정할 수 있습니다CSS 규칙 세트의 선택기 이 방법은 특히 출력물의 유형 (또는 이유)에 따라 텍스트를 다르게 색칠하는 데 유용합니다. 테스트 시스템 구성 정보에 대해 하나의 특정 배경색, 테스트 시스템 상태 정보에 대해 다른 배경색 및 테스트 케이스 기능에 의해 감지 된 오류에 대한 배경색을 원한다고 가정하십시오. 해당 스타일 시트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2e5db5b375a5b3a8e399cd7c9aacfec4545acdd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; includes default callback modules for handling configuration data specified in standard configuration files (described earlier) and in XML files as follows:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 에는 다음과 같이 표준 구성 파일 (앞서 설명)과 XML 파일에 지정된 구성 데이터를 처리하기위한 기본 콜백 모듈이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a03e3dc391ca610eaa0aa9f4e80a72f322dc5d2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; is a portable application for automated testing. It is suitable for:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 자동화 된 테스트를위한 휴대용 응용 프로그램입니다. 다음에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="13feb6f81466ef9097d1f4bfbb3cdbec9e6e293d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; is also a very useful tool for white-box testing Erlang code (for example, module testing), as the test programs can call exported Erlang functions directly. There is very little overhead required for implementing basic test suites and executing simple tests. For black-box testing Erlang software, Erlang RPC and standard O&amp;amp;M interfaces can be used for example.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 테스트 프로그램이 내 보낸 Erlang 함수를 직접 호출 할 수 있기 때문에 Erlang 코드 (예 : 모듈 테스트)를 화이트 박스 테스트하는 데 매우 유용한 도구입니다. 기본 테스트 스위트를 구현하고 간단한 테스트를 실행하는 데 필요한 오버 헤드는 거의 없습니다. 블랙 박스 테스트 Erlang 소프트웨어의 경우 Erlang RPC 및 표준 O &amp;amp; M 인터페이스를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07b896c97c72cb0f5a0b4f34b1d567b01776d8c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; is delivered with some general-purpose CTHs that can be enabled by the user to provide generic testing functionality. Some of these CTHs are enabled by default when &lt;code&gt;common_test&lt;/code&gt; is started to run. They can be disabled by setting &lt;code&gt;enable_builtin_hooks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; on the command line or in the test specification. The following two CTHs are delivered with &lt;code&gt;Common Test&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 일반 테스트 기능을 제공하기 위해 사용자가 활성화 할 수있는 일부 범용 CTH와 함께 제공됩니다. 이러한 CTH 중 일부는 &lt;code&gt;common_test&lt;/code&gt; 가 실행되기 시작할 때 기본적으로 사용됩니다 . 명령 행 또는 테스트 스펙에서 &lt;code&gt;enable_builtin_hooks&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 사용 불가능하게 할 수 있습니다 . 다음 두 가지 CTH가 &lt;code&gt;Common Test&lt;/code&gt; 와 함께 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="8b938507a5962c5576e8ed8466129091288979a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; might later support an optional feature to only store the last (and possibly the first) set of logs of repeated test runs, but for now the user must be careful not to run out of disk space if tests are repeated during long periods of time.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 나중에 반복적 인 테스트 실행의 마지막 (그리고 아마도 첫 번째) 로그 세트 만 저장하는 선택적 기능을 지원할 수 있지만, 오랜 기간 동안 테스트가 반복되는 경우 사용자는 디스크 공간이 부족하지 않도록주의해야합니다. 시각.</target>
        </trans-unit>
        <trans-unit id="8d332468b4de1457a0c396b3bb7a77605c977936" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; passes all include directories (specified either with flag/option &lt;code&gt;include&lt;/code&gt;, or variable &lt;code&gt;CT_INCLUDE_PATH&lt;/code&gt; , or both, to the compiler.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 모든 include 디렉토리 (플래그 / 옵션 &lt;code&gt;include&lt;/code&gt; 또는 변수 &lt;code&gt;CT_INCLUDE_PATH&lt;/code&gt; 또는 둘 다로 지정)를 컴파일러에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="bef77a7b82fa0ca5566c1f398477e1e765ade0ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; provides an Erlang API for running tests. The main (and most flexible) function for specifying and executing tests is &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;. It takes the same start parameters as &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;, but the flags are instead specified as options in a list of key-value tuples. For example, a test specified with &lt;code&gt;ct_run&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 테스트 실행을위한 Erlang API를 제공합니다. 테스트를 지정하고 실행하기위한 주요 (그리고 가장 유연한) 기능은 &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; 입니다. &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; 과 동일한 시작 매개 변수를 사용 하지만 대신 플래그는 키-값 튜플 목록에서 옵션으로 지정됩니다. 예를 들어, 다음과 같이 &lt;code&gt;ct_run&lt;/code&gt; 으로 지정된 테스트 :</target>
        </trans-unit>
        <trans-unit id="482782783fd4a7eab54e0923697015b808496246" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; provides libraries with useful support functions to fill various testing needs and requirements. There is, for example, support for flexible test declarations through test specifications. There is also support for central configuration and control of multiple independent test sessions (to different target systems) running in parallel.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 다양한 테스트 요구 및 요구 사항을 충족시키는 유용한 지원 기능을 라이브러리에 제공합니다. 예를 들어 테스트 사양을 통해 유연한 테스트 선언을 지원합니다. 또한 병렬로 실행되는 여러 독립 테스트 세션 (다른 대상 시스템으로)의 중앙 구성 및 제어를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="2e6d19abbd89ae903e16a3cea134a10de31a4f05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; provides the following three main functions for printing strings:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 문자열 인쇄를위한 다음 세 가지 주요 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="44759a10faf062429a727f795134f243bc807b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; specific layer on Erlang/OTP &lt;code&gt;rpc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; Erlang / OTP &lt;code&gt;rpc&lt;/code&gt; 의공통 테스트 특정 계층 .</target>
        </trans-unit>
        <trans-unit id="321cdcb057def14c1bf4ca3b4463d75059868378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; specific layer on top of Telnet client &lt;code&gt;ct_telnet_client.erl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; Telnet 클라이언트 &lt;code&gt;ct_telnet_client.erl&lt;/code&gt; 위에 공통 테스트 특정 계층 .</target>
        </trans-unit>
        <trans-unit id="205bd1f1245130a426bf292c8f158fc4702b707f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; user interface module for the &lt;code&gt;SNMP&lt;/code&gt; application.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; &lt;code&gt;SNMP&lt;/code&gt; 어플리케이션을 위한 공통 테스트 사용자 인터페이스 모듈 .</target>
        </trans-unit>
        <trans-unit id="fad19b900fd608b56f7a6e97efd3eb0e0832a204" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Common Test&lt;/code&gt; uses an HTML Style Sheet (CSS file) to control the look of the HTML log files generated during test runs. If the log files are not displayed correctly in the browser of your choice, or you prefer a more primitive (&quot;pre &lt;code&gt;Common Test&lt;/code&gt; v1.6&quot;) look of the logs, use the start flag/option:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; 는 HTML 스타일 시트 (CSS 파일)를 사용하여 테스트 실행 중에 생성 된 HTML 로그 파일의 모양을 제어합니다. 선택한 브라우저에서 로그 파일이 올바르게 표시되지 않거나보다 원시적 인 로그 ( &quot;pre &lt;code&gt;Common Test&lt;/code&gt; v1.6&quot;) 모양 을 선호하는 경우 시작 플래그 / 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e77ff73dfa0c11bcb9348813694ccdd31a62613e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CommunityIndex&lt;/code&gt; is a non-empty string.</source>
          <target state="translated">&lt;code&gt;CommunityIndex&lt;/code&gt; 는 비어 있지 않은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c404c0ea118d3d7ddd66c2f92ba210a7713c596c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CommunityIndex&lt;/code&gt; must be a &lt;strong&gt;non-empty&lt;/strong&gt; string.</source>
          <target state="translated">&lt;code&gt;CommunityIndex&lt;/code&gt; 는 &lt;strong&gt;비어 있지 않은&lt;/strong&gt; 문자열 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="e9a974fe4d080792768a10a6a1e32a1a8e5ce843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CommunityName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;CommunityName&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4ed57948b8e5de879dc3871e7e26d7d61e94bd99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Conf = init_per_group | end_per_group&lt;/code&gt;, group configuration function.</source>
          <target state="translated">&lt;code&gt;Conf = init_per_group | end_per_group&lt;/code&gt; , 그룹 구성 기능.</target>
        </trans-unit>
        <trans-unit id="2162c8ea91e10788997a100e5902e316f25f7d29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConfDir&lt;/code&gt; is a string which points to the directory where the configuration files are found.</source>
          <target state="translated">&lt;code&gt;ConfDir&lt;/code&gt; 은 구성 파일이있는 디렉토리를 가리키는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="12b596ef6a3131118d7ef4ae52a15a6e95e0755e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Config1&lt;/code&gt; is the existing configuration and &lt;code&gt;Config2&lt;/code&gt; is the new configuration.</source>
          <target state="translated">&lt;code&gt;Config1&lt;/code&gt; 기존 구성과 &lt;code&gt;Config2&lt;/code&gt; 는 새로운 구성입니다.</target>
        </trans-unit>
        <trans-unit id="f5ba704c98b3d116927a830a00b0a757625b9b66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Config&lt;/code&gt; is any (zero or more) of the following:</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; 은 다음 중 하나 이상입니다 (0 이상).</target>
        </trans-unit>
        <trans-unit id="fdff3f5b72d04a6f4aafbcbf979bb679490c2d0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Config&lt;/code&gt; is as passed in &lt;code&gt;transport_config&lt;/code&gt; tuple in the &lt;code&gt;&lt;a href=&quot;diameter#transport_opt&quot;&gt;diameter:transport_opt()&lt;/a&gt;&lt;/code&gt; list passed to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; 로 전달 된 &lt;code&gt;&lt;a href=&quot;diameter#transport_opt&quot;&gt;diameter:transport_opt()&lt;/a&gt;&lt;/code&gt; 목록 의 &lt;code&gt;transport_config&lt;/code&gt; 튜플에 전달 된대로 입니다.</target>
        </trans-unit>
        <trans-unit id="8cd9f3cad986a11f3fec1de020758edf881a72d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Config&lt;/code&gt; is the proper Erlang key-value list, with possible key-value sublists as values, like the earlier configuration file example:</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; 는 올바른 Erlang 키-값 목록이며 가능한 구성 가능한 키-값 하위 목록은 이전 구성 파일 예와 같이 값으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="ebc3225b2eb346e7661c26113c29c0f9bbd9c08e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Config&lt;/code&gt; is to be an atom of the following configuration parameters:</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; 은 다음 구성 매개 변수의 원자가됩니다.</target>
        </trans-unit>
        <trans-unit id="e985dcb5b25e561979864632b0833357ebf58c6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConnType = ssh | sftp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ConnType = ssh | sftp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13d607cfde8d7a59de4034300819408694b383a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConnType&lt;/code&gt; always overrides the type specified in the address tuple in the configuration data (and in &lt;code&gt;ExtraOpts&lt;/code&gt;). So it is possible to, for example, open an SFTP connection directly using data originally specifying an SSH connection. Value &lt;code&gt;host&lt;/code&gt; means that the connection type specified by the host option (either in the configuration data or in &lt;code&gt;ExtraOpts&lt;/code&gt;) is used.</source>
          <target state="translated">&lt;code&gt;ConnType&lt;/code&gt; 은 항상 구성 데이터 (및 &lt;code&gt;ExtraOpts&lt;/code&gt; ) 의 주소 튜플에 지정된 유형을 대체합니다 . 예를 들어, 원래 SSH 연결을 지정하는 데이터를 사용하여 SFTP 연결을 직접 열 수 있습니다. 값 &lt;code&gt;host&lt;/code&gt; 는 호스트 옵션에 의해 지정된 연결 유형 (구성 데이터 또는 &lt;code&gt;ExtraOpts&lt;/code&gt; 에 있음 )이 사용됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="d93948591b08f0f67c09240a4246b82ff3d83766" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ContextName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;ContextName&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="d8a8a2f920ed035b963dd28ce13db60d74d101df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Continuation&lt;/code&gt; is sent as the state in later calls to the function when more characters are available. When no more characters are available, the function must return &lt;code&gt;{done, eof, Rest}&lt;/code&gt;. The initial state is the empty list. The data when an end of file is reached on the IO device is the atom &lt;code&gt;eof&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Continuation&lt;/code&gt; 더 많은 문자를 사용할 수있는 경우 나중에 함수를 호출 할 때 상태로 연속 이 전송됩니다. 더 이상 문자를 사용할 수 없으면 함수는 &lt;code&gt;{done, eof, Rest}&lt;/code&gt; 반환해야합니다 . 초기 상태는 빈 목록입니다. IO 장치에서 파일 끝에 도달했을 때의 데이터는 원자 &lt;code&gt;eof&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f0a5775f48402ec28e03d748e8982e27c7b3b171" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Crash dumps&lt;/code&gt;, &lt;code&gt;drivers&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Crash dumps&lt;/code&gt; , &lt;code&gt;drivers&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b01dd5cec0ba7e8085414e78242798e3a3a2fb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;D1&lt;/code&gt; is the greatest of the two, and is said to be a super-domain of &lt;code&gt;D2&lt;/code&gt;. &lt;code&gt;D2&lt;/code&gt; is a sub-domain &lt;code&gt;D1&lt;/code&gt;. Both &lt;code&gt;D1&lt;/code&gt; and &lt;code&gt;D2&lt;/code&gt; are sub-domains of &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;D1&lt;/code&gt; 은 둘 중 가장 큰 것으로 &lt;code&gt;D2&lt;/code&gt; 의 수퍼 도메인이라고 합니다. &lt;code&gt;D2&lt;/code&gt; 는 하위 도메인 &lt;code&gt;D1&lt;/code&gt; 입니다. &lt;code&gt;D1&lt;/code&gt; 과 &lt;code&gt;D2&lt;/code&gt; 는 모두 &lt;code&gt;[]&lt;/code&gt; 의 하위 도메인입니다 .</target>
        </trans-unit>
        <trans-unit id="c31f0c7a98c0ddb09e1a60682d08bc513105f1fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;D&lt;/code&gt; determines which load value should be associated with which percentage. Choosing &lt;code&gt;D&lt;/code&gt; = 50 means that 128 is 60% load, 256 is 80%, 512 is 90%, and so on.</source>
          <target state="translated">&lt;code&gt;D&lt;/code&gt; 는 어떤 하중 값이 어떤 백분율과 관련되어야 하는지를 결정합니다. &lt;code&gt;D&lt;/code&gt; = 50을 선택하면 128은 60 %로드, 256은 80 %, 512는 90 % 등을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="8a6bb7eab7fff3f050d66f5603c4de0eb71a7a6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DED_LD&lt;/code&gt; - Linker for Dynamically loaded Erlang Drivers.</source>
          <target state="translated">&lt;code&gt;DED_LD&lt;/code&gt; - 동적으로로드 된 Erlang 드라이버 용 링커.</target>
        </trans-unit>
        <trans-unit id="f5d6fd3a1cd4700e7621c842f86632b8c9af25d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DED_LDFLAGS&lt;/code&gt; - Linker flags to use with &lt;code&gt;DED_LD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DED_LDFLAGS&lt;/code&gt; 는 - 링커 플래그와 함께 사용하는 &lt;code&gt;DED_LD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4617d4970f1b782d45910cc54df02bc75f478370" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DED_LD_FLAG_RUNTIME_LIBRARY_PATH&lt;/code&gt; - This flag should set runtime library search path for shared libraries when linking with &lt;code&gt;DED_LD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DED_LD_FLAG_RUNTIME_LIBRARY_PATH&lt;/code&gt; - 이 플래그는 &lt;code&gt;DED_LD&lt;/code&gt; 와 링크 할 때 공유 라이브러리에 대한 런타임 라이브러리 검색 경로를 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="29a449b43048d631b7f51c988ca402fc0e72025b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DF&lt;/code&gt; is a subset of &lt;code&gt;X + B&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DF&lt;/code&gt; 는 &lt;code&gt;X + B&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="fe210f89612a60d1f59186e8a6d4ba843065b479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DF_1&lt;/code&gt; is a subset of &lt;code&gt;DF_2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DF_1&lt;/code&gt; 은 의 하위 집합입니다 &lt;code&gt;DF_2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="62e18a58f4624f3d8cb03776f83bae7a582287f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DF_2&lt;/code&gt; is a subset of &lt;code&gt;DF_3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DF_2&lt;/code&gt; 은 의 하위 집합입니다 &lt;code&gt;DF_3&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d7190bd5b3217a67a8b9796cfb11567d4920202e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DF_3&lt;/code&gt; is a subset of &lt;code&gt;DF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DF_3&lt;/code&gt; 은 &lt;code&gt;DF&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="790e8d309224da4763d66697e8805a2c518c316b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DSymbol=0|1&lt;/code&gt; - Defines the value for a symbol. The symbol can be used in &lt;code&gt;%if&lt;/code&gt; and &lt;code&gt;%unless&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;DSymbol=0|1&lt;/code&gt; 기호 값을 정의합니다. 기호는 &lt;code&gt;%if&lt;/code&gt; 및 &lt;code&gt;%unless&lt;/code&gt; 지시문 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="75d4c89d703a42ae3ba9cf6fe3bf040e75901a9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; is any Erlang term. This data is converted to binary term format and sent to the port.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 는 Erlang 용어입니다. 이 데이터는 이진 용어 형식으로 변환되어 포트로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="4c1d3dc949f7d7c997df0b1a0f91e3be80e2a847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; is either &lt;code&gt;{ok, Pdu}&lt;/code&gt; or &lt;code&gt;{error, ReqId, ReasonInfo, Pdu}&lt;/code&gt;. Which one is used depends on the return value from the MPD &lt;code&gt;&lt;a href=&quot;snmpm_mpd#process_msg&quot;&gt;process_msg&lt;/a&gt;&lt;/code&gt; function. If the MsgData is &lt;code&gt;ok&lt;/code&gt;, the first is used, and if it is &lt;code&gt;{error, ReqId, Reason}&lt;/code&gt; the latter is used.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 는 &lt;code&gt;{ok, Pdu}&lt;/code&gt; 또는 &lt;code&gt;{error, ReqId, ReasonInfo, Pdu}&lt;/code&gt; 입니다. 사용되는 것은 MPD &lt;code&gt;&lt;a href=&quot;snmpm_mpd#process_msg&quot;&gt;process_msg&lt;/a&gt;&lt;/code&gt; 함수 의 리턴 값에 따라 다릅니다 . MsgData가 &lt;code&gt;ok&lt;/code&gt; 이면 첫 번째가 사용되고 &lt;code&gt;{error, ReqId, Reason}&lt;/code&gt; 이면 후자가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="de29bb30646a35552a48e1591b259e1df9bad086" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; is received from the external program.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 외부 프로그램에서 데이터 가 수신됩니다.</target>
        </trans-unit>
        <trans-unit id="4391ebeead261b430733f5cd3baf1f3974b725fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; is supplied at filter registration time, see &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;register_notification_filter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 필터 등록시 데이터 가 제공됩니다 ( &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;register_notification_filter&lt;/a&gt;&lt;/code&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="a62bdbc1b093839e5477820b315f5f19c2bf284b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; is the characters read, in list or binary form (depending on the I/O server mode, see the next section).</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 는 목록 또는 이진 형식으로 읽은 문자입니다 (I / O 서버 모드에 따라 다음 섹션 참조).</target>
        </trans-unit>
        <trans-unit id="0bbc524912c1e63eb1397c444e1d6d8e41a6c4d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; is the record/OID written/deleted.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 는 기록 / OID 기록 / 삭제입니다.</target>
        </trans-unit>
        <trans-unit id="0393319156f791122185657650e84cdf75e2965f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data&lt;/code&gt; will be passed on to the filter when calling the functions of the behaviour.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 동작의 함수를 호출 할 때 데이터 가 필터로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="af1b950d2ae88b7705a20577c64a5c0bb934b059" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Db&lt;/code&gt; is a reference to the symbolic store database (retrieved by a call to &lt;code&gt;get_symbolic_store_db/0&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Db&lt;/code&gt; 는 기호 저장소 데이터베이스에 대한 참조입니다 ( &lt;code&gt;get_symbolic_store_db/0&lt;/code&gt; 호출로 검색 ).</target>
        </trans-unit>
        <trans-unit id="5c34a6454054382ed89d2d853359771388abb68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Deb&lt;/code&gt; is the debug structure.</source>
          <target state="translated">&lt;code&gt;Deb&lt;/code&gt; 은 디버그 구조입니다.</target>
        </trans-unit>
        <trans-unit id="b0fb05ac1b898e351d55b0f274c472fe978e4544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Decode_Instruction&lt;/code&gt; is a tuple with your chosen function name and the components from the top type that leads to the single type you want to decode. Ensure to choose a name of your function that is not the same as any of the generated functions.</source>
          <target state="translated">&lt;code&gt;Decode_Instruction&lt;/code&gt; 은 선택한 함수 이름과 최상위 유형의 구성 요소가있는 튜플이며 디코딩하려는 단일 유형으로 이어집니다. 생성 된 함수와 다른 함수 이름을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="c8c057affdc1fd56c570b3364c0bde170b1540e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DefaultAgentConfig&lt;/code&gt; is a list of default agent config's. These values are used as default values when this user registers agents.</source>
          <target state="translated">&lt;code&gt;DefaultAgentConfig&lt;/code&gt; 는 기본 에이전트 구성 목록입니다. 이 값은이 사용자가 에이전트를 등록 할 때 기본값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="db37fa605ea19b45094c0a2e818ef7881238d2b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DepMods&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt; and defines which other modules &lt;code&gt;Mod&lt;/code&gt; is dependent on. In the &lt;code&gt;relup&lt;/code&gt; file, instructions for loading these modules come before the instruction for loading &lt;code&gt;Mod&lt;/code&gt; when upgrading, and conversely when downgrading.</source>
          <target state="translated">&lt;code&gt;DepMods&lt;/code&gt; 의 기본값은 &lt;code&gt;[]&lt;/code&gt; 이며 &lt;code&gt;Mod&lt;/code&gt; 가 의존 하는 다른 모듈을 정의합니다 . 에서 &lt;code&gt;relup&lt;/code&gt; 의 파일이 모듈을로드하기위한 지침로드의 명령 앞에 오는 &lt;code&gt;Mod&lt;/code&gt; 업그레이드 및 반대로 다운 그레이드 할 때.</target>
        </trans-unit>
        <trans-unit id="8926f7f7a58fd6e57bffff57b375bc212bc50e66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DepMods&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt; and defines which other modules &lt;code&gt;Mod&lt;/code&gt; is dependent on. In the &lt;code&gt;relup&lt;/code&gt; file, instructions related to these modules come before the instruction for loading &lt;code&gt;Mod&lt;/code&gt; when upgrading, and conversely when downgrading.</source>
          <target state="translated">&lt;code&gt;DepMods&lt;/code&gt; 의 기본값은 &lt;code&gt;[]&lt;/code&gt; 이며 &lt;code&gt;Mod&lt;/code&gt; 가 의존 하는 다른 모듈을 정의합니다 . 에서 &lt;code&gt;relup&lt;/code&gt; 의 파일이 모듈에 관한 지침로드의 명령 앞에 오는 &lt;code&gt;Mod&lt;/code&gt; 업그레이드 및 반대로 다운 그레이드 할 때.</target>
        </trans-unit>
        <trans-unit id="e9ff243f2e06c83bd758cafe48ac35a5a3278f71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DepMods&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt; and defines which other modules &lt;code&gt;Mod&lt;/code&gt; is dependent on. In the &lt;code&gt;relup&lt;/code&gt; file, instructions related to these modules come before the instruction for removing &lt;code&gt;Mod&lt;/code&gt; when upgrading, and conversely when downgrading.</source>
          <target state="translated">&lt;code&gt;DepMods&lt;/code&gt; 의 기본값은 &lt;code&gt;[]&lt;/code&gt; 이며 &lt;code&gt;Mod&lt;/code&gt; 가 의존 하는 다른 모듈을 정의합니다 . 에서 &lt;code&gt;relup&lt;/code&gt; 의 파일이 모듈에 관한 지침을 제거하기위한 명령 앞에 와야 &lt;code&gt;Mod&lt;/code&gt; 때 다운 그레이드 반대로하면 업그레이드합니다.</target>
        </trans-unit>
        <trans-unit id="b4a5dcc62531cadb5955ed6e0fa9fca7206dee80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DepMods&lt;/code&gt; is a list of modules, on which &lt;code&gt;Module&lt;/code&gt; is dependent.</source>
          <target state="translated">&lt;code&gt;DepMods&lt;/code&gt; 는 &lt;code&gt;Module&lt;/code&gt; 이 의존 하는 모듈 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="0d936b0be3695643a032b15ecf2f5c605735896a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DeptId&lt;/code&gt; is the identity of the department where the employee works.</source>
          <target state="translated">&lt;code&gt;DeptId&lt;/code&gt; 는 직원이 근무하는 부서의 ID입니다.</target>
        </trans-unit>
        <trans-unit id="dda40003d1e3c0b81a29f71fbfe7965d826da662" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Depth&lt;/code&gt; is the maximum print depth; defaults to -1, which means no limitation.</source>
          <target state="translated">&lt;code&gt;Depth&lt;/code&gt; 는 최대 인쇄 깊이입니다. 기본값은 -1이며 제한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="82f2a97e9d581807a1fa359418653af55d8511d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DepthFun&lt;/code&gt; is a function that can be used for limiting the size of terms; calling &lt;code&gt;DepthFun(Term)&lt;/code&gt; substitutes &lt;code&gt;'...'&lt;/code&gt; for parts of &lt;code&gt;Term&lt;/code&gt; below the depth specified by the &lt;code&gt;info/1,2&lt;/code&gt; option &lt;code&gt;depth&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DepthFun&lt;/code&gt; 은 용어의 크기를 제한하는 데 사용할 수있는 기능입니다. 전화 &lt;code&gt;DepthFun(Term)&lt;/code&gt; 대체 &lt;code&gt;'...'&lt;/code&gt; 의 부품 &lt;code&gt;Term&lt;/code&gt; 에 의해 지정된 깊이 아래 &lt;code&gt;info/1,2&lt;/code&gt; 옵션의 &lt;code&gt;depth&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="11f91be8badda3bf828b23258ae5d1a892c8b512" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dest&lt;/code&gt; can be a remote or local process identifier, a (local) port, a locally registered name, or a tuple &lt;code&gt;{RegName, Node}&lt;/code&gt; for a registered name at another node.</source>
          <target state="translated">&lt;code&gt;Dest&lt;/code&gt; 은 원격 또는 로컬 프로세스 식별자, (로컬) 포트, 로컬로 등록 된 이름 또는 다른 노드의 등록 된 이름에 대한 튜플 &lt;code&gt;{RegName, Node}&lt;/code&gt; 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b83a68950543bb8498c5bdca13ac197b6ea6f26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Destfile&lt;/code&gt; is used to call &lt;code&gt;file:open/2&lt;/code&gt;. Please see the appropriate documentation.</source>
          <target state="translated">&lt;code&gt;Destfile&lt;/code&gt; 은 &lt;code&gt;file:open/2&lt;/code&gt; 를 호출하는 데 사용됩니다 . 적절한 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2385346044103657320c410f2622bf154778ac1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Destination&lt;/code&gt; is a directory, but &lt;code&gt;Source&lt;/code&gt; is not.</source>
          <target state="translated">&lt;code&gt;Destination&lt;/code&gt; 은 디렉토리이지만 &lt;code&gt;Source&lt;/code&gt; 는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="febfe7cb6a2fd7d8b2fcda9c73e4d1edd5451860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Destination&lt;/code&gt; is not an empty directory. On some platforms, also given when &lt;code&gt;Source&lt;/code&gt; and &lt;code&gt;Destination&lt;/code&gt; are not of the same type.</source>
          <target state="translated">&lt;code&gt;Destination&lt;/code&gt; 이 빈 디렉토리가 아닙니다. 일부 플랫폼에서는 &lt;code&gt;Source&lt;/code&gt; 및 &lt;code&gt;Destination&lt;/code&gt; 이 동일한 유형이 아닌 경우에도 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="83860f5834fc0ea553331bc440c4807419f20b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Detail level&lt;/code&gt; - This slider controls the resolution of the &lt;code&gt;Viewer&lt;/code&gt;. Only &lt;code&gt;Events&lt;/code&gt; with a detail level &lt;code&gt;smaller&lt;/code&gt; than the selected one (default=100=max) are displayed.</source>
          <target state="translated">&lt;code&gt;Detail level&lt;/code&gt; -이 슬라이더는 &lt;code&gt;Viewer&lt;/code&gt; 의 해상도를 제어합니다 . 선택된 세부 사항 &lt;code&gt;smaller&lt;/code&gt; 세부 사항 레벨 (기본값 = 100 = max)의 &lt;code&gt;Events&lt;/code&gt; 만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="dde9026b93f972019c3ce832fc0c9969422960e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dev&lt;/code&gt; is the I/O device to which the output is to be printed. See the &lt;code&gt;io(3)&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">&lt;code&gt;Dev&lt;/code&gt; 는 출력을 인쇄 할 I / O 장치입니다. STDLIB 의 &lt;code&gt;io(3)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="659f6646c7a238c4dbeaa55b57574a2e8cfb3717" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dict2&lt;/code&gt; is a dictionary of all keys and values in &lt;code&gt;Dict1&lt;/code&gt; for which &lt;code&gt;Pred(Key, Value)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Dict2&lt;/code&gt; 는 모든 키와 값의 사전입니다 &lt;code&gt;Dict1&lt;/code&gt; 하는 &lt;code&gt;Pred(Key, Value)&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="354ec4b8d34658742087bb8ce6f7b82df2990d30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dictionary&lt;/code&gt; is the process dictionary.</source>
          <target state="translated">&lt;code&gt;Dictionary&lt;/code&gt; 은 프로세스 사전입니다.</target>
        </trans-unit>
        <trans-unit id="58f4b6121fa8cb13fcd0a4d7ad24e9fbbedddb13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Digest&lt;/code&gt; is the digest calculated by &lt;code&gt;B&lt;/code&gt; for &lt;code&gt;A&lt;/code&gt;'s challenge.</source>
          <target state="translated">&lt;code&gt;Digest&lt;/code&gt; 는 &lt;code&gt;A&lt;/code&gt; 의 챌린지에 대해 &lt;code&gt;B&lt;/code&gt; 가 계산 한 다이제스트 입니다 .</target>
        </trans-unit>
        <trans-unit id="c2ccb7f655ff6b8c71b120ee98061be594e33612" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir = string()&lt;/code&gt;, finished running make in this directory.</source>
          <target state="translated">&lt;code&gt;Dir = string()&lt;/code&gt; ,이 디렉토리에서 make 실행이 완료되었습니다.</target>
        </trans-unit>
        <trans-unit id="0f65706d83188b13015888cb9faf62e18fcd2a62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir = string()&lt;/code&gt;, running make in this directory.</source>
          <target state="translated">&lt;code&gt;Dir = string()&lt;/code&gt; ,이 디렉토리에서 make를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="12d379223cff551b803107584b06702c243da3e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir&lt;/code&gt; can also be a directory in an archive, for example, &lt;code&gt;$OTPROOT/lib/&lt;/code&gt;&lt;code&gt;mnesia-4.4.7.ez/mnesia-4.4.7/ebin&lt;/code&gt;. For information about archive files, see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; 은 아카이브의 디렉토리 일 수도 있습니다 (예 : &lt;code&gt;$OTPROOT/lib/&lt;/code&gt; &lt;code&gt;mnesia-4.4.7.ez/mnesia-4.4.7/ebin&lt;/code&gt; ) . 아카이브 파일에 대한 자세한 내용은 &lt;code&gt;code(3)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc7a965fdbeb3c7566394019be4cfcff10da01dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir&lt;/code&gt; defaults to the current working directory.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; 의 기본값은 현재 작업 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="7d9d3891437abded49399f63d2343345932b7723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir&lt;/code&gt; has an improper type, such as tuple.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; 에는 튜플과 같은 부적절한 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e47ea4433263ee5b7285ec8d1c86075dd15ce6cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir&lt;/code&gt; is a &lt;code&gt;binary()&lt;/code&gt; with characters coded in ISO-latin-1 and the VM is operating with unicode filename encoding.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; 은 ISO-latin-1로 코딩 된 문자 가있는 &lt;code&gt;binary()&lt;/code&gt; 이며 VM은 유니 코드 파일 이름 인코딩으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2fc665f587c35d89733e973776ef7f45b84500c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir&lt;/code&gt; is a string. This argument sets the load path of the system to &lt;code&gt;[Dir]&lt;/code&gt;. The load path used to load modules is obtained from the initial load path, which is given in the script file, together with any path flags that were supplied in the command-line arguments. The command-line arguments modify the path as follows:</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; 은 문자열입니다. 이 인수는 시스템의로드 경로를 &lt;code&gt;[Dir]&lt;/code&gt; 로 설정 합니다. 모듈을로드하는 데 사용되는로드 경로는 명령 행 인수에 제공된 경로 플래그와 함께 스크립트 파일에 제공된 초기로드 경로에서 가져옵니다. 명령 행 인수는 다음과 같이 경로를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="8334542e3fbd2a8e9519663ffea9f4f7f5096104" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir&lt;/code&gt; is the path to the directory where to store the config file.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; 은 구성 파일을 저장할 디렉토리의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="afe705ed20a7ae651ecbe979137e0ce646c5340d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dir&lt;/code&gt; specifies which directory to use for the log files. &lt;code&gt;MaxBytes&lt;/code&gt; specifies the size of each individual file. &lt;code&gt;MaxFiles&lt;/code&gt; specifies how many files are used. &lt;code&gt;Pred&lt;/code&gt; is a predicate function used to filter the events. If no predicate function is specified, all events are logged.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; 은 로그 파일에 사용할 디렉토리를 지정합니다. &lt;code&gt;MaxBytes&lt;/code&gt; 는 각 개별 파일의 크기를 지정합니다. &lt;code&gt;MaxFiles&lt;/code&gt; 는 사용되는 파일 수를 지정합니다. &lt;code&gt;Pred&lt;/code&gt; 는 이벤트를 필터링하는 데 사용되는 술어 함수입니다. 술어 기능이 지정되지 않으면 모든 이벤트가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="df57330e4f342d774e787ca81f003281f52b40fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Display all actors.&lt;/code&gt; - Reset the settings for hidden and/or highlighted actors.</source>
          <target state="translated">&lt;code&gt;Display all actors.&lt;/code&gt; -숨겨진 액터 및 / 또는 하이라이트 액터에 대한 설정을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="62a021ad16a1ff9cc54c0d0e93db2543d4777d96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Display all actors&lt;/code&gt; - Press the 'a' button. Reset the settings for hidden and/or highlighted actors.</source>
          <target state="translated">&lt;code&gt;Display all actors&lt;/code&gt; - 'a'버튼을 누릅니다. 숨겨진 액터 및 / 또는 하이라이트 된 액터의 설정을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="492c7d3f4044dd337f2d1bff47460bddadadf760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Display application dependency graph&lt;/code&gt; - Launches an application force graph window. All included and derived applications and their dependencies will be shown in a graph.</source>
          <target state="translated">&lt;code&gt;Display application dependency graph&lt;/code&gt; -응용 프로그램 강제 그래프 창을 시작합니다. 포함 및 파생 된 모든 응용 프로그램 및 해당 종속성이 그래프로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4eab8b8821f3f9ab23d0c072dc2b0200f5718b3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Display details of an event&lt;/code&gt; - Left mouse click on the event label or the arrowand a new &lt;code&gt;Contents Viewer&lt;/code&gt; window will pop up, displaying the contents of an &lt;code&gt;Event&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Display details of an event&lt;/code&gt; - 왼쪽 마우스 이벤트 라벨을 클릭하거나 새로운 arrowand &lt;code&gt;Contents Viewer&lt;/code&gt; 의 내용을 표시하는 창이 팝업됩니다 &lt;code&gt;Event&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0573e8be8fdefab32dfc0d4a3ad822625eb671ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Display module dependency graph&lt;/code&gt; - Launch a module force graph window. All included and derived modules and their dependencies will be shown in a graph.</source>
          <target state="translated">&lt;code&gt;Display module dependency graph&lt;/code&gt; -모듈 힘 그래프 창을 시작합니다. 포함 및 파생 된 모든 모듈과 해당 종속성이 그래프로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="fa9b595a759830abdae278d92f580e16f788625e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DistController&lt;/code&gt; is either the process or port identifier of the distribution controller for the connection. The distribution controller should be created by the acceptor processes when a new connection is accepted. Its job is to dispatch traffic on the connection.</source>
          <target state="translated">&lt;code&gt;DistController&lt;/code&gt; 는 연결 분배 제어기의 프로세스 또는 포트 ID입니다. 분배 제어기는 새 연결이 승인 될 때 ​​채택 자 프로세스에 의해 작성되어야합니다. 그 작업은 연결에서 트래픽을 발송하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4b2ac0218aacf3e70769ae6ebed4145795a6ff3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dn&lt;/code&gt;. The user to modify. Should be &quot;&quot; if the modify request is for the user of the LDAP session.</source>
          <target state="translated">&lt;code&gt;Dn&lt;/code&gt; . 수정할 사용자입니다. LDAP 세션 사용자에 대한 수정 요청이있는 경우 &quot;&quot;여야합니다.</target>
        </trans-unit>
        <trans-unit id="2a2d32c1c96634c1248d7e9e988cbec99f68d166" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Domain&lt;/code&gt; is one of &lt;code&gt;transportDomainUdpIpv4&lt;/code&gt; or &lt;code&gt;transportDomainUdpIpv6&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; 은 &lt;code&gt;transportDomainUdpIpv4&lt;/code&gt; 또는 &lt;code&gt;transportDomainUdpIpv6&lt;/code&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="de2dc4d2f3306c93c59bc26878a8ef187f275047" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Domain&lt;/code&gt; is one of the atoms: &lt;code&gt;transportDomainUdpIpv4&lt;/code&gt; | &lt;code&gt;transportDomainUdpIpv6&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; 은 원자 중 하나입니다. &lt;code&gt;transportDomainUdpIpv4&lt;/code&gt; | &lt;code&gt;transportDomainUdpIpv6&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ceca73b760dba20348c55f953e495f4920e94d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Domain&lt;/code&gt; is the source transport domain.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; 은 소스 전송 도메인입니다.</target>
        </trans-unit>
        <trans-unit id="c27e5578f657af4816ab9a43d1006d6da3b6ac73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Domain&lt;/code&gt; is the transport domain, either &lt;code&gt;transportDomainUdpIpv4&lt;/code&gt; or &lt;code&gt;transportDomainUdpIpv6&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; 은 &lt;code&gt;transportDomainUdpIpv4&lt;/code&gt; 또는 &lt;code&gt;transportDomainUdpIpv6&lt;/code&gt; 중 하나 인 전송 도메인 입니다.</target>
        </trans-unit>
        <trans-unit id="edcdfb2d9497b4f2a51a1e8c2dd21889f1190731" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Down&lt;/code&gt; - Scrolls a few &lt;code&gt;Events&lt;/code&gt; forward.</source>
          <target state="translated">&lt;code&gt;Down&lt;/code&gt; -일부 &lt;code&gt;Events&lt;/code&gt; 앞으로 스크롤합니다 .</target>
        </trans-unit>
        <trans-unit id="ff857dfbb90bfebd022c2947ab2ee681003fc2eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Drive&lt;/code&gt; is to be of the form &quot;&lt;code&gt;Letter&lt;/code&gt;&lt;code&gt;:&lt;/code&gt;&quot;, for example, &quot;c:&quot;.</source>
          <target state="translated">&lt;code&gt;Drive&lt;/code&gt; 는 &quot; &lt;code&gt;Letter&lt;/code&gt; &lt;code&gt;:&lt;/code&gt; &quot; 형식이어야 합니다 (예 : &quot;c :&quot;).</target>
        </trans-unit>
        <trans-unit id="de95faf9f3fd4ab9f738beb92e440bf83dfb6ad5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Driver&lt;/code&gt; is the name of the driver as an atom.</source>
          <target state="translated">&lt;code&gt;Driver&lt;/code&gt; 는 원자로 드라이버의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7dae0eec78ae7d4aaa2f9afb42c436de2b8f7db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Dumpfile&lt;/code&gt; is used to call &lt;code&gt;file:open/2&lt;/code&gt;, and &lt;code&gt;Filename&lt;/code&gt; is used to call &lt;code&gt;dbg:trace_port(file, Filename)&lt;/code&gt;. Please see the appropriate documentation.</source>
          <target state="translated">&lt;code&gt;Dumpfile&lt;/code&gt; 호출하는 데 사용됩니다 &lt;code&gt;file:open/2&lt;/code&gt; 및 &lt;code&gt;Filename&lt;/code&gt; 호출하는 데 사용됩니다 &lt;code&gt;dbg:trace_port(file, Filename)&lt;/code&gt; . 적절한 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3c23dc78f16ab98e255b3b276f62acb9b940d959" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;E&lt;/code&gt; is equal to &lt;code&gt;LC + XC&lt;/code&gt;. Note that &lt;code&gt;LC&lt;/code&gt; and &lt;code&gt;XC&lt;/code&gt; may have elements in common, namely if some function is locally and externally used from one and the same function.</source>
          <target state="translated">&lt;code&gt;E&lt;/code&gt; 는 &lt;code&gt;LC + XC&lt;/code&gt; . 참고 &lt;code&gt;LC&lt;/code&gt; 및 &lt;code&gt;XC&lt;/code&gt; 는 어떤 기능은 국부적 인 외부 하나와 같은 기능에서 사용되는 경우, 즉, 공통의 요소를 가질 수있다.</target>
        </trans-unit>
        <trans-unit id="f6d09607ffb29d94ae2b6a4674184288b56a692a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_ATOM_PTR(atom)&lt;/code&gt; and &lt;code&gt;ERL_ATOM_PTR_UTF8(atom)&lt;/code&gt; can be used to retrieve the atom name (as a &lt;code&gt;NULL&lt;/code&gt;-terminated string). &lt;code&gt;ERL_ATOM_SIZE(atom)&lt;/code&gt; and &lt;code&gt;ERL_ATOM_SIZE_UTF8(atom)&lt;/code&gt; return the length of the atom name.</source>
          <target state="translated">&lt;code&gt;ERL_ATOM_PTR(atom)&lt;/code&gt; 및 &lt;code&gt;ERL_ATOM_PTR_UTF8(atom)&lt;/code&gt; 을 사용하여 아톰 이름 ( &lt;code&gt;NULL&lt;/code&gt; 로 끝나는 문자열) 을 검색 할 수 있습니다 . &lt;code&gt;ERL_ATOM_SIZE(atom)&lt;/code&gt; 및 &lt;code&gt;ERL_ATOM_SIZE_UTF8(atom)&lt;/code&gt; 은 원자 이름의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="290077a33784913931a397b74e3ab629b90d1306" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_BIN_PTR(bin)&lt;/code&gt; retrieves a pointer to the binary data. &lt;code&gt;ERL_BIN_SIZE(bin)&lt;/code&gt; retrieves the size.</source>
          <target state="translated">&lt;code&gt;ERL_BIN_PTR(bin)&lt;/code&gt; 은 이진 데이터에 대한 포인터를 검색합니다. &lt;code&gt;ERL_BIN_SIZE(bin)&lt;/code&gt; 은 크기를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="a349e82ce73dd964924193527ea6e628249d3930" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_CONS_HEAD(list)&lt;/code&gt; and &lt;code&gt;ERL_CONS_TAIL(list)&lt;/code&gt; can be used to retrieve the head and tail components from the list. &lt;code&gt;erl_hd(list)&lt;/code&gt; and &lt;code&gt;erl_tl(list)&lt;/code&gt; do the same thing, but check that the argument really is a list.</source>
          <target state="translated">&lt;code&gt;ERL_CONS_HEAD(list)&lt;/code&gt; 및 &lt;code&gt;ERL_CONS_TAIL(list)&lt;/code&gt; 을 사용하여 목록에서 헤드 및 테일 구성 요소를 검색 할 수 있습니다. &lt;code&gt;erl_hd(list)&lt;/code&gt; 와 &lt;code&gt;erl_tl(list)&lt;/code&gt; 는 동일한 작업을 수행하지만 인수가 실제로 목록인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="cc31ac63663bd903a5eceda0d3f9c2690373e290" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_DRV_EXTENDED_MAJOR_VERSION&lt;/code&gt;, which is incremented when driver incompatible changes are made to the Erlang runtime system. Normally it suffices to recompile drivers when &lt;code&gt;ERL_DRV_EXTENDED_MAJOR_VERSION&lt;/code&gt; has changed, but it can, under rare circumstances, mean that drivers must be slightly modified. If so, this will of course be documented.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_EXTENDED_MAJOR_VERSION&lt;/code&gt; . Erlang 런타임 시스템에서 드라이버와 호환되지 않는 변경이있을 때 증가합니다. 일반적으로 &lt;code&gt;ERL_DRV_EXTENDED_MAJOR_VERSION&lt;/code&gt; 이 변경 되면 드라이버를 다시 컴파일하면 충분 하지만 드문 경우이지만 드라이버를 약간 수정해야 할 수도 있습니다. 그렇다면, 이것은 문서화 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="613c1efe9b5cb265be7b23656100f1ab90fe4070" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_DRV_EXTENDED_MINOR_VERSION&lt;/code&gt;, which is incremented when new features are added. The runtime system uses the minor version of the driver to determine what features to use.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_EXTENDED_MINOR_VERSION&lt;/code&gt; 은 새로운 기능이 추가 될 때 증가합니다. 런타임 시스템은 부 버전의 드라이버를 사용하여 사용할 기능을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="817d60fd388256e70fd99967974264662901fe4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_DRV_STRING&lt;/code&gt; constructs a string, and ends it. (So it is the same as &lt;code&gt;ERL_DRV_NIL&lt;/code&gt; followed by &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;ERL_DRV_STRING&lt;/code&gt; 은 문자열을 구성하고 종료합니다. (따라서 &lt;code&gt;ERL_DRV_NIL&lt;/code&gt; 다음에 &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; 와 같습니다 .)</target>
        </trans-unit>
        <trans-unit id="d855b7686619234fd716645058b7de72d2d78311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_DRV_USE&lt;/code&gt; specifies if we are using the event object or if we want to close it. On an emulator with SMP support, it is not safe to clear all events and then close the event object after &lt;code&gt;driver_select&lt;/code&gt; has returned. Another thread can still be using the event object internally. To safely close an event object, call &lt;code&gt;driver_select&lt;/code&gt; with &lt;code&gt;ERL_DRV_USE&lt;/code&gt; and &lt;code&gt;on==0&lt;/code&gt;, which clears all events and then either calls &lt;code&gt;&lt;a href=&quot;driver_entry#stop_select&quot;&gt;stop_select&lt;/a&gt;&lt;/code&gt; or schedules it to be called when it is safe to close the event object. &lt;code&gt;ERL_DRV_USE&lt;/code&gt; is to be set together with the first event for an event object. It is harmless to set &lt;code&gt;ERL_DRV_USE&lt;/code&gt; even if it already has been done. Clearing all events but keeping &lt;code&gt;ERL_DRV_USE&lt;/code&gt; set indicates that we are using the event object and probably will set events for it again.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_USE&lt;/code&gt; 는 이벤트 객체를 사용 중인지 또는 닫을지를 지정합니다. SMP를 지원하는 에뮬레이터에서는 &lt;code&gt;driver_select&lt;/code&gt; 가 반환 된 후 모든 이벤트를 지우고 이벤트 객체를 닫는 것이 안전하지 않습니다 . 다른 스레드는 여전히 내부에서 이벤트 객체를 사용할 수 있습니다. 안전하게 가까운 이벤트 객체에, 전화 &lt;code&gt;driver_select&lt;/code&gt; 와 &lt;code&gt;ERL_DRV_USE&lt;/code&gt; 및 &lt;code&gt;on==0&lt;/code&gt; 하나 모든 이벤트를 지우고, 호출 &lt;code&gt;&lt;a href=&quot;driver_entry#stop_select&quot;&gt;stop_select&lt;/a&gt;&lt;/code&gt; 는 이벤트 객체를 종료하는 것이 안전 할 때 호출 할 또는 일정. &lt;code&gt;ERL_DRV_USE&lt;/code&gt; 는 이벤트 오브젝트의 첫 번째 이벤트와 함께 설정됩니다. &lt;code&gt;ERL_DRV_USE&lt;/code&gt; 를 설정하는 것은 무해합니다이미 완료된 경우에도 마찬가지입니다. 모든 이벤트를 지우고 &lt;code&gt;ERL_DRV_USE&lt;/code&gt; 설정을 유지 하면 이벤트 객체를 사용하고 있음을 나타내며 다시 이벤트를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7479174e9dc6f4484a69e9a30c3c9d2c534c15a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_DRV_USE&lt;/code&gt; was added in Erlang/OTP R13. Old drivers still work as before, but it is recommended to update them to use &lt;code&gt;ERL_DRV_USE&lt;/code&gt; and &lt;code&gt;stop_select&lt;/code&gt; to ensure that event objects are closed in a safe way.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_USE&lt;/code&gt; 가 Erlang / OTP R13에 추가되었습니다. 이전 드라이버는 여전히 이전과 같이 작동하지만 &lt;code&gt;ERL_DRV_USE&lt;/code&gt; 및 &lt;code&gt;stop_select&lt;/code&gt; 를 사용하여 이벤트 객체가 안전하게 닫히 도록 업데이트하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a7243336c4d66a1fbea612ecff5993866fda1b6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_FLAGS&lt;/code&gt; should not include the node name.</source>
          <target state="translated">&lt;code&gt;ERL_FLAGS&lt;/code&gt; 는 노드 이름을 포함하지 않아야 합니다.</target>
        </trans-unit>
        <trans-unit id="c8c9800b0dbe01d1557e8b98fcf036bb41dceb97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_FLOAT_VALUE(t)&lt;/code&gt; can be used to retrieve the value from an Erlang float.</source>
          <target state="translated">&lt;code&gt;ERL_FLOAT_VALUE(t)&lt;/code&gt; 를 사용하여 Erlang float에서 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85bebbf29042824a3d6486ae41f6d43345d1327d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_INT_UVALUE(t)&lt;/code&gt; can be used to retrieve the value from an Erlang unsigned integer.</source>
          <target state="translated">&lt;code&gt;ERL_INT_UVALUE(t)&lt;/code&gt; 를 사용하여 Erlang 부호없는 정수에서 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecfe962f536555a95b6d5a8771c50fb0b44854bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_INT_VALUE(t)&lt;/code&gt; can be used to retrieve the value from an Erlang integer.</source>
          <target state="translated">&lt;code&gt;ERL_INT_VALUE(t)&lt;/code&gt; 를 사용하여 Erlang 정수에서 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7607552c42fe6fafcd4a1e63187755b4d8d08a4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; can be used to cancel previously selected events. It must be used in a bitwise OR combination with &lt;code&gt;ERL_NIF_SELECT_READ&lt;/code&gt; and/or &lt;code&gt;ERL_NIF_SELECT_WRITE&lt;/code&gt; to indicate which type of event to cancel. Arguments &lt;code&gt;pid&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; are ignored when &lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; is specified. The return value will tell if the event was actualy cancelled or if a notification may already have been sent.</source>
          <target state="translated">&lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; 을 사용하여 이전에 선택한 이벤트를 취소 할 수 있습니다. 취소 할 이벤트 유형을 나타내 &lt;code&gt;ERL_NIF_SELECT_WRITE&lt;/code&gt; &lt;code&gt;ERL_NIF_SELECT_READ&lt;/code&gt; 및 / 또는 ERL_NIF_SELECT_WRITE 와 함께 비트 OR 조합으로 사용해야 합니다. &lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; 이 지정 되면 인수 &lt;code&gt;pid&lt;/code&gt; 및 &lt;code&gt;ref&lt;/code&gt; 가 무시됩니다 . 반환 값은 이벤트가 실제로 취소되었는지 또는 알림이 이미 전송되었는지 여부를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="3598fc1a2045b74f879f7a24e5eff13a02a73fa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_NIF_TERM enif_make_list1(ErlNifEnv* env, ERL_NIF_TERM e1)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list2(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list3(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list4(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list5(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list6(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list7(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list8(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_list9(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ERL_NIF_TERM enif_make_list1(ErlNifEnv* env, ERL_NIF_TERM e1)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list2(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list3(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list4(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list5(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list6(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list7(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list8(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_list9(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52982eaf6477879cf6a12c60f396d945e62e2d50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_NIF_TERM enif_make_tuple1(ErlNifEnv* env, ERL_NIF_TERM e1)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple2(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple3(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple4(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple5(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple6(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple7(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple8(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8)&lt;/code&gt;&lt;code&gt;ERL_NIF_TERM enif_make_tuple9(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ERL_NIF_TERM enif_make_tuple1(ErlNifEnv* env, ERL_NIF_TERM e1)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple2(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple3(ErlNifEnv* env, ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple4(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple5(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple6(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple7(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple8(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8)&lt;/code&gt; &lt;code&gt;ERL_NIF_TERM enif_make_tuple9(ErlNifEnv* env, ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc42cf3a3588c7b9bce4b6f210b06ba642e9d7bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_NIF_UNIQUE_POSITIVE&lt;/code&gt; and &lt;code&gt;ERL_NIF_UNIQUE_MONOTONIC&lt;/code&gt; can be passed as the second argument to change the properties of the integer returned. They can be combined by OR:ing the two values together.</source>
          <target state="translated">&lt;code&gt;ERL_NIF_UNIQUE_POSITIVE&lt;/code&gt; 리턴 된 정수의 특성을 변경하기 위해 두 번째 인수로 ERL_NIF_UNIQUE_POSITIVE 및 &lt;code&gt;ERL_NIF_UNIQUE_MONOTONIC&lt;/code&gt; 를 전달할 수 있습니다. 두 값을 함께 OR로 연결하여 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a1eca97492a396a7e2da7bc2608005663d5b982" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_PID&lt;/code&gt; (Erlang process identifier)</source>
          <target state="translated">&lt;code&gt;ERL_PID&lt;/code&gt; (Erlang 프로세스 식별자)</target>
        </trans-unit>
        <trans-unit id="9efe052c8d0a05e178be268daac3a4af07608aca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_PID_NODE(pid)&lt;/code&gt;, &lt;code&gt;ERL_PID_NUMBER(pid)&lt;/code&gt;, &lt;code&gt;ERL_PID_SERIAL(pid)&lt;/code&gt;, and &lt;code&gt;ERL_PID_CREATION(pid)&lt;/code&gt; can be used to retrieve the four values used to create the pid.</source>
          <target state="translated">&lt;code&gt;ERL_PID_NODE(pid)&lt;/code&gt; , &lt;code&gt;ERL_PID_NUMBER(pid)&lt;/code&gt; , &lt;code&gt;ERL_PID_SERIAL(pid)&lt;/code&gt; 및 &lt;code&gt;ERL_PID_CREATION(pid)&lt;/code&gt; 을 사용하여 pid를 작성하는 데 사용되는 4 개의 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33fabd9f90cf7d7936dc42038e48cbd12c715d0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_PORT_NODE(port)&lt;/code&gt;, &lt;code&gt;ERL_PORT_NUMBER(port)&lt;/code&gt;, and &lt;code&gt;ERL_PORT_CREATION&lt;/code&gt; can be used to retrieve the three values used to create the port.</source>
          <target state="translated">&lt;code&gt;ERL_PORT_NODE(port)&lt;/code&gt; , &lt;code&gt;ERL_PORT_NUMBER(port)&lt;/code&gt; 및 &lt;code&gt;ERL_PORT_CREATION&lt;/code&gt; 을 사용하여 포트를 작성하는 데 사용되는 세 가지 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f860892bc472587540df5d1a5619b9d5035656d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_REF&lt;/code&gt; (Erlang reference)</source>
          <target state="translated">&lt;code&gt;ERL_REF&lt;/code&gt; (Erlang 참조)</target>
        </trans-unit>
        <trans-unit id="bce1abdbe38a7ca47f99eb783658cca353b892b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_REF_NODE(ref)&lt;/code&gt;, &lt;code&gt;ERL_REF_NUMBER(ref)&lt;/code&gt;, and &lt;code&gt;ERL_REF_CREATION(ref)&lt;/code&gt; can be used to retrieve the three values used to create the reference.</source>
          <target state="translated">&lt;code&gt;ERL_REF_NODE(ref)&lt;/code&gt; , &lt;code&gt;ERL_REF_NUMBER(ref)&lt;/code&gt; 및 &lt;code&gt;ERL_REF_CREATION(ref)&lt;/code&gt; 을 사용하여 참조를 작성하는 데 사용되는 세 개의 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70121c68b4738b58b7db2b0f8c4d9e041174288b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_REF_NODE(ref)&lt;/code&gt;, &lt;code&gt;ERL_REF_NUMBERS(ref)&lt;/code&gt;, &lt;code&gt;ERL_REF_LEN(ref)&lt;/code&gt;, and &lt;code&gt;ERL_REF_CREATION(ref)&lt;/code&gt; can be used to retrieve the values used to create the reference.</source>
          <target state="translated">&lt;code&gt;ERL_REF_NODE(ref)&lt;/code&gt; , &lt;code&gt;ERL_REF_NUMBERS(ref)&lt;/code&gt; , &lt;code&gt;ERL_REF_LEN(ref)&lt;/code&gt; 및 &lt;code&gt;ERL_REF_CREATION(ref)&lt;/code&gt; 을 사용하여 참조를 작성하는 데 사용 된 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90fdcfb514f16fa0507d5c4a4fffb76d9c00f0d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_SMALL_BIG&lt;/code&gt; (bignum)</source>
          <target state="translated">&lt;code&gt;ERL_SMALL_BIG&lt;/code&gt; ( 큰수 )</target>
        </trans-unit>
        <trans-unit id="d02ed50a706165c7924c78370fd1236205885e59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_SMALL_BIG&lt;/code&gt; and &lt;code&gt;ERL_U_SMALL_BIG&lt;/code&gt; are for creating Erlang &lt;code&gt;bignums&lt;/code&gt;, which can contain integers of any size. The size of an integer in Erlang is machine-dependent, but any integer &amp;gt; 2^28 requires a bignum.</source>
          <target state="translated">&lt;code&gt;ERL_SMALL_BIG&lt;/code&gt; 및 &lt;code&gt;ERL_U_SMALL_BIG&lt;/code&gt; 는 모든 크기의 정수를 포함 할 수있는 Erlang &lt;code&gt;bignums&lt;/code&gt; 를 작성하기위한 것 입니다. Erlang의 정수 크기는 기계에 따라 다르지만 2 ^ 28보다 큰 정수에는 큰 숫자가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="88bfc5c63913842f9b860766789e806f573523e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_U_INTEGER&lt;/code&gt; (unsigned integer)</source>
          <target state="translated">&lt;code&gt;ERL_U_INTEGER&lt;/code&gt; (부호없는 정수)</target>
        </trans-unit>
        <trans-unit id="fa6c4b1f5f1561ae52fe72c16c0f516b1556b138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERL_U_SMALL_BIG&lt;/code&gt; (bignum)</source>
          <target state="translated">&lt;code&gt;ERL_U_SMALL_BIG&lt;/code&gt; ( 큰수 )</target>
        </trans-unit>
        <trans-unit id="881c2f034d761dc5bc4b85cd955213ae438d6364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ETERM *erl_decode(bufp)&lt;/code&gt;&lt;code&gt;ETERM *erl_decode_buf(bufpp)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ETERM *erl_decode(bufp)&lt;/code&gt; &lt;code&gt;ETERM *erl_decode_buf(bufpp)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd04b1a69f289d163d1452b1b1e03f44941f5c0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ETERM *erl_rpc(fd, mod, fun, args)&lt;/code&gt;&lt;code&gt;int erl_rpc_from(fd, timeout, emsg)&lt;/code&gt;&lt;code&gt;int erl_rpc_to(fd, mod, fun, args)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ETERM *erl_rpc(fd, mod, fun, args)&lt;/code&gt; &lt;code&gt;int erl_rpc_from(fd, timeout, emsg)&lt;/code&gt; &lt;code&gt;int erl_rpc_to(fd, mod, fun, args)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6092b190b2ba22ffcd8fcbb77c75eea42725618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Element&lt;/code&gt; is any of:</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; 는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="a09b75c4dd9a98c712c66c3008d92328ac9f8c6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Emakefile&lt;/code&gt; is read from top to bottom. If a module matches more than one entry, the first match is valid. For example, the following &lt;code&gt;Emakefile&lt;/code&gt; means that &lt;code&gt;file1&lt;/code&gt; shall be compiled with the options &lt;code&gt;[debug_info,{i,&quot;../foo&quot;}]&lt;/code&gt;, while all other files in the current directory shall be compiled with only the &lt;code&gt;debug_info&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;Emakefile&lt;/code&gt; 은 위에서 아래로 읽습니다. 모듈이 둘 이상의 항목과 일치하면 첫 번째 일치가 유효합니다. 예를 들어, 다음 &lt;code&gt;Emakefile&lt;/code&gt; 은 &lt;code&gt;file1&lt;/code&gt; 이 &lt;code&gt;[debug_info,{i,&quot;../foo&quot;}]&lt;/code&gt; 옵션으로 컴파일되고 현재 디렉토리의 다른 모든 파일은 &lt;code&gt;debug_info&lt;/code&gt; 플래그 만 사용하여 컴파일 됨을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="52878d671a1312dfefbfcf6e09a52127201157f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Emp&lt;/code&gt; is an employee record.</source>
          <target state="translated">&lt;code&gt;Emp&lt;/code&gt; 는 직원 레코드입니다.</target>
        </trans-unit>
        <trans-unit id="e7bead8350022baa1c74ec378c14432c0a9c5713" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Encoding&lt;/code&gt; and &lt;code&gt;Prompt&lt;/code&gt; as for &lt;code&gt;get_until&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; &lt;code&gt;get_until&lt;/code&gt; 과 같은 인코딩 및 &lt;code&gt;Prompt&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8e0754b763cef79ea7263c22bf820a9efbc6bb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Encoding&lt;/code&gt; denotes how data is to be sent back to the client and what data is sent to the function denoted by &lt;code&gt;Module&lt;/code&gt;/&lt;code&gt;Function&lt;/code&gt;/&lt;code&gt;ExtraArgs&lt;/code&gt;. If the function supplied returns data as a list, the data is converted to this encoding. If the function supplied returns data in some other format, no conversion can be done, and it is up to the client-supplied function to return data in a proper way.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 은 데이터가 클라이언트로 다시 전송되는 방식과 &lt;code&gt;Module&lt;/code&gt; / &lt;code&gt;Function&lt;/code&gt; / &lt;code&gt;ExtraArgs&lt;/code&gt; 로 표시되는 함수로 전송되는 데이터를 나타 냅니다 . 제공된 함수가 데이터를 목록으로 리턴하면 데이터가이 인코딩으로 변환됩니다. 제공된 함수가 다른 형식으로 데이터를 리턴하면 변환을 수행 할 수 없으며 올바른 방식으로 데이터를 리턴하는 것은 클라이언트 제공 함수에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="1170641f41761a2799a12a95edaa53231325fec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Encoding&lt;/code&gt; is &lt;code&gt;unicode&lt;/code&gt; or &lt;code&gt;latin1&lt;/code&gt;, meaning that the characters are (in case of binaries) encoded as UTF-8 or ISO Latin-1 (pure bytes). A well-behaved I/O server is also to return an error indication if list elements contain integers &amp;gt; 255 when &lt;code&gt;Encoding&lt;/code&gt; is set to &lt;code&gt;latin1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 은 &lt;code&gt;unicode&lt;/code&gt; 또는 &lt;code&gt;latin1&lt;/code&gt; 이므로 문자가 UTF-8 또는 ISO Latin-1 (순수 바이트)로 인코딩 (바이너리의 경우)됨을 의미합니다. &lt;code&gt;Encoding&lt;/code&gt; 이 &lt;code&gt;latin1&lt;/code&gt; 로 설정된 경우 목록 요소에 정수가 255보다 큰 경우 올바르게 작동하는 I / O 서버는 오류 표시를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6a225ac248d4b8ea8b511bdd390c52b1133d8e47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EndTime = {date(),time()}&lt;/code&gt;, date and time the test run finished.</source>
          <target state="translated">&lt;code&gt;EndTime = {date(),time()}&lt;/code&gt; , 테스트 실행이 완료된 날짜 및 시간</target>
        </trans-unit>
        <trans-unit id="20242c58c5a7a44b31282e9f14f06bd3fcba3332" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EngineID&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;EngineID&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="0b7feeb015edb69e52fef14042c0b0617b770bd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EngineID&lt;/code&gt; is the engine-id of the agent (string).</source>
          <target state="translated">&lt;code&gt;EngineID&lt;/code&gt; 는 에이전트의 엔진 ID입니다 (문자열).</target>
        </trans-unit>
        <trans-unit id="7546575c596de1c27024b1235acc1a3e5bdf5520" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EngineId&lt;/code&gt; is a string or the atom &lt;code&gt;discovery&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EngineId&lt;/code&gt; 는 문자열 또는 원자 &lt;code&gt;discovery&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5057fd04ebd30bf531d592d00406e9fb9e8c739e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Env&lt;/code&gt; (a list) is the environment or free variables for the fun. For external funs, the returned list is always empty.</source>
          <target state="translated">&lt;code&gt;Env&lt;/code&gt; (목록)는 재미를위한 환경 또는 자유 변수입니다. 외부 재미의 경우, 리턴 된 목록은 항상 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f38a1f56066c1b2c4f09df9cbe53f2020200eda3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Env&lt;/code&gt; environment data of the request see description above.</source>
          <target state="translated">&lt;code&gt;Env&lt;/code&gt; 요구의 환경 데이터는 상기 설명을 참조.</target>
        </trans-unit>
        <trans-unit id="39fa1e45bb7ba9f3ea571712ab4f7ace0b7ecf0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Env&lt;/code&gt; is to be a list of tuples &lt;code&gt;{Name, Val}&lt;/code&gt;, where &lt;code&gt;Name&lt;/code&gt; is the name of an environment variable, and &lt;code&gt;Val&lt;/code&gt; is the value it is to have in the spawned port process. Both &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Val&lt;/code&gt; must be strings. The one exception is &lt;code&gt;Val&lt;/code&gt; being the atom &lt;code&gt;false&lt;/code&gt; (in analogy with &lt;code&gt;os:getenv/1&lt;/code&gt;, which removes the environment variable.</source>
          <target state="translated">&lt;code&gt;Env&lt;/code&gt; 는 &lt;code&gt;{Name, Val}&lt;/code&gt; 튜플의 목록이어야합니다 . 여기서 &lt;code&gt;Name&lt;/code&gt; 은 환경 변수의 이름이고 &lt;code&gt;Val&lt;/code&gt; 은 생성 된 포트 프로세스에있는 값입니다. 모두 &lt;code&gt;Name&lt;/code&gt; 과 &lt;code&gt;Val&lt;/code&gt; 문자열이어야합니다. 한 가지 예외는 &lt;code&gt;Val&lt;/code&gt; 이 원자 &lt;code&gt;false&lt;/code&gt; 인 것입니다 ( &lt;code&gt;os:getenv/1&lt;/code&gt; 과 유사하게 환경 변수를 제거함).</target>
        </trans-unit>
        <trans-unit id="256b7bdee92b0063d9dbcb456f9cb2de1b55b27b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Eplus | ~p : Mod&lt;/code&gt;. The &lt;code&gt;|&lt;/code&gt; operator converts the second operand to the type of the first operand. In this case the module is converted to all functions of the module. It is necessary to assign a type to the module (&lt;code&gt;:&amp;nbsp;Mod&lt;/code&gt;), otherwise modules like &lt;code&gt;kernel&lt;/code&gt; would be converted to all functions of the application with the same name; the most general constant is used in cases of ambiguity.</source>
          <target state="translated">&lt;code&gt;Eplus | ~p : Mod&lt;/code&gt; . &lt;code&gt;|&lt;/code&gt; 연산자는 두 번째 피연산자를 첫 번째 피연산자의 유형으로 변환합니다. 이 경우 모듈은 모듈의 모든 기능으로 변환됩니다. 모듈 ( &lt;code&gt;:&amp;nbsp;Mod&lt;/code&gt; )에 유형을 할당해야합니다 . 그렇지 않으면 &lt;code&gt;kernel&lt;/code&gt; 과 같은 모듈 이 동일한 이름을 가진 응용 프로그램의 모든 기능으로 변환됩니다. 가장 일반적인 상수는 모호한 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3196f174e2f55047b41a89e355524ca495a0ed21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErlIOVec&lt;/code&gt; contains both a &lt;code&gt;SysIOVec&lt;/code&gt;, suitable for &lt;code&gt;writev&lt;/code&gt;, and one or more binaries. If these binaries are to be retained when the driver returns from &lt;code&gt;outputv&lt;/code&gt;, they can be queued (using, for example, &lt;code&gt;&lt;a href=&quot;erl_driver#driver_enq_bin&quot;&gt; erl_driver:driver_enq_bin&lt;/a&gt;&lt;/code&gt;) or, if they are kept in a static or global variable, the reference counter can be incremented.</source>
          <target state="translated">&lt;code&gt;ErlIOVec&lt;/code&gt; 에는 &lt;code&gt;writev&lt;/code&gt; 에 적합한 &lt;code&gt;SysIOVec&lt;/code&gt; 와 하나 이상의 바이너리 가 모두 포함되어 있습니다 . 드라이버가 &lt;code&gt;outputv&lt;/code&gt; 에서 반환 할 때 이러한 바이너리를 유지하려면 큐에 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_enq_bin&quot;&gt; erl_driver:driver_enq_bin&lt;/a&gt;&lt;/code&gt; 예 : erl_driver : driver_enq_bin 사용 ) 정적 또는 전역 변수에 유지되는 경우 참조 카운터를 증가시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6f5445adc6d1849561c3afcaf23b1069e4fdddc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErlIOVec&lt;/code&gt; contains both a &lt;code&gt;SysIOVec&lt;/code&gt;, suitable for &lt;code&gt;writev&lt;/code&gt;, and one or more binaries. If these binaries are to be retained when the driver returns from &lt;code&gt;outputv&lt;/code&gt;, they can be queued (using, for example, &lt;code&gt;&lt;a href=&quot;erl_driver#driver_enq_bin&quot;&gt;erl_driver:driver_enq_bin&lt;/a&gt;&lt;/code&gt;) or, if they are kept in a static or global variable, the reference counter can be incremented.</source>
          <target state="translated">&lt;code&gt;ErlIOVec&lt;/code&gt; 에는 &lt;code&gt;writev&lt;/code&gt; 에 적합한 &lt;code&gt;SysIOVec&lt;/code&gt; 과 하나 이상의 이진이 모두 포함되어 있습니다 . 드라이버가 &lt;code&gt;outputv&lt;/code&gt; 에서 리턴 할 때이 바이너리를 보유 해야하는 경우 큐를 대기 (예 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_enq_bin&quot;&gt;erl_driver:driver_enq_bin&lt;/a&gt;&lt;/code&gt; )하거나 정적 또는 글로벌 변수로 유지하면 참조 카운터를 늘릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0fda3c58edbbb94096b7bb1d0b60dd27d22b8a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErlNifBinary&lt;/code&gt; contains transient information about an inspected binary term. &lt;code&gt;data&lt;/code&gt; is a pointer to a buffer of &lt;code&gt;size&lt;/code&gt; bytes with the raw content of the binary.</source>
          <target state="translated">&lt;code&gt;ErlNifBinary&lt;/code&gt; 에는 검사 된 이진 용어에 대한 일시적인 정보가 포함되어 있습니다. &lt;code&gt;data&lt;/code&gt; 는 이진의 원시 내용을 가진 바이트 &lt;code&gt;size&lt;/code&gt; 의 버퍼에 대한 포인터 입니다.</target>
        </trans-unit>
        <trans-unit id="68dd395d767083589ea166bb0590efc7ba8c7cc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErlNifEnv&lt;/code&gt; represents an environment that can host Erlang terms. All terms in an environment are valid as long as the environment is valid. &lt;code&gt;ErlNifEnv&lt;/code&gt; is an opaque type; pointers to it can only be passed on to API functions. Three types of environments exist:</source>
          <target state="translated">&lt;code&gt;ErlNifEnv&lt;/code&gt; 는 Erlang 용어를 호스팅 할 수있는 환경을 나타냅니다. 환경의 모든 용어는 환경이 유효한 한 유효합니다. &lt;code&gt;ErlNifEnv&lt;/code&gt; 는 불투명 한 유형입니다. 그것에 대한 포인터는 API 함수에만 전달할 수 있습니다. 세 가지 유형의 환경이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a6108af16955f65cb4d946c6ef129edffd89b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErlNifEnv&lt;/code&gt; represents an environment that can host Erlang terms. All terms in an environment are valid as long as the environment is valid. &lt;code&gt;ErlNifEnv&lt;/code&gt; is an opaque type; pointers to it can only be passed on to API functions. Two types of environments exist:</source>
          <target state="translated">&lt;code&gt;ErlNifEnv&lt;/code&gt; 는 Erlang 용어를 호스팅 할 수있는 환경을 나타냅니다. 환경의 모든 용어는 환경이 유효한 한 유효합니다. &lt;code&gt;ErlNifEnv&lt;/code&gt; 는 불투명 한 유형입니다. 포인터는 API 함수에만 전달 될 수 있습니다. 두 가지 유형의 환경이 있습니다.</target>
        </trans-unit>
        <trans-unit id="66f91e4aa8804c6b4f013ada280146fb185d0c9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Erl_Interface&lt;/code&gt; does not provide a native implementation of the global service. Instead it uses the global services provided by a &quot;nearby&quot; Erlang node. To use the services described in this section, it is necessary to first open a connection to an Erlang node.</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; 는 글로벌 서비스의 기본 구현을 제공하지 않습니다. 대신 &quot;인근&quot;Erlang 노드가 제공하는 글로벌 서비스를 사용합니다. 이 섹션에 설명 된 서비스를 사용하려면 먼저 Erlang 노드에 대한 연결을 열어야합니다.</target>
        </trans-unit>
        <trans-unit id="21a8620d7f71b3fe04e6ae104f985d39e2c3a39b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Error&lt;/code&gt; can be &lt;code&gt;Reason&lt;/code&gt;, &lt;code&gt;{error, Reason}&lt;/code&gt;, or &lt;code&gt;{aborted, Reason}&lt;/code&gt;. &lt;code&gt;Reason&lt;/code&gt; can be an atom or a tuple with &lt;code&gt;Reason&lt;/code&gt; as an atom in the first field.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; 는 &lt;code&gt;Reason&lt;/code&gt; , &lt;code&gt;{error, Reason}&lt;/code&gt; 또는 &lt;code&gt;{aborted, Reason}&lt;/code&gt; 있습니다. &lt;code&gt;Reason&lt;/code&gt; 는 첫 번째 필드에서 원자가 &lt;code&gt;Reason&lt;/code&gt; 인 원자 또는 튜플 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5638a7f8b468b89e69ea634869bb83a7a6a2afab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Error&lt;/code&gt; describes the error to the client, which can do whatever it wants with it. The &lt;code&gt;io&lt;/code&gt; module typically returns it &quot;as is&quot;.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; 는 클라이언트에 대한 오류를 설명하며 클라이언트가 원하는 모든 작업을 수행 할 수 있습니다. &lt;code&gt;io&lt;/code&gt; 모듈은 일반적으로 &quot;있는 그대로&quot;그것을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="04d87ae5554e208370820f25f624774a9da1947c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Error&lt;/code&gt; describes the error to the client, which can do whatever it wants with it. The &lt;code&gt;io&lt;/code&gt; module typically returns it as is.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; 는 클라이언트에 대한 오류를 설명하며 클라이언트가 원하는 모든 작업을 수행 할 수 있습니다. &lt;code&gt;io&lt;/code&gt; 모듈은 일반적으로는있는 그대로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="542f071c4b7277d878a6f879fdb87841d69c8a2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrorInfo&lt;/code&gt; is described later in this section. The filename is included here, as the compiler uses the Erlang pre-processor &lt;code&gt;epp&lt;/code&gt;, which allows the code to be included in other files. It is therefore important to know to &lt;strong&gt;which&lt;/strong&gt; file the line number of an error or a warning refers.</source>
          <target state="translated">&lt;code&gt;ErrorInfo&lt;/code&gt; 는이 섹션의 뒷부분에서 설명합니다. 컴파일러가 Erlang 프리 프로세서 &lt;code&gt;epp&lt;/code&gt; 를 사용하므로 다른 파일에 코드를 포함시킬 수 있으므로 파일 이름이 여기에 포함됩니다. 따라서 오류 또는 경고의 줄 번호 가 &lt;strong&gt;어떤&lt;/strong&gt; 파일 을 참조하는지 아는 것이 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="6c3a6b9d3a2bea4238f95b3b00f732c1e463c065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrorInfo&lt;/code&gt; is the standard &lt;code&gt;ErrorInfo&lt;/code&gt; structure that is returned from all I/O modules. The format is as follows:</source>
          <target state="translated">&lt;code&gt;ErrorInfo&lt;/code&gt; 는 모든 I / O 모듈에서 반환되는 표준 &lt;code&gt;ErrorInfo&lt;/code&gt; 구조입니다. 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1fc55e449c7b56fac5185473fc4fd0d23e23f36e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErrorLine&lt;/code&gt; is the atom &lt;code&gt;none&lt;/code&gt; if the error does not correspond to a specific line, for example, if the source file does not exist.</source>
          <target state="translated">&lt;code&gt;ErrorLine&lt;/code&gt; 은 오류가 특정 행에 해당하지 않는 경우 (예 : 소스 파일이없는 경우) 아톰 &lt;code&gt;none&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6d4423e98bb1aad80b5461a8bc36568e125e09d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Errors&lt;/code&gt; is the list of error descriptors of all &lt;code&gt;error_marker&lt;/code&gt; nodes that occur in &lt;code&gt;Forms&lt;/code&gt;. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Errors&lt;/code&gt; 는 &lt;code&gt;Forms&lt;/code&gt; 에서 발생하는 모든 &lt;code&gt;error_marker&lt;/code&gt; 노드 의 오류 설명자 목록입니다 . 리스팅 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e1b253e53177217e4150964d83d1c1292726536c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErtsThrPrgrDelayHandle erts_thr_progress_unmanaged_delay(void)&lt;/code&gt; - Delay thread progress.</source>
          <target state="translated">&lt;code&gt;ErtsThrPrgrDelayHandle erts_thr_progress_unmanaged_delay(void)&lt;/code&gt; -스레드 진행을 지연합니다.</target>
        </trans-unit>
        <trans-unit id="253b4dbedc598d8836fdfc9b26b2a4f3c56a8fa7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ErtsThrPrgrVal erts_thr_progress_later(void)&lt;/code&gt; - Initiation of the operation. The thread progress value returned can be used testing for completion of the operation.</source>
          <target state="translated">&lt;code&gt;ErtsThrPrgrVal erts_thr_progress_later(void)&lt;/code&gt; -작업 시작. 반환 된 스레드 진행률 값은 작업 완료를 테스트하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c60e6e43a7c29bcde6fd46a64b452b964ec8c03d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Eterm tmp_packed1 = BeamExtraData(I[0]);&lt;/code&gt; picks up both X register numbers packed into the upper 32 bits of the instruction word.</source>
          <target state="translated">&lt;code&gt;Eterm tmp_packed1 = BeamExtraData(I[0]);&lt;/code&gt; 명령어의 상위 32 비트에 패킹 된 X 레지스터 번호를 모두 선택합니다.</target>
        </trans-unit>
        <trans-unit id="20f24f488de97e9c2b9d9ab9ed959de3a856cdb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event-Category&lt;/code&gt; can be either of the following:</source>
          <target state="translated">&lt;code&gt;Event-Category&lt;/code&gt; 는 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a858aa824073140245abbd1d776d9b3a4ca64da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; and &lt;code&gt;Info&lt;/code&gt; are passed as is from &lt;code&gt;handle_debug&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; &lt;code&gt;handle_debug&lt;/code&gt; 에서 그대로 이벤트 및 &lt;code&gt;Info&lt;/code&gt; 가 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="be32fd59f7e8c2830bb3a6373ccf853a25a04f61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; is an &lt;code&gt;{EventType,EventContent}&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 는 &lt;code&gt;{EventType,EventContent}&lt;/code&gt; 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="c9d6263389578ffd88c10ea9dd4cb4fec8766e3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; is any term that is passed as one of the arguments to &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt; Module:handle_event/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt; Module:handle_event/2&lt;/a&gt;&lt;/code&gt; 에 인수 중 하나로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="d59346c42f2342952197ec4ead3bdc93db5ecbae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; is any term that is passed as one of the arguments to &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt;Module:handle_event/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt;Module:handle_event/2&lt;/a&gt;&lt;/code&gt; 에 인수 중 하나로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="92c8812cc59311b101b9b526c2bc7605e952016c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; is the &lt;code&gt;Event&lt;/code&gt; argument of &lt;code&gt;notify/2&lt;/code&gt;/&lt;code&gt;sync_notify/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 는 &lt;code&gt;notify/2&lt;/code&gt; / &lt;code&gt;sync_notify/2&lt;/code&gt; 의 &lt;code&gt;Event&lt;/code&gt; 인수입니다 .</target>
        </trans-unit>
        <trans-unit id="d42b65b89287d8ed496061fd3caefe5d7cf00764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; is the system event. It is up to the user to define what a system event is and how it is to be represented. Typically at least incoming and outgoing messages are considered system events and represented by the tuples &lt;code&gt;{in,Msg[,From]}&lt;/code&gt; and &lt;code&gt;{out,Msg,To[,State]}&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 는 시스템 이벤트입니다. 시스템 이벤트의 정의와 표시 방법을 정의하는 것은 사용자의 책임입니다. 일반적으로 적어도 수신 및 발신 메시지는 시스템 이벤트로 간주되며 &lt;code&gt;{in,Msg[,From]}&lt;/code&gt; 및 &lt;code&gt;{out,Msg,To[,State]}&lt;/code&gt; 로 각각 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8e8120c574fbdef0b2373999194421b7a265ecbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EventHandlers&lt;/code&gt; is a list of module names. Before a test session starts, the init function of each plugged in event handler is called (with the &lt;code&gt;InitArgs&lt;/code&gt; list as argument or &lt;code&gt;[]&lt;/code&gt; if no start arguments are specified).</source>
          <target state="translated">&lt;code&gt;EventHandlers&lt;/code&gt; 는 모듈 이름 목록입니다. 테스트 세션이 시작되기 전에 연결된 각 이벤트 핸들러의 init 함수가 호출됩니다 ( &lt;code&gt;InitArgs&lt;/code&gt; 목록을 인수로 사용하거나 시작 인수를 지정하지 않은 경우 &lt;code&gt;[]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b5396e117db15bfb87425c552850bcee368014a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EventMgrRef&lt;/code&gt; can be any of the following:</source>
          <target state="translated">&lt;code&gt;EventMgrRef&lt;/code&gt; 는 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c2455c5ac8b9bfa3603eab32781121e992de95c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExclNodes&lt;/code&gt; is a list of nodes to be excluded from the test. That is, tests that are specified in the test specification to run on a particular node are not performed if that node is listed in &lt;code&gt;ExclNodes&lt;/code&gt; at runtime.</source>
          <target state="translated">&lt;code&gt;ExclNodes&lt;/code&gt; 는 테스트에서 제외 할 노드 목록입니다. 즉, 특정 노드에서 실행되도록 테스트 스펙에 지정된 테스트는 해당 노드가 런타임시 &lt;code&gt;ExclNodes&lt;/code&gt; 에 나열되면 수행되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b8e91d463912293e8731b8b5a15250334828aefb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exclude actor (toggle)&lt;/code&gt; - Right mouse click on the actor name tag. The actor name will be enclosed in round brackets &lt;code&gt;()&lt;/code&gt;. When an actor is excluded, all events related to this actor is hidden. If the checkbox &lt;code&gt;Hide (excluded actors)&lt;/code&gt; is checked, even the name tags and corresponding vertical line of excluded actors will be hidden.</source>
          <target state="translated">&lt;code&gt;Exclude actor (toggle)&lt;/code&gt; -액터 이름 태그를 마우스 오른쪽 버튼으로 클릭합니다. 액터 이름은 둥근 괄호 &lt;code&gt;()&lt;/code&gt; 로 묶습니다 . 액터가 제외되면이 액터와 관련된 모든 이벤트가 숨겨집니다. &lt;code&gt;Hide (excluded actors)&lt;/code&gt; 확인란을 선택 하면 이름 태그 및 제외 된 액터의 해당 세로선도 숨겨집니다.</target>
        </trans-unit>
        <trans-unit id="0567389015d8817ba26de637561d66144693d7c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exports&lt;/code&gt; is a list of representations of those function names that are listed by export declaration attributes in &lt;code&gt;Forms&lt;/code&gt; (cf. &lt;code&gt;analyze_export_attribute/1&lt;/code&gt;). We do not guarantee that each name occurs at most once in the list. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Exports&lt;/code&gt; 는 &lt;code&gt;Forms&lt;/code&gt; 내보내기 선언 속성으로 나열되는 해당 함수 이름의 표현 목록입니다 (cf. &lt;code&gt;analyze_export_attribute/1&lt;/code&gt; ). 각 이름은 목록에서 최대 한 번만 발생한다고 보장하지 않습니다. 리스팅 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8f0355c010534ae5423a867b53664189e3db344a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr1&lt;/code&gt; and &lt;code&gt;Expr2&lt;/code&gt;, which are also expressions, are evaluated first - in any order - before the addition is performed.</source>
          <target state="translated">&lt;code&gt;Expr1&lt;/code&gt; 표현식이기도 한 Expr1 및 &lt;code&gt;Expr2&lt;/code&gt; 는 추가가 수행되기 전에 먼저 순서에 관계없이 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="7211d000401d588e5e82559868e09cd511cc0a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr1&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; in an &lt;code&gt;orelse&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;Expr1&lt;/code&gt; 평가 &lt;code&gt;false&lt;/code&gt; 에 &lt;code&gt;orelse&lt;/code&gt; 식입니다.</target>
        </trans-unit>
        <trans-unit id="eeee422832153f29c93a67e50bac52241b6de5d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr1&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt; in an &lt;code&gt;andalso&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;Expr1&lt;/code&gt; &lt;code&gt;andalso&lt;/code&gt; 식에서 Expr1 은 &lt;code&gt;true&lt;/code&gt; 로 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="662f5e17af2f0c8cc395ffea808f39e153aa1f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr1&lt;/code&gt; must evaluate to a pid, a registered name (atom), or a tuple &lt;code&gt;{Name,Node}&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; is an atom and &lt;code&gt;Node&lt;/code&gt; is a node name, also an atom.</source>
          <target state="translated">&lt;code&gt;Expr1&lt;/code&gt; 은 pid, 등록 된 이름 (아톰) 또는 튜플 &lt;code&gt;{Name,Node}&lt;/code&gt; 로 평가해야합니다 . &lt;code&gt;Name&lt;/code&gt; 은 원자이고 &lt;code&gt;Node&lt;/code&gt; 는 노드 이름이며 원자입니다.</target>
        </trans-unit>
        <trans-unit id="143302d8e9db2c4805973d558e7008d1947ce7e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr2&lt;/code&gt; is evaluated only if necessary. That is, &lt;code&gt;Expr2&lt;/code&gt; is evaluated only if:</source>
          <target state="translated">&lt;code&gt;Expr2&lt;/code&gt; 는 필요한 경우에만 평가됩니다. 즉, &lt;code&gt;Expr2&lt;/code&gt; 는 다음 경우에만 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="bb8b3453fa33abd810625aed6af1b05b67aac7cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr&lt;/code&gt; is to evaluate to a &lt;code&gt;Name&lt;/code&gt; record. A copy of this record is returned, with the value of each specified field &lt;code&gt;FieldI&lt;/code&gt; changed to the value of evaluating the corresponding expression &lt;code&gt;ExprI&lt;/code&gt;. All other fields retain their old values.</source>
          <target state="translated">&lt;code&gt;Expr&lt;/code&gt; 은 &lt;code&gt;Name&lt;/code&gt; 레코드 로 평가합니다 . 지정된 각 필드 &lt;code&gt;FieldI&lt;/code&gt; 값이 해당 표현식 &lt;code&gt;ExprI&lt;/code&gt; 평가 값으로 변경된 이 레코드의 사본이 리턴 됩니다. 다른 모든 필드는 이전 값을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="c861a94afb482d95e55eb75fae1bba5097ebb598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExprT&lt;/code&gt; is to evaluate to an integer. The highest allowed value is 16#FFFFFFFF, that is, the value must fit in 32 bits. &lt;code&gt;receive..after&lt;/code&gt; works exactly as &lt;code&gt;receive&lt;/code&gt;, except that if no matching message has arrived within &lt;code&gt;ExprT&lt;/code&gt; milliseconds, then &lt;code&gt;BodyT&lt;/code&gt; is evaluated instead. The return value of &lt;code&gt;BodyT&lt;/code&gt; then becomes the return value of the &lt;code&gt;receive..after&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;ExprT&lt;/code&gt; 는 정수로 평가하는 것입니다. 허용되는 가장 높은 값은 16 # FFFFFFFF입니다. 즉, 값은 32 비트에 맞아야합니다. &lt;code&gt;receive..after&lt;/code&gt; 는 &lt;code&gt;ExprT&lt;/code&gt; 밀리 초 내에 일치하는 메시지가 도착하지 않으면 &lt;code&gt;BodyT&lt;/code&gt; 가 대신 평가 된다는 점을 제외하고는 &lt;code&gt;receive&lt;/code&gt; 로 정확하게 작동합니다 . 그러면 &lt;code&gt;BodyT&lt;/code&gt; 의 반환 값은 &lt;code&gt;receive..after&lt;/code&gt; 표현식 의 반환 값이됩니다 .</target>
        </trans-unit>
        <trans-unit id="cd389eaab7032a444c01c7322341050cb01623d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expression&lt;/code&gt; (the &lt;strong&gt;template&lt;/strong&gt;) is any Erlang expression. Qualifiers are either &lt;strong&gt;filters&lt;/strong&gt; or &lt;strong&gt;generators&lt;/strong&gt;. Filters are Erlang expressions returning &lt;code&gt;boolean()&lt;/code&gt;. Generators have the form &lt;code&gt;Pattern &amp;lt;- ListExpression&lt;/code&gt;, where &lt;code&gt;ListExpression&lt;/code&gt; is an expression evaluating to a query handle or a list. Query handles are returned from &lt;code&gt;&lt;a href=&quot;#append-1&quot;&gt;append/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#keysort-2&quot;&gt;keysort/2,3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#sort-1&quot;&gt;sort/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#string_to_handle-1&quot;&gt; string_to_handle/1,2,3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#table-2&quot;&gt;table/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; ( &lt;strong&gt;템플릿&lt;/strong&gt; )은 모든 Erlang 표현식입니다. 한정자는 &lt;strong&gt;필터&lt;/strong&gt; 또는 &lt;strong&gt;생성기&lt;/strong&gt; 입니다. 필터는 &lt;code&gt;boolean()&lt;/code&gt; 반환하는 Erlang 표현식 입니다. 생성기의 형식은 &lt;code&gt;Pattern &amp;lt;- ListExpression&lt;/code&gt; . 여기서 &lt;code&gt;ListExpression&lt;/code&gt; 은 쿼리 핸들 또는 목록으로 평가되는 식입니다. 쿼리 핸들은 &lt;code&gt;&lt;a href=&quot;#append-1&quot;&gt;append/1,2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#keysort-2&quot;&gt;keysort/2,3&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#sort-1&quot;&gt;sort/1,2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#string_to_handle-1&quot;&gt; string_to_handle/1,2,3&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#table-2&quot;&gt;table/2&lt;/a&gt;&lt;/code&gt; 에서 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="ff633e5575a8dae11d629083c60837e79d8b01c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expression&lt;/code&gt; (the &lt;strong&gt;template&lt;/strong&gt;) is any Erlang expression. Qualifiers are either &lt;strong&gt;filters&lt;/strong&gt; or &lt;strong&gt;generators&lt;/strong&gt;. Filters are Erlang expressions returning &lt;code&gt;boolean()&lt;/code&gt;. Generators have the form &lt;code&gt;Pattern &amp;lt;- ListExpression&lt;/code&gt;, where &lt;code&gt;ListExpression&lt;/code&gt; is an expression evaluating to a query handle or a list. Query handles are returned from &lt;code&gt;&lt;a href=&quot;#append-1&quot;&gt;append/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#keysort-2&quot;&gt;keysort/2,3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#sort-1&quot;&gt;sort/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#string_to_handle-1&quot;&gt;string_to_handle/1,2,3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#table-2&quot;&gt;table/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; ( &lt;strong&gt;템플릿&lt;/strong&gt; )은 Erlang 식입니다. 한정자는 &lt;strong&gt;필터&lt;/strong&gt; 또는 &lt;strong&gt;생성기&lt;/strong&gt; 입니다. 필터는 &lt;code&gt;boolean()&lt;/code&gt; 반환하는 Erlang 표현식 입니다. 생성기는 &lt;code&gt;Pattern &amp;lt;- ListExpression&lt;/code&gt; 형식 이며 , 여기서 &lt;code&gt;ListExpression&lt;/code&gt; 은 쿼리 핸들 또는 목록을 평가하는 표현식입니다. 쿼리 핸들은 &lt;code&gt;&lt;a href=&quot;#append-1&quot;&gt;append/1,2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#keysort-2&quot;&gt;keysort/2,3&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#sort-1&quot;&gt;sort/1,2&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#string_to_handle-1&quot;&gt;string_to_handle/1,2,3&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#table-2&quot;&gt;table/2&lt;/a&gt;&lt;/code&gt; 에서 리턴 됩니다.</target>
        </trans-unit>
        <trans-unit id="41a5585df9b30ce57276abd33cc0dfddc1484041" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Extended&lt;/code&gt; equals &lt;code&gt;yes&lt;/code&gt; if the range of time values has been extended; otherwise &lt;code&gt;Extended&lt;/code&gt; equals &lt;code&gt;no&lt;/code&gt;. The range must be extended if &lt;code&gt;Function&lt;/code&gt; returns values that wrap fast. This typically is the case when the return value is a 32-bit value.</source>
          <target state="translated">&lt;code&gt;Extended&lt;/code&gt; 시간 값 범위가 확장 된 경우 확장 은 &lt;code&gt;yes&lt;/code&gt; 와 같습니다 . 그렇지 않으면 &lt;code&gt;Extended&lt;/code&gt; 는 &lt;code&gt;no&lt;/code&gt; 와 같습니다 . &lt;code&gt;Function&lt;/code&gt; 가 빠르게 줄 바꿈되는 값을 반환 하면 범위를 확장해야합니다 . 일반적으로 반환 값이 32 비트 값인 경우입니다.</target>
        </trans-unit>
        <trans-unit id="00842de904bd1b223d9d3ef26dbb2f458437f173" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Extra&lt;/code&gt; can be any &lt;code&gt;term()&lt;/code&gt; except the atom &lt;code&gt;ignore_extra&lt;/code&gt;. It is passed (back) to the user via the callback function &lt;code&gt;&lt;a href=&quot;megaco_user#connect&quot;&gt;handle_connect/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 는 atom &lt;code&gt;ignore_extra&lt;/code&gt; 를 제외한 모든 &lt;code&gt;term()&lt;/code&gt; 수 있습니다 . 콜백 함수 &lt;code&gt;&lt;a href=&quot;megaco_user#connect&quot;&gt;handle_connect/3&lt;/a&gt;&lt;/code&gt; 를 통해 사용자에게 전달됩니다 (뒤로) .</target>
        </trans-unit>
        <trans-unit id="016ef8d795e255f7f363dca307bf5b98383647e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Extra&lt;/code&gt; is any term that the notification sender wishes to pass to the Net if process when sending a notification (see &lt;code&gt;&lt;a href=&quot;snmpa#send_notification2&quot;&gt;send notification &lt;/a&gt;&lt;/code&gt; for more info).</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;snmpa#send_notification2&quot;&gt;send notification &lt;/a&gt;&lt;/code&gt; 를 보낼 때 통지 발신자가 Net if 프로세스에 전달하고자하는 용어입니다 (자세한 내용은 통지 보내기 참조 ).</target>
        </trans-unit>
        <trans-unit id="6ac68c87afbf0744a0c5ba085556b77fef8726fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Extra&lt;/code&gt; is any term that the notification sender wishes to pass to the Net if process when sending a notification (see &lt;code&gt;&lt;a href=&quot;snmpa#send_notification2&quot;&gt;send notification&lt;/a&gt;&lt;/code&gt; for more info).</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;snmpa#send_notification2&quot;&gt;send notification&lt;/a&gt;&lt;/code&gt; 를 보낼 때 통지 발신자가 Net if 프로세스에 전달하고자하는 용어입니다 (자세한 내용은 통지 보내기 참조 ).</target>
        </trans-unit>
        <trans-unit id="e1ea93189519f556c8607a1c3b51fac93865da75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Extra&lt;/code&gt; is any term the Net if process wishes to send to the agent. This term can be retrieved by the instrumentation functions by calling &lt;code&gt;snmp:current_net_if_data()&lt;/code&gt;. This data is also sent back to the Net if process when the agent generates a response to the request.</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 는 프로세스가 에이전트에게 보내려는 경우 Net이라는 용어입니다. 이 용어는 &lt;code&gt;snmp:current_net_if_data()&lt;/code&gt; 호출하여 인스 트루먼 테이션 함수로 검색 할 수 있습니다 . 이 데이터는 에이전트가 요청에 대한 응답을 생성 할 때 Net if 프로세스로 다시 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="9a2d8d87ab3eb8cfec209eed6e6951ba7786caad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Extra&lt;/code&gt; is passed &quot;as is&quot; from the &lt;code&gt;{advanced,Extra}&lt;/code&gt; part of the update instruction.</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 는 업데이트 명령 의 &lt;code&gt;{advanced,Extra}&lt;/code&gt; 부분 에서 &quot;있는 그대로&quot;전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="c81a21541d9de2a7fe8923ede1ced05d5a315656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Extra&lt;/code&gt; is the term that the Net if process sent to the agent when the request was sent to the agent.</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 는 요청이 에이전트로 전송 될 때 Net if 프로세스가 에이전트로 전송 한 용어입니다.</target>
        </trans-unit>
        <trans-unit id="e1d8975a4528647404417d18311aa95ff023d3dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtraInfo&lt;/code&gt; is an opaque data structure passed on to the net-if process. The net-if process included in this application makes, with one exception, no use of this info, so the only use for it in such a configuration (when using the built in net-if) would be tracing. The one usage exception is: &lt;strong&gt;Any&lt;/strong&gt; tuple with &lt;code&gt;snmpm_extra_info_tag&lt;/code&gt; as its first element is reserved for internal use.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 는 net-if 프로세스로 전달되는 불투명 한 데이터 구조입니다. 이 응용 프로그램에 포함 된 net-if 프로세스는 한 가지 예외를 제외하고이 정보를 사용하지 않으므로 이러한 구성 (내장 net-if를 사용하는 경우)에서만 정보를 사용하면 추적됩니다. 한 사용 예외입니다 : &lt;strong&gt;모든&lt;/strong&gt; 튜플에 &lt;code&gt;snmpm_extra_info_tag&lt;/code&gt; 로서의 첫 번째 요소는 내부에서 사용하도록 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa5795d80e301c9ac1d4d855f3f9bef6e2645c40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtraInfo&lt;/code&gt; is not normally used in any way by the agent. It is intended to be passed along to the net-if process, which is a component that a user can implement themself. The users own net-if may then make use of ExtraInfo. The net-if provided with this application does not process ExtraInfo.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 일반적으로 에이전트는 ExtraInfo 를 사용하지 않습니다. 사용자가 직접 구현할 수있는 구성 요소 인 net-if 프로세스로 전달됩니다. net-if를 소유 한 사용자는 ExtraInfo를 사용할 수 있습니다. 이 응용 프로그램과 함께 제공된 net-if는 ExtraInfo를 처리하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1167fc289ec3487d52282629f9030a8d90651055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtraInfo&lt;/code&gt; is some opaque data that is passed to the net-if process. It originates from the &lt;code&gt;ExtraInfo&lt;/code&gt; parameter in the calls to the &lt;code&gt;&lt;a href=&quot;snmpm#sync_get&quot;&gt;synchronous get-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#async_get&quot;&gt;asynchronous get-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_next&quot;&gt;synchronous get-next-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#async_get_next&quot;&gt;asynchronous get-next-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#sync_set&quot;&gt;synchronous set-request&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmpm#async_set&quot;&gt;asynchronous set-request&lt;/a&gt;&lt;/code&gt; functions. Whether the net-if process chooses to use this is implementation dependent. The net-if process included in this application ignores it.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 는 net-if 프로세스로 전달되는 불투명 한 데이터입니다. &lt;code&gt;&lt;a href=&quot;snmpm#sync_get&quot;&gt;synchronous get-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#async_get&quot;&gt;asynchronous get-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_next&quot;&gt;synchronous get-next-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#async_get_next&quot;&gt;asynchronous get-next-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#sync_set&quot;&gt;synchronous set-request&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;snmpm#async_set&quot;&gt;asynchronous set-request&lt;/a&gt;&lt;/code&gt; 함수 에 대한 호출 의 &lt;code&gt;ExtraInfo&lt;/code&gt; 매개 변수에서 발생합니다 . net-if 프로세스가이를 사용하는지 여부는 구현에 따라 다릅니다. 이 응용 프로그램에 포함 된 net-if 프로세스는이를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="698415d6f160d17b8481a524c2fe064901cd691e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtraInfo&lt;/code&gt; is some opaque data that is passed to the net-if process. It originates from the &lt;code&gt;ExtraInfo&lt;/code&gt; parameter in the calls to the &lt;code&gt;&lt;a href=&quot;snmpm#sync_get2&quot;&gt;synchronous get-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#async_get2&quot;&gt;asynchronous get-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_next2&quot;&gt;synchronous get-next-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#async_get_next2&quot;&gt;asynchronous get-next-request&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#sync_set2&quot;&gt;synchronous set-request&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmpm#async_set2&quot;&gt;asynchronous set-request&lt;/a&gt;&lt;/code&gt; functions. Whether the net-if process chooses to use this is implementation dependent. The net-if process included in this application ignores it.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 는 net-if 프로세스로 전달되는 일부 불투명 한 데이터입니다. &lt;code&gt;&lt;a href=&quot;snmpm#sync_get2&quot;&gt;synchronous get-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#async_get2&quot;&gt;asynchronous get-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#sync_get_next2&quot;&gt;synchronous get-next-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#async_get_next2&quot;&gt;asynchronous get-next-request&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;snmpm#sync_set2&quot;&gt;synchronous set-request&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;snmpm#async_set2&quot;&gt;asynchronous set-request&lt;/a&gt;&lt;/code&gt; 함수 에 대한 호출 의 &lt;code&gt;ExtraInfo&lt;/code&gt; 매개 변수에서 시작됩니다 . net-if 프로세스가이를 사용하기로 선택하는지 여부는 구현에 따라 다릅니다. 이 응용 프로그램에 포함 된 net-if 프로세스는이를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="22e09e963bd8e9e0cd9dbd76d530671ea2e49a2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExtraOpts&lt;/code&gt; (optional) are extra SSH options to be added to the configuration data for &lt;code&gt;KeyOrName&lt;/code&gt;. The extra options override any existing options with the same key in the configuration data. For details on valid SSH options, see application &lt;code&gt;SSH&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ExtraOpts&lt;/code&gt; (옵션)에 대한 구성 데이터에 추가 할 추가 SSH 옵션입니다 &lt;code&gt;KeyOrName&lt;/code&gt; . 추가 옵션은 구성 데이터에서 동일한 키를 사용하여 기존 옵션을 대체합니다. 유효한 SSH 옵션에 대한 자세한 내용은 응용 프로그램 &lt;code&gt;SSH&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f88dacc5e2f9e876a456b60a8578937872c7ff8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; is a sparsity factor that can vary between 1.6 and 1.8 due to the probabilistic nature of the internal HAMT data structure.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; 는 내부 HAMT 데이터 구조의 확률 적 특성으로 인해 1.6과 1.8 사이에서 변할 수있는 희소 계수입니다.</target>
        </trans-unit>
        <trans-unit id="f9a91cff788fb3022aa9e21e5f6bc60b7e7b0649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; is equal to &lt;code&gt;L + X&lt;/code&gt; (the defined functions are the local functions and the external functions);</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; 는 &lt;code&gt;L + X&lt;/code&gt; (정의 된 기능은 로컬 기능 및 외부 기능입니다).</target>
        </trans-unit>
        <trans-unit id="eab46a1dd5dc611b743456bb214a0efd219f07b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; is equal to &lt;code&gt;L + X&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; 는 &lt;code&gt;L + X&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="abc78ab88ed98a1a5686851a0f20f21b4519e183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; is the &lt;code&gt;field width&lt;/code&gt; of the input field.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; 는 입력 필드 의 &lt;code&gt;field width&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ab74f72aa41ea4874db8efe8144c02a2abae90dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; is the &lt;code&gt;field width&lt;/code&gt; of the printed argument. A negative value means that the argument is left-justified within the field, otherwise right-justified. If no field width is specified, the required print width is used. If the field width specified is too small, the whole field is filled with &lt;code&gt;*&lt;/code&gt; characters.</source>
          <target state="translated">&lt;code&gt;F&lt;/code&gt; 는 인쇄 인수 의 &lt;code&gt;field width&lt;/code&gt; 입니다. 음수 값은 인수가 필드 내에서 왼쪽 정렬되고 그렇지 않으면 오른쪽 정렬됨을 의미합니다. 필드 너비를 지정하지 않으면 필요한 인쇄 너비가 사용됩니다. 지정된 필드 너비가 너무 작 으면 전체 필드가 &lt;code&gt;*&lt;/code&gt; 문자 로 채워 집니다.</target>
        </trans-unit>
        <trans-unit id="b3473051d29731d0bfcbdfed961281f1a9bd321e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FailInfo = {timetrap_timeout,integer()} | {RunTimeError,StackTrace} | UserTerm&lt;/code&gt;, error details.</source>
          <target state="translated">&lt;code&gt;FailInfo = {timetrap_timeout,integer()} | {RunTimeError,StackTrace} | UserTerm&lt;/code&gt; , 오류 정보</target>
        </trans-unit>
        <trans-unit id="e6ac7dfa3e184bbafd273b7d84d6e1e5a0a459c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FailInfo = {timetrap_timeout,integer()} | {RunTimeError,StackTrace} | bad_return | UserTerm&lt;/code&gt;, error details.</source>
          <target state="translated">&lt;code&gt;FailInfo = {timetrap_timeout,integer()} | {RunTimeError,StackTrace} | bad_return | UserTerm&lt;/code&gt; , 오류 정보</target>
        </trans-unit>
        <trans-unit id="7741e0b50169d120e225f1164a9cbbd7154c4314" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FailReason = {Suite,ConfigFunc,FailInfo}} | {Suite,FailedCaseInSequence}&lt;/code&gt;, reason for failure.</source>
          <target state="translated">&lt;code&gt;FailReason = {Suite,ConfigFunc,FailInfo}} | {Suite,FailedCaseInSequence}&lt;/code&gt; , 실패 이유.</target>
        </trans-unit>
        <trans-unit id="3b53fe700d860f2359d7edee023e75e866140248" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FailReason = {error,FailInfo} | {error,{RunTimeError,StackTrace}} | {timetrap_timeout,integer()} | {failed,{Suite,end_per_testcase,FailInfo}}&lt;/code&gt;, reason for failure.</source>
          <target state="translated">&lt;code&gt;FailReason = {error,FailInfo} | {error,{RunTimeError,StackTrace}} | {timetrap_timeout,integer()} | {failed,{Suite,end_per_testcase,FailInfo}}&lt;/code&gt; , 실패 이유.</target>
        </trans-unit>
        <trans-unit id="6bea7f35c31242e541dad95c1a7fb7dffba05c1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Failed = integer()&lt;/code&gt;, current number of failed test cases.</source>
          <target state="translated">&lt;code&gt;Failed = integer()&lt;/code&gt; , 현재 실패한 테스트 사례 수입니다.</target>
        </trans-unit>
        <trans-unit id="fd10d40b406076baa561594df83d89a8736eb827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FailedCaseInSequence = atom()&lt;/code&gt;, the name of a case that failed in a sequence.</source>
          <target state="translated">&lt;code&gt;FailedCaseInSequence = atom()&lt;/code&gt; , 시퀀스에서 실패한 사례의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3480494a07f9200c378dd56805e08fa650392c80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fd&lt;/code&gt; is a file descriptor obtained from &lt;code&gt;erl_connect()&lt;/code&gt; or &lt;code&gt;erl_xconnect()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Fd&lt;/code&gt; 는 &lt;code&gt;erl_connect()&lt;/code&gt; 또는 &lt;code&gt;erl_xconnect()&lt;/code&gt; 에서 얻은 파일 디스크립터 입니다.</target>
        </trans-unit>
        <trans-unit id="04d8c667801a492731e286b0245924b0b1586652" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Features&lt;/code&gt; is a list of atoms representing the allocation features used.</source>
          <target state="translated">&lt;code&gt;Features&lt;/code&gt; 은 사용 된 할당 기능을 나타내는 원자 목록입니다.</target>
        </trans-unit>
        <trans-unit id="b2e251a69373a76c1951d4ff010b0cc1ab4fcd2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File&lt;/code&gt; can start with a path component &lt;code&gt;$VAR&lt;/code&gt;, for some string &lt;code&gt;VAR&lt;/code&gt;. If that is the case, the value of the environment variable &lt;code&gt;VAR&lt;/code&gt; as returned by &lt;code&gt;os:getenv(VAR)&lt;/code&gt; is substituted for &lt;code&gt;$VAR&lt;/code&gt;. If &lt;code&gt;os:getenv(VAR)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;$VAR&lt;/code&gt; is left as is.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 은 일부 문자열 &lt;code&gt;VAR&lt;/code&gt; 에 대해 경로 구성 요소 &lt;code&gt;$VAR&lt;/code&gt; 로 시작할 수 있습니다 . 이 경우 &lt;code&gt;os:getenv(VAR)&lt;/code&gt; 의해 리턴 된 환경 변수 &lt;code&gt;VAR&lt;/code&gt; 의 값이 &lt;code&gt;$VAR&lt;/code&gt; 로 대체됩니다 . 경우 &lt;code&gt;os:getenv(VAR)&lt;/code&gt; 반환 &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;$VAR&lt;/code&gt; 그대로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1ce85923b7f02ac40588a7645cbaf975eec4970" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File&lt;/code&gt; is normally a file pathname in a local filesystem. It is limited in length by the operating system, traditionally to 108 bytes.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 은 일반적으로 로컬 파일 시스템의 파일 경로 이름입니다. 운영 체제에 따라 길이가 전통적으로 108 바이트로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="cda0f1fc082ed132d084fcbe398b3217550cc4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File&lt;/code&gt; is to specify the filename with full path.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 은 전체 경로로 파일 이름을 지정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="79457058ab605835b44c5ae17cfd2019588440d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File&lt;/code&gt; must be &lt;code&gt;iodata()&lt;/code&gt;. Returns an &lt;code&gt;fd()&lt;/code&gt;, which lets module &lt;code&gt;file&lt;/code&gt; operate on the data in-memory as if it is a file.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 은 &lt;code&gt;iodata()&lt;/code&gt; 이어야합니다 . &lt;code&gt;fd()&lt;/code&gt; 반환하여 모듈 &lt;code&gt;file&lt;/code&gt; 이 메모리 인 데이터를 파일처럼 작동하도록합니다.</target>
        </trans-unit>
        <trans-unit id="8983391af633a94df341da261f6cbd2f2c0151ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;File&lt;/code&gt;, a string, is to point out a file. The contents of this file are included as is, at the position of the directive.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 문자열 인 File 은 파일을 가리 킵니다. 이 파일의 내용은 지시문의 위치에있는 그대로 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="52aaafca45eec4b39c954930b1ec2ab029d6a466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileInArchive&lt;/code&gt; is the name that the file has in the archive.</source>
          <target state="translated">&lt;code&gt;FileInArchive&lt;/code&gt; 는 파일이 아카이브에있는 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f01ba718586995fdbaf91aba34ccf57143096114" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileList&lt;/code&gt; is a list of files, with paths relative to the current directory, which are stored with this path in the archive. Files can also be specified with data in binaries to create an archive directly from data.</source>
          <target state="translated">&lt;code&gt;FileList&lt;/code&gt; 는 현재 디렉토리에 상대적인 경로가있는 파일 목록 이며이 경로와 함께 아카이브에 저장됩니다. 이진 데이터로 파일을 지정하여 데이터에서 직접 아카이브를 만들 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="15e908c4881b2418215c3f278d0410bbeb2caf5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileName&lt;/code&gt; specified in &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; does not point out an existing file.</source>
          <target state="translated">&lt;code&gt;FileName&lt;/code&gt; 에 지정된 &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; 지적하지 않는 기존 파일.</target>
        </trans-unit>
        <trans-unit id="6c24d6fd89b3bc4897a714ee9609af21c0617d3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filename&lt;/code&gt; can also be a file in an archive, for example, &lt;code&gt;$OTPROOT/lib/&lt;/code&gt;&lt;code&gt;mnesia-4.4.7.ez/mnesia-4.4.7/ebin/&lt;/code&gt;&lt;code&gt;mnesia.beam&lt;/code&gt;. For information about archive files, see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; 은 아카이브의 파일 일 수도 있습니다 (예 : &lt;code&gt;$OTPROOT/lib/&lt;/code&gt; &lt;code&gt;mnesia-4.4.7.ez/mnesia-4.4.7/ebin/&lt;/code&gt; &lt;code&gt;mnesia.beam&lt;/code&gt; ) . 아카이브 파일에 대한 자세한 내용은 &lt;code&gt;code(3)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="94b3e298031bd950b21aa6bfb19cc97878d1fe90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filename&lt;/code&gt; can also be a file in an archive, for example, &lt;code&gt;$OTPROOT/lib/&lt;/code&gt;&lt;code&gt;mnesia-4.4.7.ez/mnesia-4.4.7/ebin/&lt;/code&gt;&lt;code&gt;mnesia&lt;/code&gt;. For information about archive files, see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; 은 아카이브의 파일 일 수도 있습니다 (예 : &lt;code&gt;$OTPROOT/lib/&lt;/code&gt; &lt;code&gt;mnesia-4.4.7.ez/mnesia-4.4.7/ebin/&lt;/code&gt; &lt;code&gt;mnesia&lt;/code&gt; ) . 아카이브 파일에 대한 자세한 내용은 &lt;code&gt;code(3)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="654f6df19303c54e7536f0874062314f5d2219af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filename&lt;/code&gt; has an improper type, such as tuple.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; 튜플과 같은 잘못된 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="42fe7efff8716a4e574a991225143102236c859c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filename&lt;/code&gt; is a &lt;code&gt;binary()&lt;/code&gt; with characters coded in ISO Latin-1 and the VM was started with parameter &lt;code&gt;+fnue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; 은 ISO Latin-1로 코드화 된 문자 가있는 &lt;code&gt;binary()&lt;/code&gt; 이며 VM은 &lt;code&gt;+fnue&lt;/code&gt; 매개 변수로 시작 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="97024a4463ac75828cc2da5412449ff8ffc5685a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filename&lt;/code&gt; is an absolute filename.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; 은 절대 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="6ba36da9dd2c338f97a2a41e7a76ef5c5f6a83a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filename&lt;/code&gt; specifies the name of the file to be read.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; 은 읽을 파일의 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="aeefebadc4604158bfd383d202ee363474c027af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filter =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-filter&quot;&gt; logger:filter()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Filter =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-filter&quot;&gt; logger:filter()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b19b1f33a58c8f2d3e565492064dd891202ecc8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Filter =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-filter&quot;&gt;logger:filter()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Filter =&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;logger#type-filter&quot;&gt;logger:filter()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d40807e1660aff03298451fd71e09c2fa26821d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FilterDefault&lt;/code&gt; specifies the behaviour if all primary filters return &lt;code&gt;ignore&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;#filters&quot;&gt;Filters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FilterDefault&lt;/code&gt; 는 모든 기본 필터가 &lt;code&gt;ignore&lt;/code&gt; 반환 할 경우의 동작을 지정합니다 . &lt;code&gt;&lt;a href=&quot;#filters&quot;&gt;Filters&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5121cd209c9d2b329246413e804ef6fc12be8386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FilterId =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-filter_id&quot;&gt; logger:filter_id()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FilterId =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-filter_id&quot;&gt; logger:filter_id()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cca2500f3079dc458e423376af9a6d6d4bb0c3a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FilterId =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-filter_id&quot;&gt;logger:filter_id()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FilterId =&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;logger#type-filter_id&quot;&gt;logger:filter_id()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fccd3dbe4676b0a90aee1459549ce191f946f8d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FingerPrint&lt;/code&gt; - the fingerprint of the Host Key as &lt;code&gt;public_key:ssh_hostkey_fingerprint/1&lt;/code&gt; calculates it.</source>
          <target state="translated">&lt;code&gt;FingerPrint&lt;/code&gt; - &lt;code&gt;public_key:ssh_hostkey_fingerprint/1&lt;/code&gt; 로 호스트 키의 지문이 계산합니다.</target>
        </trans-unit>
        <trans-unit id="dfce23f6455d8b249b66646a23b1643d74565af2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;First&lt;/code&gt; - Scrolls &lt;code&gt;this&lt;/code&gt; viewer to the first &lt;code&gt;Event&lt;/code&gt; in the &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;First&lt;/code&gt; - &lt;code&gt;this&lt;/code&gt; 뷰어를 &lt;code&gt;Collector&lt;/code&gt; 의 첫 번째 &lt;code&gt;Event&lt;/code&gt; 로 스크롤 합니다 .</target>
        </trans-unit>
        <trans-unit id="3916f6472ea0770f8ac231a8943f813ed3ad3d48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;First&lt;/code&gt; - Scrolls&lt;code&gt;all&lt;/code&gt; viewers to the first &lt;code&gt;Event&lt;/code&gt; in the &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;First&lt;/code&gt; - &lt;code&gt;all&lt;/code&gt; 뷰어를 &lt;code&gt;Collector&lt;/code&gt; 의 첫 번째 &lt;code&gt;Event&lt;/code&gt; 로 스크롤 합니다 .</target>
        </trans-unit>
        <trans-unit id="727595022c43e76145e4a7a9e547ab7c516d1c71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixationTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt; erlang:monotonic_time/0&lt;/code&gt; at the time of fixation. The use of &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; is &lt;code&gt; time warp safe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FixationTime&lt;/code&gt; 은 고정시 &lt;code&gt; erlang:monotonic_time/0&lt;/code&gt; 이 반환 한 결과에 해당합니다 . &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 의 사용 은 &lt;code&gt; time warp safe&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="8c6531564b42bfd1410b47590c659982dc4d9ef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixationTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt; erlang:timestamp/0&lt;/code&gt; at the time of fixation. Notice that when the system uses single or multi &lt;code&gt;time warp modes&lt;/code&gt; this can produce strange results, as the use of &lt;code&gt;safe_fixed&lt;/code&gt; is not &lt;code&gt; time warp safe&lt;/code&gt;. Time warp safe code must use &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;FixationTime&lt;/code&gt; 은 고정시 &lt;code&gt; erlang:timestamp/0&lt;/code&gt; 에서 반환 한 결과에 해당합니다 . 시스템이 단일 또는 다중 &lt;code&gt;time warp modes&lt;/code&gt; 사용할 때 &lt;code&gt;safe_fixed&lt;/code&gt; 사용이 &lt;code&gt; time warp safe&lt;/code&gt; 이 아니기 때문에 이상한 결과를 생성 할 수 있습니다 . 시간 왜곡 안전 코드는 대신 &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="20bdd452174ccfd1d93e9a3a368a4b0e1a78efa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixationTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; at the time of fixation. The use of &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; is &lt;code&gt;time warp safe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FixationTime&lt;/code&gt; 은 고정시 &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; 에 의해 리턴 된 결과에 해당합니다 . &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 의 사용 은 &lt;code&gt;time warp safe&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ac1cbee501972be0973f0466d970d13eaf1fabd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixationTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt;erlang:timestamp/0&lt;/code&gt; at the time of fixation. Notice that when the system uses single or multi &lt;code&gt;time warp modes&lt;/code&gt; this can produce strange results, as the use of &lt;code&gt;safe_fixed&lt;/code&gt; is not &lt;code&gt;time warp safe&lt;/code&gt;. Time warp safe code must use &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;FixationTime&lt;/code&gt; 은 고정시 &lt;code&gt;erlang:timestamp/0&lt;/code&gt; 에 의해 리턴 된 결과에 해당합니다 . 시스템에서 단일 또는 다중 &lt;code&gt;time warp modes&lt;/code&gt; 사용하는 경우 &lt;code&gt;safe_fixed&lt;/code&gt; 를 사용하면 &lt;code&gt;time warp safe&lt;/code&gt; 이 아니기 때문에 이상한 결과가 발생할 수 있습니다 . 타임 워프 안전 코드는 &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 을 대신 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="4abbc09a95e6e2fb444e3f43c08d01be72db1006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixedAtTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt; erlang:monotonic_time/0&lt;/code&gt; at the time of fixation. The use of &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; is &lt;code&gt; time warp safe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FixedAtTime&lt;/code&gt; 은 고정시 &lt;code&gt; erlang:monotonic_time/0&lt;/code&gt; 에 의해 반환 된 결과에 해당합니다 . &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 의 사용 은 &lt;code&gt; time warp safe&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="cfbc4ccee91b579cc31889bfdb78a788cae6c7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixedAtTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt; erlang:timestamp/0&lt;/code&gt; at the time of fixation. Notice that when the system uses single or multi &lt;code&gt;time warp modes&lt;/code&gt;, this can produce strange results. This is because the use of &lt;code&gt;safe_fixed&lt;/code&gt; is not &lt;code&gt; time warp safe&lt;/code&gt;. Time warp safe code must use &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;FixedAtTime&lt;/code&gt; 은 고정시 &lt;code&gt; erlang:timestamp/0&lt;/code&gt; 에서 반환 한 결과에 해당합니다 . 시스템에서 단일 또는 다중 &lt;code&gt;time warp modes&lt;/code&gt; 를 사용하면 이상한 결과가 발생할 수 있습니다. 이것은 &lt;code&gt;safe_fixed&lt;/code&gt; 의 사용이 &lt;code&gt; time warp safe&lt;/code&gt; 하지 않기 때문 입니다. 시간 왜곡 안전 코드는 대신 &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="bac70ea64e64bf2a743f17215cfa2011f64ecfb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixedAtTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; at the time of fixation. The use of &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; is &lt;code&gt;time warp safe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FixedAtTime&lt;/code&gt; 은 고정시 &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; 에 의해 반환 된 결과에 해당합니다 . &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 의 사용 은 &lt;code&gt;time warp safe&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="38a3580ed8c764ae642222deca36fe3233f44b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FixedAtTime&lt;/code&gt; corresponds to the result returned by &lt;code&gt;erlang:timestamp/0&lt;/code&gt; at the time of fixation. Notice that when the system uses single or multi &lt;code&gt;time warp modes&lt;/code&gt;, this can produce strange results. This is because the use of &lt;code&gt;safe_fixed&lt;/code&gt; is not &lt;code&gt;time warp safe&lt;/code&gt;. Time warp safe code must use &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;FixedAtTime&lt;/code&gt; 은 고정시 &lt;code&gt;erlang:timestamp/0&lt;/code&gt; 에 의해 반환 된 결과에 해당합니다 . 시스템에서 단일 또는 다중 &lt;code&gt;time warp modes&lt;/code&gt; 를 사용하면 이상한 결과가 발생할 수 있습니다. &lt;code&gt;safe_fixed&lt;/code&gt; 의 사용이 &lt;code&gt;time warp safe&lt;/code&gt; 하지 않기 때문 입니다. 타임 워프 안전 코드는 &lt;code&gt;safe_fixed_monotonic_time&lt;/code&gt; 을 대신 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="3b8b5bcff670e023b3f56b28c05d29285b946bef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FlagList&lt;/code&gt; can contain any number of the following flags (the &quot;message tags&quot; refers to the list of &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages&quot;&gt; trace messages&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;FlagList&lt;/code&gt; 는 다음 플래그를 원하는만큼 포함 할 수 있습니다 ( &quot;메시지 태그&quot;는 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages&quot;&gt; trace messages&lt;/a&gt;&lt;/code&gt; 목록을 나타냄 ).</target>
        </trans-unit>
        <trans-unit id="ab55e5fceeef61a22f8303a5a17718a88e845d67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FlagList&lt;/code&gt; can contain any number of the following flags (the &quot;message tags&quot; refers to the list of &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages&quot;&gt;trace messages&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;FlagList&lt;/code&gt; 는 다음과 같은 플래그를 포함 할 수 있습니다 ( &quot;메시지 태그&quot;는 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages&quot;&gt;trace messages&lt;/a&gt;&lt;/code&gt; 목록을 나타냄 ).</target>
        </trans-unit>
        <trans-unit id="a766d82c8283e33c538a96ac32b0825a4d7ea838" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Flags&lt;/code&gt; can be a single atom, or a list of flags. The available flags are:</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; 는 단일 원자 또는 플래그 목록 일 수 있습니다. 사용 가능한 플래그는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9b89cc2f9a82e19633b4f3e1b5035b22bba39537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Flags&lt;/code&gt; consist of &lt;code&gt;NumberOfAtomCacheRefs/2+1&lt;/code&gt; bytes, unless &lt;code&gt;NumberOfAtomCacheRefs&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;NumberOfAtomCacheRefs&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;Flags&lt;/code&gt; and &lt;code&gt;AtomCacheRefs&lt;/code&gt; are omitted. Each atom cache reference has a half byte flag field. Flags corresponding to a specific &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; are located in flag byte number &lt;code&gt;AtomCacheReferenceIndex/2&lt;/code&gt;. Flag byte 0 is the first byte after the &lt;code&gt;NumberOfAtomCacheRefs&lt;/code&gt; byte. Flags for an even &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; are located in the least significant half byte and flags for an odd &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; are located in the most significant half byte.</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; &lt;code&gt;NumberOfAtomCacheRefs&lt;/code&gt; 가 &lt;code&gt;0&lt;/code&gt; 이 아닌 경우 플래그 는 &lt;code&gt;NumberOfAtomCacheRefs/2+1&lt;/code&gt; 바이트 로 구성됩니다 . 경우 &lt;code&gt;NumberOfAtomCacheRefs&lt;/code&gt; 가 있다 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;Flags&lt;/code&gt; 및 &lt;code&gt;AtomCacheRefs&lt;/code&gt; 은 생략한다. 각 아톰 캐시 참조에는 하프 바이트 플래그 필드가 있습니다. 특정 &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; 에 해당하는 플래그 는 플래그 바이트 번호 &lt;code&gt;AtomCacheReferenceIndex/2&lt;/code&gt; 에 있습니다. 플래그 바이트 0은 &lt;code&gt;NumberOfAtomCacheRefs&lt;/code&gt; 바이트 다음의 첫 번째 바이트입니다. 짝수 &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; 에 대한 플래그는 최하위 반 바이트에 있으며 홀수에 대한 플래그 &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; 가장 중요한 반 바이트에 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5430cad4533990dd8600c96776d8000ed7c9460" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Flags&lt;/code&gt; is a list containing all the trace flags to be enabled, currently this is only &lt;code&gt;return_trace&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; 는 활성화 될 모든 추적 플래그를 포함하는 목록이며 현재는 &lt;code&gt;return_trace&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1aeb4da61b8aca40f2fea0ab6c9b8a82e9537522" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FlagsHigh&lt;/code&gt; are the high capability flags (bit 33-64) of node &lt;code&gt;A&lt;/code&gt; as a 32-bit big endian integer. &lt;code&gt;Creation&lt;/code&gt; is the incarnation identifier of node &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FlagsHigh&lt;/code&gt; 는 32 비트 빅 엔디안 정수로서 노드 &lt;code&gt;A&lt;/code&gt; 의 고용량 플래그 (비트 33-64)입니다 . &lt;code&gt;Creation&lt;/code&gt; 은 노드 &lt;code&gt;A&lt;/code&gt; 의 구현 식별자입니다 .</target>
        </trans-unit>
        <trans-unit id="b548c2b0202d75a4ea5929b9b688a38ee3c4d2a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Flush&lt;/code&gt; can be set to &lt;code&gt;finish&lt;/code&gt; immediately after &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit&lt;/a&gt;&lt;/code&gt; if all compression is to be done in one step.</source>
          <target state="translated">&lt;code&gt;Flush&lt;/code&gt; 모든 압축이 한 단계로 수행되는 경우 &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit&lt;/a&gt;&lt;/code&gt; 직후에 플러시 를 &lt;code&gt;finish&lt;/code&gt; 하도록 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="afe6f39081ff14f334873100abaa64fb240efe73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ForeignKey&lt;/code&gt; can either be the atom &lt;code&gt;undefined&lt;/code&gt; or the tuple &lt;code&gt;{ForeignTab, Attr}&lt;/code&gt;, where &lt;code&gt;Attr&lt;/code&gt; denotes an attribute that is to be interpreted as a key in another fragmented table named &lt;code&gt;ForeignTab&lt;/code&gt;. &lt;code&gt;Mnesia&lt;/code&gt; ensures that the number of fragments in this table and in the foreign table are always the same.</source>
          <target state="translated">&lt;code&gt;ForeignKey&lt;/code&gt; 는 &lt;code&gt;undefined&lt;/code&gt; 원자 이거나 튜플 &lt;code&gt;{ForeignTab, Attr}&lt;/code&gt; 일 수 있습니다. 여기서 &lt;code&gt;Attr&lt;/code&gt; 은 &lt;code&gt;ForeignTab&lt;/code&gt; 이라는 다른 조각난 테이블에서 키로 해석되는 속성을 나타냅니다 . &lt;code&gt;Mnesia&lt;/code&gt; 는이 테이블과 외부 테이블의 조각 수가 항상 동일하도록합니다.</target>
        </trans-unit>
        <trans-unit id="e63eafd75f32c95bd3f77e1afc3853c01a0ddb22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Format&lt;/code&gt; and &lt;code&gt;Args&lt;/code&gt; are as in &lt;code&gt;io:format(Format, Args)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Format&lt;/code&gt; 과 &lt;code&gt;Args&lt;/code&gt; 는 &lt;code&gt;io:format(Format, Args)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4a0883fe37562007d1d3a4d6b0005226fdfb9ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Format&lt;/code&gt; can contain the following:</source>
          <target state="translated">&lt;code&gt;Format&lt;/code&gt; 은 다음을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6abb169332994aae43fe283ca0a97f1b61cf110" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Format&lt;/code&gt; is the log format as specified by the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Format&lt;/code&gt; 은 &lt;code&gt;open/1&lt;/code&gt; 옵션 &lt;code&gt;format&lt;/code&gt; 으로 지정된 로그 형식 입니다 .</target>
        </trans-unit>
        <trans-unit id="3325f2fd1fea5fe089ba25e0480a736da6628eb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FormatFun&lt;/code&gt; is called with an argument that describes the selected objects based on optimizations done as a result of analyzing the filters of the QLC where the call to &lt;code&gt;qlc:table/2&lt;/code&gt; occurs. The argument can have the following values:</source>
          <target state="translated">&lt;code&gt;FormatFun&lt;/code&gt; 은 &lt;code&gt;qlc:table/2&lt;/code&gt; 에 대한 호출이 발생 하는 QLC의 필터를 분석 한 결과 수행 된 최적화를 기반으로 선택된 오브젝트를 설명하는 인수와 함께 호출됩니다 . 인수는 다음 값을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bad635e6b2049344cb0a556243127855c6897e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FormatStr&lt;/code&gt; is a format specification string. The valid format specifiers are as follows:</source>
          <target state="translated">&lt;code&gt;FormatStr&lt;/code&gt; 은 형식 지정 문자열입니다. 유효한 형식 지정자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7f45a6a00a687a9621fb988f367495632d4ef50e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FormatterConfig =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-formatter_config&quot;&gt; logger:formatter_config()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FormatterConfig =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-formatter_config&quot;&gt; logger:formatter_config()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acc09b3f1d98be6e6c723613294a62f460f67edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FormatterConfig =&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;logger#type-formatter_config&quot;&gt;logger:formatter_config()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FormatterConfig =&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;logger#type-formatter_config&quot;&gt;logger:formatter_config()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2fe49f2625b49095774c4b3f34d48f2f3d4e63f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Forward from this event&lt;/code&gt; - Set this event to be the first event in the viewer and change its display mode to be enter forward search mode. The actor of this event (from, to or both) will be added to the list of selected actors.</source>
          <target state="translated">&lt;code&gt;Forward from this event&lt;/code&gt; -이 이벤트를 뷰어에서 첫 번째 이벤트로 설정하고 표시 모드를 정방향 검색 모드로 변경하십시오. 이 이벤트의 액터 (부터, 또는 둘 다)가 선택된 액터 목록에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="b489650312c7e126f44cf77ea64a5765f5c3faa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FreeBlocks&lt;/code&gt; is a histogram of the free block sizes in the carrier.</source>
          <target state="translated">&lt;code&gt;FreeBlocks&lt;/code&gt; 는 캐리어의 사용 가능한 블록 크기에 대한 히스토그램입니다.</target>
        </trans-unit>
        <trans-unit id="0ffbabf5620229589e99c43368e2b1ae654c8a44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FrequencyFun/0&lt;/code&gt; returns a fun/1 which is supposed to take a list of items as input, and return an iolist wich will be printed as the table. Per default, the number of each item is counted and the percentage is printed for each. The list [a,b,a,a,c] could for example return</source>
          <target state="translated">&lt;code&gt;FrequencyFun/0&lt;/code&gt; 은 항목 목록을 입력으로 취해야하는 fun / 1을 반환하고 테이블로 인쇄되는 iolist를 반환합니다. 기본적으로 각 항목의 수가 계산되고 각 항목에 대한 백분율이 인쇄됩니다. 예를 들어 [a, b, a, a, c] 목록은 다음을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="858af00f56c830e0f6201e0701ca43078a82a4dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;From&lt;/code&gt; is a tuple &lt;code&gt;{Pid,Tag}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the client and &lt;code&gt;Tag&lt;/code&gt; is a unique tag.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 은 튜플 &lt;code&gt;{Pid,Tag}&lt;/code&gt; 입니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 클라이언트의 pid이고 &lt;code&gt;Tag&lt;/code&gt; 는 고유 한 태그입니다.</target>
        </trans-unit>
        <trans-unit id="4da43e84b728d0ab88c73f25ac9bf0df860a69b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;From&lt;/code&gt; is the &lt;code&gt;pid()&lt;/code&gt; of the client, the process which the I/O server sends the I/O reply to.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 은 I / O 서버가 I / O 응답을 보내는 프로세스 인 클라이언트 의 &lt;code&gt;pid()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2b1f4ccff7fd1c2be22fd8ff1cac5093ef20d22e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;From&lt;/code&gt; is the process identifier of the process that sent the exit signal. See also &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt; process_flag/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 은 종료 신호를 보낸 프로세스의 프로세스 식별자입니다. &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt; process_flag/2&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c7f6ac08d5fda3746b5d6db74f30d09e88cb9f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;From&lt;/code&gt; is the process identifier of the process that sent the exit signal. See also &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 은 종료 신호를 보낸 프로세스의 프로세스 식별자입니다. &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="246bc05207cbf8bd6c7479915606145f0926d296" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;From&lt;/code&gt; is the source &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 은 소스 &lt;code&gt;Address&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="11cf098b0a53d8abd8a4cfc8b9a4662e3266372c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;From&lt;/code&gt; must be the term from argument &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;. A reply or multiple replies canalso be sent using one or several &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;reply_action()&lt;/a&gt;&lt;/code&gt;s from a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt; 인수 에서 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 까지 의 용어 여야합니다 . &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 에서 하나 또는 여러 개의 &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;reply_action()&lt;/a&gt;&lt;/code&gt; 사용하여 응답 또는 여러 개의 응답을 보낼 수도 있습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed9a9c60c9eaabce67d8e427416a2b9bf96cc361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;From&lt;/code&gt; must be the term from argument &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;. A reply or multiple replies canalso be sent using one or several &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;reply_action()&lt;/a&gt;&lt;/code&gt;s from a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;From&lt;/code&gt; 은 인수 &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 까지 의 용어 여야합니다 . &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 에서 하나 또는 여러 개의 &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;reply_action()&lt;/a&gt;&lt;/code&gt; 사용하여 회신 또는 여러 개의 회신을 보낼 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e81e455143f78b82e7174a64cc50f4bc85dddea9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Full&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on whether the halt log is full or not.</source>
          <target state="translated">&lt;code&gt;Full&lt;/code&gt; 중지 로그가 꽉 찼는 지 여부에 따라 Full 은 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="72997ed49915bc66f49e462b9b91b358e760c9f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fun(BackupItems, Acc)&lt;/code&gt; is applied to each item in the backup. The &lt;code&gt;Fun&lt;/code&gt; must return a tuple &lt;code&gt;{BackupItems,NewAcc}&lt;/code&gt;, where &lt;code&gt;BackupItems&lt;/code&gt; is a list of valid backup items, and &lt;code&gt;NewAcc&lt;/code&gt; is a new accumulator value. The returned backup items are written in the target backup.</source>
          <target state="translated">&lt;code&gt;Fun(BackupItems, Acc)&lt;/code&gt; 백업의 각 항목에 Fun (BackupItems, Acc) 이 적용됩니다. &lt;code&gt;Fun&lt;/code&gt; 튜플 반환해야합니다 &lt;code&gt;{BackupItems,NewAcc}&lt;/code&gt; , &lt;code&gt;BackupItems&lt;/code&gt; 이 유효한 백업 항목의 목록을, 그리고 &lt;code&gt;NewAcc&lt;/code&gt; 는 새로운 누적 값입니다. 반환 된 백업 항목은 대상 백업에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="dd8b302768132e28d9afc11cd8ffe3df3a12c15c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fun(BackupItems, Acc)&lt;/code&gt; is applied to each item in the backup. The Fun must return a tuple &lt;code&gt;{ValGoodBackupItems, NewAcc}&lt;/code&gt;, where &lt;code&gt;ValidBackupItems&lt;/code&gt; is a list of valid backup items. &lt;code&gt;NewAcc&lt;/code&gt; is a new accumulator value. The &lt;code&gt;ValidBackupItems&lt;/code&gt; are written to the target backup with the function &lt;code&gt;TargetMod:write/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Fun(BackupItems, Acc)&lt;/code&gt; 백업의 각 항목에 Fun (BackupItems, Acc) 이 적용됩니다. Fun은 튜플 &lt;code&gt;{ValGoodBackupItems, NewAcc}&lt;/code&gt; 반환해야합니다 . 여기서 &lt;code&gt;ValidBackupItems&lt;/code&gt; 는 유효한 백업 항목의 목록입니다. &lt;code&gt;NewAcc&lt;/code&gt; 는 새로운 누산기 값입니다. &lt;code&gt;ValidBackupItems&lt;/code&gt; 는 함수와 목표 백업에 기록 &lt;code&gt;TargetMod:write/2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d85d80aac9c6c3eade15be45b9b3d443c49a8bd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fun&lt;/code&gt; is not a a fun of zero arity.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 는 제로의 재미 가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="77fc7d2a76fccd443d160f69bcb9ce857a3f0356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fun&lt;/code&gt; is not a fun of arity zero.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 는 아리 티 제로의 재미 가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0cc04794ecae87d1f875afc20ca2b99c36c9172c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Fun&lt;/code&gt; is not a fun of zero arity.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 는 제로의 재미 가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="a33923e560aab8b1743a1b221f4e6709cdb96b4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Func = atom()&lt;/code&gt;, name of test case or configuration function.</source>
          <target state="translated">&lt;code&gt;Func = atom()&lt;/code&gt; , 테스트 케이스 이름 또는 구성 함수.</target>
        </trans-unit>
        <trans-unit id="bf4883978cd9c277741ccd630ad38d0b56a78028" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Func&lt;/code&gt; is a fun specifying a (user-defined) function used to format trace output. For each system event, the format function is called as &lt;code&gt;Func(Dev, Event, Info)&lt;/code&gt;, where:</source>
          <target state="translated">&lt;code&gt;Func&lt;/code&gt; 는 추적 출력을 형식화하는 데 사용되는 (사용자 정의) 기능을 지정하는 재미입니다. 각 시스템 이벤트에 대해 형식 함수를 &lt;code&gt;Func(Dev, Event, Info)&lt;/code&gt; 로 호출합니다 . 여기서 :</target>
        </trans-unit>
        <trans-unit id="f6cb1a650c1760c47dbeeb3b299ab1f0404cd9a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Func&lt;/code&gt; is called whenever a system event is generated. This function is to return &lt;code&gt;done&lt;/code&gt;, or a new &lt;code&gt;Func&lt;/code&gt; state. In the first case, the function is removed. It is also removed if the function fails. If one debug function should be installed more times, a unique &lt;code&gt;FuncId&lt;/code&gt; must be specified for each installation.</source>
          <target state="translated">&lt;code&gt;Func&lt;/code&gt; 은 시스템 이벤트가 생성 될 때마다 호출됩니다. 이 함수는 &lt;code&gt;done&lt;/code&gt; 또는 새로운 &lt;code&gt;Func&lt;/code&gt; 상태 를 반환 합니다 . 첫 번째 경우에는 기능이 제거됩니다. 기능이 실패하면 제거됩니다. 하나의 디버그 기능을 여러 번 설치해야하는 경우 각 설치마다 고유 한 &lt;code&gt;FuncId&lt;/code&gt; 를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="cb64f2a167bef6b030c12c50cf8f7f9a0cd556b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FuncName = atom()&lt;/code&gt;, the name of the test case or configuration function.</source>
          <target state="translated">&lt;code&gt;FuncName = atom()&lt;/code&gt; , 테스트 케이스 또는 구성 함수의 이름.</target>
        </trans-unit>
        <trans-unit id="afb24ef245f4b1820eff0fa09024dc07377a1a12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FuncSpec&lt;/code&gt; is the name of the function on the form &lt;code&gt;{Module,Function}&lt;/code&gt; or a fun, and &lt;code&gt;Arguments&lt;/code&gt; is a list of the &lt;strong&gt;evaluated&lt;/strong&gt; arguments. The function handler returns the value of the function. To signal an error, the function handler calls &lt;code&gt;exit/1&lt;/code&gt; with a suitable exit value.</source>
          <target state="translated">&lt;code&gt;FuncSpec&lt;/code&gt; 은 &lt;code&gt;{Module,Function}&lt;/code&gt; 또는 fun 형식의 함수 이름 이며 &lt;code&gt;Arguments&lt;/code&gt; 는 &lt;strong&gt;평가 된&lt;/strong&gt; 인수 의 목록입니다 . 함수 핸들러는 함수 값을 리턴합니다. 오류를 알리기 위해 함수 핸들러 는 적절한 종료 값으로 &lt;code&gt;exit/1&lt;/code&gt; 을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="bc01016d456f7d99de92bdc84c2faae2e27d0986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; - First interpreted function called by the process.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; -프로세스가 호출 한 첫 번째 해석 함수입니다.</target>
        </trans-unit>
        <trans-unit id="f3add1a4e7e40a8886f11204bcf2efef2ba2a626" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; is not an atom.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 은 원자가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="9235827fc16ed656a082fac9cc5738fed6f5c619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; is the name of the funcion used.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 은 사용 된 기능의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="8220b4b0344c2eb20c74bb4ca48b53f4b0f97d1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; is the name of the function used. This tuple always exists if OS monotonic time is available to the runtime system.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 은 사용 된 기능의 이름입니다. 런타임 시스템에서 OS 단조 시간을 사용할 수있는 경우이 튜플은 항상 존재합니다.</target>
        </trans-unit>
        <trans-unit id="05418e524cbb09c73458294c0d29172a224cae6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Functions&lt;/code&gt; is a list &lt;code&gt;[Name1/Arity1, ..., NameN/ArityN]&lt;/code&gt;, where each &lt;code&gt;NameI&lt;/code&gt; is an atom and &lt;code&gt;ArityI&lt;/code&gt; an integer.</source>
          <target state="translated">&lt;code&gt;Functions&lt;/code&gt; 는 &lt;code&gt;[Name1/Arity1, ..., NameN/ArityN]&lt;/code&gt; . 여기서 각 &lt;code&gt;NameI&lt;/code&gt; 는 원자이고 &lt;code&gt;ArityI&lt;/code&gt; 는 정수입니다.</target>
        </trans-unit>
        <trans-unit id="091a313dec4e89a6952d01a06baa35774182e0a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Functions&lt;/code&gt; is a list of the names of the functions that are defined in &lt;code&gt;Forms&lt;/code&gt; (cf. &lt;code&gt;analyze_function/1&lt;/code&gt;). We do not guarantee that each name occurs at most once in the list. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Functions&lt;/code&gt; 는 &lt;code&gt;Forms&lt;/code&gt; 정의 된 함수의 이름 목록입니다 (참조 : &lt;code&gt;analyze_function/1&lt;/code&gt; ). 각 이름은 목록에서 최대 한 번만 발생한다고 보장하지 않습니다. 리스팅 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="55bec2044b1812002f51002dc8c3ec8bd1441d54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GCInfo&lt;/code&gt; is a list containing miscellaneous detailed information about garbage collection for this process. The content of &lt;code&gt;GCInfo&lt;/code&gt; can be changed without prior notice. For details about the meaning of each item, see &lt;code&gt;&lt;a href=&quot;#gc_minor_start&quot;&gt;gc_minor_start&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GCInfo&lt;/code&gt; 는이 프로세스의 가비지 수집에 대한 기타 자세한 정보가 포함 된 목록입니다. &lt;code&gt;GCInfo&lt;/code&gt; 의 내용은 예고없이 변경 될 수 있습니다. 각 항목의 의미에 대한 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;#gc_minor_start&quot;&gt;gc_minor_start&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a94d35b8d992867c565931dd5bfcc71efec71cc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GCInfo&lt;/code&gt; is a list containing miscellaneous information about garbage collection for this process. The content of &lt;code&gt;GCInfo&lt;/code&gt; can be changed without prior notice.</source>
          <target state="translated">&lt;code&gt;GCInfo&lt;/code&gt; 는이 프로세스의 가비지 수집에 대한 기타 정보가 포함 된 목록입니다. &lt;code&gt;GCInfo&lt;/code&gt; 의 내용은 예고없이 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d0cff4c6a16414ff0fa380ee763dae4522ab42c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GCResult&lt;/code&gt; informs about the result of the garbage collection request as follows:</source>
          <target state="translated">&lt;code&gt;GCResult&lt;/code&gt; 는 다음과 같이 가비지 수집 요청 결과를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="d033dbfb999811444c69ae083f6bafbf39665d87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GETCONF&lt;/code&gt; - &lt;code&gt;getconf&lt;/code&gt; system configuration inspection tool. &lt;code&gt;getconf&lt;/code&gt; is currently used for finding out large file support flags to use, and on Linux systems for finding out if we have an NPTL thread library or not.</source>
          <target state="translated">&lt;code&gt;GETCONF&lt;/code&gt; - &lt;code&gt;getconf&lt;/code&gt; 시스템 구성 검사 도구. &lt;code&gt;getconf&lt;/code&gt; 는 현재 사용할 큰 파일 지원 플래그를 찾고 Linux 시스템에서 NPTL 스레드 라이브러리가 있는지 여부를 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d96c2d72912145042a1f8b0b88697441e91c1693" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Geometry&lt;/code&gt; is the atom &lt;code&gt;rows&lt;/code&gt; or the atom &lt;code&gt;columns&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Geometry&lt;/code&gt; 은 원자 &lt;code&gt;rows&lt;/code&gt; 또는 원자 &lt;code&gt;columns&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="41db00fc70c4cc4fd25ce41eeae52740d79118d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GetBin&lt;/code&gt; returns the file contents.</source>
          <target state="translated">&lt;code&gt;GetBin&lt;/code&gt; 은 파일 내용을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="af899557b5485ee8a659bae7a48fe52318540ac1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GetInfo&lt;/code&gt; is a fun that returns information about the file.</source>
          <target state="translated">&lt;code&gt;GetInfo&lt;/code&gt; 는 파일에 대한 정보를 반환하는 재미입니다.</target>
        </trans-unit>
        <trans-unit id="0a042eb638704cf85febfb9b9f33cc6b270bc1ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GotoPF(next_pf);&lt;/code&gt; transfers control to the next instruction.</source>
          <target state="translated">&lt;code&gt;GotoPF(next_pf);&lt;/code&gt; 제어를 다음 명령어로 전송합니다.</target>
        </trans-unit>
        <trans-unit id="70528668dd45bd4358ef264cdfadedac21649261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Grammarfile&lt;/code&gt; is the file of declarations and grammar rules. Returns &lt;code&gt;ok&lt;/code&gt; upon success, or &lt;code&gt;error&lt;/code&gt; if there are errors. An Erlang file containing the parser is created if there are no errors. The options are:</source>
          <target state="translated">&lt;code&gt;Grammarfile&lt;/code&gt; 는 선언과 문법 규칙의 파일입니다. 성공하면 &lt;code&gt;ok&lt;/code&gt; 를 반환 하고 &lt;code&gt;error&lt;/code&gt; 있으면 error를 반환 합니다. 오류가 없으면 구문 분석기가 포함 된 Erlang 파일이 작성됩니다. 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2972a5e03b6658dee110d1ae20784c4ee484f17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupDefs&lt;/code&gt; is what &lt;code&gt;&lt;a href=&quot;ct_suite#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;post_groups/2&lt;/code&gt; hook returned, that is, a list of group definitions.</source>
          <target state="translated">&lt;code&gt;GroupDefs&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;post_groups/2&lt;/code&gt; 후크가 반환 한 것, 즉 그룹 정의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="5e3d7c574b69ec6a5eb5d89575763cf6035660b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupDefs&lt;/code&gt; is what &lt;code&gt;&lt;a href=&quot;ct_suite#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; returned, that is, a list of group definitions.</source>
          <target state="translated">&lt;code&gt;GroupDefs&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; 이 반환 한 것, 즉 그룹 정의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="8304d633e479fe26e2e73cc9ba66c3902f92e21f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupLeader&lt;/code&gt; is the group leader for the I/O of the process.</source>
          <target state="translated">&lt;code&gt;GroupLeader&lt;/code&gt; 는 프로세스 I / O의 그룹 리더입니다.</target>
        </trans-unit>
        <trans-unit id="702e1905dbb2eeb7c346bf1d8abda306f5e06d38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupName = atom()&lt;/code&gt;, name of the group.</source>
          <target state="translated">&lt;code&gt;GroupName = atom()&lt;/code&gt; , 그룹 이름.</target>
        </trans-unit>
        <trans-unit id="3829f0716499518b0456cc34fca233a8c0c42aaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupName = atom()&lt;/code&gt;, the name of the test case group.</source>
          <target state="translated">&lt;code&gt;GroupName = atom()&lt;/code&gt; , 테스트 케이스 그룹의 이름</target>
        </trans-unit>
        <trans-unit id="1efe8e733ab27afd366a056770dc295f78ac9e8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupName = unknown | atom()&lt;/code&gt;, name of the group (unknown if init- or end function times out).</source>
          <target state="translated">&lt;code&gt;GroupName = unknown | atom()&lt;/code&gt; , 그룹 이름 (init 또는 end 함수가 시간 종료되는지 알 수 없음).</target>
        </trans-unit>
        <trans-unit id="257c27098bf44ca543ca9820c44d7858475202d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;GroupName&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="34ecca3ecc4b764ad96e5de668abdc3012485319" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupName&lt;/code&gt; is the name of the group and must be unique within the test suite module. Groups can be nested, by including a group definition within the &lt;code&gt;GroupsAndTestCases&lt;/code&gt; list of another group. &lt;code&gt;Properties&lt;/code&gt; is the list of execution properties for the group. The possible values are as follows:</source>
          <target state="translated">&lt;code&gt;GroupName&lt;/code&gt; 은 그룹 의 이름이며 테스트 스위트 모듈 내에서 고유해야합니다. 다른 그룹 의 &lt;code&gt;GroupsAndTestCases&lt;/code&gt; 목록에 그룹 정의를 포함시켜 그룹을 중첩 할 수 있습니다 . &lt;code&gt;Properties&lt;/code&gt; 은 그룹의 실행 속성 목록입니다. 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2aabb2c54e4a34fd6596177f315ce302afd0d6c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GroupProperties = list()&lt;/code&gt;, list of execution properties for the group.</source>
          <target state="translated">&lt;code&gt;GroupProperties = list()&lt;/code&gt; , 그룹의 실행 속성 목록입니다.</target>
        </trans-unit>
        <trans-unit id="431c0575241feae27ded99208e9c2e9b11d62721" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Groups&lt;/code&gt; is a list of tuples &lt;code&gt;{GroupName, Nodes}&lt;/code&gt;, specifying the name and nodes of the other global groups.</source>
          <target state="translated">&lt;code&gt;Groups&lt;/code&gt; 은 다른 글로벌 그룹의 이름과 노드를 지정하는 튜플 &lt;code&gt;{GroupName, Nodes}&lt;/code&gt; 의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="ada894a5c3364ec8538b5ee01e710b671a134ab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HLen&lt;/code&gt; is less than 5.</source>
          <target state="translated">&lt;code&gt;HLen&lt;/code&gt; 이 5보다 작습니다.</target>
        </trans-unit>
        <trans-unit id="e8a29189f9bb348e68c14e107f6400375902e2fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Handler&lt;/code&gt; is the name of the callback module &lt;code&gt;Module&lt;/code&gt; or a tuple &lt;code&gt;{Module,Id}&lt;/code&gt;, where &lt;code&gt;Id&lt;/code&gt; is any term. The &lt;code&gt;{Module,Id}&lt;/code&gt; representation makes it possible to identify a specific event handler when many event handlers use the same callback module.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 는 콜백 모듈 &lt;code&gt;Module&lt;/code&gt; 또는 tuple &lt;code&gt;{Module,Id}&lt;/code&gt; 의 이름 이며 여기서 &lt;code&gt;Id&lt;/code&gt; 는 임의의 용어입니다. &lt;code&gt;{Module,Id}&lt;/code&gt; 표현은 많은 이벤트 핸들러 같은 콜백 모듈을 사용할 때 가능한 특정 이벤트 핸들러를 식별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="859a4a733c7a0c5ba6018d60e38c76d767305f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Handler&lt;/code&gt; is typically the name of the callback module and &lt;code&gt;Args&lt;/code&gt; is an optional term (defaults to []) passed to the initialization callback function &lt;code&gt;Handler:init/1&lt;/code&gt;. The function returns &lt;code&gt;ok&lt;/code&gt; if successful.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 는 일반적으로 콜백 모듈의 이름이며 &lt;code&gt;Args&lt;/code&gt; 는 초기화 콜백 함수 &lt;code&gt;Handler:init/1&lt;/code&gt; 에 전달되는 선택적 용어 (기본값은 []) 입니다. 성공하면 이 함수는 &lt;code&gt;ok&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2cf423aad5f4891c5d8255c1ce43cd3b620685e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HandlerId&lt;/code&gt; is a unique identifier which must be used in all subsequent calls referring to this handler.</source>
          <target state="translated">&lt;code&gt;HandlerId&lt;/code&gt; 는이 핸들러를 참조하는 모든 후속 호출에서 사용해야하는 고유 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="38973a3c592ebba8c99759348fe21be35f4f872c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hdr&lt;/code&gt; is an optional file header (note that this text is written to the file as is).</source>
          <target state="translated">&lt;code&gt;Hdr&lt;/code&gt; 은 선택적 파일 헤더입니다 (이 텍스트는 그대로 파일에 기록됨).</target>
        </trans-unit>
        <trans-unit id="0a998cbc44126d6e5cb9d07bcc2d54d1e1a3ea1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Head&lt;/code&gt; is a key value list of HTTP header fields. The server constructs an HTTP header from this data. See &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; for the appropriate value for each header field. If the client is an HTTP/1.0 client, the server filters the list so that only HTTP/1.0 header fields are sent back to the client.</source>
          <target state="translated">&lt;code&gt;Head&lt;/code&gt; 는 HTTP 헤더 필드의 키 값 목록입니다. 서버는이 데이터에서 HTTP 헤더를 구성합니다. 각 헤더 필드에 적절한 값 은 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 . 클라이언트가 HTTP / 1.0 클라이언트 인 경우 서버는 목록을 필터링하여 HTTP / 1.0 헤더 필드 만 클라이언트로 다시 전송되도록합니다.</target>
        </trans-unit>
        <trans-unit id="05427eeaa98e190ee611ecb49817bc660090b0e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HeaderLength&lt;/code&gt; determines the number of bytes preceding each binary and containing the length of the binary in bytes. Defaults to 4. The order of the header bytes is defined as follows: if &lt;code&gt;B&lt;/code&gt; is a binary containing a header only, size &lt;code&gt;Size&lt;/code&gt; of the binary is calculated as &lt;code&gt;&amp;lt;&amp;lt;Size:HeaderLength/unit:8&amp;gt;&amp;gt; = B&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeaderLength&lt;/code&gt; 는 각 이진 앞의 바이트 수를 결정하고 이진 길이를 바이트 단위로 포함합니다. 헤더 바이트의 순서는 다음과 같이 정의됩니다. &lt;code&gt;B&lt;/code&gt; 가 헤더 만 포함하는 이진 인 경우 이진의 &lt;code&gt;Size&lt;/code&gt; 는 &lt;code&gt;&amp;lt;&amp;lt;Size:HeaderLength/unit:8&amp;gt;&amp;gt; = B&lt;/code&gt; 로 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="748b2a780e1c6e6c2b2739b548275b5cc3d39022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Heading&lt;/code&gt; is a tuple of strings representing the headings of each column in the table.</source>
          <target state="translated">&lt;code&gt;Heading&lt;/code&gt; 은 표에서 각 열의 제목을 나타내는 문자열 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="4482e972dd62a6efb7010c0e5915552b13d63b78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HibernateAfterTimeout&lt;/code&gt; specifies that the &lt;code&gt;gen_statem&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;HibernateAfterTimeout&lt;/code&gt; 은 &lt;code&gt;gen_statem&lt;/code&gt; 프로세스가 &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; 밀리 초 동안 모든 메시지를 기다리도록 지정하고 메시지가 수신되지 않으면 프로세스가 자동으로 최대 절전 모드로 전환됩니다 ( &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; 호출 ).</target>
        </trans-unit>
        <trans-unit id="ab5ab31bbf1f37f66fd57d9f5eecc277051528be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hide (excluded actors)&lt;/code&gt; - When true, this means that the &lt;code&gt;Viewer&lt;/code&gt; will hide all &lt;code&gt;Events&lt;/code&gt; whose actors are marked as excluded. Excluded actors are normally enclosed in round brackets when they are displayed inthe &lt;code&gt;Viewer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Hide (excluded actors)&lt;/code&gt; -참이면 액터가 제외 된 것으로 표시된 모든 &lt;code&gt;Events&lt;/code&gt; 를 &lt;code&gt;Viewer&lt;/code&gt; 가 숨 깁니다 . 제외 된 액터는 일반적으로 &lt;code&gt;Viewer&lt;/code&gt; 표시 될 때 둥근 괄호로 묶습니다 .</target>
        </trans-unit>
        <trans-unit id="5355e09c615cd2bb902cf3dc5bd3e0c3636f7d5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hide From=To&lt;/code&gt; - When true, this means that the &lt;code&gt;Viewer&lt;/code&gt; will hide all &lt;code&gt;Events&lt;/code&gt; where the from-actor equals to its to-actor. These events are sometimes called actions.</source>
          <target state="translated">&lt;code&gt;Hide From=To&lt;/code&gt; - 참이면 &lt;code&gt;Viewer&lt;/code&gt; 가 From 액터가 To 액터와 같은 모든 &lt;code&gt;Events&lt;/code&gt; 를 숨기 게됩니다 . 이러한 사건을 때때로 행동이라고합니다.</target>
        </trans-unit>
        <trans-unit id="ce0413d4eafcdc91153b0ae50e9909e20cab49fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hide actor in viewer&lt;/code&gt; - Known actors are shown as a named vertical bars in the &lt;code&gt;Viewer&lt;/code&gt; window. By hiding the actor, its vertical bar will be removed and the &lt;code&gt;Viewer&lt;/code&gt; will be refreshed.</source>
          <target state="translated">&lt;code&gt;Hide actor in viewer&lt;/code&gt; -알려진 액터가 &lt;code&gt;Viewer&lt;/code&gt; 창 에 명명 된 세로 막대로 표시됩니다. 액터를 숨기면 세로 막대가 제거되고 &lt;code&gt;Viewer&lt;/code&gt; 가 새로 고쳐집니다.</target>
        </trans-unit>
        <trans-unit id="c545dc77df01a3436f24eb846b84443664b7372e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hiding the actor&lt;/code&gt; is only useful if the &lt;code&gt;max_actors&lt;/code&gt; threshold has been reached, as it then will imply that the &quot;hidden&quot; actor will be displayed as if it were &lt;code&gt;&quot;UNKNOWN&quot;&lt;/code&gt;. If the &lt;code&gt;max_actors&lt;/code&gt; threshold not have been reached, the actor will re-appear as a vertical bar in the &lt;code&gt;Viewer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Hiding the actor&lt;/code&gt; &lt;code&gt;max_actors&lt;/code&gt; 임계 값에 도달 한 경우에만 유용합니다. 그러면 &quot;숨겨진&quot;액터가 마치 &lt;code&gt;&quot;UNKNOWN&quot;&lt;/code&gt; 인 것처럼 표시 될 것 입니다. 는 IF &lt;code&gt;max_actors&lt;/code&gt; 의 임계 값에 도달하지, 배우가에서 수직 막대로 다시 나타납니다 &lt;code&gt;Viewer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd425d01dbfd4c62815da2acdf1c0ea3b092a41f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Highlight actor (toggle)&lt;/code&gt; - Left mouse click on the actor name tag. The actor name will be enclosed in square brackets &lt;code&gt;[]&lt;/code&gt;. When one or more actors are highlighted, only events related to those actors are displayed. All others are hidden.</source>
          <target state="translated">&lt;code&gt;Highlight actor (toggle)&lt;/code&gt; -액터 이름 태그를 마우스 왼쪽 버튼으로 클릭합니다. 액터 이름은 대괄호 &lt;code&gt;[]&lt;/code&gt; 로 묶습니다 . 하나 이상의 액터가 강조 표시되면 해당 액터와 관련된 이벤트 만 표시됩니다. 다른 모든 것은 숨겨져 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cafc7252b24f1a3b971bed7ed457192e895b308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Home&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; represent the keys with the same name on the keyboard.</source>
          <target state="translated">&lt;code&gt;Home&lt;/code&gt; 및 &lt;code&gt;End&lt;/code&gt; 는 키보드에서 이름이 같은 키를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ce72c2da0aec183ebcf5fb28d0dc0367830b3aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Host = hostname()&lt;/code&gt;, see &lt;code&gt;inet(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Host = hostname()&lt;/code&gt; &lt;code&gt;inet(3)&lt;/code&gt; 참조 ) .</target>
        </trans-unit>
        <trans-unit id="37e5e080cff22a4997f8302c34ea6c58dda3555b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;How == write&lt;/code&gt; means closing the socket for writing, reading from it is still possible.</source>
          <target state="translated">&lt;code&gt;How == write&lt;/code&gt; 위해 소켓을 닫아서 읽을 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="ad247bdbcb99e7cd33aaa791cf9cbdea2d5b5c28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Hwaddr&lt;/code&gt; is hardware dependent, for example, on Ethernet interfaces it is the 6-byte Ethernet address (MAC address (EUI-48 address)).</source>
          <target state="translated">&lt;code&gt;Hwaddr&lt;/code&gt; 은 하드웨어에 따라 다릅니다. 예를 들어 이더넷 인터페이스에서는 6 바이트 이더넷 주소 (MAC 주소 (EUI-48 주소))입니다.</target>
        </trans-unit>
        <trans-unit id="2e630cefe5ab4a78f97b066715d0b13c553fdfd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;I += 1;&lt;/code&gt; advances the instruction pointer to the next instruction.</source>
          <target state="translated">&lt;code&gt;I += 1;&lt;/code&gt; 명령어 포인터를 다음 명령어로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="3e78bbc0a9008fccf5f73ff9d94f60475d2d4f8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;I += 2&lt;/code&gt; advances the instruction pointer to the next instruction.</source>
          <target state="translated">&lt;code&gt;I += 2&lt;/code&gt; 는 명령어 포인터를 다음 명령어로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="301a9a27aae07dfc31c530063229e77d5d9c1a02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;I&lt;/code&gt; - An untagged integer that will fit in 32 bits. It can be packed with other operands in a word on a 64-bit system.</source>
          <target state="translated">&lt;code&gt;I&lt;/code&gt; -32 비트에 맞는 태그없는 정수입니다. 64 비트 시스템에서 한 단어에 다른 피연산자로 압축 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e6bee5649f959847740bd3cf1df68a8a95f3cc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;I&lt;/code&gt; in the BEAM virtual machine is the instruction pointer. When BEAM executes an instruction, &lt;code&gt;I&lt;/code&gt; points to the first word of the instruction.</source>
          <target state="translated">&lt;code&gt;I&lt;/code&gt; BEAM 가상 머신에서 I 는 명령 포인터입니다. BEAM이 명령을 실행할 때 &lt;code&gt;I&lt;/code&gt; 는 명령 의 첫 번째 단어를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="9d6a3c00e1e7b906c142a8f786034a8faeefc54b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ID&lt;/code&gt; contains a sequence of big-endian unsigned integers (4 bytes each, so &lt;code&gt;N'&lt;/code&gt; is a multiple of 4), but is to be regarded as uninterpreted data.</source>
          <target state="translated">&lt;code&gt;ID&lt;/code&gt; 에는 빅 엔디안 부호없는 정수 (각 4 바이트, &lt;code&gt;N'&lt;/code&gt; 은 4의 배수) 시퀀스가 포함되어 있지만 해석되지 않은 데이터로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="ca48f9cae796a8b974ce36856d8c1e3271d10157" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IN&lt;/code&gt; reprecents the function called (and its arguments). &lt;code&gt;OUT&lt;/code&gt; represents the unexpected/invalid result.</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt; 은 호출 된 함수 및 인수를 나타냅니다. &lt;code&gt;OUT&lt;/code&gt; 은 예기치 않은 / 잘못된 결과를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0d749093a7fdc77d47cee608738a09d2b6b60099" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IP&lt;/code&gt; and &lt;code&gt;InPortNo&lt;/code&gt; define the address from which &lt;code&gt;Packet&lt;/code&gt; comes. &lt;code&gt;Packet&lt;/code&gt; is a list of bytes if option &lt;code&gt;list&lt;/code&gt; is specified. &lt;code&gt;Packet&lt;/code&gt; is a binary if option &lt;code&gt;binary&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;IP&lt;/code&gt; 및 &lt;code&gt;InPortNo&lt;/code&gt; 는 &lt;code&gt;Packet&lt;/code&gt; 이 들어오는 주소를 정의합니다 . 옵션 &lt;code&gt;list&lt;/code&gt; 이 지정된 경우 &lt;code&gt;Packet&lt;/code&gt; 은 바이트 목록 입니다. 바이너리 옵션 이 지정된 경우 &lt;code&gt;Packet&lt;/code&gt; 은 &lt;code&gt;binary&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c7d9a9f73f33e71b93ecbc9f3f6dff60e7eda11d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Id&lt;/code&gt; - As defined in the child specification or &lt;code&gt;undefined&lt;/code&gt; for a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; - 아이 사양에 정의 또는 &lt;code&gt;undefined&lt;/code&gt; A에 대한 &lt;code&gt;simple_one_for_one&lt;/code&gt; 의 감독자.</target>
        </trans-unit>
        <trans-unit id="8c753376a5fef133650a5c0581da7eeedb008c61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Id&lt;/code&gt; is either the return value of &lt;code&gt;&lt;a href=&quot;#Module:id-1&quot;&gt;ct_hooks:id/1&lt;/a&gt;&lt;/code&gt;, or a &lt;code&gt;reference&lt;/code&gt; (created using &lt;code&gt;erlang:make_ref/0&lt;/code&gt; in ERTS) if &lt;code&gt;&lt;a href=&quot;#Module:id-1&quot;&gt;ct_hooks:id/1&lt;/a&gt;&lt;/code&gt; is not implemented.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#Module:id-1&quot;&gt;ct_hooks:id/1&lt;/a&gt;&lt;/code&gt; 의 리턴 값 이거나 &lt;code&gt;&lt;a href=&quot;#Module:id-1&quot;&gt;ct_hooks:id/1&lt;/a&gt;&lt;/code&gt; 이 구현되지 않은 경우 &lt;code&gt;reference&lt;/code&gt; ( ERTS에서 &lt;code&gt;erlang:make_ref/0&lt;/code&gt; 을 사용하여 작성 됨 ) 입니다.</target>
        </trans-unit>
        <trans-unit id="1fe3c6f0307da4c8e1c9d62774a04844f06e69a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Identifier&lt;/code&gt; is an identifier as described above.</source>
          <target state="translated">&lt;code&gt;Identifier&lt;/code&gt; 는 위에서 설명한 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="1e76f531746852720380a55f71496be41705f3ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Importance&lt;/code&gt; is compared to a verbosity level set by the &lt;code&gt;verbosity&lt;/code&gt; start flag/option. The level can be set per category or generally, or both. If &lt;code&gt;verbosity&lt;/code&gt; is not set by the user, a level of 100 (&lt;code&gt;?MAX_VERBOSITY&lt;/code&gt; = all printouts visible) is used as default value. &lt;code&gt;Common Test&lt;/code&gt; performs the following test:</source>
          <target state="translated">&lt;code&gt;Importance&lt;/code&gt; 은 &lt;code&gt;verbosity&lt;/code&gt; 시작 플래그 / 옵션에 의해 설정된 상세 레벨과 비교됩니다 . 수준은 범주별로 또는 일반적으로 또는 둘 다로 설정할 수 있습니다. 경우 &lt;code&gt;verbosity&lt;/code&gt; 사용자에 의해 설정되지 않으며, (100)의 레벨 ( &lt;code&gt;?MAX_VERBOSITY&lt;/code&gt; = 모든 인쇄물을 표시) 디폴트 값으로서 사용된다. &lt;code&gt;Common Test&lt;/code&gt; 는 다음 테스트를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="9e4f3ff412d3fe6d9bdb41ef320f6c15acf90c5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Imports&lt;/code&gt; is a list of pairs representing those module names and corresponding function names that are listed by import declaration attributes in &lt;code&gt;Forms&lt;/code&gt; (cf. &lt;code&gt;analyze_import_attribute/1&lt;/code&gt;), where each &lt;code&gt;Module&lt;/code&gt; occurs at most once in &lt;code&gt;Imports&lt;/code&gt;. We do not guarantee that each name occurs at most once in the lists of function names. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Imports&lt;/code&gt; 는 각 &lt;code&gt;Module&lt;/code&gt; 이 &lt;code&gt;Imports&lt;/code&gt; 에서 최대 한 번 발생하는 &lt;code&gt;Forms&lt;/code&gt; 의 import 선언 속성으로 표시되는 해당 모듈 이름과 해당 함수 이름을 나타내는 쌍의 목록입니다 ( &lt;code&gt;analyze_import_attribute/1&lt;/code&gt; 참조 ) . 각 이름은 함수 이름 목록에서 최대 한 번만 발생한다고 보장하지 않습니다. 리스팅 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ee11edcd743f37679ed6c290d85c8841d19e87b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InEncoding&lt;/code&gt; defines how input is to be interpreted if binaries are present in &lt;code&gt;Data&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InEncoding&lt;/code&gt; 은 바이너리가 &lt;code&gt;Data&lt;/code&gt; 존재하는 경우 입력을 해석하는 방법을 정의합니다</target>
        </trans-unit>
        <trans-unit id="1f4465eed45b582debf71fd583f7121ae30dcccd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InPool&lt;/code&gt; is whether the carrier is in the migration pool.</source>
          <target state="translated">&lt;code&gt;InPool&lt;/code&gt; 은 캐리어가 마이그레이션 풀에 있는지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="1d306e7bfd91d4601a29391e4524441e83a1382f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Incr&lt;/code&gt; is negative (&lt;code&gt;&amp;lt; 0&lt;/code&gt;) and the result would be less than (&lt;code&gt;&amp;lt;&lt;/code&gt;) &lt;code&gt;Threshold&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Incr&lt;/code&gt; 은 음수 ( &lt;code&gt;&amp;lt; 0&lt;/code&gt; )이며 결과는 ( &lt;code&gt;&amp;lt;&lt;/code&gt; ) &lt;code&gt;Threshold&lt;/code&gt; 보다 작습니다 .</target>
        </trans-unit>
        <trans-unit id="833090c86a4c682b98c9ab332c36b14667d192a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Incr&lt;/code&gt; is not negative (&lt;code&gt;&amp;gt;= 0&lt;/code&gt;) and the result would be greater than (&lt;code&gt;&amp;gt;&lt;/code&gt;) &lt;code&gt;Threshold&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Incr&lt;/code&gt; 은 음수가 아니고 ( &lt;code&gt;&amp;gt;= 0&lt;/code&gt; ) 결과는 ( &lt;code&gt;&amp;gt;&lt;/code&gt; ) &lt;code&gt;Threshold&lt;/code&gt; 보다 큽니다 .</target>
        </trans-unit>
        <trans-unit id="845836b9643a1df11729abc96f28e19cd83cc53d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Index&lt;/code&gt; (an integer) is an index into the module fun table.</source>
          <target state="translated">&lt;code&gt;Index&lt;/code&gt; (정수)는 모듈 fun 테이블에 대한 인덱스입니다.</target>
        </trans-unit>
        <trans-unit id="c769a57d0c8c1afe7ffeaeb70de75a14a74e1192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Index&lt;/code&gt; is the internal index of the port. This index can be used to separate ports.</source>
          <target state="translated">&lt;code&gt;Index&lt;/code&gt; 은 포트의 내부 색인입니다. 이 색인은 포트를 분리하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="84b8ecf842803eecf88faefabd2b1f688dd8f23a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Inets&lt;/code&gt; HTTP server provides two ways of creating dynamic web pages, each with its own advantages and disadvantages:</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; HTTP 서버는 각각 고유 한 장단점이있는 동적 웹 페이지를 작성하는 두 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cc69768fc34540f0de836eebdf85cc613e486f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Inets&lt;/code&gt; is a container for Internet clients and servers including the following:</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; 는 다음을 포함하여 인터넷 클라이언트 및 서버를위한 컨테이너입니다.</target>
        </trans-unit>
        <trans-unit id="55134bff47fe2c7afee969e113ea75b2e99487e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Info&lt;/code&gt; - More information.</source>
          <target state="translated">&lt;code&gt;Info&lt;/code&gt; -자세한 정보.</target>
        </trans-unit>
        <trans-unit id="cb4a69d69345e6b86d53607870fc60e29c85e1b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Info&lt;/code&gt; is a possibly empty lists of tuples &lt;code&gt;{Pid,RefCount}&lt;/code&gt;, one tuple for every process the table is fixed by now. &lt;code&gt;RefCount&lt;/code&gt; is the value of the reference counter and it keeps track of how many times the table has been fixed by the process.</source>
          <target state="translated">&lt;code&gt;Info&lt;/code&gt; 는 비어있는 튜플 목록 &lt;code&gt;{Pid,RefCount}&lt;/code&gt; 이며, 현재 테이블이 수정 된 모든 프로세스에 대해 하나의 튜플입니다. &lt;code&gt;RefCount&lt;/code&gt; 는 참조 카운터의 값이며 프로세스에 의해 테이블이 수정 된 횟수를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="89bf83108f81f245d58990e01fb200ddb703fc15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Info&lt;/code&gt; is either the atom &lt;code&gt;timeout&lt;/code&gt;, if a time-out has occurred, or the received message.</source>
          <target state="translated">&lt;code&gt;Info&lt;/code&gt; &lt;code&gt;timeout&lt;/code&gt; 가 발생한 경우 정보 는 atom 시간 종료 이거나 수신 된 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="e69242ba5f324b8d82fb9afa50701dd0d44bd1fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Info&lt;/code&gt; is the received message.</source>
          <target state="translated">&lt;code&gt;Info&lt;/code&gt; 는받은 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="7e90bcc56cde7f69b3370374198e593e932d89b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Info&lt;/code&gt; is used to pass more information to &lt;code&gt;Func&lt;/code&gt;. It can be any term and is passed as is.</source>
          <target state="translated">&lt;code&gt;Info&lt;/code&gt; 는 &lt;code&gt;Func&lt;/code&gt; 에 더 많은 정보를 전달하는 데 사용됩니다 . 임의의 용어 일 수 있으며 그대로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="4f4ada19f50880b79a4598ccc5d15efc3a20087e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InfoList&lt;/code&gt; is a list of tuples. Its contents depends on &lt;code&gt;Options&lt;/code&gt;, see below.</source>
          <target state="translated">&lt;code&gt;InfoList&lt;/code&gt; 는 튜플 목록입니다. 내용은 &lt;code&gt;Options&lt;/code&gt; 따라 다릅니다 ( 아래 참조).</target>
        </trans-unit>
        <trans-unit id="67fee6430e48afabc2b911839e220e34e3a04cc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InitData&lt;/code&gt; is the original configuration list of the test suite, or a &lt;code&gt;SkipOrFail&lt;/code&gt; tuple if a previous CTH has returned this.</source>
          <target state="translated">&lt;code&gt;InitData&lt;/code&gt; 는 테스트 스위트의 원래 구성 목록이거나 이전 CTH가이를 리턴 한 경우 &lt;code&gt;SkipOrFail&lt;/code&gt; 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="cb1d49e7b6974e5a2c02e1d22a140e2a13ed2690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Input&lt;/code&gt; is query data of a GET request or the body of a PUT or POST request. The default behavior (legacy reasons) for delivering the body, is that the whole body is gathered and converted to a string. But if the httpd config parameter &lt;code&gt;&lt;a href=&quot;httpd#max_client_body_chunk&quot;&gt;max_client_body_chunk&lt;/a&gt;&lt;/code&gt; is set, the body will be delivered as binary chunks instead. The maximum size of the chunks is either &lt;code&gt;&lt;a href=&quot;httpd#max_client_body_chunk&quot;&gt;max_client_body_chunk&lt;/a&gt;&lt;/code&gt; or decide by the client if it uses HTTP chunked encoding to send the body. When using the chunking mechanism this callback must return {continue, State::term()} for all calls where &lt;code&gt;Input&lt;/code&gt; is &lt;code&gt;{first, Data::binary()}&lt;/code&gt; or &lt;code&gt;{continue, Data::binary(), State::term()}&lt;/code&gt;. When &lt;code&gt;Input&lt;/code&gt; is &lt;code&gt;{last, Data::binary(), State::term()}&lt;/code&gt; the return value will be ignored.</source>
          <target state="translated">&lt;code&gt;Input&lt;/code&gt; 은 GET 요청의 쿼리 데이터 또는 PUT 또는 POST 요청의 본문입니다. 본문을 전달하는 기본 동작 (레거시 이유)은 전신이 수집되어 문자열로 변환되는 것입니다. 그러나 httpd 구성 매개 변수 &lt;code&gt;&lt;a href=&quot;httpd#max_client_body_chunk&quot;&gt;max_client_body_chunk&lt;/a&gt;&lt;/code&gt; 를 설정하면 본문이 대신 이진 청크로 전달됩니다. 청크의 최대 크기는 &lt;code&gt;&lt;a href=&quot;httpd#max_client_body_chunk&quot;&gt;max_client_body_chunk&lt;/a&gt;&lt;/code&gt; 이거나 클라이언트가 HTTP 청크 인코딩을 사용하여 본문을 보낼지 여부를 결정합니다. 청크 메커니즘을 사용할 때이 콜백은 &lt;code&gt;Input&lt;/code&gt; 이 &lt;code&gt;{first, Data::binary()}&lt;/code&gt; 또는 &lt;code&gt;{continue, Data::binary(), State::term()}&lt;/code&gt; 모든 호출에 대해 {continue, State :: term ()}을 반환해야합니다. ()} . 때 &lt;code&gt;Input&lt;/code&gt; 있다 &lt;code&gt;{last, Data::binary(), State::term()}&lt;/code&gt; 반환 값은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="6e31c1f2bf829cce31821629ba02c4c8db825469" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InternalSegmentIndex&lt;/code&gt; together with the &lt;code&gt;SegmentIndex&lt;/code&gt; completely identify the location of an atom cache entry in the atom cache. &lt;code&gt;Length&lt;/code&gt; is the number of bytes that &lt;code&gt;AtomText&lt;/code&gt; consists of. Length is a 2 byte big-endian integer if flag &lt;code&gt;LongAtoms&lt;/code&gt; has been set, otherwise a 1 byte integer. When distribution flag &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#DFLAG_UTF8_ATOMS&quot;&gt; DFLAG_UTF8_ATOMS&lt;/a&gt;&lt;/code&gt; has been exchanged between both nodes in the &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt; distribution handshake&lt;/a&gt;&lt;/code&gt;, characters in &lt;code&gt;AtomText&lt;/code&gt; are encoded in UTF-8, otherwise in Latin-1. The following &lt;code&gt;CachedAtomRef&lt;/code&gt;s with the same &lt;code&gt;SegmentIndex&lt;/code&gt; and &lt;code&gt;InternalSegmentIndex&lt;/code&gt; as this &lt;code&gt;NewAtomCacheRef&lt;/code&gt; refer to this atom until a new &lt;code&gt;NewAtomCacheRef&lt;/code&gt; with the same &lt;code&gt;SegmentIndex&lt;/code&gt; and &lt;code&gt;InternalSegmentIndex&lt;/code&gt; appear.</source>
          <target state="translated">&lt;code&gt;InternalSegmentIndex&lt;/code&gt; 는 &lt;code&gt;SegmentIndex&lt;/code&gt; 와 함께 원자 캐시에서 원자 캐시 항목의 위치를 ​​완전히 식별합니다. &lt;code&gt;Length&lt;/code&gt; 는 &lt;code&gt;AtomText&lt;/code&gt; 가 구성하는 바이트 수 입니다. &lt;code&gt;LongAtoms&lt;/code&gt; 플래그 가 설정된 경우 길이는 2 바이트 빅 엔디안 정수이고 , 그렇지 않으면 1 바이트 정수입니다. 유통 플래그 때 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#DFLAG_UTF8_ATOMS&quot;&gt; DFLAG_UTF8_ATOMS&lt;/a&gt;&lt;/code&gt; 가 의 두 노드 사이에 교환 된 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt; distribution handshake&lt;/a&gt;&lt;/code&gt; , 문자 &lt;code&gt;AtomText&lt;/code&gt; 는 달리 라틴어 1, UTF-8로 인코딩됩니다. 이와 동일한 &lt;code&gt;SegmentIndex&lt;/code&gt; 및 &lt;code&gt;InternalSegmentIndex&lt;/code&gt; 를 가진 다음 &lt;code&gt;CachedAtomRef&lt;/code&gt; &lt;code&gt;NewAtomCacheRef&lt;/code&gt; 는 동일한 &lt;code&gt;SegmentIndex&lt;/code&gt; 및 &lt;code&gt;InternalSegmentIndex&lt;/code&gt; 를 가진 새 &lt;code&gt;NewAtomCacheRef&lt;/code&gt; 가 나타날 때까지이 원자를 참조합니다 .</target>
        </trans-unit>
        <trans-unit id="600738a890b5f56b515c93969303d142cb887e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InternalSegmentIndex&lt;/code&gt; together with the &lt;code&gt;SegmentIndex&lt;/code&gt; completely identify the location of an atom cache entry in the atom cache. &lt;code&gt;Length&lt;/code&gt; is the number of bytes that &lt;code&gt;AtomText&lt;/code&gt; consists of. Length is a 2 byte big-endian integer if flag &lt;code&gt;LongAtoms&lt;/code&gt; has been set, otherwise a 1 byte integer. When distribution flag &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_UTF8_ATOMS&lt;/a&gt;&lt;/code&gt; has been exchanged between both nodes in the &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt;distribution handshake&lt;/a&gt;&lt;/code&gt;, characters in &lt;code&gt;AtomText&lt;/code&gt; are encoded in UTF-8, otherwise in Latin-1. The following &lt;code&gt;CachedAtomRef&lt;/code&gt;s with the same &lt;code&gt;SegmentIndex&lt;/code&gt; and &lt;code&gt;InternalSegmentIndex&lt;/code&gt; as this &lt;code&gt;NewAtomCacheRef&lt;/code&gt; refer to this atom until a new &lt;code&gt;NewAtomCacheRef&lt;/code&gt; with the same &lt;code&gt;SegmentIndex&lt;/code&gt; and &lt;code&gt;InternalSegmentIndex&lt;/code&gt; appear.</source>
          <target state="translated">&lt;code&gt;InternalSegmentIndex&lt;/code&gt; 와 &lt;code&gt;SegmentIndex&lt;/code&gt; 를 함께 사용하면 아톰 캐시에서 아톰 캐시 항목의 위치를 ​​완전히 식별 할 수 있습니다. &lt;code&gt;Length&lt;/code&gt; 는 &lt;code&gt;AtomText&lt;/code&gt; 가 구성하는 바이트 수 입니다. &lt;code&gt;LongAtoms&lt;/code&gt; 플래그 가 설정된 경우 길이는 2 바이트 빅 엔디안 정수이고 , 그렇지 않으면 1 바이트 정수입니다. 유통 플래그 때 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_UTF8_ATOMS&lt;/a&gt;&lt;/code&gt; 가 의 두 노드 사이에 교환 된 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt;distribution handshake&lt;/a&gt;&lt;/code&gt; , 문자 &lt;code&gt;AtomText&lt;/code&gt; 는 달리 라틴어 1, UTF-8로 인코딩됩니다. 다음과 같은 &lt;code&gt;SegmentIndex&lt;/code&gt; 및 &lt;code&gt;InternalSegmentIndex&lt;/code&gt; 를 가진 다음 &lt;code&gt;CachedAtomRef&lt;/code&gt; &lt;code&gt;NewAtomCacheRef&lt;/code&gt; 는 동일한 &lt;code&gt;SegmentIndex&lt;/code&gt; 및 &lt;code&gt;InternalSegmentIndex&lt;/code&gt; 를 가진 새 &lt;code&gt;NewAtomCacheRef&lt;/code&gt; 가 나타날 때까지이 아톰을 참조합니다 .</target>
        </trans-unit>
        <trans-unit id="21aaeb17bd510f220d6fb06a3695dae8c8f9f05c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InternalSegmentIndex&lt;/code&gt; together with the &lt;code&gt;SegmentIndex&lt;/code&gt; identify the location of the atom cache entry in the atom cache. The atom corresponding to this &lt;code&gt;CachedAtomRef&lt;/code&gt; is the latest &lt;code&gt;NewAtomCacheRef&lt;/code&gt; preceding this &lt;code&gt;CachedAtomRef&lt;/code&gt; in another previously passed distribution header.</source>
          <target state="translated">&lt;code&gt;InternalSegmentIndex&lt;/code&gt; 와 &lt;code&gt;SegmentIndex&lt;/code&gt; 를 함께 사용하여 아톰 캐시에서 아톰 캐시 항목의 위치를 ​​식별합니다. 이 &lt;code&gt;CachedAtomRef&lt;/code&gt; 에 해당하는 아톰 은 이전에 전달 된 다른 배포 헤더 에서이 &lt;code&gt;CachedAtomRef&lt;/code&gt; 보다 앞에 오는 최신 &lt;code&gt;NewAtomCacheRef&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cc64f3c07a7c0ed51e9e926a33414fbd3ac35d6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InternalTraceFlags&lt;/code&gt; is an integer representing the internal trace flag for this process. This &lt;code&gt;InfoTuple&lt;/code&gt; can be changed or removed without prior notice.</source>
          <target state="translated">&lt;code&gt;InternalTraceFlags&lt;/code&gt; 는이 프로세스의 내부 추적 플래그를 나타내는 정수입니다. 이 &lt;code&gt;InfoTuple&lt;/code&gt; 은 사전 통지없이 변경되거나 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25e48926513b449cb4dd5b5821f99f3b17b0ed49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IoDevice&lt;/code&gt; is really the pid of the process that handles the file. This process is linked to the process that originally opened the file. If any process to which the &lt;code&gt;IoDevice&lt;/code&gt; is linked terminates, the file is closed and the process itself is terminated. An &lt;code&gt;IoDevice&lt;/code&gt; returned from this call can be used as an argument to the I/O functions (see &lt;code&gt;io(3)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; 는 실제로 파일을 처리하는 프로세스의 pid입니다. 이 프로세스는 원래 파일을 연 프로세스와 연결되어 있습니다. 어떤 공정이있는 경우에 &lt;code&gt;IoDevice&lt;/code&gt; 는 종료를 링크 파일 닫히고 처리 자체를 종료한다. 이 호출에서 반환 된 &lt;code&gt;IoDevice&lt;/code&gt; 는 I / O 함수에 대한 인수로 사용될 수 있습니다 ( &lt;code&gt;io(3)&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="c7ffaa3eaf9098260a7e100a80bd4d2a9007dd35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IoDevice&lt;/code&gt; is really the pid of the process that handles the file. This process monitors the process that originally opened the file (the owner process). If the owner process terminates, the file is closed and the process itself terminates too. An &lt;code&gt;IoDevice&lt;/code&gt; returned from this call can be used as an argument to the I/O functions (see &lt;code&gt;io(3)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; 는 실제로 파일을 처리하는 프로세스의 pid입니다. 이 프로세스는 원래 파일을 연 프로세스 (소유자 프로세스)를 모니터링합니다. 소유자 프로세스가 종료되면 파일이 닫히고 프로세스 자체도 종료됩니다. 이 호출에서 반환 된 &lt;code&gt;IoDevice&lt;/code&gt; 는 I / O 함수에 대한 인수로 사용할 수 있습니다 ( &lt;code&gt;io(3)&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="57b8380e384eef46fdc8f05b16a225b528571b0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Item&lt;/code&gt; can be one of the following.</source>
          <target state="translated">&lt;code&gt;Item&lt;/code&gt; 은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69d4a62415669a19fbc684ab9bf98c3d5bcc77b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Kernel&lt;/code&gt; responds with one of the following messages:</source>
          <target state="translated">&lt;code&gt;Kernel&lt;/code&gt; 은 다음 메시지 중 하나로 응답합니다.</target>
        </trans-unit>
        <trans-unit id="4b1933bfdb1645938c138a0ea8c4e681251357b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Key&lt;/code&gt; in the first tuple where both &lt;code&gt;Mode&lt;/code&gt; and &lt;code&gt;Module&lt;/code&gt; match is used.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 모두 첫 번째 튜플의 &lt;code&gt;Mode&lt;/code&gt; 및 &lt;code&gt;Module&lt;/code&gt; 일치가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0d7c0c6d93f703fbcfc5b601d7a23e050ba6a6d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Key&lt;/code&gt; is the authentication key with a length according to the &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;SubType&lt;/code&gt;. The key length could be found with the &lt;code&gt;&lt;a href=&quot;#hash_info-1&quot;&gt;hash_info/1&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;hmac&lt;/code&gt;) for and &lt;code&gt;&lt;a href=&quot;#cipher_info-1&quot;&gt;cipher_info/1&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;cmac&lt;/code&gt;) functions. For &lt;code&gt;poly1305&lt;/code&gt; the key length is 32 bytes. Note that the cryptographic quality of the key is not checked.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 는 &lt;code&gt;Type&lt;/code&gt; 과 &lt;code&gt;SubType&lt;/code&gt; 에 따른 길이의 인증 키입니다 . 키 길이는 &lt;code&gt;&lt;a href=&quot;#hash_info-1&quot;&gt;hash_info/1&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;hmac&lt;/code&gt; ) for 및 &lt;code&gt;&lt;a href=&quot;#cipher_info-1&quot;&gt;cipher_info/1&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;cmac&lt;/code&gt; ) 함수 로 찾을 수 있습니다 . 들어 &lt;code&gt;poly1305&lt;/code&gt; 키 길이는 32 바이트입니다. 키의 암호화 품질은 확인되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e56d32320f3c27219fdf60a2e14e4c7f75ba5d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&lt;/code&gt; - A label. Only used by the &lt;code&gt;label/1&lt;/code&gt; instruction.</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; - 레이블. &lt;code&gt;label/1&lt;/code&gt; 명령어 에서만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="198d9079bba10ca1595ca3b5ac00dc96243dc530" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&lt;/code&gt; specifies the maximum line length in bytes. Lines longer than this are delivered in more than one message, with &lt;code&gt;Flag&lt;/code&gt; set to &lt;code&gt;noeol&lt;/code&gt; for all but the last message. If end of file is encountered anywhere else than immediately following a newline sequence, the last line is also delivered with &lt;code&gt;Flag&lt;/code&gt; set to &lt;code&gt;noeol&lt;/code&gt;. Otherwise lines are delivered with &lt;code&gt;Flag&lt;/code&gt; set to &lt;code&gt;eol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; 은 최대 라인 길이를 바이트 단위로 지정합니다. 이보다 긴 행은 둘 이상의 메시지로 전달되며 마지막 메시지를 제외한 모든 메시지에 대해 &lt;code&gt;Flag&lt;/code&gt; 가 &lt;code&gt;noeol&lt;/code&gt; 로 설정됩니다 . 줄 바꿈 순서 바로 다음이 아닌 다른 곳에서 파일 끝이 발견되면 마지막 줄도 &lt;code&gt;Flag&lt;/code&gt; 가 &lt;code&gt;noeol&lt;/code&gt; 로 설정되어 제공 됩니다. 그렇지 않으면, &lt;code&gt;Flag&lt;/code&gt; 가 &lt;code&gt;eol&lt;/code&gt; 로 설정된 라인이 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="1faa947a6609ede2214bb5114172a1e53e0a876d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LD&lt;/code&gt; - Linker.</source>
          <target state="translated">&lt;code&gt;LD&lt;/code&gt; - 링커.</target>
        </trans-unit>
        <trans-unit id="57c9a76caae8a7bf463bc255e31c964ded3cfe61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LDFLAGS&lt;/code&gt; - Linker flags.</source>
          <target state="translated">&lt;code&gt;LDFLAGS&lt;/code&gt; - 링커 플래그.</target>
        </trans-unit>
        <trans-unit id="235e2d6ec483f254244a6882f92e9e031df4d280" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LFS_CFLAGS&lt;/code&gt; - Large file support C compiler flags.</source>
          <target state="translated">&lt;code&gt;LFS_CFLAGS&lt;/code&gt; - 큰 파일 지원 C 컴파일러 플래그.</target>
        </trans-unit>
        <trans-unit id="27301fa65edd6447dc4bc052320f0e460343c9e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LFS_LDFLAGS&lt;/code&gt; - Large file support linker flags.</source>
          <target state="translated">&lt;code&gt;LFS_LDFLAGS&lt;/code&gt; - 큰 파일 지원 링커 플래그.</target>
        </trans-unit>
        <trans-unit id="5ee91aefe73d75260a864231ee6a589c5234f3eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LFS_LIBS&lt;/code&gt; - Large file support libraries.</source>
          <target state="translated">&lt;code&gt;LFS_LIBS&lt;/code&gt; - 큰 파일 지원 라이브러리.</target>
        </trans-unit>
        <trans-unit id="98f86b7801cc83cb4ad74260c2e3e1f01df98850" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LIBS&lt;/code&gt; - Libraries.</source>
          <target state="translated">&lt;code&gt;LIBS&lt;/code&gt; - 라이브러리.</target>
        </trans-unit>
        <trans-unit id="8c08c4329ff232ebd7fcf28f8527058b7dd34b12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LU&lt;/code&gt; is a subset of &lt;code&gt;F&lt;/code&gt; (the locally used functions are either local functions or exported functions, again ensured by the compiler);</source>
          <target state="translated">&lt;code&gt;LU&lt;/code&gt; 는 &lt;code&gt;F&lt;/code&gt; 의 부분 집합입니다 (로컬로 사용되는 함수는 로컬 함수이거나 내 보낸 함수이며 다시 컴파일러에 의해 보장됨).</target>
        </trans-unit>
        <trans-unit id="e1f9466dce03029a97b72bbe36827ba7893d859d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LU&lt;/code&gt; is a subset of &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LU&lt;/code&gt; 는 &lt;code&gt;F&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="af090d0f385de95cd1a56baf697e425b59daaccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LU&lt;/code&gt; is equal to &lt;code&gt;range LC&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LU&lt;/code&gt; 는 &lt;code&gt;range LC&lt;/code&gt; 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f5f2ca63cdc96e40d4cf9db9d65df82f417d2239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Last&lt;/code&gt; - Scrolls &lt;code&gt;all&lt;/code&gt; viewers to the last &lt;code&gt;Event&lt;/code&gt; in the &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Last&lt;/code&gt; - &lt;code&gt;all&lt;/code&gt; 뷰어를 &lt;code&gt;Collector&lt;/code&gt; 의 마지막 &lt;code&gt;Event&lt;/code&gt; 로 스크롤 합니다 .</target>
        </trans-unit>
        <trans-unit id="b1eb894b8126ca830ac7206e7019f6c0feedc71a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Last&lt;/code&gt; - Scrolls &lt;code&gt;this&lt;/code&gt; viewer to the last &lt;code&gt;Event&lt;/code&gt; in the &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Last&lt;/code&gt; - &lt;code&gt;this&lt;/code&gt; 뷰어를 &lt;code&gt;Collector&lt;/code&gt; 의 마지막 &lt;code&gt;Event&lt;/code&gt; 로 스크롤 합니다 .</target>
        </trans-unit>
        <trans-unit id="cc9e23aef8cd69c463f5629e2c0b8e591c67ae78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LastAcc&lt;/code&gt; is the last accumulator value, that is, the last &lt;code&gt;NewAcc&lt;/code&gt; value that was returned by &lt;code&gt;Fun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LastAcc&lt;/code&gt; 는 마지막 누산기 값, 즉 &lt;code&gt;Fun&lt;/code&gt; 에서 반환 한 마지막 &lt;code&gt;NewAcc&lt;/code&gt; 값입니다 .</target>
        </trans-unit>
        <trans-unit id="2d2483f459bea356e073c77b3e5c32426593b6ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LastAcc&lt;/code&gt; is the last accumulator value. This is the last &lt;code&gt;NewAcc&lt;/code&gt; value that was returned by &lt;code&gt;Fun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LastAcc&lt;/code&gt; 는 마지막 누산기 값입니다. &lt;code&gt;Fun&lt;/code&gt; 이 반환 한 마지막 &lt;code&gt;NewAcc&lt;/code&gt; 값입니다 .</target>
        </trans-unit>
        <trans-unit id="f59d16019723b1e96956aba6f1c8aa1569c2aa9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; represent the corresponding arrow keys.</source>
          <target state="translated">&lt;code&gt;Left&lt;/code&gt; 및 &lt;code&gt;Right&lt;/code&gt; 은 해당 화살표 키를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="99275e02ca37946ceddbd090a2bab46b7b19e519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Length&lt;/code&gt; is the number of elements that follows in section &lt;code&gt;Elements&lt;/code&gt;. &lt;code&gt;Tail&lt;/code&gt; is the final tail of the list; it is &lt;code&gt;&lt;a href=&quot;#NIL_EXT&quot;&gt;NIL_EXT&lt;/a&gt;&lt;/code&gt; for a proper list, but can be any type if the list is improper (for example, &lt;code&gt;[a|b]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Length&lt;/code&gt; 부에서 다음 요소의 개수 &lt;code&gt;Elements&lt;/code&gt; . &lt;code&gt;Tail&lt;/code&gt; 는 목록의 마지막 꼬리입니다. 그것이 &lt;code&gt;&lt;a href=&quot;#NIL_EXT&quot;&gt;NIL_EXT&lt;/a&gt;&lt;/code&gt; 적절한 목록 있지만 목록 부적절한 경우 임의의 타입 일 수있다 (예를 들어, &lt;code&gt;[a|b]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f8f90bc0771be72325c249b2f487f3ab49a1b0e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Level = error | warning | info&lt;/code&gt; and is taken from the function name. &lt;code&gt;Report&lt;/code&gt; contains the actual log message, and &lt;code&gt;Metadata&lt;/code&gt; contains additional information which can be used for creating backwards compatible events for legacy &lt;code&gt;error_logger&lt;/code&gt; event handlers, see section &lt;code&gt;&lt;a href=&quot;#legacy_event_handlers&quot;&gt;Legacy Event Handlers&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Level = error | warning | info&lt;/code&gt; 및 함수 이름에서 가져옵니다. &lt;code&gt;Report&lt;/code&gt; 에는 실제 로그 메시지 가 포함 되고 &lt;code&gt;Metadata&lt;/code&gt; 에는 레거시 &lt;code&gt;error_logger&lt;/code&gt; 이벤트 핸들러에 대한 이전 버전과 호환되는 이벤트를 작성하는 데 사용할 수있는 추가 정보가 포함됩니다 ( &lt;code&gt;&lt;a href=&quot;#legacy_event_handlers&quot;&gt;Legacy Event Handlers&lt;/a&gt;&lt;/code&gt; 섹션 참조) .</target>
        </trans-unit>
        <trans-unit id="3102f81ab7ec5c1f3019d9e47f0ac574c450f68c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Level&lt;/code&gt; decides the compression level to be used:</source>
          <target state="translated">&lt;code&gt;Level&lt;/code&gt; 은 사용할 압축 수준을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="d2e03135bf5a6b7af17c58aed4e8c59a8ea9a21d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Level&lt;/code&gt; is the current priority level for the process. For more information on priorities, see &lt;code&gt;&lt;a href=&quot;#process_flag_priority&quot;&gt; process_flag(priority, Level)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Level&lt;/code&gt; 은 프로세스의 현재 우선 순위 레벨입니다. 우선 순위에 대한 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#process_flag_priority&quot;&gt; process_flag(priority, Level)&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b560caa51e8cc84d8dfd63f86f550fb4665de894" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Level&lt;/code&gt; is the current priority level for the process. For more information on priorities, see &lt;code&gt;&lt;a href=&quot;#process_flag_priority&quot;&gt;process_flag(priority, Level)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Level&lt;/code&gt; 은 프로세스의 현재 우선 순위 레벨입니다. 우선 순위에 대한 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#process_flag_priority&quot;&gt;process_flag(priority, Level)&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f48cf9a0c82cf595de0d39c717c258f6f13b81f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Level&lt;/code&gt; must be an integer in the interval &lt;code&gt;[0, 9]&lt;/code&gt;, where &lt;code&gt;0&lt;/code&gt; means no compression and &lt;code&gt;9&lt;/code&gt; means maximum compression. Before setting it to a non-zero value, ensure that the remote nodes understand this configuration.</source>
          <target state="translated">&lt;code&gt;Level&lt;/code&gt; 은 &lt;code&gt;[0, 9]&lt;/code&gt; 간격의 정수 여야합니다. 여기서 &lt;code&gt;0&lt;/code&gt; 은 압축이 없음을 의미하고 &lt;code&gt;9&lt;/code&gt; 는 최대 압축을 의미합니다. 0이 아닌 값으로 설정하기 전에 원격 노드가이 구성을 이해하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="8d986355c740d502587d4f3b776cfe0401826a88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LineLength&lt;/code&gt; is the maximum line length; defaults to 80.</source>
          <target state="translated">&lt;code&gt;LineLength&lt;/code&gt; 는 최대 줄 길이입니다. 기본값은 80입니다.</target>
        </trans-unit>
        <trans-unit id="ebb2a2555af18372271c07f85b33100b31815ab4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List2&lt;/code&gt; is a list of all elements &lt;code&gt;Elem&lt;/code&gt; in &lt;code&gt;List1&lt;/code&gt; for which &lt;code&gt;Pred(Elem)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List2&lt;/code&gt; 모든 요소의 목록입니다 &lt;code&gt;Elem&lt;/code&gt; 모델 에 &lt;code&gt;List1&lt;/code&gt; 입니다 있는 &lt;code&gt;Pred(Elem)&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2ff38951d684483bae54e155971e93930510d796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List&lt;/code&gt; can contain any Erlang terms.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 에는 Erlang 용어가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06fd63f74ee55e4aa51c9a02c4e87773ebbe5896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List&lt;/code&gt; must be an already bound variable.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 은 이미 바인딩 된 변수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="398cf8d9c61aa899be0ebbec829e398ad38a53c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListExpr&lt;/code&gt; must be an expression that evaluates to a list of terms.</source>
          <target state="translated">&lt;code&gt;ListExpr&lt;/code&gt; 은 용어 목록으로 평가되는 표현식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="3d9c7daf9ab424a237e0a1f08f354572367d5e93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListExpr&lt;/code&gt; must be an expression, which evaluates to a list of terms.</source>
          <target state="translated">&lt;code&gt;ListExpr&lt;/code&gt; 은 표현식이어야하며 용어 목록으로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="468cb7f0952ac2bf33b191fdde94b6d3809cbfec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListOfMibNames&lt;/code&gt; is a list of compiled MIBs, for example &lt;code&gt;[&quot;RFC1213-MIB&quot;, &quot;MY-MIB&quot;]&lt;/code&gt;. The function also performs consistency checking of trap definitions.</source>
          <target state="translated">&lt;code&gt;ListOfMibNames&lt;/code&gt; 는 컴파일 된 MIB의 목록입니다 (예 : &lt;code&gt;[&quot;RFC1213-MIB&quot;, &quot;MY-MIB&quot;]&lt;/code&gt; . 이 기능은 트랩 정의의 일관성 검사도 수행합니다.</target>
        </trans-unit>
        <trans-unit id="ea6848e2356d89cf146f8ecdbf155c4ce26d98ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;List_Selector&lt;/code&gt; makes it possible to choose one of the encoded components in a a &lt;code&gt;SEQUENCE OF&lt;/code&gt; or a &lt;code&gt;SET OF&lt;/code&gt;. It is also possible to go further in that component and pick a subtype of that to decode. So, in the &lt;code&gt;Type_List&lt;/code&gt;: &lt;code&gt;['Window',status,buttonList,[1],number]&lt;/code&gt;, component &lt;code&gt;buttonList&lt;/code&gt; must be of type &lt;code&gt;SEQUENCE OF&lt;/code&gt; or &lt;code&gt;SET OF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List_Selector&lt;/code&gt; 를 사용하면 &lt;code&gt;SEQUENCE OF&lt;/code&gt; 또는 &lt;code&gt;SET OF&lt;/code&gt; 에서 인코딩 된 구성 요소 중 하나를 선택할 수 있습니다 . 해당 컴포넌트에서 더 나아가서 디코딩 할 서브 타입을 선택하는 것도 가능합니다. 따라서 &lt;code&gt;Type_List&lt;/code&gt; : &lt;code&gt;['Window',status,buttonList,[1],number]&lt;/code&gt; 에서 구성 요소 &lt;code&gt;buttonList&lt;/code&gt; 는 &lt;code&gt;SEQUENCE OF&lt;/code&gt; 또는 &lt;code&gt;SET OF&lt;/code&gt; 유형이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="8913db602383cdf125bceb9549713ffd51fae301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Load configuration&lt;/code&gt; - Loads a new configuration from file.</source>
          <target state="translated">&lt;code&gt;Load configuration&lt;/code&gt; 로드-파일에서 새 구성을로드합니다.</target>
        </trans-unit>
        <trans-unit id="fba54532627fc931b84a56bfad4ef6cfcd9df24d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Load events to the Collector from file&lt;/code&gt; - Loads the &lt;code&gt;Collector&lt;/code&gt; with &lt;code&gt;Events&lt;/code&gt; from a file and notifies all connected &lt;code&gt;Viewers&lt;/code&gt; about this.</source>
          <target state="translated">&lt;code&gt;Load events to the Collector from file&lt;/code&gt; 에서 &lt;code&gt;Collector&lt;/code&gt; 로 &lt;code&gt;Events&lt;/code&gt; 로드- 파일에서 이벤트로 수집기를 로드하고 연결된 모든 &lt;code&gt;Viewers&lt;/code&gt; 에게이를 알립니다 .</target>
        </trans-unit>
        <trans-unit id="b62c641a445fa8aac0921162416a864a87d9ce96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LoadInfo&lt;/code&gt; can be any term. It is passed on to the library as part of the initialization. A good practice is to include a module version number to support future code upgrade scenarios.</source>
          <target state="translated">&lt;code&gt;LoadInfo&lt;/code&gt; 는 임의의 용어 일 수 있습니다. 초기화의 일부로 라이브러리에 전달됩니다. 향후 코드 업그레이드 시나리오를 지원하기 위해 모듈 버전 번호를 포함시키는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3bb1a61a4696f6f08b58624a0bbb6a79cbd3d304" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LocalFile&lt;/code&gt; and &lt;code&gt;RemoteFile&lt;/code&gt; must be absolute paths.</source>
          <target state="translated">&lt;code&gt;LocalFile&lt;/code&gt; 및 &lt;code&gt;RemoteFile&lt;/code&gt; 은 절대 경로 여야합니다.</target>
        </trans-unit>
        <trans-unit id="13979b09c2228a3f222553b64b24450171b39d6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Location&lt;/code&gt; is a (possibly empty) list of two-tuples that can indicate the location in the source code of the function. The first element is an atom describing the type of information in the second element. The following items can occur:</source>
          <target state="translated">&lt;code&gt;Location&lt;/code&gt; 는 함수의 소스 코드에서 위치를 표시 할 수있는 두 개의 튜플 목록입니다 (비어있을 수 있음). 첫 번째 요소는 두 번째 요소의 정보 유형을 설명하는 원자입니다. 다음과 같은 항목이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a35d58a02012cb09eca606229a9d600c643f121" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Location&lt;/code&gt; is only allowed to be an integer for &lt;code&gt;raw&lt;/code&gt; and &lt;code&gt;ram&lt;/code&gt; modes.</source>
          <target state="translated">&lt;code&gt;Location&lt;/code&gt; 는 &lt;code&gt;raw&lt;/code&gt; 및 &lt;code&gt;ram&lt;/code&gt; 모드에 대해서만 정수가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36dc8ca8d5c14a49814cee8f6dbe9c4ba2ef3818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Location&lt;/code&gt; is only allowed to be an integer.</source>
          <target state="translated">&lt;code&gt;Location&lt;/code&gt; 는 정수만 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="c1bc3fcaa2969ca096fa4d60d18fe4a57a14b3f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LockType&lt;/code&gt; specifies what type of lock that is to be acquired for the iteration, default is &lt;code&gt;read&lt;/code&gt;. If records are written or deleted during the iteration, a write lock is to be acquired.</source>
          <target state="translated">&lt;code&gt;LockType&lt;/code&gt; 은 반복에 대해 획득 할 잠금 유형을 지정합니다 . 기본값은 &lt;code&gt;read&lt;/code&gt; 입니다. 반복 중에 레코드를 쓰거나 삭제하면 쓰기 잠금이 획득됩니다.</target>
        </trans-unit>
        <trans-unit id="15f1ff3f19e0c290c165d53be446c326b140e9a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Locking&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Locking&lt;/code&gt; 은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="f998ddc1734a0791bda940babae62c268c1ee6a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Log&lt;/code&gt; is the log name as specified by the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Log&lt;/code&gt; 는 &lt;code&gt;open/1&lt;/code&gt; 옵션 &lt;code&gt;name&lt;/code&gt; 으로 지정된 로그 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="2640e69e5b240e7e4eda83f2710d754038918fbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LogDir = string()&lt;/code&gt;, top-level log directory for the test run.</source>
          <target state="translated">&lt;code&gt;LogDir = string()&lt;/code&gt; , 테스트 실행을위한 최상위 로그 디렉토리.</target>
        </trans-unit>
        <trans-unit id="ccff0ac3c771239c3b0024204f52b0d26625dbd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LogDir&lt;/code&gt; is the name of the directory where the audit trail log is stored. &lt;code&gt;Mibs&lt;/code&gt; is a list of Mibs to be used. The function uses the information in the Mibs to convert for example object identifiers to their symbolic name. &lt;code&gt;OutFile&lt;/code&gt; is the name of the generated text-file. &lt;code&gt;LogName&lt;/code&gt; is the name of the log, &lt;code&gt;LogFile&lt;/code&gt; is the name of the log file. &lt;code&gt;Start&lt;/code&gt; is the start (first) date and time from which log events will be converted and &lt;code&gt;Stop&lt;/code&gt; is the stop (last) date and time to which log events will be converted. The &lt;code&gt;Block&lt;/code&gt; argument indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LogDir&lt;/code&gt; 은 감사 추적 로그가 저장된 디렉토리의 이름입니다. &lt;code&gt;Mibs&lt;/code&gt; 는 사용할 Mibs의 목록입니다. 이 함수는 Mibs의 정보를 사용하여 예를 들어 객체 식별자를 기호 이름으로 변환합니다. &lt;code&gt;OutFile&lt;/code&gt; 은 생성 된 텍스트 파일의 이름입니다. &lt;code&gt;LogName&lt;/code&gt; 은 로그 이름이고 &lt;code&gt;LogFile&lt;/code&gt; 은 로그 파일 이름입니다. &lt;code&gt;Start&lt;/code&gt; 은 로그 이벤트가 변환 될 시작 (첫 번째) 날짜 및 시간이고 &lt;code&gt;Stop&lt;/code&gt; 는 로그 이벤트가 변환 될 중지 (마지막) 날짜 및 시간입니다. &lt;code&gt;Block&lt;/code&gt; 인수는 변환 중에 로그를 차단해야하는지 여부를 나타냅니다. 큰 로그를 변환 할 때 유용합니다 (그렇지 않으면 변환 중에 로그가 랩핑 될 수있는 경우). 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b328f2e9480af763cf3d883568c8d91d127597e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LogFileName = string()&lt;/code&gt;, full name of the test case log file.</source>
          <target state="translated">&lt;code&gt;LogFileName = string()&lt;/code&gt; , 테스트 케이스 로그 파일의 전체 이름</target>
        </trans-unit>
        <trans-unit id="f4e7b30b915b94deb30a1fd0ccc1a2d2da0372a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Logger&lt;/code&gt; is the function used for audit trail logging.</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; 는 감사 추적 로깅에 사용되는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="013ab73a971db4aa57a9ac8f34a8e95e9ec0bf4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LookupFun&lt;/code&gt; is used for looking up objects in the table.</source>
          <target state="translated">&lt;code&gt;LookupFun&lt;/code&gt; 은 테이블에서 개체를 찾는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b2a6a1e8fb15a964b587f7fd4b88b23619c6c690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;M-f&lt;/code&gt; means pressing the &lt;strong&gt;Esc&lt;/strong&gt; key and the letter &lt;code&gt;f&lt;/code&gt; in sequence.</source>
          <target state="translated">&lt;code&gt;M-f&lt;/code&gt; 는 &lt;strong&gt;Esc&lt;/strong&gt; 키와 문자 &lt;code&gt;f&lt;/code&gt; 를 차례로 누르는 것을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="7a53a9f6e65034affd359f36522a609ce2ddd02e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;M&lt;/code&gt; is an optional translation modifier (of which &lt;code&gt;t&lt;/code&gt; is the only supported, meaning Unicode translation).</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; 은 선택적 변환 수정 자입니다 (이 중 &lt;code&gt;t&lt;/code&gt; 는 유니 코드 변환을 의미하는 유일한 지원).</target>
        </trans-unit>
        <trans-unit id="51b11665957ef179f982c4165416b19c25078f52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;M&lt;/code&gt; is equal to &lt;code&gt;AM + LM + UM&lt;/code&gt;, where &lt;code&gt;AM&lt;/code&gt;, &lt;code&gt;LM&lt;/code&gt; and &lt;code&gt;UM&lt;/code&gt; are pairwise disjoint.</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; 은 &lt;code&gt;AM + LM + UM&lt;/code&gt; 과 같습니다. 여기서 &lt;code&gt;AM&lt;/code&gt; , &lt;code&gt;LM&lt;/code&gt; 및 &lt;code&gt;UM&lt;/code&gt; 은 쌍으로 분리되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="aaf9d081b375db6e4424d9b9e7830152b7771e10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ME&lt;/code&gt; is equal to &lt;code&gt;(Mod) E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ME&lt;/code&gt; 는 &lt;code&gt;(Mod) E&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9cd64dbfcbcdec7d06e4b7aba2d62135c5fd2012" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MFA&lt;/code&gt; is the supplied callback function. When &lt;code&gt;nteventlog&lt;/code&gt; receives information about a new event, this function will be called as &lt;code&gt;apply(Mod, Func, [Event|Args])&lt;/code&gt; where &lt;code&gt;Event&lt;/code&gt; is a tuple</source>
          <target state="translated">&lt;code&gt;MFA&lt;/code&gt; 는 제공된 콜백 함수입니다. 때 &lt;code&gt;nteventlog&lt;/code&gt; 새로운 이벤트에 대한 정보를 수신,이 함수는 다음과 같이 호출됩니다 &lt;code&gt;apply(Mod, Func, [Event|Args])&lt;/code&gt; 여기서 &lt;code&gt;Event&lt;/code&gt; 튜플이다</target>
        </trans-unit>
        <trans-unit id="283624fa2e9d4b0acc67a07ec6552a4f4b459f9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MODULE&lt;/code&gt; is the name of the Erlang module as an identifier without string quotations. It is stringified by the macro.</source>
          <target state="translated">&lt;code&gt;MODULE&lt;/code&gt; 은 Erlang 모듈의 이름으로 문자열 인용 부호가없는 식별자입니다. 매크로에 의해 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="16cd1fdb00e0335721ad29ae210cbc4c9f35d85d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MPModel&lt;/code&gt; is &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2c&lt;/code&gt; or &lt;code&gt;v3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MPModel&lt;/code&gt; 은 &lt;code&gt;v1&lt;/code&gt; , &lt;code&gt;v2c&lt;/code&gt; 또는 &lt;code&gt;v3&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f13fda4f024af3713884843abc4b6771df9db7c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MSAcc_Thread_Type&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;MSAcc_Thread_Type&lt;/code&gt;s:</target>
        </trans-unit>
        <trans-unit id="c970b764cf2d02177ce8b01c917d137bc921f084" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mac&lt;/code&gt; will be a binary with at most &lt;code&gt;MacLength&lt;/code&gt; bytes. Note that if &lt;code&gt;MacLength&lt;/code&gt; is greater than the actual number of bytes returned from the underlying hash, the returned hash will have that shorter length instead.</source>
          <target state="translated">&lt;code&gt;Mac&lt;/code&gt; 은 &lt;code&gt;MacLength&lt;/code&gt; 바이트 이하 의 바이너리입니다 . 경우주의 &lt;code&gt;MacLength&lt;/code&gt; 은 기본 해시에서 반환 된 실제 바이트 수보다 큰 경우, 반환 된 해시 대신에 짧은 길이있을 것이다.</target>
        </trans-unit>
        <trans-unit id="d6abc44c5ddb1be069baf7b27b2c991b1a0f107d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MacLength&lt;/code&gt; will limit the size of the resultant &lt;code&gt;Mac&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MacLength&lt;/code&gt; 는 결과 &lt;code&gt;Mac&lt;/code&gt; 의 크기를 제한합니다 .</target>
        </trans-unit>
        <trans-unit id="309ea84fe8b00b11b9c1fd2bef28360d98535036" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Majority&lt;/code&gt; must be a boolean. Default is &lt;code&gt;false&lt;/code&gt;. When &lt;code&gt;true&lt;/code&gt;, a majority of the table replicas must be available for an update to succeed. When used on fragmented tables, &lt;code&gt;Tab&lt;/code&gt; must be the base table name. Directly changing the majority setting on individual fragments is not allowed.</source>
          <target state="translated">&lt;code&gt;Majority&lt;/code&gt; 는 부울이어야합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 때 &lt;code&gt;true&lt;/code&gt; 업데이트가 성공하기 위해서는, 테이블 복제본의 대부분은 사용할 수 있어야합니다. 조각난 테이블에서 사용되는 경우 &lt;code&gt;Tab&lt;/code&gt; 은 기본 테이블 이름이어야합니다. 개별 조각에서 다수 설정을 직접 변경하는 것은 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2f743798afbc2fb99d007d8798422165f47e75b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Match&lt;/code&gt; is &lt;code&gt;prefix&lt;/code&gt; or &lt;code&gt;exact&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Match&lt;/code&gt; 는 &lt;code&gt;prefix&lt;/code&gt; 또는 &lt;code&gt;exact&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="275e125f911c29450fc6e142b633af7d445a9d1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MatchBody&lt;/code&gt; constructs the return values.</source>
          <target state="translated">&lt;code&gt;MatchBody&lt;/code&gt; 는 반환 값을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="3edd34d6364f444692d0847425a9379e5b5193ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MatchCondition&lt;/code&gt; is a list of extra constraints applied to each record.</source>
          <target state="translated">&lt;code&gt;MatchCondition&lt;/code&gt; 은 각 레코드에 적용되는 추가 제약 조건의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="4f576fd583637c933fbce7f84bafb7fdffc9b278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MatchHead&lt;/code&gt; is the same pattern as used in &lt;code&gt;mnesia:match_object/3&lt;/code&gt; described earlier.</source>
          <target state="translated">&lt;code&gt;MatchHead&lt;/code&gt; 는 앞에서 설명한 &lt;code&gt;mnesia:match_object/3&lt;/code&gt; 에서 사용 된 것과 동일한 패턴 입니다.</target>
        </trans-unit>
        <trans-unit id="b72b7c51458ad32f88e5502818879e7efc1ba6fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MaxBytes = integer()&lt;/code&gt; and &lt;code&gt;MaxFiles = integer()&lt;/code&gt;. Defines the properties of the (&lt;code&gt;disk_log(3)&lt;/code&gt;) error log file. This file is of type wrap log and max bytes is written to each file and max files is used before the first file is truncated and reused.</source>
          <target state="translated">&lt;code&gt;MaxBytes = integer()&lt;/code&gt; 및 &lt;code&gt;MaxFiles = integer()&lt;/code&gt; 입니다. ( &lt;code&gt;disk_log(3)&lt;/code&gt; ) 오류 로그 파일 의 속성을 정의합니다 . 이 파일은 랩 로그 유형이며 최대 바이트는 각 파일에 기록되며 최대 파일은 첫 번째 파일이 잘리고 재사용되기 전에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="452d9dc0607030be28d814ed2c9eea72218ced06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MaxBytes = integer()&lt;/code&gt; and &lt;code&gt;MaxFiles = integer()&lt;/code&gt;. Defines the properties of the &lt;code&gt;disk_log(3)&lt;/code&gt; access log file. This file is of type wrap log and max bytes is written to each file and max files is used before the first file is truncated and reused.</source>
          <target state="translated">&lt;code&gt;MaxBytes = integer()&lt;/code&gt; 및 &lt;code&gt;MaxFiles = integer()&lt;/code&gt; 입니다. &lt;code&gt;disk_log(3)&lt;/code&gt; 액세스 로그 파일 의 속성을 정의합니다 . 이 파일은 랩 로그 유형이며 최대 바이트는 각 파일에 기록되며 최대 파일은 첫 번째 파일이 잘리고 재사용되기 전에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b18d57e4b62a0949a610bcea08bf38fd5c285813" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MaxMessageSize&lt;/code&gt; is an integer (default: 2048).</source>
          <target state="translated">&lt;code&gt;MaxMessageSize&lt;/code&gt; 는 정수입니다 (기본값 : 2048).</target>
        </trans-unit>
        <trans-unit id="13ec2404fd11daf9e2ea6fd29fa5d9ce310d7bb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MaxMessageSize&lt;/code&gt; is the max message size for outgoing messages to this agent (integer).</source>
          <target state="translated">&lt;code&gt;MaxMessageSize&lt;/code&gt; 는이 에이전트 (정수)로 보내는 메시지의 최대 메시지 크기입니다.</target>
        </trans-unit>
        <trans-unit id="6339742b86d1b61878afcd3d57589ba44d20648b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Message&lt;/code&gt; is a record where the &lt;code&gt;data&lt;/code&gt; field is assumed to be encoded (a list of bytes). If there is a v1 or v2 message, the &lt;code&gt;data&lt;/code&gt; field is an encoded &lt;code&gt;PDU&lt;/code&gt;, and if there is a v3 message, &lt;code&gt;data&lt;/code&gt; is an encoded and possibly encrypted &lt;code&gt;scopedPDU&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Message&lt;/code&gt; 는 &lt;code&gt;data&lt;/code&gt; 필드가 인코딩 된 것으로 간주 되는 레코드 (바이트 목록)입니다. v1 또는 v2 메시지가있는 경우 &lt;code&gt;data&lt;/code&gt; 필드는 인코딩 된 &lt;code&gt;PDU&lt;/code&gt; 이고 v3 메시지가있는 경우 &lt;code&gt;data&lt;/code&gt; 는 인코딩되고 암호화 된 &lt;code&gt;scopedPDU&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="94cb4026839f62c1552baa1b27ad50f22602ff37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Message&lt;/code&gt; is something which may be converted into a string by calling &lt;code&gt;Module:format_error(Message)&lt;/code&gt; and printed with &lt;code&gt;io:format/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Message&lt;/code&gt; 는 &lt;code&gt;Module:format_error(Message)&lt;/code&gt; 를 호출하여 문자열로 변환되어 &lt;code&gt;io:format/3&lt;/code&gt; 으로 인쇄 될 수있는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="5c8daf14bcbe67572813cec0c5a0393b0e6abdd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MessageQueue&lt;/code&gt; is a list of the messages to the process, which have not yet been processed.</source>
          <target state="translated">&lt;code&gt;MessageQueue&lt;/code&gt; 는 아직 처리되지 않은 프로세스에 대한 메시지 목록입니다.</target>
        </trans-unit>
        <trans-unit id="2d6efe0e5aaf0e1be4e00be1c769c20f54d133e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MessageQueueLen&lt;/code&gt; is the number of messages currently in the message queue of the process. This is the length of the list &lt;code&gt;MessageQueue&lt;/code&gt; returned as the information item &lt;code&gt;messages&lt;/code&gt; (see below).</source>
          <target state="translated">&lt;code&gt;MessageQueueLen&lt;/code&gt; 은 현재 프로세스의 메시지 큐에있는 메시지 수입니다. 정보 항목 &lt;code&gt;messages&lt;/code&gt; 로 리턴 된 &lt;code&gt;MessageQueue&lt;/code&gt; 목록의 길이입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="ded802f494d0891b830134482eff5997bfcbdad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Method = string()&lt;/code&gt; and &lt;code&gt;CgiScript = string()&lt;/code&gt;. &lt;code&gt;script&lt;/code&gt; adds an action activating a CGI script whenever a file is requested using a certain HTTP method. The method is either GET or POST, as defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;. It propagates the URL and file path of the requested document using the standard CGI PATH_INFO and PATH_TRANSLATED environment variables.</source>
          <target state="translated">&lt;code&gt;Method = string()&lt;/code&gt; 및 &lt;code&gt;CgiScript = string()&lt;/code&gt; 입니다. &lt;code&gt;script&lt;/code&gt; 는 파일이 특정 HTTP 메소드를 사용하여 요청 될 때마다 CGI 스크립트를 활성화하는 조치를 추가합니다. 이 방법은 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; 에 정의 된 대로 GET 또는 POST 입니다. 표준 CGI PATH_INFO 및 PATH_TRANSLATED 환경 변수를 사용하여 요청 된 문서의 URL 및 파일 경로를 전파합니다.</target>
        </trans-unit>
        <trans-unit id="a0b31e3c9f26b9c54df3f761b970e3cf68156cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MimeType = string()&lt;/code&gt; and &lt;code&gt;CgiScript = string()&lt;/code&gt;. &lt;code&gt;action&lt;/code&gt; adds an action activating a CGI script whenever a file of a certain MIME type is requested. It propagates the URL and file path of the requested document using the standard CGI PATH_INFO and PATH_TRANSLATED environment variables.</source>
          <target state="translated">&lt;code&gt;MimeType = string()&lt;/code&gt; 및 &lt;code&gt;CgiScript = string()&lt;/code&gt; 입니다. &lt;code&gt;action&lt;/code&gt; 은 특정 MIME 유형의 파일이 요청 될 때마다 CGI 스크립트를 활성화하는 조치를 추가합니다. 표준 CGI PATH_INFO 및 PATH_TRANSLATED 환경 변수를 사용하여 요청 된 문서의 URL 및 파일 경로를 전파합니다.</target>
        </trans-unit>
        <trans-unit id="65ff4b2ae1ac3cd3b04bcb879e2fa0ce0882e44b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MimeType = string()&lt;/code&gt; and &lt;code&gt;Extension = string()&lt;/code&gt;. Files delivered to the client are MIME typed according to RFC 1590. File suffixes are mapped to MIME types before file delivery. The mapping between file suffixes and MIME types can be specified as an Apache-like file or directly in the property list. Such a file can look like the follwoing:</source>
          <target state="translated">&lt;code&gt;MimeType = string()&lt;/code&gt; 및 &lt;code&gt;Extension = string()&lt;/code&gt; 입니다. 클라이언트에 전달 된 파일은 RFC 1590에 따라 MIME 형식이 지정됩니다. 파일 접미사는 파일 전달 전에 MIME 형식으로 매핑됩니다. 파일 접미사와 MIME 형식 간의 매핑은 Apache와 유사한 파일로 지정하거나 속성 목록에서 직접 지정할 수 있습니다. 이러한 파일은 다음과 같이 보일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fac6ed4fd72f756cb109436ff23232b391592b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MinBinVHeapSize&lt;/code&gt; is the minimum binary virtual heap size for the process.</source>
          <target state="translated">&lt;code&gt;MinBinVHeapSize&lt;/code&gt; 는 프로세스의 최소 이진 가상 힙 크기입니다.</target>
        </trans-unit>
        <trans-unit id="55ee40dabf9e70ed8bc05b2fd1d7a8598aa3536c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MinHeapSize&lt;/code&gt; is the minimum heap size for the process.</source>
          <target state="translated">&lt;code&gt;MinHeapSize&lt;/code&gt; 는 프로세스의 최소 힙 크기입니다.</target>
        </trans-unit>
        <trans-unit id="aff5f6f1fba1c8630ef8136daa4cc2ab137312fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; also provides some functions that make it possible for the user to iterate over the table. The order of the iteration is unspecified if the table is not of type &lt;code&gt;ordered_set&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 또한 사용자가 테이블을 반복 할 수있는 몇 가지 기능을 제공합니다. 테이블이 &lt;code&gt;ordered_set&lt;/code&gt; 유형이 아닌 경우 반복 순서는 지정되지 않습니다. .</target>
        </trans-unit>
        <trans-unit id="72bab2f2e7dbed966a9b097d31a8a391f98e2968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; can be run on nodes that do not have a disc. Replicas of &lt;code&gt;disc_copies&lt;/code&gt; or &lt;code&gt;disc_only_copies&lt;/code&gt; are not possible on such nodes. This is especially troublesome for the &lt;code&gt;schema&lt;/code&gt; table, as &lt;code&gt;Mnesia&lt;/code&gt; needs the schema to initialize itself.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 디스크가없는 노드에서 실행될 수 있습니다. 그러한 노드 에서는 &lt;code&gt;disc_copies&lt;/code&gt; 또는 &lt;code&gt;disc_only_copies&lt;/code&gt; 의 복제본을 사용할 수 없습니다. 이는 &lt;code&gt;Mnesia&lt;/code&gt; 와 같이 &lt;code&gt;schema&lt;/code&gt; 테이블에 특히 문제가 됩니다 . 가 스키마를 초기화하려면 스키마가 필요하기 됩니다.</target>
        </trans-unit>
        <trans-unit id="f2609373a83fbc8204970f36cd2f1e4776df935c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; detected a fatal error and terminates soon. The fault reason is explained in &lt;code&gt;Format&lt;/code&gt; and &lt;code&gt;Args&lt;/code&gt;, which can be given as input to &lt;code&gt;io:format/2&lt;/code&gt; or sent to &lt;code&gt;error_logger&lt;/code&gt;. By default it is sent to &lt;code&gt;error_logger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 치명적인 오류를 감지하고 곧 종료됩니다. 결함 이유는 &lt;code&gt;Format&lt;/code&gt; 및 &lt;code&gt;Args&lt;/code&gt; 에 설명되어 있으며 &lt;code&gt;io:format/2&lt;/code&gt; 에 입력 하거나 &lt;code&gt;error_logger&lt;/code&gt; 로 보낼 수 있습니다. 기본적으로 &lt;code&gt;error_logger&lt;/code&gt; 로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="ee6a7b99eec02e23c166195f05749c569caf3d44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; detected something that can be of interest when debugging the system. This is explained in &lt;code&gt;Format&lt;/code&gt; and &lt;code&gt;Args&lt;/code&gt;, which can appear as input to &lt;code&gt;io:format/2&lt;/code&gt; or sent to &lt;code&gt;error_logger&lt;/code&gt;. By default this event is printed with &lt;code&gt;io:format/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 시스템을 디버깅 할 때 관심이있는 것을 감지했습니다. 이는 &lt;code&gt;Format&lt;/code&gt; 및 &lt;code&gt;Args&lt;/code&gt; 에 설명되어 있으며 &lt;code&gt;io:format/2&lt;/code&gt; 의 입력으로 표시 되거나 &lt;code&gt;error_logger&lt;/code&gt; 로 전송 될 수 있습니다. 기본적으로이 이벤트는 &lt;code&gt;io:format/2&lt;/code&gt; 로 인쇄됩니다 . .</target>
        </trans-unit>
        <trans-unit id="a2b1f244ecd502c00758a3331c19a873ff173835" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; dynamically sets and releases locks as transactions execute. It is therefore dangerous to execute code with transaction side-effects. In particular, a &lt;code&gt;receive&lt;/code&gt; statement inside a transaction can lead to a situation where the transaction hangs and never returns, which in turn can cause locks not to release. This situation can bring the whole system to a standstill, as other transactions that execute in other processes, or on other nodes, are forced to wait for the defective transaction.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 트랜잭션이 실행될 때 잠금을 동적으로 설정 및 해제합니다. 따라서 트랜잭션 부작용으로 코드를 실행하는 것은 위험합니다. 특히, &lt;code&gt;receive&lt;/code&gt; 트랜잭션 내부 문은 트랜잭션이 멈추고 다시는 반환되지 않는 상황으로 이어질 수 있으며 이로 인해 잠금이 해제되지 않을 수 있습니다. 다른 프로세스 또는 다른 노드에서 실행되는 다른 트랜잭션이 결함있는 트랜잭션을 기다려야하므로이 상황은 전체 시스템을 정지시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87f4f84d4356334fa38b1abb99eef835d8aa4691" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; employs a strategy whereby functions, such as &lt;code&gt;&lt;a href=&quot;mnesia#read-1&quot;&gt;mnesia:read/1&lt;/a&gt;&lt;/code&gt; acquire the necessary locks dynamically as the transactions execute. &lt;code&gt;Mnesia&lt;/code&gt; automatically sets and releases the locks and the programmer does not need to code these operations.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;mnesia#read-1&quot;&gt;mnesia:read/1&lt;/a&gt;&lt;/code&gt; 과 같은 기능 이 트랜잭션이 실행될 때 필요한 잠금을 동적으로 획득 하는 전략을 사용합니다 . &lt;code&gt;Mnesia&lt;/code&gt; 자동으로 잠금을 설정 및 해제하므로 프로그래머는 이러한 작업을 코딩 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="74f76a1a75b72b1dbdff75bb67c4d843182e6bc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; event handling</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 이벤트 처리</target>
        </trans-unit>
        <trans-unit id="e99a0fa363fa2461243f4eddf870e4a68c6ccf7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 기능</target>
        </trans-unit>
        <trans-unit id="d73d96b53e3f52fe90e21b382aaeb1cbba1bcc16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; has detected an error. The fault reason is explained in &lt;code&gt;Format&lt;/code&gt; and &lt;code&gt;Args&lt;/code&gt;, which can be given as input to &lt;code&gt;io:format/2&lt;/code&gt; or sent to &lt;code&gt;error_logger&lt;/code&gt;. By default this event is reported to &lt;code&gt;error_logger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 가 오류를 감지했습니다. 결함 이유는 &lt;code&gt;Format&lt;/code&gt; 및 &lt;code&gt;Args&lt;/code&gt; 에 설명되어 있으며 &lt;code&gt;io:format/2&lt;/code&gt; 에 입력 하거나 &lt;code&gt;error_logger&lt;/code&gt; 로 보낼 수 있습니다. 기본적으로이 이벤트는 &lt;code&gt;error_logger&lt;/code&gt; 에보고됩니다 .</target>
        </trans-unit>
        <trans-unit id="2d18d98588a4a575c8b1cccd2f93c49bd9908660" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; has no special counter records. However, records of the form &lt;code&gt;{TabName, Key, Integer}&lt;/code&gt; can be used as counters, and can be persistent.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 에는 특별한 카운터 기록이 없습니다. 그러나 &lt;code&gt;{TabName, Key, Integer}&lt;/code&gt; 형식의 레코드는 카운터로 사용될 수 있으며 지속적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98bdca3374bd3826856d73bfb4a25975c2769d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; has various functions for defining the database schema. Tables can be moved or deleted, and the table layout can be reconfigured.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 에는 데이터베이스 스키마를 정의하기위한 다양한 기능이 있습니다. 테이블을 이동하거나 삭제할 수 있으며 테이블 레이아웃을 재구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="976b28f8bfcf3eb8fe0b6c3746dfae23025a07fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; is a distributed DBMS where data can be replicated on several nodes. In many applications, it is important that a series of write operations are performed atomically inside a transaction. The atomicity property ensures that a transaction takes effect on all nodes, or none.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 여러 노드에서 데이터를 복제 할 수있는 분산 DBMS입니다. 많은 응용 프로그램에서 일련의 쓰기 작업이 트랜잭션 내부에서 원자 적으로 수행되는 것이 중요합니다. 원 자성 속성은 트랜잭션이 모든 노드에 적용되거나 전혀 수행되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="50a11369cdd67f344988dd61fde42143473b47d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; is a distributed, fault-tolerant DBMS. Tables can be replicated on different Erlang nodes in various ways. The &lt;code&gt;Mnesia&lt;/code&gt; programmer does not need to state where the different tables reside, only the names of the different tables need to be specified in the program code. This is known as &quot;location transparency&quot; and is an important concept. In particular:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 분산 된 내결함성 DBMS입니다. 다양한 Erlang 노드에서 다양한 방법으로 테이블을 복제 할 수 있습니다. &lt;code&gt;Mnesia&lt;/code&gt; 의 다른 테이블이있는 경우 프로그래머는 상태로 필요로하지 않는다, 다른 테이블의 이름 만은 프로그램 코드에 지정해야합니다. 이것을 &quot;위치 투명성&quot;이라고하며 중요한 개념입니다. 특히:</target>
        </trans-unit>
        <trans-unit id="ce6ce805ffabb604e093e29fe750a61f56865e81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; is operational already and the Erlang nodes gain contact again. Then &lt;code&gt;Mnesia&lt;/code&gt; tries to contact &lt;code&gt;Mnesia&lt;/code&gt; on the other node to see if it also thinks that the network has been partitioned for a while. If &lt;code&gt;Mnesia&lt;/code&gt; on both nodes has logged &lt;code&gt;mnesia_down&lt;/code&gt; entries from each other, &lt;code&gt;Mnesia&lt;/code&gt; generates a system event, called &lt;code&gt;{inconsistent_database, running_partitioned_network, Node}&lt;/code&gt;, which is sent to the &lt;code&gt;Mnesia&lt;/code&gt; event handler and other possible subscribers. The default event handler reports an error to the error logger.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 이미 작동 중이며 Erlang 노드는 다시 연락을 얻습니다. 그런 다음 &lt;code&gt;Mnesia&lt;/code&gt; 는 다른 노드의 &lt;code&gt;Mnesia&lt;/code&gt; 에 연결하여 네트워크가 잠시 동안 분할되었다고 생각하는지 확인합니다. 경우 &lt;code&gt;Mnesia&lt;/code&gt; 두 노드가 기록했다 &lt;code&gt;mnesia_down&lt;/code&gt; 서로 항목을 &lt;code&gt;Mnesia&lt;/code&gt; 이 라는 시스템 이벤트를 생성 &lt;code&gt;{inconsistent_database, running_partitioned_network, Node}&lt;/code&gt; 받는 전송, &lt;code&gt;Mnesia&lt;/code&gt; 의 이벤트 핸들러 및 다른 가능한 가입자. 기본 이벤트 핸들러는 오류 로거에 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="299f66c99a592f4661dd165bd4ec14d594906d2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; on the current node is overloaded and the subscriber is to take action.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 현재 노드의 Mnesia 에 과부하가 걸리고 가입자가 조치를 취해야합니다.</target>
        </trans-unit>
        <trans-unit id="d4d198e86471917f599cd982f9398656eadab60f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; provides the following functions that iterate over all the records in a table:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 테이블의 모든 레코드를 반복하는 다음 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ea62f450db04290c7245c742f058663cd0e8cac6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; regards the database as potential inconsistent and gives its applications a chance to recover from the inconsistency. For example, by installing a consistent backup as fallback and then restart the system. An alternative is to pick a &lt;code&gt;MasterNode&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;mnesia#system_info-1&quot;&gt;mnesia:system_info(db_nodes)&lt;/a&gt;&lt;/code&gt; and invoke &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-1&quot;&gt;mnesia:set_master_node([MasterNode])&lt;/a&gt;&lt;/code&gt;. By default an error is reported to &lt;code&gt;error_logger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 데이터베이스가 잠재적으로 일관성이없는 것으로 간주하고 해당 응용 프로그램이 불일치를 복구 할 수있는 기회를 제공합니다. 예를 들어, 일관된 백업을 폴백으로 설치 한 다음 시스템을 다시 시작합니다. 대안은 선택한다 &lt;code&gt;MasterNode&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;mnesia#system_info-1&quot;&gt;mnesia:system_info(db_nodes)&lt;/a&gt;&lt;/code&gt; 하고있는 invoke &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-1&quot;&gt;mnesia:set_master_node([MasterNode])&lt;/a&gt;&lt;/code&gt; . 기본적으로 오류는 &lt;code&gt;error_logger&lt;/code&gt; 에보고됩니다 .</target>
        </trans-unit>
        <trans-unit id="8a49502faffd0a8fc3bef10df0065138e5b5ee1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; supports read and write locks on whole tables as a complement to the normal locks on single records. As previously stated, &lt;code&gt;Mnesia&lt;/code&gt; sets and releases locks automatically, and the programmer does not need to code these operations. However, transactions that read and write many records in a specific table execute more efficiently if the transaction is started by setting a table lock on this table. This blocks other concurrent transactions from the table. The following two functions are used to set explicit table locks for read and write operations:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 는 단일 레코드의 일반 잠금에 대한 보완으로 전체 테이블에 대한 읽기 및 쓰기 잠금을 지원합니다. 앞에서 언급했듯이 &lt;code&gt;Mnesia&lt;/code&gt; 는 자동으로 잠금을 설정 및 해제하므로 프로그래머는 이러한 작업을 코딩 할 필요가 없습니다. 그러나 특정 테이블에서 많은 레코드를 읽고 쓰는 트랜잭션은이 테이블에 테이블 잠금을 설정하여 트랜잭션이 시작되면 더 효율적으로 실행됩니다. 이는 테이블에서 다른 동시 트랜잭션을 차단합니다. 다음 두 함수는 읽기 및 쓰기 조작을위한 명시 적 테이블 잠금을 설정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a213c344fdf0ba87903055cd33de59b37e338473" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; tables can never contain duplicates of the same record in the same table. Duplicate records have attributes with the same contents and key.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 테이블은 같은 테이블에 동일한 레코드의 중복을 포함 할 수 없습니다. 중복 레코드는 동일한 내용과 키를 가진 속성을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="3d033f03ed1c9abbda7b5edcbf9a3fb1803844ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; tables with storage type &lt;code&gt;RAM_copies&lt;/code&gt; and &lt;code&gt;disc_copies&lt;/code&gt; are implemented internally as &lt;code&gt;ets&lt;/code&gt; tables. Applications can access the these tables directly. This is only recommended if all options have been weighed and the possible outcomes are understood. By passing the earlier mentioned &quot;fun&quot; to the function &lt;code&gt;&lt;a href=&quot;mnesia#ets-1&quot;&gt;mnesia:ets(Fun [, Args])&lt;/a&gt;&lt;/code&gt;, it is performed but in a raw context. The operations are performed directly on the local &lt;code&gt;ets&lt;/code&gt; tables, assuming that the local storage type is &lt;code&gt;RAM_copies&lt;/code&gt; and that the table is not replicated on other nodes.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 스토리지 유형이 &lt;code&gt;RAM_copies&lt;/code&gt; 및 &lt;code&gt;disc_copies&lt;/code&gt; 인Mnesia 테이블 은 내부적으로 &lt;code&gt;ets&lt;/code&gt; 테이블 로 구현됩니다 . 애플리케이션은 이러한 테이블에 직접 액세스 할 수 있습니다. 이는 모든 옵션을 평가하고 가능한 결과를 이해 한 경우에만 권장됩니다. 앞서 언급 한 &quot;fun&quot;을 &lt;code&gt;&lt;a href=&quot;mnesia#ets-1&quot;&gt;mnesia:ets(Fun [, Args])&lt;/a&gt;&lt;/code&gt; 함수에 전달 하면 원시 컨텍스트에서 수행됩니다. 작업은 로컬 저장소 유형이 &lt;code&gt;RAM_copies&lt;/code&gt; 이고 테이블이 다른 노드에 복제되지 않는다고 가정 하여 로컬 &lt;code&gt;ets&lt;/code&gt; 테이블에서 직접 수행 됩니다.</target>
        </trans-unit>
        <trans-unit id="51e2c37c486ebe9a5f140b6b22d0a1f0d3f61c56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mnesia&lt;/code&gt; tables with storage type &lt;code&gt;RAM_copies&lt;/code&gt; and &lt;code&gt;disc_copies&lt;/code&gt; are implemented internally as &lt;code&gt;ets&lt;/code&gt; tables. Applications can access the these tables directly. This is only recommended if all options have been weighed and the possible outcomes are understood. By passing the earlier mentioned &quot;fun&quot; to the function &lt;code&gt;&lt;a href=&quot;mnesia#ets-2&quot;&gt;mnesia:ets(Fun [, Args])&lt;/a&gt;&lt;/code&gt;, it is performed but in a raw context. The operations are performed directly on the local &lt;code&gt;ets&lt;/code&gt; tables, assuming that the local storage type is &lt;code&gt;RAM_copies&lt;/code&gt; and that the table is not replicated on other nodes.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 스토리지 유형 &lt;code&gt;RAM_copies&lt;/code&gt; 및 &lt;code&gt;disc_copies&lt;/code&gt; 를 가진 Mnesia 테이블 은 내부적으로 &lt;code&gt;ets&lt;/code&gt; 테이블 로 구현됩니다 . 응용 프로그램은이 테이블에 직접 액세스 할 수 있습니다. 모든 옵션의 무게가 측정되고 가능한 결과가 이해되는 경우에만 권장됩니다. 앞서 언급 한 &quot;fun&quot;을 &lt;code&gt;&lt;a href=&quot;mnesia#ets-2&quot;&gt;mnesia:ets(Fun [, Args])&lt;/a&gt;&lt;/code&gt; 함수에 전달 하면 원시 컨텍스트에서 수행됩니다. 로컬 스토리지 유형이 &lt;code&gt;RAM_copies&lt;/code&gt; 이고 테이블이 다른 노드에서 복제되지 않는다고 가정하면 로컬 &lt;code&gt;ets&lt;/code&gt; 테이블에서 직접 조작이 수행 됩니다.</target>
        </trans-unit>
        <trans-unit id="026398917cd87fd0f71857fbbbfbe7bd327d21cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mod&lt;/code&gt; is a module implementing the &lt;code&gt;snmpa_notification_filter&lt;/code&gt; behaviour.</source>
          <target state="translated">&lt;code&gt;Mod&lt;/code&gt; 는 &lt;code&gt;snmpa_notification_filter&lt;/code&gt; 동작을 구현하는 모듈 입니다.</target>
        </trans-unit>
        <trans-unit id="362ea97ed62390369c5b1d04c7c68020d2bfd595" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mod&lt;/code&gt; is the control sequence modifier. This is one or more characters that change the interpretation of &lt;code&gt;Data&lt;/code&gt;. The current modifiers are &lt;code&gt;t&lt;/code&gt;, for Unicode translation, and &lt;code&gt;l&lt;/code&gt;, for stopping &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; from detecting printable characters.</source>
          <target state="translated">&lt;code&gt;Mod&lt;/code&gt; 는 제어 시퀀스 수정 자입니다. 이것은 &lt;code&gt;Data&lt;/code&gt; 의 해석을 변경하는 하나 이상의 문자입니다 . 현재 개질제는 &lt;code&gt;t&lt;/code&gt; 유니 번역 및 들면, &lt;code&gt;l&lt;/code&gt; , 정지 &lt;code&gt;p&lt;/code&gt; 및 &lt;code&gt;P&lt;/code&gt; 를 인쇄 문자를 감지하지.</target>
        </trans-unit>
        <trans-unit id="a05c77fe12245fb5c4cc838c8eeb5df1e893df7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mod&lt;/code&gt; is the name of an alternative backup module.</source>
          <target state="translated">&lt;code&gt;Mod&lt;/code&gt; 는 대체 백업 모듈의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f4e7a43ca343a4b7e5cf9d098c7f1a8c9a3ac6b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mode&lt;/code&gt; defaults to &lt;code&gt;up&lt;/code&gt; and specifies if it is an upgrade or downgrade. This instruction sends a &lt;code&gt;code_change&lt;/code&gt; system message to all processes using a module &lt;code&gt;Mod&lt;/code&gt; by calling function &lt;code&gt;sys:change_code&lt;/code&gt;, passing term &lt;code&gt;Extra&lt;/code&gt; as argument.</source>
          <target state="translated">&lt;code&gt;Mode&lt;/code&gt; 기본적으로 &lt;code&gt;up&lt;/code&gt; 으로 설정 되며 업그레이드인지 다운 그레이드인지를 지정합니다. 이 명령어는 &lt;code&gt;sys:change_code&lt;/code&gt; 함수를 호출하고 &lt;code&gt;Extra&lt;/code&gt; 라는 용어 를 인수로 전달 하여 모듈 &lt;code&gt;Mod&lt;/code&gt; 를 사용하는 모든 프로세스에 &lt;code&gt;code_change&lt;/code&gt; 시스템 메시지를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="ad86ddcc7ca04b1c0a70c72baf756e408d18fb67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mode&lt;/code&gt; is the log mode as specified by the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mode&lt;/code&gt; 는 &lt;code&gt;open/1&lt;/code&gt; 옵션 &lt;code&gt;mode&lt;/code&gt; 로 지정된 로그 모드 입니다.</target>
        </trans-unit>
        <trans-unit id="1c286c4f9b4ed3de9b82f0584693fa9aa8e85785" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mode&lt;/code&gt; is the type of crypto algorithm to be used for encrypting the debug information. The default (and currently the only) type is &lt;code&gt;des3_cbc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mode&lt;/code&gt; 는 디버그 정보를 암호화하는 데 사용되는 암호화 알고리즘 유형입니다. 기본 (현재 유일한) 유형은 &lt;code&gt;des3_cbc&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fe0498eb8d4b45b5a8e528fd9b6a97864959f64c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mode&lt;/code&gt; is the type of crypto algorithm; currently, the only allowed value is &lt;code&gt;des3_cbc&lt;/code&gt;. &lt;code&gt;Module&lt;/code&gt; is either an atom, in which case &lt;code&gt;Key&lt;/code&gt; is only used for the module &lt;code&gt;Module&lt;/code&gt;, or &lt;code&gt;[]&lt;/code&gt;, in which case &lt;code&gt;Key&lt;/code&gt; is used for all modules. &lt;code&gt;Key&lt;/code&gt; is the non-empty key string.</source>
          <target state="translated">&lt;code&gt;Mode&lt;/code&gt; 는 암호화 알고리즘의 유형입니다. 현재 허용되는 유일한 값은 &lt;code&gt;des3_cbc&lt;/code&gt; 입니다. &lt;code&gt;Module&lt;/code&gt; 중 어느 경우 원자이다 &lt;code&gt;Key&lt;/code&gt; 전용 모듈에 사용되는 &lt;code&gt;Module&lt;/code&gt; , 또는 &lt;code&gt;[]&lt;/code&gt; ,이 경우에 &lt;code&gt;Key&lt;/code&gt; 모든 모듈에 사용된다. &lt;code&gt;Key&lt;/code&gt; 는 비어 있지 않은 키 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="b7b2089688dbcaa372b98ae602d475aa2b7e20a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Modifier&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;Modifier&lt;/code&gt;s:</target>
        </trans-unit>
        <trans-unit id="f885a950c33bfb535944903bdef7d52e0b60b33d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module:Function&lt;/code&gt; must be able to handle at least three atoms: &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, and &lt;code&gt;stop&lt;/code&gt;. &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; allows you to initialize and clean up the check environment.</source>
          <target state="translated">&lt;code&gt;Module:Function&lt;/code&gt; 는 최소한 세 개의 원자를 처리 할 수 ​​있어야합니다 : &lt;code&gt;init&lt;/code&gt; , &lt;code&gt;check&lt;/code&gt; 및 &lt;code&gt;stop&lt;/code&gt; . &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; 을 사용하면 검사 환경을 초기화하고 정리할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b368a1e85f2065c90c82b56201768e9d94ddc091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module:Function&lt;/code&gt; provided with option &lt;code&gt;overload&lt;/code&gt; must handle three calls: &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, and &lt;code&gt;stop&lt;/code&gt;. &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; allow some setup and teardown required by the check. An overload check module can look as follows:</source>
          <target state="translated">&lt;code&gt;Module:Function&lt;/code&gt; 옵션 &lt;code&gt;overload&lt;/code&gt; 와 함께 제공되는 기능 은 세 가지 호출 &lt;code&gt;init&lt;/code&gt; , &lt;code&gt;check&lt;/code&gt; 및 &lt;code&gt;stop&lt;/code&gt; 을 처리해야합니다 . &lt;code&gt;init&lt;/code&gt; 및 &lt;code&gt;stop&lt;/code&gt; 는 점검에 필요한 일부 설정 및 해제를 허용합니다. 과부하 검사 모듈은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8695369e3ba6e8412e0f5f0914171005547b5d45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module:system_continue(Parent, NDebug, Misc)&lt;/code&gt;, where the process continues the execution.</source>
          <target state="translated">&lt;code&gt;Module:system_continue(Parent, NDebug, Misc)&lt;/code&gt; , 여기서 프로세스는 실행을 계속합니다.</target>
        </trans-unit>
        <trans-unit id="1d97b25bd32b5b56226b87374d4aff24fd298b00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module:system_terminate(Reason, Parent, Debug, Misc)&lt;/code&gt;, if the process is to terminate.</source>
          <target state="translated">&lt;code&gt;Module:system_terminate(Reason, Parent, Debug, Misc)&lt;/code&gt; , 프로세스가 종료되는 경우.</target>
        </trans-unit>
        <trans-unit id="bf516739e46854f97dc555f9f8d07adb9320095d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; (an atom) is the module name.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; (아톰)은 모듈 이름입니다.</target>
        </trans-unit>
        <trans-unit id="142f50604dd69185fd77f5d37c8950e205f23a6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt; are atoms (encoded using &lt;code&gt;&lt;a href=&quot;#ATOM_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 및 &lt;code&gt;Function&lt;/code&gt; 는 원자입니다 ( &lt;code&gt;&lt;a href=&quot;#ATOM_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt; 를 사용하여 인코딩 됨 ).</target>
        </trans-unit>
        <trans-unit id="8b149a82a2cdd80eae28936f75660c686291ab6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; is not an atom.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 은 원자가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="5b415056acd25393db679814eb0fc4804a1794b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; is the application callback module as defined by the &lt;code&gt;mod&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 은 &lt;code&gt;.app&lt;/code&gt; 파일 의 &lt;code&gt;mod&lt;/code&gt; 키로 정의 된 응용 프로그램 콜백 모듈 입니다.</target>
        </trans-unit>
        <trans-unit id="9a8fa41567e7a29ba7f2d1dca3d700ed40a7ad67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; is the callback module (snmpm_user behaviour) which will be called whenever something happens (detected agent, incoming reply or incoming trap/notification). Note that this could have already been done as a consequence of the node config. (see users.conf).</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 은 콜백 모듈 (snmpm_user 동작)로, 상황이 발생할 때마다 (에이전트, 수신 응답 또는 수신 트랩 / 알림 감지) 호출됩니다. 이것은 노드 구성의 결과로 이미 수행되었을 수 있습니다. (users.conf 참조)</target>
        </trans-unit>
        <trans-unit id="07237051faad89eb648f1c2d2ed1a15fb26d970e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; is the error handler module used by the process (for undefined function calls, for example).</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 은 프로세스에서 사용하는 오류 처리기 모듈입니다 (예 : 정의되지 않은 함수 호출).</target>
        </trans-unit>
        <trans-unit id="407128c827c35995de108220483e4d85c0beb6f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; is the name of the callback module.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 은 콜백 모듈의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d0134160a25efe9fc060f1d7d3b523059d97c7e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; is the name of the module.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 은 모듈 의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1cc86c03014755b5f1e2d575f314172f7eb48c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; must be found in the code path and export &lt;code&gt;Function&lt;/code&gt; with an arity of three. An &lt;code&gt;erlScriptAlias&lt;/code&gt; must also be set up in the configuration file for the web server.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 코드 경로에서 모듈 을 찾고 3의 arity로 &lt;code&gt;Function&lt;/code&gt; 를 내보내십시오 . &lt;code&gt;erlScriptAlias&lt;/code&gt; 는 또한 웹 서버의 구성 파일에 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="51a802f0d426a5888a70a3a7a0e30628718cd9d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; must export the following:</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 은 다음을 내 보내야합니다.</target>
        </trans-unit>
        <trans-unit id="7d093a221d68135472f7c3ed106652eb4a487d20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Arity&lt;/code&gt; is the current function call of the process.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; , &lt;code&gt;Arity&lt;/code&gt; 는 프로세스의 현재 함수 호출입니다.</target>
        </trans-unit>
        <trans-unit id="0582dfe1547908a2451ee70c6f0283c376da5ee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Arity&lt;/code&gt; is the current function call of the process. &lt;code&gt;Location&lt;/code&gt; is a list of two-tuples describing the location in the source code.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; , &lt;code&gt;Arity&lt;/code&gt; 는 프로세스의 현재 함수 호출입니다. &lt;code&gt;Location&lt;/code&gt; 는 소스 코드에서 위치를 설명하는 두 개의 튜플 목록입니다.</target>
        </trans-unit>
        <trans-unit id="8a79e07e62521860565c2b17c1b765befc74c983" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Arity&lt;/code&gt; is the current function call of the process. The value &lt;code&gt;undefined&lt;/code&gt; can be returned if the process is currently executing native compiled code.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; , &lt;code&gt;Arity&lt;/code&gt; 는 프로세스의 현재 함수 호출입니다. 프로세스가 현재 네이티브 컴파일 된 코드를 실행중인 경우 &lt;code&gt;undefined&lt;/code&gt; 값 이 반환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1bf4dd28d33fda1e0c4dfc738aae8b183beba2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Arity&lt;/code&gt; is the initial function call with which the process was spawned.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; , &lt;code&gt;Arity&lt;/code&gt; 는 프로세스가 생성 된 초기 함수 호출입니다.</target>
        </trans-unit>
        <trans-unit id="40c58bd468af7e443cd3b7e99b3e23559908235c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, and &lt;code&gt;Args&lt;/code&gt; denote a function that is called to produce the data (like &lt;code&gt;io_lib:format/2&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; 및 &lt;code&gt;Args&lt;/code&gt; 는 데이터를 생성하기 위해 호출되는 함수를 나타냅니다 ( &lt;code&gt;io_lib:format/2&lt;/code&gt; 등 ).</target>
        </trans-unit>
        <trans-unit id="27c5906e2f07a923064efae3970c6d256569db73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, and &lt;code&gt;ExtraArgs&lt;/code&gt; denote a function and arguments to determine when enough data is written. The function is to take two more arguments, the last state, and a list of characters. The function is to return one of:</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; 및 &lt;code&gt;ExtraArgs&lt;/code&gt; 는 충분한 데이터가 작성되는시기를 결정하는 함수 및 인수를 나타냅니다. 함수는 마지막 상태와 문자 목록이라는 두 가지 인수를 더 사용하는 것입니다. 함수는 다음 중 하나를 반환하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="735b6fdd9ded8b8040a7b5a71d381f59d033e3fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Options&lt;/code&gt;, and &lt;code&gt;ServerName&lt;/code&gt; have the same meanings as when calling &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link]/3,4&lt;/a&gt;&lt;/code&gt;. However, if &lt;code&gt;ServerName&lt;/code&gt; is specified, the process must have been registered accordingly &lt;strong&gt;before&lt;/strong&gt; this function is called.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Options&lt;/code&gt; 및 &lt;code&gt;ServerName&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link]/3,4&lt;/a&gt;&lt;/code&gt; 호출 할 때와 동일한 의미를 갖습니다 . 그러나 &lt;code&gt;ServerName&lt;/code&gt; 을 지정하면 이 함수가 호출 &lt;strong&gt;되기 전에&lt;/strong&gt; 프로세스가 적절히 등록되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="6ff4c6c9504f011ff9174038ec73a39db3ab3ea5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Options&lt;/code&gt;, and &lt;code&gt;ServerName&lt;/code&gt; have the same meanings as when calling &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link|_monitor]/3,4&lt;/a&gt;&lt;/code&gt;. However, if &lt;code&gt;ServerName&lt;/code&gt; is specified, the process must have been registered accordingly &lt;strong&gt;before&lt;/strong&gt; this function is called.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Options&lt;/code&gt; 및 &lt;code&gt;ServerName&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link|_monitor]/3,4&lt;/a&gt;&lt;/code&gt; 호출 할 때와 동일한 의미를 갖습니다 . 그러나 &lt;code&gt;ServerName&lt;/code&gt; 이 지정된 경우이 함수가 호출 &lt;strong&gt;되기 전에&lt;/strong&gt; 프로세스가 적절하게 등록되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="72a6ca3acf4708afc7ea6b005278097266070eb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Opts&lt;/code&gt; have the same meaning as when calling &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link]/3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Opts&lt;/code&gt; 호출 될 때와 동일한 의미를 갖는다 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link]/3,4&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4474f9339059862d8cc7f9962421aa2ad78c41f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Opts&lt;/code&gt; have the same meaning as when calling &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link|_monitor]/3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Opts&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link|_monitor]/3,4&lt;/a&gt;&lt;/code&gt; 호출 할 때와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="2e960f4b5e2be3ea63b3ddb6d28993de499df8d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt;, an atom, specifies which module to import functions from. &lt;code&gt;Functions&lt;/code&gt; is a list similar as for &lt;code&gt;export&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 아톰 인 Module 은 함수를 가져올 모듈을 지정합니다. &lt;code&gt;Functions&lt;/code&gt; 는 &lt;code&gt;export&lt;/code&gt; 와 비슷한 목록 입니다.</target>
        </trans-unit>
        <trans-unit id="94bcaf31932fafae9d441260a6361bb51e6048ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ModuleName&lt;/code&gt; is the name declared by a module attribute in &lt;code&gt;Forms&lt;/code&gt;. If no module name is defined in &lt;code&gt;Forms&lt;/code&gt;, the result will contain no entry for the &lt;code&gt;module&lt;/code&gt; key. If multiple module name declarations should occur, all but the first will be ignored.</source>
          <target state="translated">&lt;code&gt;ModuleName&lt;/code&gt; 은 &lt;code&gt;Forms&lt;/code&gt; 의 모듈 속성으로 선언 된 이름 입니다. &lt;code&gt;Forms&lt;/code&gt; 에 모듈 이름이 정의 되어 있지 않으면 결과에 &lt;code&gt;module&lt;/code&gt; 키에 대한 항목이 포함되지 않습니다 . 여러 개의 모듈 이름 선언이 발생하면 첫 번째를 제외한 모든 모듈 이름이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="5490f4d0695da312f5313f241b454195ab98b765" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module_Name&lt;/code&gt; is the same as the name of the ASN.1 specification, but without the extension.</source>
          <target state="translated">&lt;code&gt;Module_Name&lt;/code&gt; 은 ASN.1 사양의 이름과 동일하지만 확장자가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b6422d79e9a6277c38b3328216481430cb33bf79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Modules&lt;/code&gt; - As defined in the child specification.</source>
          <target state="translated">&lt;code&gt;Modules&lt;/code&gt; -하위 사양에 정의 된대로.</target>
        </trans-unit>
        <trans-unit id="28e6aa53a863e6303a37ffa4a56bcb86914429d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Modules&lt;/code&gt; is an atom or a list of atoms. It can be</source>
          <target state="translated">&lt;code&gt;Modules&lt;/code&gt; 은 원자 또는 원자 목록입니다. 그것은 될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="e8a3c516ce1202b04e270df3d4677614499f980f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MonitorRef&lt;/code&gt; can also be used in subsequent calls to &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor/1&lt;/a&gt;&lt;/code&gt; to remove a monitor.</source>
          <target state="translated">&lt;code&gt;MonitorRef&lt;/code&gt; 모니터를 제거 하기 위해 &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor/1&lt;/a&gt;&lt;/code&gt; 에 대한 후속 호출에서 MonitorRef를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="789e4dded1962ea4e59f9b85d20ea3fa53deac6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Monitors&lt;/code&gt; represent processes monitored by this port.</source>
          <target state="translated">&lt;code&gt;Monitors&lt;/code&gt; 는이 포트에서 모니터 하는 프로세스를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="09dc0fe287873b1ad20b0b39ff93d31a685de6db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Move actor&lt;/code&gt; - Left mouse button drag and drop on actor name tag. Move the actor by first clicking on the actor name, keeping the button pressed while moving the cursor to a new location and release the button where the actor should be moved to.</source>
          <target state="translated">&lt;code&gt;Move actor&lt;/code&gt; -마우스 왼쪽 버튼으로 액터 이름 태그를 끌어다 놓습니다. 먼저 액터 이름을 클릭하여 액터를 이동하고 커서를 새로운 위치로 이동하는 동안 버튼을 누른 채 액터를 이동해야하는 버튼을 놓습니다.</target>
        </trans-unit>
        <trans-unit id="7b274d4a050114b3ad61d946117a0d94197bdb59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MsgData&lt;/code&gt; is the message specific data used in the SNMP message. In SNMPv1 and SNMPv2c, this message data is the community string. In SNMPv3, it is the context information.</source>
          <target state="translated">&lt;code&gt;MsgData&lt;/code&gt; 는 SNMP 메시지에 사용 된 메시지 특정 데이터입니다. SNMPv1 및 SNMPv2c에서이 메시지 데이터는 커뮤니티 문자열입니다. SNMPv3에서는 컨텍스트 정보입니다.</target>
        </trans-unit>
        <trans-unit id="b9d0ab3d8c7fc0fd7e84a099f99cc76f21806a7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MsgData&lt;/code&gt; is the message specific data used in the SNMP message. This value is normally sent to &lt;code&gt;snmpa_mpd:generate_message/4&lt;/code&gt;. In SNMPv1 and SNMPv2c, this message data is the community string. In SNMPv3, it is the context information.</source>
          <target state="translated">&lt;code&gt;MsgData&lt;/code&gt; 는 SNMP 메시지에 사용 된 메시지 특정 데이터입니다. 이 값은 일반적으로 &lt;code&gt;snmpa_mpd:generate_message/4&lt;/code&gt; 로 전송됩니다 . SNMPv1 및 SNMPv2c에서이 메시지 데이터는 커뮤니티 문자열입니다. SNMPv3에서는 컨텍스트 정보입니다.</target>
        </trans-unit>
        <trans-unit id="85e02c6801c032defd1ced4700fd5848d432dc82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MsgData&lt;/code&gt; is the message specific data used in the SNMP message. This value is received from the &lt;code&gt;&lt;a href=&quot;snmpm_mpd#process_msg&quot;&gt;process_msg&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;MsgData&lt;/code&gt; 는 SNMP 메시지에 사용 된 메시지 특정 데이터입니다. 이 값은 &lt;code&gt;&lt;a href=&quot;snmpm_mpd#process_msg&quot;&gt;process_msg&lt;/a&gt;&lt;/code&gt; 함수 에서 수신됩니다 .</target>
        </trans-unit>
        <trans-unit id="c36fb42da4a1981ca1f242d482e55043db1c30e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MsgData&lt;/code&gt; is the message specific data used in the SNMP message. This value is received in a &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu&quot;&gt;send_pdu&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu_req&quot;&gt; send_pdu_req&lt;/a&gt;&lt;/code&gt; message from the agent. In SNMPv1 and SNMPv2c, this message data is the community string. In SNMPv3, it is the context information.</source>
          <target state="translated">&lt;code&gt;MsgData&lt;/code&gt; 는 SNMP 메시지에 사용되는 메시지 특정 데이터입니다. 이 값은 에이전트 의 &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu&quot;&gt;send_pdu&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu_req&quot;&gt; send_pdu_req&lt;/a&gt;&lt;/code&gt; 메시지 로 수신됩니다 . SNMPv1 및 SNMPv2c에서이 메시지 데이터는 커뮤니티 문자열입니다. SNMPv3에서는 컨텍스트 정보입니다.</target>
        </trans-unit>
        <trans-unit id="ae0b302d8aa0d6662b1e9d5ce1cde5ca08a0d8cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MsgData&lt;/code&gt; is the message specific data used in the SNMP message. This value is received in a &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu&quot;&gt;send_pdu&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu_req&quot;&gt;send_pdu_req&lt;/a&gt;&lt;/code&gt; message from the agent. In SNMPv1 and SNMPv2c, this message data is the community string. In SNMPv3, it is the context information.</source>
          <target state="translated">&lt;code&gt;MsgData&lt;/code&gt; 는 SNMP 메시지에 사용 된 메시지 특정 데이터입니다. 이 값은 에이전트로부터 &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu&quot;&gt;send_pdu&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;snmp_agent_netif#im_send_pdu_req&quot;&gt;send_pdu_req&lt;/a&gt;&lt;/code&gt; 메시지 로 수신됩니다 . SNMPv1 및 SNMPv2c에서이 메시지 데이터는 커뮤니티 문자열입니다. SNMPv3에서는 컨텍스트 정보입니다.</target>
        </trans-unit>
        <trans-unit id="35f7d6a26d9b5f9eed5e97b95d8bf241cea559e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N'&lt;/code&gt; = 4 * &lt;code&gt;Len&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;N'&lt;/code&gt; = 4 * &lt;code&gt;Len&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="667dbaef5cd339cbd9b33e3f22daef03eb0a343e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N-1&lt;/code&gt; causes the first argument to be decremented until it becomes 0. When this occurs, the first clause of &lt;code&gt;ping/2&lt;/code&gt; is executed:</source>
          <target state="translated">&lt;code&gt;N-1&lt;/code&gt; 은 첫 번째 인수가 0이 될 때까지 감소합니다.이 경우 &lt;code&gt;ping/2&lt;/code&gt; 의 첫 번째 절이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ffa2255c29b5026e443ca3d708e0955e501b7b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; is the number of character rows or columns that the I/O device has, if applicable to the I/O device handled by the I/O server, otherwise &lt;code&gt;{error, enotsup}&lt;/code&gt; is a good answer.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; 은 I / O 서버가 처리하는 I / O 장치에 적용 가능한 경우 I / O 장치에있는 문자 행 또는 열의 수입니다. 그렇지 않으면 &lt;code&gt;{error, enotsup}&lt;/code&gt; 이 적합합니다.</target>
        </trans-unit>
        <trans-unit id="8db9fd57288267d9c537c3d85ce50ce3099c6903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; is the number of characters to be read from the I/O device.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; 은 I / O 장치에서 읽을 문자 수입니다.</target>
        </trans-unit>
        <trans-unit id="2dd07fd3cebf7e54becad5f2ab92a0406c76ad06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; is the number of keys in the Map.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; 은 맵의 키 수입니다.</target>
        </trans-unit>
        <trans-unit id="441c69f52fc06c07241bbfe4cf23af6c58ed2224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; must be an integer in the interval 0..10000. If &lt;code&gt;N&lt;/code&gt; &amp;gt; 0, call saving is made active for the process. This means that information about the &lt;code&gt;N&lt;/code&gt; most recent global function calls, BIF calls, sends, and receives made by the process are saved in a list, which can be retrieved with &lt;code&gt;process_info(Pid, last_calls)&lt;/code&gt;. A global function call is one in which the module of the function is explicitly mentioned. Only a fixed amount of information is saved, as follows:</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; 은 0..10000 간격의 정수 여야합니다. 경우 &lt;code&gt;N&lt;/code&gt; &amp;gt; 0, 호출 절약하는 과정에 대해 활성화된다. 이것은 프로세스에 의해 생성 된 &lt;code&gt;N&lt;/code&gt; 개의 가장 최근의 전역 함수 호출, BIF 호출, 전송 및 수신에 대한 정보가 &lt;code&gt;process_info(Pid, last_calls)&lt;/code&gt; 로 검색 될 수있는 목록에 저장 됨을 의미합니다 . 전역 함수 호출은 함수 모듈이 명시 적으로 언급 된 것입니다. 다음과 같이 고정 된 양의 정보 만 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="3125cf3d2ad76dacca25c189c2a89e92339b28a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; must lie in the range &lt;code&gt;0..32&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; must be a non-negative integer less than &lt;code&gt;1 bsl (32-N)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; 은 &lt;code&gt;0..32&lt;/code&gt; 범위에 있어야 하고 &lt;code&gt;H&lt;/code&gt; 는 &lt;code&gt;1 bsl (32-N)&lt;/code&gt; 미만의 음이 아닌 정수 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="8b95c0adc211c7570eb1260860e43d9e73bb51ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; specifies the index of the file to be read. If &lt;code&gt;N&lt;/code&gt; is omitted, the whole wrap log file is read; if it is specified, only the specified index file is read.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; 은 읽을 파일의 인덱스를 지정합니다. 경우 &lt;code&gt;N&lt;/code&gt; 이 생략되고, 전체 랩 로그 파일 읽기; 지정된 경우 지정된 인덱스 파일 만 읽습니다.</target>
        </trans-unit>
        <trans-unit id="58ca891041da8eb3be284b7a1078c0cd9e2f3f66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt; x &lt;code&gt;F&lt;/code&gt; words + the size of all keys and values.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; x &lt;code&gt;F&lt;/code&gt; 단어 + 모든 키와 값의 크기.</target>
        </trans-unit>
        <trans-unit id="7a21eef3be4d9915bc452c56ba51309dd73effd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEWER_REFERENCE_EXT&lt;/code&gt; was introduced in OTP 19, but only to be decoded and echoed back. Not encoded for local references.</source>
          <target state="translated">&lt;code&gt;NEWER_REFERENCE_EXT&lt;/code&gt; 는 OTP 19에서 도입되었지만 디코딩 및 반향 만 가능합니다. 로컬 참조 용으로 인코딩되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="05fae51607d9da96e6bddeb0c0b3717ed5838ff9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEW_PID_EXT&lt;/code&gt; was introduced in OTP 19, but only to be decoded and echoed back. Not encoded for local processes.</source>
          <target state="translated">&lt;code&gt;NEW_PID_EXT&lt;/code&gt; 는 OTP 19에 도입되었지만 디코딩 및 에코 만 가능합니다. 로컬 프로세스 용으로 인코딩되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="b69b8aca1134bccd5bc15c79be18d4223b75c5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEW_PORT_EXT&lt;/code&gt; was introduced in OTP 19, but only to be decoded and echoed back. Not encoded for local ports.</source>
          <target state="translated">&lt;code&gt;NEW_PORT_EXT&lt;/code&gt; 는 OTP 19에서 도입되었지만 디코딩 및 반향 만 가능합니다. 로컬 포트 ​​용으로 인코딩되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="8dab69d7ef148bb2c4d7575e6eeeccaa62ad35d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEW_REFERENCE_EXT&lt;/code&gt; was introduced with distribution version 4. In version 4, &lt;code&gt;N'&lt;/code&gt; is to be at most 12.</source>
          <target state="translated">&lt;code&gt;NEW_REFERENCE_EXT&lt;/code&gt; 는 배포 버전 4에서 도입되었습니다. 버전 4에서 &lt;code&gt;N'&lt;/code&gt; 은 최대 12입니다.</target>
        </trans-unit>
        <trans-unit id="9881389ed7b284c1c1a6b0690d329d906624d099" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NElements&lt;/code&gt; is the value of the &lt;code&gt;info/1,2&lt;/code&gt; option &lt;code&gt;n_elements&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NElements&lt;/code&gt; 는 &lt;code&gt;info/1,2&lt;/code&gt; 옵션 &lt;code&gt;n_elements&lt;/code&gt; 의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="1da097ac18a4009d2b893984fe6a8bff88d195b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NO_FPE_SIGNALS&lt;/code&gt; - 1 if FPE signals are not enable in runtime system, 0 otherwise.</source>
          <target state="translated">&lt;code&gt;NO_FPE_SIGNALS&lt;/code&gt; - 런타임 시스템에서 FPE 신호가 활성화되지 않으면 1, 그렇지 않으면 0입니다.</target>
        </trans-unit>
        <trans-unit id="a4f1743226213632e93600180fae6256a6657bf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name =&lt;/code&gt;&lt;code&gt;os:env_var_name()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Name =&lt;/code&gt; &lt;code&gt;os:env_var_name()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="170416d54102ee3c36377fa1c37d609948d05ae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; (an atom) is a function name.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; (원자)은 함수 이름입니다.</target>
        </trans-unit>
        <trans-unit id="b87fe0848821f2e52817a442b1caf9056fab855c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; and all the &lt;code&gt;Ki&lt;/code&gt; must be atom literals, and all the &lt;code&gt;Ti&lt;/code&gt; must be constant literals. All the &lt;code&gt;Vi&lt;/code&gt; and &lt;code&gt;Ei&lt;/code&gt; must have type &lt;code&gt;var&lt;/code&gt; and represent function names. All the &lt;code&gt;Fi&lt;/code&gt; must have type &lt;code&gt;'fun'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 과 모든 &lt;code&gt;Ki&lt;/code&gt; 는 원자 리터럴이어야하고 모든 &lt;code&gt;Ti&lt;/code&gt; 는 상수 리터럴이어야합니다. 모든 &lt;code&gt;Vi&lt;/code&gt; 및 &lt;code&gt;Ei&lt;/code&gt; 는 &lt;code&gt;var&lt;/code&gt; 유형을 가져야 하며 함수 이름을 나타내야합니다. 모든 &lt;code&gt;Fi&lt;/code&gt; 에는 &lt;code&gt;'fun'&lt;/code&gt; 유형이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="db357be2c6e24ba8d75e94a61e6e120c71ae64d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; does not refer to a symbolic link or the name of the file that it refers to does not conform to the expected encoding.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 이 기호 링크를 참조하지 않거나 참조하는 파일 이름이 예상 인코딩과 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2df931b32fd691b415cd811641613597990693bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; does not refer to a symbolic link.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 심볼릭 링크를 나타내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="75cdce804a63cdd95631d5a56a27a0bcf3baf793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; in these actions can be a component name of a &lt;code&gt;SEQUENCE OF&lt;/code&gt; or a &lt;code&gt;SET OF&lt;/code&gt;, or a name of an alternative in a &lt;code&gt;CHOICE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 이러한 작업의는의 구성 요소 이름이 될 수 있습니다 &lt;code&gt;SEQUENCE OF&lt;/code&gt; 또는 &lt;code&gt;SET OF&lt;/code&gt; , 또는에서 대안의 이름 &lt;code&gt;CHOICE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c3eb93ef8149458ab482435e4c9a7d47ca64bfd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the checkpoint name. &lt;code&gt;Nodes&lt;/code&gt; are the nodes where the checkpoint is known.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 검사 점 이름입니다. &lt;code&gt;Nodes&lt;/code&gt; 는 검사 점이 알려진 노드입니다.</target>
        </trans-unit>
        <trans-unit id="7ac46ed1eedcb3ad614812c9cbbd3f2b44f49ebd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the command name set by &lt;code&gt;&lt;a href=&quot;#open_port-2&quot;&gt;open_port/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;#open_port-2&quot;&gt;open_port/2&lt;/a&gt;&lt;/code&gt; 에 의해 설정된 명령 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="e2cdd3bd8ec9230d1df9f453b5c15f634833bccb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the full dynamic node name of &lt;code&gt;A&lt;/code&gt;, as a string of bytes. &lt;code&gt;Nlen&lt;/code&gt; is the byte length of the node name in 16-bit big endian. Any extra data after the node &lt;code&gt;Name&lt;/code&gt; must be accepted and ignored.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 바이트 문자열 인 &lt;code&gt;A&lt;/code&gt; 의 전체 동적 노드 이름입니다 . &lt;code&gt;Nlen&lt;/code&gt; 은 16 비트 빅 엔디안에서 노드 이름의 바이트 길이입니다. 노드 &lt;code&gt;Name&lt;/code&gt; 뒤의 모든 추가 데이터 는 허용되고 무시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="d550506e707d5d81ed0acd558c1bd61cacd410bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the locally registered name of each &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 각 &lt;code&gt;gen_server&lt;/code&gt; 프로세스 의 로컬로 등록 된 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="73eb324042bd7592ebc61b396a4e74d0804b286d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the name of an activated checkpoint. For details on how to include table names in checkpoints, see the function &lt;code&gt;mnesia:activate_checkpoint(ArgList)&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;#checkpoints&quot;&gt;Checkpoints&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 활성화 된 체크 포인트의 이름입니다. 체크 포인트에서 테이블 이름을 포함하는 방법에 대한 자세한 내용은 함수 참조 &lt;code&gt;mnesia:activate_checkpoint(ArgList)&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;#checkpoints&quot;&gt;Checkpoints&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a8f45333ed70e58f7d247411d6058ef093b59b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the name of the driver to be unloaded. The name can be specified as an &lt;code&gt;iolist()&lt;/code&gt; or as an &lt;code&gt;atom()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 언로드 할 드라이버의 이름입니다. 이름은 &lt;code&gt;iolist()&lt;/code&gt; 또는 &lt;code&gt;atom()&lt;/code&gt; 으로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef8cb9dda49ee5482283bd549deb325f92f2fb87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the name of the library. &lt;code&gt;VerNum&lt;/code&gt; is the numeric version according to the library's own versioning scheme. &lt;code&gt;VerStr&lt;/code&gt; contains a text variant of the version.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 라이브러리의 이름입니다. &lt;code&gt;VerNum&lt;/code&gt; 은 라이브러리의 자체 버전 관리 체계에 따른 숫자 버전입니다. &lt;code&gt;VerStr&lt;/code&gt; 에는 버전의 텍스트 변형이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="771edaaf4f3e7410abb24403f17386952fa561ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the name of the local function (an atom) and &lt;code&gt;Arguments&lt;/code&gt; is a list of the &lt;strong&gt;evaluated&lt;/strong&gt; arguments. The function handler returns the value of the local function. In this case, the current bindings cannot be accessed. To signal an error, the function handler calls &lt;code&gt;exit/1&lt;/code&gt; with a suitable exit value.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 로컬 함수 (원자)의 이름이고 &lt;code&gt;Arguments&lt;/code&gt; 는 &lt;strong&gt;평가 된&lt;/strong&gt; 인수 의 목록입니다 . 함수 핸들러는 로컬 함수의 값을 리턴합니다. 이 경우 현재 바인딩에 액세스 할 수 없습니다. 오류를 알리기 위해 함수 핸들러 는 적절한 종료 값으로 &lt;code&gt;exit/1&lt;/code&gt; 을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="a43e3667be07ca142803c5790c58519639672f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the name of the local function (an atom), &lt;code&gt;Arguments&lt;/code&gt; is a list of the &lt;strong&gt;unevaluated&lt;/strong&gt; arguments, and &lt;code&gt;Bindings&lt;/code&gt; are the current variable bindings. The function handler returns:</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 로컬 함수 (원자)의 이름이고 &lt;code&gt;Arguments&lt;/code&gt; 는 &lt;strong&gt;평가되지 않은&lt;/strong&gt; 인수 목록 이며 &lt;code&gt;Bindings&lt;/code&gt; 는 현재 변수 바인딩입니다. 함수 핸들러는 다음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a709740b8281285c41301bf694df250b5416fd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the name of the table. It is usually the same name as the name of the records that constitute the table. For details, see &lt;code&gt;record_name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 테이블의 이름입니다. 일반적으로 테이블을 구성하는 레코드의 이름과 동일합니다. 자세한 내용은 &lt;code&gt;record_name&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9f22f7134ccdd1ebfe0c6dbad2b4c85066f34a6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; is the name you allocated to the Unix host in your &lt;code&gt;require&lt;/code&gt; statement, for example:</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 &lt;code&gt;require&lt;/code&gt; 문 에서 Unix 호스트에 할당 한 이름 입니다 (예 :</target>
        </trans-unit>
        <trans-unit id="f92e9c2e33b39ed7fe892a2f6b58625c24db2d61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; must be a &lt;strong&gt;non-empty&lt;/strong&gt; string.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 &lt;strong&gt;비어 있지 않은&lt;/strong&gt; 문자열 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="7d3a0f6f135240052a580b6c1e66616b1056df5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt; must be an atom.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 은 원자 여야합니다.</target>
        </trans-unit>
        <trans-unit id="8956a3e0869a4e2f39147cecb7e9876f6164b93b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Vsn&lt;/code&gt;, &lt;code&gt;EVsn&lt;/code&gt;, and &lt;code&gt;AppVsn&lt;/code&gt; are strings.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; , &lt;code&gt;Vsn&lt;/code&gt; , &lt;code&gt;EVsn&lt;/code&gt; 및 &lt;code&gt;AppVsn&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="50d4c67b9092aa698d36ec4bda6efa981e50be27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt;, if the &lt;code&gt;gen_server&lt;/code&gt; process is locally registered</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; &lt;code&gt;gen_server&lt;/code&gt; 프로세스가 로컬로 등록 된 경우 Name</target>
        </trans-unit>
        <trans-unit id="60de7db607b53ece98d1d7aa438add6eabe64c8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt;, if the event manager is locally registered</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 이벤트 관리자가 로컬로 등록 된 경우 Name</target>
        </trans-unit>
        <trans-unit id="8b8fe5e7cd19a344662822fe3984a523410afd7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Name&lt;/code&gt;, if the supervisor is locally registered</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 수퍼바이저가 로컬로 등록 된 경우 Name</target>
        </trans-unit>
        <trans-unit id="66736cc8494e055af92cabef62c336e8b430dd24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NameInArchive&lt;/code&gt; is the name under which the file becomes stored in the tar file. The file gets this name when it is extracted from the tar file.</source>
          <target state="translated">&lt;code&gt;NameInArchive&lt;/code&gt; 는 파일이 tar 파일에 저장되는 이름입니다. 파일은 tar 파일에서 추출 될 때이 이름을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="545c865bca330a853462ad208219ff76f96725b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NameX&lt;/code&gt; are the names of the expected callbacks. &lt;code&gt;ArgX_Y&lt;/code&gt; and &lt;code&gt;ResX&lt;/code&gt; are types as they are described in &lt;code&gt;&lt;a href=&quot;../reference_manual/typespec&quot;&gt;Types and Function Specifications&lt;/a&gt;&lt;/code&gt;. The whole syntax of the &lt;code&gt;-spec&lt;/code&gt; attribute is supported by the &lt;code&gt;-callback&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;NameX&lt;/code&gt; 는 예상되는 콜백 이름입니다. &lt;code&gt;ArgX_Y&lt;/code&gt; 및 &lt;code&gt;ResX&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../reference_manual/typespec&quot;&gt;Types and Function Specifications&lt;/a&gt;&lt;/code&gt; 설명 된 유형 입니다. 의 전체 구문 &lt;code&gt;-spec&lt;/code&gt; 속성이 지원됩니다 &lt;code&gt;-callback&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="7e845e64778c4c705a878ee72c3537821180e5cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NameX&lt;/code&gt; are the names of the expected callbacks. &lt;code&gt;ArgX_Y&lt;/code&gt; and &lt;code&gt;ResX&lt;/code&gt; are types as they are described in &lt;code&gt;Types and Function Specifications&lt;/code&gt;. The whole syntax of the &lt;code&gt;-spec&lt;/code&gt; attribute is supported by the &lt;code&gt;-callback&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;NameX&lt;/code&gt; 는 예상되는 콜백의 이름입니다. &lt;code&gt;ArgX_Y&lt;/code&gt; 및 &lt;code&gt;ResX&lt;/code&gt; 는 &lt;code&gt;Types and Function Specifications&lt;/code&gt; 설명 된대로 유형 입니다. 의 전체 구문 &lt;code&gt;-spec&lt;/code&gt; 속성이 지원됩니다 &lt;code&gt;-callback&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="b136947175586c5142c8832b87cb86ef8bd2be6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Namespace&lt;/code&gt; is a filename and is encoded and decoded as discussed in module &lt;code&gt;&lt;a href=&quot;file&quot;&gt;file&lt;/a&gt;&lt;/code&gt;, with the following exceptions:</source>
          <target state="translated">&lt;code&gt;Namespace&lt;/code&gt; 는 파일 이름이며 다음 예외를 제외하고 모듈 &lt;code&gt;&lt;a href=&quot;file&quot;&gt;file&lt;/a&gt;&lt;/code&gt; 에서 설명한대로 인코딩 및 디코딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="ccbac92a2a52f857fba9558a5924f557a8a6fcbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NativeErrorCode&lt;/code&gt; is the numberic error code returned by the underlying database. The possible values and their meanings are dependent on the database being used.</source>
          <target state="translated">&lt;code&gt;NativeErrorCode&lt;/code&gt; 는 기본 데이터베이스에서 반환 된 숫자 오류 코드입니다. 가능한 값과 의미는 사용중인 데이터베이스에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="765470b4e281d8e1224903815a6ad49c4c5919e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NegotiationTimeout&lt;/code&gt; in a call establishing an ssh session, for example &lt;code&gt;ssh:connect/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NegotiationTimeout&lt;/code&gt; ssh 세션을 설정하는 호출의 NegotiationTimeout ( 예 &lt;code&gt;ssh:connect/3&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94cbc764c37273ab12f912e6692a604d1f8725cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;New&lt;/code&gt; already exists.</source>
          <target state="translated">&lt;code&gt;New&lt;/code&gt; 이미 존재합니다.</target>
        </trans-unit>
        <trans-unit id="328d53b4e71ea5302614cc8ca4f8a61091e770e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;New&lt;/code&gt; is a list of parameter-value tuples including all added configuration parameters.</source>
          <target state="translated">&lt;code&gt;New&lt;/code&gt; 추가 된 모든 구성 매개 변수를 포함한 매개 변수 값 튜플 목록입니다.</target>
        </trans-unit>
        <trans-unit id="6e31e51b7e149794f503717a777ea948ce0cc5e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewAttributeList&lt;/code&gt; and &lt;code&gt;NewRecordName&lt;/code&gt; specify the attributes and the new record type of the converted table. Table name always remains unchanged. If &lt;code&gt;record_name&lt;/code&gt; is changed, only the Mnesia functions that use table identifiers work, for example, &lt;code&gt;mnesia:write/3&lt;/code&gt; works, but not &lt;code&gt;mnesia:write/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NewAttributeList&lt;/code&gt; 및 &lt;code&gt;NewRecordName&lt;/code&gt; 은 변환 된 테이블의 속성 및 새 레코드 유형을 지정합니다. 테이블 이름은 항상 변경되지 않습니다. 경우 &lt;code&gt;record_name&lt;/code&gt; 이 변경 만 Mnesia 기능을 사용하여 테이블 식별자 작업, 예를 들어, 그 &lt;code&gt;mnesia:write/3&lt;/code&gt; 작품,하지만 &lt;code&gt;mnesia:write/1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="24c0dbf798566229a939b753d52c26eae9958d4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewGroupDefs&lt;/code&gt; is the possibly modified version of this list.</source>
          <target state="translated">&lt;code&gt;NewGroupDefs&lt;/code&gt; 는이 목록의 수정 된 버전입니다.</target>
        </trans-unit>
        <trans-unit id="28d982c649f36ccbbd9ba53caa157858385419a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewPasswd&lt;/code&gt;. The new password to set. Should be &quot;&quot; if the server is to generate the password. In this case, the result will be &lt;code&gt;{ok, GenPasswd}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NewPasswd&lt;/code&gt; . 설정할 새 비밀번호입니다. 서버가 비밀번호를 생성하려면 &quot;&quot;이어야합니다. 이 경우 결과는 &lt;code&gt;{ok, GenPasswd}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="515b7ef71b0ee4df2f875a6d00668174d6db04ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewReturn&lt;/code&gt; is the possibly modified return value of &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt;. To recover from a failure in &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt;, return &lt;code&gt;ConfigList&lt;/code&gt; with the &lt;code&gt;tc_status&lt;/code&gt; element removed. For more details, see &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#post&quot;&gt;Post Hooks&lt;/a&gt;&lt;/code&gt; in section &quot;Manipulating Tests&quot; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;NewReturn&lt;/code&gt; 는 의 가능성이 수정 반환 값입니다 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; . 의 오류를 복구하기 위해 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 반환 &lt;code&gt;ConfigList&lt;/code&gt; 을 와 &lt;code&gt;tc_status&lt;/code&gt; 의 제거 요소입니다. 자세한 내용 은 사용 설명서의 &quot;테스트 조작&quot;섹션의 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#post&quot;&gt;Post Hooks&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec62b6a5ecc1ea4c0b51c98820c28f6998c8d6a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewReturn&lt;/code&gt; is the possibly modified return value of &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt;. To recover from a failure in &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt;, return &lt;code&gt;ConfigList&lt;/code&gt; with the &lt;code&gt;tc_status&lt;/code&gt; element removed. For more details, see &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#post&quot;&gt; Post Hooks&lt;/a&gt;&lt;/code&gt; in section &quot;Manipulating Tests&quot; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;NewReturn&lt;/code&gt; 는 의 가능성이 수정 반환 값입니다 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; . 의 오류를 복구하기 위해 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 반환 &lt;code&gt;ConfigList&lt;/code&gt; 을 와 &lt;code&gt;tc_status&lt;/code&gt; 의 제거 요소입니다. 자세한 내용 은 사용자 가이드의 &quot;테스트 조작&quot;섹션에있는 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#post&quot;&gt; Post Hooks&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b209ba1c72d5884aeecf167a743b5dc76a7f63d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewReturn&lt;/code&gt; is the possibly modified version of &lt;code&gt;Return&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NewReturn&lt;/code&gt; 은 &lt;code&gt;Return&lt;/code&gt; 의 수정 된 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="7c2990b022e8e0325b78a187512f911c29277388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewState&lt;/code&gt; is a similar tuple where &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;Id&lt;/code&gt; are to have the same values as in &lt;code&gt;State&lt;/code&gt;, but the value of &lt;code&gt;HandlerState&lt;/code&gt; can be different. Returning a &lt;code&gt;NewState&lt;/code&gt;, whose &lt;code&gt;Module&lt;/code&gt; or &lt;code&gt;Id&lt;/code&gt; values differ from those of &lt;code&gt;State&lt;/code&gt;, leaves the state of the event handler unchanged. For a &lt;code&gt;gen_event&lt;/code&gt; process, &lt;code&gt;StateFun&lt;/code&gt; is called once for each event handler registered in the &lt;code&gt;gen_event&lt;/code&gt; process.</source>
          <target state="translated">&lt;code&gt;NewState&lt;/code&gt; 는 &lt;code&gt;Module&lt;/code&gt; 과 &lt;code&gt;Id&lt;/code&gt; 가 &lt;code&gt;State&lt;/code&gt; 와 동일한 값을 가지지 만 &lt;code&gt;HandlerState&lt;/code&gt; 의 값이 다를 수 있는 유사한 튜플 입니다. 돌아 오는 &lt;code&gt;NewState&lt;/code&gt; 그, &lt;code&gt;Module&lt;/code&gt; 또는 &lt;code&gt;Id&lt;/code&gt; 값과 다른 &lt;code&gt;State&lt;/code&gt; , 잎 이벤트 핸들러의 상태를 변경합니다. A에 대한 &lt;code&gt;gen_event&lt;/code&gt; 프로세스 &lt;code&gt;StateFun&lt;/code&gt; 는 에 등록 된 각 이벤트 핸들러라고하면 &lt;code&gt;gen_event&lt;/code&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="17b32d3a81246afcc0dd62838016f0409a1eee0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewState&lt;/code&gt; is stored as &lt;code&gt;hash_state&lt;/code&gt; among the other &lt;code&gt;frag_properties&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NewState&lt;/code&gt; 는 다른 &lt;code&gt;frag_properties&lt;/code&gt; 중에서 &lt;code&gt;hash_state&lt;/code&gt; 로 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="3abda6b9a30de0a066f89a313d615ecf29c6078d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NewValue&lt;/code&gt; is guaranteed to be of the correct type, length and within ranges, as specified in the MIB. If the object is an enumerated integer or of type BITS, the integer value is used.</source>
          <target state="translated">&lt;code&gt;NewValue&lt;/code&gt; 는 MIB에 지정된대로 올바른 유형, 길이 및 범위 내에 있어야합니다. 오브젝트가 열거 된 정수이거나 BITS 유형 인 경우 정수 값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="785ceb38e2973891b238ae5e1cba88100a2cfa0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Next&lt;/code&gt; - Scrolls &lt;code&gt;all&lt;/code&gt; viewers one page forward.</source>
          <target state="translated">&lt;code&gt;Next&lt;/code&gt; - &lt;code&gt;all&lt;/code&gt; 뷰어를 한 페이지 앞으로 스크롤 합니다 .</target>
        </trans-unit>
        <trans-unit id="fcaf71de120e2b7991d4f0e072e835ed3b0c6bb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Next&lt;/code&gt; - Scrolls &lt;code&gt;this&lt;/code&gt; viewer one page forward.</source>
          <target state="translated">&lt;code&gt;Next&lt;/code&gt; - &lt;code&gt;this&lt;/code&gt; 뷰어를 한 페이지 앞으로 스크롤 합니다 .</target>
        </trans-unit>
        <trans-unit id="f5ae4fc286f50c9f2e1b1eb7c5854d1833ad72ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NoWrittenItems&lt;/code&gt; is the number of items written to the log since the disk log process was created.</source>
          <target state="translated">&lt;code&gt;NoWrittenItems&lt;/code&gt; 는 디스크 로그 프로세스가 작성된 이후 로그에 기록 된 항목 수입니다.</target>
        </trans-unit>
        <trans-unit id="fa474add3809ed4879c7a3c1a09c0fc38388a150" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Node&lt;/code&gt; and &lt;code&gt;Creation&lt;/code&gt; are as in &lt;code&gt;&lt;a href=&quot;#REFERENCE_EXT&quot;&gt;REFERENCE_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 와 &lt;code&gt;Creation&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;#REFERENCE_EXT&quot;&gt;REFERENCE_EXT&lt;/a&gt;&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="d0137e00a0a60799cb48e18d9537f71c92851f18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Node&lt;/code&gt; is not an atom.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 는 원자가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="07b70ef38f1f3d3e2a0ff9fe40a1a2bd64902bfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Node&lt;/code&gt; is the local node.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 는 로컬 노드입니다.</target>
        </trans-unit>
        <trans-unit id="66cbb254a1d378f7244a990b013aeea1ed865b36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NodeDesc = [Node | {Node,...,Node}]&lt;/code&gt; is a list of node names in priority order. The order between nodes in a tuple is undefined.</source>
          <target state="translated">&lt;code&gt;NodeDesc = [Node | {Node,...,Node}]&lt;/code&gt; 는 우선 순위에 따른 노드 이름 목록입니다. 튜플의 노드 간 순서는 정의되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="74750ce275bd88c97d759afd3cb362af869f6aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NodeInfo&lt;/code&gt; is a string written for each active node. When all &lt;code&gt;NodeInfo&lt;/code&gt; has been written the connection is closed by the EPMD.</source>
          <target state="translated">&lt;code&gt;NodeInfo&lt;/code&gt; 는 각 활성 노드에 대해 작성된 문자열입니다. 모든 &lt;code&gt;NodeInfo&lt;/code&gt; 가 작성되면 EPMD에 의해 연결이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="586d837c1f1ce6b8f6dae5999de20273b61f1bb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NodeInfo&lt;/code&gt; is a string written for each node kept in the EPMD. When all &lt;code&gt;NodeInfo&lt;/code&gt; has been written the connection is closed by the EPMD.</source>
          <target state="translated">&lt;code&gt;NodeInfo&lt;/code&gt; 는 EPMD에 보관 된 각 노드에 대해 작성된 문자열입니다. 모든 &lt;code&gt;NodeInfo&lt;/code&gt; 가 작성되면 EPMD에 의해 연결이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="490b80d8655d54125bed73203f8203d1f6634b01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NodeInfo&lt;/code&gt; is, as expressed in Erlang:</source>
          <target state="translated">&lt;code&gt;NodeInfo&lt;/code&gt; 는 Erlang으로 표현됩니다.</target>
        </trans-unit>
        <trans-unit id="b479d5159f0e4a8490e344deca55e474b17b2371" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NodeType&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;NodeType&lt;/code&gt;s:</target>
        </trans-unit>
        <trans-unit id="a7b2c3bb667de2fd85c633efa594c6e2eea459ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nodes&lt;/code&gt; is a list of node names to which the request is to be sent. Default value is the list of all known nodes &lt;code&gt;[node()|nodes()]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Nodes&lt;/code&gt; 는 요청이 전송 될 노드 이름 목록입니다. 기본값은 알려진 모든 노드 &lt;code&gt;[node()|nodes()]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b2cbd691c92a3930825bd9afcdb4de6be7827998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nodes&lt;/code&gt; is a list of node names where the application can run, in priority from left to right. Node names can be grouped using tuples to indicate that they have the same priority.</source>
          <target state="translated">&lt;code&gt;Nodes&lt;/code&gt; 는 왼쪽에서 오른쪽으로 애플리케이션을 실행할 수있는 노드 이름 목록입니다. 튜플을 사용하여 노드 이름을 그룹화하여 우선 순위가 동일 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="58f6ff3875611c95cda43f87920abae3c3e49b50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nodes&lt;/code&gt; is not a proper list of atoms.</source>
          <target state="translated">&lt;code&gt;Nodes&lt;/code&gt; 는 적절한 원자 목록이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="9b1f8e318225402b1e929bf44753fb73a9820692" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nodes&lt;/code&gt; is not a proper list of atoms. Note that some requests may already have been sent when the failure occurs. That is, the function may or may not be applied on some nodes.</source>
          <target state="translated">&lt;code&gt;Nodes&lt;/code&gt; 는 적절한 원자 목록이 아닙니다. 실패가 발생하면 일부 요청이 이미 전송되었을 수 있습니다. 즉, 기능이 일부 노드에 적용되거나 적용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13e1ebff4b6f89142207fc73da0648ca05edb15c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Normal (possibly restricted)&lt;/code&gt; mode, in which commands can be edited and expressions evaluated</source>
          <target state="translated">&lt;code&gt;Normal (possibly restricted)&lt;/code&gt; 명령을 편집하고 표현식을 평가할 수있는 일반 (제한된) 모드</target>
        </trans-unit>
        <trans-unit id="b37ca8a74b6154ec7f34f34ffd7d84a3e6b7414f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NoteStore&lt;/code&gt; is the &lt;code&gt;pid()&lt;/code&gt; of the note-store process.</source>
          <target state="translated">&lt;code&gt;NoteStore&lt;/code&gt; 는 노트 저장 프로세스 의 &lt;code&gt;pid()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="034da9f943bf71851a5d9f55fd9a10823d740045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NoteStore&lt;/code&gt; is the pid of the note-store process and &lt;code&gt;MasterAgent&lt;/code&gt; is the pid of the master-agent process.</source>
          <target state="translated">&lt;code&gt;NoteStore&lt;/code&gt; 는 메모 저장 프로세스 의 pid 이고 &lt;code&gt;MasterAgent&lt;/code&gt; 는 마스터 에이전트 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="48c23e9c71760101a3f67804c9010616ae9ac30d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NoteStore&lt;/code&gt; is the pid of the note-store process.</source>
          <target state="translated">&lt;code&gt;NoteStore&lt;/code&gt; 는 메모 저장 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="291fb8467f940a165b239b0c369cb0109e1ab7ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Notify&lt;/code&gt; is the value set by the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;notify&lt;/code&gt; or function &lt;code&gt;change_notify/3&lt;/code&gt; for the owners of the log.</source>
          <target state="translated">&lt;code&gt;Notify&lt;/code&gt; 는 로그 소유자에 대해 &lt;code&gt;open/1&lt;/code&gt; 옵션 &lt;code&gt;notify&lt;/code&gt; 또는 기능 &lt;code&gt;change_notify/3&lt;/code&gt; 에 의해 설정된 값입니다 .</target>
        </trans-unit>
        <trans-unit id="837a08f1c1c9f178a8455d863867aafba680c431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NotifyName&lt;/code&gt; is a unique non-empty string.</source>
          <target state="translated">&lt;code&gt;NotifyName&lt;/code&gt; 은 비어 있지 않은 고유 한 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="e8d255fe7cfe9e0e941f5330e4ca4bf0faebaf01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NotifyView&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;NotifyView&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="a2cf72890c44949f9ed7a853209a8be6aef9702b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumFree&lt;/code&gt; number of terms, each one encoded according to its type.</source>
          <target state="translated">&lt;code&gt;NumFree&lt;/code&gt; 개수의 항으로, 각각의 유형에 따라 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="732c07e7c46a60e9725c43c489bb948b42c1a42a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; is the number of reductions executed by the process.</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; 는 프로세스에서 실행 한 감소 수입니다.</target>
        </trans-unit>
        <trans-unit id="1d76ee72d1d29eb19fe186bb8b034fe79ae29427" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OCTET STRING&lt;/code&gt; is the simplest of all ASN.1 types. &lt;code&gt;OCTET STRING&lt;/code&gt; only moves or transfers, for example, binary files or other unstructured information complying with two rules: the bytes consist of octets and encoding is not required.</source>
          <target state="translated">&lt;code&gt;OCTET STRING&lt;/code&gt; 은 모든 ASN.1 유형 중에서 가장 단순합니다. &lt;code&gt;OCTET STRING&lt;/code&gt; 은 2 개의 규칙을 따르는 바이너리 파일 또는 기타 구조화되지 않은 정보와 같은 이동 또는 전송 만합니다 . 바이트는 8 진수로 구성되며 인코딩은 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="71b349bafb6a64a7db665c51b4a9142d1799133c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ODBCErrorCode&lt;/code&gt; is the ODBC error string returned by the ODBC driver.</source>
          <target state="translated">&lt;code&gt;ODBCErrorCode&lt;/code&gt; 는 ODBC 드라이버가 반환 한 ODBC 오류 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="8877b0517875c4c1353881308ce26c158f73b91a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OL&lt;/code&gt; is a subset of &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OL&lt;/code&gt; 은 &lt;code&gt;F&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="7042c1bf2e60730dd0e5780d9209d7e65dc3a368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP Design Principles&lt;/code&gt;, &lt;code&gt;config(4)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;script&quot;&gt;script(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;sys(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;OTP Design Principles&lt;/code&gt; , &lt;code&gt;config(4)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;script&quot;&gt;script(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;sys(3)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="596e2b21797bd5cf187819c3e8f33047157815b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP Design Principles&lt;/code&gt;, &lt;code&gt;kernel(6)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;app&quot;&gt;app(4)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;OTP Design Principles&lt;/code&gt; , &lt;code&gt;kernel(6)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;app&quot;&gt;app(4)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46a5eafa384af530e22db3928986f321e1d3b82a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-EVA-LOG-MIB&lt;/code&gt; (in &lt;code&gt;eva&lt;/code&gt;) contains objects for instrumentation and control of the events and alarm logs in the system.</source>
          <target state="translated">&lt;code&gt;OTP-EVA-LOG-MIB&lt;/code&gt; (에서 &lt;code&gt;eva&lt;/code&gt; ) 계측 및 시스템의 이벤트 및 알람 로그의 제어를위한 객체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="5354eb3e670814e45621ba2af5edebfff77874ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-EVA-MIB&lt;/code&gt; (in &lt;code&gt;eva&lt;/code&gt;) contains objects for instrumentation and control of the events and alarms in the system.</source>
          <target state="translated">&lt;code&gt;OTP-EVA-MIB&lt;/code&gt; (에서 &lt;code&gt;eva&lt;/code&gt; ) 계측 시스템의 이벤트 및 알람의 제어를위한 객체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="cd0b26353bceaed77b88726762c64be99e2f569a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-LOG-MIB&lt;/code&gt; (in &lt;code&gt;eva&lt;/code&gt;) contains objects for instrumentation and control of the logs and FTP transfer of logs.</source>
          <target state="translated">&lt;code&gt;OTP-LOG-MIB&lt;/code&gt; (에서 &lt;code&gt;eva&lt;/code&gt; ) 계측 및 로그 관리 및 로그의 FTP 전송을위한 객체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="fbd55a7b1574a083934ff314d22a089678e67380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-MIB&lt;/code&gt; (in SASL) contains objects for instrumentation of the Erlang nodes, the Erlang machines, and the applications in the system.</source>
          <target state="translated">&lt;code&gt;OTP-MIB&lt;/code&gt; SASL의 OTP-MIB 에는 Erlang 노드, Erlang 시스템 및 시스템의 응용 프로그램을 계측하기위한 개체가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec0fae7ff36cfd7c9ba14f4f8a001319051a6bde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-OS-MON-MIB&lt;/code&gt; (in &lt;code&gt;oc_mon&lt;/code&gt;) contains objects for instrumentation of disk, memory, and CPU use of the nodes in the system.</source>
          <target state="translated">&lt;code&gt;OTP-OS-MON-MIB&lt;/code&gt; (에 &lt;code&gt;oc_mon&lt;/code&gt; 는 ) 디스크, 메모리, 시스템의 노드의 CPU 사용의 계측을위한 객체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="3091d8303f70a6be1db136f091f6f3b0c83fb7e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-REG&lt;/code&gt; (in SASL) contains the top-level OTP registration objects, used by all other MIBs.</source>
          <target state="translated">&lt;code&gt;OTP-REG&lt;/code&gt; SASL의 OTP-REG 에는 다른 모든 MIB에서 사용하는 최상위 OTP 등록 개체가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0582a9a6fe880ec879698a325c9960d6425875fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-REG&lt;/code&gt; (in SNMP) contains the top-level OTP registration objects, used by all other MIBs.</source>
          <target state="translated">&lt;code&gt;OTP-REG&lt;/code&gt; (SNMP)에는 다른 모든 MIB에서 사용하는 최상위 OTP 등록 개체가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1009841b81e68861a21b4e5ed63cd0e3098ce8e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-SNMPEA-LOG-MIB&lt;/code&gt; (in &lt;code&gt;eva&lt;/code&gt;) contains objects for instrumentation and control of the SNMP audit trail log in the system.</source>
          <target state="translated">&lt;code&gt;OTP-SNMPEA-LOG-MIB&lt;/code&gt; (에서 &lt;code&gt;eva&lt;/code&gt; ) 계측 및 시스템의 SNMP 감사 추적 로그의 제어를위한 객체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="9dd76d91d3c352becfb98439502cf6422712a44c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-SNMPEA-MIB&lt;/code&gt; (in &lt;code&gt;snmp&lt;/code&gt;) contains objects for instrumentation and control of the extensible SNMP agent itself. The agent also implements the standard SNMPv2-MIB (or v1 part of MIB-II, if SNMPv1 is used).</source>
          <target state="translated">&lt;code&gt;OTP-SNMPEA-MIB&lt;/code&gt; (에 &lt;code&gt;snmp&lt;/code&gt; ) 계측 및 확장 가능한 SNMP 에이전트 자체의 제어를위한 객체를 포함합니다. 또한 에이전트는 표준 SNMPv2-MIB (또는 SNMPv1을 사용하는 경우 MIB-II의 v1 부분)를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="19c565759fb6706bc6b68ac7c50f98cb9c6ab3fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-TC&lt;/code&gt; (in SASL) contains the general Textual Conventions, which can be used by any other MIB.</source>
          <target state="translated">&lt;code&gt;OTP-TC&lt;/code&gt; SASL의 OTP-TC 에는 다른 MIB에서 사용할 수있는 일반 텍스트 규칙이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cfe56e3becc51b8007df4237b008ee52a4bee8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OTP-TC&lt;/code&gt; (in SNMP) contains the general Textual Conventions, which can be used by any other MIB.</source>
          <target state="translated">&lt;code&gt;OTP-TC&lt;/code&gt; (SNMP에서)는 다른 MIB에서 사용할 수있는 일반 텍스트 규칙을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="4390b54a343de30c039d51b8f3a4002c40283a0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ok = integer()&lt;/code&gt;, current number of successful test cases.</source>
          <target state="translated">&lt;code&gt;Ok = integer()&lt;/code&gt; , 현재 성공한 테스트 사례 수.</target>
        </trans-unit>
        <trans-unit id="19e1276ce30f4d7d3573a6ae2345113d541579ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OldConfig&lt;/code&gt; is the existing configuration and &lt;code&gt;NewConfig&lt;/code&gt; is the new configuration.</source>
          <target state="translated">&lt;code&gt;OldConfig&lt;/code&gt; 는 기존 구성이고 &lt;code&gt;NewConfig&lt;/code&gt; 는 새 구성입니다.</target>
        </trans-unit>
        <trans-unit id="d426f9dcc9f2970db45f15cf56c0e01f2d29fc82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OldPasswd&lt;/code&gt;. Sometimes required by server policy for a user to change their password. If not required, use &lt;code&gt;&lt;a href=&quot;#modify_password-3&quot;&gt;modify_password/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OldPasswd&lt;/code&gt; . 때때로 사용자가 비밀번호를 변경하기 위해 서버 정책에 필요합니다. 필요하지 않은 경우 &lt;code&gt;&lt;a href=&quot;#modify_password-3&quot;&gt;modify_password/3&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="3919a29fdc3871d68b31237220b20168cd002a61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OldRecs&lt;/code&gt; is the contents before the operation.</source>
          <target state="translated">&lt;code&gt;OldRecs&lt;/code&gt; 는 작업 전의 내용입니다.</target>
        </trans-unit>
        <trans-unit id="2e3bfed079c387e722ebe26d72736f09b66c84c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OldState&lt;/code&gt; and &lt;code&gt;OldData&lt;/code&gt; is the internal state of the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OldState&lt;/code&gt; 와 &lt;code&gt;OldData&lt;/code&gt; 은 의 내부 상태 &lt;code&gt;gen_statem&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ac713cf5d1b8888b21c5fb31b7c6845f7785bb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OpCase(move_cx):&lt;/code&gt; defines a label for the instruction. The &lt;code&gt;OpCase()&lt;/code&gt; macro is defined in &lt;code&gt;beam_emu.c&lt;/code&gt;. It will expand this line to &lt;code&gt;lb_move_cx:&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OpCase(move_cx):&lt;/code&gt; 명령어의 레이블을 정의합니다. &lt;code&gt;OpCase()&lt;/code&gt; 매크로에 정의 &lt;code&gt;beam_emu.c&lt;/code&gt; . 이 줄을 &lt;code&gt;lb_move_cx:&lt;/code&gt; 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="d368a5ff655901886b6a66d305ea3bf6e5781014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Opaque&lt;/code&gt; is an opaque data structure that is internal to Mnesia.</source>
          <target state="translated">&lt;code&gt;Opaque&lt;/code&gt; 은 Mnesia 내부의 불투명 한 데이터 구조입니다.</target>
        </trans-unit>
        <trans-unit id="478156c544529a65641b9e44200481963695f336" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Opaque&lt;/code&gt;. &lt;code&gt;Mnesia&lt;/code&gt; does not interpret this argument, but it is forwarded to the backup module. The &lt;code&gt;Mnesia&lt;/code&gt; default backup module &lt;code&gt;mnesia_backup&lt;/code&gt; interprets this argument as a local filename.</source>
          <target state="translated">&lt;code&gt;Opaque&lt;/code&gt; . &lt;code&gt;Mnesia&lt;/code&gt; 는이 인수를 해석하지 않지만 백업 모듈로 전달됩니다. &lt;code&gt;Mnesia&lt;/code&gt; 의 기본 백업 모듈 &lt;code&gt;mnesia_backup&lt;/code&gt; 의 해석 로컬 파일 이름으로이 인수.</target>
        </trans-unit>
        <trans-unit id="ae66e284cfdfb1114963daa7564852b1152bbd20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Oper&lt;/code&gt; is the operation performed.</source>
          <target state="translated">&lt;code&gt;Oper&lt;/code&gt; 는 수행되는 작업입니다.</target>
        </trans-unit>
        <trans-unit id="eb4096f3f8213f00afa344d8f15f6fd496a9da6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Operation&lt;/code&gt; is an integer, which is passed on to the driver.</source>
          <target state="translated">&lt;code&gt;Operation&lt;/code&gt; 은 정수이며 드라이버로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="f36a7227f6d79294c55bea68b2e650721c67c81b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OptList&lt;/code&gt; is a list of tuples &lt;code&gt;{Option, Value}&lt;/code&gt;, where &lt;code&gt;Option&lt;/code&gt; always is an atom.</source>
          <target state="translated">&lt;code&gt;OptList&lt;/code&gt; 는 튜플 &lt;code&gt;{Option, Value}&lt;/code&gt; 목록이며 , 여기서 &lt;code&gt;Option&lt;/code&gt; 은 항상 원자입니다.</target>
        </trans-unit>
        <trans-unit id="287b58eb0e57c1afa55828144b7593765b16a12c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OptParams&lt;/code&gt; can be used for specifying optional parameters (&lt;code&gt;default-operation&lt;/code&gt;, &lt;code&gt;test-option&lt;/code&gt;, or &lt;code&gt;error-option&lt;/code&gt;) to be added to the &lt;code&gt;edit-config&lt;/code&gt; request. The value must be a list containing valid simple XML, for example:</source>
          <target state="translated">&lt;code&gt;OptParams&lt;/code&gt; 는 &lt;code&gt;edit-config&lt;/code&gt; 요청에 추가 할 선택적 매개 변수 ( &lt;code&gt;default-operation&lt;/code&gt; , &lt;code&gt;test-option&lt;/code&gt; 또는 &lt;code&gt;error-option&lt;/code&gt; )를 지정하는 데 사용할 수 있습니다 . 값은 유효한 단순 XML을 포함하는 목록이어야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a8a37a6383faf5bd990e5e4e31890d2a2543b972" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Option&lt;/code&gt; can be any of the following:</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; 은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b5a9dec8ea03d9e3bfe18de6b285b8ec48aa732" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Option&lt;/code&gt; can contain Mnesia options or QLC options. Mnesia recognizes the following options (any other option is forwarded to QLC).</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; 에는 Mnesia 옵션 또는 QLC 옵션이 포함될 수 있습니다. Mnesia는 다음 옵션을 인식합니다 (다른 옵션은 QLC로 전달됨).</target>
        </trans-unit>
        <trans-unit id="6089dd0db2650ae8cb44bd9a18bdf370e7056124" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Option&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="18ac2a922adb6bbd3cc79b09678bafbed8d32509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Option&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt;s:</target>
        </trans-unit>
        <trans-unit id="aeaca8f7616b3338d4e2bf16fa86b281ee785e31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OptionList&lt;/code&gt; is an option list allowed for &lt;code&gt;apply/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OptionList&lt;/code&gt; 는 &lt;code&gt;apply/3&lt;/code&gt; 에 허용되는 옵션 목록 입니다.</target>
        </trans-unit>
        <trans-unit id="8a3faa2b17c6429b0a95a66a6dcd2b40c8817ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options = [Opt]&lt;/code&gt;, see &lt;code&gt;gen_udp:open/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Options = [Opt]&lt;/code&gt; , &lt;code&gt;gen_udp:open/2&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7dcbc7957a87f9a6cb941c683d0b472aca9e1b91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt; is a list of &lt;code&gt;{Key,Value}&lt;/code&gt; tuples conforming to the options that you can give to &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt; 에 제공 할 수있는 옵션을 따르는 &lt;code&gt;{Key,Value}&lt;/code&gt; 튜플 의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="48c1b92a560d577d6e5dfdab4c37a651a573dc6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt; is a list of compiler options which defaults to &lt;code&gt;[]&lt;/code&gt;. Only options defining include file directories and macros are passed to &lt;code&gt;compile:file/2&lt;/code&gt;, everything else is ignored.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 는 기본적으로 &lt;code&gt;[]&lt;/code&gt; 로 설정된 컴파일러 옵션 목록입니다 . 파일 디렉토리 및 매크로 포함을 정의하는 옵션 만 &lt;code&gt;compile:file/2&lt;/code&gt; 로 전달되며 다른 모든 것은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f559095561fde76544581fc556d0e209bd42b9ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt; is a list of compiler options.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 은 컴파일러 옵션의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="2f8423083f97a7df8ac565042d4099626af510f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt; is a list of make- and compiler options. The following make options exist:</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 은 제조업체 및 컴파일러 옵션 목록입니다. 다음과 같은 make 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="54521563ef32a6c1ab3cb2a34a17e80587294026" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt; is a list with options specific for the &lt;code&gt;ASN.1&lt;/code&gt; compiler and options that are applied to the Erlang compiler. The latter are not recognized as &lt;code&gt;ASN.1&lt;/code&gt; specific. The available options are as follows:</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 은 &lt;code&gt;ASN.1&lt;/code&gt; 컴파일러에 특정한 옵션과 Erlang 컴파일러에 적용되는 옵션 이있는 목록입니다 . 후자는 &lt;code&gt;ASN.1&lt;/code&gt; 특정으로 인식되지 않습니다 . 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="068e560ba76981e265832b689777071b8432704e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt; is a single term or a list of terms, selected from the following:</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 은 다음에서 선택한 단일 용어 또는 용어 목록입니다.</target>
        </trans-unit>
        <trans-unit id="725a9878a92dc489a4ce90abe2ca36dc56c33fb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt; is not a proper list of terms.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 은 적절한 용어 목록이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0b6d0a9519ecf95ff8b72c3f0e24c46d6f8abaa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Options&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="e0a91cb78162c29efe8c580e918c15fcfb6c11c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Opts&lt;/code&gt; is a list of options in the format recognized by the &lt;code&gt;proplists&lt;/code&gt; module (and by the I/O server).</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; 에 의해 인식되는 형식으로 옵션의 목록입니다 &lt;code&gt;proplists&lt;/code&gt; 의 모듈 (및 I / O 서버에 의해).</target>
        </trans-unit>
        <trans-unit id="bda5e6218a019341421f92df0840e483b5a564fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Opts&lt;/code&gt; is an (basically) implementation dependent list of options to the network interface process. There are however a number of options which &lt;strong&gt;must&lt;/strong&gt; be handled: &lt;code&gt;versions&lt;/code&gt; and &lt;code&gt;verbosity&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; 는 네트워크 인터페이스 프로세스에 대한 (기본적으로) 구현 의존적 옵션 목록입니다. 그러나 처리 &lt;strong&gt;해야&lt;/strong&gt; 할 옵션 &lt;strong&gt;은 &lt;/strong&gt; &lt;code&gt;versions&lt;/code&gt; 및 &lt;code&gt;verbosity&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="551c07ecb25f49d23101b5a6ea66d0689d8325c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Opts&lt;/code&gt; is the same as for the &lt;code&gt;&lt;a href=&quot;snmp_config#agent_ni_opts&quot;&gt;net-if&lt;/a&gt;&lt;/code&gt; process &lt;strong&gt;and&lt;/strong&gt; takes precedence (for that transport) if present. The point is that each transport can have its own socket options.</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;snmp_config#agent_ni_opts&quot;&gt;net-if&lt;/a&gt;&lt;/code&gt; 프로세스 &lt;strong&gt;와&lt;/strong&gt; 동일하며 해당 전송이있는 경우 우선권을 갖습니다. 요점은 각 전송이 자체 소켓 옵션을 가질 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9b0d06bc7f57493511b019dfa2f4980cfcf56462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Opts&lt;/code&gt; overrides the corresponding resolver options. If option &lt;code&gt;nameservers&lt;/code&gt; is specified, it is assumed that it is the complete list of name serves, so resolver option &lt;code&gt;alt_nameserves&lt;/code&gt; is ignored. However, if option &lt;code&gt;alt_nameserves&lt;/code&gt; is also specified to this function, it is used.</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; 해당 해결 옵션을 무시합니다. 옵션 &lt;code&gt;nameservers&lt;/code&gt; 가 지정되면, 이름 서버 의 전체 목록 인 것으로 가정되므로 해석기 옵션 &lt;code&gt;alt_nameserves&lt;/code&gt; 는 무시됩니다. 그러나 옵션 &lt;code&gt;alt_nameserves&lt;/code&gt; 도이 함수에 지정되면 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="33448de07a89b4eee2f6c264b4dc9a7343972439" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Orddict2&lt;/code&gt; is a dictionary of all keys and values in &lt;code&gt;Orddict1&lt;/code&gt; for which &lt;code&gt;Pred(Key, Value)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Orddict2&lt;/code&gt; 는 모든 키와 값의 사전입니다 &lt;code&gt;Orddict1&lt;/code&gt; 하는 &lt;code&gt;Pred(Key, Value)&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b3cc79af51a5391cd1f2cecc0b523da7d7f2f9c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Origin&lt;/code&gt; is generally which NIF or driver that allocated the blocks, or 'system' if it could not be determined.</source>
          <target state="translated">&lt;code&gt;Origin&lt;/code&gt; 은 일반적으로 블록을 할당 한 NIF 또는 드라이버이거나, 결정될 수없는 경우 '시스템'입니다.</target>
        </trans-unit>
        <trans-unit id="eab40d930be126057236dbb57f8bf2a6baac9677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OsMonotonicTime&lt;/code&gt; equals current OS monotonic time in &lt;code&gt;native&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OsMonotonicTime&lt;/code&gt; 은 &lt;code&gt;native&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; 현재 OS 단조 시간과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="932f08e2b5494f5f7f650be331c218bd5689618e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OsPid&lt;/code&gt; is the process identifier (or equivalent) of an OS process created with &lt;code&gt;&lt;a href=&quot;#open_port-2&quot;&gt;open_port({spawn | spawn_executable, Command}, Options)&lt;/a&gt;&lt;/code&gt;. If the port is not the result of spawning an OS process, the value is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OsPid&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#open_port-2&quot;&gt;open_port({spawn | spawn_executable, Command}, Options)&lt;/a&gt;&lt;/code&gt; 생성 된 OS 프로세스의 프로세스 식별자 (또는 이에 상응하는 것)입니다 . 포트가 OS 프로세스를 생성 한 결과가 아닌 경우 값은 &lt;code&gt;undefined&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7dd0f5d27cd66e170a4b1e83594cb698b980f2aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OsSystemTime&lt;/code&gt; equals current OS system time in &lt;code&gt;native&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OsSystemTime&lt;/code&gt; 는 현재 OS의 시스템 시간과 동일 &lt;code&gt;native&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbe902f7871d52da72531321eed3cf0a6eb50040" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Out&lt;/code&gt; is ignored if the &lt;code&gt;et&lt;/code&gt; format handler is used.</source>
          <target state="translated">&lt;code&gt;Out&lt;/code&gt; &lt;code&gt;et&lt;/code&gt; 형식 핸들러를 사용 하면 Out 이 무시 됩니다.</target>
        </trans-unit>
        <trans-unit id="a1336c266605c59ca65ac2c09a7aa6d995fc3077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OutEncoding&lt;/code&gt; defines in what format output is to be generated.</source>
          <target state="translated">&lt;code&gt;OutEncoding&lt;/code&gt; 은 어떤 형식으로 출력을 생성할지 정의합니다.</target>
        </trans-unit>
        <trans-unit id="7f3bc913aa19032a915735a998e442e8c0e9106e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OwnAuthKeyC&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;OwnAuthKeyC&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="0af7d6d5206fa4ba170f21aa28856e5f99d3c60b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OwnPrivKeyC&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;OwnPrivKeyC&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="ce93c1c12d6b6d2cf3c8e9e13e682a5eb181475c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;P&lt;/code&gt; - A byte offset into a tuple.</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; - 튜플에 대한 바이트 오프셋.</target>
        </trans-unit>
        <trans-unit id="9d6d20757f9b2b090c8dbb985edbd64142f25ed5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;P&lt;/code&gt; is the &lt;code&gt;precision&lt;/code&gt; of the printed argument. A default value is used if no precision is specified. The interpretation of precision depends on the control sequences. Unless otherwise specified, argument &lt;code&gt;within&lt;/code&gt; is used to determine print width.</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; 는 인쇄 인수 의 &lt;code&gt;precision&lt;/code&gt; 입니다. 정밀도가 지정되지 않은 경우 기본값이 사용됩니다. 정밀도 해석은 제어 순서에 따라 다릅니다. 달리 지정하지 않는 한, &lt;code&gt;within&lt;/code&gt; 인수 는 인쇄 너비를 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8efd3d4f5ea3949dfe599236c352331ac186fddc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDict&lt;/code&gt; is the current value of the process dictionary of &lt;code&gt;gen_event&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PDict&lt;/code&gt; 는 프로세스 사전의 현재 값 &lt;code&gt;gen_event&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4743eb86880de837e3b7721a0c73d09e619df1d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDict&lt;/code&gt; is the current value of the process dictionary of the &lt;code&gt;gen_server&lt;/code&gt; process..</source>
          <target state="translated">&lt;code&gt;PDict&lt;/code&gt; 는 &lt;code&gt;gen_server&lt;/code&gt; 프로세스 의 프로세스 사전의 현재 값입니다 .</target>
        </trans-unit>
        <trans-unit id="d6456643cc36471ca8f6385bda79663870a746c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PDict&lt;/code&gt; is the current value of the process dictionary of the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PDict&lt;/code&gt; 는 의 사전 처리의 현재 값 &lt;code&gt;gen_statem&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb001daf095f814d3d2906ab3d61090d7e4183d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pad&lt;/code&gt; is the padding character. This is the character used to pad the printed representation of the argument so that it conforms to the specified field width and precision. Only one padding character can be specified and, whenever applicable, it is used for both the field width and precision. The default padding character is &lt;code&gt;' '&lt;/code&gt; (space).</source>
          <target state="translated">&lt;code&gt;Pad&lt;/code&gt; 는 패딩 문자입니다. 지정된 필드 너비와 정밀도에 맞게 인수의 인쇄 표현을 ​​채우는 데 사용되는 문자입니다. 패딩 문자는 하나만 지정할 수 있으며 적용 가능한 경우 필드 너비와 정밀도 모두에 사용됩니다. 기본 패딩 문자는 &lt;code&gt;' '&lt;/code&gt; (공백)입니다.</target>
        </trans-unit>
        <trans-unit id="c6f33814ce0487b47b6f45aea3db01e41094a5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Padding&lt;/code&gt; states the number of empty character positions to the left of the comment separating it horizontally from source code on the same line (if any). If &lt;code&gt;Padding&lt;/code&gt; is &lt;code&gt;none&lt;/code&gt;, a default positive number is used. If &lt;code&gt;Padding&lt;/code&gt; is an integer less than 1, there should be no separating space. Comments are in themselves regarded as source program forms.</source>
          <target state="translated">&lt;code&gt;Padding&lt;/code&gt; 은 주석 왼쪽의 빈 문자 위치 수를 동일한 행의 소스 코드에서 수평으로 분리합니다 (있는 경우). 경우 &lt;code&gt;Padding&lt;/code&gt; 없는 &lt;code&gt;none&lt;/code&gt; , 기본 양수가 사용됩니다. &lt;code&gt;Padding&lt;/code&gt; 이 1보다 작은 정수인 경우 분리 공간이 없어야합니다. 주석 자체는 소스 프로그램 형식으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="8fcf992ee6cd46bdb833fa310ed5b8915e59ce81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PaperWidth&lt;/code&gt; specifies the total width (in character positions) of the field for which the text is to be laid out. &lt;code&gt;LineWidth&lt;/code&gt; specifies the desired maximum width (in number of characters) of the text printed on any single line, disregarding leading and trailing white space. These parameters need to be properly balanced in order to produce good layouts. By default, &lt;code&gt;PaperWidth&lt;/code&gt; is 80 and &lt;code&gt;LineWidth&lt;/code&gt; is 65.</source>
          <target state="translated">&lt;code&gt;PaperWidth&lt;/code&gt; 는 텍스트를 배치 할 필드의 총 너비 (문자 위치)를 지정합니다. &lt;code&gt;LineWidth&lt;/code&gt; 는 선행 및 후행 공백을 무시하고 한 줄에 인쇄 할 텍스트의 원하는 최대 너비 (문자 수)를 지정합니다. 좋은 레이아웃을 생성하려면 이러한 매개 변수의 균형을 적절히 조정해야합니다. 기본적으로 &lt;code&gt;PaperWidth&lt;/code&gt; 는 80이고 &lt;code&gt;LineWidth&lt;/code&gt; 는 65입니다.</target>
        </trans-unit>
        <trans-unit id="61816f1bbc3605d4c7ed850afbc995219957a6cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Par&lt;/code&gt; is to be an atom. &lt;code&gt;Val&lt;/code&gt; is any term. The application can retrieve the value of a configuration parameter by calling &lt;code&gt;application:get_env(App, Par)&lt;/code&gt; or a number of similar functions, see the &lt;code&gt;application(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="translated">&lt;code&gt;Par&lt;/code&gt; 원자가되어야한다. &lt;code&gt;Val&lt;/code&gt; 은 임의의 용어입니다. 응용 프로그램은 &lt;code&gt;application:get_env(App, Par)&lt;/code&gt; 또는 이와 유사한 여러 함수 를 호출하여 구성 매개 변수의 값을 검색 할 수 있습니다 . 커널 의 &lt;code&gt;application(3)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5cd492f8be5da8eccc8204e5af387f683dc3b5a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Parallel&lt;/code&gt; equals &lt;code&gt;yes&lt;/code&gt; if &lt;code&gt;Function&lt;/code&gt; is called in parallel from multiple threads. If it is not called in parallel, because calls must be serialized, &lt;code&gt;Parallel&lt;/code&gt; equals &lt;code&gt;no&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Parallel&lt;/code&gt; &lt;code&gt;Function&lt;/code&gt; 가 여러 스레드에서 병렬로 호출 되면 병렬 은 &lt;code&gt;yes&lt;/code&gt; 입니다. 호출이 직렬화되어야하므로 병렬로 호출 &lt;code&gt;no&lt;/code&gt; &lt;code&gt;Parallel&lt;/code&gt; 은 no 입니다.</target>
        </trans-unit>
        <trans-unit id="298b1a5ee5c5ff542be1d5b8cc774a76e6d51c2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Parallel&lt;/code&gt; equals &lt;code&gt;yes&lt;/code&gt; if &lt;code&gt;Function&lt;/code&gt; is called in parallel from multiple threads. If it is not called in parallel, because calls needs to be serialized, &lt;code&gt;Parallel&lt;/code&gt; equals &lt;code&gt;no&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Parallel&lt;/code&gt; &lt;code&gt;Function&lt;/code&gt; 가 여러 스레드에서 병렬로 호출 되면 병렬 은 &lt;code&gt;yes&lt;/code&gt; 입니다. 호출이 직렬화되어야하므로 병렬로 호출 &lt;code&gt;no&lt;/code&gt; &lt;code&gt;Parallel&lt;/code&gt; 은 no 입니다.</target>
        </trans-unit>
        <trans-unit id="a964c055893b2e2147f8a5aa80f76978a24c196b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParamsName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;ParamsName&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="e82853798869e6b8e08f635af4f23562b8963793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParamsName&lt;/code&gt; is a unique non-empty string.</source>
          <target state="translated">&lt;code&gt;ParamsName&lt;/code&gt; 은 비어 있지 않은 고유 한 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="6fb071f2d51c9e9adbb1e19332e74734ff14e5ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Parent&lt;/code&gt; is the pid of the parent.</source>
          <target state="translated">&lt;code&gt;Parent&lt;/code&gt; 는 부모 의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="0111f8c743625fd26e700b61a8a2f8b510fdd95a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Parserfile&lt;/code&gt; is the name of the file that will contain the Erlang parser code that is generated. The default (&lt;code&gt;&quot;&quot;&lt;/code&gt;) is to add the extension &lt;code&gt;.erl&lt;/code&gt; to &lt;code&gt;Grammarfile&lt;/code&gt; stripped of the &lt;code&gt;.yrl&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;Parserfile&lt;/code&gt; 가 생성되는 얼랑 파서 코드가 포함 된 파일의 이름입니다. 기본값은 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ) 확장 추가하는 것입니다 &lt;code&gt;.erl&lt;/code&gt; 을 에 &lt;code&gt;Grammarfile&lt;/code&gt; 이 의 제거 &lt;code&gt;.yrl&lt;/code&gt; 확장.</target>
        </trans-unit>
        <trans-unit id="4444b88ab129d099ddb1b9e4d902a31bfe485144" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Path&lt;/code&gt; exists but is not a directory.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 가 존재하지만 디렉토리가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="31c19c60301c0e99882f06518267d3d1fc79dc70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Path&lt;/code&gt; is interpreted literally, so that all loaders of the same driver must specify the same &lt;strong&gt;literal&lt;/strong&gt;&lt;code&gt;Path&lt;/code&gt; string, although different paths can point out the same directory in the file system (because of use of relative paths and links).</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 는 문자 그대로 해석되므로 동일한 &lt;code&gt;Path&lt;/code&gt; 의 모든 로더가 동일한 &lt;strong&gt;리터럴 &lt;/strong&gt;경로 문자열을 지정해야 하지만, 다른 경로는 파일 시스템에서 동일한 경로를 지정할 수 있습니다 (상대 경로 및 링크 사용으로 인해).</target>
        </trans-unit>
        <trans-unit id="72096ad2831b143d815d9dad06722d834563819a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Path&lt;/code&gt;, if specified, is to conform to the syntax of execution paths on the OS. Returns the absolute filename of the executable program &lt;code&gt;Name&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt; if the program is not found.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 지정된 경우 Path 는 OS에서 실행 경로의 구문을 준수해야합니다. 실행 프로그램 &lt;code&gt;Name&lt;/code&gt; 의 절대 파일 이름을 반환 하거나 프로그램을 찾을 수 없으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0102a455a1d0d8a404d2e7475eed7960cfeaf36c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PathData&lt;/code&gt; is the argument used for API function &lt;code&gt;&lt;a href=&quot;mod_alias#path-3&quot;&gt;mod_alias:path/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PathData&lt;/code&gt; 는 API 함수 &lt;code&gt;&lt;a href=&quot;mod_alias#path-3&quot;&gt;mod_alias:path/3&lt;/a&gt;&lt;/code&gt; 에 사용되는 인수 입니다.</target>
        </trans-unit>
        <trans-unit id="67e03b6ce9df207e631b5912bda070b27c630732" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pathname&lt;/code&gt; can be a directory, a group of files, or a file. The &lt;code&gt;Pathname&lt;/code&gt; string can contain wildcards.</source>
          <target state="translated">&lt;code&gt;Pathname&lt;/code&gt; 은 디렉토리, 파일 그룹 또는 파일 일 수 있습니다. &lt;code&gt;Pathname&lt;/code&gt; 문자열은 와일드 카드를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45732b3166f764b7ef155e460e83a1721dac5aaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pattern &amp;lt;- ListExpr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pattern &amp;lt;- ListExpr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ad177e253e29340a003b66af1bd0cea7563a824" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pattern&lt;/code&gt; can be a POSIX regular expression. The function returns when a pattern is successfully matched (at least one, in the case of multiple patterns).</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 은 POSIX 정규식 일 수 있습니다. 패턴이 성공적으로 일치하면 (여러 패턴의 경우 하나 이상) 함수가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="a30053a936ee88a48acb7971d5ab38f2f0d8e83a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pattern&lt;/code&gt; is an Erlang term, possibly containing unbound variables.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 은 언 바운드 변수를 포함 할 수있는 얼랭 용어입니다.</target>
        </trans-unit>
        <trans-unit id="57b85b1d1b0950a8f6855ca47e2dd4650b42f4b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pdu&lt;/code&gt; is an SNMP PDU record (as defined in snmp_types.hrl) with the SNMP response.</source>
          <target state="translated">&lt;code&gt;Pdu&lt;/code&gt; 는 SNMP 응답이있는 SNMP PDU 레코드 (snmp_types.hrl에 정의 됨)입니다.</target>
        </trans-unit>
        <trans-unit id="9daa12e42a6ee7d41d16dc65a19e83fff5272a78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pdu&lt;/code&gt; is an SNMP PDU record, as defined in &lt;code&gt;snmp_types.hrl&lt;/code&gt;, with the SNMP request.</source>
          <target state="translated">&lt;code&gt;Pdu&lt;/code&gt; 는 &lt;code&gt;snmp_types.hrl&lt;/code&gt; 에 정의 된 SNMP 요청과 함께 SNMP PDU 레코드 입니다.</target>
        </trans-unit>
        <trans-unit id="c9faf1791e479d87a46e2d29e0595178c7cbbda1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pdu&lt;/code&gt; is the SNMP Pdu received</source>
          <target state="translated">&lt;code&gt;Pdu&lt;/code&gt; 는 수신 된 SNMP Pdu입니다.</target>
        </trans-unit>
        <trans-unit id="b5bb6137c323411e0bc0dad71bbce6bef0ebb8d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PduMS&lt;/code&gt; is the Maximum Size of the response Pdu allowed. Normally this is returned from &lt;code&gt;snmpa_mpd:process_packet&lt;/code&gt; (see Reference Manual).</source>
          <target state="translated">&lt;code&gt;PduMS&lt;/code&gt; 는 허용되는 응답 Pdu의 최대 크기입니다. 일반적으로 이것은 &lt;code&gt;snmpa_mpd:process_packet&lt;/code&gt; 에서 반환됩니다 (참조 설명서 참조).</target>
        </trans-unit>
        <trans-unit id="2ffda993d32b39b54f89be982bae72e563e2b984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PeerName&lt;/code&gt; - a string with the name or address of the remote host.</source>
          <target state="translated">&lt;code&gt;PeerName&lt;/code&gt; - 원격 호스트의 이름 또는 주소가 포함 된 문자열.</target>
        </trans-unit>
        <trans-unit id="82c3412826a6b1e69920274b738497b5cd048b70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pid&lt;/code&gt; - Process identifier.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; - 프로세스 식별자</target>
        </trans-unit>
        <trans-unit id="8f39bc2c554c8155c9a6f65aec7b32bbcacdaa1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pid&lt;/code&gt; is a process identifier.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 는 프로세스 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="61bd6230a1646bc54881ccd3f79dac8ea26e9a79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pid&lt;/code&gt; is the Process that waits for the response for the request. The Pid was specified in the &lt;code&gt;send_pdu_req&lt;/code&gt; message &lt;code&gt;&lt;a href=&quot;#im_send_pdu_req&quot;&gt;(see below)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 는 요청에 대한 응답을 기다리는 프로세스입니다. Pid는 &lt;code&gt;send_pdu_req&lt;/code&gt; 메시지 에 지정되었습니다 &lt;code&gt;&lt;a href=&quot;#im_send_pdu_req&quot;&gt;(see below)&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ebf4adf0ef01de57bcfaa6c59b419e009731919" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pid&lt;/code&gt; is the pid of the process executing interpreted code.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 는 해석 된 코드를 실행하는 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="9a19f57d989b1fcddb01fa44f8fb35e4f2c9ba3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pid&lt;/code&gt; is the process identifier of the process connected to the port.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 는 포트에 연결된 프로세스의 프로세스 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="bc8378476ce2ed08e41ee8a6a8e93a0f3e2825c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pid&lt;/code&gt; is the process identifier of the process that originally created the fun.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 는 원래 재미를 만든 프로세스의 프로세스 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="b43b39dc2ed9b601b7ed1e11509bdba32932ba68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pid&lt;/code&gt; must refer to a process at the local node.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 는 로컬 노드의 프로세스를 참조해야합니다.</target>
        </trans-unit>
        <trans-unit id="25904c39e0432f85f327b952e13f27bc2ba1ab42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PidOrPids&lt;/code&gt; may contain the same process multiple times.</source>
          <target state="translated">&lt;code&gt;PidOrPids&lt;/code&gt; 는 동일한 프로세스를 여러 번 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e78c827327043a50151a8f7db6e351160d170bc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PidPortSpec&lt;/code&gt; is either a process identifier (pid) for a local process, a port identifier, or one of the following atoms:</source>
          <target state="translated">&lt;code&gt;PidPortSpec&lt;/code&gt; 은 로컬 프로세스의 프로세스 식별자 (pid), 포트 식별자 또는 다음 원자 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="5c8a59ccab15bb7dac43987f80ab1e821cea40ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PidSpec&lt;/code&gt; and &lt;code&gt;Tracer&lt;/code&gt; are used in calls to &lt;code&gt;erlang:trace(PidSpec, true, [{tracer, Tracer} | Flags])&lt;/code&gt;, and &lt;code&gt;Filename&lt;/code&gt; is used to call &lt;code&gt;dbg:trace_port(file, Filename)&lt;/code&gt;. Please see the appropriate documentation.</source>
          <target state="translated">&lt;code&gt;PidSpec&lt;/code&gt; 및 &lt;code&gt;Tracer&lt;/code&gt; 는 &lt;code&gt;erlang:trace(PidSpec, true, [{tracer, Tracer} | Flags])&lt;/code&gt; 호출에 사용 되며 &lt;code&gt;Filename&lt;/code&gt; 은 &lt;code&gt;dbg:trace_port(file, Filename)&lt;/code&gt; 호출에 사용됩니다 . 적절한 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1833f50d54e16d92b2e13bbbdd54635fe7dbdcad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pids&lt;/code&gt; is a list of the process identifiers of the processes that the port is linked to.</source>
          <target state="translated">&lt;code&gt;Pids&lt;/code&gt; 는 포트가 연결된 프로세스의 프로세스 식별자 목록입니다.</target>
        </trans-unit>
        <trans-unit id="9aeb7d1dfd344e218d0caa42d7cdbd29484d3526" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PidsAndPorts&lt;/code&gt; is a list of process identifiers and port identifiers, with processes or ports to which the process has a link.</source>
          <target state="translated">&lt;code&gt;PidsAndPorts&lt;/code&gt; 는 프로세스에 링크가있는 프로세스 또는 포트가있는 프로세스 식별자 및 포트 식별자 목록입니다.</target>
        </trans-unit>
        <trans-unit id="399b5004de645756cdb0e61b641737629345f488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Port&lt;/code&gt; is a port identifier, referring to a driver.</source>
          <target state="translated">&lt;code&gt;Port&lt;/code&gt; 는 드라이버를 나타내는 포트 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="4af552ca674af7083b5dc536b0563b1727aab30d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PortInfo&lt;/code&gt;&lt;code&gt;system&lt;/code&gt; is used to indicate that the 'system' should choose (the way port number '0' (zero) is normally used). Port info '0' (zero) cannot be used for this, since it is (internally) used to represent the 'default' port number.</source>
          <target state="translated">&lt;code&gt;PortInfo&lt;/code&gt; &lt;code&gt;system&lt;/code&gt; 은 '시스템'이 선택해야 함을 나타내는 데 사용됩니다 (일반적으로 포트 번호 '0'(영)이 사용되는 방식). 포트 정보 '0'(영)은 '기본'포트 번호를 나타내는 데 (내부적으로) 사용되므로이를 위해 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="aa4ec1fc2694d6b4c2de10ced8f98ddda50a1e6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PortName&lt;/code&gt; is usually a tuple &lt;code&gt;{spawn,Command}&lt;/code&gt;, where the string &lt;code&gt;Command&lt;/code&gt; is the name of the external program. The external program runs outside the Erlang workspace, unless a port driver with the name &lt;code&gt;Command&lt;/code&gt; is found. If &lt;code&gt;Command&lt;/code&gt; is found, that driver is started.</source>
          <target state="translated">&lt;code&gt;PortName&lt;/code&gt; 은 일반적으로 튜플 &lt;code&gt;{spawn,Command}&lt;/code&gt; 이며 여기서 문자열 &lt;code&gt;Command&lt;/code&gt; 는 외부 프로그램의 이름입니다. 이름이 &lt;code&gt;Command&lt;/code&gt; 인 포트 드라이버가 없으면 외부 프로그램은 Erlang 작업 공간 외부에서 실행 됩니다. 경우 &lt;code&gt;Command&lt;/code&gt; 발견, 해당 드라이버가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="2e6bf51b86435b4c42225dc1de28ab816d14674c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PortName&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;PortName&lt;/code&gt;s:</target>
        </trans-unit>
        <trans-unit id="463ce09ec6b9372ae59fbcb785e330502501c594" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PortSettings&lt;/code&gt; is a list of settings (options) for the port. The list typically contains at least a tuple &lt;code&gt;{packet,N}&lt;/code&gt;, which specifies that data sent between the port and the external program are preceded by an N-byte length indicator. Valid values for N are 1, 2, or 4. If binaries are to be used instead of lists of bytes, the option &lt;code&gt;binary&lt;/code&gt; must be included.</source>
          <target state="translated">&lt;code&gt;PortSettings&lt;/code&gt; 는 포트의 설정 (옵션) 목록입니다. 목록에는 일반적으로 최소한 튜플 &lt;code&gt;{packet,N}&lt;/code&gt; 이 포함되는데, 이는 포트와 외부 프로그램간에 전송되는 데이터 앞에 N 바이트 길이 표시기가 있음을 지정합니다. N의 유효한 값은 1, 2 또는 4입니다. 바이트 목록 대신 &lt;code&gt;binary&lt;/code&gt; 하려면 이진 옵션을 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="6477a306bcc2a0998a7ce1fad1f18ac9cf3df606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PortSettings&lt;/code&gt; is a list of settings for the port. The valid settings are as follows:</source>
          <target state="translated">&lt;code&gt;PortSettings&lt;/code&gt; 는 포트 설정 목록입니다. 유효한 설정은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7bfc9f26773a6f94ca833c55216be6d8bf5f1fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pos&lt;/code&gt; &amp;gt; object arity.</source>
          <target state="translated">&lt;code&gt;Pos&lt;/code&gt; &amp;gt; 오브젝트 arity.</target>
        </trans-unit>
        <trans-unit id="004861644f1aab6e308d1d91976c82622faee3a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pos&lt;/code&gt; &amp;lt; 1.</source>
          <target state="translated">&lt;code&gt;Pos&lt;/code&gt; &amp;lt;1</target>
        </trans-unit>
        <trans-unit id="bdbeca84c85597762edabef4ed5b854f332bc4bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Pred&lt;/code&gt; determines which transports to remove. An arity-3-valued &lt;code&gt;Pred&lt;/code&gt; removes all transports for which &lt;code&gt;Pred(Ref, Type, Opts)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, where &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;Opts&lt;/code&gt; are as passed to &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Ref&lt;/code&gt; is as returned by it. The remaining forms are equivalent to an arity-3 fun as follows.</source>
          <target state="translated">&lt;code&gt;Pred&lt;/code&gt; 는 제거 할 전송을 결정합니다. arity-3-valued &lt;code&gt;Pred&lt;/code&gt; 는 &lt;code&gt;Pred(Ref, Type, Opts)&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 를 리턴 하는 모든 전송을 제거 합니다 . 여기서 &lt;code&gt;Type&lt;/code&gt; 및 &lt;code&gt;Opts&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; 에 전달 되고 &lt;code&gt;Ref&lt;/code&gt; 는 해당 전송에 의해 리턴됩니다. 나머지 형태는 다음과 같이 arity-3 fun과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c6893380113cae97b705c1a241b18df478bffbb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prefix&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;Prefix&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="7a816e4a91bac5880615611c5a727da7982a43d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prefix&lt;/code&gt; should either be an indention string (e.g. a list of spaces) or a positive integer (which will be used to create the indention string of that length).</source>
          <target state="translated">&lt;code&gt;Prefix&lt;/code&gt; 는 들여 쓰기 문자열 (예 : 공백 목록)이거나 양의 정수 (해당 길이의 들여 쓰기 문자열을 만드는 데 사용됨) 여야합니다.</target>
        </trans-unit>
        <trans-unit id="a480d89de32304ada89435e2816f659a00de5d81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prev&lt;/code&gt; - Scrolls &lt;code&gt;all&lt;/code&gt; viewers one page backwards.</source>
          <target state="translated">&lt;code&gt;Prev&lt;/code&gt; - &lt;code&gt;all&lt;/code&gt; 뷰어를 한 페이지 뒤로 스크롤 합니다 .</target>
        </trans-unit>
        <trans-unit id="97a0c53dfb5dba941754773c6e1c3d7fa015d458" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prev&lt;/code&gt; - Scrolls &lt;code&gt;this&lt;/code&gt; viewer one page backwards.</source>
          <target state="translated">&lt;code&gt;Prev&lt;/code&gt; - &lt;code&gt;this&lt;/code&gt; 뷰어를 한 페이지 뒤로 스크롤 합니다.</target>
        </trans-unit>
        <trans-unit id="5b50414b0613343d372e7b33cd39ad0516e44077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Print all pages&lt;/code&gt; - Prints all events. The page size is dependent of the selected paper type.</source>
          <target state="translated">&lt;code&gt;Print all pages&lt;/code&gt; 인쇄-모든 이벤트를 인쇄합니다. 페이지 크기는 선택한 용지 종류에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="0ff755d38d1ee44428dde82f8531f88bafebf90d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Print current page&lt;/code&gt; - Prints the events on the current page. The page size is dependent of the selected paper type.</source>
          <target state="translated">&lt;code&gt;Print current page&lt;/code&gt; 인쇄- 현재 페이지 의 이벤트를 인쇄합니다. 페이지 크기는 선택한 용지 종류에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="32eb1a8dd112afc3c6a211ec306e9f661586c04d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Print setup&lt;/code&gt; - Enables editing of printer setting, such as paper and layout.</source>
          <target state="translated">&lt;code&gt;Print setup&lt;/code&gt; -용지 및 레이아웃과 같은 프린터 설정을 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf54c74259cdf2a077f36b9c1a3587deb9f53c44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Priority&lt;/code&gt; is the relative priority of this hook. Hooks with a lower priority are executed first. If no priority is specified, it is set to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Priority&lt;/code&gt; 순위는이 후크의 상대적 우선 순위입니다. 우선 순위가 낮은 후크가 먼저 실행됩니다. 우선 순위를 지정하지 않으면 &lt;code&gt;0&lt;/code&gt; 으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="7e113901e10a147bff39ab1828d264df94ffbc99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PrivKey&lt;/code&gt; is a list (of integer). This is the User's secret localized encryption key. It is not visible in the MIB. The length of this key needs to be 16 if &lt;code&gt;usmDESPrivProtocol&lt;/code&gt; or &lt;code&gt;usmAesCfb128Protocol&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;PrivKey&lt;/code&gt; 는 정수 목록입니다. 이것은 사용자의 비밀 현지화 된 암호화 키입니다. MIB에서는 보이지 않습니다. &lt;code&gt;usmDESPrivProtocol&lt;/code&gt; 또는 &lt;code&gt;usmAesCfb128Protocol&lt;/code&gt; 을 사용 하는 경우이 키의 길이는 16 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="8e896ad8363d1b7e38462d7a7c50f79d5b0bfe9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PrivKeyC&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;PrivKeyC&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="a4935215988c303da7c8e0c9d33ba8df8f210702" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PrivP&lt;/code&gt; is a &lt;code&gt;usmNoPrivProtocol&lt;/code&gt;, &lt;code&gt;usmDESPrivProtocol&lt;/code&gt; or &lt;code&gt;usmAesCfb128Protocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PrivP&lt;/code&gt; 는 &lt;code&gt;usmNoPrivProtocol&lt;/code&gt; , &lt;code&gt;usmDESPrivProtocol&lt;/code&gt; 또는 &lt;code&gt;usmAesCfb128Protocol&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="83db5bbd69f30ee1fca7e3551bce3d3407c70039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PrivateKey = #'RSAPrivateKey{}'&lt;/code&gt; and the plaintext &lt;code&gt;Msg = binary()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PrivateKey = #'RSAPrivateKey{}'&lt;/code&gt; 및 일반 텍스트 &lt;code&gt;Msg = binary()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="17758d4bb8717fb48ab98495537a53044a17ddce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PrivateKey = #'RSAPrivateKey{}'&lt;/code&gt; or &lt;code&gt;#'DSAPrivateKey'{}&lt;/code&gt; and the plaintext &lt;code&gt;Msg = binary()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PrivateKey = #'RSAPrivateKey{}'&lt;/code&gt; 또는 &lt;code&gt;#'DSAPrivateKey'{}&lt;/code&gt; 및 일반 텍스트 &lt;code&gt;Msg = binary()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="044261ee53d7434a5ddb63ab9f1dfc7c5e54cb48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ProjNames&lt;/code&gt; is a list of the names of the projects where the employee works.</source>
          <target state="translated">&lt;code&gt;ProjNames&lt;/code&gt; 는 직원이 근무하는 프로젝트의 이름 목록입니다.</target>
        </trans-unit>
        <trans-unit id="4e426f49bdad9a40bd4efd3ef29a2951db105407" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prompt&lt;/code&gt; is a list of characters (not mixed, no binaries) or an atom to be output as a prompt for input on the I/O device. &lt;code&gt;Prompt&lt;/code&gt; is often ignored by the I/O server; if set to &lt;code&gt;''&lt;/code&gt;, it is always to be ignored (and results in nothing being written to the I/O device).</source>
          <target state="translated">&lt;code&gt;Prompt&lt;/code&gt; 는 문자 (혼합되지 않고 이진이 없음) 또는 I / O 장치에 입력하라는 프롬프트로 출력 될 원자 목록입니다. &lt;code&gt;Prompt&lt;/code&gt; 는 종종 I / O 서버에서 무시됩니다. &lt;code&gt;''&lt;/code&gt; 로 설정된 경우 항상 무시해야하며 I / O 장치에 아무것도 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9695bb21452aaf2b0f3e5c2663f0c6b757426b91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Public&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;Public&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c8b502fa111343a5a7f54904d46c437b467cb76e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PublicKey = #'RSAPublicKey'{}&lt;/code&gt; or &lt;code&gt;{integer(), #'DssParams'{}}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PublicKey = #'RSAPublicKey'{}&lt;/code&gt; 또는 &lt;code&gt;{integer(), #'DssParams'{}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="29e85c40eb0a5ed78ec838a45f1adaa5c33c8a83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Q&lt;/code&gt; - A byte offset into the stack. Used for updating the frame pointer register. Can be packed with other operands.</source>
          <target state="translated">&lt;code&gt;Q&lt;/code&gt; - 스택으로의 바이트 오프셋. 프레임 포인터 레지스터 업데이트에 사용됩니다. 다른 피연산자와 함께 패킹 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d8bd4d0332c5b7caa1a64e0edeb5656bbc89de9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RANLIB&lt;/code&gt; - &lt;code&gt;ranlib&lt;/code&gt; archive index tool.</source>
          <target state="translated">&lt;code&gt;RANLIB&lt;/code&gt; - &lt;code&gt;ranlib&lt;/code&gt; 아카이브 색인 도구.</target>
        </trans-unit>
        <trans-unit id="d3efd0325d67c2942530bdf24afd75380a7a360b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RE&lt;/code&gt; is equal to &lt;code&gt;(Rel) E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RE&lt;/code&gt; 는 &lt;code&gt;(Rel) E&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d15f24d40e5bc38c43d5a302e667d9f851099361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REG_BINARY&lt;/code&gt; for binaries</source>
          <target state="translated">&lt;code&gt;REG_BINARY&lt;/code&gt; 이진에 대한 REG_BINARY</target>
        </trans-unit>
        <trans-unit id="666624bb3a8819d0baba84064971eaaa0ecbfe74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REG_BINARY&lt;/code&gt;, which is a binary</source>
          <target state="translated">&lt;code&gt;REG_BINARY&lt;/code&gt; 이진 인 REG_BINARY</target>
        </trans-unit>
        <trans-unit id="3ad1d7ff1ba8a55676548f543d585dd213fa0fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REG_DWORD&lt;/code&gt; for integers</source>
          <target state="translated">&lt;code&gt;REG_DWORD&lt;/code&gt; 정수에 대한 REG_DWORD</target>
        </trans-unit>
        <trans-unit id="1f53487dfa18da60b5278ee07b6b3a27f605ae45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REG_DWORD&lt;/code&gt;, which is an integer</source>
          <target state="translated">&lt;code&gt;REG_DWORD&lt;/code&gt; 정수인 REG_DWORD</target>
        </trans-unit>
        <trans-unit id="8e541dee6df33e7b478b15edd35bf81140e1d2af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REG_SZ&lt;/code&gt; for strings</source>
          <target state="translated">&lt;code&gt;REG_SZ&lt;/code&gt; 문자열에 대한 REG_SZ</target>
        </trans-unit>
        <trans-unit id="6a3a14748f737a313a9808a9d5fb1247c8867284" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REG_SZ&lt;/code&gt;, which is a string</source>
          <target state="translated">&lt;code&gt;REG_SZ&lt;/code&gt; 문자열 인 REG_SZ</target>
        </trans-unit>
        <trans-unit id="48c9159aabc82d3bbdec41eb9e76202eda315d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RELEASE_ROOT&lt;/code&gt; if you have installed using &lt;code&gt;make release RELEASE_ROOT=&amp;lt;ReleaseDir&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RELEASE_ROOT&lt;/code&gt; 사용 설치 한 경우 &lt;code&gt;make release RELEASE_ROOT=&amp;lt;ReleaseDir&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a76fbd6c72d57e5490f478fc588db4b552777138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RawOptReq&lt;/code&gt; consists of tag &lt;code&gt;raw&lt;/code&gt; followed by the protocol level, the option number, and either a binary or the size, in bytes, of the buffer in which the option value is to be stored. A binary is to be used when the underlying &lt;code&gt;getsockopt&lt;/code&gt; requires &lt;strong&gt;input&lt;/strong&gt; in the argument field. In this case, the binary size is to correspond to the required buffer size of the return value. The supplied values in a &lt;code&gt;RawOptReq&lt;/code&gt; correspond to the second, third, and fourth/fifth parameters to the &lt;code&gt;getsockopt&lt;/code&gt; call in the C socket API. The value stored in the buffer is returned as a binary &lt;code&gt;ValueBin&lt;/code&gt;, where all values are coded in the native endianess.</source>
          <target state="translated">&lt;code&gt;RawOptReq&lt;/code&gt; 는 태그 &lt;code&gt;raw&lt;/code&gt; 다음에 프로토콜 레벨, 옵션 번호 및 옵션 값이 저장 될 버퍼의 2 진 또는 크기 (바이트)로 구성됩니다. 기본 &lt;code&gt;getsockopt&lt;/code&gt; 에 인수 필드에 &lt;strong&gt;입력&lt;/strong&gt; 이 필요한 경우 2 진이 사용됩니다 . 이 경우 이진 크기는 반환 값의 필요한 버퍼 크기에 해당합니다. &lt;code&gt;RawOptReq&lt;/code&gt; 에 제공된 값 은 C 소켓 API 의 &lt;code&gt;getsockopt&lt;/code&gt; 호출에 대한 두 번째, 세 번째 및 네 번째 / 다섯 번째 매개 변수에 해당 합니다. 버퍼에 저장된 값은 이진 &lt;code&gt;ValueBin&lt;/code&gt; 으로 반환되며 , 여기서 모든 값은 기본 엔디안으로 코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="1918be1fe7adfadd40c87ab0cd396f8d1f6cdfc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Re = string()&lt;/code&gt; and &lt;code&gt;Replacement = string()&lt;/code&gt;. &lt;code&gt;re_write&lt;/code&gt; allows documents to be stored in the local file system instead of the &lt;code&gt;document_root&lt;/code&gt; location. URLs are rewritten by &lt;code&gt;re:replace/3&lt;/code&gt; to produce a path in the local file-system, for example:</source>
          <target state="translated">&lt;code&gt;Re = string()&lt;/code&gt; 및 &lt;code&gt;Replacement = string()&lt;/code&gt; 입니다. &lt;code&gt;re_write&lt;/code&gt; 를 사용하면 문서를 &lt;code&gt;document_root&lt;/code&gt; 위치 대신 로컬 파일 시스템에 저장할 수 있습니다. URL은 &lt;code&gt;re:replace/3&lt;/code&gt; 로 다시 작성되어 로컬 파일 시스템에 경로를 생성합니다 (예 :</target>
        </trans-unit>
        <trans-unit id="a0991a107df19e2b267dff6b522c733c063992eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Re = string()&lt;/code&gt; and &lt;code&gt;Replacement = string()&lt;/code&gt;. Have the same behavior as property &lt;code&gt;re_write&lt;/code&gt;, except that they also mark the target directory as containing CGI scripts. URLs with a path beginning with url-path are mapped to scripts beginning with directory-filename, for example:</source>
          <target state="translated">&lt;code&gt;Re = string()&lt;/code&gt; 및 &lt;code&gt;Replacement = string()&lt;/code&gt; 입니다. 대상 디렉토리도 CGI 스크립트를 포함하는 것으로 표시한다는 점을 제외하고 &lt;code&gt;re_write&lt;/code&gt; 특성과 동일한 동작을 수행 하십시오. url-path로 시작하는 경로가있는 URL은 다음과 같이 directory-filename으로 시작하는 스크립트에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="bd305e691b262c93c97b49bfccfb00dd4a8af24f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReadView&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;ReadView&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c310f443162362bab26c9b639932e5966e00430f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason = {failed,FailReason} | {require_failed_in_suite0,RequireInfo}&lt;/code&gt;, reason for auto-skipping &lt;code&gt;Func&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reason = {failed,FailReason} | {require_failed_in_suite0,RequireInfo}&lt;/code&gt; , 자동 건너 뛰는 이유 &lt;code&gt;Func&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="6e3e9d3eb9360e8553c297f5bae665eee6f6f8d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; can be any term.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 는 임의의 용어가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fe3ac1e6a046556c2a4a1a8b087bb0e4d6339f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; can, depending on which distribution module or process that is used be any term, but for the standard TCP distribution module it is any of the following:</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 되는 분배 모듈 또는 프로세스에 따라 이유가 될 수 있지만 표준 TCP 분배 모듈의 경우 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="8fb32355efcc62c8079594accbe4d545ff65bde5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; depends on the type of error that occurred, and &lt;code&gt;Stack&lt;/code&gt; is the stack of recent function calls, see &lt;code&gt;&lt;a href=&quot;errors#exit_reasons&quot;&gt;Exit Reasons&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 는 발생한 오류 유형에 따라 다르며 &lt;code&gt;Stack&lt;/code&gt; 은 최근 함수 호출의 스택입니다 . &lt;code&gt;&lt;a href=&quot;errors#exit_reasons&quot;&gt;Exit Reasons&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="369fb2cdc2d66f6734bae926f5e37b75a7dc7f7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; depends on why the &lt;code&gt;gen_server&lt;/code&gt; process is terminating. If it is because another callback function has returned a stop tuple &lt;code&gt;{stop,..}&lt;/code&gt;, &lt;code&gt;Reason&lt;/code&gt; has the value specified in that tuple. If it is because of a failure, &lt;code&gt;Reason&lt;/code&gt; is the error reason.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 는 &lt;code&gt;gen_server&lt;/code&gt; 프로세스가 종료 되는 이유에 따라 다릅니다 . 다른 콜백 함수 정지 튜플 돌아온 때문에이면 &lt;code&gt;{stop,..}&lt;/code&gt; , &lt;code&gt;Reason&lt;/code&gt; 그 튜플에 지정된 값을 갖는다. 실패로 인한 경우 &lt;code&gt;Reason&lt;/code&gt; 는 오류 이유입니다.</target>
        </trans-unit>
        <trans-unit id="9b28b3d09cc2881c7f2b112a603df4663f17d25f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; depends on why the &lt;code&gt;gen_statem&lt;/code&gt; is terminating. If it is because another callback function has returned, a stop tuple &lt;code&gt;{stop,Reason}&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Reason&lt;/code&gt; has the value specified in that tuple. If it is because of a failure, &lt;code&gt;Reason&lt;/code&gt; is the error reason.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 는 &lt;code&gt;gen_statem&lt;/code&gt; 이 종료 되는 이유에 따라 다릅니다 . 또 다른 콜백 함수가 돌아왔다 때문입니다 경우, 정지 튜플 &lt;code&gt;{stop,Reason}&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;Reason&lt;/code&gt; 그 튜플에 지정된 값을가집니다. 실패로 인한 경우 &lt;code&gt;Reason&lt;/code&gt; 는 오류 이유입니다.</target>
        </trans-unit>
        <trans-unit id="855f332896eba71f0543f888292a47067a954798" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; indicates the type of error encountered.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 는 발생한 오류 유형을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="10fff19fac85a90f5b8aa82f0201e12a6685a241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; is &lt;code&gt;shutdown&lt;/code&gt; if the supervisor bridge is terminated by its supervisor. If the supervisor bridge terminates because a a linked process (apart from the main process of the subsystem) has terminated with reason &lt;code&gt;Term&lt;/code&gt;, then &lt;code&gt;Reason&lt;/code&gt; becomes &lt;code&gt;Term&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 수퍼바이저 브리지가 수퍼바이저에 의해 &lt;code&gt;shutdown&lt;/code&gt; 되면 이유 가 종료 된 것 입니다. 감독자 브리지 종료가 (떨어져 서브 시스템의 주요 과정에서) AA 연결 과정 때문에 이유 종료 한 경우 &lt;code&gt;Term&lt;/code&gt; , 다음 &lt;code&gt;Reason&lt;/code&gt; 가된다 &lt;code&gt;Term&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b8232eff6298ad5309948bf63395e5935c73b36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; is a term denoting the stop reason and &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;State&lt;/a&gt;&lt;/code&gt; is the internal state of the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 은 중지 이유를 나타내는 용어이고 &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;State&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;gen_statem&lt;/code&gt; 의 내부 상태입니다 .</target>
        </trans-unit>
        <trans-unit id="44fa5003c6b4335ca7d85ec9f1507d1f9201dd99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; is a term denoting the stop reason and &lt;code&gt;State&lt;/code&gt; is the internal state of the &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 는 중지 이유를 나타내는 용어이고 &lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;gen_server&lt;/code&gt; 프로세스 의 내부 상태입니다 .</target>
        </trans-unit>
        <trans-unit id="5a00cfeb25bcc4bd88c1774944b82112b03bf53d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; is any term. &lt;code&gt;Stacktrace&lt;/code&gt; is a list as returned from &lt;code&gt;get_stacktrace()&lt;/code&gt;, that is, a list of four-tuples &lt;code&gt;{Module, Function, Arity | Args, Location}&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt; are atoms, and the third element is an integer arity or an argument list. The stacktrace can also contain &lt;code&gt;{Fun, Args, Location}&lt;/code&gt; tuples, where &lt;code&gt;Fun&lt;/code&gt; is a local fun and &lt;code&gt;Args&lt;/code&gt; is an argument list.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 는 모든 용어입니다. &lt;code&gt;Stacktrace&lt;/code&gt; 에서 반환 목록입니다 &lt;code&gt;get_stacktrace()&lt;/code&gt; , 즉, 네 튜플의리스트 &lt;code&gt;{Module, Function, Arity | Args, Location}&lt;/code&gt; 에서 &lt;code&gt;Module&lt;/code&gt; 및 &lt;code&gt;Function&lt;/code&gt; 는 원자이고 세 번째 요소는 정수 arity 또는 인수 목록입니다. stacktrace에는 &lt;code&gt;{Fun, Args, Location}&lt;/code&gt; 튜플 도 포함될 수 있습니다 . 여기서 &lt;code&gt;Fun&lt;/code&gt; 은 로컬 재미이고 &lt;code&gt;Args&lt;/code&gt; 는 인수 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ca0421edd1dae5de1083aedd3a10ffe643f49681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt; is as per the &lt;code&gt;Reason&lt;/code&gt; field when extended errors are not enabled.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 당과 같습니다 &lt;code&gt;Reason&lt;/code&gt; 확장 오류가 활성화되지 않은 경우 필드.</target>
        </trans-unit>
        <trans-unit id="af2e4ce807f1575988b8c17a774a87a0ac8e8c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reason&lt;/code&gt;, the reason for aborting the test case, is printed in the test case log.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; , 테스트 케이스를 중지하는 이유는 테스트 케이스 로그에 인쇄된다.</target>
        </trans-unit>
        <trans-unit id="ceadc1608e7b1f2607b7f7df279fdb7264745f3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReasonInfo&lt;/code&gt; is a term().</source>
          <target state="translated">&lt;code&gt;ReasonInfo&lt;/code&gt; 는 term ()입니다.</target>
        </trans-unit>
        <trans-unit id="7d9b9345f1d99011c2fee077198764a22cc1988a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Record&lt;/code&gt; is the record involved in the operation.</source>
          <target state="translated">&lt;code&gt;Record&lt;/code&gt; 는 작업과 관련된 레코드입니다.</target>
        </trans-unit>
        <trans-unit id="37ecbe52d43c1c87b0821a3e9e92b463956db5bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RecordTag&lt;/code&gt; must be an atom.</source>
          <target state="translated">&lt;code&gt;RecordTag&lt;/code&gt; 는 원자 여야합니다.</target>
        </trans-unit>
        <trans-unit id="c6a73b3515e317f63a43ef55eb3c213b39c5af35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Records&lt;/code&gt; is a list of pairs representing the names and corresponding field declarations of all record declaration attributes occurring in &lt;code&gt;Forms&lt;/code&gt;. For fields declared without a default value, the corresponding value for &lt;code&gt;Default&lt;/code&gt; is the atom &lt;code&gt;none&lt;/code&gt;. Similarly, for fields declared without a type, the corresponding value for &lt;code&gt;Type&lt;/code&gt; is the atom &lt;code&gt;none&lt;/code&gt; (cf. &lt;code&gt;analyze_record_attribute/1&lt;/code&gt;). We do not guarantee that each record name occurs at most once in the list. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Records&lt;/code&gt; 는 &lt;code&gt;Forms&lt;/code&gt; 에서 발생하는 모든 레코드 선언 속성의 이름과 해당 필드 선언을 나타내는 쌍의 목록입니다 . 기본값없이 선언 된 필드의 경우 해당 &lt;code&gt;Default&lt;/code&gt; 은 atom &lt;code&gt;none&lt;/code&gt; 입니다. 마찬가지로, 유형없이 선언 된 필드의 경우, &lt;code&gt;Type&lt;/code&gt; 에 해당하는 값 은 atom &lt;code&gt;none&lt;/code&gt; 입니다 (참조 : &lt;code&gt;analyze_record_attribute/1&lt;/code&gt; ). 각 레코드 이름이 목록에서 최대 한 번만 발생한다고 보장하지는 않습니다. 리스팅 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="857d46c364b4afa4ff2b4b7324c9125b5607f5ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ref&lt;/code&gt; is either the atom &lt;code&gt;ignore&lt;/code&gt; or something that can be used to identify the inform-request (e.g. request-id). &lt;code&gt;ignore&lt;/code&gt; is used if the response (acknowledgment) to the inform-request has already been sent (this means that the server will not make the call to the &lt;code&gt;&lt;a href=&quot;snmpm_network_interface#inform_response&quot;&gt;inform_response&lt;/a&gt;&lt;/code&gt; function). See the &lt;code&gt;&lt;a href=&quot;snmp_config#manager_irb&quot;&gt;inform request behaviour&lt;/a&gt;&lt;/code&gt; configuration option for more info.</source>
          <target state="translated">&lt;code&gt;Ref&lt;/code&gt; 는 atom &lt;code&gt;ignore&lt;/code&gt; 또는 정보 요청 (예 : request-id)을 식별하는 데 사용할 수있는 것입니다. &lt;code&gt;ignore&lt;/code&gt; 는 정보 요청에 대한 응답 (승인)이 이미 전송 된 경우 사용됩니다 (이는 서버가 &lt;code&gt;&lt;a href=&quot;snmpm_network_interface#inform_response&quot;&gt;inform_response&lt;/a&gt;&lt;/code&gt; 함수를 호출하지 않음을 의미 함 ). 자세한 내용은 &lt;code&gt;&lt;a href=&quot;snmp_config#manager_irb&quot;&gt;inform request behaviour&lt;/a&gt;&lt;/code&gt; 구성 옵션을 참조하세요.</target>
        </trans-unit>
        <trans-unit id="f222893226755e02cb47f524354864e9f7defa47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ref&lt;/code&gt; is either the atom &lt;code&gt;ignore&lt;/code&gt; or something that can be used to identify the inform-request (e.g. request-id). &lt;code&gt;ignore&lt;/code&gt; is used if the response (acknowledgment) to the inform-request has already been sent (this means that the server will not make the call to the &lt;code&gt;&lt;a href=&quot;snmpm_network_interface#inform_response&quot;&gt;inform_response&lt;/a&gt;&lt;/code&gt; function). See the &lt;code&gt;inform request behaviour&lt;/code&gt; configuration option for more info.</source>
          <target state="translated">&lt;code&gt;Ref&lt;/code&gt; 는 원자를 &lt;code&gt;ignore&lt;/code&gt; 하거나 정보 요청을 식별하는 데 사용할 수있는 것입니다 (예 : request-id). inform-request에 대한 응답 (확인)이 이미 전송 된 경우 &lt;code&gt;ignore&lt;/code&gt; 가 사용됩니다 (이는 서버가 &lt;code&gt;&lt;a href=&quot;snmpm_network_interface#inform_response&quot;&gt;inform_response&lt;/a&gt;&lt;/code&gt; 함수를 호출하지 않음을 의미 함 ). 자세한 정보는 &lt;code&gt;inform request behaviour&lt;/code&gt; 구성 옵션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="85b4e5f43237024a6a4aa3cf76e56288e0c0b26d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ref&lt;/code&gt; is something that can be used to identify the inform-request, e.g. request-id of the inform-request.</source>
          <target state="translated">&lt;code&gt;Ref&lt;/code&gt; 는 정보 요청을 식별하는 데 사용할 수있는 정보입니다 (예 : 정보 요청의 request-id).</target>
        </trans-unit>
        <trans-unit id="a61715fc8adbc759fad02c162f5d42de6f0d5779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Refresh&lt;/code&gt; - Clears &lt;code&gt;all&lt;/code&gt; viewers and re-read their &lt;code&gt;Events&lt;/code&gt; from the &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Refresh&lt;/code&gt; - &lt;code&gt;all&lt;/code&gt; 시청자를 지우고 &lt;code&gt;Collector&lt;/code&gt; 에서 &lt;code&gt;Events&lt;/code&gt; 를 다시 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="53a8895ba59087126c15533cee1a475db932410e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Refresh&lt;/code&gt; - Clears &lt;code&gt;this&lt;/code&gt; viewer and re-read its &lt;code&gt;Events&lt;/code&gt; from the &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Refresh&lt;/code&gt; - &lt;code&gt;this&lt;/code&gt; 뷰어를 지우고 &lt;code&gt;Collector&lt;/code&gt; 에서 &lt;code&gt;Events&lt;/code&gt; 를 다시 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="7c545e4e75de169909ab9ad527ea89534e0a66b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Regexp&lt;/code&gt; is a string with characters encoded in the UTF-8 coding standard.</source>
          <target state="translated">&lt;code&gt;Regexp&lt;/code&gt; 은 UTF-8 코딩 표준으로 인코딩 된 문자가 포함 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="a9a09876465526ade802cc7a9ec80e30b415058f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegisteredName&lt;/code&gt; is the registered name of the port. If the port has no registered name, &lt;code&gt;[]&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;RegisteredName&lt;/code&gt; 은 포트의 등록 된 이름입니다. 포트에 등록 된 이름이 없으면 &lt;code&gt;[]&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4e6b4877a6449e271960f4ef4a2f266edf677fda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Registry&lt;/code&gt;: Store and backup of key-value pairs</source>
          <target state="translated">&lt;code&gt;Registry&lt;/code&gt; : 키-값 쌍의 저장 및 백업</target>
        </trans-unit>
        <trans-unit id="834ef1d26d407fec60c75ed8a86c20a0225a4f65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReleaseName&lt;/code&gt; is the name of the release package except the &lt;code&gt;.tar.gz&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;ReleaseName&lt;/code&gt; 은 &lt;code&gt;.tar.gz&lt;/code&gt; 확장자를 제외한 릴리스 패키지의 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="28b89f11b47bdcf4a1b18832017b878b15704781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Remaining&lt;/code&gt; is the remaining time of the given (or default) timeout time.</source>
          <target state="translated">&lt;code&gt;Remaining&lt;/code&gt; 시간은 주어진 (또는 기본) 타임 아웃 시간의 남은 시간입니다.</target>
        </trans-unit>
        <trans-unit id="1808ad0e3b1b3c60c9c1a5765a9f5db9519da04e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Remaining&lt;/code&gt; is the remaining time of the given or default timeout time.</source>
          <target state="translated">&lt;code&gt;Remaining&lt;/code&gt; 시간은 주어진 시간 또는 기본 시간 초과 시간의 남은 시간입니다.</target>
        </trans-unit>
        <trans-unit id="ddebb92623e272b5d45142213bccffa52b1dfa9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Remaining&lt;/code&gt; time of the given or default timeout time.</source>
          <target state="translated">&lt;code&gt;Remaining&lt;/code&gt; 주어진 또는 기본 시간 초과 시간의 남은 시간.</target>
        </trans-unit>
        <trans-unit id="883c6547edf06f52ae502f7580ba5662891867a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RemoteFile&lt;/code&gt; and &lt;code&gt;LocalFile&lt;/code&gt; must be absolute paths.</source>
          <target state="translated">&lt;code&gt;RemoteFile&lt;/code&gt; 및 &lt;code&gt;LocalFile&lt;/code&gt; 은 절대 경로 여야합니다.</target>
        </trans-unit>
        <trans-unit id="45e8590f435ecc50c7e69b9f28fb64db7b974956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Removed&lt;/code&gt; is a list of all parameters &lt;code&gt;Par&lt;/code&gt; that have been removed.</source>
          <target state="translated">&lt;code&gt;Removed&lt;/code&gt; 은 제거 된 모든 매개 변수 &lt;code&gt;Par&lt;/code&gt; 의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="7a05a7d4c96ae6ea91a9f27432822300899c09b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Removed&lt;/code&gt; is a list of all removed parameters.</source>
          <target state="translated">&lt;code&gt;Removed&lt;/code&gt; 은 제거 된 모든 매개 변수의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="1738f8d577f09578dea04ecdf25effafa96b0944" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReplyAs&lt;/code&gt; can be any datum and is returned in the corresponding &lt;code&gt;io_reply&lt;/code&gt;. The &lt;code&gt;io&lt;/code&gt; module monitors the the I/O server and uses the monitor reference as the &lt;code&gt;ReplyAs&lt;/code&gt; datum. A more complicated client can have many outstanding I/O requests to the same I/O server and can use different references (or something else) to differentiate among the incoming I/O replies. Element &lt;code&gt;ReplyAs&lt;/code&gt; is to be considered opaque by the I/O server.</source>
          <target state="translated">&lt;code&gt;ReplyAs&lt;/code&gt; 는 모든 데이텀이 될 수 있으며 해당 &lt;code&gt;io_reply&lt;/code&gt; 에 반환됩니다 . &lt;code&gt;io&lt;/code&gt; 모듈 모니터 상기 I / O와 서버는 같은 모니터 참조 사용 &lt;code&gt;ReplyAs&lt;/code&gt; 의 데이텀. 더 복잡한 클라이언트는 동일한 I / O 서버에 대한 많은 미처리 I / O 요청을 가질 수 있으며 수신 I / O 응답을 구별하기 위해 다른 참조 (또는 다른 것)를 사용할 수 있습니다. 요소 &lt;code&gt;ReplyAs&lt;/code&gt; 이 는 I / O 서버에서 불투명으로 간주되어야한다.</target>
        </trans-unit>
        <trans-unit id="17128e2a01942fe030eec52570c1ffffd4f5e544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReqId&lt;/code&gt; corresponds to a spawn request previoulsy made by the calling process. The spawn operation has completed and a spawn reply has already been delivered to the calling process unless the spawn reply was disabled in the request.</source>
          <target state="translated">&lt;code&gt;ReqId&lt;/code&gt; 는 호출 프로세스에 의해 생성 된 생성 요청에 해당합니다. 스폰 작업이 완료되었으며 요청에서 스폰 응답이 비활성화되지 않은 경우 스폰 응답이 이미 호출 프로세스에 전달되었습니다.</target>
        </trans-unit>
        <trans-unit id="2e8c17b1918abae10445021033d482a6b2a49311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReqId&lt;/code&gt; does not correspond to a spawn request that has been made by the calling process.</source>
          <target state="translated">&lt;code&gt;ReqId&lt;/code&gt; 는 호출 프로세스에서 생성 한 생성 요청과 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ea5c0cf0344fb51e26eb81916ed55d9558d5e161" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReqId&lt;/code&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;ReqId&lt;/code&gt; 는 정수입니다.</target>
        </trans-unit>
        <trans-unit id="eacaf08d53b1d5fff2c09db06993798fe27a987e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReqId&lt;/code&gt; is returned by the asynchronous request function.</source>
          <target state="translated">&lt;code&gt;ReqId&lt;/code&gt; 는 비동기 요청 함수에 의해 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="0d132b9a53570192260708796ea7c4b8466eddfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReqId&lt;/code&gt; is the request id of the original request.</source>
          <target state="translated">&lt;code&gt;ReqId&lt;/code&gt; 는 원래 요청의 요청 ID입니다.</target>
        </trans-unit>
        <trans-unit id="4cfd078b817a4cacdfa2f5ac645cfa09fbba4335" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; and &lt;code&gt;From&lt;/code&gt; are to be passed as is from the system message to the call to &lt;code&gt;handle_system_msg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 및 &lt;code&gt;From&lt;/code&gt; 은 시스템 메시지에서 &lt;code&gt;handle_system_msg&lt;/code&gt; 호출로 그대로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c20145c03ca8eb35759b95cf0a7d63ea017ed60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; and &lt;code&gt;Reply&lt;/code&gt; are described below.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 및 &lt;code&gt;Reply&lt;/code&gt; 은 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bcd48a1331b96f3c6bbdc7feb62d3cdc683a292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; is any term that is passed as one of the arguments to &lt;code&gt;Module:handle_call/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 은 &lt;code&gt;Module:handle_call/2&lt;/code&gt; 에 인수 중 하나로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="089fb0f7c4d1d7894f1de67845512f4ecad66151" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; is any term that is passed as one of the arguments to &lt;code&gt;Module:handle_call/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 은 &lt;code&gt;Module:handle_call/3&lt;/code&gt; 의 인수 중 하나로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="7a775324c0c87ed13af4e7b8ffa572a3255e74ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; is any term that is passed as one of the arguments to &lt;code&gt;Module:handle_cast/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 은 &lt;code&gt;Module:handle_cast/2&lt;/code&gt; 에 인수 중 하나로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="6118d58b0e4bc7bc3dc2afb7de8fb2dbd927bdd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; is any term that is passed as the first argument to &lt;code&gt;Module:handle_call/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 은 &lt;code&gt;Module:handle_call/3&lt;/code&gt; 의 첫 번째 인수로 전달되는 모든 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="2b834a6b698120e416278aa573cbc3e23ec9fbec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="30751f879314317594017fd21428a69c54f019b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; is the &lt;code&gt;Request&lt;/code&gt; argument of &lt;code&gt;call/3,4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 는 &lt;code&gt;call/3,4&lt;/code&gt; 의 &lt;code&gt;Request&lt;/code&gt; 인수입니다 .</target>
        </trans-unit>
        <trans-unit id="2a26d63fe236fbc4879863d0dae439ba80eefb80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; is the &lt;code&gt;Request&lt;/code&gt; argument provided to &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;multi_call&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 는 &lt;code&gt;call&lt;/code&gt; 또는 &lt;code&gt;multi_call&lt;/code&gt; 에 제공된 &lt;code&gt;Request&lt;/code&gt; 인수 입니다.</target>
        </trans-unit>
        <trans-unit id="aeb2b03e41993f045b74ee6f05dea1edd9d597b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Requests&lt;/code&gt; is a list of valid &lt;code&gt;io_request&lt;/code&gt; tuples for the protocol. They must be executed in the order that they appear in the list. The execution is to continue until one of the requests results in an error or the list is consumed. The result of the last request is sent back to the client.</source>
          <target state="translated">&lt;code&gt;Requests&lt;/code&gt; 은 프로토콜 에 유효한 &lt;code&gt;io_request&lt;/code&gt; 튜플 목록입니다 . 목록에 나타난 순서대로 실행해야합니다. 요청 중 하나에서 오류가 발생하거나 목록이 사용될 때까지 실행이 계속됩니다. 마지막 요청의 결과는 클라이언트로 다시 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="599fb6f1c0ccf1f8e06e6d8ffd139a339dae6d01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RequireInfo = {not_available,atom() | tuple()}&lt;/code&gt;, why require failed.</source>
          <target state="translated">&lt;code&gt;RequireInfo = {not_available,atom() | tuple()}&lt;/code&gt; , 왜 요구가 실패했는지.</target>
        </trans-unit>
        <trans-unit id="91ae1878b4f86aaad3ee26550daa21ca25883856" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Res&lt;/code&gt; is returned in the following circumstances:</source>
          <target state="translated">&lt;code&gt;Res&lt;/code&gt; 는 다음과 같은 상황에서 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4c0d162e97a3f6b9975f5d54bdac7f2d07168d70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Result = ok | {auto_skipped,SkipReason} | {skipped,SkipReason} | {failed,FailReason}&lt;/code&gt;, the result.</source>
          <target state="translated">&lt;code&gt;Result = ok | {auto_skipped,SkipReason} | {skipped,SkipReason} | {failed,FailReason}&lt;/code&gt; 결과는 {failed, FailReason} 입니다.</target>
        </trans-unit>
        <trans-unit id="ae330c080fefdf389b6a1d441ab3c1fb813ba586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Result&lt;/code&gt; can be any Erlang term, but if it is a &lt;code&gt;list()&lt;/code&gt;, the I/O server can convert it to a &lt;code&gt;binary()&lt;/code&gt; of appropriate format before returning it to the client, if the I/O server is set in binary mode (see below).</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; 어떤 얼랑 용어가 될 수 있지만,이 경우 &lt;code&gt;list()&lt;/code&gt; 의 I / O 서버는로 변환 할 수 있습니다 &lt;code&gt;binary()&lt;/code&gt; 는 I / O 서버가 바이너리 모드로 설정되어있는 경우, 클라이언트에 반환하기 전에 적절한 형식의 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="1882015b81a394f422f9a4cc0231adffebd2ed37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RetryCount&lt;/code&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;RetryCount&lt;/code&gt; 는 정수입니다.</target>
        </trans-unit>
        <trans-unit id="3bd52807e56dab7a94b2826373d5ee127aa1fccb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Return&lt;/code&gt; is the result of the &lt;code&gt;init_per_suite&lt;/code&gt; function. If it is &lt;code&gt;{skip,Reason}&lt;/code&gt; or &lt;code&gt;{fail,Reason}&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; is never called, instead the initiation is considered to be skipped or failed, respectively. If a &lt;code&gt;NewConfig&lt;/code&gt; list is returned, &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; is called with that &lt;code&gt;NewConfig&lt;/code&gt; list. For more details, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#pre&quot;&gt;Pre Hooks&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;Return&lt;/code&gt; 은 &lt;code&gt;init_per_suite&lt;/code&gt; 함수 의 결과입니다 . 이 경우 &lt;code&gt;{skip,Reason}&lt;/code&gt; 또는 &lt;code&gt;{fail,Reason}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 대신 시작을 각각 생략 된 것으로 간주 또는 실패, 호출되지 않습니다. 경우 &lt;code&gt;NewConfig&lt;/code&gt; 의 목록이 반환됩니다 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 이 불려 &lt;code&gt;NewConfig&lt;/code&gt; 의 목록입니다. 자세한 내용 은 사용 설명서의 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#pre&quot;&gt;Pre Hooks&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="153cd0d95bea977494dbab1eebcbc88f33024ab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Return&lt;/code&gt; is the result of the &lt;code&gt;init_per_suite&lt;/code&gt; function. If it is &lt;code&gt;{skip,Reason}&lt;/code&gt; or &lt;code&gt;{fail,Reason}&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; is never called, instead the initiation is considered to be skipped or failed, respectively. If a &lt;code&gt;NewConfig&lt;/code&gt; list is returned, &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; is called with that &lt;code&gt;NewConfig&lt;/code&gt; list. For more details, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#pre&quot;&gt;Pre Hooks&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;Return&lt;/code&gt; 은 &lt;code&gt;init_per_suite&lt;/code&gt; 함수 의 결과입니다 . 이 경우 &lt;code&gt;{skip,Reason}&lt;/code&gt; 또는 &lt;code&gt;{fail,Reason}&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 대신 시작을 각각 생략 된 것으로 간주 또는 실패, 호출되지 않습니다. 경우 &lt;code&gt;NewConfig&lt;/code&gt; 의 목록이 반환됩니다 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 이 불려 &lt;code&gt;NewConfig&lt;/code&gt; 의 목록입니다. 자세한 내용 은 사용자 가이드의 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#pre&quot;&gt;Pre Hooks&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9bfbbb1a065ca0c9bb11b3ddd8f5ec09b6a157f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Return&lt;/code&gt; is what &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; returned, that is, &lt;code&gt;{fail,Reason}&lt;/code&gt;, &lt;code&gt;{skip,Reason}&lt;/code&gt;, a &lt;code&gt;Config&lt;/code&gt; list, or a term describing how &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; failed.</source>
          <target state="translated">&lt;code&gt;Return&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 가 반환 한 것, 즉 &lt;code&gt;{fail,Reason}&lt;/code&gt; , &lt;code&gt;{skip,Reason}&lt;/code&gt; , &lt;code&gt;Config&lt;/code&gt; 목록 또는 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 가 실패한 방법을 설명하는 용어 입니다.</target>
        </trans-unit>
        <trans-unit id="bf0791f940792295bb6edacf1372dcdd850a0db1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Return&lt;/code&gt; is what &lt;code&gt;&lt;a href=&quot;ct_suite#Module:all-0&quot;&gt;all/0&lt;/a&gt;&lt;/code&gt; returned, that is, a list of test cases and groups to be executed, or a tuple &lt;code&gt;{skip,Reason}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Return&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:all-0&quot;&gt;all/0&lt;/a&gt;&lt;/code&gt; 이 리턴 한 것, 즉 실행할 테스트 케이스 및 그룹 목록 또는 튜플 &lt;code&gt;{skip,Reason}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="50d1cf3345b66a40bb0d64db17902ce89c92d31f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Return&lt;/code&gt; is what &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; returned, that is, &lt;code&gt;{fail,Reason}&lt;/code&gt;, &lt;code&gt;{skip,Reason}&lt;/code&gt;, a &lt;code&gt;Config&lt;/code&gt; list, or a term describing how &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; failed.</source>
          <target state="translated">&lt;code&gt;Return&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 가 반환 한 것, 즉 &lt;code&gt;{fail,Reason}&lt;/code&gt; , &lt;code&gt;{skip,Reason}&lt;/code&gt; , &lt;code&gt;Config&lt;/code&gt; 목록 또는 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite&lt;/a&gt;&lt;/code&gt; 실패 방법을 설명하는 용어 입니다.</target>
        </trans-unit>
        <trans-unit id="9ce1688c287c94fc13d12b1aca3d47a723d8497a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reverse from this event&lt;/code&gt; - Set this event to be the first &lt;code&gt;Event&lt;/code&gt; in the &lt;code&gt;Viewer&lt;/code&gt; and change its display mode to be enter reverse search mode. The actor of this &lt;code&gt;Event&lt;/code&gt; (from, to or both) will be added to the list of selected actors. Observe, that the &lt;code&gt;Events&lt;/code&gt; will be shown in reverse order.</source>
          <target state="translated">&lt;code&gt;Reverse from this event&lt;/code&gt; - 첫번째로이 이벤트를 설정 &lt;code&gt;Event&lt;/code&gt; 에서 &lt;code&gt;Viewer&lt;/code&gt; 역방향 검색 모드를 입력 할 수있는 표시 모드를 변경합니다. 이 &lt;code&gt;Event&lt;/code&gt; 의 액터 (부터, 또는 둘 다)가 선택된 액터 목록에 추가됩니다. 것을 관찰 &lt;code&gt;Events&lt;/code&gt; 역순으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a54d0c190922012da4a5810ef95e03925f97d85d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Root&lt;/code&gt; is the root of the installation (&lt;code&gt;$ROOT&lt;/code&gt;) as described earlier. &lt;code&gt;RelDir&lt;/code&gt; is the directory where the &lt;code&gt;RELEASES&lt;/code&gt; file is to be created (normally &lt;code&gt;$ROOT/releases&lt;/code&gt;). &lt;code&gt;RelFile&lt;/code&gt; is the name of the &lt;code&gt;.rel&lt;/code&gt; file that describes the initial release, including the extension &lt;code&gt;.rel&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Root&lt;/code&gt; 는 앞에서 설명한대로 설치 루트 ( &lt;code&gt;$ROOT&lt;/code&gt; )입니다. &lt;code&gt;RelDir&lt;/code&gt; 은 &lt;code&gt;RELEASES&lt;/code&gt; 파일이 작성 될 디렉토리 입니다 (일반적으로 &lt;code&gt;$ROOT/releases&lt;/code&gt; ). &lt;code&gt;RelFile&lt;/code&gt; 은 확장명 &lt;code&gt;.rel&lt;/code&gt; 을 포함하여 초기 릴리스를 설명 하는 &lt;code&gt;.rel&lt;/code&gt; 파일 의 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="109b635a0c8796283b6fa1b893e757c8758f0687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RootAttributes&lt;/code&gt; is a list of &lt;code&gt;#xmlAttribute{}&lt;/code&gt; attributes for the &lt;code&gt;#root#&lt;/code&gt; element, which implicitly becomes the parent of the given &lt;code&gt;Content&lt;/code&gt;. The tag-handler function for &lt;code&gt;#root#&lt;/code&gt; is thus called with the complete exported data of &lt;code&gt;Content&lt;/code&gt;. Root attributes can be used to specify e.g. encoding or other metadata of an XML or HTML document.</source>
          <target state="translated">&lt;code&gt;RootAttributes&lt;/code&gt; 는 &lt;code&gt;#root#&lt;/code&gt; 요소 의 &lt;code&gt;#xmlAttribute{}&lt;/code&gt; 속성 목록 으로, 지정된 &lt;code&gt;Content&lt;/code&gt; 의 상위가됩니다 . &lt;code&gt;#root#&lt;/code&gt; 의 태그 핸들러 함수 는 &lt;code&gt;Content&lt;/code&gt; 의 전체 익스포트 된 데이터와 함께 호출됩니다 . 루트 속성을 사용하여 XML 또는 HTML 문서의 인코딩 또는 기타 메타 데이터를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0628994c77cf3dcb12b4f4a25202d45208ee37d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RootAttributes&lt;/code&gt; is a list of:</source>
          <target state="translated">&lt;code&gt;RootAttributes&lt;/code&gt; 는 다음 목록입니다.</target>
        </trans-unit>
        <trans-unit id="6f16c3178f4a189f6eb081836a0db30bfb48a53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Rootset&lt;/code&gt; is a list of pids and registered names.</source>
          <target state="translated">&lt;code&gt;Rootset&lt;/code&gt; 는 pid 및 등록 된 이름의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="d347b50ae6b2966f9a0f4604bef697422056a8cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Row&lt;/code&gt; is a tuple with values for all columns, including the index columns.</source>
          <target state="translated">&lt;code&gt;Row&lt;/code&gt; 은 인덱스 열을 포함하여 모든 열에 대한 값이있는 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="9c859e6654f149787c957c2dcb2689c0bd8a065b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RowIndex&lt;/code&gt; can specify a non-existing row. Specifically, it can be the empty list. Returns the index of the next lexicographical row. If &lt;code&gt;RowIndex&lt;/code&gt; is the empty list, this function returns the index of the first row in the table.</source>
          <target state="translated">&lt;code&gt;RowIndex&lt;/code&gt; 는 존재하지 않는 행을 지정할 수 있습니다. 특히 빈 목록 일 수 있습니다. 다음 사전 행의 색인을 리턴합니다. 경우 &lt;code&gt;RowIndex&lt;/code&gt; 빈리스트이며,이 기능은 테이블의 첫 번째 행의 인덱스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d3b1391a6dfa3b34ca7d08f9561a201ce61847b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RowIndex&lt;/code&gt; is a list of integers (possibly empty) that defines the key values for a row. The &lt;code&gt;RowIndex&lt;/code&gt; is the list representation (list of integers), which follow the &lt;code&gt;Cols&lt;/code&gt; integer in the OBJECT IDENTIFIER.</source>
          <target state="translated">&lt;code&gt;RowIndex&lt;/code&gt; 는 행의 키 값을 정의하는 정수 목록 (비어있을 수 있음)입니다. &lt;code&gt;RowIndex&lt;/code&gt; 후속리스트 표현 (정수리스트)이다 &lt;code&gt;Cols&lt;/code&gt; 오브젝트 ID의 정수.</target>
        </trans-unit>
        <trans-unit id="72b8e3aefce1d4d68e7638cb366c986b14e913d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RowIndex&lt;/code&gt; is a list of integers that define the key values for the row. The &lt;code&gt;RowIndex&lt;/code&gt; is the list representation (list of integers) which follow the &lt;code&gt;Cols&lt;/code&gt; integer in the OBJECT IDENTIFIER.</source>
          <target state="translated">&lt;code&gt;RowIndex&lt;/code&gt; 는 행의 키 값을 정의하는 정수 목록입니다. &lt;code&gt;RowIndex&lt;/code&gt; 후속리스트 표현 (정수리스트)이다 &lt;code&gt;Cols&lt;/code&gt; 오브젝트 ID의 정수.</target>
        </trans-unit>
        <trans-unit id="805a797a2bb2a86aa19417ee42c2228fa67e52f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RowIndex&lt;/code&gt; is a list of integers which define the key values for the row. The &lt;code&gt;RowIndex&lt;/code&gt; is the list representation (list of integers) which follow the &lt;code&gt;Cols&lt;/code&gt; integer in the OBJECT IDENTIFIER.</source>
          <target state="translated">&lt;code&gt;RowIndex&lt;/code&gt; 는 행의 키 값을 정의하는 정수 목록입니다. &lt;code&gt;RowIndex&lt;/code&gt; 후속리스트 표현 (정수리스트)이다 &lt;code&gt;Cols&lt;/code&gt; 오브젝트 ID의 정수.</target>
        </trans-unit>
        <trans-unit id="b76f2538ec83101fa6b946c72bb04458419ae16b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RowIndex&lt;/code&gt; may be an empty list, an incompletely specified row index, or the index for an unspecified row.</source>
          <target state="translated">&lt;code&gt;RowIndex&lt;/code&gt; 는 비어있는 목록, 불완전하게 지정된 행 인덱스 또는 지정되지 않은 행의 인덱스 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="024ea3d842b441ddaed28ba4cdb3129293153cc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Rules&lt;/code&gt; defaults to:</source>
          <target state="translated">&lt;code&gt;Rules&lt;/code&gt; 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3d53acdae1cd673daf29c1641f9ae57120fb1c23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Rules&lt;/code&gt; describes how the source directory can be found when the object code directory is known. It is a list of tuples &lt;code&gt;{BinSuffix, SourceSuffix}&lt;/code&gt; and is interpreted as follows: if the end of the directory name where the object is located matches &lt;code&gt;BinSuffix&lt;/code&gt;, then the name created by replacing &lt;code&gt;BinSuffix&lt;/code&gt; with &lt;code&gt;SourceSuffix&lt;/code&gt; is expanded by calling &lt;code&gt;&lt;a href=&quot;filelib#wildcard-1&quot;&gt; filelib:wildcard/1&lt;/a&gt;&lt;/code&gt;. If a regular file is found among the matches, the function returns that location together with &lt;code&gt;Options&lt;/code&gt;. Otherwise the next rule is tried, and so on.</source>
          <target state="translated">&lt;code&gt;Rules&lt;/code&gt; 은 오브젝트 코드 디렉토리가 알려진 경우 소스 디렉토리를 찾을 수있는 방법을 설명합니다. 튜플 &lt;code&gt;{BinSuffix, SourceSuffix}&lt;/code&gt; 의 목록이며 다음과 같이 해석됩니다. 객체가 위치한 디렉토리 이름의 끝이 &lt;code&gt;BinSuffix&lt;/code&gt; 와 일치 하면 &lt;code&gt;BinSuffix&lt;/code&gt; 를 &lt;code&gt;SourceSuffix&lt;/code&gt; 로 대체하여 생성 된 이름 은 &lt;code&gt;&lt;a href=&quot;filelib#wildcard-1&quot;&gt; filelib:wildcard/1&lt;/a&gt;&lt;/code&gt; 을 호출하여 확장됩니다 . . 일치하는 파일 중에서 일반 파일이 발견되면 함수는 &lt;code&gt;Options&lt;/code&gt; 와 함께 해당 위치를 반환합니다 . 그렇지 않으면 다음 규칙이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="59181cf532d934d785f1e918793863c42f39269c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Rules&lt;/code&gt; describes how the source directory can be found when the object code directory is known. It is a list of tuples &lt;code&gt;{BinSuffix, SourceSuffix}&lt;/code&gt; and is interpreted as follows: if the end of the directory name where the object is located matches &lt;code&gt;BinSuffix&lt;/code&gt;, then the name created by replacing &lt;code&gt;BinSuffix&lt;/code&gt; with &lt;code&gt;SourceSuffix&lt;/code&gt; is expanded by calling &lt;code&gt;&lt;a href=&quot;filelib#wildcard-1&quot;&gt;filelib:wildcard/1&lt;/a&gt;&lt;/code&gt;. If a regular file is found among the matches, the function returns that location together with &lt;code&gt;Options&lt;/code&gt;. Otherwise the next rule is tried, and so on.</source>
          <target state="translated">&lt;code&gt;Rules&lt;/code&gt; 은 오브젝트 코드 디렉토리가 알려진 경우 소스 디렉토리를 찾는 방법을 설명합니다. 튜플 &lt;code&gt;{BinSuffix, SourceSuffix}&lt;/code&gt; 의 목록이며 다음과 같이 해석됩니다. 오브젝트가있는 디렉토리 이름의 끝이 &lt;code&gt;BinSuffix&lt;/code&gt; 와 일치 하면 &lt;code&gt;BinSuffix&lt;/code&gt; 를 &lt;code&gt;SourceSuffix&lt;/code&gt; 로 대체하여 작성된 이름 은 &lt;code&gt;&lt;a href=&quot;filelib#wildcard-1&quot;&gt;filelib:wildcard/1&lt;/a&gt;&lt;/code&gt; 을 호출하여 확장됩니다 . . 일치하는 파일 중 정규 파일이 있으면이 함수는 해당 위치를 &lt;code&gt;Options&lt;/code&gt; 와 함께 반환합니다 . 그렇지 않으면 다음 규칙이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="db2dac65f899efdf91b3e704976e86af9b3be344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RunTimeError = term()&lt;/code&gt;, a runtime error, for example &lt;code&gt;badmatch&lt;/code&gt; or &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RunTimeError = term()&lt;/code&gt; , 런타임 오류 (예 : &lt;code&gt;badmatch&lt;/code&gt; 또는 &lt;code&gt;undef&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="bbf02355e3a3b63bb77aa1d3da45aed77c171dba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RunTimeError = term()&lt;/code&gt;, a runtime error, for example, &lt;code&gt;badmatch&lt;/code&gt; or &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RunTimeError = term()&lt;/code&gt; , 런타임 에러, 예컨대, 대 &lt;code&gt;badmatch&lt;/code&gt; 또는 &lt;code&gt;undef&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="166ce51b78108264c26dccc3b3043555b10c6393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Runtime/Wallclock&lt;/code&gt;, that is, the percentage of time where the node has been active.</source>
          <target state="translated">&lt;code&gt;Runtime/Wallclock&lt;/code&gt; 즉 , 노드가 활성화 된 시간의 백분율입니다.</target>
        </trans-unit>
        <trans-unit id="b0d3bd112b9a60e72c91d5c923d3fb3ada76eeb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RxMatch&lt;/code&gt; is a list of matched strings. It looks as follows &lt;code&gt;[FullMatch, SubMatch1, SubMatch2, ...]&lt;/code&gt;, where &lt;code&gt;FullMatch&lt;/code&gt; is the string matched by the whole regular expression, and &lt;code&gt;SubMatchN&lt;/code&gt; is the string that matched subexpression number &lt;code&gt;N&lt;/code&gt;. Subexpressions are denoted with &lt;code&gt;'(' ')'&lt;/code&gt; in the regular expression.</source>
          <target state="translated">&lt;code&gt;RxMatch&lt;/code&gt; 는 일치하는 문자열 목록입니다. &lt;code&gt;[FullMatch, SubMatch1, SubMatch2, ...]&lt;/code&gt; 와 같이 보입니다 . 여기서 &lt;code&gt;FullMatch&lt;/code&gt; 는 전체 정규 표현식과 일치하는 문자열 이고 &lt;code&gt;SubMatchN&lt;/code&gt; 은 하위 표현식 수 &lt;code&gt;N&lt;/code&gt; 과 일치하는 문자열입니다 . 하위 표현식은 정규식에서 &lt;code&gt;'(' ')'&lt;/code&gt; 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="d2dc1cfdfe419af221cc8b8b70800d8513cede25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S&lt;/code&gt; - Tagged source register (X or Y). The tag will be tested at runtime to retrieve the value from an X register or a Y register. Slighly cheaper than &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; - 태그가 지정된 소스 레지스터 (X 또는 Y). 태그는 런타임에 X 레지스터 또는 Y 레지스터에서 값을 검색하기 위해 테스트됩니다. &lt;code&gt;s&lt;/code&gt; 보다 slighly 저렴 합니다.</target>
        </trans-unit>
        <trans-unit id="52215da4c7d977d8a561835cab5cb4836f0b63a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SA2&lt;/code&gt; will not get requests starting with object identifier &lt;code&gt;[1,2,3]&lt;/code&gt; since &lt;code&gt;SA1&lt;/code&gt; does not.</source>
          <target state="translated">&lt;code&gt;SA2&lt;/code&gt; 는 &lt;code&gt;SA1&lt;/code&gt; 이 아니기 때문에 객체 식별자 &lt;code&gt;[1,2,3]&lt;/code&gt; 으로 시작하는 요청을 받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="718102b5ad085eb6596a0bb32aba1e6a25bcdf57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SEQUENCE&lt;/code&gt;&lt;code&gt;b&lt;/code&gt; can be encoded as follows in Erlang:</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; Erlang에서는 SEQUENCE &lt;code&gt;b&lt;/code&gt; 를 다음과 같이 인코딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="adedaa0e1ab00c603bdbaf9a4ba2b9a0390dd9cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SMALL_ATOM_EXT&lt;/code&gt; was introduced in ERTS 5.7.2 and require an exchange of distribution flag &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#DFLAG_SMALL_ATOM_TAGS&quot;&gt; DFLAG_SMALL_ATOM_TAGS&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt; distribution handshake&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SMALL_ATOM_EXT&lt;/code&gt; 는 ERTS 5.7.2에서 도입되었으며 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt; distribution handshake&lt;/a&gt;&lt;/code&gt; 에서 배포 플래그 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#DFLAG_SMALL_ATOM_TAGS&quot;&gt; DFLAG_SMALL_ATOM_TAGS&lt;/a&gt;&lt;/code&gt; 의 교환이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="d353b04ae234a8027c00fdf4e2d87dc29a46b542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SMALL_ATOM_EXT&lt;/code&gt; was introduced in ERTS 5.7.2 and require an exchange of distribution flag &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_SMALL_ATOM_TAGS&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt;distribution handshake&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SMALL_ATOM_EXT&lt;/code&gt; 는 ERTS 5.7.2에서 도입되었으며 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#distribution_handshake&quot;&gt;distribution handshake&lt;/a&gt;&lt;/code&gt; 에서 배포 플래그 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#dflags&quot;&gt;DFLAG_SMALL_ATOM_TAGS&lt;/a&gt;&lt;/code&gt; 를 교환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="64e8f9434f966f64db42b8e21dadfb02b1e98cf5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;STATIC_CFLAGS&lt;/code&gt; - Static C compiler flags.</source>
          <target state="translated">&lt;code&gt;STATIC_CFLAGS&lt;/code&gt; - 정적 C 컴파일러 플래그</target>
        </trans-unit>
        <trans-unit id="b88dd1f63f13a1a76d4dae13833155a9133ae5db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Salt&lt;/code&gt; could be generated with &lt;code&gt;crypto:strong_rand_bytes(8)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Salt&lt;/code&gt; 는 &lt;code&gt;crypto:strong_rand_bytes(8)&lt;/code&gt; 로 생성 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="00485b2dd5e902c882e07bd97c0ddf5a172aff2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Save all events in the Collector to file&lt;/code&gt; - Saves all &lt;code&gt;Events&lt;/code&gt; stored in the &lt;code&gt;Collector&lt;/code&gt; to file.</source>
          <target state="translated">&lt;code&gt;Save all events in the Collector to file&lt;/code&gt; - 모든 저장 &lt;code&gt;Events&lt;/code&gt; 에 기억 &lt;code&gt;Collector&lt;/code&gt; 파일을.</target>
        </trans-unit>
        <trans-unit id="b8c0eca62d8bf79aa06b9250344bdfb9eb31c8c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Save configuration&lt;/code&gt; - Saves the current configuration to file. Normally, only the explicit configuration parameters with values that differ from their defaults are saved. But the configuration with or without default values and with or without derived values may also be saved.</source>
          <target state="translated">&lt;code&gt;Save configuration&lt;/code&gt; 저장-현재 구성을 파일에 저장합니다. 일반적으로 기본값과 다른 값을 가진 명시 적 구성 매개 변수 만 저장됩니다. 그러나 기본값이 있거나없는 구성과 파생 값이 있거나없는 구성도 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d594249813ca4b8419be6eca9e0e226e90cf758" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Save&lt;/code&gt; - Save the contents of this window to file.</source>
          <target state="translated">&lt;code&gt;Save&lt;/code&gt; -이 창의 내용을 파일로 저장합니다.</target>
        </trans-unit>
        <trans-unit id="8a7db09a7fd0667aa06fef75a6b3cc1ba66a450c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Saver&lt;/code&gt; (&lt;code&gt;atom()&lt;/code&gt;) is the name of the previous test case (where the data was saved). The &lt;code&gt;config&lt;/code&gt; macro can be used to extract particular data also from the recalled &lt;code&gt;ConfigList&lt;/code&gt;. It is strongly recommended that &lt;code&gt;Saver&lt;/code&gt; is always matched to the expected name of the saving test case. This way, problems because of restructuring of the test suite can be avoided. Also, it makes the dependency more explicit and the test suite easier to read and maintain.</source>
          <target state="translated">&lt;code&gt;Saver&lt;/code&gt; ( &lt;code&gt;atom()&lt;/code&gt; )는 이전 테스트 사례 (데이터가 저장된 위치)의 이름입니다. &lt;code&gt;config&lt;/code&gt; 매크로 리콜에서도 특정 데이터를 추출하는데 사용될 수있다 &lt;code&gt;ConfigList&lt;/code&gt; . &lt;code&gt;Saver&lt;/code&gt; 는 항상 저장 테스트 케이스의 예상 이름과 일치 하는 것이 좋습니다 . 이런 식으로 테스트 스위트의 재구성으로 인한 문제를 피할 수 있습니다. 또한 종속성을보다 명확하게하고 테스트 스위트를보다 쉽게 ​​읽고 유지 보수 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bf457662f146e23f4d9941192242988d9bbc304" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Scannerfile&lt;/code&gt; is the name of the file that will contain the Erlang scanner code that is generated. The default (&lt;code&gt;&quot;&quot;&lt;/code&gt;) is to add the extension &lt;code&gt;.erl&lt;/code&gt; to &lt;code&gt;FileName&lt;/code&gt; stripped of the &lt;code&gt;.xrl&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;Scannerfile&lt;/code&gt; 가 생성되는 얼랑 스캐너 코드가 포함 된 파일의 이름입니다. 기본값 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; )은 확장자 &lt;code&gt;.erl&lt;/code&gt; 을 &lt;code&gt;.xrl&lt;/code&gt; 확장자가 제거 된 &lt;code&gt;FileName&lt;/code&gt; 에 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="74f9abd428040e29545c1c7146f048bbe05b499c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Schedulers&lt;/code&gt; can be omitted if &lt;code&gt;:SchedulerOnline&lt;/code&gt; is not and conversely. The number of schedulers online can be changed at runtime through &lt;code&gt;&lt;a href=&quot;erlang#system_flag_schedulers_online&quot;&gt; erlang:system_flag(schedulers_online, SchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Schedulers&lt;/code&gt; &lt;code&gt;:SchedulerOnline&lt;/code&gt; 이 아닌 경우 스케줄러 를 생략 할 수 있습니다 . 온라인 스케줄러의 수는 &lt;code&gt;&lt;a href=&quot;erlang#system_flag_schedulers_online&quot;&gt; erlang:system_flag(schedulers_online, SchedulersOnline)&lt;/a&gt;&lt;/code&gt; 통해 런타임에 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fbc3bf675ab2e1501917f762563ef90c270cd69b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecLevel&lt;/code&gt; is &lt;code&gt;noAuthNoPriv&lt;/code&gt;, &lt;code&gt;authNoPriv&lt;/code&gt;, or &lt;code&gt;authPriv&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SecLevel&lt;/code&gt; 은 &lt;code&gt;noAuthNoPriv&lt;/code&gt; , &lt;code&gt;authNoPriv&lt;/code&gt; 또는 &lt;code&gt;authPriv&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0ba6c912556b867c75dc49daafaa36aea4085d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecLevel&lt;/code&gt; is security level (noAuthNoPriv | authNoPriv | authPriv).</source>
          <target state="translated">&lt;code&gt;SecLevel&lt;/code&gt; 은 보안 수준입니다 (noAuthNoPriv | authNoPriv | authPriv).</target>
        </trans-unit>
        <trans-unit id="219a44885687fd5ab1bd450244b028c33da03a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecModel&lt;/code&gt; is &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2c&lt;/code&gt;, or &lt;code&gt;usm&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SecModel&lt;/code&gt; 는 것입니다 &lt;code&gt;any&lt;/code&gt; , &lt;code&gt;v1&lt;/code&gt; , &lt;code&gt;v2c&lt;/code&gt; 를 , 또는 &lt;code&gt;usm&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="341f4eb3d0bd17184f4da0b5de50b6e8ce4bb72a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecModel&lt;/code&gt; is the security model (any | v1 | v2c | usm).</source>
          <target state="translated">&lt;code&gt;SecModel&lt;/code&gt; 은 보안 모델입니다 (모든 | v1 | v2c | usm).</target>
        </trans-unit>
        <trans-unit id="327a96f9d4f700ec6e525b4f5195a4a3f49efb5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;SecName&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="d48bc3f9ef07aeb330eeb8ad1166dee18a28e947" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecName&lt;/code&gt; is the security name (string).</source>
          <target state="translated">&lt;code&gt;SecName&lt;/code&gt; 은 보안 이름 (문자열)입니다.</target>
        </trans-unit>
        <trans-unit id="bdd1104b91549560b02f81e033381080c58b1352" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecurityLevel&lt;/code&gt; is &lt;code&gt;noAuthNoPriv&lt;/code&gt;, &lt;code&gt;authNoPriv&lt;/code&gt; or &lt;code&gt;authPriv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SecurityLevel&lt;/code&gt; 은 &lt;code&gt;noAuthNoPriv&lt;/code&gt; , &lt;code&gt;authNoPriv&lt;/code&gt; 또는 &lt;code&gt;authPriv&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f57f858908b4eef2410061f9691b7f6c199f3bf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecurityModel&lt;/code&gt; is &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2c&lt;/code&gt;, or &lt;code&gt;usm&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SecurityModel&lt;/code&gt; 은 &lt;code&gt;v1&lt;/code&gt; , &lt;code&gt;v2c&lt;/code&gt; 또는 &lt;code&gt;usm&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0e8c8829e225300aaefbd4d63b50237f0e7ec0f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SecurityName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;SecurityName&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="e7450624c90f4d7bf08863db06de24f0358bca1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SeqTraceInfo&lt;/code&gt; can have the following formats:</source>
          <target state="translated">&lt;code&gt;SeqTraceInfo&lt;/code&gt; 는 다음 형식을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6743ede844c5120ed2dd205c9bd7b362f10416da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SequentialTraceToken&lt;/code&gt; is the sequential trace token for the process. This &lt;code&gt;InfoTuple&lt;/code&gt; can be changed or removed without prior notice.</source>
          <target state="translated">&lt;code&gt;SequentialTraceToken&lt;/code&gt; 은 프로세스의 순차적 추적 토큰입니다. 이 &lt;code&gt;InfoTuple&lt;/code&gt; 은 사전 통지없이 변경되거나 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec57d7181d7cdf5a4ab074727924178a13829cab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Serial&lt;/code&gt; is a tuple &lt;code&gt;{PreviousSerial, ThisSerial}&lt;/code&gt;, where:</source>
          <target state="translated">&lt;code&gt;Serial&lt;/code&gt; 은 튜플 &lt;code&gt;{PreviousSerial, ThisSerial}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d29ab552b3779a6efffef6625eb5a9037c24176c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SerialValue = {Previous, Current}&lt;/code&gt;. The &lt;code&gt;serial&lt;/code&gt; component contains counters which enables the traced messages to be sorted, should never be set explicitly by the user as these counters are updated automatically. Default is &lt;code&gt;{0, 0}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SerialValue = {Previous, Current}&lt;/code&gt; . &lt;code&gt;serial&lt;/code&gt; 구성 요소는 추적 메시지를 정렬 할 수 있습니다 이러한 카운터가 자동으로 업데이트되므로 사용자가 명시 적으로 설정하지 말아야 카운터가 포함되어 있습니다. 기본값은 &lt;code&gt;{0, 0}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2439118264f60e11ebf8f5ca7ce9606bcd2a54dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Server&lt;/code&gt; is the pid of the managing process.</source>
          <target state="translated">&lt;code&gt;Server&lt;/code&gt; 는 관리 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="ccd50a89a2818d7f46a1e4462eb2411dca15791e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ServerName&lt;/code&gt; specifies the &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; to register for the &lt;code&gt;gen_statem&lt;/code&gt;. If the &lt;code&gt;gen_statem&lt;/code&gt; is started with &lt;code&gt;start_link/3&lt;/code&gt;, no &lt;code&gt;ServerName&lt;/code&gt; is provided and the &lt;code&gt;gen_statem&lt;/code&gt; is not registered.</source>
          <target state="translated">&lt;code&gt;ServerName&lt;/code&gt; 은 &lt;code&gt;gen_statem&lt;/code&gt; 에 등록 할 &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; 을 지정합니다 . 경우 &lt;code&gt;gen_statem&lt;/code&gt; 가 시작됩니다 &lt;code&gt;start_link/3&lt;/code&gt; , 어떤 &lt;code&gt;ServerName&lt;/code&gt; 제공되지 않고 &lt;code&gt;gen_statem&lt;/code&gt; 가 등록되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6650cc4fb868165399ea3520f9c965698118e105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ServerRef&lt;/code&gt; can be any of the following:</source>
          <target state="translated">&lt;code&gt;ServerRef&lt;/code&gt; 는 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad7e606ed26855629ae8e299242dbb905e89b963" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set3&lt;/code&gt; contains the elements of &lt;code&gt;Set1&lt;/code&gt; that do not belong to &lt;code&gt;Set2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set3&lt;/code&gt; 에는 &lt;code&gt;Set2&lt;/code&gt; 에 속하지 않은 &lt;code&gt;Set1&lt;/code&gt; 의 요소가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="ba12ab0bb711feaebbc8860bcb6854680e830226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set4&lt;/code&gt; contains the elements of &lt;code&gt;Set1&lt;/code&gt; that belong to &lt;code&gt;Set2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set4&lt;/code&gt; 는 &lt;code&gt;Set2&lt;/code&gt; 에 속하는 &lt;code&gt;Set1&lt;/code&gt; 의 요소를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="3f1be4eccd489ebd20f7b2faf5f53cbab0e789bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set5&lt;/code&gt; contains the elements of &lt;code&gt;Set2&lt;/code&gt; that do not belong to &lt;code&gt;Set1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set5&lt;/code&gt; 는 &lt;code&gt;Set1&lt;/code&gt; 에 속하지 않은 &lt;code&gt;Set2&lt;/code&gt; 의 요소를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="0cec1fcdb9c656759cdaf19fe37c7121fdfb635f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SetOrUpdate&lt;/code&gt; has the value &lt;code&gt;set&lt;/code&gt; if the configuration change originates from a call to &lt;code&gt;&lt;a href=&quot;#set_handler_config-2&quot;&gt; set_handler_config/2,3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;update&lt;/code&gt; if it originates from &lt;code&gt;&lt;a href=&quot;#update_handler_config-2&quot;&gt; update_handler_config/2,3&lt;/a&gt;&lt;/code&gt;. The handler can use this parameteter to decide how to update the value of the &lt;code&gt;config&lt;/code&gt; field, that is, the handler specific configuration data. Typically, if &lt;code&gt;SetOrUpdate&lt;/code&gt; equals &lt;code&gt;set&lt;/code&gt;, values that are not specified must be given their default values. If &lt;code&gt;SetOrUpdate&lt;/code&gt; equals &lt;code&gt;update&lt;/code&gt;, the values found in &lt;code&gt;OldConfig&lt;/code&gt; must be used instead.</source>
          <target state="translated">&lt;code&gt;SetOrUpdate&lt;/code&gt; 는 값 갖는다 &lt;code&gt;set&lt;/code&gt; 를 호출하여 구성 변경 오는 경우 &lt;code&gt;&lt;a href=&quot;#set_handler_config-2&quot;&gt; set_handler_config/2,3&lt;/a&gt;&lt;/code&gt; , 및 &lt;code&gt;update&lt;/code&gt; 가 시작된 경우에서 &lt;code&gt;&lt;a href=&quot;#update_handler_config-2&quot;&gt; update_handler_config/2,3&lt;/a&gt;&lt;/code&gt; - . 핸들러는이 매개 변수를 사용하여 &lt;code&gt;config&lt;/code&gt; 필드 의 값 , 즉 핸들러 특정 구성 데이터 를 업데이트하는 방법을 결정할 수 있습니다 . 일반적으로 &lt;code&gt;SetOrUpdate&lt;/code&gt; 가 &lt;code&gt;set&lt;/code&gt; 과 같으면 지정되지 않은 값에 기본값을 제공해야합니다. 경우 &lt;code&gt;SetOrUpdate&lt;/code&gt; 가 동일 &lt;code&gt;update&lt;/code&gt; ,에있는 값 &lt;code&gt;OldConfig&lt;/code&gt; 을 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="70a19403991d16b3e98fb9faeac9e5623cb4f073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Settings&lt;/code&gt; is a list of subsystems, their configurable parameters, and used values. Settings can differ between different combinations of platforms, allocators, and allocation features. Memory sizes are given in bytes.</source>
          <target state="translated">&lt;code&gt;Settings&lt;/code&gt; 은 서브 시스템, 구성 가능한 매개 변수 및 사용 된 값의 목록입니다. 플랫폼, 할당 자 및 할당 기능의 조합에 따라 설정이 다를 수 있습니다. 메모리 크기는 바이트 단위로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="8b09f867b70328f30c3265df6467ae7a3bd2b7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Show actor in viewer&lt;/code&gt; - This implies that the actor will be added as a known actor in the &lt;code&gt;Viewer&lt;/code&gt; with its own vertical bar.</source>
          <target state="translated">&lt;code&gt;Show actor in viewer&lt;/code&gt; -액터가 자체 수직 막대 를 사용하여 &lt;code&gt;Viewer&lt;/code&gt; 에서 알려진 액터로 추가됨을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="17f44a9678dd0c950ddf2a0c1d6116369154821e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SinceLogWasOpened&lt;/code&gt; (&lt;code&gt;SinceLastInfo&lt;/code&gt;) is the number of times a wrap log file has been filled up and a new one is opened or &lt;code&gt;inc_wrap_file/1&lt;/code&gt; has been called since the disk log was last opened (&lt;code&gt;info/1&lt;/code&gt; was last called). The first time &lt;code&gt;info/2&lt;/code&gt; is called after a log was (re)opened or truncated, the two values are equal.</source>
          <target state="translated">&lt;code&gt;SinceLogWasOpened&lt;/code&gt; ( &lt;code&gt;SinceLastInfo&lt;/code&gt; )는 랩 로그 파일이 채워지고 디스크 로그가 마지막으로 열린 이후 ( &lt;code&gt;info/1&lt;/code&gt; 이 마지막 으로 호출 된 이후) 새 파일이 열렸거나 &lt;code&gt;inc_wrap_file/1&lt;/code&gt; 이 호출 된 횟수 입니다. 로그가 (다시) 열리거나 잘린 후 &lt;code&gt;info/2&lt;/code&gt; 가 처음 호출되면 두 값이 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b87fe0e6ac8b4dad20c2d14ba541c9668c3a806" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; is the log size as specified by the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;size&lt;/code&gt;, or the size set by &lt;code&gt;change_size/2&lt;/code&gt;. The value set by &lt;code&gt;change_size/2&lt;/code&gt; is reflected immediately.</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 에 의해 지정된 로그 크기 &lt;code&gt;open/1&lt;/code&gt; 옵션 &lt;code&gt;size&lt;/code&gt; , 또는에 의해 설정된 크기 &lt;code&gt;change_size/2&lt;/code&gt; . &lt;code&gt;change_size/2&lt;/code&gt; 에 의해 설정된 값 이 즉시 반영됩니다.</target>
        </trans-unit>
        <trans-unit id="7cbe34a07dd4273ce268d6b1d2f6839a6dc4a510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; is the size in bytes of the process. This includes call stack, heap, and internal structures.</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 는 프로세스의 크기 (바이트)입니다. 여기에는 호출 스택, 힙 및 내부 구조가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8ca18c1b7f66a9d9f6b09bec054ce88db7752adf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; is the size in words of the youngest heap generation of the process. This generation includes the process stack. This information is highly implementation-dependent, and can change if the implementation changes.</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 는 프로세스에서 가장 어린 힙 생성의 단어 크기입니다. 이 세대에는 프로세스 스택이 포함됩니다. 이 정보는 구현에 따라 달라지며 구현이 변경되면 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="faea89fe6a20bd3a32d4fa0c205e62e7924b23a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; is the size of the tuple representation, that is, one more than the number of fields.</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 는 튜플 표현의 크기, 즉 필드 수보다 하나 이상입니다.</target>
        </trans-unit>
        <trans-unit id="17514b48a3b866b2e9dfcb8e3d95efe4e4b4c3a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; is the stack size, in words, of the process.</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 는 프로세스의 스택 크기입니다.</target>
        </trans-unit>
        <trans-unit id="5a58e3487963a9acab4d786cb6a0eee2d9817c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; is the total size, in words, of all heap fragments of the process. This includes the process stack and any unreceived messages that are considered to be part of the heap.</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 는 프로세스의 모든 힙 조각의 총 크기입니다. 여기에는 프로세스 스택 및 힙의 일부로 간주되는 수신되지 않은 메시지가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e901cd8f15a32fc9a1535932ad01605577758d5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; must be a &lt;code&gt;guard expression&lt;/code&gt;, which can use literals and previously bound variables. The following is not allowed:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 는 리터럴과 이전에 바인딩 된 변수를 사용할 수있는 &lt;code&gt;guard expression&lt;/code&gt; 이어야합니다 . 다음은 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0f08f9cd818e055ea0596b6a52fb54c4c09e4d57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Size&lt;/code&gt; must be an integer literal, or a previously bound variable. The following is not allowed:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 는 정수 리터럴이거나 이전에 바인딩 된 변수 여야합니다. 다음은 허용되지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="19db3e286cc1c8531e52e1b339ad118a0441191f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SkipReason = {require_failed,RequireInfo} | {require_failed_in_suite0,RequireInfo} | {failed,{Suite,init_per_testcase,FailInfo}} | UserTerm&lt;/code&gt;, why the case was skipped.</source>
          <target state="translated">&lt;code&gt;SkipReason = {require_failed,RequireInfo} | {require_failed_in_suite0,RequireInfo} | {failed,{Suite,init_per_testcase,FailInfo}} | UserTerm&lt;/code&gt; , 사례를 건너 뛴 이유</target>
        </trans-unit>
        <trans-unit id="4fab2dd4646103b8f301fa526a4bb185c4a36b85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Source&lt;/code&gt; and &lt;code&gt;Destination&lt;/code&gt; are on different file systems.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; 와 &lt;code&gt;Destination&lt;/code&gt; 이 다른 파일 시스템에 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa451814be285e54f76678d894af6e41a8fea7fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Source&lt;/code&gt; and &lt;code&gt;Target&lt;/code&gt; are opaque data used exclusively by modules &lt;code&gt;SourceMod&lt;/code&gt; and &lt;code&gt;TargetMod&lt;/code&gt; to initialize the backup media.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; 및 &lt;code&gt;Target&lt;/code&gt; 은 백업 미디어를 초기화하기 위해 &lt;code&gt;SourceMod&lt;/code&gt; 및 &lt;code&gt;TargetMod&lt;/code&gt; 모듈에서 독점적으로 사용하는 불투명 한 데이터 입니다.</target>
        </trans-unit>
        <trans-unit id="16f1ce84821addcd0d3a2407674de48e428bf44e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Source&lt;/code&gt; and &lt;code&gt;Target&lt;/code&gt; are opaque data used exclusively by the modules &lt;code&gt;SourceMod&lt;/code&gt; and &lt;code&gt;TargetMod&lt;/code&gt; for initializing the backup medias.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; 및 &lt;code&gt;Target&lt;/code&gt; 은 백업 미디어를 초기화하기 위해 모듈 &lt;code&gt;SourceMod&lt;/code&gt; 및 &lt;code&gt;TargetMod&lt;/code&gt; 가 독점적으로 사용하는 불투명 한 데이터 입니다.</target>
        </trans-unit>
        <trans-unit id="c2f408234ceed3a4496b1f6d9ae28a19944f0aea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Source&lt;/code&gt; does not exist.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; 가 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0ea39651f53ab8a5d772a933512e0a2a77ed11d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Source&lt;/code&gt; is a directory, but &lt;code&gt;Destination&lt;/code&gt; is not.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; 는 디렉토리이지만 &lt;code&gt;Destination&lt;/code&gt; 은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="711570b546af7d3a823cbffc24f25b5208236f61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Source&lt;/code&gt; is a root directory, or &lt;code&gt;Destination&lt;/code&gt; is a subdirectory of &lt;code&gt;Source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; 는 루트 디렉토리이거나 &lt;code&gt;Destination&lt;/code&gt; 은 &lt;code&gt;Source&lt;/code&gt; 의 하위 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="4b935728707cc5c1b1c1b095a4cf903523cd781b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SourceMod&lt;/code&gt; and &lt;code&gt;TargetMod&lt;/code&gt; are module names.</source>
          <target state="translated">&lt;code&gt;SourceMod&lt;/code&gt; 및 &lt;code&gt;TargetMod&lt;/code&gt; 는 모듈 이름입니다.</target>
        </trans-unit>
        <trans-unit id="ea6a4422966cef7b8f671e6a38788cefaa43e151" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SourceMod&lt;/code&gt; and &lt;code&gt;TargetMod&lt;/code&gt; are the names of the modules that actually access the backup media.</source>
          <target state="translated">&lt;code&gt;SourceMod&lt;/code&gt; 및 &lt;code&gt;TargetMod&lt;/code&gt; 는 실제로 백업 미디어에 액세스하는 모듈의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3443d56d4c07efa682d958c9677c0fc54a9e0822" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SshConnectOption&lt;/code&gt; is any valid option to &lt;code&gt;ssh:connect/3,4&lt;/code&gt;. Common options used are &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;user_dir&lt;/code&gt;. The &lt;code&gt;SshConnectOptions&lt;/code&gt; are verfied by the SSH application.</source>
          <target state="translated">&lt;code&gt;SshConnectOption&lt;/code&gt; 은 &lt;code&gt;ssh:connect/3,4&lt;/code&gt; 에 유효한 옵션 입니다. 사용되는 일반적인 옵션은 &lt;code&gt;user&lt;/code&gt; , &lt;code&gt;password&lt;/code&gt; 및 &lt;code&gt;user_dir&lt;/code&gt; 입니다. &lt;code&gt;SshConnectOptions&lt;/code&gt; 는 SSH를 응용 프로그램에서 verfied된다.</target>
        </trans-unit>
        <trans-unit id="bd4bf30d5c4b11126029883626cb8b5398cd68b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stack&lt;/code&gt; is the stack of function calls being evaluated when the error occurred, given as a list of tuples &lt;code&gt;{Module,Name,Arity}&lt;/code&gt; with the most recent function call first. The most recent function call tuple can in some cases be &lt;code&gt;{Module,Name,[Arg]}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; 은 오류가 발생했을 때 평가되는 함수 호출 스택 으로, 가장 최근의 함수 호출이 먼저 포함 된 튜플 &lt;code&gt;{Module,Name,Arity}&lt;/code&gt; 목록으로 제공됩니다 . 가장 최근의 함수 호출 튜플은 경우에 따라 &lt;code&gt;{Module,Name,[Arg]}&lt;/code&gt; 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1381c0feaac2c56dd75ec5d186062dc16e2d0e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StackTrace = list()&lt;/code&gt;, list of function calls preceding a runtime error.</source>
          <target state="translated">&lt;code&gt;StackTrace = list()&lt;/code&gt; , 런타임 오류 이전의 함수 호출 목록.</target>
        </trans-unit>
        <trans-unit id="47e28f77295e790060ead4d8da3c08a6183ab2e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StackTrace = list()&lt;/code&gt;, list of function calls preceeding a runtime error.</source>
          <target state="translated">&lt;code&gt;StackTrace = list()&lt;/code&gt; , 런타임 오류보다 먼저 발생하는 함수 호출 목록.</target>
        </trans-unit>
        <trans-unit id="fb94775b34220f7485999939776b9c02e731bd67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stacktrace&lt;/code&gt; is a list as provided in a try-catch clause.</source>
          <target state="translated">&lt;code&gt;Stacktrace&lt;/code&gt; 는 try-catch 절에 제공된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="73538348b38128bf4eda67bf5e1e6ae6ab4e3a51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stacktrace&lt;/code&gt;, if specified, must be the name of a variable (not a pattern). The stack trace is bound to the variable when the corresponding &lt;code&gt;ExceptionPattern&lt;/code&gt; matches.</source>
          <target state="translated">&lt;code&gt;Stacktrace&lt;/code&gt; 지정된 경우 Stacktrace 는 변수 이름 (패턴이 아님)이어야합니다. 스택 추적은 해당 &lt;code&gt;ExceptionPattern&lt;/code&gt; 이 일치 할 때 변수에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="2f1a4a4d674dd450fb9dd57113eb840ede386707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Start&lt;/code&gt; is zero-based, that is:</source>
          <target state="translated">&lt;code&gt;Start&lt;/code&gt; 은 0부터 시작합니다 . 즉,</target>
        </trans-unit>
        <trans-unit id="331889f634f2d79381421991f288e4e200d65cd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StartArgs&lt;/code&gt; is defined by the key &lt;code&gt;mod&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;#appl_res_file&quot;&gt;application resource file&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StartArgs&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#appl_res_file&quot;&gt;application resource file&lt;/a&gt;&lt;/code&gt; 의 키 &lt;code&gt;mod&lt;/code&gt; 로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="8902d0c21b3652c9965bcc6a61b99b03fc5e7253" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StartArgs&lt;/code&gt; is the &lt;code&gt;StartArgs&lt;/code&gt; argument defined by the application specification key &lt;code&gt;mod&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StartArgs&lt;/code&gt; 는 응용 프로그램 사양 키 &lt;code&gt;mod&lt;/code&gt; 로 정의 된 &lt;code&gt;StartArgs&lt;/code&gt; 인수 입니다.</target>
        </trans-unit>
        <trans-unit id="21344ebd9dbd62a1617db45ad3adfdc4a45ea7e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StartLocation&lt;/code&gt; indicates the initial location when scanning starts. If &lt;code&gt;StartLocation&lt;/code&gt; is a line, &lt;code&gt;Anno&lt;/code&gt;, &lt;code&gt;EndLocation&lt;/code&gt;, and &lt;code&gt;ErrorLocation&lt;/code&gt; are lines. If &lt;code&gt;StartLocation&lt;/code&gt; is a pair of a line and a column, &lt;code&gt;Anno&lt;/code&gt; takes the form of an opaque compound data type, and &lt;code&gt;EndLocation&lt;/code&gt; and &lt;code&gt;ErrorLocation&lt;/code&gt; are pairs of a line and a column. The &lt;strong&gt;token annotations&lt;/strong&gt; contain information about the column and the line where the token begins, as well as the text of the token (if option &lt;code&gt;text&lt;/code&gt; is specified), all of which can be accessed by calling &lt;code&gt;&lt;a href=&quot;#column-1&quot;&gt;column/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#line-1&quot;&gt;line/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#location-1&quot;&gt;location/1&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#text-1&quot;&gt;text/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StartLocation&lt;/code&gt; 은 스캔 시작시 초기 위치를 나타냅니다. 경우 &lt;code&gt;StartLocation&lt;/code&gt; 가 선이다, &lt;code&gt;Anno&lt;/code&gt; , &lt;code&gt;EndLocation&lt;/code&gt; 및 &lt;code&gt;ErrorLocation&lt;/code&gt; 은 선이다. &lt;code&gt;StartLocation&lt;/code&gt; 이 행과 열의 쌍인 경우 &lt;code&gt;Anno&lt;/code&gt; 는 불투명 한 복합 데이터 유형의 형태를 취하고 &lt;code&gt;EndLocation&lt;/code&gt; 과 &lt;code&gt;ErrorLocation&lt;/code&gt; 은 행과 열의 쌍입니다. &lt;strong&gt;토큰 주석&lt;/strong&gt; 열 및 토큰이 시작하는 행에 대한 정보뿐만 아니라 토큰 (옵션 경우의 텍스트가 포함 &lt;code&gt;text&lt;/code&gt; 호출하여 액세스 할 수 있습니다 지정), 모든 &lt;code&gt;&lt;a href=&quot;#column-1&quot;&gt;column/1&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#line-1&quot;&gt;line/1&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#location-1&quot;&gt;location/1&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#text-1&quot;&gt;text/1&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b443761110ac87b03c05e7d747250cf7761bcf51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StartMessage&lt;/code&gt; can in field &lt;code&gt;content&lt;/code&gt; be encoded with a value of any type that an object in object set &lt;code&gt;GENERAL-PROCEDURES&lt;/code&gt; has in its &lt;code&gt;NEW MESSAGE&lt;/code&gt; field. This field refers to a type field &lt;code&gt;&amp;amp;Message&lt;/code&gt; in the class. Field &lt;code&gt;msgId&lt;/code&gt; is always encoded as a &lt;code&gt;PrintableString&lt;/code&gt;, as the field refers to a fixed type in the class.</source>
          <target state="translated">&lt;code&gt;StartMessage&lt;/code&gt; 는 필드 &lt;code&gt;content&lt;/code&gt; 에서 오브젝트 세트 &lt;code&gt;GENERAL-PROCEDURES&lt;/code&gt; 의 오브젝트 가 &lt;code&gt;NEW MESSAGE&lt;/code&gt; 필드 에있는 모든 유형의 값으로 인코딩 될 수 있습니다 . 이 필드는 클래스 의 유형 필드 &lt;code&gt;&amp;amp;Message&lt;/code&gt; 를 나타냅니다 . 필드 &lt;code&gt;msgId&lt;/code&gt; 는 클래스에서 고정 유형을 참조하므로 항상 &lt;code&gt;PrintableString&lt;/code&gt; 으로 인코딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="30be4806f54c757f35e502e6467c7134c1354df0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StartTime = {date(),time()}&lt;/code&gt;, test run start date and time.</source>
          <target state="translated">&lt;code&gt;StartTime = {date(),time()}&lt;/code&gt; , 테스트 실행 시작 날짜 및 시간.</target>
        </trans-unit>
        <trans-unit id="96a4a2c6218e172e30692b77067034c6287d73b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StartType&lt;/code&gt; is usually the atom &lt;code&gt;normal&lt;/code&gt;. It has other values only in the case of a takeover or failover, see &lt;code&gt;&lt;a href=&quot;distributed_applications&quot;&gt;Distributed Applications&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StartType&lt;/code&gt; 은 일반적으로 원자 &lt;code&gt;normal&lt;/code&gt; 입니다. 인계 또는 장애 복구의 경우에만 다른 값을 갖습니다 ( &lt;code&gt;&lt;a href=&quot;distributed_applications&quot;&gt;Distributed Applications&lt;/a&gt;&lt;/code&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="079ffaa7919818e7ba60deb4839e9ee4b7e10b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; and &lt;code&gt;Timeout&lt;/code&gt; have the same meanings as in the return value of &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt;. The callback module &lt;code&gt;Module&lt;/code&gt; does not need to export an &lt;code&gt;init/1&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 및 &lt;code&gt;Timeout&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 의 반환 값과 동일한 의미를 갖습니다 . 콜백 모듈 &lt;code&gt;Module&lt;/code&gt; 은 &lt;code&gt;init/1&lt;/code&gt; 함수 를 내보낼 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0293cc93c6a69f8c3a5c4843d0d0086907f49f9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is a term describing the internal state and is passed to &lt;code&gt;system_continue&lt;/code&gt;/&lt;code&gt;system_terminate&lt;/code&gt;/ &lt;code&gt;system_get_state&lt;/code&gt;/&lt;code&gt;system_replace_state&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 내부 상태를 설명하는 용어이며 &lt;code&gt;system_continue&lt;/code&gt; / &lt;code&gt;system_terminate&lt;/code&gt; / &lt;code&gt;system_get_state&lt;/code&gt; / &lt;code&gt;system_replace_state&lt;/code&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="69380207c6ab51bed60a573747a7210de399af73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is taken from the return value of &lt;code&gt;Module:init/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;Module:init/1&lt;/code&gt; 의 반환 값에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="dbff9f5d0fe23afcc10e93052c871132b2e25b7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the current state and it can not be changed since the state callback was called with a &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter call&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 현재 상태이며 상태 콜백이 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter call&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 로 호출되었으므로 변경할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="7b366a8bb94d366ae998f699d4348d15e980f295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the current state and it cannot be changed since the state callback was called with a &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter call&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 현재 상태이며 상태 콜백이 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter call&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 로 호출되었으므로 변경할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="30b3ca99e842468ff3033339687091bf2713ccea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the initial value of the &lt;code&gt;hash_state&lt;/code&gt;&lt;code&gt;frag_property&lt;/code&gt;. &lt;code&gt;NewState&lt;/code&gt; is stored as &lt;code&gt;hash_state&lt;/code&gt; among the other &lt;code&gt;frag_properties&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;hash_state&lt;/code&gt; &lt;code&gt;frag_property&lt;/code&gt; 의 초기 값입니다 . &lt;code&gt;NewState&lt;/code&gt; 는 다른 &lt;code&gt;frag_properties&lt;/code&gt; 중에서 &lt;code&gt;hash_state&lt;/code&gt; 로 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="996d9c9a4872bf62e78f107c015e689bc1b8d0ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the internal state of the &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;gen_server&lt;/code&gt; 프로세스 의 내부 상태입니다 .</target>
        </trans-unit>
        <trans-unit id="a6737dac939a5f9ad754a2a6bf6d7937bf98777f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the internal state of the event handler.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 이벤트 핸들러의 내부 상태입니다.</target>
        </trans-unit>
        <trans-unit id="746a7ecddba0be1c419cf1cce649c2ad5e63e6bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the new server state.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 새 서버 상태입니다.</target>
        </trans-unit>
        <trans-unit id="a3bcd2ae61bd0fb2c7380211754420270318f0bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the return value of &lt;code&gt;Module:prep_stop/1&lt;/code&gt;, if such a function exists. Otherwise &lt;code&gt;State&lt;/code&gt; is taken from the return value of &lt;code&gt;Module:start/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 해당 함수가 존재하는 경우 &lt;code&gt;Module:prep_stop/1&lt;/code&gt; 의 리턴 값입니다 . 그렇지 않으면 &lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;Module:start/2&lt;/code&gt; 의 반환 값에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="722588208aad94e2ed67ae619208ebeab6fff31d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt; is the state returned from &lt;code&gt;Module:start/2&lt;/code&gt;, or &lt;code&gt;[]&lt;/code&gt; if no state was returned. &lt;code&gt;NewState&lt;/code&gt; is any term and is passed to &lt;code&gt;Module:stop/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;Module:start/2&lt;/code&gt; 에서 반환 된 상태 이거나 상태가 반환되지 않은 경우 &lt;code&gt;[]&lt;/code&gt; 입니다. &lt;code&gt;NewState&lt;/code&gt; 는 임의의 용어이며 &lt;code&gt;Module:stop/1&lt;/code&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="45410ce12fd3a406f075bd0bc7474e6f3a70fdfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, and &lt;code&gt;Actions&lt;/code&gt; have the same meanings as in the return value of &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt;. Also, the callback module does not need to export a &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; , &lt;code&gt;Data&lt;/code&gt; 및 &lt;code&gt;Actions&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 의 반환 값에서와 같은 의미를 갖습니다 . 또한 콜백 모듈은 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 함수 를 내보낼 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ed898633e0b796d617d31d1d104b00d909616e85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StateType&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;#type-state_name&quot;&gt;state_name()&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;state_functions&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;handle_event_function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StateType&lt;/code&gt; 있다 &lt;code&gt;&lt;a href=&quot;#type-state_name&quot;&gt;state_name()&lt;/a&gt;&lt;/code&gt; 경우 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 이다 &lt;code&gt;state_functions&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 경우 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 이다 &lt;code&gt;handle_event_function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5f63ed6c6936ead90f330465aea0f55c09ab105f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Status&lt;/code&gt; - Current status of the process.</source>
          <target state="translated">&lt;code&gt;Status&lt;/code&gt; -프로세스의 현재 상태입니다.</target>
        </trans-unit>
        <trans-unit id="170ce0967ff947ea5a10aead434443240f773ef3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;ok&lt;/code&gt; or &lt;code&gt;{blocked, QueueLogRecords}&lt;/code&gt; as set by functions &lt;code&gt;block/1,2&lt;/code&gt; and &lt;code&gt;unblock/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Status&lt;/code&gt; 인 &lt;code&gt;ok&lt;/code&gt; 또는 &lt;code&gt;{blocked, QueueLogRecords}&lt;/code&gt; 함수에 의해 설정된대로 &lt;code&gt;block/1,2&lt;/code&gt; 및 &lt;code&gt;unblock/1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b8bcaa8bb6507ea1f20e9ee1d70768cbe631715c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Status&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Status&lt;/code&gt; 는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="4a2b6157b18349a36e34c8cd6ec50e943ece38b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Status&lt;/code&gt; is the status of the process and is one of the following:</source>
          <target state="translated">&lt;code&gt;Status&lt;/code&gt; 는 프로세스의 상태이며 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="5399f53770272c1cc5555cafcf7ab1ae7a34f976" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Status&lt;/code&gt; must be a non-negative integer, a string, or the atom &lt;code&gt;abort&lt;/code&gt;. Halts the Erlang runtime system. Has no return value. Depending on &lt;code&gt;Status&lt;/code&gt;, the following occurs:</source>
          <target state="translated">&lt;code&gt;Status&lt;/code&gt; 는 음이 아닌 정수, 문자열 또는 원자 &lt;code&gt;abort&lt;/code&gt; 이어야합니다 . Erlang 런타임 시스템을 정지시킵니다. 반환 값이 없습니다. 에 따라 &lt;code&gt;Status&lt;/code&gt; , 다음이 발생합니다 :</target>
        </trans-unit>
        <trans-unit id="bb02a540b6d90a0e88da0858e0c65318c29eb839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strategy&lt;/code&gt; affects only the compression ratio, but not the correctness of the compressed output even if it is not set appropriately.</source>
          <target state="translated">&lt;code&gt;Strategy&lt;/code&gt; 은 압축 비율에만 영향을 주지만 압축 출력이 적절하게 설정되지 않더라도 정확성에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="76d0f1ce8eb35d4b21b455ba531cd0268cb96c2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Streams&lt;/code&gt; is a list of stream names. The following filter is sent to the NETCONF server in a &lt;code&gt;get&lt;/code&gt; request:</source>
          <target state="translated">&lt;code&gt;Streams&lt;/code&gt; 은 스트림 이름 목록입니다. 다음 필터는 &lt;code&gt;get&lt;/code&gt; 요청으로 NETCONF 서버로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="e1ba17dd03e055396af3d769d1c2cf0c7aa319a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stubs&lt;/code&gt; contains one entry for each exported input module (cf. the &lt;code&gt;export&lt;/code&gt; option), each entry describing a stub module that redirects calls of functions in the original module to the corresponding (possibly renamed) functions in the new module. The stub descriptors can be used to automatically generate stub modules; see &lt;code&gt;create_stubs/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Stubs&lt;/code&gt; 에는 각 내 보낸 입력 모듈 (참조 : &lt;code&gt;export&lt;/code&gt; 옵션)에 대한 하나의 항목이 포함되며 , 각 항목은 원래 모듈의 함수 호출을 새 모듈의 해당 (이름이 바뀐) 함수로 리디렉션하는 스텁 모듈을 설명합니다. 스텁 디스크립터를 사용하여 스텁 모듈을 자동으로 생성 할 수 있습니다. &lt;code&gt;create_stubs/2&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="524ba3ef3d1645f35a4bf0db5083cae1efd640dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SubType&lt;/code&gt; depends on the MAC &lt;code&gt;Type&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;SubType&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; 은 MAC 유형 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="13276b86e27394ec8c39f39146c552ab267a13db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Suite = atom()&lt;/code&gt;, name of the suite.</source>
          <target state="translated">&lt;code&gt;Suite = atom()&lt;/code&gt; , 스위트 이름.</target>
        </trans-unit>
        <trans-unit id="6aa4ee9e9d97d355c50f19483f0d0999058f3269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Suite = atom()&lt;/code&gt;, name of the test suite.</source>
          <target state="translated">&lt;code&gt;Suite = atom()&lt;/code&gt; , 테스트 스위트의 이름.</target>
        </trans-unit>
        <trans-unit id="691f6e7c47630175a8057bcd1a62d13c8d255314" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Suite = atom()&lt;/code&gt;, the name of the suite.</source>
          <target state="translated">&lt;code&gt;Suite = atom()&lt;/code&gt; , 스위트 이름입니다.</target>
        </trans-unit>
        <trans-unit id="468ccfa0b55d2b206b7acb6b5e659cd07695a747" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SuiteName&lt;/code&gt; is the name of the suite to be run.</source>
          <target state="translated">&lt;code&gt;SuiteName&lt;/code&gt; 은 실행할 스위트 이름입니다.</target>
        </trans-unit>
        <trans-unit id="11e72995c16089c33b28c8766ac3c89c3ccf2c44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Suites = integer()&lt;/code&gt;, total number of suites.</source>
          <target state="translated">&lt;code&gt;Suites = integer()&lt;/code&gt; , 총 스위트 수입니다.</target>
        </trans-unit>
        <trans-unit id="41f18704f194ca335a6e4e871bface89cbd6bf8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sup&lt;/code&gt; is the pid, or name, of the supervisor and &lt;code&gt;Pid&lt;/code&gt; is the pid of the child.</source>
          <target state="translated">&lt;code&gt;Sup&lt;/code&gt; 는 감독자의 pid 또는 이름이며 &lt;code&gt;Pid&lt;/code&gt; 는 어린이의 pid입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
