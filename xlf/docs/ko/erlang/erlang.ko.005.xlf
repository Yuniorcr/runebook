<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="afc5c6080141465fcafeeef615a30ef4d6eed1a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length : integer&lt;/code&gt; :: Async queue length. Ex. &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;length : integer&lt;/code&gt; :: 비동기 대기열 길이. 전의. &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="031b6f26da3f37178c8c4740ef267aec1a691654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib&lt;/code&gt; - Application directories</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; - 응용 프로그램 디렉토리</target>
        </trans-unit>
        <trans-unit id="2a4f8d53fb0ae82e919ce51996fe4ba629c04004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;library_path&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;#library_path&quot;&gt;library path&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;library_path&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#library_path&quot;&gt;library path&lt;/a&gt;&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="eaef050de46766049525e30b626f851658013532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line&lt;/code&gt; - Line mode, a packet is a line-terminated with newline, lines longer than the receive buffer are truncated</source>
          <target state="translated">&lt;code&gt;line&lt;/code&gt; - 회선 모드, 패킷은 개행으로 끝나는 행이며 수신 버퍼보다 ​​긴 행은 잘립니다.</target>
        </trans-unit>
        <trans-unit id="9790f41088482266e752413781e0ffe00199475f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list()&lt;/code&gt; - The one given as argument to function &lt;code&gt;subsystem_spec/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list()&lt;/code&gt; &lt;code&gt;subsystem_spec/1&lt;/code&gt; 함수에 인수로 제공된 것 입니다.</target>
        </trans-unit>
        <trans-unit id="8a7718bab464f8ceacbe2b50a1165970a64023b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing a list.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 목록 을 포함하는 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="726a4da1d64ef4b3b69b2ea4714bcdd39c26c4b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing a proper list. In a proper list, all tails except the last point to another list cell, and the last tail points to an empty list.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 적절한 목록을 포함하는 Erlang 용어입니다. 올바른 목록에서 마지막 꼬리를 제외한 모든 꼬리는 다른 목록 셀을 가리키고 마지막 꼬리는 빈 목록을 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="3a18e9029c5b8737849184d7fa1445abea54500c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing an I/O list.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 I / O 목록을 포함하는 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="be5f65fbdbd15a19650c5680eb95cc7ff30b8e07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing an I/O list. The I/O list must not contain the integer 0, as C strings may not contain this value except as a terminating marker.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 I / O 목록을 포함하는 Erlang 용어입니다. I / O 목록에는 정수 0이 포함되어서는 안됩니다. C 문자열은 종료 표시 자로 제외하고이 값을 포함 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1ff60fee6c0558227a68fafe4201fffd5289ccfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_auth_users/1&lt;/code&gt;, &lt;code&gt;list_auth_users/2&lt;/code&gt;, and &lt;code&gt;list_auth_users/3&lt;/code&gt; each returns a list of users that are currently authenticated. Authentications are stored for &lt;code&gt;SecurityAuthTimeout&lt;/code&gt; seconds, and then discarded.</source>
          <target state="translated">&lt;code&gt;list_auth_users/1&lt;/code&gt; , &lt;code&gt;list_auth_users/2&lt;/code&gt; 및 &lt;code&gt;list_auth_users/3&lt;/code&gt; 는 각각 현재 인증 된 사용자 목록을 리턴합니다. 인증은 &lt;code&gt;SecurityAuthTimeout&lt;/code&gt; 초 동안 저장된 후 폐기됩니다.</target>
        </trans-unit>
        <trans-unit id="5acfd7019e137b4cdc2774dc25661afca35ffbef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_blocked_users/1&lt;/code&gt;, &lt;code&gt;list_blocked_users/2&lt;/code&gt;, and &lt;code&gt;list_blocked_users/3&lt;/code&gt; each returns a list of users that are currently blocked from access.</source>
          <target state="translated">&lt;code&gt;list_blocked_users/1&lt;/code&gt; , &lt;code&gt;list_blocked_users/2&lt;/code&gt; 및 &lt;code&gt;list_blocked_users/3&lt;/code&gt; 는 각각 현재 액세스가 차단 된 사용자 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8fa5a48c1d351eb3391bd3d93f9d211ac75dc2d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_dir/1&lt;/code&gt; retrieves all filenames in the zip archive &lt;code&gt;Archive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list_dir/1&lt;/code&gt; 은 zip 아카이브 &lt;code&gt;Archive&lt;/code&gt; 에서 모든 파일 이름을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="a4ce3ce5745733f123cf322f55e9ef14e233b7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_dir/2&lt;/code&gt; provides options.</source>
          <target state="translated">&lt;code&gt;list_dir/2&lt;/code&gt; 는 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f53ab94d5ba9db56fa66c8232d30db5fa6547050" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_group_members/2, list_group_members/3&lt;/code&gt;, and &lt;code&gt;list_group_members/4&lt;/code&gt; each lists the members of a specified group. If the group does not exist or there is an error, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;list_group_members/2&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;list_group_members/2, list_group_members/3&lt;/code&gt; 및 &lt;code&gt;list_group_members/4&lt;/code&gt; 는 각각 지정된 그룹의 구성원을 나열합니다. 그룹이 존재하지 않거나 오류가 있으면 &lt;code&gt;{error, Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;list_group_members/2&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="18d59539d0fef19e0d714af933d9eefa77a0818d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_groups/1, list_groups/2&lt;/code&gt;, and &lt;code&gt;list_groups/3&lt;/code&gt; each lists all the groups available. If there is an error, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;list_groups/1&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;list_groups/1, list_groups/2&lt;/code&gt; 및 &lt;code&gt;list_groups/3&lt;/code&gt; 는 각각 사용 가능한 모든 그룹을 나열합니다. 오류가 있으면 &lt;code&gt;{error, Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;list_groups/1&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="7c79260e7f4c22a26aa9f665a18df6729efbe233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_users/1, list_users/2&lt;/code&gt;, and &lt;code&gt;list_users/3&lt;/code&gt; each returns a list of users in the user database for a specific &lt;code&gt;Port/Dir&lt;/code&gt;. When &lt;code&gt;list_users/1&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;list_users/1, list_users/2&lt;/code&gt; 및 &lt;code&gt;list_users/3&lt;/code&gt; 는 각각 특정 &lt;code&gt;Port/Dir&lt;/code&gt; 에 대한 사용자 데이터베이스의 사용자 목록을 리턴합니다 . 때 &lt;code&gt;list_users/1&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="7e6cad36a8a85579416bf1628b19e45d5eefb715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listen/1&lt;/code&gt; is called once in order to listen for incoming connection requests. The call is made when the distribution is brought up. The argument &lt;code&gt;Name&lt;/code&gt; is the part of the node name before the &lt;code&gt;@&lt;/code&gt; sign in the full node name. It can be either an atom or a string.</source>
          <target state="translated">&lt;code&gt;listen/1&lt;/code&gt; 수신 연결 요청을 청취하기 위해 listen / 1 이 한 번 호출됩니다. 분배가 이루어지면 호출이 이루어집니다. 인수 &lt;code&gt;Name&lt;/code&gt; 전과 노드 이름의 일부입니다 &lt;code&gt;@&lt;/code&gt; 의 전체 노드 이름에 로그인합니다. 원자 또는 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e729638f4b8bc65d2899f07acdd484626a244e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listen/2&lt;/code&gt; is called once in order to listen for incoming connection requests. The call is made when the distribution is brought up. The argument &lt;code&gt;Name&lt;/code&gt; is the part of the node name before the &lt;code&gt;@&lt;/code&gt; sign in the full node name. It can be either an atom or a string. The argument &lt;code&gt;Host&lt;/code&gt; is the part of the node name after the &lt;code&gt;@&lt;/code&gt; sign in the full node name. It is always a string.</source>
          <target state="translated">&lt;code&gt;listen/2&lt;/code&gt; 수신 연결 요청을 수신하기 위해 listen / 2 가 한 번 호출됩니다. 분배가 제기되면 호출이 이루어집니다. &lt;code&gt;Name&lt;/code&gt; 인수 는 전체 노드 이름에서 &lt;code&gt;@&lt;/code&gt; 기호 앞의 노드 이름 부분입니다 . 원자 또는 문자열 일 수 있습니다. &lt;code&gt;Host&lt;/code&gt; 인수 는 전체 노드 이름에서 &lt;code&gt;@&lt;/code&gt; 기호 뒤의 노드 이름 부분입니다 . 항상 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="3390bea1740da3235aebc0537125e1e385dc069f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listensock&lt;/code&gt; is an open socket descriptor on which &lt;code&gt;listen()&lt;/code&gt; has previously been called.</source>
          <target state="translated">&lt;code&gt;listensock&lt;/code&gt; 은 &lt;code&gt;listen()&lt;/code&gt; 이 이전에 호출 된 개방 소켓 설명자입니다 .</target>
        </trans-unit>
        <trans-unit id="93ca30f0b36fd9439a8c607bf40abd0dde1401b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:append(A, B)&lt;/code&gt; is equivalent to &lt;code&gt;A ++ B&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lists:append(A, B)&lt;/code&gt; 는 &lt;code&gt;A ++ B&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="cd0e2167b19a98d558382b7069180326cf81741b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:flatten/1&lt;/code&gt; builds an entirely new list. It is therefore expensive, and even &lt;strong&gt;more&lt;/strong&gt; expensive than the &lt;code&gt;++&lt;/code&gt; operator (which copies its left argument, but not its right argument).</source>
          <target state="translated">&lt;code&gt;lists:flatten/1&lt;/code&gt; 은 완전히 새로운 목록을 만듭니다. 따라서 &lt;code&gt;++&lt;/code&gt; 연산자 &lt;strong&gt;보다&lt;/strong&gt; 값이 비싸고 훨씬 비쌉니다 (왼쪽 인수는 복사하지만 오른쪽 인수는 복사하지 않음).</target>
        </trans-unit>
        <trans-unit id="2fc30df23df0d4aae69fe65f114fd554b7fccaaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:keydelete&lt;/code&gt; works in the same way but deletes the first tuple found (if any) and returns the remaining list:</source>
          <target state="translated">&lt;code&gt;lists:keydelete&lt;/code&gt; 는 같은 방식으로 작동하지만 발견 된 첫 번째 튜플 (있는 경우)을 삭제하고 나머지 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f4eb825c0ab4a344284bd22859baffe203e6edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:keysearch&lt;/code&gt; is like &lt;code&gt;lists:keymember&lt;/code&gt;, but it returns &lt;code&gt;{value,Tuple_Found}&lt;/code&gt; or the atom &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lists:keysearch&lt;/code&gt; 는 &lt;code&gt;lists:keymember&lt;/code&gt; 와 비슷하지만 &lt;code&gt;{value,Tuple_Found}&lt;/code&gt; 또는 atom &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e11c251dfb860431b23cc06d48025147f0ce53f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:subtract(A, B)&lt;/code&gt; is equivalent to &lt;code&gt;A -- B&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lists:subtract(A, B)&lt;/code&gt; 는 &lt;code&gt;A -- B&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="3e66636fc0a180beb50c9d8299fb3e8f7cda2095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;literal_alloc&lt;/code&gt; super carrier size (in MB). The amount of &lt;strong&gt;virtual&lt;/strong&gt; address space reserved for literal terms in Erlang code on 64-bit architectures. Defaults to &lt;code&gt;1024&lt;/code&gt; (that is, 1 GB), which is usually sufficient. The flag is ignored on 32-bit architectures.</source>
          <target state="translated">&lt;code&gt;literal_alloc&lt;/code&gt; 수퍼 캐리어 크기 (MB). 의 양을 &lt;strong&gt;가상&lt;/strong&gt; 주소 공간은 64 비트 아키텍처에 얼랑 코드에서 리터럴 용어를 소유. 기본값은 &lt;code&gt;1024&lt;/code&gt; (즉 1GB)로 충분합니다. 32 비트 아키텍처에서는 플래그가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d54c2beccdcdadf7b8b8e9e5d5d92fd60ac7d4ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load&lt;/code&gt; is called when the NIF library is loaded and no previously loaded library exists for this module.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; NIF 라이브러리가로드되고이 모듈에 대해 이전에로드 된 라이브러리가 없을 때 load 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="99e9f90b11036e44681cbe3af66054d11205eaec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load&lt;/code&gt;, &lt;code&gt;upgrade&lt;/code&gt; and &lt;code&gt;unload&lt;/code&gt; are pointers to functions. One of &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt; is called to initialize the library. &lt;code&gt;unload&lt;/code&gt; is called to release the library. All are described individually below.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; , &lt;code&gt;upgrade&lt;/code&gt; 및 &lt;code&gt;unload&lt;/code&gt; 는 함수를 가리키는 포인터입니다. 라이브러리를 초기화하기 위해 &lt;code&gt;load&lt;/code&gt; 또는 &lt;code&gt;upgrade&lt;/code&gt; 중 하나 가 호출됩니다. 라이브러리를 해제하기 위해 &lt;code&gt;unload&lt;/code&gt; 가 호출됩니다. 모두 아래에 개별적으로 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="04f795031c0a3191dc6833462193ff8535894cb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_info&lt;/code&gt; is the second argument to &lt;code&gt;&lt;a href=&quot;erlang#load_nif-2&quot;&gt;erlang:load_nif/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;load_info&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;erlang#load_nif-2&quot;&gt;erlang:load_nif/2&lt;/a&gt;&lt;/code&gt; 의 두 번째 인수 입니다.</target>
        </trans-unit>
        <trans-unit id="aff9e8cdbf9e030064b2b7fe81a987f154b034d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_node&lt;/code&gt;. Returns the name of the node that Mnesia loaded the table from. The structure of the returned value is unspecified, but can be useful for debugging purposes.</source>
          <target state="translated">&lt;code&gt;load_node&lt;/code&gt; . Mnesia가 테이블을로드 한 노드의 이름을 리턴합니다. 반환 된 값의 구조는 지정되지 않았지만 디버깅 목적으로 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a643fb5182da0ca35ae74da8a11c5192585d1561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_order&lt;/code&gt;. Returns the load order priority of the table. It is an integer and defaults to &lt;code&gt;0&lt;/code&gt; (zero).</source>
          <target state="translated">&lt;code&gt;load_order&lt;/code&gt; . 테이블의로드 순서 우선 순위를 리턴합니다. 정수이며 기본값은 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="24aaff6b3ceaf8f7959a64ecaf82f686d9c3c0fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_reason&lt;/code&gt;. Returns the reason of why Mnesia decided to load the table. The structure of the returned value is unspecified, but can be useful for debugging purposes.</source>
          <target state="translated">&lt;code&gt;load_reason&lt;/code&gt; . Mnesia가 테이블을로드하기로 결정한 이유를 리턴합니다. 반환 된 값의 구조는 지정되지 않았지만 디버깅 목적으로 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45ed93e5123c7e83801fb2528f0aa02733e06e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt; is an option that means that the directories where the applications are found are used in the boot script, instead of &lt;code&gt;$ROOT/lib&lt;/code&gt; (&lt;code&gt;$ROOT&lt;/code&gt; is the root directory of the installed release).</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; 은 응용 프로그램이있는 디렉토리가 &lt;code&gt;$ROOT/lib&lt;/code&gt; 대신 부트 스크립트에서 사용됨을 의미하는 옵션입니다 ( &lt;code&gt;$ROOT&lt;/code&gt; 는 설치된 릴리스의 루트 디렉토리입니다).</target>
        </trans-unit>
        <trans-unit id="182486b044d3d61e0e4eb3eba30d58307f59efbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt; is returned if only parts of the application are restarted (by a supervisor), or if the function is called outside a startup.</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; 응용 프로그램의 일부만 (감독자에 의해) 다시 시작되거나 함수가 시작 외부에서 호출 된 경우 local 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8803b8be9dd903808934ee41a2901394e37636cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_content&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to indicate if the table is configured to have locally unique content on each node.</source>
          <target state="translated">&lt;code&gt;local_content&lt;/code&gt; . 테이블이 각 노드에 로컬로 고유 한 내용을 갖도록 구성되어 있는지 표시하려면 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="24e5e058c6b2dcae03991ec71d8aa2c47c7d3153" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_content&lt;/code&gt;. When an application requires tables whose contents are local to each node, &lt;code&gt;local_content&lt;/code&gt; tables can be used. The table name is known to all Mnesia nodes, but its content is unique on each node. This means that access to such a table must be done locally. Set field &lt;code&gt;local_content&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to enable the &lt;code&gt;local_content&lt;/code&gt; behavior. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;local_content&lt;/code&gt; . 어플리케이션이 각 노드에 대해 로컬 인 컨텐츠를 갖는 테이블이 필요한 경우 &lt;code&gt;local_content&lt;/code&gt; 테이블을 사용할 수 있습니다. 테이블 이름은 모든 Mnesia 노드에 알려져 있지만 그 내용은 각 노드에서 고유합니다. 이는 해당 테이블에 대한 액세스가 로컬로 수행되어야 함을 의미합니다. 설정 필드 &lt;code&gt;local_content&lt;/code&gt; 에 &lt;code&gt;true&lt;/code&gt; 에이블하는 &lt;code&gt;local_content&lt;/code&gt; 의 동작을. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3a5f52568d19693d798aaa7dde969e33e5993d63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_tables&lt;/code&gt;. Returns a list of all tables that are configured to reside locally.</source>
          <target state="translated">&lt;code&gt;local_tables&lt;/code&gt; . 로컬로 상주하도록 구성된 모든 테이블의 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3105149e9ac8a04e76c7b0fb03db073b4ea51a3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; specifies whether &lt;code&gt;Mnesia&lt;/code&gt; is to acquire a read or write lock on the table.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 은 &lt;code&gt;Mnesia&lt;/code&gt; 가 테이블에서 읽기 또는 쓰기 잠금을 획득 할 것인지 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="47c000df4e030c56062201fa1e4645513ad3cf9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock_queue&lt;/code&gt;. Returns a list of all transactions that are queued for execution by the local lock manager.</source>
          <target state="translated">&lt;code&gt;lock_queue&lt;/code&gt; . 로컬 잠금 관리자가 실행을 위해 대기중인 모든 트랜잭션 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7463dfc2a0b31257f39f7c17f060afc5fec85e75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log/2&lt;/code&gt; is used for internally formatted logs, and &lt;code&gt;blog/2&lt;/code&gt; for externally formatted logs. &lt;code&gt;blog/2&lt;/code&gt; can also be used for internally formatted logs if the binary is constructed with a call to &lt;code&gt; term_to_binary/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log/2&lt;/code&gt; 는 내부 형식 로그에 사용되며 &lt;code&gt;blog/2&lt;/code&gt; 는 외부 형식 로그에 사용됩니다. 바이너리가 &lt;code&gt; term_to_binary/1&lt;/code&gt; 에 대한 호출로 구성된 경우 &lt;code&gt;blog/2&lt;/code&gt; 는 내부 형식의 로그에도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dfc11c648eda5a7d9fdd3f797b74aafa254dfc21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log/2&lt;/code&gt; is used for internally formatted logs, and &lt;code&gt;blog/2&lt;/code&gt; for externally formatted logs. &lt;code&gt;blog/2&lt;/code&gt; can also be used for internally formatted logs if the binary is constructed with a call to &lt;code&gt;term_to_binary/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log/2&lt;/code&gt; 는 내부 형식의 로그에 사용되고 &lt;code&gt;blog/2&lt;/code&gt; 는 외부 형식의 로그에 사용됩니다. 바이너리가 &lt;code&gt;term_to_binary/1&lt;/code&gt; 에 대한 호출로 구성된 경우 &lt;code&gt;blog/2&lt;/code&gt; 는 내부 형식의 로그에도 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35f86282b4a84e4c8c3d37ec0a3d441cd2b85619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_dir&lt;/code&gt; is where the log files are written.</source>
          <target state="translated">&lt;code&gt;log_dir&lt;/code&gt; 은 로그 파일이 작성되는 위치입니다.</target>
        </trans-unit>
        <trans-unit id="28db9ed3d3a69799b455200ff83296da0c3d5853" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_terms/2&lt;/code&gt; is used for internally formatted logs, and &lt;code&gt;blog_terms/2&lt;/code&gt; for externally formatted logs. &lt;code&gt;blog_terms/2&lt;/code&gt; can also be used for internally formatted logs if the binaries are constructed with calls to &lt;code&gt; term_to_binary/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log_terms/2&lt;/code&gt; 는 내부 형식 로그에 사용되며 &lt;code&gt;blog_terms/2&lt;/code&gt; 는 외부 형식 로그에 사용됩니다. 바이너리가 &lt;code&gt; term_to_binary/1&lt;/code&gt; 에 대한 호출로 구성된 경우 &lt;code&gt;blog_terms/2&lt;/code&gt; 를 내부 형식의 로그에도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="995e2d2521421390d9a06c23bfa3a101cfb1b278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_terms/2&lt;/code&gt; is used for internally formatted logs, and &lt;code&gt;blog_terms/2&lt;/code&gt; for externally formatted logs. &lt;code&gt;blog_terms/2&lt;/code&gt; can also be used for internally formatted logs if the binaries are constructed with calls to &lt;code&gt;term_to_binary/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log_terms/2&lt;/code&gt; 는 내부 형식의 로그에 사용되고 &lt;code&gt;blog_terms/2&lt;/code&gt; 는 외부 형식의 로그에 사용됩니다. 바이너리가 &lt;code&gt;term_to_binary/1&lt;/code&gt; 에 대한 호출로 구성된 경우 &lt;code&gt;blog_terms/2&lt;/code&gt; 는 내부 형식화 된 로그에도 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="23529896ccb5d645b44d285439cb214a836bfc9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_version&lt;/code&gt;. Returns the version number of the Mnesia transaction log format.</source>
          <target state="translated">&lt;code&gt;log_version&lt;/code&gt; . Mnesia 트랜잭션 로그 형식의 버전 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3dcb31be04290d5acce7d33cd9a0cee64c351d93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logger_formatter&lt;/code&gt; is the default formatter used by Logger.</source>
          <target state="translated">&lt;code&gt;logger_formatter&lt;/code&gt; 는 로거에서 사용하는 기본 포맷터입니다.</target>
        </trans-unit>
        <trans-unit id="d273bde00c44f84e57b534c9ee265abf11e0eb98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookup&lt;/code&gt; extracts &lt;code&gt;{Key,Value}&lt;/code&gt; tuples from &lt;code&gt;ETSTable&lt;/code&gt; and returns the &lt;code&gt;Value&lt;/code&gt; associated with &lt;code&gt;Key&lt;/code&gt;. If &lt;code&gt;ETSTable&lt;/code&gt; is of type &lt;code&gt;bag&lt;/code&gt;, only the first &lt;code&gt;Value&lt;/code&gt; associated with &lt;code&gt;Key&lt;/code&gt; is returned. &lt;code&gt;lookup/2&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;lookup/3&lt;/code&gt; returns &lt;code&gt;Undefined&lt;/code&gt; if no &lt;code&gt;Value&lt;/code&gt; is found.</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; 추출물 &lt;code&gt;{Key,Value}&lt;/code&gt; 튜플에서 &lt;code&gt;ETSTable&lt;/code&gt; 및 반환 &lt;code&gt;Value&lt;/code&gt; 과 관련된 &lt;code&gt;Key&lt;/code&gt; . 경우 &lt;code&gt;ETSTable&lt;/code&gt; 는 타입입니다 &lt;code&gt;bag&lt;/code&gt; , 첫 번째 &lt;code&gt;Value&lt;/code&gt; 과 관련된 &lt;code&gt;Key&lt;/code&gt; 반환됩니다. &lt;code&gt;lookup/2&lt;/code&gt; 는 &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;Value&lt;/code&gt; 반환 하고 &lt;code&gt;lookup/3&lt;/code&gt; 는 값 이 없으면 &lt;code&gt;Undefined&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eb86b8f77b9b208e6a11d12b37271d4c192f67f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookup_mime&lt;/code&gt; returns the MIME type associated with a specific file suffix as specified in the file &lt;code&gt;mime.types&lt;/code&gt; (located in the config directory).</source>
          <target state="translated">&lt;code&gt;lookup_mime&lt;/code&gt; 은 &lt;code&gt;mime.types&lt;/code&gt; 파일 (config 디렉토리에 있음)에 지정된 특정 파일 접미사와 관련된 MIME 유형을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c90fbcda6ae10bb657658395cb0d63bc3c4582c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookup_mime_default&lt;/code&gt; returns the MIME type associated with a specific file suffix as specified in the &lt;code&gt;mime.types&lt;/code&gt; file (located in the config directory). If no appropriate association is found, the value of &lt;code&gt;DefaultType&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;lookup_mime_default&lt;/code&gt; 는 &lt;code&gt;mime.types&lt;/code&gt; 파일 (config 디렉토리에 있음)에 지정된 특정 파일 접미사와 연관된 MIME 유형을 반환합니다 . 적절한 연관이 없으면 &lt;code&gt;DefaultType&lt;/code&gt; 값 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="3dfec20f4c61fd18fa24269ea42272c9fc181327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;low_entropy&lt;/code&gt;: the random generator failed due to lack of secure &quot;randomness&quot;,</source>
          <target state="translated">&lt;code&gt;low_entropy&lt;/code&gt; : 안전한 &quot;무작위성&quot;부족으로 인해 랜덤 생성기가 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="61f5cddd2234c71cd616f814453f29c2cac4203d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls/1&lt;/code&gt; implies the current remote directory of the user.</source>
          <target state="translated">&lt;code&gt;ls/1&lt;/code&gt; 은 사용자의 현재 원격 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="86263d48661c7d702923e5fea293faecb2b162c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m/1&lt;/code&gt; is also suitable for checking that the BEAM file of a module that is about to be loaded into a running a system does not call any undefined functions. In either case, the code path of the code server (see the module &lt;code&gt;code&lt;/code&gt;) is used for finding modules that export externally called functions not exported by the checked module itself, so called &lt;code&gt;&lt;a href=&quot;xref#library_module&quot;&gt;library modules&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;m/1&lt;/code&gt; 은 또한 실행중인 시스템에로드 될 모듈의 BEAM 파일이 정의되지 않은 함수를 호출하지 않는지 확인하는 데에도 적합합니다. 두 경우 모두, 코드 서버의 코드 경로 (모듈 &lt;code&gt;code&lt;/code&gt; 참조 )는 검사 된 모듈 자체에서 내 보내지 않은 외부 호출 함수 ( &lt;code&gt;&lt;a href=&quot;xref#library_module&quot;&gt;library modules&lt;/a&gt;&lt;/code&gt; 이라고 함)를 내보내는 모듈을 찾는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="df9537a65ebbc229094f9e153efaf34118a0a025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m1&lt;/code&gt; is dependent on &lt;code&gt;ch3&lt;/code&gt; also when downgrading. &lt;code&gt;systools&lt;/code&gt; knows the difference between up- and downgrading and generates a correct &lt;code&gt;relup&lt;/code&gt;, where &lt;code&gt;ch3&lt;/code&gt; is loaded before &lt;code&gt;m1&lt;/code&gt; when upgrading, but &lt;code&gt;m1&lt;/code&gt; is loaded before &lt;code&gt;ch3&lt;/code&gt; when downgrading.</source>
          <target state="translated">&lt;code&gt;m1&lt;/code&gt; 다운 그레이드 할 때 m1 은 &lt;code&gt;ch3&lt;/code&gt; 에 의존합니다 . &lt;code&gt;systools&lt;/code&gt; 상향 및 하향의 차이를 알고 정확한 생성 &lt;code&gt;relup&lt;/code&gt; , &lt;code&gt;ch3&lt;/code&gt; 전에로드 &lt;code&gt;m1&lt;/code&gt; 업그레이드하지만 때 &lt;code&gt;m1&lt;/code&gt; 전에로드 &lt;code&gt;ch3&lt;/code&gt; 때 하향 조정한다.</target>
        </trans-unit>
        <trans-unit id="be74c7b55753734ee046ceff4ef299316ae01ad4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;major : integer&lt;/code&gt; :: Major version. Ex. &lt;code&gt;3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;major : integer&lt;/code&gt; :: Major 버전. 전의. &lt;code&gt;3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e5f4e2011f683da4cdaf06fa133ff71c470850c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;majority&lt;/code&gt;. This attribute is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;; default is &lt;code&gt;false&lt;/code&gt;. When &lt;code&gt;true&lt;/code&gt;, a majority of the table replicas must be available for an update to succeed. Majority checking can be enabled on tables with mission-critical data, where it is vital to avoid inconsistencies because of network splits.</source>
          <target state="translated">&lt;code&gt;majority&lt;/code&gt; . 이 속성은 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 입니다 . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 때 &lt;code&gt;true&lt;/code&gt; 업데이트가 성공하기 위해서는, 테이블 복제본의 대부분은 사용할 수 있어야합니다. 미션 크리티컬 한 데이터가있는 테이블에서 다수 검사를 활성화 할 수 있으며, 네트워크 분할로 인한 불일치를 피하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="f325d85c7b8a9fe60e4ce65f1b1b9a5d59c1afcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make install&lt;/code&gt; will install at a location specified when doing &lt;code&gt;configure&lt;/code&gt;. &lt;code&gt;configure&lt;/code&gt; arguments specifying where the installation should reside are for example: &lt;code&gt;--prefix&lt;/code&gt;, &lt;code&gt;--exec-prefix&lt;/code&gt;, &lt;code&gt;--libdir&lt;/code&gt;, &lt;code&gt;--bindir&lt;/code&gt;, etc. By default it will install under &lt;code&gt;/usr/local&lt;/code&gt;. You typically do not want to install your cross build under &lt;code&gt;/usr/local&lt;/code&gt; on your build machine. Using &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;DESTDIR&lt;/a&gt;&lt;/code&gt; will cause the installation paths to be prefixed by &lt;code&gt;$DESTDIR&lt;/code&gt;. This makes it possible to install and package the installation on the build machine without having to place the installation in the same directory on the build machine as it should be executed from on the target machine.</source>
          <target state="translated">&lt;code&gt;make install&lt;/code&gt; 은 &lt;code&gt;configure&lt;/code&gt; 를 수행 할 때 지정된 위치에 설치 합니다 . 설치 위치를 지정하는 &lt;code&gt;configure&lt;/code&gt; 인수는 예를 들어 &lt;code&gt;--prefix&lt;/code&gt; , &lt;code&gt;--exec-prefix&lt;/code&gt; , &lt;code&gt;--libdir&lt;/code&gt; , &lt;code&gt;--bindir&lt;/code&gt; 등입니다. 기본적으로 &lt;code&gt;/usr/local&lt;/code&gt; 아래에 설치됩니다 . 일반적으로 빌드 시스템의 &lt;code&gt;/usr/local&lt;/code&gt; 아래에 크로스 빌드를 설치하지 않으려 고 합니다. &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;DESTDIR&lt;/a&gt;&lt;/code&gt; 을 사용 하면 설치 경로 앞에 &lt;code&gt;$DESTDIR&lt;/code&gt; 이 붙습니다.. 따라서 대상 시스템에서 실행해야하는 것과 동일한 디렉토리에 설치를 배치하지 않고도 빌드 시스템에 설치를 설치하고 패키징 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f6c951c6749c15435d2980eb4aa791a53af9775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make release&lt;/code&gt; will copy what you have built for the target machine to &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt;. The &lt;code&gt;Install&lt;/code&gt; script will not be run. The content of &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt; is what by default ends up in &lt;code&gt;/usr/local/lib/erlang&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make release&lt;/code&gt; 는 대상 머신을 위해 빌드 한 것을 &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt; 에 복사합니다 . &lt;code&gt;Install&lt;/code&gt; 스크립트가 실행되지 않습니다. &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt; 의 내용은 기본적으로 &lt;code&gt;/usr/local/lib/erlang&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9e66362068d2d90fa1b3b40af705bb7adc3fbdf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make:all/0,1&lt;/code&gt; and &lt;code&gt;make:files/1,2&lt;/code&gt; first looks for &lt;code&gt;{emake, Emake}&lt;/code&gt; in options, then in the current working directory for a file named &lt;code&gt;Emakefile&lt;/code&gt;. If present &lt;code&gt;Emake&lt;/code&gt; should contain elements like this:</source>
          <target state="translated">&lt;code&gt;make:all/0,1&lt;/code&gt; 및 &lt;code&gt;make:files/1,2&lt;/code&gt; 는 먼저 옵션에서 &lt;code&gt;{emake, Emake}&lt;/code&gt; 를 찾은 다음 현재 작업 디렉토리에서 이름이 &lt;code&gt;Emakefile&lt;/code&gt; 인 파일을 찾습니다 . 존재하는 경우 &lt;code&gt;Emake&lt;/code&gt; 는 다음과 같은 요소를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="270393b4583bd924998e84467ba7373cbe65d1f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make&lt;/code&gt; will verify that the Erlang/OTP system used when building is of the same release as the system being built, and will fail if this is not the case. It is possible, however not recommended, to force the cross compilation even though the wrong Erlang/OTP system is used. This by invoking &lt;code&gt;make&lt;/code&gt; like this: &lt;code&gt;make ERL_XCOMP_FORCE_DIFFERENT_OTP=yes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; 는 빌드 할 때 사용 된 Erlang / OTP 시스템이 빌드중인 시스템과 동일한 릴리스인지 확인하며, 그렇지 않은 경우 실패합니다. 그러나 잘못된 Erlang / OTP 시스템을 사용하더라도 교차 컴파일을 강제 할 수는 있지만 권장되지는 않습니다. &lt;code&gt;make ERL_XCOMP_FORCE_DIFFERENT_OTP=yes&lt;/code&gt; 와 같이 &lt;code&gt;make&lt;/code&gt; 를 호출 하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="840792aa7619bb306720f20c2ce63c67a313843f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_config/1&lt;/code&gt; uses the information previously saved by &lt;code&gt;&lt;a href=&quot;#save_scenario-0&quot;&gt;save_scenario/0&lt;/a&gt;&lt;/code&gt; in order to produce an &lt;code&gt;erts_alloc&lt;/code&gt; configuration. At least one scenario have had to be saved. All scenarios previously saved will be used when creating the configuration.</source>
          <target state="translated">&lt;code&gt;make_config/1&lt;/code&gt; 은 &lt;code&gt;erts_alloc&lt;/code&gt; 구성 을 생성하기 위해 &lt;code&gt;&lt;a href=&quot;#save_scenario-0&quot;&gt;save_scenario/0&lt;/a&gt;&lt;/code&gt; 에 의해 이전에 저장된 정보를 사용합니다 . 최소한 하나의 시나리오를 저장해야했습니다. 구성을 만들 때 이전에 저장된 모든 시나리오가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1c2f1daea4e34d2fedd33079cf5e22510ff82244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;malloc&lt;/code&gt; library to use. Only &lt;code&gt;libc&lt;/code&gt; is available. &lt;code&gt;libc&lt;/code&gt; enables the standard &lt;code&gt;libc&lt;/code&gt;&lt;code&gt;malloc&lt;/code&gt; implementation. By default &lt;code&gt;libc&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;malloc&lt;/code&gt; 사용할 malloc 라이브러리. &lt;code&gt;libc&lt;/code&gt; 만 사용할 수 있습니다. &lt;code&gt;libc&lt;/code&gt; 는 표준 &lt;code&gt;libc&lt;/code&gt; &lt;code&gt;malloc&lt;/code&gt; 구현을 가능하게합니다 . 기본적으로 &lt;code&gt;libc&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1ea55247b858a5b4454ad7ae65a30311cf2685ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;managed_agents&lt;/code&gt; is optional.</source>
          <target state="translated">&lt;code&gt;managed_agents&lt;/code&gt; 는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="5a1d0c4b1351ca6835e9615992a7cec1a2c9a3dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manager&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;manager&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="0b88984e46f4e980107b12a96398e4e130cc9eb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map(F, List)&lt;/code&gt; is a function that takes a function &lt;code&gt;F&lt;/code&gt; and a list &lt;code&gt;L&lt;/code&gt; as arguments and returns a new list, obtained by applying &lt;code&gt;F&lt;/code&gt; to each of the elements in &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map(F, List)&lt;/code&gt; 함수 취하는 함수 &lt;code&gt;F&lt;/code&gt; 및 목록 &lt;code&gt;L&lt;/code&gt; 인수로하고 도포하여 얻어진 새로운 목록을 반환 &lt;code&gt;F&lt;/code&gt; 가 있는 요소들의 각각에 &lt;code&gt;L&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="6c156a66d82d82f9cf513b470fba98bac2bda89f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; takes a function of one argument and a list of terms:</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 은 하나의 인수와 용어 목록의 기능을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="87b81a82f548fc7423fc917dd85f6239275c16ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map_get/2&lt;/code&gt; in the &lt;code&gt;erlang&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;map_get/2&lt;/code&gt; &lt;code&gt;erlang&lt;/code&gt; 모듈 의 map_get / 2</target>
        </trans-unit>
        <trans-unit id="0d89ff44a50df5ef56c87f8de40fab752c012f38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map_size/1&lt;/code&gt; in the &lt;code&gt;erlang&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;map_size/1&lt;/code&gt; &lt;code&gt;erlang&lt;/code&gt; 모듈 의 map_size / 1</target>
        </trans-unit>
        <trans-unit id="b536a3850f767c913c875a0f2abcf64f84ffa387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapfoldl&lt;/code&gt; simultaneously maps and folds over a list:</source>
          <target state="translated">&lt;code&gt;mapfoldl&lt;/code&gt; 은 동시에 목록을 매핑하고 접습니다.</target>
        </trans-unit>
        <trans-unit id="28e4cb0b9a019365b62b7f7670f762f6307804f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;master_node_tables&lt;/code&gt;. Returns a list of all tables with at least one master node.</source>
          <target state="translated">&lt;code&gt;master_node_tables&lt;/code&gt; . 하나 이상의 마스터 노드가있는 모든 테이블 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="320b3e2e69db81bdb1bce46253be76bbb16cbd8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;master_nodes&lt;/code&gt;. Returns the master nodes of a table.</source>
          <target state="translated">&lt;code&gt;master_nodes&lt;/code&gt; . 테이블의 마스터 노드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c7de2c527a233cc022f6da1c0a8ed25204d08b0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max&lt;/code&gt; detail level activates tracing of all calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max&lt;/code&gt; 세부 사항 레벨은 &lt;code&gt;et:trace_me/4,5&lt;/code&gt; 에 대한 모든 호출 추적을 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="12cbb5e7aef12e76368e070ef17e62260df0b61b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_message_size&lt;/code&gt; - The &lt;code&gt;snmpEngineMaxMessageSize&lt;/code&gt; as defined in SNMP-FRAMEWORK-MIB. &lt;strong&gt;Mandatory&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;max_message_size&lt;/code&gt; - &lt;code&gt;snmpEngineMaxMessageSize&lt;/code&gt; 을 SNMP 프레임 워크-MIB에 정의 된 바와 같다. &lt;strong&gt;필수&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="26fa86b89f3755b53f687395b2ba2fe437b5c4d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_blocks : integer&lt;/code&gt; :: Number of multiblock blocks in instance. Ex. &lt;code&gt;122&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_blocks : integer&lt;/code&gt; :: 인스턴스의 멀티 블록 블록 수입니다. 전의. &lt;code&gt;122&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a20575c861819959a88555afdd99d04e48f52c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_blocks_size : integer&lt;/code&gt; :: Total size of all multiblock blocks in instance. Ex. &lt;code&gt;285296&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_blocks_size : integer&lt;/code&gt; :: 인스턴스의 모든 멀티 블록 블록의 전체 크기입니다. 전의. &lt;code&gt;285296&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f38ae9d9af5aeaf996199c066c1e1c011b303785" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_carriers : integer&lt;/code&gt; :: Number of multiblock carriers in instance. Ex. &lt;code&gt;3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_carriers : integer&lt;/code&gt; :: 인스턴스의 멀티 블록 캐리어 수입니다. 전의. &lt;code&gt;3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac2207eda8c89c866a3cc4bbd0c29488a23573ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_carriers_size : integer&lt;/code&gt; :: Total size of multiblock blocks carriers in instance. Ex. &lt;code&gt;1343488&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_carriers_size : integer&lt;/code&gt; :: 인스턴스에서 다중 블록 블록 반송파의 총 크기입니다. 전의. &lt;code&gt;1343488&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a957db9d5d62748a8fe5b4b90936c5d5cd85161" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;megaco:conn_info(ConnHandle, protocol_version)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;megaco:conn_info(ConnHandle, protocol_version)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f196f7169d5b3ddfc633bdba72c4c3abc5b4517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;megaco:format_versions/1&lt;/code&gt; (use megaco:print_version_info/0,1 instead.)</source>
          <target state="translated">&lt;code&gt;megaco:format_versions/1&lt;/code&gt; (대신 megaco : print_version_info / 0,1 사용)</target>
        </trans-unit>
        <trans-unit id="9604fcf1c18c010dc9acf878086786e04d3c7030" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;. Returns for &lt;code&gt;ram_copies&lt;/code&gt; and &lt;code&gt;disc_copies&lt;/code&gt; tables the number of words allocated in memory to the table on this node. For &lt;code&gt;disc_only_copies&lt;/code&gt; tables the number of bytes stored on disc is returned.</source>
          <target state="translated">&lt;code&gt;memory&lt;/code&gt; . &lt;code&gt;ram_copies&lt;/code&gt; 및 &lt;code&gt;disc_copies&lt;/code&gt; 테이블에 대해이 노드의 테이블에 메모리에 할당 된 단어 수를 반환 합니다. 들어 &lt;code&gt;disc_only_copies&lt;/code&gt; 의 테이블 디스크에 저장된 바이트 수 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f743dbd63891f34f678b14fd5065b8728a4d1ce3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;. Returns the number of words allocated to the table on this node.</source>
          <target state="translated">&lt;code&gt;memory&lt;/code&gt; . 이 노드의 테이블에 할당 된 단어 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b2788527f5bc6a4f21924f9c58f30b61094d2611" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memsup&lt;/code&gt; is a process which supervises the memory usage for the system and for individual processes. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Unix and Windows.</source>
          <target state="translated">&lt;code&gt;memsup&lt;/code&gt; 은 시스템 및 개별 프로세스에 대한 메모리 사용을 감독하는 프로세스입니다. OS_Mon 애플리케이션의 일부입니다 . &lt;code&gt;os_mon(6)&lt;/code&gt; 참조하십시오 . Unix 및 Windows에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac55a1117d87b92c9643256061c0f84aef319452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memsup&lt;/code&gt; is a process which supervises the memory usage for the system and for individual processes. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Unix, Windows and VxWorks.</source>
          <target state="translated">&lt;code&gt;memsup&lt;/code&gt; 은 시스템 및 개별 프로세스의 메모리 사용을 감독하는 프로세스입니다. OS_Mon 응용 프로그램의 일부입니다 &lt;code&gt;os_mon(6)&lt;/code&gt; 참조 ) . Unix, Windows 및 VxWorks에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="50ed296aaff830f87c5d0ebf8ad050d27c8c72ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge(FileNames, Output)&lt;/code&gt; is equivalent to &lt;code&gt;merge(FileNames, Output, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;merge(FileNames, Output)&lt;/code&gt; 은 &lt;code&gt;merge(FileNames, Output, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d72ee5a4a1079ff1a0d9263eef7932f68891cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message : string&lt;/code&gt; :: Message received. Ex. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;message : string&lt;/code&gt; :: 메시지가 수신되었습니다. 전의. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fadf469f5c070a369f6f352483d71d18c16afb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message : string&lt;/code&gt; :: Message sent. Ex. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;message : string&lt;/code&gt; :: 메시지를 보냈습니다. 전의. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="601216269fe1b6b0bfa4efef50ce0ac22a21a694" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message/3&lt;/code&gt; returns an informative HTTP 1.1 status string in HTML. Each &lt;code&gt;StatusCode&lt;/code&gt; requires a specific &lt;code&gt;PhraseArgs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;message/3&lt;/code&gt; 는 유익한 HTTP 1.1 상태 문자열을 HTML로 반환합니다. 각 &lt;code&gt;StatusCode&lt;/code&gt; 에는 특정 &lt;code&gt;PhraseArgs&lt;/code&gt; 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="a1b80be3f4eccb9a5e62f9291cf18851ca762db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mime_decode/1&lt;/code&gt; and &lt;code&gt;mime_decode_to_string/1&lt;/code&gt; strip away illegal characters, while &lt;code&gt;decode/1&lt;/code&gt; and &lt;code&gt;decode_to_string/1&lt;/code&gt; only strip away whitespace characters.</source>
          <target state="translated">&lt;code&gt;mime_decode/1&lt;/code&gt; 및 &lt;code&gt;mime_decode_to_string/1&lt;/code&gt; 은 잘못된 문자를 제거하고, &lt;code&gt;decode/1&lt;/code&gt; 및 &lt;code&gt;decode_to_string/1&lt;/code&gt; 은 공백 문자 만 제거합니다.</target>
        </trans-unit>
        <trans-unit id="f16de9b44c98ce3bac0c21ea5706a65429350ead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min&lt;/code&gt; detail level deactivates tracing of calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; 세부 사항 레벨은 &lt;code&gt;et:trace_me/4,5&lt;/code&gt; 에 대한 호출 추적을 비활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="ba8ce7ebe8ebbc9b5d6407ac6c488b0c9adbeefa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minimum(NetTicktime, PreviousNetTicktime)*1000 div 4&lt;/code&gt; milliseconds.</source>
          <target state="translated">&lt;code&gt;minimum(NetTicktime, PreviousNetTicktime)*1000 div 4&lt;/code&gt; 밀리 초</target>
        </trans-unit>
        <trans-unit id="07be14c2aee6768816e2158303036823a4f263b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minor : integer&lt;/code&gt; :: Minor version. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;minor : integer&lt;/code&gt; :: 부 버전. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c8f4454f124c597a614bdb6b3aaa486fa4b5803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia:create_schema/1&lt;/code&gt; fails if any of the Erlang nodes given as &lt;code&gt;DiscNodes&lt;/code&gt; are not alive, if Mnesia is running on any of the nodes, or if any of the nodes already have a schema. Use &lt;code&gt;mnesia:delete_schema/1&lt;/code&gt; to get rid of old faulty schemas.</source>
          <target state="translated">&lt;code&gt;mnesia:create_schema/1&lt;/code&gt; 얼랭의는 다음과 같이 주어진 노드들이 경우에 실패 &lt;code&gt;DiscNodes&lt;/code&gt; 는 노드 중 하나가 이미 스키마가있는 경우 생존하지 Mnesia는 노드 중 하나에서 실행중인 경우, 또는. 오래된 결함있는 스키마를 제거 하려면 &lt;code&gt;mnesia:delete_schema/1&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="46f82c21c22d4616aecf7c8b1c56ec2a760ab03c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia:create_table/2&lt;/code&gt; writes records into the table &lt;code&gt;schema&lt;/code&gt;. This function, and all other schema manipulation functions, are implemented with the normal transaction management system. This guarantees that schema updates are performed on all nodes in an atomic manner.</source>
          <target state="translated">&lt;code&gt;mnesia:create_table/2&lt;/code&gt; 는 레코드를 테이블 &lt;code&gt;schema&lt;/code&gt; 씁니다 . 이 기능 및 기타 모든 스키마 조작 기능은 일반 트랜잭션 관리 시스템으로 구현됩니다. 이를 통해 모든 노드에서 원자 적 방식으로 스키마 업데이트가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6674a440da17f45c124781667eb63ea358c2a30b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia:dirty_update_counter/3&lt;/code&gt; is performed as an atomic operation although it is not protected by a transaction.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_update_counter/3&lt;/code&gt; 는 트랜잭션에 의해 보호되지 않지만 원자 연산으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="b38f14a2c660b4fcf832b846b6f767d27365af15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia_down&lt;/code&gt; is returned from all other nodes that hold a disc resident replica of the table.</source>
          <target state="translated">&lt;code&gt;mnesia_down&lt;/code&gt; 은 테이블의 디스크 상주 복제본을 보유하는 다른 모든 노드에서 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="24fe5ec7d38e879b10d409aa6aba87736ab0122e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia_down&lt;/code&gt;. A transaction involves records on a remote node, which became unavailable before the transaction was completed. Records are no longer available elsewhere in the network.</source>
          <target state="translated">&lt;code&gt;mnesia_down&lt;/code&gt; . 트랜잭션에는 원격 노드의 레코드가 포함되는데, 이는 트랜잭션이 완료되기 전에 사용할 수 없게되었습니다. 네트워크의 다른 곳에서는 더 이상 레코드를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="567e8d7f662b9af7f74d10c817224f15a1738818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mntab&lt;/code&gt; is the name of the &lt;code&gt;Mnesia&lt;/code&gt; table to read data from.</source>
          <target state="translated">&lt;code&gt;mntab&lt;/code&gt; 은 데이터를 읽을 &lt;code&gt;Mnesia&lt;/code&gt; 테이블 의 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="d466aa59733b9c7afb864608aa50ab84e769dcc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mntab&lt;/code&gt; is the name of the &lt;code&gt;Mnesia&lt;/code&gt; table where the backed up data is to be placed. If the table does not exist, it is created automatically using configurable defaults. For information about configuring this behavior, see &lt;code&gt;Mnesia&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mntab&lt;/code&gt; 은 백업 된 데이터가 배치 될 &lt;code&gt;Mnesia&lt;/code&gt; 테이블 의 이름입니다 . 테이블이 존재하지 않으면 구성 가능한 기본값을 사용하여 자동으로 작성됩니다. 이 동작 구성에 대한 정보는 &lt;code&gt;Mnesia&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9079c9ee03a2fc36036aa585f9863836334d2c47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod&lt;/code&gt; is the name of the module containing the function to be run on the remote node.</source>
          <target state="translated">&lt;code&gt;mod&lt;/code&gt; 는 원격 노드에서 실행될 기능을 포함하는 모듈의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7fe0cc57f51f2f563f5070318f42a0f60a10fb63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod_esi:deliver/2&lt;/code&gt; shall be used to generate the response to the client and &lt;code&gt;SessionID&lt;/code&gt; is an identifier that shall by used when calling this function, do not assume anything about the datatype. This function may be called several times to chunk the response data. Notice that the first chunk of data sent to the client must at least contain all HTTP header fields that the response will generate. If the first chunk does not contain the &lt;strong&gt;end of HTTP header&lt;/strong&gt;, that is, &lt;code&gt;&quot;\r\n\r\n&quot;,&lt;/code&gt; the server assumes that no HTTP header fields will be generated.</source>
          <target state="translated">&lt;code&gt;mod_esi:deliver/2&lt;/code&gt; 는 클라이언트에 대한 응답을 생성하는 데 사용되며 &lt;code&gt;SessionID&lt;/code&gt; 는이 함수를 호출 할 때 사용해야하는 식별자이며 데이터 유형에 대해 아무 것도 가정하지 않습니다. 이 함수는 응답 데이터를 청크하기 위해 여러 번 호출 될 수 있습니다. 클라이언트에 전송 된 첫 번째 데이터 청크에는 최소한 응답이 생성 할 모든 HTTP 헤더 필드가 포함되어야합니다. 첫 번째 청크 &lt;strong&gt;에 HTTP 헤더&lt;/strong&gt; 의 &lt;strong&gt;끝&lt;/strong&gt; , 즉 &lt;code&gt;&quot;\r\n\r\n&quot;,&lt;/code&gt; 이 없으면 서버는 HTTP 헤더 필드가 생성되지 않는다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="02e694fd8e5b2a45b9d55cc7b7826a876370412c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod_trace&lt;/code&gt; is responsible for handling of TRACE requests. Trace is a new request method in HTTP/1.1. The intended use of trace requests is for testing. The body of the trace response is the request message that the responding web server or proxy received.</source>
          <target state="translated">&lt;code&gt;mod_trace&lt;/code&gt; 는 TRACE 요청을 처리합니다. 추적은 HTTP / 1.1의 새로운 요청 방법입니다. 추적 요청의 용도는 테스트 용입니다. 추적 응답의 본문은 응답 웹 서버 또는 프록시가 수신 한 요청 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="2eca4f7960a48514efc33c9daaac31280fab0080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; and</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 및</target>
        </trans-unit>
        <trans-unit id="cf62704361b32700ceed8b9c8103394aec1e8938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="2bc1b5285a427c281494717339716191820f816f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; - All modules &lt;strong&gt;introduced&lt;/strong&gt; by this application. &lt;code&gt;systools&lt;/code&gt; uses this list when generating boot scripts and tar files. A module must be defined in only one application. Defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; - 이 응용 프로그램에서 &lt;strong&gt;소개&lt;/strong&gt; 된 모든 모듈 . &lt;code&gt;systools&lt;/code&gt; 는 부팅 스크립트 및 tar 파일을 생성 할 때이 목록을 사용합니다. 모듈은 하나의 응용 프로그램에서만 정의해야합니다. 기본값은 &lt;code&gt;[]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="174a7f88b7a6eb2b8bf56c05ce0a6e77c48d7c50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; are to be a list with one element &lt;code&gt;[Module]&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the name of the callback module, if the child process is a supervisor, gen_server, gen_statem. If the child process is a gen_event, the value shall be &lt;code&gt;dynamic&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; 하나 개의 요소리스트하여야한다 &lt;code&gt;[Module]&lt;/code&gt; , &lt;code&gt;Module&lt;/code&gt; 자식 프로세스가 감독자 gen_server, gen_statem 경우 콜백 모듈의 이름이다. 자식 프로세스가 gen_event 인 경우 값은 &lt;code&gt;dynamic&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="34a0da6c5eaa18f549a88882bb9134e88c6f458e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; is used by the release handler during code replacement to determine which processes are using a certain module. As a rule of thumb, if the child process is a &lt;code&gt;supervisor&lt;/code&gt;, &lt;code&gt;gen_server&lt;/code&gt; or, &lt;code&gt;gen_statem&lt;/code&gt;, this is to be a list with one element &lt;code&gt;[Module]&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the callback module. If the child process is an event manager (&lt;code&gt;gen_event&lt;/code&gt;) with a dynamic set of callback modules, value &lt;code&gt;dynamic&lt;/code&gt; must be used. For more information about release handling, see &lt;code&gt; Release Handling&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; 은 코드를 교체하는 동안 릴리스 핸들러에서 특정 모듈을 사용하는 프로세스를 확인하는 데 사용됩니다. 경험상 하위 프로세스가 &lt;code&gt;supervisor&lt;/code&gt; , &lt;code&gt;gen_server&lt;/code&gt; 또는 &lt;code&gt;gen_statem&lt;/code&gt; 이면 이것은 &lt;code&gt;[Module]&lt;/code&gt; 요소가 하나있는 목록이됩니다 . 여기서 &lt;code&gt;Module&lt;/code&gt; 은 콜백 모듈입니다. 하위 프로세스가 동적 콜백 모듈 세트 가있는 이벤트 관리자 ( &lt;code&gt;gen_event&lt;/code&gt; ) 인 경우 &lt;code&gt;dynamic&lt;/code&gt; 값을 사용해야합니다. 릴리스 처리에 대한 자세한 내용은 OTP 설계 원칙의 &lt;code&gt; Release Handling&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="da2a0d5417825c1c00e64aa8d17a85f6fc76ae13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; is used by the release handler during code replacement to determine which processes are using a certain module. As a rule of thumb, if the child process is a &lt;code&gt;supervisor&lt;/code&gt;, &lt;code&gt;gen_server&lt;/code&gt; or, &lt;code&gt;gen_statem&lt;/code&gt;, this is to be a list with one element &lt;code&gt;[Module]&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the callback module. If the child process is an event manager (&lt;code&gt;gen_event&lt;/code&gt;) with a dynamic set of callback modules, value &lt;code&gt;dynamic&lt;/code&gt; must be used. For more information about release handling, see &lt;code&gt;Release Handling&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; 은 특정 모듈을 사용하는 프로세스를 판별하기 위해 코드 교체 중에 릴리스 핸들러에서 사용됩니다. 일반적으로 하위 프로세스가 &lt;code&gt;supervisor&lt;/code&gt; , &lt;code&gt;gen_server&lt;/code&gt; 또는 &lt;code&gt;gen_statem&lt;/code&gt; 인 경우 이는 하나의 요소 &lt;code&gt;[Module]&lt;/code&gt; 이있는 목록이어야합니다 . 여기서 &lt;code&gt;Module&lt;/code&gt; 은 콜백 모듈입니다. 하위 프로세스가 동적 콜백 모듈 세트 가있는 이벤트 관리자 ( &lt;code&gt;gen_event&lt;/code&gt; ) 인 경우 &lt;code&gt;dynamic&lt;/code&gt; 값을 사용해야합니다. 릴리스 처리에 대한 자세한 내용은 OTP 디자인 원칙의 &lt;code&gt;Release Handling&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4876f5e9a1f661a63193eee3608f5279e00e9f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;month/1&lt;/code&gt; converts the month &lt;code&gt;NthMonth&lt;/code&gt; as an integer (1-12) to an abbreviated string, that is:</source>
          <target state="translated">&lt;code&gt;month/1&lt;/code&gt; 은 월 &lt;code&gt;NthMonth&lt;/code&gt; 를 정수 (1-12)로 축약 된 문자열 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="fe31fb6205735e5ec4b71169af05275acea56476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;move_xy&lt;/code&gt; is almost identical to &lt;code&gt;move_xx&lt;/code&gt;. The only difference is the use of the &lt;code&gt;yb()&lt;/code&gt; macro instead of &lt;code&gt;xb()&lt;/code&gt; to reference the destination register:</source>
          <target state="translated">&lt;code&gt;move_xy&lt;/code&gt; 은 거의 동일 &lt;code&gt;move_xx&lt;/code&gt; . 유일한 차이점은 &lt;code&gt;xb()&lt;/code&gt; 대신 &lt;code&gt;yb()&lt;/code&gt; 매크로를 사용 하여 대상 레지스터를 참조하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="372b1faae3b4202378e772ec2ba948e196923700" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msacc&lt;/code&gt; allows the user to get a view of what the Erlang Run-Time system is spending its time doing. Has a very low overhead, which makes it useful to run in heavily loaded systems to get some idea of where to start doing more granular profiling.</source>
          <target state="translated">&lt;code&gt;msacc&lt;/code&gt; 를 사용하면 Erlang 런타임 시스템이 수행하는 작업을 볼 수 있습니다. 오버 헤드가 매우 낮아서로드가 많은 시스템에서 실행하여보다 세부적인 프로파일 링을 시작할 위치를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6a46ad591043ab4ae0fea0e7f2898189d63d07a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg-&amp;gt;to&lt;/code&gt; and &lt;code&gt;msg-&amp;gt;from&lt;/code&gt; contain the pids of the sender and recipient of the link or unlink.</source>
          <target state="translated">&lt;code&gt;msg-&amp;gt;to&lt;/code&gt; 및 &lt;code&gt;msg-&amp;gt;from&lt;/code&gt; 에는 발신자 및 수신자의 pid가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4cf8ae8a05e8bb032f0bf6cf2d8b798baa20d8c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is a pointer to an &lt;code&gt;erlang_msg&lt;/code&gt; structure and contains information on the message received.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 는 &lt;code&gt;erlang_msg&lt;/code&gt; 구조에 대한 포인터 이며 수신 된 메시지에 대한 정보를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="22c0db150f06272113cf3e563d8f9e1095dd87d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is invalid.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 가 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2c1fe6cff458d23939c5800c42422a4f581bbe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is structure of type &lt;code&gt;erlang_msg&lt;/code&gt; and contains information on the message received. For a description of the &lt;code&gt;erlang_msg&lt;/code&gt; format, see &lt;code&gt;&lt;a href=&quot;#ei_receive_msg&quot;&gt; ei_receive_msg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 는 &lt;code&gt;erlang_msg&lt;/code&gt; 유형의 구조이며 수신 된 메시지에 대한 정보를 포함합니다. 의 설명은 &lt;code&gt;erlang_msg&lt;/code&gt; 의 형식을 참조 &lt;code&gt;&lt;a href=&quot;#ei_receive_msg&quot;&gt; ei_receive_msg&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="1147a6079cbd57aaa4dfbf2532b4f6db49e2c8eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is structure of type &lt;code&gt;erlang_msg&lt;/code&gt; and contains information on the message received. For a description of the &lt;code&gt;erlang_msg&lt;/code&gt; format, see &lt;code&gt;&lt;a href=&quot;#ei_receive_msg&quot;&gt;ei_receive_msg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 는 &lt;code&gt;erlang_msg&lt;/code&gt; 유형의 구조이며 수신 된 메시지에 대한 정보를 포함합니다. 의 설명은 &lt;code&gt;erlang_msg&lt;/code&gt; 의 형식을 참조 &lt;code&gt;&lt;a href=&quot;#ei_receive_msg&quot;&gt;ei_receive_msg&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="20165fce6029f6b12357cbf628fa9de97c536db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is the Erlang term to be sent.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 는 전송 될 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="bc5255648412b02a4f9b38e4d992a126891957fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msgtype&lt;/code&gt; identifies the type of message, and is one of the following:</source>
          <target state="translated">&lt;code&gt;msgtype&lt;/code&gt; 은 메시지 유형을 식별하며 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="dbfc40aa62adc558872dc112f3dcd085f1f3c0d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to destroy.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 파괴 할 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="6d81444be058267cf4efbf703c68af2992a43a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to lock.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 잠글 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="5936c828bb2d79c6205b045b38c650dc9143623b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to try to lock.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 잠금을 시도하는 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="3eb0e6be023472e5e5f0684561604b16264eeed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to unlock.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 잠금 해제 할 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="25674df362fe7127698044f736e6a5bccb2c4c1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to an initialized mutex.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 초기화 된 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="3c5b24424f7a846897e6dcfd9abec76c096523c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multi_lookup&lt;/code&gt; extracts all &lt;code&gt;{Key,Value}&lt;/code&gt; tuples from an &lt;code&gt;ETSTable&lt;/code&gt; and returns &lt;strong&gt;all&lt;/strong&gt;&lt;code&gt;Values&lt;/code&gt; associated with &lt;code&gt;Key&lt;/code&gt; in a list.</source>
          <target state="translated">&lt;code&gt;multi_lookup&lt;/code&gt; 는 모든 추출 &lt;code&gt;{Key,Value}&lt;/code&gt; 에서 튜플 &lt;code&gt;ETSTable&lt;/code&gt; 을 반환합니다 &lt;strong&gt;모든 &lt;/strong&gt; &lt;code&gt;Values&lt;/code&gt; 과 관련된 &lt;code&gt;Key&lt;/code&gt; 목록에 있습니다.</target>
        </trans-unit>
        <trans-unit id="d49b62334dd0db4dc2fedcbf91c9bb076556cc52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n1&lt;/code&gt;, &lt;code&gt;n2&lt;/code&gt;, and &lt;code&gt;n3&lt;/code&gt; can be seen as one big number &lt;code&gt;n1*2^64+n2*2^32+n3&lt;/code&gt;, which is to be chosen uniquely for each reference created for a given C-node.</source>
          <target state="translated">&lt;code&gt;n1&lt;/code&gt; , &lt;code&gt;n2&lt;/code&gt; 및 &lt;code&gt;n3&lt;/code&gt; 은 하나의 큰 숫자 &lt;code&gt;n1*2^64+n2*2^32+n3&lt;/code&gt; 으로 볼 수 있으며 , 이는 주어진 C- 노드에 대해 작성된 각 참조에 대해 고유하게 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="8bbdff02f87969d40c63d8203eaf115735c0f606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; - NIL (&lt;code&gt;[]&lt;/code&gt;, the empty list).</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; -NIL ( &lt;code&gt;[]&lt;/code&gt; , 빈 목록).</target>
        </trans-unit>
        <trans-unit id="78e6f1eda520d11a5eb3b31dd39d407ac7cb655c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; - NIL or the empty list. (Will not be stored in the loaded code.)</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; -NIL 또는 빈 목록. (로드 된 코드에 저장되지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="2fd292a665c7c30f1d00a7e90ee7c62733e8db29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is a value to be converted to an Erlang integer.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 은 Erlang 정수로 변환 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="d099369481ceff3dd7587926a74ba6b8dc5743a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is a value to be converted to an Erlang unsigned integer.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 은 Erlang 부호없는 정수로 변환 될 값입니다.</target>
        </trans-unit>
        <trans-unit id="0f5ea2f8a335ce2ed24182b2525ae37a7cb70475" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n_fragments&lt;/code&gt; regulates how many fragments that the table currently has. This property can explicitly be set at table creation and later be changed with &lt;code&gt;{add_frag, NodesOrDist}&lt;/code&gt; or &lt;code&gt;del_frag&lt;/code&gt;. &lt;code&gt;n_fragments&lt;/code&gt; defaults to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n_fragments&lt;/code&gt; 는 테이블에 현재있는 조각 수를 조정합니다. 이 특성은 테이블 작성시 명시 적으로 설정 한 후 나중에 &lt;code&gt;{add_frag, NodesOrDist}&lt;/code&gt; 또는 &lt;code&gt;del_frag&lt;/code&gt; 로 변경할 수 있습니다. &lt;code&gt;n_fragments&lt;/code&gt; 의 기본값은 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1c5a457d41e6ae7e94e7e3d8c8a26bc2b3e9197c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n_objects&lt;/code&gt; specifies how many results are to be returned in each chunk to QLC.</source>
          <target state="translated">&lt;code&gt;n_objects&lt;/code&gt; 는 각 청크에서 QLC로 리턴되는 결과 수를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="3c6a49a98ce970577a69add0b2ce5dd0761ad6df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name : string&lt;/code&gt; :: Registered name. Ex. &lt;code&gt;&quot;logger&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name : string&lt;/code&gt; :: 등록 된 이름입니다. 전의. &lt;code&gt;&quot;logger&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f891725c21b2707440243c2bc9084bb45473388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created condition variable. It is used to identify the condition variable in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 조건 변수를 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 조건 변수를 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9005585938ef363159ea0e38ae100ad8b0083ce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created key. It is used to identify the key in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 키를 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 키를 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e58479a0f49a425ef872611cf710aacd2c9c6c74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created mutex. It is used to identify the mutex in debug functionality (see note).</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 뮤텍스를 식별하는 문자열입니다. 디버그 기능에서 뮤텍스를 식별하는 데 사용됩니다 (참고 참조).</target>
        </trans-unit>
        <trans-unit id="fee59da4861c233d62875099989d331d001a77da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created mutex. It is used to identify the mutex in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 뮤텍스를 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 뮤텍스를 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8eb2cff5df38984b94495ea90c798f5130c71e9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created rwlock. It is used to identify the rwlock in debug functionality (see note about the &lt;code&gt;&lt;a href=&quot;#lock_checker&quot;&gt;lock checker&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 rwlock을 식별하는 문자열입니다. 디버그 기능에서 rwlock을 식별하는 데 사용됩니다 ( &lt;code&gt;&lt;a href=&quot;#lock_checker&quot;&gt;lock checker&lt;/a&gt;&lt;/code&gt; 에 대한 참고 참조 ).</target>
        </trans-unit>
        <trans-unit id="0bc55479881a50f624c0787926ae8ec6c27e0224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created rwlock. It is used to identify the rwlock in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 rwlock을 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 rwlock을 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="91885e35be8ed3cdfd57070017e0699b72001e5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created thread options. It is used to identify the thread options in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 작성된 스레드 옵션을 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 스레드 옵션을 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4e31c0e3a151e7e9fd2582a1217ca703e8c6e0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name of an Erlang variable.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 Erlang 변수의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="8ba02d1316dffaa7b68ab37e7cabdfac2a3c0bb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name that is to be looked up in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 &lt;code&gt;global&lt;/code&gt; 에서 조회 할 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="9d5f477a2f79558137ade0d9eae972259ebd80ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name to register in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 &lt;code&gt;global&lt;/code&gt; 에 등록 할 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="c4b71ebb0fda30fdf6c7946ed1028e59dded179e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name to unregister from &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 &lt;code&gt;global&lt;/code&gt; 에서 등록 취소 할 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="d79ecca34f6c2aacf2c6870aed8fce76455f8934" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; specifies a name for the variable.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 변수의 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="769cceefe1f47133ec711e95ce5be764e5817ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;native&lt;/code&gt; (use system calls)</source>
          <target state="translated">&lt;code&gt;native&lt;/code&gt; (시스템 호출 사용)</target>
        </trans-unit>
        <trans-unit id="c868fc11902a21e9495c0a11e40b16c7d9e8fd16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ncurses&lt;/code&gt;, &lt;code&gt;termcap&lt;/code&gt;, or &lt;code&gt;termlib&lt;/code&gt; -- The development headers and libraries are needed, often known as &lt;code&gt;ncurses-devel&lt;/code&gt;. Use &lt;code&gt;--without-termcap&lt;/code&gt; to build without any of these libraries. Note that in this case only the old shell (without any line editing) can be used.</source>
          <target state="translated">&lt;code&gt;ncurses&lt;/code&gt; , &lt;code&gt;termcap&lt;/code&gt; 또는 &lt;code&gt;termlib&lt;/code&gt; &amp;ndash; 종종 &lt;code&gt;ncurses-devel&lt;/code&gt; 이라고하는 개발 헤더와 라이브러리가 필요합니다 . 이러한 라이브러리없이 빌드 하려면 &lt;code&gt;--without-termcap&lt;/code&gt; 을 사용하십시오 . 이 경우 이전 셸 (행 편집없이) 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4cb421db8786573c2d90d153eed83c0fd7c21add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;need : integer&lt;/code&gt; :: Heap need. Ex. &lt;code&gt;2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;need : integer&lt;/code&gt; :: 힙이 필요합니다. 전의. &lt;code&gt;2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04f4489712d3c89f2b4be69a6634b8131e4bd2d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nelem&lt;/code&gt; indicates the number of elements stored in the registry. It includes objects that are deleted but not purged.</source>
          <target state="translated">&lt;code&gt;nelem&lt;/code&gt; 은 레지스트리에 저장된 요소 수를 나타냅니다. 삭제되었지만 제거되지 않은 개체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="e7b6371a40fb9455fad414b3df774c818c7f3d0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nested_transaction&lt;/code&gt;. Nested transactions are not allowed in this context.</source>
          <target state="translated">&lt;code&gt;nested_transaction&lt;/code&gt; . 이 컨텍스트에서는 중첩 트랜잭션이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7d2ae966a7504a3172c64d90cc0c533a5d535f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net:broadcast/3&lt;/code&gt; (use rpc:eval_everywhere/3 instead)</source>
          <target state="translated">&lt;code&gt;net:broadcast/3&lt;/code&gt; (대신 rpc : eval_everywhere / 3 사용)</target>
        </trans-unit>
        <trans-unit id="bf8c716b60dfaf1cdb454ec676f282e17c9fbbae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net:call/4&lt;/code&gt; (use rpc:call/4 instead)</source>
          <target state="translated">&lt;code&gt;net:call/4&lt;/code&gt; (대신 rpc : call / 4 사용)</target>
        </trans-unit>
        <trans-unit id="2d86827b6dab6e3a5eaa0e394e280b737ac0ca76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net:cast/4&lt;/code&gt; (use rpc:cast/4 instead)</source>
          <target state="translated">&lt;code&gt;net:cast/4&lt;/code&gt; (대신 rpc : cast / 4 사용)</target>
        </trans-unit>
        <trans-unit id="73b684420a1cc5ea2459921ea8f228556fbf0821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net:ping/1&lt;/code&gt; (use net_adm:ping/1 instead)</source>
          <target state="translated">&lt;code&gt;net:ping/1&lt;/code&gt; (대신 net_adm : ping / 1 사용)</target>
        </trans-unit>
        <trans-unit id="2b9695516f9e14eb99ecfef2a962c4f1bcec6ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net:relay/1&lt;/code&gt; (use slave:relay/1 instead)</source>
          <target state="translated">&lt;code&gt;net:relay/1&lt;/code&gt; (대신 slave : relay / 1 사용)</target>
        </trans-unit>
        <trans-unit id="b4dc2dc9aa385f4a02f6eb240711418cbd374e96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net:sleep/1&lt;/code&gt; (use 'receive after T -&amp;gt; ok end' instead)</source>
          <target state="translated">&lt;code&gt;net:sleep/1&lt;/code&gt; (대신 'receive after T-&amp;gt; ok end'사용)</target>
        </trans-unit>
        <trans-unit id="1fc2b6c244fff1fe70ace444e757507dced6c537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_adm&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;net_adm&lt;/code&gt; 커널의 net_adm 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="1d5426b369889eee7c87754160b79b56b7c18acd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_kernel&lt;/code&gt; initiated the change of &lt;code&gt;net_ticktime&lt;/code&gt; to &lt;code&gt;NetTicktime&lt;/code&gt; seconds.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; 이 &lt;code&gt;net_ticktime&lt;/code&gt; 에서 &lt;code&gt;NetTicktime&lt;/code&gt; 초로 변경을 시작했습니다 .</target>
        </trans-unit>
        <trans-unit id="cdcc9a34292ef88c7a62f0501732e3ae263fd743" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_kernel&lt;/code&gt; is currently changing &lt;code&gt;net_ticktime&lt;/code&gt; to &lt;code&gt;NetTicktime&lt;/code&gt; seconds.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; 이 현재 &lt;code&gt;net_ticktime&lt;/code&gt; 을 &lt;code&gt;NetTicktime&lt;/code&gt; 초로 변경 중 입니다.</target>
        </trans-unit>
        <trans-unit id="7fa27e0f8d4084ef0de130edbef970fc568ef473" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_ticktime&lt;/code&gt; already has the value of &lt;code&gt;NetTicktime&lt;/code&gt; and is left unchanged.</source>
          <target state="translated">&lt;code&gt;net_ticktime&lt;/code&gt; 의 값은 이미 &lt;code&gt;NetTicktime&lt;/code&gt; 이며 변경되지 않은 상태로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="760639fc9617306dbe2ce1727ab88ed2772d3eda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_ticktime&lt;/code&gt; is &lt;code&gt;NetTicktime&lt;/code&gt; seconds.</source>
          <target state="translated">&lt;code&gt;net_ticktime&lt;/code&gt; 은 &lt;code&gt;NetTicktime&lt;/code&gt; 초입니다.</target>
        </trans-unit>
        <trans-unit id="4194f1bdbdb59175d9e98ce7bce52e4d06cc5f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newsize&lt;/code&gt; is the new size to make the registry. The number is increased to the nearest larger prime number.</source>
          <target state="translated">&lt;code&gt;newsize&lt;/code&gt; 는 레지스트리를 만드는 새로운 크기입니다. 숫자가 가장 큰 소수로 증가합니다.</target>
        </trans-unit>
        <trans-unit id="faeda9b26dc42069778e49870677d14ab5403be9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nil&lt;/code&gt; in the previous expression represents the empty list (&lt;code&gt;[]&lt;/code&gt;), which is regarded as a separate type from &lt;code&gt;list/0&lt;/code&gt;. That is why &lt;code&gt;nil &amp;lt; list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 이전 표현식에서 nil 은 &lt;code&gt;list/0&lt;/code&gt; 과는 별도의 유형으로 간주되는 빈 목록 ( &lt;code&gt;[]&lt;/code&gt; )을 나타냅니다 . 그래서 &lt;code&gt;nil &amp;lt; list&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2d9ac12bfeb85194d6703f13ff62908d7dff3137" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nlist/1&lt;/code&gt; implies the current remote directory of the user.</source>
          <target state="translated">&lt;code&gt;nlist/1&lt;/code&gt; 은 사용자의 현재 원격 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="996bd783b3b0be1ac2fd7f1d1f7864a698f318a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noAccess | noCreation | inconsistentValue | resourceUnavailable | inconsistentName | genErr&lt;/code&gt;(SNMPv2)</source>
          <target state="translated">&lt;code&gt;noAccess | noCreation | inconsistentValue | resourceUnavailable | inconsistentName | genErr&lt;/code&gt; (SNMPv2)</target>
        </trans-unit>
        <trans-unit id="c14f29fb4ebe8bd8a2dcabf138abc103e734c572" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_analyzed_modules&lt;/code&gt;, number of analyzed modules;</source>
          <target state="translated">&lt;code&gt;no_analyzed_modules&lt;/code&gt; , 분석 된 모듈 수;</target>
        </trans-unit>
        <trans-unit id="36919705ab2ed85e787da97c4e019137e9726097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_analyzed_modules&lt;/code&gt;, total number of &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;no_analyzed_modules&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt; 총 모듈 수 ;</target>
        </trans-unit>
        <trans-unit id="247daf07bfeb0cf313c1ab73c118bdd56a4373e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_applications&lt;/code&gt;, number of applications;</source>
          <target state="translated">&lt;code&gt;no_applications&lt;/code&gt; , 애플리케이션 수;</target>
        </trans-unit>
        <trans-unit id="855d76897472ff9db8a9ed317585bf67aa23b49b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_applications&lt;/code&gt;, total number of applications (of all releases);</source>
          <target state="translated">&lt;code&gt;no_applications&lt;/code&gt; , 총 릴리스 수 (모든 릴리스);</target>
        </trans-unit>
        <trans-unit id="4f0e51a4da187fedf95a7f531d9dfa0a174eb37d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), number of calls of the application's modules, regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 응용 프로그램 모듈의 호출 수, 다른 함수의 한 함수 호출 인스턴스를 별도의 호출로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="370301c631577eec18b5ccc7eaaa194046fdf349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), number of calls of the release's modules, regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 릴리스 모듈의 호출 수, 다른 함수의 한 함수 호출 인스턴스를 별도의 호출로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="c93593df8ed4fcf1f94cc16ef3853f5868e322df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), number of calls, regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 호출 횟수, 함수 호출의 인스턴스를 다른 회선에있는 별도의 호출로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="1393436244f6630af5c0e5ff63ac5783ce91a856" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), total number of calls (in all modules), regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 한 줄의 함수 호출 인스턴스를 별도의 호출로 다른 회선에 관련한 총 호출 수 (모든 모듈);</target>
        </trans-unit>
        <trans-unit id="d2d90de1c8b1a6e7443e04db5bab61e57e304f72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt;. The sum of the number of resolved and unresolved calls:</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; . 해결 된 통화와 해결되지 않은 통화 수의 합 :</target>
        </trans-unit>
        <trans-unit id="af1e22dd263bf80de4de1df5f3df4fd3955182ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_conn&lt;/code&gt; - The connection is down to the node where the process is running. &lt;code&gt;Info={}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no_conn&lt;/code&gt; - 프로세스가 실행중인 노드로 연결이 끊어졌습니다. &lt;code&gt;Info={}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c814217a417ac2d857d76edca4a5d41c91a647d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_dot_erlang.boot&lt;/code&gt; - Loads the code for and starts the applications Kernel and STDLIB. Skips loading the file &lt;code&gt;.erlang&lt;/code&gt;. Useful for scripts and other tools that are to behave the same irrespective of user preferences.</source>
          <target state="translated">&lt;code&gt;no_dot_erlang.boot&lt;/code&gt; - 응용 프로그램 커널 및 STDLIB에 대한 코드를로드하고 시작합니다. &lt;code&gt;.erlang&lt;/code&gt; 파일로드를 건너 뜁니다 . 사용자 기본 설정에 관계없이 동일하게 동작하는 스크립트 및 기타 도구에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f8159cf71197decb91bba2603f85ca3c5311257c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_exists&lt;/code&gt;. Tried to perform operation on non-existing (not-alive) item.</source>
          <target state="translated">&lt;code&gt;no_exists&lt;/code&gt; . 존재하지 않는 (생존하지 않는) 항목에서 작업을 수행하려고했습니다.</target>
        </trans-unit>
        <trans-unit id="82885b597712907220180d0456fef06dc2e5ad77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), number of local calls, resolved external calls and unresolved calls of the application's modules;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 로컬 호출 수, 확인 된 외부 호출 및 응용 프로그램 모듈의 확인되지 않은 호출;</target>
        </trans-unit>
        <trans-unit id="abad1ab806a090043a7399d16fc637d9d45bfa9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), number of local calls, resolved external calls and unresolved calls of the release's modules;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 로컬 호출 수, 확인 된 외부 호출 및 릴리스 모듈의 확인되지 않은 호출;</target>
        </trans-unit>
        <trans-unit id="927ea8a6ac92101eaeee49fc7759faa70479b07e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), number of local calls, resolved external calls and unresolved calls;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 로컬 전화 수, 확인 된 외부 전화 및 확인되지 않은 전화;</target>
        </trans-unit>
        <trans-unit id="dddc264cec4aa69635153ca10c089b48a0f915cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), total number of &lt;code&gt;&lt;a href=&quot;#local_call&quot;&gt;local calls&lt;/a&gt;&lt;/code&gt;, resolved &lt;code&gt;&lt;a href=&quot;#external_call&quot;&gt;external calls&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#unresolved_call&quot;&gt;unresolved calls&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 총 &lt;code&gt;&lt;a href=&quot;#local_call&quot;&gt;local calls&lt;/a&gt;&lt;/code&gt; , 확인 된 &lt;code&gt;&lt;a href=&quot;#external_call&quot;&gt;external calls&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#unresolved_call&quot;&gt;unresolved calls&lt;/a&gt;&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="3f93645c3a2ad16c4c220fb0f5903bb022c20d75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt;. The sum of the number of local calls, resolved external calls and unresolved calls:</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; . 로컬 통화 수, 해결 된 외부 통화 및 해결되지 않은 통화 수의 합 :</target>
        </trans-unit>
        <trans-unit id="5d54535e458072031c144f3342d1a1d99b65bc88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt; (*), number of local and exported functions of the application's modules;</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; (*), 응용 프로그램 모듈의 로컬 및 내 보낸 기능 수;</target>
        </trans-unit>
        <trans-unit id="6d9dd2a7d5654afbf1777e3b26dacb4c6829409f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt; (*), number of local and exported functions of the release's modules;</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; (*), 릴리스 모듈의 로컬 및 내 보낸 기능 수;</target>
        </trans-unit>
        <trans-unit id="edef508993f68f5059132aaa9faba0b60b516a90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt; (*), number of local and exported functions;</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; (*), 로컬 및 내 보낸 함수 수;</target>
        </trans-unit>
        <trans-unit id="5cb4c090444b4ce0ceb1ab98992c1c0dccb91d53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt; (*), total number of local and exported functions;</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; (*), 총 로컬 및 내 보낸 함수 수;</target>
        </trans-unit>
        <trans-unit id="e39499dbf292fa55f350939b5fb99b2713fa9900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt;. Functions in library modules and the functions &lt;code&gt;module_info/0,1&lt;/code&gt; are not counted by &lt;code&gt;info&lt;/code&gt;. Assuming that &lt;code&gt;&quot;Extra := _:module_info/\&quot;(0|1)\&quot; + LM&quot;&lt;/code&gt; has been evaluated, the sum of the number of local and exported functions are:</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; . 라이브러리 모듈의 함수 및 &lt;code&gt;module_info/0,1&lt;/code&gt; 함수 는 &lt;code&gt;info&lt;/code&gt; 로 계산되지 않습니다 . &lt;code&gt;&quot;Extra := _:module_info/\&quot;(0|1)\&quot; + LM&quot;&lt;/code&gt; 이 평가 되었다고 가정하면 로컬 및 내 보낸 함수 수의 합은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1cb8c89ebdb82d14e0c41079ed0dccd8096d97e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), number of calls of the Inter Call Graph of the application's modules;</source>
          <target state="translated">&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), 어플리케이션 모듈의 Inter Call Graph 호출 횟수;</target>
        </trans-unit>
        <trans-unit id="efafb2a0b1387c320ddf78855347b5723dfca86b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), number of calls of the Inter Call Graph of the release's modules.</source>
          <target state="translated">&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), 릴리스 모듈의 Inter Call Graph 호출 횟수.</target>
        </trans-unit>
        <trans-unit id="d9cad2d263b0da974f0dda709e4093c104a7cbe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), number of calls of the Inter Call Graph;</source>
          <target state="translated">&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), 인터 콜 그래프의 호출 수;</target>
        </trans-unit>
        <trans-unit id="fac15effd353ffc2744d4b07731c62d5be046974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), total number of calls of the &lt;code&gt;&lt;a href=&quot;#inter_call_graph&quot;&gt;Inter Call Graph&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no_inter_function_calls&lt;/code&gt; (*), &lt;code&gt;&lt;a href=&quot;#inter_call_graph&quot;&gt;Inter Call Graph&lt;/a&gt;&lt;/code&gt; 의 총 호출 수 .</target>
        </trans-unit>
        <trans-unit id="95a89aeb94b0962e6b93fa571936e8b070543d0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_node_processor_spread&lt;/code&gt; - Like &lt;code&gt;processor_spread&lt;/code&gt;, but if multiple NUMA nodes exist, schedulers are spread over one NUMA node at a time, that is, all logical processors of one NUMA node are bound to schedulers in sequence.</source>
          <target state="translated">&lt;code&gt;no_node_processor_spread&lt;/code&gt; - &lt;code&gt;processor_spread&lt;/code&gt; 와 유사 하지만 여러 NUMA 노드가 존재하는 경우 스케줄러는 한 번에 하나의 NUMA 노드에 분산됩니다. 즉, 하나의 NUMA 노드의 모든 논리 프로세서가 순차적으로 스케줄러에 바인드됩니다.</target>
        </trans-unit>
        <trans-unit id="a3b2211f23a7d4865f1f6e7f00b1e5d2ad18b34f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_node_thread_spread&lt;/code&gt; - Like &lt;code&gt;thread_spread&lt;/code&gt;, but if multiple Non-Uniform Memory Access (NUMA) nodes exist, schedulers are spread over one NUMA node at a time, that is, all logical processors of one NUMA node are bound to schedulers in sequence.</source>
          <target state="translated">&lt;code&gt;no_node_thread_spread&lt;/code&gt; - &lt;code&gt;thread_spread&lt;/code&gt; 와 유사 하지만 여러 NUMA (Non-Uniform Memory Access) 노드가 존재하는 경우 스케줄러는 한 번에 하나의 NUMA 노드에 분산됩니다. 즉, 하나의 NUMA 노드의 모든 논리 프로세서가 스케줄러에 순서대로 바인드됩니다.</target>
        </trans-unit>
        <trans-unit id="117b2686f08dd4b68e920e9d37b568d3731f34bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_receiver&lt;/code&gt; - No information is delivered.</source>
          <target state="translated">&lt;code&gt;no_receiver&lt;/code&gt; - 정보가 전달되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c05df0753367d81aac1fdf741efbac04e91311d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_releases&lt;/code&gt;, number of releases;</source>
          <target state="translated">&lt;code&gt;no_releases&lt;/code&gt; , 릴리즈 수;</target>
        </trans-unit>
        <trans-unit id="3e2cdbfae050d374ccc76da5e3157afdfa1155d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_spread&lt;/code&gt; - Schedulers with close scheduler identifiers are bound as close as possible in hardware.</source>
          <target state="translated">&lt;code&gt;no_spread&lt;/code&gt; - 스케줄러 식별자가 가까운 스케줄러는 하드웨어에서 가능한 한 가깝게 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="65646aed00a01b3c49898a59a3ec41c01f4675cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_transaction&lt;/code&gt;. Operation not allowed outside transactions.</source>
          <target state="translated">&lt;code&gt;no_transaction&lt;/code&gt; . 트랜잭션 외부에서는 작업이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="512a2f0959a213189e7c84acd2e0c845f0a8038d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noconnection&lt;/code&gt; if &lt;code&gt;PidOrPort&lt;/code&gt; is remote and a connection between the nodes could not be established or was severed.</source>
          <target state="translated">&lt;code&gt;noconnection&lt;/code&gt; 경우 &lt;code&gt;PidOrPort&lt;/code&gt; 는 원격와 노드 사이의 연결을 설정할 수 없습니다 또는 단절되었습니다.</target>
        </trans-unit>
        <trans-unit id="2d6d1672b50bb8ba17a6c0778791296b674a11a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; is like &lt;code&gt;setup&lt;/code&gt;, but with a built-in behaviour: it starts a slave node for the duration of the tests. The atom &lt;code&gt;Node&lt;/code&gt; should have the format &lt;code&gt;nodename@full.machine.name&lt;/code&gt;, and &lt;code&gt;Args&lt;/code&gt; are the optional arguments to the new node; see &lt;code&gt;slave:start_link/3&lt;/code&gt; for details.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 는 &lt;code&gt;setup&lt;/code&gt; 과 비슷하지만 동작이 내장되어 있습니다. 테스트 기간 동안 슬레이브 노드를 시작합니다. atom &lt;code&gt;Node&lt;/code&gt; 는 &lt;code&gt;nodename@full.machine.name&lt;/code&gt; 형식이어야 하며 &lt;code&gt;Args&lt;/code&gt; 는 새 노드에 대한 선택적 인수입니다. 자세한 내용은 &lt;code&gt;slave:start_link/3&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ef2a36547ba068cc5c118ce8ed9807723932d8b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; is the name of the C-node.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 는 C 노드 의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f1fff716424eb26367402b1770fad337312150c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; is the name of the remote node.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 는 원격 노드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1db03ee3209b654c2bc23d0ef7b742b288c3bcbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; is the node name. It is to be of the form &lt;strong&gt;alivename@hostname&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 는 노드 이름입니다. &lt;strong&gt;alivename @ hostname&lt;/strong&gt; 형식 &lt;strong&gt;이어야&lt;/strong&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c16649d9dacf014610a0a7e953b7fcc527b42dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; refers to Non-Uniform Memory Access (NUMA) nodes. &lt;code&gt;thread&lt;/code&gt; refers to hardware threads (for example, Intel hyper-threads).</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 는 NUMA (Non-Uniform Memory Access) 노드를 나타냅니다. &lt;code&gt;thread&lt;/code&gt; 는 하드웨어 스레드 (예 : Intel 하이퍼 스레드)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3d6f3c9d02dbc0c583af9223ba277621196dfd9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node_not_running&lt;/code&gt;. Node is not running.</source>
          <target state="translated">&lt;code&gt;node_not_running&lt;/code&gt; . 노드가 실행되고 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="052d7914127418dd7d905d2d66a2c30a0b4f0c6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodedown&lt;/code&gt; messages are delivered after the corresponding node has disappeared in results from &lt;code&gt;erlang:nodes/X&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nodedown&lt;/code&gt; &lt;code&gt;erlang:nodes/X&lt;/code&gt; 의 결과로 해당 노드가 사라진 후 nodedown 메시지가 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="88213682ffe2404c0b5313c91b5ee679a66af1e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodedown&lt;/code&gt; messages are not delivered until all messages from the remote node that have been passed through the connection have been delivered.</source>
          <target state="translated">&lt;code&gt;nodedown&lt;/code&gt; 연결을 통해 전달 된 원격 노드의 모든 메시지가 전달 될 때까지 노드 다운 메시지가 전달되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e2b33fd4c08c6edfd10698a405956ea09f72a3c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodes&lt;/code&gt; - A list of node names (or an atom describing a list of nodes) defining where to open the table. Its up to the user to ensure that mnesia is actually running on the specified nodes.</source>
          <target state="translated">&lt;code&gt;nodes&lt;/code&gt; - 테이블을 열 위치를 정의하는 노드 이름 목록 (또는 노드 목록을 설명하는 아톰)입니다. mnesia가 실제로 지정된 노드에서 실행되고 있는지 확인하는 것은 사용자의 몫입니다.</target>
        </trans-unit>
        <trans-unit id="9d5f3c6afe58777d4fdf80a91b58e137c8361c9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeup&lt;/code&gt; messages are delivered after the corresponding node appears in results from &lt;code&gt;erlang:nodes/X&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nodeup&lt;/code&gt; 해당 노드가 &lt;code&gt;erlang:nodes/X&lt;/code&gt; 의 결과에 나타난 후에 nodeup 메시지가 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="4408f46c27fe4c804ac77e2e4cada1280ac26afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeup&lt;/code&gt; messages are delivered before delivery of any message from the remote node passed through the newly established connection.</source>
          <target state="translated">&lt;code&gt;nodeup&lt;/code&gt; 메시지는 새로 설정된 연결을 통해 전달 된 원격 노드에서 메시지를 전달하기 전에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="1a10e15ee092631f16aa5fde85bac87e28461900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; (no &lt;code&gt;PhraseArgs&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; ( &lt;code&gt;PhraseArgs&lt;/code&gt; 없음 ).</target>
        </trans-unit>
        <trans-unit id="b8ff9db9ac6c14ce550a866f267c9e7f5e48ac09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noproc&lt;/code&gt; is sent immediately if &lt;code&gt;PidOrPort&lt;/code&gt; does not exist at the time of linking (if the caller is trapping exits or &lt;code&gt;PidOrPort&lt;/code&gt; is remote).</source>
          <target state="translated">&lt;code&gt;noproc&lt;/code&gt; 가 존재하지 않으면 &lt;code&gt;PidOrPort&lt;/code&gt; 이 즉시 전송됩니다 (호출자가 종료를 트래핑하거나 &lt;code&gt;PidOrPort&lt;/code&gt; 가 원격 인 경우).</target>
        </trans-unit>
        <trans-unit id="28c2c9dbd3e254fbac7255e0733edb2a01a5dc28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normal&lt;/code&gt; also if the application is distributed and started at the current node because of a failover from another node, and the application specification key &lt;code&gt;start_phases == undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;normal&lt;/code&gt; 응용 프로그램 배포 때문에 다른 노드에서 장애의 현재 노드에서 시작하고, 프로그램 사양 키 경우도 &lt;code&gt;start_phases == undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4e0c035acf102998ae94e6e36b59b6b942f61072" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normal&lt;/code&gt; if it is a normal startup.</source>
          <target state="translated">&lt;code&gt;normal&lt;/code&gt; 시작 인 경우 정상입니다.</target>
        </trans-unit>
        <trans-unit id="ca08e3c6460172425bba8df94434b0ade8addb4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normal&lt;/code&gt;, if the event handler has been removed because of a call to &lt;code&gt;delete_handler/3&lt;/code&gt;, or &lt;code&gt;remove_handler&lt;/code&gt; has been returned by a callback function (see below).</source>
          <target state="translated">&lt;code&gt;normal&lt;/code&gt; &lt;code&gt;delete_handler/3&lt;/code&gt; 에 대한 호출로 인해 이벤트 핸들러가 제거 되었거나 콜백 함수에 의해 &lt;code&gt;remove_handler&lt;/code&gt; 가 리턴 된 경우 normal입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="d640428a232dc900f184e1be43e865d7734ba6fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not_a_db_node&lt;/code&gt;. A node was mentioned that does not exist in the schema.</source>
          <target state="translated">&lt;code&gt;not_a_db_node&lt;/code&gt; . 스키마에없는 노드가 언급되었습니다.</target>
        </trans-unit>
        <trans-unit id="49d589507dc218c4682e6aaaeea5ed23e61d1835" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notification_delivery_info()&lt;/code&gt; - The information is delivered via a function call according to this data. See the &lt;code&gt;&lt;a href=&quot;#data_types&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt; section above for details.</source>
          <target state="translated">&lt;code&gt;notification_delivery_info()&lt;/code&gt; -정보는이 데이터에 따라 함수 호출을 통해 전달됩니다. 자세한 내용은 위 의 &lt;code&gt;&lt;a href=&quot;#data_types&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6a1792ff80f20f1b5a27cac8e032c63e0a675629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#notify&quot;&gt;Notify Definitions&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;notify.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#notify&quot;&gt;Notify Definitions&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="6a0c457d12d899dd091d4d9d5e75351206149c80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify/1&lt;/code&gt; does not fail even if the specified event manager does not exist, unless it is specified as &lt;code&gt;Name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;notify/1&lt;/code&gt; &lt;code&gt;Name&lt;/code&gt; 으로 지정되지 않은 경우, 지정된 이벤트 관리자가 존재하지 않아도 notify / 1 은 실패하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0c7777adceda0588e49fd9e8d13a21ce238eb170" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify/2&lt;/code&gt; is asynchronous and returns immediately after the event notification has been sent. &lt;code&gt;sync_notify/2&lt;/code&gt; is synchronous in the sense that it returns &lt;code&gt;ok&lt;/code&gt; after the event has been handled by all event handlers.</source>
          <target state="translated">&lt;code&gt;notify/2&lt;/code&gt; 는 비동기식이며 이벤트 알림이 전송 된 직후에 반환됩니다. &lt;code&gt;sync_notify/2&lt;/code&gt; 는 모든 이벤트 핸들러가 이벤트를 처리 한 후 &lt;code&gt;ok&lt;/code&gt; 를 리턴한다는 점에서 동기식입니다 .</target>
        </trans-unit>
        <trans-unit id="cbf7df3164734a2d89b4e5c6fb47a29936b9621e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;npos&lt;/code&gt; indicates the number of unique positions that are occupied in the registry.</source>
          <target state="translated">&lt;code&gt;npos&lt;/code&gt; 는 레지스트리에서 점유 된 고유 위치 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2eec85f72561346cbcf55f313290a698cf790a12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nsswitch_conf&lt;/code&gt; (Unix nsswitch.conf)</source>
          <target state="translated">&lt;code&gt;nsswitch_conf&lt;/code&gt; (Unix nsswitch.conf)</target>
        </trans-unit>
        <trans-unit id="94d339f86242bdbeba773c1ed946cc8d90d5e576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nteventlog&lt;/code&gt; provides a generic interface to the Windows event log. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nteventlog&lt;/code&gt; 는 Windows 이벤트 로그에 대한 일반 인터페이스를 제공합니다. OS_Mon 애플리케이션의 일부입니다 . &lt;code&gt;os_mon(6)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b33fc178fa190d609bda44ab93d4388cd8bfc865" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nteventlog&lt;/code&gt; provides a generic interface to the Windows event log. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Windows versions where the event log is available. That is, not for Windows 98 and some other older Windows versions, but for most (all?) newer Windows versions.</source>
          <target state="translated">&lt;code&gt;nteventlog&lt;/code&gt; 는 Windows 이벤트 로그에 대한 일반 인터페이스를 제공합니다. OS_Mon 응용 프로그램의 일부입니다 &lt;code&gt;os_mon(6)&lt;/code&gt; 참조 ) . 이벤트 로그가 사용 가능한 Windows 버전에서 사용 가능합니다. 즉, Windows 98 및 기타 이전 Windows 버전이 아니라 대부분의 최신 Windows 버전입니다.</target>
        </trans-unit>
        <trans-unit id="724cb43a4461868a7cf85655c3f71fd1ea4ee699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt; and &lt;code&gt;creation&lt;/code&gt; are arbitrary numbers. Notice that these are limited in precision, so only the low 18 and 2 bits of these numbers are used.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 와 &lt;code&gt;creation&lt;/code&gt; 은 임의의 숫자입니다. 이것들은 정밀도가 제한되어 있으므로이 숫자의 하위 18 및 2 비트 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1d1bb0f0a6792413c00fa6016712868b7695b55f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt; is to be chosen uniquely for each reference created for a given C-node.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 는 주어진 C- 노드에 대해 생성 된 각 참조에 대해 고유하게 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="1355204958af6b103c98549b7fc8c56811824b4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt; is used by &lt;code&gt;erl_connect_init()&lt;/code&gt; to construct the actual node name. In Example 2 below, &lt;strong&gt;&quot;c17@a.DNS.name&quot;&lt;/strong&gt; is the resulting node name.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 는 &lt;code&gt;erl_connect_init()&lt;/code&gt; 에서 실제 노드 이름을 구성하는 데 사용됩니다 . 아래 예 2에서 &lt;strong&gt;&quot;c17@a.DNS.name&quot;&lt;/strong&gt; 은 결과 노드 이름입니다.</target>
        </trans-unit>
        <trans-unit id="79f9dadce8ee4cdc1f698d2d1fb9e7f783442ec2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;serial&lt;/code&gt;, and &lt;code&gt;creation&lt;/code&gt; are arbitrary numbers. Notice that these are limited in precision, so only the low 15, 3, and 2 bits of these numbers are used.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; , &lt;code&gt;serial&lt;/code&gt; 및 &lt;code&gt;creation&lt;/code&gt; 은 임의의 숫자입니다. 이것들은 정밀도가 제한되어 있으므로이 숫자의 하위 15, 3 및 2 비트 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e9d930ab82a22b8379cfe0c39b14e88db889b25b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nxdomain&lt;/code&gt; - Hostname or domain name cannot be found</source>
          <target state="translated">&lt;code&gt;nxdomain&lt;/code&gt; - 호스트 이름 또는 도메인 이름을 찾을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="614d7c30c49dc184868ba92d7ff31fb238df82a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;o&lt;/code&gt; - Overflow. An untagged integer that does not fit in a machine word.</source>
          <target state="translated">&lt;code&gt;o&lt;/code&gt; - 오버플로. 기계어에 맞지 않는 태그없는 정수.</target>
        </trans-unit>
        <trans-unit id="5d143797690bba824e96e4e940c127c94ee42769" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;o&lt;/code&gt; - Overflow. If the value for an &lt;code&gt;u&lt;/code&gt; operand does not fit in a machine word, the type of the operand will be changed to &lt;code&gt;o&lt;/code&gt; (with no associated value). Currently only used internally in the loader in the guard constraint function &lt;code&gt;binary_too_big()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;o&lt;/code&gt; - 오버플로. &lt;code&gt;u&lt;/code&gt; 피연산자 의 값 이 기계어에 맞지 않으면 피연산자의 유형이 &lt;code&gt;o&lt;/code&gt; (연관된 값 없음) 로 변경됩니다 . 현재는 가드 제약 함수 &lt;code&gt;binary_too_big()&lt;/code&gt; 의 로더 내부에서만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="56a2a8054663d169121aa0cad1a8723367694a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;observer&lt;/code&gt; is a GUI tool that can connect to remote nodes and display a variety of information about the running system.</source>
          <target state="translated">&lt;code&gt;observer&lt;/code&gt; 는 원격 노드에 연결하고 실행중인 시스템에 대한 다양한 정보를 표시 할 수있는 GUI 도구입니다.</target>
        </trans-unit>
        <trans-unit id="dce652cece3249245763b1426afca45ac811d3c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obuf&lt;/code&gt; is a pointer to an &lt;code&gt;ei_reg_stat&lt;/code&gt; structure, defined as follows:</source>
          <target state="translated">&lt;code&gt;obuf&lt;/code&gt; 는 다음과 같이 정의 된 &lt;code&gt;ei_reg_stat&lt;/code&gt; 구조에 대한 포인터입니다 .</target>
        </trans-unit>
        <trans-unit id="85e0627fc7b8ba286acf6b1dc43837e32ecda87f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;obuf&lt;/code&gt; is a pointer to an &lt;code&gt;ei_reg_tabstat&lt;/code&gt; structure, defined as follows:</source>
          <target state="translated">&lt;code&gt;obuf&lt;/code&gt; 는 다음과 같이 정의 된 &lt;code&gt;ei_reg_tabstat&lt;/code&gt; 구조에 대한 포인터입니다 .</target>
        </trans-unit>
        <trans-unit id="b77505716641f56accb4bd8d20de08b566a0749c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok&lt;/code&gt; = the transfer is complete.</source>
          <target state="translated">&lt;code&gt;ok&lt;/code&gt; = 전송이 완료되었습니다.</target>
        </trans-unit>
        <trans-unit id="afa1fee92c97ddb794986fcd3d2868cd4a22401e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;old_heap : integer&lt;/code&gt; :: Old heap word size. Ex. &lt;code&gt;233&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;old_heap : integer&lt;/code&gt; :: 오래된 힙 단어 크기. 전의. &lt;code&gt;233&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61a817f913661b77c2a4bc6e8aba530abb4ceb28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;one_for_all&lt;/code&gt; - If one child process terminates and is to be restarted, all other child processes are terminated and then all child processes are restarted.</source>
          <target state="translated">&lt;code&gt;one_for_all&lt;/code&gt; - 하나의 하위 프로세스가 종료되고 다시 시작되면 다른 모든 하위 프로세스가 종료 된 후 모든 하위 프로세스가 다시 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="693ff57ce00caf398f99ebaa04da5ed6e07a518c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;one_for_one&lt;/code&gt; - If one child process terminates and is to be restarted, only that child process is affected. This is the default restart strategy.</source>
          <target state="translated">&lt;code&gt;one_for_one&lt;/code&gt; - 하나의 하위 프로세스가 종료되고 다시 시작되는 경우 해당 하위 프로세스 만 영향을받습니다. 이것이 기본 재시작 전략입니다.</target>
        </trans-unit>
        <trans-unit id="0259e85e3f9e9bf879d61bd806f545c122cb1235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;one_n_minus_one&lt;/code&gt; - Perform 1/n-1 BEAST mitigation.</source>
          <target state="translated">&lt;code&gt;one_n_minus_one&lt;/code&gt; -1 / n-1 BEAST 완화를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="4904209ada4d109d17de8535b0eba26ad8a7ec3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;opaque()&lt;/code&gt; - as returned by &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/3&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;opaque()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/3&lt;/a&gt;&lt;/code&gt; 의해 반환</target>
        </trans-unit>
        <trans-unit id="f152d15bb119d04e3f5da9695e993efdbfc1d484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open/1&lt;/code&gt; cannot be used for changing the values of options of an open log. When there are prior owners or users of a log, all option values except &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;linkto&lt;/code&gt;, and &lt;code&gt;notify&lt;/code&gt; are only checked against the values supplied before as option values to function &lt;code&gt;open/1&lt;/code&gt;, &lt;code&gt;change_header/2&lt;/code&gt;, &lt;code&gt;change_notify/3&lt;/code&gt;, or &lt;code&gt;change_size/2&lt;/code&gt;. Thus, none of the options except &lt;code&gt;name&lt;/code&gt; is mandatory. If some specified value differs from the current value, a tuple &lt;code&gt;{error, {arg_mismatch, OptionName, CurrentValue, Value}}&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;open/1&lt;/code&gt; 은 열린 로그의 옵션 값을 변경하는 데 사용할 수 없습니다. 로그의 이전 소유자 또는 사용자가있는 경우 &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;linkto&lt;/code&gt; 및 &lt;code&gt;notify&lt;/code&gt; 를 제외한 모든 옵션 값 은 &lt;code&gt;open/1&lt;/code&gt; , &lt;code&gt;change_header/2&lt;/code&gt; , &lt;code&gt;change_notify/3&lt;/code&gt; 또는 &lt;code&gt;change_size/2&lt;/code&gt; 기능 옵션 옵션으로 이전에 제공된 값에 대해서만 점검 됩니다. . 따라서 &lt;code&gt;name&lt;/code&gt; 을 제외한 옵션 은 필수가 아닙니다 . 지정된 값이 현재 값과 다른 경우 튜플 &lt;code&gt;{error, {arg_mismatch, OptionName, CurrentValue, Value}}&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6cf7b80caafc11b489ff1be96e9777b37874dc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open/1&lt;/code&gt; returns &lt;code&gt;{ok, Log}&lt;/code&gt; if the log file is successfully opened. If the file is successfully repaired, the tuple &lt;code&gt;{repaired, Log, {recovered, Rec}, {badbytes, Bad}}&lt;/code&gt; is returned, where &lt;code&gt;Rec&lt;/code&gt; is the number of whole Erlang terms found in the file and &lt;code&gt;Bad&lt;/code&gt; is the number of bytes in the file that are non-Erlang terms. If the parameter &lt;code&gt;distributed&lt;/code&gt; is specified, &lt;code&gt;open/1&lt;/code&gt; returns a list of successful replies and a list of erroneous replies. Each reply is tagged with the node name.</source>
          <target state="translated">&lt;code&gt;open/1&lt;/code&gt; 로그 파일이 성공적으로 열리면 open / 1 은 &lt;code&gt;{ok, Log}&lt;/code&gt; 반환합니다. 파일이 성공적으로 복구되면 튜플 &lt;code&gt;{repaired, Log, {recovered, Rec}, {badbytes, Bad}}&lt;/code&gt; 가 반환됩니다. 여기서 &lt;code&gt;Rec&lt;/code&gt; 는 파일에서 찾은 전체 Erlang 용어 수이고 &lt;code&gt;Bad&lt;/code&gt; 는 바이트 수입니다. Erlang 이외의 용어 인 파일 &lt;code&gt;distributed&lt;/code&gt; 매개 변수 가 지정된 경우, &lt;code&gt;open/1&lt;/code&gt; 은 성공적인 응답 목록과 잘못된 응답 목록을 리턴합니다. 각 응답에는 노드 이름이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0922ad9842e4e437c67b18ea27fb19fba3030db2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open_port/2&lt;/code&gt;, which is used to create ports, returns a value of this data type.</source>
          <target state="translated">&lt;code&gt;open_port/2&lt;/code&gt; 포트를 작성하는 데 사용되는 open_port / 2 는이 데이터 유형의 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="2c8d92d29c0874bfff3377e8eba0596891a3993f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;opts&lt;/code&gt; is a pointer to thread options to destroy.</source>
          <target state="translated">&lt;code&gt;opts&lt;/code&gt; 는 파괴 할 스레드 옵션에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="0ba0202e2d7d4f65a966eb62b085378fc6e20503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;order&lt;/code&gt; defines if the deny or allow control is to be performed first.</source>
          <target state="translated">&lt;code&gt;order&lt;/code&gt; 는 거부 또는 허용 제어가 먼저 수행되는지 여부를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="1bcf67eeb49a2004ff50fb4545a2daa814129c16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os:cmd/2&lt;/code&gt; was added in kernel-5.5 (OTP-20.2.1). It makes it possible to pass an options map as the second argument in order to control the behaviour of &lt;code&gt;os:cmd&lt;/code&gt;. The possible options are:</source>
          <target state="translated">&lt;code&gt;os:cmd/2&lt;/code&gt; 가 kernel-5.5 (OTP-20.2.1)에 추가되었습니다. &lt;code&gt;os:cmd&lt;/code&gt; 의 동작을 제어하기 위해 옵션 맵을 두 번째 인수로 전달할 수 있습니다 . 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3763b884735128f6813b3b38f8317f5213464697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os_mon(6)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;os_mon(6)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7896902d5b23e1ba520c38f29ff83e640d15206b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os_mon(6)&lt;/code&gt;, &lt;code&gt;snmp(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;os_mon(6)&lt;/code&gt; , &lt;code&gt;snmp(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2104b5697c69e82cf781d50f0c4e0cef912b6d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os_sup&lt;/code&gt; is a process providing a message passing service from the operating system to the error logger in the Erlang runtime system. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Solaris and Windows.</source>
          <target state="translated">&lt;code&gt;os_sup&lt;/code&gt; 은 운영 체제에서 Erlang 런타임 시스템의 오류 로거로 메시지 전달 서비스를 제공하는 프로세스입니다. OS_Mon 응용 프로그램의 일부입니다 &lt;code&gt;os_mon(6)&lt;/code&gt; 참조 ) . Solaris 및 Windows에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="60ff1866ca37a7e6f32a269217966191d981913e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;otp_build boot -a&lt;/code&gt; will first build a bootstrap system for the build machine and then do the cross build of the system.</source>
          <target state="translated">&lt;code&gt;otp_build boot -a&lt;/code&gt; 는 먼저 빌드 머신의 부트 스트랩 시스템을 빌드 한 다음 시스템의 크로스 빌드를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="0b889d98885a8fabd6556374ff26a8ecc91b72f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;otp_build configure&lt;/code&gt; will configure both for the boostrap system on the build machine and the cross host system.</source>
          <target state="translated">&lt;code&gt;otp_build configure&lt;/code&gt; 는 빌드 머신의 부 스트랩 시스템과 크로스 호스트 시스템 모두에 대해 구성합니다.</target>
        </trans-unit>
        <trans-unit id="542f01b9555349076e7a3fea529d9a9b9468c7f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;otp_build release -a&lt;/code&gt; will do the same as (5), and you will after this have to do a manual install either by doing (6), or (7).</source>
          <target state="translated">&lt;code&gt;otp_build release -a&lt;/code&gt; 는 (5)와 동일하게 수행되며,이 후에 (6) 또는 (7)을 수행하여 수동 설치를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd10f835d85942a34946a9e0c04affd5300253df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overload threshold&lt;/code&gt;. When the load on some node exceeds some application-specific threshold, it can be time to either add or move some fragment replicas to nodes with lower load. Take extra care if the table has a foreign key relation to some other table. To avoid severe performance penalties, the same redistribution must be performed for all the related tables.</source>
          <target state="translated">&lt;code&gt;overload threshold&lt;/code&gt; . 일부 노드의로드가 애플리케이션 특정 임계 값을 초과하면로드가 적은 일부 조각 복제본을 노드에 추가하거나 이동해야 할 때입니다. 테이블에 다른 테이블과 외래 키 관계가있는 경우 각별히주의하십시오. 심각한 성능 저하를 피하려면 모든 관련 테이블에 대해 동일한 재배포를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="68344155372e6961a5132c56b90b16293cd4ba4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; - The 0 failure label, meaning that an exception should be raised if the instruction fails. (Will not be stored in the loaded code.)</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; -0 실패 레이블. 명령이 실패하면 예외가 발생해야 함을 의미합니다. (로드 된 코드에 저장되지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="9bd1ff409ec0750e81aa9d04adfe57598f578571" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; - The zero failure label.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; - 제로 실패 레이블.</target>
        </trans-unit>
        <trans-unit id="4eb88be1b347cecde97617dd50ea35054024f673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; - Zero failure label.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; - 제로 실패 레이블.</target>
        </trans-unit>
        <trans-unit id="070344dc3c10d66adb7c38d9c733f2ee1324917d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; is a pointer to the binary object. The object itself must have been created through a single call to &lt;code&gt;malloc()&lt;/code&gt; or a similar function, so that the registry can later delete it if necessary by calling &lt;code&gt;free()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 는 이진 객체에 대한 포인터입니다. 객체 자체는 &lt;code&gt;malloc()&lt;/code&gt; 또는 유사한 함수에 대한 단일 호출을 통해 작성 되었으므로 레지스트리가 나중에 필요한 경우 &lt;code&gt;free()&lt;/code&gt; 를 호출하여 삭제할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="208bfd1fb6273bbc6857f2f1b58c54da33b30f31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pad_char&lt;/code&gt; is the padding character.</source>
          <target state="translated">&lt;code&gt;pad_char&lt;/code&gt; 는 패딩 문자입니다.</target>
        </trans-unit>
        <trans-unit id="5cfb35d103fcd1afcfab0b2ac9968766b8d5ad3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent : string&lt;/code&gt; :: Process ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;parent : string&lt;/code&gt; :: 프로세스 ID. 전의. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd7b814292c1cc0efe1bfa4cd5c0348144c08fc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse_query/1&lt;/code&gt; parses incoming data to &lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt; scripts (see &lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt;) as defined in the standard URL format, that is, '+' becomes 'space' and decoding of hexadecimal characters (&lt;code&gt;%xx&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse_query/1&lt;/code&gt; 은 표준 URL 형식으로 정의 된대로 수신 데이터를 &lt;code&gt;erl&lt;/code&gt; 및 &lt;code&gt;eval&lt;/code&gt; 스크립트 ( &lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt; 참조 )로 구문 분석 합니다. 즉, '+'는 'space'가되고 16 진 문자 ( &lt;code&gt;%xx&lt;/code&gt; )가 디코딩 됩니다.</target>
        </trans-unit>
        <trans-unit id="18fa351e18b546a01891ed3fd67dcf620c2badf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;partition(F,&amp;nbsp;S1,&amp;nbsp;S2)&lt;/code&gt; is equivalent to &lt;code&gt;{restriction(F,&amp;nbsp;S1,&amp;nbsp;S2), drestriction(F,&amp;nbsp;S1,&amp;nbsp;S2)}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;partition(F,&amp;nbsp;S1,&amp;nbsp;S2)&lt;/code&gt; 는 &lt;code&gt;{restriction(F,&amp;nbsp;S1,&amp;nbsp;S2), drestriction(F,&amp;nbsp;S1,&amp;nbsp;S2)}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8995d005b05558ebaa5646be0205d6be7c6eea89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path() = string()&lt;/code&gt; representing a file or a directory path</source>
          <target state="translated">&lt;code&gt;path() = string()&lt;/code&gt; 파일 또는 디렉토리 경로를 나타내는 string ()</target>
        </trans-unit>
        <trans-unit id="0e73934e89d175b94dad7073f798f7e269c13f6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path() = string()&lt;/code&gt; representing a file path or directory path</source>
          <target state="translated">&lt;code&gt;path() = string()&lt;/code&gt; 파일 경로 또는 디렉토리 경로를 나타내는 string ()</target>
        </trans-unit>
        <trans-unit id="dfd43bedad2dde56094d1fb63abd18f851d30aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path/3&lt;/code&gt; returns the file &lt;code&gt;Path&lt;/code&gt; in the &lt;code&gt;RequestURI&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;http://www.rfc-base.org/rfc-1945.html&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;). If the interaction data &lt;code&gt;{real_name,{Path,AfterPath}}&lt;/code&gt; has been exported by &lt;code&gt;mod_alias&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt; is returned. If no interaction data has been exported, &lt;code&gt;ServerRoot&lt;/code&gt; is used to generate a file &lt;code&gt;Path&lt;/code&gt;. &lt;code&gt;config_db()&lt;/code&gt; and &lt;code&gt;interaction_data()&lt;/code&gt; are as defined in &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path/3&lt;/code&gt; 는 &lt;code&gt;RequestURI&lt;/code&gt; 의 파일 &lt;code&gt;Path&lt;/code&gt; 를 리턴합니다 ( &lt;code&gt;&lt;a href=&quot;http://www.rfc-base.org/rfc-1945.html&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; 참조 ). 상호 작용 데이터 &lt;code&gt;{real_name,{Path,AfterPath}}&lt;/code&gt; 가 &lt;code&gt;mod_alias&lt;/code&gt; 에 의해 익스포트 된 경우 &lt;code&gt;Path&lt;/code&gt; 가 리턴됩니다. 상호 작용 데이터를 익스포트하지 않은 경우 &lt;code&gt;ServerRoot&lt;/code&gt; 를 사용하여 파일 &lt;code&gt;Path&lt;/code&gt; 를 생성합니다 . &lt;code&gt;config_db()&lt;/code&gt; 및 &lt;code&gt;interaction_data()&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt; 정의 된대로입니다 .</target>
        </trans-unit>
        <trans-unit id="d19a6eae0921097bb788ff4b1a29659a02851b5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pdu&lt;/code&gt; - &lt;code&gt;SnmpPduInfo&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#handle_pdu&quot;&gt;handle_pdu&lt;/a&gt;&lt;/code&gt; for more info).</source>
          <target state="translated">&lt;code&gt;pdu&lt;/code&gt; - &lt;code&gt;SnmpPduInfo&lt;/code&gt; ( 자세한 정보는 &lt;code&gt;&lt;a href=&quot;#handle_pdu&quot;&gt;handle_pdu&lt;/a&gt;&lt;/code&gt; 를 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="b051d9d29e76a1e1a06594c1849e87c9466b43bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;peername/2&lt;/code&gt; returns the &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;IPAddress&lt;/code&gt; of the remote &lt;code&gt;Socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;peername/2&lt;/code&gt; 는 원격 &lt;code&gt;Socket&lt;/code&gt; 의 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;IPAddress&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2924c1e2dad1f40758fc0e5f186d139101ab4805" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;permanent change of nodes&lt;/code&gt;. When a new permanent &lt;code&gt;db_node&lt;/code&gt; is introduced or dropped, it can be time to change the pool of nodes and redistribute the replicas evenly over the new pool of nodes. It can also be time to add or delete a fragment before the replicas are redistributed.</source>
          <target state="translated">&lt;code&gt;permanent change of nodes&lt;/code&gt; . 새로운 영구 &lt;code&gt;db_node&lt;/code&gt; 가 소개되거나 삭제되면 노드 풀을 변경하고 복제본을 새 노드 풀에 균등하게 재분배 할 시간이 될 수 있습니다. 복제본을 재배포하기 전에 조각을 추가하거나 삭제할 때가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3fb998fa9dbf3b5d118cbadf86f076137bfb4a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pg2:_/_&lt;/code&gt; (use 'pg' instead)</source>
          <target state="translated">&lt;code&gt;pg2:_/_&lt;/code&gt; (대신 'pg'사용)</target>
        </trans-unit>
        <trans-unit id="3b60ec5325342e0bc65680744f58d7c53501bc7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pg2&lt;/code&gt; is as of &lt;code&gt;&lt;a href=&quot;deprecations#otp-23&quot;&gt;OTP 23 deprecated&lt;/a&gt;&lt;/code&gt; and will be removed in OTP 24.</source>
          <target state="translated">&lt;code&gt;pg2&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;deprecations#otp-23&quot;&gt;OTP 23 deprecated&lt;/a&gt;&lt;/code&gt; OTP 24에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="c8181bde9ea5d7dcd55e6b7e5ae2ab9841a2ed1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pg2&lt;/code&gt; is now deprecated and has also been &lt;code&gt;&lt;a href=&quot;scheduled_for_removal#otp-24&quot;&gt;scheduled for removal&lt;/a&gt;&lt;/code&gt; in OTP 24.</source>
          <target state="translated">&lt;code&gt;pg2&lt;/code&gt; 는 이제 더 이상 사용되지 않으며 OTP 24에서도 &lt;code&gt;&lt;a href=&quot;scheduled_for_removal#otp-24&quot;&gt;scheduled for removal&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1260a8f8c0a48670cf7c26a655b61fc47cfed3bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pg2&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;pg2&lt;/code&gt; 커널의 pg2 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="3864dcecaccb86632693e7453ef4bec437e11df7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pg&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;pg&lt;/code&gt; 커널의 pg 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="609384a2799ee5bf5ed1f7d78fea677596ddb17d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;phash2&lt;/code&gt; - Implies that the &lt;code&gt;erlang:phash2/1&lt;/code&gt; BIF is used.</source>
          <target state="translated">&lt;code&gt;phash2&lt;/code&gt; - &lt;code&gt;erlang:phash2/1&lt;/code&gt; BIF가 사용됨을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="5c472bf2dbda908175ae45fa101c23b6a774d860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;phash&lt;/code&gt; - Implies that the &lt;code&gt;erlang:phash/2&lt;/code&gt; BIF is used.</source>
          <target state="translated">&lt;code&gt;phash&lt;/code&gt; - &lt;code&gt;erlang:phash/2&lt;/code&gt; BIF가 사용됨을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="9ecdfdbad8243eaf2b02881d244cf7f26dcaf8ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pick_peer/4&lt;/code&gt; callbacks are serialized when this option is &lt;code&gt;true&lt;/code&gt;, which is a potential performance bottleneck. A simple Diameter client may suffer no ill effects from using mutable state but a server or agent that responds to incoming request should probably avoid it.</source>
          <target state="translated">&lt;code&gt;pick_peer/4&lt;/code&gt; 이 옵션이 &lt;code&gt;true&lt;/code&gt; 이면pick_peer / 4 콜백이 직렬화 되며 이는 잠재적 성능 병목 현상입니다. 간단한 Diameter 클라이언트는 변경 가능한 상태를 사용하는 데 악영향을 미치지 않지만 들어오는 요청에 응답하는 서버 또는 에이전트는이를 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="3eb4c9f84372672f7a3c34804464e31203703a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid : string&lt;/code&gt; :: Process ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;pid : string&lt;/code&gt; :: 프로세스 ID. 전의. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a679f107d23fdf533b0c3a4df842d9d172f13d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid() | atom()&lt;/code&gt; - The info will be delivered in the following messages:</source>
          <target state="translated">&lt;code&gt;pid() | atom()&lt;/code&gt; -정보는 다음 메시지로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="2611f7c1ad6182adf6b84f1e7d41e1baa31948f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid() | registered_name()&lt;/code&gt; - The info will be delivered in the following messages:</source>
          <target state="translated">&lt;code&gt;pid() | registered_name()&lt;/code&gt; -정보는 다음 메시지로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="ad9c7a366f3a5016df0c4b9e19d80b711b5f6ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid()&lt;/code&gt; = identifier of an FTP connection</source>
          <target state="translated">&lt;code&gt;pid()&lt;/code&gt; = FTP 연결의 식별자</target>
        </trans-unit>
        <trans-unit id="59c537d320130b9edcbb2fc1f251bcb263292ccf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid&lt;/code&gt; is the pid that is to be associated with &lt;code&gt;name&lt;/code&gt;. This value is returned by &lt;code&gt;global&lt;/code&gt; when processes request the location of &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; 는 &lt;code&gt;name&lt;/code&gt; 과 연관 될 pid입니다 . 프로세스가 &lt;code&gt;name&lt;/code&gt; 의 위치를 ​​요청할 때이 값이 &lt;code&gt;global&lt;/code&gt; 의해 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="5d183c618a6588b0342c1d5adbadab0f89c58b5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ping/2&lt;/code&gt; now becomes &lt;code&gt;ping/1&lt;/code&gt; as the argument &lt;code&gt;Pong_PID&lt;/code&gt; is not needed.</source>
          <target state="translated">&lt;code&gt;ping/2&lt;/code&gt; &lt;code&gt;Pong_PID&lt;/code&gt; 인수 가 필요하지 않으므로 ping / 2는 이제 &lt;code&gt;ping/1&lt;/code&gt; 이 됩니다 .</target>
        </trans-unit>
        <trans-unit id="f6ca9e468db9dd82f4fd2e1990527cb8f2c09d28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipe_dir/&lt;/code&gt; is to be &lt;code&gt;/tmp/&lt;/code&gt; (&lt;code&gt;to_erl&lt;/code&gt; uses this name by default).</source>
          <target state="translated">&lt;code&gt;pipe_dir/&lt;/code&gt; 은 &lt;code&gt;/tmp/&lt;/code&gt; ( &lt;code&gt;to_erl&lt;/code&gt; 은 기본적으로이 이름을 사용합니다).</target>
        </trans-unit>
        <trans-unit id="19437503e09eb677bc1f209309200b6daec1519c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pool&lt;/code&gt; manual page in STDLIB</source>
          <target state="translated">&lt;code&gt;pool&lt;/code&gt; STDLIB의 풀 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="d3b0f0c1679880215bb1593abf34a83108819cab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;por(P1, P2)&lt;/code&gt; returns a parser for the language described by the grammar &lt;code&gt;G1&lt;/code&gt; or &lt;code&gt;G2&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;por(P1, P2)&lt;/code&gt; 는 문법 &lt;code&gt;G1&lt;/code&gt; 또는 &lt;code&gt;G2&lt;/code&gt; 로 설명 된 언어에 대한 파서를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="05b55bccfd69f56af11534635e4e2e953ee20ff6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port : string&lt;/code&gt; :: Port ID. Ex. &lt;code&gt;&quot;#Port&amp;lt;0.1031&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;port : string&lt;/code&gt; :: 포트 ID. 전의. &lt;code&gt;&quot;#Port&amp;lt;0.1031&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="109d904eb97aa7ced81b96f2b99474ac53cdef13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; - which defines which UDP port the manager uses for communicating with agents. &lt;strong&gt;Mandatory&lt;/strong&gt; if &lt;code&gt;transports&lt;/code&gt; does not define a port number for every transport.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; - 정의되는 어느 UDP 포트 에이전트와 통신하기위한 관리 용도. &lt;code&gt;transports&lt;/code&gt; 에서 모든 전송에 대한 포트 번호를 정의하지 않은 경우 &lt;strong&gt;필수&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="aa55a5750ec0e9d807a7393a28ac605dbbcb194d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; and &lt;code&gt;bind_address&lt;/code&gt; cannot be changed. Clients trying to access the server during the reload get a service temporary unavailable answer.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 및 &lt;code&gt;bind_address&lt;/code&gt; 는 변경할 수 없습니다. 다시로드하는 동안 서버에 액세스하려고하는 클라이언트는 일시적으로 사용할 수없는 서비스 응답을받습니다.</target>
        </trans-unit>
        <trans-unit id="f073756b4902fc9ba4d6b862440e2da0e3ccc96f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; is a pointer to an integer containing the port number to bind to. If &lt;code&gt;*port&lt;/code&gt; equals &lt;code&gt;0&lt;/code&gt; when calling &lt;code&gt;ei_listen()&lt;/code&gt;, the socket will be bound to an ephemeral port. On success, &lt;code&gt;ei_listen()&lt;/code&gt; will update the value of &lt;code&gt;*port&lt;/code&gt; to the port actually bound to.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 는 바인딩 할 포트 번호를 포함하는 정수에 대한 포인터입니다. 경우 &lt;code&gt;*port&lt;/code&gt; 동일 &lt;code&gt;0&lt;/code&gt; 호출 할 때 &lt;code&gt;ei_listen()&lt;/code&gt; , 소켓은 임시 포트에 바인딩됩니다. 성공하면 &lt;code&gt;ei_listen()&lt;/code&gt; 은 &lt;code&gt;*port&lt;/code&gt; 의 값을 실제로 바인딩 된 포트 로 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="548795fb7fe4eb5fa9c6b0c49478298264a15a9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; is the local name to register, and is to be the same as the port number that was previously bound to the socket.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 는 등록 할 로컬 이름이며 이전에 소켓에 ​​바인드 된 포트 번호와 동일해야합니다.</target>
        </trans-unit>
        <trans-unit id="569a0eca1b4d69be90bc6ec21ea099e6fc76cdbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; is the port handle of the port (driver instance) to set the pid on. &lt;code&gt;pid&lt;/code&gt;is the pid to set.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 는 pid를 설정하기위한 포트 (드라이버 인스턴스)의 포트 핸들입니다. &lt;code&gt;pid&lt;/code&gt; 는 설정할 pid입니다.</target>
        </trans-unit>
        <trans-unit id="81309f9d960a46f7f26c286ad9952dc0bcce3cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; is the port number of the remote node.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 는 원격 노드의 포트 번호입니다.</target>
        </trans-unit>
        <trans-unit id="7a62ba59a9de638facd1c8357fdcecbb4fee602f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port_connect/1&lt;/code&gt; is synchronous, see below.</source>
          <target state="translated">&lt;code&gt;port_connect/1&lt;/code&gt; 은 동기식입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="46275a563a51ed4259f6d468e8ed8b88c206781a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port_level&lt;/code&gt; (port-specific locking)</source>
          <target state="translated">&lt;code&gt;port_level&lt;/code&gt; (포트 특정 잠금)</target>
        </trans-unit>
        <trans-unit id="d054b81553bbe50c72d62a64de29e1a160a9ff8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pos&lt;/code&gt; indicates how many terms to step over in the buffer.</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; 는 버퍼에서 얼마나 많은 항을 넘어서게 하는지 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3005cedef47a43cd61bf191bcae670fb05ba3053" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&lt;/code&gt; specifies which element to retrieve from &lt;code&gt;tuple&lt;/code&gt;. The elements are numbered starting from 1.</source>
          <target state="translated">&lt;code&gt;position&lt;/code&gt; 은 &lt;code&gt;tuple&lt;/code&gt; 에서 검색 할 요소를 지정합니다 . 요소는 1부터 시작하여 번호가 매겨집니다.</target>
        </trans-unit>
        <trans-unit id="e0f90fded1ca1cc66d4c7a429d464dbe61fd344a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision&lt;/code&gt; is the precision of the printed argument.</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt; 는 인쇄 된 인수의 정밀도입니다.</target>
        </trans-unit>
        <trans-unit id="d32e560f58cd69021c34aa6faa3a7d0902c0bf55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pretty&lt;/code&gt; has a format corresponding to:</source>
          <target state="translated">&lt;code&gt;pretty&lt;/code&gt; 는 다음에 해당하는 형식입니다.</target>
        </trans-unit>
        <trans-unit id="98d108566007784e8a1eea8b9a4528d9e7ac1f71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print_temp&lt;/code&gt; simply calls &lt;code&gt;io:format&lt;/code&gt; in a similar way to what has been described above. Notice that ~-15w says to print the &quot;term&quot; with a field length (width) of 15 and left justify it. (see the &lt;code&gt;io(3)&lt;/code&gt;) manual page in STDLIB.</source>
          <target state="translated">&lt;code&gt;print_temp&lt;/code&gt; 는 위에서 설명한 것과 비슷한 방식 &lt;code&gt;io:format&lt;/code&gt; 을 호출합니다 . ~ -15w는 필드 길이 (너비)가 15 인 &quot;term&quot;을 인쇄하고 왼쪽을 정렬한다는 것을 알 수 있습니다. STDLIB 의 &lt;code&gt;io(3)&lt;/code&gt; ) 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="29ac1ca7727ca9cb3d82758e35bac8bf82f020b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;priv/bin&lt;/code&gt; - Recommended. Any executable that is used by the application, such as port-programs, should be placed here.</source>
          <target state="translated">&lt;code&gt;priv/bin&lt;/code&gt; -권장. 포트 프로그램과 같이 응용 프로그램에서 사용하는 모든 실행 파일을 여기에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="3ad0391cb384a2caca2662bbbf264622930a4b48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;priv/lib&lt;/code&gt; - Recommended. Any shared-object files that are used by the application, such as NIFs or linked-in-drivers, should be placed here.</source>
          <target state="translated">&lt;code&gt;priv/lib&lt;/code&gt; - 권장 NIF 또는 링크 된 드라이버와 같이 응용 프로그램에서 사용하는 모든 공유 객체 파일을 여기에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="9645f44b37794152f99af006755a164224c472d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;priv&lt;/code&gt; - Optional. Used for application specific files.</source>
          <target state="translated">&lt;code&gt;priv&lt;/code&gt; - 선택 사항. 응용 프로그램 특정 파일에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f4dd7b1d49b0d6d23d041a7e5ef464d98479bb02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;priv&lt;/code&gt; - Optional. Used for application specific files. &lt;code&gt;code:priv_dir/1&lt;/code&gt; is to be used to access this directory.</source>
          <target state="translated">&lt;code&gt;priv&lt;/code&gt; - 선택 사항. 응용 프로그램 특정 파일에 사용됩니다. &lt;code&gt;code:priv_dir/1&lt;/code&gt; 은이 디렉토리에 액세스하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6ce3ecab75d053087947f57abd113a825750b61f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;priv_dir&lt;/code&gt; - Scratch file directory</source>
          <target state="translated">&lt;code&gt;priv_dir&lt;/code&gt; - 스크래치 파일 디렉토리</target>
        </trans-unit>
        <trans-unit id="67a3ae34ca8c9e112d3c2b7ea9126b0da8b19f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;priv_dir&lt;/code&gt; is the private directory for the test cases. This directory can be used whenever a test case (or configuration function) needs to write something to file. The name of the private directory is generated by &lt;code&gt;Common Test&lt;/code&gt;, which also creates the directory.</source>
          <target state="translated">&lt;code&gt;priv_dir&lt;/code&gt; 은 테스트 케이스의 개인 디렉토리입니다. 이 디렉토리는 테스트 케이스 (또는 구성 기능)가 파일에 무언가를 써야 할 때마다 사용할 수 있습니다. 개인 디렉토리의 이름은 &lt;code&gt;Common Test&lt;/code&gt; 에 의해 생성되며 디렉토리도 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="cbcc995ab1297c3b9b6bdf4f0a3b2462a99b5673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proc_lib:start_link&lt;/code&gt; is synchronous and does not return until &lt;code&gt;proc_lib:init_ack&lt;/code&gt; has been called.</source>
          <target state="translated">&lt;code&gt;proc_lib:start_link&lt;/code&gt; 는 동기식이며 &lt;code&gt;proc_lib:init_ack&lt;/code&gt; 이 호출 될 때까지 반환되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c16f600ff0527a1c089c36fef0901435cfe8d3d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proc_sig&lt;/code&gt; is an internal operation and is never to appear, while the others represent the corresponding driver callbacks &lt;code&gt;timeout&lt;/code&gt;, &lt;code&gt;ready_input&lt;/code&gt;, &lt;code&gt;ready_output&lt;/code&gt;, &lt;code&gt;event&lt;/code&gt;, and &lt;code&gt;outputv&lt;/code&gt; (when the port is used by distribution). Value &lt;code&gt;Millis&lt;/code&gt; in tuple &lt;code&gt;timeout&lt;/code&gt; informs about the uninterrupted execution time of the process or port, which always is equal to or higher than the &lt;code&gt;Time&lt;/code&gt; value supplied when starting the trace. New tuples can be added to the &lt;code&gt;Info&lt;/code&gt; list in a future release. The order of the tuples in the list can be changed at any time without prior notice.</source>
          <target state="translated">&lt;code&gt;proc_sig&lt;/code&gt; 는 내부 작업이며 절대로 나타나지 않지만 다른 것은 해당 드라이버 콜백 &lt;code&gt;timeout&lt;/code&gt; , &lt;code&gt;ready_input&lt;/code&gt; , &lt;code&gt;ready_output&lt;/code&gt; , &lt;code&gt;event&lt;/code&gt; 및 &lt;code&gt;outputv&lt;/code&gt; (포트가 분배에 의해 사용될 때)를 나타냅니다. 튜플 &lt;code&gt;timeout&lt;/code&gt; Value &lt;code&gt;Millis&lt;/code&gt; 는 프로세스 또는 포트의 중단없는 실행 시간에 대해 알려줍니다.이 시간은 항상 트레이스를 시작할 때 제공되는 &lt;code&gt;Time&lt;/code&gt; 값 보다 크거나 같습니다 . 향후 릴리스 에서는 &lt;code&gt;Info&lt;/code&gt; 목록에 새 튜플을 추가 할 수 있습니다 . 목록의 튜플 순서는 사전 통지없이 언제든지 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d87254d241e99668ca26900ef8fb734e4609213e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;process_info/1,2&lt;/code&gt; cannot be used to read out the message queue or the process dictionary (both are returned as empty lists).</source>
          <target state="translated">&lt;code&gt;process_info/1,2&lt;/code&gt; 를 사용하여 메시지 큐나 프로세스 사전을 읽을 수 없습니다 (둘 다 빈 목록으로 리턴 됨).</target>
        </trans-unit>
        <trans-unit id="42f2ec202869170e3d096f127fbfcb5b0da8dae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processor_spread&lt;/code&gt; - Schedulers are spread like &lt;code&gt;thread_spread&lt;/code&gt;, but also over physical processor chips.</source>
          <target state="translated">&lt;code&gt;processor_spread&lt;/code&gt; - 스케줄러는 &lt;code&gt;thread_spread&lt;/code&gt; 와 마찬가지로 물리적 프로세서 칩에도 분산되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="03e24a6c1e9a06add5153e63471c1f7d46049c21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;product(S1,&amp;nbsp;S2)&lt;/code&gt; is equivalent to &lt;code&gt;product({S1,&amp;nbsp;S2})&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;product(S1,&amp;nbsp;S2)&lt;/code&gt; 는 &lt;code&gt;product({S1,&amp;nbsp;S2})&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7a94d6b404703ecfbd99fef0c131bb46e7a4eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;projects&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;projects&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="7a500192c5cc08ad584ceb4e9ade7823f9cbe5a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protocol_version&lt;/code&gt;. Returns the version number of the Mnesia inter-process communication protocol.</source>
          <target state="translated">&lt;code&gt;protocol_version&lt;/code&gt; . Mnesia 프로세스 간 통신 프로토콜의 버전 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="89fdc32e873c21bcd965fa0c727ab34dfa25b0dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pub&lt;/code&gt; is a file descriptor now connected to &lt;code&gt;epmd&lt;/code&gt;. &lt;code&gt;epmd&lt;/code&gt; monitors the other end of the connection. If it detects that the connection has been closed, the node becomes unregistered. So, if you explicitly close the descriptor or if your node fails, it becomes unregistered from &lt;code&gt;epmd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pub&lt;/code&gt; 는 이제 &lt;code&gt;epmd&lt;/code&gt; 에 연결된 파일 설명자 입니다. &lt;code&gt;epmd&lt;/code&gt; 는 연결의 다른 쪽 끝을 모니터링합니다. 연결이 닫 혔음을 감지하면 노드가 등록 해제됩니다. 따라서 설명자를 명시 적으로 닫거나 노드가 실패하면 &lt;code&gt;epmd&lt;/code&gt; 에서 등록 해제됩니다 .</target>
        </trans-unit>
        <trans-unit id="45133641546549589bced5b8fd7d2ba91f50b586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;q(QLC)&lt;/code&gt; is equivalent to &lt;code&gt;q(QLC, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;q(QLC)&lt;/code&gt; 는 &lt;code&gt;q(QLC, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1267fbdcc8542f9ed28ecd5872ce80fdd31606a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;q&lt;/code&gt; - Literal that don't fit in a word, that is an object stored on the heap such as a list or tuple. Any heap object type is supported, even types that don't have real literals such as external references.</source>
          <target state="translated">&lt;code&gt;q&lt;/code&gt; - 단어에 맞지 않는 리터럴, 즉 목록이나 튜플과 같이 힙에 저장된 개체입니다. 모든 힙 개체 유형이 지원되며 외부 참조와 같은 실제 리터럴이없는 유형도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="c309d104f57e4e02e2071fda0cffcb90958184ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;q&lt;/code&gt; - Literals that don't fit in a word, such as list or tuples.</source>
          <target state="translated">&lt;code&gt;q&lt;/code&gt; - 목록이나 튜플과 같이 단어에 맞지 않는 리터럴.</target>
        </trans-unit>
        <trans-unit id="40f5eb1eb7c642f79b3cc3976b07e49111c6865a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;q&lt;/code&gt; - Tagged CONS or BOXED pointer. That is, a term such as a list or tuple. Any heap object type is supported, even types that don't have real literals such as external references.</source>
          <target state="translated">&lt;code&gt;q&lt;/code&gt; - 태그가있는 CONS 또는 BOXED 포인터. 즉, 목록 또는 튜플과 같은 용어입니다. 모든 힙 개체 유형이 지원되며 외부 참조와 같은 실제 리터럴이없는 유형도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="cca997605390350ccf544e460671ca62bf1cb387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qlc:info/1&lt;/code&gt; returns information about a query handle, and in this case identical information is returned for the two query handles.</source>
          <target state="translated">&lt;code&gt;qlc:info/1&lt;/code&gt; 은 조회 핸들에 대한 정보를 리턴 하며이 경우 두 조회 핸들에 대해 동일한 정보가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="45370310318db1bd3f5a6ac06d4a9aff7059abf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qlc:info/1&lt;/code&gt; returns information about a query handle. In this case identical information is returned for the two query handles.</source>
          <target state="translated">&lt;code&gt;qlc:info/1&lt;/code&gt; 은 쿼리 핸들에 대한 정보를 반환합니다. 이 경우 두 조회 핸들에 대해 동일한 정보가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="f4a9c4966ef235f63e236067f767d17c609fe77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queue:lait/1&lt;/code&gt; (use queue:liat/1 instead)</source>
          <target state="translated">&lt;code&gt;queue:lait/1&lt;/code&gt; (대신 queue : liat / 1 사용)</target>
        </trans-unit>
        <trans-unit id="a24780f610cb9cd5f09e60a3ad22852c34ef28d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&lt;/code&gt; - X register 0. An implicit operand that will not be stored in the loaded code.</source>
          <target state="translated">&lt;code&gt;r&lt;/code&gt; -X 레지스터 0.로드 된 코드에 저장되지 않는 암시 적 피연산자입니다.</target>
        </trans-unit>
        <trans-unit id="b70c2887efa821c69b7024560ca540347c878381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ram_copies&lt;/code&gt;. A table can be replicated on a number of Erlang nodes. Property &lt;code&gt;ram_copies&lt;/code&gt; specifies a list of Erlang nodes where RAM copies are kept. These copies can be dumped to disc at regular intervals. However, updates to these copies are not written to disc on a transaction basis.</source>
          <target state="translated">&lt;code&gt;ram_copies&lt;/code&gt; . 여러 Erlang 노드에서 테이블을 복제 할 수 있습니다. &lt;code&gt;ram_copies&lt;/code&gt; 속성 은 RAM 복사본이 유지되는 Erlang 노드 목록을 지정합니다. 이러한 사본은 정기적으로 디스크에 덤프 할 수 있습니다. 그러나 이러한 복사본에 대한 업데이트는 트랜잭션 단위로 디스크에 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="31c8132e21ffa4c4e72db0ae37e9ddd5d912ce0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ram_copies&lt;/code&gt;. Returns the nodes where a &lt;code&gt;ram_copy&lt;/code&gt; of the table resides according to the schema.</source>
          <target state="translated">&lt;code&gt;ram_copies&lt;/code&gt; . 스키마에 따라 테이블 의 &lt;code&gt;ram_copy&lt;/code&gt; 가 상주 하는 노드를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d6584e7476863ea917f78a32f51523f12856d5a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ram_copies&lt;/code&gt;. The value of the node list is a list of Erlang nodes, and a RAM replica of the table resides on each node in the list.</source>
          <target state="translated">&lt;code&gt;ram_copies&lt;/code&gt; . 노드 목록의 값은 Erlang 노드의 목록이며 테이블의 RAM 복제본은 목록의 각 노드에 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6bdf85340f7364421c3601ac5291c0a796da850" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;random:_/_&lt;/code&gt; (use the 'rand' module instead)</source>
          <target state="translated">&lt;code&gt;random:_/_&lt;/code&gt; (대신 'rand'모듈 사용)</target>
        </trans-unit>
        <trans-unit id="c23dd2525fd016f79dc555aa6162da527038e0fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range UC&lt;/code&gt; is a subset of &lt;code&gt;U&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;range UC&lt;/code&gt; 는 &lt;code&gt;U&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="4c8f4da3742dafcfcd37d73ed7da6e6e78234fc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rbuf&lt;/code&gt; points to a return buffer, &lt;code&gt;rlen&lt;/code&gt; bytes long. The return data is to be a valid Erlang term in the external (binary) format. This is converted to an Erlang term and returned by &lt;code&gt;erlang:port_call/3&lt;/code&gt; to the caller. If more space than &lt;code&gt;rlen&lt;/code&gt; bytes is needed to return data, &lt;code&gt;*rbuf&lt;/code&gt; can be set to memory allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt; erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt;. This memory is freed automatically after &lt;code&gt;call&lt;/code&gt; has returned.</source>
          <target state="translated">&lt;code&gt;rbuf&lt;/code&gt; 는 &lt;code&gt;rlen&lt;/code&gt; 바이트 길이 의 리턴 버퍼를 가리 킵니다 . 반환 데이터는 외부 (바이너리) 형식의 유효한 Erlang 용어입니다. 이것은 Erlang 용어로 변환되고 &lt;code&gt;erlang:port_call/3&lt;/code&gt; 에 의해 호출자에게 반환됩니다 . 데이터를 반환하는 데 &lt;code&gt;rlen&lt;/code&gt; 바이트 보다 더 많은 공간 이 필요한 경우 &lt;code&gt;*rbuf&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt; erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt; 로 할당 된 메모리로 설정할 수 있습니다 . 이 메모리는 &lt;code&gt;call&lt;/code&gt; 이 반환 된 후 자동으로 해제됩니다 .</target>
        </trans-unit>
        <trans-unit id="dd9ced7eacf5082f0499e2bdf51fa7cbb8ed62ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rbuf&lt;/code&gt; points to a return buffer, &lt;code&gt;rlen&lt;/code&gt; bytes long. The return data is to be a valid Erlang term in the external (binary) format. This is converted to an Erlang term and returned by &lt;code&gt;erlang:port_call/3&lt;/code&gt; to the caller. If more space than &lt;code&gt;rlen&lt;/code&gt; bytes is needed to return data, &lt;code&gt;*rbuf&lt;/code&gt; can be set to memory allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt;erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt;. This memory is freed automatically after &lt;code&gt;call&lt;/code&gt; has returned.</source>
          <target state="translated">&lt;code&gt;rbuf&lt;/code&gt; 는 &lt;code&gt;rlen&lt;/code&gt; 바이트 길이 의 리턴 버퍼를 가리 킵니다 . 반환 데이터는 외부 (이진) 형식의 유효한 Erlang 용어입니다. 이것은 Erlang 용어로 변환되어 &lt;code&gt;erlang:port_call/3&lt;/code&gt; 에 의해 호출자에게 리턴됩니다 . 데이터를 리턴하기 위해 &lt;code&gt;rlen&lt;/code&gt; 바이트 보다 많은 공간 이 필요한 경우, &lt;code&gt;*rbuf&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt;erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt; 으로 할당 된 메모리로 설정 될 수 있습니다 . 이 메모리는 &lt;code&gt;call&lt;/code&gt; 이 반환 된 후 자동으로 해제됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f627a24902277dcc859bc9742c883ee206ecf08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ready_input&lt;/code&gt; or &lt;code&gt;ready_output&lt;/code&gt; indicates if the event object is ready for reading or writing.</source>
          <target state="translated">&lt;code&gt;ready_input&lt;/code&gt; 또는 &lt;code&gt;ready_output&lt;/code&gt; 은 이벤트 객체가 읽거나 쓸 준비가 되었는지 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="df286964dc6b989faeaf3d18c9fbc9f06820d2da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;real_name/3&lt;/code&gt; traverses &lt;code&gt;Aliases&lt;/code&gt;, typically extracted from &lt;code&gt;ConfigDB&lt;/code&gt;, and matches each &lt;code&gt;FakeName&lt;/code&gt; with &lt;code&gt;RequestURI&lt;/code&gt;. If a match is found, &lt;code&gt;FakeName&lt;/code&gt; is replaced with &lt;code&gt;RealName&lt;/code&gt; in the match. The resulting path is split into two parts, &lt;code&gt;ShortPath&lt;/code&gt; and &lt;code&gt;AfterPath&lt;/code&gt;, as defined in &lt;code&gt;&lt;a href=&quot;httpd_util#split_path-1&quot;&gt;httpd_util:split_path/1&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Path&lt;/code&gt; is generated from &lt;code&gt;ShortPath&lt;/code&gt;, that is, the result from &lt;code&gt;&lt;a href=&quot;#default_index&quot;&gt;default_index/2&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;ShortPath&lt;/code&gt; as an argument. &lt;code&gt;config_db()&lt;/code&gt; is the server config file in ETS table format as described in &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;real_name/3&lt;/code&gt; 은 일반적으로 &lt;code&gt;ConfigDB&lt;/code&gt; 에서 추출 된 &lt;code&gt;Aliases&lt;/code&gt; 통과 하고 각 &lt;code&gt;FakeName&lt;/code&gt; 과 &lt;code&gt;RequestURI&lt;/code&gt; 를 일치 시킵니다 . 일치하는 항목이 발견되면, &lt;code&gt;FakeName&lt;/code&gt; 는 대체됩니다 &lt;code&gt;RealName&lt;/code&gt; 경기. 결과 경로는 &lt;code&gt;&lt;a href=&quot;httpd_util#split_path-1&quot;&gt;httpd_util:split_path/1&lt;/a&gt;&lt;/code&gt; 에 정의 된대로 &lt;code&gt;ShortPath&lt;/code&gt; 와 &lt;code&gt;AfterPath&lt;/code&gt; 의 두 부분으로 나뉩니다 . &lt;code&gt;Path&lt;/code&gt; 생성된다 &lt;code&gt;ShortPath&lt;/code&gt; 로부터 결과, &lt;code&gt;&lt;a href=&quot;#default_index&quot;&gt;default_index/2&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;ShortPath&lt;/code&gt; 인수로. &lt;code&gt;config_db()&lt;/code&gt; 는 ETS 테이블 형식의 서버 구성 파일입니다. &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0836e434e21e3ff42c10d3b7cd4440e6ec99c2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;real_name&lt;/code&gt; - from &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;real_name&lt;/code&gt; - &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; 에서</target>
        </trans-unit>
        <trans-unit id="a0b5268dc3559ae43a4382a13162f0b182bdbc7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;real_name&lt;/code&gt; - from &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;real_name&lt;/code&gt; - &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; 에서 .</target>
        </trans-unit>
        <trans-unit id="4a157375902666aadd2e49bc4b005d4f2156ef77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;real_script_name/3&lt;/code&gt; traverses &lt;code&gt;ScriptAliases&lt;/code&gt;, typically extracted from &lt;code&gt;ConfigDB&lt;/code&gt;, and matches each &lt;code&gt;FakeName&lt;/code&gt; with &lt;code&gt;RequestURI&lt;/code&gt;. If a match is found, &lt;code&gt;FakeName&lt;/code&gt; is replaced with &lt;code&gt;RealName&lt;/code&gt; in the match. If the resulting match is not an executable script, &lt;code&gt;not_a_script&lt;/code&gt; is returned. If it is a script, the resulting script path is in two parts, &lt;code&gt;ShortPath&lt;/code&gt; and &lt;code&gt;AfterPath&lt;/code&gt;, as defined in &lt;code&gt;&lt;a href=&quot;httpd_util#split_script_path-1&quot;&gt;httpd_util:split_script_path/1&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;config_db()&lt;/code&gt; is the server config file in ETS table format as described in &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;real_script_name/3&lt;/code&gt; 은 일반적으로 &lt;code&gt;ConfigDB&lt;/code&gt; 에서 추출 된 &lt;code&gt;ScriptAliases&lt;/code&gt; 를 통과 하고 각 &lt;code&gt;FakeName&lt;/code&gt; 과 &lt;code&gt;RequestURI&lt;/code&gt; 를 일치 시킵니다 . 일치하는 항목이 발견되면, &lt;code&gt;FakeName&lt;/code&gt; 는 대체됩니다 &lt;code&gt;RealName&lt;/code&gt; 경기. 결과 일치가 실행 가능한 스크립트가 아닌 경우 &lt;code&gt;not_a_script&lt;/code&gt; 가 반환됩니다. 스크립트 인 경우 결과 스크립트 경로는 &lt;code&gt;&lt;a href=&quot;httpd_util#split_script_path-1&quot;&gt;httpd_util:split_script_path/1&lt;/a&gt;&lt;/code&gt; 에 정의 된대로 &lt;code&gt;ShortPath&lt;/code&gt; 와 &lt;code&gt;AfterPath&lt;/code&gt; 의 두 부분에 있습니다. &lt;code&gt;config_db()&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt; 설명 된대로 ETS 테이블 형식의 서버 구성 파일입니다 .</target>
        </trans-unit>
        <trans-unit id="5e0c37bb2ccd75117ef5f016b791a40be7494d36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reason : string&lt;/code&gt; :: Exit reason. Ex. &lt;code&gt;&quot;normal&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reason : string&lt;/code&gt; :: 종료 이유. 전의. &lt;code&gt;&quot;normal&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d6900a8e02c05d22160da33f9dfea47f1156484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reason_phrase&lt;/code&gt; returns &lt;code&gt;Description&lt;/code&gt; of an HTTP 1.1 &lt;code&gt;StatusCode&lt;/code&gt;, for example, 200 is &quot;OK&quot; and 201 is &quot;Created&quot;. For more information, see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reason_phrase&lt;/code&gt; 는 HTTP 1.1 &lt;code&gt;StatusCode&lt;/code&gt; 에 대한 &lt;code&gt;Description&lt;/code&gt; 을 리턴합니다. 예를 들어 200은 &quot;OK&quot;이고 201은 &quot;Created&quot;입니다. 자세한 정보는 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="96b53a82396c316d596c1c5cde548c59c4208848" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;receive&lt;/code&gt; never fails. The execution is suspended, possibly indefinitely, until a message arrives that matches one of the patterns and with a true guard sequence.</source>
          <target state="translated">&lt;code&gt;receive&lt;/code&gt; 실패하지 않습니다. 패턴 중 하나와 일치하고 실제 가드 시퀀스와 함께 메시지가 도착할 때까지 실행이 무기한 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="b4f40342522395030847fb1f59048644da3381b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reclaimed : integer&lt;/code&gt; :: Heap reclaimed. Ex. &lt;code&gt;2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reclaimed : integer&lt;/code&gt; :: 힙 회수. 전의. &lt;code&gt;2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99f6b849c495470fb32e64e9523f088a51ebdde1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;record_name&lt;/code&gt;. All records stored in a table must have the same name. The records must be instances of the same record type.</source>
          <target state="translated">&lt;code&gt;record_name&lt;/code&gt; . 테이블에 저장된 모든 레코드는 동일한 이름을 가져야합니다. 레코드는 동일한 레코드 유형의 인스턴스 여야합니다.</target>
        </trans-unit>
        <trans-unit id="fa56d3c2adfe99406ea66686179ceb5af48281da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;record_name&lt;/code&gt;. Returns the record name, common for all records in the table.</source>
          <target state="translated">&lt;code&gt;record_name&lt;/code&gt; . 테이블의 모든 레코드에 공통 인 레코드 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5eedfd25688f4b7bf285bd5a5cb720455497048d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recurse&lt;/code&gt;, with initial default value &lt;code&gt;false&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;recurse&lt;/code&gt; 초기 기본값이 &lt;code&gt;false&lt;/code&gt; 인재귀 ;</target>
        </trans-unit>
        <trans-unit id="01c40c86f579b43fad41c6dbf31d16b2a949a840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is a registry containing objects marked for deletion.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 삭제 표시된 개체가 포함 된 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="1b044a6c45f62d9e2beadb1f75026ec2f09422fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry containing &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 &lt;code&gt;key&lt;/code&gt; 를 포함하는 레지스트리입니다 .</target>
        </trans-unit>
        <trans-unit id="c08e533ae2d6b16b9462ffaacc69a315a0a28af1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry containing the object.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 객체를 포함하는 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="581178f5f933f9dfbf88170a27b6f54efa674c52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry to back up.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 백업 할 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="07ee2635246bee74e6ad502df9ea0982cb86b58a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry to close.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 닫을 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="cd5f049b7631534f493729a05c946cdc3d746c8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry to return information about.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 정보를 반환 할 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="d1ffd2d55c41ccf3477a7f547ab99fbfff3beb4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry where the data is to be placed.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 데이터를 배치 할 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="164a95238ac9e60b7492dce09bda4f82ec47bb6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry where the object is to be placed.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 객체를 배치 할 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="b39526fe04fdce43ea4cd218112cef8911cc572c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg&lt;/code&gt; is the registry where the object will be looked up.</source>
          <target state="translated">&lt;code&gt;reg&lt;/code&gt; 는 객체가 조회되는 레지스트리입니다.</target>
        </trans-unit>
        <trans-unit id="a02f5d58d4cfe73da9a29969d050d35c1306d29c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registered&lt;/code&gt; - All names of registered processes in the application. &lt;code&gt;systools&lt;/code&gt; uses this list to detect name clashes between applications. Defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;registered&lt;/code&gt; - 응용 프로그램에 등록 된 프로세스의 모든 이름. &lt;code&gt;systools&lt;/code&gt; 는이 목록을 사용하여 응용 프로그램 간의 이름 충돌을 감지합니다. 기본값은 &lt;code&gt;[]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="203f5ef503ea4bb4ad492f21d1f72f1ffbfab112" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registered_name&lt;/code&gt; (if the port has a registered name)</source>
          <target state="translated">&lt;code&gt;registered_name&lt;/code&gt; (포트에 등록 된 이름이있는 경우)</target>
        </trans-unit>
        <trans-unit id="ae0c40de5dcb7f23614d90fbead5c1352234a6fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regs/0&lt;/code&gt; displays information about all registered processes. &lt;code&gt;nregs/0&lt;/code&gt; does the same, but for all nodes in the network.</source>
          <target state="translated">&lt;code&gt;regs/0&lt;/code&gt; 은 등록 된 모든 프로세스에 대한 정보를 표시합니다. &lt;code&gt;nregs/0&lt;/code&gt; 은 동일하지만 네트워크의 모든 노드에 대해 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0cde9bd7c0faf9d85dd5de38e11910f2a6fa285e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rel(4)&lt;/code&gt; manual page in SASL</source>
          <target state="translated">&lt;code&gt;rel(4)&lt;/code&gt; SASL의 rel (4) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="dead67b720c96b0d2e0e43494dae6fb66e47d34b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relative_product1(R1,&amp;nbsp;R2)&lt;/code&gt; is equivalent to &lt;code&gt;relative_product(converse(R1),&amp;nbsp;R2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;relative_product1(R1,&amp;nbsp;R2)&lt;/code&gt; 은 &lt;code&gt;relative_product(converse(R1),&amp;nbsp;R2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef995371a03355fde0a05fbe0a4a4d9412ad87d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;release&lt;/code&gt;, an empty list if the application does not belong to any release, otherwise a list of the release name;</source>
          <target state="translated">&lt;code&gt;release&lt;/code&gt; 응용 프로그램이 어떤 릴리스에 속하는 릴리즈 이름의 다른 목록을하지 않는 경우, 빈 상태 (empty)의리스트를;</target>
        </trans-unit>
        <trans-unit id="aa262afc0752d866f78bd1433169baee2813e4ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;releases/RelVsn&lt;/code&gt; contains the boot script &lt;code&gt;Name.boot&lt;/code&gt; renamed to &lt;code&gt;start.boot&lt;/code&gt; and, if found, the files &lt;code&gt;relup&lt;/code&gt; and &lt;code&gt;sys.config&lt;/code&gt; or &lt;code&gt;sys.config.src&lt;/code&gt;. These files are searched for in the same directory as &lt;code&gt;Name.rel&lt;/code&gt;, in the current working directory, and in any directories specified using option &lt;code&gt;path&lt;/code&gt;. In the case of &lt;code&gt;sys.config&lt;/code&gt; it is not included if &lt;code&gt;sys.config.src&lt;/code&gt; is found.</source>
          <target state="translated">&lt;code&gt;releases/RelVsn&lt;/code&gt; 에는 부팅 스크립트 &lt;code&gt;Name.boot&lt;/code&gt; 의 이름이 &lt;code&gt;start.boot&lt;/code&gt; 로 바뀌고 발견 된 경우 파일 &lt;code&gt;relup&lt;/code&gt; 및 &lt;code&gt;sys.config&lt;/code&gt; 또는 &lt;code&gt;sys.config.src&lt;/code&gt; 가 포함 됩니다. 이러한 파일은 &lt;code&gt;Name.rel&lt;/code&gt; 과 동일한 디렉토리 , 현재 작업중인 디렉토리 및 &lt;code&gt;path&lt;/code&gt; 옵션을 사용하여 지정된 디렉토리에서 검색됩니다 . 의 경우 &lt;code&gt;sys.config&lt;/code&gt; 경우는 포함되어 있지 않습니다 &lt;code&gt;sys.config.src&lt;/code&gt; 이 발견된다.</target>
        </trans-unit>
        <trans-unit id="73f228fd86b959af55348e7d882e6cec2ca8f954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;releases/Vsn&lt;/code&gt; - &lt;code&gt;.rel&lt;/code&gt; file and boot script &lt;code&gt;start.boot&lt;/code&gt;; if present in the release package, &lt;code&gt;relup&lt;/code&gt; and/or &lt;code&gt;sys.config&lt;/code&gt; or &lt;code&gt;sys.config.src&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;releases/Vsn&lt;/code&gt; - &lt;code&gt;.rel&lt;/code&gt; 파일 및 부팅 스크립트 &lt;code&gt;start.boot&lt;/code&gt; ; 릴리스 패키지에있는 경우 &lt;code&gt;relup&lt;/code&gt; 및 / 또는 &lt;code&gt;sys.config&lt;/code&gt; 또는 &lt;code&gt;sys.config.src&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4d5f27d10d69fc586f2a1d77639bd08de339c0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relup(4)&lt;/code&gt; manual page in SASL</source>
          <target state="translated">&lt;code&gt;relup(4)&lt;/code&gt; SASL의 relup (4) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="35e9e07b5104505c091e492434e1b6e2baaad654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote_user&lt;/code&gt; - from &lt;code&gt;mod_auth&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;remote_user&lt;/code&gt; - &lt;code&gt;mod_auth&lt;/code&gt; 에서</target>
        </trans-unit>
        <trans-unit id="7b912292350e7dd2585255413f48d595db50eac6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reopen/2,3&lt;/code&gt; are used for internally formatted logs, and &lt;code&gt;breopen/3&lt;/code&gt; for externally formatted logs.</source>
          <target state="translated">&lt;code&gt;reopen/2,3&lt;/code&gt; 은 내부 형식의 로그에 사용되고 &lt;code&gt;breopen/3&lt;/code&gt; 은 외부 형식의 로그에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1caecb3858181e6a505b978fc7cff8ff65ef781c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repair&lt;/code&gt; - Defines the dets repair behaviour.</source>
          <target state="translated">&lt;code&gt;repair&lt;/code&gt; -dets 수리 동작을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="be7825ac1d16f6cbbde7219604cc01f08dfc8fc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report&lt;/code&gt; - &lt;code&gt;SnmpReportInfo&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#handle_report&quot;&gt;handle_report&lt;/a&gt;&lt;/code&gt; for more info).</source>
          <target state="translated">&lt;code&gt;report&lt;/code&gt; - &lt;code&gt;SnmpReportInfo&lt;/code&gt; ( 자세한 정보는 &lt;code&gt;&lt;a href=&quot;#handle_report&quot;&gt;handle_report&lt;/a&gt;&lt;/code&gt; 를 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="aa31d0d9da25285cdec40ae21087bdf3875c655b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; is an assert statement, which can be part of the &lt;code&gt;&lt;a href=&quot;write_test_chapter#suite&quot;&gt;Test Suite Information Function&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt;. If the required variable is unavailable, the test is skipped (unless a default value has been specified, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; for details). Also, function &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1/2&lt;/a&gt;&lt;/code&gt; can be called from a test case to check if a specific variable is available. The return value from this function must be checked explicitly and appropriate action be taken depending on the result (for example, to skip the test case if the variable in question does not exist).</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;write_test_chapter#suite&quot;&gt;Test Suite Information Function&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; 의 일부일 수있는 assert 문 입니다. 필수 변수를 사용할 수없는 경우 테스트를 건너 뜁니다 (기본값을 지정하지 않은 경우 자세한 내용은 &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; 섹션 참조). 또한 테스트 케이스에서 함수 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1/2&lt;/a&gt;&lt;/code&gt; 를 호출하여 특정 변수를 사용할 수 있는지 확인할 수 있습니다. 이 함수의 반환 값을 명시 적으로 확인하고 결과에 따라 적절한 조치를 취해야합니다 (예 : 문제의 변수가없는 경우 테스트 사례를 건너 뛰기).</target>
        </trans-unit>
        <trans-unit id="96a7d9eca2ecc0e749453229901995f4b5035a25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolv&lt;/code&gt; (Unix resolv.conf)</source>
          <target state="translated">&lt;code&gt;resolv&lt;/code&gt; (유닉스 resolv.conf)</target>
        </trans-unit>
        <trans-unit id="6578da0c8fe5f5d149e969260d305851d33ab8a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolve/0&lt;/code&gt; returns the official &lt;code&gt;HostName&lt;/code&gt; of the current host.</source>
          <target state="translated">&lt;code&gt;resolve/0&lt;/code&gt; 은 현재 호스트 의 공식 &lt;code&gt;HostName&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="48cc9c7cd30a4bfe2c8d7fc7da352e6dfccd6690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rest_for_one&lt;/code&gt; - If one child process terminates and is to be restarted, the 'rest' of the child processes (that is, the child processes after the terminated child process in the start order) are terminated. Then the terminated child process and all child processes after it are restarted.</source>
          <target state="translated">&lt;code&gt;rest_for_one&lt;/code&gt; - 하나의 하위 프로세스가 종료되고 다시 시작되면 하위 프로세스의 '휴지'(즉, 종료 된 하위 프로세스 이후의 하위 프로세스가 시작 순서로 종료 됨)가 종료됩니다. 그런 다음 종료 된 하위 프로세스 및 모든 하위 프로세스가 재시작 된 후.</target>
        </trans-unit>
        <trans-unit id="18f6700cb534692c96844b101482fdde04dfa044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restart&lt;/code&gt; defines when a terminated child process is to be restarted.</source>
          <target state="translated">&lt;code&gt;restart&lt;/code&gt; 는 종료 된 하위 프로세스를 다시 시작할시기를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="8bb040891b1153b7fb0d8501cd77e1639c12960d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restart&lt;/code&gt; defines when a terminated child process must be restarted. A &lt;code&gt;permanent&lt;/code&gt; child process is always restarted. A &lt;code&gt;temporary&lt;/code&gt; child process is never restarted (even when the supervisor's restart strategy is &lt;code&gt;rest_for_one&lt;/code&gt; or &lt;code&gt;one_for_all&lt;/code&gt; and a sibling's death causes the temporary process to be terminated). A &lt;code&gt;transient&lt;/code&gt; child process is restarted only if it terminates abnormally, that is, with another exit reason than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;restart&lt;/code&gt; 는 종료 된 하위 프로세스를 다시 시작해야하는시기를 정의합니다. &lt;code&gt;permanent&lt;/code&gt; 자식 프로세스는 항상 다시 시작됩니다. &lt;code&gt;temporary&lt;/code&gt; (감독자의 재시작 전략이 경우에도 자식 프로세스가 다시 시작되지 않습니다 &lt;code&gt;rest_for_one&lt;/code&gt; 가 또는 &lt;code&gt;one_for_all&lt;/code&gt; 및 형제 자매의 죽음이 종료되는 임시 공정의 원인). &lt;code&gt;transient&lt;/code&gt; 자식 프로세스는이 아닌 다른 출구 이유, 즉, 비정상적으로 종료하는 경우에만 다시 시작 &lt;code&gt;normal&lt;/code&gt; , &lt;code&gt;shutdown&lt;/code&gt; , 또는 &lt;code&gt;{shutdown,Term}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6f13062c07413957b07327b0960e0d7b1c6faae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restart_emulator&lt;/code&gt; if this instruction is encountered in the script</source>
          <target state="translated">&lt;code&gt;restart_emulator&lt;/code&gt; 이 명령어가 스크립트에서 발견되면 restart_emulator</target>
        </trans-unit>
        <trans-unit id="dea520911052ada4482320f73d5f7f7828801afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restriction_reason()&lt;/code&gt; = &lt;code&gt;epath | efnamena | elogin | enotbinary&lt;/code&gt; - all restrictions are not always relevant to all functions</source>
          <target state="translated">&lt;code&gt;restriction_reason()&lt;/code&gt; &lt;code&gt;epath | efnamena | elogin | enotbinary&lt;/code&gt; () = epath | efnamena | 엘로 진 | enotbinary- 모든 제한이 모든 기능과 항상 관련이있는 것은 아닙니다</target>
        </trans-unit>
        <trans-unit id="b0b37cf09753b4467c363c85e405ec5a16f552ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resume&lt;/code&gt; implies the default &lt;code&gt;FetchTimeout&lt;/code&gt;, which is 10 seconds</source>
          <target state="translated">&lt;code&gt;resume&lt;/code&gt; 은 기본 &lt;code&gt;FetchTimeout&lt;/code&gt; 을 의미합니다 ( 10 초).</target>
        </trans-unit>
        <trans-unit id="73e74acfdcf2b62421adf8e11e6312516974a632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; - for &lt;code&gt;[{'_',[],[{return_trace}]}]&lt;/code&gt; (report the return value from a traced function)</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; -for &lt;code&gt;[{'_',[],[{return_trace}]}]&lt;/code&gt; (추적 된 함수의 리턴 값보고)</target>
        </trans-unit>
        <trans-unit id="79dc67411fa6c27a6ed3fa9f9f8b17896ed2f0d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return_to&lt;/code&gt; and &lt;code&gt;return_from&lt;/code&gt; trace messages are lost when tracing on the spawn BIFs.</source>
          <target state="translated">&lt;code&gt;return_to&lt;/code&gt; 스폰 BIF에서 추적 할 때 return_to 및 &lt;code&gt;return_from&lt;/code&gt; 추적 메시지가 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="10eb0fd561ac4537b0fbc9789464e2edc3507e89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rfc1123_date/0&lt;/code&gt; returns the current date in RFC 1123 format. &lt;code&gt;rfc_date/1&lt;/code&gt; converts the date in the Erlang format to the RFC 1123 date format.</source>
          <target state="translated">&lt;code&gt;rfc1123_date/0&lt;/code&gt; 은 현재 날짜를 RFC 1123 형식으로 반환합니다. &lt;code&gt;rfc_date/1&lt;/code&gt; 은 Erlang 형식의 날짜를 RFC 1123 날짜 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="becde7626294b47c704773cb540465b1ed4e9390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rle&lt;/code&gt; to limit match distances to one (run-length encoding)</source>
          <target state="translated">&lt;code&gt;rle&lt;/code&gt; 일치 거리를 1로 제한하기위한 rle (실행 길이 인코딩)</target>
        </trans-unit>
        <trans-unit id="3a5ff3d1e61f14df1437fd6d188a57803196995b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rpc:call()&lt;/code&gt; and friends makes it quite hard to distinguish between successful results, raised exceptions, and other errors. This cannot be changed due to compatibility reasons. As of OTP 23, a new module &lt;code&gt;&lt;a href=&quot;erpc&quot;&gt;erpc&lt;/a&gt;&lt;/code&gt; was introduced in order to provide an API that makes it possible to distingush between the different results. The &lt;code&gt;erpc&lt;/code&gt; module provides a subset (however, the central subset) of the functionality available in the &lt;code&gt;rpc&lt;/code&gt; module. The &lt;code&gt;erpc&lt;/code&gt; implementation also provides a more scalable implementation with better performance than the original &lt;code&gt;rpc&lt;/code&gt; implementation. However, since the introduction of &lt;code&gt;erpc&lt;/code&gt;, the &lt;code&gt;rpc&lt;/code&gt; module implements large parts of its central functionality using &lt;code&gt;erpc&lt;/code&gt;, so the &lt;code&gt;rpc&lt;/code&gt; module wont not suffer scalability wise and performance wise compared to &lt;code&gt;erpc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rpc:call()&lt;/code&gt; 및 friends는 성공적인 결과, 발생한 예외 및 기타 오류를 구별하기가 매우 어렵습니다. 호환성상의 이유로 변경할 수 없습니다. OTP 23 &lt;code&gt;&lt;a href=&quot;erpc&quot;&gt;erpc&lt;/a&gt;&lt;/code&gt; 서로 다른 결과를 구별 할 수있는 API를 제공하기 위해 새로운 모듈 erpc 가 도입되었습니다. &lt;code&gt;erpc&lt;/code&gt; 의 모듈에서 사용할 수있는 기능의 일부 (그러나, 중앙 부분 집합)를 제공 &lt;code&gt;rpc&lt;/code&gt; 모듈. &lt;code&gt;erpc&lt;/code&gt; 의 구현은 원본보다 더 나은 성능과 확장 성 구현을 제공 &lt;code&gt;rpc&lt;/code&gt; 구현. 그러나의 도입 이후 &lt;code&gt;erpc&lt;/code&gt; 의 &lt;code&gt;rpc&lt;/code&gt; 모듈은 &lt;code&gt;erpc&lt;/code&gt; 를 사용하여 중앙 기능의 대부분을 구현 하므로 &lt;code&gt;rpc&lt;/code&gt; 모듈은 &lt;code&gt;erpc&lt;/code&gt; 에 비해 확장 성 및 성능면에서 영향 을 받지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="644dd7e73ac86edeaa8ee314012f84e50ea0d84d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rpc&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;rpc&lt;/code&gt; 커널의 rpc 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="878eb63062d735355fcc6c37efb0b6ae5b64477a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_erl&lt;/code&gt; is a wrapper that provides logging of output from the runtime system to file. It also provides a simple mechanism for attaching to the Erlang shell (&lt;code&gt;to_erl&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;run_erl&lt;/code&gt; 은 런타임 시스템에서 파일로 출력을 로깅하는 래퍼입니다. 또한 Erlang 쉘 ( &lt;code&gt;to_erl&lt;/code&gt; ) 에 연결하기위한 간단한 메커니즘을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="59771bcdadf04ee85ff53f63e69f07db4faf3f43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runnable : integer&lt;/code&gt; :: Runnable. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;runnable : integer&lt;/code&gt; :: Runnable. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26fd9d14db5e4fcc321544ac7ea25df2ddea3c37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runnable&lt;/code&gt; (ready to run, but another process is running)</source>
          <target state="translated">&lt;code&gt;runnable&lt;/code&gt; (실행 가능하지만 다른 프로세스가 실행 중임)</target>
        </trans-unit>
        <trans-unit id="42b5c15072d71402981ef76eb126e5e00ef61957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;running&lt;/code&gt; - The process is running. &lt;code&gt;Info={}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;running&lt;/code&gt; - 프로세스가 실행 중입니다. &lt;code&gt;Info={}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed752e775d6018a2d31a19161dde1420f6d71649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;running_db_nodes&lt;/code&gt;. Returns a list of nodes where Mnesia currently is running. This function can be called even if Mnesia is not yet running, but it then has slightly different semantics.</source>
          <target state="translated">&lt;code&gt;running_db_nodes&lt;/code&gt; . Mnesia가 현재 실행중인 노드 목록을 리턴합니다. Mnesia가 아직 실행되고 있지 않더라도이 함수를 호출 할 수 있지만 의미가 약간 다릅니다.</target>
        </trans-unit>
        <trans-unit id="2429fa99d76f82928a5958828bb5fbc614b38c52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt; is a pointer to an initialized rwlock.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 초기화 된 rwlock에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="dff35b17db19797318d995adf141200ee18b5447" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt; is a pointer to an rwlock to destroy.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 파괴 할 rwlock에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="b339605689a0ebacf25c15f5d5d11548a8202e57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt; is a pointer to an rwlock to read unlock.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 잠금 해제를 읽는 rwlock의 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="046b572372cc868cfad39d254b43d6ae9d083d90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt; is a pointer to an rwlock to read/write lock.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 읽기 / 쓰기 잠금을위한 rwlock에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="31572995258393c7efe7170cf6c689f4f4a92191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt; is a pointer to an rwlock to read/write unlock.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 읽기 / 쓰기 잠금 해제를위한 rwlock에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="48ce4fc95d093a6ebf29155d71fd7dac1ca203b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt; is a pointer to an rwlock to try to read lock.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 잠금을 읽으려고 시도하는 rwlock에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="e5f9fb44b57b22fa7d719d0a6d85f98a900e45ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt; is a pointer to the rwlock to read lock.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 잠금을 읽기위한 rwlock에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="dc0063396ffd1605ce1871de9ff2d80b9f75e707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rwlck&lt;/code&gt;is pointer to an rwlock to try to read/write lock.</source>
          <target state="translated">&lt;code&gt;rwlck&lt;/code&gt; 는 읽기 / 쓰기 잠금을 시도하는 rwlock의 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="3b606158c9cccbc0d370680206ab0e93f9610eaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; - Tagged source: X register, Y register, or a literal term. The tag will be tested at runtime to retrieve the value from an X register, a Y register, or simply use the value as a tagged Erlang term. (Implementation note: An X register is tagged as a pid, and a Y register as a port. Therefore the literal term must not contain a port or pid.)</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; - 태그가 지정된 소스 : X 레지스터, Y 레지스터 또는 리터럴 용어. 태그는 런타임에 X 레지스터, Y 레지스터에서 값을 검색하거나 단순히 태그가 지정된 Erlang 용어로 값을 사용하기 위해 테스트됩니다. (구현 참고 : X 레지스터는 pid로 태그가 지정되고 Y 레지스터는 포트로 태그 지정됩니다. 따라서 리터럴 용어에는 포트 또는 pid가 포함되지 않아야합니다.)</target>
        </trans-unit>
        <trans-unit id="80b91b5f13096903adb29e69142a058fe27167c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; - X register, Y register, or any literal term. Equivalent to &lt;code&gt;xyc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; -X 레지스터, Y 레지스터 또는 임의의 리터럴 용어. &lt;code&gt;xyc&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="a5321813fd2597a89aa3f4849e998c3f9004deb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; is the string to assign. The string itself must have been created through a single call to &lt;code&gt;malloc()&lt;/code&gt; or similar a function, so that the registry can later delete it if necessary by calling &lt;code&gt;free()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 는 할당 할 문자열입니다. 문자열 자체는 &lt;code&gt;malloc()&lt;/code&gt; 또는 이와 유사한 함수에 대한 단일 호출을 통해 작성 되었으므로 레지스트리가 나중에 필요한 경우 &lt;code&gt;free()&lt;/code&gt; 를 호출하여 삭제할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="492bb44dd4210fc15721d408bc39dd4a5b08ede2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save_scenario/0&lt;/code&gt; saves information about the current runtime scenario. This information will later be used when &lt;code&gt;&lt;a href=&quot;#make_config-0&quot;&gt;make_config/0&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config/1&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;save_scenario/0&lt;/code&gt; 은 현재 런타임 시나리오에 대한 정보를 저장합니다. 이 정보는 나중에 &lt;code&gt;&lt;a href=&quot;#make_config-0&quot;&gt;make_config/0&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config/1&lt;/a&gt;&lt;/code&gt; 이 호출 될 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="67aedacb055a5db07fe0531d8d1bebe9034a83c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sbc_blocks : integer&lt;/code&gt; :: Number of singleblocks in instance. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sbc_blocks : integer&lt;/code&gt; :: 인스턴스의 단일 블록 수입니다. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af25a742d41f35c40e2d131a73bf30d935bc24fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sbc_blocks_size : integer&lt;/code&gt; :: Total size of all singleblock blocks in instance. Ex. &lt;code&gt;285296&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sbc_blocks_size : integer&lt;/code&gt; :: 인스턴스의 모든 단일 블록 블록의 총 크기입니다. 전의. &lt;code&gt;285296&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3545b362ef09a5df3c9f9018196ad95d849d099c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sbc_carriers : integer&lt;/code&gt; :: Number of singleblock carriers in instance. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sbc_carriers : integer&lt;/code&gt; :: 인스턴스의 단일 블록 캐리어 수. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b743ba1ac8774f48bcb9e286850e7ca9afbe736c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sbc_carriers_size : integer&lt;/code&gt; :: Total size of singleblock blocks carriers in instance. Ex. &lt;code&gt;1343488&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sbc_carriers_size : integer&lt;/code&gt; :: 단일 블록 블록 캐리어의 총 크기입니다. 전의. &lt;code&gt;1343488&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24f95fe4dd374b8f761b13faef347622004e30f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scheduler : integer&lt;/code&gt; :: Scheduler ID. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;scheduler : integer&lt;/code&gt; :: 스케줄러 ID. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2722b92af9ae891cb5c5e5510162b02e6726fde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scheduler_wall_time&lt;/code&gt; is by default disabled. To enable it, use &lt;code&gt;erlang:system_flag(scheduler_wall_time, true)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scheduler_wall_time&lt;/code&gt; 은 기본적으로 비활성화되어 있습니다. 이를 활성화하려면 &lt;code&gt;erlang:system_flag(scheduler_wall_time, true)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eddd3519b2c6eba3d7b146567fc4fc81c37d71d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;schema_location&lt;/code&gt;. Returns the initial schema location.</source>
          <target state="translated">&lt;code&gt;schema_location&lt;/code&gt; . 초기 스키마 위치를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1c69a1656bcc31b0f51d1c5efa9ed2ec0e6e2244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;script(4)&lt;/code&gt; manual page in SASL</source>
          <target state="translated">&lt;code&gt;script(4)&lt;/code&gt; SASL의 script (4) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="5d54d2b5717b12f311300b2446726b7046fefbd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sed&lt;/code&gt; -- Stream Editor for basic text transformation.</source>
          <target state="translated">&lt;code&gt;sed&lt;/code&gt; - 기본 텍스트 변환을위한 스트림 편집기.</target>
        </trans-unit>
        <trans-unit id="dbba17abcfc4e79daeff828f82d82e205b3d595b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seed({A1, A2, A3})&lt;/code&gt; is equivalent to &lt;code&gt;seed(A1, A2, A3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seed({A1, A2, A3})&lt;/code&gt; 은 &lt;code&gt;seed(A1, A2, A3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="655b5c4be89633126a7de828e0aef4b261102c61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select/2&lt;/code&gt; sends a query to the driver and returns the result.</source>
          <target state="translated">&lt;code&gt;select/2&lt;/code&gt; 는 쿼리를 드라이버로 보내고 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="81263c4012a8f3ccb2811423405b6a934a01b505" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt; - The table is traversed by calling &lt;code&gt;&lt;a href=&quot;dets#select-3&quot;&gt;dets:select/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;dets#select-1&quot;&gt;dets:select/1&lt;/a&gt;&lt;/code&gt;. Option &lt;code&gt;n_objects&lt;/code&gt; determines the number of objects returned (the third argument of &lt;code&gt;select/3&lt;/code&gt;). The match specification (the second argument of &lt;code&gt;select/3&lt;/code&gt;) is assembled by &lt;code&gt;qlc&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 테이블은 호출하여 이송합니다 - &lt;code&gt;&lt;a href=&quot;dets#select-3&quot;&gt;dets:select/3&lt;/a&gt;&lt;/code&gt; 하고 &lt;code&gt;&lt;a href=&quot;dets#select-1&quot;&gt;dets:select/1&lt;/a&gt;&lt;/code&gt; . 옵션 &lt;code&gt;n_objects&lt;/code&gt; 는 반환되는 객체의 수를 결정합니다 ( &lt;code&gt;select/3&lt;/code&gt; 의 세 번째 인수 ). 일치 스펙 ( &lt;code&gt;select/3&lt;/code&gt; 의 두 번째 인수 )은 &lt;code&gt;qlc&lt;/code&gt; 에 의해 어셈블됩니다 .</target>
        </trans-unit>
        <trans-unit id="7e269f5a1b09faf1cc6193296b165a0f6ac0789e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt; - The table is traversed by calling &lt;code&gt;dets:select/3&lt;/code&gt; and &lt;code&gt;dets:select/1&lt;/code&gt;. Option &lt;code&gt;n_objects&lt;/code&gt; determines the number of objects returned (the third argument of &lt;code&gt;select/3&lt;/code&gt;). The match specification (the second argument of &lt;code&gt;select/3&lt;/code&gt;) is assembled by &lt;code&gt;qlc&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; - &lt;code&gt;dets:select/3&lt;/code&gt; 및 &lt;code&gt;dets:select/1&lt;/code&gt; 을 호출하여 테이블을 순회합니다 . &lt;code&gt;n_objects&lt;/code&gt; 옵션 은 리턴 된 오브젝트 수 ( &lt;code&gt;select/3&lt;/code&gt; 의 세 번째 인수 )를 결정합니다. 일치 스펙 ( &lt;code&gt;select/3&lt;/code&gt; 의 두 번째 인수 )은 &lt;code&gt;qlc&lt;/code&gt; 로 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="071408e6c99d649c45dbdcb7cefc777106d38dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt; must always run within an activity, such as a transaction. The following function can be constructed to call from the shell:</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 는 항상 트랜잭션과 같은 활동 내에서 실행해야합니다. 쉘에서 호출하도록 다음 함수를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1aa18bc2dfcbda04a52e65c27f2fd8ae29f3d5af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;. The table is traversed by calling &lt;code&gt;mnesia:select/4&lt;/code&gt; and &lt;code&gt;mnesia:select/1&lt;/code&gt;. The match specification (the second argument of &lt;code&gt;select/3&lt;/code&gt;) is assembled by QLC: simple filters are translated into equivalent match specifications. More complicated filters need to be applied to all objects returned by &lt;code&gt;select/3&lt;/code&gt; given a match specification that matches all objects.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; . &lt;code&gt;mnesia:select/4&lt;/code&gt; 및 &lt;code&gt;mnesia:select/1&lt;/code&gt; 을 호출하여 테이블을 순회합니다 . 일치 스펙 ( &lt;code&gt;select/3&lt;/code&gt; 의 두 번째 인수 )은 QLC로 구성됩니다. 단순 필터는 동등한 일치 스펙으로 변환됩니다. 모든 객체 와 일치하는 일치 사양이 주어지면 &lt;code&gt;select/3&lt;/code&gt; 에서 반환 된 모든 객체에 더 복잡한 필터를 적용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="5cdddd354c307fc8695cdc5cf4f7d119e0015163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self()&lt;/code&gt; returns the pid of the process that executes &lt;code&gt;self()&lt;/code&gt;, in this case the pid of &quot;ping&quot;. (Recall the code for &quot;pong&quot;, this lands up in the variable &lt;code&gt;Ping_PID&lt;/code&gt; in the &lt;code&gt;receive&lt;/code&gt; previously explained.)</source>
          <target state="translated">&lt;code&gt;self()&lt;/code&gt; 는 self () 를 실행하는 프로세스의 pid &lt;code&gt;self()&lt;/code&gt; 이 경우 &quot;ping&quot; 의 pid )를 반환합니다 . ( &quot;pong&quot;에 대한 코드를 기억하십시오. 이것은 앞에서 설명한 &lt;code&gt;receive&lt;/code&gt; 에서 변수 &lt;code&gt;Ping_PID&lt;/code&gt; 에 들어 갑니다.)</target>
        </trans-unit>
        <trans-unit id="1ba0e279dfc87c895685a3e3f71c780338391921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;send_cancelled_reason()&lt;/code&gt; - the message sending was deliberately cancelled. &lt;code&gt;reason_for_send_cancel()&lt;/code&gt; is the reason given in the &lt;code&gt;cancel&lt;/code&gt; return from the &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;send_cancelled_reason()&lt;/code&gt; -메시지 전송이 일부러 취소되었습니다. &lt;code&gt;reason_for_send_cancel()&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; 함수 의 &lt;code&gt;cancel&lt;/code&gt; 리턴에 제공된 이유 입니다.</target>
        </trans-unit>
        <trans-unit id="93234f2ab5ee323c0146db35ca1952d365873a35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;send_failed_reason()&lt;/code&gt; - an error occurred while attempting to send the message.</source>
          <target state="translated">&lt;code&gt;send_failed_reason()&lt;/code&gt; -메시지를 보내는 중 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="d161cb1007cdac7ebd03436dcd7406b549feacd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;send_message&lt;/code&gt; - Send a message. &lt;strong&gt;Mandatory&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;send_message&lt;/code&gt; - 메시지를 보냅니다. &lt;strong&gt;필수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ac529b2d6293204d912fe9074ddd8900b55f583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq_trace&lt;/code&gt; implements sequential tracing (known in the AXE10 world, and sometimes called &quot;forlopp tracing&quot;). &lt;code&gt;dbg&lt;/code&gt; can interpret messages generated from &lt;code&gt;seq_trace&lt;/code&gt; and the same tracer function for both types of tracing can be used. The &lt;code&gt;seq_trace&lt;/code&gt; messages can even be sent to a trace port for further analysis.</source>
          <target state="translated">&lt;code&gt;seq_trace&lt;/code&gt; 는 순차 추적을 구현합니다 (AXE10 세계에 알려져 있으며 &quot;forlopp 추적&quot;이라고도 함). &lt;code&gt;dbg&lt;/code&gt; 는 &lt;code&gt;seq_trace&lt;/code&gt; 에서 생성 된 메시지를 해석 할 수 있으며 두 추적 유형 모두에 대해 동일한 추적 프로그램 기능을 사용할 수 있습니다. &lt;code&gt;seq_trace&lt;/code&gt; 의 메시지도 추가 분석을 위해 추적 포트로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2fb86b915b34891fd5cf4eb06bab85aca636b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq_trace&lt;/code&gt; provides functions that control all aspects of sequential tracing. There are functions for activation, deactivation, inspection, and for collection of the trace output.</source>
          <target state="translated">&lt;code&gt;seq_trace&lt;/code&gt; 는 순차 추적의 모든 측면을 제어하는 ​​기능을 제공합니다. 활성화, 비활성화, 검사 및 추적 출력 수집 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9416e87758be922f8530c11afc0f09e59c485bb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;server_name&lt;/code&gt; is the registered name of the intended recipient.</source>
          <target state="translated">&lt;code&gt;server_name&lt;/code&gt; 은 수신자의 등록 된 이름입니다.</target>
        </trans-unit>
        <trans-unit id="b11a92faf8246f597f5eeb51abfdfa89885ec3fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt;. A table of this type has at most one object with a given key. If an object with a key already present in the table is inserted, the existing object is overwritten by the new object.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 합니다. 이 유형의 테이블에는 주어진 키를 가진 오브젝트가 최대 하나 있습니다. 테이블에 이미 존재하는 키를 가진 개체를 삽입하면 기존 개체를 새 개체로 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="e02f0b470922a4c9e4cbad576e4576163b1b3e5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_env/1&lt;/code&gt; is equivalent to &lt;code&gt;set_env(Config, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set_env/1&lt;/code&gt; 은 &lt;code&gt;set_env(Config, [])&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="cb2190aab0ae0b72291ec3b0e215bab6fd2511bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_env/2&lt;/code&gt; uses the standard &lt;code&gt;gen_server&lt;/code&gt; time-out value (5000 ms). Option &lt;code&gt;timeout&lt;/code&gt; can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</source>
          <target state="translated">&lt;code&gt;set_env/2&lt;/code&gt; 는 표준 &lt;code&gt;gen_server&lt;/code&gt; 시간 제한 값 (5000ms)을 사용합니다. 예를 들어 응용 프로그램 컨트롤러가 과도하게로드되는 상황에서 다른 시간 제한 값이 유용한 경우 옵션 &lt;code&gt;timeout&lt;/code&gt; 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37fc2ac2d7cef365a81e57212caaecd91e549506" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_env/4&lt;/code&gt; uses the standard &lt;code&gt;gen_server&lt;/code&gt; time-out value (5000 ms). Option &lt;code&gt;timeout&lt;/code&gt; can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</source>
          <target state="translated">&lt;code&gt;set_env/4&lt;/code&gt; 는 표준 &lt;code&gt;gen_server&lt;/code&gt; 시간 제한 값 (5000ms)을 사용합니다. 예를 들어 응용 프로그램 제어기가 과도하게로드되는 상황에서 다른 시간 &lt;code&gt;timeout&lt;/code&gt; 값이 유용한 경우 옵션 시간 종료를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="723b6ec3558b1a05623ea2acefcef07660ef9f02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setelement/3&lt;/code&gt; copies the tuple it modifies. Therefore, updating a tuple in a loop using &lt;code&gt;setelement/3&lt;/code&gt; creates a new copy of the tuple every time.</source>
          <target state="translated">&lt;code&gt;setelement/3&lt;/code&gt; 는 수정 한 튜플을 복사합니다. 따라서 &lt;code&gt;setelement/3&lt;/code&gt; 를 사용하여 루프에서 튜플을 업데이트하면 매번 튜플의 새 복사본이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="b519d57675ddcea40e608eb2fe2e7cfc84177a00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setup/5&lt;/code&gt; should spawn a process that connects to &lt;code&gt;Node&lt;/code&gt;. When connection has been established it should perform the Erlang distribution handshake for the connection. If the handshake successfully completes it should continue to function as a connection supervisor. This process should preferably execute on &lt;code&gt;max&lt;/code&gt; priority.</source>
          <target state="translated">&lt;code&gt;setup/5&lt;/code&gt; 는 &lt;code&gt;Node&lt;/code&gt; 에 연결되는 프로세스를 생성해야합니다 . 연결이 설정되면 연결에 대한 Erlang 분배 핸드 셰이크를 수행해야합니다. 핸드 셰이크가 성공적으로 완료되면 연결 관리자로 계속 작동해야합니다. 이 프로세스는 &lt;code&gt;max&lt;/code&gt; 우선 순위로 실행하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="806347a63259d8b7e63c063654b582b47a60b4e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setup&lt;/code&gt; sets up a single fixture for running all of the specified tests, with optional teardown afterwards. The arguments are described in detail below.</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 은 이후에 선택적 분해와 함께 지정된 모든 테스트를 실행하기위한 단일 설비를 설정 합니다. 인수는 아래에 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b0bc367b928b31c1cb6db10bc0b9f8e3428ec8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setup_context&lt;/code&gt; is a pointer to a structure that will be passed as second argument to the &lt;code&gt;socket&lt;/code&gt; callback in the &lt;code&gt;cbs&lt;/code&gt; structure.</source>
          <target state="translated">&lt;code&gt;setup_context&lt;/code&gt; 는 &lt;code&gt;cbs&lt;/code&gt; 구조 의 &lt;code&gt;socket&lt;/code&gt; 콜백에 두 번째 인수로 전달 될 구조에 대한 포인터 입니다.</target>
        </trans-unit>
        <trans-unit id="7deb750b6f0af86ba5927837d5d00ed9a2f687d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shell&lt;/code&gt; is equivalent to &lt;code&gt;tracer(node(),[{file, {local, &quot;ttb&quot;}}, shell])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shell&lt;/code&gt; 은 &lt;code&gt;tracer(node(),[{file, {local, &quot;ttb&quot;}}, shell])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0819ffc4c06ffc6f5a24dc6e038264cce8bdb7b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shortage_reason()&lt;/code&gt; = &lt;code&gt;etnospc | epnospc&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;shortage_reason()&lt;/code&gt; = &lt;code&gt;etnospc | epnospc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4557b700cde27f3499b244e63b6493bece0c7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shutdown&lt;/code&gt; defines how a child process is to be terminated.</source>
          <target state="translated">&lt;code&gt;shutdown&lt;/code&gt; 은 하위 프로세스가 종료되는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="abf746ddd6d286c4d87ec27da0c65ace89118fc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shutdown&lt;/code&gt; defines how a child process must be terminated. &lt;code&gt;brutal_kill&lt;/code&gt; means that the child process is unconditionally terminated using &lt;code&gt;exit(Child,kill)&lt;/code&gt;. An integer time-out value means that the supervisor tells the child process to terminate by calling &lt;code&gt;exit(Child,shutdown)&lt;/code&gt; and then wait for an exit signal with reason &lt;code&gt;shutdown&lt;/code&gt; back from the child process. If no exit signal is received within the specified number of milliseconds, the child process is unconditionally terminated using &lt;code&gt;exit(Child,kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shutdown&lt;/code&gt; 은 하위 프로세스를 종료해야하는 방법을 정의합니다. &lt;code&gt;brutal_kill&lt;/code&gt; 은 &lt;code&gt;exit(Child,kill)&lt;/code&gt; 사용하여 하위 프로세스가 무조건 종료 됨을 의미합니다 . 정수 시간 제한 감독자가 호출하여 종료 자식 프로세스를 알려줍니다 그 값 수단 &lt;code&gt;exit(Child,shutdown)&lt;/code&gt; 후 이유와 출구 신호를 기다리 &lt;code&gt;shutdown&lt;/code&gt; 자식 프로세스에서 다시. 지정된 밀리 초 내에 종료 신호가 수신되지 않으면 &lt;code&gt;exit(Child,kill)&lt;/code&gt; 사용하여 하위 프로세스가 무조건 종료됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd4753d2069f000bf12b0df5bc36d0d3ade9d00f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shutdown&lt;/code&gt;, if the event handler has been removed because the event manager is terminating.</source>
          <target state="translated">&lt;code&gt;shutdown&lt;/code&gt; 이벤트 관리자가 종료되어 이벤트 핸들러가 제거 된 경우 shutdown .</target>
        </trans-unit>
        <trans-unit id="040336bda627e687cd170b4ad63d3d08ce8b2d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;silent_connections&lt;/code&gt; can also be specified in a test suite. This is accomplished by returning a tuple, &lt;code&gt;{silent_connections,ConnTypes}&lt;/code&gt;, in the &lt;code&gt;suite/0&lt;/code&gt; or test case information list. If &lt;code&gt;ConnTypes&lt;/code&gt; is a list of atoms (SSH, Telnet, FTP, RPC and/or SNMP), output for any corresponding connections are suppressed. Full logging is by default enabled for any connection of type not specified in &lt;code&gt;ConnTypes&lt;/code&gt;. Hence, if &lt;code&gt;ConnTypes&lt;/code&gt; is the empty list, logging is enabled for all connections.</source>
          <target state="translated">&lt;code&gt;silent_connections&lt;/code&gt; 는 테스트 스위트에서 지정할 수도 있습니다. 이 튜플, 반환하여 수행됩니다 &lt;code&gt;{silent_connections,ConnTypes}&lt;/code&gt; 에, &lt;code&gt;suite/0&lt;/code&gt; 또는 테스트 케이스 정보 목록입니다. 경우 &lt;code&gt;ConnTypes&lt;/code&gt; 는 원자 (SSH, 텔넷, FTP, RPC 및 / 또는 SNMP)의리스트는, 임의의 대응하는 접속 용 출력이 억제된다. &lt;code&gt;ConnTypes&lt;/code&gt; 에 지정되지 않은 유형의 연결에 대해서는 전체 로깅이 기본적으로 사용됩니다 . 따라서 &lt;code&gt;ConnTypes&lt;/code&gt; 가 빈 목록이면 모든 연결에 대해 로깅이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f8bca7dbd674462c4e129a1781b6ba16f4de4629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;silent_connections&lt;/code&gt; can also be specified with a term in a test specification (see section &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; in section Running Tests and Analyzing Results). Connections provided with start flag/option &lt;code&gt;silent_connections&lt;/code&gt; are merged with any connections listed in the test specification.</source>
          <target state="translated">&lt;code&gt;silent_connections&lt;/code&gt; 는 테스트 사양의 용어로 지정할 수도 있습니다 ( &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; 실행 및 결과 분석 섹션의 테스트 사양 섹션 참조 ). 시작 플래그 / 옵션 &lt;code&gt;silent_connections&lt;/code&gt; 와 함께 제공된 연결은 테스트 사양에 나열된 모든 연결과 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="e4275c8d58280a491b97514105528400bb09c2ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;silent_connections&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;run_test_chapter#silent_connections&quot;&gt;Silent Connections&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;silent_connections&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;run_test_chapter#silent_connections&quot;&gt;Silent Connections&lt;/a&gt;&lt;/code&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a3f84446b808a2de27d8f496e723aae82586d721" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;simple_one_for_one&lt;/code&gt; - A simplified &lt;code&gt;one_for_one&lt;/code&gt; supervisor, where all child processes are dynamically added instances of the same process type, that is, running the same code.</source>
          <target state="translated">&lt;code&gt;simple_one_for_one&lt;/code&gt; - 단순화 된 &lt;code&gt;one_for_one&lt;/code&gt; 수퍼바이저로서 모든 하위 프로세스에 동일한 프로세스 유형의 인스턴스, 즉 동일한 코드를 동적으로 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f24bec336969a4cfa5778cf9dca31f097079e3b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size : integer&lt;/code&gt; :: Carrier size. Ex. &lt;code&gt;262144&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;size : integer&lt;/code&gt; :: 캐리어 크기. 전의. &lt;code&gt;262144&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b22bcbafe88ddb303bdfa29c4f7d7abffe43cc8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size/1&lt;/code&gt; returns the size for both tuples and binaries.</source>
          <target state="translated">&lt;code&gt;size/1&lt;/code&gt; 은 튜플과 이진 모두의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="afd8d87c333023befea22ee5046b439bb227714b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size/memory threshold&lt;/code&gt;. When the total size or total memory of a fragmented table (or a single fragment) exceeds some application-specific threshold, it can be time to add a new fragment dynamically to obtain a better distribution of records.</source>
          <target state="translated">&lt;code&gt;size/memory threshold&lt;/code&gt; . 조각화 된 테이블 (또는 단일 조각)의 전체 크기 또는 총 메모리가 일부 응용 프로그램 특정 임계 값을 초과하면 더 나은 레코드 분배를 얻기 위해 새 조각을 동적으로 추가해야 할 때입니다.</target>
        </trans-unit>
        <trans-unit id="593f72928313cf299a1b78fe8654af5202977953" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; indicates the length of &lt;code&gt;bptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 &lt;code&gt;bptr&lt;/code&gt; 의 길이를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="2c2b9ae45157401f1f534a908885aa62b51009e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is initialized to contain the length in bytes of the object, if it is found.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 객체의 길이를 바이트 단위로 포함하도록 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="31762ea17d2530a6ffac822a5f27e2801ad03532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the approximate number of objects you intend to store in the registry. As the registry uses a hash table with collision chaining, no absolute upper limit exists on the number of objects that can be stored in it. However, for reasons of efficiency, it is a good idea to choose a number that is appropriate for your needs. To change the size later, use &lt;code&gt;ei_reg_resize()&lt;/code&gt;. Notice that the number you provide is increased to the nearest larger prime number.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 레지스트리에 저장하려는 대략적인 개체 수입니다. 레지스트리는 충돌 체인이있는 해시 테이블을 사용하므로 저장할 수있는 오브젝트 수에는 절대 상한이 없습니다. 그러나 효율성을 위해 필요에 맞는 숫자를 선택하는 것이 좋습니다. 나중에 크기를 변경하려면 &lt;code&gt;ei_reg_resize()&lt;/code&gt; 사용 하십시오 . 입력 한 숫자가 가장 큰 소수로 증가합니다.</target>
        </trans-unit>
        <trans-unit id="5be4df78ae32cf4681c61deb31f75a70671adb82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the entire heap of the process when garbage collection is triggered. This includes all generational heaps, the process stack, any &lt;code&gt;&lt;a href=&quot;#process_flag_message_queue_data&quot;&gt; messages that are considered to be part of the heap&lt;/a&gt;&lt;/code&gt;, and any extra memory that the garbage collector needs during collection.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 가비지 콜렉션이 트리거 될 때 프로세스의 전체 힙입니다. 여기에는 모든 세대 별 힙, 프로세스 스택, &lt;code&gt;&lt;a href=&quot;#process_flag_message_queue_data&quot;&gt; messages that are considered to be part of the heap&lt;/a&gt;&lt;/code&gt; 모든 메시지 및 수집 중에 가비지 수집기에 필요한 추가 메모리가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f9883202ed6017270322badd6fb6bd39299529cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the entire heap of the process when garbage collection is triggered. This includes all generational heaps, the process stack, any &lt;code&gt;&lt;a href=&quot;#process_flag_message_queue_data&quot;&gt;messages that are considered to be part of the heap&lt;/a&gt;&lt;/code&gt;, and any extra memory that the garbage collector needs during collection.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 가비지 수집이 트리거 될 때 프로세스의 전체 힙입니다. 여기에는 모든 세대 힙, 프로세스 스택, &lt;code&gt;&lt;a href=&quot;#process_flag_message_queue_data&quot;&gt;messages that are considered to be part of the heap&lt;/a&gt;&lt;/code&gt; 모든 메시지 및 가비지 수집기가 수집 중에 필요한 추가 메모리가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="7429a08dbcf0809973be810f4bb7c48dd9917630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the length in bytes of the binary object.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 이진 객체의 길이 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="41f6d7e3bce5c9b4edfc3954b162405fbbe52be0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the number of terms in the array.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 배열의 항 수입니다.</target>
        </trans-unit>
        <trans-unit id="63f5ed79cf88616154ea2ece68a2bc4f43bcf453" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the same as can be retrieved using &lt;code&gt;&lt;a href=&quot;#process_info_total_heap_size&quot;&gt; erlang:process_info(Pid, total_heap_size)&lt;/a&gt;&lt;/code&gt;, or by adding &lt;code&gt;heap_block_size&lt;/code&gt;, &lt;code&gt;old_heap_block_size&lt;/code&gt; and &lt;code&gt;mbuf_size&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;#process_info_garbage_collection_info&quot;&gt; erlang:process_info(Pid, garbage_collection_info)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#process_info_total_heap_size&quot;&gt; erlang:process_info(Pid, total_heap_size)&lt;/a&gt;&lt;/code&gt; 를 사용하거나 &lt;code&gt;&lt;a href=&quot;#process_info_garbage_collection_info&quot;&gt; erlang:process_info(Pid, garbage_collection_info)&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;heap_block_size&lt;/code&gt; , &lt;code&gt;old_heap_block_size&lt;/code&gt; 및 &lt;code&gt;mbuf_size&lt;/code&gt; 를 추가 하여 검색 할 수있는 것과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="0273a2f87f92b87933c0bbc16012b385a1fb5f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt; is the same as can be retrieved using &lt;code&gt;&lt;a href=&quot;#process_info_total_heap_size&quot;&gt;erlang:process_info(Pid, total_heap_size)&lt;/a&gt;&lt;/code&gt;, or by adding &lt;code&gt;heap_block_size&lt;/code&gt;, &lt;code&gt;old_heap_block_size&lt;/code&gt; and &lt;code&gt;mbuf_size&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;#process_info_garbage_collection_info&quot;&gt;erlang:process_info(Pid, garbage_collection_info)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#process_info_total_heap_size&quot;&gt;erlang:process_info(Pid, total_heap_size)&lt;/a&gt;&lt;/code&gt; 를 사용하거나 &lt;code&gt;&lt;a href=&quot;#process_info_garbage_collection_info&quot;&gt;erlang:process_info(Pid, garbage_collection_info)&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;heap_block_size&lt;/code&gt; , &lt;code&gt;old_heap_block_size&lt;/code&gt; 및 &lt;code&gt;mbuf_size&lt;/code&gt; 를 추가 하여 검색 할 수있는 것과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="cee8406491ef64241ba80f6785359265143b2037" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;. Returns the number of records inserted in the table.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; . 테이블에 삽입 된 레코드 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8ed40372feaa6a6025b87cd5a7f470caed37ea58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slave&lt;/code&gt; manual page in STDLIB</source>
          <target state="translated">&lt;code&gt;slave&lt;/code&gt; STDLIB의 슬레이브 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="0bb6804996f079bb5059483ddaf10f22a0efdb9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:add_agent_caps/2&lt;/code&gt; (use snmpa:add_agent_caps/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:add_agent_caps/2&lt;/code&gt; (대신 snmpa : add_agent_caps / 2 사용)</target>
        </trans-unit>
        <trans-unit id="e0d79943899d5897e89b443cb6600ec2b58d3407" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:c/1&lt;/code&gt; (use snmpc:compile/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:c/1&lt;/code&gt; (대신 snmpc : compile / 1 사용)</target>
        </trans-unit>
        <trans-unit id="8470299e1a75b42bd95865f298b7700b7da93c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:c/2&lt;/code&gt; (use snmpc:compile/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:c/2&lt;/code&gt; (대신 snmpc : compile / 2 사용)</target>
        </trans-unit>
        <trans-unit id="9320d5f5c195f9b98630d92fb9d059679e358a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:change_log_size/1&lt;/code&gt; (use snmpa:change_log_size/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:change_log_size/1&lt;/code&gt; (대신 snmpa : change_log_size / 1 사용)</target>
        </trans-unit>
        <trans-unit id="7a54722054369c3800a09e152441648f1d67579c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:compile/3&lt;/code&gt; (use snmpc:compile/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:compile/3&lt;/code&gt; (대신 snmpc : compile / 3 사용)</target>
        </trans-unit>
        <trans-unit id="17ffe1238d90c341f21e808aba097f70ad24865a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:current_address/0&lt;/code&gt; (use snmpa:current_address/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:current_address/0&lt;/code&gt; (대신 snmpa : current_address / 0 사용)</target>
        </trans-unit>
        <trans-unit id="43da661dab80b704398affad17b445f1e79264ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:current_community/0&lt;/code&gt; (use snmpa:current_community/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:current_community/0&lt;/code&gt; (대신 snmpa : current_community / 0 사용)</target>
        </trans-unit>
        <trans-unit id="59eecafdc6c651bd3fcaffb14e4f6cfe6040f446" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:current_context/0&lt;/code&gt; (use snmpa:current_context/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:current_context/0&lt;/code&gt; (대신 snmpa : current_context / 0 사용)</target>
        </trans-unit>
        <trans-unit id="a4a411715714cc56940a0bb716cb831f77986aa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:current_net_if_data/0&lt;/code&gt; (use snmpa:current_net_if_data/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:current_net_if_data/0&lt;/code&gt; (대신 snmpa : current_net_if_data / 0 사용)</target>
        </trans-unit>
        <trans-unit id="95ce1bec6d9b90bfdd1b2bec7901cf3e917270d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:current_request_id/0&lt;/code&gt; (use snmpa:current_request_id/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:current_request_id/0&lt;/code&gt; (대신 snmpa : current_request_id / 0 사용)</target>
        </trans-unit>
        <trans-unit id="dc08fc5ace442fad600e72f2c44208df725ce34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:del_agent_caps/1&lt;/code&gt; (use snmpa:del_agent_caps/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:del_agent_caps/1&lt;/code&gt; (대신 snmpa : del_agent_caps / 1 사용)</target>
        </trans-unit>
        <trans-unit id="0756559afb156429ced5712b83ddb4b64ced5434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:dump_mibs/0&lt;/code&gt; (use snmpa:dump_mibs/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:dump_mibs/0&lt;/code&gt; (대신 snmpa : dump_mibs / 0 사용)</target>
        </trans-unit>
        <trans-unit id="e0439fac5b89caeaec3db66ed784a269d8dab996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:dump_mibs/1&lt;/code&gt; (use snmpa:dump_mibs/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:dump_mibs/1&lt;/code&gt; (대신 snmpa : dump_mibs / 1 사용)</target>
        </trans-unit>
        <trans-unit id="9bacf8994e878dfcc73661f5d9d7a13c8c93610f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:enum_to_int/2&lt;/code&gt; (use snmpa:enum_to_int/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:enum_to_int/2&lt;/code&gt; (대신 snmpa : enum_to_int / 2 사용)</target>
        </trans-unit>
        <trans-unit id="28f76a6475327c336266b5e297f349daca5cf613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:enum_to_int/3&lt;/code&gt; (use snmpa:enum_to_int/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:enum_to_int/3&lt;/code&gt; (대신 snmpa : enum_to_int / 3 사용)</target>
        </trans-unit>
        <trans-unit id="b6896068169767b02a9209a9d25bfd8895dce84c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:get/2&lt;/code&gt; (use snmpa:get/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:get/2&lt;/code&gt; (대신 snmpa : get / 2 사용)</target>
        </trans-unit>
        <trans-unit id="a51ff09e354369e81ba6cf234baa3e4389c3f8fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:get_agent_caps/0&lt;/code&gt; (use snmpa:get_agent_caps/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:get_agent_caps/0&lt;/code&gt; (대신 snmpa : get_agent_caps / 0 사용)</target>
        </trans-unit>
        <trans-unit id="4d12ba5cf946f8fd35a0cc92b525fd127b79cd2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:get_symbolic_store_db/0&lt;/code&gt; (use snmpa:get_symbolic_store_db/0 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:get_symbolic_store_db/0&lt;/code&gt; (대신 snmpa : get_symbolic_store_db / 0 사용)</target>
        </trans-unit>
        <trans-unit id="a38f5ce2b0e2bb12682f68490e7d28748fab0604" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:info/1&lt;/code&gt; (use snmpa:info/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:info/1&lt;/code&gt; (대신 snmpa : info / 1 사용)</target>
        </trans-unit>
        <trans-unit id="2496879caa589b357729e0e748c9f6d5a087ebb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:int_to_enum/2&lt;/code&gt; (use snmpa:int_to_enum/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:int_to_enum/2&lt;/code&gt; (대신 snmpa : int_to_enum / 2 사용)</target>
        </trans-unit>
        <trans-unit id="158be1d4d0a63568da7770466874159f4ada3a25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:int_to_enum/3&lt;/code&gt; (use snmpa:int_to_enum/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:int_to_enum/3&lt;/code&gt; (대신 snmpa : int_to_enum / 3 사용)</target>
        </trans-unit>
        <trans-unit id="b9c8e7d335beb1da306ab367a97ee4b1c362c807" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:is_consistent/1&lt;/code&gt; (use snmpc:is_consistent/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:is_consistent/1&lt;/code&gt; (대신 snmpc : is_consistent / 1 사용)</target>
        </trans-unit>
        <trans-unit id="77d90c681d170e98a789c92205967fe1c3abc1fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:load_mibs/2&lt;/code&gt; (use snmpa:load_mibs/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:load_mibs/2&lt;/code&gt; (대신 snmpa : load_mibs / 2 사용)</target>
        </trans-unit>
        <trans-unit id="5d62018fed5384a0b9653fbf771fcc2d90c012ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:log_to_txt/2&lt;/code&gt; (use snmpa:log_to_txt/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:log_to_txt/2&lt;/code&gt; (대신 snmpa : log_to_txt / 2 사용)</target>
        </trans-unit>
        <trans-unit id="9ecd67066fd195e1673c7082efbc0fbc74c5b06b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:log_to_txt/3&lt;/code&gt; (use snmpa:log_to_txt/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:log_to_txt/3&lt;/code&gt; (대신 snmpa : log_to_txt / 3 사용)</target>
        </trans-unit>
        <trans-unit id="346a47ed75d7c026d352ff030f6590db038a845a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:log_to_txt/4&lt;/code&gt; (use snmpa:log_to_txt/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:log_to_txt/4&lt;/code&gt; (대신 snmpa : log_to_txt / 4 사용)</target>
        </trans-unit>
        <trans-unit id="3012af56185e24d78a243d16bc1cf2f95d2958bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:mib_to_hrl/1&lt;/code&gt; (use snmpc:mib_to_hrl/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:mib_to_hrl/1&lt;/code&gt; (대신 snmpc : mib_to_hrl / 1 사용)</target>
        </trans-unit>
        <trans-unit id="abdc268da51135a237b498c66f95171ce8ac2721" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:name_to_oid/1&lt;/code&gt; (use snmpa:name_to_oid/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:name_to_oid/1&lt;/code&gt; (대신 snmpa : name_to_oid / 1 사용)</target>
        </trans-unit>
        <trans-unit id="32bc5c51601f0dee8d0936b70521374d88c33955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:name_to_oid/2&lt;/code&gt; (use snmpa:name_to_oid/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:name_to_oid/2&lt;/code&gt; (대신 snmpa : name_to_oid / 2 사용)</target>
        </trans-unit>
        <trans-unit id="4ba53cd831418462a78f26bbb0022aa52087d0d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:oid_to_name/1&lt;/code&gt; (use snmpa:oid_to_name/1 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:oid_to_name/1&lt;/code&gt; (대신 snmpa : oid_to_name / 1 사용)</target>
        </trans-unit>
        <trans-unit id="b278c0467fc4bd5bf8dd49e4648586ad156e4a10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:oid_to_name/2&lt;/code&gt; (use snmpa:oid_to_name/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:oid_to_name/2&lt;/code&gt; (대신 snmpa : oid_to_name / 2 사용)</target>
        </trans-unit>
        <trans-unit id="e1a097a7e25fbe7ed82dfc5633c033dbf00d51bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:register_subagent/3&lt;/code&gt; (use snmpa:register_subagent/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:register_subagent/3&lt;/code&gt; (대신 snmpa : register_subagent / 3 사용)</target>
        </trans-unit>
        <trans-unit id="e6e42d0117087108d406001d3175b8849e7bcc73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:send_notification/3&lt;/code&gt; (use snmpa:send_notification/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:send_notification/3&lt;/code&gt; (대신 snmpa : send_notification / 3 사용)</target>
        </trans-unit>
        <trans-unit id="7524727c9eb02de083ceeadda985b2adb88df661" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:send_notification/4&lt;/code&gt; (use snmpa:send_notification/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:send_notification/4&lt;/code&gt; (대신 snmpa : send_notification / 4 사용)</target>
        </trans-unit>
        <trans-unit id="7b30514e73a58aa226b2837248b7d9fdb6cff642" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:send_notification/5&lt;/code&gt; (use snmpa:send_notification/5 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:send_notification/5&lt;/code&gt; (대신 snmpa : send_notification / 5 사용)</target>
        </trans-unit>
        <trans-unit id="766e2c6e9239922957fd68392f3c5e4f63131156" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:send_notification/6&lt;/code&gt; (use snmpa:send_notification/6 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:send_notification/6&lt;/code&gt; (대신 snmpa : send_notification / 6 사용)</target>
        </trans-unit>
        <trans-unit id="64c760f05b250c8e8ca3345bde5413df90b9096b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:send_trap/3&lt;/code&gt; (use snmpa:send_trap/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:send_trap/3&lt;/code&gt; (대신 snmpa : send_trap / 3 사용)</target>
        </trans-unit>
        <trans-unit id="8824373c9be17533d6f8c499d8fa99f7c59fae6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:send_trap/4&lt;/code&gt; (use snmpa:send_trap/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:send_trap/4&lt;/code&gt; (대신 snmpa : send_trap / 4 사용)</target>
        </trans-unit>
        <trans-unit id="c1f2ae4ea40988f3d9462939dc82fc1836c5ca15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:unload_mibs/2&lt;/code&gt; (use snmpa:unload_mibs/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:unload_mibs/2&lt;/code&gt; (대신 snmpa : unload_mibs / 2 사용)</target>
        </trans-unit>
        <trans-unit id="9b6ddcc254ec5df2b74f2c2026474b003572bf5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp:unregister_subagent/2&lt;/code&gt; (use snmpa:unregister_subagent/2 instead.)</source>
          <target state="translated">&lt;code&gt;snmp:unregister_subagent/2&lt;/code&gt; (대신 snmpa : unregister_subagent / 2 사용)</target>
        </trans-unit>
        <trans-unit id="a7f75d66aeedf5cb31543e8e6532fed127f50d81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp&lt;/code&gt;. Each (set-based) Mnesia table can be automatically turned into a Simple Network Management Protocol (SNMP) ordered table as well. This property specifies the types of the SNMP keys.</source>
          <target state="translated">&lt;code&gt;snmp&lt;/code&gt; . 각 (세트 기반) Mnesia 테이블은 SNMP (Simple Network Management Protocol) 순서 테이블로 자동 전환 될 수 있습니다. 이 특성은 SNMP 키의 유형을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="34276129b30a196d6d89752d2ffd300259a79ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmp&lt;/code&gt;. Returns the SNMP struct. &lt;code&gt;[]&lt;/code&gt; means that the table currently has no SNMP properties.</source>
          <target state="translated">&lt;code&gt;snmp&lt;/code&gt; . SNMP 구조체를 반환합니다. &lt;code&gt;[]&lt;/code&gt; 는 현재 테이블에 SNMP 특성이 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="9c431043d51b79719abc18897ca570be601afe5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpa:old_info_format/1&lt;/code&gt; (use &quot;new&quot; format instead)</source>
          <target state="translated">&lt;code&gt;snmpa:old_info_format/1&lt;/code&gt; (대신 &quot;새&quot;형식 사용)</target>
        </trans-unit>
        <trans-unit id="a3e53eb546a9efc1da910947e057d8e938d45308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpa_mib_storage_dets&lt;/code&gt;: &lt;code&gt;{dir, filename()} | {action, keep | clear}, {auto_save, default | pos_integer()} | {repair, force | boolean()}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;snmpa_mib_storage_dets&lt;/code&gt; : &lt;code&gt;{dir, filename()} | {action, keep | clear}, {auto_save, default | pos_integer()} | {repair, force | boolean()}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ce3e1ee0e647789b9adaff949357a3869ef8348" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpa_mib_storage_ets&lt;/code&gt;: &lt;code&gt;{dir, filename()} | {action, keep | clear}, {checksum, boolean()}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;snmpa_mib_storage_ets&lt;/code&gt; : &lt;code&gt;{dir, filename()} | {action, keep | clear}, {checksum, boolean()}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="565537ae8e8baac381d245049f24a119fd9ad973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpa_mib_storage_mnesia&lt;/code&gt;: &lt;code&gt;{action, keep | clear}, {nodes, [node()]}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;snmpa_mib_storage_mnesia&lt;/code&gt; : &lt;code&gt;{action, keep | clear}, {nodes, [node()]}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83de9fb9bce2ac9af00f430e1b421c0097fd4dcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get/3&lt;/code&gt; (use snmpm:async_get2/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get/3&lt;/code&gt; (대신 snmpm : async_get2 / 3 사용)</target>
        </trans-unit>
        <trans-unit id="27f1ac7b6dac674d0005dd0328538ca59041396e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get/4&lt;/code&gt; (use snmpm:async_get2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get/4&lt;/code&gt; (대신 snmpm : async_get2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="278c52a75282499b88d5b04fa7cbfdaf570b0754" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get/5&lt;/code&gt; (use snmpm:async_get2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get/5&lt;/code&gt; (대신 snmpm : async_get2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="c2c70e93722acc1b782041992192636293f87631" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get/6&lt;/code&gt; (use snmpm:async_get2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get/6&lt;/code&gt; (대신 snmpm : async_get2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="2416e6487f3a6e7a42d2cbf8cb991ec93e7fecaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_bulk/5&lt;/code&gt; (use snmpm:async_get_bulk2/5 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_bulk/5&lt;/code&gt; (대신 snmpm : async_get_bulk2 / 5 사용)</target>
        </trans-unit>
        <trans-unit id="d332663206ac3b2b8f0b13beb981a942b24f1a3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_bulk/6&lt;/code&gt; (use snmpm:async_get_bulk2/6 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_bulk/6&lt;/code&gt; (대신 snmpm : async_get_bulk2 / 6 사용)</target>
        </trans-unit>
        <trans-unit id="8e931f434fb3df79502d0cc01669b260aa6da641" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_bulk/7&lt;/code&gt; (use snmpm:async_get_bulk2/6 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_bulk/7&lt;/code&gt; (대신 snmpm : async_get_bulk2 / 6 사용)</target>
        </trans-unit>
        <trans-unit id="f7ef7142ec3de314bc40c656eec1fa5b50a206a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_bulk/8&lt;/code&gt; (use snmpm:async_get_bulk2/6 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_bulk/8&lt;/code&gt; (대신 snmpm : async_get_bulk2 / 6 사용)</target>
        </trans-unit>
        <trans-unit id="223d4118ff305fa49d4f849edaaaef67f0a1d938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_next/3&lt;/code&gt; (use snmpm:async_get_next2/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_next/3&lt;/code&gt; (대신 snmpm : async_get_next2 / 3 사용)</target>
        </trans-unit>
        <trans-unit id="91586ba3a450a34f0cd3cc3bd3aadc64f4a3434a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_next/4&lt;/code&gt; (use snmpm:async_get_next2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_next/4&lt;/code&gt; (대신 snmpm : async_get_next2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="fb1d7a16bc4513d691b97e0e316072161b6a5913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_next/5&lt;/code&gt; (use snmpm:async_get_next2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_next/5&lt;/code&gt; (대신 snmpm : async_get_next2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="c265ac70bd8b4adb19529940e8bd7ab67afb92ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_get_next/6&lt;/code&gt; (use snmpm:async_get_next2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_get_next/6&lt;/code&gt; (대신 snmpm : async_get_next2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="e414aad16cb2ce88d996c6f9561ed7d13402299c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_set/3&lt;/code&gt; (use snmpm:async_set2/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_set/3&lt;/code&gt; (대신 snmpm : async_set2 / 3 사용)</target>
        </trans-unit>
        <trans-unit id="c5eebe16fd7bb1f1a670035b9621e10aa8c5649c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_set/4&lt;/code&gt; (use snmpm:async_set2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_set/4&lt;/code&gt; (대신 snmpm : async_set2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="66fa3821578971867916e7aa05d8b56a0cdb5a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_set/5&lt;/code&gt; (use snmpm:async_set2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_set/5&lt;/code&gt; (대신 snmpm : async_set2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="a708d99bd355f82a9c4d35b1f334526f8fc40369" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:async_set/6&lt;/code&gt; (use snmpm:async_set2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:async_set/6&lt;/code&gt; (대신 snmpm : async_set2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="e8c9c0daadd5b13a3cfb3539db552c34693c8ec7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get/3&lt;/code&gt; (use snmpm:sync_get2/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get/3&lt;/code&gt; (대신 snmpm : sync_get2 / 3 사용)</target>
        </trans-unit>
        <trans-unit id="965ed48b5c482109d57bffede45b1a28b5310907" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get/4&lt;/code&gt; (use snmpm:sync_get2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get/4&lt;/code&gt; (대신 snmpm : sync_get2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="8a05fffda4cb99e1dbba2f76e88cdc910d12b5b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get/5&lt;/code&gt; (use snmpm:sync_get2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get/5&lt;/code&gt; (대신 snmpm : sync_get2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="a25df5070ad82a7610b184a6d15a2477a0fff03b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get/6&lt;/code&gt; (use snmpm:sync_get2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get/6&lt;/code&gt; (대신 snmpm : sync_get2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="b41dcf8550d345694991e16c7bf61ba702fb5ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_bulk/5&lt;/code&gt; (use snmpm:sync_get_bulk2/5 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_bulk/5&lt;/code&gt; (대신 snmpm : sync_get_bulk2 / 5 사용)</target>
        </trans-unit>
        <trans-unit id="70848807d61890c157e0aa6dee48b01ba0860542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_bulk/6&lt;/code&gt; (use snmpm:sync_get_bulk2/6 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_bulk/6&lt;/code&gt; (대신 snmpm : sync_get_bulk2 / 6 사용)</target>
        </trans-unit>
        <trans-unit id="9ce5c2abd351a8dedbf95ba1bac1d4483ef508ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_bulk/7&lt;/code&gt; (use snmpm:sync_get_bulk2/6 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_bulk/7&lt;/code&gt; (대신 snmpm : sync_get_bulk2 / 6 사용)</target>
        </trans-unit>
        <trans-unit id="7c9116381b6a705540600a9ccbb084b55de57b0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_bulk/8&lt;/code&gt; (use snmpm:sync_get_bulk2/6 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_bulk/8&lt;/code&gt; (대신 snmpm : sync_get_bulk2 / 6 사용)</target>
        </trans-unit>
        <trans-unit id="42921d833f7b70b778e14c3e4d5a3799adf8d39c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_next/3&lt;/code&gt; (use snmpm:sync_get_next2/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_next/3&lt;/code&gt; (대신 snmpm : sync_get_next2 / 3 사용)</target>
        </trans-unit>
        <trans-unit id="09991dd1e34a1d387c760d7bb6f2fa6f02d7bac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_next/4&lt;/code&gt; (use snmpm:sync_get_next2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_next/4&lt;/code&gt; (대신 snmpm : sync_get_next2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="59eb0fa8adb01ca001300ca9ebbefb6d95efbe91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_next/5&lt;/code&gt; (use snmpm:sync_get_next2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_next/5&lt;/code&gt; (대신 snmpm : sync_get_next2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="d6b8feb1e20d6372d32c5784032cd03852877df0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_get_next/6&lt;/code&gt; (use snmpm:sync_get_next2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_get_next/6&lt;/code&gt; (대신 snmpm : sync_get_next2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="beeb212ccf6a514f0e79bed53743164fdecafd30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_set/3&lt;/code&gt; (use snmpm:sync_set2/3 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_set/3&lt;/code&gt; (대신 snmpm : sync_set2 / 3 사용)</target>
        </trans-unit>
        <trans-unit id="c6f97fb222a9530783b6ee6aa5a32b5c11663b9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_set/4&lt;/code&gt; (use snmpm:sync_set2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_set/4&lt;/code&gt; (대신 snmpm : sync_set2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="12b017c3d959c81bca7244a3f69b9e4c9943e0c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_set/5&lt;/code&gt; (use snmpm:sync_set2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_set/5&lt;/code&gt; (대신 snmpm : sync_set2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="605bb3e00cbc7721488263c8fc092f050e6c2452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;snmpm:sync_set/6&lt;/code&gt; (use snmpm:sync_set2/4 instead.)</source>
          <target state="translated">&lt;code&gt;snmpm:sync_set/6&lt;/code&gt; (대신 snmpm : sync_set2 / 4 사용)</target>
        </trans-unit>
        <trans-unit id="0d39021fcc4803bee1addaec48011f9baed5f79b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;socket_opt()&lt;/code&gt; = See the options used by &lt;code&gt;gen_tcp(3)&lt;/code&gt;&lt;code&gt;gen_tcp(3)&lt;/code&gt; and &lt;code&gt;ssl(3)&lt;/code&gt; connect(s)</source>
          <target state="translated">&lt;code&gt;socket_opt()&lt;/code&gt; = &lt;code&gt;gen_tcp(3)&lt;/code&gt; &lt;code&gt;gen_tcp(3)&lt;/code&gt; 및 &lt;code&gt;ssl(3)&lt;/code&gt; connect (s)에서 사용하는 옵션 참조</target>
        </trans-unit>
        <trans-unit id="509d5d925dab1361294540137bf38125d3476251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;socket_type()&lt;/code&gt; indicates whether it is an IP socket or an &lt;code&gt;ssl&lt;/code&gt; socket.</source>
          <target state="translated">&lt;code&gt;socket_type()&lt;/code&gt; 은 IP 소켓인지 &lt;code&gt;ssl&lt;/code&gt; 소켓 인지를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="125884dce5c139bfadf2215d850428fb7085d53e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort(FileName)&lt;/code&gt; is equivalent to &lt;code&gt;sort([FileName], FileName)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sort(FileName)&lt;/code&gt; 은 &lt;code&gt;sort([FileName], FileName)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3aa2d0eab807191fd373fc83b15fb7bf339bea37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort(Input, Output)&lt;/code&gt; is equivalent to &lt;code&gt;sort(Input, Output, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sort(Input, Output)&lt;/code&gt; 은 &lt;code&gt;sort(Input, Output, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1799d21a78b95cf6c719e8ad3a80edb8dd681696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort(QH1)&lt;/code&gt; is equivalent to &lt;code&gt;sort(QH1, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sort(QH1)&lt;/code&gt; 은 &lt;code&gt;sort(QH1, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7aacbe7f45b65c249b35c82839eac366ce3d4ec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spawn&lt;/code&gt; creates a new process and returns the pid.</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; 은 새로운 프로세스를 생성하고 pid를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c0bde6fd6085ac2c36c668c5d8fe435e0b3687e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spawn&lt;/code&gt; returns a &lt;strong&gt;process identifier&lt;/strong&gt;, or &lt;strong&gt;pid&lt;/strong&gt;, which uniquely identifies the process. So &amp;lt;0.63.0&amp;gt; is the pid of the &lt;code&gt;spawn&lt;/code&gt; function call above. The next example shows how to use pids.</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; 은 &lt;strong&gt;프로세스&lt;/strong&gt; 를 고유하게 식별하는 프로세스 식별자 또는 &lt;strong&gt;pid를&lt;/strong&gt; 반환합니다 . &amp;lt;0.63.0&amp;gt;은 위 의 &lt;code&gt;spawn&lt;/code&gt; 함수 호출 의 pid입니다 . 다음 예제는 pid를 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f665b6085ee7aa3e793928a554073e5421907ef2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;specs&lt;/code&gt; - The total count of children, dead or alive.</source>
          <target state="translated">&lt;code&gt;specs&lt;/code&gt; - 사망 또는 생존 아동의 총 수입니다.</target>
        </trans-unit>
        <trans-unit id="cb0f10a6be46a7d41dc675cd473dff341f4a9d3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split/3&lt;/code&gt; splits &lt;code&gt;String&lt;/code&gt; in &lt;code&gt;N&lt;/code&gt; chunks using &lt;code&gt;RegExp&lt;/code&gt;. &lt;code&gt;split/3&lt;/code&gt; is equivalent to &lt;code&gt;regexp:split/2&lt;/code&gt; with the exception that &lt;code&gt;N&lt;/code&gt; defines the maximum number of fields in &lt;code&gt;FieldList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;split/3&lt;/code&gt; 는 &lt;code&gt;RegExp&lt;/code&gt; 를 사용하여 &lt;code&gt;String&lt;/code&gt; 을 &lt;code&gt;N&lt;/code&gt; 청크로 분할 합니다. &lt;code&gt;split/3&lt;/code&gt; 는 &lt;code&gt;regexp:split/2&lt;/code&gt; 와 동일하지만 &lt;code&gt;N&lt;/code&gt; 은 &lt;code&gt;FieldList&lt;/code&gt; 의 최대 필드 수를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="f10629c86af3dc269235905ff42f7da40cc41716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split_path/1&lt;/code&gt; splits &lt;code&gt;RequestLine&lt;/code&gt; in a file reference (&lt;code&gt;Path&lt;/code&gt;), and a &lt;code&gt;QueryString&lt;/code&gt; or a &lt;code&gt;PathInfo&lt;/code&gt; string as specified in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;. A &lt;code&gt;QueryString&lt;/code&gt; is isolated from &lt;code&gt;Path&lt;/code&gt; with a question mark (&lt;code&gt;?&lt;/code&gt;) and &lt;code&gt;PathInfo&lt;/code&gt; with a slash (/). In the case of a &lt;code&gt;QueryString&lt;/code&gt;, everything before &lt;code&gt;?&lt;/code&gt; is a &lt;code&gt;Path&lt;/code&gt; and everything after &lt;code&gt;?&lt;/code&gt; is a &lt;code&gt;QueryString&lt;/code&gt;. In the case of a &lt;code&gt;PathInfo&lt;/code&gt;, &lt;code&gt;RequestLine&lt;/code&gt; is scanned from left-to-right on the hunt for longest possible &lt;code&gt;Path&lt;/code&gt; being a file or a directory. Everything after the longest possible &lt;code&gt;Path&lt;/code&gt;, isolated with a &lt;code&gt;/&lt;/code&gt;, is regarded as &lt;code&gt;PathInfo&lt;/code&gt;. The resulting &lt;code&gt;Path&lt;/code&gt; is decoded using &lt;code&gt;decode_hex/1&lt;/code&gt; before delivery.</source>
          <target state="translated">&lt;code&gt;split_path/1&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; 에 지정된대로 파일 참조 ( &lt;code&gt;Path&lt;/code&gt; ) 및 &lt;code&gt;QueryString&lt;/code&gt; 또는 &lt;code&gt;PathInfo&lt;/code&gt; 문자열 에서 &lt;code&gt;RequestLine&lt;/code&gt; 을 분할 합니다 . &lt;code&gt;QueryString&lt;/code&gt; 을가 분리되어 &lt;code&gt;Path&lt;/code&gt; 물음표 (에 &lt;code&gt;?&lt;/code&gt; )과 &lt;code&gt;PathInfo&lt;/code&gt; 슬래시 (/)로. &lt;code&gt;QueryString&lt;/code&gt; 의 경우 이전의 모든 것이 &lt;code&gt;?&lt;/code&gt; A는 &lt;code&gt;Path&lt;/code&gt; 와 모든 후에 &lt;code&gt;?&lt;/code&gt; A는 &lt;code&gt;QueryString&lt;/code&gt; 을가 . &lt;code&gt;PathInfo&lt;/code&gt; , &lt;code&gt;RequestLine&lt;/code&gt; 의 경우파일 또는 디렉토리가 될 수있는 가장 긴 &lt;code&gt;Path&lt;/code&gt; 찾기 위해 헌트에서 왼쪽에서 오른쪽으로 스캔됩니다 . &lt;code&gt;/&lt;/code&gt; 로 격리 된 가장 긴 &lt;code&gt;Path&lt;/code&gt; 뒤에있는 모든 것을 &lt;code&gt;PathInfo&lt;/code&gt; 로 간주합니다 . 결과 &lt;code&gt;Path&lt;/code&gt; 는 전달 전에 &lt;code&gt;decode_hex/1&lt;/code&gt; 을 사용하여 디코딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="243ac817c483b29b7b069cc9232f2980089daf20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split_script_path/1&lt;/code&gt; is equivalent to &lt;code&gt;split_path/1&lt;/code&gt; with one exception. If the longest possible path is not a regular, accessible, and executable file, then &lt;code&gt;not_a_script&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;split_script_path/1&lt;/code&gt; 은 한 가지 예외를 제외하고 &lt;code&gt;split_path/1&lt;/code&gt; 과 같습니다 . 가능한 가장 긴 경로가 액세스 가능하고 실행 가능한 일반 파일이 아닌 경우 &lt;code&gt;not_a_script&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="fba0b32b8dc6f9e05e9832e181bae787f873facb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splitwith(P, L)&lt;/code&gt; splits the list &lt;code&gt;L&lt;/code&gt; into the two sublists &lt;code&gt;{L1, L2}&lt;/code&gt;, where &lt;code&gt;L = takewhile(P, L)&lt;/code&gt; and &lt;code&gt;L2 = dropwhile(P, L)&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;splitwith(P, L)&lt;/code&gt; 은 목록 &lt;code&gt;L&lt;/code&gt; 을 두 개의 하위 목록 &lt;code&gt;{L1, L2}&lt;/code&gt; 로 분할합니다 . 여기서 &lt;code&gt;L = takewhile(P, L)&lt;/code&gt; 및 &lt;code&gt;L2 = dropwhile(P, L)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7991df23ce2c21bcb2141e293c55476b3a3a731d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spread&lt;/code&gt; - Schedulers are spread as much as possible.</source>
          <target state="translated">&lt;code&gt;spread&lt;/code&gt; -스케줄러가 가능한 한 많이 퍼집니다.</target>
        </trans-unit>
        <trans-unit id="607cdd102d8cefb6d67db0029039660817230d17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;src&lt;/code&gt; - Optional. Contains the Erlang source code and internal include files used by the application itself. This directory is no longer required in a released application.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; - 선택 사항. Erlang 소스 코드와 응용 프로그램 자체에서 사용하는 내부 포함 파일을 포함합니다. 릴리스 된 응용 프로그램에서는이 디렉토리가 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e2829dd2ff2898f762ac503636aaba0d84ad07e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;src&lt;/code&gt; - Required. Contains the Erlang source code, the source of the &lt;code&gt;.app&lt;/code&gt; file and internal include files used by the application itself. Additional sub-directories within &lt;code&gt;src&lt;/code&gt; can be used as namespaces to organize source files. These directories should never be deeper than one level.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; - 필수입니다. Erlang 소스 코드, &lt;code&gt;.app&lt;/code&gt; 파일 의 소스 및 애플리케이션 자체에서 사용하는 내부 포함 파일을 포함합니다. &lt;code&gt;src&lt;/code&gt; 내의 추가 하위 디렉토리 는 소스 파일을 구성하기위한 네임 스페이스로 사용될 수 있습니다. 이 디렉토리는 한 레벨보다 깊어서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="8e0853734a111ac32d152021a51344463e02d672" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssh_host_dsa_key&lt;/code&gt; and &lt;code&gt;ssh_host_dsa_key.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ssh_host_dsa_key&lt;/code&gt; 및 &lt;code&gt;ssh_host_dsa_key.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78bbd7eeb90e40a666a43bda69f48450bcec107a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssh_host_ecdsa_key&lt;/code&gt; and &lt;code&gt;ssh_host_ecdsa_key.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ssh_host_ecdsa_key&lt;/code&gt; 및 &lt;code&gt;ssh_host_ecdsa_key.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab92ea893e8df5dbbab7e621401907eb5ea41403" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssh_host_rsa_key&lt;/code&gt; and &lt;code&gt;ssh_host_rsa_key.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ssh_host_rsa_key&lt;/code&gt; 및 &lt;code&gt;ssh_host_rsa_key.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1261c75030f00e68733d2d30cd1ecbe6fbea217e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl:cipher_suites/0&lt;/code&gt; (use cipher_suites/2,3 instead)</source>
          <target state="translated">&lt;code&gt;ssl:cipher_suites/0&lt;/code&gt; (대신 cipher_suites / 2,3 사용)</target>
        </trans-unit>
        <trans-unit id="96fc667fc6fe92caeb23240200d96852e1fb4288" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl:cipher_suites/1&lt;/code&gt; (use cipher_suites/2,3 instead)</source>
          <target state="translated">&lt;code&gt;ssl:cipher_suites/1&lt;/code&gt; (대신 cipher_suites / 2,3 사용)</target>
        </trans-unit>
        <trans-unit id="84f195717ad563f288294b00c048d11189583926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ssl:ssl_accept/_&lt;/code&gt; (use ssl_handshake/1,2,3 instead)</source>
          <target state="translated">&lt;code&gt;ssl:ssl_accept/_&lt;/code&gt; (대신 ssl_handshake / 1,2,3 사용)</target>
        </trans-unit>
        <trans-unit id="439d7c6b93be148551a89cd3fbe5ee9fcc06e4a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;standard.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#system_information&quot;&gt;System Information&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;standard.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#system_information&quot;&gt;System Information&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="2506feb97f08fc3787807d58fdcd08800b47a8cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; defines the function call used to start the child process. It is a module-function-arguments tuple used as &lt;code&gt;apply(M, F, A)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 는 하위 프로세스를 시작하는 데 사용되는 함수 호출을 정의합니다. &lt;code&gt;apply(M, F, A)&lt;/code&gt; 로 사용되는 모듈 함수 인수 튜플 입니다.</target>
        </trans-unit>
        <trans-unit id="1e89edde81ac033d234b9af05716eb9b5a7fd9fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; defines the function call used to start the child process. It must be a module-function-arguments tuple &lt;code&gt;{M,F,A}&lt;/code&gt; used as &lt;code&gt;apply(M,F,A)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 는 하위 프로세스를 시작하는 데 사용되는 함수 호출을 정의합니다. &lt;code&gt;apply(M,F,A)&lt;/code&gt; 로 사용되는 모듈 함수 인수 튜플 &lt;code&gt;{M,F,A}&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="35252648d8669b75501956b567fce0242a698b68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; is called when starting the application and is to create the supervision tree by starting the top supervisor. It is expected to return the pid of the top supervisor and an optional term, &lt;code&gt;State&lt;/code&gt;, which defaults to &lt;code&gt;[]&lt;/code&gt;. This term is passed as is to &lt;code&gt;stop&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 는 응용 프로그램을 시작할 때 호출되며 최상위 감독자를 시작하여 감독 트리를 만드는 것입니다. 최고 수퍼바이저의 pid와 선택적 &lt;code&gt;State&lt;/code&gt; 인 State 를 &lt;code&gt;[]&lt;/code&gt; 로 반환 할 것으로 예상됩니다 . 이 용어는 그대로 &lt;code&gt;stop&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="4a19ed5e0f59c508f5cb3c6869f75fc2329c0c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_clean.boot&lt;/code&gt; - Loads the code for and starts the applications Kernel and STDLIB.</source>
          <target state="translated">&lt;code&gt;start_clean.boot&lt;/code&gt; - 응용 프로그램 커널 및 STDLIB에 대한 코드를로드하고 시작합니다.</target>
        </trans-unit>
        <trans-unit id="3dde2b9853406448644292076fe10f5813f6d27f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_erl&lt;/code&gt; also assumes that there is &lt;code&gt;sys.config&lt;/code&gt; in the release version directory (&lt;code&gt;&quot;releases/FIRST/sys.config&quot;&lt;/code&gt;). That is the topic of the next section.</source>
          <target state="translated">&lt;code&gt;start_erl&lt;/code&gt; 는 또한 있다고 가정 &lt;code&gt;sys.config&lt;/code&gt; (릴리스 버전 디렉토리는 &lt;code&gt;&quot;releases/FIRST/sys.config&quot;&lt;/code&gt; ). 이것이 다음 섹션의 주제입니다.</target>
        </trans-unit>
        <trans-unit id="69fb79270b65287444a8ab1285191d490453d1da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_erl&lt;/code&gt; requires:</source>
          <target state="translated">&lt;code&gt;start_erl&lt;/code&gt; 에는 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="4191a0c3ab40e3daafa908b418808d86ab9c0b4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_link&lt;/code&gt; calls function &lt;code&gt;gen_server:start_link/4&lt;/code&gt;. This function spawns and links to a new process, a &lt;code&gt;gen_server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start_link&lt;/code&gt; 함수 호출 &lt;code&gt;gen_server:start_link/4&lt;/code&gt; . 이 함수는 새로운 프로세스 인 &lt;code&gt;gen_server&lt;/code&gt; 를 생성하고 연결합니다 .</target>
        </trans-unit>
        <trans-unit id="d1a11af853b7d89610a9879c8b6ed9b282c31fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_link&lt;/code&gt; calls function &lt;code&gt;gen_statem:start_link/4&lt;/code&gt;, which spawns and links to a new process, a &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start_link&lt;/code&gt; 함수 호출 &lt;code&gt;gen_statem:start_link/4&lt;/code&gt; , 새로운 공정, 어떤 급부상 링크 &lt;code&gt;gen_statem&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43363140a8bc840761fe776e0e8a57f9becdc28e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_sasl.boot&lt;/code&gt; - Loads the code for and starts the applications Kernel, STDLIB, and SASL).</source>
          <target state="translated">&lt;code&gt;start_sasl.boot&lt;/code&gt; - 응용 프로그램 커널, STDLIB 및 SASL에 대한 코드를로드하고 시작합니다.</target>
        </trans-unit>
        <trans-unit id="3dfeb9d1847183693617efb03a1351fa92500350" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state&lt;/code&gt; can have the following values:</source>
          <target state="translated">&lt;code&gt;state&lt;/code&gt; 는 다음 값을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3156f3424967c1b1692d64b4a5dc78442031d7c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;statistics(exact_reductions)&lt;/code&gt; is a more expensive operation than &lt;code&gt;&lt;a href=&quot;#statistics_reductions&quot;&gt; statistics(reductions)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;statistics(exact_reductions)&lt;/code&gt; 보다 더 비용이 많이 드는 작업이다 &lt;code&gt;&lt;a href=&quot;#statistics_reductions&quot;&gt; statistics(reductions)&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b458cc47e61e9c6d04d62d041602f53f3b1fe52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;statistics(exact_reductions)&lt;/code&gt; is a more expensive operation than &lt;code&gt;&lt;a href=&quot;#statistics_reductions&quot;&gt;statistics(reductions)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;statistics(exact_reductions)&lt;/code&gt; 보다 더 비용이 많이 드는 작업이다 &lt;code&gt;&lt;a href=&quot;#statistics_reductions&quot;&gt;statistics(reductions)&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="019d8783135ccd9ba68bec281036a7adc2887fce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;statistics(microstate_accounting)&lt;/code&gt; returns a list of maps representing some of the OS threads within ERTS. Each map contains &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; fields that can be used to identify what thread it is, and also a counters field that contains data about how much time has been spent in the various states.</source>
          <target state="translated">&lt;code&gt;statistics(microstate_accounting)&lt;/code&gt; 은 ERTS 내의 일부 OS 스레드를 나타내는 맵 목록을 반환합니다. 각 맵에는 스레드 &lt;code&gt;type&lt;/code&gt; 을 식별하는 데 사용할 수있는 type 및 &lt;code&gt;id&lt;/code&gt; 필드와 다양한 상태에서 소요 된 시간에 대한 데이터가 포함 된 counters 필드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="00c3285384a8ed6b0e4fad2229108e7c4bde8d14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;statistics/1&lt;/code&gt; with argument &lt;code&gt;runtime&lt;/code&gt; measures CPU time spent in the Erlang virtual machine. The advantage with CPU time is that the results are more consistent from run to run. The disadvantage is that the time spent in the operating system kernel (such as swapping and I/O) is not included. Therefore, measuring CPU time is misleading if any I/O (file or socket) is involved.</source>
          <target state="translated">&lt;code&gt;statistics/1&lt;/code&gt; 인수 &lt;code&gt;runtime&lt;/code&gt; statistics / 1 은 Erlang 가상 머신에서 소비 된 CPU 시간을 측정합니다. CPU 시간의 장점은 결과가 실행마다 더 일관성이 있다는 것입니다. 단점은 운영 체제 커널 (예 : 스와핑 및 I / O)에 소요 된 시간이 포함되지 않는다는 것입니다. 따라서 I / O (파일 또는 소켓)가 관련된 경우 CPU 시간 측정이 잘못된 것입니다.</target>
        </trans-unit>
        <trans-unit id="7678d708dd11785cfac1ed18d9669be48be7c661" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop/1&lt;/code&gt; is called &lt;strong&gt;after&lt;/strong&gt; the application has been stopped and is to do any necessary cleaning up. The actual stopping of the application, that is, the shutdown of the supervision tree, is handled automatically as described in &lt;code&gt;&lt;a href=&quot;#stopping&quot;&gt;Starting and Stopping Applications&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stop/1&lt;/code&gt; 은 응용 프로그램이 중지 된 &lt;strong&gt;후&lt;/strong&gt; 호출 되며 필요한 정리를 수행해야합니다. 애플리케이션의 실제 중지, 즉 감독 트리의 종료는 &lt;code&gt;&lt;a href=&quot;#stopping&quot;&gt;Starting and Stopping Applications&lt;/a&gt;&lt;/code&gt; 설명 된대로 자동으로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="4ae01a0d4df52cd6a396e8d1a5dda99507c7d96d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;storage_type&lt;/code&gt;. Returns the local storage type of the table. It can be &lt;code&gt;disc_copies&lt;/code&gt;, &lt;code&gt;ram_copies&lt;/code&gt;, &lt;code&gt;disc_only_copies&lt;/code&gt;, or the atom &lt;code&gt;unknown&lt;/code&gt;. &lt;code&gt;unknown&lt;/code&gt; is returned for all tables that only reside remotely.</source>
          <target state="translated">&lt;code&gt;storage_type&lt;/code&gt; . 테이블의 로컬 스토리지 유형을 리턴합니다. 그것은 될 수 &lt;code&gt;disc_copies&lt;/code&gt; , &lt;code&gt;ram_copies&lt;/code&gt; , &lt;code&gt;disc_only_copies&lt;/code&gt; , 또는 원자 &lt;code&gt;unknown&lt;/code&gt; . 원격에만 상주하는 모든 테이블에 대해 &lt;code&gt;unknown&lt;/code&gt; 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="617e6a978094968e10a5f7fc9334eb0d1e7e0df7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strategy&lt;/code&gt; specifies the &lt;code&gt;&lt;a href=&quot;#strategy&quot;&gt;restart strategy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strategy&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;#strategy&quot;&gt;restart strategy&lt;/a&gt;&lt;/code&gt; 전략을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="979af2982a1f83fdce37c6f9589b4879d42c0c90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream&lt;/code&gt; indicates where the function is to send its output.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; 은 함수가 출력을 보낼 위치를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2d562db6f33bb9eb6da6e6ebda53139e63607b34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string()&lt;/code&gt; = list of ASCII characters</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; = ASCII 문자 목록</target>
        </trans-unit>
        <trans-unit id="0e92b14680ea9fea5b373b2dc3f7248947c4c1ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string()&lt;/code&gt;: A &lt;code&gt;Request-URI&lt;/code&gt; as described in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; , &amp;bull; &lt;code&gt;Request-URI&lt;/code&gt; 에 설명 된대로 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b47a0b2213c3183aeec65e31bc4b31e6339de8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string()&lt;/code&gt;: A URL pointing at the new document position.</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; : 새 문서 위치를 가리키는 URL</target>
        </trans-unit>
        <trans-unit id="87b155a297b77961a30cb7943365871e8ddf39bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string()&lt;/code&gt;: A string describing why the service was unavailable.</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; : 서비스를 사용할 수없는 이유를 설명하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="0401c3eac3cc2573f6485455cd8b851ee2bc2102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string(String)&lt;/code&gt; is equivalent to &lt;code&gt;string(String, 1)&lt;/code&gt;, and &lt;code&gt;string(String, StartLocation)&lt;/code&gt; is equivalent to &lt;code&gt;string(String, StartLocation, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string(String)&lt;/code&gt; 은 &lt;code&gt;string(String, 1)&lt;/code&gt; 에 해당하고 &lt;code&gt;string(String, StartLocation)&lt;/code&gt; 은 &lt;code&gt;string(String, StartLocation, [])&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="829a7b9e7a070c8eedbe9faf460e1206c04103e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; is a &lt;code&gt;NULL&lt;/code&gt;-terminated sequence of characters (that is, a C string) from which the list will be created.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 은 목록으로 생성 될 &lt;code&gt;NULL&lt;/code&gt; 로 끝나는 문자 시퀀스 (즉, C 문자열)입니다.</target>
        </trans-unit>
        <trans-unit id="d03b30e20ea1057a49ab478dbea5f53d595df7f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; is a buffer containing a sequence of bytes. The buffer does not need to be &lt;code&gt;NULL&lt;/code&gt;-terminated.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 은 일련의 바이트를 포함하는 버퍼입니다. 버퍼는 &lt;code&gt;NULL&lt;/code&gt; 로 끝나지 않아도됩니다 .</target>
        </trans-unit>
        <trans-unit id="5e9b47b52b5189b16db8322be0aa18e9de13e1bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; is the sequence of characters that will be used to create the atom.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 은 원자를 만드는 데 사용될 문자 시퀀스입니다.</target>
        </trans-unit>
        <trans-unit id="6b57290f7648798494a58fa3f5ad151fa956b03e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string_to_handle(QueryString)&lt;/code&gt; is equivalent to &lt;code&gt;string_to_handle(QueryString, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string_to_handle(QueryString)&lt;/code&gt; 은 &lt;code&gt;string_to_handle(QueryString, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c4392ea3ebcf53d0b651f744627722a0ea70099" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string_to_handle(QueryString, Options)&lt;/code&gt; is equivalent to &lt;code&gt;string_to_handle(QueryString, Options, erl_eval:new_bindings())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string_to_handle(QueryString, Options)&lt;/code&gt; 은 &lt;code&gt;string_to_handle(QueryString, Options, erl_eval:new_bindings())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76cb6b2cad6ff288638a402f533d017bc05a8c4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strings&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; if modifier &lt;code&gt;l&lt;/code&gt; is present.</source>
          <target state="translated">&lt;code&gt;strings&lt;/code&gt; 수정 자 &lt;code&gt;l&lt;/code&gt; 이 있으면 문자열 이 &lt;code&gt;false&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="cbbab772bcf66672a3f9fd53febd99f1d9336144" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strip/1&lt;/code&gt; removes any leading or trailing linear white space from the string. Linear white space is to be read as horizontal tab or space.</source>
          <target state="translated">&lt;code&gt;strip/1&lt;/code&gt; 은 문자열에서 선행 또는 후행 선형 공백을 제거합니다. 선형 공백은 가로 탭 또는 공백으로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="74e7941fca29115b2e0026a22ec1897cd3510461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct hostent *ei_gethostbyaddr(const char *addr, int len, int type)&lt;/code&gt;&lt;code&gt;struct hostent *ei_gethostbyaddr_r(const char *addr, int length, int type, struct hostent *hostp, char *buffer, int buflen, int *h_errnop)&lt;/code&gt;&lt;code&gt;struct hostent *ei_gethostbyname(const char *name)&lt;/code&gt;&lt;code&gt;struct hostent *ei_gethostbyname_r(const char *name, struct hostent *hostp, char *buffer, int buflen, int *h_errnop)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;struct hostent *ei_gethostbyaddr(const char *addr, int len, int type)&lt;/code&gt; &lt;code&gt;struct hostent *ei_gethostbyaddr_r(const char *addr, int length, int type, struct hostent *hostp, char *buffer, int buflen, int *h_errnop)&lt;/code&gt; &lt;code&gt;struct hostent *ei_gethostbyname(const char *name)&lt;/code&gt; &lt;code&gt;struct hostent *ei_gethostbyname_r(const char *name, struct hostent *hostp, char *buffer, int buflen, int *h_errnop)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1409d6497c88ef60b280850499bdc9c218838121" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct hostent *erl_gethostbyaddr(addr, length, type)&lt;/code&gt;&lt;code&gt;struct hostent *erl_gethostbyaddr_r(addr, length, type, hostp, buffer, buflen, h_errnop)&lt;/code&gt;&lt;code&gt;struct hostent *erl_gethostbyname(name)&lt;/code&gt;&lt;code&gt;struct hostent *erl_gethostbyname_r(name, hostp, buffer, buflen, h_errnop)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;struct hostent *erl_gethostbyaddr(addr, length, type)&lt;/code&gt; &lt;code&gt;struct hostent *erl_gethostbyaddr_r(addr, length, type, hostp, buffer, buflen, h_errnop)&lt;/code&gt; &lt;code&gt;struct hostent *erl_gethostbyname(name)&lt;/code&gt; &lt;code&gt;struct hostent *erl_gethostbyname_r(name, hostp, buffer, buflen, h_errnop)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ddbbd8e762f6eb9ca0fb39b8f90973ab856b7681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stylesheet&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;run_test_chapter#html_stylesheet&quot;&gt;HTML Style Sheets&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;stylesheet&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;run_test_chapter#html_stylesheet&quot;&gt;HTML Style Sheets&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="9101985c9c9e6805623d24ca6be2fc9c755232a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subgraph(Digraph, Vertices)&lt;/code&gt; is equivalent to &lt;code&gt;subgraph(Digraph, Vertices, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subgraph(Digraph, Vertices)&lt;/code&gt; 는 &lt;code&gt;subgraph(Digraph, Vertices, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ee4cf26515151aee37ffc9071c858cd3b6cfd78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subscribers&lt;/code&gt;. Returns a list of local processes currently subscribing to local table events that involve this table on this node.</source>
          <target state="translated">&lt;code&gt;subscribers&lt;/code&gt; . 이 노드에서이 테이블과 관련된 로컬 테이블 이벤트에 현재 구독중인 로컬 프로세스 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d465c420098d5c04a06637730255e8f58c196a7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subscribers&lt;/code&gt;. Returns a list of local processes currently subscribing to system events.</source>
          <target state="translated">&lt;code&gt;subscribers&lt;/code&gt; . 현재 시스템 이벤트를 구독중인 로컬 프로세스 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="58eaa436722697bb4b76ecdc62fd661d7e29c9f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suffix/1&lt;/code&gt; is equivalent to &lt;code&gt;filename:extension/1&lt;/code&gt; with the exception that &lt;code&gt;Suffix&lt;/code&gt; is returned without a leading dot (&lt;code&gt;.&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;suffix/1&lt;/code&gt; 은 &lt;code&gt;Suffix&lt;/code&gt; ( &lt;code&gt;.&lt;/code&gt; ) 없이 반환되는 점을 제외하고 &lt;code&gt;filename:extension/1&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="33ac829a0b942b7ab697b4c75739d01b6c485a38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sunrm&lt;/code&gt; - Sun's RPC encoding</source>
          <target state="translated">&lt;code&gt;sunrm&lt;/code&gt; -Sun의 RPC 인코딩</target>
        </trans-unit>
        <trans-unit id="385e46d3cdae470f061ce351f93fa76f5f98d53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;supervisor:start_link&lt;/code&gt; is synchronous. It does not return until all child processes have been started.</source>
          <target state="translated">&lt;code&gt;supervisor:start_link&lt;/code&gt; 는 동기식입니다. 모든 자식 프로세스가 시작될 때까지 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c1371430e2bfeb55d07934cd8e7f7006c3d014b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;supervisors&lt;/code&gt; - The count of all children marked as &lt;code&gt;child_type = supervisor&lt;/code&gt; in the specification list, regardless if the child process is still alive.</source>
          <target state="translated">&lt;code&gt;supervisors&lt;/code&gt; - 자식 프로세스가 아직 &lt;code&gt;child_type = supervisor&lt;/code&gt; 인지 여부에 관계없이 사양 목록에서 child_type = supervisor 로 표시된 모든 자식의 수입니다 .</target>
        </trans-unit>
        <trans-unit id="74f63f16e6444059fb284c802ba43aacc6c2805a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspended&lt;/code&gt; (suspended on a &quot;busy&quot; port or by the BIF &lt;code&gt;erlang:suspend_process/1,2&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;suspended&lt;/code&gt; ( &quot;사용 중&quot;포트 또는 BIF &lt;code&gt;erlang:suspend_process/1,2&lt;/code&gt; 에 의해 일시 중단됨 )</target>
        </trans-unit>
        <trans-unit id="8fcbdcec09d43370398600cd05606094a9113ff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync_nodes_mandatory = [Node]&lt;/code&gt; - Specifies which other nodes must be started (within the time-out specified by &lt;code&gt;sync_nodes_timeout&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;sync_nodes_mandatory = [Node]&lt;/code&gt; -시작할 다른 노드를 지정합니다 ( &lt;code&gt;sync_nodes_timeout&lt;/code&gt; 에 지정된 제한 시간 내에 ).</target>
        </trans-unit>
        <trans-unit id="3ead4131afb9d2c0902c3784d8e8cb2caccdc953" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync_nodes_optional = [Node]&lt;/code&gt; - Specifies which other nodes can be started (within the time-out specified by &lt;code&gt;sync_nodes_timeout&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;sync_nodes_optional = [Node]&lt;/code&gt; -시작할 수있는 다른 노드를 지정합니다 ( &lt;code&gt;sync_nodes_timeout&lt;/code&gt; 에 지정된 시간 초과 이내 ).</target>
        </trans-unit>
        <trans-unit id="926a5205a8f3357b54597d3a5903fd2cf3520a75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync_nodes_timeout = integer() | infinity&lt;/code&gt; - Specifies how many milliseconds to wait for the other nodes to start.</source>
          <target state="translated">&lt;code&gt;sync_nodes_timeout = integer() | infinity&lt;/code&gt; 다른 노드가 시작되기를 기다리는 시간 (밀리 초)을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="331a90ce47d0f3f19fd4260f5da31347814d7050" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sys:debug_options/1&lt;/code&gt; takes a list of options as argument. Here the list is empty, which means no debugging is enabled initially. For information about the possible options, see the &lt;code&gt;sys(3)&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">&lt;code&gt;sys:debug_options/1&lt;/code&gt; 는 옵션 목록을 인수로 사용합니다. 여기에 목록이 비어 있습니다. 즉, 초기에 디버깅을 사용할 수 없습니다. 가능한 옵션에 대한 정보 는 STDLIB 의 &lt;code&gt;sys(3)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="68e8ec2b1dceb4534eb89da5410d555d02177843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sys:get_debug/3&lt;/code&gt; (incorrectly documented and only for internal use. Can often be replaced with sys:get_log/1)</source>
          <target state="translated">&lt;code&gt;sys:get_debug/3&lt;/code&gt; (잘못 문서화되었으며 내부 용으로 만 사용됩니다. 종종 sys : get_log / 1로 대체 될 수 있음)</target>
        </trans-unit>
        <trans-unit id="7df14368372b3646bb181f1597ffba0ecce36e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sys_alloc&lt;/code&gt; cannot be disabled.</source>
          <target state="translated">&lt;code&gt;sys_alloc&lt;/code&gt; 을 비활성화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1bad1d55ed92f2d7503c091b271286408ed77f87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sys_alloc&lt;/code&gt; carrier size. Carriers allocated through &lt;code&gt;sys_alloc&lt;/code&gt; are allocated in sizes that are multiples of the &lt;code&gt;sys_alloc&lt;/code&gt; carrier size. This is not true for main multiblock carriers and carriers allocated during a memory shortage, though.</source>
          <target state="translated">&lt;code&gt;sys_alloc&lt;/code&gt; 캐리어 크기. &lt;code&gt;sys_alloc&lt;/code&gt; 을 통해 할당 된 반송파 는 &lt;code&gt;sys_alloc&lt;/code&gt; 캐리어 sys_alloc 캐리어 크기의 . 그러나 메모리 부족시 할당 된 주 멀티 블록 캐리어 및 캐리어에는 해당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0696131f99ac521df2e4ee480eb796e727704385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sys_alloc&lt;/code&gt;, &lt;code&gt;literal_alloc&lt;/code&gt; and &lt;code&gt;temp_alloc&lt;/code&gt; are always enabled and cannot be disabled. &lt;code&gt;exec_alloc&lt;/code&gt; is only available if it is needed and cannot be disabled. &lt;code&gt;mseg_alloc&lt;/code&gt; is always enabled if it is available and an allocator that uses it is enabled. All other allocators can be &lt;code&gt;&lt;a href=&quot;#M_e&quot;&gt;enabled or disabled&lt;/a&gt;&lt;/code&gt;. By default all allocators are enabled. When an allocator is disabled, &lt;code&gt;sys_alloc&lt;/code&gt; is used instead of the disabled allocator.</source>
          <target state="translated">&lt;code&gt;sys_alloc&lt;/code&gt; , &lt;code&gt;literal_alloc&lt;/code&gt; 및 &lt;code&gt;temp_alloc&lt;/code&gt; 은 항상 활성화되어 있으며 비활성화 할 수 없습니다. &lt;code&gt;exec_alloc&lt;/code&gt; 은 필요한 경우에만 사용할 수 있으며 비활성화 할 수 없습니다. &lt;code&gt;mseg_alloc&lt;/code&gt; 은 사용 가능하고이를 사용하는 할당자가 사용 가능한 경우 항상 사용 가능합니다. 다른 모든 할당자는 &lt;code&gt;&lt;a href=&quot;#M_e&quot;&gt;enabled or disabled&lt;/a&gt;&lt;/code&gt; 할 수 있습니다 . 기본적으로 모든 할당자가 활성화되어 있습니다. 할당자가 비활성화되면 비활성화 된 할당 자 대신 &lt;code&gt;sys_alloc&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fc3a0a960790f719d64fa929942a9d6fbc2c76fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;syslogd(1M)&lt;/code&gt;, &lt;code&gt;syslog.conf(4)&lt;/code&gt; in the Solaris documentation.</source>
          <target state="translated">&lt;code&gt;syslogd(1M)&lt;/code&gt; Solaris 설명서의 syslogd (1M) , &lt;code&gt;syslog.conf(4)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88e456495a94fa4b0312e9cb80dbba7fca42938e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;system_limit&lt;/code&gt;. A system limit was exhausted.</source>
          <target state="translated">&lt;code&gt;system_limit&lt;/code&gt; . 시스템 제한이 소진되었습니다.</target>
        </trans-unit>
        <trans-unit id="7daa58f756a53f96f4454b9b3b4f467760073a12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;systools&lt;/code&gt; in the SASL application includes tools to build and check releases. The functions read the &lt;code&gt;rel&lt;/code&gt; and &lt;code&gt;.app&lt;/code&gt; files and perform syntax and dependency checks. The &lt;code&gt;systools:make_script/1,2&lt;/code&gt; function is used to generate a boot script (see System Principles):</source>
          <target state="translated">&lt;code&gt;systools&lt;/code&gt; SASL 애플리케이션의 systools 에는 릴리스를 빌드하고 확인하는 도구가 포함되어 있습니다. 이 함수는 &lt;code&gt;rel&lt;/code&gt; 및 &lt;code&gt;.app&lt;/code&gt; 파일을 읽고 구문 및 종속성 검사를 수행합니다. &lt;code&gt;systools:make_script/1,2&lt;/code&gt; 기능 (시스템 원리 참조) 부트 스크립트를 생성하는 데 사용됩니다 :</target>
        </trans-unit>
        <trans-unit id="dfba8c97e55470a41ba2f91206458c0f02c7a04e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;systools&lt;/code&gt; in the SASL application includes tools to build and check releases. The functions read the &lt;code&gt;rel&lt;/code&gt; and &lt;code&gt;.app&lt;/code&gt; files and performs syntax and dependency checks. The &lt;code&gt;systools:make_script/1,2&lt;/code&gt; function is used to generate a boot script (see System Principles):</source>
          <target state="translated">&lt;code&gt;systools&lt;/code&gt; SASL 응용 프로그램의 systools 에는 릴리스를 빌드하고 확인하는 도구가 포함되어 있습니다. 이 함수는 &lt;code&gt;rel&lt;/code&gt; 및 &lt;code&gt;.app&lt;/code&gt; 파일을 읽고 구문 및 종속성 검사를 수행합니다. &lt;code&gt;systools:make_script/1,2&lt;/code&gt; 기능 (시스템 원리 참조) 부트 스크립트를 생성하는 데 사용됩니다 :</target>
        </trans-unit>
        <trans-unit id="856d6facf4d5e4a68a3112504169034b280688e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt; - An untagged integer that will fit in 12 bits (0-4096). It can be packed with other operands in a word. Most often used as the number of live registers in instructions such as &lt;code&gt;test_heap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; -12 비트 (0-4096)에 맞는 태그없는 정수입니다. 한 단어에 다른 피연산자로 압축 할 수 있습니다. &lt;code&gt;test_heap&lt;/code&gt; 과 같은 명령어에서 라이브 레지스터의 수로 가장 자주 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="23147a1c9e546954a9e2262475563a1f7464f139" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;table/1&lt;/code&gt; and &lt;code&gt;table/2&lt;/code&gt; are provided as synonyms to resemble the &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;table/1&lt;/code&gt; 및 &lt;code&gt;table/2&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; 모듈 과 유사한 동의어로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="1dd27b918c10e80696b0e7f929f3871afe8e42d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tables&lt;/code&gt;. Returns a list of all locally known tables.</source>
          <target state="translated">&lt;code&gt;tables&lt;/code&gt; . 로컬로 알려진 모든 테이블의 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f13557d0891f440343c770a7f38974aa7b18d43a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tail&lt;/code&gt; is the existing list to which &lt;code&gt;head&lt;/code&gt; is concatenated.</source>
          <target state="translated">&lt;code&gt;tail&lt;/code&gt; 은 &lt;code&gt;head&lt;/code&gt; 가 연결된 기존 목록 입니다.</target>
        </trans-unit>
        <trans-unit id="a94c21835d4f0bd9bbda995e194228662b999155" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;takewhile(P, L)&lt;/code&gt; takes elements &lt;code&gt;X&lt;/code&gt; from a list &lt;code&gt;L&lt;/code&gt; as long as the predicate &lt;code&gt;P(X)&lt;/code&gt; is true:</source>
          <target state="translated">&lt;code&gt;takewhile(P, L)&lt;/code&gt; 은 술어 &lt;code&gt;P(X)&lt;/code&gt; 가 true 인 한 목록 &lt;code&gt;L&lt;/code&gt; 에서 요소 &lt;code&gt;X&lt;/code&gt; 를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="9a85923e1723850515635d311eca20ada2896679" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_addr.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#target_addr&quot;&gt;Target Address Definitions&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;target_addr.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#target_addr&quot;&gt;Target Address Definitions&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="7997915870dd0118bf387166df53805fa2ca2cc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_addr_entry/6&lt;/code&gt; translates to the following call: &lt;code&gt;target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_addr_entry/6&lt;/code&gt; 는 다음 호출로 변환됩니다. &lt;code&gt;target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="761e8d37fef36675838e1075ac7246df0b0f9388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_addr_entry/7&lt;/code&gt; translates to the following call: &lt;code&gt;target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask, 2048)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_addr_entry/7&lt;/code&gt; 은 &lt;code&gt;target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask, 2048)&lt;/code&gt; 호출로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="4e6e4c8cb706ad261a80f5a06b8717a40135dad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_addr_entry/8&lt;/code&gt; translates to the following call: &lt;code&gt;target_addr_entry(Name, Domain, Addr, 1500, 3, TagList, ParamsName, EngineId, TMask, MaxMessageSize)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_addr_entry/8&lt;/code&gt; 은 다음 호출로 변환됩니다. &lt;code&gt;target_addr_entry(Name, Domain, Addr, 1500, 3, TagList, ParamsName, EngineId, TMask, MaxMessageSize)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4c55935fc69d786c8e3110e7878f71876b4872eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_params.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#target_params&quot;&gt;Target Parameters Definitions&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;target_params.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#target_params&quot;&gt;Target Parameters Definitions&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="2e39f6deef95253e516a543858b9c16007f0381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_params_entry/2&lt;/code&gt; translates to the following call: &lt;code&gt;target_params_entry(Name, Vsn, &quot;initial&quot;, noAuthNoPriv)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_params_entry/2&lt;/code&gt; 는 다음 호출로 변환됩니다. &lt;code&gt;target_params_entry(Name, Vsn, &quot;initial&quot;, noAuthNoPriv)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="92f3d69a48c6de5392426a354488ccecb4f36151" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_params_entry/4&lt;/code&gt; translates to the following call: &lt;code&gt;target_params_entry(Name, MPModel, SecModel, SecName, SecLevel)&lt;/code&gt; where &lt;code&gt;MPModel&lt;/code&gt; and &lt;code&gt;SecModel&lt;/code&gt; is mapped from &lt;code&gt;Vsn&lt;/code&gt;, see above.</source>
          <target state="translated">&lt;code&gt;target_params_entry/4&lt;/code&gt; 는 다음 호출로 변환됩니다. &lt;code&gt;target_params_entry(Name, MPModel, SecModel, SecName, SecLevel)&lt;/code&gt; 여기서 &lt;code&gt;MPModel&lt;/code&gt; 및 &lt;code&gt;SecModel&lt;/code&gt; 은 &lt;code&gt;Vsn&lt;/code&gt; 에서 매핑됩니다 ( 위 참조).</target>
        </trans-unit>
        <trans-unit id="c65d3504ff6277748a0fcad3381c26b8114325d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template(E) -&amp;gt; built_in_rules(fun template/1, E)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;template(E) -&amp;gt; built_in_rules(fun template/1, E)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e29e765113c02fdf4d9903a9db73ab2e862a5dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;temporary node down&lt;/code&gt;. When a node temporarily goes down, it can be time to compensate some fragments with new replicas to keep the desired level of redundancy. When the node comes up again, it can be time to remove the superfluous replica.</source>
          <target state="translated">&lt;code&gt;temporary node down&lt;/code&gt; . 노드가 일시적으로 다운되면 원하는 중복 레벨을 유지하기 위해 새 복제본으로 일부 단편을 보상 할 때가 될 수 있습니다. 노드가 다시 나타나면 불필요한 복제본을 제거 할 때가되었습니다.</target>
        </trans-unit>
        <trans-unit id="7889715c1022d3782a9571f294f6bb3d540d2dd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;term&lt;/code&gt; is an Erlang term to be encoded.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; 은 인코딩 될 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="320d2cf3996f3516930b74a7da91a4cf64551e4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;term&lt;/code&gt; is an Erlang term. In order for this function to succeed, &lt;code&gt;term&lt;/code&gt; must either be an Erlang variable with the specified name, or it must be an Erlang list or tuple containing a variable with the specified name. Other Erlang types cannot contain variables.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; 는 얼랭 용어입니다. 이 함수가 성공하려면 &lt;code&gt;term&lt;/code&gt; 은 지정된 이름의 Erlang 변수이거나 지정된 이름의 변수를 포함하는 Erlang 목록 또는 튜플이어야합니다. 다른 Erlang 유형은 변수를 포함 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="71b560066787dccab3467776d120605cf8423724" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;term&lt;/code&gt; is an Erlang tuple or an Erlang binary object.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; 는 Erlang 튜플 또는 Erlang 이진 객체입니다.</target>
        </trans-unit>
        <trans-unit id="4a937529f98cda88d3558d1902ed4ee55409000e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;term&lt;/code&gt; is the Erlang term to print.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; 은 인쇄 할 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="a92cbdd1716c28f91a4671abcf529fbcc1c587f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;term_to_iovec()&lt;/code&gt; is a pure optimization of the functionality &lt;code&gt;term_to_binary()&lt;/code&gt; provide. &lt;code&gt;term_to_iovec()&lt;/code&gt; can for example refer directly to off heap binaries instead of copying the binary data into the result.</source>
          <target state="translated">&lt;code&gt;term_to_iovec()&lt;/code&gt; 기능성의 순수한 최적화입니다 &lt;code&gt;term_to_binary()&lt;/code&gt; 제공합니다. 예를 들어 &lt;code&gt;term_to_iovec()&lt;/code&gt; 는 바이너리 데이터를 결과에 복사하는 대신 오프 힙 바이너리를 직접 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d16ca4ce0d4f52adac2af1b6b617d6a2f52d428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test/1&lt;/code&gt; iterates over all types in &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;test/1&lt;/code&gt; 은 &lt;code&gt;Module&lt;/code&gt; 의 모든 유형을 반복 합니다.</target>
        </trans-unit>
        <trans-unit id="df87fd3cf67832c938bd2d08b138f9541ee87898" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test/2&lt;/code&gt; tests type &lt;code&gt;Type&lt;/code&gt; with a random value.</source>
          <target state="translated">&lt;code&gt;test/2&lt;/code&gt; 테스트 유형 임의의 값을 가진 &lt;code&gt;Type&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="80e0809ce9f9b9bd8a8f05ea230004a467758fbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test/3&lt;/code&gt; tests type &lt;code&gt;Type&lt;/code&gt; with &lt;code&gt;Value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;test/3&lt;/code&gt; 테스트 유형 &lt;code&gt;Type&lt;/code&gt; with &lt;code&gt;Value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="268007540d07f6072d6797eb2ac02f334f5e5063" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; - Recommended. All files regarding tests, such as test suites and test specifications, should be placed here.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; -권장합니다. 테스트 스위트 및 테스트 사양과 같은 테스트와 관련된 모든 파일을 여기에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="ca90e153269c39e9983c8fc84e6edce4aeb819f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt;&lt;code&gt;underscore&lt;/code&gt;&lt;code&gt;variable&lt;/code&gt;&lt;code&gt;warning_marker&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt;&lt;code&gt;underscore&lt;/code&gt;&lt;code&gt;variable&lt;/code&gt;&lt;code&gt;warning_marker&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db691fba104ec38a95d2e5a9028aa4d95a1c4994" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tftp&lt;/code&gt; uses a callback module to handle the file transfer. Two such callback modules are provided, &lt;code&gt;tftp_binary&lt;/code&gt; and &lt;code&gt;tftp_file&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;tftp#read_file-3&quot;&gt;read_file/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;tftp#write_file-3&quot;&gt;write_file/3&lt;/a&gt;&lt;/code&gt; for details. You can also implement your own callback modules, see &lt;code&gt;&lt;a href=&quot;tftp#tftp_callback&quot;&gt;CALLBACK FUNCTIONS&lt;/a&gt;&lt;/code&gt;. A callback module provided by the user is registered using option &lt;code&gt;callback&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;tftp#options&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tftp&lt;/code&gt; 는 콜백 모듈을 사용하여 파일 전송을 처리합니다. 이러한 두 개의 콜백 모듈 인 &lt;code&gt;tftp_binary&lt;/code&gt; 및 &lt;code&gt;tftp_file&lt;/code&gt; 이 제공됩니다 . 자세한 내용은 &lt;code&gt;&lt;a href=&quot;tftp#read_file-3&quot;&gt;read_file/3&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;tftp#write_file-3&quot;&gt;write_file/3&lt;/a&gt;&lt;/code&gt; 을 참조하십시오. 자체 콜백 모듈을 구현할 수도 있습니다 ( &lt;code&gt;&lt;a href=&quot;tftp#tftp_callback&quot;&gt;CALLBACK FUNCTIONS&lt;/a&gt;&lt;/code&gt; 참조) . 사용자가 제공 한 콜백 모듈은 &lt;code&gt;callback&lt;/code&gt; 옵션을 사용하여 등록됩니다 ( &lt;code&gt;&lt;a href=&quot;tftp#options&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt; 참조). .</target>
        </trans-unit>
        <trans-unit id="0ef5a1c92460a420f7d128dac4725183327d3897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this_node_name&lt;/code&gt; is the name of the C-node (the name before '@' in the full node name).</source>
          <target state="translated">&lt;code&gt;this_node_name&lt;/code&gt; 은 C 노드의 이름입니다 (전체 노드 이름에서 '@'앞의 이름).</target>
        </trans-unit>
        <trans-unit id="90c15ece6af02153a9c0355447c31051ed435bd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this_node_name&lt;/code&gt; is the registered name of the process (the name before '@').</source>
          <target state="translated">&lt;code&gt;this_node_name&lt;/code&gt; 은 프로세스의 등록 된 이름 ( '@'앞의 이름)입니다.</target>
        </trans-unit>
        <trans-unit id="64b49bb1b6f20c04a2f6a916f4143ca9308000c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisalivename&lt;/code&gt; is the name of the local C-node (the name before '@' in the full node name). Can be &lt;code&gt;NULL&lt;/code&gt; (from OTP 23) to get a dynamically assigned name from the peer node.</source>
          <target state="translated">&lt;code&gt;thisalivename&lt;/code&gt; 은 로컬 C 노드의 이름입니다 (전체 노드 이름에서 '@'앞의 이름). 피어 노드에서 동적으로 할당 된 이름을 가져 오려면 &lt;code&gt;NULL&lt;/code&gt; (OTP 23에서) 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f7f87e5cd5088792da9029cd76fb7272efebad16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisalivename&lt;/code&gt; is the registered name of the process.</source>
          <target state="translated">&lt;code&gt;thisalivename&lt;/code&gt; 은 프로세스의 등록 된 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3649f198af3e1ea2c017f74b5a68bdabfce69e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thishostname&lt;/code&gt; is the name of the machine we are running on. If long names are to be used, they are to be fully qualified (that is, &lt;code&gt;durin.erix.ericsson.se&lt;/code&gt; instead of &lt;code&gt;durin&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;thishostname&lt;/code&gt; 은 우리가 실행하고있는 머신의 이름입니다. 긴 이름을 사용하려면 정규화되어야합니다 (즉, &lt;code&gt;durin&lt;/code&gt; 대신 &lt;code&gt;durin.erix.ericsson.se&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9d5840f868f900e306b584acc81cf8b8ef3ba6dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisnodename&lt;/code&gt; is the full name of the local C-node, that is, &lt;code&gt;mynode@myhost&lt;/code&gt;. Can be &lt;code&gt;NULL&lt;/code&gt; if &lt;code&gt;thisalivename&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;thisnodename&lt;/code&gt; 은 로컬 C 노드의 전체 이름, 즉 &lt;code&gt;mynode@myhost&lt;/code&gt; 입니다. 될 수 &lt;code&gt;NULL&lt;/code&gt; 경우 &lt;code&gt;thisalivename&lt;/code&gt; 가 있다 &lt;code&gt;NULL&lt;/code&gt; 이 .</target>
        </trans-unit>
        <trans-unit id="432d24d28cb42ea5622738153172fc0b74357d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisnodename&lt;/code&gt; is the full name of the node, that is, &lt;code&gt;einode@durin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;thisnodename&lt;/code&gt; 은 노드의 전체 이름입니다 (즉, &lt;code&gt;einode@durin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbf9ac7f77cb74e53efc1812f73ebbdaba2d373d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thispaddr&lt;/code&gt; if the IP address of the host.</source>
          <target state="translated">&lt;code&gt;thispaddr&lt;/code&gt; 호스트의 IP 주소 인 경우 thispaddr .</target>
        </trans-unit>
        <trans-unit id="e0fb80847311db2ce29decc6603fb4168e8e957b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thread&lt;/code&gt; can only be a sublevel to &lt;code&gt;core&lt;/code&gt;. &lt;code&gt;core&lt;/code&gt; can be a sublevel to &lt;code&gt;processor&lt;/code&gt; or &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;processor&lt;/code&gt; can be on the top level or a sublevel to &lt;code&gt;node&lt;/code&gt;. &lt;code&gt;node&lt;/code&gt; can be on the top level or a sublevel to &lt;code&gt;processor&lt;/code&gt;. That is, NUMA nodes can be processor internal or processor external. A CPU topology can consist of a mix of processor internal and external NUMA nodes, as long as each logical CPU belongs to &lt;strong&gt;one&lt;/strong&gt; NUMA node. Cache hierarchy is not part of the &lt;code&gt;CpuTopology&lt;/code&gt; type, but will be in a future release. Other things can also make it into the CPU topology in a future release. So, expect the &lt;code&gt;CpuTopology&lt;/code&gt; type to change.</source>
          <target state="translated">&lt;code&gt;thread&lt;/code&gt; 는 &lt;code&gt;core&lt;/code&gt; 의 하위 레벨 만 될 수 있습니다 . &lt;code&gt;core&lt;/code&gt; 는 &lt;code&gt;processor&lt;/code&gt; 나 &lt;code&gt;node&lt;/code&gt; 의 하위 수준 일 수 있습니다 . &lt;code&gt;processor&lt;/code&gt; 는 최상위 레벨 또는 하위 레벨 대 &lt;code&gt;node&lt;/code&gt; 에있을 수 있습니다 . &lt;code&gt;node&lt;/code&gt; 는 최상위 레벨 또는 &lt;code&gt;processor&lt;/code&gt; 의 하위 레벨에있을 수 있습니다 . 즉, NUMA 노드는 프로세서 내부 또는 프로세서 외부 일 수 있습니다. CPU 토폴로지는 각 논리 CPU가 &lt;strong&gt;한&lt;/strong&gt; NUMA 노드에 . 캐시 계층은 &lt;code&gt;CpuTopology&lt;/code&gt; 의 일부가 아닙니다 유형에 속 하지만 이후 릴리스에있을 경우 프로세서 내부 및 외부 NUMA 노드의 혼합으로 구성 될 수 있습니다. 다음 릴리스에서는 다른 것도 CPU 토폴로지로 만들 수 있습니다. 따라서 &lt;code&gt;CpuTopology&lt;/code&gt; 유형이 변경 될 것으로 예상합니다 .</target>
        </trans-unit>
        <trans-unit id="24541f485e60b62a748249786f7d12597baf266c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thread_no_node_processor_spread&lt;/code&gt; - A combination of &lt;code&gt;thread_spread&lt;/code&gt;, and &lt;code&gt;no_node_processor_spread&lt;/code&gt;. Schedulers are spread over hardware threads across NUMA nodes, but schedulers are only spread over processors internally in one NUMA node at a time.</source>
          <target state="translated">&lt;code&gt;thread_no_node_processor_spread&lt;/code&gt; - &lt;code&gt;thread_spread&lt;/code&gt; 및 &lt;code&gt;no_node_processor_spread&lt;/code&gt; 의 조합입니다 . 스케줄러는 NUMA 노드에 걸쳐 하드웨어 스레드에 분산되지만 스케줄러는 한 번에 하나의 NUMA 노드에있는 프로세서에만 분산됩니다.</target>
        </trans-unit>
        <trans-unit id="2a7d532f9d46f688ecc7d28920d4f7b069058c53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thread_spread&lt;/code&gt; - Thread refers to hardware threads (such as Intel's hyper-threads). Schedulers with low scheduler identifiers, are bound to the first hardware thread of each core, then schedulers with higher scheduler identifiers are bound to the second hardware thread of each core,and so on.</source>
          <target state="translated">&lt;code&gt;thread_spread&lt;/code&gt; - 스레드는 하드웨어 스레드 (예 : 인텔의 하이퍼 스레드)를 나타냅니다. 스케줄러 ID가 낮은 스케줄러는 각 코어의 첫 번째 하드웨어 스레드에 바인드되고 스케줄러 ID가 더 높은 스케줄러는 각 코어의 두 번째 하드웨어 스레드에 바인드됩니다.</target>
        </trans-unit>
        <trans-unit id="75540c4a1a0e614181fe976a238947bf8ef0e5a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tid&lt;/code&gt; is a thread identifier.</source>
          <target state="translated">&lt;code&gt;tid&lt;/code&gt; 는 스레드 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="86a072bab3b54671f3a72c29d207b8c67c3ed25b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tid&lt;/code&gt; is the thread identifier of the thread to join. &lt;code&gt;exit_value&lt;/code&gt; is a pointer to a pointer to an exit value, or &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tid&lt;/code&gt; 는 결합 할 스레드의 스레드 식별자입니다. &lt;code&gt;exit_value&lt;/code&gt; 는 종료 값에 대한 포인터를 가리키는 포인터이거나 &lt;code&gt;NULL&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0cda8edb579f661ac84f8976b1d3b894aa95509a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_unit&lt;/code&gt; is the time unit of the returned value.</source>
          <target state="translated">&lt;code&gt;time_unit&lt;/code&gt; 은 반환 된 값의 시간 단위입니다.</target>
        </trans-unit>
        <trans-unit id="da341cd15aab0c23c823c6ed99cd3969e5dae6aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_unit&lt;/code&gt; is time unit of returned value.</source>
          <target state="translated">&lt;code&gt;time_unit&lt;/code&gt; 은 반환 된 값의 시간 단위입니다.</target>
        </trans-unit>
        <trans-unit id="42330a1483a712d0f47d8231a0e69cfc00669f19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; - the reply failed to arrive before the request timer expired.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; - 요청 타이머가 만료되기 전에 응답이 도착하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="b1fcaf9b3f13a9751ed481b6dcbf6041cc7f21e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; is the maximum time (in milliseconds) to wait for results. Specify &lt;code&gt;ERL_NO_TIMEOUT&lt;/code&gt; to wait forever. &lt;code&gt;ei_rpc()&lt;/code&gt; waits infinitely for the answer, that is, the call will never time out.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 은 결과를 기다리는 최대 시간 (밀리 초)입니다. 영원히 대기하려면 &lt;code&gt;ERL_NO_TIMEOUT&lt;/code&gt; 을 지정 하십시오 . &lt;code&gt;ei_rpc()&lt;/code&gt; 는 응답을 무한정 기다립니다. 즉, 호출 시간이 초과되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7cb3c152383d2fcb4e26042165fb3664492ba3ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; is the maximum time (in milliseconds) to wait for results. To wait forever, specify &lt;code&gt;ERL_NO_TIMEOUT&lt;/code&gt;. When &lt;code&gt;erl_rpc()&lt;/code&gt; calls &lt;code&gt;erl_rpc_from()&lt;/code&gt;, the call will never timeout.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; 은 결과를 기다리는 최대 시간 (밀리 초)입니다. 영원히 대기하려면 &lt;code&gt;ERL_NO_TIMEOUT&lt;/code&gt; 을 지정 하십시오 . 때 &lt;code&gt;erl_rpc()&lt;/code&gt; 호출 &lt;code&gt;erl_rpc_from()&lt;/code&gt; 호출이 타임 아웃 않습니다.</target>
        </trans-unit>
        <trans-unit id="9045e2ea725941e1fa92dc5204c53370db518515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timer:tc/3&lt;/code&gt; measures wall-clock time. The advantage with wall-clock time is that I/O, swapping, and other activities in the operating system kernel are included in the measurements. The disadvantage is that the measurements vary a lot. Usually it is best to run the benchmark several times and note the shortest time, which is to be the minimum time that is possible to achieve under the best of circumstances.</source>
          <target state="translated">&lt;code&gt;timer:tc/3&lt;/code&gt; 는 벽시계 시간을 측정합니다. 벽시계 시간의 이점은 운영 체제 커널의 I / O, 스와핑 및 기타 활동이 측정에 포함된다는 것입니다. 단점은 측정이 많이 다르다는 것입니다. 일반적으로 벤치 마크를 여러 번 실행하고 가장 짧은 시간을 기록하는 것이 가장 좋습니다.이 시간은 최상의 환경에서 달성 할 수있는 최소 시간입니다.</target>
        </trans-unit>
        <trans-unit id="74af5378815bface9865562d1f6d6f60af1412ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to : string&lt;/code&gt; :: Process ID or Port ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;to : string&lt;/code&gt; :: 프로세스 ID 또는 포트 ID. 전의. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bb3bd077d0ab1872873db7a7cc66cf1860106c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to : string&lt;/code&gt; :: Process ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;to : string&lt;/code&gt; :: 프로세스 ID. 전의. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14c23cdd2f94f85a337afca31688e7593a5974a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to&lt;/code&gt; is a string containing the registered name of the intended recipient of the message.</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; 는 메시지 수신자의 등록 된 이름을 포함하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4e706f37e7305d40f9c8a6f8409f5751f42ebdab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to&lt;/code&gt; is an Erlang term containing the pid of the intended recipient of the message.</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; 는 의도 된 메시지 수신자의 pid를 포함하는 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="a647205e833ea46ec9656a3dc4b119093d9c63ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to&lt;/code&gt; is the pid of the intended recipient of the message.</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; 는 메시지 수신자의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="49e6131c83b765eb6ee13c4222538475ad7821d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tokens(Continuation, CharSpec, StartLocation)&lt;/code&gt; is equivalent to &lt;code&gt;tokens(Continuation, CharSpec, StartLocation, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tokens(Continuation, CharSpec, StartLocation)&lt;/code&gt; 은 &lt;code&gt;tokens(Continuation, CharSpec, StartLocation, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1526bde11cc439a1544fd43c47b7f90a379e4341" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tpkt&lt;/code&gt; - TPKT format [RFC1006]</source>
          <target state="translated">&lt;code&gt;tpkt&lt;/code&gt; -TPKT 형식 [RFC1006]</target>
        </trans-unit>
        <trans-unit id="8cfe83b121501308f139a5811816156fc1418da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace_status&lt;/code&gt; is a special type of &lt;code&gt;TraceTag&lt;/code&gt;, which is used to check if the tracer is still to be active. It is called in multiple scenarios, but most significantly it is used when tracing is started using this tracer. If &lt;code&gt;remove&lt;/code&gt; is returned when the &lt;code&gt;trace_status&lt;/code&gt; is checked, the tracer is removed from the tracee.</source>
          <target state="translated">&lt;code&gt;trace_status&lt;/code&gt; 는 특별한 유형의 &lt;code&gt;TraceTag&lt;/code&gt; 이며 추적 프로그램이 여전히 활성화되어 있는지 확인하는 데 사용됩니다. 여러 시나리오에서 호출되지만이 추적 프로그램을 사용하여 추적을 시작할 때 가장 많이 사용됩니다. 경우 &lt;code&gt;remove&lt;/code&gt; 때 반환되는 &lt;code&gt;trace_status&lt;/code&gt; 가 선택되어, 추적자는 tracee에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="2d4d7aadc0aceeb4f0c873290fa582d8a6ce1b67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transaction_commits&lt;/code&gt;. Returns a number that indicates how many transactions have terminated successfully since Mnesia was started.</source>
          <target state="translated">&lt;code&gt;transaction_commits&lt;/code&gt; . Mnesia가 시작된 이후 성공적으로 종료 된 트랜잭션 수를 나타내는 숫자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b33ef20fb3b861edd2647508b04b70a7215c308a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transaction_failures&lt;/code&gt;. Returns a number that indicates how many transactions have failed since Mnesia was started.</source>
          <target state="translated">&lt;code&gt;transaction_failures&lt;/code&gt; . Mnesia가 시작된 이후 실패한 트랜잭션 수를 나타내는 숫자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3b8578c8fac965dcde57dfd306ea5b0e8f18a44b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transaction_log_writes&lt;/code&gt;. Returns a number that indicates how many write operations that have been performed to the transaction log since startup.</source>
          <target state="translated">&lt;code&gt;transaction_log_writes&lt;/code&gt; . 시작 이후 트랜잭션 로그에 수행 된 쓰기 조작 수를 나타내는 숫자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="630b608fb07ad349a01288188a4e462d8b37ff83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transaction_restarts&lt;/code&gt;. Returns a number that indicates how many transactions have been restarted since Mnesia was started.</source>
          <target state="translated">&lt;code&gt;transaction_restarts&lt;/code&gt; . Mnesia가 시작된 이후 재시작 된 트랜잭션 수를 나타내는 숫자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3cff235f7cdbcade752ed6a1bc95a08f73663644" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transactions&lt;/code&gt;. Returns a list of all currently active local transactions.</source>
          <target state="translated">&lt;code&gt;transactions&lt;/code&gt; . 현재 활성화 된 모든 로컬 트랜잭션의 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ba50d7c6a778eb3b6a00e1942ce619907e536d65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transports&lt;/code&gt; - which defines the transport domains and their addresses for the manager. &lt;strong&gt;Mandatory&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;transports&lt;/code&gt; -관리자의 전송 도메인 및 해당 주소를 정의합니다. &lt;strong&gt;필수&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3dd8eb456f4c52d24b17e85ce6db521e59e2245c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; - &lt;code&gt;SnmpTrapInfo&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#handle_trap&quot;&gt;handle_trap&lt;/a&gt;&lt;/code&gt; for more info).</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; - &lt;code&gt;SnmpTrapInfo&lt;/code&gt; ( 자세한 정보는 &lt;code&gt;&lt;a href=&quot;#handle_trap&quot;&gt;handle_trap&lt;/a&gt;&lt;/code&gt; 을 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="446f1718810d5809e1f7ead841e52b06bb6f50e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;traverse&lt;/code&gt; specifies which function &lt;code&gt;Mnesia&lt;/code&gt; is to use to traverse the table. Default &lt;code&gt;select&lt;/code&gt; is used, but by using &lt;code&gt;{traverse, {select, MatchSpecification}}&lt;/code&gt; as an option to &lt;code&gt;&lt;a href=&quot;mnesia#table-1&quot;&gt;mnesia:table/2&lt;/a&gt;&lt;/code&gt; the user can specify its own view of the table.</source>
          <target state="translated">&lt;code&gt;traverse&lt;/code&gt; 는 &lt;code&gt;Mnesia&lt;/code&gt; 가 테이블을 순회하는 데 사용할 함수를 지정 합니다. 기본 &lt;code&gt;select&lt;/code&gt; 이 사용되지만 &lt;code&gt;&lt;a href=&quot;mnesia#table-1&quot;&gt;mnesia:table/2&lt;/a&gt;&lt;/code&gt; 에 대한 옵션으로 &lt;code&gt;{traverse, {select, MatchSpecification}}&lt;/code&gt; 을 사용하면 사용자가 테이블의 고유 한보기를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d4ee48dd8e8173edf36c232e2c5be6b9e245fed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true | false&lt;/code&gt;. If set to &lt;code&gt;true&lt;/code&gt;, the connection to the client is a persistent connection and is not closed when the request is served.</source>
          <target state="translated">&lt;code&gt;true | false&lt;/code&gt; . &lt;code&gt;true&lt;/code&gt; 로 설정된 경우 클라이언트에 대한 연결은 지속적 연결이며 요청이 제공 될 때 닫히지 않습니다.</target>
        </trans-unit>
        <trans-unit id="266f94acd800ab98dff47ae268bf41f76026f4c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; - One worker dedicated to 'set-requests' and one (main) worker for all other requests ('get-request' and notifications).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; - 'set-requests'전용 작업자 한 명과 다른 모든 요청 ( 'get-request'및 알림)에 대한 한 명의 작업자 (기본).</target>
        </trans-unit>
        <trans-unit id="68dc96fabb05a1ec872239b9f02a798478ea221e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; for the first instance on the hardware; &lt;code&gt;false&lt;/code&gt; for the other instances</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 하드웨어의 첫 번째 인스턴스에 대해서는 true 입니다. 다른 경우에는 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcd42de6128469ebeebe4d2e0a442e58df2a9153" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if a trace message is to be emitted</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 추적 메시지가 생성되면 true</target>
        </trans-unit>
        <trans-unit id="18353e8e2daaa13a6662f880ec1a6fc78bf06729" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the table was a named table when dumped to file, otherwise &lt;code&gt;false&lt;/code&gt;. Notice that when a named table is loaded from a file, there cannot exist a table in the system with the same name.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; , 그렇지 않으면 파일로 덤프 할 때 테이블이 명명 된 테이블 인 경우 &lt;code&gt;false&lt;/code&gt; . 명명 된 테이블이 파일에서로드 될 때 시스템에 동일한 이름을 가진 테이블이 존재할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0d46dfb8b7176946e3f27d76b5504add1699406b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the user and password is valid</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 사용자와 비밀번호가 유효하면 true</target>
        </trans-unit>
        <trans-unit id="92d28165d23be12cc717a42800844c089578854a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;truncate/1,2&lt;/code&gt; are used for internally formatted logs, and &lt;code&gt;btruncate/2&lt;/code&gt; for externally formatted logs.</source>
          <target state="translated">&lt;code&gt;truncate/1,2&lt;/code&gt; 는 내부 형식의 로그에 사용되고 &lt;code&gt;btruncate/2&lt;/code&gt; 는 외부 형식의 로그에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6a41d2be1281c8bd4e1513eda91300d754600b5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;truncate/1&lt;/code&gt; is used for both internally and externally formatted logs.</source>
          <target state="translated">&lt;code&gt;truncate/1&lt;/code&gt; 은 내부 및 외부 형식의 로그 모두에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1c9eb704a0b90a81182c0cd97d4e79a11f4d27bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;truncate/2&lt;/code&gt; is used for internally formatted logs, and &lt;code&gt;btruncate/2&lt;/code&gt; for externally formatted logs.</source>
          <target state="translated">&lt;code&gt;truncate/2&lt;/code&gt; 는 내부 형식 로그에 사용되며 &lt;code&gt;btruncate/2&lt;/code&gt; 는 외부 형식 로그에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="65e2f1b064d5d8a041a038dab805f66418240fa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;truncated_binary_file&lt;/code&gt;. Truncated binary in file.</source>
          <target state="translated">&lt;code&gt;truncated_binary_file&lt;/code&gt; . 파일에서 잘린 바이너리.</target>
        </trans-unit>
        <trans-unit id="a2800d67bb959087ca950bfd92b799a449159b00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ttb:write_trace_info(mykey,1)&lt;/code&gt; gives the entry &lt;code&gt;{mykey,[1]}&lt;/code&gt; in &lt;code&gt;TI&lt;/code&gt;. Another call, &lt;code&gt;ttb:write_trace_info(mykey,2)&lt;/code&gt;, changes this entry to &lt;code&gt;{mykey,[1,2]}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ttb:write_trace_info(mykey,1)&lt;/code&gt; 은 &lt;code&gt;TI&lt;/code&gt; 에서 &lt;code&gt;{mykey,[1]}&lt;/code&gt; 항목을 제공합니다 . 다른 호출 &lt;code&gt;ttb:write_trace_info(mykey,2)&lt;/code&gt; 는이 항목을 &lt;code&gt;{mykey,[1,2]}&lt;/code&gt; 로 변경 합니다.</target>
        </trans-unit>
        <trans-unit id="fbe86a3e39af79c31af9c34bbdc911f8979ef613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ttb&lt;/code&gt; tries to fetch all logs from a reconnecting node before reinitializing the trace. This must finish within &lt;code&gt;FetchTimeout&lt;/code&gt; milliseconds or is aborted.</source>
          <target state="translated">&lt;code&gt;ttb&lt;/code&gt; 는 추적을 다시 초기화하기 전에 재 연결 노드에서 모든 로그를 가져 오려고 시도합니다. &lt;code&gt;FetchTimeout&lt;/code&gt; 밀리 초 내에 완료 되거나 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="07485964c7083135b80f0251c1e7c8f4eed4cc23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tty&lt;/code&gt; is a simple command-line interface program where keystrokes are collected and interpreted. Completed lines are sent to the shell for interpretation. A simple history mechanism saves previous lines, which can be edited before sending them to the shell. &lt;code&gt;tty&lt;/code&gt; is started when Erlang is started with the following command:</source>
          <target state="translated">&lt;code&gt;tty&lt;/code&gt; 는 키 입력을 수집하고 해석하는 간단한 명령 줄 인터페이스 프로그램입니다. 완성 된 라인은 해석을 위해 쉘로 전송됩니다. 간단한 히스토리 메커니즘을 사용하면 이전 행을 저장하여 쉘로 보내기 전에 편집 할 수 있습니다. 다음 명령으로 Erlang을 시작하면 &lt;code&gt;tty&lt;/code&gt; 가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="dc0fd749433c43d16eea6a7af06feb6b514bf62c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tty&lt;/code&gt; operates in one of two modes:</source>
          <target state="translated">&lt;code&gt;tty&lt;/code&gt; 는 다음 두 가지 모드 중 하나로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4ebbadf712e89a804230b6027f7071e95aa1a651" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tuple&lt;/code&gt; is an Erlang term containing at least &lt;code&gt;position&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;tuple&lt;/code&gt; 은 적어도 &lt;code&gt;position&lt;/code&gt; 요소를 포함하는 얼랭 용어 입니다.</target>
        </trans-unit>
        <trans-unit id="8ac60446a44e23f2aded6a0ede9778504bc5ab3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type : string&lt;/code&gt; :: &lt;code&gt;&quot;in&quot; | &quot;out&quot; | &quot;in_exiting&quot; | &quot;out_exiting&quot; | &quot;out_exited&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;type : string&lt;/code&gt; :: &lt;code&gt;&quot;in&quot; | &quot;out&quot; | &quot;in_exiting&quot; | &quot;out_exiting&quot; | &quot;out_exited&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c24477fe9a2d11b7159a80dc5da800a125a462b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type : string&lt;/code&gt; :: &lt;code&gt;&quot;link&quot; | &quot;unlink&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;type : string&lt;/code&gt; :: &lt;code&gt;&quot;link&quot; | &quot;unlink&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="585f31dcada28f11d22dfcf574600e99be503b20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type : string&lt;/code&gt; :: &lt;code&gt;&quot;register&quot; | &quot;unregister&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;type : string&lt;/code&gt; :: &lt;code&gt;&quot;register&quot; | &quot;unregister&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dbd1fa42caee07cfdde1d1c49e940873f3ce79f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type : string&lt;/code&gt; :: Carrier type. Ex. &lt;code&gt;&quot;ets_alloc&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;type : string&lt;/code&gt; :: 캐리어 유형. 전의. &lt;code&gt;&quot;ets_alloc&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c2394e962673b95d9475b1dae44e101144cec8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; identifies the type of message, one of the following:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 은 다음 중 하나의 메시지 유형을 식별합니다.</target>
        </trans-unit>
        <trans-unit id="a9fee4dc8a11ab4ba4394477e638a046f78f7a68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; specifies if the child process is a supervisor or a worker.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 은 하위 프로세스가 감독자인지 작업자인지를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="22dd522a38e2274ef6b8f27311bc2adfb1336d24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;. Each table can have &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;ordered_set&lt;/code&gt;, or &lt;code&gt;bag&lt;/code&gt; semantics. Notice that currently &lt;code&gt;ordered_set&lt;/code&gt; is not supported for &lt;code&gt;disc_only_copies&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; . 각 테이블은 가질 수 &lt;code&gt;set&lt;/code&gt; , &lt;code&gt;ordered_set&lt;/code&gt; 또는 &lt;code&gt;bag&lt;/code&gt; 시맨틱을 . 현재 &lt;code&gt;ordered_set&lt;/code&gt; 은 &lt;code&gt;disc_only_copies&lt;/code&gt; 에 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d660f599077edf38f61598abfd3239c3295f9d5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;. Returns the table type, which is &lt;code&gt;bag&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, or &lt;code&gt;ordered_set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; . &lt;code&gt;bag&lt;/code&gt; , &lt;code&gt;set&lt;/code&gt; 또는 &lt;code&gt;ordered_set&lt;/code&gt; 인 테이블 유형을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="7ebc80dc48512a3e02eaab7ec3b3650ed4c64e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; - An untagged integer that fits in a machine word.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; - 기계어에 맞는 태그없는 정수.</target>
        </trans-unit>
        <trans-unit id="08cf0250b4fcdd0b41c8a8196a1d4fd61bf3eb43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; - Construct an untagged integer. The default value is 0.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; - 태그없는 정수를 생성합니다. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="fe8621aa1cd927f87ae8fe07e4280a0bdad14ba0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; - Untagged integer that fits in a machine word. It is used for many different purposes, such as the number of live registers in &lt;code&gt;test_heap/2&lt;/code&gt;, as a reference to the export for &lt;code&gt;call_ext/2&lt;/code&gt;, and as the flags operand for binary syntax instructions. When the generic instruction is translated to a specific instruction, the type for the operand in the specific operation will tell the loader how to treat the operand.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; - 기계어에 맞는 태그없는 정수입니다. 그것은 그러한 라이브 레지스터 수와 같은 다양한 목적을 위해 사용된다 &lt;code&gt;test_heap/2&lt;/code&gt; 대 보에 참조로서 &lt;code&gt;call_ext/2&lt;/code&gt; , 및 플래그와 같은 이진 피연산자 구문 지침. 일반 명령어가 특정 명령어로 변환되면 특정 연산의 피연산자 유형이 로더에 피연산자를 처리하는 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="4e39642073d12eb94cdb99478d27b4a78a18bb1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unblock&lt;/code&gt; - Unblock the transport. &lt;strong&gt;Optional&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;unblock&lt;/code&gt; -전송을 차단 해제합니다. &lt;strong&gt;선택 과목&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="423ee82a325c45d708f6b53cf08cd2d53eb25179" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unblock_user/2&lt;/code&gt;, &lt;code&gt;unblock_user/3&lt;/code&gt;, and &lt;code&gt;unblock_user/4&lt;/code&gt; each removes the user &lt;code&gt;User&lt;/code&gt; from the list of blocked users for &lt;code&gt;Port&lt;/code&gt; (and &lt;code&gt;Dir&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;unblock_user/2&lt;/code&gt; , &lt;code&gt;unblock_user/3&lt;/code&gt; 및 &lt;code&gt;unblock_user/4&lt;/code&gt; 는 각각 사용자를 제거합니다 &lt;code&gt;User&lt;/code&gt; &lt;code&gt;Port&lt;/code&gt; (및 &lt;code&gt;Dir&lt;/code&gt; )에 대해 차단 된 사용자 목록에서 User 를 .</target>
        </trans-unit>
        <trans-unit id="cb221b0bddf75be5af7a142e437af28721cb6a0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unbound&lt;/code&gt; - Schedulers are not bound to logical processors, that is, the operating system decides where the scheduler threads execute, and when to migrate them. This is the default.</source>
          <target state="translated">&lt;code&gt;unbound&lt;/code&gt; -스케줄러는 논리 프로세서에 바인드되지 않습니다. 즉, 운영 체제는 스케줄러 스레드가 실행되는 위치와 마이그레이션시기를 결정합니다. 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="68855104bc975265734d17adc4b9717a8921c013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt;, the second element is a sorted list of calls to undefined functions;</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; , 두 번째 요소는 정의되지 않은 함수에 대한 호출의 정렬 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="63e0a1a24e1e12c495e661fe3a4d1ed5aad283f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt;, the second element is a sorted list of undefined functions.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; , 두 번째 요소는 정의되지 않은 함수의 정렬 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="67836bf0fad080fbc4c92ed4d6e98f6e94d13637" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undoFailed | genErr&lt;/code&gt;(SNMPv2)</source>
          <target state="translated">&lt;code&gt;undoFailed | genErr&lt;/code&gt; (SNMPv2)</target>
        </trans-unit>
        <trans-unit id="0a528517e33de5358c07ca06e3eeaae09a73f9a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unload&lt;/code&gt; is called when the module code that the NIF library belongs to is purged as old. New code of the same module may or may not exist.</source>
          <target state="translated">&lt;code&gt;unload&lt;/code&gt; NIF 라이브러리가 속한 모듈 코드가 오래된 것으로 제거되면 unload 가 호출됩니다. 동일한 모듈의 새 코드가 존재하거나 존재하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6bdf36f78b9fdab5ef03090b3d26c7df338dd95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unset_env/2&lt;/code&gt; uses the standard &lt;code&gt;gen_server&lt;/code&gt; time-out value (5000 ms). Option &lt;code&gt;timeout&lt;/code&gt; can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</source>
          <target state="translated">&lt;code&gt;unset_env/2&lt;/code&gt; 는 표준 &lt;code&gt;gen_server&lt;/code&gt; 시간 제한 값 (5000ms)을 사용합니다. 예를 들어 응용 프로그램 제어기가 과도하게로드되는 상황에서 다른 시간 &lt;code&gt;timeout&lt;/code&gt; 값이 유용한 경우 옵션 시간 종료를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d80596c220fdf814c2817b3df936059e9e5a099" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unset_env/3&lt;/code&gt; also allows the persistent option to be passed (see &lt;code&gt;&lt;a href=&quot;#set_env-4&quot;&gt;set_env/4&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;unset_env/3&lt;/code&gt; 는 영구 옵션을 전달할 수도 있습니다 ( &lt;code&gt;&lt;a href=&quot;#set_env-4&quot;&gt;set_env/4&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="54e1b9dc998c783a6780fb73f8b3e07324c6fe3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unused&lt;/code&gt;, the second element is a sorted list of unused local functions.</source>
          <target state="translated">&lt;code&gt;unused&lt;/code&gt; , 두 번째 요소는 사용되지 않은 로컬 함수의 정렬 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="f36d1e2dc14b39425abbb472208bfa0155ae6ba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzip/1&lt;/code&gt; extracts all files from a zip archive.</source>
          <target state="translated">&lt;code&gt;unzip/1&lt;/code&gt; 은 zip 아카이브에서 모든 파일을 추출합니다.</target>
        </trans-unit>
        <trans-unit id="cc113f5d9884c328d9e7c3406dd9639241a1f488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzip/2&lt;/code&gt; provides options to extract some files, and more.</source>
          <target state="translated">&lt;code&gt;unzip/2&lt;/code&gt; 는 일부 파일 등을 추출하는 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0ab2ae7e637a1878f50560a2fa78fba87debfc0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update&lt;/code&gt; with argument &lt;code&gt;supervisor&lt;/code&gt; is used when changing the start specification of a supervisor.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 인수 &lt;code&gt;supervisor&lt;/code&gt; 로 업데이트 는 supervisor 의 시작 스펙을 변경할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0dcf3ccda976ca935ff42a0bd5537ac0500bd082" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update&lt;/code&gt; with argument &lt;code&gt;supervisor&lt;/code&gt; is used when changing the start specification of a supervisor. See &lt;code&gt;&lt;a href=&quot;appup_cookbook#sup&quot;&gt;Appup Cookbook&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 인수 &lt;code&gt;supervisor&lt;/code&gt; 로 업데이트 는 supervisor 의 시작 스펙을 변경할 때 사용됩니다. &lt;code&gt;&lt;a href=&quot;appup_cookbook#sup&quot;&gt;Appup Cookbook&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c670138846275c9f49bf8cf1cd5a56046082505" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update&lt;/code&gt; with argument &lt;code&gt;{advanced,Extra}&lt;/code&gt; is used when changing the internal state of a behaviour as described above. It causes behaviour processes to call the callback function &lt;code&gt;code_change&lt;/code&gt;, passing the term &lt;code&gt;Extra&lt;/code&gt; and some other information as arguments. See the manual pages for the respective behaviours and &lt;code&gt;&lt;a href=&quot;appup_cookbook#int_state&quot;&gt;Appup Cookbook&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 위에서 설명한대로 동작의 내부 상태를 변경할 때 인수 &lt;code&gt;{advanced,Extra}&lt;/code&gt; 로 업데이트 합니다. 동작 프로세스가 콜백 함수 &lt;code&gt;code_change&lt;/code&gt; 를 호출하여 &lt;code&gt;Extra&lt;/code&gt; 라는 용어 와 기타 정보를 인수로 전달합니다. 해당 동작 및 &lt;code&gt;&lt;a href=&quot;appup_cookbook#int_state&quot;&gt;Appup Cookbook&lt;/a&gt;&lt;/code&gt; 에 대해서는 매뉴얼 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4c8e77e2a3b795490a289f04ccc42ccc8e8b108" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update_password/5&lt;/code&gt; and &lt;code&gt;update_password/6&lt;/code&gt; each updates &lt;code&gt;AuthAccessPassword&lt;/code&gt; for the specified directory. If &lt;code&gt;NewPassword&lt;/code&gt; is equal to &quot;NoPassword&quot;, no password is required to change authorisation data. If &lt;code&gt;NewPassword&lt;/code&gt; is equal to &quot;DummyPassword&quot;, no changes can be done without changing the password first.</source>
          <target state="translated">&lt;code&gt;update_password/5&lt;/code&gt; 및 &lt;code&gt;update_password/6&lt;/code&gt; 은 각각 지정된 디렉토리에 대한 &lt;code&gt;AuthAccessPassword&lt;/code&gt; 를 업데이트 합니다. &lt;code&gt;NewPassword&lt;/code&gt; 가 &quot;NoPassword&quot;와 같은 경우 인증 데이터를 변경하는 데 암호가 필요하지 않습니다. 경우 &lt;code&gt;NewPassword&lt;/code&gt; &quot;DummyPassword&quot;동일, 변경 먼저 암호를 변경하지 않고 수행 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4bf07b2d071383294ff8367d439054c4a5355c3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upgrade&lt;/code&gt; is called when the NIF library is loaded and there is old code of this module with a loaded NIF library.</source>
          <target state="translated">&lt;code&gt;upgrade&lt;/code&gt; NIF 라이브러리가로드되고 NIF 라이브러리가로드 된이 모듈의 이전 코드가있을 때 업그레이드 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="9877c5fe670c390677a05dcd0f0befd190474c2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url() = string()&lt;/code&gt; syntax according to the URI definition in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC 2396&lt;/a&gt;&lt;/code&gt;, for example &lt;code&gt;&quot;http://www.erlang.org&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;url() = string()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC 2396&lt;/a&gt;&lt;/code&gt; 의 URI 정의에 따른 url () = string () 구문 ( 예 : &lt;code&gt;&quot;http://www.erlang.org&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57f37f3bdacc119aaec6f52f5f64f0c4f151b5fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url() = string()&lt;/code&gt; syntax according to the URI definition in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;, for example &lt;code&gt;&quot;http://www.erlang.org&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;url() = string()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; 의 URI 정의에 따른 url () = string () 구문 ( 예 : &lt;code&gt;&quot;http://www.erlang.org&quot;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="02ff37f233e13e3cf91eb9088f454693b539fcb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use_dir&lt;/code&gt; can be determined even before &lt;code&gt;Mnesia&lt;/code&gt; is started.</source>
          <target state="translated">&lt;code&gt;use_dir&lt;/code&gt; 가 시작 되기 전에도 &lt;code&gt;Mnesia&lt;/code&gt; 판별 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="49d3565fb902c136f502da8d51ef1b3741014827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use_dir&lt;/code&gt;. Returns a boolean that indicates if the Mnesia directory is used or not. Can be started even if Mnesia is not yet running.</source>
          <target state="translated">&lt;code&gt;use_dir&lt;/code&gt; . Mnesia 디렉토리의 사용 여부를 나타내는 부울을 리턴합니다. Mnesia가 아직 실행되고 있지 않더라도 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eab548437e6b6765ecfed12484803bba2ec9120f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user&lt;/code&gt; - Same as &lt;code&gt;{user, integer()}&lt;/code&gt;, except that the default time, 15000 milli-seconds, is used.</source>
          <target state="translated">&lt;code&gt;user&lt;/code&gt; - 동일은 &lt;code&gt;{user, integer()}&lt;/code&gt; , 기본 시간은 15000 밀리 초, 사용하는 것을 제외하고.</target>
        </trans-unit>
        <trans-unit id="06dc83804965c938bd881185af62fddd57a33b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user_properties&lt;/code&gt;. Returns the user-associated table properties of the table. It is a list of the stored property records.</source>
          <target state="translated">&lt;code&gt;user_properties&lt;/code&gt; . 테이블의 사용자 관련 테이블 속성을 반환합니다. 저장된 속성 레코드의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="8bd1cb0e12bb3d7f8ed7b05354e7cf0b36fa0b22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;userdata&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;userdata&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="4742a9e95696ac56e7fc3feeda4f22f35508fb81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;users_entry(UserId)&lt;/code&gt; translates to the following call: &lt;code&gt;users_entry(UserId, snmpm_user_default)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;users_entry(UserId)&lt;/code&gt; 는 &lt;code&gt;users_entry(UserId, snmpm_user_default)&lt;/code&gt; 호출로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="6435fceb839d27af4e14ec590fb387c23e41c7ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;users_entry(UserId, UserMod)&lt;/code&gt; translates to the following call: &lt;code&gt;users_entry(UserId, UserMod, undefined)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;users_entry(UserId, UserMod)&lt;/code&gt; 는 &lt;code&gt;users_entry(UserId, UserMod, undefined)&lt;/code&gt; 호출로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="6c182bac5e5dc2aa902d528e89a94ffa68f92eb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usm.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#usm&quot;&gt;Security data for USM&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;usm.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#usm&quot;&gt;Security data for USM&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="2effba39a2bdbac5661cb95841c2d8bca14c6809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usm_entry/1&lt;/code&gt; translates to the following call: &lt;code&gt;usm_entry(&quot;initial&quot;, &quot;initial&quot;, zeroDotZero, usmNoAuthProtocol, &quot;&quot;, &quot;&quot;, usmNoPrivProtocol, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;usm_entry/1&lt;/code&gt; 은 다음 호출로 변환합니다. &lt;code&gt;usm_entry(&quot;initial&quot;, &quot;initial&quot;, zeroDotZero, usmNoAuthProtocol, &quot;&quot;, &quot;&quot;, usmNoPrivProtocol, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0df82ac76d269f95a5929d4b0fc6316f680307cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt; - Arity value. Only used internally in the loader.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; -Arity 값. 로더 내부에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5a02b9268b15ed77101380b6bd5fd4260e828103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacm.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#vacm&quot;&gt;MIB Views for VACM&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;vacm.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#vacm&quot;&gt;MIB Views for VACM&lt;/a&gt;&lt;/code&gt; 대한 MIB 뷰 참조</target>
        </trans-unit>
        <trans-unit id="7e03dfee301b3b6d50c0ee51604a2f577049e425" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vacm_vtf_entry/2&lt;/code&gt; translates to the following call: &lt;code&gt;vacm_vtf_entry(ViewIndex, ViewSubtree, included, null)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vacm_vtf_entry/2&lt;/code&gt; 는 다음 호출로 변환합니다. &lt;code&gt;vacm_vtf_entry(ViewIndex, ViewSubtree, included, null)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="073cac5e7c8a11760b760cc2926fa3def62a9b76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;NULL&lt;/code&gt;-terminated string containing the new value of the environment variable.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 는 환경 변수의 새 값을 포함 하는 &lt;code&gt;NULL&lt;/code&gt; 로 끝나는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="9d7f39974b19c2176ca01d8f5adf6a53e1a68376" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verbose&lt;/code&gt;, with initial default value &lt;code&gt;false&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; 초기 기본값이 &lt;code&gt;false&lt;/code&gt; 인verbose ;</target>
        </trans-unit>
        <trans-unit id="3cb5607c038d28e092066a66f90ec1d52f18831e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verify_fun&lt;/code&gt; (write as &lt;code&gt;{Module, Function, InitialUserState}&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;verify_fun&lt;/code&gt; ( &lt;code&gt;{Module, Function, InitialUserState}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="1999293cc88462714e2740cfd2167d251651472f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;, the application's version as a list of numbers. For instance, the directory &quot;kernel-2.6&quot; results in the application name &lt;code&gt;kernel&lt;/code&gt; and the application version [2,6]; &quot;kernel&quot; yields the name &lt;code&gt;kernel&lt;/code&gt; and the version [].</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; , 응용 프로그램의 버전은 숫자 목록입니다. 예를 들어, &quot;kernel-2.6&quot;디렉토리는 응용 프로그램 이름 &lt;code&gt;kernel&lt;/code&gt; 과 응용 프로그램 버전 [2,6]이됩니다. &quot;kernel&quot;은 &lt;code&gt;kernel&lt;/code&gt; 이름 과 버전 []을 산출합니다 .</target>
        </trans-unit>
        <trans-unit id="e720fd4c485c4274afccddb66162b94247d7d9cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;. Returns the current version number of Mnesia.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; . Mnesia의 현재 버전 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="725edffef8fa84eb7cd7ee10016f6293ff990de7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;. Returns the current version of the table definition. The table version is incremented when the table definition is changed. The table definition can be incremented directly when it has been changed in a schema transaction, or when a committed table definition is merged with table definitions from other nodes during startup.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; . 테이블 정의의 현재 버전을 리턴합니다. 테이블 정의가 변경되면 테이블 버전이 증가합니다. 테이블 정의는 스키마 트랜잭션에서 변경되거나 커미트 된 테이블 정의가 시작 중 다른 노드의 테이블 정의와 병합 될 때 직접 증가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c9f5faf74adb2bbb2ed57c5511d3a10540cd5b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visible&lt;/code&gt; - &lt;code&gt;erlang:nodes(visible)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; - &lt;code&gt;erlang:nodes(visible)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e0b575d9e6c3d8c224a07439118a2000b402bd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void erts_schedule_thr_prgr_later_op(void (*funcp)(void *), void *argp, ErtsThrPrgrLaterOp *memp)&lt;/code&gt; - Schedule a call to &lt;code&gt;funcp&lt;/code&gt;. The call &lt;code&gt;(*funcp)(argp)&lt;/code&gt; will be executed when thread progress has been made since the call to &lt;code&gt;erts_schedule_thr_prgr_later_op()&lt;/code&gt; was made.</source>
          <target state="translated">&lt;code&gt;void erts_schedule_thr_prgr_later_op(void (*funcp)(void *), void *argp, ErtsThrPrgrLaterOp *memp)&lt;/code&gt; -에 일정 호출 &lt;code&gt;funcp&lt;/code&gt; . 호출 &lt;code&gt;(*funcp)(argp)&lt;/code&gt; 스레드 진행에 대한 호출 이후가되면 실행됩니다 &lt;code&gt;erts_schedule_thr_prgr_later_op()&lt;/code&gt; 되었다.</target>
        </trans-unit>
        <trans-unit id="a1bb7edad735c725b503f21c83d2697b6938ae7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void erts_thr_progress_unmanaged_continue(ErtsThrPrgrDelayHandle handle)&lt;/code&gt; - Let thread progress continue.</source>
          <target state="translated">&lt;code&gt;void erts_thr_progress_unmanaged_continue(ErtsThrPrgrDelayHandle handle)&lt;/code&gt; -스레드 진행을 계속합니다.</target>
        </trans-unit>
        <trans-unit id="e7a9fca08b242db4dbccffa4bc65e2560ce4ce1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void erts_thr_progress_wakeup(ErtsSchedulerData *esdp, ErtsThrPrgrVal val)&lt;/code&gt; - Request wake up. The calling thread will be woken when thread progress has reached val.</source>
          <target state="translated">&lt;code&gt;void erts_thr_progress_wakeup(ErtsSchedulerData *esdp, ErtsThrPrgrVal val)&lt;/code&gt; -깨우기를 요청합니다. 스레드 진행률이 val에 도달하면 호출 스레드가 깨어납니다.</target>
        </trans-unit>
        <trans-unit id="16b4f31a998fa85f82c497b3fb589c1499e35404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vsn&lt;/code&gt; - Version number, a string. Defaults to &quot;&quot;.</source>
          <target state="translated">&lt;code&gt;vsn&lt;/code&gt; - 버전 번호, 문자열 기본값은 &quot;&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="a61b418153ad02dd256a4936a21ae1935d19371a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; means that a warning is sent to the &lt;code&gt;error_logger&lt;/code&gt; whenever a wrongly encoded filename is &quot;skipped&quot; in directory listings. &lt;code&gt;w&lt;/code&gt; is the default.</source>
          <target state="translated">&lt;code&gt;w&lt;/code&gt; 는 잘못 인코딩 된 파일 이름이 디렉토리 목록에서 &quot;건너 뛸&quot;때마다 &lt;code&gt;error_logger&lt;/code&gt; 에 경고가 전송됨을 의미합니다 . &lt;code&gt;w&lt;/code&gt; 가 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="93e1ec4a869cdc774ffcf94e406254568b25ee6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; means that a warning is sent to the &lt;code&gt;error_logger&lt;/code&gt; whenever a wrongly encoded filename is &quot;skipped&quot; in directory listings. This is the default.</source>
          <target state="translated">&lt;code&gt;w&lt;/code&gt; 는 잘못 인코딩 된 파일 이름이 디렉토리 목록에서 &quot;건너 뛸&quot;때마다 &lt;code&gt;error_logger&lt;/code&gt; 에 경고가 전송됨을 의미합니다 . 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="0ba27f55a23f1465f57ce405adef9c153873bf6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;waiting&lt;/code&gt; (for a message)</source>
          <target state="translated">&lt;code&gt;waiting&lt;/code&gt; (메시지)</target>
        </trans-unit>
        <trans-unit id="56c42310a3adf0203bb9d7775e938a815c481570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;waiting&lt;/code&gt; - The process is waiting at a &lt;code&gt;receive&lt;/code&gt;. &lt;code&gt;Info={}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;waiting&lt;/code&gt; -프로세스가 &lt;code&gt;receive&lt;/code&gt; 대기 중 입니다. &lt;code&gt;Info={}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d521421c6c6b4d5cfbc722ae90cdec142a1ea744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;warnings&lt;/code&gt;, with initial default value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; 초기 기본값이 &lt;code&gt;true&lt;/code&gt; 인경고 .</target>
        </trans-unit>
        <trans-unit id="cc3f6825839013d334b382fc8f4d2c9fe25b66a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;where_to_read&lt;/code&gt;. Returns the node where the table can be read. If value &lt;code&gt;nowhere&lt;/code&gt; is returned, either the table is not loaded or it resides at a remote node that is not running.</source>
          <target state="translated">&lt;code&gt;where_to_read&lt;/code&gt; . 테이블을 읽을 수있는 노드를 리턴합니다. 값이 경우 &lt;code&gt;nowhere&lt;/code&gt; 반환되지 않습니다, 두 테이블이로드되지 않았거나 실행되지 않은 원격 노드에 상주합니다.</target>
        </trans-unit>
        <trans-unit id="901723e62a25962c4a0f86ef98c81ff41aaa4e1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;where_to_write&lt;/code&gt;. Returns a list of the nodes that currently hold an active replica of the table.</source>
          <target state="translated">&lt;code&gt;where_to_write&lt;/code&gt; . 현재 테이블의 활성 복제본을 보유하고있는 노드 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="33a6e89a063b3c48d127b9caa3a09c282600833d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;which_applications/0&lt;/code&gt; uses the standard &lt;code&gt;gen_server&lt;/code&gt; time-out value (5000 ms). A &lt;code&gt;Timeout&lt;/code&gt; argument can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</source>
          <target state="translated">&lt;code&gt;which_applications/0&lt;/code&gt; 은 표준 &lt;code&gt;gen_server&lt;/code&gt; 시간 제한 값 (5000ms)을 사용합니다. &lt;code&gt;Timeout&lt;/code&gt; 다른 시간 값은 애플리케이션 제어기는 심하게 로딩 상황에서, 예를 들면, 유용한 경우 인수 지정 될 수있다.</target>
        </trans-unit>
        <trans-unit id="4e3e6f7db7c74274af9a1913d1ef4ed5410ac388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; is the field width.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; 는 필드 너비입니다.</target>
        </trans-unit>
        <trans-unit id="c1b9c1eb6b0db68c59c0d28ea745a885fec2a2e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wild_pattern&lt;/code&gt;. Returns a structure that can be given to the various match functions for a certain table. A record tuple is where all record fields have value &lt;code&gt;'_'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wild_pattern&lt;/code&gt; . 특정 테이블에 대한 다양한 일치 함수에 제공 할 수있는 구조를 리턴합니다. 레코드 튜플은 모든 레코드 필드의 값이 &lt;code&gt;'_'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a3b2f203f574e7b0119cebca9fa81660715a611e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;win32reg&lt;/code&gt; supports storing of the following types:</source>
          <target state="translated">&lt;code&gt;win32reg&lt;/code&gt; 는 다음 유형의 저장을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f509372c189110635eb8dc8b6f332817e7d2689b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wordsize 32|64&lt;/code&gt; - Defines the word size. Default is 32.</source>
          <target state="translated">&lt;code&gt;wordsize 32|64&lt;/code&gt; 단어 크기를 정의합니다. 기본값은 32입니다.</target>
        </trans-unit>
        <trans-unit id="6895e0b101bb33a164e6b5cbf8dccbfa9b543c30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;workers&lt;/code&gt; - The count of all children marked as &lt;code&gt;child_type = worker&lt;/code&gt; in the specification list, regardless if the child process is still alive.</source>
          <target state="translated">&lt;code&gt;workers&lt;/code&gt; -로 표시된 모든 아이들의 카운트 &lt;code&gt;child_type = worker&lt;/code&gt; 자식 프로세스가 아직 살아 관계없이 경우, 사양 목록입니다.</target>
        </trans-unit>
        <trans-unit id="bc2b9201f92d5072210e29674ade6606a1e5b001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxCalendarCtrl:enableYearChange/1&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxCalendarCtrl:enableYearChange/1&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="4c99919e9bafd280daaf1b9599027cb98706a1e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxCalendarCtrl:enableYearChange/2&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxCalendarCtrl:enableYearChange/2&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="dce8836f23608dbf80427151fca96240aa79e032" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxClientDC:new/0&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxClientDC:new/0&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="7a82b6487cc5fe08ea42ba55fd55e88b0df34731" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxCursor:new/3&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxCursor:new/3&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="784b7666077200096b759c3059024ca756910012" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxCursor:new/4&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxCursor:new/4&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="6042f6b02a1e5ffa0a8bd79babd7439008ea61aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxDC:computeScaleAndOrigin/1&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxDC:computeScaleAndOrigin/1&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="197513fcef89e49065afdcd45ef1aac569501021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxGraphicsRenderer:createLinearGradientBrush/7&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxGraphicsRenderer:createLinearGradientBrush/7&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="1cc9326a94e583599137802d115fca4902f01258" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxGraphicsRenderer:createRadialGradientBrush/8&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxGraphicsRenderer:createRadialGradientBrush/8&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="bb4aab0fd0809f7763a25de51857da13b3d21fc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxGridCellEditor:endEdit/4&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxGridCellEditor:endEdit/4&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="92036594f2e9011aeddb306895531af536207b2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxGridCellEditor:paintBackground/3&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxGridCellEditor:paintBackground/3&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="90f6b2da4a9f25f281d6477c5aef03d15b6c5d95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxIdleEvent:canSend/1&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxIdleEvent:canSend/1&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="c996a6d72559ef9d856c7ee10ab1ce7e6218bba6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxMDIClientWindow:new/1&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxMDIClientWindow:new/1&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="dcc67c2eb467e0e359f1a4b8a8812d094326405b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxMDIClientWindow:new/2&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxMDIClientWindow:new/2&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="eed9e7b6fcb5ff4afcd41b721ec2f440844f2091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxPaintDC:new/0&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxPaintDC:new/0&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="6ed411a512024548098a1bddb9e5622a0455b1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxPostScriptDC:getResolution/0&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxPostScriptDC:getResolution/0&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="7a353696879da15a4ce1870b080573a1a6750b1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxPostScriptDC:setResolution/1&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxPostScriptDC:setResolution/1&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="735321c8d46879ad38b278fad274ca5abf64c723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wxWindowDC:new/0&lt;/code&gt; (not available in wxWidgets-2.9 and later)</source>
          <target state="translated">&lt;code&gt;wxWindowDC:new/0&lt;/code&gt; (wxWidgets-2.9 ​​이상에서는 사용할 수 없음)</target>
        </trans-unit>
        <trans-unit id="d9ef84109deb08beaabcc5a00c130fd8eeff8151" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - X register.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -X 레지스터.</target>
        </trans-unit>
        <trans-unit id="2a2acf1053f174a35264b12f39bb493a6684601d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - X register. The default value is 1023. That makes &lt;code&gt;x&lt;/code&gt; convenient to use as a temporary X register.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -X 레지스터. 기본값은 1023입니다. 따라서 &lt;code&gt;x&lt;/code&gt; 를 임시 X 레지스터로 편리하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fab91c8c8f485a820bcf0799ac7040c6ecb3575" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; - X register. Will be loaded as a byte offset to the X register relative to the base of X register array. (Can be packed with other operands.)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; -X 레지스터. X 레지스터 배열의 기준을 기준으로 X 레지스터에 대한 바이트 오프셋으로로드됩니다. (다른 피연산자와 함께 패킹 될 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="b18d65fbb4af8e8bfaebe6445fff22b60a0fc38c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is buffer obtained from &lt;code&gt;ei_x_new&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;ei_x_new&lt;/code&gt; 에서 얻은 버퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="e8df1ee779239343d32dfcea45be1e5d3db1ef43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; points to the dynamic buffer that receives the result. For &lt;code&gt;ei_rpc()&lt;/code&gt; this is the result without the version magic number. For &lt;code&gt;ei_rpc_from()&lt;/code&gt; the result returns a version magic number and a 2-tuple &lt;code&gt;{rex,Reply}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 결과를받는 동적 버퍼를 가리 킵니다. 들어 &lt;code&gt;ei_rpc()&lt;/code&gt; 이 버전 매직 번호가없는 결과이다. 들어 &lt;code&gt;ei_rpc_from()&lt;/code&gt; 결과가 버전 매직 번호와 2 튜플 반환 &lt;code&gt;{rex,Reply}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="69cc9a0b7cc31e8861235d424fa4293afd8c894b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xb((tmp_packed1&amp;gt;&amp;gt;BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&amp;amp;BEAM_TIGHT_MASK);&lt;/code&gt; copies the source to the destination. (For a 64-bit architecture, &lt;code&gt;BEAM_TIGHT_SHIFT&lt;/code&gt; is 16 and &lt;code&gt;BEAM_TIGHT_MASK&lt;/code&gt; is &lt;code&gt;0xFFFF&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;xb((tmp_packed1&amp;gt;&amp;gt;BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&amp;amp;BEAM_TIGHT_MASK);&lt;/code&gt; 소스를 대상에 복사합니다. (64 비트 아키텍처의 경우 &lt;code&gt;BEAM_TIGHT_SHIFT&lt;/code&gt; 는 16이고 &lt;code&gt;BEAM_TIGHT_MASK&lt;/code&gt; 는 &lt;code&gt;0xFFFF&lt;/code&gt; 입니다.)</target>
        </trans-unit>
        <trans-unit id="7d3aa72a740c073381e7266e0b67248d9d2b9717" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xb(BeamExtraData(I[0])) = I[1];&lt;/code&gt; is the expansion of &lt;code&gt;$Dst = $Src&lt;/code&gt;. &lt;code&gt;BeamExtraData()&lt;/code&gt; is a macro that will extract the upper 32 bits from the instruction word. In this example, it will return 40 which is the byte offset for X register 5. The &lt;code&gt;xb()&lt;/code&gt; macro will cast a byte pointer to an &lt;code&gt;Eterm&lt;/code&gt; pointer and dereference it. The &lt;code&gt;I[1]&lt;/code&gt; on the right side of the &lt;code&gt;=&lt;/code&gt; fetches an Erlang term (the atom &lt;code&gt;id&lt;/code&gt; in this case).</source>
          <target state="translated">&lt;code&gt;xb(BeamExtraData(I[0])) = I[1];&lt;/code&gt; &lt;code&gt;$Dst = $Src&lt;/code&gt; 의 확장입니다 . &lt;code&gt;BeamExtraData()&lt;/code&gt; 는 명령어에서 상위 32 비트를 추출하는 매크로입니다. 이 예에서는 X 레지스터 5의 바이트 오프셋 인 40을 반환합니다. &lt;code&gt;xb()&lt;/code&gt; 매크로는 바이트 포인터를 &lt;code&gt;Eterm&lt;/code&gt; 포인터 로 캐스팅 하고 역 참조합니다. &lt;code&gt;I[1]&lt;/code&gt; 의 우측은 &lt;code&gt;=&lt;/code&gt; 얼랑 기간 (원자 페치 &lt;code&gt;id&lt;/code&gt; 이 경우에는).</target>
        </trans-unit>
        <trans-unit id="e43baae1e033ddbdcc46d820e42d908fb1b1318a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xmerl_xs&lt;/code&gt; does not implement the entire XSLT specification but the basic functionality. For all details see the &lt;code&gt;&lt;a href=&quot;xmerl_xs&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;xmerl_xs&lt;/code&gt; 는 전체 XSLT 사양이 아니라 기본 기능을 구현합니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;xmerl_xs&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt; 하십시오</target>
        </trans-unit>
        <trans-unit id="aa8864ee1e0998dd64ca65e617a7995967c3e4da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xsltproc&lt;/code&gt; -- A command line XSLT processor.</source>
          <target state="translated">&lt;code&gt;xsltproc&lt;/code&gt; - 명령 행 XSLT 프로세서.</target>
        </trans-unit>
        <trans-unit id="06d89e001d3aba29475ca7ab41858b08c392a728" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - Y register.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -Y 레지스터.</target>
        </trans-unit>
        <trans-unit id="d3cfb104e24c2fd7c2c93a75141b29a56384ed40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - Y register. The default value is 0.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -Y 레지스터. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="707a9715d4900a185dea8970c11664530f539eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; - Y register. Will be loaded as a byte offset to the Y register relative to the stack frame. (Can be packed with other operands.)</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; -Y 레지스터. 스택 프레임을 기준으로 Y 레지스터에 대한 바이트 오프셋으로로드됩니다. (다른 피연산자와 함께 패킹 될 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="1fd3c4bd87d2ae6804509a008138cc156e5e98cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zero_n&lt;/code&gt; - Perform 0/n BEAST mitigation.</source>
          <target state="translated">&lt;code&gt;zero_n&lt;/code&gt; -0 / n BEAST 완화를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="5db7af8d540f788f1a2740e506659b466273d5f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zipwith(fun(X, Y) -&amp;gt; {X,Y} end, List1, List2)&lt;/code&gt; is equivalent to &lt;code&gt;zip(List1, List2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;zipwith(fun(X, Y) -&amp;gt; {X,Y} end, List1, List2)&lt;/code&gt; 는 &lt;code&gt;zip(List1, List2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d9843379c0cac92453b79a4bca12fe83c0d6fb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zipwith3(fun(X, Y, Z) -&amp;gt; {X,Y,Z} end, List1, List2, List3)&lt;/code&gt; is equivalent to &lt;code&gt;zip3(List1, List2, List3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;zipwith3(fun(X, Y, Z) -&amp;gt; {X,Y,Z} end, List1, List2, List3)&lt;/code&gt; &lt;code&gt;zip3(List1, List2, List3)&lt;/code&gt; ) 은 zip3 (List1, List2, List3 ) 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="1da76f45fcab9095f99b594226e633028d4474a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{19, FromPid, ToProc, Ref}&lt;/code&gt;, where &lt;code&gt;FromPid&lt;/code&gt; = monitoring process and &lt;code&gt;ToProc&lt;/code&gt; = monitored process pid or name (atom)</source>
          <target state="translated">&lt;code&gt;{19, FromPid, ToProc, Ref}&lt;/code&gt; . 여기서 &lt;code&gt;FromPid&lt;/code&gt; = 모니터링 프로세스 및 &lt;code&gt;ToProc&lt;/code&gt; = 모니터링 된 프로세스 pid 또는 이름 (아톰)</target>
        </trans-unit>
        <trans-unit id="745bab8ee964fe3e77bce95c3f60e8693a9f1bc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{20, FromPid, ToProc, Ref}&lt;/code&gt;, where &lt;code&gt;FromPid&lt;/code&gt; = monitoring process and &lt;code&gt;ToProc&lt;/code&gt; = monitored process pid or name (atom)</source>
          <target state="translated">&lt;code&gt;{20, FromPid, ToProc, Ref}&lt;/code&gt; . 여기서 &lt;code&gt;FromPid&lt;/code&gt; = 모니터링 프로세스 및 &lt;code&gt;ToProc&lt;/code&gt; = 모니터링 된 프로세스 pid 또는 이름 (아톰)</target>
        </trans-unit>
        <trans-unit id="e7aa61d3f02df5f535950d9aa144b4892b912d5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{21, FromProc, ToPid, Ref, Reason}&lt;/code&gt;, where &lt;code&gt;FromProc&lt;/code&gt; = monitored process pid or name (atom), &lt;code&gt;ToPid&lt;/code&gt; = monitoring process, and &lt;code&gt;Reason&lt;/code&gt; = exit reason for the monitored process</source>
          <target state="translated">&lt;code&gt;{21, FromProc, ToPid, Ref, Reason}&lt;/code&gt; . 여기서 &lt;code&gt;FromProc&lt;/code&gt; = 모니터링 된 프로세스 pid 또는 이름 (아톰), &lt;code&gt;ToPid&lt;/code&gt; = 모니터링 프로세스 및 &lt;code&gt;Reason&lt;/code&gt; = 모니터링 된 프로세스의 종료 이유</target>
        </trans-unit>
        <trans-unit id="c89dfc5e3616548dbd455d68be110e920352d709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{?sysLocation_instance, &quot;upstairs&quot;}&lt;/code&gt; (provided that the generated &lt;code&gt;.hrl&lt;/code&gt; file is included)</source>
          <target state="translated">&lt;code&gt;{?sysLocation_instance, &quot;upstairs&quot;}&lt;/code&gt; (생성 된 &lt;code&gt;.hrl&lt;/code&gt; 파일이 포함 된 경우)</target>
        </trans-unit>
        <trans-unit id="2fdfef9a69f992385af48d17628621ee536dc362" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Column, RowIndex, Value}&lt;/code&gt;, where &lt;code&gt;Column&lt;/code&gt; is the symbolic name of a column variable. &lt;code&gt;RowIndex&lt;/code&gt; is a list of indices for the specified element. If this is the case, the OBJECT IDENTIFIER sent in the notification is the &lt;code&gt;RowIndex&lt;/code&gt; appended to the OBJECT IDENTIFIER for the table column. This is the OBJECT IDENTIFIER which specifies the element.</source>
          <target state="translated">&lt;code&gt;{Column, RowIndex, Value}&lt;/code&gt; . 여기서 &lt;code&gt;Column&lt;/code&gt; 은 열 변수의 기호 이름입니다. &lt;code&gt;RowIndex&lt;/code&gt; 는 지정된 요소에 대한 인덱스 목록입니다. 이 경우 알림에 전송 된 OBJECT IDENTIFIER는 테이블 열의 OBJECT IDENTIFIER에 추가 된 &lt;code&gt;RowIndex&lt;/code&gt; 입니다. 이것은 요소를 지정하는 OBJECT IDENTIFIER입니다.</target>
        </trans-unit>
        <trans-unit id="0aa7bdabffe6ccfb6463d9dffc6c81df088d816a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Column, RowIndex, Value}&lt;/code&gt;, where &lt;code&gt;Column&lt;/code&gt; is the symbolic name of a column variable. &lt;code&gt;RowIndex&lt;/code&gt; is a list of indices for the specified element. If this is the case, the OBJECT IDENTIFIER sent in the trap is the &lt;code&gt;RowIndex&lt;/code&gt; appended to the OBJECT IDENTIFIER for the table column. This is the OBJECT IDENTIFIER which specifies the element.</source>
          <target state="translated">&lt;code&gt;{Column, RowIndex, Value}&lt;/code&gt; . 여기서 &lt;code&gt;Column&lt;/code&gt; 은 열 변수의 기호 이름입니다. &lt;code&gt;RowIndex&lt;/code&gt; 는 지정된 요소에 대한 인덱스 목록입니다. 이 경우 트랩에 전송 된 OBJECT IDENTIFIER는 테이블 열의 OBJECT IDENTIFIER에 추가 된 &lt;code&gt;RowIndex&lt;/code&gt; 입니다. 이것은 요소를 지정하는 OBJECT IDENTIFIER입니다.</target>
        </trans-unit>
        <trans-unit id="68e9922f1a8cafaa9f22afa67427bc13ca21d643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Error, Column}&lt;/code&gt; where &lt;code&gt;Error&lt;/code&gt; is the same as &lt;code&gt;set&lt;/code&gt; for variables, and &lt;code&gt;Column&lt;/code&gt; denotes the faulty column. &lt;code&gt;Column&lt;/code&gt; must be one of the columns in the &lt;code&gt;Cols&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;{Error, Column}&lt;/code&gt; 여기서 &lt;code&gt;Error&lt;/code&gt; 는 변수에 &lt;code&gt;set&lt;/code&gt; 것과 동일 하며 &lt;code&gt;Column&lt;/code&gt; 은 잘못된 열을 나타냅니다. &lt;code&gt;Column&lt;/code&gt; 은 &lt;code&gt;Cols&lt;/code&gt; 목록 의 열 중 하나 여야 합니다.</target>
        </trans-unit>
        <trans-unit id="dcd1e88ba91e5b34170c883231d5044117a93321" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Error, Column}&lt;/code&gt; where &lt;code&gt;Error&lt;/code&gt; is the same as for &lt;code&gt;undo&lt;/code&gt; for variables, and &lt;code&gt;Column&lt;/code&gt; denotes the faulty column. &lt;code&gt;Column&lt;/code&gt; must be one of the columns in the &lt;code&gt;Cols&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;{Error, Column}&lt;/code&gt; 여기서 &lt;code&gt;Error&lt;/code&gt; 는 변수에 대한 &lt;code&gt;undo&lt;/code&gt; 와 동일 하며 &lt;code&gt;Column&lt;/code&gt; 은 잘못된 열을 나타냅니다. &lt;code&gt;Column&lt;/code&gt; 은 &lt;code&gt;Cols&lt;/code&gt; 목록 의 열 중 하나 여야 합니다.</target>
        </trans-unit>
        <trans-unit id="e0cfe33c1a13ffd17361874ebce5a6d0236fb5f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Error, Column}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is the same as for &lt;code&gt;is_set_ok&lt;/code&gt; for variables, and &lt;code&gt;Column&lt;/code&gt; denotes the faulty column. &lt;code&gt;Column&lt;/code&gt; must be one of the columns in the &lt;code&gt;Cols&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;{Error, Column}&lt;/code&gt; . 여기서 &lt;code&gt;Error&lt;/code&gt; 는 변수의 &lt;code&gt;is_set_ok&lt;/code&gt; 와 동일 하고 &lt;code&gt;Column&lt;/code&gt; 은 결함이있는 열을 나타냅니다. &lt;code&gt;Column&lt;/code&gt; 은 &lt;code&gt;Cols&lt;/code&gt; 목록 의 열 중 하나 여야 합니다.</target>
        </trans-unit>
        <trans-unit id="0f76c767a7b91045d3013b6770fd0cec3a923871" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Method,RequestURI,HTTPVersion}&lt;/code&gt;: The HTTP &lt;code&gt;Method&lt;/code&gt;, &lt;code&gt;Request-URI&lt;/code&gt;, and &lt;code&gt;HTTP-Version&lt;/code&gt; as defined in RFC 2616.</source>
          <target state="translated">&lt;code&gt;{Method,RequestURI,HTTPVersion}&lt;/code&gt; : RFC 2616에 정의 된 HTTP &lt;code&gt;Method&lt;/code&gt; , &lt;code&gt;Request-URI&lt;/code&gt; 및 &lt;code&gt;HTTP-Version&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="87ea5a6c647d045751904b0461c8cd31c1bceb7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Minutes, Bytes}&lt;/code&gt; initiate rekeying when any of the limits are reached.</source>
          <target state="translated">&lt;code&gt;{Minutes, Bytes}&lt;/code&gt; 는 한계에 도달하면 키를 다시 시작합니다.</target>
        </trans-unit>
        <trans-unit id="51cdd4f58a7dd0cb267b633be69777f2c3ff5ab8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Mod, Func, Args}&lt;/code&gt; - The info will be delivered via the function call:</source>
          <target state="translated">&lt;code&gt;{Mod, Func, Args}&lt;/code&gt; -정보는 함수 호출을 통해 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="121c70618c48645db2808b42226c45ce988ce357" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Name,Element_List}&lt;/code&gt; - This action is used when one or more of the subtypes of &lt;code&gt;Name&lt;/code&gt; is exclusive decoded.</source>
          <target state="translated">&lt;code&gt;{Name,Element_List}&lt;/code&gt; -이 작업은 &lt;code&gt;Name&lt;/code&gt; 의 하위 유형 중 하나 이상 이 단독으로 디코딩 된 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="dfec9a14d3d828a4cc27553781fe5c4d1138a461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Name,Node}&lt;/code&gt;, if the &lt;code&gt;gen_server&lt;/code&gt; process is locally registered at another node</source>
          <target state="translated">&lt;code&gt;{Name,Node}&lt;/code&gt; &lt;code&gt;gen_server&lt;/code&gt; 프로세스가 다른 노드에 로컬로 등록 된 경우 {Name, Node}</target>
        </trans-unit>
        <trans-unit id="e6f386212dbc840fe094cafb29eab3642697fe16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Name,Node}&lt;/code&gt;, if the event manager is locally registered at another node</source>
          <target state="translated">&lt;code&gt;{Name,Node}&lt;/code&gt; 이벤트 관리자가 다른 노드에 로컬로 등록 된 경우 {Name, Node}</target>
        </trans-unit>
        <trans-unit id="a57c8e34da36b0e1db6113d19bb2c5302361dc15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Name,Node}&lt;/code&gt;, if the supervisor is locally registered at another node</source>
          <target state="translated">&lt;code&gt;{Name,Node}&lt;/code&gt; 수퍼바이저가 다른 노드에 로컬로 등록 된 경우 {Name, Node}</target>
        </trans-unit>
        <trans-unit id="6c91af9daa8263300dd0e59c09907e51e34aacb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Name,parts}&lt;/code&gt; - The type of &lt;code&gt;Name&lt;/code&gt; can be one of &lt;code&gt;SEQUENCE OF&lt;/code&gt; or &lt;code&gt;SET OF&lt;/code&gt;. The action implies that the different components of &lt;code&gt;Name&lt;/code&gt; are left undecoded. The value of &lt;code&gt;Name&lt;/code&gt; is returned as a tuple (as mentioned in the previous section) where the second element is a list of binaries. This is because the representation of a &lt;code&gt;SEQUENCE OF&lt;/code&gt; or a &lt;code&gt;SET OF&lt;/code&gt; in Erlang is a list of its internal type. Any of the elements in this list or the entire list can be decoded by function &lt;code&gt;decode_part&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{Name,parts}&lt;/code&gt; - &lt;code&gt;Name&lt;/code&gt; 유형 은 &lt;code&gt;SEQUENCE OF&lt;/code&gt; 또는 &lt;code&gt;SET OF&lt;/code&gt; 중 하나 일 수 있습니다 . 이 작업은 &lt;code&gt;Name&lt;/code&gt; 의 다른 구성 요소가 디코딩되지 않은 상태로 남아 있음을 의미합니다 . &lt;code&gt;Name&lt;/code&gt; 의 값은 이전 섹션에서 언급 한 것처럼 튜플로 반환되며 두 번째 요소는 이진 목록입니다. Erlang에서 &lt;code&gt;SEQUENCE OF&lt;/code&gt; 또는 &lt;code&gt;SET OF&lt;/code&gt; 의 표현은 내부 유형의 목록이기 때문입니다. 이 목록의 모든 요소 또는 전체 목록은 &lt;code&gt;decode_part&lt;/code&gt; 함수로 디코딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aa91826344ee57f80e20c6dcb0f9b010c113de3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Name,undecoded}&lt;/code&gt; - Tells that the element is left undecoded during the exclusive decode. The type of &lt;code&gt;Name&lt;/code&gt; can be any ASN.1 type. The value of element &lt;code&gt;Name&lt;/code&gt; is returned as a tuple (as mentioned in the previous section) in the value structure of the top type.</source>
          <target state="translated">&lt;code&gt;{Name,undecoded}&lt;/code&gt; -배타적 디코딩 동안 요소가 디코딩되지 않은 상태임을 나타냅니다. &lt;code&gt;Name&lt;/code&gt; 유형은 모든 ASN.1 유형이 될 수 있습니다. 요소 &lt;code&gt;Name&lt;/code&gt; 의 값은 상단 유형의 값 구조에서 튜플 (이전 섹션에서 언급 한 것처럼)로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4f6d35b81d459330588190ef4d06d768670ee791" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{NextOid, NextValue}&lt;/code&gt;, where &lt;code&gt;NextOid&lt;/code&gt; is the lexicographic next OBJECT IDENTIFIER for the corresponding column. This should be specified as the OBJECT IDENTIFER part following the table entry. This means that the first integer is the column number and the rest is a specification of the keys. &lt;code&gt;NextValue&lt;/code&gt; is the value of this element.</source>
          <target state="translated">&lt;code&gt;{NextOid, NextValue}&lt;/code&gt; . 여기서 &lt;code&gt;NextOid&lt;/code&gt; 는 해당 열의 사전 식 다음 OBJECT IDENTIFIER입니다. 이것은 테이블 항목 다음에 OBJECT IDENTIFER 부분으로 지정되어야합니다. 이것은 첫 번째 정수가 열 번호이고 나머지는 키의 스펙임을 의미합니다. &lt;code&gt;NextValue&lt;/code&gt; 는이 요소의 값입니다.</target>
        </trans-unit>
        <trans-unit id="53ed75176daebf696b0f894701b346d9d74e248b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{OID, Value}&lt;/code&gt;, where &lt;code&gt;OID&lt;/code&gt; is the OBJECT IDENTIFIER for an instance of an object, scalar variable or column variable.</source>
          <target state="translated">&lt;code&gt;{OID, Value}&lt;/code&gt; (여기서 &lt;code&gt;OID&lt;/code&gt; 는 오브젝트, 스칼라 변수 또는 열 변수의 인스턴스에 대한 오브젝트 ID)입니다.</target>
        </trans-unit>
        <trans-unit id="72f6021f2030528af2957095894ceec6297672d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{OID, Value}&lt;/code&gt;, where &lt;code&gt;OID&lt;/code&gt; is the OBJECT IDENTIFIER for an instance of an object, scalar variable, or column variable.</source>
          <target state="translated">&lt;code&gt;{OID, Value}&lt;/code&gt; (여기서 &lt;code&gt;OID&lt;/code&gt; 는 오브젝트, 스칼라 변수 또는 열 변수의 인스턴스에 대한 오브젝트 ID)입니다.</target>
        </trans-unit>
        <trans-unit id="753b6d106c570016132db8db3aa6c3a4be083ae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Objects, Fun}&lt;/code&gt;, where &lt;code&gt;Objects&lt;/code&gt; is a list of binaries or terms depending on the format, and &lt;code&gt;Fun&lt;/code&gt; is a new input function.</source>
          <target state="translated">&lt;code&gt;{Objects, Fun}&lt;/code&gt; (여기서 &lt;code&gt;Objects&lt;/code&gt; 는 형식에 따른 이진 또는 용어 목록이며 &lt;code&gt;Fun&lt;/code&gt; 은 새로운 입력 함수입니다.</target>
        </trans-unit>
        <trans-unit id="45f995fedf59632161a42ad9d7ccb7bd9a899c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Record}&lt;/code&gt; specifies a record to be inserted. It can be a tuple with &lt;code&gt;Tab&lt;/code&gt; as first field. Notice that the record name is set to the table name regardless of what &lt;code&gt;record_name&lt;/code&gt; is set to.</source>
          <target state="translated">&lt;code&gt;{Record}&lt;/code&gt; 는 삽입 할 레코드를 지정합니다. 첫 번째 필드 로 &lt;code&gt;Tab&lt;/code&gt; 을 사용 하는 튜플 일 수 있습니다 . &lt;code&gt;record_name&lt;/code&gt; 설정에 관계없이 레코드 이름이 테이블 이름 으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="af175d6f9cb3c148fb9a7a4069a2824b97ab9f32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Tab, Key}&lt;/code&gt; specifies the full identity of a record to be deleted.</source>
          <target state="translated">&lt;code&gt;{Tab, Key}&lt;/code&gt; 는 삭제할 레코드의 전체 ID를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="e06b602b6a57a43d76f0a59f249204dc4ba2186b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Tag, Recv}&lt;/code&gt; - The information is delivered either via messages or via a function call according to the value of &lt;code&gt;Recv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{Tag, Recv}&lt;/code&gt; -정보는 &lt;code&gt;Recv&lt;/code&gt; 값에 따라 메시지 또는 함수 호출을 통해 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="e724f43633b5194fb847b068e538f0756634630c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Variable, Value}&lt;/code&gt;, where &lt;code&gt;Variable&lt;/code&gt; is the symbolic name of a scalar variable referred to in the notification specification.</source>
          <target state="translated">&lt;code&gt;{Variable, Value}&lt;/code&gt; . 여기서 &lt;code&gt;Variable&lt;/code&gt; 은 알림 스펙에서 참조되는 스칼라 변수의 기호 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d2de6a0bd542803b390e373274da6b30bd2ba684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{[1,3,6,1,2,1,1,6,0], &quot;upstairs&quot;}&lt;/code&gt; or</source>
          <target state="translated">&lt;code&gt;{[1,3,6,1,2,1,1,6,0], &quot;upstairs&quot;}&lt;/code&gt; 또는</target>
        </trans-unit>
        <trans-unit id="d4e6ecb8894ea8a318ccd9bd107e2b468f26a717" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{aborted, Reason}&lt;/code&gt; if the function fails</source>
          <target state="translated">&lt;code&gt;{aborted, Reason}&lt;/code&gt; 함수가 실패하면 {aborted, Reason}</target>
        </trans-unit>
        <trans-unit id="cb73ae684b0c9f0fd04462ed9c6c277bab6015d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{aborted, Reason}&lt;/code&gt; if unsuccessful</source>
          <target state="translated">&lt;code&gt;{aborted, Reason}&lt;/code&gt; 실패하면 {중지, 이유}</target>
        </trans-unit>
        <trans-unit id="ff9354f36140478f5614fbcdbe92dbf514bb45fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{access,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt; access()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - Existing tables can be opened in read-only mode. A table that is opened in read-only mode is not subjected to the automatic file reparation algorithm if it is later opened after a crash. Defaults to &lt;code&gt;read_write&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{access,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt; access()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -기존 테이블을 읽기 전용 모드로 열 수 있습니다. 읽기 전용 모드로 열린 테이블은 나중에 충돌 후 열리면 자동 파일 복구 알고리즘의 적용을받지 않습니다. 기본값은 &lt;code&gt;read_write&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ea05d0ec1cc8c19818b2aabe48e26296ac51a91d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{access,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt; access()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The access mode.</source>
          <target state="translated">&lt;code&gt;{access,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt; access()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -액세스 모드.</target>
        </trans-unit>
        <trans-unit id="4b598621715d0704aaa6c18963a5e82926e142a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{access,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt;access()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - Existing tables can be opened in read-only mode. A table that is opened in read-only mode is not subjected to the automatic file reparation algorithm if it is later opened after a crash. Defaults to &lt;code&gt;read_write&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{access,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt;access()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -기존 테이블을 읽기 전용 모드로 열 수 있습니다. 읽기 전용 모드로 열린 테이블은 나중에 충돌 후 열린 경우 자동 파일 복원 알고리즘의 적용을받지 않습니다. 기본값은 &lt;code&gt;read_write&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b25840e04fe11366a2ebd3e0547df57c1396cbc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{access,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt;access()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The access mode.</source>
          <target state="translated">&lt;code&gt;{access,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-access&quot;&gt;access()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -액세스 모드.</target>
        </trans-unit>
        <trans-unit id="256381df77dde763e4e299fad3baa7f9b73c31bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{access_mode, Atom}&lt;/code&gt;. The access mode is by default the atom &lt;code&gt;read_write&lt;/code&gt; but it can also be set to the atom &lt;code&gt;read_only&lt;/code&gt;. If &lt;code&gt;AccessMode&lt;/code&gt; is set to &lt;code&gt;read_only&lt;/code&gt;, updates to the table cannot be performed.</source>
          <target state="translated">&lt;code&gt;{access_mode, Atom}&lt;/code&gt; . 액세스 모드는 기본적으로 atom &lt;code&gt;read_write&lt;/code&gt; 이지만 atom &lt;code&gt;read_only&lt;/code&gt; 로 설정할 수도 있습니다 . 경우 &lt;code&gt;AccessMode&lt;/code&gt; 가 설정되어 &lt;code&gt;read_only&lt;/code&gt; , 테이블에 대한 업데이트를 수행 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="04243e5d089ec02e4c347961534b65f3d8f7c290" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{allow_remote,Bool}&lt;/code&gt;, where &lt;code&gt;false&lt;/code&gt; means that all checkpoint retainers must be local. If a table does not reside locally, the checkpoint cannot be activated. &lt;code&gt;true&lt;/code&gt; allows checkpoint retainers to be allocated on any node. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{allow_remote,Bool}&lt;/code&gt; 여기서 &lt;code&gt;false&lt;/code&gt; 는 모든 체크 포인트 보유자가 로컬이어야 함을 의미합니다. 테이블이 로컬에 없으면 체크 포인트를 활성화 할 수 없습니다. &lt;code&gt;true&lt;/code&gt; 이면 체크 포인트 보유자가 모든 노드에 할당 될 수 있습니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="543654962db471db6f7243d0b62dc47b8aaac5e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{allow_remote,Bool}&lt;/code&gt;. &lt;code&gt;false&lt;/code&gt; means that all retainers must be local. The checkpoint cannot be activated if a table does not reside locally. &lt;code&gt;true&lt;/code&gt; allows retainers to be allocated on any node. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{allow_remote,Bool}&lt;/code&gt; . &lt;code&gt;false&lt;/code&gt; 는 모든 보유자가 로컬이어야 함을 의미합니다. 테이블이 로컬에 없으면 체크 포인트를 활성화 할 수 없습니다. &lt;code&gt;true&lt;/code&gt; 는 보유자가 모든 노드에 할당 될 수 있도록합니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="75d7892c93761213afa9e59fa9b02bd32612eee0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{atomic, ok}&lt;/code&gt; if successful</source>
          <target state="translated">&lt;code&gt;{atomic, ok}&lt;/code&gt; 성공하면 {atomic, ok}</target>
        </trans-unit>
        <trans-unit id="491fd1af42e5cc8a3f8520e687adb5bb791d2cb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{atomic, ok}&lt;/code&gt; if the function executes successfully</source>
          <target state="translated">&lt;code&gt;{atomic, ok}&lt;/code&gt; 함수가 성공적으로 실행되면 {atomic, ok}</target>
        </trans-unit>
        <trans-unit id="558142c760c908a7542988227c481799c7091023" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{attributes, AtomList}&lt;/code&gt; is a list of the attribute names for the records that are supposed to populate the table. Default is &lt;code&gt;[key, val]&lt;/code&gt;. The table must at least have one extra attribute in addition to the key.</source>
          <target state="translated">&lt;code&gt;{attributes, AtomList}&lt;/code&gt; 는 테이블을 채우는 레코드의 속성 이름 목록입니다. 기본값은 &lt;code&gt;[key, val]&lt;/code&gt; 입니다. 테이블에는 키 외에 하나 이상의 추가 속성이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="709157d32a33aed2347207976b657e2d2e2c7d31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{attributes, AtomList}&lt;/code&gt; is a list of the attribute names for the records that are supposed to populate the table. Default is the list &lt;code&gt;[key, val]&lt;/code&gt;. The table must at least have one extra attribute besides the key. When accessing single attributes in a record, it is not recommended to hard code the attribute names as atoms. Use the construct &lt;code&gt;record_info(fields, record_name)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;{attributes, AtomList}&lt;/code&gt; 는 테이블을 채우는 레코드의 속성 이름 목록입니다. 기본값은 목록 &lt;code&gt;[key, val]&lt;/code&gt; 입니다. 테이블에는 키 외에 하나 이상의 추가 속성이 있어야합니다. 레코드에서 단일 속성에 액세스 할 때는 속성 이름을 원자로 하드 코딩하지 않는 것이 좋습니다. 대신 &lt;code&gt;record_info(fields, record_name)&lt;/code&gt; 구문을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d08e36f233977c24bf344eaaf089c240159f904c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{auto_save,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt; auto_save()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The autosave interval.</source>
          <target state="translated">&lt;code&gt;{auto_save,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt; auto_save()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -자동 저장 간격.</target>
        </trans-unit>
        <trans-unit id="9ee5081f85fb7ca2e478a81775ae839b0ae9d3f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{auto_save,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt; auto_save()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The autosave interval. If the interval is an integer &lt;code&gt;Time&lt;/code&gt;, the table is flushed to disk whenever it is not accessed for &lt;code&gt;Time&lt;/code&gt; milliseconds. A table that has been flushed requires no reparation when reopened after an uncontrolled emulator halt. If the interval is the atom &lt;code&gt;infinity&lt;/code&gt;, autosave is disabled. Defaults to 180000 (3 minutes).</source>
          <target state="translated">&lt;code&gt;{auto_save,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt; auto_save()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -자동 저장 간격. 간격이 정수 &lt;code&gt;Time&lt;/code&gt; 인 경우 테이블은 &lt;code&gt;Time&lt;/code&gt; 밀리 초 동안 액세스되지 않을 때마다 디스크로 플러시됩니다 . 플러시 된 테이블은 제어되지 않은 에뮬레이터가 중지 된 후 다시 열릴 때 복구 할 필요가 없습니다. 간격이 원자 &lt;code&gt;infinity&lt;/code&gt; 이면 자동 저장이 비활성화됩니다. 기본값은 180000 (3 분)입니다.</target>
        </trans-unit>
        <trans-unit id="d6dbda269264f5f79b65fce67f92e25bfbfbf838" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{auto_save,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt;auto_save()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The autosave interval.</source>
          <target state="translated">&lt;code&gt;{auto_save,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt;auto_save()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -자동 저장 간격.</target>
        </trans-unit>
        <trans-unit id="f5e16fd2dfca0361e7fa7a851df10a1f624c6da8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{auto_save,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt;auto_save()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The autosave interval. If the interval is an integer &lt;code&gt;Time&lt;/code&gt;, the table is flushed to disk whenever it is not accessed for &lt;code&gt;Time&lt;/code&gt; milliseconds. A table that has been flushed requires no reparation when reopened after an uncontrolled emulator halt. If the interval is the atom &lt;code&gt;infinity&lt;/code&gt;, autosave is disabled. Defaults to 180000 (3 minutes).</source>
          <target state="translated">&lt;code&gt;{auto_save,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-auto_save&quot;&gt;auto_save()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -자동 저장 간격. 간격이 정수 &lt;code&gt;Time&lt;/code&gt; 인 경우 테이블은 &lt;code&gt;Time&lt;/code&gt; milliseconds 동안 액세스되지 않을 때마다 디스크로 플러시됩니다 . 비워진 테이블은 제어되지 않은 에뮬레이터가 정지 된 후 다시 열 때 배상 할 필요가 없습니다. 간격이 원자 &lt;code&gt;infinity&lt;/code&gt; 이면 자동 저장이 비활성화됩니다. 기본값은 180000 (3 분)입니다.</target>
        </trans-unit>
        <trans-unit id="67de751a35b068839d2e0911b7ba0813bfff2932" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{bad_term, FileName}&lt;/code&gt; - &lt;code&gt;io:read/2&lt;/code&gt; failed to read some term.</source>
          <target state="translated">&lt;code&gt;{bad_term, FileName}&lt;/code&gt; - &lt;code&gt;io:read/2&lt;/code&gt; 몇 가지 용어를 읽지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="d40543edd5ab817c48f268298c2ababbfa946dcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{badrpc, Reason}&lt;/code&gt; will be returned in the following circumstances:</source>
          <target state="translated">&lt;code&gt;{badrpc, Reason}&lt;/code&gt; 은 다음 상황에서 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c9f2ff7c0c12927bf8e9a20e16deb681fcdcfcdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{bchunk_format, binary()}&lt;/code&gt; - An opaque binary describing the format of the objects returned by &lt;code&gt;bchunk/2&lt;/code&gt;. The binary can be used as argument to &lt;code&gt;is_compatible_chunk_format/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{bchunk_format, binary()}&lt;/code&gt; - &lt;code&gt;bchunk/2&lt;/code&gt; 가 반환 한 객체의 형식을 설명하는 불투명 바이너리 입니다. 이진은 &lt;code&gt;is_compatible_chunk_format/2&lt;/code&gt; 의 인수로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ade7adb1a5cd475043f45f6ac30d9ac9943304e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{bound, Vars}&lt;/code&gt;, representing the variables that are bound in the subtree.</source>
          <target state="translated">&lt;code&gt;{bound, Vars}&lt;/code&gt; 하위 트리에 바인딩 된 변수를 나타내는 {bound, Vars}</target>
        </trans-unit>
        <trans-unit id="6f21cf30cb0c5ee92e8c76f07637e7269e212e50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{cache_all, Cache}&lt;/code&gt;, where &lt;code&gt;Cache&lt;/code&gt; is equal to &lt;code&gt;ets&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt; adds a &lt;code&gt;{cache,&amp;nbsp;Cache}&lt;/code&gt; option to every list expression of the query except tables and lists. Defaults to &lt;code&gt;{cache_all,&amp;nbsp;no}&lt;/code&gt;. Option &lt;code&gt;cache_all&lt;/code&gt; is equivalent to &lt;code&gt;{cache_all,&amp;nbsp;ets}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{cache_all, Cache}&lt;/code&gt; , &lt;code&gt;Cache&lt;/code&gt; 와 동일한 &lt;code&gt;ets&lt;/code&gt; 또는 &lt;code&gt;list&lt;/code&gt; 추가 &lt;code&gt;{cache,&amp;nbsp;Cache}&lt;/code&gt; 테이블 및 목록을 제외하고 쿼리의 모든 목록 발현에 옵션을 선택합니다. 기본값은 &lt;code&gt;{cache_all,&amp;nbsp;no}&lt;/code&gt; 입니다. 옵션 &lt;code&gt;cache_all&lt;/code&gt; 은 &lt;code&gt;{cache_all,&amp;nbsp;ets}&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="23c6babde67dcf358af9ed4cf2ed0b6ffd19b583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{capture, ValueSpec}/{capture, ValueSpec, Type}&lt;/code&gt; defines what to return from the function upon successful matching. The &lt;code&gt;capture&lt;/code&gt; tuple can contain both a value specification, telling which of the captured substrings are to be returned, and a type specification, telling how captured substrings are to be returned (as index tuples, lists, or binaries). The options are described in detail below.</source>
          <target state="translated">&lt;code&gt;{capture, ValueSpec}/{capture, ValueSpec, Type}&lt;/code&gt; 은 성공적인 일치시 함수에서 리턴 할 내용을 정의합니다. &lt;code&gt;capture&lt;/code&gt; 튜플 값 사양, 반환 할 수있는 캡처 한 문자열의 이야기, 그리고 캡처 한 문자열은 (인덱스 튜플,리스트, 또는 바이너리로) 반환되는 방법을 알려주는 형식 사양을 모두 포함 할 수 있습니다. 옵션은 아래에 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="058f13cf67604dfbb51081505fbab5ae1b798edf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{clear_tables, TabList}&lt;/code&gt;, where &lt;code&gt;TabList&lt;/code&gt; is a list of tables that is to be cleared before the records from the backup are inserted. That is, all records in the tables are deleted before the tables are restored. Schema information about the tables is not cleared or read from the backup.</source>
          <target state="translated">&lt;code&gt;{clear_tables, TabList}&lt;/code&gt; (여기서 &lt;code&gt;TabList&lt;/code&gt; 는 백업의 레코드가 삽입되기 전에 지워야하는 테이블의 목록입니다). 즉, 테이블의 모든 레코드는 테이블이 복원되기 전에 삭제됩니다. 테이블에 대한 스키마 정보는 백업에서 지우거나 읽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="09a7c945e3a39415308795addf3bdebe75b499da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{clear_tables, TableList}&lt;/code&gt;, where &lt;code&gt;TableList&lt;/code&gt; is a list of tables, which is to be cleared before the records from the backup are inserted. That is, all records in the tables are deleted before the tables are restored. Schema information about the tables is not cleared or read from the backup.</source>
          <target state="translated">&lt;code&gt;{clear_tables, TableList}&lt;/code&gt; (여기서 &lt;code&gt;TableList&lt;/code&gt; 는 테이블의 목록이며 백업의 레코드를 삽입하기 전에 지워야합니다.) 즉, 테이블의 모든 레코드는 테이블이 복원되기 전에 삭제됩니다. 테이블에 대한 스키마 정보는 백업에서 지우거나 읽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41021657e70894e4192de73dd05d3438df497291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{codestr, Str}&lt;/code&gt; - for &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; arguments passed as strings (example: &lt;code&gt;&quot;fun(_) -&amp;gt; return_trace() end&quot;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;{codestr, Str}&lt;/code&gt; - 문자열로 전달 된 &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; 인수의 경우 (예 : &lt;code&gt;&quot;fun(_) -&amp;gt; return_trace() end&quot;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ddcae99060b7859c45aaabfbbff12ad2a1d320f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{comment,Comment}&lt;/code&gt; prints a comment in the log for the test case.</source>
          <target state="translated">&lt;code&gt;{comment,Comment}&lt;/code&gt; 는 테스트 케이스에 대한 주석을 로그에 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="9c778356ff6d593bf767cf4845abaa4b6473fe25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{cyclicity, Cyclicity}&lt;/code&gt;, where &lt;code&gt;Cyclicity&lt;/code&gt; is &lt;code&gt;cyclic&lt;/code&gt; or &lt;code&gt;acyclic&lt;/code&gt;, according to the options given to &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{cyclicity, Cyclicity}&lt;/code&gt; (여기서 &lt;code&gt;Cyclicity&lt;/code&gt; 는 &lt;code&gt;cyclic&lt;/code&gt; 또는 &lt;code&gt;acyclic&lt;/code&gt; ) 이며 &lt;code&gt;new&lt;/code&gt; 에 지정된 옵션에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="2f6ba04727e1d0e2533eb38037a592fe109c38c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{default_op, Operation}&lt;/code&gt;, where &lt;code&gt;Operation&lt;/code&gt; is either of the operations &lt;code&gt;skip_tables&lt;/code&gt;, &lt;code&gt;clear_tables&lt;/code&gt;, &lt;code&gt;keep_tables&lt;/code&gt;, or &lt;code&gt;recreate_tables&lt;/code&gt;. The default operation specifies which operation that is to be used on tables from the backup that is not specified in any of the mentioned lists. If omitted, operation &lt;code&gt;clear_tables&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;{default_op, Operation}&lt;/code&gt; . 여기서 &lt;code&gt;Operation&lt;/code&gt; 은 작업 &lt;code&gt;skip_tables&lt;/code&gt; , &lt;code&gt;clear_tables&lt;/code&gt; , &lt;code&gt;keep_tables&lt;/code&gt; 또는 &lt;code&gt;recreate_tables&lt;/code&gt; 중 하나입니다 . 기본 조작은 언급 된 목록에 지정되지 않은 백업의 테이블에서 사용될 조작을 지정합니다. 생략하면 &lt;code&gt;clear_tables&lt;/code&gt; 작업 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="439f11bb81ab22b6ff33534bd040c39bd3fbf26d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{default_op, Operation}&lt;/code&gt;, where &lt;code&gt;Operation&lt;/code&gt; is one of the operations &lt;code&gt;skip_tables&lt;/code&gt;, &lt;code&gt;clear_tables&lt;/code&gt;, &lt;code&gt;keep_tables&lt;/code&gt;, or &lt;code&gt;recreate_tables&lt;/code&gt;. The default operation specifies which operation is to be used on tables from the backup that are not specified in any of the previous lists. If omitted, the operation &lt;code&gt;clear_tables&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;{default_op, Operation}&lt;/code&gt; . 여기서 &lt;code&gt;Operation&lt;/code&gt; 은 작업 &lt;code&gt;skip_tables&lt;/code&gt; , &lt;code&gt;clear_tables&lt;/code&gt; , &lt;code&gt;keep_tables&lt;/code&gt; 또는 &lt;code&gt;recreate_tables&lt;/code&gt; 중 하나입니다 . 기본 조작은 이전 목록에 지정되지 않은 백업의 테이블에서 사용할 조작을 지정합니다. 생략하면 &lt;code&gt;clear_tables&lt;/code&gt; 작업 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8aee08a84e0c2a665df3ef43050a44bfe28b647e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{disc_copies, NodeList}&lt;/code&gt;, where &lt;code&gt;NodeList&lt;/code&gt; is a list of the nodes where this table is to reside on disc.</source>
          <target state="translated">&lt;code&gt;{disc_copies, NodeList}&lt;/code&gt; 여기서 &lt;code&gt;NodeList&lt;/code&gt; 는이 테이블이 디스크에 상주 할 노드의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="74887bcd48a16968b059dfd44f0ae8dfb337f16d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{disc_copies, Nodelist}&lt;/code&gt;, where &lt;code&gt;Nodelist&lt;/code&gt; is a list of the nodes where this table is supposed to have disc copies. If a table replica is of type &lt;code&gt;disc_copies&lt;/code&gt;, all write operations on this particular replica of the table are written to disc and to the RAM copy of the table.</source>
          <target state="translated">&lt;code&gt;{disc_copies, Nodelist}&lt;/code&gt; . 여기서 &lt;code&gt;Nodelist&lt;/code&gt; 는이 테이블에 디스크 사본이있는 노드의 목록입니다. 테이블 복제본이 &lt;code&gt;disc_copies&lt;/code&gt; 유형 인 경우 테이블의이 특정 복제본에 대한 모든 쓰기 조작이 디스크 및 테이블의 RAM 사본에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="fe337b4b8e9025c8055145973cdc5c502eae324f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{disc_only_copies, NodeList}&lt;/code&gt;. These table replicas are stored on disc only and are therefore slower to access. However, a disc-only replica consumes less memory than a table replica of the other two storage types.</source>
          <target state="translated">&lt;code&gt;{disc_only_copies, NodeList}&lt;/code&gt; . 이러한 테이블 복제본은 디스크에만 저장되므로 액세스 속도가 느립니다. 그러나 디스크 전용 복제본은 다른 두 가지 스토리지 유형의 테이블 복제본보다 적은 메모리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="603ef39723034c90e7a6f893a837cadc3f270784" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{disc_only_copies, Nodelist}&lt;/code&gt;, where &lt;code&gt;Nodelist&lt;/code&gt; is a list of the nodes where this table is supposed to have &lt;code&gt;disc_only_copies&lt;/code&gt;. A disc only table replica is kept on disc only and unlike the other replica types, the contents of the replica do not reside in RAM. These replicas are considerably slower than replicas held in RAM.</source>
          <target state="translated">&lt;code&gt;{disc_only_copies, Nodelist}&lt;/code&gt; (여기서 &lt;code&gt;Nodelist&lt;/code&gt; 는이 테이블에 &lt;code&gt;disc_only_copies&lt;/code&gt; 가있는 노드의 목록입니다) . 디스크 전용 테이블 복제본은 디스크에만 보관되며 다른 복제본 유형과 달리 복제본의 내용은 RAM에 없습니다. 이 복제본은 RAM에 보유 된 복제본보다 상당히 느립니다.</target>
        </trans-unit>
        <trans-unit id="c4038658dfedacbebbb43ce13a2cb3105e6b6181" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{done, Result, RestChars}&lt;/code&gt; when enough data is read. In this case &lt;code&gt;Result&lt;/code&gt; is sent to the client and &lt;code&gt;RestChars&lt;/code&gt; is kept in the I/O server as a buffer for later input.</source>
          <target state="translated">&lt;code&gt;{done, Result, RestChars}&lt;/code&gt; 충분한 데이터를 읽을 때 {done, Result, RestChars} . 이 경우 &lt;code&gt;Result&lt;/code&gt; 가 클라이언트로 전송되고 &lt;code&gt;RestChars&lt;/code&gt; 는 나중에 입력 할 수 있도록 버퍼로 I / O 서버에 보관됩니다.</target>
        </trans-unit>
        <trans-unit id="5be2ad09ee53b2e5cfec496d377fadb2ac7303c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{drop, N}&lt;/code&gt; if IP tracer is used (see &lt;code&gt;dbg:trace_port/2&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;{drop, N}&lt;/code&gt; IP 추적 프로그램을 사용하는 경우 {drop, N} ( &lt;code&gt;dbg:trace_port/2&lt;/code&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="b3c7334d9b980c3e17dec4e1eeca3188027f3c41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{encoding, unicode | latin1}&lt;/code&gt; is supported by both the standard shell (&lt;code&gt;group.erl&lt;/code&gt; including &lt;code&gt;werl&lt;/code&gt; on Windows), the 'oldshell' (&lt;code&gt;user.erl&lt;/code&gt;), and the file I/O servers.</source>
          <target state="translated">&lt;code&gt;{encoding, unicode | latin1}&lt;/code&gt; 은 표준 쉘 ( Windows의 &lt;code&gt;group.erl&lt;/code&gt; 포함한 &lt;code&gt;werl&lt;/code&gt; ) 인 'oldshell'( &lt;code&gt;user.erl&lt;/code&gt; ) 및 파일 I / O 서버 모두에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="17d0db6dbc541253b1e540aec7e65b6895d09c3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{encoding, utf8}&lt;/code&gt; has the same effect as &lt;code&gt;{encoding, unicode}&lt;/code&gt; on files.</source>
          <target state="translated">&lt;code&gt;{encoding, utf8}&lt;/code&gt; 은 다음과 같은 효과가 있습니다 &lt;code&gt;{encoding, unicode}&lt;/code&gt; 파일에 대한 {encoding, unicode} .</target>
        </trans-unit>
        <trans-unit id="97910211bcf2b1dc14a5ea5d92f742e0cd7101c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{env, Vars}&lt;/code&gt;, representing the input environment of the subtree.</source>
          <target state="translated">&lt;code&gt;{env, Vars}&lt;/code&gt; 하위 트리의 입력 환경을 나타내는</target>
        </trans-unit>
        <trans-unit id="a4d9dc7a846dba951fb97ab94ef5acb2de59918d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{eof,LOCATION}&lt;/code&gt;, denoting an end-of-stream encountered before a complete form had been parsed. The word &lt;code&gt;LOCATION&lt;/code&gt; represents a location, and denotes the number of the last line, and possibly the number of the last column on that line, in the source file. See &lt;code&gt;erl_anno(3)&lt;/code&gt; for details.</source>
          <target state="translated">&lt;code&gt;{eof,LOCATION}&lt;/code&gt; , 완전한 양식이 구문 분석되기 전에 발생한 스트림 끝을 나타냅니다. &lt;code&gt;LOCATION&lt;/code&gt; 이라는 단어 는 위치를 나타내며 소스 파일에서 마지막 줄의 번호와 해당 줄의 마지막 열 번호를 나타냅니다. 자세한 내용은 &lt;code&gt;erl_anno(3)&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8d82ffb735ce5cce92124613e85e46968f466588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{eof,LOCATION}&lt;/code&gt;, denoting an end-of-stream encountered before a complete form had been parsed. The word &lt;code&gt;LOCATION&lt;/code&gt; represents an integer, and denotes the number of the last line in the source file.</source>
          <target state="translated">&lt;code&gt;{eof,LOCATION}&lt;/code&gt; 은 완전한 양식을 구문 분석하기 전에 발생하는 스트림 끝을 나타냅니다. 단어 &lt;code&gt;LOCATION&lt;/code&gt; 는 정수를 나타내며 소스 파일의 마지막 줄 번호를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d517e0e338452077fe358fb37851f3a9dfe56068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, Reason}&lt;/code&gt; = transfer failed.</source>
          <target state="translated">&lt;code&gt;{error, Reason}&lt;/code&gt; = 전송이 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="c91554869907c5b7202c13894f459e33f47242e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, Reason}&lt;/code&gt; if an error occurred when finding or evaluating the script</source>
          <target state="translated">&lt;code&gt;{error, Reason}&lt;/code&gt; 스크립트를 찾거나 평가할 때 오류가 발생한 경우</target>
        </trans-unit>
        <trans-unit id="4a79489a6baf49c39e888ffb197b871bfd5f5580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, already_started, NodeName}&lt;/code&gt; if the node with the specified name is already started on a specified host.</source>
          <target state="translated">&lt;code&gt;{error, already_started, NodeName}&lt;/code&gt; 지정된 이름의 노드가 지정된 호스트에서 이미 시작된 경우 .</target>
        </trans-unit>
        <trans-unit id="8b06ddf348b8496d1396a127437e70f164243c87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, closed}&lt;/code&gt; if &lt;code&gt;ListenSocket&lt;/code&gt; is closed</source>
          <target state="translated">&lt;code&gt;{error, closed}&lt;/code&gt; &lt;code&gt;ListenSocket&lt;/code&gt; 인 경우 {error, closed} 이 닫힌</target>
        </trans-unit>
        <trans-unit id="59004474b720e6dadcb6e0794d09525f3c0a9677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, not_alive, NodeName}&lt;/code&gt; if the node on which &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;ct_slave:start/3&lt;/a&gt;&lt;/code&gt; is called, is not alive. Notice that &lt;code&gt;NodeName&lt;/code&gt; is the name of the current node in this case.</source>
          <target state="translated">&lt;code&gt;{error, not_alive, NodeName}&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;ct_slave:start/3&lt;/a&gt;&lt;/code&gt; 가 호출 된 노드가 존재하지 않으면 {error, not_alive, NodeName} . &lt;code&gt;NodeName&lt;/code&gt; 에 유의하십시오. 이 경우 현재 노드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="4b3164d5b7b3eef93a67b314572e42b89115695f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, request}&lt;/code&gt; must be returned if the request is not recognized:</source>
          <target state="translated">&lt;code&gt;{error, request}&lt;/code&gt; 요청이 인식되지 않으면 를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="1d2c894c7d8bfc091d3716c83a64be3d3d34828a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, started_not_connected, NodeName}&lt;/code&gt; if the node is started, but not connected to the master node.</source>
          <target state="translated">&lt;code&gt;{error, started_not_connected, NodeName}&lt;/code&gt; 노드가 시작되었지만 마스터 노드에 연결되지 않은 경우</target>
        </trans-unit>
        <trans-unit id="a56a0cf6cc42f97987aef26775a0c84d1908b89c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, system_limit}&lt;/code&gt; if all available ports in the Erlang emulator are in use</source>
          <target state="translated">&lt;code&gt;{error, system_limit}&lt;/code&gt; Erlang 에뮬레이터에서 사용 가능한 모든 포트가 사용중인 경우</target>
        </trans-unit>
        <trans-unit id="6a51648378a64c49a67e0097e1bee7ecbe71eb05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, timeout}&lt;/code&gt; if no connection is established within the specified time</source>
          <target state="translated">&lt;code&gt;{error, timeout}&lt;/code&gt; 지정된 시간 내에 연결이 설정되지 않은 경우</target>
        </trans-unit>
        <trans-unit id="55923bc05b6e7f69a3d0ea4630f2b2759c62eef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, {Error, ErrorDetails}}&lt;/code&gt; - if the callback module fails to proceed with the specified configuration parameters.</source>
          <target state="translated">&lt;code&gt;{error, {Error, ErrorDetails}}&lt;/code&gt; -콜백 모듈이 지정된 구성 매개 변수로 진행하지 못하는 경우</target>
        </trans-unit>
        <trans-unit id="0a17ec2aabff13a6e5f93cd42dd7eb5e33ee3a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, {nofile, FileName}}&lt;/code&gt; - there is no file with the specified name in the current directory.</source>
          <target state="translated">&lt;code&gt;{error, {nofile, FileName}}&lt;/code&gt; -현재 디렉토리에 지정된 이름의 파일이 없습니다.</target>
        </trans-unit>
        <trans-unit id="65e74983593dd76aa96d9aff6b27a0cd3aa84c2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error, {wrong_config, ConfigString}}&lt;/code&gt; - the configuration string is wrong.</source>
          <target state="translated">&lt;code&gt;{error, {wrong_config, ConfigString}}&lt;/code&gt; -구성 문자열이 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="0121267dfde3f01426807503e7723e7c06a7674d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error,BeamFile}&lt;/code&gt; is returned if the compiled code can not be loaded on the node.</source>
          <target state="translated">&lt;code&gt;{error,BeamFile}&lt;/code&gt; 컴파일 된 코드를 노드에로드 할 수 없으면 {error, BeamFile} 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="cf20496e811182d5cde10e9084ced7ac1b6b2a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{error,BeamFile}&lt;/code&gt; is returned if the compiled code cannot be loaded on the node.</source>
          <target state="translated">&lt;code&gt;{error,BeamFile}&lt;/code&gt; 컴파일 된 코드를 노드에로드 할 수없는 경우 {error, BeamFile} 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c9809d2085b7478d4a9fe04d2bbc5ff2ab8b7b23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{estimated_no_objects,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt; no_slots()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - Equivalent to option &lt;code&gt;min_no_slots&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{estimated_no_objects,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt; no_slots()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; - &lt;code&gt;min_no_slots&lt;/code&gt; 옵션과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="aa83438e6d1a25a32b408a7beba77b7cd4df3e6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{estimated_no_objects,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt;no_slots()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - Equivalent to option &lt;code&gt;min_no_slots&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{estimated_no_objects,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt;no_slots()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -옵션 &lt;code&gt;min_no_slots&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="200fce4da7b83757332ce6829614f3ac02939de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{failover,Node}&lt;/code&gt; if the application is distributed and started at the current node because of a failover from &lt;code&gt;Node&lt;/code&gt;, and the application specification key &lt;code&gt;start_phases /= undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{failover,Node}&lt;/code&gt; 애플리케이션이 분산하기 때문에 장애로부터 현재 노드에서 시작되는 경우 &lt;code&gt;Node&lt;/code&gt; 및 애플리케이션 사양 키 &lt;code&gt;start_phases /= undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b30125af0706579a3e7fa51fda8d0e3c2b5b1ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{false, NewState:any()}&lt;/code&gt; if the user or password is invalid</source>
          <target state="translated">&lt;code&gt;{false, NewState:any()}&lt;/code&gt; 사용자 또는 비밀번호가 유효하지 않은 경우</target>
        </trans-unit>
        <trans-unit id="5762d8052930e72e368baa33f643ab2140ea752b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{file,&lt;/code&gt;&lt;code&gt; file:name()&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The name of the file to be opened. Defaults to the table name.</source>
          <target state="translated">&lt;code&gt;{file,&lt;/code&gt; &lt;code&gt; file:name()&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -열 파일의 이름입니다. 테이블 이름이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="61254af034595b7987534813de1b2e088c3e46d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{file_error, FileName, file:posix()}&lt;/code&gt; - For an explanation of &lt;code&gt;file:posix()&lt;/code&gt;, see &lt;code&gt;file(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{file_error, FileName, file:posix()}&lt;/code&gt; -에 대한 설명 &lt;code&gt;file:posix()&lt;/code&gt; , 참조 &lt;code&gt;file(3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d330e6d681a7698aeede8f6a5a2d388d0dea2059" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{file_size, integer() &amp;gt;= 0}}&lt;/code&gt; - The file size, in bytes.</source>
          <target state="translated">&lt;code&gt;{file_size, integer() &amp;gt;= 0}}&lt;/code&gt; -파일 크기 (바이트).</target>
        </trans-unit>
        <trans-unit id="d682226720290e3b12db5f8b8a41cb8bfa06e623" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{filename,&lt;/code&gt;&lt;code&gt; file:name()&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The name of the file where objects are stored.</source>
          <target state="translated">&lt;code&gt;{filename,&lt;/code&gt; &lt;code&gt; file:name()&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -객체가 저장된 파일의 이름</target>
        </trans-unit>
        <trans-unit id="666c55195e1ac58921fe07e4247412bd27c34b60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{format, Format}&lt;/code&gt; - Specifies the format of the objects returned by function &lt;code&gt;InitFun&lt;/code&gt;. If &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;term&lt;/code&gt; (the default), &lt;code&gt;InitFun&lt;/code&gt; is assumed to return a list of tuples. If &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;bchunk&lt;/code&gt;, &lt;code&gt;InitFun&lt;/code&gt; is assumed to return &lt;code&gt;Data&lt;/code&gt; as returned by &lt;code&gt;&lt;a href=&quot;#bchunk-2&quot;&gt;bchunk/2&lt;/a&gt;&lt;/code&gt;. This option overrides option &lt;code&gt;min_no_slots&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{format, Format}&lt;/code&gt; &lt;code&gt;InitFun&lt;/code&gt; 함수가 리턴 한 오브젝트의 형식을 지정합니다 . 경우 &lt;code&gt;Format&lt;/code&gt; 인 &lt;code&gt;term&lt;/code&gt; (기본값), &lt;code&gt;InitFun&lt;/code&gt; 는 튜플의 목록을 반환 가정한다. 경우 &lt;code&gt;Format&lt;/code&gt; 입니다 &lt;code&gt;bchunk&lt;/code&gt; , &lt;code&gt;InitFun&lt;/code&gt; 는 반환 가정 &lt;code&gt;Data&lt;/code&gt; 에 의해 반환 &lt;code&gt;&lt;a href=&quot;#bchunk-2&quot;&gt;bchunk/2&lt;/a&gt;&lt;/code&gt; . 이 옵션은 &lt;code&gt;min_no_slots&lt;/code&gt; 옵션을 대체합니다. 합니다.</target>
        </trans-unit>
        <trans-unit id="0c96e602ae8d0bde4d2be0765fd1bdbe0116dee7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{free, Vars}&lt;/code&gt;, representing the free variables in the subtree.</source>
          <target state="translated">&lt;code&gt;{free, Vars}&lt;/code&gt; 하위 트리에서 사용 가능한 변수를 나타내는 {free, Vars}</target>
        </trans-unit>
        <trans-unit id="8458cd58e8f0972318e7f564c11dcee8535e5156" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{genErr, Column}&lt;/code&gt; where &lt;code&gt;Column&lt;/code&gt; denotes the column that caused the error. &lt;code&gt;Column&lt;/code&gt; must be one of the columns in the &lt;code&gt;Cols&lt;/code&gt; list. Note that this should be an internal processing error, e.g. a caused by a programing fault somewhere. If some column does not exist, you must return the next accessible element (or &lt;code&gt;endOfTable&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;{genErr, Column}&lt;/code&gt; 여기서 &lt;code&gt;Column&lt;/code&gt; 은 오류를 일으킨 열을 나타냅니다. &lt;code&gt;Column&lt;/code&gt; 은 &lt;code&gt;Cols&lt;/code&gt; 목록 의 열 중 하나 여야 합니다. 이는 내부 처리 오류 여야합니다 (예 : 프로그래밍 오류로 인해 발생). 일부 열이 없으면 다음 액세스 가능한 요소 (또는 &lt;code&gt;endOfTable&lt;/code&gt; )를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5bb5448db50d1017d9b3a7fbc58a1a1e7a674abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{global,GlobalName}&lt;/code&gt;, if the &lt;code&gt;gen_server&lt;/code&gt; process is globally registered</source>
          <target state="translated">&lt;code&gt;{global,GlobalName}&lt;/code&gt; &lt;code&gt;gen_server&lt;/code&gt; 프로세스가 전체적으로 등록 된 경우 {global, GlobalName}</target>
        </trans-unit>
        <trans-unit id="898383d1bed9531809697ca05b4b67bc8fb4fe81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{global,GlobalName}&lt;/code&gt;, if the event manager is globally registered</source>
          <target state="translated">&lt;code&gt;{global,GlobalName}&lt;/code&gt; 이벤트 관리자가 글로벌로 등록 된 경우 {global, GlobalName}</target>
        </trans-unit>
        <trans-unit id="be7b3294d93fe45c4ec2a39e21a03192a1daa55f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{global,Name}&lt;/code&gt;, if the supervisor is globally registered</source>
          <target state="translated">&lt;code&gt;{global,Name}&lt;/code&gt; 수퍼바이저가 전체적으로 등록 된 경우 {global, Name}</target>
        </trans-unit>
        <trans-unit id="2e415dbfbb7c60fef1e32c9683d6b971362579ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{hash, Hash}&lt;/code&gt; - Describes which BIF is used to calculate the hash values of the objects stored in the Dets table. Possible values of &lt;code&gt;Hash&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{hash, Hash}&lt;/code&gt; -Dets 테이블에 저장된 오브젝트의 해시 값을 계산하는 데 사용되는 BIF를 설명합니다. &lt;code&gt;Hash&lt;/code&gt; 가능한 값 :</target>
        </trans-unit>
        <trans-unit id="a374ab9eafc23e09b6bb64b12ce7c745aa9b59ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{index, AttributeNameList}&lt;/code&gt;, where &lt;code&gt;AttributeNameList&lt;/code&gt; is a list of atoms specifying the names of the attributes &lt;code&gt;Mnesia&lt;/code&gt; is to build and maintain. An index table exists for every element in the list. The first field of a &lt;code&gt;Mnesia&lt;/code&gt; record is the key and thus need no extra index.</source>
          <target state="translated">&lt;code&gt;{index, AttributeNameList}&lt;/code&gt; . 여기서 &lt;code&gt;AttributeNameList&lt;/code&gt; 는 &lt;code&gt;Mnesia&lt;/code&gt; 가 빌드하고 유지 보수 할 속성의 이름을 지정하는 원자 목록입니다 . 목록의 모든 요소에 대해 인덱스 테이블이 존재합니다. &lt;code&gt;Mnesia&lt;/code&gt; 레코드 의 첫 번째 필드가 핵심이므로 추가 인덱스가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="37ef0473b803e1cf4873aa4ba9ea84d5d68d8a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{index, Intlist}&lt;/code&gt;, where &lt;code&gt;Intlist&lt;/code&gt; is a list of attribute names (atoms) or record fields for which Mnesia is to build and maintain an extra index table. The &lt;code&gt;qlc&lt;/code&gt; query compiler &lt;strong&gt;may&lt;/strong&gt; be able to optimize queries if there are indexes available.</source>
          <target state="translated">&lt;code&gt;{index, Intlist}&lt;/code&gt; (여기서 &lt;code&gt;Intlist&lt;/code&gt; 는 Mnesia가 추가 인덱스 테이블을 빌드하고 유지 보수 할 속성 이름 (원자) 또는 레코드 필드의 목록입니다. &lt;code&gt;qlc&lt;/code&gt; 쿼리 컴파일러는 &lt;strong&gt;수&lt;/strong&gt; 사용 가능한 인덱스가있는 경우 최적화 쿼리 수.</target>
        </trans-unit>
        <trans-unit id="46beb7ad494db8c5245b1cc9f5e852fbc349de51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{join,&amp;nbsp;lookup}&lt;/code&gt; invokes the lookup join method.</source>
          <target state="translated">&lt;code&gt;{join,&amp;nbsp;lookup}&lt;/code&gt; 은 lookup join 메소드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="05d1b0b67c54e005285e6d55489a5ca39a5ce417" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{join,&amp;nbsp;merge}&lt;/code&gt; invokes the merge join method.</source>
          <target state="translated">&lt;code&gt;{join,&amp;nbsp;merge}&lt;/code&gt; 는 merge join 메소드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="de258ee707f364e898d12e21f0faba7c3d3edae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{join,&amp;nbsp;nested_loop}&lt;/code&gt; invokes the method of matching every pair of objects from two handles. This method is mostly very slow.</source>
          <target state="translated">&lt;code&gt;{join,&amp;nbsp;nested_loop}&lt;/code&gt; 는 두 핸들에서 모든 오브젝트 쌍을 일치시키는 메소드를 호출합니다. 이 방법은 대부분 매우 느립니다.</target>
        </trans-unit>
        <trans-unit id="c6445e46b5a4c24aba46879d1ed574bc4afce85a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{keep_tables, TabList}&lt;/code&gt;, where &lt;code&gt;TabList&lt;/code&gt; is a list of tables that is not to be cleared before the records from the backup are inserted. That is, the records in the backup are added to the records in the table. Schema information about the tables is not cleared or read from the backup.</source>
          <target state="translated">&lt;code&gt;{keep_tables, TabList}&lt;/code&gt; (여기서 &lt;code&gt;TabList&lt;/code&gt; 는 백업의 레코드가 삽입되기 전에 지워지지 않아야하는 테이블의 목록입니다). 즉, 백업의 레코드가 테이블의 레코드에 추가됩니다. 테이블에 대한 스키마 정보는 백업에서 지우거나 읽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="59362df85e2f4b8376c9a00771535ddc7c238af0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{keep_tables, TableList}&lt;/code&gt;, where &lt;code&gt;TableList&lt;/code&gt; is a list of tables, which is not to be cleared before the records from the backup are inserted. That is, the records in the backup are added to the records in the table. Schema information about the tables is not cleared or read from the backup.</source>
          <target state="translated">&lt;code&gt;{keep_tables, TableList}&lt;/code&gt; (여기서 &lt;code&gt;TableList&lt;/code&gt; 는 테이블의 목록이며 백업의 레코드가 삽입되기 전에 지워지지 않아야합니다.) 즉, 백업의 레코드가 테이블의 레코드에 추가됩니다. 테이블에 대한 스키마 정보는 백업에서 지우거나 읽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5d8869b35c3d2930a66acebdc885a312bc8379fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{keypos,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt; keypos()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The key position.</source>
          <target state="translated">&lt;code&gt;{keypos,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt; keypos()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -키 위치.</target>
        </trans-unit>
        <trans-unit id="8040ff2e41818a9f737dc42f9f96ca5e706f77ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{keypos,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt; keypos()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The position of the element of each object to be used as key. Defaults to 1. The ability to explicitly state the key position is most convenient when we want to store Erlang records in which the first position of the record is the name of the record type.</source>
          <target state="translated">&lt;code&gt;{keypos,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt; keypos()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -키로 사용할 각 객체의 요소 위치입니다. 기본값은 1입니다. 키 위치를 명시 적으로 나타내는 기능은 레코드의 첫 번째 위치가 레코드 유형의 이름 인 Erlang 레코드를 저장할 때 가장 편리합니다.</target>
        </trans-unit>
        <trans-unit id="4f8a88b48bda64b8159607e75426a57b42af3aed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{keypos,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt;keypos()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The key position.</source>
          <target state="translated">&lt;code&gt;{keypos,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt;keypos()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -키 위치</target>
        </trans-unit>
        <trans-unit id="ec5f91f331ed2e5e7166be88b1a864aa8121c489" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{keypos,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt;keypos()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The position of the element of each object to be used as key. Defaults to 1. The ability to explicitly state the key position is most convenient when we want to store Erlang records in which the first position of the record is the name of the record type.</source>
          <target state="translated">&lt;code&gt;{keypos,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-keypos&quot;&gt;keypos()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -키로 사용될 각 객체의 요소 위치. 기본적으로 키 위치를 명시 적으로 나타내는 기능은 레코드의 첫 번째 위치가 레코드 유형의 이름 인 Erlang 레코드를 저장하려는 경우 가장 편리합니다.</target>
        </trans-unit>
        <trans-unit id="e88ca11648226ceeacd78c7d23ae7dc74e9a92d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{load_order, Integer}&lt;/code&gt;. The load order priority is by default &lt;code&gt;0&lt;/code&gt; (zero) but can be set to any integer. The tables with the highest load order priority are loaded first at startup.</source>
          <target state="translated">&lt;code&gt;{load_order, Integer}&lt;/code&gt; . 로드 순서 우선 순위는 기본적으로 &lt;code&gt;0&lt;/code&gt; (영)이지만 임의의 정수로 설정할 수 있습니다. 로드 순서 우선 순위가 가장 높은 테이블이 시작시 먼저로드됩니다.</target>
        </trans-unit>
        <trans-unit id="45cabf9a380f9d7e33d05677673b256557b6baf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{local_content, Bool}&lt;/code&gt;, where &lt;code&gt;Bool&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{local_content, Bool}&lt;/code&gt; , &lt;code&gt;Bool&lt;/code&gt; 있다 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="81d7215c5e595472b6ed53c65cb274e4046851a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{local_content, true}&lt;/code&gt;. When an application needs a table whose contents is to be locally unique on each node, &lt;code&gt;local_content&lt;/code&gt; tables can be used. The name of the table is known to all &lt;code&gt;Mnesia&lt;/code&gt; nodes, but its contents is unique for each node. Access to this type of table must be done locally.</source>
          <target state="translated">&lt;code&gt;{local_content, true}&lt;/code&gt; . 응용 프로그램이 각 노드에서 해당 내용이 로컬로 고유 한 테이블이 필요한 경우 &lt;code&gt;local_content&lt;/code&gt; 테이블을 사용할 수 있습니다. 테이블 이름은 모든 &lt;code&gt;Mnesia&lt;/code&gt; 노드에 알려져 있지만 그 내용은 각 노드마다 고유합니다. 이 유형의 테이블에 대한 액세스는 로컬로 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="2ad5f430af8a7ecc9f27e3ebd9e41b01243f6480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{lock, Lock}&lt;/code&gt;, where &lt;code&gt;lock&lt;/code&gt; can be &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt;. Default is &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{lock, Lock}&lt;/code&gt; , 여기서 &lt;code&gt;lock&lt;/code&gt; 을 &lt;code&gt;read&lt;/code&gt; 거나 &lt;code&gt;write&lt;/code&gt; 수 있습니다 . 기본값은 &lt;code&gt;read&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9199b07800b6b28d94384629284800525b274b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{majority, Flag}&lt;/code&gt;, where &lt;code&gt;Flag&lt;/code&gt; must be a boolean. If &lt;code&gt;true&lt;/code&gt;, any (non-dirty) update to the table is aborted, unless a majority of the table replicas are available for the commit. When used on a fragmented table, all fragments are given the same the same majority setting.</source>
          <target state="translated">&lt;code&gt;{majority, Flag}&lt;/code&gt; . 여기서 &lt;code&gt;Flag&lt;/code&gt; 는 부울이어야합니다. 경우 &lt;code&gt;true&lt;/code&gt; 테이블 복제본의 대부분이 커밋 사용할 수 있습니다하지 않는 한, 테이블에 대한 (비 오염) 업데이트가 중단됩니다. 조각화 된 테이블에서 사용될 때 모든 조각에는 동일한 다수 설정이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="4d454df022f12f6bf2e6223a2b2920b124ad9bfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{max,MaxTabs}&lt;/code&gt;, where &lt;code&gt;MaxTabs&lt;/code&gt; is a list of tables that are to be included in the checkpoint. Default is &lt;code&gt;[]&lt;/code&gt; (empty list). For these tables, the redundancy is maximized. The old content of the table is retained in the checkpoint retainer when the main table is updated by the applications. The checkpoint is more fault tolerant if the tables have several replicas. When new replicas are added by the schema manipulation function &lt;code&gt;&lt;a href=&quot;mnesia#add_table_copy-3&quot;&gt;mnesia:add_table_copy/3&lt;/a&gt;&lt;/code&gt; it also attaches a local checkpoint retainer.</source>
          <target state="translated">&lt;code&gt;{max,MaxTabs}&lt;/code&gt; (여기서 &lt;code&gt;MaxTabs&lt;/code&gt; 는 체크 포인트에 포함될 테이블의 목록입니다). 기본값은 &lt;code&gt;[]&lt;/code&gt; (빈 목록)입니다. 이러한 테이블의 경우 중복성이 최대화됩니다. 기본 테이블이 애플리케이션에 의해 업데이트 될 때 테이블의 이전 컨텐츠는 체크 포인트 보유자에 보유됩니다. 테이블에 여러 개의 복제본이있는 경우 검사 점은 내결함성이 더 높습니다. 스키마 조작 함수 &lt;code&gt;&lt;a href=&quot;mnesia#add_table_copy-3&quot;&gt;mnesia:add_table_copy/3&lt;/a&gt;&lt;/code&gt; 에 의해 새 복제본이 추가되면 로컬 체크 포인트 보유자도 첨부됩니다.</target>
        </trans-unit>
        <trans-unit id="45e2bcb2dca4f96ff77291704164fd2b00b283a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{max,MaxTabs}&lt;/code&gt;. &lt;code&gt;MaxTabs&lt;/code&gt; is a list of tables that are to be included in the checkpoint. Default is &lt;code&gt;[]&lt;/code&gt;. For these tables, the redundancy is maximized and checkpoint information is retained together with all replicas. The checkpoint becomes more fault tolerant if the tables have several replicas. When a new replica is added by the schema manipulation function &lt;code&gt;mnesia:add_table_copy/3&lt;/code&gt;, a retainer is also attached automatically.</source>
          <target state="translated">&lt;code&gt;{max,MaxTabs}&lt;/code&gt; . &lt;code&gt;MaxTabs&lt;/code&gt; 는 검사 점에 포함될 테이블 목록입니다. 기본값은 &lt;code&gt;[]&lt;/code&gt; 입니다. 이러한 테이블의 경우 중복성이 최대화되고 검사 점 정보가 모든 복제본과 함께 유지됩니다. 테이블에 여러 개의 복제본이있는 경우 검사 점이 더 내결함성이 있습니다. 스키마 조작 함수 &lt;code&gt;mnesia:add_table_copy/3&lt;/code&gt; 에 의해 새 복제본이 추가되면 리테이너도 자동으로 첨부됩니다.</target>
        </trans-unit>
        <trans-unit id="1c39c329d5d104a42438aae35f735b622f9bbbda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{max_no_slots,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt; no_slots()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The maximum number of slots to be used. Defaults to 32 M, which is the maximal value. Notice that a higher value can increase the table fragmentation, and a smaller value can decrease the fragmentation, at the expense of execution time.</source>
          <target state="translated">&lt;code&gt;{max_no_slots,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt; no_slots()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -사용할 최대 슬롯 수입니다. 기본값은 최대 값 인 32M입니다. 값이 높을수록 테이블 조각화가 증가하고 값이 작을수록 실행 시간이 줄어드는 대신 조각화가 감소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b6884f951c795e82aa17b73c9ff84c003d6dec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{max_no_slots,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt;no_slots()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The maximum number of slots to be used. Defaults to 32 M, which is the maximal value. Notice that a higher value can increase the table fragmentation, and a smaller value can decrease the fragmentation, at the expense of execution time.</source>
          <target state="translated">&lt;code&gt;{max_no_slots,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt;no_slots()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -사용할 최대 슬롯 수. 기본값은 32M이며 최대 값입니다. 값이 클수록 테이블 조각화가 증가하고 값이 작을수록 실행 시간을 희생하여 조각화가 감소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcffa11391f0042a4f7910a10cf70f2b6fd9a0b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{memory, NoWords}&lt;/code&gt;, where &lt;code&gt;NoWords&lt;/code&gt; is the number of words allocated to the ETS tables.</source>
          <target state="translated">&lt;code&gt;{memory, NoWords}&lt;/code&gt; 여기서 &lt;code&gt;NoWords&lt;/code&gt; 는 ETS 테이블에 할당 된 단어 수입니다.</target>
        </trans-unit>
        <trans-unit id="02ebec2632a45cfdaac9924ad0c858a992edf6bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{memory, integer() &amp;gt;= 0}&lt;/code&gt; - The file size, in bytes. The same value is associated with item &lt;code&gt;file_size&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{memory, integer() &amp;gt;= 0}&lt;/code&gt; -파일 크기 (바이트). 동일한 값이 &lt;code&gt;file_size&lt;/code&gt; 항목과 연관됩니다 .</target>
        </trans-unit>
        <trans-unit id="3da93d800f85fca3fbe45f3a9805a5a3b1ee89af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{min,MinTabs}&lt;/code&gt;, where &lt;code&gt;MinTabs&lt;/code&gt; is a list of tables that are to be included in the checkpoint. Default is &lt;code&gt;[]&lt;/code&gt;. For these tables, the redundancy is minimized, and there is to be single checkpoint retainer per table, preferably at the local node.</source>
          <target state="translated">&lt;code&gt;{min,MinTabs}&lt;/code&gt; (여기서 &lt;code&gt;MinTabs&lt;/code&gt; 는 체크 포인트에 포함될 테이블의 목록입니다). 기본값은 &lt;code&gt;[]&lt;/code&gt; 입니다. 이러한 테이블의 경우 중복성이 최소화되며 로컬 노드에서 테이블 당 단일 체크 포인트 보유자가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="5b7451c21f760cfc772a8d65ce76366cf97a1883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{min,MinTabs}&lt;/code&gt;. &lt;code&gt;MinTabs&lt;/code&gt; is a list of tables that are to be included in the checkpoint. Default is []. For these tables, the redundancy is minimized and the checkpoint information is only retained with one replica, preferably on the local node.</source>
          <target state="translated">&lt;code&gt;{min,MinTabs}&lt;/code&gt; . &lt;code&gt;MinTabs&lt;/code&gt; 는 검사 점에 포함될 테이블 목록입니다. 기본값은 []입니다. 이러한 테이블의 경우 중복성이 최소화되고 검사 점 정보는 로컬 노드에서 하나의 복제본으로 만 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="6a9e24381ea0169c10a960dacee071aabe257b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{min_no_slots, no_slots()}&lt;/code&gt; - Specifies the estimated number of different keys to be stored in the table. The &lt;code&gt;open_file/2&lt;/code&gt; option with the same name is ignored, unless the table is created, in which case performance can be enhanced by supplying an estimate when initializing the table.</source>
          <target state="translated">&lt;code&gt;{min_no_slots, no_slots()}&lt;/code&gt; -테이블에 저장 될 다른 키의 예상 수를 지정합니다. 테이블이 작성되지 않으면 동일한 이름 의 &lt;code&gt;open_file/2&lt;/code&gt; 옵션이 무시됩니다.이 경우 테이블을 초기화 할 때 추정값을 제공하여 성능을 향상시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82d08dd850bca20d366de0663b64a87b22fa778f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{min_no_slots,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt; no_slots()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - Application performance can be enhanced with this flag by specifying, when the table is created, the estimated number of different keys to be stored in the table. Defaults to 256, which is the minimum value.</source>
          <target state="translated">&lt;code&gt;{min_no_slots,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt; no_slots()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -테이블이 생성 될 때 테이블에 저장 될 다른 키의 예상 수를 지정하여이 플래그를 사용하여 애플리케이션 성능을 향상시킬 수 있습니다. 기본값은 최소값 인 256입니다.</target>
        </trans-unit>
        <trans-unit id="f7a6df2c0d8e4ffafd7e10883a8fc5151f6fa1c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{min_no_slots,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt;no_slots()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - Application performance can be enhanced with this flag by specifying, when the table is created, the estimated number of different keys to be stored in the table. Defaults to 256, which is the minimum value.</source>
          <target state="translated">&lt;code&gt;{min_no_slots,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-no_slots&quot;&gt;no_slots()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -테이블이 작성 될 때 테이블에 저장 될 다른 키의 예상 수를 지정하여이 플래그를 사용하여 응용 프로그램 성능을 향상시킬 수 있습니다. 기본값은 256 (최소값)입니다.</target>
        </trans-unit>
        <trans-unit id="020b2acf13ecbe155ab504393c96f3d7c2d4a6df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{mnesia_activity_event, Event}&lt;/code&gt; for activity events</source>
          <target state="translated">&lt;code&gt;{mnesia_activity_event, Event}&lt;/code&gt; 활동 이벤트에 대한 {mnesia_activity_event, 이벤트}</target>
        </trans-unit>
        <trans-unit id="5e49b567af9fc35b3c423763841b19db3e1220d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{mnesia_dir, AlternateDir}&lt;/code&gt;. For semantics, see &lt;code&gt;mnesia:install_fallback/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{mnesia_dir, AlternateDir}&lt;/code&gt; . 시맨틱에 대해서는 &lt;code&gt;mnesia:install_fallback/2&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa59ecf754a10370769d675585d0c179840b91f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{mnesia_dir, AlternateDir}&lt;/code&gt;. This argument is only valid if the scope of the installation is &lt;code&gt;local&lt;/code&gt;. Normally the installation of a fallback is targeted to the Mnesia directory, as configured with configuration parameter &lt;code&gt;-mnesia dir&lt;/code&gt;. But by explicitly supplying an &lt;code&gt;AlternateDir&lt;/code&gt;, the fallback is installed there regardless of the Mnesia directory configuration parameter setting. After installation of a fallback on an alternative Mnesia directory, that directory is fully prepared for use as an active Mnesia directory.</source>
          <target state="translated">&lt;code&gt;{mnesia_dir, AlternateDir}&lt;/code&gt; . 이 인수는 설치 범위가 &lt;code&gt;local&lt;/code&gt; 인 경우에만 유효합니다 . 일반적으로 폴백 설치는 구성 매개 변수 &lt;code&gt;-mnesia dir&lt;/code&gt; 로 구성된대로 Mnesia 디렉토리를 대상으로합니다 . 그러나 &lt;code&gt;AlternateDir&lt;/code&gt; 을 명시 적으로 제공 하면 Mnesia 디렉토리 구성 매개 변수 설정에 관계없이 폴 백이 설치됩니다. 대체 Mnesia 디렉토리에 폴백을 설치 한 후 해당 디렉토리는 활성 Mnesia 디렉토리로 사용할 수 있도록 완전히 준비됩니다.</target>
        </trans-unit>
        <trans-unit id="15a6e67631f7451becddab09454689ce38403f84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{mnesia_system_event, Event}&lt;/code&gt; for system events</source>
          <target state="translated">&lt;code&gt;{mnesia_system_event, Event}&lt;/code&gt; 시스템 이벤트의 경우 {mnesia_system_event, Event}</target>
        </trans-unit>
        <trans-unit id="20a9c5c4f6b650e83a5bfb3d963fb52a5c24deb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{mnesia_table_event, Event}&lt;/code&gt; for table events</source>
          <target state="translated">&lt;code&gt;{mnesia_table_event, Event}&lt;/code&gt; 테이블 이벤트에 대한 {mnesia_table_event, Event}</target>
        </trans-unit>
        <trans-unit id="d89dde70a37a776f24ba4730aff026e25d8d6fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{module, BackupMod}&lt;/code&gt;. All accesses of the backup media are performed through a callback module named &lt;code&gt;BackupMod&lt;/code&gt;. Argument &lt;code&gt;Opaque&lt;/code&gt; is forwarded to the callback module, which can interpret it as it wishes. The default callback module is called &lt;code&gt;mnesia_backup&lt;/code&gt; and it interprets argument &lt;code&gt;Opaque&lt;/code&gt; as a local filename. The default for this module is also configurable through configuration parameter &lt;code&gt;-mnesia mnesia_backup&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{module, BackupMod}&lt;/code&gt; . 백업 미디어에 대한 모든 액세스는 &lt;code&gt;BackupMod&lt;/code&gt; 라는 콜백 모듈을 통해 수행됩니다 . Arpament &lt;code&gt;Opaque&lt;/code&gt; 는 콜백 모듈로 전달되어 원하는대로 해석 할 수 있습니다. 기본 콜백 모듈을 &lt;code&gt;mnesia_backup&lt;/code&gt; 이라고 하며 &lt;code&gt;Opaque&lt;/code&gt; 인수를 로컬 파일 이름으로 해석 합니다. 이 모듈의 기본값은 구성 매개 변수 &lt;code&gt;-mnesia mnesia_backup&lt;/code&gt; 을 통해 구성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce955821adbf61f9054562a8eb40d595ce2b13ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{module, BackupMod}&lt;/code&gt;. For semantics, see &lt;code&gt;mnesia:install_fallback/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{module, BackupMod}&lt;/code&gt; . 시맨틱에 대해서는 &lt;code&gt;mnesia:install_fallback/2&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="95dda7bdd02cd1dd5dcc6018cf114f71b8fe624d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{module,BackupMod}&lt;/code&gt;. The backup module &lt;code&gt;BackupMod&lt;/code&gt; is used to access the backup media. If omitted, the default backup module is used.</source>
          <target state="translated">&lt;code&gt;{module,BackupMod}&lt;/code&gt; . 백업 모듈 &lt;code&gt;BackupMod&lt;/code&gt; 는 백업 미디어에 액세스하는 데 사용됩니다. 생략하면 기본 백업 모듈이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d7923a37f987c9cc4b56e300558cb7acfc556504" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{module,Mod}&lt;/code&gt;. The backup module &lt;code&gt;Mod&lt;/code&gt; is used to access the backup media. If omitted, the default backup module is used.</source>
          <target state="translated">&lt;code&gt;{module,Mod}&lt;/code&gt; . 백업 모듈 &lt;code&gt;Mod&lt;/code&gt; 는 백업 미디어에 액세스하는 데 사용됩니다. 생략하면 기본 백업 모듈이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2557615e11785aeb93a447cfea545cd0b43d86c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{more, Continuation}&lt;/code&gt;, which indicates that more characters are needed to complete the request.</source>
          <target state="translated">&lt;code&gt;{more, Continuation}&lt;/code&gt; 요청을 완료하는 데 더 많은 문자가 필요함을 나타내는 {more, Continuation}</target>
        </trans-unit>
        <trans-unit id="7f9250b8b8e8d9bffc6b3ba47cfd2589c38d888c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n_objects,Number}&lt;/code&gt;, where &lt;code&gt;n_objects&lt;/code&gt; specifies (roughly) the number of objects returned from Mnesia to QLC. Queries to remote tables can need a larger chunk to reduce network overhead. By default, &lt;code&gt;100&lt;/code&gt; objects at a time are returned.</source>
          <target state="translated">&lt;code&gt;{n_objects,Number}&lt;/code&gt; (여기서 &lt;code&gt;n_objects&lt;/code&gt; 는 Mnesia에서 QLC로 리턴되는 오브젝트 수를 (대략) 지정합니다.) 원격 테이블에 대한 쿼리는 네트워크 오버 헤드를 줄이기 위해 더 큰 청크가 필요할 수 있습니다. 기본적으로 한 번에 &lt;code&gt;100&lt;/code&gt; 개의 개체가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e34350363e2d757de7e9bc65a58c386a4d8e7e43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{name,Name}&lt;/code&gt;, where &lt;code&gt;Name&lt;/code&gt; specifies a temporary name of the checkpoint. The name can be reused when the checkpoint has been deactivated. If no name is specified, a name is generated automatically.</source>
          <target state="translated">&lt;code&gt;{name,Name}&lt;/code&gt; . 여기서 &lt;code&gt;Name&lt;/code&gt; 은 검사 점의 임시 이름을 지정합니다. 체크 포인트가 비활성화되면 이름을 재사용 할 수 있습니다. 이름을 지정하지 않으면 이름이 자동으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="eb118a8443e99439f8464ed53c766a7eced10162" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{name,Name}&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; is the checkpoint name. Each checkpoint must have a name that is unique to the associated nodes. The name can be reused only once the checkpoint has been deactivated. By default, a name that is probably unique is generated.</source>
          <target state="translated">&lt;code&gt;{name,Name}&lt;/code&gt; . &lt;code&gt;Name&lt;/code&gt; 은 검사 점 이름입니다. 각 체크 포인트는 연관된 노드에 고유 한 이름을 가져야합니다. 체크 포인트가 비활성화 된 후에 만 ​​이름을 재사용 할 수 있습니다. 기본적으로 고유 한 이름이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="0bf44ca93bd0c04d57cff4e2e64804e81b9d865b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{noValue, Error}&lt;/code&gt;. If the row does not exist, because all columns have &lt;code&gt;{noValue, Error}&lt;/code&gt;), the single tuple &lt;code&gt;{noValue, Error}&lt;/code&gt; can be returned. This is a shorthand for a list with all elements &lt;code&gt;{noValue, Error}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{noValue, Error}&lt;/code&gt; 입니다. 행이 존재하지 않으면 모든 열에 &lt;code&gt;{noValue, Error}&lt;/code&gt; 있으므로 단일 튜플 &lt;code&gt;{noValue, Error}&lt;/code&gt; 가 리턴 될 수 있습니다. 모든 요소가 &lt;code&gt;{noValue, Error}&lt;/code&gt; 목록의 약어입니다 .</target>
        </trans-unit>
        <trans-unit id="a8a18bfb67dea1e9039f3c962a8044b6329582c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{noValue, noSuchName}&lt;/code&gt;(SNMPv1)</source>
          <target state="translated">&lt;code&gt;{noValue, noSuchName}&lt;/code&gt; (SNMPv1)</target>
        </trans-unit>
        <trans-unit id="eb185b3e27cb0ae3bab7153922988f98506d67e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{noValue, noSuchObject | noSuchInstance}&lt;/code&gt;(SNMPv2)</source>
          <target state="translated">&lt;code&gt;{noValue, noSuchObject | noSuchInstance}&lt;/code&gt; (SNMPv2)</target>
        </trans-unit>
        <trans-unit id="1567a93260af256b21f83ef2666389656273b0e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{no_keys, integer &amp;gt;= 0()}&lt;/code&gt; - The number of different keys stored in the table.</source>
          <target state="translated">&lt;code&gt;{no_keys, integer &amp;gt;= 0()}&lt;/code&gt; -테이블에 저장된 다른 키 수.</target>
        </trans-unit>
        <trans-unit id="8f5ec6c0b31567e98e98e3e39655f968ceb698f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{no_objects, integer &amp;gt;= 0()}&lt;/code&gt; - The number of objects stored in the table.</source>
          <target state="translated">&lt;code&gt;{no_objects, integer &amp;gt;= 0()}&lt;/code&gt; -테이블에 저장된 오브젝트 수</target>
        </trans-unit>
        <trans-unit id="78ca7f63c37b87a42189313646e5afdf642458bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{no_slots, {Min, Used, Max}}&lt;/code&gt; - The number of slots of the table. &lt;code&gt;Min&lt;/code&gt; is the minimum number of slots, &lt;code&gt;Used&lt;/code&gt; is the number of currently used slots, and &lt;code&gt;Max&lt;/code&gt; is the maximum number of slots.</source>
          <target state="translated">&lt;code&gt;{no_slots, {Min, Used, Max}}&lt;/code&gt; -테이블 슬롯 수입니다. &lt;code&gt;Min&lt;/code&gt; 는 최소 슬롯 수이고, &lt;code&gt;Used&lt;/code&gt; 슬롯 은 현재 사용 된 슬롯 수입니다. &lt;code&gt;Max&lt;/code&gt; 는 최대 슬롯 수입니다.</target>
        </trans-unit>
        <trans-unit id="e1ee7921dd0d8dee1b4c70c5bb54b6d6986ea9d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ok, Bin}&lt;/code&gt; = just another chunk of the file.</source>
          <target state="translated">&lt;code&gt;{ok, Bin}&lt;/code&gt; = 파일의 또 다른 덩어리입니다.</target>
        </trans-unit>
        <trans-unit id="34079b1672ff85adaa28c30ad04ddd6e09270a90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ok, Config}&lt;/code&gt; - if the configuration variables are read successfully.</source>
          <target state="translated">&lt;code&gt;{ok, Config}&lt;/code&gt; -구성 변수를 읽은 경우</target>
        </trans-unit>
        <trans-unit id="c49ea474244ae1f144dd319888cfd4c7ef8a23fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ok, Socket}&lt;/code&gt; if a connection is established</source>
          <target state="translated">&lt;code&gt;{ok, Socket}&lt;/code&gt; 연결이 설정되면</target>
        </trans-unit>
        <trans-unit id="cd34396199c7043fb726e19f10d088c26464d424" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ok, Unpurged}&lt;/code&gt; if evaluating the script is successful, where &lt;code&gt;Unpurged&lt;/code&gt; is a list of unpurged modules</source>
          <target state="translated">&lt;code&gt;{ok, Unpurged}&lt;/code&gt; 스크립트 평가에 성공한 경우 {ok, Unpurged} &lt;code&gt;Unpurged&lt;/code&gt; 는 제거되지 않은 모듈 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e58d96d18a456e3b272e77e3b2902013e7eac97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ok, {config, ConfigString}}&lt;/code&gt; - the parameter is a configuration string and it is correct.</source>
          <target state="translated">&lt;code&gt;{ok, {config, ConfigString}}&lt;/code&gt; -매개 변수가 구성 문자열이며 올 바릅니다.</target>
        </trans-unit>
        <trans-unit id="586d56cdb554b99cf95981aa98f5880c139e5f2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ok, {file, FileName}}&lt;/code&gt; - the parameter is a file name and the file exists.</source>
          <target state="translated">&lt;code&gt;{ok, {file, FileName}}&lt;/code&gt; -매개 변수는 파일 이름이며 파일이 존재합니다.</target>
        </trans-unit>
        <trans-unit id="6f6ef68408b88b3e9084f0ee1ced6125c36f561d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{outdir, NameOfDirectory}&lt;/code&gt; Create a file named &lt;code&gt;TAGS&lt;/code&gt; in the directory &lt;code&gt;NameOfDirectory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{outdir, NameOfDirectory}&lt;/code&gt; &lt;code&gt;NameOfDirectory&lt;/code&gt; 디렉토리에 &lt;code&gt;TAGS&lt;/code&gt; 라는 파일을 작성하십시오. .</target>
        </trans-unit>
        <trans-unit id="2f7080f4f9a5af506c8d608197e34eb88f096fa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{outfile, NameOfTAGSFile}&lt;/code&gt; Create a &lt;code&gt;TAGS&lt;/code&gt; file named &lt;code&gt;NameOfTAGSFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{outfile, NameOfTAGSFile}&lt;/code&gt; &lt;code&gt;NameOfTAGSFile&lt;/code&gt; 이라는 &lt;code&gt;TAGS&lt;/code&gt; 파일을 작성하십시오. .</target>
        </trans-unit>
        <trans-unit id="b037d20d6f05d548a2d94fbcc5c53c459b3cbdc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{overload, MSec, Module, Function}&lt;/code&gt; instructs the &lt;code&gt;ttb&lt;/code&gt; back end (a part of the &lt;code&gt;Runtime_Tools&lt;/code&gt; application) to perform overload check every &lt;code&gt;MSec&lt;/code&gt; millisecond. If the check (named &lt;code&gt;Module:Function(check)&lt;/code&gt;) returns &lt;code&gt;true&lt;/code&gt;, tracing is disabled on the selected node.</source>
          <target state="translated">&lt;code&gt;{overload, MSec, Module, Function}&lt;/code&gt; 은 &lt;code&gt;ttb&lt;/code&gt; 백엔드 ( &lt;code&gt;Runtime_Tools&lt;/code&gt; 애플리케이션 의 일부 )에게 &lt;code&gt;MSec&lt;/code&gt; 밀리 초 마다 과부하 점검을 수행하도록 지시 합니다. 검사 (이름이 &lt;code&gt;Module:Function(check)&lt;/code&gt; )가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 선택한 노드에서 추적이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="e086f4d5f6f75a34f2b76360d4fd11eb54fa50cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{owner, pid()}&lt;/code&gt; - The pid of the process that handles requests to the Dets table.</source>
          <target state="translated">&lt;code&gt;{owner, pid()}&lt;/code&gt; -Dets 테이블에 대한 요청을 처리하는 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="71c18d9091aee81f1b72322a48b1012098ea8c19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{premature_eof, FileName}&lt;/code&gt; - End-of-file was encountered inside some binary term.</source>
          <target state="translated">&lt;code&gt;{premature_eof, FileName}&lt;/code&gt; -파일 끝이 2 진 용어 안에 있습니다.</target>
        </trans-unit>
        <trans-unit id="92ff9aebf9b9f4b5d40c18b44568093783196a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{protection, Protection}&lt;/code&gt;, where &lt;code&gt;Protection&lt;/code&gt; is &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt;, according to the options given to &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{protection, Protection}&lt;/code&gt; -여기서 &lt;code&gt;new&lt;/code&gt; 에 지정된 옵션에 따라 &lt;code&gt;Protection&lt;/code&gt; 이 &lt;code&gt;protected&lt;/code&gt; 되거나 &lt;code&gt;private&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="eb52fdc714879e3d1d22dcbb05906c7aaa8baad5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ram_copies, NodeList}&lt;/code&gt;, where &lt;code&gt;NodeList&lt;/code&gt; is a list of the nodes where this table is stored in RAM. Default is &lt;code&gt;[node()]&lt;/code&gt;. If the default value is used to create a table, it is located on the local node only.</source>
          <target state="translated">&lt;code&gt;{ram_copies, NodeList}&lt;/code&gt; . 여기서 &lt;code&gt;NodeList&lt;/code&gt; 는이 테이블이 RAM에 저장된 노드의 목록입니다. 기본값은 &lt;code&gt;[node()]&lt;/code&gt; 입니다. 기본값을 사용하여 테이블을 작성하면 로컬 노드에만 있습니다.</target>
        </trans-unit>
        <trans-unit id="322a25bc54945488d6f0af8e9d9eaee319f35062" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ram_copies, Nodelist}&lt;/code&gt;, where &lt;code&gt;Nodelist&lt;/code&gt; is a list of the nodes where this table is supposed to have RAM copies. A table replica of type &lt;code&gt;ram_copies&lt;/code&gt; is not written to disc on a per transaction basis. &lt;code&gt;ram_copies&lt;/code&gt; replicas can be dumped to disc with the function &lt;code&gt;mnesia:dump_tables(Tabs)&lt;/code&gt;. Default value for this attribute is &lt;code&gt;[node()]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{ram_copies, Nodelist}&lt;/code&gt; . 여기서 &lt;code&gt;Nodelist&lt;/code&gt; 는이 테이블에 RAM 사본이있는 노드의 목록입니다. &lt;code&gt;ram_copies&lt;/code&gt; 유형의 테이블 복제본은 트랜잭션별로 디스크에 기록되지 않습니다. &lt;code&gt;ram_copies&lt;/code&gt; 복제본은 &lt;code&gt;mnesia:dump_tables(Tabs)&lt;/code&gt; 함수를 사용하여 디스크에 덤프 할 수 있습니다 . 이 속성의 기본값은 &lt;code&gt;[node()]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="42d9a33fcf92e64b48344257734e284874cdac4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ram_file, boolean()}&lt;/code&gt; - Whether the table is kept in RAM.</source>
          <target state="translated">&lt;code&gt;{ram_file, boolean()}&lt;/code&gt; -테이블이 RAM에 유지되는지 여부</target>
        </trans-unit>
        <trans-unit id="46d960057443b926051420e7d3bbd8a8cac9a6e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ram_file, boolean()}&lt;/code&gt; - Whether the table is to be kept in RAM. Keeping the table in RAM can sound like an anomaly, but can enhance the performance of applications that open a table, insert a set of objects, and then close the table. When the table is closed, its contents are written to the disk file. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{ram_file, boolean()}&lt;/code&gt; -테이블을 RAM에 유지할지 여부. 테이블을 RAM에 유지하면 이상하게 들릴 수 있지만 테이블을 열고 개체 집합을 삽입 한 다음 테이블을 닫는 응용 프로그램의 성능을 향상시킬 수 있습니다. 테이블이 닫히면 해당 내용이 디스크 파일에 기록됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fbd36f5fcc9d5726c6ba599b68c53d675df35f64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ram_overrides_dump,Bool}&lt;/code&gt;. Only applicable for &lt;code&gt;ram_copies&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt; allows you to choose to back up the table state as it is in RAM, or as it is on disc. &lt;code&gt;true&lt;/code&gt; means that the latest committed records in RAM are to be included in the checkpoint. These are the records that the application accesses. &lt;code&gt;false&lt;/code&gt; means that the records dumped to &lt;code&gt;DAT&lt;/code&gt; files are to be included in the checkpoint. These records are loaded at startup. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{ram_overrides_dump,Bool}&lt;/code&gt; . &lt;code&gt;ram_copies&lt;/code&gt; 에만 적용됩니다 . &lt;code&gt;Bool&lt;/code&gt; 을 사용하면 테이블 상태를 RAM 또는 디스크에 백업 할 수 있습니다. &lt;code&gt;true&lt;/code&gt; 는 RAM에있는 최신 커밋 된 레코드가 검사 점에 포함됨을 의미합니다. 애플리케이션이 액세스하는 레코드입니다. &lt;code&gt;false&lt;/code&gt; 는 &lt;code&gt;DAT&lt;/code&gt; 파일로 덤프 된 레코드가 검사 점에 포함됨을 의미합니다. 이러한 레코드는 시작시로드됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1cf51f98ca752a45b0295cc77ea5e2cf6277c579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ram_overrides_dump,Bool}&lt;/code&gt;. This argument only applies to tables of type &lt;code&gt;ram_copies&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt; specifies if the table state in RAM is to override the table state on disc. &lt;code&gt;true&lt;/code&gt; means that the latest committed records in RAM are included in the checkpoint retainer. These are the records that the application accesses. &lt;code&gt;false&lt;/code&gt; means that the records on the disc &lt;code&gt;.DAT&lt;/code&gt; file are included in the checkpoint retainer. These records are loaded on startup. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{ram_overrides_dump,Bool}&lt;/code&gt; . 이 인수는 &lt;code&gt;ram_copies&lt;/code&gt; 유형의 테이블에만 적용됩니다 . &lt;code&gt;Bool&lt;/code&gt; 은 RAM의 테이블 상태가 디스크의 테이블 상태를 재정의할지 여부를 지정합니다. &lt;code&gt;true&lt;/code&gt; 는 RAM에서 최근 커밋 된 레코드가 검사 점 보유자에 포함됨을 의미합니다. 애플리케이션이 액세스하는 레코드입니다. &lt;code&gt;false&lt;/code&gt; 는 디스크 &lt;code&gt;.DAT&lt;/code&gt; 파일 의 레코드 가 검사 점 보유자에 포함됨을 의미합니다. 이러한 레코드는 시작시로드됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5ede5bf36d209c4baecd23df1cd8a49ad54e74af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{record_name, Atom}&lt;/code&gt; specifies the common name of all records stored in the table. All records stored in the table must have this name as their first element. &lt;code&gt;record_name&lt;/code&gt; defaults to the name of the table. For more information, see &lt;code&gt;&lt;a href=&quot;mnesia_chap4#recordnames_tablenames&quot;&gt;Record Names versus Table Names&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{record_name, Atom}&lt;/code&gt; 은 테이블에 저장된 모든 레코드의 공통 이름을 지정합니다. 테이블에 저장된 모든 레코드는이 이름을 첫 번째 요소로 사용해야합니다. &lt;code&gt;record_name&lt;/code&gt; 의 기본값은 테이블 이름입니다. 자세한 정보는 &lt;code&gt;&lt;a href=&quot;mnesia_chap4#recordnames_tablenames&quot;&gt;Record Names versus Table Names&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0a0bc97046faf3420b318e0dabdd2b1a93af0b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{record_name, Name}&lt;/code&gt;, where &lt;code&gt;Name&lt;/code&gt; must be an atom. All records stored in the table must have this name as the first element. It defaults to the same name as the table name.</source>
          <target state="translated">&lt;code&gt;{record_name, Name}&lt;/code&gt; . 여기서 &lt;code&gt;Name&lt;/code&gt; 은 원자 여야합니다. 테이블에 저장된 모든 레코드는이 이름을 첫 번째 요소로 사용해야합니다. 기본값은 테이블 이름과 같은 이름입니다.</target>
        </trans-unit>
        <trans-unit id="c0b89fdbd4b54476223ea00064c735aee6648dbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{recreate_tables, TabList}&lt;/code&gt;, where &lt;code&gt;TabList&lt;/code&gt; is a list of tables that is to be recreated before the records from the backup are inserted. The tables are first deleted and then created with the schema information from the backup. All the nodes in the backup need to be operational.</source>
          <target state="translated">&lt;code&gt;{recreate_tables, TabList}&lt;/code&gt; (여기서 &lt;code&gt;TabList&lt;/code&gt; 는 백업의 레코드가 삽입되기 전에 다시 작성 될 테이블의 목록입니다). 테이블은 먼저 삭제 된 후 백업의 스키마 정보로 작성됩니다. 백업의 모든 노드가 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="2088f284180d2fc734fe5f7476e6a37ad837564c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{recreate_tables, TableList}&lt;/code&gt;, where &lt;code&gt;TableList&lt;/code&gt; is a list of tables, which is to be recreated before the records from the backup are inserted. The tables are first deleted and then created with the schema information from the backup. All the nodes in the backup need to be operational.</source>
          <target state="translated">&lt;code&gt;{recreate_tables, TableList}&lt;/code&gt; . 여기서 &lt;code&gt;TableList&lt;/code&gt; 는 백업의 레코드가 삽입되기 전에 다시 작성되는 테이블 목록입니다. 테이블은 먼저 삭제 된 후 백업의 스키마 정보로 작성됩니다. 백업의 모든 노드가 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="41f2681a6977142754c24be73f8efb5c1a91a6d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{repair, Value}&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; can be either a &lt;code&gt;boolean()&lt;/code&gt; or the atom &lt;code&gt;force&lt;/code&gt;. The flag specifies if the Dets server is to invoke the automatic file reparation algorithm. Defaults to &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; is specified, no attempt is made to repair the file, and &lt;code&gt;{error, {needs_repair, FileName}}&lt;/code&gt; is returned if the table must be repaired.</source>
          <target state="translated">&lt;code&gt;{repair, Value}&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 일 수 &lt;code&gt;boolean()&lt;/code&gt; 또는 원자 &lt;code&gt;force&lt;/code&gt; . 플래그는 Dets 서버가 자동 파일 복원 알고리즘을 호출할지 여부를 지정합니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. 경우 &lt;code&gt;false&lt;/code&gt; 지정되어, 시도는 파일을 복구하지 않고, &lt;code&gt;{error, {needs_repair, FileName}}&lt;/code&gt; 테이블 복구해야하는 경우 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="243767f1ab646563a48b7607cfae2f64d36aef78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{safe_fixed, SafeFixed}&lt;/code&gt; - The same as &lt;code&gt;{safe_fixed_monotonic_time, SafeFixed}&lt;/code&gt; except the format and value of &lt;code&gt;FixedAtTime&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{safe_fixed, SafeFixed}&lt;/code&gt; -와 동일한 &lt;code&gt;{safe_fixed_monotonic_time, SafeFixed}&lt;/code&gt; 의 형식 및 값을 제외한 &lt;code&gt;FixedAtTime&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d60353cd382eaff9eeaa9a965b09427fd0cbd50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{safe_fixed_monotonic_time, SafeFixed}&lt;/code&gt; - If the table is fixed, &lt;code&gt;SafeFixed&lt;/code&gt; is a tuple &lt;code&gt;{FixedAtTime, [{Pid,RefCount}]}&lt;/code&gt;. &lt;code&gt;FixedAtTime&lt;/code&gt; is the time when the table was first fixed, and &lt;code&gt;Pid&lt;/code&gt; is the pid of the process that fixes the table &lt;code&gt;RefCount&lt;/code&gt; times. There can be any number of processes in the list. If the table is not fixed, &lt;code&gt;SafeFixed&lt;/code&gt; is the atom &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{safe_fixed_monotonic_time, SafeFixed}&lt;/code&gt; -테이블이 고정 된 경우 &lt;code&gt;SafeFixed&lt;/code&gt; 는 튜플 &lt;code&gt;{FixedAtTime, [{Pid,RefCount}]}&lt;/code&gt; 입니다. &lt;code&gt;FixedAtTime&lt;/code&gt; 은 테이블이 처음 수정 된 시간이고 &lt;code&gt;Pid&lt;/code&gt; 는 테이블 &lt;code&gt;RefCount&lt;/code&gt; 시간 을 수정하는 프로세스의 pid입니다 . 목록에 여러 프로세스가있을 수 있습니다. 테이블이 고정되지 않은 경우 &lt;code&gt;SafeFixed&lt;/code&gt; 는 원자 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="77852a8d2f3b9a3a1759e107386593fbe3e304db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{save_config,Config}&lt;/code&gt; makes the &lt;code&gt;Common Test&lt;/code&gt; test server pass &lt;code&gt;Config&lt;/code&gt; to the next test case.</source>
          <target state="translated">&lt;code&gt;{save_config,Config}&lt;/code&gt; 는 &lt;code&gt;Common Test&lt;/code&gt; 테스트 서버가 &lt;code&gt;Config&lt;/code&gt; 을 다음 테스트 케이스로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="b1dc9f14d5ccd2c14b3e15926aa53318e169353a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{schema, Tab, CreateList}&lt;/code&gt; specifies a table to be created. For more information about &lt;code&gt;CreateList&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{schema, Tab, CreateList}&lt;/code&gt; 는 작성할 테이블을 지정합니다. &lt;code&gt;CreateList&lt;/code&gt; 에 대한 자세한 정보는 &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="57353258f3c4518eda050314ab9f959e3312c8a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{schema, Tab}&lt;/code&gt; specifies a table to be deleted.</source>
          <target state="translated">&lt;code&gt;{schema, Tab}&lt;/code&gt; 은 삭제할 테이블을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="ed668e45641d0e0e5c792826f0e8e70c2758fe46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{scope, Scope}&lt;/code&gt;. For semantics, see &lt;code&gt;mnesia:install_fallback/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{scope, Scope}&lt;/code&gt; . 시맨틱에 대해서는 &lt;code&gt;mnesia:install_fallback/2&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc36685e1cd9495318a45ad14ffeffc16e07473a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{scope, Scope}&lt;/code&gt;. The &lt;code&gt;Scope&lt;/code&gt; of a fallback is either &lt;code&gt;global&lt;/code&gt; for the entire database or &lt;code&gt;local&lt;/code&gt; for one node. By default, the installation of a fallback is a global operation, which either is performed on all nodes with a disc-resident schema or none. Which nodes that are disc-resident is determined from the schema information in the backup.</source>
          <target state="translated">&lt;code&gt;{scope, Scope}&lt;/code&gt; . &lt;code&gt;Scope&lt;/code&gt; 대체의 중 하나입니다 &lt;code&gt;global&lt;/code&gt; 전체 데이터베이스 또는 &lt;code&gt;local&lt;/code&gt; 한 노드에 대한. 기본적으로 폴백 설치는 전역 작업으로, 디스크 상주 스키마가 있거나없는 모든 노드에서 수행됩니다. 디스크 상주 노드는 백업의 스키마 정보에서 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="95623f8a53dd4b1420c371f2d6dd9a5673aaef18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{segment_timeout, missing_segments()}&lt;/code&gt; - one or more segments was not delivered before the expire of the segment timer.</source>
          <target state="translated">&lt;code&gt;{segment_timeout, missing_segments()}&lt;/code&gt; -세그먼트 타이머가 만료되기 전에 하나 이상의 세그먼트가 전달되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="8c5c407a539f1f47faac870b5988aef24dbcc33e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{select, MatchSpec}&lt;/code&gt;. As for &lt;code&gt;select&lt;/code&gt;, the table is traversed by calling &lt;code&gt;mnesia:select/3&lt;/code&gt; and &lt;code&gt;mnesia:select/1&lt;/code&gt;. The difference is that the match specification is explicitly given. This is how to state match specifications that cannot easily be expressed within the syntax provided by QLC.</source>
          <target state="translated">&lt;code&gt;{select, MatchSpec}&lt;/code&gt; . 에 관해서는 &lt;code&gt;select&lt;/code&gt; , 테이블 호출하여 이송합니다 &lt;code&gt;mnesia:select/3&lt;/code&gt; 및 &lt;code&gt;mnesia:select/1&lt;/code&gt; . 차이점은 일치 스펙이 명시 적으로 제공된다는 것입니다. QLC에서 제공하는 구문 내에서 쉽게 표현할 수없는 일치 스펙을 명시하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="5e85082653b7ac8f18fdabcb47399e1bc33af7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{select,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-match_spec&quot;&gt; match_spec()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - As for &lt;code&gt;select&lt;/code&gt;, the table is traversed by calling &lt;code&gt;dets:select/3&lt;/code&gt; and &lt;code&gt;dets:select/1&lt;/code&gt;. The difference is that the match specification is specified explicitly. This is how to state match specifications that cannot easily be expressed within the syntax provided by &lt;code&gt;qlc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{select,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-match_spec&quot;&gt; match_spec()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; - &lt;code&gt;select&lt;/code&gt; 의 경우 &lt;code&gt;dets:select/3&lt;/code&gt; 및 &lt;code&gt;dets:select/1&lt;/code&gt; 을 호출하여 테이블을 순회합니다 . 차이점은 일치 사양이 명시 적으로 지정된다는 것입니다. &lt;code&gt;qlc&lt;/code&gt; 에서 제공하는 구문 내에서 쉽게 표현할 수없는 일치 사양을 명시하는 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="48dac8aa9a602e73209998e339f05366da69fae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{select,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-match_spec&quot;&gt;match_spec()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - As for &lt;code&gt;select&lt;/code&gt;, the table is traversed by calling &lt;code&gt;dets:select/3&lt;/code&gt; and &lt;code&gt;dets:select/1&lt;/code&gt;. The difference is that the match specification is specified explicitly. This is how to state match specifications that cannot easily be expressed within the syntax provided by &lt;code&gt;qlc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{select,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-match_spec&quot;&gt;match_spec()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; - &lt;code&gt;select&lt;/code&gt; 의 경우 &lt;code&gt;dets:select/3&lt;/code&gt; 및 &lt;code&gt;dets:select/1&lt;/code&gt; 을 호출하여 테이블을 순회합니다 . 차이점은 일치 스펙이 명시 적으로 지정된다는 것입니다. 이것은 &lt;code&gt;qlc&lt;/code&gt; 가 제공하는 구문 내에서 쉽게 표현할 수없는 일치 스펙을 명시하는 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="2cccbcce1b79e1a860b4204965ae962164f6d406" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{size, integer() &amp;gt;= 0}&lt;/code&gt; - The number of objects stored in the table.</source>
          <target state="translated">&lt;code&gt;{size, integer() &amp;gt;= 0}&lt;/code&gt; -테이블에 저장된 오브젝트 수</target>
        </trans-unit>
        <trans-unit id="5ded61e40ffff24eb2f94212fd2b15db53bab649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{skip,Reason}&lt;/code&gt; indicates that the test case is skipped.</source>
          <target state="translated">&lt;code&gt;{skip,Reason}&lt;/code&gt; 은 테스트 사례를 건너 뛰었 음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="aa0296ab902a7c3358a6e3a79b60f7931701b1ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{skip_tables, TabList}&lt;/code&gt;, where &lt;code&gt;TabList&lt;/code&gt; is a list of tables that is not to be read from the backup.</source>
          <target state="translated">&lt;code&gt;{skip_tables, TabList}&lt;/code&gt; . 여기서 &lt;code&gt;TabList&lt;/code&gt; 는 백업에서 읽을 수없는 테이블의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="01e5959e832820731f76f2b10117d59a86d59b79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{skip_tables, TableList}&lt;/code&gt;, where &lt;code&gt;TableList&lt;/code&gt; is a list of tables, which is not to be read from the backup.</source>
          <target state="translated">&lt;code&gt;{skip_tables, TableList}&lt;/code&gt; 여기서 &lt;code&gt;TableList&lt;/code&gt; 는 백업에서 읽을 수없는 테이블 목록입니다.</target>
        </trans-unit>
        <trans-unit id="81f88cd283cac912e9ca746fd1368767ccfae072" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{snmp, SnmpStruct}&lt;/code&gt;. &lt;code&gt;SnmpStruct&lt;/code&gt; is described in the &lt;code&gt;SNMP&lt;/code&gt; User's Guide. Basically, if this attribute is present in &lt;code&gt;ArgList&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt;, the table is immediately accessible the SNMP.</source>
          <target state="translated">&lt;code&gt;{snmp, SnmpStruct}&lt;/code&gt; . &lt;code&gt;SnmpStruct&lt;/code&gt; 는 &lt;code&gt;SNMP&lt;/code&gt; 사용 설명서에 설명되어 있습니다. 기본적으로이 속성이 &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;ArgList&lt;/code&gt; 에 있으면 테이블에 SNMP에 즉시 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f73f7f8e71d79de56f7a81c2efba110fd7464c27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{snmp, SnmpStruct}&lt;/code&gt;. For a description of &lt;code&gt;SnmpStruct&lt;/code&gt;, see &lt;code&gt;mnesia:snmp_open_table/2&lt;/code&gt;. If this attribute is present in &lt;code&gt;ArgList&lt;/code&gt; to &lt;code&gt;mnesia:create_table/2&lt;/code&gt;, the table is immediately accessible by SNMP. Therefore applications that use SNMP to manipulate and control the system can be designed easily, since Mnesia provides a direct mapping between the logical tables that make up an SNMP control application and the physical data that makes up a Mnesia table.</source>
          <target state="translated">&lt;code&gt;{snmp, SnmpStruct}&lt;/code&gt; . &lt;code&gt;SnmpStruct&lt;/code&gt; 에 대한 설명 은 &lt;code&gt;mnesia:snmp_open_table/2&lt;/code&gt; 를 참조하십시오 . 이 속성이 &lt;code&gt;ArgList&lt;/code&gt; 에 &lt;code&gt;mnesia:create_table/2&lt;/code&gt; 로 존재하면 SNMP가 테이블에 즉시 액세스 할 수 있습니다. 따라서 Mnesia는 SNMP 제어 응용 프로그램을 구성하는 논리 테이블과 Mnesia 테이블을 구성하는 실제 데이터를 직접 매핑하므로 SNMP를 사용하여 시스템을 조작하고 제어하는 ​​응용 프로그램을 쉽게 설계 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="483b20f491bfb35604228a26d5184138977a2373" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ssh_cm,&lt;/code&gt;&lt;code&gt;ssh:connection_ref()&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-channel_msg&quot;&gt;channel_msg()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{ssh_cm,&lt;/code&gt;&lt;code&gt;ssh:connection_ref()&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-channel_msg&quot;&gt;channel_msg()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5639181ca4df54d5fede198e9c732d7be97d080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{storage_properties, [{Backend, Properties}]&lt;/code&gt; forwards more properties to the back end storage. &lt;code&gt;Backend&lt;/code&gt; can currently be &lt;code&gt;ets&lt;/code&gt; or &lt;code&gt;dets&lt;/code&gt;. &lt;code&gt;Properties&lt;/code&gt; is a list of options sent to the back end storage during table creation. &lt;code&gt;Properties&lt;/code&gt; cannot contain properties already used by Mnesia, such as &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;named_table&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{storage_properties, [{Backend, Properties}]&lt;/code&gt; 는 더 많은 특성을 백엔드 스토리지로 전달합니다. &lt;code&gt;Backend&lt;/code&gt; 는 현재 &lt;code&gt;ets&lt;/code&gt; 또는 &lt;code&gt;dets&lt;/code&gt; 있습니다. &lt;code&gt;Properties&lt;/code&gt; 은 테이블 작성 중 백엔드 스토리지로 전송되는 옵션 목록입니다. &lt;code&gt;Properties&lt;/code&gt; 에는 &lt;code&gt;type&lt;/code&gt; 또는 &lt;code&gt;named_table&lt;/code&gt; 과 같이 Mnesia에서 이미 사용 된 속성을 포함 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9d7627b0cb1b799897a73baf7562f0a6496c70bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{swapped,NewHandler,Pid}&lt;/code&gt;, if the process &lt;code&gt;Pid&lt;/code&gt; has replaced the event handler with another event handler &lt;code&gt;NewHandler&lt;/code&gt; using a call to &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt; swap_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt; swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{swapped,NewHandler,Pid}&lt;/code&gt; , 프로세스 &lt;code&gt;Pid&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt; swap_handler/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt; swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; 호출을 사용하여 이벤트 처리기를 다른 이벤트 처리기 &lt;code&gt;NewHandler&lt;/code&gt; 로 대체 한 경우 .</target>
        </trans-unit>
        <trans-unit id="303e847e69fba2c65d8e3f5d2f62794a6afff2ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{swapped,NewHandler,Pid}&lt;/code&gt;, if the process &lt;code&gt;Pid&lt;/code&gt; has replaced the event handler with another event handler &lt;code&gt;NewHandler&lt;/code&gt; using a call to &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{swapped,NewHandler,Pid}&lt;/code&gt; 프로세스 경우 &lt;code&gt;Pid&lt;/code&gt; 다른 이벤트 핸들러는 이벤트 핸들러를 대체하고 &lt;code&gt;NewHandler&lt;/code&gt; 호출하여 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="214b8fac5cbc176fc660ffa7e080e981936cf48d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{sysLocation, &quot;upstairs&quot;}&lt;/code&gt; or</source>
          <target state="translated">&lt;code&gt;{sysLocation, &quot;upstairs&quot;}&lt;/code&gt; 또는</target>
        </trans-unit>
        <trans-unit id="1c98b73c33e66db686f3e9900cf9664a3071a82b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{tag(), tag_receiver()}&lt;/code&gt; - The information is delivered either via messages or via a function call according to the value of &lt;code&gt;tag_receiver()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{tag(), tag_receiver()}&lt;/code&gt; -정보는 &lt;code&gt;tag_receiver()&lt;/code&gt; 값에 따라 메시지 또는 함수 호출을 통해 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="df94ed1989d56de807abe8c01846944b974ab972" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{takeover,Node}&lt;/code&gt; if the application is distributed and started at the current node because of a takeover from &lt;code&gt;Node&lt;/code&gt;, either because &lt;code&gt;takeover/2&lt;/code&gt; has been called or because the current node has higher priority than &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{takeover,Node}&lt;/code&gt; 애플리케이션이 분산 때문에로부터 인계의 현재 노드에서 시작되는 경우 &lt;code&gt;Node&lt;/code&gt; 어느 때문에 &lt;code&gt;takeover/2&lt;/code&gt; 라는되었거나 현재 노드보다 우선 순위가 있기 때문에 &lt;code&gt;Node&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="59fc28eb3ef112e55422495e00b1aab70d0440f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{tmpdir, TempDirectory}&lt;/code&gt; sets the directory used by merge join for temporary files and by option &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt;. The option also overrides option &lt;code&gt;tmpdir&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;#keysort-3&quot;&gt;keysort/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#sort-2&quot;&gt;sort/2&lt;/a&gt;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;&quot;&lt;/code&gt;, which means that the directory returned by &lt;code&gt;file:get_cwd()&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;{tmpdir, TempDirectory}&lt;/code&gt; 는 임시 파일의 병합 결합 및 옵션 &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; 의해 사용되는 디렉토리를 설정합니다 . 이 옵션은 옵션에 우선 &lt;code&gt;tmpdir&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;#keysort-3&quot;&gt;keysort/3&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#sort-2&quot;&gt;sort/2&lt;/a&gt;&lt;/code&gt; . 기본값은 &lt;code&gt;&quot;&quot;&lt;/code&gt; 이며, &lt;code&gt;file:get_cwd()&lt;/code&gt; 리턴 한 디렉토리 가 사용됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="5c02f65dac281dd801d3c340819fb91a0408021e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{tmpdir_usage, TmpFileUsage}&lt;/code&gt; determines the action taken when &lt;code&gt;qlc&lt;/code&gt; is about to create temporary files on the directory set by option &lt;code&gt;tmpdir&lt;/code&gt;. If the value is &lt;code&gt;not_allowed&lt;/code&gt;, an error tuple is returned, otherwise temporary files are created as needed. Default is &lt;code&gt;allowed&lt;/code&gt;, which means that no further action is taken. The values &lt;code&gt;info_msg&lt;/code&gt;, &lt;code&gt;warning_msg&lt;/code&gt;, and &lt;code&gt;error_msg&lt;/code&gt; mean that the function with the corresponding name in module &lt;code&gt;error_logger&lt;/code&gt; is called for printing some information (currently the stacktrace).</source>
          <target state="translated">&lt;code&gt;{tmpdir_usage, TmpFileUsage}&lt;/code&gt; 는 &lt;code&gt;qlc&lt;/code&gt; 가 &lt;code&gt;tmpdir&lt;/code&gt; 옵션으로 설정된 디렉토리에서 임시 파일을 작성하려고 할 때 수행 할 조치를 결정합니다 . 값이 &lt;code&gt;not_allowed&lt;/code&gt; 이면 오류 튜플이 반환되고, 그렇지 않으면 필요에 따라 임시 파일이 생성됩니다. 기본값은 &lt;code&gt;allowed&lt;/code&gt; . 즉, 추가 조치가 수행되지 않습니다. &lt;code&gt;info_msg&lt;/code&gt; , &lt;code&gt;warning_msg&lt;/code&gt; 및 &lt;code&gt;error_msg&lt;/code&gt; 값 은 &lt;code&gt;error_logger&lt;/code&gt; 모듈에서 해당 이름의 함수가 일부 정보 (현재 스택 추적)를 인쇄하기 위해 호출 됨을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="0924fcf739aab6153fb3e9ec406d8635341bb11b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{traverse, SelectMethod}&lt;/code&gt;, where &lt;code&gt;traverse&lt;/code&gt; determines the method to traverse the whole table (if needed). The default method is &lt;code&gt;select&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{traverse, SelectMethod}&lt;/code&gt; , &lt;code&gt;traverse&lt;/code&gt; (필요하다면) 전체 테이블을 이송하는 방법을 결정한다. 기본 방법은 &lt;code&gt;select&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="569d0f524a0eac87d8e5f5e0b87a720bcb5454fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{true, NewState:any()}&lt;/code&gt; if the user and password is valid</source>
          <target state="translated">&lt;code&gt;{true, NewState:any()}&lt;/code&gt; 사용자와 비밀번호가 유효한 경우 {true, NewState : any ()}</target>
        </trans-unit>
        <trans-unit id="004bbb00ed016620bf837455f0176fda6272ee5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{type, Type}&lt;/code&gt;, where &lt;code&gt;Type&lt;/code&gt; must be either of the atoms &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;ordered_set&lt;/code&gt;, or &lt;code&gt;bag&lt;/code&gt;. Default is &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{type, Type}&lt;/code&gt; . 여기서 &lt;code&gt;Type&lt;/code&gt; 은 atom &lt;code&gt;set&lt;/code&gt; , &lt;code&gt;ordered_set&lt;/code&gt; 또는 &lt;code&gt;bag&lt;/code&gt; 중 하나 여야합니다 . 기본값이 &lt;code&gt;set&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="85f91ed15ae3cd74083b647b9660ff6969fbe1ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{type, Type}&lt;/code&gt;, where &lt;code&gt;Type&lt;/code&gt; must be either of the atoms &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;ordered_set&lt;/code&gt;, or &lt;code&gt;bag&lt;/code&gt;. Default is &lt;code&gt;set&lt;/code&gt;. In a &lt;code&gt;set&lt;/code&gt;, all records have unique keys. In a &lt;code&gt;bag&lt;/code&gt;, several records can have the same key, but the record content is unique. If a non-unique record is stored, the old conflicting records are overwritten.</source>
          <target state="translated">&lt;code&gt;{type, Type}&lt;/code&gt; . 여기서 &lt;code&gt;Type&lt;/code&gt; 은 atom &lt;code&gt;set&lt;/code&gt; , &lt;code&gt;ordered_set&lt;/code&gt; 또는 &lt;code&gt;bag&lt;/code&gt; 중 하나 여야합니다 . 기본값이 &lt;code&gt;set&lt;/code&gt; 있습니다. A의 &lt;code&gt;set&lt;/code&gt; , 모든 기록은 고유 키가 있습니다. A의 &lt;code&gt;bag&lt;/code&gt; , 여러 레코드가 동일한 키를 가질 수 있지만, 기록 내용이 독특합니다. 고유하지 않은 레코드가 저장되면 이전 충돌 레코드를 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="ff4b0d9d72ca30ee93822540f5b2f0b9469f6dc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{type,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt; type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The table type.</source>
          <target state="translated">&lt;code&gt;{type,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt; type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -테이블 유형.</target>
        </trans-unit>
        <trans-unit id="0f9f40e602854988b8f855fbdae4baf695e10c2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{type,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt; type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The table type. Defaults to &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{type,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt; type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -테이블 유형. 기본값은 &lt;code&gt;set&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ca6d701a597627b7ea0c74deeb39db4494658b6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{type,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt;type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The table type.</source>
          <target state="translated">&lt;code&gt;{type,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt;type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -테이블 유형</target>
        </trans-unit>
        <trans-unit id="8ba84e0b5e5ac921f95e0e72884ee268f96a3599" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{type,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt;type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;}&lt;/code&gt; - The table type. Defaults to &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{type,&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-type&quot;&gt;type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; -테이블 유형 기본값은 &lt;code&gt;set&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c08648a67b6314ee79d4b3c3b7b33303a2238f50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{unique_all, true}&lt;/code&gt; adds a &lt;code&gt;{unique,&amp;nbsp;true}&lt;/code&gt; option to every list expression of the query. Defaults to &lt;code&gt;{unique_all,&amp;nbsp;false}&lt;/code&gt;. Option &lt;code&gt;unique_all&lt;/code&gt; is equivalent to &lt;code&gt;{unique_all,&amp;nbsp;true}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{unique_all, true}&lt;/code&gt; 는 쿼리의 모든 목록 표현식에 &lt;code&gt;{unique,&amp;nbsp;true}&lt;/code&gt; 옵션을 추가 합니다. 기본값은 &lt;code&gt;{unique_all,&amp;nbsp;false}&lt;/code&gt; 입니다. &lt;code&gt;unique_all&lt;/code&gt; 옵션 은 &lt;code&gt;{unique_all,&amp;nbsp;true}&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f6ecb3a5738f399703bfa84defda3f860aa72974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{user, integer()}&lt;/code&gt; - The manager will send response (acknowledgment) to inform-request messages when the &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_inform&quot;&gt;handle_inform&lt;/a&gt;&lt;/code&gt; function completes. The integer is the time, in milli-seconds, that the manager will consider the stored inform-request info valid.</source>
          <target state="translated">&lt;code&gt;{user, integer()}&lt;/code&gt; - &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_inform&quot;&gt;handle_inform&lt;/a&gt;&lt;/code&gt; 함수가 완료되면 관리자가 정보 요청 메시지에 응답 (확인)을 보냅니다 . 정수는 관리자가 저장된 정보 요청 정보가 유효한 것으로 간주하는 시간 (밀리 초)입니다.</target>
        </trans-unit>
        <trans-unit id="20dd0d0e6b16c322e326522c5f27fff9cf7fe12e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{value, Value}&lt;/code&gt;. The &lt;code&gt;Value&lt;/code&gt; must be of correct type, length and within ranges, otherwise &lt;code&gt;genErr&lt;/code&gt; is returned in the response PDU. If the object is an enumerated integer, the symbolic enum value may be used (as an atom). If the object is of type BITS, the return value shall be an integer or a list of bits that are set.</source>
          <target state="translated">&lt;code&gt;{value, Value}&lt;/code&gt; 입니다. &lt;code&gt;Value&lt;/code&gt; 않으면 올바른 유형 및 길이의 범위 내에 있어야 &lt;code&gt;genErr&lt;/code&gt; 응답 PDU로 복귀된다. 객체가 열거 형 정수인 경우 기호 열거 형 값을 (원자로) 사용할 수 있습니다. 객체가 BITS 유형 인 경우 반환 값은 정수 또는 설정된 비트 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="fab20d7063ea6c7739c32da38b75b8c52aedb4fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{value, Value}&lt;/code&gt;. The &lt;code&gt;Value&lt;/code&gt; must be of correct type, length and within ranges, otherwise &lt;code&gt;genErr&lt;/code&gt; is returned in the response PDU. If the object is an enumerated integer, the symbolic enum value may be used as an atom. If the object is of type BITS, the return value shall be an integer or a list of bits that are set.</source>
          <target state="translated">&lt;code&gt;{value, Value}&lt;/code&gt; 입니다. &lt;code&gt;Value&lt;/code&gt; 않으면 올바른 유형 및 길이의 범위 내에 있어야 &lt;code&gt;genErr&lt;/code&gt; 응답 PDU로 복귀된다. 객체가 열거 형 정수인 경우 기호 열거 형 값을 원자로 사용할 수 있습니다. 객체가 BITS 유형 인 경우 반환 값은 정수 또는 설정된 비트 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="3e4715503e7598b10eb7c577ca59039c7b886250" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{verify,false}&lt;/code&gt; is the default.</source>
          <target state="translated">&lt;code&gt;{verify,false}&lt;/code&gt; 가 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="ced44ef656c26f1e491848d39213a023626fbaa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{via,Module,Name}&lt;/code&gt;, if the supervisor is registered through an alternative process registry</source>
          <target state="translated">&lt;code&gt;{via,Module,Name}&lt;/code&gt; 감독자가 대체 프로세스 레지스트리를 통해 등록 된 경우 {via, Module, Name}</target>
        </trans-unit>
        <trans-unit id="3b0d38670de31bf716e0e4b1883dc9639d0f5918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{via,Module,ViaName}&lt;/code&gt;, if the &lt;code&gt;gen_server&lt;/code&gt; process is registered through an alternative process registry</source>
          <target state="translated">&lt;code&gt;{via,Module,ViaName}&lt;/code&gt; &lt;code&gt;gen_server&lt;/code&gt; 프로세스가 대체 프로세스 레지스트리를 통해 등록 된 경우 {via, Module, ViaName}</target>
        </trans-unit>
        <trans-unit id="0d727475f96bb32d7f30d6c64cae6c12c60ad185" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{via,Module,ViaName}&lt;/code&gt;, if the event manager is registered through an alternative process registry</source>
          <target state="translated">&lt;code&gt;{via,Module,ViaName}&lt;/code&gt; 이벤트 관리자가 대체 프로세스 레지스트리를 통해 등록 된 경우 {via, Module, ViaName}</target>
        </trans-unit>
        <trans-unit id="6762fca731697073a1d8e7064e9020909ef1aabb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;|||&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; , &lt;code&gt;||&lt;/code&gt; , &lt;code&gt;|||&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dabf6cfb0d75c04aac5e66da09a206c7167bba13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~a&lt;/code&gt; - Atom</source>
          <target state="translated">&lt;code&gt;~a&lt;/code&gt; a-원자</target>
        </trans-unit>
        <trans-unit id="e831b6aaffa678c412da4319adfcca9309351e36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~f&lt;/code&gt; - Floating point</source>
          <target state="translated">&lt;code&gt;~f&lt;/code&gt; 부동 소수점</target>
        </trans-unit>
        <trans-unit id="0df2f2d0537b780f7fc88938b5ee4399193f37ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~i&lt;/code&gt; - Integer</source>
          <target state="translated">&lt;code&gt;~i&lt;/code&gt; 정수</target>
        </trans-unit>
        <trans-unit id="f4bf115baf1394eb14b0c1b2eff70a8ea6f7106e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~s&lt;/code&gt; - String</source>
          <target state="translated">&lt;code&gt;~s&lt;/code&gt; 문자열</target>
        </trans-unit>
        <trans-unit id="c4577e4758a5f79a89b86ec1df1475a42b41ed91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~w&lt;/code&gt; - Arbitrary Erlang term</source>
          <target state="translated">&lt;code&gt;~w&lt;/code&gt; 임의 얼랭 용어</target>
        </trans-unit>
        <trans-unit id="76bcda2a15ba338a52d45da0a5161212792e1e81" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;'and'-1&quot;&gt;'and'([Filter]) -&amp;gt; filter()&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;'and'-1&quot;&gt;'and'([필터])-&amp;gt; 필터 ()&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="7d11875bc117c79ee7b2e207d82151af61ed06ae" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;'not'-1&quot;&gt;'not'(Filter) -&amp;gt; filter()&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;'not'-1&quot;&gt;'not'(필터)-&amp;gt; 필터 ()&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fb50418ccbd11d30aa4c986bbed80b558cd06c6d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;'or'-1&quot;&gt;'or'([Filter]) -&amp;gt; filter()&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;'or'-1&quot;&gt;'또는'([필터])-&amp;gt; 필터 ()&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4d3ce19df67d5a9a7b4ccda0107db11f3ad92171" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;-0&quot;&gt;tp, tpl, tpe, ctp, ctpl, ctpg, ctpe&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;-0&quot;&gt;tp, tpl, tpe, ctp, ctpl, ctpg, ctpe&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d0047e918a80c9d9ffb8a42bba0a2d00b113ee00" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;-deciphering-the-output-&quot;&gt;5.5 Deciphering the output &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;-deciphering-the-output-&quot;&gt;5.5 출력 해독 &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1b28d9292951cb74f8ac0e0c6edd07b24d047db9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;-enabling-lock-counting-&quot;&gt;5.1 Enabling lock-counting &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;-enabling-lock-counting-&quot;&gt;5.1 잠금 계산 사용 &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b6a0c05aee3eafa1da9db1b687703ed770ff4be6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;-error---and--warning---directives&quot;&gt;9.6 -error() and -warning() directives&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;-error---and--warning---directives&quot;&gt;9.6 -error () 및 -warning () 지시어&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3c37c98d51fa72226133a29afbea3a2df6f55b0a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;-example-of-usage-&quot;&gt;5.3 Example of usage &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;-example-of-usage-&quot;&gt;5.3 사용 예 &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="900057347d39d7656ec2176898b4da9236b7ed60" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;-example-with-mnesia-transaction-benchmark-&quot;&gt;5.4 Example with Mnesia Transaction Benchmark &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;-example-with-mnesia-transaction-benchmark-&quot;&gt;5.4 Mnesia Transaction Benchmark를 사용한 예 &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ecfd0a5e7e72a468bd6d55c04f34210fd7bdeaee" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;-pinning--a-certificate&quot;&gt;&quot;Pinning&quot; a Certificate&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;-pinning--a-certificate&quot;&gt;인증서 &quot;피닝&quot;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8a0ecaa120deae393d1b674fea66ee85910e857f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;.erlang.crypt&quot;&gt;.erlang.crypt&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;.erlang.crypt&quot;&gt;.erlang.crypt&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="14d844fc8ee796eef465017e130a7bda46c0b493" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;.hrl-file-generation&quot;&gt;4.4 .hrl File Generation&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;.hrl-file-generation&quot;&gt;4.4 .hrl 파일 생성&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3d0e2f7ae8f145180d79a3063bf2e27b1c3794bd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ANY&quot;&gt;ANY and ANY DEFINED BY&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ANY&quot;&gt;에 의해 정의 된 모든&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6cc4464d6b9a90a60b263c6be6a52a08423e20fb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ASN1Types&quot;&gt;3.5 ASN.1 Types&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ASN1Types&quot;&gt;3.5 ASN.1 유형&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="71242ace27d57667b969d872339749af3289f853" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ATOM_EXT&quot;&gt;12.27 ATOM_EXT (deprecated)&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ATOM_EXT&quot;&gt;12.27 ATOM_EXT (더 이상 사용되지 않음)&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="54298484d494a50746db5f55e6dfa44c7b671790" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ATOM_EXT&quot;&gt;12.30 ATOM_EXT (deprecated)&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ATOM_EXT&quot;&gt;12.30 ATOM_EXT (더 이상 사용되지 않음)&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4394520ce9155ce06f07e154c1b0b6a95b21c200" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;Adding-a-new-Breakpoint&quot;&gt;4.4 Adding a new Breakpoint&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;Adding-a-new-Breakpoint&quot;&gt;4.4 새 중단 점 추가&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a950887cf7f67732b96f7360cb9724fe5e408c58" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;Advanced-configuration-and-build-of-ErlangOTP&quot;&gt;2.5 Advanced configuration and build of Erlang/OTP&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;Advanced-configuration-and-build-of-ErlangOTP&quot;&gt;2.5 Erlang / OTP의 고급 구성 및 빌드&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="332e5fe64ee7e68b32e378d108a325e7969a0c51" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;Advanced-configuration-and-build-of-ErlangOTP_Building&quot;&gt;Building&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;Advanced-configuration-and-build-of-ErlangOTP_Building&quot;&gt;Building&lt;/span&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
