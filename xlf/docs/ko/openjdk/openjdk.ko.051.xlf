<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="f96e0317b7c85e5c3a6e1ac3a3410c00b2ead24f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a map concurrently, and at least one of the threads modifies the map structurally, it &lt;em&gt;must&lt;/em&gt; be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with an existing key is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be &quot;wrapped&quot; using the &lt;a href=&quot;collections#synchronizedSortedMap(java.util.SortedMap)&quot;&gt;&lt;code&gt;Collections.synchronizedSortedMap&lt;/code&gt;&lt;/a&gt; method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</source>
          <target state="translated">&lt;strong&gt;이 구현은 동기화되지 않습니다.&lt;/strong&gt; 여러 스레드가 동시에 맵에 액세스하고 스레드 중 하나 이상이 맵을 구조적으로 수정하는 경우 외부에서 동기화 &lt;em&gt;되어야합니다&lt;/em&gt; . (구조적 수정은 하나 이상의 매핑을 추가하거나 삭제하는 작업입니다. 단순히 기존 키와 관련된 값을 변경하는 것은 구조적 수정이 아닙니다.) 이는 일반적으로 맵을 자연스럽게 캡슐화하는 일부 객체에서 동기화하여 수행됩니다. 그러한 객체가 없으면 &lt;a href=&quot;collections#synchronizedSortedMap(java.util.SortedMap)&quot;&gt; &lt;code&gt;Collections.synchronizedSortedMap&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 맵을 &quot;래핑&quot;해야합니다 . 이것은지도에 대한 실수로 동기화되지 않은 액세스를 방지하기 위해 생성시 가장 잘 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="96dd55977c3b5c41fbaee587a2d422df7205e3fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a map concurrently, and at least one of the threads modifies the map structurally, it &lt;em&gt;must&lt;/em&gt; be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with an existing key is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be &quot;wrapped&quot; using the &lt;a href=&quot;collections#synchronizedSortedMap-java.util.SortedMap-&quot;&gt;&lt;code&gt;Collections.synchronizedSortedMap&lt;/code&gt;&lt;/a&gt; method. This is best done at creation time, to prevent accidental unsynchronized access to the map:</source>
          <target state="translated">&lt;strong&gt;이 구현은 동기화되지 않습니다.&lt;/strong&gt; 여러 스레드가 동시에 맵에 액세스하고 하나 이상의 스레드가 맵을 구조적으로 수정하는 경우 외부에서 동기화 &lt;em&gt;해야합니다&lt;/em&gt; . (구조적 수정은 하나 이상의 매핑을 추가하거나 삭제하는 작업입니다. 기존 키와 관련된 값을 변경하는 것만으로는 구조적 수정이 아닙니다.) 일반적으로 맵을 자연스럽게 캡슐화하는 일부 객체에서 동기화하면됩니다. 그러한 객체가 존재하지 않는 경우는 &lt;a href=&quot;collections#synchronizedSortedMap-java.util.SortedMap-&quot;&gt; &lt;code&gt;Collections.synchronizedSortedMap&lt;/code&gt; &lt;/a&gt; 메소드를 사용해 맵을 랩핑 할 필요가 있습니다 . 실수로 맵에 동기화되지 않은 액세스를 방지하기 위해 생성시 가장 잘 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f1736f1fd01fd41e7df5d0fe5e84cbf5d6b567ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it</source>
          <target state="translated">&lt;strong&gt;이 구현은 동기화되지 않습니다. &lt;/strong&gt;여러 스레드가 동시에 트리 세트에 액세스하고 하나 이상의 스레드가 세트를 수정하는 경우</target>
        </trans-unit>
        <trans-unit id="dad6785e319c55526e4a76517d0aad16c6719c55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access an &lt;code&gt;ArrayList&lt;/code&gt; instance concurrently, and at least one of the threads modifies the list structurally, it</source>
          <target state="translated">&lt;strong&gt;이 구현은 동기화되지 않습니다. &lt;/strong&gt;여러 스레드가 동시에 &lt;code&gt;ArrayList&lt;/code&gt; 인스턴스에 액세스하고 하나 이상의 스레드가 목록을 구조적으로 수정하는 경우</target>
        </trans-unit>
        <trans-unit id="1bf3c1c8e915f99f33e420277c3a269fc9e44c25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If multiple threads access an identity hash map concurrently, and at least one of the threads modifies the map structurally, it</source>
          <target state="translated">&lt;strong&gt;이 구현은 동기화되지 않습니다. &lt;/strong&gt;여러 스레드가 동시에 ID 해시 맵에 액세스하고 스레드 중 하나 이상이 맵을 구조적으로 수정하는 경우</target>
        </trans-unit>
        <trans-unit id="98c9a6a63130277c803725dfd2788675770aca5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; Multiple threads should not access a &lt;code&gt;PriorityQueue&lt;/code&gt; instance concurrently if any of the threads modifies the queue. Instead, use the thread-safe &lt;a href=&quot;concurrent/priorityblockingqueue&quot;&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;strong&gt;이 구현은 동기화되지 않습니다. &lt;/strong&gt;스레드가 큐를 수정하는 경우 여러 스레드가 &lt;code&gt;PriorityQueue&lt;/code&gt; 인스턴스에 동시에 액세스 하면 안됩니다. 대신 스레드 안전 &lt;a href=&quot;concurrent/priorityblockingqueue&quot;&gt; &lt;code&gt;PriorityBlockingQueue&lt;/code&gt; &lt;/a&gt; 클래스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="566afb651a5e98a12d1cba69e75ca1203f04a180" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note to Distributions bundled with parsers:&lt;/strong&gt; You should modify the implementation of the no-arguments &lt;em&gt;createXMLReader&lt;/em&gt; to handle cases where the external configuration mechanisms aren't set up. That method should do its best to return a parser when one is in the class path, even when nothing bound its class name to &lt;code&gt;org.xml.sax.driver&lt;/code&gt; so those configuration mechanisms would see it.</source>
          <target state="translated">&lt;strong&gt;파서와 함께 번들로 제공되는 배포에 대한 참고 사항 :&lt;/strong&gt; 외부 구성 메커니즘이 설정되지 않은 경우를 처리하려면 인수없는 &lt;em&gt;createXMLReader&lt;/em&gt; 의 구현을 수정해야 합니다. 이 메서드는 클래스 이름이 &lt;code&gt;org.xml.sax.driver&lt;/code&gt; 에 바인딩되지 않은 경우에도 해당 구성 메커니즘에서 볼 수 있도록 파서가 클래스 경로에있을 때 파서를 반환하도록 최선을 다해야 합니다.</target>
        </trans-unit>
        <trans-unit id="8d10fb3b31459bcb8895e6220937c45a9bc7d6b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As we see above, the string produced by a &lt;code&gt;ChoiceFormat&lt;/code&gt; in &lt;code&gt;MessageFormat&lt;/code&gt; is treated as special; occurrences of '{' are used to indicate subformats, and cause recursion. If you create both a &lt;code&gt;MessageFormat&lt;/code&gt; and &lt;code&gt;ChoiceFormat&lt;/code&gt; programmatically (instead of using the string patterns), then be careful not to produce a format that recurses on itself, which will cause an infinite loop.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 위에서 볼 수 있듯이 &lt;code&gt;MessageFormat&lt;/code&gt; 의 &lt;code&gt;ChoiceFormat&lt;/code&gt; 에 의해 생성 된 문자열 은 특수한 것으로 취급됩니다. '{'는 하위 형식을 나타 내기 위해 사용되며 재귀를 유발합니다. 프로그래밍 방식으로 (문자열 패턴을 사용하는 대신) &lt;code&gt;MessageFormat&lt;/code&gt; 및 &lt;code&gt;ChoiceFormat&lt;/code&gt; 을 모두 작성하는 경우 자체 반복되는 형식을 생성하지 않도록주의하십시오. 이로 인해 무한 루프가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21eeff494c17be09bda59278016bda4534becea7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Do not use &lt;code&gt;setVisible&lt;/code&gt; directly on a tab component to make it visible, use &lt;code&gt;setSelectedComponent&lt;/code&gt; or &lt;code&gt;setSelectedIndex&lt;/code&gt; methods instead.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 음주 사용하지 않을 &lt;code&gt;setVisible&lt;/code&gt; 사용, 그것을 볼 수 있도록 탭 구성 요소에 직접적으로 &lt;code&gt;setSelectedComponent&lt;/code&gt; 또는 &lt;code&gt;setSelectedIndex&lt;/code&gt; 의 대신 방법.</target>
        </trans-unit>
        <trans-unit id="f7e73e7ab9d0c678ea0db49f31534f48c3a4db80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For &lt;code&gt;JList&lt;/code&gt; to properly display the tooltips of its renderers in this manner, &lt;code&gt;JList&lt;/code&gt; must be a registered component with the &lt;code&gt;ToolTipManager&lt;/code&gt;. This registration is done automatically in the constructor. However, if at a later point &lt;code&gt;JList&lt;/code&gt; is unregistered, by way of a call to &lt;code&gt;setToolTipText(null)&lt;/code&gt;, tips from the renderers will no longer display.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 경우 &lt;code&gt;JList&lt;/code&gt; 제대로 이러한 방식의 렌더러의 툴팁을 표시하는 &lt;code&gt;JList&lt;/code&gt; 의이 에 등록 된 구성 요소해야 &lt;code&gt;ToolTipManager&lt;/code&gt; 를 . 이 등록은 생성자에서 자동으로 수행됩니다. 그러나 나중에 &lt;code&gt;setToolTipText(null)&lt;/code&gt; 호출을 통해 &lt;code&gt;JList&lt;/code&gt; 가 등록 취소되면 렌더러의 팁이 더 이상 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="439840e676b537de427451c4b80bc01e95db35d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the case of &lt;code&gt;Statement&lt;/code&gt; batching, it is implementation defined as to whether the time-out is applied to individual SQL commands added via the &lt;code&gt;addBatch&lt;/code&gt; method or to the entire batch of SQL commands invoked by the &lt;code&gt;executeBatch&lt;/code&gt; method (consult your driver vendor documentation for details).</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Statement&lt;/code&gt; 일괄 처리 의 경우 시간 제한이 &lt;code&gt;addBatch&lt;/code&gt; 메서드 를 통해 추가 된 개별 SQL 명령에 적용되는지 아니면 &lt;code&gt;executeBatch&lt;/code&gt; 메서드에 의해 호출 된 SQL 명령의 전체 일괄 처리에 적용되는지에 대해 정의 된 구현입니다 (드라이버 공급 업체 설명서 참조). 자세한 내용은).</target>
        </trans-unit>
        <trans-unit id="755df37c75444c99429b51ef6b83d410033a8ab5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is recommended that rather than using this method you supply a valid parent.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 방법을 사용하는 대신 유효한 부모를 제공하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="af6b6eb6a5794fde67ab6a1b17cc271cdecb4839" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; JDBC driver implementations may also apply this limit to &lt;code&gt;ResultSet&lt;/code&gt; methods (consult your driver vendor documentation for details).</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; JDBC 드라이버 구현은이 제한을 &lt;code&gt;ResultSet&lt;/code&gt; 메서드 에도 적용 할 수 있습니다 (자세한 내용은 드라이버 공급 업체 설명서 참조).</target>
        </trans-unit>
        <trans-unit id="e446f7d01353bc2d70db335d321f0a67547a0dbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Most of the Swing API is &lt;em&gt;not&lt;/em&gt; thread safe. For details, see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html&quot;&gt;Concurrency in Swing&lt;/a&gt;, a section in &lt;em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/&quot;&gt;The Java Tutorial&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 대부분의 Swing API는 스레드로부터 안전 &lt;em&gt;하지 않습니다&lt;/em&gt; . 자세한 내용 은 &lt;em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/&quot;&gt;The Java Tutorial&lt;/a&gt;&lt;/em&gt; 의 섹션 인 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html&quot;&gt;Swing의 동시성을&lt;/a&gt; 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c85aa4d390a25bf941817b3419d579e2a2507507" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Multiple calls to &lt;code&gt;closeOnCompletion&lt;/code&gt; do not toggle the effect on this &lt;code&gt;Statement&lt;/code&gt;. However, a call to &lt;code&gt;closeOnCompletion&lt;/code&gt; does effect both the subsequent execution of statements, and statements that currently have open, dependent, result sets.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;closeOnCompletion&lt;/code&gt; 에 대한 여러 호출 은이 &lt;code&gt;Statement&lt;/code&gt; 에 대한 효과를 토글하지 않습니다 . 그러나 &lt;code&gt;closeOnCompletion&lt;/code&gt; 에 대한 호출 은 명령문의 후속 실행과 현재 열린 종속 결과 세트가있는 명령문 모두에 영향 을 미칩니다 .</target>
        </trans-unit>
        <trans-unit id="4b7a393d1b053ca942afef16584dda9d1fb802f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; PropertyResourceBundle can be constructed either from an InputStream or a Reader, which represents a property file. Constructing a PropertyResourceBundle instance from an InputStream requires that the input stream be encoded in ISO-8859-1. In that case, characters that cannot be represented in ISO-8859-1 encoding must be represented by Unicode Escapes as defined in section 3.3 of</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; PropertyResourceBundle은 InputStream 또는 속성 파일을 나타내는 Reader에서 구성 할 수 있습니다. InputStream에서 PropertyResourceBundle 인스턴스를 생성하려면 입력 스트림을 ISO-8859-1로 인코딩해야합니다. 이 경우 ISO-8859-1 인코딩으로 표현할 수없는 문자는 3.3 절에서 정의한대로 유니 코드 이스케이프로 표현해야합니다.</target>
        </trans-unit>
        <trans-unit id="b1d2c46fc66b2a1f32e0474e66f6b6e5e3ea0d2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Provider implementations that accept initialization parameters via the &lt;code&gt;getInstance()&lt;/code&gt; methods are strongly encouraged to use a &lt;a href=&quot;../../../java.base/java/util/properties&quot;&gt;Properties&lt;/a&gt; object as the representation for String name-value pair based parameters whenever possible. This allows applications to more easily interoperate with multiple providers than if each provider used different provider specific class as parameters.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;getInstance()&lt;/code&gt; 메서드 를 통해 초기화 매개 변수를 허용하는 공급자 구현은 가능할 때마다 &lt;a href=&quot;../../../java.base/java/util/properties&quot;&gt;속성&lt;/a&gt; 개체를 문자열 이름-값 쌍 기반 매개 변수에 대한 표현으로 사용하는 것이 좋습니다 . 따라서 각 공급자가 다른 공급자 별 클래스를 매개 변수로 사용하는 경우보다 응용 프로그램이 여러 공급자와 더 쉽게 상호 운용 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9bef690325b528e6484f6e20a195f0f42cc1bbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some platforms may not support showing a message.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 일부 플랫폼은 메시지 표시를 지원하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5acf5421117397e18ce387fa7d8276c6d7d3d692" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some platforms may not support showing the user-specified popup menu component when the user right-clicks the tray icon. In this situation, either no menu will be displayed or, on some systems, a native version of the menu may be displayed.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 일부 플랫폼은 사용자가 트레이 아이콘을 마우스 오른쪽 버튼으로 클릭 할 때 사용자 지정 팝업 메뉴 구성 요소 표시를 지원하지 않을 수 있습니다. 이 상황에서는 메뉴가 표시되지 않거나 일부 시스템에서는 기본 버전의 메뉴가 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58609d53bb8442026acc50a8b3435dc139ee01f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some platforms may not support showing the user-specified title in a file dialog. In this situation, either no title will be displayed in the file dialog's title bar or, on some systems, the file dialog's title bar will not be displayed.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 일부 플랫폼은 파일 대화 상자에서 사용자 지정 제목 표시를 지원하지 않을 수 있습니다. 이 경우 파일 대화 상자의 제목 표시 줄에 제목이 표시되지 않거나 일부 시스템에서 파일 대화 상자의 제목 표시 줄이 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="002dc072a869c6295defe1c5794114eb573c89f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;isLast&lt;/code&gt; method is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 결과 세트 유형이 &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; 인 &lt;code&gt;ResultSet&lt;/code&gt; 에 대한 &lt;code&gt;isLast&lt;/code&gt; 메소드 지원 은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="5d65342e23f63961a59cbcad6da2059f16352a31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;rowDeleted&lt;/code&gt; method is optional with a result set concurrency of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;rowDeleted&lt;/code&gt; 메서드에 대한 지원 은 &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; 의 결과 집합 동시성을 사용하여 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="e93230bfc7e6d47468f59c63a3547518e986136a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;rowInserted&lt;/code&gt; method is optional with a result set concurrency of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;rowInserted&lt;/code&gt; 메서드에 대한 지원 은 &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; 의 결과 집합 동시성으로 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="ca9911b050f7d192fc0da76bf119e0cff103ff70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;rowUpdated&lt;/code&gt; method is optional with a result set concurrency of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;rowUpdated&lt;/code&gt; 메서드에 대한 지원 은 &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; 의 결과 집합 동시성으로 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="046a84b47c5e65580d4589b787b8c4d729355a75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The ButtonGroup object is a logical grouping -- not a physical grouping. To create a button panel, you should still create a &lt;a href=&quot;jpanel&quot;&gt;&lt;code&gt;JPanel&lt;/code&gt;&lt;/a&gt; or similar container-object and add a &lt;a href=&quot;border/border&quot;&gt;&lt;code&gt;Border&lt;/code&gt;&lt;/a&gt; to it to set it off from surrounding components.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; ButtonGroup 개체는 물리적 그룹이 아니라 논리적 그룹입니다. 버튼 패널을 만들려면 여전히 &lt;a href=&quot;jpanel&quot;&gt; &lt;code&gt;JPanel&lt;/code&gt; &lt;/a&gt; 또는 유사한 컨테이너 객체를 만들고 &lt;a href=&quot;border/border&quot;&gt; &lt;code&gt;Border&lt;/code&gt; &lt;/a&gt; 를 추가하여 주변 구성 요소에서 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="16e574d0f71243b998c371619c9fd9d0ae75ef81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are certain possible ambiguities in interpretation of certain singular times, which are resolved in the following ways:</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 특정 단수 시간의 해석에는 다음과 같은 방법으로 해결할 수있는 모호성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d02711c13075d51ff9aaac4fb98d23e8513d6542" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There is no validation of &lt;code&gt;updateCounts&lt;/code&gt; for overflow and because of this it is recommended that you use the constructor &lt;code&gt;BatchUpdateException(String reason, String SQLState,
 int vendorCode, long []updateCounts,Throwable cause) &lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 오버플로에 대한 &lt;code&gt;updateCounts&lt;/code&gt; 의 유효성을 검사하지 않으므로 &lt;code&gt;BatchUpdateException(String reason, String SQLState, int vendorCode, long []updateCounts,Throwable cause) &lt;/code&gt; 생성자를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="b0be623a35a3811dd3759d75a24e5f4e8df41732" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This class is designed to work with the now-deprecated SAX1 &lt;a href=&quot;../parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt; class. SAX2 applications should use &lt;a href=&quot;xmlreaderfactory&quot;&gt;&lt;code&gt;XMLReaderFactory&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 클래스는 현재 사용되지 않는 SAX1 &lt;a href=&quot;../parser&quot;&gt; &lt;code&gt;Parser&lt;/code&gt; &lt;/a&gt; 클래스 와 함께 작동하도록 설계되었습니다 . SAX2 애플리케이션은 대신 &lt;a href=&quot;xmlreaderfactory&quot;&gt; &lt;code&gt;XMLReaderFactory&lt;/code&gt; &lt;/a&gt; 를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="7d3634f0a3414c4cb13c355b0c10eda25d6c74f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This method should not be used in the implementation of image formats that use standard UTF-8, because the modified UTF-8 used here is incompatible with standard UTF-8.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 여기에 사용 된 수정 된 UTF-8은 표준 UTF-8과 호환되지 않으므로이 방법은 표준 UTF-8을 사용하는 이미지 형식 구현에 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e673559cf05e88159974a36791e942c7b693e24a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;Activatable&lt;/code&gt; constructors that both register and export an activatable remote object is strongly discouraged because the actions of registering and exporting the remote object are</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 은 Using &lt;code&gt;Activatable&lt;/code&gt; 등록하고 원격 객체 수출의 행동이기 때문에 생성자을 등록하고 모두가 기동 가능한 원격 객체를 내보낼 것을 강력히 권장하지 않습니다</target>
        </trans-unit>
        <trans-unit id="c6b4c0da78b12b7fea16db8ad8708f4dc6723c5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using this method (as well as the &lt;code&gt;Activatable&lt;/code&gt; constructors that both register and export an activatable remote object) is strongly discouraged because the actions of registering and exporting the remote object are</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 메서드 ( 활성화 가능한 원격 개체를 등록하고 내보내는 &lt;code&gt;Activatable&lt;/code&gt; 생성자 포함)를 사용하는 것은 원격 개체를 등록하고 내보내는 작업이 다음과 같기 때문에 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3c81a56d3b5aaeb5a7eec28e178b701de64151ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When &lt;code&gt;getArray&lt;/code&gt; is used to materialize a base type that maps to a primitive data type, then it is implementation-defined whether the array returned is an array of that primitive data type or an array of &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; 때 &lt;code&gt;getArray&lt;/code&gt; 기본 데이터 형식으로 매핑하는 기본 유형을 실현하는데 사용되며, 다음 리턴 어레이가 그 기본 데이터 형식 또는 배열의 배열인지 구현 정의이다 &lt;code&gt;Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c9d73f97662bf6d8a055abdd185cc247dc909536" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the &lt;code&gt;MouseEvent&lt;/code&gt; is dispatched to its registered listeners its &lt;code&gt;component&lt;/code&gt; property will be set to &lt;code&gt;null&lt;/code&gt;. (See &lt;a href=&quot;event/componentevent#getComponent()&quot;&gt;&lt;code&gt;ComponentEvent.getComponent()&lt;/code&gt;&lt;/a&gt;) The &lt;code&gt;source&lt;/code&gt; property will be set to this &lt;code&gt;TrayIcon&lt;/code&gt;. (See &lt;a href=&quot;../../../java.base/java/util/eventobject#getSource()&quot;&gt;&lt;code&gt;EventObject.getSource()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;MouseEvent&lt;/code&gt; 가 등록 된 리스너로 전달 되면 해당 &lt;code&gt;component&lt;/code&gt; 속성이 &lt;code&gt;null&lt;/code&gt; 로 설정됩니다 . ( &lt;a href=&quot;event/componentevent#getComponent()&quot;&gt; &lt;code&gt;ComponentEvent.getComponent()&lt;/code&gt; &lt;/a&gt; 참조 ) &lt;code&gt;source&lt;/code&gt; 속성은이 &lt;code&gt;TrayIcon&lt;/code&gt; 으로 설정됩니다 . ( &lt;a href=&quot;../../../java.base/java/util/eventobject#getSource()&quot;&gt; &lt;code&gt;EventObject.getSource()&lt;/code&gt; &lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="2a3685246333dc01ce21c04b3c4e578f07115f3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; despite its name, this interface does &lt;em&gt;not&lt;/em&gt; extend the standard Java &lt;a href=&quot;../../../../java.base/java/io/reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; interface, because reading XML is a fundamentally different activity than reading character data.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이름에도 불구하고이 인터페이스는 표준 Java &lt;a href=&quot;../../../../java.base/java/io/reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt; 인터페이스를 확장 하지 &lt;em&gt;않습니다.&lt;/em&gt; XML 읽기는 문자 데이터 읽기와 근본적으로 다른 활동이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="b35950c2b21bdc553b08d69848a76be46961ab32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte array form instead of the String form. See the note in &lt;a href=&quot;#addPathToName(int,java.lang.String)&quot;&gt;&lt;code&gt;addPathToName(int, String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 문자열 형식 대신 바이트 배열 형식을 지정하십시오. 자세한 내용은 &lt;a href=&quot;#addPathToName(int,java.lang.String)&quot;&gt; &lt;code&gt;addPathToName(int, String)&lt;/code&gt; &lt;/a&gt; 의 참고 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9e354841d3f83a0ea4619ca071b86990d4c3b7dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte array form instead of the String form. See the note in &lt;a href=&quot;#addSubjectAlternativeName(int,java.lang.String)&quot;&gt;&lt;code&gt;addSubjectAlternativeName(int, String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 문자열 형식 대신 바이트 배열 형식을 지정하십시오. 자세한 내용은 &lt;a href=&quot;#addSubjectAlternativeName(int,java.lang.String)&quot;&gt; &lt;code&gt;addSubjectAlternativeName(int, String)&lt;/code&gt; &lt;/a&gt; 의 참고 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="16b6c8f33d9696a75745397000696eea46f6bba9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte array form instead of the String form. See the note in &lt;a href=&quot;x509certselector#addPathToName-int-java.lang.String-&quot;&gt;&lt;code&gt;addPathToName(int, String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 문자열 형식 대신 바이트 배열 형식을 지정하십시오. 자세한 내용은 &lt;a href=&quot;x509certselector#addPathToName-int-java.lang.String-&quot;&gt; &lt;code&gt;addPathToName(int, String)&lt;/code&gt; &lt;/a&gt; 의 참고 사항 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9d6fb575bcdce29e7a5392ade31041e7987af7e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, specify the byte array form instead of the String form. See the note in &lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-java.lang.String-&quot;&gt;&lt;code&gt;addSubjectAlternativeName(int, String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 문자열 형식 대신 바이트 배열 형식을 지정하십시오. 자세한 내용은 &lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-java.lang.String-&quot;&gt; &lt;code&gt;addSubjectAlternativeName(int, String)&lt;/code&gt; &lt;/a&gt; 의 참고 사항 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bbe676e7d80e99672baf4030053ebdd7c2b1584c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use &lt;a href=&quot;#addPathToName(int,byte%5B%5D)&quot;&gt;addPathToName(int, byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 대신 &lt;a href=&quot;#addPathToName(int,byte%5B%5D)&quot;&gt;addPathToName (int, byte [])를&lt;/a&gt; 사용하십시오. 이 방법은 일부 고유 이름의 RFC 2253 문자열 형식의 인코딩 정보 손실로 인해 일부 인증서를 일치시키지 못할 수 있으므로 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="d423467db6e448354ae76c16ac90fd943e32458c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use &lt;a href=&quot;#addSubjectAlternativeName(int,byte%5B%5D)&quot;&gt;addSubjectAlternativeName(int, byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 대신 &lt;a href=&quot;#addSubjectAlternativeName(int,byte%5B%5D)&quot;&gt;addSubjectAlternativeName (int, byte [])을&lt;/a&gt; 사용하십시오. 이 방법은 일부 고유 이름의 RFC 2253 문자열 형식의 인코딩 정보 손실로 인해 일부 인증서를 일치시키지 못할 수 있으므로 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="23afa8791834917ccddb5255aa9b5b964536f3f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use &lt;a href=&quot;x509certselector#addPathToName-int-byte:A-&quot;&gt;addPathToName(int, byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 &lt;a href=&quot;x509certselector#addPathToName-int-byte:A-&quot;&gt;addPathToName (int, byte [])을&lt;/a&gt; 대신 사용하십시오. 일부 고유 이름의 RFC 2253 문자열 형식에서 인코딩 정보가 손실되므로 일부 인증서와 일치하지 못할 수 있으므로이 방법에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="db3657b679774d0a5a8903692f2c89a5932f86a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for distinguished names, use &lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-byte:A-&quot;&gt;addSubjectAlternativeName(int, byte[])&lt;/a&gt; instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 고유 이름의 경우 &lt;a href=&quot;x509certselector#addSubjectAlternativeName-int-byte:A-&quot;&gt;addSubjectAlternativeName (int, byte [])을&lt;/a&gt; 대신 사용하십시오. 일부 고유 이름의 RFC 2253 문자열 형식으로 인코딩 정보가 손실되므로 일부 인증서와 일치하지 않을 수 있으므로이 방법을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3bd1dc5cbd6151af692d40f444bdd4bbf5ba7e53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if there is a default prefix, it will not be returned in this enumeration; check for the default prefix using the &lt;a href=&quot;#getURI(java.lang.String)&quot;&gt;&lt;code&gt;getURI&lt;/code&gt;&lt;/a&gt; with an argument of &quot;&quot;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 기본 접두사가있는 경우이 열거에 반환되지 않습니다. &quot;&quot;인수와 함께 &lt;a href=&quot;#getURI(java.lang.String)&quot;&gt; &lt;code&gt;getURI&lt;/code&gt; &lt;/a&gt; 를 사용하여 기본 접 두부를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="d75b02637d3d67878ebcff9d7900df2fc2652a37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; sometimes there is no way to detect whether the &lt;code&gt;Component&lt;/code&gt; is actually visible to the user. This can happen when:</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 때로는 &lt;code&gt;Component&lt;/code&gt; 가 실제로 사용자에게 표시 되는지 여부를 감지 할 방법이 없습니다 . 다음과 같은 경우에 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa45aa16bea5c07f810115fd11aa009a9112fac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the empty (default) prefix is &lt;em&gt;never&lt;/em&gt; included in this enumeration; to check for the presence of a default Namespace, use the &lt;a href=&quot;#getURI(java.lang.String)&quot;&gt;&lt;code&gt;getURI&lt;/code&gt;&lt;/a&gt; method with an argument of &quot;&quot;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 빈 (기본값) 접두사는 이 열거에 포함 &lt;em&gt;되지&lt;/em&gt; 않습니다. 기본 네임 스페이스가 있는지 확인하려면 &quot;&quot;인수와 함께 &lt;a href=&quot;#getURI(java.lang.String)&quot;&gt; &lt;code&gt;getURI&lt;/code&gt; &lt;/a&gt; 메서드를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="b76999b62d1828fe7f9c2ffaa320379bf5aa5849" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this will never return the empty (default) prefix; to check for a default prefix, use the &lt;a href=&quot;#getURI(java.lang.String)&quot;&gt;&lt;code&gt;getURI&lt;/code&gt;&lt;/a&gt; method with an argument of &quot;&quot;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이것은 빈 (기본) 접두사를 반환하지 않습니다. 기본 접두사를 확인하려면 &quot;&quot;인수와 함께 &lt;a href=&quot;#getURI(java.lang.String)&quot;&gt; &lt;code&gt;getURI&lt;/code&gt; &lt;/a&gt; 메서드를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="20cc83f0cb7966d1eeb741488e9994b13b7721a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; use &lt;a href=&quot;#setIssuers(java.util.Collection)&quot;&gt;setIssuers(Collection)&lt;/a&gt; instead or only specify the byte array form of distinguished names when using this method.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 대신 &lt;a href=&quot;#setIssuers(java.util.Collection)&quot;&gt;setIssuers (Collection)&lt;/a&gt; 를 사용 하거나이 메서드를 사용할 때 고유 이름의 바이트 배열 형식 만 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="b5f029920728b826d0898587539f2a924f214fff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; use &lt;a href=&quot;#setIssuers(java.util.Collection)&quot;&gt;setIssuers(Collection)&lt;/a&gt; instead or only specify the byte array form of distinguished names when using this method. See &lt;a href=&quot;#addIssuerName(java.lang.String)&quot;&gt;&lt;code&gt;addIssuerName(String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 대신 &lt;a href=&quot;#setIssuers(java.util.Collection)&quot;&gt;setIssuers (Collection)&lt;/a&gt; 를 사용 하거나이 메서드를 사용할 때 고유 이름의 바이트 배열 형식 만 지정하십시오. 자세한 내용은 &lt;a href=&quot;#addIssuerName(java.lang.String)&quot;&gt; &lt;code&gt;addIssuerName(String)&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4674f9fe857ac066f0bf22d34b223b40ea904e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; use &lt;a href=&quot;x509crlselector#setIssuers-java.util.Collection-&quot;&gt;setIssuers(Collection)&lt;/a&gt; instead or only specify the byte array form of distinguished names when using this method. See &lt;a href=&quot;x509crlselector#addIssuerName-java.lang.String-&quot;&gt;&lt;code&gt;addIssuerName(String)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;x509crlselector#setIssuers-java.util.Collection-&quot;&gt;setIssuers (Collection)를&lt;/a&gt; 대신 사용 하거나이 메소드를 사용할 때 식별 이름의 바이트 배열 양식 만 지정하십시오. 자세한 정보는 &lt;a href=&quot;x509crlselector#addIssuerName-java.lang.String-&quot;&gt; &lt;code&gt;addIssuerName(String)&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="13c580469b184e3d362ad5398af8c82f8a4c9261" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;ChoiceFormat&lt;/code&gt; differs from the other &lt;code&gt;Format&lt;/code&gt; classes in that you create a &lt;code&gt;ChoiceFormat&lt;/code&gt; object with a constructor (not with a &lt;code&gt;getInstance&lt;/code&gt; style factory method). The factory methods aren't necessary because &lt;code&gt;ChoiceFormat&lt;/code&gt; doesn't require any complex setup for a given locale. In fact, &lt;code&gt;ChoiceFormat&lt;/code&gt; doesn't implement any locale specific behavior.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;ChoiceFormat&lt;/code&gt; 은 &lt;code&gt;getInstance&lt;/code&gt; 스타일 팩토리 메소드가 아닌 생성자 를 사용하여 &lt;code&gt;ChoiceFormat&lt;/code&gt; 객체 를 작성한다는 점에서 다른 &lt;code&gt;Format&lt;/code&gt; 클래스 와 다릅니다 . &lt;code&gt;ChoiceFormat&lt;/code&gt; 은 지정된 로케일에 대해 복잡한 설정이 필요하지 않으므로 팩토리 메소드는 필요 하지 않습니다. 실제로 &lt;code&gt;ChoiceFormat&lt;/code&gt; 은 로캘 별 동작을 구현하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2a308cb120296e578c3ef51d826ba801ab6b63e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;CollationKey&lt;/code&gt;s from different &lt;code&gt;Collator&lt;/code&gt;s can not be compared. See the class description for &lt;a href=&quot;collationkey&quot;&gt;&lt;code&gt;CollationKey&lt;/code&gt;&lt;/a&gt; for an example using &lt;code&gt;CollationKey&lt;/code&gt;s.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 다른 &lt;code&gt;Collator&lt;/code&gt; 의 &lt;code&gt;CollationKey&lt;/code&gt; 는 비교할 수 없습니다. 의 클래스의 설명을 참조하십시오 &lt;a href=&quot;collationkey&quot;&gt; &lt;code&gt;CollationKey&lt;/code&gt; &lt;/a&gt; 사용하는 예는 &lt;code&gt;CollationKey&lt;/code&gt; 를 들.</target>
        </trans-unit>
        <trans-unit id="ef2f7f2dccb6f08d9a470dc2ade5b7cbfa930fcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;MessageFormat&lt;/code&gt; differs from the other &lt;code&gt;Format&lt;/code&gt; classes in that you create a &lt;code&gt;MessageFormat&lt;/code&gt; object with one of its constructors (not with a &lt;code&gt;getInstance&lt;/code&gt; style factory method). The factory methods aren't necessary because &lt;code&gt;MessageFormat&lt;/code&gt; itself doesn't implement locale specific behavior. Any locale specific behavior is defined by the pattern that you provide as well as the subformats used for inserted arguments.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;MessageFormat&lt;/code&gt; 은 &lt;code&gt;getInstance&lt;/code&gt; 스타일 팩토리 메소드가 아닌 생성자 중 하나 를 사용하여 &lt;code&gt;MessageFormat&lt;/code&gt; 객체 를 작성한다는 점에서 다른 &lt;code&gt;Format&lt;/code&gt; 클래스 와 다릅니다 . &lt;code&gt;MessageFormat&lt;/code&gt; 자체는 로케일 특정 동작을 구현하지 않기 때문에 팩토리 메소드는 필요 하지 않습니다. 로케일 특정 동작은 사용자가 제공 한 패턴과 삽입 된 인수에 사용되는 하위 형식으로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="cee01bec41ba890ef24d3c3949abc450b686d8c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;getRow&lt;/code&gt; method is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;getRow&lt;/code&gt; 메소드에 대한 지원 은 결과 세트 유형이 &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; 인 &lt;code&gt;ResultSet&lt;/code&gt; 에 대해 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="7fc1bfab6dbd91b8ea4361ca54a598f2954ec8d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;isAfterLast&lt;/code&gt; method is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 결과 세트 유형이 &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; 인 &lt;code&gt;ResultSet&lt;/code&gt; 에 대한 &lt;code&gt;isAfterLast&lt;/code&gt; 메소드 지원 은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="c6d1faf8e7707f510aab0be7e083089471bf7735" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;isBeforeFirst&lt;/code&gt; method is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 결과 세트 유형이 &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; 인 &lt;code&gt;ResultSet&lt;/code&gt; 에 대한 &lt;code&gt;isBeforeFirst&lt;/code&gt; 메소드 지원 은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="8fb8852f9d3271eb918f03035b7e7528cb151b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;isFirst&lt;/code&gt; method is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 결과 세트 유형이 &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; 인 &lt;code&gt;ResultSet&lt;/code&gt; 에 대한 &lt;code&gt;isFirst&lt;/code&gt; 메소드 지원 은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="bb6789e02ae2c782e691d97450b96c45caefec30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;This method cannot be called on a &lt;code&gt;PreparedStatement&lt;/code&gt; or &lt;code&gt;CallableStatement&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 메서드는 &lt;code&gt;PreparedStatement&lt;/code&gt; 또는 &lt;code&gt;CallableStatement&lt;/code&gt; 에서 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="fc106fafbfa47fa5aade2da8b9d7a4f5ed0863dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: several methods return submaps with restricted key ranges. Such ranges are &lt;em&gt;half-open&lt;/em&gt;, that is, they include their low endpoint but not their high endpoint (where applicable). If you need a &lt;em&gt;closed range&lt;/em&gt; (which includes both endpoints), and the key type allows for calculation of the successor of a given key, merely request the subrange from &lt;code&gt;lowEndpoint&lt;/code&gt; to &lt;code&gt;successor(highEndpoint)&lt;/code&gt;. For example, suppose that &lt;code&gt;m&lt;/code&gt; is a map whose keys are strings. The following idiom obtains a view containing all of the key-value mappings in &lt;code&gt;m&lt;/code&gt; whose keys are between &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;, inclusive:</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 몇몇 메소드는 키 범위가 제한된 서브맵을 반환합니다. 이러한 범위는&lt;em&gt; 반 개방형입니다&lt;/em&gt; . 즉, 낮은 종점을 포함하지만 높은 종말점을 포함하지 않습니다 (해당되는 경우). &lt;em&gt;닫힌 범위&lt;/em&gt; (두 끝점 모두 포함) 가 필요 하고 키 유형이 주어진 키의 후속 작업을 계산할 수있는 경우 &lt;code&gt;lowEndpoint&lt;/code&gt; 에서 &lt;code&gt;successor(highEndpoint)&lt;/code&gt; 까지 하위 범위를 요청하십시오 . 예를 들어, &lt;code&gt;m&lt;/code&gt; 이 키가 문자열 인 맵 이라고 가정하십시오 . 다음 관용구의 키 값의 매핑을 모두 포함하는 뷰 취득 &lt;code&gt;m&lt;/code&gt; 키 사이에 &lt;code&gt;low&lt;/code&gt; 그리고 &lt;code&gt;high&lt;/code&gt; , 클루 시브 :</target>
        </trans-unit>
        <trans-unit id="a6a71817e55a35ab1983902bd2c10c8ca368f201" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Relation&lt;/strong&gt;: The relations are the following:</source>
          <target state="translated">&lt;strong&gt;관계&lt;/strong&gt; : 관계는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f3495fc795efc33287681c552eb1c5f73004a324" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reset&lt;/strong&gt;: There is a single reset which is used primarily for contractions and expansions, but which can also be used to add a modification at the end of a set of rules.</source>
          <target state="translated">&lt;strong&gt;재설정&lt;/strong&gt; : 주로 수축 및 확장에 사용되는 단일 재설정이 있지만 일련의 규칙 끝에 수정을 추가하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="55d6a7c94e68da3f247a7a595eba405da783071d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Roll rule&lt;/strong&gt;. Larger fields are unchanged after the call. A larger field represents a larger unit of time. &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; is a larger field than &lt;code&gt;HOUR&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;롤 규칙&lt;/strong&gt; . 통화 후 더 큰 필드는 변경되지 않습니다. 더 큰 필드는 더 큰 시간 단위를 나타냅니다. &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; 는 &lt;code&gt;HOUR&lt;/code&gt; 보다 큰 필드 입니다.</target>
        </trans-unit>
        <trans-unit id="f51b3bec87550c44f209799d8a4e63a90a5bef84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Support for additional schema langauges.&lt;/strong&gt; The JAXP parser implementations support only a subset of the available XML schema languages. The Validation API provides a standard mechanism through which applications may take of advantage of specialization validation libraries which support additional schema languages.</source>
          <target state="translated">&lt;strong&gt;추가 스키마 언어 지원. &lt;/strong&gt;JAXP 파서 구현은 사용 가능한 XML 스키마 언어의 하위 집합 만 지원합니다. 유효성 검사 API는 애플리케이션이 추가 스키마 언어를 지원하는 특수화 유효성 검사 라이브러리를 활용할 수있는 표준 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fa3d006b4f3ae73a29744a64719d1c8b5ece5ac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Text-Argument&lt;/strong&gt;: A text-argument is any sequence of characters, excluding special characters (that is, common whitespace characters [0009-000D, 0020] and rule syntax characters [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those characters are desired, you can put them in single quotes (e.g. ampersand =&amp;gt; '&amp;amp;'). Note that unquoted white space characters are ignored; e.g. &lt;code&gt;b c&lt;/code&gt; is treated as &lt;code&gt;bc&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;텍스트 인수&lt;/strong&gt; : 텍스트 인수는 특수 문자 (공통 공백 문자 [0009-000D, 0020] 및 규칙 구문 문자 [0021-002F, 003A-0040, 005B-0060, 007B-)를 제외한 모든 문자 시퀀스입니다. 007E]). 해당 문자가 필요한 경우 작은 따옴표로 묶을 수 있습니다 (예 : 앰퍼샌드 =&amp;gt; '&amp;amp;'). 따옴표없는 공백 문자는 무시됩니다. 예 &lt;code&gt;b c&lt;/code&gt; 로 처리됩니다 &lt;code&gt;bc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f507cc8d016be5aa51f98eddbf964bd1d56a6b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;Iterator&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; modifiable. e.g. the &lt;code&gt;remove()&lt;/code&gt; method will throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;Iterator&lt;/code&gt; 것입니다 &lt;em&gt;없습니다&lt;/em&gt; 수정. 예를 들어 &lt;code&gt;remove()&lt;/code&gt; 메서드는 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 을 발생 시킵니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff9f917a8c021a47e64bf7bb0c7dc3836e7d8261" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;There is an apparent contradiction between the documentation for this method and the documentation for &lt;a href=&quot;contenthandler#endDocument()&quot;&gt;&lt;code&gt;ContentHandler.endDocument()&lt;/code&gt;&lt;/a&gt;. Until this ambiguity is resolved in a future major release, clients should make no assumptions about whether endDocument() will or will not be invoked when the parser has reported a fatalError() or thrown an exception.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이 메소드에 대한 문서와 &lt;a href=&quot;contenthandler#endDocument()&quot;&gt; &lt;code&gt;ContentHandler.endDocument()&lt;/code&gt; &lt;/a&gt; 문서간에 명백한 모순이 있습니다. 이 모호성이 향후 주요 릴리스에서 해결 될 때까지 클라이언트는 파서가 fatalError ()를보고했거나 예외를 throw했을 때 endDocument ()가 호출 될지 여부에 대해 가정하지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60f11df7365d106a323e3c0876d49f0d44b9ab20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;There is an apparent contradiction between the documentation for this method and the documentation for &lt;a href=&quot;errorhandler#fatalError(org.xml.sax.SAXParseException)&quot;&gt;&lt;code&gt;ErrorHandler.fatalError(org.xml.sax.SAXParseException)&lt;/code&gt;&lt;/a&gt;. Until this ambiguity is resolved in a future major release, clients should make no assumptions about whether endDocument() will or will not be invoked when the parser has reported a fatalError() or thrown an exception.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이 메서드에 대한 설명서와 &lt;a href=&quot;errorhandler#fatalError(org.xml.sax.SAXParseException)&quot;&gt; &lt;code&gt;ErrorHandler.fatalError(org.xml.sax.SAXParseException)&lt;/code&gt; &lt;/a&gt; 설명서간에 명백한 모순이 있습니다. 이 모호성이 향후 주요 릴리스에서 해결 될 때까지 클라이언트는 파서가 fatalError ()를보고했거나 예외를 throw했을 때 endDocument ()가 호출 될지 여부에 대해 가정하지 않아야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f7adbe8ba0e535437a73edd7bc545040789286be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This class is for &lt;code&gt;Preferences&lt;/code&gt; implementers only. Normal users of the &lt;code&gt;Preferences&lt;/code&gt; facility should have no need to consult this documentation. The &lt;a href=&quot;preferences&quot;&gt;&lt;code&gt;Preferences&lt;/code&gt;&lt;/a&gt; documentation should suffice.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이 클래스는 &lt;code&gt;Preferences&lt;/code&gt; 구현 자만을위한 것입니다. &lt;code&gt;Preferences&lt;/code&gt; 기능 의 일반 사용자는 이 문서를 참조 할 필요가 없습니다. &lt;a href=&quot;preferences&quot;&gt; &lt;code&gt;Preferences&lt;/code&gt; &lt;/a&gt; 문서는 충분합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2ffdbf28e8059c8a9fddfc931e88a6f48623e8d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This class is for &lt;code&gt;Preferences&lt;/code&gt; implementers only. Normal users of the &lt;code&gt;Preferences&lt;/code&gt; facility should have no need to consult this documentation.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이 클래스는 &lt;code&gt;Preferences&lt;/code&gt; 구현 자만을위한 것입니다. &lt;code&gt;Preferences&lt;/code&gt; 기능 의 일반 사용자는 이 문서를 참조 할 필요가 없습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e898de443cd96bd8c85b25c0624b65407345a4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip for Trouble-shooting:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;문제 해결을위한 팁 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a6523a0d1258595c00128ecc59dbaa49e55e8e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage model&lt;/strong&gt;. To motivate the behavior of &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;roll()&lt;/code&gt;, consider a user interface component with increment and decrement buttons for the month, day, and year, and an underlying &lt;code&gt;GregorianCalendar&lt;/code&gt;. If the interface reads January 31, 1999 and the user presses the month increment button, what should it read? If the underlying implementation uses &lt;code&gt;set()&lt;/code&gt;, it might read March 3, 1999. A better result would be February 28, 1999. Furthermore, if the user presses the month increment button again, it should read March 31, 1999, not March 28, 1999. By saving the original date and using either &lt;code&gt;add()&lt;/code&gt; or &lt;code&gt;roll()&lt;/code&gt;, depending on whether larger fields should be affected, the user interface can behave as most users will intuitively expect.</source>
          <target state="translated">&lt;strong&gt;사용 모델&lt;/strong&gt; . &lt;code&gt;add()&lt;/code&gt; 및 &lt;code&gt;roll()&lt;/code&gt; 의 동작을 동기 부여하려면 월, 일 및 연도에 대한 증가 및 감소 버튼과 기본 &lt;code&gt;GregorianCalendar&lt;/code&gt; 가 있는 사용자 인터페이스 구성 요소를 고려하십시오 . 인터페이스에 1999 년 1 월 31 일이 표시되고 사용자가 월 단위 버튼을 누르면 무엇을 읽어야합니까? 기본 구현이 &lt;code&gt;set()&lt;/code&gt; 사용하는 경우 1999 년 3 월 3 일을 읽을 수 있습니다. 더 좋은 결과는 1999 년 2 월 28 일입니다. 또한 사용자가 월 단위 버튼을 다시 누르면 1999 년 3 월 31 일이 아니라 3 월 28 일을 읽습니다. 원래 날짜를 저장하고 &lt;code&gt;add()&lt;/code&gt; 사용하여 또는 &lt;code&gt;roll()&lt;/code&gt; 더 큰 필드가 영향을 받는지 여부에 따라 대부분의 사용자가 직관적으로 기대하는대로 사용자 인터페이스가 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6e676bd625190c38401fa251c1a404d083ffe0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; If an application does &lt;em&gt;not&lt;/em&gt; register an ErrorHandler, XML parsing errors will go unreported, except that &lt;em&gt;SAXParseException&lt;/em&gt;s will be thrown for fatal errors. In order to detect validity errors, an ErrorHandler that does something with &lt;a href=&quot;#error(org.xml.sax.SAXParseException)&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt; calls must be registered.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 애플리케이션이 ErrorHandler를 등록 하지 &lt;em&gt;않으면&lt;/em&gt; XML 구문 분석 오류가보고되지 않습니다. 단, &lt;em&gt;SAXParseException&lt;/em&gt; 은 치명적인 오류에 대해 throw됩니다. 유효성 오류를 감지하려면 &lt;a href=&quot;#error(org.xml.sax.SAXParseException)&quot;&gt; &lt;code&gt;error()&lt;/code&gt; &lt;/a&gt; 호출로 작업 을 수행하는 ErrorHandler를 등록해야합니다.</target>
        </trans-unit>
        <trans-unit id="ba66b3431650beb72d9ab0b06266c420fd59a26b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: Deserialization of untrusted data is inherently dangerous and should be avoided. Untrusted data should be carefully validated according to the &quot;Serialization and Deserialization&quot; section of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=secure_coding_guidelines_javase&quot;&gt;Secure Coding Guidelines for Java SE&lt;/a&gt;. &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;경고 : 신뢰할 수없는 데이터의 역 직렬화는 본질적으로 위험하므로 피해야합니다. 신뢰할 수없는 데이터는 &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=secure_coding_guidelines_javase&quot;&gt;Java SE 용 보안 코딩 지침&lt;/a&gt; 의 &quot;직렬화 및 역 직렬화&quot;섹션에 따라 신중하게 유효성을 검사해야합니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="82c74f9cd8506f7716f64136623b1d9c81c176fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning: Deserialization of untrusted data is inherently dangerous and should be avoided. Untrusted data should be carefully validated according to the &quot;Serialization and Deserialization&quot; section of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=secure_coding_guidelines_javase&quot;&gt;Secure Coding Guidelines for Java SE&lt;/a&gt;. &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=serialization_filter_guide&quot;&gt;Serialization Filtering&lt;/a&gt; describes best practices for defensive use of serial filters. &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;경고 : 신뢰할 수없는 데이터의 역 직렬화는 본질적으로 위험하므로 피해야합니다. 신뢰할 수없는 데이터는 &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=secure_coding_guidelines_javase&quot;&gt;Java SE 용 보안 코딩 지침&lt;/a&gt; 의 &quot;직렬화 및 역 직렬화&quot;섹션에 따라 신중하게 유효성을 검사해야합니다 . &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=serialization_filter_guide&quot;&gt;직렬화 필터링&lt;/a&gt; 은 직렬 필터를 방어 적으로 사용하기위한 모범 사례를 설명합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc16a158ab6debd5a55d9e011a87abb1eedaa67b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; As the &lt;code&gt;AbstractFormatter&lt;/code&gt; will typically install a &lt;code&gt;DocumentFilter&lt;/code&gt; on the &lt;code&gt;Document&lt;/code&gt;, and a &lt;code&gt;NavigationFilter&lt;/code&gt; on the &lt;code&gt;JFormattedTextField&lt;/code&gt; you should not install your own. If you do, you are likely to see odd behavior in that the editing policy of the &lt;code&gt;AbstractFormatter&lt;/code&gt; will not be enforced.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 는 AS &lt;code&gt;AbstractFormatter&lt;/code&gt; 일반적으로 설치됩니다 &lt;code&gt;DocumentFilter&lt;/code&gt; 를 온 &lt;code&gt;Document&lt;/code&gt; 및 &lt;code&gt;NavigationFilter&lt;/code&gt; 를을 온 &lt;code&gt;JFormattedTextField&lt;/code&gt; 에 자신을 설치하지 않아야합니다. 그렇게하면 &lt;code&gt;AbstractFormatter&lt;/code&gt; 의 편집 정책 이 적용되지 않는다는 이상한 동작이 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0081b8c7026432cd484592507be27858e033ac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; By default, pressing the Tab key does not transfer focus from a &lt;code&gt;
 JMenuBar&lt;/code&gt; which is added to a container together with other Swing components, because the &lt;code&gt;focusTraversalKeysEnabled&lt;/code&gt; property of &lt;code&gt;JMenuBar&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. To resolve this, you should call the &lt;code&gt;JMenuBar.setFocusTraversalKeysEnabled(true)&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 기본적으로에서 초점을 전송하지 않습니다 Tab 키를 눌러 &lt;code&gt; JMenuBar&lt;/code&gt; (가) 때문에, 다른 스윙 구성 요소와 함께 컨테이너에 추가 &lt;code&gt;focusTraversalKeysEnabled&lt;/code&gt; 의 재산 &lt;code&gt;JMenuBar&lt;/code&gt; 설정되어 &lt;code&gt;false&lt;/code&gt; . 이를 해결하려면 &lt;code&gt;JMenuBar.setFocusTraversalKeysEnabled(true)&lt;/code&gt; 메소드를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="80e826a390fd926fd15e49c264da29973f5d12b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Focus and keyboard navigation problems may arise if you add duplicate String objects. A workaround is to add new objects instead of String objects and make sure that the toString() method is defined. For example:</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 중복 String 개체를 추가하면 포커스 및 키보드 탐색 문제가 발생할 수 있습니다. 해결 방법은 String 객체 대신 새 객체를 추가하고 toString () 메서드가 정의되어 있는지 확인하는 것입니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="5ff493cc702522689328489e5829f2710a1e5da1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Returning an external subset modifies the input document. By providing definitions for general entities, it can make a malformed document appear to be well formed.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 외부 하위 집합을 반환하면 입력 문서가 수정됩니다. 일반 엔터티에 대한 정의를 제공함으로써 잘못된 형식의 문서가 잘 구성된 것처럼 보일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3636def0ebe3c9b7007374ae6e75fe3ecb62c77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Serialized objects of this class will not be compatible with future Swing releases.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 이 클래스의 직렬화 된 객체는 향후 Swing 릴리스와 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1e9c75054525c2d2b40655beb8bba667b65d31f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans&amp;trade; has been added to the &lt;code&gt;java.beans&lt;/code&gt; package. Please see &lt;a href=&quot;../../../../java/beans/xmlencoder&quot;&gt;&lt;code&gt;XMLEncoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 이 클래스의 직렬화 된 객체는 향후 Swing 릴리스와 호환되지 않습니다. 현재 직렬화 지원은 동일한 버전의 Swing을 실행하는 애플리케이션 간의 단기 저장 또는 RMI에 적합합니다. 1.4부터 모든 JavaBeans &amp;trade;의 장기 저장에 대한 지원이 &lt;code&gt;java.beans&lt;/code&gt; 패키지에 추가되었습니다 . &lt;a href=&quot;../../../../java/beans/xmlencoder&quot;&gt; &lt;code&gt;XMLEncoder&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="156c920646f79596a58a8c48da0f1e93196399f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans&amp;trade; has been added to the &lt;code&gt;java.beans&lt;/code&gt; package. Please see &lt;a href=&quot;../../../java/beans/xmlencoder&quot;&gt;&lt;code&gt;XMLEncoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 이 클래스의 직렬화 된 객체는 향후 Swing 릴리스와 호환되지 않습니다. 현재 직렬화 지원은 동일한 버전의 Swing을 실행하는 애플리케이션 간의 단기 저장 또는 RMI에 적합합니다. 1.4부터 모든 JavaBeans &amp;trade;의 장기 저장에 대한 지원이 &lt;code&gt;java.beans&lt;/code&gt; 패키지에 추가되었습니다 . &lt;a href=&quot;../../../java/beans/xmlencoder&quot;&gt; &lt;code&gt;XMLEncoder&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="02ffb86db905c995479c80f4cd784cc9788eb086" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans&amp;trade; has been added to the &lt;code&gt;java.beans&lt;/code&gt; package. Please see &lt;a href=&quot;../../java/beans/xmlencoder&quot;&gt;&lt;code&gt;XMLEncoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 이 클래스의 직렬화 된 객체는 향후 Swing 릴리스와 호환되지 않습니다. 현재 직렬화 지원은 동일한 버전의 Swing을 실행하는 애플리케이션 간의 단기 저장 또는 RMI에 적합합니다. 1.4부터 모든 JavaBeans &amp;trade;의 장기 저장에 대한 지원이 &lt;code&gt;java.beans&lt;/code&gt; 패키지에 추가되었습니다 . &lt;a href=&quot;../../java/beans/xmlencoder&quot;&gt; &lt;code&gt;XMLEncoder&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2d6fe2ff7630a62c7b1f25594417e9dcc9922b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more information see &lt;a href=&quot;package-summary#threading&quot;&gt;Swing's Threading Policy&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 스윙은 스레드로부터 안전하지 않습니다. 자세한 내용은 &lt;a href=&quot;package-summary#threading&quot;&gt;Swing의 스레딩 정책을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="46428376b41a4736808cc3de418fdad0d84575dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The View hierarchy can be traversed from the root view, and other things can be done as well. Things done in this way cannot be protected like simple method calls through the TextUI. Therefore, proper operation in the presence of concurrency must be arranged by any logic that calls this method!</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 뷰 계층은 루트 뷰에서 순회 할 수 있으며 다른 작업도 수행 할 수 있습니다. 이러한 방식으로 수행되는 작업은 TextUI를 통한 간단한 메서드 호출처럼 보호 할 수 없습니다. 따라서이 메서드를 호출하는 모든 논리에 의해 동시성이있는 상태에서 적절한 작업을 정렬해야합니다!</target>
        </trans-unit>
        <trans-unit id="3989d035d71a3e135cee095a2e7149db8c80a07e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The return value from the method is intended only as an approximation for the sake of diagnostics; it is not intended to provide sufficient information to edit the character content of the original XML document. For example, when lines contain combining character sequences, wide characters, surrogate pairs, or bi-directional text, the value may not correspond to the column in a text editor's display.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 메서드의 반환 값은 진단을위한 근사치로만 사용됩니다. 원본 XML 문서의 문자 내용을 편집하는 데 충분한 정보를 제공하기위한 것이 아닙니다. 예를 들어, 행에 결합 문자 시퀀스, 와이드 문자, 서로 게이트 쌍 또는 양방향 텍스트가 포함 된 경우 값은 텍스트 편집기 디스플레이의 열과 일치하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2421b256aa52ff9c1ccf9868c39e72754c20d794" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The return value from the method is intended only as an approximation for the sake of diagnostics; it is not intended to provide sufficient information to edit the character content of the original XML document. In some cases, these &quot;line&quot; numbers match what would be displayed as columns, and in others they may not match the source text due to internal entity expansion.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 메서드의 반환 값은 진단을위한 근사치로만 사용됩니다. 원본 XML 문서의 문자 내용을 편집하는 데 충분한 정보를 제공하기위한 것이 아닙니다. 어떤 경우에는 이러한 &quot;행&quot;번호가 열로 표시되는 것과 일치하고 다른 경우에는 내부 엔티티 확장으로 인해 소스 텍스트와 일치하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="266b9c7d1cd227bf46d8383331c2c534cb3a9b1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The return value from the method is intended only as an approximation for the sake of error reporting; it is not intended to provide sufficient information to edit the character content of the original XML document.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 메서드의 반환 값은 오류보고를위한 근사치로만 사용됩니다. 원본 XML 문서의 문자 내용을 편집하는 데 충분한 정보를 제공하기위한 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="21985473b3d61c21012ece4b313176f883a9b179" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This class implements &lt;a href=&quot;../../../../../java.base/java/io/serializable&quot;&gt;&lt;code&gt;Serializable&lt;/code&gt;&lt;/a&gt; as a side effect of it extending &lt;a href=&quot;../basic/basiclookandfeel&quot;&gt;&lt;code&gt;BasicLookAndFeel&lt;/code&gt;&lt;/a&gt;. It is not intended to be serialized. An attempt to serialize it will result in &lt;a href=&quot;../../../../../java.base/java/io/notserializableexception&quot;&gt;&lt;code&gt;NotSerializableException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 이 클래스는 &lt;a href=&quot;../basic/basiclookandfeel&quot;&gt; &lt;code&gt;BasicLookAndFeel&lt;/code&gt; &lt;/a&gt; 확장의 부작용으로 &lt;a href=&quot;../../../../../java.base/java/io/serializable&quot;&gt; &lt;code&gt;Serializable&lt;/code&gt; &lt;/a&gt; 을 구현 합니다. 직렬화 할 수 없습니다. 직렬화를 시도하면 &lt;a href=&quot;../../../../../java.base/java/io/notserializableexception&quot;&gt; &lt;code&gt;NotSerializableException&lt;/code&gt; &lt;/a&gt; 이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="ecef0bbee86d8c27cb2ff042c933619b73660bb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; We recommend that you &lt;em&gt;not&lt;/em&gt; create subclasses of this class. If you absolutely must create a subclass, be sure to invoke the superclass version of each method.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 이 클래스의 하위 클래스를 만들지 &lt;em&gt;않는&lt;/em&gt; 것이 좋습니다 . 반드시 하위 클래스를 만들어야하는 경우 각 메서드의 수퍼 클래스 버전을 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="96b0c9c7489bfd4c4158836d657171dd8d149515" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt;&lt;code&gt;DefaultTableModel&lt;/code&gt; returns a column class of &lt;code&gt;Object&lt;/code&gt;. When &lt;code&gt;DefaultTableModel&lt;/code&gt; is used with a &lt;code&gt;TableRowSorter&lt;/code&gt; this will result in extensive use of &lt;code&gt;toString&lt;/code&gt;, which for non-&lt;code&gt;String&lt;/code&gt; data types is expensive. If you use &lt;code&gt;DefaultTableModel&lt;/code&gt; with a &lt;code&gt;TableRowSorter&lt;/code&gt; you are strongly encouraged to override &lt;code&gt;getColumnClass&lt;/code&gt; to return the appropriate type.</source>
          <target state="translated">&lt;strong&gt;경고 : &lt;/strong&gt; &lt;code&gt;DefaultTableModel&lt;/code&gt; 은 &lt;code&gt;Object&lt;/code&gt; 의 열 클래스를 반환합니다 . 경우 &lt;code&gt;DefaultTableModel&lt;/code&gt; 함께 사용 &lt;code&gt;TableRowSorter&lt;/code&gt; 를 이 광범위하게 사용 될 것이다 &lt;code&gt;toString&lt;/code&gt; 비에 대해, &lt;code&gt;String&lt;/code&gt; 데이터 유형 비싸다. &lt;code&gt;TableRowSorter&lt;/code&gt; 와 함께 &lt;code&gt;DefaultTableModel&lt;/code&gt; 을 사용 하는 경우 &lt;code&gt;getColumnClass&lt;/code&gt; 를 재정 의하여 적절한 유형을 반환하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="1a4dbfd60ddd2ae5bc2e394d9bec2c60f4dd0044" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;i&gt;opt&lt;/i&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;i&gt;opt&lt;/i&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="de0f4e877e0dcacc6b548ebdb0de7f7af031fa32" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt; Depends on the definition of &lt;a href=&quot;formattable&quot;&gt;&lt;code&gt;Formattable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;1&lt;/sup&gt; 의 정의에 따라&lt;a href=&quot;formattable&quot;&gt; &lt;code&gt;Formattable&lt;/code&gt; 다릅니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c18d6e71a34fe8209f6204f366f7cb332c7dd04c" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; +</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; +</target>
        </trans-unit>
        <trans-unit id="2597a4bec834c34a56ab45519733a00d41053d50" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; For &lt;code&gt;'d'&lt;/code&gt; conversion only.</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; 의 경우 &lt;code&gt;'d'&lt;/code&gt; 만 전환.</target>
        </trans-unit>
        <trans-unit id="d0bcc49d2213a764ee7fceaf4a9b1c99b65c6ab7" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;) without intermediate overflow or underflow</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; ) 중간 오버 플로우 또는 언더 플로우없이</target>
        </trans-unit>
        <trans-unit id="b8a0e46b9a691b7062789b86d5efd4910967fd59" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;) without intermediate overflow or underflow.</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; ) 중간 오버플로 또는 언더 플로 없음.</target>
        </trans-unit>
        <trans-unit id="5205c0c6122f510a63e496b2c218115e94e6564d" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3&lt;/sup&gt; For &lt;code&gt;'o'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt;, and &lt;code&gt;'X'&lt;/code&gt; conversions only.</source>
          <target state="translated">&lt;sup&gt;3&lt;/sup&gt; 들어 &lt;code&gt;'o'&lt;/code&gt; , &lt;code&gt;'x'&lt;/code&gt; , 및 &lt;code&gt;'X'&lt;/code&gt; 의 전환 만.</target>
        </trans-unit>
        <trans-unit id="1074f936fb9e998e1b4069f5b737ea4c77d097d4" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4&lt;/sup&gt; For &lt;code&gt;'d'&lt;/code&gt;, &lt;code&gt;'o'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt;, and &lt;code&gt;'X'&lt;/code&gt; conversions applied to &lt;a href=&quot;../math/biginteger&quot;&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;'d'&lt;/code&gt; applied to &lt;code&gt;byte&lt;/code&gt;, &lt;a href=&quot;../lang/byte&quot;&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;a href=&quot;../lang/short&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;a href=&quot;../lang/integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;long&lt;/code&gt;, and &lt;a href=&quot;../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;4&lt;/sup&gt; 들어 &lt;code&gt;'d'&lt;/code&gt; , &lt;code&gt;'o'&lt;/code&gt; , &lt;code&gt;'x'&lt;/code&gt; 와 &lt;code&gt;'X'&lt;/code&gt; 전환인가 &lt;a href=&quot;../math/biginteger&quot;&gt; &lt;code&gt;BigInteger&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;'d'&lt;/code&gt; 에인가 &lt;code&gt;byte&lt;/code&gt; , &lt;a href=&quot;../lang/byte&quot;&gt; &lt;code&gt;Byte&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;short&lt;/code&gt; , &lt;a href=&quot;../lang/short&quot;&gt; &lt;code&gt;Short&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;int&lt;/code&gt; 및 &lt;a href=&quot;../lang/integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;long&lt;/code&gt; 및&lt;a href=&quot;../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1cbf27830e5e9235d5fadca0b7b2fbeff8e8286e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;5&lt;/sup&gt; For &lt;code&gt;'e'&lt;/code&gt;, &lt;code&gt;'E'&lt;/code&gt;, &lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'g'&lt;/code&gt;, and &lt;code&gt;'G'&lt;/code&gt; conversions only.</source>
          <target state="translated">&lt;sup&gt;5&lt;/sup&gt; 들어 &lt;code&gt;'e'&lt;/code&gt; , &lt;code&gt;'E'&lt;/code&gt; , &lt;code&gt;'f'&lt;/code&gt; , &lt;code&gt;'g'&lt;/code&gt; 및 &lt;code&gt;'G'&lt;/code&gt; 의 전환 만.</target>
        </trans-unit>
        <trans-unit id="c387cad14f96f3797404e05c2ba187515fcd6235" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;a&lt;/code&gt;&lt;/sup&gt;, where</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;a&lt;/code&gt; &lt;/sup&gt;, 어디</target>
        </trans-unit>
        <trans-unit id="b5c29c713c380389f4685bafc832846f1ca12da5" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; - 1 is within 1/2 ulp of the limit value -1, &lt;code&gt;-1.0&lt;/code&gt; should be returned.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1은 한계 값 -1의 1/2 ulp 내에 있으며, &lt;code&gt;-1.0&lt;/code&gt; 을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="c2135a42fc3333807a86f1f9e4e6958262803c8b" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; - 1.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1.</target>
        </trans-unit>
        <trans-unit id="1b216d6dbef77b084f6b35f200086ec73058e228" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; -1.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1.</target>
        </trans-unit>
        <trans-unit id="cd592b76807caff2a10355e16a8f793f23dbf715" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;capturing group&lt;/a&gt; and &lt;code&gt;\g{&lt;/code&gt;</source>
          <target state="translated">&lt;sup&gt;제 &lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;포착 기&lt;/a&gt; 및 &lt;code&gt;\g{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f76c86a36f13f2cba9267e9c8be26387681d1ca" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;capturing group&lt;/a&gt; matched</source>
          <target state="translated">&lt;sup&gt;제 &lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;포착 기&lt;/a&gt; 유사한</target>
        </trans-unit>
        <trans-unit id="37049399390566ec49b8a3a6a0e0b51f26048321" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; -1.</source>
          <target state="translated">&lt;sup&gt;x&lt;/sup&gt; -1.</target>
        </trans-unit>
        <trans-unit id="85a414158c654cf05eff4c426095be529210b3d3" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; -1. Note that for values of</source>
          <target state="translated">&lt;sup&gt;엑스&lt;/sup&gt; -1. 의 값에 대해</target>
        </trans-unit>
        <trans-unit id="6a993260c9b3e2f7c8670ea387d904181ca53d47" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; than &lt;code&gt;exp(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;sup&gt;X&lt;/sup&gt; 보다 &lt;code&gt;exp(x)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc525efcc305521da75e0e3a51a3972a5a9ddbee" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;Note&lt;/u&gt;: the optional packages implementing the optional part of the &lt;em&gt;JMX Remote API&lt;/em&gt; are not included in the &lt;em&gt;Java SE Platform&lt;/em&gt; but are available from the &lt;em&gt;JMX Remote API &lt;a href=&quot;http://java.sun.com/products/JavaManagement/download.html&quot;&gt; Reference Implementation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;u&gt;참고&lt;/u&gt; : &lt;em&gt;JMX Remote API&lt;/em&gt; 의 선택적 부분을 구현하는 선택적 패키지 는 &lt;em&gt;Java SE 플랫폼에&lt;/em&gt; 포함되어 있지 않지만 &lt;em&gt;JMX Remote API &lt;a href=&quot;http://java.sun.com/products/JavaManagement/download.html&quot;&gt;참조 구현에서 사용 가능합니다.&lt;/a&gt;&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c0f347eadc263dbe3156f7147779a70c0429a944" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;archivelist&lt;/var&gt; must be enclosed in double quote marks.</source>
          <target state="translated">&lt;var&gt;archivelist&lt;/var&gt; 는 큰 따옴표로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="0f7ae43de7edbd0bc080fcada93cb989036d38e9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;argumentType&lt;/var&gt; is the type of the argument that will be passed as parameter to the MBean's constructor.</source>
          <target state="translated">&lt;var&gt;argumentType&lt;/var&gt; 은 MBean의 생성자에 매개 변수로 전달 될 인수의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="1674d9d1a27cffdf0b23f453411f558dba05f8b3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;CompositeData&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 는 &lt;code&gt;CompositeData&lt;/code&gt; 인터페이스 도 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="fb05f6536453ff87492d9c522273919b1d7a3922" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 는 &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; 도 구현합니다. 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="50b92fe75a21071455ff482534f31f8857956624" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 는 &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; 도 구현합니다. 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="4bce2a26c7ed13e307bbf5478eebee587fc812ea" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 는 &lt;code&gt;OpenMBeanInfo&lt;/code&gt; 도 구현합니다. 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="19ee9467bed306ae58eb068d05a8e2ebfab5221c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 는 &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; 도 구현합니다. 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="155ef69e8e05f1c4d40bf9ce9cb7bcf2e4a2a321" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 는 &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; 도 구현합니다. 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="75c27052d7ad9e7ec808018e194884173ee3b254" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;TabularData&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 는 &lt;code&gt;TabularData&lt;/code&gt; 도 구현합니다. 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="253e502e7c38100be4045e40afe0238dc7f6f07f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; is non null,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; 가 null이 아닌 경우</target>
        </trans-unit>
        <trans-unit id="be7def36241841366cfcf2d66a6a803286e807d7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;r&lt;/var&gt; is identical to &lt;var&gt;l&lt;/var&gt;; or</source>
          <target state="translated">&lt;var&gt;r&lt;/var&gt; 은 &lt;var&gt;l&lt;/var&gt; ; 또는</target>
        </trans-unit>
        <trans-unit id="000f0cc4f75966810f276d4416f6272b5d9ca8a9" translate="yes" xml:space="preserve">
          <source>= &quot;NoMoreOftenThan&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= &quot;NoMoreOftenThan&quot;및 현재&amp;gt; 'lastPersistTime'+ 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="dc3f8fabe8a4ebf8b4483e92773970369ef510de" translate="yes" xml:space="preserve">
          <source>= &quot;always&quot;</source>
          <target state="translated">= &quot;항상&quot;</target>
        </trans-unit>
        <trans-unit id="1bf9dad3a3a2784844323dab08b5aaa968220d27" translate="yes" xml:space="preserve">
          <source>= &quot;never&quot;</source>
          <target state="translated">= &quot;never&quot;</target>
        </trans-unit>
        <trans-unit id="34903d623efbf67149181aefad27a2a5d9f47407" translate="yes" xml:space="preserve">
          <source>= &quot;onTimer&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= &quot;onTimer&quot;및 현재&amp;gt; 'lastPersistTime'+ 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="f2ac7312c97fa5c14d6b268b273d483de875b7de" translate="yes" xml:space="preserve">
          <source>= &quot;onUnregister&quot;</source>
          <target state="translated">= &quot;onUnregister&quot;</target>
        </trans-unit>
        <trans-unit id="6073d22b378d3717b8d914e2c234e32fa17432a7" translate="yes" xml:space="preserve">
          <source>= &quot;onUpdate&quot;</source>
          <target state="translated">= &quot;onUpdate&quot;</target>
        </trans-unit>
        <trans-unit id="64a9966d0ceabdfc0d6a5ba87b81e6f9017846d1" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;end&lt;/code&gt; - &lt;code&gt;start&lt;/code&gt; chars from the given string into this buffer, starting at the given &lt;code&gt;start&lt;/code&gt; index and at the current position of this buffer. The position of this buffer is then incremented by</source>
          <target state="translated">= &lt;code&gt;end&lt;/code&gt; - &lt;code&gt;start&lt;/code&gt; 주어진로부터, 버퍼로 지정된 문자열에서 문자를 &lt;code&gt;start&lt;/code&gt; 인덱스 및 현재의 버퍼의 현재 위치에. 이 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="28c7232e0a2e120dd8424f182ecc7a935bae8d44" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; -</source>
          <target state="translated">= &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="c9d552344caa9efd6762036644cc5c62516c425e" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the byte at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; 이 인덱스 0에 복사되고 인덱스의 바이트</target>
        </trans-unit>
        <trans-unit id="aed792725570a2f872c76857d21042195bb30c14" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the char at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; 은 인덱스 0에 복사되고 인덱스의 문자는</target>
        </trans-unit>
        <trans-unit id="21fee3245de177f4253dbc6a67add6bbeae887e7" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the double at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; 이 인덱스 0에 복사되고 인덱스에 이중</target>
        </trans-unit>
        <trans-unit id="ee5ebd2842327761e0a36d657d90805da9596bc5" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the float at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; 이 인덱스 0에 복사되고 인덱스에 float</target>
        </trans-unit>
        <trans-unit id="a8989acf643e840a55b06efc797f4ea5008a4996" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the int at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; 이 인덱스 0에 복사되고 인덱스의 int</target>
        </trans-unit>
        <trans-unit id="9a6aea9c2c83f43f46b312204abd9943d119eb36" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the long at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; 은 인덱스에서 긴 인덱스 0에 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="b2ac89c119732feac494ff47bbdede7fd7dcacd0" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the short at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; 이 인덱스 0에 복사되고 인덱스가 짧음</target>
        </trans-unit>
        <trans-unit id="be8c718160d931158eae8b4cb03c3be155a388a2" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; bytes from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; 주어진 버퍼에서이 버퍼로 바이트. 각 버퍼의 현재 위치에서 시작. 두 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="69153de829419c04279a7105bbabbf1880a25384" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; chars from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; 각 버퍼의 현재 위치에서 시작하여 지정된 버퍼에서이 버퍼로 문자를 . 두 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="47440d269c37d48340c7d1f028c7bb7576627972" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; doubles from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; 은 각 버퍼의 현재 위치에서 시작하여 지정된 버퍼에서이 버퍼로 두 배가됩니다. 두 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="524006f6324997801d2639eb94b4d225fcefe335" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; floats from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; 은 각 버퍼의 현재 위치에서 시작하여 지정된 버퍼에서이 버퍼로 플로팅합니다. 두 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="c1f1ac87c508781c2c937813352f423c40b5e590" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; ints from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= 주어진 버퍼에서이 버퍼로 &lt;code&gt;src.remaining()&lt;/code&gt; int, 각 버퍼의 현재 위치에서 시작. 두 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="1692b1504c9da0451bcfce3c110d60affb2641da" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; longs from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; 은 각 버퍼의 현재 위치에서 시작하여 지정된 버퍼에서이 버퍼로 길어 집니다. 두 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="cd0a9f2c8f1162d98a7f1d49d63febb05cb8a2a3" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; shorts from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; 은 각 버퍼의 현재 위치에서 시작하여 주어진 버퍼에서이 버퍼로 단락됩니다. 두 버퍼의 위치는 다음과 같이 증가합니다.</target>
        </trans-unit>
        <trans-unit id="a28ac76ff95178f962891214ed2bbdcac540aca1" translate="yes" xml:space="preserve">
          <source>= = &quot;NoMoreOftenThan&quot; and now &amp;lt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= = &quot;NoMoreOftenThan&quot;및 이제 &amp;lt; 'lastPersistTime'+ 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="254ea32e3f14a1b61854947afe774fcefe8a0c78" translate="yes" xml:space="preserve">
          <source>= = &quot;onTimer&quot; &amp;amp;&amp;amp; now &amp;lt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= = &quot;onTimer&quot;&amp;amp;&amp;amp; now &amp;lt; 'lastPersistTime'+ 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="2bcaf237b85571232711954ab87fc5fd94e1a619" translate="yes" xml:space="preserve">
          <source>=&amp;gt; &lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;</source>
          <target state="translated">=&amp;gt; &lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bab61eb53176449e25c2c82f172b82cb13ffb9d" translate="yes" xml:space="preserve">
          <source>?</source>
          <target state="translated">?</target>
        </trans-unit>
        <trans-unit id="a347759e33ed1f6c135c01aa7eadad17f6a3c812" translate="yes" xml:space="preserve">
          <source>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;double&lt;/code&gt;. That is, suppose that</source>
          <target state="translated">? 소수 부분을 나타내는 최소한 하나의 숫자가 있어야하며, 인수 값을 &lt;code&gt;double&lt;/code&gt; 유형의 인접한 값과 고유하게 구별하는 데 필요한 수만큼, 더 많은 숫자 만 있어야합니다 . 즉,</target>
        </trans-unit>
        <trans-unit id="a8cba9ed9d4d1b9f27317f69c50ee4ed11419a1d" translate="yes" xml:space="preserve">
          <source>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;float&lt;/code&gt;. That is, suppose that</source>
          <target state="translated">? 소수 부분을 나타내려면 적어도 하나의 숫자가 있어야하며, 인수 값을 &lt;code&gt;float&lt;/code&gt; 유형의 인접한 값과 고유하게 구별하는 데 필요한 수보다 많지만 더 많은 숫자 만 있어야합니다 . 즉,</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="5513e4eb0c8216dc7136f185aa48f14223d55392" translate="yes" xml:space="preserve">
          <source>A &quot;&lt;em&gt;spurious wakeup&lt;/em&gt;&quot; occurs.</source>
          <target state="translated">&quot; &lt;em&gt;스퓨리어스 웨이크 업&lt;/em&gt; &quot;이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0f3349c60554425c5718ffb5eb59dfc83572efa4" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets delivered whenever a bean changes a &quot;bound&quot; or &quot;constrained&quot; property.</source>
          <target state="translated">&quot;PropertyChange&quot;이벤트는 Bean이 &quot;bound&quot;또는 &quot;constrained&quot;특성을 변경할 때마다 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="641c6959c3dfc13b48a4945e633e5452ededb36f" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets delivered whenever a bean changes a &quot;bound&quot; or &quot;constrained&quot; property. A PropertyChangeEvent object is sent as an argument to the PropertyChangeListener and VetoableChangeListener methods.</source>
          <target state="translated">&quot;PropertyChange&quot;이벤트는 Bean이 &quot;bound&quot;또는 &quot;constrained&quot;특성을 변경할 때마다 전달됩니다. PropertyChangeEvent 객체는 PropertyChangeListener 및 VetoableChangeListener 메소드에 인수로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="4df819facc660a51f8d27eeac2181a40009a4e9e" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets fired whenever a bean changes a &quot;bound&quot; property.</source>
          <target state="translated">Bean이 &quot;바운드&quot;특성을 변경할 때마다 &quot;PropertyChange&quot;이벤트가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="748edf61f82044c2de9355255e500dd4fa92c8f4" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets fired whenever a bean changes a &quot;bound&quot; property. You can register a PropertyChangeListener with a source bean so as to be notified of any bound property updates.</source>
          <target state="translated">Bean이 &quot;바운드&quot;특성을 변경할 때마다 &quot;PropertyChange&quot;이벤트가 시작됩니다. 바인딩 된 특성 업데이트를 알리기 위해 소스 Bean에 PropertyChangeListener를 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74477595da6a327ec1904f24675655777c0cd5a0" translate="yes" xml:space="preserve">
          <source>A &quot;equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#EQ&quot;&gt;&lt;code&gt;EQ&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;동일&quot;제한 조건 리턴 된 오브젝트는 공개되지 않은 클래스 javax.management.BinaryRelQueryExp의 인스턴스로 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;query#EQ&quot;&gt; &lt;code&gt;EQ&lt;/code&gt; 인&lt;/a&gt; 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="806135f1a52f04469e38ea2065903e0417612389" translate="yes" xml:space="preserve">
          <source>A &quot;equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#EQ&quot;&gt;&lt;code&gt;EQ&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;같음&quot;제약 조건입니다. 반환 된 객체는 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;#EQ&quot;&gt; &lt;code&gt;EQ&lt;/code&gt; &lt;/a&gt; 와 같은 비 공용 클래스 &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExp&lt;/a&gt; 의 인스턴스로 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="0de043fb0225053ecca95aaef17dc683110891a0" translate="yes" xml:space="preserve">
          <source>A &quot;greater than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#GE&quot;&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;보다 크거나 같은&quot;제한 조건. 리턴 된 오브젝트는 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;query#GE&quot;&gt; &lt;code&gt;GE&lt;/code&gt; 인&lt;/a&gt; 비 공용 클래스 javax.management.BinaryRelQueryExp의 인스턴스로 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="bc3ecdef79ff1bfb9f7d7207928bcd10d5350dba" translate="yes" xml:space="preserve">
          <source>A &quot;greater than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#GE&quot;&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;크거나 같음&quot;제약 조건입니다. 반환 된 객체는 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;#GE&quot;&gt; &lt;code&gt;GE&lt;/code&gt; &lt;/a&gt; 와 같은 비 공용 클래스 &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExp&lt;/a&gt; 의 인스턴스로 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="a884531a739aabf42ac28cb17e1de598cfc3b3bc" translate="yes" xml:space="preserve">
          <source>A &quot;greater than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#GT&quot;&gt;&lt;code&gt;GT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;보다 큼&quot;제한. 리턴 된 오브젝트는 비 공용 클래스 javax.management.BinaryRelQueryExp의 인스턴스로 직렬화되며 &lt;code&gt;relOp&lt;/code&gt; 는 &lt;a href=&quot;query#GT&quot;&gt; &lt;code&gt;GT&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cbfa98504026d3c18ee01d321f7bdf3ec1d4c1cc" translate="yes" xml:space="preserve">
          <source>A &quot;greater than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#GT&quot;&gt;&lt;code&gt;GT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;보다 큼&quot;제약 조건입니다. 리턴 된 객체는 비공개 클래스의 인스턴스로서 직렬화한다 &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExp&lt;/a&gt; A를 &lt;code&gt;relOp&lt;/code&gt; 동일 &lt;a href=&quot;#GT&quot;&gt; &lt;code&gt;GT&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="da25afbc37982ef7e00ed1ad8dc107c0b3a9335b" translate="yes" xml:space="preserve">
          <source>A &quot;less than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#LE&quot;&gt;&lt;code&gt;LE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;작거나 같음&quot;제약 리턴 된 오브젝트는 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;query#LE&quot;&gt; &lt;code&gt;LE&lt;/code&gt; 인&lt;/a&gt; 비 공용 클래스 javax.management.BinaryRelQueryExp의 인스턴스로 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="b969cef0427ec7ab5db2c26f93f14dd1c4bde6b9" translate="yes" xml:space="preserve">
          <source>A &quot;less than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#LE&quot;&gt;&lt;code&gt;LE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;작거나 같음&quot;제약 조건입니다. 반환 된 객체는 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;#LE&quot;&gt; &lt;code&gt;LE&lt;/code&gt; &lt;/a&gt; 와 같은 비 공용 클래스 &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExp&lt;/a&gt; 의 인스턴스로 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="be9fee56b89e6dfc556451a6459fb3114cf7cfdb" translate="yes" xml:space="preserve">
          <source>A &quot;less than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#LT&quot;&gt;&lt;code&gt;LT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;보다 작음&quot;제약 리턴 된 오브젝트는 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;query#LT&quot;&gt; &lt;code&gt;LT&lt;/code&gt; 인&lt;/a&gt; 비 공용 클래스 javax.management.BinaryRelQueryExp의 인스턴스로 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="2e39b3bbfebf627cec72762c22afa78146b9d831" translate="yes" xml:space="preserve">
          <source>A &quot;less than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#LT&quot;&gt;&lt;code&gt;LT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수에 대한 &quot;보다 작음&quot;제약 조건입니다. 반환 된 객체는 &lt;code&gt;relOp&lt;/code&gt; 가 &lt;a href=&quot;#LT&quot;&gt; &lt;code&gt;LT&lt;/code&gt; &lt;/a&gt; 와 같은 비 공용 클래스 &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExp&lt;/a&gt; 의 인스턴스로 직렬화됩니다 .</target>
        </trans-unit>
        <trans-unit id="de08da0a62465d61a02c69fc3c0e07a5ba4bf8d3" translate="yes" xml:space="preserve">
          <source>A &quot;main&quot; &lt;code&gt;ForkJoinTask&lt;/code&gt; begins execution when it is explicitly submitted to a &lt;a href=&quot;forkjoinpool&quot;&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt;&lt;/a&gt;, or, if not already engaged in a ForkJoin computation, commenced in the &lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; via &lt;a href=&quot;#fork()&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#invoke()&quot;&gt;&lt;code&gt;invoke()&lt;/code&gt;&lt;/a&gt;, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using &lt;code&gt;ForkJoinTask&lt;/code&gt; employ only methods &lt;a href=&quot;#fork()&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#join()&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, or derivatives such as &lt;a href=&quot;#invokeAll(java.util.concurrent.ForkJoinTask...)&quot;&gt;&lt;code&gt;invokeAll&lt;/code&gt;&lt;/a&gt;. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing.</source>
          <target state="translated">A &quot;메인&quot; &lt;code&gt;ForkJoinTask&lt;/code&gt; 는 그것이 명시 적으로 전송 될 때 실행을 시작할 &lt;a href=&quot;forkjoinpool&quot;&gt; &lt;code&gt;ForkJoinPool&lt;/code&gt; &lt;/a&gt; 또는 이미에서 시작하는 ForkJoin 계산에 종사하지 않는 경우 &lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt; 통해 &lt;a href=&quot;#fork()&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#invoke()&quot;&gt; &lt;code&gt;invoke()&lt;/code&gt; &lt;/a&gt; 하거나, 관련 방법. 일단 시작되면 일반적으로 다른 하위 작업을 시작합니다. 이 클래스의 이름에서 알 수 있듯이 &lt;code&gt;ForkJoinTask&lt;/code&gt; 를 사용하는 많은 프로그램은 &lt;a href=&quot;#fork()&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#join()&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt; 메서드 또는 &lt;a href=&quot;#invokeAll(java.util.concurrent.ForkJoinTask...)&quot;&gt; &lt;code&gt;invokeAll&lt;/code&gt; &lt;/a&gt; 과 같은 파생물 만 사용합니다.. 그러나이 클래스는 고급 사용에서 사용할 수있는 여러 다른 메서드와 새로운 형식의 포크 / 조인 처리를 지원하는 확장 메커니즘도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c02a3212a46bc55a239d47bafb8d0b6642e57a37" translate="yes" xml:space="preserve">
          <source>A &quot;main&quot; &lt;code&gt;ForkJoinTask&lt;/code&gt; begins execution when it is explicitly submitted to a &lt;a href=&quot;forkjoinpool&quot;&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt;&lt;/a&gt;, or, if not already engaged in a ForkJoin computation, commenced in the &lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; via &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;forkjointask#invoke--&quot;&gt;&lt;code&gt;invoke()&lt;/code&gt;&lt;/a&gt;, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using &lt;code&gt;ForkJoinTask&lt;/code&gt; employ only methods &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;forkjointask#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, or derivatives such as &lt;a href=&quot;forkjointask#invokeAll-java.util.concurrent.ForkJoinTask...-&quot;&gt;&lt;code&gt;invokeAll&lt;/code&gt;&lt;/a&gt;. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing.</source>
          <target state="translated">A &quot;메인&quot; &lt;code&gt;ForkJoinTask&lt;/code&gt; 는 그것이 명시 적으로 전송 될 때 실행을 시작할 &lt;a href=&quot;forkjoinpool&quot;&gt; &lt;code&gt;ForkJoinPool&lt;/code&gt; &lt;/a&gt; 또는 이미에서 시작하는 ForkJoin 계산에 종사하지 않는 경우 &lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt; 통해 &lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;forkjointask#invoke--&quot;&gt; &lt;code&gt;invoke()&lt;/code&gt; &lt;/a&gt; 하거나, 관련 방법. 일단 시작되면 일반적으로 다른 하위 작업이 시작됩니다. 이 클래스의 이름에서 알 수 있듯이 &lt;code&gt;ForkJoinTask&lt;/code&gt; 를 사용하는 많은 프로그램은 &lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;forkjointask#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt; 메소드 또는 &lt;a href=&quot;forkjointask#invokeAll-java.util.concurrent.ForkJoinTask...-&quot;&gt; &lt;code&gt;invokeAll&lt;/code&gt; &lt;/a&gt; 과 같은 파생물 만 사용합니다.. 그러나이 클래스는 고급 사용법에서 사용할 수있는 여러 가지 다른 메소드와 새로운 형식의 포크 / 조인 처리를 지원하는 확장 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="dc943e5cfb69961b43a73ba91cd6046c46d3cf2b" translate="yes" xml:space="preserve">
          <source>A &quot;plain&quot; socket implements these methods exactly as described, without attempting to go through a firewall or proxy.</source>
          <target state="translated">&quot;일반&quot;소켓은 방화벽이나 프록시를 거치지 않고 설명 된대로 정확하게 이러한 방법을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="714027f0d67b1bf8b96c8ccc0f216b5a66a47b26" translate="yes" xml:space="preserve">
          <source>A &quot;pluggable look and feel&quot; (L&amp;amp;F) that can be specified by the programmer or (optionally) selected by the user at runtime. The look and feel for each component is provided by a &lt;em&gt;UI delegate&lt;/em&gt; -- an object that descends from &lt;a href=&quot;plaf/componentui&quot;&gt;&lt;code&gt;ComponentUI&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html&quot;&gt;How to Set the Look and Feel&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for more information.</source>
          <target state="translated">프로그래머가 지정하거나 런타임시 사용자가 (선택적으로) 선택할 수있는 &quot;플러그 가능한 모양과 느낌&quot;(L &amp;amp; F). 각 구성 요소의 모양과 느낌 은 &lt;a href=&quot;plaf/componentui&quot;&gt; &lt;code&gt;ComponentUI&lt;/code&gt; &lt;/a&gt; 에서 내려온 객체 인 &lt;em&gt;UI 델리게이트에&lt;/em&gt; 의해 제공됩니다 . 자세한 내용 은 &lt;em&gt;The Java Tutorial의 &lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html&quot;&gt;How to Set the Look and Feel&lt;/a&gt; 를 참조하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9465dad66907e5534f8ce78f8a2bcc5366eb7d63" translate="yes" xml:space="preserve">
          <source>A &quot;provides service-name with implementation-name&quot; directive.</source>
          <target state="translated">&quot;구현 명과 함께 서비스 명 제공&quot;지시어.</target>
        </trans-unit>
        <trans-unit id="c7bcf1682006ae246b205c9162c9f0602f85cd20" translate="yes" xml:space="preserve">
          <source>A &quot;requires (static|transitive)* module-name&quot; directive.</source>
          <target state="translated">&quot;requires (static | transitive) * module-name&quot;지시문.</target>
        </trans-unit>
        <trans-unit id="8a7bdab095c6dd95a987d94861c32e7a52ed7eff" translate="yes" xml:space="preserve">
          <source>A &quot;root class&quot; is determined as follows: if the remote object's class directly implements an interface that extends &lt;a href=&quot;../remote&quot;&gt;&lt;code&gt;Remote&lt;/code&gt;&lt;/a&gt;, then the remote object's class is the root class; otherwise, the root class is the most derived superclass of the remote object's class that directly implements an interface that extends &lt;code&gt;Remote&lt;/code&gt;.</source>
          <target state="translated">&quot;루트 클래스&quot;는 다음과 같이 결정됩니다. 원격 객체의 클래스가 &lt;a href=&quot;../remote&quot;&gt; &lt;code&gt;Remote&lt;/code&gt; &lt;/a&gt; 를 확장하는 인터페이스를 직접 구현하는 경우 원격 객체의 클래스는 루트 클래스입니다. 그렇지 않으면 루트 클래스는 &lt;code&gt;Remote&lt;/code&gt; 를 확장하는 인터페이스를 직접 구현하는 원격 객체 클래스에서 가장 많이 파생 된 수퍼 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="d3b2b197c97d0a70f7eb09f20de7797275be9cab" translate="yes" xml:space="preserve">
          <source>A &quot;uses service-name&quot; directive.</source>
          <target state="translated">&quot;서비스 이름 사용&quot;지시문.</target>
        </trans-unit>
        <trans-unit id="ba532363ce1d66c2c8ccfa4e11dfa3d0986d92e2" translate="yes" xml:space="preserve">
          <source>A 'requires' directive (irrespective of 'transitive') expresses that one module depends on some other module. The effect of the 'transitive' modifier is to cause additional modules to also depend on the other module. If module M 'requires transitive N', then not only does M depend on N, but any module that depends on M also depends on N. This allows M to be refactored so that some or all of its content can be moved to a new module N without breaking modules that have a 'requires M' directive.</source>
          <target state="translated">'requires'지시문 ( 'transitive'에 관계없이)은 한 모듈이 다른 모듈에 의존한다는 것을 나타냅니다. '전이'수정 자의 효과는 추가 모듈이 다른 모듈에도 종속되도록하는 것입니다. 모듈 M에 '전이 N이 필요'하면 M이 N에 의존 할뿐만 아니라 M에 의존하는 모든 모듈도 N에 의존합니다.이를 통해 M이 리팩토링되어 콘텐츠의 일부 또는 전부를 새 콘텐츠로 이동할 수 있습니다. 'requires M'지시문이있는 모듈을 중단하지 않고 모듈 N.</target>
        </trans-unit>
        <trans-unit id="9428d7434c49a807b44f9ca3264e255b1193cd1f" translate="yes" xml:space="preserve">
          <source>A (Notification, Listener ID) pair.</source>
          <target state="translated">(알림, 리스너 ID) 쌍입니다.</target>
        </trans-unit>
        <trans-unit id="2f407ba41c22ce011c5499faf836fd2378747934" translate="yes" xml:space="preserve">
          <source>A (transparent) specification of cryptographic parameters.</source>
          <target state="translated">암호화 매개 변수의 (투명한) 사양.</target>
        </trans-unit>
        <trans-unit id="58e3837094f5b54f63ba78d8733c9477066d3bba" translate="yes" xml:space="preserve">
          <source>A (transparent) specification of the key material that constitutes a cryptographic key.</source>
          <target state="translated">암호화 키를 구성하는 키 자료의 (투명한) 사양.</target>
        </trans-unit>
        <trans-unit id="8a0daedd32e98b9659cc4c7bd3330fef767ba115" translate="yes" xml:space="preserve">
          <source>A 10Mb JAR packed without this limit will typically pack about 10% smaller, but the packer may require a larger Java heap (about ten times the segment limit).</source>
          <target state="translated">이 제한이없는 10Mb JAR은 일반적으로 약 10 % 작게 포장되지만, 패커에는 더 큰 Java 힙 (세그먼트 제한의 ​​약 10 배)이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05bf1a9a5d16275ca3c45ce8c10234dc159e4f35" translate="yes" xml:space="preserve">
          <source>A 3-element &lt;code&gt;float&lt;/code&gt; array containing the x, y, and z components of the profile's &lt;code&gt;mediaWhitePointTag&lt;/code&gt;.</source>
          <target state="translated">프로필의 &lt;code&gt;mediaWhitePointTag&lt;/code&gt; 의 x, y, z 구성 요소를 포함 하는 3 요소 &lt;code&gt;float&lt;/code&gt; 배열 입니다.</target>
        </trans-unit>
        <trans-unit id="91ecface88db4fa194df61b4808b90c9557ce239" translate="yes" xml:space="preserve">
          <source>A 3x3 &lt;code&gt;float&lt;/code&gt; array that contains the x, y, and z components of the profile's &lt;code&gt;redColorantTag&lt;/code&gt;, &lt;code&gt;greenColorantTag&lt;/code&gt;, and &lt;code&gt;blueColorantTag&lt;/code&gt;.</source>
          <target state="translated">프로필의 &lt;code&gt;redColorantTag&lt;/code&gt; , &lt;code&gt;greenColorantTag&lt;/code&gt; 및 &lt;code&gt;blueColorantTag&lt;/code&gt; 의 x, y 및 z 구성 요소를 포함 하는 3x3 &lt;code&gt;float&lt;/code&gt; 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="d5ed81011075464149b1976fc773bb87522058f6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff3aed431ec27dfe240376bb132bbe524b2aa31f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#MEMORY_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#MEMORY_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="965f439c423479a4189eafcf9eab717600faf4ad" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#matches(java.lang.String,java.lang.CharSequence)&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method is defined by this class as a convenience for when a regular expression is used just once. This method compiles an expression and matches an input sequence against it in a single invocation. The statement</source>
          <target state="translated">&lt;a href=&quot;#matches(java.lang.String,java.lang.CharSequence)&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt; 방법은 정규 표현식은 한 번만 사용하는 경우의 편의를이 클래스에 의해 정의된다. 이 메소드는 표현식을 컴파일하고 단일 호출에서 입력 시퀀스를 일치시킵니다. 진술</target>
        </trans-unit>
        <trans-unit id="7e2d5fdb7fc493a397ed2e4debe3a1b2836de31a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt; representing the &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object is stored in the &lt;a href=&quot;../../../javax/management/notification#setUserData(java.lang.Object)&quot;&gt;&lt;code&gt;user data&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;../../../javax/management/notification&quot;&gt;&lt;code&gt;notification&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#from(javax.management.openmbean.CompositeData)&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; method is provided to convert from a &lt;code&gt;CompositeData&lt;/code&gt; to a &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object. For example:</source>
          <target state="translated">&lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; 에&lt;/a&gt; 대표 &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; 객체가 저장되는 &lt;a href=&quot;../../../javax/management/notification#setUserData(java.lang.Object)&quot;&gt; &lt;code&gt;user data&lt;/code&gt; &lt;/a&gt; (A)의 &lt;a href=&quot;../../../javax/management/notification&quot;&gt; &lt;code&gt;notification&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;#from(javax.management.openmbean.CompositeData)&quot;&gt; &lt;code&gt;from&lt;/code&gt; &lt;/a&gt; 방법은 변환에서 제공되는 &lt;code&gt;CompositeData&lt;/code&gt; 에 A와 &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; 객체입니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="1a37cb5a0b97de4647147b96fe32fdde82bc6e05" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt; representing the &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object is stored in the &lt;a href=&quot;../../../javax/management/notification#setUserData-java.lang.Object-&quot;&gt;&lt;code&gt;user data&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;../../../javax/management/notification&quot;&gt;&lt;code&gt;notification&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;memorynotificationinfo#from-javax.management.openmbean.CompositeData-&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; method is provided to convert from a &lt;code&gt;CompositeData&lt;/code&gt; to a &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object. For example:</source>
          <target state="translated">&lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; 에&lt;/a&gt; 대표 &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; 객체가 저장되는 &lt;a href=&quot;../../../javax/management/notification#setUserData-java.lang.Object-&quot;&gt; &lt;code&gt;user data&lt;/code&gt; &lt;/a&gt; (A)의 &lt;a href=&quot;../../../javax/management/notification&quot;&gt; &lt;code&gt;notification&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;memorynotificationinfo#from-javax.management.openmbean.CompositeData-&quot;&gt; &lt;code&gt;from&lt;/code&gt; &lt;/a&gt; 방법은 변환에서 제공되는 &lt;code&gt;CompositeData&lt;/code&gt; 에 A와 &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; 객체입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6503faa32cb286134021110311634dfb9c87d502" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../deque&quot;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt; that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element.</source>
          <target state="translated">요소를 검색 할 때 deque가 비어 있지 않을 때까지 대기하고 요소를 저장할 때 deque에서 공간을 사용할 수있을 때까지 대기하는 차단 작업을 추가로 지원 하는 &lt;a href=&quot;../deque&quot;&gt; &lt;code&gt;Deque&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dba6f0c1acf2151ba3a42a66c5c34a8aba57158d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;null&lt;/code&gt; if no resource with this name is found</source>
          <target state="translated">&lt;a href=&quot;../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt; 객체 또는 &lt;code&gt;null&lt;/code&gt; 이 이름을 가진 자원이없는 경우</target>
        </trans-unit>
        <trans-unit id="a612fe212b2e0a6a82c1619af955f9181b263640" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; object; &lt;code&gt;null&lt;/code&gt; if no resource with this name is found, the resource is in a package that is not &lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;open&lt;/a&gt; to at least the caller module, or access to the resource is denied by the security manager.</source>
          <target state="translated">&lt;a href=&quot;../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt; 객체; 이 이름의 리소스를 찾을 수 없거나 리소스가 최소한 호출자 모듈에 대해 &lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;열려&lt;/a&gt; 있지 않은 패키지 에 있거나 보안 관리자가 리소스에 대한 액세스를 거부 한 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3d25934cda3a9bfafd7fae12fbc5f6a17dbcc7d6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; providing thread safety and atomicity guarantees.</source>
          <target state="translated">스레드 안전성 및 원 자성을 보장 하는 &lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="62db7b7f9d0139d2e61cb326d0f7b697d1a9d526" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found</source>
          <target state="translated">&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt; 의&lt;/a&gt; 자원, 또는 읽기위한 객체 &lt;code&gt;null&lt;/code&gt; 리소스가 발견되지 않았던 경우</target>
        </trans-unit>
        <trans-unit id="92904b2916ccc19475c9d8a05961cc34f9478be0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;null&lt;/code&gt; if no resource with this name is found</source>
          <target state="translated">&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; 의&lt;/a&gt; 객체 또는 &lt;code&gt;null&lt;/code&gt; 이 이름을 가진 자원이없는 경우</target>
        </trans-unit>
        <trans-unit id="43e76ed2c2b3fb1bf4caf7d1271322cb62bbd186" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object; &lt;code&gt;null&lt;/code&gt; if no resource with this name is found, the resource cannot be located by a URL, the resource is in a package that is not &lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;open&lt;/a&gt; to at least the caller module, or access to the resource is denied by the security manager.</source>
          <target state="translated">&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; 의&lt;/a&gt; 객체; 이 이름의 리소스가 없거나 URL로 리소스를 찾을 수 없거나 리소스가 최소한 호출자 모듈에 대해 &lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;열려&lt;/a&gt; 있지 않은 패키지 에 있거나 보안 관리자가 리소스에 대한 액세스를 거부 한 경우 &lt;code&gt;null&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="d71c936b3325c278faa3b09399c0af11c11a9318" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; to the resource; &lt;code&gt;
          null&lt;/code&gt; if the resource could not be found, a URL could not be constructed to locate the resource, the resource is in a package that is not opened unconditionally or access to the resource is denied by the security manager.</source>
          <target state="translated">리소스에 대한 &lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt; . 리소스를 찾을 수 없거나 리소스를 찾기위한 URL을 구성 할 수 없거나 리소스가 무조건 열리지 않은 패키지에 있거나 보안 관리자가 리소스에 대한 액세스를 거부 한 경우 &lt;code&gt; null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3b0803c10a5a0b7b7405f75def879d1b018c2de9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../parsers/documentbuilder&quot;&gt;&lt;code&gt;DocumentBuilder&lt;/code&gt;&lt;/a&gt; uses this information to properly implement &lt;a href=&quot;../../../org/w3c/dom/attr#isId()&quot;&gt;&lt;code&gt;Attr.isId()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../parsers/documentbuilder&quot;&gt; &lt;code&gt;DocumentBuilder&lt;/code&gt; &lt;/a&gt; 제대로 구현하기 위해이 정보를 사용하여 &lt;a href=&quot;../../../org/w3c/dom/attr#isId()&quot;&gt; &lt;code&gt;Attr.isId()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4ffceb7e507fb0a892fc75dd1e51b54d2140ad41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</source>
          <target state="translated">요소를 검색 할 때 큐가 비어 있지 않을 때까지 대기하고 요소를 저장할 때 큐에서 공간을 사용할 수있을 때까지 기다리는 조작을 추가로 지원 하는 &lt;a href=&quot;../queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8bf9c6a1bf6c8ca478c3c983832aafa5229fdfdb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../servicenotfoundexception&quot;&gt;&lt;code&gt;ServiceNotFoundException&lt;/code&gt;&lt;/a&gt; if a setMethod field is defined in the descriptor for the attribute and the managed resource is null; or if no setMethod field is defined and caching is not enabled for the attribute. Note that if there is no getMethod field either, then caching is automatically enabled.</source>
          <target state="translated">&lt;a href=&quot;../servicenotfoundexception&quot;&gt; &lt;code&gt;ServiceNotFoundException&lt;/code&gt; &lt;/a&gt; setMethod를 필드 속성 및 관리 자원에 대한 설명에 정의되어있는 경우에는 널 (NULL); 또는 setMethod 필드가 정의되어 있지 않고 속성에 대해 캐싱을 사용할 수없는 경우 getMethod 필드가 없으면 캐싱이 자동으로 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="9e09a194da693429884fa3e8508ac4c1d7d8029a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; projection of a ConcurrentHashMap may be created (using &lt;a href=&quot;#newKeySet()&quot;&gt;&lt;code&gt;newKeySet()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#newKeySet(int)&quot;&gt;&lt;code&gt;newKeySet(int)&lt;/code&gt;&lt;/a&gt;), or viewed (using &lt;a href=&quot;#keySet(V)&quot;&gt;&lt;code&gt;keySet(Object)&lt;/code&gt;&lt;/a&gt; when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value.</source>
          <target state="translated">ConcurrentHashMap 의 &lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 프로젝션은 생성 &lt;a href=&quot;#newKeySet()&quot;&gt; &lt;code&gt;newKeySet()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#newKeySet(int)&quot;&gt; &lt;code&gt;newKeySet(int)&lt;/code&gt; &lt;/a&gt; ), 키만 관심이 있고 매핑 된 값이 (일시적으로) 사용되지 않거나 모두 가져갈 때 &lt;a href=&quot;#keySet(V)&quot;&gt; &lt;code&gt;keySet(Object)&lt;/code&gt; &lt;/a&gt; 사용하여 볼 수 있습니다. 동일한 매핑 값.</target>
        </trans-unit>
        <trans-unit id="a4e9e19029dbb5add608aa6e16ff760b042947a7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; projection of a ConcurrentHashMap may be created (using &lt;a href=&quot;concurrenthashmap#newKeySet--&quot;&gt;&lt;code&gt;newKeySet()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;concurrenthashmap#newKeySet-int-&quot;&gt;&lt;code&gt;newKeySet(int)&lt;/code&gt;&lt;/a&gt;), or viewed (using &lt;a href=&quot;concurrenthashmap#keySet-V-&quot;&gt;&lt;code&gt;keySet(Object)&lt;/code&gt;&lt;/a&gt; when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value.</source>
          <target state="translated">&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; ConcurrentHashMap의 투사는 (사용하여 생성 할 수있다 &lt;a href=&quot;concurrenthashmap#newKeySet--&quot;&gt; &lt;code&gt;newKeySet()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;concurrenthashmap#newKeySet-int-&quot;&gt; &lt;code&gt;newKeySet(int)&lt;/code&gt; &lt;/a&gt; ), 또는 사용 (볼 &lt;a href=&quot;concurrenthashmap#keySet-V-&quot;&gt; &lt;code&gt;keySet(Object)&lt;/code&gt; &lt;/a&gt; 에만 키가 관심있을 때, 매핑 된 값은 (아마도 일시적으로)되어 사용하지 않거나 모든 테이크 동일한 매핑 값.</target>
        </trans-unit>
        <trans-unit id="be331f7b5a864efc83138b67a21f7e2fe7ef6ac2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that uses an internal &lt;a href=&quot;copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for all of its operations.</source>
          <target state="translated">&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 내부 사용 &lt;a href=&quot;copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; &lt;/a&gt; 모든 조작.</target>
        </trans-unit>
        <trans-unit id="efb4a8120d13d79cc9dcf294ea51182dad3073dd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that uses an internal &lt;a href=&quot;copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for all of its operations. Thus, it shares the same basic properties:</source>
          <target state="translated">&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 내부 사용 &lt;a href=&quot;copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; &lt;/a&gt; 모든 조작. 따라서 동일한 기본 속성을 공유합니다.</target>
        </trans-unit>
        <trans-unit id="8dbf6d061899ddef03364739ab7eb527a1d175d0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../util/concurrent/completablefuture&quot;&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;&lt;/a&gt; available from &lt;a href=&quot;#onExit()&quot;&gt;&lt;code&gt;onExit()&lt;/code&gt;&lt;/a&gt; can be used to wait for process termination, and possibly trigger dependent actions.</source>
          <target state="translated">&lt;a href=&quot;#onExit()&quot;&gt; &lt;code&gt;onExit()&lt;/code&gt; &lt;/a&gt; 에서 사용할 수 있는 &lt;a href=&quot;../util/concurrent/completablefuture&quot;&gt; &lt;code&gt;CompletableFuture&lt;/code&gt; &lt;/a&gt; 는 프로세스 종료를 대기하고 종속 작업을 트리거하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="277a6a216b99c43ae18f017143f28d3b87ed8ae4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../zoneoffset&quot;&gt;&lt;code&gt;ZoneOffset&lt;/code&gt;&lt;/a&gt; represents the period of time that local time differs from UTC/Greenwich. This is usually a fixed number of hours and minutes. It is equivalent to the &lt;a href=&quot;../zoneoffset#getTotalSeconds()&quot;&gt;&lt;code&gt;total amount&lt;/code&gt;&lt;/a&gt; of the offset in seconds. For example, during the winter Paris has an offset of &lt;code&gt;+01:00&lt;/code&gt;, which is 3600 seconds.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset&quot;&gt; &lt;code&gt;ZoneOffset&lt;/code&gt; &lt;/a&gt; 시간의 기간을 나타내는 UTC / 그리니치에서 현지 시간 다르다는 점. 일반적으로 고정 된 시간과 분입니다. 오프셋 의 &lt;a href=&quot;../zoneoffset#getTotalSeconds()&quot;&gt; &lt;code&gt;total amount&lt;/code&gt; &lt;/a&gt; 초)과 같습니다. 예를 들어 겨울 동안 파리의 오프셋 은 3600 초인 &lt;code&gt;+01:00&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3b865fb1319606c6e09017437d962d44df137e3f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../zoneoffset&quot;&gt;&lt;code&gt;ZoneOffset&lt;/code&gt;&lt;/a&gt; represents the period of time that local time differs from UTC/Greenwich. This is usually a fixed number of hours and minutes. It is equivalent to the &lt;a href=&quot;../zoneoffset#getTotalSeconds--&quot;&gt;&lt;code&gt;total amount&lt;/code&gt;&lt;/a&gt; of the offset in seconds. For example, during the winter Paris has an offset of &lt;code&gt;+01:00&lt;/code&gt;, which is 3600 seconds.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset&quot;&gt; &lt;code&gt;ZoneOffset&lt;/code&gt; &lt;/a&gt; 시간의 기간을 나타내는 UTC / 그리니치에서 현지 시간 다르다는 점. 일반적으로 고정 된 시간과 분입니다. 그것은 동등 &lt;a href=&quot;../zoneoffset#getTotalSeconds--&quot;&gt; &lt;code&gt;total amount&lt;/code&gt; &lt;/a&gt; 초 오프셋의. 예를 들어, 겨울 동안 파리의 오프셋은 &lt;code&gt;+01:00&lt;/code&gt; 이며 3600 초입니다.</target>
        </trans-unit>
        <trans-unit id="c61e2d7c471ce08f6bc574a15853bccffea04ea0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements.</source>
          <target state="translated">생산자가 소비자가 요소를 받기를 기다릴 수 있는 &lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d2da4722fe3b889a3e89333836804f1518a27ee8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements. A &lt;code&gt;TransferQueue&lt;/code&gt; may be useful for example in message passing applications in which producers sometimes (using method &lt;a href=&quot;#transfer(E)&quot;&gt;&lt;code&gt;transfer(E)&lt;/code&gt;&lt;/a&gt;) await receipt of elements by consumers invoking &lt;code&gt;take&lt;/code&gt; or &lt;code&gt;poll&lt;/code&gt;, while at other times enqueue elements (via method &lt;code&gt;put&lt;/code&gt;) without waiting for receipt. &lt;a href=&quot;#tryTransfer(E)&quot;&gt;Non-blocking&lt;/a&gt; and &lt;a href=&quot;#tryTransfer(E,long,java.util.concurrent.TimeUnit)&quot;&gt;time-out&lt;/a&gt; versions of &lt;code&gt;tryTransfer&lt;/code&gt; are also available. A &lt;code&gt;TransferQueue&lt;/code&gt; may also be queried, via &lt;a href=&quot;#hasWaitingConsumer()&quot;&gt;&lt;code&gt;hasWaitingConsumer()&lt;/code&gt;&lt;/a&gt;, whether there are any threads waiting for items, which is a converse analogy to a &lt;code&gt;peek&lt;/code&gt; operation.</source>
          <target state="translated">생산자가 소비자가 요소를 받기를 기다릴 수 있는 &lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;TransferQueue&lt;/code&gt; 는 메시지 전달 응용 예에 유용 할 수있는 생산자 때때로 (사용 방법 &lt;a href=&quot;#transfer(E)&quot;&gt; &lt;code&gt;transfer(E)&lt;/code&gt; &lt;/a&gt; )를 호출 소비자 요소의 await를받은 &lt;code&gt;take&lt;/code&gt; 또는 &lt;code&gt;poll&lt;/code&gt; 다른 시간 (방법을 통해 요소를 대기열에있는 동안, &lt;code&gt;put&lt;/code&gt; 접수를 기다리지 않고). &lt;a href=&quot;#tryTransfer(E)&quot;&gt;비 차단&lt;/a&gt; 및 &lt;a href=&quot;#tryTransfer(E,long,java.util.concurrent.TimeUnit)&quot;&gt;시간 제한&lt;/a&gt; 버전의 &lt;code&gt;tryTransfer&lt;/code&gt; 도 사용할 수 있습니다. &lt;code&gt;TransferQueue&lt;/code&gt; 은 또한 통해서 질의 될 수있다 &lt;a href=&quot;#hasWaitingConsumer()&quot;&gt; &lt;code&gt;hasWaitingConsumer()&lt;/code&gt; &lt;/a&gt;, 항목을 기다리는 스레드가 있는지 여부, 이는 &lt;code&gt;peek&lt;/code&gt; 작업 과 반대의 유사 합니다.</target>
        </trans-unit>
        <trans-unit id="3cd18643ea2f82fbc2020f2325a3e672cf888dae" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements. A &lt;code&gt;TransferQueue&lt;/code&gt; may be useful for example in message passing applications in which producers sometimes (using method &lt;a href=&quot;transferqueue#transfer-E-&quot;&gt;&lt;code&gt;transfer(E)&lt;/code&gt;&lt;/a&gt;) await receipt of elements by consumers invoking &lt;code&gt;take&lt;/code&gt; or &lt;code&gt;poll&lt;/code&gt;, while at other times enqueue elements (via method &lt;code&gt;put&lt;/code&gt;) without waiting for receipt. &lt;a href=&quot;transferqueue#tryTransfer-E-&quot;&gt;Non-blocking&lt;/a&gt; and &lt;a href=&quot;transferqueue#tryTransfer-E-long-java.util.concurrent.TimeUnit-&quot;&gt;time-out&lt;/a&gt; versions of &lt;code&gt;tryTransfer&lt;/code&gt; are also available. A &lt;code&gt;TransferQueue&lt;/code&gt; may also be queried, via &lt;a href=&quot;transferqueue#hasWaitingConsumer--&quot;&gt;&lt;code&gt;hasWaitingConsumer()&lt;/code&gt;&lt;/a&gt;, whether there are any threads waiting for items, which is a converse analogy to a &lt;code&gt;peek&lt;/code&gt; operation.</source>
          <target state="translated">생산자가 소비자가 요소를 받기를 기다릴 수 있는 &lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; &lt;/a&gt; 입니다. &lt;code&gt;TransferQueue&lt;/code&gt; 는 메시지 전달 응용 예에 유용 할 수있는 생산자 때때로 (사용 방법 &lt;a href=&quot;transferqueue#transfer-E-&quot;&gt; &lt;code&gt;transfer(E)&lt;/code&gt; &lt;/a&gt; )를 호출 소비자 요소의 await를받은 &lt;code&gt;take&lt;/code&gt; 또는 &lt;code&gt;poll&lt;/code&gt; 다른 시간 (방법을 통해 요소를 대기열에있는 동안, &lt;code&gt;put&lt;/code&gt; 접수를 기다리지 않고). &lt;code&gt;tryTransfer&lt;/code&gt; 의&lt;a href=&quot;transferqueue#tryTransfer-E-&quot;&gt;비 차단&lt;/a&gt; 및 &lt;a href=&quot;transferqueue#tryTransfer-E-long-java.util.concurrent.TimeUnit-&quot;&gt;타임 아웃&lt;/a&gt; 버전 도 제공됩니다. &lt;code&gt;TransferQueue&lt;/code&gt; 은 또한 통해서 질의 될 수있다 &lt;a href=&quot;transferqueue#hasWaitingConsumer--&quot;&gt; &lt;code&gt;hasWaitingConsumer()&lt;/code&gt; &lt;/a&gt;, 항목을 기다리는 스레드가 있는지 여부는 &lt;code&gt;peek&lt;/code&gt; 작업 과 반대 입니다.</target>
        </trans-unit>
        <trans-unit id="ec45ca597ae996747e8a0083bd998a797a9539d5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;blocking queue&lt;/a&gt; in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.</source>
          <target state="translated">&lt;a href=&quot;blockingqueue&quot;&gt;블록 큐&lt;/a&gt; 각각 삽입 작업은 반대로 다른 스레드에 의하여 대응하는 삭제 오퍼레이션을 대기하고있는 담당한다.</target>
        </trans-unit>
        <trans-unit id="2048d85d25ed94ca6135978e0122e6078feb309a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;blocking queue&lt;/a&gt; in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa. A synchronous queue does not have any internal capacity, not even a capacity of one. You cannot &lt;code&gt;peek&lt;/code&gt; at a synchronous queue because an element is only present when you try to remove it; you cannot insert an element (using any method) unless another thread is trying to remove it; you cannot iterate as there is nothing to iterate. The &lt;em&gt;head&lt;/em&gt; of the queue is the element that the first queued inserting thread is trying to add to the queue; if there is no such queued thread then no element is available for removal and &lt;code&gt;poll()&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;. For purposes of other &lt;code&gt;Collection&lt;/code&gt; methods (for example &lt;code&gt;contains&lt;/code&gt;), a &lt;code&gt;SynchronousQueue&lt;/code&gt; acts as an empty collection. This queue does not permit &lt;code&gt;null&lt;/code&gt; elements.</source>
          <target state="translated">&lt;a href=&quot;blockingqueue&quot;&gt;블록 큐&lt;/a&gt; 각각 삽입 작업은 반대로 다른 스레드에 의하여 대응하는 삭제 오퍼레이션을 대기하고있는 담당한다. 동기 큐에는 내부 용량이 없으며 용량도 없습니다. 당신은 할 수 &lt;code&gt;peek&lt;/code&gt; 당신이 그것을 제거하려고 할 때 요소 만 존재하기 때문에 동기 큐에서; 다른 스레드가 해당 요소를 제거하려고 시도하지 않으면 메소드를 사용하여 요소를 삽입 할 수 없습니다. 반복 할 것이 없으므로 반복 할 수 없습니다. 대기열 의 &lt;em&gt;헤드&lt;/em&gt; 는 첫 번째 대기열에있는 삽입 스레드가 대기열에 추가하려고하는 요소입니다. 대기중인 스레드가 없으면 제거 할 수있는 요소가 없으며 &lt;code&gt;poll()&lt;/code&gt; 은 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다. 다른 &lt;code&gt;Collection&lt;/code&gt; 목적으로메소드 (예 : &lt;code&gt;contains&lt;/code&gt; )에서 &lt;code&gt;SynchronousQueue&lt;/code&gt; 는 빈 컬렉션으로 작동합니다. 이 큐는 &lt;code&gt;null&lt;/code&gt; 요소를 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ab7bc3bd400bf41c2ff2c7269822e90a6f35f53d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed bytes begin at the input buffer's (possibly incremented) position; the number of malformed bytes may be determined by invoking the result object's &lt;a href=&quot;coderresult#length()&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;malformed action&lt;/a&gt; of this decoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;부정 입력&lt;/a&gt; 결과가 부정 입력 에러가 검출되었음을 나타낸다. 잘못된 형식의 바이트는 입력 버퍼 (증가 될 수 있음) 위치에서 시작됩니다. 잘못된 형식의 바이트 수는 결과 개체의 &lt;a href=&quot;coderresult#length()&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 확인할 수 있습니다 . 이 경우는 이 디코더 의 &lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;잘못된 동작&lt;/a&gt; 이 &lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; 인&lt;/a&gt; 경우에만 적용됩니다 . 그렇지 않으면 요청에 따라 잘못된 입력이 무시되거나 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="d4facc66fd22bee4d4f940ee144b4df7a51ac3ea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed characters begin at the input buffer's (possibly incremented) position; the number of malformed characters may be determined by invoking the result object's &lt;a href=&quot;coderresult#length()&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;malformed action&lt;/a&gt; of this encoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;부정 입력&lt;/a&gt; 결과가 부정 입력 에러가 검출되었음을 나타낸다. 형식이 잘못된 문자는 입력 버퍼 (증가 될 수 있음) 위치에서 시작됩니다. 결과 개체의 &lt;a href=&quot;coderresult#length()&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 형식이 잘못된 문자 수를 확인할 수 있습니다 . 이 경우는 이 인코더 의 &lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;잘못된 동작&lt;/a&gt; 이 &lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; 인&lt;/a&gt; 경우에만 적용됩니다 . 그렇지 않으면 요청에 따라 잘못된 입력이 무시되거나 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="37dc8e605e4b17de4ad0b00e29ff2ed2f0879183" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed bytes begin at the input buffer's (possibly incremented) position; the number of malformed bytes may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetdecoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;malformed action&lt;/a&gt; of this decoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;부정 입력&lt;/a&gt; 결과가 부정 입력 에러가 검출되었음을 나타낸다. 잘못된 바이트는 입력 버퍼의 (증분 된) 위치에서 시작합니다. 잘못된 바이트의 수는 결과 객체의 &lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 결정할 수 있습니다 . 이 경우는 이 디코더 의 &lt;a href=&quot;charsetdecoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;잘못된 동작&lt;/a&gt; 이 &lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; 인&lt;/a&gt; 경우에만 적용됩니다 . 그렇지 않으면 요청에 따라 잘못된 입력이 무시되거나 교체됩니다.</target>
        </trans-unit>
        <trans-unit id="f428d88605448e02d0039be4c865a5189a5a84d1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed characters begin at the input buffer's (possibly incremented) position; the number of malformed characters may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetencoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;malformed action&lt;/a&gt; of this encoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;부정 입력&lt;/a&gt; 결과가 부정 입력 에러가 검출되었음을 나타낸다. 잘못된 문자는 입력 버퍼의 (증분 될 수있는) 위치에서 시작합니다. 잘못된 형식의 문자 수는 결과 객체의 &lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 확인할 수 있습니다 . 이 경우는 이 인코더 의 &lt;a href=&quot;charsetencoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;잘못된 동작&lt;/a&gt; 이 &lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; 인&lt;/a&gt; 경우에만 적용됩니다 . 그렇지 않으면 요청에 따라 잘못된 입력이 무시되거나 교체됩니다.</target>
        </trans-unit>
        <trans-unit id="bbdff358d3d93270d3b49e5121994b44fae3466d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; has an encounter order if the corresponding &lt;a href=&quot;collection#iterator()&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt; documents an order. If so, the encounter order is the same as the documented order. Otherwise, a collection does not have an encounter order.</source>
          <target state="translated">&lt;a href=&quot;collection&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt; 해당하는 경우 만남의 순서가 &lt;a href=&quot;collection#iterator()&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt; 순서를 설명합니다. 그렇다면 조우 순서는 문서화 된 순서와 동일합니다. 그렇지 않으면 컬렉션에 발생 순서가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3f35d1e5ef784758d765b02805cd2bcc0afad6eb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; has an encounter order if the corresponding &lt;a href=&quot;collection#iterator--&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt; documents an order. If so, the encounter order is the same as the documented order. Otherwise, a collection does not have an encounter order.</source>
          <target state="translated">&lt;a href=&quot;collection&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt; 해당하는 경우 만남의 순서가 &lt;a href=&quot;collection#iterator--&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt; 순서를 설명합니다. 그렇다면, 발생 순서는 문서화 된 순서와 동일합니다. 그렇지 않으면 컬렉션에 발생 순서가 없습니다.</target>
        </trans-unit>
        <trans-unit id="cc2b847cc7c57e579a25f0284eb310a0cfef0a28" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collector&quot;&gt;&lt;code&gt;Collector&lt;/code&gt;&lt;/a&gt; that supports concurrent reduction is marked with the &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt;&lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt;&lt;/a&gt; characteristic. However, a concurrent collection also has a downside. If multiple threads are depositing results concurrently into a shared container, the order in which results are deposited is non-deterministic. Consequently, a concurrent reduction is only possible if ordering is not important for the stream being processed. The &lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt;&lt;code&gt;Stream.collect(Collector)&lt;/code&gt;&lt;/a&gt; implementation will only perform a concurrent reduction if</source>
          <target state="translated">동시 감소를 지원 하는 &lt;a href=&quot;collector&quot;&gt; &lt;code&gt;Collector&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt; &lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt; &lt;/a&gt; 특성으로 표시됩니다 . 그러나 동시 수집에는 단점도 있습니다. 여러 스레드가 결과를 공유 컨테이너에 동시에 배치하는 경우 결과가 배치되는 순서는 결정적이지 않습니다. 결과적으로 동시 감소는 처리중인 스트림에 대해 순서가 중요하지 않은 경우에만 가능합니다. &lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt; &lt;code&gt;Stream.collect(Collector)&lt;/code&gt; &lt;/a&gt; 구현은 동시 환원을 수행 할 경우</target>
        </trans-unit>
        <trans-unit id="ab018cbfa657eeeb3853dd6f519e165f35dbdda0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collector&quot;&gt;&lt;code&gt;Collector&lt;/code&gt;&lt;/a&gt; that supports concurrent reduction is marked with the &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt;&lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt;&lt;/a&gt; characteristic. However, a concurrent collection also has a downside. If multiple threads are depositing results concurrently into a shared container, the order in which results are deposited is non-deterministic. Consequently, a concurrent reduction is only possible if ordering is not important for the stream being processed. The &lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;Stream.collect(Collector)&lt;/code&gt;&lt;/a&gt; implementation will only perform a concurrent reduction if</source>
          <target state="translated">동시 축소를 지원 하는 &lt;a href=&quot;collector&quot;&gt; &lt;code&gt;Collector&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt; &lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt; &lt;/a&gt; 특성으로 표시됩니다 . 그러나 동시 컬렉션에도 단점이 있습니다. 여러 스레드가 결과를 공유 컨테이너에 동시에 저장하는 경우 결과가 저장되는 순서는 결정적이지 않습니다. 결과적으로, 동시 감소는 처리중인 스트림에 순서가 중요하지 않은 경우에만 가능합니다. &lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;Stream.collect(Collector)&lt;/code&gt; &lt;/a&gt; 구현은 동시 환원을 수행 할 경우</target>
        </trans-unit>
        <trans-unit id="0e7dad79d0852bf10bcfb2d08d6293f448e8a4d2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;completionservice&quot;&gt;&lt;code&gt;CompletionService&lt;/code&gt;&lt;/a&gt; that uses a supplied &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; to execute tasks.</source>
          <target state="translated">제공된 &lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt; 를 사용하여 작업을 실행 하는 &lt;a href=&quot;completionservice&quot;&gt; &lt;code&gt;CompletionService&lt;/code&gt; &lt;/a&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="8fc11ba08553877860bb977c11eb04da587620cf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;completionservice&quot;&gt;&lt;code&gt;CompletionService&lt;/code&gt;&lt;/a&gt; that uses a supplied &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using &lt;code&gt;take&lt;/code&gt;. The class is lightweight enough to be suitable for transient use when processing groups of tasks.</source>
          <target state="translated">제공된 &lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt; 를 사용하여 작업을 실행 하는 &lt;a href=&quot;completionservice&quot;&gt; &lt;code&gt;CompletionService&lt;/code&gt; &lt;/a&gt; 입니다 . 이 클래스는 제출 된 태스크가 완료시 &lt;code&gt;take&lt;/code&gt; 를 사용하여 액세스 가능한 큐에 배치되도록 정렬합니다 . 이 클래스는 작업 그룹을 처리 할 때 일시적으로 사용하기에 충분히 가볍습니다.</target>
        </trans-unit>
        <trans-unit id="5487865321680404f56b9512a31e170dee210b17" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;concurrentmap&quot;&gt;&lt;code&gt;ConcurrentMap&lt;/code&gt;&lt;/a&gt; supporting &lt;a href=&quot;../navigablemap&quot;&gt;&lt;code&gt;NavigableMap&lt;/code&gt;&lt;/a&gt; operations, and recursively so for its navigable sub-maps.</source>
          <target state="translated">&lt;a href=&quot;../navigablemap&quot;&gt; &lt;code&gt;NavigableMap&lt;/code&gt; &lt;/a&gt; 작업을 지원 하고 탐색 가능한 서브맵에 대해 재귀 적으로 지원 하는 &lt;a href=&quot;concurrentmap&quot;&gt; &lt;code&gt;ConcurrentMap&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0ff16a3f7fcfc58771d7d7c99226a55b1dced8e2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;countermonitor&quot;&gt;&lt;code&gt;CounterMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of integer type. The attributes are assumed to be non-negative, and monotonically increasing except for a possible &lt;em&gt;roll-over&lt;/em&gt; at a specified &lt;em&gt;modulus&lt;/em&gt;. Each observed attribute has an associated &lt;em&gt;threshold&lt;/em&gt; value. A notification is sent when the attribute exceeds its threshold.</source>
          <target state="translated">&lt;a href=&quot;countermonitor&quot;&gt; &lt;code&gt;CounterMonitor&lt;/code&gt; 는&lt;/a&gt; 정수형의 특성을 관찰한다. 속성은 음이 아닌 것으로 가정 하고 지정된 &lt;em&gt;계수&lt;/em&gt; 에서 가능한 &lt;em&gt;롤오버를&lt;/em&gt; 제외하고 단조 증가 합니다 . 관찰 된 각 속성에는 연관된 &lt;em&gt;임계&lt;/em&gt; 값이 있습니다. 속성이 임계 값을 초과하면 알림이 전송됩니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cf7c7740d35492b515d5429814617f3d7cc18903" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt; is a resettable multiway synchronization point useful in some styles of parallel programming.</source>
          <target state="translated">&lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; &lt;/a&gt; 병렬 프로그래밍의 어떤 스타일에 유용한 리셋 멀티 웨이 동기화 지점입니다.</target>
        </trans-unit>
        <trans-unit id="a841608c7059c5a7a581927322bcccc959673a92" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;datatypeconstants#FIELD_UNDEFINED&quot;&gt;&lt;code&gt;DatatypeConstants.FIELD_UNDEFINED&lt;/code&gt;&lt;/a&gt; value indicates that field is not set.</source>
          <target state="translated">&lt;a href=&quot;datatypeconstants#FIELD_UNDEFINED&quot;&gt; &lt;code&gt;DatatypeConstants.FIELD_UNDEFINED&lt;/code&gt; &lt;/a&gt; 값은 필드가 설정되지 않았 음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a17b0dc0c53cf7d6fe7e42aadfa8ecff813092a4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;docattributeset&quot;&gt;&lt;code&gt;DocAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;docattribute&quot;&gt;&lt;code&gt;DocAttribute&lt;/code&gt;&lt;/a&gt;s, specifies the characteristics of an individual doc and the print job settings to be applied to an individual doc.</source>
          <target state="translated">&lt;a href=&quot;docattributeset&quot;&gt; &lt;code&gt;DocAttributeSet&lt;/code&gt; &lt;/a&gt; 함유 &lt;a href=&quot;docattribute&quot;&gt; &lt;code&gt;DocAttribute&lt;/code&gt; &lt;/a&gt; 개별 문서 인쇄 작업의 설정 지정 특성은 개별 문서에 적용될 수있다.</target>
        </trans-unit>
        <trans-unit id="ed608efcfa013ea2be917bbb860290d8dbb12f72" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;flow.publisher&quot;&gt;&lt;code&gt;Flow.Publisher&lt;/code&gt;&lt;/a&gt; that asynchronously issues submitted (non-null) items to current subscribers until it is closed.</source>
          <target state="translated">닫힐 때까지 현재 구독자에게 제출 된 (null이 아닌) 항목을 비동기 적으로 발행 하는 &lt;a href=&quot;flow.publisher&quot;&gt; &lt;code&gt;Flow.Publisher&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="026d41f21cfa4376df4ce02074add91f83fca562" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;flow.publisher&quot;&gt;&lt;code&gt;Flow.Publisher&lt;/code&gt;&lt;/a&gt; that asynchronously issues submitted (non-null) items to current subscribers until it is closed. Each current subscriber receives newly submitted items in the same order unless drops or exceptions are encountered. Using a SubmissionPublisher allows item generators to act as compliant &lt;a href=&quot;http://www.reactive-streams.org/&quot;&gt; reactive-streams&lt;/a&gt; Publishers relying on drop handling and/or blocking for flow control.</source>
          <target state="translated">닫힐 때까지 현재 구독자에게 제출 된 (null이 아닌) 항목을 비동기 적으로 발행 하는 &lt;a href=&quot;flow.publisher&quot;&gt; &lt;code&gt;Flow.Publisher&lt;/code&gt; &lt;/a&gt; 입니다. 현재 구독자는 삭제 또는 예외가 발생하지 않는 한 동일한 순서로 새로 제출 된 항목을받습니다. SubmissionPublisher를 사용하면 항목 생성기가 드롭 처리 및 / 또는 흐름 제어를위한 차단에 의존하는 호환 &lt;a href=&quot;http://www.reactive-streams.org/&quot;&gt;반응 스트림&lt;/a&gt; 게시자 역할을 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0224e649b252d805cb53fe47b42180a2218c478a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;flow.subscriber&quot;&gt;&lt;code&gt;Flow.Subscriber&lt;/code&gt;&lt;/a&gt; arranges that items be requested and processed. Items (invocations of &lt;a href=&quot;flow.subscriber#onNext(T)&quot;&gt;&lt;code&gt;Flow.Subscriber.onNext(T)&lt;/code&gt;&lt;/a&gt;) are not issued unless requested, but multiple items may be requested. Many Subscriber implementations can arrange this in the style of the following example, where a buffer size of 1 single-steps, and larger sizes usually allow for more efficient overlapped processing with less communication; for example with a value of 64, this keeps total outstanding requests between 32 and 64. Because Subscriber method invocations for a given &lt;a href=&quot;flow.subscription&quot;&gt;&lt;code&gt;Flow.Subscription&lt;/code&gt;&lt;/a&gt; are strictly ordered, there is no need for these methods to use locks or volatiles unless a Subscriber maintains multiple Subscriptions (in which case it is better to instead define multiple Subscribers, each with its own Subscription).</source>
          <target state="translated">&lt;a href=&quot;flow.subscriber&quot;&gt; &lt;code&gt;Flow.Subscriber&lt;/code&gt; 의&lt;/a&gt; 아이템을 요청하고 처리 할 준비한다. 요청하지 않는 한 항목 ( &lt;a href=&quot;flow.subscriber#onNext(T)&quot;&gt; &lt;code&gt;Flow.Subscriber.onNext(T)&lt;/code&gt; &lt;/a&gt; 호출 )은 발급되지 않지만 여러 항목을 요청할 수 있습니다. 많은 구독자 구현은이를 다음 예제의 스타일로 배열 할 수 있습니다. 여기서 버퍼 크기는 1 단계이고 크기가 더 크면 일반적으로 적은 통신으로 더 효율적인 중첩 처리가 가능합니다. 예를 들어 64의 값을 사용하면 32에서 64 사이의 총 미해결 요청이 유지됩니다. 지정된 &lt;a href=&quot;flow.subscription&quot;&gt; &lt;code&gt;Flow.Subscription&lt;/code&gt; 에&lt;/a&gt; 대한 Subscriber 메서드 호출이 있기 때문입니다.엄밀히 말하면 구독자가 여러 구독을 유지하지 않는 한 이러한 메서드가 잠금 또는 휘발성을 사용할 필요가 없습니다 (이 경우 각각 고유 한 구독이있는 여러 구독자를 대신 정의하는 것이 좋습니다).</target>
        </trans-unit>
        <trans-unit id="ed79beedb532be58b73413e2f5d0f78429b3d587" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions.</source>
          <target state="translated">&lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt; 트리거 될 때 완료 조치와 함께 수행하고 더 남아있는 대기중인 작업이 없습니다.</target>
        </trans-unit>
        <trans-unit id="a60bf0ce2dc486adc95611aa6a3e0d65ba11fb09" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions. CountedCompleters are in general more robust in the presence of subtask stalls and blockage than are other forms of ForkJoinTasks, but are less intuitive to program. Uses of CountedCompleter are similar to those of other completion based components (such as &lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt;&lt;code&gt;CompletionHandler&lt;/code&gt;&lt;/a&gt;) except that multiple &lt;em&gt;pending&lt;/em&gt; completions may be necessary to trigger the completion action &lt;a href=&quot;#onCompletion(java.util.concurrent.CountedCompleter)&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt;, not just one. Unless initialized otherwise, the &lt;a href=&quot;#getPendingCount()&quot;&gt;pending count&lt;/a&gt; starts at zero, but may be (atomically) changed using methods &lt;a href=&quot;#setPendingCount(int)&quot;&gt;&lt;code&gt;setPendingCount(int)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#addToPendingCount(int)&quot;&gt;&lt;code&gt;addToPendingCount(int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#compareAndSetPendingCount(int,int)&quot;&gt;&lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt;&lt;/a&gt;. Upon invocation of &lt;a href=&quot;#tryComplete()&quot;&gt;&lt;code&gt;tryComplete()&lt;/code&gt;&lt;/a&gt;, if the pending action count is nonzero, it is decremented; otherwise, the completion action is performed, and if this completer itself has a completer, the process is continued with its completer. As is the case with related synchronization components such as &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt;, these methods affect only internal counts; they do not establish any further internal bookkeeping. In particular, the identities of pending tasks are not maintained. As illustrated below, you can create subclasses that do record some or all pending tasks or their results when needed. As illustrated below, utility methods supporting customization of completion traversals are also provided. However, because CountedCompleters provide only basic synchronization mechanisms, it may be useful to create further abstract subclasses that maintain linkages, fields, and additional support methods appropriate for a set of related usages.</source>
          <target state="translated">&lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt; 트리거 될 때 완료 조치와 함께 수행하고 더 남아있는 대기중인 작업이 없습니다. CountedCompleters는 일반적으로 다른 형태의 ForkJoinTasks보다 하위 작업 중단 및 차단이있을 때 더 강력하지만 프로그래밍에 덜 직관적입니다. CountedCompleter의 사용은 완료 작업 &lt;a href=&quot;#onCompletion(java.util.concurrent.CountedCompleter)&quot;&gt; &lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt; &lt;/a&gt; 를 트리거하는 데 하나가 아닌 여러 &lt;em&gt;보류중인&lt;/em&gt; 완료가 필요할 수 있다는 점을 제외하면 다른 완료 기반 구성 요소 (예 : &lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt; &lt;code&gt;CompletionHandler&lt;/code&gt; &lt;/a&gt; )의 사용과 유사합니다 . 달리 초기화되지 않는 한 &lt;a href=&quot;#getPendingCount()&quot;&gt;보류중인 카운트&lt;/a&gt; 는 0에서 시작하지만 &lt;a href=&quot;#setPendingCount(int)&quot;&gt; &lt;code&gt;setPendingCount(int)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#addToPendingCount(int)&quot;&gt; &lt;code&gt;addToPendingCount(int)&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 (원자 적으로) 변경할 수 있습니다.&lt;em&gt;&lt;/em&gt;, 및 &lt;a href=&quot;#compareAndSetPendingCount(int,int)&quot;&gt; &lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;#tryComplete()&quot;&gt; &lt;code&gt;tryComplete()&lt;/code&gt; &lt;/a&gt; 호출시 보류중인 작업 수가 0이 아니면 감소합니다. 그렇지 않으면 완료 작업이 수행되고이 완료 자 자체에 완료자가 있으면 해당 완료 자와 함께 프로세스가 계속됩니다. &lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt; 와 같은 관련 동기화 구성 요소의 경우와 같습니다., 이러한 방법은 내부 카운트에만 영향을 미칩니다. 그들은 더 이상 내부 부기를 설정하지 않습니다. 특히 보류중인 작업의 ID는 유지되지 않습니다. 아래 그림과 같이 보류중인 작업의 일부 또는 전체를 기록하거나 필요할 때 그 결과를 기록하는 하위 클래스를 만들 수 있습니다. 아래 그림과 같이 완료 순회 사용자 정의를 지원하는 유틸리티 메서드도 제공됩니다. 그러나 CountedCompleters는 기본 동기화 메커니즘 만 제공하기 때문에 관련 사용 집합에 적합한 링크, 필드 및 추가 지원 메서드를 유지하는 추가 추상 하위 클래스를 만드는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb3ed653dbdcc6e068861ae3377f577af5456fa8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions. CountedCompleters are in general more robust in the presence of subtask stalls and blockage than are other forms of ForkJoinTasks, but are less intuitive to program. Uses of CountedCompleter are similar to those of other completion based components (such as &lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt;&lt;code&gt;CompletionHandler&lt;/code&gt;&lt;/a&gt;) except that multiple &lt;em&gt;pending&lt;/em&gt; completions may be necessary to trigger the completion action &lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt;, not just one. Unless initialized otherwise, the &lt;a href=&quot;countedcompleter#getPendingCount--&quot;&gt;pending count&lt;/a&gt; starts at zero, but may be (atomically) changed using methods &lt;a href=&quot;countedcompleter#setPendingCount-int-&quot;&gt;&lt;code&gt;setPendingCount(int)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;countedcompleter#addToPendingCount-int-&quot;&gt;&lt;code&gt;addToPendingCount(int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;countedcompleter#compareAndSetPendingCount-int-int-&quot;&gt;&lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt;&lt;/a&gt;. Upon invocation of &lt;a href=&quot;countedcompleter#tryComplete--&quot;&gt;&lt;code&gt;tryComplete()&lt;/code&gt;&lt;/a&gt;, if the pending action count is nonzero, it is decremented; otherwise, the completion action is performed, and if this completer itself has a completer, the process is continued with its completer. As is the case with related synchronization components such as &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt;, these methods affect only internal counts; they do not establish any further internal bookkeeping. In particular, the identities of pending tasks are not maintained. As illustrated below, you can create subclasses that do record some or all pending tasks or their results when needed. As illustrated below, utility methods supporting customization of completion traversals are also provided. However, because CountedCompleters provide only basic synchronization mechanisms, it may be useful to create further abstract subclasses that maintain linkages, fields, and additional support methods appropriate for a set of related usages.</source>
          <target state="translated">&lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt; 트리거 될 때 완료 조치와 함께 수행하고 더 남아있는 대기중인 작업이 없습니다. CountedCompleters는 일반적으로 다른 형식의 ForkJoinTask보다 하위 작업 중단 및 차단이있을 때 더 강력하지만 프로그래밍하기에 덜 직관적입니다. CountedCompleter의 사용은 완료가 아닌 하나 의 완료 조치 &lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt; &lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt; &lt;/a&gt; 을 트리거하기 위해 여러 &lt;em&gt;보류중인&lt;/em&gt; 완료가 필요할 수 있다는 점을 제외하고 다른 완료 기반 구성 요소 (예 : &lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt; &lt;code&gt;CompletionHandler&lt;/code&gt; &lt;/a&gt; ) 와 유사합니다 . 달리 초기화되지 않는 한, &lt;a href=&quot;countedcompleter#getPendingCount--&quot;&gt;보류 카운트&lt;/a&gt; 는 0에서 시작하지만 &lt;a href=&quot;countedcompleter#setPendingCount-int-&quot;&gt; &lt;code&gt;setPendingCount(int)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;countedcompleter#addToPendingCount-int-&quot;&gt; &lt;code&gt;addToPendingCount(int)&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 (원자 적으로) 변경 될 수 있습니다&lt;em&gt;&lt;/em&gt;및 &lt;a href=&quot;countedcompleter#compareAndSetPendingCount-int-int-&quot;&gt; &lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt; &lt;/a&gt; 입니다. &lt;a href=&quot;countedcompleter#tryComplete--&quot;&gt; &lt;code&gt;tryComplete()&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 보류중인 조치 수가 0이 아닌 경우 감소합니다. 그렇지 않으면 완료 조치가 수행되고이 완료 자 자체에 완료자가 있으면 프로세스는 완료 자와 함께 계속됩니다. &lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt; 와 같은 관련 동기화 구성 요소의 경우와 마찬가지로이러한 방법은 내부 수에만 영향을 미칩니다. 더 이상 내부 부기를 설정하지 않습니다. 특히 보류중인 작업의 ID는 유지되지 않습니다. 아래 그림과 같이 보류중인 일부 또는 모든 작업 또는 결과를 기록하는 하위 클래스를 만들 수 있습니다. 아래에 설명 된 바와 같이, 완료 순회의 사용자 정의를 지원하는 유틸리티 방법도 제공됩니다. 그러나 CountedCompleters는 기본 동기화 메커니즘 만 제공하기 때문에 일련의 관련 사용법에 적합한 연결, 필드 및 추가 지원 방법을 유지 관리하는 추가 추상 서브 클래스를 작성하는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01aa76019566735bcbbc891207a7f10feb22942c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt; 입니다 &lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; 를가&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="39c86cf98ef90fcf1a663c7ea35c635f02ef8181" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;. Successful execution of the &lt;code&gt;run&lt;/code&gt; method causes completion of the &lt;code&gt;Future&lt;/code&gt; and allows access to its results.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt; 입니다 &lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; 를가&lt;/a&gt; . &lt;code&gt;run&lt;/code&gt; 메소드를 성공적으로 실행 하면 &lt;code&gt;Future&lt;/code&gt; 가 완료 되고 결과에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9497a6b404465677f8a6392e98d814062889e3c5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that may be explicitly completed (setting its value and status), and may be used as a &lt;a href=&quot;completionstage&quot;&gt;&lt;code&gt;CompletionStage&lt;/code&gt;&lt;/a&gt;, supporting dependent functions and actions that trigger upon its completion.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt; 명시 (값 및 설정 상태)을 완료 할 수 있고, 사용될 수있다 &lt;a href=&quot;completionstage&quot;&gt; &lt;code&gt;CompletionStage&lt;/code&gt; &lt;/a&gt; 종속 함수 및 작업의 완료시 그 트리거 지원.</target>
        </trans-unit>
        <trans-unit id="a78490901c38c9a824e6ce8c5131db90ed0da208" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;gaugemonitor&quot;&gt;&lt;code&gt;GaugeMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of numerical type. Each observed attribute has an associated &lt;em&gt;high threshold&lt;/em&gt; and &lt;em&gt;low threshold&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;gaugemonitor&quot;&gt; &lt;code&gt;GaugeMonitor&lt;/code&gt; 는&lt;/a&gt; 수치 형의 특성을 관찰한다. 관찰 된 각 속성에는 연관된 &lt;em&gt;높은 임계 값&lt;/em&gt; 과 &lt;em&gt;낮은 임계 값이&lt;/em&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7dbfa3c19bc49325bb3201857c32ee3dc8f288e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;httpresponse.bodyhandler&quot;&gt;&lt;code&gt;BodyHandler&lt;/code&gt;&lt;/a&gt; must be supplied for each &lt;a href=&quot;httprequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; sent. The &lt;code&gt;BodyHandler&lt;/code&gt; determines how to handle the response body, if any. Once an &lt;a href=&quot;httpresponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; is received, the headers, response code, and body (typically) are available. Whether the response body bytes have been read or not depends on the type, &lt;code&gt;T&lt;/code&gt;, of the response body.</source>
          <target state="translated">&lt;a href=&quot;httpresponse.bodyhandler&quot;&gt; &lt;code&gt;BodyHandler&lt;/code&gt; 은&lt;/a&gt; 각각 제공해야합니다 &lt;a href=&quot;httprequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 를&lt;/a&gt; 보냈습니다. &lt;code&gt;BodyHandler&lt;/code&gt; 이 있는 경우, 응답 본문을 처리하는 방법을 결정합니다. &lt;a href=&quot;httpresponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 가 수신 되면 헤더, 응답 코드 및 본문 (일반적으로)을 사용할 수 있습니다. 응답 본문 바이트를 읽었는지 여부는 응답 본문의 유형 &lt;code&gt;T&lt;/code&gt; 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="83fabc9c2d9f90a6511e60bf17fbf41d85870f60" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;keymap&quot;&gt;&lt;code&gt;Keymap&lt;/code&gt;&lt;/a&gt; lets an application bind key strokes to actions. In order to allow keymaps to be shared across multiple text components, they can use actions that extend &lt;code&gt;TextAction&lt;/code&gt;. &lt;code&gt;TextAction&lt;/code&gt; can determine which &lt;code&gt;JTextComponent&lt;/code&gt; most recently has or had focus and therefore is the subject of the action (In the case that the &lt;code&gt;ActionEvent&lt;/code&gt; sent to the action doesn't contain the target text component as its source).</source>
          <target state="translated">&lt;a href=&quot;keymap&quot;&gt; &lt;code&gt;Keymap&lt;/code&gt; &lt;/a&gt; 행동에 응용 프로그램 바인딩 키 스트로크를 할 수 있습니다. 키맵을 여러 텍스트 구성 요소에서 공유 할 수 있도록 &lt;code&gt;TextAction&lt;/code&gt; 을 확장하는 작업을 사용할 수 있습니다 . &lt;code&gt;TextAction&lt;/code&gt; 은 가장 최근에 포커스가 있거나 포커스가 있는 &lt;code&gt;JTextComponent&lt;/code&gt; 를 확인할 수 있으므로 액션의 주제가됩니다 (액션으로 전송 된 &lt;code&gt;ActionEvent&lt;/code&gt; 가 소스로 대상 텍스트 컴포넌트를 포함하지 않는 경우).</target>
        </trans-unit>
        <trans-unit id="7dd19ae8058e5cba032ae717f2314f0d68d1a345" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its keys.</source>
          <target state="translated">&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 더 제공하는 &lt;em&gt;전체 순서&lt;/em&gt; 의 키에 있습니다.</target>
        </trans-unit>
        <trans-unit id="48b5e086c6b73b09a6ed5e87d2fbf4df89a0b3f4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its keys. The map is ordered according to the &lt;a href=&quot;../lang/comparable&quot;&gt;natural ordering&lt;/a&gt; of its keys, or by a &lt;a href=&quot;comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; typically provided at sorted map creation time. This order is reflected when iterating over the sorted map's collection views (returned by the &lt;code&gt;entrySet&lt;/code&gt;, &lt;code&gt;keySet&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; methods). Several additional operations are provided to take advantage of the ordering. (This interface is the map analogue of &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 더 제공하는 &lt;em&gt;전체 순서&lt;/em&gt; 의 키에 있습니다. 맵은 키 의 &lt;a href=&quot;../lang/comparable&quot;&gt;자연스러운 순서&lt;/a&gt; 에 따라 정렬 되거나 일반적으로 정렬 된 맵 생성 시간에 제공 되는 &lt;a href=&quot;comparator&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt; 의해 정렬됩니다. 이 순서는 정렬 된 맵의 콜렉션 뷰를 반복 할 때 반영됩니다 ( &lt;code&gt;entrySet&lt;/code&gt; , &lt;code&gt;keySet&lt;/code&gt; 및 &lt;code&gt;values&lt;/code&gt; 메소드 로 리턴 됨 ). 주문을 활용하기 위해 몇 가지 추가 작업이 제공됩니다. 이 인터페이스는 &lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt; 의 맵 아날로그입니다 .</target>
        </trans-unit>
        <trans-unit id="7e48ac8948c121853633ee49556249fbee04bf07" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;memorynotificationinfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;memorynotificationinfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="83775a71362eccbda74e498dbaf5475b80e9af93" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;memorynotificationinfo#MEMORY_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;memorynotificationinfo#MEMORY_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4fb768af361736ab2e96c30d909366181c9d332c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigableset&quot;&gt;&lt;code&gt;NavigableSet&lt;/code&gt;&lt;/a&gt; implementation based on a &lt;a href=&quot;treemap&quot;&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;navigableset&quot;&gt; &lt;code&gt;NavigableSet&lt;/code&gt; &lt;/a&gt; A의 기반 구현 &lt;a href=&quot;treemap&quot;&gt; &lt;code&gt;TreeMap&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e1945e9f8b306c48cd802c297f5976ff3571bd3c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigableset&quot;&gt;&lt;code&gt;NavigableSet&lt;/code&gt;&lt;/a&gt; implementation based on a &lt;a href=&quot;treemap&quot;&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;/a&gt;. The elements are ordered using their &lt;a href=&quot;../lang/comparable&quot;&gt;natural ordering&lt;/a&gt;, or by a &lt;a href=&quot;comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; provided at set creation time, depending on which constructor is used.</source>
          <target state="translated">&lt;a href=&quot;navigableset&quot;&gt; &lt;code&gt;NavigableSet&lt;/code&gt; &lt;/a&gt; A의 기반 구현 &lt;a href=&quot;treemap&quot;&gt; &lt;code&gt;TreeMap&lt;/code&gt; &lt;/a&gt; . 요소는 사용 된 생성자에 따라 &lt;a href=&quot;../lang/comparable&quot;&gt;자연 순서&lt;/a&gt; 또는 설정된 작성 시간에 제공된 &lt;a href=&quot;comparator&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt; 정렬 됩니다.</target>
        </trans-unit>
        <trans-unit id="b3f8c3e414c6371bee46fb98c1599f739e3b9d4a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed.</source>
          <target state="translated">입력 요소를 변경 가능한 결과 컨테이너로 누적 하는 &lt;a href=&quot;package-summary#Reduction&quot;&gt;변경 가능한 축소 작업으로&lt;/a&gt; , 선택적으로 모든 입력 요소가 처리 된 후 누적 된 결과를 최종 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="30f07146010e48a8044433994ff386aed66eeb3a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. Reduction operations can be performed either sequentially or in parallel.</source>
          <target state="translated">입력 요소를 변경 가능한 결과 컨테이너로 누적 하는 &lt;a href=&quot;package-summary#Reduction&quot;&gt;변경 가능한 축소 작업으로&lt;/a&gt; , 선택적으로 모든 입력 요소가 처리 된 후 누적 된 결과를 최종 표현으로 변환합니다. 감소 동작은 순차적으로 또는 병렬로 수행 될 수있다.</target>
        </trans-unit>
        <trans-unit id="4d44a71d81959b746ebcfb66ded7e38898863b29" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;pattern#matches-java.lang.String-java.lang.CharSequence-&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method is defined by this class as a convenience for when a regular expression is used just once. This method compiles an expression and matches an input sequence against it in a single invocation. The statement</source>
          <target state="translated">&lt;a href=&quot;pattern#matches-java.lang.String-java.lang.CharSequence-&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt; 방법은 정규 표현식은 한 번만 사용하는 경우의 편의를이 클래스에 의해 정의된다. 이 메소드는 표현식을 컴파일하고 단일 호출에서 입력 시퀀스를 표현식과 일치시킵니다. 진술</target>
        </trans-unit>
        <trans-unit id="16551e367ea0db18f29a807ba404d55b507c0e22" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; provides a more flexible form of barrier that may be used to control phased computation among multiple threads.</source>
          <target state="translated">&lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt; 여러 스레드간에 위상 계산을 제어하는데 사용될 수있다 장벽보다 유연한 형태를 제공한다.</target>
        </trans-unit>
        <trans-unit id="d4cc5e6df2360a9e6e2de69018f3951cf51d03d0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printjobattributeset&quot;&gt;&lt;code&gt;PrintJobAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printjobattribute&quot;&gt;&lt;code&gt;PrintJobAttribute&lt;/code&gt;&lt;/a&gt;s, reports the status of a print job.</source>
          <target state="translated">&lt;a href=&quot;printjobattributeset&quot;&gt; &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; &lt;/a&gt; 포함 &lt;a href=&quot;printjobattribute&quot;&gt; &lt;code&gt;PrintJobAttribute&lt;/code&gt; &lt;/a&gt; 들, 인쇄 작업의 상태를보고합니다.</target>
        </trans-unit>
        <trans-unit id="70278963eb3f5045b38f37da9545fc082fdf04e0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printrequestattributeset&quot;&gt;&lt;code&gt;PrintRequestAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printrequestattribute&quot;&gt;&lt;code&gt;PrintRequestAttribute&lt;/code&gt;&lt;/a&gt;s, specifies the settings to be applied to a whole print job and to all the docs in the print job.</source>
          <target state="translated">&lt;a href=&quot;printrequestattributeset&quot;&gt; &lt;code&gt;PrintRequestAttributeSet&lt;/code&gt; 를&lt;/a&gt; 포함, &lt;a href=&quot;printrequestattribute&quot;&gt; &lt;code&gt;PrintRequestAttribute&lt;/code&gt; &lt;/a&gt; 의 지정 설정이 인쇄 작업에서 문서 전체 인쇄 작업에 모두 적용된다.</target>
        </trans-unit>
        <trans-unit id="626b850e45fa1d1351fc6f6cec8df6365c571316" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printserviceattributeset&quot;&gt;&lt;code&gt;PrintServiceAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printserviceattribute&quot;&gt;&lt;code&gt;PrintServiceAttribute&lt;/code&gt;&lt;/a&gt;s, reports the status of a Print Service instance.</source>
          <target state="translated">&lt;a href=&quot;printserviceattributeset&quot;&gt; &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; &lt;/a&gt; 포함 &lt;a href=&quot;printserviceattribute&quot;&gt; &lt;code&gt;PrintServiceAttribute&lt;/code&gt; &lt;/a&gt; 들, 인쇄 서비스 인스턴스의 상태를보고합니다.</target>
        </trans-unit>
        <trans-unit id="d43c9a647251f8bb0736d88e294cec340b78b30b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;processhandle.info&quot;&gt;&lt;code&gt;ProcessHandle.Info&lt;/code&gt;&lt;/a&gt; instance has accessor methods that return information about the process if it is available.</source>
          <target state="translated">&lt;a href=&quot;processhandle.info&quot;&gt; &lt;code&gt;ProcessHandle.Info&lt;/code&gt; 의&lt;/a&gt; 인스턴스는 프로세스에 대한 반환 정보를 사용할 수있는 경우 것으로 접근 방법이있다.</target>
        </trans-unit>
        <trans-unit id="08eb7bbe74d99246a71e8526a63915d75b8d5b5e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;scheduledfuture&quot;&gt;&lt;code&gt;ScheduledFuture&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;scheduledfuture&quot;&gt; &lt;code&gt;ScheduledFuture&lt;/code&gt; &lt;/a&gt; 입니다 &lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; 를가&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aacd731c3ac5b2fa3a63dfc6e470fbf7dc7b7ce7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;scheduledfuture&quot;&gt;&lt;code&gt;ScheduledFuture&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;. Successful execution of the &lt;code&gt;run&lt;/code&gt; method causes completion of the &lt;code&gt;Future&lt;/code&gt; and allows access to its results.</source>
          <target state="translated">&lt;a href=&quot;scheduledfuture&quot;&gt; &lt;code&gt;ScheduledFuture&lt;/code&gt; &lt;/a&gt; 입니다 &lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; 를가&lt;/a&gt; . &lt;code&gt;run&lt;/code&gt; 메소드를 성공적으로 실행 하면 &lt;code&gt;Future&lt;/code&gt; 가 완료 되고 결과에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b1e2c183b61c2273675c1311e6d623cf9988d8f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object is immutable in the sense that it shouldn't change the set of constraints once it is created. In other words, if an application validates the same document twice against the same &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt;, it must always produce the same result.</source>
          <target state="translated">&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; 객체는 일단 작성되면, 제약을 변경할 수 없다고하는 미에서는 불변입니다. 즉, 애플리케이션이 동일한 &lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; 에 대해 동일한 문서의 유효성을 두 번 확인하는 경우 항상 동일한 결과를 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="aef6cabb3dc20889673ea86962ada279806cdcbd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object is thread safe and applications are encouraged to share it across many parsers in many threads.</source>
          <target state="translated">&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; 객체는 스레드 안전 및 응용 프로그램은 많은 thread가 많은 파서를 공유하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f2fb19f09a688d7221f482646a2976cccb1d5d5e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object is usually created from &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; 객체는 일반적에서 만든 &lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc5b0b24e94205c03509054e6a99979738a4a624" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;selector&quot;&gt;&lt;i&gt;selector&lt;/i&gt;&lt;/a&gt; is a multiplexor of &lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;selectable channels&lt;/i&gt;&lt;/a&gt;, which in turn are a special type of channel that can be put into &lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;non-blocking mode&lt;/i&gt;&lt;/a&gt;. To perform multiplexed I/O operations, one or more selectable channels are first created, put into non-blocking mode, and &lt;a href=&quot;selectablechannel#register(java.nio.channels.Selector,int,java.lang.Object)&quot;&gt;&lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt;&lt;/a&gt; with a selector. Registering a channel specifies the set of I/O operations that will be tested for readiness by the selector, and returns a &lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;selection key&lt;/i&gt;&lt;/a&gt; that represents the registration.</source>
          <target state="translated">&lt;a href=&quot;selector&quot;&gt;&lt;i&gt;선택기&lt;/i&gt;&lt;/a&gt; 의 멀티플렉서입니다 &lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;선택 채널을&lt;/i&gt;&lt;/a&gt; 차례로 투입 할 수있는 채널의 특별한 유형, &lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;비 블록 모드&lt;/i&gt;&lt;/a&gt; . 다중 I / O 작업을 수행하려면 먼저 하나 이상의 선택 가능한 채널을 만들고 비 차단 모드 로 전환하고 선택기에 &lt;a href=&quot;selectablechannel#register(java.nio.channels.Selector,int,java.lang.Object)&quot;&gt; &lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt; &lt;/a&gt; 합니다. 채널 등록은 선택기에서 준비 상태를 테스트 할 I / O 작업 집합을 지정 하고 등록을 나타내는 &lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;선택 키&lt;/i&gt;&lt;/a&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="087599e9f01711a89e5002b6a3fac3496a476ccd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;selector&quot;&gt;&lt;i&gt;selector&lt;/i&gt;&lt;/a&gt; is a multiplexor of &lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;selectable channels&lt;/i&gt;&lt;/a&gt;, which in turn are a special type of channel that can be put into &lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;non-blocking mode&lt;/i&gt;&lt;/a&gt;. To perform multiplexed I/O operations, one or more selectable channels are first created, put into non-blocking mode, and &lt;a href=&quot;selectablechannel#register-java.nio.channels.Selector-int-java.lang.Object-&quot;&gt;&lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt;&lt;/a&gt; with a selector. Registering a channel specifies the set of I/O operations that will be tested for readiness by the selector, and returns a &lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;selection key&lt;/i&gt;&lt;/a&gt; that represents the registration.</source>
          <target state="translated">&lt;a href=&quot;selector&quot;&gt;&lt;i&gt;선택기&lt;/i&gt;&lt;/a&gt; 의 멀티플렉서입니다 &lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;선택 채널을&lt;/i&gt;&lt;/a&gt; 차례로 투입 할 수있는 채널의 특별한 유형, &lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;비 블록 모드&lt;/i&gt;&lt;/a&gt; . 다중화 된 I / O 작업을 수행하기 위해, 하나 이상의 선택 가능한 채널이 먼저 생성되어 비 차단 모드로 설정되고 선택기에 &lt;a href=&quot;selectablechannel#register-java.nio.channels.Selector-int-java.lang.Object-&quot;&gt; &lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt; &lt;/a&gt; 됩니다. 채널을 등록하면 셀렉터가 준비 할 I / O 작업 세트를 지정 하고 등록을 나타내는 &lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;선택 키&lt;/i&gt;&lt;/a&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="032109425d793487d595a949321d88f0c3ea878c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that further provides a</source>
          <target state="translated">&lt;a href=&quot;set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 추가가를 제공</target>
        </trans-unit>
        <trans-unit id="2ec927f94a2df17af6a57f13009aabf70a1618b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt; 지정된 타겟으로 가장 가까운 요소를 돌려주는 네비게이션 메소드로 확장.</target>
        </trans-unit>
        <trans-unit id="a52e97a9c42db302a5027966560fe5afc820ef62" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets. Methods &lt;a href=&quot;#lowerEntry(K)&quot;&gt;&lt;code&gt;lowerEntry(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#floorEntry(K)&quot;&gt;&lt;code&gt;floorEntry(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ceilingEntry(K)&quot;&gt;&lt;code&gt;ceilingEntry(K)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#higherEntry(K)&quot;&gt;&lt;code&gt;higherEntry(K)&lt;/code&gt;&lt;/a&gt; return &lt;code&gt;Map.Entry&lt;/code&gt; objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning &lt;code&gt;null&lt;/code&gt; if there is no such key. Similarly, methods &lt;a href=&quot;#lowerKey(K)&quot;&gt;&lt;code&gt;lowerKey(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#floorKey(K)&quot;&gt;&lt;code&gt;floorKey(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ceilingKey(K)&quot;&gt;&lt;code&gt;ceilingKey(K)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#higherKey(K)&quot;&gt;&lt;code&gt;higherKey(K)&lt;/code&gt;&lt;/a&gt; return only the associated keys. All of these methods are designed for locating, not traversing entries.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt; 지정된 타겟으로 가장 가까운 요소를 돌려주는 네비게이션 메소드로 확장. 방법 &lt;a href=&quot;#lowerEntry(K)&quot;&gt; &lt;code&gt;lowerEntry(K)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#floorEntry(K)&quot;&gt; &lt;code&gt;floorEntry(K)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ceilingEntry(K)&quot;&gt; &lt;code&gt;ceilingEntry(K)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#higherEntry(K)&quot;&gt; &lt;code&gt;higherEntry(K)&lt;/code&gt; &lt;/a&gt; 돌려주는 &lt;code&gt;Map.Entry&lt;/code&gt; , 소정의 키보다 작 미만 각각 키와 연관된거나 같고, 그 이상 같거나, 더 큰 개체 그러한 키가 없으면 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다. 마찬가지로 &lt;a href=&quot;#lowerKey(K)&quot;&gt; &lt;code&gt;lowerKey(K)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#floorKey(K)&quot;&gt; &lt;code&gt;floorKey(K)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ceilingKey(K)&quot;&gt; &lt;code&gt;ceilingKey(K)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#higherKey(K)&quot;&gt; &lt;code&gt;higherKey(K)&lt;/code&gt; &lt;/a&gt; 는 연결된 키만 반환합니다. 이러한 모든 방법은 항목을 순회하는 것이 아니라 찾기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="e21a9d8f7719aa430394aa8fcac440d9c1486a90" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets. Methods &lt;code&gt;lowerEntry&lt;/code&gt;, &lt;code&gt;floorEntry&lt;/code&gt;, &lt;code&gt;ceilingEntry&lt;/code&gt;, and &lt;code&gt;higherEntry&lt;/code&gt; return &lt;code&gt;Map.Entry&lt;/code&gt; objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning &lt;code&gt;null&lt;/code&gt; if there is no such key. Similarly, methods &lt;code&gt;lowerKey&lt;/code&gt;, &lt;code&gt;floorKey&lt;/code&gt;, &lt;code&gt;ceilingKey&lt;/code&gt;, and &lt;code&gt;higherKey&lt;/code&gt; return only the associated keys. All of these methods are designed for locating, not traversing entries.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt; 지정된 타겟으로 가장 가까운 요소를 돌려주는 네비게이션 메소드로 확장. 방법 &lt;code&gt;lowerEntry&lt;/code&gt; , &lt;code&gt;floorEntry&lt;/code&gt; , &lt;code&gt;ceilingEntry&lt;/code&gt; 및 &lt;code&gt;higherEntry&lt;/code&gt; 복귀 &lt;code&gt;Map.Entry&lt;/code&gt; 복귀 주어진 키보다 미만,보다 각각 적은 키들과 연관거나 같고, 그 이상 같거나, 더 큰 오브젝트 &lt;code&gt;null&lt;/code&gt; 그러한 키가 존재하지 않는 경우. 마찬가지로, &lt;code&gt;lowerKey&lt;/code&gt; , &lt;code&gt;floorKey&lt;/code&gt; , &lt;code&gt;ceilingKey&lt;/code&gt; 및 &lt;code&gt;higherKey&lt;/code&gt; 메소드는 연관된 키만 리턴합니다. 이러한 모든 방법은 항목을 순회하지 않고 위치를 찾기 위해 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="ad1503f25864e0bfc71b631cdd88fd205a72ed21" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets.</source>
          <target state="translated">&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt; 탐색 방법은 지정된 타겟으로 가장 가까운 요소를보고로 확장.</target>
        </trans-unit>
        <trans-unit id="a3dd81efb8d626da5a7fc78314d3fa030b1cb443" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets. Methods &lt;a href=&quot;#lower(E)&quot;&gt;&lt;code&gt;lower(E)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#floor(E)&quot;&gt;&lt;code&gt;floor(E)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ceiling(E)&quot;&gt;&lt;code&gt;ceiling(E)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#higher(E)&quot;&gt;&lt;code&gt;higher(E)&lt;/code&gt;&lt;/a&gt; return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning &lt;code&gt;null&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt; 탐색 방법은 지정된 타겟으로 가장 가까운 요소를보고로 확장. &lt;a href=&quot;#lower(E)&quot;&gt; &lt;code&gt;lower(E)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#floor(E)&quot;&gt; &lt;code&gt;floor(E)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ceiling(E)&quot;&gt; &lt;code&gt;ceiling(E)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#higher(E)&quot;&gt; &lt;code&gt;higher(E)&lt;/code&gt; &lt;/a&gt; 메서드는 각각 주어진 요소보다 작거나 같거나 같거나 크거나 같은 요소를 반환하고, &lt;code&gt;null&lt;/code&gt; 경우 null을 반환합니다. 그러한 요소.</target>
        </trans-unit>
        <trans-unit id="144a593f0c8b14f1b705cfe56ecd7f10e553f7dd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets. Methods &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;, &lt;code&gt;ceiling&lt;/code&gt;, and &lt;code&gt;higher&lt;/code&gt; return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning &lt;code&gt;null&lt;/code&gt; if there is no such element. A &lt;code&gt;NavigableSet&lt;/code&gt; may be accessed and traversed in either ascending or descending order. The &lt;code&gt;descendingSet&lt;/code&gt; method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods &lt;code&gt;pollFirst&lt;/code&gt; and &lt;code&gt;pollLast&lt;/code&gt; that return and remove the lowest and highest element, if one exists, else returning &lt;code&gt;null&lt;/code&gt;. Methods &lt;code&gt;subSet&lt;/code&gt;, &lt;code&gt;headSet&lt;/code&gt;, and &lt;code&gt;tailSet&lt;/code&gt; differ from the like-named &lt;code&gt;SortedSet&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any &lt;code&gt;NavigableSet&lt;/code&gt; must implement the &lt;code&gt;NavigableSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt; 탐색 방법은 지정된 타겟으로 가장 가까운 요소를보고로 확장. 방법 &lt;code&gt;lower&lt;/code&gt; , &lt;code&gt;floor&lt;/code&gt; , &lt;code&gt;ceiling&lt;/code&gt; , 및 &lt;code&gt;higher&lt;/code&gt; 각각 이하,보다 미만 창 요소를 반환하거나, 소정의 소자에 비해보다 큰 같거나 같으면, 더 큰 &lt;code&gt;null&lt;/code&gt; 그러한 요소가 존재하지 않는 경우. &lt;code&gt;NavigableSet&lt;/code&gt; 액세스되고 하나 오름차순 또는 내림차순으로 이송 될 수있다. &lt;code&gt;descendingSet&lt;/code&gt; 메소드는 모든 관계형 및 방향성 메소드의 감각이 반전 된 세트의보기를 리턴합니다. 오름차순 작업 및 뷰의 성능은 내림차순 작업 및 뷰의 성능보다 빠릅니다. 이 인터페이스는 메소드를 추가로 정의합니다 &lt;code&gt;pollFirst&lt;/code&gt; 가장 낮은 요소와 가장 높은 요소 (있는 경우)를 반환하고 제거하는 pollFirst 및 &lt;code&gt;pollLast&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다. 방법 &lt;code&gt;subSet&lt;/code&gt; , &lt;code&gt;headSet&lt;/code&gt; 및 &lt;code&gt;tailSet&lt;/code&gt; 로는 등 명명 다를 &lt;code&gt;SortedSet&lt;/code&gt; 상한 및 하한은 배타적 대 포함 여부를 기술하는 추가의 인수를받는 방법. 어떤의 하위 집합 &lt;code&gt;NavigableSet&lt;/code&gt; 구현해야 &lt;code&gt;NavigableSet&lt;/code&gt; 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="508e612041bd0602e15347f4cc7579e902e0b73c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;resource bundle provider&lt;/a&gt; can provide resource bundles in any format such XML which replaces the need of &lt;a href=&quot;resourcebundle.control&quot;&gt;&lt;code&gt;ResourceBundle.Control&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;리소스 번들 공급자&lt;/a&gt; 는 &lt;a href=&quot;resourcebundle.control&quot;&gt; &lt;code&gt;ResourceBundle.Control&lt;/code&gt; &lt;/a&gt; 의 필요성을 대체하는 XML과 같은 모든 형식 의 리소스 번들을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="597357397545095f7f66f71c486785ddb3a1b7d4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;stringmonitor&quot;&gt;&lt;code&gt;StringMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of type &lt;code&gt;String&lt;/code&gt;. A notification is sent when an observed attribute becomes equal and/or not equal to a given string.</source>
          <target state="translated">&lt;a href=&quot;stringmonitor&quot;&gt; &lt;code&gt;StringMonitor&lt;/code&gt; 는&lt;/a&gt; 형의 특성을 관찰 &lt;code&gt;String&lt;/code&gt; . 관찰 된 속성이 주어진 문자열과 같거나 같지 않으면 알림이 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="7a554775d08ef16a1db651cce70fc15d0d58082e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt; object has a collection of &lt;code&gt;MidiChannels&lt;/code&gt;, usually one for each of the 16 channels prescribed by the MIDI 1.0 specification. The &lt;code&gt;Synthesizer&lt;/code&gt; generates sound when its &lt;code&gt;MidiChannels&lt;/code&gt; receive &lt;code&gt;noteOn&lt;/code&gt; messages.</source>
          <target state="translated">&lt;a href=&quot;synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; &lt;/a&gt; 객체의 컬렉션 갖는다 &lt;code&gt;MidiChannels&lt;/code&gt; 상기 MIDI 1.0 사양에 의해 규정 된 16 개 채널 각각에 대해 보통 하나. &lt;code&gt;Synthesizer&lt;/code&gt; 의 경우 사운드를 생성 &lt;code&gt;MidiChannels&lt;/code&gt; 가 받을 &lt;code&gt;noteOn&lt;/code&gt; 메시지.</target>
        </trans-unit>
        <trans-unit id="5a012dfeebb79628d1686005f76e53e7142647b5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; that can additionally schedule commands to run after a given delay, or to execute periodically.</source>
          <target state="translated">지정된 지연 후에 실행하거나 주기적으로 실행하도록 명령을 추가로 예약 할 수 있는 &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e1281a7af3f4c9dee846ab6949518dda5707a61d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to &lt;a href=&quot;../timer&quot;&gt;&lt;code&gt;Timer&lt;/code&gt;&lt;/a&gt; when multiple worker threads are needed, or when the additional flexibility or capabilities of &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; (which this class extends) are required.</source>
          <target state="translated">지정된 지연 후에 실행하거나 주기적으로 실행하도록 명령을 추가로 예약 할 수 있는 &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;이 클래스는 여러 작업자 스레드가 필요하거나 &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt; (이 클래스가 확장되는) 의 추가 유연성 또는 기능이 필요한 경우 &lt;a href=&quot;../timer&quot;&gt; &lt;code&gt;Timer&lt;/code&gt; &lt;/a&gt; 보다 선호됩니다 .</target>
        </trans-unit>
        <trans-unit id="21b3d179f0825291774efe6d3750b47065d83336" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;transformerconfigurationexception&quot;&gt;&lt;code&gt;TransformerConfigurationException&lt;/code&gt;&lt;/a&gt; may be thrown if for any reason a Transformer can not be created. A TransformerConfigurationException may be thrown if there is a syntax error in the transformation instructions, for example when &lt;a href=&quot;transformerfactory#newTransformer(javax.xml.transform.Source)&quot;&gt;&lt;code&gt;TransformerFactory.newTransformer(javax.xml.transform.Source)&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">&lt;a href=&quot;transformerconfigurationexception&quot;&gt; &lt;code&gt;TransformerConfigurationException&lt;/code&gt; &lt;/a&gt; 어떤 이유로 변압기가 작성할 수없는 경우 발생 될 수 있습니다. 예를 들어 &lt;a href=&quot;transformerfactory#newTransformer(javax.xml.transform.Source)&quot;&gt; &lt;code&gt;TransformerFactory.newTransformer(javax.xml.transform.Source)&lt;/code&gt; &lt;/a&gt; 가 호출 될 때 변환 명령에 구문 오류가있는 경우 TransformerConfigurationException이 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="804686a9d3acef4144d066dce97c14041c82c5c4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; is automatically reset every time the startDocument method is invoked.</source>
          <target state="translated">&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt; 자동으로 있으며, StartDocument의 메소드가 호출 될 때마다 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8e2baa9508561c44624c1e607804e4410a22b720" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; may buffer events to certain extent, but to allow &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; to be used by a parser, the following requirement has to be met.</source>
          <target state="translated">&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt; 어느 정도 이벤트를 버퍼링 할 수 있지만 수 있도록 &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; 로이&lt;/a&gt; 파서에 의해 사용되는 다음과 같은 요구 사항을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="418af67dd0828ba9e383620ac5b3cc678ea2af16" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; object is not thread-safe and not reentrant. In other words, it is the application's responsibility to make sure that one &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; object is not used from more than one thread at any given time.</source>
          <target state="translated">&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; 로의&lt;/a&gt; 객체는하지 스레드 안전하고 재진입하지 않습니다. 즉, 하나의 &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt; 객체가 주어진 시간에 둘 이상의 스레드에서 사용되지 않도록하는 것은 응용 프로그램의 책임 입니다.</target>
        </trans-unit>
        <trans-unit id="eceb4a0aa8cdf9a5bb4f0898489012d46eb2694b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;watchable&quot;&gt;&lt;code&gt;Watchable&lt;/code&gt;&lt;/a&gt; object is registered with a watch service by invoking its &lt;a href=&quot;watchable#register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind%5B%5D,java.nio.file.WatchEvent.Modifier...)&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; method, returning a &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; to represent the registration. When an event for an object is detected the key is &lt;em&gt;signalled&lt;/em&gt;, and if not currently signalled, it is queued to the watch service so that it can be retrieved by consumers that invoke the &lt;a href=&quot;#poll()&quot;&gt;&lt;code&gt;poll&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#take()&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; methods to retrieve keys and process events. Once the events have been processed the consumer invokes the key's &lt;a href=&quot;watchkey#reset()&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; method to reset the key which allows the key to be signalled and re-queued with further events.</source>
          <target state="translated">&lt;a href=&quot;watchable&quot;&gt; &lt;code&gt;Watchable&lt;/code&gt; &lt;/a&gt; 목적은 그 호출하여 감시 서비스에 등록되어있는 &lt;a href=&quot;watchable#register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind%5B%5D,java.nio.file.WatchEvent.Modifier...)&quot;&gt; &lt;code&gt;register&lt;/code&gt; &lt;/a&gt; , 방법 복귀 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; 을&lt;/a&gt; 등록을 나타 내기 위해. 객체에 대한 이벤트가 감지되면 키는 &lt;em&gt;신호&lt;/em&gt; 가 인보 것을 소비자가 검색 할 수 있도록, 현재 신호를하지 않을 경우, 그것은 시계 서비스에 대기 &lt;a href=&quot;#poll()&quot;&gt; &lt;code&gt;poll&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#take()&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt; 키와 프로세스 이벤트를 검색하는 방법을. 이벤트가 처리되면 소비자는 키의 &lt;a href=&quot;watchkey#reset()&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 키 를 재설정하고 추가 이벤트와 함께 키에 신호를 보내고 다시 대기열에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e38e84dbd5fbf8c4a36da4fa6f64faf252dc448" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;watchable&quot;&gt;&lt;code&gt;Watchable&lt;/code&gt;&lt;/a&gt; object is registered with a watch service by invoking its &lt;a href=&quot;watchable#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; method, returning a &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; to represent the registration. When an event for an object is detected the key is &lt;em&gt;signalled&lt;/em&gt;, and if not currently signalled, it is queued to the watch service so that it can be retrieved by consumers that invoke the &lt;a href=&quot;watchservice#poll--&quot;&gt;&lt;code&gt;poll&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;watchservice#take--&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; methods to retrieve keys and process events. Once the events have been processed the consumer invokes the key's &lt;a href=&quot;watchkey#reset--&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; method to reset the key which allows the key to be signalled and re-queued with further events.</source>
          <target state="translated">&lt;a href=&quot;watchable&quot;&gt; &lt;code&gt;Watchable&lt;/code&gt; &lt;/a&gt; 목적은 그 호출하여 감시 서비스에 등록되어있는 &lt;a href=&quot;watchable#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-&quot;&gt; &lt;code&gt;register&lt;/code&gt; &lt;/a&gt; , 방법 복귀 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; 을&lt;/a&gt; 등록을 나타 내기 위해. 객체에 대한 이벤트가 감지되면 키가 &lt;em&gt;신호&lt;/em&gt; 되고 현재 신호가없는 경우 &lt;a href=&quot;watchservice#poll--&quot;&gt; &lt;code&gt;poll&lt;/code&gt; &lt;/a&gt; 을 호출 하거나 키를 검색하고 이벤트를 처리하는 메소드를 &lt;a href=&quot;watchservice#take--&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt; 소비자가이를 검색 할 수 있도록 감시 서비스에 대기 합니다. 이벤트가 처리되면 소비자는 키의 &lt;a href=&quot;watchkey#reset--&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 키 를 재설정하여 키에 신호를 보내고 추가 이벤트를 다시 큐에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24a065fa3080837963ec25eca30e237dde0239bf" translate="yes" xml:space="preserve">
          <source>A &lt;a id=&quot;week_year&quot;&gt;&lt;em&gt;week year&lt;/em&gt;&lt;/a&gt; is in sync with a &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; cycle. All weeks between the first and last weeks (inclusive) have the same &lt;em&gt;week year&lt;/em&gt; value. Therefore, the first and last days of a week year may have different calendar year values.</source>
          <target state="translated">&lt;a id=&quot;week_year&quot;&gt;&lt;em&gt;주 올해&lt;/em&gt;&lt;/a&gt; A를 동기화에 &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; 의 주기. 첫 주와 마지막 주 (포함) 사이의 모든 주에는 동일한 &lt;em&gt;주 연도&lt;/em&gt; 값이 있습니다. 따라서 한주의 첫 번째 날과 마지막 날은 다른 역년 값을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bafaa93643e476baab4c314bb4e8fec0898917e2" translate="yes" xml:space="preserve">
          <source>A &lt;a name=&quot;week_year&quot;&gt;&lt;em&gt;week year&lt;/em&gt;&lt;/a&gt; is in sync with a &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; cycle. All weeks between the first and last weeks (inclusive) have the same &lt;em&gt;week year&lt;/em&gt; value. Therefore, the first and last days of a week year may have different calendar year values.</source>
          <target state="translated">1 &lt;a name=&quot;week_year&quot;&gt;&lt;em&gt;주일&lt;/em&gt;&lt;/a&gt; 은 &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; 주기 와 동기화됩니다 . 첫 주와 마지막 주 (포함) 사이의 모든 주에는 동일한 &lt;em&gt;주 연도&lt;/em&gt; 값이 있습니다. 따라서 연도의 첫 날과 마지막 날에는 달력 연도 값이 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a32bd68e7a89017dff287ded45b918cb9d1e779" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;synchronized view&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;동기 뷰&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="72336d1e66f1a59676f137b1d515bc4f4f29e666" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object has a collection of &lt;code&gt;MidiChannels&lt;/code&gt;, usually one for each of the 16 channels prescribed by the MIDI 1.0 specification. The &lt;code&gt;Synthesizer&lt;/code&gt; generates sound when its &lt;code&gt;MidiChannels&lt;/code&gt; receive &lt;code&gt;noteOn&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 객체의 컬렉션 갖는다 &lt;code&gt;MidiChannels&lt;/code&gt; 상기 MIDI 1.0 사양에 의해 규정 된 16 개 채널 각각에 대해 보통 하나. &lt;code&gt;Synthesizer&lt;/code&gt; 의 경우 사운드를 생성 &lt;code&gt;MidiChannels&lt;/code&gt; 가 받을 &lt;code&gt;noteOn&lt;/code&gt; 메시지.</target>
        </trans-unit>
        <trans-unit id="88a61d5e72877351082e461191f01eacb47de075" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BasicAttribute&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;BasicAttribute&lt;/code&gt; should lock the object.</source>
          <target state="translated">&lt;code&gt;BasicAttribute&lt;/code&gt; 인스턴스는 병행 multi-thread 액세스에 동기화되지 않습니다. &lt;code&gt;BasicAttribute&lt;/code&gt; 에 액세스하고 수정하려는 여러 스레드 가 객체를 잠 가야합니다.</target>
        </trans-unit>
        <trans-unit id="3d042ed6072ed6223bbeecf825d60331abea845a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextChild&lt;/code&gt;, or any arbitrary object associated with a &lt;code&gt;BeanContextChild&lt;/code&gt;, may obtain a reference to a currently registered service from its nesting &lt;code&gt;BeanContextServices&lt;/code&gt; via invocation of this method.</source>
          <target state="translated">&lt;code&gt;BeanContextChild&lt;/code&gt; 에 또는 관련한 임의의 객체 &lt;code&gt;BeanContextChild&lt;/code&gt; 에은 , 그 중첩으로부터 현재 등록 된 서비스에 대한 참조를 획득 할 수 &lt;code&gt;BeanContextServices&lt;/code&gt; 이 메소드를 호출하는 것에 의해,.</target>
        </trans-unit>
        <trans-unit id="e6477efbf7cdc53cfaece4e371f5177317ac7154" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextChild&lt;/code&gt;, or any arbitrary object associated with a &lt;code&gt;BeanContextChild&lt;/code&gt;, may obtain a reference to a currently registered service from its nesting &lt;code&gt;BeanContextServices&lt;/code&gt; via invocation of this method. When invoked, this method gets the service by calling the getService() method on the underlying &lt;code&gt;BeanContextServiceProvider&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BeanContextChild&lt;/code&gt; 에 또는 관련한 임의의 객체 &lt;code&gt;BeanContextChild&lt;/code&gt; 에은 , 그 중첩으로부터 현재 등록 된 서비스에 대한 참조를 획득 할 수 &lt;code&gt;BeanContextServices&lt;/code&gt; 이 메소드를 호출하는 것에 의해,. 호출되면이 메소드는 기본 &lt;code&gt;BeanContextServiceProvider&lt;/code&gt; 에서 getService () 메소드를 호출하여 서비스를 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="a7d937e3de27065b64bf0d388046e7b99fcc1d9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; 는이 아이들에 추가 또는 특정의 구성원에서 제거 목록 캡슐화 &lt;code&gt;BeanContext&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91bf1275319962cf826fde3798c03e8953740be4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;. An instance of this event is fired whenever a successful add(), remove(), retainAll(), removeAll(), or clear() is invoked on a given &lt;code&gt;BeanContext&lt;/code&gt; instance. Objects interested in receiving events of this type must implement the &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; interface, and must register their intent via the &lt;code&gt;BeanContext&lt;/code&gt;'s &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml)
 &lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; 는 아이들에 추가 또는 특정의 구성원에서 제거 목록 캡슐화 &lt;code&gt;BeanContext&lt;/code&gt; . 이 이벤트의 인스턴스는 주어진 &lt;code&gt;BeanContext&lt;/code&gt; 인스턴스 에서 성공적인 add (), remove (), retainAll (), removeAll () 또는 clear ()가 호출 될 때마다 시작됩니다 . 이러한 유형의 이벤트를 받기에 관심이 객체가 구현해야 &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; 사양의 인터페이스를하고를 통해 자신의 의도를 등록해야 &lt;code&gt;BeanContext&lt;/code&gt; 의 &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml) &lt;/code&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="9659d34478898dfbbfc3a12cfe88bfdd0393753b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;. An instance of this event is fired whenever a successful add(), remove(), retainAll(), removeAll(), or clear() is invoked on a given &lt;code&gt;BeanContext&lt;/code&gt; instance. Objects interested in receiving events of this type must implement the &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; interface, and must register their intent via the &lt;code&gt;BeanContext&lt;/code&gt;'s &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml)&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; 는이 아이들에 추가 또는 특정의 구성원에서 제거 목록 캡슐화 &lt;code&gt;BeanContext&lt;/code&gt; . 이 이벤트의 인스턴스는 주어진 &lt;code&gt;BeanContext&lt;/code&gt; 인스턴스 에서 성공적인 add (), remove (), preserveAll (), removeAll () 또는 clear ()가 호출 될 때마다 시작됩니다 . 이 유형의 이벤트 수신에 관심이있는 객체는 &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; 인터페이스를 구현 해야하며 &lt;code&gt;BeanContext&lt;/code&gt; 의 &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml)&lt;/code&gt; 메소드 를 통해 의도를 등록해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a6e0eebcfe0d3ed57683c9fc7337776a57a3c700" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Bindings&lt;/code&gt; that can be used to replace the state of this &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Bindings&lt;/code&gt; 이의 상태 대체 할 수 &lt;code&gt;ScriptEngine&lt;/code&gt; 를 검색 .</target>
        </trans-unit>
        <trans-unit id="9d9959b72a03cd70ae64c8744d103a8f8d2d3869" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BitSet&lt;/code&gt; is not safe for multithreaded use without external synchronization.</source>
          <target state="translated">&lt;code&gt;BitSet&lt;/code&gt; 외부 동기화 않고 multi-thread를 사용하는 것은 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db3d71546bbd73bb0af0b4a8e54824d1d4daee9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingDeque&lt;/code&gt; implementation may be used directly as a FIFO &lt;code&gt;BlockingQueue&lt;/code&gt;. The methods inherited from the &lt;code&gt;BlockingQueue&lt;/code&gt; interface are precisely equivalent to &lt;code&gt;BlockingDeque&lt;/code&gt; methods as indicated in the following table:</source>
          <target state="translated">&lt;code&gt;BlockingDeque&lt;/code&gt; 를 구현은 FIFO로서 직접 사용될 수있다 &lt;code&gt;BlockingQueue&lt;/code&gt; . &lt;code&gt;BlockingQueue&lt;/code&gt; 인터페이스 에서 상속 된 메소드는 다음 표에 표시된대로 &lt;code&gt;BlockingDeque&lt;/code&gt; 메소드와 정확히 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="a76835f399a49c314d4b4e5405eae0aaf04257b5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; intrinsically support any kind of &quot;close&quot; or &quot;shutdown&quot; operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special &lt;em&gt;end-of-stream&lt;/em&gt; or &lt;em&gt;poison&lt;/em&gt; objects, that are interpreted accordingly when taken by consumers.</source>
          <target state="translated">&lt;code&gt;BlockingQueue&lt;/code&gt; 를 않습니다 &lt;em&gt;하지&lt;/em&gt; 본질적 항목이 더 이상 추가되지 않는 것을 나타 내기 위해서 &quot;닫기&quot;또는 &quot;종료&quot;어떤 종류의 조작을 지원합니다. 이러한 기능의 요구와 사용법은 구현에 따라 다릅니다. 예를 들어, 일반적인 전술은 생산자 가 소비자가 취했을 때 해석되는 특수 &lt;em&gt;스트림 끝&lt;/em&gt; 또는 &lt;em&gt;독&lt;/em&gt; 개체 를 삽입 하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="eca4d1d80b86d58c41ef4f6ba5994e1a2b48aa61" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; does not accept &lt;code&gt;null&lt;/code&gt; elements. Implementations throw &lt;code&gt;NullPointerException&lt;/code&gt; on attempts to &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; or &lt;code&gt;offer&lt;/code&gt; a &lt;code&gt;null&lt;/code&gt;. A &lt;code&gt;null&lt;/code&gt; is used as a sentinel value to indicate failure of &lt;code&gt;poll&lt;/code&gt; operations.</source>
          <target state="translated">&lt;code&gt;BlockingQueue&lt;/code&gt; 허용하지 않습니다 &lt;code&gt;null&lt;/code&gt; 요소를. 구현은 &lt;code&gt;NullPointerException&lt;/code&gt; 을 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;put&lt;/code&gt; 또는 &lt;code&gt;offer&lt;/code&gt; 하려고 할 때 발생 합니다 . &lt;code&gt;null&lt;/code&gt; . &lt;code&gt;null&lt;/code&gt; 의 실패 표시하기 위해 센티넬 값으로 사용됩니다 &lt;code&gt;poll&lt;/code&gt; 조작.</target>
        </trans-unit>
        <trans-unit id="b78b406a4e1bd798dd6d5ed40a98f39662fdf4d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; may be capacity bounded. At any given time it may have a &lt;code&gt;remainingCapacity&lt;/code&gt; beyond which no additional elements can be &lt;code&gt;put&lt;/code&gt; without blocking. A &lt;code&gt;BlockingQueue&lt;/code&gt; without any intrinsic capacity constraints always reports a remaining capacity of &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BlockingQueue&lt;/code&gt; 용량이 제한되는 경우가 있습니다. 주어진 시간에 추가 용량을 &lt;code&gt;put&lt;/code&gt; 수없는 &lt;code&gt;remainingCapacity&lt;/code&gt; 용량을 가질 수 있습니다 . 블로킹없이 . &lt;code&gt;BlockingQueue&lt;/code&gt; 를 어떤 고유 용량 제약없이 항상의 잔여 용량보고 &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3723120985482d8ca2245a8af75ed9fa27d4ebc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyHandler&lt;/code&gt; is a function that takes a &lt;a href=&quot;httpresponse.responseinfo&quot;&gt;&lt;code&gt;ResponseInfo&lt;/code&gt;&lt;/a&gt; object; and which returns a &lt;code&gt;BodySubscriber&lt;/code&gt;. The &lt;code&gt;BodyHandler&lt;/code&gt; is invoked when the response status code and headers are available, but before the response body bytes are received.</source>
          <target state="translated">&lt;code&gt;BodyHandler&lt;/code&gt; 는 취하는 함수이다 &lt;a href=&quot;httpresponse.responseinfo&quot;&gt; &lt;code&gt;ResponseInfo&lt;/code&gt; 의&lt;/a&gt; 개체; 그리고 &lt;code&gt;BodySubscriber&lt;/code&gt; 를 반환합니다 . &lt;code&gt;BodyHandler&lt;/code&gt; 는 응답 상태 코드와 헤더를 사용할 때 호출되지만 응답하기 전에 몸 바이트가 수신된다.</target>
        </trans-unit>
        <trans-unit id="954a6d2d3b78f37533eb6cf9697e804c459bbe7c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyPublisher&lt;/code&gt; converts high-level Java objects into a flow of byte buffers suitable for sending as a request body.</source>
          <target state="translated">&lt;code&gt;BodyPublisher&lt;/code&gt; 는 자바 요청 본체로 전송하기에 적합한 바이트 버퍼의 흐름으로 개체 하이 레벨을 변환한다.</target>
        </trans-unit>
        <trans-unit id="5046af99e5a6c729927a847e5bf6b77f18c851b5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyPublisher&lt;/code&gt; converts high-level Java objects into a flow of byte buffers suitable for sending as a request body. The class &lt;a href=&quot;httprequest.bodypublishers&quot;&gt;&lt;code&gt;BodyPublishers&lt;/code&gt;&lt;/a&gt; provides implementations of many common publishers.</source>
          <target state="translated">&lt;code&gt;BodyPublisher&lt;/code&gt; 는 자바 요청 본체로 전송하기에 적합한 바이트 버퍼의 흐름으로 개체 하이 레벨을 변환한다. &lt;a href=&quot;httprequest.bodypublishers&quot;&gt; &lt;code&gt;BodyPublishers&lt;/code&gt; &lt;/a&gt; 클래스 는 많은 일반 게시자의 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="32c0496d2a688ac3691600ee951d371fb8c23bc9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyPublisher&lt;/code&gt; that reports a &lt;a href=&quot;#contentLength()&quot;&gt;content length&lt;/a&gt; of &lt;code&gt;0&lt;/code&gt; may not be subscribed to by the HTTP Client, as it has effectively no data to publish.</source>
          <target state="translated">&lt;code&gt;BodyPublisher&lt;/code&gt; 보고 &lt;a href=&quot;#contentLength()&quot;&gt;내용 길이&lt;/a&gt; 의 &lt;code&gt;0&lt;/code&gt; 효과적으로 게시 할 데이터가없는 한, HTTP 클라이언트에 의해 등록되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09e2ed31874107bea79cfdfff944b7b53f0559f0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodySubscriber&lt;/code&gt; consumes response body bytes and converts them into a higher-level Java type.</source>
          <target state="translated">&lt;code&gt;BodySubscriber&lt;/code&gt; 는 더 높은 수준의 자바 타입으로 응답 본문 바이트 및 변환을 소모합니다.</target>
        </trans-unit>
        <trans-unit id="3a8eade4c0acab26b1e0c3b867ecd680ca13e093" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodySubscriber&lt;/code&gt; consumes response body bytes and converts them into a higher-level Java type. The class &lt;a href=&quot;httpresponse.bodysubscribers&quot;&gt;&lt;code&gt;BodySubscriber&lt;/code&gt;&lt;/a&gt; provides implementations of many common body subscribers.</source>
          <target state="translated">&lt;code&gt;BodySubscriber&lt;/code&gt; 는 더 높은 수준의 자바 타입으로 응답 본문 바이트 및 변환을 소모합니다. &lt;a href=&quot;httpresponse.bodysubscribers&quot;&gt; &lt;code&gt;BodySubscriber&lt;/code&gt; &lt;/a&gt; 클래스 는 많은 일반 본문 구독자의 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="daad42d7694c98c1e82e4a60b31c2d07a4abd4dc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodySubscriber&lt;/code&gt; which publishes the response body through a &lt;code&gt;Publisher&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Publisher&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;&lt;/code&gt; 통해 응답 본문을 게시 하는 &lt;code&gt;BodySubscriber&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="c5ed9b672132ae16990dfbd114f77626e0e70005" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio.</source>
          <target state="translated">&lt;code&gt;BooleanControl&lt;/code&gt; 는 라인의 오디오에 영향을주는 2 개의 설정을 전환 할 수있는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bb49fdf6b0ad623e7f3f062755e5f831934335d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio. The settings are boolean values (&lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;). A graphical user interface might represent the control by a two-state button, an on/off switch, two mutually exclusive buttons, or a checkbox (among other possibilities). For example, depressing a button might activate a &lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt; control to silence the line's audio.</source>
          <target state="translated">&lt;code&gt;BooleanControl&lt;/code&gt; 는 라인의 오디오에 영향을주는 2 개의 설정을 전환 할 수있는 기능을 제공합니다. 설정은 부울 값 ( &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; )입니다. 그래픽 사용자 인터페이스는 두 가지 상태 버튼, 켜기 / 끄기 스위치, 상호 배타적 인 두 개의 버튼 또는 확인란 (다른 가능성 중에서)으로 컨트롤을 나타낼 수 있습니다. 예를 들어, 버튼을 누르면 &lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt; &lt;code&gt;MUTE&lt;/code&gt; &lt;/a&gt; 컨트롤 이 활성화 되어 라인의 오디오를 음소거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9911f76b173e085a5790f91a525f4397f9513f1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio. The settings are boolean values (&lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;). A graphical user interface might represent the control by a two-state button, an on/off switch, two mutually exclusive buttons, or a checkbox (among other possibilities). For example, depressing a button might activate a &lt;code&gt;&lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; control to silence the line's audio.</source>
          <target state="translated">&lt;code&gt;BooleanControl&lt;/code&gt; 는 라인의 오디오에 영향을주는 2 개의 설정을 전환 할 수있는 기능을 제공합니다. 설정은 부울 값 ( &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; )입니다. 그래픽 사용자 인터페이스는 2 상태 버튼, 켜기 / 끄기 스위치, 2 개의 상호 배타적 버튼 또는 확인란 (다른 가능성 중에서도)으로 제어를 나타낼 수 있습니다. 예를 들어, 버튼을 누르면 &lt;code&gt;&lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 컨트롤 이 활성화 되어 라인 오디오를 음소거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9b914d22e1412533f2cef28997e1fb52c2b2dc70" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BufferedInputStream&lt;/code&gt; adds functionality to another input stream-namely, the ability to buffer the input and to support the &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;BufferedInputStream&lt;/code&gt; 을는 , 스트림, 즉 다른 입력에 대한 입력을 버퍼링하고을 지원하는 기능을 기능을 추가 &lt;code&gt;mark&lt;/code&gt; 및 &lt;code&gt;reset&lt;/code&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="93c4c3c5557c20913ab566f39f1e4c2d80a37495" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BufferedInputStream&lt;/code&gt; adds functionality to another input stream-namely, the ability to buffer the input and to support the &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; methods. When the &lt;code&gt;BufferedInputStream&lt;/code&gt; is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The &lt;code&gt;mark&lt;/code&gt; operation remembers a point in the input stream and the &lt;code&gt;reset&lt;/code&gt; operation causes all the bytes read since the most recent &lt;code&gt;mark&lt;/code&gt; operation to be reread before new bytes are taken from the contained input stream.</source>
          <target state="translated">&lt;code&gt;BufferedInputStream&lt;/code&gt; 을는 입력 버퍼 및 상기 지원하는 다른 입력 스트림 즉, 기능을 추가 &lt;code&gt;mark&lt;/code&gt; 및 &lt;code&gt;reset&lt;/code&gt; 방법. 때 &lt;code&gt;BufferedInputStream&lt;/code&gt; 을가 생성되고, 내부 버퍼 배열이 생성된다. 스트림의 바이트를 읽거나 건너 뛸 때 포함 된 입력 스트림에서 한 번에 많은 바이트로 내부 버퍼가 다시 채워집니다. &lt;code&gt;mark&lt;/code&gt; 동작은 상기 입력 스트림과의 점 기억 &lt;code&gt;reset&lt;/code&gt; 동작은 가장 최근부터 모든 바이트를 읽을 원인이 &lt;code&gt;mark&lt;/code&gt; 작업이 새로운 바이트가 포함 된 입력 스트림에서 가져온 다시 읽기 전에이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0ecef3ad6c8543087c7266df26538e704760491" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Builder&lt;/code&gt; checks the components and invariants as components are added to the builder. The rationale for this is to detect errors as early as possible and not defer all validation to the &lt;a href=&quot;#build()&quot;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Builder&lt;/code&gt; 구성 요소 빌더에 추가되는 구성 요소와 불변을 확인합니다. 그 이유는 가능한 한 빨리 오류를 감지하고 모든 유효성 검사를 &lt;a href=&quot;#build()&quot;&gt; &lt;code&gt;build&lt;/code&gt; &lt;/a&gt; 방법으로 연기하지 않는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8074a1cd6822a8d169f849c5286eeb64c2975544" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Builder&lt;/code&gt; object is obtained by invoking one of the &lt;a href=&quot;aclentry#newBuilder()&quot;&gt;&lt;code&gt;newBuilder&lt;/code&gt;&lt;/a&gt; methods defined by the &lt;code&gt;AclEntry&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;Builder&lt;/code&gt; 오브젝트는 하나의 호출에 의해 얻어진다 &lt;a href=&quot;aclentry#newBuilder()&quot;&gt; &lt;code&gt;newBuilder&lt;/code&gt; 에&lt;/a&gt; 의해 정의 된 방법 &lt;code&gt;AclEntry&lt;/code&gt; 클래스.</target>
        </trans-unit>
        <trans-unit id="b6c6519b4d74a67eecc36daf82594125562f744c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Builder&lt;/code&gt; object is obtained by invoking one of the &lt;a href=&quot;aclentry#newBuilder--&quot;&gt;&lt;code&gt;newBuilder&lt;/code&gt;&lt;/a&gt; methods defined by the &lt;code&gt;AclEntry&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;Builder&lt;/code&gt; 오브젝트는 하나의 호출에 의해 얻어진다 &lt;a href=&quot;aclentry#newBuilder--&quot;&gt; &lt;code&gt;newBuilder&lt;/code&gt; 을&lt;/a&gt; 의해 정의 된 방법 &lt;code&gt;AclEntry&lt;/code&gt; 클래스.</target>
        </trans-unit>
        <trans-unit id="73ba69c95f915dc8cd68b2839f15c2e47a1be8bc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ButtonGroup&lt;/code&gt; can be used with any set of objects that inherit from &lt;code&gt;AbstractButton&lt;/code&gt;. Typically a button group contains instances of &lt;code&gt;JRadioButton&lt;/code&gt;, &lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;, or &lt;code&gt;JToggleButton&lt;/code&gt;. It wouldn't make sense to put an instance of &lt;code&gt;JButton&lt;/code&gt; or &lt;code&gt;JMenuItem&lt;/code&gt; in a button group because &lt;code&gt;JButton&lt;/code&gt; and &lt;code&gt;JMenuItem&lt;/code&gt; don't implement the selected state.</source>
          <target state="translated">&lt;code&gt;ButtonGroup&lt;/code&gt; 는 상속에서 오브젝트 세트로 사용할 수 있습니다 &lt;code&gt;AbstractButton&lt;/code&gt; 에 . 일반적으로 버튼 그룹에는 &lt;code&gt;JRadioButton&lt;/code&gt; , &lt;code&gt;JRadioButtonMenuItem&lt;/code&gt; 또는 &lt;code&gt;JToggleButton&lt;/code&gt; 의 인스턴스가 포함 됩니다. 그것은의 인스턴스 그다지 의미가 없습니다 &lt;code&gt;JButton&lt;/code&gt; 또는 &lt;code&gt;JMenuItem&lt;/code&gt; 를을 하기 때문에 버튼 그룹에서 &lt;code&gt;JButton&lt;/code&gt; 및 &lt;code&gt;JMenuItem&lt;/code&gt; 를가 선택 상태를 구현하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="791602e7a16aa82d92f76658de19c18cb1b48d6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains an internal buffer that contains bytes that may be read from the stream.</source>
          <target state="translated">ㅏ &lt;code&gt;ByteArrayInputStream&lt;/code&gt; 스트림으로부터 판독 될 바이트를 포함하는 내부 버퍼를 포함한다.</target>
        </trans-unit>
        <trans-unit id="aad024046734b23cdb23ec9792c4cc03fde87676" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains an internal buffer that contains bytes that may be read from the stream. An internal counter keeps track of the next byte to be supplied by the &lt;code&gt;read&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;ByteArrayInputStream&lt;/code&gt; 스트림으로부터 판독 될 바이트를 포함하는 내부 버퍼를 포함한다. 내부 카운터는 &lt;code&gt;read&lt;/code&gt; 메소드 가 제공 할 다음 바이트를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="c824b6f84f896f24c9a504599c92a3ba81b4c301" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteChannel&lt;/code&gt; connected to an entity that contains a variable-length sequence of bytes</source>
          <target state="translated">&lt;code&gt;ByteChannel&lt;/code&gt; 바이트의 가변 길이의 서열을 포함하는 개체에 연결된</target>
        </trans-unit>
        <trans-unit id="f8f59faa82da92687132e2471fe3d0f1c23da118" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CRLSelector&lt;/code&gt; that selects &lt;code&gt;X509CRLs&lt;/code&gt; that match all specified criteria.</source>
          <target state="translated">지정된 모든 기준과 일치하는 &lt;code&gt;X509CRLs&lt;/code&gt; 을 선택 하는 &lt;code&gt;CRLSelector&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="43965c0eb0dde6d867e326218f4d5796a9f54040" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CRLSelector&lt;/code&gt; that selects &lt;code&gt;X509CRLs&lt;/code&gt; that match all specified criteria. This class is particularly useful when selecting CRLs from a &lt;code&gt;CertStore&lt;/code&gt; to check revocation status of a particular certificate.</source>
          <target state="translated">&lt;code&gt;X509CRLs&lt;/code&gt; 을 선택 하는 &lt;code&gt;CRLSelector&lt;/code&gt; 지정된 모든 기준과 일치하는 . 이 클래스는 &lt;code&gt;CertStore&lt;/code&gt; 에서 CRL을 선택 하여 특정 인증서의 해지 상태를 확인할 때 특히 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="8d902bd075204accf1f5381d76d1c73144162046" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; implementation should always be instantiated with an available &lt;code&gt;SyncProvider&lt;/code&gt; mechanism, but there are cases where resetting the &lt;code&gt;SyncProvider&lt;/code&gt; object is desirable or necessary. For example, an application might want to use the default &lt;code&gt;SyncProvider&lt;/code&gt; object for a time and then choose to use a provider that has more recently become available and better fits its needs.</source>
          <target state="translated">&lt;code&gt;CachedRowSet&lt;/code&gt; 구현은 항상 사용 가능한 인스턴스화되어야 &lt;code&gt;SyncProvider&lt;/code&gt; 메커니즘하지만 재설정 경우가 있습니다 &lt;code&gt;SyncProvider&lt;/code&gt; 객체 것이 바람직하거나 필요는. 예를 들어, 응용 프로그램은 한동안 기본 &lt;code&gt;SyncProvider&lt;/code&gt; 개체를 사용한 다음 더 최근에 사용 가능 해지고 요구 사항에 더 잘 맞는 공급자를 사용하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0e72057bc3912d1067f8cf18d9927ed995edf5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; object is a</source>
          <target state="translated">&lt;code&gt;CachedRowSet&lt;/code&gt; 객체 인</target>
        </trans-unit>
        <trans-unit id="0131f3ed8b4d441f8ce0e8c5666cfad89c0cf346" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; object is a container for rows of data that caches its rows in memory, which makes it possible to operate without always being connected to its data source. Further, it is a JavaBeans&amp;trade; component and is scrollable, updatable, and serializable. A &lt;code&gt;CachedRowSet&lt;/code&gt; object typically contains rows from a result set, but it can also contain rows from any file with a tabular format, such as a spread sheet. The reference implementation supports getting data only from a &lt;code&gt;ResultSet&lt;/code&gt; object, but developers can extend the &lt;code&gt;SyncProvider&lt;/code&gt; implementations to provide access to other tabular data sources.</source>
          <target state="translated">&lt;code&gt;CachedRowSet&lt;/code&gt; 오브젝트는 항상 데이터 소스에 접속하지 않고 동작하는 것을 가능하게 메모리에 그 로우 캐시 데이터 행에 대한 컨테이너이다. 또한 JavaBeans &amp;trade; 구성 요소이며 스크롤, 업데이트 및 직렬화가 가능합니다. &lt;code&gt;CachedRowSet&lt;/code&gt; 객체는 일반적으로 결과 집합의 행을 포함하지만, 스프레드 시트와 같은 테이블 형식으로, 모든 파일의 행을 포함 할 수있다. 참조 구현은 &lt;code&gt;ResultSet&lt;/code&gt; 객체 에서만 데이터 가져 오기를 지원 하지만 개발자는 &lt;code&gt;SyncProvider&lt;/code&gt; 구현을 확장하여 다른 테이블 형식 데이터 소스에 대한 액세스를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d124d3faaddd6a205670c8032f9cef17c53c2d5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; object may use any &lt;code&gt;SyncProvider&lt;/code&gt; implementation that has been registered with the &lt;code&gt;SyncFactory&lt;/code&gt; singleton. An application can find out which &lt;code&gt;SyncProvider&lt;/code&gt; implementations have been registered by calling the following line of code.</source>
          <target state="translated">&lt;code&gt;CachedRowSet&lt;/code&gt; 오브젝트는 이용할 수 &lt;code&gt;SyncProvider&lt;/code&gt; 등록 된 구현 &lt;code&gt;SyncFactory&lt;/code&gt; 에 하나씩있다. 애플리케이션은 다음 코드 행을 호출하여 등록 된 &lt;code&gt;SyncProvider&lt;/code&gt; 구현을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2765fdbc2085f164518df4b47d7dea2a126e4d97" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Calendar&lt;/code&gt; object can produce all the calendar field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). &lt;code&gt;Calendar&lt;/code&gt; defines the range of values returned by certain calendar fields, as well as their meaning. For example, the first month of the calendar system has value &lt;code&gt;MONTH ==
 JANUARY&lt;/code&gt; for all calendars. Other values are defined by the concrete subclass, such as &lt;code&gt;ERA&lt;/code&gt;. See individual field documentation and subclass documentation for details.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; 객체가 특정의 언어 및 달력 스타일, 일자와 시각의 포맷 구현하는 데 필요한 모든 달력 필드 값을 생성 할 수 있습니다 (예를 들어, 일본의 태양력, 일본의 음력). &lt;code&gt;Calendar&lt;/code&gt; 는 특정 캘린더 필드에서 반환 한 값의 범위와 의미를 정의합니다. 예를 들어, 달력 시스템의 첫 달은 모든 달력에 대해 &lt;code&gt;MONTH == JANUARY&lt;/code&gt; 값 을 갖습니다. 다른 값은 &lt;code&gt;ERA&lt;/code&gt; 와 같은 구체적 서브 클래스에 의해 정의됩니다 . 자세한 내용은 개별 필드 설명서 및 하위 클래스 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dd6d85b0756315f1e4f7663f70b69679fb6b450a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CallSite&lt;/code&gt; 은 변수에 대한 홀더이다 &lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt; 그 호출, &lt;code&gt;target&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af7606e6576b77b9af5096f4621ff846b4bf3b23" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;CallSite&lt;/code&gt; delegates all calls to the site's current target. A &lt;code&gt;CallSite&lt;/code&gt; may be associated with several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, or it may be &quot;free floating&quot;, associated with none. In any case, it may be invoked through an associated method handle called its &lt;a href=&quot;#dynamicInvoker()&quot;&gt;dynamic invoker&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;CallSite&lt;/code&gt; 은 변수에 대한 홀더이다 &lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt; 그 호출, &lt;code&gt;target&lt;/code&gt; . &lt;code&gt;invokedynamic&lt;/code&gt; 명령은 연결 &lt;code&gt;CallSite&lt;/code&gt; 의 대표 사이트의 현재 대상에 대한 모든 호출을. &lt;code&gt;CallSite&lt;/code&gt; 은 여러과 관련 될 수있다 &lt;code&gt;invokedynamic&lt;/code&gt; 지시, 또는 없음과 관련, &quot;부동 무료&quot;있을 수 있습니다. 어떤 경우 든 &lt;a href=&quot;#dynamicInvoker()&quot;&gt;동적 호출자라는&lt;/a&gt; 관련 메서드 핸들을 통해 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53c675c04cbcf5d7a16adfd5966a7e5bcf6d3a57" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;CallSite&lt;/code&gt; delegates all calls to the site's current target. A &lt;code&gt;CallSite&lt;/code&gt; may be associated with several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, or it may be &quot;free floating&quot;, associated with none. In any case, it may be invoked through an associated method handle called its &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;dynamic invoker&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;CallSite&lt;/code&gt; 은 변수에 대한 홀더이다 &lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt; 그 호출, &lt;code&gt;target&lt;/code&gt; . &lt;code&gt;invokedynamic&lt;/code&gt; 명령은 연결 &lt;code&gt;CallSite&lt;/code&gt; 의 대표 사이트의 현재 대상에 대한 모든 호출을. &lt;code&gt;CallSite&lt;/code&gt; 은 여러과 관련 될 수있다 &lt;code&gt;invokedynamic&lt;/code&gt; 지시, 또는 없음과 관련, &quot;부동 무료&quot;있을 수 있습니다. 어쨌든 &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;동적 호출자라는&lt;/a&gt; 관련 메소드 핸들을 통해 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="547b858de4fcb2878a66306f28e205b002131a1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallableStatement&lt;/code&gt; can return one &lt;a href=&quot;resultset&quot;&gt;&lt;code&gt;ResultSet&lt;/code&gt;&lt;/a&gt; object or multiple &lt;code&gt;ResultSet&lt;/code&gt; objects. Multiple &lt;code&gt;ResultSet&lt;/code&gt; objects are handled using operations inherited from &lt;a href=&quot;statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;CallableStatement&lt;/code&gt; 하나의 반환 할 수 &lt;a href=&quot;resultset&quot;&gt; &lt;code&gt;ResultSet&lt;/code&gt; &lt;/a&gt; 객체 또는 복수 &lt;code&gt;ResultSet&lt;/code&gt; 객체. 여러 &lt;code&gt;ResultSet&lt;/code&gt; 객체는 &lt;a href=&quot;statement&quot;&gt; &lt;code&gt;Statement&lt;/code&gt; &lt;/a&gt; 에서 상속 된 작업을 사용하여 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="0413228db51a17d13f79f04340759b91adfe51d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CanonicalizationMethod&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)&quot;&gt;&lt;code&gt;newCanonicalizationMethod&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;CanonicalizationMethod&lt;/code&gt; 인스턴스를 호출하여 생성 될 수있다 &lt;a href=&quot;xmlsignaturefactory#newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)&quot;&gt; &lt;code&gt;newCanonicalizationMethod&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; 클래스.</target>
        </trans-unit>
        <trans-unit id="caab9927e90eaec3c1db4b9160eea9b93b8ff8c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Canvas&lt;/code&gt; component represents a blank rectangular area of the screen onto which the application can draw or from which the application can trap input events from the user.</source>
          <target state="translated">&lt;code&gt;Canvas&lt;/code&gt; 요소는 애플리케이션이 그리거나 애플리케이션 트래핑 입력 이벤트를 사용자로부터의 행 수의 화면에 빈 사각형 영역을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="0dd12b23a94abb46dcb9f0a2b86fff1bdd9aca53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CardLayout&lt;/code&gt; object is a layout manager for a container.</source>
          <target state="translated">&lt;code&gt;CardLayout&lt;/code&gt; 의 객체는 컨테이너의 레이아웃 매니저입니다.</target>
        </trans-unit>
        <trans-unit id="621e12c9ac34ad5ac20b20b766debfb166ad61be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CardLayout&lt;/code&gt; object is a layout manager for a container. It treats each component in the container as a card. Only one card is visible at a time, and the container acts as a stack of cards. The first component added to a &lt;code&gt;CardLayout&lt;/code&gt; object is the visible component when the container is first displayed.</source>
          <target state="translated">&lt;code&gt;CardLayout&lt;/code&gt; 의 객체는 컨테이너의 레이아웃 매니저입니다. 컨테이너의 각 구성 요소를 카드로 취급합니다. 한 번에 하나의 카드 만 볼 수 있으며 컨테이너는 카드 더미 역할을합니다. &lt;code&gt;CardLayout&lt;/code&gt; 객체에 추가 된 첫 번째 구성 요소 는 컨테이너가 처음 표시 될 때 표시되는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="8614ff39dac3427ab2dd1c97bfe13af1b41dbc07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathBuilderException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">&lt;code&gt;CertPathBuilderException&lt;/code&gt; 포장 예외에 대한 지원을 제공합니다. &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; 의&lt;/a&gt; 메소드는,이 예외를 발생시킨 throw 가능 객체 (있는 경우)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="728e147679cf1365aaeb47445695777da9023df7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathBuilderException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">&lt;code&gt;CertPathBuilderException&lt;/code&gt; 포장 예외에 대한 지원을 제공합니다. &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; 의&lt;/a&gt; 메소드는,이 예외를 발생시킨 throw 가능 객체 (있는 경우)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4c69635f5cbf1ce4cd70d0b40a545efeb57e3d75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathChecker&lt;/code&gt; implementation is typically created to extend a certification path validation algorithm. For example, an implementation may check for and process a critical private extension of each certificate in a certification path.</source>
          <target state="translated">ㅏ &lt;code&gt;CertPathChecker&lt;/code&gt; 의 구현은 일반적으로 증명서 패스 검사 알고리즘을 확장하기 위해서 작성됩니다. 예를 들어, 구현시 인증 경로에서 각 인증서의 중요한 개인 확장을 확인하고 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="22ed0f43de3b6721b8b086ee315ea80ef5b53940" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; may also include the certification path that was being validated when the exception was thrown, the index of the certificate in the certification path that caused the exception to be thrown, and the reason that caused the failure. Use the &lt;a href=&quot;#getCertPath()&quot;&gt;&lt;code&gt;getCertPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#getIndex()&quot;&gt;&lt;code&gt;getIndex&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#getReason()&quot;&gt;&lt;code&gt;getReason&lt;/code&gt;&lt;/a&gt; methods to retrieve this information.</source>
          <target state="translated">&lt;code&gt;CertPathValidatorException&lt;/code&gt; 또한 예외가 발생할 때, 예외를 유발 한 인증 패스의 증명서의 인덱스가 슬로우 검증되고 있던 인증 경로 및 장애 발생 원인을 포함 할 수있다. 이 정보를 검색 하려면 &lt;a href=&quot;#getCertPath()&quot;&gt; &lt;code&gt;getCertPath&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#getIndex()&quot;&gt; &lt;code&gt;getIndex&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#getReason()&quot;&gt; &lt;code&gt;getReason&lt;/code&gt; &lt;/a&gt; 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="50135e1330488469bfafb1eba28f2aab6b352876" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; may also include the certification path that was being validated when the exception was thrown, the index of the certificate in the certification path that caused the exception to be thrown, and the reason that caused the failure. Use the &lt;a href=&quot;certpathvalidatorexception#getCertPath--&quot;&gt;&lt;code&gt;getCertPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;certpathvalidatorexception#getIndex--&quot;&gt;&lt;code&gt;getIndex&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;certpathvalidatorexception#getReason--&quot;&gt;&lt;code&gt;getReason&lt;/code&gt;&lt;/a&gt; methods to retrieve this information.</source>
          <target state="translated">&lt;code&gt;CertPathValidatorException&lt;/code&gt; 또한 예외가 발생할 때, 예외를 유발 한 인증 패스의 증명서의 인덱스가 슬로우 검증되고 있던 인증 경로 및 장애 발생 원인을 포함 할 수있다. &lt;a href=&quot;certpathvalidatorexception#getCertPath--&quot;&gt; &lt;code&gt;getCertPath&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;certpathvalidatorexception#getIndex--&quot;&gt; &lt;code&gt;getIndex&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;certpathvalidatorexception#getReason--&quot;&gt; &lt;code&gt;getReason&lt;/code&gt; 을&lt;/a&gt; 사용하십시오. 이 정보를 검색하는 방법을.</target>
        </trans-unit>
        <trans-unit id="38b1b71011b8b49819d5ea795a235b3d12b5fdd3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">&lt;code&gt;CertPathValidatorException&lt;/code&gt; 포장 예외에 대한 지원을 제공합니다. &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; 의&lt;/a&gt; 메소드는,이 예외를 발생시킨 throw 가능 객체 (있는 경우)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="15eba905a426f40a8890ddabc999c9a3b52da9f0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">&lt;code&gt;CertPathValidatorException&lt;/code&gt; 포장 예외에 대한 지원을 제공합니다. &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; &lt;/a&gt; 메소드는,이 예외를 발생시킨 throw 가능 객체 (있는 경우)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="65f560d009f0e6567db9175712bf85433fe5cc63" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertSelector&lt;/code&gt; that selects &lt;code&gt;X509Certificates&lt;/code&gt; that match all specified criteria.</source>
          <target state="translated">&lt;code&gt;X509Certificates&lt;/code&gt; 를 선택 하는 &lt;code&gt;CertSelector&lt;/code&gt; 지정된 모든 기준과 일치하는 .</target>
        </trans-unit>
        <trans-unit id="be5c8ef13cabc2de05d5ea064c20acabb9a14fa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertSelector&lt;/code&gt; that selects &lt;code&gt;X509Certificates&lt;/code&gt; that match all specified criteria. This class is particularly useful when selecting certificates from a &lt;code&gt;CertStore&lt;/code&gt; to build a PKIX-compliant certification path.</source>
          <target state="translated">지정된 모든 기준과 일치하는 &lt;code&gt;X509Certificates&lt;/code&gt; 를 선택 하는 &lt;code&gt;CertSelector&lt;/code&gt; 입니다 . 이 클래스는 &lt;code&gt;CertStore&lt;/code&gt; 에서 인증서를 선택할 때 특히 유용합니다. PKIX 호환 인증 경로를 구축하기 위해 합니다.</target>
        </trans-unit>
        <trans-unit id="7ea723de250e2659718edd41421ee46e8f50da70" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertStoreException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">&lt;code&gt;CertStoreException&lt;/code&gt; 포장 예외에 대한 지원을 제공합니다. &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; 의&lt;/a&gt; 메소드는,이 예외를 발생시킨 throw 가능 객체 (있는 경우)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="238fe188e71ee7dfe9fce6d0836d7928d5866c0c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertStoreException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">&lt;code&gt;CertStoreException&lt;/code&gt; 포장 예외에 대한 지원을 제공합니다. &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; 의&lt;/a&gt; 메소드는,이 예외를 발생시킨 throw 가능 객체 (있는 경우)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2132e6d56d7be6af520361f786a04619acc657a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CharSequence&lt;/code&gt; is a readable sequence of &lt;code&gt;char&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;CharSequence&lt;/code&gt; 의 판독 시퀀스 인 &lt;code&gt;char&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="bd0a7e6c88d50c76fa8e459d55e92a9be2f616e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CharSequence&lt;/code&gt; is a readable sequence of &lt;code&gt;char&lt;/code&gt; values. This interface provides uniform, read-only access to many different kinds of &lt;code&gt;char&lt;/code&gt; sequences. A &lt;code&gt;char&lt;/code&gt; value represents a character in the</source>
          <target state="translated">&lt;code&gt;CharSequence&lt;/code&gt; 의 판독 시퀀스 인 &lt;code&gt;char&lt;/code&gt; 값. 이 인터페이스는 다양한 종류의 &lt;code&gt;char&lt;/code&gt; 시퀀스에 대한 균일 한 읽기 전용 액세스를 제공합니다 . &lt;code&gt;char&lt;/code&gt; 값의 특성을 나타내는</target>
        </trans-unit>
        <trans-unit id="e7df40ea3adad9621e2b177acc8b4c53a91715cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChoiceFormat&lt;/code&gt; allows you to attach a format to a range of numbers.</source>
          <target state="translated">&lt;code&gt;ChoiceFormat&lt;/code&gt; 를이 당신 범위의 수치에 포맷을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bdbb6f65dc1a455bd231eb6943f7e27c4025766" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChoiceFormat&lt;/code&gt; allows you to attach a format to a range of numbers. It is generally used in a &lt;code&gt;MessageFormat&lt;/code&gt; for handling plurals. The choice is specified with an ascending list of doubles, where each item specifies a half-open interval up to the next item:</source>
          <target state="translated">&lt;code&gt;ChoiceFormat&lt;/code&gt; 를이 당신 범위의 수치에 포맷을 추가 할 수 있습니다. 일반적으로 복수를 처리하기 위해 &lt;code&gt;MessageFormat&lt;/code&gt; 에서 사용됩니다 . 선택 항목은 오름차순으로 증가하는 doubles 목록으로 지정됩니다. 여기서 각 항목은 다음 항목까지 반 개방 간격을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="ec4321c06a7245a80c8ed4f7d37472138143a6a0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoLocalDate&lt;/code&gt; is the abstract representation of a date where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">&lt;code&gt;ChronoLocalDate&lt;/code&gt; 는 날짜의 추상적 인 표현이다 &lt;code&gt;Chronology chronology&lt;/code&gt; 또는 캘린더 시스템, 플러그입니다. 날짜는 &lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; 로&lt;/a&gt; 표현되는 필드 로 정의되며 가장 일반적인 구현은 &lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt; 에서 정의됩니다 . 연대기는 달력 시스템의 작동 방식과 표준 필드의 의미를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="f18b024a28c84c2b5dc8056afec37c541ede1c43" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; is the abstract representation of a local date-time where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">&lt;code&gt;ChronoLocalDateTime&lt;/code&gt; 는 로컬 날짜 - 시간의 추상적 인 표현이다 &lt;code&gt;Chronology chronology&lt;/code&gt; 또는 캘린더 시스템, 플러그입니다. 날짜-시간은 가장 일반적인 구현이 &lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; 에&lt;/a&gt; 정의 된 &lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; 로&lt;/a&gt; 표시되는 필드 로 정의됩니다 . 연대기는 달력 시스템의 작동 방식과 표준 필드의 의미를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="c76c79312f7e6ddd8a4da9c994ee6a3d57012b1f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; is the abstract representation of an offset date-time where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">&lt;code&gt;ChronoZonedDateTime&lt;/code&gt; 는 오프셋 날짜 - 시간의 추상적 인 표현이다 &lt;code&gt;Chronology chronology&lt;/code&gt; 또는 캘린더 시스템, 플러그입니다. 날짜-시간은 가장 일반적인 구현이 &lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; 에&lt;/a&gt; 정의 된 &lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; 로&lt;/a&gt; 표시되는 필드 로 정의됩니다 . 연대기는 달력 시스템의 작동 방식과 표준 필드의 의미를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="2e2380d8987110818f81e55fb1d2a8118642ba89" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Cipher&lt;/code&gt; property in a provider master class may have one of the following formats:</source>
          <target state="translated">제공자 마스터 클래스 의 &lt;code&gt;Cipher&lt;/code&gt; 특성은 다음 형식 중 하나를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d4a61915e8a9354cda5cb40cb0bc94d6d8a034c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; object indicating the legal object type for use by the &lt;code&gt;createInputStreamInstance&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 바이 사용되는 정당한 객체 형을 나타내는 개체를 &lt;code&gt;createInputStreamInstance&lt;/code&gt; 의 방법을.</target>
        </trans-unit>
        <trans-unit id="551a73a83752aece608b370ef85b4554f6122dda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the newly available service</source>
          <target state="translated">새로 이용 가능한 서비스에 대한 &lt;code&gt;Class&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="8e648ba4c009aceac40f44ba6c1fde70c046db83" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the service that is being revoked</source>
          <target state="translated">취소되는 서비스에 대한 &lt;code&gt;Class&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="8d5022d7a53475c3ab19ea496fbbb9690140fc5d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the service that is being revoked.</source>
          <target state="translated">취소되는 서비스에 대한 &lt;code&gt;Class&lt;/code&gt; 참조.</target>
        </trans-unit>
        <trans-unit id="f09859abcc28d86a85cbfa595e6d974ffaef8054" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ClassCastException&lt;/code&gt; is thrown if &lt;code&gt;obj&lt;/code&gt; is not a primitive array of type &lt;code&gt;TransferType&lt;/code&gt;. An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if the coordinates are not in bounds, or if &lt;code&gt;obj&lt;/code&gt; is not large enough to hold the pixel data.</source>
          <target state="translated">&lt;code&gt;ClassCastException&lt;/code&gt; 이는 경우에 발생된다 &lt;code&gt;obj&lt;/code&gt; 가 형의 원시적 배열이 아닌 &lt;code&gt;TransferType&lt;/code&gt; . &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; 가 좌표가 경계 내에없는 경우 발생 될 수있는 경우, 또는 &lt;code&gt;obj&lt;/code&gt; 픽셀 데이터를 저장할 충분한 아니다.</target>
        </trans-unit>
        <trans-unit id="76833f57fb130a6054ef6ee8795bec499dea3722" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Closeable&lt;/code&gt; is a source or destination of data that can be closed.</source>
          <target state="translated">&lt;code&gt;Closeable&lt;/code&gt; 소스 또는 폐쇄 될 수있는 데이터의 목적지이다.</target>
        </trans-unit>
        <trans-unit id="ead854f27504c26751e8689f46b3ee4504aa692a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Closeable&lt;/code&gt; is a source or destination of data that can be closed. The close method is invoked to release resources that the object is holding (such as open files).</source>
          <target state="translated">&lt;code&gt;Closeable&lt;/code&gt; 소스 또는 폐쇄 될 수있는 데이터의 목적지이다. close 메소드는 오브젝트가 보유하고있는 자원 (예 : 열린 파일)을 해제하기 위해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fa25ad62b7032b57adecb70db33d146dd9cf1256" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollationKey&lt;/code&gt; represents a &lt;code&gt;String&lt;/code&gt; under the rules of a specific &lt;code&gt;Collator&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;CollationKey&lt;/code&gt; 나타내는 &lt;code&gt;String&lt;/code&gt; 특정의 규칙 아래 &lt;code&gt;Collator&lt;/code&gt; 오브젝트를.</target>
        </trans-unit>
        <trans-unit id="6392757ac50f95e05875f5d1abe06fd277d9183c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollationKey&lt;/code&gt; represents a &lt;code&gt;String&lt;/code&gt; under the rules of a specific &lt;code&gt;Collator&lt;/code&gt; object. Comparing two &lt;code&gt;CollationKey&lt;/code&gt;s returns the relative order of the &lt;code&gt;String&lt;/code&gt;s they represent. Using &lt;code&gt;CollationKey&lt;/code&gt;s to compare &lt;code&gt;String&lt;/code&gt;s is generally faster than using &lt;code&gt;Collator.compare&lt;/code&gt;. Thus, when the &lt;code&gt;String&lt;/code&gt;s must be compared multiple times, for example when sorting a list of &lt;code&gt;String&lt;/code&gt;s. It's more efficient to use &lt;code&gt;CollationKey&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;CollationKey&lt;/code&gt; 나타내는 &lt;code&gt;String&lt;/code&gt; 특정의 규칙 아래 &lt;code&gt;Collator&lt;/code&gt; 오브젝트를. 두 &lt;code&gt;CollationKey&lt;/code&gt; 를 비교하면 이들이 나타내는 &lt;code&gt;String&lt;/code&gt; 의 상대 순서를 반환합니다 . &lt;code&gt;CollationKey&lt;/code&gt; 를 사용하여 &lt;code&gt;String&lt;/code&gt; 을 비교하는 것은 일반적으로 &lt;code&gt;Collator.compare&lt;/code&gt; 를 사용하는 것보다 빠릅니다 . 경우에 따라서, &lt;code&gt;String&lt;/code&gt; 의 여러 번 비교해야, 예를 들어 목록 정렬 할 때 &lt;code&gt;String&lt;/code&gt; 들. &lt;code&gt;CollationKey&lt;/code&gt; 를 사용하는 것이 더 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="ae4706b0d2166804b39f4bdf98edf570f3f0ff49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;CRL&lt;/code&gt;s that match the specified selector (never &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;Collection&lt;/code&gt; 의 &lt;code&gt;CRL&lt;/code&gt; 지정된 셀렉터 (결코 일치의 &lt;code&gt;null&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="98391a28fff09416b3a85282c39d7f24bf17bd18" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s that match the specified selector (never &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;Collection&lt;/code&gt; 의 &lt;code&gt;Certificate&lt;/code&gt; 지정된 셀렉터 (결코 일치의 &lt;code&gt;null&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="fcf9b063a928ea8d1b27f485abf63c132f37ab3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collector&lt;/code&gt; is specified by four functions that work together to accumulate entries into a mutable result container, and optionally perform a final transform on the result. They are:</source>
          <target state="translated">&lt;code&gt;Collector&lt;/code&gt; 변경 가능한 결과를 용기에 축적 항목과 함께 네 개의 함수에 의해 해당 작업을 지정하고 선택적으로는 최종 결과에 대해 변환을 수행한다. 그들은:</target>
        </trans-unit>
        <trans-unit id="b116730b94f507b9013d20aec57e08a1a73e37ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collector&lt;/code&gt; which concatenates CharSequence elements, separated by the specified delimiter, in encounter order</source>
          <target state="translated">지정된 구분 기호로 구분 된 CharSequence 요소를 발생 순서대로 연결 하는 &lt;code&gt;Collector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7a306058b1bed8b4be6e2ba45666d219a0afc9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values that represent color and alpha information as separate samples and that store each sample in a separate data element.</source>
          <target state="translated">색상 및 알파 정보를 별도의 샘플로 표시하고 각 샘플을 별도의 데이터 요소에 저장하는 픽셀 값으로 작동 하는 &lt;code&gt;ColorModel&lt;/code&gt; 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="eec5db285d074dc6c032370e2718b8b026511fc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values that represent color and alpha information as separate samples and that store each sample in a separate data element. This class can be used with an arbitrary &lt;code&gt;ColorSpace&lt;/code&gt;. The number of color samples in the pixel values must be same as the number of color components in the &lt;code&gt;ColorSpace&lt;/code&gt;. There may be a single alpha sample.</source>
          <target state="translated">색상 및 알파 정보를 별도의 샘플로 표시하고 각 샘플을 별도의 데이터 요소에 저장하는 픽셀 값으로 작동 하는 &lt;code&gt;ColorModel&lt;/code&gt; 클래스입니다. 이 클래스는 임의의 &lt;code&gt;ColorSpace&lt;/code&gt; 와 함께 사용할 수 있습니다 . 픽셀 값의 색상 샘플 수는 &lt;code&gt;ColorSpace&lt;/code&gt; 의 색상 구성 요소 수와 동일해야합니다 . 단일 알파 샘플이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="547818ca649f844f79bb465943cb5471724df68c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompletableFuture&lt;/code&gt; returned from this method can complete exceptionally with:</source>
          <target state="translated">이 메서드에서 반환 된 &lt;code&gt;CompletableFuture&lt;/code&gt; 는 다음과 같이 예외적으로 완료 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd284d2909299b800818a662712c68cf36c2e24e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentColorModel&lt;/code&gt; can be used in conjunction with a &lt;code&gt;ComponentSampleModel&lt;/code&gt;, a &lt;code&gt;BandedSampleModel&lt;/code&gt;, or a &lt;code&gt;PixelInterleavedSampleModel&lt;/code&gt; to construct a &lt;code&gt;BufferedImage&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ComponentColorModel&lt;/code&gt; 과 함께 사용될 수 &lt;code&gt;ComponentSampleModel&lt;/code&gt; 하는 &lt;code&gt;BandedSampleModel&lt;/code&gt; 와 나 &lt;code&gt;PixelInterleavedSampleModel&lt;/code&gt; 컨스하는 &lt;code&gt;BufferedImage&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="215b9e8124f54fcf6fc4752426c310c5bc4b0444" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentInputMap&lt;/code&gt; is an &lt;code&gt;InputMap&lt;/code&gt; associated with a particular &lt;code&gt;JComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ComponentInputMap&lt;/code&gt; 는이 이다 &lt;code&gt;InputMap&lt;/code&gt; 를 특정와 연관된 &lt;code&gt;JComponent&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="a562c4e394af1191e27ca7eec183f37f0dced096" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentInputMap&lt;/code&gt; is an &lt;code&gt;InputMap&lt;/code&gt; associated with a particular &lt;code&gt;JComponent&lt;/code&gt;. The component is automatically notified whenever the &lt;code&gt;ComponentInputMap&lt;/code&gt; changes. &lt;code&gt;ComponentInputMap&lt;/code&gt;s are used for &lt;code&gt;WHEN_IN_FOCUSED_WINDOW&lt;/code&gt; bindings.</source>
          <target state="translated">&lt;code&gt;ComponentInputMap&lt;/code&gt; 는이 이다 &lt;code&gt;InputMap&lt;/code&gt; 를 특정와 연관된 &lt;code&gt;JComponent&lt;/code&gt; 에 . &lt;code&gt;ComponentInputMap&lt;/code&gt; 이 변경 될 때마다 구성 요소에 자동으로 알림이 전송됩니다 . &lt;code&gt;ComponentInputMap&lt;/code&gt; 은 &lt;code&gt;WHEN_IN_FOCUSED_WINDOW&lt;/code&gt; 바인딩에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c31a57b7db785bbafda48aee8a14f2345128cafa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentListener&lt;/code&gt; object is registered via &lt;code&gt;addComponentListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ComponentListener&lt;/code&gt; 개체에 의해 등록되어 &lt;code&gt;addComponentListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de776e86bb01bd11700a39d1b521872b9776c9ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompositeData&lt;/code&gt; representing &lt;code&gt;ThreadInfo&lt;/code&gt; of version &lt;em&gt;N&lt;/em&gt; contains &lt;code&gt;&quot;stackTrace&quot;&lt;/code&gt; attribute and &lt;code&gt;&quot;lockedMonitors&quot;&lt;/code&gt; attribute representing an array of &lt;code&gt;StackTraceElement&lt;/code&gt; and an array of &lt;a href=&quot;monitorinfo&quot;&gt;&lt;code&gt;MonitorInfo&lt;/code&gt;&lt;/a&gt; respectively and their types are of version &lt;em&gt;N&lt;/em&gt;. The &lt;code&gt;&quot;lockedStackFrame&quot;&lt;/code&gt; attribute in &lt;a href=&quot;monitorinfo#from(javax.management.openmbean.CompositeData)&quot;&gt;&lt;code&gt;MonitorInfo&lt;/code&gt;&lt;/a&gt;'s composite type must represent &lt;code&gt;StackTraceElement&lt;/code&gt; of the same version &lt;em&gt;N&lt;/em&gt;. Otherwise, this method will throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CompositeData&lt;/code&gt; 에 나타내는 &lt;code&gt;ThreadInfo&lt;/code&gt; 에 버전을 &lt;em&gt;N이&lt;/em&gt; 포함 &lt;code&gt;&quot;stackTrace&quot;&lt;/code&gt; 속성 및 &lt;code&gt;&quot;lockedMonitors&quot;&lt;/code&gt; 의 배열을 나타내는 속성 &lt;code&gt;StackTraceElement&lt;/code&gt; 및 배열 &lt;a href=&quot;monitorinfo&quot;&gt; &lt;code&gt;MonitorInfo&lt;/code&gt; &lt;/a&gt; 각각 및 그 타입의 버전이다 &lt;em&gt;N&lt;/em&gt; . &lt;a href=&quot;monitorinfo#from(javax.management.openmbean.CompositeData)&quot;&gt; &lt;code&gt;MonitorInfo&lt;/code&gt; &lt;/a&gt; 복합 유형 의 &lt;code&gt;&quot;lockedStackFrame&quot;&lt;/code&gt; 속성 은 동일한 버전 &lt;em&gt;N의 &lt;/em&gt; &lt;code&gt;StackTraceElement&lt;/code&gt; 를 나타내야합니다 . 그렇지 않으면이 메소드는 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 을 발생 시킵니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d2570bd5ce1ea4612f9ae93952dccac9143ac53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompositeName&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;CompositeName&lt;/code&gt; should lock the object.</source>
          <target state="translated">&lt;code&gt;CompositeName&lt;/code&gt; 인스턴스는 병행 multi-thread 액세스에 동기화되지 않습니다. &lt;code&gt;CompositeName&lt;/code&gt; 에 액세스하고 수정하려는 여러 스레드 가 객체를 잠 가야합니다.</target>
        </trans-unit>
        <trans-unit id="bc18441fe19e7991e5f4bb3ce9a1c8fb901cb25a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompoundControl&lt;/code&gt;, such as a graphic equalizer, provides control over two or more related properties, each of which is itself represented as a &lt;code&gt;Control&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CompoundControl&lt;/code&gt; 그러한 그래픽 이퀄라이저와 같이 자체가로 표시되는 각각의 둘 개 이상의 관련 특성 제어 제공 &lt;code&gt;Control&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb19507e95a7882d1164574206b39a444478df23" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompoundName&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;CompoundName&lt;/code&gt; should lock the object.</source>
          <target state="translated">&lt;code&gt;CompoundName&lt;/code&gt; 등의 인스턴스는 병행 multi-thread 액세스에 동기화되지 않습니다. &lt;code&gt;CompoundName&lt;/code&gt; 에 액세스하고 수정하려는 여러 스레드 가 객체를 잠 가야합니다.</target>
        </trans-unit>
        <trans-unit id="1a8abfd863968986c4551b5104be0b11a2d835de" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; implementation can provide behavior and semantics that is different from that of the &lt;code&gt;Object&lt;/code&gt; monitor methods, such as guaranteed ordering for notifications, or not requiring a lock to be held when performing notifications. If an implementation provides such specialized semantics then the implementation must document those semantics.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; 구현은 다르다 행동과 의미를 제공 할 수있는 &lt;code&gt;Object&lt;/code&gt; 알림을 수행 할 때 개최되는 잠금을 요구하는 등의 보장 알림 주문, 또는하지 모니터 방법을. 구현이 그러한 특수한 의미를 제공하는 경우 구현은 해당 의미를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="894d96a6d02f49c084a0cdde5939b69b3c2c71f7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; instance is intrinsically bound to a lock. To obtain a &lt;code&gt;Condition&lt;/code&gt; instance for a particular &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; instance use its &lt;a href=&quot;lock#newCondition()&quot;&gt;&lt;code&gt;newCondition()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; 인스턴스는 본질적으로 잠금에 바인딩됩니다. 얻으려면 &lt;code&gt;Condition&lt;/code&gt; 특정에 대한 인스턴스를 &lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt; 인스턴스 사용의 &lt;a href=&quot;lock#newCondition()&quot;&gt; &lt;code&gt;newCondition()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="0c6ca21c0d4497ebf365c900bfa1c35883c30d13" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; instance is intrinsically bound to a lock. To obtain a &lt;code&gt;Condition&lt;/code&gt; instance for a particular &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; instance use its &lt;a href=&quot;lock#newCondition--&quot;&gt;&lt;code&gt;newCondition()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; 인스턴스는 본질적으로 잠금에 바인딩됩니다. 얻으려면 &lt;code&gt;Condition&lt;/code&gt; 특정에 대한 인스턴스를 &lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt; 인스턴스 사용의 &lt;a href=&quot;lock#newCondition--&quot;&gt; &lt;code&gt;newCondition()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="59a74a281351361da08496c5052dabec5bda2143" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConnectException&lt;/code&gt; is thrown if a connection is refused to the remote host for a remote method call.</source>
          <target state="translated">&lt;code&gt;ConnectException&lt;/code&gt; 연결이 원격 메소드 호출 원격 호스트를 거부하는 경우 발생한다.</target>
        </trans-unit>
        <trans-unit id="35365431a4509521961b18fcc03474ebc29edf27" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConnectIOException&lt;/code&gt; is thrown if an &lt;code&gt;IOException&lt;/code&gt; occurs while making a connection to the remote host for a remote method call.</source>
          <target state="translated">&lt;code&gt;ConnectIOException&lt;/code&gt; 는 경우 발생합니다 &lt;code&gt;IOException&lt;/code&gt; 이는 원격 메소드 호출로 리모트 호스트에게 접속하려고하고있을 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cd401922b89f304759d8a11ef9eacfbf19b39264" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Connection&lt;/code&gt; object's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is obtained with the &lt;code&gt;getMetaData&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Connection&lt;/code&gt; 객체의 데이터베이스는 테이블, 등등 지원하고있는 SQL 문법, 저장 프로 시저,이 접속의 능력 등에 대한 정보를 제공 할 수 있습니다. 이 정보는 &lt;code&gt;getMetaData&lt;/code&gt; 메소드로 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="f0410c1af00ff590f6c0f9060f3e7b26d6110699" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConstantCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target is permanent, and can never be changed.</source>
          <target state="translated">&lt;code&gt;ConstantCallSite&lt;/code&gt; 는 A는 &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 그 대상 영구적이며, 절대 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0fe56ac45686158ddd827916ddeec9333e1196a0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConstantCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target is permanent, and can never be changed. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;ConstantCallSite&lt;/code&gt; is permanently bound to the call site's target.</source>
          <target state="translated">&lt;code&gt;ConstantCallSite&lt;/code&gt; 는 A는 &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 그 대상 영구적이며, 절대 변경할 수 없습니다. &lt;code&gt;invokedynamic&lt;/code&gt; A를 연결 명령 &lt;code&gt;ConstantCallSite&lt;/code&gt; 은 영구적으로 호출 사이트의 목표에 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="587e100c970910a84d26ddbfba1fcdab9804d1cd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Constraints&lt;/code&gt; object holds the constraints that govern the way a component's size and position change in a container controlled by a &lt;code&gt;SpringLayout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Constraints&lt;/code&gt; 객체는 방법 a로 제어하는 컨테이너 내의 컴퍼넌트의 크기와 위치 변화를 결정하는 제약 보유 &lt;code&gt;SpringLayout&lt;/code&gt; 에를 .</target>
        </trans-unit>
        <trans-unit id="0b250c1d19fbfacd163c07679292f8b80db258f1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Constraints&lt;/code&gt; object holds the constraints that govern the way a component's size and position change in a container controlled by a &lt;code&gt;SpringLayout&lt;/code&gt;. A &lt;code&gt;Constraints&lt;/code&gt; object is like a &lt;code&gt;Rectangle&lt;/code&gt;, in that it has &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; properties. In the &lt;code&gt;Constraints&lt;/code&gt; object, however, these properties have &lt;code&gt;Spring&lt;/code&gt; values instead of integers. In addition, a &lt;code&gt;Constraints&lt;/code&gt; object can be manipulated as four edges -- north, south, east, and west -- using the &lt;code&gt;constraint&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;Constraints&lt;/code&gt; 객체는 방법 a로 제어하는 컨테이너 내의 컴퍼넌트의 크기와 위치 변화를 결정하는 제약 보유 &lt;code&gt;SpringLayout&lt;/code&gt; 에를 . &lt;code&gt;Constraints&lt;/code&gt; 목적은 같다 &lt;code&gt;Rectangle&lt;/code&gt; 가 갖는 것을, &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;y&lt;/code&gt; , &lt;code&gt;width&lt;/code&gt; 및 &lt;code&gt;height&lt;/code&gt; 속성. 에서 &lt;code&gt;Constraints&lt;/code&gt; 객체 그러나, 이러한 속성이 &lt;code&gt;Spring&lt;/code&gt; 대신에 정수 값을. 또한 &lt;code&gt;Constraints&lt;/code&gt; 객체는 &lt;code&gt;constraint&lt;/code&gt; 속성을 사용하여 북쪽, 남쪽, 동쪽 및 서쪽의 네 모서리로 조작 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f0373f2115cc61f1ecd48de231e06c805c7dc5c1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Control[]&lt;/code&gt; array passed as a parameter to any method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual &lt;code&gt;Control&lt;/code&gt; objects in the array. A &lt;code&gt;Control[]&lt;/code&gt; array returned by any method is immutable, and may not subsequently be modified by either the caller or the service provider.</source>
          <target state="translated">메소드에 매개 변수로 전달 된 &lt;code&gt;Control[]&lt;/code&gt; 배열은 호출자가 소유합니다. 서비스 공급자는 배열의 개별 &lt;code&gt;Control&lt;/code&gt; 개체에 대한 참조를 유지할 수 있지만 배열을 수정하거나 참조를 유지하지 않습니다 . 메소드가 리턴 한 &lt;code&gt;Control[]&lt;/code&gt; 배열은 변경할 수 없으며, 이후 호출자 또는 서비스 제공자가 수정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ee3aa4e3df63ebfdf55915ed94497312a8df67b9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Control[]&lt;/code&gt; array passed as a parameter to the &lt;code&gt;getReferralContext()&lt;/code&gt; method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual &lt;code&gt;Control&lt;/code&gt; objects in the array.</source>
          <target state="translated">&lt;code&gt;getReferralContext()&lt;/code&gt; 메소드에 매개 변수로 전달 된 &lt;code&gt;Control[]&lt;/code&gt; 배열 은 호출자가 소유합니다. 서비스 공급자는 배열의 개별 &lt;code&gt;Control&lt;/code&gt; 개체에 대한 참조를 유지할 수 있지만 배열을 수정하거나 참조를 유지하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="623fddfc00e813f22200868156b0c8c96356f578" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is a versatile synchronization tool and can be used for a number of purposes. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking &lt;a href=&quot;#await()&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; wait at the gate until it is opened by a thread invoking &lt;a href=&quot;#countDown()&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized to &lt;em&gt;N&lt;/em&gt; can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have completed some action, or some action has been completed N times.</source>
          <target state="translated">&lt;code&gt;CountDownLatch&lt;/code&gt; 를는 다목적 동기화 도구이며, 다수의 목적을 위해 사용될 수있다. &lt;code&gt;CountDownLatch&lt;/code&gt; 초기화 된 CountDownLatch 는 간단한 on / off 래치 또는 게이트 역할을합니다. 모든 스레드 호출 &lt;a href=&quot;#await()&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#countDown()&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt; 호출하는 스레드에 의해 열릴 때까지 게이트에서 대기합니다 . &lt;em&gt;N으로&lt;/em&gt; 초기화 된 &lt;code&gt;CountDownLatch&lt;/code&gt; 는 &lt;em&gt;N&lt;/em&gt; 스레드가 일부 작업을 완료하거나 일부 작업이 N 번 완료 될 때까지 하나의 스레드가 대기하도록하는 데 사용할 수 있습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23654a775571a88b4f2911239e9e4effa00f8212" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is a versatile synchronization tool and can be used for a number of purposes. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; wait at the gate until it is opened by a thread invoking &lt;a href=&quot;countdownlatch#countDown--&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized to &lt;em&gt;N&lt;/em&gt; can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have completed some action, or some action has been completed N times.</source>
          <target state="translated">&lt;code&gt;CountDownLatch&lt;/code&gt; 를는 다목적 동기화 도구이며, 다수의 목적을 위해 사용될 수있다. &lt;code&gt;CountDownLatch&lt;/code&gt; 를는 래치 온 / 오프 간단한 OR 게이트로 게재 될 하나의 카운트로 초기화 : 모든 스레드 호출 &lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; 가 호출 스레드에 의해 개방 될 때까지 대기 게이트 &lt;a href=&quot;countdownlatch#countDown--&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt; . &lt;em&gt;N으로&lt;/em&gt; 초기화 된 &lt;code&gt;CountDownLatch&lt;/code&gt; 를 사용하면 &lt;em&gt;N 개의&lt;/em&gt; 스레드가 어떤 조치를 완료하거나 일부 조치가 N 번 완료 될 때까지 하나의 스레드를 대기시킬 수 있습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5780200d18f32d48a90570cf7ae27f4206cd6133" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is initialized with a given &lt;em&gt;count&lt;/em&gt;. The &lt;a href=&quot;#await()&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; methods block until the current count reaches zero due to invocations of the &lt;a href=&quot;#countDown()&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt; method, after which all waiting threads are released and any subsequent invocations of &lt;a href=&quot;#await()&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;CountDownLatch&lt;/code&gt; 주어진 초기화됩니다 &lt;em&gt;수&lt;/em&gt; . &lt;a href=&quot;#await()&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; 현재 카운트가 도달의 호출에 의한 제로까지 메소드 블록 &lt;a href=&quot;#countDown()&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt; 모든 대기중인 스레드가 해제 된 후, 방법, 및 임의의 후속 호출 &lt;a href=&quot;#await()&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; 즉시 반환. 이것은 원샷 현상으로 카운트를 재설정 할 수 없습니다. 카운트를 재설정하는 버전이 필요한 경우 &lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; &lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d7ec18000de9280f0c1b01ceced2d3d4a2aabac" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is initialized with a given &lt;em&gt;count&lt;/em&gt;. The &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; methods block until the current count reaches zero due to invocations of the &lt;a href=&quot;countdownlatch#countDown--&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt; method, after which all waiting threads are released and any subsequent invocations of &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;CountDownLatch&lt;/code&gt; 주어진 초기화됩니다 &lt;em&gt;수&lt;/em&gt; . &lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; 현재 카운트가 도달의 호출에 의한 제로까지 메소드 블록 &lt;a href=&quot;countdownlatch#countDown--&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt; 모든 대기중인 스레드가 해제 된 후, 방법, 및 임의의 후속 호출 &lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; 즉시 반환. 이것은 일회성 현상이므로 카운트를 재설정 할 수 없습니다. 카운트를 재설정하는 버전이 필요한 경우 &lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; &lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1f5b8769fcbc5e2f74bc723a2975c47a63c9aa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CounterMonitor&lt;/code&gt; can operate in &lt;em&gt;difference mode&lt;/em&gt;. In this mode, the value compared against the threshold is the difference between two successive observations of an attribute.</source>
          <target state="translated">&lt;code&gt;CounterMonitor&lt;/code&gt; 는 에서 작동 할 수 &lt;em&gt;차이 모드&lt;/em&gt; . 이 모드에서 임계 값과 비교 한 값은 속성에 대한 두 개의 연속 관측치의 차이입니다.</target>
        </trans-unit>
        <trans-unit id="d7269b012ee130f2cfb0f0d27df9e22dbed71430" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CyclicBarrier&lt;/code&gt; supports an optional &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt; command that is run once per barrier point, after the last thread in the party arrives, but before any threads are released. This &lt;em&gt;barrier action&lt;/em&gt; is useful for updating shared-state before any of the parties continue.</source>
          <target state="translated">&lt;code&gt;CyclicBarrier&lt;/code&gt; 옵션으로 지원 &lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; 를&lt;/a&gt; 파티의 마지막 스레드가 도착 후, 장벽 포인트 당 한 번 실행되는 명령을, 그러나 어떤 스레드가 해제되기 전에. 이 &lt;em&gt;장벽 조치&lt;/em&gt; 는 당사자가 계속하기 전에 공유 상태를 업데이트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d0e59db3fed8b2b585d26ca27a870c98cefe2f2b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DATE_EDITOR&lt;/code&gt; is a component that allows users to edit &lt;code&gt;java.util.Date&lt;/code&gt; and &lt;code&gt;java.util.Time&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;DATE_EDITOR&lt;/code&gt; 는 편집에 대한 사용자 수있는 구성 요소입니다 &lt;code&gt;java.util.Date&lt;/code&gt; 과 &lt;code&gt;java.util.Time&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="3f28a3a3fddcbfd552884340d2a55ce72b45a7a6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; dialog blocks input to all top-level windows from the same document except those from its own child hierarchy.</source>
          <target state="translated">&lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; 같은 문서에서 자신의 아이 계층으로부터의 것을 제외 모든 최상위 창에 대화 블록 입력.</target>
        </trans-unit>
        <trans-unit id="3ce0bd6bebd56e547c80658e640f71d622bcff6a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; dialog blocks input to all top-level windows from the same document except those from its own child hierarchy. A document is a top-level window without an owner. It may contain child windows that, together with the top-level window are treated as a single solid document. Since every top-level window must belong to some document, its root can be found as the top-nearest window without an owner.</source>
          <target state="translated">&lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; 같은 문서에서 자신의 아이 계층으로부터의 것을 제외 모든 최상위 창에 대화 블록 입력. 문서는 소유자가없는 최상위 창입니다. 최상위 창과 함께 단일 솔리드 문서로 처리되는 하위 창을 포함 할 수 있습니다. 모든 최상위 창은 특정 문서에 속해야하므로 루트는 소유자가없는 최상위 창으로 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a3f7d42d20b7b3d67d7fa0fa8e42adc3c948908" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOMString&lt;/code&gt; indicating which related data is expected in &lt;code&gt;relatedData&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DOMString&lt;/code&gt; 관련 데이터가 예상되는 표시 &lt;code&gt;relatedData&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5116e7b33efbcdbfd8f9de6e1e6813af7149e130" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOMString&lt;/code&gt; indicating which related data is expected in &lt;code&gt;relatedData&lt;/code&gt;. Users should refer to the specification of the error in order to find its &lt;code&gt;DOMString&lt;/code&gt; type and &lt;code&gt;relatedData&lt;/code&gt; definitions if any.</source>
          <target state="translated">&lt;code&gt;DOMString&lt;/code&gt; 관련 데이터가 예상되는 표시 &lt;code&gt;relatedData&lt;/code&gt; . 사용자는 확인하려면, 에러의 사양을 참조한다 &lt;code&gt;DOMString&lt;/code&gt; 형태와 &lt;code&gt;relatedData&lt;/code&gt; 의 정의 (있는 경우)를.</target>
        </trans-unit>
        <trans-unit id="fdf3136aa9ed6d2adfa91078dd901de169c1263f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFlavor&lt;/code&gt; provides meta information about data.</source>
          <target state="translated">&lt;code&gt;DataFlavor&lt;/code&gt; , 데이터의 메타 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4be4aba3f469353d84e00a69221bb21d6219bb1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFlavor&lt;/code&gt; provides meta information about data. &lt;code&gt;DataFlavor&lt;/code&gt; is typically used to access data on the clipboard, or during a drag and drop operation.</source>
          <target state="translated">&lt;code&gt;DataFlavor&lt;/code&gt; , 데이터의 메타 정보를 제공합니다. &lt;code&gt;DataFlavor&lt;/code&gt; 는 일반적으로 클립 보드의 데이터에 액세스하거나 끌어서 놓기 작업 중에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0a68c6d45b89da215100f63a2c1fb4b42f275c24" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataSource&lt;/code&gt; object can be implemented to work with the middle tier infrastructure so that the connections it produces will be pooled for reuse. An application that uses such a &lt;code&gt;DataSource&lt;/code&gt; implementation will automatically get a connection that participates in connection pooling. A &lt;code&gt;DataSource&lt;/code&gt; object can also be implemented to work with the middle tier infrastructure so that the connections it produces can be used for distributed transactions without any special coding.</source>
          <target state="translated">&lt;code&gt;DataSource&lt;/code&gt; 가 생성하는 연결을 다시 사용하기 위해 풀링 될 수 있도록 객체는 중간층 인프라 스트럭쳐로 동작하도록 구현 될 수있다. 이러한 &lt;code&gt;DataSource&lt;/code&gt; 구현 을 사용하는 애플리케이션 은 연결 풀링에 참여하는 연결을 자동으로 가져옵니다. &lt;code&gt;DataSource&lt;/code&gt; 가 생성하는 연결이 특별한 코딩을하지 않고 분산 트랜잭션을 사용할 수 있도록 객체는 중간층 인프라 스트럭쳐로 동작하도록 구현 될 수있다.</target>
        </trans-unit>
        <trans-unit id="407f539c1a6a73f3fb5878397ad90f413d6a8652" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataSource&lt;/code&gt; object has properties that can be modified when necessary. For example, if the data source is moved to a different server, the property for the server can be changed. The benefit is that because the data source's properties can be changed, any code accessing that data source does not need to be changed.</source>
          <target state="translated">&lt;code&gt;DataSource&lt;/code&gt; 객체는 필요한 경우 변경 될 수있는 속성을 가지고있다. 예를 들어 데이터 소스를 다른 서버로 이동하면 서버의 속성을 변경할 수 있습니다. 이점은 데이터 소스의 속성을 변경할 수 있기 때문에 해당 데이터 소스에 액세스하는 코드를 변경할 필요가 없다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="983265f22277c984071b6d0839ff11a5aabd6129" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt; parsed from the string.</source>
          <target state="translated">문자열에서 구문 분석 된 &lt;code&gt;Date&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1b9da6c54213efee90c22320dda6686553788abc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt; parsed from the string. In case of error, returns null.</source>
          <target state="translated">문자열에서 구문 분석 된 &lt;code&gt;Date&lt;/code&gt; 입니다. 오류가 발생하면 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="88198a2133b30c87ec970f147ea4593fb57ae6ef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if the input could not be parsed</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; , 또는 &lt;code&gt;null&lt;/code&gt; 입력을 구문 분석 할 수없는 경우</target>
        </trans-unit>
        <trans-unit id="b940e54bad740f2ada94ed3c5d00e1993947acda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DecimalFormat&lt;/code&gt; comprises a &lt;em&gt;pattern&lt;/em&gt; and a set of &lt;em&gt;symbols&lt;/em&gt;. The pattern may be set directly using &lt;code&gt;applyPattern()&lt;/code&gt;, or indirectly using the API methods. The symbols are stored in a &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; object. When using the &lt;code&gt;NumberFormat&lt;/code&gt; factory methods, the pattern and symbols are read from localized &lt;code&gt;ResourceBundle&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;DecimalFormat&lt;/code&gt; 는, 포함하는 &lt;em&gt;패턴&lt;/em&gt; 과의 세트 &lt;em&gt;심볼들을&lt;/em&gt; . &lt;code&gt;applyPattern()&lt;/code&gt; 사용하여 직접 또는 API 메소드를 사용 하여 패턴을 직접 설정할 수 있습니다 . 심볼은 &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; 객체에 저장됩니다 . &lt;code&gt;NumberFormat&lt;/code&gt; 팩토리 메소드를 사용하는 경우 , 지역화 된 &lt;code&gt;ResourceBundle&lt;/code&gt; 에서 패턴 및 기호를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="f386dd84dac1520ed2bcfb17a3ac2ee80b93ecc1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DecimalFormat&lt;/code&gt; pattern contains a positive and negative subpattern, for example, &lt;code&gt;&quot;#,##0.00;(#,##0.00)&quot;&lt;/code&gt;. Each subpattern has a prefix, numeric part, and suffix. The negative subpattern is optional; if absent, then the positive subpattern prefixed with the localized minus sign (&lt;code&gt;'-'&lt;/code&gt; in most locales) is used as the negative subpattern. That is, &lt;code&gt;&quot;0.00&quot;&lt;/code&gt; alone is equivalent to &lt;code&gt;&quot;0.00;-0.00&quot;&lt;/code&gt;. If there is an explicit negative subpattern, it serves only to specify the negative prefix and suffix; the number of digits, minimal digits, and other characteristics are all the same as the positive pattern. That means that &lt;code&gt;&quot;#,##0.0#;(#)&quot;&lt;/code&gt; produces precisely the same behavior as &lt;code&gt;&quot;#,##0.0#;(#,##0.0#)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DecimalFormat&lt;/code&gt; 패턴은, 예를 들어, 양극과 음극을 포함 서브 패턴 &lt;code&gt;&quot;#,##0.00;(#,##0.00)&quot;&lt;/code&gt; . 각 하위 패턴에는 접두사, 숫자 부분 및 접미사가 있습니다. 음의 하위 패턴은 선택 사항입니다. 없는 경우 지역화 된 빼기 부호 ( 대부분의 로케일에서 &lt;code&gt;'-'&lt;/code&gt; )로 시작되는 양의 하위 패턴이 음의 하위 패턴으로 사용됩니다. 즉, &lt;code&gt;&quot;0.00&quot;&lt;/code&gt; 형에 해당합니다 &lt;code&gt;&quot;0.00;-0.00&quot;&lt;/code&gt; . 음의 하위 패턴이 명시 적이면 음의 접두사와 접미사 만 지정합니다. 자릿수, 최소 자릿수 및 기타 특성은 모두 양수 패턴과 동일합니다. 즉 즉, &lt;code&gt;&quot;#,##0.0#;(#)&quot;&lt;/code&gt; 정확히 같은 행동을합니다 &lt;code&gt;&quot;#,##0.0#;(#,##0.0#)&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43f62f17c93d6e503ea6958cb597b84dc9cc8960" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; is a general-purpose node in a tree data structure.</source>
          <target state="translated">&lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; 트리 데이터 구조의 범용 노드입니다.</target>
        </trans-unit>
        <trans-unit id="d500332cdb51c4544e081fe6aaa562e8f963e7a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; is a general-purpose node in a tree data structure. For examples of using default mutable tree nodes, see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt; in &lt;em&gt;The Java Tutorial.&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; 트리 데이터 구조의 범용 노드입니다. 기본 변경 가능한 트리 노드 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;를 사용하는&lt;/a&gt; 예는 &lt;em&gt;Java Tutorial의 &lt;/em&gt;How to Use Trees 를 참조하십시오 &lt;em&gt;.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="47e3fd3937b7f9d45c2963522b8029c7a9d7864a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DigestMethod&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newDigestMethod(java.lang.String,javax.xml.crypto.dsig.spec.DigestMethodParameterSpec)&quot;&gt;&lt;code&gt;newDigestMethod&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;DigestMethod&lt;/code&gt; 인스턴스는 호출에 의해 생성 될 수있다 &lt;a href=&quot;xmlsignaturefactory#newDigestMethod(java.lang.String,javax.xml.crypto.dsig.spec.DigestMethodParameterSpec)&quot;&gt; &lt;code&gt;newDigestMethod&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; 클래스.</target>
        </trans-unit>
        <trans-unit id="748fe46a90c654076e96379836903b45a13d067e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Dimension&lt;/code&gt; object that indicates the size of this component; &lt;code&gt;null&lt;/code&gt; if this object is not on the screen</source>
          <target state="translated">&lt;code&gt;Dimension&lt;/code&gt; 컴포넌트의 크기를 나타내는 객체; 이 객체가 화면에 없으면 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6525ce217e5549cf04ce19699f3d34ed2bc57c4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirObjectFactory&lt;/code&gt; extends &lt;code&gt;ObjectFactory&lt;/code&gt; by allowing an &lt;code&gt;Attributes&lt;/code&gt; instance to be supplied to the &lt;code&gt;getObjectInstance()&lt;/code&gt; method. &lt;code&gt;DirObjectFactory&lt;/code&gt; implementations are intended to be used by &lt;code&gt;DirContext&lt;/code&gt; service providers. The service provider, in addition reading an object from the directory, might already have attributes that are useful for the object factory to check to see whether the factory is supposed to process the object. For instance, an LDAP-style service provider might have read the &quot;objectclass&quot; of the object. A CORBA object factory might be interested only in LDAP entries with &quot;objectclass=corbaObject&quot;. By using the attributes supplied by the LDAP service provider, the CORBA object factory can quickly eliminate objects that it need not worry about, and non-CORBA object factories can quickly eliminate CORBA-related LDAP entries.</source>
          <target state="translated">&lt;code&gt;DirObjectFactory&lt;/code&gt; 를는 연장 &lt;code&gt;ObjectFactory&lt;/code&gt; 시킴으로써 &lt;code&gt;Attributes&lt;/code&gt; 인스턴스에 공급 &lt;code&gt;getObjectInstance()&lt;/code&gt; 메소드. &lt;code&gt;DirObjectFactory&lt;/code&gt; 구현은 &lt;code&gt;DirContext&lt;/code&gt; 에 의해 사용되도록 의도되었습니다서비스 제공자. 서비스 제공자는 디렉토리에서 오브젝트를 읽는 것 외에도 오브젝트 팩토리가 팩토리가 오브젝트를 처리해야하는지 여부를 확인하는 데 유용한 속성을 이미 가지고있을 수 있습니다. 예를 들어, LDAP 스타일 서비스 제공자는 오브젝트의 &quot;objectclass&quot;를 읽었을 수 있습니다. CORBA 객체 팩토리는 &quot;objectclass = corbaObject&quot;인 LDAP 항목에만 관심이있을 수 있습니다. CORBA 오브젝트 팩토리는 LDAP 서비스 제공자가 제공 한 속성을 사용하여 걱정할 필요가없는 오브젝트를 신속하게 제거 할 수 있으며, CORBA 이외의 오브젝트 팩토리는 CORBA 관련 LDAP 항목을 신속하게 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a1be329221d19aed1829322a7305689086b3003" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirStateFactory&lt;/code&gt; extends &lt;code&gt;StateFactory&lt;/code&gt; by allowing an &lt;code&gt;Attributes&lt;/code&gt; instance to be supplied to and be returned by the &lt;code&gt;getStateToBind()&lt;/code&gt; method. &lt;code&gt;DirStateFactory&lt;/code&gt; implementations are intended to be used by &lt;code&gt;DirContext&lt;/code&gt; service providers. When a caller binds an object using &lt;code&gt;DirContext.bind()&lt;/code&gt;, he might also specify a set of attributes to be bound with the object. The object and attributes to be bound are passed to the &lt;code&gt;getStateToBind()&lt;/code&gt; method of a factory. If the factory processes the object and attributes, it returns a corresponding pair of object and attributes to be bound. If the factory does not process the object, it must return null.</source>
          <target state="translated">&lt;code&gt;DirStateFactory&lt;/code&gt; 는 연장 &lt;code&gt;StateFactory&lt;/code&gt; 를 시킴으로써 &lt;code&gt;Attributes&lt;/code&gt; 인스턴스에 공급하고 반환 할 &lt;code&gt;getStateToBind()&lt;/code&gt; 메소드. &lt;code&gt;DirStateFactory&lt;/code&gt; 구현은 &lt;code&gt;DirContext&lt;/code&gt; 서비스 프로 바이더 가 사용하도록되어 있습니다 . 호출자는 &lt;code&gt;DirContext.bind()&lt;/code&gt; 사용하여 객체를 바인딩 할 때 객체 와 바인딩 할 속성 집합을 지정할 수도 있습니다. 바인딩 할 객체와 속성 은 팩토리 의 &lt;code&gt;getStateToBind()&lt;/code&gt; 메서드로 전달됩니다 . 팩토리가 객체와 속성을 처리하는 경우 바인딩 할 해당 객체와 속성 쌍을 반환합니다. 팩토리가 객체를 처리하지 않으면 null을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="a58679715515bab3aef6bbaa606fe4fadd60c73a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; is opened upon creation and is closed by invoking the &lt;code&gt;close&lt;/code&gt; method. Closing a directory stream releases any resources associated with the stream. Failure to close the stream may result in a resource leak. The try-with-resources statement provides a useful construct to ensure that the stream is closed:</source>
          <target state="translated">&lt;code&gt;DirectoryStream&lt;/code&gt; 는 생성시 개방하고 호출하여 폐쇄되어 &lt;code&gt;close&lt;/code&gt; 방법. 디렉토리 스트림을 닫으면 스트림과 관련된 모든 자원이 해제됩니다. 스트림을 닫지 않으면 리소스가 누출 될 수 있습니다. try-with-resources 문은 스트림이 닫히도록하는 유용한 구문을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="65b703cdf43a5ec83f8ad4044878e129de1094fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; that defines operations on files that are located relative to an open directory.</source>
          <target state="translated">열린 디렉토리에 상대적인 파일에 대한 조작을 정의 하는 &lt;code&gt;DirectoryStream&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="01c2f8bc2c160fdac6becd46d1322732a89e078f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; that defines operations on files that are located relative to an open directory. A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; is intended for use by sophisticated or security sensitive applications requiring to traverse file trees or otherwise operate on directories in a race-free manner. Race conditions can arise when a sequence of file operations cannot be carried out in isolation. Each of the file operations defined by this interface specify a relative path. All access to the file is relative to the open directory irrespective of if the directory is moved or replaced by an attacker while the directory is open. A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; may also be used as a virtual &lt;em&gt;working directory&lt;/em&gt;.</source>
          <target state="translated">열린 디렉토리에 상대적인 파일에 대한 조작을 정의 하는 &lt;code&gt;DirectoryStream&lt;/code&gt; 입니다. &lt;code&gt;SecureDirectoryStream&lt;/code&gt; 는 이송 파일 트리에 필요로하는 정교한 또는 보안에 민감한 응용 프로그램에 사용하기위한 것 또는 다른 경쟁이없는 방식으로 디렉토리에서 작동된다. 일련의 파일 작업을 단독으로 수행 할 수없는 경우 경쟁 조건이 발생할 수 있습니다. 이 인터페이스로 정의 된 각 파일 작업은 상대 경로를 지정합니다. 디렉토리가 열려있는 동안 디렉토리가 공격자에 의해 이동되거나 대체되는지 여부에 관계없이 파일에 대한 모든 액세스는 열린 디렉토리에 상대적입니다. &lt;code&gt;SecureDirectoryStream&lt;/code&gt; 는 또한 가상으로 사용될 수있는 &lt;em&gt;작업 디렉토리&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0612efab86216fdda0a0396170a641c29dd7bdb4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DocAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt;&lt;code&gt;AttributeSet&lt;/code&gt;&lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;DocAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;docattribute&quot;&gt;&lt;code&gt;DocAttribute&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt;&lt;code&gt;add(Attribute)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt;&lt;code&gt;addAll(AttributeSet)&lt;/code&gt;&lt;/a&gt; operations are respecified below to guarantee this additional invariant.</source>
          <target state="translated">&lt;code&gt;DocAttributeSet&lt;/code&gt; 단지입니다 &lt;a href=&quot;attributeset&quot;&gt; &lt;code&gt;AttributeSet&lt;/code&gt; 에&lt;/a&gt; 그 생성자와 돌연변이의 조작의 모든 속성 값, 즉 것을 추가 불변 보장 &lt;code&gt;DocAttributeSet&lt;/code&gt; 인터페이스의 인스턴스해야 &lt;a href=&quot;docattribute&quot;&gt; &lt;code&gt;DocAttribute&lt;/code&gt; 를&lt;/a&gt; . &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt; &lt;code&gt;add(Attribute)&lt;/code&gt; &lt;/a&gt; , 및 &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt; &lt;code&gt;addAll(AttributeSet)&lt;/code&gt; &lt;/a&gt; 작업이 추가 불변을 보장하기 위해 아래 respecified된다.</target>
        </trans-unit>
        <trans-unit id="af03376ceecb544d9985acc0755ed98550534ecd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DocPrintJob&lt;/code&gt; obtains its print data by means of interface &lt;a href=&quot;doc&quot;&gt;&lt;code&gt;Doc&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;Doc&lt;/code&gt; object lets the &lt;code&gt;DocPrintJob&lt;/code&gt; determine the doc flavor the client can supply. A &lt;code&gt;Doc&lt;/code&gt; object also lets the &lt;code&gt;DocPrintJob&lt;/code&gt; obtain an instance of the doc flavor's representation class, from which the &lt;code&gt;DocPrintJob&lt;/code&gt; then obtains the actual print data.</source>
          <target state="translated">&lt;code&gt;DocPrintJob&lt;/code&gt; 를는 인터페이스를 이용하여 인쇄 데이터를 취득하고 &lt;a href=&quot;doc&quot;&gt; &lt;code&gt;Doc&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;Doc&lt;/code&gt; 객체는 할 수 &lt;code&gt;DocPrintJob&lt;/code&gt; 를이 클라이언트가 제공 할 수있는 문서의 맛을 결정합니다. &lt;code&gt;Doc&lt;/code&gt; 목적은 또한 수 &lt;code&gt;DocPrintJob&lt;/code&gt; 를가 이로부터 doc 플레이버의 표현 클래스의 인스턴스 얻었다 &lt;code&gt;DocPrintJob&lt;/code&gt; 를이 후, 실제 인쇄 데이터를 취득한다.</target>
        </trans-unit>
        <trans-unit id="45f553c3dc219e11e9cac35d1e111bda89463aab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DomainCombiner&lt;/code&gt; is passed as a parameter to the appropriate constructor for &lt;code&gt;AccessControlContext&lt;/code&gt;. The newly constructed context is then passed to the &lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; method to bind the provided context (and associated &lt;code&gt;DomainCombiner&lt;/code&gt;) with the current execution Thread. Subsequent calls to &lt;code&gt;AccessController.getContext&lt;/code&gt; or &lt;code&gt;AccessController.checkPermission&lt;/code&gt; cause the &lt;code&gt;DomainCombiner.combine&lt;/code&gt; to get invoked.</source>
          <target state="translated">&lt;code&gt;DomainCombiner&lt;/code&gt; 에이 에 대한 적절한 생성자에 매개 변수로 전달됩니다 &lt;code&gt;AccessControlContext&lt;/code&gt; 에 . 새로 생성 된 컨텍스트는 &lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; 메소드로 전달되어 제공된 컨텍스트 (및 연관된 &lt;code&gt;DomainCombiner&lt;/code&gt; )를 현재 실행 스레드와 바인딩합니다 . 이후에 &lt;code&gt;AccessController.getContext&lt;/code&gt; 또는 &lt;code&gt;AccessController.checkPermission&lt;/code&gt; 을 호출 하면 &lt;code&gt;DomainCombiner.combine&lt;/code&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7af584515b6d622da0599e538175efd0509780e2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DomainCombiner&lt;/code&gt; provides a means to dynamically update the ProtectionDomains associated with the current &lt;code&gt;AccessControlContext&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DomainCombiner&lt;/code&gt; 에는 동적으로 현재와 관련된 ProtectionDomain로 업데이트 할 수있는 수단 제공 &lt;code&gt;AccessControlContext&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="969de020230c5d0de2297be66b00415bdc63a99b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DosFileAttributeView&lt;/code&gt; is a &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; that additionally supports access to the set of DOS attribute flags that are used to indicate if the file is read-only, hidden, a system file, or archived.</source>
          <target state="translated">&lt;code&gt;DosFileAttributeView&lt;/code&gt; 는 A는 &lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt; 추가 파일이 읽기 전용의 경우, 시스템 파일을 숨김, 또는 보관 나타 내기 위해 사용되는 DOS 속성 플래그 설정에 액세스 할 수 있도록 지원합니다.</target>
        </trans-unit>
        <trans-unit id="3e0422692eeba56e400501c60a1367491cd3defc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragGestureEvent&lt;/code&gt; is passed to &lt;code&gt;DragGestureListener&lt;/code&gt;'s dragGestureRecognized() method when a particular &lt;code&gt;DragGestureRecognizer&lt;/code&gt; detects that a platform dependent drag initiating gesture has occurred on the &lt;code&gt;Component&lt;/code&gt; that it is tracking.</source>
          <target state="translated">&lt;code&gt;DragGestureEvent&lt;/code&gt; 에 전달 &lt;code&gt;DragGestureListener&lt;/code&gt; 을 특정 할 때의 dragGestureRecognized () 메소드 &lt;code&gt;DragGestureRecognizer&lt;/code&gt; 플랫폼 의존 드러그 개시 동작이 온 발생했음을 검출 &lt;code&gt;Component&lt;/code&gt; 가 추적된다.</target>
        </trans-unit>
        <trans-unit id="df8b8227642a3736f692748d4a90f5d5a95ec8dd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragGestureEvent&lt;/code&gt; is passed to &lt;code&gt;DragGestureListener&lt;/code&gt;'s dragGestureRecognized() method when a particular &lt;code&gt;DragGestureRecognizer&lt;/code&gt; detects that a platform dependent drag initiating gesture has occurred on the &lt;code&gt;Component&lt;/code&gt; that it is tracking. The &lt;code&gt;action&lt;/code&gt; field of any &lt;code&gt;DragGestureEvent&lt;/code&gt; instance should take one of the following values:</source>
          <target state="translated">&lt;code&gt;DragGestureEvent&lt;/code&gt; 에 전달 &lt;code&gt;DragGestureListener&lt;/code&gt; 을 특정 할 때의 dragGestureRecognized () 메소드 &lt;code&gt;DragGestureRecognizer&lt;/code&gt; 플랫폼 의존 드러그 개시 동작이 온 발생했음을 검출 &lt;code&gt;Component&lt;/code&gt; 가 추적된다. &lt;code&gt;DragGestureEvent&lt;/code&gt; 인스턴스 의 &lt;code&gt;action&lt;/code&gt; 필드 는 다음 값 중 하나를 가져야합니다.</target>
        </trans-unit>
        <trans-unit id="e6b64ca08ec1ff3206b0a11ebecc01a01ae26514" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragGestureRecognizer&lt;/code&gt; is obtained from the &lt;code&gt;DragSource&lt;/code&gt; and is associated with a &lt;code&gt;Component&lt;/code&gt; in order to track and identify any Drag initiating gesture by the user over the &lt;code&gt;Component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DragGestureRecognizer&lt;/code&gt; 로부터 수득 &lt;code&gt;DragSource&lt;/code&gt; 및과 연관된 &lt;code&gt;Component&lt;/code&gt; 추적하고 통해 사용자가 어떠한 제스처 드러그 개시를 식별하기 위해 &lt;code&gt;Component&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65e20906fc545ca43fa04f80a5d9ada7302621ca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragSource&lt;/code&gt; comes into existence, associated with some presentation element (&lt;code&gt;Component&lt;/code&gt;) in the GUI, to initiate a Drag and Drop of some potentially &lt;code&gt;Transferable&lt;/code&gt; data.</source>
          <target state="translated">&lt;code&gt;DragSource&lt;/code&gt; 일부 프리젠 테이션 요소 (와 관련, 존재에 와서 &lt;code&gt;Component&lt;/code&gt; 일부 잠재적으로의 드래그 앤 드롭 시작하려면 GUI)에 &lt;code&gt;Transferable&lt;/code&gt; 데이터를.</target>
        </trans-unit>
        <trans-unit id="1a92d5d9ddc22a56ce39e56abcb59681f362c267" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DriverAction&lt;/code&gt; implementation is not intended to be used directly by applications. A JDBC Driver may choose to create its &lt;code&gt;DriverAction&lt;/code&gt; implementation in a private class to avoid it being called directly.</source>
          <target state="translated">&lt;code&gt;DriverAction&lt;/code&gt; 의 구현은 응용 프로그램에서 직접 사용할 수 없습니다. JDBC 드라이버는 직접 호출되는 것을 피하기 위해 전용 클래스에서 &lt;code&gt;DriverAction&lt;/code&gt; 구현 을 만들도록 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="12068ae8e6190d25faca1bbbace9a271d823ded5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DropTargetContext&lt;/code&gt; is created whenever the logical cursor associated with a Drag and Drop operation coincides with the visible geometry of a &lt;code&gt;Component&lt;/code&gt; associated with a &lt;code&gt;DropTarget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DropTargetContext&lt;/code&gt; 에이 논리는 커서의 표시 형상으로 드래그 앤 드롭 동작 일치와 연관 될 때마다 생성되는 &lt;code&gt;Component&lt;/code&gt; 와 연관된 &lt;code&gt;DropTarget&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98bed9bb6d3e8178c5f5b3ab8da421776c67f667" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DropTargetContext&lt;/code&gt; is created whenever the logical cursor associated with a Drag and Drop operation coincides with the visible geometry of a &lt;code&gt;Component&lt;/code&gt; associated with a &lt;code&gt;DropTarget&lt;/code&gt;. The &lt;code&gt;DropTargetContext&lt;/code&gt; provides the mechanism for a potential receiver of a drop operation to both provide the end user with the appropriate drag under feedback, but also to effect the subsequent data transfer if appropriate.</source>
          <target state="translated">&lt;code&gt;DropTargetContext&lt;/code&gt; 에이 논리는 커서의 표시 형상으로 드래그 앤 드롭 동작 일치와 연관 될 때마다 생성되는 &lt;code&gt;Component&lt;/code&gt; 와 연관된 &lt;code&gt;DropTarget&lt;/code&gt; . &lt;code&gt;DropTargetContext&lt;/code&gt; 모두 피드백에서 해당 드래그와 최종 사용자에게 제공하기 위해 드롭 조작의 전위 수신기를위한 메커니즘을 제공하지만, 또한 적절한 경우 후속 데이터 전송을 행하도록.</target>
        </trans-unit>
        <trans-unit id="30d4f0a0b6cd4dfe2827283578fb4258723b708c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is less than zero.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; 타임 라인상의 두 지점 간의 거리 방향을 나타내고, 따라서 포지티브 일 수 제로 또는 음. 이 방법은 길이가 0보다 작은 지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="2748f760b08fada23b2956823b2400fe17d043c7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is zero.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; 타임 라인상의 두 지점 간의 거리 방향을 나타내고, 따라서 포지티브 일 수 제로 또는 음. 이 방법은 길이가 0인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="930f6f6edd843ad2d6fbf30a21b58dbc51ccf9e6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line. A negative duration is expressed by the negative sign of the seconds part. A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; 타임 라인에서 두 지점 사이의 감독 거리를 나타냅니다. 음수 지속 시간은 초 부분의 음수 부호로 표시됩니다. -1 나노초의 지속 시간은 -1 초 + 999,999,999 나노초로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="a5025f75a24cc7c2641a1007fe78fed4557bb80a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object.</source>
          <target state="translated">&lt;code&gt;EnumControl&lt;/code&gt; 는 이산 값 가능한 개체로 표시되는 각각의 세트에 대한 제어를 제공한다.</target>
        </trans-unit>
        <trans-unit id="5b18550a37715d871995df89cc05801612c8dd56" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object. In a graphical user interface, such a control might be represented by a set of buttons, each of which chooses one value or setting. For example, a reverb control might provide several preset reverberation settings, instead of providing continuously adjustable parameters of the sort that would be represented by &lt;code&gt;&lt;a href=&quot;floatcontrol&quot;&gt;&lt;code&gt;FloatControl&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;EnumControl&lt;/code&gt; 는 이산 값 가능한 개체로 표시되는 각각의 세트에 대한 제어를 제공한다. 그래픽 사용자 인터페이스에서 이러한 컨트롤은 하나의 값 또는 설정을 선택하는 버튼 세트로 표시 될 수 있습니다. 예를 들어, 잔향 컨트롤은 &lt;code&gt;&lt;a href=&quot;floatcontrol&quot;&gt;&lt;code&gt;FloatControl&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 객체 로 표시되는 정렬 매개 변수를 지속적으로 조정하는 대신 미리 설정된 여러 잔향 설정을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4202cdf8de4262946a959135d355ce779c084535" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FONT_CHOOSER&lt;/code&gt; is a component that lets the user pick various attributes for fonts.</source>
          <target state="translated">&lt;code&gt;FONT_CHOOSER&lt;/code&gt; 는 사용자가 폰트에 대한 다양한 속성을 선택할 수있는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="94ff7967cdf12cd25b3783588570d481ded45c74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; permits widening conversions to occur during a get or set access operation, but throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if a narrowing conversion would occur.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; 액세스 조작의 취득 또는 설정 중에 발생하는 확장 변환 허용하지만, 발생 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 가 축소 변환이 발생하는 경우입니다.</target>
        </trans-unit>
        <trans-unit id="1328055d250f23371e05fcc65298d035aa264889" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; provides information about, and dynamic access to, a single field of a class or an interface.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; 에 관한 정보와 동적 접속, 클래스 또는 인터페이스의 하나의 필드를 제공한다.</target>
        </trans-unit>
        <trans-unit id="3d84578fa873dd7a44de9272ca71dfa5a8a00812" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; 에 관한 정보와 동적 접속, 클래스 또는 인터페이스의 하나의 필드를 제공한다. 반영된 필드는 클래스 (정적) 필드 또는 인스턴스 필드 일 수있다.</target>
        </trans-unit>
        <trans-unit id="be851e9dcdb2a6a22642fa0e075fd2d060b49379" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileChannel&lt;/code&gt; is created by invoking one of its static &lt;a href=&quot;filechannel#open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods, or by invoking the &lt;code&gt;
 getChannel&lt;/code&gt; method of a &lt;a href=&quot;../../io/fileinputstream&quot;&gt;&lt;code&gt;FileInputStream&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../io/fileoutputstream&quot;&gt;&lt;code&gt;FileOutputStream&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../io/randomaccessfile&quot;&gt;&lt;code&gt;RandomAccessFile&lt;/code&gt;&lt;/a&gt; to return a file channel connected to the same underlying file as the &lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;FileChannel&lt;/code&gt; 정적 중 하나를 호출하여 만든 &lt;a href=&quot;filechannel#open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt; 방법 또는 호출하여 &lt;code&gt; getChannel&lt;/code&gt; (A)의 방법 &lt;a href=&quot;../../io/fileinputstream&quot;&gt; &lt;code&gt;FileInputStream&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../io/fileoutputstream&quot;&gt; &lt;code&gt;FileOutputStream&lt;/code&gt; 에&lt;/a&gt; 또는 &lt;a href=&quot;../../io/randomaccessfile&quot;&gt; &lt;code&gt;RandomAccessFile&lt;/code&gt; 의&lt;/a&gt; 같은 기본 파일에 접속 된 파일 채널 반환 &lt;a href=&quot;../../io/package-summary&quot;&gt; &lt;code&gt;java.io&lt;/code&gt; 의&lt;/a&gt; 클래스.</target>
        </trans-unit>
        <trans-unit id="3c6a8b1955dd096b5a0b1fc4b44adee3b3e60c93" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileChannel&lt;/code&gt; is created by invoking one of its static &lt;a href=&quot;filechannel#open-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods, or by invoking the &lt;code&gt;getChannel&lt;/code&gt; method of a &lt;a href=&quot;../../io/fileinputstream&quot;&gt;&lt;code&gt;FileInputStream&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../io/fileoutputstream&quot;&gt;&lt;code&gt;FileOutputStream&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../io/randomaccessfile&quot;&gt;&lt;code&gt;RandomAccessFile&lt;/code&gt;&lt;/a&gt; to return a file channel connected to the same underlying file as the &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;FileChannel&lt;/code&gt; 정적 중 하나를 호출하여 만든 &lt;a href=&quot;filechannel#open-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt; 방법 또는 호출하여 &lt;code&gt;getChannel&lt;/code&gt; (A)의 방법 &lt;a href=&quot;../../io/fileinputstream&quot;&gt; &lt;code&gt;FileInputStream&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../io/fileoutputstream&quot;&gt; &lt;code&gt;FileOutputStream&lt;/code&gt; 에&lt;/a&gt; 또는 &lt;a href=&quot;../../io/randomaccessfile&quot;&gt; &lt;code&gt;RandomAccessFile&lt;/code&gt; 의&lt;/a&gt; 같은 기본 파일에 접속 된 파일 채널 반환 &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의 클래스.</target>
        </trans-unit>
        <trans-unit id="482f3e78c3eaddf0f4f51de9acc9f719f77190c8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileFilter&lt;/code&gt; can be set on a &lt;code&gt;JFileChooser&lt;/code&gt; to keep unwanted files from appearing in the directory listing. For an example implementation of a simple file filter, see &lt;code&gt;&lt;i&gt;yourJDK&lt;/i&gt;/demo/jfc/FileChooserDemo/ExampleFileFilter.java&lt;/code&gt;. For more information and examples see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html&quot;&gt;How to Use File Choosers&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;FileFilter&lt;/code&gt; A의 설정 될 수 &lt;code&gt;JFileChooser&lt;/code&gt; 를 디렉토리 목록에 표시되지 원치 않는 파일을 보관. 단순 파일 필터의 구현 예는 &lt;code&gt;&lt;i&gt;yourJDK&lt;/i&gt;/demo/jfc/FileChooserDemo/ExampleFileFilter.java&lt;/code&gt; 참조하십시오 . 자세한 내용과 예제 &lt;em&gt;는 Java Tutorial&lt;/em&gt; 의 섹션 인 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html&quot;&gt;How to Use File Choosers를&lt;/a&gt; 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d7dbe17be044a047cac0a60d497bd3d6df3636b7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileInputStream&lt;/code&gt; obtains input bytes from a file in a file system.</source>
          <target state="translated">&lt;code&gt;FileInputStream&lt;/code&gt; 에 얻 입력 파일 시스템으로부터 바이트.</target>
        </trans-unit>
        <trans-unit id="1796330eede2865aae5adce7c54631168f35ad9e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileInputStream&lt;/code&gt; obtains input bytes from a file in a file system. What files are available depends on the host environment.</source>
          <target state="translated">&lt;code&gt;FileInputStream&lt;/code&gt; 에 얻 입력 파일 시스템으로부터 바이트. 사용 가능한 파일은 호스트 환경에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="214a2c8beeebdce1896d0edcb65579291e981912" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; can provide read-only or read-write access to the file system. Whether or not a file system provides read-only access is established when the &lt;code&gt;FileSystem&lt;/code&gt; is created and can be tested by invoking its &lt;a href=&quot;#isReadOnly()&quot;&gt;&lt;code&gt;isReadOnly&lt;/code&gt;&lt;/a&gt; method. Attempts to write to file stores by means of an object associated with a read-only file system throws &lt;a href=&quot;readonlyfilesystemexception&quot;&gt;&lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;FileSystem&lt;/code&gt; 파일 시스템에 대한 읽기 전용 또는 읽기 - 쓰기 액세스를 제공 할 수 있습니다. 때되는지 여부 파일 시스템이 제공 읽기 전용 액세스 권한이 설정되어 &lt;code&gt;FileSystem&lt;/code&gt; 생성되고 그 호출하여 테스트 할 수 있습니다 &lt;a href=&quot;#isReadOnly()&quot;&gt; &lt;code&gt;isReadOnly&lt;/code&gt; 의&lt;/a&gt; 방법을. 읽기 전용 파일 시스템과 연결된 개체를 사용하여 파일 저장소에 쓰려고하면 &lt;a href=&quot;readonlyfilesystemexception&quot;&gt; &lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt; 이 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="2632d4be74b6a4625d839cf5ae4e5976f681131b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; can provide read-only or read-write access to the file system. Whether or not a file system provides read-only access is established when the &lt;code&gt;FileSystem&lt;/code&gt; is created and can be tested by invoking its &lt;a href=&quot;filesystem#isReadOnly--&quot;&gt;&lt;code&gt;isReadOnly&lt;/code&gt;&lt;/a&gt; method. Attempts to write to file stores by means of an object associated with a read-only file system throws &lt;a href=&quot;readonlyfilesystemexception&quot;&gt;&lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;FileSystem&lt;/code&gt; 파일 시스템에 대한 읽기 전용 또는 읽기 - 쓰기 액세스를 제공 할 수 있습니다. 파일 시스템이 읽기 전용 액세스를 제공하는지 여부는 &lt;code&gt;FileSystem&lt;/code&gt; 이 작성 될 때 설정 되며 &lt;a href=&quot;filesystem#isReadOnly--&quot;&gt; &lt;code&gt;isReadOnly&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하여 테스트 할 수 있습니다 . 읽기 전용 파일 시스템과 연관된 오브젝트를 통해 파일 저장소에 쓰려고하면 &lt;a href=&quot;readonlyfilesystemexception&quot;&gt; &lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt; 이 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c7c3fb79d465914ca1df5911c7a10492bdbb55ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; implementation supports the &quot;&lt;code&gt;glob&lt;/code&gt;&quot; and &quot;&lt;code&gt;regex&lt;/code&gt;&quot; syntaxes, and may support others. The value of the syntax component is compared without regard to case.</source>
          <target state="translated">&lt;code&gt;FileSystem&lt;/code&gt; 구현은 &quot;지원 &lt;code&gt;glob&lt;/code&gt; &quot;와 &quot; &lt;code&gt;regex&lt;/code&gt; &quot;구문을, 그리고 다른 사람을 지원할 수 있습니다. 구문 구성 요소의 값은 대소 문자와 상관없이 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="679add4b88b56d5af3c24c1ad0ab7cf79c45d079" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileTime&lt;/code&gt; is primarily intended to represent the value of a file's time stamp. Where used to represent</source>
          <target state="translated">&lt;code&gt;FileTime&lt;/code&gt; 주로 파일의 타임 스탬프의 값을 표현하기위한 것입니다. 대표하는 데 사용되는 곳</target>
        </trans-unit>
        <trans-unit id="3788c0fcb354158afae8b7a311ab4d1c461b74ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FilterInputStream&lt;/code&gt; contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.</source>
          <target state="translated">&lt;code&gt;FilterInputStream&lt;/code&gt; 를는 이 데이터의 기본적인 소스 데이터를 도중에 변환이나 추가 기능을 제공하는 것으로 사용하고 다른 입력 스트림을 포함한다.</target>
        </trans-unit>
        <trans-unit id="7df34daede311fcfe7b9123ab498e1afb22440cb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FilterInputStream&lt;/code&gt; contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class &lt;code&gt;FilterInputStream&lt;/code&gt; itself simply overrides all methods of &lt;code&gt;InputStream&lt;/code&gt; with versions that pass all requests to the contained input stream. Subclasses of &lt;code&gt;FilterInputStream&lt;/code&gt; may further override some of these methods and may also provide additional methods and fields.</source>
          <target state="translated">&lt;code&gt;FilterInputStream&lt;/code&gt; 를는 이 데이터의 기본적인 소스 데이터를 도중에 변환이나 추가 기능을 제공하는 것으로 사용하고 다른 입력 스트림을 포함한다. &lt;code&gt;FilterInputStream&lt;/code&gt; 클래스 자체 는 포함 된 입력 스트림에 모든 요청을 전달하는 버전 으로 &lt;code&gt;InputStream&lt;/code&gt; 의 모든 메소드를 대체 합니다. &lt;code&gt;FilterInputStream&lt;/code&gt; 의 서브 클래스는 이러한 메소드 중 일부를 재정의하고 추가 메소드 및 필드를 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0776d262b9a240668408d943063b8980215c05ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; 목적은 부동 소수점 값의 범위에 걸쳐 제어를 제공한다.</target>
        </trans-unit>
        <trans-unit id="b5bb40a4c17c7317b8919e259e3349beb9e44552" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values. Float controls are often represented in graphical user interfaces by continuously adjustable objects such as sliders or rotary knobs. Concrete subclasses of &lt;code&gt;FloatControl&lt;/code&gt; implement controls, such as gain and pan, that affect a line's audio signal in some way that an application can manipulate. The &lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt; inner class provides static instances of types that are used to identify some common kinds of float control.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; 목적은 부동 소수점 값의 범위에 걸쳐 제어를 제공한다. 플로트 컨트롤은 종종 슬라이더 또는 회전 노브와 같이 지속적으로 조정 가능한 개체로 그래픽 사용자 인터페이스에 표시됩니다. &lt;code&gt;FloatControl&lt;/code&gt; 의 구체적인 하위 클래스 는 애플리케이션이 조작 할 수있는 방식으로 라인의 오디오 신호에 영향을주는 게인 및 팬과 같은 컨트롤을 구현합니다. &lt;a href=&quot;floatcontrol.type&quot;&gt; &lt;code&gt;FloatControl.Type&lt;/code&gt; &lt;/a&gt; 내부 클래스는 부동 소수점 형의 컨트롤의 몇 가지 일반적인 종류를 식별하는 데 사용되는 유형의 정적 인스턴스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="165ea81b3de0ff3435f43bdd01ecce2114051843" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values. Float controls are often represented in graphical user interfaces by continuously adjustable objects such as sliders or rotary knobs. Concrete subclasses of &lt;code&gt;FloatControl&lt;/code&gt; implement controls, such as gain and pan, that affect a line's audio signal in some way that an application can manipulate. The &lt;code&gt;&lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; inner class provides static instances of types that are used to identify some common kinds of float control.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; 목적은 부동 소수점 값의 범위에 걸쳐 제어를 제공한다. 플로트 컨트롤은 종종 슬라이더 나 회전식 노브와 같은 지속적으로 조정 가능한 객체로 그래픽 사용자 인터페이스로 표시됩니다. &lt;code&gt;FloatControl&lt;/code&gt; 의 구체적 서브 클래스는 게인 및 팬과 같은 컨트롤을 구현하여 응용 프로그램이 조작 할 수있는 방식으로 라인의 오디오 신호에 영향을줍니다. &lt;code&gt;&lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 내부 클래스는 부동 소수점 형의 컨트롤의 몇 가지 일반적인 종류를 식별하는 데 사용되는 유형의 정적 인스턴스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="944eb4dbe083d626573fb9205a6f80a2ef305e79" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Flushable&lt;/code&gt; is a destination of data that can be flushed.</source>
          <target state="translated">&lt;code&gt;Flushable&lt;/code&gt; 플러시 할 수있는 데이터의 대상이다.</target>
        </trans-unit>
        <trans-unit id="d537dc81750c6b0be163b1df3ae5f7fcb7f1acc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Flushable&lt;/code&gt; is a destination of data that can be flushed. The flush method is invoked to write any buffered output to the underlying stream.</source>
          <target state="translated">&lt;code&gt;Flushable&lt;/code&gt; 플러시 할 수있는 데이터의 대상이다. flush 메소드는 버퍼링 된 출력을 기본 스트림에 기록하기 위해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f809fd3c068420eb8d546ff15622bd985c9d00bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FocusListener&lt;/code&gt; object is registered via &lt;code&gt;addFocusListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FocusListener&lt;/code&gt; 개체에 의해 등록되어 &lt;code&gt;addFocusListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aaa0f38c6cc271c8a7ac9b6a9808bb1a14f8d02c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Font&lt;/code&gt; can have many faces, such as heavy, medium, oblique, gothic and regular. All of these faces have similar typographic design.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; 무거운, 매체, oblique, gothic, 및 regular 등 많은 얼굴을 가질 수 있습니다. 이 모든 얼굴은 유사한 타이포그래피 디자인을 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="7091d201aaf5fd42bc40f0165c256fbb7c1d55b9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinPool&lt;/code&gt; differs from other kinds of &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; mainly by virtue of employing &lt;em&gt;work-stealing&lt;/em&gt;: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most &lt;code&gt;ForkJoinTask&lt;/code&gt;s), as well as when many small tasks are submitted to the pool from external clients. Especially when setting &lt;em&gt;asyncMode&lt;/em&gt; to true in constructors, &lt;code&gt;
 ForkJoinPool&lt;/code&gt;s may also be appropriate for use with event-style tasks that are never joined. All worker threads are initialized with &lt;a href=&quot;../../lang/thread#isDaemon()&quot;&gt;&lt;code&gt;Thread.isDaemon()&lt;/code&gt;&lt;/a&gt; set &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ForkJoinPool&lt;/code&gt; 는 다른 종류의 차이가 &lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; 를&lt;/a&gt; 주로 사용의 덕택으로 &lt;em&gt;작업 도둑질을&lt;/em&gt; : 모든 스레드를 풀 시도에서 찾아 다른 활성 작업에 의해 풀에 제출 및 / 또는 생성 작업을 실행하기 위해 (결국 일을 기다리고 차단을하는 경우 없음 존재) . 이렇게하면 대부분의 작업이 다른 하위 작업을 생성 할 때 (대부분의 &lt;code&gt;ForkJoinTask&lt;/code&gt; 와 마찬가지로), 그리고 많은 작은 작업이 외부 클라이언트에서 풀로 제출 될 때 효율적인 처리가 가능 합니다. 특히 생성자에서 &lt;em&gt;asyncMode&lt;/em&gt; 를 true로 설정할 때 &lt;code&gt; ForkJoinPool&lt;/code&gt; 은 조인되지 않는 이벤트 스타일 작업에 사용하기에 적합 할 수도 있습니다. 모든 작업자 스레드는 &lt;a href=&quot;../../lang/thread#isDaemon()&quot;&gt; &lt;code&gt;Thread.isDaemon()&lt;/code&gt; &lt;/a&gt; 초기화됩니다. &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8d18a90b5521be7acf1afb0796d715eb20c7f79" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinPool&lt;/code&gt; differs from other kinds of &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; mainly by virtue of employing &lt;em&gt;work-stealing&lt;/em&gt;: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most &lt;code&gt;ForkJoinTask&lt;/code&gt;s), as well as when many small tasks are submitted to the pool from external clients. Especially when setting &lt;em&gt;asyncMode&lt;/em&gt; to true in constructors, &lt;code&gt;ForkJoinPool&lt;/code&gt;s may also be appropriate for use with event-style tasks that are never joined.</source>
          <target state="translated">&lt;code&gt;ForkJoinPool&lt;/code&gt; 는 다른 종류의 차이가 &lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; 를&lt;/a&gt; 주로 사용의 덕택으로 &lt;em&gt;작업 도둑질을&lt;/em&gt; : 모든 스레드를 풀 시도에서 찾아 다른 활성 작업에 의해 풀에 제출 및 / 또는 생성 작업을 실행하기 위해 (결국 일을 기다리고 차단을하는 경우 없음 존재) . 이를 통해 대부분의 작업이 다른 하위 작업을 생성 할 때 (대부분의 &lt;code&gt;ForkJoinTask&lt;/code&gt; 와 마찬가지로) 많은 작은 작업이 외부 클라이언트에서 풀로 제출 될 때 효율적인 처리가 가능 합니다. 특히 생성자에서 &lt;em&gt;asyncMode&lt;/em&gt; 를 true로 설정할 때 &lt;code&gt;ForkJoinPool&lt;/code&gt; 은 결합되지 않은 이벤트 스타일 작업에 사용하기에 적합 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e3dce3428616a5b7729adb9311035be829ff79b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinTask&lt;/code&gt; is a lightweight form of &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. The efficiency of &lt;code&gt;ForkJoinTask&lt;/code&gt;s stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are &lt;a href=&quot;#fork()&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, that arranges asynchronous execution, and &lt;a href=&quot;#join()&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, that doesn't proceed until the task's result has been computed. Computations should ideally avoid &lt;code&gt;synchronized&lt;/code&gt; methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as &lt;code&gt;IOExceptions&lt;/code&gt; to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include &lt;a href=&quot;rejectedexecutionexception&quot;&gt;&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/a&gt; stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using &lt;code&gt;ex.printStackTrace()&lt;/code&gt;) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter.</source>
          <target state="translated">&lt;code&gt;ForkJoinTask&lt;/code&gt; 은 의 가벼운 형태이다 &lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;ForkJoinTask&lt;/code&gt; 의 효율성은 순수 함수를 계산하거나 순수하게 격리 된 개체에서 작동하는 계산 작업으로의 주요 사용을 반영하는 일련의 제한 (부분적으로 만 정적으로 시행 가능)에서 비롯됩니다. 기본 조정 메커니즘은 비동기 실행을 정렬하는 &lt;a href=&quot;#fork()&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt; 및 작업 결과가 계산 될 때까지 진행되지 않는 &lt;a href=&quot;#join()&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt; 입니다. 계산은 이상적으로 &lt;code&gt;synchronized&lt;/code&gt; 피해야 합니다.다른 작업에 참여하거나 포크 / 조인 스케줄링과 협력하도록 광고되는 Phaser와 같은 동기화기를 사용하는 것 외에 다른 차단 동기화를 최소화해야합니다. 세분화 가능한 작업은 I / O 차단을 수행하지 않아야하며 실행중인 다른 작업에서 액세스하는 것과 완전히 독립적 인 변수에 액세스하는 것이 이상적입니다. 이러한 지침은 &lt;code&gt;IOExceptions&lt;/code&gt; 와 같은 확인 된 예외 가 throw 되는 것을 허용하지 않음으로써 느슨하게 시행됩니다 . 그러나 계산에 여전히 확인되지 않은 예외가 발생할 수 있으며, 이는 참여를 시도하는 호출자에게 다시 발생합니다. 이러한 예외에는 &lt;a href=&quot;rejectedexecutionexception&quot;&gt; &lt;code&gt;RejectedExecutionException&lt;/code&gt; &lt;/a&gt; 이 추가로 포함될 수 있습니다.내부 작업 대기열 할당 실패와 같은 내부 리소스 고갈로 인해 발생합니다. 다시 throw 된 예외는 일반 예외와 동일한 방식으로 작동하지만, 가능한 경우 계산을 시작한 스레드와 실제로 예외가 발생한 스레드의 스택 추적 (예 : &lt;code&gt;ex.printStackTrace()&lt;/code&gt; 를 사용하여 표시됨 )을 포함합니다. 최소한 후자 만.</target>
        </trans-unit>
        <trans-unit id="9544e01c6b5af36520a8f8b6ebcc6596c68d9f35" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinTask&lt;/code&gt; is a lightweight form of &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. The efficiency of &lt;code&gt;ForkJoinTask&lt;/code&gt;s stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, that arranges asynchronous execution, and &lt;a href=&quot;forkjointask#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, that doesn't proceed until the task's result has been computed. Computations should ideally avoid &lt;code&gt;synchronized&lt;/code&gt; methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as &lt;code&gt;IOExceptions&lt;/code&gt; to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include &lt;a href=&quot;rejectedexecutionexception&quot;&gt;&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/a&gt; stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using &lt;code&gt;ex.printStackTrace()&lt;/code&gt;) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter.</source>
          <target state="translated">&lt;code&gt;ForkJoinTask&lt;/code&gt; 은 의 가벼운 형태이다 &lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;ForkJoinTask&lt;/code&gt; 의 효율성은 순수한 기능을 계산하거나 완전히 고립 된 객체에서 작동하는 계산 작업으로 주요 용도를 반영하는 일련의 제한 (부분적으로 만 정적으로 시행 가능)에서 비롯됩니다. 주요 조정 메커니즘은 비동기 실행을 정렬하는 &lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt; 및 작업 결과가 계산 될 때까지 진행되지 않는 &lt;a href=&quot;forkjointask#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt; 입니다. 계산은 이상적으로 &lt;code&gt;synchronized&lt;/code&gt; 피해야 합니다다른 작업에 참여하거나 포크 / 조인 스케줄링과 협력하도록 알려진 페이저와 같은 동기화기를 사용하는 것 외에 다른 차단 동기화를 최소화해야합니다. 분할 가능한 작업은 I / O 차단을 수행하지 않아야하며, 실행중인 다른 작업에서 액세스 한 변수와 완전히 독립적 인 변수에 이상적으로 액세스해야합니다. 이러한 지침은 &lt;code&gt;IOExceptions&lt;/code&gt; 과 같은 확인 된 예외가 발생하지 않도록하여 엄격하게 시행됩니다 . 그러나 계산에는 여전히 확인되지 않은 예외가 발생할 수 있으며, 이는 예외를 호출하려는 호출자에게 다시 발생합니다. 이러한 예외에는 &lt;a href=&quot;rejectedexecutionexception&quot;&gt; &lt;code&gt;RejectedExecutionException&lt;/code&gt; &lt;/a&gt; 이 추가로 포함될 수 있습니다.내부 작업 대기열 할당 실패와 같은 내부 리소스 부족으로 인해 발생합니다. 다시 발생하는 예외는 일반 예외와 같은 방식으로 작동하지만 가능 하면 계산을 시작한 스레드와 실제로 예외가 발생한 스레드의 스택 추적 (예 : &lt;code&gt;ex.printStackTrace()&lt;/code&gt; )이 포함됩니다. 최소한 후자.</target>
        </trans-unit>
        <trans-unit id="14da08ff70bb1beab693903db89e6bbfa739294b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Frame&lt;/code&gt; is a top-level window with a title and a border.</source>
          <target state="translated">&lt;code&gt;Frame&lt;/code&gt; , 타이틀과 경계를 가지는 톱 레벨 윈도우입니다.</target>
        </trans-unit>
        <trans-unit id="59e4537d03997fc8e4572b5632f13f3e8f86fa81" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Frame&lt;/code&gt; object, for example, has a top inset that corresponds to the height of the frame's title bar.</source>
          <target state="translated">&lt;code&gt;Frame&lt;/code&gt; 객체는 예를 들어, 프레임의 타이틀 바의 높이에 대응하는 삽입 된 상부를 갖는다.</target>
        </trans-unit>
        <trans-unit id="aaed9c1c95e36e578332ed99960bdc34b464e2c1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; object representing the pending result</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; 보류 결과를 나타내는 객체</target>
        </trans-unit>
        <trans-unit id="e3c738535226d76fc03962a22432b614701ce29c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; represents the result of an asynchronous computation.</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; 비동기 계산의 결과를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="eba862211d7584251d0b7d0c2a6de4b35930cfa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method &lt;code&gt;get&lt;/code&gt; when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the &lt;code&gt;cancel&lt;/code&gt; method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a &lt;code&gt;Future&lt;/code&gt; for the sake of cancellability but not provide a usable result, you can declare types of the form &lt;code&gt;Future&amp;lt;?&amp;gt;&lt;/code&gt; and return &lt;code&gt;null&lt;/code&gt; as a result of the underlying task.</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; 비동기 계산의 결과를 나타낸다. 계산이 완료되었는지 확인하고, 완료를 기다리며, 계산 결과를 검색하는 방법이 제공됩니다. 계산이 완료되면 메소드 &lt;code&gt;get&lt;/code&gt; 을 사용하여 결과를 검색 할 수 있으며 필요한 경우 준비가 될 때까지 차단합니다. 취소는 &lt;code&gt;cancel&lt;/code&gt; 메소드에 의해 수행됩니다 . 작업이 정상적으로 완료되었는지 또는 취소되었는지를 판별하기위한 추가 방법이 제공됩니다. 계산이 완료되면 계산을 취소 할 수 없습니다. 취소 가능성을 위해 &lt;code&gt;Future&lt;/code&gt; 를 사용하고 싶지만 사용 가능한 결과를 제공하지 않으려면 &lt;code&gt;Future&amp;lt;?&amp;gt;&lt;/code&gt; 형식의 유형을 선언 하고 &lt;code&gt;null&lt;/code&gt; 을 반환 할 수 있습니다 기본 작업의 결과로.</target>
        </trans-unit>
        <trans-unit id="f9bf9f3ae9d9dc18349e070a2be923bb4c83d53c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FutureTask&lt;/code&gt; can be used to wrap a &lt;a href=&quot;callable&quot;&gt;&lt;code&gt;Callable&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt; object. Because &lt;code&gt;FutureTask&lt;/code&gt; implements &lt;code&gt;Runnable&lt;/code&gt;, a &lt;code&gt;FutureTask&lt;/code&gt; can be submitted to an &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; for execution.</source>
          <target state="translated">&lt;code&gt;FutureTask&lt;/code&gt; 는 랩하는 데 사용할 수있는 &lt;a href=&quot;callable&quot;&gt; &lt;code&gt;Callable&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; &lt;/a&gt; 객체를. 때문에 &lt;code&gt;FutureTask&lt;/code&gt; 구현 &lt;code&gt;Runnable&lt;/code&gt; 를 하는 &lt;code&gt;FutureTask&lt;/code&gt; 는 에 제출 될 수 &lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt; 실행.</target>
        </trans-unit>
        <trans-unit id="e67d966c0d13366c153ce5f0e757c6dac3fdb0dd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GROUP_BOX&lt;/code&gt; is a simple container that contains a border around it and contains components inside it.</source>
          <target state="translated">&lt;code&gt;GROUP_BOX&lt;/code&gt; 는 주위에 테두리를 포함하고 내부 구성 요소를 포함하는 간단한 컨테이너이다.</target>
        </trans-unit>
        <trans-unit id="b15d7f012da980ff804256f43a1e764ab575fa4d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GaugeMonitor&lt;/code&gt; can operate in &lt;em&gt;difference mode&lt;/em&gt;. In this mode, the value compared against the high and low thresholds is the difference between two successive observations of an attribute.</source>
          <target state="translated">&lt;code&gt;GaugeMonitor&lt;/code&gt; 는 에서 작동 할 수 &lt;em&gt;차이 모드&lt;/em&gt; . 이 모드에서 상한 임계 값과 하한 임계 값과 비교 한 값은 속성에 대한 두 개의 연속 관측치의 차이입니다.</target>
        </trans-unit>
        <trans-unit id="808059b6c45e84ba504c80b1434f13dc3966a887" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GlyphVector&lt;/code&gt; is associated with exactly one &lt;code&gt;Font&lt;/code&gt;, and can provide data useful only in relation to this &lt;code&gt;Font&lt;/code&gt;. In addition, metrics obtained from a &lt;code&gt;GlyphVector&lt;/code&gt; are not generally geometrically scalable since the pixelization and spacing are dependent on grid-fitting algorithms within a &lt;code&gt;Font&lt;/code&gt;. To facilitate accurate measurement of a &lt;code&gt;GlyphVector&lt;/code&gt; and its component glyphs, you must specify a scaling transform, anti-alias mode, and fractional metrics mode when creating the &lt;code&gt;GlyphVector&lt;/code&gt;. These characteristics can be derived from the destination device.</source>
          <target state="translated">&lt;code&gt;GlyphVector&lt;/code&gt; 에는 정확히 하나와 연결되어 &lt;code&gt;Font&lt;/code&gt; , 및 이러한 관련 유용한 데이터를 제공 할 수있는 &lt;code&gt;Font&lt;/code&gt; . 또한 &lt;code&gt;GlyphVector&lt;/code&gt; 에서 얻은 메트릭 은 픽셀 화 및 간격이 &lt;code&gt;Font&lt;/code&gt; 내의 격자 맞춤 알고리즘에 의존하기 때문에 일반적으로 기하학적으로 확장 할 수 없습니다 . (A)의 정확한 측정을 용이하게하기 위해 &lt;code&gt;GlyphVector&lt;/code&gt; 에 와 그 구성 요소 글리프를, 당신은, 스케일링 변환을 지정해야 앤티 앨리어싱 모드 및 부분 메트릭스 모드 만들 때 &lt;code&gt;GlyphVector&lt;/code&gt; 의를 . 이러한 특성은 대상 장치에서 파생 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d09bf768aea31ab1ff2d6764b03dea110b3f5b8c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GlyphVector&lt;/code&gt; object is a collection of glyphs containing geometric information for the placement of each glyph in a transformed coordinate space which corresponds to the device on which the &lt;code&gt;GlyphVector&lt;/code&gt; is ultimately displayed.</source>
          <target state="translated">&lt;code&gt;GlyphVector&lt;/code&gt; 오브젝트 좌표 공간에서 각 형질 전환 된 글리프의 위치에 대한 기하학적 정보를 포함하는 글리프의 집합이다 이는되는 기기에 대응 &lt;code&gt;GlyphVector&lt;/code&gt; 궁극적 표시된다.</target>
        </trans-unit>
        <trans-unit id="31e9dc31ab34f86503d195faf50a6e4ec7657f5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Graphics&lt;/code&gt; object encapsulates state information needed for the basic rendering operations that Java supports. This state information includes the following properties:</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; 객체는 자바에서 지원하는 기본 렌더링 작업에 필요한 상태 정보를 캡슐화합니다. 이 상태 정보에는 다음 속성이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="98b274d30d5b77844c6f808ebbde1cf0501f072a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that aligns and sizes it's children.</source>
          <target state="translated">자식을 정렬하고 크기를 조정 하는 &lt;code&gt;Group&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d339eb16dcfd277b22e0fd6637e62527c1be2267" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that aligns and sizes it's children. &lt;code&gt;ParallelGroup&lt;/code&gt; aligns it's children in four possible ways: along the baseline, centered, anchored to the leading edge, or anchored to the trailing edge.</source>
          <target state="translated">자식을 정렬하고 크기를 조정 하는 &lt;code&gt;Group&lt;/code&gt; 입니다. &lt;code&gt;ParallelGroup&lt;/code&gt; 은 기준선을 따라, 중앙에, 앞쪽 가장자리에 고정하거나, 뒤쪽 가장자리에 고정하는 네 가지 가능한 방법으로 자식을 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="6aef82558bac354b2e4ffd244f025111979caa2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that positions and sizes its elements sequentially, one after another.</source>
          <target state="translated">요소를 차례로 배치하고 크기를 조정 하는 &lt;code&gt;Group&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="549861e65bafbdd9423dea003b305d1390c7c0e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that positions and sizes its elements sequentially, one after another. This class has no public constructor, use the &lt;code&gt;createSequentialGroup&lt;/code&gt; method to create one.</source>
          <target state="translated">요소를 차례로 배치하고 크기를 조정 하는 &lt;code&gt;Group&lt;/code&gt; 입니다. 이 클래스에는 공용 생성자가 없습니다. &lt;code&gt;createSequentialGroup&lt;/code&gt; 메서드를 사용하여 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4cf3cffad5d242245950456e0383e3dadcec2d32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; can be disabled by doing a &lt;code&gt;setLevel(Level.OFF)&lt;/code&gt; and can be re-enabled by doing a &lt;code&gt;setLevel&lt;/code&gt; with an appropriate level.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 하고 해제 할 수 &lt;code&gt;setLevel(Level.OFF)&lt;/code&gt; 재 수행하여 사용하도록 설정된 될 수 &lt;code&gt;setLevel&lt;/code&gt; 를 적절한 수준.</target>
        </trans-unit>
        <trans-unit id="07d5ef0f1e1b73dbbd9fd210671b4d619d422fe6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; object takes log messages from a &lt;code&gt;Logger&lt;/code&gt; and exports them.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 객체는에서 로그 메시지를 취 &lt;code&gt;Logger&lt;/code&gt; 수출 그들.</target>
        </trans-unit>
        <trans-unit id="71915fb4257dbd796d9ff81b937255b731d13b27" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; object takes log messages from a &lt;code&gt;Logger&lt;/code&gt; and exports them. It might for example, write them to a console or write them to a file, or send them to a network logging service, or forward them to an OS log, or whatever.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 객체는에서 로그 메시지를 취 &lt;code&gt;Logger&lt;/code&gt; 수출 그들. 예를 들어 콘솔에 쓰거나 파일에 쓰거나 네트워크 로깅 서비스로 보내거나 OS 로그 등에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c043a5498a1c6516a85aefb7fe01c5496b8fa25d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JButton&lt;/code&gt; is created with this as its label.</source>
          <target state="translated">&lt;code&gt;JButton&lt;/code&gt; 라벨 등이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="585bfc49a751caf274ce7d5d4caa7a2becdd770b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JLabel&lt;/code&gt; object can display either text, an image, or both. You can specify where in the label's display area the label's contents are aligned by setting the vertical and horizontal alignment. By default, labels are vertically centered in their display area. Text-only labels are leading edge aligned, by default; image-only labels are horizontally centered, by default.</source>
          <target state="translated">&lt;code&gt;JLabel&lt;/code&gt; 목적이나 이미지를 동시에 표시 할 수있다. 수직 및 수평 정렬을 설정하여 레이블의 표시 영역에서 레이블의 내용이 정렬되는 위치를 지정할 수 있습니다. 기본적으로 레이블은 표시 영역에서 세로 중앙에 배치됩니다. 텍스트 전용 레이블은 기본적으로 앞쪽 가장자리로 정렬됩니다. 이미지 전용 레이블은 기본적으로 가로 가운데에 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcd53b6c411732736c4dd4e1ccee842e3483ddbf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JSpinner&lt;/code&gt; has a single child component that's responsible for displaying and potentially changing the current element or</source>
          <target state="translated">&lt;code&gt;JSpinner&lt;/code&gt; 표시하고 잠재적으로 현재 요소를 변경하거나에 대한 책임의 하나의 하위 구성 요소가</target>
        </trans-unit>
        <trans-unit id="7f594d64f28fa2188d323f2d18ed647f3a7397d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JSpinner&lt;/code&gt;'s sequence value is defined by its &lt;code&gt;SpinnerModel&lt;/code&gt;. The &lt;code&gt;model&lt;/code&gt; can be specified as a constructor argument and changed with the &lt;code&gt;model&lt;/code&gt; property. &lt;code&gt;SpinnerModel&lt;/code&gt; classes for some common types are provided: &lt;code&gt;SpinnerListModel&lt;/code&gt;, &lt;code&gt;SpinnerNumberModel&lt;/code&gt;, and &lt;code&gt;SpinnerDateModel&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JSpinner&lt;/code&gt; 의 서열 값은 그 의해 정의 &lt;code&gt;SpinnerModel&lt;/code&gt; . &lt;code&gt;model&lt;/code&gt; 생성자의 인자로 지정하고 변경할 수 있습니다 &lt;code&gt;model&lt;/code&gt; 속성입니다. &lt;code&gt;SpinnerListModel&lt;/code&gt; , &lt;code&gt;SpinnerNumberModel&lt;/code&gt; 및 &lt;code&gt;SpinnerDateModel&lt;/code&gt; 과 같은 몇 가지 일반적인 유형에 대한 &lt;code&gt;SpinnerModel&lt;/code&gt; 클래스가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="ac4a9fa2c90047df98b18998be1b5d8ef332c001" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JTextArea&lt;/code&gt; is a multi-line area that displays plain text.</source>
          <target state="translated">&lt;code&gt;JTextArea&lt;/code&gt; 에이 표시 일반 텍스트가 여러 줄 영역입니다.</target>
        </trans-unit>
        <trans-unit id="599011ab5514bb26626ca3250a62c0f2cb431bdd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JTextArea&lt;/code&gt; is a multi-line area that displays plain text. It is intended to be a lightweight component that provides source compatibility with the &lt;code&gt;java.awt.TextArea&lt;/code&gt; class where it can reasonably do so. You can find information and examples of using all the text components in &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;JTextArea&lt;/code&gt; 에이 표시 일반 텍스트가 여러 줄 영역입니다. 이것은 합리적으로 그렇게 할 수 있는 &lt;code&gt;java.awt.TextArea&lt;/code&gt; 클래스 와의 소스 호환성을 제공하는 경량 컴포넌트를위한 것입니다. &lt;em&gt;Java Tutorial&lt;/em&gt; 의 섹션 인 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components&lt;/a&gt; 에서 모든 텍스트 구성 요소 사용에 대한 정보와 예제를 찾을 수 있습니다 &lt;em&gt;.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb49204534e5ab19b355fd6d0029faa105b21294" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JWindow&lt;/code&gt; is a container that can be displayed anywhere on the user's desktop.</source>
          <target state="translated">&lt;code&gt;JWindow&lt;/code&gt; 의는 사용자의 바탕 화면의 아무 곳이나 표시 할 수있는 컨테이너입니다.</target>
        </trans-unit>
        <trans-unit id="201efb5597ecfce6e0c41db46b7e67710dad8174" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JWindow&lt;/code&gt; is a container that can be displayed anywhere on the user's desktop. It does not have the title bar, window-management buttons, or other trimmings associated with a &lt;code&gt;JFrame&lt;/code&gt;, but it is still a &quot;first-class citizen&quot; of the user's desktop, and can exist anywhere on it.</source>
          <target state="translated">&lt;code&gt;JWindow&lt;/code&gt; 의는 사용자의 바탕 화면의 아무 곳이나 표시 할 수있는 컨테이너입니다. 제목 표시 줄, 창 관리 버튼 또는 &lt;code&gt;JFrame&lt;/code&gt; 과 관련된 기타 트리밍 이 없지만 여전히 사용자 데스크톱의 &quot;일류 시민&quot;이며 그 어디에나 존재할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dcc3b0d144365dbfa47f757b66cde02c77acc393" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KerberosKey&lt;/code&gt; object includes an EncryptionKey, a &lt;a href=&quot;kerberosprincipal&quot;&gt;&lt;code&gt;KerberosPrincipal&lt;/code&gt;&lt;/a&gt; as its owner, and the version number of the key.</source>
          <target state="translated">&lt;code&gt;KerberosKey&lt;/code&gt; 목적은 EncryptionKey하는 포함 &lt;a href=&quot;kerberosprincipal&quot;&gt; &lt;code&gt;KerberosPrincipal&lt;/code&gt; 를&lt;/a&gt; 오너로서, 상기 키의 버전 번호.</target>
        </trans-unit>
        <trans-unit id="d2f55fcdf4871d6cb95f44b20907b710610f1bde" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyInfo&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newKeyInfo(java.util.List)&quot;&gt;&lt;code&gt;newKeyInfo&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it a list of one or more &lt;code&gt;XMLStructure&lt;/code&gt;s and an optional id parameter; for example:</source>
          <target state="translated">&lt;code&gt;KeyInfo&lt;/code&gt; 인스턴스는 하나의 호출에 의해 생성 될 수있다 &lt;a href=&quot;keyinfofactory#newKeyInfo(java.util.List)&quot;&gt; &lt;code&gt;newKeyInfo&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; 를&lt;/a&gt; 클래스, 그리고 하나 이상의 목록을 전달 &lt;code&gt;XMLStructure&lt;/code&gt; 들 및 임의의 ID 파라미터; 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="012f55a0c0584ff20c441c4b7b74fd9047d2e0c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyListener&lt;/code&gt; object is registered via &lt;code&gt;addKeyListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyListener&lt;/code&gt; 개체에 의해 등록되어 &lt;code&gt;addKeyListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f3e571242e9629b5fa97ea40e492f8c6ef61590" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyName&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newKeyName(java.lang.String)&quot;&gt;&lt;code&gt;newKeyName&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it a &lt;code&gt;String&lt;/code&gt; representing the name of the key; for example:</source>
          <target state="translated">&lt;code&gt;KeyName&lt;/code&gt; 인스턴스를 호출하여 생성 될 수있다 &lt;a href=&quot;keyinfofactory#newKeyName(java.lang.String)&quot;&gt; &lt;code&gt;newKeyName&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; 를&lt;/a&gt; 클래스 및 그것을 통과 &lt;code&gt;String&lt;/code&gt; 키 이름을 나타내는 단계; 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="51ffb2a6e4b862e2a4b8cb8c96de97af75952482" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeySelectorException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;KeySelectorException&lt;/code&gt; to get thrown.</source>
          <target state="translated">&lt;code&gt;KeySelectorException&lt;/code&gt; 는 이 발생하는 또 다른 throw 가능 객체 : 원인 포함 할 수 있습니다 &lt;code&gt;KeySelectorException&lt;/code&gt; 는 던져하기를.</target>
        </trans-unit>
        <trans-unit id="3fb57c28b4cbc4de67b9b837881a7c7b94627b9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;PrivateKey&lt;/code&gt; and corresponding certificate chain.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 보유 항목 &lt;code&gt;PrivateKey&lt;/code&gt; 와 대응하는 인증서 체인.</target>
        </trans-unit>
        <trans-unit id="837ba561898b391715044e3d771ab97e0f801556" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;SecretKey&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 보유 항목 &lt;code&gt;SecretKey&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d4f9392633e9e6a7977e14aae24bfa123ae981d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a trusted &lt;code&gt;Certificate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 보유 항목은 신뢰할 수있는 &lt;code&gt;Certificate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3c291843cd8aff8aee9399a0e479b86bb3a9660" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; manages different types of entries. Each type of entry implements the &lt;code&gt;KeyStore.Entry&lt;/code&gt; interface. Three basic &lt;code&gt;KeyStore.Entry&lt;/code&gt; implementations are provided:</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 항목의 다른 유형을 관리합니다. 각 유형의 항목은 &lt;code&gt;KeyStore.Entry&lt;/code&gt; 인터페이스를 구현합니다 . 세 가지 기본 &lt;code&gt;KeyStore.Entry&lt;/code&gt; 구현이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="5f8acb0e477c2ee7ecefc6414095975eb0214211" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyValue&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newKeyValue(java.security.PublicKey)&quot;&gt;&lt;code&gt;newKeyValue&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it a &lt;a href=&quot;../../../../../../java.base/java/security/publickey&quot;&gt;&lt;code&gt;PublicKey&lt;/code&gt;&lt;/a&gt; representing the value of the public key. Here is an example of creating a &lt;code&gt;KeyValue&lt;/code&gt; from a &lt;a href=&quot;../../../../../../java.base/java/security/interfaces/dsapublickey&quot;&gt;&lt;code&gt;DSAPublicKey&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;../../../../../../java.base/java/security/cert/certificate&quot;&gt;&lt;code&gt;Certificate&lt;/code&gt;&lt;/a&gt; stored in a &lt;a href=&quot;../../../../../../java.base/java/security/keystore&quot;&gt;&lt;code&gt;KeyStore&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;KeyValue&lt;/code&gt; 인스턴스를 호출하여 생성 될 수있다 &lt;a href=&quot;keyinfofactory#newKeyValue(java.security.PublicKey)&quot;&gt; &lt;code&gt;newKeyValue&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; 를&lt;/a&gt; 클래스 및 그것을 통과 &lt;a href=&quot;../../../../../../java.base/java/security/publickey&quot;&gt; &lt;code&gt;PublicKey&lt;/code&gt; 의&lt;/a&gt; 공개 키의 값을 표현한다. 여기 생성의 예이다 &lt;code&gt;KeyValue&lt;/code&gt; A로부터 &lt;a href=&quot;../../../../../../java.base/java/security/interfaces/dsapublickey&quot;&gt; &lt;code&gt;DSAPublicKey&lt;/code&gt; 가&lt;/a&gt; (A)의 &lt;a href=&quot;../../../../../../java.base/java/security/cert/certificate&quot;&gt; &lt;code&gt;Certificate&lt;/code&gt; &lt;/a&gt; (A)에 저장된 &lt;a href=&quot;../../../../../../java.base/java/security/keystore&quot;&gt; &lt;code&gt;KeyStore&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c4b228d8e239a4731e8a03a244c7c1dd24b6042e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LSInput&lt;/code&gt; object describing the new input source, or &lt;code&gt;null&lt;/code&gt; to request that the parser open a regular URI connection to the resource.</source>
          <target state="translated">새 입력 소스를 설명 하는 &lt;code&gt;LSInput&lt;/code&gt; 객체, 또는 파서가 리소스에 대한 일반 URI 연결을 열도록 요청하려면 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f76ee51cc37d3f506f1ad2927635397e5ab3b4d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LSSerializer&lt;/code&gt; provides an API for serializing (writing) a DOM document out into XML.</source>
          <target state="translated">&lt;code&gt;LSSerializer&lt;/code&gt; 에는 XML에 밖으로 DOM 문서를 직렬화 (쓰기)에 대한 API를 제공한다.</target>
        </trans-unit>
        <trans-unit id="abe7fa5680110da7b6a61364c82151f1575a53b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LSSerializer&lt;/code&gt; provides an API for serializing (writing) a DOM document out into XML. The XML data is written to a string or an output stream. Any changes or fixups made during the serialization affect only the serialized data. The &lt;code&gt;Document&lt;/code&gt; object and its children are never altered by the serialization operation.</source>
          <target state="translated">&lt;code&gt;LSSerializer&lt;/code&gt; 에는 XML에 밖으로 DOM 문서를 직렬화 (쓰기)에 대한 API를 제공한다. XML 데이터는 문자열 또는 출력 스트림에 기록됩니다. 직렬화 중에 이루어진 모든 변경 또는 수정은 직렬화 된 데이터에만 영향을줍니다. &lt;code&gt;Document&lt;/code&gt; 객체와 그 아이가 직렬화의 조작에 의해 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="801222b890ab81b38019c7af42d4cb8c93476196" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Label&lt;/code&gt; object is a component for placing text in a container.</source>
          <target state="translated">&lt;code&gt;Label&lt;/code&gt; 객체는 컨테이너 내에 텍스트를 배치하기위한 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="123cbaa06c6b665f4a5fae9ccd069a82e908d0fe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Label&lt;/code&gt; object is a component for placing text in a container. A label displays a single line of read-only text. The text can be changed by the application, but a user cannot edit it directly.</source>
          <target state="translated">&lt;code&gt;Label&lt;/code&gt; 객체는 컨테이너 내에 텍스트를 배치하기위한 구성 요소입니다. 레이블은 한 줄의 읽기 전용 텍스트를 표시합니다. 텍스트는 응용 프로그램에서 변경할 수 있지만 사용자가 직접 편집 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="c4dae11bb0779a5adf426c55c4dd02a312f2630d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LabelView&lt;/code&gt; is a styled chunk of text that represents a view mapped over an element in the text model.</source>
          <target state="translated">&lt;code&gt;LabelView&lt;/code&gt; 와는 텍스트 모델의 요소에 매핑 된 뷰를 나타내는 텍스트 스타일의 청크이다.</target>
        </trans-unit>
        <trans-unit id="ac4ae858cbc3947bf1a4ac65ccfc0c34eaafbbc0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LabelView&lt;/code&gt; is a styled chunk of text that represents a view mapped over an element in the text model. It caches the character level attributes used for rendering.</source>
          <target state="translated">&lt;code&gt;LabelView&lt;/code&gt; 와는 텍스트 모델의 요소에 매핑 된 뷰를 나타내는 텍스트 스타일의 청크이다. 렌더링에 사용되는 캐릭터 레벨 속성을 캐시합니다.</target>
        </trans-unit>
        <trans-unit id="f429ad9047f95d3332ba89e413a6cc0ee2434630" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LexicalHandler&lt;/code&gt;, or null.</source>
          <target state="translated">&lt;code&gt;LexicalHandler&lt;/code&gt; 를 , 또는 null.</target>
        </trans-unit>
        <trans-unit id="bb4a585b9fa4f77ccbfb42f60f7e4ebf122059bf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; can be retrieved using various methods of the &lt;code&gt;Line&lt;/code&gt;, &lt;code&gt;Mixer&lt;/code&gt;, and &lt;code&gt;AudioSystem&lt;/code&gt; interfaces. Other such methods let you pass a &lt;code&gt;Line.Info&lt;/code&gt; as an argument, to learn whether lines matching the specified configuration are available and to obtain them.</source>
          <target state="translated">&lt;code&gt;Line.Info&lt;/code&gt; 은 의 다양한 방법을 사용하여 검색 될 수있는 &lt;code&gt;Line&lt;/code&gt; , &lt;code&gt;Mixer&lt;/code&gt; 와 &lt;code&gt;AudioSystem&lt;/code&gt; 인터페이스. 이러한 다른 방법을 사용하면 &lt;code&gt;Line.Info&lt;/code&gt; 를 인수로 전달 하여 지정된 구성과 일치하는 행을 사용할 수 있는지 여부를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5433f861d6141ec2c15ed3524c528b35530116f7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; object contains information about a line.</source>
          <target state="translated">&lt;code&gt;Line.Info&lt;/code&gt; 객체는 라인에 관한 정보를 포함하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="411649ef651b4ec2897e14a73c6efb69e286dd53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; object contains information about a line. The only information provided by &lt;code&gt;Line.Info&lt;/code&gt; itself is the Java class of the line. A subclass of &lt;code&gt;Line.Info&lt;/code&gt; adds other kinds of information about the line. This additional information depends on which &lt;code&gt;Line&lt;/code&gt; subinterface is implemented by the kind of line that the &lt;code&gt;Line.Info&lt;/code&gt; subclass describes.</source>
          <target state="translated">&lt;code&gt;Line.Info&lt;/code&gt; 객체는 라인에 관한 정보를 포함하고 있습니다. &lt;code&gt;Line.Info&lt;/code&gt; 자체가 제공하는 유일한 정보 는 라인의 Java 클래스입니다. &lt;code&gt;Line.Info&lt;/code&gt; 의 하위 클래스 는 회선에 대한 다른 종류의 정보를 추가합니다. 이 추가 정보 는 &lt;code&gt;Line.Info&lt;/code&gt; 서브 클래스가 설명 하는 종류의 라인으로 구현 되는 &lt;code&gt;Line&lt;/code&gt; 서브 인터페이스 에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="f5de3198e8f1dfa44dcfc8af9b52d97a73d03b8f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LineUnavailableException&lt;/code&gt; is an exception indicating that a line cannot be opened because it is unavailable.</source>
          <target state="translated">&lt;code&gt;LineUnavailableException&lt;/code&gt; 는이 라인이 사용 불가이기 때문에 열지 않는 것을 나타내는 예외입니다.</target>
        </trans-unit>
        <trans-unit id="4abb8847d52965ede812fd61400508e96855279e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LineUnavailableException&lt;/code&gt; is an exception indicating that a line cannot be opened because it is unavailable. This situation arises most commonly when a requested line is already in use by another application.</source>
          <target state="translated">&lt;code&gt;LineUnavailableException&lt;/code&gt; 는이 라인이 사용 불가이기 때문에 열지 않는 것을 나타내는 예외입니다. 이 상황은 요청 된 회선이 다른 응용 프로그램에서 이미 사용 중일 때 가장 일반적으로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fcb957da8c31310ec301dd29626158388e9473b1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is reconstructed as a &lt;code&gt;java.util.ArrayList&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.HashSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.TreeSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;E는 &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; A와 재구성 &lt;code&gt;java.util.ArrayList&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; ; &lt;code&gt;Set&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; A와 &lt;code&gt;java.util.HashSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; ; &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; A와 &lt;code&gt;java.util.TreeSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5612ba3544e8d755ed07b488135f8d65a862088" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;
      Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;
        Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt;, is mapped in the same way as an array of the same element type, such as &lt;code&gt;String[]&lt;/code&gt; or &lt;code&gt;
          ObjectName[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt; Set&amp;lt;&lt;/code&gt; &lt;em&gt;E는 &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 과 같은 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 또는 &lt;code&gt; Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt; 와 같은 동일한 요소 타입의 배열과 같은 방법으로 매핑되는 &lt;code&gt;String[]&lt;/code&gt; 또는 &lt;code&gt; ObjectName[]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af514fc0928d7590d9dc3d67e977394e1aca4d98" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt;, is mapped in the same way as an array of the same element type, such as &lt;code&gt;String[]&lt;/code&gt; or &lt;code&gt;ObjectName[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;Set&amp;lt;&lt;/code&gt; &lt;em&gt;E는 &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 과 같은 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt; 와 같은 동일한 요소 타입의 배열과 같은 방법으로 매핑되는 &lt;code&gt;String[]&lt;/code&gt; 또는 &lt;code&gt;ObjectName[]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="491f6106940ce82948b741e62cf889f957747531" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; can be converted to a &lt;code&gt;String[]&lt;/code&gt; using &lt;a href=&quot;../../../java.base/java/util/list#toArray(T%5B%5D)&quot;&gt;&lt;code&gt;List.toArray(new
          String[0])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; A를 변환 할 수 &lt;code&gt;String[]&lt;/code&gt; 사용 &lt;a href=&quot;../../../java.base/java/util/list#toArray(T%5B%5D)&quot;&gt; &lt;code&gt;List.toArray(new String[0])&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="655d6f46a51b7f12297ceef1f25f3c615013051a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; can be converted to a &lt;code&gt;String[]&lt;/code&gt; using &lt;a href=&quot;../../java/util/list#toArray-T:A-&quot;&gt;&lt;code&gt;List.toArray(new
          String[0])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; A를 변환 할 수 &lt;code&gt;String[]&lt;/code&gt; 사용 &lt;a href=&quot;../../java/util/list#toArray-T:A-&quot;&gt; &lt;code&gt;List.toArray(new String[0])&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="784dc8e6adfc0a37725d118e74305dfbf9bd33ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 의 &lt;code&gt;BufferedImage&lt;/code&gt; 의의 축소판 또는 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cdb60bce0f809f664699468a47d7ccb04d51a1b6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails, or &lt;code&gt;null&lt;/code&gt;. Non-&lt;code&gt;BufferedImage&lt;/code&gt; objects must not be stored in this &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 의 &lt;code&gt;BufferedImage&lt;/code&gt; 의의 축소판 또는 &lt;code&gt;null&lt;/code&gt; . 비 &lt;code&gt;BufferedImage&lt;/code&gt; 객체는이에 저장하지 않아야 &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36b2069fe914d7b06b5470b8c3919de4f456ffd0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Locale&lt;/code&gt;s, one for each element of &lt;code&gt;warningListeners&lt;/code&gt;, initialized by default &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 의 &lt;code&gt;Locale&lt;/code&gt; 의,의 각 요소에 대해 하나의 &lt;code&gt;warningListeners&lt;/code&gt; 기본적으로 초기화, &lt;code&gt;null&lt;/code&gt; 빈의 대명사, &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e3a7c07b884a663e7b28c579dbc62722d830dd12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 현재 등록의 &lt;code&gt;IIOReadProgressListener&lt;/code&gt; 기본적으로 초기화의, &lt;code&gt;null&lt;/code&gt; 빈의 대명사, &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f3df7f953dd6fc375207a519bf3b8812d9b980e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 현재 등록의 &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; 기본적으로 초기화의, &lt;code&gt;null&lt;/code&gt; 빈의 대명사, &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02920fdeb4509bc480fe7cb92fdd00152bb3b36e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadWarningListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 현재 등록의 &lt;code&gt;IIOReadWarningListener&lt;/code&gt; 에 기본적으로 초기화의, &lt;code&gt;null&lt;/code&gt; 빈의 대명사, &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1efe3832c842f4b962429c8ff5af3c882f4ac2e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s, initialized by default &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 현재의 등록 &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; 기본으로 초기화들 &lt;code&gt;null&lt;/code&gt; 빈의 대명사, &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b98b86689e972cd06c339fa353658a98f167a0a5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOWriteWarningListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 현재 등록의 &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; 기본적으로 초기화의, &lt;code&gt;null&lt;/code&gt; 빈의 대명사, &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="917395ca416ac2ceda1a7b79e06bc0660475f8a6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of the &lt;code&gt;Locale&lt;/code&gt;s associated with each currently registered &lt;code&gt;IIOReadWarningListener&lt;/code&gt;, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 의 &lt;code&gt;Locale&lt;/code&gt; 의 각 현재 등록과 관련된 &lt;code&gt;IIOReadWarningListener&lt;/code&gt; 에 기본적으로 초기화, &lt;code&gt;null&lt;/code&gt; 빈의 대명사, &lt;code&gt;List&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="211c43ac85ae6d5574fc22ebc86733087aaf3305" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ListModel&lt;/code&gt; can be supplied directly to a &lt;code&gt;JList&lt;/code&gt; by way of a constructor or the &lt;code&gt;setModel&lt;/code&gt; method. The contents need not be static - the number of items, and the values of items can change over time. A correct &lt;code&gt;ListModel&lt;/code&gt; implementation notifies the set of &lt;code&gt;javax.swing.event.ListDataListener&lt;/code&gt;s that have been added to it, each time a change occurs. These changes are characterized by a &lt;code&gt;javax.swing.event.ListDataEvent&lt;/code&gt;, which identifies the range of list indices that have been modified, added, or removed. &lt;code&gt;JList&lt;/code&gt;'s &lt;code&gt;ListUI&lt;/code&gt; is responsible for keeping the visual representation up to date with changes, by listening to the model.</source>
          <target state="translated">&lt;code&gt;ListModel&lt;/code&gt; (A)에 직접 공급 될 수 &lt;code&gt;JList&lt;/code&gt; 의 생성자 또는로서 &lt;code&gt;setModel&lt;/code&gt; 방법. 내용은 정적 일 필요가 없습니다. 항목의 수와 항목의 값은 시간이 지남에 따라 변경 될 수 있습니다. 올바른 &lt;code&gt;ListModel&lt;/code&gt; 구현은 변경이 발생할 때마다 추가 된 &lt;code&gt;javax.swing.event.ListDataListener&lt;/code&gt; 세트에 알립니다 . 이러한 변경 사항은 수정, 추가 또는 제거 된 목록 인덱스의 범위를 식별 하는 &lt;code&gt;javax.swing.event.ListDataEvent&lt;/code&gt; 특징 입니다. &lt;code&gt;JList&lt;/code&gt; 의 &lt;code&gt;ListUI&lt;/code&gt; 는 모델을 청취하여 변경 사항에 따라 시각적 표현을 최신 상태로 유지하는 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="cb5267a4f83942b24929404c0f218034b517dcf3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ListSelectionListener&lt;/code&gt; that forwards &lt;code&gt;ListSelectionEvents&lt;/code&gt; when there is a column selection change.</source>
          <target state="translated">&lt;code&gt;ListSelectionListener&lt;/code&gt; 에 전달 된 그 &lt;code&gt;ListSelectionEvents&lt;/code&gt; 열 선택 변경이있다.</target>
        </trans-unit>
        <trans-unit id="b58a7624cae8f15ddb95782892153cb5fabf8fd5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LocalTime&lt;/code&gt; is formed if there is at least an hour-of-day available. This involves providing default values for minute, second and fraction of second.</source>
          <target state="translated">&lt;code&gt;LocalTime&lt;/code&gt; 적어도 한 시간의 일을 사용할 수있는 경우이 형성되어있다. 여기에는 분, 초 및 초 단위의 기본값을 제공하는 것이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="01853789d6079ac2028fec19eeeae43f9b897108" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; is the mechanism for identifying the kind of object (&lt;code&gt;NumberFormat&lt;/code&gt;) that you would like to get. The locale is &lt;strong&gt;just&lt;/strong&gt; a mechanism for identifying objects, &lt;strong&gt;not&lt;/strong&gt; a container for the objects themselves.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 객체 (의 종류를 식별하기위한 메커니즘입니다 &lt;code&gt;NumberFormat&lt;/code&gt; 를 당신이 얻을 싶다고을). 로케일은 &lt;strong&gt;단지&lt;/strong&gt; 물체를 식별하기위한 메커니즘 &lt;strong&gt;하지&lt;/strong&gt; 객체 자체에 대한 컨테이너.</target>
        </trans-unit>
        <trans-unit id="6fcfa373099d6b3da024951a19df5dd6b097e2d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object logically consists of the fields described below.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 객체는 논리적으로 아래에 설명 된 필드로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="166cc021915f9ee4f85c76cabe7204921d6e9fe0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object represents a specific geographical, political, or cultural region.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 객체는 특정의 지리적, 국가적, 또는 문화적 지역을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="635a5aa01099339234a0a7ea3dcb399de997df31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object represents a specific geographical, political, or cultural region. An operation that requires a &lt;code&gt;Locale&lt;/code&gt; to perform its task is called &lt;em&gt;locale-sensitive&lt;/em&gt; and uses the &lt;code&gt;Locale&lt;/code&gt; to tailor information for the user. For example, displaying a number is a locale-sensitive operation&amp;mdash; the number should be formatted according to the customs and conventions of the user's native country, region, or culture.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 객체는 특정의 지리적, 국가적, 또는 문화적 지역을 나타냅니다. 필요한 작업 &lt;code&gt;Locale&lt;/code&gt; 의 작업을 수행하기 위해 호출되는 &lt;em&gt;로케일에 의존&lt;/em&gt; 하고 사용하는 &lt;code&gt;Locale&lt;/code&gt; 사용자에게 맞춤형 정보를. 예를 들어 숫자를 표시하는 것은 로케일에 따라 다릅니다. 숫자는 사용자의 국가, 지역 또는 문화의 관습과 규칙에 따라 형식을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="0cd9ed10b27f2ef168f4256244d20117115ba51e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; to be used to localize compression type names and quality descriptions, or &lt;code&gt;null&lt;/code&gt; to use a default &lt;code&gt;Locale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 압축 방식 명과 품질 설명, 또는 현지화 사용되는 &lt;code&gt;null&lt;/code&gt; 기본 사용하는 &lt;code&gt;Locale&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12f70407c67f5352dca1aed29447302a2a4d4250" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; to be used to localize compression type names and quality descriptions, or &lt;code&gt;null&lt;/code&gt; to use a default &lt;code&gt;Locale&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 압축 방식 명과 품질 설명, 또는 현지화 사용되는 &lt;code&gt;null&lt;/code&gt; 기본 사용하는 &lt;code&gt;Locale&lt;/code&gt; . 서브 클래스는 값을 수동으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="8276cf42ea4317cfe442daf66653a487c4e1f80d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; class can also provide behavior and semantics that is quite different from that of the implicit monitor lock, such as guaranteed ordering, non-reentrant usage, or deadlock detection. If an implementation provides such specialized semantics then the implementation must document those semantics.</source>
          <target state="translated">&lt;code&gt;Lock&lt;/code&gt; 클래스는 행동과 같은 보증 된 순서 붙여 재입 불가능한 사용, 또는 교착 상태 감지 등의 암묵의 감시 락의 그것과 상당히 다른 의미를 제공 할 수 있습니다. 구현이 그러한 특수한 의미를 제공하는 경우 구현은 해당 의미를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="3eca3b7befac58e83c9e637d52b7f145f7ba7b59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that &lt;code&gt;Lock&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;Lock&lt;/code&gt; 구현은 교착 상태가 발생할 것이다, 그러한 상황으로 (체크) 예외를 던질 수있는 호출 등의 락의 부정 사용을 감지 할 수 있습니다. 상황 및 예외 유형은 해당 &lt;code&gt;Lock&lt;/code&gt; 구현에서 문서화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f3c0cd3882685c535519cd28b18404b3a9a21c01" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; implementation will usually impose restrictions on which thread can release a lock (typically only the holder of the lock can release it) and may throw an (unchecked) exception if the restriction is violated. Any restrictions and the exception type must be documented by that &lt;code&gt;Lock&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;Lock&lt;/code&gt; 구현은 일반적으로 스레드가 잠금과 제한이 침범되었을 경우에는 (체크) 예외를 던질 수있다 (을 해제 할 수 있습니다 일반적으로, 락의 홀더만을)을 해제 할 수있는 제한을 부과합니다. 모든 제한 및 예외 유형은 해당 &lt;code&gt;Lock&lt;/code&gt; 구현에 의해 문서화되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="b71cbc511c202cb9f3e5502805e1768103b9d6cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LoginModule&lt;/code&gt; implementation must have a constructor with no arguments. This allows classes which load the &lt;code&gt;LoginModule&lt;/code&gt; to instantiate it.</source>
          <target state="translated">&lt;code&gt;LoginModule&lt;/code&gt; 구현은 인수가없는 생성자가 있어야합니다. 이를 통해 &lt;code&gt;LoginModule&lt;/code&gt; 을 로드하는 클래스가이를 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d949ad08cad7e449a2f42749aa45dffb85fab86e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; object can be shared with other trusted code, such as a metaobject protocol. A shared &lt;code&gt;Lookup&lt;/code&gt; object delegates the capability to create method handles on private members of the lookup class. Even if privileged code uses the &lt;code&gt;Lookup&lt;/code&gt; object, the access checking is confined to the privileges of the original lookup class.</source>
          <target state="translated">&lt;code&gt;Lookup&lt;/code&gt; 오브젝트는 같은 metaobject를 프로토콜로, 다른 신뢰할 수있는 코드와 공유 할 수 있습니다. 공유 &lt;code&gt;Lookup&lt;/code&gt; 개체는 조회 클래스의 개인 멤버에 대한 메서드 핸들을 만드는 기능을 위임합니다. 권한있는 코드가 &lt;code&gt;Lookup&lt;/code&gt; 개체를 사용하더라도 액세스 검사는 원래 조회 클래스의 권한으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="638ae617b2818d2f9f7783f4b29ead82b402514c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ManagedBlocker&lt;/code&gt; provides two methods. Method &lt;a href=&quot;#isReleasable()&quot;&gt;&lt;code&gt;isReleasable()&lt;/code&gt;&lt;/a&gt; must return &lt;code&gt;true&lt;/code&gt; if blocking is not necessary. Method &lt;a href=&quot;#block()&quot;&gt;&lt;code&gt;block()&lt;/code&gt;&lt;/a&gt; blocks the current thread if necessary (perhaps internally invoking &lt;code&gt;isReleasable&lt;/code&gt; before actually blocking). These actions are performed by any thread invoking &lt;a href=&quot;forkjoinpool#managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)&quot;&gt;&lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt;&lt;/a&gt;. The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method &lt;code&gt;isReleasable&lt;/code&gt; must be amenable to repeated invocation.</source>
          <target state="translated">&lt;code&gt;ManagedBlocker&lt;/code&gt; 는 두 가지 방법을 제공합니다. 차단이 필요하지 않은 경우 &lt;a href=&quot;#isReleasable()&quot;&gt; &lt;code&gt;isReleasable()&lt;/code&gt; &lt;/a&gt; 메서드 는 &lt;code&gt;true&lt;/code&gt; 를 반환해야합니다 . &lt;a href=&quot;#block()&quot;&gt; &lt;code&gt;block()&lt;/code&gt; &lt;/a&gt; 메서드는 필요한 경우 현재 스레드를 차단합니다 ( 실제로 차단하기 전에 내부적으로 &lt;code&gt;isReleasable&lt;/code&gt; 을 호출 할 수 있음 ). 이러한 작업은 &lt;a href=&quot;forkjoinpool#managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)&quot;&gt; &lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt; &lt;/a&gt; 호출하는 스레드에 의해 수행됩니다 . 이 API의 비정상적인 메서드는 오랫동안 차단할 수 있지만 일반적으로 차단하지 않는 동기화기를 수용합니다. 마찬가지로, 충분한 병렬 처리를 보장하기 위해 추가 작업자가 필요할 수 있지만 일반적으로 필요하지 않은 경우를보다 효율적으로 내부 처리 할 수 ​​있습니다. 이를 위해 메서드 구현은 &lt;code&gt;isReleasable&lt;/code&gt; 반복 된 호출에 순응 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="41de0ba43f16a90c262039e2bd1814b41250f82c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ManagedBlocker&lt;/code&gt; provides two methods. Method &lt;a href=&quot;forkjoinpool.managedblocker#isReleasable--&quot;&gt;&lt;code&gt;isReleasable()&lt;/code&gt;&lt;/a&gt; must return &lt;code&gt;true&lt;/code&gt; if blocking is not necessary. Method &lt;a href=&quot;forkjoinpool.managedblocker#block--&quot;&gt;&lt;code&gt;block()&lt;/code&gt;&lt;/a&gt; blocks the current thread if necessary (perhaps internally invoking &lt;code&gt;isReleasable&lt;/code&gt; before actually blocking). These actions are performed by any thread invoking &lt;a href=&quot;forkjoinpool#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-&quot;&gt;&lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt;&lt;/a&gt;. The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method &lt;code&gt;isReleasable&lt;/code&gt; must be amenable to repeated invocation.</source>
          <target state="translated">&lt;code&gt;ManagedBlocker&lt;/code&gt; 는 두 가지 방법을 제공합니다. 차단이 필요하지 않은 경우 &lt;a href=&quot;forkjoinpool.managedblocker#isReleasable--&quot;&gt; &lt;code&gt;isReleasable()&lt;/code&gt; &lt;/a&gt; 메소드 는 &lt;code&gt;true&lt;/code&gt; 를 리턴해야합니다 . 메소드 &lt;a href=&quot;forkjoinpool.managedblocker#block--&quot;&gt; &lt;code&gt;block()&lt;/code&gt; &lt;/a&gt; 은 필요한 경우 현재 스레드를 차단합니다 ( 실제로 블로킹하기 전에 내부적으로 &lt;code&gt;isReleasable&lt;/code&gt; 을 호출 함 ). 이러한 조치는 &lt;a href=&quot;forkjoinpool#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-&quot;&gt; &lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt; &lt;/a&gt; 호출하는 스레드에 의해 수행됩니다 . 이 API의 특이한 방법은 일반적으로 오랜 기간 동안 차단할 수 있지만 동기화하지 않는 동기화 프로그램을 수용합니다. 마찬가지로, 충분한 병렬 처리를 보장하기 위해 추가 작업자가 필요할 수 있지만 일반적으로 필요하지 않은 경우를보다 효율적으로 내부 처리 할 수 ​​있습니다. 이를 위해 메소드 구현은 &lt;code&gt;isReleasable&lt;/code&gt; 반복적으로 호출 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="5e9cc5dc674a5b0316a5dbf3c9f9cf213ece6f21" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Manifest&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newManifest(java.util.List)&quot;&gt;&lt;code&gt;newManifest&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">&lt;code&gt;Manifest&lt;/code&gt; 인스턴스는 하나의 호출에 의해 생성 될 수있다 &lt;a href=&quot;xmlsignaturefactory#newManifest(java.util.List)&quot;&gt; &lt;code&gt;newManifest&lt;/code&gt; &lt;/a&gt; 의 방법 &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; 클래스; 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="ccb5483368ce702117255c40bb64a3c638ac6959" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is reconstructed as a &lt;code&gt;java.util.HashMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.TreeMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;K는&lt;/em&gt; , &lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; A와 재구성 &lt;code&gt;java.util.HashMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; ; &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; A와 &lt;code&gt;java.util.TreeMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34d9d6e43d15d27f890e53136a47ea22621edffc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;
      SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, for example &lt;code&gt;
      Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt;, has Open Type &lt;a href=&quot;openmbean/tabulartype&quot;&gt;&lt;code&gt;TabularType&lt;/code&gt;&lt;/a&gt; and is mapped to a &lt;a href=&quot;openmbean/tabulardata&quot;&gt;&lt;code&gt;TabularData&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TabularType&lt;/code&gt; has two items called &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. The Open Type of &lt;code&gt;key&lt;/code&gt; is &lt;em&gt;opentype(K)&lt;/em&gt;, and the Open Type of &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;opentype(V)&lt;/em&gt;. The index of the &lt;code&gt;TabularType&lt;/code&gt; is the single item &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt; SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V는 &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 예를 들어 &lt;code&gt; Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt; , 개방형가 &lt;a href=&quot;openmbean/tabulartype&quot;&gt; &lt;code&gt;TabularType&lt;/code&gt; &lt;/a&gt; 하고 매핑됩니다 &lt;a href=&quot;openmbean/tabulardata&quot;&gt; &lt;code&gt;TabularData&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;TabularType&lt;/code&gt; 라는 두 개의 항목이 &lt;code&gt;key&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; . &lt;code&gt;key&lt;/code&gt; 의 Open Type 은 &lt;em&gt;opentype (K)&lt;/em&gt; 이고 &lt;code&gt;value&lt;/code&gt; 의 Open Type 은 &lt;em&gt;opentype (V)&lt;/em&gt; 입니다. &lt;code&gt;TabularType&lt;/code&gt; 의 인덱스 는 단일 항목 &lt;code&gt;key&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a5492d91c797e8ad61ee773f7ff7771cc95b5945" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, for example &lt;code&gt;Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt;, has Open Type &lt;a href=&quot;openmbean/tabulartype&quot;&gt;&lt;code&gt;TabularType&lt;/code&gt;&lt;/a&gt; and is mapped to a &lt;a href=&quot;openmbean/tabulardata&quot;&gt;&lt;code&gt;TabularData&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TabularType&lt;/code&gt; has two items called &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. The Open Type of &lt;code&gt;key&lt;/code&gt; is &lt;em&gt;opentype(K)&lt;/em&gt;, and the Open Type of &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;opentype(V)&lt;/em&gt;. The index of the &lt;code&gt;TabularType&lt;/code&gt; is the single item &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V는 &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 예를 들어 &lt;code&gt;Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt; , 개방형가 &lt;a href=&quot;openmbean/tabulartype&quot;&gt; &lt;code&gt;TabularType&lt;/code&gt; &lt;/a&gt; 하고 매핑됩니다 &lt;a href=&quot;openmbean/tabulardata&quot;&gt; &lt;code&gt;TabularData&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;TabularType&lt;/code&gt; 라는 두 개의 항목이 &lt;code&gt;key&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; . &lt;code&gt;key&lt;/code&gt; 의 열기 유형 은 &lt;em&gt;opentype (K)&lt;/em&gt; 이고 열기 유형의 &lt;code&gt;value&lt;/code&gt; 은 &lt;em&gt;opentype (V)&lt;/em&gt; 입니다. &lt;code&gt;TabularType&lt;/code&gt; 의 인덱스 는 단일 항목 &lt;code&gt;key&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="491fe026154b44bab21540fc1d12cd511ab4f8ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;MarshalException&lt;/code&gt; to get thrown.</source>
          <target state="translated">&lt;code&gt;MarshalException&lt;/code&gt; 이 발생하는 또 다른 throw 가능 객체 : 원인 포함 할 수 있습니다 &lt;code&gt;MarshalException&lt;/code&gt; 를가 던져하기를.</target>
        </trans-unit>
        <trans-unit id="e2bfa32c78e5059bce11c1a8e652de673f8f4c33" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalException&lt;/code&gt; is thrown if a &lt;code&gt;java.io.IOException&lt;/code&gt; occurs while marshalling the remote call header, arguments or return value for a remote method call.</source>
          <target state="translated">&lt;code&gt;MarshalException&lt;/code&gt; 를는 경우 발생되는 &lt;code&gt;java.io.IOException&lt;/code&gt; 원격 메소드 호출에 대한 원격 호출 헤더 인수 나 리턴 값 마샬링하는 동안 발생한다.</target>
        </trans-unit>
        <trans-unit id="6bd9d90b4757239b6c0c4997a903f5d67e33dbf6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalException&lt;/code&gt; is thrown if a &lt;code&gt;java.io.IOException&lt;/code&gt; occurs while marshalling the remote call header, arguments or return value for a remote method call. A &lt;code&gt;MarshalException&lt;/code&gt; is also thrown if the receiver does not support the protocol version of the sender.</source>
          <target state="translated">&lt;code&gt;MarshalException&lt;/code&gt; 를는 경우 발생되는 &lt;code&gt;java.io.IOException&lt;/code&gt; 원격 메소드 호출에 대한 원격 호출 헤더 인수 나 리턴 값 마샬링하는 동안 발생한다. &lt;code&gt;MarshalException&lt;/code&gt; 리시버가 보낸 사람의 프로토콜 버전을 지원하지 않는 경우도 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a93248bdc0454438b648bb944c4e7eceb09fdc67" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalledObject&lt;/code&gt; contains a byte stream with the serialized representation of an object given to its constructor.</source>
          <target state="translated">&lt;code&gt;MarshalledObject&lt;/code&gt; 와는 생성자에게 주어진 객체들의 직렬화 된 표현의 바이트 스트림을 포함한다.</target>
        </trans-unit>
        <trans-unit id="1b6eeb9b8ba22d69fe4c738b2de7f3dcbf5218ae" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalledObject&lt;/code&gt; contains a byte stream with the serialized representation of an object given to its constructor. The &lt;code&gt;get&lt;/code&gt; method returns a new copy of the original object, as deserialized from the contained byte stream. The contained object is serialized and deserialized with the same serialization semantics used for marshaling and unmarshaling parameters and return values of RMI calls: When the serialized form is created:</source>
          <target state="translated">&lt;code&gt;MarshalledObject&lt;/code&gt; 와는 생성자에게 주어진 객체들의 직렬화 된 표현의 바이트 스트림을 포함한다. &lt;code&gt;get&lt;/code&gt; 포함 된 바이트 스트림로부터 직렬화 복원 된 방법은 원본 객체의 새 복사본을 반환합니다. 포함 된 개체는 매개 변수를 마샬링 및 마샬링 해제하고 RMI 호출의 반환 값에 사용되는 동일한 직렬화 의미 체계를 사용하여 직렬화 및 역 직렬화됩니다. 직렬화 된 양식이 생성되는 경우 :</target>
        </trans-unit>
        <trans-unit id="70fad3c3b4f1266ef436d5efdebeba344be477f5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object whose settings have the values required for unlimited precision arithmetic.</source>
          <target state="translated">&lt;code&gt;MathContext&lt;/code&gt; 그 설정 무제한의 정밀도에서의 계산에 필요한 값이 객체입니다.</target>
        </trans-unit>
        <trans-unit id="4e3654abaa9ec0cd85de26194397d568c17a1dc7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object whose settings have the values required for unlimited precision arithmetic. The values of the settings are: &lt;code&gt;
  precision=0 roundingMode=HALF_UP
  &lt;/code&gt;</source>
          <target state="translated">무제한 정밀도 산술에 필요한 값을 설정 한 &lt;code&gt;MathContext&lt;/code&gt; 객체. 설정 값은 &lt;code&gt; precision=0 roundingMode=HALF_UP &lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="96c1e909740c6811a0d1efdeffb1ff302e2bb931" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal128 format, 34 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">&lt;code&gt;MathContext&lt;/code&gt; IEEE 754R Decimal28 형식, 34 자리수, 반올림 모드의 매칭 정밀도가 설정된 오브젝트 &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; &lt;/a&gt; 상기 IEEE 754R 기본값.</target>
        </trans-unit>
        <trans-unit id="5c1e77d0a3347653dcee6a8b1f11bee4a66d44be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal32 format, 7 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">&lt;code&gt;MathContext&lt;/code&gt; IEEE 754R Decimal32 형식, 7 자리 숫자, 그리고 라운딩 모드와 일치하는 정밀도가 설정된 객체 &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; &lt;/a&gt; 의 IEEE 754R의 기본.</target>
        </trans-unit>
        <trans-unit id="b4edaafe90086d392d090849cc8b67e7f5445efa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal64 format, 16 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">&lt;code&gt;MathContext&lt;/code&gt; IEEE 754R Decimal64 형식, 16 자리, 그리고 라운딩 모드와 일치하는 정밀도가 설정된 객체 &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; &lt;/a&gt; 의 IEEE 754R의 기본.</target>
        </trans-unit>
        <trans-unit id="d9677ef7cd01bbfe977031fa93ccb1eb8392aa7b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Media&lt;/code&gt; object is constructed with a value which represents one of the ways in which the Media attribute can be specified.</source>
          <target state="translated">&lt;code&gt;Media&lt;/code&gt; 객체가 미디어 속성이 지정 될 수있는 방법 중 하나를 나타내는 값으로 구성된다.</target>
        </trans-unit>
        <trans-unit id="606f930b55bbce0493e70e26368aa5b13a7f4fca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object contains four values:</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; 객체는 네 개의 값을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="fa4d939f81165b50263fcede0b6dfe1f34749207" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object represents a snapshot of memory usage.</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; 객체는 메모리 사용량의 스냅 샷을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="78b89506999de34adc0eab3d85d54befd68853ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object represents a snapshot of memory usage. Instances of the &lt;code&gt;MemoryUsage&lt;/code&gt; class are usually constructed by methods that are used to obtain memory usage information about individual memory pool of the Java virtual machine or the heap or non-heap memory of the Java virtual machine as a whole.</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; 객체는 메모리 사용량의 스냅 샷을 나타냅니다. &lt;code&gt;MemoryUsage&lt;/code&gt; 클래스의 인스턴스 는 일반적으로 Java 가상 머신의 개별 메모리 풀 또는 Java 가상 머신의 힙 또는 힙이 아닌 메모리에 대한 메모리 사용량 정보를 얻는 데 사용되는 메소드로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="2878636561e8e5d31d7c4ea4ddce32490944eca3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Menu&lt;/code&gt; object is a pull-down menu component that is deployed from a menu bar.</source>
          <target state="translated">&lt;code&gt;Menu&lt;/code&gt; 객체는 도구 모음으로부터 전개되는 풀다운 메뉴 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="a97fd72ec727d747337194ffbf451d3f7cf10cc8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Messager&lt;/code&gt; provides the way for an annotation processor to report error messages, warnings, and other notices.</source>
          <target state="translated">&lt;code&gt;Messager&lt;/code&gt; 보고서의 오류 메시지, 경고 및 기타 사항에 대한 주석 프로세서에 대한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8b5521c29051dc916ca552f3e4107d413e2197a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Messager&lt;/code&gt; provides the way for an annotation processor to report error messages, warnings, and other notices. Elements, annotations, and annotation values can be passed to provide a location hint for the message. However, such location hints may be unavailable or only approximate.</source>
          <target state="translated">&lt;code&gt;Messager&lt;/code&gt; 보고서의 오류 메시지, 경고 및 기타 사항에 대한 주석 프로세서에 대한 방법을 제공합니다. 메시지의 위치 힌트를 제공하기 위해 요소, 주석 및 주석 값을 전달할 수 있습니다. 그러나 이러한 위치 힌트를 사용할 수 없거나 대략적인 것일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a28ba9d7e8182d497600748bf3e7d346a35f0fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program.</source>
          <target state="translated">&lt;code&gt;MetaMessage&lt;/code&gt; 의는 A는 &lt;a href=&quot;midimessage&quot;&gt; &lt;code&gt;MidiMessage&lt;/code&gt; 를&lt;/a&gt; 신디사이저에 있어서는 의미가 없습니다 만, MIDI 파일에 격납 된 시퀀서 프로그램에 의해 해석 될 수있다.</target>
        </trans-unit>
        <trans-unit id="2776880490c670eb8356fedbda3e278ca4cac50a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program. (See the discussion in the &lt;code&gt;MidiMessage&lt;/code&gt; class description.) The Standard MIDI Files specification defines various types of meta-events, such as sequence number, lyric, cue point, and set tempo. There are also meta-events for such information as lyrics, copyrights, tempo indications, time and key signatures, markers, etc. For more information, see the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed Specification published by the MIDI Manufacturer's Association (&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;MetaMessage&lt;/code&gt; 의는 A는 &lt;a href=&quot;midimessage&quot;&gt; &lt;code&gt;MidiMessage&lt;/code&gt; 를&lt;/a&gt; 신디사이저에 있어서는 의미가 없습니다 만, MIDI 파일에 격납 된 시퀀서 프로그램에 의해 해석 될 수있다. ( &lt;code&gt;MidiMessage&lt;/code&gt; 클래스 설명의 설명을 참조하십시오 .) 표준 MIDI 파일 사양은 시퀀스 번호, 가사, 큐 포인트 및 세트 템포와 같은 다양한 유형의 메타 이벤트를 정의합니다. 가사, 저작권, 템포 표시, 박자 및 조표, 마커 등과 같은 정보에 대한 메타 이벤트도 있습니다. 자세한 내용은에서 발행 한 Complete MIDI 1.0 Detailed Specification의 일부인 Standard MIDI Files 1.0 사양을 참조하십시오. MIDI 제조업체 협회 ( &lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1ad837bf3e31c7b5b47588b5b301ff6b6f388b32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program.</source>
          <target state="translated">&lt;code&gt;MetaMessage&lt;/code&gt; 의는 A는 &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를 신디사이저에 있어서는 의미가 없습니다 만, MIDI 파일에 격납 된 시퀀서 프로그램에 의해 해석 될 수있다.</target>
        </trans-unit>
        <trans-unit id="6411c04f2592f16b41f8ac78ab0fe3af9c44008b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program. (See the discussion in the &lt;code&gt;MidiMessage&lt;/code&gt; class description.) The Standard MIDI Files specification defines various types of meta-events, such as sequence number, lyric, cue point, and set tempo. There are also meta-events for such information as lyrics, copyrights, tempo indications, time and key signatures, markers, etc. For more information, see the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed Specification published by the MIDI Manufacturer's Association (&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;MetaMessage&lt;/code&gt; 의는 A는 &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를 신디사이저에 있어서는 의미가 없습니다 만, MIDI 파일에 격납 된 시퀀서 프로그램에 의해 해석 될 수있다. 표준 MIDI 파일 사양은 시퀀스 번호, 가사, 큐 포인트 및 설정 템포와 같은 다양한 유형의 메타 이벤트를 정의 합니다 ( &lt;code&gt;MidiMessage&lt;/code&gt; 클래스 설명 참조 ). 가사, 저작권, 템포 표시, 시간 및 키 서명, 마커 등과 같은 정보에 대한 메타 이벤트도 있습니다. 자세한 내용은에 의해 출판 된 Complete MIDI 1.0 Detailed Specification의 일부인 Standard MIDI Files 1.0 사양을 참조하십시오. MIDI 제조업체 협회 ( &lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="b1556bc39acc4a33d83d3058b0e35d9fe2b1eecd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; permits widening conversions to occur when matching the actual parameters to invoke with the underlying method's formal parameters, but it throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if a narrowing conversion would occur.</source>
          <target state="translated">&lt;code&gt;Method&lt;/code&gt; 기본 메소드의 형식 매개 변수와 함께 호출하는 실제 매개 변수와 일치하는 경우에, 확장 변환이 발생하는 것을 허가하지만, 그것은 발생 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 축소 변환이 발생하는 경우.</target>
        </trans-unit>
        <trans-unit id="2661b86b675a199266968a6e45d097d08b2ed1b8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; provides information about, and access to, a single method on a class or interface.</source>
          <target state="translated">&lt;code&gt;Method&lt;/code&gt; 에 대한 정보와 그 액세스, 클래스 또는 인터페이스상의 단일의 메소드를 제공한다.</target>
        </trans-unit>
        <trans-unit id="0b3a1d14a60ca6e1169eb522df600b9e89fb9a7c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; provides information about, and access to, a single method on a class or interface. The reflected method may be a class method or an instance method (including an abstract method).</source>
          <target state="translated">&lt;code&gt;Method&lt;/code&gt; 에 대한 정보와 그 액세스, 클래스 또는 인터페이스상의 단일의 메소드를 제공한다. 반영된 메소드는 클래스 메소드 또는 인스턴스 메소드 (추상 메소드 포함) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db033c5925ad5ebb7b67f81287d933584d91e0cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiChannel&lt;/code&gt; object represents a single MIDI channel.</source>
          <target state="translated">&lt;code&gt;MidiChannel&lt;/code&gt; 객체는 단일의 MIDI 채널을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="deef091e63ec51b5ffcf1c4a7c047cd054eff163" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiChannel&lt;/code&gt; object represents a single MIDI channel. Generally, each &lt;code&gt;MidiChannel&lt;/code&gt; method processes a like-named MIDI &quot;channel voice&quot; or &quot;channel mode&quot; message as defined by the MIDI specification. However, &lt;code&gt;MidiChannel&lt;/code&gt; adds some &quot;get&quot; methods that retrieve the value most recently set by one of the standard MIDI channel messages. Similarly, methods for per-channel solo and mute have been added.</source>
          <target state="translated">&lt;code&gt;MidiChannel&lt;/code&gt; 객체는 단일의 MIDI 채널을 나타냅니다. 일반적으로 각 &lt;code&gt;MidiChannel&lt;/code&gt; 메서드는 MIDI 사양에 정의 된 것과 같은 이름의 MIDI &quot;채널 음성&quot;또는 &quot;채널 모드&quot;메시지를 처리합니다. 그러나 &lt;code&gt;MidiChannel&lt;/code&gt; 은 표준 MIDI 채널 메시지 중 하나에 의해 가장 최근에 설정된 값을 검색하는 &quot;get&quot;메소드를 추가합니다. 마찬가지로, 채널 별 솔로 및 음소거 방법이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="d29f38e3f918da8dc28f11c91b574df75fb3581a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice.Info&lt;/code&gt; object contains assorted data about a &lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;, including its name, the company who created it, and descriptive text.</source>
          <target state="translated">&lt;code&gt;MidiDevice.Info&lt;/code&gt; 의 객체는 약 분류 된 데이터를 포함 &lt;a href=&quot;mididevice&quot;&gt; &lt;code&gt;MidiDevice&lt;/code&gt; 에&lt;/a&gt; 이름, 제작 회사 명, 설명 텍스트 등을.</target>
        </trans-unit>
        <trans-unit id="1f2d3effb9276c4453dfb28467e6bcfc3448d55d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice.Info&lt;/code&gt; object contains assorted data about a &lt;code&gt;&lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;, including its name, the company who created it, and descriptive text.</source>
          <target state="translated">&lt;code&gt;MidiDevice.Info&lt;/code&gt; 의 객체는 약 분류 된 데이터를 포함 &lt;code&gt;&lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 에 이름, 제작 회사 명, 설명 텍스트 등을.</target>
        </trans-unit>
        <trans-unit id="4429461eb7a4efbdf69a4aeb669bf5eced481a98" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be a transmitter or a receiver of MIDI events, or both. Therefore, it can provide &lt;a href=&quot;transmitter&quot;&gt;&lt;code&gt;Transmitter&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; instances (or both). Typically, MIDI IN ports provide transmitters, MIDI OUT ports and synthesizers provide receivers. A Sequencer typically provides transmitters for playback and receivers for recording.</source>
          <target state="translated">&lt;code&gt;MidiDevice&lt;/code&gt; 에는 송신기 또는 MIDI 이벤트, 또는이 둘의 수신기가 될 수 있습니다. 따라서 &lt;a href=&quot;transmitter&quot;&gt; &lt;code&gt;Transmitter&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt; 인스턴스 (또는 둘 다)를 제공 할 수 있습니다 . 일반적으로 MIDI IN 포트는 송신기를 제공하고 MIDI OUT 포트 및 신시사이저는 수신기를 제공합니다. 시퀀서는 일반적으로 재생 용 송신기와 녹음 용 수신기를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="73037143518746bb4920c9fc38dc1c15052002f1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be opened and closed explicitly as well as implicitly. Explicit opening is accomplished by calling &lt;a href=&quot;#open()&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, explicit closing is done by calling &lt;a href=&quot;#close()&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; on the &lt;code&gt;MidiDevice&lt;/code&gt; instance. If an application opens a &lt;code&gt;MidiDevice&lt;/code&gt; explicitly, it has to close it explicitly to free system resources and enable the application to exit cleanly. Implicit opening is done by calling &lt;a href=&quot;midisystem#getReceiver()&quot;&gt;&lt;code&gt;MidiSystem.getReceiver()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;midisystem#getTransmitter()&quot;&gt;&lt;code&gt;MidiSystem.getTransmitter()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;MidiDevice&lt;/code&gt; used by &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; and &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; is implementation-dependent unless the properties &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; and &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; are used (see the description of properties to select default providers in &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;). A &lt;code&gt;MidiDevice&lt;/code&gt; that was opened implicitly, is closed implicitly by closing the &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; that resulted in opening it. If more than one implicitly opening &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; were obtained by the application, the device is closed after the last &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; has been closed. On the other hand, calling &lt;code&gt;getReceiver&lt;/code&gt; or &lt;code&gt;getTransmitter&lt;/code&gt; on the device instance directly does not open the device implicitly. Closing these &lt;code&gt;Transmitter&lt;/code&gt;s and &lt;code&gt;Receiver&lt;/code&gt;s does not close the device implicitly. To use a device with &lt;code&gt;Receiver&lt;/code&gt;s or &lt;code&gt;Transmitter&lt;/code&gt;s obtained this way, the device has to be opened and closed explicitly.</source>
          <target state="translated">&lt;code&gt;MidiDevice&lt;/code&gt; 에는 연하고 암시 적으로뿐만 아니라 명시 적으로 닫을 수 있습니다. 명시 적 열기는 &lt;a href=&quot;#open()&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 을 호출하여 수행되고 명시 적 닫기는 &lt;code&gt;MidiDevice&lt;/code&gt; 인스턴스 에서 &lt;a href=&quot;#close()&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 를 호출하여 수행됩니다 . 응용 프로그램이 &lt;code&gt;MidiDevice&lt;/code&gt; 를 명시 적으로 여는 경우 시스템 리소스를 해제하고 응용 프로그램이 완전히 종료되도록하려면 명시 적으로 닫아야합니다. 암시 적 열기는 &lt;a href=&quot;midisystem#getReceiver()&quot;&gt; &lt;code&gt;MidiSystem.getReceiver()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;midisystem#getTransmitter()&quot;&gt; &lt;code&gt;MidiSystem.getTransmitter()&lt;/code&gt; &lt;/a&gt; 를 호출하여 수행됩니다 . &lt;code&gt;MidiDevice&lt;/code&gt; 에 의해 사용 &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; 및 &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; 는 구현에 의존 등록하지 않는 것입니다 &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; 및 &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; 가 사용됩니다 ( &lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; &lt;/a&gt; 에서 기본 공급자를 선택하는 속성 설명 참조 ). &lt;code&gt;MidiDevice&lt;/code&gt; 에 암시 적으로 개방하고, 개폐함으로써 내재적 폐쇄 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 열어 결과. 응용 프로그램에서 암시 적으로 열리는 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 두 개 이상 가져온 경우 마지막 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 가 닫힌 후 장치가 닫힙니다. 반면에 &lt;code&gt;getReceiver&lt;/code&gt; 또는 &lt;code&gt;getTransmitter&lt;/code&gt; 를 호출하면장치 인스턴스에서 직접 장치를 암시 적으로 열지 않습니다. 이러한 &lt;code&gt;Transmitter&lt;/code&gt; 및 &lt;code&gt;Receiver&lt;/code&gt; 닫아도 장치가 암시 적으로 닫히지는 않습니다. 이 방법으로 얻은 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 와 함께 장치를 사용하려면 장치를 명시 적으로 열고 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="ef1a43b985855c29aef01aad7535cc36a37fca12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be opened and closed explicitly as well as implicitly. Explicit opening is accomplished by calling &lt;a href=&quot;mididevice#open--&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, explicit closing is done by calling &lt;a href=&quot;mididevice#close--&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; on the &lt;code&gt;MidiDevice&lt;/code&gt; instance. If an application opens a &lt;code&gt;MidiDevice&lt;/code&gt; explicitly, it has to close it explicitly to free system resources and enable the application to exit cleanly. Implicit opening is done by calling &lt;a href=&quot;midisystem#getReceiver--&quot;&gt;&lt;code&gt;MidiSystem.getReceiver&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;midisystem#getTransmitter--&quot;&gt;&lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;MidiDevice&lt;/code&gt; used by &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; and &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; is implementation-dependant unless the properties &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; and &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; are used (see the description of properties to select default providers in &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;). A &lt;code&gt;MidiDevice&lt;/code&gt; that was opened implicitly, is closed implicitly by closing the &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; that resulted in opening it. If more than one implicitly opening &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; were obtained by the application, the device is closed after the last &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; has been closed. On the other hand, calling &lt;code&gt;getReceiver&lt;/code&gt; or &lt;code&gt;getTransmitter&lt;/code&gt; on the device instance directly does not open the device implicitly. Closing these &lt;code&gt;Transmitter&lt;/code&gt;s and &lt;code&gt;Receiver&lt;/code&gt;s does not close the device implicitly. To use a device with &lt;code&gt;Receiver&lt;/code&gt;s or &lt;code&gt;Transmitter&lt;/code&gt;s obtained this way, the device has to be opened and closed explicitly.</source>
          <target state="translated">&lt;code&gt;MidiDevice&lt;/code&gt; 에는 연하고 암시 적으로뿐만 아니라 명시 적으로 닫을 수 있습니다. 명시 적 개방은 &lt;a href=&quot;mididevice#open--&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 을 호출하여 수행되며 , 명시 적 폐쇄는 &lt;code&gt;MidiDevice&lt;/code&gt; 인스턴스 에서 &lt;a href=&quot;mididevice#close--&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 를 호출하여 수행됩니다 . 응용 프로그램이 &lt;code&gt;MidiDevice&lt;/code&gt; 를 명시 적으로 여는 경우 시스템 리소스를 비우고 응용 프로그램을 완전히 종료하려면 명시 적으로 닫아야합니다. 암시 적 열기는 &lt;a href=&quot;midisystem#getReceiver--&quot;&gt; &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;midisystem#getTransmitter--&quot;&gt; &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; &lt;/a&gt; 를 호출하여 수행됩니다 . &lt;code&gt;MidiDevice&lt;/code&gt; 에은 에 의해 사용 &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; 및 &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; 및 구현에 의존 등록하지 않는 것입니다 &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; 가 사용됩니다 ( &lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; &lt;/a&gt; 에서 기본 제공자를 선택하기위한 특성 설명 참조 ). &lt;code&gt;MidiDevice&lt;/code&gt; 에 암시 적으로 개방하고, 개폐함으로써 내재적 폐쇄 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 열어 결과. 응용 프로그램에서 둘 이상의 암시 적으로 열린 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 를 얻은 경우 마지막 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 가 닫힌 후 장치가 닫힙니다. 한편, &lt;code&gt;getReceiver&lt;/code&gt; 또는 &lt;code&gt;getTransmitter&lt;/code&gt; 호출장치 인스턴스에서 직접 장치를 암시 적으로 열지 않습니다. 이 &lt;code&gt;Transmitter&lt;/code&gt; 와 닫아도 &lt;code&gt;Receiver&lt;/code&gt; 는 장치를 암시 적으로 닫지 않습니다. 이런 방식으로 얻은 &lt;code&gt;Receiver&lt;/code&gt; 또는 &lt;code&gt;Transmitter&lt;/code&gt; 있는 장치를 사용하려면 장치를 명시 적으로 열고 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="e3efcb5be1434c81f03cbddbaadc4016017d3dd3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; includes a &lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt; object to provide manufacturer information and so on.</source>
          <target state="translated">&lt;code&gt;MidiDevice&lt;/code&gt; 에는 포함 &lt;a href=&quot;mididevice.info&quot;&gt; &lt;code&gt;MidiDevice.Info&lt;/code&gt; 의&lt;/a&gt; 제조자 정보 등을 제공하는 개체를.</target>
        </trans-unit>
        <trans-unit id="7db816b29cf24e8a91f20dcd4cca5fcb5b1278eb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; includes a &lt;code&gt;&lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object to provide manufacturer information and so on.</source>
          <target state="translated">&lt;code&gt;MidiDevice&lt;/code&gt; 에는 포함 &lt;code&gt;&lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의 제조자 정보 등을 제공하는 개체를.</target>
        </trans-unit>
        <trans-unit id="8cc1fd3cea819e030e67804197f469d0190de70a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; is a factory or provider for a particular type of MIDI device.</source>
          <target state="translated">&lt;code&gt;MidiDeviceProvider&lt;/code&gt; 가이 MIDI 장치의 특정 형식에 대한 공장이나 업체입니다.</target>
        </trans-unit>
        <trans-unit id="22c2795e1420ab167287908c52a758f064a0385e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; is a factory or provider for a particular type of MIDI device. This mechanism allows the implementation to determine how resources are managed in the creation and management of a device.</source>
          <target state="translated">&lt;code&gt;MidiDeviceProvider&lt;/code&gt; 가이 MIDI 장치의 특정 형식에 대한 공장이나 업체입니다. 이 메커니즘을 통해 구현은 장치의 생성 및 관리에서 리소스가 관리되는 방식을 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a365e0072adf6018c7a45fe965c77b5ff34f79a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileFormat&lt;/code&gt; object can include a set of properties. A property is a pair of key and value: the key is of type &lt;code&gt;String&lt;/code&gt;, the associated property value is an arbitrary object. Properties specify additional informational meta data (like a author, or copyright). Properties are optional information, and file reader and file writer implementations are not required to provide or recognize properties.</source>
          <target state="translated">&lt;code&gt;MidiFileFormat&lt;/code&gt; 의 객체는 속성 집합을 포함 할 수 있습니다. 속성은 키와 값의 쌍입니다. 키는 &lt;code&gt;String&lt;/code&gt; 유형 이고 관련 속성 값은 임의의 개체입니다. 속성은 작성자 또는 저작권과 같은 추가 정보 메타 데이터를 지정합니다. 등록 정보는 선택적 정보이며 파일 판독기 및 파일 작성기 구현은 등록 정보를 제공하거나 인식 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="02bac295f8f072ec44d74de766e4927dd0a110af" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileFormat&lt;/code&gt; object encapsulates a MIDI file's type, as well as its length and timing information.</source>
          <target state="translated">&lt;code&gt;MidiFileFormat&lt;/code&gt; 의 객체는 MIDI 파일의 형태를 길이 및 타이밍 정보를 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="2b878e15bde87ac507d22902b909939ed90d36be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileReader&lt;/code&gt; supplies MIDI file-reading services.</source>
          <target state="translated">&lt;code&gt;MidiFileReader&lt;/code&gt; 는 MIDI 파일 - 읽기 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="63817d768f0fd5bd135044726715dc91b7d35f1f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileReader&lt;/code&gt; supplies MIDI file-reading services. Classes implementing this interface can parse the format information from one or more types of MIDI file, and can produce a &lt;a href=&quot;../sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; object from files of these types.</source>
          <target state="translated">&lt;code&gt;MidiFileReader&lt;/code&gt; 는 MIDI 파일 - 읽기 서비스를 제공합니다. 이 인터페이스를 구현하는 클래스는 하나 이상의 MIDI 파일 형식에서 형식 정보를 구문 분석하고 이러한 형식의 파일에서 &lt;a href=&quot;../sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt; 객체를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18e0790864146b232d72e058bee3d2f1a5480e47" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileWriter&lt;/code&gt; supplies MIDI file-writing services.</source>
          <target state="translated">&lt;code&gt;MidiFileWriter&lt;/code&gt; 는 MIDI 파일-작성 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="586a7aeb0cbf6524813db1bd1765bcd6b1133f75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileWriter&lt;/code&gt; supplies MIDI file-writing services. Classes that implement this interface can write one or more types of MIDI file from a &lt;a href=&quot;../sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;MidiFileWriter&lt;/code&gt; 는 MIDI 파일-작성 서비스를 제공합니다. 이 인터페이스를 구현하는 클래스는 &lt;a href=&quot;../sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt; 객체 에서 하나 이상의 유형의 MIDI 파일을 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f32314512dc1326f8c653bc76f3a7149e7754f8e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable.</source>
          <target state="translated">&lt;code&gt;MidiUnavailableException&lt;/code&gt; 그것을 사용할 수 없기 때문에 요구 된 MIDI 구성 요소를 열거 나 작성할 수없는 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4da275a041db1ba3738a86b4858e949c177031ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable. This often occurs when a device is in use by another application. More generally, it can occur when there is a finite number of a certain kind of resource that can be used for some purpose, and all of them are already in use (perhaps all by this application). For an example of the latter case, see the &lt;a href=&quot;transmitter#setReceiver(javax.sound.midi.Receiver)&quot;&gt;&lt;code&gt;setReceiver&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Transmitter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MidiUnavailableException&lt;/code&gt; 그것을 사용할 수 없기 때문에 요구 된 MIDI 구성 요소를 열거 나 작성할 수없는 경우에 발생합니다. 다른 응용 프로그램에서 장치를 사용 중일 때 종종 발생합니다. 보다 일반적으로 특정 목적으로 사용할 수있는 특정 종류의 리소스가 한정되어 있고 모두 이미 사용 중일 때 발생할 수 있습니다 (아마도이 ​​응용 프로그램에서 모두). 후자의 경우에 대한 예 는 &lt;code&gt;Transmitter&lt;/code&gt; 의 &lt;a href=&quot;transmitter#setReceiver(javax.sound.midi.Receiver)&quot;&gt; &lt;code&gt;setReceiver&lt;/code&gt; &lt;/a&gt; 메소드를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b7c94d4d663e27a735bb120381a0efbe34ba5992" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable. This often occurs when a device is in use by another application. More generally, it can occur when there is a finite number of a certain kind of resource that can be used for some purpose, and all of them are already in use (perhaps all by this application). For an example of the latter case, see the &lt;a href=&quot;transmitter#setReceiver-javax.sound.midi.Receiver-&quot;&gt;&lt;code&gt;setReceiver&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Transmitter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MidiUnavailableException&lt;/code&gt; 그것을 사용할 수 없기 때문에 요구 된 MIDI 구성 요소를 열거 나 작성할 수없는 경우에 발생합니다. 다른 응용 프로그램에서 장치를 사용하는 경우 종종 발생합니다. 보다 일반적으로, 특정 목적으로 사용될 수있는 특정 종류의 자원이 유한 한 수이고 모든 자원이 이미 사용 중일 때 발생할 수 있습니다 (아마도이 ​​응용 프로그램에서 모두). 후자의 예 는 &lt;code&gt;Transmitter&lt;/code&gt; 의 &lt;a href=&quot;transmitter#setReceiver-javax.sound.midi.Receiver-&quot;&gt; &lt;code&gt;setReceiver&lt;/code&gt; &lt;/a&gt; 메소드를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7bd6145bc2699f35d65222d486204f21b8e857d2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; can only find one module with a given name. A &lt;code&gt;ModuleFinder&lt;/code&gt; that finds modules in a sequence of directories, for example, will locate the first occurrence of a module of a given name and will ignore other modules of that name that appear in directories later in the sequence.</source>
          <target state="translated">&lt;code&gt;ModuleFinder&lt;/code&gt; 는 단지 주어진 이름을 가진 하나 개의 모듈을 찾을 수 있습니다. &lt;code&gt;ModuleFinder&lt;/code&gt; 디렉토리 시퀀스에서 발견 모듈은, 예를 들어, 특정 이름의 모듈 최초로 출현 찾은 것 이상 서열의 디렉토리에 나타나는 이름의 다른 모듈을 무시할 것이다.</target>
        </trans-unit>
        <trans-unit id="151cc912e1882e06ada7b55608da3ce2c84a450c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; is not required to be thread safe.</source>
          <target state="translated">&lt;code&gt;ModuleFinder&lt;/code&gt; 는 스레드 안전을 위해 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="520a6bd5f2753ba51b6f22de28a264c06618cd0c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; provides a consistent view of the modules that it locates. If &lt;a href=&quot;#findAll()&quot;&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/a&gt; is invoked several times then it will return the same (equals) result each time. For each &lt;code&gt;
 ModuleReference&lt;/code&gt; element in the returned set then it is guaranteed that &lt;a href=&quot;#find(java.lang.String)&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; will locate the &lt;code&gt;ModuleReference&lt;/code&gt; if invoked to find that module.</source>
          <target state="translated">&lt;code&gt;ModuleFinder&lt;/code&gt; 는 그것을 찾아 모듈의 일관된보기를 제공합니다. &lt;a href=&quot;#findAll()&quot;&gt; &lt;code&gt;findAll&lt;/code&gt; &lt;/a&gt; 이 여러 번 호출 되면 매번 동일한 (같음) 결과를 반환합니다. 반환 된 집합의 각 &lt;code&gt; ModuleReference&lt;/code&gt; 요소에 대해 &lt;a href=&quot;#find(java.lang.String)&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; 가 해당 모듈을 찾기 위해 호출 된 경우 &lt;code&gt;ModuleReference&lt;/code&gt; 를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="97b1937e314095f2bf769efa2e7a74f81112e13c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; provides a consistent view of the modules that it locates. If &lt;code&gt;find&lt;/code&gt; is invoked several times to locate the same module (by name) then it will return the same result each time. If a module is located then it is guaranteed to be a member of the set of modules returned by the &lt;a href=&quot;#findAll()&quot;&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;ModuleFinder&lt;/code&gt; 는 그것을 찾아 모듈의 일관된보기를 제공합니다. 경우 &lt;code&gt;find&lt;/code&gt; (이름으로) 같은 모듈의 위치를 여러 번 호출 그것은 매 x 같은 결과를 반환합니다. 모듈을 &lt;a href=&quot;#findAll()&quot;&gt; &lt;code&gt;findAll&lt;/code&gt; &lt;/a&gt; 메소드가 반환하는 모듈 집합의 구성원이 됩니다.</target>
        </trans-unit>
        <trans-unit id="de8e7a181646738ad9cf4dd1d0b42aef252a897e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; that composes a sequence of module finders</source>
          <target state="translated">&lt;code&gt;ModuleFinder&lt;/code&gt; 모듈 측정기의 시퀀스를 구성</target>
        </trans-unit>
        <trans-unit id="67f4a0df08a8d45867ab49b2d4ff47b27a22e8a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; that locates modules on the file system</source>
          <target state="translated">&lt;code&gt;ModuleFinder&lt;/code&gt; 파일 시스템에 모듈을 찾습니다</target>
        </trans-unit>
        <trans-unit id="3d0335579dc719decbc51f0f8113cda4f691e6c0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; that locates the system modules</source>
          <target state="translated">&lt;code&gt;ModuleFinder&lt;/code&gt; 시스템 모듈을 찾습니다</target>
        </trans-unit>
        <trans-unit id="b76309464d432cccc5060cc8cb02e6a531a9c67a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleReader&lt;/code&gt; implementation may require permissions to access resources in the module. Consequently the &lt;a href=&quot;#find(java.lang.String)&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#open(java.lang.String)&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#read(java.lang.String)&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#list()&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; methods may throw &lt;code&gt;
 SecurityException&lt;/code&gt; if access is denied by the security manager.</source>
          <target state="translated">&lt;code&gt;ModuleReader&lt;/code&gt; 의 구현은 모듈의 리소스에 액세스 권한을 필요로 할 수있다. 결과적으로 &lt;a href=&quot;#find(java.lang.String)&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#open(java.lang.String)&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#read(java.lang.String)&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#list()&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; 메소드는 보안 관리자가 액세스를 거부하는 경우 &lt;code&gt; SecurityException&lt;/code&gt; 을 발생 시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="af26778fbff6483aeeddbb472619832eb42965da" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleReader&lt;/code&gt; is &lt;a href=&quot;modulereference#open()&quot;&gt;open&lt;/a&gt; upon creation and is closed by invoking the &lt;a href=&quot;#close()&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. Failure to close a module reader may result in a resource leak. The &lt;code&gt;
 try-with-resources&lt;/code&gt; statement provides a useful construct to ensure that module readers are closed.</source>
          <target state="translated">&lt;code&gt;ModuleReader&lt;/code&gt; 는 인 &lt;a href=&quot;modulereference#open()&quot;&gt;오픈&lt;/a&gt; 생성시 상기 호출에 의해 폐쇄되어 &lt;a href=&quot;#close()&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 방법. 모듈 판독기를 닫지 않으면 리소스 누수가 발생할 수 있습니다. &lt;code&gt; try-with-resources&lt;/code&gt; 문은 모듈의 독자가 닫혀 있는지 확인하는 유용한 구조를 제공한다.</target>
        </trans-unit>
        <trans-unit id="3ee49b131945159b783b1e371edebb40a8b5fa3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleReader&lt;/code&gt; to read the module</source>
          <target state="translated">&lt;code&gt;ModuleReader&lt;/code&gt; 는 모듈을 읽어</target>
        </trans-unit>
        <trans-unit id="9543d1e26988d85e148c57ef600ad6d84534e5ca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseEvent&lt;/code&gt; object is also passed to every &lt;code&gt;MouseMotionListener&lt;/code&gt; or &lt;code&gt;MouseMotionAdapter&lt;/code&gt; object which is registered to receive mouse motion events using the component's &lt;code&gt;addMouseMotionListener&lt;/code&gt; method. (&lt;code&gt;MouseMotionAdapter&lt;/code&gt; objects implement the &lt;code&gt;MouseMotionListener&lt;/code&gt; interface.) Each such listener object gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse motion event.</source>
          <target state="translated">또한 &lt;code&gt;MouseEvent&lt;/code&gt; 객체는 구성 요소의 &lt;code&gt;addMouseMotionListener&lt;/code&gt; 메서드를 사용하여 마우스 모션 이벤트를 수신하도록 등록 된 모든 &lt;code&gt;MouseMotionListener&lt;/code&gt; 또는 &lt;code&gt;MouseMotionAdapter&lt;/code&gt; 객체에 전달됩니다 . ( &lt;code&gt;MouseMotionAdapter&lt;/code&gt; 객체는 &lt;code&gt;MouseMotionListener&lt;/code&gt; 인터페이스를 구현합니다 .) 이러한 각 리스너 객체는 마우스 모션 이벤트를 포함 하는 &lt;code&gt;MouseEvent&lt;/code&gt; 를 가져 옵니다.</target>
        </trans-unit>
        <trans-unit id="7042b6b3daa7338343941410c3d6d8af24662b2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseEvent&lt;/code&gt; object is passed to every &lt;code&gt;MouseListener&lt;/code&gt; or &lt;code&gt;MouseAdapter&lt;/code&gt; object which is registered to receive the &quot;interesting&quot; mouse events using the component's &lt;code&gt;addMouseListener&lt;/code&gt; method. (&lt;code&gt;MouseAdapter&lt;/code&gt; objects implement the &lt;code&gt;MouseListener&lt;/code&gt; interface.) Each such listener object gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse event.</source>
          <target state="translated">&lt;code&gt;MouseEvent&lt;/code&gt; 목적은 모든에 전달 &lt;code&gt;MouseListener&lt;/code&gt; 또는 &lt;code&gt;MouseAdapter&lt;/code&gt; 구성 요소의 사용은 &quot;흥미로운&quot;마우스 이벤트를 받도록 등록 된 객체 &lt;code&gt;addMouseListener&lt;/code&gt; 의 방법을. ( &lt;code&gt;MouseAdapter&lt;/code&gt; 객체는 &lt;code&gt;MouseListener&lt;/code&gt; 인터페이스를 구현합니다 .) 이러한 각 리스너 객체는 마우스 이벤트를 포함 하는 &lt;code&gt;MouseEvent&lt;/code&gt; 를 가져 옵니다.</target>
        </trans-unit>
        <trans-unit id="cccb397dcd14457d099ecaa7105d1f34c6f009b5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MouseListener&lt;/code&gt; 개체에 의해 등록되어 &lt;code&gt;addMouseListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ef9a9409a13d087d6ca94c2dd527fd7bcfe8f57" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseMotionListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseMotionListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MouseMotionListener&lt;/code&gt; 개체에 의해 등록되어 &lt;code&gt;addMouseMotionListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa4ce636c398e062ad05ccc33de8832fe91cc03c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseWheelListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseWheelListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MouseWheelListener&lt;/code&gt; 개체에 의해 등록되어 &lt;code&gt;addMouseWheelListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f288774a826422b9a89638b2ddfd02698e03d33c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field.</source>
          <target state="translated">&lt;code&gt;MutableCallSite&lt;/code&gt; 는 A는 &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 그 목표 변수 통상 필드처럼 행동한다.</target>
        </trans-unit>
        <trans-unit id="97bd9615782b9cae8342b464551053132d8a5c9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;MutableCallSite&lt;/code&gt; delegates all calls to the site's current target. The &lt;a href=&quot;callsite#dynamicInvoker()&quot;&gt;dynamic invoker&lt;/a&gt; of a mutable call site also delegates each call to the site's current target.</source>
          <target state="translated">&lt;code&gt;MutableCallSite&lt;/code&gt; 는 A는 &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 그 목표 변수 통상 필드처럼 행동한다. &lt;code&gt;invokedynamic&lt;/code&gt; 명령은 연결 &lt;code&gt;MutableCallSite&lt;/code&gt; 의 대표 사이트의 현재 대상에 대한 모든 호출을. 변경 가능한 호출 사이트 의 &lt;a href=&quot;callsite#dynamicInvoker()&quot;&gt;동적 호출자&lt;/a&gt; 는 또한 각 호출을 사이트의 현재 대상에 위임합니다.</target>
        </trans-unit>
        <trans-unit id="7dbbbebff1a773ccfef19e1f057066dee938b48b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;MutableCallSite&lt;/code&gt; delegates all calls to the site's current target. The &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;dynamic invoker&lt;/a&gt; of a mutable call site also delegates each call to the site's current target.</source>
          <target state="translated">&lt;code&gt;MutableCallSite&lt;/code&gt; 는 A는 &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 그 목표 변수 통상 필드처럼 행동한다. &lt;code&gt;invokedynamic&lt;/code&gt; 명령은 연결 &lt;code&gt;MutableCallSite&lt;/code&gt; 의 대표 사이트의 현재 대상에 대한 모든 호출을. 변경 가능한 호출 사이트 의 &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;동적 호출자&lt;/a&gt; 는 각 호출을 사이트의 현재 대상으로 위임합니다.</target>
        </trans-unit>
        <trans-unit id="ddea2e9580b4e5b08cf0cb2cef7357024c227bdd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Name&lt;/code&gt; parameter passed to any method is owned by the caller. The service provider will not modify the object or keep a reference to it. A &lt;code&gt;ResolveResult&lt;/code&gt; object returned by any method is owned by the caller. The caller may subsequently modify it; the service provider may not.</source>
          <target state="translated">모든 메소드에 전달 된 &lt;code&gt;Name&lt;/code&gt; 매개 변수는 호출자가 소유합니다. 서비스 제공자는 오브젝트를 수정하거나 참조를 유지하지 않습니다. 모든 메소드가 리턴 한 &lt;code&gt;ResolveResult&lt;/code&gt; 오브젝트는 호출자가 소유합니다. 호출자는 나중에이를 수정할 수 있습니다. 서비스 제공 업체는 그렇지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f35879cc18f0c6f1e6c601de043d035821ee29c3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Name&lt;/code&gt; parameter passed to any method of the &lt;code&gt;Context&lt;/code&gt; interface or one of its subinterfaces will not be modified by the service provider. The service provider may keep a reference to it for the duration of the operation, including any enumeration of the method's results and the processing of any referrals generated. The caller should not modify the object during this time. A &lt;code&gt;Name&lt;/code&gt; returned by any such method is owned by the caller. The caller may subsequently modify it; the service provider may not.</source>
          <target state="translated">&lt;code&gt;Context&lt;/code&gt; 인터페이스의 메소드 또는 해당 서브 인터페이스 중 하나에 전달 된 &lt;code&gt;Name&lt;/code&gt; 매개 변수 는 서비스 제공자가 수정하지 않습니다. 서비스 제공자는 방법의 결과 열거 및 생성 된 참조 처리를 포함하여 작업 기간 동안 참조를 유지할 수 있습니다. 이 시간 동안 호출자는 객체를 수정해서는 안됩니다. 이러한 메소드가 리턴 한 &lt;code&gt;Name&lt;/code&gt; 은 호출자가 소유합니다. 호출자는 나중에이를 수정할 수 있습니다. 서비스 제공 업체는 그렇지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1484e0dfd575a64d5fdcfe553e17b7f0c185a086" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the attributes of this node (if it is an &lt;code&gt;Element&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">이 노드의 속성을 포함 하는 &lt;code&gt;NamedNodeMap&lt;/code&gt; ( &lt;code&gt;Element&lt;/code&gt; 인 경우 ) 또는 그렇지 않으면 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a29ed6eaa294500c0f869a620c135ed5c065d755" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the general entities, both external and internal, declared in the DTD.</source>
          <target state="translated">DTD에 선언 된 외부 및 내부 일반 엔티티를 포함 하는 &lt;code&gt;NamedNodeMap&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="00195fef233e2a80558c312ad3d6dba296e81674" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded. For example in:</source>
          <target state="translated">DTD에 선언 된 외부 및 내부 일반 엔티티를 포함 하는 &lt;code&gt;NamedNodeMap&lt;/code&gt; 입니다. 매개 변수 엔티티가 포함되지 않습니다. 중복은 삭제됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="73aa833cac5a7f47b147b0a4d4d4eb73d37289e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the notations declared in the DTD.</source>
          <target state="translated">DTD에 선언 된 표기법을 포함 하는 &lt;code&gt;NamedNodeMap&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c5b840d837bc263d4d3242dc37a8cc6a92576537" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the &lt;code&gt;Notation&lt;/code&gt; interface.</source>
          <target state="translated">DTD에 선언 된 표기법을 포함 하는 &lt;code&gt;NamedNodeMap&lt;/code&gt; 입니다. 중복은 삭제됩니다. 이 맵의 모든 노드는 &lt;code&gt;Notation&lt;/code&gt; 인터페이스 도 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="8473a973a44184ea3d9b6302ea62f682af8b1f55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NavigableMap&lt;/code&gt; may be accessed and traversed in either ascending or descending key order. The &lt;a href=&quot;#descendingMap()&quot;&gt;&lt;code&gt;descendingMap()&lt;/code&gt;&lt;/a&gt; method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods &lt;a href=&quot;#subMap(K,boolean,K,boolean)&quot;&gt;&lt;code&gt;subMap(K, boolean, K, boolean)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#headMap(K,boolean)&quot;&gt;&lt;code&gt;headMap(K, boolean)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#tailMap(K,boolean)&quot;&gt;&lt;code&gt;tailMap(K, boolean)&lt;/code&gt;&lt;/a&gt; differ from the like-named &lt;code&gt;SortedMap&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any &lt;code&gt;NavigableMap&lt;/code&gt; must implement the &lt;code&gt;NavigableMap&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;NavigableMap&lt;/code&gt; 액세스 및 중 하나를 오름차순 또는 내림차순 키 순서로 통과 할 수있다. &lt;a href=&quot;#descendingMap()&quot;&gt; &lt;code&gt;descendingMap()&lt;/code&gt; &lt;/a&gt; 메소드는 모두 반전 관계 및 방향 감각의 방법과지도의 뷰를 반환한다. 오름차순 작업 및보기의 성능은 내림차순 작업 및보기의 성능보다 빠를 수 있습니다. 방법 &lt;a href=&quot;#subMap(K,boolean,K,boolean)&quot;&gt; &lt;code&gt;subMap(K, boolean, K, boolean)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#headMap(K,boolean)&quot;&gt; &lt;code&gt;headMap(K, boolean)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#tailMap(K,boolean)&quot;&gt; &lt;code&gt;tailMap(K, boolean)&lt;/code&gt; &lt;/a&gt; 등 명명 다를 &lt;code&gt;SortedMap&lt;/code&gt; 상한 및 하한은 배타적 대 포함 여부를 기술하는 추가의 인수를받는 방법. &lt;code&gt;NavigableMap&lt;/code&gt; 의 서브맵은 &lt;code&gt;NavigableMap&lt;/code&gt; 인터페이스를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="26ae98ff07d84a581b94b546be70a1c3091b0550" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NavigableMap&lt;/code&gt; may be accessed and traversed in either ascending or descending key order. The &lt;code&gt;descendingMap&lt;/code&gt; method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods &lt;code&gt;subMap&lt;/code&gt;, &lt;code&gt;headMap&lt;/code&gt;, and &lt;code&gt;tailMap&lt;/code&gt; differ from the like-named &lt;code&gt;SortedMap&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any &lt;code&gt;NavigableMap&lt;/code&gt; must implement the &lt;code&gt;NavigableMap&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;NavigableMap&lt;/code&gt; 액세스 및 중 하나를 오름차순 또는 내림차순 키 순서로 통과 할 수있다. &lt;code&gt;descendingMap&lt;/code&gt; 의 방법은 반전 모든 관계형 및 방향 방법의 감각과지도의 뷰를 돌려줍니다. 오름차순 작업 및 뷰의 성능은 내림차순 작업 및 뷰의 성능보다 빠릅니다. 방법 &lt;code&gt;subMap&lt;/code&gt; , &lt;code&gt;headMap&lt;/code&gt; 및 &lt;code&gt;tailMap&lt;/code&gt; 로는 등 명명 다를 &lt;code&gt;SortedMap&lt;/code&gt; 상한 및 하한은 배타적 대 포함 여부를 기술하는 추가의 인수를받는 방법. &lt;code&gt;NavigableMap&lt;/code&gt; 의 서브맵은 &lt;code&gt;NavigableMap&lt;/code&gt; 인터페이스를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3024e348667f5731d8014b894f6d9fe0d9449b55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NavigableSet&lt;/code&gt; may be accessed and traversed in either ascending or descending order. The &lt;a href=&quot;#descendingSet()&quot;&gt;&lt;code&gt;descendingSet()&lt;/code&gt;&lt;/a&gt; method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods &lt;a href=&quot;#pollFirst()&quot;&gt;&lt;code&gt;pollFirst()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pollLast()&quot;&gt;&lt;code&gt;pollLast()&lt;/code&gt;&lt;/a&gt; that return and remove the lowest and highest element, if one exists, else returning &lt;code&gt;null&lt;/code&gt;. Methods &lt;a href=&quot;#subSet(E,boolean,E,boolean)&quot;&gt;&lt;code&gt;subSet(E, boolean, E, boolean)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#headSet(E,boolean)&quot;&gt;&lt;code&gt;headSet(E, boolean)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#tailSet(E,boolean)&quot;&gt;&lt;code&gt;tailSet(E, boolean)&lt;/code&gt;&lt;/a&gt; differ from the like-named &lt;code&gt;SortedSet&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any &lt;code&gt;NavigableSet&lt;/code&gt; must implement the &lt;code&gt;NavigableSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;NavigableSet&lt;/code&gt; 액세스되고 하나 오름차순 또는 내림차순으로 이송 될 수있다. &lt;a href=&quot;#descendingSet()&quot;&gt; &lt;code&gt;descendingSet()&lt;/code&gt; &lt;/a&gt; 메소드는 모두 반전 관계 및 방향 감각의 방법으로 집합의 뷰를 반환한다. 오름차순 작업 및보기의 성능은 내림차순 작업 및보기의 성능보다 빠를 수 있습니다. 이 인터페이스는 또한 방법을 정의 &lt;a href=&quot;#pollFirst()&quot;&gt; &lt;code&gt;pollFirst()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#pollLast()&quot;&gt; &lt;code&gt;pollLast()&lt;/code&gt; &lt;/a&gt; 이 반환 한 다른 반환 존재하는 경우, 최저 및 최고 요소를 제거 &lt;code&gt;null&lt;/code&gt; . &lt;a href=&quot;#subSet(E,boolean,E,boolean)&quot;&gt; &lt;code&gt;subSet(E, boolean, E, boolean)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#headSet(E,boolean)&quot;&gt; &lt;code&gt;headSet(E, boolean)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#tailSet(E,boolean)&quot;&gt; &lt;code&gt;tailSet(E, boolean)&lt;/code&gt; &lt;/a&gt; 메서드 는 같은 이름의 &lt;code&gt;SortedSet&lt;/code&gt; 과 다릅니다.하한과 상한이 포괄적인지 배타적인지를 설명하는 추가 인수를 받아들이는 메서드. &lt;code&gt;NavigableSet&lt;/code&gt; 의 하위 집합은 &lt;code&gt;NavigableSet&lt;/code&gt; 인터페이스를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c66d9145f89916cb5ca92325d0da454b29a1f136" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NetworkInterface&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if there is no network interface with the specified IP address.</source>
          <target state="translated">&lt;code&gt;NetworkInterface&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; 지정된 IP 주소에 네트워크 인터페이스가없는 경우.</target>
        </trans-unit>
        <trans-unit id="79e6780e84690e8bd58f9e8be9004880b83eab6d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NetworkInterface&lt;/code&gt; with the specified name, or &lt;code&gt;null&lt;/code&gt; if there is no network interface with the specified name.</source>
          <target state="translated">지정된 이름 의 &lt;code&gt;NetworkInterface&lt;/code&gt; . 지정된 이름의 네트워크 인터페이스가없는 경우는 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47734803ceb6e3dd1d15a3ef0495e65125bb9572" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NoSuchMechanismException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;NoSuchMechanismException&lt;/code&gt; to get thrown.</source>
          <target state="translated">&lt;code&gt;NoSuchMechanismException&lt;/code&gt; 는 이 발생하는 또 다른 throw 가능 객체 : 원인 포함 할 수 있습니다 &lt;code&gt;NoSuchMechanismException&lt;/code&gt; 이 던져하기를.</target>
        </trans-unit>
        <trans-unit id="22ec30ce1b97673fedafc6ce3a5d02e2fc789696" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine.</source>
          <target state="translated">&lt;code&gt;NoSuchObjectException&lt;/code&gt; 는 시도가 더 이상 원격 가상 머신에 존재하는 객체의 메소드를 호출하려고했을 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a555720718d66c0baeb281fa2e824e7c3a711c3b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine. If a &lt;code&gt;NoSuchObjectException&lt;/code&gt; occurs attempting to invoke a method on a remote object, the call may be retransmitted and still preserve RMI's &quot;at most once&quot; call semantics. A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is also thrown by the method &lt;code&gt;java.rmi.server.RemoteObject.toStub&lt;/code&gt; and by the &lt;code&gt;unexportObject&lt;/code&gt; methods of &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; and</source>
          <target state="translated">&lt;code&gt;NoSuchObjectException&lt;/code&gt; 는 시도가 더 이상 원격 가상 머신에 존재하는 객체의 메소드를 호출하려고했을 경우에 발생합니다. 경우 &lt;code&gt;NoSuchObjectException&lt;/code&gt; 이 리모트 오브젝트의 메소드를 호출하려고 발생, 통화가 재전송 여전히 콜 의미 &quot;일단 최대&quot;RMI의를 보존 할 수있다. &lt;code&gt;NoSuchObjectException&lt;/code&gt; 은 또한 상기 방법에 의해 발생되는 &lt;code&gt;java.rmi.server.RemoteObject.toStub&lt;/code&gt; 및 의해 &lt;code&gt;unexportObject&lt;/code&gt; 의 방법 &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; 및 &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; 클래스 및</target>
        </trans-unit>
        <trans-unit id="78ff662ce60349b988cae8bc43b4f7d139713630" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified &lt;code&gt;nodeName&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if it does not identify any node in this map.</source>
          <target state="translated">지정된 &lt;code&gt;nodeName&lt;/code&gt; 이 있는 &lt;code&gt;Node&lt;/code&gt; (모든 유형의) 또는 이 맵에서 노드를 식별하지 않는 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0d617f4ce51e8d2626e03760aa9fddaca1b90d4a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified local name and namespace URI, or &lt;code&gt;null&lt;/code&gt; if they do not identify any node in this map.</source>
          <target state="translated">지정된 로컬 이름과 네임 스페이스 URI가 있는 &lt;code&gt;Node&lt;/code&gt; (모든 유형) 또는 이 맵에서 노드를 식별하지 않는 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8905f541ed33bf537e53361b7e5249ead89ea651" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node.</source>
          <target state="translated">이 노드의 모든 자식을 포함 하는 &lt;code&gt;NodeList&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9ee22797d9d162e4a5c835020982a08af19e947a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node. If there are no children, this is a &lt;code&gt;NodeList&lt;/code&gt; containing no nodes.</source>
          <target state="translated">이 노드의 모든 자식을 포함 하는 &lt;code&gt;NodeList&lt;/code&gt; 입니다. 자식이 없으면 노드가없는 &lt;code&gt;NodeList&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="78f8655fafea08a38349d6c4b99e445e18f24366" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NotBoundException&lt;/code&gt; is thrown if an attempt is made to lookup or unbind in the registry a name that has no associated binding.</source>
          <target state="translated">&lt;code&gt;NotBoundException&lt;/code&gt; 시도가 레지스트리에없는 바인딩 관련있는 이름을 조회하게 또는 바인딩 해제되어있는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f905cd07907538b4a504bef2446ba3f796141db0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Notation&lt;/code&gt; node does not have any parent.</source>
          <target state="translated">&lt;code&gt;Notation&lt;/code&gt; 노드는 부모가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6fb26775a9fdcc1c3bf7e667ca62b4a0e3847451" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NotificationResult&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NotificationResult&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="499bbbe749d1a8fe35d2d63486ceb566b6f99956" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown if &lt;code&gt;nsContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NullPointerException&lt;/code&gt; 가 있는 경우 발생합니다 &lt;code&gt;nsContext&lt;/code&gt; 가 있다 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7a241740ed76ba1500385e19d2672c53d6568516" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown if &lt;code&gt;resolver&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NullPointerException&lt;/code&gt; 가 있는 경우 발생합니다 &lt;code&gt;resolver&lt;/code&gt; 입니다 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="945c414a6ef8a9eb9ea267fe5c9e9ffbea32a062" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Number&lt;/code&gt; parsed from the string.</source>
          <target state="translated">문자열에서 파싱 된 &lt;code&gt;Number&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="07267f60c29eb956490162424a03b8eaa0ddf249" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Number&lt;/code&gt; parsed from the string. In case of error, returns null.</source>
          <target state="translated">문자열에서 파싱 된 &lt;code&gt;Number&lt;/code&gt; 입니다. 오류가 발생하면 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9f4696afd159bc736f50e3e0bf524a48873d8bd0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NumericShaper.Range&lt;/code&gt; represents a Unicode range of a script having its own decimal digits.</source>
          <target state="translated">&lt;code&gt;NumericShaper.Range&lt;/code&gt; 는 스크립트가 자신의 진수를 갖는 유니 코드 범위를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="56e5b0ad5467779fba265ba1ef5ecb4b612cbe0d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NumericShaper.Range&lt;/code&gt; represents a Unicode range of a script having its own decimal digits. For example, the &lt;a href=&quot;#THAI&quot;&gt;&lt;code&gt;THAI&lt;/code&gt;&lt;/a&gt; range has the Thai digits, THAI DIGIT ZERO (U+0E50) to THAI DIGIT NINE (U+0E59).</source>
          <target state="translated">&lt;code&gt;NumericShaper.Range&lt;/code&gt; 는 스크립트가 자신의 진수를 갖는 유니 코드 범위를 나타냅니다. 예를 들어, &lt;a href=&quot;#THAI&quot;&gt; &lt;code&gt;THAI&lt;/code&gt; &lt;/a&gt; 범위에는 태국 숫자 THAI DIGIT ZERO (U + 0E50) ~ THAI DIGIT NINE (U + 0E59)이 있습니다.</target>
        </trans-unit>
        <trans-unit id="736e9e890567a024806b1d5102a661882d8bb329" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PGPData&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newPGPData(byte%5B%5D)&quot;&gt;&lt;code&gt;newPGPData&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it &lt;code&gt;byte&lt;/code&gt; arrays representing the contents of the PGP public key identifier and/or PGP key material packet, and an optional list of elements from an external namespace.</source>
          <target state="translated">&lt;code&gt;PGPData&lt;/code&gt; 인스턴스들 중 하나를 호출하여 생성 될 수있다 &lt;a href=&quot;keyinfofactory#newPGPData(byte%5B%5D)&quot;&gt; &lt;code&gt;newPGPData&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; 를&lt;/a&gt; 클래스, 그것을 통과 &lt;code&gt;byte&lt;/code&gt; 의 외부 공간에서 PGP 공개 키 식별자 및 / 또는 PGP 키 데이터 패킷, 및 소자의 선택리스트의 내용을 나타내는 배열 .</target>
        </trans-unit>
        <trans-unit id="8a2e68373d50ce1993a491419ed8183f080a7dde" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; for checking the revocation status of certificates with the PKIX algorithm.</source>
          <target state="translated">&lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 가 PKIX 알고리즘과 인증서의 해지 상태를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="79e2a20db8442012e6eb5a55cd86128049dfa98d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The &lt;a href=&quot;#init(boolean)&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation &lt;b&gt;must&lt;/b&gt; override the &lt;a href=&quot;#clone()&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; method if necessary in order to allow a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; to efficiently backtrack and try other paths. In these situations, the &lt;code&gt;CertPathBuilder&lt;/code&gt; is able to restore prior path validation states by restoring the cloned &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 가이 증명서 패스가 연속하는 증명서에 여러 번 호출 할 수있다. 구체적인 하위 클래스는 연속 인증서를 확인하는 데 필요할 수있는 모든 내부 상태를 유지해야합니다. &lt;a href=&quot;#init(boolean)&quot;&gt; &lt;code&gt;init&lt;/code&gt; &lt;/a&gt; 방법은 새로운 증명서 패스가 검사 될 수 있도록 검사의 내부 상태를 초기화하기 위해 사용된다. 상태 저장 구현 &lt;b&gt;은&lt;/b&gt; PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; 가 효율적으로 역 추적하고 다른 경로를 시도 할 수 있도록 필요한 경우 &lt;a href=&quot;#clone()&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt; 메서드를 재정의 &lt;b&gt;해야합니다&lt;/b&gt; . 이러한 상황에서 &lt;code&gt;CertPathBuilder&lt;/code&gt; 는 복제 된 &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 를 복원하여 이전 경로 유효성 검사 상태를 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65b6019c9f6b36bf4a4374f0323b98058d8f83d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The &lt;a href=&quot;pkixcertpathchecker#init-boolean-&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation &lt;b&gt;must&lt;/b&gt; override the &lt;a href=&quot;pkixcertpathchecker#clone--&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; method if necessary in order to allow a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; to efficiently backtrack and try other paths. In these situations, the &lt;code&gt;CertPathBuilder&lt;/code&gt; is able to restore prior path validation states by restoring the cloned &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 가이 증명서 패스가 연속하는 증명서에 여러 번 호출 할 수있다. 구체적인 서브 클래스는 연속적인 인증서를 확인하는 데 필요한 내부 상태를 유지해야합니다. &lt;a href=&quot;pkixcertpathchecker#init-boolean-&quot;&gt; &lt;code&gt;init&lt;/code&gt; &lt;/a&gt; 방법은 새로운 증명서 패스가 검사 될 수 있도록 검사의 내부 상태를 초기화하기 위해 사용된다. PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; 가 효율적으로 역 추적하고 다른 경로를 시도 할 수 &lt;b&gt;있으려면&lt;/b&gt; 필요한 경우 상태 저장 구현 이 &lt;a href=&quot;pkixcertpathchecker#clone--&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt; 메소드를 대체 &lt;b&gt;해야합니다&lt;/b&gt; . 이러한 상황에서 &lt;code&gt;CertPathBuilder&lt;/code&gt; 는 복제 된 &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 를 복원하여 이전 경로 유효성 검사 상태를 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2aa3cb94194902df1ddaeffd50bf581104fa46a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and is a network protocol for determining the status of a certificate. A CRL is a time-stamped list identifying revoked certificates, and RFC 5280 describes an algorithm for determining the revocation status of certificates using CRLs.</source>
          <target state="translated">&lt;code&gt;PKIXRevocationChecker&lt;/code&gt; 는 확인 온라인 인증서 상태 프로토콜 (OCSP) 또는 증명서의 취소리스트 (CRL)와 인증서의 폐기 상태. OCSP는 RFC 2560에 설명되어 있으며 인증서 상태를 결정하기위한 네트워크 프로토콜입니다. CRL은 해지 된 인증서를 식별하는 타임 스탬프 목록이며 RFC 5280은 CRL을 사용하여 인증서의 해지 상태를 결정하는 알고리즘을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="b291c2578ded61f2aca8159ee09dde07c31f0c1d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is obtained by calling the &lt;a href=&quot;certpathvalidator#getRevocationChecker()&quot;&gt;&lt;code&gt;getRevocationChecker&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. Additional parameters and options specific to revocation can be set (by calling the &lt;a href=&quot;#setOcspResponder(java.net.URI)&quot;&gt;&lt;code&gt;setOcspResponder&lt;/code&gt;&lt;/a&gt; method for instance). The &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is added to a &lt;code&gt;PKIXParameters&lt;/code&gt; object using the &lt;a href=&quot;pkixparameters#addCertPathChecker(java.security.cert.PKIXCertPathChecker)&quot;&gt;&lt;code&gt;addCertPathChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pkixparameters#setCertPathCheckers(java.util.List)&quot;&gt;&lt;code&gt;setCertPathCheckers&lt;/code&gt;&lt;/a&gt; method, and then the &lt;code&gt;PKIXParameters&lt;/code&gt; is passed along with the &lt;code&gt;CertPath&lt;/code&gt; to be validated to the &lt;a href=&quot;certpathvalidator#validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)&quot;&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the &lt;a href=&quot;pkixparameters#isRevocationEnabled()&quot;&gt;&lt;code&gt;RevocationEnabled&lt;/code&gt;&lt;/a&gt; flag. Similarly, a &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; may be added to a &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; object for use with a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PKIXRevocationChecker&lt;/code&gt; 는 호출함으로써 얻어지는 &lt;a href=&quot;certpathvalidator#getRevocationChecker()&quot;&gt; &lt;code&gt;getRevocationChecker&lt;/code&gt; 의&lt;/a&gt; PKIX 방법 &lt;code&gt;CertPathValidator&lt;/code&gt; 는이 . 해지와 관련된 추가 매개 변수 및 옵션을 설정할 수 있습니다 ( 예를 들어 &lt;a href=&quot;#setOcspResponder(java.net.URI)&quot;&gt; &lt;code&gt;setOcspResponder&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 ). &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; 는 (A)에 추가 &lt;code&gt;PKIXParameters&lt;/code&gt; 은 USING 객체 &lt;a href=&quot;pkixparameters#addCertPathChecker(java.security.cert.PKIXCertPathChecker)&quot;&gt; &lt;code&gt;addCertPathChecker&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;pkixparameters#setCertPathCheckers(java.util.List)&quot;&gt; &lt;code&gt;setCertPathCheckers&lt;/code&gt; &lt;/a&gt; 방법하고 &lt;code&gt;PKIXParameters&lt;/code&gt; 함께 전달 &lt;code&gt;CertPath&lt;/code&gt; 받는 검증 될 &lt;a href=&quot;certpathvalidator#validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)&quot;&gt; &lt;code&gt;validate&lt;/code&gt; &lt;/a&gt; PKIX 방법 &lt;code&gt;CertPathValidator&lt;/code&gt; . 이러한 방식으로 해지 검사기를 제공하면 &lt;a href=&quot;pkixparameters#isRevocationEnabled()&quot;&gt; &lt;code&gt;RevocationEnabled&lt;/code&gt; &lt;/a&gt; 플래그 설정에 관계없이 해지를 확인하는 데 사용됩니다 . 마찬가지로 PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; 와 함께 사용 하기 위해 &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; 를 &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; 객체에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="968991d1ecee5d9aa89b891f287de7d1a71a88d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is obtained by calling the &lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt;&lt;code&gt;getRevocationChecker&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. Additional parameters and options specific to revocation can be set (by calling the &lt;a href=&quot;pkixrevocationchecker#setOcspResponder-java.net.URI-&quot;&gt;&lt;code&gt;setOcspResponder&lt;/code&gt;&lt;/a&gt; method for instance). The &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is added to a &lt;code&gt;PKIXParameters&lt;/code&gt; object using the &lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt;&lt;code&gt;addCertPathChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt;&lt;code&gt;setCertPathCheckers&lt;/code&gt;&lt;/a&gt; method, and then the &lt;code&gt;PKIXParameters&lt;/code&gt; is passed along with the &lt;code&gt;CertPath&lt;/code&gt; to be validated to the &lt;a href=&quot;certpathvalidator#validate-java.security.cert.CertPath-java.security.cert.CertPathParameters-&quot;&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the &lt;a href=&quot;pkixparameters#isRevocationEnabled--&quot;&gt;&lt;code&gt;RevocationEnabled&lt;/code&gt;&lt;/a&gt; flag. Similarly, a &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; may be added to a &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; object for use with a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PKIXRevocationChecker&lt;/code&gt; 는 호출함으로써 얻어지는 &lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt; &lt;code&gt;getRevocationChecker&lt;/code&gt; 의&lt;/a&gt; PKIX 방법 &lt;code&gt;CertPathValidator&lt;/code&gt; 는이 . 취소와 관련된 추가 매개 변수 및 옵션을 설정할 수 있습니다 (예 : &lt;a href=&quot;pkixrevocationchecker#setOcspResponder-java.net.URI-&quot;&gt; &lt;code&gt;setOcspResponder&lt;/code&gt; &lt;/a&gt; 메소드 호출 ). &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; 는 (A)에 추가 &lt;code&gt;PKIXParameters&lt;/code&gt; 은 USING 객체 &lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt; &lt;code&gt;addCertPathChecker&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt; &lt;code&gt;setCertPathCheckers&lt;/code&gt; &lt;/a&gt; 방법하고 &lt;code&gt;PKIXParameters&lt;/code&gt; 함께 전달 &lt;code&gt;CertPath&lt;/code&gt; 받는 검증 될 &lt;a href=&quot;certpathvalidator#validate-java.security.cert.CertPath-java.security.cert.CertPathParameters-&quot;&gt; &lt;code&gt;validate&lt;/code&gt; &lt;/a&gt; PKIX 방법 &lt;code&gt;CertPathValidator&lt;/code&gt; . 이러한 방식으로 해지 검사기를 제공 할 때 &lt;a href=&quot;pkixparameters#isRevocationEnabled--&quot;&gt; &lt;code&gt;RevocationEnabled&lt;/code&gt; &lt;/a&gt; 플래그 설정과 상관없이 해지를 확인하는 데 사용됩니다 . 유사하게, &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; 는 PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; 와 함께 사용 하기 위해 &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; 객체에 추가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="00344c3e603a69e9d256f9a4aa735572b4874a2f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; automatically defined for classes in a named module has the following properties:</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 자동으로 명명 된 모듈의 클래스 정의에는 다음과 같은 속성이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="27bb430a82bbd3a758f400dee1d01a8df22aa656" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; automatically defined for classes in an unnamed module has the following properties:</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 자동으로 이름이 모듈에서 클래스 정의에는 다음과 같은 속성이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="e6a03132a0dfdf419d31833c7b484cefba6ebaef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; can be obtained with the &lt;a href=&quot;#getPackage(java.lang.String)&quot;&gt;&lt;code&gt;Package.getPackage(String)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;classloader#getDefinedPackage(java.lang.String)&quot;&gt;&lt;code&gt;ClassLoader.getDefinedPackage(String)&lt;/code&gt;&lt;/a&gt; methods. Every &lt;code&gt;Package&lt;/code&gt; defined by a class loader can be obtained with the &lt;a href=&quot;#getPackages()&quot;&gt;&lt;code&gt;Package.getPackages()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;classloader#getDefinedPackages()&quot;&gt;&lt;code&gt;ClassLoader.getDefinedPackages()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 얻을 수있다 &lt;a href=&quot;#getPackage(java.lang.String)&quot;&gt; &lt;code&gt;Package.getPackage(String)&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;classloader#getDefinedPackage(java.lang.String)&quot;&gt; &lt;code&gt;ClassLoader.getDefinedPackage(String)&lt;/code&gt; &lt;/a&gt; 방법. 클래스 로더에 의해 정의 된 모든 &lt;code&gt;Package&lt;/code&gt; 는 &lt;a href=&quot;#getPackages()&quot;&gt; &lt;code&gt;Package.getPackages()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;classloader#getDefinedPackages()&quot;&gt; &lt;code&gt;ClassLoader.getDefinedPackages()&lt;/code&gt; &lt;/a&gt; 메소드 로 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b82d06470574b291a78e5f8f00efe49b58636bfd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; may be explicitly defined with the &lt;a href=&quot;classloader#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)&quot;&gt;&lt;code&gt;ClassLoader.definePackage(String, String, String, String,
 String, String, String, URL)&lt;/code&gt;&lt;/a&gt; method. The caller supplies the specification and implementation titles, versions, and vendors. The caller also indicates whether the package is &lt;a href=&quot;../util/jar/attributes.name#SEALED&quot;&gt;sealed&lt;/a&gt;. If a &lt;code&gt;Package&lt;/code&gt; is not explicitly defined for a run-time package when a class in that run-time package is defined, then a &lt;code&gt;Package&lt;/code&gt; is automatically defined by the class's defining class loader, as follows.</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 명시 적으로 정의 할 수있다 &lt;a href=&quot;classloader#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)&quot;&gt; &lt;code&gt;ClassLoader.definePackage(String, String, String, String, String, String, String, URL)&lt;/code&gt; &lt;/a&gt; 방법. 호출자는 사양 및 구현 제목, 버전 및 공급 업체를 제공합니다. 호출자는 또한 패키지가 &lt;a href=&quot;../util/jar/attributes.name#SEALED&quot;&gt;봉인&lt;/a&gt; 되었는지 여부를 나타냅니다 . 경우 &lt;code&gt;Package&lt;/code&gt; 그 런타임 패키지의 클래스를 정의 할 때 명시 적으로 런타임 패키지 정의되지 않은, 다음 &lt;code&gt;Package&lt;/code&gt; 자동으로 다음, 클래스의 정의 클래스 로더에 의해 정의된다.</target>
        </trans-unit>
        <trans-unit id="f55f6f5c08f5641cc7d5ff85b17db1e9b5d4b93e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Painter&lt;/code&gt; may be created with a type parameter. This type will be expected in the &lt;code&gt;paint&lt;/code&gt; method. For example, you may wish to write a &lt;code&gt;Painter&lt;/code&gt; that only works with subclasses of &lt;a href=&quot;../../java/awt/component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;. In that case, when the &lt;code&gt;Painter&lt;/code&gt; is declared, you may declare that it requires a &lt;code&gt;Component&lt;/code&gt;, allowing the paint method to be type safe. Ex:</source>
          <target state="translated">&lt;code&gt;Painter&lt;/code&gt; 타입 파라미터로 생성 될 수있다. 이 유형은 &lt;code&gt;paint&lt;/code&gt; 방법 에서 예상됩니다 . 예를 들어, &lt;a href=&quot;../../java/awt/component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; 의&lt;/a&gt; 서브 클래스에서만 작동 하는 &lt;code&gt;Painter&lt;/code&gt; 를 작성할 수 있습니다 . 이 경우 &lt;code&gt;Painter&lt;/code&gt; 가 선언 될 때 &lt;code&gt;Component&lt;/code&gt; 가 필요하다고 선언 하여 paint 메서드가 형식에 안전하도록 할 수 있습니다. 전의:</target>
        </trans-unit>
        <trans-unit id="61019145f25d0823b99987b93ef8f19602e98c8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns it's children along the baseline must first decide where the baseline is anchored. The baseline can either be anchored to the top, or anchored to the bottom of the group. That is, the distance between the baseline and the beginning of the group can be a constant distance, or the distance between the end of the group and the baseline can be a constant distance. The possible choices correspond to the &lt;code&gt;BaselineResizeBehavior&lt;/code&gt; constants &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_ASCENT&quot;&gt;&lt;code&gt;CONSTANT_ASCENT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_DESCENT&quot;&gt;&lt;code&gt;CONSTANT_DESCENT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기준선을 따라 자식을 정렬 하는 &lt;code&gt;ParallelGroup&lt;/code&gt; 은 먼저 기준선이 고정되는 위치를 결정해야합니다. 기준선은 상단에 고정하거나 그룹의 하단에 고정 할 수 있습니다. 즉, 기준선과 그룹의 시작 사이의 거리는 일정한 거리가 될 수도 있고, 그룹의 끝과 기준선 사이의 거리는 일정한 거리가 될 수 있습니다. 가능한 선택 사항은 &lt;code&gt;BaselineResizeBehavior&lt;/code&gt; 상수 &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_ASCENT&quot;&gt; &lt;code&gt;CONSTANT_ASCENT&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_DESCENT&quot;&gt; &lt;code&gt;CONSTANT_DESCENT&lt;/code&gt; 에 해당&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="5478336d5f075d5ea8c31c7e9a524970cff7b853" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns it's elements along the baseline is only useful along the vertical axis. If you create a baseline group and use it along the horizontal axis an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown when you ask &lt;code&gt;GroupLayout&lt;/code&gt; for the minimum, preferred or maximum size or attempt to layout the components.</source>
          <target state="translated">기준선을 따라 요소를 정렬 하는 &lt;code&gt;ParallelGroup&lt;/code&gt; 은 수직 축을 따라서 만 유용합니다. 기준 그룹을 생성하고 수평 축을 따라 사용하는 &lt;code&gt;IllegalStateException&lt;/code&gt; &lt;code&gt;GroupLayout&lt;/code&gt; 에 최소, 기본 또는 최대 크기를 요청하거나 구성 요소 레이아웃을 시도 할 때 IllegalStateException 이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="b7875a196205cc0e87611c2a7d7139b12281bbdc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParameterBlock&lt;/code&gt; encapsulates all the information about sources and parameters (Objects) required by a RenderableImageOp, or other classes that process images.</source>
          <target state="translated">&lt;code&gt;ParameterBlock&lt;/code&gt; 프로세스 이미지가 소스와 RenderableImageOp에 필요한 매개 변수 (객체) 또는 다른 클래스에 대한 모든 정보를 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="44d5dff505605889de7a5e58ef3f8444907a95a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Patch&lt;/code&gt; object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded).</source>
          <target state="translated">&lt;code&gt;Patch&lt;/code&gt; 목적은 단일 장비가 저장되는 MIDI 신디사이저에 (적재) 위치를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="2bade130cacfd73a6662dacf0beb86afa67968ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Patch&lt;/code&gt; object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded). Every &lt;code&gt;Instrument&lt;/code&gt; object has its own &lt;code&gt;Patch&lt;/code&gt; object that specifies the memory location into which that instrument should be loaded. The location is specified abstractly by a bank index and a program number (not by any scheme that directly refers to a specific address or offset in RAM). This is a hierarchical indexing scheme: MIDI provides for up to 16384 banks, each of which contains up to 128 program locations. For example, a minimal sort of synthesizer might have only one bank of instruments, and only 32 instruments (programs) in that bank.</source>
          <target state="translated">&lt;code&gt;Patch&lt;/code&gt; 목적은 단일 장비가 저장되는 MIDI 신디사이저에 (적재) 위치를 나타낸다. 모든 &lt;code&gt;Instrument&lt;/code&gt; 객체에는 해당 인스트루먼트를로드 할 메모리 위치를 지정하는 자체 &lt;code&gt;Patch&lt;/code&gt; 객체가 있습니다. 위치는 뱅크 인덱스 및 프로그램 번호 (RAM의 특정 주소 또는 오프셋을 직접 참조하는 스킴이 아님)로 추상적으로 지정됩니다. 이것은 계층 적 인덱싱 방식입니다. MIDI는 최대 16384 개의 뱅크를 제공하며 각 뱅크에는 최대 128 개의 프로그램 위치가 있습니다. 예를 들어, 최소 종류의 신시사이저에는 하나의 인스트루먼트 뱅크 만 있고 해당 뱅크에는 32 개의 인스트루먼트 (프로그램) 만있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="320c0383b6ba27539a9291c5c08457dac6be0ca9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Path&lt;/code&gt; represents a path that is hierarchical and composed of a sequence of directory and file name elements separated by a special separator or delimiter. A &lt;em&gt;root component&lt;/em&gt;, that identifies a file system hierarchy, may also be present. The name element that is &lt;em&gt;farthest&lt;/em&gt; from the root of the directory hierarchy is the name of a file or directory. The other name elements are directory names. A &lt;code&gt;Path&lt;/code&gt; can represent a root, a root and a sequence of names, or simply one or more name elements. A &lt;code&gt;Path&lt;/code&gt; is considered to be an</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 계층 특집 분리기 또는 분리에 의해 분리 된 디렉토리와 파일 이름 요소들의 시퀀스로 구성되는 경로를 나타낸다. &lt;em&gt;루트 구성 요소&lt;/em&gt; , 즉 식별하는 파일 시스템 계층도 존재할 수있다. 디렉토리 계층의 루트에서 &lt;em&gt;가장 먼&lt;/em&gt; 이름 요소 는 파일 또는 디렉토리의 이름입니다. 다른 이름 요소는 디렉토리 이름입니다. &lt;code&gt;Path&lt;/code&gt; 루트, 루트와 이름의 순서, 또는 단순히 하나 이상의 이름 요소를 나타낼 수 있습니다. &lt;code&gt;Path&lt;/code&gt; 을 것으로 간주됩니다</target>
        </trans-unit>
        <trans-unit id="2ce8947d69cb036c7e7e382001791f3427abc1c5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PathIterator&lt;/code&gt; that defines the arc's boundary.</source>
          <target state="translated">호의 경계를 정의 하는 &lt;code&gt;PathIterator&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="02db17db5b91e548f1ad12abac1017180e407cf3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Phaser&lt;/code&gt; may be used instead of a &lt;code&gt;CountDownLatch&lt;/code&gt; to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start all the actions, then deregister, as in:</source>
          <target state="translated">&lt;code&gt;Phaser&lt;/code&gt; 대신에 사용될 수있다 &lt;code&gt;CountDownLatch&lt;/code&gt; 를 당사자 변수 번호를 제공하는 원샷 동작을 제어 할 수 있습니다. 일반적인 관용구는 다음과 같이 처음 등록한 다음 모든 작업을 시작한 다음 등록 취소하도록 설정하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="2e056d8aeb0d2e80640b4c47fd934931fffc6852" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Phaser&lt;/code&gt; may be used instead of a &lt;code&gt;CountDownLatch&lt;/code&gt; to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start the actions, then deregister, as in:</source>
          <target state="translated">&lt;code&gt;Phaser&lt;/code&gt; 대신에 사용될 수있다 &lt;code&gt;CountDownLatch&lt;/code&gt; 를 당사자 변수 번호를 제공하는 원샷 동작을 제어 할 수 있습니다. 일반적인 관용구는 다음과 같이 메소드를 먼저 등록한 다음 작업을 시작한 다음 등록을 취소하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b3726e6cb3f9c91800a6b7315e247de7b538989e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Point2D&lt;/code&gt; object representing the x,y coordinates of the ending point of the arc.</source>
          <target state="translated">&lt;code&gt;Point2D&lt;/code&gt; X를 나타내는 객체, 원호의 종점의 Y 좌표.</target>
        </trans-unit>
        <trans-unit id="7506fe06746a7ab15b3b2c74adc4e3ab1cd96058" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Point2D&lt;/code&gt; object representing the x,y coordinates of the starting point of the arc.</source>
          <target state="translated">&lt;code&gt;Point2D&lt;/code&gt; X를 나타내는 객체 아크의 시작 지점의 y 좌표.</target>
        </trans-unit>
        <trans-unit id="7ba4fc27c0a519f672a4f2b0dd3490e89f4c6ed3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Policy&lt;/code&gt; contains the following information. Note that this example only represents the syntax for the default &lt;code&gt;Policy&lt;/code&gt; implementation. Subclass implementations of this class may implement alternative syntaxes and may retrieve the &lt;code&gt;Policy&lt;/code&gt; from any source such as files, databases, or servers.</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; 다음과 같은 내용을 담고 있습니다. 이 예는 기본 &lt;code&gt;Policy&lt;/code&gt; 구현에 대한 구문 만 나타냅니다 . 이 클래스의 서브 클래스 구현은 대체 구문을 구현할 수 있으며 파일, 데이터베이스 또는 서버와 같은 모든 소스 에서 &lt;code&gt;Policy&lt;/code&gt; 을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c551493ea204607c260d63a76232db5f1422e1c4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Policy&lt;/code&gt; object can be queried for the set of Permissions granted to code running as a &lt;code&gt;Principal&lt;/code&gt; in the following manner:</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; 객체는로 실행 코드에 부여 된 권한의 집합에 대해 조회 할 수 있습니다 &lt;code&gt;Principal&lt;/code&gt; 다음과 같은 방법으로 :</target>
        </trans-unit>
        <trans-unit id="e603fa49d7d9bf4791bd8564e966f88040e4457b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Position&lt;/code&gt; object points at a location between two characters. As the surrounding content is altered, the &lt;code&gt;Position&lt;/code&gt; object adjusts its offset automatically to reflect the changes. If content is inserted or removed before the &lt;code&gt;Position&lt;/code&gt; object's location, then the &lt;code&gt;Position&lt;/code&gt; increments or decrements its offset, respectively, so as to point to the same location. If a portion of the document is removed that contains a &lt;code&gt;Position&lt;/code&gt;'s offset, then the &lt;code&gt;Position&lt;/code&gt;'s offset becomes that of the beginning of the removed region. For example, if a &lt;code&gt;Position&lt;/code&gt; has an offset of 5 and the region 2-10 is removed, then the &lt;code&gt;Position&lt;/code&gt;'s offset becomes 2.</source>
          <target state="translated">&lt;code&gt;Position&lt;/code&gt; 객체는 두 문자 사이의 위치를 가리 킵니다. 주변 콘텐츠가 변경되면 &lt;code&gt;Position&lt;/code&gt; 개체는 변경 사항을 반영하도록 오프셋을 자동으로 조정합니다. 콘텐츠가 삽입되거나 제거되면 전에 &lt;code&gt;Position&lt;/code&gt; 객체의 위치, 그 &lt;code&gt;Position&lt;/code&gt; 증가 또는 감소 오프셋 각각 때문에 동일한 위치에 포인트로서. &lt;code&gt;Position&lt;/code&gt; 의 오프셋 이 포함 된 문서 부분이 제거 되면 &lt;code&gt;Position&lt;/code&gt; 의 오프셋은 제거 된 영역의 시작 부분이됩니다. 예를 들어 &lt;code&gt;Position&lt;/code&gt; 의 오프셋이 5이고 영역 2-10이 제거 된 경우 &lt;code&gt;Position&lt;/code&gt; 의 오프셋은 2가됩니다.</target>
        </trans-unit>
        <trans-unit id="0e6789762086fb624373b893ae1c639a188c341e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Principal&lt;/code&gt; representing an identity used to determine access rights to objects in a file system.</source>
          <target state="translated">&lt;code&gt;Principal&lt;/code&gt; 파일 시스템의 개체에 대한 액세스 권한을 결정하는 데 사용되는 식별자를 나타내는.</target>
        </trans-unit>
        <trans-unit id="6aceb3a2faf95ee9fd58c042971b6d90b1138e41" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt;&lt;code&gt;AttributeSet&lt;/code&gt;&lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;printjobattribute&quot;&gt;&lt;code&gt;PrintJobAttribute&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt;&lt;code&gt;add(Attribute)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt;&lt;code&gt;addAll(AttributeSet)&lt;/code&gt;&lt;/a&gt; operations are respecified below to guarantee this additional invariant.</source>
          <target state="translated">&lt;code&gt;PrintJobAttributeSet&lt;/code&gt; 단지입니다 &lt;a href=&quot;attributeset&quot;&gt; &lt;code&gt;AttributeSet&lt;/code&gt; 에&lt;/a&gt; 그 생성자와 돌연변이의 조작의 모든 속성 값, 즉 것을 추가 불변 보장 &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; 인터페이스의 인스턴스해야 &lt;a href=&quot;printjobattribute&quot;&gt; &lt;code&gt;PrintJobAttribute&lt;/code&gt; 을&lt;/a&gt; . &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt; &lt;code&gt;add(Attribute)&lt;/code&gt; &lt;/a&gt; , 및 &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt; &lt;code&gt;addAll(AttributeSet)&lt;/code&gt; &lt;/a&gt; 작업이 추가 불변을 보장하기 위해 아래 respecified된다.</target>
        </trans-unit>
        <trans-unit id="174cff475cd36fe7b2cdbe06b01da9c527d7b5db" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt;&lt;code&gt;AttributeSet&lt;/code&gt;&lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;printserviceattribute&quot;&gt;&lt;code&gt;PrintServiceAttribute&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt;&lt;code&gt;add(Attribute)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt;&lt;code&gt;addAll(AttributeSet)&lt;/code&gt;&lt;/a&gt; operations are respecified below to guarantee this additional invariant.</source>
          <target state="translated">&lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; 단지입니다 &lt;a href=&quot;attributeset&quot;&gt; &lt;code&gt;AttributeSet&lt;/code&gt; 에&lt;/a&gt; 그 생성자와 돌연변이의 조작의 모든 속성 값, 즉 것을 추가 불변 보장 &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; 인터페이스의 인스턴스해야 &lt;a href=&quot;printserviceattribute&quot;&gt; &lt;code&gt;PrintServiceAttribute&lt;/code&gt; 을&lt;/a&gt; . &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt; &lt;code&gt;add(Attribute)&lt;/code&gt; &lt;/a&gt; , 및 &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt; &lt;code&gt;addAll(AttributeSet)&lt;/code&gt; &lt;/a&gt; 작업이 추가 불변을 보장하기 위해 아래 respecified된다.</target>
        </trans-unit>
        <trans-unit id="6821c066d80c383742f82d9ec454ed8de1bf1b17" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementor is recommended to check for the &lt;code&gt;SecurityManager.checkPrintJobAccess()&lt;/code&gt; to deny access to untrusted code. Following this recommended policy means that untrusted code may not be able to locate any print services. Downloaded applets are the most common example of untrusted code.</source>
          <target state="translated">&lt;code&gt;PrintServiceLookup&lt;/code&gt; 의 구현이 있는지 확인하는 것이 좋습니다 &lt;code&gt;SecurityManager.checkPrintJobAccess()&lt;/code&gt; 신뢰할 수없는 코드에 대한 액세스를 거부합니다. 이 권장 정책을 따르면 신뢰할 수없는 코드는 인쇄 서비스를 찾지 못할 수 있습니다. 다운로드 된 애플릿은 신뢰할 수없는 코드의 가장 일반적인 예입니다.</target>
        </trans-unit>
        <trans-unit id="edc93fd469a7b3a042919a5e86d89ac76d6a2eda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintStream&lt;/code&gt; adds functionality to another output stream, namely the ability to print representations of various data values conveniently.</source>
          <target state="translated">&lt;code&gt;PrintStream&lt;/code&gt; 다른 출력 스트림 편리하게 여러 데이터 값의 표현을 출력에 기능을 추가한다.</target>
        </trans-unit>
        <trans-unit id="9172fc92bd31a6e2c58b2c9e1a5b0568f5d5fe89" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintStream&lt;/code&gt; adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a &lt;code&gt;PrintStream&lt;/code&gt; never throws an &lt;code&gt;IOException&lt;/code&gt;; instead, exceptional situations merely set an internal flag that can be tested via the &lt;code&gt;checkError&lt;/code&gt; method. Optionally, a &lt;code&gt;PrintStream&lt;/code&gt; can be created so as to flush automatically; this means that the &lt;code&gt;flush&lt;/code&gt; method is automatically invoked after a byte array is written, one of the &lt;code&gt;println&lt;/code&gt; methods is invoked, or a newline character or byte (&lt;code&gt;'\n'&lt;/code&gt;) is written.</source>
          <target state="translated">&lt;code&gt;PrintStream&lt;/code&gt; 다른 출력 스트림 편리하게 여러 데이터 값의 표현을 출력에 기능을 추가한다. 다른 두 가지 기능도 제공됩니다. 다른 출력 스트림과 달리 &lt;code&gt;PrintStream&lt;/code&gt; 은 &lt;code&gt;IOException&lt;/code&gt; 을 발생 시키지 않습니다 . 대신 예외 상황은 &lt;code&gt;checkError&lt;/code&gt; 메소드 를 통해 테스트 할 수있는 내부 플래그를 설정하기 만합니다 . 선택적으로, 자동으로 플러시되도록 &lt;code&gt;PrintStream&lt;/code&gt; 을 작성할 수 있습니다. 이것은 바이트 배열이 쓰여지 거나 &lt;code&gt;println&lt;/code&gt; 메소드 중 하나 가 호출되거나 개행 문자 또는 바이트 ( &lt;code&gt;'\n'&lt;/code&gt; )가 작성된 후 &lt;code&gt;flush&lt;/code&gt; 메소드가 자동으로 호출 됨을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="443d2c19443869278d45cf70c4daeb2a90b59332" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Printable(..)&lt;/code&gt; may be set on a &lt;code&gt;PrinterJob&lt;/code&gt;. When the client subsequently initiates printing by calling &lt;code&gt;PrinterJob.print(..)&lt;/code&gt; control</source>
          <target state="translated">&lt;code&gt;Printable(..)&lt;/code&gt; (A)에 설정 될 수 &lt;code&gt;PrinterJob&lt;/code&gt; . 이후에 클라이언트가 &lt;code&gt;PrinterJob.print(..)&lt;/code&gt; 컨트롤 을 호출하여 인쇄를 시작할 때</target>
        </trans-unit>
        <trans-unit id="dead7cff0dd9e0e698d1ea6176c439b087a91d0a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrinterJob&lt;/code&gt; object should be created using the static &lt;a href=&quot;#getPrinterJob()&quot;&gt;&lt;code&gt;getPrinterJob&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;PrinterJob&lt;/code&gt; 에의 목적은 고정하여 생성되어야 &lt;a href=&quot;#getPrinterJob()&quot;&gt; &lt;code&gt;getPrinterJob&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="f86a8fedc1b01e36f3fffe6a84ad30ad6d807042" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Properties&lt;/code&gt; object that contains the name and current value of each of the client info properties supported by the driver.</source>
          <target state="translated">드라이버에서 지원하는 각 클라이언트 정보 속성의 이름과 현재 값을 포함 하는 &lt;code&gt;Properties&lt;/code&gt; 개체입니다.</target>
        </trans-unit>
        <trans-unit id="e5b459beeeccec3e6150676d0f5e6290385f678d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired in response to setting a bound property, e.g. &lt;code&gt;setFont&lt;/code&gt;, &lt;code&gt;setBackground&lt;/code&gt;, or &lt;code&gt;setForeground&lt;/code&gt;. Note that if the current component is inheriting its foreground, background, or font from its container, then no event will be fired in response to a change in the inherited property.</source>
          <target state="translated">&lt;code&gt;PropertyChangeEvent&lt;/code&gt; 바운드 프로퍼티, 예를 들어 설정에 반응 해 트리거됩니다 &lt;code&gt;setFont&lt;/code&gt; , &lt;code&gt;setBackground&lt;/code&gt; 의 , 또는 &lt;code&gt;setForeground&lt;/code&gt; 등을 . 현재 구성 요소가 해당 컨테이너에서 전경, 배경 또는 글꼴을 상속하는 경우 상속 된 속성의 변경에 대한 응답으로 이벤트가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e01cf0c66503370e041abd76e97451d46e517e44" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired whenever a default is changed.</source>
          <target state="translated">&lt;code&gt;PropertyChangeEvent&lt;/code&gt; 디폴트가 변경 될 때마다 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="43af3e934c517c608a5c379e17c1f394d58aea3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PropertyChangeSupport&lt;/code&gt; instance is thread-safe.</source>
          <target state="translated">&lt;code&gt;PropertyChangeSupport&lt;/code&gt; 인스턴스는 스레드 안전합니다.</target>
        </trans-unit>
        <trans-unit id="d53111262efd93277c3a285555a54956749a689a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; bytes, by storing pushed-back bytes in an internal buffer.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; 는 다른 입력 스트림, 즉 푸시 백을 저장함으로써 &quot;푸시 백&quot;또는 &quot;읽지 않음&quot;바이트하는 능력은 내부 버퍼의 바이트에 기능을 추가한다.</target>
        </trans-unit>
        <trans-unit id="7af6908d661fc3df825c5f01de05f00d52da3b63" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; bytes, by storing pushed-back bytes in an internal buffer. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can &quot;unread&quot; it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; 는 다른 입력 스트림, 즉 푸시 백을 저장함으로써 &quot;푸시 백&quot;또는 &quot;읽지 않음&quot;바이트하는 능력은 내부 버퍼의 바이트에 기능을 추가한다. 이것은 코드 조각이 특정 바이트 값으로 구분 된 무제한의 데이터 바이트를 읽는 것이 편리한 상황에서 유용합니다. 종료 바이트를 읽은 후 코드 조각은이를 &quot;읽지 못&quot;할 수 있으므로 입력 스트림에 대한 다음 읽기 작업은 푸시 백 된 바이트를 다시 읽습니다. 예를 들어, 식별자를 구성하는 문자를 나타내는 바이트는 연산자 문자를 나타내는 바이트로 끝날 수 있습니다. 식별자 만 읽는 작업을 수행하는 메서드는 연산자를 볼 때까지 읽은 다음 연산자를 다시 읽어서 다시 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="498529e0c6968af51d25a65d16502b51019d6bb2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; one byte.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; 는 다른 입력 스트림 &quot;푸시 백&quot;또는 &quot;읽지 않음&quot;한 바이트에 기능을 추가한다.</target>
        </trans-unit>
        <trans-unit id="5f514d5e2008c6e74c443994d842ab05a6d27a76" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; one byte. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can &quot;unread&quot; it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; 는 다른 입력 스트림 &quot;푸시 백&quot;또는 &quot;읽지 않음&quot;한 바이트에 기능을 추가한다. 이는 코드 조각이 특정 바이트 값으로 구분 된 무제한의 데이터 바이트를 읽는 것이 편리한 상황에서 유용합니다. 종료 바이트를 읽은 후에는 코드 조각이 &quot;읽지 못&quot;하여 입력 스트림에 대한 다음 읽기 작업이 푸시 된 바이트를 다시 읽습니다. 예를 들어, 식별자를 구성하는 문자를 나타내는 바이트는 연산자 문자를 나타내는 바이트로 끝날 수 있습니다. 작업이 식별자 만 읽어야하는 작업은 연산자를 볼 때까지 읽은 다음 연산자를 다시 읽도록 다시 밀어 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b195ed2afd356225750c7019651fb6c71cb290d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Queue&lt;/code&gt; implementation that extends this class must minimally define a method &lt;a href=&quot;queue#offer(E)&quot;&gt;&lt;code&gt;Queue.offer(E)&lt;/code&gt;&lt;/a&gt; which does not permit insertion of &lt;code&gt;null&lt;/code&gt; elements, along with methods &lt;a href=&quot;queue#peek()&quot;&gt;&lt;code&gt;Queue.peek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;queue#poll()&quot;&gt;&lt;code&gt;Queue.poll()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;collection#size()&quot;&gt;&lt;code&gt;Collection.size()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;collection#iterator()&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt;. Typically, additional methods will be overridden as well. If these requirements cannot be met, consider instead subclassing &lt;a href=&quot;abstractcollection&quot;&gt;&lt;code&gt;AbstractCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스를 확장 하는 &lt;code&gt;Queue&lt;/code&gt; 구현은 &lt;a href=&quot;queue#peek()&quot;&gt; &lt;code&gt;Queue.peek()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;queue#poll()&quot;&gt; &lt;code&gt;Queue.poll()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;collection#size()&quot;&gt; &lt;code&gt;Collection.size()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;collection#iterator()&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt; 메서드와 함께 &lt;code&gt;null&lt;/code&gt; 요소의 삽입을 허용하지 않는 &lt;a href=&quot;queue#offer(E)&quot;&gt; &lt;code&gt;Queue.offer(E)&lt;/code&gt; &lt;/a&gt; 메서드를 최소한 정의해야합니다. .iterator () . 일반적으로 추가 메서드도 재정의됩니다. 이러한 요구 사항을 충족 할 수없는 경우 대신 &lt;a href=&quot;abstractcollection&quot;&gt; &lt;code&gt;AbstractCollection&lt;/code&gt; 의&lt;/a&gt; 하위 클래스를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="58bb4d4e29ec77b52a73e79c2c7ec5fcb02deb1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Queue&lt;/code&gt; implementation that extends this class must minimally define a method &lt;a href=&quot;queue#offer-E-&quot;&gt;&lt;code&gt;Queue.offer(E)&lt;/code&gt;&lt;/a&gt; which does not permit insertion of &lt;code&gt;null&lt;/code&gt; elements, along with methods &lt;a href=&quot;queue#peek--&quot;&gt;&lt;code&gt;Queue.peek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;queue#poll--&quot;&gt;&lt;code&gt;Queue.poll()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;collection#size--&quot;&gt;&lt;code&gt;Collection.size()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;collection#iterator--&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt;. Typically, additional methods will be overridden as well. If these requirements cannot be met, consider instead subclassing &lt;a href=&quot;abstractcollection&quot;&gt;&lt;code&gt;AbstractCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스를 확장 하는 &lt;code&gt;Queue&lt;/code&gt; 구현은 &lt;a href=&quot;queue#peek--&quot;&gt; &lt;code&gt;Queue.peek()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;queue#poll--&quot;&gt; &lt;code&gt;Queue.poll()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;collection#size--&quot;&gt; &lt;code&gt;Collection.size()&lt;/code&gt; &lt;/a&gt; 메소드와 함께 &lt;code&gt;null&lt;/code&gt; 요소 삽입을 허용하지 않는 &lt;a href=&quot;queue#offer-E-&quot;&gt; &lt;code&gt;Queue.offer(E)&lt;/code&gt; &lt;/a&gt; 메소드를 최소한으로 정의해야합니다. 및 &lt;a href=&quot;collection#iterator--&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt; . 일반적으로 추가 방법도 재정의됩니다. 이러한 요구 사항을 충족 할 수 없으면 대신 &lt;a href=&quot;abstractcollection&quot;&gt; &lt;code&gt;AbstractCollection&lt;/code&gt; &lt;/a&gt; 을 서브 클래 싱하십시오 .</target>
        </trans-unit>
        <trans-unit id="def3b6f50120461d8708c238f889d3f9cd108135" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing.</source>
          <target state="translated">&lt;code&gt;ReadWriteLock&lt;/code&gt; 관련된 한 쌍의 유지 &lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt; , 판독 전용 동작 용과 기입 하나씩.</target>
        </trans-unit>
        <trans-unit id="0e09680152da974de7708bd54d72fd93831d1e80" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing. The &lt;a href=&quot;#readLock()&quot;&gt;read lock&lt;/a&gt; may be held simultaneously by multiple reader threads, so long as there are no writers. The &lt;a href=&quot;#writeLock()&quot;&gt;write lock&lt;/a&gt; is exclusive.</source>
          <target state="translated">A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt;, one for read-only operations and one for writing. The &lt;a href=&quot;#readLock()&quot;&gt;read lock&lt;/a&gt; may be held simultaneously by multiple reader threads, so long as there are no writers. The &lt;a href=&quot;#writeLock()&quot;&gt;write lock&lt;/a&gt; is exclusive.</target>
        </trans-unit>
        <trans-unit id="3a5c3d06115aa28aff29d5534c6fc5941725a3a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing. The &lt;a href=&quot;readwritelock#readLock--&quot;&gt;&lt;code&gt;read lock&lt;/code&gt;&lt;/a&gt; may be held simultaneously by multiple reader threads, so long as there are no writers. The &lt;a href=&quot;readwritelock#writeLock--&quot;&gt;&lt;code&gt;write lock&lt;/code&gt;&lt;/a&gt; is exclusive.</source>
          <target state="translated">&lt;code&gt;ReadWriteLock&lt;/code&gt; 관련된 한 쌍의 유지 &lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt; , 판독 전용 동작 용과 기입 하나씩. 그만큼&lt;a href=&quot;readwritelock#readLock--&quot;&gt; &lt;code&gt;read lock&lt;/code&gt; &lt;/a&gt; 라이터가 존재하지 않는 한, 복수의 리더 thread를 동시에 보유 할 수있다. &lt;a href=&quot;readwritelock#writeLock--&quot;&gt; &lt;code&gt;write lock&lt;/code&gt; &lt;/a&gt; 배타적입니다.</target>
        </trans-unit>
        <trans-unit id="a4ba4d2f544963239cdad0d5889d9b75a3868aa7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Readable&lt;/code&gt; is a source of characters.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; 문자의 원천입니다.</target>
        </trans-unit>
        <trans-unit id="96d71823f195cce50e0a0e598590732b249e1579" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Readable&lt;/code&gt; is a source of characters. Characters from a &lt;code&gt;Readable&lt;/code&gt; are made available to callers of the read method via a &lt;a href=&quot;../nio/charbuffer&quot;&gt;&lt;code&gt;CharBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; 문자의 원천입니다. &lt;code&gt;Readable&lt;/code&gt; 있는 문자 는 &lt;a href=&quot;../nio/charbuffer&quot;&gt; &lt;code&gt;CharBuffer&lt;/code&gt; &lt;/a&gt; 를 통해 read 메소드 호출자에게 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="7adc9e5e51403a4efa309a291957fa4c97c0d4d0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output.</target>
        </trans-unit>
        <trans-unit id="3c76c7c5e28bd7a486394b016c5582a809e88117" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output. Common MIDI receivers include synthesizers and MIDI Out ports.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output. Common MIDI receivers include synthesizers and MIDI Out ports.</target>
        </trans-unit>
        <trans-unit id="f19fa51699f4a664e93d7e5f550006586f58badc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output.</source>
          <target state="translated">&lt;code&gt;Receiver&lt;/code&gt; 수신 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를의 개체와 일반적으로 사운드 또는 원시 MIDI 출력을 생성하도록 해석 응답으로서 유용한 일을한다.</target>
        </trans-unit>
        <trans-unit id="c29d462e6a52ab2259a7447d7f75c8ca3d531769" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output. Common MIDI receivers include synthesizers and MIDI Out ports.</source>
          <target state="translated">&lt;code&gt;Receiver&lt;/code&gt; 수신 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를의 개체와 일반적으로 사운드 또는 원시 MIDI 출력을 생성하도록 해석 응답으로서 유용한 일을한다. 일반적인 MIDI 리시버에는 신시사이저 및 MIDI 출력 포트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bb66c2ae6ee8ada24da899deda6a542dac4fcad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rectangle&lt;/code&gt; object's &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are &lt;code&gt;public&lt;/code&gt; fields. The constructors that create a &lt;code&gt;Rectangle&lt;/code&gt;, and the methods that can modify one, do not prevent setting a negative value for width or height.</source>
          <target state="translated">A &lt;code&gt;Rectangle&lt;/code&gt; object's &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are &lt;code&gt;public&lt;/code&gt; fields. The constructors that create a &lt;code&gt;Rectangle&lt;/code&gt; , and the methods that can modify one, do not prevent setting a negative value for width or height.</target>
        </trans-unit>
        <trans-unit id="09e45f5db9320d95c47dec97d00933c57ab8e443" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rectangle&lt;/code&gt; specifies an area in a coordinate space that is enclosed by the &lt;code&gt;Rectangle&lt;/code&gt; object's upper-left point &lt;code&gt;(x,y)&lt;/code&gt; in the coordinate space, its width, and its height.</source>
          <target state="translated">A &lt;code&gt;Rectangle&lt;/code&gt; specifies an area in a coordinate space that is enclosed by the &lt;code&gt;Rectangle&lt;/code&gt; object's upper-left point &lt;code&gt;(x,y)&lt;/code&gt; in the coordinate space, its width, and its height.</target>
        </trans-unit>
        <trans-unit id="f868590cec06b06b083e631f103714d7966ad707" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rectangle&lt;/code&gt; whose width or height is negative has neither location nor dimension along those axes with negative dimensions. Such a &lt;code&gt;Rectangle&lt;/code&gt; is treated as non-existent along those axes. Such a &lt;code&gt;Rectangle&lt;/code&gt; is also empty with respect to containment calculations and methods which test if it contains or intersects a point or rectangle will always return false. Methods which combine such a &lt;code&gt;Rectangle&lt;/code&gt; with a point or rectangle will ignore the &lt;code&gt;Rectangle&lt;/code&gt; entirely in generating the result. If two &lt;code&gt;Rectangle&lt;/code&gt; objects are combined and each has a negative dimension, the result will have at least one negative dimension.</source>
          <target state="translated">A &lt;code&gt;Rectangle&lt;/code&gt; whose width or height is negative has neither location nor dimension along those axes with negative dimensions. Such a &lt;code&gt;Rectangle&lt;/code&gt; is treated as non-existent along those axes. Such a &lt;code&gt;Rectangle&lt;/code&gt; is also empty with respect to containment calculations and methods which test if it contains or intersects a point or rectangle will always return false. Methods which combine such a &lt;code&gt;Rectangle&lt;/code&gt; with a point or rectangle will ignore the &lt;code&gt;Rectangle&lt;/code&gt; entirely in generating the result. If two &lt;code&gt;Rectangle&lt;/code&gt; objects are combined and each has a negative dimension, the result will have at least one negative dimension.</target>
        </trans-unit>
        <trans-unit id="b5b6b7944f45cb077aa26fe53c3e98fdd2d8c61d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReentrantLock&lt;/code&gt; is &lt;em&gt;owned&lt;/em&gt; by the thread last successfully locking, but not yet unlocking it. A thread invoking &lt;code&gt;lock&lt;/code&gt; will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods &lt;a href=&quot;#isHeldByCurrentThread()&quot;&gt;&lt;code&gt;isHeldByCurrentThread()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#getHoldCount()&quot;&gt;&lt;code&gt;getHoldCount()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ReentrantLock&lt;/code&gt; is &lt;em&gt;owned&lt;/em&gt; by the thread last successfully locking, but not yet unlocking it. A thread invoking &lt;code&gt;lock&lt;/code&gt; will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods &lt;a href=&quot;#isHeldByCurrentThread()&quot;&gt; &lt;code&gt;isHeldByCurrentThread()&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#getHoldCount()&quot;&gt; &lt;code&gt;getHoldCount()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a466154e254c73452531856243b05c8548e2667c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReentrantLock&lt;/code&gt; is &lt;em&gt;owned&lt;/em&gt; by the thread last successfully locking, but not yet unlocking it. A thread invoking &lt;code&gt;lock&lt;/code&gt; will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods &lt;a href=&quot;reentrantlock#isHeldByCurrentThread--&quot;&gt;&lt;code&gt;isHeldByCurrentThread()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;reentrantlock#getHoldCount--&quot;&gt;&lt;code&gt;getHoldCount()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ReentrantLock&lt;/code&gt; 와이 됩니다 &lt;em&gt;소유&lt;/em&gt; 마지막으로 성공적으로 잠금하지만 아직 해제하지 않는 스레드. 다른 스레드가 잠금을 소유하지 않으면 &lt;code&gt;lock&lt;/code&gt; 을 호출하는 스레드 가 리턴되어 잠금을 성공적으로 획득합니다. 현재 스레드가 이미 잠금을 소유 한 경우이 메소드는 즉시 리턴합니다. &lt;a href=&quot;reentrantlock#isHeldByCurrentThread--&quot;&gt; &lt;code&gt;isHeldByCurrentThread()&lt;/code&gt; &lt;/a&gt; 메소드 를 사용하여 확인할 수 있습니다. 및 &lt;a href=&quot;reentrantlock#getHoldCount--&quot;&gt; &lt;code&gt;getHoldCount()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f10e17887e5593070207f224b5b3a59f8276fe3d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Ref&lt;/code&gt; object can be stored in the database using the &lt;code&gt;PreparedStatement.setRef&lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;Ref&lt;/code&gt; object can be stored in the database using the &lt;code&gt;PreparedStatement.setRef&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="7a1be5a08da98f67b80c48691f5802cfaa8fadba" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Reference&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod)&quot;&gt;&lt;code&gt;newReference&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">A &lt;code&gt;Reference&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod)&quot;&gt; &lt;code&gt;newReference&lt;/code&gt; &lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; class; for example:</target>
        </trans-unit>
        <trans-unit id="3fdc135bd81bdab338e4afb3857420e914b0195c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Registry&lt;/code&gt; implementation may choose to restrict access to some or all of its methods (for example, methods that mutate the registry's bindings may be restricted to calls originating from the local host). If a &lt;code&gt;Registry&lt;/code&gt; method chooses to deny access for a given invocation, its implementation may throw &lt;a href=&quot;../accessexception&quot;&gt;&lt;code&gt;AccessException&lt;/code&gt;&lt;/a&gt;, which (because it extends &lt;a href=&quot;../remoteexception&quot;&gt;&lt;code&gt;RemoteException&lt;/code&gt;&lt;/a&gt;) will be wrapped in a &lt;a href=&quot;../serverexception&quot;&gt;&lt;code&gt;ServerException&lt;/code&gt;&lt;/a&gt; when caught by a remote client.</source>
          <target state="translated">A &lt;code&gt;Registry&lt;/code&gt; implementation may choose to restrict access to some or all of its methods (for example, methods that mutate the registry's bindings may be restricted to calls originating from the local host). If a &lt;code&gt;Registry&lt;/code&gt; method chooses to deny access for a given invocation, its implementation may throw &lt;a href=&quot;../accessexception&quot;&gt; &lt;code&gt;AccessException&lt;/code&gt; &lt;/a&gt;, which (because it extends &lt;a href=&quot;../remoteexception&quot;&gt; &lt;code&gt;RemoteException&lt;/code&gt; &lt;/a&gt;) will be wrapped in a &lt;a href=&quot;../serverexception&quot;&gt; &lt;code&gt;ServerException&lt;/code&gt; &lt;/a&gt; when caught by a remote client.</target>
        </trans-unit>
        <trans-unit id="c9f9be31f6b2c570638fd587aa515aab5324ec80" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RemoteException&lt;/code&gt; is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call.</source>
          <target state="translated">A &lt;code&gt;RemoteException&lt;/code&gt; is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call.</target>
        </trans-unit>
        <trans-unit id="839e5b3abac606b93773f169161acf83a8a3b493" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RemoteException&lt;/code&gt; is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call. Each method of a remote interface, an interface that extends &lt;code&gt;java.rmi.Remote&lt;/code&gt;, must list &lt;code&gt;RemoteException&lt;/code&gt; in its throws clause.</source>
          <target state="translated">A &lt;code&gt;RemoteException&lt;/code&gt; is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call. Each method of a remote interface, an interface that extends &lt;code&gt;java.rmi.Remote&lt;/code&gt; , must list &lt;code&gt;RemoteException&lt;/code&gt; in its throws clause.</target>
        </trans-unit>
        <trans-unit id="6faecf013e62df9ef640102b4e068feb15415a8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResourceBundle.Control&lt;/code&gt; instance must be thread-safe if it's simultaneously used by multiple threads. &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; does not synchronize to call the &lt;code&gt;ResourceBundle.Control&lt;/code&gt; methods. The default implementations of the methods are thread-safe.</source>
          <target state="translated">여러 스레드에서 동시에 사용 하는 &lt;code&gt;ResourceBundle.Control&lt;/code&gt; 인스턴스는 스레드로부터 안전해야합니다. &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; 은 &lt;code&gt;ResourceBundle.Control&lt;/code&gt; 메소드 를 호출하기 위해 동기화하지 않습니다 . 메소드의 기본 구현은 스레드로부터 안전합니다.</target>
        </trans-unit>
        <trans-unit id="278799dac47bdb1e5dd43e1ae79d07011ec7107d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Result&lt;/code&gt; containing the object's state for binding and the corresponding attributes to be bound; null if the object don't use this factory.</source>
          <target state="translated">ㅏ &lt;code&gt;Result&lt;/code&gt; 바인딩 대상의 상태를 포함하고, 대응하는 속성을 구속하는 단계; 객체가이 팩토리를 사용하지 않는 경우는 null</target>
        </trans-unit>
        <trans-unit id="a2b81ce01a926fddf334a3e3dd43c889d7b6ef26" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResultSet&lt;/code&gt; object is automatically closed when the &lt;code&gt;Statement&lt;/code&gt; object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple results.</source>
          <target state="translated">A &lt;code&gt;ResultSet&lt;/code&gt; object is automatically closed when the &lt;code&gt;Statement&lt;/code&gt; object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple results.</target>
        </trans-unit>
        <trans-unit id="1269551aceff07e982e1aa7dc11633a1585bf491" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResultSet&lt;/code&gt; object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The &lt;code&gt;next&lt;/code&gt; method moves the cursor to the next row, and because it returns &lt;code&gt;false&lt;/code&gt; when there are no more rows in the &lt;code&gt;ResultSet&lt;/code&gt; object, it can be used in a &lt;code&gt;while&lt;/code&gt; loop to iterate through the result set.</source>
          <target state="translated">A &lt;code&gt;ResultSet&lt;/code&gt; object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The &lt;code&gt;next&lt;/code&gt; method moves the cursor to the next row, and because it returns &lt;code&gt;false&lt;/code&gt; when there are no more rows in the &lt;code&gt;ResultSet&lt;/code&gt; object, it can be used in a &lt;code&gt;while&lt;/code&gt; loop to iterate through the result set.</target>
        </trans-unit>
        <trans-unit id="a0b09f6a0f2c58ea2685ec820d4941a9f6308fe9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResultSet&lt;/code&gt; object; each row is a supported client info property</source>
          <target state="translated">A &lt;code&gt;ResultSet&lt;/code&gt; object; each row is a supported client info property</target>
        </trans-unit>
        <trans-unit id="e5992f73179b55bd02b7ba70a2343356434f5001" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RetrievalMethod&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newRetrievalMethod(java.lang.String)&quot;&gt;&lt;code&gt;newRetrievalMethod&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it the URI identifying the location of the KeyInfo, an optional type URI identifying the type of KeyInfo, and an optional list of &lt;a href=&quot;../transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;s; for example:</source>
          <target state="translated">A &lt;code&gt;RetrievalMethod&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newRetrievalMethod(java.lang.String)&quot;&gt; &lt;code&gt;newRetrievalMethod&lt;/code&gt; &lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt; class, and passing it the URI identifying the location of the KeyInfo, an optional type URI identifying the type of KeyInfo, and an optional list of &lt;a href=&quot;../transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;s; for example:</target>
        </trans-unit>
        <trans-unit id="65ba03d2db39091b26c473a97ad70a6088f30b42" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object creates a &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object internally in order to set and retrieve information about its columns.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object creates a &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object internally in order to set and retrieve information about its columns.</target>
        </trans-unit>
        <trans-unit id="35523f0350f58a1b43f5f1ed18cf7e25c00fb33b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data. That &lt;code&gt;ResultSet&lt;/code&gt; object's default fetch direction is set by the &lt;code&gt;Statement&lt;/code&gt; object that created it.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data. That &lt;code&gt;ResultSet&lt;/code&gt; object's default fetch direction is set by the &lt;code&gt;Statement&lt;/code&gt; object that created it.</target>
        </trans-unit>
        <trans-unit id="233e78f8a0df18f6595fe7b4553e59c2f7f22eb2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data. That &lt;code&gt;ResultSet&lt;/code&gt; object's default fetch size is set by the &lt;code&gt;Statement&lt;/code&gt; object that created it.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data. That &lt;code&gt;ResultSet&lt;/code&gt; object's default fetch size is set by the &lt;code&gt;Statement&lt;/code&gt; object that created it.</target>
        </trans-unit>
        <trans-unit id="ebfb40d9306da82896bf76a34239df58062d487b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object is a JavaBeans&amp;trade; component because it has properties and participates in the JavaBeans event notification mechanism. The &lt;code&gt;RowSetListener&lt;/code&gt; interface is implemented by a component that wants to be notified about events that occur to a particular &lt;code&gt;RowSet&lt;/code&gt; object. Such a component registers itself as a listener with a rowset via the &lt;code&gt;RowSet.addRowSetListener&lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object is a JavaBeans&amp;trade; component because it has properties and participates in the JavaBeans event notification mechanism. The &lt;code&gt;RowSetListener&lt;/code&gt; interface is implemented by a component that wants to be notified about events that occur to a particular &lt;code&gt;RowSet&lt;/code&gt; object. Such a component registers itself as a listener with a rowset via the &lt;code&gt;RowSet.addRowSetListener&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="830d058daa7ae6abbfbbea71c3c410a4f2856270" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may be populated with data from an SQL &lt;code&gt;VIEW&lt;/code&gt;. The following constants indicate whether a &lt;code&gt;SyncProvider&lt;/code&gt; object can update data in the table or tables from which the &lt;code&gt;VIEW&lt;/code&gt; was derived.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object may be populated with data from an SQL &lt;code&gt;VIEW&lt;/code&gt; . The following constants indicate whether a &lt;code&gt;SyncProvider&lt;/code&gt; object can update data in the table or tables from which the &lt;code&gt;VIEW&lt;/code&gt; was derived.</target>
        </trans-unit>
        <trans-unit id="e6142e837cc318c749d31fbf09d8617cec525f36" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may make a connection with a data source and maintain that connection throughout its life cycle, in which case it is called a</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object may make a connection with a data source and maintain that connection throughout its life cycle, in which case it is called a</target>
        </trans-unit>
        <trans-unit id="707af84de9b7b68e5ebc3584a61760a2a098f653" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change its setting for the fetch direction.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change its setting for the fetch direction.</target>
        </trans-unit>
        <trans-unit id="6b010452c34608c38c571e31f2ff693f48d6b4b9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change its setting for the fetch size.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change its setting for the fetch size.</target>
        </trans-unit>
        <trans-unit id="0108b9517bbe90dce9032e777e0703638967bf71" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object that implements the &lt;code&gt;RowSetInternal&lt;/code&gt; interface can call on the &lt;code&gt;RowSetReader&lt;/code&gt; object associated with it to populate itself with data. It can also call on the &lt;code&gt;RowSetWriter&lt;/code&gt; object associated with it to write any changes to its rows back to the data source from which it originally got the rows. A rowset that remains connected to its data source does not need to use a reader and writer because it can simply operate on the data source directly.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object that implements the &lt;code&gt;RowSetInternal&lt;/code&gt; interface can call on the &lt;code&gt;RowSetReader&lt;/code&gt; object associated with it to populate itself with data. It can also call on the &lt;code&gt;RowSetWriter&lt;/code&gt; object associated with it to write any changes to its rows back to the data source from which it originally got the rows. A rowset that remains connected to its data source does not need to use a reader and writer because it can simply operate on the data source directly.</target>
        </trans-unit>
        <trans-unit id="54c411c4de012f77914b5e702ec2b2960d6d6b74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object uses these methods internally when it is populated with data from a different &lt;code&gt;ResultSet&lt;/code&gt; object.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; object uses these methods internally when it is populated with data from a different &lt;code&gt;ResultSet&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="49fd81f8a57e315b66135c3c63ce9133ad73f97f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSetFactory&lt;/code&gt; implementation &lt;strong&gt;must&lt;/strong&gt; be provided.</source>
          <target state="translated">A &lt;code&gt;RowSetFactory&lt;/code&gt; implementation &lt;strong&gt;must&lt;/strong&gt; be provided.</target>
        </trans-unit>
        <trans-unit id="7e7bc1293f0b3728a32d4cbb58bc720ecd6c238e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SPIN_BOX&lt;/code&gt; is a simple spinner component and its main use is for simple numbers.</source>
          <target state="translated">A &lt;code&gt;SPIN_BOX&lt;/code&gt; is a simple spinner component and its main use is for simple numbers.</target>
        </trans-unit>
        <trans-unit id="3ea8ba5219610eb2bae35255e8594348e4d58db4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SQLException&lt;/code&gt; will be thrown if &lt;code&gt;identifier&lt;/code&gt; contains any characters invalid in a delimited identifier or the identifier length is invalid for the datasource.</source>
          <target state="translated">A &lt;code&gt;SQLException&lt;/code&gt; will be thrown if &lt;code&gt;identifier&lt;/code&gt; contains any characters invalid in a delimited identifier or the identifier length is invalid for the datasource.</target>
        </trans-unit>
        <trans-unit id="96a2cfd5e8cf4b28163c2ecff3951f3275086377" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SQLPermission&lt;/code&gt; object contains a name (also referred to as a &quot;target name&quot;) but no actions list; there is either a named permission or there is not. The target name is the name of the permission (see below). The naming convention follows the hierarchical property naming convention. In addition, an asterisk may appear at the end of the name, following a &quot;.&quot;, or by itself, to signify a wildcard match. For example: &lt;code&gt;loadLibrary.*&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; signify a wildcard match, while &lt;code&gt;*loadLibrary&lt;/code&gt; and &lt;code&gt;a*b&lt;/code&gt; do not.</source>
          <target state="translated">A &lt;code&gt;SQLPermission&lt;/code&gt; object contains a name (also referred to as a &quot;target name&quot;) but no actions list; there is either a named permission or there is not. The target name is the name of the permission (see below). The naming convention follows the hierarchical property naming convention. In addition, an asterisk may appear at the end of the name, following a &quot;.&quot;, or by itself, to signify a wildcard match. For example: &lt;code&gt;loadLibrary.*&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; signify a wildcard match, while &lt;code&gt;*loadLibrary&lt;/code&gt; and &lt;code&gt;a*b&lt;/code&gt; do not.</target>
        </trans-unit>
        <trans-unit id="13cffffbd34d388f3bda9e47c2411e5450931db5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLEngine&lt;/code&gt; provides a means for establishing secure communication sessions between two peers. &lt;code&gt;SSLEngine&lt;/code&gt; operations typically consume bytes from an input buffer and produce bytes in an output buffer. This class provides operational result values describing the state of the &lt;code&gt;SSLEngine&lt;/code&gt;, including indications of what operations are needed to finish an ongoing handshake. Lastly, it reports the number of bytes consumed and produced as a result of this operation.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 두 피어간에 안전한 통신 세션을 확립하는 수단을 제공합니다. &lt;code&gt;SSLEngine&lt;/code&gt; 오퍼레이션은 일반적으로 입력 버퍼에서 바이트를 소비하고 출력 버퍼에서 바이트를 생성합니다. 이 클래스는 진행중인 핸드 셰이크를 완료하는 데 필요한 조작의 표시를 포함 하여 &lt;code&gt;SSLEngine&lt;/code&gt; 상태를 설명하는 조작 결과 값을 제공합니다 . 마지막으로이 작업의 결과로 소비 및 생성 된 바이트 수를보고합니다.</target>
        </trans-unit>
        <trans-unit id="be5086a8a2a67512afd14b8d89179cdc1c7714b2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLEngine&lt;/code&gt; using this session may generate SSL/TLS packets of any size up to and including the value returned by this method. All &lt;code&gt;SSLEngine&lt;/code&gt; network buffers should be sized at least this large to avoid insufficient space problems when performing &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;unwrap&lt;/code&gt; calls.</source>
          <target state="translated">이 세션을 사용 하는 &lt;code&gt;SSLEngine&lt;/code&gt; 은이 메소드가 리턴 한 값을 포함하여 모든 크기의 SSL / TLS 패킷을 생성 할 수 있습니다. &lt;code&gt;wrap&lt;/code&gt; 및 랩핑 &lt;code&gt;unwrap&lt;/code&gt; 호출을 수행 할 때 공간 문제가 충분하지 않도록 모든 &lt;code&gt;SSLEngine&lt;/code&gt; 네트워크 버퍼의 크기는이 크기 이상이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="e9f67ce9dc7b53b9f6147aebe912ac7694d345ac" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLSessionContext&lt;/code&gt; represents a set of &lt;code&gt;SSLSession&lt;/code&gt;s associated with a single entity.</source>
          <target state="translated">&lt;code&gt;SSLSessionContext&lt;/code&gt; 에가 세트 나타내고 &lt;code&gt;SSLSession&lt;/code&gt; 의 단일 엔티티와 관련한다.</target>
        </trans-unit>
        <trans-unit id="ad116e37518384a6f8fd1b681641d4d1a4337f0d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLSessionContext&lt;/code&gt; represents a set of &lt;code&gt;SSLSession&lt;/code&gt;s associated with a single entity. For example, it could be associated with a server or client who participates in many sessions concurrently.</source>
          <target state="translated">&lt;code&gt;SSLSessionContext&lt;/code&gt; 에가 세트 나타내고 &lt;code&gt;SSLSession&lt;/code&gt; 의 단일 엔티티와 관련한다. 예를 들어, 여러 세션에 동시에 참여하는 서버 또는 클라이언트와 연관 ​​될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d2a0651dbfc4f447ad26fb1ac64513d96122a53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;STATUS_BAR&lt;/code&gt; is an simple component that can contain multiple labels of status information to the user.</source>
          <target state="translated">A &lt;code&gt;STATUS_BAR&lt;/code&gt; is an simple component that can contain multiple labels of status information to the user.</target>
        </trans-unit>
        <trans-unit id="5cb886248ddeb9dfbe863b678ae575818122b820" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SampleModel&lt;/code&gt; that is compatible with this &lt;code&gt;ColorModel&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SampleModel&lt;/code&gt; that is compatible with this &lt;code&gt;ColorModel&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df191139b688447435814cf148062bb1f416f974" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SampleModel&lt;/code&gt; to be used as a prototype.</source>
          <target state="translated">&lt;code&gt;SampleModel&lt;/code&gt; 프로토 타입으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="eb176b2751507777548bce49c3daa1e4bf12d3a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Scanner&lt;/code&gt; breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various &lt;code&gt;next&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;Scanner&lt;/code&gt; 기본적으로 공백 일치하는 구분자 패턴을 사용해 입력을 토큰에 분할합니다. 결과 토큰은 다음을 사용하여 다양한 유형의 값으로 변환 될 수 있습니다. &lt;code&gt;next&lt;/code&gt; 방법을 .</target>
        </trans-unit>
        <trans-unit id="d2ae5d01da91681b0e09f5bf993b02ff3d8c51d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Scanner&lt;/code&gt; is not safe for multithreaded use without external synchronization.</source>
          <target state="translated">&lt;code&gt;Scanner&lt;/code&gt; , 외부의 동기화를 실시하지 않고 multi-thread를 사용하는 것은 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7114063e1218883537734c8807826b78fa2867d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ScriptEngine&lt;/code&gt; created by the factory located in the search. Returns null if no such factory was found. The &lt;code&gt;ScriptEngineManager&lt;/code&gt; sets its own &lt;code&gt;globalScope&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; as the &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; of the newly created &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScriptEngine&lt;/code&gt; 검색에있는 공장에서 만들었습니다. 그러한 팩토리를 찾지 못하면 null을 반환합니다. &lt;code&gt;ScriptEngineManager&lt;/code&gt; 는이 자체 설정 &lt;code&gt;globalScope&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; 은 AS &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; 새로 만든의 &lt;code&gt;ScriptEngine&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6db977adc07c1fec67a733e8feec882a1d25224d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SearchControls&lt;/code&gt; or array object passed as a parameter to any method is owned by the caller. The service provider will not modify the object or keep a reference to it.</source>
          <target state="translated">모든 메소드에 매개 변수로 전달 된 &lt;code&gt;SearchControls&lt;/code&gt; 또는 배열 오브젝트는 호출자가 소유합니다. 서비스 제공자는 오브젝트를 수정하거나 참조를 유지하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4c5a148aab6fdebb2f29c63449a68ab51157e6ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; requires corresponding support from the underlying operating system. Where an implementation supports this features then the &lt;code&gt;DirectoryStream&lt;/code&gt; returned by the &lt;a href=&quot;files#newDirectoryStream(java.nio.file.Path)&quot;&gt;&lt;code&gt;newDirectoryStream&lt;/code&gt;&lt;/a&gt; method will be a &lt;code&gt;SecureDirectoryStream&lt;/code&gt; and must be cast to that type in order to invoke the methods defined by this interface.</source>
          <target state="translated">A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; requires corresponding support from the underlying operating system. Where an implementation supports this features then the &lt;code&gt;DirectoryStream&lt;/code&gt; returned by the &lt;a href=&quot;files#newDirectoryStream(java.nio.file.Path)&quot;&gt; &lt;code&gt;newDirectoryStream&lt;/code&gt; &lt;/a&gt; method will be a &lt;code&gt;SecureDirectoryStream&lt;/code&gt; and must be cast to that type in order to invoke the methods defined by this interface.</target>
        </trans-unit>
        <trans-unit id="a29b101451e61fce98157bb2ee58c4b375379b8a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; requires corresponding support from the underlying operating system. Where an implementation supports this features then the &lt;code&gt;DirectoryStream&lt;/code&gt; returned by the &lt;a href=&quot;files#newDirectoryStream-java.nio.file.Path-&quot;&gt;&lt;code&gt;newDirectoryStream&lt;/code&gt;&lt;/a&gt; method will be a &lt;code&gt;SecureDirectoryStream&lt;/code&gt; and must be cast to that type in order to invoke the methods defined by this interface.</source>
          <target state="translated">&lt;code&gt;SecureDirectoryStream&lt;/code&gt; 는 기본 운영 체제에서 해당 지원이 필요합니다. 구현이이 기능을 지원 하는 경우 &lt;a href=&quot;files#newDirectoryStream-java.nio.file.Path-&quot;&gt; &lt;code&gt;newDirectoryStream&lt;/code&gt; &lt;/a&gt; 메소드가 리턴 한 &lt;code&gt;DirectoryStream&lt;/code&gt; 은 &lt;code&gt;SecureDirectoryStream&lt;/code&gt; 이 되며이 인터페이스로 정의 된 메소드를 호출하려면 해당 유형으로 캐스트되어야합니다.</target>
        </trans-unit>
        <trans-unit id="a09895bcec5b253ef83a4711a43fb6500d77ab91" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureRandom&lt;/code&gt; can be reseeded at any time by calling the &lt;code&gt;reseed&lt;/code&gt; or &lt;code&gt;setSeed&lt;/code&gt; method. The &lt;code&gt;reseed&lt;/code&gt; method reads entropy input from its entropy source to reseed itself. The &lt;code&gt;setSeed&lt;/code&gt; method requires the caller to provide the seed.</source>
          <target state="translated">A &lt;code&gt;SecureRandom&lt;/code&gt; can be reseeded at any time by calling the &lt;code&gt;reseed&lt;/code&gt; or &lt;code&gt;setSeed&lt;/code&gt; method. The &lt;code&gt;reseed&lt;/code&gt; method reads entropy input from its entropy source to reseed itself. The &lt;code&gt;setSeed&lt;/code&gt; method requires the caller to provide the seed.</target>
        </trans-unit>
        <trans-unit id="c58cb4d6699a4a2f4e16889a3900c3794374d2a2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureRandom&lt;/code&gt; service provider can advertise that it is thread-safe by setting the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#service-attributes&quot;&gt;service provider attribute&lt;/a&gt; &quot;ThreadSafe&quot; to &quot;true&quot; when registering the provider. Otherwise, this class will instead synchronize access to the following methods of the &lt;code&gt;SecureRandomSpi&lt;/code&gt; implementation:</source>
          <target state="translated">A &lt;code&gt;SecureRandom&lt;/code&gt; service provider can advertise that it is thread-safe by setting the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#service-attributes&quot;&gt;service provider attribute&lt;/a&gt; &quot;ThreadSafe&quot; to &quot;true&quot; when registering the provider. Otherwise, this class will instead synchronize access to the following methods of the &lt;code&gt;SecureRandomSpi&lt;/code&gt; implementation:</target>
        </trans-unit>
        <trans-unit id="363c5c2b325a2467f2dba26473ef1182cb00a6ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is also thrown if any of the elements of the input &lt;code&gt;array&lt;/code&gt; is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;code&gt;java.lang.Class&lt;/code&gt; and &lt;code&gt;flag&lt;/code&gt; is true.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; is also thrown if any of the elements of the input &lt;code&gt;array&lt;/code&gt; is a &lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt; object for the class &lt;code&gt;java.lang.Class&lt;/code&gt; and &lt;code&gt;flag&lt;/code&gt; is true.</target>
        </trans-unit>
        <trans-unit id="8267123825960a628289c6028b67620bec4aa5d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is also thrown if this object is a &lt;code&gt;Constructor&lt;/code&gt; object for the class &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;flag&lt;/code&gt; is true.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; is also thrown if this object is a &lt;code&gt;Constructor&lt;/code&gt; object for the class &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;flag&lt;/code&gt; is true.</target>
        </trans-unit>
        <trans-unit id="1348b96b1f9cb55e6c7bc102d126076ba48c8171" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; but accessibility of any of the elements of the input &lt;code&gt;array&lt;/code&gt; may not be changed (for example, if the element object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;). In the event of such a SecurityException, the accessibility of objects is set to &lt;code&gt;flag&lt;/code&gt; for array elements upto (and excluding) the element for which the exception occurred; the accessibility of elements beyond (and including) the element for which the exception occurred is unchanged.</source>
          <target state="translated">&lt;code&gt;SecurityException&lt;/code&gt; 경우 발생되는 &lt;code&gt;flag&lt;/code&gt; 이다 &lt;code&gt;true&lt;/code&gt; 이지만, 입력 요소의 어느 접근성 &lt;code&gt;array&lt;/code&gt; (요소 오브젝트가있는 경우, 예를 들어, 변경 될 수 &lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt; 클래스의 객체 &lt;a href=&quot;../class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/a&gt; ). 이러한 SecurityException의 경우, 객체의 접근성은 예외가 발생한 요소까지 (그리고 제외하는) 배열 요소에 대해 &lt;code&gt;flag&lt;/code&gt; 로 설정됩니다 . 예외가 발생한 요소 이외의 요소에 대한 액세스 가능성은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="91d4909b78a699d458ff1b4c6a25ff1e864934b3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; but accessibility of this object may not be changed (for example, if this element object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;SecurityException&lt;/code&gt; 경우 발생 &lt;code&gt;flag&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 이지만이 요소 객체가있는 경우이 객체의 접근성 (예를 들어, 변경할 수 없습니다 &lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt; 클래스에 대한 객체 &lt;a href=&quot;../class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="be2d43eca8667b1e0a7c0bbdfd5cbe7046d51e49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if this object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;code&gt;java.lang.Class&lt;/code&gt;, and &lt;code&gt;flag&lt;/code&gt; is true.</source>
          <target state="translated">&lt;code&gt;SecurityException&lt;/code&gt; 이 객체가있는 경우 발생 &lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt; 클래스의 객체 &lt;code&gt;java.lang.Class&lt;/code&gt; , 그리고 &lt;code&gt;flag&lt;/code&gt; 사실이다.</target>
        </trans-unit>
        <trans-unit id="333a27035fa0205934ea5038f80b765e2ca2a0f3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; can be created from a MIDI file by reading the file into an input stream and invoking one of the &lt;code&gt;getSequence&lt;/code&gt; methods of &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;. A sequence can also be built from scratch by adding new &lt;code&gt;Tracks&lt;/code&gt; to an empty &lt;code&gt;Sequence&lt;/code&gt;, and adding &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects to these &lt;code&gt;Tracks&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; can be created from a MIDI file by reading the file into an input stream and invoking one of the &lt;code&gt;getSequence&lt;/code&gt; methods of &lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; &lt;/a&gt;. A sequence can also be built from scratch by adding new &lt;code&gt;Tracks&lt;/code&gt; to an empty &lt;code&gt;Sequence&lt;/code&gt; , and adding &lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt; objects to these &lt;code&gt;Tracks&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="47f1ccb99f3622c1d1fbee26066775abbdd89280" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; can be created from a MIDI file by reading the file into an input stream and invoking one of the &lt;code&gt;getSequence&lt;/code&gt; methods of &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;. A sequence can also be built from scratch by adding new &lt;code&gt;Tracks&lt;/code&gt; to an empty &lt;code&gt;Sequence&lt;/code&gt;, and adding &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to these &lt;code&gt;Tracks&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sequence&lt;/code&gt; 입력 스트림 파일을 판독하고 하나의 호출하여 MIDI 파일로부터 생성 될 수 &lt;code&gt;getSequence&lt;/code&gt; 의 방법 &lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; 에이&lt;/a&gt; . 빈 &lt;code&gt;Tracks&lt;/code&gt; 에 새 트랙 을 추가 하고이 &lt;code&gt;Tracks&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 객체를 추가하여 &lt;code&gt;Sequence&lt;/code&gt; 를 처음부터 만들 수도 있습니다. .</target>
        </trans-unit>
        <trans-unit id="3a5ff8b505d73b540246b730e9a90c0545a3cc85" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt; object.</target>
        </trans-unit>
        <trans-unit id="fa71ed91e1341a5f16c1570d55c6594ba10dd17c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; object. Specifically, the &lt;code&gt;Sequence&lt;/code&gt; contains timing information and one or more tracks. Each &lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; consists of a series of MIDI events (such as note-ons, note-offs, program changes, and meta-events). The sequence's timing information specifies the type of unit that is used to time-stamp the events in the sequence.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt; object. Specifically, the &lt;code&gt;Sequence&lt;/code&gt; contains timing information and one or more tracks. Each &lt;a href=&quot;track&quot;&gt; &lt;code&gt;track&lt;/code&gt; &lt;/a&gt; consists of a series of MIDI events (such as note-ons, note-offs, program changes, and meta-events). The sequence's timing information specifies the type of unit that is used to time-stamp the events in the sequence.</target>
        </trans-unit>
        <trans-unit id="92987c7d586485713ab01347ccc93734161b144f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Sequence&lt;/code&gt; a로 재생할 수있는 음악 정보를 포함하는 데이터 구조 (종종 곡 전체 또는) 인 &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="c03b7c1f7021273b40415a3aaea4dcc1f735d836" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object. Specifically, the &lt;code&gt;Sequence&lt;/code&gt; contains timing information and one or more tracks. Each &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; consists of a series of MIDI events (such as note-ons, note-offs, program changes, and meta-events). The sequence's timing information specifies the type of unit that is used to time-stamp the events in the sequence.</source>
          <target state="translated">&lt;code&gt;Sequence&lt;/code&gt; a로 재생할 수있는 음악 정보를 포함하는 데이터 구조 (종종 곡 전체 또는) 인 &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 개체. 구체적으로, &lt;code&gt;Sequence&lt;/code&gt; 는 타이밍 정보 및 하나 이상의 트랙을 포함한다. 각 &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 은 일련의 MIDI 이벤트 (예 : 노트 온, 노트 오프, 프로그램 변경 및 메타 이벤트)로 구성됩니다. 시퀀스의 타이밍 정보는 시퀀스에서 이벤트를 타임 스탬프하는 데 사용되는 단위 유형을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="53ae5e222af53133bd2c9490689f333c8858ecfa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SequenceInputStream&lt;/code&gt; represents the logical concatenation of other input streams.</source>
          <target state="translated">&lt;code&gt;SequenceInputStream&lt;/code&gt; 다른 입력 스트림의 논리적 연결을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="5dfc24617c0471997ddeb447ae28a22a21b8674a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SequenceInputStream&lt;/code&gt; represents the logical concatenation of other input streams. It starts out with an ordered collection of input streams and reads from the first one until end of file is reached, whereupon it reads from the second one, and so on, until end of file is reached on the last of the contained input streams.</source>
          <target state="translated">&lt;code&gt;SequenceInputStream&lt;/code&gt; 다른 입력 스트림의 논리적 연결을 나타낸다. 순서가 지정된 입력 스트림 콜렉션으로 시작하여 파일 끝에 도달 할 때까지 첫 번째 스트림에서 읽은 다음 두 번째 스트림에서 읽은 다음 계속해서 포함 된 입력 스트림의 마지막에 파일 끝에 도달 할 때까지 읽습니다.</target>
        </trans-unit>
        <trans-unit id="64f8e35603f8ba57d8ba66f9ae61c25ccd670a67" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerCloneException&lt;/code&gt; is thrown if a remote exception occurs during the cloning of a &lt;code&gt;UnicastRemoteObject&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;ServerCloneException&lt;/code&gt; is thrown if a remote exception occurs during the cloning of a &lt;code&gt;UnicastRemoteObject&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7eba2e9b7dd931ba77a3701035a13eebd64f627" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerError&lt;/code&gt; is thrown as a result of a remote method invocation when an &lt;code&gt;Error&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value.</source>
          <target state="translated">A &lt;code&gt;ServerError&lt;/code&gt; is thrown as a result of a remote method invocation when an &lt;code&gt;Error&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value.</target>
        </trans-unit>
        <trans-unit id="a3b63fb9fe91928086d1b1f47d822e660c579eef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerError&lt;/code&gt; is thrown as a result of a remote method invocation when an &lt;code&gt;Error&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. A &lt;code&gt;ServerError&lt;/code&gt; instance contains the original &lt;code&gt;Error&lt;/code&gt; that occurred as its cause.</source>
          <target state="translated">A &lt;code&gt;ServerError&lt;/code&gt; is thrown as a result of a remote method invocation when an &lt;code&gt;Error&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. A &lt;code&gt;ServerError&lt;/code&gt; instance contains the original &lt;code&gt;Error&lt;/code&gt; that occurred as its cause.</target>
        </trans-unit>
        <trans-unit id="c4a92e396c22734a0762dd6b2fd187b5c5d3052e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerException&lt;/code&gt; is thrown as a result of a remote method invocation when a &lt;code&gt;RemoteException&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself.</source>
          <target state="translated">A &lt;code&gt;ServerException&lt;/code&gt; is thrown as a result of a remote method invocation when a &lt;code&gt;RemoteException&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself.</target>
        </trans-unit>
        <trans-unit id="2330b59ecf339f5b208e07a73273f4281a6fee8b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerException&lt;/code&gt; is thrown as a result of a remote method invocation when a &lt;code&gt;RemoteException&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself. A &lt;code&gt;ServerException&lt;/code&gt; instance contains the original &lt;code&gt;RemoteException&lt;/code&gt; that occurred as its cause.</source>
          <target state="translated">A &lt;code&gt;ServerException&lt;/code&gt; is thrown as a result of a remote method invocation when a &lt;code&gt;RemoteException&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself. A &lt;code&gt;ServerException&lt;/code&gt; instance contains the original &lt;code&gt;RemoteException&lt;/code&gt; that occurred as its cause.</target>
        </trans-unit>
        <trans-unit id="3d75c2168deeeca35b1589b3c45e0a3a7cba5a16" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerRuntimeException&lt;/code&gt; is not thrown from servers executing on the Java 2 platform v1.2 or later versions.</source>
          <target state="translated">A &lt;code&gt;ServerRuntimeException&lt;/code&gt; is not thrown from servers executing on the Java 2 platform v1.2 or later versions.</target>
        </trans-unit>
        <trans-unit id="68cee623b4eb08a33c48f686d33c5250166ff777" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects are returned by the &lt;a href=&quot;policynode#getPolicyQualifiers()&quot;&gt;&lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt;&lt;/a&gt; method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag to false (by calling the &lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected(boolean)&quot;&gt;&lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt;&lt;/a&gt; method) before validating a certification path.</source>
          <target state="translated">A &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects are returned by the &lt;a href=&quot;policynode#getPolicyQualifiers()&quot;&gt; &lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt; &lt;/a&gt; method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag to false (by calling the &lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected(boolean)&quot;&gt; &lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt; &lt;/a&gt; method) before validating a certification path.</target>
        </trans-unit>
        <trans-unit id="664c53380d8546663274983ecf83d6c0d77d55fb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects are returned by the &lt;a href=&quot;policynode#getPolicyQualifiers--&quot;&gt;&lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt;&lt;/a&gt; method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag to false (by calling the &lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected-boolean-&quot;&gt;&lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt;&lt;/a&gt; method) before validating a certification path.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 의 &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; 의 객체에 의해 반환되는 &lt;a href=&quot;policynode#getPolicyQualifiers--&quot;&gt; &lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt; 의&lt;/a&gt; 방법. 이를 통해 특정 정책 요구 사항이있는 응용 프로그램에서 각 정책 한정자를 처리하고 확인할 수 있습니다. 정책 한정자를 처리해야하는 응용 프로그램 은 인증 경로를 확인하기 전에 &lt;code&gt;policyQualifiersRejected&lt;/code&gt; 플래그를 명시 적 으로 false로 설정해야 합니다 ( &lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected-boolean-&quot;&gt; &lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt; &lt;/a&gt; 메서드 호출 ).</target>
        </trans-unit>
        <trans-unit id="9e26bc246691b598cf4b4baea9dbd4941f31b126" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of private credentials held by this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Subject&lt;/code&gt; 가 보관 유지하는 비공개 자격 의 &lt;code&gt;Set&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="25ecf6c13358fd6c3988492153f2ca66c0a7c09d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of public credentials held by this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;Subject&lt;/code&gt; 가 보관 유지하는 공개 자격 의 &lt;code&gt;Set&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="d23d1497e3e01041be25fe9fe4c863ffe56c1001" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShardingKey&lt;/code&gt; may also be used for specifying a &lt;code&gt;superShardingKey&lt;/code&gt;. Databases that support composite Sharding may use a &lt;code&gt;superShardingKey&lt;/code&gt; to specify a additional level of partitioning within the Shard.</source>
          <target state="translated">A &lt;code&gt;ShardingKey&lt;/code&gt; may also be used for specifying a &lt;code&gt;superShardingKey&lt;/code&gt; . Databases that support composite Sharding may use a &lt;code&gt;superShardingKey&lt;/code&gt; to specify a additional level of partitioning within the Shard.</target>
        </trans-unit>
        <trans-unit id="8e76fcba29fd4a12c2249595d7807514ece699ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShortMessage&lt;/code&gt; contains a MIDI message that has at most two data bytes following its status byte.</source>
          <target state="translated">&lt;code&gt;ShortMessage&lt;/code&gt; 상태 바이트 다음 바이트 최대 두 개의 데이터가있는 MIDI 메시지가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="332caac10175dbc76add8475e7dbeca6d7617182" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShortMessage&lt;/code&gt; contains a MIDI message that has at most two data bytes following its status byte. The types of MIDI message that satisfy this criterion are channel voice, channel mode, system common, and system real-time--in other words, everything except system exclusive and meta-events. The &lt;code&gt;ShortMessage&lt;/code&gt; class provides methods for getting and setting the contents of the MIDI message.</source>
          <target state="translated">&lt;code&gt;ShortMessage&lt;/code&gt; 상태 바이트 다음 바이트 최대 두 개의 데이터가있는 MIDI 메시지가 포함되어 있습니다. 이 기준을 만족하는 MIDI 메시지 유형은 채널 음성, 채널 모드, 시스템 공통 및 시스템 실시간, 즉 시스템 독점 및 메타 이벤트를 제외한 모든 것입니다. &lt;code&gt;ShortMessage&lt;/code&gt; 클래스는 점점 MIDI 메세지의 내용을 설정하기위한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="13ae34f3b0a0aff81ddb18ddb3768b8b2a397067" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignatureMethod&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureMethod(java.lang.String,javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)&quot;&gt;&lt;code&gt;newSignatureMethod&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">A &lt;code&gt;SignatureMethod&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureMethod(java.lang.String,javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)&quot;&gt; &lt;code&gt;newSignatureMethod&lt;/code&gt; &lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="31075194033bd091ea68517207b55ef35963bc6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignatureProperties&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureProperties(java.util.List,java.lang.String)&quot;&gt;&lt;code&gt;newSignatureProperties&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">A &lt;code&gt;SignatureProperties&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureProperties(java.util.List,java.lang.String)&quot;&gt; &lt;code&gt;newSignatureProperties&lt;/code&gt; &lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; class; for example:</target>
        </trans-unit>
        <trans-unit id="d864d4ecc1eed7f3acee7d1b31bb6f1733c60e27" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignatureProperty&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureProperty(java.util.List,java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;newSignatureProperty&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">A &lt;code&gt;SignatureProperty&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureProperty(java.util.List,java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;newSignatureProperty&lt;/code&gt; &lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; class; for example:</target>
        </trans-unit>
        <trans-unit id="161b7033a5670df38a4bf1dadf04453cd433b023" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignedInfo&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List)&quot;&gt;&lt;code&gt;newSignedInfo&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">A &lt;code&gt;SignedInfo&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List)&quot;&gt; &lt;code&gt;newSignedInfo&lt;/code&gt; &lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="fd52f6852258fb45d0465f21689b2a061df0bff2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SimpleScriptContext&lt;/code&gt; is used as the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;AbstractScriptEngine&lt;/code&gt;..</source>
          <target state="translated">&lt;code&gt;SimpleScriptContext&lt;/code&gt; 는 기본으로 사용 &lt;code&gt;ScriptContext&lt;/code&gt; 의 &lt;code&gt;AbstractScriptEngine&lt;/code&gt; ..</target>
        </trans-unit>
        <trans-unit id="a5555cfa3e24e81ee173481d7b51680cf89e298b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SimpleScriptContext&lt;/code&gt; returned by this method is used to implement eval methods using the abstract &lt;code&gt;eval(Reader,Bindings)&lt;/code&gt; and &lt;code&gt;eval(String,Bindings)&lt;/code&gt; versions.</source>
          <target state="translated">이 메소드에서 리턴 한 &lt;code&gt;SimpleScriptContext&lt;/code&gt; 는 추상 &lt;code&gt;eval(Reader,Bindings)&lt;/code&gt; 및 &lt;code&gt;eval(String,Bindings)&lt;/code&gt; 버전을 사용하여 eval 메소드를 구현하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="5c3522c1bb51e037675256ff738011a971700111" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SizeSequence&lt;/code&gt; object efficiently maintains an ordered list of sizes and corresponding positions.</source>
          <target state="translated">A &lt;code&gt;SizeSequence&lt;/code&gt; object efficiently maintains an ordered list of sizes and corresponding positions.</target>
        </trans-unit>
        <trans-unit id="bd4e66b73c0e8d262a5a6d1ddc1597c7e1aad79a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SizeSequence&lt;/code&gt; object efficiently maintains an ordered list of sizes and corresponding positions. One situation for which &lt;code&gt;SizeSequence&lt;/code&gt; might be appropriate is in a component that displays multiple rows of unequal size. In this case, a single &lt;code&gt;SizeSequence&lt;/code&gt; object could be used to track the heights and Y positions of all rows.</source>
          <target state="translated">A &lt;code&gt;SizeSequence&lt;/code&gt; object efficiently maintains an ordered list of sizes and corresponding positions. One situation for which &lt;code&gt;SizeSequence&lt;/code&gt; might be appropriate is in a component that displays multiple rows of unequal size. In this case, a single &lt;code&gt;SizeSequence&lt;/code&gt; object could be used to track the heights and Y positions of all rows.</target>
        </trans-unit>
        <trans-unit id="5ee1558d6d28954c02def5254470fac145c00dbc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SkeletonNotFoundException&lt;/code&gt; is thrown if the &lt;code&gt;Skeleton&lt;/code&gt; corresponding to the remote object being exported is not found. Skeletons are no longer required, so this exception is never thrown.</source>
          <target state="translated">A &lt;code&gt;SkeletonNotFoundException&lt;/code&gt; is thrown if the &lt;code&gt;Skeleton&lt;/code&gt; corresponding to the remote object being exported is not found. Skeletons are no longer required, so this exception is never thrown.</target>
        </trans-unit>
        <trans-unit id="0aa792e298cb7d4503cc6f14cc6a01bcc2f8b031" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is mapped in the same way, but it is only convertible if &lt;em&gt;K&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedMap&lt;/code&gt; instance will fail with an &lt;code&gt;
          IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../../java.base/java/util/sortedmap#comparator()&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; is mapped in the same way, but it is only convertible if &lt;em&gt;K&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;. Thus, a &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedMap&lt;/code&gt; instance will fail with an &lt;code&gt; IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../../java.base/java/util/sortedmap#comparator()&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="be41add239b970c680e56068d4ab46a2a90a5a84" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is mapped in the same way, but it is only convertible if &lt;em&gt;K&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedMap&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../java/util/sortedmap#comparator--&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt; , &lt;em&gt;V는 &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 동일한 방식으로 매핑되지만 경우에만 전환이다 &lt;em&gt;K는&lt;/em&gt; 클래스 또는 인터페이스를 구현 즉 &lt;a href=&quot;../../java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt; . 따라서 &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; 는 변환 가능하지만 &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; 은 변환 할 수 없습니다. null 이외의 &lt;a href=&quot;../../java/util/sortedmap#comparator--&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt; 가있는 경우 , &lt;code&gt;SortedMap&lt;/code&gt; 인스턴스 의 변환은 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 으로 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="86d2da3d0dd8fc66d3bad010c91cfe52a35e33d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is also mapped in the same way as an &lt;em&gt;E&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;, but it is only convertible if &lt;em&gt;E&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;
          SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedSet&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../../java.base/java/util/sortedset#comparator()&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;E&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; is also mapped in the same way as an &lt;em&gt;E&lt;/em&gt; &lt;code&gt;[]&lt;/code&gt; , but it is only convertible if &lt;em&gt;E&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;. Thus, a &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt; SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedSet&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../../java.base/java/util/sortedset#comparator()&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="eba384ea4c59a220657b695b8a65869443ab17b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is also mapped in the same way as an &lt;em&gt;E&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;, but it is only convertible if &lt;em&gt;E&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedSet&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../java/util/sortedset#comparator--&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;E는 &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 도 동일한 방식으로 매핑되는 &lt;em&gt;E &lt;/em&gt; &lt;code&gt;[]&lt;/code&gt; 하지만 경우에만 변환 가능한 &lt;em&gt;E는&lt;/em&gt; 클래스 또는 인터페이스가 구현하는 &lt;a href=&quot;../../java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt; . 따라서 &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; 는 변환 가능하지만 &lt;code&gt;SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; 은 변환 할 수 없습니다. null 이외의 &lt;a href=&quot;../../java/util/sortedset#comparator--&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt; 가있는 경우 , &lt;code&gt;SortedSet&lt;/code&gt; 인스턴스 의 변환은 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 으로 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="9a1428a93985c53305df08261b8b65973bb4ae90" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Soundbank&lt;/code&gt; contains a set of &lt;code&gt;Instruments&lt;/code&gt; that can be loaded into a &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Soundbank&lt;/code&gt; 일련 포함 &lt;code&gt;Instruments&lt;/code&gt; (A) 내로로드 될 수 &lt;code&gt;Synthesizer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="936fe97b42056562dcee1bb2643c429b7f2dde2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Soundbank&lt;/code&gt; contains a set of &lt;code&gt;Instruments&lt;/code&gt; that can be loaded into a &lt;code&gt;Synthesizer&lt;/code&gt;. Note that a Java Sound &lt;code&gt;Soundbank&lt;/code&gt; is different from a MIDI bank. MIDI permits up to 16383 banks, each containing up to 128 instruments (also sometimes called programs, patches, or timbres). However, a &lt;code&gt;Soundbank&lt;/code&gt; can contain 16383 times 128 instruments, because the instruments within a &lt;code&gt;Soundbank&lt;/code&gt; are indexed by both a MIDI program number and a MIDI bank number (via a &lt;code&gt;Patch&lt;/code&gt; object). Thus, a &lt;code&gt;Soundbank&lt;/code&gt; can be thought of as a collection of MIDI banks.</source>
          <target state="translated">&lt;code&gt;Soundbank&lt;/code&gt; 일련 포함 &lt;code&gt;Instruments&lt;/code&gt; (A) 내로로드 될 수 &lt;code&gt;Synthesizer&lt;/code&gt; . Java Sound &lt;code&gt;Soundbank&lt;/code&gt; 는 MIDI 뱅크와 다릅니다. MIDI는 각각 최대 128 개의 악기 (프로그램, 패치 또는 음색이라고도 함)를 포함하는 최대 16383 개의 뱅크를 허용합니다. 그러나, &lt;code&gt;Soundbank&lt;/code&gt; 내의 기기 때문에, 16383 시간 계측기 (128)를 포함 할 수있는 &lt;code&gt;Soundbank&lt;/code&gt; 미디 프로그램 번호 (a 통해 MIDI 뱅크 번호 모두 색인 &lt;code&gt;Patch&lt;/code&gt; 오브젝트). 따라서 &lt;code&gt;Soundbank&lt;/code&gt; 뱅크는 MIDI 뱅크 컬렉션으로 생각할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb71c7f35d20411e9a38b12129e5a3cc399d79a3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankReader&lt;/code&gt; supplies soundbank file-reading services.</source>
          <target state="translated">&lt;code&gt;SoundbankReader&lt;/code&gt; 는의 공급 사운드 뱅크 파일 읽기 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d6ebdda51f94a93f6575dd9124879e379ffd4459" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankReader&lt;/code&gt; supplies soundbank file-reading services. Concrete subclasses of &lt;code&gt;SoundbankReader&lt;/code&gt; parse a given soundbank file, producing a &lt;a href=&quot;../soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt; object that can be loaded into a &lt;a href=&quot;../synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SoundbankReader&lt;/code&gt; 는의 공급 사운드 뱅크 파일 읽기 서비스를 제공합니다. &lt;code&gt;SoundbankReader&lt;/code&gt; 의 구체적 서브 클래스는 주어진 사운드 뱅크 파일을 구문 분석 하여 &lt;a href=&quot;../synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; 에&lt;/a&gt; 로드 할 수 있는 &lt;a href=&quot;../soundbank&quot;&gt; &lt;code&gt;Soundbank&lt;/code&gt; &lt;/a&gt; 객체를 생성 합니다 .</target>
        </trans-unit>
        <trans-unit id="531bd93ae1b0a0949760752bd971c5d495fa484f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;a href=&quot;soundbank&quot;&gt; &lt;code&gt;Soundbank&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8daf3926a405767122d6902eed98c6cc7a828cc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;. Common soundbank resources include:</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;a href=&quot;soundbank&quot;&gt; &lt;code&gt;Soundbank&lt;/code&gt; &lt;/a&gt;. Common soundbank resources include:</target>
        </trans-unit>
        <trans-unit id="6c75af74d3d4959ceb2c10f6ff6fa241a313d323" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SoundbankResource&lt;/code&gt; 가가 A의 저장된 오디오 자원 나타내는 &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3778c6c6b603f44bd9513dc8ca46834e3c73bffb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. Common soundbank resources include:</source>
          <target state="translated">&lt;code&gt;SoundbankResource&lt;/code&gt; 가가 A의 저장된 오디오 자원 나타내는 &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; . 일반적인 사운드 뱅크 리소스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="676ccfc2783b72d0cdbcf2483ca996f800476580" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Source&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt; suitable for passing to the &lt;code&gt;TransformerFactory&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Source&lt;/code&gt; &lt;code&gt;Object&lt;/code&gt; suitable for passing to the &lt;code&gt;TransformerFactory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f45c7bf343186e4baef93dd0ec4dd1259f8e4c74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of &lt;code&gt;Date&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of &lt;code&gt;Date&lt;/code&gt; s.</target>
        </trans-unit>
        <trans-unit id="392213bf914cb7615247161f7fc76519defde5d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of &lt;code&gt;Date&lt;/code&gt;s. The upper and lower bounds of the sequence are defined by properties called &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; and the size of the increase or decrease computed by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called &lt;code&gt;calendarField&lt;/code&gt;. The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt; to indicate that the sequence has no lower or upper limit.</source>
          <target state="translated">A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of &lt;code&gt;Date&lt;/code&gt; s. The upper and lower bounds of the sequence are defined by properties called &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; and the size of the increase or decrease computed by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called &lt;code&gt;calendarField&lt;/code&gt; . The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt; to indicate that the sequence has no lower or upper limit.</target>
        </trans-unit>
        <trans-unit id="6f45aa5fd321b96a79a9fe3cf25bb484669f4118" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers.</source>
          <target state="translated">A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers.</target>
        </trans-unit>
        <trans-unit id="d187c6f6825bea9218b43a222d8024c230fd233b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers. The upper and lower bounds of the sequence are defined by properties called &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt;. The size of the increase or decrease computed by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called &lt;code&gt;stepSize&lt;/code&gt;. The &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt; to indicate that the sequence has no lower or upper limit. All of the properties in this class are defined in terms of two generic types: &lt;code&gt;Number&lt;/code&gt; and &lt;code&gt;Comparable&lt;/code&gt;, so that all Java numeric types may be accommodated. Internally, there's only support for values whose type is one of the primitive &lt;code&gt;Number&lt;/code&gt; types: &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, or &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers. The upper and lower bounds of the sequence are defined by properties called &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; . The size of the increase or decrease computed by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called &lt;code&gt;stepSize&lt;/code&gt; . The &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt; to indicate that the sequence has no lower or upper limit. All of the properties in this class are defined in terms of two generic types: &lt;code&gt;Number&lt;/code&gt; and &lt;code&gt;Comparable&lt;/code&gt; , so that all Java numeric types may be accommodated. Internally, there's only support for values whose type is one of the primitive &lt;code&gt;Number&lt;/code&gt; types: &lt;code&gt;Double&lt;/code&gt; , &lt;code&gt;Float&lt;/code&gt; , &lt;code&gt;Long&lt;/code&gt; , &lt;code&gt;Integer&lt;/code&gt; , &lt;code&gt;Short&lt;/code&gt; , or &lt;code&gt;Byte&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fbfe491daf8df4ed6725a2f50f6f7d4dd5daab9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; has three properties, only the first is read/write.</source>
          <target state="translated">A &lt;code&gt;SpinnerModel&lt;/code&gt; has three properties, only the first is read/write.</target>
        </trans-unit>
        <trans-unit id="dfadbbee2a75f91ba2e5b6043571e05f0377a1e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Spring&lt;/code&gt; can be treated as a pair of intervals with a single common point: the preferred value. The following rules define some of the arithmetic operators that can be applied to intervals (&lt;code&gt;[a, b]&lt;/code&gt; refers to the interval from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;, where &lt;code&gt;a &amp;lt;= b&lt;/code&gt;).</source>
          <target state="translated">A &lt;code&gt;Spring&lt;/code&gt; can be treated as a pair of intervals with a single common point: the preferred value. The following rules define some of the arithmetic operators that can be applied to intervals ( &lt;code&gt;[a, b]&lt;/code&gt; refers to the interval from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; , where &lt;code&gt;a &amp;lt;= b&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9f9250daa9ad4c59ffc79d62d4e332248dc6117b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container according to a set of constraints.</source>
          <target state="translated">A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container according to a set of constraints.</target>
        </trans-unit>
        <trans-unit id="647df4c0f4a0e18cd2cbef78259fd7de61698945" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container according to a set of constraints. See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html&quot;&gt;How to Use SpringLayout&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for examples of using &lt;code&gt;SpringLayout&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container according to a set of constraints. See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html&quot;&gt;How to Use SpringLayout&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for examples of using &lt;code&gt;SpringLayout&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a839716f37e131b27baf09f1bcaa49eab165af51" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StackFrame&lt;/code&gt; object represents a method invocation returned by &lt;a href=&quot;stackwalker&quot;&gt;&lt;code&gt;StackWalker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;StackFrame&lt;/code&gt; object represents a method invocation returned by &lt;a href=&quot;stackwalker&quot;&gt; &lt;code&gt;StackWalker&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7b5399ec744e680e76f8bd66a301234127a65991" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StackWalker&lt;/code&gt; configured with this option will support &lt;a href=&quot;stackwalker#getCallerClass()&quot;&gt;&lt;code&gt;StackWalker.getCallerClass()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stackwalker.stackframe#getDeclaringClass()&quot;&gt;&lt;code&gt;StackFrame.getDeclaringClass()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;StackWalker&lt;/code&gt; configured with this option will support &lt;a href=&quot;stackwalker#getCallerClass()&quot;&gt; &lt;code&gt;StackWalker.getCallerClass()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;stackwalker.stackframe#getDeclaringClass()&quot;&gt; &lt;code&gt;StackFrame.getDeclaringClass()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b86b63120f1187e9a115af3b0e4d8f77d1520294" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Statement&lt;/code&gt; object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Statement&lt;/code&gt; 로 - 오브젝트는 하나의 방법은 타겟과 인수의 세트에 적용되는 원시 문장 나타내는 &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a61be4591e38d6b7a3aa4b3b5d6a361b09587d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Statement&lt;/code&gt; object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt;. Note that where this example uses names to denote the target and its argument, a statement object does not require a name space and is constructed with the values themselves. The statement object associates the named method with its environment as a simple set of values: the target and an array of argument values.</source>
          <target state="translated">&lt;code&gt;Statement&lt;/code&gt; 로 - 오브젝트는 하나의 방법은 타겟과 인수의 세트에 적용되는 원시 문장 나타내는 &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt; . 이 예제에서 이름을 사용하여 대상과 해당 인수를 나타내는 경우 명령문 오브젝트는 이름 공간이 필요하지 않으며 값 자체로 구성됩니다. 명령문 오브젝트는 명명 된 메소드를 환경과 간단한 값 세트 (대상 및 인수 값의 배열)로 환경과 연관시킵니다.</target>
        </trans-unit>
        <trans-unit id="f73581493c1b2f0ecf66831949c9034f451696b1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StatementEvent&lt;/code&gt; is sent to all &lt;code&gt;StatementEventListener&lt;/code&gt;s which were registered with a &lt;code&gt;PooledConnection&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;StatementEvent&lt;/code&gt; is sent to all &lt;code&gt;StatementEventListener&lt;/code&gt; s which were registered with a &lt;code&gt;PooledConnection&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f41bc39c312df02f4d21bf896a121cd0a424b96e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StatementEvent&lt;/code&gt; is sent to all &lt;code&gt;StatementEventListener&lt;/code&gt;s which were registered with a &lt;code&gt;PooledConnection&lt;/code&gt;. This occurs when the driver determines that a &lt;code&gt;PreparedStatement&lt;/code&gt; that is associated with the &lt;code&gt;PooledConnection&lt;/code&gt; has been closed or the driver determines is invalid.</source>
          <target state="translated">A &lt;code&gt;StatementEvent&lt;/code&gt; is sent to all &lt;code&gt;StatementEventListener&lt;/code&gt; s which were registered with a &lt;code&gt;PooledConnection&lt;/code&gt; . This occurs when the driver determines that a &lt;code&gt;PreparedStatement&lt;/code&gt; that is associated with the &lt;code&gt;PooledConnection&lt;/code&gt; has been closed or the driver determines is invalid.</target>
        </trans-unit>
        <trans-unit id="bd2df8bb26a7e8052efe5bdb4f2ef98c07c3e44c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;javax/print/streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type.</source>
          <target state="translated">A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;javax/print/streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type.</target>
        </trans-unit>
        <trans-unit id="88b96780c6028bc816e36e9837df5f86754a3912" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type.</source>
          <target state="translated">&lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; 위한 공장 &lt;a href=&quot;streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt; MIME 타입에 기술 된 특정 형식으로 출력 스트림으로 출력 할 경우.</target>
        </trans-unit>
        <trans-unit id="9f370a18ad256d8838013b96f3fd3a6c57070006" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type. A typical output document format may be Postscript(TM).</source>
          <target state="translated">&lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; 위한 공장 &lt;a href=&quot;streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt; MIME 타입에 기술 된 특정 형식으로 출력 스트림으로 출력 할 경우. 일반적인 출력 문서 형식은 Postscript (TM) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b656cee1e6a2645b9dd951fcb66dbb0f94a1a368" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; constant containing the standard format name, &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt;.</source>
          <target state="translated">표준 형식 명 &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt; 을 포함 하는 &lt;code&gt;String&lt;/code&gt; 상수 .</target>
        </trans-unit>
        <trans-unit id="53fba3d0e985e2fa295966cac78bdf47bb9cd3fc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the class name of the native stream metadata format supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이 플러그인이 지원하는 기본 스트림 메타 데이터 형식의 클래스 이름을 포함 하는 &lt;code&gt;String&lt;/code&gt; 이며 처음에는 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8d1c74db349ee872ae5cd9850f6c87be3d51a45e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the associated plug-in class, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">연관된 플러그인 클래스의 이름을 포함 하는 &lt;code&gt;String&lt;/code&gt; 이며 처음에는 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d45247269dbaf1c1d7689b448b26edb5feef622e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the current compression type, or &lt;code&gt;null&lt;/code&gt; if none is set.</source>
          <target state="translated">현재 압축 유형의 이름이 포함 된 &lt;code&gt;String&lt;/code&gt; 이거나 설정되지 않은 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="50a95660663285b02c516594baebaf298fae2baa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the native stream metadata format supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이 플러그인이 지원하는 기본 스트림 메타 데이터 형식의 이름을 포함 하는 &lt;code&gt;String&lt;/code&gt; 이며 처음에는 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a223c6052304a28bfe657353c24cb87b484346cd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; representing the error message with location information appended.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; representing the error message with location information appended.</target>
        </trans-unit>
        <trans-unit id="d10ab1d455c0a57466c25555861d5c804559d231" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; represents a string in the UTF-16 format in which &lt;em&gt;supplementary characters&lt;/em&gt; are represented by &lt;em&gt;surrogate pairs&lt;/em&gt; (see the section &lt;a href=&quot;character#unicode&quot;&gt;Unicode Character Representations&lt;/a&gt; in the &lt;code&gt;Character&lt;/code&gt; class for more information). Index values refer to &lt;code&gt;char&lt;/code&gt; code units, so a supplementary character uses two positions in a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 있는 UTF-16 형식의 문자열 표현 &lt;em&gt;보충 문자&lt;/em&gt; 로 표현됩니다 &lt;em&gt;서로 게이트 쌍&lt;/em&gt; (섹션 참조 &lt;a href=&quot;character#unicode&quot;&gt;유니 코드 문자 표현&lt;/a&gt; 에서 &lt;code&gt;Character&lt;/code&gt; 자세한 내용은 클래스). 색인 값은 &lt;code&gt;char&lt;/code&gt; 코드 단위를 참조 하므로 보충 문자는 &lt;code&gt;String&lt;/code&gt; 에서 두 위치를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="34c086efe17669f8c286b6ac46d5b21d5d149d5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVendorName&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVendorName&lt;/code&gt; , initially &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03315933b3ff9b0f30ad43e2ef49e3cb9a6150ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVendorName&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;. Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 반환되는 &lt;code&gt;getVendorName&lt;/code&gt; 처음 &lt;code&gt;null&lt;/code&gt; . 생성자는 이것을 &lt;code&gt;null&lt;/code&gt; 이 아닌 값으로 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="d73b9ed3737e5a0865beb15731efe020f845df7a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVersion&lt;/code&gt;, initially null.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVersion&lt;/code&gt; , initially null.</target>
        </trans-unit>
        <trans-unit id="4f161d6eb22ce16b9243b0894aaae9d6076c8921" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVersion&lt;/code&gt;, initially null. Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 반환되는 &lt;code&gt;getVersion&lt;/code&gt; 처음은 null입니다. 생성자는 이것을 &lt;code&gt;null&lt;/code&gt; 이 아닌 값으로 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="ae9b075558f4a4a24b9bd96101c6b618f699536c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; is empty if &lt;a href=&quot;#add(java.lang.CharSequence)&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; has never been called, and if &lt;code&gt;merge()&lt;/code&gt; has never been called with a non-empty &lt;code&gt;StringJoiner&lt;/code&gt; argument.</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; is empty if &lt;a href=&quot;#add(java.lang.CharSequence)&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; has never been called, and if &lt;code&gt;merge()&lt;/code&gt; has never been called with a non-empty &lt;code&gt;StringJoiner&lt;/code&gt; argument.</target>
        </trans-unit>
        <trans-unit id="843830e38e5ab1ee9ec315a6b3904b915eb4d232" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; is empty if &lt;a href=&quot;stringjoiner#add-java.lang.CharSequence-&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; has never been called, and if &lt;code&gt;merge()&lt;/code&gt; has never been called with a non-empty &lt;code&gt;StringJoiner&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;StringJoiner&lt;/code&gt; 는 경우 비어 &lt;a href=&quot;stringjoiner#add-java.lang.CharSequence-&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; 호출되지 않았으며, 경우 &lt;code&gt;merge()&lt;/code&gt; 비어로 호출 된 적이없는 &lt;code&gt;StringJoiner&lt;/code&gt; 의 인수.</target>
        </trans-unit>
        <trans-unit id="f945f4248f125fc9f42cd4cd88c1f0e16cb55452" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; may be employed to create formatted output from a &lt;a href=&quot;stream/stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;stream/collectors#joining(java.lang.CharSequence)&quot;&gt;&lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; may be employed to create formatted output from a &lt;a href=&quot;stream/stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; using &lt;a href=&quot;stream/collectors#joining(java.lang.CharSequence)&quot;&gt; &lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt; &lt;/a&gt;. For example:</target>
        </trans-unit>
        <trans-unit id="4f01da94ce05781ad0c478fa1fd9874f22c00b82" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; may be employed to create formatted output from a &lt;a href=&quot;stream/stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;stream/collectors#joining-java.lang.CharSequence-&quot;&gt;&lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;StringJoiner&lt;/code&gt; 은 (A)로부터의 출력 포맷 생성하는데 이용 될 수있다 &lt;a href=&quot;stream/stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; 사용 &lt;a href=&quot;stream/collectors#joining-java.lang.CharSequence-&quot;&gt; &lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt; &lt;/a&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b30e0d159c48329651d255c8e3e3295c07dcd39" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringTokenizer&lt;/code&gt; object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.</source>
          <target state="translated">&lt;code&gt;StringTokenizer&lt;/code&gt; 객체는 내부적으로 문자열 내에서 현재 위치가 토큰 화하는 유지한다. 일부 작업은 처리 된 문자를지나 현재 위치를 진행합니다.</target>
        </trans-unit>
        <trans-unit id="f2e2befae22818c094f8322a0e604a8f947006ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String[]&lt;/code&gt; can be converted to a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; using &lt;a href=&quot;../../../java.base/java/util/arrays#asList(T...)&quot;&gt;&lt;code&gt;Arrays.asList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;String[]&lt;/code&gt; can be converted to a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; using &lt;a href=&quot;../../../java.base/java/util/arrays#asList(T...)&quot;&gt; &lt;code&gt;Arrays.asList&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5e7436c99924a2c38b8714b1e9dd2189b9fa534e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String[]&lt;/code&gt; can be converted to a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; using &lt;a href=&quot;../../java/util/arrays#asList-T...-&quot;&gt;&lt;code&gt;Arrays.asList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;String[]&lt;/code&gt; A를 변환 할 수 있습니다 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 사용 &lt;a href=&quot;../../java/util/arrays#asList-T...-&quot;&gt; &lt;code&gt;Arrays.asList&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7a7e56015aefb2c91c33ffde725bf100e28b8a74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StubNotFoundException&lt;/code&gt; is thrown if a valid stub class could not be found for a remote object when it is exported.</source>
          <target state="translated">A &lt;code&gt;StubNotFoundException&lt;/code&gt; is thrown if a valid stub class could not be found for a remote object when it is exported.</target>
        </trans-unit>
        <trans-unit id="86f0d0afd7a91d757b2bea22dfacefb257c32c3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StubNotFoundException&lt;/code&gt; is thrown if a valid stub class could not be found for a remote object when it is exported. A &lt;code&gt;StubNotFoundException&lt;/code&gt; may also be thrown when an activatable object is registered via the &lt;code&gt;java.rmi.activation.Activatable.register&lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;StubNotFoundException&lt;/code&gt; is thrown if a valid stub class could not be found for a remote object when it is exported. A &lt;code&gt;StubNotFoundException&lt;/code&gt; may also be thrown when an activatable object is registered via the &lt;code&gt;java.rmi.activation.Activatable.register&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="f94dd11ea1cb9c0c1609ce1c124d27fea9c24183" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; may also own security-related attributes, which are referred to as credentials. Sensitive credentials that require special protection, such as private cryptographic keys, are stored within a private credential &lt;code&gt;Set&lt;/code&gt;. Credentials intended to be shared, such as public key certificates or Kerberos server tickets are stored within a public credential &lt;code&gt;Set&lt;/code&gt;. Different permissions are required to access and modify the different credential Sets.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 자격 증명이라고합니다 자체 보안 관련 속성도 할 수있다. 개인 암호화 키와 같은 특별한 보호가 필요한 민감한 자격 증명은 개인 자격 증명 &lt;code&gt;Set&lt;/code&gt; 내에 저장됩니다 . 공개 키 인증서 또는 Kerberos 서버 티켓과 같이 공유 할 자격 증명은 공개 자격 증명 &lt;code&gt;Set&lt;/code&gt; 내에 저장됩니다 . 다른 자격 증명 세트에 액세스하고 수정하려면 다른 권한이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="22269baf3728ed9f7d15e4ab750c278b8d5283a9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information for a single entity, such as a person.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; , 개인 등의 단일 엔티티에 관한 관련 정보의 그룹화를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="93c8ea0d491d86c0014097b3753fabb605464376" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information for a single entity, such as a person. Such information includes the Subject's identities as well as its security-related attributes (passwords and cryptographic keys, for example).</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; , 개인 등의 단일 엔티티에 관한 관련 정보의 그룹화를 나타냅니다. 이러한 정보에는 주체의 신원 및 보안 관련 속성 (예 : 비밀번호 및 암호 키)이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b4b96f4b0a834a875a405d5e37faefcc3df3352d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; updates ProtectionDomains with Principals from the &lt;code&gt;Subject&lt;/code&gt; associated with this &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SubjectDomainCombiner&lt;/code&gt; 에이 로부터 교장과의 ProtectionDomain를 업데이트 &lt;code&gt;Subject&lt;/code&gt; 이과 관련된 &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="228eae16184e9b6eedf87243ab41ab01541ff465" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SwitchPoint&lt;/code&gt; is an object which can publish state transitions to other threads.</source>
          <target state="translated">&lt;code&gt;SwitchPoint&lt;/code&gt; 다른 스레드에 상태 전환을 게시 할 수있는 개체입니다.</target>
        </trans-unit>
        <trans-unit id="be714f87cf38c5ca9056ac6e6285bffa2e095693" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SwitchPoint&lt;/code&gt; is an object which can publish state transitions to other threads. A switch point is initially in the &lt;em&gt;valid&lt;/em&gt; state, but may at any time be changed to the &lt;em&gt;invalid&lt;/em&gt; state. Invalidation cannot be reversed. A switch point can combine a &lt;em&gt;guarded pair&lt;/em&gt; of method handles into a &lt;em&gt;guarded delegator&lt;/em&gt;. The guarded delegator is a method handle which delegates to one of the old method handles. The state of the switch point determines which of the two gets the delegation.</source>
          <target state="translated">&lt;code&gt;SwitchPoint&lt;/code&gt; 다른 스레드에 상태 전환을 게시 할 수있는 개체입니다. 전환 지점은 처음에 &lt;em&gt;유효한&lt;/em&gt; 상태이지만 언제든지 &lt;em&gt;유효하지 않은&lt;/em&gt; 상태 로 변경 될 수 있습니다 . 무효화는 되돌릴 수 없습니다. 스위치 포인트는 &lt;em&gt;보호&lt;/em&gt; 된 메소드 핸들 &lt;em&gt;쌍&lt;/em&gt; 을 &lt;em&gt;보호 된 위임자&lt;/em&gt; 로 결합 할 수 있습니다 . 보호 된 위임자는 이전 메소드 핸들 중 하나에 위임하는 메소드 핸들입니다. 전환 지점의 상태에 따라 둘 중 어느 쪽이 위임을 받을지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="5e52e804a03b2b1c3cf01055a92fe4273f8ee447" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncMode&lt;/code&gt; object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device.</source>
          <target state="translated">&lt;code&gt;SyncMode&lt;/code&gt; 의 객체는 시간의 MIDI 시퀀서의 개념을 마스터 또는 슬레이브 디바이스와 동기화 할 수있는 방법 중 하나를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="57b963ed2297f7f44f5e670069b94a810a4c2b31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncMode&lt;/code&gt; object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device. If the sequencer is being synchronized to a master, the sequencer revises its current time in response to messages from the master. If the sequencer has a slave, the sequencer similarly sends messages to control the slave's timing.</source>
          <target state="translated">&lt;code&gt;SyncMode&lt;/code&gt; 의 객체는 시간의 MIDI 시퀀서의 개념을 마스터 또는 슬레이브 디바이스와 동기화 할 수있는 방법 중 하나를 나타냅니다. 시퀀서가 마스터와 동기화되는 경우 시퀀서는 마스터의 메시지에 대한 응답으로 현재 시간을 수정합니다. 시퀀서에 슬레이브가있는 경우, 시퀀서는 마찬가지로 슬레이브의 타이밍을 제어하기 위해 메시지를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="62066fb10b853bfb564b915079e0d4cc678eb458" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; implementation is identified by a unique ID, which is its fully qualified class name. This name must be registered with the &lt;code&gt;SyncFactory&lt;/code&gt; SPI, thus making the implementation available to all &lt;code&gt;RowSet&lt;/code&gt; implementations. The factory mechanism in the reference implementation uses this name to instantiate the implementation, which can then provide a &lt;code&gt;RowSet&lt;/code&gt; object with its reader (a &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; object) and its writer (a &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt; object).</source>
          <target state="translated">A &lt;code&gt;SyncProvider&lt;/code&gt; implementation is identified by a unique ID, which is its fully qualified class name. This name must be registered with the &lt;code&gt;SyncFactory&lt;/code&gt; SPI, thus making the implementation available to all &lt;code&gt;RowSet&lt;/code&gt; implementations. The factory mechanism in the reference implementation uses this name to instantiate the implementation, which can then provide a &lt;code&gt;RowSet&lt;/code&gt; object with its reader (a &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; object) and its writer (a &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt; object).</target>
        </trans-unit>
        <trans-unit id="7311d23c53b03da1bd1a98c374e6ec93bb6f7661" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; implementation may choose to implement a specific handler to handle a subset of query violations. However if an original query violation or a more general data source constraint violation is not handled by the &lt;code&gt;SyncProvider&lt;/code&gt; implementation, all &lt;code&gt;SyncProvider&lt;/code&gt; objects must throw a &lt;code&gt;SyncProviderException&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SyncProvider&lt;/code&gt; implementation may choose to implement a specific handler to handle a subset of query violations. However if an original query violation or a more general data source constraint violation is not handled by the &lt;code&gt;SyncProvider&lt;/code&gt; implementation, all &lt;code&gt;SyncProvider&lt;/code&gt; objects must throw a &lt;code&gt;SyncProviderException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5516c8268a0b200569e0ac4f643cb1d4ad44ce7d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; implementation provides a disconnected &lt;code&gt;RowSet&lt;/code&gt; object with the mechanisms for reading data into it and for writing data that has been modified in it back to the underlying data source. A</source>
          <target state="translated">A &lt;code&gt;SyncProvider&lt;/code&gt; implementation provides a disconnected &lt;code&gt;RowSet&lt;/code&gt; object with the mechanisms for reading data into it and for writing data that has been modified in it back to the underlying data source. A</target>
        </trans-unit>
        <trans-unit id="ae72098b6f26bacd5f99b6b566a7b1a93651c31c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; object provides a &lt;code&gt;CachedRowSet&lt;/code&gt; object with a reader (a &lt;code&gt;RowSetReader&lt;/code&gt; object) for reading data from a data source to populate itself with data. A reader can be implemented to read data from a &lt;code&gt;ResultSet&lt;/code&gt; object or from a file with a tabular format. A &lt;code&gt;SyncProvider&lt;/code&gt; object also provides a writer (a &lt;code&gt;RowSetWriter&lt;/code&gt; object) for synchronizing any modifications to the &lt;code&gt;CachedRowSet&lt;/code&gt; object's data made while it was disconnected with the data in the underlying data source.</source>
          <target state="translated">A &lt;code&gt;SyncProvider&lt;/code&gt; object provides a &lt;code&gt;CachedRowSet&lt;/code&gt; object with a reader (a &lt;code&gt;RowSetReader&lt;/code&gt; object) for reading data from a data source to populate itself with data. A reader can be implemented to read data from a &lt;code&gt;ResultSet&lt;/code&gt; object or from a file with a tabular format. A &lt;code&gt;SyncProvider&lt;/code&gt; object also provides a writer (a &lt;code&gt;RowSetWriter&lt;/code&gt; object) for synchronizing any modifications to the &lt;code&gt;CachedRowSet&lt;/code&gt; object's data made while it was disconnected with the data in the underlying data source.</target>
        </trans-unit>
        <trans-unit id="93658669de6bcc3dd7ce035782e1c13aab7a3cdb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProviderException&lt;/code&gt; object may or may not contain a description of the condition causing the exception. The inherited method &lt;code&gt;getMessage&lt;/code&gt; may be called to retrieve the description if there is one.</source>
          <target state="translated">A &lt;code&gt;SyncProviderException&lt;/code&gt; object may or may not contain a description of the condition causing the exception. The inherited method &lt;code&gt;getMessage&lt;/code&gt; may be called to retrieve the description if there is one.</target>
        </trans-unit>
        <trans-unit id="f773d096e13bb83540eb8a00687c0ec5277f9373" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncResolver&lt;/code&gt; object is a specialized &lt;code&gt;RowSet&lt;/code&gt; object that implements the &lt;code&gt;SyncResolver&lt;/code&gt; interface. It &lt;b&gt;may&lt;/b&gt; operate as either a connected &lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface) or a connected &lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface or one of its subinterfaces). For information on the subinterfaces, see the &lt;a href=&quot;../package-summary&quot;&gt;&lt;code&gt;javax.sql.rowset&lt;/code&gt;&lt;/a&gt; package description. The reference implementation for &lt;code&gt;SyncResolver&lt;/code&gt; implements the &lt;code&gt;CachedRowSet&lt;/code&gt; interface, but other implementations may choose to implement the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface to satisfy particular needs.</source>
          <target state="translated">A &lt;code&gt;SyncResolver&lt;/code&gt; object is a specialized &lt;code&gt;RowSet&lt;/code&gt; object that implements the &lt;code&gt;SyncResolver&lt;/code&gt; interface. It &lt;b&gt;may&lt;/b&gt; operate as either a connected &lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface) or a connected &lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface or one of its subinterfaces). For information on the subinterfaces, see the &lt;a href=&quot;../package-summary&quot;&gt; &lt;code&gt;javax.sql.rowset&lt;/code&gt; &lt;/a&gt; package description. The reference implementation for &lt;code&gt;SyncResolver&lt;/code&gt; implements the &lt;code&gt;CachedRowSet&lt;/code&gt; interface, but other implementations may choose to implement the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface to satisfy particular needs.</target>
        </trans-unit>
        <trans-unit id="831f70f37f0af58442c7772e629646eff1da65e4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncResolver&lt;/code&gt; object, which is a special kind of &lt;code&gt;CachedRowSet&lt;/code&gt; object or a &lt;code&gt;JdbcRowSet&lt;/code&gt; object that has implemented the &lt;code&gt;SyncResolver&lt;/code&gt; interface, examines the conflicts row by row. It is a duplicate of the &lt;code&gt;RowSet&lt;/code&gt; object being synchronized except that it contains only the data from the data source this is causing a conflict. All of the other column values are set to &lt;code&gt;null&lt;/code&gt;. To navigate from one conflict value to another, a &lt;code&gt;SyncResolver&lt;/code&gt; object provides the methods &lt;code&gt;nextConflict&lt;/code&gt; and &lt;code&gt;previousConflict&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SyncResolver&lt;/code&gt; object, which is a special kind of &lt;code&gt;CachedRowSet&lt;/code&gt; object or a &lt;code&gt;JdbcRowSet&lt;/code&gt; object that has implemented the &lt;code&gt;SyncResolver&lt;/code&gt; interface, examines the conflicts row by row. It is a duplicate of the &lt;code&gt;RowSet&lt;/code&gt; object being synchronized except that it contains only the data from the data source this is causing a conflict. All of the other column values are set to &lt;code&gt;null&lt;/code&gt; . To navigate from one conflict value to another, a &lt;code&gt;SyncResolver&lt;/code&gt; object provides the methods &lt;code&gt;nextConflict&lt;/code&gt; and &lt;code&gt;previousConflict&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20bd756a8d8c45d903c01414a26ff940cfa94c5b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound.</source>
          <target state="translated">&lt;code&gt;Synthesizer&lt;/code&gt; 사운드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6d0451cd1f434824db4bc18015bdc2300ec5a785" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound. This usually happens when one of the &lt;code&gt;Synthesizer&lt;/code&gt;'s &lt;a href=&quot;midichannel&quot;&gt;&lt;code&gt;MidiChannel&lt;/code&gt;&lt;/a&gt; objects receives a &lt;a href=&quot;midichannel#noteOn(int,int)&quot;&gt;&lt;code&gt;noteOn&lt;/code&gt;&lt;/a&gt; message, either directly or via the &lt;code&gt;Synthesizer&lt;/code&gt; object. Many &lt;code&gt;Synthesizer&lt;/code&gt;s support &lt;code&gt;Receivers&lt;/code&gt;, through which MIDI events can be delivered to the &lt;code&gt;Synthesizer&lt;/code&gt;. In such cases, the &lt;code&gt;Synthesizer&lt;/code&gt; typically responds by sending a corresponding message to the appropriate &lt;code&gt;MidiChannel&lt;/code&gt;, or by processing the event itself if the event isn't one of the MIDI channel messages.</source>
          <target state="translated">A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound. This usually happens when one of the &lt;code&gt;Synthesizer&lt;/code&gt; 's &lt;a href=&quot;midichannel&quot;&gt; &lt;code&gt;MidiChannel&lt;/code&gt; &lt;/a&gt; objects receives a &lt;a href=&quot;midichannel#noteOn(int,int)&quot;&gt; &lt;code&gt;noteOn&lt;/code&gt; &lt;/a&gt; message, either directly or via the &lt;code&gt;Synthesizer&lt;/code&gt; object. Many &lt;code&gt;Synthesizer&lt;/code&gt; s support &lt;code&gt;Receivers&lt;/code&gt; , through which MIDI events can be delivered to the &lt;code&gt;Synthesizer&lt;/code&gt; . In such cases, the &lt;code&gt;Synthesizer&lt;/code&gt; typically responds by sending a corresponding message to the appropriate &lt;code&gt;MidiChannel&lt;/code&gt; , or by processing the event itself if the event isn't one of the MIDI channel messages.</target>
        </trans-unit>
        <trans-unit id="a603b4809d42d4f273b7e8030849821e379b8887" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound. This usually happens when one of the &lt;code&gt;Synthesizer&lt;/code&gt;'s &lt;a href=&quot;midichannel&quot;&gt;&lt;code&gt;MidiChannel&lt;/code&gt;&lt;/a&gt; objects receives a &lt;a href=&quot;midichannel#noteOn-int-int-&quot;&gt;&lt;code&gt;noteOn&lt;/code&gt;&lt;/a&gt; message, either directly or via the &lt;code&gt;Synthesizer&lt;/code&gt; object. Many &lt;code&gt;Synthesizer&lt;/code&gt;s support &lt;code&gt;Receivers&lt;/code&gt;, through which MIDI events can be delivered to the &lt;code&gt;Synthesizer&lt;/code&gt;. In such cases, the &lt;code&gt;Synthesizer&lt;/code&gt; typically responds by sending a corresponding message to the appropriate &lt;code&gt;MidiChannel&lt;/code&gt;, or by processing the event itself if the event isn't one of the MIDI channel messages.</source>
          <target state="translated">&lt;code&gt;Synthesizer&lt;/code&gt; 사운드를 생성합니다. 일반적으로 &lt;code&gt;Synthesizer&lt;/code&gt; 의 &lt;a href=&quot;midichannel&quot;&gt; &lt;code&gt;MidiChannel&lt;/code&gt; &lt;/a&gt; 객체 중 하나가 직접 또는 &lt;code&gt;Synthesizer&lt;/code&gt; 객체 를 통해 &lt;a href=&quot;midichannel#noteOn-int-int-&quot;&gt; &lt;code&gt;noteOn&lt;/code&gt; &lt;/a&gt; 메시지를 수신 할 때 발생 합니다. 많은 &lt;code&gt;Synthesizer&lt;/code&gt; 는 MIDI 이벤트를 &lt;code&gt;Synthesizer&lt;/code&gt; 로 전달할 수있는 &lt;code&gt;Receivers&lt;/code&gt; 지원 합니다 . 이러한 경우 &lt;code&gt;Synthesizer&lt;/code&gt; 일반적으로 해당 메시지를 적절한 &lt;code&gt;MidiChannel&lt;/code&gt; 에 보내 거나 이벤트가 MIDI 채널 메시지 중 하나가 아닌 경우 이벤트 자체를 처리하여 응답 합니다.</target>
        </trans-unit>
        <trans-unit id="f4ee297ddf421454f00e52bd94c3be8de88eacbd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SysexMessage&lt;/code&gt; object represents a MIDI system exclusive message.</source>
          <target state="translated">&lt;code&gt;SysexMessage&lt;/code&gt; 의 객체는 MIDI 시스템 독점 메시지를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b424007adfcafcda69dcf202fdc35d2c353d59d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFDirectory&lt;/code&gt; is aware of the tag numbers in the group of &lt;a href=&quot;tifftagset&quot;&gt;&lt;code&gt;TIFFTagSet&lt;/code&gt;&lt;/a&gt;s associated with it. When a &lt;code&gt;TIFFDirectory&lt;/code&gt; is created from a native image metadata object, these tag sets are derived from the &lt;code&gt;tagSets&lt;/code&gt; attribute of the &lt;code&gt;TIFFIFD&lt;/code&gt; node.</source>
          <target state="translated">A &lt;code&gt;TIFFDirectory&lt;/code&gt; is aware of the tag numbers in the group of &lt;a href=&quot;tifftagset&quot;&gt; &lt;code&gt;TIFFTagSet&lt;/code&gt; &lt;/a&gt;s associated with it. When a &lt;code&gt;TIFFDirectory&lt;/code&gt; is created from a native image metadata object, these tag sets are derived from the &lt;code&gt;tagSets&lt;/code&gt; attribute of the &lt;code&gt;TIFFIFD&lt;/code&gt; node.</target>
        </trans-unit>
        <trans-unit id="875ad0a723fa0c853b7894c344e24746b670155a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFDirectory&lt;/code&gt; might also have a parent &lt;a href=&quot;tifftag&quot;&gt;&lt;code&gt;TIFFTag&lt;/code&gt;&lt;/a&gt;. This will occur if the directory represents an IFD other than the root IFD of the image. The parent tag is the tag of the IFD Entry which is a pointer to the IFD represented by this &lt;code&gt;TIFFDirectory&lt;/code&gt;. The &lt;a href=&quot;tifftag#isIFDPointer()&quot;&gt;&lt;code&gt;TIFFTag.isIFDPointer()&lt;/code&gt;&lt;/a&gt; method of this parent &lt;code&gt;TIFFTag&lt;/code&gt; must return &lt;code&gt;true&lt;/code&gt;. When a &lt;code&gt;TIFFDirectory&lt;/code&gt; is created from a native image metadata object, the parent tag set is set from the &lt;code&gt;parentTagName&lt;/code&gt; attribute of the corresponding &lt;code&gt;TIFFIFD&lt;/code&gt; node. Note that a &lt;code&gt;TIFFDirectory&lt;/code&gt; instance which has a non-&lt;code&gt;null&lt;/code&gt; parent tag will be contained in the data field of a &lt;code&gt;TIFFField&lt;/code&gt; instance which has a tag field equal to the contained directory's parent tag.</source>
          <target state="translated">A &lt;code&gt;TIFFDirectory&lt;/code&gt; might also have a parent &lt;a href=&quot;tifftag&quot;&gt; &lt;code&gt;TIFFTag&lt;/code&gt; &lt;/a&gt;. This will occur if the directory represents an IFD other than the root IFD of the image. The parent tag is the tag of the IFD Entry which is a pointer to the IFD represented by this &lt;code&gt;TIFFDirectory&lt;/code&gt; . The &lt;a href=&quot;tifftag#isIFDPointer()&quot;&gt; &lt;code&gt;TIFFTag.isIFDPointer()&lt;/code&gt; &lt;/a&gt; method of this parent &lt;code&gt;TIFFTag&lt;/code&gt; must return &lt;code&gt;true&lt;/code&gt; . When a &lt;code&gt;TIFFDirectory&lt;/code&gt; is created from a native image metadata object, the parent tag set is set from the &lt;code&gt;parentTagName&lt;/code&gt; attribute of the corresponding &lt;code&gt;TIFFIFD&lt;/code&gt; node. Note that a &lt;code&gt;TIFFDirectory&lt;/code&gt; instance which has a non- &lt;code&gt;null&lt;/code&gt; parent tag will be contained in the data field of a &lt;code&gt;TIFFField&lt;/code&gt; instance which has a tag field equal to the contained directory's parent tag.</target>
        </trans-unit>
        <trans-unit id="b9ae6f29cddcbce47dd7709903ac63f6215ae140" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFDirectory&lt;/code&gt; populated from the contents of the supplied metadata object.</source>
          <target state="translated">A &lt;code&gt;TIFFDirectory&lt;/code&gt; populated from the contents of the supplied metadata object.</target>
        </trans-unit>
        <trans-unit id="7d368c530bab22fa4adc6ff07c537517c0d110c3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFField&lt;/code&gt; with the requested tag number of &lt;code&gt;null&lt;/code&gt; if no such field is present.</source>
          <target state="translated">A &lt;code&gt;TIFFField&lt;/code&gt; with the requested tag number of &lt;code&gt;null&lt;/code&gt; if no such field is present.</target>
        </trans-unit>
        <trans-unit id="18150cd8e4b4c4f831b53d6d503460e64ffc67ff" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFF_UNDEFINED&lt;/code&gt; value is treated as though it were a &lt;code&gt;TIFF_BYTE&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;TIFF_UNDEFINED&lt;/code&gt; value is treated as though it were a &lt;code&gt;TIFF_BYTE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="22ce405197c16d33cb4946bf9dd4035759d81e7a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog blocks all top-level windows run from the same toolkit except those from its own child hierarchy.</source>
          <target state="translated">A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog blocks all top-level windows run from the same toolkit except those from its own child hierarchy.</target>
        </trans-unit>
        <trans-unit id="dae47f9fbdf14ab4d9052bb6ec8de9a9fed7d448" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog blocks all top-level windows run from the same toolkit except those from its own child hierarchy. If there are several applets launched in a browser, all of them run with the same toolkit; thus, a toolkit-modal dialog displayed by an applet may affect other applets and all windows of the browser instance which embeds the Java runtime environment for this toolkit. Special &lt;code&gt;AWTPermission&lt;/code&gt; &quot;toolkitModality&quot; must be granted to use toolkit-modal dialogs. If a &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog is being created and this permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown, and no dialog will be created. If a modality type is being changed to &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; and this permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown, and the modality type will be left unchanged.</source>
          <target state="translated">A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog blocks all top-level windows run from the same toolkit except those from its own child hierarchy. If there are several applets launched in a browser, all of them run with the same toolkit; thus, a toolkit-modal dialog displayed by an applet may affect other applets and all windows of the browser instance which embeds the Java runtime environment for this toolkit. Special &lt;code&gt;AWTPermission&lt;/code&gt; &quot;toolkitModality&quot; must be granted to use toolkit-modal dialogs. If a &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog is being created and this permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown, and no dialog will be created. If a modality type is being changed to &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; and this permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown, and the modality type will be left unchanged.</target>
        </trans-unit>
        <trans-unit id="1d5fc4695449c52b91505450f62d8103e6563969" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TableColumn&lt;/code&gt; represents all the attributes of a column in a &lt;code&gt;JTable&lt;/code&gt;, such as width, resizability, minimum and maximum width.</source>
          <target state="translated">A &lt;code&gt;TableColumn&lt;/code&gt; represents all the attributes of a column in a &lt;code&gt;JTable&lt;/code&gt; , such as width, resizability, minimum and maximum width.</target>
        </trans-unit>
        <trans-unit id="53c87258f33aeaa9bb8627a37e666b4dfc91a5e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TableColumn&lt;/code&gt; represents all the attributes of a column in a &lt;code&gt;JTable&lt;/code&gt;, such as width, resizability, minimum and maximum width. In addition, the &lt;code&gt;TableColumn&lt;/code&gt; provides slots for a renderer and an editor that can be used to display and edit the values in this column.</source>
          <target state="translated">A &lt;code&gt;TableColumn&lt;/code&gt; represents all the attributes of a column in a &lt;code&gt;JTable&lt;/code&gt; , such as width, resizability, minimum and maximum width. In addition, the &lt;code&gt;TableColumn&lt;/code&gt; provides slots for a renderer and an editor that can be used to display and edit the values in this column.</target>
        </trans-unit>
        <trans-unit id="e2859b19ec78253d2ceb32f653234edc9de0e75e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TabularType&lt;/code&gt; is assignable from another &lt;code&gt;
 TabularType&lt;/code&gt; if they have the same &lt;a href=&quot;opentype#getTypeName()&quot;&gt;typeName&lt;/a&gt; and &lt;a href=&quot;tabulartype#getIndexNames()&quot;&gt;index name list&lt;/a&gt;, and the &lt;a href=&quot;tabulartype#getRowType()&quot;&gt;row type&lt;/a&gt; of the first is assignable from the row type of the second.</source>
          <target state="translated">A &lt;code&gt;TabularType&lt;/code&gt; is assignable from another &lt;code&gt; TabularType&lt;/code&gt; if they have the same &lt;a href=&quot;opentype#getTypeName()&quot;&gt;typeName&lt;/a&gt; and &lt;a href=&quot;tabulartype#getIndexNames()&quot;&gt;index name list&lt;/a&gt;, and the &lt;a href=&quot;tabulartype#getRowType()&quot;&gt;row type&lt;/a&gt; of the first is assignable from the row type of the second.</target>
        </trans-unit>
        <trans-unit id="00b7508b878aac3376b48986794450063c3d2c33" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TabularType&lt;/code&gt; is assignable from another &lt;code&gt;TabularType&lt;/code&gt; if they have the same &lt;a href=&quot;opentype#getTypeName--&quot;&gt;typeName&lt;/a&gt; and &lt;a href=&quot;tabulartype#getIndexNames--&quot;&gt;index name list&lt;/a&gt;, and the &lt;a href=&quot;tabulartype#getRowType--&quot;&gt;row type&lt;/a&gt; of the first is assignable from the row type of the second.</source>
          <target state="translated">&lt;code&gt;TabularType&lt;/code&gt; 서로 어사 인 &lt;code&gt;TabularType&lt;/code&gt; 가 동일한 있다면 &lt;a href=&quot;opentype#getTypeName--&quot;&gt;유형 이름&lt;/a&gt; 과 &lt;a href=&quot;tabulartype#getIndexNames--&quot;&gt;인덱스 이름리스트&lt;/a&gt; 및 &lt;a href=&quot;tabulartype#getRowType--&quot;&gt;열 타입&lt;/a&gt; 번째의 열 타입에서 할당되는 제있다.</target>
        </trans-unit>
        <trans-unit id="bcb12be556933750047f1bf21aca57c7527723b3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TemporalAccessor&lt;/code&gt; represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of &lt;code&gt;ZoneId&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TemporalAccessor&lt;/code&gt; 는 날짜 및 시간 정보의 형태를 나타냅니다. 이 팩토리는 임의의 시간 객체를 &lt;code&gt;ZoneId&lt;/code&gt; 인스턴스로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="6686144140c8aaa5fced7bb05302a39e575ea1b7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TemporalAccessor&lt;/code&gt; represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of &lt;code&gt;ZoneOffset&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TemporalAccessor&lt;/code&gt; 는 날짜 및 시간 정보의 형태를 나타냅니다. 이 팩토리는 임의의 시간 객체를 &lt;code&gt;ZoneOffset&lt;/code&gt; 인스턴스로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="357c0e971e0c7765b80d26848f102f0a3d8cd9d9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextArea&lt;/code&gt; object is a multi-line region that displays text.</source>
          <target state="translated">A &lt;code&gt;TextArea&lt;/code&gt; object is a multi-line region that displays text.</target>
        </trans-unit>
        <trans-unit id="318888287335146bdbda48f609997d911e60975b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextArea&lt;/code&gt; object is a multi-line region that displays text. It can be set to allow editing or to be read-only.</source>
          <target state="translated">&lt;code&gt;TextArea&lt;/code&gt; 객체는 텍스트를 표시하는 복 수행 영역입니다. 편집을 허용하거나 읽기 전용으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c77b86a697f7cee769c19456b5b3de357feac93b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextField&lt;/code&gt; object is a text component that allows for the editing of a single line of text.</source>
          <target state="translated">&lt;code&gt;TextField&lt;/code&gt; 오브젝트는, 1 행의 텍스트의 편집을 실시 할 수 있도록 텍스트 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="6a5d1aafeb71fab06ca3a506802e9ed098926fbf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextLayout&lt;/code&gt; object can be rendered using its &lt;code&gt;draw&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;TextLayout&lt;/code&gt; 오브젝트는 그 사용하여 렌더링 될 수 &lt;code&gt;draw&lt;/code&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="f4debc510b5d9cbf0f9f7bb8fb97f710bb844a5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextListener&lt;/code&gt; object is registered via &lt;code&gt;addTextListener&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TextListener&lt;/code&gt; 개체에 의해 등록되어 &lt;code&gt;addTextListener&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db1af988d6eb91e12d54f00858b58528022db90e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextMeasurer&lt;/code&gt; object is constructed with an &lt;a href=&quot;../../../../java.base/java/text/attributedcharacteriterator&quot;&gt;&lt;code&gt;AttributedCharacterIterator&lt;/code&gt;&lt;/a&gt; representing a single paragraph of text. The value returned by the &lt;a href=&quot;../../../../java.base/java/text/characteriterator#getBeginIndex()&quot;&gt;&lt;code&gt;getBeginIndex&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; defines the absolute index of the first character. The value returned by the &lt;a href=&quot;../../../../java.base/java/text/characteriterator#getEndIndex()&quot;&gt;&lt;code&gt;getEndIndex&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; defines the index past the last character. These values define the range of indexes to use in calls to the &lt;code&gt;TextMeasurer&lt;/code&gt;. For example, calls to get the advance of a range of text or the line break of a range of text must use indexes between the beginning and end index values. Calls to &lt;a href=&quot;#insertChar(java.text.AttributedCharacterIterator,int)&quot;&gt;&lt;code&gt;insertChar&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#deleteChar(java.text.AttributedCharacterIterator,int)&quot;&gt;&lt;code&gt;deleteChar&lt;/code&gt;&lt;/a&gt; reset the &lt;code&gt;TextMeasurer&lt;/code&gt; to use the beginning index and end index of the &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; passed in those calls.</source>
          <target state="translated">&lt;code&gt;TextMeasurer&lt;/code&gt; 객체는로 구성되어 &lt;a href=&quot;../../../../java.base/java/text/attributedcharacteriterator&quot;&gt; &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; &lt;/a&gt; 1 단락의 텍스트를 나타내는. &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; 의 &lt;a href=&quot;../../../../java.base/java/text/characteriterator#getBeginIndex()&quot;&gt; &lt;code&gt;getBeginIndex&lt;/code&gt; &lt;/a&gt; 메소드가 리턴 한 값 은 첫 번째 문자의 절대 색인을 정의합니다. &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; 의 &lt;a href=&quot;../../../../java.base/java/text/characteriterator#getEndIndex()&quot;&gt; &lt;code&gt;getEndIndex&lt;/code&gt; &lt;/a&gt; 메소드에 의해 리턴 된 값 은 마지막 문자 이후의 색인을 정의합니다. 이러한 값은 &lt;code&gt;TextMeasurer&lt;/code&gt; 호출에 사용할 인덱스 범위를 정의 합니다 . 예를 들어, 텍스트 범위의 앞이나 텍스트 범위의 줄 바꿈을 가져 오는 호출은 시작과 끝 인덱스 값 사이에 인덱스를 사용해야합니다. 를 호출 &lt;a href=&quot;#insertChar(java.text.AttributedCharacterIterator,int)&quot;&gt; &lt;code&gt;insertChar&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;#deleteChar(java.text.AttributedCharacterIterator,int)&quot;&gt; &lt;code&gt;deleteChar&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;TextMeasurer&lt;/code&gt; 를재설정하여해당 호출에서 전달 된 &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; 의 시작 인덱스와 끝 인덱스를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="432dd0288e2dea2a07b238ecf158d33313a9be1e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; will automatically adjust the pool size (see &lt;a href=&quot;#getPoolSize()&quot;&gt;&lt;code&gt;getPoolSize()&lt;/code&gt;&lt;/a&gt;) according to the bounds set by corePoolSize (see &lt;a href=&quot;#getCorePoolSize()&quot;&gt;&lt;code&gt;getCorePoolSize()&lt;/code&gt;&lt;/a&gt;) and maximumPoolSize (see &lt;a href=&quot;#getMaximumPoolSize()&quot;&gt;&lt;code&gt;getMaximumPoolSize()&lt;/code&gt;&lt;/a&gt;). When a new task is submitted in method &lt;a href=&quot;#execute(java.lang.Runnable)&quot;&gt;&lt;code&gt;execute(Runnable)&lt;/code&gt;&lt;/a&gt;, if fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. Else if fewer than maximumPoolSize threads are running, a new thread will be created to handle the request only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using &lt;a href=&quot;#setCorePoolSize(int)&quot;&gt;&lt;code&gt;setCorePoolSize(int)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#setMaximumPoolSize(int)&quot;&gt;&lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ThreadPoolExecutor&lt;/code&gt; 에가 자동 풀 크기를 조절한다 (참조 &lt;a href=&quot;#getPoolSize()&quot;&gt; &lt;code&gt;getPoolSize()&lt;/code&gt; &lt;/a&gt; ) corePoolSize를 정한 범위에 따라 (참조 &lt;a href=&quot;#getCorePoolSize()&quot;&gt; &lt;code&gt;getCorePoolSize()&lt;/code&gt; &lt;/a&gt; )와 maximumPoolSize를 (참조 &lt;a href=&quot;#getMaximumPoolSize()&quot;&gt; &lt;code&gt;getMaximumPoolSize()&lt;/code&gt; &lt;/a&gt; ). 새 작업이 &lt;a href=&quot;#execute(java.lang.Runnable)&quot;&gt; &lt;code&gt;execute(Runnable)&lt;/code&gt; &lt;/a&gt; 메서드에 제출 될 때 corePoolSize 스레드보다 적은 수의 스레드가 실행 중이면 다른 작업자 스레드가 유휴 상태 인 경우에도 요청을 처리하기 위해 새 스레드가 생성됩니다. 그렇지 않으면 maximumPoolSize보다 적은 스레드가 실행중인 경우 큐가 가득 찬 경우에만 요청을 처리하기 위해 새 스레드가 생성됩니다. corePoolSize 및 maximumPoolSize를 동일하게 설정하여 고정 크기 스레드 풀을 만듭니다. maximumPoolSize를 &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; 와 같은 본질적으로 제한되지 않은 값으로 설정하여, 풀이 임의의 수의 동시 작업을 수용하도록 허용합니다. 대부분의 경우 코어 및 최대 풀 크기는 생성시에만 설정되지만 &lt;a href=&quot;#setCorePoolSize(int)&quot;&gt; &lt;code&gt;setCorePoolSize(int)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#setMaximumPoolSize(int)&quot;&gt; &lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt; &lt;/a&gt; 사용하여 동적으로 변경할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c5b7cf009138d5d0f2fff7b982816adbb7fce9da" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; will automatically adjust the pool size (see &lt;a href=&quot;threadpoolexecutor#getPoolSize--&quot;&gt;&lt;code&gt;getPoolSize()&lt;/code&gt;&lt;/a&gt;) according to the bounds set by corePoolSize (see &lt;a href=&quot;threadpoolexecutor#getCorePoolSize--&quot;&gt;&lt;code&gt;getCorePoolSize()&lt;/code&gt;&lt;/a&gt;) and maximumPoolSize (see &lt;a href=&quot;threadpoolexecutor#getMaximumPoolSize--&quot;&gt;&lt;code&gt;getMaximumPoolSize()&lt;/code&gt;&lt;/a&gt;). When a new task is submitted in method &lt;a href=&quot;threadpoolexecutor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute(Runnable)&lt;/code&gt;&lt;/a&gt;, and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using &lt;a href=&quot;threadpoolexecutor#setCorePoolSize-int-&quot;&gt;&lt;code&gt;setCorePoolSize(int)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;threadpoolexecutor#setMaximumPoolSize-int-&quot;&gt;&lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ThreadPoolExecutor&lt;/code&gt; 에가 자동 풀 크기를 조절한다 (참조 &lt;a href=&quot;threadpoolexecutor#getPoolSize--&quot;&gt; &lt;code&gt;getPoolSize()&lt;/code&gt; &lt;/a&gt; ) corePoolSize를 정한 범위에 따라 (참조 &lt;a href=&quot;threadpoolexecutor#getCorePoolSize--&quot;&gt; &lt;code&gt;getCorePoolSize()&lt;/code&gt; &lt;/a&gt; )와 maximumPoolSize를 (참조 &lt;a href=&quot;threadpoolexecutor#getMaximumPoolSize--&quot;&gt; &lt;code&gt;getMaximumPoolSize()&lt;/code&gt; &lt;/a&gt; ). &lt;a href=&quot;threadpoolexecutor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute(Runnable)&lt;/code&gt; &lt;/a&gt; 메소드에서 새 태스크가 제출되고 corePoolSize 스레드보다 적은 수의 스레드가 실행중인 경우 다른 작업자 스레드가 유휴 상태 인 경우에도 요청을 처리하기 위해 새 스레드가 작성됩니다. corePoolSize 이상이지만 maximumPoolSize 미만의 스레드가 실행중인 경우 큐가 가득 찬 경우에만 새 스레드가 작성됩니다. corePoolSize와 maximumPoolSize를 동일하게 설정하여 고정 크기 스레드 풀을 만듭니다. maximumPoolSize를 본질적으로 제한되지 않은 값 (예 : &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; 이면 풀에서 임의의 수의 동시 작업을 수용 할 수 있습니다. 가장 일반적으로 코어 및 최대 풀 크기는 구성시에만 설정되지만 &lt;a href=&quot;threadpoolexecutor#setCorePoolSize-int-&quot;&gt; &lt;code&gt;setCorePoolSize(int)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;threadpoolexecutor#setMaximumPoolSize-int-&quot;&gt; &lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt; &lt;/a&gt; 사용하여 동적으로 변경 될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eca1f8984467324213270372e3af64cb7babf441" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; is mainly used to inform time-based methods how a given timing parameter should be interpreted. For example, the following code will timeout in 50 milliseconds if the &lt;a href=&quot;locks/lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; is not available:</source>
          <target state="translated">&lt;code&gt;TimeUnit&lt;/code&gt; 와는 주로 주어진 타이밍 파라미터 해석되어야하는 시간 기반 방법을 알리기 위해 사용된다. 예를 들어, &lt;a href=&quot;locks/lock&quot;&gt; &lt;code&gt;lock&lt;/code&gt; &lt;/a&gt; 사용할 수없는 경우 다음 코드는 50 밀리 초 내에 시간 초과됩니다 .</target>
        </trans-unit>
        <trans-unit id="f23aa9e76a05136ff2469933ea4a3b3c24e042ea" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units.</source>
          <target state="translated">&lt;code&gt;TimeUnit&lt;/code&gt; 와는 지정된 입도 단위로 시간을 나타내고, 단위에서 변환 할 유틸리티 메소드를 제공하고,이 단위로 타이밍 및 지연 조작을 수행.</target>
        </trans-unit>
        <trans-unit id="cbde8d639f9de2af0b3456b7b9535eba31789a55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. A &lt;code&gt;TimeUnit&lt;/code&gt; does not maintain time information, but only helps organize and use time representations that may be maintained separately across various contexts. A nanosecond is defined as one thousandth of a microsecond, a microsecond as one thousandth of a millisecond, a millisecond as one thousandth of a second, a minute as sixty seconds, an hour as sixty minutes, and a day as twenty four hours.</source>
          <target state="translated">&lt;code&gt;TimeUnit&lt;/code&gt; 와는 지정된 입도 단위로 시간을 나타내고, 단위에서 변환 할 유틸리티 메소드를 제공하고,이 단위로 타이밍 및 지연 조작을 수행. &lt;code&gt;TimeUnit&lt;/code&gt; 와는 시간 정보를 유지하지만 구성과 별도로 다양한 상황에 걸쳐 유지 될 수 사용 시간 표현하는 데 도움이되지 않습니다. 나노초는 1/100 분의 1 초, 1 분의 1 분의 1 밀리 초, 1 분의 1 분의 1 초, 60 분의 1 분, 60 분의 1 시간 및 24 시간의 하루로 정의된다.</target>
        </trans-unit>
        <trans-unit id="401c628905e0a284f93c6e1b743bb8e851f83229" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Track&lt;/code&gt; occupies a middle level in the hierarchy of data played by a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;: sequencers play sequences, which contain tracks, which contain MIDI events. A sequencer may provide controls that mute or solo individual tracks.</source>
          <target state="translated">&lt;code&gt;Track&lt;/code&gt; a로 연주 데이터의 계층 구조에서 중간 수준 차지 &lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt; : 시퀀서는 MIDI 이벤트를 포함하는 트랙을 포함 시퀀스를 재생할 수 있습니다. 시퀀서는 개별 트랙을 음소거하거나 솔로하는 컨트롤을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb72ddaf5fa462b8e5b5a29713baefb0b3439f3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Track&lt;/code&gt; occupies a middle level in the hierarchy of data played by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;: sequencers play sequences, which contain tracks, which contain MIDI events. A sequencer may provide controls that mute or solo individual tracks.</source>
          <target state="translated">&lt;code&gt;Track&lt;/code&gt; a로 연주 데이터의 계층 구조에서 중간 수준 차지 &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; : 시퀀서는 MIDI 이벤트를 포함하는 트랙을 포함 시퀀스를 재생할 수 있습니다. 시퀀서는 개별 트랙을 음소거하거나 독주하는 컨트롤을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7dca9c7ff91e154dc11c0176a814ef0d3b792503" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transferable&lt;/code&gt; which implements the capability required to transfer a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 을 전송하는 데 필요한 기능을 구현 하는 &lt;code&gt;Transferable&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="22f9024613781cfd1bae219663a121319c797eee" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transform&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)&quot;&gt;&lt;code&gt;newTransform&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;Transform&lt;/code&gt; 예는 호출에 의해 생성 될 수있다 &lt;a href=&quot;xmlsignaturefactory#newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)&quot;&gt; &lt;code&gt;newTransform&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; 클래스.</target>
        </trans-unit>
        <trans-unit id="ce8eb8ae483b249dde3a67758552767732ab705e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TransformAttribute&lt;/code&gt; representing the identity transform.</source>
          <target state="translated">&lt;code&gt;TransformAttribute&lt;/code&gt; 의는 정체성 변환을 나타내는.</target>
        </trans-unit>
        <trans-unit id="794d6415c9a0902d8857c3f3d41bcb725804988a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TransformException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;TransformException&lt;/code&gt; to get thrown.</source>
          <target state="translated">&lt;code&gt;TransformException&lt;/code&gt; 는 이 발생하는 또 다른 throw 가능 객체 : 원인 포함 할 수 있습니다 &lt;code&gt;TransformException&lt;/code&gt; 가 던져하기를.</target>
        </trans-unit>
        <trans-unit id="6f1ebdad4154be73db70650d4c661a605d4d5a60" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transformer&lt;/code&gt; may be used multiple times. Parameters and output properties are preserved across transformations.</source>
          <target state="translated">&lt;code&gt;Transformer&lt;/code&gt; 여러 번 사용할 수있다. 매개 변수와 출력 속성은 변환에서 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="d7d7308b87cdcd31a24c3b2985ced7b66eb3d439" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transformer&lt;/code&gt; object that may be used to perform a transformation in a single &lt;code&gt;Thread&lt;/code&gt;, never &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Transformer&lt;/code&gt; 하나의 변환을 수행하는데 사용될 수있다 대상 &lt;code&gt;Thread&lt;/code&gt; 결코 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5fef58fcbfbb311f387986c4ba19267aa872e583" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects to one or more &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Transmitter&lt;/code&gt; 전송 &lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; 를가&lt;/a&gt; 하나 개 이상의 오브젝트 &lt;a href=&quot;receiver&quot;&gt; &lt;code&gt;Receivers&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3e98f51d396b18ef7f7ea6a95ac3f4559c6c559e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects to one or more &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;. Common MIDI transmitters include sequencers and MIDI input ports.</source>
          <target state="translated">&lt;code&gt;Transmitter&lt;/code&gt; 전송 &lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; 를가&lt;/a&gt; 하나 개 이상의 오브젝트 &lt;a href=&quot;receiver&quot;&gt; &lt;code&gt;Receivers&lt;/code&gt; &lt;/a&gt; . 일반적인 MIDI 송신기에는 시퀀서와 MIDI 입력 포트가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="47f7ecde27375f051e8d2dbe61836c772a17041b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to one or more &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Transmitter&lt;/code&gt; 전송 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를가 하나 개 이상의 오브젝트 &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab5f5a092ccddf7f0ff4eb7494123a9cb8a192eb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to one or more &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. Common MIDI transmitters include sequencers and MIDI input ports.</source>
          <target state="translated">&lt;code&gt;Transmitter&lt;/code&gt; 전송 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를가 하나 개 이상의 오브젝트 &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; . 일반적인 MIDI 송신기에는 시퀀서와 MIDI 입력 포트가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c43c787dc6ab76efe4badde6c83e22211538613c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; can generate an &lt;a href=&quot;event/actionevent&quot;&gt;&lt;code&gt;ActionEvent&lt;/code&gt;&lt;/a&gt;. On some platforms, this occurs when the user selects the tray icon using either the mouse or keyboard.</source>
          <target state="translated">&lt;code&gt;TrayIcon&lt;/code&gt; 에는 생성 할 수 &lt;a href=&quot;event/actionevent&quot;&gt; &lt;code&gt;ActionEvent&lt;/code&gt; &lt;/a&gt; . 일부 플랫폼에서는 사용자가 마우스 또는 키보드를 사용하여 트레이 아이콘을 선택할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="466337adb8accff8d5b78bd4e68c60e9d871eb35" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; can generate various &lt;a href=&quot;event/mouseevent&quot;&gt;&lt;code&gt;MouseEvents&lt;/code&gt;&lt;/a&gt; and supports adding corresponding listeners to receive notification of these events. &lt;code&gt;TrayIcon&lt;/code&gt; processes some of the events by itself. For example, by default, when the right-mouse click is performed on the &lt;code&gt;TrayIcon&lt;/code&gt; it displays the specified popup menu. When the mouse hovers over the &lt;code&gt;TrayIcon&lt;/code&gt; the tooltip is displayed (this behaviour is platform dependent).</source>
          <target state="translated">&lt;code&gt;TrayIcon&lt;/code&gt; 에는 다양한 생성 할 수 있습니다 &lt;a href=&quot;event/mouseevent&quot;&gt; &lt;code&gt;MouseEvents&lt;/code&gt; &lt;/a&gt; 이러한 이벤트의 알림을 받으려면 해당하는 청취자를 추가하고 지원합니다. &lt;code&gt;TrayIcon&lt;/code&gt; 은 자체적으로 일부 이벤트를 처리합니다. 예를 들어, 기본적으로 &lt;code&gt;TrayIcon&lt;/code&gt; 에서 마우스 오른쪽 버튼을 클릭 하면 지정된 팝업 메뉴가 표시됩니다. 마우스를 &lt;code&gt;TrayIcon&lt;/code&gt; 위로 가져 가면 툴팁이 표시됩니다 (이 동작은 플랫폼에 따라 다름).</target>
        </trans-unit>
        <trans-unit id="c6f001286c01c45c4daea4afa2c0d9a72aa6a0f1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; object represents a tray icon that can be added to the &lt;a href=&quot;systemtray&quot;&gt;&lt;code&gt;system tray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TrayIcon&lt;/code&gt; 에의 객체가 추가 될 수있는 트레이 아이콘 나타내는 &lt;a href=&quot;systemtray&quot;&gt; &lt;code&gt;system tray&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8946c319e955d2eb9e506aa6eba7bd114aeb5444" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; object represents a tray icon that can be added to the &lt;a href=&quot;systemtray&quot;&gt;&lt;code&gt;system tray&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;TrayIcon&lt;/code&gt; can have a tooltip (text), an image, a popup menu, and a set of listeners associated with it.</source>
          <target state="translated">&lt;code&gt;TrayIcon&lt;/code&gt; 에의 객체가 추가 될 수있는 트레이 아이콘 나타내는 &lt;a href=&quot;systemtray&quot;&gt; &lt;code&gt;system tray&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;TrayIcon&lt;/code&gt; 에는 툴팁 (텍스트), 이미지, 팝업 메뉴, 그리고 그와 관련된 청취자의 집합을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f07b1f8a803b8ad8312fc19de57667c518e2327f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TreeCellEditor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TreeCellEditor&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d10b5b132d04669d5f36e25776be61d409dc94af" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TreeCellEditor&lt;/code&gt;. You need to supply an instance of &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; so that the icons can be obtained. You can optionally supply a &lt;code&gt;TreeCellEditor&lt;/code&gt; that will be layed out according to the icon in the &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;. If you do not supply a &lt;code&gt;TreeCellEditor&lt;/code&gt;, a &lt;code&gt;TextField&lt;/code&gt; will be used. Editing is started on a triple mouse click, or after a click, pause, click and a delay of 1200 milliseconds.</source>
          <target state="translated">&lt;code&gt;TreeCellEditor&lt;/code&gt; . 아이콘을 얻을 수 있도록 &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; 의 인스턴스를 제공해야합니다 . &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; 의 아이콘에 따라 레이아웃 될 &lt;code&gt;TreeCellEditor&lt;/code&gt; 를 선택적으로 제공 할 수 있습니다 . 당신이 제공하지 않는 경우 &lt;code&gt;TreeCellEditor&lt;/code&gt; 하는 &lt;code&gt;TextField&lt;/code&gt; 사용됩니다. 편집은 마우스를 세 번 클릭하거나 클릭, 일시 중지, 클릭 후 1200 밀리 초의 지연으로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="a9a9973b7ddc573008a40e63e16153e2288f330f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UID&lt;/code&gt; created via this constructor will not clash with any &lt;code&gt;UID&lt;/code&gt;s generated via the no-arg constructor.</source>
          <target state="translated">&lt;code&gt;UID&lt;/code&gt; 는 어떤과 충돌하지 않습니다이 생성자를 통해 생성 된 &lt;code&gt;UID&lt;/code&gt; 의 인수 없음의 생성자를 통해 생성.</target>
        </trans-unit>
        <trans-unit id="13c40d3cb524b714a351808aa3e4e0e1cdd674d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UID&lt;/code&gt; instance contains three primitive values:</source>
          <target state="translated">&lt;code&gt;UID&lt;/code&gt; 의 인스턴스는 세 가지 기본 값을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="fe7d3ef4cba20379961fe38e5fb6e101ad696498" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UID&lt;/code&gt; represents an identifier that is unique over time with respect to the host it is generated on, or one of 2&lt;sup&gt;16&lt;/sup&gt; &quot;well-known&quot; identifiers.</source>
          <target state="translated">&lt;code&gt;UID&lt;/code&gt; 는 그것이라고 생성되는 호스트 또는 둘 중 하나에 대해 시간에 걸쳐 고유 식별자를 나타내는 &lt;sup&gt;16&lt;/sup&gt; &quot;공지&quot;식별자.</target>
        </trans-unit>
        <trans-unit id="76bc6d6be8cc65817824000c73faa0bd77b88f49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URIReferenceException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;URIReferenceException&lt;/code&gt; to get thrown.</source>
          <target state="translated">&lt;code&gt;URIReferenceException&lt;/code&gt; 이 발생하는 또 다른 throw 가능 객체 : 원인 포함 할 수 있습니다 &lt;code&gt;URIReferenceException&lt;/code&gt; 던져하기를.</target>
        </trans-unit>
        <trans-unit id="b58bc0ca4e83b0a96c3a1511203b83099584426f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URL&lt;/code&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found</source>
          <target state="translated">&lt;code&gt;URL&lt;/code&gt; 의 자원, 또는 읽기위한 객체 &lt;code&gt;null&lt;/code&gt; 리소스가 발견되지 않았던 경우</target>
        </trans-unit>
        <trans-unit id="a3ae6dcbe03a5258c2de9b5adc43f66d499b2dc9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URL&lt;/code&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found or the invoker doesn't have adequate privileges to get the resource.</source>
          <target state="translated">&lt;code&gt;URL&lt;/code&gt; 의 자원을 읽어 들이기, 또는에 대한 객체 &lt;code&gt;null&lt;/code&gt; 자원이 발견되지 않았던 경우 나, 호출 측이 자원을 취득하는 적절한 특권을 가지고 있지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="e94033eefad59f1c4203f56b39af581faa583c07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UUID&lt;/code&gt; generated from the specified array</source>
          <target state="translated">지정된 배열에서 생성 된 &lt;code&gt;UUID&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21620c1dde73d7df7f4687f50490fccf13363b02" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UUID&lt;/code&gt; with the specified value</source>
          <target state="translated">&lt;code&gt;UUID&lt;/code&gt; 지정된 값</target>
        </trans-unit>
        <trans-unit id="8922dbcbd6678e8544f8c534c1ebaa6cd046b103" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; object is an abstract representation of an identity. It has a &lt;a href=&quot;../../../security/principal#getName()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; that is typically the username or account name that it represents. User principal objects may be obtained using a &lt;a href=&quot;userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt;, or returned by &lt;a href=&quot;fileattributeview&quot;&gt;&lt;code&gt;FileAttributeView&lt;/code&gt;&lt;/a&gt; implementations that provide access to identity related attributes. For example, the &lt;a href=&quot;aclfileattributeview&quot;&gt;&lt;code&gt;AclFileAttributeView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt; provide access to a file's &lt;a href=&quot;posixfileattributes#owner()&quot;&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UserPrincipal&lt;/code&gt; 의 객체는 정체성의 추상적 인 표현입니다. 그것은이 &lt;a href=&quot;../../../security/principal#getName()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 전형적으로 나타내는 이름 또는 계정 이름입니다. 사용자 주체 개체는 &lt;a href=&quot;userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt; 를 사용하여 얻 거나 ID 관련 속성에 대한 액세스를 제공 하는 &lt;a href=&quot;fileattributeview&quot;&gt; &lt;code&gt;FileAttributeView&lt;/code&gt; &lt;/a&gt; 구현에 의해 반환 될 수 있습니다 . 예를 들어 &lt;a href=&quot;aclfileattributeview&quot;&gt; &lt;code&gt;AclFileAttributeView&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; &lt;/a&gt; 는 파일 &lt;a href=&quot;posixfileattributes#owner()&quot;&gt; &lt;code&gt;owner&lt;/code&gt; &lt;/a&gt; 대한 액세스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="599a7629c98484788296ad2234207d277d0e2d7d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; object is an abstract representation of an identity. It has a &lt;a href=&quot;../../../security/principal#getName--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; that is typically the username or account name that it represents. User principal objects may be obtained using a &lt;a href=&quot;userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt;, or returned by &lt;a href=&quot;fileattributeview&quot;&gt;&lt;code&gt;FileAttributeView&lt;/code&gt;&lt;/a&gt; implementations that provide access to identity related attributes. For example, the &lt;a href=&quot;aclfileattributeview&quot;&gt;&lt;code&gt;AclFileAttributeView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt; provide access to a file's &lt;a href=&quot;posixfileattributes#owner--&quot;&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UserPrincipal&lt;/code&gt; 의 객체는 정체성의 추상적 인 표현입니다. 그것은이 &lt;a href=&quot;../../../security/principal#getName--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 전형적으로 나타내는 이름 또는 계정 이름입니다. 사용자 프린시 펄 오브젝트는 &lt;a href=&quot;userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt; 를 사용하여 얻 거나 ID 관련 속성에 대한 액세스를 제공 하는 &lt;a href=&quot;fileattributeview&quot;&gt; &lt;code&gt;FileAttributeView&lt;/code&gt; &lt;/a&gt; 구현에서 리턴 할 수 있습니다. 예를 들어, &lt;a href=&quot;aclfileattributeview&quot;&gt; &lt;code&gt;AclFileAttributeView&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; &lt;/a&gt; 는 파일 &lt;a href=&quot;posixfileattributes#owner--&quot;&gt; &lt;code&gt;owner&lt;/code&gt; &lt;/a&gt; 대한 액세스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="1c1f4741da78dd945ec791bf160e2424b5cc586b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; representing a &lt;em&gt;group identity&lt;/em&gt;, used to determine access rights to objects in a file system.</source>
          <target state="translated">&lt;code&gt;UserPrincipal&lt;/code&gt; 나타내는 &lt;em&gt;그룹의 정체성&lt;/em&gt; 파일 시스템에있는 객체에 대한 액세스 권한을 결정하는 데 사용을.</target>
        </trans-unit>
        <trans-unit id="8a116dd3c690ffcfbe35976550ba70d5560c07e7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; representing a &lt;em&gt;group identity&lt;/em&gt;, used to determine access rights to objects in a file system. The exact definition of a group is implementation specific, but typically, it represents an identity created for administrative purposes so as to determine the access rights for the members of the group. Whether an entity can be a member of multiple groups, and whether groups can be nested, are implementation specified and therefore not specified.</source>
          <target state="translated">&lt;code&gt;UserPrincipal&lt;/code&gt; 나타내는 &lt;em&gt;그룹의 정체성&lt;/em&gt; 파일 시스템에있는 객체에 대한 액세스 권한을 결정하는 데 사용을. 그룹의 정확한 정의는 구현에 따라 다르지만 일반적으로 그룹의 구성원에 대한 액세스 권한을 결정하기 위해 관리 목적으로 작성된 ID를 나타냅니다. 엔터티가 여러 그룹의 구성원 일 수 있는지 여부와 그룹을 중첩 할 수 있는지 여부는 구현이 지정되어 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="286c6994b195ff63e6cf6d828ee4b62110a6e467" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VetoableChangeSupport&lt;/code&gt; instance is thread-safe.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; 의 인스턴스는 스레드 안전합니다.</target>
        </trans-unit>
        <trans-unit id="7c39da4cc886a1480134b9477fecb46ea860f403" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;View&lt;/code&gt; is inherently transparent. While a view may render into its entire allocation, typically a view does not. Rendering is performed by traversing down the tree of &lt;code&gt;View&lt;/code&gt; implementations. Each &lt;code&gt;View&lt;/code&gt; is responsible for rendering its children. This behavior is depended upon for thread safety. While view implementations do not necessarily have to be implemented with thread safety in mind, other view implementations that do make use of concurrency can depend upon a tree traversal to guarantee thread safety.</source>
          <target state="translated">&lt;code&gt;View&lt;/code&gt; 본질적으로 투명합니다. 뷰가 전체 할당으로 렌더링 될 수 있지만 일반적으로 뷰는 그렇지 않습니다. 렌더링은 &lt;code&gt;View&lt;/code&gt; 구현 트리를 탐색하여 수행됩니다 . 각 &lt;code&gt;View&lt;/code&gt; 는 자식 렌더링을 담당합니다. 이 동작은 스레드 안전성에 따라 달라집니다. 뷰 구현이 반드시 스레드 안전성을 염두에두고 구현 될 필요는 없지만 동시성을 사용하는 다른 뷰 구현은 스레드 안전성을 보장하기 위해 트리 순회에 의존 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7c1a5f09da71ded9d9701609b9298eebe4f189a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VoiceStatus&lt;/code&gt; object contains information about the current status of one of the voices produced by a &lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;VoiceStatus&lt;/code&gt; 목적은 제조 음색 중 하나의 현재 상태에 대한 정보가 포함 &lt;a href=&quot;synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="596e71e7a54065b28311c0799dfe3ff8f15f0487" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VolatileCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target acts like a volatile variable.</source>
          <target state="translated">&lt;code&gt;VolatileCallSite&lt;/code&gt; 는 A는 &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 그 대상 휘발성 가변처럼 작용한다.</target>
        </trans-unit>
        <trans-unit id="e0d418aa2c0aa5c7b088b46eb9b8c553a1989036" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VolatileCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target acts like a volatile variable. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;VolatileCallSite&lt;/code&gt; sees updates to its call site target immediately, even if the update occurs in another thread. There may be a performance penalty for such tight coupling between threads.</source>
          <target state="translated">&lt;code&gt;VolatileCallSite&lt;/code&gt; 는 A는 &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 그 대상 휘발성 가변처럼 작용한다. &lt;code&gt;invokedynamic&lt;/code&gt; A를 연결 명령 &lt;code&gt;VolatileCallSite&lt;/code&gt; 은 업데이트가 다른 스레드에서 발생하더라도 즉시 호출 사이트 대상으로 업데이트를 본다. 스레드 간의 이러한 긴밀한 커플 링으로 인해 성능이 저하 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="422fcf97e0a270d1eed1f6556c906973a4223b55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebRowSet&lt;/code&gt; object can insert a new row by moving to the insert row, calling the appropriate updater methods for each column in the row, and then calling the method &lt;code&gt;insertRow&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebRowSet&lt;/code&gt; 객체는 삽입 행으로 이동하는 행의 각 열에 대한 적절한 업데이터 메소드를 호출하고 메소드를 호출하여 새로운 행을 삽입 할 수 &lt;code&gt;insertRow&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c195302a2b3caef4fcd49f5a7d2356fa0fe23977" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebSocket&lt;/code&gt; has been connected.</source>
          <target state="translated">&lt;code&gt;WebSocket&lt;/code&gt; 연결되어있다.</target>
        </trans-unit>
        <trans-unit id="795b7bd5c6d0f92eeef0e5692db40ba00e671bfe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebSocket&lt;/code&gt; invokes methods of the associated listener passing itself as an argument. These methods are invoked in a thread-safe manner, such that the next invocation may start only after the previous one has finished.</source>
          <target state="translated">&lt;code&gt;WebSocket&lt;/code&gt; 인수로 자신을 건네 관련 리스너의 메소드를 호출합니다. 이러한 메서드는 스레드로부터 안전한 방식으로 호출되므로 다음 호출은 이전 호출이 완료된 후에 만 ​​시작될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef7a88d2e30cce9da51d34eb036cab772256ef19" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Window&lt;/code&gt; object is a top-level window with no borders and no menubar.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; 객체는 경계 및 도구 모음을 가지지 않는 톱 레벨 윈도우입니다.</target>
        </trans-unit>
        <trans-unit id="37af458e69ffd40570fb606e1c3a53b0b15bf3e4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Window&lt;/code&gt; object is a top-level window with no borders and no menubar. The default layout for a window is &lt;code&gt;BorderLayout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; 객체는 경계 및 도구 모음을 가지지 않는 톱 레벨 윈도우입니다. 창의 기본 레이아웃은 &lt;code&gt;BorderLayout&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8f2659d09382819cc3894e60b723100ad2720739" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WritableRaster&lt;/code&gt; containing the image's alpha channel.</source>
          <target state="translated">이미지의 알파 채널이 포함 된 &lt;code&gt;WritableRaster&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cb3422899b3c6df4136bc9881bcf3cb17b355389" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WritableRaster&lt;/code&gt; that is compatible with this &lt;code&gt;ColorModel&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WritableRaster&lt;/code&gt; 이와 호환 &lt;code&gt;ColorModel&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20a284f55c692945b604b39cc536b076f43e6dc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;XMLObject&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newXMLObject(java.util.List,java.lang.String,java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;newXMLObject&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">&lt;code&gt;XMLObject&lt;/code&gt; 인스턴스를 호출하여 생성 될 수있다 &lt;a href=&quot;xmlsignaturefactory#newXMLObject(java.util.List,java.lang.String,java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;newXMLObject&lt;/code&gt; 에서&lt;/a&gt; 의 방법 &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; 클래스; 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="8d9990704b4f7c2fb32800d093417ea36291d6a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZoneId&lt;/code&gt; can be deserialized in a Java Runtime where the ID is unknown. For example, if a server-side Java Runtime has been updated with a new zone ID, but the client-side Java Runtime has not been updated. In this case, the &lt;code&gt;ZoneId&lt;/code&gt; object will exist, and can be queried using &lt;code&gt;getId&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;getDisplayName&lt;/code&gt; and &lt;code&gt;normalized&lt;/code&gt;. However, any call to &lt;code&gt;getRules&lt;/code&gt; will fail with &lt;code&gt;ZoneRulesException&lt;/code&gt;. This approach is designed to allow a &lt;a href=&quot;zoneddatetime&quot;&gt;&lt;code&gt;ZonedDateTime&lt;/code&gt;&lt;/a&gt; to be loaded and queried, but not modified, on a Java Runtime with incomplete time-zone information.</source>
          <target state="translated">&lt;code&gt;ZoneId&lt;/code&gt; 는 ID를 알 수없는입니다 자바 런타임에서 직렬화 할 수 있습니다. 예를 들어, 서버 측 Java 런타임이 새 영역 ID로 업데이트되었지만 클라이언트 측 Java 런타임이 업데이트되지 않은 경우. 이 경우 &lt;code&gt;ZoneId&lt;/code&gt; 객체가 존재하며 &lt;code&gt;getId&lt;/code&gt; , &lt;code&gt;equals&lt;/code&gt; , &lt;code&gt;hashCode&lt;/code&gt; , &lt;code&gt;toString&lt;/code&gt; , &lt;code&gt;getDisplayName&lt;/code&gt; 및 &lt;code&gt;normalized&lt;/code&gt; 를 사용하여 쿼리 할 수 ​​있습니다 . 그러나 &lt;code&gt;getRules&lt;/code&gt; 에 대한 호출 은 &lt;code&gt;ZoneRulesException&lt;/code&gt; 으로 실패 합니다. 이 방법은 불완전한 시간대 정보를 사용하여 Java 런타임 에서 &lt;a href=&quot;zoneddatetime&quot;&gt; &lt;code&gt;ZonedDateTime&lt;/code&gt; &lt;/a&gt; 을로드하고 쿼리 할 수 ​​있지만 수정할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="da505947151bf4272a8a9b83469f5005bb360311" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZoneId&lt;/code&gt; is used to identify the rules used to convert between an &lt;a href=&quot;instant&quot;&gt;&lt;code&gt;Instant&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;localdatetime&quot;&gt;&lt;code&gt;LocalDateTime&lt;/code&gt;&lt;/a&gt;. There are two distinct types of ID:</source>
          <target state="translated">&lt;code&gt;ZoneId&lt;/code&gt; 는 사이의 변환에 사용되는 규칙을 식별하는 데 사용되는 &lt;a href=&quot;instant&quot;&gt; &lt;code&gt;Instant&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;localdatetime&quot;&gt; &lt;code&gt;LocalDateTime&lt;/code&gt; 을&lt;/a&gt; . ID에는 두 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="05f3af6a7feaa91622bf80e2250ca79781091904" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZonedDateTime&lt;/code&gt; holds state equivalent to three separate objects, a &lt;code&gt;LocalDateTime&lt;/code&gt;, a &lt;code&gt;ZoneId&lt;/code&gt; and the resolved &lt;code&gt;ZoneOffset&lt;/code&gt;. The offset and local date-time are used to define an instant when necessary. The zone ID is used to obtain the rules for how and when the offset changes. The offset cannot be freely set, as the zone controls which offsets are valid.</source>
          <target state="translated">&lt;code&gt;ZonedDateTime&lt;/code&gt; 는 세 개의 오브젝트의 상태 (A)에 상당 보유 &lt;code&gt;LocalDateTime&lt;/code&gt; 하는 &lt;code&gt;ZoneId&lt;/code&gt; 및 해결 &lt;code&gt;ZoneOffset&lt;/code&gt; . 오프셋과 현지 날짜-시간은 필요할 때 순간을 정의하는 데 사용됩니다. 영역 ID는 오프셋 변경 방법 및시기에 대한 규칙을 얻는 데 사용됩니다. 영역이 유효한 오프셋을 제어하므로 오프셋을 자유롭게 설정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0d10e806fe2685e19549872b276996cba4677bdf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating if the encapsulated &lt;code&gt;Transferable&lt;/code&gt; object represents the result of local drag-n-drop operation (within the same JVM).</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 캡슐화했는지를 나타내는 &lt;code&gt;Transferable&lt;/code&gt; 객체가 같은 JVM 내의 로컬 드래그 &amp;amp; 드롭 조작의 결과를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="fc9cd49ad7b5f59a0d1f4361c3727c4e5c505b5a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating if this instance may now render a GUI.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 이 인스턴스가 GUI를 렌더링 할 수 있을지 어떨지를 나타내는.</target>
        </trans-unit>
        <trans-unit id="911789bac1c76b67035efa87a8656de4b6dc167c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating whether or not this object is currently in design time mode.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 이 객체가 현재, 설계시 모드인지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="f020b03a03d1d7e0fea471e7287ff71c308e6333" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; parameter allows you to specify whether or not a printing dialog is displayed to the user. When it is, the user may use the dialog to change the destination printer or printing attributes, or even to cancel the print. Another two parameters allow for a &lt;code&gt;PrintService&lt;/code&gt; and printing attributes to be specified. These parameters can be used either to provide initial values for the print dialog, or to specify values when the dialog is not shown.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 매개 변수를 사용하면 인쇄 대화 상자가 사용자에게 표시 여부를 지정할 수 있습니다. 그럴 경우 사용자는 대화 상자를 사용하여 대상 프린터 또는 인쇄 속성을 변경하거나 인쇄를 취소 할 수도 있습니다. 또 다른 두 개의 매개 변수는 &lt;code&gt;PrintService&lt;/code&gt; 및 인쇄 속성을 지정할 수 있도록합니다. 이러한 매개 변수는 인쇄 대화 상자의 초기 값을 제공하거나 대화 상자가 표시되지 않을 때 값을 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02f0086c349da359110250836ba03df79dd8e698" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows images to be written as a progressive sequence of increasing quality passes.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 인 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;ImageWriteParam&lt;/code&gt; 이미지 품질의 통과를 증가시키는 누진 순서로 기록 될 수있다.</target>
        </trans-unit>
        <trans-unit id="b410ad56ec7b1440a4b739b5de51c7d451c01a75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows images to be written as a progressive sequence of increasing quality passes. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 인 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;ImageWriteParam&lt;/code&gt; 이미지 품질의 통과를 증가시키는 누진 순서로 기록 될 수있다. 기본적으로 값은 &lt;code&gt;false&lt;/code&gt; 입니다. 서브 클래스는 값을 수동으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="e1aa5ec614f6f8cdf29028ca9609323b4981b960" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tile width and tile height parameters to be set.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;ImageWriteParam&lt;/code&gt; 로는 타일의 폭과 타일 높이 매개 변수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="835d34959de64d4a8d84312a811100962bb32824" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tile width and tile height parameters to be set. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;ImageWriteParam&lt;/code&gt; 로는 타일의 폭과 타일 높이 매개 변수를 설정할 수 있습니다. 기본적으로 값은 &lt;code&gt;false&lt;/code&gt; 입니다. 서브 클래스는 값을 수동으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="5a16a4b6cceb46d7210d870aeb738780b5350ffd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tiling grid offset parameters to be set.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;ImageWriteParam&lt;/code&gt; 로는 그리드 오프셋 매개 변수를 바둑판 수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69e6051986f502b35b40f12341fca7ee231dbb2f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tiling grid offset parameters to be set. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;ImageWriteParam&lt;/code&gt; 로는 그리드 오프셋 매개 변수를 바둑판 수를 설정할 수 있습니다. 기본적으로 값은 &lt;code&gt;false&lt;/code&gt; 입니다. 서브 클래스는 값을 수동으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="ba57c1828f933d49824cc9acbe04ac90994cee7f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this writer can write images using compression.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 이 작가가 압축을 사용하여 이미지를 기록 할 수있는 경우.</target>
        </trans-unit>
        <trans-unit id="e8334a88bf0f77348a41e079c994d353ef7e14ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this writer can write images using compression. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 이 작가가 압축을 사용하여 이미지를 기록 할 수있는 경우. 기본적으로 값은 &lt;code&gt;false&lt;/code&gt; 입니다. 서브 클래스는 값을 수동으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="af783e5ccce67dac2defe55ca956bd446858f68b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if tiling parameters have been specified.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; 타일링 파라미터가 지정되고있는 경우.</target>
        </trans-unit>
        <trans-unit id="298b6d38fd53ceb77f5afd16627685f8849adc99" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; value that may be updated atomically.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 원자적인 갱신 값.</target>
        </trans-unit>
        <trans-unit id="f183a691e5656cf9381e6b26108e31cd997e0220" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses. An &lt;code&gt;AtomicBoolean&lt;/code&gt; is used in applications such as atomically updated flags, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 원자적인 갱신 값. 원자 적 액세스 속성에 대한 설명은 &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt; 사양을 참조하세요 . &lt;code&gt;AtomicBoolean&lt;/code&gt; 는 같은 원자 적으로 갱신 플래그와 같은 응용 프로그램에서 사용되며, 대체로 사용할 수 없습니다 &lt;a href=&quot;../../../lang/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c101afa2aedde90937ffa8c036550e520ca97ed0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables. An &lt;code&gt;AtomicBoolean&lt;/code&gt; is used in applications such as atomically updated flags, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 원자적인 갱신 값. 원자 변수의 특성에 대한 설명은 &lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt; 패키지 스펙을 참조하십시오 . &lt;code&gt;AtomicBoolean&lt;/code&gt; 는 같은 원자 적으로 갱신 플래그와 같은 응용 프로그램에서 사용되며, 대체로 사용할 수 없습니다 &lt;a href=&quot;../../../lang/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2a76cd3619b4ccf3c191aed8eefc4ec53921b519" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;byte&lt;/code&gt; array initialized with a size of &lt;a href=&quot;#destWidth&quot;&gt;&lt;code&gt;destWidth&lt;/code&gt;&lt;/a&gt; and used to deliver a row of pixel data to the &lt;a href=&quot;imageconsumer&quot;&gt;&lt;code&gt;ImageConsumer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byte&lt;/code&gt; 배열의 크기로 초기화 &lt;a href=&quot;#destWidth&quot;&gt; &lt;code&gt;destWidth&lt;/code&gt; &lt;/a&gt; 상기 픽셀 데이터의 행을 전달하는데 사용 &lt;a href=&quot;imageconsumer&quot;&gt; &lt;code&gt;ImageConsumer&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="20da1027223eab2ad2c66e79d10dc8ff1024234e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;char&lt;/code&gt; value, therefore, represents Basic Multilingual Plane (BMP) code points, including the surrogate code points, or code units of the UTF-16 encoding. An &lt;code&gt;int&lt;/code&gt; value represents all Unicode code points, including supplementary code points. The lower (least significant) 21 bits of &lt;code&gt;int&lt;/code&gt; are used to represent Unicode code points and the upper (most significant) 11 bits must be zero. Unless otherwise specified, the behavior with respect to supplementary characters and surrogate &lt;code&gt;char&lt;/code&gt; values is as follows:</source>
          <target state="translated">따라서 &lt;code&gt;char&lt;/code&gt; 값은 서로 게이트 코드 포인트 또는 UTF-16 인코딩의 코드 단위를 포함하여 BMP (Basic Multilingual Plane) 코드 포인트를 나타냅니다. &lt;code&gt;int&lt;/code&gt; 값은 보조 코드 포인트를 포함한 모든 Unicode 코드 포인트를 나타냅니다. &lt;code&gt;int&lt;/code&gt; 의 하위 (최하위) 21 비트 는 유니 코드 코드 포인트를 나타내는 데 사용되며 상위 (가장 중요한) 11 비트는 0이어야합니다. 별도로 지정하지 않는 한 보충 문자 및 서로 게이트 &lt;code&gt;char&lt;/code&gt; 값에 대한 동작 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6efab522b7aee8a07cad8889be3980bfb50d4943" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;class&lt;/code&gt; file of version 55.0 or greater may record the host of the nest to which it belongs by using the &lt;code&gt;NestHost&lt;/code&gt; attribute (JVMS 4.7.28). Alternatively, a &lt;code&gt;class&lt;/code&gt; file of version 55.0 or greater may act as a nest host by enumerating the nest's other members with the &lt;code&gt;NestMembers&lt;/code&gt; attribute (JVMS 4.7.29). A &lt;code&gt;class&lt;/code&gt; file of version 54.0 or lower does not use these attributes.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 버전 55.0 이상의 파일은이 사용 속해있는 둥지의 호스트 기록 할 수 &lt;code&gt;NestHost&lt;/code&gt; 의 속성 (JVMS 4.7.28 참조). 또는 버전 55.0 이상의 &lt;code&gt;class&lt;/code&gt; 파일은 &lt;code&gt;NestMembers&lt;/code&gt; 속성 (JVMS 4.7.29)으로 중첩의 다른 구성원을 열거하여 중첩 호스트 역할을 할 수 있습니다 . 버전 54.0 이하 의 &lt;code&gt;class&lt;/code&gt; 파일은 이러한 속성을 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eda7397702e8e699a3d9cd248aa7777f6f0ea18d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;count&lt;/code&gt; value of 0 disables looping: playback will continue at the loop end point, and it will not loop back to the loop start point. This is a sequencer's default.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 루핑 0 비활성화 값 : 재생이 루프의 끝 지점에서 계속됩니다, 그것은 루프 시작점 루프 다시하지 않습니다. 이것이 시퀀서의 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="cd82d12abe21bb169705776073d69b7b82dee223" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;count&lt;/code&gt; value of 0 indicates that any current looping should cease and playback should continue to the end of the clip. The behavior is undefined when this method is invoked with any other value during a loop operation.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 0의 값은 현재의 루프를 정지 해 클립의 끝까지 재생을 계속하는 것을 나타냅니다. 루프 조작 중이 값을 다른 값으로 호출하면 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a9fd5c6543bde97c1701163a0d5f4be46237afa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;float&lt;/code&gt; containing the current compression quality setting.</source>
          <target state="translated">현재 압축 품질 설정을 포함 하는 &lt;code&gt;float&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="002c59e83944aa5f0541632ce7cc87a21431c134" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;float&lt;/code&gt; containing the current compression quality setting. The initial value is &lt;code&gt;1.0F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;float&lt;/code&gt; 현재의 압축 품질 설정을 함유. 초기 값은 &lt;code&gt;1.0F&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1479a5979c4c5293d1e73493a144c501a4ed3832" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;getDecoder&lt;/code&gt; method is defined similarly.</source>
          <target state="translated">&lt;code&gt;getDecoder&lt;/code&gt; 의 방법은 유사하게 정의된다.</target>
        </trans-unit>
        <trans-unit id="3c7ffaa40cbe2054db9cb8e86eaadea3ee80a4e9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;java.lang.Object&lt;/code&gt; holding the OUT parameter value</source>
          <target state="translated">OUT 매개 변수 값을 보유 하는 &lt;code&gt;java.lang.Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44edcb148071b12866fbe7f946483d8fc7f7136e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;java.lang.Object&lt;/code&gt; holding the OUT parameter value.</source>
          <target state="translated">OUT 매개 변수 값을 보유 하는 &lt;code&gt;java.lang.Object&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c7437daa70a343a0b95fb2fbb0eaa5c65eff81fa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;java.util.Map&lt;/code&gt; object is used to associate the SQL structured type with its mapping to the class &lt;code&gt;Authors&lt;/code&gt;. The following code fragment shows how a &lt;code&gt;Map&lt;/code&gt; object might be created and given an entry associating &lt;code&gt;AUTHORS&lt;/code&gt; and &lt;code&gt;Authors&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;java.util.Map&lt;/code&gt; 객체는 클래스에의 매핑과 SQL 구조화 형 연결하는 데 사용되는 &lt;code&gt;Authors&lt;/code&gt; . 다음 코드 조각은 &lt;code&gt;Map&lt;/code&gt; 객체가 생성되고 &lt;code&gt;AUTHORS&lt;/code&gt; 및 &lt;code&gt;Authors&lt;/code&gt; 와 관련된 항목이 제공되는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a0ef54338e3f5fd740d5848f5642a2c1ccb5cf6e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; array in which elements may be updated atomically.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 배열 요소의 원자 갱신 될 수있다.</target>
        </trans-unit>
        <trans-unit id="3bcdd10f85c7468fa110c2018ba0e2892d616ace" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; array in which elements may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 배열 요소의 원자 갱신 될 수있다. 원자 적 액세스 속성에 대한 설명은 &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt; 사양을 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="88aeee4d95787893e3688fea4c58f90d49ca8c99" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; array in which elements may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 배열 요소의 원자 갱신 될 수있다. 원자 변수의 특성에 대한 설명은 &lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt; 패키지 스펙을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="03ee3984a4ce41f61a957ded4535f07488a6735b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt; argument counts (for purposes of arity limits) as two argument slots.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 또는 &lt;code&gt;double&lt;/code&gt; 개의 인수 슬롯 등 (arity에 제한의 목적을 위해) 인수 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="a04b66b2d94cf4ae8fbc24d6ec5f4a83902cb97c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or &lt;code&gt;0L&lt;/code&gt; if the file does not exist or if an I/O error occurs</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 시간을 나타내는 값은 파일이 마지막 시대부터의 시간, 밀리 초 단위로 측정, 수정 된 (1970 년 1 월 1 일 00:00:00 GMT) 또는 &lt;code&gt;0L&lt;/code&gt; 파일이 존재 또는 I / O 에러가 발생했을 경우하지 않는 경우</target>
        </trans-unit>
        <trans-unit id="01233b54d85186abbddf9436bfdbaf094a88ef54" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or &lt;code&gt;0L&lt;/code&gt; if the file does not exist or if an I/O error occurs. The value may be negative indicating the number of milliseconds before the epoch</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 신기원 이후 밀리 초 단위로 측정 파일이 마지막으로 수정 된 시간을 나타내는 값 (1970 년 1 월 1 일 00:00:00 GMT) 또는 &lt;code&gt;0L&lt;/code&gt; 파일이 존재 또는 I / O 에러가 발생했을 경우하지 않는 경우. 값은 Epoch 이전의 밀리 초 수를 나타내는 음수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc909250cbeae60993a8740b7bb550fbcd052167" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value that may be updated atomically.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 원자적인 갱신 값.</target>
        </trans-unit>
        <trans-unit id="ec162d19f31a3cd4caaba214a167faedbd80db54" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses. An &lt;code&gt;AtomicLong&lt;/code&gt; is used in applications such as atomically incremented sequence numbers, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;. However, this class does extend &lt;code&gt;Number&lt;/code&gt; to allow uniform access by tools and utilities that deal with numerically-based classes.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 원자적인 갱신 값. 원자 적 액세스 속성에 대한 설명은 &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt; 사양을 참조하세요 . &lt;code&gt;AtomicLong&lt;/code&gt; 는 , 원자 조작 적으로 증분되는 일련 번호 등의 어플리케이션으로 사용됩니다과의 대체로서 사용할 수 없습니다 &lt;a href=&quot;../../../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt; . 그러나이 클래스는 숫자 기반 클래스를 처리하는 도구 및 유틸리티에서 균일 한 액세스를 허용 하도록 &lt;code&gt;Number&lt;/code&gt; 를 확장 합니다.</target>
        </trans-unit>
        <trans-unit id="192854d39ccd972a8265120efc645d14fb105c7c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables. An &lt;code&gt;AtomicLong&lt;/code&gt; is used in applications such as atomically incremented sequence numbers, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;. However, this class does extend &lt;code&gt;Number&lt;/code&gt; to allow uniform access by tools and utilities that deal with numerically-based classes.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 원자적인 갱신 값. 원자 변수의 특성에 대한 설명은 &lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt; 패키지 스펙을 참조하십시오 . &lt;code&gt;AtomicLong&lt;/code&gt; 는 , 원자 조작 적으로 증분되는 일련 번호 등의 어플리케이션으로 사용됩니다과의 대체로서 사용할 수 없습니다 &lt;a href=&quot;../../../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt; . 그러나이 클래스는 숫자 기반 클래스를 처리하는 도구 및 유틸리티로 균일하게 액세스 할 수 있도록 &lt;code&gt;Number&lt;/code&gt; 를 확장 합니다.</target>
        </trans-unit>
        <trans-unit id="235874c94c0f2dfde0bba3dfb03aba6a5c029f12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;mailto:&lt;/code&gt; URI can specify message fields including</source>
          <target state="translated">&lt;code&gt;mailto:&lt;/code&gt; URI는 다음과 같은 메시지 필드를 지정할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="e9fc1df4b7ac98eebfc4971379d3682ab28fb645" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;named-capturing group&lt;/code&gt; is still numbered as described in &lt;a href=&quot;#gnumber&quot;&gt;Group number&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;named-capturing group&lt;/code&gt; 에 설명 된대로 계속된다 번째 &lt;a href=&quot;#gnumber&quot;&gt;그룹 번호&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ddc816003f98669f500647d38c58eeab0e8488b6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; address will assign the</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 주소가 할당합니다</target>
        </trans-unit>
        <trans-unit id="073111b0c86bd79b925cf37fa0cb0aae841fb84e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; array reference is considered lexicographically less than a non-&lt;code&gt;null&lt;/code&gt; array reference. Two &lt;code&gt;null&lt;/code&gt; array references are considered equal.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 배열 참조는 전적으로 비보다 덜 고려 &lt;code&gt;null&lt;/code&gt; 배열 참조. 두 개의 &lt;code&gt;null&lt;/code&gt; 배열 참조는 동일한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="af43eaaf3581a1e718f40089e52888e01f0297bf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; array reference is considered lexicographically less than a non-&lt;code&gt;null&lt;/code&gt; array reference. Two &lt;code&gt;null&lt;/code&gt; array references are considered equal. A &lt;code&gt;null&lt;/code&gt; array element is considered lexicographically than a non-&lt;code&gt;null&lt;/code&gt; array element. Two &lt;code&gt;null&lt;/code&gt; array elements are considered equal.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 배열 참조는 전적으로 비보다 덜 고려 &lt;code&gt;null&lt;/code&gt; 배열 참조. 두 개의 &lt;code&gt;null&lt;/code&gt; 배열 참조는 동일한 것으로 간주됩니다. &lt;code&gt;null&lt;/code&gt; 어레이 소자는 비보다 사전 고려 &lt;code&gt;null&lt;/code&gt; 어레이 소자. 두 개의 &lt;code&gt;null&lt;/code&gt; 배열 요소는 동일한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="a1bfbb3f894a1e1d42024d7651c1edc781e39653" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value for</source>
          <target state="translated">에 대한 &lt;code&gt;null&lt;/code&gt; 값</target>
        </trans-unit>
        <trans-unit id="dcb60d8ba30e7b319805196a1f0ba9444c9c5ea9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value indicates that all destination bands will be used.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 값은 모든 목적지 밴드가 사용되고있는 것을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="5aee2cf861557c088e548f762214d97ee16bebd1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value indicates that all source bands will be used.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 값은 모든 소스 밴드가 사용되고있는 것을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="c8aa7f56541d93b0cf41a104114d2908d45605e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value indicates that field is not set.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 값은 필드가 설정되지 않았 음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7e24479059a86232b3b1259897089f329fb70b5c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value may be passed to function</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 값은 함수로 전달 될 수있다</target>
        </trans-unit>
        <trans-unit id="1f63c6f19d49f7eeccf62713ebc460ba91686c20" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value or &lt;code&gt;Action&lt;/code&gt; results in the button's &lt;code&gt;mnemonic&lt;/code&gt; property being set to &lt;code&gt;'\0'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 값 또는 &lt;code&gt;Action&lt;/code&gt; 버튼의 결과 &lt;code&gt;mnemonic&lt;/code&gt; 에 속성 세트 인 &lt;code&gt;'\0'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49912ba1de6fbd5de094cb48143007a99622de08" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;startElement&lt;/code&gt; filter function may access or change the attributes for the Element. Changing Namespace declarations will have no effect on namespace resolution by the parser.</source>
          <target state="translated">&lt;code&gt;startElement&lt;/code&gt; 필터 함수 또는 액세스 요소의 속성을 변경할 수있다. 네임 스페이스 선언을 변경해도 파서의 네임 스페이스 확인에는 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f673ebe2d5c5810c50da61a00a4c5064ab7d452e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Dynamic MBean&lt;/em&gt; is an MBean that defines its management interface at run-time. For example, a configuration MBean could determine the names and types of the attributes it exposes by parsing an XML file.</source>
          <target state="translated">&lt;em&gt;동적 MBean는,&lt;/em&gt; 실행시에 관리 인터페이스를 정의하는 MBean입니다. 예를 들어, 구성 MBean은 XML 파일을 구문 분석하여 노출하는 속성의 이름 및 유형을 판별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1adf451901eb2b128ac5f178878235f9536b4ce" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Model MBean&lt;/em&gt; is a kind of Dynamic MBean that acts as a bridge between the management interface and the underlying managed resource. Both the management interface and the managed resource are specified as Java objects. The same Model MBean implementation can be reused many times with different management interfaces and managed resources, and it can provide common functionality such as persistence and caching. Model MBeans are defined by the package &lt;a href=&quot;modelmbean/package-summary&quot;&gt;&lt;code&gt;
        javax.management.modelmbean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;모델은 MBean의&lt;/em&gt; 관리 인터페이스와 부하 관리 자원 사이의 다리 역할을 동적 MBean의 한 종류이다. 관리 인터페이스와 관리 자원 모두 Java 오브젝트로 지정됩니다. 동일한 관리 인터페이스 및 관리 자원으로 동일한 Model MBean 구현을 여러 번 재사용 할 수 있으며 지속성 및 캐싱과 같은 공통 기능을 제공 할 수 있습니다. 모델 MBean는 &lt;a href=&quot;modelmbean/package-summary&quot;&gt; &lt;code&gt; javax.management.modelmbean&lt;/code&gt; &lt;/a&gt; 패키지에 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="38f817f1bc8c8c30eeb708b79191fff2439cfeee" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;URL context factory&lt;/em&gt; is a special ObjectFactory that creates contexts for resolving URLs or objects whose locations are specified by URLs. The &lt;code&gt;getObjectInstance()&lt;/code&gt; method of a URL context factory will obey the following rules.</source>
          <target state="translated">&lt;em&gt;URL 문맥 팩토리는&lt;/em&gt; URL 또는 URL가 위치를 지정하는 객체를 해결하는 컨텍스트를 생성하는 특별한 ObjectFactory를합니다. URL 컨텍스트 팩토리 의 &lt;code&gt;getObjectInstance()&lt;/code&gt; 메소드는 다음 규칙을 준수합니다.</target>
        </trans-unit>
        <trans-unit id="0da0a069e013ab04293daef37d59dd3f72593cab" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;character&lt;/em&gt; is a symbol that represents an item such as a letter, a digit, or punctuation in an abstract way. For example, &lt;code&gt;'g'&lt;/code&gt;, LATIN SMALL LETTER G, is a character.</source>
          <target state="translated">&lt;em&gt;문자는&lt;/em&gt; 이러한 추상적 인 방법으로 영문자, 숫자, 구두점 등의 항목을 나타내는 상징이다. 예를 들어, &lt;code&gt;'g'&lt;/code&gt; , LATIN SMALL LETTER G는 문자입니다.</target>
        </trans-unit>
        <trans-unit id="1b6020abc9bbd5b3b68dcf3dadb60c07aea04cbf" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; is an object having a graphical representation that can be displayed on the screen and that can interact with the user.</source>
          <target state="translated">&lt;em&gt;성분은&lt;/em&gt; 화면에 표시 할 수있어 사용자와 상호 작용할 수있는 그래픽 표현을 갖는 것을 목적으로한다.</target>
        </trans-unit>
        <trans-unit id="5981e4cabac85afb86636e08791d62135577cae2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; is an object having a graphical representation that can be displayed on the screen and that can interact with the user. Examples of components are the buttons, checkboxes, and scrollbars of a typical graphical user interface.</source>
          <target state="translated">&lt;em&gt;성분은&lt;/em&gt; 화면에 표시 할 수있어 사용자와 상호 작용할 수있는 그래픽 표현을 갖는 것을 목적으로한다. 구성 요소의 예로는 일반적인 그래픽 사용자 인터페이스의 버튼, 확인란 및 스크롤바가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bae7e79736ca0e41eec88bd1fbd34a7b4e497cc6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;direct method handle&lt;/em&gt; represents a method, constructor, or field without any intervening argument bindings or other transformations. The method, constructor, or field referred to by a direct method handle is called its &lt;em&gt;underlying member&lt;/em&gt;. Direct method handles may be obtained in any of these ways:</source>
          <target state="translated">&lt;em&gt;직접법 핸들&lt;/em&gt; 어떤 개재 인자 바인딩 또는 다른 변형없이있어서, 생성자 또는 필드를 나타낸다. 직접 메소드 핸들이 참조하는 메소드, 생성자 또는 필드를 &lt;em&gt;기본 멤버&lt;/em&gt; 라고합니다 . 직접 메소드 핸들은 다음과 같은 방법으로 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3208ea1e27927112df98fe1305517c6f41d8a6c7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;glyph&lt;/em&gt; is a shape used to render a character or a sequence of characters. In simple writing systems, such as Latin, typically one glyph represents one character. In general, however, characters and glyphs do not have one-to-one correspondence. For example, the character '&amp;aacute;' LATIN SMALL LETTER A WITH ACUTE, can be represented by two glyphs: one for 'a' and one for '&amp;acute;'. On the other hand, the two-character string &quot;fi&quot; can be represented by a single glyph, an &quot;fi&quot; ligature. In complex writing systems, such as Arabic or the South and South-East Asian writing systems, the relationship between characters and glyphs can be more complicated and involve context-dependent selection of glyphs as well as glyph reordering. A font encapsulates the collection of glyphs needed to render a selected set of characters as well as the tables needed to map sequences of characters to corresponding sequences of glyphs.</source>
          <target state="translated">&lt;em&gt;글리프&lt;/em&gt;문자 또는 일련의 문자를 렌더링하는 데 사용되는 모양입니다. 라틴어와 같은 간단한 쓰기 시스템에서 일반적으로 하나의 글리프는 하나의 문자를 나타냅니다. 그러나 일반적으로 문자와 글리프에는 일대일 대응이 없습니다. 예를 들어, 문자 '&amp;aacute;'LATIN SMALL LETTER A WITH ACUTE는 두 개의 글리프 ( 'a'에 대한 하나와 '&amp;acute;'에 대한 하나)로 나타낼 수 있습니다. 반면에 두 문자로 된 문자열 &quot;fi&quot;는 &quot;fi&quot;합자 인 단일 글리프로 나타낼 수 있습니다. 아랍어 또는 남아시아 및 동남아시아 쓰기 시스템과 같은 복잡한 쓰기 시스템에서 문자와 글리프 간의 관계는 더 복잡 할 수 있으며 글리프 재정렬뿐만 아니라 상황에 따라 글리프를 선택해야합니다.글꼴은 선택한 문자 집합을 렌더링하는 데 필요한 글리프 컬렉션과 문자 시퀀스를 해당 글리프 시퀀스에 매핑하는 데 필요한 테이블을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="23c977c205f5d1a10d0c80e98d23945f1f5b0892" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;lookup object&lt;/em&gt; is a factory for creating method handles, when the creation requires access checking.</source>
          <target state="translated">&lt;em&gt;룩업 객체&lt;/em&gt; 생성 액세스 검사를 필요로하는 경우에있어서의 핸들을 생성하는 팩토리이다.</target>
        </trans-unit>
        <trans-unit id="ec9f139bfeb4d7705debb706974cceb3ded9eaf5" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;lookup object&lt;/em&gt; is a factory for creating method handles, when the creation requires access checking. Method handles do not perform access checks when they are called, but rather when they are created. Therefore, method handle access restrictions must be enforced when a method handle is created. The caller class against which those restrictions are enforced is known as the &lt;a href=&quot;#lookupClass()&quot;&gt;lookup class&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;룩업 객체&lt;/em&gt; 생성 액세스 검사를 필요로하는 경우에있어서의 핸들을 생성하는 팩토리이다. 메서드 핸들은 호출 될 때 액세스 검사를 수행하지 않고 생성 될 때 수행합니다. 따라서 메서드 핸들을 만들 때 메서드 핸들 액세스 제한을 적용해야합니다. 이러한 제한이 적용되는 호출자 클래스를 &lt;a href=&quot;#lookupClass()&quot;&gt;조회 클래스라고&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="22cf7fb007bf2d5fe1f35768641f433f636d2570" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;lookup object&lt;/em&gt; is a factory for creating method handles, when the creation requires access checking. Method handles do not perform access checks when they are called, but rather when they are created. Therefore, method handle access restrictions must be enforced when a method handle is created. The caller class against which those restrictions are enforced is known as the &lt;a href=&quot;methodhandles.lookup#lookupClass&quot;&gt;lookup class&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;룩업 객체&lt;/em&gt; 생성 액세스 검사를 필요로하는 경우에있어서의 핸들을 생성하는 팩토리이다. 메소드 핸들은 호출 될 때 액세스 점검을 수행하지 않고 작성 될 때 액세스 점검을 수행합니다. 따라서 메소드 핸들이 작성 될 때 메소드 핸들 액세스 제한이 적용되어야합니다. 이러한 제한이 적용되는 호출자 클래스를 &lt;a href=&quot;methodhandles.lookup#lookupClass&quot;&gt;조회 클래스라고&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="03d5c0b02f91cd438ce51f0976c6a1b93c530e9a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mutable reduction operation&lt;/em&gt; accumulates input elements into a mutable result container, such as a &lt;code&gt;Collection&lt;/code&gt; or &lt;code&gt;StringBuilder&lt;/code&gt;, as it processes the elements in the stream.</source>
          <target state="translated">&lt;em&gt;가변 감소 동작은&lt;/em&gt; 같은 결과로서 가변 용기 내로 입력 요소 축적 &lt;code&gt;Collection&lt;/code&gt; 또는 &lt;code&gt;StringBuilder&lt;/code&gt; 는 스트림의 요소가 처리.</target>
        </trans-unit>
        <trans-unit id="9e8fc7fd60302cc0d2d564d3cd78710e4bca9017" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;notification&lt;/em&gt; is an instance of the &lt;a href=&quot;notification&quot;&gt;&lt;code&gt;Notification&lt;/code&gt;&lt;/a&gt; class or a subclass. In addition to its Java class, it has a &lt;em&gt;type&lt;/em&gt; string that can distinguish it from other notifications of the same class.</source>
          <target state="translated">&lt;em&gt;알림&lt;/em&gt; 의 인스턴스 &lt;a href=&quot;notification&quot;&gt; &lt;code&gt;Notification&lt;/code&gt; &lt;/a&gt; 클래스 또는 서브 클래스. Java 클래스 외에도 동일한 클래스의 다른 알림과 구별 할 수 있는 &lt;em&gt;유형&lt;/em&gt; 문자열이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9cd5e4185dd07b85f3d563a03ad8994c7f4c23a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;package name&lt;/em&gt; is derived from the resource name. If the package name is a &lt;a href=&quot;#getPackages()&quot;&gt;package&lt;/a&gt; in the module then the resource can only be located by the caller of this method when the package is &lt;a href=&quot;#isOpen(java.lang.String,java.lang.Module)&quot;&gt;open&lt;/a&gt; to at least the caller's module. If the resource is not in a package in the module then the resource is not encapsulated.</source>
          <target state="translated">&lt;em&gt;패키지 이름은&lt;/em&gt; 자원 이름에서 파생됩니다. 패키지 이름이 경우 &lt;a href=&quot;#getPackages()&quot;&gt;패키지&lt;/a&gt; 다음 자원 만이 방법의 호출자가 위치 할 수있는 모듈이 패키지는 때 &lt;a href=&quot;#isOpen(java.lang.String,java.lang.Module)&quot;&gt;열려있는&lt;/a&gt; 최소한 발신자의 모듈. 리소스가 모듈의 패키지에 없으면 리소스가 캡슐화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="32d9b97aae32d5b323b7ea17ce070dd4e8295814" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;platform MBeanServer&lt;/em&gt; can be accessed with the &lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt;&lt;code&gt;getPlatformMBeanServer&lt;/code&gt;&lt;/a&gt; method. On the first call to this method, it creates the platform MBeanServer and registers all platform MXBeans including &lt;a href=&quot;platformmanagedobject&quot;&gt;platform MXBeans&lt;/a&gt;. Each platform MXBean is registered with a unique name defined in the specification of the management interface. This is a single MBeanServer that can be shared by different managed components running within the same Java virtual machine.</source>
          <target state="translated">&lt;em&gt;플랫폼의 MBeanServer&lt;/em&gt; 액세스 할 수 있습니다 &lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt; &lt;code&gt;getPlatformMBeanServer&lt;/code&gt; &lt;/a&gt; 방법. 이 방법에의 최초의 호출로 플랫폼 MBeanServer에를 만들고 포함한 모든 플랫폼 MXBean 등록 &lt;a href=&quot;platformmanagedobject&quot;&gt;플랫폼 MXBean을&lt;/a&gt; . 각 플랫폼 MXBean은 관리 인터페이스 사양에 정의 된 고유 한 이름으로 등록됩니다. 이것은 동일한 Java 가상 머신 내에서 실행되는 다른 관리 구성 요소가 공유 할 수있는 단일 MBeanServer입니다.</target>
        </trans-unit>
        <trans-unit id="21c81f57a687d236a9823553d443d7c7bfc4f429" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;platform MBeanServer&lt;/em&gt; can be accessed with the &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;&lt;code&gt;getPlatformMBeanServer&lt;/code&gt;&lt;/a&gt; method. On the first call to this method, it creates the platform MBeanServer and registers all platform MXBeans including &lt;a href=&quot;platformmanagedobject&quot;&gt;platform MXBeans&lt;/a&gt;. Each platform MXBean is registered with a unique name defined in the specification of the management interface. This is a single MBeanServer that can be shared by different managed components running within the same Java virtual machine.</source>
          <target state="translated">&lt;em&gt;플랫폼의 MBeanServer&lt;/em&gt; 액세스 할 수 있습니다 &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt; &lt;code&gt;getPlatformMBeanServer&lt;/code&gt; &lt;/a&gt; 방법. 이 방법에의 최초의 호출로 플랫폼 MBeanServer에를 만들고 포함한 모든 플랫폼 MXBean 등록 &lt;a href=&quot;platformmanagedobject&quot;&gt;플랫폼 MXBean을&lt;/a&gt; . 각 플랫폼 MXBean은 관리 인터페이스 스펙에 정의 된 고유 이름으로 등록됩니다. 이것은 동일한 Java 가상 머신 내에서 실행되는 다른 관리 구성 요소가 공유 할 수있는 단일 MBeanServer입니다.</target>
        </trans-unit>
        <trans-unit id="32bec0eef41ca07d26cedc2089260b4548d59027" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;provider package list&lt;/em&gt; is searched for as follows:</source>
          <target state="translated">&lt;em&gt;바이더 패키지 목록은&lt;/em&gt; 다음과 같이 검색된다 :</target>
        </trans-unit>
        <trans-unit id="75f53e336013d60a78f82431737bf11c8a71996a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;proxy class&lt;/em&gt; is a class created at runtime that implements a specified list of interfaces, known as &lt;em&gt;proxy interfaces&lt;/em&gt;. A &lt;em&gt;proxy instance&lt;/em&gt; is an instance of a proxy class. Each proxy instance has an associated</source>
          <target state="translated">&lt;em&gt;프록시 클래스&lt;/em&gt; 런타임시 생성 된 클래스를 구현하는 알려진 인터페이스 지정된리스트, &lt;em&gt;프록시 인터페이스&lt;/em&gt; . &lt;em&gt;프록시 인스턴스&lt;/em&gt; 프록시 클래스의 인스턴스입니다. 각 프록시 인스턴스에는 연결된</target>
        </trans-unit>
        <trans-unit id="385a385274a30bf632664dbb24d9c18b767194e2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;quoted value&lt;/em&gt; consists of a quote (&lt;code&gt;&quot;&lt;/code&gt;), followed by a possibly empty string of characters, followed by another quote. Within the string of characters, the backslash (&lt;code&gt;\&lt;/code&gt;) has a special meaning. It must be followed by one of the following characters:</source>
          <target state="translated">&lt;em&gt;인용 값은&lt;/em&gt; 따옴표 (구성 &lt;code&gt;&quot;&lt;/code&gt; 다른 따옴표로 공 문자열의 가능성이, 다음). 문자의 문자열 내에서 백 슬래시 ( &lt;code&gt;\&lt;/code&gt; ) 특별한 의미를 가지고있다. 그것은 다음 중 하나가 와야합니다 문자 :</target>
        </trans-unit>
        <trans-unit id="5e671cc59a0e1a4f6c086eb387d26a321894a7fe" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;reduction&lt;/em&gt; operation (also called a &lt;em&gt;fold&lt;/em&gt;) takes a sequence of input elements and combines them into a single summary result by repeated application of a combining operation, such as finding the sum or maximum of a set of numbers, or accumulating elements into a list. The streams classes have multiple forms of general reduction operations, called &lt;a href=&quot;stream#reduce(java.util.function.BinaryOperator)&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/a&gt;, as well as multiple specialized reduction forms such as &lt;a href=&quot;intstream#sum()&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;intstream#max()&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;intstream#count()&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;감소&lt;/em&gt; (도 불리는 동작 &lt;em&gt;배량&lt;/em&gt; ) 같은리스트에 숫자 또는 집적 소자들의 세트의 합 또는 최대 값을 찾는 등의 결합 동작의 반복 적용에 의해 단일 요약 결과에 입력 요소와 콤바인들을 시퀀스를 취 . 스트림 클래스에는 &lt;a href=&quot;stream#reduce(java.util.function.BinaryOperator)&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt; &lt;code&gt;collect()&lt;/code&gt; &lt;/a&gt; 라고하는 여러 가지 일반 축소 작업 형식과 &lt;a href=&quot;intstream#sum()&quot;&gt; &lt;code&gt;sum()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;intstream#max()&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;intstream#count()&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; 와 같은 여러 특수 축소 형식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="881652b1aaf32556529fd976baa7d3f05a31e6a9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;reduction&lt;/em&gt; operation (also called a &lt;em&gt;fold&lt;/em&gt;) takes a sequence of input elements and combines them into a single summary result by repeated application of a combining operation, such as finding the sum or maximum of a set of numbers, or accumulating elements into a list. The streams classes have multiple forms of general reduction operations, called &lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/a&gt;, as well as multiple specialized reduction forms such as &lt;a href=&quot;intstream#sum--&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;intstream#max--&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;intstream#count--&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;감소&lt;/em&gt; (도 불리는 동작 &lt;em&gt;배량&lt;/em&gt; ) 같은리스트에 숫자 또는 집적 소자들의 세트의 합 또는 최대 값을 찾는 등의 결합 동작의 반복 적용에 의해 단일 요약 결과에 입력 요소와 콤바인들을 시퀀스를 취 . 스트림 클래스에는 &lt;a href=&quot;intstream#sum--&quot;&gt; &lt;code&gt;sum()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;intstream#max--&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;intstream#count--&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; 와 같은 여러 특수 축소 형식뿐만 아니라 &lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;collect()&lt;/code&gt; &lt;/a&gt; 라는 여러 가지 일반 축소 연산 형식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b091889df96c828d757f4c394d0df7407841cf1e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;relation type&lt;/em&gt; defines a relationship between MBeans. It contains &lt;em&gt;roles&lt;/em&gt; that the MBeans play in the relationship. Usually there are at least two roles in a relation type.</source>
          <target state="translated">&lt;em&gt;관계 유형은&lt;/em&gt; MBean의 관계를 정의한다. MBean이 관계에서 &lt;em&gt;수행&lt;/em&gt; 하는 &lt;em&gt;역할&lt;/em&gt; 을 포함 &lt;em&gt;합니다&lt;/em&gt; . 일반적으로 관계 유형에는 둘 이상의 역할이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3899aa8cc676171703dc878529f50a9965979186" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;relation&lt;/em&gt; is a named instance of a relation type, where specific MBeans appear in the roles, represented by their &lt;a href=&quot;../objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;em&gt;관계는&lt;/em&gt; 그들에 의해 표현 롤 내의 특정의 MBean는 관계 유형의 명명 된 인스턴스 &lt;a href=&quot;../objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt; 의.</target>
        </trans-unit>
        <trans-unit id="1944d9900738e576ae4fce116ef62f21ef3a291b" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;run with respect to a set of attributes&lt;/em&gt; is a maximum text range for which this condition is met for each member attribute.</source>
          <target state="translated">&lt;em&gt;속성 세트에 대한 실행은&lt;/em&gt; 이 조건이 각 회원의 특성에 대해 성립하는 최대 텍스트 범위입니다.</target>
        </trans-unit>
        <trans-unit id="0d67170b41f46f2a54ffcedc832e8521fdb9e0ee" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;run with respect to an attribute&lt;/em&gt; is a maximum text range for which:</source>
          <target state="translated">&lt;em&gt;속성에 대한 실행&lt;/em&gt; 의 최대 텍스트 범위 :</target>
        </trans-unit>
        <trans-unit id="60c63adbc71294c80ec9d80af6bef2584d4c4aee" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;short version string&lt;/em&gt;, &lt;code&gt;$SVSTR&lt;/code&gt;, often useful in less formal contexts, is a version number optionally followed by a pre-release identifier:</source>
          <target state="translated">&lt;em&gt;짧은 버전 문자열&lt;/em&gt; , &lt;code&gt;$SVSTR&lt;/code&gt; 덜 공식적인 상황에서 종종 유용한, 선택적으로 시험판 식별자 다음에 버전 번호 :</target>
        </trans-unit>
        <trans-unit id="77a55bad18ac56a1c3d3d180c828c330f121c52a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;version number&lt;/em&gt;, &lt;code&gt;$VNUM&lt;/code&gt;, is a non-empty sequence of elements separated by period characters (U+002E). An element is either zero, or an unsigned integer numeral without leading zeros. The final element in a version number must not be zero. When an element is incremented, all subsequent elements are removed. The format is:</source>
          <target state="translated">&lt;em&gt;버전 번호&lt;/em&gt; , &lt;code&gt;$VNUM&lt;/code&gt; , 소자 비어 시퀀스 기간 문자 (U + 002E)에 의해 분리된다. 요소는 0이거나 선행 0이없는 부호없는 정수입니다. 버전 번호의 마지막 요소는 0이 아니어야합니다. 요소가 증가하면 모든 후속 요소가 제거됩니다. 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="33101b84457f2cfa1c154a19b48a4dd0fa91e421" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;version string&lt;/em&gt;, &lt;code&gt;$VSTR&lt;/code&gt;, is a version number &lt;code&gt;
 $VNUM&lt;/code&gt;, as described above, optionally followed by pre-release and build information, in one of the following formats:</source>
          <target state="translated">&lt;em&gt;버전 문자열&lt;/em&gt; , &lt;code&gt;$VSTR&lt;/code&gt; , 버전 번호 &lt;code&gt; $VNUM&lt;/code&gt; , 임의로 다음과 같은 형식 중 하나, 시험판 빌드 정보,이어서 전술 한 바와 같이 :</target>
        </trans-unit>
        <trans-unit id="806b08b4e8ef62277d75b5f1cd9e89140a50a7ed" translate="yes" xml:space="preserve">
          <source>A Base64 decoder.</source>
          <target state="translated">Base64 디코더</target>
        </trans-unit>
        <trans-unit id="38879c33dc00c52c03ee4ebf16cfa8fb6c4bb7f9" translate="yes" xml:space="preserve">
          <source>A Base64 encoder.</source>
          <target state="translated">Base64 인코더.</target>
        </trans-unit>
        <trans-unit id="b1d103ec388aee5968f3ecd9fbbf62a0676958f3" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of PopupMenuSeparatorUI.</source>
          <target state="translated">PopupMenuSeparatorUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="a86d915f23ab9abd7e1ab669cf1b1a5a6ff54905" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of PopupMenuSeparatorUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">PopupMenuSeparatorUI의 기본 L &amp;amp; F 구현입니다. 이 구현은 &quot;결합 된&quot;보기 / 컨트롤러입니다.</target>
        </trans-unit>
        <trans-unit id="a28fd96240d773873fb27e46761d229709bb9c0a" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ProgressBarUI.</source>
          <target state="translated">ProgressBarUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="ea44464426214cb4fc7af3ea4e86c9dc073e3a38" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of SeparatorUI.</source>
          <target state="translated">SeparatorUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="524103230d8f4ce04e4ffb7374e6367e6d39a507" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of SeparatorUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">SeparatorUI의 기본 L &amp;amp; F 구현입니다. 이 구현은 &quot;결합 된&quot;보기 / 컨트롤러입니다.</target>
        </trans-unit>
        <trans-unit id="ffaab5953e723084e354c05d129bf2d7a5b06b11" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of SliderUI.</source>
          <target state="translated">SliderUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="fc182b2e3b749f812e894997134470a6c903fc0a" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of TabbedPaneUI.</source>
          <target state="translated">TabbedPaneUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="10e4474f1e0be2b51fad8c1cf90a852e079a90cb" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarSeparatorUI.</source>
          <target state="translated">ToolBarSeparatorUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="56378e91409286f49e40a5d1367e7f777761bfb4" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarSeparatorUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">ToolBarSeparatorUI의 기본 L &amp;amp; F 구현입니다. 이 구현은 &quot;결합 된&quot;보기 / 컨트롤러입니다.</target>
        </trans-unit>
        <trans-unit id="0a99b8ac60388e481db78d72edd1c6637a14dca4" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarUI.</source>
          <target state="translated">ToolBarUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="8ecd154b65ab21887639b06d195787366a5c5e48" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">ToolBarUI의 기본 L &amp;amp; F 구현입니다. 이 구현은 &quot;결합 된&quot;보기 / 컨트롤러입니다.</target>
        </trans-unit>
        <trans-unit id="9cca53b343f4a7dc7eff79153a080da200c72690" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of the SplitPaneUI.</source>
          <target state="translated">SplitPaneUI의 기본 L &amp;amp; F 구현입니다.</target>
        </trans-unit>
        <trans-unit id="7effbb868774fa7201da24bfa7e98891f4622fad" translate="yes" xml:space="preserve">
          <source>A BasicAttributes instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a single BasicAttributes instance should lock the object.</source>
          <target state="translated">BasicAttributes 인스턴스는 동시 다중 스레드 액세스와 동기화되지 않습니다. 단일 BasicAttributes 인스턴스에 액세스하고 수정하려는 여러 스레드가 객체를 잠 가야합니다.</target>
        </trans-unit>
        <trans-unit id="d9247c27ac2f78a7a463f4f28a7e2b80d016da76" translate="yes" xml:space="preserve">
          <source>A BeanContextServiceProvider implementor who wishes to provide explicit information about the services their bean may provide shall implement a BeanInfo class that implements this BeanInfo subinterface and provides explicit information about the methods, properties, events, etc, of their services.</source>
          <target state="translated">Bean이 제공 할 수있는 서비스에 대한 명시 적 정보를 제공하려는 BeanContextServiceProvider 구현자는이 BeanInfo 서브 인터페이스를 구현하고 해당 서비스의 메소드, 특성, 이벤트 등에 대한 명시 적 정보를 제공하는 BeanInfo 클래스를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="e8f23324906add1f310a590417b0abed83b70cce" translate="yes" xml:space="preserve">
          <source>A BeanDescriptor provides global information about a &quot;bean&quot;, including its Java class, its displayName, etc.</source>
          <target state="translated">BeanDescriptor는 Java 클래스, displayName 등을 포함하여 &quot;bean&quot;에 대한 글로벌 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="21e115ffee0fc95123c0feadd52121e72a12c44f" translate="yes" xml:space="preserve">
          <source>A BeanInfo object describing the target bean.</source>
          <target state="translated">대상 Bean을 설명하는 BeanInfo 오브젝트</target>
        </trans-unit>
        <trans-unit id="6c41a3a1a268cf77e426b305da1dbb801de9ddc8" translate="yes" xml:space="preserve">
          <source>A Bidi object provides information on the bidirectional reordering of the text used to create it. This is required, for example, to properly display Arabic or Hebrew text. These languages are inherently mixed directional, as they order numbers from left-to-right while ordering most other text from right-to-left.</source>
          <target state="translated">Bidi 오브젝트는 오브젝트를 작성하는 데 사용되는 텍스트의 양방향 재정렬에 대한 정보를 제공합니다. 예를 들어 아랍어 또는 히브리어 텍스트를 올바르게 표시하려면이 작업이 필요합니다. 이 언어는 본질적으로 혼합 된 방향입니다. 숫자는 왼쪽에서 오른쪽으로 정렬하고 다른 텍스트는 오른쪽에서 왼쪽으로 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="29e791cb5cdd134f853346aba38560632c6426be" translate="yes" xml:space="preserve">
          <source>A BinaryRefAddr consists of a type that describes the communication mechanism and an opaque buffer containing the address description specific to that communication mechanism. The format and interpretation of the address type and the contents of the opaque buffer are based on the agreement of three parties: the client that uses the address, the object/server that can be reached using the address, and the administrator or program that creates the address.</source>
          <target state="translated">BinaryRefAddr는 통신 메커니즘을 설명하는 유형과 해당 통신 메커니즘에 특정한 주소 설명이 포함 된 불투명 버퍼로 구성됩니다. 주소 유형의 형식과 해석 및 불투명 버퍼의 내용은 주소를 사용하는 클라이언트, 주소를 사용하여 도달 할 수있는 오브젝트 / 서버 및 작성하는 관리자 또는 프로그램의 세 당사자의 동의를 기반으로합니다. 주소.</target>
        </trans-unit>
        <trans-unit id="39a6848d4b9b5cac97a7e4fd4b3cf19f03c74e59" translate="yes" xml:space="preserve">
          <source>A Binding instance is not synchronized against concurrent access by multiple threads. Threads that need to access a Binding concurrently should synchronize amongst themselves and provide the necessary locking.</source>
          <target state="translated">바인딩 인스턴스는 여러 스레드의 동시 액세스와 동기화되지 않습니다. 바인딩에 동시에 액세스해야하는 스레드는 서로 동기화하고 필요한 잠금을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="359b87dbe2ac0cf833cd33e678422c1583e37741" translate="yes" xml:space="preserve">
          <source>A Border wrapper class which implements UIResource.</source>
          <target state="translated">UIResource를 구현하는 Border 래퍼 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d344d077cbfcb8283cabcc4f56252e81a35f735d" translate="yes" xml:space="preserve">
          <source>A Border wrapper class which implements UIResource. UI classes which set border properties should use this class to wrap any borders specified as defaults. This class delegates all method invocations to the Border &quot;delegate&quot; object specified at construction.</source>
          <target state="translated">UIResource를 구현하는 Border 래퍼 클래스입니다. 테두리 속성을 설정하는 UI 클래스는이 클래스를 사용하여 기본값으로 지정된 테두리를 래핑해야합니다. 이 클래스는 모든 메서드 호출을 생성시 지정된 Border &quot;delegate&quot;개체에 위임합니다.</target>
        </trans-unit>
        <trans-unit id="5fcf840c5e0ee43714bd210d1b1ab35679b18b25" translate="yes" xml:space="preserve">
          <source>A CannotProceedException instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify CannotProceedException should lock the object.</source>
          <target state="translated">CannotProceedException 인스턴스는 동시 다중 스레드 액세스와 동기화되지 않습니다. CannotProceedException에 액세스하고 수정하려는 여러 스레드가 오브젝트를 잠 가야합니다.</target>
        </trans-unit>
        <trans-unit id="3711f46200eab78ac34b47a9e818cad8ef3b5be1" translate="yes" xml:space="preserve">
          <source>A CardPermission with a name of &lt;code&gt;*&lt;/code&gt; applies to all card terminals. The actions string is a comma separated list of the actions listed below, or &lt;code&gt;*&lt;/code&gt; to signify &quot;all actions.&quot;</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 이름의 CardPermission은 모든 카드 단말기에 적용됩니다. 작업 문자열은 아래 나열된 작업의 쉼표로 구분 된 목록이거나 &lt;code&gt;*&lt;/code&gt; 는 &quot;모든 작업&quot;을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a5d12e1e7f853f5acc75fbcaef13869cdd98ca0d" translate="yes" xml:space="preserve">
          <source>A Catalog Resolver that implements SAX &lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt;&lt;code&gt;EntityResolver&lt;/code&gt;&lt;/a&gt;, StAX &lt;a href=&quot;../stream/xmlresolver&quot;&gt;&lt;code&gt;XMLResolver&lt;/code&gt;&lt;/a&gt;, DOM LS &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt;&lt;code&gt;LSResourceResolver&lt;/code&gt;&lt;/a&gt; used by Schema Validation, and Transform &lt;a href=&quot;../transform/uriresolver&quot;&gt;&lt;code&gt;URIResolver&lt;/code&gt;&lt;/a&gt;, and resolves external references using catalogs.</source>
          <target state="translated">SAX &lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt; &lt;code&gt;EntityResolver&lt;/code&gt; &lt;/a&gt; , StAX &lt;a href=&quot;../stream/xmlresolver&quot;&gt; &lt;code&gt;XMLResolver&lt;/code&gt; &lt;/a&gt; , 스키마 유효성 검사에서 사용하는 DOM LS &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt; &lt;code&gt;LSResourceResolver&lt;/code&gt; &lt;/a&gt; 및 Transform &lt;a href=&quot;../transform/uriresolver&quot;&gt; &lt;code&gt;URIResolver&lt;/code&gt; &lt;/a&gt; 를 구현하고 카탈로그를 사용하여 외부 참조를 확인 하는 카탈로그 확인자입니다 .</target>
        </trans-unit>
        <trans-unit id="a13b428d65b18d206b5c9f6274e74e38bb8c6763" translate="yes" xml:space="preserve">
          <source>A CatalogFeatures instance can be created through its builder as illustrated in the following sample code:</source>
          <target state="translated">CatalogFeatures 인스턴스는 다음 샘플 코드에 설명 된대로 빌더를 통해 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb4e740e5333b7ab4af49fd927ba5c0f79ed5bfd" translate="yes" xml:space="preserve">
          <source>A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher.</source>
          <target state="translated">CipherInputStream은 InputStream과 Cipher로 구성되어 read () 메소드는 기본 InputStream에서 읽지 만 Cipher에 의해 추가로 처리 된 데이터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="605214ba078d3fc48b5059183bf76aec5c86bd39" translate="yes" xml:space="preserve">
          <source>A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher. The Cipher must be fully initialized before being used by a CipherInputStream.</source>
          <target state="translated">CipherInputStream은 InputStream과 Cipher로 구성되어 read () 메소드는 기본 InputStream에서 읽지 만 Cipher에 의해 추가로 처리 된 데이터를 리턴합니다. CipherInputStream이 사용하기 전에 암호를 완전히 초기화해야합니다.</target>
        </trans-unit>
        <trans-unit id="f692652cfd014a1551d5de7afae9ef2f769afe87" translate="yes" xml:space="preserve">
          <source>A CipherOutputStream is composed of an OutputStream and a Cipher so that write() methods first process the data before writing them out to the underlying OutputStream.</source>
          <target state="translated">CipherOutputStream은 OutputStream과 Cipher로 구성되어 있으므로 write () 메소드가 기본 OutputStream에 데이터를 쓰기 전에 먼저 데이터를 처리합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
