<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="dddd1a800000dae101aac1e89fcdec3b08c15ac2" translate="yes" xml:space="preserve">
          <source>Tests whether this key's channel is ready to accept a new socket connection.</source>
          <target state="translated">이 키의 채널이 새로운 소켓 접속을 받아 들일 준비가되어 있는지를 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="5d878c471adbc9b2c8a9fa6dbce748ad8cd28072" translate="yes" xml:space="preserve">
          <source>Tests whether this thread has been interrupted. The</source>
          <target state="translated">이 스레드가 중단되었는지 테스트합니다. 그만큼</target>
        </trans-unit>
        <trans-unit id="3392e47c46aa945b753998473d535e85a39484fd" translate="yes" xml:space="preserve">
          <source>Tests whether two &lt;code&gt;TypeMirror&lt;/code&gt; objects represent the same type.</source>
          <target state="translated">두 개의 &lt;code&gt;TypeMirror&lt;/code&gt; 객체가 동일한 유형을 나타내는 지 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="890e885d9e116b52f69e2ef63c1003d7d11c8d34" translate="yes" xml:space="preserve">
          <source>Text - the textual equivalent for the value</source>
          <target state="translated">텍스트-값에 해당하는 텍스트</target>
        </trans-unit>
        <trans-unit id="2cd4f4ad22e30894dfd760bd655d6ca0d4086566" translate="yes" xml:space="preserve">
          <source>Text of notification.</source>
          <target state="translated">통지문.</target>
        </trans-unit>
        <trans-unit id="84b5008a43352c30bd5e7e53bc20f84945a7b7b7" translate="yes" xml:space="preserve">
          <source>Text styles define three sizes for the formatted text - 'full', 'short' and 'narrow'. Each of these three sizes is available in both 'standard' and 'stand-alone' variations.</source>
          <target state="translated">텍스트 스타일은 서식있는 텍스트에 대해 '전체', '짧음'및 '좁음'의 세 가지 크기를 정의합니다. 이 세 가지 크기는 각각 '표준'및 '독립형'변형으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="c0a019987906550410814728141e87a01dcb706d" translate="yes" xml:space="preserve">
          <source>TextInputCallback</source>
          <target state="translated">TextInputCallback</target>
        </trans-unit>
        <trans-unit id="3fde12722a72456d8e4d6445b0a9a4654cb73300" translate="yes" xml:space="preserve">
          <source>TextInputCallback.getDefaultText()</source>
          <target state="translated">TextInputCallback.getDefaultText()</target>
        </trans-unit>
        <trans-unit id="0a5e8244825ced667ef0950c3decd6960ad62616" translate="yes" xml:space="preserve">
          <source>TextInputCallback.getPrompt()</source>
          <target state="translated">TextInputCallback.getPrompt()</target>
        </trans-unit>
        <trans-unit id="97cad89ebd01bcfd907d406cd9142c54409b192f" translate="yes" xml:space="preserve">
          <source>TextInputCallback.getText()</source>
          <target state="translated">TextInputCallback.getText()</target>
        </trans-unit>
        <trans-unit id="628928dea47b979f7fd4227e346208d91c210955" translate="yes" xml:space="preserve">
          <source>TextInputCallback.setText()</source>
          <target state="translated">TextInputCallback.setText()</target>
        </trans-unit>
        <trans-unit id="588e445a7fb8a62cfbfe07fc7da7e4c3fa53c998" translate="yes" xml:space="preserve">
          <source>TextOutputCallback</source>
          <target state="translated">TextOutputCallback</target>
        </trans-unit>
        <trans-unit id="252f4df0a0cc7ef6d63b2964239d75a8cd935edb" translate="yes" xml:space="preserve">
          <source>TextOutputCallback.getMessage()</source>
          <target state="translated">TextOutputCallback.getMessage()</target>
        </trans-unit>
        <trans-unit id="04a3dc5e3172617d279fa04f4074aa7941b269e8" translate="yes" xml:space="preserve">
          <source>TextOutputCallback.getMessageType()</source>
          <target state="translated">TextOutputCallback.getMessageType()</target>
        </trans-unit>
        <trans-unit id="9730e5eb39c447a1781ba61855df2714772d7751" translate="yes" xml:space="preserve">
          <source>TextStyle</source>
          <target state="translated">TextStyle</target>
        </trans-unit>
        <trans-unit id="f4dca53ffd389401b79d872c5e632fd324076eef" translate="yes" xml:space="preserve">
          <source>TextStyle.asNormal()</source>
          <target state="translated">TextStyle.asNormal()</target>
        </trans-unit>
        <trans-unit id="1ef9942c75cd5e393a8ead0a76131c8945ad5e66" translate="yes" xml:space="preserve">
          <source>TextStyle.asStandalone()</source>
          <target state="translated">TextStyle.asStandalone()</target>
        </trans-unit>
        <trans-unit id="0d128dd8c9acf7ee1c4c113528b8714efd712df9" translate="yes" xml:space="preserve">
          <source>TextStyle.isStandalone()</source>
          <target state="translated">TextStyle.isStandalone()</target>
        </trans-unit>
        <trans-unit id="c83b71a023441b2dec3ae28c844e030a94a564ce" translate="yes" xml:space="preserve">
          <source>TextStyle.valueOf()</source>
          <target state="translated">TextStyle.valueOf()</target>
        </trans-unit>
        <trans-unit id="a36d687140d6a14d13a30df1289134c5a96887bf" translate="yes" xml:space="preserve">
          <source>TextStyle.values()</source>
          <target state="translated">TextStyle.values()</target>
        </trans-unit>
        <trans-unit id="4ba1cb88f64bee051232816580fd6cb2672c9cf0" translate="yes" xml:space="preserve">
          <source>TextSyntax</source>
          <target state="translated">TextSyntax</target>
        </trans-unit>
        <trans-unit id="a0e31d45ecd3597bc9c201242058dd0894346074" translate="yes" xml:space="preserve">
          <source>TextSyntax.equals()</source>
          <target state="translated">TextSyntax.equals()</target>
        </trans-unit>
        <trans-unit id="01a8db3991f8df738125e4291a8f08e2dd90e0dd" translate="yes" xml:space="preserve">
          <source>TextSyntax.getLocale()</source>
          <target state="translated">TextSyntax.getLocale()</target>
        </trans-unit>
        <trans-unit id="36257532531c5aca445403e9ee18a7e5d3a9316c" translate="yes" xml:space="preserve">
          <source>TextSyntax.getValue()</source>
          <target state="translated">TextSyntax.getValue()</target>
        </trans-unit>
        <trans-unit id="cbae53268b404fa9327fcac8b160936d3d73e4f8" translate="yes" xml:space="preserve">
          <source>TextSyntax.hashCode()</source>
          <target state="translated">TextSyntax.hashCode()</target>
        </trans-unit>
        <trans-unit id="fab8c00792aa8223f14e1550d15267c9fe32de52" translate="yes" xml:space="preserve">
          <source>TextSyntax.toString()</source>
          <target state="translated">TextSyntax.toString()</target>
        </trans-unit>
        <trans-unit id="35e814370946e73a4be7cae92516751937de9ac7" translate="yes" xml:space="preserve">
          <source>Textual representation of IP addresses</source>
          <target state="translated">IP 주소의 텍스트 표현</target>
        </trans-unit>
        <trans-unit id="117803293fc433375561793178e0696f42010099" translate="yes" xml:space="preserve">
          <source>Textual representation of IPv4 address used as input to methods takes one of the following forms:</source>
          <target state="translated">메소드 입력으로 사용되는 IPv4 주소의 텍스트 표현은 다음 형식 중 하나를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7b4628af40961c1f376a18d8c40b6de5d38b2404" translate="yes" xml:space="preserve">
          <source>Textual representation of IPv6 address used as input to methods takes one of the following forms:</source>
          <target state="translated">메소드 입력으로 사용되는 IPv6 주소의 텍스트 표현은 다음 형식 중 하나를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8c4d1dd6105f0bc77857401185e81ff007acd88e" translate="yes" xml:space="preserve">
          <source>Textual representation of IPv6 scoped addresses</source>
          <target state="translated">IPv6 범위 주소의 텍스트 표현</target>
        </trans-unit>
        <trans-unit id="fc7e4006758ef1304dbc8a17ff24569b5872cba2" translate="yes" xml:space="preserve">
          <source>Thai Buddhist leap years occur exactly in line with ISO leap years. This method does not validate the year passed in, and only has a well-defined result for years in the supported range.</source>
          <target state="translated">태국 불교 도약 연도는 ISO 윤년과 정확히 일치합니다. 이 방법은 전달 된 연도의 유효성을 검사하지 않으며 지원되는 범위의 연도에 대해 잘 정의 된 결과 만 갖습니다.</target>
        </trans-unit>
        <trans-unit id="a3a88c31fc847e5975ca0d481465a31d6c2afb88" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology</source>
          <target state="translated">ThaiBuddhistChronology</target>
        </trans-unit>
        <trans-unit id="9f4e098c159feb8a1aaa3489340db7b582b8a923" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.date()</source>
          <target state="translated">ThaiBuddhistChronology.date()</target>
        </trans-unit>
        <trans-unit id="81a9c9b5b80bdfdae92d38adf091b7f3c1052eff" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.dateEpochDay()</source>
          <target state="translated">ThaiBuddhistChronology.dateEpochDay()</target>
        </trans-unit>
        <trans-unit id="23605069d3ce7143eb2a0a9211ed2c62103e6714" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.dateNow()</source>
          <target state="translated">ThaiBuddhistChronology.dateNow()</target>
        </trans-unit>
        <trans-unit id="af7b1ba8e6be27d0b854cb3a4d57c40d2446899f" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.dateYearDay()</source>
          <target state="translated">ThaiBuddhistChronology.dateYearDay()</target>
        </trans-unit>
        <trans-unit id="93910146fe36db4c0613d18ce6c1f9117ddaf7c2" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.eraOf()</source>
          <target state="translated">ThaiBuddhistChronology.eraOf()</target>
        </trans-unit>
        <trans-unit id="9cdaba971e2dea5eb16dff0e2ef133360ef742de" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.eras()</source>
          <target state="translated">ThaiBuddhistChronology.eras()</target>
        </trans-unit>
        <trans-unit id="8e2878dd01a7e76600e403a321b5ac1650f4749c" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.getCalendarType()</source>
          <target state="translated">ThaiBuddhistChronology.getCalendarType()</target>
        </trans-unit>
        <trans-unit id="5951fdcb7eaad658dd8f305149f76d4e28ab97cc" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.getId()</source>
          <target state="translated">ThaiBuddhistChronology.getId()</target>
        </trans-unit>
        <trans-unit id="5dc3d69674033a15206befd7f6f1f0bd82e1f586" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.isLeapYear()</source>
          <target state="translated">ThaiBuddhistChronology.isLeapYear()</target>
        </trans-unit>
        <trans-unit id="0ca9e1ad57b9dc845e3c7a8290592d23191a4c7c" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.localDateTime()</source>
          <target state="translated">ThaiBuddhistChronology.localDateTime()</target>
        </trans-unit>
        <trans-unit id="62c58c7a6de0785fc1963f4cdc3f687a137b9c8a" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.prolepticYear()</source>
          <target state="translated">ThaiBuddhistChronology.prolepticYear()</target>
        </trans-unit>
        <trans-unit id="84dec28471d39425c7517074060ef484dc960f5b" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.range()</source>
          <target state="translated">ThaiBuddhistChronology.range()</target>
        </trans-unit>
        <trans-unit id="6f1b85d9c539b822fc2c329e721c9f10d3615fda" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.resolveDate()</source>
          <target state="translated">ThaiBuddhistChronology.resolveDate()</target>
        </trans-unit>
        <trans-unit id="ef04f245e01dd1ed7ca48833a62e0cf965f8b9c8" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistChronology.zonedDateTime()</source>
          <target state="translated">ThaiBuddhistChronology.zonedDateTime()</target>
        </trans-unit>
        <trans-unit id="56cacb065b48fc5b20d838fbbe8bde43dbb623ac" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate</source>
          <target state="translated">ThaiBuddhistDate</target>
        </trans-unit>
        <trans-unit id="db18fff8c5f1eba899d8e2fec3b841757b2c64a3" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.atTime()</source>
          <target state="translated">ThaiBuddhistDate.atTime()</target>
        </trans-unit>
        <trans-unit id="9d6dc83ae18f9c046ce1ca0c1c1858d808569894" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.equals()</source>
          <target state="translated">ThaiBuddhistDate.equals()</target>
        </trans-unit>
        <trans-unit id="a1d0a76834da9825dbe7a22b7df411265b938345" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.from()</source>
          <target state="translated">ThaiBuddhistDate.from()</target>
        </trans-unit>
        <trans-unit id="631ff9458cac35099e69a03f2c39b78d3177d43d" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.getChronology()</source>
          <target state="translated">ThaiBuddhistDate.getChronology()</target>
        </trans-unit>
        <trans-unit id="867efbd62bb34492da2f93784ae9940be543f6e8" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.getEra()</source>
          <target state="translated">ThaiBuddhistDate.getEra()</target>
        </trans-unit>
        <trans-unit id="b20965a16ab7d753daa15fdd1445726a4b4bc735" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.getLong()</source>
          <target state="translated">ThaiBuddhistDate.getLong()</target>
        </trans-unit>
        <trans-unit id="1d08e48b0f31e7d132dcf2513888d58482f93533" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.hashCode()</source>
          <target state="translated">ThaiBuddhistDate.hashCode()</target>
        </trans-unit>
        <trans-unit id="05c327da97b723029b77d71ab87e5769aa49376d" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.lengthOfMonth()</source>
          <target state="translated">ThaiBuddhistDate.lengthOfMonth()</target>
        </trans-unit>
        <trans-unit id="83339f429fc8d1032f157bfa1a6f48584818ee22" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.minus()</source>
          <target state="translated">ThaiBuddhistDate.minus()</target>
        </trans-unit>
        <trans-unit id="1772e94bfa441b9d316fb8029d2e0a2880c086e9" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.now()</source>
          <target state="translated">ThaiBuddhistDate.now()</target>
        </trans-unit>
        <trans-unit id="eee511f518f709d927b64f0cf053d2bc3abdf547" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.of()</source>
          <target state="translated">ThaiBuddhistDate.of()</target>
        </trans-unit>
        <trans-unit id="6e5182152bdca111eee82cfccedeccac50e6be2b" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.plus()</source>
          <target state="translated">ThaiBuddhistDate.plus()</target>
        </trans-unit>
        <trans-unit id="3caf1e8127398daabc0daecbc7a3899bc28bf097" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.range()</source>
          <target state="translated">ThaiBuddhistDate.range()</target>
        </trans-unit>
        <trans-unit id="c9251bd315b835c130709c2bd5ad364ffcd087a2" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.toEpochDay()</source>
          <target state="translated">ThaiBuddhistDate.toEpochDay()</target>
        </trans-unit>
        <trans-unit id="e14e21c8865db3adeb700749d14718da3c6d5c12" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.toString()</source>
          <target state="translated">ThaiBuddhistDate.toString()</target>
        </trans-unit>
        <trans-unit id="b5d685fb3d918cd886b757988fe0097b71da0c52" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.until()</source>
          <target state="translated">ThaiBuddhistDate.until()</target>
        </trans-unit>
        <trans-unit id="0891bb4c3ac498e3de588a3b988abfe28bd45b3a" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistDate.with()</source>
          <target state="translated">ThaiBuddhistDate.with()</target>
        </trans-unit>
        <trans-unit id="0c6f18d03a0410128636e15c4276fb431889de55" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra</source>
          <target state="translated">ThaiBuddhistEra</target>
        </trans-unit>
        <trans-unit id="1e44ae46b9f83afcc5d0dd91bd2ba339e3ffe2e6" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.getValue()</source>
          <target state="translated">ThaiBuddhistEra.getValue()</target>
        </trans-unit>
        <trans-unit id="1f8b419c0c527a193ab6d599bd7ec00e696ce392" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.of()</source>
          <target state="translated">ThaiBuddhistEra.of()</target>
        </trans-unit>
        <trans-unit id="551e2de4fb34142d0eff47396c16cf09f916c035" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.valueOf()</source>
          <target state="translated">ThaiBuddhistEra.valueOf()</target>
        </trans-unit>
        <trans-unit id="5ec30eac149daa0ab70fa50291d1ae80950de39a" translate="yes" xml:space="preserve">
          <source>ThaiBuddhistEra.values()</source>
          <target state="translated">ThaiBuddhistEra.values()</target>
        </trans-unit>
        <trans-unit id="8a430b0436fbafd13ff3f8f793fd3a22f31a2926" translate="yes" xml:space="preserve">
          <source>That</source>
          <target state="translated">That</target>
        </trans-unit>
        <trans-unit id="383a080e9d69d6f722f57039b9091b9f29317036" translate="yes" xml:space="preserve">
          <source>That a selection key indicates that its channel is ready for some operation is a hint, but not a guarantee, that such an operation can be performed by a thread without causing the thread to block. It is imperative that code that performs multiplexed I/O be written so as to ignore these hints when they prove to be incorrect.</source>
          <target state="translated">선택 키는 해당 채널이 일부 작업을 수행 할 준비가되었음을 암시하지만 이러한 작업이 스레드를 차단하지 않고 스레드에 의해 수행 될 수 있음을 보증하는 것은 아닙니다. 멀티플렉싱 된 I / O를 수행하는 코드는 이러한 힌트가 잘못된 것으로 판명 될 때 무시하도록 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="2e116fde30bfce6bc219f98a723200588db818f4" translate="yes" xml:space="preserve">
          <source>That a selection key's ready set indicates that its channel is ready for some operation category is a hint, but not a guarantee, that an operation in such a category may be performed by a thread without causing the thread to block. A ready set is most likely to be accurate immediately after the completion of a selection operation. It is likely to be made inaccurate by external events and by I/O operations that are invoked upon the corresponding channel.</source>
          <target state="translated">선택 키의 준비 세트는 해당 채널이 일부 작업 범주에 대해 준비되었음을 암시하지만 이러한 범주의 작업이 스레드를 차단하지 않고 스레드에 의해 수행 될 수 있음을 보증하지는 않습니다. 준비 작업은 선택 작업이 완료된 직후에 정확할 가능성이 높습니다. 외부 이벤트 및 해당 채널에서 호출되는 I / O 조작으로 인해 정확하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afcead73a580f282a044b63d246784dd77d66756" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;cipher.getParameters().getEncoded()&lt;/code&gt;.</source>
          <target state="translated">즉, &lt;code&gt;cipher.getParameters().getEncoded()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="006efee9935d1d56869e21b1bac583a106240016" translate="yes" xml:space="preserve">
          <source>That this method returns &lt;code&gt;false&lt;/code&gt; does not imply that no bytes have yet been decoded. Some auto-detecting decoders are capable of decoding some, or even all, of an input byte sequence without fixing on a particular charset.</source>
          <target state="translated">이 메소드가 &lt;code&gt;false&lt;/code&gt; 를 리턴 한다고해서 아직 디코딩 된 바이트가 없음을 의미하지는 않습니다. 일부 자동 감지 디코더는 특정 문자 세트를 고정하지 않고 입력 바이트 시퀀스의 일부 또는 전체를 디코딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="d28a162efe56d735c7f674ab51f90529f140fe99" translate="yes" xml:space="preserve">
          <source>The &quot;&amp;lt;hostname&amp;gt;&quot; is an ASCII representation of the hostname, which may contains A-labels. For example, a returned value of an pseudo hostname may look like:</source>
          <target state="translated">&quot;&amp;lt;hostname&amp;gt;&quot;은 A 레이블을 포함 할 수있는 호스트 이름의 ASCII 표현입니다. 예를 들어, 의사 호스트 이름의 리턴 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="761b12883375956b1fd5c3659aa381596b01fdaa" translate="yes" xml:space="preserve">
          <source>The &quot;Concurrent&quot; prefix used with some classes in this package is a shorthand indicating several differences from similar &quot;synchronized&quot; classes. For example &lt;code&gt;java.util.Hashtable&lt;/code&gt; and &lt;code&gt;Collections.synchronizedMap(new HashMap())&lt;/code&gt; are synchronized. But &lt;a href=&quot;concurrenthashmap&quot;&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/a&gt; is &quot;concurrent&quot;. A concurrent collection is thread-safe, but not governed by a single exclusion lock. In the particular case of ConcurrentHashMap, it safely permits any number of concurrent reads as well as a tunable number of concurrent writes. &quot;Synchronized&quot; classes can be useful when you need to prevent all access to a collection via a single lock, at the expense of poorer scalability. In other cases in which multiple threads are expected to access a common collection, &quot;concurrent&quot; versions are normally preferable. And unsynchronized collections are preferable when either collections are unshared, or are accessible only when holding other locks.</source>
          <target state="translated">이 패키지의 일부 클래스와 함께 사용되는 &quot;Concurrent&quot;접두사는 유사한 &quot;동기화 된&quot;클래스와 몇 가지 차이점을 나타내는 약칭입니다. 예를 들어 &lt;code&gt;java.util.Hashtable&lt;/code&gt; 과 &lt;code&gt;Collections.synchronizedMap(new HashMap())&lt;/code&gt; 은 동기화됩니다. 그러나 &lt;a href=&quot;concurrenthashmap&quot;&gt; &lt;code&gt;ConcurrentHashMap&lt;/code&gt; &lt;/a&gt;&quot;동시&quot;입니다. 동시 콜렉션은 스레드로부터 안전하지만 단일 제외 잠금으로 관리되지 않습니다. ConcurrentHashMap의 특정 경우에는 여러 개의 동시 읽기와 조정 가능한 수의 동시 쓰기를 안전하게 허용합니다. &quot;동기화 된&quot;클래스는 확장 성이 떨어지는 대신 단일 잠금을 통해 컬렉션에 대한 모든 액세스를 방지해야 할 때 유용 할 수 있습니다. 다중 스레드가 공통 콜렉션에 액세스 할 것으로 예상되는 다른 경우에는 일반적으로 &quot;동시&quot;버전이 선호됩니다. 동기화되지 않은 컬렉션은 컬렉션 중 하나를 공유하지 않거나 다른 잠금을 보유한 경우에만 액세스 할 수있는 경우에 바람직합니다.</target>
        </trans-unit>
        <trans-unit id="5c92ed0ed7f44357d29a0d93b7d5e34400a5966a" translate="yes" xml:space="preserve">
          <source>The &quot;class&quot; attribute is used to specify the target of a static method or constructor explicitly; its value being the fully qualified name of the class.</source>
          <target state="translated">&quot;class&quot;속성은 정적 메소드 또는 생성자의 대상을 명시 적으로 지정하는 데 사용됩니다. 그 값은 클래스의 정규화 된 이름입니다.</target>
        </trans-unit>
        <trans-unit id="99b714dc607d2a32a9e5ae18a28845a9ad7f9870" translate="yes" xml:space="preserve">
          <source>The &quot;destructive&quot; algorithms contained in this class, that is, the algorithms that modify the collection on which they operate, are specified to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if the collection does not support the appropriate mutation primitive(s), such as the &lt;code&gt;set&lt;/code&gt; method. These algorithms may, but are not required to, throw this exception if an invocation would have no effect on the collection. For example, invoking the &lt;code&gt;sort&lt;/code&gt; method on an unmodifiable list that is already sorted may or may not throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">이 클래스에 포함 된 &quot;파괴적인&quot;알고리즘, 즉 이들이 작동하는 컬렉션을 수정하는 알고리즘 은 컬렉션이 &lt;code&gt;set&lt;/code&gt; 메소드 와 같은 적절한 돌연변이 프리미티브를 지원하지 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 경우 UnsupportedOperationException을 발생 시키 도록 지정됩니다 . 이러한 알고리즘은 호출이 컬렉션에 영향을 미치지 않는 경우이 예외를 throw 할 수 있지만 반드시 그럴 필요는 없습니다. 예를 들어, 이미 정렬 된 수정 불가능한 목록 에서 &lt;code&gt;sort&lt;/code&gt; 메소드를 호출하면 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 이 발생하거나 발생하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d3799b0d99e9f9ae8ba59928fbe544b7e50ada4f" translate="yes" xml:space="preserve">
          <source>The &quot;destructive&quot; methods contained in this interface, that is, the methods that modify the collection on which they operate, are specified to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if this collection does not support the operation. If this is the case, these methods may, but are not required to, throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if the invocation would have no effect on the collection. For example, invoking the &lt;a href=&quot;collection#addAll-java.util.Collection-&quot;&gt;&lt;code&gt;addAll(Collection)&lt;/code&gt;&lt;/a&gt; method on an unmodifiable collection may, but is not required to, throw the exception if the collection to be added is empty.</source>
          <target state="translated">이 인터페이스에 포함 된 &quot;파괴적인&quot;메서드, 즉 해당 메서드가 작동하는 컬렉션을 수정하는 메서드는 이 컬렉션이 작업을 지원하지 않으면 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 을 발생 시키도록 지정됩니다 . 이 경우, 이러한 메소드는 호출이 콜렉션에 영향을 미치지 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 경우 UnsupportedOperationException을 발생 시킬 수 있지만 필수는 아닙니다 . 예를 들어, 수정 불가능한 컬렉션 에서 &lt;a href=&quot;collection#addAll-java.util.Collection-&quot;&gt; &lt;code&gt;addAll(Collection)&lt;/code&gt; &lt;/a&gt; 메서드를 호출하면 추가 할 컬렉션이 비어있는 경우 예외가 발생할 수 있지만 반드시 그런 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="523d08144b8e0cc24e5d2b715228e9abf2df6508" translate="yes" xml:space="preserve">
          <source>The &quot;destructive&quot; methods contained in this interface, that is, the methods that modify the map on which they operate, are specified to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if this map does not support the operation. If this is the case, these methods may, but are not required to, throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if the invocation would have no effect on the map. For example, invoking the &lt;a href=&quot;map#putAll-java.util.Map-&quot;&gt;&lt;code&gt;putAll(Map)&lt;/code&gt;&lt;/a&gt; method on an unmodifiable map may, but is not required to, throw the exception if the map whose mappings are to be &quot;superimposed&quot; is empty.</source>
          <target state="translated">이 인터페이스에 포함 된 &quot;파괴적인&quot;메소드, 즉 해당 맵이 조작하는 맵을 수정하는 메소드는 이 맵이 조작을 지원하지 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 경우 UnsupportedOperationException을 발생 시키도록 지정됩니다 . 이 경우, 이러한 메소드는 호출이 맵에 영향을 미치지 않으면 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 을 발생 시킬 수 있지만 반드시 필요한 것은 아닙니다 . 예를 들어, 수정 불가능한 맵 에서 &lt;a href=&quot;map#putAll-java.util.Map-&quot;&gt; &lt;code&gt;putAll(Map)&lt;/code&gt; &lt;/a&gt; 메소드를 호출하면 맵핑이 &quot;중첩 된&quot;맵이 비어있는 경우 예외를 처리 할 수 ​​있지만 반드시 그럴 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="eae4891e98416f7d88cd670a3c2c7ffcf50a66c3" translate="yes" xml:space="preserve">
          <source>The &quot;expert&quot; flag is used to distinguish between features that are intended for expert users from those that are intended for normal users.</source>
          <target state="translated">&quot;전문가&quot;플래그는 전문가 용 기능과 일반 사용자 용 기능을 구별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="53de2781ee0e7ac40066ecc66400a0280e82b151" translate="yes" xml:space="preserve">
          <source>The &quot;expert&quot; flag is used to distinguish between those features that are intended for expert users from those that are intended for normal users.</source>
          <target state="translated">&quot;전문가&quot;플래그는 전문 사용자를위한 기능과 일반 사용자를위한 기능을 구별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="96db2ea0542daeff5fb771b914acf904d52fda1e" translate="yes" xml:space="preserve">
          <source>The &quot;global&quot; Logger object is provided as a convenience to developers who are making casual use of the Logging package. Developers who are making serious use of the logging package (for example in products) should create and use their own Logger objects, with appropriate names, so that logging can be controlled on a suitable per-Logger granularity. Developers also need to keep a strong reference to their Logger objects to prevent them from being garbage collected.</source>
          <target state="translated">&quot;글로벌&quot;로거 오브젝트는 로깅 패키지를 자주 사용하는 개발자에게 편의를 위해 제공됩니다. 로깅 패키지 (예 : 제품)를 심각하게 사용하는 개발자는 적절한 로거 단위로 로깅을 제어 할 수 있도록 적절한 이름을 가진 고유 한 로거 개체를 만들어 사용해야합니다. 또한 개발자는 가비지 수집을 방지하기 위해 Logger 객체에 대한 강력한 참조를 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="3c8addeccbf7f5e85580dfc2361b06f37794364c" translate="yes" xml:space="preserve">
          <source>The &quot;hidden&quot; flag is used to identify features that are intended only for tool use, and which should not be exposed to humans.</source>
          <target state="translated">&quot;숨겨진&quot;플래그는 도구 용도로만 사용되며 사람에게 노출되어서는 안되는 기능을 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a488d2b6590253541ee7f92e1ac3dd1986e06a1b" translate="yes" xml:space="preserve">
          <source>The &quot;host_name&quot; type representing of a DNS hostname (see &lt;a href=&quot;snihostname&quot;&gt;&lt;code&gt;SNIHostName&lt;/code&gt;&lt;/a&gt;) in a Server Name Indication (SNI) extension.</source>
          <target state="translated">SNI (Server Name Indication) 확장에서 DNS 호스트 이름 ( &lt;a href=&quot;snihostname&quot;&gt; &lt;code&gt;SNIHostName&lt;/code&gt; &lt;/a&gt; 참조 )을 나타내는 &quot;host_name&quot;유형 입니다.</target>
        </trans-unit>
        <trans-unit id="d5ee252810cba0d533bf7f76c20a67b32a87cd3a" translate="yes" xml:space="preserve">
          <source>The &quot;listen&quot; action is only meaningful when used with &quot;localhost&quot; and means the ability to bind to a specified port. The &quot;resolve&quot; action is implied when any of the other actions are present. The action &quot;resolve&quot; refers to host/ip name service lookups.</source>
          <target state="translated">&quot;listen&quot;조치는 &quot;localhost&quot;와 함께 사용될 때만 의미가 있으며 지정된 포트에 바인드하는 기능을 의미합니다. 다른 조치가 있으면 &quot;해결&quot;조치가 내포됩니다. &quot;해결&quot;조치는 호스트 / ip 이름 서비스 조회를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="34537c0a9b18a5b97ca9dba2fc6ccb6e06339c2a" translate="yes" xml:space="preserve">
          <source>The &quot;no offset&quot; text controls what text is printed when the total amount of the offset fields to be output is zero. Example values would be 'Z', '+00:00', 'UTC' or 'GMT'. Three formats are accepted for parsing UTC - the &quot;no offset&quot; text, and the plus and minus versions of zero defined by the pattern.</source>
          <target state="translated">&quot;오프셋 없음&quot;텍스트는 출력 할 오프셋 필드의 총량이 0 일 때 인쇄 할 텍스트를 제어합니다. 예제 값은 'Z', '+00 : 00', 'UTC'또는 'GMT'입니다. UTC 구문 분석에는 &quot;오프셋 없음&quot;텍스트와 패턴에 의해 정의 된 플러스 및 마이너스 버전의 세 가지 형식이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="0039eb18c439a8fe0ded6f996e270014f44833ff" translate="yes" xml:space="preserve">
          <source>The &quot;object&quot; tag denotes an &lt;em&gt;expression&lt;/em&gt; whose value is to be used as the argument to the enclosing element.</source>
          <target state="translated">&quot;object&quot;태그 는 값이 둘러싸는 요소의 인수로 사용될 &lt;em&gt;표현식을&lt;/em&gt; 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="8b7ed3f19fc82e3673167bf96934264dcec09b2d" translate="yes" xml:space="preserve">
          <source>The &quot;preferred&quot; flag is used to identify features that are particularly important for presenting to humans.</source>
          <target state="translated">&quot;선호&quot;플래그는 사람에게 제시하는 데 특히 중요한 기능을 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e52ae4af20949258e854e3591de7eb4159275419" translate="yes" xml:space="preserve">
          <source>The &quot;propagationId&quot; field is reserved for future use. In Beans 1.0 the sole requirement is that if a listener catches a PropertyChangeEvent and then fires a PropertyChangeEvent of its own, then it should make sure that it propagates the propagationId field from its incoming event to its outgoing event.</source>
          <target state="translated">&quot;propagationId&quot;필드는 나중에 사용하기 위해 예약되어 있습니다. Beans 1.0에서 유일한 요구 사항은 리스너가 PropertyChangeEvent를 포착 한 후 고유 한 PropertyChangeEvent를 발생시키는 경우 수신 이벤트에서 발신 이벤트로 propagationId 필드를 전파해야한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="448f901e9880ca6676ec228309500276a588387c" translate="yes" xml:space="preserve">
          <source>The &quot;standard&quot; error output stream. This stream is already open and ready to accept output data.</source>
          <target state="translated">&quot;표준&quot;오류 출력 스트림. 이 스트림은 이미 열려 있고 출력 데이터를 승인 할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="9b0fa7082ba453aa32dcb16ac03daf1ba9c65c4f" translate="yes" xml:space="preserve">
          <source>The &quot;standard&quot; input stream. This stream is already open and ready to supply input data. Typically this stream corresponds to keyboard input or another input source specified by the host environment or user.</source>
          <target state="translated">&quot;표준&quot;입력 스트림 이 스트림은 이미 열려 있고 입력 데이터를 제공 할 준비가되었습니다. 일반적으로이 스트림은 키보드 입력 또는 호스트 환경이나 사용자가 지정한 다른 입력 소스에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="8d594a48963bd0f322bbb684e19620412a6932c8" translate="yes" xml:space="preserve">
          <source>The &quot;standard&quot; output stream. This stream is already open and ready to accept output data. Typically this stream corresponds to display output or another output destination specified by the host environment or user.</source>
          <target state="translated">&quot;표준&quot;출력 스트림. 이 스트림은 이미 열려 있고 출력 데이터를 승인 할 준비가되었습니다. 일반적으로이 스트림은 디스플레이 출력 또는 호스트 환경이나 사용자가 지정한 다른 출력 대상에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="542ceac497d888731f108f54134d87b43e6e1e87" translate="yes" xml:space="preserve">
          <source>The &quot;void&quot; tag denotes a &lt;em&gt;statement&lt;/em&gt; which will be executed, but whose result will not be used as an argument to the enclosing method.</source>
          <target state="translated">&quot;void&quot;태그 는 실행될 &lt;em&gt;명령문&lt;/em&gt; 을 나타내지 만 결과는 엔 클로징 메소드의 인수로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5413cb19ad08d0c83ec83a25d94198413a07db11" translate="yes" xml:space="preserve">
          <source>The &quot;widgets&quot; examples shown earlier shows how reduction combines with other operations to replace for loops with bulk operations. If &lt;code&gt;widgets&lt;/code&gt; is a collection of &lt;code&gt;Widget&lt;/code&gt; objects, which have a &lt;code&gt;getWeight&lt;/code&gt; method, we can find the heaviest widget with:</source>
          <target state="translated">앞에서 설명한 &quot;위젯&quot;예제는 축소를 다른 작업과 결합하여 루프를 벌크 작업으로 대체하는 방법을 보여줍니다. &lt;code&gt;widgets&lt;/code&gt; 가 &lt;code&gt;getWeight&lt;/code&gt; 메소드 를 갖는 &lt;code&gt;Widget&lt;/code&gt; 오브젝트 의 콜렉션 인 경우 다음을 사용 하여 가장 무거운 위젯을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd51a31f2fb3c35a53c40953e7b137610fa538ba" translate="yes" xml:space="preserve">
          <source>The '*' and '-' may only be specified in the final segment of a path and must be the only character in that segment. Any query or fragment components of the url are ignored when constructing URLPermissions.</source>
          <target state="translated">'*'및 '-'는 경로의 마지막 세그먼트에서만 지정할 수 있으며 해당 세그먼트에서 유일한 문자 여야합니다. URLPermission을 구성 할 때 URL의 쿼리 또는 조각 구성 요소는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="c3dd2c4f47449a4544b3de80cb83d745f1361cb0" translate="yes" xml:space="preserve">
          <source>The '*' character refers to all resources in the same &quot;directory&quot; - in other words all resources with the same number of path components, and which only differ in the final path component, represented by the '*'.</source>
          <target state="translated">'*'문자는 동일한 &quot;디렉토리&quot;에있는 모든 리소스를 나타냅니다. 즉, 동일한 수의 경로 구성 요소를 가진 모든 리소스를 말하며 '*'로 표시되는 최종 경로 구성 요소 만 다릅니다.</target>
        </trans-unit>
        <trans-unit id="5b1a4b786fce275a14542316145f1ffc6265c6f2" translate="yes" xml:space="preserve">
          <source>The '-' character refers to all resources recursively below the preceding path (eg. http://www.oracle.com/a/b/c/d/e.html matches this example).</source>
          <target state="translated">'-'문자는 이전 경로 아래에서 재귀 적으로 모든 리소스를 나타냅니다 (예 : http://www.oracle.com/a/b/c/d/e.html이이 예와 일치).</target>
        </trans-unit>
        <trans-unit id="2d3d7549dcf0d83ed68ff060f89f99b12e4561e6" translate="yes" xml:space="preserve">
          <source>The (possibly empty) subsequence captured by the group during the previous match, or &lt;code&gt;null&lt;/code&gt; if the group failed to match part of the input</source>
          <target state="translated">이전 일치하는 동안 그룹이 캡처 한 (아마도 비어있는) 서브 시퀀스 또는 그룹이 입력의 일부와 일치하지 않으면 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f610b577e0d0c1aa68c7de09df91b0c3b1792629" translate="yes" xml:space="preserve">
          <source>The (possibly empty) subsequence captured by the named group during the previous match, or &lt;code&gt;null&lt;/code&gt; if the group failed to match part of the input</source>
          <target state="translated">이전에 일치하는 동안 명명 된 그룹이 캡처 한 (아마도 비어있는) 하위 시퀀스이거나 , 그룹이 입력의 일부와 일치하지 않으면 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b452ff3f7cd68722baf21b3005843847575b9ad" translate="yes" xml:space="preserve">
          <source>The (possibly empty) subsequence matched by the previous match, in string form</source>
          <target state="translated">문자열 형식의 이전 일치와 일치하는 (비어있을 수있는) 하위 시퀀스</target>
        </trans-unit>
        <trans-unit id="db8c98f744455c4ea33c3652417a8d4d6babb38a" translate="yes" xml:space="preserve">
          <source>The +90 direction was chosen because simple finishing on the long edge is the same edge whether portrait or landscape.</source>
          <target state="translated">긴 쪽 가장자리의 간단한 마무리가 세로 또는 가로와 같은 가장자리이므로 +90 방향이 선택되었습니다.</target>
        </trans-unit>
        <trans-unit id="dc75f82aa609831b4e45d1280715e643c1e08fde" translate="yes" xml:space="preserve">
          <source>The 14 bit clock sequence value is constructed from the clock sequence field of this UUID. The clock sequence field is used to guarantee temporal uniqueness in a time-based UUID.</source>
          <target state="translated">14 비트 클록 시퀀스 값은이 UUID의 클록 시퀀스 필드에서 구성됩니다. 클럭 시퀀스 필드는 시간 기반 UUID에서 시간 고유성을 보장하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9244f80a9a7b954470832171ad15b5298b7c6027" translate="yes" xml:space="preserve">
          <source>The 48 bit node value is constructed from the node field of this UUID. This field is intended to hold the IEEE 802 address of the machine that generated this UUID to guarantee spatial uniqueness.</source>
          <target state="translated">48 비트 노드 값은이 UUID의 노드 필드에서 구성됩니다. 이 필드는 공간 고유성을 보장하기 위해이 UUID를 생성 한 시스템의 IEEE 802 주소를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="cf62656bdd2342ac213b17c11186efa9fdef0697" translate="yes" xml:space="preserve">
          <source>The 60 bit timestamp value is constructed from the time_low, time_mid, and time_hi fields of this &lt;code&gt;UUID&lt;/code&gt;. The resulting timestamp is measured in 100-nanosecond units since midnight, October 15, 1582 UTC.</source>
          <target state="translated">60 비트 타임 스탬프 값은이 &lt;code&gt;UUID&lt;/code&gt; 의 time_low, time_mid 및 time_hi 필드로 구성 됩니다 . 결과 타임 스탬프는 UTC 1582 년 10 월 15 일 자정 이후 100 나노초 단위로 측정됩니다.</target>
        </trans-unit>
        <trans-unit id="5148f442500cb2e7c77d69481afbed4f322b7043" translate="yes" xml:space="preserve">
          <source>The 8 primitive Java types (&lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;) are mapped to the corresponding boxed types from &lt;code&gt;java.lang&lt;/code&gt;, namely &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Byte&lt;/code&gt;, etc. The Open Type is the corresponding &lt;code&gt;SimpleType&lt;/code&gt;. Thus, &lt;em&gt;opentype(&lt;/em&gt;&lt;code&gt;long&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;SimpleType.LONG&lt;/code&gt;, and &lt;em&gt;opendata(&lt;/em&gt;&lt;code&gt;long&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;java.lang.Long&lt;/code&gt;.</source>
          <target state="translated">8 가지 기본 Java 유형 ( &lt;code&gt;boolean&lt;/code&gt; , &lt;code&gt;byte&lt;/code&gt; , &lt;code&gt;short&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;long&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;double&lt;/code&gt; , &lt;code&gt;char&lt;/code&gt; )은 &lt;code&gt;java.lang&lt;/code&gt; 의 해당 상자 유형 ( 예 : &lt;code&gt;Boolean&lt;/code&gt; , &lt;code&gt;Byte&lt;/code&gt; )에 맵핑됩니다 . Open Type은 해당 &lt;code&gt;SimpleType&lt;/code&gt; 입니다. 따라서 &lt;em&gt;opentype ( &lt;/em&gt; &lt;code&gt;long&lt;/code&gt; &lt;em&gt;)&lt;/em&gt; 은 &lt;code&gt;SimpleType.LONG&lt;/code&gt; 이고 &lt;em&gt;opendata ( &lt;/em&gt; &lt;code&gt;long&lt;/code&gt; &lt;em&gt;)&lt;/em&gt; 는 &lt;code&gt;java.lang.Long&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="190f5e4e1c44c5bff240e5e10541bfc811769ca9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#floatdFlags&quot;&gt;default behavior&lt;/a&gt; when no flags are given is the same as for Float and Double.</source>
          <target state="translated">플래그가 지정되지 않은 경우 의 &lt;a href=&quot;#floatdFlags&quot;&gt;기본 동작&lt;/a&gt; 은 Float 및 Double과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="bc51dcb232ef7f25e91fae041a5e61191866e752" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; that uniquely identifies the management interface for logging within the &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt; 고유 내에서 기록의 관리 인터페이스를 식별 &lt;code&gt;MBeanServer&lt;/code&gt; 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9a85bd907f559c9802535fa51f23ef29d3d95c9e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../io/file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class defines the &lt;a href=&quot;../../io/file#toPath--&quot;&gt;&lt;code&gt;toPath&lt;/code&gt;&lt;/a&gt; method to construct a &lt;a href=&quot;path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; by converting the abstract path represented by the &lt;code&gt;java.io.File&lt;/code&gt; object. The resulting &lt;code&gt;Path&lt;/code&gt; can be used to operate on the same file as the &lt;code&gt;File&lt;/code&gt; object. The &lt;code&gt;Path&lt;/code&gt; specification provides further information on the &lt;a href=&quot;path#interop&quot;&gt;interoperability&lt;/a&gt; between &lt;code&gt;Path&lt;/code&gt; and &lt;code&gt;java.io.File&lt;/code&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;../../io/file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 클래스는 정의 &lt;a href=&quot;../../io/file#toPath--&quot;&gt; &lt;code&gt;toPath&lt;/code&gt; 의&lt;/a&gt; 구성하는 방법 &lt;a href=&quot;path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 에 의해 표현 된 추상적 인 경로로 변환하여 &lt;code&gt;java.io.File&lt;/code&gt; 의의 객체를. 결과 &lt;code&gt;Path&lt;/code&gt; 는 &lt;code&gt;File&lt;/code&gt; 객체 와 동일한 파일에서 작동하는 데 사용할 수 있습니다 . &lt;code&gt;Path&lt;/code&gt; 사양은에 대한 자세한 정보를 제공하는 &lt;a href=&quot;path#interop&quot;&gt;상호 운용성&lt;/a&gt; 사이의 &lt;code&gt;Path&lt;/code&gt; 및 &lt;code&gt;java.io.File&lt;/code&gt; 의의 객체.</target>
        </trans-unit>
        <trans-unit id="d5be3abde35d6105d79ad74bc634371ab99a05a5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../java/net/uri&quot;&gt;URI&lt;/a&gt; returned from &lt;code&gt;&lt;a href=&quot;fileobject#toUri--&quot;&gt;FileObject.toUri()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;fileobject#toUri--&quot;&gt;FileObject.toUri()&lt;/a&gt;&lt;/code&gt; 에서 반환 된 &lt;a href=&quot;../../java/net/uri&quot;&gt;URI&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="134ad8107ae31bdb06239d777265c61dbef39bc0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../java/util/locale&quot;&gt;locale&lt;/a&gt; of the description in this &lt;code&gt;MBeanInfo&lt;/code&gt;, &lt;code&gt;MBeanAttributeInfo&lt;/code&gt;, etc, as returned by &lt;a href=&quot;../../java/util/locale#toString--&quot;&gt;&lt;code&gt;Locale.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../java/util/locale#toString--&quot;&gt; &lt;code&gt;Locale.toString()&lt;/code&gt; &lt;/a&gt; 의해 돌려 주어지는 이 &lt;code&gt;MBeanInfo&lt;/code&gt; , &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; 등 의 설명 의 &lt;a href=&quot;../../java/util/locale&quot;&gt;로케일&lt;/a&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="f1ec0c7d3ac150a1e7303b1353c79b5a3e266162" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../net/protocolfamily&quot;&gt;&lt;code&gt;ProtocolFamily&lt;/code&gt;&lt;/a&gt; of the channel's socket is platform (and possibly configuration) dependent and therefore unspecified. The &lt;a href=&quot;datagramchannel#open-java.net.ProtocolFamily-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; allows the protocol family to be selected when opening a datagram channel, and should be used to open datagram channels that are intended for Internet Protocol multicasting.</source>
          <target state="translated">채널 소켓 의 &lt;a href=&quot;../../net/protocolfamily&quot;&gt; &lt;code&gt;ProtocolFamily&lt;/code&gt; &lt;/a&gt; 는 플랫폼 (및 구성)에 따라 다르므로 지정되지 않습니다. &lt;a href=&quot;datagramchannel#open-java.net.ProtocolFamily-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt; 그램 채널을 개방 할 때, 상기 프로토콜 패밀리가 선택 될 수 있으며, 인터넷 프로토콜 멀티 캐스팅 의도 그램 오픈 채널을 사용하여야한다.</target>
        </trans-unit>
        <trans-unit id="17b844a7bf6569487aadb2b841362d26db2df769" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../net/standardsocketoptions#SO_REUSEADDR&quot;&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;&lt;/a&gt; option should be enabled prior to &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt;&lt;code&gt;binding&lt;/code&gt;&lt;/a&gt; the socket. This is required to allow multiple members of the group to bind to the same address.</source>
          <target state="translated">&lt;a href=&quot;../../net/standardsocketoptions#SO_REUSEADDR&quot;&gt; &lt;code&gt;SO_REUSEADDR&lt;/code&gt; 의&lt;/a&gt; 옵션은 이전에 사용하도록 설정해야합니다 &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt; &lt;code&gt;binding&lt;/code&gt; &lt;/a&gt; 소켓을. 이는 그룹의 여러 구성원이 동일한 주소에 바인딩 할 수 있도록하는 데 필요합니다.</target>
        </trans-unit>
        <trans-unit id="8cce448bf1e954b21943bc931e3a7ed24ae93fed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../util/locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; class provide access to a range of information useful for localizing an application. This includes the language and region, such as &quot;en-GB&quot; for English as used in Great Britain.</source>
          <target state="translated">&lt;a href=&quot;../../util/locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt; 클래스는 응용 프로그램을 지역화에 대한 유용한 정보의 범위에 대한 액세스를 제공합니다. 여기에는 영국에서 사용되는 &quot;en-GB&quot;와 같은 언어 및 지역이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f7bcc13ad5cb486576996f847be7d97aa0930b3d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; methods may also be used to read or update the owner. In that case, the owner attribute is identified by the name &lt;code&gt;&quot;owner&quot;&lt;/code&gt;, and the value of the attribute is a &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; &lt;/a&gt; 방법도 읽거나 소유자를 업데이트 할 수 있습니다. 이 경우 소유자 속성은 &lt;code&gt;&quot;owner&quot;&lt;/code&gt; 이름으로 식별되며 속성 값은 &lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6c2baff7408e5ad54d49ec829c03c8add1ffdf24" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read any of these attributes as if by invoking the &lt;a href=&quot;basicfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; &lt;/a&gt; 방법 것처럼 호출하여 이러한 속성 중 하나를 판독하기 위해 사용될 수있다 &lt;a href=&quot;basicfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="e42fb0b1ed94cf5c272dbff37a665442f101c72a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read any of these attributes, or any of the attributes defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; as if by invoking the &lt;a href=&quot;dosfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; &lt;/a&gt; 방법에 의해 정의 된 속성들의 이러한 특성 중 하나 또는 임의의 판독하는데 사용될 수있다 &lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; 을&lt;/a&gt; 것처럼 호출하여 &lt;a href=&quot;dosfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="cc5e5360eedff08a35975f0e9a9480502f02b841" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read any of these attributes, or any of the attributes defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; as if by invoking the &lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; &lt;/a&gt; 방법에 의해 정의 된 속성들의 이러한 특성 중 하나 또는 임의의 판독하는데 사용될 수있다 &lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; 을&lt;/a&gt; 것처럼 호출하여 &lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="52e7fac281b42fd7fe7452e241108ef2d5dcf7d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;getAttribute&lt;/code&gt;&lt;/a&gt; method may be used to read the ACL or owner attributes as if by invoking the &lt;a href=&quot;aclfileattributeview#getAcl--&quot;&gt;&lt;code&gt;getAcl&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt;&lt;code&gt;getOwner&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;../files#getAttribute-java.nio.file.Path-java.lang.String-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;getAttribute&lt;/code&gt; &lt;/a&gt; 방법 것처럼 호출하여 ACL 또는 소유자 속성을 판독하기 위해 사용될 수있다 &lt;a href=&quot;aclfileattributeview#getAcl--&quot;&gt; &lt;code&gt;getAcl&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt; &lt;code&gt;getOwner&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="1bfa9ca3b01e08a940097655d13c2a85724d95de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the ACL or owner attributes as if by invoking the &lt;a href=&quot;aclfileattributeview#setAcl-java.util.List-&quot;&gt;&lt;code&gt;setAcl&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt;&lt;code&gt;setOwner&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; &lt;/a&gt; 방법은 경우로 호출하여 ACL 또는 소유자의 속성을 업데이트 할 수 있습니다 &lt;a href=&quot;aclfileattributeview#setAcl-java.util.List-&quot;&gt; &lt;code&gt;setAcl&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt; &lt;code&gt;setOwner&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="c435d3e3c46a4b9a0beff2ad2d5cec4c6ab7aa83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the file's last modified time, last access time or create time attributes as defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt;. It may also be used to update the DOS attributes as if by invoking the &lt;a href=&quot;dosfileattributeview#setReadOnly-boolean-&quot;&gt;&lt;code&gt;setReadOnly&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;dosfileattributeview#setHidden-boolean-&quot;&gt;&lt;code&gt;setHidden&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;dosfileattributeview#setSystem-boolean-&quot;&gt;&lt;code&gt;setSystem&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;dosfileattributeview#setArchive-boolean-&quot;&gt;&lt;code&gt;setArchive&lt;/code&gt;&lt;/a&gt; methods respectively.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; &lt;/a&gt; 방법은, 마지막 액세스 시간을 파일의 마지막 수정 시간을 업데이트하거나 의해 정의 된 시간 속성을 만들 수 있습니다 &lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;dosfileattributeview#setReadOnly-boolean-&quot;&gt; &lt;code&gt;setReadOnly&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;dosfileattributeview#setHidden-boolean-&quot;&gt; &lt;code&gt;setHidden&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;dosfileattributeview#setSystem-boolean-&quot;&gt; &lt;code&gt;setSystem&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;dosfileattributeview#setArchive-boolean-&quot;&gt; &lt;code&gt;setArchive&lt;/code&gt; &lt;/a&gt; 메소드를 각각 호출하여 마치 DOS 속성을 업데이트하는 데 사용될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eda9c31c1c567716843eb27dfd24c5d17ae4a65a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the file's last modified time, last access time or create time attributes as defined by &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt;. It may also be used to update the permissions, owner, or group-owner as if by invoking the &lt;a href=&quot;posixfileattributeview#setPermissions-java.util.Set-&quot;&gt;&lt;code&gt;setPermissions&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt;&lt;code&gt;setOwner&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;posixfileattributeview#setGroup-java.nio.file.attribute.GroupPrincipal-&quot;&gt;&lt;code&gt;setGroup&lt;/code&gt;&lt;/a&gt; methods respectively.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; &lt;/a&gt; 방법은, 마지막 액세스 시간을 파일의 마지막 수정 시간을 업데이트하거나 의해 정의 된 시간 속성을 만들 수 있습니다 &lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt; . 또한 호출하여 것처럼 권한 소유자 또는 운영자 그룹을 업데이트하기 위해 사용될 수있다 &lt;a href=&quot;posixfileattributeview#setPermissions-java.util.Set-&quot;&gt; &lt;code&gt;setPermissions&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt; &lt;code&gt;setOwner&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;posixfileattributeview#setGroup-java.nio.file.attribute.GroupPrincipal-&quot;&gt; &lt;code&gt;setGroup&lt;/code&gt; 의&lt;/a&gt; 각각 방법.</target>
        </trans-unit>
        <trans-unit id="a691ef8b98d41f4420b4aefb065db958be6429d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;setAttribute&lt;/code&gt;&lt;/a&gt; method may be used to update the file's last modified time, last access time or create time attributes as if by invoking the &lt;a href=&quot;basicfileattributeview#setTimes-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-&quot;&gt;&lt;code&gt;setTimes&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../files#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;setAttribute&lt;/code&gt; &lt;/a&gt; 방법은, 마지막 액세스 시간을 파일의 마지막 수정 시간을 업데이트하거나 호출하여 마치 시간 속성을 만들 수 있습니다 &lt;a href=&quot;basicfileattributeview#setTimes-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-&quot;&gt; &lt;code&gt;setTimes&lt;/code&gt; 의&lt;/a&gt; 방법을.</target>
        </trans-unit>
        <trans-unit id="580a6d6beeb8ffe4eb2d62290bc22802acbffaee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../filestore#supportsFileAttributeView-java.lang.Class-&quot;&gt;&lt;code&gt;supportsFileAttributeView&lt;/code&gt;&lt;/a&gt; method may be used to test if a specific &lt;a href=&quot;../filestore&quot;&gt;&lt;code&gt;FileStore&lt;/code&gt;&lt;/a&gt; supports the storage of user-defined attributes.</source>
          <target state="translated">&lt;a href=&quot;../filestore#supportsFileAttributeView-java.lang.Class-&quot;&gt; &lt;code&gt;supportsFileAttributeView&lt;/code&gt; 의&lt;/a&gt; 특정 경우에있어서 테스트하는데 사용될 수있다 &lt;a href=&quot;../filestore&quot;&gt; &lt;code&gt;FileStore&lt;/code&gt; &lt;/a&gt; 사용자 정의 속성의 저장을 지원한다.</target>
        </trans-unit>
        <trans-unit id="0ee89249aaebf2f1fc5eeda71bacdd03058fa195" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../function/supplier#get--&quot;&gt;&lt;code&gt;Supplier.get()&lt;/code&gt;&lt;/a&gt; method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences.</source>
          <target state="translated">&lt;a href=&quot;../function/supplier#get--&quot;&gt; &lt;code&gt;Supplier.get()&lt;/code&gt; &lt;/a&gt; 메소드는 한번 이상 보조 장비에 호출하지 않고, 단지 스트림 파이프의 말단이 시작된 것 수술후한다.</target>
        </trans-unit>
        <trans-unit id="142dbbdea20e0ff6bd9b8a5f8d0a573aae47a0f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../mappedbytebuffer&quot;&gt;&lt;code&gt;&lt;i&gt;mapped byte buffer&lt;/i&gt;&lt;/code&gt;&lt;/a&gt; returned by this method will have a position of zero and a limit and capacity of &lt;code&gt;size&lt;/code&gt;; its mark will be undefined. The buffer and the mapping that it represents will remain valid until the buffer itself is garbage-collected.</source>
          <target state="translated">&lt;a href=&quot;../mappedbytebuffer&quot;&gt; &lt;code&gt;&lt;i&gt;mapped byte buffer&lt;/i&gt;&lt;/code&gt; &lt;/a&gt; 이러한 방법에 의해 리턴 제로의 위치와 한계 용량 것이다 &lt;code&gt;size&lt;/code&gt; ; 마크가 정의되지 않습니다. 버퍼와 버퍼가 나타내는 매핑은 버퍼 자체가 가비지 수집 될 때까지 유효합니다.</target>
        </trans-unit>
        <trans-unit id="48db05c222075f07f78662388844eeb5f6f1bc01" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/channels/filechannel#position--&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; of the returned channel will always be equal to this object's file-pointer offset as returned by the &lt;a href=&quot;randomaccessfile#getFilePointer--&quot;&gt;&lt;code&gt;getFilePointer&lt;/code&gt;&lt;/a&gt; method. Changing this object's file-pointer offset, whether explicitly or by reading or writing bytes, will change the position of the channel, and vice versa. Changing the file's length via this object will change the length seen via the file channel, and vice versa.</source>
          <target state="translated">리턴 된 채널 의 &lt;a href=&quot;../nio/channels/filechannel#position--&quot;&gt; &lt;code&gt;position&lt;/code&gt; &lt;/a&gt; 는 항상 &lt;a href=&quot;randomaccessfile#getFilePointer--&quot;&gt; &lt;code&gt;getFilePointer&lt;/code&gt; &lt;/a&gt; 메소드에 의해 리턴 된이 오브젝트의 파일 포인터 오프셋과 같습니다 . 명시 적으로 또는 바이트를 읽거나 쓰는 방식으로이 객체의 파일 포인터 오프셋을 변경하면 채널의 위치가 변경되고 그 반대도 마찬가지입니다. 이 객체를 통해 파일 길이를 변경하면 파일 채널을 통해 보이는 길이가 변경되며 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="1b7577f54ca9ebadbf67e174ed9fc74807c65a0b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/file/files&quot;&gt;&lt;code&gt;Files&lt;/code&gt;&lt;/a&gt; class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.</source>
          <target state="translated">&lt;a href=&quot;../nio/file/files&quot;&gt; &lt;code&gt;Files&lt;/code&gt; &lt;/a&gt; 파일 권한을 포함하여 파일 속성에서 작동 클래스를 정의 방법. 파일 권한을보다 세밀하게 조작해야 할 때 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3185bf54751cfa5bf1ebba53d67faccb98bf6516" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/file/files#createTempFile-java.lang.String-java.lang.String-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;Files.createTempFile&lt;/code&gt;&lt;/a&gt; method provides an alternative method to create an empty file in the temporary-file directory. Files created by that method may have more restrictive access permissions to files created by this method and so may be more suited to security-sensitive applications.</source>
          <target state="translated">&lt;a href=&quot;../nio/file/files#createTempFile-java.lang.String-java.lang.String-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;Files.createTempFile&lt;/code&gt; 의&lt;/a&gt; 방법은 임시 파일 디렉토리에 빈 파일을 만들 수있는 다른 방법을 제공한다. 해당 방법으로 생성 된 파일은이 방법으로 생성 된 파일에 대해 더 제한적인 액세스 권한을 가질 수 있으므로 보안에 민감한 응용 프로그램에 더 적합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1cd2dbce708c6940c8cf8ba35f1bba1e58ac0ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../nio/file/package-summary&quot;&gt;&lt;code&gt;java.nio.file&lt;/code&gt;&lt;/a&gt; package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems. This API may be used to overcome many of the limitations of the &lt;code&gt;java.io.File&lt;/code&gt; class. The &lt;a href=&quot;file#toPath--&quot;&gt;&lt;code&gt;toPath&lt;/code&gt;&lt;/a&gt; method may be used to obtain a &lt;a href=&quot;../nio/file/path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; that uses the abstract path represented by a &lt;code&gt;File&lt;/code&gt; object to locate a file. The resulting &lt;code&gt;Path&lt;/code&gt; may be used with the &lt;a href=&quot;../nio/file/files&quot;&gt;&lt;code&gt;Files&lt;/code&gt;&lt;/a&gt; class to provide more efficient and extensive access to additional file operations, file attributes, and I/O exceptions to help diagnose errors when an operation on a file fails.</source>
          <target state="translated">&lt;a href=&quot;../nio/file/package-summary&quot;&gt; &lt;code&gt;java.nio.file&lt;/code&gt; 의&lt;/a&gt; 패키지 액세스 파일, 파일 속성, 및 파일 시스템에 자바 가상 머신의 인터페이스 및 클래스를 정의합니다. 이 API는 &lt;code&gt;java.io.File&lt;/code&gt; 클래스 의 많은 제한 사항을 극복하는 데 사용될 수 있습니다 . &lt;a href=&quot;file#toPath--&quot;&gt; &lt;code&gt;toPath&lt;/code&gt; 의&lt;/a&gt; 방법은 얻을 수 있습니다 &lt;a href=&quot;../nio/file/path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; a로 표현되는 추상적 인 경로를 사용하여 &lt;code&gt;File&lt;/code&gt; 파일을 찾을 수 개체를. 결과 &lt;code&gt;Path&lt;/code&gt; 는 &lt;a href=&quot;../nio/file/files&quot;&gt; &lt;code&gt;Files&lt;/code&gt; &lt;/a&gt; 클래스 와 함께 사용되어 파일 작업이 실패 할 때 오류를 진단하는 데 도움이되는 추가 파일 작업, 파일 특성 및 I / O 예외에 대한보다 효율적이고 광범위한 액세스를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e1a4cbb02bf6c03d5a44b8766a6b75e3bd7ef2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../temporal/chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;Epoch Day count&lt;/code&gt;&lt;/a&gt; is a simple incrementing count of days where day 0 is 1970-01-01 (ISO). This definition is the same for all chronologies, enabling conversion.</source>
          <target state="translated">&lt;a href=&quot;../temporal/chronofield#EPOCH_DAY&quot;&gt; &lt;code&gt;Epoch Day count&lt;/code&gt; &lt;/a&gt; 일 0 1970-01-01 (ISO)입니다 일의 수를 증가 간단. 이 정의는 모든 연대기에서 동일하므로 변환이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="5e38b37aeff6c0bffbe4d4c7f1f5d153a7812a9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../util/calendar&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt; instance used for calculating the date-time fields and the instant of time. This field is used for both formatting and parsing.</source>
          <target state="translated">&lt;a href=&quot;../util/calendar&quot;&gt; &lt;code&gt;Calendar&lt;/code&gt; &lt;/a&gt; 날짜 - 시간 필드와 시간의 순간을 계산하는 데 사용 예. 이 필드는 형식화 및 구문 분석에 모두 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bde57531a30d3dd5f7c37db7a69c3a1d61935c91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneid#getId--&quot;&gt;&lt;code&gt;zone ID&lt;/code&gt;&lt;/a&gt;. This is not part of the ISO-8601 standard. Parsing is case sensitive.</source>
          <target state="translated">&lt;a href=&quot;../zoneid#getId--&quot;&gt; &lt;code&gt;zone ID&lt;/code&gt; &lt;/a&gt; . 이것은 ISO-8601 표준의 일부가 아닙니다. 파싱은 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="d3169944a88bbb1bad97a1a30cd73363ef99816c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt; without colons or seconds. An offset of zero uses &quot;GMT&quot;. North American zone names and military zone names are not handled.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt; 콜론 또는 초없이. 오프셋 0은 &quot;GMT&quot;를 사용합니다. 북미 지역 이름 및 군사 지역 이름은 처리되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ccd8df3518a4d9b943302ee23512831c55573aa6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt; without colons. If the offset has seconds then they will be handled even though this is not part of the ISO-8601 standard. Parsing is case insensitive.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt; 콜론없이. 오프셋에 초가 있으면 이것이 ISO-8601 표준의 일부가 아니더라도 처리됩니다. 파싱은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ef469acd11a9914f386735c8a07ac2ef3e1fdbdb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt;. If the offset has seconds then they will be handled even though this is not part of the ISO-8601 standard.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt; . 오프셋에 초가 있으면 이것이 ISO-8601 표준의 일부가 아니더라도 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="7eb4562aec376d8a60cf8842edb8d8443f0a1248" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../zoneoffset#getId--&quot;&gt;&lt;code&gt;offset ID&lt;/code&gt;&lt;/a&gt;. If the offset has seconds then they will be handled even though this is not part of the ISO-8601 standard. Parsing is case insensitive.</source>
          <target state="translated">&lt;a href=&quot;../zoneoffset#getId--&quot;&gt; &lt;code&gt;offset ID&lt;/code&gt; &lt;/a&gt; . 오프셋에 초가 있으면 이것이 ISO-8601 표준의 일부가 아니더라도 처리됩니다. 파싱은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fbbeb22d9b7e39547534480fe8598ea8d98e6e22" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;abstractqueuedsynchronizer&quot;&gt;&lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt;&lt;/a&gt; class serves as a useful superclass for defining locks and other synchronizers that rely on queuing blocked threads. The &lt;a href=&quot;abstractqueuedlongsynchronizer&quot;&gt;&lt;code&gt;AbstractQueuedLongSynchronizer&lt;/code&gt;&lt;/a&gt; class provides the same functionality but extends support to 64 bits of synchronization state. Both extend class &lt;a href=&quot;abstractownablesynchronizer&quot;&gt;&lt;code&gt;AbstractOwnableSynchronizer&lt;/code&gt;&lt;/a&gt;, a simple class that helps record the thread currently holding exclusive synchronization. The &lt;a href=&quot;locksupport&quot;&gt;&lt;code&gt;LockSupport&lt;/code&gt;&lt;/a&gt; class provides lower-level blocking and unblocking support that is useful for those developers implementing their own customized lock classes.</source>
          <target state="translated">&lt;a href=&quot;abstractqueuedsynchronizer&quot;&gt; &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt; 의의&lt;/a&gt; 클래스 잠금 차단 된 스레드가 대기에 의존하는 다른 싱크로 나이저를 정의하는 수퍼 유용한 역할을한다. &lt;a href=&quot;abstractqueuedlongsynchronizer&quot;&gt; &lt;code&gt;AbstractQueuedLongSynchronizer&lt;/code&gt; 의&lt;/a&gt; 클래스는 동일한 기능을 제공하지만, 동기 상태의 64 비트 지원을 연장한다. 둘 다 현재 클래스 독점 동기화를 보유하고있는 스레드를 기록하는 데 도움이되는 간단한 클래스 인 &lt;a href=&quot;abstractownablesynchronizer&quot;&gt; &lt;code&gt;AbstractOwnableSynchronizer&lt;/code&gt; &lt;/a&gt; 클래스를 확장 합니다. &lt;a href=&quot;locksupport&quot;&gt; &lt;code&gt;LockSupport&lt;/code&gt; 의&lt;/a&gt; 클래스는 자신의 사용자 정의 잠금 클래스를 구현하는 개발자들에게 유용 차단 낮은 수준의 차단 해제 지원을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cfef7de48d524821a8ec7c9579af151f13cdc049" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;accesscontroller#checkPermission-java.security.Permission-&quot;&gt;&lt;code&gt;checkPermission&lt;/code&gt;&lt;/a&gt; method determines whether the access request indicated by a specified permission should be granted or denied. A sample call appears below. In this example, &lt;code&gt;checkPermission&lt;/code&gt; will determine whether or not to grant &quot;read&quot; access to the file named &quot;testFile&quot; in the &quot;/temp&quot; directory.</source>
          <target state="translated">&lt;a href=&quot;accesscontroller#checkPermission-java.security.Permission-&quot;&gt; &lt;code&gt;checkPermission&lt;/code&gt; &lt;/a&gt; 방법은 특정 권한에 의해 지시 된 액세스 요구를 허용 할 것인지 또는 거부 할 것인지를 결정한다. 아래에 샘플 통화가 나타납니다. 이 예에서 &lt;code&gt;checkPermission&lt;/code&gt; 은 &quot;/ temp&quot;디렉토리의 &quot;testFile&quot;파일에 &quot;읽기&quot;액세스 권한을 부여할지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="7af739ac4d097cac2c6f5ee5bae27b0834134652" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#flags&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; component is a set of &lt;a href=&quot;aclentryflag&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; to indicate how entries are inherited and propagated</source>
          <target state="translated">&lt;a href=&quot;aclentry#flags&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt; 구성 요소의 집합입니다 &lt;a href=&quot;aclentryflag&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt; 항목이 상속 및 전파하는 방법을 나타 내기 위해</target>
        </trans-unit>
        <trans-unit id="69c9b8c45ab29ebc4b01d4e76c2c7f6f5bb01e81" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#permissions--&quot;&gt;&lt;code&gt;permissions&lt;/code&gt;&lt;/a&gt; component is a set of &lt;a href=&quot;aclentrypermission&quot;&gt;&lt;code&gt;permissions&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;aclentry#permissions--&quot;&gt; &lt;code&gt;permissions&lt;/code&gt; &lt;/a&gt; 컴포넌트의 집합 &lt;a href=&quot;aclentrypermission&quot;&gt; &lt;code&gt;permissions&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4243500d113a1e8dca92fc8e0626cf084b1c7810" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#principal--&quot;&gt;&lt;code&gt;principal&lt;/code&gt;&lt;/a&gt; component, sometimes called the &quot;who&quot; component, is a &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt; corresponding to the identity that the entry grants or denies access</source>
          <target state="translated">&quot;who&quot;구성 요소라고도 하는 &lt;a href=&quot;aclentry#principal--&quot;&gt; &lt;code&gt;principal&lt;/code&gt; &lt;/a&gt; 구성 요소 는 항목이 액세스 권한을 부여하거나 거부하는 ID에 해당 하는 &lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f2f5e00fa6ae64b393f6e7d80594412fecc00383" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclentry#type--&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; component determines if the entry grants or denies access.</source>
          <target state="translated">&lt;a href=&quot;aclentry#type--&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt; 항목이 부여하거나 액세스를 거부하는 경우 구성 요소를 결정한다.</target>
        </trans-unit>
        <trans-unit id="f7f010146e9231a02191ac41817da03a8fd8aa8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;aclfileattributeview&quot;&gt;&lt;code&gt;AclFileAttributeView&lt;/code&gt;&lt;/a&gt; class defines methods to read and write the Access Control List (ACL) file attribute. The ACL model used by this file attribute view is based on the model defined by &lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt; &lt;i&gt;RFC 3530: Network File System (NFS) version 4 Protocol&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;aclfileattributeview&quot;&gt; &lt;code&gt;AclFileAttributeView&lt;/code&gt; &lt;/a&gt; 클래스를 정의 방법은 읽기 및 액세스 제어 목록 (ACL) 파일 속성을 작성합니다. 이 파일 속성보기에서 사용되는 ACL 모델은 &lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt;RFC 3530 : NFS (Network File System) 버전 4 프로토콜에&lt;/i&gt;&lt;/a&gt; 의해 정의 된 모델을 기반으로합니다 . &lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="d757646f4f57b621bdd66e46c7cc777a0dd7b6f0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;annotatedelement#getAnnotationsByType-java.lang.Class-&quot;&gt;&lt;code&gt;getAnnotationsByType(Class)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;annotatedelement#getDeclaredAnnotationsByType-java.lang.Class-&quot;&gt;&lt;code&gt;getDeclaredAnnotationsByType(Class)&lt;/code&gt;&lt;/a&gt; methods support multiple annotations of the same type on an element. If the argument to either method is a repeatable annotation type (JLS 9.6), then the method will &quot;look through&quot; a container annotation (JLS 9.7), if present, and return any annotations inside the container. Container annotations may be generated at compile-time to wrap multiple annotations of the argument type.</source>
          <target state="translated">&lt;a href=&quot;annotatedelement#getAnnotationsByType-java.lang.Class-&quot;&gt; &lt;code&gt;getAnnotationsByType(Class)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;annotatedelement#getDeclaredAnnotationsByType-java.lang.Class-&quot;&gt; &lt;code&gt;getDeclaredAnnotationsByType(Class)&lt;/code&gt; &lt;/a&gt; 방법은 요소에 동일한 유형의 다수의 주석을 지원한다. 두 메소드 중 하나에 대한 인수가 반복 가능한 어노테이션 유형 (JLS 9.6) 인 경우, 메소드는 컨테이너 어노테이션 (JLS 9.7)을 &quot;찾아보고&quot;컨테이너 내의 어노테이션을 리턴합니다. 컴파일시 컨테이너 주석이 생성되어 인수 유형의 여러 주석을 래핑 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5538279924c592259bec4c32883911ad4ee9986c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;asynchronouschannelgroup#shutdown--&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; method is used to initiate an &lt;em&gt;orderly shutdown&lt;/em&gt; of a group. An orderly shutdown marks the group as shutdown; further attempts to construct a channel that binds to the group will throw &lt;a href=&quot;shutdownchannelgroupexception&quot;&gt;&lt;code&gt;ShutdownChannelGroupException&lt;/code&gt;&lt;/a&gt;. Whether or not a group is shutdown can be tested using the &lt;a href=&quot;asynchronouschannelgroup#isShutdown--&quot;&gt;&lt;code&gt;isShutdown&lt;/code&gt;&lt;/a&gt; method. Once shutdown, the group &lt;em&gt;terminates&lt;/em&gt; when all asynchronous channels that are bound to the group are closed, all actively executing completion handlers have run to completion, and resources used by the group are released. No attempt is made to stop or interrupt threads that are executing completion handlers. The &lt;a href=&quot;asynchronouschannelgroup#isTerminated--&quot;&gt;&lt;code&gt;isTerminated&lt;/code&gt;&lt;/a&gt; method is used to test if the group has terminated, and the &lt;a href=&quot;asynchronouschannelgroup#awaitTermination-long-java.util.concurrent.TimeUnit-&quot;&gt;&lt;code&gt;awaitTermination&lt;/code&gt;&lt;/a&gt; method can be used to block until the group has terminated.</source>
          <target state="translated">&lt;a href=&quot;asynchronouschannelgroup#shutdown--&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt; 방법은 초기화하는 데 사용되는 &lt;em&gt;정상 종료&lt;/em&gt; 그룹을. 순차적 종료는 그룹을 종료로 표시합니다. 그룹에 바인딩하는 채널을 구성하려고 시도하면 &lt;a href=&quot;shutdownchannelgroupexception&quot;&gt; &lt;code&gt;ShutdownChannelGroupException&lt;/code&gt; 이 발생&lt;/a&gt; 합니다. 그룹의 종료 여부는 &lt;a href=&quot;asynchronouschannelgroup#isShutdown--&quot;&gt; &lt;code&gt;isShutdown&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 테스트 할 수 있습니다 . 종료되면, 그룹의 &lt;em&gt;종료는&lt;/em&gt; 그룹에 바인딩 된 모든 비동기 채널이 폐쇄 될 때, 모든 적극적으로 실행 완료 핸들러는 실행을 완료하고, 그룹에 의해 사용되는 리소스는 해제됩니다. 완료 핸들러를 실행중인 스레드를 중지하거나 중단하려고 시도하지 않습니다. &lt;a href=&quot;asynchronouschannelgroup#isTerminated--&quot;&gt; &lt;code&gt;isTerminated&lt;/code&gt; 에&lt;/a&gt; 있어서, 상기 그룹이 종료되었는지 검사하기 위해 사용되며&lt;a href=&quot;asynchronouschannelgroup#awaitTermination-long-java.util.concurrent.TimeUnit-&quot;&gt; &lt;code&gt;awaitTermination&lt;/code&gt; &lt;/a&gt; 메소드는 그룹이 종료 될 때까지 차단하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b514369062ab3b9e80aad31b822e6bf912e55f38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;asynchronouschannelgroup#shutdownNow--&quot;&gt;&lt;code&gt;shutdownNow&lt;/code&gt;&lt;/a&gt; method can be used to initiate a &lt;em&gt;forceful shutdown&lt;/em&gt; of the group. In addition to the actions performed by an orderly shutdown, the &lt;code&gt;shutdownNow&lt;/code&gt; method closes all open channels in the group as if by invoking the &lt;a href=&quot;asynchronouschannel#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;asynchronouschannelgroup#shutdownNow--&quot;&gt; &lt;code&gt;shutdownNow&lt;/code&gt; 의의&lt;/a&gt; 방법은 시작하는 데 사용할 수있는 &lt;em&gt;강력한 종료&lt;/em&gt; 그룹을. 순차적 종료에 의해 수행 된 조치 외에도 &lt;code&gt;shutdownNow&lt;/code&gt; 메소드는 &lt;a href=&quot;asynchronouschannel#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것처럼 그룹의 모든 열린 채널을 닫습니다 .</target>
        </trans-unit>
        <trans-unit id="b0ba63e1a3f588adc27a9ff386437373fd12a3c2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;asynchronoussocketchannel#read-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;asynchronoussocketchannel#write-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; methods defined by this class allow a timeout to be specified when initiating a read or write operation. If the timeout elapses before an operation completes then the operation completes with the exception &lt;a href=&quot;interruptedbytimeoutexception&quot;&gt;&lt;code&gt;InterruptedByTimeoutException&lt;/code&gt;&lt;/a&gt;. A timeout may leave the channel, or the underlying connection, in an inconsistent state. Where the implementation cannot guarantee that bytes have not been read from the channel then it puts the channel into an implementation specific &lt;em&gt;error state&lt;/em&gt;. A subsequent attempt to initiate a &lt;code&gt;read&lt;/code&gt; operation causes an unspecified runtime exception to be thrown. Similarly if a &lt;code&gt;write&lt;/code&gt; operation times out and the implementation cannot guarantee bytes have not been written to the channel then further attempts to &lt;code&gt;write&lt;/code&gt; to the channel cause an unspecified runtime exception to be thrown. When a timeout elapses then the state of the &lt;a href=&quot;../bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, or the sequence of buffers, for the I/O operation is not defined. Buffers should be discarded or at least care must be taken to ensure that the buffers are not accessed while the channel remains open. All methods that accept timeout parameters treat values less than or equal to zero to mean that the I/O operation does not timeout.</source>
          <target state="translated">&lt;a href=&quot;asynchronoussocketchannel#read-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;asynchronoussocketchannel#write-java.nio.ByteBuffer-long-java.util.concurrent.TimeUnit-A-java.nio.channels.CompletionHandler-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 이 클래스에 의해 정의 된 메소드는 읽기 나 쓰기 작업을 시작할 때 타임 아웃을 지정할 수 있습니다. 조작이 완료되기 전에 시간 종료가 경과하면 &lt;a href=&quot;interruptedbytimeoutexception&quot;&gt; &lt;code&gt;InterruptedByTimeoutException&lt;/code&gt; &lt;/a&gt; 예외로 조작이 완료됩니다 . 시간 초과로 인해 채널 또는 기본 연결이 일관성이없는 상태로 남아있을 수 있습니다. 구현시 채널에서 바이트를 읽지 않았다고 보장 할 수없는 경우에는 채널을 구현 관련 &lt;em&gt;오류 상태로&lt;/em&gt; 만듭니다. 이후에 &lt;code&gt;read&lt;/code&gt; 작업 을 시작 하면 지정되지 않은 런타임 예외가 발생합니다. 마찬가지로 &lt;code&gt;write&lt;/code&gt; 작업 시간이 초과되고 구현시 바이트가 채널에 기록되지 않았다고 보장 할 수없는 경우 채널에 &lt;code&gt;write&lt;/code&gt; 시도 하면 지정되지 않은 런타임 예외가 발생합니다. 시간 초과가 경과 하면 I / O 작업 에 대한 &lt;a href=&quot;../bytebuffer&quot;&gt; &lt;code&gt;ByteBuffer&lt;/code&gt; &lt;/a&gt; 상태 또는 버퍼 시퀀스가 ​​정의되지 않습니다. 채널을 열어 둔 상태에서 버퍼에 액세스하지 않도록 버퍼를 폐기하거나 최소한주의를 기울여야합니다. 시간 종료 매개 변수를 승인하는 모든 메소드는 I / O 조작이 시간 종료되지 않음을 의미하기 위해 0보다 작거나 같은 값을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="ff23faa6b9710e7149b05774884ffc2d0c84dc55" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;atomicintegerarray&quot;&gt;&lt;code&gt;AtomicIntegerArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;atomiclongarray&quot;&gt;&lt;code&gt;AtomicLongArray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;atomicreferencearray&quot;&gt;&lt;code&gt;AtomicReferenceArray&lt;/code&gt;&lt;/a&gt; classes further extend atomic operation support to arrays of these types. These classes are also notable in providing &lt;code&gt;volatile&lt;/code&gt; access semantics for their array elements, which is not supported for ordinary arrays.</source>
          <target state="translated">&lt;a href=&quot;atomicintegerarray&quot;&gt; &lt;code&gt;AtomicIntegerArray&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;atomiclongarray&quot;&gt; &lt;code&gt;AtomicLongArray&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;atomicreferencearray&quot;&gt; &lt;code&gt;AtomicReferenceArray&lt;/code&gt; &lt;/a&gt; 클래스는 이러한 형태의 배열 원자 동작 지원을 연장한다. 이 클래스는 또한 일반적인 배열에서는 지원되지 않는 배열 요소에 &lt;code&gt;volatile&lt;/code&gt; 액세스 의미론을 제공하는 데 주목할 만합니다 .</target>
        </trans-unit>
        <trans-unit id="154013ac578d40011c0e881853d2d1cf4c7084e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;atomicmarkablereference&quot;&gt;&lt;code&gt;AtomicMarkableReference&lt;/code&gt;&lt;/a&gt; class associates a single boolean with a reference. For example, this bit might be used inside a data structure to mean that the object being referenced has logically been deleted. The &lt;a href=&quot;atomicstampedreference&quot;&gt;&lt;code&gt;AtomicStampedReference&lt;/code&gt;&lt;/a&gt; class associates an integer value with a reference. This may be used for example, to represent version numbers corresponding to series of updates.</source>
          <target state="translated">&lt;a href=&quot;atomicmarkablereference&quot;&gt; &lt;code&gt;AtomicMarkableReference&lt;/code&gt; 의&lt;/a&gt; 클래스는 단일의 불리언 값을 참조와 관련. 예를 들어,이 비트는 데이터 구조 내에서 사용되어 참조되는 객체가 논리적으로 삭제되었음을 의미 할 수 있습니다. &lt;a href=&quot;atomicstampedreference&quot;&gt; &lt;code&gt;AtomicStampedReference&lt;/code&gt; 의&lt;/a&gt; 클래스는 참조를 정수 값을 연관시킨다. 예를 들어 일련의 업데이트에 해당하는 버전 번호를 나타내는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e0bb33867e93c786974aecb9c28853d1fb48aa1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;attribute/basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; is required to be supported and therefore the set contains at least one element, &quot;basic&quot;.</source>
          <target state="translated">&lt;a href=&quot;attribute/basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; 가&lt;/a&gt; 지원 될 필요가 있으므로 집합 &quot;기본&quot;은 적어도 하나 개의 원소를 포함한다.</target>
        </trans-unit>
        <trans-unit id="42fec1b7f85b596fee4ca045a99c27b6e05ae27f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;attribute/package-summary&quot;&gt;&lt;code&gt;javax.print.attribute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;attribute/standard/package-summary&quot;&gt;&lt;code&gt;javax.print.attribute.standard&lt;/code&gt;&lt;/a&gt; packages define print attributes, which describe the capabilities of a print service, specify the requirements of a print job, and track the progress of a print job.</source>
          <target state="translated">&lt;a href=&quot;attribute/package-summary&quot;&gt; &lt;code&gt;javax.print.attribute&lt;/code&gt; 의&lt;/a&gt; 및 &lt;a href=&quot;attribute/standard/package-summary&quot;&gt; &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 의&lt;/a&gt; 패키지는 인쇄 서비스의 기능을 설명하는 인쇄 속성, 인쇄 작업의 요구 사항을 지정하고 인쇄 작업의 진행 상황을 추적 정의합니다.</target>
        </trans-unit>
        <trans-unit id="5ac6194267d0e25c2097930b8f5fbaf32e490bf5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; class defines methods to read and update a &lt;em&gt;basic&lt;/em&gt; set of file attributes that are common to many file systems.</source>
          <target state="translated">&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; 의&lt;/a&gt; 클래스를 정의 방법은 읽고 업데이트 &lt;em&gt;기본&lt;/em&gt; 많은 파일 시스템에 공통되는 파일 특성의 집합입니다.</target>
        </trans-unit>
        <trans-unit id="9008207e38a099728a1e599c9fd10ddfa22dae76" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;bigdecimal#toEngineeringString--&quot;&gt;&lt;code&gt;toEngineeringString()&lt;/code&gt;&lt;/a&gt; method may be used for presenting numbers with exponents in engineering notation, and the &lt;a href=&quot;bigdecimal#setScale-int-java.math.RoundingMode-&quot;&gt;&lt;code&gt;setScale&lt;/code&gt;&lt;/a&gt; method may be used for rounding a &lt;code&gt;BigDecimal&lt;/code&gt; so it has a known number of digits after the decimal point.</source>
          <target state="translated">&lt;a href=&quot;bigdecimal#toEngineeringString--&quot;&gt; &lt;code&gt;toEngineeringString()&lt;/code&gt; &lt;/a&gt; 메소드 공학 표기법 지수와 숫자를 표시에 이용 될 수 있고, &lt;a href=&quot;bigdecimal#setScale-int-java.math.RoundingMode-&quot;&gt; &lt;code&gt;setScale&lt;/code&gt; &lt;/a&gt; 방법은 라운딩을 위해 사용될 수있다 &lt;code&gt;BigDecimal&lt;/code&gt; 는 소수점 이후 숫자 알려진 번호를 갖도록.</target>
        </trans-unit>
        <trans-unit id="e2929b7aad495e34766a177c1e114f9cc3750748" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;blockingdeque&quot;&gt;&lt;code&gt;BlockingDeque&lt;/code&gt;&lt;/a&gt; interface extends &lt;code&gt;BlockingQueue&lt;/code&gt; to support both FIFO and LIFO (stack-based) operations. Class &lt;a href=&quot;linkedblockingdeque&quot;&gt;&lt;code&gt;LinkedBlockingDeque&lt;/code&gt;&lt;/a&gt; provides an implementation.</source>
          <target state="translated">&lt;a href=&quot;blockingdeque&quot;&gt; &lt;code&gt;BlockingDeque&lt;/code&gt; 를&lt;/a&gt; 인터페이스는 확장 &lt;code&gt;BlockingQueue&lt;/code&gt; 모두 FIFO 및 LIFO (스택 기반) 동작을 지원한다. &lt;a href=&quot;linkedblockingdeque&quot;&gt; &lt;code&gt;LinkedBlockingDeque&lt;/code&gt; &lt;/a&gt; 클래스 는 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b2fd22bc1464c414a0571863354563eb9bb6d8fd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;calendar#HOUR_OF_DAY&quot;&gt;&lt;code&gt;HOUR_OF_DAY&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;calendar#HOUR&quot;&gt;&lt;code&gt;HOUR&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#AM_PM&quot;&gt;&lt;code&gt;AM_PM&lt;/code&gt;&lt;/a&gt; fields are handled independently and the &lt;a href=&quot;#time_resolution&quot;&gt;the resolution rule for the time of day&lt;/a&gt; is applied. Clearing one of the fields doesn't reset the hour of day value of this &lt;code&gt;Calendar&lt;/code&gt;. Use &lt;a href=&quot;calendar#set-int-int-&quot;&gt;&lt;code&gt;set(Calendar.HOUR_OF_DAY, 0)&lt;/code&gt;&lt;/a&gt; to reset the hour value.</source>
          <target state="translated">&lt;a href=&quot;calendar#HOUR_OF_DAY&quot;&gt; &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;calendar#HOUR&quot;&gt; &lt;code&gt;HOUR&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;calendar#AM_PM&quot;&gt; &lt;code&gt;AM_PM&lt;/code&gt; &lt;/a&gt; 필드는 독립적으로 처리하고, &lt;a href=&quot;#time_resolution&quot;&gt;하루 중 시간의 해결 규칙이&lt;/a&gt; 적용됩니다. 필드 중 하나를 지우면이 &lt;code&gt;Calendar&lt;/code&gt; 의 시간 값이 재설정되지 않습니다 . 시간 값을 재설정 하려면 &lt;a href=&quot;calendar#set-int-int-&quot;&gt; &lt;code&gt;set(Calendar.HOUR_OF_DAY, 0)&lt;/code&gt; &lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f04591de46efc6d10158813651253c9ef9e12e5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;certpathbuilder#getRevocationChecker--&quot;&gt;&lt;code&gt;getRevocationChecker()&lt;/code&gt;&lt;/a&gt; method allows an application to specify additional algorithm-specific parameters and options used by the &lt;code&gt;CertPathBuilder&lt;/code&gt; when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm:</source>
          <target state="translated">&lt;a href=&quot;certpathbuilder#getRevocationChecker--&quot;&gt; &lt;code&gt;getRevocationChecker()&lt;/code&gt; &lt;/a&gt; 메소드는 애플리케이션에 의해 사용되는 추가적인 알고리즘 특정 파라미터 및 선택 지정할 수 &lt;code&gt;CertPathBuilder&lt;/code&gt; 에 인증서의 폐기 상태를 확인할 때한다. 다음은 PKIX 알고리즘과 함께 사용되는 방법을 보여주는 예입니다.</target>
        </trans-unit>
        <trans-unit id="c2fe006c42d37a0e6b495c7077cf3ce1bbd6e97e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt;&lt;code&gt;getRevocationChecker()&lt;/code&gt;&lt;/a&gt; method allows an application to specify additional algorithm-specific parameters and options used by the &lt;code&gt;CertPathValidator&lt;/code&gt; when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm:</source>
          <target state="translated">&lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt; &lt;code&gt;getRevocationChecker()&lt;/code&gt; &lt;/a&gt; 메소드는 애플리케이션에 의해 사용되는 추가적인 알고리즘 특정 파라미터 및 선택 지정할 수 &lt;code&gt;CertPathValidator&lt;/code&gt; 는 인증서의 폐기 상태를 확인할 때한다. 다음은 PKIX 알고리즘과 함께 사용되는 방법을 보여주는 예입니다.</target>
        </trans-unit>
        <trans-unit id="353391e89ff7caccf4fa0ecf1b6ada580292d90f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; interface is extended by several other interfaces.</source>
          <target state="translated">&lt;a href=&quot;channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt; 인터페이스는 여러 다른 인터페이스에 의해 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="13bd1e29b4330451ff38da9cb77e5dbd6672f0ec" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;channels&quot;&gt;&lt;code&gt;Channels&lt;/code&gt;&lt;/a&gt; utility class defines static methods that support the interoperation of the stream classes of the &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; package with the channel classes of this package. An appropriate channel can be constructed from an &lt;a href=&quot;../../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../../io/outputstream&quot;&gt;&lt;code&gt;OutputStream&lt;/code&gt;&lt;/a&gt;, and conversely an &lt;a href=&quot;../../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../../io/outputstream&quot;&gt;&lt;code&gt;OutputStream&lt;/code&gt;&lt;/a&gt; can be constructed from a channel. A &lt;a href=&quot;../../io/reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; can be constructed that uses a given charset to decode bytes from a given readable byte channel, and conversely a &lt;a href=&quot;../../io/writer&quot;&gt;&lt;code&gt;Writer&lt;/code&gt;&lt;/a&gt; can be constructed that uses a given charset to encode characters into bytes and write them to a given writable byte channel.</source>
          <target state="translated">&lt;a href=&quot;channels&quot;&gt; &lt;code&gt;Channels&lt;/code&gt; &lt;/a&gt; 유틸리티 클래스는 스트림 클래스의 상호 지원 정적 메소드 정의 &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의 이 패키지의 채널 클래스와 패키지를. 적절한 채널은 &lt;a href=&quot;../../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../io/outputstream&quot;&gt; &lt;code&gt;OutputStream&lt;/code&gt; &lt;/a&gt; 으로부터 구성 될 수 있고 , 반대로 &lt;a href=&quot;../../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../io/outputstream&quot;&gt; &lt;code&gt;OutputStream&lt;/code&gt; &lt;/a&gt; 은 채널로부터 구성 될 수 있습니다. 주어진 문자셋을 사용하여 주어진 읽을 수있는 바이트 채널에서 바이트를 디코딩 하는 &lt;a href=&quot;../../io/reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt; 를 구성 할 수 있으며, 반대로 주어진 문자셋을 사용하여 문자를 바이트로 인코딩하고 지정된 쓰기 가능한 바이트 채널에 기록 하는 &lt;a href=&quot;../../io/writer&quot;&gt; &lt;code&gt;Writer&lt;/code&gt; &lt;/a&gt; 를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f057642b4bb486cc33d79cbc367d51cb24e2bda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt; class defines methods for creating coders for a given charset and for retrieving the various names associated with a charset. It also defines static methods for testing whether a particular charset is supported, for locating charset instances by name, and for constructing a map that contains every charset for which support is available in the current Java virtual machine.</source>
          <target state="translated">&lt;a href=&quot;charset&quot;&gt; &lt;code&gt;Charset&lt;/code&gt; &lt;/a&gt; 클래스는 지정된 캐릭터 세트에 대한 코더의 작성 및 캐릭터 세트에 관련한 다양한 이름을 검색하는 방법을 정의합니다. 또한 특정 문자 세트가 지원되는지 테스트하고 이름으로 문자 세트 인스턴스를 찾고 현재 Java 가상 머신에서 지원되는 모든 문자 세트를 포함하는 맵을 구성하는 정적 메소드를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="a67cff32a8cc7c58f69e3c11acfe781fdb3c37d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;concurrentlinkedqueue&quot;&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;&lt;/a&gt; class supplies an efficient scalable thread-safe non-blocking FIFO queue. The &lt;a href=&quot;concurrentlinkeddeque&quot;&gt;&lt;code&gt;ConcurrentLinkedDeque&lt;/code&gt;&lt;/a&gt; class is similar, but additionally supports the &lt;a href=&quot;../deque&quot;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;concurrentlinkedqueue&quot;&gt; &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt; 를&lt;/a&gt; 클래스 공급 효율적인 확장 성이 높고, thread 세이프 인 비 블로킹 FIFO 큐. &lt;a href=&quot;concurrentlinkeddeque&quot;&gt; &lt;code&gt;ConcurrentLinkedDeque&lt;/code&gt; &lt;/a&gt; 클래스는 비슷하지만, 추가로 지원 &lt;a href=&quot;../deque&quot;&gt; &lt;code&gt;Deque&lt;/code&gt; 와&lt;/a&gt; 인터페이스를.</target>
        </trans-unit>
        <trans-unit id="8f05e709096b93b1da433f74acd77bc05bb25621" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt; interface describes condition variables that may be associated with Locks. These are similar in usage to the implicit monitors accessed using &lt;code&gt;Object.wait&lt;/code&gt;, but offer extended capabilities. In particular, multiple &lt;code&gt;Condition&lt;/code&gt; objects may be associated with a single &lt;code&gt;Lock&lt;/code&gt;. To avoid compatibility issues, the names of &lt;code&gt;Condition&lt;/code&gt; methods are different from the corresponding &lt;code&gt;Object&lt;/code&gt; versions.</source>
          <target state="translated">&lt;a href=&quot;condition&quot;&gt; &lt;code&gt;Condition&lt;/code&gt; &lt;/a&gt; 인터페이스와 연관된 잠금 상태 변수를 기술. &lt;code&gt;Object.wait&lt;/code&gt; 를 사용하여 액세스 한 암시 적 모니터와 사용법이 비슷 하지만 확장 된 기능을 제공합니다. 특히, 여러 &lt;code&gt;Condition&lt;/code&gt; 객체는 단일 &lt;code&gt;Lock&lt;/code&gt; 과 연관 될 수 있습니다 . 호환성 문제를 피하기 위해 &lt;code&gt;Condition&lt;/code&gt; 메서드 의 이름은 해당 &lt;code&gt;Object&lt;/code&gt; 버전 과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="9e8041c88b3dcafc9b4f4c5eb63f4ac4c547288c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE&quot;&gt;&lt;code&gt;ISO_LOCAL_DATE&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE&quot;&gt; &lt;code&gt;ISO_LOCAL_DATE&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e9dd68445d5385bb05545d5acae99f43bf46af4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE_TIME&quot;&gt;&lt;code&gt;ISO_LOCAL_DATE_TIME&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_LOCAL_DATE_TIME&quot;&gt; &lt;code&gt;ISO_LOCAL_DATE_TIME&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fd9235cbf846fb05154c7fff0a0c527bea890016" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_LOCAL_TIME&quot;&gt;&lt;code&gt;ISO_LOCAL_TIME&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_LOCAL_TIME&quot;&gt; &lt;code&gt;ISO_LOCAL_TIME&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6aeff022cca7462b1d24d181862f8642f26d64d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt;&lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt; &lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75e1a69d924196bb7f31b2df6ac058a6b61c95bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt;&lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt;&lt;/a&gt; where the instant is converted from &lt;a href=&quot;../temporal/chronofield#INSTANT_SECONDS&quot;&gt;&lt;code&gt;ChronoField.INSTANT_SECONDS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../temporal/chronofield#NANO_OF_SECOND&quot;&gt;&lt;code&gt;ChronoField.NANO_OF_SECOND&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;UTC&lt;/code&gt; offset. Parsing is case insensitive.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#ISO_OFFSET_DATE_TIME&quot;&gt; &lt;code&gt;ISO_OFFSET_DATE_TIME&lt;/code&gt; &lt;/a&gt; 순간이 변환되어 &lt;a href=&quot;../temporal/chronofield#INSTANT_SECONDS&quot;&gt; &lt;code&gt;ChronoField.INSTANT_SECONDS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../temporal/chronofield#NANO_OF_SECOND&quot;&gt; &lt;code&gt;ChronoField.NANO_OF_SECOND&lt;/code&gt; &lt;/a&gt; 은 Using &lt;code&gt;UTC&lt;/code&gt; 오프셋. 파싱은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7bbd020b4b15b4b357c33b60139663bc5ab3a2b4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withChronology-java.time.chrono.Chronology-&quot;&gt;&lt;code&gt;withChronology&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the chronology. If overridden, the date-time value is converted to the chronology before formatting. During parsing the date-time value is converted to the chronology before it is returned.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withChronology-java.time.chrono.Chronology-&quot;&gt; &lt;code&gt;withChronology&lt;/code&gt; 의&lt;/a&gt; 방법은 새로운 포매터 우선 그 연대기를 반환합니다. 재정의하면 날짜-시간 값이 형식화되기 전에 연대기로 변환됩니다. 구문 분석하는 동안 날짜-시간 값은 반환되기 전에 연대기로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="c2be0f0e5c7bfb256821fc337fa24120b0dbdc22" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withDecimalStyle-java.time.format.DecimalStyle-&quot;&gt;&lt;code&gt;withDecimalStyle&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the &lt;a href=&quot;decimalstyle&quot;&gt;&lt;code&gt;DecimalStyle&lt;/code&gt;&lt;/a&gt;. The DecimalStyle symbols are used for formatting and parsing.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withDecimalStyle-java.time.format.DecimalStyle-&quot;&gt; &lt;code&gt;withDecimalStyle&lt;/code&gt; 의&lt;/a&gt; 방법은 새로운 포매터 우선 그 반환 &lt;a href=&quot;decimalstyle&quot;&gt; &lt;code&gt;DecimalStyle&lt;/code&gt; 을&lt;/a&gt; . DecimalStyle 기호는 형식화 및 구문 분석에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="65e1e451917eff1d1ca40b8cd181f08037d85fa5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt;&lt;code&gt;withLocale&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the locale. The locale affects some aspects of formatting and parsing. For example, the &lt;a href=&quot;datetimeformatter#ofLocalizedDate-java.time.format.FormatStyle-&quot;&gt;&lt;code&gt;ofLocalizedDate&lt;/code&gt;&lt;/a&gt; provides a formatter that uses the locale specific date format.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt; &lt;code&gt;withLocale&lt;/code&gt; 의&lt;/a&gt; 방법은 새로운 포매터 무시하는 로케일을 돌려줍니다. 로케일은 형식화 및 구문 분석의 일부 측면에 영향을줍니다. 예를 들어 &lt;a href=&quot;datetimeformatter#ofLocalizedDate-java.time.format.FormatStyle-&quot;&gt; &lt;code&gt;ofLocalizedDate&lt;/code&gt; &lt;/a&gt; 는 로캘 별 날짜 형식을 사용하는 포맷터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ac11e4705d1cea60755dd413e0d7e05004a9574f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withResolverFields-java.time.temporal.TemporalField...-&quot;&gt;&lt;code&gt;withResolverFields(TemporalField...)&lt;/code&gt;&lt;/a&gt; parameter allows the set of fields that will be resolved to be filtered before resolving starts. For example, if the formatter has parsed a year, month, day-of-month and day-of-year, then there are two approaches to resolve a date: (year + month + day-of-month) and (year + day-of-year). The resolver fields allows one of the two approaches to be selected. If no resolver fields are set then both approaches must result in the same date.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withResolverFields-java.time.temporal.TemporalField...-&quot;&gt; &lt;code&gt;withResolverFields(TemporalField...)&lt;/code&gt; &lt;/a&gt; 매개 변수는 시작을 해결하기 전에 필터링 할 해결 될 것입니다 필드의 설정을 할 수 있습니다. 예를 들어, 포맷터가 연도, 월, 일 및 월을 구문 분석 한 경우 날짜를 해결하는 두 가지 방법이 있습니다 : (년 + 월 + 일) 및 (년 + 일). 리졸버 필드를 사용하면 두 가지 접근 방식 중 하나를 선택할 수 있습니다. 리졸버 필드가 설정되지 않은 경우 두 접근법 모두 동일한 날짜를 가져야합니다.</target>
        </trans-unit>
        <trans-unit id="c56041ee24c2e62e6514b35eb7cc04f16f5b0ac1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;datetimeformatter#withZone-java.time.ZoneId-&quot;&gt;&lt;code&gt;withZone&lt;/code&gt;&lt;/a&gt; method returns a new formatter that overrides the zone. If overridden, the date-time value is converted to a ZonedDateTime with the requested ZoneId before formatting. During parsing the ZoneId is applied before the value is returned.</source>
          <target state="translated">&lt;a href=&quot;datetimeformatter#withZone-java.time.ZoneId-&quot;&gt; &lt;code&gt;withZone&lt;/code&gt; 의&lt;/a&gt; 방법은 영역을 재정의하는 새로운 포매터를 반환합니다. 재정의 된 경우 날짜-시간 값은 포맷하기 전에 요청 된 ZoneId를 사용하여 ZonedDateTime으로 변환됩니다. 파싱하는 동안 값이 반환되기 전에 ZoneId가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="cd859580f99613136d80c7938719b23f4da700bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;descriptor&quot;&gt;&lt;code&gt;Descriptor&lt;/code&gt;&lt;/a&gt; for all of the &lt;code&gt;MBeanAttributeInfo&lt;/code&gt;, &lt;code&gt;MBeanParameterInfo&lt;/code&gt;, and &lt;code&gt;MBeanOperationInfo&lt;/code&gt; objects contained in the &lt;code&gt;MBeanInfo&lt;/code&gt; will have a field &lt;code&gt;openType&lt;/code&gt; whose value is the &lt;a href=&quot;openmbean/opentype&quot;&gt;&lt;code&gt;OpenType&lt;/code&gt;&lt;/a&gt; specified by the mapping rules above. So even when &lt;code&gt;getType()&lt;/code&gt; is &quot;&lt;code&gt;int&lt;/code&gt;&quot;, &lt;code&gt;getDescriptor().getField(&quot;openType&quot;)&lt;/code&gt; will be &lt;a href=&quot;openmbean/simpletype#INTEGER&quot;&gt;&lt;code&gt;SimpleType.INTEGER&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;descriptor&quot;&gt; &lt;code&gt;Descriptor&lt;/code&gt; &lt;/a&gt; 의 모든 &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; , &lt;code&gt;MBeanParameterInfo&lt;/code&gt; 의 및 &lt;code&gt;MBeanOperationInfo&lt;/code&gt; 에 포함 된 객체 &lt;code&gt;MBeanInfo&lt;/code&gt; 필드해야합니다 &lt;code&gt;openType&lt;/code&gt; 에 그 값입니다 &lt;a href=&quot;openmbean/opentype&quot;&gt; &lt;code&gt;OpenType&lt;/code&gt; &lt;/a&gt; 위의 매핑 규칙에 의해 지정합니다. 따라서 &lt;code&gt;getType()&lt;/code&gt; 이 &quot; &lt;code&gt;int&lt;/code&gt; &quot;인 경우에도 &lt;code&gt;getDescriptor().getField(&quot;openType&quot;)&lt;/code&gt; 은 &lt;a href=&quot;openmbean/simpletype#INTEGER&quot;&gt; &lt;code&gt;SimpleType.INTEGER&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="83d652f00d8a04827d939d634a6f87310e7e3196" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;docflavor&quot;&gt;&lt;code&gt;DocFlavor&lt;/code&gt;&lt;/a&gt; class represents the print data format, such as JPEG or PostScript. A &lt;code&gt;DocFlavor&lt;/code&gt; object consists of a MIME type, which describes the format, and a document representation class name that indicates how the document is delivered to the printer or output stream. An application uses the &lt;code&gt;DocFlavor&lt;/code&gt; and an attribute set to find printers that can print the document type specified by the &lt;code&gt;DocFlavor&lt;/code&gt; and have the capabilities specified by the attribute set.</source>
          <target state="translated">&lt;a href=&quot;docflavor&quot;&gt; &lt;code&gt;DocFlavor&lt;/code&gt; &lt;/a&gt; 클래스는 JPEG 또는 PostScript 등의 인쇄 데이터 형식을 나타냅니다. &lt;code&gt;DocFlavor&lt;/code&gt; 객체 형식을 설명하는 MIME 유형 및 문서 프린터 또는 출력 스트림으로 전달되는 방법을 나타내는 문서 표현 클래스 명 구성된다. 응용 프로그램은 사용 &lt;code&gt;DocFlavor&lt;/code&gt; 에 의해 지정된 문서 유형 인쇄 할 수있는 프린터를 찾을 수 및 속성 세트를 &lt;code&gt;DocFlavor&lt;/code&gt; 의를 하고, 속성 세트로 지정된 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a2a33b021a508069e12369db4ed8235c23dd820" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;dosfileattributeview&quot;&gt;&lt;code&gt;DosFileAttributeView&lt;/code&gt;&lt;/a&gt; class extends &lt;code&gt;BasicFileAttributeView&lt;/code&gt; by defining methods to access the legacy &quot;DOS&quot; file attributes supported on file systems such as File Allocation Tabl (FAT), commonly used in consumer devices.</source>
          <target state="translated">&lt;a href=&quot;dosfileattributeview&quot;&gt; &lt;code&gt;DosFileAttributeView&lt;/code&gt; 의&lt;/a&gt; 클래스는 확장 &lt;code&gt;BasicFileAttributeView&lt;/code&gt; 을 &quot;DOS&quot;파일은 일반적으로 소비자 기기에 사용되는 등의 파일 할당 TABL (FAT)와 같은 파일 시스템에 지원되는 속성 기존에 액세스하는 방법을 정의하여.</target>
        </trans-unit>
        <trans-unit id="7ab5e9ce6e03076464956d6cf8e9e21635c83e58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class contains utility methods to convert from other common forms to &lt;code&gt;Callable&lt;/code&gt; classes.</source>
          <target state="translated">&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt; 클래스는 다른 일반적인 형태로 변환하는 유틸리티 메소드가 포함되어 &lt;code&gt;Callable&lt;/code&gt; 클래스를.</target>
        </trans-unit>
        <trans-unit id="8883df3bd964eac1086fd88dfe3a79b6d06f9e71" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides convenient factory methods for the ScheduledExecutorService implementations provided in this package.</source>
          <target state="translated">&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt; 클래스는이 패키지로 제공되는 ScheduledExecutorService 구현을위한 편리한 팩토리 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e042e1e41822ebb3dc29ae27670b8475a6541a52" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides factory methods for the executor services provided in this package.</source>
          <target state="translated">&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt; 클래스는,이 패키지로 제공되는 실행 프로그램 서비스에 대한 팩토리 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="89123dab0161f270435efa4f546d779073bf8797" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;executors#defaultThreadFactory--&quot;&gt;&lt;code&gt;Executors.defaultThreadFactory()&lt;/code&gt;&lt;/a&gt; method provides a more useful simple implementation, that sets the created thread context to known values before returning it.</source>
          <target state="translated">&lt;a href=&quot;executors#defaultThreadFactory--&quot;&gt; &lt;code&gt;Executors.defaultThreadFactory()&lt;/code&gt; &lt;/a&gt; 방법은 더 유용한 간단한 구현, 그 집합을 반환하기 전에 공지 된 값으로 만들어진 스레드 콘텍스트를 제공한다.</target>
        </trans-unit>
        <trans-unit id="452f568b1f5309f7b11b0f0b96affb2b04cc97db" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fileattribute&quot;&gt;&lt;code&gt;FileAttribute&lt;/code&gt;&lt;/a&gt; interface represents the value of an attribute for cases where the attribute value is required to be set atomically when creating an object in the file system.</source>
          <target state="translated">&lt;a href=&quot;fileattribute&quot;&gt; &lt;code&gt;FileAttribute&lt;/code&gt; 의&lt;/a&gt; 인터페이스는 파일 시스템에서 오브젝트를 생성 할 때 속성 값이 원자 적으로 설정해야 할 경우에 대한 속성의 값을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="44a89ca3f8f23eed63e4ec0b6a8bbaea5d50e095" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filechannel&quot;&gt;&lt;code&gt;FileChannel&lt;/code&gt;&lt;/a&gt; class supports the usual operations of reading bytes from, and writing bytes to, a channel connected to a file, as well as those of querying and modifying the current file position and truncating the file to a specific size. It defines methods for acquiring locks on the whole file or on a specific region of a file; these methods return instances of the &lt;a href=&quot;filelock&quot;&gt;&lt;code&gt;FileLock&lt;/code&gt;&lt;/a&gt; class. Finally, it defines methods for forcing updates to the file to be written to the storage device that contains it, for efficiently transferring bytes between the file and other channels, and for mapping a region of the file directly into memory.</source>
          <target state="translated">&lt;a href=&quot;filechannel&quot;&gt; &lt;code&gt;FileChannel&lt;/code&gt; &lt;/a&gt; 하는 파일에 연결된 채널뿐만 아니라 질의 및 현재의 파일 위치를 수정하고, 특정 크기의 파일을 자르는 것과을 클래스의 바이트를 판독하는 통상의 동작을 지원하고, 쓰기 바이트. 전체 파일 또는 파일의 특정 영역에서 잠금을 획득하는 방법을 정의합니다. 이러한 메소드는 &lt;a href=&quot;filelock&quot;&gt; &lt;code&gt;FileLock&lt;/code&gt; &lt;/a&gt; 클래스의 인스턴스를 리턴합니다 . 마지막으로, 파일과 다른 채널간에 바이트를 효율적으로 전송하고 파일 영역을 메모리에 직접 매핑하기 위해 파일에 대한 업데이트가 파일을 포함하는 저장 장치에 기록되도록하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="7eca07bd746a1861a27802a596cf1b4a71de4344" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt;&lt;code&gt;getOwner&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt;&lt;code&gt;setOwner&lt;/code&gt;&lt;/a&gt; methods may be used to read or update the owner of the file.</source>
          <target state="translated">&lt;a href=&quot;fileownerattributeview#getOwner--&quot;&gt; &lt;code&gt;getOwner&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;fileownerattributeview#setOwner-java.nio.file.attribute.UserPrincipal-&quot;&gt; &lt;code&gt;setOwner&lt;/code&gt; &lt;/a&gt; 방법을 읽거나 파일의 소유자를 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73d3f705da9ee89357307dce73865b84f0d0035f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filer&quot;&gt;&lt;code&gt;Filer&lt;/code&gt;&lt;/a&gt; interface discusses restrictions on how processors can operate on files.</source>
          <target state="translated">&lt;a href=&quot;filer&quot;&gt; &lt;code&gt;Filer&lt;/code&gt; &lt;/a&gt; 인터페이스는 프로세서 파일에서 작동 할 수있는 방법에 대한 제한 사항에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="b4b3f7c632fcbbe9935cc6379723468392ffc252" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filestore#supportsFileAttributeView-java.lang.String-&quot;&gt;&lt;code&gt;supportsFileAttributeView(String)&lt;/code&gt;&lt;/a&gt; method may be used to test if an underlying &lt;a href=&quot;filestore&quot;&gt;&lt;code&gt;FileStore&lt;/code&gt;&lt;/a&gt; supports the file attributes identified by a file attribute view.</source>
          <target state="translated">&lt;a href=&quot;filestore#supportsFileAttributeView-java.lang.String-&quot;&gt; &lt;code&gt;supportsFileAttributeView(String)&lt;/code&gt; &lt;/a&gt; 기본이되는 경우 방법은 시험에 사용될 수있는 &lt;a href=&quot;filestore&quot;&gt; &lt;code&gt;FileStore&lt;/code&gt; &lt;/a&gt; 파일이 파일 속성보기로 식별 속성을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f8cb4d9733bf198a655b4589202cc06dace82870" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getFileStores--&quot;&gt;&lt;code&gt;getFileStores&lt;/code&gt;&lt;/a&gt; method returns an iterator over the underlying &lt;a href=&quot;filestore&quot;&gt;&lt;code&gt;file-stores&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getFileStores--&quot;&gt; &lt;code&gt;getFileStores&lt;/code&gt; 의&lt;/a&gt; 방법은 기본에 대한 반복자를 반환 &lt;a href=&quot;filestore&quot;&gt; &lt;code&gt;file-stores&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cfd644bf38b0bb664dee5219ee6298f48860e300" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method converts a system dependent &lt;em&gt;path string&lt;/em&gt;, returning a &lt;a href=&quot;path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; object that may be used to locate and access a file.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; 의&lt;/a&gt; 방법은 시스템에 따라 변환 &lt;em&gt;경로 문자열을&lt;/em&gt; 복귀, &lt;a href=&quot;path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 파일의 위치를 액세스하기 위해 사용될 수있다 개체를.</target>
        </trans-unit>
        <trans-unit id="85bb054fbeaeb496dcbb5f7913fdc2da38a5d8df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getPathMatcher-java.lang.String-&quot;&gt;&lt;code&gt;getPathMatcher&lt;/code&gt;&lt;/a&gt; method is used to create a &lt;a href=&quot;pathmatcher&quot;&gt;&lt;code&gt;PathMatcher&lt;/code&gt;&lt;/a&gt; that performs match operations on paths.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getPathMatcher-java.lang.String-&quot;&gt; &lt;code&gt;getPathMatcher&lt;/code&gt; &lt;/a&gt; 방법은 생성하는 데 사용된다 &lt;a href=&quot;pathmatcher&quot;&gt; &lt;code&gt;PathMatcher&lt;/code&gt; 과&lt;/a&gt; 수행이 경로에 대한 연산을 일치한다.</target>
        </trans-unit>
        <trans-unit id="5a69e75d4d560b20f800838bf2f2879aa7b27302" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#getUserPrincipalLookupService--&quot;&gt;&lt;code&gt;getUserPrincipalLookupService&lt;/code&gt;&lt;/a&gt; method returns the &lt;a href=&quot;attribute/userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt; to lookup users or groups by name.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getUserPrincipalLookupService--&quot;&gt; &lt;code&gt;getUserPrincipalLookupService&lt;/code&gt; 의&lt;/a&gt; 방법은 반환 &lt;a href=&quot;attribute/userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt; 이름으로 사용자 또는 그룹을 조회 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f447288e7932d315836b220e40a38ac2e592a02" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;filesystem#newWatchService--&quot;&gt;&lt;code&gt;newWatchService&lt;/code&gt;&lt;/a&gt; method creates a &lt;a href=&quot;watchservice&quot;&gt;&lt;code&gt;WatchService&lt;/code&gt;&lt;/a&gt; that may be used to watch objects for changes and events.</source>
          <target state="translated">&lt;a href=&quot;filesystem#newWatchService--&quot;&gt; &lt;code&gt;newWatchService&lt;/code&gt; 의&lt;/a&gt; 방법은 생성 &lt;a href=&quot;watchservice&quot;&gt; &lt;code&gt;WatchService&lt;/code&gt; &lt;/a&gt; 변경 및 이벤트에 대한 개체를 시청하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0df1d883900393179ef6a938286fb977dcd966a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;formatter#format-java.util.Locale-java.lang.String-java.lang.Object...-&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; method for this object which has a locale argument does not change this value.</source>
          <target state="translated">로케일 인수가있는이 오브젝트 의 &lt;a href=&quot;formatter#format-java.util.Locale-java.lang.String-java.lang.Object...-&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt; 메소드는이 값을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e68fc7c4ce0ce129079a142bdf3e6ba5e50c5128" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;futuretask&quot;&gt;&lt;code&gt;FutureTask&lt;/code&gt;&lt;/a&gt; class is an implementation of &lt;code&gt;Future&lt;/code&gt; that implements &lt;code&gt;Runnable&lt;/code&gt;, and so may be executed by an &lt;code&gt;Executor&lt;/code&gt;. For example, the above construction with &lt;code&gt;submit&lt;/code&gt; could be replaced by:</source>
          <target state="translated">&lt;a href=&quot;futuretask&quot;&gt; &lt;code&gt;FutureTask&lt;/code&gt; 의&lt;/a&gt; 클래스의 구현입니다 &lt;code&gt;Future&lt;/code&gt; 가 구현하는 것이 &lt;code&gt;Runnable&lt;/code&gt; 를 하고, 그래서에 의해 실행될 수있다 &lt;code&gt;Executor&lt;/code&gt; . 예를 들어, 위의 &lt;code&gt;submit&lt;/code&gt; 구조는 다음과 같이 대체 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="761513f2b0bbba586605e4294850b23aff51188d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;imagereader#getSourceRegion-javax.imageio.ImageReadParam-int-int-&quot;&gt;&lt;code&gt;getSourceRegion&amp;gt;&lt;/code&gt;&lt;/a&gt; method may be used if only source clipping is desired.</source>
          <target state="translated">&lt;a href=&quot;imagereader#getSourceRegion-javax.imageio.ImageReadParam-int-int-&quot;&gt; &lt;code&gt;getSourceRegion&amp;gt;&lt;/code&gt; &lt;/a&gt; 에만 소스 클리핑이 요구된다면 방법이 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="1eedddde68bb46978d525f7790711dd02e0ebfc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inet6address#lform&quot;&gt;full uncompressed form&lt;/a&gt; of an IPv6 literal address is also valid.</source>
          <target state="translated">&lt;a href=&quot;inet6address#lform&quot;&gt;전체 비 압축 형태&lt;/a&gt; 의 IPv6 리터럴 주소는 유효합니다.</target>
        </trans-unit>
        <trans-unit id="89aa71069d9b64ba38bde1b7ed22da8a98a99b64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inetaddress&quot;&gt;&lt;code&gt;InetAddress&lt;/code&gt;&lt;/a&gt; class is the abstraction representing an IP (Internet Protocol) address. It has two subclasses:</source>
          <target state="translated">&lt;a href=&quot;inetaddress&quot;&gt; &lt;code&gt;InetAddress&lt;/code&gt; &lt;/a&gt; 클래스는 IP (인터넷 프로토콜) 주소를 나타내는 추상화이다. 두 개의 서브 클래스가 있습니다.</target>
        </trans-unit>
        <trans-unit id="63af60ec9959bd5779b0337a24c9f2bd2daa5ff3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;japaneseera#SHOWA&quot;&gt;&lt;code&gt;SHOWA&lt;/code&gt;&lt;/a&gt; era that contains 1970-01-01 (ISO calendar system) has the value 1 Later era is numbered 2 (&lt;a href=&quot;japaneseera#HEISEI&quot;&gt;&lt;code&gt;HEISEI&lt;/code&gt;&lt;/a&gt;). Earlier eras are numbered 0 (&lt;a href=&quot;japaneseera#TAISHO&quot;&gt;&lt;code&gt;TAISHO&lt;/code&gt;&lt;/a&gt;), -1 (&lt;a href=&quot;japaneseera#MEIJI&quot;&gt;&lt;code&gt;MEIJI&lt;/code&gt;&lt;/a&gt;), only Meiji and later eras are supported.</source>
          <target state="translated">1970-01-01 (ISO 달력 시스템)을 포함 하는 &lt;a href=&quot;japaneseera#SHOWA&quot;&gt; &lt;code&gt;SHOWA&lt;/code&gt; &lt;/a&gt; 시대의 값은 1입니다. 나중에 시대는 2 ( &lt;a href=&quot;japaneseera#HEISEI&quot;&gt; &lt;code&gt;HEISEI&lt;/code&gt; &lt;/a&gt; )입니다. 이전 시대 0 (번호가 &lt;a href=&quot;japaneseera#TAISHO&quot;&gt; &lt;code&gt;TAISHO&lt;/code&gt; 를&lt;/a&gt; ) -1 ( &lt;a href=&quot;japaneseera#MEIJI&quot;&gt; &lt;code&gt;MEIJI&lt;/code&gt; &lt;/a&gt; ) 만 이상 메이지 시대가 지원된다.</target>
        </trans-unit>
        <trans-unit id="5ad4c9f7c1d38ff17eed005c539f21753e0ecc72" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;japaneseera#SHOWA&quot;&gt;&lt;code&gt;SHOWA&lt;/code&gt;&lt;/a&gt; era that contains 1970-01-01 (ISO calendar system) has the value 1. Later eras are numbered from 2 (&lt;a href=&quot;japaneseera#HEISEI&quot;&gt;&lt;code&gt;HEISEI&lt;/code&gt;&lt;/a&gt;). Earlier eras are numbered 0 (&lt;a href=&quot;japaneseera#TAISHO&quot;&gt;&lt;code&gt;TAISHO&lt;/code&gt;&lt;/a&gt;), -1 (&lt;a href=&quot;japaneseera#MEIJI&quot;&gt;&lt;code&gt;MEIJI&lt;/code&gt;&lt;/a&gt;)).</source>
          <target state="translated">1970-01-01 (ISO 달력 시스템)을 포함 하는 &lt;a href=&quot;japaneseera#SHOWA&quot;&gt; &lt;code&gt;SHOWA&lt;/code&gt; &lt;/a&gt; 시대의 값은 1입니다. 이후 시대는 2부터 시작됩니다 ( &lt;a href=&quot;japaneseera#HEISEI&quot;&gt; &lt;code&gt;HEISEI&lt;/code&gt; &lt;/a&gt; ). 이전 시대는 0 ( &lt;a href=&quot;japaneseera#TAISHO&quot;&gt; &lt;code&gt;TAISHO&lt;/code&gt; &lt;/a&gt; ), -1 ( &lt;a href=&quot;japaneseera#MEIJI&quot;&gt; &lt;code&gt;MEIJI&lt;/code&gt; &lt;/a&gt; ))입니다.</target>
        </trans-unit>
        <trans-unit id="53e05d8dddbec45eaf69a1abeb3e0b1d8a3d4dde" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;linkedhashmap#removeEldestEntry-java.util.Map.Entry-&quot;&gt;&lt;code&gt;removeEldestEntry(Map.Entry)&lt;/code&gt;&lt;/a&gt; method may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map.</source>
          <target state="translated">&lt;a href=&quot;linkedhashmap#removeEldestEntry-java.util.Map.Entry-&quot;&gt; &lt;code&gt;removeEldestEntry(Map.Entry)&lt;/code&gt; &lt;/a&gt; 메소드는 맵에 새로운 매핑을 추가 할 때, 자동적으로 무효 인 매핑을 제거하기위한 정책을 부과 오버라이드 (override) 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="685e9f05827cafac5b9700afb54eb83f6c776e78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; interface supports locking disciplines that differ in semantics (reentrant, fair, etc), and that can be used in non-block-structured contexts including hand-over-hand and lock reordering algorithms. The main implementation is &lt;a href=&quot;reentrantlock&quot;&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt; 인터페이스 의미론 (재진입 공정 등)이 다른 분야 잠금 지원하고, 그 핸드 오버 및 핸드 잠금 재정렬 알고리즘을 포함하여 비 - 블록 구조의 상황에서 사용될 수있다. 주요 구현은 &lt;a href=&quot;reentrantlock&quot;&gt; &lt;code&gt;ReentrantLock&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3180b0ec0d45d09638da4a7e022ef32c09072ff6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;managementfactory&quot;&gt;&lt;code&gt;ManagementFactory&lt;/code&gt;&lt;/a&gt; class is the management factory class for the Java platform. This class provides a set of static factory methods to obtain the MXBeans for the Java platform to allow an application to access the MXBeans directly.</source>
          <target state="translated">&lt;a href=&quot;managementfactory&quot;&gt; &lt;code&gt;ManagementFactory&lt;/code&gt; &lt;/a&gt; 클래스는 Java 플랫폼의 관리 팩토리 클래스입니다. 이 클래스는 애플리케이션이 MXBean에 직접 액세스 할 수 있도록 Java 플랫폼 용 MXBean을 얻기위한 정적 팩토리 메소드 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6aee927bc4b4fd7e8464ec83c8eda0aa86fccfbd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;managementfactory#getPlatformManagementInterfaces--&quot;&gt;&lt;code&gt;getPlatformManagementInterfaces&lt;/code&gt;&lt;/a&gt; method returns all management interfaces supported in the Java virtual machine including the standard management interfaces listed in the tables below as well as the management interfaces extended by the JDK implementation.</source>
          <target state="translated">&lt;a href=&quot;managementfactory#getPlatformManagementInterfaces--&quot;&gt; &lt;code&gt;getPlatformManagementInterfaces&lt;/code&gt; 의&lt;/a&gt; 방법은 테이블 아래뿐만 아니라 JDK 구현에 의해 확장 된 관리 인터페이스에 나와있는 표준 관리 인터페이스를 비롯한 자바 가상 머신에서 지원하는 모든 관리 인터페이스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c882421782dfc7080f4d7ba69c0672ccbaee2976" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;matcher#find--&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; method scans the input sequence looking for the next subsequence that matches the pattern.</source>
          <target state="translated">&lt;a href=&quot;matcher#find--&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; 방법은 패턴과 일치하는 다음의 부분 순서를 찾고 입력 시퀀스를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="f8f9d8ffa3354e5ea114ec9c9eecd670dfa20d2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;matcher#lookingAt--&quot;&gt;&lt;code&gt;lookingAt&lt;/code&gt;&lt;/a&gt; method attempts to match the input sequence, starting at the beginning, against the pattern.</source>
          <target state="translated">&lt;a href=&quot;matcher#lookingAt--&quot;&gt; &lt;code&gt;lookingAt&lt;/code&gt; 에&lt;/a&gt; 있어서의 시도는 패턴에 대해, 처음부터 시작하여, 입력 순서와 일치한다.</target>
        </trans-unit>
        <trans-unit id="81a4840468c5585768ffd0339442ff61c0e3f495" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;matcher#matches--&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method attempts to match the entire input sequence against the pattern.</source>
          <target state="translated">&lt;a href=&quot;matcher#matches--&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt; 방법을 시도 패턴에 대한 전체 입력 순서와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="3b536101e87b34402f5a75ef5e45b85b8065447c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;memorypoolmxbean#getUsage--&quot;&gt;&lt;code&gt;getUsage()&lt;/code&gt;&lt;/a&gt; method provides an estimate of the current usage of a memory pool. For a garbage-collected memory pool, the amount of used memory includes the memory occupied by all objects in the pool including both &lt;em&gt;reachable&lt;/em&gt; and &lt;em&gt;unreachable&lt;/em&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;memorypoolmxbean#getUsage--&quot;&gt; &lt;code&gt;getUsage()&lt;/code&gt; &lt;/a&gt; 메소드는 메모리 풀의 현재의 사용량의 추정치를 제공한다. 가비지 수집 메모리 풀의 경우 사용 된 메모리 양에는 &lt;em&gt;도달 가능한&lt;/em&gt; 개체 와 &lt;em&gt;연결할 수없는&lt;/em&gt; 개체를 포함하여 풀의 모든 개체가 차지하는 메모리가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="2917cba2196f42068511cb8866976f8cefd8ba43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;memorypoolmxbean#isCollectionUsageThresholdSupported--&quot;&gt;&lt;code&gt;isCollectionUsageThresholdSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if this functionality is supported.</source>
          <target state="translated">&lt;a href=&quot;memorypoolmxbean#isCollectionUsageThresholdSupported--&quot;&gt; &lt;code&gt;isCollectionUsageThresholdSupported()&lt;/code&gt; &lt;/a&gt; 메소드는이 기능이 지원되는지를 결정하기 위해 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="00777c593762897a62ff30f882e9e994e0fd4435" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;methodhandles.lookup#lookups&quot;&gt;Lookup Factory Methods&lt;/a&gt; correspond to all major use cases for methods, constructors, and fields. These use cases may be distinguished using small integers as follows:</source>
          <target state="translated">&lt;a href=&quot;methodhandles.lookup#lookups&quot;&gt;조회 공장 방법&lt;/a&gt; 방법, 생성자, 및 필드의 모든 주요 사용 사례에 해당합니다. 이러한 사용 사례는 다음과 같이 작은 정수를 사용하여 구별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="803a5dc5363ca39a6c192f06387b9fe75f794ba3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-&quot;&gt;&lt;code&gt;join(InetAddress,NetworkInterface)&lt;/code&gt;&lt;/a&gt; method is used to join a group and receive all multicast datagrams sent to the group. A channel may join several multicast groups and may join the same group on several &lt;a href=&quot;../../net/networkinterface&quot;&gt;&lt;code&gt;interfaces&lt;/code&gt;&lt;/a&gt;. Membership is dropped by invoking the &lt;a href=&quot;membershipkey#drop--&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; method on the returned &lt;a href=&quot;membershipkey&quot;&gt;&lt;code&gt;MembershipKey&lt;/code&gt;&lt;/a&gt;. If the underlying platform supports source filtering then the &lt;a href=&quot;membershipkey#block-java.net.InetAddress-&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;membershipkey#unblock-java.net.InetAddress-&quot;&gt;&lt;code&gt;unblock&lt;/code&gt;&lt;/a&gt; methods can be used to block or unblock multicast datagrams from particular source addresses.</source>
          <target state="translated">(가) &lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-&quot;&gt; &lt;code&gt;join(InetAddress,NetworkInterface)&lt;/code&gt; &lt;/a&gt; 방법은, 그룹에 가입하고 그룹에 전송 된 모든 멀티 캐스트 데이터 그램을 수신하는 데 사용된다. 채널은 여러 멀티 캐스트 그룹에 참여할 수 있으며 여러 &lt;a href=&quot;../../net/networkinterface&quot;&gt; &lt;code&gt;interfaces&lt;/code&gt; &lt;/a&gt; 에서 동일한 그룹에 참여할 수 있습니다 . 반환 된 &lt;a href=&quot;membershipkey&quot;&gt; &lt;code&gt;MembershipKey&lt;/code&gt; &lt;/a&gt; 에 대해 &lt;a href=&quot;membershipkey#drop--&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 멤버쉽을 삭제합니다 . 기본 플랫폼이 소스 필터링을 지원하는 경우 &lt;a href=&quot;membershipkey#block-java.net.InetAddress-&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;membershipkey#unblock-java.net.InetAddress-&quot;&gt; &lt;code&gt;unblock&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 특정 소스 주소에서 멀티 캐스트 데이터 그램을 차단 또는 차단 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="586959a334aab9367192bda3b22ae8905ccfbfb5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-java.net.InetAddress-&quot;&gt;&lt;code&gt;join(InetAddress,NetworkInterface,InetAddress)&lt;/code&gt;&lt;/a&gt; method is used to begin receiving datagrams sent to a group whose source address matches a given source address. This method throws &lt;a href=&quot;../../lang/unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt; if the underlying platform does not support source filtering. Membership is &lt;em&gt;cumulative&lt;/em&gt; and this method may be invoked again with the same group and interface to allow receiving datagrams from other source addresses. The method returns a &lt;a href=&quot;membershipkey&quot;&gt;&lt;code&gt;MembershipKey&lt;/code&gt;&lt;/a&gt; that represents membership to receive datagrams from the given source address. Invoking the key's &lt;a href=&quot;membershipkey#drop--&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; method drops membership so that datagrams from the source address can no longer be received.</source>
          <target state="translated">(가) &lt;a href=&quot;multicastchannel#join-java.net.InetAddress-java.net.NetworkInterface-java.net.InetAddress-&quot;&gt; &lt;code&gt;join(InetAddress,NetworkInterface,InetAddress)&lt;/code&gt; &lt;/a&gt; 메소드가 그 소스 어드레스 특정 소스 어드레스와 일치하는 그룹으로 전송 된 데이터 그램의 수신을 개시하는 데 사용된다. 기본 플랫폼이 소스 필터링을 지원하지 &lt;a href=&quot;../../lang/unsupportedoperationexception&quot;&gt; &lt;code&gt;UnsupportedOperationException&lt;/code&gt; &lt;/a&gt; 경우이 메소드는 UnsupportedOperationException을 발생시킵니다. 멤버쉽은 &lt;em&gt;누적&lt;/em&gt; 되며 다른 소스 주소에서 데이터 그램을 수신 할 수 있도록 동일한 그룹 및 인터페이스로이 메소드를 다시 호출 할 수 있습니다. 이 메소드는 주어진 소스 주소에서 데이터 그램을 수신하기 위해 &lt;a href=&quot;membershipkey&quot;&gt; &lt;code&gt;MembershipKey&lt;/code&gt; &lt;/a&gt; 을 나타내는 MembershipKey 를 리턴합니다 . 키의 &lt;a href=&quot;membershipkey#drop--&quot;&gt; &lt;code&gt;drop&lt;/code&gt; &lt;/a&gt; 메소드를 호출하면 멤버쉽이 삭제되어 소스 주소의 데이터 그램을 더 이상 수신 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ea1666c946dbc92e3963a08d51b7fe1ff2e05b97" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;mutablecallsite#syncAll-java.lang.invoke.MutableCallSite:A-&quot;&gt;&lt;code&gt;syncAll&lt;/code&gt;&lt;/a&gt; operation provides a way to force threads to accept a new target value, even if there is no other synchronization.</source>
          <target state="translated">&lt;a href=&quot;mutablecallsite#syncAll-java.lang.invoke.MutableCallSite:A-&quot;&gt; &lt;code&gt;syncAll&lt;/code&gt; 의&lt;/a&gt; 작업은 다른 동기가없는 경우에도, 새로운 목표 값을 받아 스레드를 강제 할 수있는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="86bc696e481ab25ea679a816f2b2344f73e99298" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;networkchannel&quot;&gt;&lt;code&gt;NetworkChannel&lt;/code&gt;&lt;/a&gt; interface specifies methods to &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; the channel's socket, obtain the address to which the socket is bound, and methods to &lt;a href=&quot;networkchannel#getOption-java.net.SocketOption-&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; socket options. The &lt;a href=&quot;multicastchannel&quot;&gt;&lt;code&gt;MulticastChannel&lt;/code&gt;&lt;/a&gt; interface specifies methods to join Internet Protocol (IP) multicast groups.</source>
          <target state="translated">&lt;a href=&quot;networkchannel&quot;&gt; &lt;code&gt;NetworkChannel&lt;/code&gt; &lt;/a&gt; 인터페이스를 지정하는 방법은하기 &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt; , 채널의 소켓을 소켓의 바인드되는 주소를 구 및 방법을 &lt;a href=&quot;networkchannel#getOption-java.net.SocketOption-&quot;&gt; &lt;code&gt;get&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; 소켓 옵션. &lt;a href=&quot;multicastchannel&quot;&gt; &lt;code&gt;MulticastChannel&lt;/code&gt; 의&lt;/a&gt; 인터페이스를 지정하는 방법은 인터넷 프로토콜 (IP) 멀티 캐스트 그룹에 합류.</target>
        </trans-unit>
        <trans-unit id="97e5a8c6cebdfee9806373945502b19fe12625e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; methods that do not otherwise have a value to return are specified to return the network channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained.</source>
          <target state="translated">&lt;a href=&quot;networkchannel#bind-java.net.SocketAddress-&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;networkchannel#setOption-java.net.SocketOption-T-&quot;&gt; &lt;code&gt;setOption&lt;/code&gt; &lt;/a&gt; 반환 값을 돌려주지 않는 방법은 자신을 호출 한 네트워크 채널을 반환하도록 지정됩니다. 이를 통해 메소드 호출을 연결할 수 있습니다. 이 인터페이스의 구현은 구현 클래스에서 메소드 호출을 체인 할 수 있도록 리턴 유형을 특수화해야합니다.</target>
        </trans-unit>
        <trans-unit id="2aae4de2a8761dadc1703ebe8bd9d27e209c3303" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;networkinterface&quot;&gt;&lt;code&gt;NetworkInterface&lt;/code&gt;&lt;/a&gt; class provides APIs to browse and query all the networking interfaces (e.g. ethernet connection or PPP endpoint) of the local machine. It is through that class that you can check if any of the local interfaces is configured to support IPv6.</source>
          <target state="translated">&lt;a href=&quot;networkinterface&quot;&gt; &lt;code&gt;NetworkInterface&lt;/code&gt; &lt;/a&gt; 클래스는 검색 및 로컬 컴퓨터의 쿼리 모든 네트워크 인터페이스 (예 : 이더넷 연결 또는 PPP 엔드 포인트)에 API를 제공합니다. 해당 클래스를 통해 로컬 인터페이스가 IPv6을 지원하도록 구성되어 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d4398a2182ad9d3d156c72bc1e1b46b563498d0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;openmbeanconstructorinfo#getSignature--&quot;&gt;&lt;code&gt;getSignature()&lt;/code&gt;&lt;/a&gt; method should return at runtime an array of instances of a subclass of &lt;a href=&quot;../mbeanparameterinfo&quot;&gt;&lt;code&gt;MBeanParameterInfo&lt;/code&gt;&lt;/a&gt; which implements the &lt;a href=&quot;openmbeanparameterinfo&quot;&gt;&lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt;&lt;/a&gt; interface (typically &lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt;&lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;openmbeanconstructorinfo#getSignature--&quot;&gt; &lt;code&gt;getSignature()&lt;/code&gt; &lt;/a&gt; 메소드 실행시 서브 클래스의 인스턴스의 배열 돌려 &lt;a href=&quot;../mbeanparameterinfo&quot;&gt; &lt;code&gt;MBeanParameterInfo&lt;/code&gt; 의&lt;/a&gt; 어떤 구현 &lt;a href=&quot;openmbeanparameterinfo&quot;&gt; &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; 의&lt;/a&gt; 인터페이스 (일반적으로 &lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt; &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; 을&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ce3b1f0ce29ed84d089633cd109fcedd10fa19a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;openmbeaninfo#getAttributes--&quot;&gt;&lt;code&gt;getAttributes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;openmbeaninfo#getOperations--&quot;&gt;&lt;code&gt;getOperations()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;openmbeaninfo#getConstructors--&quot;&gt;&lt;code&gt;getConstructors()&lt;/code&gt;&lt;/a&gt; methods of the implementing class should return at runtime an array of instances of a subclass of &lt;a href=&quot;../mbeanattributeinfo&quot;&gt;&lt;code&gt;MBeanAttributeInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../mbeanoperationinfo&quot;&gt;&lt;code&gt;MBeanOperationInfo&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../mbeanconstructorinfo&quot;&gt;&lt;code&gt;MBeanConstructorInfo&lt;/code&gt;&lt;/a&gt; respectively which implement the &lt;a href=&quot;openmbeanattributeinfo&quot;&gt;&lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;openmbeanoperationinfo&quot;&gt;&lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;openmbeanconstructorinfo&quot;&gt;&lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt;&lt;/a&gt; interface respectively.</source>
          <target state="translated">구현 클래스 의 &lt;a href=&quot;openmbeaninfo#getAttributes--&quot;&gt; &lt;code&gt;getAttributes()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;openmbeaninfo#getOperations--&quot;&gt; &lt;code&gt;getOperations()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;openmbeaninfo#getConstructors--&quot;&gt; &lt;code&gt;getConstructors()&lt;/code&gt; &lt;/a&gt; 메소드는 각각 &lt;a href=&quot;openmbeanattributeinfo&quot;&gt; &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;openmbeanoperationinfo&quot;&gt; &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;openmbeanconstructorinfo&quot;&gt; &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; &lt;/a&gt; 인터페이스를 각각 구현하는 &lt;a href=&quot;../mbeanattributeinfo&quot;&gt; &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../mbeanoperationinfo&quot;&gt; &lt;code&gt;MBeanOperationInfo&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../mbeanconstructorinfo&quot;&gt; &lt;code&gt;MBeanConstructorInfo&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인스턴스 배열을 런타임에 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="fc59af9de6b925c7a001de9e0cda1335db8b9216" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;openmbeanoperationinfo#getSignature--&quot;&gt;&lt;code&gt;getSignature()&lt;/code&gt;&lt;/a&gt; method should return at runtime an array of instances of a subclass of &lt;a href=&quot;../mbeanparameterinfo&quot;&gt;&lt;code&gt;MBeanParameterInfo&lt;/code&gt;&lt;/a&gt; which implements the &lt;a href=&quot;openmbeanparameterinfo&quot;&gt;&lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt;&lt;/a&gt; interface (typically &lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt;&lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;openmbeanoperationinfo#getSignature--&quot;&gt; &lt;code&gt;getSignature()&lt;/code&gt; &lt;/a&gt; 메소드 실행시 서브 클래스의 인스턴스의 배열 돌려 &lt;a href=&quot;../mbeanparameterinfo&quot;&gt; &lt;code&gt;MBeanParameterInfo&lt;/code&gt; 의&lt;/a&gt; 어떤 구현 &lt;a href=&quot;openmbeanparameterinfo&quot;&gt; &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; 의&lt;/a&gt; 인터페이스 (일반적으로 &lt;a href=&quot;openmbeanparameterinfosupport&quot;&gt; &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; 을&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="4744c29d66c9935d41a7b7e162f4709ec4bf036a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfileattributes#permissions--&quot;&gt;&lt;code&gt;permissions&lt;/code&gt;&lt;/a&gt; attribute is a set of access permissions. This file attribute view provides access to the nine permission defined by the &lt;a href=&quot;posixfilepermission&quot;&gt;&lt;code&gt;PosixFilePermission&lt;/code&gt;&lt;/a&gt; class. These nine permission bits determine the &lt;em&gt;read&lt;/em&gt;, &lt;em&gt;write&lt;/em&gt;, and &lt;em&gt;execute&lt;/em&gt; access for the file owner, group, and others (others meaning identities other than the owner and members of the group). Some operating systems and file systems may provide additional permission bits but access to these other bits is not defined by this class in this release.</source>
          <target state="translated">&lt;a href=&quot;posixfileattributes#permissions--&quot;&gt; &lt;code&gt;permissions&lt;/code&gt; &lt;/a&gt; 속성은 액세스 권한의 집합입니다. 이 파일 속성보기는 &lt;a href=&quot;posixfilepermission&quot;&gt; &lt;code&gt;PosixFilePermission&lt;/code&gt; &lt;/a&gt; 클래스에 의해 정의 된 9 가지 권한에 대한 액세스를 제공합니다 . 이 9 개의 권한 비트 는 파일 소유자, 그룹 및 기타 (소유자 및 그룹 구성원 이외의 ID를 의미하는 기타)에 대한 &lt;em&gt;읽기&lt;/em&gt; , &lt;em&gt;쓰기&lt;/em&gt; 및 &lt;em&gt;실행&lt;/em&gt; 액세스를 결정합니다 . 일부 운영 체제 및 파일 시스템은 추가 권한 비트를 제공 할 수 있지만이 릴리스에서는이 비트가 다른 비트에 대한 액세스를 정의하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d75e18b4bb9f537656575df11977b7323415855" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt; interface extends &lt;code&gt;BasicFileAttributeView&lt;/code&gt; by defining methods to access the file attributes commonly used by file systems and operating systems that implement the Portable Operating System Interface (POSIX) family of standards.</source>
          <target state="translated">&lt;a href=&quot;posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; 의&lt;/a&gt; 인터페이스는 확장 &lt;code&gt;BasicFileAttributeView&lt;/code&gt; 를 표준 휴대용 운영 체제 인터페이스 (POSIX) 제품군을 구현하는 시스템을 일반적으로 파일 시스템에 의해 사용되는 속성 파일에 액세스하는 방법을 정의하고 운영에 의해.</target>
        </trans-unit>
        <trans-unit id="6738d407658008666bc1a5053dfbc19962272b6f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes&lt;/code&gt;&lt;/a&gt; method is used to read the file's attributes. The file &lt;a href=&quot;posixfileattributes#owner--&quot;&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/a&gt; is represented by a &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt; that is the identity of the file owner for the purposes of access control. The &lt;a href=&quot;posixfileattributes#group--&quot;&gt;&lt;code&gt;group-owner&lt;/code&gt;&lt;/a&gt;, represented by a &lt;a href=&quot;groupprincipal&quot;&gt;&lt;code&gt;GroupPrincipal&lt;/code&gt;&lt;/a&gt;, is the identity of the group owner, where a group is an identity created for administrative purposes so as to determine the access rights for the members of the group.</source>
          <target state="translated">&lt;a href=&quot;posixfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes&lt;/code&gt; 의&lt;/a&gt; 방법은 파일의 속성을 읽기 위해 사용된다. 파일 &lt;a href=&quot;posixfileattributes#owner--&quot;&gt; &lt;code&gt;owner&lt;/code&gt; &lt;/a&gt; 는 액세스 제어를 위해 파일 소유자의 ID 인 &lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt; 로 표시됩니다 . &lt;a href=&quot;posixfileattributes#group--&quot;&gt; &lt;code&gt;group-owner&lt;/code&gt; &lt;/a&gt; a로 표현 &lt;a href=&quot;groupprincipal&quot;&gt; &lt;code&gt;GroupPrincipal&lt;/code&gt; 는&lt;/a&gt; , 그룹이 그룹의 구성원에 대한 액세스 권한을 결정하기 위해 관리 목적으로 만든 정체성 인 그룹 소유자의 신원입니다.</target>
        </trans-unit>
        <trans-unit id="f5cae7f82ee146d950bad36b2028281d1616c695" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;posixfilepermissions&quot;&gt;&lt;code&gt;PosixFilePermissions&lt;/code&gt;&lt;/a&gt; class defines methods for manipulating set of permissions.</source>
          <target state="translated">&lt;a href=&quot;posixfilepermissions&quot;&gt; &lt;code&gt;PosixFilePermissions&lt;/code&gt; 의&lt;/a&gt; 클래스는 권한 설정을 조작하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="1c860f3bbab8e3f481494dd988c7bd96d51b73be" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;processbuilder#start--&quot;&gt;&lt;code&gt;ProcessBuilder.start()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt;&lt;code&gt;Runtime.exec&lt;/code&gt;&lt;/a&gt; methods create a native process and return an instance of a subclass of &lt;code&gt;Process&lt;/code&gt; that can be used to control the process and obtain information about it.</source>
          <target state="translated">&lt;a href=&quot;processbuilder#start--&quot;&gt; &lt;code&gt;ProcessBuilder.start()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt; &lt;code&gt;Runtime.exec&lt;/code&gt; 의의&lt;/a&gt; 방법은 기본 프로세스를 생성하는 서브 클래스의 인스턴스를 리턴 &lt;code&gt;Process&lt;/code&gt; 프로세스를 제어하고 정보의 취득을 할 수있다.</target>
        </trans-unit>
        <trans-unit id="b1cb6821609bfac1723d508b0bb91d2d757fd59e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;processbuilder#start--&quot;&gt;&lt;code&gt;ProcessBuilder.start()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt;&lt;code&gt;Runtime.exec&lt;/code&gt;&lt;/a&gt; methods create a native process and return an instance of a subclass of &lt;code&gt;Process&lt;/code&gt; that can be used to control the process and obtain information about it. The class &lt;code&gt;Process&lt;/code&gt; provides methods for performing input from the process, performing output to the process, waiting for the process to complete, checking the exit status of the process, and destroying (killing) the process.</source>
          <target state="translated">&lt;a href=&quot;processbuilder#start--&quot;&gt; &lt;code&gt;ProcessBuilder.start()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;runtime#exec-java.lang.String:A-java.lang.String:A-java.io.File-&quot;&gt; &lt;code&gt;Runtime.exec&lt;/code&gt; 의의&lt;/a&gt; 방법은 기본 프로세스를 생성하는 서브 클래스의 인스턴스를 리턴 &lt;code&gt;Process&lt;/code&gt; 프로세스를 제어하고 정보의 취득을 할 수있다. &lt;code&gt;Process&lt;/code&gt; 클래스는 프로세스 에서 입력을 수행하고, 프로세스로 출력을 수행하고, 프로세스가 완료되기를 기다리고, 프로세스의 종료 상태를 확인하고, 프로세스를 제거 (killing)하기위한 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ea844c85f1e3f45d0fbdf528232a86e15887b986" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;properties#load-java.io.Reader-&quot;&gt;&lt;code&gt;load(Reader)&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/&lt;/code&gt;&lt;a href=&quot;properties#store-java.io.Writer-java.lang.String-&quot;&gt;&lt;code&gt;store(Writer, String)&lt;/code&gt;&lt;/a&gt; methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The &lt;a href=&quot;properties#load-java.io.InputStream-&quot;&gt;&lt;code&gt;load(InputStream)&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/&lt;/code&gt;&lt;a href=&quot;properties#store-java.io.OutputStream-java.lang.String-&quot;&gt;&lt;code&gt;store(OutputStream, String)&lt;/code&gt;&lt;/a&gt; methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of</source>
          <target state="translated">&lt;a href=&quot;properties#load-java.io.Reader-&quot;&gt; &lt;code&gt;load(Reader)&lt;/code&gt; &lt;/a&gt; &lt;code&gt;/&lt;/code&gt; &lt;a href=&quot;properties#store-java.io.Writer-java.lang.String-&quot;&gt; &lt;code&gt;store(Writer, String)&lt;/code&gt; &lt;/a&gt; 단순한 행 지향 형식에서에서와 문자 기반 스트림 방법로드 및 저장 특성은 아래에 지정된. &lt;a href=&quot;properties#load-java.io.InputStream-&quot;&gt; &lt;code&gt;load(InputStream)&lt;/code&gt; &lt;/a&gt; &lt;code&gt;/&lt;/code&gt; &lt;a href=&quot;properties#store-java.io.OutputStream-java.lang.String-&quot;&gt; &lt;code&gt;store(OutputStream, String)&lt;/code&gt; &lt;/a&gt; 입력 / 출력 스트림은 ISO 8859-1 문자 인코딩으로 인코딩 제외 방법은, 부하 (리더) / 스토어 (작가, 문자열) 쌍과 동일한 방식으로 작동한다. 이 인코딩에서 직접 표현할 수없는 문자는 3.3 절에서 정의한대로 유니 코드 이스케이프를 사용하여 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43359c708823c69498cdd32a1f027924e4c33c67" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;properties#loadFromXML-java.io.InputStream-&quot;&gt;&lt;code&gt;loadFromXML(InputStream)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;properties#storeToXML-java.io.OutputStream-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;storeToXML(OutputStream, String, String)&lt;/code&gt;&lt;/a&gt; methods load and store properties in a simple XML format. By default the UTF-8 character encoding is used, however a specific encoding may be specified if required. Implementations are required to support UTF-8 and UTF-16 and may support other encodings. An XML properties document has the following DOCTYPE declaration:</source>
          <target state="translated">&lt;a href=&quot;properties#loadFromXML-java.io.InputStream-&quot;&gt; &lt;code&gt;loadFromXML(InputStream)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;properties#storeToXML-java.io.OutputStream-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;storeToXML(OutputStream, String, String)&lt;/code&gt; &lt;/a&gt; 간단한 XML 형식의 방법로드 및 저장 특성. 기본적으로 UTF-8 문자 인코딩이 사용되지만 필요한 경우 특정 인코딩을 지정할 수 있습니다. UTF-8 및 UTF-16을 지원하려면 구현이 필요하며 다른 인코딩을 지원할 수 있습니다. XML 특성 문서에는 다음 DOCTYPE 선언이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8f6297aee07864a86e2bb6a0ea3ccd94df49256" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;proxy#isProxyClass-java.lang.Class-&quot;&gt;&lt;code&gt;Proxy.isProxyClass&lt;/code&gt;&lt;/a&gt; method will return true if it is passed a proxy class-- a class returned by &lt;code&gt;Proxy.getProxyClass&lt;/code&gt; or the class of an object returned by &lt;code&gt;Proxy.newProxyInstance&lt;/code&gt;-- and false otherwise.</source>
          <target state="translated">&lt;a href=&quot;proxy#isProxyClass-java.lang.Class-&quot;&gt; &lt;code&gt;Proxy.isProxyClass&lt;/code&gt; 의&lt;/a&gt; 가에 의해 반환 된 클래스 그 수업 프록시 전달되는 경우 메소드는 true를 돌려줍니다 &lt;code&gt;Proxy.getProxyClass&lt;/code&gt; 의 나에 의해 반환 된 객체의 클래스 &lt;code&gt;Proxy.newProxyInstance&lt;/code&gt; 를 , 그렇지 않으면 거짓 -.</target>
        </trans-unit>
        <trans-unit id="82b9b6df8d0389635e3baf324194adaf4d0a9535" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queue#element--&quot;&gt;&lt;code&gt;element()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;queue#peek--&quot;&gt;&lt;code&gt;peek()&lt;/code&gt;&lt;/a&gt; methods return, but do not remove, the head of the queue.</source>
          <target state="translated">&lt;a href=&quot;queue#element--&quot;&gt; &lt;code&gt;element()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;queue#peek--&quot;&gt; &lt;code&gt;peek()&lt;/code&gt; &lt;/a&gt; 메소드는 큐의 선두를 돌려줍니다 만, 삭제는하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b3de824965777891d01ab953cb9a6bb37bc267d2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queue#offer-E-&quot;&gt;&lt;code&gt;offer&lt;/code&gt;&lt;/a&gt; method inserts an element if possible, otherwise returning &lt;code&gt;false&lt;/code&gt;. This differs from the &lt;a href=&quot;collection#add-E-&quot;&gt;&lt;code&gt;Collection.add&lt;/code&gt;&lt;/a&gt; method, which can fail to add an element only by throwing an unchecked exception. The &lt;code&gt;offer&lt;/code&gt; method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or &quot;bounded&quot;) queues.</source>
          <target state="translated">&lt;a href=&quot;queue#offer-E-&quot;&gt; &lt;code&gt;offer&lt;/code&gt; &lt;/a&gt; 가능하다면 방법은, 그렇지 않으면 반환 요소를 삽입 &lt;code&gt;false&lt;/code&gt; . 이것은 점검되지 않은 예외를 던져야 만 요소를 추가 할 수없는 &lt;a href=&quot;collection#add-E-&quot;&gt; &lt;code&gt;Collection.add&lt;/code&gt; &lt;/a&gt; 메소드 와 다릅니다 . &lt;code&gt;offer&lt;/code&gt; 실패 고정 용량, 예를 들면, 정상이 아닌 경우 예외 발생 방법 (또는 &quot;경계&quot;) 큐를 사용하도록 설계된다.</target>
        </trans-unit>
        <trans-unit id="e8d4e252e82e3c4010bc6f24536b3c8e384a7a00" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;queue#remove--&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;queue#poll--&quot;&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/a&gt; methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation. The &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;poll()&lt;/code&gt; methods differ only in their behavior when the queue is empty: the &lt;code&gt;remove()&lt;/code&gt; method throws an exception, while the &lt;code&gt;poll()&lt;/code&gt; method returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;queue#remove--&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;queue#poll--&quot;&gt; &lt;code&gt;poll()&lt;/code&gt; &lt;/a&gt; 메소드는 제거 큐의 헤드를 반환한다. 정확히 어떤 요소가 대기열에서 제거되는지는 구현 순서에 따라 다른 대기열 순서 정책의 기능입니다. &lt;code&gt;remove()&lt;/code&gt; 와 &lt;code&gt;poll()&lt;/code&gt; 큐가 비어있을 때 방법은 자신의 행동 만 다른 다음 &lt;code&gt;remove()&lt;/code&gt; 메소드는 동안, 예외가 발생 &lt;code&gt;poll()&lt;/code&gt; 메소드의 반환 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78e6516c0dec9e8c202d246bc450ed434c84f25b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;readablebytechannel&quot;&gt;&lt;code&gt;ReadableByteChannel&lt;/code&gt;&lt;/a&gt; interface specifies a &lt;a href=&quot;readablebytechannel#read-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; method that reads bytes from the channel into a buffer; similarly, the &lt;a href=&quot;writablebytechannel&quot;&gt;&lt;code&gt;WritableByteChannel&lt;/code&gt;&lt;/a&gt; interface specifies a &lt;a href=&quot;writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method that writes bytes from a buffer to the channel. The &lt;a href=&quot;bytechannel&quot;&gt;&lt;code&gt;ByteChannel&lt;/code&gt;&lt;/a&gt; interface unifies these two interfaces for the common case of channels that can both read and write bytes. The &lt;a href=&quot;seekablebytechannel&quot;&gt;&lt;code&gt;SeekableByteChannel&lt;/code&gt;&lt;/a&gt; interface extends the &lt;code&gt;ByteChannel&lt;/code&gt; interface with methods to &lt;a href=&quot;seekablebytechannel#position--&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt;&lt;code&gt;modify&lt;/code&gt;&lt;/a&gt; the channel's current position, and its &lt;a href=&quot;seekablebytechannel#size--&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;readablebytechannel&quot;&gt; &lt;code&gt;ReadableByteChannel&lt;/code&gt; 의&lt;/a&gt; 인터페이스를 지정하는 &lt;a href=&quot;readablebytechannel#read-java.nio.ByteBuffer-&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; 버퍼로 채널의 바이트를 읽는 단계; 마찬가지로 &lt;a href=&quot;writablebytechannel&quot;&gt; &lt;code&gt;WritableByteChannel&lt;/code&gt; &lt;/a&gt; 인터페이스 는 버퍼에서 채널로 바이트를 쓰는 &lt;a href=&quot;writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 메소드를 지정합니다 . &lt;a href=&quot;bytechannel&quot;&gt; &lt;code&gt;ByteChannel&lt;/code&gt; &lt;/a&gt; 인터페이스는 바이트를 읽고 쓸 수있는 일반적인 채널 의 경우이 두 인터페이스를 통합합니다. &lt;a href=&quot;seekablebytechannel&quot;&gt; &lt;code&gt;SeekableByteChannel&lt;/code&gt; 의&lt;/a&gt; 인터페이스는 확장 &lt;code&gt;ByteChannel&lt;/code&gt; 에 대한 방법과 인터페이스 &lt;a href=&quot;seekablebytechannel#position--&quot;&gt; &lt;code&gt;query&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt; &lt;code&gt;modify&lt;/code&gt; &lt;/a&gt; 채널의 현재 위치와 &lt;a href=&quot;seekablebytechannel#size--&quot;&gt; &lt;code&gt;size&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c2ccfc4344d98344bac10a3d0beeebc75678f34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;readwritelock&quot;&gt;&lt;code&gt;ReadWriteLock&lt;/code&gt;&lt;/a&gt; interface similarly defines locks that may be shared among readers but are exclusive to writers. Only a single implementation, &lt;a href=&quot;reentrantreadwritelock&quot;&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;&lt;/a&gt;, is provided, since it covers most standard usage contexts. But programmers may create their own implementations to cover nonstandard requirements.</source>
          <target state="translated">&lt;a href=&quot;readwritelock&quot;&gt; &lt;code&gt;ReadWriteLock&lt;/code&gt; &lt;/a&gt; 인터페이스는 리더 사이에서는 공유 가능하지만, 라이터에는 배타적으로 설정 가능한 락을 정의합니다. 대부분의 표준 사용 컨텍스트를 다루기 때문에 단일 구현 인 &lt;a href=&quot;reentrantreadwritelock&quot;&gt; &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; &lt;/a&gt; 만 제공됩니다. 그러나 프로그래머는 비표준 요구 사항을 다루기 위해 자체 구현을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccb2a8fa5c45fda8065dbaad7a3c71bba458a361" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resolverstyle&quot;&gt;&lt;code&gt;ResolverStyle&lt;/code&gt;&lt;/a&gt; is an enum that offers three different approaches, strict, smart and lenient. The smart option is the default. It can be set using &lt;a href=&quot;datetimeformatter#withResolverStyle-java.time.format.ResolverStyle-&quot;&gt;&lt;code&gt;withResolverStyle(ResolverStyle)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;resolverstyle&quot;&gt; &lt;code&gt;ResolverStyle&lt;/code&gt; 은&lt;/a&gt; 열거입니다 이벤트 세 가지 접근 방법, 엄격한, 똑똑하고 관대 한 그. 스마트 옵션이 기본값입니다. &lt;a href=&quot;datetimeformatter#withResolverStyle-java.time.format.ResolverStyle-&quot;&gt; &lt;code&gt;withResolverStyle(ResolverStyle)&lt;/code&gt; &lt;/a&gt; 사용하여 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a61c3fe4bcefb9096a8ca84cf773684b1d6df713" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resolverstyle&quot;&gt;resolver style&lt;/a&gt; has no effect on instant parsing. The end-of-day time of '24:00' is handled as midnight at the start of the following day. The leap-second time of '23:59:59' is handled to some degree, see &lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt;&lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt;&lt;/a&gt; for full details.</source>
          <target state="translated">&lt;a href=&quot;resolverstyle&quot;&gt;해결의 스타일은&lt;/a&gt; 즉시 구문 분석에 영향을주지 않습니다. '24 : 00 '의 종료 시간은 다음 날 시작시 자정으로 처리됩니다. '23 : 59 : 59 '의 윤초 시간은 어느 정도 처리됩니다 . 자세한 내용 은 &lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt; &lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ffbf4748dbac126c5220a08777eb15c9fdb0572e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resolverstyle&quot;&gt;resolver style&lt;/a&gt; has no effect on instant parsing. The end-of-day time of '24:00' is handled as midnight at the start of the following day. The leap-second time of '23:59:60' is handled to some degree, see &lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt;&lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt;&lt;/a&gt; for full details.</source>
          <target state="translated">&lt;a href=&quot;resolverstyle&quot;&gt;해결의 스타일은&lt;/a&gt; 즉시 구문 분석에 영향을주지 않습니다. '24 : 00 '의 종료 시간은 다음 날 시작시 자정으로 처리됩니다. '23 : 59 : 60 '의 윤초 시간은 어느 정도 처리됩니다 . 자세한 내용 은 &lt;a href=&quot;datetimeformatter#parsedLeapSecond--&quot;&gt; &lt;code&gt;DateTimeFormatter.parsedLeapSecond()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="844b2132f1798e9d55cc9c339a4149469ad05e5e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control&quot;&gt;&lt;code&gt;ResourceBundle.Control&lt;/code&gt;&lt;/a&gt; class provides information necessary to perform the bundle loading process by the &lt;code&gt;getBundle&lt;/code&gt; factory methods that take a &lt;code&gt;ResourceBundle.Control&lt;/code&gt; instance. You can implement your own subclass in order to enable non-standard resource bundle formats, change the search strategy, or define caching parameters. Refer to the descriptions of the class and the &lt;a href=&quot;resourcebundle#getBundle-java.lang.String-java.util.Locale-java.lang.ClassLoader-java.util.ResourceBundle.Control-&quot;&gt;&lt;code&gt;getBundle&lt;/code&gt;&lt;/a&gt; factory method for details.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control&quot;&gt; &lt;code&gt;ResourceBundle.Control&lt;/code&gt; &lt;/a&gt; 클래스에 의해 번들로드 처리를 수행하는 데 필요한 정보를 제공 &lt;code&gt;getBundle&lt;/code&gt; 는 테이크 팩토리 메소드 &lt;code&gt;ResourceBundle.Control&lt;/code&gt; 인스턴스를. 비표준 리소스 번들 형식을 활성화하고 검색 전략을 변경하거나 캐싱 매개 변수를 정의하기 위해 자체 하위 클래스를 구현할 수 있습니다. 자세한 내용은 클래스 설명 및 &lt;a href=&quot;resourcebundle#getBundle-java.lang.String-java.util.Locale-java.lang.ClassLoader-java.util.ResourceBundle.Control-&quot;&gt; &lt;code&gt;getBundle&lt;/code&gt; &lt;/a&gt; 팩토리 메소드를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5b1b140c56a442f57e62e38c4c78a04d61105b58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;control.getCandidateLocales&lt;/code&gt;&lt;/a&gt; method is called with the target locale to get a list of &lt;em&gt;candidate &lt;code&gt;Locale&lt;/code&gt;s&lt;/em&gt; for which resource bundles are searched.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;control.getCandidateLocales&lt;/code&gt; 의&lt;/a&gt; 방법의 목록을 얻을 수있는 대상 로케일로 호출 &lt;em&gt;후보 &lt;code&gt;Locale&lt;/code&gt; 의&lt;/em&gt; 자원 번들이 검색되는 위해를.</target>
        </trans-unit>
        <trans-unit id="772adc8499f04f3dfcd1f7ee081e85fbe1b93725" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#getFallbackLocale-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;control.getFallbackLocale&lt;/code&gt;&lt;/a&gt; method is called to get a fallback locale (alternative to the current target locale) to try further finding a resource bundle. If the method returns a non-null locale, it becomes the next target locale and the loading process starts over from Step 3. Otherwise, if a base bundle was found and put on hold in a previous Step 5, it is returned to the caller now. Otherwise, a MissingResourceException is thrown.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#getFallbackLocale-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;control.getFallbackLocale&lt;/code&gt; 의&lt;/a&gt; 방법은 자원 번들을 찾아 더 시도 (현재의 대상 로케일로 대체) 대체 로케일을 얻기 위해 호출된다. 메소드가 널이 아닌 로케일을 리턴하면, 다음 대상 로케일이되고로드 프로세스는 3 단계부터 시작합니다. 그렇지 않으면 기본 번들이 발견되어 이전 5 단계에서 보류 된 경우 호출자에게 리턴됩니다. 지금. 그렇지 않으면 MissingResourceException이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="635f440f4fb0dc3df8028007964f525ee541d99c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#getFormats-java.lang.String-&quot;&gt;&lt;code&gt;control.getFormats&lt;/code&gt;&lt;/a&gt; method is called to get resource bundle formats to produce bundle or resource names. The strings &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; and &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; designate class-based and &lt;a href=&quot;propertyresourcebundle&quot;&gt;property&lt;/a&gt;-based resource bundles, respectively. Other strings starting with &lt;code&gt;&quot;java.&quot;&lt;/code&gt; are reserved for future extensions and must not be used for application-defined formats. Other strings designate application-defined formats.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#getFormats-java.lang.String-&quot;&gt; &lt;code&gt;control.getFormats&lt;/code&gt; 의&lt;/a&gt; 방법은 생산 번들 또는 자원 이름에 자원 번들 형식을 얻기 위해 호출된다. &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; 문자열 은 각각 클래스 기반 및 &lt;a href=&quot;propertyresourcebundle&quot;&gt;특성&lt;/a&gt; 기반 자원 번들을 지정 합니다 . &lt;code&gt;&quot;java.&quot;&lt;/code&gt; 시작하는 다른 문자열 향후 확장을 위해 예약되어 있으며 응용 프로그램 정의 형식에 사용해서는 안됩니다. 다른 문자열은 응용 프로그램 정의 형식을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="143061f5a7fc551c0ad375aa5616ef6082a571b7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;resourcebundle.control#newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-&quot;&gt;&lt;code&gt;control.newBundle&lt;/code&gt;&lt;/a&gt; method is called to instantiate a &lt;code&gt;ResourceBundle&lt;/code&gt; for the base bundle name, a candidate locale, and a format. (Refer to the note on the cache lookup below.) This step is iterated over all combinations of the candidate locales and formats until the &lt;code&gt;newBundle&lt;/code&gt; method returns a &lt;code&gt;ResourceBundle&lt;/code&gt; instance or the iteration has used up all the combinations. For example, if the candidate locales are &lt;code&gt;Locale(&quot;de&quot;, &quot;DE&quot;)&lt;/code&gt;, &lt;code&gt;Locale(&quot;de&quot;)&lt;/code&gt; and &lt;code&gt;Locale(&quot;&quot;)&lt;/code&gt; and the formats are &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; and &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt;, then the following is the sequence of locale-format combinations to be used to call &lt;code&gt;control.newBundle&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-&quot;&gt; &lt;code&gt;control.newBundle&lt;/code&gt; &lt;/a&gt; 방법은 인스턴스화하기 위해 호출됩니다 &lt;code&gt;ResourceBundle&lt;/code&gt; 을 기본 번들 이름, 후보 로케일과 형식을. (아래의 캐시 조회에 대한 참고 사항을 참조하십시오.)이 단계는 &lt;code&gt;newBundle&lt;/code&gt; 메소드가 &lt;code&gt;ResourceBundle&lt;/code&gt; 인스턴스를 리턴 하거나 반복이 모든 조합을 다 쓸 때까지 후보 로케일 및 형식의 모든 조합에 대해 반복됩니다. 예를 들어, 후보 로케일이 &lt;code&gt;Locale(&quot;de&quot;, &quot;DE&quot;)&lt;/code&gt; , &lt;code&gt;Locale(&quot;de&quot;)&lt;/code&gt; 및 &lt;code&gt;Locale(&quot;&quot;)&lt;/code&gt; 이고 형식이 &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; 인 경우 ,다음은 호출하는 데 사용되는 로케일 형식 조합 순서입니다. &lt;code&gt;control.newBundle&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10eb909f57a9444304efbbfb4230e34732f3b9b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scanner#findInLine-java.lang.String-&quot;&gt;&lt;code&gt;findInLine(java.lang.String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;scanner#findWithinHorizon-java.lang.String-int-&quot;&gt;&lt;code&gt;findWithinHorizon(java.lang.String, int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;scanner#skip-java.util.regex.Pattern-&quot;&gt;&lt;code&gt;skip(java.util.regex.Pattern)&lt;/code&gt;&lt;/a&gt; methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input.</source>
          <target state="translated">&lt;a href=&quot;scanner#findInLine-java.lang.String-&quot;&gt; &lt;code&gt;findInLine(java.lang.String)&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;scanner#findWithinHorizon-java.lang.String-int-&quot;&gt; &lt;code&gt;findWithinHorizon(java.lang.String, int)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;scanner#skip-java.util.regex.Pattern-&quot;&gt; &lt;code&gt;skip(java.util.regex.Pattern)&lt;/code&gt; &lt;/a&gt; 메소드는 분리 패턴에 독립적으로 동작한다. 이 메소드는 입력의 분리 문자와 상관없이 지정된 패턴을 일치 시키려고 시도하므로 분리 문자가 관련이없는 특수한 환경에서 사용될 수 있습니다. 이러한 메소드는 추가 입력 대기를 차단할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="348c28db8b27cc9f18897b329f01ff9a7695b683" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scanner#next--&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;scanner#hasNext--&quot;&gt;&lt;code&gt;hasNext()&lt;/code&gt;&lt;/a&gt; methods and their primitive-type companion methods (such as &lt;a href=&quot;scanner#nextInt--&quot;&gt;&lt;code&gt;nextInt()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;scanner#hasNextInt--&quot;&gt;&lt;code&gt;hasNextInt()&lt;/code&gt;&lt;/a&gt;) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both &lt;code&gt;hasNext&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; methods may block waiting for further input. Whether a &lt;code&gt;hasNext&lt;/code&gt; method blocks has no connection to whether or not its associated &lt;code&gt;next&lt;/code&gt; method will block.</source>
          <target state="translated">&lt;a href=&quot;scanner#next--&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;scanner#hasNext--&quot;&gt; &lt;code&gt;hasNext()&lt;/code&gt; &lt;/a&gt; 메소드 (예로서의 프리미티브 타입 컴패니언 방법 &lt;a href=&quot;scanner#nextInt--&quot;&gt; &lt;code&gt;nextInt()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;scanner#hasNextInt--&quot;&gt; &lt;code&gt;hasNextInt()&lt;/code&gt; &lt;/a&gt; 제 구분 패턴에 일치하는 입력을 스킵하고 다음 토큰을 반환하도록 시도). &lt;code&gt;hasNext&lt;/code&gt; 및 &lt;code&gt;next&lt;/code&gt; 메소드는 모두 추가 입력 대기를 차단할 수 있습니다. 여부 &lt;code&gt;hasNext&lt;/code&gt; 의 방법 블록 관련 여부에 아무런 관련이없는 &lt;code&gt;next&lt;/code&gt; 방법이 차단됩니다.</target>
        </trans-unit>
        <trans-unit id="21137fd05c9ebb8f424df8db033cf26db6b1b34b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scatteringbytechannel&quot;&gt;&lt;code&gt;ScatteringByteChannel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;gatheringbytechannel&quot;&gt;&lt;code&gt;GatheringByteChannel&lt;/code&gt;&lt;/a&gt; interfaces extend the &lt;a href=&quot;readablebytechannel&quot;&gt;&lt;code&gt;ReadableByteChannel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;writablebytechannel&quot;&gt;&lt;code&gt;WritableByteChannel&lt;/code&gt;&lt;/a&gt; interfaces, respectively, adding &lt;a href=&quot;scatteringbytechannel#read-java.nio.ByteBuffer:A-int-int-&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;gatheringbytechannel#write-java.nio.ByteBuffer:A-int-int-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; methods that take a sequence of buffers rather than a single buffer.</source>
          <target state="translated">&lt;a href=&quot;scatteringbytechannel&quot;&gt; &lt;code&gt;ScatteringByteChannel&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;gatheringbytechannel&quot;&gt; &lt;code&gt;GatheringByteChannel&lt;/code&gt; &lt;/a&gt; 인터페이스는 확장 &lt;a href=&quot;readablebytechannel&quot;&gt; &lt;code&gt;ReadableByteChannel&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;writablebytechannel&quot;&gt; &lt;code&gt;WritableByteChannel&lt;/code&gt; &lt;/a&gt; 부가 각각 인터페이스 &lt;a href=&quot;scatteringbytechannel#read-java.nio.ByteBuffer:A-int-int-&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;gatheringbytechannel#write-java.nio.ByteBuffer:A-int-int-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 버퍼 순서보다는 하나의 버퍼를 가지고 방법.</target>
        </trans-unit>
        <trans-unit id="07cb8eb23ad928e28854d19141c00b90056152a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;seekablebytechannel#truncate-long-&quot;&gt;&lt;code&gt;truncate&lt;/code&gt;&lt;/a&gt; methods which do not otherwise have a value to return are specified to return the channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained.</source>
          <target state="translated">&lt;a href=&quot;seekablebytechannel#position-long-&quot;&gt; &lt;code&gt;position&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;seekablebytechannel#truncate-long-&quot;&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;/a&gt; 반환 값을 돌려주지 않는 방법은 자신을 호출 한 채널 정보를 돌려줍니다. 이를 통해 메소드 호출을 연결할 수 있습니다. 이 인터페이스의 구현은 구현 클래스에서 메소드 호출을 체인 할 수 있도록 리턴 유형을 특수화해야합니다.</target>
        </trans-unit>
        <trans-unit id="90a51280115503dcf1e905f60856aff6ffe205d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;selector#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method synchronizes on the selector and all three key sets in the same order as in a selection operation.</source>
          <target state="translated">&lt;a href=&quot;selector#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 방법은 선택 및 선택 동작과 동일한 순서로 세 키 세트에 동기화한다.</target>
        </trans-unit>
        <trans-unit id="d451b4a4efe00d347a54add6cb0af761ff11af1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;socketoption#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; of each socket option defined by this class is its field name.</source>
          <target state="translated">이 클래스에 의해 정의 된 각 소켓 옵션 의 &lt;a href=&quot;socketoption#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 은 해당 필드 이름입니다.</target>
        </trans-unit>
        <trans-unit id="277deff41b631710526c3be6a8bce3fa73e5a350" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardcharsets&quot;&gt;&lt;code&gt;StandardCharsets&lt;/code&gt;&lt;/a&gt; class defines constants for each of the standard charsets.</source>
          <target state="translated">&lt;a href=&quot;standardcharsets&quot;&gt; &lt;code&gt;StandardCharsets&lt;/code&gt; 의&lt;/a&gt; 클래스는 표준 캐릭터 세트의 각각에 대한 상수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="a8dd9a9fec27603d78ed08617b0bdfc6d7c235da" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardcopyoption&quot;&gt;&lt;code&gt;StandardCopyOption&lt;/code&gt;&lt;/a&gt; enumeration type defines the</source>
          <target state="translated">&lt;a href=&quot;standardcopyoption&quot;&gt; &lt;code&gt;StandardCopyOption&lt;/code&gt; 의&lt;/a&gt; 열거 형을 정의하는</target>
        </trans-unit>
        <trans-unit id="80c99f93b54d2734b5913704c3b7bc58ac7bd819" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardopenoption&quot;&gt;&lt;code&gt;StandardOpenOption&lt;/code&gt;&lt;/a&gt; enumeration type defines the</source>
          <target state="translated">&lt;a href=&quot;standardopenoption&quot;&gt; &lt;code&gt;StandardOpenOption&lt;/code&gt; 의&lt;/a&gt; 열거 형을 정의하는</target>
        </trans-unit>
        <trans-unit id="3d74cb4498be8f94cc5abccf92b10b83b8240700" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;standardopenoption#SYNC&quot;&gt;&lt;code&gt;SYNC&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;standardopenoption#DSYNC&quot;&gt;&lt;code&gt;DSYNC&lt;/code&gt;&lt;/a&gt; options are used when opening a file to require that updates to the file are written synchronously to the underlying storage device. In the case of the default provider, and the file resides on a local storage device, and the &lt;a href=&quot;../channels/seekablebytechannel&quot;&gt;&lt;code&gt;seekable&lt;/code&gt;&lt;/a&gt; channel is connected to a file that was opened with one of these options, then an invocation of the &lt;a href=&quot;../channels/writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method is only guaranteed to return when all changes made to the file by that invocation have been written to the device. These options are useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made. Whether this guarantee is possible with other &lt;a href=&quot;spi/filesystemprovider&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; implementations is provider specific.</source>
          <target state="translated">&lt;a href=&quot;standardopenoption#SYNC&quot;&gt; &lt;code&gt;SYNC&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;standardopenoption#DSYNC&quot;&gt; &lt;code&gt;DSYNC&lt;/code&gt; &lt;/a&gt; 파일을 열 때 사용되는 옵션은 파일에 업데이트가 기본 저장 장치에 동 기적으로 기록해야합니다. 기본 공급자의 경우 파일이 로컬 저장 장치에 있고 &lt;a href=&quot;../channels/seekablebytechannel&quot;&gt; &lt;code&gt;seekable&lt;/code&gt; &lt;/a&gt; 채널이 이러한 옵션 중 하나를 사용하여 열린 파일에 연결되면 &lt;a href=&quot;../channels/writablebytechannel#write-java.nio.ByteBuffer-&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt; 메서드 호출은 모두 해당 호출에 의한 파일 변경 사항이 장치에 기록되었습니다. 이 옵션은 시스템 충돌시 중요한 정보가 손실되지 않도록하는 데 유용합니다. 파일이 로컬 장치에 없으면 그러한 보증이 이루어지지 않습니다. 다른 &lt;a href=&quot;spi/filesystemprovider&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt; 와 함께이 보증이 가능한지 여부 구현은 공급자마다 다릅니다.</target>
        </trans-unit>
        <trans-unit id="65632e3304ce8a7430971d425d4ea6f5d7041352" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporal/chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;Epoch Day count&lt;/code&gt;&lt;/a&gt; is a simple incrementing count of days where day 0 is 1970-01-01 (ISO). This definition is the same for all chronologies, enabling conversion.</source>
          <target state="translated">&lt;a href=&quot;temporal/chronofield#EPOCH_DAY&quot;&gt; &lt;code&gt;Epoch Day count&lt;/code&gt; &lt;/a&gt; 일 0 1970-01-01 (ISO)입니다 일의 수를 증가 간단. 이 정의는 모든 연대기에서 동일하므로 변환이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="5fe0b0a62926df5a411799abadea12e26424d776" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporaladjusters&quot;&gt;&lt;code&gt;TemporalAdjusters&lt;/code&gt;&lt;/a&gt; class contains a standard set of adjusters, available as static methods. These include:</source>
          <target state="translated">&lt;a href=&quot;temporaladjusters&quot;&gt; &lt;code&gt;TemporalAdjusters&lt;/code&gt; 의&lt;/a&gt; 클래스는 정적 메서드로 사용할 수 조정자의 표준 세트가 포함되어 있습니다. 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8ee0d1305c6ed8ac73c630b5768c7fd55bebbf44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporalamount&quot;&gt;&lt;code&gt;TemporalAmount&lt;/code&gt;&lt;/a&gt; interface models amounts of relative time.</source>
          <target state="translated">&lt;a href=&quot;temporalamount&quot;&gt; &lt;code&gt;TemporalAmount&lt;/code&gt; 의&lt;/a&gt; 인터페이스 모델은 상대적 시간의 금액.</target>
        </trans-unit>
        <trans-unit id="d603049ad9b812aec8a4461ab35e3fdfaf4b0a9c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt; interface provides another mechanism for querying temporal objects. That interface is limited to returning a &lt;code&gt;long&lt;/code&gt;. By contrast, queries can return any type.</source>
          <target state="translated">&lt;a href=&quot;temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; 의&lt;/a&gt; 인터페이스는 임시 객체를 조회하는 또 다른 메커니즘을 제공한다. 이 인터페이스는 &lt;code&gt;long&lt;/code&gt; 을 반환하는 것으로 제한됩니다 . 반대로 쿼리는 모든 유형을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da0f2490753f88004eeaececd77ced0e3d26d3b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threadgroup#uncaughtException-java.lang.Thread-java.lang.Throwable-&quot;&gt;top-level error handler&lt;/a&gt; does not print out a message if &lt;code&gt;ThreadDeath&lt;/code&gt; is never caught.</source>
          <target state="translated">&lt;a href=&quot;threadgroup#uncaughtException-java.lang.Thread-java.lang.Throwable-&quot;&gt;최고 레벨의 에러 핸들러는&lt;/a&gt; 경우 메시지를 출력하지 않는 &lt;code&gt;ThreadDeath&lt;/code&gt; 잡힌되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="90e1d925999c201c8dd68d8ed236e67286b0b5ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threadmxbean#isThreadContentionMonitoringSupported--&quot;&gt;&lt;code&gt;isThreadContentionMonitoringSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if a Java virtual machine supports thread contention monitoring. The thread contention monitoring is disabled by default. The &lt;a href=&quot;threadmxbean#setThreadContentionMonitoringEnabled-boolean-&quot;&gt;&lt;code&gt;setThreadContentionMonitoringEnabled(boolean)&lt;/code&gt;&lt;/a&gt; method can be used to enable thread contention monitoring.</source>
          <target state="translated">&lt;a href=&quot;threadmxbean#isThreadContentionMonitoringSupported--&quot;&gt; &lt;code&gt;isThreadContentionMonitoringSupported()&lt;/code&gt; &lt;/a&gt; 메소드는 자바 가상 머신 지원 스레드 경합 모니터링 여부를 결정하기 위해 사용될 수있다. 스레드 경합 모니터링은 기본적으로 사용되지 않습니다. &lt;a href=&quot;threadmxbean#setThreadContentionMonitoringEnabled-boolean-&quot;&gt; &lt;code&gt;setThreadContentionMonitoringEnabled(boolean)&lt;/code&gt; &lt;/a&gt; 방법 스레드 경합 모니터링을 활성화하기 위해 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="ed0642ec4c21f239693011a0d808e0a9a5551dee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;threadmxbean#isThreadCpuTimeSupported--&quot;&gt;&lt;code&gt;isThreadCpuTimeSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if a Java virtual machine supports measuring of the CPU time for any thread. The &lt;a href=&quot;threadmxbean#isCurrentThreadCpuTimeSupported--&quot;&gt;&lt;code&gt;isCurrentThreadCpuTimeSupported()&lt;/code&gt;&lt;/a&gt; method can be used to determine if a Java virtual machine supports measuring of the CPU time for the current thread. A Java virtual machine implementation that supports CPU time measurement for any thread will also support that for the current thread.</source>
          <target state="translated">&lt;a href=&quot;threadmxbean#isThreadCpuTimeSupported--&quot;&gt; &lt;code&gt;isThreadCpuTimeSupported()&lt;/code&gt; &lt;/a&gt; 메소드는 자바 가상 머신이 지원하는 모든 스레드에 대해 CPU 시간을 측정하는 경우를 결정하기 위해 사용될 수있다. &lt;a href=&quot;threadmxbean#isCurrentThreadCpuTimeSupported--&quot;&gt; &lt;code&gt;isCurrentThreadCpuTimeSupported()&lt;/code&gt; &lt;/a&gt; 메소드는 자바 가상 머신 지원은 현재 스레드에 대해 CPU 시간을 측정하는 경우를 결정하기 위해 사용될 수있다. 모든 스레드의 CPU 시간 측정을 지원하는 Java 가상 머신 구현은 현재 스레드의 CPU 시간 측정도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="126515b65a295f042897ee7ca24299c10de24ac2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;throwable#fillInStackTrace--&quot;&gt;&lt;code&gt;fillInStackTrace()&lt;/code&gt;&lt;/a&gt; method is called to initialize the stack trace data in the newly created throwable.</source>
          <target state="translated">&lt;a href=&quot;throwable#fillInStackTrace--&quot;&gt; &lt;code&gt;fillInStackTrace()&lt;/code&gt; &lt;/a&gt; 메소드는 새롭게 생성 던질에서 스택 트레이스 데이터를 초기화한다.</target>
        </trans-unit>
        <trans-unit id="f545a31d332fd214f9259a9d88e64957c2997f77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;timeunit&quot;&gt;&lt;code&gt;TimeUnit&lt;/code&gt;&lt;/a&gt; class provides multiple granularities (including nanoseconds) for specifying and controlling time-out based operations. Most classes in the package contain operations based on time-outs in addition to indefinite waits. In all cases that time-outs are used, the time-out specifies the minimum time that the method should wait before indicating that it timed-out. Implementations make a &quot;best effort&quot; to detect time-outs as soon as possible after they occur. However, an indefinite amount of time may elapse between a time-out being detected and a thread actually executing again after that time-out. All methods that accept timeout parameters treat values less than or equal to zero to mean not to wait at all. To wait &quot;forever&quot;, you can use a value of &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;timeunit&quot;&gt; &lt;code&gt;TimeUnit&lt;/code&gt; 와의&lt;/a&gt; 클래스 지정 및 타임 아웃을 기반으로 동작을 제어 (나노초 포함한) 여러 입도를 제공한다. 패키지의 대부분의 클래스에는 무한 대기 외에 시간 종료를 기반으로하는 조작이 포함됩니다. 제한 시간이 사용되는 모든 경우에 제한 시간은 메소드가 제한 시간을 표시하기 전에 대기해야하는 최소 시간을 지정합니다. 구현은 시간 초과가 발생한 후 가능한 빨리 감지하기 위해 &quot;최선의 노력&quot;을합니다. 그러나 시간 종료가 감지되고 해당 시간 종료 후 실제로 다시 실행되는 스레드 사이에 무한한 시간이 경과 할 수 있습니다. 시간 종료 매개 변수를 허용하는 모든 메소드는 전혀 기다리지 않기 위해 0보다 작거나 같은 값을 처리합니다. &quot;영원히&quot;대기하기 위해 &lt;code&gt;Long.MAX_VALUE&lt;/code&gt; 값을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b0e3a5fd66bb193d4396df91f7f330610d51100" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#URI-java.lang.String-&quot;&gt;single-argument constructor&lt;/a&gt; requires any illegal characters in its argument to be quoted and preserves any escaped octets and</source>
          <target state="translated">&lt;a href=&quot;uri#URI-java.lang.String-&quot;&gt;단일 인수 생성자가&lt;/a&gt; 인용 될 인수에 불법 문자를 필요로하고 탈출 옥텟을 보존하고</target>
        </trans-unit>
        <trans-unit id="96d3a6675116e768726d899ee3f398538f8d3f5e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#URI-java.lang.String-java.lang.String-java.lang.String-int-java.lang.String-java.lang.String-java.lang.String-&quot;&gt;multi-argument constructors&lt;/a&gt; quote illegal characters as required by the components in which they appear. The percent character (&lt;code&gt;'%'&lt;/code&gt;) is always quoted by these constructors. Any</source>
          <target state="translated">&lt;a href=&quot;uri#URI-java.lang.String-java.lang.String-java.lang.String-int-java.lang.String-java.lang.String-java.lang.String-&quot;&gt;멀티 인수 생성자&lt;/a&gt; 가 표시되는 구성 요소에 필요한 불법 문자를 인용. 백분율 문자 ( &lt;code&gt;'%'&lt;/code&gt; )는 항상 이러한 생성자가 인용합니다. 어떤</target>
        </trans-unit>
        <trans-unit id="a5b18837b67d6da8cf5f631b9ddf3619afc39652" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#getRawUserInfo--&quot;&gt;&lt;code&gt;getRawUserInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawPath--&quot;&gt;&lt;code&gt;getRawPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawQuery--&quot;&gt;&lt;code&gt;getRawQuery&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawFragment--&quot;&gt;&lt;code&gt;getRawFragment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getRawAuthority--&quot;&gt;&lt;code&gt;getRawAuthority&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;uri#getRawSchemeSpecificPart--&quot;&gt;&lt;code&gt;getRawSchemeSpecificPart&lt;/code&gt;&lt;/a&gt; methods return the values of their corresponding components in raw form, without interpreting any escaped octets. The strings returned by these methods may contain both escaped octets and</source>
          <target state="translated">&lt;a href=&quot;uri#getRawUserInfo--&quot;&gt; &lt;code&gt;getRawUserInfo&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getRawPath--&quot;&gt; &lt;code&gt;getRawPath&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getRawQuery--&quot;&gt; &lt;code&gt;getRawQuery&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getRawFragment--&quot;&gt; &lt;code&gt;getRawFragment&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getRawAuthority--&quot;&gt; &lt;code&gt;getRawAuthority&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;uri#getRawSchemeSpecificPart--&quot;&gt; &lt;code&gt;getRawSchemeSpecificPart&lt;/code&gt; 의&lt;/a&gt; 방법은 모든 탈출 옥텟을 해석하지 않고 원시 형태에서의 대응 구성 요소의 값을 반환한다. 이 메소드에 의해 리턴 된 문자열은 이스케이프 된 옥텟과</target>
        </trans-unit>
        <trans-unit id="c86bed47bbda7f711ebae1c96c0ca26487893480" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#getUserInfo--&quot;&gt;&lt;code&gt;getUserInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getPath--&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getQuery--&quot;&gt;&lt;code&gt;getQuery&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getFragment--&quot;&gt;&lt;code&gt;getFragment&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;uri#getAuthority--&quot;&gt;&lt;code&gt;getAuthority&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;uri#getSchemeSpecificPart--&quot;&gt;&lt;code&gt;getSchemeSpecificPart&lt;/code&gt;&lt;/a&gt; methods decode any escaped octets in their corresponding components. The strings returned by these methods may contain both</source>
          <target state="translated">&lt;a href=&quot;uri#getUserInfo--&quot;&gt; &lt;code&gt;getUserInfo&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getPath--&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getQuery--&quot;&gt; &lt;code&gt;getQuery&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getFragment--&quot;&gt; &lt;code&gt;getFragment&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;uri#getAuthority--&quot;&gt; &lt;code&gt;getAuthority&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;uri#getSchemeSpecificPart--&quot;&gt; &lt;code&gt;getSchemeSpecificPart&lt;/code&gt; 의&lt;/a&gt; 방법은 대응하는 부품에있는 이스케이프 옥텟을 디코딩. 이 메소드에 의해 리턴 된 문자열은 둘 다를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05633b3838426efa3462c8db4d61636d5eac4d0e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#toASCIIString--&quot;&gt;&lt;code&gt;toASCIIString&lt;/code&gt;&lt;/a&gt; method returns a fully quoted and encoded URI string that does not contain any</source>
          <target state="translated">&lt;a href=&quot;uri#toASCIIString--&quot;&gt; &lt;code&gt;toASCIIString&lt;/code&gt; 의&lt;/a&gt; 방법은 포함되지 않은 완전히 인용 인코딩 된 URI 문자열을 반환</target>
        </trans-unit>
        <trans-unit id="f7da3d6193bb224a3c925ce28355ba647aa44c83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;uri#toString--&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method returns a URI string with all necessary quotation but which may contain</source>
          <target state="translated">&lt;a href=&quot;uri#toString--&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt; 메소드는 모든 필요한 인용와 URI 문자열을 반환하지만 어느를 포함 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="483ec9540b5f90a13d5603b20efcda8d93a44c03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;urlencoder&quot;&gt;&lt;code&gt;URLEncoder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;urldecoder&quot;&gt;&lt;code&gt;URLDecoder&lt;/code&gt;&lt;/a&gt; classes can also be used, but only for HTML form encoding, which is not the same as the encoding scheme defined in RFC2396.</source>
          <target state="translated">&lt;a href=&quot;urlencoder&quot;&gt; &lt;code&gt;URLEncoder&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;urldecoder&quot;&gt; &lt;code&gt;URLDecoder&lt;/code&gt; &lt;/a&gt; 클래스도 있지만 RFC2396에 정의 된 인코딩 방식과 동일하지 않습니다 HTML 양식 인코딩에 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="71f571d649e61ad2b45c6192eeeb015dbbe1495a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;userprincipal&quot;&gt;&lt;code&gt;UserPrincipal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;groupprincipal&quot;&gt;&lt;code&gt;GroupPrincipal&lt;/code&gt;&lt;/a&gt; interfaces represent an identity or group identity.</source>
          <target state="translated">&lt;a href=&quot;userprincipal&quot;&gt; &lt;code&gt;UserPrincipal&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;groupprincipal&quot;&gt; &lt;code&gt;GroupPrincipal&lt;/code&gt; &lt;/a&gt; 인터페이스 식별자 또는 그룹 ID를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="86bc860478e690457692e5c83357667c82fd5795" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt; interface defines methods to lookup user or group principals.</source>
          <target state="translated">&lt;a href=&quot;userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt; 정의 방식 인터페이스는 사용자 또는 그룹에 사용자를 조회한다.</target>
        </trans-unit>
        <trans-unit id="ef147a7a54d7b0102550cbd209ac533ffc64556d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;watchevent#context--&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; for these events is the relative path between the directory located by this path, and the path that locates the directory entry that is created, deleted, or modified.</source>
          <target state="translated">이러한 이벤트 의 &lt;a href=&quot;watchevent#context--&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt; 는이 경로로 위치한 디렉토리와 작성, 삭제 또는 수정 된 디렉토리 항목을 찾는 경로 사이의 상대 경로입니다.</target>
        </trans-unit>
        <trans-unit id="bee2859efc1d0c9a918dc390dc05a7a666d1a2e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;watchevent#context--&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; for this event is implementation specific and may be &lt;code&gt;null&lt;/code&gt;. The event &lt;a href=&quot;watchevent#count--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; may be greater than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">이 이벤트 의 &lt;a href=&quot;watchevent#context--&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt; 은 구현 고유의 것으로 &lt;code&gt;null&lt;/code&gt; 일 가능성이 있습니다 . 이벤트 &lt;a href=&quot;watchevent#count--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;1&lt;/code&gt; 보다 클 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d7c6261bea4e77bf60d69292cc3f4a55c729b9b2" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;default-delimiter&quot;&gt;default whitespace delimiter&lt;/a&gt; used by a scanner is as recognized by &lt;a href=&quot;../lang/character&quot;&gt;&lt;code&gt;Character&lt;/code&gt;&lt;/a&gt;.&lt;a href=&quot;../lang/character#isWhitespace-char-&quot;&gt;&lt;code&gt;isWhitespace&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;scanner#reset--&quot;&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/a&gt; method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed.</source>
          <target state="translated">&lt;a name=&quot;default-delimiter&quot;&gt;기본 공백 구분 기호&lt;/a&gt; 스캐너에 의해 사용되는로 인식 &lt;a href=&quot;../lang/character&quot;&gt; &lt;code&gt;Character&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;../lang/character#isWhitespace-char-&quot;&gt; &lt;code&gt;isWhitespace&lt;/code&gt; &lt;/a&gt; 입니다. &lt;a href=&quot;scanner#reset--&quot;&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;/a&gt; 메소드는 관계없이 이전에 변경되었는지 여부의 기본 공백 구분 기호 스캐너의 구분의 값을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="cdf992b6452b5c0645142b8150d07e858f599985" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;floatDWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to be written to the output. This includes any signs, digits, grouping separators, decimal separators, exponential symbol, radix indicator, parentheses, and strings representing infinity and NaN as applicable. If the length of the converted value is less than the width then the output will be padded by spaces (&lt;code&gt;'\u0020'&lt;/code&gt;) until the total number of characters equals width. The padding is on the left by default. If the &lt;code&gt;'-'&lt;/code&gt; flag is given then the padding will be on the right. If width is not specified then there is no minimum.</source>
          <target state="translated">&lt;a name=&quot;floatDWidth&quot;&gt;폭은&lt;/a&gt; 최소 문자 수는 출력에 기록 될 것입니다. 여기에는 모든 부호, 숫자, 그룹화 구분 기호, 소수 구분 기호, 지수 기호, 기수 표시기, 괄호 및 해당하는 경우 무한대 및 NaN을 나타내는 문자열이 포함됩니다. 변환 된 값의 길이가 너비보다 작 으면 총 문자 수가 너비와 같아 질 때까지 공백 ( &lt;code&gt;'\u0020'&lt;/code&gt; )으로 출력이 채워집니다 . 패딩은 기본적으로 왼쪽에 있습니다. 경우 &lt;code&gt;'-'&lt;/code&gt; 플래그가 지정되었을 경우, 우측으로 패딩됩니다. 너비를 지정하지 않으면 최소값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="8a0cfd7eb208b940d0fafb3de1697cf536161c15" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;genWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to be written to the output. If the length of the converted value is less than the width then the output will be padded by &lt;code&gt;' '&lt;/code&gt; (&lt;code&gt;'\u0020'&lt;/code&gt;) until the total number of characters equals the width. The padding is on the left by default. If the &lt;code&gt;'-'&lt;/code&gt; flag is given, then the padding will be on the right. If the width is not specified then there is no minimum.</source>
          <target state="translated">&lt;a name=&quot;genWidth&quot;&gt;폭은&lt;/a&gt; 최소 문자 수는 출력에 기록 될 것입니다. 변환 된 값의 길이가 너비보다 작 으면 총 문자 수가 너비와 같아 질 때까지 출력에 &lt;code&gt;' '&lt;/code&gt; ( &lt;code&gt;'\u0020'&lt;/code&gt; ) 이 채워집니다 . 패딩은 기본적으로 왼쪽에 있습니다. 경우 &lt;code&gt;'-'&lt;/code&gt; 플래그가 지정되고있는 경우, 우측으로 패딩됩니다. 너비를 지정하지 않으면 최소값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="8fa9d205d462a4bfb3a26d4bc78316084693aa53" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;intWidth&quot;&gt;width&lt;/a&gt; is the minimum number of characters to be written to the output. This includes any signs, digits, grouping separators, radix indicator, and parentheses. If the length of the converted value is less than the width then the output will be padded by spaces (&lt;code&gt;'\u0020'&lt;/code&gt;) until the total number of characters equals width. The padding is on the left by default. If &lt;code&gt;'-'&lt;/code&gt; flag is given then the padding will be on the right. If width is not specified then there is no minimum.</source>
          <target state="translated">&lt;a name=&quot;intWidth&quot;&gt;폭은&lt;/a&gt; 최소 문자 수는 출력에 기록 될 것입니다. 여기에는 모든 부호, 숫자, 그룹화 구분 기호, 기수 표시기 및 괄호가 포함됩니다. 변환 된 값의 길이가 너비보다 작 으면 총 문자 수가 너비와 같아 질 때까지 출력이 공백 ( &lt;code&gt;'\u0020'&lt;/code&gt; ) 으로 채워집니다 . 패딩은 기본적으로 왼쪽에 있습니다. 경우 &lt;code&gt;'-'&lt;/code&gt; 플래그가 지정되었을 경우, 우측으로 패딩됩니다. 너비를 지정하지 않으면 최소값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="3e560a63da168303203b2b0de0e18b952b740b0d" translate="yes" xml:space="preserve">
          <source>The &lt;a name=&quot;mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt; argument specifies the access mode in which the file is to be opened. The permitted values and their meanings are:</source>
          <target state="translated">&lt;a name=&quot;mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; &lt;/a&gt; 인수는 파일을 열 수 인 액세스 모드를 지정합니다. 허용되는 값과 의미는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d70755c800c2b720f9b2a4d9f93470f170f35163" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;all-at-once&lt;/b&gt; pattern: Get the doc from the current multidoc, and save the doc in a list. Get the next multidoc from the current multidoc, and repeat until there are no more. Then iterate over the list of saved docs. Get the print data representation object from the current doc. Get all the print data from the print data representation object. Go to the next doc in the list, and repeat until there are no more.</source>
          <target state="translated">는 &lt;b&gt;한꺼번에&lt;/b&gt; 패턴 : 현행의 multidoc로부터 doc를 취득 해리스트에 문서를 저장합니다. 현재 다중 문서에서 다음 다중 문서를 가져와 더 이상 없을 때까지 반복하십시오. 그런 다음 저장된 문서 목록을 반복합니다. 현재 문서에서 인쇄 데이터 표현 객체를 가져옵니다. 인쇄 데이터 표현 개체에서 모든 인쇄 데이터를 가져옵니다. 목록에서 다음 문서로 이동하여 더 이상 없을 때까지 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="14f6267fa804e0d76a0763676c42485e1a9ce366" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;interleaved&lt;/b&gt; pattern: Get the doc from the current multidoc. Get the print data representation object from the current doc. Get all the print data from the print data representation object. Get the next multidoc from the current multidoc, and repeat until there are no more. (The code example above uses the interleaved pattern.)</source>
          <target state="translated">&lt;b&gt;인터리브&lt;/b&gt; 패턴 : 현행의 multidoc로부터 doc를 취득한다. 현재 문서에서 인쇄 데이터 표현 개체를 가져옵니다. 인쇄 데이터 표현 개체에서 모든 인쇄 데이터를 가져옵니다. 현재 다중 문서에서 다음 다중 문서를 가져와 더 이상 없을 때까지 반복하십시오. 위 코드 예제는 인터리브 패턴을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="80231fb01cbd9eea6cac573462b78797a00356f7" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;javax.management.builder.initial&lt;/b&gt; system property is consulted every time a new MBeanServer needs to be created, and the class pointed to by that property is loaded. If that class is different from that of the current MBeanServerBuilder, then a new MBeanServerBuilder is created. Otherwise, the MBeanServerFactory may create a new MBeanServerBuilder or reuse the current one.</source>
          <target state="translated">&lt;b&gt;javax.management.builder.initial의&lt;/b&gt; 시스템 프로퍼티는 새로운 MBeanServer를 작성해야 할 때마다 상담을하고, 해당 속성에 의해 지정된 클래스가로드됩니다. 해당 클래스가 현재 MBeanServerBuilder의 클래스와 다른 경우 새 MBeanServerBuilder가 작성됩니다. 그렇지 않으면, MBeanServerFactory는 새로운 MBeanServerBuilder를 작성하거나 현재 MBeanServerBuilder를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="133b14a15ab9a0721c864334bb5dcba8749ddb42" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-1935722590756516193L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-1935722590756516193L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="622f4eec33d97ed2e8edad4e862e2ca5e8fc31cb" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-279985518429862552L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-279985518429862552L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="59d67311624b4fef95e26ff51e0a9c6b2312c3c6" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-48350262537070138L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-48350262537070138L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ab26041362e68fa2964d28d4745de355c08d29de" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-6292969195866300415L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-6292969195866300415L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8f922ee070b5cc5ace54d4a0b9d3f07682e92469" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-6304063118040985512L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-6304063118040985512L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="93f104d7169f5ba748ac71dc420f8f2b3490fac9" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-6871117877523310399L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-6871117877523310399L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5c85e9f3228eea1cfaf1477d918140c111a3aa28" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-7445681389570207141L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-7445681389570207141L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ffe47f8e6b033a46b369815e41c457527afba987" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-7516092053498031989L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;-7516092053498031989L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6e41f3c2dd2562ef1b180a361f4b55bf634bff02" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;1081892073854801359L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;1081892073854801359L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1ca4312b85a226720a17b2d5c731f010931d260d" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;1190536278266811217L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;1190536278266811217L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="072aec20483bdd007929c428e915e721c5ac25ae" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;2504952983494636987L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;2504952983494636987L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="836dfd3926b378790fd6604b2d4b322a25a61a21" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;2605900539589789736L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;2605900539589789736L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5105ab01988b46bcdb2ad68ccb972b352bbbf14f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;3176664577895105181L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;3176664577895105181L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="63b961dbc4cf57cb42fe0df92a55437c8ee74ba1" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;3862947819818064362L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;3862947819818064362L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="194f95466a78a370966f9e904fcacd1a20dcddc8" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;4611072955724144607L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;4611072955724144607L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5f6ceca5a91a116ea11f104aaac88adefc6f654d" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;6181543027787327345L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;6181543027787327345L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5ab50df0639c6c2a445f4eb42deaf59f57cd4cea" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;6532732096650090465L&lt;/code&gt;.</source>
          <target state="translated">이 클래스 의 &lt;b&gt;serialVersionUID&lt;/b&gt; 는 &lt;code&gt;6532732096650090465L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cf7d7ffcce3e481d53bebd9cf2aa7b4afe92bff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt; TooManyListenersException &lt;/code&gt; Exception is used as part of the Java Event model to annotate and implement a unicast special case of a multicast Event Source.</source>
          <target state="translated">&lt;code&gt; TooManyListenersException &lt;/code&gt; 예외 주석 Java 이벤트 모델의 일부로서 사용되는 멀티 캐스트의 이벤트 소스를 유니 캐스트 특별한 경우를 구현한다.</target>
        </trans-unit>
        <trans-unit id="140c233f5b711ea49784f7bc7d8f708ede025961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; mode can be used to reduce the number of I/O operations performed. Using &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; only requires updates to the file's content to be written to storage; using &lt;code&gt;&quot;rws&quot;&lt;/code&gt; requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation.</source>
          <target state="translated">&lt;code&gt;&quot;rwd&quot;&lt;/code&gt; 모드 I의 수를 줄일 수 있습니다 / O 작업을 수행. &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; 를 사용 하려면 파일 내용에 대한 업데이트 만 저장 장치에 기록해야합니다. 사용 &lt;code&gt;&quot;rws&quot;&lt;/code&gt; 일반적으로 적어도 하나의 더 낮은 수준의 I / O 작업을 요구하는 기록 할 파일의 모두 컨텐츠와 메타 데이터에 대한 업데이트가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="0cfa334fcd18f47df7a744728a735885661d2393" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;rws&quot;&lt;/code&gt; and &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; modes work much like the &lt;a href=&quot;../nio/channels/filechannel#force-boolean-&quot;&gt;&lt;code&gt;force(boolean)&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;../nio/channels/filechannel&quot;&gt;&lt;code&gt;FileChannel&lt;/code&gt;&lt;/a&gt; class, passing arguments of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, respectively, except that they always apply to every I/O operation and are therefore often more efficient. If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made.</source>
          <target state="translated">&lt;code&gt;&quot;rws&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;rwd&quot;&lt;/code&gt; 모드는 많은처럼 작동 &lt;a href=&quot;../nio/channels/filechannel#force-boolean-&quot;&gt; &lt;code&gt;force(boolean)&lt;/code&gt; &lt;/a&gt; 의 방법 &lt;a href=&quot;../nio/channels/filechannel&quot;&gt; &lt;code&gt;FileChannel&lt;/code&gt; &lt;/a&gt; 의 인수를 전달, 클래스 &lt;code&gt;true&lt;/code&gt; 과 &lt;code&gt;false&lt;/code&gt; 그들은 항상 모든 I / O 작업에 적용하는 것을 제외하고, 각각 종종 있으므로 더 효율적입니다. 파일이 로컬 스토리지 장치에 상주하는 경우이 클래스의 메소드 호출이 리턴 될 때 해당 호출에 의해 파일에 대한 모든 변경 사항이 해당 장치에 기록되었음을 보장합니다. 시스템 충돌시 중요한 정보가 손실되지 않도록하는 데 유용합니다. 파일이 로컬 장치에 없으면 그러한 보증이 이루어지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5aac2f6058d827131417bfcfef8dc2eb4bdbda46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; relation does not provide a total order on all double values: &lt;code&gt;-0.0d == 0.0d&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and a &lt;code&gt;Double.NaN&lt;/code&gt; value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method &lt;a href=&quot;../lang/double#compareTo-java.lang.Double-&quot;&gt;&lt;code&gt;Double.compareTo(java.lang.Double)&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;-0.0d&lt;/code&gt; is treated as less than value &lt;code&gt;0.0d&lt;/code&gt; and &lt;code&gt;Double.NaN&lt;/code&gt; is considered greater than any other value and all &lt;code&gt;Double.NaN&lt;/code&gt; values are considered equal.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 관계는 모든 두 값 전체 순서를 제공하지 않는다 : &lt;code&gt;-0.0d == 0.0d&lt;/code&gt; 인 &lt;code&gt;true&lt;/code&gt; 과 &lt;code&gt;Double.NaN&lt;/code&gt; 의 용 심지어 자체 값보다 큰,보다 적은 비교하지도 없으며 임의의 값과 동일. 이 메소드는 &lt;a href=&quot;../lang/double#compareTo-java.lang.Double-&quot;&gt; &lt;code&gt;Double.compareTo(java.lang.Double)&lt;/code&gt; &lt;/a&gt; 메소드에 의해 부과 된 총 순서를 사용합니다 . &lt;code&gt;-0.0d&lt;/code&gt; 는 0.0d 보다 작은 값으로 &lt;code&gt;0.0d&lt;/code&gt; 되고 &lt;code&gt;Double.NaN&lt;/code&gt; 은 다른 값보다 큰 것으로 간주되며 모든 &lt;code&gt;Double.NaN&lt;/code&gt; 값은 동등한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="6758eacaf6eafc7546dec5d6a98b3ed7630fdb8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; relation does not provide a total order on all float values: &lt;code&gt;-0.0f == 0.0f&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and a &lt;code&gt;Float.NaN&lt;/code&gt; value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method &lt;a href=&quot;../lang/float#compareTo-java.lang.Float-&quot;&gt;&lt;code&gt;Float.compareTo(java.lang.Float)&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;-0.0f&lt;/code&gt; is treated as less than value &lt;code&gt;0.0f&lt;/code&gt; and &lt;code&gt;Float.NaN&lt;/code&gt; is considered greater than any other value and all &lt;code&gt;Float.NaN&lt;/code&gt; values are considered equal.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; 관계 모든 플로트 값 전체 순서를 제공하지 않는다 : &lt;code&gt;-0.0f == 0.0f&lt;/code&gt; 인 &lt;code&gt;true&lt;/code&gt; 과 &lt;code&gt;Float.NaN&lt;/code&gt; 도 자체 값보다 큰,보다 적은 비교하지도 없으며 임의의 값과 동일. 이 메소드는 &lt;a href=&quot;../lang/float#compareTo-java.lang.Float-&quot;&gt; &lt;code&gt;Float.compareTo(java.lang.Float)&lt;/code&gt; &lt;/a&gt; 메소드에 의해 부과 된 총 순서를 사용합니다 . &lt;code&gt;-0.0f&lt;/code&gt; 는 &lt;code&gt;0.0f&lt;/code&gt; 보다 작은 값으로 처리 되고 &lt;code&gt;Float.NaN&lt;/code&gt; 은 다른 값보다 큰 것으로 간주되며 모든 &lt;code&gt;Float.NaN&lt;/code&gt; 값은 동등한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="566defc53a29dd2c6f74968329502b0e504d1e15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'-'&lt;/code&gt; flag defined for &lt;a href=&quot;#dFlags&quot;&gt;General conversions&lt;/a&gt; applies. If any other flags are provided, then a &lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt;&lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;'-'&lt;/code&gt; 에 대해 정의 플래그 &lt;a href=&quot;#dFlags&quot;&gt;일반 변환이&lt;/a&gt; 적용됩니다. 다른 플래그가 제공되면 &lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt; &lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt; &lt;/a&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea48ab5aaeaf4194edab0eb91c4845bbde6ed392" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'-'&lt;/code&gt; flag defined for &lt;a href=&quot;#dFlags&quot;&gt;General conversions&lt;/a&gt; applies. If the &lt;code&gt;'#'&lt;/code&gt; flag is given, then a &lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt;&lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;'-'&lt;/code&gt; 에 대해 정의 플래그 &lt;a href=&quot;#dFlags&quot;&gt;일반 변환이&lt;/a&gt; 적용됩니다. 경우 &lt;code&gt;'#'&lt;/code&gt; 플래그가 지정되고, 다음 &lt;a href=&quot;formatflagsconversionmismatchexception&quot;&gt; &lt;code&gt;FormatFlagsConversionMismatchException&lt;/code&gt; 가&lt;/a&gt; 슬로우됩니다.</target>
        </trans-unit>
        <trans-unit id="803c87810da3137c31c3b9569aa0cdd88a5236f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**&lt;/code&gt; characters matches zero or more &lt;a href=&quot;../../lang/character&quot;&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/a&gt; crossing directory boundaries.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; 문자는 0 개 이상 일치하는 &lt;a href=&quot;../../lang/character&quot;&gt; &lt;code&gt;characters&lt;/code&gt; &lt;/a&gt; 디렉토리 경계를 교차합니다.</target>
        </trans-unit>
        <trans-unit id="bdc9ec98d6c3e53fb7a51d01e995f914de002527" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; character matches zero or more &lt;a href=&quot;../../lang/character&quot;&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;path#getName-int-&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; component without crossing directory boundaries.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 문자는 0 개 이상의 일치 &lt;a href=&quot;../../lang/character&quot;&gt; &lt;code&gt;characters&lt;/code&gt; &lt;/a&gt; (A)의 &lt;a href=&quot;path#getName-int-&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 디렉토리 경계를 횡단하지 않고 구성 요소를.</target>
        </trans-unit>
        <trans-unit id="56b1e692364ff3d0377ffb97e33a6452576a382f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;audiosystem&quot;&gt;&lt;code&gt;AudioSystem&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; class includes methods for determining the format of an audio file, obtaining an audio input stream from an audio file, and writing an audio file from an audio input stream.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;audiosystem&quot;&gt;&lt;code&gt;AudioSystem&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 클래스는 오디오 파일의 포맷을 결정하는 단계, 오디오 파일의 오디오 입력 스트림을 획득하고, 오디오 입력 스트림에서 오디오 파일을 기록하기위한 방법을 포함한다.</target>
        </trans-unit>
        <trans-unit id="bb56cab0d387af77b98e49727a7446f08b61aa9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;system#exit-int-&quot;&gt;&lt;code&gt;System.exit&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method is the conventional and convenient means of invoking this method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system#exit-int-&quot;&gt;&lt;code&gt;System.exit&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 와의 메소드이 메소드를 호출하는 종래의 편리한 수단이다.</target>
        </trans-unit>
        <trans-unit id="b7e40741bd63e3e4d4e34f6ccfaaa185c2f108df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;ArbitraryText&lt;/em&gt;&lt;/code&gt; is any additional text that the connector server adds when creating the client id. At a minimum, it must be enough to distinguish this connection ID from the ID of any other connection currently opened by this connector server.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ArbitraryText&lt;/em&gt;&lt;/code&gt; 는 클라이언트 ID를 만들 때 커넥터 서버가 추가되는 임의의 추가 텍스트입니다. 최소한이 연결 ID를이 커넥터 서버가 현재 열려있는 다른 연결의 ID와 구별하기에 충분해야합니다.</target>
        </trans-unit>
        <trans-unit id="57252451ad18df2276d94648faafb4c4918a4f22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;ClientAddress&lt;/em&gt;&lt;/code&gt; is the address and port of the connecting client, if these can be determined, otherwise nothing. The &lt;code&gt;&lt;em&gt;HostAddress&lt;/em&gt;&lt;/code&gt; is the Internet address of the host that the client is connecting from, in numeric or DNS form. Numeric IPv6 addresses are enclosed in square brackets &lt;code&gt;[]&lt;/code&gt;. The &lt;code&gt;&lt;em&gt;HostPort&lt;/em&gt;&lt;/code&gt; is the decimal port number that the client is connecting from.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ClientAddress&lt;/em&gt;&lt;/code&gt; 는 이러한 결정 할 수있는 경우 그렇지 않으면, 아무것도 접속 클라이언트의 주소 및 포트입니다. &lt;code&gt;&lt;em&gt;HostAddress&lt;/em&gt;&lt;/code&gt; 클라이언트가 숫자 또는 DNS 형태에서 연결되는 호스트의 인터넷 주소입니다. 숫자 IPv6 주소는 대괄호로 묶습니다 &lt;code&gt;[]&lt;/code&gt; . &lt;code&gt;&lt;em&gt;HostPort&lt;/em&gt;&lt;/code&gt; 는 클라이언트에서 연결되는 소수의 포트 번호입니다.</target>
        </trans-unit>
        <trans-unit id="531c08ac15a131c27029679adeb81cf5ad5bec7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;ClientId&lt;/em&gt;&lt;/code&gt; is the identity of the client entity, typically a string returned by &lt;a href=&quot;jmxprincipal#getName--&quot;&gt;&lt;code&gt;JMXPrincipal.getName()&lt;/code&gt;&lt;/a&gt;. This string must not contain spaces.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ClientId&lt;/em&gt;&lt;/code&gt; 일반적으로 클라이언트 엔티티의 신원에 의해 반환 된 문자열 &lt;a href=&quot;jmxprincipal#getName--&quot;&gt; &lt;code&gt;JMXPrincipal.getName()&lt;/code&gt; &lt;/a&gt; . 이 문자열에는 공백이 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="e5ea1882020edd1476b0a71f1c9d73fd0f805d1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;Protocol&lt;/em&gt;&lt;/code&gt; is a protocol that would be recognized by &lt;a href=&quot;jmxconnectorfactory&quot;&gt;&lt;code&gt;JMXConnectorFactory&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;Protocol&lt;/em&gt;&lt;/code&gt; 에 의해 인식 될 수있는 프로토콜입니다 &lt;a href=&quot;jmxconnectorfactory&quot;&gt; &lt;code&gt;JMXConnectorFactory&lt;/code&gt; 에&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b824fdb77864355409db5ed994fa82e5b5e6ca93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; can be omitted. The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; cannot be supplied without a &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 생략 될 수있다. &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 없이 제공 할 수없는 &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a12722721e439b6dff600477a13341187efa0475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; in a user-provided &lt;code&gt;serviceURL&lt;/code&gt; is optional. If present, it is copied into the generated &lt;code&gt;JMXServiceURL&lt;/code&gt; but otherwise ignored. If absent, the generated &lt;code&gt;JXMServiceURL&lt;/code&gt; will have the local host name.</source>
          <target state="translated">사용자 제공 &lt;code&gt;serviceURL&lt;/code&gt; 의 &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; 는 선택 사항입니다. 존재하는 경우 생성 된 &lt;code&gt;JMXServiceURL&lt;/code&gt; 에 복사 되지만 그렇지 않으면 무시됩니다. 없는 경우 생성 된 &lt;code&gt;JXMServiceURL&lt;/code&gt; 은 로컬 호스트 이름을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="bfa23af48503c6623afb1ad1711fefdb1632d2c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; is a host name, an IPv4 numeric host address, or an IPv6 numeric address enclosed in square brackets.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; 호스트 명, IPv4 수치 호스트 주소, IPv6 수치 주소입니다.</target>
        </trans-unit>
        <trans-unit id="2b0d7cc7b25ad83d3037b4dc212df848a1f89cd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; part of the returned string is the value returned by &lt;a href=&quot;jmxserviceurl#getHost--&quot;&gt;&lt;code&gt;getHost()&lt;/code&gt;&lt;/a&gt;. If that value specifies a numeric IPv6 address, it is surrounded by square brackets &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">리턴 된 문자열 의 &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; 부분은 &lt;a href=&quot;jmxserviceurl#getHost--&quot;&gt; &lt;code&gt;getHost()&lt;/code&gt; &lt;/a&gt; 리턴 한 값 입니다. 해당 값이 숫자 IPv6 주소를 지정하면 대괄호 &lt;code&gt;[]&lt;/code&gt; 로 묶습니다 .</target>
        </trans-unit>
        <trans-unit id="55c0575a0a5f3a8a03451fbe7153260d3ab2702e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; in a user-provided &lt;code&gt;serviceURL&lt;/code&gt; is also optional. If present, it is also copied into the generated &lt;code&gt;JMXServiceURL&lt;/code&gt;; otherwise, the generated &lt;code&gt;JMXServiceURL&lt;/code&gt; has no port. For an &lt;code&gt;serviceURL&lt;/code&gt; using the &lt;code&gt;rmi&lt;/code&gt; protocol, the &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt;, if present, indicates what port the generated remote object should be exported on. It has no other effect.</source>
          <target state="translated">사용자 제공 &lt;code&gt;serviceURL&lt;/code&gt; 의 &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 도 선택 사항입니다. 존재하는 경우 생성 된 &lt;code&gt;JMXServiceURL&lt;/code&gt; 에도 복사됩니다 . 그렇지 않으면 생성 된 &lt;code&gt;JMXServiceURL&lt;/code&gt; 에 포트가 없습니다. 내용 &lt;code&gt;serviceURL&lt;/code&gt; 은 USING &lt;code&gt;rmi&lt;/code&gt; 프로토콜의 &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 있을 경우, 상기 생성 된 원격 개체 export되는 포트를 나타냅니다. 다른 효과는 없습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f0c8f3bfcebe38f9f7e404fcfe049e036b34bcb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; is a decimal port number. 0 means a default or anonymous port, depending on the protocol.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 소수의 포트 번호입니다. 0은 프로토콜에 따라 기본 또는 익명 포트를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="aed5089fcc06d0b24df1a0c3d314b9e78f48e5cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; part of the returned string is the value returned by &lt;a href=&quot;jmxserviceurl#getPort--&quot;&gt;&lt;code&gt;getPort()&lt;/code&gt;&lt;/a&gt; in its shortest decimal form. If the value is zero, it is omitted.</source>
          <target state="translated">리턴 된 문자열 의 &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; 부분은 &lt;a href=&quot;jmxserviceurl#getPort--&quot;&gt; &lt;code&gt;getPort()&lt;/code&gt; &lt;/a&gt; 에 의해 가장 짧은 10 진수 형식으로 리턴 된 값 입니다. 값이 0이면 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="44dcc40e6319d73e55e0506b2a02c88d015d6e90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;protocol-version&lt;/em&gt;&lt;/code&gt; is a series of two or more non-negative integers separated by periods (&lt;code&gt;.&lt;/code&gt;). An implementation of the version described by this documentation must use the string &lt;code&gt;1.0&lt;/code&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;protocol-version&lt;/em&gt;&lt;/code&gt; 으로 구분 둘 이상의 음이 아닌 정수의 시리즈 ( &lt;code&gt;.&lt;/code&gt; ). 이 문서에서 설명하는 버전을 구현하려면 여기 에서 문자열 &lt;code&gt;1.0&lt;/code&gt; 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="51e5d21d788500cd8258dd52116920bb8d78aa5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt;, if any, begins with a slash (&lt;code&gt;/&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;) and continues to the end of the address. It can contain attributes using the semicolon syntax specified in RFC 2609. Those attributes are not parsed by this class and incorrect attribute syntax is not detected.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt; 있는 경우, 슬래시 (시작 &lt;code&gt;/&lt;/code&gt; () 또는 세미콜론 &lt;code&gt;;&lt;/code&gt; )과 어드레스의 끝까지 계속된다. RFC 2609에 지정된 세미콜론 구문을 사용하는 속성을 포함 할 수 있습니다. 이러한 속성은이 클래스에서 구문 분석되지 않으며 잘못된 속성 구문이 감지되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0cfefc52ce748f9328afa9b5dc72829a45465fa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?&lt;/code&gt; character matches exactly one character of a name component.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 문자는 이름 구성 요소의 한 문자와 정확히 일치합니다.</target>
        </trans-unit>
        <trans-unit id="86179c7113b7ca3e72607b93d89e62c19020820b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AccessControlContext&lt;/code&gt; may contain many Subjects (from nested &lt;code&gt;doAs&lt;/code&gt; calls). In this situation, the most recent &lt;code&gt;Subject&lt;/code&gt; associated with the &lt;code&gt;AccessControlContext&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;AccessControlContext&lt;/code&gt; (중첩에서 많은 주제를 포함 할 수 있습니다 &lt;code&gt;doAs&lt;/code&gt; 와의 통화). 이 상황에서는 &lt;code&gt;AccessControlContext&lt;/code&gt; 와 연관된 가장 최근의 &lt;code&gt;Subject&lt;/code&gt; 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="b449118f305afa855458cabeb18c4cb51488d864" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; class is used to generate a set of parameters to be used with a certain algorithm.</source>
          <target state="translated">&lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; 의의 클래스는 특정의 알고리즘으로 사용되는 파라미터 세트를 생성하는 데 사용된다.</target>
        </trans-unit>
        <trans-unit id="21b1b496ebb21c6a19e568343413c663744b5d29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; class is used to generate a set of parameters to be used with a certain algorithm. Parameter generators are constructed using the &lt;code&gt;getInstance&lt;/code&gt; factory methods (static methods that return instances of a given class).</source>
          <target state="translated">&lt;code&gt;AlgorithmParameterGenerator&lt;/code&gt; 의의 클래스는 특정의 알고리즘으로 사용되는 파라미터 세트를 생성하는 데 사용된다. 매개 변수 생성기는 &lt;code&gt;getInstance&lt;/code&gt; 팩토리 메소드 (주어진 클래스의 인스턴스를 리턴하는 정적 메소드)를 사용하여 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="60cf335e88d209716971b2d6c6b97342cea6ef52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Array&lt;/code&gt; class provides static methods to dynamically create and access Java arrays.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 클래스는 정적 동적으로 생성하는 방법과 접근 자바 배열을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e11780a48e0c2628760a60beb9af58fed7a0350b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;ArrayType&lt;/code&gt; 의 클래스입니다</target>
        </trans-unit>
        <trans-unit id="abaabe6886264c20f473fa5053a5d55bc337750d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; node that was removed.</source>
          <target state="translated">제거 된 &lt;code&gt;Attr&lt;/code&gt; 노드</target>
        </trans-unit>
        <trans-unit id="5ef50051305c491e51d826eece91f5a67a7debbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; node with the specified attribute local name and namespace URI or &lt;code&gt;null&lt;/code&gt; if there is no such attribute.</source>
          <target state="translated">&lt;code&gt;Attr&lt;/code&gt; 지정된 속성 로컬 명과 이름 공간 URI 또는을 가진 노드 &lt;code&gt;null&lt;/code&gt; 해당하는 속성이 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="7652a895a29f2647e0b2dd18893f6b4dc0e428cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; node with the specified name ( &lt;code&gt;nodeName&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt; if there is no such attribute.</source>
          <target state="translated">&lt;code&gt;Attr&lt;/code&gt; 지정된 이름 (노드와 함께 &lt;code&gt;nodeName&lt;/code&gt; ) 또는 &lt;code&gt;null&lt;/code&gt; 해당하는 속성이 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="7a69dfdb305ce85fbed13fda0e8e19810074205f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Attr&lt;/code&gt; value as a string, or the empty string if that attribute does not have a specified or default value.</source>
          <target state="translated">&lt;code&gt;Attr&lt;/code&gt; 문자열로 값 또는 빈 문자열은 그 속성이 지정되거나 디폴트 값이없는 경우.</target>
        </trans-unit>
        <trans-unit id="f3aadc19c893a1efadaa932321d03e00dc3fdf32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AttributeSet&lt;/code&gt; interface is similar to the &lt;a href=&quot;../../../java/util/map&quot;&gt;Map&lt;/a&gt; interface: it provides a map of key to values, in which each key is unique and can contain no more than one value. However, the &lt;code&gt;AttributeSet&lt;/code&gt; interface is designed to specifically support the needs of the Java Print Service API. An &lt;code&gt;AttributeSet&lt;/code&gt; requires that:</source>
          <target state="translated">&lt;code&gt;AttributeSet&lt;/code&gt; 인터페이스는 비슷합니다 &lt;a href=&quot;../../../java/util/map&quot;&gt;지도&lt;/a&gt; 인터페이스 : 각 키가 고유하지 않습니다 더 이상 하나 개의 값 이상 포함 할 수있는 값에 대한 키의 매핑을 제공합니다. 그러나 &lt;code&gt;AttributeSet&lt;/code&gt; 인터페이스는 Java 인쇄 서비스 API의 요구를 구체적으로 지원하도록 설계되었습니다. &lt;code&gt;AttributeSet&lt;/code&gt; 해야합니다 :</target>
        </trans-unit>
        <trans-unit id="8af784200eedb9bf3ff696e5dfcb898cc72bbe54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioFormat&lt;/code&gt; class accommodates a number of common sound-file encoding techniques, including pulse-code modulation (PCM), mu-law encoding, and a-law encoding. These encoding techniques are predefined, but service providers can create new encoding types. The encoding that a specific format uses is named by its &lt;code&gt;encoding&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;AudioFormat&lt;/code&gt; 클래스는 펄스 부호 변조 (PCM), mu-law 인코딩 및 법칙 인코딩 음성을 포함한 일반적인 파일 인코딩 기술들을 수용한다. 이러한 인코딩 기술은 미리 정의되어 있지만 서비스 제공 업체는 새로운 인코딩 유형을 만들 수 있습니다. 특정 형식이 사용하는 &lt;code&gt;encoding&lt;/code&gt; 이름은 해당 인코딩 필드로 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="d7fd077369e0845cac37ae324fe142bf62bb88be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioPermission&lt;/code&gt; class represents access rights to the audio system resources.</source>
          <target state="translated">&lt;code&gt;AudioPermission&lt;/code&gt; 의 클래스는 오디오 시스템 리소스에 대한 액세스 권한을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="663f73601babca7fe9a3f57db471ad6b7380920c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioPermission&lt;/code&gt; class represents access rights to the audio system resources. An &lt;code&gt;AudioPermission&lt;/code&gt; contains a target name but no actions list; you either have the named permission or you don't.</source>
          <target state="translated">&lt;code&gt;AudioPermission&lt;/code&gt; 의 클래스는 오디오 시스템 리소스에 대한 액세스 권한을 나타냅니다. &lt;code&gt;AudioPermission&lt;/code&gt; 은 대상 이름 만, 액션리스트는 포함 당신은 명명 된 권한이 있거나 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="64530a02f14561a54d873e43c58fb4f8735319fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioSystem&lt;/code&gt; class acts as the entry point to the sampled-audio system resources.</source>
          <target state="translated">&lt;code&gt;AudioSystem&lt;/code&gt; 클래스는 샘플링 된 오디오 시스템 자원에 대한 진입 점 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="a212ac4197ad27334cc250327922918495c0a587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioSystem&lt;/code&gt; class acts as the entry point to the sampled-audio system resources. This class lets you query and access the mixers that are installed on the system. &lt;code&gt;AudioSystem&lt;/code&gt; includes a number of methods for converting audio data between different formats, and for translating between audio files and streams. It also provides a method for obtaining a &lt;code&gt;&lt;a href=&quot;line&quot;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; directly from the &lt;code&gt;AudioSystem&lt;/code&gt; without dealing explicitly with mixers.</source>
          <target state="translated">&lt;code&gt;AudioSystem&lt;/code&gt; 클래스는 샘플링 된 오디오 시스템 자원에 대한 진입 점 역할을합니다. 이 클래스를 사용하면 시스템에 설치된 믹서를 쿼리하고 액세스 할 수 있습니다. &lt;code&gt;AudioSystem&lt;/code&gt; 에는 여러 형식간에 오디오 데이터를 변환하고 오디오 파일과 스트림간에 변환하는 여러 가지 방법이 있습니다. 믹서를 명시 적으로 다루지 않고 &lt;code&gt;AudioSystem&lt;/code&gt; 에서 직접 &lt;code&gt;&lt;a href=&quot;line&quot;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 을 얻는 방법도 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="7af5ce7a31e2d4a27612651aee35e3f53a096d39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AudioSystem&lt;/code&gt; class includes many methods that manipulate &lt;code&gt;AudioInputStream&lt;/code&gt; objects. For example, the methods let you:</source>
          <target state="translated">&lt;code&gt;AudioSystem&lt;/code&gt; 클래스는 조작 많은 방법이 포함 &lt;code&gt;AudioInputStream&lt;/code&gt; 를의 객체. 예를 들어, 방법을 사용하면</target>
        </trans-unit>
        <trans-unit id="79cdc8d9c9f62ce1ec249481a0aed83f0d424285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BasicAttribute&lt;/code&gt; class by default uses &lt;code&gt;Object.equals()&lt;/code&gt; to determine equality of attribute values when testing for equality or when searching for values, &lt;em&gt;except&lt;/em&gt; when the value is an array. For an array, each element of the array is checked using &lt;code&gt;Object.equals()&lt;/code&gt;. Subclasses of &lt;code&gt;BasicAttribute&lt;/code&gt; can make use of schema information when doing similar equality checks by overriding methods in which such use of schema is meaningful. Similarly, the &lt;code&gt;BasicAttribute&lt;/code&gt; class by default returns the values passed to its constructor and/or manipulated using the add/remove methods. Subclasses of &lt;code&gt;BasicAttribute&lt;/code&gt; can override &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;getAll()&lt;/code&gt; to get the values dynamically from the directory (or implement the &lt;code&gt;Attribute&lt;/code&gt; interface directly instead of subclassing &lt;code&gt;BasicAttribute&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;BasicAttribute&lt;/code&gt; 디폴트 클래스를 사용 &lt;code&gt;Object.equals()&lt;/code&gt; , 값을 검색 할 때 어떤지를 판정하거나 속성 값 어떤지를 결정하기 위해 &lt;em&gt;제외한&lt;/em&gt; 값이 배열 될 때. 배열의 경우 배열의 각 요소는 &lt;code&gt;Object.equals()&lt;/code&gt; 사용하여 확인됩니다 . &lt;code&gt;BasicAttribute&lt;/code&gt; 의 서브 클래스는 스키마 사용이 의미있는 메소드를 대체하여 유사한 동등 검사를 수행 할 때 스키마 정보를 사용할 수 있습니다. 마찬가지로 &lt;code&gt;BasicAttribute&lt;/code&gt; 클래스는 기본적으로 생성자에 전달되거나 add / remove 메서드를 사용하여 조작 된 값을 반환합니다. 의 서브 클래스 &lt;code&gt;BasicAttribute&lt;/code&gt; 의는 무시할 수 있습니다 &lt;code&gt;get()&lt;/code&gt; 하고 &lt;code&gt;getAll()&lt;/code&gt; 은 디렉토리에서 값을 동적으로 가져 오거나 &lt;code&gt;BasicAttribute&lt;/code&gt; 를 서브 클래 싱하는 대신 직접 &lt;code&gt;Attribute&lt;/code&gt; 인터페이스를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="1e0315176a90eb1a609d30f4d425382cc748e5d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BeanContext&lt;/code&gt; from which this event was propagated</source>
          <target state="translated">이 이벤트가 전파 된 &lt;code&gt;BeanContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe4221cd8e13142dfdb7397e431e92d56077adb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BeanContext&lt;/code&gt; in which this &lt;code&gt;BeanContextChild&lt;/code&gt; is nested.</source>
          <target state="translated">&lt;code&gt;BeanContext&lt;/code&gt; 있는이 &lt;code&gt;BeanContextChild&lt;/code&gt; 에이 중첩이다.</target>
        </trans-unit>
        <trans-unit id="7971f5d644f18176b75055fa2a5ace4dd309fa2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BigDecimal&lt;/code&gt; class gives its user complete control over rounding behavior. If no rounding mode is specified and the exact result cannot be represented, an exception is thrown; otherwise, calculations can be carried out to a chosen precision and rounding mode by supplying an appropriate &lt;a href=&quot;mathcontext&quot;&gt;&lt;code&gt;MathContext&lt;/code&gt;&lt;/a&gt; object to the operation. In either case, eight &lt;em&gt;rounding modes&lt;/em&gt; are provided for the control of rounding. Using the integer fields in this class (such as &lt;a href=&quot;bigdecimal#ROUND_HALF_UP&quot;&gt;&lt;code&gt;ROUND_HALF_UP&lt;/code&gt;&lt;/a&gt;) to represent rounding mode is largely obsolete; the enumeration values of the &lt;code&gt;RoundingMode&lt;/code&gt;&lt;code&gt;enum&lt;/code&gt;, (such as &lt;a href=&quot;roundingmode#HALF_UP&quot;&gt;&lt;code&gt;RoundingMode.HALF_UP&lt;/code&gt;&lt;/a&gt;) should be used instead.</source>
          <target state="translated">&lt;code&gt;BigDecimal&lt;/code&gt; 클래스는 둥근 동작을 사용자가 완벽하게 제어 할 수 있습니다. 반올림 모드를 지정하지 않고 정확한 결과를 표현할 수 없으면 예외가 발생합니다. 그렇지 않으면 연산에 적절한 &lt;a href=&quot;mathcontext&quot;&gt; &lt;code&gt;MathContext&lt;/code&gt; &lt;/a&gt; 객체를 제공하여 선택한 정밀도 및 반올림 모드로 계산을 수행 할 수 있습니다 . 두 경우 모두 &lt;em&gt;반올림&lt;/em&gt; 제어를 위해 8 개의 &lt;em&gt;반올림 모드&lt;/em&gt; 가 제공됩니다. 이 클래스의 정수 필드 (예 : &lt;a href=&quot;bigdecimal#ROUND_HALF_UP&quot;&gt; &lt;code&gt;ROUND_HALF_UP&lt;/code&gt; &lt;/a&gt; )를 사용하여 반올림 모드를 나타내는 것은 대체로 사용되지 않습니다. 대신 &lt;code&gt;RoundingMode&lt;/code&gt; &lt;code&gt;enum&lt;/code&gt; 의 열거 값 (예 : &lt;a href=&quot;roundingmode#HALF_UP&quot;&gt; &lt;code&gt;RoundingMode.HALF_UP&lt;/code&gt; &lt;/a&gt; )을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="5fc7942056b3dd79609c5265cf98ecc9a0e3f371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BigDecimal&lt;/code&gt; class provides operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion. The &lt;a href=&quot;bigdecimal#toString--&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method provides a canonical representation of a &lt;code&gt;BigDecimal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BigDecimal&lt;/code&gt; 클래스 산술 스케일 조작, 둥근, 비교, 해시, 포맷 변환 연산을 제공한다. &lt;a href=&quot;bigdecimal#toString--&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt; 메소드는 정규 표현의 제공 &lt;code&gt;BigDecimal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df5a7760f638121c128fa1a36ad30ea0b851b272" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Binding&lt;/code&gt; class is actually a subclass of &lt;code&gt;NameClassPair&lt;/code&gt;, which consists simply of the object's name and the object's class name. The &lt;code&gt;NameClassPair&lt;/code&gt; is useful when you only want information about the object's class and do not want to pay the extra cost of getting the object.</source>
          <target state="translated">&lt;code&gt;Binding&lt;/code&gt; 클래스는 실제의 서브 클래스 &lt;code&gt;NameClassPair&lt;/code&gt; 에 단순히 객체의 이름과 객체의 클래스 이름으로 구성됩니다. &lt;code&gt;NameClassPair&lt;/code&gt; 당신이 단지 객체의 클래스에 대한 정보를 원하는 객체를 얻기의 추가 비용을 지불하고 싶지 않을 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="0103dabbd8fe15655d49de0baddfafb3b9137bae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Binding&lt;/code&gt; class represents a name-to-object binding. It is a tuple containing the name of the bound object, the name of the object's class, and the object itself.</source>
          <target state="translated">&lt;code&gt;Binding&lt;/code&gt; 클래스는 이름 - 객체 바인딩을 나타냅니다. 바인딩 된 객체의 이름, 객체의 클래스 이름 및 객체 자체를 포함하는 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="b8bb72f6e0722cb808bbfd786520a48b7182c75e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bindings&lt;/code&gt; instances that are returned must be identical to those returned by the &lt;code&gt;getBindings&lt;/code&gt; method of &lt;code&gt;ScriptContext&lt;/code&gt; called with corresponding arguments on the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">리턴 된 &lt;code&gt;Bindings&lt;/code&gt; 인스턴스 는 &lt;code&gt;ScriptEngine&lt;/code&gt; 의 기본 &lt;code&gt;ScriptContext&lt;/code&gt; 에서 해당 인수로 호출 된 &lt;code&gt;ScriptContext&lt;/code&gt; 의 &lt;code&gt;getBindings&lt;/code&gt; 메소드 가 리턴 한 인스턴스와 동일해야합니다 .</target>
        </trans-unit>
        <trans-unit id="05940c6482bc9cee8cceaf4e697300ed0675d5d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bindings&lt;/code&gt; of key/value pairs, referred to as the &quot;Global Scope&quot; maintained by the manager is available to all instances of &lt;code&gt;ScriptEngine&lt;/code&gt; created by the &lt;code&gt;ScriptEngineManager&lt;/code&gt;. The values in the &lt;code&gt;Bindings&lt;/code&gt; are generally exposed in all scripts.</source>
          <target state="translated">&lt;code&gt;Bindings&lt;/code&gt; 의 모든 인스턴스에 관리자에 의해 유지되는 &quot;글로벌 범위가&quot;로 볼 수 있습니다이라 키 / 값 쌍의, &lt;code&gt;ScriptEngine&lt;/code&gt; 의은 에 의해 생성 &lt;code&gt;ScriptEngineManager&lt;/code&gt; 는 . &lt;code&gt;Bindings&lt;/code&gt; 의 값 은 일반적으로 모든 스크립트에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c8872d0f95cad30df2b43f31fb08168cf4e82b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bindings&lt;/code&gt; with the specified scope.</source>
          <target state="translated">지정된 범위 의 &lt;code&gt;Bindings&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d60a6b49fd7f6573e55ea030a9ceb3013e12f74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean&lt;/code&gt; object corresponding to the primitive value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; 프리미티브 값에 대응하는 오브젝트 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa5f6e88af022d56af88b562fb37e5a9055bbd43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean&lt;/code&gt; object corresponding to the primitive value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; 프리미티브 값에 대응하는 오브젝트 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8e5bd3e90c98cafc96c3bffb7cdb5902ec05efc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BreakIterator&lt;/code&gt; class implements methods for finding the location of boundaries in text.</source>
          <target state="translated">&lt;code&gt;BreakIterator&lt;/code&gt; 텍스트 경계의 위치를 찾아내는 클래스가 구현하는 방법.</target>
        </trans-unit>
        <trans-unit id="da13029d818efd6f3b22a9f5835a453fd292a681" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BreakIterator&lt;/code&gt; class implements methods for finding the location of boundaries in text. Instances of &lt;code&gt;BreakIterator&lt;/code&gt; maintain a current position and scan over text returning the index of characters where boundaries occur. Internally, &lt;code&gt;BreakIterator&lt;/code&gt; scans text using a &lt;code&gt;CharacterIterator&lt;/code&gt;, and is thus able to scan text held by any object implementing that protocol. A &lt;code&gt;StringCharacterIterator&lt;/code&gt; is used to scan &lt;code&gt;String&lt;/code&gt; objects passed to &lt;code&gt;setText&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BreakIterator&lt;/code&gt; 텍스트 경계의 위치를 찾아내는 클래스가 구현하는 방법. &lt;code&gt;BreakIterator&lt;/code&gt; 인스턴스는 현재 위치를 유지하고 경계가 발생한 문자 색인을 반환하는 텍스트를 스캔합니다. 내부적으로 &lt;code&gt;BreakIterator&lt;/code&gt; 는 &lt;code&gt;CharacterIterator&lt;/code&gt; 를 사용하여 텍스트 를 스캔하므로 해당 프로토콜을 구현하는 모든 객체가 보유한 텍스트를 스캔 할 수 있습니다. &lt;code&gt;StringCharacterIterator&lt;/code&gt; 는 스캔하는 데 사용되는 &lt;code&gt;String&lt;/code&gt; 에 전달 된 객체 &lt;code&gt;setText&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8175672c5ab8c55357d73bfb557350df91b702a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BreakIterator&lt;/code&gt; instances returned by the factory methods of this class are intended for use with natural languages only, not for programming language text. It is however possible to define subclasses that tokenize a programming language.</source>
          <target state="translated">&lt;code&gt;BreakIterator&lt;/code&gt; 이 클래스의 팩토리 메소드에 의해 반환되는 인스턴스 만이 아닌 언어 텍스트를 프로그래밍하기위한 자연 언어를 사용하기위한 것입니다. 그러나 프로그래밍 언어를 토큰 화하는 서브 클래스를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26575ce7aa6f5dba044d1067a9237fc3d869b533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Byte&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;byte&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Byte&lt;/code&gt; 클래스 프리미티브 타입의 값 랩 &lt;code&gt;byte&lt;/code&gt; 객체하여.</target>
        </trans-unit>
        <trans-unit id="daee07dd88e16b4a70774f8e2ee84b6a66a8d825" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Byte&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;byte&lt;/code&gt; in an object. An object of type &lt;code&gt;Byte&lt;/code&gt; contains a single field whose type is &lt;code&gt;byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Byte&lt;/code&gt; 클래스 프리미티브 타입의 값 랩 &lt;code&gt;byte&lt;/code&gt; 객체하여. &lt;code&gt;Byte&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;byte&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="c827bcb764af6d14358870b4c02cf9f314c2a1cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Calendar&lt;/code&gt; class is an abstract class that provides methods for converting between a specific instant in time and a set of &lt;a href=&quot;calendar#fields&quot;&gt;&lt;code&gt;calendar fields&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;, &lt;code&gt;HOUR&lt;/code&gt;, and so on, and for manipulating the calendar fields, such as getting the date of the next week.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; 클래스는 특정 시간 인스턴트와 세트 사이에 변환하기위한 방법을 제공하는 추상 클래스입니다 &lt;a href=&quot;calendar#fields&quot;&gt; &lt;code&gt;calendar fields&lt;/code&gt; &lt;/a&gt; 와 같은 &lt;code&gt;YEAR&lt;/code&gt; , &lt;code&gt;MONTH&lt;/code&gt; , &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; , &lt;code&gt;HOUR&lt;/code&gt; , 등등과 같은 날짜를 얻는 등의 달력 필드를 조작하기위한 다음 주에</target>
        </trans-unit>
        <trans-unit id="e16a5c9a51c0c49e784ca00cfe336ed3439953f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Calendar&lt;/code&gt; class is an abstract class that provides methods for converting between a specific instant in time and a set of &lt;a href=&quot;calendar#fields&quot;&gt;&lt;code&gt;calendar fields&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY_OF_MONTH&lt;/code&gt;, &lt;code&gt;HOUR&lt;/code&gt;, and so on, and for manipulating the calendar fields, such as getting the date of the next week. An instant in time can be represented by a millisecond value that is an offset from the &lt;a name=&quot;Epoch&quot;&gt;&lt;em&gt;Epoch&lt;/em&gt;&lt;/a&gt;, January 1, 1970 00:00:00.000 GMT (Gregorian).</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; 클래스는 특정 시간 인스턴트와 세트 사이에 변환하기위한 방법을 제공하는 추상 클래스입니다 &lt;a href=&quot;calendar#fields&quot;&gt; &lt;code&gt;calendar fields&lt;/code&gt; &lt;/a&gt; 와 같은 &lt;code&gt;YEAR&lt;/code&gt; , &lt;code&gt;MONTH&lt;/code&gt; , &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; , &lt;code&gt;HOUR&lt;/code&gt; , 등등과 같은 날짜를 얻는 등의 달력 필드를 조작하기위한 다음 주에 시간은 1970 년 1 월 1 일 00 : 00 : 00.000 GMT (그레고리 안) 의 &lt;a name=&quot;Epoch&quot;&gt;&lt;em&gt;Epoch&lt;/em&gt;&lt;/a&gt; 에서 오프셋 인 밀리 초 값으로 나타낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="46f676ce0c4f91d6ea5cdaa0c0eeb686651fe70a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Calendar&lt;/code&gt; parameters are the values represented by the &lt;code&gt;isLenient&lt;/code&gt;, &lt;code&gt;getFirstDayOfWeek&lt;/code&gt;, &lt;code&gt;getMinimalDaysInFirstWeek&lt;/code&gt; and &lt;code&gt;getTimeZone&lt;/code&gt; methods. If there is any difference in those parameters between the two &lt;code&gt;Calendar&lt;/code&gt;s, this method returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; 매개 변수로 표시되는 값이다 &lt;code&gt;isLenient&lt;/code&gt; , &lt;code&gt;getFirstDayOfWeek&lt;/code&gt; ()로 , &lt;code&gt;getMinimalDaysInFirstWeek&lt;/code&gt; 및 &lt;code&gt;getTimeZone&lt;/code&gt; 의 방법. 두 &lt;code&gt;Calendar&lt;/code&gt; 간에 해당 매개 변수에 차이가 있으면 이 메서드는 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="03f65fae6f6d35c57712e1b5d06c5ce4521fef51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Callable&lt;/code&gt; interface is similar to &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;, in that both are designed for classes whose instances are potentially executed by another thread. A &lt;code&gt;Runnable&lt;/code&gt;, however, does not return a result and cannot throw a checked exception.</source>
          <target state="translated">&lt;code&gt;Callable&lt;/code&gt; 인터페이스 비슷 &lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; 을&lt;/a&gt; 모두 가진 경우 잠재적으로 다른 스레드에 의해 실행되는 클래스 설계에 있음. &lt;code&gt;Runnable&lt;/code&gt; , 그러나, 그 결과를 반환하지 않습니다 및 체크 예외를 던질 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="2fd30e66fda8ef1c3878a705a006694493584387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CertPath&lt;/code&gt; specified must be of a type that is supported by the validation algorithm, otherwise an &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; will be thrown. For example, a &lt;code&gt;CertPathValidator&lt;/code&gt; that implements the PKIX algorithm validates &lt;code&gt;CertPath&lt;/code&gt; objects of type X.509.</source>
          <target state="translated">&lt;code&gt;CertPath&lt;/code&gt; 검증 알고리즘에 의해 지원되는 형식이어야 지정은, 그렇지 않은 경우 &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; 발생합니다. 예를 들어, PKIX 알고리즘을 구현 하는 &lt;code&gt;CertPathValidator&lt;/code&gt; 는 X.509 유형의 &lt;code&gt;CertPath&lt;/code&gt; 객체를 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="36926f67fdea989d87063408fa653e4dfdb427d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CertStore&lt;/code&gt; that is returned is initialized with the specified &lt;code&gt;CertStoreParameters&lt;/code&gt;. The type of parameters needed may vary between different types of &lt;code&gt;CertStore&lt;/code&gt;s. Note that the specified &lt;code&gt;CertStoreParameters&lt;/code&gt; object is cloned.</source>
          <target state="translated">리턴 된 &lt;code&gt;CertStore&lt;/code&gt; 는 지정된 &lt;code&gt;CertStoreParameters&lt;/code&gt; 로 초기화 됩니다 . 필요한 매개 변수 유형은 &lt;code&gt;CertStore&lt;/code&gt; 유형에 따라 다를 수 있습니다 . 지정된 &lt;code&gt;CertStoreParameters&lt;/code&gt; 객체가 복제됩니다.</target>
        </trans-unit>
        <trans-unit id="101822df3975adbcac61dad375ef170c3dd3f9ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Character&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;char&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Character&lt;/code&gt; 클래스는 기본 입력 값 랩 &lt;code&gt;char&lt;/code&gt; 오브젝트하여.</target>
        </trans-unit>
        <trans-unit id="806bb96887766953bebd866e27ce9d8da08b4334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Character&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;char&lt;/code&gt; in an object. An object of type &lt;code&gt;Character&lt;/code&gt; contains a single field whose type is &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Character&lt;/code&gt; 클래스는 기본 입력 값 랩 &lt;code&gt;char&lt;/code&gt; 오브젝트하여. &lt;code&gt;Character&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;char&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="ba3268238d079e4b2a6a12991e41beae19670cb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChronoField&lt;/code&gt; date and time fields are re-resolved. This allows fields in step four to produce &lt;code&gt;ChronoField&lt;/code&gt; values and have them be processed into dates and times.</source>
          <target state="translated">&lt;code&gt;ChronoField&lt;/code&gt; 의 날짜와 시간 필드가 다시 확인됩니다. 이를 통해 4 단계의 필드가 &lt;code&gt;ChronoField&lt;/code&gt; 값 을 생성 하고 날짜 및 시간으로 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="96e6680c1b998ca327d4d17aedbccdccc167dbcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChronoField&lt;/code&gt; date fields are resolved. This is achieved using &lt;a href=&quot;../chrono/chronology#resolveDate-java.util.Map-java.time.format.ResolverStyle-&quot;&gt;&lt;code&gt;Chronology.resolveDate(Map, ResolverStyle)&lt;/code&gt;&lt;/a&gt;. Documentation about field resolution is located in the implementation of &lt;code&gt;Chronology&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ChronoField&lt;/code&gt; 의 날짜 필드가 해결됩니다. 이것은 &lt;a href=&quot;../chrono/chronology#resolveDate-java.util.Map-java.time.format.ResolverStyle-&quot;&gt; &lt;code&gt;Chronology.resolveDate(Map, ResolverStyle)&lt;/code&gt; &lt;/a&gt; 사용하여 달성됩니다 . 필드 분석에 대한 문서는 &lt;code&gt;Chronology&lt;/code&gt; 구현에 있습니다.</target>
        </trans-unit>
        <trans-unit id="89d1beeae57332f5351b6ab29fde209df635e987" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChronoField&lt;/code&gt; time fields are resolved. This is documented on &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt; and is the same for all chronologies.</source>
          <target state="translated">&lt;code&gt;ChronoField&lt;/code&gt; 의 시간 필드는 해결됩니다. 이것은 &lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; 에&lt;/a&gt; 문서화되어 있으며 모든 연대기에서 동일합니다.</target>
        </trans-unit>
        <trans-unit id="82381a07b897d845e38a8fb6d968a572a981dcd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chronology&lt;/code&gt; instance provides a set of methods to create &lt;code&gt;ChronoLocalDate&lt;/code&gt; instances. The date classes are used to manipulate specific dates.</source>
          <target state="translated">&lt;code&gt;Chronology&lt;/code&gt; 인스턴스를 생성하는 메소드 세트 제공 &lt;code&gt;ChronoLocalDate&lt;/code&gt; 의 인스턴스를. 날짜 클래스는 특정 날짜를 조작하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b67dfb19ed132a488f7220fb4dc014c909b089ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chronology&lt;/code&gt; represents the calendar system in use. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time.</source>
          <target state="translated">&lt;code&gt;Chronology&lt;/code&gt; 사용하고있는 달력 시스템을 나타냅니다. ISO-8601 캘린더 시스템은 오늘날 대부분의 세계에서 사용되는 최신 민사 캘린더 시스템입니다. 그것은 윤년에 대한 오늘의 규칙이 모든 시간에 적용되는 다발성 그레고리력 시스템과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="4197e57743f21fd2a15f8483e9ed9b922aac9ed3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Chronology&lt;/code&gt; represents the calendar system in use. The era and other fields in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt; are defined by the chronology.</source>
          <target state="translated">&lt;code&gt;Chronology&lt;/code&gt; 사용하고있는 달력 시스템을 나타냅니다. &lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt; 의 시대와 다른 필드 는 연대기에 의해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="9ec2677d771f2243453abd3744eafeaaa8cc23f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 원시적 형태 나타내는 예를 &lt;code&gt;byte&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5d8434bc0489103ac32d773f7b0d5d3c71265f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 원시적 형태 나타내는 경우 &lt;code&gt;char&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c0b196d2877a10ae544eb517c91cdc98d354fe55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 원시적 형태를 나타내는 인스턴스를 &lt;code&gt;double&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fc9063456a087c6ae2a09f36b8c79ce72af8fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 원시적 형태 나타내는 예를 &lt;code&gt;float&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="843262d0d1248a1926078c82957df1906c06c701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 원시적 형태 나타내는 예 &lt;code&gt;int&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f85e50e9d096ed50998edbe6558f68b79f3e5d09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 원시적 형을 나타내는 예를 &lt;code&gt;long&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06ed2f03cfacda7175bed94156559a38e6923b0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 원시적 형태 나타내는 예 &lt;code&gt;short&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0bddc54347ed58d9c0c85b45c41a02b37fd779ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object created from the data, and optional &lt;code&gt;ProtectionDomain&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 데이터로부터 생성 된 객체, 옵션 &lt;code&gt;ProtectionDomain&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e690995fffbb2c3b6c4761982fccbec41cd68fda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object for the specified &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">지정된 &lt;code&gt;name&lt;/code&gt; 의 &lt;code&gt;Class&lt;/code&gt; 객체</target>
        </trans-unit>
        <trans-unit id="23dcb43f82d588ed515276419645673633932ecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object representing the pseudo-type corresponding to the keyword &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 키워드에 해당하는 의사 형을 나타내는 개체 &lt;code&gt;void&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d08a4d00bff7d8642e575b877c58fa1bcc6f66c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object that represents the runtime class of this object.</source>
          <target state="translated">이 객체의 런타임 클래스를 나타내는 &lt;code&gt;Class&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="1a36611cde5a9560399b57b3e163d1767e367923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object that was created from the specified class data</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 지정된 클래스 데이터로부터 작성된 오브젝트</target>
        </trans-unit>
        <trans-unit id="f80f806d21a19e64a5fdd872d0ac53f89e33de6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object that was created from the specified class data.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 지정된 클래스 데이터로부터 생성 된 객체입니다.</target>
        </trans-unit>
        <trans-unit id="4584f55b815597f64d3b967ed1a51e3f17ff42f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Class&lt;/code&gt; object, or &lt;code&gt;null&lt;/code&gt; if the class has not been loaded</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 객체 또는 &lt;code&gt;null&lt;/code&gt; 클래스가로드되어 있지 않은 경우</target>
        </trans-unit>
        <trans-unit id="53769dc20c24f269ab332a337f22729fbb2a017c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ClassLoader&lt;/code&gt; class uses a delegation model to search for classes and resources. Each instance of &lt;code&gt;ClassLoader&lt;/code&gt; has an associated parent class loader. When requested to find a class or resource, a &lt;code&gt;ClassLoader&lt;/code&gt; instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the &quot;bootstrap class loader&quot;, does not itself have a parent but may serve as the parent of a &lt;code&gt;ClassLoader&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;ClassLoader&lt;/code&gt; 클래스는 클래스 및 자원을 검색하기 위해 위임 모델을 사용합니다. &lt;code&gt;ClassLoader&lt;/code&gt; 의 각 인스턴스 에는 연결된 상위 클래스 로더가 있습니다. 클래스 또는 리소스를 찾도록 요청되면 &lt;code&gt;ClassLoader&lt;/code&gt; 인스턴스는 클래스 또는 리소스 자체를 찾기 전에 클래스 또는 리소스 검색을 부모 클래스 로더에 위임합니다. &quot;부트 스트랩 클래스 로더&quot;라고하는 가상 머신의 내장 클래스 로더에는 상위가 없지만 &lt;code&gt;ClassLoader&lt;/code&gt; 인스턴스 의 상위 역할을 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7baf7494690c1ab3f8e2f12b250cac6e80e44abb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Clip&lt;/code&gt; interface represents a special kind of data line whose audio data can be loaded prior to playback, instead of being streamed in real time.</source>
          <target state="translated">&lt;code&gt;Clip&lt;/code&gt; 인터페이스는 존재가 실시간으로 스트리밍하는 대신, 오디오 데이터 재생 전에로드 할 수 있습니다 특수한 종류의 데이터 라인을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="07dd3f9173350c44103b58ad3909560986b18dcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CodecSet&lt;/code&gt; class creates and saves a single service instance at initialization:</source>
          <target state="translated">&lt;code&gt;CodecSet&lt;/code&gt; 의 클래스는 생성 및 초기화에 하나의 서비스 인스턴스를 저장합니다</target>
        </trans-unit>
        <trans-unit id="cf493d6742a6c242a0b1d360dfba83fb4b87d243" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollationElementIterator&lt;/code&gt; class is used as an iterator to walk through each character of an international string.</source>
          <target state="translated">&lt;code&gt;CollationElementIterator&lt;/code&gt; 의 클래스는 국제 문자열의 각 문자를 처리 할 때의 반복자로서 사용된다.</target>
        </trans-unit>
        <trans-unit id="46ce50a913e7c2a368bfe8ae348e20f4b0760cdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollationElementIterator&lt;/code&gt; class is used as an iterator to walk through each character of an international string. Use the iterator to return the ordering priority of the positioned character. The ordering priority of a character, which we refer to as a key, defines how a character is collated in the given collation object.</source>
          <target state="translated">&lt;code&gt;CollationElementIterator&lt;/code&gt; 의 클래스는 국제 문자열의 각 문자를 처리 할 때의 반복자로서 사용된다. 반복자를 사용하여 배치 된 문자의 순서 우선 순위를 리턴하십시오. 키라고하는 문자의 순서 우선 순위는 주어진 데이터 정렬 개체에서 문자를 정렬하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="7933f59bdf875c37eb441af7f9a60a666a8d3fcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collator&lt;/code&gt; class performs locale-sensitive &lt;code&gt;String&lt;/code&gt; comparison.</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; 클래스의 수행은 로케일에 의존하는 &lt;code&gt;String&lt;/code&gt; 비교.</target>
        </trans-unit>
        <trans-unit id="bb398f128eef70308b7f92e45e6eb18ce6533c73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collator&lt;/code&gt; class performs locale-sensitive &lt;code&gt;String&lt;/code&gt; comparison. You use this class to build searching and sorting routines for natural language text.</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; 클래스의 수행은 로케일에 의존하는 &lt;code&gt;String&lt;/code&gt; 비교. 이 클래스를 사용하여 자연어 텍스트에 대한 검색 및 정렬 루틴을 빌드합니다.</target>
        </trans-unit>
        <trans-unit id="ff9824bbcacb67b79596d130b57096444e5903bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collection&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; copied. Instead, a reference is used. This allows the caller to subsequently add or remove &lt;code&gt;Certificates&lt;/code&gt; or &lt;code&gt;CRL&lt;/code&gt;s from the &lt;code&gt;Collection&lt;/code&gt;, thus changing the set of &lt;code&gt;Certificates&lt;/code&gt; or &lt;code&gt;CRL&lt;/code&gt;s available to the Collection &lt;code&gt;CertStore&lt;/code&gt;. The Collection &lt;code&gt;CertStore&lt;/code&gt; will not modify the contents of the &lt;code&gt;Collection&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Collection&lt;/code&gt; 되어 &lt;b&gt;있지&lt;/b&gt; 복사. 대신 참조가 사용됩니다. 이것에 의해, 호출 측은 , &lt;code&gt;Collection&lt;/code&gt; &lt;code&gt;Certificates&lt;/code&gt; 또는 &lt;code&gt;CRL&lt;/code&gt; 을 추가 또는 삭제할 수있어, Collection &lt;code&gt;CertStore&lt;/code&gt; 에 이용 가능한 &lt;code&gt;Certificates&lt;/code&gt; 또는 &lt;code&gt;CRL&lt;/code&gt; 세트가 변경 됩니다 . 컬렉션 &lt;code&gt;CertStore&lt;/code&gt; 의 내용을 수정하지 않습니다 &lt;code&gt;Collection&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e13ccfa1d055a7b6b34e9e36830f7d323272c74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ColorModel&lt;/code&gt; to be used as a prototype.</source>
          <target state="translated">&lt;code&gt;ColorModel&lt;/code&gt; 프로토 타입으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c82336186c250b7812d70c226ebe5d94f5b9c56d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; class is provided to support Java-to-native-code compilers and related services.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; 클래스는 자바 --에 네이티브 코드를 지원하기 위해 컴파일러 및 관련 서비스를 제공한다.</target>
        </trans-unit>
        <trans-unit id="5baf789bd5f3f16f61d707fd5b133cbba7948544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; class is provided to support Java-to-native-code compilers and related services. By design, the &lt;code&gt;Compiler&lt;/code&gt; class does nothing; it serves as a placeholder for a JIT compiler implementation.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; 클래스는 자바 --에 네이티브 코드를 지원하기 위해 컴파일러 및 관련 서비스를 제공한다. 설계 상 &lt;code&gt;Compiler&lt;/code&gt; 클래스는 아무 것도 수행하지 않습니다. JIT 컴파일러 구현을위한 자리 표시 자 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="7a10136967e2d7cca0ff7de90479711b3afa89dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeData&lt;/code&gt; interface specifies the behavior of a specific type of complex</source>
          <target state="translated">&lt;code&gt;CompositeData&lt;/code&gt; 인터페이스는 복잡한 특정 유형의 동작을 지정합니다</target>
        </trans-unit>
        <trans-unit id="430611e20757b0f69b3d3c4ac8a5e89a65ae2e00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeDataSupport&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;CompositeDataSupport&lt;/code&gt; 의 클래스입니다</target>
        </trans-unit>
        <trans-unit id="b09b9ac999e11e7f7254865f0fdfb600871077d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;CompositeType&lt;/code&gt; 클래스 인</target>
        </trans-unit>
        <trans-unit id="c17feb321bde2a79f87864039c7202bea866d7a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeType&lt;/code&gt; that will appear in the &lt;code&gt;openType&lt;/code&gt; field of the &lt;a href=&quot;../descriptor&quot;&gt;&lt;code&gt;Descriptor&lt;/code&gt;&lt;/a&gt; for an attribute or operation of this type will show only the &lt;code&gt;units&lt;/code&gt; item, but the actual &lt;code&gt;CompositeData&lt;/code&gt; that is generated will have both &lt;code&gt;units&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">이 유형의 속성 또는 조작에 대해 &lt;a href=&quot;../descriptor&quot;&gt; &lt;code&gt;Descriptor&lt;/code&gt; &lt;/a&gt; 자의 &lt;code&gt;openType&lt;/code&gt; 필드에 표시 되는 &lt;code&gt;CompositeType&lt;/code&gt; 에는 &lt;code&gt;units&lt;/code&gt; 항목 만 표시 되지만 생성 된 실제 &lt;code&gt;CompositeData&lt;/code&gt; 에는 &lt;code&gt;units&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; 가 모두 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4f8fc7d40062e4c808ea460664fdc3d048a2824" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ConsoleHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values).</source>
          <target state="translated">&lt;code&gt;ConsoleHandler&lt;/code&gt; 기반으로 구성되어 &lt;code&gt;LogManager&lt;/code&gt; 프로퍼티 (또는 기본값).</target>
        </trans-unit>
        <trans-unit id="468370b0a51ca057342fdb1fe58204389f4fdab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Constructor&lt;/code&gt; object for the constructor with the specified parameter list</source>
          <target state="translated">지정된 파라미터리스트를 가지는 생성자 의 &lt;code&gt;Constructor&lt;/code&gt; 객체</target>
        </trans-unit>
        <trans-unit id="bfe2741b9b06f16764928ba36a45cb667f568913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentHandlerFactory&lt;/code&gt; instance is used to construct a content handler from a content type</source>
          <target state="translated">&lt;code&gt;ContentHandlerFactory&lt;/code&gt; 인스턴스는 콘텐츠 유형으로부터 콘텐트 핸들러를 생성하는 데 사용</target>
        </trans-unit>
        <trans-unit id="6e23ef999b2d94dd091ae6002a808cf050bfabb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ControllerEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;Sequencer&lt;/code&gt; has processed a requested type of MIDI control-change event.</source>
          <target state="translated">&lt;code&gt;ControllerEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;code&gt;Sequencer&lt;/code&gt; MIDI 제어 변경 이벤트의 타입의 요청을 처리하고있다.</target>
        </trans-unit>
        <trans-unit id="f48b495c5fff66a44f844b4e81d54ec584a1e19d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ControllerEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;Sequencer&lt;/code&gt; has processed a requested type of MIDI control-change event. To register a &lt;code&gt;ControllerEventListener&lt;/code&gt; object to receive such notifications, invoke the &lt;a href=&quot;sequencer#addControllerEventListener-javax.sound.midi.ControllerEventListener-int:A-&quot;&gt;&lt;code&gt;addControllerEventListener&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;, specifying the types of MIDI controllers about which you are interested in getting control-change notifications.</source>
          <target state="translated">&lt;code&gt;ControllerEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;code&gt;Sequencer&lt;/code&gt; MIDI 제어 변경 이벤트의 타입의 요청을 처리하고있다. 이러한 알림을 받도록 &lt;code&gt;ControllerEventListener&lt;/code&gt; 객체 를 등록하려면 &lt;code&gt;Sequencer&lt;/code&gt; 의 &lt;a href=&quot;sequencer#addControllerEventListener-javax.sound.midi.ControllerEventListener-int:A-&quot;&gt; &lt;code&gt;addControllerEventListener&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 컨트롤 변경 알림을받는 데 관심이있는 MIDI 컨트롤러 유형을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="8c1e7fd606cd7d58420cac08a722d5a8762857c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CyclicBarrier&lt;/code&gt; uses an all-or-none breakage model for failed synchronization attempts: If a thread leaves a barrier point prematurely because of interruption, failure, or timeout, all other threads waiting at that barrier point will also leave abnormally via &lt;a href=&quot;brokenbarrierexception&quot;&gt;&lt;code&gt;BrokenBarrierException&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;../../lang/interruptedexception&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt; if they too were interrupted at about the same time).</source>
          <target state="translated">&lt;code&gt;CyclicBarrier&lt;/code&gt; 실패한 동기화 시도에 대한 모 아니면 없음 파손 모델을 사용하여 조기에 때문에 중단, 실패, 또는 타임 아웃의 장벽 포인트가, 그 장벽 지점에서 대기하는 다른 스레드도를 통해 비정상적으로 떠나 스레드 잎 경우 &lt;a href=&quot;brokenbarrierexception&quot;&gt; &lt;code&gt;BrokenBarrierException&lt;/code&gt; &lt;/a&gt; (또는 &lt;a href=&quot;../../lang/interruptedexception&quot;&gt; &lt;code&gt;InterruptedException&lt;/code&gt; &lt;/a&gt; 그들도 거의 동시에 중단 된 경우).</target>
        </trans-unit>
        <trans-unit id="f41cc015a47378ec64cceb98239ef99d458497d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataInput&lt;/code&gt; interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types.</source>
          <target state="translated">&lt;code&gt;DataInput&lt;/code&gt; 인터페이스는, 바이너리 스트림로부터 바이트를 읽어 Java 프리미티브 유형 중 하나로 그 데이터로부터 재구성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="713665bba38945d968dff6d6d30215a3f4b01909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataInput&lt;/code&gt; interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types. There is also a facility for reconstructing a &lt;code&gt;String&lt;/code&gt; from data in &lt;a href=&quot;#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt; format.</source>
          <target state="translated">&lt;code&gt;DataInput&lt;/code&gt; 인터페이스는, 바이너리 스트림로부터 바이트를 읽어 Java 프리미티브 유형 중 하나로 그 데이터로부터 재구성을 제공합니다. &lt;a href=&quot;#modified-utf-8&quot;&gt;수정 된 UTF-8&lt;/a&gt; 형식의 데이터에서 &lt;code&gt;String&lt;/code&gt; 을 재구성하는 기능도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="55a2923cd40c06c6ccaeab383d62605e85c6dfc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataOutput&lt;/code&gt; interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream.</source>
          <target state="translated">&lt;code&gt;DataOutput&lt;/code&gt; 인터페이스 이진 스트림이 바이트를 바이트 일련 자바 기본 유형의 데이터를 변환하여 기록을 제공한다.</target>
        </trans-unit>
        <trans-unit id="b1c1a548a4fef08005d8b50ede7de089c4162ad9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataOutput&lt;/code&gt; interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream. There is also a facility for converting a &lt;code&gt;String&lt;/code&gt; into &lt;a href=&quot;datainput#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt; format and writing the resulting series of bytes.</source>
          <target state="translated">&lt;code&gt;DataOutput&lt;/code&gt; 인터페이스 이진 스트림이 바이트를 바이트 일련 자바 기본 유형의 데이터를 변환하여 기록을 제공한다. &lt;code&gt;String&lt;/code&gt; 을 &lt;a href=&quot;datainput#modified-utf-8&quot;&gt;수정 된 UTF-8&lt;/a&gt; 형식 으로 변환 하고 결과적인 일련의 바이트를 작성하는 기능도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bae5d85b0a42eaf39decbc0f3619a5ca6e1c5bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; is a concrete implementation of the abstract &lt;code&gt;PersistenceDelegate&lt;/code&gt; class and is the delegate used by default for classes about which no information is available.</source>
          <target state="translated">&lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; 추상의 구체적인 구현 &lt;code&gt;PersistenceDelegate&lt;/code&gt; 의 클래스와 정보를 얻을 수없는 클래스가 디폴트로 사용하는 위양입니다.</target>
        </trans-unit>
        <trans-unit id="75831a1da7576e44d5307c7a6c20301c7e176c73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; is a concrete implementation of the abstract &lt;code&gt;PersistenceDelegate&lt;/code&gt; class and is the delegate used by default for classes about which no information is available. The &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; provides, version resilient, public API-based persistence for classes that follow the JavaBeans&amp;trade; conventions without any class specific configuration.</source>
          <target state="translated">&lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; 추상의 구체적인 구현 &lt;code&gt;PersistenceDelegate&lt;/code&gt; 의 클래스와 정보를 얻을 수없는 클래스가 디폴트로 사용하는 위양입니다. &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; , 모든 클래스의 특정 구성없이 자바 빈즈 &amp;trade; 규칙을 따르는 클래스 버전 공개 API베이스의 지속성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="19c0a619c4b42fee2219550878c9a024c390cb05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DependsOn&lt;/code&gt; example might be coded as follows.</source>
          <target state="translated">&lt;code&gt;DependsOn&lt;/code&gt; 예를 들어 다음과 같이 코딩 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65ab9904319fac8d824298c966242d71776b1070" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Descriptor&lt;/code&gt; for each of these objects will also have a field &lt;code&gt;originalType&lt;/code&gt; that is a string representing the Java type that appeared in the MXBean interface. The format of this string is described in the section &lt;a href=&quot;#type-names&quot;&gt;Type Names&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;Descriptor&lt;/code&gt; 이러한 개체의 각도 필드 것 &lt;code&gt;originalType&lt;/code&gt; MXBean의 인터페이스에 등장하는 Java 유형을 나타내는 문자열입니다. 이 문자열의 형식은 아래 &lt;a href=&quot;#type-names&quot;&gt;유형 이름&lt;/a&gt; 섹션에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f443be3508a6b4f42f8d8c9fdea432ec155aa3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Descriptor&lt;/code&gt; for the &lt;code&gt;MBeanInfo&lt;/code&gt; will have a field &lt;code&gt;mxbean&lt;/code&gt; whose value is the string &quot;&lt;code&gt;true&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;MBeanInfo&lt;/code&gt; 의 &lt;code&gt;Descriptor&lt;/code&gt; 는, 값이 캐릭터 라인 「 &lt;code&gt;true&lt;/code&gt; 」인 &lt;code&gt;mxbean&lt;/code&gt; 필드를 갖게됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f7dec71d977b06ccc515422e0d73eebb02b25d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dictionary&lt;/code&gt; class is the abstract parent of any class, such as &lt;code&gt;Hashtable&lt;/code&gt;, which maps keys to values.</source>
          <target state="translated">&lt;code&gt;Dictionary&lt;/code&gt; 클래스는 같은 클래스의 부모가되는 추상 클래스입니다 &lt;code&gt;Hashtable&lt;/code&gt; 키를 값에 맵합니다.</target>
        </trans-unit>
        <trans-unit id="699c289ae38cf13e2c3626e341eabeb096b9a84c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dictionary&lt;/code&gt; class is the abstract parent of any class, such as &lt;code&gt;Hashtable&lt;/code&gt;, which maps keys to values. Every key and every value is an object. In any one &lt;code&gt;Dictionary&lt;/code&gt; object, every key is associated with at most one value. Given a &lt;code&gt;Dictionary&lt;/code&gt; and a key, the associated element can be looked up. Any non-&lt;code&gt;null&lt;/code&gt; object can be used as a key and as a value.</source>
          <target state="translated">&lt;code&gt;Dictionary&lt;/code&gt; 클래스는 같은 클래스의 부모가되는 추상 클래스입니다 &lt;code&gt;Hashtable&lt;/code&gt; 키를 값에 맵합니다. 모든 키와 모든 값은 객체입니다. 하나의 &lt;code&gt;Dictionary&lt;/code&gt; 개체에서 모든 키는 최대 하나의 값과 연결됩니다. &lt;code&gt;Dictionary&lt;/code&gt; 과 키가 주어지면 관련 요소를 찾을 수 있습니다. &lt;code&gt;null&lt;/code&gt; 아닌 오브젝트는 키 및 값으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac8ca23a09be9f2d05c779e843421c46aa3ea44e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DirContext&lt;/code&gt; interface represents a &lt;em&gt;directory context&lt;/em&gt;. It defines methods for examining and updating attributes associated with a &lt;em&gt;directory object&lt;/em&gt;, or &lt;em&gt;directory entry&lt;/em&gt; as it is sometimes called.</source>
          <target state="translated">&lt;code&gt;DirContext&lt;/code&gt; 인터페이스는 표현 &lt;em&gt;디렉토리 컨텍스트를&lt;/em&gt; . &lt;em&gt;디렉토리 객체&lt;/em&gt; 또는 &lt;em&gt;디렉토리 항목&lt;/em&gt; 과 관련된 속성을 검사하고 업데이트하는 메소드를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="f0d66cda55834a4404c6ebd9f0fc24fcb8fcd600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Double&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;double&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Double&lt;/code&gt; 클래스는 원시적 형의 값 랩 &lt;code&gt;double&lt;/code&gt; 객체에 있습니다.</target>
        </trans-unit>
        <trans-unit id="d119dbf666fc6ea150e2c28f463b377c7a4b4f23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Double&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;double&lt;/code&gt; in an object. An object of type &lt;code&gt;Double&lt;/code&gt; contains a single field whose type is &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Double&lt;/code&gt; 클래스는 원시적 형의 값 랩 &lt;code&gt;double&lt;/code&gt; 객체에 있습니다. &lt;code&gt;Double&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;double&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="bd923e66451c09da1d3d4e1f6626a2df5c8337ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptContext&lt;/code&gt; contains the bindings of scripting variables to application objects to be used during this script execution.</source>
          <target state="translated">&lt;code&gt;ENGINE_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; 의 &lt;code&gt;ScriptContext&lt;/code&gt; 응용 프로그램 개체에 대한 스크립트 변수의 바인딩이 스크립트의 실행 중에 사용되는 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ac2a2597218d88488760abbe3572d583515c44b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERA&lt;/code&gt; field returns a range for the one valid Hijrah era.</source>
          <target state="translated">&lt;code&gt;ERA&lt;/code&gt; 의 필드는 하나의 유효한 신정 시대의 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0000711917ddc5bd5d5eb440dd34fe945066b5e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class is static, so that all &lt;code&gt;AudioFormat&lt;/code&gt; objects that have the same encoding will refer to the same object (rather than different instances of the same class). This allows matches to be made by checking that two format's encodings are equal.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 클래스는 모든 그래서, 정적 &lt;code&gt;AudioFormat&lt;/code&gt; 을 된 동일한 인코딩이 물체 (오히려 동일한 클래스의 다른 인스턴스 이하) 같은 객체를 참조한다. 이를 통해 두 형식의 인코딩이 동일한 지 확인하여 일치시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a1ea0fb7e3f89b73df59f57bc0a3bb25057d04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 클래스는 오디오 스트림에 사용되는 데이터 표현의 특정 유형입니다.</target>
        </trans-unit>
        <trans-unit id="579a96ad9bfb2cbe0dbb67099e0bc3e08f52c25e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream. The encoding includes aspects of the sound format other than the number of channels, sample rate, sample size, frame rate, frame size, and byte order.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 클래스는 오디오 스트림에 사용되는 데이터 표현의 특정 유형입니다. 인코딩에는 채널 수, 샘플 속도, 샘플 크기, 프레임 속도, 프레임 크기 및 바이트 순서 이외의 사운드 형식 측면이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c57bc9aa7ce02ee33576a9afbd97413544332913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventContext&lt;/code&gt; instance on which you invoke the registration methods is the &lt;em&gt;event source&lt;/em&gt; of the events that are (potentially) generated. The source is &lt;em&gt;not necessarily&lt;/em&gt; the object named by the target. Only when the target is the empty name is the object named by the target the source. In other words, the target, along with the scope parameter, are used to identify the object(s) that the listener is interested in, but the event source is the &lt;code&gt;EventContext&lt;/code&gt; instance with which the listener has registered.</source>
          <target state="translated">&lt;code&gt;EventContext&lt;/code&gt; 당신이 등록 메소드를 호출하는 인스턴스입니다 &lt;em&gt;이벤트 소스&lt;/em&gt; (잠재적으로) 생성되는 이벤트. 소스는 &lt;em&gt;반드시&lt;/em&gt; 대상에 의해 명명 된 오브젝트 일 &lt;em&gt;필요&lt;/em&gt; 는 &lt;em&gt;없습니다&lt;/em&gt; . 대상이 빈 이름 인 경우에만 대상이 소스로 명명 한 오브젝트입니다. 다시 말해, 대상은 scope 매개 변수와 함께 리스너가 관심있는 객체를 식별하는 데 사용되지만 이벤트 소스는 리스너가 등록한 &lt;code&gt;EventContext&lt;/code&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="0401b3ef0ddcd75a11b4100c749b173a19fed9a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class is intended to be used by interactive tools, such as application builders, that allow developers to make connections between beans. Typically connections are made from a user interface bean (the event &lt;em&gt;source&lt;/em&gt;) to an application logic bean (the &lt;em&gt;target&lt;/em&gt;). The most effective connections of this kind isolate the application logic from the user interface. For example, the &lt;code&gt;EventHandler&lt;/code&gt; for a connection from a &lt;code&gt;JCheckBox&lt;/code&gt; to a method that accepts a boolean value can deal with extracting the state of the check box and passing it directly to the method so that the method is isolated from the user interface layer.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; 클래스는 개발자가 Bean 간의 접속을 확립하기 위해서 애플리케이션 빌더와 같은 대화 형 툴로 사용하기위한 것입니다. 일반적으로 사용자 인터페이스 Bean (이벤트 &lt;em&gt;소스&lt;/em&gt; )에서 애플리케이션 로직 Bean ( &lt;em&gt;대상&lt;/em&gt; )으로 연결됩니다. 이러한 종류의 가장 효과적인 연결은 응용 프로그램 논리를 사용자 인터페이스에서 분리합니다. 예를 들어, &lt;code&gt;JCheckBox&lt;/code&gt; 에서 부울 값을 허용하는 메소드 로 연결하기위한 &lt;code&gt;EventHandler&lt;/code&gt; 는 선택란의 상태를 추출하여 메소드에 직접 전달하여 메소드가 사용자 인터페이스 계층에서 분리되도록 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="0a0c2cb5421950ae7ac855868e35820ff6dd57b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class provides support for dynamically generating event listeners whose methods execute a simple statement involving an incoming event object and a target object.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; 클래스는 동적으로 그 메소드 수신 이벤트 객체와 타겟 오브젝트를 포함한 단순한 문장을 실행하는 이벤트 리스너를 생성하기위한 지원을 제공한다.</target>
        </trans-unit>
        <trans-unit id="18ab01a7844cde2885367a84cc967515963ae74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executable&lt;/code&gt; declaring this parameter.</source>
          <target state="translated">이 매개 변수를 선언 하는 &lt;code&gt;Executable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="748442734a6da04d6ba765d11eb14f744d0ff842" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executor&lt;/code&gt; implementations provided in this package implement &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt;, which is a more extensive interface. The &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; class provides an extensible thread pool implementation. The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides convenient factory methods for these Executors.</source>
          <target state="translated">&lt;code&gt;Executor&lt;/code&gt; 이 패키지로 제공 구현 구현 &lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; 를&lt;/a&gt; 보다 다양한 인터페이스이다. &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt; 클래스는 확장 가능한 thread 풀 구현을 제공합니다. &lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt; 클래스는 이러한 Executor 용의 편리 성의 높은 팩토리 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="104e889b683697e2a1535a79c04ec73d00af897b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; can either write to a specified file, or it can write to a rotating set of files.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 지정된 파일을 하나 쓰기, 또는 파일의 로테이션 세트에 기록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c629d1686ef85f09a631d3c6d79e16eb2130db7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, and the file count is set to one.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 파일명 패턴으로서 사용되는 것을 제외하고는 속성 (또는 디폴트 값) 파일 한계는 무제한으로 설정하고, 파일의 수는 1로 설정된다.</target>
        </trans-unit>
        <trans-unit id="1630482434078ed5febe3695c2cacb2c6ab11a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, the file count is set to one, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 파일명 패턴으로서 사용되는 것을 제외하고는 속성 (또는 디폴트 값) 파일 제한이 무제한으로 설정되어, 상기 파일의 카운트는 1로 설정되고, 추가 모드가 설정됩니다 주어진 &lt;code&gt;append&lt;/code&gt; 인수에.</target>
        </trans-unit>
        <trans-unit id="87b15897d52aed2848665ab23e99dca1351949cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 지정된 카운트 인수 파일 제한이 제한 인자로 설정 파일명 패턴으로서 사용하고, 파일 개수가 설정되어있는 것을 제외하고 속성 (또는 디폴트 값) 및 append 모드는 주어진 &lt;code&gt;append&lt;/code&gt; 인수로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="a5f603ee32e4c43503a06a42f3d23eed55051d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 파일명 패턴으로서 사용되는 것을 제외하고는 속성 (또는 디폴트 값) 파일 제한은 제한 인자로 설정하고, 파일의 개수가 소정 개수의 인자로 설정된다.</target>
        </trans-unit>
        <trans-unit id="d9aef651c660cc7e3ebf06c721651629cdc87d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;float&lt;/code&gt; 개체에 있습니다.</target>
        </trans-unit>
        <trans-unit id="faf56435fef80020d3a74b994d56ec27fef71d7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object. An object of type &lt;code&gt;Float&lt;/code&gt; contains a single field whose type is &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;float&lt;/code&gt; 개체에 있습니다. &lt;code&gt;Float&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;float&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="ff1bf80c3497af61acd8a7e490e0a49fe5769bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; abstract class provides methods to set and get the control's current floating-point value. Other methods obtain the possible range of values and the control's resolution (the smallest increment between returned values). Some float controls allow ramping to a new value over a specified period of time. &lt;code&gt;FloatControl&lt;/code&gt; also includes methods that return string labels for the minimum, maximum, and midpoint positions of the control.</source>
          <target state="translated">그만큼 &lt;code&gt;FloatControl&lt;/code&gt; 추상 클래스 설정하고 컨트롤의 현재의 부동 소수점 값을 얻을 수있는 방법을 제공합니다. 다른 방법은 가능한 값 범위와 컨트롤의 해상도 (반환 된 값 사이의 최소 증분)를 얻습니다. 일부 플로트 컨트롤을 사용하면 지정된 시간 동안 새로운 값으로 램핑 할 수 있습니다. &lt;code&gt;FloatControl&lt;/code&gt; 에는 컨트롤 의 최소, 최대 및 중간 지점 위치에 대한 문자열 레이블을 반환하는 메서드도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cd58efa168d666747712c3d3c73a1908978fecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; class has methods to impose a maximum and minimum allowable value for gain. However, because an audio signal might already be at a high amplitude, the maximum setting does not guarantee that the signal will be undistorted when the gain is applied to it (unless the maximum is zero or negative). To avoid numeric overflow from excessively large gain settings, a gain control can implement clipping, meaning that the signal's amplitude will be limited to the maximum value representable by its audio format, instead of wrapping around.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; 클래스는 게인의 최대 허용치 및 최소 허용치를 규정하는 방법이있다. 그러나 오디오 신호의 진폭이 이미 높을 수 있으므로 최대 설정은 게인이 적용될 때 신호가 왜곡되지 않도록 보장하지 않습니다 (최대 값이 0 또는 음수가 아닌 한). 지나치게 큰 게인 설정으로 인한 숫자 오버플로를 피하기 위해 게인 컨트롤은 클리핑을 구현할 수 있습니다. 즉, 신호의 진폭이 줄 바꿈 대신 오디오 형식으로 표현할 수있는 최대 값으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="85f7d029dde3a2e7afbc7ce6cee578e8429c56f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; 가 인터페이스는 요구가 사용하는 커스텀 서식하는 것으로 모든 클래스에 의해 구현해야 &lt;code&gt;'s'&lt;/code&gt; 변환 지정자의를&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fdc2f6ed9da54144faf7ffc672bbd4b1c6864d1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints: &lt;code&gt;import java.nio.CharBuffer;
   import java.util.Formatter;
   import java.util.Formattable;
   import java.util.Locale;
   import static java.util.FormattableFlags.*;

  ...

   public class StockName implements Formattable {
       private String symbol, companyName, frenchCompanyName;
       public StockName(String symbol, String companyName,
                        String frenchCompanyName) {
           ...
       }

       ...

       public void formatTo(Formatter fmt, int f, int width, int precision) {
           StringBuilder sb = new StringBuilder();

           // decide form of name
           String name = companyName;
           if (fmt.locale().equals(Locale.FRANCE))
               name = frenchCompanyName;
           boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE;
           boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10);
           String out = (usesymbol ? symbol : name);

           // apply precision
           if (precision == -1 || out.length() &amp;lt; precision) {
               // write it all
               sb.append(out);
           } else {
               sb.append(out.substring(0, precision - 1)).append('*');
           }

           // apply width and justification
           int len = sb.length();
           if (len &amp;lt; width)
               for (int i = 0; i &amp;lt; width - len; i++)
                   if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY)
                       sb.append(' ');
                   else
                       sb.insert(0, ' ');

           fmt.format(sb.toString());
       }

       public String toString() {
           return String.format(&quot;%s - %s&quot;, symbol, companyName);
       }
   }
 &lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; 가 인터페이스는 요구가 사용하는 커스텀 서식하는 것으로 모든 클래스에 의해 구현해야 &lt;code&gt;'s'&lt;/code&gt; 변환 지정자의를&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; . 이 인터페이스를 사용하면 임의의 객체를 포맷하기위한 기본 제어가 가능합니다. 예를 들어, 다음 클래스는 플래그 및 길이 제약 조건에 따라 주식 이름의 다른 표현을 인쇄합니다. &lt;code&gt;import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10); String out = (usesymbol ? symbol : name); // apply precision if (precision == -1 || out.length() &amp;lt; precision) { // write it all sb.append(out); } else { sb.append(out.substring(0, precision - 1)).append('*'); } // apply width and justification int len = sb.length(); if (len &amp;lt; width) for (int i = 0; i &amp;lt; width - len; i++) if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY) sb.append(' '); else sb.insert(0, ' '); fmt.format(sb.toString()); } public String toString() { return String.format(&quot;%s - %s&quot;, symbol, companyName); } } &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ded1b8b780654793fea0795f740f95473dfc0b75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formatter&lt;/code&gt;'s &quot;tail&quot; string is written to the stream before it is closed. In addition, if the &lt;code&gt;Formatter&lt;/code&gt;'s &quot;head&quot; string has not yet been written to the stream, it will be written before the &quot;tail&quot; string.</source>
          <target state="translated">&lt;code&gt;Formatter&lt;/code&gt; 가 닫히기 전에의 &quot;꼬리&quot;문자열을 스트림에 기록됩니다. 또한, &lt;code&gt;Formatter&lt;/code&gt; 의 &quot;head&quot;문자열이 아직 스트림에 기록되지 않은 경우 &quot;tail&quot;문자열 앞에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="5f0017742b86bb525c52b44a372868ba47f8c805" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Future&lt;/code&gt; interface defines the &lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; method to cancel execution. This causes all threads waiting on the result of the I/O operation to throw &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;. Whether the underlying I/O operation can be cancelled is highly implementation specific and therefore not specified. Where cancellation leaves the channel, or the entity to which it is connected, in an inconsistent state, then the channel is put into an implementation specific &lt;em&gt;error state&lt;/em&gt; that prevents further attempts to initiate I/O operations that are</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; (가) 인터페이스를 정의 &lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt; 방법은 실행을 취소합니다. 이로 인해 I / O 작업 결과를 기다리는 모든 스레드가 &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; 을 발생&lt;/a&gt; 시킵니다. 기본 I / O 작업을 취소 할 수 있는지 여부는 구현에 따라 다르므로 지정하지 않았습니다. 취소가 채널 또는 연결된 엔티티를 일관성이없는 상태로 두는 경우, 채널은 구현 특정 &lt;em&gt;오류 상태&lt;/em&gt; 가되어 I / O 작업을 시작하려는 추가 시도를 방해합니다.</target>
        </trans-unit>
        <trans-unit id="0794b1416bd199f56af33739272b109badf5de09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralSecurityException&lt;/code&gt; class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it.</source>
          <target state="translated">&lt;code&gt;GeneralSecurityException&lt;/code&gt; 의 클래스를 확장하는 모든 보안 관련 예외 클래스에 안전한 형태를 제공하는 일반적인 보안 예외 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="8c32683bb604a52bbbd12a72cd3f38b11977a353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GetTimeRequest&lt;/code&gt; and &lt;code&gt;GetTimeResponse&lt;/code&gt; classes might be defined as follows:</source>
          <target state="translated">&lt;code&gt;GetTimeRequest&lt;/code&gt; 및 &lt;code&gt;GetTimeResponse&lt;/code&gt; 의 다음과 같이 클래스를 정의 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="7b3db553a343fd330b52da577c5515316776d097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Handler&lt;/code&gt; is responsible for formatting the message, when and if necessary. The formatting should include localization.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 언제 필요한 경우 메시지를 포맷 할 책임이있다. 서식에는 현지화가 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="91085e13e25b56334d0136ad6a6a3aeb2acef937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOByteBuffer&lt;/code&gt; class provides an alternative way to perform reads of sequences of bytes that reduces the amount of internal data copying.</source>
          <target state="translated">&lt;code&gt;IIOByteBuffer&lt;/code&gt; 의 클래스가 수행 할 수있는 대안적인 방법은 내부 데이터 복사의 양을 감소 바이트 순서로 읽어 제공한다.</target>
        </trans-unit>
        <trans-unit id="a9e351d66bd62ad441f8bd1a17f3defde63a80bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOMetadataController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IIOMetadataController&lt;/code&gt; 이 설정을 제공하는 데 사용됩니다 &lt;code&gt;IIOMetadata&lt;/code&gt; 때 객체 &lt;code&gt;activateController&lt;/code&gt; 의 방법이라고합니다. 이 값은 &lt;code&gt;null&lt;/code&gt; 인 경우에도 기본 컨트롤러를 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="f17066ba75d42abb02e2b439c5a64a255a531a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOParamController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when null.</source>
          <target state="translated">&lt;code&gt;IIOParamController&lt;/code&gt; 이 설정을 제공하는 데 사용됩니다 &lt;code&gt;IIOParam&lt;/code&gt; 의 경우 개체에 &lt;code&gt;activateController&lt;/code&gt; 방법이라고합니다. 이 값은 null 일 때도 기본 컨트롤러를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="1373fac41a2c0fd6a7088e2e48cb2f69a0a7c602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadProgressListener&lt;/code&gt; interface allows for notification of the percentage of an image that has been read successfully.</source>
          <target state="translated">&lt;code&gt;IIOReadProgressListener&lt;/code&gt; 인터페이스가 성공적으로 읽은 이미지의 비율의 통지를 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8efd925d40fc2c06f26f62362d2f5ad61bf84a89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; interface allows for notification of the portions of an image that have been read. This is useful, for example, for implementing dynamic display of an image as it is loaded.</source>
          <target state="translated">&lt;code&gt;IIOReadUpdateListener&lt;/code&gt; 인터페이스는 판독 된 화상의 부분의 통지를 허용한다. 예를 들어 이미지가로드 될 때 동적 표시를 구현하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d9b45fe43fb5e8f36d95b122d8bc0cf608973ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadWarningListener&lt;/code&gt; interface allows for notification of non-fatal errors during reading.</source>
          <target state="translated">&lt;code&gt;IIOReadWarningListener&lt;/code&gt; 에의 인터페이스를 읽는 동안 치명적 오류의 통지를 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b149ec0010741dabc593484f5a58f1f5bb765802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; and &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; interfaces perform analogous functions for writers.</source>
          <target state="translated">&lt;code&gt;IIOWriteWarningListener&lt;/code&gt; 및 &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; 인터페이스 제작자에 대한 유사한 기능을 수행한다.</target>
        </trans-unit>
        <trans-unit id="5ebe107cde1d3bd9a79d28a4e17587461ce4d493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The offset and nano-of-second are unchanged. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; 의 필드는 지정된 순간에 날짜 - 시간을 반환합니다. 오프셋과 나노초는 변하지 않습니다. 새 인스턴트 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2471418c65939f74253b34d90116b39570d73512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The zone and nano-of-second are unchanged. The result will have an offset derived from the new instant and original zone. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; 의 필드는 지정된 순간에 날짜 - 시간을 반환합니다. 영역과 나노초는 변경되지 않습니다. 결과에는 새로운 인스턴트 및 원래 영역에서 파생 된 오프셋이 있습니다. 새 인스턴트 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="26f92023e5949c66d2da17553ce04c03b886aec5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; interface unifies streaming and file-based operations. An abstract base class, &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; is provided to simplify writing a new &lt;code&gt;ImageInputStream&lt;/code&gt; class. Concrete implementation classes (&lt;code&gt;FileImageInputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageInputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt;) are provided that allow input to come from a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;InputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 의 스트리밍을 통합하여 및 파일 기반 작업 인터페이스를 제공합니다. 새로운 &lt;code&gt;ImageInputStream&lt;/code&gt; 클래스 작성을 단순화하기 위해 추상 기본 클래스 인 &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; 이 제공됩니다 . &lt;code&gt;File&lt;/code&gt; 또는 &lt;code&gt;InputStream&lt;/code&gt; 에서 입력을 &lt;code&gt;FileImageInputStream&lt;/code&gt; 구체적 구현 클래스 ( FileImageInputStream , &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; 및 &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt; )가 제공됩니다.임시 캐시 파일을 사용하거나 사용하지 않고 됩니다.</target>
        </trans-unit>
        <trans-unit id="23787e7b0f5233202db60183744cb5ba7ec81a77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; by &lt;code&gt;setInput&lt;/code&gt; and retrieved by &lt;code&gt;getInput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 또는 다른 &lt;code&gt;Object&lt;/code&gt; 에 의해 &lt;code&gt;setInput&lt;/code&gt; 에 의해 검색 &lt;code&gt;getInput&lt;/code&gt; 에 . 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="e870028a4bcce49d6ab74abb2d0fee3053be5245" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; interface performs an analogous function for output. An abstract base class, &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; is provided, along with concrete implementation classes (&lt;code&gt;FileImageOutputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt;) are provided that allow output to go to a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;OutputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; 인터페이스 출력을 위해 유사한 기능을 수행한다. 출력이 &lt;code&gt;File&lt;/code&gt; 또는 &lt;code&gt;OutputStream&lt;/code&gt; 으로 이동할 수 있도록 하는 구체적인 구현 클래스 ( &lt;code&gt;FileImageOutputStream&lt;/code&gt; , &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt; 및 &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt; ) 와 함께 추상 기본 클래스 인 &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; 이 제공됩니다.임시 캐시 파일을 사용하거나 사용하지 않고 으로 됩니다.</target>
        </trans-unit>
        <trans-unit id="c654707cc8b01173251db888e4e9f1cadc54a60a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; set by &lt;code&gt;setOutput&lt;/code&gt; and retrieved by &lt;code&gt;getOutput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; 또는 다른 &lt;code&gt;Object&lt;/code&gt; 세트로 &lt;code&gt;setOutput&lt;/code&gt; 에 의해 검색 &lt;code&gt;getOutput&lt;/code&gt; . 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="23d39dd66eefdd5b7e22c2d48611d45e7fe19e03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageReaderSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이 객체를 인스턴스화 한 &lt;code&gt;ImageReaderSpi&lt;/code&gt; . 식별 정보가 불명, 또는 존재하지 않는 경우는 &lt;code&gt;null&lt;/code&gt; 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="1558624413839f825eafd92b1012f6d775cab0ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageWriterSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이 객체의 인스턴스를 생성 한 &lt;code&gt;ImageWriterSpi&lt;/code&gt; . 식별 정보를 모르거나 존재하지 않는 경우는 &lt;code&gt;null&lt;/code&gt; 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="c187ac2b0346d6275a729d49e9e4b70887e64296" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; 클래스 프리미티브 타입의 값 랩 &lt;code&gt;int&lt;/code&gt; 오브젝트하여.</target>
        </trans-unit>
        <trans-unit id="62ec9068383653f569a3d3699ea099197809c35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object. An object of type &lt;code&gt;Integer&lt;/code&gt; contains a single field whose type is &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; 클래스 프리미티브 타입의 값 랩 &lt;code&gt;int&lt;/code&gt; 오브젝트하여. &lt;code&gt;Integer&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;int&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="10e129e33f3b53fc80b1e431c4205e048b0ed9d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; 를의 클래스를 열 수있는 임의의 파일로부터 jar 파일의 내용을 읽어 내는데 사용 &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="7fc173f631c97a9b4dcc50fc6b42b14623acad99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;. It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the jar file and its entries.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; 를의 클래스를 열 수있는 임의의 파일로부터 jar 파일의 내용을 읽어 내는데 사용 &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 의 . 선택적 &lt;code&gt;Manifest&lt;/code&gt; 항목 을 읽을 수 있도록 &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; 클래스를 확장합니다 . &lt;code&gt;Manifest&lt;/code&gt; jar 파일과 그 항목에 대한 메타 정보를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9792439c8b85ffb254058fa07ee9e18ecd9179ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; 의 클래스는 임의의 입력 스트림으로부터 JAR 파일의 내용을 판독하기 위해 사용된다.</target>
        </trans-unit>
        <trans-unit id="69fcbab6dd2a8326db4e277f74e623e45080d92f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream. It extends the class &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to store meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; 의 클래스는 임의의 입력 스트림으로부터 JAR 파일의 내용을 판독하기 위해 사용된다. 선택적 &lt;code&gt;Manifest&lt;/code&gt; 항목 을 읽을 수 있도록 &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; 클래스를 확장합니다 . &lt;code&gt;Manifest&lt;/code&gt; JAR 파일과 그 항목에 대한 메타 정보를 저장하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b21ac43a5a90b457145ee7b48bcabedf9e126557" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; 의 클래스는 모든 출력 스트림에 JAR 파일의 내용을 작성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8e11ba91a7108003e4972a4752848ed577893864" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream. It extends the class &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; with support for writing an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; 의 클래스는 모든 출력 스트림에 JAR 파일의 내용을 작성하는 데 사용됩니다. 선택적 &lt;code&gt;Manifest&lt;/code&gt; 항목 작성을 지원하여 &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; 클래스를 확장합니다 . &lt;code&gt;Manifest&lt;/code&gt; JAR 파일과 그 항목에 대한 메타 정보를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30a19dcac608ceb517d3a3561447251ee1e2014f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; 인터페이스는 모노 또는 멀티 채널 오디오 피드를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="c0a9c7f256b3eaca5dedae690146aa91b18206a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed. A line is an element of the digital audio &quot;pipeline,&quot; such as a mixer, an input or output port, or a data path into or out of a mixer.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; 인터페이스는 모노 또는 멀티 채널 오디오 피드를 나타낸다. 라인은 믹서, 입력 또는 출력 포트 또는 믹서 내외부 데이터 경로와 같은 디지털 오디오 &quot;파이프 라인&quot;의 요소입니다.</target>
        </trans-unit>
        <trans-unit id="5d3a35d12e8c0c113e33da5350a5b5580d8cb3c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; 의 클래스는 라인이 닫히고, 시작, 또는 중지를 열 때마다 광고가 청취자에게 송신하는 정보를 캡슐화한다.</target>
        </trans-unit>
        <trans-unit id="537f7328063a159d8e4878b6fccbf45636c737b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops. Each of these four state changes is represented by a corresponding type of event. A listener receives the event as a parameter to its &lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; method. By querying the event, the listener can learn the type of event, the line responsible for the event, and how much data the line had processed when the event occurred.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; 의 클래스는 라인이 닫히고, 시작, 또는 중지를 열 때마다 광고가 청취자에게 송신하는 정보를 캡슐화한다. 이 네 가지 상태 변경은 각각 해당하는 이벤트 유형으로 표시됩니다. 리스너는 &lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt; 메소드에 대한 매개 변수로 이벤트를 수신합니다 . 리스너는 이벤트를 조회하여 이벤트 유형, 이벤트를 담당하는 회선 및 이벤트 발생시 회선이 처리 한 데이터 양을 학습 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19683692a3cac37612a80dd55d3fd092b1967a4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface places additional stipulations, beyond those specified in the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of the &lt;code&gt;iterator&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스에서 규정 한 이상, 추가 규정을 배치 &lt;code&gt;Collection&lt;/code&gt; 의 계약에 인터페이스 &lt;code&gt;iterator&lt;/code&gt; , &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; , &lt;code&gt;equals&lt;/code&gt; 및 &lt;code&gt;hashCode&lt;/code&gt; 방법. 편의상 다른 상속 된 메소드에 대한 선언도 여기에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a0ba9a5b693daac5c19b3fccbb0faf8853cdabbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides a special iterator, called a &lt;code&gt;ListIterator&lt;/code&gt;, that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the &lt;code&gt;Iterator&lt;/code&gt; interface provides. A method is provided to obtain a list iterator that starts at a specified position in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스는라는 특별한 반복자 제공 &lt;code&gt;ListIterator&lt;/code&gt; 요소 삽입 및 교체하고있는 일반적인 작업뿐만 아니라 양방향 액세스 할 수 있습니다, &lt;code&gt;Iterator&lt;/code&gt; 인터페이스를 제공합니다. 리스트의 지정된 위치에서 시작하는리스트 반복자를 얻는 방법이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="2b090913d205b579f0fbce24a3f90785bc1ba625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides four methods for positional (indexed) access to list elements. Lists (like Java arrays) are zero based. Note that these operations may execute in time proportional to the index value for some implementations (the &lt;code&gt;LinkedList&lt;/code&gt; class, for example). Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스 목록에 대한 위치 요소 (인덱스) 액세스를위한 네 가지 방법을 제공한다. Java 배열과 같은 목록은 0부터 시작합니다. 이러한 작업은 일부 구현 ( 예 : &lt;code&gt;LinkedList&lt;/code&gt; 클래스) 의 인덱스 값에 비례하여 시간에 따라 실행될 수 있습니다 . 따라서, 호출자가 구현을 모르는 경우 목록의 요소를 반복하는 것이 일반적으로이를 통해 색인화하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="70355f014486445e2f19c1b1f444e1ecb381cd12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to efficiently insert and remove multiple elements at an arbitrary point in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스를 효율적으로 삽입하고,리스트 내의 임의의 점에서 복수의 요소를 제거하는 두 가지 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="fe82cde6eede4b779cf568cf70079098275cd445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to search for a specified object. From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스는 지정된 객체를 검색하는 두 가지 방법을 제공합니다. 성능 관점에서 이러한 방법은주의해서 사용해야합니다. 많은 구현에서 그들은 값 비싼 선형 검색을 수행 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="80c3e343f9a3334aa90fca73bdf887fa22a1c873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports an extension mechanism that can be used to identify a calendar system. The mechanism is a form of key-value pairs, where the calendar system has the key &quot;ca&quot;. For example, the locale &quot;en-JP-u-ca-japanese&quot; represents the English language as used in Japan with the Japanese calendar system.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스는 달력 시스템을 식별하는 데 사용할 수있는 확장 메커니즘을 지원합니다. 이 메커니즘은 달력 시스템에 키 &quot;ca&quot;가있는 키-값 쌍의 형태입니다. 예를 들어 로케일 &quot;en-JP-u-ca-japanese&quot;는 일본어 달력 시스템과 함께 일본에서 사용되는 영어를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="df60f90896c3c9a6114af933224b8f6b6310599a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports language codes up to 8 characters in length. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스는 길이가 8 자 언어 코드를 지원합니다. 따라서이 메서드가 반환 한 목록에는 로캘을 만드는 데 사용할 수있는 유효한 코드가 모두 포함되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ff489719e325fe97b92428c9169b9fa65846b849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class implements IETF BCP 47 which is composed of &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;Matching of Language Tags&quot;&lt;/a&gt; and &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;RFC 5646 &quot;Tags for Identifying Languages&quot;&lt;/a&gt; with support for the LDML (UTS#35, &quot;Unicode Locale Data Markup Language&quot;) BCP 47-compatible extensions for locale data exchange.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 로 구성되어 클래스가 구현하는 IETF BCP 47 &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;언어 태그의 일치&quot;&lt;/a&gt; 와 &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;&quot;언어 식별 태그&quot;RFC 5646&lt;/a&gt; (UTS # 35, &quot;유니 코드 로케일 데이터 마크 업 언어&quot;) BCP 47 호환 LDML에 대한 지원 로케일 데이터 교환을위한 확장.</target>
        </trans-unit>
        <trans-unit id="b49e579633330874272c018a016eeeecd34916da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides a number of convenient constants that you can use to create &lt;code&gt;Locale&lt;/code&gt; objects for commonly used locales. For example, the following creates a &lt;code&gt;Locale&lt;/code&gt; object for the United States:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스를 생성하는 데 사용할 수있는 편리한 상수의 숫자 제공 &lt;code&gt;Locale&lt;/code&gt; 일반적으로 사용되는 로케일 오브젝트를. 예를 들어 다음은 미국에 대한 &lt;code&gt;Locale&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="fa1e07d1d615f3001a87ae91c2a0604617a8b571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides three constructors:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스는 세 개의 생성자를 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="753e94e16d15c98e2261f7d3bdcddbdc2d027d5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; 클래스는 인증 용 주제에 사용되는 기본적인 방법을 설명하고 기본 인증 기술에 의존하지 않는 어플리케이션 개발하는 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="98c21b51d0ddf913deb3a4a49b2303d25a261498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. A &lt;code&gt;Configuration&lt;/code&gt; specifies the authentication technology, or &lt;code&gt;LoginModule&lt;/code&gt;, to be used with a particular application. Different LoginModules can be plugged in under an application without requiring any modifications to the application itself.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; 클래스는 인증 용 주제에 사용되는 기본적인 방법을 설명하고 기본 인증 기술에 의존하지 않는 어플리케이션 개발하는 방법을 제공한다. &lt;code&gt;Configuration&lt;/code&gt; 인증 기술 또는 지정 &lt;code&gt;LoginModule&lt;/code&gt; 의 특정 응용에 사용되는이. 응용 프로그램 자체를 수정하지 않고도 응용 프로그램에서 다른 LoginModule을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24bd53fa001fd556da21468c145af7d9ff2e52d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; is responsible for reading the &lt;code&gt;Configuration&lt;/code&gt; and instantiating the appropriate LoginModules. Each &lt;code&gt;LoginModule&lt;/code&gt; is initialized with a &lt;code&gt;Subject&lt;/code&gt;, a &lt;code&gt;CallbackHandler&lt;/code&gt;, shared &lt;code&gt;LoginModule&lt;/code&gt; state, and LoginModule-specific options. The &lt;code&gt;Subject&lt;/code&gt; represents the &lt;code&gt;Subject&lt;/code&gt; currently being authenticated and is updated with relevant Credentials if authentication succeeds. LoginModules use the &lt;code&gt;CallbackHandler&lt;/code&gt; to communicate with users. The &lt;code&gt;CallbackHandler&lt;/code&gt; may be used to prompt for usernames and passwords, for example. Note that the &lt;code&gt;CallbackHandler&lt;/code&gt; may be null. LoginModules which absolutely require a &lt;code&gt;CallbackHandler&lt;/code&gt; to authenticate the &lt;code&gt;Subject&lt;/code&gt; may throw a &lt;code&gt;LoginException&lt;/code&gt;. LoginModules optionally use the shared state to share information or data among themselves.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; 판독에 대한 책임이 &lt;code&gt;Configuration&lt;/code&gt; 적절한 로그인 모듈 및 인스턴스화. 각 &lt;code&gt;LoginModule&lt;/code&gt; 은 &lt;code&gt;Subject&lt;/code&gt; , &lt;code&gt;CallbackHandler&lt;/code&gt; , 공유 &lt;code&gt;LoginModule&lt;/code&gt; 상태 및 LoginModule 관련 옵션 으로 초기화됩니다 . &lt;code&gt;Subject&lt;/code&gt; 대표하는 &lt;code&gt;Subject&lt;/code&gt; 현재 인증 된 인증이 성공하면 관련 자격 증명으로 업데이트됩니다. LoginModule은 &lt;code&gt;CallbackHandler&lt;/code&gt; 를 사용하여 사용자와 통신합니다. &lt;code&gt;CallbackHandler&lt;/code&gt; 예를 들어, 사용자 이름과 암호에 대한 프롬프트로 사용할 수있다. 참고 그 &lt;code&gt;CallbackHandler&lt;/code&gt; null 일 수 있습니다. &lt;code&gt;Subject&lt;/code&gt; 를 인증하기 위해 반드시 &lt;code&gt;CallbackHandler&lt;/code&gt; 가 필요한 LoginModule 은 &lt;code&gt;LoginException&lt;/code&gt; 을 던질 수 있습니다 . LoginModule은 선택적으로 공유 상태를 사용하여 정보 또는 데이터를 서로 공유합니다.</target>
        </trans-unit>
        <trans-unit id="7801867034780a1c5fff70e8cc7e32057101d13e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 클래스는 원시적 형의 값을 감싸는 &lt;code&gt;long&lt;/code&gt; 물체에.</target>
        </trans-unit>
        <trans-unit id="e7f5fb0211de99c25185ee45c0d498d693daf127" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object. An object of type &lt;code&gt;Long&lt;/code&gt; contains a single field whose type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 클래스는 원시적 형의 값을 감싸는 &lt;code&gt;long&lt;/code&gt; 물체에. &lt;code&gt;Long&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;long&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="b73aaaf679d63a88eb466b691fdb58c718db13f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 클래스의 통지 Java 클래스 들면 MBean에 의해 방출 된 상이한 통지 경우의 특성을 설명하는 데 사용된다.</target>
        </trans-unit>
        <trans-unit id="8c0d93d2a05b2c51593dc81a25c6a33e58b7c2f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification. If an MBean emits notifications that can be instances of different Java classes, then the metadata for that MBean should provide an &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; object for each of these notification Java classes.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 클래스의 통지 Java 클래스 들면 MBean에 의해 방출 된 상이한 통지 경우의 특성을 설명하는 데 사용된다. MBean이 다른 Java 클래스의 인스턴스 일 수있는 알림을 생성하는 경우 해당 MBean의 메타 데이터 는 이러한 각 알림 Java 클래스에 대해 &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 오브젝트를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ba64fec83d48a2cbf38343d1715ffb0852ef3636" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached. This is the last value passed to &lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt;&lt;/a&gt; on this object, or null if that method has never been called.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; 되는이 커넥터 서버가 부착된다. 이 객체의 &lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt; &lt;/a&gt; 에 전달 된 마지막 값 이거나, 해당 메소드가 호출되지 않은 경우 널입니다.</target>
        </trans-unit>
        <trans-unit id="0a8a2b2991ac645b67698f44548fc7e282981c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MLET&lt;/code&gt; tag has the following syntax:</source>
          <target state="translated">&lt;code&gt;MLET&lt;/code&gt; 태그의 구문은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="41d6128d4ea5a41adf8b5c56d1c50b772d8bb991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform.</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; 클래스는 Java 플랫폼의 관리 빈을 취득하기위한 팩토리 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d71986942be1c54b6a6ae12607dd5829e664ceed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform. This class consists of static methods each of which returns one or more</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; 클래스는 Java 플랫폼의 관리 빈을 취득하기위한 팩토리 클래스입니다. 이 클래스는 정적 메소드로 구성되며 각 메소드는 하나 이상을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="da35ea78eb0bbad93818f873018df137e9342c23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map.Entry&lt;/code&gt; elements traversed by the &lt;code&gt;iterator&lt;/code&gt; or &lt;code&gt;spliterator&lt;/code&gt; do &lt;em&gt;not&lt;/em&gt; support the &lt;code&gt;setValue&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;Map.Entry&lt;/code&gt; 의해 횡단 요소 &lt;code&gt;iterator&lt;/code&gt; 또는 &lt;code&gt;spliterator&lt;/code&gt; 는 않습니다 &lt;em&gt;하지&lt;/em&gt; 지원 &lt;code&gt;setValue&lt;/code&gt; 작업을.</target>
        </trans-unit>
        <trans-unit id="227699f0dce7484c6d17e1d7babad6ee5858c1d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; interface provides three</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 인터페이스는 세 가지를 제공합니다</target>
        </trans-unit>
        <trans-unit id="9428a88bd8c1667c06a6e1c738d06e6c61771810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt;&lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;JMXConnectorProvider&lt;/code&gt; 에 전달 된 &lt;code&gt;Map&lt;/code&gt; 매개 변수 는 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에있는 모든 항목 을 &lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt; &lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt; &lt;/a&gt; (있는 경우)에 포함 하는 새로운 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 입니다 . 또한 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; 키가 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에 없으면 새 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 에 추가됩니다 . 연관된 값은 호출 스레드의 컨텍스트 클래스 로더입니다.</target>
        </trans-unit>
        <trans-unit id="fccf20df23e6200637aa7b23e7388c8a9a88bb06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; 에 전달 된 &lt;code&gt;Map&lt;/code&gt; 매개 변수 는 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에있는 모든 항목 을 &lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt; &lt;/a&gt; (있는 경우)에 포함 하는 새로운 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 입니다 . 또한 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; 키가 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에 없으면 새 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 에 추가됩니다 . 연관된 값은 호출 스레드의 컨텍스트 클래스 로더입니다.</target>
        </trans-unit>
        <trans-unit id="8b01e42df4caf57c30334c7ef0ef0673760d8b60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given &lt;code&gt;pushLevel&lt;/code&gt; argument and buffer size argument are used.</source>
          <target state="translated">&lt;code&gt;MemoryHandler&lt;/code&gt; 을 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 것을 제외 특성 (또는 기본값) &lt;code&gt;pushLevel&lt;/code&gt; 의 인수 및 크기 인자 버퍼가 사용된다.</target>
        </trans-unit>
        <trans-unit id="8e6c1d6da906bc1b50ed3822bfcdb7ac20a1aee1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryMXBean&lt;/code&gt; object returned by &lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt;&lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt;&lt;/a&gt; implements the &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt;&lt;code&gt;NotificationEmitter&lt;/code&gt;&lt;/a&gt; interface that allows a listener to be registered within the &lt;code&gt;MemoryMXBean&lt;/code&gt; as a notification listener. Below is an example code that registers a &lt;code&gt;MyListener&lt;/code&gt; to handle notification emitted by the &lt;code&gt;MemoryMXBean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MemoryMXBean&lt;/code&gt; 에 의해 리턴 된 객체 &lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt; &lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt; &lt;/a&gt; 유단 &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt; &lt;code&gt;NotificationEmitter&lt;/code&gt; &lt;/a&gt; 리스너가 내에 등록 될 수 있도록 인터페이스 &lt;code&gt;MemoryMXBean&lt;/code&gt; 에 통지를 청취자로. 아래는 &lt;code&gt;MemoryMXBean&lt;/code&gt; 에 의해 생성 된 알림을 처리하기 위해 &lt;code&gt;MyListener&lt;/code&gt; 를 등록하는 예제 코드입니다 .</target>
        </trans-unit>
        <trans-unit id="5864b743917b0ab45bb87ab5b12728c29a56a04c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 가공했다 &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의이 .</target>
        </trans-unit>
        <trans-unit id="91e79b4c499b3f35a4dda98bb1b312a4085719a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. To register a &lt;code&gt;MetaEventListener&lt;/code&gt; object to receive such notifications, pass it as the argument to the &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 가공했다 &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의이 . 이러한 알림을 받도록 &lt;code&gt;MetaEventListener&lt;/code&gt; 객체 를 등록하려면 &lt;code&gt;Sequencer&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 메소드에 인수로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="d01c40b457907a7d5e20ffd74ad4b85ee2009577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; 클래스는, 신디사이저, 시퀀서, MIDI 입출력 포트 등의 디바이스를 포함하는 설치 MIDI 시스템 자원에 대한 액세스를 제공한다.</target>
        </trans-unit>
        <trans-unit id="a80d68435a1b6165c900a036816b9bec6091ed82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports. A typical simple MIDI application might begin by invoking one or more &lt;code&gt;MidiSystem&lt;/code&gt; methods to learn what devices are installed and to obtain the ones needed in that application.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; 클래스는, 신디사이저, 시퀀서, MIDI 입출력 포트 등의 디바이스를 포함하는 설치 MIDI 시스템 자원에 대한 액세스를 제공한다. 일반적인 간단한 MIDI 응용 프로그램은 어떤 장치가 설치되어 있는지 알고 해당 응용 프로그램에 필요한 장치를 얻기 위해 하나 이상의 &lt;code&gt;MidiSystem&lt;/code&gt; 메서드를 호출하여 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b52eb410a08736554d78710757e24ecd5480df64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; 의 클래스는 텍스트 설명과 함께 제품의 이름, 버젼, 벤더 등, 오디오 믹서에 관한 정보를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e56a0592321beb830ad7682fabbd101887d52b64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description. This information may be retrieved through the &lt;a href=&quot;mixer#getMixerInfo--&quot;&gt;&lt;code&gt;getMixerInfo&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Mixer&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; 의 클래스는 텍스트 설명과 함께 제품의 이름, 버젼, 벤더 등, 오디오 믹서에 관한 정보를 나타냅니다. 이 정보는 &lt;code&gt;Mixer&lt;/code&gt; 인터페이스 의 &lt;a href=&quot;mixer#getMixerInfo--&quot;&gt; &lt;code&gt;getMixerInfo&lt;/code&gt; &lt;/a&gt; 메소드를 통해 검색 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="788c03b8eac033377287b7f6bcedc89c000e71cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the &lt;code&gt;AttributeValue&lt;/code&gt; component is determined by the &lt;code&gt;AttributeType&lt;/code&gt;; in general it will be a &lt;code&gt;directoryString&lt;/code&gt;. A &lt;code&gt;directoryString&lt;/code&gt; is usually one of &lt;code&gt;PrintableString&lt;/code&gt;, &lt;code&gt;TeletexString&lt;/code&gt; or &lt;code&gt;UniversalString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 같은 미국과 같은 나라 이름과 속성 및 해당 값으로 구성된 계층 이름을 설명합니다. 의 형식 &lt;code&gt;AttributeValue&lt;/code&gt; 성분에 의해 결정된다 &lt;code&gt;AttributeType&lt;/code&gt; 에 ; 일반적으로 &lt;code&gt;directoryString&lt;/code&gt; 이 됩니다. &lt;code&gt;directoryString&lt;/code&gt; 입니다은 보통 중 하나입니다 &lt;code&gt;PrintableString&lt;/code&gt; , &lt;code&gt;TeletexString&lt;/code&gt; 또는 &lt;code&gt;UniversalString&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e5c1c5d6176d58d28e9f865eee359984e02049b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 구성 요소의 정렬 순서 - 인터페이스는 일반적인 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="99d457ffbc6e55d6f5c1d1e7729fba20a1b311b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components. It can be a composite name (names that span multiple namespaces), or a compound name (names that are used within individual hierarchical naming systems).</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 구성 요소의 정렬 순서 - 인터페이스는 일반적인 이름을 나타냅니다. 복합 이름 (여러 네임 스페이스에 걸쳐있는 이름) 또는 복합 이름 (개별 계층 이름 지정 시스템 내에서 사용되는 이름) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b6edeb494d6ac7e0b5caa00f1aa813d7ae827c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NamingEvent&lt;/code&gt;'s state consists of</source>
          <target state="translated">&lt;code&gt;NamingEvent&lt;/code&gt; 에 의 상태는 다음과 같이 구성</target>
        </trans-unit>
        <trans-unit id="c86cac2e51c5a47693977a50e2b8c6b5729d2050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NetworkInterface&lt;/code&gt; this interface is attached to.</source>
          <target state="translated">&lt;code&gt;NetworkInterface&lt;/code&gt; 이 인터페이스에 부착된다.</target>
        </trans-unit>
        <trans-unit id="c4f24312524d645707d6367d6e45b401e6f4d5c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; that led to the parsing error, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 파싱 오류, 또는 주도한다는 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1400dea5eb2e0f1d272329a6fddf1dde956ad2ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; 에 의해 반환 된 ID에 의해 식별된다 &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="e9f0f1aa295652b71a3e12c32b29eaa12cfad79e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; 에 의해 반환 된 ID에 의해 식별된다 &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="2c9376e7cc0383d27533cd38986f773a0a05e444" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a date-time with the specified offset. The local date-time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; 의 필드는 지정된 오프셋과 날짜 - 시간을 반환합니다. 현지 날짜-시간은 변경되지 않습니다. 새 오프셋 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1918dcc7fcc29b6bc425b2c6f7a8a0dcc372038d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a time with the specified offset. The local time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; 의 필드는 지정된 오프셋으로 시간을 반환합니다. 현지 시간은 변경되지 않습니다. 새 오프셋 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5b99274c982da4f70821c4ca9b3b72ad4b9daf7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will typically be ignored. The offset of a &lt;code&gt;ZonedDateTime&lt;/code&gt; is controlled primarily by the time-zone. As such, changing the offset does not generally make sense, because there is only one valid offset for the local date-time and zone. If the zoned date-time is in a daylight savings overlap, then the offset is used to switch between the two valid offsets. In all other cases, the offset is ignored. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; 의 필드는 일반적으로 무시됩니다. &lt;code&gt;ZonedDateTime&lt;/code&gt; 의 오프셋은 주로 시간대에 의해 제어됩니다. 따라서 로컬 날짜-시간 및 영역에 대해 유효한 오프셋이 하나만 있기 때문에 오프셋을 변경하는 것은 일반적으로 의미가 없습니다. 존 날짜-시간이 일광 절약 시간제에 겹치는 경우 오프셋은 두 유효한 오프셋 사이를 전환하는 데 사용됩니다. 다른 모든 경우에는 오프셋이 무시됩니다. 새 오프셋 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="dcf77ee080e78ac2d4bb93c007b8230ccb51fe01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; associated with a node that accepts enumerated values must be equal to one of the values returned by this method, as defined by the &lt;code&gt;==&lt;/code&gt; operator (as opposed to the &lt;code&gt;Object.equals&lt;/code&gt; method).</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 에 의해 정의 된 열거 된 값은이 방법에 의해 리턴 된 값 중 하나와 동일해야받는 노드와 연관된 &lt;code&gt;==&lt;/code&gt; 의 합니다 (반대로 작업자 &lt;code&gt;Object.equals&lt;/code&gt; 법).</target>
        </trans-unit>
        <trans-unit id="a1119954570aff30608ab91b67db57a1edb87ff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBean에 관련된 의해 지정된 &lt;var&gt;name&lt;/var&gt; . 포함 된 &lt;code&gt;ObjectName&lt;/code&gt; 은 &lt;code&gt;name&lt;/code&gt; 이고 포함 된 클래스 이름은 &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b503bdd5bfbf40758607910f1e62bc31dd68e802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBean에 관련된 의해 지정된 &lt;var&gt;name&lt;/var&gt; . 포함 된 &lt;code&gt;ObjectName&lt;/code&gt; 은 &lt;code&gt;name&lt;/code&gt; 이고 포함 된 클래스 이름은 &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c4bb59ef2d57c5a36b82e56b3ef8695a22a0311d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a garbage collector within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 가비지 컬렉터의 MXBean를 식별은 :</target>
        </trans-unit>
        <trans-unit id="0b9021e57442d401347cae33e09b53197bbb0b25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory manager within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 메모리 관리자의 MXBean를 식별은 :</target>
        </trans-unit>
        <trans-unit id="bb1a05072aa2847772982c43cf0d890c7cae913a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory pool within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; 는 고유 내에서 메모리 풀의 MXBean를 식별 &lt;code&gt;MBeanServer&lt;/code&gt; 있습니다 :</target>
        </trans-unit>
        <trans-unit id="db98f30b0477805218b1ae4bdb074256518e5803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the class loading system within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; 는 고유 내에서 클래스 로딩 시스템의 MXBean를 식별 &lt;code&gt;MBeanServer&lt;/code&gt; 있습니다 :</target>
        </trans-unit>
        <trans-unit id="55e8342fd743f84bda60cd36babb3e068a2e6ec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the compilation system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 컴파일 시스템의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="70515004bb956a637a0eaf59af0413164c30fb86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the memory system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 메모리 시스템의 MXBean를 식별은 :</target>
        </trans-unit>
        <trans-unit id="c1f16184d09f51af30331c1389e9013ddc4a17df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the operating system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 운영 체제의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="07da8e2d7411da3d53f255c201b631c0ac856d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the runtime system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 런타임 시스템의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="e9552b5b6f9a739364bfe6b9bdedc853e8972846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the thread system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내에서 thread 시스템의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="9dcfa6a1fe8b9264f0661c006080ec7572ae4b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; class describes the management information of an</source>
          <target state="translated">&lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; 의 클래스는의 관리 정보를 기술</target>
        </trans-unit>
        <trans-unit id="b203a779783192d8423055b7a1a9da6d91af0f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; class is the parent abstract class of all classes which describe the actual</source>
          <target state="translated">&lt;code&gt;OpenType&lt;/code&gt; 클래스는 실제를 설명하는 모든 클래스의 부모 추상 클래스입니다</target>
        </trans-unit>
        <trans-unit id="0d757ff4a6ac675a5b4871ec062085d8cdb8da98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; 는 X.509 인증 경로가 PKIX (RFC 3280) 표준에 따라 유효하지 않을 수 있다는 가능성 PKIX 특정 이유를 열거합니다.</target>
        </trans-unit>
        <trans-unit id="42733b5171c383bf12f9d4a04e020e12857e5e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard. These reasons are in addition to those of the &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; enumeration.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; 는 X.509 인증 경로가 PKIX (RFC 3280) 표준에 따라 유효하지 않을 수 있다는 가능성 PKIX 특정 이유를 열거합니다. 이러한 이유는 &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; 열거 의 이유에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="b88e3cb7dd76f092b2f7b4a5b2cc4c9436fd4cea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; corresponding to the given name, or &lt;code&gt;null&lt;/code&gt; if not found</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 지정된 이름, 또는에 해당하는 &lt;code&gt;null&lt;/code&gt; 이 발견되지 않는 경우는</target>
        </trans-unit>
        <trans-unit id="90672781ed476b480c2d01bbaf4b2e5adafc4b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; is obtained by invoking the &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;filesystems#getDefault--&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 호출에 의해 얻어진다 &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; 의&lt;/a&gt; 의 방법 &lt;a href=&quot;filesystems#getDefault--&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt; &lt;code&gt;FileSystem&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c79b8bbdbc6232b5734fc46d1a5e28d6bbf32c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pattern&lt;/code&gt; engine performs traditional NFA-based matching with ordered alternation as occurs in Perl 5.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 펄 5 발생할 때 엔진은 명령 교대 전통적인 NFA 기반의 정합을 수행한다.</target>
        </trans-unit>
        <trans-unit id="92995c19fa227cf2ab96897ff5eedb351ff466d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Permission&lt;/code&gt; class for link creation operations.</source>
          <target state="translated">&lt;code&gt;Permission&lt;/code&gt; 링크 생성 작업을위한 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="b15cfab53ee2a0eadd7dc3e89c6e3054abf67006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; object is also registered with the platform &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;MBeanServer&lt;/a&gt;. The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; for uniquely identifying the &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; 목적은 플랫폼에 등록 &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;의 MBeanServer&lt;/a&gt; . &lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; 를&lt;/a&gt; 고유하게 식별하는 &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; 의 MBeanServer 내에서이다 :</target>
        </trans-unit>
        <trans-unit id="176ebc50958434620dc6e1fc7aedbf4aa4c19395" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Policy&lt;/code&gt; object consults the local policy and returns and appropriate &lt;code&gt;Permissions&lt;/code&gt; object with the Permissions granted to the Principals associated with the provided</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; 객체는 로컬 정책을 협의하고 돌아 적절한 &lt;code&gt;Permissions&lt;/code&gt; 제공된에 관련 지을 수 있었던 Principal에 부여 된 권한 객체를</target>
        </trans-unit>
        <trans-unit id="8f660c48a5927de5d279d0b4033c4ae98a5108f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer.</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; 의 클래스는 확장 &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를 포트의 이름을 포함하여 포트에 대한 자세한 내용을 구체적으로 그리고 여부 소스 또는 믹서의 대상이다.</target>
        </trans-unit>
        <trans-unit id="e65eb7e482423171ada7c491ef4eeceb1029407b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. By definition, a port acts as either a source or a target to its mixer, but not both. (Audio input ports are sources; audio output ports are targets.)</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; 의 클래스는 확장 &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를 포트의 이름을 포함하여 포트에 대한 자세한 내용을 구체적으로 그리고 여부 소스 또는 믹서의 대상이다. 정의에 따르면 포트는 믹서의 소스 또는 대상 역할을하지만 둘다는 아닙니다. (오디오 입력 포트는 소스이고 오디오 출력 포트는 대상입니다.)</target>
        </trans-unit>
        <trans-unit id="d166a34742a6c6490e21ca168d2e6d673987afa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; 클래스는 불변의 프로퍼티 세트를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d09951cf74285f372797f262ca2d5541dfdf337c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties. The &lt;code&gt;Properties&lt;/code&gt; can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; 클래스는 불변의 프로퍼티 세트를 나타냅니다. &lt;code&gt;Properties&lt;/code&gt; 스트림에 저장되거나 스트림에서로드 할 수 있습니다. 속성 목록의 각 키와 해당 값은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="41efb79d3a1eca9cb5d81533032efc9675bf375a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PropertyChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PropertyChangeSupport&lt;/code&gt; 이와 관련된 &lt;code&gt;BeanContextChildSupport&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61720eb2d433a3c828940b196eeb9541a74e0646" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Queue&lt;/code&gt; interface does not define the</source>
          <target state="translated">&lt;code&gt;Queue&lt;/code&gt; 인터페이스를 정의하지 않는다</target>
        </trans-unit>
        <trans-unit id="0dd9840df06924282664fc3e67ddabe9defd6274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Raster&lt;/code&gt; being referenced.</source>
          <target state="translated">참조 되는 &lt;code&gt;Raster&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="79a2cd06471b623d73bdbbd167ab48aee2097b40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; methods that read from the file throw &lt;code&gt;IOException&lt;/code&gt; if a malformed or unmappable byte sequence is read.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 파일에서 읽어 방법은 던져 &lt;code&gt;IOException&lt;/code&gt; 가 잘못되었거나 맵 불가 바이트 시퀀스를 읽을 경우.</target>
        </trans-unit>
        <trans-unit id="99baa6f6ac31a6957c69fb473938422fc78f374d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9fb5c4efba8253cf833773d52f6ee715196af2f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderedImage&lt;/code&gt; being referenced.</source>
          <target state="translated">참조되고 있는 &lt;code&gt;RenderedImage&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9fc508b09fb91444f8aa155b416b9d56dbb1265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReverbType&lt;/code&gt; class provides methods for accessing various reverberation settings to be applied to an audio signal.</source>
          <target state="translated">&lt;code&gt;ReverbType&lt;/code&gt; 에의 클래스는 오디오 신호에 적용되는 다양한 바브 설정에 액세스하는 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="afe97ee9c3219412d61628980fe8432b9daaba4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this DecimalFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; 이에 DecimalFormat에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ffe20390fecad2daec079563f89bb0ffa523a1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this NumberFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; 이 NumberFormat를 사용.</target>
        </trans-unit>
        <trans-unit id="9a6c5472e51dff7ede55a06c630f405c31babb27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; 클래스의 구상 서브 클래스입니다 &lt;code&gt;Collator&lt;/code&gt; 간단한 데이터 드리븐의 테이블 Collator를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2ed8190679df509541420fb54e8aaab97382d51f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator. With this class you can create a customized table-based &lt;code&gt;Collator&lt;/code&gt;. &lt;code&gt;RuleBasedCollator&lt;/code&gt; maps characters to sort keys.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; 클래스의 구상 서브 클래스입니다 &lt;code&gt;Collator&lt;/code&gt; 간단한 데이터 드리븐의 테이블 Collator를 제공합니다. 이 클래스를 사용하면 사용자 정의 된 테이블 기반 &lt;code&gt;Collator&lt;/code&gt; 를 작성할 수 있습니다 . &lt;code&gt;RuleBasedCollator&lt;/code&gt; 는 문자를 정렬하여 키를 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="5098c81b7457412bf4917d02e9a1dfef85b5fe26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; 인터페이스는 스레드가 해당 인스턴스를 실행하는 모든 클래스에 의해 구현되어야한다.</target>
        </trans-unit>
        <trans-unit id="d8f15f8d81c303338ba2b966d98884e4108ae0f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called &lt;code&gt;run&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; 인터페이스는 스레드가 해당 인스턴스를 실행하는 모든 클래스에 의해 구현되어야한다. 클래스는 &lt;code&gt;run&lt;/code&gt; 이라는 인수가없는 메소드를 정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d9f88a23d98de0fb1ab893f3f7409818a9bbc61d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SMART&lt;/code&gt; behaviour handles the common &quot;end of day&quot; 24:00 value. Processing in &lt;code&gt;LENIENT&lt;/code&gt; mode also produces the same result:</source>
          <target state="translated">&lt;code&gt;SMART&lt;/code&gt; 의 동작은 24:00 값 일반적인 &quot;하루의 끝을&quot;처리합니다. &lt;code&gt;LENIENT&lt;/code&gt; 모드 에서 처리해 도 동일한 결과가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="64049cd592e8eb0ec78aec4cd353b6f5aabba963" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; completed the operation, and is available to process similar calls.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 작업을 완료하고, 유사한 전화를 처리 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="077b184f78f7e5525918d7fe92403baaa5f9a42d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; has just finished handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 단지 핸드 쉐이크를 완료했습니다.</target>
        </trans-unit>
        <trans-unit id="df118613b41d79c011b7a0bc6c7f48652d896d51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; is not currently handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 현재 핸드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1926ac57988ad07ff17731c0dbc1dd707e5b1e02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; must send data to the remote side before handshaking can continue, so &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; should be called.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; , 그래서 전에 핸드 쉐이크를 계속 원격 측에 데이터를 전송해야 &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="02fa5e3b89e2cea3ead9db69cbe845f18df35ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs the results of one (or more) delegated tasks before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 핸드 쉐이크를 계속하기 전에 하나 (또는 그 이상)의 위임 된 작업의 결과를 필요로한다.</target>
        </trans-unit>
        <trans-unit id="082a3cd7613f1264f8b5206e5fbed35f61a0dff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs to receive data from the remote side before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 핸드 쉐이크를 계속하기 전에 원격 측으로부터 데이터를 수신 할 필요가있다.</target>
        </trans-unit>
        <trans-unit id="d352a14052137339f442e35be68221c08d8d1336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; produces/consumes complete SSL/TLS packets only, and does not store application data internally between calls to &lt;code&gt;wrap()/unwrap()&lt;/code&gt;. Thus input and output &lt;code&gt;ByteBuffer&lt;/code&gt;s must be sized appropriately to hold the maximum record that can be produced. Calls to &lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt;&lt;/a&gt; should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via &lt;a href=&quot;sslengineresult&quot;&gt;&lt;code&gt;SSLEngineResult&lt;/code&gt;&lt;/a&gt;) and correct the problem, and then try the call again.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 의이 / 생산에만 완전한 SSL / TLS 패킷을 소모하며, 호출시 내부 응용 프로그램 데이터를 저장하지 않습니다 &lt;code&gt;wrap()/unwrap()&lt;/code&gt; . 따라서 입력 및 출력 &lt;code&gt;ByteBuffer&lt;/code&gt; 의 크기는 생성 할 수있는 최대 레코드를 보유 할 수있는 적절한 크기 여야합니다. 적절한 버퍼 크기를 결정하려면 &lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt; &lt;/a&gt; 호출 해야합니다. 아웃 바운드 애플리케이션 데이터 버퍼의 크기는 일반적으로 중요하지 않습니다. 버퍼 조건이 데이터의 올바른 소비 / 생산을 허용하지 않는 경우 애플리케이션은 &lt;a href=&quot;sslengineresult&quot;&gt; &lt;code&gt;SSLEngineResult&lt;/code&gt; &lt;/a&gt; 를 통해 문제점을 판별 하고 수정 한 후 호출을 다시 시도해야합니다.</target>
        </trans-unit>
        <trans-unit id="b752ac795479df72fea9b170d743467ba0f0cfba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to process the operation because there are not enough bytes available in the destination buffer to hold the result.</source>
          <target state="translated">그만큼 &lt;code&gt;SSLEngine&lt;/code&gt; 결과를 저장하는 대상 버퍼에 충분한 바이트가 없기 때문에 작업을 처리 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="eaeaedd8a0decde5ead8adb6e73dcb183ff095c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to unwrap the incoming data because there were not enough source bytes available to make a complete packet.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 충분한 소스가 전체 패킷을 만들기 위해 사용할 수 바이트가 없었기 때문에 들어오는 데이터 랩을 해제 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="cbaeb5659c8aac8f7fee34b65d2504a15d654f38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLSocket&lt;/code&gt; class provides much of the same security functionality, but all of the inbound and outbound data is automatically transported using the underlying &lt;a href=&quot;../../../java/net/socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt;, which by design uses a blocking model. While this is appropriate for many applications, this model does not provide the scalability required by large servers.</source>
          <target state="translated">&lt;code&gt;SSLSocket&lt;/code&gt; 클래스는 거의 같은 보안 기능을 제공하지만, 인바운드 및 아웃 바운드의 모든 데이터가 자동으로 기본 사용하여 전송되는 &lt;a href=&quot;../../../java/net/socket&quot;&gt; &lt;code&gt;Socket&lt;/code&gt; &lt;/a&gt; 디자인에 의해 차단 모델을 사용합니다. 이것은 많은 응용 프로그램에 적합하지만이 모델은 대규모 서버에 필요한 확장 성을 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="67002f2853371825d4f380e6151673d61fd862c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; implementation version.</source>
          <target state="translated">&lt;code&gt;ScriptEngine&lt;/code&gt; 구현의 버젼.</target>
        </trans-unit>
        <trans-unit id="f25a0860dae0919f1e2c083b37f6094e4c1e6bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; that created this &lt;code&gt;CompiledScript&lt;/code&gt;</source>
          <target state="translated">이 &lt;code&gt;CompiledScript&lt;/code&gt; 를 생성 한 &lt;code&gt;ScriptEngine&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e21343e7ca5145a39ccb5bfd47f5b581373d98e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineFactory&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ScriptEngineFactory&lt;/code&gt; 에</target>
        </trans-unit>
        <trans-unit id="b665ef5d411bf64411a13e786d5fc2ae59afce43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는를 위한 검색 및 인스턴스화기구 구현 &lt;code&gt;ScriptEngine&lt;/code&gt; 클래스 또한 관리자 작성한 모든 엔진에 의해 공유 상태를 저장하는 키 / 값 쌍의 컬렉션을 유지한다.</target>
        </trans-unit>
        <trans-unit id="e8ac26f4b46b05f20c281cbfe3a63c1a0d4d63f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. This class uses the service provider mechanism to enumerate all the implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는를 위한 검색 및 인스턴스화기구 구현 &lt;code&gt;ScriptEngine&lt;/code&gt; 클래스 또한 관리자 작성한 모든 엔진에 의해 공유 상태를 저장하는 키 / 값 쌍의 컬렉션을 유지한다. 이 클래스는 서비스 제공 업체 메커니즘을 사용하여 모든 &lt;code&gt;ScriptEngineFactory&lt;/code&gt; 구현을 열거합니다 .</target>
        </trans-unit>
        <trans-unit id="c8f5248bd1e6ed1326e622b205ee4a45bbc651cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; provides a method to return a list of all these factories as well as utility methods which look up factories on the basis of language name, file extension and mime type.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는은 으로 잘 언어 이름, 파일 확장자 및 MIME 타입에 근거하여 공장을 찾아 유틸리티 방법으로 이러한 모든 공장의 목록을 반환하는 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="901dec5a90ef8a0878213de32ad7798df415e097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; uses the service provider mechanism described in the</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는은 에 설명 서비스 제공자 메커니즘을 사용</target>
        </trans-unit>
        <trans-unit id="dcf2e0bf99eab15ad6a0fa15e39d7a6c2e33fef8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SearchResult&lt;/code&gt; may also contain attributes of the matching object if the &lt;code&gt;cons&lt;/code&gt; argument specifies that attributes be returned.</source>
          <target state="translated">&lt;code&gt;SearchResult&lt;/code&gt; 경우도 일치하는 객체의 속성을 포함 할 수있다 &lt;code&gt;cons&lt;/code&gt; 속성 인수 지정이 반환 될 수있다.</target>
        </trans-unit>
        <trans-unit id="eabc9dbc1a3de0e0e126d5d1a67a58df32a7962f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SecurityManager&lt;/code&gt; class contains many methods with names that begin with the word &lt;code&gt;check&lt;/code&gt;. These methods are called by various methods in the Java libraries before those methods perform certain potentially sensitive operations. The invocation of such a &lt;code&gt;check&lt;/code&gt; method typically looks like this:</source>
          <target state="translated">&lt;code&gt;SecurityManager&lt;/code&gt; 클래스는 단어로 시작하는 이름을 가진 많은 방법이 포함되어 &lt;code&gt;check&lt;/code&gt; . 이러한 메소드는 잠재적으로 민감한 특정 조작을 수행하기 전에 Java 라이브러리의 다양한 메소드에 의해 호출됩니다. 이러한 &lt;code&gt;check&lt;/code&gt; 메소드 의 호출은 일반적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cdf333c83d829b3401cd3328628d6c609f64f31a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sequencer&lt;/code&gt; interface includes methods for the following basic MIDI sequencer operations:</source>
          <target state="translated">&lt;code&gt;Sequencer&lt;/code&gt; 인터페이스는 다음과 같은 기본적인 MIDI 시퀀서 조작이 포함됩니다 :</target>
        </trans-unit>
        <trans-unit id="2d6a25bea447e545dee0ec116fce9cf07f17df31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; interface places additional stipulations, beyond those inherited from the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of all constructors and on the contracts of the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience. (The specifications accompanying these declarations have been tailored to the &lt;code&gt;Set&lt;/code&gt; interface, but they do not contain any additional stipulations.)</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 인터페이스로부터 상속 능가하는 추가 규정을 배치 &lt;code&gt;Collection&lt;/code&gt; 모든 생성자의 계약에와의 계약에 인터페이스 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;equals&lt;/code&gt; 및 &lt;code&gt;hashCode&lt;/code&gt; 방법. 편의상 다른 상속 된 메소드에 대한 선언도 여기에 포함됩니다. (이 선언과 함께 제공되는 사양은 &lt;code&gt;Set&lt;/code&gt; 인터페이스 에 맞게 조정 되었지만 추가 규정은 포함되어 있지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="ca2825253af57c9c2e6a3d7675526c2242a40a0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; of Principals associated with this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 이 관련 지을 수 있었던 Principal의 &lt;code&gt;Subject&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61061520eba3a069412253fc6b718281a7764587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;short&lt;/code&gt; 객체에 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bd6d5314769fa94b169cf6fd6d3a5c0f5803d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object. An object of type &lt;code&gt;Short&lt;/code&gt; contains a single field whose type is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;short&lt;/code&gt; 객체에 있습니다. 유형의 객체 &lt;code&gt;Short&lt;/code&gt; 그의 형의 단일 필드가 포함되어 &lt;code&gt;short&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf5e4c26203f886b6a7a4f1b81f96c02a0a29697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SignedResultsControl&lt;/code&gt; class might be defined as follows:</source>
          <target state="translated">&lt;code&gt;SignedResultsControl&lt;/code&gt; 에 다음과 같이 클래스를 정의 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="3a917286530fabb04fa41fccacd2711f46f2bddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleScriptContext&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SimpleScriptContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca03fd6be029ed8ca889a60a8a508d0a4a1babe2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; 클래스 인</target>
        </trans-unit>
        <trans-unit id="f454eae06e8c8450f0d9941d0498c44514cf1e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Boolean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Boolean&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="639c3ab3a04fd48b0812edf7c08168f9b2abfe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Byte&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="6779cad3872976416b8715cdc2cae03f34516e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Character&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Character&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="ccc12a9229fa28b212383ee48e5d6d48b5829469" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Double&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="3b4dbe56be7eeb7407783a82c785c69757959537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Float&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="950ad58636d59dcea09852f3de50a8b54e4ec126" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Integer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Integer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38105e6f78986a670b722ab3d041a7ff3901722e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Long&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="a28cf8d0823e5eefc4a4e7fc0bee61dc5592a17e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Short&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="820c357e21a5bd82921b5bccd1f7a3db183c43be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.String&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="36b771fc8f2baca3d65ff467300137e5fa46b87f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Void&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6dbd2a7b98eeeeb0df1e9367af1772ffa7a82ff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigDecimal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.math.BigDecimal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98c8cbacf6c530dcd5198d36051672cced797c4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigInteger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.math.BigInteger&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="53ea91ec792b961906f05193441b86fc1c764ce1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.util.Date&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.util.Date&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9f782c191b744e88038240ceea9bf9b47ef00d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;javax.management.ObjectName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;javax.management.ObjectName&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f21653116680d7405660374ff050723b7344530" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SocketAddress&lt;/code&gt; that the socket is bound to, or the &lt;code&gt;SocketAddress&lt;/code&gt; representing the loopback address if denied by the security manager, or &lt;code&gt;null&lt;/code&gt; if the channel's socket is not bound</source>
          <target state="translated">&lt;code&gt;SocketAddress&lt;/code&gt; 소켓이 바인딩되는, 또는 &lt;code&gt;SocketAddress&lt;/code&gt; 를 보안 관리자 또는 거부하는 경우 루프백 주소를 나타내는 &lt;code&gt;null&lt;/code&gt; 이 채널의 소켓의 바인드되어 있지 않은 경우</target>
        </trans-unit>
        <trans-unit id="18e018252e244e834ac16d7592161dec68491d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceDataLine&lt;/code&gt; interface provides a method for writing audio data to the data line's buffer. Applications that play or mix audio should write data to the source data line quickly enough to keep the buffer from underflowing (emptying), which could cause discontinuities in the audio that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. The amount of data which can be written to the buffer without blocking is the difference between the buffer size and the amount of queued data. If the delivery of audio output stops due to underflow, a &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated. A &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated when the audio output resumes.</source>
          <target state="translated">&lt;code&gt;SourceDataLine&lt;/code&gt; 인터페이스는 상기 데이터 라인의 버퍼에 오디오 데이터를 기록하기위한 방법을 제공한다. 오디오를 재생하거나 믹싱하는 응용 프로그램은 버퍼의 언더 플로 (빈)를 방지 할 수있을 정도로 빠르게 소스 데이터 라인에 데이터를 기록해야하므로 클릭으로 인식되는 오디오의 불연속성이 발생할 수 있습니다. 애플리케이션은 &lt;code&gt;DataLine&lt;/code&gt; 인터페이스에 정의 된 사용 &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 메소드를 사용하여 현재 데이터 라인의 버퍼에 대기중인 데이터의 양을 판별 할 수 있습니다. 차단하지 않고 버퍼에 쓸 수있는 데이터 양은 버퍼 크기와 대기중인 데이터 양의 차이입니다. 언더 플로로 인해 오디오 출력 전달이 중지되면 &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 이벤트가 생성됩니다. &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 오디오 출력이 다시 시작되면 이벤트가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="7d6c5c0e9a62febf84bbb9141ee81024ed231a73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 추가로보고 &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a5cd94ecb80a03490b99bcd80e701c14fac87925" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt; and implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism..</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 추가로보고 &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; 및 구현이 &lt;code&gt;trySplit&lt;/code&gt; 제한된 병렬 처리를 허용하는 ..</target>
        </trans-unit>
        <trans-unit id="af784776c0cdc3b45691af7e034f88ace154b36b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 의 구현은 &lt;code&gt;trySplit&lt;/code&gt; 제한된 병렬 처리를 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc4bc484d5f7374b739600d18f54719d380be19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, with an encounter order that is ascending order. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 를&lt;/a&gt; 오름차순으로하는 만남의 주문. 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="f2950b171471656d176973c0cdbe156c00f2950c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f29dd54a6792c7ed4529600d96348a75bdd9555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 Spliterator.DISTINCT를 보고 &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="d956efee01ea55ce995f06c420101ace333173f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e199c4eef228c77de88efe1878bd4a7a2d489af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cbd59fa14ea73f85c3995572f64444c99c11f1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c1e52439eecc198c689029f966c5a01b29d70971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="a468b87aa57a000d104e16ad1ebfc71127bed7dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 Spliterator.DISTINCT를 보고 &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="6ebf9e7f0b30959249ec16fdfe821371d93a4d56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="5eb4148ceff758d730c061aadb07b3dfc29badab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="6117d3f9be68af61e863fb3ac62f3f48f2b55bd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="365bad875f0605d7a3f88de21373c4b2c02e8b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="c76f2bcfdf2668373b751457d6ab6afa52733599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;ORDERED&lt;/code&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고서 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;ORDERED&lt;/code&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="56ca63602e1e9a18ab8f45fd2c61e5f3e26c4da5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="b7a7b7355ffd0c2f2072bfc12a5dfa9d5724f300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="69d1d467a5fec847db2c8830bffb8575def22c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="a22bed6089a698314bd570d8dfea84ff3886d8de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; 클래스는 객체의 후입 선출 (LIFO) 스택을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="725a4ea6b7a05d02133053cfe135e8b021c0e333" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects. It extends class &lt;code&gt;Vector&lt;/code&gt; with five operations that allow a vector to be treated as a stack. The usual &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; operations are provided, as well as a method to &lt;code&gt;peek&lt;/code&gt; at the top item on the stack, a method to test for whether the stack is &lt;code&gt;empty&lt;/code&gt;, and a method to &lt;code&gt;search&lt;/code&gt; the stack for an item and discover how far it is from the top.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; 클래스는 객체의 후입 선출 (LIFO) 스택을 나타냅니다. 벡터를 스택으로 취급 할 수 있도록 5 가지 연산으로 &lt;code&gt;Vector&lt;/code&gt; 클래스를 확장 합니다. 일반적인 &lt;code&gt;push&lt;/code&gt; 와 &lt;code&gt;pop&lt;/code&gt; 작업은 물론하는 방법으로 &lt;code&gt;peek&lt;/code&gt; 스택의 맨 위 항목, 스택인지 여부를 테스트하는 방법에 &lt;code&gt;empty&lt;/code&gt; 및 방법은하기 &lt;code&gt;search&lt;/code&gt; 항목에 대한 스택을 어떻게 지금까지 발견이 맨 위에서입니다.</target>
        </trans-unit>
        <trans-unit id="1390697c89353b590988a85571b01944397a5934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stream&lt;/code&gt; describing the content of the directory</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; 디렉토리의 내용을 설명</target>
        </trans-unit>
        <trans-unit id="c78c42072e63ca70c7ecefe4c83c75776bdbcfbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamHandler&lt;/code&gt; first checks if there is an &lt;code&gt;OutputStream&lt;/code&gt; and if the given &lt;code&gt;LogRecord&lt;/code&gt; has at least the required log level. If not it silently returns. If so, it calls any associated &lt;code&gt;Filter&lt;/code&gt; to check if the record should be published. If so, it calls its &lt;code&gt;Formatter&lt;/code&gt; to format the record and then writes the result to the current output stream.</source>
          <target state="translated">&lt;code&gt;StreamHandler&lt;/code&gt; 먼저 확인 거기 경우 &lt;code&gt;OutputStream&lt;/code&gt; 에 주어진 경우 &lt;code&gt;LogRecord&lt;/code&gt; 적어도 필요한 로그 레벨을 갖는다. 그렇지 않으면 자동으로 리턴됩니다. 그렇다면 레코드를 게시해야하는지 확인하기 위해 연결된 &lt;code&gt;Filter&lt;/code&gt; 를 호출합니다 . 그렇다면 레코드를 포맷하기 위해 &lt;code&gt;Formatter&lt;/code&gt; 를 호출 한 다음 결과를 현재 출력 스트림에 씁니다.</target>
        </trans-unit>
        <trans-unit id="e6a8fe0d59891f6c0cc5fc356448e863867d876b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; 의 클래스 토큰이 한번에 판독 할 수있게 해주는 한, &quot;토큰&quot;으로 입력 스트림 파싱 걸립니다.</target>
        </trans-unit>
        <trans-unit id="90790abff6838151ec89277ddea3efa96bd3fd1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; 의 클래스 토큰이 한번에 판독 할 수있게 해주는 한, &quot;토큰&quot;으로 입력 스트림 파싱 걸립니다. 파싱 ​​프로세스는 다양한 상태로 설정할 수있는 테이블과 여러 플래그에 의해 제어됩니다. 스트림 토크 나이 저는 식별자, 숫자, 따옴표 붙은 문자열 및 다양한 주석 스타일을 인식 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cace10574531d43fd7350c7bbe816d7c0693ff93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., &lt;code&gt;char&lt;/code&gt; values).</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 클래스는 유니 코드 단위 (즉, 다루는 그뿐만 아니라, 유니 코드 코드 포인트 (즉, 문자)를 처리하는 방법을 제공합니다 &lt;code&gt;char&lt;/code&gt; 값을).</target>
        </trans-unit>
        <trans-unit id="0d78a761f2944c5a20f9f6d6f41f724d053b8054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 클래스는 캐릭터 라인을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cfaf0978cdd4182db5fdb416c1be5b9a10ec7e9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Java programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 클래스는 캐릭터 라인을 나타냅니다. &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 와 같은 Java 프로그램의 모든 문자열 리터럴 은이 클래스의 인스턴스로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="bf9e88bafccff9dfb01a4ed99ca09de99632708e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; constructor, on the other hand, is perfectly predictable: writing &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; creates a &lt;code&gt;BigDecimal&lt;/code&gt; which is</source>
          <target state="translated">반면에 &lt;code&gt;String&lt;/code&gt; 생성자는 완벽하게 예측할 수 있습니다. &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; 을 작성하면 다음과 같은 &lt;code&gt;BigDecimal&lt;/code&gt; 이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="79d62a9c1d3d1d0435af40a0f1b27c3991ef6251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and unloading instruments from soundbanks. An instrument is a specification for synthesizing a certain type of sound, whether that sound emulates a traditional instrument or is some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized by bank and program number (via the instrument's &lt;code&gt;Patch&lt;/code&gt; object). Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis techniques, meaning that some instruments and not others might be compatible with a given synthesizer. Also, synthesizers may have a limited amount of memory for instruments, meaning that not every soundbank and instrument can be used by every synthesizer, even if the synthesis technique is compatible. To see whether the instruments from a certain soundbank can be played by a given synthesizer, invoke the &lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt;&lt;code&gt;isSoundbankSupported&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Synthesizer&lt;/code&gt; 인터페이스 사운드 뱅크에서 하역 장비에 대한 방법을 포함한다. 악기는 사운드가 전통적인 악기를 에뮬레이트하는지 또는 어떤 종류의 사운드 효과 또는 기타 가상 사운드인지에 관계없이 특정 유형의 사운드를 합성하기위한 사양입니다. 사운드 뱅크는 뱅크 및 프로그램 번호 (악기의 &lt;code&gt;Patch&lt;/code&gt; 객체 를 통해)로 구성된 악기 모음입니다 . 다른 &lt;code&gt;Synthesizer&lt;/code&gt; 클래스는 다른 사운드 합성 기술을 구현할 수 있습니다. 즉, 일부 악기는 특정 신시사이저와 호환되지 않을 수 있습니다. 또한 신디사이저에는 악기에 대한 메모리 양이 제한되어있을 수 있습니다. 즉, 합성 기술이 호환 되더라도 모든 사운드 뱅크와 악기를 모든 신디사이저에서 사용할 수있는 것은 아닙니다. 특정 신시사이저가 특정 사운드 뱅크의 악기를 연주 할 수 있는지 확인하려면 &lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt; &lt;code&gt;isSoundbankSupported&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Synthesizer&lt;/code&gt; 메소드를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="cfaf0a0f81bd0eca9825b951309b3216299181ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; 클래스에는 유용한 클래스 필드 및 메서드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e929acaa33491c9123dc823b9825fd21aa7ba63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods. It cannot be instantiated.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; 클래스에는 유용한 클래스 필드 및 메서드가 포함되어 있습니다. 인스턴스화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="90342a4ec5ebd367ca721e299022f4ba7c4abcba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TYPE_USE&lt;/code&gt; constant includes type declarations and type parameter declarations as a convenience for designers of type checkers which give semantics to annotation types. For example, if the annotation type &lt;code&gt;NonNull&lt;/code&gt; is meta-annotated with &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt;, then &lt;code&gt;@NonNull&lt;/code&gt;&lt;code&gt;class C {...}&lt;/code&gt; could be treated by a type checker as indicating that all variables of class &lt;code&gt;C&lt;/code&gt; are non-null, while still allowing variables of other classes to be non-null or not non-null based on whether &lt;code&gt;@NonNull&lt;/code&gt; appears at the variable's declaration.</source>
          <target state="translated">&lt;code&gt;TYPE_USE&lt;/code&gt; 의 상수는 주석 유형에 의미를 부여 형 체커 디자이너의 편의 타입 선언과 형식 매개 변수 선언이 포함되어 있습니다. 예를 들어, 주석 유형 &lt;code&gt;NonNull&lt;/code&gt; 이 &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt; 로 메타 주석 처리 된 경우 &lt;code&gt;@NonNull&lt;/code&gt; &lt;code&gt;class C {...}&lt;/code&gt; 는 클래스 &lt;code&gt;C&lt;/code&gt; 의 모든 변수가 널이 아님을 나타내는 것으로 유형 검사기에서 처리 될 수 있습니다. &lt;code&gt;@NonNull&lt;/code&gt; 이 변수 선언에 나타나는지 여부에 따라 다른 클래스의 변수가 null이 아닌지 여부를 계속 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="3ef83572b32113beb492c13117cd5dc2ac290774" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularData&lt;/code&gt; interface specifies the behavior of a specific type of complex</source>
          <target state="translated">&lt;code&gt;TabularData&lt;/code&gt; 의 인터페이스는 복잡한 특정 유형의 동작을 지정합니다</target>
        </trans-unit>
        <trans-unit id="7724aaad4c815a2f3d25835048c64655b5a959e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularDataSupport&lt;/code&gt; class is the</source>
          <target state="translated">그만큼 &lt;code&gt;TabularDataSupport&lt;/code&gt; 클래스 인</target>
        </trans-unit>
        <trans-unit id="d1a581b7f12d575f8065049692b39a4f8b425736" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;TabularType&lt;/code&gt; 클래스입니다</target>
        </trans-unit>
        <trans-unit id="2b88d977d84dfecfb709ca75951d725a6ab95a15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TargetDataLine&lt;/code&gt; interface provides a method for reading the captured data from the target data line's buffer.Applications that record audio should read data from the target data line quickly enough to keep the buffer from overflowing, which could cause discontinuities in the captured data that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. If the buffer does overflow, the oldest queued data is discarded and replaced by new data.</source>
          <target state="translated">&lt;code&gt;TargetDataLine&lt;/code&gt; 인터페이스는 오디오 녹음이 인식되고 캡처 된 데이터의 불연속을 야기 할 수있는 오버 플로우 버퍼를 유지하기 위해 신속하게 타겟 데이터 라인에서 데이터를 읽어야하는 타겟 데이터 라인의 buffer.Applications에서 캡처 된 데이터를 판독하는 방법을 제공한다 클릭으로. 응용 프로그램은 &lt;code&gt;DataLine&lt;/code&gt; 인터페이스에 정의 된 사용 &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 방법을 사용하여 현재 데이터 라인의 버퍼에 대기중인 데이터의 양을 결정할 수 있습니다. 버퍼가 오버 플로우되면 가장 오래된 큐에있는 데이터는 버리고 새 데이터로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="3e0b1acfd21178efdd1911606a8891da6c388408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetDateTime&lt;/code&gt; using &lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time.</source>
          <target state="translated">이 메소드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 는 다음을 사용하여 &lt;code&gt;OffsetDateTime&lt;/code&gt; 으로 변환됩니다.&lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;. 두 날짜-시간간에 오프셋이 다른 경우 지정된 종료 날짜-시간은이 날짜-시간과 동일한 오프셋을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="3e06b07abdd9c26452543a4ee27b98a4f883116f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetTime&lt;/code&gt; using &lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time.</source>
          <target state="translated">이 메소드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 는 &lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;OffsetTime&lt;/code&gt; 시간으로 변환됩니다. . 오프셋이 두 번 서로 다른 경우 지정된 종료 시간이이 시간과 동일한 오프셋을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="137e87a41dd6513a254139c8feaaab1e66487d95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;ZonedDateTime&lt;/code&gt; using &lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time.</source>
          <target state="translated">이 메소드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 는 &lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;ZonedDateTime&lt;/code&gt; 으로 변환됩니다. . 시간대가 두 개의 존 날짜-시간 사이에 다른 경우, 지정된 종료 날짜-시간은이 날짜-시간과 동일한 존을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="e5e2abe85585b946fe3143ade66a1eb51b565159" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TemporalAdjuster&lt;/code&gt; is based on the low level &lt;code&gt;Temporal&lt;/code&gt; interface. This method allows an adjustment from &lt;code&gt;LocalDate&lt;/code&gt; to &lt;code&gt;LocalDate&lt;/code&gt; to be wrapped to match the temporal-based interface. This is provided for convenience to make user-written adjusters simpler.</source>
          <target state="translated">&lt;code&gt;TemporalAdjuster&lt;/code&gt; 은 낮은 수준을 기반으로 &lt;code&gt;Temporal&lt;/code&gt; 인터페이스를 제공합니다. 이 방법에서 조정 허용 &lt;code&gt;LocalDate&lt;/code&gt; 에 &lt;code&gt;LocalDate&lt;/code&gt; 하면 시간 기반 인터페이스와 일치 랩핑 할 수 있습니다. 이는 사용자 작성 조정자를보다 간단하게하기 위해 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="179bee4e4045d3f40705d1a933596e56a91b3268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ThreadMXBean&lt;/code&gt; interface provides the &lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt;&lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt;&lt;code&gt;findDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; methods to find deadlocks in the running application.</source>
          <target state="translated">&lt;code&gt;ThreadMXBean&lt;/code&gt; 의 인터페이스가 제공 &lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt; &lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt; &lt;code&gt;findDeadlockedThreads()&lt;/code&gt; &lt;/a&gt; 실행중인 응용 프로그램의 교착 상태를 찾을 방법.</target>
        </trans-unit>
        <trans-unit id="39917ae27e9e1229d50311719d5d54222afebd7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; 클래스는 Java 언어의 모든 에러와 예외의 슈퍼 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="08f3668a9e709259220f6210bae5df043abe1c67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only this class or one of its subclasses can be the argument type in a &lt;code&gt;catch&lt;/code&gt; clause. For the purposes of compile-time checking of exceptions, &lt;code&gt;Throwable&lt;/code&gt; and any subclass of &lt;code&gt;Throwable&lt;/code&gt; that is not also a subclass of either &lt;a href=&quot;runtimeexception&quot;&gt;&lt;code&gt;RuntimeException&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; are regarded as checked exceptions.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; 클래스는 Java 언어의 모든 에러와 예외의 슈퍼 클래스입니다. 이 클래스의 인스턴스 (또는 그 서브 클래스 중 하나) 인 객체 만 Java Virtual Machine에 의해 발생되거나 Java &lt;code&gt;throw&lt;/code&gt; 문에 의해 발생 될 수 있습니다 . 마찬가지로이 클래스 또는 해당 서브 클래스 중 하나만 &lt;code&gt;catch&lt;/code&gt; 절 에서 인수 유형이 될 수 있습니다 . 예외의 컴파일 타임 점검을 위해, &lt;a href=&quot;runtimeexception&quot;&gt; &lt;code&gt;RuntimeException&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 의 서브 클래스가 아닌 &lt;code&gt;Throwable&lt;/code&gt; 및 &lt;code&gt;Throwable&lt;/code&gt; 의 서브 클래스는 Checked 예외로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="4424bacaff9f769c17cab48ed5095a39891ea9af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method is overwritten by a &lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt;&lt;code&gt;setCalendar&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; 이 방법에 의해 설정은 덮어 쓰기이다 &lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt; &lt;code&gt;setCalendar&lt;/code&gt; 의&lt;/a&gt; 통화.</target>
        </trans-unit>
        <trans-unit id="ab6ef098a0e2b11a35d0346ab8d1c75fce3fa93c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method may be overwritten as a result of a call to the parse method.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; 이 방법에 의해 세트 parse 메소드 호출의 결과로 겹쳐 쓸 수있다.</target>
        </trans-unit>
        <trans-unit id="64856a2ea07154d8aca40a14f0b2a8f2b6235c3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Track&lt;/code&gt; class provides methods to edit the track by adding or removing &lt;code&gt;MidiEvent&lt;/code&gt; objects from it. These operations keep the event list in the correct time order. Methods are also included to obtain the track's size, in terms of either the number of events it contains or its duration in ticks.</source>
          <target state="translated">&lt;code&gt;Track&lt;/code&gt; 클래스 추가하거나 제거하여 수정하는 방법을 제공하는 선로 &lt;code&gt;MidiEvent&lt;/code&gt; 그것으로부터 개체. 이러한 작업은 이벤트 목록을 올바른 시간 순서로 유지합니다. 포함 된 이벤트 수 또는 틱 단위의 지속 시간 측면에서 트랙의 크기를 얻는 방법도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a63fe4036fc39c3775af4983ad2d733adec1ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transient&lt;/code&gt; annotation may be be used in any of the methods that are involved in a &lt;a href=&quot;featuredescriptor&quot;&gt;&lt;code&gt;FeatureDescriptor&lt;/code&gt;&lt;/a&gt; subclass to identify the transient feature in the annotated class and its subclasses. Normally, the method that starts with &quot;get&quot; is the best place to put the annotation and it is this declaration that takes precedence in the case of multiple annotations being defined for the same feature.</source>
          <target state="translated">&lt;code&gt;Transient&lt;/code&gt; 주석은에 참여하는 방법 중 하나에서 사용 할 수있다 &lt;a href=&quot;featuredescriptor&quot;&gt; &lt;code&gt;FeatureDescriptor&lt;/code&gt; 의&lt;/a&gt; 주석 클래스와 그 서브 클래스에 과도 기능을 식별하는 서브 클래스입니다. 일반적으로 &quot;get&quot;으로 시작하는 메소드는 주석을 넣는 가장 좋은 위치이며 동일한 피처에 대해 여러 주석이 정의 된 경우에 우선합니다.</target>
        </trans-unit>
        <trans-unit id="56b910f29830f7a046163f6e535cb7ed1fc9dd25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URI&lt;/code&gt; passed as an argument specifies the intended use for the cookies. In particular the scheme should reflect whether the cookies will be sent over http, https or used in another context like javascript. The host part should reflect either the destination of the cookies or their origin in the case of javascript.</source>
          <target state="translated">인수로 전달 된 &lt;code&gt;URI&lt;/code&gt; 는 쿠키의 용도를 지정합니다. 특히이 체계는 쿠키가 http, https를 통해 전송 될지 아니면 javascript와 같은 다른 컨텍스트에서 사용될지를 반영해야합니다. 호스트 부분은 javascript의 경우 쿠키의 대상 또는 해당 출처를 반영해야합니다.</target>
        </trans-unit>
        <trans-unit id="4ba34cdf99e04c2d36d3c24cfdbaca9cd7b39e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; instance is used to construct a stream protocol handler from a protocol name.</source>
          <target state="translated">&lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; 의 인스턴스는, 프로토콜 명으로부터 스트림 프로토콜 핸들러를 구축하는데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1d60c3045667966fd5b30a25092dd1ae85ace600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets are specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;; the transformation formats upon which they are based are specified in Amendment 1 of ISO 10646-1 and are also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 캐릭터 세트가 지정됩니다 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt; ; 기반이되는 변환 형식은 ISO 10646-1의 개정 1에 명시되어 있으며 &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;유니 코드 표준&lt;/i&gt;&lt;/a&gt; 에도 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e562ee77a3c77e7c3517890b43d086ebf2121c0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets use sixteen-bit quantities and are therefore sensitive to byte order. In these encodings the byte order of a stream may be indicated by an initial</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 문자 세트는 16 비트의 양을 사용 바이트 순서에 따라서 민감하다. 이러한 인코딩에서 스트림의 바이트 순서는 이니셜로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf273b4ec9d4f261c426075182f01ae5218ee7da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-8&lt;/code&gt; charset is specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt;; the transformation format upon which it is based is specified in Amendment 2 of ISO 10646-1 and is also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 캐릭터 세트가 지정됩니다 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt; ; 기반이되는 변환 형식은 ISO 10646-1의 개정 2에 명시되어 있으며 &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;유니 코드 표준&lt;/i&gt;&lt;/a&gt; 에도 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3746255404c7a2b3ecfdce90d4c067951094108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified by &lt;code&gt;blockName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; 에 의해 확인 된 예를 &lt;code&gt;blockName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d896f7ed14163beb92e5724cc9e8050c6b43c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the Unicode block of which this character is a member, or &lt;code&gt;null&lt;/code&gt; if the character is not a member of any Unicode block</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; 이 문자는 부재이거나, 또는 어느 유니 나타내는 블록 인스턴스 &lt;code&gt;null&lt;/code&gt; 문자 유니 코드 블록의 구성원이 아닌 경우</target>
        </trans-unit>
        <trans-unit id="3da0426647b35089008f837fbe22d127f746d93b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant identified by &lt;code&gt;scriptName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; 의 식별 일정 &lt;code&gt;scriptName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="361aa86ab23e083f317e898d7085e206739f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant representing the Unicode script of which this character is assigned to.</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; 의 이 문자가 할당되어있는 유니 코드 스크립트를 나타내는 정수입니다.</target>
        </trans-unit>
        <trans-unit id="6b22e15bc413740c6b41cef56f96b20ebfc3c2ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; for this file system</source>
          <target state="translated">이 파일 시스템 의 &lt;code&gt;UserPrincipalLookupService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c0c0ad3a9196627434d4da0577e73a19e9ed982" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValueExp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ValueExp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="95f12ecc4c931b6cd52c7c8712c089eb1f901958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; 클래스는 객체의 가변 길이 배열을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="4aeeb9de325145d9de793fc5e171c818d3209bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a &lt;code&gt;Vector&lt;/code&gt; can grow or shrink as needed to accommodate adding and removing items after the &lt;code&gt;Vector&lt;/code&gt; has been created.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; 클래스는 객체의 가변 길이 배열을 구현합니다. 배열과 마찬가지로 정수 인덱스를 사용하여 액세스 할 수있는 구성 요소가 포함되어 있습니다. 그러나 &lt;code&gt;Vector&lt;/code&gt; 를 만든 후 항목을 추가하거나 제거 할 수 있도록 &lt;code&gt;Vector&lt;/code&gt; 크기가 필요에 따라 커지거나 줄어들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef38f50778470be314c350ac1236d4ae66252c2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VetoableChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; 는 이와 관련 &lt;code&gt;BeanContextChildSupport&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20a05157c7add57e69ed4b84eda43d3b9471dac5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Void&lt;/code&gt; class is an uninstantiable placeholder class to hold a reference to the &lt;code&gt;Class&lt;/code&gt; object representing the Java keyword void.</source>
          <target state="translated">&lt;code&gt;Void&lt;/code&gt; 클래스에 대한 참조를 유지하는 uninstantiable 자리 클래스입니다 &lt;code&gt;Class&lt;/code&gt; 자바를 나타내는 개체가 무효 키워드.</target>
        </trans-unit>
        <trans-unit id="26d20b795a509ccf345f4880f86bffc5ff46ea07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77fb3bff5f49c42c2161c3e19062b5010a06389f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt; methods to write text throw &lt;code&gt;IOException&lt;/code&gt; if the text cannot be encoded using the specified charset.</source>
          <target state="translated">지정된 문자 세트를 사용하여 텍스트를 인코딩 할 수없는 경우 텍스트를 작성 하는 &lt;code&gt;Writer&lt;/code&gt; 메소드에서 &lt;code&gt;IOException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5df6357d2d9dd77291511c1a5a3bbe7008f4a76d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2fdc5e90dac380c583a94ac10964401cbc1bff2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; 의 클래스는 사용하여 만든 XML 문서를 읽는 데 사용되는 &lt;code&gt;XMLEncoder&lt;/code&gt; 그냥 같이 사용 &lt;code&gt;ObjectInputStream&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4c73680d790e9f555b97eb4fbffb24cd26c3ccca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;. For example, one can use the following fragment to read the first object defined in an XML document written by the &lt;code&gt;XMLEncoder&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; 의 클래스는 사용하여 만든 XML 문서를 읽는 데 사용되는 &lt;code&gt;XMLEncoder&lt;/code&gt; 그냥 같이 사용 &lt;code&gt;ObjectInputStream&lt;/code&gt; . 예를 들어, 다음 조각을 사용하여 &lt;code&gt;XMLEncoder&lt;/code&gt; 클래스가 작성한 XML 문서에 정의 된 첫 번째 오브젝트를 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b40fba744abf8f8cdfdbf7823211e024611a2005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 상보 대안 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로 와의 텍스트 표현을 생성하기 위해 사용될 수 &lt;em&gt;자바빈&lt;/em&gt; 것과 같은 방식 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로는 이진 표현을 생성하는데 사용될 수있다 &lt;code&gt;Serializable&lt;/code&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="bc93ab4e94e8fd32e113d65a55be49ef42b7d783" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects. For example, the following fragment can be used to create a textual representation the supplied &lt;em&gt;JavaBean&lt;/em&gt; and all its properties:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 상보 대안 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로 와의 텍스트 표현을 생성하기 위해 사용될 수 &lt;em&gt;자바빈&lt;/em&gt; 것과 같은 방식 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로는 이진 표현을 생성하는데 사용될 수있다 &lt;code&gt;Serializable&lt;/code&gt; 개체. 예를 들어, 다음 조각을 사용하여 제공된 &lt;em&gt;JavaBean&lt;/em&gt; 및 모든 해당 특성 의 텍스트 표현을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="baee72131905882a77a0b4ca9b76ace184c77c99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class provides a default denotation for &lt;em&gt;JavaBean&lt;/em&gt;s in which they are represented as XML documents complying with version 1.0 of the XML specification and the UTF-8 character encoding of the Unicode/ISO 10646 character set. The XML documents produced by the &lt;code&gt;XMLEncoder&lt;/code&gt; class are:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 대한 기본 명시 적 의미합니다 &lt;em&gt;자바 빈즈&lt;/em&gt; 의 그들이 XML 사양 및 유니 코드 / ISO 10646 문자 세트의 UTF-8 문자 인코딩의 버전 1.0을 준수하는 XML 문서로 표현되는합니다. &lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 의해 생성 된 XML 문서 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dc6626b4ce56edf5eec0e4e7f1f6d83d431a9d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[ ]&lt;/code&gt; characters are a</source>
          <target state="translated">&lt;code&gt;[ ]&lt;/code&gt; 문자가됩니다</target>
        </trans-unit>
        <trans-unit id="cbec44aca0eff7c0fd9d646cfb96819a5b4c572f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;accumulator&lt;/code&gt; 함수가 있어야 &lt;a href=&quot;package-summary#Associativity&quot;&gt;연관&lt;/a&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="4185fd67e39e58987d681ed4e049cb9068cef055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; argument is of the same format as the &lt;code&gt;eventPropertyName&lt;/code&gt; argument where the last property name identifies either a method name or writable property.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; 인자들은 동일 형식이다 &lt;code&gt;eventPropertyName&lt;/code&gt; 를의 인수 여기서 마지막 속성 이름을 식별하는 방법 이름 또는 속성 중 쓰기.</target>
        </trans-unit>
        <trans-unit id="4200792e507990527888853e33e39555b27217a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; 매개 변수를 식별 속성 읽고 형식을 취한다 :</target>
        </trans-unit>
        <trans-unit id="e13622be0932a01b09ea0231195ad9dee2d891a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be set and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; 파라미터를 식별하는 속성을 설정 및 형태를 취한다 :</target>
        </trans-unit>
        <trans-unit id="9300dec972e233c14dfee6f24a1437eb62d16c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter identifies the attributes to be read and takes the form:</source>
          <target state="translated">는 &lt;code&gt;attributes&lt;/code&gt; 의 속성을 읽을 수 있도록 매개 변수를 식별 및 형태를 취한다 :</target>
        </trans-unit>
        <trans-unit id="71ec10680a515404dcea83dc93b34a00ae544957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is an optional array of file &lt;a href=&quot;../file/attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 파일의 선택적인 배열 매개 변수 &lt;a href=&quot;../file/attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="f5d11588e62ee6ecee510a144a13ae053b7ded0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 매개 변수는 선택 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt; 링크를 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="6a9611129a94268b694e7f0a6870f3b072a950a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when a new file is created.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 새 파일이 생성 될 때 원자 적으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="1530cb7be2e1a90d2e32e41b80f5181fbd3c409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 디렉터리를 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ad9b07c9e2205e3502079d33de386fcf7c13ff4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3d4f30d19e092c8b774921588c985e988e8af3fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다. 파일 속성을 지정하지 않으면 결과 파일에 &lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt; 메소드로 작성된 파일에 대한 액세스가 더 제한적일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eac58af08c25e30b8096bbec06d65d5969d2351b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 존재하지 않는 디렉토리를 만들 때 원자 적으로 설정합니다. 각 파일 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9310f8ddf2f2e1abe2704763c0d8698944c86a52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;available&lt;/code&gt; 클래스에 대한 방법 &lt;code&gt;InputStream&lt;/code&gt; 항상 반환 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a223f99a73adb8d4155acdcdbe953d90137df1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of the underlying stream returns zero, indicating that further input requests would block.</source>
          <target state="translated">기본 스트림 의 &lt;code&gt;available&lt;/code&gt; 메소드는 추가 입력 요청이 차단됨을 나타내는 0을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c19d6f589a03480c7507cbcf9ea41e93f9410bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 인수는 소켓에 대기중인 연결 요청의 최대 수입니다. 정확한 의미는 구현에 따라 다릅니다. 특히, 구현은 최대 길이를 부과하거나 매개 변수를 무시하도록 선택할 수 있습니다. 제공된 값은 &lt;code&gt;0&lt;/code&gt; 보다 커야 합니다. &lt;code&gt;0&lt;/code&gt; 보다 작거나 같은 경우, 구현 고유의 디폴트가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="29ad9363012d93283f3d04ff689ea4b529ac1006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 값이 같거나 0보다 작은 경우, 디폴트 값이 가정 될 경우 전달 된 경우 인수는 0보다 큰 양의 값이 커야합니다.</target>
        </trans-unit>
        <trans-unit id="b04fd34021527ffa6eec03ad117996148e622e5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the &lt;code&gt;backlog&lt;/code&gt; parameter has the value &lt;code&gt;0&lt;/code&gt;, or a negative value, then an implementation specific default is used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 매개 변수는 소켓에 대기중인 연결의 최대 수입니다. 정확한 의미는 구현에 따라 다릅니다. 특히, 구현은 최대 길이를 부과하거나 매개 변수를 무시하도록 선택할 수 있습니다. 경우] &lt;code&gt;backlog&lt;/code&gt; 파라미터 값을 가지고 &lt;code&gt;0&lt;/code&gt; 또는 음의 값을 다음의 특정 구현 기본값을 사용한다.</target>
        </trans-unit>
        <trans-unit id="038e82ed2e83821157222aec4b1425ddc2acdb2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; 의 및 &lt;code&gt;endIndex&lt;/code&gt; 에 매개 변수 이름 요소의 서브 순서를 지정합니다. 디렉토리 계층에서 루트에 &lt;em&gt;가장 가까운&lt;/em&gt; 이름 은 인덱스 &lt;code&gt;0&lt;/code&gt; 입니다. 루트에서 &lt;em&gt;가장 먼&lt;/em&gt; 이름 은 인덱스 &lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; 입니다. 반환 된 &lt;code&gt;Path&lt;/code&gt; 객체는 &lt;code&gt;beginIndex&lt;/code&gt; 에서 시작하고 &lt;code&gt;endIndex-1&lt;/code&gt; 인덱스의 요소로 확장 되는 이름 요소를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="a0fdf3dc80a013dc8c4afe2a38389db91bc45e47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cert.provider.x509v1&lt;/code&gt; property is set to a default implementation for X.509 such as:</source>
          <target state="translated">&lt;code&gt;cert.provider.x509v1&lt;/code&gt; 속성은 X.509 등의 기본 구현으로 설정됩니다 :</target>
        </trans-unit>
        <trans-unit id="312b7fe1366e0a3c03057bcb7caeef6dc182a366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal &lt;em&gt;code point&lt;/em&gt;s is now U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;. (Refer to the &lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt; definition&lt;/i&gt;&lt;/a&gt; of the U+</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 데이터 유형 (및 따라서 것을 값 &lt;code&gt;Character&lt;/code&gt; 오브젝트 캡슐화)이 고정 폭 16 비트 엔티티와 같은 문자를 정의 일본어 유니 코드 규격에 기초한다. 16 비트보다 많은 표현이 필요한 문자를 허용하도록 유니 코드 표준이 변경되었습니다. 유효한 &lt;em&gt;코드 포인트&lt;/em&gt; 의 범위 는 이제 &lt;em&gt;유니 코드 스칼라 값으로&lt;/em&gt; 알려진 U + 0000 ~ U + 10FFFF 입니다. ( U + 의 &lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;정의&lt;/i&gt;&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="159881b528b95151218ddcf06070876dc2535a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is called with no arguments; this may result in a security exception.</source>
          <target state="translated">부모 스레드 그룹 의 &lt;code&gt;checkAccess&lt;/code&gt; 메소드는 인수없이 호출됩니다. 보안 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e8a72d273e2359cf1503e1f34724cc9c2dc1f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkPermission&lt;/code&gt; method that takes a context object in addition to a permission makes access decisions based on that context, rather than on that of the current execution thread. Code within a different context can thus call that method, passing the permission and the previously-saved context object. A sample call, using the SecurityManager &lt;code&gt;sm&lt;/code&gt; obtained as in the previous example, is the following:</source>
          <target state="translated">&lt;code&gt;checkPermission&lt;/code&gt; 권한 이외에 컨텍스트 오브젝트를 사용 방법은 오히려 현재 실행 스레드의보다 그 문맥에 따라 액세스를 판정합니다. 따라서 다른 컨텍스트 내의 코드는 해당 메서드를 호출하여 권한과 이전에 저장된 컨텍스트 개체를 전달할 수 있습니다. 이전 예제에서 얻은 SecurityManager &lt;code&gt;sm&lt;/code&gt; 을 사용한 샘플 호출 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8a37143162f383e40541a3c536a0bad8cdbdac3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clear&lt;/code&gt; method sets calendar field(s) undefined. &lt;code&gt;GregorianCalendar&lt;/code&gt; uses the following default value for each calendar field if its value is undefined.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; 방법 세트 달력 필드 (들) 정의되지 않은. &lt;code&gt;GregorianCalendar&lt;/code&gt; 는 값이 정의되지 않은 경우 각 달력 필드에 다음 기본값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="eca26951481b1fa79d4de62013b67d4d4f363ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clockSequence&lt;/code&gt; value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.</source>
          <target state="translated">&lt;code&gt;clockSequence&lt;/code&gt; 의 값이 UUID 다음이 방법에 UnsupportedOperationException을 발생 시간 기반 UUID 없으면 버전 타입 1 시간 기반 UUID, 만 의미가있다.</target>
        </trans-unit>
        <trans-unit id="17c69f5047e8b8edc7675c7afa6d967e75c7e9a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;CipherInputStream&lt;/code&gt; calls the &lt;code&gt;close&lt;/code&gt; method of its underlying input stream.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; 방법 &lt;code&gt;CipherInputStream&lt;/code&gt; 를는 부르는 &lt;code&gt;close&lt;/code&gt; 는 기본 입력 스트림의 방법.</target>
        </trans-unit>
        <trans-unit id="8d16e59d74dedefbb9dca52dccbe54c8fd4fa9e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;flush&lt;/code&gt; method, and then calls the &lt;code&gt;close&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; 방법 &lt;code&gt;FilterOutputStream&lt;/code&gt; 그 호출 &lt;code&gt;flush&lt;/code&gt; 메소드를 호출하고 &lt;code&gt;close&lt;/code&gt; 해당 기본 스트림의 출력 방법.</target>
        </trans-unit>
        <trans-unit id="7e09c5caa8f665f3b57f5f5f897465a41503642c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 의 &lt;code&gt;close&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b8a4c592a0ecb263805a474537d609748a764ffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; 의 &lt;code&gt;close&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="272a141fe34e23fe1ed9cd1611d645995f50e5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combine&lt;/code&gt; method investigates the two input arrays of ProtectionDomains and returns a single array containing the updated ProtectionDomains. In the simplest case, the &lt;code&gt;combine&lt;/code&gt; method merges the two stacks into one. In more complex cases, the &lt;code&gt;combine&lt;/code&gt; method returns a modified stack of ProtectionDomains. The modification may have added new ProtectionDomains, removed certain ProtectionDomains, or simply updated existing ProtectionDomains. Re-ordering and other optimizations to the ProtectionDomains are also permitted. Typically the &lt;code&gt;combine&lt;/code&gt; method bases its updates on the information encapsulated in the &lt;code&gt;DomainCombiner&lt;/code&gt;.</source>
          <target state="translated">은 &lt;code&gt;combine&lt;/code&gt; 방식 조사한다 ProtectionDomain는 두 입력 배열 및 업데이트 된 ProtectionDomain 함유 한 배열을 반환한다. 가장 간단한 경우, &lt;code&gt;combine&lt;/code&gt; 메소드는 두 스택을 하나로 병합합니다. 더 복잡한 경우, &lt;code&gt;combine&lt;/code&gt; 메서드는 수정 된 ProtectionDomain 스택을 반환합니다. 수정으로 새 ProtectionDomain이 추가되었거나 특정 ProtectionDomain이 제거되었거나 기존 ProtectionDomain이 단순히 업데이트되었을 수 있습니다. ProtectionDomain에 대한 재정렬 및 ​​기타 최적화도 허용됩니다. 일반적으로 &lt;code&gt;combine&lt;/code&gt; 메소드는 &lt;code&gt;DomainCombiner&lt;/code&gt; 에 캡슐화 된 정보를 기반으로 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="7a90cfbc00ca33b6d145e6807e96aa2002b85303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;code&gt;completed&lt;/code&gt; 받는 인수 &lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt; 메소드는 호출자에게 표시하는 어떤 효과를 가지고 있는지 여부를 I / O 작업이 실제로, 즉, 완료 여부를 알려줍니다. 예를 들어, 바이트를 읽는 작업의 경우, 일부 바이트가 실제로 호출자의 대상 버퍼로 전송 된 경우에만 이 인수가 &lt;code&gt;true&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="f41c89acf8d6260cc4c3edf1c8a3be1a487a118d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;countMatches&lt;/code&gt; operation can be invoked as follows:</source>
          <target state="translated">&lt;code&gt;countMatches&lt;/code&gt; 의 다음과 같은 작업을 호출 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="72616ce87a153d98c6a948602b30731bd218fc29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createMBeanServer&lt;/code&gt; permission implies the &lt;code&gt;newMBeanServer&lt;/code&gt; permission.</source>
          <target state="translated">&lt;code&gt;createMBeanServer&lt;/code&gt; 의 권한은 의미 &lt;code&gt;newMBeanServer&lt;/code&gt; 권한을.</target>
        </trans-unit>
        <trans-unit id="5b8e66ca8dcc60e252a66649960d4c45b1465623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;descriptor&lt;/code&gt; can contain entries that will define the values returned by certain methods of this class, as explained in the &lt;a href=&quot;package-summary#constraints&quot;&gt; package description&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;descriptor&lt;/code&gt; 에서 설명한 바와 같이,이 클래스의 특정 방법에 의해 리턴 된 값을 정의 할 수있는 항목을 포함 &lt;a href=&quot;package-summary#constraints&quot;&gt;패키지 안내&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e74408bd8afc062ff7d9cfe3aab2c13ea6f53b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 인수 배열이 아닌 오브젝트를 지칭한다.</target>
        </trans-unit>
        <trans-unit id="8294f1f3beefad7591b5cc3ea0551866cab7aae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;destPos&lt;/code&gt; 가의 인수가 부의이다.</target>
        </trans-unit>
        <trans-unit id="2a960f617370308fb92badef083ce1edd73bfd82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; method can be called once for a given number of updates. After &lt;code&gt;digest&lt;/code&gt; has been called, the MessageDigest object is reset to its initialized state.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; 방법은 업데이트 주어진 수에 대해 한 번 호출 할 수 있습니다. &lt;code&gt;digest&lt;/code&gt; 가 호출 된 후 MessageDigest 객체는 초기화 된 상태로 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="e1dde7d27adbf8e6cef3b9bbcdbc4cbcc2ad96bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; format can represent all consecutive integers in the range -2&lt;sup&gt;53&lt;/sup&gt; to 2&lt;sup&gt;53&lt;/sup&gt;. If the pipeline has more than 2&lt;sup&gt;53&lt;/sup&gt; values, the divisor in the average computation will saturate at 2&lt;sup&gt;53&lt;/sup&gt;, leading to additional numerical errors.</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 형식은 범위의 모든 연속적인 정수를 나타낼 수 -2 &lt;sup&gt;(53)&lt;/sup&gt; 2 &lt;sup&gt;(53)&lt;/sup&gt; . 파이프 라인에 2 &lt;sup&gt;53&lt;/sup&gt; 개 이상의 값이있는 경우 평균 계산의 제수가 2 &lt;sup&gt;53&lt;/sup&gt; 에서 포화 되어 추가적인 수치 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cad4be16e75ad0f3392aac98141ceaed42bece6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; value that is closer than any other to</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 가까이있는 다른보다 값</target>
        </trans-unit>
        <trans-unit id="99457e6b4813c6110cd28c3bdc215ba87cac93e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; 의 인수보다 크거나 동일해야 &lt;code&gt;0&lt;/code&gt; , 미만 또는 동일 &lt;a href=&quot;stringbuffer#length--&quot;&gt;길이의&lt;/a&gt; 이 시퀀스.</target>
        </trans-unit>
        <trans-unit id="cf3f3c8673cb205a88acf65cbe9d481cc7bd21e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; 의 인수보다 크거나 동일해야 &lt;code&gt;0&lt;/code&gt; , 미만 또는 동일 &lt;a href=&quot;stringbuilder#length--&quot;&gt;길이의&lt;/a&gt; 이 시퀀스.</target>
        </trans-unit>
        <trans-unit id="57b48e0bd69c0d96f6dab5758abac0f4d57b113a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoded&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">다음과 같은 경우 &lt;code&gt;encoded&lt;/code&gt; 인수가 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7f825d64728b91255aebca414eb9e4365aeec903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining undecoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; 의 파라미터는 호출자가 주어진 입력 버퍼에 포함 된 것을 넘어 추가 입력을 제공 할 수 있는지에이 방법을 조언한다. 추가 입력을 제공 할 가능성이있는 경우 호출자는 이 매개 변수에 대해 &lt;code&gt;false&lt;/code&gt; 를 전달해야합니다 . 추가 입력을 제공 할 가능성이 없으면 호출자는 &lt;code&gt;true&lt;/code&gt; 를 전달해야 합니다 . 한 번의 호출로 &lt;code&gt;false&lt;/code&gt; 을 전달 하고 나중에 더 이상 입력이 실제로 불가능하다는 것을 발견하는 것은 잘못이 아니며 실제로는 매우 일반적 입니다. 그러나 일련의 호출에서이 메소드의 최종 호출은 항상 &lt;code&gt;true&lt;/code&gt; 를 전달 하여 디코딩되지 않은 나머지 입력이 변형 된 것으로 처리되도록하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="fabf47fc50497b896963aa9019b8b35e3fbde409" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining unencoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; 의 파라미터는 호출자가 주어진 입력 버퍼에 포함 된 것을 넘어 추가 입력을 제공 할 수 있는지에이 방법을 조언한다. 추가 입력을 제공 할 가능성이있는 경우 호출자는 이 매개 변수에 대해 &lt;code&gt;false&lt;/code&gt; 를 전달해야합니다 . 추가 입력을 제공 할 가능성이 없으면 호출자는 &lt;code&gt;true&lt;/code&gt; 를 전달해야 합니다 . 한 번의 호출로 &lt;code&gt;false&lt;/code&gt; 을 전달 하고 나중에 더 이상 입력이 실제로 불가능하다는 것을 발견하는 것은 잘못이 아니며 실제로는 매우 일반적 입니다. 그러나 일련의 호출에서이 메소드의 최종 호출은 항상 &lt;code&gt;true&lt;/code&gt; 를 전달 하여 인코딩되지 않은 나머지 입력이 변형 된 것으로 처리되도록하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="759ffc9229118351f3a52e836520820e1dc112e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals()&lt;/code&gt; method for an enumeration class just does a test for identical objects (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">열거 클래스 의 &lt;code&gt;equals()&lt;/code&gt; 메소드는 동일한 객체 ( &lt;code&gt;==&lt;/code&gt; )를 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="b29ad1a11acf214b8866d6a3f630b101a0ca3675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to the same object (&lt;code&gt;x == y&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 클래스 의 &lt;code&gt;equals&lt;/code&gt; 메소드는 객체에 대해 가장 구별 가능한 등가 관계를 구현합니다. 즉, null 이외의 &lt;code&gt;true&lt;/code&gt; 조치 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 의 경우 ,이 메소드는 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 같은 객체를 참조하는 경우에 한해 true를 돌려줍니다 ( &lt;code&gt;x == y&lt;/code&gt; 의 값이 &lt;code&gt;true&lt;/code&gt; 입니다 ).</target>
        </trans-unit>
        <trans-unit id="387966673ba7ec974b34376b9ba2a99dc7f3ff88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method implements an equivalence relation on non-null object references:</source>
          <target state="translated">는 &lt;code&gt;equals&lt;/code&gt; 방법의 구현을 null 이외의 객체 참조에서의 동치 관계를 :</target>
        </trans-unit>
        <trans-unit id="979f15807ff26fd3232fc39f57a589f6474444ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt;&lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; 를의 문자열이 상기 타겟 메소드로 전달받는 이벤트 객체의 값을 추출하는 데 사용된다. 일반적인 경우는 대상 메소드가 인수를 사용하지 않으며,이 경우 &lt;code&gt;eventPropertyName&lt;/code&gt; 에 null 값을 사용해야합니다 . 또는 수신 이벤트 오브젝트를 대상 메소드에 직접 전달하려면 빈 문자열을 사용하십시오. &lt;code&gt;eventPropertyName&lt;/code&gt; 문자열 의 형식은 각 메소드 또는 특성이 수신 이벤트 오브젝트에서 시작하여 앞의 메소드가 리턴 한 값에 적용되는 일련의 메소드 또는 특성입니다. 구문은 다음과 같습니다. &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; 여기서 &lt;code&gt;propertyName&lt;/code&gt; 은 메소드 또는 특성과 일치합니다. 예를 들어 &lt;code&gt;point&lt;/code&gt; 을 추출하려면 &lt;code&gt;MouseEvent&lt;/code&gt; 의 속성에서 &lt;code&gt;&quot;point&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; 를 &lt;code&gt;eventPropertyName&lt;/code&gt; 으로 사용할 수 있습니다 . a로부터 &quot;텍스트&quot;속성 추출하려면 &lt;code&gt;MouseEvent&lt;/code&gt; 로모그래퍼 &lt;code&gt;JLabel&lt;/code&gt; 소스 사용으로 다음 중 하나 &lt;code&gt;eventPropertyName&lt;/code&gt; 를 : &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; , &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt; &lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; . 메소드를 찾을 수 없거나 메소드 호출의 일부로 예외가 생성되면 디스패치시 &lt;code&gt;RuntimeException&lt;/code&gt; 이 발생합니다. 예를 들어, 수신 이벤트 오브젝트가 널이고 &lt;code&gt;eventPropertyName&lt;/code&gt; null이 아니고 비어 있지 않은 경우, &lt;code&gt;RuntimeException&lt;/code&gt; 가 Throw됩니다.</target>
        </trans-unit>
        <trans-unit id="7b4b06ad05dfb91d784c6607e33529a4e06af587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 방법은 그 이름과 동일한 방법 발견 &lt;code&gt;methodName&lt;/code&gt; 로의 속성을, 상기 대상에서 메소드를 호출한다. 대상의 클래스가 주어진 이름으로 많은 메소드를 정의 할 때 구현시 Java 언어 사양 (15.11)에 지정된 알고리즘을 사용하여 가장 구체적인 메소드를 선택해야합니다. 대상 및 인수의 동적 클래스는 컴파일 타임 유형 정보 대신 사용되며 &lt;a href=&quot;../lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt; 클래스 자체 와 같이 기본 값과 관련 래퍼 클래스 간의 변환이 내부적으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="721571d52ff7950b67b214b688c61b64a75961c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that creates new threads as needed to execute tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. It may reuse previously constructed threads when they are available.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; 매개 변수는있다 &lt;code&gt;ExecutorService&lt;/code&gt; 를 I / 그룹의 비동기 채널에서 시작된 작업에 대한 O 이벤트 및 발송 완료 결과를 처리하기 위해 제출 된 작업을 실행하기 위해 필요에 따라 새 스레드를 생성합니다. 사용 가능한 경우 이전에 구성된 스레드를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec1467cb33e94fd2c0bb533c599fa01ae6a0656e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that executes tasks submitted to dispatch completion results for operations initiated on asynchronous channels in the group.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; 매개 변수는이다 &lt;code&gt;ExecutorService&lt;/code&gt; 를 실행하는 작업은 그룹에서 비동기 채널을 개시 조작에 송출 완료 결과 제출있다.</target>
        </trans-unit>
        <trans-unit id="f3b206390268e595a7543c9f72d6571233bef9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; 매개 변수는있다 &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; 에&lt;/a&gt; 작업이 I / 채널을 결과에 시작한 작업 O 이벤트 및 발송 완료 결과를 처리하기 위해 제출되는. 이러한 작업의 특성은 구현에 따라 다르므로 &lt;code&gt;Executor&lt;/code&gt; 를 구성 할 때는주의를 기울여야합니다 . 최소한 무제한 작업 대기열을 지원해야하며 &lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt; 메소드 의 호출자 스레드에서 태스크를 실행하지 않아야합니다 . 채널이 열린 상태에서 실행기 서비스를 종료하면 지정되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9a348a5e6c50ba5a16fcb50db730eca7f5277712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt; has been called and the security manager has permitted the exit operation to take place.</source>
          <target state="translated">&lt;code&gt;Runtime&lt;/code&gt; 클래스 의 &lt;code&gt;exit&lt;/code&gt; 메소드 가 호출되었으며 보안 관리자가 엑시트 조작을 허용했습니다.</target>
        </trans-unit>
        <trans-unit id="1a61775a7139e096b9fd0be3d2ad7ac6f1c956f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;family&lt;/code&gt; parameter is used to specify the &lt;a href=&quot;../../net/protocolfamily&quot;&gt;&lt;code&gt;ProtocolFamily&lt;/code&gt;&lt;/a&gt;. If the datagram channel is to be used for IP multicasting then this should correspond to the address type of the multicast groups that this channel will join.</source>
          <target state="translated">&lt;code&gt;family&lt;/code&gt; 매개 변수가 지정하는 데 사용됩니다 &lt;a href=&quot;../../net/protocolfamily&quot;&gt; &lt;code&gt;ProtocolFamily&lt;/code&gt; 을&lt;/a&gt; . 데이터 그램 채널을 IP 멀티 캐스팅에 사용하려면이 채널이 참가할 멀티 캐스트 그룹의 주소 유형에 해당해야합니다.</target>
        </trans-unit>
        <trans-unit id="f08c1804c0526409a1ecb2988cff36a97dc47de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; parameters may be null if and only if they are null in a listener to be removed.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; 및 &lt;code&gt;handback&lt;/code&gt; 들이 제거 될 수신기에서 널이다 경우만 파라미터 널이 될 수있다.</target>
        </trans-unit>
        <trans-unit id="acfa3270c433f7fbeb166904731784b7ab01474e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method is never invoked more than once by a Java virtual machine for any given object.</source>
          <target state="translated">지정된 객체에 대해 Java 가상 머신 이 &lt;code&gt;finalize&lt;/code&gt; 메소드를 두 번 이상 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="36550a7fe4b3770df4940e5d45c14dff3f4cb361" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method of class &lt;code&gt;Object&lt;/code&gt; performs no special action; it simply returns normally. Subclasses of &lt;code&gt;Object&lt;/code&gt; may override this definition.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 클래스 의 &lt;code&gt;finalize&lt;/code&gt; 메소드는 특별한 조치를 수행하지 않습니다. 단순히 정상적으로 돌아옵니다. &lt;code&gt;Object&lt;/code&gt; 의 서브 클래스 가이 정의를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="290eeab6379b679af729a0f7d139a6b6afebf8ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findSystemClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;findSystemClass&lt;/code&gt; 의 클래스의 메소드 &lt;code&gt;ClassLoader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b78d49371e443cbd3adbfb51ffc64676bde68d8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMap()&lt;/code&gt; operation has the effect of applying a one-to-many transformation to the elements of the stream, and then flattening the resulting elements into a new stream.</source>
          <target state="translated">&lt;code&gt;flatMap()&lt;/code&gt; 연산은 스트림의 요소 일대 변환을 적용하고 새로운 스트림으로 생성 된 소자를 평탄화하는 효과를 갖는다.</target>
        </trans-unit>
        <trans-unit id="9794be29838cb64627abe081d7728e6987d9e44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;DataOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; 방법 &lt;code&gt;DataOutputStream&lt;/code&gt; 정렬 부르는 &lt;code&gt;flush&lt;/code&gt; 의 기본이되는 출력 스트림의 방법을.</target>
        </trans-unit>
        <trans-unit id="195ffa6218dd9b603f2e4ca8f61c877be833e3ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; 의 방법을 &lt;code&gt;FilterOutputStream&lt;/code&gt; 부르는 &lt;code&gt;flush&lt;/code&gt; 의 기본이되는 출력 스트림의 방법을.</target>
        </trans-unit>
        <trans-unit id="68aa9823b85500f33061dc1eb4258756e15e005f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; 의 &lt;code&gt;flush&lt;/code&gt; 메소드 는 아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="708bb18e269a3b497919640ccb7a50b14533bedd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forName&lt;/code&gt; method in class &lt;code&gt;Class&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forName&lt;/code&gt; 을 용 의 메소드 &lt;code&gt;Class&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8de3dc96d234b55e125cd365d4c69d5d74e9de59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; 플래그는 인증서가 전달 될 순서 지정 &lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt; (순방향 또는 역방향) 방법.</target>
        </trans-unit>
        <trans-unit id="7f3a1ac72ca4c5a5aab4a7ea8026300ca9e9a65d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; 플래그는 인증서가 전달 될 순서 지정 &lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt; (순방향 또는 역방향) 방법. &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 의가&lt;b&gt;있어야&lt;/b&gt; 역 검사를 지원하고 &lt;b&gt;있습니다&lt;/b&gt; 방향의 체크를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c29abf69126019dfa340a81cfcd7917ddb6a1954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fractionalDigits&lt;/code&gt; parameter allows the output of the fractional second to be controlled. Specifying zero will cause no fractional digits to be output. From 1 to 9 will output an increasing number of digits, using zero right-padding if necessary. The special value -1 is used to output as many digits as necessary to avoid any trailing zeroes.</source>
          <target state="translated">&lt;code&gt;fractionalDigits&lt;/code&gt; 소수 제의 출력을 가능 매개 변수를 제어한다. 0을 지정하면 소수 자릿수가 출력되지 않습니다. 1에서 9까지는 필요한 경우 오른쪽 패딩을 사용하여 자릿수를 증가시킵니다. 특수 값 -1은 후행 0을 피하기 위해 필요한만큼의 숫자를 출력하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0f3e1d9782b5c32d63d7b0cc83ee2c191412bb87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;GregorianCalendar&lt;/code&gt;. &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; 및 &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; 값이 생성 할 때, 로케일 따라 자원을 이용하여 초기화 &lt;code&gt;GregorianCalendar&lt;/code&gt; . &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; 가 &lt;code&gt;MONDAY&lt;/code&gt; 이고 &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; 가 4 인 경우 &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;주 결정은&lt;/a&gt; ISO 8601 표준과 호환 됩니다. 이 값은 표준이 선호되는 로케일에서 사용됩니다. 이 값은 &lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; 를 호출하여 명시 적으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56523d844e395cab10ecde9ba8b570825460b5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInstance&lt;/code&gt; factory method of the &lt;code&gt;Cipher&lt;/code&gt; engine class follows these rules in order to instantiate a provider's implementation of &lt;code&gt;CipherSpi&lt;/code&gt; for a transformation of the form &quot;</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; 엔진 클래스 의 &lt;code&gt;getInstance&lt;/code&gt; 팩토리 메소드는 &quot; 규칙 형식의 변환을 위해 제공자의 &lt;code&gt;CipherSpi&lt;/code&gt; 구현을 인스턴스화하기 위해 이러한 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="f09e308477567f7fb18f8db544516ee32916e1fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getNotifTypes&lt;/code&gt; method returns an array of strings containing the notification types that the MBean may emit. The notification type is a dot-notation string which describes what the emitted notification is about, not the Java class of the notification. A single generic notification class can be used to send notifications of several types. All of these types are returned in the string array result of the &lt;code&gt;getNotifTypes&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getNotifTypes&lt;/code&gt; 의 방법은 MBean가 방출 할 수 있다는 통지 유형을 포함하는 문자열의 배열을 반환한다. 알림 유형은 알림의 Java 클래스가 아니라 생성 된 알림에 대해 설명하는 점 표기법 문자열입니다. 단일 일반 알림 클래스를 사용하여 여러 유형의 알림을 보낼 수 있습니다. 이러한 모든 유형은 &lt;code&gt;getNotifTypes&lt;/code&gt; 메소드 의 문자열 배열 결과로 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="058e0ca7376a98eb437efbc0aef64d1a8a108d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getObjectInstance()&lt;/code&gt; method of an object factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">객체 팩토리 의 &lt;code&gt;getObjectInstance()&lt;/code&gt; 메소드는 다른 매개 변수를 사용하여 여러 번 호출 될 수 있습니다. 구현은 스레드로부터 안전합니다.</target>
        </trans-unit>
        <trans-unit id="6a8501111fcfea5e31cfee8d6894af584ff150ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOptionType&lt;/code&gt; method returns this value if this &lt;code&gt;ConfirmationCallback&lt;/code&gt; was instantiated with &lt;code&gt;options&lt;/code&gt; instead of an &lt;code&gt;optionType&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;ConfirmationCallback&lt;/code&gt; 가 &lt;code&gt;optionType&lt;/code&gt; 대신에 &lt;code&gt;options&lt;/code&gt; 으로 인스턴스화 된 경우 , &lt;code&gt;getOptionType&lt;/code&gt; 메소드는이 값을 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="6ebc4bc14d6647d69c5c4a4fb63fb8fd2ffdfd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getResources&lt;/code&gt; method of the context &lt;code&gt;ClassLoader&lt;/code&gt; is used locate JAR files containing files named &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt;</source>
          <target state="translated">컨텍스트 &lt;code&gt;ClassLoader&lt;/code&gt; 의 &lt;code&gt;getResources&lt;/code&gt; 메소드는 &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt; 라는 파일을 포함하는 JAR 파일을 찾는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="b2b6b51bd170eb65242dd9c81805d8ac434ccc43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getStateToBind()&lt;/code&gt; method of a state factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">상태 팩토리 의 &lt;code&gt;getStateToBind()&lt;/code&gt; 메소드는 다른 매개 변수를 사용하여 여러 번 호출 될 수 있습니다. 구현은 스레드로부터 안전합니다.</target>
        </trans-unit>
        <trans-unit id="f433eca03b2eb0f32d07fb7e2e68b92fac6f3c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; method implementation checks the instance(s) of the &lt;code&gt;Callback&lt;/code&gt; object(s) passed in to retrieve or display the requested information. The following example is provided to help demonstrate what an &lt;code&gt;handle&lt;/code&gt; method implementation might look like. This example code is for guidance only. Many details, including proper error handling, are left out for simplicity.</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; 의 방법을 구현 검사 인스턴스 (들) &lt;code&gt;Callback&lt;/code&gt; 전달 객체 (들)를 검색 또는 요청 된 정보를 표시한다. 다음 예제는 &lt;code&gt;handle&lt;/code&gt; 메소드 구현의 모양을 보여주기 위해 제공됩니다 . 이 예제 코드는 지침 용입니다. 적절한 오류 처리를 포함하여 많은 세부 사항이 단순성을 위해 생략되었습니다.</target>
        </trans-unit>
        <trans-unit id="78806b6c0d8e3a500425fd33fe6be57433f2f45a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method of the returned set returns the sum of the</source>
          <target state="translated">리턴 된 세트 의 &lt;code&gt;hashCode&lt;/code&gt; 메소드는</target>
        </trans-unit>
        <trans-unit id="fd1ec688b3211b62ec6deea7903a4e5a33c5b1e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">다음과 같은 경우 &lt;code&gt;hostname&lt;/code&gt; 인수가 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0e43ec7f450994678afac7d3d20f221033df02a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostnameVerifier&lt;/code&gt; for this object.</source>
          <target state="translated">이 객체 의 &lt;code&gt;hostnameVerifier&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a3a03a08373e3a4eb0d5649cfecb26445106e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 값은 누적 함수에 대한 식별해야한다. 이 모든 것을 의미 &lt;code&gt;t&lt;/code&gt; , &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; 와 동일하다 &lt;code&gt;t&lt;/code&gt; . &lt;code&gt;accumulator&lt;/code&gt; 함수가 있어야 &lt;a href=&quot;package-summary#Associativity&quot;&gt;연관&lt;/a&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="15d70cdc09c9191c55557a009f3a78afb163bfc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; is equal to &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 값은 누적 함수에 대한 식별해야한다. 이 수단은 모든 것을 &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; 와 동일하다 &lt;code&gt;x&lt;/code&gt; . &lt;code&gt;accumulator&lt;/code&gt; 함수가 있어야 &lt;a href=&quot;package-summary#Associativity&quot;&gt;연관&lt;/a&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="c7c434e8ee038c0b3fcfe01a6456babfb2b633e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the combiner function. This means that for all &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;combiner(identity, u)&lt;/code&gt; is equal to &lt;code&gt;u&lt;/code&gt;. Additionally, the &lt;code&gt;combiner&lt;/code&gt; function must be compatible with the &lt;code&gt;accumulator&lt;/code&gt; function; for all &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, the following must hold:</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 값은 결합기 기능에 대한 정체성을해야합니다. 이 모든 것을 의미 &lt;code&gt;u&lt;/code&gt; , &lt;code&gt;combiner(identity, u)&lt;/code&gt; 과 동일 &lt;code&gt;u&lt;/code&gt; . 또한 &lt;code&gt;combiner&lt;/code&gt; 기능은 &lt;code&gt;accumulator&lt;/code&gt; 기능 과 호환되어야합니다 . 모든 &lt;code&gt;u&lt;/code&gt; 및 &lt;code&gt;t&lt;/code&gt; 에 대해 다음을 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="cb7b6822fbfe6353745706addd58f9b58b682324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ifAddress&lt;/code&gt; argument can be used on a multi-homed host for a &lt;code&gt;ServerSocket&lt;/code&gt; that will only accept connect requests to one of its addresses. If &lt;code&gt;ifAddress&lt;/code&gt; is null, it will accept connections on all local addresses. The socket is configured with the socket options (such as accept timeout) given to this factory.</source>
          <target state="translated">&lt;code&gt;ifAddress&lt;/code&gt; 의 인수는 대한 멀티 홈 호스트에서 사용할 수 있습니다 &lt;code&gt;ServerSocket&lt;/code&gt; 의 단지의 주소에 대한 접속 요구를 받아 들일 것입니다. 경우 &lt;code&gt;ifAddress&lt;/code&gt; 가 널 (null)이, 모든 로컬 주소에 대한 연결을 허용합니다. 소켓은이 팩토리에 제공된 소켓 옵션 (예 : 승인 시간 종료)으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="9d4aa0ca4766a00288d0853e4d6293a48f65d87d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreMetadata&lt;/code&gt; parameter, if set to &lt;code&gt;true&lt;/code&gt;, allows the reader to disregard any metadata encountered during the read. Subsequent calls to the &lt;code&gt;getStreamMetadata&lt;/code&gt; and &lt;code&gt;getImageMetadata&lt;/code&gt; methods may return &lt;code&gt;null&lt;/code&gt;, and an &lt;code&gt;IIOImage&lt;/code&gt; returned from &lt;code&gt;readAll&lt;/code&gt; may return &lt;code&gt;null&lt;/code&gt; from their &lt;code&gt;getMetadata&lt;/code&gt; method. Setting this parameter may allow the reader to work more efficiently. The reader may choose to disregard this setting and return metadata normally.</source>
          <target state="translated">&lt;code&gt;ignoreMetadata&lt;/code&gt; 의 로 설정하면 매개 변수는 &lt;code&gt;true&lt;/code&gt; , 읽기 중에 발생한 메타 데이타를 리더가 무시할 수 있습니다. 받는 후속 호출 &lt;code&gt;getStreamMetadata&lt;/code&gt; 및 &lt;code&gt;getImageMetadata&lt;/code&gt; 방법은 반환 할 수 있습니다 &lt;code&gt;null&lt;/code&gt; , 그리고 &lt;code&gt;IIOImage&lt;/code&gt; 에 에서 반환 &lt;code&gt;readAll&lt;/code&gt; 반환 할 수 있습니다 &lt;code&gt;null&lt;/code&gt; 자신의에서 &lt;code&gt;getMetadata&lt;/code&gt; 방법. 이 매개 변수를 설정하면 리더가 더 효율적으로 작동 할 수 있습니다. 독자는이 설정을 무시하고 메타 데이터를 정상적으로 반환하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd6a40388fc0550eb7dfd1739f418989dfe9f308" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;implies&lt;/code&gt; method is used by the AccessController to determine whether or not a requested permission is implied by another permission that is known to be valid in the current execution context.</source>
          <target state="translated">는 &lt;code&gt;implies&lt;/code&gt; 방법은 권한 요청이 현재 실행 콘텍스트에서 유효한 것으로 알려진 다른 권한에 의해 암시되는 여부를 결정하기 위해 AccessController에 의해 사용된다.</target>
        </trans-unit>
        <trans-unit id="64642e3202227bf1eb96b4d1dcff39ebc286b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 매개 변수는 반환 할 이름 요소의 인덱스입니다. 디렉토리 계층에서 루트에 &lt;em&gt;가장 가까운&lt;/em&gt; 요소의 인덱스는 &lt;code&gt;0&lt;/code&gt; 입니다. 루트에서 &lt;em&gt;가장 먼&lt;/em&gt; 요소의 인덱스 &lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="178fa46f7783f7ca8be10feb795a8f432e6ce094" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialSize&lt;/code&gt; parameter may be used by the implementation as a &lt;em&gt;hint&lt;/em&gt; as to the initial number of tasks it may submit. For example, it may be used to indicate the initial number of threads that wait on I/O events.</source>
          <target state="translated">&lt;code&gt;initialSize&lt;/code&gt; 가의 매개 변수는 같은 구현에 의해 사용될 수있는 &lt;em&gt;힌트&lt;/em&gt; 가 제출할 수 작업의 초기 수있다. 예를 들어, I / O 이벤트를 기다리는 초기 스레드 수를 나타내는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e1910412b5ab4f4360c75fcf4e4c4f981f39033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 방법은 각각 여러 번 호출 할 수 있습니다. DSAKeyPairGenerator에서 &lt;code&gt;initialize&lt;/code&gt; 메소드가 호출 되지 않은 경우 기본값은 사전 계산 된 p, q 및 g 매개 변수와 SecureRandom 인스턴스를 임의의 비트 소스로 사용하여 1024 비트 키를 생성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e89c947619670b6f05ed77c9eb43708ff984ab4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;abstract&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;abstract&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="57a2bf2f87f99f529f820792d0d9541859c36200" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;final&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;final&lt;/code&gt; 수정 자.</target>
        </trans-unit>
        <trans-unit id="b83b91795fa9f3dd467562df8b850ad43ca35b18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;interface&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;interface&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="6e6129e278d1c31b1641cf76868b23a7ccbc053b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;native&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;native&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="9487f7c45da0d56c561a74e7e315aad283ae33db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;private&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;private&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="d998015ddde224da2f2e242d06b1b5cda8342b93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;protected&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;protected&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="1ab9b738d34103d531a4ba5cdf4833da76ab4445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;public&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;public&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="cb450909d14452e1607d3359ccbe310b15e65773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;static&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;static&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="e48ba12a5c869896a959b271934ece28496f4515" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;strictfp&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;strictfp&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="ab15ce0d3f3e80624e13e8b8f7afdae7f2cc31b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;synchronized&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;synchronized&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="47c273abe027c89df6d6ce37e4c65a5d5f445ccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;transient&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;transient&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="75d6fc286ca2b46ac7f2dfbb0cff289b6c5d7d46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;volatile&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;volatile&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="cfcd94506157aeb895a9c9c21b22d64a6d79a08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;modifier#constructorModifiers--&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;modifier#methodModifiers--&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;interface&lt;/code&gt; 이 클래스에서 논의 수정은 자바 언어의 진정한 수정하지 않고는이 방법에 의해 나열된 다른 모든 수정 후에 나타납니다. 이 메소드는 Java 엔티티의 유효한 수정자가 아닌 수정 자의 문자열을 리턴 할 수 있습니다. 즉, 입력으로 표시되는 수정 자 조합의 가능한 유효성에 대해서는 점검이 수행되지 않습니다. 생성자 또는 메소드와 같은 알려진 유형의 엔티티에 대해 이러한 검사를 수행하려면 먼저 &lt;a href=&quot;modifier#constructorModifiers--&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;modifier#methodModifiers--&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt; 와 같은 메소드에서 적절한 마스크를 사용하여 &lt;code&gt;toString&lt;/code&gt; 의 인수를 AND하십시오 .</target>
        </trans-unit>
        <trans-unit id="f254cbd5db1e9d15f5755ade659caa4db237d900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isMixerSupported&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; for all the info objects returned by this method. The corresponding mixer instances for the info objects are returned by the &lt;code&gt;getMixer&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;isMixerSupported&lt;/code&gt; 의 메소드가 리턴 &lt;code&gt;true&lt;/code&gt; 모든 정보를이 메소드에 의해 반환되는 객체. info 객체의 해당 믹서 인스턴스는 &lt;code&gt;getMixer&lt;/code&gt; 메서드에 의해 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="bec8b9be4298b00c09430efa2b0f3eff6e4f2e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package contains dynamic language support provided directly by the Java core class libraries and virtual machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; 의 패키지는 자바 코어 클래스 라이브러리 및 가상 머신에 의해 직접 제공 동적 언어 지원이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2e6b7ef82a944f100ddc377e04a645035f44c50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.nio&lt;/code&gt; package defines the buffer classes, which are used throughout the NIO APIs. The charset API is defined in the &lt;a href=&quot;charset/package-summary&quot;&gt;&lt;code&gt;java.nio.charset&lt;/code&gt;&lt;/a&gt; package, and the channel and selector APIs are defined in the &lt;a href=&quot;channels/package-summary&quot;&gt;&lt;code&gt;java.nio.channels&lt;/code&gt;&lt;/a&gt; package. Each of these subpackages has its own service-provider (SPI) subpackage, the contents of which can be used to extend the platform's default implementations or to construct alternative implementations.</source>
          <target state="translated">&lt;code&gt;java.nio&lt;/code&gt; 에서의 패키지는 NIO API 전체로 사용하는 버퍼 클래스를 정의한다. charset API는 &lt;a href=&quot;charset/package-summary&quot;&gt; &lt;code&gt;java.nio.charset&lt;/code&gt; &lt;/a&gt; 패키지에 정의되어 있으며 채널 및 선택기 API는 &lt;a href=&quot;channels/package-summary&quot;&gt; &lt;code&gt;java.nio.channels&lt;/code&gt; &lt;/a&gt; 패키지에 정의되어 있습니다. 각 서브 패키지에는 자체 SPI (Service-Provider) 서브 패키지가 있으며 그 내용은 플랫폼의 기본 구현을 확장하거나 대체 구현을 구성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="169158b25e43c0b1b051996b7d7ecf8990270082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as &lt;code&gt;java.lang.Object&lt;/code&gt;, because the code for a proxy class is generated by trusted system code. This protection domain will typically be granted &lt;code&gt;java.security.AllPermission&lt;/code&gt;.</source>
          <target state="translated">프록시 클래스 의 코드는 신뢰할 수있는 시스템 코드에 의해 생성되므로 프록시 클래스 의 &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; 은 부트 스트랩 클래스 로더가로드 한 시스템 클래스 (예 : &lt;code&gt;java.lang.Object&lt;/code&gt; ) 와 동일 합니다. 이 보호 도메인에는 일반적으로 &lt;code&gt;java.security.AllPermission&lt;/code&gt; 이 부여 됩니다.</target>
        </trans-unit>
        <trans-unit id="9813f685206a1823081b6d834a2cc39d317ab3f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl &lt;/code&gt; package provides the interfaces to the ACL and related data structures (ACL entries, groups, permissions, etc.), and the &lt;code&gt;sun.security.acl &lt;/code&gt; classes provide a default implementation of the interfaces. For example, &lt;code&gt;java.security.acl.Acl &lt;/code&gt; provides the interface to an ACL and the &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; class provides the default implementation of the interface.</source>
          <target state="translated">&lt;code&gt;java.security.acl &lt;/code&gt; 의 용 패키지는 ACL 및 관련된 데이터 구조에 대한 인터페이스 (ACL 엔트리 그룹, 권한 등)를 제공하고, &lt;code&gt;sun.security.acl &lt;/code&gt; 클래스 인터페이스의 기본 구현을 제공한다. 예를 들어, &lt;code&gt;java.security.acl.Acl &lt;/code&gt; 은 ACL에 대한 인터페이스를 제공하고 &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; 클래스는 인터페이스의 기본 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cfb4c2fdc7d8d17ba626b9a63de7a2721320820c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl.Acl &lt;/code&gt; interface extends the &lt;code&gt;java.security.acl.Owner &lt;/code&gt; interface. The Owner interface is used to maintain a list of owners for each ACL. Only owners are allowed to modify an ACL. For example, only an owner can call the ACL's &lt;code&gt;addEntry&lt;/code&gt; method to add a new ACL entry to the ACL.</source>
          <target state="translated">&lt;code&gt;java.security.acl.Acl &lt;/code&gt; 의의 인터페이스는 확장 &lt;code&gt;java.security.acl.Owner &lt;/code&gt; 에의 인터페이스를. 소유자 인터페이스는 각 ACL의 소유자 목록을 유지하는 데 사용됩니다. 소유자 만 ACL을 수정할 수 있습니다. 예를 들어, 소유자 만 ACL의 &lt;code&gt;addEntry&lt;/code&gt; 메소드를 호출하여 ACL 에 새 ACL 항목을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c584f80333ee86bf0587299c7f49da992c3a95b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.time.chrono&lt;/code&gt; package contains the calendar neutral API &lt;a href=&quot;chrono/chronolocaldate&quot;&gt;&lt;code&gt;ChronoLocalDate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt;&lt;code&gt;ChronoLocalDateTime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt;&lt;code&gt;ChronoZonedDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;chrono/era&quot;&gt;&lt;code&gt;Era&lt;/code&gt;&lt;/a&gt;. This is intended for use by applications that need to use localized calendars. It is recommended that applications use the ISO-8601 date and time classes from this package across system boundaries, such as to the database or across the network. The calendar neutral API should be reserved for interactions with users.</source>
          <target state="translated">&lt;code&gt;java.time.chrono&lt;/code&gt; 의 패키지는 달력 중립 API 포함 &lt;a href=&quot;chrono/chronolocaldate&quot;&gt; &lt;code&gt;ChronoLocalDate&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt; &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt; &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;chrono/era&quot;&gt; &lt;code&gt;Era&lt;/code&gt; &lt;/a&gt; . 현지화 된 달력을 사용해야하는 응용 프로그램에서 사용하기위한 것입니다. 응용 프로그램은 데이터베이스 또는 네트워크와 같은 시스템 경계에서이 패키지의 ISO-8601 날짜 및 시간 클래스를 사용하는 것이 좋습니다. 캘린더 중립 API는 사용자와의 상호 작용을 위해 예약되어야합니다.</target>
        </trans-unit>
        <trans-unit id="31f5723f716d2e10c3dc95d349885c1c4063b2cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining input and output streams, as well as a run-time registry that discovers installed service provider instances and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; 의의 패키지는 읽기, 쓰기, 및 트랜스 코딩 이미지 및 획득 입력 및 출력 스트림을위한 서비스 프로 바이더 인터페이스뿐만 아니라 발견하여 서비스 프로 바이더 인스턴스를 설치하고 새로운 인스턴스를 동적으로 등록 할 수 있도록하는 런타임 레지스트리가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f9893bf2cb21c5852d399c228329581eed4bc85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt; RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; 의의 패키지는 속성과 그들이 어떻게 세트에 수집되는 유형을 설명합니다. &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 패키지는 IETF 사양에 지정된 속성의 구현입니다 대부분의 API가 지원하는 표준 속성의 모든 열거 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;모델 및 의미 : RFC 2911 인터넷 인쇄 프로토콜, 1.1&lt;/a&gt; 2000 년 9 월 일자를, &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 에 지정된 속성 에는 해상도, 사본, 용지 크기, 작업 우선 순위 및 페이지 범위와 같은 공통 기능이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="766e65fec5bf118351de7f21179d89ba7379dbda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of an element.</source>
          <target state="translated">요소 의 &lt;code&gt;kind&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a5fbfe70cef778b32594cced3a732339cbc1acf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 의 인수가 부의이다.</target>
        </trans-unit>
        <trans-unit id="5c30faee739e118e9dbf221fbacf126dc2e548ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument must be less than or equal to &lt;code&gt;buf.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 인수 미만이거나에 동일해야 &lt;code&gt;buf.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a20aaa21bfe3d598720524fef65f51974af49fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; 파라미터는 패턴이 적용되는 횟수를 제어하기 때문에, 결과 어레이의 길이에 영향을 미친다. 한도</target>
        </trans-unit>
        <trans-unit id="7227cc8a8f47600f7a135282736709ff73dd62b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; parameter locates the directory entry to create. The &lt;code&gt;existing&lt;/code&gt; parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using &lt;code&gt;link&lt;/code&gt; as the path. On some file systems this is known as creating a &quot;hard link&quot;. Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; 매개 변수를 만들 수있는 디렉토리 항목을 찾습니다. &lt;code&gt;existing&lt;/code&gt; 매개 변수는 기존 파일의 경로입니다. 이 메소드는 &lt;code&gt;link&lt;/code&gt; 를 경로로 사용하여 액세스 할 수 있도록 파일의 새 디렉토리 항목을 작성합니다 . 일부 파일 시스템에서는이를 &quot;하드 링크&quot;라고합니다. 파일 속성이 파일 또는 각 디렉토리 항목에 대해 유지 보수되는지 여부는 파일 시스템마다 다르므로 지정되지 않습니다. 일반적으로 파일 시스템에서는 파일의 모든 링크 (디렉토리 항목)가 동일한 파일 시스템에 있어야합니다. 또한 일부 플랫폼에서 Java 가상 머신은 하드 링크를 작성하거나 디렉토리에 대한 링크를 작성하기 위해 구현 특정 권한으로 시작해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d151fce3015e4ed9e5cd20051237afb5cefea88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listIterator(int)&lt;/code&gt; method returns a &quot;wrapper object&quot; over a list iterator on the backing list, which is created with the corresponding method on the backing list. The &lt;code&gt;iterator&lt;/code&gt; method merely returns &lt;code&gt;listIterator()&lt;/code&gt;, and the &lt;code&gt;size&lt;/code&gt; method merely returns the subclass's &lt;code&gt;size&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;listIterator(int)&lt;/code&gt; 에있어서, 상기 배면에서의 대응하는 방법으로 생성되는 배킹리스트의리스트 반복자는 &quot;래퍼 객체&quot;를 리턴한다. &lt;code&gt;iterator&lt;/code&gt; 방법은 단순히 반환 &lt;code&gt;listIterator()&lt;/code&gt; 하고, &lt;code&gt;size&lt;/code&gt; 방법은 단지 서브 클래스의 반환 &lt;code&gt;size&lt;/code&gt; 필드.</target>
        </trans-unit>
        <trans-unit id="1fedd930e38f5398c449c705300b0fc17b0566c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;loadClass&lt;/code&gt; 클래스의 메소드 &lt;code&gt;ClassLoader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c9b144092edff275e75b32f1dca016975180187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapper&lt;/code&gt; function passed to &lt;code&gt;flatMap&lt;/code&gt; splits a line, using a simple regular expression, into an array of words, and then creates a stream of words from that array.</source>
          <target state="translated">&lt;code&gt;flatMap&lt;/code&gt; 에 전달 된 &lt;code&gt;mapper&lt;/code&gt; 함수 는 간단한 정규식을 사용하여 행을 단어 배열로 분할 한 다음 해당 배열에서 단어 스트림을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e7777926bab037130e9c4b41941f7d725a543594" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Person&lt;/code&gt;, to accumulate the set of last names in each city:</source>
          <target state="translated">&lt;code&gt;mapping()&lt;/code&gt; 등의 다운 스트림으로, 다단계 감소를 사용할 때 수집은 가장 유용 &lt;code&gt;groupingBy&lt;/code&gt; 또는 &lt;code&gt;partitioningBy&lt;/code&gt; . 예를 들어, &lt;code&gt;Person&lt;/code&gt; 이라는 스트림이 주어지면 각 도시에 성 집합을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="903b585e02a8cfe6d8af38444d4c285b4ecfdab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InflaterInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InflaterInputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0371bac823202240bd6c72d5e06eb31b731df75c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e02e9dcce04c471816e17e93a8e7c8612865389" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; remembers the current line number in a private variable, and then calls the &lt;code&gt;mark&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드는 전용 변수의 현재 행 번호를 기억 한 다음 기본 입력 스트림 의 &lt;code&gt;mark&lt;/code&gt; 메소드 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="9baaba468b2b9ec943dee5d33e382f44cbd16e98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="77e5480e00ffc1e7db2c7cde3ede487453a10255" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; 매개 변수는 방문에 디렉토리 수준의 최대 수입니다. &lt;code&gt;0&lt;/code&gt; 값은 보안 관리자가 거부하지 않는 한 시작 파일 만 방문 함을 의미합니다. &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt; 값은 모든 레벨을 방문해야 함을 나타내는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="259fe46dcadeee76b1ff944baef9fa3edc7fae57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; 매개 변수는 방문에 디렉토리 수준의 최대 수입니다. &lt;code&gt;0&lt;/code&gt; 값은 보안 관리자가 거부하지 않는 한 시작 파일 만 방문 함을 의미합니다. &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt; 값은 모든 레벨을 방문해야 함을 나타내는 데 사용될 수 있습니다. &lt;code&gt;visitFile&lt;/code&gt; 의 방법에서 발생하는 디렉토리를 포함한 모든 파일에 대한 호출 &lt;code&gt;maxDepth&lt;/code&gt; 이 경우 기본 파일 속성을 읽을 수 없습니다하지 않는 한, &lt;code&gt;visitFileFailed&lt;/code&gt; 의 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="6af76e421d8e057e7b7d9ff20dd9e09a4d087b85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metaData&lt;/code&gt; parameter can be used to limit the number of I/O operations that this method is required to perform. Passing &lt;code&gt;false&lt;/code&gt; for this parameter indicates that only updates to the file's content need be written to storage; passing &lt;code&gt;true&lt;/code&gt; indicates that updates to both the file's content and metadata must be written, which generally requires at least one more I/O operation. Whether this parameter actually has any effect is dependent upon the underlying operating system and is therefore unspecified.</source>
          <target state="translated">&lt;code&gt;metaData&lt;/code&gt; 파라미터는이 방법을 수행하기 위해 요구되는 I / O 동작들의 수를 제한 할 수있다. 이 매개 변수에 대해 &lt;code&gt;false&lt;/code&gt; 를 전달 하면 파일 내용에 대한 업데이트 만 저장소에 기록해야 함을 나타냅니다. &lt;code&gt;true&lt;/code&gt; 를 전달 하면 파일의 내용과 메타 데이터 모두에 대한 업데이트를 작성해야하며 이는 일반적으로 하나 이상의 I / O 작업이 필요합니다. 이 매개 변수가 실제로 영향을 미치는지 여부는 기본 운영 체제에 따라 다르므로 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="74be4dfd459c69d6c5eed0336db7d26406e6421b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minimumCapacity&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;minimumCapacity&lt;/code&gt; 의 인수.</target>
        </trans-unit>
        <trans-unit id="890e9f6e189646766e2f576b109ba30702568602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; argument specifies the access mode with which the file is to be opened. The permitted values and their meanings are as specified for the &lt;a href=&quot;#mode&quot;&gt;&lt;code&gt;RandomAccessFile(File,String)&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 인수는 파일을 열 수하는있는 액세스 모드를 지정합니다. 허용되는 값과 의미는 &lt;a href=&quot;#mode&quot;&gt; &lt;code&gt;RandomAccessFile(File,String)&lt;/code&gt; &lt;/a&gt; 생성자에 지정된 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8d634c96d7b7dc8c2283b2dc960c9bfb6ad5d16f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modifiers&lt;/code&gt; parameter specifies &lt;em&gt;modifiers&lt;/em&gt; that qualify how the directory is registered. This release does not define any &lt;em&gt;standard&lt;/em&gt; modifiers. It may contain implementation specific modifiers.</source>
          <target state="translated">&lt;code&gt;modifiers&lt;/code&gt; 지정 매개 변수 &lt;em&gt;수정&lt;/em&gt; 디렉토리 등록 방법 자격. 이 릴리스는 &lt;em&gt;표준&lt;/em&gt; 수정자를 정의하지 않습니다 . 구현 특정 수정자를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c71b33fd5b314e171d4df0723194294f0896265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; string is localized using the given resource bundle. If the resource bundle is &lt;code&gt;null&lt;/code&gt;, then the &lt;code&gt;msg&lt;/code&gt; string is not localized.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 문자열은 주어진 자원 번들을 사용하여 지역화됩니다. 자원 번들 인 경우 &lt;code&gt;null&lt;/code&gt; , 다음 &lt;code&gt;msg&lt;/code&gt; 문자열은 지역화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3ad795f1c708af7880ff420b8fad93daa8b2155f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; parameter may be negative, even though the &lt;code&gt;skip&lt;/code&gt; method of the &lt;a href=&quot;reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; superclass throws an exception in this case. If &lt;code&gt;n&lt;/code&gt; is negative, then this method does nothing and returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 파라미터는, 비록 음극 일 수있다 &lt;code&gt;skip&lt;/code&gt; 의 방법 &lt;a href=&quot;reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt; 수퍼이 경우 예외를 던진다. 경우 &lt;code&gt;n&lt;/code&gt; 은 음,이 메소드는 아무 것도 반환하지 않습니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7dff9aa267101b80032f4f16286856df7bec91f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;environment&lt;/code&gt; 변수는 호출 측이 소유합니다. 구현은 이러한 객체를 수정하거나 참조를 유지하지 않지만 복제본이나 복사본에 대한 참조를 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30d43ffbfe8d9be7ac13f65149aa0271dd8dbc00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. &lt;code&gt;name&lt;/code&gt; is the name of the object, relative to context &lt;code&gt;nameCtx&lt;/code&gt;. This information could be useful to the object factory or to the object implementation. If there are several possible contexts from which the object could be named -- as will often be the case -- it is up to the caller to select one. A good rule of thumb is to select the &quot;deepest&quot; context available. If &lt;code&gt;nameCtx&lt;/code&gt; is null, &lt;code&gt;name&lt;/code&gt; is relative to the default initial context. If no name is being specified, the &lt;code&gt;name&lt;/code&gt; parameter should be null.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;nameCtx&lt;/code&gt; 에의 파라미터를 선택적으로 생성되는 객체의 이름을 지정하는 데 사용될 수있다. &lt;code&gt;name&lt;/code&gt; 은 컨텍스트 &lt;code&gt;nameCtx&lt;/code&gt; 에 상대적인 객체 이름입니다 . 이 정보는 객체 팩토리 또는 객체 구현에 유용 할 수 있습니다. 경우에 따라 객체의 이름을 지정할 수있는 컨텍스트가 여러 개있는 경우 하나를 선택하는 것은 호출자에게 달려 있습니다. 경험상 &quot;가장 깊은&quot;컨텍스트를 선택하는 것이 좋습니다. 경우 &lt;code&gt;nameCtx&lt;/code&gt; 에이 널 (null)이며, &lt;code&gt;name&lt;/code&gt; 디폴트의 초기 컨텍스트에 상대적입니다. 이름을 지정하지 않으면 &lt;code&gt;name&lt;/code&gt; 매개 변수는 null이어야합니다.</target>
        </trans-unit>
        <trans-unit id="f70a327d5594e9f181a40f5c6ca0cd8e025505b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;nameCtx&lt;/code&gt; 에의 파라미터를 선택적으로 생성되는 객체의 이름을 지정하는 데 사용될 수있다. 자세한 내용은 &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt; 의 &quot;이름 및 컨텍스트 매개 변수&quot;에 대한 설명을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d4c006afdb1b3d49e58c74bd4a0ffd732b023002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details. If a factory uses &lt;code&gt;nameCtx&lt;/code&gt; it should synchronize its use against concurrent access, since context implementations are not guaranteed to be thread-safe.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;nameCtx&lt;/code&gt; 에의 파라미터를 선택적으로 생성되는 객체의 이름을 지정하는 데 사용될 수있다. 자세한 내용은 &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt; 의 &quot;이름 및 컨텍스트 매개 변수&quot;에 대한 설명을 참조하십시오. 팩토리가 &lt;code&gt;nameCtx&lt;/code&gt; 를 사용하는 경우 컨텍스트 구현이 스레드 안전을 보장하지 않으므로 동시 액세스에 대해 사용을 동기화해야합니다.</target>
        </trans-unit>
        <trans-unit id="6b3818f758723f19e7f19461448d70ae40bd144a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;attrs&lt;/code&gt;, and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; , &lt;code&gt;attrs&lt;/code&gt; 및 &lt;code&gt;environment&lt;/code&gt; 파라미터는 호출 측이 소유합니다. 구현은 이러한 객체를 수정하거나 참조를 유지하지 않지만 복제본이나 복사본에 대한 참조를 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48161fbd495af11311a77e82a4acb8a1f70aaa4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;inAttrs&lt;/code&gt;, and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies. The object returned by this method is owned by the caller. The implementation will not subsequently modify it. It will contain either a new &lt;code&gt;Attributes&lt;/code&gt; object that is likewise owned by the caller, or a reference to the original &lt;code&gt;inAttrs&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; , &lt;code&gt;inAttrs&lt;/code&gt; , 및 &lt;code&gt;environment&lt;/code&gt; 파라미터는 호출 측이 소유합니다. 구현은 이러한 객체를 수정하거나 참조를 유지하지 않지만 복제본이나 복사본에 대한 참조를 유지할 수 있습니다. 이 메소드에 의해 리턴 된 오브젝트는 호출자가 소유합니다. 구현은 나중에 수정하지 않습니다. 호출자가 소유 한 새로운 &lt;code&gt;Attributes&lt;/code&gt; 객체 또는 원래 &lt;code&gt;inAttrs&lt;/code&gt; 매개 변수에 대한 참조를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="ef2e6b4b4d41262649d36998a45ab4a554e41dd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;X500Principal&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; 매개 변수 (없는 경우 &lt;code&gt;null&lt;/code&gt; )이있다 &lt;code&gt;Collection&lt;/code&gt; 의 &lt;code&gt;X500Principal&lt;/code&gt; 를 의.</target>
        </trans-unit>
        <trans-unit id="f5c100cec826504d35586ac2749c0d0f50484e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; of names. Each name is a &lt;code&gt;String&lt;/code&gt; or a byte array representing a distinguished name (in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; or ASN.1 DER encoded form, respectively). If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no issuerNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; 매개 변수 (없는 경우 &lt;code&gt;null&lt;/code&gt; )이있다 &lt;code&gt;Collection&lt;/code&gt; 이름. 각 이름은 고유 이름을 나타내는 &lt;code&gt;String&lt;/code&gt; 또는 바이트 배열입니다 ( 각각 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; 또는 ASN.1 DER로 인코딩 된 형식). 이 인수의 값으로 &lt;code&gt;null&lt;/code&gt; 이 제공 되면 issuerNames 점검이 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="10f8926ca6dbdca434f3cdffa8eda26510a88124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the pathToNames criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no pathToNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; 매개 변수 (없는 경우 &lt;code&gt;null&lt;/code&gt; )이있다 &lt;code&gt;Collection&lt;/code&gt; 각각의 이름에 대해 하나 개의 항목이 pathToNames 기준치에 포함 될 것입니다. 각 항목은이다 &lt;code&gt;List&lt;/code&gt; 그 첫 번째 엔트리이다 &lt;code&gt;Integer&lt;/code&gt; (이름 타입, 0-8) 및 그 두 번째 항목 인 &lt;code&gt;String&lt;/code&gt; 또는 바이트 배열 (이름, 문자열 또는 ASN.1 DER 각각, 인코딩 형태). 동일한 유형의 이름이 여러 개있을 수 있습니다. 이 인수의 값으로 &lt;code&gt;null&lt;/code&gt; 이 제공 되면 pathToNames 검사가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b7f614fb779c50df2c64620e5af3100fbb23fe19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the subject alternative name criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no subjectAlternativeNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; 매개 변수 (없는 경우 &lt;code&gt;null&lt;/code&gt; )이있다 &lt;code&gt;Collection&lt;/code&gt; 각각의 이름에 대해 하나 개의 항목이 주체 대체 이름 기준에 포함 될 것입니다. 각 항목은이다 &lt;code&gt;List&lt;/code&gt; 그 첫 번째 엔트리이다 &lt;code&gt;Integer&lt;/code&gt; (이름 타입, 0-8) 및 그 두 번째 항목 인 &lt;code&gt;String&lt;/code&gt; 또는 바이트 배열 (이름, 문자열 또는 ASN.1 DER 각각, 인코딩 형태). 동일한 유형의 이름이 여러 개있을 수 있습니다. 이 인수의 값으로 &lt;code&gt;null&lt;/code&gt; 이 제공 되면 subjectAlternativeNames 검사가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="86f6973623e34ae41d0cb380cd7a6687a04a283e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;network interface&lt;/code&gt; and &lt;code&gt;ttl&lt;/code&gt; parameters let the caller specify which network interface the test will go through and the maximum number of hops the packets should go through. A negative value for the &lt;code&gt;ttl&lt;/code&gt; will result in an IllegalArgumentException being thrown.</source>
          <target state="translated">&lt;code&gt;network interface&lt;/code&gt; 와 &lt;code&gt;ttl&lt;/code&gt; 매개 변수는 테스트를 통과하고 최대 홉의 수는 패킷이 통과해야 인터페이스 호출자가있는 네트워크를 지정할 수 있습니다. &lt;code&gt;ttl&lt;/code&gt; 의 값이 음수이면 IllegalArgumentException이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8b09e54aa5c847f44721e53e1758b993160bcd0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newLength&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;newLength&lt;/code&gt; 인수보다 더 큰 일하거나 동일해야합니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd6f3c9ed9744a178a240c4efe334b44144e9408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize&lt;/code&gt; method helps solve these problems by transforming text into the canonical composed and decomposed forms as shown in the first example above. In addition, you can have it perform compatibility decompositions so that you can treat compatibility characters the same as their equivalents. Finally, the &lt;code&gt;normalize&lt;/code&gt; method rearranges accents into the proper canonical order, so that you do not have to worry about accent rearrangement on your own.</source>
          <target state="translated">&lt;code&gt;normalize&lt;/code&gt; 방법으로 구성 및 상기 첫번째 예에 도시 된 바와 같이 형태를 분해 정식으로 텍스트를 변환하여 이러한 문제를 해결할 수. 또한 호환성 분해를 수행하여 호환성 문자를 동등 문자와 동일하게 취급 할 수 있습니다. 마지막으로 &lt;code&gt;normalize&lt;/code&gt; 방법은 악센트를 올바른 정식 순서로 재 배열하므로 사용자가 직접 악센트 재배 열에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="63cf4faf44647d95951cea7798d0b85f615c45ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ns&lt;/code&gt; parameter may be negative, even though the &lt;code&gt;skip&lt;/code&gt; method of the &lt;a href=&quot;reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; superclass throws an exception in this case. Negative values of &lt;code&gt;ns&lt;/code&gt; cause the stream to skip backwards. Negative return values indicate a skip backwards. It is not possible to skip backwards past the beginning of the string.</source>
          <target state="translated">&lt;code&gt;ns&lt;/code&gt; 파라미터는, 비록 음극 일 수있다 &lt;code&gt;skip&lt;/code&gt; 의 방법 &lt;a href=&quot;reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt; 수퍼이 경우 예외를 던진다. &lt;code&gt;ns&lt;/code&gt; 의 음수 값은 스트림을 뒤로 건너 뜁니다. 음수 반환 값은 뒤로 건너 뛰기를 나타냅니다. 문자열의 시작을지나 뒤로 건너 뛸 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e0fcc06e98814dd87a3c62b985949fba60bdb550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first byte of the subarray, and the &lt;code&gt;count&lt;/code&gt; argument specifies the length of the subarray.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 인자는 배열의 첫 번째 바이트의 인덱스이고, 상기 &lt;code&gt;count&lt;/code&gt; 인수는 배열의 길이를 지정한다.</target>
        </trans-unit>
        <trans-unit id="baa0351e008899618db6b64da0e758694ddf41eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first character of the subarray. The &lt;code&gt;count&lt;/code&gt; argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 인수는 배열의 첫 번째 문자의 인덱스입니다. &lt;code&gt;count&lt;/code&gt; 인수는 부분 배열의 길이를 지정합니다. 하위 배열의 내용이 복사됩니다. 후속 문자 배열 수정은 반환 된 문자열에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7d930134c90bf6d49ed3db167b3ffa23d64e6b5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 인자보다 크거나 같아야 &lt;code&gt;0&lt;/code&gt; , 미만 또는 동일 &lt;a href=&quot;stringbuffer#length--&quot;&gt;길이의&lt;/a&gt; 이 시퀀스.</target>
        </trans-unit>
        <trans-unit id="5649ec97e26cd383b62037dbe7726158b1b2a542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 인자보다 크거나 같아야 &lt;code&gt;0&lt;/code&gt; , 미만 또는 동일 &lt;a href=&quot;stringbuilder#length--&quot;&gt;길이의&lt;/a&gt; 이 시퀀스.</target>
        </trans-unit>
        <trans-unit id="4b47fbce935f5d028b77339d1ef9818c0b7586f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;openAttributes&lt;/code&gt;, &lt;code&gt;openConstructors&lt;/code&gt;, &lt;code&gt;openOperations&lt;/code&gt; and &lt;code&gt;notifications&lt;/code&gt; array parameters are internally copied, so that subsequent changes to the arrays referenced by these parameters have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;openAttributes&lt;/code&gt; , &lt;code&gt;openConstructors&lt;/code&gt; , &lt;code&gt;openOperations&lt;/code&gt; 및 &lt;code&gt;notifications&lt;/code&gt; 배열 매개 변수는 내부적으로 이러한 매개 변수에 의해 참조되는 그 후의 배열의 변경이이 인스턴스에 영향을 미치지 그래서, 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="d6983d2110c5fe985de448c67aa2a3f5fba3481e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled by the resulting file attribute view for the case that the file is a symbolic link. By default, symbolic links are followed. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed. This option is ignored by implementations that do not support symbolic links.</source>
          <target state="translated">그만큼 &lt;code&gt;options&lt;/code&gt; 배열은 파일이 심볼릭 링크 인 경우의 결과 파일의 속성보기 처리하는 방법 기호 링크 표시하는 데 이용 될 수있다. 기본적으로 기호 링크가 수행됩니다. &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt; 옵션 이 있으면 기호 링크를 따르지 않습니다. 이 옵션은 심볼릭 링크를 지원하지 않는 구현에서는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e205a1262affb513a2bd877857ae965e9d442d7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 배열은 파일이 심볼릭 링크 인 경우에 대한 처리하는 방법 기호 링크 표시하는 데 이용 될 수있다. 기본적으로 기호 링크가 따르고 링크의 최종 대상 파일 속성이 읽 힙니다. &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt; 옵션 이 있으면 기호 링크를 따르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="07b7edf8d716c1c078bf2b1c0f91fb4940940f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is set. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 배열은 파일이 심볼릭 링크 인 경우에 대한 처리하는 방법 기호 링크 표시하는 데 이용 될 수있다. 기본적으로 심볼릭 링크가 따르고 링크의 최종 대상의 파일 속성이 설정됩니다. &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt; 옵션 이 있으면 기호 링크를 따르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d06342b773fea6549bc89fc2462a7083b70f4fb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled. By default, symbolic links are resolved to their final target. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then this method does not resolve symbolic links. Some implementations allow special names such as &quot;&lt;code&gt;..&lt;/code&gt;&quot; to refer to the parent directory. When deriving the &lt;em&gt;real path&lt;/em&gt;, and a &quot;&lt;code&gt;..&lt;/code&gt;&quot; (or equivalent) is preceded by a non-&quot;&lt;code&gt;..&lt;/code&gt;&quot; name then an implementation will typically cause both names to be removed. When not resolving symbolic links and the preceding name is a symbolic link then the names are only removed if it guaranteed that the resulting path will locate the same file as this path.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 배열을 처리하는 방법을 기호 링크 표시하는 데 이용 될 수있다. 기본적으로 심볼릭 링크는 최종 대상으로 확인됩니다. &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt; 옵션 이 존재하면이 메소드는 기호 링크를 해석하지 않습니다. 일부 구현에서는 &quot; &lt;code&gt;..&lt;/code&gt; &quot; 와 같은 특수 이름으로 상위 디렉토리를 참조 할 수 있습니다. 상기 유도 &lt;em&gt;실제 경로를&lt;/em&gt; , 그리고 &quot; &lt;code&gt;..&lt;/code&gt; &quot;(또는 동등한 항목) 앞에 &quot;&quot; &lt;code&gt;..&lt;/code&gt; &quot; 가 아닌 이름이 오는 경우 구현시 일반적으로 두 이름이 모두 제거됩니다. 심볼릭 링크를 해결하지 않고 이전 이름이 심볼릭 링크 인 경우 결과 경로가이 경로와 동일한 파일을 찾도록 보장 된 경우에만 이름이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="0bc9bb7ec20a4fcc37fab92a84728a3be6a3d529" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. If no options are present then it is equivalent to opening the file with the &lt;a href=&quot;standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; option. In addition to the &lt;code&gt;READ&lt;/code&gt; option, an implementation may also support additional implementation specific options.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 매개 변수는 파일을 열 방법을 결정합니다. 옵션이 없으면 &lt;a href=&quot;standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt; 옵션으로 파일을 여는 것과 같습니다 . 여기에 덧붙여 &lt;code&gt;READ&lt;/code&gt; 옵션, 구현은 추가적인 구현 고유의 옵션을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="feb5d322a388c3217a1ff698a06ad00e166739fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determine if the file should be opened for reading and/or writing. If neither option (or the &lt;a href=&quot;../file/standardopenoption#APPEND&quot;&gt;&lt;code&gt;APPEND&lt;/code&gt;&lt;/a&gt; option) is contained in the array then the file is opened for reading. By default reading or writing commences at the beginning of the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 매개 변수는 파일을 열 방법을 결정합니다. &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt; 파일 읽기 및 / 또는 쓰기 위해 열 수 있습니다 경우 옵션을 결정합니다. 옵션 (또는 &lt;a href=&quot;../file/standardopenoption#APPEND&quot;&gt; &lt;code&gt;APPEND&lt;/code&gt; )이&lt;/a&gt; 없으면 옵션)이 배열에 포함되어 파일을 읽기 위해 열립니다. 기본적으로 읽기 또는 쓰기는 파일 시작 부분에서 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="c735a8e347a9d0b0ecd22343769651f2ac14125f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determines if the file should be opened for reading and/or writing. If neither option is contained in the array then an existing file is opened for reading.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 매개 변수는 파일을 열 방법을 결정합니다. &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt; 파일 읽기 및 / 또는 쓰기 위해 열 수 있습니다 경우 옵션을 결정합니다. 배열에 옵션이 없으면 기존 파일을 열어 읽습니다.</target>
        </trans-unit>
        <trans-unit id="70441efdb55fa14107d32cb84dfbb03932007cdd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determine if the file should be opened for reading and/or writing. If neither option (or the &lt;a href=&quot;standardopenoption#APPEND&quot;&gt;&lt;code&gt;APPEND&lt;/code&gt;&lt;/a&gt; option) is present then the file is opened for reading. By default reading or writing commence at the beginning of the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 매개 변수는 파일을 열 방법을 결정합니다. &lt;a href=&quot;standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt; 파일 읽기 및 / 또는 쓰기 위해 열 수 있습니다 경우 옵션을 결정합니다. 옵션 (또는 &lt;a href=&quot;standardopenoption#APPEND&quot;&gt; &lt;code&gt;APPEND&lt;/code&gt; )이&lt;/a&gt; 없으면 옵션)이 파일을 읽기 위해 열립니다. 기본적으로 파일의 시작 부분에서 읽기 또는 쓰기가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="adaafaa0c2c26b989f9f5f2e8716f29c6f11b35c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 매개 변수는 파일이 심볼릭 링크 인 경우에 대한 처리하는 방법 기호 링크 표시하는 데 이용 될 수있다. 기본적으로 기호 링크가 수행됩니다. &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt; 옵션 인 경우 이 있으면 기호 링크를 따르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e88e22b5339b7c784d561d64428df97e00625dcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter may include any of the following:</source>
          <target state="translated">그만큼 &lt;code&gt;options&lt;/code&gt; 매개 변수는 다음 중 하나를 포함 할 수있다 :</target>
        </trans-unit>
        <trans-unit id="6c00a59ba94adcb6905e3dd085514e8e2f27d12a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter specifies how the the file is created or opened. If no options are present then this method works as if the &lt;a href=&quot;standardopenoption#CREATE&quot;&gt;&lt;code&gt;CREATE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt;&lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing &lt;a href=&quot;files#isRegularFile-java.nio.file.Path-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;regular-file&lt;/code&gt;&lt;/a&gt; to a size of &lt;code&gt;0&lt;/code&gt;. The method ensures that the file is closed when all lines have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has created or truncated, or after some bytes have been written to the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 하여 파일을 만들거나 열 방법을 지정하는 매개 변수입니다. 옵션이 없으면이 메소드는 &lt;a href=&quot;standardopenoption#CREATE&quot;&gt; &lt;code&gt;CREATE&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt; &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt; 옵션이 있는 것처럼 작동합니다 . 즉, 파일을 작성하기 위해 파일을 열거 나 존재하지 않는 경우 파일을 만들거나 기존의 &lt;a href=&quot;files#isRegularFile-java.nio.file.Path-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;regular-file&lt;/code&gt; &lt;/a&gt; 처음에 자릅니다 을 &lt;code&gt;0&lt;/code&gt; 크기로 자릅니다 . 이 방법을 사용하면 모든 줄을 쓸 때 (또는 I / O 오류 또는 기타 런타임 예외가 발생했을 때) 파일이 닫힙니다. I / O 오류가 발생하면 파일이 작성되거나 잘린 후 또는 일부 바이트가 파일에 기록 된 후에 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d38cc57bdb401fa5458030b8203d68a47b6b87cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputMimeType&lt;/code&gt; parameter describes the document type that you want to create, whereas the &lt;code&gt;flavor&lt;/code&gt; parameter describes the format in which the input data will be provided by the application to the &lt;code&gt;StreamPrintService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;outputMimeType&lt;/code&gt; 의 매개 변수는 반면, 만들려는 문서 유형을 설명 &lt;code&gt;flavor&lt;/code&gt; 파라미터는 상기 입력 데이터가 애플리케이션에 의해 제공 될 것이다 포맷 설명 &lt;code&gt;StreamPrintService&lt;/code&gt; 를이 .</target>
        </trans-unit>
        <trans-unit id="64a8995d9ac05171aede64481f740265b7613585" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseURL&lt;/code&gt; method of &lt;code&gt;URLStreamHandler&lt;/code&gt; parses the string representation as if it were an &lt;code&gt;http&lt;/code&gt; specification. Most URL protocol families have a similar parsing. A stream protocol handler for a protocol that has a different syntax must override this routine.</source>
          <target state="translated">&lt;code&gt;URLStreamHandler&lt;/code&gt; 의 &lt;code&gt;parseURL&lt;/code&gt; 메소드 는 문자열 표현을 마치 &lt;code&gt;http&lt;/code&gt; 스펙을 http 스펙 인 . 대부분의 URL 프로토콜 패밀리는 유사한 구문 분석을 가지고 있습니다. 구문이 다른 프로토콜의 스트림 프로토콜 핸들러는이 루틴을 재정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="2221038019d4be2cb2f88fab060218d2d5a02e57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter is associated with a &lt;code&gt;FileSystem&lt;/code&gt; that supports the &lt;a href=&quot;attribute/posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt;. This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 파라미터는와 연관된 &lt;code&gt;FileSystem&lt;/code&gt; 지지체 &lt;a href=&quot;attribute/posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; 를&lt;/a&gt; . 이 속성보기는 POSIX (Portable Operating System Interface) 표준 제품군을 구현하는 운영 체제에서 사용되는 파일 시스템의 파일과 일반적으로 관련된 파일 속성에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b249e9a3d9c0f37793a768ee4c126d9c0f3b49e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter is associated with a file system that supports &lt;a href=&quot;attribute/fileownerattributeview&quot;&gt;&lt;code&gt;FileOwnerAttributeView&lt;/code&gt;&lt;/a&gt;. This file attribute view provides access to a file attribute that is the owner of the file.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 매개 변수가 지원하는 파일 시스템과 관련된 &lt;a href=&quot;attribute/fileownerattributeview&quot;&gt; &lt;code&gt;FileOwnerAttributeView&lt;/code&gt; 을&lt;/a&gt; . 이 파일 속성보기는 파일 소유자 인 파일 속성에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5493aef38945eeedee66c785a93a8e949626fc4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perms&lt;/code&gt; parameter is a &lt;code&gt;String&lt;/code&gt; representing the permissions. It has 9 characters that are interpreted as three sets of three. The first set refers to the owner's permissions; the next to the group permissions and the last to others. Within each set, the first character is &lt;code&gt;'r'&lt;/code&gt; to indicate permission to read, the second character is &lt;code&gt;'w'&lt;/code&gt; to indicate permission to write, and the third character is &lt;code&gt;'x'&lt;/code&gt; for execute permission. Where a permission is not set then the corresponding character is set to &lt;code&gt;'-'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;perms&lt;/code&gt; 매개 변수는 있습니다 &lt;code&gt;String&lt;/code&gt; 권한을 나타내는. 3 개의 3 개 세트로 해석되는 9 개의 문자가 있습니다. 첫 번째 세트는 소유자의 권한을 나타냅니다. 그룹 권한 옆에 있고 다른 사람에게 마지막 권한. 각 세트 내에서 첫 번째 문자는 읽기 권한을 나타내는 &lt;code&gt;'r'&lt;/code&gt; 이고, 두 번째 문자는 쓰기 권한을 나타내는 &lt;code&gt;'w'&lt;/code&gt; 이며, 세 번째 문자는 실행 권한 &lt;code&gt;'x'&lt;/code&gt; 경우 'x' 입니다. 권한이 설정되지 않은 경우 해당 문자는 &lt;code&gt;'-'&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="b9d482d82a8c67b95f55d10ab3dda1aad0c96b7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;persistPolicy&lt;/code&gt; and &lt;code&gt;currencyTimeLimit&lt;/code&gt; fields are meaningless for constructors, but are not considered invalid.</source>
          <target state="translated">&lt;code&gt;persistPolicy&lt;/code&gt; 과 &lt;code&gt;currencyTimeLimit&lt;/code&gt; 에는 필드는 생성자에 대한 의미가 있지만, 유효하지 않은 것으로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="822e7053ed501794bcb73e078de627432ea24760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pos&lt;/code&gt; argument may range between zero and</source>
          <target state="translated">그만큼 &lt;code&gt;pos&lt;/code&gt; 인수 제로 사이의 범위 일 수있다</target>
        </trans-unit>
        <trans-unit id="0d4b8df143426535636c3d9fcf5d259dd494e8ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pos&lt;/code&gt; argument selects which parameters are to be bound. It may range between zero and</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; 매개 변수는 인수 선택이 결합된다. 0과 0 사이의 범위 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3295278a86db378f96ef38915c5399dfa8f46eb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefix&lt;/code&gt; argument must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &lt;code&gt;&quot;hjb&quot;&lt;/code&gt; or &lt;code&gt;&quot;mail&quot;&lt;/code&gt;. The &lt;code&gt;suffix&lt;/code&gt; argument may be &lt;code&gt;null&lt;/code&gt;, in which case the suffix &lt;code&gt;&quot;.tmp&quot;&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; 인수는 길이 3 자 이상이어야합니다. 접두어는 &lt;code&gt;&quot;hjb&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;mail&quot;&lt;/code&gt; 과 같이 짧고 의미있는 문자열 인 것이 좋습니다 . &lt;code&gt;suffix&lt;/code&gt; 인수는있을 수 있습니다 &lt;code&gt;null&lt;/code&gt; 접미사가있는 경우에, &lt;code&gt;&quot;.tmp&quot;&lt;/code&gt; 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e5caea50061710cec044d7be43530e50e1eb551a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;radix&lt;/code&gt; argument is valid if it is greater than or equal to &lt;code&gt;MIN_RADIX&lt;/code&gt; and less than or equal to &lt;code&gt;MAX_RADIX&lt;/code&gt;. The &lt;code&gt;digit&lt;/code&gt; argument is valid if &lt;code&gt;0 &amp;lt;= digit &amp;lt; radix&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; 가보다 크거나 같으면 인수 유효 &lt;code&gt;MIN_RADIX&lt;/code&gt; 미만 또는 동등 &lt;code&gt;MAX_RADIX&lt;/code&gt; . &lt;code&gt;digit&lt;/code&gt; 인수 경우 유효 &lt;code&gt;0 &amp;lt;= digit &amp;lt; radix&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b33942ad43fbe9d22cb9d95c4c4908fdaa08301" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;radix&lt;/code&gt; is either smaller than &lt;a href=&quot;character#MIN_RADIX&quot;&gt;&lt;code&gt;Character.MIN_RADIX&lt;/code&gt;&lt;/a&gt; or larger than &lt;a href=&quot;character#MAX_RADIX&quot;&gt;&lt;code&gt;Character.MAX_RADIX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; 하나보다 작은 &lt;a href=&quot;character#MIN_RADIX&quot;&gt; &lt;code&gt;Character.MIN_RADIX&lt;/code&gt; &lt;/a&gt; 보다 작거나 큰 &lt;a href=&quot;character#MAX_RADIX&quot;&gt; &lt;code&gt;Character.MAX_RADIX&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5d785142e5ab58037a089cd9e5a386011f0b7e09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ranges&lt;/code&gt; to be given can take one of the following forms:</source>
          <target state="translated">제공되는 &lt;code&gt;ranges&lt;/code&gt; 는 다음 형식 중 하나를 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1259bcaaf2e03d5637399a403f2eed4bcb0658f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; has the same effect as:</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 클래스 의 &lt;code&gt;read(b)&lt;/code&gt; 메소드 는 다음과 같은 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4604e99f767c72aaa96525bf29f68941bb283ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b)&lt;/code&gt; method has the same effect as:</source>
          <target state="translated">&lt;code&gt;read(b)&lt;/code&gt; 에있어서의 효과는 :</target>
        </trans-unit>
        <trans-unit id="d053108594714cc2e678b8a8b8bcae476c059c88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b,&lt;/code&gt;&lt;code&gt;off,&lt;/code&gt;&lt;code&gt;len)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; simply calls the method &lt;code&gt;read()&lt;/code&gt; repeatedly. If the first such call results in an &lt;code&gt;IOException&lt;/code&gt;, that exception is returned from the call to the &lt;code&gt;read(b,&lt;/code&gt;&lt;code&gt;off,&lt;/code&gt;&lt;code&gt;len)&lt;/code&gt; method. If any subsequent call to &lt;code&gt;read()&lt;/code&gt; results in a &lt;code&gt;IOException&lt;/code&gt;, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into &lt;code&gt;b&lt;/code&gt; and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data &lt;code&gt;len&lt;/code&gt; has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 클래스 의 &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; 메소드는 단순히 &lt;code&gt;read()&lt;/code&gt; 메소드를 반복적으로 호출합니다 . 첫 번째 호출로 &lt;code&gt;IOException&lt;/code&gt; 이 발생하면 해당 예외는 호출에서 &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; 메소드 로 리턴됩니다 . &lt;code&gt;read()&lt;/code&gt; 대한 후속 호출로 인해 &lt;code&gt;IOException&lt;/code&gt; 이 발생하면 예외는 파일의 끝인 것처럼 잡히고 처리됩니다. 해당 시점까지 읽은 바이트 &lt;code&gt;b&lt;/code&gt; 에 예외가 발생하기 전에 읽은 바이트 수가 리턴됩니다. 이 메소드의 기본 구현은 요청 된 양의 입력 데이터가 &lt;code&gt;len&lt;/code&gt; 까지 차단됩니다.읽었거나 파일 끝이 감지되었거나 예외가 발생했습니다. 서브 클래스는이 메소드를보다 효율적으로 구현할 것을 권장합니다.</target>
        </trans-unit>
        <trans-unit id="d73e15d99486a3edb623a542384b22544dac32ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; calls the &lt;code&gt;read&lt;/code&gt; method of three arguments with the arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 방법 &lt;code&gt;InputStream&lt;/code&gt; 부르는 &lt;code&gt;read&lt;/code&gt; 인수와 세 개의 인수의 방법 &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , 및 &lt;code&gt;b.length&lt;/code&gt; 를을 .</target>
        </trans-unit>
        <trans-unit id="7efed5a820d4dabed25b8a28bd1df6414d7e77e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; calls the &lt;code&gt;read&lt;/code&gt; method of the underlying input stream. It checks for carriage returns and newline characters in the input, and modifies the current line number as appropriate. A carriage-return character or a carriage return followed by a newline character are both converted into a single newline character.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 의 방법 &lt;code&gt;LineNumberInputStream&lt;/code&gt; 가 부르는 &lt;code&gt;read&lt;/code&gt; 기본이되는 입력 스트림의 방법을. 입력에서 캐리지 리턴과 개행 문자를 확인하고 현재 행 번호를 적절하게 수정합니다. 캐리지 리턴 문자 또는 캐리지 리턴 다음에 개행 문자가 둘 다 단일 개행 문자로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="4d12f1e1c60d3ded7ff55ddd8ec9fa42dcbe1312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; repeatedly calls the &lt;code&gt;read&lt;/code&gt; method of zero arguments to fill in the byte array.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 방법 &lt;code&gt;LineNumberInputStream&lt;/code&gt; 가 반복 호출 &lt;code&gt;read&lt;/code&gt; 바이트 배열을 작성 제로 인수 방법.</target>
        </trans-unit>
        <trans-unit id="9c073aae985b3b46c91c5b9276bb615fd3d6afcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;SequenceInputStream&lt;/code&gt; tries to read the data from the current substream. If it fails to read any characters because the substream has reached the end of the stream, it calls the &lt;code&gt;close&lt;/code&gt; method of the current substream and begins reading from the next substream.</source>
          <target state="translated">&lt;code&gt;SequenceInputStream&lt;/code&gt; 의 &lt;code&gt;read&lt;/code&gt; 메소드 는 현재 서브 스트림에서 데이터를 읽으려고합니다. 서브 스트림이 스트림의 끝에 도달하여 문자를 읽지 못하면 현재 서브 스트림 의 &lt;code&gt;close&lt;/code&gt; 메소드를 호출 하고 다음 서브 스트림에서 읽기를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="266c4f3bc071054256173e68adbd4a6e7656ec4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It copies the low eight bits from the characters in this input stream's buffer into the byte array argument.</source>
          <target state="translated">&lt;code&gt;StringBufferInputStream&lt;/code&gt; 의 &lt;code&gt;read&lt;/code&gt; 메소드는 차단할 수 없습니다. 이 입력 스트림 버퍼의 문자에서 하위 8 비트를 바이트 배열 인수로 복사합니다.</target>
        </trans-unit>
        <trans-unit id="e61745f20485b6632a27794087bfb013bec50ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It returns the low eight bits of the next character in this input stream's buffer.</source>
          <target state="translated">&lt;code&gt;StringBufferInputStream&lt;/code&gt; 의 &lt;code&gt;read&lt;/code&gt; 메소드는 차단할 수 없습니다. 이 입력 스트림의 버퍼에있는 다음 문자의 하위 8 비트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b68abbad5ba6fb28f94eaadf9085c6dda28742eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of the underlying stream returns &lt;code&gt;-1&lt;/code&gt;, indicating end-of-file, or</source>
          <target state="translated">기본 스트림 의 &lt;code&gt;read&lt;/code&gt; 메소드는 파일 끝을 나타내는 &lt;code&gt;-1&lt;/code&gt; 을 리턴 하거나</target>
        </trans-unit>
        <trans-unit id="6ff4f563e5b69d4b6268d50e4aa9d51aa5725103" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; methods of the resulting stream will throw an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered, and it will not support the &lt;a href=&quot;../../io/inputstream#mark-int-&quot;&gt;&lt;code&gt;mark&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../io/inputstream#reset--&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.</source>
          <target state="translated">기본 채널이 비 블로킹 모드에있는 동안 호출되면 결과 스트림 의 &lt;code&gt;read&lt;/code&gt; 메소드에서 &lt;a href=&quot;illegalblockingmodeexception&quot;&gt; &lt;code&gt;IllegalBlockingModeException&lt;/code&gt; &lt;/a&gt; 이 발생합니다. 스트림은 버퍼링되지 않으며 &lt;a href=&quot;../../io/inputstream#mark-int-&quot;&gt; &lt;code&gt;mark&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../io/inputstream#reset--&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt; 메소드를 지원하지 않습니다 . 스트림은 여러 개의 동시 스레드가 안전하게 액세스 할 수 있습니다. 스트림을 닫으면 채널이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="3b7ea7159daa93e13abc58f5ee72d1aa9624ff2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; methods of the returned &lt;code&gt;InputStream&lt;/code&gt; will throw &lt;code&gt;IOException&lt;/code&gt; when reading bytes that cannot be decoded.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 반환 된 방법 &lt;code&gt;InputStream&lt;/code&gt; 발생합니다 &lt;code&gt;IOException&lt;/code&gt; 가 디코딩 할 수없는 바이트를 읽을 때.</target>
        </trans-unit>
        <trans-unit id="b52f6c80e4a3c11df2890b54a5a8b3b1218aeabd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readlimit&lt;/code&gt; argument tells this input stream to allow that many bytes to be read before the mark position gets invalidated.</source>
          <target state="translated">&lt;code&gt;readlimit&lt;/code&gt; 는의 인수는, 마크 위치가 무효가되기 전에 많은 바이트를 읽도록하려면이 입력 스트림을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="f523a2bdf73035ee44a575de3e5dff08d7683039" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readlimit&lt;/code&gt; arguments tells this input stream to allow that many bytes to be read before the mark position gets invalidated.</source>
          <target state="translated">&lt;code&gt;readlimit&lt;/code&gt; 는의 인수는, 마크 위치가 무효가되기 전에 많은 바이트를 읽도록하려면이 입력 스트림을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="26aa2e19c94981b7af3edb0fd924e85788e560ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ready&lt;/code&gt; method of the underlying stream returns &lt;code&gt;false&lt;/code&gt;, indicating that further input requests would block.</source>
          <target state="translated">기본 스트림 의 &lt;code&gt;ready&lt;/code&gt; 메소드는 추가 입력 요청이 &lt;code&gt;false&lt;/code&gt; 을 나타내는 false를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="165873d7f5551dc1377b152568842b2aacddf487" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple map-reduce on a stream, use &lt;a href=&quot;stream#map-java.util.function.Function-&quot;&gt;&lt;code&gt;Stream.map(Function)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; 의 하류에 다중 레벨의 감소에 사용될 때 수집은 가장 유용 &lt;code&gt;groupingBy&lt;/code&gt; 또는 &lt;code&gt;partitioningBy&lt;/code&gt; . 스트림에서 간단한 맵 축소를 수행하려면 &lt;a href=&quot;stream#map-java.util.function.Function-&quot;&gt; &lt;code&gt;Stream.map(Function)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7e64fcbf48d32ed9f489fe7ed817a63867533729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt;} instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; 의 하류에 다중 레벨의 감소에 사용될 때 수집은 가장 유용 &lt;code&gt;groupingBy&lt;/code&gt; 또는 &lt;code&gt;partitioningBy&lt;/code&gt; . 스트림에서 간단한 축소를 수행하려면 대신 &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt; }를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="331f2b86728595fcc490eed59b6a8eb8cea11e3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; 의 하류에 다중 레벨의 감소에 사용될 때 수집은 가장 유용 &lt;code&gt;groupingBy&lt;/code&gt; 또는 &lt;code&gt;partitioningBy&lt;/code&gt; . 스트림에서 간단한 축소를 수행하려면 &lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt; &lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b6e4a1cfb3d954ef8dc93a66017c84659865340e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refresh&lt;/code&gt; method causes the policy object to refresh/reload its data. This operation is implementation-dependent. For example, if the policy object stores its data in configuration files, calling &lt;code&gt;refresh&lt;/code&gt; will cause it to re-read the configuration policy files. If a refresh operation is not supported, this method does nothing. Note that refreshed policy may not have an effect on classes in a particular ProtectionDomain. This is dependent on the Policy provider's implementation of the &lt;code&gt;implies&lt;/code&gt; method and its PermissionCollection caching strategy.</source>
          <target state="translated">&lt;code&gt;refresh&lt;/code&gt; 방법은 정책 개체 / 새로 고침 데이터를 다시로드됩니다. 이 작업은 구현에 따라 다릅니다. 예를 들어, 정책 개체가 데이터를 구성 파일에 저장하는 경우 &lt;code&gt;refresh&lt;/code&gt; 를 호출 하면 구성 정책 파일을 다시 읽게됩니다. 새로 고침 작업이 지원되지 않으면이 방법은 아무 작업도 수행하지 않습니다. 새로 고친 정책은 특정 ProtectionDomain의 클래스에 영향을 미치지 않을 수 있습니다. 이는 정책 공급자의 &lt;code&gt;implies&lt;/code&gt; 메소드 구현 및 PermissionCollection 캐싱 전략에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="b92536f2a5a0e1a3b6f9a0f2c5c546403063f5bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;registerMBean&lt;/code&gt; method is simpler for local use, but cannot be used remotely. The &lt;code&gt;createMBean&lt;/code&gt; method can be used remotely, but sometimes requires attention to class loading issues.</source>
          <target state="translated">&lt;code&gt;registerMBean&lt;/code&gt; 방법은 현지 사용을위한 간단하지만 원격으로 사용할 수 없습니다. &lt;code&gt;createMBean&lt;/code&gt; 방법은 원격으로 사용할 수 있지만, 클래스의로드의 문제에주의를 필요로 할 수있다.</target>
        </trans-unit>
        <trans-unit id="dec43624de062d1e7493f56cb68ff2515b4d245d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; resets the line number to be the line number at the time the &lt;code&gt;mark&lt;/code&gt; method was called, and then calls the &lt;code&gt;reset&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; 의 &lt;code&gt;reset&lt;/code&gt; 메소드는 &lt;code&gt;mark&lt;/code&gt; 메소드가 호출 될 때 행 번호가되도록 행 번호를 &lt;code&gt;reset&lt;/code&gt; 한 다음 기본 입력 스트림 의 reset 메소드 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="9e487af727a443b2fc09683914bf955d5aed101d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schedule&lt;/code&gt; methods create tasks with various delays and return a task object that can be used to cancel or check execution. The &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; and &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; methods create and execute tasks that run periodically until cancelled.</source>
          <target state="translated">&lt;code&gt;schedule&lt;/code&gt; 메서드는 다양한 지연을 가지는 태스크를 생성하고 취소 체크 실행하는 데 사용할 수있는 작업 개체를 반환합니다. &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; 및 &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; 방법은 생성하고 해제 할 때까지 주기적으로 실행 작업을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="275b9770ecb642dad5739bf9b860015b219e5bc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;seekForwardOnly&lt;/code&gt; parameter controls whether the value returned by &lt;code&gt;getMinIndex&lt;/code&gt; will be increased as each image (or thumbnail, or image metadata) is read. If &lt;code&gt;seekForwardOnly&lt;/code&gt; is true, then a call to &lt;code&gt;read(index)&lt;/code&gt; will throw an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if &lt;code&gt;index &amp;lt; this.minIndex&lt;/code&gt;; otherwise, the value of &lt;code&gt;minIndex&lt;/code&gt; will be set to &lt;code&gt;index&lt;/code&gt;. If &lt;code&gt;seekForwardOnly&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the value of &lt;code&gt;minIndex&lt;/code&gt; will remain 0 regardless of any read operations.</source>
          <target state="translated">&lt;code&gt;seekForwardOnly&lt;/code&gt; 의해 리턴 된 값 여부 파라미터 조절기 &lt;code&gt;getMinIndex&lt;/code&gt; 각 화상 (또는 썸네일 이미지 또는 메타 데이터)으로 상승한다이 판독된다. 경우 &lt;code&gt;seekForwardOnly&lt;/code&gt; 는 사실에의 호출 &lt;code&gt;read(index)&lt;/code&gt; 발생합니다 &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; 경우 &lt;code&gt;index &amp;lt; this.minIndex&lt;/code&gt; ; 그렇지 않으면 &lt;code&gt;minIndex&lt;/code&gt; 값이 &lt;code&gt;index&lt;/code&gt; 로 설정됩니다 . 경우 &lt;code&gt;seekForwardOnly&lt;/code&gt; 가 인 &lt;code&gt;false&lt;/code&gt; 의 값 &lt;code&gt;minIndex&lt;/code&gt; 관계없이 읽기 작업의 0을 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="76ca7bc87a7a645eee5be869e5f2afee6e7546a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; array parameter is internally copied, so that subsequent changes to the array referenced by &lt;code&gt;signature&lt;/code&gt; have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 배열 매개 변수는 내부적으로 참조되는 그 후의 배열의 변경 그래서, 복사 &lt;code&gt;signature&lt;/code&gt; 이 인스턴스에 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4ab62abd8dea24de7feab17efb96ab240af801b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;isEmpty&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;iterator&lt;/code&gt;, and &lt;code&gt;listIterator&lt;/code&gt; operations run in constant time. The &lt;code&gt;add&lt;/code&gt; operation runs in</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; , &lt;code&gt;isEmpty&lt;/code&gt; , &lt;code&gt;get&lt;/code&gt; , &lt;code&gt;set&lt;/code&gt; , &lt;code&gt;iterator&lt;/code&gt; 및 &lt;code&gt;listIterator&lt;/code&gt; 의의 일정한 시간에 실행 작업. &lt;code&gt;add&lt;/code&gt; 작업이 실행됩니다</target>
        </trans-unit>
        <trans-unit id="a4a7eb3594e941fdb97e903210733646c272b12a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is negative, the method will try to skip backwards. In case the backing file does not support backward skip at its current position, an &lt;code&gt;IOException&lt;/code&gt; is thrown. The actual number of bytes skipped is returned. If it skips forwards, it returns a positive value. If it skips backwards, it returns a negative value.</source>
          <target state="translated">&lt;code&gt;skip&lt;/code&gt; 방법은 여러 가지 이유로,보다 적은 바이트 수 밖에 스킵 수 &lt;code&gt;0&lt;/code&gt; . 경우 &lt;code&gt;n&lt;/code&gt; 은 음, 방법은 뒤로 건너하려고합니다. 백업 파일이 현재 위치에서 뒤로 건너 뛰기를 지원하지 않는 경우 &lt;code&gt;IOException&lt;/code&gt; 이 발생합니다. 건너 뛴 실제 바이트 수가 반환됩니다. 앞으로 건너 뛰면 양수 값을 반환합니다. 뒤로 건너 뛰면 음수 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="66c38c1c54f362c964143fb2033b1ddc5a7e0a28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; creates a byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has been reached.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; 의 &lt;code&gt;skip&lt;/code&gt; 메소드는 바이트 배열을 작성한 다음 &lt;code&gt;n&lt;/code&gt; 바이트를 읽거나 스트림의 끝에 도달 할 때까지 반복적으로 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="6a923526e0376b2377270933dbe7190607b0ff31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; first skips over the bytes in the pushback buffer, if any. It then calls the &lt;code&gt;skip&lt;/code&gt; method of the underlying input stream if more bytes need to be skipped. The actual number of bytes skipped is returned.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; 의 &lt;code&gt;skip&lt;/code&gt; 메소드는 먼저 푸시 백 버퍼의 바이트를 건너 뜁니다 (있는 경우). 그런 다음 더 많은 바이트를 건너 뛸 필요가있는 경우 기본 입력 스트림 의 &lt;code&gt;skip&lt;/code&gt; 메소드 를 호출합니다 . 건너 뛴 실제 바이트 수가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c16533536dab6e2f9b65c6a5002fc87433ad4e31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of this class creates a byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has been reached. Subclasses are encouraged to provide a more efficient implementation of this method. For instance, the implementation may depend on the ability to seek.</source>
          <target state="translated">이 클래스 의 &lt;code&gt;skip&lt;/code&gt; 메소드는 바이트 배열을 작성한 다음 &lt;code&gt;n&lt;/code&gt; 바이트를 읽거나 스트림의 끝에 도달 할 때까지 반복적으로 읽습니다 . 서브 클래스는이 메소드를보다 효율적으로 구현할 것을 권장합니다. 예를 들어, 구현은 탐색 능력에 의존 할 수있다.</target>
        </trans-unit>
        <trans-unit id="48bb13788e4dffd1bf5c784a19fc6b8edec85d28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument and &lt;code&gt;dest&lt;/code&gt; argument refer to arrays whose component types are different primitive types.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 인수 및 &lt;code&gt;dest&lt;/code&gt; 인수는 그 구성 요소 유형의 다른 원시적 형이다 배열을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2ded185c55f988e1ab8aa4ba594d8425c8a39394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a primitive component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array with a reference component type.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 인자는 프리미티브 컴포넌트 유형의 배열을 의미하고, &lt;code&gt;dest&lt;/code&gt; 인수는 기준 성분 유형 배열을 말한다.</target>
        </trans-unit>
        <trans-unit id="9b64842c9ed7d557d1d18f19836d86fd1cadc9b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a reference component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array with a primitive component type.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 인수는 기준 부품 형태로 배열를 참조하여 &lt;code&gt;dest&lt;/code&gt; 인자는 프리미티브 컴포넌트 유형의 배열을 말한다.</target>
        </trans-unit>
        <trans-unit id="17390f5ec2c7023bf41b502643c3390be1470837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 인수 배열이 아닌 오브젝트를 지칭한다.</target>
        </trans-unit>
        <trans-unit id="32cf5d4487a70ff5b3296fb66460f51ac7c6a160" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;srcPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;srcPos&lt;/code&gt; 인수는 부정적이다.</target>
        </trans-unit>
        <trans-unit id="345b6d87d178ad048ca717372d6308e35699c398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; walks the file tree as elements are consumed. The &lt;code&gt;Stream&lt;/code&gt; returned is guaranteed to have at least one element, the starting file itself. For each file visited, the stream attempts to read its &lt;a href=&quot;attribute/basicfileattributes&quot;&gt;&lt;code&gt;BasicFileAttributes&lt;/code&gt;&lt;/a&gt;. If the file is a directory and can be opened successfully, entries in the directory, and their &lt;em&gt;descendants&lt;/em&gt; will follow the directory in the stream as they are encountered. When all entries have been visited, then the directory is closed. The file tree walk then continues at the next &lt;em&gt;sibling&lt;/em&gt; of the directory.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; 요소가 소비의 파일 트리를 안내합니다. 리턴 된 &lt;code&gt;Stream&lt;/code&gt; 은 적어도 하나의 요소, 시작 파일 자체를 갖도록 보장됩니다. 방문한 각 파일에 대해 스트림은 &lt;a href=&quot;attribute/basicfileattributes&quot;&gt; &lt;code&gt;BasicFileAttributes&lt;/code&gt; &lt;/a&gt; 를 읽으려고 시도합니다 . 파일이 디렉토리이고 성공적으로 열 수있는 경우 디렉토리의 항목 및 해당 &lt;em&gt;하위&lt;/em&gt; 항목 은 스트림에서 디렉토리를 따라갑니다. 모든 항목을 방문하면 디렉토리가 닫힙니다. 그런 다음 파일 트리 워크는 다음 디렉토리의 &lt;em&gt;형제&lt;/em&gt; 에서 계속됩니다 .</target>
        </trans-unit>
        <trans-unit id="bbed603ba13286eef01f00c49ed0143e560232fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; factory methods provide clocks based on the best available system clock This may use &lt;a href=&quot;../lang/system#currentTimeMillis--&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;, or a higher resolution clock if one is available.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; 팩토리 메소드는이 사용할 수 있습니다 가능한 최상의 시스템 클럭을 기준으로 시계 제공 &lt;a href=&quot;../lang/system#currentTimeMillis--&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt; 사용 가능한 경우, 또는 더 높은 해상도 시계를.</target>
        </trans-unit>
        <trans-unit id="fc9c79ee1df025d55ac0b05752be64291c34d35f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; and the &lt;code&gt;methodName&lt;/code&gt; values should not be &lt;code&gt;null&lt;/code&gt;. Otherwise an attempt to execute this &lt;code&gt;Expression&lt;/code&gt; will result in a &lt;code&gt;NullPointerException&lt;/code&gt;. If the &lt;code&gt;arguments&lt;/code&gt; value is &lt;code&gt;null&lt;/code&gt;, an empty array is used as the value of the &lt;code&gt;arguments&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 과 &lt;code&gt;methodName&lt;/code&gt; 로의 값이어야한다 &lt;code&gt;null&lt;/code&gt; . 그렇지 않으면이 &lt;code&gt;Expression&lt;/code&gt; 을 실행하려고 하면 &lt;code&gt;NullPointerException&lt;/code&gt; 이 발생 합니다. 경우] &lt;code&gt;arguments&lt;/code&gt; 값은 &lt;code&gt;null&lt;/code&gt; 빈 배열의 값으로서 사용되는 &lt;code&gt;arguments&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="643140ef281b03db8ff1987c73ac0c49fd06dd1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; parameter is the target of the link. It may be an &lt;a href=&quot;path#isAbsolute--&quot;&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/a&gt; or relative path and may not exist. When the target is a relative path then file system operations on the resulting link are relative to the path of the link.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 파라미터는 링크의 대상이다. &lt;a href=&quot;path#isAbsolute--&quot;&gt; &lt;code&gt;absolute&lt;/code&gt; &lt;/a&gt; 또는 상대 경로 일 수 있으며 존재하지 않을 수 있습니다. 대상이 상대 경로 인 경우 결과 링크에서 파일 시스템 조작은 링크 경로에 상대적입니다.</target>
        </trans-unit>
        <trans-unit id="0009c69a4dc15a49dcbf1a0c8eae01039c7c4a96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thumbnails&lt;/code&gt; argument must either be &lt;code&gt;null&lt;/code&gt; or contain only &lt;code&gt;BufferedImage&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;thumbnails&lt;/code&gt; 인수는 하나 여야합니다 &lt;code&gt;null&lt;/code&gt; 또는에만 포함 &lt;code&gt;BufferedImage&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="a0e9ab517d625c7c2deaf59529ad7e0219c013fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeStamp&lt;/code&gt; of the notification is a time value (consistent with &lt;a href=&quot;../../../java/lang/system#currentTimeMillis--&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;) indicating when the notification was constructed.</source>
          <target state="translated">알림 의 &lt;code&gt;timeStamp&lt;/code&gt; 는 알림이 생성 된시기를 나타내는 시간 값 ( &lt;a href=&quot;../../../java/lang/system#currentTimeMillis--&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt; 일치 )입니다.</target>
        </trans-unit>
        <trans-unit id="b2dc1977f789016cfbe08995493b9abe10ad9cbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; returns a string consisting of the name of the class of which the object is an instance, the at-sign character `&lt;code&gt;@&lt;/code&gt;', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 클래스 의 &lt;code&gt;toString&lt;/code&gt; 메소드 는 오브젝트가 인스턴스 인 클래스의 이름, at 기호 문자` &lt;code&gt;@&lt;/code&gt; '및 오브젝트의 해시 코드의 부호없는 16 진 표현으로 구성된 문자열을 리턴 합니다. 즉,이 메소드는 다음 값과 동일한 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="bc716b32be2e2ea2d617e608d9ff17039ae30d19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument should be a valid value for the byte that follows the status byte in the &lt;code&gt;MetaMessage&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; argument should contain all the subsequent bytes of the &lt;code&gt;MetaMessage&lt;/code&gt;. In other words, the byte that specifies the type of &lt;code&gt;MetaMessage&lt;/code&gt; is not considered a data byte.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 인자는의 상태 바이트 다음 바이트의 유효 값이 &lt;code&gt;MetaMessage&lt;/code&gt; 의이 . &lt;code&gt;data&lt;/code&gt; 인수는 모든 후속 바이트를 포함해야 &lt;code&gt;MetaMessage&lt;/code&gt; 의를 . 즉, &lt;code&gt;MetaMessage&lt;/code&gt; 유형을 지정하는 바이트는 데이터 바이트로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="714e35a3944791dcc0a21aa2cfb1cc1a672a4844" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter is the type of the attributes required and this method returns an instance of that type if supported. All implementations support a basic set of file attributes and so invoking this method with a &lt;code&gt;type&lt;/code&gt; parameter of &lt;code&gt;BasicFileAttributes.class&lt;/code&gt; will not throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 매개 변수는 필수 속성의 유형 및 지원하는 경우이 방법은 해당 유형의 인스턴스를 반환합니다. 모든 구현은 기본 파일 속성 세트를 지원하므로 &lt;code&gt;BasicFileAttributes.class&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; 매개 변수 로이 메소드를 호출하면 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 이 발생하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f1056213ec4dbb35ecbc5b5160831677aa11a47e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter is typically a class, but it may be any type, such as an interface, a primitive type (like &lt;code&gt;int.class&lt;/code&gt;), or &lt;code&gt;void.class&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 파라미터는 일반적으로 클래스이지만, 이러한 인터페이스 (같은 원시 형 등 임의의 타입 일 수있다 &lt;code&gt;int.class&lt;/code&gt; 를 ) 또는 &lt;code&gt;void.class&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d0f557c7ffa69e938b51901e39f9567f456bb67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeName&lt;/code&gt; here is determined by the &lt;a href=&quot;#type-names&quot;&gt; type name rules&lt;/a&gt; detailed below.</source>
          <target state="translated">여기서 &lt;code&gt;typeName&lt;/code&gt; 은 아래에 자세히 설명 된 &lt;a href=&quot;#type-names&quot;&gt;유형 이름 규칙&lt;/a&gt; 에 따라 결정됩니다 .</target>
        </trans-unit>
        <trans-unit id="b34f44d7ea255df3fe2a501bc7503f396e8bcc57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uncaughtException&lt;/code&gt; method of &lt;code&gt;ThreadGroup&lt;/code&gt; does the following:</source>
          <target state="translated">&lt;code&gt;ThreadGroup&lt;/code&gt; 의 &lt;code&gt;uncaughtException&lt;/code&gt; 메소드 는 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="ba8b125bbe0fb10254e8b4e3a983a07e8dccd3bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uri&lt;/code&gt; parameter is an absolute, hierarchical URI, with a scheme equal (without regard to case) to the scheme supported by this provider. The exact form of the URI is highly provider dependent. The &lt;code&gt;env&lt;/code&gt; parameter is a map of provider specific properties to configure the file system.</source>
          <target state="translated">&lt;code&gt;uri&lt;/code&gt; 파라미터는이 제공자가 지원하는 방식으로 (경우에 관계없이)와 동일한 방식으로, 절대 계층 URI이다. URI의 정확한 형식은 공급자에 따라 크게 다릅니다. &lt;code&gt;env&lt;/code&gt; 매개 변수는 파일 시스템을 구성하는 제공자 특정 속성의 맵입니다.</target>
        </trans-unit>
        <trans-unit id="8d5265eccd53a8174604390135889708c5fc5e2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useOrdering&lt;/code&gt; argument controls the ordering of the results using the same rules as &lt;code&gt;getServiceProviders(Class, boolean)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;useOrdering&lt;/code&gt; 인수 컨트롤과 같은 규칙을 사용하여 결과의 순서 &lt;code&gt;getServiceProviders(Class, boolean)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf3c577a872e1c1751d1a92167097db6476c0ae8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method with a &lt;code&gt;key&lt;/code&gt; that is equal to the original &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 발신하여 검색 할 수있는 &lt;code&gt;get&lt;/code&gt; A의 방법 &lt;code&gt;key&lt;/code&gt; 일본어 같다 &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb6cc5d83f6f060e6206ee4432cd2838d953df43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wrap()&lt;/code&gt; and &lt;code&gt;unwrap()&lt;/code&gt; methods may execute concurrently of each other.</source>
          <target state="translated">&lt;code&gt;wrap()&lt;/code&gt; 및 &lt;code&gt;unwrap()&lt;/code&gt; 메소드는 서로 동시에 실행할 수있다.</target>
        </trans-unit>
        <trans-unit id="b6ac35afc51c676f6acfb59fbb66aebb7fd7dffe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;CipherOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of three arguments with the three arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 의 방법 &lt;code&gt;CipherOutputStream&lt;/code&gt; 를이 부르는 &lt;code&gt;write&lt;/code&gt; 세 개의 인수와 세 개의 인수의 방법 &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , 및 &lt;code&gt;b.length&lt;/code&gt; 를을 .</target>
        </trans-unit>
        <trans-unit id="b444208efa76dded6db1c12df1b7df685049876c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;write&lt;/code&gt; method of three arguments with the arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 의 방법을 &lt;code&gt;FilterOutputStream&lt;/code&gt; 자사의 호출을 &lt;code&gt;write&lt;/code&gt; 인수와 세 개의 인수의 방법 &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , 및 &lt;code&gt;b.length&lt;/code&gt; 를을 .</target>
        </trans-unit>
        <trans-unit id="4d273be569b8b30933a05fc498292c5402a93de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of its underlying output stream, that is, it performs &lt;code&gt;out.write(b)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 방법 &lt;code&gt;FilterOutputStream&lt;/code&gt; 부르는 &lt;code&gt;write&lt;/code&gt; 자사 기본 출력 스트림의 방법, 그것을 행하는 &lt;code&gt;out.write(b)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b52d117ddcb1aaf2483d386c55d430f15571498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of one argument on each &lt;code&gt;byte&lt;/code&gt; to output.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 방법 &lt;code&gt;FilterOutputStream&lt;/code&gt; 부르는 &lt;code&gt;write&lt;/code&gt; 각각에 하나 개의 인자에있어서의 &lt;code&gt;byte&lt;/code&gt; 를 출력한다.</target>
        </trans-unit>
        <trans-unit id="f6b5bd7ff632f357b485afe4736af5f2318b4eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; calls the write method of one argument on each of the bytes to be written out. Subclasses are encouraged to override this method and provide a more efficient implementation.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 방법 &lt;code&gt;OutputStream&lt;/code&gt; 바이트마다 인수의 쓰기 방법을 기입합니다 호출합니다. 서브 클래스는이 메소드를 대체하고보다 효율적인 구현을 제공하도록 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="4052734952517729cae634a4334fbfe7bc56b79a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; methods of the resulting stream will throw an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.</source>
          <target state="translated">기본 채널이 비 차단 모드에있는 동안 호출되면 결과 스트림 의 &lt;code&gt;write&lt;/code&gt; 메소드에서 &lt;a href=&quot;illegalblockingmodeexception&quot;&gt; &lt;code&gt;IllegalBlockingModeException&lt;/code&gt; &lt;/a&gt; 이 발생합니다. 스트림은 버퍼링되지 않습니다. 스트림은 여러 개의 동시 스레드가 안전하게 액세스 할 수 있습니다. 스트림을 닫으면 채널이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="7aeccac65dd62b076d4abb5d4c775615877d46ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeObject&lt;/code&gt; is a single entry point to the persistence and is used by a &lt;code&gt;Encoder&lt;/code&gt; in the traditional mode of delegation. Although this method is not final, it should not need to be subclassed under normal circumstances.</source>
          <target state="translated">&lt;code&gt;writeObject&lt;/code&gt; 지속성에 대한 단일 진입 점이며 의해 사용되는 &lt;code&gt;Encoder&lt;/code&gt; 대표의 전통적인 모드. 이 방법은 최종 방법은 아니지만 일반적인 상황에서 하위 클래스로 분류 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="65972030b222838810b7ba8b656c7648e06077d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeUTF&lt;/code&gt; method of interface &lt;code&gt;DataOutput&lt;/code&gt; may be used to write data that is suitable for reading by this method.</source>
          <target state="translated">&lt;code&gt;DataOutput&lt;/code&gt; 인터페이스 의 &lt;code&gt;writeUTF&lt;/code&gt; 메소드를 사용하여이 메소드로 읽기에 적합한 데이터를 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecdfdf55c3e6233c34db1e9797ae4ac06e60e0e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ }&lt;/code&gt; characters are a group of subpatterns, where the group matches if any subpattern in the group matches. The &lt;code&gt;&quot;,&quot;&lt;/code&gt; character is used to separate the subpatterns. Groups cannot be nested.</source>
          <target state="translated">&lt;code&gt;{ }&lt;/code&gt; 문자는 그룹이있는 경우 일치 서브 패턴의 그룹이다 그룹 경기에서 어떤 서브 패턴. 은 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 문자는 서브 패턴을 분리하는 데 사용됩니다. 그룹은 중첩 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4383cedf66c99d541142d23205794e9fbe074f11" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;action&lt;/em&gt;. For a permission you need, this is one of the actions in the list &lt;a href=&quot;#action-list&quot;&gt;below&lt;/a&gt;. For a permission you have, this is a comma-separated list of those actions, or &lt;code&gt;*&lt;/code&gt;, representing all actions.</source>
          <target state="translated">&lt;em&gt;행동&lt;/em&gt; . 필요한 권한의 경우 &lt;a href=&quot;#action-list&quot;&gt;아래&lt;/a&gt; 목록의 작업 중 하나입니다 . 권한이있는 경우이 목록은 쉼표로 구분 된 해당 작업 목록 또는 &lt;code&gt;*&lt;/code&gt; 이며 모든 작업을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4203e1844ba2358b9cf99e65861fc5814fcbd135" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;canonical key property list&lt;/em&gt; is the same string as described for &lt;a href=&quot;objectname#getCanonicalKeyPropertyListString--&quot;&gt;&lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;표준 키의 프로퍼티리스트&lt;/em&gt; 에 기술 된 것과 동일한 문자열 &lt;a href=&quot;objectname#getCanonicalKeyPropertyListString--&quot;&gt; &lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0da932c873e0a87699cfc16c3ea52c0b2e0de4c0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;class name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;클래스 이름&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b34ed1bdfeb4a02859cb87fc0dd3c70da93cc4ac" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;domain&lt;/em&gt; is a string of characters not including the character colon (&lt;code&gt;:&lt;/code&gt;). It is recommended that the domain should not contain the string &quot;&lt;code&gt;//&lt;/code&gt;&quot;, which is reserved for future use.</source>
          <target state="translated">&lt;em&gt;도메인은&lt;/em&gt; 문자 콜론을 포함하지 않는 문자열입니다 ( &lt;code&gt;:&lt;/code&gt; ). 도메인에는 &quot; &lt;code&gt;//&lt;/code&gt; &quot; 문자열이 포함되어서는 안되며 , 나중에 사용하기 위해 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4031de43ef1c59b0c68ad4834eee900eefebe3c6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;head&lt;/em&gt; of this queue is the &lt;em&gt;least&lt;/em&gt; element with respect to the specified ordering. If multiple elements are tied for least value, the head is one of those elements -- ties are broken arbitrarily. The queue retrieval operations &lt;code&gt;poll&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;peek&lt;/code&gt;, and &lt;code&gt;element&lt;/code&gt; access the element at the head of the queue.</source>
          <target state="translated">이 큐 의 &lt;em&gt;헤드&lt;/em&gt; 는 지정된 순서와 관련 하여 &lt;em&gt;가장 작은&lt;/em&gt; 요소입니다. 여러 요소가 최소한의 가치로 묶여 있으면 머리는 그러한 요소 중 하나입니다. 넥타이는 임의로 끊어집니다. 큐 검색 조작 은 큐 헤드에서 &lt;code&gt;element&lt;/code&gt; &lt;code&gt;poll&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; , &lt;code&gt;peek&lt;/code&gt; 및 요소 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="132748ef7ce7edd118fa2aec50bbb6b7013d4a04" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;key properties&lt;/em&gt; are an unordered set of keys and associated values.</source>
          <target state="translated">&lt;em&gt;키 등록은&lt;/em&gt; 키와 관련된 값들의 순서화 된 집합이다.</target>
        </trans-unit>
        <trans-unit id="49b6c7b812bfb37bbfa829d277662d381281a9fd" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;mapped&lt;/em&gt; Java type, &lt;em&gt;opendata(J)&lt;/em&gt;, which is always the same for any given &lt;em&gt;opentype(J)&lt;/em&gt;. This is a Java class.</source>
          <target state="translated">&lt;em&gt;매핑 된&lt;/em&gt; Java 형, &lt;em&gt;opendata (J)&lt;/em&gt; 항상 주어진에 대해 동일, &lt;em&gt;오픈 타입 (J)&lt;/em&gt; . 이것은 Java 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="bbb454761775dc1a414464798499aeee43da2b26" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;member&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;멤버&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="074cbd71c6bb024356bb7396d0de2ecfe45082b5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;name&lt;/em&gt; of the permission can also denote a list of one or more comma-separated operations. Spaces are allowed at the beginning and end of the &lt;em&gt;name&lt;/em&gt; and before and after commas.</source>
          <target state="translated">&lt;em&gt;이름&lt;/em&gt; 권한의는 하나 이상의 쉼표로 구분 된 작업 목록을 표시 할 수 있습니다. &lt;em&gt;이름&lt;/em&gt; 의 시작과 끝 과 쉼표 앞뒤에 공백이 허용됩니다 .</target>
        </trans-unit>
        <trans-unit id="9480872eca819a401a143d99801ef4a81e78cc7a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;object name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;개체 이름&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f0e83e021e240eac4fd2981ea6d32868e52f81d8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname consists of the pathname's prefix, if any, and each name in the pathname's name sequence except for the last. If the name sequence is empty then the pathname does not name a parent directory.</source>
          <target state="translated">추상 경로명 의 &lt;em&gt;부모&lt;/em&gt; 는 경로명의 접두사 (있는 경우)와 마지막을 제외한 경로명의 이름 순서에있는 각 이름으로 구성됩니다. 이름 순서가 비어 있으면 경로 이름이 상위 디렉토리의 이름을 지정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0528ba347878b821ba42755b3a17661463c339f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname may be obtained by invoking the &lt;a href=&quot;file#getParent--&quot;&gt;&lt;code&gt;getParent()&lt;/code&gt;&lt;/a&gt; method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any &lt;code&gt;File&lt;/code&gt; object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; is an ancestor of the directory denoted by the pathname &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;부모&lt;/em&gt; 추상 패스의이 호출함으로써 얻어 질 수있다 &lt;a href=&quot;file#getParent--&quot;&gt; &lt;code&gt;getParent()&lt;/code&gt; &lt;/a&gt; 이 클래스의 방법과 경로의 접두사와 마지막을 제외한 경로 이름 순서에서 각각 이름 구성된다. 각 디렉토리의 절대 경로 이름은 디렉토리의 절대 경로 이름으로 시작하는 절대 추상 경로 이름을 가진 &lt;code&gt;File&lt;/code&gt; 객체 의 조상입니다 . 예를 들어, 추상 경로 이름 &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; 으로 표시된 디렉토리는 경로 이름 &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt; 으로 표시된 디렉토리의 조상입니다 .</target>
        </trans-unit>
        <trans-unit id="3219f3facb21696d1ed20d4e54a6c99ee13262e4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;pattern indication&lt;/em&gt; is:</source>
          <target state="translated">&lt;em&gt;패턴 표시&lt;/em&gt; 이다 :</target>
        </trans-unit>
        <trans-unit id="e24706d6569ad24b7b450fbbe13dd7ea6ed5e827" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;time-to-live&lt;/em&gt; for Internet Protocol (IP) multicast datagrams</source>
          <target state="translated">&lt;em&gt;타임 - 투 - 라이브&lt;/em&gt; 인터넷 프로토콜 (IP) 멀티 캐스트 데이터 그램에 대한</target>
        </trans-unit>
        <trans-unit id="2a0f0d9a04c7aa959de016e80e8a27f487dc3d88" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;time-to-live&lt;/em&gt; for Internet Protocol (IP) multicast datagrams.</source>
          <target state="translated">&lt;em&gt;타임 - 투 - 라이브&lt;/em&gt; 인터넷 프로토콜 (IP) 멀티 캐스트 데이터 그램합니다.</target>
        </trans-unit>
        <trans-unit id="a5cbd78bbaec3014307f658d756d06fe19f45c6b" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;outer&lt;/var&gt; parameter is a pointer to the MBeanServer that should be passed to the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface when registering MBeans inside the MBeanServer. If &lt;var&gt;outer&lt;/var&gt; is &lt;code&gt;null&lt;/code&gt;, then the MBeanServer implementation must use its own &lt;code&gt;this&lt;/code&gt; reference when invoking the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;var&gt;outer&lt;/var&gt; 파라미터는에게 건네지는 MBeanServer의 포인터 &lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; &lt;/a&gt; MBeanServer에 MBean를 등록 할 때에 인터페이스. &lt;var&gt;outer&lt;/var&gt; 가 &lt;code&gt;null&lt;/code&gt; 의 경우 , MBeanServer 구현은 독자적인 것을 사용해야합니다 &lt;code&gt;this&lt;/code&gt; &lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; &lt;/a&gt; 인터페이스를 호출 할 때 으로이 참조를 .</target>
        </trans-unit>
        <trans-unit id="f59eba20773f5628795f2594c47e23e68f64a277" translate="yes" xml:space="preserve">
          <source>The ACL Entries in each ACL observe the following rules:</source>
          <target state="translated">각 ACL의 ACL 항목은 다음 규칙을 준수합니다.</target>
        </trans-unit>
        <trans-unit id="8bff27e96b6704d8f87499203e5a6ae8eb995398" translate="yes" xml:space="preserve">
          <source>The ACL entry represented by this class is based on the ACL model specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt;RFC 3530: Network File System (NFS) version 4 Protocol&lt;/i&gt;&lt;/a&gt;. Each entry has four components as follows:</source>
          <target state="translated">이 클래스가 나타내는 ACL 항목은에 지정된 ACL 모델을 기반으로합니다. &lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt; RFC 3530 : NFS (Network File System) 버전 4 프로토콜에&lt;/i&gt;&lt;/a&gt;. 각 항목에는 다음과 같은 네 가지 구성 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="36548e1972814e3b9960a257ac0e7fefe094719d" translate="yes" xml:space="preserve">
          <source>The API has a relatively large surface area in terms of number of methods. This is made manageable through the use of consistent method prefixes.</source>
          <target state="translated">API는 메소드 수 측면에서 비교적 넓은 표면적을 가지고 있습니다. 일관된 메소드 접두사를 사용하여 관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="dbd68d7bbcc6cfd76b2979294dc860ef940a8a77" translate="yes" xml:space="preserve">
          <source>The API has been designed to reject null early and to be clear about this behavior. A key exception is any method that takes an object and returns a boolean, for the purpose of checking or validating, will generally return false for null.</source>
          <target state="translated">API는 null을 일찍 거부하고이 동작에 대해 명확하게 설계되었습니다. 중요한 예외는 객체를 가져 와서 부울을 리턴하는 메소드이며, 점검 또는 유효성 검증을 위해 일반적으로 널 (null)에 대해 false를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5d2d1219bb89c1b00654a21e6d21d64a9c99c7dd" translate="yes" xml:space="preserve">
          <source>The API includes remote access, so a remote management program can interact with a running application for these purposes.</source>
          <target state="translated">API에는 원격 액세스가 포함되어 있으므로 원격 관리 프로그램은 이러한 목적으로 실행중인 응용 프로그램과 상호 작용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ddb46698ab6320ca268f051f9fdff93cea456dc" translate="yes" xml:space="preserve">
          <source>The API is also designed for user extensibility, as there are many ways of calculating time. The &lt;a href=&quot;temporal/temporalfield&quot;&gt;field&lt;/a&gt; and &lt;a href=&quot;temporal/temporalunit&quot;&gt;unit&lt;/a&gt; API, accessed via &lt;a href=&quot;temporal/temporalaccessor&quot;&gt;&lt;code&gt;TemporalAccessor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;temporal/temporal&quot;&gt;&lt;code&gt;Temporal&lt;/code&gt;&lt;/a&gt; provide considerable flexibility to applications. In addition, the &lt;a href=&quot;temporal/temporalquery&quot;&gt;&lt;code&gt;TemporalQuery&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;temporal/temporaladjuster&quot;&gt;&lt;code&gt;TemporalAdjuster&lt;/code&gt;&lt;/a&gt; interfaces provide day-to-day power, allowing code to read close to business requirements:</source>
          <target state="translated">API는 시간을 계산하는 많은 방법이 있기 때문에 사용자 확장 성을 위해 설계되었습니다. &lt;a href=&quot;temporal/temporalaccessor&quot;&gt; &lt;code&gt;TemporalAccessor&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;temporal/temporal&quot;&gt; &lt;code&gt;Temporal&lt;/code&gt; 을&lt;/a&gt; 통해 액세스 되는 &lt;a href=&quot;temporal/temporalfield&quot;&gt;필드&lt;/a&gt; 및 &lt;a href=&quot;temporal/temporalunit&quot;&gt;단위&lt;/a&gt; API 는 애플리케이션에 상당한 유연성을 제공합니다. 또한 &lt;a href=&quot;temporal/temporalquery&quot;&gt; &lt;code&gt;TemporalQuery&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;temporal/temporaladjuster&quot;&gt; &lt;code&gt;TemporalAdjuster&lt;/code&gt; &lt;/a&gt; 인터페이스는 일상적인 성능을 제공하여 코드가 비즈니스 요구 사항에 근접하여 읽을 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="14204c857d829d56ea62ee7c57aa99da1a8c1fa8" translate="yes" xml:space="preserve">
          <source>The API is designed to be type-safe where reasonable in the main high-level API. Thus, there are separate classes for the distinct concepts of date, time and date-time, plus variants for offset and time-zone. This can seem like a lot of classes, but most applications can begin with just five date/time types.</source>
          <target state="translated">API는 주요 고급 API에서 합리적인 경우 형식이 안전하도록 설계되었습니다. 따라서 날짜, 시간 및 날짜-시간의 고유 한 개념에 대한 별도의 클래스와 오프셋 및 시간대에 대한 변형이 있습니다. 이것은 많은 수업처럼 보일 수 있지만 대부분의 응용 프로그램은 5 개의 날짜 / 시간 유형으로 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d7455826253bffa39b78615725dcdd563f19a04" translate="yes" xml:space="preserve">
          <source>The API requires every print service to support certain attributes; other attributes are optional and the service can choose whether or not to support them. Each attribute has a set of values that it accepts. The API requires every print service to support certain values for certain attributes; other attribute values are optional and the service can choose whether or not to support them. These support requirements are recorded in the documentation for each attribute class.</source>
          <target state="translated">API는 모든 인쇄 서비스가 특정 속성을 지원하도록 요구합니다. 다른 속성은 선택 사항이며 서비스는 해당 속성을 지원할지 여부를 선택할 수 있습니다. 각 속성에는 허용되는 값 세트가 있습니다. API는 모든 인쇄 서비스가 특정 속성에 대한 특정 값을 지원하도록 요구합니다. 다른 속성 값은 선택 사항이며 서비스는이를 지원할지 여부를 선택할 수 있습니다. 이러한 지원 요구 사항은 각 속성 클래스에 대한 설명서에 기록되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="98bf436512bc6abd974a2733430a3d5b5a388d6c" translate="yes" xml:space="preserve">
          <source>The APIs added in 1.7 map between the old and new language codes, maintaining the old codes internal to Locale (so that &lt;code&gt;getLanguage&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; reflect the old code), but using the new codes in the BCP 47 language tag APIs (so that &lt;code&gt;toLanguageTag&lt;/code&gt; reflects the new one). This preserves the equivalence between Locales no matter which code or API is used to construct them. Java's default resource bundle lookup mechanism also implements this mapping, so that resources can be named using either convention, see &lt;a href=&quot;resourcebundle.control&quot;&gt;&lt;code&gt;ResourceBundle.Control&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1.7에 추가 된 API는 이전 언어 코드와 새 언어 코드를 매핑하여 로케일 내부의 기존 코드를 유지하지만 ( &lt;code&gt;getLanguage&lt;/code&gt; 및 &lt;code&gt;toString&lt;/code&gt; 은 이전 코드를 반영 함) BCP 47 언어 태그 API에서 새 코드를 사용합니다 ( &lt;code&gt;toLanguageTag&lt;/code&gt; 는 새로운 것). 이렇게하면 로케일간에 코드 또는 API를 사용하여 로케일 간의 동등성을 유지합니다. Java의 기본 자원 번들 조회 메커니즘은이 맵핑을 구현하므로 두 규칙 중 하나를 사용하여 자원의 이름을 지정할 수 있습니다 ( &lt;a href=&quot;resourcebundle.control&quot;&gt; &lt;code&gt;ResourceBundle.Control&lt;/code&gt; &lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="1e8aa36e1e31661c0e8ce5465a873be7b0631796" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition for this is:</source>
          <target state="translated">이에 대한 ASN.1 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="943be2a0bc4bf87f26928040bf4bf42222a1a4d3" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition is as follows:</source>
          <target state="translated">ASN.1 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="47734034dda78f218c309ac08628f954c60425f3" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;GeneralNames&lt;/code&gt; is defined in &lt;a href=&quot;x509certificate#getSubjectAlternativeNames--&quot;&gt;&lt;code&gt;getSubjectAlternativeNames&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;GeneralNames&lt;/code&gt; 의 ASN.1 정의는 &lt;a href=&quot;x509certificate#getSubjectAlternativeNames--&quot;&gt; &lt;code&gt;getSubjectAlternativeNames&lt;/code&gt; 에&lt;/a&gt; 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d4394df37dee40fdf32c164d9e7675520b84225" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;tbsCertList&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;tbsCertList&lt;/code&gt; 의 ASN.1 정의는 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f3b0786ad17cd85c2406e5dec048d22519850b47" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;tbsCertificate&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;tbsCertificate&lt;/code&gt; 의 ASN.1 정의는 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ef48af476f938c6dbaa3d39664736786a596b706" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of the &lt;code&gt;IssuerAltName&lt;/code&gt; extension is:</source>
          <target state="translated">&lt;code&gt;IssuerAltName&lt;/code&gt; 확장 의 ASN.1 정의 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f3bfe2daf1a8d1055520bbddc7ce3310410386b4" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of the &lt;code&gt;SubjectAltName&lt;/code&gt; extension is:</source>
          <target state="translated">&lt;code&gt;SubjectAltName&lt;/code&gt; 확장 의 ASN.1 정의 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0669e573aa756da1edc3404f2ca12e839dcd44e2" translate="yes" xml:space="preserve">
          <source>The AccessControlContext of the thread that created the instance of URLClassLoader will be used when subsequently loading classes and resources.</source>
          <target state="translated">URLClassLoader의 인스턴스를 만든 스레드의 AccessControlContext는 이후에 클래스와 리소스를로드 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b36f05d0d881d326a4ca7052f41c11e7cb29b4d8" translate="yes" xml:space="preserve">
          <source>The AccessController class is used for access control operations and decisions.</source>
          <target state="translated">AccessController 클래스는 액세스 제어 조작 및 결정에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e44ca12442a1e7b0c2ea9c89fdb764999e8954ae" translate="yes" xml:space="preserve">
          <source>The AccessibleObject class is the base class for Field, Method and Constructor objects.</source>
          <target state="translated">AccessibleObject 클래스는 Field, Method 및 Constructor 객체의 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6a4566430ddc25f7244284392e568dac22b82186" translate="yes" xml:space="preserve">
          <source>The AccessibleObject class is the base class for Field, Method and Constructor objects. It provides the ability to flag a reflected object as suppressing default Java language access control checks when it is used. The access checks--for public, default (package) access, protected, and private members--are performed when Fields, Methods or Constructors are used to set or get fields, to invoke methods, or to create and initialize new instances of classes, respectively.</source>
          <target state="translated">AccessibleObject 클래스는 Field, Method 및 Constructor 객체의 기본 클래스입니다. 사용시 기본 Java 언어 액세스 제어 검사를 억제하여 반사 된 오브젝트에 플래그를 지정할 수 있습니다. 공개, 기본 (패키지) 액세스, 보호 및 개인 멤버에 대한 액세스 검사는 필드, 메소드 또는 생성자가 필드를 설정 또는 가져 오거나 메소드를 호출하거나 클래스의 새 인스턴스를 작성 및 초기화하는 데 사용되는 경우 수행됩니다. 각각.</target>
        </trans-unit>
        <trans-unit id="6784e3abc090fab94e5244fcbe90ade6d9424123" translate="yes" xml:space="preserve">
          <source>The AllPermission is a permission that implies all other permissions.</source>
          <target state="translated">AllPermission은 다른 모든 권한을 암시하는 권한입니다.</target>
        </trans-unit>
        <trans-unit id="e40e5d487b331e1f7f4c2477322a84662ea1dcde" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming</source>
          <target state="translated">컴퓨터 프로그래밍의 기술</target>
        </trans-unit>
        <trans-unit id="3e916cc17dff2d73e810c4085e8846b18e562a3e" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming,</source>
          <target state="translated">컴퓨터 프로그래밍 기술,</target>
        </trans-unit>
        <trans-unit id="d69bacd54b669ff7d878e60414c2d1f8611ca3a2" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming, Volume 2</source>
          <target state="translated">컴퓨터 프로그래밍 기술, 2 권</target>
        </trans-unit>
        <trans-unit id="545bef1b9e1299301bb2907b1e213bfe088b7b67" translate="yes" xml:space="preserve">
          <source>The Attribute with attrID that was previous in this attribute set; null if no such attribute existed.</source>
          <target state="translated">이 속성 세트에서 이전에 attrID를 가진 속성. 그러한 속성이 존재하지 않는 경우는 null</target>
        </trans-unit>
        <trans-unit id="86989bf0d4a1d404f5eef67b394b9e8347a4cb82" translate="yes" xml:space="preserve">
          <source>The Attribute with the same ID as attr that was previous in this attribute set; null if no such attribute existed.</source>
          <target state="translated">이 속성 세트에서 이전에 attr과 동일한 ID를 가진 속성. 그러한 속성이 존재하지 않는 경우는 null</target>
        </trans-unit>
        <trans-unit id="188be4b00e3695b200467797aef29ec1a27bdb7b" translate="yes" xml:space="preserve">
          <source>The Attribute with the same ID as attrID that was previous in the attribute set; null if no such attribute existed.</source>
          <target state="translated">속성 세트에서 이전에 attrID와 동일한 ID를 가진 속성. 그러한 속성이 존재하지 않는 경우는 null</target>
        </trans-unit>
        <trans-unit id="17831de708d75ed43f9af6c62286f3a3d590fbe3" translate="yes" xml:space="preserve">
          <source>The Attributes class maps Manifest attribute names to associated string values.</source>
          <target state="translated">Attributes 클래스는 매니페스트 속성 이름을 관련 문자열 값에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="11106864e8cece63f4df274160f30c89327ce115" translate="yes" xml:space="preserve">
          <source>The Attributes class maps Manifest attribute names to associated string values. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</source>
          <target state="translated">Attributes 클래스는 매니페스트 속성 이름을 관련 문자열 값에 매핑합니다. 유효한 속성 이름은 대소 문자를 구분하지 않으며 [0-9a-zA-Z_-] 집합의 ASCII 문자로 제한되며 70자를 초과 할 수 없습니다. 속성 값은 모든 문자를 포함 할 수 있으며 출력 스트림에 기록 될 때 UTF8로 인코딩됩니다. 유효한 속성 이름 및 값에 대한 자세한 정보는 JAR 파일 스펙을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5b1b32f55e754aebc8c66e80e5a265f6ce9b4d29" translate="yes" xml:space="preserve">
          <source>The Attributes.Name class represents an attribute name stored in this Map.</source>
          <target state="translated">Attributes.Name 클래스는이 맵에 저장된 속성 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="130d29f5e1935938287de918b31d59eac532adc8" translate="yes" xml:space="preserve">
          <source>The Attributes.Name class represents an attribute name stored in this Map. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</source>
          <target state="translated">Attributes.Name 클래스는이 맵에 저장된 속성 이름을 나타냅니다. 유효한 속성 이름은 대소 문자를 구분하지 않으며 [0-9a-zA-Z_-] 집합의 ASCII 문자로 제한되며 70자를 초과 할 수 없습니다. 속성 값은 모든 문자를 포함 할 수 있으며 출력 스트림에 기록 될 때 UTF8로 인코딩됩니다. 유효한 속성 이름 및 값에 대한 자세한 정보는 JAR 파일 스펙을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="933c13e97de653f311c0095da4356feb1ef9aa07" translate="yes" xml:space="preserve">
          <source>The BIDI_EMBEDDING attribute in the text, if present, represents embedding level information. Negative values from -1 to -62 indicate overrides at the absolute value of the level. Positive values from 1 to 62 indicate embeddings. Where values are zero or not defined, the base embedding level as determined by the base direction is assumed.</source>
          <target state="translated">텍스트의 BIDI_EMBEDDING 속성 (있는 경우)은 포함 레벨 정보를 나타냅니다. -1에서 -62까지의 음수 값은 레벨의 절대 값에서 재정의를 나타냅니다. 1에서 62 사이의 양수 값은 임베딩을 나타냅니다. 값이 0이거나 정의되지 않은 경우 기본 방향으로 결정된 기본 포함 수준이 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="479b03243c34870565e01fcb4d8b7558405fd430" translate="yes" xml:space="preserve">
          <source>The Base64 padding character &lt;code&gt;'='&lt;/code&gt; is accepted and interpreted as the end of the encoded byte data, but is not required. So if the final unit of the encoded byte data only has two or three Base64 characters (without the corresponding padding character(s) padded), they are decoded as if followed by padding character(s). If there is a padding character present in the final unit, the correct number of padding character(s) must be present, otherwise &lt;code&gt;IllegalArgumentException&lt;/code&gt; ( &lt;code&gt;IOException&lt;/code&gt; when reading from a Base64 stream) is thrown during decoding.</source>
          <target state="translated">Base64 패딩 문자 &lt;code&gt;'='&lt;/code&gt; 는 인코딩 된 바이트 데이터의 끝으로 승인되고 해석되지만 필수는 아닙니다. 따라서, 인코딩 된 바이트 데이터의 최종 단위가 2 개 또는 3 개의 Base64 문자 (패딩 문자를 채우지 않은 채) 만 가진 경우에는 패딩 문자가 뒤 따르는 것처럼 디코딩됩니다. 최종 단위에 패딩 문자가 있으면 올바른 수의 패딩 문자가 있어야합니다. 그렇지 않으면 디코딩 중에 &lt;code&gt;IllegalArgumentException&lt;/code&gt; ( Base64 스트림에서 읽을 때 &lt;code&gt;IOException&lt;/code&gt; )이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7f2fa42fffaffc455185b2641418acb565381be2" translate="yes" xml:space="preserve">
          <source>The BasicPermission class extends the Permission class, and can be used as the base class for permissions that want to follow the same naming convention as BasicPermission.</source>
          <target state="translated">BasicPermission 클래스는 Permission 클래스를 확장하며 BasicPermission과 동일한 이름 지정 규칙을 따르려는 권한의 기본 클래스로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8109724094de0721a57a12d33075bebc3a6c1d9" translate="yes" xml:space="preserve">
          <source>The BasicReason enumerates the potential reasons that a certification path of any type may be invalid.</source>
          <target state="translated">BasicReason은 모든 유형의 인증 경로가 유효하지 않은 잠재적 이유를 열거합니다.</target>
        </trans-unit>
        <trans-unit id="7f2f07330207c79bdf9b8035cdfc8c33b0b86b6f" translate="yes" xml:space="preserve">
          <source>The BeanContext acts a logical hierarchical container for JavaBeans.</source>
          <target state="translated">BeanContext는 JavaBeans의 논리적 계층 컨테이너 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="db9f214e6794613d1af4a4bd16aca364a324671d" translate="yes" xml:space="preserve">
          <source>The BeanContextServices interface provides a mechanism for a BeanContext to expose generic &quot;services&quot; to the BeanContextChild objects within.</source>
          <target state="translated">BeanContextServices 인터페이스는 BeanContext가 일반 &quot;서비스&quot;를 BeanContextChild 객체에 노출 할 수있는 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="61f473874cda4877ad49e4b4e18b2669d648bcfa" translate="yes" xml:space="preserve">
          <source>The BigInteger constant one.</source>
          <target state="translated">BigInteger 상수입니다.</target>
        </trans-unit>
        <trans-unit id="4fe20da433bea836e2620a8e5bd24465caa34b0d" translate="yes" xml:space="preserve">
          <source>The BigInteger constant ten.</source>
          <target state="translated">BigInteger 상수 10입니다.</target>
        </trans-unit>
        <trans-unit id="eaa19daee6ceb68fa207da723944fc65078e9b5c" translate="yes" xml:space="preserve">
          <source>The BigInteger constant zero.</source>
          <target state="translated">BigInteger 상수 0입니다.</target>
        </trans-unit>
        <trans-unit id="f2abfa8bc11f1cc0906af68cb43302c5e56e7dbc" translate="yes" xml:space="preserve">
          <source>The Boolean class wraps a value of the primitive type &lt;code&gt;boolean&lt;/code&gt; in an object.</source>
          <target state="translated">부울 클래스는 기본 유형의 &lt;code&gt;boolean&lt;/code&gt; 값을 객체에 래핑 합니다.</target>
        </trans-unit>
        <trans-unit id="d66eb41900b1a53b5e15c061f84c26f96aec8f20" translate="yes" xml:space="preserve">
          <source>The Boolean class wraps a value of the primitive type &lt;code&gt;boolean&lt;/code&gt; in an object. An object of type &lt;code&gt;Boolean&lt;/code&gt; contains a single field whose type is &lt;code&gt;boolean&lt;/code&gt;.</source>
          <target state="translated">부울 클래스는 기본 유형의 &lt;code&gt;boolean&lt;/code&gt; 값을 객체에 래핑 합니다. &lt;code&gt;Boolean&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;boolean&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="730ba74f50d3f28436fa29f532e375e6c0695ab2" translate="yes" xml:space="preserve">
          <source>The CPU time provided by this interface has nanosecond precision but not necessarily nanosecond accuracy.</source>
          <target state="translated">이 인터페이스가 제공하는 CPU 시간은 나노초 정밀도이지만 반드시 나노초 정확도는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e8f7f2f7ff227a32e7a5531eecf91cf56365cd7f" translate="yes" xml:space="preserve">
          <source>The CRL or OCSP response cannot be obtained because of a network error.</source>
          <target state="translated">네트워크 오류로 인해 CRL 또는 OCSP 응답을 얻을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b4d351c3db241b4d379234c7ac2cb5765fab41d2" translate="yes" xml:space="preserve">
          <source>The CRLReason enumeration specifies the reason that a certificate is revoked, as defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt; RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.</source>
          <target state="translated">CRLReason 열거는 &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280 : Internet X.509 공개 키 인프라 인증서 및 CRL 프로파일에&lt;/a&gt; 정의 된대로 인증서가 취소 된 이유를 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="33f1a9e451f535334439b331e5952fb5eceaa417" translate="yes" xml:space="preserve">
          <source>The Character Encoding is not supported.</source>
          <target state="translated">문자 인코딩은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5a47ec8afb6ab11bcf60e2a316aaa05ee5d6f88e" translate="yes" xml:space="preserve">
          <source>The Class Loader Repository used by the given MBeanServer.</source>
          <target state="translated">주어진 MBeanServer가 사용하는 클래스 로더 저장소</target>
        </trans-unit>
        <trans-unit id="004f0206b3d3d849c825f918d9b68ef429b3b940" translate="yes" xml:space="preserve">
          <source>The Class object for the bean's customizer. This may be null if the bean doesn't have a customizer.</source>
          <target state="translated">Bean 커 스터 마이저의 Class 객체. Bean에 사용자 정의 프로그램이없는 경우 널이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="537754527d3370203382836d7cb800a91b8ee729" translate="yes" xml:space="preserve">
          <source>The Class object for the bean.</source>
          <target state="translated">Bean의 클래스 오브젝트</target>
        </trans-unit>
        <trans-unit id="df1481dabe3eac178ff1405ee9b4259ce1e6e7a5" translate="yes" xml:space="preserve">
          <source>The Class object for the target interface that will get invoked when the event is fired.</source>
          <target state="translated">이벤트가 시작될 때 호출 될 대상 인터페이스의 Class 객체입니다.</target>
        </trans-unit>
        <trans-unit id="7eac5b9958cd8cfff4271334618aee040eeba806" translate="yes" xml:space="preserve">
          <source>The Class object representing the primitive type boolean.</source>
          <target state="translated">프리미티브 유형의 부울을 나타내는 Class 객체입니다.</target>
        </trans-unit>
        <trans-unit id="d40630063d92d99c85238befefd749074cac2197" translate="yes" xml:space="preserve">
          <source>The ClassLoader used for that MBean. If &lt;var&gt;l&lt;/var&gt; is the MBean's actual ClassLoader, and &lt;var&gt;r&lt;/var&gt; is the returned value, then either:</source>
          <target state="translated">해당 MBean에 사용되는 ClassLoader 경우 &lt;var&gt;l&lt;/var&gt; MBean에의 실제 클래스 로더이고, &lt;var&gt;r&lt;/var&gt; 은 다음 중 반환 된 값입니다 :</target>
        </trans-unit>
        <trans-unit id="66051b6d430a30f6ea7fd611d6e0df14e41ad561" translate="yes" xml:space="preserve">
          <source>The ClassLoaderRepository for this MBeanServer.</source>
          <target state="translated">이 MBeanServer의 ClassLoaderRepository입니다.</target>
        </trans-unit>
        <trans-unit id="2fd3574d8c10f0ef7d993b723f5632e342d0a6ee" translate="yes" xml:space="preserve">
          <source>The CodeBase and Signedby components of the triplet name/value pairs are optional. If they are not present, then any any codebase will match, and any signer (including unsigned code) will match. For Example,</source>
          <target state="translated">삼중 항 이름 / 값 쌍의 CodeBase 및 Signedby 구성 요소는 선택 사항입니다. 존재하지 않으면 모든 코드베이스가 일치하고 서명자 (서명되지 않은 코드 포함)가 일치합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="2ced5dc3156a8a4a80da644c296c6141e4689e3c" translate="yes" xml:space="preserve">
          <source>The DTD specification is provided as Appendix A to the Java Logging APIs specification.</source>
          <target state="translated">DTD 사양은 Java Logging API 사양의 부록 A로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="c016969447ee027a7d4e0c0671983d0d54d60bd4" translate="yes" xml:space="preserve">
          <source>The Descriptor fields contributed in this way by different annotations on the same program element must be consistent. That is, two different annotations, or two members of the same annotation, must not define a different value for the same Descriptor field. Fields from annotations on a getter method must also be consistent with fields from annotations on the corresponding setter method.</source>
          <target state="translated">설명자 필드는 동일한 프로그램 요소에 대해 다른 주석으로 이러한 방식으로 기여해야합니다. 즉, 두 개의 서로 다른 주석 또는 동일한 주석의 두 구성원이 동일한 설명자 필드에 대해 다른 값을 정의해서는 안됩니다. getter 메소드의 주석 필드는 해당 setter 메소드의 주석 필드와 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="6bee60701b79c62232ecee0abd5ca5f3df40a69c" translate="yes" xml:space="preserve">
          <source>The Descriptor resulting from these annotations will be merged with any Descriptor fields provided by the implementation, such as the &lt;a href=&quot;descriptor#immutableInfo&quot;&gt;&lt;code&gt;immutableInfo&lt;/code&gt;&lt;/a&gt; field for an MBean. The fields from the annotations must be consistent with these fields provided by the implementation.</source>
          <target state="translated">이러한 주석의 결과 인 Descriptor 는 MBean 의 &lt;a href=&quot;descriptor#immutableInfo&quot;&gt; &lt;code&gt;immutableInfo&lt;/code&gt; &lt;/a&gt; 필드 와 같이 구현에서 제공 한 모든 Descriptor 필드와 병합됩니다 . 주석의 필드는 구현에서 제공 한 이러한 필드와 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="c9d5aea86dc06f534995783c5eed783935bbadb9" translate="yes" xml:space="preserve">
          <source>The Directory Context</source>
          <target state="translated">디렉토리 컨텍스트</target>
        </trans-unit>
        <trans-unit id="9467ddc0b1822e3f422eef8fbcd692138357cb1f" translate="yes" xml:space="preserve">
          <source>The ErrorManager's &quot;error&quot; method will be invoked if any errors occur while using this Handler.</source>
          <target state="translated">이 핸들러를 사용하는 동안 오류가 발생하면 ErrorManager의 &quot;error&quot;메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4d4c7427ed03e2196382cf762ac3a454fd9aad30" translate="yes" xml:space="preserve">
          <source>The FeatureDescriptor class is the common baseclass for PropertyDescriptor, EventSetDescriptor, and MethodDescriptor, etc.</source>
          <target state="translated">FeatureDescriptor 클래스는 PropertyDescriptor, EventSetDescriptor 및 MethodDescriptor 등의 공통 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6e02d9b92b748aa46a1fe40c56191a70c2db37b1" translate="yes" xml:space="preserve">
          <source>The ForkJoinTask class is not usually directly subclassed. Instead, you subclass one of the abstract classes that support a particular style of fork/join processing, typically &lt;a href=&quot;recursiveaction&quot;&gt;&lt;code&gt;RecursiveAction&lt;/code&gt;&lt;/a&gt; for most computations that do not return results, &lt;a href=&quot;recursivetask&quot;&gt;&lt;code&gt;RecursiveTask&lt;/code&gt;&lt;/a&gt; for those that do, and &lt;a href=&quot;countedcompleter&quot;&gt;&lt;code&gt;CountedCompleter&lt;/code&gt;&lt;/a&gt; for those in which completed actions trigger other actions. Normally, a concrete ForkJoinTask subclass declares fields comprising its parameters, established in a constructor, and then defines a &lt;code&gt;compute&lt;/code&gt; method that somehow uses the control methods supplied by this base class.</source>
          <target state="translated">ForkJoinTask 클래스는 일반적으로 직접 서브 클래스가 아닙니다. 대신, 포크의 특정 스타일을 지원하는 추상 클래스의 당신 서브 클래스 하나가 / 처리, 일반적으로 가입 &lt;a href=&quot;recursiveaction&quot;&gt; &lt;code&gt;RecursiveAction&lt;/code&gt; 을&lt;/a&gt; 결과를 반환하지 않는 대부분의 계산에, &lt;a href=&quot;recursivetask&quot;&gt; &lt;code&gt;RecursiveTask&lt;/code&gt; &lt;/a&gt; 할 것들, 그리고에 대한 &lt;a href=&quot;countedcompleter&quot;&gt; &lt;code&gt;CountedCompleter&lt;/code&gt; &lt;/a&gt; 하는 사람들을 위해이 행동이 다른 작업을 실행 완료. 일반적으로, 구체적인 ForkJoinTask 서브 클래스는 생성자에서 설정된 해당 매개 변수를 포함하는 필드를 선언 한 다음 이 기본 클래스가 제공하는 제어 메소드를 사용 하는 &lt;code&gt;compute&lt;/code&gt; 메소드 를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="b623035f5596637c9505afc931878e7c86c5b5b2" translate="yes" xml:space="preserve">
          <source>The GCM specification states that &lt;code&gt;tLen&lt;/code&gt; may only have the values {128, 120, 112, 104, 96}, or {64, 32} for certain applications. Other values can be specified for this class, but not all CSP implementations will support them.</source>
          <target state="translated">GCM 사양은 &lt;code&gt;tLen&lt;/code&gt; 이 특정 응용 프로그램에 대해 {128, 120, 112, 104, 96} 또는 {64, 32} 값만 가질 수 있다고 명시하고 있습니다. 이 클래스에 다른 값을 지정할 수 있지만 모든 CSP 구현이이를 지원하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="21c0818ef96710144df08a551d7b266882d023aa" translate="yes" xml:space="preserve">
          <source>The GIF image writer plug-in guarantees lossless writing for images which meet the following requirements:</source>
          <target state="translated">GIF 이미지 작성기 플러그인은 다음 요구 사항을 충족하는 이미지에 대한 무손실 쓰기를 보장합니다.</target>
        </trans-unit>
        <trans-unit id="69631d7c8bd6040a091b247bf1496d5ed878fb6f" translate="yes" xml:space="preserve">
          <source>The GIF image writer plug-in supports setting output stream metadata from metadata supplied to the writer in either the native GIF stream metadata format  javax_imageio_gif_stream_1.0  or the standard metadata format  javax_imageio_1.0, and setting output image metadata from metadata supplied to the writer in either the native GIF image metadata format  javax_imageio_gif_image_1.0  or the standard metadata format javax_imageio_1.0. The mapping of standard metadata format to the GIF native stream and image metadata formats is given in the tables  here .</source>
          <target state="translated">GIF 이미지 작성기 플러그인은 기본 GIF 스트림 메타 데이터 형식 javax_imageio_gif_stream_1.0 또는 표준 메타 데이터 형식 javax_imageio_1.0에서 작성기에 제공되는 메타 데이터의 출력 스트림 메타 데이터 설정을 지원합니다. 기본 GIF 이미지 메타 데이터 형식 javax_imageio_gif_image_1.0 또는 표준 메타 데이터 형식 javax_imageio_1.0 중 하나입니다. 표준 메타 데이터 형식을 GIF 기본 스트림 및 이미지 메타 데이터 형식으로 매핑하는 방법은 여기 표에 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="5fe47dfc42c1004ae9afdedd5c749c38a37ee470" translate="yes" xml:space="preserve">
          <source>The GIF writer plug-in supports the creation of animated GIF images through the standard sequence writing methods defined in the &lt;code&gt;ImageWriter&lt;/code&gt; class.</source>
          <target state="translated">GIF 작성기 플러그인은 &lt;code&gt;ImageWriter&lt;/code&gt; 클래스에 정의 된 표준 시퀀스 작성 방법을 통해 애니메이션 GIF 이미지 작성을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="7c0eb54612e1b91b3d550046715cc18734cac067" translate="yes" xml:space="preserve">
          <source>The Generated annotation is used to mark source code that has been generated.</source>
          <target state="translated">생성 된 주석은 생성 된 소스 코드를 표시하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e14d8067e3c65f5d662592905874e96a639ba661" translate="yes" xml:space="preserve">
          <source>The Generated annotation is used to mark source code that has been generated. It can also be used to differentiate user written code from generated code in a single file. When used, the value element must have the name of the code generator. The recommended convention is to use the fully qualified name of the code generator in the value field .</source>
          <target state="translated">생성 된 주석은 생성 된 소스 코드를 표시하는 데 사용됩니다. 또한 사용자가 작성한 코드와 생성 된 코드를 단일 파일로 구별하는 데 사용할 수 있습니다. 사용될 때 value 요소는 코드 생성기의 이름을 가져야합니다. 권장되는 규칙은 값 필드에 완전한 코드 생성기 이름을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="034f52c179ed2f285aff346a1a725164486ab642" translate="yes" xml:space="preserve">
          <source>The HTTP cookie management in java.net package looks like:</source>
          <target state="translated">java.net 패키지의 HTTP 쿠키 관리는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b3a512be37bd12625c3a8628efd22b37676aac1" translate="yes" xml:space="preserve">
          <source>The HTTP method (GET,POST,PUT,etc.).</source>
          <target state="translated">HTTP 메소드 (GET, POST, PUT 등)</target>
        </trans-unit>
        <trans-unit id="2d94af71e4f20cb6dbee51f81cf708d34fd43e9a" translate="yes" xml:space="preserve">
          <source>The HTTP protocol handler has a few settings that can be accessed through System Properties. This covers Proxy settings as well as  various other settings.</source>
          <target state="translated">HTTP 프로토콜 핸들러에는 시스템 속성을 통해 액세스 할 수있는 몇 가지 설정이 있습니다. 여기에는 프록시 설정 및 기타 다양한 설정이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="0965d22a7cf7456f138f50ade9b626d2ce1a8ce8" translate="yes" xml:space="preserve">
          <source>The HTTP response message.</source>
          <target state="translated">HTTP 응답 메시지</target>
        </trans-unit>
        <trans-unit id="76c37afd4ebfca43ecc7113a9e735aed8c4a4c59" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar has a different total of days in a year than Gregorian calendar, and the length of each month is based on the period of a complete revolution of the moon around the earth (as between successive new moons). Refer to the &lt;a href=&quot;hijrahchronology&quot;&gt;&lt;code&gt;HijrahChronology&lt;/code&gt;&lt;/a&gt; for details of supported variants.</source>
          <target state="translated">히즈라 달력은 그레고리력과는 달리 일 년에 총 일수가 다르며, 매월의 길이는 지구 주위의 달이 완전히 혁명적 인 기간 (연속적인 새 달 사이)에 기초합니다. 지원되는 변형에 대한 자세한 내용은 &lt;a href=&quot;hijrahchronology&quot;&gt; &lt;code&gt;HijrahChronology&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cbb0a5265ed2b32362a56646ea33dae11e8ddd1" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar is a lunar calendar supporting Islamic calendars.</source>
          <target state="translated">Hijrah 달력은 이슬람 달력을 지원하는 음력입니다.</target>
        </trans-unit>
        <trans-unit id="5ef062b6d3746a7faa9fd4ff82681d5f88437d55" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar system has one era, 'AH', defined by &lt;a href=&quot;hijrahera&quot;&gt;&lt;code&gt;HijrahEra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Hijrah 달력 시스템에는 &lt;a href=&quot;hijrahera&quot;&gt; &lt;code&gt;HijrahEra&lt;/code&gt; 에&lt;/a&gt; 의해 정의 된 'AH'시대가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e597c41e9fa5f54ee9b2548de5fc25d85b9400b7" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar system has only one era covering the proleptic years greater than zero.</source>
          <target state="translated">Hijrah 달력 시스템은 0보다 큰 발화 년을 다루는 시대가 단 하나뿐입니다.</target>
        </trans-unit>
        <trans-unit id="8c7bf054691c4990879f32b517b7eb5c7c8f7c31" translate="yes" xml:space="preserve">
          <source>The Hijrah property resource is a set of properties that describe the calendar. The syntax is defined by &lt;code&gt;java.util.Properties#load(Reader)&lt;/code&gt;.</source>
          <target state="translated">Hijrah 속성 리소스는 달력을 설명하는 속성 집합입니다. 구문은 &lt;code&gt;java.util.Properties#load(Reader)&lt;/code&gt; 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="2d5f51089d0f9a89148d7f6f56fbc17a08c3c7dd" translate="yes" xml:space="preserve">
          <source>The HijrahChronology follows the rules of the Hijrah calendar system. The Hijrah calendar has several variants based on differences in when the new moon is determined to have occurred and where the observation is made. In some variants the length of each month is computed algorithmically from the astronomical data for the moon and earth and in others the length of the month is determined by an authorized sighting of the new moon. For the algorithmically based calendars the calendar can project into the future. For sighting based calendars only historical data from past sightings is available.</source>
          <target state="translated">HijrahChronology는 Hijrah 일정 시스템의 규칙을 따릅니다. Hijrah 달력에는 초승달이 발생한 것으로 판단 된 시점과 관측 지점의 차이에 따라 여러 가지 변형이 있습니다. 어떤 변형에서, 달과 지구에 대한 천문학적 데이터로부터 각 달의 길이는 알고리즘에 의해 계산되고, 다른 달에서 달의 길이는 승인 된 초승달 관찰에 의해 결정된다. 알고리즘 기반 캘린더의 경우 캘린더는 미래로 투사 할 수 있습니다. 시력 기반 달력의 경우 과거 시력의 과거 데이터 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b30101cf2f801668711691b72956c848b7ff79c7" translate="yes" xml:space="preserve">
          <source>The IANA charset registry does change over time, and so the canonical name and the aliases of a particular charset may also change over time. To ensure compatibility it is recommended that no alias ever be removed from a charset, and that if the canonical name of a charset is changed then its previous canonical name be made into an alias.</source>
          <target state="translated">IANA 문자 집합 레지스트리는 시간이 지남에 따라 변경되므로 특정 문자 집합의 정식 이름과 별칭도 시간이 지남에 따라 변경 될 수 있습니다. 호환성을 보장하기 위해 문자 집합에서 별칭을 제거하지 말고 문자 집합의 정식 이름을 변경하면 이전 정식 이름을 별칭으로 만드는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a09a7c491e42ec0ccd6087606b59441de1f0715c" translate="yes" xml:space="preserve">
          <source>The ID is minor variation to the standard ISO-8601 formatted string for the offset. There are three formats:</source>
          <target state="translated">ID는 오프셋에 대한 표준 ISO-8601 형식 문자열과 약간 다릅니다. 세 가지 형식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d29cb73c296776b288211b97e00b807749e9b2d0" translate="yes" xml:space="preserve">
          <source>The ID is unique within the system. There are three types of ID.</source>
          <target state="translated">ID는 시스템 내에서 고유합니다. ID에는 세 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae854760d3f4276cd755511e493cc5a51b830e12" translate="yes" xml:space="preserve">
          <source>The ID of the listener to which the notification is targeted.</source>
          <target state="translated">알림의 대상이되는 리스너의 ID입니다.</target>
        </trans-unit>
        <trans-unit id="61fd4732cbe2e01752b6c8cf6a30f14f6ab40119" translate="yes" xml:space="preserve">
          <source>The ID of the returned offset will be normalized to one of the formats described by &lt;a href=&quot;zoneoffset#getId--&quot;&gt;&lt;code&gt;getId()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">리턴 된 오프셋의 ID는 &lt;a href=&quot;zoneoffset#getId--&quot;&gt; &lt;code&gt;getId()&lt;/code&gt; &lt;/a&gt; 설명 된 형식 중 하나로 정규화됩니다 .</target>
        </trans-unit>
        <trans-unit id="7c8cb46fd48547fa630e300fcba11829a98c4159" translate="yes" xml:space="preserve">
          <source>The ID of the thread that owns the object that the thread is blocked.</source>
          <target state="translated">스레드가 차단 된 오브젝트를 소유 한 스레드의 ID입니다.</target>
        </trans-unit>
        <trans-unit id="fd6d60e60fa86ec5a78289385fee6d0f6bc1bdd6" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt;&lt;code&gt;Chronology.of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ID는 &lt;code&gt;Chronology&lt;/code&gt; 고유하게 식별합니다 . 이는 조회하는데 사용될 수있다 &lt;code&gt;Chronology&lt;/code&gt; 사용 &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt; &lt;code&gt;Chronology.of(String)&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1cafcec37d18d1f40c55857c337e84b388be6a4b" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt;&lt;code&gt;of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ID는 &lt;code&gt;Chronology&lt;/code&gt; 고유하게 식별합니다 . &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt; &lt;code&gt;of(String)&lt;/code&gt; &lt;/a&gt; 사용 하여 &lt;code&gt;Chronology&lt;/code&gt; 를 조회하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eec3d7c57ef5447e9bdebab954ee90700a2a652d" translate="yes" xml:space="preserve">
          <source>The IP address of the remote end of this socket.</source>
          <target state="translated">이 소켓의 리모트 엔드의 IP 주소</target>
        </trans-unit>
        <trans-unit id="510660eb55dda01e452a05872bd22f9cfe584483" translate="yes" xml:space="preserve">
          <source>The IPv6-address is a literal IPv6 address as described above. The</source>
          <target state="translated">IPv6- 주소는 위에서 설명한 리터럴 IPv6 주소입니다. 그만큼</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
