<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="7b714ebd6de634fdba1f86515ab4bd0e35c46a23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDragEvent&lt;/code&gt; is delivered from the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;, via the &lt;code&gt;DragSourceContext&lt;/code&gt;, to the &lt;code&gt;DragSourceListener&lt;/code&gt; registered with that &lt;code&gt;DragSourceContext&lt;/code&gt; and with its associated &lt;code&gt;DragSource&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DragSourceDragEvent&lt;/code&gt; 에이 로부터 전달 &lt;code&gt;DragSourceContextPeer&lt;/code&gt; 를 비아, &lt;code&gt;DragSourceContext&lt;/code&gt; 의 사람, &lt;code&gt;DragSourceListener&lt;/code&gt; 를는 해당 등록 &lt;code&gt;DragSourceContext&lt;/code&gt; 와 함께 관련 &lt;code&gt;DragSource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d31b1878f6e04bbd66b12f6d210c8503298cea5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDragEvent&lt;/code&gt; reports the</source>
          <target state="translated">&lt;code&gt;DragSourceDragEvent&lt;/code&gt; 에는 를보고</target>
        </trans-unit>
        <trans-unit id="ac52ab45dff423a52b65a99453d257e77b17e615" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDropEvent&lt;/code&gt; is delivered from the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;, via the &lt;code&gt;DragSourceContext&lt;/code&gt;, to the &lt;code&gt;dragDropEnd&lt;/code&gt; method of &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with that &lt;code&gt;DragSourceContext&lt;/code&gt; and with its associated &lt;code&gt;DragSource&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DragSourceDropEvent&lt;/code&gt; 로부터 전달 &lt;code&gt;DragSourceContextPeer&lt;/code&gt; 를 비아, &lt;code&gt;DragSourceContext&lt;/code&gt; 의 사람, &lt;code&gt;dragDropEnd&lt;/code&gt; 방법 &lt;code&gt;DragSourceListener&lt;/code&gt; 를 그 등록의 &lt;code&gt;DragSourceContext&lt;/code&gt; 에 그와 연관된 &lt;code&gt;DragSource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e677218ceda78bbf903d55fdd8613920724c58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDropEvent&lt;/code&gt; is delivered from the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;, via the &lt;code&gt;DragSourceContext&lt;/code&gt;, to the &lt;code&gt;dragDropEnd&lt;/code&gt; method of &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with that &lt;code&gt;DragSourceContext&lt;/code&gt; and with its associated &lt;code&gt;DragSource&lt;/code&gt;. It contains sufficient information for the originator of the operation to provide appropriate feedback to the end user when the operation completes.</source>
          <target state="translated">&lt;code&gt;DragSourceDropEvent&lt;/code&gt; 로부터 전달 &lt;code&gt;DragSourceContextPeer&lt;/code&gt; 를 비아, &lt;code&gt;DragSourceContext&lt;/code&gt; 의 사람, &lt;code&gt;dragDropEnd&lt;/code&gt; 방법 &lt;code&gt;DragSourceListener&lt;/code&gt; 를 그 등록의 &lt;code&gt;DragSourceContext&lt;/code&gt; 의 그것과 연관된 &lt;code&gt;DragSource&lt;/code&gt; . 여기에는 작업이 완료 될 때 최종 사용자에게 적절한 피드백을 제공하기 위해 작업 작성자에게 충분한 정보가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9e3418fc8cdd49330b7f79abdc8904fb8722d38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceListener&lt;/code&gt; defines the event interface for originators of Drag and Drop operations to track the state of the user's gesture, and to provide appropriate &quot;drag over&quot; feedback to the user throughout the Drag and Drop operation.</source>
          <target state="translated">&lt;code&gt;DragSourceListener&lt;/code&gt; 를 사용자의 동작의 상태를 추적하고, 드래그 앤 드롭 동작에 걸쳐 사용자에게 적절한 피드백 &quot;위에 드래그&quot;를 제공하기 위해, 드래그 &amp;amp; 드롭 조작에 대한 이벤트 인터페이스를 정의한다.</target>
        </trans-unit>
        <trans-unit id="2f2d9115dd61845a24deb87877d315f3a9e4f165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTarget&lt;/code&gt; is associated with a &lt;code&gt;Component&lt;/code&gt; when that &lt;code&gt;Component&lt;/code&gt; wishes to accept drops during Drag and Drop operations.</source>
          <target state="translated">&lt;code&gt;DropTarget&lt;/code&gt; 와 관련된 &lt;code&gt;Component&lt;/code&gt; 때 &lt;code&gt;Component&lt;/code&gt; 드래그 &amp;amp; 드롭 조작시 드롭을 받아들이려고.</target>
        </trans-unit>
        <trans-unit id="fc9ceb54981fdaa5275f1c3158775b7713926c80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetContext&lt;/code&gt; associated with this &lt;code&gt;DropTargetEvent&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;DropTargetContext&lt;/code&gt; 관련된 &lt;code&gt;DropTargetEvent&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3ffbaf633173a302e98991243b9280a1d21067be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDragEvent&lt;/code&gt; is delivered to a &lt;code&gt;DropTargetListener&lt;/code&gt; via its dragEnter() and dragOver() methods.</source>
          <target state="translated">&lt;code&gt;DropTargetDragEvent&lt;/code&gt; 에은 (A)에 전달 &lt;code&gt;DropTargetListener&lt;/code&gt; 그것의 dragEnter () 메소드 및 dragOver () 메소드를 통해.</target>
        </trans-unit>
        <trans-unit id="7ca6b065fdcfefbc58d586632c9621c6336c3140" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDragEvent&lt;/code&gt; reports the</source>
          <target state="translated">&lt;code&gt;DropTargetDragEvent&lt;/code&gt; 에는 를보고</target>
        </trans-unit>
        <trans-unit id="8cd604ebcf28e38aaec8a020404fd0ed59cb3f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDropEvent&lt;/code&gt; is delivered via the &lt;code&gt;DropTargetListener&lt;/code&gt; drop() method.</source>
          <target state="translated">&lt;code&gt;DropTargetDropEvent&lt;/code&gt; 비아 전달 &lt;code&gt;DropTargetListener&lt;/code&gt; 강하 () 메소드.</target>
        </trans-unit>
        <trans-unit id="a7b814023f405a37ab935e9af73364cf929626ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDropEvent&lt;/code&gt; reports the</source>
          <target state="translated">&lt;code&gt;DropTargetDropEvent&lt;/code&gt; 를보고</target>
        </trans-unit>
        <trans-unit id="777f975ce845ccbaea28145926d0360d15d674cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetEvent&lt;/code&gt; is the base class for both the &lt;code&gt;DropTargetDragEvent&lt;/code&gt; and the &lt;code&gt;DropTargetDropEvent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DropTargetEvent&lt;/code&gt; 에는 양쪽의 기본 클래스입니다 &lt;code&gt;DropTargetDragEvent&lt;/code&gt; 에 와 &lt;code&gt;DropTargetDropEvent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c3d2978f393b9a45819d66b22c6fef1c3b101b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetEvent&lt;/code&gt; is the base class for both the &lt;code&gt;DropTargetDragEvent&lt;/code&gt; and the &lt;code&gt;DropTargetDropEvent&lt;/code&gt;. It encapsulates the current state of the Drag and Drop operations, in particular the current &lt;code&gt;DropTargetContext&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DropTargetEvent&lt;/code&gt; 에는 양쪽의 기본 클래스입니다 &lt;code&gt;DropTargetDragEvent&lt;/code&gt; 에 와 &lt;code&gt;DropTargetDropEvent&lt;/code&gt; . 드래그 앤 드롭 작업의 현재 상태, 특히 현재 &lt;code&gt;DropTargetContext&lt;/code&gt; 를 캡슐화합니다 .</target>
        </trans-unit>
        <trans-unit id="d6f8032621bbb9de280649cd020af9e49c6c9b9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetListener&lt;/code&gt; interface is the callback interface used by the &lt;code&gt;DropTarget&lt;/code&gt; class to provide notification of DnD operations that involve the subject &lt;code&gt;DropTarget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DropTargetListener&lt;/code&gt; 인터페이스는 사용하는 콜백 인터페이스입니다 &lt;code&gt;DropTarget&lt;/code&gt; 는 대상 포함 DnD 조작의 통지를 제공하는 클래스 &lt;code&gt;DropTarget&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="f1ad4dc5e388ca41872cef2cc6ae867a25a15ca6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetListener&lt;/code&gt; interface is the callback interface used by the &lt;code&gt;DropTarget&lt;/code&gt; class to provide notification of DnD operations that involve the subject &lt;code&gt;DropTarget&lt;/code&gt;. Methods of this interface may be implemented to provide &quot;drag under&quot; visual feedback to the user throughout the Drag and Drop operation.</source>
          <target state="translated">&lt;code&gt;DropTargetListener&lt;/code&gt; 인터페이스는 사용하는 콜백 인터페이스입니다 &lt;code&gt;DropTarget&lt;/code&gt; 는 주제를 포함한 DnD 조작의 통지를 제공하는 클래스 &lt;code&gt;DropTarget&lt;/code&gt; 에 . 이 인터페이스의 메서드는 끌어서 놓기 작업을 통해 사용자에게 시각적 인 &quot;드래그&quot;피드백을 제공하도록 구현 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3b11f7c76e4ccfcb4d3d6f6066f5eb2401835a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DynamicLinker&lt;/code&gt; objects created by &lt;code&gt;DynamicLinkerFactory&lt;/code&gt; by default contain an internal instance of &lt;code&gt;BeansLinker&lt;/code&gt;, which is a language-specific linker that implements the usual Java semantics for all of the above operations and can link any Java object that no other language-specific linker has managed to link. This way, all language runtimes have built-in interoperability with ordinary Java objects. See &lt;a href=&quot;jdk/dynalink/beans/beanslinker&quot;&gt;&lt;code&gt;BeansLinker&lt;/code&gt;&lt;/a&gt; for details on how it links the various operations.</source>
          <target state="translated">&lt;code&gt;DynamicLinker&lt;/code&gt; 이 만든 개체 &lt;code&gt;DynamicLinkerFactory&lt;/code&gt; 의 내부 인스턴스를 포함 기본적으로 &lt;code&gt;BeansLinker&lt;/code&gt; 언어 별 링커는, 그 구현 일반적인 자바 위의 모든 작업에 대한 의미와 다른 언어 별 링커에 관리되지 것을 자바 객체를 연결할 수 있습니다 링크. 이러한 방식으로 모든 언어 런타임은 일반 Java 객체와의 상호 운용성을 기본적으로 갖 춥니 다. ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 다양한 작업을 연결하는 방법에 대한 자세한 내용 은 &lt;a href=&quot;jdk/dynalink/beans/beanslinker&quot;&gt; &lt;code&gt;BeansLinker&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd923e66451c09da1d3d4e1f6626a2df5c8337ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptContext&lt;/code&gt; contains the bindings of scripting variables to application objects to be used during this script execution.</source>
          <target state="translated">&lt;code&gt;ENGINE_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; 의 &lt;code&gt;ScriptContext&lt;/code&gt; 응용 프로그램 개체에 대한 스크립트 변수의 바인딩이 스크립트의 실행 중에 사용되는 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ac2a2597218d88488760abbe3572d583515c44b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERA&lt;/code&gt; field returns a range for the one valid Hijrah era.</source>
          <target state="translated">&lt;code&gt;ERA&lt;/code&gt; 의 필드는 하나의 유효한 신정 시대의 범위를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1a7ce34ce162da4ee98566ed04babff39297325b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; interface represents an element in an HTML or XML document.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; 인터페이스는 HTML 또는 XML 문서 의 요소 를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="56f8e7cbe7fedd44e71cad4abca86307c32d940a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; interface represents an element in an HTML or XML document. Elements may have attributes associated with them; since the &lt;code&gt;Element&lt;/code&gt; interface inherits from &lt;code&gt;Node&lt;/code&gt;, the generic &lt;code&gt;Node&lt;/code&gt; interface attribute &lt;code&gt;attributes&lt;/code&gt; may be used to retrieve the set of all attributes for an element. There are methods on the &lt;code&gt;Element&lt;/code&gt; interface to retrieve either an &lt;code&gt;Attr&lt;/code&gt; object by name or an attribute value by name. In XML, where an attribute value may contain entity references, an &lt;code&gt;Attr&lt;/code&gt; object should be retrieved to examine the possibly fairly complex sub-tree representing the attribute value. On the other hand, in HTML, where all attributes have simple string values, methods to directly access an attribute value can safely be used as a convenience.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; 인터페이스는 HTML 또는 XML 문서 의 요소 를 나타냅니다. 요소에는 연관된 속성이있을 수 있습니다. &lt;code&gt;Element&lt;/code&gt; 인터페이스는 &lt;code&gt;Node&lt;/code&gt; 에서 상속 되기 때문에 일반 &lt;code&gt;Node&lt;/code&gt; 인터페이스 속성 &lt;code&gt;attributes&lt;/code&gt; 사용하여 요소에 대한 모든 속성 집합을 검색 할 수 있습니다. &lt;code&gt;Element&lt;/code&gt; 인터페이스 에는 이름으로 &lt;code&gt;Attr&lt;/code&gt; 객체 를 검색하거나 이름으로 속성 값 을 검색 하는 메서드가 있습니다 . 속성 값에 엔티티 참조가 포함될 수있는 XML에서 &lt;code&gt;Attr&lt;/code&gt; 속성 값을 나타내는 상당히 복잡한 하위 트리를 검사하려면 개체를 검색해야합니다. 반면에 모든 속성이 단순한 문자열 값을 갖는 HTML에서는 속성 값에 직접 접근하는 메소드를 편리하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="062646a7a70bae8b386d004ed0c24a7f5febaa0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; node this attribute is attached to or &lt;code&gt;null&lt;/code&gt; if this attribute is not in use.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; 노드는이 속성 또는 부착 &lt;code&gt;null&lt;/code&gt; 이 속성은 사용되지 않을 경우.</target>
        </trans-unit>
        <trans-unit id="84d456059a3ae70710ff77987c83f5d3565185be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; on which the namespace was in scope when it was requested.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; 가 요청 될 때 된 네임 스페이스 범위에 있었다.</target>
        </trans-unit>
        <trans-unit id="1ae505cc529eebac866deb17686d9f4d77dd8e63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; on which the namespace was in scope when it was requested. This does not change on a returned namespace node even if the document changes such that the namespace goes out of scope on that element and this node is no longer found there by XPath.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; 가 요청 될 때 된 네임 스페이스 범위에 있었다. 이는 문서가 변경되어 네임 스페이스가 해당 요소의 범위를 벗어나고이 노드가 더 이상 XPath에서 찾을 수 없도록 변경 되더라도 반환 된 네임 스페이스 노드에서 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="43f6c56600834b8ccf7f7093afce844b3f3f5fe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ElementIterator&lt;/code&gt; does no locking of the &lt;code&gt;Element&lt;/code&gt; tree. This means that it does not track any changes. It is the responsibility of the user of this class, to ensure that no changes happen during element iteration.</source>
          <target state="translated">&lt;code&gt;ElementIterator&lt;/code&gt; 더의 잠금하지 않는 &lt;code&gt;Element&lt;/code&gt; 트리. 이는 변경 사항을 추적하지 않음을 의미합니다. 요소 반복 중에 변경이 발생하지 않도록하는 것은이 클래스의 사용자의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="aa0fc8a45db77f0c824cdd5135e6bc6d602e48de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ElementTraversal&lt;/code&gt; interface is a set of read-only attributes which allow an author to easily navigate between elements in a document.</source>
          <target state="translated">&lt;code&gt;ElementTraversal&lt;/code&gt; 의 인터페이스는 문서 내의 요소들 사이에 쉽게 탐색 저자 가능 판독 전용 속성의 집합이다.</target>
        </trans-unit>
        <trans-unit id="f29a430f06dd21d9a13b377efef42edf2992728c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ellipse2D&lt;/code&gt; class describes an ellipse that is defined by a framing rectangle.</source>
          <target state="translated">&lt;code&gt;Ellipse2D&lt;/code&gt; 클래스는 구형에 의해 정의되는 타원을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="0000711917ddc5bd5d5eb440dd34fe945066b5e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class is static, so that all &lt;code&gt;AudioFormat&lt;/code&gt; objects that have the same encoding will refer to the same object (rather than different instances of the same class). This allows matches to be made by checking that two format's encodings are equal.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 클래스는 모든 그래서, 정적 &lt;code&gt;AudioFormat&lt;/code&gt; 을 된 동일한 인코딩이 물체 (오히려 동일한 클래스의 다른 인스턴스 이하) 같은 객체를 참조한다. 이를 통해 두 형식의 인코딩이 동일한 지 확인하여 일치시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a1ea0fb7e3f89b73df59f57bc0a3bb25057d04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 클래스는 오디오 스트림에 사용되는 데이터 표현의 특정 유형입니다.</target>
        </trans-unit>
        <trans-unit id="579a96ad9bfb2cbe0dbb67099e0bc3e08f52c25e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream. The encoding includes aspects of the sound format other than the number of channels, sample rate, sample size, frame rate, frame size, and byte order.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 클래스는 오디오 스트림에 사용되는 데이터 표현의 특정 유형입니다. 인코딩에는 채널 수, 샘플 속도, 샘플 크기, 프레임 속도, 프레임 크기 및 바이트 순서 이외의 사운드 형식 측면이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="70221ca9234977d1998bbe35ce71cb299b70251c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event&lt;/code&gt; interface is used to provide contextual information about an event to the handler processing the event.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 인터페이스는 이벤트를 처리하는 이벤트 핸들러에 대한 컨텍스트 정보를 제공하는데 사용된다.</target>
        </trans-unit>
        <trans-unit id="ee720903ce1589882e864971326a615e0265b5cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event&lt;/code&gt; interface is used to provide contextual information about an event to the handler processing the event. An object which implements the &lt;code&gt;Event&lt;/code&gt; interface is generally passed as the first parameter to an event handler. More specific context information is passed to event handlers by deriving additional interfaces from &lt;code&gt;Event&lt;/code&gt; which contain information directly relating to the type of event they accompany. These derived interfaces are also implemented by the object passed to the event listener.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; 인터페이스는 이벤트를 처리하는 이벤트 핸들러에 대한 컨텍스트 정보를 제공하는데 사용된다. &lt;code&gt;Event&lt;/code&gt; 인터페이스 를 구현하는 객체 는 일반적으로 이벤트 핸들러에 첫 번째 매개 변수로 전달됩니다. 더 구체적인 컨텍스트 정보는 &lt;code&gt;Event&lt;/code&gt; 가 수반되는 이벤트 유형과 직접 관련된 정보를 포함 하는 추가 인터페이스를 이벤트 에서 파생시켜 이벤트 핸들러로 전달됩니다 . 이러한 파생 인터페이스는 이벤트 리스너에 전달 된 객체에 의해 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="c57bc9aa7ce02ee33576a9afbd97413544332913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventContext&lt;/code&gt; instance on which you invoke the registration methods is the &lt;em&gt;event source&lt;/em&gt; of the events that are (potentially) generated. The source is &lt;em&gt;not necessarily&lt;/em&gt; the object named by the target. Only when the target is the empty name is the object named by the target the source. In other words, the target, along with the scope parameter, are used to identify the object(s) that the listener is interested in, but the event source is the &lt;code&gt;EventContext&lt;/code&gt; instance with which the listener has registered.</source>
          <target state="translated">&lt;code&gt;EventContext&lt;/code&gt; 당신이 등록 메소드를 호출하는 인스턴스입니다 &lt;em&gt;이벤트 소스&lt;/em&gt; (잠재적으로) 생성되는 이벤트. 소스는 &lt;em&gt;반드시&lt;/em&gt; 대상에 의해 명명 된 오브젝트 일 &lt;em&gt;필요&lt;/em&gt; 는 &lt;em&gt;없습니다&lt;/em&gt; . 대상이 빈 이름 인 경우에만 대상이 소스로 명명 한 오브젝트입니다. 다시 말해, 대상은 scope 매개 변수와 함께 리스너가 관심있는 객체를 식별하는 데 사용되지만 이벤트 소스는 리스너가 등록한 &lt;code&gt;EventContext&lt;/code&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="0401b3ef0ddcd75a11b4100c749b173a19fed9a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class is intended to be used by interactive tools, such as application builders, that allow developers to make connections between beans. Typically connections are made from a user interface bean (the event &lt;em&gt;source&lt;/em&gt;) to an application logic bean (the &lt;em&gt;target&lt;/em&gt;). The most effective connections of this kind isolate the application logic from the user interface. For example, the &lt;code&gt;EventHandler&lt;/code&gt; for a connection from a &lt;code&gt;JCheckBox&lt;/code&gt; to a method that accepts a boolean value can deal with extracting the state of the check box and passing it directly to the method so that the method is isolated from the user interface layer.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; 클래스는 개발자가 Bean 간의 접속을 확립하기 위해서 애플리케이션 빌더와 같은 대화 형 툴로 사용하기위한 것입니다. 일반적으로 사용자 인터페이스 Bean (이벤트 &lt;em&gt;소스&lt;/em&gt; )에서 애플리케이션 로직 Bean ( &lt;em&gt;대상&lt;/em&gt; )으로 연결됩니다. 이러한 종류의 가장 효과적인 연결은 응용 프로그램 논리를 사용자 인터페이스에서 분리합니다. 예를 들어, &lt;code&gt;JCheckBox&lt;/code&gt; 에서 부울 값을 허용하는 메소드 로 연결하기위한 &lt;code&gt;EventHandler&lt;/code&gt; 는 선택란의 상태를 추출하여 메소드에 직접 전달하여 메소드가 사용자 인터페이스 계층에서 분리되도록 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="0a0c2cb5421950ae7ac855868e35820ff6dd57b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class provides support for dynamically generating event listeners whose methods execute a simple statement involving an incoming event object and a target object.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; 클래스는 동적으로 그 메소드 수신 이벤트 객체와 타겟 오브젝트를 포함한 단순한 문장을 실행하는 이벤트 리스너를 생성하기위한 지원을 제공한다.</target>
        </trans-unit>
        <trans-unit id="5746368fd39e97ecb130eef1d44079c51b10dd57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventListener&lt;/code&gt; interface is the primary method for handling events.</source>
          <target state="translated">&lt;code&gt;EventListener&lt;/code&gt; 인터페이스는 이벤트 처리의 중요한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="d5b8044a35f1030045e0fcb4786dab202a677cc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventListener&lt;/code&gt; interface is the primary method for handling events. Users implement the &lt;code&gt;EventListener&lt;/code&gt; interface and register their listener on an &lt;code&gt;EventTarget&lt;/code&gt; using the &lt;code&gt;AddEventListener&lt;/code&gt; method. The users should also remove their &lt;code&gt;EventListener&lt;/code&gt; from its &lt;code&gt;EventTarget&lt;/code&gt; after they have completed using the listener.</source>
          <target state="translated">&lt;code&gt;EventListener&lt;/code&gt; 인터페이스는 이벤트 처리의 중요한 방법입니다. 사용자는 &lt;code&gt;EventListener&lt;/code&gt; 인터페이스를 구현하고 &lt;code&gt;AddEventListener&lt;/code&gt; 메서드를 사용하여 &lt;code&gt;EventTarget&lt;/code&gt; 에 리스너를 등록합니다 . 사용자는 리스너 사용을 완료 한 후 &lt;code&gt;EventTarget&lt;/code&gt; 에서 &lt;code&gt;EventListener&lt;/code&gt; 를 제거해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3ef13e78574db68f3020a464f6de3488bb77bb37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventQueueMonitor&lt;/code&gt; class provides key core functionality for Assistive Technologies (and other system-level technologies that need some of the same things that Assistive Technology needs).</source>
          <target state="translated">&lt;code&gt;EventQueueMonitor&lt;/code&gt; 의 클래스는 (보조 기술이 필요로하는 것과 같은 몇 가지 필요하고 다른 시스템 레벨 기술) 보조 기술에 대한 주요 핵심 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="eba9a866ee0aa85057bfaa47d775f6b70445832f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventTarget&lt;/code&gt; interface is implemented by all &lt;code&gt;Nodes&lt;/code&gt; in an implementation which supports the DOM Event Model.</source>
          <target state="translated">&lt;code&gt;EventTarget&lt;/code&gt; 인터페이스는 모두에 의해 구현되는 &lt;code&gt;Nodes&lt;/code&gt; DOM 이벤트 모델을 지원하는 구현에.</target>
        </trans-unit>
        <trans-unit id="2b0f81e17db7dd6a51dcbe255542568c5bc70c5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventTarget&lt;/code&gt; interface is implemented by all &lt;code&gt;Nodes&lt;/code&gt; in an implementation which supports the DOM Event Model. Therefore, this interface can be obtained by using binding-specific casting methods on an instance of the &lt;code&gt;Node&lt;/code&gt; interface. The interface allows registration and removal of &lt;code&gt;EventListeners&lt;/code&gt; on an &lt;code&gt;EventTarget&lt;/code&gt; and dispatch of events to that &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EventTarget&lt;/code&gt; 인터페이스는 모두에 의해 구현되는 &lt;code&gt;Nodes&lt;/code&gt; DOM 이벤트 모델을 지원하는 구현에. 따라서이 인터페이스는 &lt;code&gt;Node&lt;/code&gt; 인터페이스 의 인스턴스에서 바인딩 관련 캐스팅 메서드를 사용하여 얻을 수 있습니다 . 인터페이스를 사용 하면 &lt;code&gt;EventTarget&lt;/code&gt; 에 &lt;code&gt;EventListeners&lt;/code&gt; 를 등록 및 제거 하고 해당 &lt;code&gt;EventTarget&lt;/code&gt; 에 이벤트를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18ab01a7844cde2885367a84cc967515963ae74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executable&lt;/code&gt; declaring this parameter.</source>
          <target state="translated">이 매개 변수를 선언 하는 &lt;code&gt;Executable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e179cf148b7b9faaffa085aae387466fa8e5482" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExecutionControl&lt;/code&gt; spec is the &lt;code&gt;ExecutionControlProvider&lt;/code&gt; name optionally followed by a parameter specification. The syntax of the spec is:</source>
          <target state="translated">&lt;code&gt;ExecutionControl&lt;/code&gt; 의 사양이 인 &lt;code&gt;ExecutionControlProvider&lt;/code&gt; 의 선택적 파라미터 사양 다음 이름. 사양의 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="748442734a6da04d6ba765d11eb14f744d0ff842" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executor&lt;/code&gt; implementations provided in this package implement &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt;, which is a more extensive interface. The &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; class provides an extensible thread pool implementation. The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides convenient factory methods for these Executors.</source>
          <target state="translated">&lt;code&gt;Executor&lt;/code&gt; 이 패키지로 제공 구현 구현 &lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; 를&lt;/a&gt; 보다 다양한 인터페이스이다. &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt; 클래스는 확장 가능한 thread 풀 구현을 제공합니다. &lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt; 클래스는 이러한 Executor 용의 편리 성의 높은 팩토리 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fe186b84d49128ed73233864d2f5883a88dc0260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FORM&lt;/code&gt; element encompasses behavior similar to a collection and an element.</source>
          <target state="translated">&lt;code&gt;FORM&lt;/code&gt; 의 요소는 수집 및 요소와 유사한 동작을 포함한다.</target>
        </trans-unit>
        <trans-unit id="0a5c0b1147aa12b75064b100c3d28e5fd19d2f41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FORM&lt;/code&gt; element encompasses behavior similar to a collection and an element. It provides direct access to the contained input elements as well as the attributes of the form element. See the FORM element definition in HTML 4.0.</source>
          <target state="translated">&lt;code&gt;FORM&lt;/code&gt; 의 요소는 수집 및 요소와 유사한 동작을 포함한다. 포함 된 입력 요소와 양식 요소의 속성에 대한 직접 액세스를 제공합니다. HTML 4.0의 FORM 요소 정의를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cd7831d464cae2caf35d14c49bf37dcbd50928ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileDialog&lt;/code&gt; class displays a dialog window from which the user can select a file.</source>
          <target state="translated">&lt;code&gt;FileDialog&lt;/code&gt; 클래스는 사용자가 파일을 선택할 수있는 다이얼로그 윈도우를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="104e889b683697e2a1535a79c04ec73d00af897b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; can either write to a specified file, or it can write to a rotating set of files.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 지정된 파일을 하나 쓰기, 또는 파일의 로테이션 세트에 기록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c629d1686ef85f09a631d3c6d79e16eb2130db7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, and the file count is set to one.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 파일명 패턴으로서 사용되는 것을 제외하고는 속성 (또는 디폴트 값) 파일 한계는 무제한으로 설정하고, 파일의 수는 1로 설정된다.</target>
        </trans-unit>
        <trans-unit id="1630482434078ed5febe3695c2cacb2c6ab11a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, the file count is set to one, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 파일명 패턴으로서 사용되는 것을 제외하고는 속성 (또는 디폴트 값) 파일 제한이 무제한으로 설정되어, 상기 파일의 카운트는 1로 설정되고, 추가 모드가 설정됩니다 주어진 &lt;code&gt;append&lt;/code&gt; 인수에.</target>
        </trans-unit>
        <trans-unit id="87b15897d52aed2848665ab23e99dca1351949cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 지정된 카운트 인수 파일 제한이 제한 인자로 설정 파일명 패턴으로서 사용하고, 파일 개수가 설정되어있는 것을 제외하고 속성 (또는 디폴트 값) 및 append 모드는 주어진 &lt;code&gt;append&lt;/code&gt; 인수로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="a5f603ee32e4c43503a06a42f3d23eed55051d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 패턴 인수 파일명 패턴으로서 사용되는 것을 제외하고는 속성 (또는 디폴트 값) 파일 제한은 제한 인자로 설정하고, 파일의 개수가 소정 개수의 인자로 설정된다.</target>
        </trans-unit>
        <trans-unit id="902ce54b56a8a7418be70ecf196fdc6d2abb61f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileReader&lt;/code&gt; is meant for reading streams of characters. For reading streams of raw bytes, consider using a &lt;code&gt;FileInputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FileReader&lt;/code&gt; 문자의 스트림을 읽기위한 것입니다. 원시 바이트 스트림을 읽으 &lt;code&gt;FileInputStream&lt;/code&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="5f9400ea004a66e78915fea0425d090fb09491e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileWriter&lt;/code&gt; is meant for writing streams of characters. For writing streams of raw bytes, consider using a &lt;code&gt;FileOutputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FileWriter&lt;/code&gt; 는 문자의 스트림을 쓰기위한 것입니다. 원시 바이트 스트림을 작성하려면 &lt;code&gt;FileOutputStream&lt;/code&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="531c96d389a16e6b4a111db536916683b490ba7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FilteredRowSet&lt;/code&gt; object will use this method internally while inserting new rows to a &lt;code&gt;FilteredRowSet&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;FilteredRowSet&lt;/code&gt; (A)에 새로운 행을 삽입하는 동안 객체는 내부적으로이 방법을 사용 &lt;code&gt;FilteredRowSet&lt;/code&gt; 인스턴스.</target>
        </trans-unit>
        <trans-unit id="6e9a4cae0012293bcacf3dcfa3a10773c155f830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FilteredRowSet&lt;/code&gt; range criterion can be modified by applying a new &lt;code&gt;Predicate&lt;/code&gt; object to the &lt;code&gt;FilteredRowSet&lt;/code&gt; instance at any time. This is possible if no additional references to the &lt;code&gt;FilteredRowSet&lt;/code&gt; object are detected. A new filter has an immediate effect on criterion enforcement within the &lt;code&gt;FilteredRowSet&lt;/code&gt; object, and all subsequent views and updates will be subject to similar enforcement.</source>
          <target state="translated">&lt;code&gt;FilteredRowSet&lt;/code&gt; 범위 기준은 새로운 적용하여 수정 될 수 &lt;code&gt;Predicate&lt;/code&gt; 받는 개체 &lt;code&gt;FilteredRowSet&lt;/code&gt; 언제든지 인스턴스. &lt;code&gt;FilteredRowSet&lt;/code&gt; 개체에 대한 추가 참조 가 감지되지 않으면 가능합니다. 새 필터는 &lt;code&gt;FilteredRowSet&lt;/code&gt; 개체 내에서 기준 적용에 즉각적인 영향을 미치며 모든 후속보기 및 업데이트에는 유사한 적용이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="b9c1b7599d17536940e43f4891c13c30e31a414b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatteningPathIterator&lt;/code&gt; class returns a flattened view of another &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;FlatteningPathIterator&lt;/code&gt; 의 클래스는 다른 사람의 평탄화 된 뷰를 반환 &lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt; 객체를.</target>
        </trans-unit>
        <trans-unit id="d6995963af20174a405541621459a4cf42b76b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatteningPathIterator&lt;/code&gt; class returns a flattened view of another &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object. Other &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; classes can use this class to provide flattening behavior for their paths without having to perform the interpolation calculations themselves.</source>
          <target state="translated">&lt;code&gt;FlatteningPathIterator&lt;/code&gt; 의 클래스는 다른 사람의 평탄화 된 뷰를 반환 &lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt; 객체를. 다른 &lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 클래스는이 클래스를 사용하여 보간 계산을 직접 수행 할 필요없이 경로에 대한 평면화 동작을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbd40c49bd8d9a7324ed683644da8ab0fb15dde3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a geometric path with coordinates stored in single precision floating point.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는, 좌표가 단 정밀도 부동 소수점되는 기하학적 패스를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="72f4f159165d82d4c830d239bd204365474b1049" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a point specified in float precision.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는, float 정밀도로 지정된 점을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="9b4e57310345618e93b471ecd434a01eac973c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a rectangle specified in float coordinates.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는, float 좌표로 지정되는 구형을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="9cf27054de1ce5624ddd4ab38383b55cc5d816b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a rectangle with rounded corners all specified in &lt;code&gt;float&lt;/code&gt; coordinates.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는 모든에 지정된 모서리가 둥근 사각형을 정의 &lt;code&gt;float&lt;/code&gt; 좌표를.</target>
        </trans-unit>
        <trans-unit id="35ae68551d0b26d10451461d73f146f494eb06cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines an ellipse specified in &lt;code&gt;float&lt;/code&gt; precision.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는 지정된 타원을 정의 &lt;code&gt;float&lt;/code&gt; 정밀도를.</target>
        </trans-unit>
        <trans-unit id="d9aef651c660cc7e3ebf06c721651629cdc87d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;float&lt;/code&gt; 개체에 있습니다.</target>
        </trans-unit>
        <trans-unit id="faf56435fef80020d3a74b994d56ec27fef71d7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object. An object of type &lt;code&gt;Float&lt;/code&gt; contains a single field whose type is &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;float&lt;/code&gt; 개체에 있습니다. &lt;code&gt;Float&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;float&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="ff1bf80c3497af61acd8a7e490e0a49fe5769bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; abstract class provides methods to set and get the control's current floating-point value. Other methods obtain the possible range of values and the control's resolution (the smallest increment between returned values). Some float controls allow ramping to a new value over a specified period of time. &lt;code&gt;FloatControl&lt;/code&gt; also includes methods that return string labels for the minimum, maximum, and midpoint positions of the control.</source>
          <target state="translated">그만큼 &lt;code&gt;FloatControl&lt;/code&gt; 추상 클래스 설정하고 컨트롤의 현재의 부동 소수점 값을 얻을 수있는 방법을 제공합니다. 다른 방법은 가능한 값 범위와 컨트롤의 해상도 (반환 된 값 사이의 최소 증분)를 얻습니다. 일부 플로트 컨트롤을 사용하면 지정된 시간 동안 새로운 값으로 램핑 할 수 있습니다. &lt;code&gt;FloatControl&lt;/code&gt; 에는 컨트롤 의 최소, 최대 및 중간 지점 위치에 대한 문자열 레이블을 반환하는 메서드도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cd58efa168d666747712c3d3c73a1908978fecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; class has methods to impose a maximum and minimum allowable value for gain. However, because an audio signal might already be at a high amplitude, the maximum setting does not guarantee that the signal will be undistorted when the gain is applied to it (unless the maximum is zero or negative). To avoid numeric overflow from excessively large gain settings, a gain control can implement clipping, meaning that the signal's amplitude will be limited to the maximum value representable by its audio format, instead of wrapping around.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; 클래스는 게인의 최대 허용치 및 최소 허용치를 규정하는 방법이있다. 그러나 오디오 신호의 진폭이 이미 높을 수 있으므로 최대 설정은 게인이 적용될 때 신호가 왜곡되지 않도록 보장하지 않습니다 (최대 값이 0 또는 음수가 아닌 한). 지나치게 큰 게인 설정으로 인한 숫자 오버플로를 피하기 위해 게인 컨트롤은 클리핑을 구현할 수 있습니다. 즉, 신호의 진폭이 줄 바꿈 대신 오디오 형식으로 표현할 수있는 최대 값으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="6676912d1268dcad28777c51d6a9607e35cb86ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class defines constants for the logical font names &lt;a href=&quot;../font#DIALOG&quot;&gt;&lt;code&gt;DIALOG&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../font#DIALOG_INPUT&quot;&gt;&lt;code&gt;DIALOG_INPUT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../font#SANS_SERIF&quot;&gt;&lt;code&gt;SANS_SERIF&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../font#SERIF&quot;&gt;&lt;code&gt;SERIF&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../font#MONOSPACED&quot;&gt;&lt;code&gt;MONOSPACED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; 클래스는 논리 폰트 이름에 대한 상수를 정의 &lt;a href=&quot;../font#DIALOG&quot;&gt; &lt;code&gt;DIALOG&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../font#DIALOG_INPUT&quot;&gt; &lt;code&gt;DIALOG_INPUT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../font#SANS_SERIF&quot;&gt; &lt;code&gt;SANS_SERIF&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../font#SERIF&quot;&gt; &lt;code&gt;SERIF&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../font#MONOSPACED&quot;&gt; &lt;code&gt;MONOSPACED&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fb6290e56262770962d96129f1fce82b4b1128c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class represents an instance of a font face from a collection of font faces that are present in the system resources of the host system. As examples, Arial Bold and Courier Bold Italic are font faces. There can be several &lt;code&gt;Font&lt;/code&gt; objects associated with a font face, each differing in size, style, transform and font features.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; 클래스는 호스트 시스템의 시스템 리소스에 존재하는 얼굴의 폰트 컬렉션 폰트 페이스의 인스턴스를 나타낸다. 예를 들어 Arial Bold 및 Courier Bold Italic은 글꼴입니다. 각각 크기, 스타일, 변형 및 글꼴 기능이 다른 글꼴과 관련된 여러 &lt;code&gt;Font&lt;/code&gt; 개체 가있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9cd38989c33d64ddfb0afce3f4c2fbf8d931ab29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class represents fonts, which are used to render text in a visible way.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; 클래스는 텍스트를 눈에 보이는 형태에 렌더링하는 데 사용되는 폰트를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d83ec2e9b9ceac56c5e640c82b8dd8628717bd67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class represents fonts, which are used to render text in a visible way. A font provides the information needed to map sequences of &lt;em&gt;characters&lt;/em&gt; to sequences of &lt;em&gt;glyphs&lt;/em&gt; and to render sequences of glyphs on &lt;code&gt;Graphics&lt;/code&gt; and &lt;code&gt;Component&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; 클래스는 텍스트를 눈에 보이는 형태에 렌더링하는 데 사용되는 폰트를 나타냅니다. 글꼴은 &lt;em&gt;문자&lt;/em&gt; 시퀀스를 &lt;em&gt;글리프&lt;/em&gt; 시퀀스에 매핑 하고 &lt;code&gt;Graphics&lt;/code&gt; 및 &lt;code&gt;Component&lt;/code&gt; 개체 에서 글리프 시퀀스를 렌더링하는 데 필요한 정보를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="c97092d779c669af47caf3ba85d4f1d8d8967679" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; of the &lt;code&gt;Component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; 의 &lt;code&gt;Component&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="887095c238f859e81a69ba6f7ea7c6cf2748d66d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FontMetrics&lt;/code&gt; class defines a font metrics object, which encapsulates information about the rendering of a particular font on a particular screen.</source>
          <target state="translated">&lt;code&gt;FontMetrics&lt;/code&gt; 클래스는 특정 화면에서 특정 폰트의 렌더링 정보를 캡슐화하는 폰트 메트릭 객체를 정의한다.</target>
        </trans-unit>
        <trans-unit id="44a0a28784457c11b3b91e1981ce7b99133fce43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FontRenderContext&lt;/code&gt; class is a container for the information needed to correctly measure text.</source>
          <target state="translated">&lt;code&gt;FontRenderContext&lt;/code&gt; 를의 클래스는, 텍스트의 치수를 올바르게 측정하는데 필요한 정보의 컨테이너입니다.</target>
        </trans-unit>
        <trans-unit id="c15f2020faddaf638ec2b9664b545f192fb3ea3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FontRenderContext&lt;/code&gt; class is a container for the information needed to correctly measure text. The measurement of text can vary because of rules that map outlines to pixels, and rendering hints provided by an application.</source>
          <target state="translated">&lt;code&gt;FontRenderContext&lt;/code&gt; 를의 클래스는, 텍스트의 치수를 올바르게 측정하는데 필요한 정보의 컨테이너입니다. 윤곽선을 픽셀에 매핑하는 규칙과 응용 프로그램에서 제공하는 렌더링 힌트로 인해 텍스트 측정이 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85f7d029dde3a2e7afbc7ce6cee578e8429c56f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; 가 인터페이스는 요구가 사용하는 커스텀 서식하는 것으로 모든 클래스에 의해 구현해야 &lt;code&gt;'s'&lt;/code&gt; 변환 지정자의를&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e69e235b1c0bec2bb6332f7a9e5ede6debcaf8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints:</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; 가 인터페이스는 요구가 사용하는 커스텀 서식하는 것으로 모든 클래스에 의해 구현되어야한다 &lt;code&gt;'s'&lt;/code&gt; 의 변환 지정자 &lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; . 이 인터페이스를 사용하면 임의의 개체 서식을 기본적으로 제어 할 수 있습니다. 예를 들어 다음 클래스는 플래그 및 길이 제약에 따라 주식 이름의 다른 표현을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="fdc2f6ed9da54144faf7ffc672bbd4b1c6864d1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints: &lt;code&gt;import java.nio.CharBuffer;
   import java.util.Formatter;
   import java.util.Formattable;
   import java.util.Locale;
   import static java.util.FormattableFlags.*;

  ...

   public class StockName implements Formattable {
       private String symbol, companyName, frenchCompanyName;
       public StockName(String symbol, String companyName,
                        String frenchCompanyName) {
           ...
       }

       ...

       public void formatTo(Formatter fmt, int f, int width, int precision) {
           StringBuilder sb = new StringBuilder();

           // decide form of name
           String name = companyName;
           if (fmt.locale().equals(Locale.FRANCE))
               name = frenchCompanyName;
           boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE;
           boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10);
           String out = (usesymbol ? symbol : name);

           // apply precision
           if (precision == -1 || out.length() &amp;lt; precision) {
               // write it all
               sb.append(out);
           } else {
               sb.append(out.substring(0, precision - 1)).append('*');
           }

           // apply width and justification
           int len = sb.length();
           if (len &amp;lt; width)
               for (int i = 0; i &amp;lt; width - len; i++)
                   if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY)
                       sb.append(' ');
                   else
                       sb.insert(0, ' ');

           fmt.format(sb.toString());
       }

       public String toString() {
           return String.format(&quot;%s - %s&quot;, symbol, companyName);
       }
   }
 &lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; 가 인터페이스는 요구가 사용하는 커스텀 서식하는 것으로 모든 클래스에 의해 구현해야 &lt;code&gt;'s'&lt;/code&gt; 변환 지정자의를&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; . 이 인터페이스를 사용하면 임의의 객체를 포맷하기위한 기본 제어가 가능합니다. 예를 들어, 다음 클래스는 플래그 및 길이 제약 조건에 따라 주식 이름의 다른 표현을 인쇄합니다. &lt;code&gt;import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10); String out = (usesymbol ? symbol : name); // apply precision if (precision == -1 || out.length() &amp;lt; precision) { // write it all sb.append(out); } else { sb.append(out.substring(0, precision - 1)).append('*'); } // apply width and justification int len = sb.length(); if (len &amp;lt; width) for (int i = 0; i &amp;lt; width - len; i++) if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY) sb.append(' '); else sb.insert(0, ' '); fmt.format(sb.toString()); } public String toString() { return String.format(&quot;%s - %s&quot;, symbol, companyName); } } &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ded1b8b780654793fea0795f740f95473dfc0b75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formatter&lt;/code&gt;'s &quot;tail&quot; string is written to the stream before it is closed. In addition, if the &lt;code&gt;Formatter&lt;/code&gt;'s &quot;head&quot; string has not yet been written to the stream, it will be written before the &quot;tail&quot; string.</source>
          <target state="translated">&lt;code&gt;Formatter&lt;/code&gt; 가 닫히기 전에의 &quot;꼬리&quot;문자열을 스트림에 기록됩니다. 또한, &lt;code&gt;Formatter&lt;/code&gt; 의 &quot;head&quot;문자열이 아직 스트림에 기록되지 않은 경우 &quot;tail&quot;문자열 앞에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="75cc2d6f81ad7d65874276a5e2ad49a582a87e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Future&lt;/code&gt; interface defines the &lt;a href=&quot;../../util/concurrent/future#cancel(boolean)&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; method to cancel execution. This causes all threads waiting on the result of the I/O operation to throw &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;. Whether the underlying I/O operation can be cancelled is highly implementation specific and therefore not specified. Where cancellation leaves the channel, or the entity to which it is connected, in an inconsistent state, then the channel is put into an implementation specific &lt;em&gt;error state&lt;/em&gt; that prevents further attempts to initiate I/O operations that are</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; (가) 인터페이스를 정의 &lt;a href=&quot;../../util/concurrent/future#cancel(boolean)&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt; 방법은 실행을 취소합니다. 이로 인해 I / O 작업의 결과를 기다리는 모든 스레드가 &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; &lt;/a&gt; 을 throw 합니다. 기본 I / O 작업을 취소 할 수 있는지 여부는 구현에 따라 다르므로 지정되지 않습니다. 취소가 채널 또는 연결된 엔티티를 일관되지 않은 상태로 남겨두면 채널은 다음과 같은 I / O 작업을 시작하려는 추가 시도를 방지 하는 구현 특정 &lt;em&gt;오류 상태&lt;/em&gt; 가됩니다.</target>
        </trans-unit>
        <trans-unit id="5f0017742b86bb525c52b44a372868ba47f8c805" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Future&lt;/code&gt; interface defines the &lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; method to cancel execution. This causes all threads waiting on the result of the I/O operation to throw &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;. Whether the underlying I/O operation can be cancelled is highly implementation specific and therefore not specified. Where cancellation leaves the channel, or the entity to which it is connected, in an inconsistent state, then the channel is put into an implementation specific &lt;em&gt;error state&lt;/em&gt; that prevents further attempts to initiate I/O operations that are</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; (가) 인터페이스를 정의 &lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt; 방법은 실행을 취소합니다. 이로 인해 I / O 작업 결과를 기다리는 모든 스레드가 &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; 을 발생&lt;/a&gt; 시킵니다. 기본 I / O 작업을 취소 할 수 있는지 여부는 구현에 따라 다르므로 지정하지 않았습니다. 취소가 채널 또는 연결된 엔티티를 일관성이없는 상태로 두는 경우, 채널은 구현 특정 &lt;em&gt;오류 상태&lt;/em&gt; 가되어 I / O 작업을 시작하려는 추가 시도를 방해합니다.</target>
        </trans-unit>
        <trans-unit id="3602374c96f5a5c257635205a93086c90dc41df6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GSSManager&lt;/code&gt; class has two methods that enable these modes of usage: &lt;a href=&quot;#addProviderAtFront(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt;&lt;code&gt;addProviderAtFront&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#addProviderAtEnd(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt;&lt;code&gt;addProviderAtEnd&lt;/code&gt;&lt;/a&gt;. These methods have the effect of creating an ordered list of</source>
          <target state="translated">&lt;code&gt;GSSManager&lt;/code&gt; : 클래스는 사용의이 모드를 사용하는 두 가지 방법이있다 &lt;a href=&quot;#addProviderAtFront(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt; &lt;code&gt;addProviderAtFront&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#addProviderAtEnd(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt; &lt;code&gt;addProviderAtEnd&lt;/code&gt; 을&lt;/a&gt; . 이러한 방법은 정렬 된 목록을 만드는 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="914da397f8c97202021f7ec88c5d7ecdc38f6e6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GUIInitializedListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when the GUI subsystem has been initialized.</source>
          <target state="translated">&lt;code&gt;GUIInitializedListener&lt;/code&gt; 의 인터페이스는에 의해 사용되는 &lt;a href=&quot;eventqueuemonitor&quot;&gt; &lt;code&gt;EventQueueMonitor&lt;/code&gt; 의&lt;/a&gt; GUI를 서브 시스템이 초기화 된 때 이해 당사자에게 통지하는 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="db191355d553162f7fbdc2d9663eec947a2f20d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GUIInitializedListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when the GUI subsystem has been initialized. This is necessary because assistive technologies can be loaded before the GUI subsystem is initialized. As a result, assistive technologies should check the &lt;a href=&quot;eventqueuemonitor#isGUIInitialized()&quot;&gt;&lt;code&gt;isGUIInitialized&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;EventQueueMonitor&lt;/code&gt; before creating any GUI components. If the return value is true, assistive technologies can create GUI components following the same thread restrictions as any other application. If the return value is false, the assistive technology should register a &lt;code&gt;GUIInitializedListener&lt;/code&gt; with the &lt;code&gt;EventQueueMonitor&lt;/code&gt; to be notified when the GUI subsystem is initialized.</source>
          <target state="translated">&lt;code&gt;GUIInitializedListener&lt;/code&gt; 의 인터페이스는에 의해 사용되는 &lt;a href=&quot;eventqueuemonitor&quot;&gt; &lt;code&gt;EventQueueMonitor&lt;/code&gt; 의&lt;/a&gt; GUI를 서브 시스템이 초기화 된 때 이해 당사자에게 통지하는 클래스입니다. GUI 하위 시스템이 초기화되기 전에 보조 기술을로드 할 수 있기 때문에 필요합니다. 결과적으로 보조 기술은 GUI 구성 요소를 만들기 전에 &lt;code&gt;EventQueueMonitor&lt;/code&gt; 의 &lt;a href=&quot;eventqueuemonitor#isGUIInitialized()&quot;&gt; &lt;code&gt;isGUIInitialized&lt;/code&gt; &lt;/a&gt; 메서드를 확인해야합니다 . 반환 값이 true이면 보조 기술은 다른 응용 프로그램과 동일한 스레드 제한에 따라 GUI 구성 요소를 만들 수 있습니다. 반환 값이 false이면 보조 기술은 &lt;code&gt;EventQueueMonitor&lt;/code&gt; 에 &lt;code&gt;GUIInitializedListener&lt;/code&gt; 를 등록해야합니다. GUI 하위 시스템이 초기화 될 때 알림을받습니다.</target>
        </trans-unit>
        <trans-unit id="70df597792a5d0c1f742f4bbc73443851469858e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralPath&lt;/code&gt; class represents a geometric path constructed from straight lines, and quadratic and cubic (B&amp;eacute;zier) curves.</source>
          <target state="translated">&lt;code&gt;GeneralPath&lt;/code&gt; 의의 클래스는 직선과 차와 차 (베쥬) 곡선으로부터 작성된 기하학적 경로를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="cb3e442cafe4b2435222cea3fefab94ec8d73d74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralPath&lt;/code&gt; class represents a geometric path constructed from straight lines, and quadratic and cubic (B&amp;eacute;zier) curves. It can contain multiple subpaths.</source>
          <target state="translated">&lt;code&gt;GeneralPath&lt;/code&gt; 의의 클래스는 직선과 차와 차 (베쥬) 곡선으로부터 작성된 기하학적 경로를 나타낸다. 여러 하위 경로를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0794b1416bd199f56af33739272b109badf5de09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralSecurityException&lt;/code&gt; class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it.</source>
          <target state="translated">&lt;code&gt;GeneralSecurityException&lt;/code&gt; 의 클래스를 확장하는 모든 보안 관련 예외 클래스에 안전한 형태를 제공하는 일반적인 보안 예외 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="8c32683bb604a52bbbd12a72cd3f38b11977a353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GetTimeRequest&lt;/code&gt; and &lt;code&gt;GetTimeResponse&lt;/code&gt; classes might be defined as follows:</source>
          <target state="translated">&lt;code&gt;GetTimeRequest&lt;/code&gt; 및 &lt;code&gt;GetTimeResponse&lt;/code&gt; 의 다음과 같이 클래스를 정의 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="13c0923d03901bd10b867c4df6e64615af99014f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; class represents information about the justification properties of a glyph.</source>
          <target state="translated">&lt;code&gt;GlyphJustificationInfo&lt;/code&gt; 의 클래스는 그래프의 정당화 속성에 대한 정보를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b927a0c2359e692e02f1706ffd35129affd6a872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; class represents information about the justification properties of a glyph. A glyph is the visual representation of one or more characters. Many different glyphs can be used to represent a single character or combination of characters. The four justification properties represented by &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; are weight, priority, absorb and limit.</source>
          <target state="translated">&lt;code&gt;GlyphJustificationInfo&lt;/code&gt; 의 클래스는 그래프의 정당화 속성에 대한 정보를 나타냅니다. 글리프는 하나 이상의 문자를 시각적으로 표현한 것입니다. 여러 다른 글리프를 사용하여 단일 문자 또는 문자 조합을 나타낼 수 있습니다. &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; 가 나타내는 네 가지 정당화 속성 은 가중치, 우선 순위, 흡수 및 제한입니다.</target>
        </trans-unit>
        <trans-unit id="45abb7154dbefa102ab517801d557cf9f3c56346" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphMetrics&lt;/code&gt; class represents information for a single glyph.</source>
          <target state="translated">&lt;code&gt;GlyphMetrics&lt;/code&gt; 클래스는 단일 문자 모양에 대한 정보를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4c21b3f44b58fec8cc03a6ae86f7fe0931c38e31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphMetrics&lt;/code&gt; class represents information for a single glyph. A glyph is the visual representation of one or more characters. Many different glyphs can be used to represent a single character or combination of characters. &lt;code&gt;GlyphMetrics&lt;/code&gt; instances are produced by &lt;a href=&quot;../font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; and are applicable to a specific glyph in a particular &lt;code&gt;Font&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GlyphMetrics&lt;/code&gt; 클래스는 단일 문자 모양에 대한 정보를 나타냅니다. 글리프는 하나 이상의 문자를 시각적으로 표현한 것입니다. 여러 다른 글리프를 사용하여 단일 문자 또는 문자 조합을 나타낼 수 있습니다. &lt;code&gt;GlyphMetrics&lt;/code&gt; 인스턴스는 &lt;a href=&quot;../font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; 에&lt;/a&gt; 의해 생성되며 특정 &lt;code&gt;Font&lt;/code&gt; 의 특정 글리프에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d535761fb3907adf7a158ff9798deca3a7c2168" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphVector&lt;/code&gt; does not attempt any interpretation of the sequence of glyphs it contains. Relationships between adjacent glyphs in sequence are solely used to determine the placement of the glyphs in the visual coordinate space.</source>
          <target state="translated">&lt;code&gt;GlyphVector&lt;/code&gt; 에는 포함 된 상형 문자의 순서의 해석을 시도하지 않습니다. 인접한 글리프 간의 관계는 시각적 좌표 공간에서 글리프의 배치를 결정하는 데만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="22c3fa3fa913d25f815a28b8e119f96a0555cab4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern.</source>
          <target state="translated">&lt;code&gt;GradientPaint&lt;/code&gt; 클래스는 칠하는 수단 제공 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 선형 색 그라데이션 패턴을.</target>
        </trans-unit>
        <trans-unit id="9b77696e16f3807289412d33d3f22fcce890f133" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern. If &lt;a href=&quot;point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; P1 with &lt;a href=&quot;color&quot;&gt;&lt;code&gt;Color&lt;/code&gt;&lt;/a&gt; C1 and &lt;code&gt;Point&lt;/code&gt; P2 with &lt;code&gt;Color&lt;/code&gt; C2 are specified in user space, the &lt;code&gt;Color&lt;/code&gt; on the P1, P2 connecting line is proportionally changed from C1 to C2. Any point P not on the extended P1, P2 connecting line has the color of the point P' that is the perpendicular projection of P on the extended P1, P2 connecting line. Points on the extended line outside of the P1, P2 segment can be colored in one of two ways.</source>
          <target state="translated">&lt;code&gt;GradientPaint&lt;/code&gt; 클래스는 칠하는 수단 제공 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 선형 색 그라데이션 패턴을. 경우 &lt;a href=&quot;point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt; 와 P1 &lt;a href=&quot;color&quot;&gt; &lt;code&gt;Color&lt;/code&gt; &lt;/a&gt; C1 및 &lt;code&gt;Point&lt;/code&gt; 와 P2 &lt;code&gt;Color&lt;/code&gt; C2는 사용자 공간에서 지정되는 상기 &lt;code&gt;Color&lt;/code&gt; P1와는 P2를 연결하는 선상에 비례 C2 C1로 변경된다. 확장 된 P1, P2 연결선에없는 모든 점 P는 확장 된 P1, P2 연결선에서 P의 수직 투영 인 점 P '의 색상을 갖습니다. P1, P2 세그먼트 외부의 연장 된 선에있는 점은 두 가지 방법 중 하나로 색상을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32819e2ce29b3957db4a98ae15341d7630917a53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicAttribute&lt;/code&gt; class represents a graphic embedded in text. Clients subclass this class to implement their own char replacement graphics. Clients wishing to embed shapes and images in text need not subclass this class. Instead, clients can use the &lt;a href=&quot;shapegraphicattribute&quot;&gt;&lt;code&gt;ShapeGraphicAttribute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;imagegraphicattribute&quot;&gt;&lt;code&gt;ImageGraphicAttribute&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">&lt;code&gt;GraphicAttribute&lt;/code&gt; 클래스는 텍스트에 포함 된 그래픽을 나타냅니다. 클라이언트는 자신의 문자 대체 그래픽을 구현하기 위해이 클래스를 하위 클래스로 만듭니다. 텍스트에 모양과 이미지를 포함하려는 클라이언트는이 클래스를 하위 클래스로 만들 필요가 없습니다. 대신 클라이언트는 &lt;a href=&quot;shapegraphicattribute&quot;&gt; &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;imagegraphicattribute&quot;&gt; &lt;code&gt;ImageGraphicAttribute&lt;/code&gt; &lt;/a&gt; 클래스를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b392fe6147351913070567a0c9f057359947726a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; class defines only the &lt;code&gt;setColor&lt;/code&gt; method to control the color to be painted. Since the Java 2D API extends the &lt;code&gt;Color&lt;/code&gt; object to implement the new &lt;code&gt;Paint&lt;/code&gt; interface, the existing &lt;code&gt;setColor&lt;/code&gt; method is now a convenience method for setting the current &lt;code&gt;Paint&lt;/code&gt; attribute to a &lt;code&gt;Color&lt;/code&gt; object. &lt;code&gt;setColor(c)&lt;/code&gt; is equivalent to &lt;code&gt;setPaint(c)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; 전용 클래스를 정의 &lt;code&gt;setColor&lt;/code&gt; 를의 색상을 제어하는 방법은 페인트합니다. Java 2D API 는 새로운 &lt;code&gt;Paint&lt;/code&gt; 인터페이스 를 구현하기 위해 &lt;code&gt;Color&lt;/code&gt; 객체를 확장하기 때문에 기존의 &lt;code&gt;setColor&lt;/code&gt; 메서드는 현재 &lt;code&gt;Paint&lt;/code&gt; 속성을 &lt;code&gt;Color&lt;/code&gt; 객체 로 설정하는 편리한 메서드입니다 . &lt;code&gt;setColor(c)&lt;/code&gt; 는 &lt;code&gt;setPaint(c)&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="e8427a2fc2ebce29422ab41b78d54daf8a407ffe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; class defines two methods for controlling how colors are applied to the destination.</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; 클래스는 색을 목적지에 적용하는 방법을 제어하기위한 두 가지 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="13125e55dc6ed960bfbfd2294776b370d2c21f49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; class is the abstract base class for all graphics contexts that allow an application to draw onto components that are realized on various devices, as well as onto off-screen images.</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; 클래스는 응용 프로그램이 다양한 장치에서 실현뿐만 아니라 오프 스크린 이미지 위에되는 구성 요소에 그릴 수 있도록 모든 그래픽 컨텍스트의 추상 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="a5e9745b4915a7b3ff47fc4c84d91228cd6e76fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; object given is not initialized in any way. A view should set any settings needed.</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; 객체 주어진 어떤 식 으로든 초기화되지 않았습니다. 보기는 필요한 모든 설정을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="0a2ff97389f96fefc6b5f822679a56149d361216" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; class is used to obtain a valid &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; 로 클래스는 유효한 얻기 위해 사용 &lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ffb98ba7d72f93086adb8e667b98e30406027f45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; class is used to obtain a valid &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt;. A user instantiates one of these objects and then sets all non-default attributes as desired. The &lt;a href=&quot;graphicsdevice#getBestConfiguration(java.awt.GraphicsConfigTemplate)&quot;&gt;&lt;code&gt;GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)&lt;/code&gt;&lt;/a&gt; method found in the &lt;a href=&quot;graphicsdevice&quot;&gt;&lt;code&gt;GraphicsDevice&lt;/code&gt;&lt;/a&gt; class is then called with this &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt;. A valid &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is returned that meets or exceeds what was requested in the &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; 로 클래스는 유효한 얻기 위해 사용 &lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt; . 사용자는 이러한 개체 중 하나를 인스턴스화 한 다음 기본이 아닌 모든 속성을 원하는대로 설정합니다. &lt;a href=&quot;graphicsdevice#getBestConfiguration(java.awt.GraphicsConfigTemplate)&quot;&gt; &lt;code&gt;GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)&lt;/code&gt; &lt;/a&gt; 방법은에서 찾을 수 &lt;a href=&quot;graphicsdevice&quot;&gt; &lt;code&gt;GraphicsDevice&lt;/code&gt; &lt;/a&gt; 다음이 불려 클래스 &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; 로 . 유효한 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; 를가 만족 또는에서 요청 된 것을 초과 반환됩니다 &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; 로 .</target>
        </trans-unit>
        <trans-unit id="726b47b205fe0a661cf0370ba8da7a5b488fd925" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfiguration&lt;/code&gt; class describes the characteristics of a graphics destination such as a printer or monitor.</source>
          <target state="translated">&lt;code&gt;GraphicsConfiguration&lt;/code&gt; 클래스는 프린터 또는 모니터와 같은 그래픽 대상의 특성을 설명한다.</target>
        </trans-unit>
        <trans-unit id="a92ac41ae0dd8c36409cae0e9587878c5fb14003" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfiguration&lt;/code&gt; class describes the characteristics of a graphics destination such as a printer or monitor. There can be many &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects associated with a single graphics device, representing different drawing modes or capabilities. The corresponding native structure will vary from platform to platform. For example, on X11 windowing systems, each visual is a different &lt;code&gt;GraphicsConfiguration&lt;/code&gt;. On Microsoft Windows, &lt;code&gt;GraphicsConfiguration&lt;/code&gt;s represent PixelFormats available in the current resolution and color depth.</source>
          <target state="translated">&lt;code&gt;GraphicsConfiguration&lt;/code&gt; 클래스는 프린터 또는 모니터와 같은 그래픽 대상의 특성을 설명한다. 여러 그리기 모드 또는 기능을 나타내는 단일 그래픽 장치와 관련된 많은 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; 개체 가있을 수 있습니다 . 해당 네이티브 구조는 플랫폼마다 다릅니다. 예를 들어 X11 윈도우 시스템에서 각 시각적 개체는 서로 다른 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; 입니다. Microsoft Windows에서 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; 은 현재 해상도 및 색 농도에서 사용할 수있는 PixelFormats를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="969d3be706bf8119db76442a54255ffe0dea0b26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsDevice&lt;/code&gt; class describes the graphics devices that might be available in a particular graphics environment.</source>
          <target state="translated">&lt;code&gt;GraphicsDevice&lt;/code&gt; 클래스는, 특정의 그래픽 환경에서 이용 가능한 그래픽스 디바이스를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="462d91ac3e0876dc7fa769bfba720acd5fae4a62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsDevice&lt;/code&gt; class describes the graphics devices that might be available in a particular graphics environment. These include screen and printer devices. Note that there can be many screens and many printers in an instance of &lt;a href=&quot;graphicsenvironment&quot;&gt;&lt;code&gt;GraphicsEnvironment&lt;/code&gt;&lt;/a&gt;. Each graphics device has one or more &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt; objects associated with it. These objects specify the different configurations in which the &lt;code&gt;GraphicsDevice&lt;/code&gt; can be used.</source>
          <target state="translated">&lt;code&gt;GraphicsDevice&lt;/code&gt; 클래스는, 특정의 그래픽 환경에서 이용 가능한 그래픽스 디바이스를 설명합니다. 여기에는 화면 및 프린터 장치가 포함됩니다. &lt;a href=&quot;graphicsenvironment&quot;&gt; &lt;code&gt;GraphicsEnvironment&lt;/code&gt; &lt;/a&gt; 인스턴스에는 많은 화면과 많은 프린터가있을 수 있습니다 . 각 그래픽 장치에는 하나 이상의 &lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt; 개체가 연결되어 있습니다. 이러한 개체는 &lt;code&gt;GraphicsDevice&lt;/code&gt; 를 사용할 수있는 다양한 구성을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="35341cf36a040d8d479bdd8ded3520b65faf36e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsEnvironment&lt;/code&gt; class describes the collection of &lt;a href=&quot;graphicsdevice&quot;&gt;&lt;code&gt;GraphicsDevice&lt;/code&gt;&lt;/a&gt; objects and &lt;a href=&quot;font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; objects available to a Java(tm) application on a particular platform.</source>
          <target state="translated">&lt;code&gt;GraphicsEnvironment&lt;/code&gt; 로의 클래스의 컬렉션을 설명 &lt;a href=&quot;graphicsdevice&quot;&gt; &lt;code&gt;GraphicsDevice&lt;/code&gt; &lt;/a&gt; 객체 및 &lt;a href=&quot;font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt; 특정 플랫폼의 Java TM 어플리케이션으로 사용할 객체.</target>
        </trans-unit>
        <trans-unit id="7e5b963b9e15640f3032a326aa2be9cd04e50597" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsEnvironment&lt;/code&gt; class describes the collection of &lt;a href=&quot;graphicsdevice&quot;&gt;&lt;code&gt;GraphicsDevice&lt;/code&gt;&lt;/a&gt; objects and &lt;a href=&quot;font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; objects available to a Java(tm) application on a particular platform. The resources in this &lt;code&gt;GraphicsEnvironment&lt;/code&gt; might be local or on a remote machine. &lt;code&gt;GraphicsDevice&lt;/code&gt; objects can be screens, printers or image buffers and are the destination of &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; drawing methods. Each &lt;code&gt;GraphicsDevice&lt;/code&gt; has a number of &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt; objects associated with it. These objects specify the different configurations in which the &lt;code&gt;GraphicsDevice&lt;/code&gt; can be used.</source>
          <target state="translated">&lt;code&gt;GraphicsEnvironment&lt;/code&gt; 로의 클래스의 컬렉션을 설명 &lt;a href=&quot;graphicsdevice&quot;&gt; &lt;code&gt;GraphicsDevice&lt;/code&gt; &lt;/a&gt; 객체 및 &lt;a href=&quot;font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt; 특정 플랫폼의 Java TM 어플리케이션으로 사용할 객체. 이 &lt;code&gt;GraphicsEnvironment&lt;/code&gt; 의 리소스는 로컬 또는 원격 시스템에있을 수 있습니다. &lt;code&gt;GraphicsDevice&lt;/code&gt; 객체는 화면, 프린터 또는 이미지 버퍼가 될 수 있으며 &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt; 드로잉 메서드 의 대상입니다 . 각 &lt;code&gt;GraphicsDevice&lt;/code&gt; 에는 연관된 여러 &lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt; 객체가 있습니다. 이러한 개체는 &lt;code&gt;GraphicsDevice&lt;/code&gt; 를 사용할 수있는 다양한 구성을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="fc511c77ada4c92e4f5e1047075dc3015a45c13a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagConstraints&lt;/code&gt; class specifies constraints for components that are laid out using the &lt;code&gt;GridBagLayout&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;GridBagConstraints&lt;/code&gt; 사용하여 배치되어 구성 요소의 클래스를 지정 제약 &lt;code&gt;GridBagLayout&lt;/code&gt; 클래스를.</target>
        </trans-unit>
        <trans-unit id="054925047c5a9fd9ce6f93fbb0458416fc8717e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayout&lt;/code&gt; class is a flexible layout manager that aligns components vertically, horizontally or along their baseline without requiring that the components be of the same size.</source>
          <target state="translated">&lt;code&gt;GridBagLayout&lt;/code&gt; 클래스 유연한 레이아웃 매니저하다 가지런 성분 수직 또는 수평 성분이 동일한 크기 일 필요없이 자신의 기준을 따라.</target>
        </trans-unit>
        <trans-unit id="574091ea4562c915fcd1fabbdb94abf8adc280e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayout&lt;/code&gt; class is a flexible layout manager that aligns components vertically, horizontally or along their baseline without requiring that the components be of the same size. Each &lt;code&gt;GridBagLayout&lt;/code&gt; object maintains a dynamic, rectangular grid of cells, with each component occupying one or more cells, called its &lt;em&gt;display area&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;GridBagLayout&lt;/code&gt; 클래스 유연한 레이아웃 매니저하다 가지런 성분 수직 또는 수평 성분이 동일한 크기 일 필요없이 자신의 기준을 따라. 각 &lt;code&gt;GridBagLayout&lt;/code&gt; 객체는 각 구성 요소가 &lt;em&gt;표시 영역&lt;/em&gt; 이라고하는 하나 이상의 셀을 차지하는 동적 직사각형 셀 그리드를 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="76062deb045ca36f22a85ceffeb0ad784b53d31e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayout&lt;/code&gt; class requires a &lt;code&gt;GridBagConstraints&lt;/code&gt; object. Failure to pass the correct type of constraints object results in an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GridBagLayout&lt;/code&gt; 클래스는 필요 &lt;code&gt;GridBagConstraints&lt;/code&gt; 개체를. 올바른 유형의 제약 조건 객체를 전달하지 못하면 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="ac8ff2c00fb25b77e2b48357ae3e4d63bde879f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayoutInfo&lt;/code&gt; is an utility class for &lt;code&gt;GridBagLayout&lt;/code&gt; layout manager.</source>
          <target state="translated">&lt;code&gt;GridBagLayoutInfo&lt;/code&gt; 는 을위한 유틸리티 클래스 &lt;code&gt;GridBagLayout&lt;/code&gt; 레이아웃 매니저.</target>
        </trans-unit>
        <trans-unit id="92b008e93189549a646aef66f3bffaf374962247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayoutInfo&lt;/code&gt; is an utility class for &lt;code&gt;GridBagLayout&lt;/code&gt; layout manager. It stores align, size and baseline parameters for every component within a container.</source>
          <target state="translated">&lt;code&gt;GridBagLayoutInfo&lt;/code&gt; 는 을위한 유틸리티 클래스 &lt;code&gt;GridBagLayout&lt;/code&gt; 레이아웃 매니저. 컨테이너 내의 모든 구성 요소에 대한 정렬, 크기 및 기준 매개 변수를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="67565b28b276bd69513394c4ddbf42066c068bfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridLayout&lt;/code&gt; class is a layout manager that lays out a container's components in a rectangular grid.</source>
          <target state="translated">&lt;code&gt;GridLayout&lt;/code&gt; 과의 클래스는 구형 구라 두에 컨테이너의 컴퍼넌트를 배치하는 레이아웃 매니저입니다.</target>
        </trans-unit>
        <trans-unit id="885be3d5e327ec2ad7dc7c689228f7bf0680ebe1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridLayout&lt;/code&gt; class is a layout manager that lays out a container's components in a rectangular grid. The container is divided into equal-sized rectangles, and one component is placed in each rectangle. For example, the following is an applet that lays out six buttons into three rows and two columns:</source>
          <target state="translated">&lt;code&gt;GridLayout&lt;/code&gt; 과의 클래스는 구형 구라 두에 컨테이너의 컴퍼넌트를 배치하는 레이아웃 매니저입니다. 컨테이너는 동일한 크기의 사각형으로 분할되고 각 사각형에 하나의 구성 요소가 배치됩니다. 예를 들어, 다음은 6 개의 버튼을 3 개의 행과 2 개의 열로 배치하는 애플릿입니다.</target>
        </trans-unit>
        <trans-unit id="118049c104bd48460d735d53d07755dc77eab0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HTMLDOMImplementation&lt;/code&gt; interface extends the &lt;code&gt;DOMImplementation&lt;/code&gt; interface with a method for creating an HTML document instance.</source>
          <target state="translated">&lt;code&gt;HTMLDOMImplementation&lt;/code&gt; 의 인터페이스는 확장 &lt;code&gt;DOMImplementation&lt;/code&gt; HTML 문서 인스턴스를 생성하는 방법에 인터페이스.</target>
        </trans-unit>
        <trans-unit id="7b3db553a343fd330b52da577c5515316776d097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Handler&lt;/code&gt; is responsible for formatting the message, when and if necessary. The formatting should include localization.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 언제 필요한 경우 메시지를 포맷 할 책임이있다. 서식에는 현지화가 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="158b4670dc7ccf98630ac3b1539118f01f71661d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HandlerResult&lt;/code&gt; is used to determine the behavior of the channel after it handles a notification from the SCTP stack. Essentially its value determines if the channel should try to receive another notification or a message before returning.</source>
          <target state="translated">&lt;code&gt;HandlerResult&lt;/code&gt; 는 그것이 SCTP 스택으로부터 통지를 처리 한 후 상기 채널의 동작을 결정하는 데 사용된다. 본질적으로이 값은 채널이 반환하기 전에 다른 알림이나 메시지를 수신해야하는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="f1ea2fc9f3d54d23f364907703d3ac96f91fdf0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ColorSpace&lt;/code&gt; class is an implementation of the abstract &lt;code&gt;ColorSpace&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;ICC_ColorSpace&lt;/code&gt; 의의 클래스는 추상의 구현이다 &lt;code&gt;ColorSpace&lt;/code&gt; 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="f6918facd7e31b8252dd63334a785b3e9813caae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ColorSpace&lt;/code&gt; class is an implementation of the abstract &lt;code&gt;ColorSpace&lt;/code&gt; class. This representation of device independent and device dependent color spaces is based on the International Color Consortium Specification ICC.1:2001-12, File Format for Color Profiles (see &lt;a href=&quot;http://www.color.org&quot;&gt;http://www.color.org&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;ICC_ColorSpace&lt;/code&gt; 의의 클래스는 추상의 구현이다 &lt;code&gt;ColorSpace&lt;/code&gt; 클래스입니다. 이러한 장치 독립 및 장치 종속 색상 공간의 표현은 International Color Consortium Specification ICC.1 : 2001-12, File Format for Color Profiles ( &lt;a href=&quot;http://www.color.org&quot;&gt;http://www.color.org 참조&lt;/a&gt; )를 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="8da61bc9d927b3db75e7a43eb8fa3a67bb6d1f62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_Profile getInstance&lt;/code&gt; method will return an &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; object when these conditions are met. Three-component, matrix-based input profiles and RGB display profiles are examples of this type of profile.</source>
          <target state="translated">&lt;code&gt;ICC_Profile getInstance&lt;/code&gt; 메소드가 리턴 &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; 의 이러한 조건이 충족 될 때 개체를. 3 성분, 매트릭스 기반 입력 프로필 및 RGB 디스플레이 프로필이 이러한 유형의 프로필 예입니다.</target>
        </trans-unit>
        <trans-unit id="32aa0f88f296ce21dcaf9e0d00afc36365bb4fea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileGray&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the color space type of the profile is &lt;code&gt;TYPE_GRAY&lt;/code&gt; and the profile includes the &lt;code&gt;grayTRCTag&lt;/code&gt; and &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags.</source>
          <target state="translated">&lt;code&gt;ICC_ProfileGray&lt;/code&gt; 클래스의 서브 클래스 &lt;code&gt;ICC_Profile&lt;/code&gt; 프로파일의 색 공간 유형은 다음의 조건을 채우는 프로파일을 나타냅니다 클래스 &lt;code&gt;TYPE_GRAY&lt;/code&gt; 및 프로파일이 포함 &lt;code&gt;grayTRCTag&lt;/code&gt; 과 &lt;code&gt;mediaWhitePointTag&lt;/code&gt; 태그를.</target>
        </trans-unit>
        <trans-unit id="d1e4df1bd579a9f06afd737e2751ebfb596d5dd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileGray&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the color space type of the profile is &lt;code&gt;TYPE_GRAY&lt;/code&gt; and the profile includes the &lt;code&gt;grayTRCTag&lt;/code&gt; and &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags. The &lt;code&gt;getInstance&lt;/code&gt; methods in the &lt;code&gt;ICC_Profile&lt;/code&gt; class will return an &lt;code&gt;ICC_ProfileGray&lt;/code&gt; object when the above conditions are met. Examples of this kind of profile are monochrome input profiles, monochrome display profiles, and monochrome output profiles.</source>
          <target state="translated">&lt;code&gt;ICC_ProfileGray&lt;/code&gt; 클래스의 서브 클래스 &lt;code&gt;ICC_Profile&lt;/code&gt; 프로파일의 색 공간 유형은 다음의 조건을 채우는 프로파일을 나타냅니다 클래스 &lt;code&gt;TYPE_GRAY&lt;/code&gt; 및 프로파일이 포함 &lt;code&gt;grayTRCTag&lt;/code&gt; 과 &lt;code&gt;mediaWhitePointTag&lt;/code&gt; 태그를. &lt;code&gt;ICC_Profile&lt;/code&gt; 클래스 의 &lt;code&gt;getInstance&lt;/code&gt; 메소드 는 위의 조건이 충족되면 &lt;code&gt;ICC_ProfileGray&lt;/code&gt; 객체 를 반환합니다 . 이러한 종류의 프로필의 예로는 단색 입력 프로필, 단색 디스플레이 프로필 및 단색 출력 프로필이 있습니다.</target>
        </trans-unit>
        <trans-unit id="652d1cea1331e9078eb6a6bc1b0373da89c1b48f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the profile's color space type is RGB, and the profile includes the &lt;code&gt;redColorantTag&lt;/code&gt;, &lt;code&gt;greenColorantTag&lt;/code&gt;, &lt;code&gt;blueColorantTag&lt;/code&gt;, &lt;code&gt;redTRCTag&lt;/code&gt;, &lt;code&gt;greenTRCTag&lt;/code&gt;, &lt;code&gt;blueTRCTag&lt;/code&gt;, &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags.</source>
          <target state="translated">&lt;code&gt;ICC_ProfileRGB&lt;/code&gt; 의 클래스의 서브 클래스 &lt;code&gt;ICC_Profile&lt;/code&gt; 프로파일의 칼라 스페이스 타입이 RGB이며, 프로파일은 포함 : 다음의 조건을 채우는 프로파일을 나타냅니다 클래스 &lt;code&gt;redColorantTag&lt;/code&gt; , &lt;code&gt;greenColorantTag&lt;/code&gt; , &lt;code&gt;blueColorantTag&lt;/code&gt; , &lt;code&gt;redTRCTag&lt;/code&gt; , &lt;code&gt;greenTRCTag&lt;/code&gt; , &lt;code&gt;blueTRCTag&lt;/code&gt; , &lt;code&gt;mediaWhitePointTag&lt;/code&gt; 태그를.</target>
        </trans-unit>
        <trans-unit id="5358f2d1cdc57c22f5e748b6306eb87ff6c460c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the profile's color space type is RGB, and the profile includes the &lt;code&gt;redColorantTag&lt;/code&gt;, &lt;code&gt;greenColorantTag&lt;/code&gt;, &lt;code&gt;blueColorantTag&lt;/code&gt;, &lt;code&gt;redTRCTag&lt;/code&gt;, &lt;code&gt;greenTRCTag&lt;/code&gt;, &lt;code&gt;blueTRCTag&lt;/code&gt;, &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags. The &lt;code&gt;getInstance&lt;/code&gt; methods in the &lt;code&gt;ICC_Profile&lt;/code&gt; class will return an &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; object when the above conditions are met. Three-component, matrix-based input profiles and RGB display profiles are examples of this type of profile.</source>
          <target state="translated">&lt;code&gt;ICC_ProfileRGB&lt;/code&gt; 의 클래스의 서브 클래스 &lt;code&gt;ICC_Profile&lt;/code&gt; 프로파일의 칼라 스페이스 타입이 RGB이며, 프로파일은 포함 : 다음의 조건을 채우는 프로파일을 나타냅니다 클래스 &lt;code&gt;redColorantTag&lt;/code&gt; , &lt;code&gt;greenColorantTag&lt;/code&gt; , &lt;code&gt;blueColorantTag&lt;/code&gt; , &lt;code&gt;redTRCTag&lt;/code&gt; , &lt;code&gt;greenTRCTag&lt;/code&gt; , &lt;code&gt;blueTRCTag&lt;/code&gt; , &lt;code&gt;mediaWhitePointTag&lt;/code&gt; 태그를. &lt;code&gt;ICC_Profile&lt;/code&gt; 클래스 의 &lt;code&gt;getInstance&lt;/code&gt; 메서드 는 위의 조건이 충족되면 &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; 개체 를 반환합니다 . 3 성분, 매트릭스 기반 입력 프로파일 및 RGB 디스플레이 프로파일이 이러한 유형의 프로파일의 예입니다.</target>
        </trans-unit>
        <trans-unit id="91085e13e25b56334d0136ad6a6a3aeb2acef937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOByteBuffer&lt;/code&gt; class provides an alternative way to perform reads of sequences of bytes that reduces the amount of internal data copying.</source>
          <target state="translated">&lt;code&gt;IIOByteBuffer&lt;/code&gt; 의 클래스가 수행 할 수있는 대안적인 방법은 내부 데이터 복사의 양을 감소 바이트 순서로 읽어 제공한다.</target>
        </trans-unit>
        <trans-unit id="5555691f6c07d9fa4101cfba1135746750fd08c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOMetadataController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called.</source>
          <target state="translated">&lt;code&gt;IIOMetadataController&lt;/code&gt; 이 설정을 제공하는 데 사용됩니다 &lt;code&gt;IIOMetadata&lt;/code&gt; 때 객체 &lt;code&gt;activateController&lt;/code&gt; 의 방법이라고합니다.</target>
        </trans-unit>
        <trans-unit id="a9e351d66bd62ad441f8bd1a17f3defde63a80bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOMetadataController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IIOMetadataController&lt;/code&gt; 이 설정을 제공하는 데 사용됩니다 &lt;code&gt;IIOMetadata&lt;/code&gt; 때 객체 &lt;code&gt;activateController&lt;/code&gt; 의 방법이라고합니다. 이 값은 &lt;code&gt;null&lt;/code&gt; 인 경우에도 기본 컨트롤러를 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="b86312023dda6b799b3a5f85701920c8a9e53282" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOParamController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called.</source>
          <target state="translated">&lt;code&gt;IIOParamController&lt;/code&gt; 이 설정을 제공하는 데 사용됩니다 &lt;code&gt;IIOParam&lt;/code&gt; 의 때 객체 &lt;code&gt;activateController&lt;/code&gt; 의 방법이라고합니다.</target>
        </trans-unit>
        <trans-unit id="f17066ba75d42abb02e2b439c5a64a255a531a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOParamController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when null.</source>
          <target state="translated">&lt;code&gt;IIOParamController&lt;/code&gt; 이 설정을 제공하는 데 사용됩니다 &lt;code&gt;IIOParam&lt;/code&gt; 의 경우 개체에 &lt;code&gt;activateController&lt;/code&gt; 방법이라고합니다. 이 값은 null 일 때도 기본 컨트롤러를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="1373fac41a2c0fd6a7088e2e48cb2f69a0a7c602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadProgressListener&lt;/code&gt; interface allows for notification of the percentage of an image that has been read successfully.</source>
          <target state="translated">&lt;code&gt;IIOReadProgressListener&lt;/code&gt; 인터페이스가 성공적으로 읽은 이미지의 비율의 통지를 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8efd925d40fc2c06f26f62362d2f5ad61bf84a89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; interface allows for notification of the portions of an image that have been read. This is useful, for example, for implementing dynamic display of an image as it is loaded.</source>
          <target state="translated">&lt;code&gt;IIOReadUpdateListener&lt;/code&gt; 인터페이스는 판독 된 화상의 부분의 통지를 허용한다. 예를 들어 이미지가로드 될 때 동적 표시를 구현하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d9b45fe43fb5e8f36d95b122d8bc0cf608973ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadWarningListener&lt;/code&gt; interface allows for notification of non-fatal errors during reading.</source>
          <target state="translated">&lt;code&gt;IIOReadWarningListener&lt;/code&gt; 에의 인터페이스를 읽는 동안 치명적 오류의 통지를 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b149ec0010741dabc593484f5a58f1f5bb765802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; and &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; interfaces perform analogous functions for writers.</source>
          <target state="translated">&lt;code&gt;IIOWriteWarningListener&lt;/code&gt; 및 &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; 인터페이스 제작자에 대한 유사한 기능을 수행한다.</target>
        </trans-unit>
        <trans-unit id="5ebe107cde1d3bd9a79d28a4e17587461ce4d493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The offset and nano-of-second are unchanged. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; 의 필드는 지정된 순간에 날짜 - 시간을 반환합니다. 오프셋과 나노초는 변하지 않습니다. 새 인스턴트 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2471418c65939f74253b34d90116b39570d73512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The zone and nano-of-second are unchanged. The result will have an offset derived from the new instant and original zone. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; 의 필드는 지정된 순간에 날짜 - 시간을 반환합니다. 영역과 나노초는 변경되지 않습니다. 결과에는 새로운 인스턴트 및 원래 영역에서 파생 된 오프셋이 있습니다. 새 인스턴트 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="392613a8e6cca470b48fddf1528f1a7a4bb816c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Icon&lt;/code&gt; is wrapped in a &lt;code&gt;JLabel&lt;/code&gt; and displayed in the dialog.</source>
          <target state="translated">&lt;code&gt;Icon&lt;/code&gt; 에 싸여 &lt;code&gt;JLabel&lt;/code&gt; 의 및 대화 상자에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a965621559c252e432937665b61d466e33f20641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IllegalPathStateException&lt;/code&gt; represents an exception that is thrown if an operation is performed on a path that is in an illegal state with respect to the particular operation being performed, such as appending a path segment to a &lt;a href=&quot;generalpath&quot;&gt;&lt;code&gt;GeneralPath&lt;/code&gt;&lt;/a&gt; without an initial moveto.</source>
          <target state="translated">&lt;code&gt;IllegalPathStateException&lt;/code&gt; 는 동작이 이러한 경로 세그먼트를 추가로 수행되는 특정 동작에 대해 잘못된 상태에있는 경로를 수행하는 경우 발생되는 예외 나타내는 &lt;a href=&quot;generalpath&quot;&gt; &lt;code&gt;GeneralPath&lt;/code&gt; 의을&lt;/a&gt; 초기의 moveTo 않고있다.</target>
        </trans-unit>
        <trans-unit id="9c18c56f19c3dcaf88dfb987620dbfd93d3a3c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Image&lt;/code&gt; object determines what colors to render, sampled according to the source to destination coordinate mapping specified by the current &lt;code&gt;Transform&lt;/code&gt; and the optional image transform.</source>
          <target state="translated">&lt;code&gt;Image&lt;/code&gt; 객체는 색상이 전류에 의해 지정된 매핑 좌표 대상으로 소스에 따라 샘플링, 렌더링 작업을 결정 &lt;code&gt;Transform&lt;/code&gt; 및 옵션 이미지 변환.</target>
        </trans-unit>
        <trans-unit id="d0d2fd4edf3f38ee33c3e1c03e54afb17d287f78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageGraphicAttribute&lt;/code&gt; class is an implementation of &lt;a href=&quot;graphicattribute&quot;&gt;&lt;code&gt;GraphicAttribute&lt;/code&gt;&lt;/a&gt; which draws images in a &lt;a href=&quot;textlayout&quot;&gt;&lt;code&gt;TextLayout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ImageGraphicAttribute&lt;/code&gt; 에의 클래스의 구현입니다 &lt;a href=&quot;graphicattribute&quot;&gt; &lt;code&gt;GraphicAttribute&lt;/code&gt; 에&lt;/a&gt; A의 이미지를 그립니다 &lt;a href=&quot;textlayout&quot;&gt; &lt;code&gt;TextLayout&lt;/code&gt; 의&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="26f92023e5949c66d2da17553ce04c03b886aec5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; interface unifies streaming and file-based operations. An abstract base class, &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; is provided to simplify writing a new &lt;code&gt;ImageInputStream&lt;/code&gt; class. Concrete implementation classes (&lt;code&gt;FileImageInputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageInputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt;) are provided that allow input to come from a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;InputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 의 스트리밍을 통합하여 및 파일 기반 작업 인터페이스를 제공합니다. 새로운 &lt;code&gt;ImageInputStream&lt;/code&gt; 클래스 작성을 단순화하기 위해 추상 기본 클래스 인 &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; 이 제공됩니다 . &lt;code&gt;File&lt;/code&gt; 또는 &lt;code&gt;InputStream&lt;/code&gt; 에서 입력을 &lt;code&gt;FileImageInputStream&lt;/code&gt; 구체적 구현 클래스 ( FileImageInputStream , &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; 및 &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt; )가 제공됩니다.임시 캐시 파일을 사용하거나 사용하지 않고 됩니다.</target>
        </trans-unit>
        <trans-unit id="5e27b2d4d15fde0cbc962afad6131561435419d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; by &lt;code&gt;setInput&lt;/code&gt; and retrieved by &lt;code&gt;getInput&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 또는 다른 &lt;code&gt;Object&lt;/code&gt; 에 의해 &lt;code&gt;setInput&lt;/code&gt; 에 의해 검색 &lt;code&gt;getInput&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="23787e7b0f5233202db60183744cb5ba7ec81a77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; by &lt;code&gt;setInput&lt;/code&gt; and retrieved by &lt;code&gt;getInput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 또는 다른 &lt;code&gt;Object&lt;/code&gt; 에 의해 &lt;code&gt;setInput&lt;/code&gt; 에 의해 검색 &lt;code&gt;getInput&lt;/code&gt; 에 . 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="e870028a4bcce49d6ab74abb2d0fee3053be5245" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; interface performs an analogous function for output. An abstract base class, &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; is provided, along with concrete implementation classes (&lt;code&gt;FileImageOutputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt;) are provided that allow output to go to a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;OutputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; 인터페이스 출력을 위해 유사한 기능을 수행한다. 출력이 &lt;code&gt;File&lt;/code&gt; 또는 &lt;code&gt;OutputStream&lt;/code&gt; 으로 이동할 수 있도록 하는 구체적인 구현 클래스 ( &lt;code&gt;FileImageOutputStream&lt;/code&gt; , &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt; 및 &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt; ) 와 함께 추상 기본 클래스 인 &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; 이 제공됩니다.임시 캐시 파일을 사용하거나 사용하지 않고 으로 됩니다.</target>
        </trans-unit>
        <trans-unit id="0ddae3bbe537c1a0be71cf41804a28a5a81e4fb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; set by &lt;code&gt;setOutput&lt;/code&gt; and retrieved by &lt;code&gt;getOutput&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; 또는 다른 &lt;code&gt;Object&lt;/code&gt; 세트로 &lt;code&gt;setOutput&lt;/code&gt; 에 의해 검색 &lt;code&gt;getOutput&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c654707cc8b01173251db888e4e9f1cadc54a60a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; set by &lt;code&gt;setOutput&lt;/code&gt; and retrieved by &lt;code&gt;getOutput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; 또는 다른 &lt;code&gt;Object&lt;/code&gt; 세트로 &lt;code&gt;setOutput&lt;/code&gt; 에 의해 검색 &lt;code&gt;getOutput&lt;/code&gt; . 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="f70260567f0d2cbe6fe2d89e83724aa1bfc9a4e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageReaderSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists.</source>
          <target state="translated">이 개체를 인스턴스화 한 &lt;code&gt;ImageReaderSpi&lt;/code&gt; 입니다. ID를 알 수 없거나 존재하지 않는 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="23d39dd66eefdd5b7e22c2d48611d45e7fe19e03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageReaderSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이 객체를 인스턴스화 한 &lt;code&gt;ImageReaderSpi&lt;/code&gt; . 식별 정보가 불명, 또는 존재하지 않는 경우는 &lt;code&gt;null&lt;/code&gt; 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="4704057a1cfa23bc9c1120bc0abf4de7efb1c23e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageWriterSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists.</source>
          <target state="translated">이 개체를 인스턴스화 한 &lt;code&gt;ImageWriterSpi&lt;/code&gt; 입니다. ID를 알 수 없거나 존재하지 않는 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1558624413839f825eafd92b1012f6d775cab0ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageWriterSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이 객체의 인스턴스를 생성 한 &lt;code&gt;ImageWriterSpi&lt;/code&gt; . 식별 정보를 모르거나 존재하지 않는 경우는 &lt;code&gt;null&lt;/code&gt; 기본적으로 &lt;code&gt;null&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="d333f5cf1777f22147d636bd072217b0f829b493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImagingOpException&lt;/code&gt; is thrown if one of the &lt;a href=&quot;bufferedimageop&quot;&gt;&lt;code&gt;BufferedImageOp&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;rasterop&quot;&gt;&lt;code&gt;RasterOp&lt;/code&gt;&lt;/a&gt; filter methods cannot process the image.</source>
          <target state="translated">&lt;code&gt;ImagingOpException&lt;/code&gt; 의 하나가 슬로우 &lt;a href=&quot;bufferedimageop&quot;&gt; &lt;code&gt;BufferedImageOp&lt;/code&gt; 와&lt;/a&gt; 또는 &lt;a href=&quot;rasterop&quot;&gt; &lt;code&gt;RasterOp&lt;/code&gt; 의&lt;/a&gt; 필터 방법은 이미지를 처리 할 수 없다.</target>
        </trans-unit>
        <trans-unit id="4d20fc48554b076450f5bcbb366190a701c2f94a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IndexColorModel&lt;/code&gt; class is a &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values consisting of a single sample that is an index into a fixed colormap in the default sRGB color space.</source>
          <target state="translated">&lt;code&gt;IndexColorModel&lt;/code&gt; 클래스는이다 &lt;code&gt;ColorModel&lt;/code&gt; 클래스가 디폴트의 sRGB 색 공간의 고정 칼라 맵에 대한 인덱스 인, 단일의 샘플로부터되는 픽셀 값으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="c39e7b4238b4a83b33e75a19112d55d420ed74fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IndexColorModel&lt;/code&gt; class is a &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values consisting of a single sample that is an index into a fixed colormap in the default sRGB color space. The colormap specifies red, green, blue, and optional alpha components corresponding to each index. All components are represented in the colormap as 8-bit unsigned integral values. Some constructors allow the caller to specify &quot;holes&quot; in the colormap by indicating which colormap entries are valid and which represent unusable colors via the bits set in a &lt;code&gt;BigInteger&lt;/code&gt; object. This color model is similar to an X11 PseudoColor visual.</source>
          <target state="translated">&lt;code&gt;IndexColorModel&lt;/code&gt; 클래스는이다 &lt;code&gt;ColorModel&lt;/code&gt; 클래스가 디폴트의 sRGB 색 공간의 고정 칼라 맵에 대한 인덱스 인, 단일의 샘플로부터되는 픽셀 값으로 작동합니다. 컬러 맵은 각 인덱스에 해당하는 빨강, 녹색, 파랑 및 선택적 알파 구성 요소를 지정합니다. 모든 구성 요소는 컬러 맵에서 8 비트 부호없는 정수 값으로 표시됩니다. 일부 생성자는 호출자가 &lt;code&gt;BigInteger&lt;/code&gt; 객체에 설정된 비트를 통해 유효한 컬러 맵 항목과 사용할 수없는 색을 나타내는 것을 표시하여 컬러 맵에 &quot;구멍&quot;을 지정할 수 있도록 합니다. 이 색상 모델은 X11 PseudoColor 비주얼과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="e251dbab4e4c6456b16648f06dec35662b5945d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InputStream&lt;/code&gt; object that will be returned by the method &lt;code&gt;getAsciiStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 방법에 의해 반환되는 객체 &lt;code&gt;getAsciiStream&lt;/code&gt; 에 지정된된다 &lt;code&gt;ResultSet&lt;/code&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="a1bc6fa075667b1fa7aa96914f9db9e346cff621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InputStream&lt;/code&gt; object that will be returned by the method &lt;code&gt;getBinaryStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 방법에 의해 반환되는 객체 &lt;code&gt;getBinaryStream&lt;/code&gt; 을 에 지정된된다 &lt;code&gt;ResultSet&lt;/code&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="caeca15b76441775ba23041b93cdbba02f7befa7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InputStream&lt;/code&gt; object that will be returned by the method &lt;code&gt;getUnicodeStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 방법에 의해 반환되는 객체 &lt;code&gt;getUnicodeStream&lt;/code&gt; 에 지정된된다 &lt;code&gt;ResultSet&lt;/code&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="c187ac2b0346d6275a729d49e9e4b70887e64296" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; 클래스 프리미티브 타입의 값 랩 &lt;code&gt;int&lt;/code&gt; 오브젝트하여.</target>
        </trans-unit>
        <trans-unit id="62ec9068383653f569a3d3699ea099197809c35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object. An object of type &lt;code&gt;Integer&lt;/code&gt; contains a single field whose type is &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; 클래스 프리미티브 타입의 값 랩 &lt;code&gt;int&lt;/code&gt; 오브젝트하여. &lt;code&gt;Integer&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;int&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="e3cc2ea1e526b831184aee5221e0c845f7fee4f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JApplet&lt;/code&gt; class is slightly incompatible with &lt;code&gt;java.applet.Applet&lt;/code&gt;. &lt;code&gt;JApplet&lt;/code&gt; contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;code&gt;contentPane&lt;/code&gt; should be the parent of any children of the &lt;code&gt;JApplet&lt;/code&gt;. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to an applet as follows:</source>
          <target state="translated">&lt;code&gt;JApplet&lt;/code&gt; 에 클래스와 약간 호환되지 않습니다 &lt;code&gt;java.applet.Applet&lt;/code&gt; . &lt;code&gt;JApplet&lt;/code&gt; 은 &lt;code&gt;JRootPane&lt;/code&gt; 을 유일한 자식으로 포함합니다 . &lt;code&gt;contentPane&lt;/code&gt; 의 모든 아이의 부모가 될 필요가 &lt;code&gt;JApplet&lt;/code&gt; 에 . 편의상 이 클래스 의 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; 및 &lt;code&gt;setLayout&lt;/code&gt; 메서드는 재정의되어 &lt;code&gt;ContentPane&lt;/code&gt; 의 해당 메서드에 대한 호출을 위임합니다 . 예를 들어, 다음과 같이 애플릿에 하위 구성 요소를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c87e4f76b89a70ad69cce55f17acc2797e0c21d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JComponent&lt;/code&gt; class provides:</source>
          <target state="translated">&lt;code&gt;JComponent&lt;/code&gt; 의의 클래스를 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="9664c24520dfd0acb583ed66d3f527d0092afdf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDBCType&lt;/code&gt; constant</source>
          <target state="translated">&lt;code&gt;JDBCType&lt;/code&gt; 의 일정</target>
        </trans-unit>
        <trans-unit id="388596c6d2e1a4932d64b2200c1465e4d8741ed5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDIPermission&lt;/code&gt; class represents access rights to the &lt;code&gt;VirtualMachineManager&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;JDIPermission&lt;/code&gt; 의 클래스는 액세스 권한 나타내는 &lt;code&gt;VirtualMachineManager&lt;/code&gt; 에를</target>
        </trans-unit>
        <trans-unit id="cefae284586aab944db856f3d455db32f414e442" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDIPermission&lt;/code&gt; class represents access rights to the &lt;code&gt;VirtualMachineManager&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JDIPermission&lt;/code&gt; 의 클래스는 액세스 권한 나타냅니다 &lt;code&gt;VirtualMachineManager&lt;/code&gt; 에를 .</target>
        </trans-unit>
        <trans-unit id="f2d717e6db87a9219209780dac2a1cd16fb18b02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDIPermission&lt;/code&gt; class represents access rights to the &lt;code&gt;VirtualMachineManager&lt;/code&gt;. This is the permission which the SecurityManager will check when code that is running with a SecurityManager requests access to the VirtualMachineManager, as defined in the Java Debug Interface (JDI) for the Java platform.</source>
          <target state="translated">&lt;code&gt;JDIPermission&lt;/code&gt; 의 클래스는 액세스 권한 나타냅니다 &lt;code&gt;VirtualMachineManager&lt;/code&gt; 에를 . 이것은 Java 플랫폼 용 JDI (Java Debug Interface)에 정의 된대로 SecurityManager로 실행중인 코드가 VirtualMachineManager에 대한 액세스를 요청할 때 SecurityManager가 확인할 권한입니다.</target>
        </trans-unit>
        <trans-unit id="a831a7ab2166f42212b45436e662aa3eac54b072" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDialog&lt;/code&gt; component contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;code&gt;contentPane&lt;/code&gt; should be the parent of any children of the &lt;code&gt;JDialog&lt;/code&gt;. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to a dialog as follows:</source>
          <target state="translated">&lt;code&gt;JDialog&lt;/code&gt; 구성 요소는 포함 &lt;code&gt;JRootPane&lt;/code&gt; 의 유일한 자식으로합니다. &lt;code&gt;contentPane&lt;/code&gt; 의 모든 아이의 부모가 될 필요가 &lt;code&gt;JDialog&lt;/code&gt; 를 . 편의상 이 클래스 의 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; 및 &lt;code&gt;setLayout&lt;/code&gt; 메서드는 재정의되어 &lt;code&gt;ContentPane&lt;/code&gt; 의 해당 메서드에 대한 호출을 위임합니다 . 예를 들어, 다음과 같이 대화 상자에 하위 구성 요소를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c6f8bb9754f43f02a3b0b1938083fdf7b145a73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JFrame&lt;/code&gt; class is slightly incompatible with &lt;code&gt;Frame&lt;/code&gt;. Like all other JFC/Swing top-level containers, a &lt;code&gt;JFrame&lt;/code&gt; contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;b&gt;content pane&lt;/b&gt; provided by the root pane should, as a rule, contain all the non-menu components displayed by the &lt;code&gt;JFrame&lt;/code&gt;. This is different from the AWT &lt;code&gt;Frame&lt;/code&gt; case. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to a frame as follows:</source>
          <target state="translated">&lt;code&gt;JFrame&lt;/code&gt; 의의 클래스와 약간 호환되지 않는 &lt;code&gt;Frame&lt;/code&gt; . 다른 모든 JFC / Swing 최상위 컨테이너와 마찬가지로 &lt;code&gt;JFrame&lt;/code&gt; 은 &lt;code&gt;JRootPane&lt;/code&gt; 을 유일한 자식으로 포함합니다 . &lt;b&gt;컨텐츠 구획&lt;/b&gt; 루트 구획이 제공은 원칙적으로 메뉴 이외의 모든 구성 요소에 의해 표시가 포함되어야 &lt;code&gt;JFrame&lt;/code&gt; 의 . 이것은 AWT &lt;code&gt;Frame&lt;/code&gt; 케이스 와 다릅니다 . 편의상 이 클래스 의 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; 및 &lt;code&gt;setLayout&lt;/code&gt; 메서드는 재정의되어 &lt;code&gt;ContentPane&lt;/code&gt; 의 해당 메서드에 대한 호출을 위임합니다 . 예를 들어 다음과 같이 프레임에 하위 구성 요소를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d81a30c0184c34b3c691afdfe0e670e454d6d68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JInternalFrame&lt;/code&gt; content pane is where you add child components. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to an internal frame as follows:</source>
          <target state="translated">&lt;code&gt;JInternalFrame&lt;/code&gt; 의 당신이 자식 구성 요소를 추가 할 경우 내용 창입니다. 편의상 이 클래스 의 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; 및 &lt;code&gt;setLayout&lt;/code&gt; 메서드는 재정의되어 &lt;code&gt;ContentPane&lt;/code&gt; 의 해당 메서드에 대한 호출을 위임합니다 . 예를 들어 다음과 같이 내부 프레임에 하위 구성 요소를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c23196121f172d1a13c98018c082ac9f69ce7b6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JLayer&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JLayer&lt;/code&gt; 는 (이 메소드의 디폴트 구현 우선 &lt;code&gt;JComponent&lt;/code&gt; 의 반환에) &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e9fdfd0369de3e98d177d6c9f03bc43faf0e048f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JLayer&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return &lt;code&gt;false&lt;/code&gt;. This ensures that the drawing machinery will call the &lt;code&gt;JLayer&lt;/code&gt;'s &lt;code&gt;paint&lt;/code&gt; implementation rather than messaging the &lt;code&gt;JLayer&lt;/code&gt;'s children directly.</source>
          <target state="translated">&lt;code&gt;JLayer&lt;/code&gt; 는 (이 메소드의 디폴트 구현 우선 &lt;code&gt;JComponent&lt;/code&gt; 의 반환에) &lt;code&gt;false&lt;/code&gt; . 이렇게하면 그리기 기계가 &lt;code&gt;JLayer&lt;/code&gt; 의 자식에게 직접 메시지를 보내는 대신 &lt;code&gt;JLayer&lt;/code&gt; 의 &lt;code&gt;paint&lt;/code&gt; 구현을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b25ba63894710fd4b97499052886e621a382f62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JLayeredPane&lt;/code&gt; methods &lt;code&gt;moveToFront(Component)&lt;/code&gt;, &lt;code&gt;moveToBack(Component)&lt;/code&gt; and &lt;code&gt;setPosition&lt;/code&gt; can be used to reposition a component within its layer. The &lt;code&gt;setLayer&lt;/code&gt; method can also be used to change the component's current layer.</source>
          <target state="translated">&lt;code&gt;JLayeredPane&lt;/code&gt; 방법 &lt;code&gt;moveToFront(Component)&lt;/code&gt; , &lt;code&gt;moveToBack(Component)&lt;/code&gt; 및 &lt;code&gt;setPosition&lt;/code&gt; 를는 그 층 내의 구성 요소의 위치를 변경하기 위해 사용될 수있다. &lt;code&gt;setLayer&lt;/code&gt; 방법은 또한 컴포넌트의 현재의 레이어를 변경하는데 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="3fa5f36d971e7676ba7ab51f2c1dff644147234e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JList&lt;/code&gt; pluggable look and feel delegate.</source>
          <target state="translated">&lt;code&gt;JList&lt;/code&gt; 의 플러그 인 가능한 Look &amp;amp; Feel 위양.</target>
        </trans-unit>
        <trans-unit id="4049b86463133a049acc0748eb8f415baf880f7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JMenuItem&lt;/code&gt; subclasses only use &lt;code&gt;SMALL_ICON&lt;/code&gt;. All other buttons will use &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt;; if the value is &lt;code&gt;null&lt;/code&gt; they use &lt;code&gt;SMALL_ICON&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JMenuItem&lt;/code&gt; 서브 클래스에서만 사용 &lt;code&gt;SMALL_ICON&lt;/code&gt; 를 . 다른 모든 버튼은 &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt; 를 사용 합니다 . 값이 &lt;code&gt;null&lt;/code&gt; 이면 &lt;code&gt;SMALL_ICON&lt;/code&gt; 을 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="bad30b8acbde953843755f85584b7f2c2c30a621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JRootPane&lt;/code&gt; instance that manages the &lt;code&gt;contentPane&lt;/code&gt; and optional &lt;code&gt;menuBar&lt;/code&gt; for this frame, as well as the &lt;code&gt;glassPane&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JRootPane&lt;/code&gt; 관리 인스턴스 &lt;code&gt;contentPane&lt;/code&gt; 및 옵션 &lt;code&gt;menuBar&lt;/code&gt; 이 프레임뿐만 아니라 대한 &lt;code&gt;glassPane&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e586e2a981f3a761025c512ea04c3022aef07c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JRootPane&lt;/code&gt; instance that manages the content pane and optional menu bar for this internal frame, as well as the glass pane.</source>
          <target state="translated">&lt;code&gt;JRootPane&lt;/code&gt; 이 내부 프레임의 컨텐츠 구획 및 옵션의 도구 모음을 관리하는 경우뿐만 아니라, 유리 창.</target>
        </trans-unit>
        <trans-unit id="0d07b328936474f5cbbebe738dfdc36bb3225929" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; can be set up to display any data model which implements the &lt;code&gt;TableModel&lt;/code&gt; interface with a couple of lines of code:</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; 구현하는 데이터 모델을 표시하도록 설정할 수 있습니다 &lt;code&gt;TableModel&lt;/code&gt; 에의 몇 줄기의 코드와 인터페이스를 :</target>
        </trans-unit>
        <trans-unit id="a3d4d072368811da647b5501228f64bdae7b15e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; has many facilities that make it possible to customize its rendering and editing but provides defaults for these features so that simple tables can be set up easily. For example, to set up a table with 10 rows and 10 columns of numbers:</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; 는, 가능의 렌더링을 사용자 정의 할 수 있도록 다양한 시설을 갖추고 편집 그러나이 간단한 테이블을 쉽게 설정할 수 있도록 기능을 기본적으로 제공합니다. 예를 들어 10 개의 행과 10 개의 숫자 열이있는 테이블을 설정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d75024b5e7e8d1ed02fdad9eaac5c7a8ad84f616" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; is used to display and edit regular two-dimensional tables of cells.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; 는, 셀의 통상의 2 차원 테이블을 표시하고 편집하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="95c8ac8d733cd5732fb777b006412d36181496a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; is used to display and edit regular two-dimensional tables of cells. See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for task-oriented documentation and examples of using &lt;code&gt;JTable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; 는, 셀의 통상의 2 차원 테이블을 표시하고 편집하는 데 사용됩니다. 태스크 지향 문서와 &lt;code&gt;JTable&lt;/code&gt; 사용 예제는 &lt;em&gt;Java Tutorial의 &lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt; 를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1c56b0c42ec4f2e67652a49d5e1a2872f069470a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; is used to display and edit regular two-dimensional tables of cells. See &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for task-oriented documentation and examples of using &lt;code&gt;JTable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; 는, 셀의 통상의 2 차원 테이블을 표시하고 편집하는 데 사용됩니다. 태스크 지향 문서와 &lt;code&gt;JTable&lt;/code&gt; 사용 예제는 &lt;em&gt;Java Tutorial의 &lt;/em&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt; 를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="52d2ad87ac37fdf47838a9cdfaacb2e8a02c95c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; uses integers exclusively to refer to both the rows and the columns of the model that it displays. The &lt;code&gt;JTable&lt;/code&gt; simply takes a tabular range of cells and uses &lt;code&gt;getValueAt(int, int)&lt;/code&gt; to retrieve the values from the model during painting. It is important to remember that the column and row indexes returned by various &lt;code&gt;JTable&lt;/code&gt; methods are in terms of the &lt;code&gt;JTable&lt;/code&gt; (the view) and are not necessarily the same indexes used by the model.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; 가 사용하는 정수 독점적 행과 그것이 표시하는 모델의 열을 모두 참조합니다. &lt;code&gt;JTable&lt;/code&gt; 는, 단순히 셀을 표 범위를 받아 사용 &lt;code&gt;getValueAt(int, int)&lt;/code&gt; 도장시에 모델로부터 값을 취득 할 수 있습니다. 다양한 &lt;code&gt;JTable&lt;/code&gt; 메서드에 의해 반환되는 열 및 행 인덱스 는 &lt;code&gt;JTable&lt;/code&gt; (뷰)과 관련이 있으며 반드시 모델에서 사용하는 인덱스와 동일하지 않다는 점을 기억하는 것이 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="ff3cf78ab641e58b2c5ec4479c84cee89110d041" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTableHeader&lt;/code&gt; that is delegating the painting to this UI.</source>
          <target state="translated">&lt;code&gt;JTableHeader&lt;/code&gt; 에 이 UI에 그림을 위임한다.</target>
        </trans-unit>
        <trans-unit id="eaa7c23e7e2bbbc13aa330255c3995984f627edd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JViewport&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return false.</source>
          <target state="translated">&lt;code&gt;JViewport&lt;/code&gt; (이 메소드의 디폴트 구현 우선 &lt;code&gt;JComponent&lt;/code&gt; 의 반환 false로)을.</target>
        </trans-unit>
        <trans-unit id="ec409845719307e978c8e91fb5b03ac6a0c35b35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JViewport&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return false. This ensures that the drawing machinery will call the &lt;code&gt;Viewport&lt;/code&gt;'s &lt;code&gt;paint&lt;/code&gt; implementation rather than messaging the &lt;code&gt;JViewport&lt;/code&gt;'s children directly.</source>
          <target state="translated">&lt;code&gt;JViewport&lt;/code&gt; (이 메소드의 디폴트 구현 우선 &lt;code&gt;JComponent&lt;/code&gt; 의 반환 false로)을. 이렇게하면 그리기 기계가 &lt;code&gt;JViewport&lt;/code&gt; 의 자식을 직접 메시징하는 대신 &lt;code&gt;Viewport&lt;/code&gt; 의 &lt;code&gt;paint&lt;/code&gt; 구현을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="364d8fc3bc9081a3dc1c6702ea2ad91b7e71cea4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JViewport&lt;/code&gt; provides a window, or &quot;viewport&quot; onto a data source -- for example, a text file. That data source is the &quot;scrollable client&quot; (aka data model) displayed by the &lt;code&gt;JViewport&lt;/code&gt; view. A &lt;code&gt;JScrollPane&lt;/code&gt; basically consists of &lt;code&gt;JScrollBar&lt;/code&gt;s, a &lt;code&gt;JViewport&lt;/code&gt;, and the wiring between them, as shown in the diagram at right.</source>
          <target state="translated">&lt;code&gt;JViewport&lt;/code&gt; , 예를 들어 텍스트 파일을 - 데이터 소스 상에 윈도우 또는 &quot;뷰포트&quot;를 제공합니다. 해당 데이터 소스는 &lt;code&gt;JViewport&lt;/code&gt; 보기에 표시되는 &quot;스크롤 가능한 클라이언트&quot;(일명 데이터 모델) 입니다. &lt;code&gt;JScrollPane&lt;/code&gt; 기본적으로 구성 &lt;code&gt;JScrollBar&lt;/code&gt; S, A &lt;code&gt;JViewport&lt;/code&gt; 의 우측 도면에 도시 된 바와 같이, 그들 사이의 배선.</target>
        </trans-unit>
        <trans-unit id="911161a28dc237dab5002e98139e60480a1f84cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JWindow&lt;/code&gt; component contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;code&gt;contentPane&lt;/code&gt; should be the parent of any children of the &lt;code&gt;JWindow&lt;/code&gt;. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to a window as follows:</source>
          <target state="translated">&lt;code&gt;JWindow&lt;/code&gt; 구성 요소는 포함 &lt;code&gt;JRootPane&lt;/code&gt; 의 유일한 자식으로합니다. &lt;code&gt;contentPane&lt;/code&gt; 의 모든 아이의 부모가 될 필요 &lt;code&gt;JWindow&lt;/code&gt; . 편의상 &lt;code&gt;add&lt;/code&gt; 이 클래스 , &lt;code&gt;remove&lt;/code&gt; 및 &lt;code&gt;setLayout&lt;/code&gt; 메서드는 재정의되어 &lt;code&gt;ContentPane&lt;/code&gt; 의 해당 메서드에 대한 호출을 위임합니다 . 예를 들어 다음과 같이 창에 하위 구성 요소를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10e129e33f3b53fc80b1e431c4205e048b0ed9d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; 를의 클래스를 열 수있는 임의의 파일로부터 jar 파일의 내용을 읽어 내는데 사용 &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="7d1581e89607230d16b5c39df532a61304a21e47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;. It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry, and support for processing multi-release jar files. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the jar file and its entries.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; 를의 클래스를 열 수있는 임의의 파일로부터 jar 파일의 내용을 읽어 내는데 사용 &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 의 . 그것은 클래스를 확장합니다 &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; 선택적 &lt;code&gt;Manifest&lt;/code&gt; 항목 읽기를 지원하고 다중 릴리스 jar 파일 처리 를 지원하여 java.util.zip.ZipFile 합니다. &lt;code&gt;Manifest&lt;/code&gt; jar 파일과 그 항목에 대한 메타 정보를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fc173f631c97a9b4dcc50fc6b42b14623acad99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;. It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the jar file and its entries.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; 를의 클래스를 열 수있는 임의의 파일로부터 jar 파일의 내용을 읽어 내는데 사용 &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 의 . 선택적 &lt;code&gt;Manifest&lt;/code&gt; 항목 을 읽을 수 있도록 &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; 클래스를 확장합니다 . &lt;code&gt;Manifest&lt;/code&gt; jar 파일과 그 항목에 대한 메타 정보를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9792439c8b85ffb254058fa07ee9e18ecd9179ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; 의 클래스는 임의의 입력 스트림으로부터 JAR 파일의 내용을 판독하기 위해 사용된다.</target>
        </trans-unit>
        <trans-unit id="69fcbab6dd2a8326db4e277f74e623e45080d92f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream. It extends the class &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to store meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; 의 클래스는 임의의 입력 스트림으로부터 JAR 파일의 내용을 판독하기 위해 사용된다. 선택적 &lt;code&gt;Manifest&lt;/code&gt; 항목 을 읽을 수 있도록 &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; 클래스를 확장합니다 . &lt;code&gt;Manifest&lt;/code&gt; JAR 파일과 그 항목에 대한 메타 정보를 저장하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b21ac43a5a90b457145ee7b48bcabedf9e126557" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; 의 클래스는 모든 출력 스트림에 JAR 파일의 내용을 작성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8e11ba91a7108003e4972a4752848ed577893864" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream. It extends the class &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; with support for writing an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; 의 클래스는 모든 출력 스트림에 JAR 파일의 내용을 작성하는 데 사용됩니다. 선택적 &lt;code&gt;Manifest&lt;/code&gt; 항목 작성을 지원하여 &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; 클래스를 확장합니다 . &lt;code&gt;Manifest&lt;/code&gt; JAR 파일과 그 항목에 대한 메타 정보를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3aedd1952b22868e880c731ee5f88710d33b43b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JdbcRowSet&lt;/code&gt; describes a &lt;code&gt;RowSet&lt;/code&gt; object that &lt;b&gt;must&lt;/b&gt; always be connected to the originating data source. Implementations of the &lt;code&gt;JdbcRowSet&lt;/code&gt; should ensure that this connection is provided solely by a JDBC driver. Furthermore, &lt;code&gt;RowSet&lt;/code&gt; objects that are implementations of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface and are therefore operating in a connected environment do not use the &lt;code&gt;SyncFactory&lt;/code&gt; to obtain a &lt;code&gt;RowSetReader&lt;/code&gt; object or a &lt;code&gt;RowSetWriter&lt;/code&gt; object. They can safely rely on the JDBC driver to supply their needs by virtue of the presence of an underlying updatable and scrollable &lt;code&gt;ResultSet&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;JdbcRowSet&lt;/code&gt; 설명 &lt;code&gt;RowSet&lt;/code&gt; 객체 &lt;b&gt;한다&lt;/b&gt; 항상 원래 데이터 소스에 연결할 수 있습니다. &lt;code&gt;JdbcRowSet&lt;/code&gt; 의 구현은 이 연결이 JDBC 드라이버에 의해서만 제공되도록해야합니다. 또한 &lt;code&gt;JdbcRowSet&lt;/code&gt; 인터페이스의 구현 이므로 연결된 환경에서 작동 하는 &lt;code&gt;RowSet&lt;/code&gt; 객체 는 &lt;code&gt;SyncFactory&lt;/code&gt; 를 사용하여 &lt;code&gt;RowSetReader&lt;/code&gt; 를 얻지 않습니다. 오브젝트 또는 &lt;code&gt;RowSetWriter&lt;/code&gt; 의의 개체. 업데이트 및 스크롤 가능한 기본 &lt;code&gt;ResultSet&lt;/code&gt; 구현이 있으므로 JDBC 드라이버에 안전하게 의존하여 필요를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="93d19fc52241eaae58b0fd1278f2e42630f9be60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobImpressions&lt;/code&gt; attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the &lt;code&gt;JobImpressions&lt;/code&gt; attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the &lt;code&gt;JobImpressions&lt;/code&gt; attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the &lt;code&gt;JobImpressions&lt;/code&gt; attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">&lt;code&gt;JobImpressions&lt;/code&gt; 의 속성은 작업의 크기를 설명합니다. 이 속성은 카운터가 아닙니다. 알려진 경우 유용한 라우팅 및 스케줄링 정보가됩니다. 프린터가 &lt;code&gt;JobImpressions&lt;/code&gt; 계산을 시도 할 수 있습니다. 속성 값이 인쇄 요청에 제공되지 않은 경우 . 클라이언트가 인쇄 요청 의 &lt;code&gt;JobImpressions&lt;/code&gt; 속성 값을 제공하더라도 프린터가 클라이언트 제공 값보다 더 정확한 값을 계산할 수있는 경우 프린터는 값을 변경하도록 선택할 수 있습니다. 프린터는 작업 제출시 또는 나중에 언제든지 &lt;code&gt;JobImpressions&lt;/code&gt; 속성에 대한 올바른 값을 결정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4bddb97de4263dfb682eb09a9a222bc995bd9ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; attribute describes the progress of the job. This attribute is intended to be a counter. That is, the &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;PROCESSING&lt;/code&gt; or &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt;, the &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the &lt;code&gt;COMPLETED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;ABORTED&lt;/code&gt; states, the &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; value is the final value for the job.</source>
          <target state="translated">&lt;code&gt;JobImpressionsCompleted&lt;/code&gt; 의 속성은 작업의 진행 상황을 설명합니다. 이 속성은 카운터 용입니다. 즉, 처리를 시작하지 않은 작업에 대한 &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; 값은 0이어야합니다. 작업의 &lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;PROCESSING&lt;/code&gt; 또는 &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt; 인 경우 &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; 값은 작업이 처리됨에 따라 증가합니다. 인쇄 작업의 속성 세트가 조회 될 때 또는 인쇄 작업 이벤트가보고 될 때 처리 된 작업의 양을 나타냅니다. 작업이 &lt;code&gt;COMPLETED&lt;/code&gt; 에 진입하면 , &lt;code&gt;CANCELED&lt;/code&gt; 또는 &lt;code&gt;ABORTED&lt;/code&gt; 상태가되면 &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; 값은 작업의 최종 값입니다.</target>
        </trans-unit>
        <trans-unit id="9d42b11af45864561098fb5e73382d34ce4fcf25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctets&lt;/code&gt; attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the &lt;code&gt;JobKOctets&lt;/code&gt; attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the &lt;code&gt;JobKOctets&lt;/code&gt; attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the &lt;code&gt;JobKOctets&lt;/code&gt; attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">&lt;code&gt;JobKOctets&lt;/code&gt; 의 속성은 작업의 크기를 설명합니다. 이 속성은 카운터가 아닙니다. 알려진 경우 유용한 라우팅 및 스케줄링 정보가됩니다. 프린터는 &lt;code&gt;JobKOctets&lt;/code&gt; 속성의 값이 인쇄 요청에 제공되지 않은 경우 계산을 시도 할 수 있습니다 . 클라이언트가 인쇄 요청 의 &lt;code&gt;JobKOctets&lt;/code&gt; 속성 값을 제공하더라도 프린터가 클라이언트 제공 값보다 더 정확한 값을 계산할 수있는 경우 프린터는 값을 변경하도록 선택할 수 있습니다. 프린터는 작업 제출시 또는 나중에 언제든지 &lt;code&gt;JobKOctets&lt;/code&gt; 속성에 대한 올바른 값을 결정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f7855cd53d43de6e01d828f80467a04fb5f73419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctets&lt;/code&gt; value must also not include the multiplicative factor due to a copies instruction embedded in the document data. If the document data actually includes replications of the document data, this value will include such replication. In other words, this value is always the size of the source document data, rather than a measure of the hardcopy output to be produced.</source>
          <target state="translated">그만큼 &lt;code&gt;JobKOctets&lt;/code&gt; 의 값은 문서 데이터에 포함 된 복사 명령에 곱셈 계수를 포함 할 수 없습니다. 문서 데이터에 실제로 문서 데이터의 복제가 포함 된 경우이 값에는 이러한 복제가 포함됩니다. 즉,이 값은 생성 될 하드 카피 출력의 척도가 아니라 항상 소스 문서 데이터의 크기입니다.</target>
        </trans-unit>
        <trans-unit id="2f05f1d9f8bcaade508d2f1e15f4c164149584d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctets&lt;/code&gt; value must not include the multiplicative factors contributed by the number of copies specified by the &lt;a href=&quot;copies&quot;&gt;&lt;code&gt;Copies&lt;/code&gt;&lt;/a&gt; attribute, independent of whether the device can process multiple copies without making multiple passes over the job or document data and independent of whether the output is collated or not. Thus the value is independent of the implementation and indicates the size of the document(s) measured in K octets independent of the number of copies.</source>
          <target state="translated">&lt;code&gt;JobKOctets&lt;/code&gt; 의 값에 의해 지정된 매수 기부 곱셈 인자를 포함하지 않아야&lt;a href=&quot;copies&quot;&gt; &lt;code&gt;Copies&lt;/code&gt; &lt;/a&gt; 출력 대조 여부 장치가 작업 또는 문서 데이터에 다중 패스 않고 여러 복사본을 처리 할 수 있는지 여부와 무관하고 독립적 특성을 . 따라서 값은 구현과 무관하며 사본 수에 관계없이 K 옥텟으로 측정 된 문서의 크기를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0fc8388eff666e0318b26f69b533a081e5ec0d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; attribute describes the progress of the job. This attribute is intended to be a counter. That is, the JobKOctetsProcessed value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;PROCESSING&lt;/code&gt; or &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt;, the &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the &lt;code&gt;COMPLETED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;ABORTED&lt;/code&gt; states, the &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; value is the final value for the job.</source>
          <target state="translated">&lt;code&gt;JobKOctetsProcessed&lt;/code&gt; 속성은 작업의 진행 상황을 설명합니다. 이 속성은 카운터 용입니다. 즉, 처리를 시작하지 않은 작업에 대한 JobKOctetsProcessed 값은 0이어야합니다. 작업의 &lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;PROCESSING&lt;/code&gt; 또는 &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt; 인 경우 &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; 값은 작업이 처리됨에 따라 증가합니다. 인쇄 작업의 속성 세트가 조회 될 때 또는 인쇄 작업 이벤트가보고 될 때 처리 된 작업의 양을 나타냅니다. 작업이 &lt;code&gt;COMPLETED&lt;/code&gt; , &lt;code&gt;CANCELED&lt;/code&gt; 또는 &lt;code&gt;ABORTED&lt;/code&gt; 상태가되면 &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; value는 작업의 최종 값입니다.</target>
        </trans-unit>
        <trans-unit id="ab80f243ababcbf1f4897af7dc0b241257af280a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">&lt;code&gt;JobMediaSheets&lt;/code&gt; 의 속성은 작업의 크기를 설명합니다. 이 속성은 카운터가 아닙니다. 알려진 경우 유용한 라우팅 및 스케줄링 정보가됩니다. 프린터는 &lt;code&gt;JobMediaSheets&lt;/code&gt; 속성 값이 인쇄 요청에 제공되지 않은 경우 계산을 시도 할 수 있습니다 . 클라이언트가 인쇄 요청 의 &lt;code&gt;JobMediaSheets&lt;/code&gt; 속성 값을 제공하더라도 프린터가 클라이언트 제공 값보다 더 정확한 값을 계산할 수있는 경우 프린터는 값을 변경하도록 선택할 수 있습니다. 프린터는 작업 제출시 또는 나중에 언제든지 &lt;code&gt;JobMediaSheets&lt;/code&gt; 속성에 대한 올바른 값을 결정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a54724fe6880322ea331b2b691cec67ddf2633f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; attribute describes the progress of the job. This attribute is intended to be a counter. That is, the &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;PROCESSING&lt;/code&gt; or &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt;, the &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the &lt;code&gt;COMPLETED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;ABORTED&lt;/code&gt; states, the &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; value is the final value for the job.</source>
          <target state="translated">&lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; 의 속성은 작업의 진행 상황을 설명합니다. 이 속성은 카운터 용입니다. 즉, 처리를 시작하지 않은 작업에 대한 &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; 값은 0이어야합니다. 작업의 &lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;PROCESSING&lt;/code&gt; 또는 &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt; 인 경우 &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; 값은 작업이 처리됨에 따라 증가합니다. 인쇄 작업의 속성 세트가 조회 될 때 또는 인쇄 작업 이벤트가보고 될 때 처리 된 작업의 양을 나타냅니다. 작업이 &lt;code&gt;COMPLETED&lt;/code&gt; , &lt;code&gt;CANCELED&lt;/code&gt; 또는 &lt;code&gt;ABORTED&lt;/code&gt; 상태가되면 &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; value는 작업의 최종 값입니다.</target>
        </trans-unit>
        <trans-unit id="c444c9917a86296778e0e6b08a2e582e7061c85a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface makes it possible to get data from one or more &lt;code&gt;RowSet&lt;/code&gt; objects consolidated into one table without having to incur the expense of creating a connection to a database. It is therefore ideally suited for use by disconnected &lt;code&gt;RowSet&lt;/code&gt; objects. Nevertheless, any &lt;code&gt;RowSet&lt;/code&gt; object &lt;b&gt;may&lt;/b&gt; implement this interface regardless of whether it is connected or disconnected. Note that a &lt;code&gt;JdbcRowSet&lt;/code&gt; object, being always connected to its data source, can become part of an SQL &lt;code&gt;JOIN&lt;/code&gt; directly without having to become part of a &lt;code&gt;JoinRowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; 인터페이스는 가능 하나 데이터를 얻을 수 이상의 수 &lt;code&gt;RowSet&lt;/code&gt; 데이터베이스에 대한 연결을 만드는 비용을 부담 할 필요없이 하나 개의 테이블로 통합 객체. 따라서 연결이 끊긴 &lt;code&gt;RowSet&lt;/code&gt; 개체 에서 사용하기에 이상적 입니다. 그럼에도 불구하고 모든 &lt;code&gt;RowSet&lt;/code&gt; 객체 는 연결 또는 연결 해제 여부에 관계없이이 인터페이스를 구현할 &lt;b&gt;수 있습니다&lt;/b&gt; . 항상 데이터 소스에 연결되어 있는 &lt;code&gt;JdbcRowSet&lt;/code&gt; 객체 는 &lt;code&gt;JoinRowSet&lt;/code&gt; 객체의 일부가 될 필요없이 직접 SQL &lt;code&gt;JOIN&lt;/code&gt; 의 일부가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f89488be2cadf79b9f6dad30abbc989807edfe33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface provides a mechanism for combining related data from different &lt;code&gt;RowSet&lt;/code&gt; objects into one &lt;code&gt;JoinRowSet&lt;/code&gt; object, which represents an SQL &lt;code&gt;JOIN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; 인터페이스에서 다른 관련 데이터를 결합하는기구 제공 &lt;code&gt;RowSet&lt;/code&gt; 하나에 오브젝트 &lt;code&gt;JoinRowSet&lt;/code&gt; 는 SQL 나타내는 객체 &lt;code&gt;JOIN&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c1857f2dbacd9a2f415961fff2f3fc95dd362417" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface provides a mechanism for combining related data from different &lt;code&gt;RowSet&lt;/code&gt; objects into one &lt;code&gt;JoinRowSet&lt;/code&gt; object, which represents an SQL &lt;code&gt;JOIN&lt;/code&gt;. In other words, a &lt;code&gt;JoinRowSet&lt;/code&gt; object acts as a container for the data from &lt;code&gt;RowSet&lt;/code&gt; objects that form an SQL &lt;code&gt;JOIN&lt;/code&gt; relationship.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; 인터페이스에서 다른 관련 데이터를 결합하는기구 제공 &lt;code&gt;RowSet&lt;/code&gt; 하나에 오브젝트 &lt;code&gt;JoinRowSet&lt;/code&gt; 는 SQL 나타내는 객체 &lt;code&gt;JOIN&lt;/code&gt; . 즉, &lt;code&gt;JoinRowSet&lt;/code&gt; 개체는 SQL &lt;code&gt;JOIN&lt;/code&gt; 관계 를 형성하는 &lt;code&gt;RowSet&lt;/code&gt; 개체 의 데이터에 대한 컨테이너 역할을합니다 .</target>
        </trans-unit>
        <trans-unit id="7578c4dd8747a98c2f27b38c1875d232348cb143" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface supplies several methods for adding &lt;code&gt;RowSet&lt;/code&gt; objects and for getting information about the &lt;code&gt;JoinRowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; 인터페이스를 추가하기위한 여러 가지 방법을 제공 &lt;code&gt;RowSet&lt;/code&gt; 객체를과에 대한 정보를 얻기 위해 &lt;code&gt;JoinRowSet&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="dc7199ca969d2a56a6e584a155cf8330e9b15154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; 객체</target>
        </trans-unit>
        <trans-unit id="7a61ffc158a0daba9a2c2610781cd68fa97c1b0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Joinable&lt;/code&gt; interface provides both connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects with the capability to be added to a &lt;code&gt;JoinRowSet&lt;/code&gt; object in an SQL &lt;code&gt;JOIN&lt;/code&gt; operation. A &lt;code&gt;RowSet&lt;/code&gt; object that has implemented the &lt;code&gt;Joinable&lt;/code&gt; interface can set a match column, retrieve a match column, or unset a match column. A &lt;code&gt;JoinRowSet&lt;/code&gt; object can then use the &lt;code&gt;RowSet&lt;/code&gt; object's match column as a basis for adding the &lt;code&gt;RowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Joinable&lt;/code&gt; 인터페이스 모두에 접속이 끊긴 제공 &lt;code&gt;RowSet&lt;/code&gt; (A)에 첨가 될 수있는 기능을 가진 개체 &lt;code&gt;JoinRowSet&lt;/code&gt; 는 SQL 객체에 &lt;code&gt;JOIN&lt;/code&gt; 동작. &lt;code&gt;Joinable&lt;/code&gt; 인터페이스 를 구현 한 &lt;code&gt;RowSet&lt;/code&gt; 개체 는 일치 열을 설정하거나 일치 열을 검색하거나 일치 열을 설정 해제 할 수 있습니다. &lt;code&gt;JoinRowSet&lt;/code&gt; 오브젝트는 사용할 수 &lt;code&gt;RowSet&lt;/code&gt; , 가산의 기준으로 객체의 일치 열을 &lt;code&gt;RowSet&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="898a003c1a219e2ced5b5d58761137f53a86daf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Joinable&lt;/code&gt; interface provides the methods for getting and setting a match column, which is the basis for forming the SQL &lt;code&gt;JOIN&lt;/code&gt; formed by adding &lt;code&gt;RowSet&lt;/code&gt; objects to a &lt;code&gt;JoinRowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Joinable&lt;/code&gt; 인터페이스를 가져오고 SQL을 형성하는 기초가 치열, 설정하는 방법을 제공 &lt;code&gt;JOIN&lt;/code&gt; 첨가함으로써 형성 &lt;code&gt;RowSet&lt;/code&gt; (A)에 객체 &lt;code&gt;JoinRowSet&lt;/code&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="6c98ed7a0aa6729127f3b5355f11517cb27023e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Joinable&lt;/code&gt; interface provides the methods for setting, retrieving, and unsetting a match column, the basis for establishing an SQL &lt;code&gt;JOIN&lt;/code&gt; relationship. The match column may alternatively be set by supplying it to the appropriate version of the &lt;code&gt;JointRowSet&lt;/code&gt; method &lt;code&gt;addRowSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Joinable&lt;/code&gt; 인터페이스 치열을 입수 설정하고 해제하기위한 방법을 제공하여 SQL을 확립하기위한 기초가 &lt;code&gt;JOIN&lt;/code&gt; 관계. 일치 열은 적절한 버전의 &lt;code&gt;JointRowSet&lt;/code&gt; 메서드 &lt;code&gt;addRowSet&lt;/code&gt; 에 제공하여 대안으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f1f4f673ec67c141b6306875c6fc5a1a9ed847e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Kernel&lt;/code&gt; class defines a matrix that describes how a specified pixel and its surrounding pixels affect the value computed for the pixel's position in the output image of a filtering operation.</source>
          <target state="translated">&lt;code&gt;Kernel&lt;/code&gt; 클래스는 특정 화소와 그 주변 화소가 필터링 동작의 출력 화상의 화소의 위치에 대한 값의 계산에 미치는 영향을 설명하는 행렬을 정의한다.</target>
        </trans-unit>
        <trans-unit id="aed135fe5a2836a7febd759a0b7dd3615e9857fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Kernel&lt;/code&gt; class defines a matrix that describes how a specified pixel and its surrounding pixels affect the value computed for the pixel's position in the output image of a filtering operation. The X origin and Y origin indicate the kernel matrix element that corresponds to the pixel position for which an output value is being computed.</source>
          <target state="translated">&lt;code&gt;Kernel&lt;/code&gt; 클래스는 특정 화소와 그 주변 화소가 필터링 동작의 출력 화상의 화소의 위치에 대한 값의 계산에 미치는 영향을 설명하는 행렬을 정의한다. X 원점과 Y 원점은 출력 값이 계산되는 픽셀 위치에 해당하는 커널 행렬 요소를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="dbb5aa603ed056efc13af2d1e9ede1198ceeff82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;KeyListener&lt;/code&gt; listens to events.</source>
          <target state="translated">&lt;code&gt;KeyListener&lt;/code&gt; 이벤트를 수신합니다.</target>
        </trans-unit>
        <trans-unit id="f7ba9fc1db8d36724267f1d6e78cc837f060c123" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LINK&lt;/code&gt; element specifies a link to an external resource, and defines this document's relationship to that resource (or vice versa).</source>
          <target state="translated">&lt;code&gt;LINK&lt;/code&gt; 의 요소는 외부 자원에 대한 링크를 특정하고, 그 자원 (또는 그 반대)는이 문서의 관계를 정의한다.</target>
        </trans-unit>
        <trans-unit id="21c303360ad460c3c97476f02a94fa6daca4191b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LINK&lt;/code&gt; element specifies a link to an external resource, and defines this document's relationship to that resource (or vice versa). See the LINK element definition in HTML 4.0 (see also the &lt;code&gt;LinkStyle&lt;/code&gt; interface in the module).</source>
          <target state="translated">&lt;code&gt;LINK&lt;/code&gt; 의 요소는 외부 자원에 대한 링크를 특정하고, 그 자원 (또는 그 반대)는이 문서의 관계를 정의한다. HTML 4.0의 LINK 요소 정의를 참조하십시오 ( 모듈 의 &lt;code&gt;LinkStyle&lt;/code&gt; 인터페이스 참조 ).</target>
        </trans-unit>
        <trans-unit id="1ba6ae2f73582921151c31506b596f41216de90c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LONG&lt;/code&gt; number format style.</source>
          <target state="translated">&lt;code&gt;LONG&lt;/code&gt; 숫자 형식 스타일.</target>
        </trans-unit>
        <trans-unit id="d6b5e428374ca40e15cacba872157456e91fd39f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; finishes to load the document. See also the definition of the &lt;code&gt;LSLoadEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; 에이 문서를로드 완료. &lt;code&gt;LSLoadEvent&lt;/code&gt; 인터페이스 의 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="24fb60957485d297ee80a09e8ce85ca8ca0ba39b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; signals progress as data is parsed. This specification does not attempt to define exactly when progress events should be dispatched. That is intentionally left as implementation-dependent. Here is one example of how an application might dispatch progress events: Once the parser starts receiving data, a progress event is dispatched to indicate that the parsing starts. From there on, a progress event is dispatched for every 4096 bytes of data that is received and processed. This is only one example, though, and implementations can choose to dispatch progress events at any time while parsing, or not dispatch them at all. See also the definition of the &lt;code&gt;LSProgressEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; 에의 데이터 파싱 신호로 진행. 이 사양은 진행 이벤트가 전달되어야하는시기를 정확히 정의하려고 시도하지 않습니다. 이는 구현에 따라 의도적으로 남겨집니다. 다음은 응용 프로그램이 progress 이벤트를 전달하는 방법에 대한 한 가지 예입니다. 파서가 데이터 수신을 시작하면 progress 이벤트가 전달되어 구문 분석이 시작되었음을 나타냅니다. 그 이후로 수신 및 처리되는 데이터의 4096 바이트마다 진행 이벤트가 전달됩니다. 그러나 이것은 하나의 예일 뿐이며 구현은 파싱하는 동안 언제든지 진행률 이벤트를 전달하거나 전혀 전달하지 않도록 선택할 수 있습니다. &lt;code&gt;LSProgressEvent&lt;/code&gt; 인터페이스 의 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5684589f50bcba0622244d4195787b54fb19754" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; will call this method before opening any external resource, including the external DTD subset, external entities referenced within the DTD, and external entities referenced within the document element (however, the top-level document entity is not passed to this method). The application may then request that the &lt;code&gt;LSParser&lt;/code&gt; resolve the external resource itself, that it use an alternative URI, or that it use an entirely different input source.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; 외부 DTD 서브셋의 DTD 내에서 참조되는 외부 엔티티, 및 문서 요소 (단, 최상위 원고 엔티티는 이러한 방법에 전달되지 않은) 내에서 참조되는 외부 엔티티 포함한 외부 리소스를 열기 전에이 메소드를 호출한다. 그런 다음 응용 프로그램은 &lt;code&gt;LSParser&lt;/code&gt; 가 외부 리소스 자체를 확인하거나 대체 URI를 사용하거나 완전히 다른 입력 소스를 사용하도록 요청할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fdd3b33932c3d78818e6cfefc7e1379df1e81cc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; will then allow the application to intercept any external entities, including the external DTD subset and external parameter entities, before including them. The top-level document entity is never passed to the &lt;code&gt;resolveResource&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; 에는 다음 외부 DTD 부분 집합, 외부 매개 변수 엔티티를 포함한 모든 외부 엔티티, 그것들을 포함하기 전에 요격에 응용 프로그램을 수 있습니다. 최상위 수준 문서 엔터티는 &lt;code&gt;resolveResource&lt;/code&gt; 메서드에 전달되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="85452716c344379ce6f46987e158daa17b45c892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; will use the &lt;code&gt;LSInput&lt;/code&gt; object to determine how to read data. The &lt;code&gt;LSParser&lt;/code&gt; will look at the different inputs specified in the &lt;code&gt;LSInput&lt;/code&gt; in the following order to know which one to read from, the first one that is not null and not an empty string will be used:</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; 에이 사용됩니다 &lt;code&gt;LSInput&lt;/code&gt; 에의 데이터를 읽는 방법을 결정하기 위해 개체를. &lt;code&gt;LSParser&lt;/code&gt; 에은 에 지정된 다른 입력을 볼 것이다 &lt;code&gt;LSInput&lt;/code&gt; 에 null가 아니고,하지 빈 문자열이 사용되는 첫 번째,에서 읽을 어느 알고 다음과 같은 순서로 :</target>
        </trans-unit>
        <trans-unit id="8385bbcd998f782ed6e1f77152400b1721a89972" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSSerializer&lt;/code&gt; will use the &lt;code&gt;LSOutput&lt;/code&gt; object to determine where to serialize the output to. The &lt;code&gt;LSSerializer&lt;/code&gt; will look at the different outputs specified in the &lt;code&gt;LSOutput&lt;/code&gt; in the following order to know which one to output to, the first one that is not null and not an empty string will be used:</source>
          <target state="translated">&lt;code&gt;LSSerializer&lt;/code&gt; 에이 사용됩니다 &lt;code&gt;LSOutput&lt;/code&gt; 의 출력을 직렬화하는 장소를 결정하기 위해 개체를. &lt;code&gt;LSSerializer&lt;/code&gt; 에은 에 지정된 다른 출력을 볼 것이다 &lt;code&gt;LSOutput&lt;/code&gt; 로 출력, 널 (null)과 빈 문자열을 사용할 수 아닌 최초의 할 일을 알고 다음과 같은 순서로 :</target>
        </trans-unit>
        <trans-unit id="9290bae2dd98060748530a990a5b9934c224d813" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LayerUI&lt;/code&gt; differs from the UI delegates of the other components, because it is LookAndFeel independent and is not updated by default when the system LookAndFeel is changed.</source>
          <target state="translated">&lt;code&gt;LayerUI&lt;/code&gt; 의 그것의 LookAndFeel 독립적이며, 시스템의 LookAndFeel가 변경 될 때 디폴트로 갱신되지 않기 때문에, 다른 부품의 UI 위임 다르다.</target>
        </trans-unit>
        <trans-unit id="30a19dcac608ceb517d3a3561447251ee1e2014f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; 인터페이스는 모노 또는 멀티 채널 오디오 피드를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="c0a9c7f256b3eaca5dedae690146aa91b18206a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed. A line is an element of the digital audio &quot;pipeline,&quot; such as a mixer, an input or output port, or a data path into or out of a mixer.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; 인터페이스는 모노 또는 멀티 채널 오디오 피드를 나타낸다. 라인은 믹서, 입력 또는 출력 포트 또는 믹서 내외부 데이터 경로와 같은 디지털 오디오 &quot;파이프 라인&quot;의 요소입니다.</target>
        </trans-unit>
        <trans-unit id="12ff24d6407a52b7dc2753e301cab6bdaa7ab15a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineBreakMeasurer&lt;/code&gt; class allows styled text to be broken into lines (or segments) that fit within a particular visual advance.</source>
          <target state="translated">&lt;code&gt;LineBreakMeasurer&lt;/code&gt; 에의 클래스는 텍스트 라인 (또는 세그먼트들)로 분할되는 특정 시각 사전 내의 그 착용감 스타일 허용한다.</target>
        </trans-unit>
        <trans-unit id="70b0f123d2e6f96d4d1b70fcd70bc4ae2d723f77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineBreakMeasurer&lt;/code&gt; class allows styled text to be broken into lines (or segments) that fit within a particular visual advance. This is useful for clients who wish to display a paragraph of text that fits within a specific width, called the &lt;b&gt;wrapping width&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;LineBreakMeasurer&lt;/code&gt; 에의 클래스는 텍스트 라인 (또는 세그먼트들)로 분할되는 특정 시각 사전 내의 그 착용감 스타일 허용한다. 이 기능은 &lt;b&gt;줄 바꿈 너비&lt;/b&gt; 라고하는 특정 너비에 맞는 텍스트 단락을 표시하려는 클라이언트에게 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="5d3a35d12e8c0c113e33da5350a5b5580d8cb3c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; 의 클래스는 라인이 닫히고, 시작, 또는 중지를 열 때마다 광고가 청취자에게 송신하는 정보를 캡슐화한다.</target>
        </trans-unit>
        <trans-unit id="1757f3f9d53b925c75021680d8beaafc5e2dbd56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops. Each of these four state changes is represented by a corresponding type of event. A listener receives the event as a parameter to its &lt;a href=&quot;linelistener#update(javax.sound.sampled.LineEvent)&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; method. By querying the event, the listener can learn the type of event, the line responsible for the event, and how much data the line had processed when the event occurred.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; 의 클래스는 라인이 닫히고, 시작, 또는 중지를 열 때마다 광고가 청취자에게 송신하는 정보를 캡슐화한다. 이러한 네 가지 상태 변경은 각각 해당 유형의 이벤트로 표시됩니다. 리스너는 이벤트를 &lt;a href=&quot;linelistener#update(javax.sound.sampled.LineEvent)&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt; 메소드에 대한 매개 변수로 수신합니다 . 이벤트를 쿼리함으로써 리스너는 이벤트 유형, 이벤트를 담당하는 라인 및 이벤트가 발생했을 때 라인이 처리 한 데이터의 양을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="537f7328063a159d8e4878b6fccbf45636c737b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops. Each of these four state changes is represented by a corresponding type of event. A listener receives the event as a parameter to its &lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; method. By querying the event, the listener can learn the type of event, the line responsible for the event, and how much data the line had processed when the event occurred.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; 의 클래스는 라인이 닫히고, 시작, 또는 중지를 열 때마다 광고가 청취자에게 송신하는 정보를 캡슐화한다. 이 네 가지 상태 변경은 각각 해당하는 이벤트 유형으로 표시됩니다. 리스너는 &lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt; 메소드에 대한 매개 변수로 이벤트를 수신합니다 . 리스너는 이벤트를 조회하여 이벤트 유형, 이벤트를 담당하는 회선 및 이벤트 발생시 회선이 처리 한 데이터 양을 학습 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a317f9411bdfedbd114bb89ebf0f60e340b551a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineMetrics&lt;/code&gt; class allows access to the metrics needed to layout characters along a line and to layout of a set of lines.</source>
          <target state="translated">&lt;code&gt;LineMetrics&lt;/code&gt; 클래스는 선을 따라 행 세트를 레이아웃에 레이아웃 문자에 필요한 통계에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8c1ff382b3ddfcfd21eb439e247cc38410f25c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineMetrics&lt;/code&gt; class allows access to the metrics needed to layout characters along a line and to layout of a set of lines. A &lt;code&gt;LineMetrics&lt;/code&gt; object encapsulates the measurement information associated with a run of text.</source>
          <target state="translated">&lt;code&gt;LineMetrics&lt;/code&gt; 클래스는 선을 따라 행 세트를 레이아웃에 레이아웃 문자에 필요한 통계에 액세스 할 수 있습니다. &lt;code&gt;LineMetrics&lt;/code&gt; 객체는 일련의 텍스트에 관련한 측정 정보를 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="ec210c5e83962b1ca145d61862892dacceb18265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinearGradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern.</source>
          <target state="translated">&lt;code&gt;LinearGradientPaint&lt;/code&gt; 의 클래스는 칠하는 수단 제공 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 선형 색 그라데이션 패턴을.</target>
        </trans-unit>
        <trans-unit id="33c4bb6b8473c6e7b6f098a98815d32e62391d30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinearGradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern. The user may specify two or more gradient colors, and this paint will provide an interpolation between each color. The user also specifies start and end points which define where in user space the color gradient should begin and end.</source>
          <target state="translated">&lt;code&gt;LinearGradientPaint&lt;/code&gt; 의 클래스는 칠하는 수단 제공 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 선형 색 그라데이션 패턴을. 사용자는 둘 이상의 그라디언트 색상을 지정할 수 있으며이 페인트는 각 색상 사이에 보간을 제공합니다. 사용자는 또한 사용자 공간에서 색상 그라디언트가 시작되고 끝나야하는 위치를 정의하는 시작점과 끝점을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="590ddeb3999b2dcd7c427e16493246a3a0921d7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinkStyle&lt;/code&gt; interface provides a mechanism by which a style sheet can be retrieved from the node responsible for linking it into a document.</source>
          <target state="translated">&lt;code&gt;LinkStyle&lt;/code&gt; 의 인터페이스는 스타일 시트가 문서에 연결을 담당하는 노드에서 검색 할 수있는 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ae5dece67b75f3313ffc73047158c0bfd013b9ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinkStyle&lt;/code&gt; interface provides a mechanism by which a style sheet can be retrieved from the node responsible for linking it into a document. An instance of the &lt;code&gt;LinkStyle&lt;/code&gt; interface can be obtained using binding-specific casting methods on an instance of a linking node (&lt;code&gt;HTMLLinkElement&lt;/code&gt;, &lt;code&gt;HTMLStyleElement&lt;/code&gt; or &lt;code&gt;ProcessingInstruction&lt;/code&gt; in DOM Level 2).</source>
          <target state="translated">&lt;code&gt;LinkStyle&lt;/code&gt; 의 인터페이스는 스타일 시트가 문서에 연결을 담당하는 노드에서 검색 할 수있는 메커니즘을 제공합니다. 의 인스턴스 &lt;code&gt;LinkStyle&lt;/code&gt; 의 인터페이스는 연결 노드 (인스턴스에 바인딩 특정 캐스팅 방법을 사용하여 얻을 수있다 &lt;code&gt;HTMLLinkElement&lt;/code&gt; , &lt;code&gt;HTMLStyleElement&lt;/code&gt; 또는 &lt;code&gt;ProcessingInstruction&lt;/code&gt; DOM 레벨 2).</target>
        </trans-unit>
        <trans-unit id="c21b1c3905ebd125a9dff4a98c4563b298e71acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; component presents the user with a scrolling list of text items.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 구성 요소 선물 텍스트 항목의 스크롤 목록을 사용자.</target>
        </trans-unit>
        <trans-unit id="1cd681191d602e2ed6ce9e4db14238ca5d03680a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; component presents the user with a scrolling list of text items. The list can be set up so that the user can choose either one item or multiple items.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 구성 요소 선물 텍스트 항목의 스크롤 목록을 사용자. 사용자가 한 항목 또는 여러 항목을 선택할 수 있도록 목록을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19683692a3cac37612a80dd55d3fd092b1967a4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface places additional stipulations, beyond those specified in the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of the &lt;code&gt;iterator&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스에서 규정 한 이상, 추가 규정을 배치 &lt;code&gt;Collection&lt;/code&gt; 의 계약에 인터페이스 &lt;code&gt;iterator&lt;/code&gt; , &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; , &lt;code&gt;equals&lt;/code&gt; 및 &lt;code&gt;hashCode&lt;/code&gt; 방법. 편의상 다른 상속 된 메소드에 대한 선언도 여기에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a0ba9a5b693daac5c19b3fccbb0faf8853cdabbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides a special iterator, called a &lt;code&gt;ListIterator&lt;/code&gt;, that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the &lt;code&gt;Iterator&lt;/code&gt; interface provides. A method is provided to obtain a list iterator that starts at a specified position in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스는라는 특별한 반복자 제공 &lt;code&gt;ListIterator&lt;/code&gt; 요소 삽입 및 교체하고있는 일반적인 작업뿐만 아니라 양방향 액세스 할 수 있습니다, &lt;code&gt;Iterator&lt;/code&gt; 인터페이스를 제공합니다. 리스트의 지정된 위치에서 시작하는리스트 반복자를 얻는 방법이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="2b090913d205b579f0fbce24a3f90785bc1ba625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides four methods for positional (indexed) access to list elements. Lists (like Java arrays) are zero based. Note that these operations may execute in time proportional to the index value for some implementations (the &lt;code&gt;LinkedList&lt;/code&gt; class, for example). Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스 목록에 대한 위치 요소 (인덱스) 액세스를위한 네 가지 방법을 제공한다. Java 배열과 같은 목록은 0부터 시작합니다. 이러한 작업은 일부 구현 ( 예 : &lt;code&gt;LinkedList&lt;/code&gt; 클래스) 의 인덱스 값에 비례하여 시간에 따라 실행될 수 있습니다 . 따라서, 호출자가 구현을 모르는 경우 목록의 요소를 반복하는 것이 일반적으로이를 통해 색인화하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="70355f014486445e2f19c1b1f444e1ecb381cd12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to efficiently insert and remove multiple elements at an arbitrary point in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스를 효율적으로 삽입하고,리스트 내의 임의의 점에서 복수의 요소를 제거하는 두 가지 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="fe82cde6eede4b779cf568cf70079098275cd445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to search for a specified object. From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 인터페이스는 지정된 객체를 검색하는 두 가지 방법을 제공합니다. 성능 관점에서 이러한 방법은주의해서 사용해야합니다. 많은 구현에서 그들은 값 비싼 선형 검색을 수행 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="d5f5959f322b845c985e2f025760b04b9f414ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListDataListener&lt;/code&gt; that's added to the &lt;code&gt;JLists&lt;/code&gt; model at &lt;code&gt;installUI time&lt;/code&gt;, and whenever the JList.model property changes.</source>
          <target state="translated">&lt;code&gt;installUI time&lt;/code&gt; 및 JList.model 속성이 변경 될 때마다 &lt;code&gt;JLists&lt;/code&gt; 모델에 추가 되는 &lt;code&gt;ListDataListener&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="bf00cf318d8d3e87e034ff374fa7601d594536b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListSelectionModel&lt;/code&gt; of the table, used to keep track of row selections.</source>
          <target state="translated">행 선택을 추적하는 데 사용되는 테이블 의 &lt;code&gt;ListSelectionModel&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="80c3e343f9a3334aa90fca73bdf887fa22a1c873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports an extension mechanism that can be used to identify a calendar system. The mechanism is a form of key-value pairs, where the calendar system has the key &quot;ca&quot;. For example, the locale &quot;en-JP-u-ca-japanese&quot; represents the English language as used in Japan with the Japanese calendar system.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스는 달력 시스템을 식별하는 데 사용할 수있는 확장 메커니즘을 지원합니다. 이 메커니즘은 달력 시스템에 키 &quot;ca&quot;가있는 키-값 쌍의 형태입니다. 예를 들어 로케일 &quot;en-JP-u-ca-japanese&quot;는 일본어 달력 시스템과 함께 일본에서 사용되는 영어를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="df60f90896c3c9a6114af933224b8f6b6310599a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports language codes up to 8 characters in length. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스는 길이가 8 자 언어 코드를 지원합니다. 따라서이 메서드가 반환 한 목록에는 로캘을 만드는 데 사용할 수있는 유효한 코드가 모두 포함되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ff489719e325fe97b92428c9169b9fa65846b849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class implements IETF BCP 47 which is composed of &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;Matching of Language Tags&quot;&lt;/a&gt; and &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;RFC 5646 &quot;Tags for Identifying Languages&quot;&lt;/a&gt; with support for the LDML (UTS#35, &quot;Unicode Locale Data Markup Language&quot;) BCP 47-compatible extensions for locale data exchange.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 로 구성되어 클래스가 구현하는 IETF BCP 47 &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;언어 태그의 일치&quot;&lt;/a&gt; 와 &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;&quot;언어 식별 태그&quot;RFC 5646&lt;/a&gt; (UTS # 35, &quot;유니 코드 로케일 데이터 마크 업 언어&quot;) BCP 47 호환 LDML에 대한 지원 로케일 데이터 교환을위한 확장.</target>
        </trans-unit>
        <trans-unit id="86ef8f8b1c2cc5e0c4e3c8be8198fdebfc6064b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class implements IETF BCP 47 which is composed of &lt;a href=&quot;https://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;Matching of Language Tags&quot;&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc5646&quot;&gt;RFC 5646 &quot;Tags for Identifying Languages&quot;&lt;/a&gt; with support for the LDML (UTS#35, &quot;Unicode Locale Data Markup Language&quot;) BCP 47-compatible extensions for locale data exchange.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 로 구성되어 클래스가 구현하는 IETF BCP 47 &lt;a href=&quot;https://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;언어 태그의 일치&quot;&lt;/a&gt; 와 &lt;a href=&quot;https://tools.ietf.org/html/rfc5646&quot;&gt;&quot;언어 식별 태그&quot;RFC 5646&lt;/a&gt; (UTS # 35, &quot;유니 코드 로케일 데이터 마크 업 언어&quot;) BCP 47 호환 LDML에 대한 지원 로케일 데이터 교환을위한 확장.</target>
        </trans-unit>
        <trans-unit id="b49e579633330874272c018a016eeeecd34916da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides a number of convenient constants that you can use to create &lt;code&gt;Locale&lt;/code&gt; objects for commonly used locales. For example, the following creates a &lt;code&gt;Locale&lt;/code&gt; object for the United States:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스를 생성하는 데 사용할 수있는 편리한 상수의 숫자 제공 &lt;code&gt;Locale&lt;/code&gt; 일반적으로 사용되는 로케일 오브젝트를. 예를 들어 다음은 미국에 대한 &lt;code&gt;Locale&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="fa1e07d1d615f3001a87ae91c2a0604617a8b571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides three constructors:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; 클래스는 세 개의 생성자를 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="154dd3c2315f6100804c904415eeede9ad2a13fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Logger&lt;/code&gt; that has been specified for use by &lt;code&gt;SyncProvider&lt;/code&gt; implementations</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; 로 사용하기 위해 지정되었습니다 &lt;code&gt;SyncProvider&lt;/code&gt; 구현</target>
        </trans-unit>
        <trans-unit id="29f650595b9f348aa19ea69fc4ffab1e764aac3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoggerFinder&lt;/code&gt; service is responsible for creating, managing, and configuring loggers to the underlying framework it uses.</source>
          <target state="translated">&lt;code&gt;LoggerFinder&lt;/code&gt; 의 서비스를 생성, 관리하고 사용하는 기본 프레임 워크 로거를 구성하기위한 책임이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d949a93c9d9a78edeb4d078a66d8ba0c9af79890" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoggerFinder&lt;/code&gt; service is responsible for creating, managing, and configuring loggers to the underlying framework it uses. A logger finder is a concrete implementation of this class that has a zero-argument constructor and implements the abstract methods defined by this class. The loggers returned from a logger finder are capable of routing log messages to the logging backend this provider supports. A given invocation of the Java Runtime maintains a single system-wide LoggerFinder instance that is loaded as follows:</source>
          <target state="translated">&lt;code&gt;LoggerFinder&lt;/code&gt; 의 서비스를 생성, 관리하고 사용하는 기본 프레임 워크 로거를 구성하기위한 책임이 있습니다. 로거 파인더는 인수가없는 생성자를 갖고이 클래스에 의해 정의 된 추상 메서드를 구현하는이 클래스의 구체적인 구현입니다. 로거 파인더에서 반환 된 로거는이 공급자가 지원하는 로깅 백엔드로 로그 메시지를 라우팅 할 수 있습니다. Java 런타임의 지정된 호출은 다음과 같이로드되는 단일 시스템 전체 LoggerFinder 인스턴스를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="753e94e16d15c98e2261f7d3bdcddbdc2d027d5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; 클래스는 인증 용 주제에 사용되는 기본적인 방법을 설명하고 기본 인증 기술에 의존하지 않는 어플리케이션 개발하는 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="98c21b51d0ddf913deb3a4a49b2303d25a261498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. A &lt;code&gt;Configuration&lt;/code&gt; specifies the authentication technology, or &lt;code&gt;LoginModule&lt;/code&gt;, to be used with a particular application. Different LoginModules can be plugged in under an application without requiring any modifications to the application itself.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; 클래스는 인증 용 주제에 사용되는 기본적인 방법을 설명하고 기본 인증 기술에 의존하지 않는 어플리케이션 개발하는 방법을 제공한다. &lt;code&gt;Configuration&lt;/code&gt; 인증 기술 또는 지정 &lt;code&gt;LoginModule&lt;/code&gt; 의 특정 응용에 사용되는이. 응용 프로그램 자체를 수정하지 않고도 응용 프로그램에서 다른 LoginModule을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24bd53fa001fd556da21468c145af7d9ff2e52d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; is responsible for reading the &lt;code&gt;Configuration&lt;/code&gt; and instantiating the appropriate LoginModules. Each &lt;code&gt;LoginModule&lt;/code&gt; is initialized with a &lt;code&gt;Subject&lt;/code&gt;, a &lt;code&gt;CallbackHandler&lt;/code&gt;, shared &lt;code&gt;LoginModule&lt;/code&gt; state, and LoginModule-specific options. The &lt;code&gt;Subject&lt;/code&gt; represents the &lt;code&gt;Subject&lt;/code&gt; currently being authenticated and is updated with relevant Credentials if authentication succeeds. LoginModules use the &lt;code&gt;CallbackHandler&lt;/code&gt; to communicate with users. The &lt;code&gt;CallbackHandler&lt;/code&gt; may be used to prompt for usernames and passwords, for example. Note that the &lt;code&gt;CallbackHandler&lt;/code&gt; may be null. LoginModules which absolutely require a &lt;code&gt;CallbackHandler&lt;/code&gt; to authenticate the &lt;code&gt;Subject&lt;/code&gt; may throw a &lt;code&gt;LoginException&lt;/code&gt;. LoginModules optionally use the shared state to share information or data among themselves.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; 판독에 대한 책임이 &lt;code&gt;Configuration&lt;/code&gt; 적절한 로그인 모듈 및 인스턴스화. 각 &lt;code&gt;LoginModule&lt;/code&gt; 은 &lt;code&gt;Subject&lt;/code&gt; , &lt;code&gt;CallbackHandler&lt;/code&gt; , 공유 &lt;code&gt;LoginModule&lt;/code&gt; 상태 및 LoginModule 관련 옵션 으로 초기화됩니다 . &lt;code&gt;Subject&lt;/code&gt; 대표하는 &lt;code&gt;Subject&lt;/code&gt; 현재 인증 된 인증이 성공하면 관련 자격 증명으로 업데이트됩니다. LoginModule은 &lt;code&gt;CallbackHandler&lt;/code&gt; 를 사용하여 사용자와 통신합니다. &lt;code&gt;CallbackHandler&lt;/code&gt; 예를 들어, 사용자 이름과 암호에 대한 프롬프트로 사용할 수있다. 참고 그 &lt;code&gt;CallbackHandler&lt;/code&gt; null 일 수 있습니다. &lt;code&gt;Subject&lt;/code&gt; 를 인증하기 위해 반드시 &lt;code&gt;CallbackHandler&lt;/code&gt; 가 필요한 LoginModule 은 &lt;code&gt;LoginException&lt;/code&gt; 을 던질 수 있습니다 . LoginModule은 선택적으로 공유 상태를 사용하여 정보 또는 데이터를 서로 공유합니다.</target>
        </trans-unit>
        <trans-unit id="b21ebcd0d4d483586ab3807b4d68805315158ccb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;
 long&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 클래스는 원시적 형의 값을 감싸는 &lt;code&gt; long&lt;/code&gt; 물체에.</target>
        </trans-unit>
        <trans-unit id="d90c04bbbf4599ac5901e7f0958b186b8247c1b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;
 long&lt;/code&gt; in an object. An object of type &lt;code&gt;Long&lt;/code&gt; contains a single field whose type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 클래스는 원시적 형의 값을 감싸는 &lt;code&gt; long&lt;/code&gt; 물체에. &lt;code&gt;Long&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;long&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="7801867034780a1c5fff70e8cc7e32057101d13e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 클래스는 원시적 형의 값을 감싸는 &lt;code&gt;long&lt;/code&gt; 물체에.</target>
        </trans-unit>
        <trans-unit id="e7f5fb0211de99c25185ee45c0d498d693daf127" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object. An object of type &lt;code&gt;Long&lt;/code&gt; contains a single field whose type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; 클래스는 원시적 형의 값을 감싸는 &lt;code&gt;long&lt;/code&gt; 물체에. &lt;code&gt;Long&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;long&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="b73aaaf679d63a88eb466b691fdb58c718db13f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 클래스의 통지 Java 클래스 들면 MBean에 의해 방출 된 상이한 통지 경우의 특성을 설명하는 데 사용된다.</target>
        </trans-unit>
        <trans-unit id="8c0d93d2a05b2c51593dc81a25c6a33e58b7c2f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification. If an MBean emits notifications that can be instances of different Java classes, then the metadata for that MBean should provide an &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; object for each of these notification Java classes.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 클래스의 통지 Java 클래스 들면 MBean에 의해 방출 된 상이한 통지 경우의 특성을 설명하는 데 사용된다. MBean이 다른 Java 클래스의 인스턴스 일 수있는 알림을 생성하는 경우 해당 MBean의 메타 데이터 는 이러한 각 알림 Java 클래스에 대해 &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 오브젝트를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="de572685114708d2dbbbf2708ab7dd9cc02d6fb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; 되는이 커넥터 서버가 부착된다.</target>
        </trans-unit>
        <trans-unit id="d306b6b1cd1b367a72d76620a44c2997e616fcf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached. This is the last value passed to &lt;a href=&quot;#setMBeanServer(javax.management.MBeanServer)&quot;&gt;&lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt;&lt;/a&gt; on this object, or null if that method has never been called.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; 되는이 커넥터 서버가 부착된다. 이것은 이 오브젝트의 &lt;a href=&quot;#setMBeanServer(javax.management.MBeanServer)&quot;&gt; &lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt; &lt;/a&gt; 에 전달 된 마지막 값 이거나 해당 메소드가 호출 된 적이없는 경우 null입니다.</target>
        </trans-unit>
        <trans-unit id="ba64fec83d48a2cbf38343d1715ffb0852ef3636" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached. This is the last value passed to &lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt;&lt;/a&gt; on this object, or null if that method has never been called.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; 되는이 커넥터 서버가 부착된다. 이 객체의 &lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt; &lt;/a&gt; 에 전달 된 마지막 값 이거나, 해당 메소드가 호출되지 않은 경우 널입니다.</target>
        </trans-unit>
        <trans-unit id="0a8a2b2991ac645b67698f44548fc7e282981c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MLET&lt;/code&gt; tag has the following syntax:</source>
          <target state="translated">&lt;code&gt;MLET&lt;/code&gt; 태그의 구문은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="596a31ac86272faf93e710d63fa1745d1a5e9ca2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MODULE&lt;/code&gt; lookup mode serves to authenticate that the lookup object was created by code in the caller module (or derived from a lookup object originally created by the caller). A lookup object with the &lt;code&gt;MODULE&lt;/code&gt; lookup mode can be shared with trusted parties without giving away &lt;code&gt;PRIVATE&lt;/code&gt; and &lt;code&gt;PACKAGE&lt;/code&gt; access to the caller.</source>
          <target state="translated">&lt;code&gt;MODULE&lt;/code&gt; 의 룩업 모드 룩업 객체 호출 코드 모듈에 의해 생성 된 (또는 원래 호출자에 의해 생성 된 조회 개체로부터 유래)되었는지를 인증하는 역할을한다. &lt;code&gt;MODULE&lt;/code&gt; 조회 모드를 사용하는 조회 개체 는 호출자 에게 &lt;code&gt;PRIVATE&lt;/code&gt; 및 &lt;code&gt;PACKAGE&lt;/code&gt; 액세스 권한을 주지 않고 신뢰할 수있는 당사자와 공유 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="41d6128d4ea5a41adf8b5c56d1c50b772d8bb991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform.</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; 클래스는 Java 플랫폼의 관리 빈을 취득하기위한 팩토리 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d71986942be1c54b6a6ae12607dd5829e664ceed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform. This class consists of static methods each of which returns one or more</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; 클래스는 Java 플랫폼의 관리 빈을 취득하기위한 팩토리 클래스입니다. 이 클래스는 정적 메소드로 구성되며 각 메소드는 하나 이상을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="da35ea78eb0bbad93818f873018df137e9342c23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map.Entry&lt;/code&gt; elements traversed by the &lt;code&gt;iterator&lt;/code&gt; or &lt;code&gt;spliterator&lt;/code&gt; do &lt;em&gt;not&lt;/em&gt; support the &lt;code&gt;setValue&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;Map.Entry&lt;/code&gt; 의해 횡단 요소 &lt;code&gt;iterator&lt;/code&gt; 또는 &lt;code&gt;spliterator&lt;/code&gt; 는 않습니다 &lt;em&gt;하지&lt;/em&gt; 지원 &lt;code&gt;setValue&lt;/code&gt; 작업을.</target>
        </trans-unit>
        <trans-unit id="227699f0dce7484c6d17e1d7babad6ee5858c1d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; interface provides three</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 인터페이스는 세 가지를 제공합니다</target>
        </trans-unit>
        <trans-unit id="bc88794f3bfb66bef560415a38768466fee45791" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 객체</target>
        </trans-unit>
        <trans-unit id="d3587321566f5e4b877578d4a8ea85fc41c24c79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;#newJMXConnector(javax.management.remote.JMXServiceURL,java.util.Map)&quot;&gt;&lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 에 전달 된 매개 변수 &lt;code&gt;JMXConnectorProvider&lt;/code&gt; 는 A가 새로운 읽기 전용이다 &lt;code&gt;Map&lt;/code&gt; 가가에 있던 모든 항목이 포함되어 &lt;code&gt;environment&lt;/code&gt; 에 매개 변수 &lt;a href=&quot;#newJMXConnector(javax.management.remote.JMXServiceURL,java.util.Map)&quot;&gt; &lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt; &lt;/a&gt; 하나가 있다면을. 또한 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; 키가 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에 없으면 새 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 에 추가됩니다 . 연관된 값은 호출 스레드의 컨텍스트 클래스 로더입니다.</target>
        </trans-unit>
        <trans-unit id="9428a88bd8c1667c06a6e1c738d06e6c61771810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt;&lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;JMXConnectorProvider&lt;/code&gt; 에 전달 된 &lt;code&gt;Map&lt;/code&gt; 매개 변수 는 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에있는 모든 항목 을 &lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt; &lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt; &lt;/a&gt; (있는 경우)에 포함 하는 새로운 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 입니다 . 또한 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; 키가 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에 없으면 새 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 에 추가됩니다 . 연관된 값은 호출 스레드의 컨텍스트 클래스 로더입니다.</target>
        </trans-unit>
        <trans-unit id="f3432ba54f4dce75c626f795ba794c66e77d0df3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)&quot;&gt;&lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 에 전달 된 매개 변수 &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; 는 A가 새로운 읽기 전용이다 &lt;code&gt;Map&lt;/code&gt; 가가에 있던 모든 항목이 포함되어 &lt;code&gt;environment&lt;/code&gt; 에 매개 변수 &lt;a href=&quot;#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)&quot;&gt; &lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt; &lt;/a&gt; 하나가 있다면을. 또한 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; 키가 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에 없으면 새 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 에 추가됩니다 . 연관된 값은 호출 스레드의 컨텍스트 클래스 로더입니다.</target>
        </trans-unit>
        <trans-unit id="fccf20df23e6200637aa7b23e7388c8a9a88bb06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; 에 전달 된 &lt;code&gt;Map&lt;/code&gt; 매개 변수 는 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에있는 모든 항목 을 &lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt; &lt;/a&gt; (있는 경우)에 포함 하는 새로운 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 입니다 . 또한 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; 키가 &lt;code&gt;environment&lt;/code&gt; 매개 변수 에 없으면 새 읽기 전용 &lt;code&gt;Map&lt;/code&gt; 에 추가됩니다 . 연관된 값은 호출 스레드의 컨텍스트 클래스 로더입니다.</target>
        </trans-unit>
        <trans-unit id="6c1109a26629152d8e80c4167284a5176959aab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt;-based constructor and &lt;code&gt;deriveFont&lt;/code&gt; APIs ignore the FONT attribute, and it is not retained by the Font; the static &lt;a href=&quot;#getFont(java.util.Map)&quot;&gt;&lt;code&gt;getFont(java.util.Map&amp;lt;? extends java.text.AttributedCharacterIterator.Attribute, ?&amp;gt;)&lt;/code&gt;&lt;/a&gt; method should be used if the FONT attribute might be present. See &lt;a href=&quot;font/textattribute#FONT&quot;&gt;&lt;code&gt;TextAttribute.FONT&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 생성자 기반과 &lt;code&gt;deriveFont&lt;/code&gt; API는 FONT 속성을 무시하고이 글꼴에 의해 유지되지 않습니다; FONT 속성이있는 경우 정적 &lt;a href=&quot;#getFont(java.util.Map)&quot;&gt; &lt;code&gt;getFont(java.util.Map&amp;lt;? extends java.text.AttributedCharacterIterator.Attribute, ?&amp;gt;)&lt;/code&gt; &lt;/a&gt; 메소드를 사용해야합니다. 자세한 내용은 &lt;a href=&quot;font/textattribute#FONT&quot;&gt; &lt;code&gt;TextAttribute.FONT&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f8bbff55817a986779ffb6c9c66f822fff7985bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaList&lt;/code&gt; interface provides the abstraction of an ordered collection of media, without defining or constraining how this collection is implemented.</source>
          <target state="translated">&lt;code&gt;MediaList&lt;/code&gt; 인터페이스는이 컬렉션의 구현 방법을 정의 또는 제약없이, 미디어의 순서 컬렉션의 추상을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3aad9781c06332bf9bcb0974dab7541fa53110ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaList&lt;/code&gt; interface provides the abstraction of an ordered collection of media, without defining or constraining how this collection is implemented. An empty list is the same as a list that contains the medium &lt;code&gt;&quot;all&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MediaList&lt;/code&gt; 인터페이스는이 컬렉션의 구현 방법을 정의 또는 제약없이, 미디어의 순서 컬렉션의 추상을 제공합니다. 빈 목록은 &lt;code&gt;&quot;all&quot;&lt;/code&gt; 매체를 포함하는 목록과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="5865a336095d84a9779ddde69b513d49e053e443" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaSize&lt;/code&gt; is in turn used to locate the &lt;code&gt;MediaSizeName&lt;/code&gt; object. This method may return &lt;code&gt;null&lt;/code&gt; if the closest matching &lt;code&gt;MediaSize&lt;/code&gt; has no corresponding &lt;code&gt;Media&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;MediaSize&lt;/code&gt; 차례로 찾는 데 사용됩니다 &lt;code&gt;MediaSizeName&lt;/code&gt; 객체. 이 메서드는 가장 가까운 일치하는 &lt;code&gt;MediaSize&lt;/code&gt; 에 해당하는 &lt;code&gt;Media&lt;/code&gt; 인스턴스 가없는 경우 &lt;code&gt;null&lt;/code&gt; 을 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7a070dabcac26392a8318450e8b1d538eeddd0be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaTracker&lt;/code&gt; class is a utility class to track the status of a number of media objects.</source>
          <target state="translated">&lt;code&gt;MediaTracker&lt;/code&gt; 클래스는 몇개의 미디어 객체 상태를 감시하는 유틸리티 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="17601962e75c98c387ad4765276e1cdfa2694759" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaTracker&lt;/code&gt; class is a utility class to track the status of a number of media objects. Media objects could include audio clips as well as images, though currently only images are supported.</source>
          <target state="translated">&lt;code&gt;MediaTracker&lt;/code&gt; 클래스는 몇개의 미디어 객체 상태를 감시하는 유틸리티 클래스입니다. 미디어 개체에는 이미지뿐만 아니라 오디오 클립도 포함될 수 있지만 현재는 이미지 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="8b01e42df4caf57c30334c7ef0ef0673760d8b60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given &lt;code&gt;pushLevel&lt;/code&gt; argument and buffer size argument are used.</source>
          <target state="translated">&lt;code&gt;MemoryHandler&lt;/code&gt; 을 기반으로 구성된다 &lt;code&gt;LogManager&lt;/code&gt; 지정된 것을 제외 특성 (또는 기본값) &lt;code&gt;pushLevel&lt;/code&gt; 의 인수 및 크기 인자 버퍼가 사용된다.</target>
        </trans-unit>
        <trans-unit id="5651aaa22c68d9ecf5c414f98e30a0e7dbf81cb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryMXBean&lt;/code&gt; object returned by &lt;a href=&quot;managementfactory#getMemoryMXBean()&quot;&gt;&lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt;&lt;/a&gt; implements the &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt;&lt;code&gt;NotificationEmitter&lt;/code&gt;&lt;/a&gt; interface that allows a listener to be registered within the &lt;code&gt;MemoryMXBean&lt;/code&gt; as a notification listener. Below is an example code that registers a &lt;code&gt;MyListener&lt;/code&gt; to handle notification emitted by the &lt;code&gt;MemoryMXBean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MemoryMXBean&lt;/code&gt; 에 의해 리턴 된 객체 &lt;a href=&quot;managementfactory#getMemoryMXBean()&quot;&gt; &lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt; &lt;/a&gt; 유단 &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt; &lt;code&gt;NotificationEmitter&lt;/code&gt; &lt;/a&gt; 리스너가 내에 등록 될 수 있도록 인터페이스 &lt;code&gt;MemoryMXBean&lt;/code&gt; 에 통지를 청취자로. 다음은 &lt;code&gt;MemoryMXBean&lt;/code&gt; 에서 발생하는 알림을 처리하기 위해 &lt;code&gt;MyListener&lt;/code&gt; 를 등록하는 예제 코드입니다 .</target>
        </trans-unit>
        <trans-unit id="8e6c1d6da906bc1b50ed3822bfcdb7ac20a1aee1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryMXBean&lt;/code&gt; object returned by &lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt;&lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt;&lt;/a&gt; implements the &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt;&lt;code&gt;NotificationEmitter&lt;/code&gt;&lt;/a&gt; interface that allows a listener to be registered within the &lt;code&gt;MemoryMXBean&lt;/code&gt; as a notification listener. Below is an example code that registers a &lt;code&gt;MyListener&lt;/code&gt; to handle notification emitted by the &lt;code&gt;MemoryMXBean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MemoryMXBean&lt;/code&gt; 에 의해 리턴 된 객체 &lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt; &lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt; &lt;/a&gt; 유단 &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt; &lt;code&gt;NotificationEmitter&lt;/code&gt; &lt;/a&gt; 리스너가 내에 등록 될 수 있도록 인터페이스 &lt;code&gt;MemoryMXBean&lt;/code&gt; 에 통지를 청취자로. 아래는 &lt;code&gt;MemoryMXBean&lt;/code&gt; 에 의해 생성 된 알림을 처리하기 위해 &lt;code&gt;MyListener&lt;/code&gt; 를 등록하는 예제 코드입니다 .</target>
        </trans-unit>
        <trans-unit id="33bb8679046b19786cafc3f83df011fe2fd08c26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MenuBar&lt;/code&gt; class encapsulates the platform's concept of a menu bar bound to a frame.</source>
          <target state="translated">&lt;code&gt;MenuBar&lt;/code&gt; 클래스는 프레임에 결합되는 도구 모음의 개념을 캡슐화합니다.</target>
        </trans-unit>
        <trans-unit id="14b089e0c21d4e5f4b76d1c03ed79e79cce03f7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MenuBar&lt;/code&gt; class encapsulates the platform's concept of a menu bar bound to a frame. In order to associate the menu bar with a &lt;code&gt;Frame&lt;/code&gt; object, call the frame's &lt;code&gt;setMenuBar&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;MenuBar&lt;/code&gt; 클래스는 프레임에 결합되는 도구 모음의 개념을 캡슐화합니다. 메뉴 모음을 &lt;code&gt;Frame&lt;/code&gt; 객체 와 연결 하려면 프레임의 &lt;code&gt;setMenuBar&lt;/code&gt; 메서드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="dc83b8a910473a027cff1f2424c20667476e8789" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MenuShortcut&lt;/code&gt; class represents a keyboard accelerator for a MenuItem.</source>
          <target state="translated">&lt;code&gt;MenuShortcut&lt;/code&gt; 를의 클래스는 MenuItem의 키보드 가속기를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="53c61256ecec8100f7f9a41d04960f58fac56df7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MessageInfo&lt;/code&gt; class provides additional ancillary information about messages.</source>
          <target state="translated">&lt;code&gt;MessageInfo&lt;/code&gt; 클래스는 메시지에 대한 추가 보조 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c0e62f9bd1ae525e07714ef0b4ef19ee8691114c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MessageInfo&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if this channel is in non-blocking mode and no messages are immediately available or the notification handler returns &lt;a href=&quot;handlerresult#RETURN&quot;&gt;&lt;code&gt;RETURN&lt;/code&gt;&lt;/a&gt; after handling a notification</source>
          <target state="translated">&lt;code&gt;MessageInfo&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; 는, 이 채널이 비 블록 모드 인 경우에는 메시지를 즉시 사용할 수 없습니다 또는 통지 핸들러 반환 &lt;a href=&quot;handlerresult#RETURN&quot;&gt; &lt;code&gt;RETURN&lt;/code&gt; &lt;/a&gt; 통지를 처리 한 후</target>
        </trans-unit>
        <trans-unit id="600646097950dd1f186fdf48626c3f0e7f2ff708" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MessageInfo&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if this channel is in non-blocking mode and no messages are immediately available or the notification handler returns &lt;code&gt;RETURN&lt;/code&gt; after handling a notification</source>
          <target state="translated">&lt;code&gt;MessageInfo&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; 는, 이 채널이 비 블록 모드 인 경우에는 메시지를 즉시 사용할 수 없습니다 또는 통지 핸들러 반환 &lt;code&gt;RETURN&lt;/code&gt; 통지를 처리 한 후</target>
        </trans-unit>
        <trans-unit id="82571554e721d419914c56f461c9899435b69ef0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; has processed a &lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt; 가공했다 &lt;a href=&quot;metamessage&quot;&gt; &lt;code&gt;MetaMessage&lt;/code&gt; 의이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b78a4c32d697abee0a6159e1d2a87909e03931ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; has processed a &lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;. To register a &lt;code&gt;MetaEventListener&lt;/code&gt; object to receive such notifications, pass it as the argument to the &lt;a href=&quot;sequencer#addMetaEventListener(javax.sound.midi.MetaEventListener)&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt; 가공했다 &lt;a href=&quot;metamessage&quot;&gt; &lt;code&gt;MetaMessage&lt;/code&gt; 의이&lt;/a&gt; . 이러한 알림을 수신하기 위해 &lt;code&gt;MetaEventListener&lt;/code&gt; 객체 를 등록하려면 &lt;code&gt;Sequencer&lt;/code&gt; 의 &lt;a href=&quot;sequencer#addMetaEventListener(javax.sound.midi.MetaEventListener)&quot;&gt; &lt;code&gt;addMetaEventListener&lt;/code&gt; &lt;/a&gt; 메서드에 인수로 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="5864b743917b0ab45bb87ab5b12728c29a56a04c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 가공했다 &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의이 .</target>
        </trans-unit>
        <trans-unit id="91e79b4c499b3f35a4dda98bb1b312a4085719a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. To register a &lt;code&gt;MetaEventListener&lt;/code&gt; object to receive such notifications, pass it as the argument to the &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; 의 인터페이스는 필요가있는 인스턴스 때 알림 클래스가 구현되어야 &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 가공했다 &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의이 . 이러한 알림을 받도록 &lt;code&gt;MetaEventListener&lt;/code&gt; 객체 를 등록하려면 &lt;code&gt;Sequencer&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 메소드에 인수로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="d01c40b457907a7d5e20ffd74ad4b85ee2009577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; 클래스는, 신디사이저, 시퀀서, MIDI 입출력 포트 등의 디바이스를 포함하는 설치 MIDI 시스템 자원에 대한 액세스를 제공한다.</target>
        </trans-unit>
        <trans-unit id="a80d68435a1b6165c900a036816b9bec6091ed82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports. A typical simple MIDI application might begin by invoking one or more &lt;code&gt;MidiSystem&lt;/code&gt; methods to learn what devices are installed and to obtain the ones needed in that application.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; 클래스는, 신디사이저, 시퀀서, MIDI 입출력 포트 등의 디바이스를 포함하는 설치 MIDI 시스템 자원에 대한 액세스를 제공한다. 일반적인 간단한 MIDI 응용 프로그램은 어떤 장치가 설치되어 있는지 알고 해당 응용 프로그램에 필요한 장치를 얻기 위해 하나 이상의 &lt;code&gt;MidiSystem&lt;/code&gt; 메서드를 호출하여 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b52eb410a08736554d78710757e24ecd5480df64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; 의 클래스는 텍스트 설명과 함께 제품의 이름, 버젼, 벤더 등, 오디오 믹서에 관한 정보를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2413f98f580324031afa36fa47e305da2ad575eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description. This information may be retrieved through the &lt;a href=&quot;mixer#getMixerInfo()&quot;&gt;&lt;code&gt;getMixerInfo&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Mixer&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; 의 클래스는 텍스트 설명과 함께 제품의 이름, 버젼, 벤더 등, 오디오 믹서에 관한 정보를 나타냅니다. 이 정보는 &lt;code&gt;Mixer&lt;/code&gt; 인터페이스 의 &lt;a href=&quot;mixer#getMixerInfo()&quot;&gt; &lt;code&gt;getMixerInfo&lt;/code&gt; &lt;/a&gt; 메소드를 통해 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e56a0592321beb830ad7682fabbd101887d52b64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description. This information may be retrieved through the &lt;a href=&quot;mixer#getMixerInfo--&quot;&gt;&lt;code&gt;getMixerInfo&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Mixer&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; 의 클래스는 텍스트 설명과 함께 제품의 이름, 버젼, 벤더 등, 오디오 믹서에 관한 정보를 나타냅니다. 이 정보는 &lt;code&gt;Mixer&lt;/code&gt; 인터페이스 의 &lt;a href=&quot;mixer#getMixerInfo--&quot;&gt; &lt;code&gt;getMixerInfo&lt;/code&gt; &lt;/a&gt; 메소드를 통해 검색 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cb9a70e7236c1e2ff693bd4d1a815405e4adcc77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseEvent&lt;/code&gt; interface provides specific contextual information associated with Mouse events.</source>
          <target state="translated">&lt;code&gt;MouseEvent&lt;/code&gt; 인터페이스는 마우스 이벤트에 관련하는 고유의 문맥 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="29d1d5cbe4705a95fc4625d67c369d249af68cf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseListener&lt;/code&gt; listens to events.</source>
          <target state="translated">&lt;code&gt;MouseListener&lt;/code&gt; 이벤트를 수신합니다.</target>
        </trans-unit>
        <trans-unit id="58edd9693b150e70063bc2843ee9db0174fe97ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseMotionListener&lt;/code&gt; listens to events.</source>
          <target state="translated">&lt;code&gt;MouseMotionListener&lt;/code&gt; 이벤트를 수신합니다.</target>
        </trans-unit>
        <trans-unit id="150ea102c83ed4ff8e936243516b257e232ff94f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseWheelEvent&lt;/code&gt; class includes methods for getting the number of &quot;clicks&quot; by which the mouse wheel is rotated. The &lt;a href=&quot;#getWheelRotation()&quot;&gt;&lt;code&gt;getWheelRotation()&lt;/code&gt;&lt;/a&gt; method returns the integer number of &quot;clicks&quot; corresponding to the number of notches by which the wheel was rotated. In addition to this method, the &lt;code&gt;MouseWheelEvent&lt;/code&gt; class provides the &lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt;&lt;code&gt;getPreciseWheelRotation()&lt;/code&gt;&lt;/a&gt; method which returns a double number of &quot;clicks&quot; in case a partial rotation occurred. The &lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt;&lt;code&gt;getPreciseWheelRotation()&lt;/code&gt;&lt;/a&gt; method is useful if a mouse supports a high-resolution wheel, such as a freely rotating wheel with no notches. Applications can benefit by using this method to process mouse wheel events more precisely, and thus, making visual perception smoother.</source>
          <target state="translated">&lt;code&gt;MouseWheelEvent&lt;/code&gt; 가의 클래스는 마우스 휠이 회전하는 「클릭」수를 얻는 방법을 포함한다. &lt;a href=&quot;#getWheelRotation()&quot;&gt; &lt;code&gt;getWheelRotation()&lt;/code&gt; &lt;/a&gt; 메소드는 바퀴 회전시켰다되는 노치의 개수에 대응하는 &quot;클릭&quot;의 정수를 반환한다. 이 메서드 외에도 &lt;code&gt;MouseWheelEvent&lt;/code&gt; 클래스는 부분 회전이 발생한 경우 두 배의 &quot;클릭&quot;을 반환하는 &lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt; &lt;code&gt;getPreciseWheelRotation()&lt;/code&gt; &lt;/a&gt; 메서드를 제공합니다 . &lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt; &lt;code&gt;getPreciseWheelRotation()&lt;/code&gt; &lt;/a&gt; 마우스는 노치없이 자유롭게 회전 휠과 같은 고해상도 휠을 지원하는 경우에있어서 유용하다. 응용 프로그램은이 방법을 사용하여 마우스 휠 이벤트를보다 정확하게 처리함으로써 시각적 인식을 더 부드럽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bdd496fed36950bc598bbd6ea56d02421a0688e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; class represents one-banded images and can pack multiple one-sample pixels into one data element.</source>
          <target state="translated">&lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; 클래스 이미지를 하나의 줄무늬와 하나 개의 데이터 요소에 여러 개의 원 화소 샘플 수를 포장 나타낸다.</target>
        </trans-unit>
        <trans-unit id="11bb803e4faf382111d8da7958e2a0219f9b2f28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; class represents one-banded images and can pack multiple one-sample pixels into one data element. Pixels are not allowed to span data elements. The data type can be DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT. Each pixel must be a power of 2 number of bits and a power of 2 number of pixels must fit exactly in one data element. Pixel bit stride is equal to the number of bits per pixel. Scanline stride is in data elements and the last several data elements might be padded with unused pixels. Data bit offset is the offset in bits from the beginning of the &lt;a href=&quot;databuffer&quot;&gt;&lt;code&gt;DataBuffer&lt;/code&gt;&lt;/a&gt; to the first pixel and must be a multiple of pixel bit stride.</source>
          <target state="translated">&lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; 클래스 이미지를 하나의 줄무늬와 하나 개의 데이터 요소에 여러 개의 원 화소 샘플 수를 포장 나타낸다. 픽셀은 데이터 요소에 걸쳐있을 수 없습니다. 데이터 유형은 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT 또는 DataBuffer.TYPE_INT 일 수 있습니다. 각 픽셀은 비트 수 2의 거듭 제곱이어야하며 픽셀 수 2의 거듭 제곱은 하나의 데이터 요소에 정확히 맞아야합니다. 픽셀 비트 보폭은 픽셀 당 비트 수와 같습니다. 스캔 라인 보폭은 데이터 요소에 있으며 마지막 여러 데이터 요소는 사용되지 않은 픽셀로 채워질 수 있습니다. 데이터 비트 오프셋은 &lt;a href=&quot;databuffer&quot;&gt; &lt;code&gt;DataBuffer&lt;/code&gt; &lt;/a&gt; 의 시작 에서 첫 번째 픽셀 까지의 비트 단위 오프셋 이며 픽셀 비트 스트라이드의 배수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="48b5e8ca00e67ac4765345cf8cb60a38e463c497" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiResolutionImage&lt;/code&gt; interface should be implemented by any subclass of &lt;code&gt;java.awt.Image&lt;/code&gt; whose instances are intended to provide image resolution variants according to the given image width and height. For convenience, toolkit images obtained from &lt;code&gt;Toolkit.getImage(String name)&lt;/code&gt; and &lt;code&gt;Toolkit.getImage(URL url)&lt;/code&gt; will implement this interface on platforms that support naming conventions for resolution variants of stored image media and the &lt;code&gt;AbstractMultiResolutionImage&lt;/code&gt; and &lt;code&gt;BaseMultiResolutionImage&lt;/code&gt; classes are provided to facilitate easy construction of custom multi-resolution images from a list of related images.</source>
          <target state="translated">&lt;code&gt;MultiResolutionImage&lt;/code&gt; 의 인터페이스 중 어느 서브 클래스가 구현되어야 &lt;code&gt;java.awt.Image&lt;/code&gt; 의 인스턴스를 가지는 이미지 해상도를 제공하기위한 소정의 화상의 폭과 높이에 따라 변형. 편의를 위해 &lt;code&gt;Toolkit.getImage(String name)&lt;/code&gt; 및 &lt;code&gt;Toolkit.getImage(URL url)&lt;/code&gt; 에서 얻은 툴킷 이미지 는 저장된 이미지 미디어의 해상도 변형에 대한 명명 규칙을 지원하는 플랫폼에서이 인터페이스를 구현하며, &lt;code&gt;AbstractMultiResolutionImage&lt;/code&gt; 및 &lt;code&gt;BaseMultiResolutionImage&lt;/code&gt; 클래스는 쉽게 사용할 수 있도록 제공됩니다. 관련 이미지 목록에서 사용자 지정 다중 해상도 이미지 구성.</target>
        </trans-unit>
        <trans-unit id="91f095d99b6510976c34e8d18d1a314c4fbc5507" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; instance to use for specifying that the job should be divided into separate, collated copies.</source>
          <target state="translated">&lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; 인스턴스는 작업이 별도의 부씩 복사로 나눌 수 지정하기 위해서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3fb976389c7192bf00db15408f20e07ee4b0f8f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; instance to use for specifying that the job should be divided into separate, uncollated copies.</source>
          <target state="translated">The &lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; instance to use for specifying that the job should be divided into separate, uncollated copies.</target>
        </trans-unit>
        <trans-unit id="9b6e1370eae5cba21c51b71f67e35eac7aa4cee4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleMaster&lt;/code&gt; interface represents Type 1 Multiple Master fonts.</source>
          <target state="translated">The &lt;code&gt;MultipleMaster&lt;/code&gt; interface represents Type 1 Multiple Master fonts.</target>
        </trans-unit>
        <trans-unit id="6d994d997ce673ebe643101f39b0acec5af2dd85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleMaster&lt;/code&gt; interface represents Type 1 Multiple Master fonts. A particular &lt;a href=&quot;../font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; object can implement this interface.</source>
          <target state="translated">The &lt;code&gt;MultipleMaster&lt;/code&gt; interface represents Type 1 Multiple Master fonts. A particular &lt;a href=&quot;../font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt; object can implement this interface.</target>
        </trans-unit>
        <trans-unit id="de5f6eded86ee9d71d197fd648730d9fa992e076" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MutationEvent&lt;/code&gt; interface provides specific contextual information associated with Mutation events.</source>
          <target state="translated">The &lt;code&gt;MutationEvent&lt;/code&gt; interface provides specific contextual information associated with Mutation events.</target>
        </trans-unit>
        <trans-unit id="0480993326bc778542fae22556b604694f999249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NClob&lt;/code&gt; interface extends the &lt;code&gt;Clob&lt;/code&gt; interface which provides methods for getting the length of an SQL &lt;code&gt;NCLOB&lt;/code&gt; value, for materializing a &lt;code&gt;NCLOB&lt;/code&gt; value on the client, and for searching for a substring or &lt;code&gt;NCLOB&lt;/code&gt; object within a &lt;code&gt;NCLOB&lt;/code&gt; value. A &lt;code&gt;NClob&lt;/code&gt; object, just like a &lt;code&gt;Clob&lt;/code&gt; object, is valid for the duration of the transaction in which it was created. Methods in the interfaces &lt;a href=&quot;resultset&quot;&gt;&lt;code&gt;ResultSet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;callablestatement&quot;&gt;&lt;code&gt;CallableStatement&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;preparedstatement&quot;&gt;&lt;code&gt;PreparedStatement&lt;/code&gt;&lt;/a&gt;, such as &lt;code&gt;getNClob&lt;/code&gt; and &lt;code&gt;setNClob&lt;/code&gt; allow a programmer to access an SQL &lt;code&gt;NCLOB&lt;/code&gt; value. In addition, this interface has methods for updating a &lt;code&gt;NCLOB&lt;/code&gt; value.</source>
          <target state="translated">The &lt;code&gt;NClob&lt;/code&gt; interface extends the &lt;code&gt;Clob&lt;/code&gt; interface which provides methods for getting the length of an SQL &lt;code&gt;NCLOB&lt;/code&gt; value, for materializing a &lt;code&gt;NCLOB&lt;/code&gt; value on the client, and for searching for a substring or &lt;code&gt;NCLOB&lt;/code&gt; object within a &lt;code&gt;NCLOB&lt;/code&gt; value. A &lt;code&gt;NClob&lt;/code&gt; object, just like a &lt;code&gt;Clob&lt;/code&gt; object, is valid for the duration of the transaction in which it was created. Methods in the interfaces &lt;a href=&quot;resultset&quot;&gt; &lt;code&gt;ResultSet&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;callablestatement&quot;&gt; &lt;code&gt;CallableStatement&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;preparedstatement&quot;&gt; &lt;code&gt;PreparedStatement&lt;/code&gt; &lt;/a&gt;, such as &lt;code&gt;getNClob&lt;/code&gt; and &lt;code&gt;setNClob&lt;/code&gt; allow a programmer to access an SQL &lt;code&gt;NCLOB&lt;/code&gt; value. In addition, this interface has methods for updating a &lt;code&gt;NCLOB&lt;/code&gt; value.</target>
        </trans-unit>
        <trans-unit id="788c03b8eac033377287b7f6bcedc89c000e71cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the &lt;code&gt;AttributeValue&lt;/code&gt; component is determined by the &lt;code&gt;AttributeType&lt;/code&gt;; in general it will be a &lt;code&gt;directoryString&lt;/code&gt;. A &lt;code&gt;directoryString&lt;/code&gt; is usually one of &lt;code&gt;PrintableString&lt;/code&gt;, &lt;code&gt;TeletexString&lt;/code&gt; or &lt;code&gt;UniversalString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 같은 미국과 같은 나라 이름과 속성 및 해당 값으로 구성된 계층 이름을 설명합니다. 의 형식 &lt;code&gt;AttributeValue&lt;/code&gt; 성분에 의해 결정된다 &lt;code&gt;AttributeType&lt;/code&gt; 에 ; 일반적으로 &lt;code&gt;directoryString&lt;/code&gt; 이 됩니다. &lt;code&gt;directoryString&lt;/code&gt; 입니다은 보통 중 하나입니다 &lt;code&gt;PrintableString&lt;/code&gt; , &lt;code&gt;TeletexString&lt;/code&gt; 또는 &lt;code&gt;UniversalString&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e5c1c5d6176d58d28e9f865eee359984e02049b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 구성 요소의 정렬 순서 - 인터페이스는 일반적인 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="99d457ffbc6e55d6f5c1d1e7729fba20a1b311b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components. It can be a composite name (names that span multiple namespaces), or a compound name (names that are used within individual hierarchical naming systems).</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 구성 요소의 정렬 순서 - 인터페이스는 일반적인 이름을 나타냅니다. 복합 이름 (여러 네임 스페이스에 걸쳐있는 이름) 또는 복합 이름 (개별 계층 이름 지정 시스템 내에서 사용되는 이름) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="305015d8407a5fa406fab5e1b3d6d830add7a693" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NameList&lt;/code&gt; interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented.</source>
          <target state="translated">The &lt;code&gt;NameList&lt;/code&gt; interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented.</target>
        </trans-unit>
        <trans-unit id="7454486b923bccb0760d5b56990b0bc5f47c72ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NameList&lt;/code&gt; interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented. The items in the &lt;code&gt;NameList&lt;/code&gt; are accessible via an integral index, starting from 0.</source>
          <target state="translated">The &lt;code&gt;NameList&lt;/code&gt; interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented. The items in the &lt;code&gt;NameList&lt;/code&gt; are accessible via an integral index, starting from 0.</target>
        </trans-unit>
        <trans-unit id="cbfe1e053acf3330335dc5b7d73c7cc97d1d6123" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Naming&lt;/code&gt; class provides methods for storing and obtaining references to remote objects in a remote object registry.</source>
          <target state="translated">The &lt;code&gt;Naming&lt;/code&gt; class provides methods for storing and obtaining references to remote objects in a remote object registry.</target>
        </trans-unit>
        <trans-unit id="789eb0afc298960a48962d09cc4750cf72e0303a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Naming&lt;/code&gt; class provides methods for storing and obtaining references to remote objects in a remote object registry. Each method of the &lt;code&gt;Naming&lt;/code&gt; class takes as one of its arguments a name that is a &lt;code&gt;java.lang.String&lt;/code&gt; in URL format (without the scheme component) of the form:</source>
          <target state="translated">The &lt;code&gt;Naming&lt;/code&gt; class provides methods for storing and obtaining references to remote objects in a remote object registry. Each method of the &lt;code&gt;Naming&lt;/code&gt; class takes as one of its arguments a name that is a &lt;code&gt;java.lang.String&lt;/code&gt; in URL format (without the scheme component) of the form:</target>
        </trans-unit>
        <trans-unit id="7b6edeb494d6ac7e0b5caa00f1aa813d7ae827c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NamingEvent&lt;/code&gt;'s state consists of</source>
          <target state="translated">&lt;code&gt;NamingEvent&lt;/code&gt; 에 의 상태는 다음과 같이 구성</target>
        </trans-unit>
        <trans-unit id="c86cac2e51c5a47693977a50e2b8c6b5729d2050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NetworkInterface&lt;/code&gt; this interface is attached to.</source>
          <target state="translated">&lt;code&gt;NetworkInterface&lt;/code&gt; 이 인터페이스에 부착된다.</target>
        </trans-unit>
        <trans-unit id="6ebb9005b08a0a47ae882894b81ab2da875ad354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; at the corresponding position upon success. A value of &lt;code&gt;null&lt;/code&gt; is returned if the index is out of range.</source>
          <target state="translated">성공시 해당 위치 의 &lt;code&gt;Node&lt;/code&gt; 입니다. 인덱스가 범위를 벗어나면 &lt;code&gt;null&lt;/code&gt; 값 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ec1a7f6d32baca20da17c927709e8d24c0aa30ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; interface is the primary datatype for the entire Document Object Model.</source>
          <target state="translated">The &lt;code&gt;Node&lt;/code&gt; interface is the primary datatype for the entire Document Object Model.</target>
        </trans-unit>
        <trans-unit id="897563f996b4fd9e2640f2f9bbc27d935dea63b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; interface is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects implementing the &lt;code&gt;Node&lt;/code&gt; interface expose methods for dealing with children, not all objects implementing the &lt;code&gt;Node&lt;/code&gt; interface may have children. For example, &lt;code&gt;Text&lt;/code&gt; nodes may not have children, and adding children to such nodes results in a &lt;code&gt;DOMException&lt;/code&gt; being raised.</source>
          <target state="translated">The &lt;code&gt;Node&lt;/code&gt; interface is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects implementing the &lt;code&gt;Node&lt;/code&gt; interface expose methods for dealing with children, not all objects implementing the &lt;code&gt;Node&lt;/code&gt; interface may have children. For example, &lt;code&gt;Text&lt;/code&gt; nodes may not have children, and adding children to such nodes results in a &lt;code&gt;DOMException&lt;/code&gt; being raised.</target>
        </trans-unit>
        <trans-unit id="c4f24312524d645707d6367d6e45b401e6f4d5c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; that led to the parsing error, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 파싱 오류, 또는 주도한다는 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aef3bb11e429e313e89542fc0866ccc9dfce042f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; attribute whose value corresponds to the specified string. Upon failure (e.g., no node with this name exists), returns &lt;code&gt;null&lt;/code&gt; .</source>
          <target state="translated">값이 지정된 문자열에 해당 하는 &lt;code&gt;name&lt;/code&gt; 또는 &lt;code&gt;id&lt;/code&gt; 속성 이있는 &lt;code&gt;Node&lt;/code&gt; 입니다 . 실패하면 (예 :이 이름의 노드가 존재하지 않음) &lt;code&gt;null&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d514acdf85277f67f4eec8dd90a565c433b8653d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeFilter&lt;/code&gt; used to screen nodes.</source>
          <target state="translated">The &lt;code&gt;NodeFilter&lt;/code&gt; used to screen nodes.</target>
        </trans-unit>
        <trans-unit id="83084c208299fa879aacdf9ab332c5751f1d57bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeList&lt;/code&gt; interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented.</source>
          <target state="translated">The &lt;code&gt;NodeList&lt;/code&gt; interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented.</target>
        </trans-unit>
        <trans-unit id="98e77cd2d040a57b84c12a03ebf2efec6b739714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeList&lt;/code&gt; interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. &lt;code&gt;NodeList&lt;/code&gt; objects in the DOM are live.</source>
          <target state="translated">The &lt;code&gt;NodeList&lt;/code&gt; interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. &lt;code&gt;NodeList&lt;/code&gt; objects in the DOM are live.</target>
        </trans-unit>
        <trans-unit id="6e8cd1aac5ffc5b5216ef057ef34b1b290375af7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NoninvertibleTransformException&lt;/code&gt; class represents an exception that is thrown if an operation is performed requiring the inverse of an &lt;a href=&quot;affinetransform&quot;&gt;&lt;code&gt;AffineTransform&lt;/code&gt;&lt;/a&gt; object but the &lt;code&gt;AffineTransform&lt;/code&gt; is in a non-invertible state.</source>
          <target state="translated">The &lt;code&gt;NoninvertibleTransformException&lt;/code&gt; class represents an exception that is thrown if an operation is performed requiring the inverse of an &lt;a href=&quot;affinetransform&quot;&gt; &lt;code&gt;AffineTransform&lt;/code&gt; &lt;/a&gt; object but the &lt;code&gt;AffineTransform&lt;/code&gt; is in a non-invertible state.</target>
        </trans-unit>
        <trans-unit id="2b3873d2cdde65ea86bffbc4fce3ee8af89880c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;#addNotificationListeners(javax.management.ObjectName%5B%5D,java.rmi.MarshalledObject%5B%5D,javax.security.auth.Subject%5B%5D)&quot;&gt;&lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;#addNotificationListeners(javax.management.ObjectName%5B%5D,java.rmi.MarshalledObject%5B%5D,javax.security.auth.Subject%5B%5D)&quot;&gt; &lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="1400dea5eb2e0f1d272329a6fddf1dde956ad2ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; 에 의해 반환 된 ID에 의해 식별된다 &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="e9f0f1aa295652b71a3e12c32b29eaa12cfad79e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; 에 의해 반환 된 ID에 의해 식별된다 &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="ccce0d9a8a12b3a7a535b35383d383994618eac6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number&lt;/code&gt; return type attempts to coalesce the text of a node to a &lt;code&gt;double&lt;/code&gt; data type.</source>
          <target state="translated">The &lt;code&gt;Number&lt;/code&gt; return type attempts to coalesce the text of a node to a &lt;code&gt;double&lt;/code&gt; data type.</target>
        </trans-unit>
        <trans-unit id="bc96d682dd5c52413c4fbf9e0e9e89a288bc4573" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NumericShaper&lt;/code&gt; class is used to convert Latin-1 (European) digits to other Unicode decimal digits.</source>
          <target state="translated">The &lt;code&gt;NumericShaper&lt;/code&gt; class is used to convert Latin-1 (European) digits to other Unicode decimal digits.</target>
        </trans-unit>
        <trans-unit id="b8d28052c532e291b766359b9a53299f626fbbd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NumericShaper&lt;/code&gt; class is used to convert Latin-1 (European) digits to other Unicode decimal digits. Users of this class will primarily be people who wish to present data using national digit shapes, but find it more convenient to represent the data internally using Latin-1 (European) digits. This does not interpret the deprecated numeric shape selector character (U+206E).</source>
          <target state="translated">The &lt;code&gt;NumericShaper&lt;/code&gt; class is used to convert Latin-1 (European) digits to other Unicode decimal digits. Users of this class will primarily be people who wish to present data using national digit shapes, but find it more convenient to represent the data internally using Latin-1 (European) digits. This does not interpret the deprecated numeric shape selector character (U+206E).</target>
        </trans-unit>
        <trans-unit id="2c9376e7cc0383d27533cd38986f773a0a05e444" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a date-time with the specified offset. The local date-time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; 의 필드는 지정된 오프셋과 날짜 - 시간을 반환합니다. 현지 날짜-시간은 변경되지 않습니다. 새 오프셋 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1918dcc7fcc29b6bc425b2c6f7a8a0dcc372038d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a time with the specified offset. The local time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; 의 필드는 지정된 오프셋으로 시간을 반환합니다. 현지 시간은 변경되지 않습니다. 새 오프셋 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5b99274c982da4f70821c4ca9b3b72ad4b9daf7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will typically be ignored. The offset of a &lt;code&gt;ZonedDateTime&lt;/code&gt; is controlled primarily by the time-zone. As such, changing the offset does not generally make sense, because there is only one valid offset for the local date-time and zone. If the zoned date-time is in a daylight savings overlap, then the offset is used to switch between the two valid offsets. In all other cases, the offset is ignored. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; 의 필드는 일반적으로 무시됩니다. &lt;code&gt;ZonedDateTime&lt;/code&gt; 의 오프셋은 주로 시간대에 의해 제어됩니다. 따라서 로컬 날짜-시간 및 영역에 대해 유효한 오프셋이 하나만 있기 때문에 오프셋을 변경하는 것은 일반적으로 의미가 없습니다. 존 날짜-시간이 일광 절약 시간제에 겹치는 경우 오프셋은 두 유효한 오프셋 사이를 전환하는 데 사용됩니다. 다른 모든 경우에는 오프셋이 무시됩니다. 새 오프셋 값이 유효한 범위를 벗어나면 &lt;code&gt;DateTimeException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="dcf77ee080e78ac2d4bb93c007b8230ccb51fe01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; associated with a node that accepts enumerated values must be equal to one of the values returned by this method, as defined by the &lt;code&gt;==&lt;/code&gt; operator (as opposed to the &lt;code&gt;Object.equals&lt;/code&gt; method).</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 에 의해 정의 된 열거 된 값은이 방법에 의해 리턴 된 값 중 하나와 동일해야받는 노드와 연관된 &lt;code&gt;==&lt;/code&gt; 의 합니다 (반대로 작업자 &lt;code&gt;Object.equals&lt;/code&gt; 법).</target>
        </trans-unit>
        <trans-unit id="fea5e3bfa1c2ff38c60f4081955464c2179176f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; is converted to a string using its &lt;code&gt;toString&lt;/code&gt; method and the result is used to label a &lt;code&gt;JButton&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Object&lt;/code&gt; is converted to a string using its &lt;code&gt;toString&lt;/code&gt; method and the result is used to label a &lt;code&gt;JButton&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed616c574e37d462ce3dc1a59d27e3a04084fb6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; that encapsulates the result of evaluating the expression.</source>
          <target state="translated">The &lt;code&gt;Object&lt;/code&gt; that encapsulates the result of evaluating the expression.</target>
        </trans-unit>
        <trans-unit id="423a928bc882303e9119de621878e89bd3ee2d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; that is the result of evaluating the expression and converting the result to &lt;code&gt;returnType&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Object&lt;/code&gt; that is the result of evaluating the expression and converting the result to &lt;code&gt;returnType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0324a1f9879d4eda586224698a2a40120a519c02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt; . The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b603e08da03f55ce9f9208ff360071d61f560e92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt; . The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1119954570aff30608ab91b67db57a1edb87ff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBean에 관련된 의해 지정된 &lt;var&gt;name&lt;/var&gt; . 포함 된 &lt;code&gt;ObjectName&lt;/code&gt; 은 &lt;code&gt;name&lt;/code&gt; 이고 포함 된 클래스 이름은 &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b503bdd5bfbf40758607910f1e62bc31dd68e802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBean에 관련된 의해 지정된 &lt;var&gt;name&lt;/var&gt; . 포함 된 &lt;code&gt;ObjectName&lt;/code&gt; 은 &lt;code&gt;name&lt;/code&gt; 이고 포함 된 클래스 이름은 &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c4bb59ef2d57c5a36b82e56b3ef8695a22a0311d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a garbage collector within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 가비지 컬렉터의 MXBean를 식별은 :</target>
        </trans-unit>
        <trans-unit id="0b9021e57442d401347cae33e09b53197bbb0b25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory manager within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 메모리 관리자의 MXBean를 식별은 :</target>
        </trans-unit>
        <trans-unit id="bb1a05072aa2847772982c43cf0d890c7cae913a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory pool within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; 는 고유 내에서 메모리 풀의 MXBean를 식별 &lt;code&gt;MBeanServer&lt;/code&gt; 있습니다 :</target>
        </trans-unit>
        <trans-unit id="db98f30b0477805218b1ae4bdb074256518e5803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the class loading system within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; 는 고유 내에서 클래스 로딩 시스템의 MXBean를 식별 &lt;code&gt;MBeanServer&lt;/code&gt; 있습니다 :</target>
        </trans-unit>
        <trans-unit id="55e8342fd743f84bda60cd36babb3e068a2e6ec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the compilation system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 컴파일 시스템의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="70515004bb956a637a0eaf59af0413164c30fb86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the memory system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 메모리 시스템의 MXBean를 식별은 :</target>
        </trans-unit>
        <trans-unit id="c1f16184d09f51af30331c1389e9013ddc4a17df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the operating system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 운영 체제의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="07da8e2d7411da3d53f255c201b631c0ac856d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the runtime system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 런타임 시스템의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="e9552b5b6f9a739364bfe6b9bdedc853e8972846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the thread system within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내에서 thread 시스템의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="8f8738e8ba429b9a8435d40f2c720f73710f949e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the diagnostic MXBean within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; MBeanServer 내 진단의 MXBean를 식별은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="9dcfa6a1fe8b9264f0661c006080ec7572ae4b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; class describes the management information of an</source>
          <target state="translated">&lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; 의 클래스는의 관리 정보를 기술</target>
        </trans-unit>
        <trans-unit id="b203a779783192d8423055b7a1a9da6d91af0f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; class is the parent abstract class of all classes which describe the actual</source>
          <target state="translated">&lt;code&gt;OpenType&lt;/code&gt; 클래스는 실제를 설명하는 모든 클래스의 부모 추상 클래스입니다</target>
        </trans-unit>
        <trans-unit id="586067081baeca1b7bed47bc53574acbdf981084" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; interface represents OpenType and TrueType fonts.</source>
          <target state="translated">The &lt;code&gt;OpenType&lt;/code&gt; interface represents OpenType and TrueType fonts.</target>
        </trans-unit>
        <trans-unit id="69a6dcd99d9214cc61611d6ad8120d0f1f893a75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; interface represents OpenType and TrueType fonts. This interface makes it possible to obtain</source>
          <target state="translated">The &lt;code&gt;OpenType&lt;/code&gt; interface represents OpenType and TrueType fonts. This interface makes it possible to obtain</target>
        </trans-unit>
        <trans-unit id="d1ddfa406472424e8cf5be6dc9b98f250e9362d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OperatingSystemMXBean&lt;/code&gt; object returned by &lt;a href=&quot;../../../../java.management/java/lang/management/managementfactory#getOperatingSystemMXBean()&quot;&gt;&lt;code&gt;ManagementFactory.getOperatingSystemMXBean()&lt;/code&gt;&lt;/a&gt; is an instance of the implementation class of this interface or &lt;a href=&quot;unixoperatingsystemmxbean&quot;&gt;&lt;code&gt;UnixOperatingSystemMXBean&lt;/code&gt;&lt;/a&gt; interface depending on its underlying operating system.</source>
          <target state="translated">&lt;code&gt;OperatingSystemMXBean&lt;/code&gt; 의해 리턴 된 객체 &lt;a href=&quot;../../../../java.management/java/lang/management/managementfactory#getOperatingSystemMXBean()&quot;&gt; &lt;code&gt;ManagementFactory.getOperatingSystemMXBean()&lt;/code&gt; &lt;/a&gt; 이 인터페이스의 구현 또는 클래스의 인스턴스 &lt;a href=&quot;unixoperatingsystemmxbean&quot;&gt; &lt;code&gt;UnixOperatingSystemMXBean&lt;/code&gt; &lt;/a&gt; 의 기본 운영 체제에 따라 인터페이스.</target>
        </trans-unit>
        <trans-unit id="0d757ff4a6ac675a5b4871ec062085d8cdb8da98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; 는 X.509 인증 경로가 PKIX (RFC 3280) 표준에 따라 유효하지 않을 수 있다는 가능성 PKIX 특정 이유를 열거합니다.</target>
        </trans-unit>
        <trans-unit id="42733b5171c383bf12f9d4a04e020e12857e5e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard. These reasons are in addition to those of the &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; enumeration.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; 는 X.509 인증 경로가 PKIX (RFC 3280) 표준에 따라 유효하지 않을 수 있다는 가능성 PKIX 특정 이유를 열거합니다. 이러한 이유는 &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; 열거 의 이유에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="f124acf83d481115e57686fb8856022de3bb5ad5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 5280) standard.</source>
          <target state="translated">The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 5280) standard.</target>
        </trans-unit>
        <trans-unit id="b371276a9e0ecfdae4ef1d34db216930ee628001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 5280) standard. These reasons are in addition to those of the &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; enumeration.</source>
          <target state="translated">The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 5280) standard. These reasons are in addition to those of the &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; enumeration.</target>
        </trans-unit>
        <trans-unit id="b88e3cb7dd76f092b2f7b4a5b2cc4c9436fd4cea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; corresponding to the given name, or &lt;code&gt;null&lt;/code&gt; if not found</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 지정된 이름, 또는에 해당하는 &lt;code&gt;null&lt;/code&gt; 이 발견되지 않는 경우는</target>
        </trans-unit>
        <trans-unit id="8cea7f9c2881d4122c6fe3725e32d9d4186f7d6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; of the given name defined by the caller's class loader or its ancestors, or &lt;code&gt;null&lt;/code&gt; if not found.</source>
          <target state="translated">The &lt;code&gt;Package&lt;/code&gt; of the given name defined by the caller's class loader or its ancestors, or &lt;code&gt;null&lt;/code&gt; if not found.</target>
        </trans-unit>
        <trans-unit id="5fd1cc3ac16334cb12b0c4423d000ccc75f52c4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; of the given name that has been defined by this class loader or its ancestors, or &lt;code&gt;null&lt;/code&gt; if not found.</source>
          <target state="translated">The &lt;code&gt;Package&lt;/code&gt; of the given name that has been defined by this class loader or its ancestors, or &lt;code&gt;null&lt;/code&gt; if not found.</target>
        </trans-unit>
        <trans-unit id="fd5390441ce6ec14e6a3933f1af826ecd94b5b2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; of the given name that has been defined by this class loader, or &lt;code&gt;null&lt;/code&gt; if not found</source>
          <target state="translated">The &lt;code&gt;Package&lt;/code&gt; of the given name that has been defined by this class loader, or &lt;code&gt;null&lt;/code&gt; if not found</target>
        </trans-unit>
        <trans-unit id="ab4f5e9594dd010a91bd8b2874b0a810ea17e89a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PackedColorModel&lt;/code&gt; class is an abstract &lt;a href=&quot;colormodel&quot;&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/a&gt; class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity.</source>
          <target state="translated">The &lt;code&gt;PackedColorModel&lt;/code&gt; class is an abstract &lt;a href=&quot;colormodel&quot;&gt; &lt;code&gt;ColorModel&lt;/code&gt; &lt;/a&gt; class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity.</target>
        </trans-unit>
        <trans-unit id="4bb1a00bbfc9f1dea7433acd9bcaca03b5f9b242" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PackedColorModel&lt;/code&gt; class is an abstract &lt;a href=&quot;colormodel&quot;&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/a&gt; class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity. This class can be used with an arbitrary &lt;a href=&quot;../color/colorspace&quot;&gt;&lt;code&gt;ColorSpace&lt;/code&gt;&lt;/a&gt;. The number of color samples in the pixel values must be the same as the number of color components in the &lt;code&gt;ColorSpace&lt;/code&gt;. There can be a single alpha sample. The array length is always 1 for those methods that use a primitive array pixel representation of type &lt;code&gt;transferType&lt;/code&gt;. The transfer types supported are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT. Color and alpha samples are stored in the single element of the array in bits indicated by bit masks. Each bit mask must be contiguous and masks must not overlap. The same masks apply to the single int pixel representation used by other methods. The correspondence of masks and color/alpha samples is as follows:</source>
          <target state="translated">The &lt;code&gt;PackedColorModel&lt;/code&gt; class is an abstract &lt;a href=&quot;colormodel&quot;&gt; &lt;code&gt;ColorModel&lt;/code&gt; &lt;/a&gt; class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity. This class can be used with an arbitrary &lt;a href=&quot;../color/colorspace&quot;&gt; &lt;code&gt;ColorSpace&lt;/code&gt; &lt;/a&gt;. The number of color samples in the pixel values must be the same as the number of color components in the &lt;code&gt;ColorSpace&lt;/code&gt; . There can be a single alpha sample. The array length is always 1 for those methods that use a primitive array pixel representation of type &lt;code&gt;transferType&lt;/code&gt; . The transfer types supported are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT. Color and alpha samples are stored in the single element of the array in bits indicated by bit masks. Each bit mask must be contiguous and masks must not overlap. The same masks apply to the single int pixel representation used by other methods. The correspondence of masks and color/alpha samples is as follows:</target>
        </trans-unit>
        <trans-unit id="f4da8a295ef7ca55a2a21f98350ad99faeb3408c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PageFormat&lt;/code&gt; class describes the size and orientation of a page to be printed.</source>
          <target state="translated">The &lt;code&gt;PageFormat&lt;/code&gt; class describes the size and orientation of a page to be printed.</target>
        </trans-unit>
        <trans-unit id="3fc0c1151979adab271a2d4c8566c09fd4940b98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pageable&lt;/code&gt; implementation represents a set of pages to be printed.</source>
          <target state="translated">The &lt;code&gt;Pageable&lt;/code&gt; implementation represents a set of pages to be printed.</target>
        </trans-unit>
        <trans-unit id="798364ebe516c1f54256e5ef56a58c4cd49a63b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pageable&lt;/code&gt; implementation represents a set of pages to be printed. The &lt;code&gt;Pageable&lt;/code&gt; object returns the total number of pages in the set as well as the &lt;a href=&quot;pageformat&quot;&gt;&lt;code&gt;PageFormat&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;printable&quot;&gt;&lt;code&gt;Printable&lt;/code&gt;&lt;/a&gt; for a specified page.</source>
          <target state="translated">The &lt;code&gt;Pageable&lt;/code&gt; implementation represents a set of pages to be printed. The &lt;code&gt;Pageable&lt;/code&gt; object returns the total number of pages in the set as well as the &lt;a href=&quot;pageformat&quot;&gt; &lt;code&gt;PageFormat&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;printable&quot;&gt; &lt;code&gt;Printable&lt;/code&gt; &lt;/a&gt; for a specified page.</target>
        </trans-unit>
        <trans-unit id="51cf376b48f9b133d54960ed20a5a73b0da03e28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PaintContext&lt;/code&gt; interface defines the encapsulated and optimized environment to generate color patterns in device space for fill or stroke operations on a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;PaintContext&lt;/code&gt; interface defines the encapsulated and optimized environment to generate color patterns in device space for fill or stroke operations on a &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6ff20bc3121fcd0d6a6a114604f6c04390ebf621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PaintContext&lt;/code&gt; interface defines the encapsulated and optimized environment to generate color patterns in device space for fill or stroke operations on a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;PaintContext&lt;/code&gt; provides the necessary colors for &lt;code&gt;Graphics2D&lt;/code&gt; operations in the form of a &lt;a href=&quot;image/raster&quot;&gt;&lt;code&gt;Raster&lt;/code&gt;&lt;/a&gt; associated with a &lt;a href=&quot;image/colormodel&quot;&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;PaintContext&lt;/code&gt; maintains state for a particular paint operation. In a multi-threaded environment, several contexts can exist simultaneously for a single &lt;a href=&quot;paint&quot;&gt;&lt;code&gt;Paint&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">The &lt;code&gt;PaintContext&lt;/code&gt; interface defines the encapsulated and optimized environment to generate color patterns in device space for fill or stroke operations on a &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt;. The &lt;code&gt;PaintContext&lt;/code&gt; provides the necessary colors for &lt;code&gt;Graphics2D&lt;/code&gt; operations in the form of a &lt;a href=&quot;image/raster&quot;&gt; &lt;code&gt;Raster&lt;/code&gt; &lt;/a&gt; associated with a &lt;a href=&quot;image/colormodel&quot;&gt; &lt;code&gt;ColorModel&lt;/code&gt; &lt;/a&gt;. The &lt;code&gt;PaintContext&lt;/code&gt; maintains state for a particular paint operation. In a multi-threaded environment, several contexts can exist simultaneously for a single &lt;a href=&quot;paint&quot;&gt; &lt;code&gt;Paint&lt;/code&gt; &lt;/a&gt; object.</target>
        </trans-unit>
        <trans-unit id="6da600e11920a8b9946bd8cf3002f1b4c14a63cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Paper&lt;/code&gt; class describes the physical characteristics of a piece of paper.</source>
          <target state="translated">The &lt;code&gt;Paper&lt;/code&gt; class describes the physical characteristics of a piece of paper.</target>
        </trans-unit>
        <trans-unit id="8e9f00d5d237f36cec15e4bb73bc5ff0ff6caccd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path2D&lt;/code&gt; class provides a simple, yet flexible shape which represents an arbitrary geometric path.</source>
          <target state="translated">The &lt;code&gt;Path2D&lt;/code&gt; class provides a simple, yet flexible shape which represents an arbitrary geometric path.</target>
        </trans-unit>
        <trans-unit id="7bb4be9fd3e9cc76024c763ef9710898d308c15f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path2D&lt;/code&gt; class provides a simple, yet flexible shape which represents an arbitrary geometric path. It can fully represent any path which can be iterated by the &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; interface including all of its segment types and winding rules and it implements all of the basic hit testing methods of the &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">The &lt;code&gt;Path2D&lt;/code&gt; class provides a simple, yet flexible shape which represents an arbitrary geometric path. It can fully represent any path which can be iterated by the &lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt; interface including all of its segment types and winding rules and it implements all of the basic hit testing methods of the &lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; interface.</target>
        </trans-unit>
        <trans-unit id="918982e89f589b2e61abc622e3fc1c886b57d8c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; is obtained by invoking the &lt;a href=&quot;filesystem#getPath(java.lang.String,java.lang.String...)&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;filesystems#getDefault()&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;Path&lt;/code&gt; is obtained by invoking the &lt;a href=&quot;filesystem#getPath(java.lang.String,java.lang.String...)&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; &lt;/a&gt; method of the &lt;a href=&quot;filesystems#getDefault()&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt; &lt;code&gt;FileSystem&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="90672781ed476b480c2d01bbaf4b2e5adafc4b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; is obtained by invoking the &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;filesystems#getDefault--&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 호출에 의해 얻어진다 &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; 의&lt;/a&gt; 의 방법 &lt;a href=&quot;filesystems#getDefault--&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt; &lt;code&gt;FileSystem&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c6a2d68919a75d0efae8c0507ff2d08e73f33e85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PathIterator&lt;/code&gt; interface provides the mechanism for objects that implement the &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; interface to return the geometry of their boundary by allowing a caller to retrieve the path of that boundary a segment at a time.</source>
          <target state="translated">The &lt;code&gt;PathIterator&lt;/code&gt; interface provides the mechanism for objects that implement the &lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; interface to return the geometry of their boundary by allowing a caller to retrieve the path of that boundary a segment at a time.</target>
        </trans-unit>
        <trans-unit id="c4cb1555c85d26e99433230af73509a9363c4989" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PathIterator&lt;/code&gt; interface provides the mechanism for objects that implement the &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; interface to return the geometry of their boundary by allowing a caller to retrieve the path of that boundary a segment at a time. This interface allows these objects to retrieve the path of their boundary a segment at a time by using 1st through 3rd order B&amp;eacute;zier curves, which are lines and quadratic or cubic B&amp;eacute;zier splines.</source>
          <target state="translated">The &lt;code&gt;PathIterator&lt;/code&gt; interface provides the mechanism for objects that implement the &lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; interface to return the geometry of their boundary by allowing a caller to retrieve the path of that boundary a segment at a time. This interface allows these objects to retrieve the path of their boundary a segment at a time by using 1st through 3rd order B&amp;eacute;zier curves, which are lines and quadratic or cubic B&amp;eacute;zier splines.</target>
        </trans-unit>
        <trans-unit id="5c79b8bbdbc6232b5734fc46d1a5e28d6bbf32c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pattern&lt;/code&gt; engine performs traditional NFA-based matching with ordered alternation as occurs in Perl 5.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 펄 5 발생할 때 엔진은 명령 교대 전통적인 NFA 기반의 정합을 수행한다.</target>
        </trans-unit>
        <trans-unit id="92995c19fa227cf2ab96897ff5eedb351ff466d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Permission&lt;/code&gt; class for link creation operations.</source>
          <target state="translated">&lt;code&gt;Permission&lt;/code&gt; 링크 생성 작업을위한 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="41e0cea64632e3ca5603c6f64f2ba33a33ea2503" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; object is also registered with the platform &lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt;MBeanServer&lt;/a&gt;. The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; for uniquely identifying the &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; within an MBeanServer is:</source>
          <target state="translated">The &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; object is also registered with the platform &lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt;MBeanServer&lt;/a&gt;. The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt; for uniquely identifying the &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; within an MBeanServer is:</target>
        </trans-unit>
        <trans-unit id="b15cfab53ee2a0eadd7dc3e89c6e3054abf67006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; object is also registered with the platform &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;MBeanServer&lt;/a&gt;. The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; for uniquely identifying the &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; 목적은 플랫폼에 등록 &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;의 MBeanServer&lt;/a&gt; . &lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; 를&lt;/a&gt; 고유하게 식별하는 &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; 의 MBeanServer 내에서이다 :</target>
        </trans-unit>
        <trans-unit id="0255ebf80bbcc8c5a2f44e9f14adb8567abeb8d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Point2D&lt;/code&gt; class defines a point representing a location in &lt;code&gt;(x,y)&lt;/code&gt; coordinate space.</source>
          <target state="translated">The &lt;code&gt;Point2D&lt;/code&gt; class defines a point representing a location in &lt;code&gt;(x,y)&lt;/code&gt; coordinate space.</target>
        </trans-unit>
        <trans-unit id="51fd15fd08c40e64c9f0a62e14caca8103322dfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Point2D&lt;/code&gt; in the destination image that corresponds to the specified point in the source image.</source>
          <target state="translated">The &lt;code&gt;Point2D&lt;/code&gt; in the destination image that corresponds to the specified point in the source image.</target>
        </trans-unit>
        <trans-unit id="e9db41020f8cfc583464f3b688783deb80a1748a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Point2D&lt;/code&gt; in the destination that corresponds to the specified point in the source.</source>
          <target state="translated">The &lt;code&gt;Point2D&lt;/code&gt; in the destination that corresponds to the specified point in the source.</target>
        </trans-unit>
        <trans-unit id="176ebc50958434620dc6e1fc7aedbf4aa4c19395" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Policy&lt;/code&gt; object consults the local policy and returns and appropriate &lt;code&gt;Permissions&lt;/code&gt; object with the Permissions granted to the Principals associated with the provided</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; 객체는 로컬 정책을 협의하고 돌아 적절한 &lt;code&gt;Permissions&lt;/code&gt; 제공된에 관련 지을 수 있었던 Principal에 부여 된 권한 객체를</target>
        </trans-unit>
        <trans-unit id="bc0f88823ab6ae735668139d74c93498b75f7a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Polygon&lt;/code&gt; class encapsulates a description of a closed, two-dimensional region within a coordinate space.</source>
          <target state="translated">The &lt;code&gt;Polygon&lt;/code&gt; class encapsulates a description of a closed, two-dimensional region within a coordinate space.</target>
        </trans-unit>
        <trans-unit id="d773293caf0f8c7512617d0ff6853b4e434dbc33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Polygon&lt;/code&gt; class encapsulates a description of a closed, two-dimensional region within a coordinate space. This region is bounded by an arbitrary number of line segments, each of which is one side of the polygon. Internally, a polygon comprises of a list of &lt;code&gt;(x,y)&lt;/code&gt; coordinate pairs, where each pair defines a</source>
          <target state="translated">The &lt;code&gt;Polygon&lt;/code&gt; class encapsulates a description of a closed, two-dimensional region within a coordinate space. This region is bounded by an arbitrary number of line segments, each of which is one side of the polygon. Internally, a polygon comprises of a list of &lt;code&gt;(x,y)&lt;/code&gt; coordinate pairs, where each pair defines a</target>
        </trans-unit>
        <trans-unit id="8f660c48a5927de5d279d0b4033c4ae98a5108f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer.</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; 의 클래스는 확장 &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를 포트의 이름을 포함하여 포트에 대한 자세한 내용을 구체적으로 그리고 여부 소스 또는 믹서의 대상이다.</target>
        </trans-unit>
        <trans-unit id="e65eb7e482423171ada7c491ef4eeceb1029407b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. By definition, a port acts as either a source or a target to its mixer, but not both. (Audio input ports are sources; audio output ports are targets.)</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; 의 클래스는 확장 &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를 포트의 이름을 포함하여 포트에 대한 자세한 내용을 구체적으로 그리고 여부 소스 또는 믹서의 대상이다. 정의에 따르면 포트는 믹서의 소스 또는 대상 역할을하지만 둘다는 아닙니다. (오디오 입력 포트는 소스이고 오디오 출력 포트는 대상입니다.)</target>
        </trans-unit>
        <trans-unit id="5514700d1e658c5e68c6a9044f1218f55b233edd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;Line.Info&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer.</source>
          <target state="translated">The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;Line.Info&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer.</target>
        </trans-unit>
        <trans-unit id="2b7466b90e627fdcb19a669e4837c462e6d9a2de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;Line.Info&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. By definition, a port acts as either a source or a target to its mixer, but not both. (Audio input ports are sources; audio output ports are targets.)</source>
          <target state="translated">The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;Line.Info&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. By definition, a port acts as either a source or a target to its mixer, but not both. (Audio input ports are sources; audio output ports are targets.)</target>
        </trans-unit>
        <trans-unit id="5ae842ea749d43311b4ec5700e9104dcbbe1e761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Predicate&lt;/code&gt; interface is a standard interface that applications can implement to define the filter they wish to apply to a a &lt;code&gt;FilteredRowSet&lt;/code&gt; object. A &lt;code&gt;FilteredRowSet&lt;/code&gt; object consumes implementations of this interface and enforces the constraints defined in the implementation of the method &lt;code&gt;evaluate&lt;/code&gt;. A &lt;code&gt;FilteredRowSet&lt;/code&gt; object enforces the filter constraints in a bi-directional manner: It outputs only rows that are within the constraints of the filter; and conversely, it inserts, modifies, or updates only rows that are within the constraints of the filter.</source>
          <target state="translated">The &lt;code&gt;Predicate&lt;/code&gt; interface is a standard interface that applications can implement to define the filter they wish to apply to a a &lt;code&gt;FilteredRowSet&lt;/code&gt; object. A &lt;code&gt;FilteredRowSet&lt;/code&gt; object consumes implementations of this interface and enforces the constraints defined in the implementation of the method &lt;code&gt;evaluate&lt;/code&gt; . A &lt;code&gt;FilteredRowSet&lt;/code&gt; object enforces the filter constraints in a bi-directional manner: It outputs only rows that are within the constraints of the filter; and conversely, it inserts, modifies, or updates only rows that are within the constraints of the filter.</target>
        </trans-unit>
        <trans-unit id="4c187a2ae24f6fe10978b472c34cc326cf74b873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PreferencesFactory&lt;/code&gt; implementation is located as follows:</source>
          <target state="translated">The &lt;code&gt;PreferencesFactory&lt;/code&gt; implementation is located as follows:</target>
        </trans-unit>
        <trans-unit id="b8bf7442319d0465fd61692705002688a0ac045b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PreparedStatement&lt;/code&gt; that is being closed or is invalid</source>
          <target state="translated">The &lt;code&gt;PreparedStatement&lt;/code&gt; that is being closed or is invalid</target>
        </trans-unit>
        <trans-unit id="8ae1e13889514879c41f4b82a2786cc0c9953e18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; can be requested in one of two printing modes. In both modes, it spreads table rows naturally in sequence across multiple pages, fitting as many rows as possible per page. &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; specifies that the table be printed at its current size. In this mode, there may be a need to spread columns across pages in a similar manner to that of the rows. When the need arises, columns are distributed in an order consistent with the table's &lt;code&gt;ComponentOrientation&lt;/code&gt;. &lt;code&gt;PrintMode.FIT_WIDTH&lt;/code&gt; specifies that the output be scaled smaller, if necessary, to fit the table's entire width (and thereby all columns) on each page. Width and height are scaled equally, maintaining the aspect ratio of the output.</source>
          <target state="translated">The &lt;code&gt;Printable&lt;/code&gt; can be requested in one of two printing modes. In both modes, it spreads table rows naturally in sequence across multiple pages, fitting as many rows as possible per page. &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; specifies that the table be printed at its current size. In this mode, there may be a need to spread columns across pages in a similar manner to that of the rows. When the need arises, columns are distributed in an order consistent with the table's &lt;code&gt;ComponentOrientation&lt;/code&gt; . &lt;code&gt;PrintMode.FIT_WIDTH&lt;/code&gt; specifies that the output be scaled smaller, if necessary, to fit the table's entire width (and thereby all columns) on each page. Width and height are scaled equally, maintaining the aspect ratio of the output.</target>
        </trans-unit>
        <trans-unit id="d90b7c1279ee9905eabe7667575548c1be503720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; constrains what it draws to the printable area of each page that it prints. Under certain circumstances, it may find it impossible to fit all of a page's content into that area. In these cases the output may be clipped, but the implementation makes an effort to do something reasonable. Here are a few situations where this is known to occur, and how they may be handled by this particular implementation:</source>
          <target state="translated">The &lt;code&gt;Printable&lt;/code&gt; constrains what it draws to the printable area of each page that it prints. Under certain circumstances, it may find it impossible to fit all of a page's content into that area. In these cases the output may be clipped, but the implementation makes an effort to do something reasonable. Here are a few situations where this is known to occur, and how they may be handled by this particular implementation:</target>
        </trans-unit>
        <trans-unit id="0e87b2cf55076570d0eef346208270663ceba3b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; heads the portion of table on each page with the appropriate section from the table's &lt;code&gt;JTableHeader&lt;/code&gt;, if it has one.</source>
          <target state="translated">The &lt;code&gt;Printable&lt;/code&gt; heads the portion of table on each page with the appropriate section from the table's &lt;code&gt;JTableHeader&lt;/code&gt; , if it has one.</target>
        </trans-unit>
        <trans-unit id="62eaa3a13cc3c735099760a21c4a9cf9313e1105" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; interface is implemented by the &lt;code&gt;print&lt;/code&gt; methods of the current page painter, which is called by the printing system to render a page.</source>
          <target state="translated">The &lt;code&gt;Printable&lt;/code&gt; interface is implemented by the &lt;code&gt;print&lt;/code&gt; methods of the current page painter, which is called by the printing system to render a page.</target>
        </trans-unit>
        <trans-unit id="e0f2e75e809287fcbcd5cb33c34ad66a05a8d318" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; interface is implemented by the &lt;code&gt;print&lt;/code&gt; methods of the current page painter, which is called by the printing system to render a page. When building a &lt;a href=&quot;pageable&quot;&gt;&lt;code&gt;Pageable&lt;/code&gt;&lt;/a&gt;, pairs of &lt;a href=&quot;pageformat&quot;&gt;&lt;code&gt;PageFormat&lt;/code&gt;&lt;/a&gt; instances and instances that implement this interface are used to describe each page. The instance implementing &lt;code&gt;Printable&lt;/code&gt; is called to print the page's graphics.</source>
          <target state="translated">The &lt;code&gt;Printable&lt;/code&gt; interface is implemented by the &lt;code&gt;print&lt;/code&gt; methods of the current page painter, which is called by the printing system to render a page. When building a &lt;a href=&quot;pageable&quot;&gt; &lt;code&gt;Pageable&lt;/code&gt; &lt;/a&gt;, pairs of &lt;a href=&quot;pageformat&quot;&gt; &lt;code&gt;PageFormat&lt;/code&gt; &lt;/a&gt; instances and instances that implement this interface are used to describe each page. The instance implementing &lt;code&gt;Printable&lt;/code&gt; is called to print the page's graphics.</target>
        </trans-unit>
        <trans-unit id="ac0d71a3c6e84bf3a7b4ac2010bf6cb3d7c2f903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterAbortException&lt;/code&gt; class is a subclass of &lt;a href=&quot;printerexception&quot;&gt;&lt;code&gt;PrinterException&lt;/code&gt;&lt;/a&gt; and is used to indicate that a user or application has terminated the print job while it was in the process of printing.</source>
          <target state="translated">The &lt;code&gt;PrinterAbortException&lt;/code&gt; class is a subclass of &lt;a href=&quot;printerexception&quot;&gt; &lt;code&gt;PrinterException&lt;/code&gt; &lt;/a&gt; and is used to indicate that a user or application has terminated the print job while it was in the process of printing.</target>
        </trans-unit>
        <trans-unit id="8291fb13987bd51c6c24249e8d111d094c6d983f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterException&lt;/code&gt; class and its subclasses are used to indicate that an exceptional condition has occurred in the print system.</source>
          <target state="translated">The &lt;code&gt;PrinterException&lt;/code&gt; class and its subclasses are used to indicate that an exceptional condition has occurred in the print system.</target>
        </trans-unit>
        <trans-unit id="d0286b3bdfead09b3ddabeab90a87f6c2dbe0b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterGraphics&lt;/code&gt; interface is implemented by &lt;a href=&quot;../graphics&quot;&gt;&lt;code&gt;Graphics&lt;/code&gt;&lt;/a&gt; objects that are passed to &lt;a href=&quot;printable&quot;&gt;&lt;code&gt;Printable&lt;/code&gt;&lt;/a&gt; objects to render a page.</source>
          <target state="translated">The &lt;code&gt;PrinterGraphics&lt;/code&gt; interface is implemented by &lt;a href=&quot;../graphics&quot;&gt; &lt;code&gt;Graphics&lt;/code&gt; &lt;/a&gt; objects that are passed to &lt;a href=&quot;printable&quot;&gt; &lt;code&gt;Printable&lt;/code&gt; &lt;/a&gt; objects to render a page.</target>
        </trans-unit>
        <trans-unit id="7c7b23e4c9e1c4b2853d8d828e50835dc408b873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterGraphics&lt;/code&gt; interface is implemented by &lt;a href=&quot;../graphics&quot;&gt;&lt;code&gt;Graphics&lt;/code&gt;&lt;/a&gt; objects that are passed to &lt;a href=&quot;printable&quot;&gt;&lt;code&gt;Printable&lt;/code&gt;&lt;/a&gt; objects to render a page. It allows an application to find the &lt;a href=&quot;printerjob&quot;&gt;&lt;code&gt;PrinterJob&lt;/code&gt;&lt;/a&gt; object that is controlling the printing.</source>
          <target state="translated">The &lt;code&gt;PrinterGraphics&lt;/code&gt; interface is implemented by &lt;a href=&quot;../graphics&quot;&gt; &lt;code&gt;Graphics&lt;/code&gt; &lt;/a&gt; objects that are passed to &lt;a href=&quot;printable&quot;&gt; &lt;code&gt;Printable&lt;/code&gt; &lt;/a&gt; objects to render a page. It allows an application to find the &lt;a href=&quot;printerjob&quot;&gt; &lt;code&gt;PrinterJob&lt;/code&gt; &lt;/a&gt; object that is controlling the printing.</target>
        </trans-unit>
        <trans-unit id="8c6e62b7cd391131d02c652075e5ac3c0a89e401" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterIOException&lt;/code&gt; class is a subclass of &lt;a href=&quot;printerexception&quot;&gt;&lt;code&gt;PrinterException&lt;/code&gt;&lt;/a&gt; and is used to indicate that an IO error of some sort has occurred while printing.</source>
          <target state="translated">The &lt;code&gt;PrinterIOException&lt;/code&gt; class is a subclass of &lt;a href=&quot;printerexception&quot;&gt; &lt;code&gt;PrinterException&lt;/code&gt; &lt;/a&gt; and is used to indicate that an IO error of some sort has occurred while printing.</target>
        </trans-unit>
        <trans-unit id="82eaac5fa28704ebde927e11ea586b3e320c6f37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterJob&lt;/code&gt; class is the principal class that controls printing.</source>
          <target state="translated">The &lt;code&gt;PrinterJob&lt;/code&gt; class is the principal class that controls printing.</target>
        </trans-unit>
        <trans-unit id="4b4fd4b60af924b1ba0d3eed68d2cf8f47f320d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterJob&lt;/code&gt; class is the principal class that controls printing. An application calls methods in this class to set up a job, optionally to invoke a print dialog with the user, and then to print the pages of the job.</source>
          <target state="translated">The &lt;code&gt;PrinterJob&lt;/code&gt; class is the principal class that controls printing. An application calls methods in this class to set up a job, optionally to invoke a print dialog with the user, and then to print the pages of the job.</target>
        </trans-unit>
        <trans-unit id="933ffd1a10f5aa2494d07bcb8dab5fb76775151d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProcessHandle&lt;/code&gt; static factory methods return instances that are &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/doc-files/ValueBased.html&quot;&gt;value-based&lt;/a&gt;, immutable and thread-safe. Use of identity-sensitive operations (including reference equality (&lt;code&gt;==&lt;/code&gt;), identity hash code, or synchronization) on these instances of &lt;code&gt;ProcessHandle&lt;/code&gt; may have unpredictable results and should be avoided. Use &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;&lt;code&gt;equals&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#compareTo(java.lang.ProcessHandle)&quot;&gt;&lt;code&gt;compareTo&lt;/code&gt;&lt;/a&gt; methods to compare ProcessHandles.</source>
          <target state="translated">The &lt;code&gt;ProcessHandle&lt;/code&gt; static factory methods return instances that are &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/doc-files/ValueBased.html&quot;&gt;value-based&lt;/a&gt;, immutable and thread-safe. Use of identity-sensitive operations (including reference equality ( &lt;code&gt;==&lt;/code&gt; ), identity hash code, or synchronization) on these instances of &lt;code&gt;ProcessHandle&lt;/code&gt; may have unpredictable results and should be avoided. Use &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt; &lt;code&gt;equals&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;#compareTo(java.lang.ProcessHandle)&quot;&gt; &lt;code&gt;compareTo&lt;/code&gt; &lt;/a&gt; methods to compare ProcessHandles.</target>
        </trans-unit>
        <trans-unit id="f34d0e406b35812c5e47d2d1968756eab5ecfb45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProcessHandle&lt;/code&gt; static factory methods return instances that are &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/doc-files/ValueBased.html&quot;&gt;value-based&lt;/a&gt;, immutable and thread-safe. Use of identity-sensitive operations (including reference equality (&lt;code&gt;==&lt;/code&gt;), identity hash code, or synchronization) on these instances of &lt;code&gt;ProcessHandle&lt;/code&gt; may have unpredictable results and should be avoided. Use &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;&lt;code&gt;equals&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#compareTo(java.lang.ProcessHandle)&quot;&gt;&lt;code&gt;compareTo&lt;/code&gt;&lt;/a&gt; methods to compare ProcessHandles.</source>
          <target state="translated">&lt;code&gt;ProcessHandle&lt;/code&gt; 정적 팩토리 메소드가 인스턴스 반환 &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/doc-files/ValueBased.html&quot;&gt;값 기반을&lt;/a&gt; , 불변 스레드 안전합니다. 이러한 &lt;code&gt;ProcessHandle&lt;/code&gt; 인스턴스 에서 ID에 민감한 작업 (참조 같음 ( &lt;code&gt;==&lt;/code&gt; ), ID 해시 코드 또는 동기화 포함)을 사용하면 예기치 않은 결과가 발생할 수 있으므로 피해야합니다. 사용은 &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt; &lt;code&gt;equals&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#compareTo(java.lang.ProcessHandle)&quot;&gt; &lt;code&gt;compareTo&lt;/code&gt; 와의&lt;/a&gt; 방법은 ProcessHandles을 비교.</target>
        </trans-unit>
        <trans-unit id="03f0e1b162793dcda086b30e64d17c70076f236a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProcessingInstruction&lt;/code&gt; interface represents a &quot;processing instruction&quot;, used in XML as a way to keep processor-specific information in the text of the document.</source>
          <target state="translated">The &lt;code&gt;ProcessingInstruction&lt;/code&gt; interface represents a &quot;processing instruction&quot;, used in XML as a way to keep processor-specific information in the text of the document.</target>
        </trans-unit>
        <trans-unit id="b1486c259ae3502fc3a329a70fbfe8ae9f08b495" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least &quot;user&quot; and &quot;password&quot; properties should be included in the &lt;code&gt;Properties&lt;/code&gt; object.</source>
          <target state="translated">The &lt;code&gt;Properties&lt;/code&gt; argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least &quot;user&quot; and &quot;password&quot; properties should be included in the &lt;code&gt;Properties&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="75282c40a85213c64330ab76483127cc3ec01312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class does not inherit the concept of a load factor from its superclass, &lt;code&gt;Hashtable&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Properties&lt;/code&gt; class does not inherit the concept of a load factor from its superclass, &lt;code&gt;Hashtable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d166a34742a6c6490e21ca168d2e6d673987afa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; 클래스는 불변의 프로퍼티 세트를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d09951cf74285f372797f262ca2d5541dfdf337c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties. The &lt;code&gt;Properties&lt;/code&gt; can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; 클래스는 불변의 프로퍼티 세트를 나타냅니다. &lt;code&gt;Properties&lt;/code&gt; 스트림에 저장되거나 스트림에서로드 할 수 있습니다. 속성 목록의 각 키와 해당 값은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="3b6c7ec85cd35e87cee3f3b62f08fa502097b985" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PropertyChangeListener&lt;/code&gt; must be from this context.</source>
          <target state="translated">The &lt;code&gt;PropertyChangeListener&lt;/code&gt; must be from this context.</target>
        </trans-unit>
        <trans-unit id="41efb79d3a1eca9cb5d81533032efc9675bf375a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PropertyChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PropertyChangeSupport&lt;/code&gt; 이와 관련된 &lt;code&gt;BeanContextChildSupport&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eace280cd8fbc57f7f7b6a31cb7bd7742834ba47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;QuadCurve2D&lt;/code&gt; class defines a quadratic parametric curve segment in &lt;code&gt;(x,y)&lt;/code&gt; coordinate space.</source>
          <target state="translated">The &lt;code&gt;QuadCurve2D&lt;/code&gt; class defines a quadratic parametric curve segment in &lt;code&gt;(x,y)&lt;/code&gt; coordinate space.</target>
        </trans-unit>
        <trans-unit id="61720eb2d433a3c828940b196eeb9541a74e0646" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Queue&lt;/code&gt; interface does not define the</source>
          <target state="translated">&lt;code&gt;Queue&lt;/code&gt; 인터페이스를 정의하지 않는다</target>
        </trans-unit>
        <trans-unit id="9d8e0ebf2afd9596c7284145e4756478b2f14fdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RGBColor&lt;/code&gt; interface is used to represent any RGB color value.</source>
          <target state="translated">&lt;code&gt;RGBColor&lt;/code&gt; 의 인터페이스는 임의의 RGB 칼라 값을 표현하는데 사용된다.</target>
        </trans-unit>
        <trans-unit id="ab87a46c6287473d39629ee90b5886a43245d004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RGBColor&lt;/code&gt; interface is used to represent any RGB color value. This interface reflects the values in the underlying style property. Hence, modifications made to the &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; objects modify the style property.</source>
          <target state="translated">&lt;code&gt;RGBColor&lt;/code&gt; 의 인터페이스는 임의의 RGB 칼라 값을 표현하는데 사용된다. 이 인터페이스는 기본 스타일 속성의 값을 반영합니다. 따라서 &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; 객체를 수정하면 스타일 속성이 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="3c802a31a324ed954aac93983d5b047944141b7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RIXMLProvider&lt;/code&gt; implementation uses the lowest level of synchronization and just writes &lt;code&gt;RowSet&lt;/code&gt; changes to the data source.</source>
          <target state="translated">The &lt;code&gt;RIXMLProvider&lt;/code&gt; implementation uses the lowest level of synchronization and just writes &lt;code&gt;RowSet&lt;/code&gt; changes to the data source.</target>
        </trans-unit>
        <trans-unit id="ac0fe76fb8dd0ed97837541e8c347d6bc8203ec2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RadialGradientPaint&lt;/code&gt; class provides a way to fill a shape with a circular radial color gradient pattern.</source>
          <target state="translated">The &lt;code&gt;RadialGradientPaint&lt;/code&gt; class provides a way to fill a shape with a circular radial color gradient pattern.</target>
        </trans-unit>
        <trans-unit id="402bca490996bdd2abb2791c2ec477a47b69c5ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RadialGradientPaint&lt;/code&gt; class provides a way to fill a shape with a circular radial color gradient pattern. The user may specify 2 or more gradient colors, and this paint will provide an interpolation between each color.</source>
          <target state="translated">The &lt;code&gt;RadialGradientPaint&lt;/code&gt; class provides a way to fill a shape with a circular radial color gradient pattern. The user may specify 2 or more gradient colors, and this paint will provide an interpolation between each color.</target>
        </trans-unit>
        <trans-unit id="72a0a7aaeb78342dc06a7bdd5ddfc266a67e6825" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Range&lt;/code&gt; enum replaces the traditional bit mask-based values (e.g., &lt;a href=&quot;numericshaper#ARABIC&quot;&gt;&lt;code&gt;NumericShaper.ARABIC&lt;/code&gt;&lt;/a&gt;), and supports more Unicode ranges than the bit mask-based ones. For example, the following code using the bit mask:</source>
          <target state="translated">The &lt;code&gt;Range&lt;/code&gt; enum replaces the traditional bit mask-based values (e.g., &lt;a href=&quot;numericshaper#ARABIC&quot;&gt; &lt;code&gt;NumericShaper.ARABIC&lt;/code&gt; &lt;/a&gt;), and supports more Unicode ranges than the bit mask-based ones. For example, the following code using the bit mask:</target>
        </trans-unit>
        <trans-unit id="0dd9840df06924282664fc3e67ddabe9defd6274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Raster&lt;/code&gt; being referenced.</source>
          <target state="translated">참조 되는 &lt;code&gt;Raster&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c6f82f0ae4c7c7b30125a9daf0c3db74dcf1b61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RasterFormatException&lt;/code&gt; is thrown if there is invalid layout information in the &lt;a href=&quot;raster&quot;&gt;&lt;code&gt;Raster&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;RasterFormatException&lt;/code&gt; is thrown if there is invalid layout information in the &lt;a href=&quot;raster&quot;&gt; &lt;code&gt;Raster&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a7d5ef2a80665b70e00f3dbb636dc72cbc088a21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; methods that read from the file throw &lt;code&gt;
 IOException&lt;/code&gt; if a malformed or unmappable byte sequence is read.</source>
          <target state="translated">The &lt;code&gt;Reader&lt;/code&gt; methods that read from the file throw &lt;code&gt; IOException&lt;/code&gt; if a malformed or unmappable byte sequence is read.</target>
        </trans-unit>
        <trans-unit id="79a2cd06471b623d73bdbbd167ab48aee2097b40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; methods that read from the file throw &lt;code&gt;IOException&lt;/code&gt; if a malformed or unmappable byte sequence is read.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 파일에서 읽어 방법은 던져 &lt;code&gt;IOException&lt;/code&gt; 가 잘못되었거나 맵 불가 바이트 시퀀스를 읽을 경우.</target>
        </trans-unit>
        <trans-unit id="180637fe735f25114352ee626b0787d96e82163f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; object that will be returned by the method &lt;code&gt;getCharacterStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">The &lt;code&gt;Reader&lt;/code&gt; object that will be returned by the method &lt;code&gt;getCharacterStream&lt;/code&gt; , which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</target>
        </trans-unit>
        <trans-unit id="99baa6f6ac31a6957c69fb473938422fc78f374d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed94dab085ac4d412b73c8fd6b794e9b312fa6f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rect&lt;/code&gt; interface is used to represent any rect value.</source>
          <target state="translated">&lt;code&gt;Rect&lt;/code&gt; 인터페이스는 RECT 값을 나타내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="995ce92c960435de8837694f0f78bec5fafefa46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rect&lt;/code&gt; interface is used to represent any rect value. This interface reflects the values in the underlying style property. Hence, modifications made to the &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; objects modify the style property.</source>
          <target state="translated">&lt;code&gt;Rect&lt;/code&gt; 인터페이스는 RECT 값을 나타내는 데 사용됩니다. 이 인터페이스는 기본 스타일 속성의 값을 반영합니다. 따라서 &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; 객체를 수정하면 스타일 속성이 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="63e032b900d34c7d460141383d0bab5c3879e7f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rectangle2D&lt;/code&gt; class describes a rectangle defined by a location &lt;code&gt;(x,y)&lt;/code&gt; and dimension &lt;code&gt;(w x h)&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Rectangle2D&lt;/code&gt; class describes a rectangle defined by a location &lt;code&gt;(x,y)&lt;/code&gt; and dimension &lt;code&gt;(w x h)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48e440d18cbeb470c2e070567bac333946a54aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rectangle2D&lt;/code&gt; representing the destination image's bounding box.</source>
          <target state="translated">The &lt;code&gt;Rectangle2D&lt;/code&gt; representing the destination image's bounding box.</target>
        </trans-unit>
        <trans-unit id="62ccf8df2768408a1c1674844bb46ef5f53b7825" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rectangle2D&lt;/code&gt; representing the destination's bounding box.</source>
          <target state="translated">The &lt;code&gt;Rectangle2D&lt;/code&gt; representing the destination's bounding box.</target>
        </trans-unit>
        <trans-unit id="b09d8d74cfacaa1243813daf514eb38609152c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if the static &lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int)&quot;&gt;&lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt;&lt;/a&gt; method is invoked, passing the &lt;code&gt;Registry&lt;/code&gt; instance and the specified &lt;code&gt;port&lt;/code&gt; as arguments, except that the &lt;code&gt;Registry&lt;/code&gt; instance is exported with a well-known object identifier, an &lt;a href=&quot;../server/objid&quot;&gt;&lt;code&gt;ObjID&lt;/code&gt;&lt;/a&gt; instance constructed with the value &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt;&lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if the static &lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int)&quot;&gt; &lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt; &lt;/a&gt; method is invoked, passing the &lt;code&gt;Registry&lt;/code&gt; instance and the specified &lt;code&gt;port&lt;/code&gt; as arguments, except that the &lt;code&gt;Registry&lt;/code&gt; instance is exported with a well-known object identifier, an &lt;a href=&quot;../server/objid&quot;&gt; &lt;code&gt;ObjID&lt;/code&gt; &lt;/a&gt; instance constructed with the value &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt; &lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7544022a4002643648e99cb248dc3e1edf70eac7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if the static &lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)&quot;&gt;&lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt;&lt;/a&gt; method is invoked, passing the &lt;code&gt;Registry&lt;/code&gt; instance, the specified &lt;code&gt;port&lt;/code&gt;, the specified &lt;code&gt;RMIClientSocketFactory&lt;/code&gt;, and the specified &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; as arguments, except that the &lt;code&gt;Registry&lt;/code&gt; instance is exported with a well-known object identifier, an &lt;a href=&quot;../server/objid&quot;&gt;&lt;code&gt;ObjID&lt;/code&gt;&lt;/a&gt; instance constructed with the value &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt;&lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if the static &lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)&quot;&gt; &lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt; &lt;/a&gt; method is invoked, passing the &lt;code&gt;Registry&lt;/code&gt; instance, the specified &lt;code&gt;port&lt;/code&gt; , the specified &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; , and the specified &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; as arguments, except that the &lt;code&gt;Registry&lt;/code&gt; instance is exported with a well-known object identifier, an &lt;a href=&quot;../server/objid&quot;&gt; &lt;code&gt;ObjID&lt;/code&gt; &lt;/a&gt; instance constructed with the value &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt; &lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a77e9ae2b2107d577c6cecf3ac83834ef29056d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Remote&lt;/code&gt; interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine.</source>
          <target state="translated">The &lt;code&gt;Remote&lt;/code&gt; interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine.</target>
        </trans-unit>
        <trans-unit id="79dd4ebe7717e3ca739dd65783e3b0cd2d2ad2b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Remote&lt;/code&gt; interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine. Any object that is a remote object must directly or indirectly implement this interface. Only those methods specified in a &quot;remote interface&quot;, an interface that extends &lt;code&gt;java.rmi.Remote&lt;/code&gt; are available remotely.</source>
          <target state="translated">The &lt;code&gt;Remote&lt;/code&gt; interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine. Any object that is a remote object must directly or indirectly implement this interface. Only those methods specified in a &quot;remote interface&quot;, an interface that extends &lt;code&gt;java.rmi.Remote&lt;/code&gt; are available remotely.</target>
        </trans-unit>
        <trans-unit id="9e1abc4fd1fdb1df6457b5ff98ccc8aecec8c9b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects.</source>
          <target state="translated">The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects.</target>
        </trans-unit>
        <trans-unit id="a0d6869267dfac5f76fcc33b3143f3ae5d0a24f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects. &lt;code&gt;RemoteObject&lt;/code&gt; provides the remote semantics of Object by implementing methods for hashCode, equals, and toString.</source>
          <target state="translated">The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects. &lt;code&gt;RemoteObject&lt;/code&gt; provides the remote semantics of Object by implementing methods for hashCode, equals, and toString.</target>
        </trans-unit>
        <trans-unit id="b05077cbaa2115faf813b944cba45ca60c9c6de1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteServer&lt;/code&gt; class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics.</source>
          <target state="translated">The &lt;code&gt;RemoteServer&lt;/code&gt; class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics.</target>
        </trans-unit>
        <trans-unit id="792164c73f012a6eeb208eb8bd1c997b5b34f4ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteServer&lt;/code&gt; class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics. Specifically, the functions needed to create and export remote objects (i.e. to make them remotely available) are provided abstractly by &lt;code&gt;RemoteServer&lt;/code&gt; and concretely by its subclass(es).</source>
          <target state="translated">The &lt;code&gt;RemoteServer&lt;/code&gt; class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics. Specifically, the functions needed to create and export remote objects (i.e. to make them remotely available) are provided abstractly by &lt;code&gt;RemoteServer&lt;/code&gt; and concretely by its subclass(es).</target>
        </trans-unit>
        <trans-unit id="fa93b21177eae717f290dacea22a21f97b8f1d72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteStub&lt;/code&gt; class is the common superclass of statically generated client stubs and provides the framework to support a wide range of remote reference semantics. Stub objects are surrogates that support exactly the same set of remote interfaces defined by the actual implementation of the remote object.</source>
          <target state="translated">The &lt;code&gt;RemoteStub&lt;/code&gt; class is the common superclass of statically generated client stubs and provides the framework to support a wide range of remote reference semantics. Stub objects are surrogates that support exactly the same set of remote interfaces defined by the actual implementation of the remote object.</target>
        </trans-unit>
        <trans-unit id="9fb5c4efba8253cf833773d52f6ee715196af2f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderedImage&lt;/code&gt; being referenced.</source>
          <target state="translated">참조되고 있는 &lt;code&gt;RenderedImage&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff6444550237d5fb85d8a7c51d5efc98d5ae9185" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services.</target>
        </trans-unit>
        <trans-unit id="9887a53bebe132f40788e0d2065e4ecd783e3235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services. The &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; class, and classes that implement &lt;a href=&quot;image/bufferedimageop&quot;&gt;&lt;code&gt;BufferedImageOp&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;image/rasterop&quot;&gt;&lt;code&gt;RasterOp&lt;/code&gt;&lt;/a&gt; all provide methods to get and possibly to set individual or groups of &lt;code&gt;RenderingHints&lt;/code&gt; keys and their associated values. When those implementations perform any rendering or image manipulation operations they should examine the values of any &lt;code&gt;RenderingHints&lt;/code&gt; that were requested by the caller and tailor the algorithms used accordingly and to the best of their ability.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services. The &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt; class, and classes that implement &lt;a href=&quot;image/bufferedimageop&quot;&gt; &lt;code&gt;BufferedImageOp&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;image/rasterop&quot;&gt; &lt;code&gt;RasterOp&lt;/code&gt; &lt;/a&gt; all provide methods to get and possibly to set individual or groups of &lt;code&gt;RenderingHints&lt;/code&gt; keys and their associated values. When those implementations perform any rendering or image manipulation operations they should examine the values of any &lt;code&gt;RenderingHints&lt;/code&gt; that were requested by the caller and tailor the algorithms used accordingly and to the best of their ability.</target>
        </trans-unit>
        <trans-unit id="698f6ce8695409c9c1d016b240fc277d2daf556f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this op.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this op.</target>
        </trans-unit>
        <trans-unit id="77e24654175305f0a647c70b9c35f59becd0d1e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this operation. Returns null if no hints have been set.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this operation. Returns null if no hints have been set.</target>
        </trans-unit>
        <trans-unit id="dcb353570992b66e098ee6f81b7550b5c291b768" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; object for this &lt;code&gt;BufferedImageOp&lt;/code&gt;. Returns null if no hints have been set.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; object for this &lt;code&gt;BufferedImageOp&lt;/code&gt; . Returns null if no hints have been set.</target>
        </trans-unit>
        <trans-unit id="fb9d41c3fa3c99032ae09838bf89f6521b0c7d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultSet&lt;/code&gt; interface provides</source>
          <target state="translated">The &lt;code&gt;ResultSet&lt;/code&gt; interface provides</target>
        </trans-unit>
        <trans-unit id="09f27659fdc1b9513eeb6b0754213ec48f2fa7c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultSet&lt;/code&gt; is sorted by the NAME column</source>
          <target state="translated">The &lt;code&gt;ResultSet&lt;/code&gt; is sorted by the NAME column</target>
        </trans-unit>
        <trans-unit id="887b6c862a54810bed3530170ef96026c940d025" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultSet&lt;/code&gt; object that is returned has the following columns:</source>
          <target state="translated">The &lt;code&gt;ResultSet&lt;/code&gt; object that is returned has the following columns:</target>
        </trans-unit>
        <trans-unit id="b9fc508b09fb91444f8aa155b416b9d56dbb1265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReverbType&lt;/code&gt; class provides methods for accessing various reverberation settings to be applied to an audio signal.</source>
          <target state="translated">&lt;code&gt;ReverbType&lt;/code&gt; 에의 클래스는 오디오 신호에 적용되는 다양한 바브 설정에 액세스하는 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="2cd9cf5f4a30505ba459be4135f61441e2ae2fa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundRectangle2D&lt;/code&gt; class defines a rectangle with rounded corners defined by a location &lt;code&gt;(x,y)&lt;/code&gt;, a dimension &lt;code&gt;(w x h)&lt;/code&gt;, and the width and height of an arc with which to round the corners.</source>
          <target state="translated">&lt;code&gt;RoundRectangle2D&lt;/code&gt; 클래스는 위치에 의해 정의 된 모서리가 둥근 직사각형 정의 &lt;code&gt;(x,y)&lt;/code&gt; , 치수 &lt;code&gt;(w x h)&lt;/code&gt; , 및 코너 라운딩 호의 폭과 높이.</target>
        </trans-unit>
        <trans-unit id="afe97ee9c3219412d61628980fe8432b9daaba4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this DecimalFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; 이에 DecimalFormat에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ffe20390fecad2daec079563f89bb0ffa523a1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this NumberFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; 이 NumberFormat를 사용.</target>
        </trans-unit>
        <trans-unit id="2bf318326f683bc3130a7e47f41a597fb78b5f4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface is unique in that it is intended to be implemented using the rest of the JDBC API. In other words, a &lt;code&gt;RowSet&lt;/code&gt; implementation is a layer of software that executes &quot;on top&quot; of a JDBC driver. Implementations of the &lt;code&gt;RowSet&lt;/code&gt; interface can be provided by anyone, including JDBC driver vendors who want to provide a &lt;code&gt;RowSet&lt;/code&gt; implementation as part of their JDBC products.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; 인터페이스는이 JDBC API의 나머지 부분을 사용하여 구현하기위한 것입니다있는 것이 독특하다. 즉, &lt;code&gt;RowSet&lt;/code&gt; 구현은 JDBC 드라이버의 &quot;상위&quot;에서 실행되는 소프트웨어 계층입니다. &lt;code&gt;RowSet&lt;/code&gt; 인터페이스의 구현은 JDBC 제품의 일부로 &lt;code&gt;RowSet&lt;/code&gt; 구현 을 제공하려는 JDBC 드라이버 공급 업체를 포함하여 누구나 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a660d92b53da40c64110ae03c4012f99aaf197b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface may be implemented in any number of ways, and anyone may write an implementation. Developers are encouraged to use their imaginations in coming up with new ways to use rowsets.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; 인터페이스는 많은 방법으로 구현할 수 있으며, 누구나가 구현을 작성할 수 있습니다. 개발자는 행 집합을 사용하는 새로운 방법을 생각 해낼 때 자신의 상상력을 사용하도록 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="6e183ab9ec4067e3978fb0f51f24da4f320d25d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface provides a set of JavaBeans properties that allow a &lt;code&gt;RowSet&lt;/code&gt; instance to be configured to connect to a JDBC data source and read some data from the data source. A group of setter methods (&lt;code&gt;setInt&lt;/code&gt;, &lt;code&gt;setBytes&lt;/code&gt;, &lt;code&gt;setString&lt;/code&gt;, and so on) provide a way to pass input parameters to a rowset's command property. This command is the SQL query the rowset uses when it gets its data from a relational database, which is generally the case.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; 인터페이스는 허용 자바빈 특성 세트 제공 &lt;code&gt;RowSet&lt;/code&gt; 인스턴스는 데이터 소스로부터 데이터를 JDBC 데이터 소스에 연결하고 판독하도록 구성된 것으로한다. setter 메서드 그룹 ( &lt;code&gt;setInt&lt;/code&gt; , &lt;code&gt;setBytes&lt;/code&gt; , &lt;code&gt;setString&lt;/code&gt; 등)은 입력 매개 변수를 행 집합의 명령 속성에 전달하는 방법을 제공합니다. 이 명령은 일반적으로 관계형 데이터베이스에서 데이터를 가져올 때 행 집합이 사용하는 SQL 쿼리입니다.</target>
        </trans-unit>
        <trans-unit id="7f4204c54cc12e00930766d695bcc0a0d93d8f28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface supports JavaBeans events, allowing other components in an application to be notified when an event occurs on a rowset, such as a change in its value.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; 이벤트가 같은 값의 변경으로, 행 집합에 발생하는 경우 응용 프로그램에서 다른 구성 요소를 허용 인터페이스를 지원하는 자바 빈즈 이벤트를 통지합니다.</target>
        </trans-unit>
        <trans-unit id="ff10a7bec4f9799f3f4222f05b3fb7ecfbe4c533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface works with various other classes and interfaces behind the scenes. These can be grouped into three categories.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; 인터페이스는 다른 다양한 클래스 나 인터페이스와 함께 배후 작동합니다. 이들은 세 가지 범주로 그룹화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed7467c598f02f617b848f30e8afc44cd8eee80c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSetMetaData&lt;/code&gt; interface differs from the &lt;code&gt;ResultSetMetaData&lt;/code&gt; interface in two ways.</source>
          <target state="translated">&lt;code&gt;RowSetMetaData&lt;/code&gt; 로부터 인터페이스 다릅니다 &lt;code&gt;ResultSetMetaData&lt;/code&gt; 에의 두 가지 방법으로 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="842bdaad38403a9056358dfffb5fed12b8ad0ac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSetMetaData&lt;/code&gt; interface provides methods for setting the information about columns, but an application would not normally use these methods. When an application calls the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;execute&lt;/code&gt;, the &lt;code&gt;RowSet&lt;/code&gt; object will contain a new set of rows, and its &lt;code&gt;RowSetMetaData&lt;/code&gt; object will have been internally updated to contain information about the new columns.</source>
          <target state="translated">&lt;code&gt;RowSetMetaData&lt;/code&gt; 인터페이스는 열에 관한 정보를 설정하는 방법을 제공하지만, 응용 프로그램은 일반적으로 이러한 방법을 사용하지 않을 것입니다. 응용 프로그램이 호출 할 때 &lt;code&gt;RowSet&lt;/code&gt; 방법은 &lt;code&gt;execute&lt;/code&gt; 의 &lt;code&gt;RowSet&lt;/code&gt; 객체는 행의 새로운 세트를 포함 해, 그 &lt;code&gt;RowSetMetaData&lt;/code&gt; 객체는 내부적으로 새로운 열에 관한 정보를 포함하도록 업데이트되었습니다됩니다.</target>
        </trans-unit>
        <trans-unit id="6a2e4c6f5a9389501138281dd4f3af7406e50bb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSetWarning&lt;/code&gt; class provides warnings that can be set on &lt;code&gt;RowSet&lt;/code&gt; implementations. Similar to &lt;a href=&quot;../../../../java.sql/java/sql/sqlwarning&quot;&gt;SQLWarning&lt;/a&gt; objects, &lt;code&gt;RowSetWarning&lt;/code&gt; objects are silently chained to the object whose method caused the warning to be thrown. All &lt;code&gt;RowSet&lt;/code&gt; implementations &lt;b&gt;should&lt;/b&gt; ensure that this chaining occurs if a warning is generated and also ensure that the warnings are available via the &lt;code&gt;getRowSetWarnings&lt;/code&gt; method defined in either the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface or the &lt;code&gt;CachedRowSet&lt;/code&gt; interface. After a warning has been retrieved with one of the &lt;code&gt;getRowSetWarnings&lt;/code&gt; methods, the &lt;code&gt;RowSetWarning&lt;/code&gt; method &lt;code&gt;getNextWarning&lt;/code&gt; can be called on it to retrieve any warnings that might be chained on it. If a warning is returned, &lt;code&gt;getNextWarning&lt;/code&gt; can be called on it, and so on until there are no more warnings.</source>
          <target state="translated">&lt;code&gt;RowSetWarning&lt;/code&gt; 클래스에서 설정할 수 있습니다 경고 제공 &lt;code&gt;RowSet&lt;/code&gt; 구현을. &lt;a href=&quot;../../../../java.sql/java/sql/sqlwarning&quot;&gt;SQLWarning&lt;/a&gt; 개체와 마찬가지로 &lt;code&gt;RowSetWarning&lt;/code&gt; 개체는 메서드가 경고를 발생시킨 개체에 자동으로 연결됩니다. 모든 &lt;code&gt;RowSet&lt;/code&gt; 구현 &lt;b&gt;은&lt;/b&gt; 경고가 생성 된 경우이 연결이 발생하는지 확인 하고 &lt;code&gt;JdbcRowSet&lt;/code&gt; 인터페이스 또는 &lt;code&gt;CachedRowSet&lt;/code&gt; 인터페이스에 정의 된 &lt;code&gt;getRowSetWarnings&lt;/code&gt; 메서드 를 통해 경고를 사용할 수 있는지 확인해야합니다 . &lt;code&gt;getRowSetWarnings&lt;/code&gt; 메소드 중 하나를 사용하여 경고를 검색 한 후 &lt;code&gt;RowSetWarning&lt;/code&gt; &lt;code&gt;getNextWarning&lt;/code&gt; 메소드를 호출하여 연결될 수있는 경고를 검색 할 수 있습니다. 경고가 리턴되면 &lt;code&gt;getNextWarning&lt;/code&gt; 이 호출 될 수 있으며 더 이상 경고가 없을 때까지 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="3ce1c50b3393b4ee8852b94258a4243c5413126c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowsetMetaDataImpl&lt;/code&gt; class is a utility class that provides an implementation of the &lt;a href=&quot;../../../../java.sql/javax/sql/rowsetmetadata&quot;&gt;RowSetMetaData&lt;/a&gt; interface, supplying standard setter method implementations for metadata for both connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects. All implementations are free to use this standard implementation but are not required to do so.</source>
          <target state="translated">&lt;code&gt;RowsetMetaDataImpl&lt;/code&gt; 클래스 구현 제공하는 유틸리티 클래스 &lt;a href=&quot;../../../../java.sql/javax/sql/rowsetmetadata&quot;&gt;에서 RowSetMetaData에&lt;/a&gt; 모두 연결하거나 분리 메타 데이터 표준 설정 메소드 구현 공급 인터페이스 &lt;code&gt;RowSet&lt;/code&gt; 오브젝트. 모든 구현은이 표준 구현을 무료로 사용할 수 있지만 반드시 그렇게 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="9a6c5472e51dff7ede55a06c630f405c31babb27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; 클래스의 구상 서브 클래스입니다 &lt;code&gt;Collator&lt;/code&gt; 간단한 데이터 드리븐의 테이블 Collator를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2ed8190679df509541420fb54e8aaab97382d51f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator. With this class you can create a customized table-based &lt;code&gt;Collator&lt;/code&gt;. &lt;code&gt;RuleBasedCollator&lt;/code&gt; maps characters to sort keys.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; 클래스의 구상 서브 클래스입니다 &lt;code&gt;Collator&lt;/code&gt; 간단한 데이터 드리븐의 테이블 Collator를 제공합니다. 이 클래스를 사용하면 사용자 정의 된 테이블 기반 &lt;code&gt;Collator&lt;/code&gt; 를 작성할 수 있습니다 . &lt;code&gt;RuleBasedCollator&lt;/code&gt; 는 문자를 정렬하여 키를 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="5098c81b7457412bf4917d02e9a1dfef85b5fe26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; 인터페이스는 스레드가 해당 인스턴스를 실행하는 모든 클래스에 의해 구현되어야한다.</target>
        </trans-unit>
        <trans-unit id="d8f15f8d81c303338ba2b966d98884e4108ae0f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called &lt;code&gt;run&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; 인터페이스는 스레드가 해당 인스턴스를 실행하는 모든 클래스에 의해 구현되어야한다. 클래스는 &lt;code&gt;run&lt;/code&gt; 이라는 인수가없는 메소드를 정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5ed109534b0233e529cda2e37e8cc9f0e3ad7221" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SCTPChannel&lt;/code&gt; returned by this method, if any, will be in blocking mode regardless of the blocking mode of this channel.</source>
          <target state="translated">&lt;code&gt;SCTPChannel&lt;/code&gt; 가 있는 경우,이 채널의 블록 모드에 관계없이 차단 모드에있을 것이며, 이러한 방법에 의해 리턴.</target>
        </trans-unit>
        <trans-unit id="d3f808001c5fe1d02e1eabc6c93ae2430220e931" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SHORT&lt;/code&gt; number format style.</source>
          <target state="translated">&lt;code&gt;SHORT&lt;/code&gt; 의 숫자 형식 스타일.</target>
        </trans-unit>
        <trans-unit id="d9f88a23d98de0fb1ab893f3f7409818a9bbc61d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SMART&lt;/code&gt; behaviour handles the common &quot;end of day&quot; 24:00 value. Processing in &lt;code&gt;LENIENT&lt;/code&gt; mode also produces the same result:</source>
          <target state="translated">&lt;code&gt;SMART&lt;/code&gt; 의 동작은 24:00 값 일반적인 &quot;하루의 끝을&quot;처리합니다. &lt;code&gt;LENIENT&lt;/code&gt; 모드 에서 처리해 도 동일한 결과가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="41ead63f7c6236fad7e6307adb65902f694060ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SQLException&lt;/code&gt; the driver is about to throw</source>
          <target state="translated">&lt;code&gt;SQLException&lt;/code&gt; 드라이버는 던져에 관한 것입니다</target>
        </trans-unit>
        <trans-unit id="1740ef1e8ee2276f649ff5e25da7294fc66b2bc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SQLInputImpl&lt;/code&gt; class provides a set of reader methods analogous to the &lt;code&gt;ResultSet&lt;/code&gt; getter methods. These methods make it possible to read the values in an &lt;code&gt;SQLInputImpl&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;SQLInputImpl&lt;/code&gt; 클래스는 유사 리더 메소드 세트 제공 &lt;code&gt;ResultSet&lt;/code&gt; 게터 방법. 이 메소드를 사용하면 &lt;code&gt;SQLInputImpl&lt;/code&gt; 오브젝트 의 값을 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e31e968e4e78d48b334cc0a2fd729e775d78ea9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SQLInputImpl&lt;/code&gt; class provides a set of reader methods analogous to the &lt;code&gt;ResultSet&lt;/code&gt; getter methods. These methods make it possible to read the values in an &lt;code&gt;SQLInputImpl&lt;/code&gt; object. The method &lt;code&gt;wasNull&lt;/code&gt; is used to determine whether the last value read was SQL NULL.</source>
          <target state="translated">&lt;code&gt;SQLInputImpl&lt;/code&gt; 클래스는 유사 리더 메소드 세트 제공 &lt;code&gt;ResultSet&lt;/code&gt; 게터 방법. 이 메소드를 사용하면 &lt;code&gt;SQLInputImpl&lt;/code&gt; 오브젝트 의 값을 읽을 수 있습니다 . &lt;code&gt;wasNull&lt;/code&gt; 메소드 는 마지막으로 읽은 값이 SQL NULL인지 판별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="64049cd592e8eb0ec78aec4cd353b6f5aabba963" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; completed the operation, and is available to process similar calls.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 작업을 완료하고, 유사한 전화를 처리 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="077b184f78f7e5525918d7fe92403baaa5f9a42d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; has just finished handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 단지 핸드 쉐이크를 완료했습니다.</target>
        </trans-unit>
        <trans-unit id="df118613b41d79c011b7a0bc6c7f48652d896d51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; is not currently handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 현재 핸드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1926ac57988ad07ff17731c0dbc1dd707e5b1e02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; must send data to the remote side before handshaking can continue, so &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; should be called.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; , 그래서 전에 핸드 쉐이크를 계속 원격 측에 데이터를 전송해야 &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="02fa5e3b89e2cea3ead9db69cbe845f18df35ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs the results of one (or more) delegated tasks before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 핸드 쉐이크를 계속하기 전에 하나 (또는 그 이상)의 위임 된 작업의 결과를 필요로한다.</target>
        </trans-unit>
        <trans-unit id="082a3cd7613f1264f8b5206e5fbed35f61a0dff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs to receive data from the remote side before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 핸드 쉐이크를 계속하기 전에 원격 측으로부터 데이터를 수신 할 필요가있다.</target>
        </trans-unit>
        <trans-unit id="a7d5c985500f42653f476fc251500be91c49e1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs to unwrap before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 핸드 쉐이크를 계속하기 전에 포장을 푸는 필요가있다.</target>
        </trans-unit>
        <trans-unit id="d352a14052137339f442e35be68221c08d8d1336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; produces/consumes complete SSL/TLS packets only, and does not store application data internally between calls to &lt;code&gt;wrap()/unwrap()&lt;/code&gt;. Thus input and output &lt;code&gt;ByteBuffer&lt;/code&gt;s must be sized appropriately to hold the maximum record that can be produced. Calls to &lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt;&lt;/a&gt; should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via &lt;a href=&quot;sslengineresult&quot;&gt;&lt;code&gt;SSLEngineResult&lt;/code&gt;&lt;/a&gt;) and correct the problem, and then try the call again.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 의이 / 생산에만 완전한 SSL / TLS 패킷을 소모하며, 호출시 내부 응용 프로그램 데이터를 저장하지 않습니다 &lt;code&gt;wrap()/unwrap()&lt;/code&gt; . 따라서 입력 및 출력 &lt;code&gt;ByteBuffer&lt;/code&gt; 의 크기는 생성 할 수있는 최대 레코드를 보유 할 수있는 적절한 크기 여야합니다. 적절한 버퍼 크기를 결정하려면 &lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt; &lt;/a&gt; 호출 해야합니다. 아웃 바운드 애플리케이션 데이터 버퍼의 크기는 일반적으로 중요하지 않습니다. 버퍼 조건이 데이터의 올바른 소비 / 생산을 허용하지 않는 경우 애플리케이션은 &lt;a href=&quot;sslengineresult&quot;&gt; &lt;code&gt;SSLEngineResult&lt;/code&gt; &lt;/a&gt; 를 통해 문제점을 판별 하고 수정 한 후 호출을 다시 시도해야합니다.</target>
        </trans-unit>
        <trans-unit id="d281a4755dd5b701c487bc1d549aca11bc928e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; produces/consumes complete SSL/TLS/DTLS packets only, and does not store application data internally between calls to &lt;code&gt;wrap()/unwrap()&lt;/code&gt;. Thus input and output &lt;code&gt;ByteBuffer&lt;/code&gt;s must be sized appropriately to hold the maximum record that can be produced. Calls to &lt;a href=&quot;sslsession#getPacketBufferSize()&quot;&gt;&lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sslsession#getApplicationBufferSize()&quot;&gt;&lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt;&lt;/a&gt; should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via &lt;a href=&quot;sslengineresult&quot;&gt;&lt;code&gt;SSLEngineResult&lt;/code&gt;&lt;/a&gt;) and correct the problem, and then try the call again.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 의이 / 생산 완전한 SSL / TLS / DTLS 패킷만을 소모하며,에 호출 사이에 저장하지 응용 프로그램 데이터를 내부적으로 수행 &lt;code&gt;wrap()/unwrap()&lt;/code&gt; . 따라서 입력 및 출력 &lt;code&gt;ByteBuffer&lt;/code&gt; 는 생성 할 수있는 최대 레코드를 보유 할 수 있도록 적절한 크기를 지정해야합니다. &lt;a href=&quot;sslsession#getPacketBufferSize()&quot;&gt; &lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;sslsession#getApplicationBufferSize()&quot;&gt; &lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt; &lt;/a&gt; 호출을 사용하여 적절한 버퍼 크기를 결정해야합니다. 아웃 바운드 애플리케이션 데이터 버퍼의 크기는 일반적으로 중요하지 않습니다. 버퍼 조건이 데이터의 적절한 소비 / 생산을 허용하지 않는 경우 애플리케이션은 문제를 확인하고 ( &lt;a href=&quot;sslengineresult&quot;&gt; &lt;code&gt;SSLEngineResult&lt;/code&gt; &lt;/a&gt; 를 통해 ) 수정 한 다음 호출을 다시 시도해야합니다.</target>
        </trans-unit>
        <trans-unit id="b752ac795479df72fea9b170d743467ba0f0cfba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to process the operation because there are not enough bytes available in the destination buffer to hold the result.</source>
          <target state="translated">그만큼 &lt;code&gt;SSLEngine&lt;/code&gt; 결과를 저장하는 대상 버퍼에 충분한 바이트가 없기 때문에 작업을 처리 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="eaeaedd8a0decde5ead8adb6e73dcb183ff095c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to unwrap the incoming data because there were not enough source bytes available to make a complete packet.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 충분한 소스가 전체 패킷을 만들기 위해 사용할 수 바이트가 없었기 때문에 들어오는 데이터 랩을 해제 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="cbaeb5659c8aac8f7fee34b65d2504a15d654f38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLSocket&lt;/code&gt; class provides much of the same security functionality, but all of the inbound and outbound data is automatically transported using the underlying &lt;a href=&quot;../../../java/net/socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt;, which by design uses a blocking model. While this is appropriate for many applications, this model does not provide the scalability required by large servers.</source>
          <target state="translated">&lt;code&gt;SSLSocket&lt;/code&gt; 클래스는 거의 같은 보안 기능을 제공하지만, 인바운드 및 아웃 바운드의 모든 데이터가 자동으로 기본 사용하여 전송되는 &lt;a href=&quot;../../../java/net/socket&quot;&gt; &lt;code&gt;Socket&lt;/code&gt; &lt;/a&gt; 디자인에 의해 차단 모델을 사용합니다. 이것은 많은 응용 프로그램에 적합하지만이 모델은 대규모 서버에 필요한 확장 성을 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0096287b7ac27b301cefed5627b43cb896febf8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SchemaFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;http://www.w3.org/TR/xmlschema-1&quot;&gt;W3C XML Schema 1.0&lt;/a&gt;, but may support additional &lt;a href=&quot;#schemaLanguage&quot;&gt;schema languages&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SchemaFactory&lt;/code&gt; 를의 내장 시스템 디폴트의 구현 만 지원하는 데 필요한 &lt;a href=&quot;http://www.w3.org/TR/xmlschema-1&quot;&gt;W3C XML 스키마 1.0&lt;/a&gt; 만 추가 지원할 수 &lt;a href=&quot;#schemaLanguage&quot;&gt;스키마 언어&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7e2fbe337a7cccde43edff1b51bee0ae5e969a9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SchemaFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;https://www.w3.org/TR/xmlschema-1&quot;&gt;W3C XML Schema 1.0&lt;/a&gt;, but may support additional &lt;a href=&quot;#schemaLanguage&quot;&gt;schema languages&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SchemaFactory&lt;/code&gt; 를의 내장 시스템 디폴트의 구현 만 지원하는 데 필요한 &lt;a href=&quot;https://www.w3.org/TR/xmlschema-1&quot;&gt;W3C XML 스키마 1.0&lt;/a&gt; 만 추가 지원할 수 &lt;a href=&quot;#schemaLanguage&quot;&gt;스키마 언어&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="67002f2853371825d4f380e6151673d61fd862c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; implementation version.</source>
          <target state="translated">&lt;code&gt;ScriptEngine&lt;/code&gt; 구현의 버젼.</target>
        </trans-unit>
        <trans-unit id="f25a0860dae0919f1e2c083b37f6094e4c1e6bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; that created this &lt;code&gt;CompiledScript&lt;/code&gt;</source>
          <target state="translated">이 &lt;code&gt;CompiledScript&lt;/code&gt; 를 생성 한 &lt;code&gt;ScriptEngine&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e21343e7ca5145a39ccb5bfd47f5b581373d98e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineFactory&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ScriptEngineFactory&lt;/code&gt; 에</target>
        </trans-unit>
        <trans-unit id="b665ef5d411bf64411a13e786d5fc2ae59afce43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는를 위한 검색 및 인스턴스화기구 구현 &lt;code&gt;ScriptEngine&lt;/code&gt; 클래스 또한 관리자 작성한 모든 엔진에 의해 공유 상태를 저장하는 키 / 값 쌍의 컬렉션을 유지한다.</target>
        </trans-unit>
        <trans-unit id="bb930e4838810a193fdb5c27c289e1b3c97321a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. This class uses the service provider mechanism described in the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt; class to enumerate all the implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는를 위한 검색 및 인스턴스화기구 구현 &lt;code&gt;ScriptEngine&lt;/code&gt; 클래스 또한 관리자 작성한 모든 엔진에 의해 공유 상태를 저장하는 키 / 값 쌍의 컬렉션을 유지한다. 이 클래스는 &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt; 클래스에 설명 된 서비스 공급자 메커니즘을 사용하여 &lt;code&gt;ScriptEngineFactory&lt;/code&gt; 의 모든 구현을 열거합니다 .</target>
        </trans-unit>
        <trans-unit id="e8ac26f4b46b05f20c281cbfe3a63c1a0d4d63f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. This class uses the service provider mechanism to enumerate all the implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는를 위한 검색 및 인스턴스화기구 구현 &lt;code&gt;ScriptEngine&lt;/code&gt; 클래스 또한 관리자 작성한 모든 엔진에 의해 공유 상태를 저장하는 키 / 값 쌍의 컬렉션을 유지한다. 이 클래스는 서비스 제공 업체 메커니즘을 사용하여 모든 &lt;code&gt;ScriptEngineFactory&lt;/code&gt; 구현을 열거합니다 .</target>
        </trans-unit>
        <trans-unit id="c8f5248bd1e6ed1326e622b205ee4a45bbc651cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; provides a method to return a list of all these factories as well as utility methods which look up factories on the basis of language name, file extension and mime type.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는은 으로 잘 언어 이름, 파일 확장자 및 MIME 타입에 근거하여 공장을 찾아 유틸리티 방법으로 이러한 모든 공장의 목록을 반환하는 방법을 제공한다.</target>
        </trans-unit>
        <trans-unit id="901dec5a90ef8a0878213de32ad7798df415e097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; uses the service provider mechanism described in the</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는은 에 설명 서비스 제공자 메커니즘을 사용</target>
        </trans-unit>
        <trans-unit id="c74549e06bd34285399a1ea925354aef44983aef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; uses the service-provider loader mechanism described in the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt; class to obtain instances of &lt;code&gt;ScriptEngineFactory&lt;/code&gt; instances. See &lt;a href=&quot;scriptenginemanager#%3Cinit%3E()&quot;&gt;&lt;code&gt;ScriptEngineManager()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;scriptenginemanager#%3Cinit%3E(java.lang.ClassLoader)&quot;&gt;&lt;code&gt;ScriptEngineManager(java.lang.ClassLoader)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; 는은 에 설명 서비스 제공자 로더기구 사용 &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; 의&lt;/a&gt; 인스턴스를 획득 할 클래스 &lt;code&gt;ScriptEngineFactory&lt;/code&gt; 인스턴스. &lt;a href=&quot;scriptenginemanager#%3Cinit%3E()&quot;&gt; &lt;code&gt;ScriptEngineManager()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;scriptenginemanager#%3Cinit%3E(java.lang.ClassLoader)&quot;&gt; &lt;code&gt;ScriptEngineManager(java.lang.ClassLoader)&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="932ad5c0b4a4f7d61a4d48e2e85b2a5aec990bf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Scrollbar&lt;/code&gt; class embodies a scroll bar, a familiar user-interface object.</source>
          <target state="translated">&lt;code&gt;Scrollbar&lt;/code&gt; 클래스는 스크롤 바, 친숙한 사용자 인터페이스 객체를 구현한다.</target>
        </trans-unit>
        <trans-unit id="5630c5e07781b19f55a9c82b7919e0cb4c1d7533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Scrollbar&lt;/code&gt; class embodies a scroll bar, a familiar user-interface object. A scroll bar provides a convenient means for allowing a user to select from a range of values. The following three vertical scroll bars could be used as slider controls to pick the red, green, and blue components of a color:</source>
          <target state="translated">&lt;code&gt;Scrollbar&lt;/code&gt; 클래스는 스크롤 바, 친숙한 사용자 인터페이스 객체를 구현한다. 스크롤 막대는 사용자가 값 범위에서 선택할 수있는 편리한 수단을 제공합니다. 다음 세 개의 수직 스크롤 막대를 슬라이더 컨트롤로 사용하여 색상의 빨강, 녹색 및 파랑 구성 요소를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43cb6349a89fc413e1dd0550d70890cc77d3e5a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SctpChannel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SctpChannel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dcf2e0bf99eab15ad6a0fa15e39d7a6c2e33fef8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SearchResult&lt;/code&gt; may also contain attributes of the matching object if the &lt;code&gt;cons&lt;/code&gt; argument specifies that attributes be returned.</source>
          <target state="translated">&lt;code&gt;SearchResult&lt;/code&gt; 경우도 일치하는 객체의 속성을 포함 할 수있다 &lt;code&gt;cons&lt;/code&gt; 속성 인수 지정이 반환 될 수있다.</target>
        </trans-unit>
        <trans-unit id="eabc9dbc1a3de0e0e126d5d1a67a58df32a7962f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SecurityManager&lt;/code&gt; class contains many methods with names that begin with the word &lt;code&gt;check&lt;/code&gt;. These methods are called by various methods in the Java libraries before those methods perform certain potentially sensitive operations. The invocation of such a &lt;code&gt;check&lt;/code&gt; method typically looks like this:</source>
          <target state="translated">&lt;code&gt;SecurityManager&lt;/code&gt; 클래스는 단어로 시작하는 이름을 가진 많은 방법이 포함되어 &lt;code&gt;check&lt;/code&gt; . 이러한 메소드는 잠재적으로 민감한 특정 조작을 수행하기 전에 Java 라이브러리의 다양한 메소드에 의해 호출됩니다. 이러한 &lt;code&gt;check&lt;/code&gt; 메소드 의 호출은 일반적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cdf333c83d829b3401cd3328628d6c609f64f31a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sequencer&lt;/code&gt; interface includes methods for the following basic MIDI sequencer operations:</source>
          <target state="translated">&lt;code&gt;Sequencer&lt;/code&gt; 인터페이스는 다음과 같은 기본적인 MIDI 시퀀서 조작이 포함됩니다 :</target>
        </trans-unit>
        <trans-unit id="ca4629da4215ec3fb3d7c910ce572fca6f512771" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialArray&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialArray&lt;/code&gt; instance from an &lt;code&gt;Array&lt;/code&gt; object, methods for getting the base type and the SQL name for the base type, and methods for copying all or part of a &lt;code&gt;SerialArray&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;SerialArray&lt;/code&gt; 클래스는 생성하는 생성자를 제공 &lt;code&gt;SerialArray&lt;/code&gt; 에서 인스턴스를 &lt;code&gt;Array&lt;/code&gt; 객체, 기본 유형과 기본 유형의 SQL 이름 및 전부 또는 일부 복사하는 방법 취득하기위한 방법 &lt;code&gt;SerialArray&lt;/code&gt; 객체를.</target>
        </trans-unit>
        <trans-unit id="3613b9a6953562b14aa7159f20c01879def263ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialArray&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialArray&lt;/code&gt; instance from an Array object, methods for getting the base type and the SQL name for the base type, and methods for copying all or part of a &lt;code&gt;SerialArray&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;SerialArray&lt;/code&gt; 클래스는 생성하는 생성자를 제공 &lt;code&gt;SerialArray&lt;/code&gt; Array 객체로부터 인스턴스를 기본 유형과 기본 유형의 SQL 이름 및 전부 또는 일부 복사하는 방법 취득하기위한 방법 &lt;code&gt;SerialArray&lt;/code&gt; 객체를.</target>
        </trans-unit>
        <trans-unit id="b2b0eceea94ee3adc7c8249de1bfdf76c94557a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialBlob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Blob&lt;/code&gt; object. Note that the &lt;code&gt;Blob&lt;/code&gt; object should have brought the SQL &lt;code&gt;BLOB&lt;/code&gt; value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt; object is constructed from it. The data of an SQL &lt;code&gt;BLOB&lt;/code&gt; value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt;) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;SerialBlob&lt;/code&gt; 의 클래스는로부터 인스턴스를 작성하기위한 생성자 제공 &lt;code&gt;Blob&lt;/code&gt; 객체. 주의 &lt;code&gt;Blob&lt;/code&gt; 객체가 SQL 건네 줄 필요 &lt;code&gt;BLOB&lt;/code&gt; 의 사전이 클라이언트에 걸쳐 값의 데이터를 &lt;code&gt;SerialBlob&lt;/code&gt; 의 객체는로 구성된다. 는 SQL의 데이터 &lt;code&gt;BLOB&lt;/code&gt; 의 값 (메소드 사용 바이트의 배열로 클라이언트에 구체화 될 수 &lt;code&gt;Blob.getBytes&lt;/code&gt; 을 ) 또는 해석의 바이트 스트림으로 (있어서 사용 &lt;code&gt;Blob.getBinaryStream&lt;/code&gt; 을 ).</target>
        </trans-unit>
        <trans-unit id="daca7fc0c00803e3d344fe9e44d60a1abc8d188f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialBlob&lt;/code&gt; class provides a constructor for creating an instance from a Blob object. Note that the Blob object should have brought the SQL BLOB value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt; object is constructed from it. The data of an SQL BLOB value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt;) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;SerialBlob&lt;/code&gt; 의 클래스는 Blob 객체로부터 인스턴스를 작성하기위한 생성자를 제공한다. Blob 개체는 &lt;code&gt;SerialBlob&lt;/code&gt; 개체가 생성 되기 전에 SQL BLOB 값의 데이터를 클라이언트로 가져 왔어 야 합니다. 는 SQL BLOB 값의 데이터 (상기 방법에 사용 된 바이트의 배열로 클라이언트에서 구체화 될 수 &lt;code&gt;Blob.getBytes&lt;/code&gt; 을 ) 또는 해석의 바이트 스트림으로 (있어서 사용 &lt;code&gt;Blob.getBinaryStream&lt;/code&gt; 을 ).</target>
        </trans-unit>
        <trans-unit id="a36b2be101ab96842813d3879e3c76a7ca051531" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialBlob&lt;/code&gt;class provides a constructor for creating an instance from a Blob object. Note that the Blob object should have brought the SQL BLOB value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt;object is constructed from it. The data of an SQL BLOB value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt;) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;SerialBlob&lt;/code&gt; 의 클래스는 Blob 객체로부터 인스턴스를 작성하기위한 생성자를 제공한다. Blob 개체는 &lt;code&gt;SerialBlob&lt;/code&gt; 개체가 생성 되기 전에 SQL BLOB 값의 데이터를 클라이언트로 가져 왔어 야 합니다. 는 SQL BLOB 값의 데이터 (상기 방법에 사용 된 바이트의 배열로 클라이언트에서 구체화 될 수 &lt;code&gt;Blob.getBytes&lt;/code&gt; 을 ) 또는 해석의 바이트 스트림으로 (있어서 사용 &lt;code&gt;Blob.getBinaryStream&lt;/code&gt; 을 ).</target>
        </trans-unit>
        <trans-unit id="0878b5252f99568199e6ce8e7039ce8b4b616d65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialClob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Clob&lt;/code&gt; object. Note that the &lt;code&gt;Clob&lt;/code&gt; object should have brought the SQL &lt;code&gt;CLOB&lt;/code&gt; value's data over to the client before a &lt;code&gt;SerialClob&lt;/code&gt; object is constructed from it. The data of an SQL &lt;code&gt;CLOB&lt;/code&gt; value can be materialized on the client as a stream of Unicode characters.</source>
          <target state="translated">&lt;code&gt;SerialClob&lt;/code&gt; 의 클래스는로부터 인스턴스를 작성하기위한 생성자 제공 &lt;code&gt;Clob&lt;/code&gt; 객체. 주의 &lt;code&gt;Clob&lt;/code&gt; 객체는 SQL에 건네 줄 필요 &lt;code&gt;CLOB&lt;/code&gt; 의 사전이 클라이언트에 걸쳐 값의 데이터를 &lt;code&gt;SerialClob&lt;/code&gt; 의 객체는로 구성된다. SQL &lt;code&gt;CLOB&lt;/code&gt; 값 의 데이터는 유니 코드 문자 스트림으로 클라이언트에서 구체화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7407cdc2547618da6d7ac9d8e6b269f7ffc8487e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialClob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Clob&lt;/code&gt; object. Note that the &lt;code&gt;Clob&lt;/code&gt; object should have brought the SQL CLOB value's data over to the client before a &lt;code&gt;SerialClob&lt;/code&gt; object is constructed from it. The data of an SQL CLOB value can be materialized on the client as a stream of Unicode characters.</source>
          <target state="translated">&lt;code&gt;SerialClob&lt;/code&gt; 의 클래스는로부터 인스턴스를 작성하기위한 생성자 제공 &lt;code&gt;Clob&lt;/code&gt; 객체. 주의 &lt;code&gt;Clob&lt;/code&gt; 객체가되기 전에 클라이언트에 SQL CLOB 값의 데이터를 건네 줄 필요 &lt;code&gt;SerialClob&lt;/code&gt; 의 객체는로 구성된다. SQL CLOB 값의 데이터는 유니 코드 문자 스트림으로 클라이언트에서 구체화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="531569263cbf3f2d83fdebfe2dd7a42eb6537822" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialRef&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialRef&lt;/code&gt; instance from a &lt;code&gt;Ref&lt;/code&gt; object and provides methods for getting and setting the &lt;code&gt;Ref&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;SerialRef&lt;/code&gt; 의 클래스는 생성하는 생성자를 제공 &lt;code&gt;SerialRef&lt;/code&gt; 의 A로부터 인스턴스를 &lt;code&gt;Ref&lt;/code&gt; 객체와 가져오고 설정하는 방법을 제공합니다 &lt;code&gt;Ref&lt;/code&gt; 객체를.</target>
        </trans-unit>
        <trans-unit id="8a6014458943ef8b69cde5c3b67bcb9d35b9d8a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialRef&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialRef&lt;/code&gt; instance from a &lt;code&gt;Ref&lt;/code&gt; type and provides methods for getting and setting the &lt;code&gt;Ref&lt;/code&gt; object type.</source>
          <target state="translated">&lt;code&gt;SerialRef&lt;/code&gt; 의 클래스는 생성하는 생성자를 제공 &lt;code&gt;SerialRef&lt;/code&gt; 의 A로부터 인스턴스를 &lt;code&gt;Ref&lt;/code&gt; 유형과 가져오고 설정하는 방법을 제공합니다 &lt;code&gt;Ref&lt;/code&gt; 객체 유형을.</target>
        </trans-unit>
        <trans-unit id="331ac575055962225f9ade9cd92c609c9e5e6ec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialStruct&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Struct&lt;/code&gt; object, a method for retrieving the SQL type name of the SQL structured type in the database, and methods for retrieving its attribute values.</source>
          <target state="translated">&lt;code&gt;SerialStruct&lt;/code&gt; 에의 클래스 A로부터 인스턴스를 생성하는 생성자 제공 &lt;code&gt;Struct&lt;/code&gt; 의 특성 값을 검색하는 개체 데이터베이스에 SQL 구조형의 SQL 타입 명을 검색하기위한 방법, 및 방법.</target>
        </trans-unit>
        <trans-unit id="e442aff7da1c49f449251d581aa63dde83a5af38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerSocket&lt;/code&gt; class defines convenience methods to set and get several socket options. This class also defines the &lt;a href=&quot;#setOption(java.net.SocketOption,T)&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getOption(java.net.SocketOption)&quot;&gt;&lt;code&gt;getOption&lt;/code&gt;&lt;/a&gt; methods to set and query socket options. A &lt;code&gt;ServerSocket&lt;/code&gt; supports the following options:</source>
          <target state="translated">&lt;code&gt;ServerSocket&lt;/code&gt; 의의 클래스는 설정에 편리한 메소드를 정의하고 여러 소켓 옵션을 얻을. 이 클래스는 소켓 옵션을 설정하고 쿼리 하는 &lt;a href=&quot;#setOption(java.net.SocketOption,T)&quot;&gt; &lt;code&gt;setOption&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#getOption(java.net.SocketOption)&quot;&gt; &lt;code&gt;getOption&lt;/code&gt; &lt;/a&gt; 메서드 도 정의합니다 . &lt;code&gt;ServerSocket&lt;/code&gt; 로는 다음과 같은 옵션을 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="2d6a25bea447e545dee0ec116fce9cf07f17df31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; interface places additional stipulations, beyond those inherited from the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of all constructors and on the contracts of the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience. (The specifications accompanying these declarations have been tailored to the &lt;code&gt;Set&lt;/code&gt; interface, but they do not contain any additional stipulations.)</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 인터페이스로부터 상속 능가하는 추가 규정을 배치 &lt;code&gt;Collection&lt;/code&gt; 모든 생성자의 계약에와의 계약에 인터페이스 &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;equals&lt;/code&gt; 및 &lt;code&gt;hashCode&lt;/code&gt; 방법. 편의상 다른 상속 된 메소드에 대한 선언도 여기에 포함됩니다. (이 선언과 함께 제공되는 사양은 &lt;code&gt;Set&lt;/code&gt; 인터페이스 에 맞게 조정 되었지만 추가 규정은 포함되어 있지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="ca2825253af57c9c2e6a3d7675526c2242a40a0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; of Principals associated with this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 이 관련 지을 수 있었던 Principal의 &lt;code&gt;Subject&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="875fbbb93524788cbec9d10a7f9b1d4a78fcb3af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SetOfIntegerSyntax&lt;/code&gt; object's value is actually stored in &quot;</source>
          <target state="translated">&lt;code&gt;SetOfIntegerSyntax&lt;/code&gt; 객체의 값은 실제로 &quot;에 저장됩니다</target>
        </trans-unit>
        <trans-unit id="9603523cfc3ca1974d98e9c77fcd84e7643b7407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape.contains()&lt;/code&gt; method allows a &lt;code&gt;Shape&lt;/code&gt; implementation to conservatively return &lt;code&gt;false&lt;/code&gt; when:</source>
          <target state="translated">&lt;code&gt;Shape.contains()&lt;/code&gt; 방법은 허용 &lt;code&gt;Shape&lt;/code&gt; 보수적 반환에 구현 &lt;code&gt;false&lt;/code&gt; 때를 :</target>
        </trans-unit>
        <trans-unit id="a8defc0421e314237795f3e16a9ee691e29653b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape.intersects()&lt;/code&gt; method allows a &lt;code&gt;Shape&lt;/code&gt; implementation to conservatively return &lt;code&gt;true&lt;/code&gt; when:</source>
          <target state="translated">&lt;code&gt;Shape.intersects()&lt;/code&gt; 메서드를 사용하면 &lt;code&gt;Shape&lt;/code&gt; 구현 이 다음과 같은 경우 에 보수적으로 &lt;code&gt;true&lt;/code&gt; 를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3459b813a9488c53040b4772588afcffbba02ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape&lt;/code&gt; interface provides definitions for objects that represent some form of geometric shape.</source>
          <target state="translated">&lt;code&gt;Shape&lt;/code&gt; 인터페이스는 하등의 기하학적 인 형태를 나타내는 객체의 정의를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5a0a83f1111db09d21b3f0665dcf9e3f26c253a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape&lt;/code&gt; interface provides definitions for objects that represent some form of geometric shape. The &lt;code&gt;Shape&lt;/code&gt; is described by a &lt;a href=&quot;geom/pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object, which can express the outline of the &lt;code&gt;Shape&lt;/code&gt; as well as a rule for determining how the outline divides the 2D plane into interior and exterior points. Each &lt;code&gt;Shape&lt;/code&gt; object provides callbacks to get the bounding box of the geometry, determine whether points or rectangles lie partly or entirely within the interior of the &lt;code&gt;Shape&lt;/code&gt;, and retrieve a &lt;code&gt;PathIterator&lt;/code&gt; object that describes the trajectory path of the &lt;code&gt;Shape&lt;/code&gt; outline.</source>
          <target state="translated">&lt;code&gt;Shape&lt;/code&gt; 인터페이스는 하등의 기하학적 인 형태를 나타내는 객체의 정의를 제공합니다. &lt;code&gt;Shape&lt;/code&gt; a로 설명 &lt;a href=&quot;geom/pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt; 의 윤곽을 표현할 수있는 객체 &lt;code&gt;Shape&lt;/code&gt; 결정뿐만 아니라, 어떻게 규칙을 내부 및 외부 지점에 윤곽 나누는 차원 평면. 각 &lt;code&gt;Shape&lt;/code&gt; 객체는 지오메트리의 경계 상자를 가져오고, 점 또는 사각형이 &lt;code&gt;Shape&lt;/code&gt; 내부에 부분적으로 또는 전체적으로 있는지 여부를 결정 하고 , &lt;code&gt;Shape&lt;/code&gt; 외곽선 의 궤적 경로를 설명 하는 &lt;code&gt;PathIterator&lt;/code&gt; 객체를 검색하는 콜백을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="91cb94f76bb487d7d5e8cf2114b6bb48e6030390" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape&lt;/code&gt; is transformed from user space to device space using the current &lt;code&gt;Transform&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;Shape&lt;/code&gt; 전류를 이용하여 사용자 공간으로부터 디바이스 공간 변환 &lt;code&gt;Transform&lt;/code&gt; 에서 &lt;code&gt;Graphics2D&lt;/code&gt; 컨텍스트.</target>
        </trans-unit>
        <trans-unit id="d9ff50c0bd145a3782f8a408ac09f816b6f9f1af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; class is an implementation of &lt;a href=&quot;graphicattribute&quot;&gt;&lt;code&gt;GraphicAttribute&lt;/code&gt;&lt;/a&gt; that draws shapes in a &lt;a href=&quot;textlayout&quot;&gt;&lt;code&gt;TextLayout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; 에의 클래스의 구현입니다 &lt;a href=&quot;graphicattribute&quot;&gt; &lt;code&gt;GraphicAttribute&lt;/code&gt; 에&lt;/a&gt; A의 모양을 그립니다 &lt;a href=&quot;textlayout&quot;&gt; &lt;code&gt;TextLayout&lt;/code&gt; 의&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="373802f5789bc9daaea49a79a19d0057b2e71fa7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SheetCollate&lt;/code&gt; attribute interacts with the &lt;a href=&quot;multipledocumenthandling&quot;&gt;&lt;code&gt;MultipleDocumentHandling&lt;/code&gt;&lt;/a&gt; attribute. The &lt;a href=&quot;multipledocumenthandling&quot;&gt;&lt;code&gt;MultipleDocumentHandling&lt;/code&gt;&lt;/a&gt; attribute describes the collation of entire documents, and the &lt;code&gt;SheetCollate&lt;/code&gt; attribute describes the semantics of collating individual pages within a document.</source>
          <target state="translated">&lt;code&gt;SheetCollate&lt;/code&gt; 의 와 속성 상호 작용 &lt;a href=&quot;multipledocumenthandling&quot;&gt; &lt;code&gt;MultipleDocumentHandling&lt;/code&gt; &lt;/a&gt; 속성. &lt;a href=&quot;multipledocumenthandling&quot;&gt; &lt;code&gt;MultipleDocumentHandling&lt;/code&gt; &lt;/a&gt; 속성은 전체 문서의 정렬을 설명하고 &lt;code&gt;SheetCollate&lt;/code&gt; 의 속성은 문서 내에서 개별 페이지를 대조의 의미를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="82b5163b0072dd0db2fd3d68224c70635d6db4aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;
 short&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt; short&lt;/code&gt; 객체에 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d62b26c182893a6a548e476a18690b63d473252" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;
 short&lt;/code&gt; in an object. An object of type &lt;code&gt;Short&lt;/code&gt; contains a single field whose type is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt; short&lt;/code&gt; 객체에 있습니다. &lt;code&gt;Short&lt;/code&gt; 유형의 객체 에는 유형이 &lt;code&gt;short&lt;/code&gt; 인 단일 필드가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="61061520eba3a069412253fc6b718281a7764587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;short&lt;/code&gt; 객체에 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bd6d5314769fa94b169cf6fd6d3a5c0f5803d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object. An object of type &lt;code&gt;Short&lt;/code&gt; contains a single field whose type is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; 클래스는, 원시 형의 값 랩 &lt;code&gt;short&lt;/code&gt; 객체에 있습니다. 유형의 객체 &lt;code&gt;Short&lt;/code&gt; 그의 형의 단일 필드가 포함되어 &lt;code&gt;short&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e78848e4ddc01a11ae115fca5cd98b1816f40ede" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets, such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the long edge.</source>
          <target state="translated">&lt;code&gt;SidesType&lt;/code&gt; 의 그 연속 작업 페이지를 지정하기 위해서 사용하는 경우는 연속하는 용지의 앞면과 뒷면,에 인쇄되어야하는 매체의 페이지의 각각의 쌍의 방향은 독자 올바른 것 같은 길이가 긴 변에 바인딩 것처럼 .</target>
        </trans-unit>
        <trans-unit id="55cb688b8746b92ba5f7fe95abd002ba3e7f27dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets, such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the short edge.</source>
          <target state="translated">&lt;code&gt;SidesType&lt;/code&gt; 의 그 연속 작업 페이지를 지정하기 위해서 사용하는 경우는 연속하는 용지의 앞면과 뒷면,에 인쇄되어야하는 매체의 페이지의 각각의 쌍의 방향은 독자 올바른 것 같은 단변 바인딩 것처럼 .</target>
        </trans-unit>
        <trans-unit id="6c8b634d32bf6d2741e1de3fa5ce509b4fe3413b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon the same side of consecutive media sheets.</source>
          <target state="translated">&lt;code&gt;SidesType&lt;/code&gt; 의 인스턴스는 연속 작업 페이지를 연속 용지의 같은면에 인쇄 지정하기 위해서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="cf5e4c26203f886b6a7a4f1b81f96c02a0a29697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SignedResultsControl&lt;/code&gt; class might be defined as follows:</source>
          <target state="translated">&lt;code&gt;SignedResultsControl&lt;/code&gt; 에 다음과 같이 클래스를 정의 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="3a917286530fabb04fa41fccacd2711f46f2bddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleScriptContext&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SimpleScriptContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca03fd6be029ed8ca889a60a8a508d0a4a1babe2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; 클래스 인</target>
        </trans-unit>
        <trans-unit id="f454eae06e8c8450f0d9941d0498c44514cf1e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Boolean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Boolean&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="639c3ab3a04fd48b0812edf7c08168f9b2abfe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Byte&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="6779cad3872976416b8715cdc2cae03f34516e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Character&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Character&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="ccc12a9229fa28b212383ee48e5d6d48b5829469" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Double&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="3b4dbe56be7eeb7407783a82c785c69757959537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Float&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="950ad58636d59dcea09852f3de50a8b54e4ec126" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Integer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Integer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38105e6f78986a670b722ab3d041a7ff3901722e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Long&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="a28cf8d0823e5eefc4a4e7fc0bee61dc5592a17e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Short&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="820c357e21a5bd82921b5bccd1f7a3db183c43be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.String&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="36b771fc8f2baca3d65ff467300137e5fa46b87f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.lang.Void&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6dbd2a7b98eeeeb0df1e9367af1772ffa7a82ff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigDecimal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.math.BigDecimal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98c8cbacf6c530dcd5198d36051672cced797c4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigInteger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.math.BigInteger&lt;/code&gt; 에 .</target>
        </trans-unit>
        <trans-unit id="53ea91ec792b961906f05193441b86fc1c764ce1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.util.Date&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;java.util.Date&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9f782c191b744e88038240ceea9bf9b47ef00d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;javax.management.ObjectName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Java 클래스 이름 값을 설명하는 예이다 &lt;code&gt;javax.management.ObjectName&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5089a0cfc6b78ca8c8064c53b5b247055a7d6437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Skeleton&lt;/code&gt; interface is used solely by the RMI implementation.</source>
          <target state="translated">&lt;code&gt;Skeleton&lt;/code&gt; 인터페이스는 RMI 구현에 의해서만 사용된다.</target>
        </trans-unit>
        <trans-unit id="28d1ffacaa18f666268b6e526fc948c33dc19f19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Socket&lt;/code&gt; class defines convenience methods to set and get several socket options. This class also defines the &lt;a href=&quot;#setOption(java.net.SocketOption,T)&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getOption(java.net.SocketOption)&quot;&gt;&lt;code&gt;getOption&lt;/code&gt;&lt;/a&gt; methods to set and query socket options. A &lt;code&gt;Socket&lt;/code&gt; support the following options:</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; 클래스는 설정에 편리한 메소드를 정의하고 여러 소켓 옵션을 얻을. 이 클래스는 소켓 옵션을 설정하고 쿼리 하는 &lt;a href=&quot;#setOption(java.net.SocketOption,T)&quot;&gt; &lt;code&gt;setOption&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#getOption(java.net.SocketOption)&quot;&gt; &lt;code&gt;getOption&lt;/code&gt; &lt;/a&gt; 메서드 도 정의합니다 . &lt;code&gt;Socket&lt;/code&gt; 다음과 같은 옵션을 지원합니다</target>
        </trans-unit>
        <trans-unit id="2f21653116680d7405660374ff050723b7344530" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SocketAddress&lt;/code&gt; that the socket is bound to, or the &lt;code&gt;SocketAddress&lt;/code&gt; representing the loopback address if denied by the security manager, or &lt;code&gt;null&lt;/code&gt; if the channel's socket is not bound</source>
          <target state="translated">&lt;code&gt;SocketAddress&lt;/code&gt; 소켓이 바인딩되는, 또는 &lt;code&gt;SocketAddress&lt;/code&gt; 를 보안 관리자 또는 거부하는 경우 루프백 주소를 나타내는 &lt;code&gt;null&lt;/code&gt; 이 채널의 소켓의 바인드되어 있지 않은 경우</target>
        </trans-unit>
        <trans-unit id="ffa196c777d84951c5a2d919e8b5f1e36bdc950e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceDataLine&lt;/code&gt; interface provides a method for writing audio data to the data line's buffer. Applications that play or mix audio should write data to the source data line quickly enough to keep the buffer from underflowing (emptying), which could cause discontinuities in the audio that are perceived as clicks. Applications can use the &lt;a href=&quot;dataline#available()&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. The amount of data which can be written to the buffer without blocking is the difference between the buffer size and the amount of queued data. If the delivery of audio output stops due to underflow, a &lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt; event is generated. A &lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt; event is generated when the audio output resumes.</source>
          <target state="translated">&lt;code&gt;SourceDataLine&lt;/code&gt; 인터페이스는 상기 데이터 라인의 버퍼에 오디오 데이터를 기록하기위한 방법을 제공한다. 오디오를 재생하거나 믹싱하는 애플리케이션은 버퍼가 언더 플로 (비우기)되지 않도록 충분히 빠르게 소스 데이터 라인에 데이터를 써야하므로 클릭으로 인식되는 오디오의 불연속성이 발생할 수 있습니다. 애플리케이션은 &lt;code&gt;DataLine&lt;/code&gt; 인터페이스에 정의 된 사용 &lt;a href=&quot;dataline#available()&quot;&gt; &lt;code&gt;available&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 현재 데이터 라인의 버퍼에 대기중인 데이터의 양을 확인할 수 있습니다. 차단하지 않고 버퍼에 쓸 수있는 데이터의 양은 버퍼 크기와 대기중인 데이터의 양의 차이입니다. 언더 플로로 인해 오디오 출력 전달이 중지되면 &lt;a href=&quot;lineevent.type#STOP&quot;&gt; &lt;code&gt;STOP&lt;/code&gt; &lt;/a&gt; 이벤트가 생성됩니다. &lt;a href=&quot;lineevent.type#START&quot;&gt; &lt;code&gt;START&lt;/code&gt; &lt;/a&gt; 오디오 출력이 다시 시작되면 이벤트가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="18e018252e244e834ac16d7592161dec68491d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceDataLine&lt;/code&gt; interface provides a method for writing audio data to the data line's buffer. Applications that play or mix audio should write data to the source data line quickly enough to keep the buffer from underflowing (emptying), which could cause discontinuities in the audio that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. The amount of data which can be written to the buffer without blocking is the difference between the buffer size and the amount of queued data. If the delivery of audio output stops due to underflow, a &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated. A &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated when the audio output resumes.</source>
          <target state="translated">&lt;code&gt;SourceDataLine&lt;/code&gt; 인터페이스는 상기 데이터 라인의 버퍼에 오디오 데이터를 기록하기위한 방법을 제공한다. 오디오를 재생하거나 믹싱하는 응용 프로그램은 버퍼의 언더 플로 (빈)를 방지 할 수있을 정도로 빠르게 소스 데이터 라인에 데이터를 기록해야하므로 클릭으로 인식되는 오디오의 불연속성이 발생할 수 있습니다. 애플리케이션은 &lt;code&gt;DataLine&lt;/code&gt; 인터페이스에 정의 된 사용 &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 메소드를 사용하여 현재 데이터 라인의 버퍼에 대기중인 데이터의 양을 판별 할 수 있습니다. 차단하지 않고 버퍼에 쓸 수있는 데이터 양은 버퍼 크기와 대기중인 데이터 양의 차이입니다. 언더 플로로 인해 오디오 출력 전달이 중지되면 &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 이벤트가 생성됩니다. &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 오디오 출력이 다시 시작되면 이벤트가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="bf9d261cb6bf1230f6b0ef1139ddd997740f585e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SplashScreen&lt;/code&gt; class provides the API for controlling the splash screen. This class may be used to close the splash screen, change the splash screen image, get the splash screen native window position/size, and paint in the splash screen. It cannot be used to create the splash screen. You should use the options provided by the Java implementation for that.</source>
          <target state="translated">&lt;code&gt;SplashScreen&lt;/code&gt; 클래스는, 스플래쉬 화면을 제어하는 API를 제공합니다. 이 클래스는 시작 화면을 닫고, 시작 화면 이미지를 변경하고, 시작 화면 기본 창 위치 / 크기를 가져오고, 시작 화면에서 페인트하는 데 사용할 수 있습니다. 시작 화면을 만드는 데 사용할 수 없습니다. 이를 위해 Java 구현에서 제공하는 옵션을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="7d6c5c0e9a62febf84bbb9141ee81024ed231a73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 추가로보고 &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a5cd94ecb80a03490b99bcd80e701c14fac87925" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt; and implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism..</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 추가로보고 &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; 및 구현이 &lt;code&gt;trySplit&lt;/code&gt; 제한된 병렬 처리를 허용하는 ..</target>
        </trans-unit>
        <trans-unit id="af784776c0cdc3b45691af7e034f88ace154b36b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 의 구현은 &lt;code&gt;trySplit&lt;/code&gt; 제한된 병렬 처리를 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc4bc484d5f7374b739600d18f54719d380be19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, with an encounter order that is ascending order. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 를&lt;/a&gt; 오름차순으로하는 만남의 주문. 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="f2950b171471656d176973c0cdbe156c00f2950c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f29dd54a6792c7ed4529600d96348a75bdd9555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 Spliterator.DISTINCT를 보고 &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="d956efee01ea55ce995f06c420101ace333173f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e199c4eef228c77de88efe1878bd4a7a2d489af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cbd59fa14ea73f85c3995572f64444c99c11f1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c1e52439eecc198c689029f966c5a01b29d70971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="a468b87aa57a000d104e16ad1ebfc71127bed7dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 Spliterator.DISTINCT를 보고 &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="6ebf9e7f0b30959249ec16fdfe821371d93a4d56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="5eb4148ceff758d730c061aadb07b3dfc29badab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="6117d3f9be68af61e863fb3ac62f3f48f2b55bd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="365bad875f0605d7a3f88de21373c4b2c02e8b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="c76f2bcfdf2668373b751457d6ab6afa52733599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;ORDERED&lt;/code&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고서 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;ORDERED&lt;/code&gt; . 구현시 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="56ca63602e1e9a18ab8f45fd2c61e5f3e26c4da5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="b7a7b7355ffd0c2f2072bfc12a5dfa9d5724f300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="69d1d467a5fec847db2c8830bffb8575def22c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; 는 보고 &lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; 을&lt;/a&gt; . 재정의 구현은 추가 특성 값의보고를 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="6b2d2eb7eec8f743e4849d1097ca59c6f055d626" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spring&lt;/code&gt; object representing each constraint has a minimum, preferred, maximum, and current value. The current value of the spring is somewhere between the minimum and maximum values, according to the formula given in the &lt;a href=&quot;spring#sum(javax.swing.Spring,javax.swing.Spring)&quot;&gt;&lt;code&gt;Spring.sum(javax.swing.Spring, javax.swing.Spring)&lt;/code&gt;&lt;/a&gt; method description. When the minimum, preferred, and maximum values are the same, the current value is always equal to them; this inflexible spring is called a &lt;em&gt;strut&lt;/em&gt;. You can create struts using the factory method &lt;a href=&quot;spring#constant(int)&quot;&gt;&lt;code&gt;Spring.constant(int)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Spring&lt;/code&gt; class also provides factory methods for creating other kinds of springs, including springs that depend on other springs.</source>
          <target state="translated">&lt;code&gt;Spring&lt;/code&gt; 각 제약 조건을 나타내는 목적은 최소 바람직, 최대 전류 값을 갖는다. Spring의 현재 값은 &lt;a href=&quot;spring#sum(javax.swing.Spring,javax.swing.Spring)&quot;&gt; &lt;code&gt;Spring.sum(javax.swing.Spring, javax.swing.Spring)&lt;/code&gt; &lt;/a&gt; 메소드 설명에 제공된 공식에 따라 최소값과 최대 값 사이에 있습니다. 최소값, 기본 값 및 최대 값이 동일하면 현재 값은 항상 동일합니다. 이 유연하지 않은 스프링을 &lt;em&gt;스트럿&lt;/em&gt; 이라고합니다 . 팩토리 메서드 &lt;a href=&quot;spring#constant(int)&quot;&gt; &lt;code&gt;Spring.constant(int)&lt;/code&gt; &lt;/a&gt; 사용하여 스트럿을 만들 수 있습니다 . &lt;code&gt;Spring&lt;/code&gt; 클래스는 다른 스프링에 의존하는 스프링을 포함하여 스프링의 다른 종류를 만들기위한 팩토리 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a22bed6089a698314bd570d8dfea84ff3886d8de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; 클래스는 객체의 후입 선출 (LIFO) 스택을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="725a4ea6b7a05d02133053cfe135e8b021c0e333" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects. It extends class &lt;code&gt;Vector&lt;/code&gt; with five operations that allow a vector to be treated as a stack. The usual &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; operations are provided, as well as a method to &lt;code&gt;peek&lt;/code&gt; at the top item on the stack, a method to test for whether the stack is &lt;code&gt;empty&lt;/code&gt;, and a method to &lt;code&gt;search&lt;/code&gt; the stack for an item and discover how far it is from the top.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; 클래스는 객체의 후입 선출 (LIFO) 스택을 나타냅니다. 벡터를 스택으로 취급 할 수 있도록 5 가지 연산으로 &lt;code&gt;Vector&lt;/code&gt; 클래스를 확장 합니다. 일반적인 &lt;code&gt;push&lt;/code&gt; 와 &lt;code&gt;pop&lt;/code&gt; 작업은 물론하는 방법으로 &lt;code&gt;peek&lt;/code&gt; 스택의 맨 위 항목, 스택인지 여부를 테스트하는 방법에 &lt;code&gt;empty&lt;/code&gt; 및 방법은하기 &lt;code&gt;search&lt;/code&gt; 항목에 대한 스택을 어떻게 지금까지 발견이 맨 위에서입니다.</target>
        </trans-unit>
        <trans-unit id="fb03e73b86b7150e44b2730be4c2f42a308c7705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StackFrame&lt;/code&gt; stream will be closed when this method returns. When a closed &lt;code&gt;Stream&amp;lt;StackFrame&amp;gt;&lt;/code&gt; object is reused, &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;StackFrame&lt;/code&gt; 을의 스트림 때이 방법을 반환 종료됩니다. 닫힌 &lt;code&gt;Stream&amp;lt;StackFrame&amp;gt;&lt;/code&gt; 객체를 재사용하면 &lt;code&gt;IllegalStateException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="69d125feb060298f65a1bd48fbc45ef5e7d91c39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Statement.setQueryTimeout()&lt;/code&gt; timeout value is independent of the timeout value specified in &lt;code&gt;setNetworkTimeout&lt;/code&gt;. If the query timeout expires before the network timeout then the statement execution will be canceled. If the network is still active the result will be that both the statement and connection are still usable. However if the network timeout expires before the query timeout or if the statement timeout fails due to network problems, the connection will be marked as closed, any resources held by the connection will be released and both the connection and statement will be unusable.</source>
          <target state="translated">&lt;code&gt;Statement.setQueryTimeout()&lt;/code&gt; 타임 아웃 값에 지정된 타임 아웃 값과 무관 &lt;code&gt;setNetworkTimeout&lt;/code&gt; . 네트워크 시간 초과 전에 쿼리 시간 초과가 만료되면 명령문 실행이 취소됩니다. 네트워크가 여전히 활성 상태이면 명령문과 연결을 모두 사용할 수 있습니다. 그러나 쿼리 시간 초과 이전에 네트워크 시간 초과가 만료되거나 네트워크 문제로 인해 명령문 시간 초과가 실패하면 연결이 닫힌 것으로 표시되고 연결이 보유한 모든 리소스가 해제되며 연결과 명령문을 모두 사용할 수 없게됩니다.</target>
        </trans-unit>
        <trans-unit id="f90f5bcdca074f31338e37b40ab96797b81c1b8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Status&lt;/code&gt; changes as the state changes. For example, creation of another snippet with &lt;a href=&quot;jshell#eval(java.lang.String)&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; may resolve dependencies of this Snippet (or invalidate those dependencies), or &lt;a href=&quot;#OVERWRITTEN&quot;&gt;overwrite&lt;/a&gt; this Snippet changing its &lt;code&gt;Status&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Status&lt;/code&gt; 상태 변화에 따라 변경됩니다. 예를 들어 &lt;a href=&quot;jshell#eval(java.lang.String)&quot;&gt; &lt;code&gt;eval&lt;/code&gt; 을 사용&lt;/a&gt; 하여 다른 스 니펫을 생성하면이 스 니펫의 종속성을 해결하거나 해당 종속성을 무효화하거나이 스 니펫을 &lt;a href=&quot;#OVERWRITTEN&quot;&gt;덮어 쓰고 &lt;/a&gt; &lt;code&gt;Status&lt;/code&gt; 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1390697c89353b590988a85571b01944397a5934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stream&lt;/code&gt; describing the content of the directory</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; 디렉토리의 내용을 설명</target>
        </trans-unit>
        <trans-unit id="c78c42072e63ca70c7ecefe4c83c75776bdbcfbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamHandler&lt;/code&gt; first checks if there is an &lt;code&gt;OutputStream&lt;/code&gt; and if the given &lt;code&gt;LogRecord&lt;/code&gt; has at least the required log level. If not it silently returns. If so, it calls any associated &lt;code&gt;Filter&lt;/code&gt; to check if the record should be published. If so, it calls its &lt;code&gt;Formatter&lt;/code&gt; to format the record and then writes the result to the current output stream.</source>
          <target state="translated">&lt;code&gt;StreamHandler&lt;/code&gt; 먼저 확인 거기 경우 &lt;code&gt;OutputStream&lt;/code&gt; 에 주어진 경우 &lt;code&gt;LogRecord&lt;/code&gt; 적어도 필요한 로그 레벨을 갖는다. 그렇지 않으면 자동으로 리턴됩니다. 그렇다면 레코드를 게시해야하는지 확인하기 위해 연결된 &lt;code&gt;Filter&lt;/code&gt; 를 호출합니다 . 그렇다면 레코드를 포맷하기 위해 &lt;code&gt;Formatter&lt;/code&gt; 를 호출 한 다음 결과를 현재 출력 스트림에 씁니다.</target>
        </trans-unit>
        <trans-unit id="e6a8fe0d59891f6c0cc5fc356448e863867d876b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; 의 클래스 토큰이 한번에 판독 할 수있게 해주는 한, &quot;토큰&quot;으로 입력 스트림 파싱 걸립니다.</target>
        </trans-unit>
        <trans-unit id="90790abff6838151ec89277ddea3efa96bd3fd1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; 의 클래스 토큰이 한번에 판독 할 수있게 해주는 한, &quot;토큰&quot;으로 입력 스트림 파싱 걸립니다. 파싱 ​​프로세스는 다양한 상태로 설정할 수있는 테이블과 여러 플래그에 의해 제어됩니다. 스트림 토크 나이 저는 식별자, 숫자, 따옴표 붙은 문자열 및 다양한 주석 스타일을 인식 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cace10574531d43fd7350c7bbe816d7c0693ff93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., &lt;code&gt;char&lt;/code&gt; values).</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 클래스는 유니 코드 단위 (즉, 다루는 그뿐만 아니라, 유니 코드 코드 포인트 (즉, 문자)를 처리하는 방법을 제공합니다 &lt;code&gt;char&lt;/code&gt; 값을).</target>
        </trans-unit>
        <trans-unit id="0d78a761f2944c5a20f9f6d6f41f724d053b8054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 클래스는 캐릭터 라인을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cfaf0978cdd4182db5fdb416c1be5b9a10ec7e9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Java programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 클래스는 캐릭터 라인을 나타냅니다. &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 와 같은 Java 프로그램의 모든 문자열 리터럴 은이 클래스의 인스턴스로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="bf9e88bafccff9dfb01a4ed99ca09de99632708e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; constructor, on the other hand, is perfectly predictable: writing &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; creates a &lt;code&gt;BigDecimal&lt;/code&gt; which is</source>
          <target state="translated">반면에 &lt;code&gt;String&lt;/code&gt; 생성자는 완벽하게 예측할 수 있습니다. &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; 을 작성하면 다음과 같은 &lt;code&gt;BigDecimal&lt;/code&gt; 이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="eba1c9ced718a6fccfc3b47f5eccf166337b2690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; constructor, on the other hand, is perfectly predictable: writing &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; creates a &lt;code&gt;BigDecimal&lt;/code&gt; which is &lt;em&gt;exactly&lt;/em&gt; equal to 0.1, as one would expect. Therefore, it is generally recommended that the &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;String constructor&lt;/a&gt; be used in preference to this one.</source>
          <target state="translated">반면에 &lt;code&gt;String&lt;/code&gt; 생성자는 완벽하게 예측할 수 있습니다. &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; 을 작성하면 예상 &lt;em&gt;대로 정확히&lt;/em&gt; 0.1 인 &lt;code&gt;BigDecimal&lt;/code&gt; 이 생성 됩니다. 따라서 일반적 으로이 &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;생성자&lt;/a&gt; 보다 우선적으로 String 생성자 를 사용 하는 것이 좋습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e9a1f48716d930234c4028b885dfc7d2e82b1bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; must specify a single paragraph of text, because an entire paragraph is required for the bidirectional algorithm.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 쌍방향 알고리즘에서는, 단락 전체가 필요하기 때문에, 1 단락의 텍스트를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="c55bf2e26b50af06c11b42ae679e92277246f4b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; return type is a convenience for retrieving the character data from a text node, attribute node, comment node, or processing-instruction node. When used on an element node, the value of the child text nodes is returned.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 반환 형식은 텍스트 노드, 속성 노드, 코멘트 노드, 또는 처리의 지시 노드로부터 문자 데이터를 검색하기위한 편리합니다. 요소 노드에서 사용하면 자식 텍스트 노드의 값이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="956bd9122850fa6f6d4d702653c39ab65927afc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; that is the result of evaluating the expression and converting the result to a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 표현식을 평가하고 그 결과를 변환 한 결과 인 &lt;code&gt;String&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="823b29249d90cf89580a63e8a119c51fe8f500bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stroke&lt;/code&gt; interface allows a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; object to obtain a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; that is the decorated outline, or stylistic representation of the outline, of the specified &lt;code&gt;Shape&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Stroke&lt;/code&gt; 인터페이스는 허용 &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt; 수득 오브젝트 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 지정된 장식의 윤곽 또는 윤곽의 문체 표현 인 &lt;code&gt;Shape&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="83bcf3d2b0817137e4811b4de84a7b0136064065" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stroke&lt;/code&gt; interface allows a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; object to obtain a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; that is the decorated outline, or stylistic representation of the outline, of the specified &lt;code&gt;Shape&lt;/code&gt;. Stroking a &lt;code&gt;Shape&lt;/code&gt; is like tracing its outline with a marking pen of the appropriate size and shape. The area where the pen would place ink is the area enclosed by the outline &lt;code&gt;Shape&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Stroke&lt;/code&gt; 인터페이스는 허용 &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt; 수득 오브젝트 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 지정된 장식의 윤곽 또는 윤곽의 문체 표현 인 &lt;code&gt;Shape&lt;/code&gt; . &lt;code&gt;Shape&lt;/code&gt; 쓰다듬는 것은 적절한 크기와 모양의 마킹 펜으로 윤곽선을 추적하는 것과 같습니다. 펜이 잉크를 배치하는 영역은 윤곽선 &lt;code&gt;Shape&lt;/code&gt; 둘러싸인 영역 입니다.</target>
        </trans-unit>
        <trans-unit id="b4cc02f2e0965ef6213178d0907daba1e038b4ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StyleSheet&lt;/code&gt; interface is the abstract base interface for any type of style sheet.</source>
          <target state="translated">&lt;code&gt;StyleSheet&lt;/code&gt; 인터페이스는 스타일 시트의 모든 종류의 추상 기본 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="0c250e7a17904fac5445cb3af01717a1efd8fe52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StyleSheet&lt;/code&gt; interface is the abstract base interface for any type of style sheet. It represents a single style sheet associated with a structured document. In HTML, the StyleSheet interface represents either an external style sheet, included via the HTML LINK element, or an inline STYLE element. In XML, this interface represents an external style sheet, included via a style sheet processing instruction.</source>
          <target state="translated">&lt;code&gt;StyleSheet&lt;/code&gt; 인터페이스는 스타일 시트의 모든 종류의 추상 기본 인터페이스입니다. 구조화 된 문서와 연관된 단일 스타일 시트를 나타냅니다. HTML에서 StyleSheet 인터페이스는 HTML LINK 요소를 통해 포함 된 외부 스타일 시트 또는 인라인 STYLE 요소를 나타냅니다. XML에서이 인터페이스는 스타일 시트 처리 명령을 통해 포함 된 외부 스타일 시트를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b77d4eca45f653c379f408edadc1d1786bb45214" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StyleSheetList&lt;/code&gt; interface provides the abstraction of an ordered collection of style sheets.</source>
          <target state="translated">&lt;code&gt;StyleSheetList&lt;/code&gt; 의 인터페이스는 스타일 시트의 정렬 된 컬렉션의 추상을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3321e8f0312f5858bda4ed64210f57798ee8885f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; checks this file and registers the &lt;code&gt;SyncProvider&lt;/code&gt; implementations that it contains. A developer or vendor can add other implementations to this file. For example, here is a possible addition:</source>
          <target state="translated">&lt;code&gt;SyncFactory&lt;/code&gt; 확인이 파일을 등록한다 &lt;code&gt;SyncProvider&lt;/code&gt; 가 포함되어 구현. 개발자 또는 공급 업체는이 파일에 다른 구현을 추가 할 수 있습니다. 예를 들어 가능한 추가는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1945e6ff1ad237ada972e0b52b7f53a60d373ca4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; class provides accessor methods to assist applications in determining which synchronization providers are currently registered with the &lt;code&gt;SyncFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SyncFactory&lt;/code&gt; 이 클래스는 동기 프로 바이더가 현재 등록되어있는 결정하는 응용 프로그램을 지원하는 방법 접근 제공 &lt;code&gt;SyncFactory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51bf79b59a85a53ec81dac29f70bcc5fab44290e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; class provides an internal registry of available synchronization provider implementations (&lt;code&gt;SyncProvider&lt;/code&gt; objects). This registry may be queried to determine which synchronization providers are available. The following line of code gets an enumeration of the providers currently registered.</source>
          <target state="translated">&lt;code&gt;SyncFactory&lt;/code&gt; 클래스는, 사용 가능한 동기 프로 바이더 구현 (의 내부 레지스트리 제공 &lt;code&gt;SyncProvider&lt;/code&gt; 객체). 이 레지스트리를 쿼리하여 사용할 수있는 동기화 공급자를 확인할 수 있습니다. 다음 코드 줄은 현재 등록 된 공급자의 열거 형을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="cf8f6210713c173acff250f3a77234c48dec109c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; generates a requested &lt;code&gt;SyncProvider&lt;/code&gt; object if the provider has been correctly registered. The following policies are adhered to when either a disconnected &lt;code&gt;RowSet&lt;/code&gt; object is instantiated with a specified &lt;code&gt;SyncProvider&lt;/code&gt; implementation or is reconfigured at runtime with an alternative &lt;code&gt;SyncProvider&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;SyncFactory&lt;/code&gt; 요청 생성 &lt;code&gt;SyncProvider&lt;/code&gt; 바이더가 정상적으로 등록되어 있으면, 오브젝트. 연결이 끊어진 &lt;code&gt;RowSet&lt;/code&gt; 개체가 지정된 &lt;code&gt;SyncProvider&lt;/code&gt; 구현으로 인스턴스화 되거나 런타임시 대체 &lt;code&gt;SyncProvider&lt;/code&gt; 개체로 재구성 될 때 다음 정책이 준수됩니다 .</target>
        </trans-unit>
        <trans-unit id="219eedc9af737d15c74f22846580254e66b4f7f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncProvider&lt;/code&gt; class provides three sets of constants that are used as return values or parameters for &lt;code&gt;SyncProvider&lt;/code&gt; methods. &lt;code&gt;SyncProvider&lt;/code&gt; objects may be implemented to perform synchronization between a &lt;code&gt;RowSet&lt;/code&gt; object and its underlying data source with varying degrees of care. The first group of constants indicate how synchronization is handled. For example, &lt;code&gt;GRADE_NONE&lt;/code&gt; indicates that a &lt;code&gt;SyncProvider&lt;/code&gt; object will not take any care to see what data is valid and will simply write the &lt;code&gt;RowSet&lt;/code&gt; data to the data source. &lt;code&gt;GRADE_MODIFIED_AT_COMMIT&lt;/code&gt; indicates that the provider will check only modified data for validity. Other grades check all data for validity or set locks when data is modified or loaded.</source>
          <target state="translated">&lt;code&gt;SyncProvider&lt;/code&gt; 클래스에 대한 리턴 값 또는 파라미터로서 사용되는 3 개의 정수 제공 &lt;code&gt;SyncProvider&lt;/code&gt; 방법. &lt;code&gt;SyncProvider&lt;/code&gt; 개체를 구현하여 다양한 정도의주의를 기울여 &lt;code&gt;RowSet&lt;/code&gt; 개체와 기본 데이터 소스 간의 동기화를 수행 할 수 있습니다 . 첫 번째 상수 그룹은 동기화가 처리되는 방식을 나타냅니다. 예를 들어, &lt;code&gt;GRADE_NONE&lt;/code&gt; 은 &lt;code&gt;SyncProvider&lt;/code&gt; 개체가 유효한 데이터를 확인하지 않고 단순히 &lt;code&gt;RowSet&lt;/code&gt; 데이터를 데이터 소스에 기록함을 나타냅니다 . &lt;code&gt;GRADE_MODIFIED_AT_COMMIT&lt;/code&gt; 공급자가 유효성을 위해 수정 된 데이터 만 확인 함을 나타냅니다. 다른 등급은 모든 데이터의 유효성을 확인하거나 데이터가 수정되거나로드 될 때 잠금을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c5a4913f6da797e9bb309247a92d563053d59bb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncProvider&lt;/code&gt; interface defines four constants describing states that may occur. Three constants describe the type of operation (update, delete, or insert) that a &lt;code&gt;RowSet&lt;/code&gt; object was attempting to perform when a conflict was discovered, and the fourth indicates that there is no conflict. These constants are the possible return values when a &lt;code&gt;SyncResolver&lt;/code&gt; object calls the method &lt;code&gt;getStatus&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SyncProvider&lt;/code&gt; 인터페이스 발생 상태를 나타내는 네 개의 상수를 정의한다. 세 개의 상수 는 충돌이 발견되었을 때 &lt;code&gt;RowSet&lt;/code&gt; 객체가 수행하려고 시도한 작업 유형 (업데이트, 삭제 또는 삽입)을 설명하고 네 번째 상수 는 충돌이 없음을 나타냅니다. 이러한 상수는 &lt;code&gt;SyncResolver&lt;/code&gt; 객체가 &lt;code&gt;getStatus&lt;/code&gt; 메서드를 호출 할 때 가능한 반환 값 입니다.</target>
        </trans-unit>
        <trans-unit id="eda1e4a93fcf2aa13352f9f34dfd369c2d588252" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncResolver&lt;/code&gt; interface also provides methods for doing the following:</source>
          <target state="translated">&lt;code&gt;SyncResolver&lt;/code&gt; 인터페이스는 다음을 수행하는 방법을 제공한다 :</target>
        </trans-unit>
        <trans-unit id="b7a04ac54f8fd8b47f995cd926d12c087226c4ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncResolver&lt;/code&gt; object may be used to examine and resolve each conflict in a row and then go to the next row with a conflict to repeat the procedure.</source>
          <target state="translated">&lt;code&gt;SyncResolver&lt;/code&gt; 객체가 검토하고 행에 각 충돌을 해결하고 절차를 반복 충돌에 다음 행으로 이동하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce0b1740d93a2f7b9c8861c54d628a73ff28cb12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and unloading instruments from soundbanks. An instrument is a specification for synthesizing a certain type of sound, whether that sound emulates a traditional instrument or is some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized by bank and program number (via the instrument's &lt;code&gt;Patch&lt;/code&gt; object). Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis techniques, meaning that some instruments and not others might be compatible with a given synthesizer. Also, synthesizers may have a limited amount of memory for instruments, meaning that not every soundbank and instrument can be used by every synthesizer, even if the synthesis technique is compatible. To see whether the instruments from a certain soundbank can be played by a given synthesizer, invoke the &lt;a href=&quot;#isSoundbankSupported(javax.sound.midi.Soundbank)&quot;&gt;&lt;code&gt;isSoundbankSupported&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Synthesizer&lt;/code&gt; 인터페이스 사운드 뱅크에서 하역 장비에 대한 방법을 포함한다. 악기는 특정 유형의 사운드를 합성하기위한 사양입니다. 사운드가 전통적인 악기를 에뮬레이트하든, 일종의 음향 효과 또는 기타 가상의 음향이든 상관 없습니다. 사운드 뱅크는 (악기의 &lt;code&gt;Patch&lt;/code&gt; 객체 를 통해) 뱅크와 프로그램 번호로 구성된 악기 모음입니다 . 다른 &lt;code&gt;Synthesizer&lt;/code&gt; 클래스는 다른 사운드 합성 기술을 구현할 수 있습니다. 즉, 일부 악기는 특정 신디사이저와 호환되지 않을 수 있습니다. 또한 신디사이저는 악기에 대해 제한된 양의 메모리를 가질 수 있습니다. 즉, 합성 기술이 호환 되더라도 모든 신디사이저에서 모든 사운드 뱅크와 악기를 사용할 수있는 것은 아닙니다. 특정 사운드 뱅크의 악기를 특정 신디사이저에서 재생할 수 있는지 확인하려면 &lt;code&gt;Synthesizer&lt;/code&gt; 의 &lt;a href=&quot;#isSoundbankSupported(javax.sound.midi.Soundbank)&quot;&gt; &lt;code&gt;isSoundbankSupported&lt;/code&gt; &lt;/a&gt; 메서드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="79d62a9c1d3d1d0435af40a0f1b27c3991ef6251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and unloading instruments from soundbanks. An instrument is a specification for synthesizing a certain type of sound, whether that sound emulates a traditional instrument or is some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized by bank and program number (via the instrument's &lt;code&gt;Patch&lt;/code&gt; object). Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis techniques, meaning that some instruments and not others might be compatible with a given synthesizer. Also, synthesizers may have a limited amount of memory for instruments, meaning that not every soundbank and instrument can be used by every synthesizer, even if the synthesis technique is compatible. To see whether the instruments from a certain soundbank can be played by a given synthesizer, invoke the &lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt;&lt;code&gt;isSoundbankSupported&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Synthesizer&lt;/code&gt; 인터페이스 사운드 뱅크에서 하역 장비에 대한 방법을 포함한다. 악기는 사운드가 전통적인 악기를 에뮬레이트하는지 또는 어떤 종류의 사운드 효과 또는 기타 가상 사운드인지에 관계없이 특정 유형의 사운드를 합성하기위한 사양입니다. 사운드 뱅크는 뱅크 및 프로그램 번호 (악기의 &lt;code&gt;Patch&lt;/code&gt; 객체 를 통해)로 구성된 악기 모음입니다 . 다른 &lt;code&gt;Synthesizer&lt;/code&gt; 클래스는 다른 사운드 합성 기술을 구현할 수 있습니다. 즉, 일부 악기는 특정 신시사이저와 호환되지 않을 수 있습니다. 또한 신디사이저에는 악기에 대한 메모리 양이 제한되어있을 수 있습니다. 즉, 합성 기술이 호환 되더라도 모든 사운드 뱅크와 악기를 모든 신디사이저에서 사용할 수있는 것은 아닙니다. 특정 신시사이저가 특정 사운드 뱅크의 악기를 연주 할 수 있는지 확인하려면 &lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt; &lt;code&gt;isSoundbankSupported&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Synthesizer&lt;/code&gt; 메소드를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="cfaf0a0f81bd0eca9825b951309b3216299181ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; 클래스에는 유용한 클래스 필드 및 메서드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e929acaa33491c9123dc823b9825fd21aa7ba63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods. It cannot be instantiated.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; 클래스에는 유용한 클래스 필드 및 메서드가 포함되어 있습니다. 인스턴스화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d62073397ee12d67177fbddcc6b841987af0c0f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the &lt;code&gt;System&lt;/code&gt; class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; 클래스에는 유용한 클래스 필드 및 메서드가 포함되어 있습니다. 인스턴스화 할 수 없습니다. &lt;code&gt;System&lt;/code&gt; 클래스에서 제공하는 기능 중에는 표준 입력, 표준 출력 및 오류 출력 스트림이 있습니다. 외부에서 정의 된 속성 및 환경 변수에 대한 액세스 파일 및 라이브러리를로드하는 수단; 및 어레이의 일부를 빠르게 복사하기위한 유틸리티 방법.</target>
        </trans-unit>
        <trans-unit id="71d124decf97343aaf190d7edff308e7f38aff09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt; class represents the system tray for a desktop.</source>
          <target state="translated">&lt;code&gt;SystemTray&lt;/code&gt; 클래스는, 데스크탑의 시스템 트레이를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="86e2face305fc605953bea15297d20a4c46b82a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt; class represents the system tray for a desktop. On Microsoft Windows it is referred to as the &quot;Taskbar Status Area&quot;, on Gnome it is referred to as the &quot;Notification Area&quot;, on KDE it is referred to as the &quot;System Tray&quot;. The system tray is shared by all applications running on the desktop.</source>
          <target state="translated">&lt;code&gt;SystemTray&lt;/code&gt; 클래스는, 데스크탑의 시스템 트레이를 나타냅니다. Microsoft Windows에서는 &quot;작업 표시 줄 상태 영역&quot;, Gnome에서는 &quot;알림 영역&quot;, KDE에서는 &quot;시스템 트레이&quot;라고합니다. 시스템 트레이는 데스크탑에서 실행되는 모든 응용 프로그램에서 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="29f19d736a226155ec6c7bf812e7c0d11e8db7d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt; may contain one or more &lt;a href=&quot;trayicon&quot;&gt;&lt;code&gt;TrayIcons&lt;/code&gt;&lt;/a&gt;, which are added to the tray using the &lt;a href=&quot;#add(java.awt.TrayIcon)&quot;&gt;&lt;code&gt;add(java.awt.TrayIcon)&lt;/code&gt;&lt;/a&gt; method, and removed when no longer needed, using the &lt;a href=&quot;#remove(java.awt.TrayIcon)&quot;&gt;&lt;code&gt;remove(java.awt.TrayIcon)&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;TrayIcon&lt;/code&gt; consists of an image, a popup menu and a set of associated listeners. Please see the &lt;a href=&quot;trayicon&quot;&gt;&lt;code&gt;TrayIcon&lt;/code&gt;&lt;/a&gt; class for details.</source>
          <target state="translated">&lt;code&gt;SystemTray&lt;/code&gt; 하나 이상 포함될 수 &lt;a href=&quot;trayicon&quot;&gt; &lt;code&gt;TrayIcons&lt;/code&gt; &lt;/a&gt; 은 USING 트레이에 추가되지 않으며, &lt;a href=&quot;#add(java.awt.TrayIcon)&quot;&gt; &lt;code&gt;add(java.awt.TrayIcon)&lt;/code&gt; &lt;/a&gt; 은 USING, 더 이상 필요하지 않을 때, 방법 및 제거를 &lt;a href=&quot;#remove(java.awt.TrayIcon)&quot;&gt; &lt;code&gt;remove(java.awt.TrayIcon)&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;TrayIcon&lt;/code&gt; 은 이미지, 팝업 메뉴 및 관련 리스너 세트로 구성됩니다. 자세한 내용은 &lt;a href=&quot;trayicon&quot;&gt; &lt;code&gt;TrayIcon&lt;/code&gt; &lt;/a&gt; 클래스를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c47132f451284747470a059592392ae52dd9e141" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt;'s array of &lt;code&gt;TrayIcon&lt;/code&gt; objects. The array is accessed via the &lt;a href=&quot;#getTrayIcons()&quot;&gt;&lt;code&gt;getTrayIcons()&lt;/code&gt;&lt;/a&gt; method. This property is changed when a tray icon is added to (or removed from) the system tray. For example, this property is changed when the system tray becomes unavailable on the desktop and the tray icons are automatically removed.</source>
          <target state="translated">&lt;code&gt;SystemTray&lt;/code&gt; 중의 배열 &lt;code&gt;TrayIcon&lt;/code&gt; 에의 개체. 배열은 &lt;a href=&quot;#getTrayIcons()&quot;&gt; &lt;code&gt;getTrayIcons()&lt;/code&gt; &lt;/a&gt; 메소드 를 통해 액세스됩니다 . 이 속성은 트레이 아이콘이 시스템 트레이에 추가 (또는 제거) 될 때 변경됩니다. 예를 들어,이 속성은 바탕 화면에서 시스템 트레이를 사용할 수 없게되고 트레이 아이콘이 자동으로 제거되면 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="041eb452e80c2e1697db1fd8e4bf9a31fea37efe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;THEAD&lt;/code&gt; , &lt;code&gt;TFOOT&lt;/code&gt; , and &lt;code&gt;TBODY&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;THEAD&lt;/code&gt; , &lt;code&gt;TFOOT&lt;/code&gt; 및 &lt;code&gt;TBODY&lt;/code&gt; 의 요소.</target>
        </trans-unit>
        <trans-unit id="a06dce3576df2efc44a53e99f5b0156477fc0f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TIFFTagSet&lt;/code&gt;s associated with this &lt;code&gt;TIFFDirectory&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;TIFFTagSet&lt;/code&gt; 관련된 &lt;code&gt;TIFFDirectory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90342a4ec5ebd367ca721e299022f4ba7c4abcba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TYPE_USE&lt;/code&gt; constant includes type declarations and type parameter declarations as a convenience for designers of type checkers which give semantics to annotation types. For example, if the annotation type &lt;code&gt;NonNull&lt;/code&gt; is meta-annotated with &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt;, then &lt;code&gt;@NonNull&lt;/code&gt;&lt;code&gt;class C {...}&lt;/code&gt; could be treated by a type checker as indicating that all variables of class &lt;code&gt;C&lt;/code&gt; are non-null, while still allowing variables of other classes to be non-null or not non-null based on whether &lt;code&gt;@NonNull&lt;/code&gt; appears at the variable's declaration.</source>
          <target state="translated">&lt;code&gt;TYPE_USE&lt;/code&gt; 의 상수는 주석 유형에 의미를 부여 형 체커 디자이너의 편의 타입 선언과 형식 매개 변수 선언이 포함되어 있습니다. 예를 들어, 주석 유형 &lt;code&gt;NonNull&lt;/code&gt; 이 &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt; 로 메타 주석 처리 된 경우 &lt;code&gt;@NonNull&lt;/code&gt; &lt;code&gt;class C {...}&lt;/code&gt; 는 클래스 &lt;code&gt;C&lt;/code&gt; 의 모든 변수가 널이 아님을 나타내는 것으로 유형 검사기에서 처리 될 수 있습니다. &lt;code&gt;@NonNull&lt;/code&gt; 이 변수 선언에 나타나는지 여부에 따라 다른 클래스의 변수가 null이 아닌지 여부를 계속 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="a36f21255ac35c88f64ea122f094b24db294584b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabbedPane&lt;/code&gt; uses a &lt;code&gt;SingleSelectionModel&lt;/code&gt; to represent the set of tab indices and the currently selected index. If the tab count is greater than 0, then there will always be a selected index, which by default will be initialized to the first tab. If the tab count is 0, then the selected index will be -1.</source>
          <target state="translated">&lt;code&gt;TabbedPane&lt;/code&gt; 사용 &lt;code&gt;SingleSelectionModel&lt;/code&gt; 과를 탭 인덱스 세트와 현재 선택된 인덱스를 표현. 탭 수가 0보다 크면 항상 선택된 인덱스가 있으며 기본적으로 첫 번째 탭으로 초기화됩니다. 탭 수가 0이면 선택한 인덱스는 -1이됩니다.</target>
        </trans-unit>
        <trans-unit id="aae188cb6fcd8f04afd29ffc5f91ebb63a2bec4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableCellRenderer&lt;/code&gt; is also responsible for rendering the the cell representing the table's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location:</source>
          <target state="translated">&lt;code&gt;TableCellRenderer&lt;/code&gt; 또한 하나가있는 경우 테이블의 현재 드래그 &amp;amp; 드롭 위치를 나타내는 셀을 렌더링 할 책임이있다. 이 렌더러가 DnD 드롭 위치를 렌더링하는 데 관심이 있다면 테이블을 직접 쿼리하여 주어진 행과 열이 드롭 위치를 나타내는 지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="62730552d1826f5457ce3b3a464a101205ca119b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableColumn&lt;/code&gt; stores the link between the columns in the &lt;code&gt;JTable&lt;/code&gt; and the columns in the &lt;code&gt;TableModel&lt;/code&gt;. The &lt;code&gt;modelIndex&lt;/code&gt; is the column in the &lt;code&gt;TableModel&lt;/code&gt;, which will be queried for the data values for the cells in this column. As the column moves around in the view this &lt;code&gt;modelIndex&lt;/code&gt; does not change.</source>
          <target state="translated">&lt;code&gt;TableColumn&lt;/code&gt; 의의 저장의 열 사이의 링크 &lt;code&gt;JTable&lt;/code&gt; 및 컬럼 &lt;code&gt;TableModel&lt;/code&gt; . &lt;code&gt;modelIndex&lt;/code&gt; 는 의 열이다 &lt;code&gt;TableModel&lt;/code&gt; 이 열의 셀의 데이터 값에 대해 질의 할 것이다. 열이 뷰에서 이동할 때이 &lt;code&gt;modelIndex&lt;/code&gt; 는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="513725efac09f3d3ebe41cdd1442b2526eb72e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table header.</source>
          <target state="translated">테이블 헤더 의 &lt;code&gt;TableColumnModel&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="46b630f6f4ada6636db255ceeb6cbab86ddcc1d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table.</source>
          <target state="translated">테이블 의 &lt;code&gt;TableColumnModel&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="40e8319f916c9c16cc953beb17d6b51b25096178" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableHeader&lt;/code&gt; working with the table.</source>
          <target state="translated">테이블에서 작업 하는 &lt;code&gt;TableHeader&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1e1e1d2b9291e006ed2866178f2d5c50aeb49de2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableModel&lt;/code&gt; interface specifies the methods the &lt;code&gt;JTable&lt;/code&gt; will use to interrogate a tabular data model.</source>
          <target state="translated">&lt;code&gt;TableModel&lt;/code&gt; 인터페이스 방법 지정 &lt;code&gt;JTable&lt;/code&gt; 테이블 데이터 모델을 조사하기 위해서 사용하는 것이다.</target>
        </trans-unit>
        <trans-unit id="9b297dff16c915aa557f64cbedacf58ef1c27aa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableModel&lt;/code&gt; of the table.</source>
          <target state="translated">테이블 의 &lt;code&gt;TableModel&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3ef83572b32113beb492c13117cd5dc2ac290774" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularData&lt;/code&gt; interface specifies the behavior of a specific type of complex</source>
          <target state="translated">&lt;code&gt;TabularData&lt;/code&gt; 의 인터페이스는 복잡한 특정 유형의 동작을 지정합니다</target>
        </trans-unit>
        <trans-unit id="7724aaad4c815a2f3d25835048c64655b5a959e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularDataSupport&lt;/code&gt; class is the</source>
          <target state="translated">그만큼 &lt;code&gt;TabularDataSupport&lt;/code&gt; 클래스 인</target>
        </trans-unit>
        <trans-unit id="d1a581b7f12d575f8065049692b39a4f8b425736" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;TabularType&lt;/code&gt; 클래스입니다</target>
        </trans-unit>
        <trans-unit id="085fc399b3650257a22561fd8dbc65d069110b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TargetDataLine&lt;/code&gt; interface provides a method for reading the captured data from the target data line's buffer. Applications that record audio should read data from the target data line quickly enough to keep the buffer from overflowing, which could cause discontinuities in the captured data that are perceived as clicks. Applications can use the &lt;a href=&quot;dataline#available()&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. If the buffer does overflow, the oldest queued data is discarded and replaced by new data.</source>
          <target state="translated">&lt;code&gt;TargetDataLine&lt;/code&gt; 인터페이스는 타겟 데이터 라인의 버퍼로부터 수집 된 데이터를 판독하기위한 방법을 제공한다. 오디오를 녹음하는 애플리케이션은 버퍼가 넘치지 않도록 충분히 빠르게 대상 데이터 라인에서 데이터를 읽어야합니다. 이로 인해 클릭으로 인식되는 캡처 된 데이터의 불연속성이 발생할 수 있습니다. 애플리케이션은 &lt;code&gt;DataLine&lt;/code&gt; 인터페이스에 정의 된 사용 &lt;a href=&quot;dataline#available()&quot;&gt; &lt;code&gt;available&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 현재 데이터 라인의 버퍼에 대기중인 데이터의 양을 확인할 수 있습니다. 버퍼가 오버플로되면 대기열에있는 가장 오래된 데이터가 삭제되고 새 데이터로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="2b88d977d84dfecfb709ca75951d725a6ab95a15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TargetDataLine&lt;/code&gt; interface provides a method for reading the captured data from the target data line's buffer.Applications that record audio should read data from the target data line quickly enough to keep the buffer from overflowing, which could cause discontinuities in the captured data that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. If the buffer does overflow, the oldest queued data is discarded and replaced by new data.</source>
          <target state="translated">&lt;code&gt;TargetDataLine&lt;/code&gt; 인터페이스는 오디오 녹음이 인식되고 캡처 된 데이터의 불연속을 야기 할 수있는 오버 플로우 버퍼를 유지하기 위해 신속하게 타겟 데이터 라인에서 데이터를 읽어야하는 타겟 데이터 라인의 buffer.Applications에서 캡처 된 데이터를 판독하는 방법을 제공한다 클릭으로. 응용 프로그램은 &lt;code&gt;DataLine&lt;/code&gt; 인터페이스에 정의 된 사용 &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 방법을 사용하여 현재 데이터 라인의 버퍼에 대기중인 데이터의 양을 결정할 수 있습니다. 버퍼가 오버 플로우되면 가장 오래된 큐에있는 데이터는 버리고 새 데이터로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="cd75a99a64bbe9c6e132833f8fb00cfec0994bdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Taskbar&lt;/code&gt; class allows a Java application to interact with the system task area (taskbar, Dock, etc.).</source>
          <target state="translated">&lt;code&gt;Taskbar&lt;/code&gt; 클래스는 자바 응용 프로그램이 시스템 작업 영역 (작업 표시 줄, 독, 등)와 상호 작용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="019ba7c0388427e562540509ea17c83832b3dcd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetDateTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time.</source>
          <target state="translated">이 메서드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 은 &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;OffsetDateTime&lt;/code&gt; 으로 변환됩니다 . 오프셋이 두 날짜-시간간에 다른 경우 지정된 종료 날짜-시간이이 날짜-시간과 동일한 오프셋을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="3e0b1acfd21178efdd1911606a8891da6c388408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetDateTime&lt;/code&gt; using &lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time.</source>
          <target state="translated">이 메소드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 는 다음을 사용하여 &lt;code&gt;OffsetDateTime&lt;/code&gt; 으로 변환됩니다.&lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;. 두 날짜-시간간에 오프셋이 다른 경우 지정된 종료 날짜-시간은이 날짜-시간과 동일한 오프셋을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="d95776a3e565ebe5ce70d5bf195dcf050020297d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time.</source>
          <target state="translated">이 메서드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 은 &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;OffsetTime&lt;/code&gt; 으로 변환됩니다 . 오프셋이 두 시간 사이에 다른 경우 지정된 종료 시간이이 시간과 동일한 오프셋을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="3e06b07abdd9c26452543a4ee27b98a4f883116f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetTime&lt;/code&gt; using &lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time.</source>
          <target state="translated">이 메소드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 는 &lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;OffsetTime&lt;/code&gt; 시간으로 변환됩니다. . 오프셋이 두 번 서로 다른 경우 지정된 종료 시간이이 시간과 동일한 오프셋을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="16922692473cfbe52ef7b4a7d7019abc044672f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;ZonedDateTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time.</source>
          <target state="translated">이 메서드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 은 &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;ZonedDateTime&lt;/code&gt; 으로 변환됩니다 . 시간대가 두 개의 존 날짜-시간간에 다른 경우 지정된 종료 날짜-시간이이 날짜-시간과 동일한 존을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="137e87a41dd6513a254139c8feaaab1e66487d95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;ZonedDateTime&lt;/code&gt; using &lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time.</source>
          <target state="translated">이 메소드에 전달 된 &lt;code&gt;Temporal&lt;/code&gt; 는 &lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;ZonedDateTime&lt;/code&gt; 으로 변환됩니다. . 시간대가 두 개의 존 날짜-시간 사이에 다른 경우, 지정된 종료 날짜-시간은이 날짜-시간과 동일한 존을 갖도록 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="e5e2abe85585b946fe3143ade66a1eb51b565159" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TemporalAdjuster&lt;/code&gt; is based on the low level &lt;code&gt;Temporal&lt;/code&gt; interface. This method allows an adjustment from &lt;code&gt;LocalDate&lt;/code&gt; to &lt;code&gt;LocalDate&lt;/code&gt; to be wrapped to match the temporal-based interface. This is provided for convenience to make user-written adjusters simpler.</source>
          <target state="translated">&lt;code&gt;TemporalAdjuster&lt;/code&gt; 은 낮은 수준을 기반으로 &lt;code&gt;Temporal&lt;/code&gt; 인터페이스를 제공합니다. 이 방법에서 조정 허용 &lt;code&gt;LocalDate&lt;/code&gt; 에 &lt;code&gt;LocalDate&lt;/code&gt; 하면 시간 기반 인터페이스와 일치 랩핑 할 수 있습니다. 이는 사용자 작성 조정자를보다 간단하게하기 위해 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="3abce6220a2a3d5ab9fef6cd6b43c0fc41bc4b97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TerminalFactory&lt;/code&gt; is initialized with the specified parameters Object. The type of parameters needed may vary between different types of &lt;code&gt;TerminalFactory&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;TerminalFactory&lt;/code&gt; 는 지정된 매개 변수 개체 초기화됩니다. 필요한 매개 변수의 유형은 &lt;code&gt;TerminalFactory&lt;/code&gt; 의 다른 유형에 따라 다를 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19c02d28928b0971c51632836506fdb261eb44fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 인터페이스에서 상속 &lt;code&gt;CharacterData&lt;/code&gt; 를 하고 (이라고 텍스트 형식의 콘텐츠 나타내는 &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;문자 데이터&lt;/a&gt; 의 XML에서) &lt;code&gt;Element&lt;/code&gt; 또는 &lt;code&gt;Attr&lt;/code&gt; 의를 .</target>
        </trans-unit>
        <trans-unit id="703823749842fef8a2c75cc8cb3164c39a004c62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;. If there is no markup inside an element's content, the text is contained in a single object implementing the &lt;code&gt;Text&lt;/code&gt; interface that is the only child of the element. If there is markup, it is parsed into the information items (elements, comments, etc.) and &lt;code&gt;Text&lt;/code&gt; nodes that form the list of children of the element.</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 인터페이스에서 상속 &lt;code&gt;CharacterData&lt;/code&gt; 를 하고 (이라고 텍스트 형식의 콘텐츠 나타내는 &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;문자 데이터&lt;/a&gt; 의 XML에서) &lt;code&gt;Element&lt;/code&gt; 또는 &lt;code&gt;Attr&lt;/code&gt; 의를 . 요소의 콘텐츠 내에 마크 업이없는 경우 텍스트는 요소의 유일한 자식 인 &lt;code&gt;Text&lt;/code&gt; 인터페이스를 구현하는 단일 개체에 포함됩니다 . 마크 업이 있으면 요소 의 하위 목록을 구성하는 정보 항목 (요소, 주석 등) 및 &lt;code&gt;Text&lt;/code&gt; 노드 로 구문 분석됩니다 .</target>
        </trans-unit>
        <trans-unit id="df9b2d38101dfed625badfabcb4a7f7bc503120d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 인터페이스에서 상속 &lt;code&gt;CharacterData&lt;/code&gt; 를 하고 (이라고 텍스트 형식의 콘텐츠 나타내는 &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;문자 데이터&lt;/a&gt; 의 XML에서) &lt;code&gt;Element&lt;/code&gt; 또는 &lt;code&gt;Attr&lt;/code&gt; 의를 .</target>
        </trans-unit>
        <trans-unit id="5d0ca963e2fbcac0f1a779baefce79707291a6fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;. If there is no markup inside an element's content, the text is contained in a single object implementing the &lt;code&gt;Text&lt;/code&gt; interface that is the only child of the element. If there is markup, it is parsed into the information items (elements, comments, etc.) and &lt;code&gt;Text&lt;/code&gt; nodes that form the list of children of the element.</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 인터페이스에서 상속 &lt;code&gt;CharacterData&lt;/code&gt; 를 하고 (이라고 텍스트 형식의 콘텐츠 나타내는 &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;문자 데이터&lt;/a&gt; 의 XML에서) &lt;code&gt;Element&lt;/code&gt; 또는 &lt;code&gt;Attr&lt;/code&gt; 의를 . 요소의 콘텐츠 내에 마크 업이없는 경우 텍스트는 요소의 유일한 자식 인 &lt;code&gt;Text&lt;/code&gt; 인터페이스를 구현하는 단일 개체에 포함됩니다 . 마크 업이있는 경우 요소 의 하위 목록을 구성하는 정보 항목 (요소, 주석 등) 및 &lt;code&gt;Text&lt;/code&gt; 노드 로 구문 분석됩니다 .</target>
        </trans-unit>
        <trans-unit id="0b427ffefca649d6c2fde1f2d87275cd3cac181c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; node created with the specified content.</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 지정된 내용으로 생성 된 노드.</target>
        </trans-unit>
        <trans-unit id="cca479076c75edc689dd6ce78a057c1b17b31465" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextArea&lt;/code&gt; class defines four integer constants that are used to specify which scroll bars are available. &lt;code&gt;TextArea&lt;/code&gt; has one constructor that gives the application discretion over scroll bars.</source>
          <target state="translated">&lt;code&gt;TextArea&lt;/code&gt; 클래스는, 어느 스크롤 바가 이용 가능한가를 지정하기 위해서 사용되는 4 개 개의 정수 상수를 정의합니다. &lt;code&gt;TextArea&lt;/code&gt; 에는 스크롤 막대에 대한 애플리케이션 재량권을 제공하는 하나의 생성자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d48388689d22e97176bfbb9fb1fc79899bb9234" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextArea&lt;/code&gt; class defines several constants that can be supplied as values for the &lt;code&gt;scrollbars&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;TextArea&lt;/code&gt; 클래스는 값으로 제공 할 수있는 몇 가지 상수를 정의 &lt;code&gt;scrollbars&lt;/code&gt; 인수를 :</target>
        </trans-unit>
        <trans-unit id="5336257f4025d0fea63716accbddc0218345d2f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextAttribute&lt;/code&gt; class defines attribute keys and attribute values used for text rendering.</source>
          <target state="translated">&lt;code&gt;TextAttribute&lt;/code&gt; 클래스를 정의 텍스트 렌더링에 사용되는 키와 속성 값을 속성.</target>
        </trans-unit>
        <trans-unit id="642b3c193ea2d3a105f24ceebe0c67d4450a709c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextComponent&lt;/code&gt; class is the superclass of any component that allows the editing of some text.</source>
          <target state="translated">&lt;code&gt;TextComponent&lt;/code&gt; 에의 클래스는, 텍스트의 편집을 가능하게하는 모든 컴퍼넌트의 슈퍼 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6e295e7fa9a8c0af844a002343da2aa129dfba05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextField&lt;/code&gt; class's &lt;code&gt;processEvent&lt;/code&gt; method examines the action event and passes it along to &lt;code&gt;processActionEvent&lt;/code&gt;. The latter method redirects the event to any &lt;code&gt;ActionListener&lt;/code&gt; objects that have registered to receive action events generated by this text field.</source>
          <target state="translated">&lt;code&gt;TextField&lt;/code&gt; 클래스의 &lt;code&gt;processEvent&lt;/code&gt; 를의 방법은 액션 이벤트를 검사하고에 따라 그 전달 &lt;code&gt;processActionEvent&lt;/code&gt; . 후자의 메서드 는이 텍스트 필드에서 생성 된 작업 이벤트를 수신하도록 등록 된 모든 &lt;code&gt;ActionListener&lt;/code&gt; 개체로 이벤트를 리디렉션합니다 .</target>
        </trans-unit>
        <trans-unit id="22b360ff64d31b8f19b1d96768ca46578b5f564f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextHitInfo&lt;/code&gt; class represents a character position in a text model, and a &lt;b&gt;bias&lt;/b&gt;, or &quot;side,&quot; of the character.</source>
          <target state="translated">&lt;code&gt;TextHitInfo&lt;/code&gt; 클래스는 텍스트 모델의 캐릭터의 위치와, 대표 &lt;b&gt;바이어스&lt;/b&gt; 특성의 또는 &quot;측면&quot;.</target>
        </trans-unit>
        <trans-unit id="b2a90ad498f0fc0ba3728afdf8f9ce9b1048e36c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextHitInfo&lt;/code&gt; class represents a character position in a text model, and a &lt;b&gt;bias&lt;/b&gt;, or &quot;side,&quot; of the character. Biases are either &lt;em&gt;leading&lt;/em&gt; (the left edge, for a left-to-right character) or &lt;em&gt;trailing&lt;/em&gt; (the right edge, for a left-to-right character). Instances of &lt;code&gt;TextHitInfo&lt;/code&gt; are used to specify caret and insertion positions within text.</source>
          <target state="translated">&lt;code&gt;TextHitInfo&lt;/code&gt; 클래스는 텍스트 모델의 캐릭터의 위치와, 대표 &lt;b&gt;바이어스&lt;/b&gt; 특성의 또는 &quot;측면&quot;. 편향은 &lt;em&gt;선행&lt;/em&gt; (왼쪽에서 오른쪽 문자의 경우 왼쪽 가장자리) 또는 &lt;em&gt;후행&lt;/em&gt; ( 왼쪽에서 오른쪽 문자의 경우 오른쪽 가장자리)입니다. &lt;code&gt;TextHitInfo&lt;/code&gt; 의 인스턴스는 텍스트 내의 캐럿 및 삽입 위치를 지정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c4b39e8c9816ef7ceb28fda873be1e28ff6d68cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextLayout&lt;/code&gt; instances returned by &lt;code&gt;LineBreakMeasurer&lt;/code&gt; treat tabs like 0-width spaces. Clients who wish to obtain tab-delimited segments for positioning should use the overload of &lt;code&gt;nextLayout&lt;/code&gt; which takes a limiting offset in the text. The limiting offset should be the first character after the tab. The &lt;code&gt;TextLayout&lt;/code&gt; objects returned from this method end at the limit provided (or before, if the text between the current position and the limit won't fit entirely within the wrapping width).</source>
          <target state="translated">&lt;code&gt;TextLayout&lt;/code&gt; 인스턴스가 리턴 &lt;code&gt;LineBreakMeasurer&lt;/code&gt; 에의 폭 0 구역처럼 취급 탭. 위치 지정을 위해 탭으로 구분 된 세그먼트를 얻으려는 클라이언트 는 텍스트에서 제한 오프셋을 사용하는 &lt;code&gt;nextLayout&lt;/code&gt; 의 오버로드를 사용해야합니다 . 제한 오프셋은 탭 뒤의 첫 번째 문자 여야합니다. 이 메서드에서 반환 된 &lt;code&gt;TextLayout&lt;/code&gt; 개체는 제공된 제한에서 끝납니다 (또는 현재 위치와 제한 사이의 텍스트가 줄 바꿈 너비에 완전히 맞지 않는 경우 이전).</target>
        </trans-unit>
        <trans-unit id="e54ec1da816a0aac8f63c3f5100992dba76c1e48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextMeasurer&lt;/code&gt; class provides the primitive operations needed for line break: measuring up to a given advance, determining the advance of a range of characters, and generating a &lt;code&gt;TextLayout&lt;/code&gt; for a range of characters.</source>
          <target state="translated">&lt;code&gt;TextMeasurer&lt;/code&gt; 클래스 개행에 필요한 기본 동작을 제공하는 소정의 사전 측정 최대 문자의 범위를 미리 결정하고, 생성 &lt;code&gt;TextLayout&lt;/code&gt; 와 문자의 범위.</target>
        </trans-unit>
        <trans-unit id="688cd5ad4fe72f4fb2a262796fd8215056bc8fb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextMeasurer&lt;/code&gt; class provides the primitive operations needed for line break: measuring up to a given advance, determining the advance of a range of characters, and generating a &lt;code&gt;TextLayout&lt;/code&gt; for a range of characters. It also provides methods for incremental editing of paragraphs.</source>
          <target state="translated">&lt;code&gt;TextMeasurer&lt;/code&gt; 클래스 개행에 필요한 기본 동작을 제공하는 소정의 사전 측정 최대 문자의 범위를 미리 결정하고, 생성 &lt;code&gt;TextLayout&lt;/code&gt; 와 문자의 범위. 또한 단락의 증분 편집 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4e71e087399343a98483b9a617ee45738e959a19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TexturePaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a texture that is specified as a &lt;a href=&quot;image/bufferedimage&quot;&gt;&lt;code&gt;BufferedImage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TexturePaint&lt;/code&gt; 의의 클래스는 칠하는 수단 제공 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; A와 지정된 텍스처로 &lt;a href=&quot;image/bufferedimage&quot;&gt; &lt;code&gt;BufferedImage&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b5dac04db526a9210cdabe62413aabab1e25b23f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TexturePaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a texture that is specified as a &lt;a href=&quot;image/bufferedimage&quot;&gt;&lt;code&gt;BufferedImage&lt;/code&gt;&lt;/a&gt;. The size of the &lt;code&gt;BufferedImage&lt;/code&gt; object should be small because the &lt;code&gt;BufferedImage&lt;/code&gt; data is copied by the &lt;code&gt;TexturePaint&lt;/code&gt; object. At construction time, the texture is anchored to the upper left corner of a &lt;a href=&quot;geom/rectangle2d&quot;&gt;&lt;code&gt;Rectangle2D&lt;/code&gt;&lt;/a&gt; that is specified in user space. Texture is computed for locations in the device space by conceptually replicating the specified &lt;code&gt;Rectangle2D&lt;/code&gt; infinitely in all directions in user space and mapping the &lt;code&gt;BufferedImage&lt;/code&gt; to each replicated &lt;code&gt;Rectangle2D&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TexturePaint&lt;/code&gt; 의의 클래스는 칠하는 수단 제공 &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; A와 지정된 텍스처로 &lt;a href=&quot;image/bufferedimage&quot;&gt; &lt;code&gt;BufferedImage&lt;/code&gt; 를&lt;/a&gt; . &lt;code&gt;BufferedImage&lt;/code&gt; 데이터는 &lt;code&gt;TexturePaint&lt;/code&gt; 개체에 의해 복사 되므로 &lt;code&gt;BufferedImage&lt;/code&gt; 개체 의 크기는 작아야 합니다. 생성시 텍스처는 사용자 공간에 지정된 &lt;a href=&quot;geom/rectangle2d&quot;&gt; &lt;code&gt;Rectangle2D&lt;/code&gt; &lt;/a&gt; 의 왼쪽 상단 모서리에 고정됩니다 . 텍스처는 지정된 &lt;code&gt;Rectangle2D&lt;/code&gt; 를 사용자 공간의 모든 방향으로 개념적으로 무한대로 복제 하고 &lt;code&gt;BufferedImage&lt;/code&gt; 를 복제 된 각 &lt;code&gt;Rectangle2D&lt;/code&gt; 에 매핑하여 장치 공간의 위치에 대해 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="d01873bbcd9b0d6ed0700e4517af9e870acfb37f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ThreadMXBean&lt;/code&gt; interface provides the &lt;a href=&quot;#findMonitorDeadlockedThreads()&quot;&gt;&lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#findDeadlockedThreads()&quot;&gt;&lt;code&gt;findDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; methods to find deadlocks in the running application.</source>
          <target state="translated">&lt;code&gt;ThreadMXBean&lt;/code&gt; 의 인터페이스는 제공 &lt;a href=&quot;#findMonitorDeadlockedThreads()&quot;&gt; &lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#findDeadlockedThreads()&quot;&gt; &lt;code&gt;findDeadlockedThreads()&lt;/code&gt; &lt;/a&gt; 실행중인 응용 프로그램의 교착 상태를 찾을 방법.</target>
        </trans-unit>
        <trans-unit id="179bee4e4045d3f40705d1a933596e56a91b3268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ThreadMXBean&lt;/code&gt; interface provides the &lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt;&lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt;&lt;code&gt;findDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; methods to find deadlocks in the running application.</source>
          <target state="translated">&lt;code&gt;ThreadMXBean&lt;/code&gt; 의 인터페이스가 제공 &lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt; &lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt; &lt;code&gt;findDeadlockedThreads()&lt;/code&gt; &lt;/a&gt; 실행중인 응용 프로그램의 교착 상태를 찾을 방법.</target>
        </trans-unit>
        <trans-unit id="39917ae27e9e1229d50311719d5d54222afebd7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; 클래스는 Java 언어의 모든 에러와 예외의 슈퍼 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="9684e90dd9742fd93651a9cb50a8638d48f73ecd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only this class or one of its subclasses can be the argument type in a &lt;code&gt;catch&lt;/code&gt; clause. For the purposes of compile-time checking of exceptions, &lt;code&gt;
 Throwable&lt;/code&gt; and any subclass of &lt;code&gt;Throwable&lt;/code&gt; that is not also a subclass of either &lt;a href=&quot;runtimeexception&quot;&gt;&lt;code&gt;RuntimeException&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; are regarded as checked exceptions.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; 클래스는 Java 언어의 모든 에러와 예외의 슈퍼 클래스입니다. 이 클래스 (또는 하위 클래스 중 하나)의 인스턴스 인 객체 만 Java Virtual Machine에서 throw되거나 Java &lt;code&gt;throw&lt;/code&gt; 문 에서 throw 될 수 있습니다 . 마찬가지로이 클래스 또는 하위 클래스 중 하나만 &lt;code&gt;catch&lt;/code&gt; 절의 인수 유형이 될 수 있습니다 . 컴파일시 예외를 확인하기 위해 &lt;code&gt; Throwable&lt;/code&gt; 및 &lt;a href=&quot;runtimeexception&quot;&gt; &lt;code&gt;RuntimeException&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 의 하위 클래스가 아닌 &lt;code&gt;Throwable&lt;/code&gt; 의 모든 하위 클래스는 확인 된 예외로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="08f3668a9e709259220f6210bae5df043abe1c67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only this class or one of its subclasses can be the argument type in a &lt;code&gt;catch&lt;/code&gt; clause. For the purposes of compile-time checking of exceptions, &lt;code&gt;Throwable&lt;/code&gt; and any subclass of &lt;code&gt;Throwable&lt;/code&gt; that is not also a subclass of either &lt;a href=&quot;runtimeexception&quot;&gt;&lt;code&gt;RuntimeException&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; are regarded as checked exceptions.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; 클래스는 Java 언어의 모든 에러와 예외의 슈퍼 클래스입니다. 이 클래스의 인스턴스 (또는 그 서브 클래스 중 하나) 인 객체 만 Java Virtual Machine에 의해 발생되거나 Java &lt;code&gt;throw&lt;/code&gt; 문에 의해 발생 될 수 있습니다 . 마찬가지로이 클래스 또는 해당 서브 클래스 중 하나만 &lt;code&gt;catch&lt;/code&gt; 절 에서 인수 유형이 될 수 있습니다 . 예외의 컴파일 타임 점검을 위해, &lt;a href=&quot;runtimeexception&quot;&gt; &lt;code&gt;RuntimeException&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 의 서브 클래스가 아닌 &lt;code&gt;Throwable&lt;/code&gt; 및 &lt;code&gt;Throwable&lt;/code&gt; 의 서브 클래스는 Checked 예외로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="caaa27ee7d5ebe96563c4a7078bb2aeef3acb7d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method is overwritten by a &lt;a href=&quot;#setCalendar(java.util.Calendar)&quot;&gt;&lt;code&gt;setCalendar&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; 이 방법에 의해 설정이 덮어 쓰기된다 &lt;a href=&quot;#setCalendar(java.util.Calendar)&quot;&gt; &lt;code&gt;setCalendar&lt;/code&gt; &lt;/a&gt; 통화.</target>
        </trans-unit>
        <trans-unit id="4424bacaff9f769c17cab48ed5095a39891ea9af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method is overwritten by a &lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt;&lt;code&gt;setCalendar&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; 이 방법에 의해 설정은 덮어 쓰기이다 &lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt; &lt;code&gt;setCalendar&lt;/code&gt; 의&lt;/a&gt; 통화.</target>
        </trans-unit>
        <trans-unit id="ab6ef098a0e2b11a35d0346ab8d1c75fce3fa93c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method may be overwritten as a result of a call to the parse method.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; 이 방법에 의해 세트 parse 메소드 호출의 결과로 겹쳐 쓸 수있다.</target>
        </trans-unit>
        <trans-unit id="1b2b585ce3ba8eb3aebe12ba50db23bd93b1cd99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TopLevelWindowListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when a top level window is created or destroyed in the Java Virtual Machine.</source>
          <target state="translated">&lt;code&gt;TopLevelWindowListener&lt;/code&gt; 의 인터페이스는에 의해 사용되는 &lt;a href=&quot;eventqueuemonitor&quot;&gt; &lt;code&gt;EventQueueMonitor&lt;/code&gt; 의&lt;/a&gt; 최고 레벨 창을 만들거나 자바 가상 머신에서 파괴 될 때 이해 당사자에게 통지하는 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="f43a5c5d121ea26e7d3d11198748eb2ea44fc04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TopLevelWindowListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when a top level window is created or destroyed in the Java Virtual Machine. Classes wishing to express an interest in top level window events should implement this interface and register themselves with the &lt;code&gt;EventQueueMonitor&lt;/code&gt; by calling the &lt;a href=&quot;eventqueuemonitor#addTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)&quot;&gt;&lt;code&gt;EventQueueMonitor.addTopLevelWindowListener&lt;/code&gt;&lt;/a&gt; class method.</source>
          <target state="translated">&lt;code&gt;TopLevelWindowListener&lt;/code&gt; 의 인터페이스는에 의해 사용되는 &lt;a href=&quot;eventqueuemonitor&quot;&gt; &lt;code&gt;EventQueueMonitor&lt;/code&gt; 의&lt;/a&gt; 최고 레벨 창을 만들거나 자바 가상 머신에서 파괴 될 때 이해 당사자에게 통지하는 클래스입니다. 톱 레벨 윈도우 이벤트에 관심을 표현하고자하는 클래스는이 인터페이스를 구현하고 함께 자신을 등록한다 &lt;code&gt;EventQueueMonitor&lt;/code&gt; 호출에 의해 &lt;a href=&quot;eventqueuemonitor#addTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)&quot;&gt; &lt;code&gt;EventQueueMonitor.addTopLevelWindowListener&lt;/code&gt; 의&lt;/a&gt; 수업 방법을.</target>
        </trans-unit>
        <trans-unit id="64856a2ea07154d8aca40a14f0b2a8f2b6235c3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Track&lt;/code&gt; class provides methods to edit the track by adding or removing &lt;code&gt;MidiEvent&lt;/code&gt; objects from it. These operations keep the event list in the correct time order. Methods are also included to obtain the track's size, in terms of either the number of events it contains or its duration in ticks.</source>
          <target state="translated">&lt;code&gt;Track&lt;/code&gt; 클래스 추가하거나 제거하여 수정하는 방법을 제공하는 선로 &lt;code&gt;MidiEvent&lt;/code&gt; 그것으로부터 개체. 이러한 작업은 이벤트 목록을 올바른 시간 순서로 유지합니다. 포함 된 이벤트 수 또는 틱 단위의 지속 시간 측면에서 트랙의 크기를 얻는 방법도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="88c4d505c20b758c1cf067046de7a5f61b22c838" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TrailerFieldBC&lt;/code&gt; constant as defined in PKCS#1</source>
          <target state="translated">&lt;code&gt;TrailerFieldBC&lt;/code&gt; PKCS # 1에 정의 된 상수</target>
        </trans-unit>
        <trans-unit id="337a73862454b4e4ce4630d25f83783780da6507" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TransformAttribute&lt;/code&gt; class defines the constant &lt;a href=&quot;transformattribute#IDENTITY&quot;&gt;&lt;code&gt;IDENTITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TransformAttribute&lt;/code&gt; 의의 클래스는 상수를 정의 &lt;a href=&quot;transformattribute#IDENTITY&quot;&gt; &lt;code&gt;IDENTITY&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="242dd480e8d4e2f04c2a0aca2e1d2c2a437f9ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TransformAttribute&lt;/code&gt; class provides an immutable wrapper for a transform so that it is safe to use as an attribute.</source>
          <target state="translated">&lt;code&gt;TransformAttribute&lt;/code&gt; 의 클래스는 그것을 속성으로서 안전하게 사용할 수 있도록 변환하는 불변 래퍼를 제공한다.</target>
        </trans-unit>
        <trans-unit id="9a63fe4036fc39c3775af4983ad2d733adec1ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transient&lt;/code&gt; annotation may be be used in any of the methods that are involved in a &lt;a href=&quot;featuredescriptor&quot;&gt;&lt;code&gt;FeatureDescriptor&lt;/code&gt;&lt;/a&gt; subclass to identify the transient feature in the annotated class and its subclasses. Normally, the method that starts with &quot;get&quot; is the best place to put the annotation and it is this declaration that takes precedence in the case of multiple annotations being defined for the same feature.</source>
          <target state="translated">&lt;code&gt;Transient&lt;/code&gt; 주석은에 참여하는 방법 중 하나에서 사용 할 수있다 &lt;a href=&quot;featuredescriptor&quot;&gt; &lt;code&gt;FeatureDescriptor&lt;/code&gt; 의&lt;/a&gt; 주석 클래스와 그 서브 클래스에 과도 기능을 식별하는 서브 클래스입니다. 일반적으로 &quot;get&quot;으로 시작하는 메소드는 주석을 넣는 가장 좋은 위치이며 동일한 피처에 대해 여러 주석이 정의 된 경우에 우선합니다.</target>
        </trans-unit>
        <trans-unit id="9e364de330948156d7b30fb226ad141e51151b6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transient&lt;/code&gt; annotation may be used in any of the methods that are involved in a &lt;a href=&quot;featuredescriptor&quot;&gt;&lt;code&gt;FeatureDescriptor&lt;/code&gt;&lt;/a&gt; subclass to identify the transient feature in the annotated class and its subclasses. Normally, the method that starts with &quot;get&quot; is the best place to put the annotation and it is this declaration that takes precedence in the case of multiple annotations being defined for the same feature.</source>
          <target state="translated">&lt;code&gt;Transient&lt;/code&gt; 주석은에 참여하는 방법 중 하나에 사용될 수있다 &lt;a href=&quot;featuredescriptor&quot;&gt; &lt;code&gt;FeatureDescriptor&lt;/code&gt; &lt;/a&gt; 주석 클래스와 그 서브 클래스에 과도 기능을 식별하는 서브 클래스입니다. 일반적으로 &quot;get&quot;으로 시작하는 메서드는 주석을 배치하는 가장 좋은 위치이며 동일한 기능에 대해 여러 주석이 정의되는 경우이 선언이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="b848d9d5ef1337d4e50a78e0c88451fd5136dafe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Translator&lt;/code&gt; class provides a translation to interface &lt;a href=&quot;../../../../../../java.desktop/javax/accessibility/accessible&quot;&gt;&lt;code&gt;Accessible&lt;/code&gt;&lt;/a&gt; for objects that do not implement interface &lt;code&gt;Accessible&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Translator&lt;/code&gt; 클래스는 인터페이스의 번역을 제공하는 &lt;a href=&quot;../../../../../../java.desktop/javax/accessibility/accessible&quot;&gt; &lt;code&gt;Accessible&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현하지 않는 개체에 대한 &lt;code&gt;Accessible&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a6373ddbc83a467395284392d51d836baa47b3de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Translator&lt;/code&gt; class provides a translation to interface &lt;a href=&quot;../../../../../../java.desktop/javax/accessibility/accessible&quot;&gt;&lt;code&gt;Accessible&lt;/code&gt;&lt;/a&gt; for objects that do not implement interface &lt;code&gt;Accessible&lt;/code&gt;. Assistive technologies can use the &lt;a href=&quot;#getAccessible(java.lang.Object)&quot;&gt;&lt;code&gt;getAccessible&lt;/code&gt;&lt;/a&gt; class method of &lt;code&gt;Translator&lt;/code&gt; to obtain an object that implements interface &lt;code&gt;Accessible&lt;/code&gt;. If the object passed in already implements interface &lt;code&gt;Accessible&lt;/code&gt;, &lt;code&gt;getAccessible&lt;/code&gt; merely returns the object.</source>
          <target state="translated">&lt;code&gt;Translator&lt;/code&gt; 클래스는 인터페이스의 번역을 제공하는 &lt;a href=&quot;../../../../../../java.desktop/javax/accessibility/accessible&quot;&gt; &lt;code&gt;Accessible&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현하지 않는 개체에 대한 &lt;code&gt;Accessible&lt;/code&gt; . 보조 기술은 &lt;code&gt;Translator&lt;/code&gt; 의 &lt;a href=&quot;#getAccessible(java.lang.Object)&quot;&gt; &lt;code&gt;getAccessible&lt;/code&gt; &lt;/a&gt; 클래스 메소드를 사용하여 &lt;code&gt;Accessible&lt;/code&gt; 인터페이스를 구현하는 객체를 얻을 수 있습니다. 전달 된 객체가 이미 &lt;code&gt;Accessible&lt;/code&gt; 인터페이스를 구현 한 경우 &lt;code&gt;getAccessible&lt;/code&gt; 은 객체를 반환 할뿐입니다.</target>
        </trans-unit>
        <trans-unit id="c2b4f4a819eabca9398ff09bcfb81fad4870d846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transparency&lt;/code&gt; interface defines the common transparency modes for implementing classes.</source>
          <target state="translated">&lt;code&gt;Transparency&lt;/code&gt; 인터페이스는, 클래스를 구현하기위한 공통의 투명도 모드를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="670b265b3329f65feda03a613696faba69159109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TreeCellRenderer&lt;/code&gt; is also responsible for rendering the the cell representing the tree's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the tree directly to see if the given row represents the drop location:</source>
          <target state="translated">&lt;code&gt;TreeCellRenderer&lt;/code&gt; 또한 하나가있는 경우 트리의 현재 드래그 &amp;amp; 드롭 위치를 나타내는 셀을 렌더링 할 책임이있다. 이 렌더러가 DnD 드롭 위치를 렌더링하는 데 관심이 있다면 주어진 행이 드롭 위치를 나타내는 지 확인하기 위해 트리를 직접 쿼리해야합니다.</target>
        </trans-unit>
        <trans-unit id="f50af3967242881f5d0eaaa88b167baaa991e4f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TreeMap&lt;/code&gt; type of collection guarantees that the map will be in ascending key order, sorted according to the natural order for the key's class. Each key references a &lt;code&gt;Vector&lt;/code&gt; object that corresponds to one row of a &lt;code&gt;RowSet&lt;/code&gt; object. Therefore, the size of each &lt;code&gt;Vector&lt;/code&gt; object must be exactly equal to the number of columns in the &lt;code&gt;RowSet&lt;/code&gt; object. The key used by the &lt;code&gt;TreeMap&lt;/code&gt; collection is determined by the implementation, which may choose to leverage a set key that is available within the internal &lt;code&gt;RowSet&lt;/code&gt; tabular structure by virtue of a key already set either on the &lt;code&gt;RowSet&lt;/code&gt; object itself or on the underlying SQL data.</source>
          <target state="translated">&lt;code&gt;TreeMap&lt;/code&gt; 수집 보장의 유형은 맵이 키의 승순으로 소트됩니다, 키의 클래스의 자연 순서에 따라 정렬. 각 키 는 &lt;code&gt;RowSet&lt;/code&gt; 객체 의 한 행에 해당 하는 &lt;code&gt;Vector&lt;/code&gt; 객체를 참조 합니다. 따라서 각 &lt;code&gt;Vector&lt;/code&gt; 객체 의 크기 는 &lt;code&gt;RowSet&lt;/code&gt; 객체 의 열 수와 정확히 같아야 합니다. &lt;code&gt;TreeMap&lt;/code&gt; 컬렉션에서 사용하는 키 는 구현에 의해 결정되며 , &lt;code&gt;RowSet&lt;/code&gt; 개체 자체 또는 기본 SQL 데이터에 이미 설정된 키를 통해 내부 &lt;code&gt;RowSet&lt;/code&gt; 테이블 형식 구조 내에서 사용할 수있는 키 설정을 활용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9bcd29228e53625367d091097491a39f7a4ef896" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TypeInfo&lt;/code&gt; interface represents a type referenced from &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt; nodes, specified in the schemas associated with the document.</source>
          <target state="translated">&lt;code&gt;TypeInfo&lt;/code&gt; 인터페이스에서 참조되는 형태 표현 &lt;code&gt;Element&lt;/code&gt; 또는 &lt;code&gt;Attr&lt;/code&gt; 의 문서에 관련하는 schema로 지정된 노드를.</target>
        </trans-unit>
        <trans-unit id="7f72026f83b83008f230de60a8ad4d2f4f72a6f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TypeInfo&lt;/code&gt; interface represents a type referenced from &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt; nodes, specified in the schemas associated with the document. The type is a pair of a namespace URI and name properties, and depends on the document's schema.</source>
          <target state="translated">&lt;code&gt;TypeInfo&lt;/code&gt; 인터페이스에서 참조되는 형태 표현 &lt;code&gt;Element&lt;/code&gt; 또는 &lt;code&gt;Attr&lt;/code&gt; 의 문서에 관련하는 schema로 지정된 노드를. 유형은 네임 스페이스 URI 및 이름 속성의 쌍이며 문서의 스키마에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="62f28efbdf19e84d13677fbf535fa72f87f95a0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UIEvent&lt;/code&gt; interface provides specific contextual information associated with User Interface events.</source>
          <target state="translated">&lt;code&gt;UIEvent&lt;/code&gt; 인터페이스는 사용자 인터페이스 이벤트에 관련하는 고유의 문맥 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="56b910f29830f7a046163f6e535cb7ed1fc9dd25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URI&lt;/code&gt; passed as an argument specifies the intended use for the cookies. In particular the scheme should reflect whether the cookies will be sent over http, https or used in another context like javascript. The host part should reflect either the destination of the cookies or their origin in the case of javascript.</source>
          <target state="translated">인수로 전달 된 &lt;code&gt;URI&lt;/code&gt; 는 쿠키의 용도를 지정합니다. 특히이 체계는 쿠키가 http, https를 통해 전송 될지 아니면 javascript와 같은 다른 컨텍스트에서 사용될지를 반영해야합니다. 호스트 부분은 javascript의 경우 쿠키의 대상 또는 해당 출처를 반영해야합니다.</target>
        </trans-unit>
        <trans-unit id="4ba34cdf99e04c2d36d3c24cfdbaca9cd7b39e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; instance is used to construct a stream protocol handler from a protocol name.</source>
          <target state="translated">&lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; 의 인스턴스는, 프로토콜 명으로부터 스트림 프로토콜 핸들러를 구축하는데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1d60c3045667966fd5b30a25092dd1ae85ace600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets are specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;; the transformation formats upon which they are based are specified in Amendment 1 of ISO 10646-1 and are also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 캐릭터 세트가 지정됩니다 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt; ; 기반이되는 변환 형식은 ISO 10646-1의 개정 1에 명시되어 있으며 &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;유니 코드 표준&lt;/i&gt;&lt;/a&gt; 에도 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1212ff587f8530505864d4db8b63d2ce30fe0bc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets are specified by &lt;a href=&quot;https://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;; the transformation formats upon which they are based are specified in Amendment 1 of ISO 10646-1 and are also described in the &lt;a href=&quot;https://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 캐릭터 세트가 지정됩니다 &lt;a href=&quot;https://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt; ; 기반이되는 변환 형식은 ISO 10646-1의 개정 1에 지정되어 있으며 &lt;a href=&quot;https://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;유니 코드 표준&lt;/i&gt;&lt;/a&gt; 에도 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e562ee77a3c77e7c3517890b43d086ebf2121c0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets use sixteen-bit quantities and are therefore sensitive to byte order. In these encodings the byte order of a stream may be indicated by an initial</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 문자 세트는 16 비트의 양을 사용 바이트 순서에 따라서 민감하다. 이러한 인코딩에서 스트림의 바이트 순서는 이니셜로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf273b4ec9d4f261c426075182f01ae5218ee7da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-8&lt;/code&gt; charset is specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt;; the transformation format upon which it is based is specified in Amendment 2 of ISO 10646-1 and is also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 캐릭터 세트가 지정됩니다 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt; ; 기반이되는 변환 형식은 ISO 10646-1의 개정 2에 명시되어 있으며 &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;유니 코드 표준&lt;/i&gt;&lt;/a&gt; 에도 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b637061293d6e15703a8ce9105d000feac5d5537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-8&lt;/code&gt; charset is specified by &lt;a href=&quot;https://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt;; the transformation format upon which it is based is specified in Amendment 2 of ISO 10646-1 and is also described in the &lt;a href=&quot;https://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 캐릭터 세트가 지정됩니다 &lt;a href=&quot;https://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt; ; 기반이되는 변환 형식은 ISO 10646-1의 개정 2에 지정되어 있으며 &lt;a href=&quot;https://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;유니 코드 표준&lt;/i&gt;&lt;/a&gt; 에도 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="40e82979aa5d5e239e732f4633c110c90f289973" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UndefinedProperty&lt;/code&gt; object should be returned whenever a property which was not defined for a particular image is fetched.</source>
          <target state="translated">&lt;code&gt;UndefinedProperty&lt;/code&gt; 의 특정 이미지에 대해 정의하지 않은 속성 페치마다 객체가 리턴되어야한다.</target>
        </trans-unit>
        <trans-unit id="4d98c83e8fcbc979fcd257731475f0094c62618b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UndoManager&lt;/code&gt; makes use of &lt;code&gt;isSignificant&lt;/code&gt; to determine how many edits should be undone or redone. The &lt;code&gt;UndoManager&lt;/code&gt; will undo or redo all insignificant edits (&lt;code&gt;isSignificant&lt;/code&gt; returns false) between the current edit and the last or next significant edit. &lt;code&gt;addEdit&lt;/code&gt; and &lt;code&gt;replaceEdit&lt;/code&gt; can be used to treat multiple edits as a single edit, returning false from &lt;code&gt;isSignificant&lt;/code&gt; allows for treating can be used to have many smaller edits undone or redone at once. Similar functionality can also be done using the &lt;code&gt;addEdit&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;UndoManager&lt;/code&gt; 사용하게 &lt;code&gt;isSignificant&lt;/code&gt; 이 많은 편집이 취소 또는 재실행하는 방법을 결정 할 수 있습니다. &lt;code&gt;UndoManager&lt;/code&gt; 취소하거나 모든 의미가없는 편집 (재실행 &lt;code&gt;isSignificant&lt;/code&gt; 는 현재 편집 마지막 또는 다음의 편집 사이를 false를 돌려줍니다). &lt;code&gt;addEdit&lt;/code&gt; 및 &lt;code&gt;replaceEdit&lt;/code&gt; 를 사용하여 여러 편집을 단일 편집 으로 처리 할 수 ​​있습니다. &lt;code&gt;isSignificant&lt;/code&gt; 에서 false를 반환 하면 여러 작은 편집을 한 번에 취소하거나 다시 실행하는 데 사용할 수 있습니다. 비슷한 기능은 &lt;code&gt;addEdit&lt;/code&gt; 메서드를 사용하여 수행 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f3746255404c7a2b3ecfdce90d4c067951094108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified by &lt;code&gt;blockName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; 에 의해 확인 된 예를 &lt;code&gt;blockName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d896f7ed14163beb92e5724cc9e8050c6b43c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the Unicode block of which this character is a member, or &lt;code&gt;null&lt;/code&gt; if the character is not a member of any Unicode block</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; 이 문자는 부재이거나, 또는 어느 유니 나타내는 블록 인스턴스 &lt;code&gt;null&lt;/code&gt; 문자 유니 코드 블록의 구성원이 아닌 경우</target>
        </trans-unit>
        <trans-unit id="3da0426647b35089008f837fbe22d127f746d93b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant identified by &lt;code&gt;scriptName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; 의 식별 일정 &lt;code&gt;scriptName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="361aa86ab23e083f317e898d7085e206739f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant representing the Unicode script of which this character is assigned to.</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; 의 이 문자가 할당되어있는 유니 코드 스크립트를 나타내는 정수입니다.</target>
        </trans-unit>
        <trans-unit id="dff70a6a25ac748bc050f9064cb9cc771e6ae57b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Url&lt;/code&gt; property will be &lt;code&gt;null&lt;/code&gt; if the underlying data source is a non-SQL data source, such as a spreadsheet or an XML data source.</source>
          <target state="translated">&lt;code&gt;Url&lt;/code&gt; 속성이 될 것 &lt;code&gt;null&lt;/code&gt; 기본 데이터 소스는 스프레드 시트 또는 XML 데이터 원본으로, 비 SQL 데이터 소스 인 경우.</target>
        </trans-unit>
        <trans-unit id="6b22e15bc413740c6b41cef56f96b20ebfc3c2ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; for this file system</source>
          <target state="translated">이 파일 시스템 의 &lt;code&gt;UserPrincipalLookupService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c0c0ad3a9196627434d4da0577e73a19e9ed982" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValueExp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ValueExp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="95f12ecc4c931b6cd52c7c8712c089eb1f901958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; 클래스는 객체의 가변 길이 배열을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="4aeeb9de325145d9de793fc5e171c818d3209bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a &lt;code&gt;Vector&lt;/code&gt; can grow or shrink as needed to accommodate adding and removing items after the &lt;code&gt;Vector&lt;/code&gt; has been created.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; 클래스는 객체의 가변 길이 배열을 구현합니다. 배열과 마찬가지로 정수 인덱스를 사용하여 액세스 할 수있는 구성 요소가 포함되어 있습니다. 그러나 &lt;code&gt;Vector&lt;/code&gt; 를 만든 후 항목을 추가하거나 제거 할 수 있도록 &lt;code&gt;Vector&lt;/code&gt; 크기가 필요에 따라 커지거나 줄어들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4a2a2d34e6edf9a736c688c4e496fc8f413e787d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vectors&lt;/code&gt; of &lt;code&gt;Object&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; 의 &lt;code&gt;Vectors&lt;/code&gt; 의 &lt;code&gt;Object&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="c51ed8f23325be7432bcd95a2fad8327dd3a6c7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; of column identifiers.</source>
          <target state="translated">열 식별자 의 &lt;code&gt;Vector&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ef38f50778470be314c350ac1236d4ae66252c2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VetoableChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; 는 이와 관련 &lt;code&gt;BeanContextChildSupport&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20a05157c7add57e69ed4b84eda43d3b9471dac5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Void&lt;/code&gt; class is an uninstantiable placeholder class to hold a reference to the &lt;code&gt;Class&lt;/code&gt; object representing the Java keyword void.</source>
          <target state="translated">&lt;code&gt;Void&lt;/code&gt; 클래스에 대한 참조를 유지하는 uninstantiable 자리 클래스입니다 &lt;code&gt;Class&lt;/code&gt; 자바를 나타내는 개체가 무효 키워드.</target>
        </trans-unit>
        <trans-unit id="b7201fbe9821d111b8e7310e2e9e5f50d2f9f0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebRowSetImpl&lt;/code&gt; provides the standard reference implementation, which may be extended if required.</source>
          <target state="translated">&lt;code&gt;WebRowSetImpl&lt;/code&gt; 는 필요하다면 연장 될 수도 표준 참조 구현을 제공한다.</target>
        </trans-unit>
        <trans-unit id="9727e0ed3037aaa46ce224bd1fe010383f3480c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; and its subcomponents can be made displayable again by rebuilding the native resources with a subsequent call to &lt;code&gt;pack&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt;. The states of the recreated &lt;code&gt;Window&lt;/code&gt; and its subcomponents will be identical to the states of these objects at the point where the &lt;code&gt;Window&lt;/code&gt; was disposed (not accounting for additional modifications between those actions).</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; 와 그 하위 구성 요소에 대한 후속 호출 네이티브 자원을 재 구축하여 다시 표시 가능하게 할 수 있습니다 &lt;code&gt;pack&lt;/code&gt; 또는 &lt;code&gt;show&lt;/code&gt; . 다시 생성 된 &lt;code&gt;Window&lt;/code&gt; 및 해당 하위 구성 요소의 상태는 &lt;code&gt;Window&lt;/code&gt; 가 삭제 된 시점의 이러한 개체 상태와 동일합니다 (해당 작업 간의 추가 수정은 고려하지 않음).</target>
        </trans-unit>
        <trans-unit id="9e95df5176a50ee550434605ecd3ba4571d76304" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; class and the &lt;code&gt;Applet&lt;/code&gt; class are the validate roots in AWT. Swing introduces more validate roots.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; 클래스와 &lt;code&gt;Applet&lt;/code&gt; 클래스는 AWT의 유효성을 뿌리입니다. Swing은 더 많은 검증 루트를 도입합니다.</target>
        </trans-unit>
        <trans-unit id="dcf547c8c4952ee62719999861c70718ea329248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; meets the requirements outlined in the &lt;a href=&quot;#isFocusableWindow()&quot;&gt;&lt;code&gt;isFocusableWindow()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; 에서 설명한 요건 충족 &lt;a href=&quot;#isFocusableWindow()&quot;&gt; &lt;code&gt;isFocusableWindow()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="704045f5a2599d8a137d2e74c9f85efdab2b97d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt;'s &lt;code&gt;autoRequestFocus&lt;/code&gt; property is of the &lt;code&gt;true&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; 의 &lt;code&gt;autoRequestFocus&lt;/code&gt; 의 속성이다 &lt;code&gt;true&lt;/code&gt; 가치.</target>
        </trans-unit>
        <trans-unit id="26d20b795a509ccf345f4880f86bffc5ff46ea07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77fb3bff5f49c42c2161c3e19062b5010a06389f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt; methods to write text throw &lt;code&gt;IOException&lt;/code&gt; if the text cannot be encoded using the specified charset.</source>
          <target state="translated">지정된 문자 세트를 사용하여 텍스트를 인코딩 할 수없는 경우 텍스트를 작성 하는 &lt;code&gt;Writer&lt;/code&gt; 메소드에서 &lt;code&gt;IOException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5df6357d2d9dd77291511c1a5a3bbe7008f4a76d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d0b59a3f7afdfb200daf7c7684da04108a0ed23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XAConnection&lt;/code&gt; interface is derived from the &lt;code&gt;PooledConnection&lt;/code&gt; interface, so what applies to a pooled connection also applies to a connection that is part of a distributed transaction. A transaction manager in the middle tier handles everything transparently. The only change in application code is that an application cannot do anything that would interfere with the transaction manager's handling of the transaction. Specifically, an application cannot call the methods &lt;code&gt;Connection.commit&lt;/code&gt; or &lt;code&gt;Connection.rollback&lt;/code&gt;, and it cannot set the connection to be in auto-commit mode (that is, it cannot call &lt;code&gt;Connection.setAutoCommit(true)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;XAConnection&lt;/code&gt; 의 인터페이스는에서 파생 &lt;code&gt;PooledConnection&lt;/code&gt; 풀 된 접속에 적용 것 또한 분산 트랜잭션의 일부인 연결에 적용 있도록 인터페이스를 제공합니다. 중간 계층의 트랜잭션 관리자는 모든 것을 투명하게 처리합니다. 응용 프로그램 코드의 유일한 변경 사항은 응용 프로그램이 트랜잭션 관리자의 트랜잭션 처리를 방해하는 작업을 수행 할 수 없다는 것입니다. 특히 애플리케이션은 &lt;code&gt;Connection.commit&lt;/code&gt; 또는 &lt;code&gt;Connection.rollback&lt;/code&gt; 메서드를 호출 할 수 없으며 연결을 자동 커밋 모드로 설정할 수 없습니다 (즉, &lt;code&gt;Connection.setAutoCommit(true)&lt;/code&gt; 호출 할 수 없음 ).</target>
        </trans-unit>
        <trans-unit id="2fdc5e90dac380c583a94ac10964401cbc1bff2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; 의 클래스는 사용하여 만든 XML 문서를 읽는 데 사용되는 &lt;code&gt;XMLEncoder&lt;/code&gt; 그냥 같이 사용 &lt;code&gt;ObjectInputStream&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4c73680d790e9f555b97eb4fbffb24cd26c3ccca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;. For example, one can use the following fragment to read the first object defined in an XML document written by the &lt;code&gt;XMLEncoder&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; 의 클래스는 사용하여 만든 XML 문서를 읽는 데 사용되는 &lt;code&gt;XMLEncoder&lt;/code&gt; 그냥 같이 사용 &lt;code&gt;ObjectInputStream&lt;/code&gt; . 예를 들어, 다음 조각을 사용하여 &lt;code&gt;XMLEncoder&lt;/code&gt; 클래스가 작성한 XML 문서에 정의 된 첫 번째 오브젝트를 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b40fba744abf8f8cdfdbf7823211e024611a2005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 상보 대안 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로 와의 텍스트 표현을 생성하기 위해 사용될 수 &lt;em&gt;자바빈&lt;/em&gt; 것과 같은 방식 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로는 이진 표현을 생성하는데 사용될 수있다 &lt;code&gt;Serializable&lt;/code&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="bc93ab4e94e8fd32e113d65a55be49ef42b7d783" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects. For example, the following fragment can be used to create a textual representation the supplied &lt;em&gt;JavaBean&lt;/em&gt; and all its properties:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 상보 대안 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로 와의 텍스트 표현을 생성하기 위해 사용될 수 &lt;em&gt;자바빈&lt;/em&gt; 것과 같은 방식 &lt;code&gt;ObjectOutputStream&lt;/code&gt; 로는 이진 표현을 생성하는데 사용될 수있다 &lt;code&gt;Serializable&lt;/code&gt; 개체. 예를 들어, 다음 조각을 사용하여 제공된 &lt;em&gt;JavaBean&lt;/em&gt; 및 모든 해당 특성 의 텍스트 표현을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="baee72131905882a77a0b4ca9b76ace184c77c99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class provides a default denotation for &lt;em&gt;JavaBean&lt;/em&gt;s in which they are represented as XML documents complying with version 1.0 of the XML specification and the UTF-8 character encoding of the Unicode/ISO 10646 character set. The XML documents produced by the &lt;code&gt;XMLEncoder&lt;/code&gt; class are:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 대한 기본 명시 적 의미합니다 &lt;em&gt;자바 빈즈&lt;/em&gt; 의 그들이 XML 사양 및 유니 코드 / ISO 10646 문자 세트의 UTF-8 문자 인코딩의 버전 1.0을 준수하는 XML 문서로 표현되는합니다. &lt;code&gt;XMLEncoder&lt;/code&gt; 클래스에 의해 생성 된 XML 문서 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="773745b0980b73ae3cf7133fbf0740a9e51a6976" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLStreamReader&lt;/code&gt; or &lt;code&gt;XMLEventReader&lt;/code&gt; used to construct this &lt;code&gt;StAXSource&lt;/code&gt; is queried to determine the system identifier of the XML source.</source>
          <target state="translated">&lt;code&gt;XMLStreamReader&lt;/code&gt; 또는 &lt;code&gt;XMLEventReader&lt;/code&gt; 의 이 구성하는데 사용 &lt;code&gt;StAXSource&lt;/code&gt; 의은 XML 소스의 시스템 식별자를 결정하기 위해 조회된다.</target>
        </trans-unit>
        <trans-unit id="5e8ba5718ccb5dddefc8fcb9ef5b222f271f2b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathEvaluationResult&lt;/code&gt; interface represents the result of the evaluation of an XPath expression within the context of a particular node.</source>
          <target state="translated">&lt;code&gt;XPathEvaluationResult&lt;/code&gt; 의 인터페이스는 특정 노드의 문맥 내의 XPath 식의 평가 결과를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="7979524a823b2b3c2152adeae36a863101800820" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathEvaluationResult&lt;/code&gt; interface represents the result of the evaluation of an XPath expression within the context of a particular node. The evaluation of an XPath expression can result in various result types as defined in XML Path Language (XPath) Version 1.0.</source>
          <target state="translated">&lt;code&gt;XPathEvaluationResult&lt;/code&gt; 의 인터페이스는 특정 노드의 문맥 내의 XPath 식의 평가 결과를 나타낸다. XPath 표현식을 평가하면 XPath (XML Path Language) 버전 1.0에 정의 된 다양한 결과 유형이 생성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd7e2381f00dc37c671ca1b95d78f182b4a9d8c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathExpression&lt;/code&gt; interface represents a parsed and resolved XPath expression.</source>
          <target state="translated">&lt;code&gt;XPathExpression&lt;/code&gt; 인터페이스는 구문 분석 및 해결 XPath 식을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="864adcf3b012bbba70056106a86d52bf42863eff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;#DEFAULT_OBJECT_MODEL_URI&quot;&gt;&lt;code&gt;default object model&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;../../../org/w3c/dom/package-summary&quot;&gt;W3C DOM&lt;/a&gt;, but may support additional object models.</source>
          <target state="translated">&lt;code&gt;XPathFactory&lt;/code&gt; 를 내장 시스템 디폴트의 구현 만 지원하는 데 필요한 &lt;a href=&quot;#DEFAULT_OBJECT_MODEL_URI&quot;&gt; &lt;code&gt;default object model&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;../../../org/w3c/dom/package-summary&quot;&gt;W3C DOM을&lt;/a&gt; 하지만, 추가적인 객체 모델을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9ce9690ea5d8f3d35027cfba07990e65b3fa285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNSResolver&lt;/code&gt; interface permit &lt;code&gt;prefix&lt;/code&gt; strings in the expression to be properly bound to &lt;code&gt;namespaceURI&lt;/code&gt; strings.</source>
          <target state="translated">&lt;code&gt;XPathNSResolver&lt;/code&gt; 인터페이스 허가 &lt;code&gt;prefix&lt;/code&gt; 식의 문자열을 적절하게 결합되는 &lt;code&gt;namespaceURI&lt;/code&gt; 문자열.</target>
        </trans-unit>
        <trans-unit id="464770db069d98604c0813c2d629cb661ff7a426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNSResolver&lt;/code&gt; interface permit &lt;code&gt;prefix&lt;/code&gt; strings in the expression to be properly bound to &lt;code&gt;namespaceURI&lt;/code&gt; strings. &lt;code&gt;XPathEvaluator&lt;/code&gt; can construct an implementation of &lt;code&gt;XPathNSResolver&lt;/code&gt; from a node, or the interface may be implemented by any application.</source>
          <target state="translated">&lt;code&gt;XPathNSResolver&lt;/code&gt; 인터페이스 허가 &lt;code&gt;prefix&lt;/code&gt; 식의 문자열을 적절하게 결합되는 &lt;code&gt;namespaceURI&lt;/code&gt; 문자열. &lt;code&gt;XPathEvaluator&lt;/code&gt; 는 노드에서 &lt;code&gt;XPathNSResolver&lt;/code&gt; 의 구현을 구성 하거나 인터페이스가 모든 응용 프로그램에서 구현 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30c24a58ce8f83955520baaac9ee2788a5837651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNamespace&lt;/code&gt; interface is returned by &lt;code&gt;XPathResult&lt;/code&gt; interfaces to represent the XPath namespace node type that DOM lacks.</source>
          <target state="translated">&lt;code&gt;XPathNamespace&lt;/code&gt; 의 인터페이스에 의해 리턴 &lt;code&gt;XPathResult&lt;/code&gt; DOM이 결여는 XPath 네임 노드 유형을 나타 내기 위해 인터페이스.</target>
        </trans-unit>
        <trans-unit id="668ded359ece8d2b5275905cdbb1f7919b101575" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNamespace&lt;/code&gt; interface is returned by &lt;code&gt;XPathResult&lt;/code&gt; interfaces to represent the XPath namespace node type that DOM lacks. There is no public constructor for this node type. Attempts to place it into a hierarchy or a NamedNodeMap result in a &lt;code&gt;DOMException&lt;/code&gt; with the code &lt;code&gt;HIERARCHY_REQUEST_ERR&lt;/code&gt; . This node is read only, so methods or setting of attributes that would mutate the node result in a DOMException with the code &lt;code&gt;NO_MODIFICATION_ALLOWED_ERR&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XPathNamespace&lt;/code&gt; 의 인터페이스에 의해 리턴 &lt;code&gt;XPathResult&lt;/code&gt; DOM이 결여는 XPath 네임 노드 유형을 나타 내기 위해 인터페이스. 이 노드 유형에 대한 공용 생성자가 없습니다. 계층 구조 또는 NamedNodeMap에 배치하려고하면 &lt;code&gt;HIERARCHY_REQUEST_ERR&lt;/code&gt; 코드와 함께 &lt;code&gt;DOMException&lt;/code&gt; 이 발생합니다 . 이 노드는 읽기 전용이므로 노드를 변경하는 메서드 또는 속성 설정으로 인해 코드 &lt;code&gt;NO_MODIFICATION_ALLOWED_ERR&lt;/code&gt; 과 함께 DOMException이 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="d653050c0bbc219e35952bc3cf4f5c4e2ea3d3d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathResult&lt;/code&gt; interface represents the result of the evaluation of an XPath 1.0 expression within the context of a particular node.</source>
          <target state="translated">&lt;code&gt;XPathResult&lt;/code&gt; 인터페이스는 특정 노드의 컨텍스트 내에서의 XPath 식 1.0의 평가 결과를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="bed61e9ab59fdaac051379b01910e15ccf293b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathResult&lt;/code&gt; interface represents the result of the evaluation of an XPath 1.0 expression within the context of a particular node. Since evaluation of an XPath expression can result in various result types, this object makes it possible to discover and manipulate the type and value of the result.</source>
          <target state="translated">&lt;code&gt;XPathResult&lt;/code&gt; 인터페이스는 특정 노드의 컨텍스트 내에서의 XPath 식 1.0의 평가 결과를 나타낸다. XPath 표현식의 평가는 다양한 결과 유형을 생성 할 수 있으므로이 객체를 사용하면 결과의 유형과 값을 발견하고 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1579758fa332f4ff09bb6a3a0a884344e634c7db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathVariableResolver&lt;/code&gt; and the XPath evaluator must adhere to a contract that cannot be directly enforced by the API. Although variables may be mutable, that is, an application may wish to evaluate the same XPath expression more than once with different variable values, in the course of evaluating any single XPath expression, a variable's value &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt; not change.</source>
          <target state="translated">&lt;code&gt;XPathVariableResolver&lt;/code&gt; 에 와의 XPath 평가자는 직접 API에 의해 강제 될 수없는 계약을 준수해야합니다. 변수는 변경할 수 있지만, 즉, 응용 프로그램이 단일 XPath 식을 평가하는 과정에서 다른 변수의 값을 두 번 이상 같은 XPath 식을 평가하실 수 있습니다 변수의 값이 &lt;strong&gt;&lt;em&gt;있어야&lt;/em&gt;&lt;/strong&gt; 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dc6626b4ce56edf5eec0e4e7f1f6d83d431a9d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[ ]&lt;/code&gt; characters are a</source>
          <target state="translated">&lt;code&gt;[ ]&lt;/code&gt; 문자가됩니다</target>
        </trans-unit>
        <trans-unit id="a2448ee443a37bfe2270b1cc58275c79e860c644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aCommand&lt;/code&gt; will be set in the delivered event if specified.</source>
          <target state="translated">&lt;code&gt;aCommand&lt;/code&gt; 이 지정된 경우 전달 된 경우에 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="7c55d0ff61eb4e937c515821a0807c8069fecf30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aCondition&lt;/code&gt; can be one of:</source>
          <target state="translated">&lt;code&gt;aCondition&lt;/code&gt; 중 하나가 될 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="b980e0f175dba221828f4b57f7dd907c4fe4a7d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accessible&lt;/code&gt; flag when &lt;code&gt;true&lt;/code&gt; suppresses Java language access control checks to only enable &lt;a href=&quot;#get(java.lang.Object)&quot;&gt;&lt;em&gt;read&lt;/em&gt;&lt;/a&gt; access to these non-modifiable final fields.</source>
          <target state="translated">&lt;code&gt;accessible&lt;/code&gt; 플래그 때 &lt;code&gt;true&lt;/code&gt; 에만 사용하려면 억압 Java 언어 액세스 제어 검사 &lt;a href=&quot;#get(java.lang.Object)&quot;&gt;&lt;em&gt;읽기&lt;/em&gt;&lt;/a&gt; 이 아닌 수정 최종 필드에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5fbe9edcb70b42859b844ed294f412b8dd98d7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accessible&lt;/code&gt; flag when &lt;code&gt;true&lt;/code&gt; suppresses Java language access control checks to only enable &lt;a href=&quot;field#get(java.lang.Object)&quot;&gt;&lt;em&gt;read&lt;/em&gt;&lt;/a&gt; access to these non-modifiable final fields.</source>
          <target state="translated">&lt;code&gt;accessible&lt;/code&gt; 플래그 때 &lt;code&gt;true&lt;/code&gt; 에만 사용하려면 억압 Java 언어 액세스 제어 검사 &lt;a href=&quot;field#get(java.lang.Object)&quot;&gt;&lt;em&gt;읽기&lt;/em&gt;&lt;/a&gt; 이 아닌 수정 최종 필드에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbec44aca0eff7c0fd9d646cfb96819a5b4c572f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;accumulator&lt;/code&gt; 함수가 있어야 &lt;a href=&quot;package-summary#Associativity&quot;&gt;연관&lt;/a&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="4185fd67e39e58987d681ed4e049cb9068cef055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; argument is of the same format as the &lt;code&gt;eventPropertyName&lt;/code&gt; argument where the last property name identifies either a method name or writable property.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; 인자들은 동일 형식이다 &lt;code&gt;eventPropertyName&lt;/code&gt; 를의 인수 여기서 마지막 속성 이름을 식별하는 방법 이름 또는 속성 중 쓰기.</target>
        </trans-unit>
        <trans-unit id="31404f4484a67d5901851525c58dad6c4c563d5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method has one of two possible signatures. The JVM first attempts to invoke the following method on the agent class:</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; 의 방법은 두 가지 중 하나의 서명이있다. JVM은 먼저 에이전트 클래스에서 다음 메소드를 호출하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="cc78d234a40aa6ddd38f2300973ad58dbc9f2403" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method should do any necessary initialization required to start the agent and return. If the agent cannot be started, for example the agent class cannot be loaded, the agent class does not define a conformant &lt;code&gt;agentmain&lt;/code&gt; method, or the &lt;code&gt;agentmain&lt;/code&gt; method throws an uncaught exception or error, the JVM will abort.</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; 의 방법은 에이전트와 반환을 시작하는 데 필요한 필요한 초기화를해야한다. 에이전트를 시작할 수없는 경우 (예 : 에이전트 클래스를로드 할 수 없거나 에이전트 클래스가 준수 &lt;code&gt;agentmain&lt;/code&gt; 메서드를 정의하지 않거나 &lt;code&gt;agentmain&lt;/code&gt; 메서드가 포착되지 않은 예외 또는 오류를 발생시키는 경우) JVM이 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="e39ec8f12fac3e1235b57830cba8b781dedf715e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method should do any necessary initialization required to start the agent. When startup is complete the method should return. If the agent cannot be started (for example, because the agent class cannot be loaded, or because the agent class does not have a conformant &lt;code&gt;agentmain&lt;/code&gt; method), the JVM will not abort. If the &lt;code&gt;agentmain&lt;/code&gt; method throws an uncaught exception it will be ignored (but may be logged by the JVM for troubleshooting purposes).</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; 의 방법은 에이전트를 시작하는 데 필요한 필요한 초기화를해야한다. 시작이 완료되면 메서드가 반환되어야합니다. 에이전트를 시작할 수없는 경우 (예 : 에이전트 클래스를로드 할 수 없거나 에이전트 클래스에 적합한 &lt;code&gt;agentmain&lt;/code&gt; 메서드 가 없기 때문에 ) JVM이 중단되지 않습니다. 는 IF &lt;code&gt;agentmain&lt;/code&gt; 메소드가 캐치되지 않는 예외를 throw는 무시됩니다 (그러나 문제 해결을 목적으로 JVM에 의해 기록 될 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="4200792e507990527888853e33e39555b27217a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; 매개 변수를 식별 속성 읽고 형식을 취한다 :</target>
        </trans-unit>
        <trans-unit id="e13622be0932a01b09ea0231195ad9dee2d891a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be set and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; 파라미터를 식별하는 속성을 설정 및 형태를 취한다 :</target>
        </trans-unit>
        <trans-unit id="9300dec972e233c14dfee6f24a1437eb62d16c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter identifies the attributes to be read and takes the form:</source>
          <target state="translated">는 &lt;code&gt;attributes&lt;/code&gt; 의 속성을 읽을 수 있도록 매개 변수를 식별 및 형태를 취한다 :</target>
        </trans-unit>
        <trans-unit id="e891f2a34d3ff9a18061c78c854c7a39d310fd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt;&lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same length and for each node that exists in one map there is a node that exists in the other map and is equal, although not necessarily at the same index.</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; 은 동일하다. 이것은 둘 다 &lt;code&gt;null&lt;/code&gt; 이거나 길이가 같고 한 맵에 존재하는 각 노드에 대해 반드시 동일한 인덱스에있는 것은 아니지만 다른 맵에 존재하고 동일한 노드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="71ec10680a515404dcea83dc93b34a00ae544957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is an optional array of file &lt;a href=&quot;../file/attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 파일의 선택적인 배열 매개 변수 &lt;a href=&quot;../file/attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="aa73d718a6e84fdffc4666766b8c6f4155f86290" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 매개 변수는 선택 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt; 링크를 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 발생을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f5d11588e62ee6ecee510a144a13ae053b7ded0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 매개 변수는 선택 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt; 링크를 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="6a9611129a94268b694e7f0a6870f3b072a950a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when a new file is created.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 새 파일이 생성 될 때 원자 적으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9a59843ac8ffdbb8b27a7af904c73b09addfd665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 디렉터리를 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 발생을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="1530cb7be2e1a90d2e32e41b80f5181fbd3c409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 디렉터리를 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a2eafb0f18e2c0f90cfaa47597137720724d74ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 발생을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="09484803eed7eb220bb9cee3c89264c72f6e5064" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile(java.lang.String,java.lang.String,java.io.File)&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 발생을 제외한 모든 속성이 무시됩니다. 파일 속성이 지정되지 않은 경우 결과 파일은 &lt;a href=&quot;../../io/file#createTempFile(java.lang.String,java.lang.String,java.io.File)&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt; 메서드로 생성 된 파일에 대해 더 제한적인 액세스 권한을 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ad9b07c9e2205e3502079d33de386fcf7c13ff4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3d4f30d19e092c8b774921588c985e988e8af3fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 파일을 만들 때 원자 적으로 설정합니다. 각 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다. 파일 속성을 지정하지 않으면 결과 파일에 &lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt; 메소드로 작성된 파일에 대한 액세스가 더 제한적일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b269fdea6c6d809695550b9428ade177ba1ea0ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 존재하지 않는 디렉토리를 만들 때 원자 적으로 설정합니다. 각 파일 속성은 &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 발생을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="eac58af08c25e30b8096bbec06d65d5969d2351b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; 에 선택적 매개 변수 &lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt; 존재하지 않는 디렉토리를 만들 때 원자 적으로 설정합니다. 각 파일 속성은 &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 식별됩니다 . 동일한 이름의 속성이 둘 이상 배열에 포함 된 경우 마지막 항목을 제외한 모든 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9310f8ddf2f2e1abe2704763c0d8698944c86a52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;available&lt;/code&gt; 클래스에 대한 방법 &lt;code&gt;InputStream&lt;/code&gt; 항상 반환 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="07e935be2d00da600d82b1459bdd0645c167a8af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 의 &lt;code&gt;available&lt;/code&gt; 메서드는 항상 &lt;code&gt;0&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2a223f99a73adb8d4155acdcdbe953d90137df1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of the underlying stream returns zero, indicating that further input requests would block.</source>
          <target state="translated">기본 스트림 의 &lt;code&gt;available&lt;/code&gt; 메소드는 추가 입력 요청이 차단됨을 나타내는 0을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3e1885899fe620f932f25aade18693cc40c3bf9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogether. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 인수는 소켓에 대기중인 연결 요청의 최대 수입니다. 정확한 의미는 구현에 따라 다릅니다. 특히, 구현은 최대 길이를 부과하거나 매개 변수를 모두 무시하도록 선택할 수 있습니다. 제공된 값은 &lt;code&gt;0&lt;/code&gt; 보다 커야 합니다. &lt;code&gt;0&lt;/code&gt; 보다 작거나 같으면 구현 특정 기본값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c19d6f589a03480c7507cbcf9ea41e93f9410bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 인수는 소켓에 대기중인 연결 요청의 최대 수입니다. 정확한 의미는 구현에 따라 다릅니다. 특히, 구현은 최대 길이를 부과하거나 매개 변수를 무시하도록 선택할 수 있습니다. 제공된 값은 &lt;code&gt;0&lt;/code&gt; 보다 커야 합니다. &lt;code&gt;0&lt;/code&gt; 보다 작거나 같은 경우, 구현 고유의 디폴트가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="29ad9363012d93283f3d04ff689ea4b529ac1006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 값이 같거나 0보다 작은 경우, 디폴트 값이 가정 될 경우 전달 된 경우 인수는 0보다 큰 양의 값이 커야합니다.</target>
        </trans-unit>
        <trans-unit id="b04fd34021527ffa6eec03ad117996148e622e5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the &lt;code&gt;backlog&lt;/code&gt; parameter has the value &lt;code&gt;0&lt;/code&gt;, or a negative value, then an implementation specific default is used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 매개 변수는 소켓에 대기중인 연결의 최대 수입니다. 정확한 의미는 구현에 따라 다릅니다. 특히, 구현은 최대 길이를 부과하거나 매개 변수를 무시하도록 선택할 수 있습니다. 경우] &lt;code&gt;backlog&lt;/code&gt; 파라미터 값을 가지고 &lt;code&gt;0&lt;/code&gt; 또는 음의 값을 다음의 특정 구현 기본값을 사용한다.</target>
        </trans-unit>
        <trans-unit id="9758dfb7f206fee802af2ff421e244af4ed6b224" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;#getNameCount()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;
 endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; 의 및 &lt;code&gt;endIndex&lt;/code&gt; 에 매개 변수 이름 요소의 서브 순서를 지정합니다. 디렉토리 계층 구조에서 루트에 &lt;em&gt;가장 가까운&lt;/em&gt; 이름 에는 인덱스 &lt;code&gt;0&lt;/code&gt; 이 있습니다. 루트에서 &lt;em&gt;가장 먼&lt;/em&gt; 이름의 인덱스 &lt;a href=&quot;#getNameCount()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; 입니다. 반환 된 &lt;code&gt;Path&lt;/code&gt; 객체에는 &lt;code&gt;beginIndex&lt;/code&gt; 에서 시작하여 &lt;code&gt; endIndex-1&lt;/code&gt; 인덱스의 요소까지 확장 되는 이름 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="038e82ed2e83821157222aec4b1425ddc2acdb2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; 의 및 &lt;code&gt;endIndex&lt;/code&gt; 에 매개 변수 이름 요소의 서브 순서를 지정합니다. 디렉토리 계층에서 루트에 &lt;em&gt;가장 가까운&lt;/em&gt; 이름 은 인덱스 &lt;code&gt;0&lt;/code&gt; 입니다. 루트에서 &lt;em&gt;가장 먼&lt;/em&gt; 이름 은 인덱스 &lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; 입니다. 반환 된 &lt;code&gt;Path&lt;/code&gt; 객체는 &lt;code&gt;beginIndex&lt;/code&gt; 에서 시작하고 &lt;code&gt;endIndex-1&lt;/code&gt; 인덱스의 요소로 확장 되는 이름 요소를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="23cf20e6e7ba36d73ecb53fccee07162da8d920d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 핸들이 아니어야 &lt;code&gt;null&lt;/code&gt; ; 유형은 &lt;code&gt;(V A...)V&lt;/code&gt; 형식이어야합니다 . 여기서 &lt;code&gt;V&lt;/code&gt; 는 &lt;code&gt;void&lt;/code&gt; 가 아니거나 &lt;code&gt;(A...)void&lt;/code&gt; 입니다. 합니다 (에서 &lt;code&gt;void&lt;/code&gt; 의 경우, 우리는 형식 지정 &lt;code&gt;void&lt;/code&gt; 이름으로 &lt;code&gt;V&lt;/code&gt; 를 , 우리는 쓸 것 &lt;code&gt;(V A...)V&lt;/code&gt; 것을 이해 &lt;code&gt;void&lt;/code&gt; 형 &lt;code&gt;V&lt;/code&gt; 가 조용히 떠나, 매개 변수 목록에서 삭제 &lt;code&gt;(A...)V&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="87c334e233d7c15dbce8f02769f49f0543984685" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V I A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(I A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V I A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(I A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 핸들이 아니어야 &lt;code&gt;null&lt;/code&gt; ; 유형은 &lt;code&gt;(V I A...)V&lt;/code&gt; 형식이어야합니다 . 여기서 &lt;code&gt;V&lt;/code&gt; 는 &lt;code&gt;void&lt;/code&gt; 가 아니거나 &lt;code&gt;(I A...)void&lt;/code&gt; 입니다. 합니다 (에서 &lt;code&gt;void&lt;/code&gt; 의 경우, 우리는 형식 지정 &lt;code&gt;void&lt;/code&gt; 이름으로 &lt;code&gt;V&lt;/code&gt; 를 , 우리는 쓸 것 &lt;code&gt;(V I A...)V&lt;/code&gt; 것을 이해 &lt;code&gt;void&lt;/code&gt; 형 &lt;code&gt;V&lt;/code&gt; 가 조용히 떠나 매개 변수 목록에서 삭제 &lt;code&gt;(I A...)V&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="1e3ecb1f1c113d7459558edaafd1c22e159c798c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V T A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(T A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V T A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(T A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 핸들이 아니어야 &lt;code&gt;null&lt;/code&gt; ; 형식은 &lt;code&gt;(V T A...)V&lt;/code&gt; 형식이어야합니다 . 여기서 &lt;code&gt;V&lt;/code&gt; 는 &lt;code&gt;void&lt;/code&gt; 가 아니거나 &lt;code&gt;(T A...)void&lt;/code&gt; 입니다. (에서 &lt;code&gt;void&lt;/code&gt; 의 경우, 우리는 형식 지정 &lt;code&gt;void&lt;/code&gt; 이름으로 &lt;code&gt;V&lt;/code&gt; 를 , 우리는 쓸 것 &lt;code&gt;(V T A...)V&lt;/code&gt; 것을 이해 &lt;code&gt;void&lt;/code&gt; 형 &lt;code&gt;V&lt;/code&gt; 가 조용히 떠나 매개 변수 목록에서 삭제 &lt;code&gt;(T A...)V&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="2607bcf7e52a949a9098498708e7ed0874e36f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bytes&lt;/code&gt; parameter is the class bytes of a valid class file (as defined by the &lt;em&gt;The Java Virtual Machine Specification&lt;/em&gt;) with a class name in the same package as the lookup class.</source>
          <target state="translated">&lt;code&gt;bytes&lt;/code&gt; 매개 변수 (에 의해 정의 된 클래스가 유효한 클래스 파일의 바이트 &lt;em&gt;Java 가상 머신 사양&lt;/em&gt; 조회 클래스와 같은 패키지에 클래스 이름).</target>
        </trans-unit>
        <trans-unit id="ce830a6dc99fa048ff691c489beb4b6f9e5a2ab8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caller&lt;/code&gt; parameter must be a &lt;code&gt;WebRowSet&lt;/code&gt; object whose &lt;code&gt;XmlWriter&lt;/code&gt; field contains a reference to this &lt;code&gt;XmlWriter&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;caller&lt;/code&gt; 파라미터는 여야 &lt;code&gt;WebRowSet&lt;/code&gt; 그 목적 &lt;code&gt;XmlWriter&lt;/code&gt; 를 필드이 참조 포함 &lt;code&gt;XmlWriter&lt;/code&gt; 를의 개체.</target>
        </trans-unit>
        <trans-unit id="549d3c0cc45d126bfe6b339f4e7d396df73338b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cause&lt;/code&gt; is not initialized.</source>
          <target state="translated">&lt;code&gt;cause&lt;/code&gt; 초기화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a0fdf3dc80a013dc8c4afe2a38389db91bc45e47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cert.provider.x509v1&lt;/code&gt; property is set to a default implementation for X.509 such as:</source>
          <target state="translated">&lt;code&gt;cert.provider.x509v1&lt;/code&gt; 속성은 X.509 등의 기본 구현으로 설정됩니다 :</target>
        </trans-unit>
        <trans-unit id="51472b90fccbf1d42ba6001caf6f52c8f72d01a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changeFlags&lt;/code&gt; parameter of any &lt;code&gt;HierarchyEvent&lt;/code&gt; instance takes one of the following values:</source>
          <target state="translated">&lt;code&gt;HierarchyEvent&lt;/code&gt; 인스턴스 의 &lt;code&gt;changeFlags&lt;/code&gt; 매개 변수 는 다음 값 중 하나를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7e2379eb6107205000a967e604f084a77bb6b353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changeListener&lt;/code&gt; is the listener we add to the model.</source>
          <target state="translated">&lt;code&gt;changeListener&lt;/code&gt; 입니다은 우리가 모델에 추가하는 청취자입니다.</target>
        </trans-unit>
        <trans-unit id="312b7fe1366e0a3c03057bcb7caeef6dc182a366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal &lt;em&gt;code point&lt;/em&gt;s is now U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;. (Refer to the &lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt; definition&lt;/i&gt;&lt;/a&gt; of the U+</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 데이터 유형 (및 따라서 것을 값 &lt;code&gt;Character&lt;/code&gt; 오브젝트 캡슐화)이 고정 폭 16 비트 엔티티와 같은 문자를 정의 일본어 유니 코드 규격에 기초한다. 16 비트보다 많은 표현이 필요한 문자를 허용하도록 유니 코드 표준이 변경되었습니다. 유효한 &lt;em&gt;코드 포인트&lt;/em&gt; 의 범위 는 이제 &lt;em&gt;유니 코드 스칼라 값으로&lt;/em&gt; 알려진 U + 0000 ~ U + 10FFFF 입니다. ( U + 의 &lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;정의&lt;/i&gt;&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="ff4d9d45c7f6a6e3cf9fa2efa7e3c3623f753d29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal &lt;em&gt;code point&lt;/em&gt;s is now U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;. (Refer to the &lt;a href=&quot;https://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt; definition&lt;/i&gt;&lt;/a&gt; of the U+</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 데이터 유형 (및 따라서 것을 값 &lt;code&gt;Character&lt;/code&gt; 오브젝트 캡슐화)이 고정 폭 16 비트 엔티티와 같은 문자를 정의 일본어 유니 코드 규격에 기초한다. 이후 유니 코드 표준은 표현에 16 비트 이상이 필요한 문자를 허용하도록 변경되었습니다. 유효한 &lt;em&gt;코드 포인트&lt;/em&gt; s 의 범위 는 이제 &lt;em&gt;유니 코드 스칼라 값으로&lt;/em&gt; 알려진 U + 0000 ~ U + 10FFFF 입니다. ( U + &lt;a href=&quot;https://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;정의&lt;/i&gt;&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="159881b528b95151218ddcf06070876dc2535a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is called with no arguments; this may result in a security exception.</source>
          <target state="translated">부모 스레드 그룹 의 &lt;code&gt;checkAccess&lt;/code&gt; 메소드는 인수없이 호출됩니다. 보안 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98813f94bb2ecfd8b901aa13def3a342737037f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkImage&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; calls its peer's &lt;code&gt;checkImage&lt;/code&gt; method to calculate the flags. If this component does not yet have a peer, the component's toolkit's &lt;code&gt;checkImage&lt;/code&gt; method is called instead.</source>
          <target state="translated">그만큼 &lt;code&gt;checkImage&lt;/code&gt; &lt;code&gt;Component&lt;/code&gt; checkImage 메소드는 해당 피어의 &lt;code&gt;checkImage&lt;/code&gt; 메소드를 호출 하여 플래그를 계산합니다. 이 구성 요소에 아직 피어가 &lt;code&gt;checkImage&lt;/code&gt; 구성 요소의 도구 키트의 checkImage 메서드가 대신 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="5e8a72d273e2359cf1503e1f34724cc9c2dc1f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkPermission&lt;/code&gt; method that takes a context object in addition to a permission makes access decisions based on that context, rather than on that of the current execution thread. Code within a different context can thus call that method, passing the permission and the previously-saved context object. A sample call, using the SecurityManager &lt;code&gt;sm&lt;/code&gt; obtained as in the previous example, is the following:</source>
          <target state="translated">&lt;code&gt;checkPermission&lt;/code&gt; 권한 이외에 컨텍스트 오브젝트를 사용 방법은 오히려 현재 실행 스레드의보다 그 문맥에 따라 액세스를 판정합니다. 따라서 다른 컨텍스트 내의 코드는 해당 메서드를 호출하여 권한과 이전에 저장된 컨텍스트 개체를 전달할 수 있습니다. 이전 예제에서 얻은 SecurityManager &lt;code&gt;sm&lt;/code&gt; 을 사용한 샘플 호출 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fc365efffcfa5fe96ee6d3621be5f1681a395b54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;childNodes&lt;/code&gt;&lt;code&gt;NodeLists&lt;/code&gt; are equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same length and contain equal nodes at the same index. Note that normalization can affect equality; to avoid this, nodes should be normalized before being compared.</source>
          <target state="translated">&lt;code&gt;childNodes&lt;/code&gt; 에 &lt;code&gt;NodeLists&lt;/code&gt; 는 동일하다. 이것은 둘 다 &lt;code&gt;null&lt;/code&gt; 이거나 길이가 같고 동일한 인덱스에 동일한 노드를 포함합니다. 정규화는 동등성에 영향을 미칠 수 있습니다. 이를 방지하려면 비교하기 전에 노드를 정규화해야합니다.</target>
        </trans-unit>
        <trans-unit id="3a5d909660d723c346a03d0f41bd75687e11de0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cleanup&lt;/code&gt; handle will be passed one or two additional leading arguments. The first is the exception thrown during the execution of the &lt;code&gt;target&lt;/code&gt; handle, or &lt;code&gt;null&lt;/code&gt; if no exception was thrown. The second is the result of the execution of the &lt;code&gt;target&lt;/code&gt; handle, or, if it throws an exception, a &lt;code&gt;null&lt;/code&gt;, zero, or &lt;code&gt;false&lt;/code&gt; value of the required type is supplied as a placeholder. The second argument is not present if the &lt;code&gt;target&lt;/code&gt; handle has a &lt;code&gt;void&lt;/code&gt; return type. (Note that, except for argument type conversions, combinators represent &lt;code&gt;void&lt;/code&gt; values in parameter lists by omitting the corresponding paradoxical arguments, not by inserting &lt;code&gt;null&lt;/code&gt; or zero values.)</source>
          <target state="translated">&lt;code&gt;cleanup&lt;/code&gt; 핸들은 하나 개 또는 두 개의 추가 주요 인수를 전달됩니다. 첫 번째는 &lt;code&gt;target&lt;/code&gt; 핸들을 실행하는 동안 발생한 예외 이거나 예외가 발생하지 않은 경우 &lt;code&gt;null&lt;/code&gt; 입니다. 두 번째는 &lt;code&gt;target&lt;/code&gt; 핸들 의 실행 결과 이거나 예외가 발생하는 경우 &lt;code&gt;null&lt;/code&gt; , 0 또는 &lt;code&gt;false&lt;/code&gt; 경우 필요한 유형 false 값이 자리 표시 자로 제공됩니다. &lt;code&gt;target&lt;/code&gt; 핸들에 &lt;code&gt;void&lt;/code&gt; 반환 유형 이있는 경우 두 번째 인수는 존재하지 않습니다 . (인수 유형 변환을 제외하고 결합자는 &lt;code&gt;void&lt;/code&gt; 를 나타냅니다. 자는 해당 역설적 인수를 생략하여 매개 변수 목록의 값을 &lt;code&gt;null&lt;/code&gt; 또는 0 값.)</target>
        </trans-unit>
        <trans-unit id="8a37143162f383e40541a3c536a0bad8cdbdac3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clear&lt;/code&gt; method sets calendar field(s) undefined. &lt;code&gt;GregorianCalendar&lt;/code&gt; uses the following default value for each calendar field if its value is undefined.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; 방법 세트 달력 필드 (들) 정의되지 않은. &lt;code&gt;GregorianCalendar&lt;/code&gt; 는 값이 정의되지 않은 경우 각 달력 필드에 다음 기본값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="23c5d3ad8f50c87806bd51026f62bd3f83bef13e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clientProperty&lt;/code&gt; dictionary is not intended to support large scale extensions to JComponent nor should be it considered an alternative to subclassing when designing a new component.</source>
          <target state="translated">그만큼 &lt;code&gt;clientProperty&lt;/code&gt; 의의 사전 JComponent 에의 대규모 확장 기능을 지원하는 것은 아니다 않으며 새로운 구성 요소를 설계 할 때 서브 클래스에 대한 대안을 생각해야한다.</target>
        </trans-unit>
        <trans-unit id="eca26951481b1fa79d4de62013b67d4d4f363ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clockSequence&lt;/code&gt; value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.</source>
          <target state="translated">&lt;code&gt;clockSequence&lt;/code&gt; 의 값이 UUID 다음이 방법에 UnsupportedOperationException을 발생 시간 기반 UUID 없으면 버전 타입 1 시간 기반 UUID, 만 의미가있다.</target>
        </trans-unit>
        <trans-unit id="17c69f5047e8b8edc7675c7afa6d967e75c7e9a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;CipherInputStream&lt;/code&gt; calls the &lt;code&gt;close&lt;/code&gt; method of its underlying input stream.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; 방법 &lt;code&gt;CipherInputStream&lt;/code&gt; 를는 부르는 &lt;code&gt;close&lt;/code&gt; 는 기본 입력 스트림의 방법.</target>
        </trans-unit>
        <trans-unit id="8d16e59d74dedefbb9dca52dccbe54c8fd4fa9e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;flush&lt;/code&gt; method, and then calls the &lt;code&gt;close&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; 방법 &lt;code&gt;FilterOutputStream&lt;/code&gt; 그 호출 &lt;code&gt;flush&lt;/code&gt; 메소드를 호출하고 &lt;code&gt;close&lt;/code&gt; 해당 기본 스트림의 출력 방법.</target>
        </trans-unit>
        <trans-unit id="7e09c5caa8f665f3b57f5f5f897465a41503642c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 의 &lt;code&gt;close&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b8a4c592a0ecb263805a474537d609748a764ffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; 의 &lt;code&gt;close&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2531be3b89a10105b22c29564d26639ca4a592a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;color&lt;/code&gt; corresponds to a hex &lt;code&gt;String&lt;/code&gt; as understood by &lt;code&gt;Color.decode&lt;/code&gt;. For example, one of the &lt;code&gt;name-color&lt;/code&gt; pairs is &lt;code&gt;
 &quot;desktop&quot;-&quot;#005C5C&quot;&lt;/code&gt;. This corresponds to the &lt;code&gt;
 SystemColor&lt;/code&gt; field &lt;code&gt;desktop&lt;/code&gt;, with a color value of &lt;code&gt;new Color(0x005C5C)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;color&lt;/code&gt; 헥스에 해당 &lt;code&gt;String&lt;/code&gt; 에 의해 이해되는 &lt;code&gt;Color.decode&lt;/code&gt; . 예를 들어 &lt;code&gt;name-color&lt;/code&gt; 쌍 중 하나 는 &lt;code&gt; &quot;desktop&quot;-&quot;#005C5C&quot;&lt;/code&gt; 입니다. 이것은 &lt;code&gt; SystemColor&lt;/code&gt; 필드에 해당합니다. &lt;code&gt;desktop&lt;/code&gt; 색상 값이 &lt;code&gt;new Color(0x005C5C)&lt;/code&gt; desktop에 .</target>
        </trans-unit>
        <trans-unit id="afcf8a2a1d1719caacb80cda4d490e70edec9e26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;com.sun.jndi.dns.timeout.initial&lt;/code&gt; property, if set, specifies the number of milliseconds to use as the initial timeout period (i.e., before any doubling). If this property has not been set, the default initial timeout is 1000 milliseconds.</source>
          <target state="translated">&lt;code&gt;com.sun.jndi.dns.timeout.initial&lt;/code&gt; 속성은 설정하면 (즉 2 배로하기 전의) 초기 타임 아웃 시간으로 사용 시간 (밀리 초)을 지정합니다. 이 속성이 설정되지 않은 경우 기본 초기 제한 시간은 1000 밀리 초입니다.</target>
        </trans-unit>
        <trans-unit id="745458c6629b6652e699dc150f6db6c585c3e422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;com.sun.jndi.dns.timeout.retries&lt;/code&gt; property, if set, specifies the number of times to retry each server using the exponential backoff algorithm described previously. If this property has not been set, the default number of retries is 4.</source>
          <target state="translated">&lt;code&gt;com.sun.jndi.dns.timeout.retries&lt;/code&gt; 의 속성이 설정된 경우, 횟수 지수 백 오프 알고리즘을 사용하여 전술 한 각 서버를 재 시도 지정한다. 이 속성이 설정되지 않은 경우 기본 재시도 횟수는 4입니다.</target>
        </trans-unit>
        <trans-unit id="272a141fe34e23fe1ed9cd1611d645995f50e5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combine&lt;/code&gt; method investigates the two input arrays of ProtectionDomains and returns a single array containing the updated ProtectionDomains. In the simplest case, the &lt;code&gt;combine&lt;/code&gt; method merges the two stacks into one. In more complex cases, the &lt;code&gt;combine&lt;/code&gt; method returns a modified stack of ProtectionDomains. The modification may have added new ProtectionDomains, removed certain ProtectionDomains, or simply updated existing ProtectionDomains. Re-ordering and other optimizations to the ProtectionDomains are also permitted. Typically the &lt;code&gt;combine&lt;/code&gt; method bases its updates on the information encapsulated in the &lt;code&gt;DomainCombiner&lt;/code&gt;.</source>
          <target state="translated">은 &lt;code&gt;combine&lt;/code&gt; 방식 조사한다 ProtectionDomain는 두 입력 배열 및 업데이트 된 ProtectionDomain 함유 한 배열을 반환한다. 가장 간단한 경우, &lt;code&gt;combine&lt;/code&gt; 메소드는 두 스택을 하나로 병합합니다. 더 복잡한 경우, &lt;code&gt;combine&lt;/code&gt; 메서드는 수정 된 ProtectionDomain 스택을 반환합니다. 수정으로 새 ProtectionDomain이 추가되었거나 특정 ProtectionDomain이 제거되었거나 기존 ProtectionDomain이 단순히 업데이트되었을 수 있습니다. ProtectionDomain에 대한 재정렬 및 ​​기타 최적화도 허용됩니다. 일반적으로 &lt;code&gt;combine&lt;/code&gt; 메소드는 &lt;code&gt;DomainCombiner&lt;/code&gt; 에 캡슐화 된 정보를 기반으로 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="44c35d21bf67cf9c4f42525ec0fe6621b0e16aaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;command&lt;/code&gt; property may not be needed if the &lt;code&gt;RowSet&lt;/code&gt; object gets its data from a source that does not support commands, such as a spreadsheet or other tabular file. Thus, this property is optional and may be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">다음의 경우 &lt;code&gt;command&lt;/code&gt; 속성이 필요하지 않을 수 있습니다. &lt;code&gt;RowSet&lt;/code&gt; 객체가 같은 스프레드 시트 나 다른 테이블 형식의 파일로 명령을 지원하지 않는 소스로부터 데이터를 가져옵니다. 따라서이 속성은 선택 사항이며 &lt;code&gt;null&lt;/code&gt; 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="928da17633454632f0bf287b021e570d64611c36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;#end(boolean)&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;code&gt;completed&lt;/code&gt; 받는 인수 &lt;a href=&quot;#end(boolean)&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt; 메소드에 는 I / O 작업이 실제로 완료되었는지 여부, 즉 호출자에게 표시되는 효과가 있는지 여부를 알려줍니다. 예를 들어 바이트를 읽는 작업의 경우이 인수는 일부 바이트가 실제로 호출자의 대상 버퍼로 전송 된 경우에만 &lt;code&gt;true&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="7a90cfbc00ca33b6d145e6807e96aa2002b85303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;code&gt;completed&lt;/code&gt; 받는 인수 &lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt; 메소드는 호출자에게 표시하는 어떤 효과를 가지고 있는지 여부를 I / O 작업이 실제로, 즉, 완료 여부를 알려줍니다. 예를 들어, 바이트를 읽는 작업의 경우, 일부 바이트가 실제로 호출자의 대상 버퍼로 전송 된 경우에만 이 인수가 &lt;code&gt;true&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="a5d94cf564353166be1db9cb4e8271b8ded55663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;components&lt;/code&gt; array.</source>
          <target state="translated">그만큼 &lt;code&gt;components&lt;/code&gt; 어레이.</target>
        </trans-unit>
        <trans-unit id="15e9d479711030667ddbf21dea87568e74553c2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;intersects&lt;/code&gt; methods consider the interior of a &lt;code&gt;Shape&lt;/code&gt; to be the area it encloses as if it were filled. This means that these methods consider unclosed shapes to be implicitly closed for the purpose of determining if a shape contains or intersects a rectangle or if a shape contains a point.</source>
          <target state="translated">은 &lt;code&gt;contains&lt;/code&gt; 하고 &lt;code&gt;intersects&lt;/code&gt; 방법은 내부 고려 &lt;code&gt;Shape&lt;/code&gt; 그것을가 작성하는 것처럼 둘러싸는 영역이 될 수 있습니다. 즉, 이러한 메서드는 모양이 사각형을 포함하거나 교차하는지 또는 모양에 점이 포함되어 있는지 확인하기 위해 닫히지 않은 모양이 암시 적으로 닫힌 것으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="3114ba8be141b590dba202ffb1a396b416bb2f2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contentPane&lt;/code&gt; fills the entire viewable area, minus the &lt;code&gt;menuBar&lt;/code&gt;, if present.</source>
          <target state="translated">&lt;code&gt;contentPane&lt;/code&gt; 전체 가시 영역을 채우고, 마이너스 &lt;code&gt;menuBar&lt;/code&gt; 존재하는 경우.</target>
        </trans-unit>
        <trans-unit id="f41c89acf8d6260cc4c3edf1c8a3be1a487a118d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;countMatches&lt;/code&gt; operation can be invoked as follows:</source>
          <target state="translated">&lt;code&gt;countMatches&lt;/code&gt; 의 다음과 같은 작업을 호출 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="72616ce87a153d98c6a948602b30731bd218fc29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createMBeanServer&lt;/code&gt; permission implies the &lt;code&gt;newMBeanServer&lt;/code&gt; permission.</source>
          <target state="translated">&lt;code&gt;createMBeanServer&lt;/code&gt; 의 권한은 의미 &lt;code&gt;newMBeanServer&lt;/code&gt; 권한을.</target>
        </trans-unit>
        <trans-unit id="367254891eef16003973d17f79d44e07bdd79f5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;d.width&lt;/code&gt; and &lt;code&gt;d.height&lt;/code&gt; values are automatically enlarged if either is less than the minimum size as specified by previous call to &lt;code&gt;setMinimumSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;d.width&lt;/code&gt; 및 &lt;code&gt;d.height&lt;/code&gt; 가 이전 호출에 의해 지정된 하나 적은 최소 크기 이하인 경우 값이 자동으로 확대된다 &lt;code&gt;setMinimumSize&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bdee408adddec1cc773279770c4eb9ef77c9c337" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; is always a legal UTF-16 sequence.</source>
          <target state="translated">그만큼 &lt;code&gt;data&lt;/code&gt; 항상 법적 UTF-16 순서입니다.</target>
        </trans-unit>
        <trans-unit id="f4549daee89cce421917747661b9b9dbdbc5d4cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deregister&lt;/code&gt; method is intended only to be used by JDBC Drivers and not by applications. JDBC drivers are recommended to not implement &lt;code&gt;DriverAction&lt;/code&gt; in a public class. If there are active connections to the database at the time that the &lt;code&gt;deregister&lt;/code&gt; method is called, it is implementation specific as to whether the connections are closed or allowed to continue. Once this method is called, it is implementation specific as to whether the driver may limit the ability to create new connections to the database, invoke other &lt;code&gt;Driver&lt;/code&gt; methods or throw a &lt;code&gt;SQLException&lt;/code&gt;. Consult your JDBC driver's documentation for additional information on its behavior.</source>
          <target state="translated">&lt;code&gt;deregister&lt;/code&gt; 메소드는 것입니다 JDBC 드라이버가 아닌 응용 프로그램에서 사용 할 수 있습니다. JDBC 드라이버는 공용 클래스에서 &lt;code&gt;DriverAction&lt;/code&gt; 을 구현하지 않는 것이 좋습니다 . &lt;code&gt;deregister&lt;/code&gt; 메서드가 호출 될 때 데이터베이스에 대한 활성 연결이있는 경우 연결이 닫혔는지 또는 계속할 수 있는지에 대한 구현에 따라 다릅니다. 이 메서드가 호출되면 드라이버가 데이터베이스에 대한 새 연결을 생성하고 다른 &lt;code&gt;Driver&lt;/code&gt; 호출하는 기능을 제한 할 수 있는지 여부는 구현에 따라 다릅니다. 하거나 메서드를 하거나 &lt;code&gt;SQLException&lt;/code&gt; 을 발생 . 동작에 대한 추가 정보는 JDBC 드라이버의 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5b8e66ca8dcc60e252a66649960d4c45b1465623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;descriptor&lt;/code&gt; can contain entries that will define the values returned by certain methods of this class, as explained in the &lt;a href=&quot;package-summary#constraints&quot;&gt; package description&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;descriptor&lt;/code&gt; 에서 설명한 바와 같이,이 클래스의 특정 방법에 의해 리턴 된 값을 정의 할 수있는 항목을 포함 &lt;a href=&quot;package-summary#constraints&quot;&gt;패키지 안내&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e74408bd8afc062ff7d9cfe3aab2c13ea6f53b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 인수 배열이 아닌 오브젝트를 지칭한다.</target>
        </trans-unit>
        <trans-unit id="8294f1f3beefad7591b5cc3ea0551866cab7aae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;destPos&lt;/code&gt; 가의 인수가 부의이다.</target>
        </trans-unit>
        <trans-unit id="71160060862e661265f3fd734b0330aa232357eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;detail&lt;/code&gt; attribute inherited from &lt;code&gt;UIEvent&lt;/code&gt; indicates the number of times a mouse button has been pressed and released over the same screen location during a user action. The attribute value is 1 when the user begins this action and increments by 1 for each full sequence of pressing and releasing. If the user moves the mouse between the mousedown and mouseup the value will be set to 0, indicating that no click is occurring.</source>
          <target state="translated">&lt;code&gt;detail&lt;/code&gt; 로부터 상속 속성 &lt;code&gt;UIEvent&lt;/code&gt; 마우스 버튼을 누르고 사용자 동작 중에 동일 화면 위에 위치 해제 된 횟수를 나타낸다. 사용자가이 작업을 시작할 때 속성 값은 1이고 눌렀다 놓기의 전체 시퀀스마다 1 씩 증가합니다. 사용자가 mousedown과 mouseup 사이에서 마우스를 움직이면 값이 0으로 설정되어 클릭이 발생하지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2a960f617370308fb92badef083ce1edd73bfd82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; method can be called once for a given number of updates. After &lt;code&gt;digest&lt;/code&gt; has been called, the MessageDigest object is reset to its initialized state.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; 방법은 업데이트 주어진 수에 대해 한 번 호출 할 수 있습니다. &lt;code&gt;digest&lt;/code&gt; 가 호출 된 후 MessageDigest 객체는 초기화 된 상태로 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="e1dde7d27adbf8e6cef3b9bbcdbc4cbcc2ad96bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; format can represent all consecutive integers in the range -2&lt;sup&gt;53&lt;/sup&gt; to 2&lt;sup&gt;53&lt;/sup&gt;. If the pipeline has more than 2&lt;sup&gt;53&lt;/sup&gt; values, the divisor in the average computation will saturate at 2&lt;sup&gt;53&lt;/sup&gt;, leading to additional numerical errors.</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 형식은 범위의 모든 연속적인 정수를 나타낼 수 -2 &lt;sup&gt;(53)&lt;/sup&gt; 2 &lt;sup&gt;(53)&lt;/sup&gt; . 파이프 라인에 2 &lt;sup&gt;53&lt;/sup&gt; 개 이상의 값이있는 경우 평균 계산의 제수가 2 &lt;sup&gt;53&lt;/sup&gt; 에서 포화 되어 추가적인 수치 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cad4be16e75ad0f3392aac98141ceaed42bece6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; value that is closer than any other to</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 가까이있는 다른보다 값</target>
        </trans-unit>
        <trans-unit id="1e3ae85b07a531401bb2890e79fc22f20146cf1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;draw3DRect&lt;/code&gt; and &lt;code&gt;fill3DRect&lt;/code&gt; methods were implemented in terms of the &lt;code&gt;drawLine&lt;/code&gt; and &lt;code&gt;fillRect&lt;/code&gt; methods in the &lt;code&gt;Graphics&lt;/code&gt; class which would predicate their behavior upon the current &lt;code&gt;Stroke&lt;/code&gt; and &lt;code&gt;Paint&lt;/code&gt; objects in a &lt;code&gt;Graphics2D&lt;/code&gt; context. This class overrides those implementations with versions that use the current &lt;code&gt;Color&lt;/code&gt; exclusively, overriding the current &lt;code&gt;Paint&lt;/code&gt; and which uses &lt;code&gt;fillRect&lt;/code&gt; to describe the exact same behavior as the preexisting methods regardless of the setting of the current &lt;code&gt;Stroke&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;draw3DRect&lt;/code&gt; 와 &lt;code&gt;fill3DRect&lt;/code&gt; 방법의 측면에서 구현 된 &lt;code&gt;drawLine&lt;/code&gt; 와 &lt;code&gt;fillRect&lt;/code&gt; 할 의 방법 &lt;code&gt;Graphics&lt;/code&gt; 현재에 자신의 행동을 술어 것이다 클래스 &lt;code&gt;Stroke&lt;/code&gt; 및 &lt;code&gt;Paint&lt;/code&gt; A의 객체 &lt;code&gt;Graphics2D&lt;/code&gt; 문맥. 이 클래스는 현재 &lt;code&gt;Color&lt;/code&gt; 를 독점적으로 사용하는 버전으로 이러한 구현을 재정의하고 현재 &lt;code&gt;Paint&lt;/code&gt; 를 재정의하고 &lt;code&gt;fillRect&lt;/code&gt; 를 사용 하여 현재의 설정에 관계없이 기존 메서드와 똑같은 동작을 설명합니다. &lt;code&gt;Stroke&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f02492238ec3eeb18bc396353d14b09af775519" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;charsequence#length()&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; 의 인수보다 더 큰 수 또는 동일해야 &lt;code&gt;0&lt;/code&gt; , 미만 또는 동일 &lt;a href=&quot;charsequence#length()&quot;&gt;길이&lt;/a&gt; 이 시퀀스.</target>
        </trans-unit>
        <trans-unit id="99457e6b4813c6110cd28c3bdc215ba87cac93e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; 의 인수보다 크거나 동일해야 &lt;code&gt;0&lt;/code&gt; , 미만 또는 동일 &lt;a href=&quot;stringbuffer#length--&quot;&gt;길이의&lt;/a&gt; 이 시퀀스.</target>
        </trans-unit>
        <trans-unit id="cf3f3c8673cb205a88acf65cbe9d481cc7bd21e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; 의 인수보다 크거나 동일해야 &lt;code&gt;0&lt;/code&gt; , 미만 또는 동일 &lt;a href=&quot;stringbuilder#length--&quot;&gt;길이의&lt;/a&gt; 이 시퀀스.</target>
        </trans-unit>
        <trans-unit id="57b48e0bd69c0d96f6dab5758abac0f4d57b113a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoded&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">다음과 같은 경우 &lt;code&gt;encoded&lt;/code&gt; 인수가 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7f825d64728b91255aebca414eb9e4365aeec903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining undecoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; 의 파라미터는 호출자가 주어진 입력 버퍼에 포함 된 것을 넘어 추가 입력을 제공 할 수 있는지에이 방법을 조언한다. 추가 입력을 제공 할 가능성이있는 경우 호출자는 이 매개 변수에 대해 &lt;code&gt;false&lt;/code&gt; 를 전달해야합니다 . 추가 입력을 제공 할 가능성이 없으면 호출자는 &lt;code&gt;true&lt;/code&gt; 를 전달해야 합니다 . 한 번의 호출로 &lt;code&gt;false&lt;/code&gt; 을 전달 하고 나중에 더 이상 입력이 실제로 불가능하다는 것을 발견하는 것은 잘못이 아니며 실제로는 매우 일반적 입니다. 그러나 일련의 호출에서이 메소드의 최종 호출은 항상 &lt;code&gt;true&lt;/code&gt; 를 전달 하여 디코딩되지 않은 나머지 입력이 변형 된 것으로 처리되도록하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="fabf47fc50497b896963aa9019b8b35e3fbde409" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining unencoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; 의 파라미터는 호출자가 주어진 입력 버퍼에 포함 된 것을 넘어 추가 입력을 제공 할 수 있는지에이 방법을 조언한다. 추가 입력을 제공 할 가능성이있는 경우 호출자는 이 매개 변수에 대해 &lt;code&gt;false&lt;/code&gt; 를 전달해야합니다 . 추가 입력을 제공 할 가능성이 없으면 호출자는 &lt;code&gt;true&lt;/code&gt; 를 전달해야 합니다 . 한 번의 호출로 &lt;code&gt;false&lt;/code&gt; 을 전달 하고 나중에 더 이상 입력이 실제로 불가능하다는 것을 발견하는 것은 잘못이 아니며 실제로는 매우 일반적 입니다. 그러나 일련의 호출에서이 메소드의 최종 호출은 항상 &lt;code&gt;true&lt;/code&gt; 를 전달 하여 인코딩되지 않은 나머지 입력이 변형 된 것으로 처리되도록하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="ec11602184cb13ced71453ae56dda30935562022" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entities&lt;/code&gt;&lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal.</source>
          <target state="translated">&lt;code&gt;entities&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; 동일하다.</target>
        </trans-unit>
        <trans-unit id="ec561af054842027cb5a40ad05b4b5c7e68a8699" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entry&lt;/code&gt; argument is valid only for the duration of the invocation. Using &lt;code&gt;entry&lt;/code&gt; after the call returns results in undefined behavior.</source>
          <target state="translated">&lt;code&gt;entry&lt;/code&gt; 인수는 호출의 기간 동안 유효합니다. &lt;code&gt;entry&lt;/code&gt; 사용호출 후 을 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="759ffc9229118351f3a52e836520820e1dc112e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals()&lt;/code&gt; method for an enumeration class just does a test for identical objects (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">열거 클래스 의 &lt;code&gt;equals()&lt;/code&gt; 메소드는 동일한 객체 ( &lt;code&gt;==&lt;/code&gt; )를 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="b29ad1a11acf214b8866d6a3f630b101a0ca3675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to the same object (&lt;code&gt;x == y&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 클래스 의 &lt;code&gt;equals&lt;/code&gt; 메소드는 객체에 대해 가장 구별 가능한 등가 관계를 구현합니다. 즉, null 이외의 &lt;code&gt;true&lt;/code&gt; 조치 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 의 경우 ,이 메소드는 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 같은 객체를 참조하는 경우에 한해 true를 돌려줍니다 ( &lt;code&gt;x == y&lt;/code&gt; 의 값이 &lt;code&gt;true&lt;/code&gt; 입니다 ).</target>
        </trans-unit>
        <trans-unit id="387966673ba7ec974b34376b9ba2a99dc7f3ff88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method implements an equivalence relation on non-null object references:</source>
          <target state="translated">는 &lt;code&gt;equals&lt;/code&gt; 방법의 구현을 null 이외의 객체 참조에서의 동치 관계를 :</target>
        </trans-unit>
        <trans-unit id="5611c44255183f5d91cb4e6ea30bca9c8f5bc511" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;estimateDepth&lt;/code&gt; specifies the estimate number of stack frames this &lt;code&gt;StackWalker&lt;/code&gt; will traverse that the &lt;code&gt;StackWalker&lt;/code&gt; could use as a hint for the buffer size.</source>
          <target state="translated">&lt;code&gt;estimateDepth&lt;/code&gt; 는 이 스택 프레임의 추정치 번호 지정 &lt;code&gt;StackWalker&lt;/code&gt; 가 것을 통과한다 &lt;code&gt;StackWalker&lt;/code&gt; 을 버퍼 크기에 대한 힌트로서 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="542970e582dd284bb20814dd3b131537943f85a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot; &quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; 를의 문자열이 상기 타겟 메소드로 전달받는 이벤트 객체의 값을 추출하는 데 사용된다. 일반적인 경우는 target 메서드가 인수를받지 않는 경우이며,이 경우 &lt;code&gt;eventPropertyName&lt;/code&gt; 에 null 값을 사용해야합니다 . 또는 들어오는 이벤트 개체를 대상 메서드에 직접 전달하려면 빈 문자열을 사용하십시오. &lt;code&gt;eventPropertyName&lt;/code&gt; 문자열 의 형식은 각 메서드 또는 속성이 들어오는 이벤트 개체에서 시작하여 이전 메서드에서 반환 된 값에 적용되는 메서드 또는 속성의 시퀀스입니다. 구문은 다음과 같습니다. &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; 여기서 &lt;code&gt;propertyName&lt;/code&gt; 은 메서드 또는 속성과 일치합니다. 예를 들어, &lt;code&gt;point&lt;/code&gt; 을 추출하려면 &lt;code&gt;MouseEvent&lt;/code&gt; 의 속성에서 &lt;code&gt;&quot;point&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; 를 &lt;code&gt;eventPropertyName&lt;/code&gt; 으로 사용할 수 있습니다 . a로부터 &quot;텍스트&quot;속성 추출하려면 &lt;code&gt;MouseEvent&lt;/code&gt; 로모그래퍼 &lt;code&gt;JLabel&lt;/code&gt; 소스 사용으로 다음 중 하나 &lt;code&gt;eventPropertyName&lt;/code&gt; 를 : &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; , &lt;code&gt;&quot;getSource.text&quot; &quot;getSource.getText&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; . 메소드를 찾을 수 없거나 메소드 호출의 일부로 예외가 생성되면 디스패치 시간에 &lt;code&gt;RuntimeException&lt;/code&gt; 이 발생합니다. 예를 들어 수신 이벤트 객체가 null 인 경우 &lt;code&gt;eventPropertyName&lt;/code&gt; 은 null이 아니고 비어 있지 않습니다. &lt;code&gt;RuntimeException&lt;/code&gt; throw됩니다.</target>
        </trans-unit>
        <trans-unit id="979f15807ff26fd3232fc39f57a589f6474444ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt;&lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; 를의 문자열이 상기 타겟 메소드로 전달받는 이벤트 객체의 값을 추출하는 데 사용된다. 일반적인 경우는 대상 메소드가 인수를 사용하지 않으며,이 경우 &lt;code&gt;eventPropertyName&lt;/code&gt; 에 null 값을 사용해야합니다 . 또는 수신 이벤트 오브젝트를 대상 메소드에 직접 전달하려면 빈 문자열을 사용하십시오. &lt;code&gt;eventPropertyName&lt;/code&gt; 문자열 의 형식은 각 메소드 또는 특성이 수신 이벤트 오브젝트에서 시작하여 앞의 메소드가 리턴 한 값에 적용되는 일련의 메소드 또는 특성입니다. 구문은 다음과 같습니다. &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; 여기서 &lt;code&gt;propertyName&lt;/code&gt; 은 메소드 또는 특성과 일치합니다. 예를 들어 &lt;code&gt;point&lt;/code&gt; 을 추출하려면 &lt;code&gt;MouseEvent&lt;/code&gt; 의 속성에서 &lt;code&gt;&quot;point&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; 를 &lt;code&gt;eventPropertyName&lt;/code&gt; 으로 사용할 수 있습니다 . a로부터 &quot;텍스트&quot;속성 추출하려면 &lt;code&gt;MouseEvent&lt;/code&gt; 로모그래퍼 &lt;code&gt;JLabel&lt;/code&gt; 소스 사용으로 다음 중 하나 &lt;code&gt;eventPropertyName&lt;/code&gt; 를 : &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; , &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt; &lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; . 메소드를 찾을 수 없거나 메소드 호출의 일부로 예외가 생성되면 디스패치시 &lt;code&gt;RuntimeException&lt;/code&gt; 이 발생합니다. 예를 들어, 수신 이벤트 오브젝트가 널이고 &lt;code&gt;eventPropertyName&lt;/code&gt; null이 아니고 비어 있지 않은 경우, &lt;code&gt;RuntimeException&lt;/code&gt; 가 Throw됩니다.</target>
        </trans-unit>
        <trans-unit id="11b7dfa61c07755540a7b91b193348ac328193f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method executes an SQL statement and indicates the form of the first result. You must then use the methods &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt; to retrieve the result, and &lt;code&gt;getMoreResults&lt;/code&gt; to move to any subsequent result(s).</source>
          <target state="translated">는 &lt;code&gt;execute&lt;/code&gt; 방법은 SQL 문을 실행하고, 결과의 첫 번째 형태를 나타낸다. 그런 다음 &lt;code&gt;getResultSet&lt;/code&gt; 또는 &lt;code&gt;getUpdateCount&lt;/code&gt; 메소드를 사용하여 결과를 검색하고 &lt;code&gt;getMoreResults&lt;/code&gt; 를 사용하여 후속 결과로 이동해야합니다.</target>
        </trans-unit>
        <trans-unit id="05464faee96a489e25104ce5867b437da02b7e6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 방법은 그 이름과 동일한 방법 발견 &lt;code&gt;methodName&lt;/code&gt; 로의 속성을, 상기 대상에서 메소드를 호출한다.</target>
        </trans-unit>
        <trans-unit id="881d0e5738f41f203ab7920ce95659722dd4768f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../../../java.base/java/lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 방법은 그 이름과 동일한 방법 발견 &lt;code&gt;methodName&lt;/code&gt; 로의 속성을, 상기 대상에서 메소드를 호출한다. 대상의 클래스가 주어진 이름으로 많은 메소드를 정의 할 때 구현은 Java 언어 사양 (15.11)에 지정된 알고리즘을 사용하여 가장 구체적인 메소드를 선택해야합니다. 대상 및 인수의 동적 클래스는 컴파일 타임 유형 정보 대신 사용되며 &lt;a href=&quot;../../../java.base/java/lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt; 클래스 자체 와 마찬가지로 기본 값과 관련 래퍼 클래스 간의 변환은 내부적으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="7b4b06ad05dfb91d784c6607e33529a4e06af587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 방법은 그 이름과 동일한 방법 발견 &lt;code&gt;methodName&lt;/code&gt; 로의 속성을, 상기 대상에서 메소드를 호출한다. 대상의 클래스가 주어진 이름으로 많은 메소드를 정의 할 때 구현시 Java 언어 사양 (15.11)에 지정된 알고리즘을 사용하여 가장 구체적인 메소드를 선택해야합니다. 대상 및 인수의 동적 클래스는 컴파일 타임 유형 정보 대신 사용되며 &lt;a href=&quot;../lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt; 클래스 자체 와 같이 기본 값과 관련 래퍼 클래스 간의 변환이 내부적으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="8ad6c0c213db0ee82bf11ddff27fdf95642bb749" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method may use the following properties to create a connection for reading data: url, data source name, user name, password, transaction isolation, and type map. The &lt;code&gt;execute&lt;/code&gt; method may use the following properties to create a statement to execute a command: command, read only, maximum field size, maximum rows, escape processing, and query timeout.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; URL, 데이터 소스 이름, 사용자 이름, 암호, 트랜잭션 격리 및 형태 맵 : 방법은 읽기 데이터에 대한 연결을 만들려면 다음 속성을 사용할 수 있습니다. &lt;code&gt;execute&lt;/code&gt; 만, 최대 필드 크기, 최대 행, 이스케이프 처리, 쿼리 시간 제한을 읽고 명령 방법은 명령을 실행하기 위해 문을 작성하려면 다음과 같은 속성을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2e86b01e43a8878ea8710bd314038dcf77ab8f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method returns a &lt;code&gt;boolean&lt;/code&gt; to indicate the form of the first result. You must call either the method &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt; to retrieve the result; you must call &lt;code&gt;getMoreResults&lt;/code&gt; to move to any subsequent result(s).</source>
          <target state="translated">는 &lt;code&gt;execute&lt;/code&gt; 메소드가 복귀에게 &lt;code&gt;boolean&lt;/code&gt; 첫번째 결과의 형태를 나타 내기 위해. 결과를 검색하려면 &lt;code&gt;getResultSet&lt;/code&gt; 또는 &lt;code&gt;getUpdateCount&lt;/code&gt; 메소드를 호출해야합니다 . 후속 결과로 이동하려면 &lt;code&gt;getMoreResults&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="721571d52ff7950b67b214b688c61b64a75961c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that creates new threads as needed to execute tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. It may reuse previously constructed threads when they are available.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; 매개 변수는있다 &lt;code&gt;ExecutorService&lt;/code&gt; 를 I / 그룹의 비동기 채널에서 시작된 작업에 대한 O 이벤트 및 발송 완료 결과를 처리하기 위해 제출 된 작업을 실행하기 위해 필요에 따라 새 스레드를 생성합니다. 사용 가능한 경우 이전에 구성된 스레드를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec1467cb33e94fd2c0bb533c599fa01ae6a0656e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that executes tasks submitted to dispatch completion results for operations initiated on asynchronous channels in the group.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; 매개 변수는이다 &lt;code&gt;ExecutorService&lt;/code&gt; 를 실행하는 작업은 그룹에서 비동기 채널을 개시 조작에 송출 완료 결과 제출있다.</target>
        </trans-unit>
        <trans-unit id="340e8f3277e0a9554138eaf4e4d1386486ab2daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; 매개 변수는있다 &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; 에&lt;/a&gt; 작업이 I / 채널을 결과에 시작한 작업 O 이벤트 및 발송 완료 결과를 처리하기 위해 제출되는. 이러한 작업의 특성은 구현에 따라 다르므로 &lt;code&gt;Executor&lt;/code&gt; 를 구성 할 때주의해야합니다 . 최소한 제한되지 않은 작업 대기열을 지원해야하며 &lt;a href=&quot;../../util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt; 메서드 의 호출자 스레드에서 작업을 실행해서는 안됩니다 . 채널이 열려있는 동안 실행기 서비스를 종료하면 지정되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f3b206390268e595a7543c9f72d6571233bef9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; 매개 변수는있다 &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; 에&lt;/a&gt; 작업이 I / 채널을 결과에 시작한 작업 O 이벤트 및 발송 완료 결과를 처리하기 위해 제출되는. 이러한 작업의 특성은 구현에 따라 다르므로 &lt;code&gt;Executor&lt;/code&gt; 를 구성 할 때는주의를 기울여야합니다 . 최소한 무제한 작업 대기열을 지원해야하며 &lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt; 메소드 의 호출자 스레드에서 태스크를 실행하지 않아야합니다 . 채널이 열린 상태에서 실행기 서비스를 종료하면 지정되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9a348a5e6c50ba5a16fcb50db730eca7f5277712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt; has been called and the security manager has permitted the exit operation to take place.</source>
          <target state="translated">&lt;code&gt;Runtime&lt;/code&gt; 클래스 의 &lt;code&gt;exit&lt;/code&gt; 메소드 가 호출되었으며 보안 관리자가 엑시트 조작을 허용했습니다.</target>
        </trans-unit>
        <trans-unit id="54da7fdc8d08868a250106136d8727592f95e4ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extraExports&lt;/code&gt; parameter is the map of additional packages to export. The &lt;code&gt;extraOpens&lt;/code&gt; parameter is the map of additional packages to open. In both cases, the map key is the fully-qualified name of the package as defined in section 6.5.3 of</source>
          <target state="translated">&lt;code&gt;extraExports&lt;/code&gt; 의 매개 변수는 수출 추가 패키지의지도입니다. &lt;code&gt;extraOpens&lt;/code&gt; 의 매개 변수는 열 추가 패키지의지도입니다. 두 경우 모두 맵 키는 섹션 6.5.3에 정의 된 패키지의 정규화 된 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7fa94cd8aa6c313051f5bdb81ee487e8d422730c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extraProvides&lt;/code&gt; parameter is the additional service providers for the module to provide. The map key is the service type. The map value is the non-empty list of implementation types, each of which is a member of the module and an implementation of the service.</source>
          <target state="translated">&lt;code&gt;extraProvides&lt;/code&gt; 의 매개 변수는 모듈이 제공하기위한 추가 서비스 제공 업체입니다. 맵 키는 서비스 유형입니다. 맵 값은 구현 유형의 비어 있지 않은 목록이며, 각각은 모듈의 구성원이며 서비스의 구현입니다.</target>
        </trans-unit>
        <trans-unit id="676f7c17aac8c78e797db6e7abb083ffd0ff7492" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;failure&lt;/code&gt; RMI 런타임이 만들 수 없을 때 콜백이 호출 &lt;code&gt;ServerSocket&lt;/code&gt; 의 비아 &lt;code&gt;RMISocketFactory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="969956ed69e8a6235531b9a7241b70965fe5c99b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;. An &lt;code&gt;RMIFailureHandler&lt;/code&gt; is registered via a call to &lt;code&gt;RMISocketFacotry.setFailureHandler&lt;/code&gt;. If no failure handler is installed, the default behavior is to attempt to re-create the ServerSocket.</source>
          <target state="translated">&lt;code&gt;failure&lt;/code&gt; RMI 런타임이 만들 수 없을 때 콜백이 호출 &lt;code&gt;ServerSocket&lt;/code&gt; 의 비아 &lt;code&gt;RMISocketFactory&lt;/code&gt; . &lt;code&gt;RMIFailureHandler&lt;/code&gt; 는 의 호출에 의해 등록되어 &lt;code&gt;RMISocketFacotry.setFailureHandler&lt;/code&gt; . 실패 핸들러가 설치되지 않은 경우 기본 동작은 ServerSocket을 다시 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="59e0247c987779ab17259f2d9c40552dc79dbfdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;. An &lt;code&gt;RMIFailureHandler&lt;/code&gt; is registered via a call to &lt;code&gt;RMISocketFactory.setFailureHandler&lt;/code&gt;. If no failure handler is installed, the default behavior is to attempt to re-create the ServerSocket.</source>
          <target state="translated">&lt;code&gt;failure&lt;/code&gt; RMI 런타임이 만들 수 없을 때 콜백이 호출 &lt;code&gt;ServerSocket&lt;/code&gt; 의 비아 &lt;code&gt;RMISocketFactory&lt;/code&gt; . &lt;code&gt;RMIFailureHandler&lt;/code&gt; 는 의 호출에 의해 등록되어 &lt;code&gt;RMISocketFactory.setFailureHandler&lt;/code&gt; 의 . 실패 핸들러가 설치되지 않은 경우 기본 동작은 ServerSocket을 다시 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1a61775a7139e096b9fd0be3d2ad7ac6f1c956f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;family&lt;/code&gt; parameter is used to specify the &lt;a href=&quot;../../net/protocolfamily&quot;&gt;&lt;code&gt;ProtocolFamily&lt;/code&gt;&lt;/a&gt;. If the datagram channel is to be used for IP multicasting then this should correspond to the address type of the multicast groups that this channel will join.</source>
          <target state="translated">&lt;code&gt;family&lt;/code&gt; 매개 변수가 지정하는 데 사용됩니다 &lt;a href=&quot;../../net/protocolfamily&quot;&gt; &lt;code&gt;ProtocolFamily&lt;/code&gt; 을&lt;/a&gt; . 데이터 그램 채널을 IP 멀티 캐스팅에 사용하려면이 채널이 참가할 멀티 캐스트 그룹의 주소 유형에 해당해야합니다.</target>
        </trans-unit>
        <trans-unit id="f08c1804c0526409a1ecb2988cff36a97dc47de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; parameters may be null if and only if they are null in a listener to be removed.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; 및 &lt;code&gt;handback&lt;/code&gt; 들이 제거 될 수신기에서 널이다 경우만 파라미터 널이 될 수있다.</target>
        </trans-unit>
        <trans-unit id="e2e6442675b7f51f69f821df5212aa778b1fe932" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filtering()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Employee&lt;/code&gt;, to accumulate the employees in each department that have a salary above a certain threshold:</source>
          <target state="translated">&lt;code&gt;filtering()&lt;/code&gt; 등의 다운 스트림으로, 다중 레벨의 감소에 사용될 때 수집은 가장 유용 &lt;code&gt;groupingBy&lt;/code&gt; 또는 &lt;code&gt;partitioningBy&lt;/code&gt; . 예를 들어, 특정 임계 값을 초과하는 급여를 가진 각 부서의 직원을 누적하려면 &lt;code&gt;Employee&lt;/code&gt; 스트림이 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="e696db23567885b82ff4f03850097e84169fd88a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않으며 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="097d5634e76c7fdc3a50dea30921ddef17371844" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for compressor is to explicitly call &lt;code&gt;end&lt;/code&gt; method when it is no longer in use. If the &lt;code&gt;end&lt;/code&gt; is not invoked explicitly the resource of the compressor will be released when the instance becomes unreachable,</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않으며 제거됩니다. 그것은 no-op으로 구현됩니다. &lt;code&gt;finalize&lt;/code&gt; 를 재정의하는 하위 클래스정리를 수행하기 위해 대체 정리 메커니즘을 사용하고 재정의하는 &lt;code&gt;finalize&lt;/code&gt; 메서드를 제거하도록 수정해야합니다 . 압축기에 권장되는 정리 는 더 이상 사용하지 않을 때 명시 적으로 &lt;code&gt;end&lt;/code&gt; 메서드를 호출 하는 것입니다. 는 IF &lt;code&gt;end&lt;/code&gt; 압축기의 자원이 인스턴스가 도달 될 때 해제됩니다 명시 적으로 호출되지 않습니다,</target>
        </trans-unit>
        <trans-unit id="47b79383bcae3e922204d5ea86fccfb170bfe2e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for ZipFile object is to explicitly invoke &lt;code&gt;close&lt;/code&gt; method when it is no longer in use, or use try-with-resources. If the &lt;code&gt;close&lt;/code&gt; is not invoked explicitly the resources held by this object will be released when the instance becomes unreachable.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않으며 제거됩니다. 그것은 no-op으로 구현됩니다. &lt;code&gt;finalize&lt;/code&gt; 를 재정의하는 하위 클래스 정리를 수행하기 위해 대체 정리 메커니즘을 사용하고 재정의하는 &lt;code&gt;finalize&lt;/code&gt; 메서드 를 제거하도록 수정해야합니다 . ZipFile 객체에 대해 권장되는 정리 는 더 이상 사용하지 않을 때 &lt;code&gt;close&lt;/code&gt; 메서드 를 명시 적으로 호출 하거나 try-with-resources를 사용하는 것입니다. 경우 &lt;code&gt;close&lt;/code&gt; 명시 적으로 호출되지 인스턴스에 연결할 수있게되면이 객체가 보관 유지 자원이 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="7f87f25a450e774218ae842f94ecc4f8e21a6230" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for compressor is to explicitly call &lt;code&gt;end&lt;/code&gt; method when it is no longer in use. If the &lt;code&gt;end&lt;/code&gt; is not invoked explicitly the resource of the compressor will be released when the instance becomes unreachable.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않으며 제거됩니다. 그것은 no-op으로 구현됩니다. 정리를 수행하기 위해 &lt;code&gt;finalize&lt;/code&gt; 를 재정의하는 하위 클래스는 대체 정리 메커니즘을 사용하고 재정의를 제거하도록 수정해야합니다. &lt;code&gt;finalize&lt;/code&gt; 메서드 . 압축기에 권장되는 정리 는 더 이상 사용하지 않을 때 명시 적으로 &lt;code&gt;end&lt;/code&gt; 메서드를 호출 하는 것입니다. 경우 &lt;code&gt;end&lt;/code&gt; 명시 적으로 호출되지 인스턴스가 도달 될 때 압축기의 자원이 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="a5781f1fe78b11db626c54005d97fda3c5e9dc2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않으며 제거됩니다. 정리를 수행하기 위해 &lt;code&gt;finalize&lt;/code&gt; 를 재정의하는 하위 클래스는 대체 정리 메커니즘을 사용하고 재정의하는 &lt;code&gt;finalize&lt;/code&gt; 메서드 를 제거하도록 수정해야합니다 . &lt;code&gt;finalize&lt;/code&gt; 메서드를 재정의 할 때 구현은 &lt;a href=&quot;../lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; &lt;/a&gt; 설명 된대로 &lt;code&gt;super.finalize()&lt;/code&gt; 가 호출 되도록 명시 적으로 확인해야합니다. . 마이그레이션 옵션에 대한 자세한 내용은 &lt;a href=&quot;../lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; &lt;/a&gt; 사양을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a42af659e94273af1e3e71c3f847d665f87c7926" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="301938edcbcee8912bd33f8f0d3d67fd77b6a355" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않습니다. 정리를 수행하기 위해 &lt;code&gt;finalize&lt;/code&gt; 를 재정의하는 하위 클래스는 대체 정리 메커니즘을 사용하고 재정의하는 &lt;code&gt;finalize&lt;/code&gt; 메서드 를 제거하도록 수정해야합니다 . &lt;code&gt;finalize&lt;/code&gt; 메서드를 재정의 할 때 구현은 &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; &lt;/a&gt; 설명 된대로 &lt;code&gt;super.finalize()&lt;/code&gt; 가 호출 되는지 명시 적으로 확인해야합니다 . 마이그레이션 옵션에 대한 자세한 내용은 &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; &lt;/a&gt; 사양을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cf6ab10b27945f3cea37844915cc05f3c74248d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 방법은 더 이상 사용되지 않습니다. 정리를 수행하기 위해 &lt;code&gt;finalize&lt;/code&gt; 를 재정의하는 하위 클래스는 대체 정리 메커니즘을 사용하고 재정의하는 &lt;code&gt;finalize&lt;/code&gt; 메서드 를 제거하도록 수정해야합니다 . &lt;code&gt;finalize&lt;/code&gt; 메서드를 재정의 할 때 구현은 &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; &lt;/a&gt; 설명 된대로 &lt;code&gt;super.finalize()&lt;/code&gt; 가 호출 되는지 명시 적으로 확인해야합니다 . 마이그레이션 옵션에 대한 자세한 내용은 &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; &lt;/a&gt; 사양을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="acfa3270c433f7fbeb166904731784b7ab01474e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method is never invoked more than once by a Java virtual machine for any given object.</source>
          <target state="translated">지정된 객체에 대해 Java 가상 머신 이 &lt;code&gt;finalize&lt;/code&gt; 메소드를 두 번 이상 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="36550a7fe4b3770df4940e5d45c14dff3f4cb361" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method of class &lt;code&gt;Object&lt;/code&gt; performs no special action; it simply returns normally. Subclasses of &lt;code&gt;Object&lt;/code&gt; may override this definition.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 클래스 의 &lt;code&gt;finalize&lt;/code&gt; 메소드는 특별한 조치를 수행하지 않습니다. 단순히 정상적으로 돌아옵니다. &lt;code&gt;Object&lt;/code&gt; 의 서브 클래스 가이 정의를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="290eeab6379b679af729a0f7d139a6b6afebf8ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findSystemClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;findSystemClass&lt;/code&gt; 의 클래스의 메소드 &lt;code&gt;ClassLoader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b78d49371e443cbd3adbfb51ffc64676bde68d8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMap()&lt;/code&gt; operation has the effect of applying a one-to-many transformation to the elements of the stream, and then flattening the resulting elements into a new stream.</source>
          <target state="translated">&lt;code&gt;flatMap()&lt;/code&gt; 연산은 스트림의 요소 일대 변환을 적용하고 새로운 스트림으로 생성 된 소자를 평탄화하는 효과를 갖는다.</target>
        </trans-unit>
        <trans-unit id="296d9a4aaa513be61985bb6776a603e7a0774231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Order&lt;/code&gt;, to accumulate the set of line items for each customer:</source>
          <target state="translated">&lt;code&gt;flatMapping()&lt;/code&gt; 다단계 환원에 사용될 때 수집 이러한 하류로서 가장 유용 &lt;code&gt;groupingBy&lt;/code&gt; 또는 &lt;code&gt;partitioningBy&lt;/code&gt; . 예를 들어 &lt;code&gt;Order&lt;/code&gt; 스트림이 주어지면 각 고객에 대한 광고 항목 집합을 누적하려면 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="ee0bb92de803847414b86012236c4f48f3910542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush()&lt;/code&gt; method does nothing.</source>
          <target state="translated">그만큼 &lt;code&gt;flush()&lt;/code&gt; 메소드는 아무것도 실시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9794be29838cb64627abe081d7728e6987d9e44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;DataOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; 방법 &lt;code&gt;DataOutputStream&lt;/code&gt; 정렬 부르는 &lt;code&gt;flush&lt;/code&gt; 의 기본이되는 출력 스트림의 방법을.</target>
        </trans-unit>
        <trans-unit id="195ffa6218dd9b603f2e4ca8f61c877be833e3ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; 의 방법을 &lt;code&gt;FilterOutputStream&lt;/code&gt; 부르는 &lt;code&gt;flush&lt;/code&gt; 의 기본이되는 출력 스트림의 방법을.</target>
        </trans-unit>
        <trans-unit id="68aa9823b85500f33061dc1eb4258756e15e005f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; 의 &lt;code&gt;flush&lt;/code&gt; 메소드 는 아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="708bb18e269a3b497919640ccb7a50b14533bedd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forName&lt;/code&gt; method in class &lt;code&gt;Class&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forName&lt;/code&gt; 을 용 의 메소드 &lt;code&gt;Class&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1e830c12e2148cec99c8883588bf6d4b50000667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;#check(java.security.cert.Certificate)&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; 플래그는 인증서가 전달되는 순서를 지정&lt;a href=&quot;#check(java.security.cert.Certificate)&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt; (순방향 또는 역방향) 방법.</target>
        </trans-unit>
        <trans-unit id="4c26146099bd6b8ccdb37b5c47095892a4be4161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;#check(java.security.cert.Certificate,java.util.Collection)&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; 플래그는 인증서가 전달 될 순서 지정 &lt;a href=&quot;#check(java.security.cert.Certificate,java.util.Collection)&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt; (순방향 또는 역방향) 방법. &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; &lt;b&gt;해야&lt;/b&gt; 역 검사를 지원하고 &lt;b&gt;있습니다&lt;/b&gt; 방향의 체크를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8de3dc96d234b55e125cd365d4c69d5d74e9de59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; 플래그는 인증서가 전달 될 순서 지정 &lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt; (순방향 또는 역방향) 방법.</target>
        </trans-unit>
        <trans-unit id="7f3a1ac72ca4c5a5aab4a7ea8026300ca9e9a65d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; 플래그는 인증서가 전달 될 순서 지정 &lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt; (순방향 또는 역방향) 방법. &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 의가&lt;b&gt;있어야&lt;/b&gt; 역 검사를 지원하고 &lt;b&gt;있습니다&lt;/b&gt; 방향의 체크를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c29abf69126019dfa340a81cfcd7917ddb6a1954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fractionalDigits&lt;/code&gt; parameter allows the output of the fractional second to be controlled. Specifying zero will cause no fractional digits to be output. From 1 to 9 will output an increasing number of digits, using zero right-padding if necessary. The special value -1 is used to output as many digits as necessary to avoid any trailing zeroes.</source>
          <target state="translated">&lt;code&gt;fractionalDigits&lt;/code&gt; 소수 제의 출력을 가능 매개 변수를 제어한다. 0을 지정하면 소수 자릿수가 출력되지 않습니다. 1에서 9까지는 필요한 경우 오른쪽 패딩을 사용하여 자릿수를 증가시킵니다. 특수 값 -1은 후행 0을 피하기 위해 필요한만큼의 숫자를 출력하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7b74f2d1a70560572c42c19ad803e17b40cd8b5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get/putClientProperty&lt;/code&gt; methods provide access to a small per-instance hashtable. Callers can use get/putClientProperty to annotate components that were created by another module. For example, a layout manager might store per child constraints this way. For example:</source>
          <target state="translated">그만큼 &lt;code&gt;get/putClientProperty&lt;/code&gt; 방법은 작은 인스턴스마다 해시 테이블에 대한 액세스를 제공합니다. 호출자는 get / putClientProperty를 사용하여 다른 모듈에서 만든 구성 요소에 주석을 달 수 있습니다. 예를 들어, 레이아웃 관리자는 이러한 방식으로 하위 제약 조건을 저장할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="cb20f3bf6b3942d976c6a027783a762e2ac8bebb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get/putProperty&lt;/code&gt; methods provide access to a small per-instance map. This is &lt;b&gt;not&lt;/b&gt; to be confused with &lt;a href=&quot;../../../../../java.base/java/util/properties&quot;&gt;&lt;code&gt;Properties&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;get/putProperty&lt;/code&gt; 방법은, 인스턴스마다의 소규모의 맵에 대한 액세스를 제공합니다. 이것은되는 &lt;b&gt;하지&lt;/b&gt; 와 혼동 &lt;a href=&quot;../../../../../java.base/java/util/properties&quot;&gt; &lt;code&gt;Properties&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="854b032e913f227ca9315dfb23f41c9eee3500bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getAWTEventListeners&lt;/code&gt; method of &lt;code&gt;Toolkit&lt;/code&gt; can return a mixture of &lt;code&gt;AWTEventListener&lt;/code&gt; and &lt;code&gt;AWTEventListenerProxy&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;Toolkit&lt;/code&gt; 의 &lt;code&gt;getAWTEventListeners&lt;/code&gt; 메소드 는 &lt;code&gt;AWTEventListener&lt;/code&gt; 의 혼합을 리턴 할 수 있습니다. 및 &lt;code&gt;AWTEventListenerProxy&lt;/code&gt; 객체 .</target>
        </trans-unit>
        <trans-unit id="23ff0ed130fbcc2ffd5daaf1ed441144839e0f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getBundle&lt;/code&gt; factory methods with no &lt;code&gt;Control&lt;/code&gt; parameter locate and load resource bundles from &lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;service providers&lt;/a&gt;. It may continue the search as if calling &lt;a href=&quot;../lang/module#getResourceAsStream(java.lang.String)&quot;&gt;&lt;code&gt;Module.getResourceAsStream(String)&lt;/code&gt;&lt;/a&gt; to find the named resource from a given module and calling &lt;a href=&quot;../lang/classloader#getResourceAsStream(java.lang.String)&quot;&gt;&lt;code&gt;ClassLoader.getResourceAsStream(String)&lt;/code&gt;&lt;/a&gt;; refer to the specification of the &lt;code&gt;getBundle&lt;/code&gt; method for details. Only non-encapsulated resource bundles of &quot;&lt;code&gt;java.class&lt;/code&gt;&quot; or &quot;&lt;code&gt;java.properties&lt;/code&gt;&quot; format are searched.</source>
          <target state="translated">&lt;code&gt;getBundle&lt;/code&gt; 는 아니오 팩토리 메소드 &lt;code&gt;Control&lt;/code&gt; 매개 변수를 찾아서에서 부하 자원 번들 &lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;서비스 제공&lt;/a&gt; . 지정된 모듈에서 명명 된 리소스를 찾기 위해 &lt;a href=&quot;../lang/module#getResourceAsStream(java.lang.String)&quot;&gt; &lt;code&gt;Module.getResourceAsStream(String)&lt;/code&gt; &lt;/a&gt; 을 호출하고 &lt;a href=&quot;../lang/classloader#getResourceAsStream(java.lang.String)&quot;&gt; &lt;code&gt;ClassLoader.getResourceAsStream(String)&lt;/code&gt; &lt;/a&gt; 호출하는 것처럼 검색을 계속할 수 있습니다 . 자세한 내용 은 &lt;code&gt;getBundle&lt;/code&gt; 메소드 의 사양을 참조 하십시오. &quot; &lt;code&gt;java.class&lt;/code&gt; 의 캡슐화되지 않은 자원 번들 만 &quot;또는 &quot; &lt;code&gt;java.properties&lt;/code&gt; &quot;형식 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="dd64d876b826e032eea9ddf5b6c247d57ce3fd4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;
 getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;
 GregorianCalendar&lt;/code&gt;. &lt;a id=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;
 getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;
 getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek(int)&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek(int)&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; 및 &lt;code&gt; getMinimalDaysInFirstWeek()&lt;/code&gt; 값이 생성 할 때, 로케일 따라 자원을 이용하여 초기화 &lt;code&gt; GregorianCalendar&lt;/code&gt; . &lt;code&gt; getFirstDayOfWeek()&lt;/code&gt; 가 다음 과 같은 경우 &lt;a id=&quot;iso8601_compatible_setting&quot;&gt;주 결정은&lt;/a&gt; ISO 8601 표준과 호환 됩니다. &lt;code&gt;MONDAY&lt;/code&gt; 이고 &lt;code&gt; getMinimalDaysInFirstWeek()&lt;/code&gt; 가 4 일 되며, 표준이 선호되는 로케일에서 값이 사용됩니다. 이 값은 명시 적으로 호출하여 설정할 수 있습니다 &lt;a href=&quot;calendar#setFirstDayOfWeek(int)&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;calendar#setMinimalDaysInFirstWeek(int)&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0f3e1d9782b5c32d63d7b0cc83ee2c191412bb87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;GregorianCalendar&lt;/code&gt;. &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; 및 &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; 값이 생성 할 때, 로케일 따라 자원을 이용하여 초기화 &lt;code&gt;GregorianCalendar&lt;/code&gt; . &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; 가 &lt;code&gt;MONDAY&lt;/code&gt; 이고 &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; 가 4 인 경우 &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;주 결정은&lt;/a&gt; ISO 8601 표준과 호환 됩니다. 이 값은 표준이 선호되는 로케일에서 사용됩니다. 이 값은 &lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; 를 호출하여 명시 적으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56523d844e395cab10ecde9ba8b570825460b5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInstance&lt;/code&gt; factory method of the &lt;code&gt;Cipher&lt;/code&gt; engine class follows these rules in order to instantiate a provider's implementation of &lt;code&gt;CipherSpi&lt;/code&gt; for a transformation of the form &quot;</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; 엔진 클래스 의 &lt;code&gt;getInstance&lt;/code&gt; 팩토리 메소드는 &quot; 규칙 형식의 변환을 위해 제공자의 &lt;code&gt;CipherSpi&lt;/code&gt; 구현을 인스턴스화하기 위해 이러한 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="f09e308477567f7fb18f8db544516ee32916e1fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getNotifTypes&lt;/code&gt; method returns an array of strings containing the notification types that the MBean may emit. The notification type is a dot-notation string which describes what the emitted notification is about, not the Java class of the notification. A single generic notification class can be used to send notifications of several types. All of these types are returned in the string array result of the &lt;code&gt;getNotifTypes&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getNotifTypes&lt;/code&gt; 의 방법은 MBean가 방출 할 수 있다는 통지 유형을 포함하는 문자열의 배열을 반환한다. 알림 유형은 알림의 Java 클래스가 아니라 생성 된 알림에 대해 설명하는 점 표기법 문자열입니다. 단일 일반 알림 클래스를 사용하여 여러 유형의 알림을 보낼 수 있습니다. 이러한 모든 유형은 &lt;code&gt;getNotifTypes&lt;/code&gt; 메소드 의 문자열 배열 결과로 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="058e0ca7376a98eb437efbc0aef64d1a8a108d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getObjectInstance()&lt;/code&gt; method of an object factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">객체 팩토리 의 &lt;code&gt;getObjectInstance()&lt;/code&gt; 메소드는 다른 매개 변수를 사용하여 여러 번 호출 될 수 있습니다. 구현은 스레드로부터 안전합니다.</target>
        </trans-unit>
        <trans-unit id="6a8501111fcfea5e31cfee8d6894af584ff150ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOptionType&lt;/code&gt; method returns this value if this &lt;code&gt;ConfirmationCallback&lt;/code&gt; was instantiated with &lt;code&gt;options&lt;/code&gt; instead of an &lt;code&gt;optionType&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;ConfirmationCallback&lt;/code&gt; 가 &lt;code&gt;optionType&lt;/code&gt; 대신에 &lt;code&gt;options&lt;/code&gt; 으로 인스턴스화 된 경우 , &lt;code&gt;getOptionType&lt;/code&gt; 메소드는이 값을 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="2ef280ce3c722336b80c7679d86c41831204a952" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOverrideStyle&lt;/code&gt; method provides a mechanism through which a DOM author could effect immediate change to the style of an element without modifying the explicitly linked style sheets of a document or the inline style of elements in the style sheets. This style sheet comes after the author style sheet in the cascade algorithm and is called override style sheet. The override style sheet takes precedence over author style sheets. An &quot;!important&quot; declaration still takes precedence over a normal declaration. Override, author, and user style sheets all may contain &quot;!important&quot; declarations. User &quot;!important&quot; rules take precedence over both override and author &quot;!important&quot; rules, and override &quot;!important&quot; rules take precedence over author &quot;!important&quot; rules.</source>
          <target state="translated">&lt;code&gt;getOverrideStyle&lt;/code&gt; 의 방법은 DOM 작성자가 문서 또는 스타일 시트 요소의 인라인 스타일의 명시 연결된 스타일 시트를 변경하지 않고 소자의 스타일에 즉시 변화 영향 수되는 메커니즘을 제공한다. 이 스타일 시트는 캐스케이드 알고리즘에서 작성자 스타일 시트 뒤에 나오며 오버라이드 스타일 시트라고합니다. 오버라이드 스타일 시트는 작성자 스타일 시트보다 우선합니다. &quot;! important&quot;선언은 여전히 ​​일반 선언보다 우선합니다. 재정의, 작성자 및 사용자 스타일 시트는 모두 &quot;! important&quot;선언을 포함 할 수 있습니다. 사용자 &quot;! important&quot;규칙은 재정의 및 작성자 &quot;! important&quot;규칙보다 우선하고 &quot;! important&quot;규칙 재정의는 &quot;! important&quot;작성자 규칙보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="c8a70b914e02ddbca33ccc8428f3eed3b38dd996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getPropertyInfo&lt;/code&gt; method is intended to allow a generic GUI tool to discover what properties it should prompt a human for in order to get enough information to connect to a database. Note that depending on the values the human has supplied so far, additional values may become necessary, so it may be necessary to iterate though several calls to the &lt;code&gt;getPropertyInfo&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getPropertyInfo&lt;/code&gt; 방법은 일반적인 GUI 도구에서 데이터베이스로 연결하기 위해 충분한 정보를 얻을 수 있도록하기위한 프롬프트해야 할 특성을 발견 할 수 있도록하기위한 것입니다. 지금까지 인간이 제공 한 값에 따라 추가 값이 필요할 수 있으므로 &lt;code&gt;getPropertyInfo&lt;/code&gt; 메소드 에 대한 여러 호출을 반복해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ebc4bc14d6647d69c5c4a4fb63fb8fd2ffdfd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getResources&lt;/code&gt; method of the context &lt;code&gt;ClassLoader&lt;/code&gt; is used locate JAR files containing files named &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt;</source>
          <target state="translated">컨텍스트 &lt;code&gt;ClassLoader&lt;/code&gt; 의 &lt;code&gt;getResources&lt;/code&gt; 메소드는 &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt; 라는 파일을 포함하는 JAR 파일을 찾는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="b2b6b51bd170eb65242dd9c81805d8ac434ccc43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getStateToBind()&lt;/code&gt; method of a state factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">상태 팩토리 의 &lt;code&gt;getStateToBind()&lt;/code&gt; 메소드는 다른 매개 변수를 사용하여 여러 번 호출 될 수 있습니다. 구현은 스레드로부터 안전합니다.</target>
        </trans-unit>
        <trans-unit id="4133bc1ef355b2f7d534eacc6206c1d3c4756a8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; and &lt;code&gt;contentPane&lt;/code&gt; have the same bounds, which means &lt;code&gt;JRootPane&lt;/code&gt; does not tiles its children and this should return false.</source>
          <target state="translated">그만큼 &lt;code&gt;glassPane&lt;/code&gt; 와 &lt;code&gt;contentPane&lt;/code&gt; 같은 경계 수단이 &lt;code&gt;JRootPane&lt;/code&gt; 그 아이를 타일링하지 않고, false를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="ee344936fcd60a44c7aadfe704fe188c2bf05a14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; and &lt;code&gt;contentPane&lt;/code&gt; have the same bounds, which means &lt;code&gt;JRootPane&lt;/code&gt; does not tiles its children and this should return false. On the other hand, the &lt;code&gt;glassPane&lt;/code&gt; is normally not visible, and so this can return true if the &lt;code&gt;glassPane&lt;/code&gt; isn't visible. Therefore, the return value here depends upon the visibility of the &lt;code&gt;glassPane&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; 와 &lt;code&gt;contentPane&lt;/code&gt; 에 의미 같은 경계를 가지고 &lt;code&gt;JRootPane&lt;/code&gt; 의를 그 아이를 타일링하지 않고, false를 반환해야합니다. 한편, &lt;code&gt;glassPane&lt;/code&gt; 일반적으로 볼 수없는, 그리고 경우이 때문에 true를 반환 할 수 &lt;code&gt;glassPane&lt;/code&gt; 표시되지 않습니다. 따라서 여기서 반환 값은 &lt;code&gt;glassPane&lt;/code&gt; 의 가시성에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="c64b9cd519193ff182ca1d2c0d0b61365f9b46ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; fills the entire viewable area of the &lt;code&gt;JRootPane&lt;/code&gt; (bounds - insets).</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; 의 전체 가시 영역 채우고 &lt;code&gt;JRootPane&lt;/code&gt; 의 (- 세트 경계).</target>
        </trans-unit>
        <trans-unit id="303f1b7ffcb897ac198d0b32c1e4690dd69e7d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; sits on top of all other components in the &lt;code&gt;JRootPane&lt;/code&gt;. That provides a convenient place to draw above all other components, and makes it possible to intercept mouse events, which is useful both for dragging and for drawing. Developers can use &lt;code&gt;setVisible&lt;/code&gt; on the &lt;code&gt;glassPane&lt;/code&gt; to control when the &lt;code&gt;glassPane&lt;/code&gt; displays over the other children. By default the &lt;code&gt;glassPane&lt;/code&gt; is not visible.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; 의 다른 모든 구성 요소의 꼭대기에 앉아 &lt;code&gt;JRootPane&lt;/code&gt; . 이는 다른 모든 구성 요소 위에 그릴 수있는 편리한 위치를 제공하고 마우스 이벤트를 가로 챌 수있게하여 드래그 및 그리기 모두에 유용합니다. 개발자는 &lt;code&gt;glassPane&lt;/code&gt; 에서 &lt;code&gt;setVisible&lt;/code&gt; 을 사용 하여 &lt;code&gt;glassPane&lt;/code&gt; 이 다른 자식 위에 표시되는 시기를 제어 할 수 있습니다 . 기본적으로 &lt;code&gt;glassPane&lt;/code&gt; 은 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f433eca03b2eb0f32d07fb7e2e68b92fac6f3c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; method implementation checks the instance(s) of the &lt;code&gt;Callback&lt;/code&gt; object(s) passed in to retrieve or display the requested information. The following example is provided to help demonstrate what an &lt;code&gt;handle&lt;/code&gt; method implementation might look like. This example code is for guidance only. Many details, including proper error handling, are left out for simplicity.</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; 의 방법을 구현 검사 인스턴스 (들) &lt;code&gt;Callback&lt;/code&gt; 전달 객체 (들)를 검색 또는 요청 된 정보를 표시한다. 다음 예제는 &lt;code&gt;handle&lt;/code&gt; 메소드 구현의 모양을 보여주기 위해 제공됩니다 . 이 예제 코드는 지침 용입니다. 적절한 오류 처리를 포함하여 많은 세부 사항이 단순성을 위해 생략되었습니다.</target>
        </trans-unit>
        <trans-unit id="78806b6c0d8e3a500425fd33fe6be57433f2f45a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method of the returned set returns the sum of the</source>
          <target state="translated">리턴 된 세트 의 &lt;code&gt;hashCode&lt;/code&gt; 메소드는</target>
        </trans-unit>
        <trans-unit id="2f587f428ba9d70c513a6f20faefa7737e3169e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method uses the underlying &lt;code&gt;java.util.Date&lt;/code&gt; implementation and therefore does not include nanos in its computation.</source>
          <target state="translated">&lt;code&gt;hashCode&lt;/code&gt; 방법은 기본 사용 &lt;code&gt;java.util.Date&lt;/code&gt; 의 구현하므로 그 나노 계산에 포함되지 않는다.</target>
        </trans-unit>
        <trans-unit id="fd1ec688b3211b62ec6deea7903a4e5a33c5b1e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">다음과 같은 경우 &lt;code&gt;hostname&lt;/code&gt; 인수가 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0e43ec7f450994678afac7d3d20f221033df02a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostnameVerifier&lt;/code&gt; for this object.</source>
          <target state="translated">이 객체 의 &lt;code&gt;hostnameVerifier&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a0862b9286e778fa946553866f62a5a21c32639" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iconOnly&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;iconOnly&lt;/code&gt; 의 값.</target>
        </trans-unit>
        <trans-unit id="daad7e8488e5cfcb51dabab10521abe9fa406690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iconifyFrame()&lt;/code&gt; code calls this to determine the proper bounds for the desktopIcon.</source>
          <target state="translated">&lt;code&gt;iconifyFrame()&lt;/code&gt; 의 코드는이 desktopIcon의 적절한 경계를 결정하기 위해 호출합니다.</target>
        </trans-unit>
        <trans-unit id="51e65210412db39a03c74c582c66b807b1845931" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;icons&lt;/code&gt; list can contain &lt;code&gt;MultiResolutionImage&lt;/code&gt; images also. Suitable image depending on screen resolution is extracted from base &lt;code&gt;MultiResolutionImage&lt;/code&gt; image and added to the icons list while base resolution image is removed from list. The &lt;code&gt;icons&lt;/code&gt; list is scanned for the images of most appropriate dimensions from the beginning. If the list contains several images of the same size, the first will be used.</source>
          <target state="translated">&lt;code&gt;icons&lt;/code&gt; 목록에 포함 할 수 있습니다 &lt;code&gt;MultiResolutionImage&lt;/code&gt; 의 도 이미지를. 기본 &lt;code&gt;MultiResolutionImage&lt;/code&gt; 이미지 에서 화면 해상도에 따라 적합한 이미지를 추출 하여 아이콘 목록에 추가하고 기본 해상도 이미지는 목록에서 제거합니다. &lt;code&gt;icons&lt;/code&gt; 목록은 처음부터 가장 적절한 크기의 이미지를 스캔됩니다. 목록에 같은 크기의 여러 이미지가 포함 된 경우 첫 번째 이미지가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3a3a03a08373e3a4eb0d5649cfecb26445106e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 값은 누적 함수에 대한 식별해야한다. 이 모든 것을 의미 &lt;code&gt;t&lt;/code&gt; , &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; 와 동일하다 &lt;code&gt;t&lt;/code&gt; . &lt;code&gt;accumulator&lt;/code&gt; 함수가 있어야 &lt;a href=&quot;package-summary#Associativity&quot;&gt;연관&lt;/a&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="15d70cdc09c9191c55557a009f3a78afb163bfc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; is equal to &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 값은 누적 함수에 대한 식별해야한다. 이 수단은 모든 것을 &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; 와 동일하다 &lt;code&gt;x&lt;/code&gt; . &lt;code&gt;accumulator&lt;/code&gt; 함수가 있어야 &lt;a href=&quot;package-summary#Associativity&quot;&gt;연관&lt;/a&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="c7c434e8ee038c0b3fcfe01a6456babfb2b633e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the combiner function. This means that for all &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;combiner(identity, u)&lt;/code&gt; is equal to &lt;code&gt;u&lt;/code&gt;. Additionally, the &lt;code&gt;combiner&lt;/code&gt; function must be compatible with the &lt;code&gt;accumulator&lt;/code&gt; function; for all &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, the following must hold:</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 값은 결합기 기능에 대한 정체성을해야합니다. 이 모든 것을 의미 &lt;code&gt;u&lt;/code&gt; , &lt;code&gt;combiner(identity, u)&lt;/code&gt; 과 동일 &lt;code&gt;u&lt;/code&gt; . 또한 &lt;code&gt;combiner&lt;/code&gt; 기능은 &lt;code&gt;accumulator&lt;/code&gt; 기능 과 호환되어야합니다 . 모든 &lt;code&gt;u&lt;/code&gt; 및 &lt;code&gt;t&lt;/code&gt; 에 대해 다음을 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="cb7b6822fbfe6353745706addd58f9b58b682324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ifAddress&lt;/code&gt; argument can be used on a multi-homed host for a &lt;code&gt;ServerSocket&lt;/code&gt; that will only accept connect requests to one of its addresses. If &lt;code&gt;ifAddress&lt;/code&gt; is null, it will accept connections on all local addresses. The socket is configured with the socket options (such as accept timeout) given to this factory.</source>
          <target state="translated">&lt;code&gt;ifAddress&lt;/code&gt; 의 인수는 대한 멀티 홈 호스트에서 사용할 수 있습니다 &lt;code&gt;ServerSocket&lt;/code&gt; 의 단지의 주소에 대한 접속 요구를 받아 들일 것입니다. 경우 &lt;code&gt;ifAddress&lt;/code&gt; 가 널 (null)이, 모든 로컬 주소에 대한 연결을 허용합니다. 소켓은이 팩토리에 제공된 소켓 옵션 (예 : 승인 시간 종료)으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="9d4aa0ca4766a00288d0853e4d6293a48f65d87d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreMetadata&lt;/code&gt; parameter, if set to &lt;code&gt;true&lt;/code&gt;, allows the reader to disregard any metadata encountered during the read. Subsequent calls to the &lt;code&gt;getStreamMetadata&lt;/code&gt; and &lt;code&gt;getImageMetadata&lt;/code&gt; methods may return &lt;code&gt;null&lt;/code&gt;, and an &lt;code&gt;IIOImage&lt;/code&gt; returned from &lt;code&gt;readAll&lt;/code&gt; may return &lt;code&gt;null&lt;/code&gt; from their &lt;code&gt;getMetadata&lt;/code&gt; method. Setting this parameter may allow the reader to work more efficiently. The reader may choose to disregard this setting and return metadata normally.</source>
          <target state="translated">&lt;code&gt;ignoreMetadata&lt;/code&gt; 의 로 설정하면 매개 변수는 &lt;code&gt;true&lt;/code&gt; , 읽기 중에 발생한 메타 데이타를 리더가 무시할 수 있습니다. 받는 후속 호출 &lt;code&gt;getStreamMetadata&lt;/code&gt; 및 &lt;code&gt;getImageMetadata&lt;/code&gt; 방법은 반환 할 수 있습니다 &lt;code&gt;null&lt;/code&gt; , 그리고 &lt;code&gt;IIOImage&lt;/code&gt; 에 에서 반환 &lt;code&gt;readAll&lt;/code&gt; 반환 할 수 있습니다 &lt;code&gt;null&lt;/code&gt; 자신의에서 &lt;code&gt;getMetadata&lt;/code&gt; 방법. 이 매개 변수를 설정하면 리더가 더 효율적으로 작동 할 수 있습니다. 독자는이 설정을 무시하고 메타 데이터를 정상적으로 반환하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74a61b8b43c5d10d1b00563be9b1b6cef6be194e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;imageUpdate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; incrementally draws an image on the component as more of the bits of the image are available.</source>
          <target state="translated">&lt;code&gt;imageUpdate&lt;/code&gt; 방법 &lt;code&gt;Component&lt;/code&gt; 더 많은 이미지 비트를 사용할 수있을 때 구성 요소에 이미지를 점진적으로 그립니다.</target>
        </trans-unit>
        <trans-unit id="fd6a40388fc0550eb7dfd1739f418989dfe9f308" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;implies&lt;/code&gt; method is used by the AccessController to determine whether or not a requested permission is implied by another permission that is known to be valid in the current execution context.</source>
          <target state="translated">는 &lt;code&gt;implies&lt;/code&gt; 방법은 권한 요청이 현재 실행 콘텍스트에서 유효한 것으로 알려진 다른 권한에 의해 암시되는 여부를 결정하기 위해 AccessController에 의해 사용된다.</target>
        </trans-unit>
        <trans-unit id="99323cb09ca7a1b5b3ed49e52564ae4467d979f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inactiveObject&lt;/code&gt; call informs the &lt;code&gt;ActivationMonitor&lt;/code&gt; that the remote object reference it holds for the object with the activation identifier, &lt;code&gt;id&lt;/code&gt;, is no longer valid. The monitor considers the reference associated with &lt;code&gt;id&lt;/code&gt; as a stale reference. Since the reference is considered stale, a subsequent &lt;code&gt;activate&lt;/code&gt; call for the same activation identifier results in re-activating the remote object.</source>
          <target state="translated">&lt;code&gt;inactiveObject&lt;/code&gt; 호출 알리는 &lt;code&gt;ActivationMonitor&lt;/code&gt; 에 원격 개체 참조가 기동 식별자 보유 개체 즉, &lt;code&gt;id&lt;/code&gt; 더 이상 유효하지 않다. 모니터는 &lt;code&gt;id&lt;/code&gt; 와 연관된 참조를 부실 참조로 간주합니다 . 참조가 오래된 것으로 간주되므로 후속 &lt;code&gt;activate&lt;/code&gt; 동일한 활성화 식별자에 대한 호출은 원격 개체를 다시 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="dc20171b44b44f5f3758ac37b7d5a7ded6f19e83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; is defined to be out of bounds if any of the following inequalities is true:</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 다음과 같은 불평등 중 하나에 해당하는 경우 아웃 오브 바운드로 정의된다 :</target>
        </trans-unit>
        <trans-unit id="5f5eaf7ade6f853439e4b56543435a4f43f085fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;#getNameCount()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 매개 변수는 반환 할 이름 요소의 인덱스입니다. 디렉토리 계층 구조에서 루트에 &lt;em&gt;가장 가까운&lt;/em&gt; 요소 에는 인덱스 &lt;code&gt;0&lt;/code&gt; 이 있습니다. 루트에서 &lt;em&gt;가장 먼&lt;/em&gt; 요소의 인덱스 &lt;a href=&quot;#getNameCount()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="64642e3202227bf1eb96b4d1dcff39ebc286b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 매개 변수는 반환 할 이름 요소의 인덱스입니다. 디렉토리 계층에서 루트에 &lt;em&gt;가장 가까운&lt;/em&gt; 요소의 인덱스는 &lt;code&gt;0&lt;/code&gt; 입니다. 루트에서 &lt;em&gt;가장 먼&lt;/em&gt; 요소의 인덱스 &lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8ba30d2da47964c5ec7ffd415d13cac0e4683bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;infoflags&lt;/code&gt; argument should be the bitwise inclusive &lt;b&gt;OR&lt;/b&gt; of the following flags: &lt;code&gt;WIDTH&lt;/code&gt;, &lt;code&gt;HEIGHT&lt;/code&gt;, &lt;code&gt;PROPERTIES&lt;/code&gt;, &lt;code&gt;SOMEBITS&lt;/code&gt;, &lt;code&gt;FRAMEBITS&lt;/code&gt;, &lt;code&gt;ALLBITS&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;ABORT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;infoflags&lt;/code&gt; 인수는 비트 포함해야 &lt;b&gt;OR&lt;/b&gt; : 다음 플래그의 &lt;code&gt;WIDTH&lt;/code&gt; , &lt;code&gt;HEIGHT&lt;/code&gt; , &lt;code&gt;PROPERTIES&lt;/code&gt; , &lt;code&gt;SOMEBITS&lt;/code&gt; , &lt;code&gt;FRAMEBITS&lt;/code&gt; , &lt;code&gt;ALLBITS&lt;/code&gt; , &lt;code&gt;ERROR&lt;/code&gt; , &lt;code&gt;ABORT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd34925c76b9aa7f124b7924e51f96a4065ec4cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; handle describes the initial value of an additional optional loop-local variable. In each iteration, this loop-local variable, if present, will be passed to the &lt;code&gt;body&lt;/code&gt; and updated with the value returned from its invocation. The result of loop execution will be the final value of the additional loop-local variable (if present).</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 핸들 부가 선택적 루프 로컬 변수의 초기 값을 설명한다. 각 반복에서이 루프 로컬 변수 (있는 경우)는 &lt;code&gt;body&lt;/code&gt; 전달됩니다. 호출에서 반환 된 값으로 업데이트됩니다. 루프 실행의 결과는 추가 루프 로컬 변수 (있는 경우)의 최종 값이됩니다.</target>
        </trans-unit>
        <trans-unit id="ff497b3e440002ae66c4cff8239b566deecf6970" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt;, and &lt;code&gt;marshalParams&lt;/code&gt; methods of &lt;code&gt;TransformService&lt;/code&gt; MUST support &lt;code&gt;DOMStructure&lt;/code&gt; and &lt;code&gt;DOMCryptoContext&lt;/code&gt; types.</source>
          <target state="translated">&lt;code&gt;TransformService&lt;/code&gt; 의 &lt;code&gt;init&lt;/code&gt; 및 &lt;code&gt;marshalParams&lt;/code&gt; 메소드는 &lt;code&gt;DOMStructure&lt;/code&gt; 및 &lt;code&gt;DOMCryptoContext&lt;/code&gt; 유형을 지원해야 합니다.</target>
        </trans-unit>
        <trans-unit id="a4d191b328a1c5a3fb19ebaef345b041450f0653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initEvent&lt;/code&gt; method is used to initialize the value of an &lt;code&gt;Event&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initEvent&lt;/code&gt; 방법은의 값을 초기화하는 데 사용되는 &lt;code&gt;Event&lt;/code&gt; 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="e980ab2973cbdf463d4df8c8ce1591af9572002f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initEvent&lt;/code&gt; method is used to initialize the value of an &lt;code&gt;Event&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;Event&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times the final invocation takes precedence. If called from a subclass of &lt;code&gt;Event&lt;/code&gt; interface only the values specified in the &lt;code&gt;initEvent&lt;/code&gt; method are modified, all other attributes are left unchanged.</source>
          <target state="translated">&lt;code&gt;initEvent&lt;/code&gt; 방법은의 값을 초기화하는 데 사용되는 &lt;code&gt;Event&lt;/code&gt; 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스. 이 메서드는 &lt;code&gt;dispatchEvent&lt;/code&gt; 메서드 를 통해 &lt;code&gt;Event&lt;/code&gt; 가 전달 되기 전에 만 호출 될 수 있지만 필요한 경우 해당 단계에서 여러 번 호출 될 수 있습니다. 여러 번 호출되면 최종 호출이 우선합니다. &lt;code&gt;Event&lt;/code&gt; 인터페이스 의 하위 클래스에서 호출 되면 &lt;code&gt;initEvent&lt;/code&gt; 메서드에 지정된 값만 수정되고 다른 모든 속성은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e79e9c0595f3db6eb879c2cd4bff42c0c8821e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMouseEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MouseEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initMouseEvent&lt;/code&gt; 방법은 값을 초기화하는 데 사용 &lt;code&gt;MouseEvent&lt;/code&gt; 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="fbeef5c0517fc941e5840401645ff8bb1740d90c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMouseEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MouseEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;MouseEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initMouseEvent&lt;/code&gt; 방법은 값을 초기화하는 데 사용 &lt;code&gt;MouseEvent&lt;/code&gt; 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스. 이 메서드는 &lt;code&gt;dispatchEvent&lt;/code&gt; 메서드 를 통해 &lt;code&gt;MouseEvent&lt;/code&gt; 가 전달 되기 전에 만 호출 될 수 있지만 필요한 경우 해당 단계에서 여러 번 호출 될 수 있습니다. 여러 번 호출하면 최종 호출이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="625a8b0abe6c5b47d1eefb61955bc931458fce29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMutationEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MutationEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initMutationEvent&lt;/code&gt; 방법은 값을 초기화하는 데 사용되는 &lt;code&gt;MutationEvent&lt;/code&gt; 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="254b29b2d9aabd1ae0ea96ab048a74c10af149c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMutationEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MutationEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;MutationEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initMutationEvent&lt;/code&gt; 방법은 값을 초기화하는 데 사용되는 &lt;code&gt;MutationEvent&lt;/code&gt; 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스. 전과이 방법은 호출 할 수 &lt;code&gt;MutationEvent&lt;/code&gt; 이 비아 파견 된 &lt;code&gt;dispatchEvent&lt;/code&gt; 에 메서드 될 수 있지만 필요한 경우 해당 단계에서 여러 번 호출 될 수 있습니다. 여러 번 호출하면 최종 호출이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="0031ccc968fa433b9c0ee69137ad1acff5549339" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initUIEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;UIEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initUIEvent&lt;/code&gt; 의 방법은 값을 초기화하는 데 사용되는 &lt;code&gt;UIEvent&lt;/code&gt; 를 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="f5e2a52bd2dedb43955ead95d35976c3258ced77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initUIEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;UIEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;UIEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initUIEvent&lt;/code&gt; 의 방법은 값을 초기화하는 데 사용되는 &lt;code&gt;UIEvent&lt;/code&gt; 를 관통 생성 &lt;code&gt;DocumentEvent&lt;/code&gt; 인터페이스. 이 메서드는 &lt;code&gt;dispatchEvent&lt;/code&gt; 메서드 를 통해 &lt;code&gt;UIEvent&lt;/code&gt; 가 전달 되기 전에 만 호출 될 수 있지만 필요한 경우 해당 단계에서 여러 번 호출 될 수 있습니다. 여러 번 호출하면 최종 호출이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="178fa46f7783f7ca8be10feb795a8f432e6ce094" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialSize&lt;/code&gt; parameter may be used by the implementation as a &lt;em&gt;hint&lt;/em&gt; as to the initial number of tasks it may submit. For example, it may be used to indicate the initial number of threads that wait on I/O events.</source>
          <target state="translated">&lt;code&gt;initialSize&lt;/code&gt; 가의 매개 변수는 같은 구현에 의해 사용될 수있는 &lt;em&gt;힌트&lt;/em&gt; 가 제출할 수 작업의 초기 수있다. 예를 들어, I / O 이벤트를 기다리는 초기 스레드 수를 나타내는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bd09b116084a74e12383d4253d1c5f87a806306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, each provider that implements this interface should supply (and document) a default initialization. Note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the DSAKeyPairGenerator instead of relying on provider-specific defaults.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 방법은 각각 여러 번 호출 할 수 있습니다. DSAKeyPairGenerator에서 &lt;code&gt;initialize&lt;/code&gt; 메서드가 호출 되지 않으면 이 인터페이스를 구현하는 각 공급자는 기본 초기화를 제공하고 문서화해야합니다. 기본값은 제공 업체에 따라 다를 수 있습니다. 또한 공급자의 기본값은 향후 버전에서 변경 될 수 있습니다. 따라서 공급자 별 기본값에 의존하는 대신 DSAKeyPairGenerator를 명시 적으로 초기화하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8e1910412b5ab4f4360c75fcf4e4c4f981f39033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 방법은 각각 여러 번 호출 할 수 있습니다. DSAKeyPairGenerator에서 &lt;code&gt;initialize&lt;/code&gt; 메소드가 호출 되지 않은 경우 기본값은 사전 계산 된 p, q 및 g 매개 변수와 SecureRandom 인스턴스를 임의의 비트 소스로 사용하여 1024 비트 키를 생성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e89c947619670b6f05ed77c9eb43708ff984ab4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;abstract&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;abstract&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="57a2bf2f87f99f529f820792d0d9541859c36200" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;final&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;final&lt;/code&gt; 수정 자.</target>
        </trans-unit>
        <trans-unit id="b83b91795fa9f3dd467562df8b850ad43ca35b18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;interface&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;interface&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="6e6129e278d1c31b1641cf76868b23a7ccbc053b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;native&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;native&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="9487f7c45da0d56c561a74e7e315aad283ae33db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;private&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;private&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="d998015ddde224da2f2e242d06b1b5cda8342b93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;protected&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;protected&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="1ab9b738d34103d531a4ba5cdf4833da76ab4445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;public&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;public&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="cb450909d14452e1607d3359ccbe310b15e65773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;static&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;static&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="e48ba12a5c869896a959b271934ece28496f4515" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;strictfp&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;strictfp&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="ab15ce0d3f3e80624e13e8b8f7afdae7f2cc31b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;synchronized&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;synchronized&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="47c273abe027c89df6d6ce37e4c65a5d5f445ccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;transient&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;transient&lt;/code&gt; 개질제.</target>
        </trans-unit>
        <trans-unit id="75d6fc286ca2b46ac7f2dfbb0cff289b6c5d7d46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;volatile&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 나타내는 값 &lt;code&gt;volatile&lt;/code&gt; 수정합니다.</target>
        </trans-unit>
        <trans-unit id="cfd98033227ef6b3a7f984e0cf8a786a155a86aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;#constructorModifiers()&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#methodModifiers()&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스에서 설명 하는 &lt;code&gt;interface&lt;/code&gt; 수정자는 Java 언어의 실제 수정자가 아니며이 메소드에 의해 나열된 다른 모든 수정 자 뒤에 나타납니다. 이 메소드는 Java 엔티티의 유효한 수정자가 아닌 수정 자 문자열을 리턴 할 수 있습니다. 즉, 입력으로 표시되는 수정 자 조합의 가능한 유효성에 대한 검사가 수행되지 않습니다. 생성자 또는 메서드와 같은 알려진 종류의 엔티티에 대해 이러한 검사를 수행하려면 먼저 &lt;a href=&quot;#constructorModifiers()&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#methodModifiers()&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt; 와 같은 메서드의 적절한 마스크를 사용하여 &lt;code&gt;toString&lt;/code&gt; 인수를 AND합니다 .</target>
        </trans-unit>
        <trans-unit id="cfcd94506157aeb895a9c9c21b22d64a6d79a08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;modifier#constructorModifiers--&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;modifier#methodModifiers--&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;interface&lt;/code&gt; 이 클래스에서 논의 수정은 자바 언어의 진정한 수정하지 않고는이 방법에 의해 나열된 다른 모든 수정 후에 나타납니다. 이 메소드는 Java 엔티티의 유효한 수정자가 아닌 수정 자의 문자열을 리턴 할 수 있습니다. 즉, 입력으로 표시되는 수정 자 조합의 가능한 유효성에 대해서는 점검이 수행되지 않습니다. 생성자 또는 메소드와 같은 알려진 유형의 엔티티에 대해 이러한 검사를 수행하려면 먼저 &lt;a href=&quot;modifier#constructorModifiers--&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;modifier#methodModifiers--&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt; 와 같은 메소드에서 적절한 마스크를 사용하여 &lt;code&gt;toString&lt;/code&gt; 의 인수를 AND하십시오 .</target>
        </trans-unit>
        <trans-unit id="58627a573928318b0e86229e8345a42317bf4581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invokedynamic&lt;/code&gt; instruction makes use of bootstrap &lt;code&gt;MethodHandle&lt;/code&gt; constants to dynamically resolve &lt;code&gt;CallSite&lt;/code&gt; objects for custom method invocation behavior.</source>
          <target state="translated">&lt;code&gt;invokedynamic&lt;/code&gt; 명령 차종은 부트 스트랩의 사용 &lt;code&gt;MethodHandle&lt;/code&gt; 의 동적 해결하기 위해 상수 &lt;code&gt;CallSite&lt;/code&gt; 는 사용자 정의 메소드 호출 동작에 대한 객체.</target>
        </trans-unit>
        <trans-unit id="665a37a65bad1ed4e2e3237e067bfa95f31eb667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isContainer&lt;/code&gt;&lt;a href=&quot;../../java/beans/featuredescriptor#getValue(java.lang.String)&quot;&gt;&lt;code&gt;feature attribute&lt;/code&gt;&lt;/a&gt; was introduced primarily for the Swing library. All Swing components extend the &lt;a href=&quot;../../java/awt/container&quot;&gt;&lt;code&gt;Container&lt;/code&gt;&lt;/a&gt; class by design, so the builder tool assumes that all Swing components are containers. The &lt;a href=&quot;../../java/beans/beaninfo&quot;&gt;&lt;code&gt;BeanInfo&lt;/code&gt;&lt;/a&gt; classes with the &lt;code&gt;isContainer&lt;/code&gt; attribute allow to directly specify whether a Swing component is a container or not.</source>
          <target state="translated">&lt;code&gt;isContainer&lt;/code&gt; 의&lt;a href=&quot;../../java/beans/featuredescriptor#getValue(java.lang.String)&quot;&gt; &lt;code&gt;feature attribute&lt;/code&gt; &lt;/a&gt; 주로 스윙 라이브러리에 대한 소개되었다. 모든 Swing 구성 요소는 설계에 따라 &lt;a href=&quot;../../java/awt/container&quot;&gt; &lt;code&gt;Container&lt;/code&gt; &lt;/a&gt; 클래스를 확장 하므로 빌더 도구는 모든 Swing 구성 요소가 컨테이너라고 가정합니다. &lt;a href=&quot;../../java/beans/beaninfo&quot;&gt; &lt;code&gt;BeanInfo&lt;/code&gt; &lt;/a&gt; 와 클래스 &lt;code&gt;isContainer&lt;/code&gt; 의 속성은 직접 스윙 구성 요소가 컨테이너인지 여부를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbbe4efb7b82c12416112b91d882adb2461b3096" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isEnabled&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;isEnabled&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="f254cbd5db1e9d15f5755ade659caa4db237d900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isMixerSupported&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; for all the info objects returned by this method. The corresponding mixer instances for the info objects are returned by the &lt;code&gt;getMixer&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;isMixerSupported&lt;/code&gt; 의 메소드가 리턴 &lt;code&gt;true&lt;/code&gt; 모든 정보를이 메소드에 의해 반환되는 객체. info 객체의 해당 믹서 인스턴스는 &lt;code&gt;getMixer&lt;/code&gt; 메서드에 의해 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="cc647a7047b23398301d649428d6203301b91e91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iterations&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;, and must return the type &lt;code&gt;int&lt;/code&gt;, referred to here as &lt;code&gt;I&lt;/code&gt; in parameter type lists.</source>
          <target state="translated">&lt;code&gt;iterations&lt;/code&gt; 핸들이 아니어야 &lt;code&gt;null&lt;/code&gt; , 및 유형의 반환해야 &lt;code&gt;int&lt;/code&gt; , 여기에 언급 &lt;code&gt;I&lt;/code&gt; 매개 변수 유형 목록에.</target>
        </trans-unit>
        <trans-unit id="faab6cad1b99da33b71348933be79609cd1c2d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; could be monitored for changes by adding a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;s. In the &lt;code&gt;JTextComponent&lt;/code&gt; based components, changes are broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;. The &lt;code&gt;DocumentEvent&lt;/code&gt; gives the location of the change and the kind of change if desired. The code fragment might look something like:</source>
          <target state="translated">&lt;code&gt;java.awt.TextArea&lt;/code&gt; 의는 추가하는 것으로 써 변화를 모니터링 할 수있다 &lt;code&gt;TextListener&lt;/code&gt; 에 대한 &lt;code&gt;TextEvent&lt;/code&gt; 의 들. 에서 &lt;code&gt;JTextComponent&lt;/code&gt; 에 기초하여 구성 요소의 변화는 모델을 통해 방송된다 &lt;code&gt;DocumentEvent&lt;/code&gt; 에 &lt;code&gt;DocumentListeners&lt;/code&gt; . &lt;code&gt;DocumentEvent&lt;/code&gt; 변화의 위치 변경의 종류를 제공한다. 코드 조각은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="55efcc9383d4d056ce334accbd6b2bac39494936" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; has the ability to do line wrapping. This was controlled by the horizontal scrolling policy. Since scrolling is not done by &lt;code&gt;JTextArea&lt;/code&gt; directly, backward compatibility must be provided another way. &lt;code&gt;JTextArea&lt;/code&gt; has a bound property for line wrapping that controls whether or not it will wrap lines. By default, the line wrapping property is set to false (not wrapped).</source>
          <target state="translated">&lt;code&gt;java.awt.TextArea&lt;/code&gt; 의은 줄 바꿈을 할 수있는 능력을 가지고 있습니다. 이것은 수평 스크롤 정책에 의해 제어되었습니다. 스크롤링은 &lt;code&gt;JTextArea&lt;/code&gt; 에 의해 직접 수행되지 않으므로 이전 버전과의 호환성을 다른 방법으로 제공해야합니다. &lt;code&gt;JTextArea&lt;/code&gt; 에는 줄 바꿈 여부를 제어하는 ​​줄 바꿈에 대한 바운드 속성이 있습니다. 기본적으로 줄 바꿈 속성은 false (줄 바꿈되지 않음)로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="c0fcfe43cbce6a18be4a70c21673c0e92d35fccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; internally handles scrolling. &lt;code&gt;JTextArea&lt;/code&gt; is different in that it doesn't manage scrolling, but implements the swing &lt;code&gt;Scrollable&lt;/code&gt; interface. This allows it to be placed inside a &lt;code&gt;JScrollPane&lt;/code&gt; if scrolling behavior is desired, and used directly if scrolling is not desired.</source>
          <target state="translated">&lt;code&gt;java.awt.TextArea&lt;/code&gt; 의는 내부적으로 스크롤을 처리합니다. &lt;code&gt;JTextArea&lt;/code&gt; 는 스크롤링을 관리하지 않고 스윙 &lt;code&gt;Scrollable&lt;/code&gt; 인터페이스를 구현한다는 점에서 다릅니다 . 이렇게하면 스크롤 동작이 필요한 경우 &lt;code&gt;JScrollPane&lt;/code&gt; 내부에 배치 할 수 있고 스크롤을 원하지 않는 경우 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0db34ffc0a9406c8096ce234b9fa75533ba4eff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextField&lt;/code&gt; could be monitored for changes by adding a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;'s. In the &lt;code&gt;JTextComponent&lt;/code&gt; based components, changes are broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;. The &lt;code&gt;DocumentEvent&lt;/code&gt; gives the location of the change and the kind of change if desired. The code fragment might look something like:</source>
          <target state="translated">&lt;code&gt;java.awt.TextField&lt;/code&gt; 의는 추가하는 것으로 써 변화를 모니터링 할 수있다 &lt;code&gt;TextListener&lt;/code&gt; 에 대한 &lt;code&gt;TextEvent&lt;/code&gt; 의 의를. 에서 &lt;code&gt;JTextComponent&lt;/code&gt; 에 기초하여 구성 요소의 변화는 모델을 통해 방송된다 &lt;code&gt;DocumentEvent&lt;/code&gt; 에 &lt;code&gt;DocumentListeners&lt;/code&gt; . &lt;code&gt;DocumentEvent&lt;/code&gt; 변화의 위치 변경의 종류를 제공한다. 코드 조각은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bec8b9be4298b00c09430efa2b0f3eff6e4f2e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package contains dynamic language support provided directly by the Java core class libraries and virtual machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; 의 패키지는 자바 코어 클래스 라이브러리 및 가상 머신에 의해 직접 제공 동적 언어 지원이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0a41816ff2f5ea5a0a95f8f418989d42132101f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package provides low-level primitives for interacting with the Java Virtual Machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; 의 패키지는 자바 가상 머신과 상호 작용을위한 저수준 요소를 제공한다.</target>
        </trans-unit>
        <trans-unit id="8f060dd8b6798a7705664964cbd779c5052966d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.runtime&lt;/code&gt; package provides low-level runtime support for the Java language.</source>
          <target state="translated">&lt;code&gt;java.lang.runtime&lt;/code&gt; 패키지는 자바 언어에 대한 낮은 수준의 런타임 지원을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e2e6b7ef82a944f100ddc377e04a645035f44c50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.nio&lt;/code&gt; package defines the buffer classes, which are used throughout the NIO APIs. The charset API is defined in the &lt;a href=&quot;charset/package-summary&quot;&gt;&lt;code&gt;java.nio.charset&lt;/code&gt;&lt;/a&gt; package, and the channel and selector APIs are defined in the &lt;a href=&quot;channels/package-summary&quot;&gt;&lt;code&gt;java.nio.channels&lt;/code&gt;&lt;/a&gt; package. Each of these subpackages has its own service-provider (SPI) subpackage, the contents of which can be used to extend the platform's default implementations or to construct alternative implementations.</source>
          <target state="translated">&lt;code&gt;java.nio&lt;/code&gt; 에서의 패키지는 NIO API 전체로 사용하는 버퍼 클래스를 정의한다. charset API는 &lt;a href=&quot;charset/package-summary&quot;&gt; &lt;code&gt;java.nio.charset&lt;/code&gt; &lt;/a&gt; 패키지에 정의되어 있으며 채널 및 선택기 API는 &lt;a href=&quot;channels/package-summary&quot;&gt; &lt;code&gt;java.nio.channels&lt;/code&gt; &lt;/a&gt; 패키지에 정의되어 있습니다. 각 서브 패키지에는 자체 SPI (Service-Provider) 서브 패키지가 있으며 그 내용은 플랫폼의 기본 구현을 확장하거나 대체 구현을 구성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="169158b25e43c0b1b051996b7d7ecf8990270082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as &lt;code&gt;java.lang.Object&lt;/code&gt;, because the code for a proxy class is generated by trusted system code. This protection domain will typically be granted &lt;code&gt;java.security.AllPermission&lt;/code&gt;.</source>
          <target state="translated">프록시 클래스 의 코드는 신뢰할 수있는 시스템 코드에 의해 생성되므로 프록시 클래스 의 &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; 은 부트 스트랩 클래스 로더가로드 한 시스템 클래스 (예 : &lt;code&gt;java.lang.Object&lt;/code&gt; ) 와 동일 합니다. 이 보호 도메인에는 일반적으로 &lt;code&gt;java.security.AllPermission&lt;/code&gt; 이 부여 됩니다.</target>
        </trans-unit>
        <trans-unit id="9813f685206a1823081b6d834a2cc39d317ab3f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl &lt;/code&gt; package provides the interfaces to the ACL and related data structures (ACL entries, groups, permissions, etc.), and the &lt;code&gt;sun.security.acl &lt;/code&gt; classes provide a default implementation of the interfaces. For example, &lt;code&gt;java.security.acl.Acl &lt;/code&gt; provides the interface to an ACL and the &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; class provides the default implementation of the interface.</source>
          <target state="translated">&lt;code&gt;java.security.acl &lt;/code&gt; 의 용 패키지는 ACL 및 관련된 데이터 구조에 대한 인터페이스 (ACL 엔트리 그룹, 권한 등)를 제공하고, &lt;code&gt;sun.security.acl &lt;/code&gt; 클래스 인터페이스의 기본 구현을 제공한다. 예를 들어, &lt;code&gt;java.security.acl.Acl &lt;/code&gt; 은 ACL에 대한 인터페이스를 제공하고 &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; 클래스는 인터페이스의 기본 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cfb4c2fdc7d8d17ba626b9a63de7a2721320820c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl.Acl &lt;/code&gt; interface extends the &lt;code&gt;java.security.acl.Owner &lt;/code&gt; interface. The Owner interface is used to maintain a list of owners for each ACL. Only owners are allowed to modify an ACL. For example, only an owner can call the ACL's &lt;code&gt;addEntry&lt;/code&gt; method to add a new ACL entry to the ACL.</source>
          <target state="translated">&lt;code&gt;java.security.acl.Acl &lt;/code&gt; 의의 인터페이스는 확장 &lt;code&gt;java.security.acl.Owner &lt;/code&gt; 에의 인터페이스를. 소유자 인터페이스는 각 ACL의 소유자 목록을 유지하는 데 사용됩니다. 소유자 만 ACL을 수정할 수 있습니다. 예를 들어, 소유자 만 ACL의 &lt;code&gt;addEntry&lt;/code&gt; 메소드를 호출하여 ACL 에 새 ACL 항목을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="784b90ba50939cbb669846b289f22423e455bd4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.sql&lt;/code&gt; package contains API for the following:</source>
          <target state="translated">&lt;code&gt;java.sql&lt;/code&gt; 패키지는 다음을위한 API가 포함되어 있습니다</target>
        </trans-unit>
        <trans-unit id="c584f80333ee86bf0587299c7f49da992c3a95b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.time.chrono&lt;/code&gt; package contains the calendar neutral API &lt;a href=&quot;chrono/chronolocaldate&quot;&gt;&lt;code&gt;ChronoLocalDate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt;&lt;code&gt;ChronoLocalDateTime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt;&lt;code&gt;ChronoZonedDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;chrono/era&quot;&gt;&lt;code&gt;Era&lt;/code&gt;&lt;/a&gt;. This is intended for use by applications that need to use localized calendars. It is recommended that applications use the ISO-8601 date and time classes from this package across system boundaries, such as to the database or across the network. The calendar neutral API should be reserved for interactions with users.</source>
          <target state="translated">&lt;code&gt;java.time.chrono&lt;/code&gt; 의 패키지는 달력 중립 API 포함 &lt;a href=&quot;chrono/chronolocaldate&quot;&gt; &lt;code&gt;ChronoLocalDate&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt; &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt; &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;chrono/era&quot;&gt; &lt;code&gt;Era&lt;/code&gt; &lt;/a&gt; . 현지화 된 달력을 사용해야하는 응용 프로그램에서 사용하기위한 것입니다. 응용 프로그램은 데이터베이스 또는 네트워크와 같은 시스템 경계에서이 패키지의 ISO-8601 날짜 및 시간 클래스를 사용하는 것이 좋습니다. 캘린더 중립 API는 사용자와의 상호 작용을 위해 예약되어야합니다.</target>
        </trans-unit>
        <trans-unit id="03e8a4f31755534e88e5baa019171c02ab0e0e1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.util.jar&lt;/code&gt; package is based on the following specifications:</source>
          <target state="translated">&lt;code&gt;java.util.jar&lt;/code&gt; 패키지는 다음과 같은 사양을 기반으로합니다 :</target>
        </trans-unit>
        <trans-unit id="dd3f9283b71471748cf9a84dacce07bc07e230bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining image input and output streams, as well as a run-time registry that discovers installed instances of Image I/O service providers and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; 의의 패키지는 발견하여 이미지의 경우 I / O 서비스 제공 업체를 설치하고 새로운 수 있다는 점, 읽기, 쓰기 및 이미지를 트랜스 코딩, 이미지 입력 및 출력 스트림을 취득뿐만 아니라 런타임 레지스트리에 대한 서비스 프로 바이더 인터페이스를 포함 동적으로 등록 할 인스턴스.</target>
        </trans-unit>
        <trans-unit id="31f5723f716d2e10c3dc95d349885c1c4063b2cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining input and output streams, as well as a run-time registry that discovers installed service provider instances and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; 의의 패키지는 읽기, 쓰기, 및 트랜스 코딩 이미지 및 획득 입력 및 출력 스트림을위한 서비스 프로 바이더 인터페이스뿐만 아니라 발견하여 서비스 프로 바이더 인스턴스를 설치하고 새로운 인스턴스를 동적으로 등록 할 수 있도록하는 런타임 레지스트리가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f9893bf2cb21c5852d399c228329581eed4bc85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt; RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; 의의 패키지는 속성과 그들이 어떻게 세트에 수집되는 유형을 설명합니다. &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 패키지는 IETF 사양에 지정된 속성의 구현입니다 대부분의 API가 지원하는 표준 속성의 모든 열거 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;모델 및 의미 : RFC 2911 인터넷 인쇄 프로토콜, 1.1&lt;/a&gt; 2000 년 9 월 일자를, &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 에 지정된 속성 에는 해상도, 사본, 용지 크기, 작업 우선 순위 및 페이지 범위와 같은 공통 기능이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c52c82c2dc7611fe0c69651dc489e948a8470acb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; 의의 패키지는 속성과 그들이 어떻게 세트에 수집되는 유형을 설명합니다. &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 패키지는 IETF 사양에 지정된 속성의 구현입니다 대부분의 API가 지원하는 표준 속성의 모든 열거 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;모델 및 의미 : RFC 2911 인터넷 인쇄 프로토콜, 1.1&lt;/a&gt; 2000 년 9 월 일자를, &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 에 지정된 속성 에는 해상도, 사본, 용지 크기, 작업 우선 순위 및 페이지 범위와 같은 공통 기능이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f2cf594265efb7b9fc2edd8226233f1ddb5455a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;https://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; 의의 패키지는 속성과 그들이 어떻게 세트에 수집되는 유형을 설명합니다. &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 패키지는 IETF 사양에 지정된 속성의 구현입니다 대부분의 API가 지원하는 표준 속성의 모든 열거 &lt;a href=&quot;https://www.ietf.org/rfc/rfc2911.txt&quot;&gt;모델 및 의미 : RFC 2911 인터넷 인쇄 프로토콜, 1.1&lt;/a&gt; 2000 년 9 월 일자를, &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; 에 지정된 속성 에는 해상도, 사본, 용지 크기, 작업 우선 순위 및 페이지 범위와 같은 공통 기능이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f1ac81c4983fd4e99cf0a56e6178b754e13e7442" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package includes &lt;a href=&quot;hashattributeset&quot;&gt;HashAttributeSet&lt;/a&gt; as a concrete implementation of the attribute set interface. &lt;code&gt;HashAttributeSet&lt;/code&gt; provides an attribute set based on a hash map. You can use this implementation or provide your own implementation of interface &lt;code&gt;AttributeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; 의의 패키지는 포함 &lt;a href=&quot;hashattributeset&quot;&gt;을 HashAttributeSet를&lt;/a&gt; 속성 세트 인터페이스의 구체적인 구현한다. &lt;code&gt;HashAttributeSet&lt;/code&gt; 은 해시 맵을 기반으로하는 속성 세트를 제공합니다. 이 구현을 사용하거나 &lt;code&gt;AttributeSet&lt;/code&gt; 인터페이스의 자체 구현을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce40bf00e14dc3ae69324c9a349e2c2ebf3d4866" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.sql&lt;/code&gt; package provides for the following:</source>
          <target state="translated">&lt;code&gt;javax.sql&lt;/code&gt; 패키지는 다음을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="054bef0e67b4c84386043a510c836ef1eefccd8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.sql&lt;/code&gt; package provides the preferred way to make a connection with a data source. The &lt;code&gt;DriverManager&lt;/code&gt; class, the original mechanism, is still valid, and code using it will continue to run. However, the newer &lt;code&gt;DataSource&lt;/code&gt; mechanism is preferred because it offers many advantages over the &lt;code&gt;DriverManager&lt;/code&gt; mechanism.</source>
          <target state="translated">&lt;code&gt;javax.sql&lt;/code&gt; 패키지는 데이터 소스와의 접속을 할 수있는 좋은 방법을 제공합니다. &lt;code&gt;DriverManager&lt;/code&gt; 클래스, 원래의 메커니즘은 여전히 유효하고, 그것을 사용하는 코드는 계속 실행됩니다. 그러나 최신 &lt;code&gt;DataSource&lt;/code&gt; 메커니즘은 &lt;code&gt;DriverManager&lt;/code&gt; 메커니즘에 비해 많은 이점을 제공하기 때문에 선호 됩니다.</target>
        </trans-unit>
        <trans-unit id="78270c76347c7770cb655e4c785215d8bdb0d512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.defer&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#DEFER&quot;&gt;DEFER&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.defer&lt;/code&gt; 의 항목에 설명 된대로 재산 &lt;a href=&quot;catalogfeatures#DEFER&quot;&gt;DEFER&lt;/a&gt; 카탈로그의 테이블 특징.</target>
        </trans-unit>
        <trans-unit id="15d2ad6f93e03730ebc25b9f11249586e69ac782" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.files&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#FILES&quot;&gt;FILES&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.files&lt;/code&gt; 의 항목에 설명 된대로 재산 &lt;a href=&quot;catalogfeatures#FILES&quot;&gt;FILES&lt;/a&gt; 카탈로그의 테이블 특징.</target>
        </trans-unit>
        <trans-unit id="9fc2f2e095ade91fa2f052d206896d8dfe4877e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.prefer&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#PREFER&quot;&gt;PREFER&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.prefer&lt;/code&gt; 의 항목에 설명 된대로 자산 &lt;a href=&quot;catalogfeatures#PREFER&quot;&gt;선호&lt;/a&gt; 카탈로그의 테이블 특징.</target>
        </trans-unit>
        <trans-unit id="db3821d6c87a43457aa9b8813d01a7019a6129e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#RESOLVE&quot;&gt;RESOLVE&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; 항목에 설명 된대로 재산 &lt;a href=&quot;catalogfeatures#RESOLVE&quot;&gt;RESOLVE&lt;/a&gt; 카탈로그의 테이블 특징.</target>
        </trans-unit>
        <trans-unit id="93789cdb1067b60dea1052c68162e9476ca283fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jaxp.properties&lt;/code&gt; file is typically in the conf directory of the Java installation. The file is read only once by the JAXP implementation and its values are then cached for future use. If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence. It is not possible to change the value of any properties in &lt;code&gt;jaxp.properties&lt;/code&gt; after it has been read.</source>
          <target state="translated">&lt;code&gt;jaxp.properties&lt;/code&gt; 의 파일은 Java 설치의 conf 디렉토리에 일반적입니다. 파일은 JAXP 구현에 의해 한 번만 읽히고 해당 값은 나중에 사용하기 위해 캐시됩니다. 파일을 처음 읽으려고 할 때 파일이 존재하지 않으면 그 존재를 확인하기 위해 더 이상 시도하지 않습니다. &lt;code&gt;jaxp.properties&lt;/code&gt; 를 읽은 후에는 속성 값을 변경할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="e2a7485770f758bc31860b6c07b8541a8b9eeb14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jdbc.drivers&lt;/code&gt; system property which contains a colon separated list of fully qualified class names of JDBC drivers. Each driver is loaded using the &lt;a href=&quot;../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;system class loader&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;jdbc.drivers&lt;/code&gt; 콜론이 포함되어 시스템 속성은 JDBC 드라이버의 완전한 클래스 이름의 목록을 분리했다. 각 드라이버는 &lt;a href=&quot;../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;시스템 클래스 로더를&lt;/a&gt; 사용하여로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="a71eaf9975dc38ac7aef813701422744379f589d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jpackage&lt;/code&gt; tool is not thread-safe. An application should not call either of the &lt;a href=&quot;../java.base/java/util/spi/toolprovider&quot;&gt;&lt;code&gt;ToolProvider&lt;/code&gt;&lt;/a&gt;&lt;code&gt;run&lt;/code&gt; methods concurrently, even with separate &lt;code&gt;&quot;jpackage&quot;&lt;/code&gt;&lt;code&gt;ToolProvider&lt;/code&gt; instances, or undefined behavior may result.</source>
          <target state="translated">&lt;code&gt;jpackage&lt;/code&gt; 의 도구는 스레드 안전하지 않습니다. 응용 프로그램은 별도의 &lt;code&gt;&quot;jpackage&quot;&lt;/code&gt; &lt;code&gt;ToolProvider&lt;/code&gt; 인스턴스를 사용 하더라도 &lt;a href=&quot;../java.base/java/util/spi/toolprovider&quot;&gt; &lt;code&gt;ToolProvider&lt;/code&gt; &lt;/a&gt; &lt;code&gt;run&lt;/code&gt; 메서드를 동시에 호출해서는 안됩니다. 그렇지 않으면 정의되지 않은 동작이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4512a267bf8a4a8b628ff06249f45a97a9013e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of a directive.</source>
          <target state="translated">지시어 의 &lt;code&gt;kind&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="766e65fec5bf118351de7f21179d89ba7379dbda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of an element.</source>
          <target state="translated">요소 의 &lt;code&gt;kind&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="583ea0cb6650b486f04f1d06cd030a009d684d42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;krb5.conf&lt;/code&gt; file is formatted in the Windows INI file style, which contains a series of relations grouped into different sections. Each relation contains a key and a value, the value can be an arbitrary string or a boolean value. A boolean value can be one of &quot;true&quot;, &quot;false&quot;, &quot;yes&quot;, or &quot;no&quot;, and values are case-insensitive.</source>
          <target state="translated">&lt;code&gt;krb5.conf&lt;/code&gt; 파일은 다른 섹션으로 그룹화 관계의 시리즈를 포함하는 윈도우 INI 파일 스타일에 지정됩니다. 각 관계에는 키와 값이 포함되며 값은 임의의 문자열 또는 부울 값이 될 수 있습니다. 부울 값은 &quot;true&quot;, &quot;false&quot;, &quot;yes&quot;또는 &quot;no&quot;중 하나 일 수 있으며 값은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fbe5ef5eb552727a780a36060063e8f5dc9148f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layeredPane&lt;/code&gt; fills the entire viewable area of the &lt;code&gt;JRootPane&lt;/code&gt;. (bounds - insets)</source>
          <target state="translated">&lt;code&gt;layeredPane&lt;/code&gt; 의 전체 가시 영역 채운다 &lt;code&gt;JRootPane&lt;/code&gt; . (경계-삽입)</target>
        </trans-unit>
        <trans-unit id="3cfb47b698c324c8e60c3a7f81085135ef605f6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layeredPane&lt;/code&gt; is the parent of all children in the &lt;code&gt;JRootPane&lt;/code&gt; -- both as the direct parent of the menu and the grandparent of all components added to the &lt;code&gt;contentPane&lt;/code&gt;. It is an instance of &lt;code&gt;JLayeredPane&lt;/code&gt;, which provides the ability to add components at several layers. This capability is very useful when working with menu popups, dialog boxes, and dragging -- situations in which you need to place a component on top of all other components in the pane.</source>
          <target state="translated">&lt;code&gt;layeredPane&lt;/code&gt; 에있는 모든 어린이의 부모 &lt;code&gt;JRootPane&lt;/code&gt; 의 두 메뉴의 직접적인 부모와에 추가 된 모든 구성 요소의 조부모 등 - &lt;code&gt;contentPane&lt;/code&gt; . 여러 계층에 구성 요소를 추가하는 기능을 제공하는 &lt;code&gt;JLayeredPane&lt;/code&gt; 의 인스턴스입니다 . 이 기능은 메뉴 팝업, 대화 상자 및 드래그 작업 (창의 다른 모든 구성 요소 위에 구성 요소를 배치해야하는 상황)에 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="bbb82873975dbeba0e74c27fbee85cbfbbfbdc0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ldc&lt;/code&gt; instruction makes use of bootstrap &lt;code&gt;MethodHandle&lt;/code&gt; constants to dynamically resolve custom constant values.</source>
          <target state="translated">&lt;code&gt;ldc&lt;/code&gt; 명령 차종은 부트 스트랩의 사용 &lt;code&gt;MethodHandle&lt;/code&gt; 의 동적의 해결 사용자 정의 상수 값으로 상수.</target>
        </trans-unit>
        <trans-unit id="a5fbfe70cef778b32594cced3a732339cbc1acf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 의 인수가 부의이다.</target>
        </trans-unit>
        <trans-unit id="5c30faee739e118e9dbf221fbacf126dc2e548ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument must be less than or equal to &lt;code&gt;buf.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 인수 미만이거나에 동일해야 &lt;code&gt;buf.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c1ab860b5d9fdfdc8cacefe29fa6bee88d721891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; 파라미터는 패턴이 적용되는 횟수를 제어하기 때문에, 결과 어레이의 길이에 영향을 미친다.</target>
        </trans-unit>
        <trans-unit id="a20aaa21bfe3d598720524fef65f51974af49fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; 파라미터는 패턴이 적용되는 횟수를 제어하기 때문에, 결과 어레이의 길이에 영향을 미친다. 한도</target>
        </trans-unit>
        <trans-unit id="7227cc8a8f47600f7a135282736709ff73dd62b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; parameter locates the directory entry to create. The &lt;code&gt;existing&lt;/code&gt; parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using &lt;code&gt;link&lt;/code&gt; as the path. On some file systems this is known as creating a &quot;hard link&quot;. Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; 매개 변수를 만들 수있는 디렉토리 항목을 찾습니다. &lt;code&gt;existing&lt;/code&gt; 매개 변수는 기존 파일의 경로입니다. 이 메소드는 &lt;code&gt;link&lt;/code&gt; 를 경로로 사용하여 액세스 할 수 있도록 파일의 새 디렉토리 항목을 작성합니다 . 일부 파일 시스템에서는이를 &quot;하드 링크&quot;라고합니다. 파일 속성이 파일 또는 각 디렉토리 항목에 대해 유지 보수되는지 여부는 파일 시스템마다 다르므로 지정되지 않습니다. 일반적으로 파일 시스템에서는 파일의 모든 링크 (디렉토리 항목)가 동일한 파일 시스템에 있어야합니다. 또한 일부 플랫폼에서 Java 가상 머신은 하드 링크를 작성하거나 디렉토리에 대한 링크를 작성하기 위해 구현 특정 권한으로 시작해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d151fce3015e4ed9e5cd20051237afb5cefea88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listIterator(int)&lt;/code&gt; method returns a &quot;wrapper object&quot; over a list iterator on the backing list, which is created with the corresponding method on the backing list. The &lt;code&gt;iterator&lt;/code&gt; method merely returns &lt;code&gt;listIterator()&lt;/code&gt;, and the &lt;code&gt;size&lt;/code&gt; method merely returns the subclass's &lt;code&gt;size&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;listIterator(int)&lt;/code&gt; 에있어서, 상기 배면에서의 대응하는 방법으로 생성되는 배킹리스트의리스트 반복자는 &quot;래퍼 객체&quot;를 리턴한다. &lt;code&gt;iterator&lt;/code&gt; 방법은 단순히 반환 &lt;code&gt;listIterator()&lt;/code&gt; 하고, &lt;code&gt;size&lt;/code&gt; 방법은 단지 서브 클래스의 반환 &lt;code&gt;size&lt;/code&gt; 필드.</target>
        </trans-unit>
        <trans-unit id="2c77410030181476fea1a68458124459ebc9a9bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; listens to property changes only in this context.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 단지이 상황에서 속성 변경을 대기.</target>
        </trans-unit>
        <trans-unit id="1fedd930e38f5398c449c705300b0fc17b0566c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;loadClass&lt;/code&gt; 클래스의 메소드 &lt;code&gt;ClassLoader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df54bb2871f3875ee6a1a7f2fe8a7beb4fbe0bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; simply returns the component itself if the (</source>
          <target state="translated">&lt;code&gt;Component&lt;/code&gt; 의 &lt;code&gt;locate&lt;/code&gt; 메소드 는 (</target>
        </trans-unit>
        <trans-unit id="9577d55fc0aa6d8010723707a44862242076491d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookupEndpoints&lt;/code&gt; method of each provider, if instantiated, is invoked once with a combination of each of the URLs in the the &lt;code&gt;java.naming.provider.url&lt;/code&gt; property and the environment until a provider returns non-empty or all providers have been exhausted. If none of the &lt;a href=&quot;../ldap/spi/ldapdnsprovider&quot;&gt;LdapDnsProviders&lt;/a&gt; return a non-empty &lt;a href=&quot;../ldap/spi/ldapdnsproviderresult&quot;&gt;result&lt;/a&gt; then the implementation will make a best-effort attempt to determine an endpoint. A &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt;ServiceConfigurationError&lt;/a&gt;, &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;RuntimeException&lt;/code&gt; thrown when loading or calling an &lt;a href=&quot;../ldap/spi/ldapdnsprovider&quot;&gt;LdapDnsProvider&lt;/a&gt;, if encountered, will be propagated to the calling thread.</source>
          <target state="translated">인스턴스화 된 경우 각 공급자 의 &lt;code&gt;lookupEndpoints&lt;/code&gt; 메서드는 공급자가 비어 있지 않은 것을 반환하거나 모든 공급자가 고갈 될 때까지 &lt;code&gt;java.naming.provider.url&lt;/code&gt; 속성 및 환경 의 각 URL 조합으로 한 번 호출됩니다 . 의 어느 경우 &lt;a href=&quot;../ldap/spi/ldapdnsprovider&quot;&gt;LdapDnsProviders이&lt;/a&gt; 비어 반환하지 &lt;a href=&quot;../ldap/spi/ldapdnsproviderresult&quot;&gt;결과를&lt;/a&gt; 다음 구현은 엔드 포인트를 결정하는 것이 가장 노력을 시도합니다. &lt;a href=&quot;../ldap/spi/ldapdnsprovider&quot;&gt;LdapDnsProvider를&lt;/a&gt; 로드하거나 호출 할 때 throw 되는 &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt;ServiceConfigurationError&lt;/a&gt; , &lt;code&gt;Error&lt;/code&gt; 또는 &lt;code&gt;RuntimeException&lt;/code&gt; 이 발생하면 호출 스레드로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="6c9b144092edff275e75b32f1dca016975180187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapper&lt;/code&gt; function passed to &lt;code&gt;flatMap&lt;/code&gt; splits a line, using a simple regular expression, into an array of words, and then creates a stream of words from that array.</source>
          <target state="translated">&lt;code&gt;flatMap&lt;/code&gt; 에 전달 된 &lt;code&gt;mapper&lt;/code&gt; 함수 는 간단한 정규식을 사용하여 행을 단어 배열로 분할 한 다음 해당 배열에서 단어 스트림을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e7777926bab037130e9c4b41941f7d725a543594" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Person&lt;/code&gt;, to accumulate the set of last names in each city:</source>
          <target state="translated">&lt;code&gt;mapping()&lt;/code&gt; 등의 다운 스트림으로, 다단계 감소를 사용할 때 수집은 가장 유용 &lt;code&gt;groupingBy&lt;/code&gt; 또는 &lt;code&gt;partitioningBy&lt;/code&gt; . 예를 들어, &lt;code&gt;Person&lt;/code&gt; 이라는 스트림이 주어지면 각 도시에 성 집합을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="903b585e02a8cfe6d8af38444d4c285b4ecfdab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InflaterInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InflaterInputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0371bac823202240bd6c72d5e06eb31b731df75c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e02e9dcce04c471816e17e93a8e7c8612865389" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; remembers the current line number in a private variable, and then calls the &lt;code&gt;mark&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드는 전용 변수의 현재 행 번호를 기억 한 다음 기본 입력 스트림 의 &lt;code&gt;mark&lt;/code&gt; 메소드 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="9baaba468b2b9ec943dee5d33e382f44cbd16e98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; 의 &lt;code&gt;mark&lt;/code&gt; 메소드 는 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="266811666f451efbcca8485179044d44787aa53c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markSupported()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;mark()&lt;/code&gt; and &lt;code&gt;reset()&lt;/code&gt; methods throw an &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;markSupported()&lt;/code&gt; 메서드는 반환 &lt;code&gt;false&lt;/code&gt; . &lt;code&gt;mark()&lt;/code&gt; 및 &lt;code&gt;reset()&lt;/code&gt; 메소드는 던져 &lt;code&gt;IOException&lt;/code&gt; 가 .</target>
        </trans-unit>
        <trans-unit id="24e3553f60a435975160a122db551ded68bc69d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markSupported()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;mark()&lt;/code&gt; method does nothing, and the &lt;code&gt;reset()&lt;/code&gt; method throws &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;markSupported()&lt;/code&gt; 메서드는 반환 &lt;code&gt;false&lt;/code&gt; . &lt;code&gt;mark()&lt;/code&gt; 메소드는 아무것도하지 않습니다, 그리고 &lt;code&gt;reset()&lt;/code&gt; 메소드는 발생 &lt;code&gt;IOException&lt;/code&gt; 가 .</target>
        </trans-unit>
        <trans-unit id="6554f1607ef695c0c64cabf2785fd9a958b83486" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;marshal&lt;/code&gt; method of &lt;code&gt;KeyInfo&lt;/code&gt; MUST support &lt;code&gt;DOMStructure&lt;/code&gt; and &lt;code&gt;DOMCryptoContext&lt;/code&gt; parameter types.</source>
          <target state="translated">&lt;code&gt;KeyInfo&lt;/code&gt; 의 &lt;code&gt;marshal&lt;/code&gt; 메소드는 &lt;code&gt;DOMStructure&lt;/code&gt; 및 &lt;code&gt;DOMCryptoContext&lt;/code&gt; 매개 변수 유형을 지원해야 합니다.</target>
        </trans-unit>
        <trans-unit id="77e5480e00ffc1e7db2c7cde3ede487453a10255" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; 매개 변수는 방문에 디렉토리 수준의 최대 수입니다. &lt;code&gt;0&lt;/code&gt; 값은 보안 관리자가 거부하지 않는 한 시작 파일 만 방문 함을 의미합니다. &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt; 값은 모든 레벨을 방문해야 함을 나타내는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18e28bc41e209ebe6c61a493b6c9622bd4b0c37d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;
 visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; 매개 변수는 방문에 디렉토리 수준의 최대 수입니다. &lt;code&gt;0&lt;/code&gt; 값은 보안 관리자가 거부하지 않는 한 시작 파일 만 방문 함을 의미합니다. &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt; 값을 사용하여 모든 레벨을 방문해야 함을 나타낼 수 있습니다. &lt;code&gt;visitFile&lt;/code&gt; 의 방법에서 발생하는 디렉토리를 포함한 모든 파일에 대한 호출 &lt;code&gt;maxDepth&lt;/code&gt; 이 경우 기본 파일 속성을 읽을 수 없습니다하지 않는 한, &lt;code&gt; visitFileFailed&lt;/code&gt; 의 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="259fe46dcadeee76b1ff944baef9fa3edc7fae57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; 매개 변수는 방문에 디렉토리 수준의 최대 수입니다. &lt;code&gt;0&lt;/code&gt; 값은 보안 관리자가 거부하지 않는 한 시작 파일 만 방문 함을 의미합니다. &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt; 값은 모든 레벨을 방문해야 함을 나타내는 데 사용될 수 있습니다. &lt;code&gt;visitFile&lt;/code&gt; 의 방법에서 발생하는 디렉토리를 포함한 모든 파일에 대한 호출 &lt;code&gt;maxDepth&lt;/code&gt; 이 경우 기본 파일 속성을 읽을 수 없습니다하지 않는 한, &lt;code&gt;visitFileFailed&lt;/code&gt; 의 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e7185a792bfbe5991a400ad88da03cbdb0d16fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxOutStreams&lt;/code&gt; and &lt;code&gt;maxInStreams&lt;/code&gt; parameters represent the maximum number of streams that the application wishes to be able to send to and receive from. They are negotiated with the remote peer and may be limited by the operating system.</source>
          <target state="translated">&lt;code&gt;maxOutStreams&lt;/code&gt; 및 &lt;code&gt;maxInStreams&lt;/code&gt; 의 매개 변수는 응용 프로그램에 보내고에서받을 수하고자하는 것을 스트림의 최대 수를 나타냅니다. 원격 피어와 협상되며 운영 체제에 의해 제한 될 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
