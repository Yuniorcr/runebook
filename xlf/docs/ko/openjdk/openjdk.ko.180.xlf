<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="170446f14af0c3b5edf1e2175605649be1920422" translate="yes" xml:space="preserve">
          <source>W3C XML Schema 1.0</source>
          <target state="translated">W3C XML 스키마 1.0</target>
        </trans-unit>
        <trans-unit id="37586f773561615e8929c9418faba3b4a6a22221" translate="yes" xml:space="preserve">
          <source>W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</source>
          <target state="translated">W3C XML 스키마 1.0 파트 2, 부록 D, ISO 8601 날짜 및 시간 형식</target>
        </trans-unit>
        <trans-unit id="77d0e99768248c6081369e0598fd5cf03d27af2e" translate="yes" xml:space="preserve">
          <source>W3C XML Schema 1.0 Part 2, Section 3.2.7-14</source>
          <target state="translated">W3C XML 스키마 1.0 파트 2, 섹션 3.2.7-14</target>
        </trans-unit>
        <trans-unit id="271c8d39a4392e9a0a2de219da136491c71de5d1" translate="yes" xml:space="preserve">
          <source>W3C XML Schema Data Type</source>
          <target state="translated">W3C XML 스키마 데이터 유형</target>
        </trans-unit>
        <trans-unit id="c2662a24f5eb4cfc1c0048662fdf479ff933df83" translate="yes" xml:space="preserve">
          <source>W3C XML Schema Instance Namespace URI.</source>
          <target state="translated">W3C XML 스키마 인스턴스 네임 스페이스 URI.</target>
        </trans-unit>
        <trans-unit id="82e488d4f831e35263673137dd6418f2df5380e2" translate="yes" xml:space="preserve">
          <source>W3C XML Schema Namespace URI.</source>
          <target state="translated">W3C XML 스키마 네임 스페이스 URI.</target>
        </trans-unit>
        <trans-unit id="84bf3d44dfe2e52293cb8a13de350992d23c0d74" translate="yes" xml:space="preserve">
          <source>W3C XML Schema data types that have a &quot;&lt;em&gt;natural&lt;/em&gt;&quot; mapping to Java types are defined by JSR 31: Java Architecture for XML Binding (JAXB) Specification, Binding XML Schema to Java Representations. JAXB defined mappings for XML Schema built-in data types include:</source>
          <target state="translated">Java 유형에 대한 &quot; &lt;em&gt;자연스러운&lt;/em&gt; &quot;매핑 이있는 W3C XML 스키마 데이터 유형은 JSR 31 : JAXB (Java Architecture for XML Binding) 사양, XML 스키마를 Java 표현에 바인딩에 의해 정의됩니다. XML 스키마 내장 데이터 유형에 대한 JAXB 정의 맵핑은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ffaa3df1fc8b0442dd2ac58849dce19642c68925" translate="yes" xml:space="preserve">
          <source>W3C XML Schema data types that have a &quot;&lt;em&gt;natural&lt;/em&gt;&quot; mapping to Java types are defined by JSR 31: Java&amp;trade; Architecture for XML Binding (JAXB) Specification, Binding XML Schema to Java Representations. JAXB defined mappings for XML Schema built-in data types include:</source>
          <target state="translated">Java 유형에 대한 &quot; &lt;em&gt;자연&lt;/em&gt; &quot;맵핑 이있는 W3C XML 스키마 데이터 유형은 JSR 31 : JAXB (Java &amp;trade; Architecture for XML Binding) 스펙, XML 스키마를 Java 표현에 바인딩에 의해 정의됩니다. XML 스키마 내장 데이터 유형에 대한 JAXB 정의 맵핑은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a761a1b61a68301345dca838116ba86c93849e7d" translate="yes" xml:space="preserve">
          <source>W3C XML Schema max timezone offset is -14:00.</source>
          <target state="translated">W3C XML 스키마 최대 시간대 오프셋은 -14 : 00입니다.</target>
        </trans-unit>
        <trans-unit id="ba00d5307494d8298fcec94af8aa33278a51de05" translate="yes" xml:space="preserve">
          <source>W3C XML Schema max timezone offset is -14:00. Zone offset is in minutes.</source>
          <target state="translated">W3C XML 스키마 최대 시간대 오프셋은 -14 : 00입니다. 구역 오프셋은 분 단위입니다.</target>
        </trans-unit>
        <trans-unit id="f1ba4ba235f2b16bd8d96965919b13e4c57aea93" translate="yes" xml:space="preserve">
          <source>W3C XML Schema min timezone offset is +14:00.</source>
          <target state="translated">W3C XML 스키마 최소 시간대 오프셋은 +14 : 00입니다.</target>
        </trans-unit>
        <trans-unit id="cb5e294b315aa8b940877f2d9f7afcd5867f5239" translate="yes" xml:space="preserve">
          <source>W3C XML Schema min timezone offset is +14:00. Zone offset is in minutes.</source>
          <target state="translated">W3C XML 스키마 최소 시간대 오프셋은 +14 : 00입니다. 구역 오프셋은 분 단위입니다.</target>
        </trans-unit>
        <trans-unit id="63aa49bdd6eace38cc5a1a490b7a570e23754674" translate="yes" xml:space="preserve">
          <source>W3C XML Schema/Java Type Mappings</source>
          <target state="translated">W3C XML 스키마 / 자바 유형 매핑</target>
        </trans-unit>
        <trans-unit id="6f88114b7a3a3b003272de4b3310ad49e63118f8" translate="yes" xml:space="preserve">
          <source>W3C XPath Datatype Namespace URI.</source>
          <target state="translated">W3C XPath 데이터 유형 네임 스페이스 URI.</target>
        </trans-unit>
        <trans-unit id="3d70d9a4e7af5c5acd8b7d87967c6559887d069d" translate="yes" xml:space="preserve">
          <source>W3C_LENGTH_UNITS</source>
          <target state="translated">W3C_LENGTH_UNITS</target>
        </trans-unit>
        <trans-unit id="56b3882ae7da2a0457386cf62046357c6e11049a" translate="yes" xml:space="preserve">
          <source>W3C_XML_SCHEMA_INSTANCE_NS_URI</source>
          <target state="translated">W3C_XML_SCHEMA_INSTANCE_NS_URI</target>
        </trans-unit>
        <trans-unit id="15d6c45b8f100a1de5044b3074aab5b39ee10103" translate="yes" xml:space="preserve">
          <source>W3C_XML_SCHEMA_NS_URI</source>
          <target state="translated">W3C_XML_SCHEMA_NS_URI</target>
        </trans-unit>
        <trans-unit id="cc837d56de0408bb2ac326794f32a1214d8bc10b" translate="yes" xml:space="preserve">
          <source>W3C_XPATH_DATATYPE_NS_URI</source>
          <target state="translated">W3C_XPATH_DATATYPE_NS_URI</target>
        </trans-unit>
        <trans-unit id="fa40942465857f664ea96930c1265cf73e3d0101" translate="yes" xml:space="preserve">
          <source>WAIS</source>
          <target state="translated">WAIS</target>
        </trans-unit>
        <trans-unit id="c271b656dedb85a67db52b58a06c052fe2ee23cc" translate="yes" xml:space="preserve">
          <source>WAITING</source>
          <target state="translated">WAITING</target>
        </trans-unit>
        <trans-unit id="4d6eec56cc4f076f9cc55092f478e2df2c607b64" translate="yes" xml:space="preserve">
          <source>WAIT_CURSOR</source>
          <target state="translated">WAIT_CURSOR</target>
        </trans-unit>
        <trans-unit id="101c43203a1a82572069e87c5288e77247fa4c44" translate="yes" xml:space="preserve">
          <source>WALL</source>
          <target state="translated">WALL</target>
        </trans-unit>
        <trans-unit id="225462bfb6556f3c24cf6d83becfd70d5f9d94e9" translate="yes" xml:space="preserve">
          <source>WALL_TIME</source>
          <target state="translated">WALL_TIME</target>
        </trans-unit>
        <trans-unit id="fdf489de6abf41d264e1a7aeea4ce59aa5cbd9a9" translate="yes" xml:space="preserve">
          <source>WANCHO</source>
          <target state="translated">WANCHO</target>
        </trans-unit>
        <trans-unit id="b3a0d21a0628d8bcfed93c1cb0f4f2031fae0a9e" translate="yes" xml:space="preserve">
          <source>WANTS_INPUT_PROPERTY</source>
          <target state="translated">WANTS_INPUT_PROPERTY</target>
        </trans-unit>
        <trans-unit id="2336c8cd0ff846d09239bd890b2dfd2f5b9f3b04" translate="yes" xml:space="preserve">
          <source>WARANG_CITI</source>
          <target state="translated">WARANG_CITI</target>
        </trans-unit>
        <trans-unit id="fd3edc641024a335a508fdacefb5f51ded5905cc" translate="yes" xml:space="preserve">
          <source>WARNING</source>
          <target state="translated">WARNING</target>
        </trans-unit>
        <trans-unit id="777d9894a8988f31ac1673a5e301f9ac39b37de4" translate="yes" xml:space="preserve">
          <source>WARNING is a message level indicating a potential problem.</source>
          <target state="translated">경고는 잠재적 인 문제를 나타내는 메시지 수준입니다.</target>
        </trans-unit>
        <trans-unit id="e9e69012c4cb989d3300b2fe8889ed233de2829c" translate="yes" xml:space="preserve">
          <source>WARNING message type.</source>
          <target state="translated">경고 메시지 유형.</target>
        </trans-unit>
        <trans-unit id="d94056adc4a50baf8bc7d81233c438daa91a1d21" translate="yes" xml:space="preserve">
          <source>WARNING: Aside from those keys that are defined by the Java language (VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_ constants. The platform steward reserves the right to change these values as needed to accommodate a wider range of keyboards in the future.</source>
          <target state="translated">경고 : Java 언어 (VK_ENTER, VK_BACK_SPACE 및 VK_TAB)에 의해 정의 된 키를 제외하고는 VK_ 상수 값에 의존하지 마십시오. 플랫폼 관리자는 향후 더 넓은 범위의 키보드를 수용하기 위해 필요에 따라 이러한 값을 변경할 권리를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="7d1674b5c146f7fb18afc62ad021342d8720b8c7" translate="yes" xml:space="preserve">
          <source>WARNING: No dithering takes place.</source>
          <target state="translated">WARNING: No dithering takes place.</target>
        </trans-unit>
        <trans-unit id="8f7e2444369b17f6a9e6d13672ae7fa705c05f63" translate="yes" xml:space="preserve">
          <source>WARNING_DIALOG</source>
          <target state="translated">WARNING_DIALOG</target>
        </trans-unit>
        <trans-unit id="0fdb63e04ed8f636c508025987f608fd6233e853" translate="yes" xml:space="preserve">
          <source>WARNING_MESSAGE</source>
          <target state="translated">WARNING_MESSAGE</target>
        </trans-unit>
        <trans-unit id="fb914d3ca1348f0c104408c5794fe186ea61f9b4" translate="yes" xml:space="preserve">
          <source>WAVE</source>
          <target state="translated">WAVE</target>
        </trans-unit>
        <trans-unit id="762dd6a7da550e7b6fdc00b417847fd608d3d449" translate="yes" xml:space="preserve">
          <source>WBMP</source>
          <target state="translated">WBMP</target>
        </trans-unit>
        <trans-unit id="441e113a8be2d0d25038d1f2e4db42495ebe43bb" translate="yes" xml:space="preserve">
          <source>WBMP metadata</source>
          <target state="translated">WBMP 메타 데이터</target>
        </trans-unit>
        <trans-unit id="08a5164936a6007b1abd2d96d96fb4f14a463abb" translate="yes" xml:space="preserve">
          <source>WBMP metadata format</source>
          <target state="translated">WBMP 메타 데이터 형식</target>
        </trans-unit>
        <trans-unit id="6e5801dcccbfde2a61ceca25ae96d3e75c518efe" translate="yes" xml:space="preserve">
          <source>WEAK_COMPARE_AND_SET</source>
          <target state="translated">WEAK_COMPARE_AND_SET</target>
        </trans-unit>
        <trans-unit id="3783cde1d6e5911aaab1d5ab97e08f789c60850d" translate="yes" xml:space="preserve">
          <source>WEAK_COMPARE_AND_SET_ACQUIRE</source>
          <target state="translated">WEAK_COMPARE_AND_SET_ACQUIRE</target>
        </trans-unit>
        <trans-unit id="70e04de5609ecd79a8fbff809af628951f2ab16a" translate="yes" xml:space="preserve">
          <source>WEAK_COMPARE_AND_SET_PLAIN</source>
          <target state="translated">WEAK_COMPARE_AND_SET_PLAIN</target>
        </trans-unit>
        <trans-unit id="d326a6137b4f3dc410a47c8858504305dc17e2c5" translate="yes" xml:space="preserve">
          <source>WEAK_COMPARE_AND_SET_RELEASE</source>
          <target state="translated">WEAK_COMPARE_AND_SET_RELEASE</target>
        </trans-unit>
        <trans-unit id="a86e95a3de6c6d679d6527aad5d93c5216555e6f" translate="yes" xml:space="preserve">
          <source>WEDNESDAY</source>
          <target state="translated">WEDNESDAY</target>
        </trans-unit>
        <trans-unit id="269ec4fae923a139b94c8dd206cdddcb59b23aa6" translate="yes" xml:space="preserve">
          <source>WEEKS</source>
          <target state="translated">WEEKS</target>
        </trans-unit>
        <trans-unit id="6f1c3d0860aa987c5f6e26c58ffaad4fe52dec56" translate="yes" xml:space="preserve">
          <source>WEEK_BASED_YEAR</source>
          <target state="translated">WEEK_BASED_YEAR</target>
        </trans-unit>
        <trans-unit id="9ee8eb01243e91a5b269b562f28c884ccb95f401" translate="yes" xml:space="preserve">
          <source>WEEK_BASED_YEARS</source>
          <target state="translated">WEEK_BASED_YEARS</target>
        </trans-unit>
        <trans-unit id="c95b132075af91925d3c2134c3fe5f729c60f0b1" translate="yes" xml:space="preserve">
          <source>WEEK_OF_MONTH</source>
          <target state="translated">WEEK_OF_MONTH</target>
        </trans-unit>
        <trans-unit id="98b20d168600b565fc84f5f7957805b55c109649" translate="yes" xml:space="preserve">
          <source>WEEK_OF_MONTH_FIELD</source>
          <target state="translated">WEEK_OF_MONTH_FIELD</target>
        </trans-unit>
        <trans-unit id="846bf32311a73ea91eefa5bc3874bfd5749b75a1" translate="yes" xml:space="preserve">
          <source>WEEK_OF_WEEK_BASED_YEAR</source>
          <target state="translated">WEEK_OF_WEEK_BASED_YEAR</target>
        </trans-unit>
        <trans-unit id="9ce3e66f3ec1aa53225ad36212840b0d2fc47f5d" translate="yes" xml:space="preserve">
          <source>WEEK_OF_YEAR</source>
          <target state="translated">WEEK_OF_YEAR</target>
        </trans-unit>
        <trans-unit id="4a1fa630771f8e5cf64861a7b9e3c6637ca68c80" translate="yes" xml:space="preserve">
          <source>WEEK_OF_YEAR_FIELD</source>
          <target state="translated">WEEK_OF_YEAR_FIELD</target>
        </trans-unit>
        <trans-unit id="d9ce8f10bcdab56b0a48a10f5cc6fb6ed8d35088" translate="yes" xml:space="preserve">
          <source>WEIGHT</source>
          <target state="translated">WEIGHT</target>
        </trans-unit>
        <trans-unit id="798c3508b013fc0e7795592c7e89393fcb1a7301" translate="yes" xml:space="preserve">
          <source>WEIGHT_BOLD</source>
          <target state="translated">WEIGHT_BOLD</target>
        </trans-unit>
        <trans-unit id="c56be856f0b67fbcea562921c9bc9eb751ecb52b" translate="yes" xml:space="preserve">
          <source>WEIGHT_DEMIBOLD</source>
          <target state="translated">WEIGHT_DEMIBOLD</target>
        </trans-unit>
        <trans-unit id="5d932cd773811aa53e846f4dcf331780ac0fd98e" translate="yes" xml:space="preserve">
          <source>WEIGHT_DEMILIGHT</source>
          <target state="translated">WEIGHT_DEMILIGHT</target>
        </trans-unit>
        <trans-unit id="637834ab0b0f9708c386b161eb45803092809c73" translate="yes" xml:space="preserve">
          <source>WEIGHT_EXTRABOLD</source>
          <target state="translated">WEIGHT_EXTRABOLD</target>
        </trans-unit>
        <trans-unit id="0b9cac5b4ba244248c014a918f5b0fcc2a3c86f6" translate="yes" xml:space="preserve">
          <source>WEIGHT_EXTRA_LIGHT</source>
          <target state="translated">WEIGHT_EXTRA_LIGHT</target>
        </trans-unit>
        <trans-unit id="ba8a2666e48b47e20913dae11144560f4cd619ea" translate="yes" xml:space="preserve">
          <source>WEIGHT_HEAVY</source>
          <target state="translated">WEIGHT_HEAVY</target>
        </trans-unit>
        <trans-unit id="a22369bcc41b9bdc9627efe05b4d14aa4e8821f8" translate="yes" xml:space="preserve">
          <source>WEIGHT_LIGHT</source>
          <target state="translated">WEIGHT_LIGHT</target>
        </trans-unit>
        <trans-unit id="eb6df2bb75a6b425cf368477ef6785a1e75a0e58" translate="yes" xml:space="preserve">
          <source>WEIGHT_MEDIUM</source>
          <target state="translated">WEIGHT_MEDIUM</target>
        </trans-unit>
        <trans-unit id="ff3d47fe6b036e793f8a49a44c1ec01a4f787c6d" translate="yes" xml:space="preserve">
          <source>WEIGHT_REGULAR</source>
          <target state="translated">WEIGHT_REGULAR</target>
        </trans-unit>
        <trans-unit id="2bcd6798d0bb29626c95e23aac8904cbd543fe63" translate="yes" xml:space="preserve">
          <source>WEIGHT_REGULAR, WEIGHT_BOLD</source>
          <target state="translated">WEIGHT_REGULAR, WEIGHT_BOLD</target>
        </trans-unit>
        <trans-unit id="ff3c1c5dd38257d20f9395f2034a830f2d7e58c0" translate="yes" xml:space="preserve">
          <source>WEIGHT_SEMIBOLD</source>
          <target state="translated">WEIGHT_SEMIBOLD</target>
        </trans-unit>
        <trans-unit id="a590a5de30a230b9828d55f1cb23b91525977c72" translate="yes" xml:space="preserve">
          <source>WEIGHT_ULTRABOLD</source>
          <target state="translated">WEIGHT_ULTRABOLD</target>
        </trans-unit>
        <trans-unit id="50bd64333fee683dd2e31a9162044fe5c41dd3a4" translate="yes" xml:space="preserve">
          <source>WEST</source>
          <target state="translated">WEST</target>
        </trans-unit>
        <trans-unit id="fc8f4a59dd8a9eb56798b48a128dfd4aa795f14b" translate="yes" xml:space="preserve">
          <source>WHEEL_BLOCK_SCROLL</source>
          <target state="translated">WHEEL_BLOCK_SCROLL</target>
        </trans-unit>
        <trans-unit id="1f0150b303ef5eab00cebc4e9fb73dfefe005640" translate="yes" xml:space="preserve">
          <source>WHEEL_UNIT_SCROLL</source>
          <target state="translated">WHEEL_UNIT_SCROLL</target>
        </trans-unit>
        <trans-unit id="9327748bde1287d957ca3d4cc36145b457fdeb8a" translate="yes" xml:space="preserve">
          <source>WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</source>
          <target state="translated">WHEN_ANCESTOR_OF_FOCUSED_COMPONENT</target>
        </trans-unit>
        <trans-unit id="c2ec3c4bf9f50d42fc83d2ec4333ffd0596530a6" translate="yes" xml:space="preserve">
          <source>WHEN_FOCUSED</source>
          <target state="translated">WHEN_FOCUSED</target>
        </trans-unit>
        <trans-unit id="237f6b22e2c305ffcf7f0307b2d889f52267b8e5" translate="yes" xml:space="preserve">
          <source>WHEN_IN_FOCUSED_WINDOW</source>
          <target state="translated">WHEN_IN_FOCUSED_WINDOW</target>
        </trans-unit>
        <trans-unit id="d6b9e1446d49c1a5077b747e616219bedcdc9b9f" translate="yes" xml:space="preserve">
          <source>WHERE_CLAUSE_ONLY</source>
          <target state="translated">WHERE_CLAUSE_ONLY</target>
        </trans-unit>
        <trans-unit id="986195fa2ccb3e6bcc0d7752ee51a526eab6f4c7" translate="yes" xml:space="preserve">
          <source>WHILE_LOOP</source>
          <target state="translated">WHILE_LOOP</target>
        </trans-unit>
        <trans-unit id="40d23f3b3af90554dade75ca1449213a1776239f" translate="yes" xml:space="preserve">
          <source>WHITE</source>
          <target state="translated">WHITE</target>
        </trans-unit>
        <trans-unit id="c1cd547450ddf19820dbba6198904ce66087e598" translate="yes" xml:space="preserve">
          <source>WHITESPACE</source>
          <target state="translated">WHITESPACE</target>
        </trans-unit>
        <trans-unit id="d194dea1795240817dfa4bd996d82fe187dabab1" translate="yes" xml:space="preserve">
          <source>WHITE_BALANCE_AUTO</source>
          <target state="translated">WHITE_BALANCE_AUTO</target>
        </trans-unit>
        <trans-unit id="41e86e6fe3188e861cfd8cd9ca282c460604b38e" translate="yes" xml:space="preserve">
          <source>WHITE_BALANCE_MANUAL</source>
          <target state="translated">WHITE_BALANCE_MANUAL</target>
        </trans-unit>
        <trans-unit id="1ffe1e73442645cbd5bb7e2150f72733ad744494" translate="yes" xml:space="preserve">
          <source>WHITE_SPACE</source>
          <target state="translated">WHITE_SPACE</target>
        </trans-unit>
        <trans-unit id="5e3d4c8c3394dc083bfb67877dcd60949f705f5f" translate="yes" xml:space="preserve">
          <source>WIDTH</source>
          <target state="translated">WIDTH</target>
        </trans-unit>
        <trans-unit id="2ccf926b7d7911891c3a63586cd085a087702c4c" translate="yes" xml:space="preserve">
          <source>WIDTH_CONDENSED</source>
          <target state="translated">WIDTH_CONDENSED</target>
        </trans-unit>
        <trans-unit id="4931e856d85a4b229703bca45afd5c120e0ad4b3" translate="yes" xml:space="preserve">
          <source>WIDTH_CONDENSED, WIDTH_REGULAR,</source>
          <target state="translated">WIDTH_CONDENSED, WIDTH_REGULAR,</target>
        </trans-unit>
        <trans-unit id="88b110346951865c1bb68a3ebb8acd67cdb6f5d4" translate="yes" xml:space="preserve">
          <source>WIDTH_EXTENDED</source>
          <target state="translated">WIDTH_EXTENDED</target>
        </trans-unit>
        <trans-unit id="f2c3eab64c1a48d622a29a27f816e042ade7152b" translate="yes" xml:space="preserve">
          <source>WIDTH_REGULAR</source>
          <target state="translated">WIDTH_REGULAR</target>
        </trans-unit>
        <trans-unit id="a4e8f9790df1d3458b9478fce8c01bedea0bf94d" translate="yes" xml:space="preserve">
          <source>WIDTH_SEMI_CONDENSED</source>
          <target state="translated">WIDTH_SEMI_CONDENSED</target>
        </trans-unit>
        <trans-unit id="be580bbe1264dcd204976ea1af8a09e331827608" translate="yes" xml:space="preserve">
          <source>WIDTH_SEMI_EXTENDED</source>
          <target state="translated">WIDTH_SEMI_EXTENDED</target>
        </trans-unit>
        <trans-unit id="dea5d6976f7c54b48ff5d6c539121232f52092ef" translate="yes" xml:space="preserve">
          <source>WILDCARD</source>
          <target state="translated">WILDCARD</target>
        </trans-unit>
        <trans-unit id="201f5bdde79034efdfb90c4b9a48c56dd51af9e1" translate="yes" xml:space="preserve">
          <source>WINDOW</source>
          <target state="translated">WINDOW</target>
        </trans-unit>
        <trans-unit id="f077619112eb62d32b3deefbfa219ced776e66b4" translate="yes" xml:space="preserve">
          <source>WINDOW_ACTIVATED</source>
          <target state="translated">WINDOW_ACTIVATED</target>
        </trans-unit>
        <trans-unit id="cf82cc2cb60949685311a0db721f99845a7aa8be" translate="yes" xml:space="preserve">
          <source>WINDOW_BORDER</source>
          <target state="translated">WINDOW_BORDER</target>
        </trans-unit>
        <trans-unit id="d91f63a1281e9a8adb85deb426f6f5ac0b85ffae" translate="yes" xml:space="preserve">
          <source>WINDOW_CLOSED</source>
          <target state="translated">WINDOW_CLOSED</target>
        </trans-unit>
        <trans-unit id="63385282825efbd7e38a94764336baa1473575fd" translate="yes" xml:space="preserve">
          <source>WINDOW_CLOSING</source>
          <target state="translated">WINDOW_CLOSING</target>
        </trans-unit>
        <trans-unit id="69d12c57282ba06641ed6a56238c9e6e2e71a88e" translate="yes" xml:space="preserve">
          <source>WINDOW_DEACTIVATED</source>
          <target state="translated">WINDOW_DEACTIVATED</target>
        </trans-unit>
        <trans-unit id="96084672dbf7b481b508cee67a8dc62823feea40" translate="yes" xml:space="preserve">
          <source>WINDOW_DEICONIFIED</source>
          <target state="translated">WINDOW_DEICONIFIED</target>
        </trans-unit>
        <trans-unit id="8d280dd9f51a6496153cbe08cf89eb5b45866051" translate="yes" xml:space="preserve">
          <source>WINDOW_DEICONIFY</source>
          <target state="translated">WINDOW_DEICONIFY</target>
        </trans-unit>
        <trans-unit id="c6e170a525954b26428bd11febd98c5707d5b35c" translate="yes" xml:space="preserve">
          <source>WINDOW_DESTROY</source>
          <target state="translated">WINDOW_DESTROY</target>
        </trans-unit>
        <trans-unit id="26844c06a46493264d9e50b6a44a5dbf7790aa4c" translate="yes" xml:space="preserve">
          <source>WINDOW_EVENT_MASK</source>
          <target state="translated">WINDOW_EVENT_MASK</target>
        </trans-unit>
        <trans-unit id="c603873fd7d2410ae3f063e7b1f8c751b72bae30" translate="yes" xml:space="preserve">
          <source>WINDOW_EXPOSE</source>
          <target state="translated">WINDOW_EXPOSE</target>
        </trans-unit>
        <trans-unit id="b174d6474916e37e5c03f46fdab39110ab0dc9e8" translate="yes" xml:space="preserve">
          <source>WINDOW_FIRST</source>
          <target state="translated">WINDOW_FIRST</target>
        </trans-unit>
        <trans-unit id="63d58af0713efc399dbcddba86153e7938cb6f31" translate="yes" xml:space="preserve">
          <source>WINDOW_FOCUS_EVENT_MASK</source>
          <target state="translated">WINDOW_FOCUS_EVENT_MASK</target>
        </trans-unit>
        <trans-unit id="d5f6fc44425ee2cb8e593bb84ccba8092b55a656" translate="yes" xml:space="preserve">
          <source>WINDOW_GAINED_FOCUS</source>
          <target state="translated">WINDOW_GAINED_FOCUS</target>
        </trans-unit>
        <trans-unit id="2a14a988f60d78faffe74016ab77cd19c874149a" translate="yes" xml:space="preserve">
          <source>WINDOW_ICONIFIED</source>
          <target state="translated">WINDOW_ICONIFIED</target>
        </trans-unit>
        <trans-unit id="54801db930103fa29a38d9f58db25e2cb8790ee1" translate="yes" xml:space="preserve">
          <source>WINDOW_ICONIFY</source>
          <target state="translated">WINDOW_ICONIFY</target>
        </trans-unit>
        <trans-unit id="2378e3d6b4829d442b4cc32442bdd1abf7eb3ac5" translate="yes" xml:space="preserve">
          <source>WINDOW_LAST</source>
          <target state="translated">WINDOW_LAST</target>
        </trans-unit>
        <trans-unit id="8f9a2f2d8f9fbb333bf22c699806d80ac43a06f7" translate="yes" xml:space="preserve">
          <source>WINDOW_LOST_FOCUS</source>
          <target state="translated">WINDOW_LOST_FOCUS</target>
        </trans-unit>
        <trans-unit id="a4655542aa8139f051b41a75ad681a1cc37da769" translate="yes" xml:space="preserve">
          <source>WINDOW_MOVED</source>
          <target state="translated">WINDOW_MOVED</target>
        </trans-unit>
        <trans-unit id="7d76c10e796d735702955620ab032e7b02e9ceb4" translate="yes" xml:space="preserve">
          <source>WINDOW_OPENED</source>
          <target state="translated">WINDOW_OPENED</target>
        </trans-unit>
        <trans-unit id="2255c9b01e590c2353fd989dcecfac12b990acfc" translate="yes" xml:space="preserve">
          <source>WINDOW_STATE_CHANGED</source>
          <target state="translated">WINDOW_STATE_CHANGED</target>
        </trans-unit>
        <trans-unit id="420bc96d5325cc4d73ae412b3a7eb9f216cfe027" translate="yes" xml:space="preserve">
          <source>WINDOW_STATE_EVENT_MASK</source>
          <target state="translated">WINDOW_STATE_EVENT_MASK</target>
        </trans-unit>
        <trans-unit id="156fa2ca70f9b3dbe2d061d8db6d1edb65777ee7" translate="yes" xml:space="preserve">
          <source>WINDOW_TEXT</source>
          <target state="translated">WINDOW_TEXT</target>
        </trans-unit>
        <trans-unit id="a536c532d01270c47a406ecad5fa16bbab75c7c5" translate="yes" xml:space="preserve">
          <source>WIND_EVEN_ODD</source>
          <target state="translated">WIND_EVEN_ODD</target>
        </trans-unit>
        <trans-unit id="5ca89cf4db105d3c703479b2e1e146d1244880c4" translate="yes" xml:space="preserve">
          <source>WIND_NON_ZERO</source>
          <target state="translated">WIND_NON_ZERO</target>
        </trans-unit>
        <trans-unit id="986b96d045e3b44c351b49c804df41703506da7c" translate="yes" xml:space="preserve">
          <source>WORD</source>
          <target state="translated">WORD</target>
        </trans-unit>
        <trans-unit id="6f18d3fc7f5f427a863731418e6bdb023b8e5b1f" translate="yes" xml:space="preserve">
          <source>WORD_SPACING</source>
          <target state="translated">WORD_SPACING</target>
        </trans-unit>
        <trans-unit id="f95d2ffbf9a1af1952ded5edbd37273e4bf5f711" translate="yes" xml:space="preserve">
          <source>WRAP_MODE</source>
          <target state="translated">WRAP_MODE</target>
        </trans-unit>
        <trans-unit id="e14777e687655bdd473dd90685b65388d2a008e7" translate="yes" xml:space="preserve">
          <source>WRAP_TAB_LAYOUT</source>
          <target state="translated">WRAP_TAB_LAYOUT</target>
        </trans-unit>
        <trans-unit id="27ad330619a7bfbee351115b167c5a6593f2530a" translate="yes" xml:space="preserve">
          <source>WRITE</source>
          <target state="translated">WRITE</target>
        </trans-unit>
        <trans-unit id="a6921d5e91e0590725089252fc7f27605e5b7022" translate="yes" xml:space="preserve">
          <source>WRITE_ACL</source>
          <target state="translated">WRITE_ACL</target>
        </trans-unit>
        <trans-unit id="f67e53af7185fbc8aea70c663d29dcf390c68218" translate="yes" xml:space="preserve">
          <source>WRITE_ATTRIBUTES</source>
          <target state="translated">WRITE_ATTRIBUTES</target>
        </trans-unit>
        <trans-unit id="047c274a3e7ebe073cff46c23124077218032cf0" translate="yes" xml:space="preserve">
          <source>WRITE_DATA</source>
          <target state="translated">WRITE_DATA</target>
        </trans-unit>
        <trans-unit id="58182c24cbe7fbdb0cdce51d37ac21f2e39d8164" translate="yes" xml:space="preserve">
          <source>WRITE_FAILURE</source>
          <target state="translated">WRITE_FAILURE</target>
        </trans-unit>
        <trans-unit id="5b7c3f4d5466238aba0f49b3928981ccc31b3ba3" translate="yes" xml:space="preserve">
          <source>WRITE_FAILURE is used when a write to an output stream fails.</source>
          <target state="translated">WRITE_FAILURE는 출력 스트림에 대한 쓰기가 실패 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f2e00a21918992721472933614c38b3251857c93" translate="yes" xml:space="preserve">
          <source>WRITE_NAMED_ATTRS</source>
          <target state="translated">WRITE_NAMED_ATTRS</target>
        </trans-unit>
        <trans-unit id="22dbe35075cb33b41f60ad27f0c1e14653f5f4a3" translate="yes" xml:space="preserve">
          <source>WRITE_OWNER</source>
          <target state="translated">WRITE_OWNER</target>
        </trans-unit>
        <trans-unit id="e1bed94533b16e30bc87abcfefb2ed8856136c0a" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR</source>
          <target state="translated">WRONG_DOCUMENT_ERR</target>
        </trans-unit>
        <trans-unit id="f2ea9a9e20bc3d2ca808ee1674c9ca3777e6f2e3" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR: Raised if &lt;code&gt; newParent&lt;/code&gt; and the container of the start of the Range were not created from the same document.</source>
          <target state="translated">WRONG_DOCUMENT_ERR: Raised if &lt;code&gt; newParent&lt;/code&gt; and the container of the start of the Range were not created from the same document.</target>
        </trans-unit>
        <trans-unit id="71114af5da073a2e19c698dad03cd04381269b0e" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;doctype&lt;/code&gt; has already been used with a different document or was created from a different implementation.</source>
          <target state="translated">WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;doctype&lt;/code&gt; has already been used with a different document or was created from a different implementation.</target>
        </trans-unit>
        <trans-unit id="1d0ed205c69625a68cee870a7e40a70660d93314" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;newChild&lt;/code&gt; was created from a different document than the one that created this node.</source>
          <target state="translated">WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;newChild&lt;/code&gt; was created from a different document than the one that created this node.</target>
        </trans-unit>
        <trans-unit id="3bd5a04c3e9380d1295c16e4d5fccbdcbc5dcf06" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;newNode&lt;/code&gt; and the container of the start of the Range were not created from the same document.</source>
          <target state="translated">WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;newNode&lt;/code&gt; and the container of the start of the Range were not created from the same document.</target>
        </trans-unit>
        <trans-unit id="91fa1b68b2f952cba42828282d05c9724b500233" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;refNode&lt;/code&gt; was created from a different document than the one that created this range.</source>
          <target state="translated">WRONG_DOCUMENT_ERR: Raised if &lt;code&gt;refNode&lt;/code&gt; was created from a different document than the one that created this range.</target>
        </trans-unit>
        <trans-unit id="118d32bd5e53265934b0ac212e3c57bcd37a50a4" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR: Raised when the specified node was created from a different document than this document.</source>
          <target state="translated">WRONG_DOCUMENT_ERR: Raised when the specified node was created from a different document than this document.</target>
        </trans-unit>
        <trans-unit id="341617fc086d770d8ea4a594809231354f641b3e" translate="yes" xml:space="preserve">
          <source>WRONG_DOCUMENT_ERR: The Node is from a document that is not supported by this &lt;code&gt;XPathEvaluator&lt;/code&gt;.</source>
          <target state="translated">WRONG_DOCUMENT_ERR : 노드는이 &lt;code&gt;XPathEvaluator&lt;/code&gt; 에서 지원하지 않는 문서의 것입니다 .</target>
        </trans-unit>
        <trans-unit id="1be484a6783ddfe8f1ad29b1a3c0962002cadce7" translate="yes" xml:space="preserve">
          <source>W_RESIZE_CURSOR</source>
          <target state="translated">W_RESIZE_CURSOR</target>
        </trans-unit>
        <trans-unit id="598d8d2b12d9df9850b46eed40d26b4f7da3a541" translate="yes" xml:space="preserve">
          <source>Waiting threads are signalled in FIFO order.</source>
          <target state="translated">대기 스레드는 FIFO 순서로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="b74db5e9d2999d7bc071ef89872c133de19100b8" translate="yes" xml:space="preserve">
          <source>Waits (indefinitely or with timeout) to accept a connection from a target VM. Returns a connection representing the bi-directional communication channel to the target VM.</source>
          <target state="translated">대상 VM에서 연결을 수락 할 때까지 (무기한 또는 제한 시간 포함) 기다립니다. 대상 VM에 대한 양방향 통신 채널을 나타내는 연결을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="199bd64233624c112a29d3830698c441ba8d4ee5" translate="yes" xml:space="preserve">
          <source>Waits a specified time for the next available event.</source>
          <target state="translated">사용 가능한 다음 이벤트를 위해 지정된 시간을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="0dfac63144eb4e13fa4046effe1389039a7f73a0" translate="yes" xml:space="preserve">
          <source>Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds for this thread to die.</source>
          <target state="translated">Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds for this thread to die.</target>
        </trans-unit>
        <trans-unit id="8d5ab81f6e9b8670844cee69bbeaf4be8c160cc0" translate="yes" xml:space="preserve">
          <source>Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds for this thread to die. A timeout of &lt;code&gt;0&lt;/code&gt; means to wait forever.</source>
          <target state="translated">이 스레드가 죽을 때까지 최대 &lt;code&gt;millis&lt;/code&gt; 초를 기다립니다 . 시간 제한이 &lt;code&gt;0&lt;/code&gt; 이면 영원히 대기한다는 의미입니다.</target>
        </trans-unit>
        <trans-unit id="94a53993e8d3246a8674fea623793cc23fc795e9" translate="yes" xml:space="preserve">
          <source>Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds plus &lt;code&gt;nanos&lt;/code&gt; nanoseconds for this thread to die.</source>
          <target state="translated">이 스레드가 죽을 때까지 최대 &lt;code&gt;millis&lt;/code&gt; 초와 &lt;code&gt;nanos&lt;/code&gt; 나노초를 기다립니다 .</target>
        </trans-unit>
        <trans-unit id="364ac8a7340fa105aa8fcf68230fb933e4e39f0e" translate="yes" xml:space="preserve">
          <source>Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds plus &lt;code&gt;nanos&lt;/code&gt; nanoseconds for this thread to die. If both arguments are &lt;code&gt;0&lt;/code&gt;, it means to wait forever.</source>
          <target state="translated">Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds plus &lt;code&gt;nanos&lt;/code&gt; nanoseconds for this thread to die. If both arguments are &lt;code&gt;0&lt;/code&gt; , it means to wait forever.</target>
        </trans-unit>
        <trans-unit id="b816db010f0b20f18e251c023169a10b494d51ba" translate="yes" xml:space="preserve">
          <source>Waits for a target VM to attach to this connector.</source>
          <target state="translated">대상 VM이이 커넥터에 연결될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="6945ea299c349bf854bb71b57598d2ff62ecb7ad" translate="yes" xml:space="preserve">
          <source>Waits for another thread to arrive at this exchange point (unless the current thread is &lt;a href=&quot;../../lang/thread#interrupt()&quot;&gt;interrupted&lt;/a&gt; or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return.</source>
          <target state="translated">Waits for another thread to arrive at this exchange point (unless the current thread is &lt;a href=&quot;../../lang/thread#interrupt()&quot;&gt;interrupted&lt;/a&gt; or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return.</target>
        </trans-unit>
        <trans-unit id="a37b156af078a12dd88e1ceced75eef8714f1045" translate="yes" xml:space="preserve">
          <source>Waits for another thread to arrive at this exchange point (unless the current thread is &lt;a href=&quot;../../lang/thread#interrupt()&quot;&gt;interrupted&lt;/a&gt;), and then transfers the given object to it, receiving its object in return.</source>
          <target state="translated">Waits for another thread to arrive at this exchange point (unless the current thread is &lt;a href=&quot;../../lang/thread#interrupt()&quot;&gt;interrupted&lt;/a&gt;), and then transfers the given object to it, receiving its object in return.</target>
        </trans-unit>
        <trans-unit id="557c8f0f0804d3490aa53aee125e92a7445e1d48" translate="yes" xml:space="preserve">
          <source>Waits for another thread to arrive at this exchange point (unless the current thread is &lt;a href=&quot;../../lang/thread#interrupt--&quot;&gt;interrupted&lt;/a&gt; or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return.</source>
          <target state="translated">현재 스레드가 &lt;a href=&quot;../../lang/thread#interrupt--&quot;&gt;중단&lt;/a&gt; 되거나 지정된 대기 시간이 경과 하지 않는 한 다른 스레드가이 교환 지점에 도달 할 때 까지 기다린 다음 지정된 오브젝트를 전달하여 해당 오브젝트를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a9714c3b990f72a16c64a297b3674cb6087cfeff" translate="yes" xml:space="preserve">
          <source>Waits for another thread to arrive at this exchange point (unless the current thread is &lt;a href=&quot;../../lang/thread#interrupt--&quot;&gt;interrupted&lt;/a&gt;), and then transfers the given object to it, receiving its object in return.</source>
          <target state="translated">현재 스레드가 &lt;a href=&quot;../../lang/thread#interrupt--&quot;&gt;중단&lt;/a&gt; 되지 않는 한 다른 스레드가이 교환 지점에 도달 할 때까지 기다린 다음 지정된 오브젝트를 전달하여 해당 오브젝트를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0dd1336c41594fd2e84fa160e878cce8748c4f56" translate="yes" xml:space="preserve">
          <source>Waits for card insertion or removal in any of the terminals of this object or until the timeout expires.</source>
          <target state="translated">Waits for card insertion or removal in any of the terminals of this object or until the timeout expires.</target>
        </trans-unit>
        <trans-unit id="89745f25fc05bdd917e4f78d91659324affba37d" translate="yes" xml:space="preserve">
          <source>Waits for card insertion or removal in any of the terminals of this object.</source>
          <target state="translated">Waits for card insertion or removal in any of the terminals of this object.</target>
        </trans-unit>
        <trans-unit id="77b3edd5fff3c71fb470f4dbfb6b9381ad255a30" translate="yes" xml:space="preserve">
          <source>Waits for this thread to die.</source>
          <target state="translated">이 스레드가 죽을 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="a6355004e98a1e303c517b5c0d2eea1c774e0c44" translate="yes" xml:space="preserve">
          <source>Waits forever for the next available event.</source>
          <target state="translated">다음 사용 가능한 이벤트를 영원히 기다립니다.</target>
        </trans-unit>
        <trans-unit id="77a93294440eb49b7b2449dd795ae4ada0e190db" translate="yes" xml:space="preserve">
          <source>Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.</source>
          <target state="translated">필요한 경우 계산이 완료 될 때까지 주어진 시간 동안 대기 한 다음 사용 가능한 경우 결과를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="aafcd08752bc11a21870ec04b685933837e7d4cc" translate="yes" xml:space="preserve">
          <source>Waits if necessary for at most the given time for this future to complete, and then returns its result, if available.</source>
          <target state="translated">이 미래가 완료 될 때까지 주어진 시간 동안 최대한 기다렸다가 사용 가능한 경우 결과를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="da89866ec43b4f683e34b593be2844266c48a6dd" translate="yes" xml:space="preserve">
          <source>Waits if necessary for the computation to complete, and then retrieves its result.</source>
          <target state="translated">필요한 경우 계산이 완료되기를 기다린 다음 결과를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="803562ef43c8df90a6078b38fd0fbbbab986c81e" translate="yes" xml:space="preserve">
          <source>Waits if necessary for this future to complete, and then returns its result.</source>
          <target state="translated">이 미래가 완료 될 때까지 기다린 다음 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="423c0dce2f862ecc873615cade8b7995c39489c0" translate="yes" xml:space="preserve">
          <source>Waits until a card is absent in this terminal or the timeout expires.</source>
          <target state="translated">Waits until a card is absent in this terminal or the timeout expires.</target>
        </trans-unit>
        <trans-unit id="1512b97cf54ca00cc89ed1c2a603b3152e72ec33" translate="yes" xml:space="preserve">
          <source>Waits until a card is absent in this terminal or the timeout expires. If the method returns due to an expired timeout, it returns false. Otherwise it return true.</source>
          <target state="translated">Waits until a card is absent in this terminal or the timeout expires. If the method returns due to an expired timeout, it returns false. Otherwise it return true.</target>
        </trans-unit>
        <trans-unit id="da37e1e647ffb796a905e861477a96985985fab0" translate="yes" xml:space="preserve">
          <source>Waits until a card is present in this terminal or the timeout expires.</source>
          <target state="translated">Waits until a card is present in this terminal or the timeout expires.</target>
        </trans-unit>
        <trans-unit id="264bc5d8b7b4158554047c2ebbbff929780a898b" translate="yes" xml:space="preserve">
          <source>Waits until a card is present in this terminal or the timeout expires. If the method returns due to an expired timeout, it returns false. Otherwise it return true.</source>
          <target state="translated">Waits until a card is present in this terminal or the timeout expires. If the method returns due to an expired timeout, it returns false. Otherwise it return true.</target>
        </trans-unit>
        <trans-unit id="db3a5831555426908400f4f11350ee1d9621e94c" translate="yes" xml:space="preserve">
          <source>Waits until all &lt;a href=&quot;#getParties()&quot;&gt;parties&lt;/a&gt; have invoked &lt;code&gt;await&lt;/code&gt; on this barrier, or the specified waiting time elapses.</source>
          <target state="translated">Waits until all &lt;a href=&quot;#getParties()&quot;&gt;parties&lt;/a&gt; have invoked &lt;code&gt;await&lt;/code&gt; on this barrier, or the specified waiting time elapses.</target>
        </trans-unit>
        <trans-unit id="9d2ee91fa38b3aa39b57f6f15bee41b407e896ba" translate="yes" xml:space="preserve">
          <source>Waits until all &lt;a href=&quot;#getParties()&quot;&gt;parties&lt;/a&gt; have invoked &lt;code&gt;await&lt;/code&gt; on this barrier.</source>
          <target state="translated">Waits until all &lt;a href=&quot;#getParties()&quot;&gt;parties&lt;/a&gt; have invoked &lt;code&gt;await&lt;/code&gt; on this barrier.</target>
        </trans-unit>
        <trans-unit id="acfb3663e0ca38989b8759e81be1ac615f97ff84" translate="yes" xml:space="preserve">
          <source>Waits until all &lt;a href=&quot;cyclicbarrier#getParties--&quot;&gt;parties&lt;/a&gt; have invoked &lt;code&gt;await&lt;/code&gt; on this barrier, or the specified waiting time elapses.</source>
          <target state="translated">모든 때까지 대기 &lt;a href=&quot;cyclicbarrier#getParties--&quot;&gt;당사자는&lt;/a&gt; 호출 한 &lt;code&gt;await&lt;/code&gt; 를을 이 장벽에, 또는 시간의 경과를 기다리고 지정했습니다.</target>
        </trans-unit>
        <trans-unit id="3b3ff44bfcf430c4e4b9e5670feffa1d028ea206" translate="yes" xml:space="preserve">
          <source>Waits until all &lt;a href=&quot;cyclicbarrier#getParties--&quot;&gt;parties&lt;/a&gt; have invoked &lt;code&gt;await&lt;/code&gt; on this barrier.</source>
          <target state="translated">모든 때까지 대기 &lt;a href=&quot;cyclicbarrier#getParties--&quot;&gt;당사자는&lt;/a&gt; 호출 한 &lt;code&gt;await&lt;/code&gt; 를 이 장벽에.</target>
        </trans-unit>
        <trans-unit id="66e5902a91027833c1f24efb88602d6e5f5a340b" translate="yes" xml:space="preserve">
          <source>Waits until all events currently on the event queue have been processed.</source>
          <target state="translated">Waits until all events currently on the event queue have been processed.</target>
        </trans-unit>
        <trans-unit id="195940d89a4d3d929b70126f3c4b3ed5d79a8702" translate="yes" xml:space="preserve">
          <source>Wakes up a single thread that is waiting on this object's monitor.</source>
          <target state="translated">Wakes up a single thread that is waiting on this object's monitor.</target>
        </trans-unit>
        <trans-unit id="11472e63110fd1bbda989b4cb58d4fad230cee5d" translate="yes" xml:space="preserve">
          <source>Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs at the discretion of the implementation. A thread waits on an object's monitor by calling one of the &lt;code&gt;wait&lt;/code&gt; methods.</source>
          <target state="translated">이 객체의 모니터에서 대기중인 단일 스레드를 깨 웁니다. 이 오브젝트에서 스레드가 대기중인 경우 스레드 중 하나가 활성화되도록 선택됩니다. 선택은 임의적이며 구현의 재량에 따라 발생합니다. 스레드는 &lt;code&gt;wait&lt;/code&gt; 메소드 중 하나를 호출하여 오브젝트의 모니터에서 대기 합니다.</target>
        </trans-unit>
        <trans-unit id="917b6dee9d5785c9498c7fee94cb9cb413ff2ccb" translate="yes" xml:space="preserve">
          <source>Wakes up all threads that are waiting on this object's monitor.</source>
          <target state="translated">Wakes up all threads that are waiting on this object's monitor.</target>
        </trans-unit>
        <trans-unit id="60bf1897ca2d5ea7f9fed100a197b8da56cd2f6b" translate="yes" xml:space="preserve">
          <source>Wakes up all threads that are waiting on this object's monitor. A thread waits on an object's monitor by calling one of the &lt;code&gt;wait&lt;/code&gt; methods.</source>
          <target state="translated">이 객체의 모니터에서 대기중인 모든 스레드를 깨 웁니다. 스레드는 &lt;code&gt;wait&lt;/code&gt; 메소드 중 하나를 호출하여 오브젝트의 모니터에서 대기 합니다.</target>
        </trans-unit>
        <trans-unit id="51a97180c73a6b656ee4a08e63d8a98f31c183ce" translate="yes" xml:space="preserve">
          <source>Wakes up all waiting threads.</source>
          <target state="translated">모든 대기 스레드를 깨 웁니다.</target>
        </trans-unit>
        <trans-unit id="e2485f445b2ec82930218c1452c9df2adf2f4bf0" translate="yes" xml:space="preserve">
          <source>Wakes up one waiting thread.</source>
          <target state="translated">하나의 대기 스레드를 깨 웁니다.</target>
        </trans-unit>
        <trans-unit id="21cc32a11b691c15416334d1e1e040558e915617" translate="yes" xml:space="preserve">
          <source>Walks a file tree.</source>
          <target state="translated">파일 트리를 걷습니다.</target>
        </trans-unit>
        <trans-unit id="5c45ab05d45d1008d0b70706476bdc29a68fff57" translate="yes" xml:space="preserve">
          <source>Warning message.</source>
          <target state="translated">경고 메시지.</target>
        </trans-unit>
        <trans-unit id="e195a42e21ff3c9acfd11dbffb58c75674a8669a" translate="yes" xml:space="preserve">
          <source>Warning: To avoid deadlock, do not declare this method synchronized in a subclass.</source>
          <target state="translated">Warning: To avoid deadlock, do not declare this method synchronized in a subclass.</target>
        </trans-unit>
        <trans-unit id="d79c41e148d22dbcf85b4f38814ab88b9e8d6c0c" translate="yes" xml:space="preserve">
          <source>Warning: additional attribute type keywords may not be recognized by other implementations; therefore do not use this method if you are unsure if these keywords will be recognized by other implementations.</source>
          <target state="translated">경고 : 다른 구현에서는 추가 속성 유형 키워드를 인식하지 못할 수 있습니다. 따라서 이러한 키워드가 다른 구현에서 인식되는지 확실하지 않은 경우이 방법을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="f594af464c78df78968d3e497d99f5a249bd81b8" translate="yes" xml:space="preserve">
          <source>Warnings may be retrieved from &lt;code&gt;Connection&lt;/code&gt;, &lt;code&gt;Statement&lt;/code&gt;, and &lt;code&gt;ResultSet&lt;/code&gt; objects. Trying to retrieve a warning on a connection after it has been closed will cause an exception to be thrown. Similarly, trying to retrieve a warning on a statement after it has been closed or on a result set after it has been closed will cause an exception to be thrown. Note that closing a statement also closes a result set that it might have produced.</source>
          <target state="translated">Warnings may be retrieved from &lt;code&gt;Connection&lt;/code&gt; , &lt;code&gt;Statement&lt;/code&gt; , and &lt;code&gt;ResultSet&lt;/code&gt; objects. Trying to retrieve a warning on a connection after it has been closed will cause an exception to be thrown. Similarly, trying to retrieve a warning on a statement after it has been closed or on a result set after it has been closed will cause an exception to be thrown. Note that closing a statement also closes a result set that it might have produced.</target>
        </trans-unit>
        <trans-unit id="18af9205d481c81af0452c7b78307a2cc12e16a6" translate="yes" xml:space="preserve">
          <source>Watch events are immutable and safe for use by multiple concurrent threads.</source>
          <target state="translated">감시 이벤트는 변경 불가능하며 여러 동시 스레드에서 사용하기에 안전합니다.</target>
        </trans-unit>
        <trans-unit id="a4df0a14364157db35b0aeb27d103f08e65c5600" translate="yes" xml:space="preserve">
          <source>Watch keys are safe for use by multiple concurrent threads. Where there are several threads retrieving signalled keys from a watch service then care should be taken to ensure that the &lt;code&gt;reset&lt;/code&gt; method is only invoked after the events for the object have been processed. This ensures that one thread is processing the events for an object at any time.</source>
          <target state="translated">감시 키는 여러 개의 동시 스레드에서 안전하게 사용할 수 있습니다. 감시 서비스에서 신호 키를 검색하는 여러 스레드 가있는 경우, 오브젝트의 이벤트가 처리 된 후에 만 &lt;code&gt;reset&lt;/code&gt; 메소드가 호출 되도록주의를 기울여야합니다 . 이를 통해 하나의 스레드가 언제든지 오브젝트의 이벤트를 처리하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab89fdb591a29dd2157e80dd3fc09d166fa47e02" translate="yes" xml:space="preserve">
          <source>WatchEvent</source>
          <target state="translated">WatchEvent</target>
        </trans-unit>
        <trans-unit id="3104a16b096e2e87877444fb732ed4e244fd5fb4" translate="yes" xml:space="preserve">
          <source>WatchEvent.Kind</source>
          <target state="translated">WatchEvent.Kind</target>
        </trans-unit>
        <trans-unit id="2859a128288874ad24f4c98bf7cce397de08c723" translate="yes" xml:space="preserve">
          <source>WatchEvent.Kind.name()</source>
          <target state="translated">WatchEvent.Kind.name()</target>
        </trans-unit>
        <trans-unit id="d4ac1908a9c52fd3c2ca417375ae89c7dc6f90e4" translate="yes" xml:space="preserve">
          <source>WatchEvent.Kind.type()</source>
          <target state="translated">WatchEvent.Kind.type()</target>
        </trans-unit>
        <trans-unit id="dc0776148e4ccfbb27ab88bb6ce1339da4271d12" translate="yes" xml:space="preserve">
          <source>WatchEvent.Modifier</source>
          <target state="translated">WatchEvent.Modifier</target>
        </trans-unit>
        <trans-unit id="6151408b10f387c0c02499f23d0d49495a123adf" translate="yes" xml:space="preserve">
          <source>WatchEvent.Modifier.name()</source>
          <target state="translated">WatchEvent.Modifier.name()</target>
        </trans-unit>
        <trans-unit id="5f845280cded200c4b8a48929301464e398ac2fe" translate="yes" xml:space="preserve">
          <source>WatchEvent.context()</source>
          <target state="translated">WatchEvent.context()</target>
        </trans-unit>
        <trans-unit id="5548f15e22cdecc390d6071d79b41ad168545b10" translate="yes" xml:space="preserve">
          <source>WatchEvent.count()</source>
          <target state="translated">WatchEvent.count()</target>
        </trans-unit>
        <trans-unit id="3223fe7f2570a86db47dcd946b0550bb69148bdc" translate="yes" xml:space="preserve">
          <source>WatchEvent.kind()</source>
          <target state="translated">WatchEvent.kind()</target>
        </trans-unit>
        <trans-unit id="434feaccfe2a3f5790f514c688ddfee42a937ee8" translate="yes" xml:space="preserve">
          <source>WatchKey</source>
          <target state="translated">WatchKey</target>
        </trans-unit>
        <trans-unit id="613309ae99383a948104b176728f00b5db1221a3" translate="yes" xml:space="preserve">
          <source>WatchKey.cancel()</source>
          <target state="translated">WatchKey.cancel()</target>
        </trans-unit>
        <trans-unit id="fe242e0e137c753b42ee60cd35da60a895c553b9" translate="yes" xml:space="preserve">
          <source>WatchKey.isValid()</source>
          <target state="translated">WatchKey.isValid()</target>
        </trans-unit>
        <trans-unit id="9b1c89a2ee3b265e994b695b84f3a27bea880e84" translate="yes" xml:space="preserve">
          <source>WatchKey.pollEvents()</source>
          <target state="translated">WatchKey.pollEvents()</target>
        </trans-unit>
        <trans-unit id="ac44d1881e8bb9b33414336e6916521ad7abb29a" translate="yes" xml:space="preserve">
          <source>WatchKey.reset()</source>
          <target state="translated">WatchKey.reset()</target>
        </trans-unit>
        <trans-unit id="0ea52bb6949f4d37bbfce8963436ca586f1e8030" translate="yes" xml:space="preserve">
          <source>WatchKey.watchable()</source>
          <target state="translated">WatchKey.watchable()</target>
        </trans-unit>
        <trans-unit id="0ba6324b24ac8367d12f20a36f168e878432e873" translate="yes" xml:space="preserve">
          <source>WatchService</source>
          <target state="translated">WatchService</target>
        </trans-unit>
        <trans-unit id="366b61480307312fb6cf3ed210e7dbd19363dc32" translate="yes" xml:space="preserve">
          <source>WatchService.close()</source>
          <target state="translated">WatchService.close()</target>
        </trans-unit>
        <trans-unit id="6d641c1aa1ec04d7f4c2c802a6bd764a66c3c9c6" translate="yes" xml:space="preserve">
          <source>WatchService.poll()</source>
          <target state="translated">WatchService.poll()</target>
        </trans-unit>
        <trans-unit id="ba448bbc64fac97e5520011aa42f1172cd6b178d" translate="yes" xml:space="preserve">
          <source>WatchService.take()</source>
          <target state="translated">WatchService.take()</target>
        </trans-unit>
        <trans-unit id="7c475c44becae5d946d65a3f0efc654e48d04971" translate="yes" xml:space="preserve">
          <source>Watchable</source>
          <target state="translated">Watchable</target>
        </trans-unit>
        <trans-unit id="9d031ce99187a6db7969bfd9b309b28ef1bb8881" translate="yes" xml:space="preserve">
          <source>Watchable.register()</source>
          <target state="translated">Watchable.register()</target>
        </trans-unit>
        <trans-unit id="80afe1a592e75d65eca9d374d7b11511ca863272" translate="yes" xml:space="preserve">
          <source>WatchpointEvent</source>
          <target state="translated">WatchpointEvent</target>
        </trans-unit>
        <trans-unit id="2e07b609c1a4966b80ddf9977318b79bc793b675" translate="yes" xml:space="preserve">
          <source>WatchpointRequest</source>
          <target state="translated">WatchpointRequest</target>
        </trans-unit>
        <trans-unit id="ed9f48be68d70641d3c8097361c43176f33d0fe1" translate="yes" xml:space="preserve">
          <source>Ways to Access MXBeans</source>
          <target state="translated">MXBean에 액세스하는 방법</target>
        </trans-unit>
        <trans-unit id="c6e09e783a345f65b296bb6f46435937f099623b" translate="yes" xml:space="preserve">
          <source>We can assume in the above scenario that &lt;code&gt;CV.computeValue&lt;/code&gt; uses locks to properly observe the time-dependent states as it computes &lt;code&gt;V1&lt;/code&gt;, etc. This does not remove the threat of a stale value, since there is a window of time between the return of &lt;code&gt;computeValue&lt;/code&gt; in &lt;code&gt;T&lt;/code&gt; and the installation of the new value. No user synchronization is possible during this time.</source>
          <target state="translated">We can assume in the above scenario that &lt;code&gt;CV.computeValue&lt;/code&gt; uses locks to properly observe the time-dependent states as it computes &lt;code&gt;V1&lt;/code&gt; , etc. This does not remove the threat of a stale value, since there is a window of time between the return of &lt;code&gt;computeValue&lt;/code&gt; in &lt;code&gt;T&lt;/code&gt; and the installation of the new value. No user synchronization is possible during this time.</target>
        </trans-unit>
        <trans-unit id="b56109250239fd6335ae47d334eb34e1eb134e3e" translate="yes" xml:space="preserve">
          <source>We can assume in the above scenario that &lt;code&gt;CV.computeValue&lt;/code&gt; uses locks to properly observe the time-dependent states as it computes &lt;code&gt;V1&lt;/code&gt;, etc. This does not remove the threat of a stale value, since there is a window of time between the return of &lt;code&gt;computeValue&lt;/code&gt; in &lt;code&gt;T&lt;/code&gt; and the installation of the the new value. No user synchronization is possible during this time.</source>
          <target state="translated">위 시나리오에서 &lt;code&gt;CV.computeValue&lt;/code&gt; 는 &lt;code&gt;V1&lt;/code&gt; 등 을 계산할 때 시간 종속 상태를 올바르게 관찰하기 위해 잠금을 사용 한다고 가정 할 수 있습니다 . &lt;code&gt;computeValue&lt;/code&gt; 를 에서 &lt;code&gt;T&lt;/code&gt; 와 새로운 값의 설치. 이 기간 동안 사용자 동기화가 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="9bd1711062d7dd1887987fad1cc09f74331b3cc9" translate="yes" xml:space="preserve">
          <source>We could transform the class file (with the ClassFileTransformer during the initial definition of the class) so that this becomes:</source>
          <target state="translated">클래스 파일 (클래스의 초기 정의 중에 ClassFileTransformer를 사용하여)을 다음과 같이 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f1706f4d546751f5262ec58f5ada7af188fcd30" translate="yes" xml:space="preserve">
          <source>We draw the background in paintMenuItem() so override update (which fills the background of opaque components by default) to just call paint().</source>
          <target state="translated">We draw the background in paintMenuItem() so override update (which fills the background of opaque components by default) to just call paint().</target>
        </trans-unit>
        <trans-unit id="59c0f6e503eaafc2be37d362079723229307a794" translate="yes" xml:space="preserve">
          <source>We pass &lt;code&gt;ModelChanged&lt;/code&gt; events along to the listeners with the tabbedpane (instead of the model itself) as the event source.</source>
          <target state="translated">We pass &lt;code&gt;ModelChanged&lt;/code&gt; events along to the listeners with the tabbedpane (instead of the model itself) as the event source.</target>
        </trans-unit>
        <trans-unit id="9081ad5208956aff9aea73dc70681b98af50b7b1" translate="yes" xml:space="preserve">
          <source>We would get the desired result, and it would even work in parallel. However, we might not be happy about the performance! Such an implementation would do a great deal of string copying, and the run time would be &lt;em&gt;O(n^2)&lt;/em&gt; in the number of characters. A more performant approach would be to accumulate the results into a &lt;a href=&quot;../../lang/stringbuilder&quot;&gt;&lt;code&gt;StringBuilder&lt;/code&gt;&lt;/a&gt;, which is a mutable container for accumulating strings. We can use the same technique to parallelize mutable reduction as we do with ordinary reduction.</source>
          <target state="translated">우리는 원하는 결과를 얻을 수 있으며 병렬로도 작동합니다. 그러나 성능에 만족하지 않을 수 있습니다! 이러한 구현은 많은 양의 문자열 복사를 수행하며 런타임 은 문자 수에서 &lt;em&gt;O (n ^ 2)&lt;/em&gt; 입니다. 보다 성능이 좋은 방법은 결과를 문자열을 쌓기위한 가변 컨테이너 인 &lt;a href=&quot;../../lang/stringbuilder&quot;&gt; &lt;code&gt;StringBuilder&lt;/code&gt; &lt;/a&gt; 에 누적하는 것입니다. 우리는 일반적인 축소와 마찬가지로 동일한 기술을 사용하여 변경 가능한 축소를 병렬화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a792d756a38347597c27360412bb8f8fa517b753" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;AN&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 캐릭터 타입 「AN」</target>
        </trans-unit>
        <trans-unit id="24dbecca4697c39dcb12d83d3e21e053a4fbf4ac" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;BN&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 캐릭터 타입 「BN」</target>
        </trans-unit>
        <trans-unit id="b592dbfa74287749b5b330052c7e3f462ec0a974" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;CS&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 캐릭터 타입 「CS」</target>
        </trans-unit>
        <trans-unit id="d484194528c4965d5cfe46ac4072c437b4f7364f" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;EN&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 캐릭터 타입 「EN」</target>
        </trans-unit>
        <trans-unit id="73f96fcc50384aeb2e177d07991c8003c66a6753" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;ES&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 문자 타입 &quot;ES&quot;</target>
        </trans-unit>
        <trans-unit id="818ef5444e8d72a94e14f04b5d6b122d1830655b" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;ET&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 캐릭터 타입 「ET」</target>
        </trans-unit>
        <trans-unit id="c99874e66a6faaa3e643ce526bd272b2b92a2b54" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;FSI&quot; in the Unicode specification.</source>
          <target state="translated">Weak bidirectional character type &quot;FSI&quot; in the Unicode specification.</target>
        </trans-unit>
        <trans-unit id="099fc15c3cb6ba98715a4b72dd526f5d81f830d5" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;LRI&quot; in the Unicode specification.</source>
          <target state="translated">Weak bidirectional character type &quot;LRI&quot; in the Unicode specification.</target>
        </trans-unit>
        <trans-unit id="34c6763955af9013896491090181dbcd5a8dd74c" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;NSM&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 캐릭터 타입 「NSM」</target>
        </trans-unit>
        <trans-unit id="956c2a4c465d4b08d54fa1ddb34419c1810351ef" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;PDF&quot; in the Unicode specification.</source>
          <target state="translated">Unicode 사양의 약한 쌍방향 캐릭터 타입 「PDF」</target>
        </trans-unit>
        <trans-unit id="c69b4ec1842ff9f768a4e6dbdf7fddb256b1a65b" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;PDI&quot; in the Unicode specification.</source>
          <target state="translated">Weak bidirectional character type &quot;PDI&quot; in the Unicode specification.</target>
        </trans-unit>
        <trans-unit id="df1f73aee439e20dfa86c7ecbef320f0ab18cfd1" translate="yes" xml:space="preserve">
          <source>Weak bidirectional character type &quot;RLI&quot; in the Unicode specification.</source>
          <target state="translated">Weak bidirectional character type &quot;RLI&quot; in the Unicode specification.</target>
        </trans-unit>
        <trans-unit id="ea5a187b5f618fd1690650ad7c0db149755eff4a" translate="yes" xml:space="preserve">
          <source>Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed.</source>
          <target state="translated">약한 참조 객체. 참조 객체의 최종화, 마무리 및 재생을 방해하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="48563266c944d99d9eaba5e60d33852a238c2d45" translate="yes" xml:space="preserve">
          <source>Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. Weak references are most often used to implement canonicalizing mappings.</source>
          <target state="translated">약한 참조 객체. 참조 객체의 최종화, 마무리 및 재생을 방해하지 않습니다. 약한 참조는 표준 매핑을 구현하는 데 가장 자주 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="03229c3ce0e1d4a5dea21e64ed5a7a21dd50346b" translate="yes" xml:space="preserve">
          <source>WeakHashMap</source>
          <target state="translated">WeakHashMap</target>
        </trans-unit>
        <trans-unit id="9f578a1ece44744875548c14accd3ab118f52f96" translate="yes" xml:space="preserve">
          <source>WeakHashMap.clear()</source>
          <target state="translated">WeakHashMap.clear()</target>
        </trans-unit>
        <trans-unit id="cac8951d07963c9661fb7627c7267795d5e7a4f2" translate="yes" xml:space="preserve">
          <source>WeakHashMap.containsKey()</source>
          <target state="translated">WeakHashMap.containsKey()</target>
        </trans-unit>
        <trans-unit id="356e80282ac519184e65c488908383906447f348" translate="yes" xml:space="preserve">
          <source>WeakHashMap.containsValue()</source>
          <target state="translated">WeakHashMap.containsValue()</target>
        </trans-unit>
        <trans-unit id="60be0515876f006e6ca1cd3d7d552af9ccd01ffe" translate="yes" xml:space="preserve">
          <source>WeakHashMap.entrySet()</source>
          <target state="translated">WeakHashMap.entrySet()</target>
        </trans-unit>
        <trans-unit id="e49f5cd6e00c4432b7ebd63f64c70d97e2bfbb24" translate="yes" xml:space="preserve">
          <source>WeakHashMap.forEach()</source>
          <target state="translated">WeakHashMap.forEach()</target>
        </trans-unit>
        <trans-unit id="19b9a321a4f1bd958cc8610a953bd1ee99035128" translate="yes" xml:space="preserve">
          <source>WeakHashMap.get()</source>
          <target state="translated">WeakHashMap.get()</target>
        </trans-unit>
        <trans-unit id="a5a9ba4e04afb8fcdfc19b61079a8ebd40110696" translate="yes" xml:space="preserve">
          <source>WeakHashMap.isEmpty()</source>
          <target state="translated">WeakHashMap.isEmpty()</target>
        </trans-unit>
        <trans-unit id="7bd691f3c04552e56d59d519f1a4666a626cae68" translate="yes" xml:space="preserve">
          <source>WeakHashMap.keySet()</source>
          <target state="translated">WeakHashMap.keySet()</target>
        </trans-unit>
        <trans-unit id="3e34f391baf109443d3eca81db8e406c21247e08" translate="yes" xml:space="preserve">
          <source>WeakHashMap.put()</source>
          <target state="translated">WeakHashMap.put()</target>
        </trans-unit>
        <trans-unit id="b834ab3cef7770bc9b59513aef17274348ef63ed" translate="yes" xml:space="preserve">
          <source>WeakHashMap.putAll()</source>
          <target state="translated">WeakHashMap.putAll()</target>
        </trans-unit>
        <trans-unit id="51c4de9f87dd1095d9471573ff074fdefaf0db3e" translate="yes" xml:space="preserve">
          <source>WeakHashMap.remove()</source>
          <target state="translated">WeakHashMap.remove()</target>
        </trans-unit>
        <trans-unit id="77d99b79dc28fd6bd9db3b97d88184d2de438fd0" translate="yes" xml:space="preserve">
          <source>WeakHashMap.replaceAll()</source>
          <target state="translated">WeakHashMap.replaceAll()</target>
        </trans-unit>
        <trans-unit id="42ea52208a3ce498ea844af7690268dde31e784f" translate="yes" xml:space="preserve">
          <source>WeakHashMap.size()</source>
          <target state="translated">WeakHashMap.size()</target>
        </trans-unit>
        <trans-unit id="8bc55d91cb214228db71f61c09b537092b4bec12" translate="yes" xml:space="preserve">
          <source>WeakHashMap.values()</source>
          <target state="translated">WeakHashMap.values()</target>
        </trans-unit>
        <trans-unit id="5ea903ebda4f9f28f642d78e916dc09051395c95" translate="yes" xml:space="preserve">
          <source>WeakReference</source>
          <target state="translated">WeakReference</target>
        </trans-unit>
        <trans-unit id="bf85b22fdda959fc428f30bfb2a0f068edc191bf" translate="yes" xml:space="preserve">
          <source>WebRowSet</source>
          <target state="translated">WebRowSet</target>
        </trans-unit>
        <trans-unit id="fd2fe2179b44fad347e37ec201d26ab520f15318" translate="yes" xml:space="preserve">
          <source>WebSocket</source>
          <target state="translated">WebSocket</target>
        </trans-unit>
        <trans-unit id="8d50debedf657789eb83e5bb579d738443688767" translate="yes" xml:space="preserve">
          <source>WebSocket has an input and an output side. These sides are independent from each other. A side can either be open or closed. Once closed, the side remains closed. WebSocket messages are sent through a &lt;code&gt;WebSocket&lt;/code&gt; and received through a &lt;code&gt;WebSocket.Listener&lt;/code&gt; associated with it. Messages can be sent until the WebSocket's output is closed, and received until the WebSocket's input is closed.</source>
          <target state="translated">WebSocket has an input and an output side. These sides are independent from each other. A side can either be open or closed. Once closed, the side remains closed. WebSocket messages are sent through a &lt;code&gt;WebSocket&lt;/code&gt; and received through a &lt;code&gt;WebSocket.Listener&lt;/code&gt; associated with it. Messages can be sent until the WebSocket's output is closed, and received until the WebSocket's input is closed.</target>
        </trans-unit>
        <trans-unit id="9e7c0e37606b1f794c1372d83eddadb351ac3d9c" translate="yes" xml:space="preserve">
          <source>WebSocket.Builder</source>
          <target state="translated">WebSocket.Builder</target>
        </trans-unit>
        <trans-unit id="0de0866691e65f5871dab18f5e7b17347cdabb10" translate="yes" xml:space="preserve">
          <source>WebSocket.Listener</source>
          <target state="translated">WebSocket.Listener</target>
        </trans-unit>
        <trans-unit id="e5ae2288a1ae365d9dae39add24416582095231c" translate="yes" xml:space="preserve">
          <source>WebSocketHandshakeException</source>
          <target state="translated">WebSocketHandshakeException</target>
        </trans-unit>
        <trans-unit id="5656b9b79b0316fc611a9c30d2ffac25228b8371" translate="yes" xml:space="preserve">
          <source>Wednesday</source>
          <target state="translated">Wednesday</target>
        </trans-unit>
        <trans-unit id="10b774684253b67ed6046c62d38b42b91e852330" translate="yes" xml:space="preserve">
          <source>Week 0 of January 2009</source>
          <target state="translated">2009 년 1 월 0 주</target>
        </trans-unit>
        <trans-unit id="7b27856c3025a48dfd145f75086cda19de2ee70e" translate="yes" xml:space="preserve">
          <source>Week 1 of 2009</source>
          <target state="translated">2009 년 1 주차</target>
        </trans-unit>
        <trans-unit id="e0b134e5cd0d67c325ab9181f61674f7eb847f4f" translate="yes" xml:space="preserve">
          <source>Week 1 of January 2009</source>
          <target state="translated">2009 년 1 월 1 주</target>
        </trans-unit>
        <trans-unit id="0273a235d369407f5bc0d09e86dc0804188d2c3d" translate="yes" xml:space="preserve">
          <source>Week 1 of week-based-year 2009</source>
          <target state="translated">2009 년 주중 1 주차</target>
        </trans-unit>
        <trans-unit id="61c045f9f24b3b90a55c9f64fb89b4cf33f3dbdd" translate="yes" xml:space="preserve">
          <source>Week 2 of 2009</source>
          <target state="translated">2009 년 2 주</target>
        </trans-unit>
        <trans-unit id="16159932e1ca3544ef8dd1d77e4cd53b696ac5c6" translate="yes" xml:space="preserve">
          <source>Week 2 of January 2009</source>
          <target state="translated">2009 년 1 월 2 주</target>
        </trans-unit>
        <trans-unit id="651b78362b5aaa1728d942efc5ee0ee574ce4c00" translate="yes" xml:space="preserve">
          <source>Week 2 of week-based-year 2009</source>
          <target state="translated">2009 년 주중 2 주차</target>
        </trans-unit>
        <trans-unit id="fc5ccf6381813c151159e75357417f783c0aec41" translate="yes" xml:space="preserve">
          <source>Week 5 of December 2008</source>
          <target state="translated">2008 년 12 월 5 주</target>
        </trans-unit>
        <trans-unit id="a6c2f210f4569dac04f3823e9662a42bc6ce2da1" translate="yes" xml:space="preserve">
          <source>Week 52 of week-based-year 2008</source>
          <target state="translated">2008 년 주별 52 주</target>
        </trans-unit>
        <trans-unit id="de9cd5103d931eb33add540394a1f571fcdcca10" translate="yes" xml:space="preserve">
          <source>Week 53 of 2008</source>
          <target state="translated">2008 년 53 주</target>
        </trans-unit>
        <trans-unit id="6c46029aa17fb600a21cad6bd08e77301e063307" translate="yes" xml:space="preserve">
          <source>Week Based Year</source>
          <target state="translated">주별 연도</target>
        </trans-unit>
        <trans-unit id="0fcbe34401d64884bb36657832164bedeaa60659" translate="yes" xml:space="preserve">
          <source>Week Of Month</source>
          <target state="translated">달의 주</target>
        </trans-unit>
        <trans-unit id="f295af822500a48f0431b7b363da9a13a414b828" translate="yes" xml:space="preserve">
          <source>Week Of Year and Week Year</source>
          <target state="translated">올해의 주와 주</target>
        </trans-unit>
        <trans-unit id="cf20b17dedbd2fa061bb084e6e427c23883b04dc" translate="yes" xml:space="preserve">
          <source>Week based years</source>
          <target state="translated">주별 년</target>
        </trans-unit>
        <trans-unit id="89443bf2616153b1df032a1eb1df761e955b11a3" translate="yes" xml:space="preserve">
          <source>Week in month</source>
          <target state="translated">달의 주</target>
        </trans-unit>
        <trans-unit id="cadc38e9abe6dd9dd6fcc84c98869fbd77cea946" translate="yes" xml:space="preserve">
          <source>Week in year</source>
          <target state="translated">연중 주</target>
        </trans-unit>
        <trans-unit id="66de1cb2f3c93d7fd3d3a0a272c173e1b5c911b9" translate="yes" xml:space="preserve">
          <source>Week of Month</source>
          <target state="translated">이달의 주</target>
        </trans-unit>
        <trans-unit id="d6c62cdc6501a8ecf111466d9a326e871d8b8b6e" translate="yes" xml:space="preserve">
          <source>Week of Year</source>
          <target state="translated">올해의 주</target>
        </trans-unit>
        <trans-unit id="c19474894e0551ed2105ef8e4012a429b6bad40c" translate="yes" xml:space="preserve">
          <source>Week one (1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the month. Thus, week one may start up to &lt;code&gt;minDays&lt;/code&gt; days before the start of the month. If the first week starts after the start of the month then the period before is week zero (0).</source>
          <target state="translated">Week one (1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; days in the month. Thus, week one may start up to &lt;code&gt;minDays&lt;/code&gt; days before the start of the month. If the first week starts after the start of the month then the period before is week zero (0).</target>
        </trans-unit>
        <trans-unit id="74d6db712bf03a49e67556ff1aec1f683642d8c2" translate="yes" xml:space="preserve">
          <source>Week one (1) is the week starting on the &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the month. Thus, week one may start up to &lt;code&gt;minDays&lt;/code&gt; days before the start of the month. If the first week starts after the start of the month then the period before is week zero (0).</source>
          <target state="translated">첫째 주 (1)는 &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; 에서 시작하여 그 달 에 최소한 &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; 일이있는 주입니다. 따라서 &lt;code&gt;minDays&lt;/code&gt; 주는 매월 시작하기 최소 min 일 전까지 시작할 수 있습니다 . 월이 시작된 후 첫 번째 주가 시작되면 이전 기간은 0 주입니다.</target>
        </trans-unit>
        <trans-unit id="12d77cb8838ad5fb792309f27517ce73b66b3ed1" translate="yes" xml:space="preserve">
          <source>Week one(1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the year. If the first week starts after the start of the year then the period before is in the last week of the previous year.</source>
          <target state="translated">Week one(1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; days in the year. If the first week starts after the start of the year then the period before is in the last week of the previous year.</target>
        </trans-unit>
        <trans-unit id="ceffe96a6e332c6dd3063a343f6124a6b5ee6477" translate="yes" xml:space="preserve">
          <source>Week one(1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the year. Thus, week one may start before the start of the year. If the first week starts after the start of the year then the period before is in the last week of the previous year.</source>
          <target state="translated">Week one(1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; days in the year. Thus, week one may start before the start of the year. If the first week starts after the start of the year then the period before is in the last week of the previous year.</target>
        </trans-unit>
        <trans-unit id="4f6f45d858ed4016de445396b12998ca4b8aad27" translate="yes" xml:space="preserve">
          <source>Week one(1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the year. Thus, week one may start up to &lt;code&gt;minDays&lt;/code&gt; days before the start of the year. If the first week starts after the start of the year then the period before is week zero (0).</source>
          <target state="translated">Week one(1) is the week starting on the &lt;a href=&quot;#getFirstDayOfWeek()&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; where there are at least &lt;a href=&quot;#getMinimalDaysInFirstWeek()&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; days in the year. Thus, week one may start up to &lt;code&gt;minDays&lt;/code&gt; days before the start of the year. If the first week starts after the start of the year then the period before is week zero (0).</target>
        </trans-unit>
        <trans-unit id="44f1f99446cb5330dbad01f12f044f5a225971e2" translate="yes" xml:space="preserve">
          <source>Week one(1) is the week starting on the &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the year. If the first week starts after the start of the year then the period before is in the last week of the previous year.</source>
          <target state="translated">1 주차 (1)는 &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; 에서 시작 하여 그해 에 적어도 &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; 일이있는 주입니다. 첫 번째 주가 연도가 시작된 후 시작되면 이전 기간은 전년도 마지막 주입니다.</target>
        </trans-unit>
        <trans-unit id="59d424ddfaa661a922cb86607e9a3548d6b3e08f" translate="yes" xml:space="preserve">
          <source>Week one(1) is the week starting on the &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the year. Thus, week one may start before the start of the year. If the first week starts after the start of the year then the period before is in the last week of the previous year.</source>
          <target state="translated">1 주차 (1)는 &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; 에서 시작 하여 그해 에 적어도 &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; 일이있는 주입니다. 따라서 1 주차는 연초 전에 시작될 수 있습니다. 첫 번째 주가 연도가 시작된 후 시작되면 이전 기간은 전년도 마지막 주입니다.</target>
        </trans-unit>
        <trans-unit id="edf457af9ac86c639d6fa25a82d99903848d2cc3" translate="yes" xml:space="preserve">
          <source>Week one(1) is the week starting on the &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt;&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; where there are at least &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt;&lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt; days in the year. Thus, week one may start up to &lt;code&gt;minDays&lt;/code&gt; days before the start of the year. If the first week starts after the start of the year then the period before is week zero (0).</source>
          <target state="translated">1 주차 (1)는 &lt;a href=&quot;weekfields#getFirstDayOfWeek--&quot;&gt; &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt; 에서 시작 하여 그해 에 적어도 &lt;a href=&quot;weekfields#getMinimalDaysInFirstWeek--&quot;&gt; &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; &lt;/a&gt; 일이있는 주입니다. 따라서 1 주차 는 연도가 시작되기 &lt;code&gt;minDays&lt;/code&gt; 일 전까지 시작할 수 있습니다 . 첫 번째 주가 연도가 시작된 후 시작되면 이전 기간은 0 주입니다.</target>
        </trans-unit>
        <trans-unit id="21523175d42396f1b83a7d224bcef6c78db04431" translate="yes" xml:space="preserve">
          <source>Week year</source>
          <target state="translated">주년</target>
        </trans-unit>
        <trans-unit id="0f3cd7a23e2be7e3002b8bffb3ed9ec37177e7b2" translate="yes" xml:space="preserve">
          <source>WeekFields</source>
          <target state="translated">WeekFields</target>
        </trans-unit>
        <trans-unit id="22700d348b3e11d9fd6613090889ec190de727aa" translate="yes" xml:space="preserve">
          <source>WeekFields instances are singletons; for each unique combination of &lt;code&gt;firstDayOfWeek&lt;/code&gt; and &lt;code&gt;minimalDaysInFirstWeek&lt;/code&gt; the same instance will be returned.</source>
          <target state="translated">WeekFields instances are singletons; for each unique combination of &lt;code&gt;firstDayOfWeek&lt;/code&gt; and &lt;code&gt;minimalDaysInFirstWeek&lt;/code&gt; the same instance will be returned.</target>
        </trans-unit>
        <trans-unit id="718dae35ec7f29671d329f016891913ac6dd0953" translate="yes" xml:space="preserve">
          <source>WeekFields instances are singletons; for each unique combination of &lt;code&gt;firstDayOfWeek&lt;/code&gt; and &lt;code&gt;minimalDaysInFirstWeek&lt;/code&gt; the the same instance will be returned.</source>
          <target state="translated">WeekFields 인스턴스는 싱글 톤입니다. &lt;code&gt;firstDayOfWeek&lt;/code&gt; 와 &lt;code&gt;minimalDaysInFirstWeek&lt;/code&gt; 의 고유 한 조합마다 동일한 인스턴스가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="44d5d3a1e1dee13721fd9eb305d4686b3f9e55b7" translate="yes" xml:space="preserve">
          <source>WeekFields provides five fields, &lt;a href=&quot;#dayOfWeek()&quot;&gt;&lt;code&gt;dayOfWeek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#weekOfMonth()&quot;&gt;&lt;code&gt;weekOfMonth()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#weekOfYear()&quot;&gt;&lt;code&gt;weekOfYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#weekOfWeekBasedYear()&quot;&gt;&lt;code&gt;weekOfWeekBasedYear()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#weekBasedYear()&quot;&gt;&lt;code&gt;weekBasedYear()&lt;/code&gt;&lt;/a&gt; that provide access to the values from any &lt;a href=&quot;temporal&quot;&gt;temporal object&lt;/a&gt;.</source>
          <target state="translated">WeekFields provides five fields, &lt;a href=&quot;#dayOfWeek()&quot;&gt; &lt;code&gt;dayOfWeek()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#weekOfMonth()&quot;&gt; &lt;code&gt;weekOfMonth()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#weekOfYear()&quot;&gt; &lt;code&gt;weekOfYear()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#weekOfWeekBasedYear()&quot;&gt; &lt;code&gt;weekOfWeekBasedYear()&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#weekBasedYear()&quot;&gt; &lt;code&gt;weekBasedYear()&lt;/code&gt; &lt;/a&gt; that provide access to the values from any &lt;a href=&quot;temporal&quot;&gt;temporal object&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="89a2292f88acbc8f0e38aee8edbc776ed1156087" translate="yes" xml:space="preserve">
          <source>WeekFields provides five fields, &lt;a href=&quot;weekfields#dayOfWeek--&quot;&gt;&lt;code&gt;dayOfWeek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;weekfields#weekOfMonth--&quot;&gt;&lt;code&gt;weekOfMonth()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;weekfields#weekOfYear--&quot;&gt;&lt;code&gt;weekOfYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;weekfields#weekOfWeekBasedYear--&quot;&gt;&lt;code&gt;weekOfWeekBasedYear()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;weekfields#weekBasedYear--&quot;&gt;&lt;code&gt;weekBasedYear()&lt;/code&gt;&lt;/a&gt; that provide access to the values from any &lt;a href=&quot;temporal&quot;&gt;temporal object&lt;/a&gt;.</source>
          <target state="translated">WeekFields는 모든 &lt;a href=&quot;temporal&quot;&gt;임시 객체&lt;/a&gt; 의 값에 액세스 할 수있는 &lt;a href=&quot;weekfields#dayOfWeek--&quot;&gt; &lt;code&gt;dayOfWeek()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;weekfields#weekOfMonth--&quot;&gt; &lt;code&gt;weekOfMonth()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;weekfields#weekOfYear--&quot;&gt; &lt;code&gt;weekOfYear()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;weekfields#weekOfWeekBasedYear--&quot;&gt; &lt;code&gt;weekOfWeekBasedYear()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;weekfields#weekBasedYear--&quot;&gt; &lt;code&gt;weekBasedYear()&lt;/code&gt; &lt;/a&gt; 5 개의 필드 를 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="6cb3080d6ff8341db52a2cdfe428e6fe7cfdc77d" translate="yes" xml:space="preserve">
          <source>WeekFields.dayOfWeek()</source>
          <target state="translated">WeekFields.dayOfWeek()</target>
        </trans-unit>
        <trans-unit id="63de50e0e26b59f3d9fe368fff1375c932f6dc68" translate="yes" xml:space="preserve">
          <source>WeekFields.equals()</source>
          <target state="translated">WeekFields.equals()</target>
        </trans-unit>
        <trans-unit id="307be796ddd4af18d3ea219c21738d280f71a9f6" translate="yes" xml:space="preserve">
          <source>WeekFields.getFirstDayOfWeek()</source>
          <target state="translated">WeekFields.getFirstDayOfWeek()</target>
        </trans-unit>
        <trans-unit id="9eb1a32786064c34464f305adb94564c93fc3d6a" translate="yes" xml:space="preserve">
          <source>WeekFields.getMinimalDaysInFirstWeek()</source>
          <target state="translated">WeekFields.getMinimalDaysInFirstWeek()</target>
        </trans-unit>
        <trans-unit id="0f4344dbb38df7c1dd4475092ee3cc1b31b7a1dc" translate="yes" xml:space="preserve">
          <source>WeekFields.hashCode()</source>
          <target state="translated">WeekFields.hashCode()</target>
        </trans-unit>
        <trans-unit id="f5a7902f43adfba0ce22ee041b83a1d8e9b00d05" translate="yes" xml:space="preserve">
          <source>WeekFields.of()</source>
          <target state="translated">WeekFields.of()</target>
        </trans-unit>
        <trans-unit id="0d111eab407e09a34fda6c1f334ea981ad02f8d3" translate="yes" xml:space="preserve">
          <source>WeekFields.toString()</source>
          <target state="translated">WeekFields.toString()</target>
        </trans-unit>
        <trans-unit id="f7d24644a2eae9dfbf214b9d12aa277c6a89292c" translate="yes" xml:space="preserve">
          <source>WeekFields.weekBasedYear()</source>
          <target state="translated">WeekFields.weekBasedYear()</target>
        </trans-unit>
        <trans-unit id="6ed8a499946db10836e56570eaad12d34de1b1e4" translate="yes" xml:space="preserve">
          <source>WeekFields.weekOfMonth()</source>
          <target state="translated">WeekFields.weekOfMonth()</target>
        </trans-unit>
        <trans-unit id="f94cf8e74a33d036b43c60e0a361b7ab911bc24a" translate="yes" xml:space="preserve">
          <source>WeekFields.weekOfWeekBasedYear()</source>
          <target state="translated">WeekFields.weekOfWeekBasedYear()</target>
        </trans-unit>
        <trans-unit id="2788abb8d6fe59a50dbde8e26f797c0be24e8bc7" translate="yes" xml:space="preserve">
          <source>WeekFields.weekOfYear()</source>
          <target state="translated">WeekFields.weekOfYear()</target>
        </trans-unit>
        <trans-unit id="7d75266a53b99ce4d80d337862ea1edd8ba1b1a1" translate="yes" xml:space="preserve">
          <source>Weeks</source>
          <target state="translated">Weeks</target>
        </trans-unit>
        <trans-unit id="8df986efff37f1cf0680e8b945fdb0be0bb07b78" translate="yes" xml:space="preserve">
          <source>Weight is the overall 'weight' of the glyph in the line. Generally it is proportional to the size of the font. Glyphs with larger weight are allocated a correspondingly larger amount of the change in space.</source>
          <target state="translated">Weight is the overall 'weight' of the glyph in the line. Generally it is proportional to the size of the font. Glyphs with larger weight are allocated a correspondingly larger amount of the change in space.</target>
        </trans-unit>
        <trans-unit id="20ac2f25a966eb781339ca5e0fe0f7f875b9cfc8" translate="yes" xml:space="preserve">
          <source>Well known port for registry.</source>
          <target state="translated">Well known port for registry.</target>
        </trans-unit>
        <trans-unit id="b5ceaaaab5693bd089df6a3f31655e313dce3989" translate="yes" xml:space="preserve">
          <source>Well-formed country/region values have the form &lt;code&gt;[a-zA-Z]{2} | [0-9]{3}&lt;/code&gt;</source>
          <target state="translated">올바른 형식의 국가 / 지역 값은 &lt;code&gt;[a-zA-Z]{2} | [0-9]{3}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fe9a9ddb38f6c4d512e9dbb79376b8ca30e2bf0" translate="yes" xml:space="preserve">
          <source>Well-formed keys are single characters from the set &lt;code&gt;[0-9a-zA-Z]&lt;/code&gt;. Well-formed values have the form &lt;code&gt;SUBTAG ('-' SUBTAG)*&lt;/code&gt; where for the key 'x' &lt;code&gt;SUBTAG = [0-9a-zA-Z]{1,8}&lt;/code&gt; and for other keys &lt;code&gt;SUBTAG = [0-9a-zA-Z]{2,8}&lt;/code&gt; (that is, 'x' allows single-character subtags).</source>
          <target state="translated">올바른 형식의 키는 세트 &lt;code&gt;[0-9a-zA-Z]&lt;/code&gt; 의 단일 문자입니다 . &lt;code&gt;SUBTAG ('-' SUBTAG)*&lt;/code&gt; 형식의 값은 SUBTAG ( '-'SUBTAG) * 형식입니다. 여기서 ' &lt;code&gt;SUBTAG = [0-9a-zA-Z]{1,8}&lt;/code&gt; 및 기타 키 &lt;code&gt;SUBTAG = [0-9a-zA-Z]{2,8}&lt;/code&gt; (즉, 'x'는 단일 문자 하위 태그를 허용합니다).</target>
        </trans-unit>
        <trans-unit id="6162cb572cd0fa07269f9f853edbaab78da2fbaa" translate="yes" xml:space="preserve">
          <source>Well-formed language values have the form &lt;code&gt;[a-zA-Z]{2,8}&lt;/code&gt;. Note that this is not the full BCP47 language production, since it excludes extlang. They are not needed since modern three-letter language codes replace them.</source>
          <target state="translated">Well-formed language values have the form &lt;code&gt;[a-zA-Z]{2,8}&lt;/code&gt; . Note that this is not the full BCP47 language production, since it excludes extlang. They are not needed since modern three-letter language codes replace them.</target>
        </trans-unit>
        <trans-unit id="a50506c60f4a43fce22721c5603adee4e842c36f" translate="yes" xml:space="preserve">
          <source>Well-formed language values have the form &lt;code&gt;[a-zA-Z]{2,8}&lt;/code&gt;. Note that this is not the the full BCP47 language production, since it excludes extlang. They are not needed since modern three-letter language codes replace them.</source>
          <target state="translated">올바른 형식의 언어 값은 &lt;code&gt;[a-zA-Z]{2,8}&lt;/code&gt; 형식 입니다. 이것은 extlang을 제외하기 때문에 전체 BCP47 언어 제작이 아닙니다. 현대의 3 문자 언어 코드로 대체되므로 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="858fa2509ca423136e7cf31f512c6eefb90eeb81" translate="yes" xml:space="preserve">
          <source>Well-formed script values have the form &lt;code&gt;[a-zA-Z]{4}&lt;/code&gt;</source>
          <target state="translated">올바른 형식의 스크립트 값은 &lt;code&gt;[a-zA-Z]{4}&lt;/code&gt; 형식입니다.</target>
        </trans-unit>
        <trans-unit id="f4d5d35b51d9cbb55387c8e6d28bc1a22d820b0a" translate="yes" xml:space="preserve">
          <source>Well-formed variant values have the form &lt;code&gt;SUBTAG
   (('_'|'-') SUBTAG)*&lt;/code&gt; where &lt;code&gt;SUBTAG =
   [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}&lt;/code&gt;. (Note: BCP 47 only uses hyphen ('-') as a delimiter, this is more lenient).</source>
          <target state="translated">&lt;code&gt;SUBTAG (('_'|'-') SUBTAG)*&lt;/code&gt; 형식의 변형 값은 SUBTAG (( '_'| '-') SUBTAG) * 형식입니다. 여기서 &lt;code&gt;SUBTAG = [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}&lt;/code&gt; . (참고 : BCP 47은 구분 기호로 하이픈 ( '-') 만 사용하므로보다 관대합니다.)</target>
        </trans-unit>
        <trans-unit id="ce95843c87158992b2858d825f7a237360e6b63f" translate="yes" xml:space="preserve">
          <source>West pane</source>
          <target state="translated">West pane</target>
        </trans-unit>
        <trans-unit id="6671f7458666597da2926cfbb386f9379fec61ac" translate="yes" xml:space="preserve">
          <source>What can you already do with the above setup? &lt;code&gt;DynamicLinkerFactory&lt;/code&gt; by default creates a &lt;code&gt;DynamicLinker&lt;/code&gt; that can link Java objects with the usual Java semantics. If you have these three simple classes:</source>
          <target state="translated">위의 설정으로 이미 무엇을 할 수 있습니까? &lt;code&gt;DynamicLinkerFactory&lt;/code&gt; 기본적으로는 생성 &lt;code&gt;DynamicLinker&lt;/code&gt; 자바는 일반적인 자바 문법과 객체를 연결할 수 있습니다. 다음 세 가지 간단한 클래스가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="c9e4b6efb7854b9fa304410f366631e4c9b775f3" translate="yes" xml:space="preserve">
          <source>What is an Attribute?</source>
          <target state="translated">속성이란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="301ddf4fd686c9921c42e78bd43366e889d8837c" translate="yes" xml:space="preserve">
          <source>What is the offset along the minor axis</source>
          <target state="translated">What is the offset along the minor axis</target>
        </trans-unit>
        <trans-unit id="c587c6fc95a9107db0097d9b15fd1d5ffc2e7330" translate="yes" xml:space="preserve">
          <source>What is the span along the major axis.</source>
          <target state="translated">What is the span along the major axis.</target>
        </trans-unit>
        <trans-unit id="8dbf8f4ff843b6789ff963d498444a2edfc85fed" translate="yes" xml:space="preserve">
          <source>What is the span along the minor axis.</source>
          <target state="translated">What is the span along the minor axis.</target>
        </trans-unit>
        <trans-unit id="e1253f057c65c5140688cb6f74eaff535608ffb8" translate="yes" xml:space="preserve">
          <source>What operation was being attempted when a conflict occurred</source>
          <target state="translated">What operation was being attempted when a conflict occurred</target>
        </trans-unit>
        <trans-unit id="3dc6bced115a4ebb63076f833d6f3f46734f7360" translate="yes" xml:space="preserve">
          <source>What the &lt;code&gt;java.sql&lt;/code&gt; Package Contains</source>
          <target state="translated">What the &lt;code&gt;java.sql&lt;/code&gt; Package Contains</target>
        </trans-unit>
        <trans-unit id="7993d29ebd453bb82d2373c5e86cbe64769bdcd1" translate="yes" xml:space="preserve">
          <source>What the JDBC 4.3 API Includes</source>
          <target state="translated">JDBC 4.3 API에 포함 된 내용</target>
        </trans-unit>
        <trans-unit id="dae0b4b4d87d6d1381813d3114a08a7d3cf1d6f4" translate="yes" xml:space="preserve">
          <source>What the JDBC&amp;trade; 4.3 API Includes</source>
          <target state="translated">What the JDBC&amp;trade; 4.3 API Includes</target>
        </trans-unit>
        <trans-unit id="f523aaaa18b102076687e4244d4e07bb6f436a11" translate="yes" xml:space="preserve">
          <source>What the Permission Allows</source>
          <target state="translated">권한이 허용하는 것</target>
        </trans-unit>
        <trans-unit id="373c94003a259747dc5ca0b92f838b2b5acf5d59" translate="yes" xml:space="preserve">
          <source>What this means is that the ClassLoader may be wrapped in another ClassLoader for security or other reasons.</source>
          <target state="translated">이것은 보안 또는 다른 이유로 ClassLoader가 다른 ClassLoader에 래핑 될 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="ca20440fd173e3537d3dbdf1472c311d148f0f89" translate="yes" xml:space="preserve">
          <source>What's returned by &lt;code&gt;AccessibleJEditorPaneHTML.getAccessibleText&lt;/code&gt;.</source>
          <target state="translated">What's returned by &lt;code&gt;AccessibleJEditorPaneHTML.getAccessibleText&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="caf5d2a20376b8ede2618bea6b71d51812f11949" translate="yes" xml:space="preserve">
          <source>What's returned by &lt;code&gt;AccessibleJEditorPaneHTML.getAccessibleText&lt;/code&gt;. Provides support for &lt;code&gt;AccessibleHypertext&lt;/code&gt; in case there is an HTML document being displayed in this &lt;code&gt;JEditorPane&lt;/code&gt;.</source>
          <target state="translated">What's returned by &lt;code&gt;AccessibleJEditorPaneHTML.getAccessibleText&lt;/code&gt; . Provides support for &lt;code&gt;AccessibleHypertext&lt;/code&gt; in case there is an HTML document being displayed in this &lt;code&gt;JEditorPane&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c62f541df771dc9c17e6db7806198f01ce3df87" translate="yes" xml:space="preserve">
          <source>Whatever the</source>
          <target state="translated">무엇이든</target>
        </trans-unit>
        <trans-unit id="89357495a0b5512bbc9f5bc66b16ee57716aba68" translate="yes" xml:space="preserve">
          <source>Whatever the &lt;a href=&quot;#groupname&quot;&gt;named-capturing group&lt;/a&gt; &quot;name&quot; matched</source>
          <target state="translated">무엇이든 &lt;a href=&quot;#groupname&quot;&gt;명명 된 캡처 그룹&lt;/a&gt; &quot;name&quot;이 (가) 일치하는</target>
        </trans-unit>
        <trans-unit id="183f14f8a35d4f7ed23e203448b1fd0af728304e" translate="yes" xml:space="preserve">
          <source>When 'value' is no longer valid then the getter method is invoked for the attribute. The 'lastUpdatedTimeStamp' field and `value' fields are updated.</source>
          <target state="translated">'value'가 더 이상 유효하지 않으면 속성에 대해 getter 메소드가 호출됩니다. 'lastUpdatedTimeStamp'필드와 'value'필드가 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="c20d6596c0516c20ee93280ced0b8c1583308051" translate="yes" xml:space="preserve">
          <source>When 'value' is no longer valid then the operation method is invoked. The 'lastUpdatedTimeStamp' field and `value' fields are updated.</source>
          <target state="translated">'value'가 더 이상 유효하지 않으면 조작 메소드가 호출됩니다. 'lastUpdatedTimeStamp'필드와 'value'필드가 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="7ad7cf61a538ac9682cd9c38c51af1051f6daf5e" translate="yes" xml:space="preserve">
          <source>When 'value' is valid, 'value' is returned.</source>
          <target state="translated">'value'가 유효하면 'value'가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="7333d8d0058642dce5b6ba018287a61a8e12ae52" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#sendNotification(javax.management.Notification)&quot;&gt;&lt;code&gt;sendNotification&lt;/code&gt;&lt;/a&gt; is called, a listener is selected if it was added with a null &lt;a href=&quot;notificationfilter&quot;&gt;&lt;code&gt;NotificationFilter&lt;/code&gt;&lt;/a&gt;, or if &lt;a href=&quot;notificationfilter#isNotificationEnabled(javax.management.Notification)&quot;&gt;&lt;code&gt;isNotificationEnabled&lt;/code&gt;&lt;/a&gt; returns true for the notification being sent. The call to &lt;code&gt;NotificationFilter.isNotificationEnabled&lt;/code&gt; takes place in the thread that called &lt;code&gt;sendNotification&lt;/code&gt;. Then, for each selected listener, &lt;a href=&quot;../../../java.base/java/util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt;&lt;code&gt;executor.execute&lt;/code&gt;&lt;/a&gt; is called with a command that calls the &lt;code&gt;handleNotification&lt;/code&gt; method.</source>
          <target state="translated">When &lt;a href=&quot;#sendNotification(javax.management.Notification)&quot;&gt; &lt;code&gt;sendNotification&lt;/code&gt; &lt;/a&gt; is called, a listener is selected if it was added with a null &lt;a href=&quot;notificationfilter&quot;&gt; &lt;code&gt;NotificationFilter&lt;/code&gt; &lt;/a&gt;, or if &lt;a href=&quot;notificationfilter#isNotificationEnabled(javax.management.Notification)&quot;&gt; &lt;code&gt;isNotificationEnabled&lt;/code&gt; &lt;/a&gt; returns true for the notification being sent. The call to &lt;code&gt;NotificationFilter.isNotificationEnabled&lt;/code&gt; takes place in the thread that called &lt;code&gt;sendNotification&lt;/code&gt; . Then, for each selected listener, &lt;a href=&quot;../../../java.base/java/util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt; &lt;code&gt;executor.execute&lt;/code&gt; &lt;/a&gt; is called with a command that calls the &lt;code&gt;handleNotification&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="720701165d46b861473379cd54f2570d2c747f20" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#value-field&quot;&gt;value&lt;/a&gt; was set.</source>
          <target state="translated">&lt;a href=&quot;#value-field&quot;&gt;가치가&lt;/a&gt; 있을 때 이 설정</target>
        </trans-unit>
        <trans-unit id="2787518abc9792a673e362e95dc630f0312e2d2c" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#waitFor()&quot;&gt;&lt;code&gt;waitFor()&lt;/code&gt;&lt;/a&gt; returns successfully the CompletableFuture is &lt;a href=&quot;../util/concurrent/completablefuture#complete(T)&quot;&gt;completed&lt;/a&gt; regardless of the exit status of the process. This implementation may consume a lot of memory for thread stacks if a large number of processes are waited for concurrently.</source>
          <target state="translated">When &lt;a href=&quot;#waitFor()&quot;&gt; &lt;code&gt;waitFor()&lt;/code&gt; &lt;/a&gt; returns successfully the CompletableFuture is &lt;a href=&quot;../util/concurrent/completablefuture#complete(T)&quot;&gt;completed&lt;/a&gt; regardless of the exit status of the process. This implementation may consume a lot of memory for thread stacks if a large number of processes are waited for concurrently.</target>
        </trans-unit>
        <trans-unit id="0b41c0f3ed6f8adeecdcc86bb85da400ea38c18d" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../../org/xml/sax/contenthandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)&quot;&gt;&lt;code&gt;ContentHandler.startElement(String, String, String, Attributes)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../../org/xml/sax/contenthandler#endElement(java.lang.String,java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;ContentHandler.endElement(String, String, String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../../org/xml/sax/contenthandler#startDocument()&quot;&gt;&lt;code&gt;ContentHandler.startDocument()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../../org/xml/sax/contenthandler#endDocument()&quot;&gt;&lt;code&gt;ContentHandler.endDocument()&lt;/code&gt;&lt;/a&gt; are invoked on a &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt;, the same method on the user-specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; must be invoked for the same event before the callback returns.</source>
          <target state="translated">When &lt;a href=&quot;../../../org/xml/sax/contenthandler#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)&quot;&gt; &lt;code&gt;ContentHandler.startElement(String, String, String, Attributes)&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../../../org/xml/sax/contenthandler#endElement(java.lang.String,java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;ContentHandler.endElement(String, String, String)&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../../../org/xml/sax/contenthandler#startDocument()&quot;&gt; &lt;code&gt;ContentHandler.startDocument()&lt;/code&gt; &lt;/a&gt;, or &lt;a href=&quot;../../../org/xml/sax/contenthandler#endDocument()&quot;&gt; &lt;code&gt;ContentHandler.endDocument()&lt;/code&gt; &lt;/a&gt; are invoked on a &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;, the same method on the user-specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt; must be invoked for the same event before the callback returns.</target>
        </trans-unit>
        <trans-unit id="eb0c4944d21938573c8de12446d041f26931fa10" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;notificationbroadcastersupport#sendNotification-javax.management.Notification-&quot;&gt;&lt;code&gt;sendNotification&lt;/code&gt;&lt;/a&gt; is called, a listener is selected if it was added with a null &lt;a href=&quot;notificationfilter&quot;&gt;&lt;code&gt;NotificationFilter&lt;/code&gt;&lt;/a&gt;, or if &lt;a href=&quot;notificationfilter#isNotificationEnabled-javax.management.Notification-&quot;&gt;&lt;code&gt;isNotificationEnabled&lt;/code&gt;&lt;/a&gt; returns true for the notification being sent. The call to &lt;code&gt;NotificationFilter.isNotificationEnabled&lt;/code&gt; takes place in the thread that called &lt;code&gt;sendNotification&lt;/code&gt;. Then, for each selected listener, &lt;a href=&quot;../../java/util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;executor.execute&lt;/code&gt;&lt;/a&gt; is called with a command that calls the &lt;code&gt;handleNotification&lt;/code&gt; method.</source>
          <target state="translated">&lt;a href=&quot;notificationbroadcastersupport#sendNotification-javax.management.Notification-&quot;&gt; &lt;code&gt;sendNotification&lt;/code&gt; &lt;/a&gt; 이 호출 될 때 리스너가 null &lt;a href=&quot;notificationfilter&quot;&gt; &lt;code&gt;NotificationFilter&lt;/code&gt; &lt;/a&gt; 와 함께 추가 되었거나 &lt;a href=&quot;notificationfilter#isNotificationEnabled-javax.management.Notification-&quot;&gt; &lt;code&gt;isNotificationEnabled&lt;/code&gt; &lt;/a&gt; 가 전송되는 알림에 대해 true를 리턴 하면 리스너가 선택됩니다 . &lt;code&gt;NotificationFilter.isNotificationEnabled&lt;/code&gt; 호출 은 &lt;code&gt;sendNotification&lt;/code&gt; 이라는 스레드에서 발생합니다 . 그런 다음 선택한 각 리스너에 대해 &lt;code&gt;handleNotification&lt;/code&gt; 을 호출하는 명령으로 &lt;a href=&quot;../../java/util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;executor.execute&lt;/code&gt; &lt;/a&gt; 가 호출됩니다. 메소드 .</target>
        </trans-unit>
        <trans-unit id="ca53de9dd5a05f67d73beacc0a06e218c4b8b4f7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;FRACTIONALMETRICS&lt;/code&gt; are enabled, the true font design metrics are scaled by the point size and used for layout with sub-pixel accuracy. The average density of glyphs and total length of a long string of characters will therefore more closely match the theoretical design of the font, but readability may be affected since individual pairs of characters may not always appear to be consistent distances apart depending on how the sub-pixel accumulation of the glyph origins meshes with the device pixel grid. Enabling this hint may be desirable when text layout is being performed that must be consistent across a wide variety of output resolutions. Specifically, this hint may be desirable in situations where the layout of text is being previewed on a low resolution device like a screen for output that will eventually be rendered on a high resolution printer or typesetting device.</source>
          <target state="translated">When &lt;code&gt;FRACTIONALMETRICS&lt;/code&gt; are enabled, the true font design metrics are scaled by the point size and used for layout with sub-pixel accuracy. The average density of glyphs and total length of a long string of characters will therefore more closely match the theoretical design of the font, but readability may be affected since individual pairs of characters may not always appear to be consistent distances apart depending on how the sub-pixel accumulation of the glyph origins meshes with the device pixel grid. Enabling this hint may be desirable when text layout is being performed that must be consistent across a wide variety of output resolutions. Specifically, this hint may be desirable in situations where the layout of text is being previewed on a low resolution device like a screen for output that will eventually be rendered on a high resolution printer or typesetting device.</target>
        </trans-unit>
        <trans-unit id="3907f83b19a6bc999820d92454ce9500f2d86571" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;SSLSocket&lt;/code&gt;s are first created, no handshaking is done so that applications may first set their communication preferences: what cipher suites to use, whether the socket should be in client or server mode, etc. However, security is always provided by the time that application data is sent over the connection.</source>
          <target state="translated">때 &lt;code&gt;SSLSocket&lt;/code&gt; 소켓 그러나 보안은 항상 시간이에 의해 제공되는 클라이언트 또는 서버 모드 등으로 수 있는지 여부, 사용에 어떤 암호 스위트 : S가 먼저 만들어지고 더 핸드 쉐이크는 응용 프로그램이 먼저 통신 환경을 설정할 수 있도록 수행되지 않습니다 응용 프로그램 데이터가 연결을 통해 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="2865b5a1279039e3aa9655c29d186fd9156ffb33" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;SecurityManager&lt;/code&gt; is installed, the invoking thread must be granted this permission in order to replace the current &lt;code&gt;KeyboardFocusManager&lt;/code&gt;. If permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown.</source>
          <target state="translated">When &lt;code&gt;SecurityManager&lt;/code&gt; is installed, the invoking thread must be granted this permission in order to replace the current &lt;code&gt;KeyboardFocusManager&lt;/code&gt; . If permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown.</target>
        </trans-unit>
        <trans-unit id="aec348ffd93df939ed7064797ce4b1223e7792d9" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;T&lt;/code&gt; attempts to install the newly computed value, if the state is still at &lt;code&gt;2N&lt;/code&gt;, the class value will be initialized with the computed value, advancing it to state &lt;code&gt;2N+1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 새로 계산 된 값을 설치하려고 할 때 상태가 여전히 &lt;code&gt;2N&lt;/code&gt; 이면 클래스 값은 계산 된 값으로 초기화되어 상태를 &lt;code&gt;2N+1&lt;/code&gt; 상태로 진행 시킵니다.</target>
        </trans-unit>
        <trans-unit id="f789b0022722a1185a4c15638dba2438089f1c62" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;jdk.io.permissionsUseCanonicalPath&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, an invalid &lt;code&gt;FilePermission&lt;/code&gt; does not equal to any object except for itself, even if they are created using the same invalid path.</source>
          <target state="translated">When &lt;code&gt;jdk.io.permissionsUseCanonicalPath&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; , an invalid &lt;code&gt;FilePermission&lt;/code&gt; does not equal to any object except for itself, even if they are created using the same invalid path.</target>
        </trans-unit>
        <trans-unit id="586cdea8cb0e9df3dba6780f86611e27368352ca" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;myButton&lt;/code&gt; is pressed, the statement &lt;code&gt;frame.toFront()&lt;/code&gt; will be executed. One could get the same effect, with some additional compile-time type safety, by defining a new implementation of the &lt;code&gt;ActionListener&lt;/code&gt; interface and adding an instance of it to the button:</source>
          <target state="translated">때 &lt;code&gt;myButton&lt;/code&gt; 누르면 문 &lt;code&gt;frame.toFront()&lt;/code&gt; 이 실행됩니다. &lt;code&gt;ActionListener&lt;/code&gt; 인터페이스 의 새로운 구현을 정의하고 그 인스턴스를 버튼에 추가함으로써 추가적인 컴파일 타임 유형 안전을 통해 동일한 효과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0904a47635f2e7b7777a12e80e944727838b0aa" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;insertString&lt;/code&gt; is invoked on the &lt;code&gt;DocumentFilter&lt;/code&gt;, the &lt;code&gt;DocumentFilter&lt;/code&gt; may callback into the &lt;code&gt;FilterBypass&lt;/code&gt; multiple times, or for different regions, but it should not callback into the &lt;code&gt;FilterBypass&lt;/code&gt; after returning from the &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;insertString&lt;/code&gt; method.</source>
          <target state="translated">When &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;insertString&lt;/code&gt; is invoked on the &lt;code&gt;DocumentFilter&lt;/code&gt; , the &lt;code&gt;DocumentFilter&lt;/code&gt; may callback into the &lt;code&gt;FilterBypass&lt;/code&gt; multiple times, or for different regions, but it should not callback into the &lt;code&gt;FilterBypass&lt;/code&gt; after returning from the &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;insertString&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="b7b9af0e4285748c91632c575b592ae96d9c9970" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;setAutoCreateRowSorter(true)&lt;/code&gt; is invoked, a &lt;code&gt;
 TableRowSorter&lt;/code&gt; is immediately created and installed on the table. While the &lt;code&gt;autoCreateRowSorter&lt;/code&gt; property remains &lt;code&gt;true&lt;/code&gt;, every time the model is changed, a new &lt;code&gt;
 TableRowSorter&lt;/code&gt; is created and set as the table's row sorter. The default value for the &lt;code&gt;autoCreateRowSorter&lt;/code&gt; property is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">When &lt;code&gt;setAutoCreateRowSorter(true)&lt;/code&gt; is invoked, a &lt;code&gt; TableRowSorter&lt;/code&gt; is immediately created and installed on the table. While the &lt;code&gt;autoCreateRowSorter&lt;/code&gt; property remains &lt;code&gt;true&lt;/code&gt; , every time the model is changed, a new &lt;code&gt; TableRowSorter&lt;/code&gt; is created and set as the table's row sorter. The default value for the &lt;code&gt;autoCreateRowSorter&lt;/code&gt; property is &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fcc753ccd7f4f147341d78ae6bbdfd159682020f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;setMaximum&lt;/code&gt; is called, the maximum value is changed, and other values (including the minimum, the visible amount, and the current scroll bar value) are changed to be consistent with the new maximum.</source>
          <target state="translated">When &lt;code&gt;setMaximum&lt;/code&gt; is called, the maximum value is changed, and other values (including the minimum, the visible amount, and the current scroll bar value) are changed to be consistent with the new maximum.</target>
        </trans-unit>
        <trans-unit id="634dff626ecd014481529c2d6290cf015b2f06a2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;setMinimum&lt;/code&gt; is called, the minimum value is changed, and other values (including the maximum, the visible amount, and the current scroll bar value) are changed to be consistent with the new minimum.</source>
          <target state="translated">When &lt;code&gt;setMinimum&lt;/code&gt; is called, the minimum value is changed, and other values (including the maximum, the visible amount, and the current scroll bar value) are changed to be consistent with the new minimum.</target>
        </trans-unit>
        <trans-unit id="6366d90e5b77dc1a2fecffb2e332c4bd6f6dd999" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;setValue&lt;/code&gt; is called on the sum spring, &lt;code&gt;s3&lt;/code&gt;, the strain in &lt;code&gt;s3&lt;/code&gt; is calculated using one of the formulas above. Once the strain of the sum is known, the &lt;em&gt;value&lt;/em&gt;s of &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; are then set so that they are have a strain equal to that of the sum. The formulas are evaluated so as to take rounding errors into account and ensure that the sum of the &lt;em&gt;value&lt;/em&gt;s of &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; is exactly equal to the &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;s3&lt;/code&gt;.</source>
          <target state="translated">When &lt;code&gt;setValue&lt;/code&gt; is called on the sum spring, &lt;code&gt;s3&lt;/code&gt; , the strain in &lt;code&gt;s3&lt;/code&gt; is calculated using one of the formulas above. Once the strain of the sum is known, the &lt;em&gt;value&lt;/em&gt;s of &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; are then set so that they are have a strain equal to that of the sum. The formulas are evaluated so as to take rounding errors into account and ensure that the sum of the &lt;em&gt;value&lt;/em&gt;s of &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; is exactly equal to the &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;s3&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56200bf85aca75288ef457ae1d31ce485573f186" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;targetSize&lt;/code&gt; is outside the [MIN, MAX] range, the algorithm sets all sizes to their appropriate limiting value (maximum or minimum).</source>
          <target state="translated">When &lt;code&gt;targetSize&lt;/code&gt; is outside the [MIN, MAX] range, the algorithm sets all sizes to their appropriate limiting value (maximum or minimum).</target>
        </trans-unit>
        <trans-unit id="1dab6c6877815ac1b0667bd54ac4119d91348f67" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;this&lt;/code&gt; instance has an undefined field, this conversion relies on the &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; default for its corresponding field. A notable difference between XML Schema 1.0 date/time datatypes and &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; is that Timezone value is optional for date/time datatypes and it is a required field for &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt;. See javadoc for &lt;code&gt;java.util.TimeZone.getDefault()&lt;/code&gt; on how the default is determined. To explicitly specify the &lt;code&gt;TimeZone&lt;/code&gt; instance, see &lt;a href=&quot;#toGregorianCalendar(java.util.TimeZone,java.util.Locale,javax.xml.datatype.XMLGregorianCalendar)&quot;&gt;&lt;code&gt;toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">When &lt;code&gt;this&lt;/code&gt; instance has an undefined field, this conversion relies on the &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; default for its corresponding field. A notable difference between XML Schema 1.0 date/time datatypes and &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; is that Timezone value is optional for date/time datatypes and it is a required field for &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; . See javadoc for &lt;code&gt;java.util.TimeZone.getDefault()&lt;/code&gt; on how the default is determined. To explicitly specify the &lt;code&gt;TimeZone&lt;/code&gt; instance, see &lt;a href=&quot;#toGregorianCalendar(java.util.TimeZone,java.util.Locale,javax.xml.datatype.XMLGregorianCalendar)&quot;&gt; &lt;code&gt;toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="967844a303c6a0441b717d8f28102abbf2d49116" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;type&lt;/code&gt; has the value &quot;Radio&quot; or &quot;Checkbox&quot;, this represents the HTML checked attribute of the element.</source>
          <target state="translated">때 &lt;code&gt;type&lt;/code&gt; 값 &quot;라디오&quot;또는 &quot;체크 박스&quot;가, 이것은은 요소의 HTML의 checked 속성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="41b28a6a663649d53514039c0624918668b913be" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;type&lt;/code&gt; has the value &quot;Radio&quot; or &quot;Checkbox&quot;, this represents the HTML checked attribute of the element. The value of this attribute does not change if the state of the corresponding form control, in an interactive user agent, changes. Changes to this attribute, however, resets the state of the form control. See the checked attribute definition in HTML 4.0.</source>
          <target state="translated">때 &lt;code&gt;type&lt;/code&gt; 값 &quot;라디오&quot;또는 &quot;체크 박스&quot;가, 이것은은 요소의 HTML의 checked 속성을 나타냅니다. 이 속성의 값은 대화 형 사용자 에이전트에서 해당 양식 컨트롤의 상태가 변경 되어도 변경되지 않습니다. 그러나이 속성을 변경하면 양식 컨트롤의 상태가 재설정됩니다. HTML 4.0에서 확인 된 속성 정의를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="df87c54daa5b6b22cd03fdfcb4a354ce9aff9581" translate="yes" xml:space="preserve">
          <source>When FEATURE_SECURE_PROCESSING is enabled, it is recommended that implementations restrict external connections by default, though this may cause problems for applications that process XML/XSD/XSL with external references.</source>
          <target state="translated">When FEATURE_SECURE_PROCESSING is enabled, it is recommended that implementations restrict external connections by default, though this may cause problems for applications that process XML/XSD/XSL with external references.</target>
        </trans-unit>
        <trans-unit id="1fe0e12bc1e4fbc587d188553680ac3198949110" translate="yes" xml:space="preserve">
          <source>When FLAG_SERIALIZABLE is set in &lt;code&gt;flags&lt;/code&gt;, the function objects will implement &lt;code&gt;Serializable&lt;/code&gt;, and will have a &lt;code&gt;writeReplace&lt;/code&gt; method that returns an appropriate &lt;a href=&quot;serializedlambda&quot;&gt;&lt;code&gt;SerializedLambda&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;caller&lt;/code&gt; class must have an appropriate &lt;code&gt;$deserializeLambda$&lt;/code&gt; method, as described in &lt;a href=&quot;serializedlambda&quot;&gt;&lt;code&gt;SerializedLambda&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">FLAG_SERIALIZABLE이 &lt;code&gt;flags&lt;/code&gt; 로 설정되면 함수 객체는 &lt;code&gt;Serializable&lt;/code&gt; 을 구현 하고 적절한 &lt;a href=&quot;serializedlambda&quot;&gt; &lt;code&gt;SerializedLambda&lt;/code&gt; &lt;/a&gt; 를 반환하는 &lt;code&gt;writeReplace&lt;/code&gt; 메서드를 갖게됩니다 . &lt;code&gt;caller&lt;/code&gt; 클래스는 적절한 있어야합니다 &lt;code&gt;$deserializeLambda$&lt;/code&gt; 에 설명 된대로 방법을 &lt;a href=&quot;serializedlambda&quot;&gt; &lt;code&gt;SerializedLambda&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c646c0ac257bca0396e71fe9d4cc99c62c09c803" translate="yes" xml:space="preserve">
          <source>When JNDI constructs an initial context, the context's environment is initialized with properties defined in the environment parameter passed to the constructor, the system properties, and the application resource files. See &lt;a href=&quot;initialcontext#ENVIRONMENT&quot;&gt;&lt;code&gt;InitialContext&lt;/code&gt;&lt;/a&gt; for details. This initial environment is then inherited by other context instances.</source>
          <target state="translated">When JNDI constructs an initial context, the context's environment is initialized with properties defined in the environment parameter passed to the constructor, the system properties, and the application resource files. See &lt;a href=&quot;initialcontext#ENVIRONMENT&quot;&gt; &lt;code&gt;InitialContext&lt;/code&gt; &lt;/a&gt; for details. This initial environment is then inherited by other context instances.</target>
        </trans-unit>
        <trans-unit id="78166e3e3d24c054685e7318d257481464f62c87" translate="yes" xml:space="preserve">
          <source>When JNDI constructs an initial context, the context's environment is initialized with properties defined in the environment parameter passed to the constructor, the system properties, the applet parameters, and the application resource files. See &lt;a href=&quot;initialcontext#ENVIRONMENT&quot;&gt;&lt;code&gt;InitialContext&lt;/code&gt;&lt;/a&gt; for details. This initial environment is then inherited by other context instances.</source>
          <target state="translated">JNDI가 초기 컨텍스트를 구성 할 때 컨텍스트 환경은 생성자에 전달 된 환경 매개 변수, 시스템 특성, 애플릿 매개 변수 및 애플리케이션 자원 파일에 정의 된 특성으로 초기화됩니다. 자세한 내용은 &lt;a href=&quot;initialcontext#ENVIRONMENT&quot;&gt; &lt;code&gt;InitialContext&lt;/code&gt; &lt;/a&gt; 를 참조하십시오. 그런 다음이 초기 환경은 다른 컨텍스트 인스턴스에 의해 상속됩니다.</target>
        </trans-unit>
        <trans-unit id="bcf229951ee0f52a0b20411c8b8db39b24c97b2e" translate="yes" xml:space="preserve">
          <source>When Java Sound is used to handle system exclusive data that is being received using MIDI wire protocol, it should place the data in one or more &lt;code&gt;SysexMessages&lt;/code&gt;. In this case, the length of the system exclusive data is not known in advance; the end of the system exclusive data is marked by an end-of-exclusive flag (0xF7) in the MIDI wire byte stream.</source>
          <target state="translated">MIDI 와이어 프로토콜을 사용하여 수신중인 시스템 독점 데이터를 처리하기 위해 Java Sound를 사용하는 경우 하나 이상의 &lt;code&gt;SysexMessages&lt;/code&gt; 에 데이터를 배치해야합니다 . 이 경우 시스템 독점 데이터의 길이는 미리 알려져 있지 않습니다. 시스템 배타적 데이터의 끝은 MIDI 와이어 바이트 스트림에서 배타적 종료 플래그 (0xF7)로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3dab1f00d125a2ba1bd6dc4a77821fdb53b85de1" translate="yes" xml:space="preserve">
          <source>When LoginContext uses a caller-specified Configuration, the caller does not require any createLoginContext AuthPermission. The LoginContext saves the &lt;code&gt;AccessControlContext&lt;/code&gt; for the caller, and invokes the configured modules from within an &lt;code&gt;AccessController.doPrivileged&lt;/code&gt; call constrained by that context. This means the caller context (stored when the LoginContext was created) must have sufficient permissions to perform any security-sensitive tasks that the modules may perform.</source>
          <target state="translated">LoginContext가 호출자 지정 구성을 사용하는 경우 호출자는 createLoginContext AuthPermission을 요구하지 않습니다. LoginContext는 호출자 의 &lt;code&gt;AccessControlContext&lt;/code&gt; 를 저장하고 해당 컨텍스트에 의해 제한되는 &lt;code&gt;AccessController.doPrivileged&lt;/code&gt; 호출 내에서 구성된 모듈을 호출합니다 . 이는 호출자 컨텍스트 (LoginContext가 작성 될 때 저장 됨)에 모듈이 수행 할 수있는 보안에 민감한 작업을 수행 할 수있는 충분한 권한이 있어야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="cb8e6ccdc860924e083cd3b27c25e020271479ff" translate="yes" xml:space="preserve">
          <source>When LoginContext uses the installed Configuration, the caller requires the createLoginContext.&lt;em&gt;name&lt;/em&gt; and possibly createLoginContext.other AuthPermissions. Furthermore, the LoginContext will invoke configured modules from within an &lt;code&gt;AccessController.doPrivileged&lt;/code&gt; call so that modules that perform security-sensitive tasks (such as connecting to remote hosts, and updating the Subject) will require the respective permissions, but the callers of the LoginContext will not require those permissions.</source>
          <target state="translated">LoginContext가 설치된 구성을 사용하는 경우 호출자는 createLoginContext가 필요합니다. &lt;em&gt;이름&lt;/em&gt; 및 가능하면 createLoginContext.other AuthPermissions. 또한 LoginContext는 &lt;code&gt;AccessController.doPrivileged&lt;/code&gt; 호출 내에서 구성된 모듈을 호출 하여 보안에 민감한 작업 (예 : 원격 호스트 연결 및 주제 업데이트)을 수행하는 모듈에는 각각의 권한이 필요하지만 LoginContext의 호출자는 이러한 권한이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b505aae2a5e2bff9bbd6708f806b82cbadb154a8" translate="yes" xml:space="preserve">
          <source>When W3C XML Schema validation is being performed, in the case where an element has a union type, the &lt;a href=&quot;../../../org/w3c/dom/typeinfo&quot;&gt;&lt;code&gt;TypeInfo&lt;/code&gt;&lt;/a&gt; returned by a call to &lt;code&gt;getElementTypeInfo()&lt;/code&gt; from the startElement event will be the union type. The &lt;code&gt;TypeInfo&lt;/code&gt; returned by a call from the endElement event will be the actual member type used to validate the element.</source>
          <target state="translated">When W3C XML Schema validation is being performed, in the case where an element has a union type, the &lt;a href=&quot;../../../org/w3c/dom/typeinfo&quot;&gt; &lt;code&gt;TypeInfo&lt;/code&gt; &lt;/a&gt; returned by a call to &lt;code&gt;getElementTypeInfo()&lt;/code&gt; from the startElement event will be the union type. The &lt;code&gt;TypeInfo&lt;/code&gt; returned by a call from the endElement event will be the actual member type used to validate the element.</target>
        </trans-unit>
        <trans-unit id="0a7f33f58f023f24e3769c354575ea8bcc59e8c4" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;../../../../../../java.base/java/lang/securitymanager&quot;&gt;&lt;code&gt;SecurityManager&lt;/code&gt;&lt;/a&gt; is active then an application that creates a &lt;a href=&quot;../../../../../../java.base/javax/security/auth/login/logincontext&quot;&gt;&lt;code&gt;LoginContext&lt;/code&gt;&lt;/a&gt; and uses a &lt;a href=&quot;../../../../../../java.base/javax/security/auth/spi/loginmodule&quot;&gt;&lt;code&gt;LoginModule&lt;/code&gt;&lt;/a&gt; must be granted certain permissions.</source>
          <target state="translated">&lt;a href=&quot;../../../../../../java.base/java/lang/securitymanager&quot;&gt; &lt;code&gt;SecurityManager&lt;/code&gt; &lt;/a&gt; 가 활성화 되면 &lt;a href=&quot;../../../../../../java.base/javax/security/auth/login/logincontext&quot;&gt; &lt;code&gt;LoginContext&lt;/code&gt; &lt;/a&gt; 를 생성 하고 &lt;a href=&quot;../../../../../../java.base/javax/security/auth/spi/loginmodule&quot;&gt; &lt;code&gt;LoginModule&lt;/code&gt; 을&lt;/a&gt; 사용 하는 애플리케이션에 특정 권한을 부여해야합니다.</target>
        </trans-unit>
        <trans-unit id="9de406a5c3e84979aef9525dcc81e5d0b82d4a27" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;../../../../../java.base/java/lang/securitymanager&quot;&gt;&lt;code&gt;SecurityManager&lt;/code&gt;&lt;/a&gt; set, this is the permission which will be checked when code invokes &lt;a href=&quot;virtualmachine#attach(java.lang.String)&quot;&gt;&lt;code&gt;VirtualMachine.attach&lt;/code&gt;&lt;/a&gt; to attach to a target virtual machine.</source>
          <target state="translated">때 &lt;a href=&quot;../../../../../java.base/java/lang/securitymanager&quot;&gt; &lt;code&gt;SecurityManager&lt;/code&gt; &lt;/a&gt; 설정은,이 코드를 호출 할 때 체크 할 권한입니다 &lt;a href=&quot;virtualmachine#attach(java.lang.String)&quot;&gt; &lt;code&gt;VirtualMachine.attach&lt;/code&gt; 가&lt;/a&gt; 대상 가상 컴퓨터에 연결하려면.</target>
        </trans-unit>
        <trans-unit id="1add9c214b49be99fd432c2bc93ff6cef29c4381" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;../../../../../java.base/java/lang/securitymanager&quot;&gt;&lt;code&gt;SecurityManager&lt;/code&gt;&lt;/a&gt; set, this is the permission which will be checked when code invokes &lt;a href=&quot;virtualmachine#attach(java.lang.String)&quot;&gt;&lt;code&gt;VirtualMachine.attach&lt;/code&gt;&lt;/a&gt; to attach to a target virtual machine. This permission is also checked when an &lt;a href=&quot;spi/attachprovider&quot;&gt;&lt;code&gt;AttachProvider&lt;/code&gt;&lt;/a&gt; is created.</source>
          <target state="translated">때 &lt;a href=&quot;../../../../../java.base/java/lang/securitymanager&quot;&gt; &lt;code&gt;SecurityManager&lt;/code&gt; &lt;/a&gt; 설정은,이 코드를 호출 할 때 체크 할 권한입니다 &lt;a href=&quot;virtualmachine#attach(java.lang.String)&quot;&gt; &lt;code&gt;VirtualMachine.attach&lt;/code&gt; 가&lt;/a&gt; 대상 가상 컴퓨터에 연결하려면. 이 권한은 &lt;a href=&quot;spi/attachprovider&quot;&gt; &lt;code&gt;AttachProvider&lt;/code&gt; &lt;/a&gt; 가 생성 될 때도 확인됩니다 .</target>
        </trans-unit>
        <trans-unit id="815b4cfc283610afe0ea69050a522abe02ee7ab9" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; is specified, a &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; will work as a filter and basically copy the incoming events to the specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">When a &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt; is specified, a &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt; will work as a filter and basically copy the incoming events to the specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ed0149faee2af012851081107e6df3815ec1f855" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;../validation/schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; is non-null, a parser will use a validator created from it to validate documents before it passes information down to the application.</source>
          <target state="translated">When a &lt;a href=&quot;../validation/schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; is non-null, a parser will use a validator created from it to validate documents before it passes information down to the application.</target>
        </trans-unit>
        <trans-unit id="27147dcbeed5c3bf2e29101bef7813b5d5587eaf" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;beanslinker&quot;&gt;&lt;code&gt;BeansLinker&lt;/code&gt;&lt;/a&gt; is configured without a missing member handler factory, or the factory returns &lt;code&gt;null&lt;/code&gt; for a particular handler creation invocation, the default behavior is used. The default behavior is to return &lt;code&gt;null&lt;/code&gt; from &lt;a href=&quot;../linker/guardingdynamiclinker#getGuardedInvocation(jdk.dynalink.linker.LinkRequest,jdk.dynalink.linker.LinkerServices)&quot;&gt;&lt;code&gt;GuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices)&lt;/code&gt;&lt;/a&gt; when it can be determined at link time that the linked operation will never address an existing member. This lets the &lt;code&gt;DynamicLinker&lt;/code&gt; attempt the next linker if there is one, or ultimately fail the link request with &lt;a href=&quot;../nosuchdynamicmethodexception&quot;&gt;&lt;code&gt;NoSuchDynamicMethodException&lt;/code&gt;&lt;/a&gt;. For other cases (typically all unnamed member operations as well as most named operations on collection elements) &lt;code&gt;BeansLinker&lt;/code&gt; will produce a conditional linkage that will return &lt;code&gt;null&lt;/code&gt; when invoked at runtime with a name that does not match any member for getters and silently ignore the passed values for setters.</source>
          <target state="translated">때 &lt;a href=&quot;beanslinker&quot;&gt; &lt;code&gt;BeansLinker&lt;/code&gt; 가&lt;/a&gt; 누락 된 멤버 핸들러 공장 또는 공장 반환하지 않고 구성되어 &lt;code&gt;null&lt;/code&gt; 특정 핸들러 작성 호출을위한 기본 동작이 사용됩니다. 기본 동작은 링크 된 작업이 기존 멤버를 결코 처리하지 않는다는 것이 링크 타임에 결정될 수있을 때 &lt;a href=&quot;../linker/guardingdynamiclinker#getGuardedInvocation(jdk.dynalink.linker.LinkRequest,jdk.dynalink.linker.LinkerServices)&quot;&gt; &lt;code&gt;GuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices)&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;null&lt;/code&gt; 을 반환 하는 것입니다. 이를 통해 &lt;code&gt;DynamicLinker&lt;/code&gt; 는 다음 링커가있는 경우 다음 링커를 시도하거나 궁극적으로 &lt;a href=&quot;../nosuchdynamicmethodexception&quot;&gt; &lt;code&gt;NoSuchDynamicMethodException&lt;/code&gt; 으로&lt;/a&gt; 링크 요청을 실패 할 수 있습니다. 다른 경우 (일반적으로 모든 이름이 지정되지 않은 멤버 작업과 컬렉션 요소에 대한 대부분의 이름이 지정된 작업) &lt;code&gt;BeansLinker&lt;/code&gt; getter에 대한 멤버와 일치하지 않는 이름으로 런타임에 호출 될 때 &lt;code&gt;null&lt;/code&gt; 을 반환 하고 setter에 대해 전달 된 값을 자동으로 무시 하는 조건부 연결을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="0c5f84dadcd17bdac77318bfd9b493ef7c34d713" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Boolean&lt;/code&gt; return type is requested, &lt;code&gt;Boolean.TRUE&lt;/code&gt; is returned if one or more nodes were selected; otherwise, &lt;code&gt;Boolean.FALSE&lt;/code&gt; is returned.</source>
          <target state="translated">When a &lt;code&gt;Boolean&lt;/code&gt; return type is requested, &lt;code&gt;Boolean.TRUE&lt;/code&gt; is returned if one or more nodes were selected; otherwise, &lt;code&gt;Boolean.FALSE&lt;/code&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="e2dfe78f2ad4f3813f1c14b93d0ec0c6be233cf4" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Calendar&lt;/code&gt; is in non-lenient mode, it throws an exception if there is any inconsistency in its calendar fields. For example, a &lt;code&gt;GregorianCalendar&lt;/code&gt; always produces &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; values between 1 and the length of the month. A non-lenient &lt;code&gt;GregorianCalendar&lt;/code&gt; throws an exception upon calculating its time or calendar field values if any out-of-range field value has been set.</source>
          <target state="translated">때 &lt;code&gt;Calendar&lt;/code&gt; 엄밀 모드의 달력 필드에 불일치가있는 경우, 그것은 예외가 발생합니다. 예를 들어 &lt;code&gt;GregorianCalendar&lt;/code&gt; 는 항상 1과 월 길이 사이의 &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; 값을 생성 합니다. 범위를 벗어난 필드 값이 설정된 경우 시간 또는 달력 필드 값을 계산할 때 무의미한 &lt;code&gt;GregorianCalendar&lt;/code&gt; 가 예외를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="42293990f57bc3f88207c3a41721f4ff5a428cf3" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;CompletionStage&lt;/code&gt; returned from &lt;a href=&quot;websocket.listener#onClose(java.net.http.WebSocket,int,java.lang.String)&quot;&gt;&lt;code&gt;Listener.onClose&lt;/code&gt;&lt;/a&gt; completes, the &lt;code&gt;WebSocket&lt;/code&gt; will send a Close message that has the same code the received message has and an empty reason.</source>
          <target state="translated">When a &lt;code&gt;CompletionStage&lt;/code&gt; returned from &lt;a href=&quot;websocket.listener#onClose(java.net.http.WebSocket,int,java.lang.String)&quot;&gt; &lt;code&gt;Listener.onClose&lt;/code&gt; &lt;/a&gt; completes, the &lt;code&gt;WebSocket&lt;/code&gt; will send a Close message that has the same code the received message has and an empty reason.</target>
        </trans-unit>
        <trans-unit id="a356f25179772d20743b3c684279064beb377fbf" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;DatagramSocket&lt;/code&gt; is created the initial setting of &lt;code&gt;SO_REUSEADDR&lt;/code&gt; is disabled.</source>
          <target state="translated">때 &lt;code&gt;DatagramSocket&lt;/code&gt; 로이 생성의 초기 설정 &lt;code&gt;SO_REUSEADDR&lt;/code&gt; 는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="43ae46b786a991e294be5fd4ff96fd7edcdce9c4" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Descriptor&lt;/code&gt; is used, the fields of interest are these:</source>
          <target state="translated">&lt;code&gt;Descriptor&lt;/code&gt; 사용될 때 관심 분야는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8380d9c546aba4d2b7dbbdb71fb24b8c1ed97298" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;DocumentFragment&lt;/code&gt; is inserted into a &lt;code&gt;Document&lt;/code&gt; (or indeed any other &lt;code&gt;Node&lt;/code&gt; that may take children) the children of the &lt;code&gt;DocumentFragment&lt;/code&gt; and not the &lt;code&gt;DocumentFragment&lt;/code&gt; itself are inserted into the &lt;code&gt;Node&lt;/code&gt;. This makes the &lt;code&gt;DocumentFragment&lt;/code&gt; very useful when the user wishes to create nodes that are siblings; the &lt;code&gt;DocumentFragment&lt;/code&gt; acts as the parent of these nodes so that the user can use the standard methods from the &lt;code&gt;Node&lt;/code&gt; interface, such as &lt;code&gt;Node.insertBefore&lt;/code&gt; and &lt;code&gt;Node.appendChild&lt;/code&gt;.</source>
          <target state="translated">When a &lt;code&gt;DocumentFragment&lt;/code&gt; is inserted into a &lt;code&gt;Document&lt;/code&gt; (or indeed any other &lt;code&gt;Node&lt;/code&gt; that may take children) the children of the &lt;code&gt;DocumentFragment&lt;/code&gt; and not the &lt;code&gt;DocumentFragment&lt;/code&gt; itself are inserted into the &lt;code&gt;Node&lt;/code&gt; . This makes the &lt;code&gt;DocumentFragment&lt;/code&gt; very useful when the user wishes to create nodes that are siblings; the &lt;code&gt;DocumentFragment&lt;/code&gt; acts as the parent of these nodes so that the user can use the standard methods from the &lt;code&gt;Node&lt;/code&gt; interface, such as &lt;code&gt;Node.insertBefore&lt;/code&gt; and &lt;code&gt;Node.appendChild&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f9b7e8c421f422ce7ad6e056801a9b14403ef2ba" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;JoinRowSet&lt;/code&gt; object is created, it is empty. The first &lt;code&gt;RowSet&lt;/code&gt; object to be added becomes the basis for the &lt;code&gt;JOIN&lt;/code&gt; relationship. Applications must determine which column in each of the &lt;code&gt;RowSet&lt;/code&gt; objects to be added to the &lt;code&gt;JoinRowSet&lt;/code&gt; object should be the match column. All of the &lt;code&gt;RowSet&lt;/code&gt; objects must contain a match column, and the values in each match column must be ones that can be compared to values in the other match columns. The columns do not have to have the same name, though they often do, and they do not have to store the exact same data type as long as the data types can be compared.</source>
          <target state="translated">When a &lt;code&gt;JoinRowSet&lt;/code&gt; object is created, it is empty. The first &lt;code&gt;RowSet&lt;/code&gt; object to be added becomes the basis for the &lt;code&gt;JOIN&lt;/code&gt; relationship. Applications must determine which column in each of the &lt;code&gt;RowSet&lt;/code&gt; objects to be added to the &lt;code&gt;JoinRowSet&lt;/code&gt; object should be the match column. All of the &lt;code&gt;RowSet&lt;/code&gt; objects must contain a match column, and the values in each match column must be ones that can be compared to values in the other match columns. The columns do not have to have the same name, though they often do, and they do not have to store the exact same data type as long as the data types can be compared.</target>
        </trans-unit>
        <trans-unit id="1ecb2985dc99729b931217f288615f118958b74e" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;LookAndFeel&lt;/code&gt; is installed the &lt;code&gt;UIManager&lt;/code&gt; does not check that an entry exists for all ui class ids. As such, random exceptions will occur if the current look and feel has not provided a value for a particular ui class id and an instance of the &lt;code&gt;JComponent&lt;/code&gt; subclass is created.</source>
          <target state="translated">When a &lt;code&gt;LookAndFeel&lt;/code&gt; is installed the &lt;code&gt;UIManager&lt;/code&gt; does not check that an entry exists for all ui class ids. As such, random exceptions will occur if the current look and feel has not provided a value for a particular ui class id and an instance of the &lt;code&gt;JComponent&lt;/code&gt; subclass is created.</target>
        </trans-unit>
        <trans-unit id="4edebb78a9ed8786cce9617749fe858e6dcd6cf1" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Lookup&lt;/code&gt; teleports from a class in one nest to another nest, &lt;code&gt;PRIVATE&lt;/code&gt; access is dropped. When a &lt;code&gt;Lookup&lt;/code&gt; teleports from a class in one package to another package, &lt;code&gt;PACKAGE&lt;/code&gt; access is dropped. When a &lt;code&gt;Lookup&lt;/code&gt; teleports from a class in one module to another module, &lt;code&gt;MODULE&lt;/code&gt; access is dropped. Teleporting across modules drops the ability to access non-exported classes in both the module of the new lookup class and the module of the old lookup class and the resulting &lt;code&gt;Lookup&lt;/code&gt; remains only &lt;code&gt;PUBLIC&lt;/code&gt; access. A &lt;code&gt;Lookup&lt;/code&gt; can teleport back and forth to a class in the module of the lookup class and the module of the previous class lookup. Teleporting across modules can only decrease access but cannot increase it. Teleporting to some third module drops all accesses.</source>
          <target state="translated">&lt;code&gt;Lookup&lt;/code&gt; 이 한 둥지의 클래스에서 다른 둥지로 순간 이동 하면 &lt;code&gt;PRIVATE&lt;/code&gt; 액세스가 삭제됩니다. &lt;code&gt;Lookup&lt;/code&gt; 이 한 패키지의 클래스에서 다른 패키지로 순간 이동 하면 &lt;code&gt;PACKAGE&lt;/code&gt; 액세스가 삭제됩니다. &lt;code&gt;Lookup&lt;/code&gt; 이 한 모듈의 클래스에서 다른 모듈로 순간 이동 하면 &lt;code&gt;MODULE&lt;/code&gt; 액세스가 삭제됩니다. 모듈 간 텔레포트는 새 조회 클래스의 모듈과 이전 조회 클래스의 모듈 모두에서 내 보내지 않은 클래스에 액세스하는 기능을 떨어 뜨리고 결과 &lt;code&gt;Lookup&lt;/code&gt; 는 &lt;code&gt;PUBLIC&lt;/code&gt; 액세스 로만 유지됩니다 . &lt;code&gt;Lookup&lt;/code&gt; 룩업 클래스의 모듈과 이전 클래스 룩업의 모듈에있는 클래스로 앞뒤로 텔레포트 할 수 있습니다. 모듈 간 순간 이동은 액세스를 감소시킬 수 있지만 증가시킬 수는 없습니다. 세 번째 모듈로 순간 이동하면 모든 액세스가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="db057955ab30883a5287d3d1d0441c5297d96c2f" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;MathContext&lt;/code&gt; object is supplied with a precision setting of 0 (for example, &lt;a href=&quot;mathcontext#UNLIMITED&quot;&gt;&lt;code&gt;MathContext.UNLIMITED&lt;/code&gt;&lt;/a&gt;), arithmetic operations are exact, as are the arithmetic methods which take no &lt;code&gt;MathContext&lt;/code&gt; object. (This is the only behavior that was supported in releases prior to 5.) As a corollary of computing the exact result, the rounding mode setting of a &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting of 0 is not used and thus irrelevant. In the case of divide, the exact quotient could have an infinitely long decimal expansion; for example, 1 divided by 3. If the quotient has a nonterminating decimal expansion and the operation is specified to return an exact result, an &lt;code&gt;ArithmeticException&lt;/code&gt; is thrown. Otherwise, the exact result of the division is returned, as done for other operations.</source>
          <target state="translated">때 &lt;code&gt;MathContext&lt;/code&gt; 객체 (예를 들어, 0의 정밀도가 설정된 공급 &lt;a href=&quot;mathcontext#UNLIMITED&quot;&gt; &lt;code&gt;MathContext.UNLIMITED&lt;/code&gt; &lt;/a&gt; ), 연산은 더 취하지 연산 방법이며, 정확한되어 &lt;code&gt;MathContext&lt;/code&gt; 개체. (이것은 5 이전의 릴리스에서 지원 된 유일한 동작입니다.) 정확한 결과를 계산하기 위한 정밀도 설정이 0 인 &lt;code&gt;MathContext&lt;/code&gt; 객체 의 반올림 모드 설정은 사용되지 않으므로 관련이 없습니다. 나누기의 경우 정확한 몫은 무한 길이의 십진수 확장을 가질 수 있습니다. 예를 들어, 1을 3으로 나눈 값 몫에 끝나지 않는 10 진수 확장이 있고 정확한 결과를 반환하도록 연산이 지정된 경우 &lt;code&gt;ArithmeticException&lt;/code&gt; 던졌습니다. 그렇지 않으면 다른 작업에서와 같이 정확한 분할 결과가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="0cea0471bcac1fec9656ca87e5e77807a3aadf7c" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Node&lt;/code&gt; is copied using the &lt;code&gt;cloneNode&lt;/code&gt; method the &lt;code&gt;EventListener&lt;/code&gt;s attached to the source &lt;code&gt;Node&lt;/code&gt; are not attached to the copied &lt;code&gt;Node&lt;/code&gt;. If the user wishes the same &lt;code&gt;EventListener&lt;/code&gt;s to be added to the newly created copy the user must add them manually.</source>
          <target state="translated">When a &lt;code&gt;Node&lt;/code&gt; is copied using the &lt;code&gt;cloneNode&lt;/code&gt; method the &lt;code&gt;EventListener&lt;/code&gt; s attached to the source &lt;code&gt;Node&lt;/code&gt; are not attached to the copied &lt;code&gt;Node&lt;/code&gt; . If the user wishes the same &lt;code&gt;EventListener&lt;/code&gt; s to be added to the newly created copy the user must add them manually.</target>
        </trans-unit>
        <trans-unit id="8c8fb24cbf878544c9fafb9bba4f04c53ebcb063" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;PKIXParameters&lt;/code&gt; object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications that want to use a more sophisticated policy must set this flag to false.</source>
          <target state="translated">때 &lt;code&gt;PKIXParameters&lt;/code&gt; 객체가 생성되고,이 플래그는 true로 설정됩니다. 이 설정은 정책 한정자를 처리하기위한 가장 일반적이고 가장 간단한 전략을 반영합니다. 보다 정교한 정책을 사용하려는 응용 프로그램은이 플래그를 false로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="1fecae07ed08389b98c0a767668b060b64f63995" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;PKIXParameters&lt;/code&gt; object is created, this flag is set to true. This setting reflects the most common strategy for checking revocation, since each service provider must support revocation checking to be PKIX compliant. Sophisticated applications should set this flag to false when it is not practical to use a PKIX service provider's default revocation checking mechanism or when an alternative revocation checking mechanism is to be substituted (by also calling the &lt;a href=&quot;#addCertPathChecker(java.security.cert.PKIXCertPathChecker)&quot;&gt;&lt;code&gt;addCertPathChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#setCertPathCheckers(java.util.List)&quot;&gt;&lt;code&gt;setCertPathCheckers&lt;/code&gt;&lt;/a&gt; methods).</source>
          <target state="translated">When a &lt;code&gt;PKIXParameters&lt;/code&gt; object is created, this flag is set to true. This setting reflects the most common strategy for checking revocation, since each service provider must support revocation checking to be PKIX compliant. Sophisticated applications should set this flag to false when it is not practical to use a PKIX service provider's default revocation checking mechanism or when an alternative revocation checking mechanism is to be substituted (by also calling the &lt;a href=&quot;#addCertPathChecker(java.security.cert.PKIXCertPathChecker)&quot;&gt; &lt;code&gt;addCertPathChecker&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;#setCertPathCheckers(java.util.List)&quot;&gt; &lt;code&gt;setCertPathCheckers&lt;/code&gt; &lt;/a&gt; methods).</target>
        </trans-unit>
        <trans-unit id="e2e645d09fe7ffd9051e432a2e16d92d9eb058b1" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;PKIXParameters&lt;/code&gt; object is created, this flag is set to true. This setting reflects the most common strategy for checking revocation, since each service provider must support revocation checking to be PKIX compliant. Sophisticated applications should set this flag to false when it is not practical to use a PKIX service provider's default revocation checking mechanism or when an alternative revocation checking mechanism is to be substituted (by also calling the &lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt;&lt;code&gt;addCertPathChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt;&lt;code&gt;setCertPathCheckers&lt;/code&gt;&lt;/a&gt; methods).</source>
          <target state="translated">때 &lt;code&gt;PKIXParameters&lt;/code&gt; 객체가 생성되고,이 플래그는 true로 설정됩니다. 이 설정은 해지 확인을위한 가장 일반적인 전략을 반영합니다. 각 서비스 공급자는 해지 확인을 지원하여 PKIX를 준수해야하기 때문입니다. 정교한 응용 프로그램은 PKIX 서비스 공급자의 기본 해지 확인 메커니즘을 사용하는 것이 실용적이지 않거나 대체 해지 확인 메커니즘을 대체 할 때 ( &lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt; &lt;code&gt;addCertPathChecker&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt; &lt;code&gt;setCertPathCheckers&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여)이 플래그를 false로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e1bdbad97a0491d45ccc56940a6c55eb21cbca0d" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;ResourceBundle&lt;/code&gt; was inherited or specified through the &lt;a href=&quot;#setResourceBundle(java.util.ResourceBundle)&quot;&gt;&lt;code&gt;setResourceBundle&lt;/code&gt;&lt;/a&gt; method, then that &lt;code&gt;ResourceBundle&lt;/code&gt; will be used. Otherwise if the logger only has or inherited a resource bundle name, then that resource bundle name will be mapped to a &lt;code&gt;ResourceBundle&lt;/code&gt; object, using the default Locale at the time of logging.</source>
          <target state="translated">When a &lt;code&gt;ResourceBundle&lt;/code&gt; was inherited or specified through the &lt;a href=&quot;#setResourceBundle(java.util.ResourceBundle)&quot;&gt; &lt;code&gt;setResourceBundle&lt;/code&gt; &lt;/a&gt; method, then that &lt;code&gt;ResourceBundle&lt;/code&gt; will be used. Otherwise if the logger only has or inherited a resource bundle name, then that resource bundle name will be mapped to a &lt;code&gt;ResourceBundle&lt;/code&gt; object, using the default Locale at the time of logging.</target>
        </trans-unit>
        <trans-unit id="c511cae88643a751f32e0d10e8a985db173ad353" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;ResourceBundle&lt;/code&gt; was inherited or specified through the &lt;a href=&quot;logger#setResourceBundle-java.util.ResourceBundle-&quot;&gt;&lt;code&gt;setResourceBundle&lt;/code&gt;&lt;/a&gt; method, then that &lt;code&gt;ResourceBundle&lt;/code&gt; will be used. Otherwise if the logger only has or inherited a resource bundle name, then that resource bundle name will be mapped to a &lt;code&gt;ResourceBundle&lt;/code&gt; object, using the default Locale at the time of logging.</source>
          <target state="translated">&lt;code&gt;ResourceBundle&lt;/code&gt; 이 &lt;a href=&quot;logger#setResourceBundle-java.util.ResourceBundle-&quot;&gt; &lt;code&gt;setResourceBundle&lt;/code&gt; &lt;/a&gt; 메소드를 통해 상속되거나 지정 되면 해당 &lt;code&gt;ResourceBundle&lt;/code&gt; 이 사용됩니다. 그렇지 않으면 로거가 자원 번들 이름 만 가지고 있거나 상속 한 경우, 해당 자원 번들 이름은 로깅시 기본 로케일을 사용하여 &lt;code&gt;ResourceBundle&lt;/code&gt; 오브젝트에 맵핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="b7a5a177904b96f015c06307ad10fbc63f60c2f8" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;ResultSet&lt;/code&gt; is closed, any &lt;code&gt;ResultSetMetaData&lt;/code&gt; instances that were created by calling the &lt;code&gt;getMetaData&lt;/code&gt; method remain accessible.</source>
          <target state="translated">When a &lt;code&gt;ResultSet&lt;/code&gt; is closed, any &lt;code&gt;ResultSetMetaData&lt;/code&gt; instances that were created by calling the &lt;code&gt;getMetaData&lt;/code&gt; method remain accessible.</target>
        </trans-unit>
        <trans-unit id="b33e9674235e0636be1c47ce12e9e34568e5c11d" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Scanner&lt;/code&gt; is closed, it will close its input source if the source implements the &lt;a href=&quot;../io/closeable&quot;&gt;&lt;code&gt;Closeable&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">때 &lt;code&gt;Scanner&lt;/code&gt; 닫히고, 상기 소스 구현할 경우 입력 소스 밀접한 것 &lt;a href=&quot;../io/closeable&quot;&gt; &lt;code&gt;Closeable&lt;/code&gt; &lt;/a&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="af91e23da41d9929e2e507d4f86a71d5504d82ff" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;ServerSocket&lt;/code&gt; is created the initial setting of &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;&lt;/a&gt; is not defined. Applications can use &lt;a href=&quot;#getReuseAddress()&quot;&gt;&lt;code&gt;getReuseAddress()&lt;/code&gt;&lt;/a&gt; to determine the initial setting of &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">When a &lt;code&gt;ServerSocket&lt;/code&gt; is created the initial setting of &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt; &lt;code&gt;SO_REUSEADDR&lt;/code&gt; &lt;/a&gt; is not defined. Applications can use &lt;a href=&quot;#getReuseAddress()&quot;&gt; &lt;code&gt;getReuseAddress()&lt;/code&gt; &lt;/a&gt; to determine the initial setting of &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt; &lt;code&gt;SO_REUSEADDR&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d0ea93fe34d0cbcc920144a03e28605555397e46" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;ServerSocket&lt;/code&gt; is created the initial setting of &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;&lt;/a&gt; is not defined. Applications can use &lt;a href=&quot;serversocket#getReuseAddress--&quot;&gt;&lt;code&gt;getReuseAddress()&lt;/code&gt;&lt;/a&gt; to determine the initial setting of &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">때 &lt;code&gt;ServerSocket&lt;/code&gt; 의이 생성의 초기 설정 &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt; &lt;code&gt;SO_REUSEADDR&lt;/code&gt; 가&lt;/a&gt; 정의되어 있지 않습니다. 애플리케이션은 &lt;a href=&quot;serversocket#getReuseAddress--&quot;&gt; &lt;code&gt;getReuseAddress()&lt;/code&gt; &lt;/a&gt; 를 사용하여 &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt; &lt;code&gt;SO_REUSEADDR&lt;/code&gt; &lt;/a&gt; 의 초기 설정을 판별 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f0455bab8e7854f1380ef3d296a0c738fc6d405a" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Socket&lt;/code&gt; is created the initial setting of &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;&lt;/a&gt; is disabled.</source>
          <target state="translated">때 &lt;code&gt;Socket&lt;/code&gt; 생성의 초기 설정 &lt;a href=&quot;socketoptions#SO_REUSEADDR&quot;&gt; &lt;code&gt;SO_REUSEADDR&lt;/code&gt; 는&lt;/a&gt; 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="2fee0877683a4237d7d04165c6386560ed02539f" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;double&lt;/code&gt; must be used as a source for a &lt;code&gt;BigDecimal&lt;/code&gt;, note that this constructor provides an exact conversion; it does not give the same result as converting the &lt;code&gt;double&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; using the &lt;a href=&quot;../lang/double#toString(double)&quot;&gt;&lt;code&gt;Double.toString(double)&lt;/code&gt;&lt;/a&gt; method and then using the &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;&lt;code&gt;BigDecimal(String)&lt;/code&gt;&lt;/a&gt; constructor. To get that result, use the &lt;code&gt;static&lt;/code&gt;&lt;a href=&quot;#valueOf(double)&quot;&gt;&lt;code&gt;valueOf(double)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">When a &lt;code&gt;double&lt;/code&gt; must be used as a source for a &lt;code&gt;BigDecimal&lt;/code&gt; , note that this constructor provides an exact conversion; it does not give the same result as converting the &lt;code&gt;double&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; using the &lt;a href=&quot;../lang/double#toString(double)&quot;&gt; &lt;code&gt;Double.toString(double)&lt;/code&gt; &lt;/a&gt; method and then using the &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt; &lt;code&gt;BigDecimal(String)&lt;/code&gt; &lt;/a&gt; constructor. To get that result, use the &lt;code&gt;static&lt;/code&gt; &lt;a href=&quot;#valueOf(double)&quot;&gt; &lt;code&gt;valueOf(double)&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="1a039e1d49f70a273c394bc527a427829f3c4985" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;double&lt;/code&gt; must be used as a source for a &lt;code&gt;BigDecimal&lt;/code&gt;, note that this constructor provides an exact conversion; it does not give the same result as converting the &lt;code&gt;double&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; using the &lt;a href=&quot;../lang/double#toString-double-&quot;&gt;&lt;code&gt;Double.toString(double)&lt;/code&gt;&lt;/a&gt; method and then using the &lt;a href=&quot;bigdecimal#BigDecimal-java.lang.String-&quot;&gt;&lt;code&gt;BigDecimal(String)&lt;/code&gt;&lt;/a&gt; constructor. To get that result, use the &lt;code&gt;static&lt;/code&gt;&lt;a href=&quot;bigdecimal#valueOf-double-&quot;&gt;&lt;code&gt;valueOf(double)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">때 &lt;code&gt;double&lt;/code&gt; A에 대한 소스로 사용되어야합니다 &lt;code&gt;BigDecimal&lt;/code&gt; 를 ,이 생성자은 정확한 변환을 실시하는 것에주의 &lt;a href=&quot;../lang/double#toString-double-&quot;&gt; &lt;code&gt;Double.toString(double)&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 &lt;a href=&quot;bigdecimal#BigDecimal-java.lang.String-&quot;&gt; &lt;code&gt;BigDecimal(String)&lt;/code&gt; &lt;/a&gt; 생성자 를 사용 하여 &lt;code&gt;double&lt;/code&gt; 을 &lt;code&gt;String&lt;/code&gt; 으로 변환하는 것과 동일한 결과를 제공하지 않습니다 . 결과를 얻으려면 &lt;code&gt;static&lt;/code&gt; &lt;a href=&quot;bigdecimal#valueOf-double-&quot;&gt; &lt;code&gt;valueOf(double)&lt;/code&gt; &lt;/a&gt; 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6527806b79e3b486f23af62691038fe376e23d6f" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;java.lang.Error&lt;/code&gt; occurs in the agent it should be caught and re-thrown as a &lt;code&gt;RuntimeErrorException&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;java.lang.Error&lt;/code&gt; 에이전트에서 java.lang.Error 가 발생 를 잡아서 &lt;code&gt;RuntimeErrorException&lt;/code&gt; 으로 다시 던져야 합니다.</target>
        </trans-unit>
        <trans-unit id="0a1362f6628b563d356e949983f03f9000a84379" translate="yes" xml:space="preserve">
          <source>When a BoundedRange model is used with a scrollbar the extent defines the length of the scrollbar knob (aka the &quot;thumb&quot; or &quot;elevator&quot;). The extent usually represents how much of the object being scrolled is visible. When used with a slider, the extent determines how much the value can &quot;jump&quot;, for example when the user presses PgUp or PgDn.</source>
          <target state="translated">When a BoundedRange model is used with a scrollbar the extent defines the length of the scrollbar knob (aka the &quot;thumb&quot; or &quot;elevator&quot;). The extent usually represents how much of the object being scrolled is visible. When used with a slider, the extent determines how much the value can &quot;jump&quot;, for example when the user presses PgUp or PgDn.</target>
        </trans-unit>
        <trans-unit id="9c90ea452e81ba4569ae99ffac2958ce33a2a19f" translate="yes" xml:space="preserve">
          <source>When a BoundedRange model is used with a scrollbar the value specifies the origin of the scrollbar knob (aka the &quot;thumb&quot; or &quot;elevator&quot;). The value usually represents the origin of the visible part of the object being scrolled.</source>
          <target state="translated">When a BoundedRange model is used with a scrollbar the value specifies the origin of the scrollbar knob (aka the &quot;thumb&quot; or &quot;elevator&quot;). The value usually represents the origin of the visible part of the object being scrolled.</target>
        </trans-unit>
        <trans-unit id="2a2d8c26085a986f69098405e00452247f97fcb7" translate="yes" xml:space="preserve">
          <source>When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a driver by calling:</source>
          <target state="translated">When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a driver by calling:</target>
        </trans-unit>
        <trans-unit id="f6bd36f3f0f0ddc2147aa4474e07857940e77421" translate="yes" xml:space="preserve">
          <source>When a HTTP request is received, the appropriate HttpContext (and handler) is located by finding the context whose path is the longest matching prefix of the request URI's path. Paths are matched literally, which means that the strings are compared case sensitively, and with no conversion to or from any encoded forms. For example. Given a HttpServer with the following HttpContexts configured.</source>
          <target state="translated">HTTP 요청이 수신되면 해당 경로가 요청 URI 경로의 가장 긴 일치 접두사 인 컨텍스트를 찾아 적절한 HttpContext (및 처리기)를 찾습니다. 경로는 문자 그대로 일치합니다. 즉, 문자열이 대소 문자를 구분하여 비교되며 인코딩 된 형식과의 변환이 없습니다. 예를 들면. 다음 HttpContexts가 구성된 HttpServer가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="ac2232cc133cdbf38b6f9aa25e3da077f2459d69" translate="yes" xml:space="preserve">
          <source>When a JVM is launched in a way that indicates an agent class. In that case an &lt;code&gt;Instrumentation&lt;/code&gt; instance is passed to the &lt;code&gt;premain&lt;/code&gt; method of the agent class.</source>
          <target state="translated">에이전트 클래스를 나타내는 방식으로 JVM이 시작된 경우 이 경우 &lt;code&gt;Instrumentation&lt;/code&gt; 인스턴스에 전달 &lt;code&gt;premain&lt;/code&gt; 에이전트 클래스 방법.</target>
        </trans-unit>
        <trans-unit id="bc6710d50791c1a74ebb5f190790f0fa28c0deca" translate="yes" xml:space="preserve">
          <source>When a JVM provides a mechanism to start agents sometime after the JVM is launched. In that case an &lt;code&gt;Instrumentation&lt;/code&gt; instance is passed to the &lt;code&gt;agentmain&lt;/code&gt; method of the agent code.</source>
          <target state="translated">JVM이 JVM을 시작한 후 언젠가 에이전트를 시작하는 메커니즘을 제공하는 경우 이 경우 &lt;code&gt;Instrumentation&lt;/code&gt; 인스턴스가 에이전트 코드 의 &lt;code&gt;agentmain&lt;/code&gt; 메소드로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="fe6f53c2c934674a6688b208d3ae4e419bb93e41" translate="yes" xml:space="preserve">
          <source>When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named &lt;code&gt;main&lt;/code&gt; of some designated class). The Java Virtual Machine continues to execute threads until either of the following occurs:</source>
          <target state="translated">Java Virtual Machine이 시작되면 일반적으로 단일 비 데몬 스레드가 있습니다 (일반적으로 지정된 클래스의 &lt;code&gt;main&lt;/code&gt; 이라는 메서드를 호출 함 ). Java Virtual Machine은 다음 중 하나가 발생할 때까지 스레드를 계속 실행합니다.</target>
        </trans-unit>
        <trans-unit id="679be8f92ef7e9ad73d5185ae525f63b8b428a90" translate="yes" xml:space="preserve">
          <source>When a Java program runs, a large number of &lt;code&gt;Graphics&lt;/code&gt; objects can be created within a short time frame. Although the finalization process of the garbage collector also disposes of the same system resources, it is preferable to manually free the associated resources by calling this method rather than to rely on a finalization process which may not run to completion for a long period of time.</source>
          <target state="translated">When a Java program runs, a large number of &lt;code&gt;Graphics&lt;/code&gt; objects can be created within a short time frame. Although the finalization process of the garbage collector also disposes of the same system resources, it is preferable to manually free the associated resources by calling this method rather than to rely on a finalization process which may not run to completion for a long period of time.</target>
        </trans-unit>
        <trans-unit id="d6028fb5f8e727672bad305b1c6aea8a9507ccc5" translate="yes" xml:space="preserve">
          <source>When a JavaScript object is passed or returned to Java code, it is wrapped in an instance of &lt;code&gt;JSObject&lt;/code&gt;. When a &lt;code&gt;JSObject&lt;/code&gt; instance is passed to the JavaScript engine, it is unwrapped back to its original JavaScript object. The &lt;code&gt;JSObject&lt;/code&gt; class provides a way to invoke JavaScript methods and examine JavaScript properties.</source>
          <target state="translated">JavaScript 객체가 Java 코드로 전달되거나 반환되면 &lt;code&gt;JSObject&lt;/code&gt; 인스턴스로 래핑됩니다 . &lt;code&gt;JSObject&lt;/code&gt; 인스턴스가 JavaScript 엔진에 전달 되면 원래 JavaScript 객체로 다시 언 래핑됩니다. &lt;code&gt;JSObject&lt;/code&gt; 클래스는 자바 스크립트 메소드를 호출하고 자바 스크립트 속성을 검사 할 수있는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="591e6c34b6ba8d6f3eeb6796c729752f095528e6" translate="yes" xml:space="preserve">
          <source>When a LogRecord is passed into the logging framework it logically belongs to the framework and should no longer be used or updated by the client application.</source>
          <target state="translated">LogRecord가 로깅 프레임 워크에 전달되면 논리적으로 프레임 워크에 속하며 더 이상 클라이언트 애플리케이션에서 사용하거나 업데이트하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="760cbf62cac395bf976d73378ca4ebfb39c0855a" translate="yes" xml:space="preserve">
          <source>When a MenuElement receives an event from a KeyListener, it should never process the event directly.</source>
          <target state="translated">When a MenuElement receives an event from a KeyListener, it should never process the event directly.</target>
        </trans-unit>
        <trans-unit id="f3e01acb00e3633472670e98ba3b82778f6c5de9" translate="yes" xml:space="preserve">
          <source>When a MenuElement receives an event from a KeyListener, it should never process the event directly. Instead all MenuElements should call this method with the event.</source>
          <target state="translated">When a MenuElement receives an event from a KeyListener, it should never process the event directly. Instead all MenuElements should call this method with the event.</target>
        </trans-unit>
        <trans-unit id="3a264f4f3f88ff6f8c7f2e0d665633e1f71e9b05" translate="yes" xml:space="preserve">
          <source>When a MenuElement receives an event from a MouseListener, it should never process the event directly.</source>
          <target state="translated">When a MenuElement receives an event from a MouseListener, it should never process the event directly.</target>
        </trans-unit>
        <trans-unit id="4d11ed3673e1ba2ba2cacee39f6b7d24eb7ebca6" translate="yes" xml:space="preserve">
          <source>When a MenuElement receives an event from a MouseListener, it should never process the event directly. Instead all MenuElements should call this method with the event.</source>
          <target state="translated">When a MenuElement receives an event from a MouseListener, it should never process the event directly. Instead all MenuElements should call this method with the event.</target>
        </trans-unit>
        <trans-unit id="b38b56c9df7506bfe3ea2ad2db230dd732a913c0" translate="yes" xml:space="preserve">
          <source>When a SAX2 driver is providing these events, all other events must be properly nested within start/end entity events. There is no additional requirement that events from &lt;a href=&quot;declhandler&quot;&gt;&lt;code&gt;DeclHandler&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../dtdhandler&quot;&gt;&lt;code&gt;DTDHandler&lt;/code&gt;&lt;/a&gt; be properly ordered.</source>
          <target state="translated">When a SAX2 driver is providing these events, all other events must be properly nested within start/end entity events. There is no additional requirement that events from &lt;a href=&quot;declhandler&quot;&gt; &lt;code&gt;DeclHandler&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;../dtdhandler&quot;&gt; &lt;code&gt;DTDHandler&lt;/code&gt; &lt;/a&gt; be properly ordered.</target>
        </trans-unit>
        <trans-unit id="ca65f59c344aab5c1b12d68027c6ad5c16f0ae24" translate="yes" xml:space="preserve">
          <source>When a Standard MBean is made from the &lt;code&gt;CacheControlMBean&lt;/code&gt;, the usual rules mean that it will have an attribute called &lt;code&gt;CacheSize&lt;/code&gt; of type &lt;code&gt;long&lt;/code&gt;. The &lt;code&gt;@Units&lt;/code&gt; annotation, given the above definition, will ensure that the &lt;a href=&quot;mbeanattributeinfo&quot;&gt;&lt;code&gt;MBeanAttributeInfo&lt;/code&gt;&lt;/a&gt; for this attribute will have a &lt;code&gt;Descriptor&lt;/code&gt; that has a field called &lt;code&gt;units&lt;/code&gt; with corresponding value &lt;code&gt;bytes&lt;/code&gt;.</source>
          <target state="translated">표준 MBean이 &lt;code&gt;CacheControlMBean&lt;/code&gt; 에서 작성 될 때 , 일반적인 규칙은 그것이 &lt;code&gt;long&lt;/code&gt; 유형의 &lt;code&gt;CacheSize&lt;/code&gt; 라는 속성을 갖음 을 의미합니다 . &lt;code&gt;@Units&lt;/code&gt; 상기 정의 주어진 주석, 상기 확인한다 &lt;a href=&quot;mbeanattributeinfo&quot;&gt; &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; &lt;/a&gt; 이 속성은 것 &lt;code&gt;Descriptor&lt;/code&gt; 필드는 호출 한 &lt;code&gt;units&lt;/code&gt; 대응 값을 &lt;code&gt;bytes&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cbdb2811ada49ec4e07a613aa3a52601e1be6d55" translate="yes" xml:space="preserve">
          <source>When a TCP connection is closed the connection may remain in a timeout state for a period of time after the connection is closed (typically known as the &lt;code&gt;TIME_WAIT&lt;/code&gt; state or &lt;code&gt;2MSL&lt;/code&gt; wait state). For applications using a well known socket address or port it may not be possible to bind a socket to the required &lt;code&gt;SocketAddress&lt;/code&gt; if there is a connection in the timeout state involving the socket address or port.</source>
          <target state="translated">TCP 연결이 닫히면 연결이 닫힌 후 일정 시간 동안 (종종 &lt;code&gt;TIME_WAIT&lt;/code&gt; 상태 또는 &lt;code&gt;2MSL&lt;/code&gt; 대기 상태) 연결이 시간 초과 상태로 유지 될 수 있습니다 . 잘 알려진 소켓 주소 또는 포트를 사용하는 응용 프로그램의 경우 소켓 주소 또는 포트와 관련된 시간 초과 상태에 연결이 있으면 필요한 &lt;code&gt;SocketAddress&lt;/code&gt; 에 소켓을 바인딩하지 못할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35d883e644cee8d8bc00892c83d14b9e68a7c0d4" translate="yes" xml:space="preserve">
          <source>When a TemplatesHandler object is used as a ContentHandler for the parsing of transformation instructions, it creates a Templates object, which the caller can get once the SAX events have been completed.</source>
          <target state="translated">When a TemplatesHandler object is used as a ContentHandler for the parsing of transformation instructions, it creates a Templates object, which the caller can get once the SAX events have been completed.</target>
        </trans-unit>
        <trans-unit id="a41e85f29028d8394c11ed11faa2b621db688b13" translate="yes" xml:space="preserve">
          <source>When a URL string (a &lt;code&gt;String&lt;/code&gt; of the form &lt;em&gt;scheme_id:rest_of_name&lt;/em&gt;) is passed as a name parameter to any method, a URL context factory for handling that scheme is located and used to resolve the URL. If no such factory is found, the initial context specified by &lt;code&gt;&quot;java.naming.factory.initial&quot;&lt;/code&gt; is used. Similarly, when a &lt;code&gt;CompositeName&lt;/code&gt; object whose first component is a URL string is passed as a name parameter to any method, a URL context factory is located and used to resolve the first name component. See &lt;a href=&quot;spi/namingmanager#getURLContext(java.lang.String,java.util.Hashtable)&quot;&gt;&lt;code&gt;NamingManager.getURLContext()&lt;/code&gt;&lt;/a&gt; for a description of how URL context factories are located.</source>
          <target state="translated">When a URL string (a &lt;code&gt;String&lt;/code&gt; of the form &lt;em&gt;scheme_id:rest_of_name&lt;/em&gt;) is passed as a name parameter to any method, a URL context factory for handling that scheme is located and used to resolve the URL. If no such factory is found, the initial context specified by &lt;code&gt;&quot;java.naming.factory.initial&quot;&lt;/code&gt; is used. Similarly, when a &lt;code&gt;CompositeName&lt;/code&gt; object whose first component is a URL string is passed as a name parameter to any method, a URL context factory is located and used to resolve the first name component. See &lt;a href=&quot;spi/namingmanager#getURLContext(java.lang.String,java.util.Hashtable)&quot;&gt; &lt;code&gt;NamingManager.getURLContext()&lt;/code&gt; &lt;/a&gt; for a description of how URL context factories are located.</target>
        </trans-unit>
        <trans-unit id="2f10e21dabecf61050cfb5e9bd4dbd4d574ca5d4" translate="yes" xml:space="preserve">
          <source>When a URL string (a &lt;code&gt;String&lt;/code&gt; of the form &lt;em&gt;scheme_id:rest_of_name&lt;/em&gt;) is passed as a name parameter to any method, a URL context factory for handling that scheme is located and used to resolve the URL. If no such factory is found, the initial context specified by &lt;code&gt;&quot;java.naming.factory.initial&quot;&lt;/code&gt; is used. Similarly, when a &lt;code&gt;CompositeName&lt;/code&gt; object whose first component is a URL string is passed as a name parameter to any method, a URL context factory is located and used to resolve the first name component. See &lt;a href=&quot;spi/namingmanager#getURLContext-java.lang.String-java.util.Hashtable-&quot;&gt;&lt;code&gt;&lt;code&gt;NamingManager.getURLContext()&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; for a description of how URL context factories are located.</source>
          <target state="translated">URL 문자열 ( &lt;em&gt;scheme_id : rest_of_name&lt;/em&gt; 형식 의 &lt;code&gt;String&lt;/code&gt; )이 이름 매개 변수로 메소드에 전달되면 해당 스킴을 처리하기위한 URL 컨텍스트 팩토리가 찾아 URL을 해석하는 데 사용됩니다. 그러한 팩토리를 찾지 못하면 &lt;code&gt;&quot;java.naming.factory.initial&quot;&lt;/code&gt; 로 지정된 초기 컨텍스트 가 사용됩니다. 마찬가지로, 첫 번째 구성 요소가 URL 문자열 인 &lt;code&gt;CompositeName&lt;/code&gt; 오브젝트가 이름 매개 변수로 메소드에 전달되면 URL 컨텍스트 팩토리가 위치하여 첫 번째 이름 구성 요소를 해석하는 데 사용됩니다. URL 컨텍스트 팩토리의 위치에 대한 설명은 &lt;a href=&quot;spi/namingmanager#getURLContext-java.lang.String-java.util.Hashtable-&quot;&gt; &lt;code&gt;&lt;code&gt;NamingManager.getURLContext()&lt;/code&gt;&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="429dc27d49480e2ab4eab569d5adf4cd4c7c135e" translate="yes" xml:space="preserve">
          <source>When a VolatileImage object is created, limited system resources such as video memory (VRAM) may be allocated in order to support the image. When a VolatileImage object is no longer used, it may be garbage-collected and those system resources will be returned, but this process does not happen at guaranteed times. Applications that create many VolatileImage objects (for example, a resizing window may force recreation of its back buffer as the size changes) may run out of optimal system resources for new VolatileImage objects simply because the old objects have not yet been removed from the system. (New VolatileImage objects may still be created, but they may not perform as well as those created in accelerated memory). The flush method may be called at any time to proactively release the resources used by a VolatileImage so that it does not prevent subsequent VolatileImage objects from being accelerated. In this way, applications can have more control over the state of the resources taken up by obsolete VolatileImage objects.</source>
          <target state="translated">When a VolatileImage object is created, limited system resources such as video memory (VRAM) may be allocated in order to support the image. When a VolatileImage object is no longer used, it may be garbage-collected and those system resources will be returned, but this process does not happen at guaranteed times. Applications that create many VolatileImage objects (for example, a resizing window may force recreation of its back buffer as the size changes) may run out of optimal system resources for new VolatileImage objects simply because the old objects have not yet been removed from the system. (New VolatileImage objects may still be created, but they may not perform as well as those created in accelerated memory). The flush method may be called at any time to proactively release the resources used by a VolatileImage so that it does not prevent subsequent VolatileImage objects from being accelerated. In this way, applications can have more control over the state of the resources taken up by obsolete VolatileImage objects.</target>
        </trans-unit>
        <trans-unit id="432971c4a856cab249165ae9a9e506665b76935a" translate="yes" xml:space="preserve">
          <source>When a button is pressed and released, AWT sends an instance of &lt;code&gt;ActionEvent&lt;/code&gt; to the button, by calling &lt;code&gt;processEvent&lt;/code&gt; on the button. The button's &lt;code&gt;processEvent&lt;/code&gt; method receives all events for the button; it passes an action event along by calling its own &lt;code&gt;processActionEvent&lt;/code&gt; method. The latter method passes the action event on to any action listeners that have registered an interest in action events generated by this button.</source>
          <target state="translated">When a button is pressed and released, AWT sends an instance of &lt;code&gt;ActionEvent&lt;/code&gt; to the button, by calling &lt;code&gt;processEvent&lt;/code&gt; on the button. The button's &lt;code&gt;processEvent&lt;/code&gt; method receives all events for the button; it passes an action event along by calling its own &lt;code&gt;processActionEvent&lt;/code&gt; method. The latter method passes the action event on to any action listeners that have registered an interest in action events generated by this button.</target>
        </trans-unit>
        <trans-unit id="2dffdc7e8d88a4030ccf25d0b91c9d8a92081e9c" translate="yes" xml:space="preserve">
          <source>When a call to the &lt;code&gt;next&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, the cursor is positioned after the last row. Any invocation of a &lt;code&gt;ResultSet&lt;/code&gt; method which requires a current row will result in a &lt;code&gt;SQLException&lt;/code&gt; being thrown. If the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;, it is vendor specified whether their JDBC driver implementation will return &lt;code&gt;false&lt;/code&gt; or throw an &lt;code&gt;SQLException&lt;/code&gt; on a subsequent call to &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">When a call to the &lt;code&gt;next&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt; , the cursor is positioned after the last row. Any invocation of a &lt;code&gt;ResultSet&lt;/code&gt; method which requires a current row will result in a &lt;code&gt;SQLException&lt;/code&gt; being thrown. If the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; , it is vendor specified whether their JDBC driver implementation will return &lt;code&gt;false&lt;/code&gt; or throw an &lt;code&gt;SQLException&lt;/code&gt; on a subsequent call to &lt;code&gt;next&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dcde7f6440e70bd0233d9ec912e740d889f8535e" translate="yes" xml:space="preserve">
          <source>When a call to the &lt;code&gt;previous&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, the cursor is positioned before the first row. Any invocation of a &lt;code&gt;ResultSet&lt;/code&gt; method which requires a current row will result in a &lt;code&gt;SQLException&lt;/code&gt; being thrown.</source>
          <target state="translated">When a call to the &lt;code&gt;previous&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt; , the cursor is positioned before the first row. Any invocation of a &lt;code&gt;ResultSet&lt;/code&gt; method which requires a current row will result in a &lt;code&gt;SQLException&lt;/code&gt; being thrown.</target>
        </trans-unit>
        <trans-unit id="8a83c0113229dd8663248a6bb840a6358d3593d9" translate="yes" xml:space="preserve">
          <source>When a callback method on the specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; throws an exception, the same exception object must be thrown from the &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; should not be notified of such an exception.</source>
          <target state="translated">When a callback method on the specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt; throws an exception, the same exception object must be thrown from the &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;. The &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt; should not be notified of such an exception.</target>
        </trans-unit>
        <trans-unit id="084f36ff7f74614b43cbed478a2f7b49522f6609" translate="yes" xml:space="preserve">
          <source>When a check box menu item is selected, AWT sends an item event to the item. Since the event is an instance of &lt;code&gt;ItemEvent&lt;/code&gt;, the &lt;code&gt;processEvent&lt;/code&gt; method examines the event and passes it along to &lt;code&gt;processItemEvent&lt;/code&gt;. The latter method redirects the event to any &lt;code&gt;ItemListener&lt;/code&gt; objects that have registered an interest in item events generated by this menu item.</source>
          <target state="translated">When a check box menu item is selected, AWT sends an item event to the item. Since the event is an instance of &lt;code&gt;ItemEvent&lt;/code&gt; , the &lt;code&gt;processEvent&lt;/code&gt; method examines the event and passes it along to &lt;code&gt;processItemEvent&lt;/code&gt; . The latter method redirects the event to any &lt;code&gt;ItemListener&lt;/code&gt; objects that have registered an interest in item events generated by this menu item.</target>
        </trans-unit>
        <trans-unit id="d040f2e41b4f688b6bbac9b4fc04238f264f901c" translate="yes" xml:space="preserve">
          <source>When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch &lt;a href=&quot;../../../../java.base/java/io/invalidobjectexception&quot;&gt;&lt;code&gt;InvalidObjectException&lt;/code&gt;&lt;/a&gt; which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. If thrown, &lt;a href=&quot;../../../../java.base/java/io/invalidobjectexception&quot;&gt;&lt;code&gt;InvalidObjectException&lt;/code&gt;&lt;/a&gt; will be wrappped in &lt;a href=&quot;../../../../java.base/java/lang/reflect/undeclaredthrowableexception&quot;&gt;&lt;code&gt;UndeclaredThrowableException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch &lt;a href=&quot;../../../../java.base/java/io/invalidobjectexception&quot;&gt; &lt;code&gt;InvalidObjectException&lt;/code&gt; &lt;/a&gt; which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. If thrown, &lt;a href=&quot;../../../../java.base/java/io/invalidobjectexception&quot;&gt; &lt;code&gt;InvalidObjectException&lt;/code&gt; &lt;/a&gt; will be wrappped in &lt;a href=&quot;../../../../java.base/java/lang/reflect/undeclaredthrowableexception&quot;&gt; &lt;code&gt;UndeclaredThrowableException&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="902b9d017a9bed0402d7a996f72e41d3f25ab7ec" translate="yes" xml:space="preserve">
          <source>When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch &lt;a href=&quot;../../io/invalidobjectexception&quot;&gt;&lt;code&gt;InvalidObjectException&lt;/code&gt;&lt;/a&gt; which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application.</source>
          <target state="translated">클라이언트 애플리케이션이 실행중인 가상 머신의 애플리케이션이 실행중인 버전과 다른 버전의 MXBean에 원격으로 액세스하도록 설계 되면 MXBean 프록시가 열거 형 상수의 이름을 수신 할 때 발생하는 &lt;a href=&quot;../../io/invalidobjectexception&quot;&gt; &lt;code&gt;InvalidObjectException&lt;/code&gt; &lt;/a&gt; 을 포착하도록 준비해야합니다. 클라이언트 애플리케이션에로드 된 enum 클래스에서 누락되었습니다.</target>
        </trans-unit>
        <trans-unit id="7205693021c9fb69b57353ca24035c13ecb1c484" translate="yes" xml:space="preserve">
          <source>When a client connects to a server using the JMX Remote API, it is possible that they do not have the same version of the JMX specification. The version of the JMX specification described here is version 1.4. Previous versions were 1.0, 1.1, and 1.2. (There was no 1.3.) The standard JMX Remote API is defined to work with version 1.2 onwards, so in standards-based deployment the only interoperability questions that arise concern version 1.2 onwards.</source>
          <target state="translated">클라이언트가 JMX Remote API를 사용하여 서버에 연결하면 동일한 버전의 JMX 스펙이 없을 수 있습니다. 여기에 설명 된 JMX 스펙의 버전은 1.4입니다. 이전 버전은 1.0, 1.1 및 1.2입니다. (1.3이 없었습니다.) 표준 JMX Remote API는 버전 1.2 이상에서 작동하도록 정의되었으므로 표준 기반 배치에서는 버전 1.2 이상에서 발생하는 유일한 상호 운용성 질문입니다.</target>
        </trans-unit>
        <trans-unit id="9ecf260d1def47441248c5413c0dd40de5045eac" translate="yes" xml:space="preserve">
          <source>When a client needs to print a job using the client's desired resolution exactly (no more, no less), the client specifies an instance of class &lt;code&gt;PrinterResolution&lt;/code&gt; as an attribute of the Print Job. This will fail if the Print Job doesn't support that exact resolution, and &lt;code&gt;Fidelity&lt;/code&gt; is set to true.</source>
          <target state="translated">When a client needs to print a job using the client's desired resolution exactly (no more, no less), the client specifies an instance of class &lt;code&gt;PrinterResolution&lt;/code&gt; as an attribute of the Print Job. This will fail if the Print Job doesn't support that exact resolution, and &lt;code&gt;Fidelity&lt;/code&gt; is set to true.</target>
        </trans-unit>
        <trans-unit id="c8a48941832ba5a4328e80c08b8ffedc13963178" translate="yes" xml:space="preserve">
          <source>When a client needs to print a job using the client's desired resolution exactly (no more, no less), the client specifies an instance of class PrinterResolution as an attribute of the Print Job. This will fail if the Print Job doesn't support that exact resolution, and Fidelity is set to true.</source>
          <target state="translated">클라이언트가 클라이언트가 원하는 해상도를 정확하게 사용하여 작업을 인쇄해야하는 경우 클라이언트는 PrinterResolution 클래스의 인스턴스를 인쇄 작업의 속성으로 지정합니다. 인쇄 작업이 정확한 해상도를 지원하지 않고 Fidelity가 true로 설정되어 있으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="a335dacd4eaf5c3bce2ba4fb08c4775392c61b2f" translate="yes" xml:space="preserve">
          <source>When a client searches looking for a printer that supports the client's desired resolution exactly (no more, no less), the client specifies an instance of class &lt;code&gt;PrinterResolution&lt;/code&gt; indicating the exact resolution the client wants. Only printers supporting that exact resolution will match the search.</source>
          <target state="translated">클라이언트가 클라이언트가 원하는 해상도를 정확하게 지원하는 프린터를 검색 할 때 (더 이상도 그 이하도 아님) 클라이언트 는 클라이언트가 원하는 정확한 해상도를 나타내는 &lt;code&gt;PrinterResolution&lt;/code&gt; 클래스의 인스턴스를 지정합니다 . 정확한 해상도를 지원하는 프린터 만 검색과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="7de20097d88ff779f4bae860f8ac5bfcc78b886f" translate="yes" xml:space="preserve">
          <source>When a client searches looking for a printer that supports the client's desired resolution exactly (no more, no less), the client specifies an instance of class PrinterResolution indicating the exact resolution the client wants. Only printers supporting that exact resolution will match the search.</source>
          <target state="translated">클라이언트가 클라이언트의 원하는 해상도를 정확하게 (더 이상, 더 이상) 지원하지 않는 프린터를 찾을 때 클라이언트는 클라이언트가 원하는 정확한 해상도를 나타내는 PrinterResolution 클래스의 인스턴스를 지정합니다. 정확한 해상도를 지원하는 프린터 만 검색과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="af75d22b50227d1fb5318634310fcd020e5b369c" translate="yes" xml:space="preserve">
          <source>When a coded character set is used exclusively with a single character-encoding scheme then the corresponding charset is usually named for the coded character set; otherwise a charset is usually named for the encoding scheme and, possibly, the locale of the coded character sets that it supports. Hence &lt;code&gt;US-ASCII&lt;/code&gt; is both the name of a coded character set and of the charset that encodes it, while &lt;code&gt;EUC-JP&lt;/code&gt; is the name of the charset that encodes the JIS X 0201, JIS X 0208, and JIS X 0212 coded character sets for the Japanese language.</source>
          <target state="translated">코드화 된 문자 세트가 단일 문자 인코딩 체계와 함께 독점적으로 사용되는 경우 해당 문자 세트는 일반적으로 코드화 된 문자 세트의 이름이 지정됩니다. 그렇지 않은 경우, 캐릭터 세트는 일반적으로 인코딩 방식과, 지원되는 코드화 된 문자 세트의 로케일로 이름이 지정됩니다. 따라서 &lt;code&gt;US-ASCII&lt;/code&gt; 는 코드화 된 문자 세트와이를 인코딩하는 문자 세트 의 이름이며 &lt;code&gt;EUC-JP&lt;/code&gt; 는 JIS X 0201, JIS X 0208 및 JIS X 0212 코드화 된 문자 세트를 인코딩하는 문자 세트의 이름입니다. 일본어</target>
        </trans-unit>
        <trans-unit id="359074a92233f14fabd3c8c60b9f6a18661913d1" translate="yes" xml:space="preserve">
          <source>When a column is adjusted in the UI, adjust the next column the opposite way.</source>
          <target state="translated">UI에서 열이 조정되면 반대 방식으로 다음 열을 조정합니다.</target>
        </trans-unit>
        <trans-unit id="abc368889970e1798a7b82782b317df91eb75a92" translate="yes" xml:space="preserve">
          <source>When a concrete &lt;code&gt;DragGestureRecognizer&lt;/code&gt; instance detects a drag initiating gesture on the &lt;code&gt;Component&lt;/code&gt; it is associated with, it fires a &lt;a href=&quot;draggestureevent&quot;&gt;&lt;code&gt;DragGestureEvent&lt;/code&gt;&lt;/a&gt; to the &lt;code&gt;DragGestureListener&lt;/code&gt; registered on its unicast event source for &lt;code&gt;DragGestureListener&lt;/code&gt; events. This &lt;code&gt;DragGestureListener&lt;/code&gt; is responsible for causing the associated &lt;code&gt;DragSource&lt;/code&gt; to start the Drag and Drop operation (if appropriate).</source>
          <target state="translated">구체적인 경우 &lt;code&gt;DragGestureRecognizer&lt;/code&gt; 인스턴스에 드래그 개시 제스처 (gesture) 감지 &lt;code&gt;Component&lt;/code&gt; 가와 연관되어, 그것은 발사 &lt;a href=&quot;draggestureevent&quot;&gt; &lt;code&gt;DragGestureEvent&lt;/code&gt; &lt;/a&gt; 받는 &lt;code&gt;DragGestureListener&lt;/code&gt; 에 대한 유니 캐스트 이벤트 소스에 등록되어 &lt;code&gt;DragGestureListener&lt;/code&gt; 이벤트를. 이 &lt;code&gt;DragGestureListener&lt;/code&gt; 는 관련 &lt;code&gt;DragSource&lt;/code&gt; 가 드래그 앤 드롭 작업을 시작 하도록하는 역할을 합니다 (해당되는 경우).</target>
        </trans-unit>
        <trans-unit id="53280a61faf78dcb3ec848c2e2ddbf8b1f48355d" translate="yes" xml:space="preserve">
          <source>When a constructor or getter method that takes a &lt;code&gt;Map&lt;/code&gt; object is called, the JDBC driver calls the method &lt;code&gt;SQLData.getSQLType&lt;/code&gt; to determine the SQL type of the UDT being custom mapped. The driver creates an instance of &lt;code&gt;SQLInputImpl&lt;/code&gt;, populating it with the attributes of the UDT. The driver then passes the input stream to the method &lt;code&gt;SQLData.readSQL&lt;/code&gt;, which in turn calls the &lt;code&gt;SQLInputImpl&lt;/code&gt; methods to read the attributes from the input stream.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 개체 를 사용하는 생성자 또는 getter 메서드 가 호출되면 JDBC 드라이버는 &lt;code&gt;SQLData.getSQLType&lt;/code&gt; 메서드 를 호출하여 사용자 지정 매핑되는 UDT의 SQL 유형을 결정합니다. 드라이버는 &lt;code&gt;SQLInputImpl&lt;/code&gt; 의 인스턴스를 생성 하여 UDT의 속성으로 채 웁니다. 그런 다음 드라이버는 입력 스트림을 &lt;code&gt;SQLData.readSQL&lt;/code&gt; 메소드로 전달하고 , 그러면 &lt;code&gt;SQLInputImpl&lt;/code&gt; 메소드를 호출 하여 입력 스트림에서 속성을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="5046ecec5b32705f3cc717979a666d129f7eb365" translate="yes" xml:space="preserve">
          <source>When a context method that may return response controls is invoked, response controls from the previous method invocation are cleared. &lt;code&gt;getResponseControls()&lt;/code&gt; returns all of the response controls generated by LDAP operations used by the context method in the order received from the LDAP server. Invoking &lt;code&gt;getResponseControls()&lt;/code&gt; does not clear the response controls. You can call it many times (and get back the same controls) until the next context method that may return controls is invoked.</source>
          <target state="translated">응답 제어를 리턴 할 수있는 컨텍스트 메소드가 호출되면 이전 메소드 호출의 응답 제어가 지워집니다. &lt;code&gt;getResponseControls()&lt;/code&gt; 는 컨텍스트 메소드가 사용하는 LDAP 조작에 의해 생성 된 모든 응답 제어를 LDAP 서버로부터 수신 된 순서로 리턴합니다. &lt;code&gt;getResponseControls()&lt;/code&gt; 호출 해도 응답 제어가 지워지지 않습니다. 컨트롤을 반환 할 수있는 다음 컨텍스트 메서드가 호출 될 때까지 여러 번 호출하고 동일한 컨트롤을 다시 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d82dfd1d5fb556b3eaa04ee5dbf7ee49fcca1a9" translate="yes" xml:space="preserve">
          <source>When a directory is registered for this event then the &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; is queued when it is observed that an entry in the directory has been modified. The event &lt;a href=&quot;watchevent#count()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; for this event is &lt;code&gt;1&lt;/code&gt; or greater.</source>
          <target state="translated">이 이벤트에 대해 디렉토리가 등록되면 디렉토리 의 항목이 수정 된 것이 관찰되면 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; &lt;/a&gt; 가 대기열에 추가됩니다. 이 이벤트의 이벤트 &lt;a href=&quot;watchevent#count()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;1&lt;/code&gt; 이상입니다.</target>
        </trans-unit>
        <trans-unit id="451ee1cb627eed78bb98b62c3c2b734285d519cd" translate="yes" xml:space="preserve">
          <source>When a directory is registered for this event then the &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; is queued when it is observed that an entry in the directory has been modified. The event &lt;a href=&quot;watchevent#count--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; for this event is &lt;code&gt;1&lt;/code&gt; or greater.</source>
          <target state="translated">이 이벤트에 디렉토리가 등록되면 디렉토리 의 항목이 수정 된 것을 발견 하면 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; &lt;/a&gt; 가 대기합니다. 이 이벤트의 이벤트 &lt;a href=&quot;watchevent#count--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;1&lt;/code&gt; 이상입니다.</target>
        </trans-unit>
        <trans-unit id="54c77a330dd41951e46e4b4a1e88cbe19100d080" translate="yes" xml:space="preserve">
          <source>When a directory is registered for this event then the &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; is queued when it is observed that an entry is created in the directory or renamed into the directory. The event &lt;a href=&quot;watchevent#count()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; for this event is always &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">이 이벤트에 대한 디렉토리가 등록되면 디렉토리 에 항목이 생성되거나 디렉토리로 이름이 변경된 것이 관찰 될 때 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; &lt;/a&gt; 가 대기열에 추가됩니다. 이 이벤트의 이벤트 &lt;a href=&quot;watchevent#count()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 는 항상 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="acde6e0c9e549621383ae5222820b57635b1abdb" translate="yes" xml:space="preserve">
          <source>When a directory is registered for this event then the &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; is queued when it is observed that an entry is created in the directory or renamed into the directory. The event &lt;a href=&quot;watchevent#count--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; for this event is always &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">이 이벤트에 디렉토리가 등록되면 디렉토리 에서 항목이 작성되거나 디렉토리로 이름이 바뀐 것을 발견 하면 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; &lt;/a&gt; 가 대기합니다. 이 이벤트의 이벤트 &lt;a href=&quot;watchevent#count--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 는 항상 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a027f021c399f6f07c85633b797d323c94d4cfee" translate="yes" xml:space="preserve">
          <source>When a directory is registered for this event then the &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; is queued when it is observed that an entry is deleted or renamed out of the directory. The event &lt;a href=&quot;watchevent#count()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; for this event is always &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">이 이벤트에 대해 디렉토리가 등록되면 항목이 디렉토리에서 삭제되거나 이름이 변경된 것이 관찰되면 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; &lt;/a&gt; 가 대기열에 추가됩니다. 이 이벤트의 이벤트 &lt;a href=&quot;watchevent#count()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 는 항상 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4aa389d8c3635d68f9942230af80f43edbcdf866" translate="yes" xml:space="preserve">
          <source>When a directory is registered for this event then the &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; is queued when it is observed that an entry is deleted or renamed out of the directory. The event &lt;a href=&quot;watchevent#count--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; for this event is always &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">이 이벤트에 디렉토리가 등록되면 항목이 디렉토리에서 삭제되거나 이름이 바뀐 것을 발견 하면 &lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; &lt;/a&gt; 가 대기합니다. 이 이벤트의 이벤트 &lt;a href=&quot;watchevent#count--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; 는 항상 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="134eb2244461f191f7d57bf1761d699a4a619aa5" translate="yes" xml:space="preserve">
          <source>When a document is first made available via the DOM, there is only one &lt;code&gt;Text&lt;/code&gt; node for each block of text. Users may create adjacent &lt;code&gt;Text&lt;/code&gt; nodes that represent the contents of a given element without any intervening markup, but should be aware that there is no way to represent the separations between these nodes in XML or HTML, so they will not (in general) persist between DOM editing sessions. The &lt;code&gt;Node.normalize()&lt;/code&gt; method merges any such adjacent &lt;code&gt;Text&lt;/code&gt; objects into a single node for each block of text.</source>
          <target state="translated">DOM을 통해 문서를 처음 사용할 수있게되면 각 텍스트 블록에 대해 하나의 &lt;code&gt;Text&lt;/code&gt; 노드 만 있습니다. 사용자는 중간에 마크 업없이 주어진 요소의 내용을 나타내는 인접한 &lt;code&gt;Text&lt;/code&gt; 노드를 만들 수 있지만 이러한 노드 간의 구분을 XML 또는 HTML로 나타낼 수있는 방법이 없으므로 (일반적으로) 서로간에 지속되지 않습니다. DOM 편집 세션. &lt;code&gt;Node.normalize()&lt;/code&gt; 메소드는 이러한 인접 병합 &lt;code&gt;Text&lt;/code&gt; 각 텍스트 블록에 대해 하나의 노드에 오브젝트.</target>
        </trans-unit>
        <trans-unit id="b4da85dd003901db71000007023e7612e6748206" translate="yes" xml:space="preserve">
          <source>When a drag gesture occurs, the &lt;code&gt;DragSource&lt;/code&gt;'s startDrag() method shall be invoked in order to cause processing of the user's navigational gestures and delivery of Drag and Drop protocol notifications. A &lt;code&gt;DragSource&lt;/code&gt; shall only permit a single Drag and Drop operation to be current at any one time, and shall reject any further startDrag() requests by throwing an &lt;code&gt;IllegalDnDOperationException&lt;/code&gt; until such time as the extant operation is complete.</source>
          <target state="translated">드래그 제스처가 발생 하면 사용자의 탐색 제스처를 처리하고 드래그 앤 드롭 프로토콜 알림을 전달하기 위해 &lt;code&gt;DragSource&lt;/code&gt; 의 startDrag () 메서드가 호출되어야합니다. &lt;code&gt;DragSource&lt;/code&gt; 단일 드래그 앤 드롭 동작 중 어느 하나의 시점을 할 수 있도록한다 만, 및 던지는 더하여 startDrag () 요청을 거부한다 &lt;code&gt;IllegalDnDOperationException&lt;/code&gt; 을 현존하는 작동이 완료되는 때까지.</target>
        </trans-unit>
        <trans-unit id="c6e54cb2e2ced5f516b5c3c711efdeb13fed62ee" translate="yes" xml:space="preserve">
          <source>When a file system is constructed to access the contents of a file as a file system then it is highly implementation specific if the returned URI represents the given path in the file system or it represents a &lt;em&gt;compound&lt;/em&gt; URI that encodes the URI of the enclosing file system. A format for compound URIs is not defined in this release; such a scheme may be added in a future release.</source>
          <target state="translated">파일 시스템이 파일의 파일 내용으로 파일의 내용에 액세스하도록 구성된 경우 반환 된 URI가 파일 시스템의 지정된 경로를 나타내거나 파일 시스템의 URI를 인코딩 하는 &lt;em&gt;복합&lt;/em&gt; URI를 나타내는 경우 구현에 따라 다릅니다. . 복합 릴리스의 형식은이 릴리스에서 정의되지 않았습니다. 이러한 구성표는 향후 릴리스에서 추가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="920d75d308d8cfd3c9e9c09baeeb65ab14384dc3" translate="yes" xml:space="preserve">
          <source>When a file system provides access to a set of &lt;a href=&quot;../filestore&quot;&gt;&lt;code&gt;file-systems&lt;/code&gt;&lt;/a&gt; that are not homogeneous then only some of the file systems may support ACLs. The &lt;a href=&quot;../filestore#supportsFileAttributeView(java.lang.Class)&quot;&gt;&lt;code&gt;supportsFileAttributeView&lt;/code&gt;&lt;/a&gt; method can be used to test if a file system supports ACLs.</source>
          <target state="translated">파일 시스템 이 동종이 아닌 &lt;a href=&quot;../filestore&quot;&gt; &lt;code&gt;file-systems&lt;/code&gt; &lt;/a&gt; 집합에 대한 액세스를 제공하면 일부 파일 시스템 만 ACL을 지원할 수 있습니다. &lt;a href=&quot;../filestore#supportsFileAttributeView(java.lang.Class)&quot;&gt; &lt;code&gt;supportsFileAttributeView&lt;/code&gt; 의&lt;/a&gt; 파일 시스템이 ACL을 지원하는 경우 방법은 테스트하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f8424e3622daa52db1d5d000f4c2d226449bfeb" translate="yes" xml:space="preserve">
          <source>When a file system provides access to a set of &lt;a href=&quot;../filestore&quot;&gt;&lt;code&gt;file-systems&lt;/code&gt;&lt;/a&gt; that are not homogeneous then only some of the file systems may support ACLs. The &lt;a href=&quot;../filestore#supportsFileAttributeView-java.lang.Class-&quot;&gt;&lt;code&gt;supportsFileAttributeView&lt;/code&gt;&lt;/a&gt; method can be used to test if a file system supports ACLs.</source>
          <target state="translated">파일 시스템 이 동종이 아닌 &lt;a href=&quot;../filestore&quot;&gt; &lt;code&gt;file-systems&lt;/code&gt; &lt;/a&gt; 세트에 대한 액세스를 제공하는 경우 일부 파일 시스템 만 ACL을 지원할 수 있습니다. &lt;a href=&quot;../filestore#supportsFileAttributeView-java.lang.Class-&quot;&gt; &lt;code&gt;supportsFileAttributeView&lt;/code&gt; 의&lt;/a&gt; 파일 시스템이 ACL을 지원하는 경우 방법은 테스트하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2513b009af422c9e2dc954b7cd7076a8523df7e6" translate="yes" xml:space="preserve">
          <source>When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure.</source>
          <target state="translated">필터가 제공되면 구현은 DOM 트리 구조를 구성 할 때 필터를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="b140beb62778d75da1fe8212e3da055f629c25ea" translate="yes" xml:space="preserve">
          <source>When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure. The filter can choose to remove elements from the document being constructed, or to terminate the parsing early.</source>
          <target state="translated">필터가 제공되면 구현은 DOM 트리 구조를 구성 할 때 필터를 호출합니다. 필터는 생성중인 문서에서 요소를 제거하거나 파싱을 조기에 종료하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="563c181caf51bc9ca81a53828adbe47768c2b0e3" translate="yes" xml:space="preserve">
          <source>When a flush occurs on a newly created node, it is made persistent, as are any ancestors (and descendants) that have yet to be made persistent. Note however that any preference value changes in ancestors are</source>
          <target state="translated">새로 작성된 노드에서 플러시가 발생하면 아직 지속되지 않은 조상 (및 자손)과 마찬가지로 플러시가 지속됩니다. 그러나 조상의 환경 설정 값 변경은</target>
        </trans-unit>
        <trans-unit id="256f93e3b06f4e8ff9204a92a84cbd4bc52fbd5a" translate="yes" xml:space="preserve">
          <source>When a font is requested in some style, eg &lt;code&gt;Font.BOLD&lt;/code&gt;, for which no exact match is available, then techniques to satisfy the requested rendering may similarly result in glyphs that are wider than the reported maximum.</source>
          <target state="translated">정확한 일치를 사용할 수없는 &lt;code&gt;Font.BOLD&lt;/code&gt; 와 같은 일부 스타일로 글꼴을 요청 하면 요청 된 렌더링을 충족하는 기술이보고 된 최대 값보다 더 넓은 글리프를 유사하게 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d4a0847838b4b0259eb6a3663209d9fef15018e" translate="yes" xml:space="preserve">
          <source>When a frame is in maximized state the system supplies some defaults bounds. This method allows some or all of those system supplied values to be overridden.</source>
          <target state="translated">프레임이 최대화 된 상태 일 때 시스템은 일부 기본 경계를 제공합니다. 이 메서드를 사용하면 시스템 제공 값의 일부 또는 전부를 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14b01570d43320be8d365211a70fea5fddceea53" translate="yes" xml:space="preserve">
          <source>When a guarded delegator is created from a guarded pair, the pair is wrapped in a new method handle &lt;code&gt;M&lt;/code&gt;, which is permanently associated with the switch point that created it. Each pair consists of a target &lt;code&gt;T&lt;/code&gt; and a fallback &lt;code&gt;F&lt;/code&gt;. While the switch point is valid, invocations to &lt;code&gt;M&lt;/code&gt; are delegated to &lt;code&gt;T&lt;/code&gt;. After it is invalidated, invocations are delegated to &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">보호 된 델리 게이터가 보호 된 쌍에서 생성되면이 쌍은 새로운 메서드 핸들 &lt;code&gt;M&lt;/code&gt; 에 래핑됩니다.이 메서드 는 스위치를 생성 한 스위치 지점과 영구적으로 연결됩니다. 각 쌍은 대상 &lt;code&gt;T&lt;/code&gt; 와 폴백 &lt;code&gt;F&lt;/code&gt; 로 구성됩니다 . 전환점이 유효하지만 &lt;code&gt;M&lt;/code&gt; 에 대한 호출 은 &lt;code&gt;T&lt;/code&gt; 에 위임됩니다 . 무효화 된 후, 호출은 &lt;code&gt;F&lt;/code&gt; 에 위임됩니다 .</target>
        </trans-unit>
        <trans-unit id="4e4ff9b2bc60835e3eb9b787ed7b76295168a994" translate="yes" xml:space="preserve">
          <source>When a listener instance invokes &lt;code&gt;NamingEvent.getEventContext()&lt;/code&gt;, it must take into account the possibility that other threads will be working with that context concurrently. Likewise, when a listener is registered via &lt;code&gt;addNamingListener()&lt;/code&gt;, the registering thread must take into account the likely possibility that the service provider will later invoke the listeners in newly-created threads. As &lt;code&gt;Context&lt;/code&gt; instances are not guaranteed to be thread-safe in general, all context operations must be synchronized as needed.</source>
          <target state="translated">리스너 인스턴스가 &lt;code&gt;NamingEvent.getEventContext()&lt;/code&gt; 를 호출 할 때 다른 스레드가 해당 컨텍스트와 동시에 작업 할 가능성을 고려해야합니다. 마찬가지로 리스너가 &lt;code&gt;addNamingListener()&lt;/code&gt; 를 통해 등록되면 등록 스레드는 서비스 제공자가 나중에 새로 작성된 스레드에서 리스너를 호출 할 가능성을 고려해야합니다. 로 &lt;code&gt;Context&lt;/code&gt; 인스턴스가 스레드 안전 일반적으로 보장되지 않습니다 필요에 따라, 모든 상황에 맞는 동작을 동기화해야합니다.</target>
        </trans-unit>
        <trans-unit id="72e45729b02983b1bd6705a44338889bc8ecf80f" translate="yes" xml:space="preserve">
          <source>When a listener is registered, the &lt;a href=&quot;transformerfactory&quot;&gt;&lt;code&gt;TransformerFactory&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;transformer&quot;&gt;&lt;code&gt;Transformer&lt;/code&gt;&lt;/a&gt; must use this interface to pass on all warnings and errors to the listener and let the application decide how to handle them. Note that the &lt;code&gt;TransformerFactory&lt;/code&gt; or &lt;code&gt;Transformer&lt;/code&gt; is not required to continue with the transformation after a call to &lt;a href=&quot;#fatalError(javax.xml.transform.TransformerException)&quot;&gt;&lt;code&gt;fatalError(TransformerException exception)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">리스너가 등록되면 &lt;a href=&quot;transformerfactory&quot;&gt; &lt;code&gt;TransformerFactory&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;transformer&quot;&gt; &lt;code&gt;Transformer&lt;/code&gt; &lt;/a&gt; 는이 인터페이스를 사용하여 모든 경고 및 오류를 리스너에 전달하고 애플리케이션이 처리 방법을 결정하도록해야합니다. 것을 참고 &lt;code&gt;TransformerFactory&lt;/code&gt; 또는 &lt;code&gt;Transformer&lt;/code&gt; 를 호출 한 후 변환을 계속 할 필요가 없다 &lt;a href=&quot;#fatalError(javax.xml.transform.TransformerException)&quot;&gt; &lt;code&gt;fatalError(TransformerException exception)&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bf04634d7ff1db386d9b9db0fb748a111b1c6a04" translate="yes" xml:space="preserve">
          <source>When a listener registers for events with a context, the context might need to do some internal processing in order to collect information required to generate the events. The context, for example, might need to make a request to the server to register interest in changes on the server that will eventually be translated into events. If an exception occurs that prevents information about the events from being collected, the listener will never be notified of the events. When such an exception occurs, a &lt;code&gt;NamingExceptionEvent&lt;/code&gt; is fired to notify the listener. The listener's &lt;code&gt;namingExceptionThrown()&lt;/code&gt; method is invoked, as shown in the sample code above, and the listener is automatically deregistered.</source>
          <target state="translated">리스너가 컨텍스트에 이벤트를 등록 할 때, 이벤트를 생성하는 데 필요한 정보를 수집하기 위해 컨텍스트가 내부 처리를 수행해야 할 수도 있습니다. 예를 들어, 컨텍스트는 결국 이벤트로 변환 될 서버의 변경 사항에 관심을 등록하기 위해 서버에 요청해야 할 수도 있습니다. 이벤트에 대한 정보가 수집되지 못하게하는 예외가 발생하면 리스너에게 이벤트에 대한 알림을받지 않습니다. 이러한 예외가 발생 하면 리스너에게 알리기 위해 &lt;code&gt;NamingExceptionEvent&lt;/code&gt; 가 발생합니다. 위의 샘플 코드에 표시된대로 리스너의 &lt;code&gt;namingExceptionThrown()&lt;/code&gt; 메소드가 호출되고 리스너가 자동으로 등록 취소됩니다.</target>
        </trans-unit>
        <trans-unit id="33b28d28af613b8d16f2122edfdaef0433849cdf" translate="yes" xml:space="preserve">
          <source>When a lookup class in one module &lt;code&gt;M1&lt;/code&gt; accesses a class in another module &lt;code&gt;M2&lt;/code&gt;, extra access checking is performed beyond the access mode bits. A &lt;code&gt;Lookup&lt;/code&gt; with &lt;a href=&quot;#PUBLIC&quot;&gt;&lt;code&gt;PUBLIC&lt;/code&gt;&lt;/a&gt; mode and a lookup class in &lt;code&gt;M1&lt;/code&gt; can access public types in &lt;code&gt;M2&lt;/code&gt; when &lt;code&gt;M2&lt;/code&gt; is readable to &lt;code&gt;M1&lt;/code&gt; and when the type is in a package of &lt;code&gt;M2&lt;/code&gt; that is exported to at least &lt;code&gt;M1&lt;/code&gt;.</source>
          <target state="translated">한 모듈 &lt;code&gt;M1&lt;/code&gt; 의 룩업 클래스가 다른 모듈 &lt;code&gt;M2&lt;/code&gt; 의 클래스에 액세스하면 액세스 모드 비트를 넘어서 추가 액세스 검사가 수행됩니다. &lt;code&gt;Lookup&lt;/code&gt; 와 &lt;a href=&quot;#PUBLIC&quot;&gt; &lt;code&gt;PUBLIC&lt;/code&gt; 의&lt;/a&gt; 모드에서 룩업 클래스 &lt;code&gt;M1&lt;/code&gt; 은 공공 타입에 액세스 할 수 &lt;code&gt;M2&lt;/code&gt; 때 &lt;code&gt;M2&lt;/code&gt; 가 로 읽을 &lt;code&gt;M1&lt;/code&gt; 및 유형의 패키지 일 때 &lt;code&gt;M2&lt;/code&gt; 이상의 수출되고 &lt;code&gt;M1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="88240763f016e704f50f91eea618ff29da324203" translate="yes" xml:space="preserve">
          <source>When a menu item is selected, AWT sends an action event to the menu item. Since the event is an instance of &lt;code&gt;ActionEvent&lt;/code&gt;, the &lt;code&gt;processEvent&lt;/code&gt; method examines the event and passes it along to &lt;code&gt;processActionEvent&lt;/code&gt;. The latter method redirects the event to any &lt;code&gt;ActionListener&lt;/code&gt; objects that have registered an interest in action events generated by this menu item.</source>
          <target state="translated">메뉴 항목이 선택되면 AWT는 메뉴 항목에 조치 이벤트를 보냅니다. 이벤트의 예이므로 &lt;code&gt;ActionEvent&lt;/code&gt; 를 상기 &lt;code&gt;processEvent&lt;/code&gt; 있어서 이벤트를 검사에 따라이를 전달 &lt;code&gt;processActionEvent&lt;/code&gt; . 후자의 메소드 는이 메뉴 항목에 의해 생성 된 조치 이벤트에 대한 관심을 등록한 모든 &lt;code&gt;ActionListener&lt;/code&gt; 오브젝트로 이벤트를 리디렉션합니다 .</target>
        </trans-unit>
        <trans-unit id="90dd254c09d1c776ecf5c2349e720c462b943059" translate="yes" xml:space="preserve">
          <source>When a method handle is obtained by executing an &lt;code&gt;ldc&lt;/code&gt; instruction of a &lt;code&gt;CONSTANT_MethodHandle&lt;/code&gt; constant, and the target method is marked as a variable arity method (with the modifier bit &lt;code&gt;0x0080&lt;/code&gt;), the method handle will accept multiple arities, as if the method handle constant were created by means of a call to &lt;code&gt;asVarargsCollector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CONSTANT_MethodHandle&lt;/code&gt; 상수 의 &lt;code&gt;ldc&lt;/code&gt; 명령을 실행하여 메소드 핸들을 확보 하고 대상 메소드가 가변 arity 메소드 (수정 자 비트 &lt;code&gt;0x0080&lt;/code&gt; )로 표시되면 메소드 핸들은 메소드 핸들 상수가 &lt;code&gt;asVarargsCollector&lt;/code&gt; 를 호출하여 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="dc59d96f42634aad08455afa57812c0140efcb78" translate="yes" xml:space="preserve">
          <source>When a method handle to a virtual method is invoked, the method is always looked up in the receiver (that is, the first argument).</source>
          <target state="translated">가상 메소드에 대한 메소드 핸들이 호출되면 메소드는 항상 수신자 (즉, 첫 번째 인수)에서 조회됩니다.</target>
        </trans-unit>
        <trans-unit id="ac3ed4c5aa8581e47e6e1d20592079740b067ad7" translate="yes" xml:space="preserve">
          <source>When a method such as list(), listBindings(), or search() returns a NamingEnumeration, any exceptions encountered are reserved until all results have been returned. At the end of the enumeration, the exception is thrown (by hasMore());</source>
          <target state="translated">list (), listBindings () 또는 search ()와 같은 메서드가 NamingEnumeration을 반환하면 모든 결과가 반환 될 때까지 발생한 예외가 예약됩니다. 열거가 끝나면 예외가 발생합니다 (hasMore ()에 의해).</target>
        </trans-unit>
        <trans-unit id="c77f58a997936db72fbff2f59c022214ac8f5bcc" translate="yes" xml:space="preserve">
          <source>When a module declares that the provider class is created by a provider factory then this method returns the return type of its public static &quot;&lt;code&gt;provider()&lt;/code&gt;&quot; method.</source>
          <target state="translated">모듈이 공급자 클래스가 공급자 팩토리에 의해 생성되었다고 선언하면이 메서드는 공용 정적 &quot; &lt;code&gt;provider()&lt;/code&gt; &quot;메서드 의 반환 유형을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="98cbaeab94a8ea21799291ebebb2b9e8ca8b5128" translate="yes" xml:space="preserve">
          <source>When a module is deprecated, the use of that module in &lt;code&gt;
 requires&lt;/code&gt;, but not in &lt;code&gt;exports&lt;/code&gt; or &lt;code&gt;opens&lt;/code&gt; clauses causes a warning to be issued. A module being deprecated does &lt;em&gt;not&lt;/em&gt; cause warnings to be issued for uses of types within the module.</source>
          <target state="translated">모듈이 더 이상 사용되지 않는 경우 해당 모듈을 &lt;code&gt; requires&lt;/code&gt; 에서 사용하지만 &lt;code&gt;exports&lt;/code&gt; 또는 &lt;code&gt;opens&lt;/code&gt; 절 에서는 사용하지 않으면 경고가 발생합니다. 더 이상 사용되지 &lt;em&gt;않는&lt;/em&gt; 모듈은 모듈 내의 유형 사용에 대한 경고를 발행 하지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d555a5a6abfd38f83f82a291e707b2b58a5605e9" translate="yes" xml:space="preserve">
          <source>When a mouse button is clicked, events are generated and sent to the registered &lt;code&gt;MouseListener&lt;/code&gt;s. The state of modal keys can be retrieved using &lt;a href=&quot;inputevent#getModifiers()&quot;&gt;&lt;code&gt;InputEvent.getModifiers()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;inputevent#getModifiersEx()&quot;&gt;&lt;code&gt;InputEvent.getModifiersEx()&lt;/code&gt;&lt;/a&gt;. The button mask returned by &lt;a href=&quot;inputevent#getModifiers()&quot;&gt;&lt;code&gt;InputEvent.getModifiers()&lt;/code&gt;&lt;/a&gt; reflects only the button that changed state, not the current state of all buttons. (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and META_MASK/BUTTON3_MASK, this is not always true for mouse events involving modifier keys). To get the state of all buttons and modifier keys, use &lt;a href=&quot;inputevent#getModifiersEx()&quot;&gt;&lt;code&gt;InputEvent.getModifiersEx()&lt;/code&gt;&lt;/a&gt;. The button which has changed state is returned by &lt;a href=&quot;#getButton()&quot;&gt;&lt;code&gt;getButton()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">마우스 버튼을 클릭하면 이벤트가 생성되어 등록 된 &lt;code&gt;MouseListener&lt;/code&gt; 로 전송됩니다 . 모달 키의 상태는 &lt;a href=&quot;inputevent#getModifiers()&quot;&gt; &lt;code&gt;InputEvent.getModifiers()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;inputevent#getModifiersEx()&quot;&gt; &lt;code&gt;InputEvent.getModifiersEx()&lt;/code&gt; &lt;/a&gt; 사용하여 검색 할 수 있습니다 . &lt;a href=&quot;inputevent#getModifiers()&quot;&gt; &lt;code&gt;InputEvent.getModifiers()&lt;/code&gt; &lt;/a&gt; 반환 된 버튼 마스크 는 모든 버튼의 현재 상태가 아닌 상태를 변경 한 버튼 만 반영합니다. (참고 : ALT_MASK / BUTTON2_MASK 및 META_MASK / BUTTON3_MASK 값이 겹치기 때문에 수정 자 키가 포함 된 마우스 이벤트의 경우 항상 해당되지는 않습니다.) 모든 버튼 및 수정 자 키의 상태를 가져 오려면 &lt;a href=&quot;inputevent#getModifiersEx()&quot;&gt; &lt;code&gt;InputEvent.getModifiersEx()&lt;/code&gt; &lt;/a&gt; . 상태가 변경된 버튼은 &lt;a href=&quot;#getButton()&quot;&gt; &lt;code&gt;getButton()&lt;/code&gt; &lt;/a&gt; 에 의해 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="00112656e542a277ccbb970384f5707477b0e0b9" translate="yes" xml:space="preserve">
          <source>When a new &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; object is created, initially this field is set to null. This field will &lt;em&gt;NOT&lt;/em&gt; be inherited to &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt;s, &lt;a href=&quot;validator&quot;&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;/a&gt;s, or &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt;s that are created from this &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">새 &lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; &lt;/a&gt; 객체가 생성되면 처음에이 필드는 null로 설정됩니다. 이 필드는 이 &lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; &lt;/a&gt; 에서 생성 된 &lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;validator&quot;&gt; &lt;code&gt;Validator&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt; 로 상속 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="3e086a8e7068102271cf7d6fcc1d6a613e3a6593" translate="yes" xml:space="preserve">
          <source>When a new &lt;a href=&quot;validator&quot;&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;/a&gt; object is created, initially this field is set to null.</source>
          <target state="translated">새 &lt;a href=&quot;validator&quot;&gt; &lt;code&gt;Validator&lt;/code&gt; &lt;/a&gt; 객체가 생성되면 처음에이 필드는 null로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="55a52e9d9430d2238010dc383d8d5a916e167cd6" translate="yes" xml:space="preserve">
          <source>When a new &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; object is created, initially this field is set to null.</source>
          <target state="translated">새 &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt; 객체가 생성되면 처음에이 필드는 null로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="f0c78c3d3fddb6c5863a4d4f38ff7afd50aaf75d" translate="yes" xml:space="preserve">
          <source>When a new JConsole window is created for a connection, an instance of each &lt;code&gt;JConsolePlugin&lt;/code&gt; will be created. The &lt;code&gt;JConsoleContext&lt;/code&gt; object is not available at its construction time. JConsole will set the &lt;a href=&quot;jconsolecontext&quot;&gt;&lt;code&gt;JConsoleContext&lt;/code&gt;&lt;/a&gt; object for a plugin after the plugin object is created. It will then call its &lt;a href=&quot;#getTabs()&quot;&gt;&lt;code&gt;getTabs&lt;/code&gt;&lt;/a&gt; method and add the returned tabs to the JConsole window.</source>
          <target state="translated">연결을위한 새 JConsole 창이 생성되면 각 &lt;code&gt;JConsolePlugin&lt;/code&gt; 의 인스턴스 가 생성됩니다. &lt;code&gt;JConsoleContext&lt;/code&gt; 의 객체는 건설시에 사용할 수 없습니다. JConsole은 플러그인 객체가 생성 된 후 플러그인에 대한 &lt;a href=&quot;jconsolecontext&quot;&gt; &lt;code&gt;JConsoleContext&lt;/code&gt; &lt;/a&gt; 객체를 설정합니다 . 그런 다음 &lt;a href=&quot;#getTabs()&quot;&gt; &lt;code&gt;getTabs&lt;/code&gt; &lt;/a&gt; 메서드 를 호출하고 반환 된 탭을 JConsole 창에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="a16476348451a202ec7241c549e271abf68b5efa" translate="yes" xml:space="preserve">
          <source>When a new connection is accepted then the resulting &lt;code&gt;
 AsynchronousSocketChannel&lt;/code&gt; will be bound to the same &lt;a href=&quot;asynchronouschannelgroup&quot;&gt;&lt;code&gt;AsynchronousChannelGroup&lt;/code&gt;&lt;/a&gt; as this channel. If the group is &lt;a href=&quot;asynchronouschannelgroup#isShutdown()&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; and a connection is accepted, then the connection is closed, and the operation completes with an &lt;code&gt;
 IOException&lt;/code&gt; and cause &lt;a href=&quot;shutdownchannelgroupexception&quot;&gt;&lt;code&gt;ShutdownChannelGroupException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">새 연결이 수락되면 결과 &lt;code&gt; AsynchronousSocketChannel&lt;/code&gt; 이이 채널 과 동일한 &lt;a href=&quot;asynchronouschannelgroup&quot;&gt; &lt;code&gt;AsynchronousChannelGroup&lt;/code&gt; 에&lt;/a&gt; 바인딩됩니다 . 그룹이 &lt;a href=&quot;asynchronouschannelgroup#isShutdown()&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt; 되고 연결이 수락되면 연결이 닫히고 작업이 &lt;code&gt; IOException&lt;/code&gt; 과 함께 완료되고 &lt;a href=&quot;shutdownchannelgroupexception&quot;&gt; &lt;code&gt;ShutdownChannelGroupException&lt;/code&gt; 이&lt;/a&gt; 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="eaa5aba63dd9f02bc423da3760cc790334dde37c" translate="yes" xml:space="preserve">
          <source>When a new connection is accepted then the resulting &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; will be bound to the same &lt;a href=&quot;asynchronouschannelgroup&quot;&gt;&lt;code&gt;AsynchronousChannelGroup&lt;/code&gt;&lt;/a&gt; as this channel. If the group is &lt;a href=&quot;asynchronouschannelgroup#isShutdown--&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; and a connection is accepted, then the connection is closed, and the operation completes with an &lt;code&gt;IOException&lt;/code&gt; and cause &lt;a href=&quot;shutdownchannelgroupexception&quot;&gt;&lt;code&gt;ShutdownChannelGroupException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">새 연결이 수락되면 결과 &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; 이이 채널 과 동일한 &lt;a href=&quot;asynchronouschannelgroup&quot;&gt; &lt;code&gt;AsynchronousChannelGroup&lt;/code&gt; 에&lt;/a&gt; 바인딩됩니다 . 그룹이 &lt;a href=&quot;asynchronouschannelgroup#isShutdown--&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt; 되고 연결이 승인되면 연결이 닫히고 작업이 &lt;code&gt;IOException&lt;/code&gt; 으로 완료되고 &lt;a href=&quot;shutdownchannelgroupexception&quot;&gt; &lt;code&gt;ShutdownChannelGroupException&lt;/code&gt; 이&lt;/a&gt; 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="b6d8a70cca16fc1a092f3e5b3fb7136e528d4e86" translate="yes" xml:space="preserve">
          <source>When a numeric shaper is defined, the text is first processed by the shaper before any other analysis of the text is performed.</source>
          <target state="translated">숫자 셰이퍼가 정의되면 텍스트의 다른 분석이 수행되기 전에 셰이퍼가 텍스트를 먼저 처리합니다.</target>
        </trans-unit>
        <trans-unit id="020ef9f20f26ac791311bcdc46b2f2890f6d7b82" translate="yes" xml:space="preserve">
          <source>When a peer sends a</source>
          <target state="translated">피어가</target>
        </trans-unit>
        <trans-unit id="f20b7bb9a7a0ed971069cd4bd43c35163e0303e3" translate="yes" xml:space="preserve">
          <source>When a printer controls more than one output device, this reason indicates that one or more output devices are stopped.</source>
          <target state="translated">프린터가 둘 이상의 출력 장치를 제어하는 ​​경우이 이유는 하나 이상의 출력 장치가 중지되었음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="57b0000a9696b1c366c87328582e275d001b7acb" translate="yes" xml:space="preserve">
          <source>When a printer controls more than one output device, this reason indicates that one or more output devices are stopped. If the reason's severity is a report, fewer than half of the output devices are stopped. If the reason's severity is a warning, half or more but fewer than all of the output devices are stopped.</source>
          <target state="translated">프린터가 둘 이상의 출력 장치를 제어 할 때 하나 이상의 출력 장치가 중지되었음을 나타냅니다. 이유의 심각도가 보고서 인 경우 출력 장치의 절반 미만이 중지됩니다. 이유의 심각도가 경고 인 경우, 모든 출력 장치의 절반 이상이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="ccb21bbf1cfa3412cab733738537427c4a4c474e" translate="yes" xml:space="preserve">
          <source>When a proxy selector is registered, for instance, a subclass of URLConnection class should call the &lt;a href=&quot;#select(java.net.URI)&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; method for each URL request so that the proxy selector can decide if a direct, or proxied connection should be used. The &lt;a href=&quot;#select(java.net.URI)&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; method returns an iterator over a collection with the preferred connection approach.</source>
          <target state="translated">예를 들어 프록시 선택기가 등록되면 URLConnection 클래스의 하위 클래스가 각 URL 요청에 대해 &lt;a href=&quot;#select(java.net.URI)&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt; 메서드를 호출 하여 프록시 선택기가 직접 연결 또는 프록시 연결을 사용해야하는지 결정할 수 있습니다. &lt;a href=&quot;#select(java.net.URI)&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt; 방법은 추천의 접속 방법으로 컬렉션의 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="48145dbd368db04ca5f1dc84946f81ac044581d7" translate="yes" xml:space="preserve">
          <source>When a proxy selector is registered, for instance, a subclass of URLConnection class should call the &lt;a href=&quot;proxyselector#select-java.net.URI-&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; method for each URL request so that the proxy selector can decide if a direct, or proxied connection should be used. The &lt;a href=&quot;proxyselector#select-java.net.URI-&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; method returns an iterator over a collection with the preferred connection approach.</source>
          <target state="translated">예를 들어 프록시 선택기가 등록되면 URLConnection 클래스의 하위 클래스가 각 URL 요청에 대해 &lt;a href=&quot;proxyselector#select-java.net.URI-&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt; 메소드를 호출 하여 프록시 선택기가 직접 연결 또는 프록시 연결을 사용해야하는지 여부를 결정할 수 있습니다. &lt;a href=&quot;proxyselector#select-java.net.URI-&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt; 방법은 추천의 접속 방법으로 컬렉션의 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4492abf48ec4645a23e3300769bfe838f92fe80f" translate="yes" xml:space="preserve">
          <source>When a recording is stopped it can't be restarted. If this recording has a destination, data is written to that destination and the recording is closed. After a recording is closed, the data is no longer available.</source>
          <target state="translated">녹음이 중지되면 다시 시작할 수 없습니다. 이 녹음에 대상이있는 경우 해당 대상에 데이터가 기록되고 녹음이 닫힙니다. 기록이 닫히면 데이터를 더 이상 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d0d0a0a75e5df0269d9b48018fdf0251b8588033" translate="yes" xml:space="preserve">
          <source>When a rendering or image manipulation operation produces a color value that must be stored into a destination, it must first convert that color into a form suitable for storing into the destination image or surface. Minimally, the color components must be converted to bit representations and ordered in the correct order or an index into a color lookup table must be chosen before the data can be stored into the destination memory. Without this minimal conversion, the data in the destination would likely represent random, incorrect or possibly even unsupported values. Algorithms to quickly convert the results of rendering operations into the color format of most common destinations are well known and fairly optimal to execute.</source>
          <target state="translated">렌더링 또는 이미지 조작 작업이 대상에 저장해야하는 색상 값을 생성하는 경우 먼저 해당 색상을 대상 이미지 또는 표면에 저장하기에 적합한 형식으로 변환해야합니다. 최소한 색상 구성 요소를 비트 표현으로 변환하고 올바른 순서로 정렬하거나 데이터를 대상 메모리에 저장하기 전에 색상 조회 테이블에 대한 인덱스를 선택해야합니다. 이 최소한의 변환이 없으면 대상의 데이터가 임의의 값, 부정확하거나 지원되지 않는 값을 나타낼 수 있습니다. 렌더링 작업의 결과를 가장 일반적인 대상의 색상 형식으로 빠르게 변환하는 알고리즘은 잘 알려져 있으며 실행하기에 상당히 최적입니다.</target>
        </trans-unit>
        <trans-unit id="7a3bf5e738a9141b4b95997a3f1e19dc1b7157d4" translate="yes" xml:space="preserve">
          <source>When a rowset gets its data from a relational database, it executes a command (a query) that produces a &lt;code&gt;ResultSet&lt;/code&gt; object. This query is the command that is set for the &lt;code&gt;RowSet&lt;/code&gt; object's command property. The rowset populates itself with data by reading the data from the &lt;code&gt;ResultSet&lt;/code&gt; object into itself. If the query contains placeholders for values to be set, the &lt;code&gt;BaseRowSet&lt;/code&gt; setter methods are used to set these values. All setter methods allow these values to be set to &lt;code&gt;null&lt;/code&gt; if required.</source>
          <target state="translated">행 집합이 관계형 데이터베이스에서 데이터를 가져 오면 &lt;code&gt;ResultSet&lt;/code&gt; 개체 를 생성하는 명령 (쿼리)을 실행 합니다. 이 쿼리는 &lt;code&gt;RowSet&lt;/code&gt; 개체의 명령 속성에 대해 설정된 명령입니다 . 행 집합은 &lt;code&gt;ResultSet&lt;/code&gt; 개체 에서 데이터를 읽어 데이터로 채워집니다 . 쿼리에 설정할 값에 대한 자리 표시자가 포함 된 경우 &lt;code&gt;BaseRowSet&lt;/code&gt; setter 메서드를 사용하여 이러한 값을 설정합니다. 모든 setter 메서드는 필요한 경우 이러한 값을 &lt;code&gt;null&lt;/code&gt; 로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="758869419d156f27990d997e0fa9fce2a685beea" translate="yes" xml:space="preserve">
          <source>When a scanner throws an &lt;a href=&quot;inputmismatchexception&quot;&gt;&lt;code&gt;InputMismatchException&lt;/code&gt;&lt;/a&gt;, the scanner will not pass the token that caused the exception, so that it may be retrieved or skipped via some other method.</source>
          <target state="translated">스캐너가 &lt;a href=&quot;inputmismatchexception&quot;&gt; &lt;code&gt;InputMismatchException&lt;/code&gt; 을&lt;/a&gt; throw하면 스캐너는 예외를 일으킨 토큰을 전달하지 않으므로 다른 방법으로 검색하거나 건너 뛸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="817af58e7bcbe10748b284737a339517287e3c10" translate="yes" xml:space="preserve">
          <source>When a scroll bar is used to select a range of values, the visible amount is used to represent the range of values that are currently visible. The size of the scroll bar's bubble (also called a thumb or scroll box), usually gives a visual representation of the relationship of the visible amount to the range of the scroll bar. Note that depending on platform, the value of the visible amount property may not be visually indicated by the size of the bubble.</source>
          <target state="translated">스크롤 막대를 사용하여 값 범위를 선택하면 표시되는 양이 현재 표시되는 값 범위를 나타내는 데 사용됩니다. 스크롤 막대의 거품 크기 (썸 또는 스크롤 상자라고도 함)는 일반적으로 스크롤 막대 범위에 대한 가시적 양의 관계를 시각적으로 나타냅니다. 플랫폼에 따라 표시량 속성의 값이 거품의 크기로 시각적으로 표시되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a853e62233343e776fbd44333e92601acc2febbe" translate="yes" xml:space="preserve">
          <source>When a security manager is installed and it denies access to a file (or directory), then it is ignored and not included in the stream.</source>
          <target state="translated">보안 관리자가 설치되고 파일 (또는 디렉토리)에 대한 액세스를 거부하면 무시되며 스트림에 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e74c73e1d683b9fecd0a717afa160e6920257abc" translate="yes" xml:space="preserve">
          <source>When a security manager is installed and it denies access to a file (or directory), then it is ignored and the visitor is not invoked for that file (or directory).</source>
          <target state="translated">보안 관리자가 설치되고 파일 (또는 디렉토리)에 대한 액세스를 거부하면 해당 파일 (또는 디렉토리)에 대한 방문자가 호출되지 않고 방문자가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="61d88ca5288dc5b3be9b25739812ea67777f1b62" translate="yes" xml:space="preserve">
          <source>When a security manager is installed, it is invoked to check access to the each root directory. If denied, the root directory is not returned by the iterator. In the case of the default provider, the &lt;a href=&quot;../../lang/securitymanager#checkRead(java.lang.String)&quot;&gt;&lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt;&lt;/a&gt; method is invoked to check read access to each root directory. It is system dependent if the permission checks are done when the iterator is obtained or during iteration.</source>
          <target state="translated">보안 관리자가 설치되면 각 루트 디렉토리에 대한 액세스를 확인하기 위해 호출됩니다. 거부 된 경우 루트 디렉터리는 반복기에 의해 반환되지 않습니다. 기본 공급자의 경우 각 루트 디렉터리에 대한 읽기 액세스를 확인하기 위해 &lt;a href=&quot;../../lang/securitymanager#checkRead(java.lang.String)&quot;&gt; &lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt; &lt;/a&gt; 메서드가 호출됩니다. 반복기가 확보 될 때 또는 반복 중에 권한 검사가 수행되는지 여부는 시스템에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="3b16d1c9ade5f68deff8b6a72ad86abd212f522b" translate="yes" xml:space="preserve">
          <source>When a security manager is installed, it is invoked to check access to the each root directory. If denied, the root directory is not returned by the iterator. In the case of the default provider, the &lt;a href=&quot;../../lang/securitymanager#checkRead-java.lang.String-&quot;&gt;&lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt;&lt;/a&gt; method is invoked to check read access to each root directory. It is system dependent if the permission checks are done when the iterator is obtained or during iteration.</source>
          <target state="translated">보안 관리자가 설치되면 각 루트 디렉토리에 대한 액세스를 확인하기 위해 호출됩니다. 거부되면 루트 디렉토리는 반복자에 의해 리턴되지 않습니다. 기본 제공자의 경우 각 루트 디렉토리에 대한 읽기 액세스를 확인하기 위해 &lt;a href=&quot;../../lang/securitymanager#checkRead-java.lang.String-&quot;&gt; &lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt; &lt;/a&gt; 메소드가 호출됩니다. 반복기가 확보 될 때 또는 반복 중에 권한 점검이 수행되는지 여부는 시스템에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="8c6148e86bea201a9f994d578beb5dfb43f4e09e" translate="yes" xml:space="preserve">
          <source>When a security manager is installed, some non-standard socket options may require a security permission before being set or get. The details are specified in &lt;a href=&quot;extendedsocketoptions&quot;&gt;&lt;code&gt;ExtendedSocketOptions&lt;/code&gt;&lt;/a&gt;. No permission is required for &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions&quot;&gt;&lt;code&gt;StandardSocketOptions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">보안 관리자가 설치되면 일부 비표준 소켓 옵션을 설정하거나 가져 오기 전에 보안 권한이 필요할 수 있습니다. 세부 사항은 &lt;a href=&quot;extendedsocketoptions&quot;&gt; &lt;code&gt;ExtendedSocketOptions&lt;/code&gt; &lt;/a&gt; 에 지정됩니다 . &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions&quot;&gt; &lt;code&gt;StandardSocketOptions&lt;/code&gt; &lt;/a&gt; 에는 권한이 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="bd8e3e90bc0a4ad1eaf1fe672cd6021d8ff59c73" translate="yes" xml:space="preserve">
          <source>When a service provider needs to determine the value of a property, it will generally take that value directly from the environment. A service provider may define provider-specific properties to be placed in its own provider resource file. In that case it should merge values as described in the previous paragraph.</source>
          <target state="translated">서비스 공급자가 속성 값을 결정해야하는 경우 일반적으로 해당 값을 환경에서 직접 가져옵니다. 서비스 제공자는 자신의 제공자 자원 파일에 배치 할 제공자 특정 특성을 정의 할 수 있습니다. 이 경우 이전 단락에서 설명한대로 값을 병합해야합니다.</target>
        </trans-unit>
        <trans-unit id="7807fd2cea76f3e1ce4a83a545e5b3a3ae40080e" translate="yes" xml:space="preserve">
          <source>When a service provider receives a response control, it uses control factories to return the specific/appropriate control class implementation.</source>
          <target state="translated">서비스 제공자는 응답 제어를 받으면 제어 팩토리를 사용하여 특정 / 적절한 제어 클래스 구현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3ade58d0e25bc018ea163c0cdad7f4b776c6ab39" translate="yes" xml:space="preserve">
          <source>When a service provider receives response controls, it uses the &lt;code&gt;ControlFactory&lt;/code&gt; class to produce specific classes that implement the &lt;code&gt;Control&lt;/code&gt; interface.</source>
          <target state="translated">서비스 제공자는 응답 제어를 수신하면 &lt;code&gt;ControlFactory&lt;/code&gt; 클래스를 사용 하여 &lt;code&gt;Control&lt;/code&gt; 인터페이스 를 구현하는 특정 클래스를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="3d30b140cad70a65f78e1eb56376dbfbaf7a9533" translate="yes" xml:space="preserve">
          <source>When a single argument is parsed more than once in the string, the last match will be the final result of the parsing. For example,</source>
          <target state="translated">문자열에서 단일 인수가 두 번 이상 구문 분석되면 마지막 일치가 구문 분석의 최종 결과입니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="058e1674f7a000873c2028dd6c1dc5cce20b5b83" translate="yes" xml:space="preserve">
          <source>When a socket is connected, &lt;a href=&quot;#receive(java.net.DatagramPacket)&quot;&gt;&lt;code&gt;receive&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#send(java.net.DatagramPacket)&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt;&lt;b&gt;will not perform any security checks&lt;/b&gt; on incoming and outgoing packets, other than matching the packet's and the socket's address and port. On a send operation, if the packet's address is set and the packet's address and the socket's address do not match, an &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown. A socket connected to a multicast address may only be used to send packets.</source>
          <target state="translated">소켓이 연결되면 &lt;a href=&quot;#receive(java.net.DatagramPacket)&quot;&gt; &lt;code&gt;receive&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#send(java.net.DatagramPacket)&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;&lt;b&gt; 은&lt;/b&gt; 패킷과 소켓의 주소 및 포트 일치를 제외하고 수신 및 송신 패킷에 &lt;b&gt;대한 보안 검사&lt;/b&gt; 를 &lt;b&gt;수행하지 않습니다&lt;/b&gt; . 송신 동작에서 패킷의 주소가 설정되어 있고 패킷의 주소와 소켓의 주소가 일치하지 않으면 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 이 발생합니다. 멀티 캐스트 주소에 연결된 소켓은 패킷 전송에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b152721196e9350030fbce80cc3060686ce54e33" translate="yes" xml:space="preserve">
          <source>When a socket is connected, &lt;a href=&quot;datagramsocket#receive-java.net.DatagramPacket-&quot;&gt;&lt;code&gt;receive&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datagramsocket#send-java.net.DatagramPacket-&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt;&lt;b&gt;will not perform any security checks&lt;/b&gt; on incoming and outgoing packets, other than matching the packet's and the socket's address and port. On a send operation, if the packet's address is set and the packet's address and the socket's address do not match, an &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown. A socket connected to a multicast address may only be used to send packets.</source>
          <target state="translated">소켓이 연결되면 &lt;a href=&quot;datagramsocket#receive-java.net.DatagramPacket-&quot;&gt; &lt;code&gt;receive&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;datagramsocket#send-java.net.DatagramPacket-&quot;&gt; &lt;code&gt;send&lt;/code&gt; &lt;/a&gt;&lt;b&gt; 은&lt;/b&gt; 패킷 및 소켓 주소 및 포트와 일치하는 것 외에는 들어오고 나가는 패킷에 &lt;b&gt;대한 보안 검사&lt;/b&gt; 를 &lt;b&gt;수행하지 않습니다&lt;/b&gt; . 송신 작업에서 패킷 주소가 설정되고 패킷 주소와 소켓 주소가 일치하지 않으면 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 이 발생합니다. 멀티 캐스트 주소에 연결된 소켓은 패킷을 보내는 데만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a75cd6f6c3582a34b8ac5dfdb077e4af32675c83" translate="yes" xml:space="preserve">
          <source>When a socket subscribes to a multicast group/port, it receives datagrams sent by other hosts to the group/port, as do all other members of the group and port. A socket relinquishes membership in a group by the leaveGroup(InetAddress addr) method. &lt;b&gt; Multiple MulticastSocket's&lt;/b&gt; may subscribe to a multicast group and port concurrently, and they will all receive group datagrams.</source>
          <target state="translated">소켓이 멀티 캐스트 그룹 / 포트에 가입하면 그룹 및 포트의 다른 모든 구성원과 마찬가지로 다른 호스트가 그룹 / 포트로 보낸 데이터 그램을 수신합니다. 소켓은 leaveGroup (InetAddress addr) 메소드에 의해 그룹의 멤버쉽을 포기합니다. &lt;b&gt;다중 멀티 캐스트&lt;/b&gt; 소켓은 멀티 캐스트 그룹과 포트를 동시에 구독 할 수 있으며 모두 그룹 데이터 그램을 수신합니다.</target>
        </trans-unit>
        <trans-unit id="bddb5b99af343e18d1e354487a694b6e21ce5e1d" translate="yes" xml:space="preserve">
          <source>When a socket subscribes to a multicast group/port, it receives datagrams sent by other hosts to the group/port, as do all other members of the group and port. A socket relinquishes membership in a group by the leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) method. &lt;b&gt;Multiple MulticastSockets&lt;/b&gt; may subscribe to a multicast group and port concurrently, and they will all receive group datagrams.</source>
          <target state="translated">소켓이 멀티 캐스트 그룹 / 포트에 가입하면 그룹 및 포트의 다른 모든 구성원과 마찬가지로 다른 호스트가 그룹 / 포트로 보낸 데이터 그램을 수신합니다. 소켓은 leaveGroup (SocketAddress mcastaddr, NetworkInterface netIf) 메소드에 의해 그룹의 멤버십을 포기합니다. &lt;b&gt;다중 MulticastSocket&lt;/b&gt; 은 멀티 캐스트 그룹과 포트에 동시에 가입 할 수 있으며 모두 그룹 데이터 그램을 수신합니다.</target>
        </trans-unit>
        <trans-unit id="1542ee008a8e9f826667c4f42290447523aa89a6" translate="yes" xml:space="preserve">
          <source>When a stack is first created, it contains no items.</source>
          <target state="translated">스택을 처음 만들면 항목이 없습니다.</target>
        </trans-unit>
        <trans-unit id="801c6b334aa2567242a3870abc03d3d6d3033d36" translate="yes" xml:space="preserve">
          <source>When a stream ends it is automatically closed. To manually stop processing of events, close the stream by invoking the &lt;a href=&quot;#close()&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method. A stream can also be automatically closed in exceptional circumstances, for example if the JVM that is being monitored exits. To receive a notification in any of these occasions, use the &lt;a href=&quot;#onClose(java.lang.Runnable)&quot;&gt;&lt;code&gt;onClose(Runnable)&lt;/code&gt;&lt;/a&gt; method to register an action.</source>
          <target state="translated">스트림이 종료되면 자동으로 닫힙니다. 이벤트 처리를 수동으로 중지하려면 &lt;a href=&quot;#close()&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 스트림을 닫습니다 . 예를 들어 모니터링중인 JVM이 종료되는 경우와 같은 예외적 인 상황에서 스트림을 자동으로 닫을 수도 있습니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 이러한 경우 알림을 받으려면 &lt;a href=&quot;#onClose(java.lang.Runnable)&quot;&gt; &lt;code&gt;onClose(Runnable)&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 작업을 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="58680ac2a710c1c3ec572a26747c8ac4bf37321d" translate="yes" xml:space="preserve">
          <source>When a subclass is replacing objects it must insure that either a complementary substitution must be made during deserialization or that the substituted object is compatible with every field where the reference will be stored. Objects whose type is not a subclass of the type of the field or array element abort the serialization by raising an exception and the object is not be stored.</source>
          <target state="translated">서브 클래스가 객체를 교체 할 때는 역 직렬화 중에 보완적인 대체가 이루어져야하거나 대체 된 객체가 참조가 저장 될 모든 필드와 호환되는지 확인해야합니다. 유형이 필드 또는 배열 요소 유형의 서브 클래스가 아닌 오브젝트는 예외를 발생시켜 직렬화를 중단하고 오브젝트가 저장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4af4456165693adbeda480b45292ea0c955ff233" translate="yes" xml:space="preserve">
          <source>When a subclass is replacing objects it must insure that the substituted object is compatible with every field where the reference will be stored. Objects whose type is not a subclass of the type of the field or array element abort the serialization by raising an exception and the object is not be stored.</source>
          <target state="translated">서브 클래스가 객체를 교체 할 때는 대체 된 객체가 참조가 저장 될 모든 필드와 호환되는지 확인해야합니다. 유형이 필드 또는 배열 요소 유형의 서브 클래스가 아닌 오브젝트는 예외를 발생시켜 직렬화를 중단하고 오브젝트가 저장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e26d84240a67b35d599a0931c437428256b549e1" translate="yes" xml:space="preserve">
          <source>When a subclass overrides a &lt;code&gt;visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt; method, the new method can cause the enclosed elements to be scanned in the default way by calling &lt;code&gt;super.visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt;. In this fashion, the concrete visitor can control the ordering of traversal over the component elements with respect to the additional processing; for example, consistently calling &lt;code&gt;super.visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt; at the start of the overridden methods will yield a preorder traversal, etc. If the component elements should be traversed in some other order, instead of calling &lt;code&gt;super.visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt;, an overriding visit method should call &lt;code&gt;scan&lt;/code&gt; with the elements in the desired order.</source>
          <target state="translated">서브 클래스가 &lt;code&gt;visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt; 메소드를 대체 할 때 , 새 메소드는 &lt;code&gt;super.visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt; 를 호출하여 기본 방식으로 닫힌 요소를 스캔 할 수 있습니다 . 이러한 방식으로, 콘크리트 방문자는 추가 처리와 관련하여 구성 요소를 가로 지르는 순서를 제어 할 수있다. 예를 들어, 재정의 된 메소드의 시작 부분에서 지속적으로 &lt;code&gt;super.visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt; 를 호출 하면 사전 주문 순회 등이 발생합니다. &lt;code&gt;super.visit&lt;i&gt;XYZ&lt;/i&gt;&lt;/code&gt; 를 호출하는 대신 컴포넌트 요소를 다른 순서로 순회 해야하는 경우 대체 방문 메소드는 원하는 순서대로 요소를 &lt;code&gt;scan&lt;/code&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="1982004121a817c184d129a04a27e56f1d2b9c31" translate="yes" xml:space="preserve">
          <source>When a subclass overrides a &lt;code&gt;visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt; method, the new method can cause the enclosed elements to be scanned in the default way by calling &lt;code&gt;super.visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt;. In this fashion, the concrete visitor can control the ordering of traversal over the component elements with respect to the additional processing; for example, consistently calling &lt;code&gt;super.visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt; at the start of the overridden methods will yield a preorder traversal, etc. If the component elements should be traversed in some other order, instead of calling &lt;code&gt;super.visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt;, an overriding visit method should call &lt;code&gt;scan&lt;/code&gt; with the elements in the desired order.</source>
          <target state="translated">하위 클래스가 &lt;code&gt;visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt; 메서드를 재정의 할 때 새 메서드는 &lt;code&gt;super.visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt; 를 호출하여 포함 된 요소를 기본 방식으로 스캔하도록 할 수 있습니다 . 이러한 방식으로 구체적인 방문자는 추가 처리와 관련하여 구성 요소에 대한 순회 순서를 제어 할 수 있습니다. 예를 들어, 재정의 된 메서드의 시작 부분에서 지속적으로 &lt;code&gt;super.visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt; 를 호출 하면 사전 주문 순회 등이 생성됩니다. 구성 요소 요소를 다른 순서로 순회해야하는 경우 &lt;code&gt;super.visit&lt;i&gt;Xyz&lt;/i&gt;&lt;/code&gt; 를 호출하는 대신 재정의하는 방문 메서드는 다음을 호출해야합니다. 원하는 순서로 요소를 &lt;code&gt;scan&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9929247187f11924a98b560a646e45a4e67ae3c7" translate="yes" xml:space="preserve">
          <source>When a submitted task is cancelled before it is run, execution is suppressed. By default, such a cancelled task is not automatically removed from the work queue until its delay elapses. While this enables further inspection and monitoring, it may also cause unbounded retention of cancelled tasks. To avoid this, set &lt;a href=&quot;scheduledthreadpoolexecutor#setRemoveOnCancelPolicy-boolean-&quot;&gt;&lt;code&gt;setRemoveOnCancelPolicy(boolean)&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt;, which causes tasks to be immediately removed from the work queue at time of cancellation.</source>
          <target state="translated">제출 된 작업이 실행되기 전에 취소되면 실행이 억제됩니다. 기본적으로 이러한 취소 된 작업은 지연 시간이 경과 할 때까지 작업 대기열에서 자동으로 제거되지 않습니다. 이를 통해 추가 검사 및 모니터링을 수행 할 수 있지만 취소 된 작업을 무제한 보유 할 수도 있습니다. 이를 방지하려면 &lt;a href=&quot;scheduledthreadpoolexecutor#setRemoveOnCancelPolicy-boolean-&quot;&gt; &lt;code&gt;setRemoveOnCancelPolicy(boolean)&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오. 그러면 취소시 작업 큐에서 작업이 즉시 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="b44cdb1f4c54b9f9c38dd96a59f19c9b972ead75" translate="yes" xml:space="preserve">
          <source>When a submitted task is cancelled before it is run, execution is suppressed. By default, such a cancelled task is not automatically removed from the work queue until its delay elapses. While this enables further inspection and monitoring, it may also cause unbounded retention of cancelled tasks. To avoid this, use &lt;a href=&quot;#setRemoveOnCancelPolicy(boolean)&quot;&gt;&lt;code&gt;setRemoveOnCancelPolicy(boolean)&lt;/code&gt;&lt;/a&gt; to cause tasks to be immediately removed from the work queue at time of cancellation.</source>
          <target state="translated">제출 된 작업이 실행되기 전에 취소되면 실행이 억제됩니다. 기본적으로 이러한 취소 된 작업은 지연이 경과 할 때까지 작업 대기열에서 자동으로 제거되지 않습니다. 이를 통해 추가 검사 및 모니터링이 가능하지만 취소 된 작업을 무제한 보존 할 수도 있습니다. 이를 방지하려면 &lt;a href=&quot;#setRemoveOnCancelPolicy(boolean)&quot;&gt; &lt;code&gt;setRemoveOnCancelPolicy(boolean)&lt;/code&gt; &lt;/a&gt; 를 사용 하여 취소시 작업 대기열에서 작업을 즉시 제거합니다.</target>
        </trans-unit>
        <trans-unit id="10b74fcebd08424b7bb7bf29fe6e5a17d846f581" translate="yes" xml:space="preserve">
          <source>When a system exclusive message is read from a MIDI file, it always has a defined length. Data from a system exclusive message from a MIDI file should be stored in the data array of a &lt;code&gt;SysexMessage&lt;/code&gt; as follows: the system exclusive message status byte (0xF0 or 0xF7), all message data bytes, and finally the end-of-exclusive flag (0xF7). The length reported by the &lt;code&gt;SysexMessage&lt;/code&gt; object is therefore the length of the system exclusive data plus two: one byte for the status byte and one for the end-of-exclusive flag.</source>
          <target state="translated">시스템 독점 메시지는 MIDI 파일에서 읽을 때 항상 정의 된 길이를 갖습니다. MIDI 파일에서 시스템 독점 메시지의 데이터 는 다음과 같이 &lt;code&gt;SysexMessage&lt;/code&gt; 의 데이터 배열에 저장해야 합니다. 시스템 독점 메시지 상태 바이트 (0xF0 또는 0xF7), 모든 메시지 데이터 바이트 및 마지막으로 독점 종료 플래그 ( 0xF7). &lt;code&gt;SysexMessage&lt;/code&gt; 오브젝트에 의해보고되는 길이는 시스템 독점 데이터의 길이에 2를 더한 것입니다. 상태 바이트의 경우 1 바이트와 배타적 종료 플래그의 경우 1입니다.</target>
        </trans-unit>
        <trans-unit id="89b880bb7b0e20e4a94653fd28147b76b402fbeb" translate="yes" xml:space="preserve">
          <source>When a thread &lt;code&gt;T&lt;/code&gt; queries a class value in state &lt;code&gt;2N&lt;/code&gt;, the thread first attempts to initialize the class value to state &lt;code&gt;2N+1&lt;/code&gt; by invoking &lt;code&gt;computeValue&lt;/code&gt; and installing the resulting value.</source>
          <target state="translated">스레드 &lt;code&gt;T&lt;/code&gt; 가 상태 &lt;code&gt;2N&lt;/code&gt; 에서 클래스 값을 쿼리 할 때 스레드는 먼저 &lt;code&gt;computeValue&lt;/code&gt; 를 호출 하고 결과 값을 설치하여 클래스 값을 상태 &lt;code&gt;2N+1&lt;/code&gt; 로 초기화하려고 시도 합니다.</target>
        </trans-unit>
        <trans-unit id="d0bb71d68a413b1e3688231ebd3a0fe5821666fc" translate="yes" xml:space="preserve">
          <source>When a thread &lt;code&gt;T&lt;/code&gt; removes a class value in state &lt;code&gt;2N&lt;/code&gt;, nothing happens, since the class value is already uninitialized. Otherwise, the state is advanced atomically to &lt;code&gt;2N+1&lt;/code&gt;.</source>
          <target state="translated">스레드 &lt;code&gt;T&lt;/code&gt; 가 상태 &lt;code&gt;2N&lt;/code&gt; 에서 클래스 값을 제거 하면 클래스 값이 이미 초기화되지 않았으므로 아무 일도 일어나지 않습니다. 그렇지 않으면 상태는 원자 적으로 &lt;code&gt;2N+1&lt;/code&gt; 로 진행 됩니다.</target>
        </trans-unit>
        <trans-unit id="5f150b9d52841cfe078b29c41afb5606285d9203" translate="yes" xml:space="preserve">
          <source>When a thread is about to terminate due to an uncaught exception the Java Virtual Machine will query the thread for its &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; using &lt;a href=&quot;thread#getUncaughtExceptionHandler()&quot;&gt;&lt;code&gt;Thread.getUncaughtExceptionHandler()&lt;/code&gt;&lt;/a&gt; and will invoke the handler's &lt;code&gt;uncaughtException&lt;/code&gt; method, passing the thread and the exception as arguments. If a thread has not had its &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; explicitly set, then its &lt;code&gt;ThreadGroup&lt;/code&gt; object acts as its &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt;. If the &lt;code&gt;ThreadGroup&lt;/code&gt; object has no special requirements for dealing with the exception, it can forward the invocation to the &lt;a href=&quot;thread#getDefaultUncaughtExceptionHandler()&quot;&gt;default uncaught exception handler&lt;/a&gt;.</source>
          <target state="translated">포착되지 않은 예외로 인해 스레드가 종료 되려고 할 때 Java 가상 머신은 &lt;a href=&quot;thread#getUncaughtExceptionHandler()&quot;&gt; &lt;code&gt;Thread.getUncaughtExceptionHandler()&lt;/code&gt; &lt;/a&gt; 사용하여 해당 스레드의 &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; 를 쿼리 하고 핸들러의 &lt;code&gt;uncaughtException&lt;/code&gt; 메소드를 호출 하여 스레드와 예외를 인수로 전달합니다. 스레드에 &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; 가 명시 적으로 설정 되지 않은 경우 해당 &lt;code&gt;ThreadGroup&lt;/code&gt; 객체는 &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; 역할을합니다 . 경우 &lt;code&gt;ThreadGroup&lt;/code&gt; 오브젝트가 예외를 취급하는 특수한 요구 사항이 없습니다, 그것은에 호출을 전달할 수 있습니다 &lt;a href=&quot;thread#getDefaultUncaughtExceptionHandler()&quot;&gt;기본 캐치되지 않는 예외 핸들러를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="77fe3f278ecb8fc0ec8c3db5bded17a3ac83c0e0" translate="yes" xml:space="preserve">
          <source>When a thread is about to terminate due to an uncaught exception the Java Virtual Machine will query the thread for its &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; using &lt;a href=&quot;thread#getUncaughtExceptionHandler--&quot;&gt;&lt;code&gt;Thread.getUncaughtExceptionHandler()&lt;/code&gt;&lt;/a&gt; and will invoke the handler's &lt;code&gt;uncaughtException&lt;/code&gt; method, passing the thread and the exception as arguments. If a thread has not had its &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; explicitly set, then its &lt;code&gt;ThreadGroup&lt;/code&gt; object acts as its &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt;. If the &lt;code&gt;ThreadGroup&lt;/code&gt; object has no special requirements for dealing with the exception, it can forward the invocation to the &lt;a href=&quot;thread#getDefaultUncaughtExceptionHandler--&quot;&gt;default uncaught exception handler&lt;/a&gt;.</source>
          <target state="translated">포착되지 않은 예외로 인해 스레드가 종료 되려고하면 Java Virtual Machine은 &lt;a href=&quot;thread#getUncaughtExceptionHandler--&quot;&gt; &lt;code&gt;Thread.getUncaughtExceptionHandler()&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; 에 대해 스레드를 조회 하고 처리기의 &lt;code&gt;uncaughtException&lt;/code&gt; 메소드를 호출 하여 스레드와 예외를 인수로 전달합니다. 스레드에 &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; 가 명시 적으로 설정 되어 있지 않으면 &lt;code&gt;ThreadGroup&lt;/code&gt; 객체가 &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt; 역할을합니다 . 경우 &lt;code&gt;ThreadGroup&lt;/code&gt; 오브젝트가 예외를 취급하는 특수한 요구 사항이 없습니다, 그것은에 호출을 전달할 수 있습니다 &lt;a href=&quot;thread#getDefaultUncaughtExceptionHandler--&quot;&gt;기본 캐치되지 않는 예외 핸들러를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b6517f9211529a6ef5c79a7f3adfdb2b5c1cfe48" translate="yes" xml:space="preserve">
          <source>When a thread is blocked in &lt;a href=&quot;connection#readPacket()&quot;&gt;&lt;code&gt;readPacket&lt;/code&gt;&lt;/a&gt; waiting for packet from a target VM the &lt;a href=&quot;connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; may be closed asynchronous by another thread invokving the &lt;a href=&quot;connection#close()&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. When this arises the thread in readPacket will throw this exception. Similiarly when a thread is blocked in &lt;a href=&quot;connection#writePacket(byte%5B%5D)&quot;&gt;&lt;code&gt;Connection.writePacket(byte[])&lt;/code&gt;&lt;/a&gt; the Connection may be closed. When this occurs the thread in writePacket will throw this exception.</source>
          <target state="translated">대상 VM에서 패킷을 기다리는 &lt;a href=&quot;connection#readPacket()&quot;&gt; &lt;code&gt;readPacket&lt;/code&gt; &lt;/a&gt; 에서 스레드가 차단 되면 &lt;a href=&quot;connection#close()&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드를 호출하는 다른 스레드에 의해 &lt;a href=&quot;connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt; 이 비동기식으로 닫힐 수 있습니다 . 이것이 발생하면 readPacket의 스레드가이 예외를 발생시킵니다. 유사하게 &lt;a href=&quot;connection#writePacket(byte%5B%5D)&quot;&gt; &lt;code&gt;Connection.writePacket(byte[])&lt;/code&gt; &lt;/a&gt; 에서 스레드가 차단 되면 Connection이 닫힐 수 있습니다. 이것이 발생하면 writePacket의 스레드가이 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="895317443968ac47f3f92d75cb96a37c77319964" translate="yes" xml:space="preserve">
          <source>When a three part address is specified, the last part is interpreted as a 16-bit quantity and placed in the right most two bytes of the network address. This makes the three part address format convenient for specifying Class B net- work addresses as 128.net.host.</source>
          <target state="translated">3 개의 부품 주소가 지정되면 마지막 부품은 16 비트 수량으로 해석되어 네트워크 주소의 가장 오른쪽 2 바이트에 배치됩니다. 따라서 클래스 B 네트워크 주소를 128.net.host로 지정할 때 세 부분 주소 형식이 편리합니다.</target>
        </trans-unit>
        <trans-unit id="55c955456f3e00fb19bba01a0a16d6dc85d4343f" translate="yes" xml:space="preserve">
          <source>When a toolkit-modal dialog is shown from an applet, it blocks all other applets in the browser. When launching applications from Java Web Start, its windows (such as the security dialog) may also be blocked by toolkit-modal dialogs, shown from these applications.</source>
          <target state="translated">툴킷-모달 대화 상자가 애플릿에서 표시되면 브라우저에서 다른 모든 애플릿을 차단합니다. Java Web Start에서 응용 프로그램을 시작할 때 해당 창 (예 : 보안 대화 상자)도 이러한 응용 프로그램에서 표시되는 툴킷 모달 대화 상자에 의해 차단 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29a6c60ea1ad71509b0284da02c6071f09ce9c45" translate="yes" xml:space="preserve">
          <source>When a two part address is supplied, the last part is interpreted as a 24-bit quantity and placed in the right most three bytes of the network address. This makes the two part address format convenient for specifying Class A network addresses as net.host.</source>
          <target state="translated">2 개의 부품 주소가 제공되면 마지막 부품은 24 비트 수량으로 해석되어 네트워크 주소의 가장 오른쪽 3 바이트에 배치됩니다. 따라서 클래스 A 네트워크 주소를 net.host로 지정하는 데 두 부분 주소 형식이 편리합니다.</target>
        </trans-unit>
        <trans-unit id="50fa67634b29d9a508bc8a6003503fb30f4c5d33" translate="yes" xml:space="preserve">
          <source>When a type map with an entry for the base type is supplied to the methods &lt;code&gt;getArray&lt;/code&gt; and &lt;code&gt;getResultSet&lt;/code&gt;, the mapping it contains will be used to map the elements of the &lt;code&gt;ARRAY&lt;/code&gt; value. If no type map is supplied, which would typically be the case, the connection's type map is used by default. If the connection's type map or a type map supplied to a method has no entry for the base type, the elements are mapped according to the standard mapping.</source>
          <target state="translated">기본 유형에 대한 항목이있는 유형 맵이 &lt;code&gt;getArray&lt;/code&gt; 및 &lt;code&gt;getResultSet&lt;/code&gt; 메소드에 제공되면 포함 된 맵핑이 &lt;code&gt;ARRAY&lt;/code&gt; 값 의 요소를 맵핑하는 데 사용됩니다 . 일반적으로 유형 맵이 제공되지 않으면 연결의 유형 맵이 기본적으로 사용됩니다. 연결의 유형 맵 또는 메소드에 제공된 유형 맵에 기본 유형에 대한 항목이없는 경우 요소는 표준 매핑에 따라 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="6aa8db231eb18f002bb271b220e13400b3ee853b" translate="yes" xml:space="preserve">
          <source>When a variable &lt;code&gt;{i}&lt;/code&gt; appears in a search filter, it indicates that the filter argument &lt;code&gt;filterArgs[i]&lt;/code&gt; is to be used in that place. Such variables may be used wherever an &lt;em&gt;attr&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;, or &lt;em&gt;matchingrule&lt;/em&gt; production appears in the filter grammar of RFC 2254, section 4. When a string-valued filter argument is substituted for a variable, the filter is interpreted as if the string were given in place of the variable, with any characters having special significance within filters (such as &lt;code&gt;'*'&lt;/code&gt;) having been escaped according to the rules of RFC 2254.</source>
          <target state="translated">변수 &lt;code&gt;{i}&lt;/code&gt; 가 검색 필터에 나타나면 필터 인수 &lt;code&gt;filterArgs[i]&lt;/code&gt; 가 해당 위치에서 사용됨을 나타냅니다 . 이러한 변수는 RFC 2254, 섹션 4의 필터 문법에 &lt;em&gt;attr&lt;/em&gt; , &lt;em&gt;value&lt;/em&gt; 또는 &lt;em&gt;matchingrule&lt;/em&gt; 생성이 나타날 때마다 사용될 수 있습니다 . 문자열 값 필터 인수가 변수로 대체되면 필터는 문자열이 다음과 같이 해석됩니다. RFC 2254의 규칙에 따라 필터 내에서 특별한 의미를 갖는 문자 (예 : &lt;code&gt;'*'&lt;/code&gt; )가 이스케이프 된 변수의 위치 .</target>
        </trans-unit>
        <trans-unit id="a223dab9f441fba936619f7975da0a97a57c63a7" translate="yes" xml:space="preserve">
          <source>When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter, it may be more practical to send it via a &lt;code&gt;java.io.InputStream&lt;/code&gt; object. A JDBC technology-enabled driver will read the data from the stream as needed until it reaches end-of-file. The driver will do any necessary conversion from ASCII to the database &lt;code&gt;CHAR&lt;/code&gt; format.</source>
          <target state="translated">매우 큰 ASCII 값이 &lt;code&gt;LONGVARCHAR&lt;/code&gt; 매개 변수에 입력 되면 &lt;code&gt;java.io.InputStream&lt;/code&gt; 객체 를 통해 전송하는 것이 더 실용적 일 수 있습니다 . JDBC 기술 사용 드라이버는 파일 끝에 도달 할 때까지 필요에 따라 스트림에서 데이터를 읽습니다. 드라이버는 ASCII에서 데이터베이스 &lt;code&gt;CHAR&lt;/code&gt; 형식으로 필요한 모든 변환을 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="fcd897e7054adc322a89f61811e83785269eb890" translate="yes" xml:space="preserve">
          <source>When a very large Unicode value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter, it may be more practical to send it via a &lt;code&gt;Reader&lt;/code&gt; object. A JDBC technology-enabled driver will read the data from the stream as needed until it reaches end-of-file. The driver will do any necessary conversion from Unicode to the database &lt;code&gt;CHAR&lt;/code&gt; format. The byte format of the Unicode stream must be Java UTF-8, as defined in the Java Virtual Machine Specification.</source>
          <target state="translated">&lt;code&gt;LONGVARCHAR&lt;/code&gt; 매개 변수에 매우 큰 유니 코드 값이 입력 되면 &lt;code&gt;Reader&lt;/code&gt; 개체 를 통해 보내는 것이 더 실용적 일 수 있습니다 . JDBC 기술 사용 드라이버는 파일 끝에 도달 할 때까지 필요에 따라 스트림에서 데이터를 읽습니다. 드라이버는 유니 코드에서 데이터베이스 &lt;code&gt;CHAR&lt;/code&gt; 형식으로 필요한 모든 변환을 수행 합니다. 유니 코드 스트림의 바이트 형식은 Java Virtual Machine 사양에 정의 된대로 Java UTF-8이어야합니다.</target>
        </trans-unit>
        <trans-unit id="1e04bc4facdf8d539c4270ddd0aa73a722158aa2" translate="yes" xml:space="preserve">
          <source>When a very large Unicode value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter, it may be more practical to send it via a &lt;code&gt;java.io.InputStream&lt;/code&gt; object. A JDBC technology-enabled driver will read the data from the stream as needed, until it reaches end-of-file. The driver will do any necessary conversion from Unicode to the database &lt;code&gt;CHAR&lt;/code&gt; format. The byte format of the Unicode stream must be Java UTF-8, as defined in the Java Virtual Machine Specification.</source>
          <target state="translated">매우 큰 유니 코드 값이 &lt;code&gt;LONGVARCHAR&lt;/code&gt; 매개 변수에 입력 되면 &lt;code&gt;java.io.InputStream&lt;/code&gt; 객체 를 통해 보내는 것이 더 실용적 일 수 있습니다 . JDBC 기술 사용 드라이버는 파일 끝에 도달 할 때까지 필요에 따라 스트림에서 데이터를 읽습니다. 드라이버는 유니 코드에서 데이터베이스 &lt;code&gt;CHAR&lt;/code&gt; 형식으로 필요한 모든 변환을 수행 합니다. 유니 코드 스트림의 바이트 형식은 Java Virtual Machine 사양에 정의 된대로 Java UTF-8이어야합니다.</target>
        </trans-unit>
        <trans-unit id="adc578dc87370a608ed5a2be5460fe895888ac7d" translate="yes" xml:space="preserve">
          <source>When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt; parameter, it may be more practical to send it via a &lt;code&gt;java.io.InputStream&lt;/code&gt; object. A JDBC technology-enabled driver will read the data from the stream as needed until it reaches end-of-file.</source>
          <target state="translated">&lt;code&gt;LONGVARBINARY&lt;/code&gt; 매개 변수에 매우 큰 이진 값이 입력 되면 &lt;code&gt;java.io.InputStream&lt;/code&gt; 객체 를 통해 전송하는 것이 더 실용적 일 수 있습니다 . JDBC 기술 사용 드라이버는 파일 끝에 도달 할 때까지 필요에 따라 스트림에서 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="e2c2469b19a3494bf3f5739b9534978d0c5455a7" translate="yes" xml:space="preserve">
          <source>When adding providers to the cache, the &lt;a href=&quot;serviceloader#iterator--&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; processes resources in the order that the &lt;a href=&quot;../lang/classloader#getResources-java.lang.String-&quot;&gt;&lt;code&gt;ClassLoader.getResources(String)&lt;/code&gt;&lt;/a&gt; method finds the service configuration files.</source>
          <target state="translated">캐시에 제공자를 추가 할 때 &lt;a href=&quot;serviceloader#iterator--&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../lang/classloader#getResources-java.lang.String-&quot;&gt; &lt;code&gt;ClassLoader.getResources(String)&lt;/code&gt; &lt;/a&gt; 메소드가 서비스 구성 파일을 찾는 순서대로 자원을 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="a3a63ad56f11301a43466ccd3853e7b3ff64e5a3" translate="yes" xml:space="preserve">
          <source>When all modules have been enumerated then a readability graph is computed, and in conjunction with the module exports and service use, checked for consistency.</source>
          <target state="translated">모든 모듈이 열거되면 가독성 그래프가 계산되고 모듈 내보내기 및 서비스 사용과 함께 일관성을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="bcd60d3bee845f9fdd7a82c5e0d643e282800575" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; is set, the callee will report all the errors found in sources to the handler. If the handler throws an exception, it will abort the schema compilation and the same exception will be thrown from this method. Also, after an error is reported to a handler, the callee is allowed to abort the further processing by throwing it. If an error handler is not set, the callee will throw the first error it finds in the sources.</source>
          <target state="translated">때 &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt; 설정되면, 수신자는 핸들러 소스에있는 모든 오류를보고합니다. 처리기가 예외를 throw하면 스키마 컴파일이 중단되고이 메서드에서 동일한 예외가 throw됩니다. 또한 오류가 핸들러에보고 된 후 호출 수신자는 오류를 발생시켜 추가 처리를 중단 할 수 있습니다. 오류 처리기가 설정되지 않은 경우 호출 수신자는 소스에서 찾은 첫 번째 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="bb2dce23419118f6b8331bfb0b7c1d8142491745" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;../inputsource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt; is used to provide an entity's character stream, this method returns the encoding provided in that input stream.</source>
          <target state="translated">때 &lt;a href=&quot;../inputsource&quot;&gt; &lt;code&gt;InputSource&lt;/code&gt; 를는&lt;/a&gt; 엔티티의 문자 스트림을 제공하기 위해 사용되며,이 방법은 입력 스트림에 제공된 부호화를 반환한다.</target>
        </trans-unit>
        <trans-unit id="4e81b728c5aff55890dffac2c0a02554a169937e" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;SSLSocket&lt;/code&gt; is first created, no handshaking is done so that applications may first set their communication preferences: what cipher suites to use, whether the socket should be in client or server mode, etc. However, security is always provided by the time that application data is sent over the connection.</source>
          <target state="translated">때 &lt;code&gt;SSLSocket&lt;/code&gt; 사용에 어떤 암호 스위트 소켓 그러나 보안은 항상 시간이에 의해 제공되는 클라이언트 또는 서버 모드 등에 있어야 여부 : 처음 생성되는 응용 프로그램은 먼저 통신 환경 설정을 할 수 있도록, 더 핸드 쉐이크가 수행되지 않습니다 애플리케이션 데이터는 연결을 통해 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="5c164b99953c48a40b73ea8b2b0ca7202f7ca056" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;XMLSignature&lt;/code&gt; containing this reference is generated, the specified &lt;code&gt;transforms&lt;/code&gt; (if non-null) are applied to the specified &lt;code&gt;result&lt;/code&gt;. The &lt;code&gt;Transforms&lt;/code&gt; element of the resulting &lt;code&gt;Reference&lt;/code&gt; element is set to the concatenation of the &lt;code&gt;appliedTransforms&lt;/code&gt; and &lt;code&gt;transforms&lt;/code&gt;.</source>
          <target state="translated">이 참조를 포함 하는 &lt;code&gt;XMLSignature&lt;/code&gt; 가 생성되면 지정된 &lt;code&gt;transforms&lt;/code&gt; (null이 아닌 경우)이 지정된 &lt;code&gt;result&lt;/code&gt; 적용됩니다 . 결과 &lt;code&gt;Reference&lt;/code&gt; 요소 의 &lt;code&gt;Transforms&lt;/code&gt; 요소 는 &lt;code&gt;appliedTransforms&lt;/code&gt; 및 &lt;code&gt;transforms&lt;/code&gt; 의 연결로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="bcaddb468356d4ee2035b39f238ba71251cf9ad5" translate="yes" xml:space="preserve">
          <source>When an Externalizable object is reconstructed, an instance is created using the public no-arg constructor, then the readExternal method called. Serializable objects are restored by reading them from an ObjectInputStream.</source>
          <target state="translated">Externalizable 객체가 재구성되면, 인수없는 public 생성자를 사용하여 인스턴스가 생성되고 readExternal 메소드가 호출됩니다. 직렬화 가능 오브젝트는 ObjectInputStream에서 읽음으로써 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="fb8f935efcf55f08e7d5d19a4cd9f7c5f2edf11a" translate="yes" xml:space="preserve">
          <source>When an MBean emits a notification, it considers each listener that has been added with &lt;a href=&quot;#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt;&lt;code&gt;addNotificationListener&lt;/code&gt;&lt;/a&gt; and not subsequently removed with &lt;a href=&quot;#removeNotificationListener(javax.management.NotificationListener)&quot;&gt;&lt;code&gt;removeNotificationListener&lt;/code&gt;&lt;/a&gt;. If a filter was provided with that listener, and if the filter's &lt;a href=&quot;notificationfilter#isNotificationEnabled(javax.management.Notification)&quot;&gt;&lt;code&gt;isNotificationEnabled&lt;/code&gt;&lt;/a&gt; method returns false, the listener is ignored. Otherwise, the listener's &lt;a href=&quot;notificationlistener#handleNotification(javax.management.Notification,java.lang.Object)&quot;&gt;&lt;code&gt;handleNotification&lt;/code&gt;&lt;/a&gt; method is called with the notification, as well as the handback object that was provided to &lt;code&gt;addNotificationListener&lt;/code&gt;.</source>
          <target state="translated">MBean이 알림을 생성 할 때 &lt;a href=&quot;#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt; &lt;code&gt;addNotificationListener&lt;/code&gt; &lt;/a&gt; 로 추가 된 후 &lt;a href=&quot;#removeNotificationListener(javax.management.NotificationListener)&quot;&gt; &lt;code&gt;removeNotificationListener&lt;/code&gt; 로&lt;/a&gt; 제거되지 않은 각 리스너를 고려합니다 . 해당 리스너와 함께 필터가 제공되고 필터의 &lt;a href=&quot;notificationfilter#isNotificationEnabled(javax.management.Notification)&quot;&gt; &lt;code&gt;isNotificationEnabled&lt;/code&gt; &lt;/a&gt; 메서드가 false를 반환하면 리스너는 무시됩니다. 그렇지 않으면 리스너의 &lt;a href=&quot;notificationlistener#handleNotification(javax.management.Notification,java.lang.Object)&quot;&gt; &lt;code&gt;handleNotification&lt;/code&gt; &lt;/a&gt; 메소드가 알림 및 &lt;code&gt;addNotificationListener&lt;/code&gt; 에 제공된 핸드백 객체와 함께 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="fa3ea13008a777f73a92e7a4bb586fabfda6d863" translate="yes" xml:space="preserve">
          <source>When an MBean emits a notification, it considers each listener that has been added with &lt;a href=&quot;notificationbroadcaster#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt;&lt;code&gt;addNotificationListener&lt;/code&gt;&lt;/a&gt; and not subsequently removed with &lt;a href=&quot;#removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt;&lt;code&gt;removeNotificationListener&lt;/code&gt;&lt;/a&gt;. If a filter was provided with that listener, and if the filter's &lt;a href=&quot;notificationfilter#isNotificationEnabled(javax.management.Notification)&quot;&gt;&lt;code&gt;isNotificationEnabled&lt;/code&gt;&lt;/a&gt; method returns false, the listener is ignored. Otherwise, the listener's &lt;a href=&quot;notificationlistener#handleNotification(javax.management.Notification,java.lang.Object)&quot;&gt;&lt;code&gt;handleNotification&lt;/code&gt;&lt;/a&gt; method is called with the notification, as well as the handback object that was provided to &lt;code&gt;addNotificationListener&lt;/code&gt;.</source>
          <target state="translated">MBean이 알림을 생성 할 때 &lt;a href=&quot;notificationbroadcaster#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt; &lt;code&gt;addNotificationListener&lt;/code&gt; &lt;/a&gt; 로 추가 된 후 &lt;a href=&quot;#removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt; &lt;code&gt;removeNotificationListener&lt;/code&gt; 로&lt;/a&gt; 제거되지 않은 각 리스너를 고려합니다 . 해당 리스너와 함께 필터가 제공되고 필터의 &lt;a href=&quot;notificationfilter#isNotificationEnabled(javax.management.Notification)&quot;&gt; &lt;code&gt;isNotificationEnabled&lt;/code&gt; &lt;/a&gt; 메서드가 false를 반환하면 리스너는 무시됩니다. 그렇지 않으면 리스너의 &lt;a href=&quot;notificationlistener#handleNotification(javax.management.Notification,java.lang.Object)&quot;&gt; &lt;code&gt;handleNotification&lt;/code&gt; &lt;/a&gt; 메소드가 알림 및 &lt;code&gt;addNotificationListener&lt;/code&gt; 에 제공된 핸드백 객체와 함께 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="45b4eddc256c7dd0ed23de01764919b7450154dc" translate="yes" xml:space="preserve">
          <source>When an MBean emits a notification, it considers each listener that has been added with &lt;a href=&quot;notificationbroadcaster#addNotificationListener-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt;&lt;code&gt;addNotificationListener&lt;/code&gt;&lt;/a&gt; and not subsequently removed with &lt;a href=&quot;notificationbroadcaster#removeNotificationListener-javax.management.NotificationListener-&quot;&gt;&lt;code&gt;removeNotificationListener&lt;/code&gt;&lt;/a&gt;. If a filter was provided with that listener, and if the filter's &lt;a href=&quot;notificationfilter#isNotificationEnabled-javax.management.Notification-&quot;&gt;&lt;code&gt;isNotificationEnabled&lt;/code&gt;&lt;/a&gt; method returns false, the listener is ignored. Otherwise, the listener's &lt;a href=&quot;notificationlistener#handleNotification-javax.management.Notification-java.lang.Object-&quot;&gt;&lt;code&gt;handleNotification&lt;/code&gt;&lt;/a&gt; method is called with the notification, as well as the handback object that was provided to &lt;code&gt;addNotificationListener&lt;/code&gt;.</source>
          <target state="translated">MBean가 통지를 &lt;a href=&quot;notificationbroadcaster#addNotificationListener-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt; &lt;code&gt;addNotificationListener&lt;/code&gt; &lt;/a&gt; , addNotificationListener 에 추가되어 나중에 &lt;a href=&quot;notificationbroadcaster#removeNotificationListener-javax.management.NotificationListener-&quot;&gt; &lt;code&gt;removeNotificationListener&lt;/code&gt; 로&lt;/a&gt; 제거되지 않은 각 리스너가 고려 됩니다 . 해당 리스너와 함께 필터가 제공되고 필터의 &lt;a href=&quot;notificationfilter#isNotificationEnabled-javax.management.Notification-&quot;&gt; &lt;code&gt;isNotificationEnabled&lt;/code&gt; &lt;/a&gt; 메소드가 false를 리턴하면 리스너가 무시됩니다. 그렇지 않으면 리스너의 &lt;a href=&quot;notificationlistener#handleNotification-javax.management.Notification-java.lang.Object-&quot;&gt; &lt;code&gt;handleNotification&lt;/code&gt; &lt;/a&gt; 메소드가 알림과 함께 &lt;code&gt;addNotificationListener&lt;/code&gt; 에 제공된 핸드백 오브젝트와 함께 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="b71b50e0adb800b8bc569793e796446befc75eb6" translate="yes" xml:space="preserve">
          <source>When an MBean emits a notification, it considers each listener that has been added with &lt;a href=&quot;notificationbroadcaster#addNotificationListener-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt;&lt;code&gt;addNotificationListener&lt;/code&gt;&lt;/a&gt; and not subsequently removed with &lt;a href=&quot;notificationemitter#removeNotificationListener-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt;&lt;code&gt;removeNotificationListener&lt;/code&gt;&lt;/a&gt;. If a filter was provided with that listener, and if the filter's &lt;a href=&quot;notificationfilter#isNotificationEnabled-javax.management.Notification-&quot;&gt;&lt;code&gt;isNotificationEnabled&lt;/code&gt;&lt;/a&gt; method returns false, the listener is ignored. Otherwise, the listener's &lt;a href=&quot;notificationlistener#handleNotification-javax.management.Notification-java.lang.Object-&quot;&gt;&lt;code&gt;handleNotification&lt;/code&gt;&lt;/a&gt; method is called with the notification, as well as the handback object that was provided to &lt;code&gt;addNotificationListener&lt;/code&gt;.</source>
          <target state="translated">MBean가 통지를 &lt;a href=&quot;notificationbroadcaster#addNotificationListener-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt; &lt;code&gt;addNotificationListener&lt;/code&gt; &lt;/a&gt; , addNotificationListener 에 추가되어 나중에 &lt;a href=&quot;notificationemitter#removeNotificationListener-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt; &lt;code&gt;removeNotificationListener&lt;/code&gt; 로&lt;/a&gt; 제거되지 않은 각 리스너가 고려 됩니다 . 해당 리스너와 함께 필터가 제공되고 필터의 &lt;a href=&quot;notificationfilter#isNotificationEnabled-javax.management.Notification-&quot;&gt; &lt;code&gt;isNotificationEnabled&lt;/code&gt; &lt;/a&gt; 메소드가 false를 리턴하면 리스너가 무시됩니다. 그렇지 않으면 리스너의 &lt;a href=&quot;notificationlistener#handleNotification-javax.management.Notification-java.lang.Object-&quot;&gt; &lt;code&gt;handleNotification&lt;/code&gt; &lt;/a&gt; 메소드가 알림과 함께 &lt;code&gt;addNotificationListener&lt;/code&gt; 에 제공된 핸드백 오브젝트와 함께 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="4a7fc36f9fbd29ea8d2c562e9942118b86a45c61" translate="yes" xml:space="preserve">
          <source>When an MBean is registered in an MBean Server, if it is of a subclass of &lt;a href=&quot;../../../../java.base/java/lang/classloader&quot;&gt;&lt;code&gt;ClassLoader&lt;/code&gt;&lt;/a&gt; and if it does not implement the interface &lt;a href=&quot;privateclassloader&quot;&gt;&lt;code&gt;PrivateClassLoader&lt;/code&gt;&lt;/a&gt;, it is added to the end of the MBean Server's &lt;code&gt;ClassLoaderRepository&lt;/code&gt;. If it is subsequently unregistered from the MBean Server, it is removed from the &lt;code&gt;ClassLoaderRepository&lt;/code&gt;.</source>
          <target state="translated">MBean이 MBean 서버에 등록 될 때 &lt;a href=&quot;../../../../java.base/java/lang/classloader&quot;&gt; &lt;code&gt;ClassLoader&lt;/code&gt; &lt;/a&gt; 의 서브 클래스이고 &lt;a href=&quot;privateclassloader&quot;&gt; &lt;code&gt;PrivateClassLoader&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현하지 않으면 MBean 서버의 &lt;code&gt;ClassLoaderRepository&lt;/code&gt; 끝에 추가됩니다 . 이후에 MBean 서버에서 등록이 해제되면 &lt;code&gt;ClassLoaderRepository&lt;/code&gt; 에서 제거됩니다 .</target>
        </trans-unit>
        <trans-unit id="fc7e40c74e30e9bdda780e2f49b9064de3f28184" translate="yes" xml:space="preserve">
          <source>When an MBean is registered in an MBean Server, if it is of a subclass of &lt;a href=&quot;../../../java/lang/classloader&quot;&gt;&lt;code&gt;ClassLoader&lt;/code&gt;&lt;/a&gt; and if it does not implement the interface &lt;a href=&quot;privateclassloader&quot;&gt;&lt;code&gt;PrivateClassLoader&lt;/code&gt;&lt;/a&gt;, it is added to the end of the MBean Server's &lt;code&gt;ClassLoaderRepository&lt;/code&gt;. If it is subsequently unregistered from the MBean Server, it is removed from the &lt;code&gt;ClassLoaderRepository&lt;/code&gt;.</source>
          <target state="translated">MBean가 MBean 서버에 등록 될 때, 그것이 그것이 &lt;a href=&quot;../../../java/lang/classloader&quot;&gt; &lt;code&gt;ClassLoader&lt;/code&gt; &lt;/a&gt; 의 서브 클래스에 있고 &lt;a href=&quot;privateclassloader&quot;&gt; &lt;code&gt;PrivateClassLoader&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현하지 않으면 MBean 서버의 &lt;code&gt;ClassLoaderRepository&lt;/code&gt; 의 끝에 추가됩니다 . 이후에 MBean Server에서 등록이 해제되면 &lt;code&gt;ClassLoaderRepository&lt;/code&gt; 에서 제거됩니다 .</target>
        </trans-unit>
        <trans-unit id="196aa3134ab9e8ce892612894f6293eb271a9ead" translate="yes" xml:space="preserve">
          <source>When an MBean is registered or unregistered in the MBean server a &lt;a href=&quot;mbeanservernotification&quot;&gt;&lt;code&gt;MBeanServerNotification&lt;/code&gt;&lt;/a&gt; Notification is emitted. To register an object as listener to MBeanServerNotifications you should call the MBean server method &lt;a href=&quot;#addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt;&lt;code&gt;addNotificationListener&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;ObjectName&lt;/code&gt; the &lt;code&gt;ObjectName&lt;/code&gt; of the &lt;a href=&quot;mbeanserverdelegate&quot;&gt;&lt;code&gt;MBeanServerDelegate&lt;/code&gt;&lt;/a&gt;. This &lt;code&gt;ObjectName&lt;/code&gt; is:</source>
          <target state="translated">MBean이 MBean 서버에 등록 또는 등록 해제되면 &lt;a href=&quot;mbeanservernotification&quot;&gt; &lt;code&gt;MBeanServerNotification&lt;/code&gt; &lt;/a&gt; 알림이 생성됩니다. MBeanServerNotification를에 청취자와 같은 객체를 등록하려면 당신은의 MBean 서버 메소드 호출해야 &lt;a href=&quot;#addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)&quot;&gt; &lt;code&gt;addNotificationListener&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;ObjectName&lt;/code&gt; &lt;code&gt;ObjectName&lt;/code&gt; 의 &lt;a href=&quot;mbeanserverdelegate&quot;&gt; &lt;code&gt;MBeanServerDelegate&lt;/code&gt; 를&lt;/a&gt; . 이 &lt;code&gt;ObjectName&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6757f09ba74310403e9527263bc5d5dd7e032018" translate="yes" xml:space="preserve">
          <source>When an MBean is registered or unregistered in the MBean server a &lt;a href=&quot;mbeanservernotification&quot;&gt;&lt;code&gt;MBeanServerNotification&lt;/code&gt;&lt;/a&gt; Notification is emitted. To register an object as listener to MBeanServerNotifications you should call the MBean server method &lt;a href=&quot;mbeanserver#addNotificationListener-javax.management.ObjectName-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt;&lt;code&gt;addNotificationListener&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;ObjectName&lt;/code&gt; the &lt;code&gt;ObjectName&lt;/code&gt; of the &lt;a href=&quot;mbeanserverdelegate&quot;&gt;&lt;code&gt;MBeanServerDelegate&lt;/code&gt;&lt;/a&gt;. This &lt;code&gt;ObjectName&lt;/code&gt; is:</source>
          <target state="translated">MBean이 MBean 서버에 등록 또는 등록 해제되면 &lt;a href=&quot;mbeanservernotification&quot;&gt; &lt;code&gt;MBeanServerNotification&lt;/code&gt; &lt;/a&gt; Notification이 생성됩니다. MBeanServerNotification를에 청취자와 같은 객체를 등록하려면 당신은의 MBean 서버 메소드 호출해야 &lt;a href=&quot;mbeanserver#addNotificationListener-javax.management.ObjectName-javax.management.NotificationListener-javax.management.NotificationFilter-java.lang.Object-&quot;&gt; &lt;code&gt;addNotificationListener&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;ObjectName&lt;/code&gt; &lt;code&gt;ObjectName&lt;/code&gt; 의 &lt;a href=&quot;mbeanserverdelegate&quot;&gt; &lt;code&gt;MBeanServerDelegate&lt;/code&gt; 를&lt;/a&gt; . 이 &lt;code&gt;ObjectName&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="182378d05279b361f0377c3dd82675fe9375ff7d" translate="yes" xml:space="preserve">
          <source>When an SSL handshake completes, new security parameters will have been established. Those parameters always include the security keys used to protect messages. They may also include parameters associated with a new &lt;em&gt;session&lt;/em&gt; such as authenticated peer identity and a new SSL cipher suite.</source>
          <target state="translated">SSL 핸드 셰이크가 완료되면 새로운 보안 매개 변수가 설정됩니다. 이러한 매개 변수에는 항상 메시지를 보호하는 데 사용되는 보안 키가 포함됩니다. 또한 인증 된 피어 ID 및 새 SSL 암호 제품군과 같은 새 &lt;em&gt;세션&lt;/em&gt; 과 관련된 매개 변수를 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8ab2123a1562813d9a5533055c9f0e64f556bdbf" translate="yes" xml:space="preserve">
          <source>When an action is performed, editing is ended.</source>
          <target state="translated">작업이 수행되면 편집이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="86ee98b1741c7d393fb679867d1afb4d7f15770b" translate="yes" xml:space="preserve">
          <source>When an agent is specified at JVM launch time this attribute specifies the agent class. That is, the class containing the &lt;code&gt;premain&lt;/code&gt; method. When an agent is specified at JVM launch time this attribute is required. If the attribute is not present the JVM will abort. Note: this is a class name, not a file name or path.</source>
          <target state="translated">JVM 시작 시간에 에이전트가 지정되면이 속성은 에이전트 클래스를 지정합니다. 즉, &lt;code&gt;premain&lt;/code&gt; 메서드를 포함하는 클래스 입니다. JVM 시작시 에이전트가 지정되면이 속성이 필요합니다. 속성이 없으면 JVM이 중단됩니다. 참고 : 이것은 파일 이름이나 경로가 아닌 클래스 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f644b84769be94f27ad2e7583fcb5ad584a687f8" translate="yes" xml:space="preserve">
          <source>When an applet is first created, an applet stub is attached to it using the applet's &lt;code&gt;setStub&lt;/code&gt; method. This stub serves as the interface between the applet and the browser environment or applet viewer environment in which the application is running.</source>
          <target state="translated">애플릿이 처음 작성 될 때 애플릿의 &lt;code&gt;setStub&lt;/code&gt; 메소드를 사용하여 애플릿 스텁이 첨부됩니다 . 이 스텁은 애플릿과 애플리케이션이 실행중인 브라우저 환경 또는 애플릿 뷰어 환경 간의 인터페이스 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="bc9d555379c259dbd7e0e693ef8d791db7a25111" translate="yes" xml:space="preserve">
          <source>When an application adds two or more &lt;code&gt;RowSet&lt;/code&gt; objects to a &lt;code&gt;JoinRowSet&lt;/code&gt; object, the order of the indexes in the array is particularly important. Each index of the array maps directly to the corresponding index of the previously added &lt;code&gt;RowSet&lt;/code&gt; object. If overlap or underlap occurs, the match column data is maintained in the event an additional &lt;code&gt;Joinable&lt;/code&gt; RowSet is added and needs to relate to the match column data. Therefore, applications can set multiple match columns in any order, but this order has a direct effect on the outcome of the &lt;code&gt;SQL&lt;/code&gt; JOIN.</source>
          <target state="translated">응용 프로그램이 둘 이상의 &lt;code&gt;RowSet&lt;/code&gt; 객체를 &lt;code&gt;JoinRowSet&lt;/code&gt; 객체에 추가 할 때 배열의 인덱스 순서가 특히 중요합니다. 배열의 각 인덱스는 이전에 추가 된 &lt;code&gt;RowSet&lt;/code&gt; 개체 의 해당 인덱스에 직접 매핑됩니다 . 오버랩 또는 언더 랩이 발생하면 추가 &lt;code&gt;Joinable&lt;/code&gt; RowSet이 추가되고 일치 열 데이터와 관련되어야하는 경우 일치 열 데이터가 유지됩니다. 따라서 애플리케이션은 임의의 순서로 여러 일치 열을 설정할 수 있지만이 순서는 &lt;code&gt;SQL&lt;/code&gt; JOIN 의 결과에 직접적인 영향을줍니다 .</target>
        </trans-unit>
        <trans-unit id="6004d4830cb9cc2c843dbf654b352672ce73e9de" translate="yes" xml:space="preserve">
          <source>When an application asks to place a character at the position (</source>
          <target state="translated">응용 프로그램에서 위치 (</target>
        </trans-unit>
        <trans-unit id="9e03b89ff80e4bbb4d4255c8faad4eca56a28340" translate="yes" xml:space="preserve">
          <source>When an application calls a method that changes a row, such as the &lt;code&gt;CachedRowSet&lt;/code&gt; methods &lt;code&gt;insertRow&lt;/code&gt;, &lt;code&gt;updateRow&lt;/code&gt;, or &lt;code&gt;deleteRow&lt;/code&gt;, that method calls &lt;code&gt;notifyRowChanged&lt;/code&gt; internally. An application &lt;b&gt;should&lt;/b&gt; never invoke this method directly.</source>
          <target state="translated">애플리케이션이 &lt;code&gt;CachedRowSet&lt;/code&gt; 메소드 &lt;code&gt;insertRow&lt;/code&gt; , &lt;code&gt;updateRow&lt;/code&gt; 또는 &lt;code&gt;deleteRow&lt;/code&gt; 와 같이 행을 변경하는 메소드를 호출하면 해당 메소드는 내부적으로 &lt;code&gt;notifyRowChanged&lt;/code&gt; 를 호출합니다 . 응용 프로그램 &lt;b&gt;은&lt;/b&gt; 이 메서드를 직접 호출 &lt;b&gt;해서는&lt;/b&gt; 안됩니다.</target>
        </trans-unit>
        <trans-unit id="c0cfa980c0a07be7b7ee79a3cef57eca20e01cc7" translate="yes" xml:space="preserve">
          <source>When an application calls a method to move the cursor, that method moves the cursor and then calls this method internally. An application &lt;b&gt;should&lt;/b&gt; never invoke this method directly.</source>
          <target state="translated">응용 프로그램이 커서를 이동하는 메서드를 호출하면 해당 메서드가 커서를 이동 한 다음이 메서드를 내부적으로 호출합니다. 응용 프로그램 &lt;b&gt;은&lt;/b&gt; 이 메서드를 직접 호출 &lt;b&gt;해서는&lt;/b&gt; 안됩니다.</target>
        </trans-unit>
        <trans-unit id="d78e161e7c07f3b2a15255e1f4967a9555bee575" translate="yes" xml:space="preserve">
          <source>When an application calls methods that change the entire contents of the &lt;code&gt;RowSet&lt;/code&gt; object, such as the &lt;code&gt;CachedRowSet&lt;/code&gt; methods &lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;populate&lt;/code&gt;, &lt;code&gt;restoreOriginal&lt;/code&gt;, or &lt;code&gt;release&lt;/code&gt;, that method calls &lt;code&gt;notifyRowSetChanged&lt;/code&gt; internally (either directly or indirectly). An application &lt;b&gt;should&lt;/b&gt; never invoke this method directly.</source>
          <target state="translated">응용 프로그램 이 &lt;code&gt;CachedRowSet&lt;/code&gt; 메서드 &lt;code&gt;execute&lt;/code&gt; , &lt;code&gt;populate&lt;/code&gt; , &lt;code&gt;restoreOriginal&lt;/code&gt; 또는 &lt;code&gt;release&lt;/code&gt; 와 같이 &lt;code&gt;RowSet&lt;/code&gt; 객체 의 전체 내용을 변경 하는 메서드를 호출하면 해당 메서드는 내부적으로 (직접 또는 간접적으로) &lt;code&gt;notifyRowSetChanged&lt;/code&gt; 를 호출합니다 . 응용 프로그램 &lt;b&gt;은&lt;/b&gt; 이 메서드를 직접 호출 &lt;b&gt;해서는&lt;/b&gt; 안됩니다.&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a36226b3193ab064f255bcf6893a6f62f93d1f4e" translate="yes" xml:space="preserve">
          <source>When an application calls the method &lt;code&gt;DataSource.getConnection&lt;/code&gt;, it gets back a &lt;code&gt;Connection&lt;/code&gt; object. If connection pooling is being done, that &lt;code&gt;Connection&lt;/code&gt; object is actually a handle to a &lt;code&gt;PooledConnection&lt;/code&gt; object, which is a physical connection.</source>
          <target state="translated">애플리케이션이 &lt;code&gt;DataSource.getConnection&lt;/code&gt; 메소드를 호출하면 &lt;code&gt;Connection&lt;/code&gt; 객체를 다시 가져옵니다 . 연결 풀링이 수행되는 경우 해당 &lt;code&gt;Connection&lt;/code&gt; 개체는 실제로 물리적 연결 인 &lt;code&gt;PooledConnection&lt;/code&gt; 개체에 대한 핸들 입니다.</target>
        </trans-unit>
        <trans-unit id="7d4d70ec9b9f3f954ef0f33460a4d65e403bee71" translate="yes" xml:space="preserve">
          <source>When an application calls the method &lt;code&gt;PreparedStatement.setObject&lt;/code&gt;, the driver checks to see whether the value to be written is a UDT with a custom mapping. If it is, there will be an entry in a type map containing the &lt;code&gt;Class&lt;/code&gt; object for the class that implements &lt;code&gt;SQLData&lt;/code&gt; for this UDT. If the value to be written is an instance of &lt;code&gt;SQLData&lt;/code&gt;, the driver will create an instance of &lt;code&gt;SQLOutputImpl&lt;/code&gt; and pass it to the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;. The method &lt;code&gt;writeSQL&lt;/code&gt; in turn calls the appropriate &lt;code&gt;SQLOutputImpl.writeXXX&lt;/code&gt; methods to write data from the &lt;code&gt;SQLData&lt;/code&gt; object to the &lt;code&gt;SQLOutputImpl&lt;/code&gt; output stream as the representation of an SQL user-defined type.</source>
          <target state="translated">애플리케이션이 &lt;code&gt;PreparedStatement.setObject&lt;/code&gt; 메서드를 호출하면 드라이버는 기록 될 값이 사용자 지정 매핑이있는 UDT인지 확인합니다. 그럴 경우이 UDT에 대해 &lt;code&gt;SQLData&lt;/code&gt; 를 구현하는 클래스에 대한 &lt;code&gt;Class&lt;/code&gt; 개체를 포함하는 유형 맵에 항목이 있습니다 . 기록 할 값이 &lt;code&gt;SQLData&lt;/code&gt; 인스턴스 인 경우 드라이버는 &lt;code&gt;SQLOutputImpl&lt;/code&gt; 인스턴스를 만들어 &lt;code&gt;SQLData.writeSQL&lt;/code&gt; 메서드에 전달합니다 . 메소드 &lt;code&gt;writeSQL&lt;/code&gt; 차례로 적절한 호출 &lt;code&gt;SQLOutputImpl.writeXXX&lt;/code&gt; 의 로부터 쓰기 데이터 방법 &lt;code&gt;SQLData&lt;/code&gt; 받는 객체 &lt;code&gt;SQLOutputImpl&lt;/code&gt; 를 SQL 사용자 정의 유형의 표현으로 출력 스트림.</target>
        </trans-unit>
        <trans-unit id="b7f5bb0538901d5f24c63eabe24a7b4f807abe0b" translate="yes" xml:space="preserve">
          <source>When an application calls the method &lt;code&gt;PreparedStatement.setObject&lt;/code&gt;, the driver checks to see whether the value to be written is a UDT with a custom mapping. If it is, there will be an entry in a type map containing the Class object for the class that implements &lt;code&gt;SQLData&lt;/code&gt; for this UDT. If the value to be written is an instance of &lt;code&gt;SQLData&lt;/code&gt;, the driver will create an instance of &lt;code&gt;SQLOutputImpl&lt;/code&gt; and pass it to the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;. The method &lt;code&gt;writeSQL&lt;/code&gt; in turn calls the appropriate &lt;code&gt;SQLOutputImpl&lt;/code&gt; writer methods to write data from the &lt;code&gt;SQLData&lt;/code&gt; object to the &lt;code&gt;SQLOutputImpl&lt;/code&gt; output stream as the representation of an SQL user-defined type.</source>
          <target state="translated">애플리케이션이 &lt;code&gt;PreparedStatement.setObject&lt;/code&gt; 메서드를 호출하면 드라이버는 기록 될 값이 사용자 지정 매핑이있는 UDT인지 확인합니다. 그럴 경우이 UDT에 대해 &lt;code&gt;SQLData&lt;/code&gt; 를 구현하는 클래스에 대한 클래스 개체를 포함하는 유형 맵에 항목이 있습니다 . 기록 할 값이 &lt;code&gt;SQLData&lt;/code&gt; 인스턴스 인 경우 드라이버는 &lt;code&gt;SQLOutputImpl&lt;/code&gt; 인스턴스를 만들어 &lt;code&gt;SQLData.writeSQL&lt;/code&gt; 메서드에 전달합니다 . &lt;code&gt;writeSQL&lt;/code&gt; 메소드 는 적절한 &lt;code&gt;SQLOutputImpl&lt;/code&gt; 기록기 메소드를 호출 하여 &lt;code&gt;SQLData&lt;/code&gt; 오브젝트에서 &lt;code&gt;SQLOutputImpl&lt;/code&gt; 로 데이터를 기록합니다. SQL 사용자 정의 유형의 표현으로 출력 스트림.</target>
        </trans-unit>
        <trans-unit id="547bc639ed55a09b200965d2bc5a9106a8333ba6" translate="yes" xml:space="preserve">
          <source>When an application closes a connection, it calls the &lt;code&gt;Connection&lt;/code&gt; method &lt;code&gt;close&lt;/code&gt;. When connection pooling is being done, the connection pool manager is notified because it has registered itself as a &lt;code&gt;ConnectionEventListener&lt;/code&gt; object using the &lt;code&gt;ConnectionPool&lt;/code&gt; method &lt;code&gt;addConnectionEventListener&lt;/code&gt;. The connection pool manager deactivates the handle to the &lt;code&gt;PooledConnection&lt;/code&gt; object and returns the &lt;code&gt;PooledConnection&lt;/code&gt; object to the pool of connections so that it can be used again. Thus, when an application closes its connection, the underlying physical connection is recycled rather than being closed.</source>
          <target state="translated">애플리케이션이 연결을 닫을 때 &lt;code&gt;Connection&lt;/code&gt; 메서드 &lt;code&gt;close&lt;/code&gt; 를 호출합니다 . 연결 풀링이 완료되면 연결 풀 관리자가 &lt;code&gt;ConnectionPool&lt;/code&gt; 메소드 &lt;code&gt;addConnectionEventListener&lt;/code&gt; 를 사용하여 &lt;code&gt;ConnectionEventListener&lt;/code&gt; 객체 로 등록 되었으므로 알림을받습니다 . 연결 풀 관리자는 &lt;code&gt;PooledConnection&lt;/code&gt; 개체에 대한 핸들을 비활성화하고 다시 사용할 수 있도록 &lt;code&gt;PooledConnection&lt;/code&gt; 개체를 연결 풀에 반환 합니다. 따라서 애플리케이션이 연결을 닫을 때 기본 물리적 연결이 닫히지 않고 재활용됩니다.</target>
        </trans-unit>
        <trans-unit id="a52c11dc01aed368f150065ba6a405d66f8451bf" translate="yes" xml:space="preserve">
          <source>When an application creates a new client socket, the socket implementation factory's &lt;code&gt;createSocketImpl&lt;/code&gt; method is called to create the actual socket implementation.</source>
          <target state="translated">응용 프로그램이 새 클라이언트 소켓 을 작성할 때 실제 소켓 구현을 작성하기 위해 소켓 구현 팩토리의 &lt;code&gt;createSocketImpl&lt;/code&gt; 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="5070d5027d76071608fcfd8560f9541c493b061d" translate="yes" xml:space="preserve">
          <source>When an application creates a new datagram socket, the socket implementation factory's &lt;code&gt;createDatagramSocketImpl&lt;/code&gt; method is called to create the actual datagram socket implementation.</source>
          <target state="translated">애플리케이션이 새 데이터 그램 소켓 을 작성할 때 실제 데이터 그램 소켓 구현을 작성하기 위해 소켓 구현 팩토리의 &lt;code&gt;createDatagramSocketImpl&lt;/code&gt; 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="53f882e0daa369f43672720af27805bcd63f9c59" translate="yes" xml:space="preserve">
          <source>When an application creates a new server socket, the socket implementation factory's &lt;code&gt;createSocketImpl&lt;/code&gt; method is called to create the actual socket implementation.</source>
          <target state="translated">응용 프로그램이 새 서버 소켓 을 작성할 때 실제 소켓 구현을 작성하기 위해 소켓 구현 팩토리의 &lt;code&gt;createSocketImpl&lt;/code&gt; 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="d3c0e2a071e7ad4e860991ae113034c7a8699231" translate="yes" xml:space="preserve">
          <source>When an application is deployed, it will generally have several codebase directories and JARs in its classpath. JNDI locates (using &lt;a href=&quot;../../../java.base/java/lang/classloader#getResources(java.lang.String)&quot;&gt;&lt;code&gt;ClassLoader.getResources()&lt;/code&gt;&lt;/a&gt;) all &lt;em&gt;application resource files&lt;/em&gt; named &lt;code&gt;jndi.properties&lt;/code&gt; in the classpath. In addition, if the Java installation directory contains a built-in properties file, typically &lt;code&gt;conf/jndi.properties&lt;/code&gt;, JNDI treats it as an additional application resource file. All of the properties contained in these files are placed into the environment of the initial context. This environment is then inherited by other contexts.</source>
          <target state="translated">애플리케이션이 배포되면 일반적으로 클래스 경로에 여러 개의 코드베이스 디렉토리와 JAR이 있습니다. JNDI는 클래스 경로에서 &lt;code&gt;jndi.properties&lt;/code&gt; 라는 이름의 모든 &lt;em&gt;애플리케이션 리소스 파일을&lt;/em&gt; 찾습니다 ( &lt;a href=&quot;../../../java.base/java/lang/classloader#getResources(java.lang.String)&quot;&gt; &lt;code&gt;ClassLoader.getResources()&lt;/code&gt; &lt;/a&gt; ) . 또한 Java 설치 디렉토리에 기본 제공 속성 파일 (일반적으로 &lt;code&gt;conf/jndi.properties&lt;/code&gt; )이 포함 된 경우 JNDI는이를 추가 응용 프로그램 리소스 파일로 처리합니다. 이러한 파일에 포함 된 모든 속성은 초기 컨텍스트의 환경에 배치됩니다. 이 환경은 다른 컨텍스트에서 상속됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6192da6041396e436b94b26592fc040462f804dd" translate="yes" xml:space="preserve">
          <source>When an application is deployed, it will generally have several codebase directories and JARs in its classpath. Similarly, when an applet is deployed, it will have a codebase and archives specifying where to find the applet's classes. JNDI locates (using &lt;a href=&quot;../../java/lang/classloader#getResources-java.lang.String-&quot;&gt;&lt;code&gt;&lt;code&gt;ClassLoader.getResources()&lt;/code&gt;&lt;/code&gt;&lt;/a&gt;) all &lt;em&gt;application resource files&lt;/em&gt; named &lt;code&gt;jndi.properties&lt;/code&gt; in the classpath. In addition, if the file</source>
          <target state="translated">응용 프로그램이 배포되면 일반적으로 클래스 경로에 여러 코드베이스 디렉터리와 JAR이 있습니다. 마찬가지로 애플릿이 배포되면 애플릿의 클래스를 찾을 위치를 지정하는 코드베이스 및 아카이브가 있습니다. JNDI는 클래스 경로에서 &lt;code&gt;jndi.properties&lt;/code&gt; 라는 모든 &lt;em&gt;애플리케이션 자원 파일을&lt;/em&gt; 찾습니다 ( &lt;a href=&quot;../../java/lang/classloader#getResources-java.lang.String-&quot;&gt; &lt;code&gt;&lt;code&gt;ClassLoader.getResources()&lt;/code&gt;&lt;/code&gt; &lt;/a&gt; ) . 또한 파일이&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca3e625936706dd988b4e97b8710fc50248f15ec" translate="yes" xml:space="preserve">
          <source>When an attribute list is supplied as part of a &lt;a href=&quot;documenthandler#startElement(java.lang.String,org.xml.sax.AttributeList)&quot;&gt;&lt;code&gt;startElement&lt;/code&gt;&lt;/a&gt; event, the list will return valid results only during the scope of the event; once the event handler returns control to the parser, the attribute list is invalid. To save a persistent copy of the attribute list, use the SAX1 &lt;a href=&quot;helpers/attributelistimpl&quot;&gt;&lt;code&gt;AttributeListImpl&lt;/code&gt;&lt;/a&gt; helper class.</source>
          <target state="translated">속성 목록이 &lt;a href=&quot;documenthandler#startElement(java.lang.String,org.xml.sax.AttributeList)&quot;&gt; &lt;code&gt;startElement&lt;/code&gt; &lt;/a&gt; 이벤트의 일부로 제공되면 목록은 이벤트 범위 동안에 만 유효한 결과를 반환합니다. 이벤트 핸들러가 파서에 제어를 반환하면 속성 목록이 유효하지 않습니다. 속성 목록의 영구 사본을 저장하려면 SAX1 &lt;a href=&quot;helpers/attributelistimpl&quot;&gt; &lt;code&gt;AttributeListImpl&lt;/code&gt; &lt;/a&gt; 도우미 클래스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ff3262456581061805ec48c0da1d47a0d84ee27" translate="yes" xml:space="preserve">
          <source>When an event is dispatched to a listener, the listener method (such as &lt;code&gt;objectChanged()&lt;/code&gt;) may be executed in a thread other than the one in which the call to &lt;code&gt;addNamingListener()&lt;/code&gt; was executed. The choice of which thread to use is made by the service provider. When an event is dispatched to multiple listeners, the service provider may choose (and is generally encouraged) to execute the listener methods concurrently in separate threads.</source>
          <target state="translated">이벤트가 리스너에 전달되면 리스너 메소드 (예 : &lt;code&gt;objectChanged()&lt;/code&gt; )가 &lt;code&gt;addNamingListener()&lt;/code&gt; 에 대한 호출이 실행 된 스레드 이외의 스레드에서 실행될 수 있습니다 . 사용할 스레드 선택은 서비스 공급자가 선택합니다. 이벤트가 여러 리스너로 디스패치 될 때 서비스 제공자는 리스너 메소드를 별도의 스레드에서 동시에 실행하도록 선택할 수 있습니다 (일반적으로 권장됩니다).</target>
        </trans-unit>
        <trans-unit id="c246ece3865225c2043f5d0d8ebe7428a4313f31" translate="yes" xml:space="preserve">
          <source>When an event is reported to indicate that a file in a watched directory has been modified then there is no guarantee that the program (or programs) that have modified the file have completed. Care should be taken to coordinate access with other programs that may be updating the file. The &lt;a href=&quot;../channels/filechannel&quot;&gt;&lt;code&gt;FileChannel&lt;/code&gt;&lt;/a&gt; class defines methods to lock regions of a file against access by other programs.</source>
          <target state="translated">감시 된 디렉토리의 파일이 수정되었음을 나타내는 이벤트가보고되면 파일을 수정 한 프로그램이 완료되었다는 보장이 없습니다. 파일을 업데이트하는 다른 프로그램과의 액세스를 조정하도록주의해야합니다. &lt;a href=&quot;../channels/filechannel&quot;&gt; &lt;code&gt;FileChannel&lt;/code&gt; &lt;/a&gt; 클래스는 다른 프로그램에 의한 액세스로부터 파일의 잠금 지역에 메소드를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="bf730b9455534606824acbf9cbbe082f2399a34d" translate="yes" xml:space="preserve">
          <source>When an event occurs on a &lt;code&gt;RowSet&lt;/code&gt; object, one of the &lt;code&gt;RowSetListener&lt;/code&gt; methods will be sent to all registered listeners to notify them of the event. An &lt;code&gt;Event&lt;/code&gt; object is supplied to the &lt;code&gt;RowSetListener&lt;/code&gt; method so that the listener can use it to find out which &lt;code&gt;RowSet&lt;/code&gt; object is the source of the event.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; 객체에서 이벤트가 발생 하면 &lt;code&gt;RowSetListener&lt;/code&gt; 메소드 중 하나가 등록 된 모든 리스너에게 전송되어 이벤트를 알립니다. &lt;code&gt;Event&lt;/code&gt; 객체는에 공급 &lt;code&gt;RowSetListener&lt;/code&gt; 리스너가있는 찾아 사용할 수 있도록 방법 &lt;code&gt;RowSet&lt;/code&gt; 객체가 이벤트의 소스입니다.</target>
        </trans-unit>
        <trans-unit id="46c3263910b048a89e5d5d0939bdd2c5ae531805" translate="yes" xml:space="preserve">
          <source>When an exception is thrown by a factory, the exception is passed on to the caller of &lt;code&gt;DirectoryManager.getStateToBind()&lt;/code&gt;. The search for other factories that may produce a non-null answer is halted. A factory should only throw an exception if it is sure that it is the only intended factory and that no other factories should be tried. If this factory cannot create an object using the arguments supplied, it should return null.</source>
          <target state="translated">팩토리에서 예외가 발생하면 &lt;code&gt;DirectoryManager.getStateToBind()&lt;/code&gt; 호출자에게 예외가 전달됩니다 . 널이 아닌 응답을 생성 할 수있는 다른 팩토리에 대한 검색이 중지됩니다. 팩토리가 유일한 팩토리이고 다른 팩토리를 시도해서는 안되는 경우에만 팩토리에서 예외를 처리해야합니다. 이 팩토리가 제공된 인수를 사용하여 객체를 만들 수 없으면 null을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="86e9ee1cb6edb165bdea53c864741fcfebb100c1" translate="yes" xml:space="preserve">
          <source>When an exception is thrown by a factory, the exception is passed on to the caller of &lt;code&gt;NamingManager.getStateToBind()&lt;/code&gt; and &lt;code&gt;DirectoryManager.getStateToBind()&lt;/code&gt;. The search for other factories that may produce a non-null answer is halted. A factory should only throw an exception if it is sure that it is the only intended factory and that no other factories should be tried. If this factory cannot create an object using the arguments supplied, it should return null.</source>
          <target state="translated">팩토리에서 예외가 발생하면 &lt;code&gt;NamingManager.getStateToBind()&lt;/code&gt; 및 &lt;code&gt;DirectoryManager.getStateToBind()&lt;/code&gt; 호출자에게 예외가 전달됩니다 . 널이 아닌 응답을 생성 할 수있는 다른 팩토리에 대한 검색이 중지됩니다. 팩토리가 유일한 팩토리이고 다른 팩토리를 시도해서는 안되는 경우에만 팩토리에서 예외를 처리해야합니다. 이 팩토리가 제공된 인수를 사용하여 객체를 만들 수 없으면 null을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="f619bd42e631fde289b18b2557593f0674f15c8e" translate="yes" xml:space="preserve">
          <source>When an exception is thrown by an object factory, the exception is passed on to the caller of &lt;code&gt;DirectoryManager.getObjectInstance()&lt;/code&gt;. The search for other factories that may produce a non-null answer is halted. An object factory should only throw an exception if it is sure that it is the only intended factory and that no other object factories should be tried. If this factory cannot create an object using the arguments supplied, it should return null.</source>
          <target state="translated">객체 팩토리에서 예외가 발생하면 &lt;code&gt;DirectoryManager.getObjectInstance()&lt;/code&gt; 호출자에게 예외가 전달됩니다 . 널이 아닌 응답을 생성 할 수있는 다른 팩토리에 대한 검색이 중지됩니다. 오브젝트 팩토리가 유일한 팩토리이고 다른 오브젝트 팩토리를 시도해서는 안되는 경우에만 오브젝트 팩토리가 예외를 처리해야합니다. 이 팩토리가 제공된 인수를 사용하여 객체를 만들 수 없으면 null을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="92d645b31af0488c8796e3e157fa1f6cd126e2c8" translate="yes" xml:space="preserve">
          <source>When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a &lt;a href=&quot;securedirectorystream&quot;&gt;&lt;code&gt;SecureDirectoryStream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">구현이 레이스없는 방식으로 실행되는 디렉토리의 항목에 대한 작업을 지원하면 반환 된 디렉토리 스트림은 &lt;a href=&quot;securedirectorystream&quot;&gt; &lt;code&gt;SecureDirectoryStream&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2052382560398859691564bf3c293b964fc894ad" translate="yes" xml:space="preserve">
          <source>When an input source is set (using the &lt;code&gt;setInput&lt;/code&gt; method), it may be marked as &quot;seek forward only&quot;. This setting means that images contained within the input source will only be read in order, possibly allowing the reader to avoid caching portions of the input containing data associated with images that have been read previously.</source>
          <target state="translated">입력 소스가 설정되면 ( &lt;code&gt;setInput&lt;/code&gt; 메소드를 사용하여 ) &quot;seek forward only&quot;로 표시 될 수 있습니다. 이 설정은 입력 소스에 포함 된 이미지가 순서 대로만 읽히므로 독자는 이전에 읽은 이미지와 관련된 데이터가 포함 된 입력의 일부를 캐싱하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="7d2fac9efec8951293a4b9ad29501c8bcc43c755" translate="yes" xml:space="preserve">
          <source>When an instance of this class is used as a delegate for the implementation of the BeanContext protocols (and its subprotocols) there exists a 'chicken and egg' problem during deserialization</source>
          <target state="translated">이 클래스의 인스턴스가 BeanContext 프로토콜 (및 그 서브 프로토콜)의 구현을위한 델리게이트로 사용될 때 deserialization 중에 'chicken and egg'문제가 있습니다</target>
        </trans-unit>
        <trans-unit id="f93de7fe2101ac2a970987b76df77b95b8fe1afa" translate="yes" xml:space="preserve">
          <source>When an interior node in the namespace tree has been renamed, the topmost node which is part of the listener's scope should used to generate a rename event. The extent to which this can be supported is provider-specific. For example, a service might generate rename notifications for all descendants of the changed interior node and the corresponding provider might not be able to prevent those notifications from being propagated to the listeners.</source>
          <target state="translated">네임 스페이스 트리의 내부 노드 이름이 바뀌면 리스너 범위의 일부인 최상위 노드가 이름 바꾸기 이벤트를 생성하는 데 사용해야합니다. 이를 지원할 수있는 범위는 공급자마다 다릅니다. 예를 들어, 서비스는 변경된 내부 노드의 모든 하위 항목에 대해 이름 바꾸기 알림을 생성 할 수 있으며 해당 제공자는 해당 알림이 리스너로 전파되는 것을 막을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fd4237ea9c386be63cd7b4f69745e762d3518611" translate="yes" xml:space="preserve">
          <source>When an item is selected or deselected by the user, AWT sends an instance of &lt;code&gt;ItemEvent&lt;/code&gt; to the list. When the user double-clicks on an item in a scrolling list, AWT sends an instance of &lt;code&gt;ActionEvent&lt;/code&gt; to the list following the item event. AWT also generates an action event when the user presses the return key while an item in the list is selected.</source>
          <target state="translated">사용자가 항목을 선택하거나 선택 취소하면 AWT는 &lt;code&gt;ItemEvent&lt;/code&gt; 인스턴스 를 목록으로 보냅니다 . 사용자가 스크롤 목록에서 항목을 두 번 클릭하면 AWT는 &lt;code&gt;ActionEvent&lt;/code&gt; 인스턴스를 항목 이벤트 다음에 오는 목록으로 보냅니다 . AWT는 목록의 항목이 선택되는 동안 사용자가 리턴 키를 누를 때도 조치 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e732ae7cab683d25453439abc7257c33de065d2b" translate="yes" xml:space="preserve">
          <source>When an item's state changes, editing is ended.</source>
          <target state="translated">항목의 상태가 변경되면 편집이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="fbb2b60ef4c108dabfab274ea6d643ccbd813a96" translate="yes" xml:space="preserve">
          <source>When an m-let text file is loaded, an instance of each MBean specified in the file is created and registered.</source>
          <target state="translated">m-let 텍스트 파일이로드되면 파일에 지정된 각 MBean의 인스턴스가 작성되고 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="a6d8aaee8e31c5a9c8176090117cbab7f1fb2776" translate="yes" xml:space="preserve">
          <source>When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used to create a thread, starting the thread causes the object's &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing thread.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; 인터페이스를 구현하는 객체 를 사용하여 스레드를 만드는 경우 스레드를 시작하면 개별적으로 실행되는 스레드에서 객체의 &lt;code&gt;run&lt;/code&gt; 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="d44aeda78b237a6dbd1402c72d9234eba39323f7" translate="yes" xml:space="preserve">
          <source>When an object is registered in the MBean Server using the &lt;code&gt;registerMBean&lt;/code&gt; or &lt;code&gt;createMBean&lt;/code&gt; methods of the &lt;a href=&quot;mbeanserver&quot;&gt;&lt;code&gt;MBeanServer&lt;/code&gt;&lt;/a&gt; interface, the object's class is examined to determine what type of MBean it is:</source>
          <target state="translated">&lt;a href=&quot;mbeanserver&quot;&gt; &lt;code&gt;MBeanServer&lt;/code&gt; &lt;/a&gt; 인터페이스 의 &lt;code&gt;registerMBean&lt;/code&gt; 또는 &lt;code&gt;createMBean&lt;/code&gt; 메소드를 사용하여 MBean 서버에 오브젝트를 등록 하면 오브젝트의 클래스가 MBean 유형을 판별하기 위해 검사됩니다.</target>
        </trans-unit>
        <trans-unit id="c2972251c7a28b4528fe63074ce4c9c1bf8739a3" translate="yes" xml:space="preserve">
          <source>When an object named &quot;x/y&quot; is subsequently deleted, the corresponding &lt;code&gt;NamingEvent&lt;/code&gt; (&lt;code&gt;evt&lt;/code&gt;) must contain:</source>
          <target state="translated">&quot;x / y&quot;라는 이름의 오브젝트가 이후에 삭제되면 해당하는 &lt;code&gt;NamingEvent&lt;/code&gt; ( &lt;code&gt;evt&lt;/code&gt; )에 다음이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="4d30c71c9ef35dac87516151638b387d22978a40" translate="yes" xml:space="preserve">
          <source>When an object of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt; is passed as an argument to an SQL statement, the JDBC driver calls the method &lt;code&gt;SQLData.getSQLType&lt;/code&gt; to determine the kind of SQL datum being passed to the database. The driver then creates an instance of &lt;code&gt;SQLOutput&lt;/code&gt; and passes it to the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;. The method &lt;code&gt;writeSQL&lt;/code&gt; in turn calls the appropriate &lt;code&gt;SQLOutput&lt;/code&gt;</source>
          <target state="translated">인터페이스 &lt;code&gt;SQLData&lt;/code&gt; 를 구현하는 클래스의 개체가 SQL 문에 인수로 전달되면 JDBC 드라이버는 &lt;code&gt;SQLData.getSQLType&lt;/code&gt; 메서드 를 호출 하여 데이터베이스에 전달되는 SQL 데이터의 종류를 결정합니다. 그런 다음 드라이버는 &lt;code&gt;SQLOutput&lt;/code&gt; 인스턴스를 만들고 &lt;code&gt;SQLData.writeSQL&lt;/code&gt; 메서드에 전달합니다 . &lt;code&gt;writeSQL&lt;/code&gt; 메소드 는 차례로 적절한 &lt;code&gt;SQLOutput&lt;/code&gt; 을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="918b1ed8da41a8cca49ec39767c9d3ef9075b75b" translate="yes" xml:space="preserve">
          <source>When an observable object is newly created, its set of observers is empty. Two observers are considered the same if and only if the &lt;code&gt;equals&lt;/code&gt; method returns true for them.</source>
          <target state="translated">관찰 가능한 객체가 새로 생성되면 관찰자 세트가 비어 있습니다. &lt;code&gt;equals&lt;/code&gt; 메소드가 true를 리턴 하는 경우에만 두 개의 옵저버가 동일한 것으로 간주 됩니다.</target>
        </trans-unit>
        <trans-unit id="784d4ec1dda97713a3424a2f8d9aa99d1febb449" translate="yes" xml:space="preserve">
          <source>When an observed attribute crosses the high threshold, if the &lt;em&gt;notify high&lt;/em&gt; flag is true, then a notification is sent. Subsequent crossings of the high threshold value will not trigger further notifications until the gauge value becomes less than or equal to the low threshold.</source>
          <target state="translated">관찰 된 속성이 상한 임계 값을 초과 할 때, &lt;em&gt;통지 상한&lt;/em&gt; 플래그가 참이면 통지가 전송됩니다. 이후에 높은 임계 값을 초과하면 게이지 값이 낮은 임계 값 이하가 될 때까지 추가 알림이 트리거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1f5d6ec3eb5a523cc7305bf106145613183ee461" translate="yes" xml:space="preserve">
          <source>When an observed attribute crosses the low threshold, if the &lt;em&gt;notify low&lt;/em&gt; flag is true, then a notification is sent. Subsequent crossings of the low threshold value will not trigger further notifications until the gauge value becomes greater than or equal to the high threshold.</source>
          <target state="translated">관찰 된 속성이 하한 임계 값을 초과 할 때 &lt;em&gt;알림 낮음&lt;/em&gt; 플래그가 true이면 알림이 전송됩니다. 이후에 낮은 임계 값을 초과하면 게이지 값이 높은 임계 값 이상이 될 때까지 추가 알림이 트리거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8376d748bc3d8b953550a26d5a316d63742f727e" translate="yes" xml:space="preserve">
          <source>When an output device is stopped, the device usually indicates its condition in human readable form locally at the device. A client can obtain more complete device status remotely by querying the printer's &lt;a href=&quot;printerstate&quot;&gt;&lt;code&gt;PrinterState&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;printerstatereasons&quot;&gt;&lt;code&gt;PrinterStateReasons&lt;/code&gt;&lt;/a&gt; attributes.</source>
          <target state="translated">출력 장치가 중지되면 장치는 일반적으로 장치에서 로컬로 사람이 읽을 수있는 형태로 상태를 나타냅니다. 클라이언트는 프린터의 &lt;a href=&quot;printerstate&quot;&gt; &lt;code&gt;PrinterState&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;printerstatereasons&quot;&gt; &lt;code&gt;PrinterStateReasons&lt;/code&gt; &lt;/a&gt; 속성 을 쿼리하여 원격으로보다 완전한 장치 상태를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="147224cc677f556536d5eca49857d3c86cec24ef" translate="yes" xml:space="preserve">
          <source>When associating an object to a key on a node using &lt;code&gt;Node.setUserData()&lt;/code&gt; the application can provide a handler that gets called when the node the object is associated to is being cloned, imported, or renamed.</source>
          <target state="translated">&lt;code&gt;Node.setUserData()&lt;/code&gt; 사용하여 객체를 노드의 키에 연결할 때 응용 프로그램은 객체가 연결된 노드가 복제, 가져 오기 또는 이름이 변경 될 때 호출되는 핸들러를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d8993fa1903e158d7bbd09f3a46e487c5d7d23f" translate="yes" xml:space="preserve">
          <source>When associating an object to a key on a node using &lt;code&gt;Node.setUserData()&lt;/code&gt; the application can provide a handler that gets called when the node the object is associated to is being cloned, imported, or renamed. This can be used by the application to implement various behaviors regarding the data it associates to the DOM nodes. This interface defines that handler.</source>
          <target state="translated">&lt;code&gt;Node.setUserData()&lt;/code&gt; 사용하여 객체를 노드의 키에 연결할 때 응용 프로그램은 객체가 연결된 노드가 복제, 가져 오기 또는 이름이 변경 될 때 호출되는 핸들러를 제공 할 수 있습니다. 이는 애플리케이션이 DOM 노드에 연결하는 데이터와 관련된 다양한 동작을 구현하는 데 사용할 수 있습니다. 이 인터페이스는 해당 핸들러를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="226cf009f96b2b42079ae33e7a64348a895c89af" translate="yes" xml:space="preserve">
          <source>When attaching to a target VM, using &lt;a href=&quot;attachingconnector#attach(java.util.Map)&quot;&gt;&lt;code&gt;attach&lt;/code&gt;&lt;/a&gt; this exception may be thrown if the connector supports a timeout &lt;a href=&quot;connector.argument&quot;&gt;&lt;code&gt;connector argument&lt;/code&gt;&lt;/a&gt;. Similiarly, when waiting to accept a connection from a target VM, using &lt;a href=&quot;listeningconnector#accept(java.util.Map)&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; this exception may be thrown if the connector supports a timeout connector argument when accepting.</source>
          <target state="translated">대상 VM에 &lt;a href=&quot;attachingconnector#attach(java.util.Map)&quot;&gt; &lt;code&gt;attach&lt;/code&gt; &lt;/a&gt; 때 커넥터가 제한 시간 &lt;a href=&quot;connector.argument&quot;&gt; &lt;code&gt;connector argument&lt;/code&gt; &lt;/a&gt; 지원하는 경우 attach 를 사용 하면이 예외가 발생할 수 있습니다 . 마찬가지로 대상 VM에서 연결을 수락하기 위해 대기 할 때 커넥터가 수락 할 때 시간 초과 커넥터 인수를 지원하면 &lt;a href=&quot;listeningconnector#accept(java.util.Map)&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt; 이 예외를 사용 하면 throw 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18f4b7b2881c180a5a41a1bfe21bf07fe45c228a" translate="yes" xml:space="preserve">
          <source>When automatic drag handling is enabled, most look and feels begin a drag-and-drop operation when the user presses the mouse button over the preview panel. Some look and feels might not support automatic drag and drop; they will ignore this property. You can work around such look and feels by modifying the component to directly call the &lt;code&gt;exportAsDrag&lt;/code&gt; method of a &lt;code&gt;TransferHandler&lt;/code&gt;.</source>
          <target state="translated">자동 드래그 처리가 활성화 된 경우 대부분의 룩앤필은 사용자가 미리보기 패널에서 마우스 버튼을 누를 때 드래그 앤 드롭 작업을 시작합니다. 일부 룩앤필은 자동 드래그 앤 드롭을 지원하지 않을 수 있습니다. 그들은이 속성을 무시합니다. &lt;code&gt;TransferHandler&lt;/code&gt; 의 &lt;code&gt;exportAsDrag&lt;/code&gt; 메서드 를 직접 호출하도록 구성 요소를 수정하여 이러한 모양과 느낌을 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a5f68a5a8fdb6dc2c715dafb047525f1aa4d5b6" translate="yes" xml:space="preserve">
          <source>When automatic drag handling is enabled, most look and feels begin a drag-and-drop operation whenever the user presses the mouse button over an item and then moves the mouse a few pixels. Setting this property to &lt;code&gt;true&lt;/code&gt; can therefore have a subtle effect on how selections behave.</source>
          <target state="translated">자동 드래그 처리가 활성화되면 대부분의 룩앤필은 사용자가 항목 위에 마우스 버튼을 누른 다음 마우스를 몇 픽셀 이동할 때마다 드래그 앤 드롭 작업을 시작합니다. 따라서이 속성을 &lt;code&gt;true&lt;/code&gt; 로 설정하면 선택이 작동하는 방식에 미묘한 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8eb0988bb2d24757a9d15f5c99e1e1f5bc8136ae" translate="yes" xml:space="preserve">
          <source>When automatic redirection occurs, the request method of the redirected request may be modified depending on the specific &lt;code&gt;30X&lt;/code&gt; status code, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7231&quot;&gt; RFC 7231&lt;/a&gt;. In addition, the &lt;code&gt;301&lt;/code&gt; and &lt;code&gt;302&lt;/code&gt; status codes cause a &lt;code&gt;POST&lt;/code&gt; request to be converted to a &lt;code&gt;GET&lt;/code&gt; in the redirected request.</source>
          <target state="translated">자동 리디렉션이 발생하면 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231&quot;&gt;RFC 7231에&lt;/a&gt; 지정된대로 특정 &lt;code&gt;30X&lt;/code&gt; 상태 코드 에 따라 리디렉션 된 요청의 요청 방법이 수정 될 수 있습니다 . 또한 &lt;code&gt;301&lt;/code&gt; 및 &lt;code&gt;302&lt;/code&gt; 상태 코드 는 리디렉션 된 요청에서 &lt;code&gt;POST&lt;/code&gt; 요청이 &lt;code&gt;GET&lt;/code&gt; 으로 변환되도록합니다 .</target>
        </trans-unit>
        <trans-unit id="f40895df8451d046636bb5b6689740f6972e5a85" translate="yes" xml:space="preserve">
          <source>When binding to an address and port number, the application can also specify an integer</source>
          <target state="translated">주소 및 포트 번호에 바인딩 할 때 응용 프로그램에서 정수를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf1414265b010571580fbf696282e71d50cfa5f8" translate="yes" xml:space="preserve">
          <source>When both &lt;code&gt;lockedMonitors&lt;/code&gt; and &lt;code&gt;lockedSynchronizers&lt;/code&gt; parameters are &lt;code&gt;false&lt;/code&gt;, it is equivalent to calling:</source>
          <target state="translated">두 경우 &lt;code&gt;lockedMonitors&lt;/code&gt; 및 &lt;code&gt;lockedSynchronizers&lt;/code&gt; 매개 변수는 &lt;code&gt;false&lt;/code&gt; , 그것을 호출하는 것과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="b0e8b092db7bbf9a9c972f6aa3306da587cceac0" translate="yes" xml:space="preserve">
          <source>When both the number of rows and the number of columns have been set to non-zero values, either by a constructor or by the &lt;code&gt;setRows&lt;/code&gt; and &lt;code&gt;setColumns&lt;/code&gt; methods, the number of columns specified is ignored. Instead, the number of columns is determined from the specified number of rows and the total number of components in the layout. So, for example, if three rows and two columns have been specified and nine components are added to the layout, they will be displayed as three rows of three columns. Specifying the number of columns affects the layout only when the number of rows is set to zero.</source>
          <target state="translated">생성 자나 &lt;code&gt;setRows&lt;/code&gt; 및 &lt;code&gt;setColumns&lt;/code&gt; 메소드에 의해 행 수와 열 수가 0이 아닌 값으로 설정되면 지정된 열 수가 무시됩니다. 대신 열 수는 지정된 행 수와 레이아웃의 총 구성 요소 수에 따라 결정됩니다. 예를 들어, 3 개의 행과 2 개의 열이 지정되고 9 개의 구성 요소가 레이아웃에 추가 된 경우 3 개 열의 3 개 행으로 표시됩니다. 열 수를 지정하면 행 수가 0으로 설정된 경우에만 레이아웃에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="cada624aa7d2a950cc7dd4e36586280cf654538a" translate="yes" xml:space="preserve">
          <source>When both this flag and the &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gsscontext#requestCredDeleg(boolean)&quot;&gt;&lt;code&gt;credentials delegation flag&lt;/code&gt;&lt;/a&gt; are true, delegation will be always tried. However, if the delegation policy does not permit delegation, the value of &lt;a href=&quot;#getDelegPolicyState()&quot;&gt;&lt;code&gt;getDelegPolicyState()&lt;/code&gt;&lt;/a&gt; will be false, even if delegation is performed successfully.</source>
          <target state="translated">이 플래그와 &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gsscontext#requestCredDeleg(boolean)&quot;&gt; &lt;code&gt;credentials delegation flag&lt;/code&gt; &lt;/a&gt; 가 모두 참이면 항상 위임이 시도됩니다. 그러나 위임 정책이 위임을 허용하지 않으면 위임이 성공적으로 수행 되더라도 &lt;a href=&quot;#getDelegPolicyState()&quot;&gt; &lt;code&gt;getDelegPolicyState()&lt;/code&gt; &lt;/a&gt; 값은 false가됩니다.</target>
        </trans-unit>
        <trans-unit id="3bb6d7fddd6b84f1b1c496762483d19e659acc05" translate="yes" xml:space="preserve">
          <source>When cached value was set.</source>
          <target state="translated">캐시 된 값이 설정된 경우</target>
        </trans-unit>
        <trans-unit id="045851de97f115ee864c6b5dbe8a118c8574969c" translate="yes" xml:space="preserve">
          <source>When called by the printing system the &lt;code&gt;Printable&lt;/code&gt; must inspect and honour the supplied PageFormat parameter as well as the page index. The format of the page to be drawn is specified by the supplied PageFormat. The size, orientation and imageable area of the page is therefore already determined and rendering must be within this imageable area. This is key to correct printing behaviour, and it has the implication that the client has the responsibility of tracking what content belongs on the specified page.</source>
          <target state="translated">인쇄 시스템에서 호출 할 때 &lt;code&gt;Printable&lt;/code&gt; 은 제공된 PageFormat 매개 변수와 페이지 색인을 검사하고 준수해야합니다. 그릴 페이지의 형식은 제공된 PageFormat에 의해 지정됩니다. 따라서 페이지의 크기, 방향 및 이미지 가능 영역은 이미 결정되어 있으며 렌더링은이 이미지 가능 영역 내에 있어야합니다. 이것은 올바른 인쇄 동작의 핵심이며 클라이언트가 지정된 페이지에 속한 콘텐츠를 추적 할 책임이 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="ce13d27b64835af608fbc58b333cc41ac2796b65" translate="yes" xml:space="preserve">
          <source>When called off the</source>
          <target state="translated">꺼질 때</target>
        </trans-unit>
        <trans-unit id="866ffa00bf7dcbeb92203e393cd8afd478ae5220" translate="yes" xml:space="preserve">
          <source>When called with &lt;a href=&quot;#invokeExact(java.lang.Object...)&quot;&gt;&lt;code&gt;invokeExact&lt;/code&gt;&lt;/a&gt;, the adapter invokes the target with no argument changes. (&lt;em&gt;Note:&lt;/em&gt; This behavior is different from a &lt;a href=&quot;#asCollector(java.lang.Class,int)&quot;&gt;fixed arity collector&lt;/a&gt;, since it accepts a whole array of indeterminate length, rather than a fixed number of arguments.)</source>
          <target state="translated">&lt;a href=&quot;#invokeExact(java.lang.Object...)&quot;&gt; &lt;code&gt;invokeExact&lt;/code&gt; &lt;/a&gt; 와 함께 호출되면 어댑터는 인수 변경없이 대상을 호출합니다. ( &lt;em&gt;참고 :&lt;/em&gt; 이 동작은 &lt;a href=&quot;#asCollector(java.lang.Class,int)&quot;&gt;고정 된 인수&lt;/a&gt; 개수가 아닌 불확실한 길이의 전체 배열을 받아들이 기 때문에 고정 arity 수집기 와 다릅니다 .)</target>
        </trans-unit>
        <trans-unit id="b53c0fffa0b51e47d71e7136baf9352bd22f9aa3" translate="yes" xml:space="preserve">
          <source>When called with &lt;a href=&quot;methodhandle#invokeExact-java.lang.Object...-&quot;&gt;&lt;code&gt;invokeExact&lt;/code&gt;&lt;/a&gt;, the adapter invokes the target with no argument changes. (&lt;em&gt;Note:&lt;/em&gt; This behavior is different from a &lt;a href=&quot;methodhandle#asCollector-java.lang.Class-int-&quot;&gt;fixed arity collector&lt;/a&gt;, since it accepts a whole array of indeterminate length, rather than a fixed number of arguments.)</source>
          <target state="translated">호출 할 때 &lt;a href=&quot;methodhandle#invokeExact-java.lang.Object...-&quot;&gt; &lt;code&gt;invokeExact&lt;/code&gt; &lt;/a&gt; , 어댑터는 인수없이 변경으로 목표를 호출합니다. ( &lt;em&gt;참고 :&lt;/em&gt; 이 동작은 고정 된 수의 인수가 아닌 불확정 한 길이의 전체 배열을 허용하므로 &lt;a href=&quot;methodhandle#asCollector-java.lang.Class-int-&quot;&gt;고정 된 arity 수집기&lt;/a&gt; 와 다릅니다 .)</target>
        </trans-unit>
        <trans-unit id="31883d2c4cae1cb71309d37302c9eb9553a801df" translate="yes" xml:space="preserve">
          <source>When called with plain, inexact &lt;a href=&quot;#invoke(java.lang.Object...)&quot;&gt;&lt;code&gt;invoke&lt;/code&gt;&lt;/a&gt;, if the caller type is the same as the adapter, the adapter invokes the target as with &lt;code&gt;invokeExact&lt;/code&gt;. (This is the normal behavior for &lt;code&gt;invoke&lt;/code&gt; when types match.)</source>
          <target state="translated">단순하고 정확하지 않은 &lt;a href=&quot;#invoke(java.lang.Object...)&quot;&gt; &lt;code&gt;invoke&lt;/code&gt; 로 호출&lt;/a&gt; 될 때 호출자 유형이 어댑터와 &lt;code&gt;invokeExact&lt;/code&gt; 어댑터는 invokeExact 와 마찬가지로 대상을 호출합니다 . (이것은 유형이 일치 할 때 &lt;code&gt;invoke&lt;/code&gt; 의 정상적인 동작입니다 .)</target>
        </trans-unit>
        <trans-unit id="4a0161ca009c0dbbc06ce2b6680929152732b54d" translate="yes" xml:space="preserve">
          <source>When called with plain, inexact &lt;a href=&quot;methodhandle#invoke-java.lang.Object...-&quot;&gt;&lt;code&gt;invoke&lt;/code&gt;&lt;/a&gt;, if the caller type is the same as the adapter, the adapter invokes the target as with &lt;code&gt;invokeExact&lt;/code&gt;. (This is the normal behavior for &lt;code&gt;invoke&lt;/code&gt; when types match.)</source>
          <target state="translated">일반 부정확 한 &lt;a href=&quot;methodhandle#invoke-java.lang.Object...-&quot;&gt; &lt;code&gt;invoke&lt;/code&gt; 로 호출&lt;/a&gt; 할 때 호출자 유형이 어댑터와 동일하면 어댑터는 &lt;code&gt;invokeExact&lt;/code&gt; 에서와 같이 대상을 호출합니다 . 유형이 일치 할 때 &lt;code&gt;invoke&lt;/code&gt; 대한 일반적인 동작입니다 .</target>
        </trans-unit>
        <trans-unit id="d2f5017e66f8dea9b28eb6f14ce79dfd0d322eb3" translate="yes" xml:space="preserve">
          <source>When called, indicates that compression should end with the current contents of the input buffer.</source>
          <target state="translated">호출되면 압축이 입력 버퍼의 현재 내용으로 끝나야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f8858e1ea3fd1c36363ba040b10db093a73798d1" translate="yes" xml:space="preserve">
          <source>When called, the adapter replaces a trailing array argument by the array's elements, each as its own argument to the target. (The order of the arguments is preserved.) They are converted pairwise by casting and/or unboxing to the types of the trailing parameters of the target. Finally the target is called. What the target eventually returns is returned unchanged by the adapter.</source>
          <target state="translated">호출되면 어댑터는 후행 배열 인수를 배열의 요소 (대상마다 고유 한 인수)로 대체합니다. (인수의 순서는 유지됩니다.) 대상의 후행 매개 변수 유형으로 캐스트 및 / 또는 언 박싱하여 쌍으로 변환됩니다. 마지막으로 대상이 호출됩니다. 대상이 결국 리턴하는 것은 어댑터에 의해 변경되지 않은 상태로 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="32698ba91a41a47b1415719cfb3ee4d88be1ebde" translate="yes" xml:space="preserve">
          <source>When called, the adapter replaces its trailing &lt;code&gt;arrayLength&lt;/code&gt; arguments by a single new array of type &lt;code&gt;arrayType&lt;/code&gt;, whose elements comprise (in order) the replaced arguments. Finally the target is called. What the target eventually returns is returned unchanged by the adapter.</source>
          <target state="translated">호출되면 어댑터는 후행 &lt;code&gt;arrayLength&lt;/code&gt; 인수를 &lt;code&gt;arrayType&lt;/code&gt; 유형의 단일 새 배열로 대체합니다.이 배열의 요소는 대체 된 인수를 (순서대로) 구성합니다. 마지막으로 대상이 호출됩니다. 대상이 결국 리턴하는 것은 어댑터에 의해 변경되지 않은 상태로 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="1d41427d5f2ba9b4f876eb45c993fa83acbb6861" translate="yes" xml:space="preserve">
          <source>When called, the bound handle inserts the given value &lt;code&gt;x&lt;/code&gt; as a new leading argument to the target. The other arguments are also passed unchanged. What the target eventually returns is returned unchanged by the bound handle.</source>
          <target state="translated">호출되면 바인딩 된 핸들은 주어진 값 &lt;code&gt;x&lt;/code&gt; 를 새로운 선행 인수로 대상에 삽입합니다 . 다른 인수도 변경되지 않은 채 전달됩니다. 타겟이 돌려주는 것은 바운드 핸들에 의해 변경되지 않은 상태로 돌려 주어집니다.</target>
        </trans-unit>
        <trans-unit id="07e47dd6263746d4e6b3656f67f0733f7b685387" translate="yes" xml:space="preserve">
          <source>When called, the handle will treat the first argument as a receiver and dispatch on the receiver's type to determine which method implementation to enter. (The dispatching action is identical with that performed by an &lt;code&gt;invokevirtual&lt;/code&gt; or &lt;code&gt;invokeinterface&lt;/code&gt; instruction.)</source>
          <target state="translated">호출되면 핸들은 첫 번째 인수를 수신자로 취급하고 입력 할 메소드 구현을 판별하기 위해 수신자의 유형을 디스패치합니다. 디스패치 작업은 &lt;code&gt;invokevirtual&lt;/code&gt; 또는 &lt;code&gt;invokeinterface&lt;/code&gt; 명령에 의해 수행되는 작업과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="84c71118f0cab56f92d54fd7df74c2d3e7d46279" translate="yes" xml:space="preserve">
          <source>When called, the handle will treat the first argument as a receiver and, for non-private methods, dispatch on the receiver's type to determine which method implementation to enter. For private methods the named method in &lt;code&gt;refc&lt;/code&gt; will be invoked on the receiver. (The dispatching action is identical with that performed by an &lt;code&gt;invokevirtual&lt;/code&gt; or &lt;code&gt;invokeinterface&lt;/code&gt; instruction.)</source>
          <target state="translated">호출 될 때 핸들은 첫 번째 인수를 수신자로 취급하고 비공개 메서드가 아닌 경우 입력 할 메서드 구현을 결정하기 위해 수신자의 유형을 디스패치합니다. 개인 메서드의 경우 &lt;code&gt;refc&lt;/code&gt; 의 명명 된 메서드 가 수신자에서 호출됩니다. (파견 작업은 &lt;code&gt;invokevirtual&lt;/code&gt; 또는 &lt;code&gt;invokeinterface&lt;/code&gt; 명령에 의해 수행되는 작업과 동일 합니다.)</target>
        </trans-unit>
        <trans-unit id="ddf5901ed93495490773362c9912bfbbd03d6639" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;parseWithContext&lt;/code&gt;, the values of the following configuration parameters will be ignored and their default values will always be used instead: &quot;&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-validate&quot;&gt;validate&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-validate-if-schema&quot;&gt;validate-if-schema&lt;/a&gt;&quot;, and &quot;&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-element-content-whitespace&quot;&gt;element-content-whitespace&lt;/a&gt;&quot;. Other parameters will be treated normally, and the parser is expected to call the &lt;code&gt;LSParserFilter&lt;/code&gt; just as if a whole document was parsed.</source>
          <target state="translated">&lt;code&gt;parseWithContext&lt;/code&gt; 를 호출 할 때 다음 구성 매개 변수의 값이 무시되고 기본값 인 &quot; &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-validate&quot;&gt;validate&lt;/a&gt; &quot;, &quot; &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-validate-if-schema&quot;&gt;validate-if-schema&lt;/a&gt; &quot;및 &quot; &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-element-content-whitespace&quot;&gt;element-content-whitespace&lt;/a&gt; &quot;가 대신 사용됩니다. 다른 매개 변수는 정상적으로 처리되며 구문 분석기는 전체 문서가 구문 분석 된 것처럼 &lt;code&gt;LSParserFilter&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b972447f4e4256626d78384b75e28dd0d79090b5" translate="yes" xml:space="preserve">
          <source>When calling e.g. &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#get(java.lang.Object...)&quot;&gt;&lt;code&gt;VarHandle.get(Object...)&lt;/code&gt;&lt;/a&gt; on the resulting var handle, incoming coordinate values are joined with bound coordinate values, and then passed to the target var handle.</source>
          <target state="translated">결과 var 핸들에서 예를 들어 &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#get(java.lang.Object...)&quot;&gt; &lt;code&gt;VarHandle.get(Object...)&lt;/code&gt; &lt;/a&gt; 를 호출하면 들어오는 좌표 값이 바인딩 된 좌표 값과 결합 된 다음 대상 var 핸들로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="2d099492a6ffcce03c03ad112011e5bb621e995e" translate="yes" xml:space="preserve">
          <source>When calling e.g. &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#get(java.lang.Object...)&quot;&gt;&lt;code&gt;VarHandle.get(Object...)&lt;/code&gt;&lt;/a&gt; on the resulting var handle, the incoming coordinate values starting at position &lt;code&gt;pos&lt;/code&gt; (of type &lt;code&gt;C1, C2 ... Cn&lt;/code&gt;, where &lt;code&gt;C1, C2 ... Cn&lt;/code&gt; are the return type of the unary filter functions) are transformed into new values (of type &lt;code&gt;S1, S2 ... Sn&lt;/code&gt;, where &lt;code&gt;S1, S2 ... Sn&lt;/code&gt; are the parameter types of the unary filter functions), and then passed (along with any coordinate that was left unaltered by the adaptation) to the target var handle.</source>
          <target state="translated">결과 var 핸들에서 예를 들어 &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#get(java.lang.Object...)&quot;&gt; &lt;code&gt;VarHandle.get(Object...)&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 &lt;code&gt;pos&lt;/code&gt; 위치에서 시작하는 수신 좌표 값 (유형 &lt;code&gt;C1, C2 ... Cn&lt;/code&gt; , 여기서 &lt;code&gt;C1, C2 ... Cn&lt;/code&gt; 은 단항 필터 함수)는 새 값 ( &lt;code&gt;S1, S2 ... Sn&lt;/code&gt; , 여기서 &lt;code&gt;S1, S2 ... Sn&lt;/code&gt; 은 단항 필터 함수의 매개 변수 유형 임)으로 변환 된 다음 전달 된 모든 좌표와 함께 적응에 의해 변경되지 않은 채로 남음) 대상 var 핸들에.</target>
        </trans-unit>
        <trans-unit id="57e2cd51c61eee1c12f2f63fe569e6a067bd251e" translate="yes" xml:space="preserve">
          <source>When calling e.g. &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#set(java.lang.Object...)&quot;&gt;&lt;code&gt;VarHandle.set(Object...)&lt;/code&gt;&lt;/a&gt; on the resulting var handle, the incoming value (of type &lt;code&gt;T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the &lt;em&gt;last&lt;/em&gt; parameter type of the first filter function) is processed using the first filter and then passed to the target var handle. Conversely, when calling e.g. &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#get(java.lang.Object...)&quot;&gt;&lt;code&gt;VarHandle.get(Object...)&lt;/code&gt;&lt;/a&gt; on the resulting var handle, the return value obtained from the target var handle (of type &lt;code&gt;T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the &lt;em&gt;last&lt;/em&gt; parameter type of the second filter function) is processed using the second filter and returned to the caller. More advanced access mode types, such as &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle.accessmode#COMPARE_AND_EXCHANGE&quot;&gt;&lt;code&gt;VarHandle.AccessMode.COMPARE_AND_EXCHANGE&lt;/code&gt;&lt;/a&gt; might apply both filters at the same time.</source>
          <target state="translated">결과 var 핸들에서 예를 들어 &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#set(java.lang.Object...)&quot;&gt; &lt;code&gt;VarHandle.set(Object...)&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 들어오는 값 ( &lt;code&gt;T&lt;/code&gt; 형식 , 여기서 &lt;code&gt;T&lt;/code&gt; 는 첫 번째 필터 함수 의 &lt;em&gt;마지막&lt;/em&gt; 매개 변수 형식 임)이 첫 번째 필터를 사용하여 처리 된 다음 대상 변수 핸들. 반대로 결과 var 핸들에서 예를 들어 &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#get(java.lang.Object...)&quot;&gt; &lt;code&gt;VarHandle.get(Object...)&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 대상 var 핸들 ( &lt;code&gt;T&lt;/code&gt; 유형 , 여기서 &lt;code&gt;T&lt;/code&gt; 는 두 번째 필터 함수 의 &lt;em&gt;마지막&lt;/em&gt; 매개 변수 유형) 에서 얻은 반환 값 은 다음을 사용하여 처리됩니다. 두 번째 필터는 호출자에게 반환됩니다. &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle.accessmode#COMPARE_AND_EXCHANGE&quot;&gt; &lt;code&gt;VarHandle.AccessMode.COMPARE_AND_EXCHANGE&lt;/code&gt; &lt;/a&gt; 와 같은 고급 액세스 모드 유형 두 필터를 동시에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5780deed2c48ceb9857f00bb76c9f644f13d5e00" translate="yes" xml:space="preserve">
          <source>When calling e.g. &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#set(java.lang.Object...)&quot;&gt;&lt;code&gt;VarHandle.set(Object...)&lt;/code&gt;&lt;/a&gt; on the resulting var handle, the incoming value (of type &lt;code&gt;adaptedType&lt;/code&gt;) is converted by a</source>
          <target state="translated">결과 var 핸들에서 예를 들어 &lt;a href=&quot;../../../../java.base/java/lang/invoke/varhandle#set(java.lang.Object...)&quot;&gt; &lt;code&gt;VarHandle.set(Object...)&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 들어오는 값 ( &lt;code&gt;adaptedType&lt;/code&gt; 유형 )은</target>
        </trans-unit>
        <trans-unit id="2391920a3b69011b129eed441073582d616d0af6" translate="yes" xml:space="preserve">
          <source>When changes are made to this &lt;code&gt;DirContext&lt;/code&gt;, the effect on enumerations returned by prior calls to this method is undefined.</source>
          <target state="translated">이 &lt;code&gt;DirContext&lt;/code&gt; 가 변경되면 ,이 메소드의 이전 호출에 의해 반환 된 열거에 대한 영향은 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5ef4ed8d75e983238d9128ace6321d1ac8ecbb76" translate="yes" xml:space="preserve">
          <source>When choosing which member of a visitor family to subclass, subclassing the most recent one increases the range of source versions covered. When choosing which visitor family to subclass, consider their built-in capabilities:</source>
          <target state="translated">방문자 패밀리의 어떤 구성원을 하위 클래스로 분류할지 선택할 때 가장 최근의 것을 서브 클래 싱하면 다루는 소스 버전의 범위가 늘어납니다. 하위 클래스로 분류 할 방문자 패밀리를 선택할 때 기본 제공 기능을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="903b7e48a00f4b84896728035808586f9ae200f1" translate="yes" xml:space="preserve">
          <source>When color data is stored in an image of this type, the closest color in the colormap is determined by the &lt;code&gt;IndexColorModel&lt;/code&gt; and the resulting index is stored. Approximation and loss of alpha or color components can result, depending on the colors in the &lt;code&gt;IndexColorModel&lt;/code&gt; colormap.</source>
          <target state="translated">컬러 데이터가이 유형의 이미지에 저장 될 때, 컬러 맵에서 가장 가까운 컬러는 &lt;code&gt;IndexColorModel&lt;/code&gt; 에 의해 결정되고 결과 인덱스가 저장됩니다. &lt;code&gt;IndexColorModel&lt;/code&gt; 컬러 맵 의 색상에 따라 알파 또는 색상 구성 요소의 근사치 및 손실이 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="596a1e26a91b27916ea68a39d5613c909fc17bd2" translate="yes" xml:space="preserve">
          <source>When comparing corresponding components of two URIs, if one component is undefined but the other is defined then the first is considered to be less than the second. Unless otherwise noted, string components are ordered according to their natural, case-sensitive ordering as defined by the &lt;a href=&quot;../lang/comparable#compareTo(T)&quot;&gt;&lt;code&gt;String.compareTo&lt;/code&gt;&lt;/a&gt; method. String components that are subject to encoding are compared by comparing their raw forms rather than their encoded forms.</source>
          <target state="translated">두 URI의 해당 구성 요소를 비교할 때 한 구성 요소가 정의되지 않았지만 다른 구성 요소가 정의되어 있으면 첫 번째 구성 요소가 두 번째 구성 요소보다 작은 것으로 간주됩니다. 달리 명시되지 않는 한, 문자열 구성 요소는 &lt;a href=&quot;../lang/comparable#compareTo(T)&quot;&gt; &lt;code&gt;String.compareTo&lt;/code&gt; &lt;/a&gt; 메서드에 정의 된대로 대소 문자를 구분하는 자연스러운 순서에 따라 정렬됩니다 . 인코딩이 적용되는 문자열 구성 요소는 인코딩 된 형식이 아닌 원시 형식을 비교하여 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="a1a9496b1bc6bdad32600169e992ba4825384491" translate="yes" xml:space="preserve">
          <source>When comparing corresponding components of two URIs, if one component is undefined but the other is defined then the first is considered to be less than the second. Unless otherwise noted, string components are ordered according to their natural, case-sensitive ordering as defined by the &lt;a href=&quot;../lang/comparable#compareTo-T-&quot;&gt;&lt;code&gt;String.compareTo&lt;/code&gt;&lt;/a&gt; method. String components that are subject to encoding are compared by comparing their raw forms rather than their encoded forms.</source>
          <target state="translated">두 URI의 해당 구성 요소를 비교할 때 한 구성 요소는 정의되어 있지 않지만 다른 구성 요소는 정의 된 경우 첫 번째 구성 요소는 두 번째 구성 요소보다 작은 것으로 간주됩니다. 달리 언급되지 않는 한, 문자열 구성 요소는 &lt;a href=&quot;../lang/comparable#compareTo-T-&quot;&gt; &lt;code&gt;String.compareTo&lt;/code&gt; &lt;/a&gt; 메소드에 정의 된대로 자연스럽고 대소 문자를 구분하는 순서에 따라 정렬됩니다 . 인코딩 대상 문자열 구성 요소는 인코딩 된 형식이 아닌 원시 형식을 비교하여 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="2c37c778c7dd1b525f37ac21c51d5e55c91f6a57" translate="yes" xml:space="preserve">
          <source>When comparing corresponding components of two URIs, if one component is undefined but the other is defined then the first is considered to be less than the second. Unless otherwise noted, string components are ordered according to their natural, case-sensitive ordering as defined by the &lt;a href=&quot;../lang/string#compareTo(java.lang.String)&quot;&gt;&lt;code&gt;String.compareTo&lt;/code&gt;&lt;/a&gt; method. String components that are subject to encoding are compared by comparing their raw forms rather than their encoded forms and the hexadecimal digits of escaped octets are compared without regard to case.</source>
          <target state="translated">두 URI의 해당 구성 요소를 비교할 때 한 구성 요소가 정의되지 않았지만 다른 구성 요소가 정의되어 있으면 첫 번째 구성 요소가 두 번째 구성 요소보다 작은 것으로 간주됩니다. 달리 명시되지 않는 한, 문자열 구성 요소는 &lt;a href=&quot;../lang/string#compareTo(java.lang.String)&quot;&gt; &lt;code&gt;String.compareTo&lt;/code&gt; &lt;/a&gt; 메서드에 정의 된대로 대소 문자를 구분하는 자연스러운 순서에 따라 정렬됩니다 . 인코딩이 적용되는 문자열 구성 요소는 인코딩 된 형식이 아닌 원시 형식을 비교하여 비교되며 이스케이프 된 옥텟의 16 진수는 대소 문자에 관계없이 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="3f5a301cfb1a53cc09533b6df9b74c243edd2ccf" translate="yes" xml:space="preserve">
          <source>When comparing two version strings, the elements of their corresponding components are compared in pointwise fashion. If one component is longer than the other, but otherwise equal to it, then the first component is considered the greater of the two; otherwise, if two corresponding elements are integers then they are compared as such; otherwise, at least one of the elements is a string, so the other is converted into a string if it is an integer and the two are compared lexicographically. Trailing integer elements with the value zero are ignored.</source>
          <target state="translated">두 버전 문자열을 비교할 때 해당 구성 요소의 요소가 포인트 방식으로 비교됩니다. 한 구성 요소가 다른 구성 요소보다 길지만 같으면 첫 번째 구성 요소가 두 구성 요소 중 더 큰 것으로 간주됩니다. 그렇지 않으면 두 개의 대응하는 요소가 정수이면 그와 같이 비교됩니다. 그렇지 않으면 요소 중 하나 이상이 문자열이므로 다른 요소는 정수이고 두 요소가 사 전적으로 비교되면 문자열로 변환됩니다. 값이 0 인 후행 정수 요소는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="766794f1dde5c4c93fc09600ddd1b32f8b44bbe1" translate="yes" xml:space="preserve">
          <source>When comparing two version strings, the value of &lt;code&gt;$OPT&lt;/code&gt;, if present, may or may not be significant depending on the chosen comparison method. The comparison methods &lt;a href=&quot;#compareTo(java.lang.Runtime.Version)&quot;&gt;&lt;code&gt;compareTo()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#compareToIgnoreOptional(java.lang.Runtime.Version)&quot;&gt;&lt;code&gt;compareToIgnoreOptional()&lt;/code&gt;&lt;/a&gt; should be used consistently with the corresponding methods &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#equalsIgnoreOptional(java.lang.Object)&quot;&gt;&lt;code&gt;equalsIgnoreOptional()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">두 버전 문자열을 비교할 때 &lt;code&gt;$OPT&lt;/code&gt; 값이있는 경우 선택한 비교 방법에 따라 중요 할 수도 있고 그렇지 않을 수도 있습니다. 비교 메서드 &lt;a href=&quot;#compareTo(java.lang.Runtime.Version)&quot;&gt; &lt;code&gt;compareTo()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#compareToIgnoreOptional(java.lang.Runtime.Version)&quot;&gt; &lt;code&gt;compareToIgnoreOptional()&lt;/code&gt; &lt;/a&gt; 은 해당 메서드 &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt; &lt;code&gt;equals()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#equalsIgnoreOptional(java.lang.Object)&quot;&gt; &lt;code&gt;equalsIgnoreOptional()&lt;/code&gt; &lt;/a&gt; 과 일관되게 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2103fe1187cedfb38f65d7ce9c0819c612ec17eb" translate="yes" xml:space="preserve">
          <source>When computing a date and time from the calendar fields, there may be insufficient information for the computation (such as only year and month with no day of month), or there may be inconsistent information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15, 1996 is actually a Monday). &lt;code&gt;Calendar&lt;/code&gt; will resolve calendar field values to determine the date and time in the following way.</source>
          <target state="translated">일정 관리 필드에서 날짜 및 시간을 계산할 때 계산에 필요한 정보가 충분하지 않거나 (예 : 월이없는 연도 및 월과 같이) 일치하지 않는 정보가있을 수 있습니다 (1996 년 7 월 15 일 화요일) )-1996 년 7 월 15 일은 실제로 월요일입니다). &lt;code&gt;Calendar&lt;/code&gt; 은 달력 필드 값을 확인하여 다음과 같은 방식으로 날짜와 시간을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="0dcc686243f0157dc4e782a735e5dde3570a33bc" translate="yes" xml:space="preserve">
          <source>When concatenated with a class attribute name, indicates the format of that attribute, using the layout language specified in the JSR 200 specification.</source>
          <target state="translated">클래스 속성 이름과 연결되면 JSR 200 스펙에 지정된 레이아웃 언어를 사용하여 해당 속성의 형식을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bb74f60e238e6eeac7b5d4c50c88953481c44a68" translate="yes" xml:space="preserve">
          <source>When concatenated with a code attribute name, indicates the format of that attribute.</source>
          <target state="translated">코드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1e9e7edd39470beed21937a91c20e5bb29b65a00" translate="yes" xml:space="preserve">
          <source>When concatenated with a code attribute name, indicates the format of that attribute. For example, the effect of this option is built in: &lt;code&gt;pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]&lt;/code&gt;. The special strings &lt;a href=&quot;#ERROR&quot;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#STRIP&quot;&gt;&lt;code&gt;STRIP&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#PASS&quot;&gt;&lt;code&gt;PASS&lt;/code&gt;&lt;/a&gt; are also allowed.</source>
          <target state="translated">코드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다. 예를 들어,이 옵션의 효과는 &lt;code&gt;pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]&lt;/code&gt; 내장되어 있습니다. 특수 문자열 &lt;a href=&quot;#ERROR&quot;&gt; &lt;code&gt;ERROR&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#STRIP&quot;&gt; &lt;code&gt;STRIP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#PASS&quot;&gt; &lt;code&gt;PASS&lt;/code&gt; &lt;/a&gt; 도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="6c481650236192705c8984496664400b25ae4018" translate="yes" xml:space="preserve">
          <source>When concatenated with a code attribute name, indicates the format of that attribute. For example, the effect of this option is built in: &lt;code&gt;pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]&lt;/code&gt;. The special strings &lt;a href=&quot;pack200.packer#ERROR&quot;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;pack200.packer#STRIP&quot;&gt;&lt;code&gt;STRIP&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;pack200.packer#PASS&quot;&gt;&lt;code&gt;PASS&lt;/code&gt;&lt;/a&gt; are also allowed.</source>
          <target state="translated">코드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다. 예를 들어,이 옵션의 효과는 &lt;code&gt;pack.code.attribute.LocalVariableTable=NH[PHOHRUHRSHH]&lt;/code&gt; 내장되어 있습니다. 특수 문자열 &lt;a href=&quot;pack200.packer#ERROR&quot;&gt; &lt;code&gt;ERROR&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;pack200.packer#STRIP&quot;&gt; &lt;code&gt;STRIP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;pack200.packer#PASS&quot;&gt; &lt;code&gt;PASS&lt;/code&gt; &lt;/a&gt; 도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="ceb1ddea1eb879c6878c1a1d7674d5ebeef2e985" translate="yes" xml:space="preserve">
          <source>When concatenated with a field attribute name, indicates the format of that attribute.</source>
          <target state="translated">필드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="47883ebf03b00718b34fcc759408570310a33897" translate="yes" xml:space="preserve">
          <source>When concatenated with a field attribute name, indicates the format of that attribute. For example, the effect of this option is built in: &lt;code&gt;pack.field.attribute.Deprecated=&lt;/code&gt;. The special strings &lt;a href=&quot;#ERROR&quot;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#STRIP&quot;&gt;&lt;code&gt;STRIP&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#PASS&quot;&gt;&lt;code&gt;PASS&lt;/code&gt;&lt;/a&gt; are also allowed.</source>
          <target state="translated">필드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다. 예를 들어,이 옵션의 효과는 &lt;code&gt;pack.field.attribute.Deprecated=&lt;/code&gt; 내장되어 있습니다. 특수 문자열 &lt;a href=&quot;#ERROR&quot;&gt; &lt;code&gt;ERROR&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#STRIP&quot;&gt; &lt;code&gt;STRIP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#PASS&quot;&gt; &lt;code&gt;PASS&lt;/code&gt; &lt;/a&gt; 도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="69b68d3b1ed8dc49253990c27eccbd09190abb43" translate="yes" xml:space="preserve">
          <source>When concatenated with a field attribute name, indicates the format of that attribute. For example, the effect of this option is built in: &lt;code&gt;pack.field.attribute.Deprecated=&lt;/code&gt;. The special strings &lt;a href=&quot;pack200.packer#ERROR&quot;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;pack200.packer#STRIP&quot;&gt;&lt;code&gt;STRIP&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;pack200.packer#PASS&quot;&gt;&lt;code&gt;PASS&lt;/code&gt;&lt;/a&gt; are also allowed.</source>
          <target state="translated">필드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다. 예를 들어,이 옵션의 효과는 &lt;code&gt;pack.field.attribute.Deprecated=&lt;/code&gt; 내장되어 있습니다. 특수 문자열 &lt;a href=&quot;pack200.packer#ERROR&quot;&gt; &lt;code&gt;ERROR&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;pack200.packer#STRIP&quot;&gt; &lt;code&gt;STRIP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;pack200.packer#PASS&quot;&gt; &lt;code&gt;PASS&lt;/code&gt; &lt;/a&gt; 도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="33a1709395545b56f118dfdd106e7258d9b8f06b" translate="yes" xml:space="preserve">
          <source>When concatenated with a method attribute name, indicates the format of that attribute.</source>
          <target state="translated">메서드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c8da13828fde7c93e320323d44f6b62e3d17a27c" translate="yes" xml:space="preserve">
          <source>When concatenated with a method attribute name, indicates the format of that attribute. For example, the effect of this option is built in: &lt;code&gt;pack.method.attribute.Exceptions=NH[RCH]&lt;/code&gt;. The special strings &lt;a href=&quot;#ERROR&quot;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#STRIP&quot;&gt;&lt;code&gt;STRIP&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#PASS&quot;&gt;&lt;code&gt;PASS&lt;/code&gt;&lt;/a&gt; are also allowed.</source>
          <target state="translated">메서드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다. 예를 들어,이 옵션의 효과는 &lt;code&gt;pack.method.attribute.Exceptions=NH[RCH]&lt;/code&gt; 내장되어 있습니다. 특수 문자열 &lt;a href=&quot;#ERROR&quot;&gt; &lt;code&gt;ERROR&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#STRIP&quot;&gt; &lt;code&gt;STRIP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#PASS&quot;&gt; &lt;code&gt;PASS&lt;/code&gt; &lt;/a&gt; 도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="b1b39538a51627baa398137ae5124f3674a47944" translate="yes" xml:space="preserve">
          <source>When concatenated with a method attribute name, indicates the format of that attribute. For example, the effect of this option is built in: &lt;code&gt;pack.method.attribute.Exceptions=NH[RCH]&lt;/code&gt;. The special strings &lt;a href=&quot;pack200.packer#ERROR&quot;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;pack200.packer#STRIP&quot;&gt;&lt;code&gt;STRIP&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;pack200.packer#PASS&quot;&gt;&lt;code&gt;PASS&lt;/code&gt;&lt;/a&gt; are also allowed.</source>
          <target state="translated">메소드 속성 이름과 연결되면 해당 속성의 형식을 나타냅니다. 예를 들어,이 옵션의 효과는 &lt;code&gt;pack.method.attribute.Exceptions=NH[RCH]&lt;/code&gt; 내장되어 있습니다. 특수 문자열 &lt;a href=&quot;pack200.packer#ERROR&quot;&gt; &lt;code&gt;ERROR&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;pack200.packer#STRIP&quot;&gt; &lt;code&gt;STRIP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;pack200.packer#PASS&quot;&gt; &lt;code&gt;PASS&lt;/code&gt; &lt;/a&gt; 도 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="715e1e84dcaa0489832f5e6cede42eba32b7afd9" translate="yes" xml:space="preserve">
          <source>When constructed as fair, threads contend for entry using an approximately arrival-order policy. When the currently held lock is released, either the longest-waiting single writer thread will be assigned the write lock, or if there is a group of reader threads waiting longer than all waiting writer threads, that group will be assigned the read lock.</source>
          <target state="translated">공정한 것으로 구성 될 때, 스레드는 대략 도착 순서 정책을 사용하여 입장을 위해 경쟁합니다. 현재 보유 된 잠금이 해제되면 가장 오래 대기중인 단일 작성기 스레드에 쓰기 잠금이 지정되거나 모든 대기 작성기 스레드보다 오래 대기하는 판독기 스레드 그룹이 있으면 해당 그룹에 읽기 잠금이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="61fbad8d5157fa12e2924a0b101d7488fca8edd0" translate="yes" xml:space="preserve">
          <source>When constructed as non-fair (the default), the order of entry to the read and write lock is unspecified, subject to reentrancy constraints. A nonfair lock that is continuously contended may indefinitely postpone one or more reader or writer threads, but will normally have higher throughput than a fair lock.</source>
          <target state="translated">불공평 (기본값)으로 구성된 경우 읽기 및 쓰기 잠금 항목의 순서는 지정되지 않으며 재진입 제약 조건이 적용됩니다. 지속적으로 유지되는 불공정 잠금은 하나 이상의 판독기 또는 기록기 스레드를 무기한 연기 할 수 있지만 보통 공정 잠금보다 처리량이 더 높습니다.</target>
        </trans-unit>
        <trans-unit id="0e952a0329782ab3d664a78b3d191c4eda125051" translate="yes" xml:space="preserve">
          <source>When constructing a JAR url via &lt;code&gt;new URL(context, spec)&lt;/code&gt;, the following rules apply:</source>
          <target state="translated">&lt;code&gt;new URL(context, spec)&lt;/code&gt; 통해 JAR URL을 구성 할 때 다음 규칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="41c8b69db960d9e4b36a2e8b2f092f79ddba9a4f" translate="yes" xml:space="preserve">
          <source>When constructing new JavaFileObjects, the file manager must determine where to create them. For example, if a file manager manages regular files on a file system, it would most likely have a current/working directory to use as default location when creating or finding files. A number of hints can be provided to a file manager as to where to create files. Any file manager might choose to ignore these hints.</source>
          <target state="translated">새 JavaFileObject를 구성 할 때 파일 관리자는이를 작성할 위치를 결정해야합니다. 예를 들어, 파일 관리자가 파일 시스템에서 일반 파일을 관리하는 경우 파일을 작성하거나 찾을 때 기본 위치로 사용할 현재 / 작업 디렉토리가있을 것입니다. 파일 관리자에게 파일 작성 위치에 대한 힌트를 제공 할 수 있습니다. 모든 파일 관리자는이 힌트를 무시하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a964eaa3b3cf4ad1eed4195c0e00287e21036db6" translate="yes" xml:space="preserve">
          <source>When converting back to &lt;code&gt;ZonedDateTime&lt;/code&gt;, if the local date-time is in an overlap, then the offset will be retained if possible, otherwise the earlier offset will be used. If in a gap, the local date-time will be adjusted forward by the length of the gap.</source>
          <target state="translated">&lt;code&gt;ZonedDateTime&lt;/code&gt; 으로 다시 변환 할 때 로컬 날짜-시간이 겹치는 경우 가능한 경우 오프셋이 유지되고, 그렇지 않으면 이전 오프셋이 사용됩니다. 간격이 있으면 현지 날짜-시간이 간격의 길이만큼 앞으로 조정됩니다.</target>
        </trans-unit>
        <trans-unit id="da70171e9e306ca307ebacfcf0e847c01479df72" translate="yes" xml:space="preserve">
          <source>When copy of the object is retrieved (via the &lt;code&gt;get&lt;/code&gt; method), if the class is not available locally, it will be loaded from the appropriate location (specified the URL annotated with the class descriptor when the class was serialized.</source>
          <target state="translated">객체의 복사본을 가져올 때 ( &lt;code&gt;get&lt;/code&gt; 메서드 를 통해 ) 클래스를 로컬에서 사용할 수없는 경우 해당 위치에서로드됩니다 (클래스가 직렬화 될 때 클래스 설명 자로 주석이 달린 URL 지정).</target>
        </trans-unit>
        <trans-unit id="335335544c2a50cfd694c3a55d6ae8a94af447f1" translate="yes" xml:space="preserve">
          <source>When copying a float or double source to an integral type destination, each source sample is cast to the destination type. When copying an integral type source to a float or double destination, the source is first converted to a 32-bit int (if necessary), using the above rules for integral types, and then the int is cast to float or double.</source>
          <target state="translated">부동 또는 이중 소스를 정수 유형 대상에 복사 할 때 각 소스 샘플은 대상 유형으로 캐스트됩니다. 정수 유형 소스를 float 또는 double 대상에 복사 할 때 소스는 먼저 정수 유형에 대한 위의 규칙을 사용하여 32 비트 int (필요한 경우)로 변환 된 다음 int가 float 또는 double로 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="3ade72b52f46fe9735881965253dded0d6c147b2" translate="yes" xml:space="preserve">
          <source>When created, the default implementation of &lt;code&gt;ActivationGroup&lt;/code&gt; will override the system properties with the properties requested when its &lt;code&gt;ActivationGroupDesc&lt;/code&gt; was created, and will set a &lt;a href=&quot;../../../../java.base/java/lang/securitymanager&quot;&gt;&lt;code&gt;SecurityManager&lt;/code&gt;&lt;/a&gt; as the default system security manager. If your application requires specific properties to be set when objects are activated in the group, the application should create a special &lt;code&gt;Properties&lt;/code&gt; object containing these properties, then create an &lt;code&gt;ActivationGroupDesc&lt;/code&gt; with the &lt;code&gt;Properties&lt;/code&gt; object, and use &lt;code&gt;ActivationGroup.createGroup&lt;/code&gt; before creating any &lt;code&gt;ActivationDesc&lt;/code&gt;s (before the default &lt;code&gt;ActivationGroupDesc&lt;/code&gt; is created). If your application requires the use of a security manager other than &lt;a href=&quot;../../../../java.base/java/lang/securitymanager&quot;&gt;&lt;code&gt;SecurityManager&lt;/code&gt;&lt;/a&gt;, in the ActivativationGroupDescriptor properties list you can set &lt;code&gt;java.security.manager&lt;/code&gt; property to the name of the security manager you would like to install.</source>
          <target state="translated">만들 때의 기본 구현 &lt;code&gt;ActivationGroup&lt;/code&gt; 의 속성과 시스템 속성을 재정의합니다 그 때 요청 &lt;code&gt;ActivationGroupDesc&lt;/code&gt; 을가 생성 및 설정합니다 &lt;a href=&quot;../../../../java.base/java/lang/securitymanager&quot;&gt; &lt;code&gt;SecurityManager&lt;/code&gt; &lt;/a&gt; 기본 시스템 보안 관리자로. 개체가 그룹에서 활성화 될 때 응용 프로그램 설정을 할 특정 속성을 필요로하는 경우, 응용 프로그램이 특별한 만들어야 &lt;code&gt;Properties&lt;/code&gt; 이러한 속성을 포함하는 객체, 다음 생성 &lt;code&gt;ActivationGroupDesc&lt;/code&gt; 을 와 &lt;code&gt;Properties&lt;/code&gt; 개체 및 사용 &lt;code&gt;ActivationGroup.createGroup&lt;/code&gt; 를을 어떤 만들기 전에 &lt;code&gt;ActivationDesc&lt;/code&gt; 전에 (들 기본 &lt;code&gt;ActivationGroupDesc&lt;/code&gt; 생성됨). 애플리케이션 에서 &lt;a href=&quot;../../../../java.base/java/lang/securitymanager&quot;&gt; &lt;code&gt;SecurityManager&lt;/code&gt; &lt;/a&gt; 이외의 보안 관리자를 사용해야하는 경우 ActivativationGroupDescriptor 속성 목록에서 &lt;code&gt;java.security.manager&lt;/code&gt; 속성을 설치하려는 보안 관리자의 이름으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="330033318b9b32fd36ddd46bb1ced3469157a8be" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;ChoiceFormat&lt;/code&gt;, you must specify an array of formats and an array of limits. The length of these arrays must be the same. For example,</source>
          <target state="translated">&lt;code&gt;ChoiceFormat&lt;/code&gt; 을 작성할 때 형식 배열과 한계 배열을 지정해야합니다. 이 배열의 길이는 같아야합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="09c8af312b3d6fd01641b9e7028cc827b52cff1d" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;Graphics2D&lt;/code&gt; object, the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; specifies the &lt;a id=&quot;deftransform&quot;&gt;default transform&lt;/a&gt; for the target of the &lt;code&gt;Graphics2D&lt;/code&gt; (a &lt;a href=&quot;component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;image&quot;&gt;&lt;code&gt;Image&lt;/code&gt;&lt;/a&gt;). This default transform maps the user space coordinate system to screen and printer device coordinates such that the origin maps to the upper left hand corner of the target region of the device with increasing X coordinates extending to the right and increasing Y coordinates extending downward. The scaling of the default transform is set to identity for those devices that are close to 72 dpi, such as screen devices. The scaling of the default transform is set to approximately 72 user space coordinates per square inch for high resolution devices, such as printers. For image buffers, the default transform is the &lt;code&gt;Identity&lt;/code&gt; transform.</source>
          <target state="translated">만들 때 &lt;code&gt;Graphics2D&lt;/code&gt; 객체의 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; 를이 지정 &lt;a id=&quot;deftransform&quot;&gt;기본 변환&lt;/a&gt; 의 대상에 대한 &lt;code&gt;Graphics2D&lt;/code&gt; 의 (A &lt;a href=&quot;component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;image&quot;&gt; &lt;code&gt;Image&lt;/code&gt; &lt;/a&gt;). 이 기본 변환은 사용자 공간 좌표계를 화면 및 프린터 장치 좌표에 매핑하여 원점이 오른쪽으로 확장되는 X 좌표와 아래쪽으로 확장되는 증가하는 Y 좌표와 함께 장치의 대상 영역의 왼쪽 상단 모서리에 매핑되도록합니다. 기본 변환의 배율은 화면 장치와 같이 72dpi에 가까운 장치의 ID로 설정됩니다. 기본 변환의 배율은 프린터와 같은 고해상도 장치의 경우 제곱 인치당 약 72 개의 사용자 공간 좌표로 설정됩니다. 이미지 버퍼의 경우 기본 변환은 &lt;code&gt;Identity&lt;/code&gt; 변환입니다.</target>
        </trans-unit>
        <trans-unit id="8c146d0b369274554520e962246ecbdade5c4558" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;KerberosKey&lt;/code&gt; using the &lt;a href=&quot;#%3Cinit%3E(javax.security.auth.kerberos.KerberosPrincipal,char%5B%5D,java.lang.String)&quot;&gt;&lt;code&gt;KerberosKey(KerberosPrincipal, char[], String)&lt;/code&gt;&lt;/a&gt; constructor, an implementation may accept non-IANA algorithm names (For example, &quot;ArcFourMac&quot; for &quot;rc4-hmac&quot;), but the &lt;a href=&quot;#getAlgorithm()&quot;&gt;&lt;code&gt;getAlgorithm()&lt;/code&gt;&lt;/a&gt; method must always return the IANA algorithm name.</source>
          <target state="translated">&lt;a href=&quot;#%3Cinit%3E(javax.security.auth.kerberos.KerberosPrincipal,char%5B%5D,java.lang.String)&quot;&gt; &lt;code&gt;KerberosKey(KerberosPrincipal, char[], String)&lt;/code&gt; &lt;/a&gt; 생성자를 사용하여 &lt;code&gt;KerberosKey&lt;/code&gt; 를 만들 때 구현에서 비 IANA 알고리즘 이름 (예 : &quot;rc4-hmac&quot;의 경우 &quot;ArcFourMac&quot;)을 허용 할 수 있지만 &lt;a href=&quot;#getAlgorithm()&quot;&gt; &lt;code&gt;getAlgorithm()&lt;/code&gt; &lt;/a&gt; 메서드는 항상 IANA 알고리즘 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9b38bad41028682d65ecb4198fe6abc7015b87c2" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;Paper&lt;/code&gt; object, it is the application's responsibility to ensure that the paper size and the imageable area are compatible. For example, if the paper size is changed from 11 x 17 to 8.5 x 11, the application might need to reduce the imageable area so that whatever is printed fits on the page.</source>
          <target state="translated">&lt;code&gt;Paper&lt;/code&gt; 개체를 만들 때 용지 크기와 이미지 가능 영역이 호환되는지 확인하는 것은 응용 프로그램의 책임입니다. 예를 들어 용지 크기가 11 x 17에서 8.5 x 11로 변경된 경우 응용 프로그램은 인쇄되는 내용이 페이지에 맞도록 이미지 가능 영역을 줄여야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f380ad1809365a52c2f779b295ad176ba7cee1fe" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;TimeZone&lt;/code&gt;, the specified custom time zone ID is normalized in the following syntax:</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; 을 작성할 때 지정된 사용자 정의 시간대 ID는 다음 구문으로 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="105221734ccfc8a498e02b002ab64f6bd84a44d9" translate="yes" xml:space="preserve">
          <source>When creating a connector client or server, it is possible to supply an object of type &lt;a href=&quot;../../../../java.base/java/util/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that defines additional parameters. Each entry in this Map has a key that is a string and an associated value whose type is appropriate for that key. The standard keys defined by the JMX Remote API all begin with the string &quot;&lt;code&gt;jmx.remote.&lt;/code&gt;&quot;. The document &lt;em&gt;JMX Remote API&lt;/em&gt; lists these standard keys.</source>
          <target state="translated">커넥터 클라이언트 또는 서버를 만들 때 추가 매개 변수를 정의하는 &lt;a href=&quot;../../../../java.base/java/util/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 유형의 개체를 제공 할 수 있습니다 . 이 맵의 각 항목에는 문자열 인 키와 해당 키에 적합한 유형의 관련 값이 있습니다. JMX 원격 API에 의해 정의 된 표준 키는 모두 &quot; &lt;code&gt;jmx.remote.&lt;/code&gt; &quot; 문자열로 시작합니다 . 문서 &lt;em&gt;JMX 원격 API&lt;/em&gt; 는 이러한 표준 키를 나열합니다.</target>
        </trans-unit>
        <trans-unit id="b9ab1915b79f38ba00b3dd084c59f43fd7b1a097" translate="yes" xml:space="preserve">
          <source>When creating a connector client or server, it is possible to supply an object of type &lt;a href=&quot;../../../java/util/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that defines additional parameters. Each entry in this Map has a key that is a string and an associated value whose type is appropriate for that key. The standard keys defined by the JMX Remote API all begin with the string &quot;&lt;code&gt;jmx.remote.&lt;/code&gt;&quot;. The document &lt;em&gt;JMX Remote API&lt;/em&gt; lists these standard keys.</source>
          <target state="translated">커넥터 클라이언트 또는 서버를 작성할 때 추가 매개 변수를 정의하는 &lt;a href=&quot;../../../java/util/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 유형의 오브젝트를 제공 할 수 있습니다 . 이 맵의 각 항목에는 문자열 인 키와 해당 키에 적합한 유형의 값이 있습니다. JMX Remote API로 정의 된 표준 키는 모두 &quot; &lt;code&gt;jmx.remote.&lt;/code&gt; &quot; 문자열로 시작합니다 . &lt;em&gt;JMX Remote API&lt;/em&gt; 문서 에는 이러한 표준 키가 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="96d5bb0b77a90195ba6f2cbc3333bf0e862753f3" translate="yes" xml:space="preserve">
          <source>When creating a new file this option is a &lt;em&gt;hint&lt;/em&gt; that the new file will be sparse. This option is ignored when not creating a new file.</source>
          <target state="translated">새 파일을 만들 때이 옵션은 새 파일이 드물다 는 &lt;em&gt;힌트&lt;/em&gt; 입니다. 새 파일을 만들지 않으면이 옵션이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="c39abb2d7aabb3ded864546db651700da7057721" translate="yes" xml:space="preserve">
          <source>When creating a subclass of InitialContext, use this method as follows. Define a new method that uses this method to get an initial context of the desired subclass.</source>
          <target state="translated">InitialContext의 서브 클래스를 작성할 때이 메소드를 다음과 같이 사용하십시오. 이 메소드를 사용하여 원하는 서브 클래스의 초기 컨텍스트를 얻는 새 메소드를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="d46d936e93bb8a599591119f0d596c9ab0f11f7e" translate="yes" xml:space="preserve">
          <source>When data has been received, the &lt;code&gt;WebSocket&lt;/code&gt; invokes a receive method. Methods &lt;code&gt;onText&lt;/code&gt;, &lt;code&gt;onBinary&lt;/code&gt;, &lt;code&gt;onPing&lt;/code&gt; and &lt;code&gt;onPong&lt;/code&gt; must return a &lt;code&gt;CompletionStage&lt;/code&gt; that completes once the message has been received by the listener. If a listener's method returns &lt;code&gt;null&lt;/code&gt; rather than a &lt;code&gt;CompletionStage&lt;/code&gt;, &lt;code&gt;WebSocket&lt;/code&gt; will behave as if the listener returned a &lt;code&gt;CompletionStage&lt;/code&gt; that is already completed normally.</source>
          <target state="translated">데이터가 수신되면 &lt;code&gt;WebSocket&lt;/code&gt; 은 수신 메소드를 호출합니다. &lt;code&gt;onText&lt;/code&gt; , &lt;code&gt;onBinary&lt;/code&gt; , &lt;code&gt;onPing&lt;/code&gt; 및 &lt;code&gt;onPong&lt;/code&gt; 메소드 는 리스너가 메시지를 수신 하면 &lt;code&gt;CompletionStage&lt;/code&gt; 되는 CompletionStage 를 반환해야합니다 . 리스너의 메서드가 &lt;code&gt;CompletionStage&lt;/code&gt; 대신 &lt;code&gt;null&lt;/code&gt; 을 반환 하면 &lt;code&gt;WebSocket&lt;/code&gt; 은 리스너 가 이미 정상적으로 완료된 &lt;code&gt;CompletionStage&lt;/code&gt; 를 반환 한 것처럼 동작 합니다.</target>
        </trans-unit>
        <trans-unit id="020fc5ad194f669ea119d61b8cd7bdd1712118d0" translate="yes" xml:space="preserve">
          <source>When data is being transported using MIDI wire protocol, a &lt;a href=&quot;shortmessage&quot;&gt;&lt;code&gt;ShortMessage&lt;/code&gt;&lt;/a&gt; with the status value &lt;code&gt;0xFF&lt;/code&gt; represents a system reset message. In MIDI files, this same status value denotes a &lt;code&gt;MetaMessage&lt;/code&gt;. The types of meta-message are distinguished from each other by the first byte that follows the status byte &lt;code&gt;0xFF&lt;/code&gt;. The subsequent bytes are data bytes. As with system exclusive messages, there are an arbitrary number of data bytes, depending on the type of &lt;code&gt;MetaMessage&lt;/code&gt;.</source>
          <target state="translated">MIDI 유선 프로토콜을 사용하여 데이터를 전송할 때 상태 값이 &lt;code&gt;0xFF&lt;/code&gt; 인&lt;a href=&quot;shortmessage&quot;&gt; &lt;code&gt;ShortMessage&lt;/code&gt; &lt;/a&gt; 는 시스템 재설정 메시지를 나타냅니다. MIDI 파일에서이 동일한 상태 값은 &lt;code&gt;MetaMessage&lt;/code&gt; 를 나타냅니다 . 메타 메시지의 유형은 상태 바이트 &lt;code&gt;0xFF&lt;/code&gt; 뒤에 오는 첫 번째 바이트로 서로 구별됩니다 . 후속 바이트는 데이터 바이트입니다. 시스템 독점 메시지와 마찬가지로 &lt;code&gt;MetaMessage&lt;/code&gt; 유형에 따라 임의의 데이터 바이트 수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="61fdfc98284714085a633464250d1ada20371927" translate="yes" xml:space="preserve">
          <source>When data is being transported using MIDI wire protocol, a &lt;code&gt;&lt;a href=&quot;shortmessage&quot;&gt;&lt;code&gt;ShortMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with the status value &lt;code&gt;0xFF&lt;/code&gt; represents a system reset message. In MIDI files, this same status value denotes a &lt;code&gt;MetaMessage&lt;/code&gt;. The types of meta-message are distinguished from each other by the first byte that follows the status byte &lt;code&gt;0xFF&lt;/code&gt;. The subsequent bytes are data bytes. As with system exclusive messages, there are an arbitrary number of data bytes, depending on the type of &lt;code&gt;MetaMessage&lt;/code&gt;.</source>
          <target state="translated">MIDI 와이어 프로토콜을 사용하여 데이터를 전송하는 경우 상태 값이 &lt;code&gt;0xFF&lt;/code&gt; 인 &lt;code&gt;&lt;a href=&quot;shortmessage&quot;&gt;&lt;code&gt;ShortMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 는 시스템 재설정 메시지를 나타냅니다. MIDI 파일에서 이와 동일한 상태 값은 &lt;code&gt;MetaMessage&lt;/code&gt; 를 나타냅니다 . 메타 메시지의 유형은 상태 바이트 &lt;code&gt;0xFF&lt;/code&gt; 다음에 오는 첫 번째 바이트로 서로 구별됩니다 . 후속 바이트는 데이터 바이트입니다. 시스템 독점 메시지와 마찬가지로 &lt;code&gt;MetaMessage&lt;/code&gt; 유형에 따라 임의의 수의 데이터 바이트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a3e7279e934de308bb5e4f4f6b1c9d576cc478a" translate="yes" xml:space="preserve">
          <source>When dealing with CSS &quot;shorthand&quot; properties, the shorthand properties should be decomposed into their component longhand properties as appropriate, and when querying for their value, the form returned should be the shortest form exactly equivalent to the declarations made in the ruleset. However, if there is no shorthand declaration that could be added to the ruleset without changing in any way the rules already declared in the ruleset (i.e., by adding longhand rules that were previously not declared in the ruleset), then the empty string should be returned for the shorthand property.</source>
          <target state="translated">CSS &quot;속기&quot;속성을 다룰 때 속기 속성은 구성 요소의 긴 속성으로 적절하게 분해되어야하며 값을 쿼리 할 때 반환되는 형식은 규칙 집합에서 만든 선언과 정확히 동일한 가장 짧은 형식이어야합니다. 그러나 규칙 세트에서 이미 선언 된 규칙을 변경하지 않고 규칙 세트에 추가 할 수있는 속기 선언이없는 경우 (즉, 이전에 규칙 세트에서 선언되지 않은 긴 규칙을 추가하여) 빈 문자열은 다음과 같아야합니다. 속기 속성에 대해 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="538871f766ab351c2d645502820fda06341f2446" translate="yes" xml:space="preserve">
          <source>When decoding, the &lt;code&gt;UTF-16&lt;/code&gt; charset interprets the byte-order mark at the beginning of the input stream to indicate the byte-order of the stream but defaults to big-endian if there is no byte-order mark; when encoding, it uses big-endian byte order and writes a big-endian byte-order mark.</source>
          <target state="translated">디코딩시 &lt;code&gt;UTF-16&lt;/code&gt; 문자 세트는 입력 스트림의 시작 부분에서 바이트 순서 표시를 해석하여 스트림의 바이트 순서를 표시하지만 바이트 순서 표시가 없으면 기본적으로 빅 엔디안으로 설정됩니다. 인코딩시 빅 엔디안 바이트 순서를 사용하고 빅 엔디안 바이트 순서 표시를 씁니다.</target>
        </trans-unit>
        <trans-unit id="5d918b0ea7fbe3a38f352e3c01e13aa510f07228" translate="yes" xml:space="preserve">
          <source>When decoding, the &lt;code&gt;UTF-16BE&lt;/code&gt; and &lt;code&gt;UTF-16LE&lt;/code&gt; charsets interpret the initial byte-order marks as a &lt;small&gt;ZERO-WIDTH NON-BREAKING SPACE&lt;/small&gt;; when encoding, they do not write byte-order marks.</source>
          <target state="translated">디코딩시 &lt;code&gt;UTF-16BE&lt;/code&gt; 및 &lt;code&gt;UTF-16LE&lt;/code&gt; 문자 세트는 초기 바이트 순서 표시를 &lt;small&gt;ZERO-WIDTH NON-BREAKING SPACE&lt;/small&gt; 로 해석합니다 . 인코딩 할 때 바이트 순서 표시를 쓰지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e1bbaedc1e7a3af98446547c47a00777304dd4bc" translate="yes" xml:space="preserve">
          <source>When designing applications that use the &lt;code&gt;JTable&lt;/code&gt; it is worth paying close attention to the data structures that will represent the table's data. The &lt;code&gt;DefaultTableModel&lt;/code&gt; is a model implementation that uses a &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vector&lt;/code&gt;s of &lt;code&gt;Object&lt;/code&gt;s to store the cell values. As well as copying the data from an application into the &lt;code&gt;DefaultTableModel&lt;/code&gt;, it is also possible to wrap the data in the methods of the &lt;code&gt;TableModel&lt;/code&gt; interface so that the data can be passed to the &lt;code&gt;JTable&lt;/code&gt; directly, as in the example above. This often results in more efficient applications because the model is free to choose the internal representation that best suits the data. A good rule of thumb for deciding whether to use the &lt;code&gt;AbstractTableModel&lt;/code&gt; or the &lt;code&gt;DefaultTableModel&lt;/code&gt; is to use the &lt;code&gt;AbstractTableModel&lt;/code&gt; as the base class for creating subclasses and the &lt;code&gt;DefaultTableModel&lt;/code&gt; when subclassing is not required.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; 을 사용하는 응용 프로그램을 설계 할 때 테이블의 데이터를 나타내는 데이터 구조에 세심한주의를 기울일 필요가 있습니다. &lt;code&gt;DefaultTableModel&lt;/code&gt; 사용하는 모델 구현 &lt;code&gt;Vector&lt;/code&gt; 의 &lt;code&gt;Vector&lt;/code&gt; 의의 &lt;code&gt;Object&lt;/code&gt; 셀 값을 저장할들. 애플리케이션에서 &lt;code&gt;DefaultTableModel&lt;/code&gt; 로 데이터를 복사하는 것뿐만 아니라 데이터가 &lt;code&gt;JTable&lt;/code&gt; 로 전달 될 수 있도록 &lt;code&gt;TableModel&lt;/code&gt; 인터페이스 의 메소드에 데이터를 래핑하는 것도 가능합니다.위의 예에서와 같이 직접. 모델이 데이터에 가장 적합한 내부 표현을 자유롭게 선택할 수 있기 때문에 종종 더 효율적인 응용 프로그램이 생성됩니다. &lt;code&gt;AbstractTableModel&lt;/code&gt; 또는 &lt;code&gt;DefaultTableModel&lt;/code&gt; 을 사용할지 여부를 결정하는 좋은 방법은 &lt;code&gt;AbstractTableModel&lt;/code&gt; 을 서브 클래스 생성을위한 기본 클래스로 사용하고 서브 클래 싱이 필요하지 않은 경우 &lt;code&gt;DefaultTableModel&lt;/code&gt; 을 사용 하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="59dd531cc5c7b8c2c34d67569898edd73dd7c276" translate="yes" xml:space="preserve">
          <source>When developing your bean, you can implement the bean features required for your application task omitting the rest of the &lt;code&gt;BeanInfo&lt;/code&gt; features. They will be obtained through the automatic analysis by using the low-level reflection of the bean methods and applying standard design patterns. You have an opportunity to provide additional bean information through various descriptor classes.</source>
          <target state="translated">Bean을 개발할 때 나머지 &lt;code&gt;BeanInfo&lt;/code&gt; 기능을 생략하여 애플리케이션 태스크에 필요한 Bean 기능을 구현할 수 있습니다. 그것들은 빈 메소드의 저수준 반영을 사용하고 표준 디자인 패턴을 적용하여 자동 분석을 통해 얻을 수 있습니다. 다양한 디스크립터 클래스를 통해 추가 Bean 정보를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e298bb1eb347b2cc28bf3c3db8299caa60036f9" translate="yes" xml:space="preserve">
          <source>When disabled, the scaled design metrics are rounded or adjusted to integer distances for layout. The distances between any specific pair of glyphs will be more uniform on the device, but the density and total length of long strings may no longer match the theoretical intentions of the font designer. Disabling this hint will typically produce more readable results on low resolution devices like computer monitors.</source>
          <target state="translated">비활성화하면 확장 된 디자인 메트릭이 반올림되거나 레이아웃의 정수 거리로 조정됩니다. 특정 글리프 쌍 사이의 거리는 장치에서 더 균일하지만 긴 문자열의 밀도와 총 길이는 더 이상 글꼴 디자이너의 이론적 의도와 일치하지 않을 수 있습니다. 이 힌트를 비활성화하면 일반적으로 컴퓨터 모니터와 같은 저해상도 장치에서 더 읽기 쉬운 결과가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="984d0d26836dd3f7be2af922a5a2560cc3df5fe1" translate="yes" xml:space="preserve">
          <source>When displaying the &lt;code&gt;JToolTip&lt;/code&gt;, the &lt;code&gt;ToolTipManager&lt;/code&gt; chooses to use a lightweight &lt;code&gt;JPanel&lt;/code&gt; if it fits.</source>
          <target state="translated">표시 용하는 경우 &lt;code&gt;JToolTip&lt;/code&gt; 을 의 &lt;code&gt;ToolTipManager&lt;/code&gt; 에는 경량 사용하도록 선택 &lt;code&gt;JPanel&lt;/code&gt; 가 적합합니다.</target>
        </trans-unit>
        <trans-unit id="6d1107a71bf9e4fe0583e9859fa2adb2225f96b2" translate="yes" xml:space="preserve">
          <source>When displaying the &lt;code&gt;JToolTip&lt;/code&gt;, the &lt;code&gt;ToolTipManager&lt;/code&gt; chooses to use a lightweight &lt;code&gt;JPanel&lt;/code&gt; if it fits. This method allows you to disable this feature. You have to do disable it if your application mixes light weight and heavy weights components.</source>
          <target state="translated">표시 용하는 경우 &lt;code&gt;JToolTip&lt;/code&gt; 을 의 &lt;code&gt;ToolTipManager&lt;/code&gt; 에는 경량 사용하도록 선택 &lt;code&gt;JPanel&lt;/code&gt; 가 적합합니다. 이 방법을 사용하면이 기능을 비활성화 할 수 있습니다. 응용 프로그램이 가벼운 구성 요소와 무거운 구성 요소를 함께 사용하는 경우 비활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="4c8c9e94fef6a9d661fc4f926a9c52a00769d2e8" translate="yes" xml:space="preserve">
          <source>When dragging a component, reassigning it to the drag layer ensures that it is positioned over every other component in the container. When finished dragging, it can be reassigned to its normal layer.</source>
          <target state="translated">구성 요소를 드래그 할 때 드래그 레이어에 다시 할당하면 컨테이너의 다른 모든 구성 요소 위에 배치됩니다. 드래그가 끝나면 일반 레이어에 다시 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="509eab7dc545a495647c552331312cb067390e94" translate="yes" xml:space="preserve">
          <source>When drawing operations are performed, pixels which are the current color are changed to the specified color, and vice versa.</source>
          <target state="translated">그리기 작업을 수행하면 현재 색상 인 픽셀이 지정된 색상으로 변경되고 그 반대의 경우도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="f7dc328ec17b4ced8684c2b7e2f146a6ba17ed33" translate="yes" xml:space="preserve">
          <source>When editing, this will be the Component that is doing the actual editing.</source>
          <target state="translated">편집 할 때 실제 편집을 수행하는 컴포넌트가됩니다.</target>
        </trans-unit>
        <trans-unit id="1145f6b1027e817559c57cddc450ec5598c076bb" translate="yes" xml:space="preserve">
          <source>When elements are specified individually, this method provides a convenient way to add a few elements to an existing collection:</source>
          <target state="translated">요소가 개별적으로 지정된 경우이 메소드는 기존 콜렉션에 몇 가지 요소를 추가하는 편리한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f0547e7d1fe9e7682b31c5b8e679a8b7cf7cdac7" translate="yes" xml:space="preserve">
          <source>When encoding a String, the following rules apply:</source>
          <target state="translated">문자열을 인코딩 할 때 다음 규칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2886df50730aa358b631dfc37a5f87ecf532d285" translate="yes" xml:space="preserve">
          <source>When entering full-screen mode, all the translucency effects are reset for the window. Its shape is set to &lt;code&gt;null&lt;/code&gt;, the opacity value is set to 1.0f, and the background color alpha is set to 255 (completely opaque). These values are not restored when returning to windowed mode.</source>
          <target state="translated">전체 화면 모드로 들어가면 창에 대한 모든 반투명 효과가 재설정됩니다. 모양은 &lt;code&gt;null&lt;/code&gt; 로 설정되고 불투명도 값은 1.0f로 설정되며 배경색 알파는 255 (완전 불투명)로 설정됩니다. 이 값은 창 모드로 돌아갈 때 복원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="80c01c7c80e86af37db5c501ac99fcd713939de9" translate="yes" xml:space="preserve">
          <source>When entering full-screen mode, if the window to be used as a full-screen window is not visible, this method will make it visible. It will remain visible when returning to windowed mode.</source>
          <target state="translated">전체 화면 모드로 들어갈 때 전체 화면 창으로 사용할 창이 표시되지 않으면이 방법을 사용하면 표시됩니다. 창 모드로 돌아 가면 계속 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="5f295f2bcf4f51adce71cb39e573a72525869fe4" translate="yes" xml:space="preserve">
          <source>When errors are found by the validator, the parser is responsible to report them to the user-specified &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; (or if the error handler is not set, ignore them or throw them), just like any other errors found by the parser itself. In other words, if the user-specified &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; is set, it must receive those errors, and if not, they must be treated according to the implementation specific default error handling rules.</source>
          <target state="translated">유효성 검사기에서 오류를 발견하면 파서는 파서 자체에서 발견 한 다른 오류와 마찬가지로 사용자 지정 &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt; 에 오류 를보고해야합니다 (또는 오류 처리기가 설정되지 않은 경우 무시하거나 throw). 즉, 사용자 지정 &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt; 가 설정되면 해당 오류를 수신해야하며 그렇지 않은 경우 구현 특정 기본 오류 처리 규칙에 따라 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="519e81f7ec22f984619e01262e1e5c7f97e82d8a" translate="yes" xml:space="preserve">
          <source>When executed in parallel, multiple intermediate results may be instantiated, populated, and merged so as to maintain isolation of mutable data structures. Therefore, even when executed in parallel with non-thread-safe data structures (such as &lt;code&gt;ArrayList&lt;/code&gt;), no additional synchronization is needed for a parallel reduction.</source>
          <target state="translated">병렬로 실행될 때, 가변 데이터 구조의 격리를 유지하기 위해 다수의 중간 결과가 인스턴스화되고, 채워지고, 병합 될 수있다. 따라서 스레드로부터 안전하지 않은 데이터 구조 (예 : &lt;code&gt;ArrayList&lt;/code&gt; ) 와 병렬로 실행될 때에도 병렬 감소를 위해 추가 동기화가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e56182ec56b64aac2076f02ce7d0f6f5838a88a0" translate="yes" xml:space="preserve">
          <source>When expanding the services that a module uses or provides then the onus is on the agent to ensure that the service type will be accessible at each instrumentation site where the service type is used. This method does not check if the service type is a member of the module or in a package exported to the module by another module that it reads.</source>
          <target state="translated">모듈이 사용하거나 제공하는 서비스를 확장 할 때 서비스 유형이 사용되는 각 계측 사이트에서 서비스 유형에 액세스 할 수 있도록 에이전트에 대한 책임이 있습니다. 이 메서드는 서비스 유형이 모듈의 구성원인지 또는 읽은 다른 모듈에서 모듈로 내 보낸 패키지에 있는지 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7f0b5af857f1afde8bd6a1ceed3f08040c8b1571" translate="yes" xml:space="preserve">
          <source>When factor is, for example, 0.5f the result represents 'the mid-point' of its input - an operation that is useful for centering components in a container.</source>
          <target state="translated">예를 들어 factor가 0.5f이면 결과는 입력의 '중간 점'을 나타냅니다. 이는 컨테이너의 구성 요소를 중앙에 배치하는 데 유용한 작업입니다.</target>
        </trans-unit>
        <trans-unit id="d7ba7db81667141a1f9fae4de090c1beacde1d2f" translate="yes" xml:space="preserve">
          <source>When first constructed, an &lt;code&gt;X509CRLSelector&lt;/code&gt; has no criteria enabled and each of the &lt;code&gt;get&lt;/code&gt; methods return a default value (&lt;code&gt;null&lt;/code&gt;). Therefore, the &lt;a href=&quot;#match(java.security.cert.CRL)&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; method would return &lt;code&gt;true&lt;/code&gt; for any &lt;code&gt;X509CRL&lt;/code&gt;. Typically, several criteria are enabled (by calling &lt;a href=&quot;#setIssuers(java.util.Collection)&quot;&gt;&lt;code&gt;setIssuers&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#setDateAndTime(java.util.Date)&quot;&gt;&lt;code&gt;setDateAndTime&lt;/code&gt;&lt;/a&gt;, for instance) and then the &lt;code&gt;X509CRLSelector&lt;/code&gt; is passed to &lt;a href=&quot;certstore#getCRLs(java.security.cert.CRLSelector)&quot;&gt;&lt;code&gt;CertStore.getCRLs&lt;/code&gt;&lt;/a&gt; or some similar method.</source>
          <target state="translated">처음 생성 될 때 &lt;code&gt;X509CRLSelector&lt;/code&gt; 에는 사용 가능한 기준이 없으며 각 &lt;code&gt;get&lt;/code&gt; 메소드는 기본값 ( &lt;code&gt;null&lt;/code&gt; )을 리턴 합니다. 따라서 &lt;a href=&quot;#match(java.security.cert.CRL)&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt; 메서드는 모든 &lt;code&gt;X509CRL&lt;/code&gt; 에 대해 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 일반적으로 몇 가지 기준이 활성화되고 ( 예를 들어 &lt;a href=&quot;#setIssuers(java.util.Collection)&quot;&gt; &lt;code&gt;setIssuers&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#setDateAndTime(java.util.Date)&quot;&gt; &lt;code&gt;setDateAndTime&lt;/code&gt; &lt;/a&gt; 을 호출 하여) &lt;code&gt;X509CRLSelector&lt;/code&gt; 가 &lt;a href=&quot;certstore#getCRLs(java.security.cert.CRLSelector)&quot;&gt; &lt;code&gt;CertStore.getCRLs&lt;/code&gt; &lt;/a&gt; 또는 유사한 메서드에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="9649a12169ece945cbfdacee36bb86668bdc338e" translate="yes" xml:space="preserve">
          <source>When first constructed, an &lt;code&gt;X509CRLSelector&lt;/code&gt; has no criteria enabled and each of the &lt;code&gt;get&lt;/code&gt; methods return a default value (&lt;code&gt;null&lt;/code&gt;). Therefore, the &lt;a href=&quot;x509crlselector#match-java.security.cert.CRL-&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; method would return &lt;code&gt;true&lt;/code&gt; for any &lt;code&gt;X509CRL&lt;/code&gt;. Typically, several criteria are enabled (by calling &lt;a href=&quot;x509crlselector#setIssuers-java.util.Collection-&quot;&gt;&lt;code&gt;setIssuers&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;x509crlselector#setDateAndTime-java.util.Date-&quot;&gt;&lt;code&gt;setDateAndTime&lt;/code&gt;&lt;/a&gt;, for instance) and then the &lt;code&gt;X509CRLSelector&lt;/code&gt; is passed to &lt;a href=&quot;certstore#getCRLs-java.security.cert.CRLSelector-&quot;&gt;&lt;code&gt;CertStore.getCRLs&lt;/code&gt;&lt;/a&gt; or some similar method.</source>
          <target state="translated">&lt;code&gt;X509CRLSelector&lt;/code&gt; 가 처음 생성 될 때 기준을 사용할 수 없으며 각 &lt;code&gt;get&lt;/code&gt; 메소드가 기본값 ( &lt;code&gt;null&lt;/code&gt; )을 리턴 합니다. 따라서 &lt;a href=&quot;x509crlselector#match-java.security.cert.CRL-&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt; 메소드는 모든 &lt;code&gt;X509CRL&lt;/code&gt; 에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 일반적으로 몇 가지 기준 (예 : &lt;a href=&quot;x509crlselector#setIssuers-java.util.Collection-&quot;&gt; &lt;code&gt;setIssuers&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;x509crlselector#setDateAndTime-java.util.Date-&quot;&gt; &lt;code&gt;setDateAndTime&lt;/code&gt; &lt;/a&gt; 을 호출하여)을 활성화 한 다음 &lt;code&gt;X509CRLSelector&lt;/code&gt; 를 &lt;a href=&quot;certstore#getCRLs-java.security.cert.CRLSelector-&quot;&gt; &lt;code&gt;CertStore.getCRLs&lt;/code&gt; &lt;/a&gt; 또는 유사한 메소드로 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="20860ac3af47ff5e6527ceeb9db68080e38b9d93" translate="yes" xml:space="preserve">
          <source>When first constructed, an &lt;code&gt;X509CertSelector&lt;/code&gt; has no criteria enabled and each of the &lt;code&gt;get&lt;/code&gt; methods return a default value (&lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; for the &lt;a href=&quot;#getBasicConstraints()&quot;&gt;&lt;code&gt;getBasicConstraints&lt;/code&gt;&lt;/a&gt; method). Therefore, the &lt;a href=&quot;#match(java.security.cert.Certificate)&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; method would return &lt;code&gt;true&lt;/code&gt; for any &lt;code&gt;X509Certificate&lt;/code&gt;. Typically, several criteria are enabled (by calling &lt;a href=&quot;#setIssuer(javax.security.auth.x500.X500Principal)&quot;&gt;&lt;code&gt;setIssuer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#setKeyUsage(boolean%5B%5D)&quot;&gt;&lt;code&gt;setKeyUsage&lt;/code&gt;&lt;/a&gt;, for instance) and then the &lt;code&gt;X509CertSelector&lt;/code&gt; is passed to &lt;a href=&quot;certstore#getCertificates(java.security.cert.CertSelector)&quot;&gt;&lt;code&gt;CertStore.getCertificates&lt;/code&gt;&lt;/a&gt; or some similar method.</source>
          <target state="translated">처음 생성 될 때 &lt;code&gt;X509CertSelector&lt;/code&gt; 에는 사용 가능한 기준이 없으며 각 &lt;code&gt;get&lt;/code&gt; 메소드는 기본값 ( &lt;a href=&quot;#getBasicConstraints()&quot;&gt; &lt;code&gt;getBasicConstraints&lt;/code&gt; &lt;/a&gt; 메소드의 경우 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;-1&lt;/code&gt; ) 을 리턴합니다 . 따라서 &lt;a href=&quot;#match(java.security.cert.Certificate)&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt; 메서드는 모든 &lt;code&gt;X509Certificate&lt;/code&gt; 에 대해 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 일반적으로 몇 가지 기준이 활성화되고 (예 : &lt;a href=&quot;#setIssuer(javax.security.auth.x500.X500Principal)&quot;&gt; &lt;code&gt;setIssuer&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#setKeyUsage(boolean%5B%5D)&quot;&gt; &lt;code&gt;setKeyUsage&lt;/code&gt; &lt;/a&gt; 호출 ) &lt;code&gt;X509CertSelector&lt;/code&gt; 가 &lt;a href=&quot;certstore#getCertificates(java.security.cert.CertSelector)&quot;&gt; &lt;code&gt;CertStore.getCertificates&lt;/code&gt; &lt;/a&gt; 또는 유사한 메서드에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="d650c98b41df8d2991fdd69b36d1bd6550c57b66" translate="yes" xml:space="preserve">
          <source>When first constructed, an &lt;code&gt;X509CertSelector&lt;/code&gt; has no criteria enabled and each of the &lt;code&gt;get&lt;/code&gt; methods return a default value (&lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; for the &lt;a href=&quot;x509certselector#getBasicConstraints--&quot;&gt;&lt;code&gt;getBasicConstraints&lt;/code&gt;&lt;/a&gt; method). Therefore, the &lt;a href=&quot;x509certselector#match-java.security.cert.Certificate-&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; method would return &lt;code&gt;true&lt;/code&gt; for any &lt;code&gt;X509Certificate&lt;/code&gt;. Typically, several criteria are enabled (by calling &lt;a href=&quot;x509certselector#setIssuer-javax.security.auth.x500.X500Principal-&quot;&gt;&lt;code&gt;setIssuer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;x509certselector#setKeyUsage-boolean:A-&quot;&gt;&lt;code&gt;setKeyUsage&lt;/code&gt;&lt;/a&gt;, for instance) and then the &lt;code&gt;X509CertSelector&lt;/code&gt; is passed to &lt;a href=&quot;certstore#getCertificates-java.security.cert.CertSelector-&quot;&gt;&lt;code&gt;CertStore.getCertificates&lt;/code&gt;&lt;/a&gt; or some similar method.</source>
          <target state="translated">최초로 구축 &lt;code&gt;X509CertSelector&lt;/code&gt; 의은 어떤 기준이 포함되지 않기 때문에 각각 &lt;code&gt;get&lt;/code&gt; 방법 (디폴트 값을 반환 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;-1&lt;/code&gt; 위한 &lt;a href=&quot;x509certselector#getBasicConstraints--&quot;&gt; &lt;code&gt;getBasicConstraints&lt;/code&gt; 의&lt;/a&gt; 방법). 따라서 &lt;a href=&quot;x509certselector#match-java.security.cert.Certificate-&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt; 메소드는 모든 &lt;code&gt;X509Certificate&lt;/code&gt; 에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 일반적으로 몇 가지 기준 (예 : &lt;a href=&quot;x509certselector#setIssuer-javax.security.auth.x500.X500Principal-&quot;&gt; &lt;code&gt;setIssuer&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;x509certselector#setKeyUsage-boolean:A-&quot;&gt; &lt;code&gt;setKeyUsage&lt;/code&gt; &lt;/a&gt; 호출)을 사용하도록 설정 한 다음 &lt;code&gt;X509CertSelector&lt;/code&gt; 를 &lt;a href=&quot;certstore#getCertificates-java.security.cert.CertSelector-&quot;&gt; &lt;code&gt;CertStore.getCertificates&lt;/code&gt; &lt;/a&gt; 또는 유사한 메소드로 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="6bdbc4072fa0aa2a890b6aafd2d77f59bcdf8288" translate="yes" xml:space="preserve">
          <source>When flip contents are &lt;code&gt;BACKGROUND&lt;/code&gt;, the contents of the back buffer are cleared with the background color after flipping.</source>
          <target state="translated">반전 내용이 &lt;code&gt;BACKGROUND&lt;/code&gt; 인 경우 반전 후 백 버퍼의 내용이 배경색 으로 지워집니다.</target>
        </trans-unit>
        <trans-unit id="63cdfb20b747808fb558b523ddbdc11e871de470" translate="yes" xml:space="preserve">
          <source>When flip contents are &lt;code&gt;COPIED&lt;/code&gt;, the contents of the back buffer are copied to the front buffer when flipping.</source>
          <target state="translated">뒤집기 내용이 &lt;code&gt;COPIED&lt;/code&gt; 인 경우 뒤집을 때 백 버퍼의 내용이 전면 버퍼로 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="b82198f8743b3ee395f98263a6da347029744bd3" translate="yes" xml:space="preserve">
          <source>When flip contents are &lt;code&gt;PRIOR&lt;/code&gt;, the contents of the back buffer are the prior contents of the front buffer (a true page flip).</source>
          <target state="translated">플립 컨텐츠가 &lt;code&gt;PRIOR&lt;/code&gt; 인 경우 백 버퍼의 컨텐츠는 프론트 버퍼의 이전 컨텐츠입니다 (진정한 페이지 플립).</target>
        </trans-unit>
        <trans-unit id="6e1e2b99b6522b5b56f0b7775f1acd75a21bc115" translate="yes" xml:space="preserve">
          <source>When flip contents are &lt;code&gt;UNDEFINED&lt;/code&gt;, the contents of the back buffer are undefined after flipping.</source>
          <target state="translated">반전 내용이 &lt;code&gt;UNDEFINED&lt;/code&gt; 이면 반전 후 백 버퍼의 내용이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0ff93d04cdedfee3d54c1d406cb192a14d80e305" translate="yes" xml:space="preserve">
          <source>When formatting, if the temporal object contains a date, then it will be converted to a date in the override chronology. Whether the temporal contains a date is determined by querying the &lt;a href=&quot;../temporal/chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;EPOCH_DAY&lt;/code&gt;&lt;/a&gt; field. Any time or zone will be retained unaltered unless overridden.</source>
          <target state="translated">서식을 지정할 때 임시 개체에 날짜가 포함되어 있으면 재정의 연대기의 날짜로 변환됩니다. 시간에 날짜가 포함되는지 여부는 &lt;a href=&quot;../temporal/chronofield#EPOCH_DAY&quot;&gt; &lt;code&gt;EPOCH_DAY&lt;/code&gt; &lt;/a&gt; 필드 를 쿼리하여 결정됩니다 . 재정의되지 않는 한 모든 시간 또는 영역은 변경되지 않은 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="c46c21d901a51405a6408d147e04ecbd8a3f7e31" translate="yes" xml:space="preserve">
          <source>When formatting, if the temporal object contains an instant, then it will be converted to a zoned date-time using the override zone. Whether the temporal is an instant is determined by querying the &lt;a href=&quot;../temporal/chronofield#INSTANT_SECONDS&quot;&gt;&lt;code&gt;INSTANT_SECONDS&lt;/code&gt;&lt;/a&gt; field. If the input has a chronology then it will be retained unless overridden. If the input does not have a chronology, such as &lt;code&gt;Instant&lt;/code&gt;, then the ISO chronology will be used.</source>
          <target state="translated">서식을 지정할 때 임시 개체에 순간 개체가 포함 된 경우 재정의 영역을 사용하여 영역 날짜 / 시간으로 변환됩니다. 시간이 순간인지 여부는 &lt;a href=&quot;../temporal/chronofield#INSTANT_SECONDS&quot;&gt; &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; &lt;/a&gt; 필드 를 쿼리하여 결정됩니다 . 입력에 연대기가있는 경우 재정의되지 않는 한 입력이 유지됩니다. 입력에 &lt;code&gt;Instant&lt;/code&gt; 와 같은 연대기가없는 경우 ISO 연대기가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="aae3a28f3acb93e9d672fad6d406dd8367567c9e" translate="yes" xml:space="preserve">
          <source>When formatting, the instant will always be suffixed by 'Z' to indicate UTC. When parsing, the behaviour of &lt;a href=&quot;#appendOffsetId()&quot;&gt;&lt;code&gt;appendOffsetId()&lt;/code&gt;&lt;/a&gt; will be used to parse the offset, converting the instant to UTC as necessary.</source>
          <target state="translated">형식을 지정할 때 인스턴트는 UTC를 나타 내기 위해 항상 'Z'접미사가 붙습니다. 구문 분석 할 때 &lt;a href=&quot;#appendOffsetId()&quot;&gt; &lt;code&gt;appendOffsetId()&lt;/code&gt; &lt;/a&gt; 의 동작은 오프셋을 구문 분석하는 데 사용되며 필요에 따라 인스턴트를 UTC로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e3ccef18e16794ea6e4ca8f3deb0092f315cf23d" translate="yes" xml:space="preserve">
          <source>When four parts are specified, each is interpreted as a byte of data and assigned, from left to right, to the four bytes of an IPv4 address.</source>
          <target state="translated">4 개의 부분이 지정되면 각각은 데이터 바이트로 해석되고 왼쪽에서 오른쪽으로 IPv4 주소의 4 바이트에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="774dda26093b2a90cd6b2fb725005764df15f2fa" translate="yes" xml:space="preserve">
          <source>When getting a run with no explicit attributes specified (i.e., calling &lt;a href=&quot;#getRunStart()&quot;&gt;&lt;code&gt;getRunStart()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getRunLimit()&quot;&gt;&lt;code&gt;getRunLimit()&lt;/code&gt;&lt;/a&gt;), any contiguous text segments having the same attributes (the same set of attribute/value pairs) are treated as separate runs if the attributes have been given to those text segments separately.</source>
          <target state="translated">명시 적 속성이 지정되지 않은 실행을 &lt;a href=&quot;#getRunStart()&quot;&gt; &lt;code&gt;getRunStart()&lt;/code&gt; &lt;/a&gt; (즉, getRunStart () 및 &lt;a href=&quot;#getRunLimit()&quot;&gt; &lt;code&gt;getRunLimit()&lt;/code&gt; &lt;/a&gt; 호출 ) 동일한 속성 (동일한 속성 / 값 쌍 집합)을 가진 연속 텍스트 세그먼트는 속성이 지정된 경우 별도의 실행으로 처리됩니다. 해당 텍스트 세그먼트에 별도로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="1ae85906e6fddb6d1dc408436e61d763b88ac485" translate="yes" xml:space="preserve">
          <source>When getting a run with no explicit attributes specified (i.e., calling &lt;a href=&quot;attributedcharacteriterator#getRunStart--&quot;&gt;&lt;code&gt;getRunStart()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;attributedcharacteriterator#getRunLimit--&quot;&gt;&lt;code&gt;getRunLimit()&lt;/code&gt;&lt;/a&gt;), any contiguous text segments having the same attributes (the same set of attribute/value pairs) are treated as separate runs if the attributes have been given to those text segments separately.</source>
          <target state="translated">명시 적 속성이 지정되지 않은 실행을 &lt;a href=&quot;attributedcharacteriterator#getRunStart--&quot;&gt; &lt;code&gt;getRunStart()&lt;/code&gt; &lt;/a&gt; (예 : getRunStart () 및 &lt;a href=&quot;attributedcharacteriterator#getRunLimit--&quot;&gt; &lt;code&gt;getRunLimit()&lt;/code&gt; &lt;/a&gt; 호출 ), 속성이 동일한 경우 동일한 속성 (동일한 속성 / 값 쌍 세트)을 가진 인접한 텍스트 세그먼트는 별도의 실행으로 처리됩니다. 해당 텍스트 세그먼트에 개별적으로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="b5ba05bc071c59eee04254d6fa68df75d14578d6" translate="yes" xml:space="preserve">
          <source>When initially formatting a value if the length of the string is less than the length of the mask, two things can happen. Either the placeholder string will be used, or the placeholder character will be used. Precedence is given to the placeholder string. For example:</source>
          <target state="translated">문자열의 길이가 마스크의 길이보다 작은 경우 처음에 값을 형식화 할 때 두 가지 일이 발생할 수 있습니다. 자리 표시 자 문자열이 사용되거나 자리 표시 자 문자가 사용됩니다. 자리 표시 자 문자열에 우선 순위가 지정됩니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="8dd1bcbc018d3b4bb41eefe5512da3834ff920d7" translate="yes" xml:space="preserve">
          <source>When invoked on an &lt;code&gt;ArrayType&lt;/code&gt; instance, the &lt;a href=&quot;opentype#getClassName()&quot;&gt;&lt;code&gt;getClassName&lt;/code&gt;&lt;/a&gt; method returns the class name of the array instances it describes (following the rules defined by the &lt;a href=&quot;../../../../java.base/java/lang/class#getName()&quot;&gt;&lt;code&gt;getName&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;java.lang.Class&lt;/code&gt;), not the class name of the array elements (which is returned by a call to &lt;code&gt;getElementOpenType().getClassName()&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ArrayType&lt;/code&gt; 인스턴스에서 호출 될 때 &lt;a href=&quot;opentype#getClassName()&quot;&gt; &lt;code&gt;getClassName&lt;/code&gt; &lt;/a&gt; 메소드는 설명하는 배열 인스턴스의 클래스 이름을 리턴합니다 ( &lt;code&gt;java.lang.Class&lt;/code&gt; 의 &lt;a href=&quot;../../../../java.base/java/lang/class#getName()&quot;&gt; &lt;code&gt;getName&lt;/code&gt; &lt;/a&gt; 메소드에 정의 된 규칙에 따라 ). &lt;code&gt;getElementOpenType().getClassName()&lt;/code&gt; )에 대한 호출 .</target>
        </trans-unit>
        <trans-unit id="302acd17292bb6cb5b2e63e5ea447c50cffa715c" translate="yes" xml:space="preserve">
          <source>When invoked on an &lt;code&gt;ArrayType&lt;/code&gt; instance, the &lt;a href=&quot;opentype#getClassName--&quot;&gt;&lt;code&gt;getClassName&lt;/code&gt;&lt;/a&gt; method returns the class name of the array instances it describes (following the rules defined by the &lt;a href=&quot;../../../java/lang/class#getName--&quot;&gt;&lt;code&gt;getName&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;java.lang.Class&lt;/code&gt;), not the class name of the array elements (which is returned by a call to &lt;code&gt;getElementOpenType().getClassName()&lt;/code&gt;).</source>
          <target state="translated">온 호출되면 &lt;code&gt;ArrayType&lt;/code&gt; 의 인스턴스의 &lt;a href=&quot;opentype#getClassName--&quot;&gt; &lt;code&gt;getClassName&lt;/code&gt; &lt;/a&gt; 메소드가 복귀 (의해 정의 된 규칙에 따라이를 설명 배열 인스턴스의 클래스 이름 &lt;a href=&quot;../../../java/lang/class#getName--&quot;&gt; &lt;code&gt;getName&lt;/code&gt; 의&lt;/a&gt; 방법 &lt;code&gt;java.lang.Class&lt;/code&gt; 에 의해 반환) 배열 요소 아닌 클래스 이름 ( 를 호출 &lt;code&gt;getElementOpenType().getClassName()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="580b70b0aa9940a4d315897412a3c8e6a50c10fb" translate="yes" xml:space="preserve">
          <source>When it is desirable to group together a number of Permission objects of the same type, the &lt;code&gt;newPermissionCollection&lt;/code&gt; method on that particular type of Permission object should first be called. The default behavior (from the Permission class) is to simply return null. Subclasses of class Permission override the method if they need to store their permissions in a particular PermissionCollection object in order to provide the correct semantics when the &lt;code&gt;PermissionCollection.implies&lt;/code&gt; method is called. If a non-null value is returned, that PermissionCollection must be used. If null is returned, then the caller of &lt;code&gt;newPermissionCollection&lt;/code&gt; is free to store permissions of the given type in any PermissionCollection they choose (one that uses a Hashtable, one that uses a Vector, etc).</source>
          <target state="translated">동일한 유형의 여러 Permission 객체를 그룹화하는 것이 바람직한 경우 해당 특정 유형의 Permission 객체에 대한 &lt;code&gt;newPermissionCollection&lt;/code&gt; 메소드를 먼저 호출해야합니다. Permission 클래스의 기본 동작은 단순히 null을 반환하는 것입니다. &lt;code&gt;PermissionCollection.implies&lt;/code&gt; 메소드가 호출 될 때 올바른 의미를 제공하기 위해 Permission 클래스의 서브 클래스가 특정 PermissionCollection 오브젝트에 권한을 저장해야하는 경우 메소드를 대체합니다 . 널이 아닌 값이 리턴되면 해당 PermissionCollection을 사용해야합니다. null이 반환되면 &lt;code&gt;newPermissionCollection&lt;/code&gt; 의 호출자 선택한 PermissionCollection (해시 테이블을 사용하는 것, 벡터를 사용하는 것 등)에 주어진 유형의 권한을 자유롭게 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce33c85f5d00ceaaf151e94b617d0fd035ff89e8" translate="yes" xml:space="preserve">
          <source>When leaf Views (such as LabelView) are rendering they should call into this method.</source>
          <target state="translated">리프 뷰 (예 : LabelView)가 렌더링 될 때이 메서드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bf1e959633bde681b0bed5cc3b7b643970517499" translate="yes" xml:space="preserve">
          <source>When leaf Views (such as LabelView) are rendering they should call into this method. If a highlight is in the given region it will be drawn immediately.</source>
          <target state="translated">리프 뷰 (예 : LabelView)가 렌더링 될 때이 메서드를 호출해야합니다. 강조 표시가 지정된 영역에 있으면 즉시 그려집니다.</target>
        </trans-unit>
        <trans-unit id="174a6496db7aea116f5760d2cbbff2da29431d36" translate="yes" xml:space="preserve">
          <source>When loading or instantiating a service provider in a module, &lt;code&gt;
 ServiceConfigurationError&lt;/code&gt; can be thrown for the following reasons:</source>
          <target state="translated">모듈에서 서비스 공급자를로드하거나 인스턴스화 할 때 다음과 같은 이유로 &lt;code&gt; ServiceConfigurationError&lt;/code&gt; 가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4328d60614b67a469dcc46dc7b40428e7a16ab80" translate="yes" xml:space="preserve">
          <source>When locating modules then any exceptions or errors thrown by the &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;findAll&lt;/code&gt; methods of the underlying module finders will be propagated to the caller of the resulting module finder's &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;findAll&lt;/code&gt; methods.</source>
          <target state="translated">모듈을 &lt;code&gt;find&lt;/code&gt; 때 기본 모듈 파인더의 &lt;code&gt;findAll&lt;/code&gt; 또는 findAll 메소드에서 발생한 예외 또는 오류 는 결과 모듈 파인더의 &lt;code&gt;find&lt;/code&gt; 또는 &lt;code&gt;findAll&lt;/code&gt; 메소드 의 호출자에게 전파됩니다 .</target>
        </trans-unit>
        <trans-unit id="16ba2f01e5d521afc7a1d8765c061f6962009acc" translate="yes" xml:space="preserve">
          <source>When locking and unlocking occur in different scopes, care must be taken to ensure that all code that is executed while the lock is held is protected by try-finally or try-catch to ensure that the lock is released when necessary.</source>
          <target state="translated">잠금 및 잠금 해제가 다른 범위에서 발생하는 경우 잠금이 유지되는 동안 실행되는 모든 코드가 try-finally 또는 try-catch로 보호되어 필요할 때 잠금이 해제되도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="d0d60a7362268503ac5f29c4e995b665bfa49ca4" translate="yes" xml:space="preserve">
          <source>When logging is enabled for the given level, the default implementation for this method calls &lt;code&gt;this.log(level, (ResourceBundle)null, msgSupplier.get(), (Object[])null);&lt;/code&gt;</source>
          <target state="translated">지정된 수준에 대해 로깅이 활성화 된 경우이 메서드의 기본 구현은 &lt;code&gt;this.log(level, (ResourceBundle)null, msgSupplier.get(), (Object[])null);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b48d582b593f5a0b71b33ebfba543a2007aa703" translate="yes" xml:space="preserve">
          <source>When logging is enabled for the given level, the default implementation for this method calls &lt;code&gt;this.log(level, (ResourceBundle)null, msgSupplier.get(), thrown);&lt;/code&gt;</source>
          <target state="translated">지정된 수준에 대해 로깅이 활성화 된 경우이 메서드의 기본 구현은 &lt;code&gt;this.log(level, (ResourceBundle)null, msgSupplier.get(), thrown);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1dd8bd9ca02efdcd9732b7cf62a3e53ee34a950" translate="yes" xml:space="preserve">
          <source>When logging is enabled for the given level, the default implementation for this method calls &lt;code&gt;this.log(level, (ResourceBundle)null, obj.toString(), (Object[])null);&lt;/code&gt;</source>
          <target state="translated">지정된 수준에 대해 로깅이 활성화되면이 메서드에 대한 기본 구현은 &lt;code&gt;this.log(level, (ResourceBundle)null, obj.toString(), (Object[])null);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6e7f5643792532437bd221471efc47beceaab52" translate="yes" xml:space="preserve">
          <source>When looking for a &lt;code&gt;ResourceBundle&lt;/code&gt;, the logger will first look at whether a bundle was specified using &lt;a href=&quot;#setResourceBundle(java.util.ResourceBundle)&quot;&gt;&lt;code&gt;setResourceBundle&lt;/code&gt;&lt;/a&gt;, and then only whether a resource bundle name was specified through the &lt;a href=&quot;#getLogger(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;getLogger&lt;/code&gt;&lt;/a&gt; factory method. If no &lt;code&gt;ResourceBundle&lt;/code&gt; or no resource bundle name is found, then it will use the nearest &lt;code&gt;ResourceBundle&lt;/code&gt; or resource bundle name inherited from its parent tree.</source>
          <target state="translated">&lt;code&gt;ResourceBundle&lt;/code&gt; 을 찾을 때 로거는 먼저 &lt;a href=&quot;#setResourceBundle(java.util.ResourceBundle)&quot;&gt; &lt;code&gt;setResourceBundle&lt;/code&gt; 을&lt;/a&gt; 사용하여 번들이 지정되었는지 여부를 확인한 다음 &lt;a href=&quot;#getLogger(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;getLogger&lt;/code&gt; &lt;/a&gt; 팩토리 메소드를 통해 리소스 번들 이름이 지정되었는지 여부 만 확인합니다 . 어떤 경우 &lt;code&gt;ResourceBundle&lt;/code&gt; 또는 전혀 자원 번들 이름이 발견되지 않는, 그것은 가장 가까운 사용 &lt;code&gt;ResourceBundle&lt;/code&gt; 하거나 부모 트리에서 상속 번들 이름을 자원.</target>
        </trans-unit>
        <trans-unit id="1a0408130f81738a723c33c438670c4461590e47" translate="yes" xml:space="preserve">
          <source>When looking for a &lt;code&gt;ResourceBundle&lt;/code&gt;, the logger will first look at whether a bundle was specified using &lt;a href=&quot;logger#setResourceBundle-java.util.ResourceBundle-&quot;&gt;&lt;code&gt;setResourceBundle&lt;/code&gt;&lt;/a&gt;, and then only whether a resource bundle name was specified through the &lt;a href=&quot;logger#getLogger-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;getLogger&lt;/code&gt;&lt;/a&gt; factory method. If no &lt;code&gt;ResourceBundle&lt;/code&gt; or no resource bundle name is found, then it will use the nearest &lt;code&gt;ResourceBundle&lt;/code&gt; or resource bundle name inherited from its parent tree.</source>
          <target state="translated">&lt;code&gt;ResourceBundle&lt;/code&gt; 을 찾을 때 로거는 먼저 &lt;a href=&quot;logger#setResourceBundle-java.util.ResourceBundle-&quot;&gt; &lt;code&gt;setResourceBundle&lt;/code&gt; 을&lt;/a&gt; 사용하여 번들이 지정되었는지 여부를 확인한 다음 &lt;a href=&quot;logger#getLogger-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;getLogger&lt;/code&gt; &lt;/a&gt; 팩토리 메소드를 통해 자원 번들 이름이 지정되었는지 여부를 확인합니다 . 어떤 경우 &lt;code&gt;ResourceBundle&lt;/code&gt; 또는 전혀 자원 번들 이름이 발견되지 않는, 그것은 가장 가까운 사용 &lt;code&gt;ResourceBundle&lt;/code&gt; 하거나 부모 트리에서 상속 번들 이름을 자원.</target>
        </trans-unit>
        <trans-unit id="0a8e75474aa9a3fb3f0db3e2785307495315a60e" translate="yes" xml:space="preserve">
          <source>When looking up a time zone name, the &lt;a href=&quot;resourcebundle.control#getCandidateLocales(java.lang.String,java.util.Locale)&quot;&gt;default &lt;code&gt;Locale&lt;/code&gt;search path of &lt;code&gt;ResourceBundle&lt;/code&gt;&lt;/a&gt; derived from the specified &lt;code&gt;locale&lt;/code&gt; is used. (No &lt;a href=&quot;resourcebundle.control#getFallbackLocale(java.lang.String,java.util.Locale)&quot;&gt;fallback &lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; search is performed.) If a time zone name in any &lt;code&gt;Locale&lt;/code&gt; of the search path, including &lt;a href=&quot;locale#ROOT&quot;&gt;&lt;code&gt;Locale.ROOT&lt;/code&gt;&lt;/a&gt;, is found, the name is returned. Otherwise, a string in the &lt;a href=&quot;#NormalizedCustomID&quot;&gt;normalized custom ID format&lt;/a&gt; is returned.</source>
          <target state="translated">시간대 이름을 조회 할 때 지정된 &lt;code&gt;locale&lt;/code&gt; 에서 파생 된 &lt;a href=&quot;resourcebundle.control#getCandidateLocales(java.lang.String,java.util.Locale)&quot;&gt; &lt;code&gt;ResourceBundle&lt;/code&gt; &lt;/a&gt; 의 기본 &lt;code&gt;Locale&lt;/code&gt; 검색 경로 가 사용됩니다. ( &lt;a href=&quot;resourcebundle.control#getFallbackLocale(java.lang.String,java.util.Locale)&quot;&gt;폴백 &lt;/a&gt; &lt;code&gt;Locale&lt;/code&gt; 검색은 수행 되지 않습니다 .) &lt;a href=&quot;locale#ROOT&quot;&gt; &lt;code&gt;Locale.ROOT&lt;/code&gt; 를&lt;/a&gt; 포함하여 검색 경로의 &lt;code&gt;Locale&lt;/code&gt; 에서 시간대 이름 이 발견되면 이름이 리턴됩니다. 그렇지 않으면 &lt;a href=&quot;#NormalizedCustomID&quot;&gt;정규화 된 사용자 지정 ID 형식&lt;/a&gt; 의 문자열 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="21d53a267b267d5210cc4f8a1f75a8f56a77b7e6" translate="yes" xml:space="preserve">
          <source>When looking up a time zone name, the &lt;a href=&quot;resourcebundle.control#getCandidateLocales(java.lang.String,java.util.Locale)&quot;&gt;default {@code Locale} search path of {@code ResourceBundle}&lt;/a&gt; derived from the specified &lt;code&gt;locale&lt;/code&gt; is used. (No &lt;a href=&quot;resourcebundle.control#getFallbackLocale(java.lang.String,java.util.Locale)&quot;&gt;fallback {@code Locale}&lt;/a&gt; search is performed.) If a time zone name in any &lt;code&gt;Locale&lt;/code&gt; of the search path, including &lt;a href=&quot;locale#ROOT&quot;&gt;&lt;code&gt;Locale.ROOT&lt;/code&gt;&lt;/a&gt;, is found, the name is returned. Otherwise, a string in the &lt;a href=&quot;#NormalizedCustomID&quot;&gt;normalized custom ID format&lt;/a&gt; is returned.</source>
          <target state="translated">시간대 이름을 조회 할 때 지정된 &lt;code&gt;locale&lt;/code&gt; 에서 파생 된 &lt;a href=&quot;resourcebundle.control#getCandidateLocales(java.lang.String,java.util.Locale)&quot;&gt;{@code ResourceBundle}&lt;/a&gt; 의 기본 {@code Locale} 검색 경로 가 사용됩니다. ( &lt;a href=&quot;resourcebundle.control#getFallbackLocale(java.lang.String,java.util.Locale)&quot;&gt;대체 {@code Locale}&lt;/a&gt; 검색은 수행되지 않습니다.) &lt;a href=&quot;locale#ROOT&quot;&gt; &lt;code&gt;Locale.ROOT&lt;/code&gt; 를&lt;/a&gt; 포함하여 검색 경로의 &lt;code&gt;Locale&lt;/code&gt; 에서 시간대 이름 이 발견되면 이름이 반환됩니다. 그렇지 않으면 &lt;a href=&quot;#NormalizedCustomID&quot;&gt;정규화 된 사용자 지정 ID 형식&lt;/a&gt; 의 문자열 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b9993ef66f72f6a538299eeaaa5c894846a8a38b" translate="yes" xml:space="preserve">
          <source>When looking up a time zone name, the &lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt;default &lt;code&gt;Locale&lt;/code&gt; search path of &lt;code&gt;ResourceBundle&lt;/code&gt;&lt;/a&gt; derived from the specified &lt;code&gt;locale&lt;/code&gt; is used. (No &lt;a href=&quot;resourcebundle.control#getFallbackLocale-java.lang.String-java.util.Locale-&quot;&gt;fallback &lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; search is performed.) If a time zone name in any &lt;code&gt;Locale&lt;/code&gt; of the search path, including &lt;a href=&quot;locale#ROOT&quot;&gt;&lt;code&gt;Locale.ROOT&lt;/code&gt;&lt;/a&gt;, is found, the name is returned. Otherwise, a string in the &lt;a href=&quot;#NormalizedCustomID&quot;&gt;normalized custom ID format&lt;/a&gt; is returned.</source>
          <target state="translated">시간대 이름을 &lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt;검색&lt;/a&gt; 할 때 지정된 &lt;code&gt;locale&lt;/code&gt; 에서 파생 된 &lt;code&gt;ResourceBundle&lt;/code&gt; 의 기본 &lt;code&gt;Locale&lt;/code&gt; 검색 경로 가 사용됩니다. &lt;a href=&quot;resourcebundle.control#getFallbackLocale-java.lang.String-java.util.Locale-&quot;&gt;폴백 &lt;/a&gt; &lt;code&gt;Locale&lt;/code&gt; 검색이 수행 되지 않습니다 . &lt;a href=&quot;locale#ROOT&quot;&gt; &lt;code&gt;Locale.ROOT&lt;/code&gt; 를&lt;/a&gt; 포함하여 검색 경로의 &lt;code&gt;Locale&lt;/code&gt; 에서 표준 시간대 이름 이 발견되면 이름이 반환됩니다. 그렇지 않으면 &lt;a href=&quot;#NormalizedCustomID&quot;&gt;정규화 된 사용자 정의 ID 형식&lt;/a&gt; 의 문자열 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="82f732f406e110c12eb9e6c2262a006ddaeaa4e2" translate="yes" xml:space="preserve">
          <source>When mapping resource bundle names to &lt;code&gt;ResourceBundle&lt;/code&gt; objects, the logger will first try to use the Thread's &lt;a href=&quot;../../../../java.base/java/lang/thread#getContextClassLoader()&quot;&gt;context class loader&lt;/a&gt; to map the given resource bundle name to a &lt;code&gt;ResourceBundle&lt;/code&gt;. If the thread context class loader is &lt;code&gt;null&lt;/code&gt;, it will try the &lt;a href=&quot;../../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;system class loader&lt;/a&gt; instead. If the &lt;code&gt;ResourceBundle&lt;/code&gt; is still not found, it will use the class loader of the first caller of the &lt;a href=&quot;#getLogger(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;getLogger&lt;/code&gt;&lt;/a&gt; factory method.</source>
          <target state="translated">리소스 번들 이름을 &lt;code&gt;ResourceBundle&lt;/code&gt; 객체에 매핑 할 때 로거는 먼저 Thread의 &lt;a href=&quot;../../../../java.base/java/lang/thread#getContextClassLoader()&quot;&gt;컨텍스트 클래스 로더&lt;/a&gt; 를 사용하여 주어진 리소스 번들 이름을 &lt;code&gt;ResourceBundle&lt;/code&gt; 에 매핑 하려고합니다 . 스레드 컨텍스트 클래스 로더가 &lt;code&gt;null&lt;/code&gt; 인 경우 대신 &lt;a href=&quot;../../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;시스템 클래스 로더&lt;/a&gt; 를 시도합니다 . 는 IF &lt;code&gt;ResourceBundle&lt;/code&gt; 아직 발견되지 않은, 그것의 첫 번째 호출 측의 클래스 로더를 사용합니다 &lt;a href=&quot;#getLogger(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;getLogger&lt;/code&gt; 의&lt;/a&gt; 팩토리 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="be5fb3253fce93d08c0e8b8dd053dbdf2da012a3" translate="yes" xml:space="preserve">
          <source>When mapping resource bundle names to &lt;code&gt;ResourceBundle&lt;/code&gt; objects, the logger will first try to use the Thread's &lt;a href=&quot;../../lang/thread#getContextClassLoader--&quot;&gt;context class loader&lt;/a&gt; to map the given resource bundle name to a &lt;code&gt;ResourceBundle&lt;/code&gt;. If the thread context class loader is &lt;code&gt;null&lt;/code&gt;, it will try the &lt;a href=&quot;../../lang/classloader#getSystemClassLoader--&quot;&gt;system class loader&lt;/a&gt; instead. If the &lt;code&gt;ResourceBundle&lt;/code&gt; is still not found, it will use the class loader of the first caller of the &lt;a href=&quot;logger#getLogger-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;getLogger&lt;/code&gt;&lt;/a&gt; factory method.</source>
          <target state="translated">자원 번들 이름을 &lt;code&gt;ResourceBundle&lt;/code&gt; 오브젝트에 맵핑 할 때 , 로거는 먼저 스레드의 &lt;a href=&quot;../../lang/thread#getContextClassLoader--&quot;&gt;컨텍스트 클래스 로더&lt;/a&gt; 를 사용하여 제공된 자원 번들 이름을 &lt;code&gt;ResourceBundle&lt;/code&gt; 에 맵핑 하려고 시도합니다 . 스레드 컨텍스트 클래스 로더가 &lt;code&gt;null&lt;/code&gt; 인 경우 &lt;a href=&quot;../../lang/classloader#getSystemClassLoader--&quot;&gt;시스템 클래스 로더를&lt;/a&gt; 대신 시도합니다 . 는 IF &lt;code&gt;ResourceBundle&lt;/code&gt; 아직 발견되지 않은, 그것의 첫 번째 호출 측의 클래스 로더를 사용합니다 &lt;a href=&quot;logger#getLogger-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;getLogger&lt;/code&gt; 의&lt;/a&gt; 팩토리 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="5817dccb8a24dc56e1279e061808065c8af108b0" translate="yes" xml:space="preserve">
          <source>When multiple certificates are available for use in a handshake, the implementation chooses what it considers the &quot;best&quot; certificate chain available, and transmits that to the other side. This method allows the caller to know which certificate chain was actually sent.</source>
          <target state="translated">핸드 셰이크에서 여러 인증서를 사용할 수있는 경우 구현시 사용 가능한 &quot;최상의&quot;인증서 체인을 고려하여 다른쪽으로 전송합니다. 이 메소드를 사용하면 호출자가 실제로 전송 된 인증서 체인을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3c423c16dcc60cd6b3423d29ca5549e570d4cde" translate="yes" xml:space="preserve">
          <source>When multiple certificates are available for use in a handshake, the implementation chooses what it considers the &quot;best&quot; certificate chain available, and transmits that to the other side. This method allows the caller to know which certificate chain was actually used.</source>
          <target state="translated">핸드 셰이크에서 여러 인증서를 사용할 수있는 경우 구현시 사용 가능한 &quot;최상의&quot;인증서 체인을 고려하여 다른쪽으로 전송합니다. 이 메소드를 사용하면 호출자가 실제로 사용 된 인증서 체인을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3b28bc24e19b6732ac42b3b00b62e8ef0542f5f" translate="yes" xml:space="preserve">
          <source>When multiple mechanisms to retrieve a ticket or key is provided, the preference order is:</source>
          <target state="translated">티켓 또는 키를 검색하는 여러 메커니즘이 제공되는 경우 기본 설정 순서는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e850be999ec8886286adca7b7397c7e98dbc4504" translate="yes" xml:space="preserve">
          <source>When multiple mouse buttons are pressed, each press, release, and click results in a separate event.</source>
          <target state="translated">여러 개의 마우스 버튼을 눌렀을 때 눌렀다 떼고 클릭 할 때마다 별도의 이벤트가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b583a6caec2f5a60ad8b2a97fc56411186997e09" translate="yes" xml:space="preserve">
          <source>When multiple threads attempt updates, map operations and the remapping function may be called multiple times.</source>
          <target state="translated">여러 스레드가 업데이트를 시도 할 때 매핑 작업과 다시 매핑 기능이 여러 번 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="421a63f8d081ab15313773fe4ca2f494ee90642e" translate="yes" xml:space="preserve">
          <source>When names are tested for equality, attribute types, both binary and string values, are case-insensitive. String values with different but equivalent usage of quoting, escaping, or UTF8-hex-encoding are considered equal. The order of components in multi-valued RDNs (such as &quot;ou=Sales+cn=Bob&quot;) is not significant.</source>
          <target state="translated">이름이 동일한 지 테스트 할 때 이진 및 문자열 값 모두의 속성 유형은 대소 문자를 구분합니다. 인용, 이스케이프 또는 UTF8- 헥스 인코딩의 사용법은 다르지만 동등한 문자열 값은 동일한 것으로 간주됩니다. 다중 값 RDN의 구성 요소 순서 (예 : &quot;ou = Sales + cn = Bob&quot;)는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6883b8562675f0154aa3d30123f4e8a85ff6259b" translate="yes" xml:space="preserve">
          <source>When not already closed, the &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;
 FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;flush&lt;/code&gt; method, and then calls the &lt;code&gt;close&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">아직 닫히지 않은 경우 &lt;code&gt; FilterOutputStream&lt;/code&gt; 의 &lt;code&gt;close&lt;/code&gt; 메서드 는 &lt;code&gt;flush&lt;/code&gt; 메서드를 호출 한 다음 기본 출력 스트림 의 &lt;code&gt;close&lt;/code&gt; 메서드 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="4a545d4bb404c11d8dba04dd5da469b88f7c0cfb" translate="yes" xml:space="preserve">
          <source>When not using the try-with-resources construct, then directory stream's &lt;code&gt;close&lt;/code&gt; method should be invoked after iteration is completed so as to free any resources held for the open directory.</source>
          <target state="translated">try-with-resources 구문을 사용하지 않는 경우, 반복이 완료된 후 디렉토리 스트림의 &lt;code&gt;close&lt;/code&gt; 메소드를 호출하여 열린 디렉토리에 보유 된 모든 자원을 해제해야합니다.</target>
        </trans-unit>
        <trans-unit id="be40b60dc5533eb85b6daed004aaac933ffdf025" translate="yes" xml:space="preserve">
          <source>When obtaining a mapped segment from a newly created file, the initialization state of the contents of the block of mapped memory associated with the returned mapped memory segment is unspecified and should not be relied upon.</source>
          <target state="translated">새로 생성 된 파일에서 매핑 된 세그먼트를 가져올 때 반환 된 매핑 된 메모리 세그먼트와 관련된 매핑 된 메모리 블록 내용의 초기화 상태는 지정되지 않으며 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="f0eff43acb661f5302995be06d4dfab4083a1196" translate="yes" xml:space="preserve">
          <source>When one of the &lt;code&gt;showXxxDialog&lt;/code&gt; methods returns an integer, the possible values are:</source>
          <target state="translated">&lt;code&gt;showXxxDialog&lt;/code&gt; 메서드 중 하나가 정수를 반환하는 경우 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="08da4f2fc44fc2ee4201a796e38c5af9ee0a82e4" translate="yes" xml:space="preserve">
          <source>When one of those methods is invoked, its behavior is to delegate to a corresponding method on an instance of this class. The details of how each method delegates to the provider instance is described in the documentation for each particular method. See the documentation for &lt;a href=&quot;rmiclassloader&quot;&gt;&lt;code&gt;RMIClassLoader&lt;/code&gt;&lt;/a&gt; for a description of how a provider instance is chosen.</source>
          <target state="translated">이러한 메서드 중 하나가 호출 될 때 동작은이 클래스의 인스턴스에있는 해당 메서드에 위임하는 것입니다. 각 메서드가 공급자 인스턴스에 위임하는 방법에 대한 자세한 내용은 각 특정 메서드에 대한 설명서에 설명되어 있습니다. 제공자 인스턴스가 선택되는 방법에 대한 설명은 &lt;a href=&quot;rmiclassloader&quot;&gt; &lt;code&gt;RMIClassLoader&lt;/code&gt; 에&lt;/a&gt; 대한 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="61d8ce27b955b14a389038bf014cbe85cc67752c" translate="yes" xml:space="preserve">
          <source>When one sends a message to a multicast group, &lt;b&gt;all&lt;/b&gt; subscribing recipients to that host and port receive the message (within the time-to-live range of the packet, see below). The socket needn't be a member of the multicast group to send messages to it.</source>
          <target state="translated">멀티 캐스트 그룹에 메시지를 보내면 해당 호스트 및 포트에 가입 한 &lt;b&gt;모든&lt;/b&gt; 받는 사람이 메시지를받습니다 (패킷의 유효 시간 범위 내에서 아래 참조). 소켓은 메시지를 보내기 위해 멀티 캐스트 그룹의 구성원 일 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="2c665e1ac4c57d3ccf2437d891eb0ae431f77c0f" translate="yes" xml:space="preserve">
          <source>When only one part is given, the value is stored directly in the network address without any byte rearrangement.</source>
          <target state="translated">한 부분 만 제공하면 값이 바이트 재 배열없이 네트워크 주소에 직접 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="1875b9065ed910ca6ec4ee04408f7621f55c467c" translate="yes" xml:space="preserve">
          <source>When opening an existing file, the file is first truncated to a size of 0 bytes. This option is ignored when the file is opened only for reading.</source>
          <target state="translated">기존 파일을 열 때 파일은 먼저 0 바이트 크기로 잘립니다. 읽기 전용으로 파일을 열면이 옵션이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="55ad5bbbd836b22033fccd6daca4b9d44a123e8e" translate="yes" xml:space="preserve">
          <source>When output streaming is enabled, authentication and redirection cannot be handled automatically. A &lt;a href=&quot;httpretryexception&quot;&gt;HttpRetryException&lt;/a&gt; will be thrown when reading the response if authentication or redirection are required. This exception can be queried for the details of the error.</source>
          <target state="translated">출력 스트리밍이 활성화되면 인증 및 리디렉션을 자동으로 처리 할 수 ​​없습니다. &lt;a href=&quot;httpretryexception&quot;&gt;HttpRetryException는&lt;/a&gt; 인증 또는 리디렉션이 필요한 경우 응답을 읽을 때 발생합니다. 오류에 대한 자세한 내용은이 예외를 쿼리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="0a1daf55edfb1251014f98d686349fc2cf29836a" translate="yes" xml:space="preserve">
          <source>When output streaming is enabled, authentication and redirection cannot be handled automatically. A HttpRetryException will be thrown when reading the response if authentication or redirection are required. This exception can be queried for the details of the error.</source>
          <target state="translated">출력 스트리밍이 활성화되면 인증 및 리디렉션을 자동으로 처리 할 수 ​​없습니다. 인증 또는 리디렉션이 필요한 경우 응답을 읽을 때 HttpRetryException이 발생합니다. 오류에 대한 자세한 내용은이 예외를 쿼리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="70789a8a89c99dae4c53ce0b0096f13062e5be96" translate="yes" xml:space="preserve">
          <source>When output to a ZIP file or ZIP file formatted output stream the last modification time set by this method will be stored into zip file entry's &lt;code&gt;date and time fields&lt;/code&gt; in &lt;code&gt;standard
 MS-DOS date and time format&lt;/code&gt;), and the extended timestamp fields in &lt;code&gt;optional extra data&lt;/code&gt; in UTC time.</source>
          <target state="translated">ZIP 파일 또는 ZIP 파일 형식의 출력 스트림으로 출력 할 때이 방법으로 설정 한 마지막 수정 시간 은 &lt;code&gt;standard MS-DOS date and time format&lt;/code&gt; 으로 zip 파일 항목의 &lt;code&gt;date and time fields&lt;/code&gt; 에 저장되며 확장 된 타임 스탬프 필드는 &lt;code&gt;optional extra data&lt;/code&gt; UTC 시간의 데이터 .</target>
        </trans-unit>
        <trans-unit id="fc606ceb2f424146aad8bdb4fde4bd8dd7c5761f" translate="yes" xml:space="preserve">
          <source>When overriding this method it is recommended that an implementation ensures that any delegation is consistent with the &lt;a href=&quot;#getResource(java.lang.String)&quot;&gt;&lt;code&gt;getResource(String)&lt;/code&gt;&lt;/a&gt; method. This should ensure that the first element returned by the stream is the same resource that the &lt;code&gt;getResource(String)&lt;/code&gt; method would return.</source>
          <target state="translated">이 메서드를 재정의 할 때 구현시 모든 위임이 &lt;a href=&quot;#getResource(java.lang.String)&quot;&gt; &lt;code&gt;getResource(String)&lt;/code&gt; &lt;/a&gt; 메서드 와 일치하는지 확인하는 것이 좋습니다 . 이것은 스트림이 반환하는 첫 번째 요소가 &lt;code&gt;getResource(String)&lt;/code&gt; 메서드가 반환 하는 것과 동일한 리소스인지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="33b67f1448d9e46c92a5dd8ca3e0c7d32d1730ae" translate="yes" xml:space="preserve">
          <source>When overriding this method it is recommended that an implementation ensures that any delegation is consistent with the &lt;a href=&quot;classloader#getResource-java.lang.String-&quot;&gt;&lt;code&gt;getResource(String)&lt;/code&gt;&lt;/a&gt; method. This should ensure that the first element returned by the Enumeration's &lt;code&gt;nextElement&lt;/code&gt; method is the same resource that the &lt;code&gt;getResource(String)&lt;/code&gt; method would return.</source>
          <target state="translated">이 메소드를 오버라이드 (override) 할 때는, 구현이 모든 위임이 &lt;a href=&quot;classloader#getResource-java.lang.String-&quot;&gt; &lt;code&gt;getResource(String)&lt;/code&gt; &lt;/a&gt; 메소드 와 일치하는 것을 보증 할 것을 권장합니다 . 이렇게하면 Enumeration의 &lt;code&gt;nextElement&lt;/code&gt; 메소드가 리턴 한 첫 번째 요소 가 &lt;code&gt;getResource(String)&lt;/code&gt; 메소드가 리턴 하는 동일한 자원인지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="059fdccbaa1b79359a5fe3e6137c458d9b8b9713" translate="yes" xml:space="preserve">
          <source>When overriding this method it is recommended that an implementation ensures that any delegation is consistent with the &lt;a href=&quot;classloader#getResources-java.lang.String-&quot;&gt;&lt;code&gt;getResources(String)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 메소드를 오버라이드 (override) 할 때는, 구현이 모든 위임이 &lt;a href=&quot;classloader#getResources-java.lang.String-&quot;&gt; &lt;code&gt;getResources(String)&lt;/code&gt; &lt;/a&gt; 메소드 와 일치하는 것을 보증 할 것을 권장합니다 .</target>
        </trans-unit>
        <trans-unit id="bc58d21adb8af8af625121a5b2b080c75e23b139" translate="yes" xml:space="preserve">
          <source>When parsing in lenient mode, only the hours are mandatory - minutes and seconds are optional. The colons are required if the specified pattern contains a colon. If the specified pattern is &quot;+HH&quot;, the presence of colons is determined by whether the character after the hour digits is a colon or not. If the offset cannot be parsed then an exception is thrown unless the section of the formatter is optional.</source>
          <target state="translated">관대 모드로 구문 분석 할 때 시간 만 필수이며 분과 초는 선택 사항입니다. 지정된 패턴에 콜론이 포함 된 경우 콜론이 필요합니다. 지정된 패턴이 &quot;+ HH&quot;이면 콜론의 존재 여부는 시간 숫자 뒤의 문자가 콜론인지 여부에 따라 결정됩니다. 오프셋을 구문 분석 할 수없는 경우 포맷터의 섹션이 선택 사항이 아닌 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4bcac0e3e99ade4d27a61abe4610e8ad6c3973f0" translate="yes" xml:space="preserve">
          <source>When parsing in strict mode, the input must contain the mandatory and optional elements are defined by the specified pattern. If the offset cannot be parsed then an exception is thrown unless the section of the formatter is optional.</source>
          <target state="translated">엄격 모드에서 구문 분석 할 때 입력에는 필수 및 선택적 요소가 지정된 패턴으로 정의되어 있어야합니다. 오프셋을 구문 분석 할 수없는 경우 포맷터의 섹션이 선택 사항이 아닌 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="631f29a71edc58dfc93bdc965a349f3c402f1d37" translate="yes" xml:space="preserve">
          <source>When parsing in strict mode, the number of parsed digits must be between the minimum and maximum width. In strict mode, if the minimum and maximum widths are equal and there is no decimal point then the parser will participate in adjacent value parsing, see &lt;a href=&quot;#appendValue(java.time.temporal.TemporalField,int)&quot;&gt;&lt;code&gt;appendValue(java.time.temporal.TemporalField,int)&lt;/code&gt;&lt;/a&gt;. When parsing in lenient mode, the minimum width is considered to be zero and the maximum is nine.</source>
          <target state="translated">엄격 모드에서 구문 분석 할 때 구문 분석 된 숫자의 수는 최소 너비와 최대 너비 사이 여야합니다. Strict 모드에서 최소 및 최대 너비가 같고 소수점이 없으면 파서가 인접 값 구문 분석에 참여 합니다. &lt;a href=&quot;#appendValue(java.time.temporal.TemporalField,int)&quot;&gt; &lt;code&gt;appendValue(java.time.temporal.TemporalField,int)&lt;/code&gt; &lt;/a&gt; 참조하십시오 . 관대 모드에서 구문 분석 할 때 최소 너비는 0으로 간주되고 최대 너비는 9입니다.</target>
        </trans-unit>
        <trans-unit id="88186acbb81a8c14eb592e644ed27a9e055dc197" translate="yes" xml:space="preserve">
          <source>When parsing in strict mode, the number of parsed digits must be between the minimum and maximum width. When parsing in lenient mode, the minimum width is considered to be zero and the maximum is nine.</source>
          <target state="translated">엄격 모드에서 구문 분석 할 때 구문 분석 된 숫자의 수는 최소 너비와 최대 너비 사이 여야합니다. 무의식 모드에서 구문 분석 할 때 최소 너비는 0으로 간주되고 최대는 9입니다.</target>
        </trans-unit>
        <trans-unit id="d50f0289d83049487a7e415ef71230bcec841f7c" translate="yes" xml:space="preserve">
          <source>When parsing in strict mode, the number of parsed digits must match the fractional digits. When parsing in lenient mode, any number of fractional digits from zero to nine are accepted.</source>
          <target state="translated">엄격 모드에서 구문 분석 할 때 구문 분석 된 숫자의 숫자는 소수 자릿수와 일치해야합니다. 무의식 모드에서 구문 분석 할 때 0에서 9까지의 소수 자릿수가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="398b9ccde24d723bc63ead376818c485f7b9a32f" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated from 0 to 1 in strict and smart mode. In lenient mode the value is not validated. It is combined with &lt;code&gt;HOUR_OF_AMPM&lt;/code&gt; to form &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; by multiplying the {AMPM_OF_DAY} value by 12.</source>
          <target state="translated">이 필드를 구문 분석 할 때이 값은 다음과 동일하게 작동합니다. 엄격하고 스마트 한 모드에서 값의 유효성은 0에서 1까지입니다. 무의미한 모드에서는 값의 유효성이 검사되지 않습니다. {AMPM_OF_DAY} 값에 12를 곱하여 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 과 결합하여 &lt;code&gt;HOUR_OF_AMPM&lt;/code&gt; 를 형성 합니다.</target>
        </trans-unit>
        <trans-unit id="fc167eb2f61a597fa4fcdf11893ccfde6bdc0602" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated from 0 to 11 in strict and smart mode. In lenient mode the value is not validated. It is combined with &lt;code&gt;AMPM_OF_DAY&lt;/code&gt; to form &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; by multiplying the {AMPM_OF_DAY} value by 12.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 엄격하고 스마트 한 모드에서 값은 0에서 11까지 유효합니다. 무의미한 모드에서는 값의 유효성이 검사되지 않습니다. {AMPM_OF_DAY} 값에 12를 곱하여 &lt;code&gt;AMPM_OF_DAY&lt;/code&gt; 와 결합하여 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 를 형성 합니다.</target>
        </trans-unit>
        <trans-unit id="957785487bc5a171742676f4c57e468f23bbf945" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated from 1 to 12 in strict mode and from 0 to 12 in smart mode. In lenient mode the value is not validated. The field is converted to an &lt;code&gt;HOUR_OF_AMPM&lt;/code&gt; with the same value, unless the value is 12, in which case it is converted to 0.</source>
          <target state="translated">이 필드를 구문 분석 할 때이 값은 다음과 같습니다. 엄격 모드에서는 1에서 12까지, 스마트 모드에서는 0에서 12까지 값이 검증됩니다. 무의미한 모드에서는 값의 유효성이 검사되지 않습니다. 값이 12가 아닌 경우 필드는 동일한 값 을 가진 &lt;code&gt;HOUR_OF_AMPM&lt;/code&gt; 으로 변환 되며이 경우 0으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="392153078b1342cc9b804c5665b0c975ca3bc7c5" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated from 1 to 24 in strict mode and from 0 to 24 in smart mode. In lenient mode the value is not validated. The field is converted to an &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; with the same value, unless the value is 24, in which case it is converted to 0.</source>
          <target state="translated">이 필드를 구문 분석 할 때이 값은 다음과 같습니다. 엄격 모드에서는 1에서 24까지, 스마트 모드에서는 0에서 24까지 값이 검증됩니다. 무의미한 모드에서는 값의 유효성이 검사되지 않습니다. 값이 24가 아닌 경우 필드는 동일한 값으로 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 로 변환 되며이 경우 0으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="99eb9e50057d1c711aa0384492b14a1cc96c9df7" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1fc9716f73232473fc7fb6cbb3857d50c0ce6738" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The field is combined with &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt;, &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; and &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; to produce a &lt;code&gt;LocalTime&lt;/code&gt;. In lenient mode, any excess days are added to the parsed date, or made available via &lt;a href=&quot;../format/datetimeformatter#parsedExcessDays()&quot;&gt;&lt;code&gt;DateTimeFormatter.parsedExcessDays()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격 및 스마트 모드에서 유효성이 검증되지만 관대 모드에서는 검증되지 않습니다. 이 필드는 &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; , &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; 및 &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; 와 결합되어 &lt;code&gt;LocalTime&lt;/code&gt; 을 생성합니다 . 관대 모드에서는 초과 날짜가 구문 분석 된 날짜에 추가되거나 &lt;a href=&quot;../format/datetimeformatter#parsedExcessDays()&quot;&gt; &lt;code&gt;DateTimeFormatter.parsedExcessDays()&lt;/code&gt; &lt;/a&gt; 를 통해 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2ddaf4c446a794e052910439758bc7ef035eeef6" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The field is combined with &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt;, &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; and &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; to produce a &lt;code&gt;LocalTime&lt;/code&gt;. In lenient mode, any excess days are added to the parsed date, or made available via &lt;a href=&quot;../format/datetimeformatter#parsedExcessDays--&quot;&gt;&lt;code&gt;DateTimeFormatter.parsedExcessDays()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 이 필드는 &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; , &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; 및 &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; 와 결합되어 &lt;code&gt;LocalTime&lt;/code&gt; 을 생성합니다 . 무자비한 모드에서는 초과 날짜가 구문 분석 된 날짜에 추가되거나 &lt;a href=&quot;../format/datetimeformatter#parsedExcessDays--&quot;&gt; &lt;code&gt;DateTimeFormatter.parsedExcessDays()&lt;/code&gt; &lt;/a&gt; 를 통해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="3ae9bc249b42914740d59028697394c29456af8c" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The field is resolved in combination with &lt;code&gt;MICRO_OF_SECOND&lt;/code&gt; to produce &lt;code&gt;NANO_OF_SECOND&lt;/code&gt;.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 이 필드는 &lt;code&gt;MICRO_OF_SECOND&lt;/code&gt; 를 생성하기 위해 &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; 와 함께 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="a924c762f617440d33adf98834b01ed6f029b945" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The field is resolved in combination with &lt;code&gt;MILLI_OF_SECOND&lt;/code&gt; and &lt;code&gt;MICRO_OF_SECOND&lt;/code&gt;.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 이 필드는 &lt;code&gt;MILLI_OF_SECOND&lt;/code&gt; 및 &lt;code&gt;MICRO_OF_SECOND&lt;/code&gt; 와 함께 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="a8dbf53e5aefb77318b4486598a6313d9b941472" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The field is resolved in combination with &lt;code&gt;MILLI_OF_SECOND&lt;/code&gt; to produce &lt;code&gt;NANO_OF_SECOND&lt;/code&gt;.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 이 필드는 &lt;code&gt;MILLI_OF_SECOND&lt;/code&gt; 와 함께 해결되어 NANO_OF_SECOND 를 생성 &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c800d57db7922ab39c14b13ae86f803dc109a26b" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The value is split to form &lt;code&gt;MICRO_OF_SECOND&lt;/code&gt;, &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt;, &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; and &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; fields.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 값은 &lt;code&gt;MICRO_OF_SECOND&lt;/code&gt; , &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; , &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; 및 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 필드 를 형성 하도록 분할 됩니다.</target>
        </trans-unit>
        <trans-unit id="c294e00d68fa9137c919614e2026adac17298586" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The value is split to form &lt;code&gt;MILLI_OF_SECOND&lt;/code&gt;, &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt;, &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; and &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; fields.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 값은 &lt;code&gt;MILLI_OF_SECOND&lt;/code&gt; , &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; , &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; 및 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 필드 를 형성 하도록 분할 됩니다.</target>
        </trans-unit>
        <trans-unit id="f645cbf7fae3ea37f1aeb723d42fd638100f86e8" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The value is split to form &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; and &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; fields.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 값은 &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; 및 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 필드로 분할 됩니다.</target>
        </trans-unit>
        <trans-unit id="1be57e4bffee0d932e9b78c3b2c86a25070821da" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The value is split to form &lt;code&gt;NANO_OF_SECOND&lt;/code&gt;, &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt;, &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; and &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; fields.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 값은 &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; , &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; , &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; 및 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 필드 를 형성 하도록 분할 됩니다.</target>
        </trans-unit>
        <trans-unit id="375544438a835cc62e84a73073301cc45d0d9edd" translate="yes" xml:space="preserve">
          <source>When parsing this field it behaves equivalent to the following: The value is validated in strict and smart mode but not in lenient mode. The value is split to form &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt;, &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; and &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; fields.</source>
          <target state="translated">이 필드를 구문 분석 할 때 다음과 동일하게 작동합니다. 값은 엄격하고 스마트 모드에서는 유효하지만 무성한 모드에서는 유효하지 않습니다. 이 값은 &lt;code&gt;SECOND_OF_MINUTE&lt;/code&gt; , &lt;code&gt;MINUTE_OF_HOUR&lt;/code&gt; 및 &lt;code&gt;HOUR_OF_DAY&lt;/code&gt; 필드 로 분할 됩니다.</target>
        </trans-unit>
        <trans-unit id="4cd8446097afcf131ca40bba9bd5d77aaa9438f7" translate="yes" xml:space="preserve">
          <source>When parsing, there are two distinct cases to consider. If a chronology has been parsed directly from the text, perhaps because &lt;a href=&quot;datetimeformatterbuilder#appendChronologyId()&quot;&gt;&lt;code&gt;DateTimeFormatterBuilder.appendChronologyId()&lt;/code&gt;&lt;/a&gt; was used, then this override chronology has no effect. If no zone has been parsed, then this override chronology will be used to interpret the &lt;code&gt;ChronoField&lt;/code&gt; values into a date according to the date resolving rules of the chronology.</source>
          <target state="translated">파싱 ​​할 때 고려해야 할 두 가지 사례가 있습니다. &lt;a href=&quot;datetimeformatterbuilder#appendChronologyId()&quot;&gt; &lt;code&gt;DateTimeFormatterBuilder.appendChronologyId()&lt;/code&gt; &lt;/a&gt; 가 사용 되었기 때문에 연대기가 텍스트에서 직접 구문 분석 된 경우이 재정의 연대기가 효과가 없습니다. 영역이 구문 분석되지 않은 경우이 재정의 연대기는 연대의 규칙을 확인하는 날짜에 따라 &lt;code&gt;ChronoField&lt;/code&gt; 값을 날짜로 해석하는 데 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="f28daa7170bb1fcc870df5a101d2c5b9ccdbc619" translate="yes" xml:space="preserve">
          <source>When parsing, there are two distinct cases to consider. If a chronology has been parsed directly from the text, perhaps because &lt;a href=&quot;datetimeformatterbuilder#appendChronologyId--&quot;&gt;&lt;code&gt;DateTimeFormatterBuilder.appendChronologyId()&lt;/code&gt;&lt;/a&gt; was used, then this override chronology has no effect. If no zone has been parsed, then this override chronology will be used to interpret the &lt;code&gt;ChronoField&lt;/code&gt; values into a date according to the date resolving rules of the chronology.</source>
          <target state="translated">구문 분석 할 때 고려해야 할 두 가지 경우가 있습니다. &lt;a href=&quot;datetimeformatterbuilder#appendChronologyId--&quot;&gt; &lt;code&gt;DateTimeFormatterBuilder.appendChronologyId()&lt;/code&gt; &lt;/a&gt; 가 사용 되어 연대기를 텍스트에서 직접 구문 분석 한 경우이 재정의 연대기를 적용 할 수 없습니다. 영역을 구문 분석하지 않은 경우이 재정의 연대기를 사용하여 연대기 의 날짜 해결 규칙에 따라 &lt;code&gt;ChronoField&lt;/code&gt; 값을 날짜로 해석합니다 .</target>
        </trans-unit>
        <trans-unit id="be3406dfdd119662bd0b600c9668e269a43af897" translate="yes" xml:space="preserve">
          <source>When parsing, there are two distinct cases to consider. If a zone has been parsed directly from the text, perhaps because &lt;a href=&quot;datetimeformatterbuilder#appendZoneId()&quot;&gt;&lt;code&gt;DateTimeFormatterBuilder.appendZoneId()&lt;/code&gt;&lt;/a&gt; was used, then this override zone has no effect. If no zone has been parsed, then this override zone will be included in the result of the parse where it can be used to build instants and date-times.</source>
          <target state="translated">파싱 ​​할 때 고려해야 할 두 가지 사례가 있습니다. 영역이 텍스트에서 직접 구문 분석 된 경우 아마도 &lt;a href=&quot;datetimeformatterbuilder#appendZoneId()&quot;&gt; &lt;code&gt;DateTimeFormatterBuilder.appendZoneId()&lt;/code&gt; &lt;/a&gt; 가 사용 되었기 때문에이 재정의 영역은 효과가 없습니다. 영역이 구문 분석되지 않은 경우이 재정의 영역이 구문 분석 결과에 포함되어 인스턴트 및 날짜-시간을 빌드하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a965e09e870a4e87e4a218aed3653bd2efbce188" translate="yes" xml:space="preserve">
          <source>When parsing, there are two distinct cases to consider. If a zone has been parsed directly from the text, perhaps because &lt;a href=&quot;datetimeformatterbuilder#appendZoneId--&quot;&gt;&lt;code&gt;DateTimeFormatterBuilder.appendZoneId()&lt;/code&gt;&lt;/a&gt; was used, then this override zone has no effect. If no zone has been parsed, then this override zone will be included in the result of the parse where it can be used to build instants and date-times.</source>
          <target state="translated">구문 분석 할 때 고려해야 할 두 가지 경우가 있습니다. &lt;a href=&quot;datetimeformatterbuilder#appendZoneId--&quot;&gt; &lt;code&gt;DateTimeFormatterBuilder.appendZoneId()&lt;/code&gt; &lt;/a&gt; 가 사용 되었기 때문에 텍스트에서 영역을 직접 구문 분석 한 경우이 재정의 영역이 적용되지 않습니다. 영역을 구문 분석하지 않은 경우이 재정의 영역은 구문 분석 결과에 포함되어 인스턴트 및 날짜-시간을 작성하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9264bb427a83af410610e532031647c00607e8c7" translate="yes" xml:space="preserve">
          <source>When passed a class representing a primitive type, returns the class representing the corresponding wrapper type.</source>
          <target state="translated">기본 유형을 나타내는 클래스가 전달되면 해당 래퍼 유형을 나타내는 클래스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="be1da10029189914f99bc7ebde561e24a5d3c404" translate="yes" xml:space="preserve">
          <source>When passed a class representing a primitive type, returns the class representing the corresponding wrapper type. I.e. calling it with &lt;code&gt;int.class&lt;/code&gt; will return &lt;code&gt;Integer.class&lt;/code&gt;. If passed a class that is not a primitive type, returns null.</source>
          <target state="translated">기본 유형을 나타내는 클래스가 전달되면 해당 래퍼 유형을 나타내는 클래스를 반환합니다. 즉 &lt;code&gt;int.class&lt;/code&gt; 로 호출하면 &lt;code&gt;Integer.class&lt;/code&gt; 가 반환 됩니다 . 기본 유형이 아닌 클래스를 전달하면 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8d49812d12bf76de817b7cbc2516a1f236f2d1d4" translate="yes" xml:space="preserve">
          <source>When passed a class representing a wrapper for a primitive type, returns the class representing the corresponding primitive type.</source>
          <target state="translated">기본 유형의 래퍼를 나타내는 클래스가 전달되면 해당 기본 유형을 나타내는 클래스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0bc5124ca5a36473d0fea5385e8be8c746341c88" translate="yes" xml:space="preserve">
          <source>When passed a class representing a wrapper for a primitive type, returns the class representing the corresponding primitive type. I.e. calling it with &lt;code&gt;Integer.class&lt;/code&gt; will return &lt;code&gt;Integer.TYPE&lt;/code&gt;. If passed a class that is not a wrapper for primitive type, returns null.</source>
          <target state="translated">기본 유형의 래퍼를 나타내는 클래스가 전달되면 해당 기본 유형을 나타내는 클래스를 반환합니다. 즉 &lt;code&gt;Integer.class&lt;/code&gt; 로 호출하면 Integer.TYPE 이 반환 &lt;code&gt;Integer.TYPE&lt;/code&gt; . 기본 유형의 래퍼가 아닌 클래스를 전달하면 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6cf15c2cadbf1d2f9101df44d9400a393f3cd777" translate="yes" xml:space="preserve">
          <source>When passing information to a Java subprocess, &lt;a href=&quot;#EnvironmentVSSystemProperties&quot;&gt;system properties&lt;/a&gt; are generally preferred over environment variables.</source>
          <target state="translated">정보를 Java 서브 프로세스로 전달할 때 일반적으로 환경 변수보다 &lt;a href=&quot;#EnvironmentVSSystemProperties&quot;&gt;시스템 특성&lt;/a&gt; 이 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="678a637edd80c217c54e61b9e25c8439ebfa7bf7" translate="yes" xml:space="preserve">
          <source>When passing information to a Java subprocess, &lt;a href=&quot;system#EnvironmentVSSystemProperties&quot;&gt;system properties&lt;/a&gt; are generally preferred over environment variables.</source>
          <target state="translated">정보를 Java 서브 프로세스로 전달할 때 일반적으로 환경 변수보다 &lt;a href=&quot;system#EnvironmentVSSystemProperties&quot;&gt;시스템 특성&lt;/a&gt; 이 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="468a7461c40962d54c04cec0adab0486b4f75193" translate="yes" xml:space="preserve">
          <source>When pending counts can be precomputed, they can be established in the constructor:</source>
          <target state="translated">보류중인 카운트를 미리 계산할 수있는 경우 생성자에서 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee906d2367a93c8434f7349879af51a79dadb0c5" translate="yes" xml:space="preserve">
          <source>When possible this simply changes the name of the given node, otherwise this creates a new node with the specified name and replaces the existing node with the new node as described below.</source>
          <target state="translated">가능한 경우 단순히 주어진 노드의 이름을 변경합니다. 그렇지 않으면 지정된 이름으로 새 노드를 만들고 아래 설명 된대로 기존 노드를 새 노드로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="1d9df05f42f191fd30f4013d3bc48c1dc951d2b7" translate="yes" xml:space="preserve">
          <source>When processing logging output, if a Handler encounters problems then rather than throwing an Exception back to the issuer of the logging call (who is unlikely to be interested) the Handler should call its associated ErrorManager.</source>
          <target state="translated">로깅 출력을 처리 할 때 처리기에 문제가 발생하면 로깅 호출의 발행자 (관심이없는 사람)에게 예외를 다시 발생시키는 대신 처리기는 연결된 ErrorManager를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="3e179726ee6a6f7644de1db6d67bff96f348bf5e" translate="yes" xml:space="preserve">
          <source>When providing implementations for the new methods in the subclass, use this newly defined method to get the initial context.</source>
          <target state="translated">서브 클래스에서 새 메소드에 대한 구현을 제공 할 때 새로 정의 된이 메소드를 사용하여 초기 컨텍스트를 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="ac5bba685209949c2cc3f67e3cab5d31b729dde6" translate="yes" xml:space="preserve">
          <source>When reading a document if a CRLF is encountered a property with this name is added and the value will be &quot;\r\n&quot;.</source>
          <target state="translated">문서를 읽을 때 CRLF가 발견되면이 이름의 속성이 추가되고 값은 &quot;\ r \ n&quot;이됩니다.</target>
        </trans-unit>
        <trans-unit id="093663f9827304bad79b038495f5092c12dadca2" translate="yes" xml:space="preserve">
          <source>When reading a provider-configuration file, or loading or instantiating a provider class named in a provider-configuration file, then &lt;code&gt;
 ServiceConfigurationError&lt;/code&gt; can be thrown for the following reasons:</source>
          <target state="translated">공급자 구성 파일을 읽거나 공급자 구성 파일에 이름이 지정된 공급자 클래스를로드 또는 인스턴스화 할 때 다음과 같은 이유로 &lt;code&gt; ServiceConfigurationError&lt;/code&gt; 가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff2175fd5a0c9824ca3682906ca8e8c785a2e2f5" translate="yes" xml:space="preserve">
          <source>When reading an image, its per-stream and per-image metadata is made available as an &lt;code&gt;IIOMetadata&lt;/code&gt; object. The internals of this object are specific to the plug-in that created it. Its contents may be accessed in the form of an XML &lt;code&gt;Document&lt;/code&gt;, which is implemented as a tree of &lt;code&gt;IIOMetadataNode&lt;/code&gt; objects.</source>
          <target state="translated">이미지를 읽을 때 스트림 별 및 이미지 당 메타 데이터를 &lt;code&gt;IIOMetadata&lt;/code&gt; 객체 로 사용할 수 있습니다 . 이 객체의 내부는 해당 객체를 생성 한 플러그인에 따라 다릅니다. 컨텐츠는 &lt;code&gt;IIOMetadataNode&lt;/code&gt; 객체 의 트리로 구현되는 XML &lt;code&gt;Document&lt;/code&gt; 형식으로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c064a445936071cf19ecbcb598a24cd0f5fcf1e9" translate="yes" xml:space="preserve">
          <source>When reading from a standard &lt;code&gt;InputStream&lt;/code&gt;, it may be necessary to save previously read information in a cache since the underlying stream does not allow data to be re-read. Similarly, when writing to a standard &lt;code&gt;OutputStream&lt;/code&gt;, a cache may be used to allow a previously written value to be changed before flushing it to the final destination.</source>
          <target state="translated">표준 &lt;code&gt;InputStream&lt;/code&gt; 에서 읽을 때는 기본 스트림에서 데이터를 다시 읽을 수 없으므로 이전에 읽은 정보를 캐시에 저장해야 할 수도 있습니다. 마찬가지로, 표준 &lt;code&gt;OutputStream&lt;/code&gt; 에 쓸 때 , 최종 목적지로 플러시하기 전에 이전에 쓴 값을 변경할 수 있도록 캐시를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="967c7f2fd4e6ef5e74644bcb7e0d2a8f5a951bbd" translate="yes" xml:space="preserve">
          <source>When reading, a &lt;code&gt;TIFFDirectory&lt;/code&gt; may be created by passing the value returned by &lt;a href=&quot;../../imagereader#getImageMetadata(int)&quot;&gt;&lt;code&gt;ImageReader.getImageMetadata()&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#createFromMetadata(javax.imageio.metadata.IIOMetadata)&quot;&gt;&lt;code&gt;createFromMetadata()&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;tifffield&quot;&gt;&lt;code&gt;TIFFField&lt;/code&gt;&lt;/a&gt;s in the directory may then be obtained using the accessor methods provided in this class.</source>
          <target state="translated">읽을 때 &lt;code&gt;TIFFDirectory&lt;/code&gt; 는 &lt;a href=&quot;../../imagereader#getImageMetadata(int)&quot;&gt; &lt;code&gt;ImageReader.getImageMetadata()&lt;/code&gt; &lt;/a&gt; 가 반환 한 값 을 &lt;a href=&quot;#createFromMetadata(javax.imageio.metadata.IIOMetadata)&quot;&gt; &lt;code&gt;createFromMetadata()&lt;/code&gt; &lt;/a&gt; 에 전달하여 만들 수 있습니다 . 디렉토리 의 &lt;a href=&quot;tifffield&quot;&gt; &lt;code&gt;TIFFField&lt;/code&gt; &lt;/a&gt; 는이 클래스에 제공된 접근 자 메서드를 사용하여 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d63913965696a9f9c40e306e81ce84323b71ddc" translate="yes" xml:space="preserve">
          <source>When reading, if the layout of the destination has been set using this method, each call to an &lt;code&gt;ImageReader&lt;/code&gt;&lt;code&gt;read&lt;/code&gt; method will return a new &lt;code&gt;BufferedImage&lt;/code&gt; using the format specified by the supplied type specifier. As a side effect, any destination &lt;code&gt;BufferedImage&lt;/code&gt; set by &lt;code&gt;ImageReadParam.setDestination(BufferedImage)&lt;/code&gt; will no longer be set as the destination. In other words, this method may be thought of as calling &lt;code&gt;setDestination((BufferedImage)null)&lt;/code&gt;.</source>
          <target state="translated">읽을 때 대상의 레이아웃이이 메소드를 사용하여 설정된 경우 &lt;code&gt;ImageReader&lt;/code&gt; &lt;code&gt;read&lt;/code&gt; 메소드를 호출 할 때마다 제공된 유형 지정자가 지정한 형식을 사용하여 새 &lt;code&gt;BufferedImage&lt;/code&gt; 를 리턴 합니다. 부작용 으로 &lt;code&gt;ImageReadParam.setDestination(BufferedImage)&lt;/code&gt; 의해 설정된 대상 &lt;code&gt;BufferedImage&lt;/code&gt; 는 더 이상 대상으로 설정되지 않습니다. 즉,이 메소드는 &lt;code&gt;setDestination((BufferedImage)null)&lt;/code&gt; 을 호출하는 것으로 생각할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5b68a7995942b34e6fb81c415ca17f384da8a72" translate="yes" xml:space="preserve">
          <source>When reading, the region to be written within the destination &lt;code&gt;BufferedImage&lt;/code&gt; will start at this offset and have a width and height determined by the source region of interest, the subsampling parameters, and the destination bounds.</source>
          <target state="translated">읽을 때 대상 &lt;code&gt;BufferedImage&lt;/code&gt; 내에 작성 될 영역 은이 오프셋에서 시작하며 관심있는 소스 영역, 서브 샘플링 매개 변수 및 대상 경계에 의해 결정된 너비와 높이를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="948c72e84f23a6d80190a196cfc3c27ca22ecf53" translate="yes" xml:space="preserve">
          <source>When replacing a leaf this will attempt to make sure there is a newline present if one is needed. This may result in an additional element being inserted. Consider, if you were to replace a character element that contained a newline with &amp;lt;img&amp;gt; this would create two elements, one for the image, and one for the newline.</source>
          <target state="translated">리프를 교체 할 때 필요한 경우 개행이 있는지 확인합니다. 이로 인해 추가 요소가 삽입 될 수 있습니다. 줄 바꿈이 포함 된 문자 요소를 &amp;lt;img&amp;gt;로 바꾸면 이미지와 줄 바꿈에 각각 하나씩 두 개의 요소가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="e4073d7c2224019b5107064c858d7e912ce2c1aa" translate="yes" xml:space="preserve">
          <source>When requested by setting the parameter &quot;&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-normalize-characters&quot;&gt;normalize-characters&lt;/a&gt;&quot; on &lt;code&gt;LSSerializer&lt;/code&gt; to true, character normalization is performed according to the definition of &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot;&gt;fully normalized&lt;/a&gt; characters included in appendix E of [&lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/&quot;&gt;XML 1.1&lt;/a&gt;] on all data to be serialized, both markup and character data. The character normalization process affects only the data as it is being written; it does not alter the DOM's view of the document after serialization has completed.</source>
          <target state="translated">&lt;code&gt;LSSerializer&lt;/code&gt; 의 &quot; &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-normalize-characters&quot;&gt;normalize-characters&lt;/a&gt; &quot; 매개 변수 를 true 로 설정하여 요청하면 마크 업 및 문자 데이터 모두 직렬화 할 모든 데이터에 대해 [ &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/&quot;&gt;XML 1.1&lt;/a&gt; ] 의 부록 E에 포함 된 &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot;&gt;완전 정규화 된&lt;/a&gt; 문자 의 정의에 따라 문자 정규화가 수행됩니다 . 문자 정규화 프로세스는 기록되는 데이터에만 영향을줍니다. 직렬화가 완료된 후 문서의 DOM보기를 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="deb3421d1dd9eb4f1df73503f046814ae2b3a1c6" translate="yes" xml:space="preserve">
          <source>When requested by setting the parameter &quot;&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-normalize-characters&quot;&gt;normalize-characters&lt;/a&gt;&quot; on &lt;code&gt;LSSerializer&lt;/code&gt; to true, character normalization is performed according to the definition of &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot;&gt;fully normalized&lt;/a&gt; characters included in appendix E of [&lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml11-20040204/&quot;&gt;XML 1.1&lt;/a&gt;] on all data to be serialized, both markup and character data. The character normalization process affects only the data as it is being written; it does not alter the DOM's view of the document after serialization has completed.</source>
          <target state="translated">&lt;code&gt;LSSerializer&lt;/code&gt; 의 &quot; &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-normalize-characters&quot;&gt;normalize-characters&lt;/a&gt; &quot; 매개 변수 를 true 로 설정하여 요청하면 마크 업 및 문자 데이터 모두 직렬화 할 모든 데이터에 대해 [ &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml11-20040204/&quot;&gt;XML 1.1&lt;/a&gt; ] 의 부록 E에 포함 된 &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm&quot;&gt;완전 정규화 된&lt;/a&gt; 문자 의 정의에 따라 문자 정규화가 수행됩니다 . 문자 정규화 프로세스는 기록되는 데이터에만 영향을줍니다. 직렬화가 완료된 후 문서의 DOM보기를 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9829ac48f456c01c997a54312f4d28ae239840e5" translate="yes" xml:space="preserve">
          <source>When requesting a Namespace URI by prefix, the following table describes the returned Namespace URI value for all possible prefix values:</source>
          <target state="translated">접두사로 네임 스페이스 URI를 요청할 때 다음 표에서는 가능한 모든 접두사 값에 대해 반환 된 네임 스페이스 URI 값을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8c473adada2bf0879238d13edc56b7303e5f6472" translate="yes" xml:space="preserve">
          <source>When requesting a prefix by Namespace URI, the following table describes the returned prefix value for all Namespace URI values:</source>
          <target state="translated">네임 스페이스 URI로 접두사를 요청할 때 다음 표는 모든 네임 스페이스 URI 값에 대해 반환되는 접두사 값을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="4469f523c26a6a607eb001a67af246e496c67ea8" translate="yes" xml:space="preserve">
          <source>When requesting prefixes by Namespace URI, the following table describes the returned prefixes value for all Namespace URI values:</source>
          <target state="translated">네임 스페이스 URI로 접두사를 요청할 때 다음 표는 모든 네임 스페이스 URI 값에 대해 반환 된 접두사 값을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="47eff58ddedc0bc2eb7327683e454ec2dfb1f6d0" translate="yes" xml:space="preserve">
          <source>When resolving time fields, the map will be altered and null returned. When resolving date fields, the date is normally returned from the method, with the map altered to remove the resolved fields. However, it would also be acceptable for the date fields to be resolved into other &lt;code&gt;ChronoField&lt;/code&gt; instances that can produce a date, such as &lt;code&gt;EPOCH_DAY&lt;/code&gt;.</source>
          <target state="translated">시간 필드를 해결할 때 맵이 변경되고 null이 반환됩니다. 날짜 필드를 해석 할 때 분석 된 필드를 제거하기 위해 맵이 변경되어 메소드에서 날짜가 정상적으로 리턴됩니다. 그러나 날짜 필드를 날짜 를 생성 할 수있는 다른 &lt;code&gt;ChronoField&lt;/code&gt; 인스턴스 (예 : &lt;code&gt;EPOCH_DAY&lt;/code&gt; ) 로 해석 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d8cf7bc5f7e0ab67c20394ce506b32ad70404b7" translate="yes" xml:space="preserve">
          <source>When returning to windowed mode from an exclusive full-screen window, any display changes made by calling &lt;code&gt;setDisplayMode&lt;/code&gt; are automatically restored to their original state.</source>
          <target state="translated">배타적 전체 화면 창에서 창 모드로 돌아갈 때 &lt;code&gt;setDisplayMode&lt;/code&gt; 를 호출하여 변경된 모든 디스플레이 는 자동으로 원래 상태로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="ed495f5df0234ba9158fa7c63e4629f640c9c226" translate="yes" xml:space="preserve">
          <source>When run the following is produced.</source>
          <target state="translated">실행하면 다음이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="71220676e6e26c91102efdd4c23b78003dc6007b" translate="yes" xml:space="preserve">
          <source>When running in an environment which supports modules, processors are encouraged to include the module prefix when describing their supported annotation types. The method &lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes()&quot;&gt;&lt;code&gt;AbstractProcessor.getSupportedAnnotationTypes&lt;/code&gt;&lt;/a&gt; provides support for stripping off the module prefix when running in an environment without modules.</source>
          <target state="translated">모듈을 지원하는 환경에서 실행할 때 프로세서는 지원되는 주석 유형을 설명 할 때 모듈 접두사를 포함하는 것이 좋습니다. &lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes()&quot;&gt; &lt;code&gt;AbstractProcessor.getSupportedAnnotationTypes&lt;/code&gt; &lt;/a&gt; 메소드 는 모듈이없는 환경에서 실행할 때 모듈 접두어를 제거하는 지원을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b2e3a16dad606054ad91ef38f6e33de06fd97381" translate="yes" xml:space="preserve">
          <source>When sending a request that contains a body, the HTTP Client subscribes to the request's &lt;code&gt;BodyPublisher&lt;/code&gt; in order to receive the flow of outgoing request body data. The normal semantics of &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.subscriber&quot;&gt;&lt;code&gt;Flow.Subscriber&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.publisher&quot;&gt;&lt;code&gt;Flow.Publisher&lt;/code&gt;&lt;/a&gt; are implemented by the HTTP Client and are expected from &lt;code&gt;BodyPublisher&lt;/code&gt; implementations. Each outgoing request results in one HTTP Client &lt;code&gt;Subscriber&lt;/code&gt; subscribing to the &lt;code&gt;BodyPublisher&lt;/code&gt; in order to provide the sequence of byte buffers containing the request body. Instances of &lt;code&gt;
 ByteBuffer&lt;/code&gt; published by the publisher must be allocated by the publisher, and must not be accessed after being published to the HTTP Client. These subscriptions complete normally when the request body is fully sent, and can be canceled or terminated early through error. If a request needs to be resent for any reason, then a new subscription is created which is expected to generate the same data as before.</source>
          <target state="translated">본문이 포함 된 요청을 보낼 때 HTTP 클라이언트 는 나가는 요청 본문 데이터의 흐름을 수신하기 위해 요청의 &lt;code&gt;BodyPublisher&lt;/code&gt; 를 구독합니다 . &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.subscriber&quot;&gt; &lt;code&gt;Flow.Subscriber&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.publisher&quot;&gt; &lt;code&gt;Flow.Publisher&lt;/code&gt; &lt;/a&gt; 의 일반적인 의미 는 HTTP 클라이언트에 의해 구현되며 &lt;code&gt;BodyPublisher&lt;/code&gt; 구현 에서 예상됩니다 . 각 나가는 요청 은 요청 본문을 포함하는 바이트 버퍼 시퀀스를 제공하기 위해 하나의 HTTP 클라이언트 &lt;code&gt;Subscriber&lt;/code&gt; 가 &lt;code&gt;BodyPublisher&lt;/code&gt; 를 구독하게합니다 . &lt;code&gt; ByteBuffer&lt;/code&gt; 의 인스턴스게시자가 게시 한 것은 게시자가 할당해야하며 HTTP 클라이언트에 게시 된 후에는 액세스해서는 안됩니다. 이러한 구독은 요청 본문이 완전히 전송되면 정상적으로 완료되며 오류를 통해 조기에 취소하거나 종료 할 수 있습니다. 어떤 이유로 든 요청을 다시 보내야하는 경우 이전과 동일한 데이터를 생성 할 것으로 예상되는 새 구독이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="76363a09529976afbe0f0801c413175b6a84dc98" translate="yes" xml:space="preserve">
          <source>When sending timer notifications, the timer updates the notification sequence number irrespective of the notification type.</source>
          <target state="translated">타이머 알림을 보낼 때 타이머는 알림 유형에 관계없이 알림 시퀀스 번호를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="e95bdd8162adf9968f7adc4afbf013d6f5093728" translate="yes" xml:space="preserve">
          <source>When serializing an &lt;code&gt;Element&lt;/code&gt;, the element is passed to the filter before any of its attributes are passed to the filter. Namespace declaration attributes, and default attributes (except in the case when &quot; discard-default-content&quot; is set to &lt;code&gt;false&lt;/code&gt;), are never passed to the filter.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; 를 직렬화 할 때 요소는 속성이 필터에 전달되기 전에 필터로 전달됩니다. 네임 스페이스 선언 속성 및 기본 속성 ( &quot;waste-default-content&quot;가 &lt;code&gt;false&lt;/code&gt; 로 설정된 경우 제외 )은 필터에 전달되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="016bd53a30e369ac9500dd916cae37c51e43c195" translate="yes" xml:space="preserve">
          <source>When setting or getting the &lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; or &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; fields, &lt;code&gt;Calendar&lt;/code&gt; must determine the first week of the month or year as a reference point. The first week of a month or year is defined as the earliest seven day period beginning on &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and containing at least &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; days of that month or year. Weeks numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note that the normalized numbering returned by &lt;code&gt;get()&lt;/code&gt; may be different. For example, a specific &lt;code&gt;Calendar&lt;/code&gt; subclass may designate the week before week 1 of a year as week &lt;code&gt;&lt;i&gt;n&lt;/i&gt;&lt;/code&gt; of the previous year.</source>
          <target state="translated">&lt;code&gt;WEEK_OF_MONTH&lt;/code&gt; 또는 &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; 필드를 설정하거나 가져올 때 &lt;code&gt;Calendar&lt;/code&gt; 은 월 또는 연도의 첫 번째 주를 기준점으로 결정해야합니다. 월 또는 연도의 첫 번째주는 &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; 에서 시작하여 해당 월 또는 연도의 최소 &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; 일을 포함 하는 가장 빠른 7 일 기간으로 정의됩니다 . 주 번호는 ..., -1, 0이 첫 주 앞에옵니다. 2, 3 번의 번호가 매겨져 있습니다. &lt;code&gt;get()&lt;/code&gt; 의해 반환 된 정규화 된 번호는 다를 수 있습니다. 예를 들어, 특정 &lt;code&gt;Calendar&lt;/code&gt; 하위 클래스는 1 년 전 1 주 전을 전년도 &lt;code&gt;&lt;i&gt;n&lt;/i&gt;&lt;/code&gt; 주로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d95cdd09e08dbf61e5dd1557a78ec0a6f3ed5062" translate="yes" xml:space="preserve">
          <source>When setting the filter, it should be stateless and idempotent, reporting the same result when passed the same arguments.</source>
          <target state="translated">필터를 설정할 때 동일한 인수를 전달할 때 동일한 결과를보고하는 상태 비 저장 및 멱등이어야합니다.</target>
        </trans-unit>
        <trans-unit id="6a17a22214c7c2e160d3cfa1f6db1fc4e32a144d" translate="yes" xml:space="preserve">
          <source>When setting this field, the value is allowed to be partially lenient, taking any value from 1 to 92. If the quarter has less than 92 days, then day 92, and potentially day 91, is in the following quarter.</source>
          <target state="translated">이 필드를 설정하면 1에서 92 사이의 값을 사용하여 값이 부분적으로 관 대해집니다. 분기가 92 일 미만이면 92 일, 잠재적으로 91 일은 다음 분기에 있습니다.</target>
        </trans-unit>
        <trans-unit id="669b10bb52f2a514a970d8c5edffcfcd75525b6b" translate="yes" xml:space="preserve">
          <source>When setting up a print job, a client specifies two things: &lt;b&gt;print data&lt;/b&gt; and &lt;b&gt;processing instructions.&lt;/b&gt; The print data is the actual content to be printed. The processing instructions tell the printer how to print the print data, such as: what media to use, how many copies to print, and whether to print on one or both sides of a sheet. The client specifies these processing instructions with the attribute definitions of the Java Print Service API.</source>
          <target state="translated">인쇄 작업을 설정할 때 클라이언트는 &lt;b&gt;인쇄 데이터&lt;/b&gt; 와 &lt;b&gt;처리 지침의&lt;/b&gt; 두 가지를 지정합니다 &lt;b&gt;. &lt;/b&gt;인쇄 데이터는 인쇄 할 실제 내용입니다. 처리 지침은 프린터에 인쇄 매체 인쇄 방법 (사용할 용지, 인쇄 매수, 한면 또는 양면 인쇄 여부)을 알려줍니다. 클라이언트는 Java 처리 서비스 API의 속성 정의를 사용하여 이러한 처리 지시 사항을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="3895d679fc7204e5dcd10a6d612e982d4bf1edef" translate="yes" xml:space="preserve">
          <source>When specific characters are mapped into glyphs in some rendering context, instructions in the font itself together with the rasterization process may cause some glyph to have a wider advance than reported.</source>
          <target state="translated">일부 렌더링 컨텍스트에서 특정 문자가 글리프에 매핑되면 래스터 화 프로세스와 함께 글꼴 자체의 지침으로 인해 일부 글리프가보고 된 것보다 더 넓게 진행될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="992deb8ce4de81a3a8e6eef7b845fb57e8e29bfe" translate="yes" xml:space="preserve">
          <source>When specified at the doc level, an attribute applies just to that one doc. When specified at the Print Request level, an attribute applies to the whole job, including all the docs in the job. However, an attribute specified at the doc level overrides an attribute in the same category specified at the Print Request level.</source>
          <target state="translated">문서 레벨에서 지정된 경우 속성은 해당 문서 하나에 만 적용됩니다. 인쇄 요청 레벨에서 지정된 경우 속성은 작업의 모든 문서를 포함하여 전체 작업에 적용됩니다. 그러나 문서 수준에서 지정된 속성은 인쇄 요청 수준에서 지정된 동일한 범주의 속성보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="812c36aefe75f1f01b1e22e1de7ca89fc2466e0d" translate="yes" xml:space="preserve">
          <source>When submitting a print job to a printer, the client provides the attributes describing the characteristics of the print data, such as the document name, and how the print data should be printed, such as double-sided, five copies. If a print job consists of multiple pieces of print data, different pieces might have different processing instructions, such as 8 x 11 inch media for the first document, and 11 x 17 inch media for another document.</source>
          <target state="translated">클라이언트는 인쇄 작업을 프린터에 제출할 때 문서 이름과 같은 인쇄 데이터의 특성과 양면 5 부와 같은 인쇄 데이터 인쇄 방법을 설명하는 속성을 제공합니다. 인쇄 작업이 여러 개의 인쇄 데이터로 구성된 경우 각 조각마다 첫 번째 문서의 경우 8 x 11 인치 용지, 다른 문서의 경우 11 x 17 인치 용지와 같은 다른 처리 지침이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e9ff7cc584e16b6ab10015ab9bcdd0ba01476c5" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 주석 값 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7cee9708c809ea2c5706271d9f5de6094df8928a" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract element visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 요소 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="103e345f76c16d48cafc8a85f69a007ae6fc9260" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract type visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 유형 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0634269e692a9a236845f34b129b30b4ad1d950" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 주석 값 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bd8fde8037f05021ae5406815b06bfefd44e332" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새 언어 수준에 해당하는 새 단순 주석 값 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03ec6c25b6d376081732b85e415911f8c6ec0d3e" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown-javax.lang.model.element.AnnotationValue-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown-javax.lang.model.element.AnnotationValue-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 추상 어노테이션 값 방문자 클래스도 새로운 언어 레벨에 맞게 소개 될 것입니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05ff925b46ec11d08257cdc7e971c5f6bf2e8675" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown-javax.lang.model.element.AnnotationValue-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown-javax.lang.model.element.AnnotationValue-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 간단한 어노테이션 값 방문자 클래스도 새로운 언어 레벨에 맞게 소개됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27c4228447106a355af0159031dee75cd1cf6476" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract element kind visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 추상 요소 종류 방문자 클래스도 새로운 언어 수준에 맞게 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6211be69d40865a23b57629a99ebded376b30392" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract element visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 요소 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c6e97c8e268ce1819909e688b39f6199c9409ae" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new element scanner visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 요소 스캐너 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86581670b2bf6977794da9d077dabee784e08b42" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple element visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 단순 요소 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="044c236c1377724dc963f7b253a1633adebf4edd" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract element kind visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 대응하기 위해 새로운 추상 요소 종류의 방문자 클래스도 도입 될 것입니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="710e79e570a5917821dfd7344c3f17284d9a4964" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract element visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 대응하기 위해 새로운 추상 요소 방문자 클래스도 도입 될 것입니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf2a73437432866576d26e93ec38ac98756a0ab7" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new element scanner visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 대응하기 위해 새로운 요소 스캐너 방문자 클래스도 도입 될 것입니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d632be78f99f513b8aa8e1b7f5cb5683a59ff22f" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple element visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown-javax.lang.model.element.Element-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 대응하기 위해 새로운 간단한 요소 방문자 클래스도 도입 될 것입니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="425c228d797e1d155d3a9aacad4b65a7e3cd8fc7" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract type visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 유형 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca02dde6bf89fc22036125452b0233a9a4bb4fe0" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple type visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 단순 유형 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06a03ed21f6890e3698866751eba23ff67280af0" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new type kind visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 유형의 방문자 클래스도 새로운 언어 수준에 맞게 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 전체 또는 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31a71bf88455082c4bc48a8526d303b8ca6d7ee4" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown-javax.lang.model.type.TypeMirror-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract type visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown-javax.lang.model.type.TypeMirror-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 유형 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0bd9887b4dede673a8a857fd6f562d2e6651e7c" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown-javax.lang.model.type.TypeMirror-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple type visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown-javax.lang.model.type.TypeMirror-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 단순 레벨 방문자 클래스도 새로운 언어 레벨에 맞게 소개됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5e7913304df13157eca5adf23774332e392edc0" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown-javax.lang.model.type.TypeMirror-P-&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new type kind visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated.</source>
          <target state="translated">이러한 새 방문 메소드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown-javax.lang.model.type.TypeMirror-P-&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메소드 를 호출하는 것입니다. 새로운 언어 수준에 대응하기 위해 새로운 유형의 방문자 클래스도 소개 될 것입니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면이 방문자의 일부 또는 전부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38469fe20bc4e9d1029889724c85678da2e32e2a" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 주석 값 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c39d5a543c6e0acd6f0d74dc5aae219e75371e8b" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract element visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 요소 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="476153c757f00667de98633999b28f08798d719e" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract type visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 추상 유형 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29383727360a6849aedf41675deb7286fbdbe298" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple annotation value visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractannotationvaluevisitor6#visitUnknown(javax.lang.model.element.AnnotationValue,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새 언어 수준에 해당하는 새 단순 주석 값 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c34c99c81a259843368afc68e40fda6e68328bb" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new abstract element kind visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 추상 요소 종류 방문자 클래스도 새로운 언어 수준에 맞게 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbe8c34b910b4b626addcd7a24df0849f71e163d" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new element scanner visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 요소 스캐너 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8e990163a52ce2479b286e22e932209c387e7bf" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple element visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstractelementvisitor6#visitUnknown(javax.lang.model.element.Element,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 단순 요소 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9aeb498e8df1efa9575905f07475db10e0ddc77" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new simple type visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 언어 수준에 해당하는 새로운 단순 유형 방문자 클래스도 도입됩니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5c1896c09a17da8abbadc461792ff89b596952b" translate="yes" xml:space="preserve">
          <source>When such a new visit method is added, the default implementation in this class will be to directly or indirectly call the &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt;&lt;code&gt;visitUnknown&lt;/code&gt;&lt;/a&gt; method. A new type kind visitor class will also be introduced to correspond to the new language level; this visitor will have different default behavior for the visit method in question. When a new visitor is introduced, portions of this visitor class may be deprecated, including its constructors.</source>
          <target state="translated">이러한 새 방문 메서드가 추가되면이 클래스의 기본 구현은 &lt;a href=&quot;abstracttypevisitor6#visitUnknown(javax.lang.model.type.TypeMirror,P)&quot;&gt; &lt;code&gt;visitUnknown&lt;/code&gt; &lt;/a&gt; 메서드 를 직접 또는 간접적으로 호출하는 것입니다. 새로운 유형의 방문자 클래스도 새로운 언어 수준에 맞게 도입 될 것입니다. 이 방문자는 해당 방문 방법에 대해 다른 기본 동작을 갖습니다. 새 방문자가 소개되면 생성자를 포함하여이 방문자 클래스의 일부가 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7169edd82e18117207c8b43effbe612c3734164e" translate="yes" xml:space="preserve">
          <source>When symbolic links are supported, then whether the resulting path, when resolved against this path, yields a path that can be used to locate the &lt;a href=&quot;files#isSameFile(java.nio.file.Path,java.nio.file.Path)&quot;&gt;&lt;code&gt;same&lt;/code&gt;&lt;/a&gt; file as &lt;code&gt;other&lt;/code&gt; is implementation dependent. For example, if this path is &lt;code&gt;&quot;/a/b&quot;&lt;/code&gt; and the given path is &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt; then the resulting relative path may be &lt;code&gt;
 &quot;../x&quot;&lt;/code&gt;. If &lt;code&gt;&quot;b&quot;&lt;/code&gt; is a symbolic link then is implementation dependent if &lt;code&gt;&quot;a/b/../x&quot;&lt;/code&gt; would locate the same file as &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt;.</source>
          <target state="translated">심볼릭 링크가 지원되는 경우이 경로에 대해 분석 될 때 결과 경로 가 &lt;code&gt;other&lt;/code&gt; 파일과 &lt;a href=&quot;files#isSameFile(java.nio.file.Path,java.nio.file.Path)&quot;&gt; &lt;code&gt;same&lt;/code&gt; &lt;/a&gt; 파일 을 찾는 데 사용할 수있는 경로를 생성하는지 여부 는 구현에 따라 다릅니다. 예를 &lt;code&gt; &quot;../x&quot;&lt;/code&gt; 경로가 &lt;code&gt;&quot;/a/b&quot;&lt;/code&gt; 이고 지정된 경로가 &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt; 이면 결과 상대 경로는 &quot;../x&quot; 가 될 수 있습니다 . 경우 &lt;code&gt;&quot;b&quot;&lt;/code&gt; 심볼릭 링크는 다음 구현에 의존하는 경우 &lt;code&gt;&quot;a/b/../x&quot;&lt;/code&gt; 와 같은 파일을 찾을 것 &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21130ee63b47bcee22d5206a3b440986ec034278" translate="yes" xml:space="preserve">
          <source>When symbolic links are supported, then whether the resulting path, when resolved against this path, yields a path that can be used to locate the &lt;a href=&quot;files#isSameFile-java.nio.file.Path-java.nio.file.Path-&quot;&gt;&lt;code&gt;same&lt;/code&gt;&lt;/a&gt; file as &lt;code&gt;other&lt;/code&gt; is implementation dependent. For example, if this path is &lt;code&gt;&quot;/a/b&quot;&lt;/code&gt; and the given path is &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt; then the resulting relative path may be &lt;code&gt;&quot;../x&quot;&lt;/code&gt;. If &lt;code&gt;&quot;b&quot;&lt;/code&gt; is a symbolic link then is implementation dependent if &lt;code&gt;&quot;a/b/../x&quot;&lt;/code&gt; would locate the same file as &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt;.</source>
          <target state="translated">심볼릭 링크가 지원되면이 경로에 대해 해석 될 때 결과 경로 가 &lt;code&gt;other&lt;/code&gt; 파일과 &lt;a href=&quot;files#isSameFile-java.nio.file.Path-java.nio.file.Path-&quot;&gt; &lt;code&gt;same&lt;/code&gt; &lt;/a&gt; 파일 을 찾는 데 사용할 수있는 경로를 생성하는지 여부 는 구현에 따라 다릅니다. 예를 들어,이 경로가 &lt;code&gt;&quot;/a/b&quot;&lt;/code&gt; 이고 지정된 경로가 &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt; 이면 결과 상대 경로는 &lt;code&gt;&quot;../x&quot;&lt;/code&gt; 일 수 있습니다 . 경우 &lt;code&gt;&quot;b&quot;&lt;/code&gt; 심볼릭 링크는 다음 구현에 의존하는 경우 &lt;code&gt;&quot;a/b/../x&quot;&lt;/code&gt; 와 같은 파일을 찾을 것 &lt;code&gt;&quot;/a/x&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9201aa7cc9fa88f4813925552674c147d8b25ef5" translate="yes" xml:space="preserve">
          <source>When testing the user-information, path, query, fragment, authority, or scheme-specific parts of two URIs for equality, the raw forms rather than the encoded forms of these components are compared and the hexadecimal digits of escaped octets are compared without regard to case.</source>
          <target state="translated">두 URI의 사용자 정보, 경로, 쿼리, 조각, 권한 또는 체계 별 부분이 동일한 지 테스트 할 때 이러한 구성 요소의 인코딩 된 형식이 아닌 원시 형식을 비교하고 이스케이프 된 옥텟의 16 진수를 고려하지 않고 비교합니다. 경우에.</target>
        </trans-unit>
        <trans-unit id="2cb5a2d45e0a1e497d3635ca731bd3fec76abfbe" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;#enter()&quot;&gt;&lt;code&gt;enter()&lt;/code&gt;&lt;/a&gt; method is called, the current thread is blocked until the loop is terminated by the &lt;a href=&quot;#exit()&quot;&gt;&lt;code&gt;exit()&lt;/code&gt;&lt;/a&gt; method. Also, a new event loop is started on the event dispatch thread, which may or may not be the current thread. The loop can be terminated on any thread by calling its &lt;a href=&quot;#exit()&quot;&gt;&lt;code&gt;exit()&lt;/code&gt;&lt;/a&gt; method. After the loop is terminated, the &lt;code&gt;SecondaryLoop&lt;/code&gt; object can be reused to run a new nested event loop.</source>
          <target state="translated">(가)시 &lt;a href=&quot;#enter()&quot;&gt; &lt;code&gt;enter()&lt;/code&gt; &lt;/a&gt; 메소드가 호출 루프가 종료 될 때까지, 현재 스레드가 차단되는 &lt;a href=&quot;#exit()&quot;&gt; &lt;code&gt;exit()&lt;/code&gt; &lt;/a&gt; 방법. 또한 새로운 이벤트 루프는 현재 스레드 일 수도 있고 아닐 수도있는 이벤트 디스패치 스레드에서 시작됩니다. 루프는 &lt;a href=&quot;#exit()&quot;&gt; &lt;code&gt;exit()&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 모든 스레드에서 종료 할 수 있습니다 . 루프가 종료 된 후 &lt;code&gt;SecondaryLoop&lt;/code&gt; 객체를 재사용하여 새 중첩 이벤트 루프를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59f0744a6b287db23096a83cb187666b95b7fc4d" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions#SO_KEEPALIVE&quot;&gt;&lt;code&gt;SO_KEEPALIVE&lt;/code&gt;&lt;/a&gt; option is enabled, TCP probes a connection that has been idle for some amount of time. If the remote system does not respond to a keep-alive probe, TCP retransmits the probe a certain number of times before a connection is considered to be broken. The default value for this keep-alive probe retransmit limit is system dependent, but is typically 8. The &lt;code&gt;TCP_KEEPCOUNT&lt;/code&gt; option can be used to affect this value for a given socket.</source>
          <target state="translated">되면 &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions#SO_KEEPALIVE&quot;&gt; &lt;code&gt;SO_KEEPALIVE&lt;/code&gt; &lt;/a&gt; 옵션을 사용하도록 설정, TCP는 일정 시간 동안 유휴 연결을 프로브. 원격 시스템이 연결 유지 프로브에 응답하지 않으면 TCP는 연결이 끊어진 것으로 간주되기 전에 특정 횟수만큼 프로브를 재전송합니다. 이 연결 유지 프로브 재전송 제한의 기본값은 시스템에 따라 다르지만 일반적으로 8입니다. &lt;code&gt;TCP_KEEPCOUNT&lt;/code&gt; 옵션을 사용하여 주어진 소켓에 대해이 값에 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a0c228e997d3d3e4db09196df54969099e8b4f9" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions#SO_KEEPALIVE&quot;&gt;&lt;code&gt;SO_KEEPALIVE&lt;/code&gt;&lt;/a&gt; option is enabled, TCP probes a connection that has been idle for some amount of time. If the remote system does not respond to a keep-alive probe, TCP retransmits the probe after some amount of time. The default value for this retransmission interval is system dependent, but is typically 75 seconds. The &lt;code&gt;TCP_KEEPINTERVAL&lt;/code&gt; option can be used to affect this value for a given socket.</source>
          <target state="translated">되면 &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions#SO_KEEPALIVE&quot;&gt; &lt;code&gt;SO_KEEPALIVE&lt;/code&gt; &lt;/a&gt; 옵션을 사용하도록 설정, TCP는 일정 시간 동안 유휴 연결을 프로브. 원격 시스템이 연결 유지 프로브에 응답하지 않으면 TCP는 일정 시간 후에 프로브를 재전송합니다. 이 재전송 간격의 기본값은 시스템에 따라 다르지만 일반적으로 75 초입니다. &lt;code&gt;TCP_KEEPINTERVAL&lt;/code&gt; 의 옵션은 주어진 소켓이 값에 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc3cf674897013f49a0a716d0c54d91cef247e3f" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions#SO_KEEPALIVE&quot;&gt;&lt;code&gt;SO_KEEPALIVE&lt;/code&gt;&lt;/a&gt; option is enabled, TCP probes a connection that has been idle for some amount of time. The default value for this idle period is system dependent, but is typically 2 hours. The &lt;code&gt;TCP_KEEPIDLE&lt;/code&gt; option can be used to affect this value for a given socket.</source>
          <target state="translated">되면 &lt;a href=&quot;../../../java.base/java/net/standardsocketoptions#SO_KEEPALIVE&quot;&gt; &lt;code&gt;SO_KEEPALIVE&lt;/code&gt; &lt;/a&gt; 옵션을 사용하도록 설정, TCP는 일정 시간 동안 유휴 연결을 프로브. 이 유휴 기간의 기본값은 시스템에 따라 다르지만 일반적으로 2 시간입니다. &lt;code&gt;TCP_KEEPIDLE&lt;/code&gt; 의 옵션은 주어진 소켓이 값에 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93c5bf1f5d3d11b7b3d1d812715baf3c9fe0fecb" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt;&lt;code&gt;LSResourceResolver&lt;/code&gt;&lt;/a&gt; is null, the implementation will behave as if the following &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt;&lt;code&gt;LSResourceResolver&lt;/code&gt;&lt;/a&gt; is set:</source>
          <target state="translated">때 &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt; &lt;code&gt;LSResourceResolver&lt;/code&gt; 나이&lt;/a&gt; 널 (null)이며, 구현은 다음과 같은 경우로 동작합니다 &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt; &lt;code&gt;LSResourceResolver&lt;/code&gt; 나이&lt;/a&gt; 설정됩니다</target>
        </trans-unit>
        <trans-unit id="9c71a117a0d78807772c45691dff3b7188404bd9" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; is null, the implementation will behave as if the following &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; is set:</source>
          <target state="translated">때 &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt; 널 (null)이 다음처럼 구현 동작합니다 &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; 를이&lt;/a&gt; 설정은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="349843d9371dc6f3aced62d1709febefa1cdc8d8" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;objectinputfilter#checkInput(java.io.ObjectInputFilter.FilterInfo)&quot;&gt;&lt;code&gt;checkInput&lt;/code&gt;&lt;/a&gt; method is invoked it is given access to the current class, the array length, the current number of references already read from the stream, the depth of nested calls to &lt;a href=&quot;#readObject()&quot;&gt;&lt;code&gt;readObject&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#readUnshared()&quot;&gt;&lt;code&gt;readUnshared&lt;/code&gt;&lt;/a&gt;, and the implementation dependent number of bytes consumed from the input stream.</source>
          <target state="translated">때 &lt;a href=&quot;objectinputfilter#checkInput(java.io.ObjectInputFilter.FilterInfo)&quot;&gt; &lt;code&gt;checkInput&lt;/code&gt; 의&lt;/a&gt; 방법은 호출이 현재 클래스, 배열의 길이에 대한 액세스 권한이 부여되고, 이미 스트림에 중첩 된 호출의 깊이에서 읽을 참조의 현재 수 &lt;a href=&quot;#readObject()&quot;&gt; &lt;code&gt;readObject&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#readUnshared()&quot;&gt; &lt;code&gt;readUnshared&lt;/code&gt; 를&lt;/a&gt; , 바이트의 구현에 의존 수는에서 소비 입력 스트림.</target>
        </trans-unit>
        <trans-unit id="ab0a44a62ffe84a96b19e3bf378964ba73e0fcca" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;CachedRowSet&lt;/code&gt; method &lt;code&gt;acceptChanges&lt;/code&gt; is called, it delegates to the &lt;code&gt;RowSet&lt;/code&gt; object's &lt;code&gt;SyncProvider&lt;/code&gt; object. How the writer provided by that &lt;code&gt;SyncProvider&lt;/code&gt; object is implemented determines what level (grade) of checking for conflicts will be done. After all checking for conflicts is completed and one or more conflicts has been found, the method &lt;code&gt;acceptChanges&lt;/code&gt; throws a &lt;code&gt;SyncProviderException&lt;/code&gt; object. The application can catch the exception and use it to obtain a &lt;code&gt;SyncResolver&lt;/code&gt; object.</source>
          <target state="translated">때 &lt;code&gt;CachedRowSet&lt;/code&gt; 방법 &lt;code&gt;acceptChanges&lt;/code&gt; 받는 사람, 위임라고 &lt;code&gt;RowSet&lt;/code&gt; 객체의 &lt;code&gt;SyncProvider&lt;/code&gt; 객체입니다. 해당 &lt;code&gt;SyncProvider&lt;/code&gt; 개체에서 제공하는 작성기 가 구현 되는 방법에 따라 충돌 검사가 수행되는 수준 (등급)이 결정됩니다. 모든 충돌 검사가 완료되고 하나 이상의 충돌이 발견되면 &lt;code&gt;acceptChanges&lt;/code&gt; 메소드 가 &lt;code&gt;SyncProviderException&lt;/code&gt; 객체를 발생시킵니다. 애플리케이션은 예외를 포착하고이를 사용하여 &lt;code&gt;SyncResolver&lt;/code&gt; 오브젝트 를 확보 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72afefcfd2d2b20f95a8bc304631fb4c64f7b278" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the body has been completely written to the byte array.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 객체가 리턴 본체 완전히 바이트 어레이에 기록되었다.</target>
        </trans-unit>
        <trans-unit id="0d9e780897f9f330f634a20683b4c50779ddf071" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the body has been completely written to the consumer.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 에의 객체가 반환되고, 몸이 완전히 소비자에 기록되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba9826c0dffb73820d59d4df3c02f81a55a41d8a" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the body has been completely written to the file and &lt;a href=&quot;httpresponse#body()&quot;&gt;&lt;code&gt;HttpResponse.body()&lt;/code&gt;&lt;/a&gt; returns a &lt;code&gt;Path&lt;/code&gt; object for the file. The returned &lt;code&gt;Path&lt;/code&gt; is the combination of the supplied directory name and the file name supplied by the server. If the destination directory does not exist or cannot be written to, then the response will fail with an &lt;a href=&quot;../../../../java.base/java/io/ioexception&quot;&gt;&lt;code&gt;IOException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 에의 객체가 반환되고, 몸이 완전히 파일에 기록 된 &lt;a href=&quot;httpresponse#body()&quot;&gt; &lt;code&gt;HttpResponse.body()&lt;/code&gt; &lt;/a&gt; 반환 &lt;code&gt;Path&lt;/code&gt; 파일에 대한 객체. 반환 된 &lt;code&gt;Path&lt;/code&gt; 는 제공된 디렉토리 이름과 서버에서 제공 한 파일 이름의 조합입니다. 대상 디렉토리가 없거나 쓸 수없는 경우 &lt;a href=&quot;../../../../java.base/java/io/ioexception&quot;&gt; &lt;code&gt;IOException&lt;/code&gt; 으로&lt;/a&gt; 응답이 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="ae8fe4cf9af58eae2641375733a0acff7ecc038a" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the body has been completely written to the file, and &lt;a href=&quot;httpresponse#body()&quot;&gt;&lt;code&gt;HttpResponse.body()&lt;/code&gt;&lt;/a&gt; returns a reference to its &lt;a href=&quot;../../../../java.base/java/nio/file/path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 에의 객체가 반환되고, 몸이 완전히 파일에 기록하고있다 &lt;a href=&quot;httpresponse#body()&quot;&gt; &lt;code&gt;HttpResponse.body()&lt;/code&gt; &lt;/a&gt; 의에 대한 참조를 반환 &lt;a href=&quot;../../../../java.base/java/nio/file/path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f8b7f93bc4b770c2f3611214ea9f4ae4a8f5b0d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the body has been completely written to the string.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 에의 객체가 반환되고, 몸은 완전히 문자열로 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="d434402a35c684d119251a82bd168ecbc741dd91" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the body may not have been completely received.</source>
          <target state="translated">&lt;code&gt;HttpResponse&lt;/code&gt; 개체가 반환 될 때 본문이 완전히 수신되지 않았을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="920362988fe9f44a3ddb764c3063325d40a93a51" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the response headers will have been completely read, but the body may not have been fully received yet. The &lt;a href=&quot;httpresponse#body()&quot;&gt;&lt;code&gt;HttpResponse.body()&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.publisher&quot;&gt;&lt;code&gt;Publisher&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;&lt;/code&gt; from which the body response bytes can be obtained as they are received. The publisher can and must be subscribed to only once.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 에의 객체가 반환됩니다 응답 헤더 읽기 완전히되었습니다하지만, 몸은 아직 완전히 접수되지 않았을 수 있습니다. &lt;a href=&quot;httpresponse#body()&quot;&gt; &lt;code&gt;HttpResponse.body()&lt;/code&gt; &lt;/a&gt; 메소드는 반환 &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.publisher&quot;&gt; &lt;code&gt;Publisher&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;&lt;/code&gt; 가 수신 될 때 상기 본체 바이트 응답이 얻어 질 수있는이. 게시자는 한 번만 구독 할 수 있으며 구독해야합니다.</target>
        </trans-unit>
        <trans-unit id="3e5ca13755a6bfd06a017657997d9818861116f6" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the response headers will have been completely read, but the body may not have been fully received yet. The &lt;a href=&quot;httpresponse#body()&quot;&gt;&lt;code&gt;HttpResponse.body()&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.publisher&quot;&gt;&lt;code&gt;Publisher&lt;list&gt;&amp;gt;&lt;/list&gt;&lt;/code&gt;&lt;/a&gt; from which the body response bytes can be obtained as they are received. The publisher can and must be subscribed to only once.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 에의 객체가 반환됩니다 응답 헤더 읽기 완전히되었습니다하지만, 몸은 아직 완전히 접수되지 않았을 수 있습니다. &lt;a href=&quot;httpresponse#body()&quot;&gt; &lt;code&gt;HttpResponse.body()&lt;/code&gt; &lt;/a&gt; 메소드는 반환 &lt;a href=&quot;../../../../java.base/java/util/concurrent/flow.publisher&quot;&gt; &lt;code&gt;Publisher&lt;list&gt;&amp;gt;&lt;/list&gt;&lt;/code&gt; &lt;/a&gt;수신 된 본문 응답 바이트를 얻을 수 있습니다. 게시자는 한 번만 구독 할 수 있으며 구독해야합니다.</target>
        </trans-unit>
        <trans-unit id="9b1d642a866048552e189045dd9a35591fae905b" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;HttpResponse&lt;/code&gt; object is returned, the response headers will have been completely read, but the body may not have been fully received yet. The &lt;a href=&quot;httpresponse#body()&quot;&gt;&lt;code&gt;HttpResponse.body()&lt;/code&gt;&lt;/a&gt; method returns an &lt;a href=&quot;../../../../java.base/java/io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; from which the body can be read as it is received.</source>
          <target state="translated">때 &lt;code&gt;HttpResponse&lt;/code&gt; 에의 객체가 반환됩니다 응답 헤더 읽기 완전히되었습니다하지만, 몸은 아직 완전히 접수되지 않았을 수 있습니다. &lt;a href=&quot;httpresponse#body()&quot;&gt; &lt;code&gt;HttpResponse.body()&lt;/code&gt; &lt;/a&gt; 메소드는 반환 &lt;a href=&quot;../../../../java.base/java/io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt; 가 수신 될 때 신체가 판독 할 수있는이.</target>
        </trans-unit>
        <trans-unit id="1ee08c821ac6ffd8d690cbbc08d004846b4f65e3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Printable&lt;/code&gt; is obtained from a client-supplied &lt;code&gt;Pageable&lt;/code&gt; then the client may provide different PageFormats for each page index. Calculations of page breaks must account for this.</source>
          <target state="translated">클라이언트가 제공 한 &lt;code&gt;Pageable&lt;/code&gt; 에서 &lt;code&gt;Printable&lt;/code&gt; 을 가져 오면 클라이언트는 각 페이지 인덱스에 대해 다른 PageFormats를 제공 할 수 있습니다. 페이지 나누기를 계산할 때이를 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="8da723286e46b5dcc04253d5d4b818f47a7e075f" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;RowSet&lt;/code&gt; object changes one of its rows, changes all of it rows, or moves its cursor, it also notifies each listener that is registered with it. The listener reacts by carrying out its implementation of the notification method called on it.</source>
          <target state="translated">때 &lt;code&gt;RowSet&lt;/code&gt; 객체가 1 행을 변경, 또한 그 등록되어 각 청취자에게 통지, 그것의 모든 행을 변경하는, 또는 커서를 움직인다. 리스너는 호출 된 알림 메소드를 구현하여 반응합니다.</target>
        </trans-unit>
        <trans-unit id="ee7ac132993577ecd59468c3647a9e567b53ac77" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;add&lt;/code&gt; method is called to add a Permission, the Permission is stored in the appropriate PermissionCollection. If no such collection exists yet, the Permission object's class is determined and the &lt;code&gt;newPermissionCollection&lt;/code&gt; method is called on that class to create the PermissionCollection and add it to the Permissions object. If &lt;code&gt;newPermissionCollection&lt;/code&gt; returns null, then a default PermissionCollection that uses a hashtable will be created and used. Each hashtable entry stores a Permission object as both the key and the value.</source>
          <target state="translated">때 &lt;code&gt;add&lt;/code&gt; 메소드가 호출 해 Permission를 추가, Permission는 적절한 PermissionCollection에 저장됩니다. 이러한 컬렉션이 아직 존재하지 않으면 Permission 객체의 클래스가 결정되고 해당 클래스에서 &lt;code&gt;newPermissionCollection&lt;/code&gt; 메서드가 호출되어 PermissionCollection을 만들어 Permissions 객체에 추가합니다. 경우 &lt;code&gt;newPermissionCollection&lt;/code&gt; 널 (null)을 반환 한 후 해시 테이블을 사용하는 디폴트의 PermissionCollection가 작성되어 사용됩니다. 각 해시 테이블 항목은 Permission 객체를 키와 값으로 저장합니다.</target>
        </trans-unit>
        <trans-unit id="b88d575b7afc2c5eb726273e486f2105b12c75a9" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;cellRenderer&lt;/code&gt; or &lt;code&gt;cellEditor&lt;/code&gt; parameter is &lt;code&gt;null&lt;/code&gt;, a default value provided by the &lt;code&gt;JTable&lt;/code&gt;&lt;code&gt;getDefaultRenderer&lt;/code&gt; or &lt;code&gt;getDefaultEditor&lt;/code&gt; method, respectively, is used to provide defaults based on the type of the data in this column. This column-centric rendering strategy can be circumvented by overriding the &lt;code&gt;getCellRenderer&lt;/code&gt; methods in &lt;code&gt;JTable&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;cellRenderer&lt;/code&gt; 의 또는 &lt;code&gt;cellEditor&lt;/code&gt; 가 매개 변수가 &lt;code&gt;null&lt;/code&gt; 은에 의해 제공되는 디폴트 값 &lt;code&gt;JTable&lt;/code&gt; &lt;code&gt;getDefaultRenderer&lt;/code&gt; 또는 &lt;code&gt;getDefaultEditor&lt;/code&gt; 에 있어서, 각각이 항목의 데이터의 타입에 기초하여 디폴트 값을 제공하는데 사용된다. 이 열 중심 렌더링 전략은 &lt;code&gt;JTable&lt;/code&gt; 의 &lt;code&gt;getCellRenderer&lt;/code&gt; 메서드를 재정 의하여 피할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7bda165d83525f9548659c3eec7e03d20271f7a7" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;getCallerClass&lt;/code&gt; method is called from a method that is the bottom most frame on the stack, for example, &lt;code&gt;static public void main&lt;/code&gt; method launched by the &lt;code&gt;java&lt;/code&gt; launcher, or a method invoked from a JNI attached thread, &lt;code&gt;IllegalCallerException&lt;/code&gt; is thrown.</source>
          <target state="translated">때 &lt;code&gt;getCallerClass&lt;/code&gt; 의 방법은 예를 들어, 스택에 바닥 가장 프레임을하는 방법에서 호출 &lt;code&gt;static public void main&lt;/code&gt; 에 의해 시작 방법 &lt;code&gt;java&lt;/code&gt; 실행, 또는 방법은 JNI 첨부 된 스레드에서 호출, &lt;code&gt;IllegalCallerException&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5d8cbad25caa72fa532ed2521b7fd96e96a6b5fa" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;invokevirtual&lt;/code&gt; is executed after linking, the receiving VarHandle's access mode type is first checked by the JVM to ensure that it matches the symbolic type descriptor. If the type match fails, it means that the access mode method which the caller is invoking is not present on the individual VarHandle being invoked.</source>
          <target state="translated">링크 후 &lt;code&gt;invokevirtual&lt;/code&gt; 이 실행될 때 수신 VarHandle의 액세스 모드 유형은 먼저 JVM에서 기호 유형 설명자와 일치하는지 확인합니다. 유형 일치가 실패하면 호출자가 호출하는 액세스 모드 메서드가 호출되는 개별 VarHandle에 존재하지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="d4ff583386f934e25bcb252a53631116c45f985a" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;invokevirtual&lt;/code&gt; is executed after linking, the receiving method handle's type is first checked by the JVM to ensure that it matches the symbolic type descriptor. If the type match fails, it means that the method which the caller is invoking is not present on the individual method handle being invoked.</source>
          <target state="translated">링크 후 &lt;code&gt;invokevirtual&lt;/code&gt; 이 실행될 때 수신 메소드 핸들의 유형을 먼저 JVM에서 확인하여 기호 유형 설명자와 일치하는지 확인하십시오. 유형 일치가 실패하면 호출자가 호출중인 메소드가 호출중인 개별 메소드 핸들에 존재하지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="8226f6246b0d0b9cfb2a7ab0e96a44673f4a1c3a" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;keyIdentifier&lt;/code&gt; field of &lt;code&gt;AuthorityKeyIdentifier&lt;/code&gt; is populated, the value is usually taken from the &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; extension in the issuer's certificate. Note, however, that the result of &lt;code&gt;X509Certificate.getExtensionValue(&amp;lt;SubjectKeyIdentifier Object
 Identifier&amp;gt;)&lt;/code&gt; on the issuer's certificate may NOT be used directly as the input to &lt;code&gt;setAuthorityKeyIdentifier&lt;/code&gt;. This is because the SubjectKeyIdentifier contains only a KeyIdentifier OCTET STRING, and not a SEQUENCE of KeyIdentifier, GeneralNames, and CertificateSerialNumber. In order to use the extension value of the issuer certificate's &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; extension, it will be necessary to extract the value of the embedded &lt;code&gt;KeyIdentifier&lt;/code&gt; OCTET STRING, then DER encode this OCTET STRING inside a SEQUENCE. For more details on SubjectKeyIdentifier, see &lt;a href=&quot;#setSubjectKeyIdentifier(byte%5B%5D)&quot;&gt;&lt;code&gt;setSubjectKeyIdentifier(byte[] subjectKeyID)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;AuthorityKeyIdentifier&lt;/code&gt; 의 &lt;code&gt;keyIdentifier&lt;/code&gt; 필드 가 채워지면 값은 일반적으로 발급자의 인증서에있는 &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; 확장에서 가져옵니다 . 그러나 발급자의 인증서에 대한 &lt;code&gt;X509Certificate.getExtensionValue(&amp;lt;SubjectKeyIdentifier Object Identifier&amp;gt;)&lt;/code&gt; 의 결과는 &lt;code&gt;setAuthorityKeyIdentifier&lt;/code&gt; 에 대한 입력으로 직접 사용되지 않을 수 있습니다 . 이는 SubjectKeyIdentifier에 KeyIdentifier, GeneralNames 및 CertificateSerialNumber의 SEQUENCE가 아닌 KeyIdentifier OCTET STRING 만 포함되기 때문입니다. 발급자 인증서의 &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; 확장 의 확장 값을 사용하려면 포함 된 값을 추출해야합니다. &lt;code&gt;KeyIdentifier&lt;/code&gt; OCTET STRING, 그런 다음 DER이이 OCTET STRING을 SEQUENCE 안에 인코딩합니다. SubjectKeyIdentifier에 대한 자세한 내용은 &lt;a href=&quot;#setSubjectKeyIdentifier(byte%5B%5D)&quot;&gt; &lt;code&gt;setSubjectKeyIdentifier(byte[] subjectKeyID)&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="834601037ab0662f3396b5a79222cc36559945fd" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;keyIdentifier&lt;/code&gt; field of &lt;code&gt;AuthorityKeyIdentifier&lt;/code&gt; is populated, the value is usually taken from the &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; extension in the issuer's certificate. Note, however, that the result of &lt;code&gt;X509Certificate.getExtensionValue(&amp;lt;SubjectKeyIdentifier Object
 Identifier&amp;gt;)&lt;/code&gt; on the issuer's certificate may NOT be used directly as the input to &lt;code&gt;setAuthorityKeyIdentifier&lt;/code&gt;. This is because the SubjectKeyIdentifier contains only a KeyIdentifier OCTET STRING, and not a SEQUENCE of KeyIdentifier, GeneralNames, and CertificateSerialNumber. In order to use the extension value of the issuer certificate's &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; extension, it will be necessary to extract the value of the embedded &lt;code&gt;KeyIdentifier&lt;/code&gt; OCTET STRING, then DER encode this OCTET STRING inside a SEQUENCE. For more details on SubjectKeyIdentifier, see &lt;a href=&quot;x509certselector#setSubjectKeyIdentifier-byte:A-&quot;&gt;&lt;code&gt;setSubjectKeyIdentifier(byte[] subjectKeyID)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;AuthorityKeyIdentifier&lt;/code&gt; 의 &lt;code&gt;keyIdentifier&lt;/code&gt; 필드 가 채워지면, 값은 일반적으로 발행자 인증서 의 &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; 확장에서 가져옵니다 . 그러나 발행자의 인증서에 대한 &lt;code&gt;X509Certificate.getExtensionValue(&amp;lt;SubjectKeyIdentifier Object Identifier&amp;gt;)&lt;/code&gt; 결과는 &lt;code&gt;setAuthorityKeyIdentifier&lt;/code&gt; 의 입력으로 직접 사용될 수 없습니다 . 이는 SubjectKeyIdentifier에 KeyIdentifier, GeneralNames 및 CertificateSerialNumber의 시퀀스가 ​​아닌 KeyIdentifier OCTET STRING 만 포함하기 때문입니다. 발급자 인증서 &lt;code&gt;SubjectKeyIdentifier&lt;/code&gt; 확장 의 확장 값을 사용하려면 포함 된 값을 추출해야합니다. &lt;code&gt;KeyIdentifier&lt;/code&gt; OCTET STRING을 누른 다음이 OCTET STRING을 SEQUENCE 내에서 DER 인코딩합니다. SubjectKeyIdentifier에 대한 자세한 내용은 &lt;a href=&quot;x509certselector#setSubjectKeyIdentifier-byte:A-&quot;&gt; &lt;code&gt;setSubjectKeyIdentifier(byte[] subjectKeyID)&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8d5a455eaa9bae77e2400ec125089de5958ee67" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;nextToken&lt;/code&gt; method encounters a string constant, the &lt;code&gt;ttype&lt;/code&gt; field is set to the string delimiter and the &lt;code&gt;sval&lt;/code&gt; field is set to the body of the string.</source>
          <target state="translated">경우 &lt;code&gt;nextToken&lt;/code&gt; 의 방법은 문자열 상수 발생은 &lt;code&gt;ttype&lt;/code&gt; 의 필드는 문자열 분리로 설정되고 &lt;code&gt;sval&lt;/code&gt; 이 필드는 문자열의 신체에 설정된다.</target>
        </trans-unit>
        <trans-unit id="479c547e4f51a87c5259ae916511976a07f64d0b" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;object&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this method writes an SQL &lt;code&gt;NULL&lt;/code&gt; to the stream.</source>
          <target state="translated">때 &lt;code&gt;object&lt;/code&gt; 이다 &lt;code&gt;null&lt;/code&gt; ,이 방법은 SQL의 기록 &lt;code&gt;NULL&lt;/code&gt; 를 스트림에.</target>
        </trans-unit>
        <trans-unit id="a7c8af093f9042d418aa0a04feb575a30082784d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;registerApplicationClasspathSpis&lt;/code&gt; method is called, additional service provider instances will be discovered using &lt;a href=&quot;../../../../java.base/java/util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">때 &lt;code&gt;registerApplicationClasspathSpis&lt;/code&gt; 의 메소드가 호출 될 때, 추가 서비스 제공 인스턴스를 사용하여 발견됩니다 &lt;a href=&quot;../../../../java.base/java/util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fad260ae6f20782961df5b3d238d1f3fbcb7ca36" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;registerApplicationClasspathSpis&lt;/code&gt; method is called, service provider instances declared in the meta-information section of JAR files on the application class path are loaded. To declare a service provider, a &lt;code&gt;services&lt;/code&gt; subdirectory is placed within the &lt;code&gt;META-INF&lt;/code&gt; directory that is present in every JAR file. This directory contains a file for each service provider interface that has one or more implementation classes present in the JAR file. For example, if the JAR file contained a class named &lt;code&gt;com.mycompany.imageio.MyFormatReaderSpi&lt;/code&gt; which implements the &lt;code&gt;ImageReaderSpi&lt;/code&gt; interface, the JAR file would contain a file named:</source>
          <target state="translated">때 &lt;code&gt;registerApplicationClasspathSpis&lt;/code&gt; 의 메소드가 호출 될 때, 어플리케이션의 클래스 패스에 JAR 파일의 메타 정보 섹션에서 선언 된 서비스 프로 바이더 인스턴스가로드됩니다. 서비스 제공자를 선언하기 위해 &lt;code&gt;services&lt;/code&gt; 서브 디렉토리는 모든 JAR 파일에 있는 &lt;code&gt;META-INF&lt;/code&gt; 디렉토리 내에 있습니다. 이 디렉토리에는 JAR 파일에 하나 이상의 구현 클래스가있는 각 서비스 제공자 인터페이스에 대한 파일이 있습니다. 예를 들어 JAR 파일 에 &lt;code&gt;ImageReaderSpi&lt;/code&gt; 인터페이스 를 구현하는 &lt;code&gt;com.mycompany.imageio.MyFormatReaderSpi&lt;/code&gt; 라는 클래스 가 포함 된 경우 JAR 파일에는 다음과 같은 이름의 파일이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="1d7c29a50f078499455eb20c32d93d78a48c9f01" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute has the value &quot;Image&quot;, this attribute specifies the location of the image to be used to decorate the graphical submit button.</source>
          <target state="translated">때 &lt;code&gt;type&lt;/code&gt; 속성 값 &quot;이미지&quot;가,이 속성은 이미지의 위치가 제출 그래픽 버튼을 장식하는 데 사용을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="fe420595726ef6f4cea43793d3befe1ec70bb431" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute has the value &quot;Image&quot;, this attribute specifies the location of the image to be used to decorate the graphical submit button. See the src attribute definition in HTML 4.0.</source>
          <target state="translated">때 &lt;code&gt;type&lt;/code&gt; 속성 값 &quot;이미지&quot;가,이 속성은 이미지의 위치가 제출 그래픽 버튼을 장식하는 데 사용을 지정합니다. HTML 4.0의 src 속성 정의를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6a87e75448196368d2ca88dfa8eb1d149546fe87" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute of the element has the value &quot;Radio&quot; or &quot;Checkbox&quot;, this represents the current state of the form control, in an interactive user agent.</source>
          <target state="translated">요소 의 &lt;code&gt;type&lt;/code&gt; 속성 값이 &quot;Radio&quot;또는 &quot;Checkbox&quot;인 경우 이는 대화 형 사용자 에이전트에서 양식 컨트롤의 현재 상태를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d49c80b9841e84f8a7c8515f76b433ba145603d8" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute of the element has the value &quot;Radio&quot; or &quot;Checkbox&quot;, this represents the current state of the form control, in an interactive user agent. Changes to this attribute change the state of the form control, but do not change the value of the HTML value attribute of the element.</source>
          <target state="translated">요소 의 &lt;code&gt;type&lt;/code&gt; 속성 값이 &quot;Radio&quot;또는 &quot;Checkbox&quot;인 경우 이는 대화 형 사용자 에이전트에서 양식 컨트롤의 현재 상태를 나타냅니다. 이 속성을 변경하면 양식 컨트롤의 상태가 변경되지만 요소의 HTML 값 속성 값은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a4bbc557616f805bd97932df07680b227edc6b97" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute of the element has the value &quot;Text&quot;, &quot;File&quot; or &quot;Password&quot;, this represents the HTML value attribute of the element.</source>
          <target state="translated">요소 의 &lt;code&gt;type&lt;/code&gt; 속성 값이 &quot;Text&quot;, &quot;File&quot;또는 &quot;Password&quot;인 경우 이는 요소의 HTML 값 속성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1f273c5edddbd7d73cb1be1527d8123a3894a875" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute of the element has the value &quot;Text&quot;, &quot;File&quot; or &quot;Password&quot;, this represents the HTML value attribute of the element. The value of this attribute does not change if the contents of the corresponding form control, in an interactive user agent, changes. Changing this attribute, however, resets the contents of the form control. See the value attribute definition in HTML 4.0.</source>
          <target state="translated">요소 의 &lt;code&gt;type&lt;/code&gt; 속성 값이 &quot;Text&quot;, &quot;File&quot;또는 &quot;Password&quot;인 경우 이는 요소의 HTML 값 속성을 나타냅니다. 이 속성의 값은 대화 형 사용자 에이전트에서 해당 양식 컨트롤의 내용이 변경 되어도 변경되지 않습니다. 그러나이 속성을 변경하면 양식 컨트롤의 내용이 재설정됩니다. HTML 4.0의 값 속성 정의를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3c7473c1965c73d523c3c557041cab9f803c0e19" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute of the element has the value &quot;Text&quot;, &quot;File&quot; or &quot;Password&quot;, this represents the current contents of the corresponding form control, in an interactive user agent.</source>
          <target state="translated">요소 의 &lt;code&gt;type&lt;/code&gt; 속성 값이 &quot;Text&quot;, &quot;File&quot;또는 &quot;Password&quot;인 경우 이는 대화 형 사용자 에이전트에서 해당 양식 컨트롤의 현재 콘텐츠를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0e120dc1f42b3033cc55ae4adc8c02b21e666f32" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;type&lt;/code&gt; attribute of the element has the value &quot;Text&quot;, &quot;File&quot; or &quot;Password&quot;, this represents the current contents of the corresponding form control, in an interactive user agent. Changing this attribute changes the contents of the form control, but does not change the value of the HTML value attribute of the element. When the &lt;code&gt;type&lt;/code&gt; attribute of the element has the value &quot;Button&quot;, &quot;Hidden&quot;, &quot;Submit&quot;, &quot;Reset&quot;, &quot;Image&quot;, &quot;Checkbox&quot; or &quot;Radio&quot;, this represents the HTML value attribute of the element. See the value attribute definition in HTML 4.0.</source>
          <target state="translated">요소 의 &lt;code&gt;type&lt;/code&gt; 속성 값이 &quot;Text&quot;, &quot;File&quot;또는 &quot;Password&quot;인 경우 이는 대화 형 사용자 에이전트에서 해당 양식 컨트롤의 현재 콘텐츠를 나타냅니다. 이 속성을 변경하면 양식 컨트롤의 내용이 변경되지만 요소의 HTML 값 속성 값은 변경되지 않습니다. 요소 의 &lt;code&gt;type&lt;/code&gt; 속성 값이 &quot;Button&quot;, &quot;Hidden&quot;, &quot;Submit&quot;, &quot;Reset&quot;, &quot;Image&quot;, &quot;Checkbox&quot;또는 &quot;Radio&quot;인 경우 이는 요소의 HTML 값 속성을 나타냅니다. HTML 4.0의 값 속성 정의를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="800a8722fdd5697538b5f0c521ac05a66ca1b2c2" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;value&lt;/code&gt; property changes, &lt;code&gt;ChangeListeners&lt;/code&gt; are notified. &lt;code&gt;SpinnerModel&lt;/code&gt; may choose to notify the &lt;code&gt;ChangeListeners&lt;/code&gt; under other circumstances.</source>
          <target state="translated">때 &lt;code&gt;value&lt;/code&gt; 속성이 변경 &lt;code&gt;ChangeListeners&lt;/code&gt; 에이 통지됩니다. &lt;code&gt;SpinnerModel&lt;/code&gt; 은 다른 상황 에서 &lt;code&gt;ChangeListeners&lt;/code&gt; 에 알리도록 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="515adaec2191bebc2d2c17a699cb4b4c2d2e4592" translate="yes" xml:space="preserve">
          <source>When the BasicAttributes class needs to create an Attribute, it uses BasicAttribute. There is no other dependency on BasicAttribute.</source>
          <target state="translated">BasicAttributes 클래스는 속성을 작성해야 할 때 BasicAttribute를 사용합니다. BasicAttribute에 대한 다른 종속성은 없습니다.</target>
        </trans-unit>
        <trans-unit id="3ec9901f8b0995c7d238dee247f5bc92ba92c9c8" translate="yes" xml:space="preserve">
          <source>When the DBMS does not store time zone information, the driver will use the given &lt;code&gt;Calendar&lt;/code&gt; object to construct the SQL &lt;code&gt;TIME&lt;/code&gt; value to send to the database. With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date taking into account a custom time zone. If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the time zone of the Virtual Machine that is running the application.</source>
          <target state="translated">DBMS가 표준 시간대 정보를 저장하지 않을 때 드라이버는 주어진 &lt;code&gt;Calendar&lt;/code&gt; 개체를 사용 하여 데이터베이스에 보낼 SQL &lt;code&gt;TIME&lt;/code&gt; 값을 구성 합니다. A를 &lt;code&gt;Calendar&lt;/code&gt; 사용자 정의 시간대를 계정에 객체, 드라이버는 날짜 복용을 계산할 수 있습니다. &lt;code&gt;Calendar&lt;/code&gt; 개체가 지정 되지 않은 경우 드라이버는 응용 프로그램을 실행하는 가상 시스템의 표준 시간대를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="45a7b9314633389caa68b45c357b57d0f9fe579c" translate="yes" xml:space="preserve">
          <source>When the DBMS does not store time zone information, the driver will use the given &lt;code&gt;Calendar&lt;/code&gt; object to construct the SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value to send to the database. With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp taking into account a custom time zone. If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the time zone of the Virtual Machine that is running the application.</source>
          <target state="translated">DBMS가 시간대 정보를 저장하지 않는 경우 드라이버는 주어진 &lt;code&gt;Calendar&lt;/code&gt; 개체를 사용 하여 데이터베이스로 보낼 SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; 값을 구성 합니다. A를 &lt;code&gt;Calendar&lt;/code&gt; 사용자 정의 시간대를 계정에 객체, 드라이버는 타임 스탬프 복용을 계산할 수 있습니다. &lt;code&gt;Calendar&lt;/code&gt; 개체가 지정 되지 않은 경우 드라이버는 응용 프로그램을 실행하는 가상 시스템의 표준 시간대를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e2b0cfb7cdca209b8227f0135c9ead5e644da49f" translate="yes" xml:space="preserve">
          <source>When the JNDI class library needs to determine the value of a property, it does so by merging the values from the following two sources, in order:</source>
          <target state="translated">JNDI 클래스 라이브러리가 특성 값을 판별해야하는 경우 다음 두 소스의 값을 순서대로 병합하여이를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8ff307d52b74a9d5a00fe0eeed0ad2b6f63f945d" translate="yes" xml:space="preserve">
          <source>When the JVM materializes a &lt;code&gt;MethodType&lt;/code&gt; from a descriptor string, all classes named in the descriptor must be accessible, and will be loaded. (But the classes need not be initialized, as is the case with a &lt;code&gt;CONSTANT_Class&lt;/code&gt;.) This loading may occur at any time before the &lt;code&gt;MethodType&lt;/code&gt; object is first derived.</source>
          <target state="translated">JVM 이 설명자 문자열에서 &lt;code&gt;MethodType&lt;/code&gt; 을 구체화 할 때 설명자에 이름이 지정된 모든 클래스에 액세스 할 수 있어야하며로드됩니다. (그러나 &lt;code&gt;CONSTANT_Class&lt;/code&gt; 의 경우와 같이 클래스를 초기화 할 필요는 없습니다 .)이 로딩은 &lt;code&gt;MethodType&lt;/code&gt; 객체가 처음 파생 되기 전에 언제든지 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="242f542a50d3a5d71e04513db113467fef250729" translate="yes" xml:space="preserve">
          <source>When the JVM processes bytecode containing signature polymorphic calls, it will successfully link any such call, regardless of its symbolic type descriptor. (In order to retain type safety, the JVM will guard such calls with suitable dynamic type checks, as described elsewhere.)</source>
          <target state="translated">JVM이 서명 다형성 호출을 포함하는 바이트 코드를 처리 할 때 기호 유형 설명자에 관계없이 해당 호출을 성공적으로 링크합니다. (유형 안전을 유지하기 위해 JVM은 다른 곳에서 설명 된대로 적절한 동적 유형 검사로 이러한 호출을 보호합니다.)</target>
        </trans-unit>
        <trans-unit id="2193c7a9c7d458a9821bb858408d7793d0ae7d86" translate="yes" xml:space="preserve">
          <source>When the Java Virtual Machine first starts, it determines if the system property &lt;code&gt;java.compiler&lt;/code&gt; exists. (System properties are accessible through &lt;a href=&quot;system#getProperty-java.lang.String-&quot;&gt;&lt;code&gt;System.getProperty(String)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;system#getProperty-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;System.getProperty(String, String)&lt;/code&gt;&lt;/a&gt;. If so, it is assumed to be the name of a library (with a platform-dependent exact location and type); &lt;a href=&quot;system#loadLibrary-java.lang.String-&quot;&gt;&lt;code&gt;System.loadLibrary(java.lang.String)&lt;/code&gt;&lt;/a&gt; is called to load that library. If this loading succeeds, the function named &lt;code&gt;java_lang_Compiler_start()&lt;/code&gt; in that library is called.</source>
          <target state="translated">JVM (Java Virtual Machine)이 처음 시작되면 시스템 특성 &lt;code&gt;java.compiler&lt;/code&gt; 가 존재 하는지 판별 합니다. (시스템 특성은 &lt;a href=&quot;system#getProperty-java.lang.String-&quot;&gt; &lt;code&gt;System.getProperty(String)&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;system#getProperty-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;System.getProperty(String, String)&lt;/code&gt; &lt;/a&gt; 통해 액세스 할 수 있습니다 . 그렇다면, 플랫폼의 정확한 위치 및 유형을 가진 라이브러리 이름 인 것으로 간주됩니다. &lt;a href=&quot;system#loadLibrary-java.lang.String-&quot;&gt; &lt;code&gt;System.loadLibrary(java.lang.String)&lt;/code&gt; &lt;/a&gt; 해당 라이브러리를로드하기 위해 (java.lang.String) 이 호출됩니다.로드가 성공하면 해당 라이브러리에서 &lt;code&gt;java_lang_Compiler_start()&lt;/code&gt; 라는 함수 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="ddddab91c8fcafe94a4c994027d61bf864bf4c44" translate="yes" xml:space="preserve">
          <source>When the Java virtual machine has no stack trace information about a thread or &lt;code&gt;maxDepth == 0&lt;/code&gt;, the stack trace in the &lt;code&gt;ThreadInfo&lt;/code&gt; object will be an empty array of &lt;code&gt;StackTraceElement&lt;/code&gt;.</source>
          <target state="translated">Java 가상 머신에 스레드 또는 &lt;code&gt;maxDepth == 0&lt;/code&gt; 에 대한 스택 추적 정보가없는 경우 &lt;code&gt;ThreadInfo&lt;/code&gt; 객체 의 스택 추적 은 &lt;code&gt;StackTraceElement&lt;/code&gt; 의 빈 배열이 됩니다.</target>
        </trans-unit>
        <trans-unit id="38db82049f33225d933e0b41a46907899f2d6c86" translate="yes" xml:space="preserve">
          <source>When the LoginContext uses the installed Configuration (instead of a caller-specified Configuration, see above), then this LoginContext must wrap any caller-specified or default CallbackHandler implementation in a new CallbackHandler implementation whose &lt;code&gt;handle&lt;/code&gt; method implementation invokes the specified CallbackHandler's &lt;code&gt;handle&lt;/code&gt; method in a &lt;code&gt;java.security.AccessController.doPrivileged&lt;/code&gt; call constrained by the caller's current &lt;code&gt;AccessControlContext&lt;/code&gt;.</source>
          <target state="translated">LoginContext에 설치된 구성 (대신 발신자가 지정한 구성의, 위 참조)를 사용하는 경우,이 LoginContext에서는 그의 새로운 해 CallbackHandler 구현에 호출자 지정 또는 디폴트의 CallbackHandler 구현을 포장해야한다 &lt;code&gt;handle&lt;/code&gt; 방법을 구현 지정된 해 CallbackHandler의 호출 &lt;code&gt;handle&lt;/code&gt; A의 방법을 &lt;code&gt;java.security.AccessController.doPrivileged&lt;/code&gt; 호출은 호출자의 현재 &lt;code&gt;AccessControlContext&lt;/code&gt; 에 의해 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="5cf48683ff79ab19b22e2f40ce14d8b39cb8a4f9" translate="yes" xml:space="preserve">
          <source>When the MAX and MIN bounds are hit</source>
          <target state="translated">MAX 및 MIN 경계에 도달하면</target>
        </trans-unit>
        <trans-unit id="d4284eca7ac5f100fd0fbfcaaa47ff80683f124b" translate="yes" xml:space="preserve">
          <source>When the OOBINLINE option is set, any TCP urgent data received on the socket will be received through the socket input stream.</source>
          <target state="translated">OOBINLINE 옵션이 설정되면 소켓에 수신 된 TCP 긴급 데이터는 소켓 입력 스트림을 통해 수신됩니다.</target>
        </trans-unit>
        <trans-unit id="59ad08ab5cdf3a4c4f05c736af38894997dad527" translate="yes" xml:space="preserve">
          <source>When the OOBINLINE option is set, any TCP urgent data received on the socket will be received through the socket input stream. When the option is disabled (which is the default) urgent data is silently discarded.</source>
          <target state="translated">OOBINLINE 옵션이 설정되면 소켓에서 수신 된 모든 TCP 긴급 데이터는 소켓 입력 스트림을 통해 수신됩니다. 옵션이 비활성화되면 (기본값) 긴급 데이터는 자동으로 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="9833dcc09e733a827020ccf648bcb6cd4665e7ef" translate="yes" xml:space="preserve">
          <source>When the Open Type is &lt;code&gt;CompositeType&lt;/code&gt;, the corresponding mapped Java type (&lt;em&gt;opendata(J)&lt;/em&gt;) is &lt;a href=&quot;openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt;. The mapping from an instance of &lt;em&gt;J&lt;/em&gt; to a &lt;code&gt;CompositeData&lt;/code&gt; corresponding to the &lt;code&gt;CompositeType&lt;/code&gt; just described is done as follows. First, if &lt;em&gt;J&lt;/em&gt; implements the interface &lt;a href=&quot;openmbean/compositedataview&quot;&gt;&lt;code&gt;CompositeDataView&lt;/code&gt;&lt;/a&gt;, then that interface's &lt;a href=&quot;openmbean/compositedataview#toCompositeData(javax.management.openmbean.CompositeType)&quot;&gt;&lt;code&gt;toCompositeData&lt;/code&gt;&lt;/a&gt; method is called to do the conversion. Otherwise, the &lt;code&gt;CompositeData&lt;/code&gt; is constructed by calling the getter for each item and converting it to the corresponding Open Data type. Thus, a getter such as</source>
          <target state="translated">Open Type이 &lt;code&gt;CompositeType&lt;/code&gt; 이면 해당 매핑 된 Java 유형 ( &lt;em&gt;opendata (J)&lt;/em&gt; )은 &lt;a href=&quot;openmbean/compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; &lt;/a&gt; 입니다. 인스턴스의 매핑 &lt;em&gt;J&lt;/em&gt; (A)에 &lt;code&gt;CompositeData&lt;/code&gt; 에 대응 &lt;code&gt;CompositeType&lt;/code&gt; 와 다음처럼 설명이 이루어진다. 먼저 &lt;em&gt;J가 &lt;/em&gt;&lt;a href=&quot;openmbean/compositedataview&quot;&gt; &lt;code&gt;CompositeDataView&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현하면 해당 인터페이스의 &lt;a href=&quot;openmbean/compositedataview#toCompositeData(javax.management.openmbean.CompositeType)&quot;&gt; &lt;code&gt;toCompositeData&lt;/code&gt; &lt;/a&gt; 메서드가 호출되어 변환을 수행합니다. 그렇지 않으면 각 항목에 대해 getter를 호출하고 해당 Open Data 유형으로 변환 하여 &lt;code&gt;CompositeData&lt;/code&gt; 를 구성합니다. 따라서 다음과 같은 게터</target>
        </trans-unit>
        <trans-unit id="dabf2aef104d7b63f254f09d8ef274526085868a" translate="yes" xml:space="preserve">
          <source>When the Open Type is &lt;code&gt;CompositeType&lt;/code&gt;, the corresponding mapped Java type (&lt;em&gt;opendata(J)&lt;/em&gt;) is &lt;a href=&quot;openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt;. The mapping from an instance of &lt;em&gt;J&lt;/em&gt; to a &lt;code&gt;CompositeData&lt;/code&gt; corresponding to the &lt;code&gt;CompositeType&lt;/code&gt; just described is done as follows. First, if &lt;em&gt;J&lt;/em&gt; implements the interface &lt;a href=&quot;openmbean/compositedataview&quot;&gt;&lt;code&gt;CompositeDataView&lt;/code&gt;&lt;/a&gt;, then that interface's &lt;a href=&quot;openmbean/compositedataview#toCompositeData-javax.management.openmbean.CompositeType-&quot;&gt;&lt;code&gt;toCompositeData&lt;/code&gt;&lt;/a&gt; method is called to do the conversion. Otherwise, the &lt;code&gt;CompositeData&lt;/code&gt; is constructed by calling the getter for each item and converting it to the corresponding Open Data type. Thus, a getter such as</source>
          <target state="translated">Open Type이 &lt;code&gt;CompositeType&lt;/code&gt; 인 경우, 대응하는 맵핑 된 Java 유형 ( &lt;em&gt;opendata (J)&lt;/em&gt; )은 &lt;a href=&quot;openmbean/compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; &lt;/a&gt; 입니다. 인스턴스의 매핑 &lt;em&gt;J&lt;/em&gt; (A)에 &lt;code&gt;CompositeData&lt;/code&gt; 에 대응 &lt;code&gt;CompositeType&lt;/code&gt; 와 다음처럼 설명이 이루어진다. 먼저 &lt;em&gt;J가 &lt;/em&gt;&lt;a href=&quot;openmbean/compositedataview&quot;&gt; &lt;code&gt;CompositeDataView&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현하면 해당 인터페이스의 &lt;a href=&quot;openmbean/compositedataview#toCompositeData-javax.management.openmbean.CompositeType-&quot;&gt; &lt;code&gt;toCompositeData&lt;/code&gt; &lt;/a&gt; 메소드가 호출되어 변환을 수행합니다. 그렇지 않으면 각 항목에 대해 getter를 호출하고 해당 Open Data 유형으로 변환 하여 &lt;code&gt;CompositeData&lt;/code&gt; 를 구성합니다. 따라서 다음과 같은 게터</target>
        </trans-unit>
        <trans-unit id="96641c01f072f14964ded9541c6c86f41bebe686" translate="yes" xml:space="preserve">
          <source>When the access permissions are set at file creation time then the actual value of the permissions may differ from the value of the attribute object. The reasons for this are implementation specific. On UNIX systems, for example, a process has a &lt;em&gt;umask&lt;/em&gt; that impacts the permission bits of newly created files. Where an implementation supports the setting of the access permissions, and the underlying file system supports access permissions, then it is required that the value of the actual access permissions will be equal or less than the value of the attribute provided to the &lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createFile&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createDirectory&lt;/code&gt;&lt;/a&gt; methods. In other words, the file may be more secure than requested.</source>
          <target state="translated">파일 생성시 액세스 권한이 설정되면 권한의 실제 값이 속성 개체의 값과 다를 수 있습니다. ㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 그 이유는 구현에 따라 다릅니다. 예를 들어, UNIX 시스템에서 프로세스에는 새로 생성 된 파일의 권한 비트에 영향 을주는 &lt;em&gt;umask&lt;/em&gt; 가 있습니다. 구현이 액세스 권한 설정을 지원하고 기본 파일 시스템이 액세스 권한을 지원하는 경우 실제 액세스 권한 값은 &lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createFile&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createDirectory&lt;/code&gt; &lt;/a&gt; 메소드에 제공된 속성 값보다 작거나 같아야 합니다. . 즉, 파일이 요청 된 것보다 더 안전 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6807cd6ed53e44e911717bb50e25ffb553b8f9ce" translate="yes" xml:space="preserve">
          <source>When the access permissions are set at file creation time then the actual value of the permissions may differ that the value of the attribute object. The reasons for this are implementation specific. On UNIX systems, for example, a process has a &lt;em&gt;umask&lt;/em&gt; that impacts the permission bits of newly created files. Where an implementation supports the setting of the access permissions, and the underlying file system supports access permissions, then it is required that the value of the actual access permissions will be equal or less than the value of the attribute provided to the &lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createFile&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createDirectory&lt;/code&gt;&lt;/a&gt; methods. In other words, the file may be more secure than requested.</source>
          <target state="translated">파일 생성시 액세스 권한이 설정되면 권한의 실제 값이 속성 개체의 값과 다를 수 있습니다. 그 이유는 구현에 따라 다릅니다. 예를 들어 UNIX 시스템에서 프로세스에는 새로 생성 된 파일의 권한 비트에 영향 을주는 &lt;em&gt;umask&lt;/em&gt; 가 있습니다. 구현이 액세스 권한 설정을 지원하고 기본 파일 시스템이 액세스 권한을 지원하는 경우 실제 액세스 권한 값은 &lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createFile&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createDirectory&lt;/code&gt; &lt;/a&gt; 메소드에 제공된 속성 값보다 작거나 같아야 합니다. . 즉, 파일이 요청 된 것보다 더 안전 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5cc6a806fe924f827c1be349c2dda336ff41691d" translate="yes" xml:space="preserve">
          <source>When the access permissions are set at file creation time then the actual value of the permissions may differ that the value of the attribute object. The reasons for this are implementation specific. On UNIX systems, for example, a process has a &lt;em&gt;umask&lt;/em&gt; that impacts the permission bits of newly created files. Where an implementation supports the setting of the access permissions, and the underlying file system supports access permissions, then it is required that the value of the actual access permissions will be equal or less than the value of the attribute provided to the &lt;a href=&quot;../files#createFile-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;createFile&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../files#createDirectory-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;createDirectory&lt;/code&gt;&lt;/a&gt; methods. In other words, the file may be more secure than requested.</source>
          <target state="translated">파일 작성시 액세스 권한이 설정되면 권한의 실제 값이 속성 오브젝트의 값과 다를 수 있습니다. 그 이유는 구현에 따라 다릅니다. 예를 들어, UNIX 시스템에서 프로세스에는 새로 작성된 파일의 권한 비트에 영향 을주는 &lt;em&gt;umask&lt;/em&gt; 가 있습니다. 구현이 액세스 권한 설정을 지원하고 기본 파일 시스템이 액세스 권한을 지원하는 경우 실제 액세스 권한의 값은 &lt;a href=&quot;../files#createFile-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;createFile&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../files#createDirectory-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;createDirectory&lt;/code&gt; &lt;/a&gt; 메소드에 제공된 속성 값보다 작거나 같아야 합니다. . 즉, 파일이 요청 된 것보다 안전 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69569ad21e8363df8daeddf8b551ab74285ca4d0" translate="yes" xml:space="preserve">
          <source>When the adapter is called, the length of the supplied &lt;code&gt;array&lt;/code&gt; argument is queried as if by &lt;code&gt;array.length&lt;/code&gt; or &lt;code&gt;arraylength&lt;/code&gt; bytecode. If the adapter accepts a zero-length trailing array argument, the supplied &lt;code&gt;array&lt;/code&gt; argument can either be a zero-length array or &lt;code&gt;null&lt;/code&gt;; otherwise, the adapter will throw a &lt;code&gt;NullPointerException&lt;/code&gt; if the array is &lt;code&gt;null&lt;/code&gt; and throw an &lt;a href=&quot;../illegalargumentexception&quot;&gt;&lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;/a&gt; if the array does not have the correct number of elements.</source>
          <target state="translated">어댑터가 호출되면 제공된 &lt;code&gt;array&lt;/code&gt; 인수 의 길이 가 &lt;code&gt;array.length&lt;/code&gt; 또는 &lt;code&gt;arraylength&lt;/code&gt; 바이트 코드 에서처럼 쿼리됩니다 . 어댑터가 길이가 0 인 후행 배열 인수를 허용하는 경우 제공된 &lt;code&gt;array&lt;/code&gt; 인수는 길이가 0 인 배열이거나 &lt;code&gt;null&lt;/code&gt; 일 수 있습니다 . 그렇지 않으면 어댑터는 배열이 &lt;code&gt;null&lt;/code&gt; 인 경우 &lt;code&gt;NullPointerException&lt;/code&gt; 을 throw 하고 배열에 올바른 요소 수가 없으면 &lt;a href=&quot;../illegalargumentexception&quot;&gt; &lt;code&gt;IllegalArgumentException&lt;/code&gt; 을&lt;/a&gt; throw합니다 .</target>
        </trans-unit>
        <trans-unit id="f27103f429183890d7b676c4e6d53958062dc5b7" translate="yes" xml:space="preserve">
          <source>When the application provides a filter, the serializer will call out to the filter before serializing each Node.</source>
          <target state="translated">응용 프로그램이 필터를 제공하면 직렬 변환기는 각 노드를 직렬화하기 전에 필터를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="eafdeecdd692ae88f791f406318133fd82c05cf0" translate="yes" xml:space="preserve">
          <source>When the application provides a filter, the serializer will call out to the filter before serializing each Node. The filter implementation can choose to remove the node from the stream or to terminate the serialization early.</source>
          <target state="translated">응용 프로그램이 필터를 제공하면 직렬 변환기는 각 노드를 직렬화하기 전에 필터를 호출합니다. 필터 구현은 스트림에서 노드를 제거하거나 직렬화를 조기에 종료하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b18b14612d284db82e4ae58a49b67bd2c4968f17" translate="yes" xml:space="preserve">
          <source>When the attribute at the head of the stream is an SQL &lt;code&gt;NULL&lt;/code&gt; the method returns &lt;code&gt;null&lt;/code&gt;. If the attribute is an SQL structured or distinct type, it determines the SQL type of the attribute at the head of the stream. If the stream's type map has an entry for that SQL type, the driver constructs an object of the appropriate class and calls the method &lt;code&gt;SQLData.readSQL&lt;/code&gt; on that object, which reads additional data from the stream, using the protocol described for that method.</source>
          <target state="translated">스트림의 헤드에있는 속성이 SQL &lt;code&gt;NULL&lt;/code&gt; 이면 메서드는 &lt;code&gt;null&lt;/code&gt; 을 반환합니다 . 속성이 SQL 구조화 또는 고유 한 유형 인 경우 스트림의 헤드에있는 속성의 SQL 유형을 판별합니다. 스트림의 유형 맵에 해당 SQL 유형에 대한 항목이있는 경우 드라이버는 해당 클래스의 개체를 생성하고 해당 개체에 대해 &lt;code&gt;SQLData.readSQL&lt;/code&gt; 메서드 를 호출하여 해당 메서드 에 대해 설명 된 프로토콜을 사용하여 스트림에서 추가 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="2e26fb92c98071abdc173b7cc97141c52fde98ec" translate="yes" xml:space="preserve">
          <source>When the bootstrap method is invoked, it needs to create a &lt;a href=&quot;../java.base/java/lang/invoke/callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; object. In Dynalink, these call sites need to additionally implement the &lt;a href=&quot;jdk/dynalink/relinkablecallsite&quot;&gt;&lt;code&gt;RelinkableCallSite&lt;/code&gt;&lt;/a&gt; interface. &quot;Relinkable&quot; here alludes to the fact that if the call site encounters objects of different types at run time, its target will be changed to a method handle that can perform the operation on the newly encountered type. &lt;a href=&quot;jdk/dynalink/support/simplerelinkablecallsite&quot;&gt;&lt;code&gt;SimpleRelinkableCallSite&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;jdk/dynalink/support/chainedcallsite&quot;&gt;&lt;code&gt;ChainedCallSite&lt;/code&gt;&lt;/a&gt; (not used in the above example) are two implementations already provided by the library.</source>
          <target state="translated">부트 스트랩 메서드가 호출되면 &lt;a href=&quot;../java.base/java/lang/invoke/callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; 개체 를 만들어야 합니다. Dynalink에서 이러한 호출 사이트는 &lt;a href=&quot;jdk/dynalink/relinkablecallsite&quot;&gt; &lt;code&gt;RelinkableCallSite&lt;/code&gt; &lt;/a&gt; 인터페이스 를 추가로 구현해야합니다 . 여기서 &quot;Relinkable&quot;은 호출 사이트가 런타임에 다른 유형의 개체를 만나면 대상이 새로 발생한 유형에 대해 작업을 수행 할 수있는 메서드 핸들로 변경된다는 사실을 암시합니다. &lt;a href=&quot;jdk/dynalink/support/simplerelinkablecallsite&quot;&gt; &lt;code&gt;SimpleRelinkableCallSite&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;jdk/dynalink/support/chainedcallsite&quot;&gt; &lt;code&gt;ChainedCallSite&lt;/code&gt; &lt;/a&gt; (위 예제에서 사용되지 않음)는 라이브러리에서 이미 제공하는 두 가지 구현입니다.</target>
        </trans-unit>
        <trans-unit id="67e1e670368e0408444ca57de73d1a38a08a71cb" translate="yes" xml:space="preserve">
          <source>When the client is running a later version than the server, certain newer features may not be available, as detailed in the next sections. The client can determine the server's version by examining the &lt;a href=&quot;mbeanserverdelegatembean#getSpecificationVersion()&quot;&gt;&lt;code&gt;SpecificationVersion&lt;/code&gt;&lt;/a&gt; attribute of the &lt;code&gt;
        MBeanServerDelegate&lt;/code&gt;.</source>
          <target state="translated">클라이언트가 서버보다 최신 버전을 실행중인 경우 다음 섹션에서 자세히 설명하는 특정 최신 기능을 사용하지 못할 수 있습니다. 클라이언트는 &lt;code&gt; MBeanServerDelegate&lt;/code&gt; 의 &lt;a href=&quot;mbeanserverdelegatembean#getSpecificationVersion()&quot;&gt; &lt;code&gt;SpecificationVersion&lt;/code&gt; &lt;/a&gt; 속성을 검사하여 서버의 버전을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3dd6047101821af20c03ece3438348c43a2a0666" translate="yes" xml:space="preserve">
          <source>When the client is running a later version than the server, certain newer features may not be available, as detailed in the next sections. The client can determine the server's version by examining the &lt;a href=&quot;mbeanserverdelegatembean#getSpecificationVersion--&quot;&gt;&lt;code&gt;SpecificationVersion&lt;/code&gt;&lt;/a&gt; attribute of the &lt;code&gt;MBeanServerDelegate&lt;/code&gt;.</source>
          <target state="translated">클라이언트가 서버보다 최신 버전을 실행하는 경우 다음 섹션에서 자세히 설명하는 것처럼 특정 최신 기능을 사용하지 못할 수 있습니다. 클라이언트는 &lt;code&gt;MBeanServerDelegate&lt;/code&gt; 의 &lt;a href=&quot;mbeanserverdelegatembean#getSpecificationVersion--&quot;&gt; &lt;code&gt;SpecificationVersion&lt;/code&gt; &lt;/a&gt; 속성을 검사하여 서버의 버전을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5656bb0d523a39fd577359655a0712dc9a981a5c" translate="yes" xml:space="preserve">
          <source>When the condition &lt;a href=&quot;condition#await()&quot;&gt;waiting&lt;/a&gt; methods are called the lock is released and, before they return, the lock is reacquired and the lock hold count restored to what it was when the method was called.</source>
          <target state="translated">조건 &lt;a href=&quot;condition#await()&quot;&gt;대기&lt;/a&gt; 메서드가 호출되면 잠금이 해제되고 반환되기 전에 잠금이 다시 획득되고 잠금 보유 횟수가 메서드가 호출되었을 때의 값으로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="d87e1d90469eb807a66798a3412565993b14ba79" translate="yes" xml:space="preserve">
          <source>When the condition &lt;a href=&quot;condition#await()&quot;&gt;waiting&lt;/a&gt; methods are called the write lock is released and, before they return, the write lock is reacquired and the lock hold count restored to what it was when the method was called.</source>
          <target state="translated">조건 &lt;a href=&quot;condition#await()&quot;&gt;대기&lt;/a&gt; 메서드가 호출되면 쓰기 잠금이 해제되고 반환되기 전에 쓰기 잠금이 다시 획득되고 잠금 보유 횟수가 메서드가 호출되었을 때의 값으로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="5b2259ec0cf9dd1eabb68562ba1068a405b4ffb3" translate="yes" xml:space="preserve">
          <source>When the condition &lt;a href=&quot;condition#await--&quot;&gt;waiting&lt;/a&gt; methods are called the lock is released and, before they return, the lock is reacquired and the lock hold count restored to what it was when the method was called.</source>
          <target state="translated">조건 &lt;a href=&quot;condition#await--&quot;&gt;대기&lt;/a&gt; 메소드가 호출되면 잠금이 해제되고 리턴되기 전에 잠금이 다시 획득되고 잠금 보류 계수가 메소드 호출 당시의 상태로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="79dff109a2169a02dd1a4794f9a2ae88690f5d47" translate="yes" xml:space="preserve">
          <source>When the condition &lt;a href=&quot;condition#await--&quot;&gt;waiting&lt;/a&gt; methods are called the write lock is released and, before they return, the write lock is reacquired and the lock hold count restored to what it was when the method was called.</source>
          <target state="translated">조건 &lt;a href=&quot;condition#await--&quot;&gt;대기&lt;/a&gt; 메소드가 호출 잠금으로 해제되고 리턴되기 전에 쓰기 잠금이 재 취득되고 잠금 보류 계수가 메소드 호출 당시의 상태로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="638ae07a84d9d47123b5ecd412e4b6945e5f6478" translate="yes" xml:space="preserve">
          <source>When the connection is no longer needed, the client and server applications should each close both sides of their respective connection. For &lt;code&gt;SSLSocket&lt;/code&gt; objects, for example, an application can call &lt;a href=&quot;../../../java/net/socket#shutdownOutput()&quot;&gt;&lt;code&gt;Socket.shutdownOutput()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../../java/io/outputstream#close()&quot;&gt;&lt;code&gt;OutputStream.close()&lt;/code&gt;&lt;/a&gt; for output stream close and call &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt;&lt;code&gt;Socket.shutdownInput()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../../java/io/inputstream#close()&quot;&gt;&lt;code&gt;InputStream.close()&lt;/code&gt;&lt;/a&gt; for input stream close. Note that in some cases, closing the input stream may depend on the peer's output stream being closed first. If the connection is not closed in an orderly manner (for example &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt;&lt;code&gt;Socket.shutdownInput()&lt;/code&gt;&lt;/a&gt; is called before the peer's write closure notification has been received), exceptions may be raised to indicate that an error has occurred. Once an &lt;code&gt;SSLSocket&lt;/code&gt; is closed, it is not reusable: a new &lt;code&gt;SSLSocket&lt;/code&gt; must be created.</source>
          <target state="translated">연결이 더 이상 필요하지 않은 경우 클라이언트 및 서버 응용 프로그램은 각각 연결의 양쪽을 모두 닫아야합니다. 예 를 들어 &lt;code&gt;SSLSocket&lt;/code&gt; 객체의 경우 애플리케이션은 출력 스트림 닫기를 위해 &lt;a href=&quot;../../../java/net/socket#shutdownOutput()&quot;&gt; &lt;code&gt;Socket.shutdownOutput()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../../java/io/outputstream#close()&quot;&gt; &lt;code&gt;OutputStream.close()&lt;/code&gt; &lt;/a&gt; 를 호출 하고 입력 스트림 닫기를 위해 &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt; &lt;code&gt;Socket.shutdownInput()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../../java/io/inputstream#close()&quot;&gt; &lt;code&gt;InputStream.close()&lt;/code&gt; &lt;/a&gt; 를 호출 할 수 있습니다 . 경우에 따라 입력 스트림을 닫는 것은 피어의 출력 스트림이 먼저 닫히는 것에 따라 달라질 수 있습니다. 연결이 순서대로 닫히지 않은 경우 (예 : &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt; &lt;code&gt;Socket.shutdownInput()&lt;/code&gt; &lt;/a&gt;피어의 쓰기 종료 알림이 수신되기 전에 호출 됨) 오류가 발생했음을 나타내는 예외가 발생할 수 있습니다. 일단 &lt;code&gt;SSLSocket&lt;/code&gt; 닫혀, 그것은 재사용되지 않습니다 : 새 &lt;code&gt;SSLSocket&lt;/code&gt; 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="16423c8ea158b78447a1469fc88d081d49349aa7" translate="yes" xml:space="preserve">
          <source>When the connection is no longer needed, the client and server applications should each close both sides of their respective connection. For &lt;code&gt;SSLSocket&lt;/code&gt; objects, for example, an application can call &lt;a href=&quot;../../../java/net/socket#shutdownOutput()&quot;&gt;&lt;code&gt;Socket.shutdownOutput()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../../java/io/outputstream#close()&quot;&gt;&lt;code&gt;OutputStream.close()&lt;/code&gt;&lt;/a&gt; for output strean close and call &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt;&lt;code&gt;Socket.shutdownInput()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../../java/io/inputstream#close()&quot;&gt;&lt;code&gt;InputStream.close()&lt;/code&gt;&lt;/a&gt; for input stream close. Note that in some cases, closing the input stream may depend on the peer's output stream being closed first. If the connection is not closed in an orderly manner (for example &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt;&lt;code&gt;Socket.shutdownInput()&lt;/code&gt;&lt;/a&gt; is called before the peer's write closure notification has been received), exceptions may be raised to indicate that an error has occurred. Once an &lt;code&gt;SSLSocket&lt;/code&gt; is closed, it is not reusable: a new &lt;code&gt;SSLSocket&lt;/code&gt; must be created.</source>
          <target state="translated">연결이 더 이상 필요하지 않은 경우 클라이언트 및 서버 응용 프로그램은 각각 연결의 양쪽을 모두 닫아야합니다. 예 를 들어 &lt;code&gt;SSLSocket&lt;/code&gt; 객체의 경우 애플리케이션은 출력 스트림 닫기를 위해 &lt;a href=&quot;../../../java/net/socket#shutdownOutput()&quot;&gt; &lt;code&gt;Socket.shutdownOutput()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../../java/io/outputstream#close()&quot;&gt; &lt;code&gt;OutputStream.close()&lt;/code&gt; &lt;/a&gt; 를 호출 하고 입력 스트림 닫기를 위해 &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt; &lt;code&gt;Socket.shutdownInput()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../../java/io/inputstream#close()&quot;&gt; &lt;code&gt;InputStream.close()&lt;/code&gt; &lt;/a&gt; 를 호출 할 수 있습니다 . 경우에 따라 입력 스트림을 닫는 것은 피어의 출력 스트림이 먼저 닫히는 것에 따라 달라질 수 있습니다. 연결이 순서대로 닫히지 않은 경우 (예 : &lt;a href=&quot;../../../java/net/socket#shutdownInput()&quot;&gt; &lt;code&gt;Socket.shutdownInput()&lt;/code&gt; &lt;/a&gt;피어의 쓰기 종료 알림이 수신되기 전에 호출 됨) 오류가 발생했음을 나타내는 예외가 발생할 수 있습니다. 일단 &lt;code&gt;SSLSocket&lt;/code&gt; 닫혀, 그것은 재사용되지 않습니다 : 새 &lt;code&gt;SSLSocket&lt;/code&gt; 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="a0cd6246ef32e2e28cb6a34b88aea8b151567df6" translate="yes" xml:space="preserve">
          <source>When the context is no longer needed, the application should call &lt;a href=&quot;#dispose()&quot;&gt;&lt;code&gt;dispose&lt;/code&gt;&lt;/a&gt; to release any system resources the context may be using.</source>
          <target state="translated">컨텍스트가 더 이상 필요하지 않은 경우 응용 프로그램은 &lt;a href=&quot;#dispose()&quot;&gt; &lt;code&gt;dispose&lt;/code&gt; &lt;/a&gt; 를 호출 하여 컨텍스트에서 사용할 수있는 시스템 리소스를 해제해야합니다.</target>
        </trans-unit>
        <trans-unit id="1c9937e2f6e05020b636f955f2f392f42a8a5be9" translate="yes" xml:space="preserve">
          <source>When the datum at the head of the stream is an SQL &lt;code&gt;NULL&lt;/code&gt;, the method returns &lt;code&gt;null&lt;/code&gt;. If the datum is an SQL structured or distinct type, it determines the SQL type of the datum at the head of the stream. If the stream's type map has an entry for that SQL type, the driver constructs an object of the appropriate class and calls the method &lt;code&gt;SQLData.readSQL&lt;/code&gt; on that object, which reads additional data from the stream, using the protocol described for that method.</source>
          <target state="translated">스트림의 헤드에있는 데이터가 SQL &lt;code&gt;NULL&lt;/code&gt; 인 경우 메서드는 &lt;code&gt;null&lt;/code&gt; 을 반환합니다 . 데이터가 SQL 구조화 된 유형이거나 고유 한 유형 인 경우 스트림의 선두에있는 데이터의 SQL 유형을 결정합니다. 스트림의 유형 맵에 해당 SQL 유형에 대한 항목이있는 경우 드라이버는 적절한 클래스의 객체를 생성하고 해당 객체에 대해 &lt;code&gt;SQLData.readSQL&lt;/code&gt; 메서드 를 호출하여 해당 메서드 에 대해 설명 된 프로토콜을 사용하여 스트림에서 추가 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="1c57fa8db99fc971d583cc8742f486aed25eac72" translate="yes" xml:space="preserve">
          <source>When the datum at the head of the stream is an SQL &lt;code&gt;NULL&lt;/code&gt;, this method returns &lt;code&gt;null&lt;/code&gt;. If the datum is an SQL structured or distinct type with a custom mapping, this method determines the SQL type of the datum at the head of the stream, constructs an object of the appropriate class, and calls the method &lt;code&gt;SQLData.readSQL&lt;/code&gt; on that object. The &lt;code&gt;readSQL&lt;/code&gt; method then calls the appropriate &lt;code&gt;SQLInputImpl.readXXX&lt;/code&gt; methods to retrieve the attribute values from the stream.</source>
          <target state="translated">스트림의 헤드에있는 데이터가 SQL &lt;code&gt;NULL&lt;/code&gt; 인 경우이 메서드는 &lt;code&gt;null&lt;/code&gt; 을 반환합니다 . 데이텀이 사용자 지정 매핑이있는 SQL 구조화 또는 고유 한 유형 인 경우이 메서드는 스트림의 헤드에서 데이텀의 SQL 유형을 결정하고 적절한 클래스의 개체를 생성하고 해당 개체에 대해 &lt;code&gt;SQLData.readSQL&lt;/code&gt; 메서드 를 호출 합니다. &lt;code&gt;readSQL&lt;/code&gt; 가 된 후, 방법은 적절한 호출 &lt;code&gt;SQLInputImpl.readXXX&lt;/code&gt; 의 스트림으로부터 속성 값을 검색하는 방법.</target>
        </trans-unit>
        <trans-unit id="0207ee2dfd538e974d952ff6af0b2a657d033d63" translate="yes" xml:space="preserve">
          <source>When the dialog is shown, the specified file is selected. The kind of selection depends on the file existence, the dialog type, and the native platform. E.g., the file could be highlighted in the file list, or a file name editbox could be populated with the file name.</source>
          <target state="translated">대화 상자가 표시되면 지정된 파일이 선택됩니다. 선택 유형은 파일 존재, 대화 상자 유형 및 기본 플랫폼에 따라 다릅니다. 예를 들어, 파일 목록에서 파일을 강조 표시하거나 파일 이름 편집 상자에 파일 이름을 채울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c397667a78f1a660562462490477701fa7482ccb" translate="yes" xml:space="preserve">
          <source>When the driver determines that the &lt;code&gt;setNetworkTimeout&lt;/code&gt; timeout value has expired, the JDBC driver marks the connection closed and releases any resources held by the connection.</source>
          <target state="translated">드라이버가 &lt;code&gt;setNetworkTimeout&lt;/code&gt; 시간 초과 값이 만료되었음을 확인하면 JDBC 드라이버는 연결이 닫힌 상태로 표시하고 연결이 보유한 모든 리소스를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="4cd824f5c7e1568ccbcd115d44b4eb96a3accf69" translate="yes" xml:space="preserve">
          <source>When the environment property &quot;java.naming.factory.initial&quot; is non-null, the InitialContext constructor will attempt to create the initial context specified therein. At that time, the initial context factory involved might throw an exception if a problem is encountered. However, it is provider implementation-dependent when it verifies and indicates to the users of the initial context any environment property- or connection- related problems. It can do so lazily--delaying until an operation is performed on the context, or eagerly, at the time the context is constructed.</source>
          <target state="translated">환경 특성 &quot;java.naming.factory.initial&quot;이 널이 아닌 경우 InitialContext 생성자는 지정된 초기 컨텍스트를 작성하려고 시도합니다. 이때 문제가 발생하면 관련된 초기 컨텍스트 팩토리에서 예외가 발생할 수 있습니다. 그러나 초기 컨텍스트 사용자에게 환경 특성 또는 연결 관련 문제점을 확인하고 표시 할 때 제공자 구현에 따라 다릅니다. 컨텍스트에서 작업이 수행 될 때까지 또는 컨텍스트가 구성 될 때 간절히 지연 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e1fbcb7e24cac03595809d83a43116184df4d35" translate="yes" xml:space="preserve">
          <source>When the feature is &lt;code&gt;false&lt;/code&gt;, the implementation will processing XML according to the XML specifications without regard to possible implementation limits.</source>
          <target state="translated">기능이 &lt;code&gt;false&lt;/code&gt; 인 경우 구현은 가능한 구현 제한에 관계없이 XML 사양에 따라 XML을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="09c83d44797e06cf825594da62f38b3618a765cb" translate="yes" xml:space="preserve">
          <source>When the file system uses an ACL model that differs from the NFSv4 defined ACL model, then this method returns an ACL that is the translation of the ACL to the NFSv4 ACL model.</source>
          <target state="translated">파일 시스템이 NFSv4 정의 ACL 모델과 다른 ACL 모델을 사용하는 경우이 메소드는 ACL을 NFSv4 ACL 모델로 변환하는 ACL을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="34c8ca9cd568392c4eb67ef03c9038a10b794d59" translate="yes" xml:space="preserve">
          <source>When the initial context is constructed, its environment is initialized with properties defined in the environment parameter passed to the constructor, and in any &lt;a href=&quot;context#RESOURCEFILES&quot; id=&quot;ENVIRONMENT&quot;&gt;application resource files&lt;/a&gt;. In addition, a small number of standard JNDI properties may be specified as system properties or as applet parameters (through the use of &lt;a href=&quot;context#APPLET&quot;&gt;&lt;code&gt;Context.APPLET&lt;/code&gt;&lt;/a&gt;). These special properties are listed in the field detail sections of the &lt;a href=&quot;context#field_detail&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ldap/ldapcontext#field_detail&quot;&gt;&lt;code&gt;LdapContext&lt;/code&gt;&lt;/a&gt; interface documentation.</source>
          <target state="translated">초기 컨텍스트가 구성되면 해당 환경은 생성자에 전달 된 environment 매개 변수 및 모든 &lt;a href=&quot;context#RESOURCEFILES&quot; id=&quot;ENVIRONMENT&quot;&gt;애플리케이션 자원 파일에&lt;/a&gt; 정의 된 특성으로 초기화됩니다 . 또한 적은 수의 표준 JNDI 특성을 시스템 특성 또는 애플릿 매개 변수로 지정할 수 있습니다 ( &lt;a href=&quot;context#APPLET&quot;&gt; &lt;code&gt;Context.APPLET&lt;/code&gt; &lt;/a&gt; 사용 ). 이러한 특수 특성은 &lt;a href=&quot;context#field_detail&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;ldap/ldapcontext#field_detail&quot;&gt; &lt;code&gt;LdapContext&lt;/code&gt; &lt;/a&gt; 인터페이스 문서 의 필드 세부 사항 섹션에 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f2e2ab8bd29748019ef4bf990564b30618f21a2" translate="yes" xml:space="preserve">
          <source>When the initial context is constructed, its environment is initialized with properties defined in the environment parameter passed to the constructor, and in any &lt;a href=&quot;context#RESOURCEFILES&quot;&gt;application resource files&lt;/a&gt;.</source>
          <target state="translated">초기 컨텍스트가 생성되면 해당 환경은 생성자에 전달 된 환경 매개 변수와 모든 &lt;a href=&quot;context#RESOURCEFILES&quot;&gt;애플리케이션 리소스 파일에&lt;/a&gt; 정의 된 속성으로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="696a039c384cd3258c09a0ffb67d7220e4c8e54b" translate="yes" xml:space="preserve">
          <source>When the intern method is invoked, if the pool already contains a string equal to this &lt;code&gt;String&lt;/code&gt; object as determined by the &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;&lt;code&gt;equals(Object)&lt;/code&gt;&lt;/a&gt; method, then the string from the pool is returned. Otherwise, this &lt;code&gt;String&lt;/code&gt; object is added to the pool and a reference to this &lt;code&gt;String&lt;/code&gt; object is returned.</source>
          <target state="translated">인턴 메서드가 호출 될 때 풀 에 &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt; &lt;code&gt;equals(Object)&lt;/code&gt; &lt;/a&gt; 메서드에 의해 결정된 &lt;code&gt;String&lt;/code&gt; 객체와 동일한 문자열이 이미 포함되어 있으면 풀 의 문자열이 반환됩니다. 그렇지 않으면,이 &lt;code&gt;String&lt;/code&gt; 객체가 풀에 추가되고이에 대한 참조 &lt;code&gt;String&lt;/code&gt; 객체가 돌려 주어집니다.</target>
        </trans-unit>
        <trans-unit id="3af901ecd46db6d3c503ad63c889dcb1df5223cb" translate="yes" xml:space="preserve">
          <source>When the intern method is invoked, if the pool already contains a string equal to this &lt;code&gt;String&lt;/code&gt; object as determined by the &lt;a href=&quot;string#equals-java.lang.Object-&quot;&gt;&lt;code&gt;equals(Object)&lt;/code&gt;&lt;/a&gt; method, then the string from the pool is returned. Otherwise, this &lt;code&gt;String&lt;/code&gt; object is added to the pool and a reference to this &lt;code&gt;String&lt;/code&gt; object is returned.</source>
          <target state="translated">인턴 메소드가 호출 될 때, &lt;a href=&quot;string#equals-java.lang.Object-&quot;&gt; &lt;code&gt;equals(Object)&lt;/code&gt; &lt;/a&gt; 메소드에 의해 판별 된대로 풀에이 &lt;code&gt;String&lt;/code&gt; 오브젝트와 동일한 문자열이 이미 포함되어 있으면 풀 의 문자열이 리턴됩니다. 그렇지 않으면,이 &lt;code&gt;String&lt;/code&gt; 객체가 풀에 추가되고이에 대한 참조 &lt;code&gt;String&lt;/code&gt; 객체가 돌려 주어집니다.</target>
        </trans-unit>
        <trans-unit id="f8bbc3f973b7168a4616c7de9f75c0600151427a" translate="yes" xml:space="preserve">
          <source>When the job is in the &lt;code&gt;PROCESSING&lt;/code&gt; state, the entire job state includes the detailed status represented in the printer's &lt;a href=&quot;printerstate&quot;&gt;&lt;code&gt;PrinterState&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;printerstatereasons&quot;&gt;&lt;code&gt;PrinterStateReasons&lt;/code&gt;&lt;/a&gt; attributes.</source>
          <target state="translated">작업이 &lt;code&gt;PROCESSING&lt;/code&gt; 상태이면 전체 작업 상태에는 프린터의 &lt;a href=&quot;printerstate&quot;&gt; &lt;code&gt;PrinterState&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;printerstatereasons&quot;&gt; &lt;code&gt;PrinterStateReasons&lt;/code&gt; &lt;/a&gt; 속성에 표시된 자세한 상태가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="1a58835a2387f608fd8e7fa6effa626edf3d2325" translate="yes" xml:space="preserve">
          <source>When the job is in the PROCESSING state, the entire job state includes the detailed status represented in the printer's &lt;a href=&quot;printerstate&quot;&gt;&lt;code&gt;PrinterState&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;printerstatereasons&quot;&gt;&lt;code&gt;PrinterStateReasons&lt;/code&gt;&lt;/a&gt; attributes.</source>
          <target state="translated">작업이 처리 중 상태 인 경우 전체 작업 상태에는 프린터의 &lt;a href=&quot;printerstate&quot;&gt; &lt;code&gt;PrinterState&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;printerstatereasons&quot;&gt; &lt;code&gt;PrinterStateReasons&lt;/code&gt; &lt;/a&gt; 속성에 표시된 상세 상태가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="66a9921b5b8623505ad852c1a7dd9d532fe13cfc" translate="yes" xml:space="preserve">
          <source>When the keepalive option is set for a TCP socket and no data has been exchanged across the socket in either direction for 2 hours (NOTE: the actual value is implementation dependent), TCP automatically sends a keepalive probe to the peer.</source>
          <target state="translated">TCP 소켓에 대해 keepalive 옵션이 설정되고 2 시간 동안 어느 방향 으로든 소켓을 통해 데이터가 교환되지 않은 경우 (참고 : 실제 값은 구현에 따라 다름) TCP는 자동으로 Keepalive 프로브를 피어에 보냅니다.</target>
        </trans-unit>
        <trans-unit id="bb6061dea9059e4de3096353b5e5aab377ef19b3" translate="yes" xml:space="preserve">
          <source>When the keepalive option is set for a TCP socket and no data has been exchanged across the socket in either direction for 2 hours (NOTE: the actual value is implementation dependent), TCP automatically sends a keepalive probe to the peer. This probe is a TCP segment to which the peer must respond. One of three responses is expected: 1. The peer responds with the expected ACK. The application is not notified (since everything is OK). TCP will send another probe following another 2 hours of inactivity. 2. The peer responds with an RST, which tells the local TCP that the peer host has crashed and rebooted. The socket is closed. 3. There is no response from the peer. The socket is closed. The purpose of this option is to detect if the peer host crashes. Valid only for TCP socket: SocketImpl</source>
          <target state="translated">keepalive 옵션이 TCP 소켓에 대해 설정되고 2 시간 동안 어느 방향 으로든 소켓을 통해 데이터가 교환되지 않은 경우 (참고 : 실제 값은 구현에 따라 다름) TCP는 keepalive 프로브를 자동으로 피어에 보냅니다. 이 프로브는 피어가 응답해야하는 TCP 세그먼트입니다. 세 가지 응답 중 하나가 예상됩니다. 1. 피어가 예상 된 ACK로 응답합니다. 응용 프로그램에 알림이 표시되지 않습니다 (모든 것이 정상이므로). TCP는 2 시간 동안 활동이 없으면 다른 프로브를 보냅니다. 2. 피어는 RST로 응답하여 피어 호스트가 충돌하여 재부팅되었음을 로컬 TCP에 알려줍니다. 소켓이 닫혀 있습니다. 3. 피어로부터 응답이 없습니다. 소켓이 닫혀 있습니다. 이 옵션의 목적은 피어 호스트가 충돌하는지 감지하는 것입니다. TCP 소켓에만 유효합니다 : SocketImpl</target>
        </trans-unit>
        <trans-unit id="866732f7e1f1ba8888b09a311866448987c8a922" translate="yes" xml:space="preserve">
          <source>When the languageTag argument contains an extlang subtag, the first such subtag is used as the language, and the primary language subtag and other extlang subtags are ignored:</source>
          <target state="translated">languageTag 인수에 extlang 하위 태그가 포함 된 경우 첫 번째 하위 태그가 언어로 사용되며 기본 언어 하위 태그 및 기타 extlang 하위 태그는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ed36ba14c7223ab42eda132f49f243999c7fe2b2" translate="yes" xml:space="preserve">
          <source>When the listener is notified of an event, the listener may in invoked in a thread other than the one in which &lt;code&gt;addNamingListener()&lt;/code&gt; is executed. Care must be taken when multiple threads are accessing the same &lt;code&gt;EventContext&lt;/code&gt; concurrently. See the &lt;a href=&quot;package-summary#THREADING&quot;&gt;package description&lt;/a&gt; for more information on threading issues.</source>
          <target state="translated">리스너에 이벤트가 통지되면 &lt;code&gt;addNamingListener()&lt;/code&gt; 가 실행 되는 스레드 이외의 스레드에서 리스너가 호출 될 수 있습니다 . 여러 스레드가 동일한 &lt;code&gt;EventContext&lt;/code&gt; 에 동시에 액세스하는 경우주의해야합니다 . 스레딩 문제에 대한 자세한 내용은 &lt;a href=&quot;package-summary#THREADING&quot;&gt;패키지 설명&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0d9cde70e42ddbed9e83b6ac5078af513cb772df" translate="yes" xml:space="preserve">
          <source>When the locale has neither script nor extensions, the result is the same as in Java 6 and prior.</source>
          <target state="translated">로케일에 스크립트 나 확장자가 없으면 결과는 Java 6 이전과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="1b1fe4c6f5b74a16eccbbff7c89d6b2a2b6653a7" translate="yes" xml:space="preserve">
          <source>When the look and feel is changed, &lt;code&gt;UIManager&lt;/code&gt; alters only the look and feel defaults; the developer and system defaults are not altered by the &lt;code&gt;UIManager&lt;/code&gt; in any way.</source>
          <target state="translated">룩앤필이 변경되면 &lt;code&gt;UIManager&lt;/code&gt; 는 룩앤필 기본값 만 변경합니다. 개발자 및 시스템 기본값은 어떤 식 으로든 &lt;code&gt;UIManager&lt;/code&gt; 에 의해 변경되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="93d0b3309dfdbd682000d72cebceb5604b73431a" translate="yes" xml:space="preserve">
          <source>When the loop is called, the loop input values are saved in locals, to be passed to every clause function. These locals are loop invariant.</source>
          <target state="translated">루프가 호출되면 루프 입력 값이 모든 절 함수에 전달되도록 로컬에 저장됩니다. 이러한 지역은 루프 불변입니다.</target>
        </trans-unit>
        <trans-unit id="007b0e1775e7a297cd0ad9889941a2a02fa5ed07" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;acceptChanges&lt;/code&gt; encounters conflicts, the &lt;code&gt;SyncProvider&lt;/code&gt; object creates a &lt;code&gt;SyncProviderException&lt;/code&gt; object and sets it with the new &lt;code&gt;SyncResolver&lt;/code&gt; object. The method &lt;code&gt;acceptChanges&lt;/code&gt; will throw this exception, which the application can then catch and use to retrieve the &lt;code&gt;SyncResolver&lt;/code&gt; object it contains. The following code snippet uses the &lt;code&gt;SyncProviderException&lt;/code&gt; method &lt;code&gt;getSyncResolver&lt;/code&gt; to get the &lt;code&gt;SyncResolver&lt;/code&gt; object</source>
          <target state="translated">상기 방법의 경우 &lt;code&gt;acceptChanges&lt;/code&gt; 만남 충돌 상기 &lt;code&gt;SyncProvider&lt;/code&gt; 객체가 생성 &lt;code&gt;SyncProviderException&lt;/code&gt; 객체와 함께 새로운 세트를 &lt;code&gt;SyncResolver&lt;/code&gt; 개체. &lt;code&gt;acceptChanges&lt;/code&gt; 메소드 는이 예외를 발생 시키며, 애플리케이션은이를 포착하여 여기에 포함 된 &lt;code&gt;SyncResolver&lt;/code&gt; 오브젝트 를 검색하는 데 사용할 수 있습니다. 다음 코드 스 니펫은 &lt;code&gt;SyncProviderException&lt;/code&gt; 메소드 &lt;code&gt;getSyncResolver&lt;/code&gt; 를 사용 하여 &lt;code&gt;SyncResolver&lt;/code&gt; 객체 를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="761ffe43252810926439462ad9f307e7fa5b5d7e" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;acceptChanges&lt;/code&gt; executes successfully, in addition to writing changes to the data source, it makes the values in the current row be the values in the original row.</source>
          <target state="translated">&lt;code&gt;acceptChanges&lt;/code&gt; 메소드가 성공적으로 실행되면 데이터 소스에 변경 사항을 기록하는 것 외에도 현재 행의 값이 원래 행의 값이됩니다.</target>
        </trans-unit>
        <trans-unit id="eacefaf622ae1cba296aa64de13b41c77b34ebc2" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;acceptChanges&lt;/code&gt; is executed, the &lt;code&gt;CachedRowSet&lt;/code&gt; object's writer, a &lt;code&gt;RowSetWriterImpl&lt;/code&gt; object, is called behind the scenes to write the changes made to the rowset to the underlying data source. The writer is implemented to make a connection to the data source and write updates to it.</source>
          <target state="translated">&lt;code&gt;acceptChanges&lt;/code&gt; 메서드 가 실행되면 &lt;code&gt;CachedRowSet&lt;/code&gt; 개체의 작성기 인 &lt;code&gt;RowSetWriterImpl&lt;/code&gt; 개체가 백그라운드에서 호출되어 행 집합에 대한 변경 내용을 기본 데이터 원본에 기록합니다. 작성기는 데이터 소스에 연결하고 업데이트를 작성하도록 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="f0a87c8c83eb227ae747569302b9215bbb8f49c6" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;getConnection&lt;/code&gt; is called, the &lt;code&gt;DriverManager&lt;/code&gt; will attempt to locate a suitable driver from amongst those loaded at initialization and those loaded explicitly using the same class loader as the current application.</source>
          <target state="translated">&lt;code&gt;getConnection&lt;/code&gt; 메소드 가 호출되면 &lt;code&gt;DriverManager&lt;/code&gt; 는 초기화시로드 된 드라이버와 현재 애플리케이션과 동일한 클래스 로더를 사용하여 명시 적으로로드 된 드라이버 중에서 적절한 드라이버를 찾으려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="64b1a414ef040f7d4a015e56bd76285cd50c4d87" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;getObject&lt;/code&gt; is called with an object of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;, the JDBC driver calls the method &lt;code&gt;SQLData.getSQLType&lt;/code&gt; to determine the SQL type of the UDT being custom mapped. The driver creates an instance of &lt;code&gt;SQLInputImpl&lt;/code&gt;, populating it with the attributes of the UDT. The driver then passes the input stream to the method &lt;code&gt;SQLData.readSQL&lt;/code&gt;, which in turn calls the &lt;code&gt;SQLInputImpl&lt;/code&gt; reader methods to read the attributes from the input stream.</source>
          <target state="translated">방법되면 &lt;code&gt;getObject&lt;/code&gt; 인터페이스를 구현하는 클래스의 객체로 호출 &lt;code&gt;SQLData&lt;/code&gt; , JDBC 드라이버는 메소드 호출을 &lt;code&gt;SQLData.getSQLType&lt;/code&gt; 커스텀 매핑되는 UDT의 SQL 유형을 결정합니다. 드라이버는 &lt;code&gt;SQLInputImpl&lt;/code&gt; 의 인스턴스를 생성 하여 UDT의 속성으로 채 웁니다. 그런 다음 드라이버는 입력 스트림을 &lt;code&gt;SQLData.readSQL&lt;/code&gt; 메소드로 전달하고 , 그러면 &lt;code&gt;SQLInputImpl&lt;/code&gt; 리더 메소드를 호출 하여 입력 스트림에서 속성을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="fc2f4707a729deed0932994b739ae33c7d74de2f" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;getObject&lt;/code&gt; is called with an object of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;, the JDBC driver calls the method &lt;code&gt;SQLData.getSQLType&lt;/code&gt; to determine the SQL type of the user-defined type (UDT) being custom mapped. The driver creates an instance of &lt;code&gt;SQLInput&lt;/code&gt;, populating it with the attributes of the UDT. The driver then passes the input stream to the method &lt;code&gt;SQLData.readSQL&lt;/code&gt;, which in turn calls the &lt;code&gt;SQLInput&lt;/code&gt; reader methods in its implementation for reading the attributes from the input stream.</source>
          <target state="translated">방법 때 &lt;code&gt;getObject&lt;/code&gt; 인터페이스 구현하는 클래스의 객체로 호출 &lt;code&gt;SQLData&lt;/code&gt; 상기 JDBC 드라이버는 메소드 호출 &lt;code&gt;SQLData.getSQLType&lt;/code&gt; 맞춤 매핑되는 사용자 정의 타입 (UDT)의 SQL 타입을 결정한다. 드라이버는 &lt;code&gt;SQLInput&lt;/code&gt; 의 인스턴스를 생성 하여 UDT의 속성으로 채 웁니다. 그런 다음 드라이버는 입력 스트림을 &lt;code&gt;SQLData.readSQL&lt;/code&gt; 메서드로 전달합니다. 그러면 입력 스트림 에서 속성을 읽기 위해 해당 구현에서 &lt;code&gt;SQLInput&lt;/code&gt; 판독기 메서드를 차례로 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="a7076acb7964a150cbcde4cd84fa0a6df2b7d477" translate="yes" xml:space="preserve">
          <source>When the node being renamed is an &lt;code&gt;Attr&lt;/code&gt; that is attached to an &lt;code&gt;Element&lt;/code&gt;, the node is first removed from the &lt;code&gt;Element&lt;/code&gt; attributes map. Then, once renamed, either by modifying the existing node or creating a new one as described above, it is put back.</source>
          <target state="translated">이름이 변경되는 노드가 &lt;code&gt;Element&lt;/code&gt; 에 연결된 &lt;code&gt;Attr&lt;/code&gt; 인 경우 노드는 먼저 &lt;code&gt;Element&lt;/code&gt; 속성 맵 에서 제거 됩니다. 그런 다음 기존 노드를 수정하거나 위에서 설명한대로 새 노드를 생성하여 이름을 변경하면 다시 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="c89febf12ab0e3c4977c50a6e144102ca2b758a1" translate="yes" xml:space="preserve">
          <source>When the node being renamed is an &lt;code&gt;Element&lt;/code&gt; only the specified attributes are moved, default attributes originated from the DTD are updated according to the new element name. In addition, the implementation may update default attributes from other schemas. Applications should use &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; to guarantee these attributes are up-to-date.</source>
          <target state="translated">이름이 변경되는 노드가 &lt;code&gt;Element&lt;/code&gt; 경우 지정된 속성 만 이동되고 DTD에서 생성 된 기본 속성은 새 요소 이름에 따라 업데이트됩니다. 또한 구현시 다른 스키마의 기본 속성을 업데이트 할 수 있습니다. 응용 프로그램은 &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; 를 사용 하여 이러한 속성이 최신 상태인지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="b3f2c7cd9cb9265342d2a6fc6218dfca1e62cee5" translate="yes" xml:space="preserve">
          <source>When the output method is &quot;xml&quot;, the version value specifies the version of XML to be used for outputting the result tree. The default value for the xml output method is 1.0. When the output method is &quot;html&quot;, the version value indicates the version of the HTML. The default value for the xml output method is 4.0, which specifies that the result should be output as HTML conforming to the HTML 4.0 Recommendation [HTML]. If the output method is &quot;text&quot;, the version property is ignored.</source>
          <target state="translated">출력 방법이 &quot;xml&quot;인 경우 버전 값은 결과 트리를 출력하는 데 사용할 XML 버전을 지정합니다. xml 출력 방법의 기본값은 1.0입니다. 출력 방법이 &quot;html&quot;인 경우 버전 값은 HTML의 버전을 나타냅니다. xml 출력 방법의 기본값은 4.0이며, 결과가 HTML 4.0 권장 사항 [HTML]을 준수하는 HTML로 출력되어야 함을 지정합니다. 출력 방법이 &quot;text&quot;이면 version 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f8a5f29e1d264a025ea5669456267893f0f08fec" translate="yes" xml:space="preserve">
          <source>When the parse fails, use ParsePosition.getErrorIndex() to find out where in the string the parsing failed. The returned error index is the starting offset of the sub-patterns that the string is comparing with. For example, if the parsing string &quot;AAA {0} BBB&quot; is comparing against the pattern &quot;AAD {0} BBB&quot;, the error index is 0. When an error occurs, the call to this method will return null. If the source is null, return an empty array.</source>
          <target state="translated">구문 분석이 실패하면 ParsePosition.getErrorIndex ()를 사용하여 문자열에서 구문 분석이 실패한 위치를 찾으십시오. 반환 된 오류 인덱스는 문자열이 비교하는 하위 패턴의 시작 오프셋입니다. 예를 들어, 구문 분석 문자열 &quot;AAA {0} BBB&quot;가 패턴 &quot;AAD {0} BBB&quot;와 비교되는 경우 오류 색인은 0입니다. 오류가 발생하면이 메소드에 대한 호출은 널을 리턴합니다. 소스가 null의 경우, 비어있는 배열을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="72cc5d6ed97f5b594ccc044348c9065ad0416c01" translate="yes" xml:space="preserve">
          <source>When the parser encounters a word token that has the format of a double precision floating-point number, it treats the token as a number rather than a word, by setting the &lt;code&gt;ttype&lt;/code&gt; field to the value &lt;code&gt;TT_NUMBER&lt;/code&gt; and putting the numeric value of the token into the &lt;code&gt;nval&lt;/code&gt; field.</source>
          <target state="translated">파서가 배정도 부동 소수점 숫자 형식의 단어 토큰을 발견하면 &lt;code&gt;ttype&lt;/code&gt; 필드를 &lt;code&gt;TT_NUMBER&lt;/code&gt; 값 으로 설정하고 토큰 의 숫자 값을 입력하여 토큰을 단어가 아닌 숫자로 처리합니다. &lt;code&gt;nval&lt;/code&gt; 필드.</target>
        </trans-unit>
        <trans-unit id="78bae3a9fd2477af6b829cef33248071afc46dc2" translate="yes" xml:space="preserve">
          <source>When the peer was not able to identify itself (for example; no certificate, the particular cipher suite being used does not support authentication, or no peer authentication was established during SSL handshaking) this exception is thrown.</source>
          <target state="translated">피어가 자신을 식별 할 수없는 경우 (예 : 인증서가없는 경우 사용중인 특정 암호 스위트가 인증을 지원하지 않거나 SSL 핸드 쉐이킹 중에 피어 인증이 설정되지 않은 경우)이 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e0488e20002eb573a021336f9689d0df5866d2de" translate="yes" xml:space="preserve">
          <source>When the precision setting is not 0, the rules of &lt;code&gt;BigDecimal&lt;/code&gt; arithmetic are broadly compatible with selected modes of operation of the arithmetic defined in ANSI X3.274-1996 and ANSI X3.274-1996/AM 1-2000 (section 7.4). Unlike those standards, &lt;code&gt;BigDecimal&lt;/code&gt; includes many rounding modes, which were mandatory for division in &lt;code&gt;BigDecimal&lt;/code&gt; releases prior to 5. Any conflicts between these ANSI standards and the &lt;code&gt;BigDecimal&lt;/code&gt; specification are resolved in favor of &lt;code&gt;BigDecimal&lt;/code&gt;.</source>
          <target state="translated">정밀도 설정이 0이 아닌 경우 &lt;code&gt;BigDecimal&lt;/code&gt; 산술 규칙은 ANSI X3.274-1996 및 ANSI X3.274-1996 / AM 1-2000 (섹션 7.4)에 정의 된 산술 연산 모드와 광범위하게 호환됩니다. 이러한 표준과는 달리, &lt;code&gt;BigDecimal&lt;/code&gt; 와 의 제산으로 필수였다 많은 둥근 모드가 포함 &lt;code&gt;BigDecimal&lt;/code&gt; 를가 이러한 ANSI 표준과 간의 충돌 전 5에 출시 &lt;code&gt;BigDecimal&lt;/code&gt; 스펙에 찬성 해결 &lt;code&gt;BigDecimal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5843d706baf770064c5e4bf338f1a63714ad7a1d" translate="yes" xml:space="preserve">
          <source>When the representation class is a URL, the print service itself accesses and downloads the document directly from its URL address, without involving the client. The service may be some form of network print service which is executing in a different environment. This means you should not use a URL print data flavor to print a document at a restricted URL that the client can see but the printer cannot see. This also means you should not use a URL print data flavor to print a document stored in a local file that is not available at a URL accessible independently of the client. For example, a file that is not served up by an HTTP server or FTP server. To print such documents, let the client open an input stream on the URL or file and use an input stream data flavor.</source>
          <target state="translated">표현 클래스가 URL 인 경우, 인쇄 서비스 자체는 클라이언트를 관여시키지 않고 URL 주소에서 직접 문서에 액세스하여 다운로드합니다. 서비스는 다른 환경에서 실행되는 네트워크 인쇄 서비스의 형태 일 수 있습니다. 즉, 클라이언트는 볼 수 있지만 프린터는 볼 수없는 제한된 URL로 문서를 인쇄하기 위해 URL 인쇄 데이터 특징을 사용해서는 안됩니다. 이는 또한 클라이언트와 독립적으로 액세스 할 수있는 URL에서 사용할 수없는 로컬 파일에 저장된 문서를 인쇄하기 위해 URL 인쇄 데이터 특징을 사용해서는 안됩니다. 예를 들어, HTTP 서버 또는 FTP 서버에서 제공하지 않는 파일입니다. 이러한 문서를 인쇄하려면 클라이언트가 URL 또는 파일에서 입력 스트림을 열고 입력 스트림 데이터 플레이버를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c50fdf0c297e395312b19932d6d698d6fe9410ab" translate="yes" xml:space="preserve">
          <source>When the returned &lt;code&gt;VarHandle&lt;/code&gt; is invoked, the array reference and array index are checked. A &lt;code&gt;NullPointerException&lt;/code&gt; will be thrown if the array reference is &lt;code&gt;null&lt;/code&gt; and an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; will be thrown if the index is negative or if it is greater than or equal to the length of the array.</source>
          <target state="translated">반환 된 &lt;code&gt;VarHandle&lt;/code&gt; 이 호출되면 배열 참조와 배열 인덱스가 확인됩니다. &lt;code&gt;NullPointerException&lt;/code&gt; 가 배열 참조 경우 발생한다 &lt;code&gt;null&lt;/code&gt; 하고 &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; 지수가 음수 인 경우 발생한다하거나 배열의 길이와 동일하거나보다 큰 경우.</target>
        </trans-unit>
        <trans-unit id="f2890f46cc50adad6b16a722b172030e24df5540" translate="yes" xml:space="preserve">
          <source>When the returned method handle is invoked, the array reference and array index are checked. A &lt;code&gt;NullPointerException&lt;/code&gt; will be thrown if the array reference is &lt;code&gt;null&lt;/code&gt; and an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; will be thrown if the index is negative or if it is greater than or equal to the length of the array.</source>
          <target state="translated">반환 된 메서드 핸들이 호출되면 배열 참조 및 배열 인덱스가 확인됩니다. &lt;code&gt;NullPointerException&lt;/code&gt; 가 배열 참조 경우 발생한다 &lt;code&gt;null&lt;/code&gt; 하고 &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; 지수가 음수 인 경우 발생한다하거나 배열의 길이와 동일하거나보다 큰 경우.</target>
        </trans-unit>
        <trans-unit id="65a8d19d4c40ff2e75d5423b676fb0c582abe879" translate="yes" xml:space="preserve">
          <source>When the selection is changed, &lt;code&gt;setValue&lt;/code&gt; is invoked, which generates a &lt;code&gt;PropertyChangeEvent&lt;/code&gt;.</source>
          <target state="translated">선택이 변경되면 &lt;code&gt;setValue&lt;/code&gt; 가 호출되어 &lt;code&gt;PropertyChangeEvent&lt;/code&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="34f9e72cd7ab06f0430202d13d67e17e3e697217" translate="yes" xml:space="preserve">
          <source>When the set of diagnostic commands currently supported by the Java Virtual Machine is modified, the &lt;code&gt;DiagnosticCommandMBean&lt;/code&gt; emits a &lt;a href=&quot;../../../../java.management/javax/management/notification&quot;&gt;&lt;code&gt;Notification&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&quot;../../../../java.management/javax/management/notification#getType()&quot;&gt;type&lt;/a&gt; of &lt;a href=&quot;../../../../java.management/javax/management/mbeaninfo#info-changed&quot;&gt; &lt;code&gt;&quot;jmx.mbean.info.changed&quot;&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;../../../../java.management/javax/management/notification#getUserData()&quot;&gt;userData&lt;/a&gt; that is the new &lt;code&gt;MBeanInfo&lt;/code&gt;.</source>
          <target state="translated">현재 자바 가상 머신에서 지원 진단 명령 세트가 수정 될 때, &lt;code&gt;DiagnosticCommandMBean&lt;/code&gt; 는 방출 &lt;a href=&quot;../../../../java.management/javax/management/notification&quot;&gt; &lt;code&gt;Notification&lt;/code&gt; &lt;/a&gt; 로모그래퍼 &lt;a href=&quot;../../../../java.management/javax/management/notification#getType()&quot;&gt;유형&lt;/a&gt; 의 &lt;a href=&quot;../../../../java.management/javax/management/mbeaninfo#info-changed&quot;&gt; &lt;code&gt;&quot;jmx.mbean.info.changed&quot;&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;../../../../java.management/javax/management/notification#getUserData()&quot;&gt;userData에&lt;/a&gt; 새로운입니다 &lt;code&gt;MBeanInfo&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="750413507a9e50e7dd4ee48691a0e0e569f733c7" translate="yes" xml:space="preserve">
          <source>When the socket is created the &lt;a href=&quot;datagramsocket#setReuseAddress(boolean)&quot;&gt;&lt;code&gt;DatagramSocket.setReuseAddress(boolean)&lt;/code&gt;&lt;/a&gt; method is called to enable the SO_REUSEADDR socket option.</source>
          <target state="translated">소켓이 생성 되면 SO_REUSEADDR 소켓 옵션을 활성화하기 위해 &lt;a href=&quot;datagramsocket#setReuseAddress(boolean)&quot;&gt; &lt;code&gt;DatagramSocket.setReuseAddress(boolean)&lt;/code&gt; &lt;/a&gt; 메서드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c97f96f2fd46091c0f2026852faa74a91e5bd86f" translate="yes" xml:space="preserve">
          <source>When the socket is created the &lt;a href=&quot;datagramsocket#setReuseAddress-boolean-&quot;&gt;&lt;code&gt;DatagramSocket.setReuseAddress(boolean)&lt;/code&gt;&lt;/a&gt; method is called to enable the SO_REUSEADDR socket option.</source>
          <target state="translated">소켓이 작성 되면 SO_REUSEADDR 소켓 옵션을 사용하기 위해 &lt;a href=&quot;datagramsocket#setReuseAddress-boolean-&quot;&gt; &lt;code&gt;DatagramSocket.setReuseAddress(boolean)&lt;/code&gt; &lt;/a&gt; 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="23d0fb38ca6d6e11edcf3b7e63aa87f6a871583e" translate="yes" xml:space="preserve">
          <source>When the specified date-time arrives, the printer must remove the &lt;a href=&quot;jobstatereason&quot;&gt;&lt;code&gt;JobStateReason&lt;/code&gt;&lt;/a&gt; value of &lt;code&gt;JOB_HOLD_UNTIL_SPECIFIED&lt;/code&gt; from the job's &lt;a href=&quot;jobstatereasons&quot;&gt;&lt;code&gt;JobStateReasons&lt;/code&gt;&lt;/a&gt; attribute, if present. If there are no other job state reasons that keep the job in the &lt;code&gt;PENDING_HELD&lt;/code&gt; state, the printer must consider the job as a candidate for processing by moving the job to the PENDING state.</source>
          <target state="translated">지정된 날짜-시간이되면 프린터는 작업의 &lt;a href=&quot;jobstatereasons&quot;&gt; &lt;code&gt;JobStateReasons&lt;/code&gt; &lt;/a&gt; 속성 (있는 경우) 에서 &lt;code&gt;JOB_HOLD_UNTIL_SPECIFIED&lt;/code&gt; 의 &lt;a href=&quot;jobstatereason&quot;&gt; &lt;code&gt;JobStateReason&lt;/code&gt; &lt;/a&gt; 값을 제거해야합니다 . 작업을 &lt;code&gt;PENDING_HELD&lt;/code&gt; 상태로 유지하는 다른 작업 상태 이유가없는 경우 프린터는 작업을 PENDING 상태로 이동하여 작업을 처리 후보로 간주해야합니다.</target>
        </trans-unit>
        <trans-unit id="5705af97d2330caf062737553687cb90dd63be9e" translate="yes" xml:space="preserve">
          <source>When the specified date-time arrives, the printer must remove the &lt;a href=&quot;jobstatereason&quot;&gt;&lt;code&gt;JobStateReason&lt;/code&gt;&lt;/a&gt; value of JOB_HOLD_UNTIL_SPECIFIED from the job's &lt;a href=&quot;jobstatereasons&quot;&gt;&lt;code&gt;JobStateReasons&lt;/code&gt;&lt;/a&gt; attribute, if present. If there are no other job state reasons that keep the job in the PENDING_HELD state, the printer must consider the job as a candidate for processing by moving the job to the PENDING state.</source>
          <target state="translated">지정된 날짜-시간이되면 프린터는 작업의 &lt;a href=&quot;jobstatereasons&quot;&gt; &lt;code&gt;JobStateReasons&lt;/code&gt; &lt;/a&gt; 속성 (있는 경우) 에서 &lt;a href=&quot;jobstatereason&quot;&gt; &lt;code&gt;JobStateReason&lt;/code&gt; &lt;/a&gt; 값 JOB_HOLD_UNTIL_SPECIFIED를 제거해야합니다 . 작업을 PENDING_HELD 상태로 유지하는 다른 작업 상태 이유가없는 경우 프린터는 작업을 PENDING 상태로 이동하여 처리 후보로 간주해야합니다.</target>
        </trans-unit>
        <trans-unit id="88645d98095c743d1978459bbe537d54c96def54" translate="yes" xml:space="preserve">
          <source>When the specified provider is removed, all providers located at a position greater than where the specified provider was are shifted down one position (towards the head of the list of installed providers).</source>
          <target state="translated">지정된 제공자가 제거되면 지정된 제공자가 지정된 위치보다 큰 위치에있는 모든 제공자가 한 위치 아래 (설치된 제공자 목록의 머리쪽으로) 이동합니다.</target>
        </trans-unit>
        <trans-unit id="a42df38aa359f6593f2ef17a8352c58477850724" translate="yes" xml:space="preserve">
          <source>When the syntax is &quot;&lt;code&gt;glob&lt;/code&gt;&quot; then the &lt;code&gt;String&lt;/code&gt; representation of the path is matched using a limited pattern language that resembles regular expressions but with a simpler syntax. For example:</source>
          <target state="translated">구문이 &quot; &lt;code&gt;glob&lt;/code&gt; &quot; 인 경우 경로 의 &lt;code&gt;String&lt;/code&gt; 표현은 정규식과 유사하지만 구문이 더 간단한 제한된 패턴 언어를 사용하여 일치됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a34d7bcd42ea49862772510bb9b109c7b63aa486" translate="yes" xml:space="preserve">
          <source>When the syntax is &quot;&lt;code&gt;regex&lt;/code&gt;&quot; then the pattern component is a regular expression as defined by the &lt;a href=&quot;../../util/regex/pattern&quot;&gt;&lt;code&gt;Pattern&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">구문이 &quot; &lt;code&gt;regex&lt;/code&gt; &quot;인 경우 패턴 구성 요소는 &lt;a href=&quot;../../util/regex/pattern&quot;&gt; &lt;code&gt;Pattern&lt;/code&gt; &lt;/a&gt; 클래스에 의해 정의 된 정규식 입니다.</target>
        </trans-unit>
        <trans-unit id="846a62fdfe658618e67bb6666bfc83ef7036c188" translate="yes" xml:space="preserve">
          <source>When the target of the &lt;code&gt;CallSite&lt;/code&gt; returned from this method is invoked, it returns the result of String concatenation, taking all function arguments and constants passed to the linkage method as inputs for concatenation. The target signature is given by &lt;code&gt;concatType&lt;/code&gt;, and does not include constants. For a target accepting:</source>
          <target state="translated">이 메서드에서 반환 된 &lt;code&gt;CallSite&lt;/code&gt; 의 대상 이 호출되면 연결을위한 입력으로 연결 메서드에 전달 된 모든 함수 인수와 상수를 사용하여 문자열 연결의 결과를 반환합니다. 대상 서명은 &lt;code&gt;concatType&lt;/code&gt; 으로 제공되며 상수를 포함하지 않습니다. 수락 대상 :</target>
        </trans-unit>
        <trans-unit id="d29230ce7aa0f83e52a9d0b8aae6ea61d3af4a88" translate="yes" xml:space="preserve">
          <source>When the target of the &lt;code&gt;CallSite&lt;/code&gt; returned from this method is invoked, it returns the result of String concatenation, taking all function arguments passed to the linkage method as inputs for concatenation. The target signature is given by &lt;code&gt;concatType&lt;/code&gt;. For a target accepting:</source>
          <target state="translated">이 메서드에서 반환 된 &lt;code&gt;CallSite&lt;/code&gt; 의 대상 이 호출되면 연결 메서드에 전달 된 모든 함수 인수를 연결에 대한 입력으로 사용하여 문자열 연결의 결과를 반환합니다. 대상 서명은 &lt;code&gt;concatType&lt;/code&gt; 으로 제공됩니다 . 수락 대상 :</target>
        </trans-unit>
        <trans-unit id="d7d520f5e0468b072c681c7152b26b75810e8caf" translate="yes" xml:space="preserve">
          <source>When the target of the &lt;code&gt;CallSite&lt;/code&gt; returned from this method is invoked, the resulting function objects are instances of a class which implements the interface named by the return type of &lt;code&gt;invokedType&lt;/code&gt;, declares a method with the name given by &lt;code&gt;invokedName&lt;/code&gt; and the signature given by &lt;code&gt;samMethodType&lt;/code&gt;. It may also override additional methods from &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">의 대상 때 &lt;code&gt;CallSite&lt;/code&gt; 이 메서드에서 반환이 호출, 결과 함수 객체의 반환 형식에 의해 명명 된 인터페이스를 구현하는 클래스의 인스턴스 &lt;code&gt;invokedType&lt;/code&gt; 는 ,에 의해 주어진 이름의 방법 선언 &lt;code&gt;invokedName&lt;/code&gt; 에 의해 주어진 서명 &lt;code&gt;samMethodType&lt;/code&gt; 을 . &lt;code&gt;Object&lt;/code&gt; 의 추가 메소드를 재정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="935f09a1ca1fda156388d4a2ee040efb3dfa7c02" translate="yes" xml:space="preserve">
          <source>When the target of the &lt;code&gt;CallSite&lt;/code&gt; returned from this method is invoked, the resulting function objects are instances of a class with the following properties:</source>
          <target state="translated">이 메소드에서 리턴 된 &lt;code&gt;CallSite&lt;/code&gt; 의 대상 이 호출되면 결과 함수 오브젝트는 다음 특성을 가진 클래스의 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="6d07b79c3fe52992e2c96caa5963c279054fc29d" translate="yes" xml:space="preserve">
          <source>When the user changes the value of the scroll bar, the scroll bar receives an instance of &lt;code&gt;AdjustmentEvent&lt;/code&gt;. The scroll bar processes this event, passing it along to any registered listeners.</source>
          <target state="translated">사용자가 스크롤 막대의 값을 변경하면 스크롤 막대는 &lt;code&gt;AdjustmentEvent&lt;/code&gt; 인스턴스를받습니다 . 스크롤 막대는이 이벤트를 처리하여 등록 된 모든 리스너에게 전달합니다.</target>
        </trans-unit>
        <trans-unit id="16eee6e04be75731d2c23d0789dd273c70555ca5" translate="yes" xml:space="preserve">
          <source>When the user is resizing the &lt;code&gt;Component&lt;/code&gt;s the minimum size of the &lt;code&gt;Components&lt;/code&gt; is used to determine the maximum/minimum position the &lt;code&gt;Component&lt;/code&gt;s can be set to. If the minimum size of the two components is greater than the size of the split pane the divider will not allow you to resize it. To alter the minimum size of a &lt;code&gt;JComponent&lt;/code&gt;, see &lt;a href=&quot;jcomponent#setMinimumSize(java.awt.Dimension)&quot;&gt;&lt;code&gt;JComponent.setMinimumSize(java.awt.Dimension)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자가 리사이징 될 때 &lt;code&gt;Component&lt;/code&gt; 의 최소한의 크기 &lt;code&gt;Components&lt;/code&gt; 상기 최대 / 최소 위치를 결정하는 데 사용되는 &lt;code&gt;Component&lt;/code&gt; 들로 설정 될 수있다. 두 구성 요소의 최소 크기가 분할 창의 크기보다 크면 구분선에서 크기를 조정할 수 없습니다. &lt;code&gt;JComponent&lt;/code&gt; 의 최소 ​​크기를 변경하려면 &lt;a href=&quot;jcomponent#setMinimumSize(java.awt.Dimension)&quot;&gt; &lt;code&gt;JComponent.setMinimumSize(java.awt.Dimension)&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="955102ac80658721d1f432faef28beba4c5e0ef3" translate="yes" xml:space="preserve">
          <source>When the user resizes the split pane the new space is distributed between the two components based on the &lt;code&gt;resizeWeight&lt;/code&gt; property. A value of 0, the default, indicates the right/bottom component gets all the space, where as a value of 1 indicates the left/top component gets all the space.</source>
          <target state="translated">사용자가 분할 창의 크기를 조정하면 &lt;code&gt;resizeWeight&lt;/code&gt; 속성을 기반으로 두 구성 요소간에 새 공간이 배포 됩니다. 기본값 인 0은 오른쪽 / 아래쪽 구성 요소가 모든 공간을 차지함을 나타내며, 값 1은 왼쪽 / 위쪽 구성 요소가 모든 공간을 차지함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c90b9a5fd33f3cd980097a956b05ef5be63c5895" translate="yes" xml:space="preserve">
          <source>When the user terminates the drag operation, normally resulting in a successful Drop, both the &lt;code&gt;DragSource&lt;/code&gt; and &lt;code&gt;DropTarget&lt;/code&gt; receive notifications that include, and result in the type negotiation and transfer of, the information associated with the &lt;code&gt;DragSource&lt;/code&gt; via a &lt;code&gt;Transferable&lt;/code&gt; object.</source>
          <target state="translated">사용자가 드래그 작업을 종료하여 일반적으로 Drop이 성공하면 &lt;code&gt;DragSource&lt;/code&gt; 및 &lt;code&gt;DropTarget&lt;/code&gt; 모두 &lt;code&gt;Transferable&lt;/code&gt; 개체 를 통해 &lt;code&gt;DragSource&lt;/code&gt; 와 관련된 정보를 포함하고 그 결과 유형 협상 및 전송을 포함하는 알림을받습니다 .</target>
        </trans-unit>
        <trans-unit id="1b69617c3d426ae0b52b14cd7b31c80e8f2ff7cf" translate="yes" xml:space="preserve">
          <source>When the virtual machine's built-in class loader, known as the &quot;bootstrap class loader&quot;, unsuccessfully searches for a class, the entries in the &lt;a href=&quot;../../../../java.base/java/util/jar/jarfile&quot;&gt;&lt;code&gt;JAR file&lt;/code&gt;&lt;/a&gt; will be searched as well.</source>
          <target state="translated">가상 머신의 내장 클래스 로더 ( &quot;부트 스트랩 클래스 로더&quot;라고 함)가 클래스 검색에 실패하면 &lt;a href=&quot;../../../../java.base/java/util/jar/jarfile&quot;&gt; &lt;code&gt;JAR file&lt;/code&gt; &lt;/a&gt; 의 항목 도 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="3845d46c4ef86f663a835d134902a3051dd1ea04" translate="yes" xml:space="preserve">
          <source>When the virtual machine's built-in class loader, known as the &quot;bootstrap class loader&quot;, unsuccessfully searches for a class, the entries in the &lt;a href=&quot;../../util/jar/jarfile&quot;&gt;&lt;code&gt;JAR file&lt;/code&gt;&lt;/a&gt; will be searched as well.</source>
          <target state="translated">&quot;부트 스트랩 클래스 로더&quot;라고하는 가상 머신의 내장 클래스 로더가 클래스를 검색하지 못하면 &lt;a href=&quot;../../util/jar/jarfile&quot;&gt; &lt;code&gt;JAR file&lt;/code&gt; &lt;/a&gt; 의 항목 도 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="9f5936d0319917d0904a3bc84216aec8fd20dcb1" translate="yes" xml:space="preserve">
          <source>When the window is per-pixel translucent, the drawing sub-system respects the alpha value of each individual pixel. If a pixel gets painted with the alpha color component equal to zero, it becomes visually transparent. If the alpha of the pixel is equal to 1.0f, the pixel is fully opaque. Interim values of the alpha color component make the pixel semi-transparent. In this mode, the background of the window gets painted with the alpha value of the given background color. If the alpha value of the argument of this method is equal to &lt;code&gt;0&lt;/code&gt;, the background is not painted at all.</source>
          <target state="translated">창이 픽셀 당 반투명이면 그리기 하위 시스템은 각 개별 픽셀의 알파 값을 따릅니다. 픽셀이 0과 같은 알파 색상 구성 요소로 칠해지면 시각적으로 투명 해집니다. 픽셀의 알파가 1.0f와 같으면 픽셀은 완전히 불투명합니다. 알파 색상 구성 요소의 중간 값은 픽셀을 반투명하게 만듭니다. 이 모드에서 창의 배경은 주어진 배경색의 알파 값으로 칠해집니다. 이 메서드 인수의 알파 값이 &lt;code&gt;0&lt;/code&gt; 이면 배경이 전혀 칠해지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="78301597bc29e04c67c4b5e8569630b44e2a80b1" translate="yes" xml:space="preserve">
          <source>When there are no more tokens, the last value found in the child-cache or returned by &lt;code&gt;childSpi&lt;/code&gt; is returned by this method. If during the traversal, two &lt;code&gt;&quot;/&quot;&lt;/code&gt; tokens occur consecutively, or the final token is &lt;code&gt;&quot;/&quot;&lt;/code&gt; (rather than a name), an appropriate &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.</source>
          <target state="translated">더 이상 토큰이 없으면 child-cache에서 찾거나 &lt;code&gt;childSpi&lt;/code&gt; 에 의해 리턴 된 마지막 값 이이 메소드에 의해 리턴됩니다. 순회 중에 두 개의 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 토큰이 연속적으로 발생하거나 최종 토큰이 &lt;code&gt;&quot;/&quot;&lt;/code&gt; (이름이 아닌)이면 적절한 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="dd91b0658c6cf431015b14f6a00de46f9c97ac60" translate="yes" xml:space="preserve">
          <source>When there is a positive-width match at the beginning of the input sequence then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring.</source>
          <target state="translated">입력 시퀀스의 시작 부분에 양의 너비가 일치하면 결과 배열의 시작 부분에 빈 선행 부분 문자열이 포함됩니다. 그러나 처음에 너비가 0이면 일치하는 빈 선행 부분 문자열이 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ab6bcee9543d79d3bbe811e0f20b9a8c6356f175" translate="yes" xml:space="preserve">
          <source>When there is a positive-width match at the beginning of the input sequence then an empty leading substring is included at the beginning of the stream. A zero-width match at the beginning however never produces such empty leading substring.</source>
          <target state="translated">입력 시퀀스의 시작 부분에 양의 너비가 일치하면 빈 시작 부분 문자열이 스트림의 시작 부분에 포함됩니다. 그러나 처음에 너비가 0이면 일치하는 빈 선행 부분 문자열이 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="735c807118b30a042caeeea37d2a0653aefeb1e0" translate="yes" xml:space="preserve">
          <source>When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring.</source>
          <target state="translated">이 문자열의 시작 부분에 양의 너비가 일치하면 결과 배열의 시작 부분에 빈 선행 부분 문자열이 포함됩니다. 그러나 처음에 너비가 0이면 일치하는 빈 선행 부분 문자열이 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9a4d1a71ed66693f31054772316c85b0392b49d2" translate="yes" xml:space="preserve">
          <source>When these are in place for a UDT, calling the methods &lt;code&gt;ResultSet.getObject&lt;/code&gt; or &lt;code&gt;CallableStatement.getObject&lt;/code&gt; on that UDT will automatically retrieve the custom mapping for it. Also, the &lt;code&gt;PreparedStatement.setObject&lt;/code&gt; method will automatically map the object back to its SQL type to store it in the data source.</source>
          <target state="translated">UDT에 대한 위치에있는 경우 해당 UDT에서 &lt;code&gt;ResultSet.getObject&lt;/code&gt; 또는 &lt;code&gt;CallableStatement.getObject&lt;/code&gt; 메서드를 호출하면 해당 UDT에 대한 사용자 지정 매핑이 자동으로 검색됩니다. 또한 &lt;code&gt;PreparedStatement.setObject&lt;/code&gt; 메소드는 자동으로 객체를 SQL 유형에 다시 매핑하여 데이터 소스에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="59b930f7ddff7332085ec26d6fac4974e8e12b10" translate="yes" xml:space="preserve">
          <source>When this code runs,</source>
          <target state="translated">이 코드가 실행되면</target>
        </trans-unit>
        <trans-unit id="cbcf2b7b42302b4ba4fae27e923d6a973f224d28" translate="yes" xml:space="preserve">
          <source>When this fails, the resolution will be retried with the specified prefix deleted from the implementation name, yielding the correct resolution:</source>
          <target state="translated">이것이 실패하면, 지정된 접두사가 구현 이름에서 삭제 된 상태에서 해결이 재 시도되어 올바른 해결이 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="ff9da4b4449f564bcf08ecf5f687a2592cebde98" translate="yes" xml:space="preserve">
          <source>When this fails, the resolution will be retried with the specified prefix prepended to the method name, yielding the correct resolution:</source>
          <target state="translated">이것이 실패하면, 지정된 접두어가 메소드 이름 앞에 추가되어 해상도가 재 시도되어 올바른 해상도가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="75154f3aadedea422fd3c7633a9889ca79a529a3" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;#NANO_OF_DAY&quot;&gt;&lt;code&gt;NANO_OF_DAY&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000,000.</source>
          <target state="translated">이 필드를 값 설정에 사용 하는 경우 값에 1,000,000을 곱한 &lt;a href=&quot;#NANO_OF_DAY&quot;&gt; &lt;code&gt;NANO_OF_DAY&lt;/code&gt; &lt;/a&gt; 설정과 동일한 방식으로 동작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="15ccb1c283c4e094f90353b08299e4e2a2ecb732" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;#NANO_OF_DAY&quot;&gt;&lt;code&gt;NANO_OF_DAY&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000.</source>
          <target state="translated">이 필드를 값 설정에 사용하는 경우 &lt;a href=&quot;#NANO_OF_DAY&quot;&gt; &lt;code&gt;NANO_OF_DAY&lt;/code&gt; &lt;/a&gt; 를 1,000을 곱한 값 으로 설정하는 것과 동일한 방식으로 동작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="53f8544461b05bbe464ff7823a230bfc4bf04760" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;#NANO_OF_SECOND&quot;&gt;&lt;code&gt;NANO_OF_SECOND&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000,000.</source>
          <target state="translated">이 필드를 값 설정에 사용하는 경우 &lt;a href=&quot;#NANO_OF_SECOND&quot;&gt; &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; &lt;/a&gt; 를 1,000,000을 곱한 값 으로 설정하는 것과 동일한 방식으로 동작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f8f0fa54e907e8e2466eda8f3397fead3f7ec0b2" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;#NANO_OF_SECOND&quot;&gt;&lt;code&gt;NANO_OF_SECOND&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000.</source>
          <target state="translated">이 필드를 값 설정에 사용하는 경우 &lt;a href=&quot;#NANO_OF_SECOND&quot;&gt; &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; &lt;/a&gt; 를 1,000을 곱한 값 으로 설정하는 것과 동일한 방식으로 동작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="eaab9ca0b04a7049f2a9f2eca0230f3f4e33a263" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;chronofield#NANO_OF_DAY&quot;&gt;&lt;code&gt;NANO_OF_DAY&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000,000.</source>
          <target state="translated">이 필드를 사용하여 값을 설정하는 경우 1,000,000을 곱한 값으로 &lt;a href=&quot;chronofield#NANO_OF_DAY&quot;&gt; &lt;code&gt;NANO_OF_DAY&lt;/code&gt; &lt;/a&gt; 를 설정하는 것과 같은 방식으로 작동해야합니다 .</target>
        </trans-unit>
        <trans-unit id="db9acfde62bdc912d95eb549ddc180babc48a672" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;chronofield#NANO_OF_DAY&quot;&gt;&lt;code&gt;NANO_OF_DAY&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000.</source>
          <target state="translated">이 필드를 사용하여 값을 설정하면 값 에 1,000을 곱한 &lt;a href=&quot;chronofield#NANO_OF_DAY&quot;&gt; &lt;code&gt;NANO_OF_DAY&lt;/code&gt; &lt;/a&gt; 설정과 같은 방식으로 작동해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b434d16d4beadd3f769e9c367e4be1fa9657e587" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;chronofield#NANO_OF_SECOND&quot;&gt;&lt;code&gt;NANO_OF_SECOND&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000,000.</source>
          <target state="translated">이 필드를 사용하여 값을 설정하면 1,000,000을 곱한 값으로 &lt;a href=&quot;chronofield#NANO_OF_SECOND&quot;&gt; &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; &lt;/a&gt; 를 설정하는 것과 같은 방식으로 작동해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4dce2d6953f5a46462f20dc8f01aaa03fa0ee37c" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should behave in the same way as setting &lt;a href=&quot;chronofield#NANO_OF_SECOND&quot;&gt;&lt;code&gt;NANO_OF_SECOND&lt;/code&gt;&lt;/a&gt; with the value multiplied by 1,000.</source>
          <target state="translated">이 필드를 사용하여 값을 설정하면 값 에 1,000을 곱한 &lt;a href=&quot;chronofield#NANO_OF_SECOND&quot;&gt; &lt;code&gt;NANO_OF_SECOND&lt;/code&gt; &lt;/a&gt; 설정과 같은 방식으로 동작해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7f48a54b9eb38bdd2ccfe0a591106ec4e77d4089" translate="yes" xml:space="preserve">
          <source>When this field is used for setting a value, it should set as much precision as the object stores, using integer division to remove excess precision. For example, if the &lt;code&gt;TemporalAccessor&lt;/code&gt; stores time to millisecond precision, then the nano-of-second must be divided by 1,000,000 before replacing the milli-of-second.</source>
          <target state="translated">이 필드를 사용하여 값을 설정하는 경우 정수 나누기를 사용하여 초과 정밀도를 제거하여 오브젝트가 저장하는 정도의 정밀도를 설정해야합니다. 예를 들어, &lt;code&gt;TemporalAccessor&lt;/code&gt; 가 시간을 밀리 초 정밀도로 저장하는 경우, 밀리 초를 교체하기 전에 나노초를 1,000,000으로 나누어야합니다.</target>
        </trans-unit>
        <trans-unit id="fa1979bf73c3be15be38db625d744988147dfdcd" translate="yes" xml:space="preserve">
          <source>When this flag is false, delegation will only be tried when the &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gsscontext#requestCredDeleg(boolean)&quot;&gt;&lt;code&gt;credentials delegation flag&lt;/code&gt;&lt;/a&gt; is true.</source>
          <target state="translated">이 플래그가 거짓이면 &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gsscontext#requestCredDeleg(boolean)&quot;&gt; &lt;code&gt;credentials delegation flag&lt;/code&gt; &lt;/a&gt; 가 참일 때만 위임이 시도됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2e89c6cff8f954a3f0ea54f5e7b16399bcbf000" translate="yes" xml:space="preserve">
          <source>When this flag is specified then case-insensitive matching, when enabled by the &lt;a href=&quot;#CASE_INSENSITIVE&quot;&gt;&lt;code&gt;CASE_INSENSITIVE&lt;/code&gt;&lt;/a&gt; flag, is done in a manner consistent with the Unicode Standard. By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.</source>
          <target state="translated">이 플래그가 지정되면 &lt;a href=&quot;#CASE_INSENSITIVE&quot;&gt; &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt; &lt;/a&gt; 플래그에 의해 활성화 될 때 대소 문자를 구분하지 않는 일치 가 유니 코드 표준과 일치하는 방식으로 수행됩니다. 기본적으로 대소 문자를 구분하지 않는 일치는 US-ASCII 문자 집합의 문자 만 일치한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="7586fee8208377dc85e8eeb7ce578740e81e481a" translate="yes" xml:space="preserve">
          <source>When this flag is specified then case-insensitive matching, when enabled by the &lt;a href=&quot;pattern#CASE_INSENSITIVE&quot;&gt;&lt;code&gt;CASE_INSENSITIVE&lt;/code&gt;&lt;/a&gt; flag, is done in a manner consistent with the Unicode Standard. By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.</source>
          <target state="translated">이 플래그가 지정되면 &lt;a href=&quot;pattern#CASE_INSENSITIVE&quot;&gt; &lt;code&gt;CASE_INSENSITIVE&lt;/code&gt; &lt;/a&gt; 플래그에 의해 사용 가능한 경우 대소 문자를 구분하지 않는 일치 가 유니 코드 표준과 일치하는 방식으로 수행됩니다. 기본적으로 대소 문자를 구분하지 않는 일치는 US-ASCII 문자 집합의 문자 만 일치한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="14b51aaf8931fe8814ff8bce6f0f7714b23eea9c" translate="yes" xml:space="preserve">
          <source>When this flag is specified then the (US-ASCII only)</source>
          <target state="translated">이 플래그가 지정되면 (US-ASCII에만 해당)</target>
        </trans-unit>
        <trans-unit id="a5a64aeef21bfe24b3dc25f14183010379e48ae2" translate="yes" xml:space="preserve">
          <source>When this flag is specified then the input string that specifies the pattern is treated as a sequence of literal characters. Metacharacters or escape sequences in the input sequence will be given no special meaning.</source>
          <target state="translated">이 플래그가 지정되면 패턴을 지정하는 입력 문자열이 일련의 리터럴 문자로 처리됩니다. 입력 시퀀스의 메타 문자 또는 이스케이프 시퀀스에는 특별한 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="21f1033522929794d630209592d380a1564d3a0e" translate="yes" xml:space="preserve">
          <source>When this flag is specified then two characters will be considered to match if, and only if, their full canonical decompositions match. The expression &lt;code&gt;&quot;a\u030A&quot;&lt;/code&gt;, for example, will match the string &lt;code&gt;&quot;\u00E5&quot;&lt;/code&gt; when this flag is specified. By default, matching does not take canonical equivalence into account.</source>
          <target state="translated">이 플래그가 지정되면 전체 정식 분해가 일치하는 경우에만 두 문자가 일치하는 것으로 간주됩니다. 예를 들어, &lt;code&gt;&quot;a\u030A&quot;&lt;/code&gt; 표현식 은이 플래그가 지정 될 때 문자열 &lt;code&gt;&quot;\u00E5&quot;&lt;/code&gt; 와 일치 합니다. 기본적으로 일치는 정식 동등성을 고려하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3ee555d7b34f75912704f0605b8959fada5a0e2b" translate="yes" xml:space="preserve">
          <source>When this flag is true but the &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gsscontext#requestCredDeleg(boolean)&quot;&gt;&lt;code&gt;credentials delegation flag&lt;/code&gt;&lt;/a&gt; is false, delegation will be only tried if the delegation policy permits delegation.</source>
          <target state="translated">이 플래그가 true이지만 &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gsscontext#requestCredDeleg(boolean)&quot;&gt; &lt;code&gt;credentials delegation flag&lt;/code&gt; &lt;/a&gt; 가 false 인 경우 위임 정책이 위임을 허용하는 경우에만 위임이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="2eb07b710886c04bce981e5cfa33253d986b6149" translate="yes" xml:space="preserve">
          <source>When this method is called from a named module and the given loader is the class loader of the caller module, this is equivalent to calling:</source>
          <target state="translated">이 메서드가 명명 된 모듈에서 호출되고 지정된 로더가 호출자 모듈의 클래스 로더 인 경우 이는 다음을 호출하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="97ec7609c528b9efd3de6f2bb7f5796b603e2fd8" translate="yes" xml:space="preserve">
          <source>When this method is called on a window with a value of &lt;code&gt;false&lt;/code&gt; the always-on-top state is set to normal. It may also cause an unspecified, platform-dependent change in the z-order of top-level windows, but other always-on-top windows will remain in top-most position. Calling this method with a value of &lt;code&gt;false&lt;/code&gt; on a window that has a normal state has no effect.</source>
          <target state="translated">이 메서드가 값이 &lt;code&gt;false&lt;/code&gt; 인 창에서 호출 되면 항상 맨 위 상태가 정상으로 설정됩니다. 또한 최상위 창의 z 순서에서 지정되지 않은 플랫폼에 따라 변경 될 수 있지만 다른 항상 위에있는 창은 최상위 위치에 유지됩니다. 정상 상태 인 창 에서 &lt;code&gt;false&lt;/code&gt; 값으로이 메서드를 호출해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="35fc6a39f3e8a32dd792f6a29a5416db989863ad" translate="yes" xml:space="preserve">
          <source>When this method is called on a window with a value of &lt;code&gt;true&lt;/code&gt;, and the window is visible and the platform supports always-on-top for this window, the window is immediately brought forward, &quot;sticking&quot; it in the top-most position. If the window isn`t currently visible, this method sets the always-on-top state to &lt;code&gt;true&lt;/code&gt; but does not bring the window forward. When the window is later shown, it will be always-on-top.</source>
          <target state="translated">이 메서드가 &lt;code&gt;true&lt;/code&gt; 값을 가진 창에서 호출되고 창이 표시되고 플랫폼이이 창에 대해 항상 맨 위를 지원하면 창은 즉시 앞으로 가져 와서 맨 위에 &quot;고정&quot;됩니다. 창이 현재 표시 되지 않는 경우이 메서드는 항상 맨 위 상태를 &lt;code&gt;true&lt;/code&gt; 로 설정 하지만 창을 앞으로 가져 오지 않습니다. 나중에 창이 표시되면 항상 맨 위에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="34681f8822dac6f93802ce310f175da3ecf86017" translate="yes" xml:space="preserve">
          <source>When this method is called, a &lt;code&gt;CachedRowSet&lt;/code&gt; implementation must ensure that all updates, inserts, and deletes to the current rowset instance are replaced by the previous values. In addition, the cursor should be reset to the first row and a &lt;code&gt;rowSetChanged&lt;/code&gt; event should be fired to notify all registered listeners.</source>
          <target state="translated">이 메서드가 호출 될 때 &lt;code&gt;CachedRowSet&lt;/code&gt; 구현은 현재 행 집합 인스턴스에 대한 모든 업데이트, 삽입 및 삭제가 이전 값으로 바뀌는 지 확인해야합니다. 또한 커서를 첫 번째 행으로 재설정하고 등록 된 모든 리스너에게 알리기 위해 &lt;code&gt;rowSetChanged&lt;/code&gt; 이벤트를 발생시켜야합니다.</target>
        </trans-unit>
        <trans-unit id="c46ec6437cd48feaac1a48bb7981ed49d818cc15" translate="yes" xml:space="preserve">
          <source>When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression</source>
          <target state="translated">이 메소드를 처음 호출하면 마치 표현식에서와 같이 단일 의사 난수 생성기를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="8017fa479dbb420d64cc0450b94e2122cd6d705f" translate="yes" xml:space="preserve">
          <source>When this method is observed via the Core Reflection API, it will appear as a single native method, taking an object array and returning an object. If this native method is invoked directly via &lt;a href=&quot;../reflect/method#invoke(java.lang.Object,java.lang.Object...)&quot;&gt;&lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt;&lt;/a&gt;, via JNI, or indirectly via &lt;a href=&quot;methodhandles.lookup#unreflect(java.lang.reflect.Method)&quot;&gt;&lt;code&gt;Lookup.unreflect&lt;/code&gt;&lt;/a&gt;, it will throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">이 메서드가 Core Reflection API를 통해 관찰되면 단일 네이티브 메서드로 표시되어 개체 배열을 가져와 개체를 반환합니다. 이 네이티브 메서드가 &lt;a href=&quot;../reflect/method#invoke(java.lang.Object,java.lang.Object...)&quot;&gt; &lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt; &lt;/a&gt; 를 통해 직접 , JNI를 통해 또는 &lt;a href=&quot;methodhandles.lookup#unreflect(java.lang.reflect.Method)&quot;&gt; &lt;code&gt;Lookup.unreflect&lt;/code&gt; &lt;/a&gt; 를 통해 간접적으로 호출 되면 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 을 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="52757c7befe8d92c9dd6861f446c19ec7ae3c908" translate="yes" xml:space="preserve">
          <source>When this method is observed via the Core Reflection API, it will appear as a single native method, taking an object array and returning an object. If this native method is invoked directly via &lt;a href=&quot;../reflect/method#invoke-java.lang.Object-java.lang.Object...-&quot;&gt;&lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt;&lt;/a&gt;, via JNI, or indirectly via &lt;a href=&quot;methodhandles.lookup#unreflect-java.lang.reflect.Method-&quot;&gt;&lt;code&gt;Lookup.unreflect&lt;/code&gt;&lt;/a&gt;, it will throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">이 메소드가 Core Reflection API를 통해 관찰되면 단일 네이티브 메소드로 표시되어 객체 배열을 가져와 객체를 반환합니다. 이 원시 메소드가 &lt;a href=&quot;../reflect/method#invoke-java.lang.Object-java.lang.Object...-&quot;&gt; &lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt; &lt;/a&gt; 를 통해 직접 , JNI를 통해 또는 &lt;a href=&quot;methodhandles.lookup#unreflect-java.lang.reflect.Method-&quot;&gt; &lt;code&gt;Lookup.unreflect&lt;/code&gt; &lt;/a&gt; 를 통해 간접적으로 호출 되면 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; 이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="a38dc9de2e7e26b0458b9e11ee50544cbc7608fa" translate="yes" xml:space="preserve">
          <source>When this method returns both the input and the output will have been closed. Any pending send operations will fail with &lt;code&gt;IOException&lt;/code&gt;. Subsequent invocations of &lt;code&gt;abort&lt;/code&gt; will have no effect.</source>
          <target state="translated">이 메서드가 입력과 출력을 모두 반환하면 닫힙니다. 보류중인 모든 전송 작업은 &lt;code&gt;IOException&lt;/code&gt; 과 함께 실패 합니다. 이후의 &lt;code&gt;abort&lt;/code&gt; 호출은 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3ee3ff5f0b0cb85ef35aeb00902b551ab3ba4149" translate="yes" xml:space="preserve">
          <source>When this method returns true, then it is possible that more input would have changed the result of the last search.</source>
          <target state="translated">이 메소드가 true를 리턴하면 더 많은 입력이 마지막 검색 결과를 변경했을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6509e5735d2c1c6ef7c6f2ecc98960052393fc92" translate="yes" xml:space="preserve">
          <source>When this object is passed to a &lt;code&gt;SecureRandom.getInstance()&lt;/code&gt; call, it is the requested minimum capability. When it's returned from &lt;code&gt;SecureRandom.getParameters()&lt;/code&gt;, it is the effective capability.</source>
          <target state="translated">이 객체가 &lt;code&gt;SecureRandom.getInstance()&lt;/code&gt; 호출에 전달 되면 요청 된 최소 기능입니다. &lt;code&gt;SecureRandom.getParameters()&lt;/code&gt; 에서 반환되면 효과적인 기능입니다.</target>
        </trans-unit>
        <trans-unit id="1b6f8486c17688cf0a3d019c7be76ba42109c755" translate="yes" xml:space="preserve">
          <source>When this option is present then the implementation makes a &lt;em&gt;best effort&lt;/em&gt; attempt to delete the file when closed by the &lt;a href=&quot;../channels/channel#close()&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;close&lt;/code&gt; method is not invoked then a &lt;em&gt;best effort&lt;/em&gt; attempt is made to delete the file when the Java virtual machine terminates.</source>
          <target state="translated">이 옵션이 있으면 구현은 &lt;a href=&quot;../channels/channel#close()&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드로 닫을 때 파일을 삭제하려고 &lt;em&gt;최선을 다합니다&lt;/em&gt; . 경우 &lt;code&gt;close&lt;/code&gt; 방법은 다음 호출되지 않는 &lt;em&gt;최선의 노력을&lt;/em&gt; 시도 할 때 Java 가상 머신의 종료 파일을 삭제한다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c3d23117d12579aaf94e4afd1d23df8d2a8c9c22" translate="yes" xml:space="preserve">
          <source>When this option is present then the implementation makes a &lt;em&gt;best effort&lt;/em&gt; attempt to delete the file when closed by the &lt;a href=&quot;../channels/channel#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;close&lt;/code&gt; method is not invoked then a &lt;em&gt;best effort&lt;/em&gt; attempt is made to delete the file when the Java virtual machine terminates.</source>
          <target state="translated">이 옵션이 존재하면 구현은 &lt;a href=&quot;../channels/channel#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드로 닫을 때 파일을 삭제하려고 &lt;em&gt;최선을 다합니다&lt;/em&gt; . 경우 &lt;code&gt;close&lt;/code&gt; 방법은 다음 호출되지 않는 &lt;em&gt;최선의 노력을&lt;/em&gt; 시도 할 때 Java 가상 머신의 종료 파일을 삭제한다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="154a44d02d610434ad7eb55b13886c24f76c0303" translate="yes" xml:space="preserve">
          <source>When this option is present then the implementation makes a &lt;em&gt;best effort&lt;/em&gt; attempt to delete the file when closed by the &lt;a href=&quot;asynchronouschannel#close()&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;close&lt;/code&gt; method is not invoked then a &lt;em&gt;best effort&lt;/em&gt; attempt is made to delete the file when the Java virtual machine terminates.</source>
          <target state="translated">이 옵션이 있으면 구현은 &lt;a href=&quot;asynchronouschannel#close()&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드로 닫을 때 파일을 삭제하려고 &lt;em&gt;최선을 다합니다&lt;/em&gt; . 경우 &lt;code&gt;close&lt;/code&gt; 방법은 다음 호출되지 않는 &lt;em&gt;최선의 노력을&lt;/em&gt; 시도 할 때 Java 가상 머신의 종료 파일을 삭제한다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f56b2fb23d344e1a50af4c3e2e123c61d288eb20" translate="yes" xml:space="preserve">
          <source>When this option is present then the implementation makes a &lt;em&gt;best effort&lt;/em&gt; attempt to delete the file when closed by the &lt;a href=&quot;spi/abstractinterruptiblechannel#close()&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;close&lt;/code&gt; method is not invoked then a &lt;em&gt;best effort&lt;/em&gt; attempt is made to delete the file when the Java virtual machine terminates.</source>
          <target state="translated">이 옵션이 있으면 구현은 &lt;a href=&quot;spi/abstractinterruptiblechannel#close()&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드로 닫을 때 파일을 삭제하려고 &lt;em&gt;최선을 다합니다&lt;/em&gt; . 경우 &lt;code&gt;close&lt;/code&gt; 방법은 다음 호출되지 않는 &lt;em&gt;최선의 노력을&lt;/em&gt; 시도 할 때 Java 가상 머신의 종료 파일을 삭제한다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b452042a8719f181a9d60ae51034b9bcd166e197" translate="yes" xml:space="preserve">
          <source>When this option is present then the implementation makes a &lt;em&gt;best effort&lt;/em&gt; attempt to delete the file when closed by the the &lt;a href=&quot;asynchronouschannel#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;close&lt;/code&gt; method is not invoked then a &lt;em&gt;best effort&lt;/em&gt; attempt is made to delete the file when the Java virtual machine terminates.</source>
          <target state="translated">이 옵션이 존재하면, 구현은 &lt;a href=&quot;asynchronouschannel#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드에 의해 닫힐 때 파일을 삭제하려고 &lt;em&gt;최선을 다합니다&lt;/em&gt; . 경우 &lt;code&gt;close&lt;/code&gt; 방법은 다음 호출되지 않는 &lt;em&gt;최선의 노력을&lt;/em&gt; 시도 할 때 Java 가상 머신의 종료 파일을 삭제한다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f88517540cae38f29035447f8bcd48cdb8f163b" translate="yes" xml:space="preserve">
          <source>When this option is present then the implementation makes a &lt;em&gt;best effort&lt;/em&gt; attempt to delete the file when closed by the the &lt;a href=&quot;spi/abstractinterruptiblechannel#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;close&lt;/code&gt; method is not invoked then a &lt;em&gt;best effort&lt;/em&gt; attempt is made to delete the file when the Java virtual machine terminates.</source>
          <target state="translated">이 옵션이 존재하면, 구현은 &lt;a href=&quot;spi/abstractinterruptiblechannel#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; 메소드에 의해 닫힐 때 파일을 삭제하려고 &lt;em&gt;최선을 다합니다&lt;/em&gt; . 경우 &lt;code&gt;close&lt;/code&gt; 방법은 다음 호출되지 않는 &lt;em&gt;최선의 노력을&lt;/em&gt; 시도 할 때 Java 가상 머신의 종료 파일을 삭제한다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a7cc18013b4812cde5f7d9912f2b87d319240ca6" translate="yes" xml:space="preserve">
          <source>When this property changes, a property change event with name &quot;dropLocation&quot; is fired by the component.</source>
          <target state="translated">이 속성이 변경되면 이름이 &quot;dropLocation&quot;인 속성 변경 이벤트가 구성 요소에 의해 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="038f87151a058e2199fb9c59c3147f43fabc5ee1" translate="yes" xml:space="preserve">
          <source>When this stage completes normally, the given function is invoked with this stage's result as the argument, returning another CompletionStage. When that stage completes normally, the CompletionStage returned by this method is completed with the same value.</source>
          <target state="translated">이 단계가 정상적으로 완료되면 주어진 함수가이 단계의 결과를 인수로 사용하여 호출되어 다른 CompletionStage를 반환합니다. 해당 단계가 정상적으로 완료되면이 메서드에서 반환 된 CompletionStage는 동일한 값으로 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="939cadcf27e2f0c5c29ad269b174f1448284da61" translate="yes" xml:space="preserve">
          <source>When this stage is complete, the given action is invoked with the result (or &lt;code&gt;null&lt;/code&gt; if none) and the exception (or &lt;code&gt;null&lt;/code&gt; if none) of this stage as arguments. The returned stage is completed when the action returns.</source>
          <target state="translated">이 단계가 완료되면 주어진 조치가 결과 (또는 &lt;code&gt;null&lt;/code&gt; 경우 null ) 및 이 단계 의 예외 (또는 &lt;code&gt;null&lt;/code&gt; 경우 null )를 인수로 사용하여 호출됩니다. 반환 된 단계는 작업이 반환되면 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="aaf41e965e28c5483c92f84aed2e73228dbc1a97" translate="yes" xml:space="preserve">
          <source>When this stage is complete, the given action is invoked with the result (or &lt;code&gt;null&lt;/code&gt; if none) and the exception (or &lt;code&gt;null&lt;/code&gt; if none) of this stage as arguments. The returned stage is completed when the action returns. If the supplied action itself encounters an exception, then the returned stage exceptionally completes with this exception unless this stage also completed exceptionally.</source>
          <target state="translated">이 단계가 완료되면 주어진 조치가 인수로이 단계 의 결과 (또는 &lt;code&gt;null&lt;/code&gt; 경우 널 ) 및 예외 ( &lt;code&gt;null&lt;/code&gt; 경우 널 )와 함께 호출됩니다 . 조치가 리턴되면 리턴 된 스테이지가 완료됩니다. 제공된 조치 자체에 예외가 발생하면이 단계도 예외적으로 완료되지 않으면 리턴 된 단계는 예외적으로 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="3f6f82cd6d0f4507ceec2cd68bde83c6bb558834" translate="yes" xml:space="preserve">
          <source>When this stage is complete, the given function is invoked with the result (or &lt;code&gt;null&lt;/code&gt; if none) and the exception (or &lt;code&gt;null&lt;/code&gt; if none) of this stage as arguments, and the function's result is used to complete the returned stage.</source>
          <target state="translated">이 단계가 완료되면 지정된 함수가이 단계의 결과 (또는 &lt;code&gt;null&lt;/code&gt; 경우 &lt;code&gt;null&lt;/code&gt; )와이 단계 의 예외 (또는 없는 경우 널 )를 인수로 호출하고 함수의 결과는 리턴 된 단계를 완료하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bac49680cb60a5ee049452f6e78185889fe92438" translate="yes" xml:space="preserve">
          <source>When this stream reaches end of stream, further invocations of this method will return an empty byte array.</source>
          <target state="translated">이 스트림이 스트림 끝에 도달하면이 메서드를 추가로 호출하면 빈 바이트 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="48eb95265e7d021d7c0bcfe7d5877c9bf2e00f35" translate="yes" xml:space="preserve">
          <source>When to implement</source>
          <target state="translated">구현시기</target>
        </trans-unit>
        <trans-unit id="b19e6fec33654d65225b5a683c7ddc3223d7ead2" translate="yes" xml:space="preserve">
          <source>When to use this interface</source>
          <target state="translated">이 인터페이스를 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="2987413b1ccabfe41476e5c2416ebf03f5549889" translate="yes" xml:space="preserve">
          <source>When traversing a graph, an object may be encountered that does not support the Serializable interface. In this case the NotSerializableException will be thrown and will identify the class of the non-serializable object.</source>
          <target state="translated">그래프를 순회 할 때 직렬화 가능 인터페이스를 지원하지 않는 오브젝트가 발생할 수 있습니다. 이 경우 NotSerializableException이 발생하고 직렬화 할 수없는 객체의 클래스를 식별합니다.</target>
        </trans-unit>
        <trans-unit id="2b9c24656f8fed2cf3b6f2a56f50610d27fc3e1a" translate="yes" xml:space="preserve">
          <source>When true, forbid user from resizing frame.</source>
          <target state="translated">true이면 사용자가 프레임 크기를 조정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9d9a1f383307d792fbf66d13ce7bf3c300a5369a" translate="yes" xml:space="preserve">
          <source>When true, forbid user from resizing frame. See the noresize attribute definition in HTML 4.0.</source>
          <target state="translated">true이면 사용자가 프레임 크기를 조정할 수 없습니다. HTML 4.0의 noresize 속성 정의를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="72491fa06ce4e80db58d269ec31cc9c29821a7b3" translate="yes" xml:space="preserve">
          <source>When two composite names are compared, the case of the characters is significant.</source>
          <target state="translated">두 개의 복합 이름을 비교할 때 문자의 대소 문자가 중요합니다.</target>
        </trans-unit>
        <trans-unit id="d39ea45a6268a67c061975b6eb4abdceccee5c88" translate="yes" xml:space="preserve">
          <source>When two or more interfaces of a proxy class contain a method with the same name and parameter signature, the order of the proxy class's interfaces becomes significant. When such a</source>
          <target state="translated">프록시 클래스의 둘 이상의 인터페이스에 동일한 이름 및 매개 변수 서명이있는 메소드가 포함되어 있으면 프록시 클래스의 인터페이스 순서가 중요해집니다. 그런 때</target>
        </trans-unit>
        <trans-unit id="824dd2ec1443a6d10bed31844958381a75362daa" translate="yes" xml:space="preserve">
          <source>When two or more proxy interfaces contain a method with the same name and parameter signature, the order of the proxy class's interfaces becomes significant. When such a</source>
          <target state="translated">두 개 이상의 프록시 인터페이스에 동일한 이름과 매개 변수 서명이있는 메서드가 포함되어 있으면 프록시 클래스의 인터페이스 순서가 중요해집니다. 그런 때</target>
        </trans-unit>
        <trans-unit id="f1f676950e16294bc9c468cad050677459c84e82" translate="yes" xml:space="preserve">
          <source>When two or more threads attempt to &lt;a href=&quot;#complete(T)&quot;&gt;&lt;code&gt;complete&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#completeExceptionally(java.lang.Throwable)&quot;&gt;&lt;code&gt;completeExceptionally&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#cancel(boolean)&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; a CompletableFuture, only one of them succeeds.</source>
          <target state="translated">두 개 이상의 스레드 가 CompletableFuture 를 &lt;a href=&quot;#complete(T)&quot;&gt; &lt;code&gt;complete&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#completeExceptionally(java.lang.Throwable)&quot;&gt; &lt;code&gt;completeExceptionally&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#cancel(boolean)&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt; 하려고 하면 그중 하나만 성공합니다.</target>
        </trans-unit>
        <trans-unit id="e2cbb5b6ffa96f013fd73efb6c2acd02f012d948" translate="yes" xml:space="preserve">
          <source>When two or more threads attempt to &lt;a href=&quot;completablefuture#complete-T-&quot;&gt;&lt;code&gt;complete&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;completablefuture#completeExceptionally-java.lang.Throwable-&quot;&gt;&lt;code&gt;completeExceptionally&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;completablefuture#cancel-boolean-&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; a CompletableFuture, only one of them succeeds.</source>
          <target state="translated">둘 이상의 스레드 가 CompletableFuture 를 &lt;a href=&quot;completablefuture#complete-T-&quot;&gt; &lt;code&gt;complete&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;completablefuture#completeExceptionally-java.lang.Throwable-&quot;&gt; &lt;code&gt;completeExceptionally&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;completablefuture#cancel-boolean-&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt; 하려고 시도 하면 그 중 하나만 성공합니다.</target>
        </trans-unit>
        <trans-unit id="58e55e5b4a52749f3a8f688b451a56c8f51e84a5" translate="yes" xml:space="preserve">
          <source>When used in &lt;a href=&quot;securerandom#getInstance(java.lang.String,java.security.SecureRandomParameters)&quot;&gt;&lt;code&gt;SecureRandom.getInstance(String, SecureRandomParameters)&lt;/code&gt;&lt;/a&gt; or one of the other similar &lt;code&gt;getInstance&lt;/code&gt; calls that take a &lt;code&gt;SecureRandomParameters&lt;/code&gt; parameter, it means the requested instantiate parameters the newly created &lt;code&gt;SecureRandom&lt;/code&gt; object must minimally support. When used as the return value of the &lt;a href=&quot;securerandom#getParameters()&quot;&gt;&lt;code&gt;SecureRandom.getParameters()&lt;/code&gt;&lt;/a&gt; method, it means the effective instantiate parameters of the &lt;code&gt;SecureRandom&lt;/code&gt; object.</source>
          <target state="translated">사용할 경우 &lt;a href=&quot;securerandom#getInstance(java.lang.String,java.security.SecureRandomParameters)&quot;&gt; &lt;code&gt;SecureRandom.getInstance(String, SecureRandomParameters)&lt;/code&gt; &lt;/a&gt; 또는 다른 유사한 하나 &lt;code&gt;getInstance&lt;/code&gt; 테이크 호출 &lt;code&gt;SecureRandomParameters&lt;/code&gt; 의 매개 변수를, 그것은 새로 만든 인스턴스화 매개 변수 요청 의미 &lt;code&gt;SecureRandom&lt;/code&gt; 객체가 최소한 지원해야합니다. &lt;a href=&quot;securerandom#getParameters()&quot;&gt; &lt;code&gt;SecureRandom.getParameters()&lt;/code&gt; &lt;/a&gt; 메서드 의 반환 값으로 사용되는 경우 &lt;code&gt;SecureRandom&lt;/code&gt; 개체 의 효과적인 인스턴스화 매개 변수를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="43ffb4ecf968163232f09f73384f19b3a01bf3e9" translate="yes" xml:space="preserve">
          <source>When used in conjunction with the &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;, the above class produces the following output for various format strings.</source>
          <target state="translated">&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; 와 함께 사용 하면 위의 클래스는 다양한 형식 문자열에 대해 다음 출력을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7e3a4f8ce8f2ce779cc7d5b71b65b0b477e564ce" translate="yes" xml:space="preserve">
          <source>When used in conjunction with the &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;, the above class produces the following output for various format strings. &lt;code&gt;Formatter fmt = new Formatter();
   StockName sn = new StockName(&quot;HUGE&quot;, &quot;Huge Fruit, Inc.&quot;,
                                &quot;Fruit Titanesque, Inc.&quot;);
   fmt.format(&quot;%s&quot;, sn);                   //   -&amp;gt; &quot;Huge Fruit, Inc.&quot;
   fmt.format(&quot;%s&quot;, sn.toString());        //   -&amp;gt; &quot;HUGE - Huge Fruit, Inc.&quot;
   fmt.format(&quot;%#s&quot;, sn);                  //   -&amp;gt; &quot;HUGE&quot;
   fmt.format(&quot;%-10.8s&quot;, sn);              //   -&amp;gt; &quot;HUGE      &quot;
   fmt.format(&quot;%.12s&quot;, sn);                //   -&amp;gt; &quot;Huge Fruit,*&quot;
   fmt.format(Locale.FRANCE, &quot;%25s&quot;, sn);  //   -&amp;gt; &quot;   Fruit Titanesque, Inc.&quot;
 &lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt; 와 함께 사용 하면 위 클래스는 다양한 형식 문자열에 대해 다음과 같은 출력을 생성합니다. &lt;code&gt;Formatter fmt = new Formatter(); StockName sn = new StockName(&quot;HUGE&quot;, &quot;Huge Fruit, Inc.&quot;, &quot;Fruit Titanesque, Inc.&quot;); fmt.format(&quot;%s&quot;, sn); // -&amp;gt; &quot;Huge Fruit, Inc.&quot; fmt.format(&quot;%s&quot;, sn.toString()); // -&amp;gt; &quot;HUGE - Huge Fruit, Inc.&quot; fmt.format(&quot;%#s&quot;, sn); // -&amp;gt; &quot;HUGE&quot; fmt.format(&quot;%-10.8s&quot;, sn); // -&amp;gt; &quot;HUGE &quot; fmt.format(&quot;%.12s&quot;, sn); // -&amp;gt; &quot;Huge Fruit,*&quot; fmt.format(Locale.FRANCE, &quot;%25s&quot;, sn); // -&amp;gt; &quot; Fruit Titanesque, Inc.&quot; &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35a55ec2987f39f2327b6b1dee7f6dda3600a7d1" translate="yes" xml:space="preserve">
          <source>When used in the context of annotation processing, an accurate model of the element being represented must be returned. As this is a language model, the source code provides the fiducial (reference) representation of the construct in question rather than a representation in an executable output like a class file. Executable output may serve as the basis for creating a modeling element. However, the process of translating source code to executable output may not permit recovering some aspects of the source code representation. For example, annotations with &lt;a href=&quot;../../../../../java.base/java/lang/annotation/retentionpolicy#SOURCE&quot;&gt;source&lt;/a&gt;&lt;a href=&quot;../../../../../java.base/java/lang/annotation/retention&quot;&gt;retention&lt;/a&gt; cannot be recovered from class files and class files might not be able to provide source position information. Names of parameters may not be recoverable from class files. The &lt;a href=&quot;modifier&quot;&gt;modifiers&lt;/a&gt; on an element created from a class file may differ in some cases from an element for the same declaration created from a source file including:</source>
          <target state="translated">주석 처리의 맥락에서 사용되는 경우 표현되는 요소의 정확한 모델이 반환되어야합니다. 이것은 언어 모델이기 때문에 소스 코드는 클래스 파일과 같은 실행 가능한 출력의 표현이 아닌 문제의 구조에 대한 기준 (참조) 표현을 제공합니다. 실행 가능한 출력은 모델링 요소를 생성하기위한 기반이 될 수 있습니다. 그러나 소스 코드를 실행 가능한 출력으로 변환하는 프로세스는 소스 코드 표현의 일부 측면을 복구하는 것을 허용하지 않을 수 있습니다. 예를 들어, &lt;a href=&quot;../../../../../java.base/java/lang/annotation/retentionpolicy#SOURCE&quot;&gt;소스 &lt;/a&gt;&lt;a href=&quot;../../../../../java.base/java/lang/annotation/retention&quot;&gt;보존이&lt;/a&gt; 있는 어노테이션 은 클래스 파일에서 복구 할 수 없으며 클래스 파일은 소스 위치 정보를 제공하지 못할 수 있습니다. 매개 변수 이름은 클래스 파일에서 복구 할 수 없습니다. &lt;a href=&quot;modifier&quot;&gt;수정&lt;/a&gt; 클래스 파일에서 생성 된 요소는 경우에 따라 다음을 포함하여 소스 파일에서 생성 된 동일한 선언에 대한 요소와 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ece0b7fb1ed791cbe7da72a2d53b96e1e02fbd42" translate="yes" xml:space="preserve">
          <source>When used in the context of annotation processing, an accurate model of the element being represented must be returned. As this is a language model, the source code provides the fiducial (reference) representation of the construct in question rather than a representation in an executable output like a class file. Executable output may serve as the basis for creating a modeling element. However, the process of translating source code to executable output may not permit recovering some aspects of the source code representation. For example, annotations with &lt;a href=&quot;../../../../java/lang/annotation/retentionpolicy#SOURCE&quot;&gt;source&lt;/a&gt;&lt;a href=&quot;../../../../java/lang/annotation/retention&quot;&gt;retention&lt;/a&gt; cannot be recovered from class files and class files might not be able to provide source position information. Names of parameters may not be recoverable from class files. The &lt;a href=&quot;modifier&quot;&gt;modifiers&lt;/a&gt; on an element may differ in some cases including:</source>
          <target state="translated">주석 처리의 맥락에서 사용될 때, 표현되는 요소의 정확한 모델이 반환되어야합니다. 이것이 언어 모델이기 때문에 소스 코드는 클래스 파일과 같은 실행 가능한 출력의 표현이 아니라 해당 구문의 기준 (기준) 표현을 제공합니다. 실행 가능한 출력은 모델링 요소를 생성하기위한 기초로 사용될 수 있습니다. 그러나 소스 코드를 실행 가능한 출력으로 변환하는 프로세스는 소스 코드 표현의 일부 측면을 복구하지 못할 수 있습니다. 예를 들어, &lt;a href=&quot;../../../../java/lang/annotation/retentionpolicy#SOURCE&quot;&gt;소스 &lt;/a&gt;&lt;a href=&quot;../../../../java/lang/annotation/retention&quot;&gt;보유가&lt;/a&gt; 있는 주석은 클래스 파일에서 복구 할 수 없으며 클래스 파일이 소스 위치 정보를 제공하지 못할 수 있습니다. 클래스 파일에서 매개 변수 이름을 복구 할 수 없습니다. &lt;a href=&quot;modifier&quot;&gt;수정&lt;/a&gt; 요소에 따라 다음과 같은 경우가 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ecb08ff72bf2beff0f22f91d00d7f8a358093b0" translate="yes" xml:space="preserve">
          <source>When used with other calendar systems it must correspond to an integral number of days and is normally an integral number of years.</source>
          <target state="translated">다른 달력 시스템과 함께 사용하는 경우 정수일에 해당해야하며 일반적으로 정수 년입니다.</target>
        </trans-unit>
        <trans-unit id="f21fcfe8b96da09eeaeaa464fe8fd54f0f415d2c" translate="yes" xml:space="preserve">
          <source>When used with other calendar systems it must correspond to an integral number of days or months roughly equal to a year defined by the passage of the Earth around the Sun.</source>
          <target state="translated">다른 달력 시스템과 함께 사용하는 경우 태양 주위의 지구 통과에 의해 정의 된 연도와 대략 같은 일수 또는 월수에 해당해야합니다.</target>
        </trans-unit>
        <trans-unit id="a27413589719b5a8253a0b8d9af0f9739bd28a5f" translate="yes" xml:space="preserve">
          <source>When used with other calendar systems it must correspond to an integral number of days.</source>
          <target state="translated">다른 달력 시스템과 함께 사용하는 경우 정수일에 해당해야합니다.</target>
        </trans-unit>
        <trans-unit id="9efada4e2737579f4bfde83c300d21f0a7943686" translate="yes" xml:space="preserve">
          <source>When used with other calendar systems it must correspond to the day defined by the rising and setting of the Sun on Earth. It is not required that days begin at midnight - when converting between calendar systems, the date should be equivalent at midday.</source>
          <target state="translated">다른 달력 시스템과 함께 사용하는 경우 지구상의 태양의 상승 및 설정에 의해 정의 된 날짜와 일치해야합니다. 달력 시스템간에 변환 할 때 날짜는 자정에 시작하지 않아도됩니다. 날짜는 정오와 동일해야합니다.</target>
        </trans-unit>
        <trans-unit id="62385eeb0c56551d6fa61230b23e3cea9e372c16" translate="yes" xml:space="preserve">
          <source>When used with other calendar systems there are no restrictions on the unit.</source>
          <target state="translated">다른 달력 시스템과 함께 사용하면 장치에 제한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="62abbe6041a1324368c7391f51baabfb09713986" translate="yes" xml:space="preserve">
          <source>When used with the GSSContext interface's wrap and getMIC methods, an instance of this class is used to indicate the desired Quality-of-Protection (QOP) and to request if confidentiality services are to be applied to caller supplied data (wrap only). To request default QOP, the value of 0 should be used for QOP.</source>
          <target state="translated">GSSContext 인터페이스의 wrap 및 getMIC 메소드와 함께 사용될 때,이 클래스의 인스턴스는 원하는 QOP (Quality-of-Protection)를 표시하고 기밀성 서비스가 호출자 제공 데이터에 적용 될지 여부를 요청하는 데 사용됩니다 (랩만 해당). 기본 QOP를 요청하려면 QOP에 0 값을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="313c2c16bb6b15d1f21bba9cb9b9b5bc5566a742" translate="yes" xml:space="preserve">
          <source>When used with the unwrap and verifyMIC methods of the GSSContext interface, an instance of this class will be used to indicate the applied QOP and confidentiality services over the supplied message. In the case of verifyMIC, the confidentiality state will always be &lt;code&gt;false&lt;/code&gt;. Upon return from these methods, this object will also contain any supplementary status values applicable to the processed token. The supplementary status values can indicate old tokens, out of sequence tokens, gap tokens or duplicate tokens.</source>
          <target state="translated">GSSContext 인터페이스의 unwrap 및 verifyMIC 메서드와 함께 사용되는 경우이 클래스의 인스턴스는 제공된 메시지를 통해 적용된 QOP 및 기밀성 서비스를 나타내는 데 사용됩니다. verifyMIC의 경우 기밀성 상태는 항상 &lt;code&gt;false&lt;/code&gt; 입니다. 이러한 메서드에서 반환되면이 개체에는 처리 된 토큰에 적용 할 수있는 추가 상태 값도 포함됩니다. 보충 상태 값은 오래된 토큰, 순서를 벗어난 토큰, 갭 토큰 또는 중복 토큰을 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e6a51ecf8fcb17dbda43fef7e1c274e8aff30af" translate="yes" xml:space="preserve">
          <source>When used, this method changes the parsing to be lenient from this point onwards. The change will remain in force until the end of the formatter that is eventually constructed or until &lt;code&gt;parseStrict&lt;/code&gt; is called.</source>
          <target state="translated">이 방법을 사용하면이 시점부터 구문 분석이 관 대해집니다. 변경은 결국 생성 된 포맷터가 끝날 때까지 또는 &lt;code&gt;parseStrict&lt;/code&gt; 가 호출 될 때까지 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="ff556f1f879598b7bb76a699a0aec5ddb4224db2" translate="yes" xml:space="preserve">
          <source>When used, this method changes the parsing to be strict from this point onwards. As strict is the default, this is normally only needed after calling &lt;a href=&quot;#parseLenient()&quot;&gt;&lt;code&gt;parseLenient()&lt;/code&gt;&lt;/a&gt;. The change will remain in force until the end of the formatter that is eventually constructed or until &lt;code&gt;parseLenient&lt;/code&gt; is called.</source>
          <target state="translated">이 메서드를 사용하면이 시점부터 구문 분석이 엄격하게 변경됩니다. 엄격이 기본값이므로 일반적으로 &lt;a href=&quot;#parseLenient()&quot;&gt; &lt;code&gt;parseLenient()&lt;/code&gt; &lt;/a&gt; 호출 한 후에 만 ​​필요합니다 . 최종적으로 구성되는 포맷터가 끝날 때까지 또는 &lt;code&gt;parseLenient&lt;/code&gt; 가 호출 될 때까지 변경 사항 이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="5af032fc78d26434042d41d26faa4d468835b7bf" translate="yes" xml:space="preserve">
          <source>When used, this method changes the parsing to be strict from this point onwards. As strict is the default, this is normally only needed after calling &lt;a href=&quot;datetimeformatterbuilder#parseLenient--&quot;&gt;&lt;code&gt;parseLenient()&lt;/code&gt;&lt;/a&gt;. The change will remain in force until the end of the formatter that is eventually constructed or until &lt;code&gt;parseLenient&lt;/code&gt; is called.</source>
          <target state="translated">이 방법을 사용하면이 시점부터 구문 분석이 엄격하게 변경됩니다. 엄격이 기본값이므로 일반적으로 &lt;a href=&quot;datetimeformatterbuilder#parseLenient--&quot;&gt; &lt;code&gt;parseLenient()&lt;/code&gt; &lt;/a&gt; 호출 한 후에 만 ​​필요합니다 . 변경은 최종적으로 생성 된 포맷터가 끝날 때까지 또는 &lt;code&gt;parseLenient&lt;/code&gt; 가 호출 될 때까지 유효 합니다.</target>
        </trans-unit>
        <trans-unit id="3bea6a91a61ac47b8bd9736fff1365a319fd7ad0" translate="yes" xml:space="preserve">
          <source>When using a capacity-restricted deque, it is generally preferable to call &lt;a href=&quot;#offer(E)&quot;&gt;&lt;code&gt;offer&lt;/code&gt;&lt;/a&gt; separately on each element.</source>
          <target state="translated">용량이 제한된 deque를 사용하는 경우 일반적으로 각 요소에 대해 별도로 &lt;a href=&quot;#offer(E)&quot;&gt; &lt;code&gt;offer&lt;/code&gt; &lt;/a&gt; 를 호출 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="da316a4cc51c1899088ef95b5f213463772f58cf" translate="yes" xml:space="preserve">
          <source>When using a loader's &lt;a href=&quot;serviceloader#stream()&quot;&gt;&lt;code&gt;stream()&lt;/code&gt;&lt;/a&gt; method then the elements are of type &lt;code&gt;Provider&lt;/code&gt;. This allows processing to select or filter on the provider class without instantiating the provider.</source>
          <target state="translated">로더의 &lt;a href=&quot;serviceloader#stream()&quot;&gt; &lt;code&gt;stream()&lt;/code&gt; &lt;/a&gt; 메소드를 사용할 때 요소는 &lt;code&gt;Provider&lt;/code&gt; 유형 입니다. 이를 통해 처리는 공급자를 인스턴스화하지 않고도 공급자 클래스를 선택하거나 필터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31ca175d1f09c132ed4a2c9c0157e1e350eb6ede" translate="yes" xml:space="preserve">
          <source>When using the IIOP transport, the client and server can specify what ORB to use with the attribute &lt;code&gt;java.naming.corba.orb&lt;/code&gt;. Connection to the ORB happens at &lt;a href=&quot;rmiconnectorserver#start--&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; time for the connector server, and at &lt;a href=&quot;rmiconnector#connect-java.util.Map-&quot;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt; time for the connector client. If the &lt;code&gt;java.naming.corba.orb&lt;/code&gt; attribute is contained in the environment Map, then its value (an &lt;a href=&quot;/openjdk~8_web/org/omg/corba/orb&quot;&gt;&lt;code&gt;ORB&lt;/code&gt;&lt;/a&gt;), is used to connect the IIOP Stubs. Otherwise, a new org.omg.CORBA.ORB is created by calling &lt;a href=&quot;/openjdk~8_web/org/omg/corba/orb&quot;&gt;&lt;code&gt;org.omg.CORBA.ORB.init((String[])null,(Properties)null)&lt;/code&gt;&lt;/a&gt;. A later RMI connector client or server in the same JVM can reuse this ORB, or it can create another one in the same way.</source>
          <target state="translated">IIOP 전송을 사용할 때 클라이언트와 서버는 속성 &lt;code&gt;java.naming.corba.orb&lt;/code&gt; 와 함께 사용할 ORB를 지정할 수 있습니다 . ORB 에 대한 연결은 커넥터 서버의 &lt;a href=&quot;rmiconnectorserver#start--&quot;&gt; &lt;code&gt;start&lt;/code&gt; &lt;/a&gt; 시간과 커넥터 클라이언트의 &lt;a href=&quot;rmiconnector#connect-java.util.Map-&quot;&gt; &lt;code&gt;connect&lt;/code&gt; &lt;/a&gt; 시간에 발생합니다. 경우] &lt;code&gt;java.naming.corba.orb&lt;/code&gt; 를의 특성이 환경지도, 그 값 (AN에 포함 &lt;a href=&quot;/openjdk~8_web/org/omg/corba/orb&quot;&gt; &lt;code&gt;ORB&lt;/code&gt; &lt;/a&gt; )는 IIOP 스텁을 연결하는 데 사용된다. 그렇지 않으면 &lt;a href=&quot;/openjdk~8_web/org/omg/corba/orb&quot;&gt; &lt;code&gt;org.omg.CORBA.ORB.init((String[])null,(Properties)null)&lt;/code&gt; &lt;/a&gt; 을 호출하여 새 org.omg.CORBA.ORB가 작성됩니다 . 동일한 JVM의 이후 RMI 커넥터 클라이언트 또는 서버는이 ORB를 재사용하거나 동일한 방식으로 다른 ORB를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1094d843de7943a57b50e6ec3d12297784b464f6" translate="yes" xml:space="preserve">
          <source>When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing &quot;.ser&quot; suffix. We then try to load a serialized object from that resource.</source>
          <target state="translated">beanName을 직렬화 된 객체 이름으로 사용하는 경우 제공된 beanName을 자원 경로 이름으로 변환하고 후미 &quot;.ser&quot;접미사를 추가합니다. 그런 다음 해당 리소스에서 직렬화 된 개체를로드하려고합니다.</target>
        </trans-unit>
        <trans-unit id="a40a619f30648218521f9a9f35ae6461ea88f8ec" translate="yes" xml:space="preserve">
          <source>When using the default JRMP transport, RMI socket factories can be specified using the attributes &lt;code&gt;jmx.remote.rmi.client.socket.factory&lt;/code&gt; and &lt;code&gt;jmx.remote.rmi.server.socket.factory&lt;/code&gt; in the &lt;code&gt;environment&lt;/code&gt; given to the &lt;code&gt;RMIConnectorServer&lt;/code&gt; constructor. The values of these attributes must be of type &lt;a href=&quot;../../../../../java.rmi/java/rmi/server/rmiclientsocketfactory&quot;&gt;&lt;code&gt;RMIClientSocketFactory&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../../../java.rmi/java/rmi/server/rmiserversocketfactory&quot;&gt;&lt;code&gt;RMIServerSocketFactory&lt;/code&gt;&lt;/a&gt;, respectively. These factories are used when creating the RMI objects associated with the connector.</source>
          <target state="translated">기본 JRMP 전송을 사용하는 경우 &lt;code&gt;RMIConnectorServer&lt;/code&gt; 생성자에 지정된 &lt;code&gt;environment&lt;/code&gt; 에서 &lt;code&gt;jmx.remote.rmi.client.socket.factory&lt;/code&gt; 및 &lt;code&gt;jmx.remote.rmi.server.socket.factory&lt;/code&gt; 속성을 사용하여 RMI 소켓 팩토리를 지정할 수 있습니다 . 이러한 속성의 값은 각각 &lt;a href=&quot;../../../../../java.rmi/java/rmi/server/rmiclientsocketfactory&quot;&gt; &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../../../../java.rmi/java/rmi/server/rmiserversocketfactory&quot;&gt; &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; &lt;/a&gt; 유형이어야합니다 . 이러한 팩토리는 커넥터와 관련된 RMI 개체를 만들 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9b289c10690d3b720cf943c114f2a703d731c855" translate="yes" xml:space="preserve">
          <source>When using the default JRMP transport, RMI socket factories can be specified using the attributes &lt;code&gt;jmx.remote.rmi.client.socket.factory&lt;/code&gt; and &lt;code&gt;jmx.remote.rmi.server.socket.factory&lt;/code&gt; in the &lt;code&gt;environment&lt;/code&gt; given to the &lt;code&gt;RMIConnectorServer&lt;/code&gt; constructor. The values of these attributes must be of type &lt;a href=&quot;/openjdk~8_web/java/rmi/server/rmiclientsocketfactory&quot;&gt;&lt;code&gt;RMIClientSocketFactory&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/openjdk~8_web/java/rmi/server/rmiserversocketfactory&quot;&gt;&lt;code&gt;RMIServerSocketFactory&lt;/code&gt;&lt;/a&gt;, respectively. These factories are used when creating the RMI objects associated with the connector.</source>
          <target state="translated">기본 JRMP 전송을 사용하는 경우 &lt;code&gt;RMIConnectorServer&lt;/code&gt; 생성자에 지정된 &lt;code&gt;environment&lt;/code&gt; 에서 &lt;code&gt;jmx.remote.rmi.client.socket.factory&lt;/code&gt; 및 &lt;code&gt;jmx.remote.rmi.server.socket.factory&lt;/code&gt; 속성을 사용하여 RMI 소켓 팩토리를 지정할 수 있습니다 . 이러한 속성의 값은 각각 &lt;a href=&quot;/openjdk~8_web/java/rmi/server/rmiclientsocketfactory&quot;&gt; &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;/openjdk~8_web/java/rmi/server/rmiserversocketfactory&quot;&gt; &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; &lt;/a&gt; 유형이어야합니다 . 이 팩토리는 커넥터와 연관된 RMI 오브젝트를 작성할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5e657ee77256cf44030f873d13206c74a10610ec" translate="yes" xml:space="preserve">
          <source>When using the service loader's &lt;code&gt;iterator&lt;/code&gt;, the &lt;a href=&quot;iterator#hasNext()&quot;&gt;&lt;code&gt;hasNext&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;iterator#next()&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; methods will fail with &lt;a href=&quot;serviceconfigurationerror&quot;&gt;&lt;code&gt;ServiceConfigurationError&lt;/code&gt;&lt;/a&gt; if an error occurs locating, loading or instantiating a service provider. When processing the service loader's stream then &lt;code&gt;ServiceConfigurationError&lt;/code&gt; may be thrown by any method that causes a service provider to be located or loaded.</source>
          <target state="translated">서비스 로더의 &lt;code&gt;iterator&lt;/code&gt; 를 사용할 때 서비스 제공자를 찾거나로드하거나 인스턴스화하는 중에 오류가 발생 하면 &lt;a href=&quot;iterator#hasNext()&quot;&gt; &lt;code&gt;hasNext&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;iterator#next()&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt; 메소드가 &lt;a href=&quot;serviceconfigurationerror&quot;&gt; &lt;code&gt;ServiceConfigurationError&lt;/code&gt; &lt;/a&gt; 와 함께 실패 합니다. 서비스 로더의 스트림을 처리 할 때 서비스 공급자를 찾거나로드하는 모든 메서드에 의해 &lt;code&gt;ServiceConfigurationError&lt;/code&gt; 가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba566ef2656d9a242d602964e496b4d893948bab" translate="yes" xml:space="preserve">
          <source>When using this constructor, the Namespace URI is set to &lt;a href=&quot;../xmlconstants#NULL_NS_URI&quot;&gt;&lt;code&gt;XMLConstants.NULL_NS_URI&lt;/code&gt;&lt;/a&gt; and the prefix is set to &lt;a href=&quot;../xmlconstants#DEFAULT_NS_PREFIX&quot;&gt;&lt;code&gt;XMLConstants.DEFAULT_NS_PREFIX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 생성자를 사용할 때 네임 스페이스 URI는 &lt;a href=&quot;../xmlconstants#NULL_NS_URI&quot;&gt; &lt;code&gt;XMLConstants.NULL_NS_URI&lt;/code&gt; &lt;/a&gt; 로 설정되고 접두사는 &lt;a href=&quot;../xmlconstants#DEFAULT_NS_PREFIX&quot;&gt; &lt;code&gt;XMLConstants.DEFAULT_NS_PREFIX&lt;/code&gt; &lt;/a&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="96c5642595e980fed49cb21924a5425817039bc3" translate="yes" xml:space="preserve">
          <source>When using this constructor, the prefix is set to &lt;a href=&quot;../xmlconstants#DEFAULT_NS_PREFIX&quot;&gt;&lt;code&gt;XMLConstants.DEFAULT_NS_PREFIX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 생성자를 사용할 때 접두사는 &lt;a href=&quot;../xmlconstants#DEFAULT_NS_PREFIX&quot;&gt; &lt;code&gt;XMLConstants.DEFAULT_NS_PREFIX&lt;/code&gt; &lt;/a&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="e87d4e305eeee8d02bfe9d7476f259cac952cdb2" translate="yes" xml:space="preserve">
          <source>When viewed as a character sequence, the length of a character buffer is simply the number of characters between the position (inclusive) and the limit (exclusive); that is, it is equivalent to &lt;code&gt;remaining()&lt;/code&gt;.</source>
          <target state="translated">문자 순서로 볼 때 문자 버퍼의 길이는 단순히 위치 (포함)와 한계 (제외) 사이의 문자 수입니다. 즉, &lt;code&gt;remaining()&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="b74b06615a3effa44bf4fa9888e60a5a1492ac50" translate="yes" xml:space="preserve">
          <source>When viewed as a member of a third type &lt;code&gt;C&lt;/code&gt;, however, the method in &lt;code&gt;A&lt;/code&gt; does override the one in &lt;code&gt;B&lt;/code&gt;:</source>
          <target state="translated">세번째 형태의 부재로 간주 할 때 &lt;code&gt;C&lt;/code&gt; 그러나에있어서 &lt;code&gt;A&lt;/code&gt; 는 에서 무시하지 하나 &lt;code&gt;B&lt;/code&gt; 를 :</target>
        </trans-unit>
        <trans-unit id="70641d46fc36740d8882e1912ac1db22e717a0cd" translate="yes" xml:space="preserve">
          <source>When waiting upon a &lt;code&gt;Condition&lt;/code&gt;, a &quot;&lt;em&gt;spurious wakeup&lt;/em&gt;&quot; is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a &lt;code&gt;Condition&lt;/code&gt; should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; 기다릴 때 일반적으로 기본 플랫폼 의미에 대한 양보로 &quot; &lt;em&gt;스퓨리어스 웨이크 업&lt;/em&gt; &quot;이 발생할 수 있습니다. &lt;code&gt;Condition&lt;/code&gt; 은 항상 루프에서 대기하고 대기중인 상태 술어를 테스트해야 하므로 대부분의 응용 프로그램에는 거의 영향을 미치지 않습니다 . 구현은 가짜 웨이크 업의 가능성을 자유롭게 제거 할 수 있지만 응용 프로그램 프로그래머는 항상 발생할 수 있다고 가정하여 항상 루프에서 대기하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4246b2cc19c9676bfe631da16932f916fd42e34e" translate="yes" xml:space="preserve">
          <source>When warnings/errors/fatal errors are found by the validator, the parser must handle them as if those errors were found by the parser itself. In other words, if the user-specified &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; is set, it must receive those errors, and if not, they must be treated according to the implementation specific default error handling rules.</source>
          <target state="translated">유효성 검사기에서 경고 / 오류 / 치명적 오류를 발견하면 파서가 해당 오류를 파서 자체에서 찾은 것처럼 처리해야합니다. 즉, 사용자 지정 &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt; 가 설정되면 해당 오류를 수신해야하며 그렇지 않은 경우 구현 특정 기본 오류 처리 규칙에 따라 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="4b65ea9216658615a74fbadc89129a9320a6d2b4" translate="yes" xml:space="preserve">
          <source>When writing a multi-threaded application using Swing, there are two constraints to keep in mind: (refer to &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html&quot;&gt; Concurrency in Swing &lt;/a&gt; for more details):</source>
          <target state="translated">Swing을 사용하여 멀티 스레드 애플리케이션을 작성할 때 염두에 두어야 할 두 가지 제약이 있습니다. ( 자세한 내용 &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html&quot;&gt;은 Swing의 동시성&lt;/a&gt; 참조) :</target>
        </trans-unit>
        <trans-unit id="820acf1a539f093ef923cbe7206d4636f08ce510" translate="yes" xml:space="preserve">
          <source>When writing a multi-threaded application using Swing, there are two constraints to keep in mind: (refer to &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html&quot;&gt; Concurrency in Swing &lt;/a&gt; for more details):</source>
          <target state="translated">Swing을 사용하여 다중 스레드 응용 프로그램을 작성할 때 염두에 두어야 할 두 가지 제약이 있습니다. ( 자세한 내용 &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html&quot;&gt;은 Swing의 동시성&lt;/a&gt; 참조) :</target>
        </trans-unit>
        <trans-unit id="50097f566388737a84366cf10ac13d1ccd775d2d" translate="yes" xml:space="preserve">
          <source>When writing an image, its metadata may be set by defining or modifying an &lt;code&gt;IIOMetadata&lt;/code&gt; object. Such an object may be obtained from an &lt;code&gt;ImageWriter&lt;/code&gt; or &lt;code&gt;ImageTranscoder&lt;/code&gt; (from the &lt;code&gt;javax.imageio&lt;/code&gt; package). Once such an object has been obtained, its contents may be set of modified via a &lt;code&gt;Document&lt;/code&gt; consisting of &lt;code&gt;IIOMetadataNode&lt;/code&gt;s. The document format may optionally be described using an &lt;code&gt;IIOMetadataFormat&lt;/code&gt; object.</source>
          <target state="translated">이미지를 쓸 때 &lt;code&gt;IIOMetadata&lt;/code&gt; 객체를 정의하거나 수정하여 메타 데이터를 설정할 수 있습니다 . 이러한 객체는 &lt;code&gt;ImageWriter&lt;/code&gt; 또는 &lt;code&gt;ImageTranscoder&lt;/code&gt; ( &lt;code&gt;javax.imageio&lt;/code&gt; 패키지) 에서 얻을 수 있습니다 . 이러한 객체가 획득되면, &lt;code&gt;IIOMetadataNode&lt;/code&gt; 로 구성된 &lt;code&gt;Document&lt;/code&gt; 를 통해 그 내용을 수정할 수 있습니다 . &lt;code&gt;IIOMetadataFormat&lt;/code&gt; 객체를 사용하여 문서 형식을 선택적으로 설명 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="539a87ee8e580df1a3e2f775f3342dcf0824a272" translate="yes" xml:space="preserve">
          <source>When writing code that manipulates memory segments, especially if backed by memory which resides outside the Java heap, it is crucial that the resources associated with a memory segment are released when the segment is no longer in use, by calling the &lt;a href=&quot;memorysegment#close()&quot;&gt;&lt;code&gt;MemorySegment.close()&lt;/code&gt;&lt;/a&gt; method either explicitly, or implicitly, by relying on try-with-resources construct (as demonstrated in the example above). Closing a given memory segment is an &lt;em&gt;atomic&lt;/em&gt; operation which can either succeed - and result in the underlying memory associated with the segment to be released, or &lt;em&gt;fail&lt;/em&gt; with an exception.</source>
          <target state="translated">메모리 세그먼트를 조작하는 코드를 작성할 때, 특히 Java 힙 외부에있는 메모리에 의해 지원되는 경우 &lt;a href=&quot;memorysegment#close()&quot;&gt; &lt;code&gt;MemorySegment.close()&lt;/code&gt; &lt;/a&gt; 호출하여 세그먼트가 더 이상 사용되지 않을 때 메모리 세그먼트와 관련된 리소스를 해제하는 것이 중요합니다. 위의 예제에서 설명한대로 try-with-resources 구성에 의존하여 명시 적으로 또는 암시 적으로 메서드를 사용합니다. 주어진 메모리 세그먼트를 닫는 것은 성공할 수 있고 그 결과 세그먼트와 관련된 기본 메모리가 해제되거나 예외와 함께 &lt;em&gt;실패&lt;/em&gt; 할 수 있는 &lt;em&gt;원자 적&lt;/em&gt; 작업입니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="44b4a60f0d785ceae4f2f44785b50fadd22e0a67" translate="yes" xml:space="preserve">
          <source>When writing to a &lt;code&gt;LSOutput&lt;/code&gt;, the encoding is found by looking at the encoding information that is reachable through the &lt;code&gt;LSOutput&lt;/code&gt; and the item to be written (or its owner document) in this order:</source>
          <target state="translated">A를 쓸 때 &lt;code&gt;LSOutput&lt;/code&gt; , 인코딩은 통해 도달 할 수있는 인코딩 정보를보고 발견 &lt;code&gt;LSOutput&lt;/code&gt; 이 순서로 작성하고 항목 (또는 소유자 문서) :</target>
        </trans-unit>
        <trans-unit id="d2afab89366cad1e703d500543bdeff2a26cf52f" translate="yes" xml:space="preserve">
          <source>When writing to a HTTP URI, a HTTP PUT is performed. When writing to other types of URIs, the mechanism for writing the data to the URI is implementation dependent.</source>
          <target state="translated">HTTP URI에 쓸 때 HTTP PUT가 수행됩니다. 다른 유형의 URI에 쓸 때 URI에 데이터를 쓰는 메커니즘은 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="da3859e404597e0949c5fd1f7d9550737c714ec5" translate="yes" xml:space="preserve">
          <source>When writing, an &lt;a href=&quot;../../metadata/iiometadata&quot;&gt;&lt;code&gt;IIOMetadata&lt;/code&gt;&lt;/a&gt; object for use by one of the &lt;code&gt;write()&lt;/code&gt; methods of &lt;a href=&quot;../../imagewriter&quot;&gt;&lt;code&gt;ImageWriter&lt;/code&gt;&lt;/a&gt; may be created from a &lt;code&gt;TIFFDirectory&lt;/code&gt; by &lt;a href=&quot;#getAsMetadata()&quot;&gt;&lt;code&gt;getAsMetadata()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TIFFDirectory&lt;/code&gt; itself may be created by construction or from the &lt;code&gt;IIOMetadata&lt;/code&gt; object returned by &lt;a href=&quot;../../imagewriter#getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)&quot;&gt;&lt;code&gt;ImageWriter.getDefaultImageMetadata()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TIFFField&lt;/code&gt;s in the directory may be set using the mutator methods provided in this class.</source>
          <target state="translated">, 작성할 때 &lt;a href=&quot;../../metadata/iiometadata&quot;&gt; &lt;code&gt;IIOMetadata&lt;/code&gt; &lt;/a&gt; 중 하나에 의한 사용을 위해 객체를 &lt;code&gt;write()&lt;/code&gt; 방법 &lt;a href=&quot;../../imagewriter&quot;&gt; &lt;code&gt;ImageWriter&lt;/code&gt; &lt;/a&gt; A로부터 생성 될 수있다 &lt;code&gt;TIFFDirectory&lt;/code&gt; 의해 &lt;a href=&quot;#getAsMetadata()&quot;&gt; &lt;code&gt;getAsMetadata()&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;TIFFDirectory&lt;/code&gt; 자체 구성하거나로부터 생성 될 수 &lt;code&gt;IIOMetadata&lt;/code&gt; 의해 리턴 된 객체 &lt;a href=&quot;../../imagewriter#getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)&quot;&gt; &lt;code&gt;ImageWriter.getDefaultImageMetadata()&lt;/code&gt; &lt;/a&gt; . 디렉토리 의 &lt;code&gt;TIFFField&lt;/code&gt; 는이 클래스에서 제공하는 mutator 메소드를 사용하여 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eea2b78361ef1f62a351050fb4d8e084b0419681" translate="yes" xml:space="preserve">
          <source>When writing, the destination type maybe used to determine the color type of the image. The &lt;code&gt;SampleModel&lt;/code&gt; information will be ignored, and may be &lt;code&gt;null&lt;/code&gt;. For example, a 4-banded image could represent either CMYK or RGBA data. If a destination type is set, its &lt;code&gt;ColorModel&lt;/code&gt; will override any &lt;code&gt;ColorModel&lt;/code&gt; on the image itself. This is crucial when &lt;code&gt;setSourceBands&lt;/code&gt; is used since the image's &lt;code&gt;ColorModel&lt;/code&gt; will refer to the entire image rather than to the subset of bands being written.</source>
          <target state="translated">기록 할 때 대상 유형이 이미지의 색상 유형을 결정하는 데 사용될 수 있습니다. &lt;code&gt;SampleModel&lt;/code&gt; 정보는 무시되고, 할 수있다 &lt;code&gt;null&lt;/code&gt; . 예를 들어, 4 밴드 이미지는 CMYK 또는 RGBA 데이터를 나타낼 수 있습니다. 대상 유형이 설정되면 해당 &lt;code&gt;ColorModel&lt;/code&gt; 은 이미지 자체의 모든 &lt;code&gt;ColorModel&lt;/code&gt; 을 재정의 합니다. 이는 이미지의 &lt;code&gt;ColorModel&lt;/code&gt; 이 작성되는 밴드의 하위 집합이 아닌 전체 이미지를 참조 하므로 &lt;code&gt;setSourceBands&lt;/code&gt; 를 사용할 때 중요 합니다 .</target>
        </trans-unit>
        <trans-unit id="9a6b169cf5cbb999580ca1588fd37eab8e71b189" translate="yes" xml:space="preserve">
          <source>When you create an initial context (&lt;code&gt;InitialLdapContext&lt;/code&gt;), you can specify a list of request controls. These controls will be used as the request controls for any implicit LDAP &quot;bind&quot; operation performed by the context or contexts derived from the context. These are called &lt;em&gt;connection request controls&lt;/em&gt;. Use &lt;code&gt;getConnectControls()&lt;/code&gt; to get a context's connection request controls.</source>
          <target state="translated">초기 컨텍스트 ( &lt;code&gt;InitialLdapContext&lt;/code&gt; ) 를 작성할 때 요청 제어 목록을 지정할 수 있습니다. 이러한 제어는 컨텍스트 또는 컨텍스트에서 파생 된 컨텍스트에 의해 수행 된 내재 된 LDAP &quot;바인드&quot;조작에 대한 요청 제어로 사용됩니다. 이것을 &lt;em&gt;연결 요청 컨트롤&lt;/em&gt; 이라고 &lt;em&gt;합니다&lt;/em&gt; . &lt;code&gt;getConnectControls()&lt;/code&gt; 를 사용 하여 컨텍스트의 연결 요청 제어를 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="7a55210ed8a9bbd91ed99904496d79d9e437e1c1" translate="yes" xml:space="preserve">
          <source>When you request this property, &lt;code&gt;LabelView&lt;/code&gt; re-syncs its state with the properties of the &lt;code&gt;Element&lt;/code&gt;'s &lt;code&gt;AttributeSet&lt;/code&gt;. If &lt;code&gt;Element&lt;/code&gt;'s &lt;code&gt;AttributeSet&lt;/code&gt; does not have this property set, it will revert to false.</source>
          <target state="translated">이 속성을 요청하면 &lt;code&gt;LabelView&lt;/code&gt; 는 해당 상태를 &lt;code&gt;Element&lt;/code&gt; 의 &lt;code&gt;AttributeSet&lt;/code&gt; 속성 과 다시 동기화합니다 . 경우 &lt;code&gt;Element&lt;/code&gt; 의 &lt;code&gt;AttributeSet&lt;/code&gt; 이 속성이 설정되지 않은, false에 되돌려집니다.</target>
        </trans-unit>
        <trans-unit id="76c291d7ec2e2a61da9c355ee091458c7391b573" translate="yes" xml:space="preserve">
          <source>When you want the &lt;code&gt;SwingWorker&lt;/code&gt; to block on the</source>
          <target state="translated">&lt;code&gt;SwingWorker&lt;/code&gt; 를 차단 하려는 경우</target>
        </trans-unit>
        <trans-unit id="221e0f97f37cb411d57af917bcf79190807898c6" translate="yes" xml:space="preserve">
          <source>When your program needs a locale-specific object, it loads the &lt;code&gt;ResourceBundle&lt;/code&gt; class using the &lt;a href=&quot;#getBundle(java.lang.String,java.util.Locale)&quot;&gt;&lt;code&gt;getBundle&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">프로그램에 로케일 별 객체가 필요한 경우 &lt;a href=&quot;#getBundle(java.lang.String,java.util.Locale)&quot;&gt; &lt;code&gt;getBundle&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 &lt;code&gt;ResourceBundle&lt;/code&gt; 클래스를 로드합니다 .</target>
        </trans-unit>
        <trans-unit id="f5d6850ccbdf18f11fe78451acaa45891ec324a4" translate="yes" xml:space="preserve">
          <source>When your program needs a locale-specific object, it loads the &lt;code&gt;ResourceBundle&lt;/code&gt; class using the &lt;a href=&quot;resourcebundle#getBundle-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;getBundle&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">프로그램에 로케일 특정 오브젝트가 필요한 경우 &lt;a href=&quot;resourcebundle#getBundle-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;getBundle&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 &lt;code&gt;ResourceBundle&lt;/code&gt; 클래스를 로드합니다 .</target>
        </trans-unit>
        <trans-unit id="294687126fefbc03d977b1180723b4fd8063c95a" translate="yes" xml:space="preserve">
          <source>Whenever a permission is added to a heterogeneous PermissionCollection such as Permissions, and the PermissionCollection doesn't yet contain a PermissionCollection of the specified permission's type, the PermissionCollection should call the &lt;code&gt;newPermissionCollection&lt;/code&gt; method on the permission's class to see if it requires a special PermissionCollection. If &lt;code&gt;newPermissionCollection&lt;/code&gt; returns null, the PermissionCollection is free to store the permission in any type of PermissionCollection it desires (one using a Hashtable, one using a Vector, etc.). For example, the Permissions object uses a default PermissionCollection implementation that stores the permission objects in a Hashtable.</source>
          <target state="translated">권한과 같은 이종 PermissionCollection에 권한이 추가되고 PermissionCollection에 지정된 권한 유형의 PermissionCollection이 아직 포함되어 있지 않은 경우 PermissionCollection은 권한 클래스 에서 &lt;code&gt;newPermissionCollection&lt;/code&gt; 메서드를 호출하여 특수한 PermissionCollection이 필요한지 확인해야합니다. 경우 &lt;code&gt;newPermissionCollection&lt;/code&gt; 널 (null)을 반환 PermissionCollection의은 (해시 테이블, 벡터를 사용하여 하나 등을 사용하여 하나)은 욕망의 PermissionCollection 모든 유형의 권한을 저장하는 무료입니다. 예를 들어 Permissions 객체는 권한 객체를 Hashtable에 저장하는 기본 PermissionCollection 구현을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="657dbd1f56168fcdb6c057d84ffab8877f436bb8" translate="yes" xml:space="preserve">
          <source>Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence), this class synchronizes only on the string buffer performing the operation, not on the source. Note that while &lt;code&gt;StringBuffer&lt;/code&gt; is designed to be safe to use concurrently from multiple threads, if the constructor or the &lt;code&gt;append&lt;/code&gt; or &lt;code&gt;insert&lt;/code&gt; operation is passed a source sequence that is shared across threads, the calling code must ensure that the operation has a consistent and unchanging view of the source sequence for the duration of the operation. This could be satisfied by the caller holding a lock during the operation's call, by using an immutable source sequence, or by not sharing the source sequence across threads.</source>
          <target state="translated">소스 시퀀스를 추가하거나 삽입하는 등 소스 시퀀스와 관련된 작업이 발생할 때마다이 클래스는 소스가 아닌 작업을 수행하는 문자열 버퍼에서만 동기화합니다. &lt;code&gt;StringBuffer&lt;/code&gt; 는 여러 스레드에서 동시에 사용하기에 안전하도록 설계 되었지만 생성자 또는 &lt;code&gt;append&lt;/code&gt; 또는 &lt;code&gt;insert&lt;/code&gt; 작업에 스레드간에 공유되는 소스 시퀀스가 ​​전달되면 호출 코드는 작업이 일관되고 변경되지 않은보기를 갖도록해야합니다. 작업 기간 동안 소스 시퀀스의 작업 호출 중에 잠금을 유지 한 호출자가 불변의 소스 시퀀스를 사용하거나 스레드간에 소스 시퀀스를 공유하지 않으면이 문제를 해결할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
