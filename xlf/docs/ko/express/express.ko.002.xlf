<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="express">
    <body>
      <group id="express">
        <trans-unit id="b5ef97f3eb356131ee3ae97d67740cadea0106df" translate="yes" xml:space="preserve">
          <source>Sparse arrays that have extremely high indexes in the query string could cause the process to run out of memory and crash the server.</source>
          <target state="translated">쿼리 문자열에서 인덱스가 매우 높은 희소 배열로 인해 프로세스의 메모리가 부족하여 서버가 충돌 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27e4aa8b4b82b8acf4f1b3767be3f84835fed96a" translate="yes" xml:space="preserve">
          <source>Specifies the default JSONP callback name.</source>
          <target state="translated">기본 JSONP 콜백 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="641bd5916707fec2514d601040b5fbc4f5128c46" translate="yes" xml:space="preserve">
          <source>Specify a single subnet:</source>
          <target state="translated">단일 서브넷을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="ca32bd89167c893429f6d68f325a9cdaf08c7f96" translate="yes" xml:space="preserve">
          <source>Specify a subnet and an address:</source>
          <target state="translated">서브넷과 주소를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="5355dbee8cd53350b3184a9df563491afbcb0b6b" translate="yes" xml:space="preserve">
          <source>Specify if overlapping &amp;amp; adjacent ranges should be combined, defaults to &lt;code&gt;false&lt;/code&gt;. When &lt;code&gt;true&lt;/code&gt;, ranges will be combined and returned as if they were specified that way in the header.</source>
          <target state="translated">겹치거나 인접한 범위를 결합해야하는지 여부를 지정합니다 . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 때 &lt;code&gt;true&lt;/code&gt; , 범위가 결합 그들이 헤더에 그런 식으로 지정된 것처럼 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="18383c4f427413fa108687c9edaf868e15415a28" translate="yes" xml:space="preserve">
          <source>Specify multiple subnets as CSV:</source>
          <target state="translated">여러 서브넷을 CSV로 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="d2fa130b3c0a38c091a238309f12fc577d8e93ec" translate="yes" xml:space="preserve">
          <source>Specify multiple subnets as an array:</source>
          <target state="translated">여러 서브넷을 배열로 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="de2530d91c66a2a2a148a5d5403ab6ccefce43c3" translate="yes" xml:space="preserve">
          <source>Specify the default character set for the text content if the charset is not specified in the &lt;code&gt;Content-Type&lt;/code&gt; header of the request.</source>
          <target state="translated">요청 의 &lt;code&gt;Content-Type&lt;/code&gt; 헤더에 문자 세트가 지정되지 않은 경우 텍스트 컨텐츠에 대한 기본 문자 세트를 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="41b25279c02f0454306860e1895780af22fb451c" translate="yes" xml:space="preserve">
          <source>Start service</source>
          <target state="translated">서비스 시작</target>
        </trans-unit>
        <trans-unit id="c07f6ba63bfbd56f1c9456402bf7340ad56d5c3f" translate="yes" xml:space="preserve">
          <source>Starting with Express 5, middleware functions that return a Promise will call &lt;code&gt;next(value)&lt;/code&gt; when they reject or throw an error. &lt;code&gt;next&lt;/code&gt; will be called with either the rejected value or the thrown Error.</source>
          <target state="translated">Express 5부터 Promise를 반환하는 미들웨어 함수는 거부 또는 오류 발생시 &lt;code&gt;next(value)&lt;/code&gt; 호출 합니다. &lt;code&gt;next&lt;/code&gt; 는 거부 된 값 또는 throw 된 오류와 함께 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a2eb3845bfbede256dff3b4d1ebdd68188b840c8" translate="yes" xml:space="preserve">
          <source>Starting with Express 5, route handlers and middleware that return a Promise will call &lt;code&gt;next(value)&lt;/code&gt; automatically when they reject or throw an error. For example:</source>
          <target state="translated">Express 5부터 Promise를 반환하는 라우트 핸들러 및 미들웨어는 거부하거나 오류를 던질 때 자동으로 &lt;code&gt;next(value)&lt;/code&gt; 호출 합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="9fa48ff981e1f3d94d7aad2e9d994440e5718d47" translate="yes" xml:space="preserve">
          <source>Starting with version 4.x, Express no longer depends on &lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt;. The middleware functions that were previously included with Express are now in separate modules; see &lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;the list of middleware functions&lt;/a&gt;.</source>
          <target state="translated">버전 4.x부터 Express는 더 이상 &lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;Connect에&lt;/a&gt; 의존하지 않습니다 . 이전에 Express에 포함 된 미들웨어 기능은 이제 별도의 모듈에 있습니다. &lt;a href=&quot;https://github.com/senchalabs/connect#middleware&quot;&gt;미들웨어 기능 목록을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1db4b70a1d677af14340b5de81a5e1ad2c5f2b94" translate="yes" xml:space="preserve">
          <source>Starts a UNIX socket and listens for connections on the given path. This method is identical to Node&amp;rsquo;s &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen()&lt;/a&gt;.</source>
          <target state="translated">UNIX 소켓을 시작하고 지정된 경로에서 연결을 청취합니다. 이 메소드는 Node의 &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_listen&quot;&gt;http.Server.listen ()&lt;/a&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="1336694741e37c2efe3ec6e6b8bf2710beea656b" translate="yes" xml:space="preserve">
          <source>Stop an app:</source>
          <target state="translated">앱 중지 :</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="67de91247cb6f05f729a5729c810ee5169375d87" translate="yes" xml:space="preserve">
          <source>String containing comma-separated values</source>
          <target state="translated">쉼표로 구분 된 값을 포함하는 문자열</target>
        </trans-unit>
        <trans-unit id="a7703adac3d9d86521f6328a718d53d9e3bf1899" translate="yes" xml:space="preserve">
          <source>String or Array</source>
          <target state="translated">문자열 또는 배열</target>
        </trans-unit>
        <trans-unit id="be0871945f3a0cf8f9c63879bae1d648fdfc8018" translate="yes" xml:space="preserve">
          <source>StrongLoop PM as a systemd service</source>
          <target state="translated">체계적인 서비스로서의 StrongLoop PM</target>
        </trans-unit>
        <trans-unit id="ee376430f32806754027051a398213a171b8d246" translate="yes" xml:space="preserve">
          <source>StrongLoop PM as an Upstart service</source>
          <target state="translated">Upstart 서비스로서의 StrongLoop PM</target>
        </trans-unit>
        <trans-unit id="578e6b53e19303f150bfa5732e00c71b1c184f8a" translate="yes" xml:space="preserve">
          <source>StrongLoop Process Manager</source>
          <target state="translated">StrongLoop 프로세스 관리자</target>
        </trans-unit>
        <trans-unit id="f29707d9893bc17fe5d19ca7cb9ba5744f744a8a" translate="yes" xml:space="preserve">
          <source>StrongLoop Process Manager (StrongLoop PM) is a production process manager for Node.js applications. StrongLoop PM has built-in load balancing, monitoring, and multi-host deployment, and a graphical console. You can use StrongLoop PM for the following tasks:</source>
          <target state="translated">StrongLoop Process Manager (StrongLoop PM)는 Node.js 애플리케이션의 프로덕션 프로세스 관리자입니다. StrongLoop PM에는 내장 된로드 밸런싱, 모니터링 및 멀티 호스트 배포 및 그래픽 콘솔이 있습니다. 다음 작업에 StrongLoop PM을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44b45f56a502953d4331e3eb571e87a866c04bb5" translate="yes" xml:space="preserve">
          <source>Sub-apps will:</source>
          <target state="translated">서브 앱은 :</target>
        </trans-unit>
        <trans-unit id="988723fca0b1f92286dd3fa5e6c185f434cbe8c7" translate="yes" xml:space="preserve">
          <source>Synchronous functions and methods tie up the executing process until they return. A single call to a synchronous function might return in a few microseconds or milliseconds, however in high-traffic websites, these calls add up and reduce the performance of the app. Avoid their use in production.</source>
          <target state="translated">동기 함수와 메소드는 실행될 때까지 실행 프로세스를 묶습니다. 동기 함수에 대한 단일 호출은 몇 마이크로 초 또는 밀리 초로 리턴 될 수 있지만 트래픽이 많은 웹 사이트에서는 이러한 호출이 추가되어 앱의 성능이 저하됩니다. 생산에 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="456d2198000ded3f2dc429dc773ea33964d80d31" translate="yes" xml:space="preserve">
          <source>SystemD</source>
          <target state="translated">SystemD</target>
        </trans-unit>
        <trans-unit id="124493a955eff3531dfe489a5cd138ba10cca742" translate="yes" xml:space="preserve">
          <source>SystemD is the default process manager on modern Linux distributions. Running a Node service based on SystemD is very simple. NOTE: This section is based on &lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;a blog post by Ralph Slooten (@axllent)&lt;/a&gt;.</source>
          <target state="translated">SystemD는 최신 Linux 배포판의 기본 프로세스 관리자입니다. SystemD를 기반으로 노드 서비스를 실행하는 것은 매우 간단합니다. 참고 :이 섹션은 &lt;a href=&quot;https://www.axllent.org/docs/view/nodejs-service-with-systemd/&quot;&gt;Ralph Slooten (@axllent)의 블로그 게시물을&lt;/a&gt; 기반으로 합니다 .</target>
        </trans-unit>
        <trans-unit id="a44a53c54ba77f8a2ae69713f422d9f138899fdb" translate="yes" xml:space="preserve">
          <source>Systemd</source>
          <target state="translated">Systemd</target>
        </trans-unit>
        <trans-unit id="dfc4b18ab42a0ba369543ea528891a7f5db6913f" translate="yes" xml:space="preserve">
          <source>Systemd is a Linux system and service manager. Most major Linux distributions have adopted systemd as their default init system.</source>
          <target state="translated">Systemd는 Linux 시스템 및 서비스 관리자입니다. 대부분의 주요 Linux 배포판은 systemd를 기본 초기화 시스템으로 채택했습니다.</target>
        </trans-unit>
        <trans-unit id="d65bf0a0757703865df78ceed495b5e2950eb82c" translate="yes" xml:space="preserve">
          <source>Terminating a HTTP server in Node.js requires keeping track of all open connections and signaling them that the server is shutting down. http-terminator implements the logic for tracking all connections and their termination upon a timeout. http-terminator also ensures graceful communication of the server intention to shutdown to any clients that are currently receiving response from this server.</source>
          <target state="translated">Node.js에서 HTTP 서버를 종료하려면 열려있는 모든 연결을 추적하고 서버가 종료된다는 신호를 보내야합니다. http-terminator는 타임 아웃시 모든 연결 및 종료를 추적하는 로직을 구현합니다. http-terminator는 또한 현재이 서버에서 응답을 받고있는 모든 클라이언트에 종료하려는 서버 의도의 정상적인 통신을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="011295c68cd0477af5d16facb34108e6cb4f7e07" translate="yes" xml:space="preserve">
          <source>Terminus</source>
          <target state="translated">Terminus</target>
        </trans-unit>
        <trans-unit id="f347b94c14fb35d60c7d81d615e7a006098e0875" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;mount&amp;rdquo; path is stripped and is &lt;em&gt;not&lt;/em&gt; visible to the middleware function. The main effect of this feature is that a mounted middleware function may operate without code changes regardless of its &amp;ldquo;prefix&amp;rdquo; pathname.</source>
          <target state="translated">&quot;마운트&quot;경로가 제거 되어 미들웨어 기능에 표시 &lt;em&gt;되지 않습니다&lt;/em&gt; . 이 기능의 주요 효과는 마운트 된 미들웨어 기능이 &quot;접두사&quot;경로 이름에 관계없이 코드 변경없이 작동 할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9f9b4406fa85667b917de06916c12d08be62cdfb" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;&lt;code&gt;.&lt;/code&gt;&amp;rsquo; character can&amp;rsquo;t be used to capture a character in your capturing regexp. For example you can&amp;rsquo;t use &lt;code&gt;'/user-.+/'&lt;/code&gt; to capture &lt;code&gt;'users-gami'&lt;/code&gt;, use &lt;code&gt;[\\s\\S]&lt;/code&gt; or &lt;code&gt;[\\w\\W]&lt;/code&gt; instead (as in &lt;code&gt;'/user-[\\s\\S]+/'&lt;/code&gt;.</source>
          <target state="translated">' &lt;code&gt;.&lt;/code&gt; '문자는 캡처 정규식에서 문자를 캡처하는 데 사용할 수 없습니다. 예를 들어, 사용할 수없는 &lt;code&gt;'/user-.+/'&lt;/code&gt; 캡처 &lt;code&gt;'users-gami'&lt;/code&gt; 사용 &lt;code&gt;[\\s\\S]&lt;/code&gt; 또는 &lt;code&gt;[\\w\\W]&lt;/code&gt; 대신 (AS에서 &lt;code&gt;'/user-[\\s\\S]+/'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="806f45f972b0cb5e2c8b22b7034c2fd8c9e3a37b" translate="yes" xml:space="preserve">
          <source>The 404 response of an unsupported method override attempt was susceptible to cross-site scripting attacks.</source>
          <target state="translated">지원되지 않는 메서드 재정의 시도에 대한 404 응답은 사이트 간 스크립팅 공격에 취약했습니다.</target>
        </trans-unit>
        <trans-unit id="9f310b4e80cc8571e0196cc728be354de5dca8b8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://expressjs.com/en/api.html#req.ip&quot;&gt;req.ip&lt;/a&gt; and &lt;a href=&quot;http://expressjs.com/en/api.html#req.ips&quot;&gt;req.ips&lt;/a&gt; values are populated with the list of addresses from &lt;code&gt;X-Forwarded-For&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://expressjs.com/en/api.html#req.ip&quot;&gt;req.ip&lt;/a&gt; 및 &lt;a href=&quot;http://expressjs.com/en/api.html#req.ips&quot;&gt;req.ips&lt;/a&gt; 값으로부터 어드레스의 목록을 채워 &lt;code&gt;X-Forwarded-For&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99cc27e4563e8667a19d300476c8819b3a920c19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter&quot;&gt;'replacer' argument used by `JSON.stringify`&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter&quot;&gt;JSON.stringify``에서 사용하는 '대체물'인수&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e000f0b12fa4e781f803aff248bd6ae2207e2d42" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_space_argument&quot;&gt;'space' argument used by `JSON.stringify`&lt;/a&gt;. This is typically set to the number of spaces to use to indent prettified JSON.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_space_argument&quot;&gt;JSON.stringify``에서 사용하는 '공간'인수&lt;/a&gt; . 이는 일반적으로 사전 확인 된 JSON을 들여 쓰는 데 사용할 공간 수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="719f7690e4db0c63a362c9d877b1b4ec945c5a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Content-Type&lt;/code&gt; response header is set when a callback is selected. However, you may alter this within the callback using methods such as &lt;code&gt;res.set()&lt;/code&gt; or &lt;code&gt;res.type()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Content-Type&lt;/code&gt; 콜백을 선택하면 응답 헤더가 설정됩니다. 그러나 &lt;code&gt;res.set()&lt;/code&gt; 또는 &lt;code&gt;res.type()&lt;/code&gt; 과 같은 메소드를 사용하여 콜백 내에서이를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1cb48940d20c0a4670fddb7155d79ad49843e2ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.all()&lt;/code&gt; method is useful for mapping &amp;ldquo;global&amp;rdquo; logic for specific path prefixes or arbitrary matches. For example, if you put the following at the top of all other route definitions, it requires that all routes from that point on require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end-points: &lt;code&gt;loadUser&lt;/code&gt; can perform a task, then call &lt;code&gt;next()&lt;/code&gt; to continue matching subsequent routes.</source>
          <target state="translated">&lt;code&gt;app.all()&lt;/code&gt; 메소드는 특정 경로 접두사 또는 임의의 일치에 대한 매핑 &quot;글로벌&quot;논리에 유용합니다. 예를 들어, 다음을 다른 모든 경로 정의의 맨 위에 두는 경우 해당 지점의 모든 경로에 인증이 필요하고 사용자를 자동으로로드해야합니다. 이러한 콜백은 엔드 포인트 역할을 수행 할 필요가 없습니다. &lt;code&gt;loadUser&lt;/code&gt; 는 작업을 수행 한 후 &lt;code&gt;next()&lt;/code&gt; 를 호출 하여 후속 경로를 계속 일치 시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4095cbb4de9229fa5a410fcf5c487b65fb556833" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.configure()&lt;/code&gt; function has been removed. Use the &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; or &lt;code&gt;app.get('env')&lt;/code&gt; function to detect the environment and configure the app accordingly.</source>
          <target state="translated">&lt;code&gt;app.configure()&lt;/code&gt; 함수는 제거되었다. 사용 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 또는 &lt;code&gt;app.get('env')&lt;/code&gt; 환경을 감지하고 그에 따라 응용 프로그램을 구성하는 기능.</target>
        </trans-unit>
        <trans-unit id="acb546a414f22260abb5b78d7fc6fd20b6d2e059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.get()&lt;/code&gt; function is automatically called for the HTTP &lt;code&gt;HEAD&lt;/code&gt; method in addition to the &lt;code&gt;GET&lt;/code&gt; method if &lt;code&gt;app.head()&lt;/code&gt; was not called for the path before &lt;code&gt;app.get()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.get()&lt;/code&gt; 함수는 자동으로 HTTP에 대해 호출 &lt;code&gt;HEAD&lt;/code&gt; 의 받는 사람뿐만 아니라 방법 &lt;code&gt;GET&lt;/code&gt; 의 경우 방법 &lt;code&gt;app.head()&lt;/code&gt; 이전 경로를 호출되지 않은 &lt;code&gt;app.get()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="96f33f2b20cbe266f1dd0490ba383c791d9f43fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.listen()&lt;/code&gt; method returns an &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_server&quot;&gt;http.Server&lt;/a&gt; object and (for HTTP) is a convenience method for the following:</source>
          <target state="translated">&lt;code&gt;app.listen()&lt;/code&gt; 메소드가 다시 표시 &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_server&quot;&gt;http.Server&lt;/a&gt; 객체와 (대한 HTTP)는 다음의 편리한 방법이다 :</target>
        </trans-unit>
        <trans-unit id="4cd9436d8fdbfcee064950de3803e909fc7a44eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.locals&lt;/code&gt; object has properties that are local variables within the application.</source>
          <target state="translated">&lt;code&gt;app.locals&lt;/code&gt; 의 목적은 애플리케이션 내 로컬 변수 특성을 갖는다.</target>
        </trans-unit>
        <trans-unit id="539eb4a461d245199bfc06b59dace03889dd323b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.mountpath&lt;/code&gt; property contains one or more path patterns on which a sub-app was mounted.</source>
          <target state="translated">&lt;code&gt;app.mountpath&lt;/code&gt; 의 속성은 서브 앱 장착 된 하나 개 이상의 경로 패턴을 포함한다.</target>
        </trans-unit>
        <trans-unit id="ce5c0b00a2968479d672439b233f7f4ada488316" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.param(fn)&lt;/code&gt; signature was used for modifying the behavior of the &lt;code&gt;app.param(name, fn)&lt;/code&gt; function. It has been deprecated since v4.11.0, and Express 5 no longer supports it at all.</source>
          <target state="translated">&lt;code&gt;app.param(fn)&lt;/code&gt; 서명은 동작 변경을 위해 사용되었다 &lt;code&gt;app.param(name, fn)&lt;/code&gt; 기능. v4.11.0부터 더 이상 사용되지 않으며 Express 5는 더 이상 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6f8d512599341d1ffccb646a9d53c3815a9909f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.router&lt;/code&gt; object, which was removed in Express 4, has made a comeback in Express 5. In the new version, this object is a just a reference to the base Express router, unlike in Express 3, where an app had to explicitly load it.</source>
          <target state="translated">&lt;code&gt;app.router&lt;/code&gt; 의 익스프레스 4 제거 하였다 목적은, 앱 명시에 있었다 익스프레스 3과 달리,이 목적은 기지국 고속 라우터에 단지 참조되면, 새로운 버전 익스프레스 5에 복귀했다 그것을로드하십시오.</target>
        </trans-unit>
        <trans-unit id="322f724b66d8c50047b10c341f72a6c913117c32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; object conventionally denotes the Express application. Create it by calling the top-level &lt;code&gt;express()&lt;/code&gt; function exported by the Express module:</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 목적은 종래 익스프레스 응용 프로그램을 의미한다. Express 모듈에서 내 보낸 최상위 &lt;code&gt;express()&lt;/code&gt; 함수 를 호출하여 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d2eb7a6d67f2af542c52887819aa5c7a9ea35e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; object has methods for</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 객체는 방법이있다</target>
        </trans-unit>
        <trans-unit id="0942753a74f14391c17666295ada55f0357a2421" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; returned by &lt;code&gt;express()&lt;/code&gt; is in fact a JavaScript &lt;code&gt;Function&lt;/code&gt;, designed to be passed to Node&amp;rsquo;s HTTP servers as a callback to handle requests. This makes it easy to provide both HTTP and HTTPS versions of your app with the same code base, as the app does not inherit from these (it is simply a callback):</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 에 의해 반환 &lt;code&gt;express()&lt;/code&gt; 실제로 자바 스크립트입니다 &lt;code&gt;Function&lt;/code&gt; 핸들 요청에 대한 콜백으로 노드의 HTTP 서버에 전달 될 수 있도록 설계. 이렇게하면 앱이 이들로부터 상속받지 않기 때문에 동일한 코드 기반으로 앱의 HTTP 및 HTTPS 버전을 모두 쉽게 제공 할 수 있습니다 (단순히 콜백 임).</target>
        </trans-unit>
        <trans-unit id="15504d5c9867f072a0b5e7041ff31d51029b40d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; parameter can be a &lt;code&gt;Buffer&lt;/code&gt; object, a &lt;code&gt;String&lt;/code&gt;, an object, &lt;code&gt;Boolean&lt;/code&gt;, or an &lt;code&gt;Array&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 파라미터가 될 수있는 &lt;code&gt;Buffer&lt;/code&gt; 개체하는 &lt;code&gt;String&lt;/code&gt; , 객체, &lt;code&gt;Boolean&lt;/code&gt; 또는 &lt;code&gt;Array&lt;/code&gt; . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="3710b539edaf72141eda35322195cb5211c30446" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; parameter can be a &lt;code&gt;Buffer&lt;/code&gt; object, a &lt;code&gt;String&lt;/code&gt;, an object, or an &lt;code&gt;Array&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 파라미터가 될 수있는 &lt;code&gt;Buffer&lt;/code&gt; 개체하는 &lt;code&gt;String&lt;/code&gt; , 객체 또는 &lt;code&gt;Array&lt;/code&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="646ee064f4d7aac435257422c741d543065adf38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encode&lt;/code&gt; option allows you to choose the function used for cookie value encoding. Does not support asynchronous functions.</source>
          <target state="translated">&lt;code&gt;encode&lt;/code&gt; 옵션은 쿠키 값 인코딩에 사용되는 기능을 선택할 수 있습니다. 비동기 기능을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dcde2c62c28f339505069f2c78c0d47a8cc0096e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;express-generator&lt;/code&gt; package installs the &lt;code&gt;express&lt;/code&gt; command-line tool. Use the following command to do so:</source>
          <target state="translated">&lt;code&gt;express-generator&lt;/code&gt; 패키지는 설치 &lt;code&gt;express&lt;/code&gt; 명령 줄 도구를. 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="fa33f6c71acb5cd1027066747426935e8d3abbf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module is no longer needed, unless you need to directly work with it (socket.io/SPDY/HTTPS). The app can be started by using the &lt;code&gt;app.listen()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; 당신이 (socket.io/SPDY/HTTPS)와 직접 작업에 필요하지 않는 한 모듈은 더 이상 필요하지 않습니다. &lt;code&gt;app.listen()&lt;/code&gt; 함수를 사용하여 앱을 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d1384e2c629872060ee158c830dde728621143f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-modified-since&lt;/code&gt; request header is specified and &lt;code&gt;last-modified&lt;/code&gt; request header is equal to or earlier than the &lt;code&gt;modified&lt;/code&gt; response header.</source>
          <target state="translated">&lt;code&gt;if-modified-since&lt;/code&gt; 요청 헤더가 지정되고, &lt;code&gt;last-modified&lt;/code&gt; 요청 헤더는 동일하거나보다 이전 &lt;code&gt;modified&lt;/code&gt; 응답 헤더.</target>
        </trans-unit>
        <trans-unit id="4b139985ad45a6255e1c2f1a60421b2f0fbbd846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-none-match&lt;/code&gt; request header is &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if-none-match&lt;/code&gt; 요청 헤더이다 &lt;code&gt;*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef1552976afa7fe055a52d204daed39fa8c98dee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if-none-match&lt;/code&gt; request header, after being parsed into its directives, does not match the &lt;code&gt;etag&lt;/code&gt; response header.</source>
          <target state="translated">&lt;code&gt;if-none-match&lt;/code&gt; 요청 헤더는 그 지시에 구문 분석 한 후, 일치하지 않는 &lt;code&gt;etag&lt;/code&gt; 응답 헤더를.</target>
        </trans-unit>
        <trans-unit id="a2ef33f6b802f3fa64f468732ef34ea70c4a5ab5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json spaces&lt;/code&gt; application property is disabled by default in Express 4.</source>
          <target state="translated">&lt;code&gt;json spaces&lt;/code&gt; 응용 프로그램 속성은 익스프레스 4 기본적으로 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3f5170b81dcb3fc1fe5d48c64ba8dcc9163863f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxAge&lt;/code&gt; option is a convenience option for setting &amp;ldquo;expires&amp;rdquo; relative to the current time in milliseconds. The following is equivalent to the second example above.</source>
          <target state="translated">&lt;code&gt;maxAge&lt;/code&gt; 옵션은 밀리 초 단위로 현재 시간을 기준으로 설정하는 편리한 옵션입니다 &quot;만료&quot;. 다음은 위의 두 번째 예와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ee985fff3d87125feddfb563c4b7ac49b311a5ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function.</source>
          <target state="translated">&lt;code&gt;mount&lt;/code&gt; 가 부모 애플 리케이션에 장착 될 때 이벤트는, 하위 응용 프로그램에 발생합니다. 부모 앱은 콜백 함수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="39db5f1c6b6deff262849b77da59d5bb09d64b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter is an object that can have the following properties.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 매개 변수는 다음과 같은 속성을 가질 수있는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="03e608ced78a8bb15c5e52c1e15cf30f2fdbfdfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req.baseUrl&lt;/code&gt; property is similar to the &lt;a href=&quot;#app.mountpath&quot;&gt;mountpath&lt;/a&gt; property of the &lt;code&gt;app&lt;/code&gt; object, except &lt;code&gt;app.mountpath&lt;/code&gt; returns the matched path pattern(s).</source>
          <target state="translated">&lt;code&gt;req.baseUrl&lt;/code&gt; 의 속성은 비슷합니다 &lt;a href=&quot;#app.mountpath&quot;&gt;경로 (mountpath)의&lt;/a&gt; 의 특성 &lt;code&gt;app&lt;/code&gt; 을 제외하고, 객체 &lt;code&gt;app.mountpath&lt;/code&gt; 반환 일치하는 경로 패턴 (들).</target>
        </trans-unit>
        <trans-unit id="97664149cc7813b09c11f3d26721f8d091db904b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; (request) and &lt;code&gt;res&lt;/code&gt; (response) are the exact same objects that Node provides, so you can invoke &lt;code&gt;req.pipe()&lt;/code&gt;, &lt;code&gt;req.on('data', callback)&lt;/code&gt;, and anything else you would do without Express involved.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; (요청시) 및 &lt;code&gt;res&lt;/code&gt; (응답)는 호출 할 수 있도록 노드가 제공하는 동일한 개체 &lt;code&gt;req.pipe()&lt;/code&gt; , &lt;code&gt;req.on('data', callback)&lt;/code&gt; , 당신은 익스프레스없이 할 것입니다 무엇을하고있었습니다.</target>
        </trans-unit>
        <trans-unit id="d7840a4b9899b464f407be3492025caedf59ca8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; object is an enhanced version of Node&amp;rsquo;s own request object and supports all &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot;&gt;built-in fields and methods&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; 객체는 노드의 자신의 요청 객체의 향상된 버전이며 모든 지원 &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_incomingmessage&quot;&gt;내장 필드 및 메소드&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f4cef768a6774c9602c48cd9ac1ab6e1dcea3423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;req&lt;/code&gt; object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as &lt;code&gt;req&lt;/code&gt; (and the HTTP response is &lt;code&gt;res&lt;/code&gt;) but its actual name is determined by the parameters to the callback function in which you&amp;rsquo;re working.</source>
          <target state="translated">&lt;code&gt;req&lt;/code&gt; 객체는 HTTP 요청을 나타내며 요청 쿼리 문자열, 매개 변수, 몸, HTTP 헤더 등의 속성을 가지고있다. 이 문서와 규칙에 따라 객체는 항상 &lt;code&gt;req&lt;/code&gt; (및 HTTP 응답은 &lt;code&gt;res&lt;/code&gt; )라고하지만 실제 이름은 작업중 인 콜백 함수의 매개 변수에 의해 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="ce00b7b794b62165916a53daadcdc131b5c48602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res.sendfile()&lt;/code&gt; function has been replaced by a camel-cased version &lt;code&gt;res.sendFile()&lt;/code&gt; in Express 5.</source>
          <target state="translated">&lt;code&gt;res.sendfile()&lt;/code&gt; 함수는 낙타 맡았다 버전으로 대체 된 &lt;code&gt;res.sendFile()&lt;/code&gt; 익스프레스 5인치</target>
        </trans-unit>
        <trans-unit id="d91c6af758be8a5f933aee2c3d9bb08e9588bcb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res.statusCode&lt;/code&gt; is set from &lt;code&gt;err.status&lt;/code&gt; (or &lt;code&gt;err.statusCode&lt;/code&gt;). If this value is outside the 4xx or 5xx range, it will be set to 500.</source>
          <target state="translated">&lt;code&gt;res.statusCode&lt;/code&gt; 은 에서 설정된 &lt;code&gt;err.status&lt;/code&gt; (또는 &lt;code&gt;err.statusCode&lt;/code&gt; ). 이 값이 4xx 또는 5xx 범위를 벗어나면 500으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9294c3767003c3ea14f768625ec79e6c8099dce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res.statusMessage&lt;/code&gt; is set according to the status code.</source>
          <target state="translated">&lt;code&gt;res.statusMessage&lt;/code&gt; 는 상태 코드에 따라 설정된다.</target>
        </trans-unit>
        <trans-unit id="665e873d76738ff5cdb789eddd585b08214508f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res&lt;/code&gt; object is an enhanced version of Node&amp;rsquo;s own response object and supports all &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot;&gt;built-in fields and methods&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; 객체는 노드 자체의 응답 객체의 향상된 버전이며 모든 지원 &lt;a href=&quot;https://nodejs.org/api/http.html#http_class_http_serverresponse&quot;&gt;내장 필드 및 메소드&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4e86c4c9c4020c1f3800c6056f4d8c2e4e17dca7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;res&lt;/code&gt; object represents the HTTP response that an Express app sends when it gets an HTTP request.</source>
          <target state="translated">&lt;code&gt;res&lt;/code&gt; 객체는 HTTP 요청을 얻을 때 익스프레스 앱을 전송하는 HTTP 응답을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="da2836d9568d8cc693f28fc9fda795c6af3a7f41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reviver&lt;/code&gt; option is passed directly to &lt;code&gt;JSON.parse&lt;/code&gt; as the second argument. You can find more information on this argument &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter&quot;&gt;in the MDN documentation about JSON.parse&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;reviver&lt;/code&gt; 옵션에 직접 전달 &lt;code&gt;JSON.parse&lt;/code&gt; 두 번째 인수로. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter&quot;&gt;JSON.parse에 대한 MDN 문서&lt;/a&gt; 에서이 인수 에 대한 자세한 정보를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dc3b090da72862a26917330a106d605ca7385cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root&lt;/code&gt; argument specifies the root directory from which to serve static assets. For more information on the &lt;code&gt;options&lt;/code&gt; argument, see &lt;a href=&quot;../index#express.static&quot;&gt;express.static&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; 인수는 고정 자산을 제공하는의 루트 디렉토리를 지정합니다. &lt;code&gt;options&lt;/code&gt; 인수 에 대한 자세한 내용 은 &lt;a href=&quot;../index#express.static&quot;&gt;express.static을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="09ae8335ab9e3498dcb6c17a9a88f87d7bd082f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root&lt;/code&gt; argument specifies the root directory from which to serve static assets. The function determines the file to serve by combining &lt;code&gt;req.url&lt;/code&gt; with the provided &lt;code&gt;root&lt;/code&gt; directory. When a file is not found, instead of sending a 404 response, it instead calls &lt;code&gt;next()&lt;/code&gt; to move on to the next middleware, allowing for stacking and fall-backs.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; 인수는 고정 자산을 제공하는의 루트 디렉토리를 지정합니다. 이 함수는 &lt;code&gt;req.url&lt;/code&gt; 을 제공된 &lt;code&gt;root&lt;/code&gt; 디렉토리 와 결합하여 제공 할 파일을 결정합니다 . 파일을 찾지 못하면 404 응답을 보내는 대신 &lt;code&gt;next()&lt;/code&gt; 를 호출 하여 다음 미들웨어로 이동하여 스택 및 폴백을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="06d4fa1ded976d7ba4ea0c31fd91e3a000e303c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.METHOD()&lt;/code&gt; methods provide the routing functionality in Express, where METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are &lt;code&gt;router.get()&lt;/code&gt;, &lt;code&gt;router.post()&lt;/code&gt;, &lt;code&gt;router.put()&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;code&gt;router.METHOD()&lt;/code&gt; 메소드는 메소드가 소문자로, 등등 GET, PUT, POST, 및 HTTP와 같은 방식의 하나 인 고속에서 라우팅 기능을 제공한다. 따라서 실제 메소드는 &lt;code&gt;router.get()&lt;/code&gt; , &lt;code&gt;router.post()&lt;/code&gt; , &lt;code&gt;router.put()&lt;/code&gt; 등입니다.</target>
        </trans-unit>
        <trans-unit id="0f5c090896a67738df95a8ff1ebef6ab21ca885e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.get()&lt;/code&gt; function is automatically called for the HTTP &lt;code&gt;HEAD&lt;/code&gt; method in addition to the &lt;code&gt;GET&lt;/code&gt; method if &lt;code&gt;router.head()&lt;/code&gt; was not called for the path before &lt;code&gt;router.get()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;router.get()&lt;/code&gt; 함수는 자동으로 HTTP에 대해 호출 &lt;code&gt;HEAD&lt;/code&gt; 의 받는 사람뿐만 아니라 방법 &lt;code&gt;GET&lt;/code&gt; 의 경우 방법 &lt;code&gt;router.head()&lt;/code&gt; 이전 경로를 호출되지 않은 &lt;code&gt;router.get()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b88921f8fbc9d3675fa2dda9005ee9371a119b41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;router.use()&lt;/code&gt; method also supports named parameters so that your mount points for other routers can benefit from preloading using named parameters.</source>
          <target state="translated">&lt;code&gt;router.use()&lt;/code&gt; 다른 라우터에 대한 마운트 포인트를 명명 된 매개 변수를 사용하여 사전로드 혜택을 누릴 수 있도록 방법은 명명 된 매개 변수를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="93628b545dd9a8cf446c1702f0dafaac83b43b54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; parameter is the maximum size of the resource.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 매개 변수는 리소스의 최대 크기이다.</target>
        </trans-unit>
        <trans-unit id="419eab728395557afd72910235674dc9431b1fb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trust proxy&lt;/code&gt; setting is implemented using the &lt;a href=&quot;https://www.npmjs.com/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">&lt;code&gt;trust proxy&lt;/code&gt; 설정은 사용하여 구현됩니다 &lt;a href=&quot;https://www.npmjs.com/package/proxy-addr&quot;&gt;프록시 요지의&lt;/a&gt; 패키지를. 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9e2c34404f445fba4d95e98b4b3a0945269c4bde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; value may be a single MIME type string (such as &amp;ldquo;application/json&amp;rdquo;), an extension name such as &amp;ldquo;json&amp;rdquo;, a comma-delimited list, or an array. For a list or array, the method returns the &lt;em&gt;best&lt;/em&gt; match (if any).</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 값은 &quot;JSON&quot;쉼표로 구분 된 목록 또는 어레이로 (예를 들면 &quot;프로그램 / JSON&quot;와 같은) 하나의 MIME 타입 캐릭터, 확장자 이름 일 수있다. 목록 또는 배열의 경우이 메소드는 &lt;em&gt;가장&lt;/em&gt; 일치하는 항목 (있는 경우)을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5cee7f330a71930eb97bb7a298841b534b9d0c11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; argument is a string that is the file path of the view file to render. This can be an absolute path, or a path relative to the &lt;code&gt;views&lt;/code&gt; setting. If the path does not contain a file extension, then the &lt;code&gt;view engine&lt;/code&gt; setting determines the file extension. If the path does contain a file extension, then Express will load the module for the specified template engine (via &lt;code&gt;require()&lt;/code&gt;) and render it using the loaded module&amp;rsquo;s &lt;code&gt;__express&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;view&lt;/code&gt; 인수는 렌더링 할 뷰 파일의 파일 경로 문자열입니다. 절대 경로이거나 &lt;code&gt;views&lt;/code&gt; 설정에 상대적인 경로 일 수 있습니다 . 경로에 파일 확장자가없는 경우 &lt;code&gt;view engine&lt;/code&gt; 설정에 따라 파일 확장자가 결정됩니다. 경로에 파일 확장자가 포함되어 있으면 Express는 지정된 템플릿 엔진에 대한 모듈 ( &lt;code&gt;require()&lt;/code&gt; 통해 )을 로드하고로드 된 모듈의 &lt;code&gt;__express&lt;/code&gt; 함수를 사용하여 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="7764713403915d90175dcfe6fa9815431bfa7fa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wrap()&lt;/code&gt; function is a wrapper that catches rejected promises and calls &lt;code&gt;next()&lt;/code&gt; with the error as the first argument. For details, see &lt;a href=&quot;https://strongloop.com/strongblog/async-error-handling-expressjs-es7-promises-generators/#cleaner-code-with-generators&quot;&gt;Asynchronous Error Handling in Express with Promises, Generators and ES7&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;wrap()&lt;/code&gt; 함수는 어획량이 약속과 통화를 거부하는 래퍼 &lt;code&gt;next()&lt;/code&gt; 첫 번째 인수로 오류가있는. 자세한 내용 &lt;a href=&quot;https://strongloop.com/strongblog/async-error-handling-expressjs-es7-promises-generators/#cleaner-code-with-generators&quot;&gt;은 약속, 생성기 및 ES7을 사용하여 Express에서 비동기 오류 처리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="636f2eb8f455afb32588c3b71cd7e3a000c6d4b4" translate="yes" xml:space="preserve">
          <source>The API documentation has explicit entries only for the most popular HTTP methods &lt;code&gt;app.get()&lt;/code&gt;, &lt;code&gt;app.post()&lt;/code&gt;, &lt;code&gt;app.put()&lt;/code&gt;, and &lt;code&gt;app.delete()&lt;/code&gt;. However, the other methods listed above work in exactly the same way.</source>
          <target state="translated">API 설명서에는 가장 많이 사용되는 HTTP 메서드 &lt;code&gt;app.get()&lt;/code&gt; , &lt;code&gt;app.post()&lt;/code&gt; , &lt;code&gt;app.put()&lt;/code&gt; 및 &lt;code&gt;app.delete()&lt;/code&gt; 대해서만 명시적인 항목이 있습니다. 그러나 위에 나열된 다른 방법은 정확히 같은 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6444e8516fffae4ffd8a27433e5b7e79a09e4281" translate="yes" xml:space="preserve">
          <source>The ETag functionality is implemented using the &lt;a href=&quot;https://www.npmjs.org/package/etag&quot;&gt;etag&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">ETag 기능은 &lt;a href=&quot;https://www.npmjs.org/package/etag&quot;&gt;etag&lt;/a&gt; 패키지를 사용하여 구현 됩니다. 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="18cb1b398fe0d4ac163e09dc3656c3e838f6239d" translate="yes" xml:space="preserve">
          <source>The Express API consists of various methods and properties on the request and response objects. These are inherited by prototype. There are two extension points for the Express API:</source>
          <target state="translated">Express API는 요청 및 응답 개체에 대한 다양한 메서드와 속성으로 구성됩니다. 이들은 프로토 타입에 의해 상속됩니다. Express API에는 두 가지 확장 점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa23fc0be6e7667e622057a6857f7dee3e50b309" translate="yes" xml:space="preserve">
          <source>The Express application object can be referred from the &lt;a href=&quot;#req&quot;&gt;request object&lt;/a&gt; and the &lt;a href=&quot;#res&quot;&gt;response object&lt;/a&gt; as &lt;code&gt;req.app&lt;/code&gt;, and &lt;code&gt;res.app&lt;/code&gt;, respectively.</source>
          <target state="translated">익스프레스 애플리케이션 객체로부터 참조 가능한 &lt;a href=&quot;#req&quot;&gt;요청 객체&lt;/a&gt; 및 &lt;a href=&quot;#res&quot;&gt;응답 객체&lt;/a&gt; 로서 &lt;code&gt;req.app&lt;/code&gt; 및 &lt;code&gt;res.app&lt;/code&gt; 각각.</target>
        </trans-unit>
        <trans-unit id="d15ee51e33a595f230c9f6ecde552a577aa38791" translate="yes" xml:space="preserve">
          <source>The NODE_ENV environment variable specifies the environment in which an application is running (usually, development or production). One of the simplest things you can do to improve performance is to set NODE_ENV to &amp;ldquo;production.&amp;rdquo;</source>
          <target state="translated">NODE_ENV 환경 변수는 응용 프로그램이 실행되는 환경 (일반적으로 개발 또는 프로덕션)을 지정합니다. 성능을 향상시키기 위해 수행 할 수있는 가장 간단한 작업 중 하나는 NODE_ENV를&amp;ldquo;production&amp;rdquo;으로 설정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="99668da26e842a1fa1567212fe4d4df926fffbba" translate="yes" xml:space="preserve">
          <source>The URL path on which a router instance was mounted.</source>
          <target state="translated">라우터 인스턴스가 마운트 된 URL 경로입니다.</target>
        </trans-unit>
        <trans-unit id="0d61d6b96b69739da66dd508a20eb3f5655e2ece" translate="yes" xml:space="preserve">
          <source>The `trust proxy` setting is implemented using the &lt;a href=&quot;https://www.npmjs.org/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt; package. For more information, see its documentation.</source>
          <target state="translated">'trust proxy'설정은 &lt;a href=&quot;https://www.npmjs.org/package/proxy-addr&quot;&gt;proxy-addr&lt;/a&gt; 패키지를 사용하여 구현 됩니다. 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="71a453ec834b9e12e465dd375ed1853982d627e6" translate="yes" xml:space="preserve">
          <source>The above example has a couple of trivial statements from the &lt;code&gt;readFile&lt;/code&gt; call. If &lt;code&gt;readFile&lt;/code&gt; causes an error, then it passes the error to Express, otherwise you quickly return to the world of synchronous error handling in the next handler in the chain. Then, the example above tries to process the data. If this fails then the synchronous error handler will catch it. If you had done this processing inside the &lt;code&gt;readFile&lt;/code&gt; callback then the application might exit and the Express error handlers would not run.</source>
          <target state="translated">위의 예제에는 &lt;code&gt;readFile&lt;/code&gt; 호출 의 몇 가지 간단한 설명이 있습니다 . 경우 &lt;code&gt;readFile&lt;/code&gt; 오류가 발생, 그것은 그렇지 않으면 당신은 신속 체인의 다음 핸들러에서 동기 오류 처리의 세계로 돌아가, 고속으로 오류를 전달합니다. 그런 다음 위의 예는 데이터 처리를 시도합니다. 이것이 실패하면 동기 오류 처리기가이를 잡습니다. &lt;code&gt;readFile&lt;/code&gt; 콜백 내에서이 처리를 수행 한 경우 응용 프로그램이 종료되고 Express 오류 핸들러가 실행되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6c6ef511007a581b79e3699b304a80c0405aac7" translate="yes" xml:space="preserve">
          <source>The above example uses a &lt;code&gt;try...catch&lt;/code&gt; block to catch errors in the asynchronous code and pass them to Express. If the &lt;code&gt;try...catch&lt;/code&gt; block were omitted, Express would not catch the error since it is not part of the synchronous handler code.</source>
          <target state="translated">위의 예제는 &lt;code&gt;try...catch&lt;/code&gt; 블록을 사용 하여 비동기 코드에서 오류를 잡아 Express로 전달합니다. 는 IF &lt;code&gt;try...catch&lt;/code&gt; 블록이 생략 된 것이 동기 처리기 코드의 일부가 아니므로, Express는 오류를 잡을 것입니다.</target>
        </trans-unit>
        <trans-unit id="19007f1377bc5269a421d2ca4a38221ad96af569" translate="yes" xml:space="preserve">
          <source>The above implementation completely changes the original signature of &lt;code&gt;res.sendStatus&lt;/code&gt;. It now accepts a status code, encoding type, and the message to be sent to the client.</source>
          <target state="translated">위의 구현은 &lt;code&gt;res.sendStatus&lt;/code&gt; 의 원래 서명을 완전히 변경합니다 . 이제 상태 코드, 인코딩 유형 및 클라이언트로 보낼 메시지를 수락합니다.</target>
        </trans-unit>
        <trans-unit id="d2eb5b722580e926cc275f013178b13b598d9fe9" translate="yes" xml:space="preserve">
          <source>The accompanying version 3 &lt;code&gt;package.json&lt;/code&gt; file might look something like this:</source>
          <target state="translated">함께 제공되는 버전 3 &lt;code&gt;package.json&lt;/code&gt; 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f9285091cb60a2f048078960f37f9793691fe017" translate="yes" xml:space="preserve">
          <source>The app now uses the &lt;code&gt;requestTime&lt;/code&gt; middleware function. Also, the callback function of the root path route uses the property that the middleware function adds to &lt;code&gt;req&lt;/code&gt; (the request object).</source>
          <target state="translated">앱은 이제 &lt;code&gt;requestTime&lt;/code&gt; 미들웨어 기능을 사용합니다 . 또한 루트 경로 라우트의 콜백 함수는 미들웨어 함수가 &lt;code&gt;req&lt;/code&gt; (요청 오브젝트)에 추가하는 특성을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="4f592327481abe53c8da8a91bec1c5299cd0d0f4" translate="yes" xml:space="preserve">
          <source>The app structure created by the generator is just one of many ways to structure Express apps. Feel free to use this structure or modify it to best suit your needs.</source>
          <target state="translated">생성기에서 만든 앱 구조는 Express 앱을 구성하는 여러 가지 방법 중 하나 일뿐입니다. 이 구조를 자유롭게 사용하거나 필요에 맞게 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="4f3dc7ac408979ce55e54c5e6f6011531c7891e1" translate="yes" xml:space="preserve">
          <source>The app will now be able to handle requests to &lt;code&gt;/birds&lt;/code&gt; and &lt;code&gt;/birds/about&lt;/code&gt;, as well as call the &lt;code&gt;timeLog&lt;/code&gt; middleware function that is specific to the route.</source>
          <target state="translated">앱은 이제 &lt;code&gt;/birds&lt;/code&gt; 및 &lt;code&gt;/birds/about&lt;/code&gt; 에 대한 요청을 처리 할 수있을 뿐만 아니라 경로와 관련된 &lt;code&gt;timeLog&lt;/code&gt; 미들웨어 함수를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43564ee35dc45456553e061cd72abe65409e3b07" translate="yes" xml:space="preserve">
          <source>The app will now be able to handle requests to the &lt;code&gt;/birds&lt;/code&gt; and &lt;code&gt;/birds/about&lt;/code&gt; paths, and will call the &lt;code&gt;timeLog&lt;/code&gt; middleware that is specific to the route.</source>
          <target state="translated">앱은 이제 &lt;code&gt;/birds&lt;/code&gt; 및 &lt;code&gt;/birds/about&lt;/code&gt; 경로에 대한 요청을 처리 할 수 ​​있으며 경로와 관련된 &lt;code&gt;timeLog&lt;/code&gt; 미들웨어를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="01ce441d028bb19f6dcd18f3298cb4ad9ec6242c" translate="yes" xml:space="preserve">
          <source>The application property &lt;code&gt;subdomain offset&lt;/code&gt;, which defaults to 2, is used for determining the beginning of the subdomain segments. To change this behavior, change its value using &lt;a href=&quot;index#app.set&quot;&gt;app.set&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램 속성 &lt;code&gt;subdomain offset&lt;/code&gt; 기본값 2)은 하위 도메인 세그먼트의 시작을 결정하는 데 사용됩니다. 이 동작을 변경하려면 &lt;a href=&quot;index#app.set&quot;&gt;app.set을&lt;/a&gt; 사용하여 값을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="62fc2cf45f2b0723ecbe32d7594f5536c451bd6f" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;app.param(name, callback)&lt;/code&gt; method can be altered entirely by passing only a function to &lt;code&gt;app.param()&lt;/code&gt;. This function is a custom implementation of how &lt;code&gt;app.param(name, callback)&lt;/code&gt; should behave - it accepts two parameters and must return a middleware.</source>
          <target state="translated">&lt;code&gt;app.param()&lt;/code&gt; 함수 만 전달 하여 &lt;code&gt;app.param(name, callback)&lt;/code&gt; 메소드 의 동작을 완전히 변경할 수 있습니다 . 이 함수는 &lt;code&gt;app.param(name, callback)&lt;/code&gt; 작동 방식에 대한 사용자 정의 구현입니다 .이 매개 변수는 두 개의 매개 변수를 허용하며 미들웨어를 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="1bb9429ca0b9b2b5fbe9b1561cd435ee0baa0be6" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;router.param(name, callback)&lt;/code&gt; method can be altered entirely by passing only a function to &lt;code&gt;router.param()&lt;/code&gt;. This function is a custom implementation of how &lt;code&gt;router.param(name, callback)&lt;/code&gt; should behave - it accepts two parameters and must return a middleware.</source>
          <target state="translated">의 동작 &lt;code&gt;router.param(name, callback)&lt;/code&gt; 메소드에 기능만을 전달하여 전체적으로 변경 될 수 &lt;code&gt;router.param()&lt;/code&gt; . 이 함수는 &lt;code&gt;router.param(name, callback)&lt;/code&gt; 작동 방식에 대한 사용자 정의 구현입니다. 두 개의 매개 변수를 허용하며 미들웨어를 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="2579c2a1743afc4e5330236fc98952eed78d1243" translate="yes" xml:space="preserve">
          <source>The behavior of this method can become very complicated in complex cases of mounted apps: it is usually better to use &lt;a href=&quot;#req.baseUrl&quot;&gt;req.baseUrl&lt;/a&gt; to get the canonical path of the app.</source>
          <target state="translated">이 방법의 동작은 마운트 된 앱의 복잡한 경우에 매우 복잡해질 수 있습니다. 일반적으로 &lt;a href=&quot;#req.baseUrl&quot;&gt;req.baseUrl&lt;/a&gt; 을 사용 하여 앱의 정식 경로를 얻는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="ce2b3277f296132eef0f6b1e3a6a2ff9176db431" translate="yes" xml:space="preserve">
          <source>The body will be the HTML of the status code message when in production environment, otherwise will be &lt;code&gt;err.stack&lt;/code&gt;.</source>
          <target state="translated">본문은 프로덕션 환경에서 상태 코드 메시지의 HTML이되고 그렇지 않으면 &lt;code&gt;err.stack&lt;/code&gt; 이 됩니다.</target>
        </trans-unit>
        <trans-unit id="a82646d60479b16dff5ceac35aff1e284b2a3487" translate="yes" xml:space="preserve">
          <source>The built-in Express middleware functions &lt;code&gt;express.favicon&lt;/code&gt;, &lt;code&gt;express.logger&lt;/code&gt;, &lt;code&gt;express.methodOverride&lt;/code&gt;, &lt;code&gt;express.session&lt;/code&gt;, &lt;code&gt;express.bodyParser&lt;/code&gt; and &lt;code&gt;express.errorHandler&lt;/code&gt; are no longer available on the &lt;code&gt;express&lt;/code&gt; object. You must install their alternatives manually and load them in the app.</source>
          <target state="translated">내장 된 Express 미들웨어 함수 인 &lt;code&gt;express.favicon&lt;/code&gt; , &lt;code&gt;express.logger&lt;/code&gt; , &lt;code&gt;express.methodOverride&lt;/code&gt; , &lt;code&gt;express.session&lt;/code&gt; , &lt;code&gt;express.bodyParser&lt;/code&gt; 및 &lt;code&gt;express.errorHandler&lt;/code&gt; 는 더 이상 &lt;code&gt;express&lt;/code&gt; 오브젝트 에서 사용할 수 없습니다 . 대안을 수동으로 설치하고 앱에로드해야합니다.</target>
        </trans-unit>
        <trans-unit id="76f8b1a7ae101b67ea30400fb9fa71250d9c3e0e" translate="yes" xml:space="preserve">
          <source>The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen (&lt;code&gt;-&lt;/code&gt;) and the dot (&lt;code&gt;.&lt;/code&gt;) are interpreted literally by string-based paths.</source>
          <target state="translated">문자 &lt;code&gt;?&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; 및 &lt;code&gt;()&lt;/code&gt; 는 정규식 대응의 하위 집합입니다. 하이픈 ( &lt;code&gt;-&lt;/code&gt; )과 점 ( &lt;code&gt;.&lt;/code&gt; )은 문자 그대로 문자열 기반 경로로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="8c4f6de1b84ea0bf3aa72ffef8deb21d304078da" translate="yes" xml:space="preserve">
          <source>The command-line tool to generate an Express app is still &lt;code&gt;express&lt;/code&gt;, but to upgrade to the new version, you must uninstall the Express 3 app generator and then install the new &lt;code&gt;express-generator&lt;/code&gt;.</source>
          <target state="translated">Express 앱을 생성하는 명령 행 도구는 여전히 &lt;code&gt;express&lt;/code&gt; 이지만 새 버전으로 업그레이드하려면 Express 3 앱 생성기를 제거한 후 새 &lt;code&gt;express-generator&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dd9fb68dfb14081773583c810d61b5264d8ccf3d" translate="yes" xml:space="preserve">
          <source>The default engine extension to use when omitted.</source>
          <target state="translated">생략 할 때 사용할 기본 엔진 확장입니다.</target>
        </trans-unit>
        <trans-unit id="35a1f0c09848d7dbf92d2352ae16557dd15abac0" translate="yes" xml:space="preserve">
          <source>The default error handler</source>
          <target state="translated">기본 오류 처리기</target>
        </trans-unit>
        <trans-unit id="8f34da9ad01a9672e52fd904ed294264c2272634" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;debug&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:debug:20170905&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express.</source>
          <target state="translated">종속성 &lt;code&gt;debug&lt;/code&gt; 가 &lt;a href=&quot;https://snyk.io/vuln/npm:debug:20170905&quot;&gt;취약점&lt;/a&gt; 을 해결하기 위해 업데이트 되었지만이 문제는 Express에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="73d1aa9cf8ca71183bc46c337b50290348e33d58" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;forwarded&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/527&quot;&gt;vulnerability&lt;/a&gt;. This may affect your application if the following APIs are used: &lt;code&gt;req.host&lt;/code&gt;, &lt;code&gt;req.hostname&lt;/code&gt;, &lt;code&gt;req.ip&lt;/code&gt;, &lt;code&gt;req.ips&lt;/code&gt;, &lt;code&gt;req.protocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forwarded&lt;/code&gt; 된 종속성 이 &lt;a href=&quot;https://nodesecurity.io/advisories/527&quot;&gt;취약점&lt;/a&gt; 을 해결하기 위해 업데이트되었습니다 . &lt;code&gt;req.host&lt;/code&gt; , &lt;code&gt;req.hostname&lt;/code&gt; , &lt;code&gt;req.ip&lt;/code&gt; , &lt;code&gt;req.ips&lt;/code&gt; , &lt;code&gt;req.protocol&lt;/code&gt; API를 사용하는 경우 애플리케이션에 영향을 줄 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a1bafdd5d44eb8e729df74bd9f9dedb3d2e237fa" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;fresh&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/526&quot;&gt;vulnerability&lt;/a&gt;. This will affect your application if the following APIs are used: &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;req.fresh&lt;/code&gt;, &lt;code&gt;res.json&lt;/code&gt;, &lt;code&gt;res.jsonp&lt;/code&gt;, &lt;code&gt;res.send&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;&lt;code&gt;res.sendFile&lt;/code&gt;, &lt;code&gt;res.sendStatus&lt;/code&gt;.</source>
          <target state="translated">종속성 &lt;code&gt;fresh&lt;/code&gt; 이 해결되었습니다 &lt;a href=&quot;https://nodesecurity.io/advisories/526&quot;&gt;취약점을&lt;/a&gt; . 다음 API를 사용하는 경우이 응용 프로그램에 영향을 미칠 것입니다 : &lt;code&gt;express.static&lt;/code&gt; , &lt;code&gt;req.fresh&lt;/code&gt; , &lt;code&gt;res.json&lt;/code&gt; , &lt;code&gt;res.jsonp&lt;/code&gt; , &lt;code&gt;res.send&lt;/code&gt; , &lt;code&gt;res.sendfile&lt;/code&gt; &lt;code&gt;res.sendFile&lt;/code&gt; , &lt;code&gt;res.sendStatus&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="12ad23e58a9efcc0e4015d2084a124afe512cc11" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;mime&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://nodesecurity.io/advisories/535&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express.</source>
          <target state="translated">종속성 &lt;code&gt;mime&lt;/code&gt; 가 &lt;a href=&quot;https://nodesecurity.io/advisories/535&quot;&gt;취약점&lt;/a&gt; 을 해결하기 위해 업데이트 되었지만이 문제는 Express에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8c7c7fe87b35b93cf83d36b993636f41764188b0" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;ms&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:ms:20170412&quot;&gt;vulnerability&lt;/a&gt;. This may affect your application if untrusted string input is passed to the &lt;code&gt;maxAge&lt;/code&gt; option in the following APIs: &lt;code&gt;express.static&lt;/code&gt;, &lt;code&gt;res.sendfile&lt;/code&gt;, and &lt;code&gt;res.sendFile&lt;/code&gt;.</source>
          <target state="translated">종속성 &lt;code&gt;ms&lt;/code&gt; 가 &lt;a href=&quot;https://snyk.io/vuln/npm:ms:20170412&quot;&gt;취약점&lt;/a&gt; 을 해결하기 위해 업데이트되었습니다 . 신뢰할 수없는 문자열 입력이 전달되는 경우이 응용 프로그램에 영향을 미칠 수 &lt;code&gt;maxAge&lt;/code&gt; : 다음 API에서 옵션 &lt;code&gt;express.static&lt;/code&gt; , &lt;code&gt;res.sendfile&lt;/code&gt; 및 &lt;code&gt;res.sendFile&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb8f9b239e31ccbd89b7d9750312cd9c985a89af" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;qs&lt;/code&gt; has been updated to address a &lt;a href=&quot;https://snyk.io/vuln/npm:qs:20170213&quot;&gt;vulnerability&lt;/a&gt;, but this issue does not impact Express. Updating to 4.15.2 is a good practice, but not required to address the vulnerability.</source>
          <target state="translated">종속성 &lt;code&gt;qs&lt;/code&gt; 가 &lt;a href=&quot;https://snyk.io/vuln/npm:qs:20170213&quot;&gt;취약점&lt;/a&gt; 을 해결하기 위해 업데이트 되었지만이 문제는 Express에 영향을 미치지 않습니다. 4.15.2로 업데이트하는 것이 좋지만 취약점을 해결하기 위해 필요한 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f6ffa71268873e9f1db06246219951b6250e7a8c" translate="yes" xml:space="preserve">
          <source>The dependency &lt;code&gt;send&lt;/code&gt; has been updated to provide a protection against a &lt;a href=&quot;https://nodejs.org/en/blog/vulnerability/september-2017-path-validation/&quot;&gt;Node.js 8.5.0 vulnerability&lt;/a&gt;. This only impacts running Express on the specific Node.js version 8.5.0.</source>
          <target state="translated">종속성 &lt;code&gt;send&lt;/code&gt; 은 &lt;a href=&quot;https://nodejs.org/en/blog/vulnerability/september-2017-path-validation/&quot;&gt;Node.js 8.5.0 취약점&lt;/a&gt; 으로부터 보호하기 위해 업데이트되었습니다 . 이는 특정 Node.js 버전 8.5.0에서 Express 실행에만 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="0d5b14bebd29280c1f0b59553c644dc20ce5f43e" translate="yes" xml:space="preserve">
          <source>The example above is actually a working server: Go ahead and click on the URL shown. You&amp;rsquo;ll get a response, with real-time logs on the page, and any changes you make will be reflected in real time. This is powered by &lt;a href=&quot;https://runkit.com&quot;&gt;RunKit&lt;/a&gt;, which provides an interactive JavaScript playground connected to a complete Node environment that runs in your web browser. Below are instructions for running the same app on your local machine.</source>
          <target state="translated">위의 예는 실제로 작동하는 서버입니다. 계속해서 표시된 URL을 클릭하십시오. 페이지에 실시간 로그가 포함 된 응답이 표시되며 변경 사항이 실시간으로 반영됩니다. 웹 브라우저에서 실행되는 완전한 노드 환경에 연결된 대화식 JavaScript 놀이터를 제공하는 &lt;a href=&quot;https://runkit.com&quot;&gt;RunKit&lt;/a&gt; 에 의해 구동됩니다 . 아래는 로컬 컴퓨터에서 동일한 앱을 실행하기위한 지침입니다.</target>
        </trans-unit>
        <trans-unit id="67d80e19feb2bea29bde8221fad6260bc0e6dcdf" translate="yes" xml:space="preserve">
          <source>The extended query parser is based on &lt;a href=&quot;https://www.npmjs.org/package/qs&quot;&gt;qs&lt;/a&gt;.</source>
          <target state="translated">확장 쿼리 파서는 &lt;a href=&quot;https://www.npmjs.org/package/qs&quot;&gt;qs를&lt;/a&gt; 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="71035a52a34fae9e701510e711aacb671f3e940d" translate="yes" xml:space="preserve">
          <source>The first is number of consecutive failed attempts by the same user name and IP address.</source>
          <target state="translated">첫 번째는 동일한 사용자 이름 및 IP 주소에 의한 연속 실패 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="9d064391c2c58b65cec66e432fa3cce2c567f934" translate="yes" xml:space="preserve">
          <source>The first parameter of this function is the name of the URL parameter that should be captured, the second parameter can be any JavaScript object which might be used for returning the middleware implementation.</source>
          <target state="translated">이 함수의 첫 번째 매개 변수는 캡처해야하는 URL 매개 변수의 이름이며 두 번째 매개 변수는 미들웨어 구현을 리턴하는 데 사용될 수있는 JavaScript 오브젝트 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e67447c702b1616d7cb4807161e65e722cfa2e4" translate="yes" xml:space="preserve">
          <source>The following are some examples of JSONP responses using the same code:</source>
          <target state="translated">다음은 동일한 코드를 사용하는 JSONP 응답의 몇 가지 예입니다.</target>
        </trans-unit>
        <trans-unit id="27771c350437291bfc4199d8a18151bdf4220b74" translate="yes" xml:space="preserve">
          <source>The following callback is executed for requests to &lt;code&gt;/secret&lt;/code&gt; whether using GET, POST, PUT, DELETE, or any other HTTP request method:</source>
          <target state="translated">다음 콜백은 GET, POST, PUT, DELETE 또는 기타 HTTP 요청 메소드를 사용하는지 여부에 관계없이 &lt;code&gt;/secret&lt;/code&gt; 요청에 대해 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="f183a5de5e3641cf6dea5713c604982ebef6c40c" translate="yes" xml:space="preserve">
          <source>The following code is an example of a very basic route.</source>
          <target state="translated">다음 코드는 매우 기본적인 경로의 예입니다.</target>
        </trans-unit>
        <trans-unit id="2112d26073621878d92877e16883b0699e34e46c" translate="yes" xml:space="preserve">
          <source>The following code is an example of implementing a very simple template engine for rendering &lt;code&gt;.ntl&lt;/code&gt; files.</source>
          <target state="translated">다음 코드는 &lt;code&gt;.ntl&lt;/code&gt; 파일 을 렌더링하기 위해 매우 간단한 템플릿 엔진을 구현하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="854bf564b7531125ef409382bc5152acb792aa64" translate="yes" xml:space="preserve">
          <source>The following code is an example of routes that are defined for the GET and the POST methods to the root of the app.</source>
          <target state="translated">다음 코드는 앱의 루트에 대한 GET 및 POST 메소드에 대해 정의 된 경로의 예입니다.</target>
        </trans-unit>
        <trans-unit id="c8a532f5d008e5f4d4e7a4f4d3376ffa8481a22c" translate="yes" xml:space="preserve">
          <source>The following code rewrites how the value of &lt;code&gt;req.ip&lt;/code&gt; is to be derived. Now, it simply returns the value of the &lt;code&gt;Client-IP&lt;/code&gt; request header.</source>
          <target state="translated">다음 코드는 &lt;code&gt;req.ip&lt;/code&gt; 의 값 이 파생되는 방법을 다시 작성합니다 . 이제 단순히 &lt;code&gt;Client-IP&lt;/code&gt; 요청 헤더 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0683f525112e4f9ca9c79be2ffdebe3c222996d3" translate="yes" xml:space="preserve">
          <source>The following example code replicates the middleware system that is shown above for application-level middleware, by using router-level middleware:</source>
          <target state="translated">다음 예제 코드는 라우터 레벨 미들웨어를 사용하여 애플리케이션 레벨 미들웨어에 대해 위에 표시된 미들웨어 시스템을 복제합니다.</target>
        </trans-unit>
        <trans-unit id="bc674592472fd34344a233cc2565a1a76b804171" translate="yes" xml:space="preserve">
          <source>The following example creates a router as a module, loads a middleware function in it, defines some routes, and mounts the router module on a path in the main app.</source>
          <target state="translated">다음 예제는 라우터를 모듈로 작성하고 미들웨어 기능을로드하고 일부 라우트를 정의한 후 기본 앱의 경로에 라우터 모듈을 마운트합니다.</target>
        </trans-unit>
        <trans-unit id="2f8df33945f09449cf748cbda26de967201b2596" translate="yes" xml:space="preserve">
          <source>The following example creates a router as a module, loads middleware in it, defines some routes, and mounts it on a path on the main app.</source>
          <target state="translated">다음 예제는 라우터를 모듈로 작성하고 미들웨어를로드하고 일부 라우트를 정의한 후 기본 앱의 경로에 마운트합니다.</target>
        </trans-unit>
        <trans-unit id="cedad6af7293e1fbecbd439fc94b5500bf411ad5" translate="yes" xml:space="preserve">
          <source>The following example illustrates installing and loading the cookie-parsing middleware function &lt;code&gt;cookie-parser&lt;/code&gt;.</source>
          <target state="translated">다음 예는 쿠키 구문 분석 미들웨어 기능 &lt;code&gt;cookie-parser&lt;/code&gt; 설치 및로드를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="64fbe352f4fa8ee31f7001ea1b6933d9579c3987" translate="yes" xml:space="preserve">
          <source>The following example illustrates using &lt;code&gt;res.sendFile&lt;/code&gt; to provide fine-grained support for serving files:</source>
          <target state="translated">다음 예제는 &lt;code&gt;res.sendFile&lt;/code&gt; 을 사용하여 파일 제공에 대한 세분화 된 지원을 제공하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="9df7f733b626d181e924fa4ba8bad6adc0bde52b" translate="yes" xml:space="preserve">
          <source>The following example shows how to use body-parsing middleware to populate &lt;code&gt;req.body&lt;/code&gt;.</source>
          <target state="translated">다음 예는 본문 구문 분석 미들웨어를 사용하여 &lt;code&gt;req.body&lt;/code&gt; 를 채우는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="194fd91ca9b0f6ce68763a85171bd1775c53eba9" translate="yes" xml:space="preserve">
          <source>The following example would respond with &lt;code&gt;{ &quot;message&quot;: &quot;hey&quot; }&lt;/code&gt; when the &lt;code&gt;Accept&lt;/code&gt; header field is set to &amp;ldquo;application/json&amp;rdquo; or &amp;ldquo;*/json&amp;rdquo; (however if it is &amp;ldquo;*/*&amp;rdquo;, then the response will be &amp;ldquo;hey&amp;rdquo;).</source>
          <target state="translated">다음 예는 &lt;code&gt;Accept&lt;/code&gt; 헤더 필드가 &quot;application / json&quot;또는 &quot;* / json&quot;으로 설정되어 있으면 &lt;code&gt;{ &quot;message&quot;: &quot;hey&quot; }&lt;/code&gt; 응답합니다 (단, &quot;* / *&quot;인 경우 응답이 됨). &quot;야&quot;).</target>
        </trans-unit>
        <trans-unit id="d19f8fc615e192261cd7c29898d3b4f7c2e34ae9" translate="yes" xml:space="preserve">
          <source>The following examples illustrate defining simple routes.</source>
          <target state="translated">다음 예는 간단한 경로 정의를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="380794ce66523ed44188fd85a6b21fbfde8e3b05" translate="yes" xml:space="preserve">
          <source>The following figure shows the elements of a middleware function call:</source>
          <target state="translated">다음 그림은 미들웨어 함수 호출의 요소를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="862820bceeab2b0882f2ba366cf2bccb81d7ea6d" translate="yes" xml:space="preserve">
          <source>The following method names have been pluralized. In Express 4, using the old methods resulted in a deprecation warning. Express 5 no longer supports them at all:</source>
          <target state="translated">다음과 같은 방법 명이 복수화되었습니다. Express 4에서 이전 방법을 사용하면 사용 중단 경고가 발생했습니다. Express 5는 더 이상 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fe7c891d7ac1d3cb696999ebf066c1230c0c17a1" translate="yes" xml:space="preserve">
          <source>The following section describes &lt;code&gt;app.param(callback)&lt;/code&gt;, which is deprecated as of v4.11.0.</source>
          <target state="translated">다음 섹션에서는 &lt;code&gt;app.param(callback)&lt;/code&gt; 사용되지 않는 app.param (callback)에 대해 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="a8e4eb3141b906fa57053ab91217e0b8c835a4e5" translate="yes" xml:space="preserve">
          <source>The following section describes &lt;code&gt;router.param(callback)&lt;/code&gt;, which is deprecated as of v4.11.0.</source>
          <target state="translated">다음 섹션에서는 &lt;code&gt;router.param(callback)&lt;/code&gt; 된 router.param (callback)에 대해 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="ac7e14d52d419d2dfe7b26d664e382ff519dfa3f" translate="yes" xml:space="preserve">
          <source>The following snippet illustrates the most simple route definition possible. Express translates the path strings to regular expressions, used internally to match incoming requests. Query strings are &lt;em&gt;not&lt;/em&gt; considered when performing these matches, for example &amp;ldquo;GET /&amp;rdquo; would match the following route, as would &amp;ldquo;GET /?name=tobi&amp;rdquo;.</source>
          <target state="translated">다음 스 니펫은 가능한 가장 간단한 경로 정의를 보여줍니다. Express는 경로 문자열을 정규식으로 변환하고 내부적으로 들어오는 요청을 일치시키는 데 사용됩니다. 이러한 일치를 수행 할 때 쿼리 문자열은 고려 &lt;em&gt;되지 않습니다.&lt;/em&gt; 예를 들어 &quot;GET /&quot;는 &quot;GET /? name = tobi&quot;와 같이 다음 경로와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="322afa8c682cc54a48a36b4f79cc9e3a498a30f0" translate="yes" xml:space="preserve">
          <source>The following table describes the properties of the &lt;code&gt;options&lt;/code&gt; object. See also the &lt;a href=&quot;#example.of.express.static&quot;&gt;example below&lt;/a&gt;.</source>
          <target state="translated">다음 표는 &lt;code&gt;options&lt;/code&gt; 객체 의 속성을 설명 합니다. &lt;a href=&quot;#example.of.express.static&quot;&gt;아래 예제&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f6ded38e758ab87128a3104421456d4e2d163d4" translate="yes" xml:space="preserve">
          <source>The following table describes the properties of the optional &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="translated">다음 표는 선택적 &lt;code&gt;options&lt;/code&gt; 객체 의 속성을 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="20d022061839cfe4ccc4b747ede20bacce929fa7" translate="yes" xml:space="preserve">
          <source>The following table lists Express 3 middleware and their counterparts in Express 4.</source>
          <target state="translated">다음 표는 Express 3의 Express 3 미들웨어 및 해당 항목을 나열합니다.</target>
        </trans-unit>
        <trans-unit id="db0dc0a712b2f5737feeeecd3c1d50e43fa019da" translate="yes" xml:space="preserve">
          <source>The following table lists application settings.</source>
          <target state="translated">다음 표는 응용 프로그램 설정을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c4c8a2a9021a711c4e6bcbb6a535cddbaa7cddca" translate="yes" xml:space="preserve">
          <source>The following table lists other small but important changes in Express 4:</source>
          <target state="translated">다음 표는 Express 4의 다른 작지만 중요한 변경 사항을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="729adb640a1f26923c6692f59e687d97657279bc" translate="yes" xml:space="preserve">
          <source>The following table provides details on the &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="translated">다음 표는 &lt;code&gt;options&lt;/code&gt; 매개 변수 에 대한 세부 사항을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="92e7a0c7d12528c52cb31fc91be69f288ed104ad" translate="yes" xml:space="preserve">
          <source>The following table provides some simple examples of middleware functions that can be used as the &lt;code&gt;callback&lt;/code&gt; argument to &lt;code&gt;app.use()&lt;/code&gt;, &lt;code&gt;app.METHOD()&lt;/code&gt;, and &lt;code&gt;app.all()&lt;/code&gt;. Even though the examples are for &lt;code&gt;app.use()&lt;/code&gt;, they are also valid for &lt;code&gt;app.use()&lt;/code&gt;, &lt;code&gt;app.METHOD()&lt;/code&gt;, and &lt;code&gt;app.all()&lt;/code&gt;.</source>
          <target state="translated">다음 표는 &lt;code&gt;app.use()&lt;/code&gt; , &lt;code&gt;app.METHOD()&lt;/code&gt; 및 &lt;code&gt;app.all()&lt;/code&gt; 대한 &lt;code&gt;callback&lt;/code&gt; 인수로 사용할 수있는 미들웨어 함수의 간단한 예를 제공합니다 . 예제는 &lt;code&gt;app.use()&lt;/code&gt; 용 &lt;code&gt;app.use()&lt;/code&gt; , &lt;code&gt;app.METHOD()&lt;/code&gt; 및 &lt;code&gt;app.all()&lt;/code&gt; 에도 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="8272ae472962abdf7c6f5721b444c7ac41e39794" translate="yes" xml:space="preserve">
          <source>The following table provides some simple examples of valid &lt;code&gt;path&lt;/code&gt; values for mounting middleware.</source>
          <target state="translated">다음 표는 미들웨어를 마운트하기위한 유효한 &lt;code&gt;path&lt;/code&gt; 값 의 간단한 예를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="a379d1ac7543c2c5d93f03d189bb0f4060bf7bc9" translate="yes" xml:space="preserve">
          <source>The function signature is:</source>
          <target state="translated">기능 서명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d44e667576f6fd0d6e7fed034ced8b5b1daea77" translate="yes" xml:space="preserve">
          <source>The generated app has the following directory structure:</source>
          <target state="translated">생성 된 앱의 디렉토리 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="86589695e60b29aef4fb8618475a17cc50047f8b" translate="yes" xml:space="preserve">
          <source>The global protoypes at &lt;code&gt;express.request&lt;/code&gt; and &lt;code&gt;express.response&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;express.request&lt;/code&gt; 및 &lt;code&gt;express.response&lt;/code&gt; 의 글로벌 프로토 타입 입니다.</target>
        </trans-unit>
        <trans-unit id="71cc0ff633eeb477a04fb93d26af959d8ee4e102" translate="yes" xml:space="preserve">
          <source>The list below enumerates the Express vulnerabilities that were fixed in the specified version update.</source>
          <target state="translated">아래 목록은 지정된 버전 업데이트에서 수정 된 Express 취약점을 열거합니다.</target>
        </trans-unit>
        <trans-unit id="745b31949705d01311954e795252221d028278c2" translate="yes" xml:space="preserve">
          <source>The local variable &lt;code&gt;cache&lt;/code&gt; enables view caching. Set it to &lt;code&gt;true&lt;/code&gt;, to cache the view during development; view caching is enabled in production by default.</source>
          <target state="translated">로컬 변수 &lt;code&gt;cache&lt;/code&gt; 는 뷰 캐싱을 가능하게합니다. 개발 중에 뷰를 캐시하려면 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 . 뷰 캐싱은 기본적으로 프로덕션에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8ccd8df08d0a6e146210e4565c7219ed71d7baff" translate="yes" xml:space="preserve">
          <source>The local variable &lt;code&gt;cache&lt;/code&gt; is reserved for enabling view cache. Set it to &lt;code&gt;true&lt;/code&gt;, if you want to cache view during development; view caching is enabled in production by default.</source>
          <target state="translated">로컬 변수 &lt;code&gt;cache&lt;/code&gt; 는보기 캐시를 사용하도록 예약되어 있습니다. 개발 중에보기를 캐시하려면이 를 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 . 뷰 캐싱은 기본적으로 프로덕션에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4fb6d2ff33c4f3184c113ca9dc51fd6262ec5cd7" translate="yes" xml:space="preserve">
          <source>The main difference between these two modules is how they save cookie session data. The &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; middleware stores session data on the server; it only saves the session ID in the cookie itself, not session data. By default, it uses in-memory storage and is not designed for a production environment. In production, you&amp;rsquo;ll need to set up a scalable session-store; see the list of &lt;a href=&quot;https://github.com/expressjs/session#compatible-session-stores&quot;&gt;compatible session stores&lt;/a&gt;.</source>
          <target state="translated">이 두 모듈의 주요 차이점은 쿠키 세션 데이터를 저장하는 방법입니다. &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;명시 세션&lt;/a&gt; 서버 미들웨어 세션 데이터를 저장; 세션 데이터가 아닌 쿠키 자체에 세션 ID 만 저장합니다. 기본적으로 인 메모리 스토리지를 사용하며 프로덕션 환경 용으로 설계되지 않았습니다. 프로덕션 환경에서는 확장 가능한 세션 저장소를 설정해야합니다. &lt;a href=&quot;https://github.com/expressjs/session#compatible-session-stores&quot;&gt;호환 가능한 세션 저장소&lt;/a&gt; 목록을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b1b372bcb81e0289afd1ed3e186dd836f491281" translate="yes" xml:space="preserve">
          <source>The method invokes the callback function &lt;code&gt;fn(err)&lt;/code&gt; when the transfer is complete or when an error occurs. If the callback function is specified and an error occurs, the callback function must explicitly handle the response process either by ending the request-response cycle, or by passing control to the next route.</source>
          <target state="translated">이 메소드는 전송이 완료되거나 오류가 발생 하면 콜백 함수 &lt;code&gt;fn(err)&lt;/code&gt; 호출 합니다. 콜백 함수가 지정되고 오류가 발생하면 콜백 함수는 요청-응답주기를 종료하거나 제어를 다음 라우트로 전달하여 응답 프로세스를 명시 적으로 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="5dcc129b584cc9823eb78eff32f3c1cb0ff56262" translate="yes" xml:space="preserve">
          <source>The method, &lt;code&gt;app.all()&lt;/code&gt;, is not derived from any HTTP method and loads middleware at the specified path for &lt;em&gt;all&lt;/em&gt; HTTP request methods. For more information, see &lt;a href=&quot;#app.all&quot;&gt;app.all&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;app.all()&lt;/code&gt; 메소드 는 HTTP 메소드에서 파생되지 않으며 &lt;em&gt;모든&lt;/em&gt; HTTP 요청 메소드에 대해 지정된 경로에서 미들웨어를로드 합니다. 자세한 내용은 &lt;a href=&quot;#app.all&quot;&gt;app.all을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b8493250a5bdf079e195f274e6e913153c67d104" translate="yes" xml:space="preserve">
          <source>The methods on the response object (&lt;code&gt;res&lt;/code&gt;) in the following table can send a response to the client, and terminate the request-response cycle. If none of these methods are called from a route handler, the client request will be left hanging.</source>
          <target state="translated">다음 표의 응답 오브젝트 ( &lt;code&gt;res&lt;/code&gt; )에 대한 메소드 는 클라이언트에 응답을 보내고 요청-응답주기를 종료 할 수 있습니다. 라우트 핸들러에서 이러한 메소드를 호출하지 않으면 클라이언트 요청이 정지 된 상태로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="10d7588188297d2d65c1b8248fcd338d1d8b81a4" translate="yes" xml:space="preserve">
          <source>The middleware can now be used as shown below.</source>
          <target state="translated">이제 미들웨어를 아래와 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1a80788e900a2a6d84f06c8627ba0cd7b74a0ee" translate="yes" xml:space="preserve">
          <source>The middleware function &lt;code&gt;myLogger&lt;/code&gt; simply prints a message, then passes on the request to the next middleware function in the stack by calling the &lt;code&gt;next()&lt;/code&gt; function.</source>
          <target state="translated">미들웨어 함수 &lt;code&gt;myLogger&lt;/code&gt; 는 단순히 메시지를 인쇄 한 후 &lt;code&gt;next()&lt;/code&gt; 함수를 호출하여 요청을 스택의 다음 미들웨어 함수로 전달 합니다.</target>
        </trans-unit>
        <trans-unit id="94c8ac0886d198b91e9077bed48289509283d123" translate="yes" xml:space="preserve">
          <source>The middleware function.</source>
          <target state="translated">미들웨어 기능.</target>
        </trans-unit>
        <trans-unit id="33d705aa13e658f2ea9de1b55df20df09589e9ac" translate="yes" xml:space="preserve">
          <source>The middleware returned by the function decides the behavior of what happens when a URL parameter is captured.</source>
          <target state="translated">함수에 의해 리턴 된 미들웨어는 URL 매개 변수가 캡처 될 때 발생하는 동작을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="d14d24eb4ee9d1ad43138aef6c20de0afde95848" translate="yes" xml:space="preserve">
          <source>The migration process is complete, and the app is now an Express 4 app. To confirm, start the app by using the following command:</source>
          <target state="translated">마이그레이션 프로세스가 완료되었으며 이제 앱이 Express 4 앱입니다. 확인하려면 다음 명령을 사용하여 앱을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="e63a9d0c9071d0d38f70bbfe0ce6caf6da86ec36" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Express and other Node.js applications are as follows:</source>
          <target state="translated">Express 및 기타 Node.js 애플리케이션에서 가장 많이 사용되는 프로세스 관리자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="23a28a15d36b4a34e2c78f847fee1c6d4d50ae15" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Express and other Node.js applications are:</source>
          <target state="translated">Express 및 기타 Node.js 애플리케이션에서 가장 많이 사용되는 프로세스 관리자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="09698134b122c0ffff93c5c25f39cbb42fa728d6" translate="yes" xml:space="preserve">
          <source>The most popular process managers for Node are as follows:</source>
          <target state="translated">Node에서 가장 많이 사용되는 프로세스 관리자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eea6ff6794091a677adaf97c0608a3c275772d58" translate="yes" xml:space="preserve">
          <source>The name of route parameters must be made up of &amp;ldquo;word characters&amp;rdquo; ([A-Za-z0-9_]).</source>
          <target state="translated">경로 매개 변수의 이름은 &quot;단어 문자&quot;([A-Za-z0-9_])로 구성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="3769b527bb8624b7887fa5dc2bf5b6c49ca51e94" translate="yes" xml:space="preserve">
          <source>The name of the parameter.</source>
          <target state="translated">매개 변수의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="0b62beade8625118367581cd1f9b6bbaf8702af3" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;app.route()&lt;/code&gt; method enables you to create chainable route handlers for a route path. Because the path is specified in a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see &lt;a href=&quot;../index#router&quot;&gt;&lt;code&gt;Router()&lt;/code&gt; documentation&lt;/a&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;app.route()&lt;/code&gt; 메서드를 사용하면 경로 경로에 대해 체인 가능한 경로 처리기를 만들 수 있습니다. 경로는 단일 위치에 지정되므로 중복성 및 오타를 줄이는 것처럼 모듈 식 경로를 만드는 것이 도움이됩니다. 경로에 대한 자세한 내용은 &lt;a href=&quot;../index#router&quot;&gt; &lt;code&gt;Router()&lt;/code&gt; documentation를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="10a6a5833f67253c478510a4917e0deee66501ce" translate="yes" xml:space="preserve">
          <source>The next layer of reliability is to ensure that your app restarts when the server restarts. Systems can still go down for a variety of reasons. To ensure that your app restarts if the server crashes, use the init system built into your OS. The two main init systems in use today are &lt;a href=&quot;https://wiki.debian.org/systemd&quot;&gt;systemd&lt;/a&gt; and &lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;Upstart&lt;/a&gt;.</source>
          <target state="translated">안정성의 다음 단계는 서버가 다시 시작될 때 앱이 다시 시작되도록하는 것입니다. 시스템은 여러 가지 이유로 여전히 다운 될 수 있습니다. 서버 충돌시 앱이 다시 시작되도록하려면 OS에 내장 된 init 시스템을 사용하십시오. 오늘날 사용되는 두 가지 주요 init 시스템은 &lt;a href=&quot;https://wiki.debian.org/systemd&quot;&gt;systemd&lt;/a&gt; 및 &lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;Upstart&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bc06a7949dfa84edd4397fc3dcab3611d8683e6c" translate="yes" xml:space="preserve">
          <source>The number of dot-separated parts of the host to remove to access subdomain.</source>
          <target state="translated">하위 도메인에 액세스하기 위해 제거 할 호스트에서 점으로 구분 된 부분 수입니다.</target>
        </trans-unit>
        <trans-unit id="94be16c086d5530b471614800979016aaa69e7d3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument is supported by Express v4.16.0 onwards.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 Express v4.16.0 이상에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="72d2bdfa9db85f99caefb5b5e21fc49e1332176e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument passes through to the underlying &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile()&lt;/a&gt; call, and takes the exact same parameters.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 인수는 기본 &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile ()&lt;/a&gt; 호출로 전달 되며 정확히 동일한 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="730ddf9384d35b501405cb3bb361b853fea7b60b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; parameter specifies the behavior of the router.</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 매개 변수는 라우터의 동작을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="9b01c9fe98918094f83127af0c6de4c5af3dd7a4" translate="yes" xml:space="preserve">
          <source>The order in which you define middleware with &lt;code&gt;router.use()&lt;/code&gt; is very important. They are invoked sequentially, thus the order defines middleware precedence. For example, usually a logger is the very first middleware you would use, so that every request gets logged.</source>
          <target state="translated">&lt;code&gt;router.use()&lt;/code&gt; 미들웨어를 정의하는 순서 는 매우 중요합니다. 순차적으로 호출되므로 순서에 따라 미들웨어 우선 순위가 정의됩니다. 예를 들어, 일반적으로 로거는 가장 먼저 사용하는 미들웨어이므로 모든 요청이 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="928c48d6dbd0dcf89cf48ee881b21b3dddb2678b" translate="yes" xml:space="preserve">
          <source>The order of middleware loading is important: middleware functions that are loaded first are also executed first.</source>
          <target state="translated">미들웨어 로딩 순서는 중요합니다. 먼저로드 된 미들웨어 기능도 먼저 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ab8fef2dda6e310a3561720d3d648f13d663e8af" translate="yes" xml:space="preserve">
          <source>The other feature that helps to organize routes is a new class, &lt;code&gt;express.Router&lt;/code&gt;, that you can use to create modular mountable route handlers. A &lt;code&gt;Router&lt;/code&gt; instance is a complete middleware and routing system; for this reason it is often referred to as a &amp;ldquo;mini-app&amp;rdquo;.</source>
          <target state="translated">경로를 구성하는 데 도움이되는 다른 기능은 모듈 식 마운트 가능 경로 처리기를 만드는 데 사용할 수 있는 새로운 클래스 인 &lt;code&gt;express.Router&lt;/code&gt; 입니다. &lt;code&gt;Router&lt;/code&gt; 인스턴스는 완전한 미들웨어 및 라우팅 시스템입니다; 이러한 이유로 종종 &quot;미니 앱&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="ea0419ba7cbaff27ca13036e76d96fc4bc0a8079" translate="yes" xml:space="preserve">
          <source>The overridden method may now be used this way:</source>
          <target state="translated">재정의 된 메서드는 이제 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f47d1151418158d498232d12797af9de15401aab" translate="yes" xml:space="preserve">
          <source>The parameter can be any JSON type, including object, array, string, Boolean, number, or null, and you can also use it to convert other values to JSON.</source>
          <target state="translated">매개 변수는 객체, 배열, 문자열, 부울, 숫자 또는 null을 포함한 모든 JSON 유형이 될 수 있으며 다른 값을 JSON으로 변환하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="336fcb00801481f781e66eb98b3b9c9500dc2194" translate="yes" xml:space="preserve">
          <source>The parameter can be any JSON type, including object, array, string, Boolean, or number, and you can also use it to convert other values to JSON, such as &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt; (although these are technically not valid JSON).</source>
          <target state="translated">매개 변수는 오브젝트, 배열, 문자열, 부울 또는 숫자를 포함한 모든 JSON 유형일 수 있으며이 값을 사용하여 &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;undefined&lt;/code&gt; 등의 다른 값을 JSON으로 변환 할 수도 있습니다 (기술적으로 유효한 JSON은 아니지만).</target>
        </trans-unit>
        <trans-unit id="d74624806a6d45e120df27881778e7a6fc9c9286" translate="yes" xml:space="preserve">
          <source>The parameters of the callback function are:</source>
          <target state="translated">콜백 함수의 매개 변수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c8b9471cdfcef206ff7bec325d770ad0eed900e0" translate="yes" xml:space="preserve">
          <source>The path for which the middleware function is invoked; can be any of:</source>
          <target state="translated">미들웨어 기능이 호출되는 경로. 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3eb90f07dac6f867c04a4bc720cde4444d7253fd" translate="yes" xml:space="preserve">
          <source>The routing system</source>
          <target state="translated">라우팅 시스템</target>
        </trans-unit>
        <trans-unit id="84083fe4c01082c93c50f8d66a6b98f5fbc47749" translate="yes" xml:space="preserve">
          <source>The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.</source>
          <target state="translated">두 번째는 오랜 기간 동안 IP 주소에서 실패한 시도 횟수입니다. 예를 들어, 하루에 100 번 실패하면 IP 주소를 차단합니다.</target>
        </trans-unit>
        <trans-unit id="05c938e6d78d20e713ee6d52559f43a38ccf487d" translate="yes" xml:space="preserve">
          <source>The signature of the function is:</source>
          <target state="translated">기능의 서명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ab81e1bad3146fc4bccfb542a97be989f42ff828" translate="yes" xml:space="preserve">
          <source>The simple query parser is based on Node&amp;rsquo;s native query parser, &lt;a href=&quot;http://nodejs.org/api/querystring.html&quot;&gt;querystring&lt;/a&gt;.</source>
          <target state="translated">간단한 쿼리 파서는 Node의 기본 쿼리 파서 인 &lt;a href=&quot;http://nodejs.org/api/querystring.html&quot;&gt;querystring을&lt;/a&gt; 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="ca8eee6339ec1006a47a22c850013a5b158772d7" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;&amp;ldquo;production&amp;rdquo;&lt;/em&gt; refers to the stage in the software lifecycle when an application or API is generally available to its end-users or consumers. In contrast, in the &lt;em&gt;&amp;ldquo;development&amp;rdquo;&lt;/em&gt; stage, you&amp;rsquo;re still actively writing and testing code, and the application is not open to external access. The corresponding system environments are known as &lt;em&gt;production&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt; environments, respectively.</source>
          <target state="translated">&lt;em&gt;&quot;생산&quot;&lt;/em&gt; 이라는 용어 는 일반적으로 최종 사용자 또는 소비자가 응용 프로그램 또는 API를 사용할 수있는 소프트웨어 수명주기의 단계를 나타냅니다. 반대로 &lt;em&gt;&quot;개발&quot;&lt;/em&gt; 단계에서는 여전히 활발하게 코드를 작성 및 테스트하고 있으며 응용 프로그램은 외부 액세스에 개방되어 있지 않습니다. 해당 시스템 환경을 각각 &lt;em&gt;프로덕션&lt;/em&gt; 및 &lt;em&gt;개발&lt;/em&gt; 환경이라고합니다.</target>
        </trans-unit>
        <trans-unit id="abfd5f3fd1531af155b8fa89b622ca06a7b2e418" translate="yes" xml:space="preserve">
          <source>The top-level &lt;code&gt;express&lt;/code&gt; object has a &lt;a href=&quot;#express.router&quot;&gt;Router()&lt;/a&gt; method that creates a new &lt;code&gt;router&lt;/code&gt; object.</source>
          <target state="translated">최상위 &lt;code&gt;express&lt;/code&gt; 객체에는 새 &lt;code&gt;router&lt;/code&gt; 객체 를 만드는 &lt;a href=&quot;#express.router&quot;&gt;Router ()&lt;/a&gt; 메서드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b6bd02109d9c9ba4f8073cc245d97c7a45a1128" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;http://expressjs.com/en/api.html#req.hostname&quot;&gt;req.hostname&lt;/a&gt; is derived from the value set in the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header, which can be set by the client or by the proxy.</source>
          <target state="translated">&lt;a href=&quot;http://expressjs.com/en/api.html#req.hostname&quot;&gt;req.hostname&lt;/a&gt; 의 값은 클라이언트 또는 프록시가 설정할 수있는 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 헤더에 설정된 값에서 파생됩니다 .</target>
        </trans-unit>
        <trans-unit id="b3ca029ce98ea4b9224656043b13bdef9b1564fc" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;name&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 매개 변수 의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="e3b16790690d51857f362e0bfe828daf1acc0af9" translate="yes" xml:space="preserve">
          <source>The way you define routes is unchanged, but the routing system has two new features to help organize your routes:</source>
          <target state="translated">경로를 정의하는 방식은 변경되지 않지만 라우팅 시스템에는 경로를 구성하는 데 도움이되는 두 가지 새로운 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="33214671538150f77e53cdf9f7e4b84e8a56e09e" translate="yes" xml:space="preserve">
          <source>Then create a route to render the &lt;code&gt;index.pug&lt;/code&gt; file. If the &lt;code&gt;view engine&lt;/code&gt; property is not set, you must specify the extension of the &lt;code&gt;view&lt;/code&gt; file. Otherwise, you can omit it.</source>
          <target state="translated">그런 다음 &lt;code&gt;index.pug&lt;/code&gt; 파일 을 렌더링 할 경로를 만듭니다 . 는 IF &lt;code&gt;view engine&lt;/code&gt; 속성이 설정되어 있지 않은, 당신은의 확장 지정해야합니다 &lt;code&gt;view&lt;/code&gt; 파일을. 그렇지 않으면 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c82585775e5cad2aff928e1d12e385a6813cb7b" translate="yes" xml:space="preserve">
          <source>Then install dependencies:</source>
          <target state="translated">그런 다음 종속성을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="0b11d4df9e46cf7f12bdddd1817579121eab0ef0" translate="yes" xml:space="preserve">
          <source>Then install the corresponding template engine npm package; for example to install Pug:</source>
          <target state="translated">그런 다음 해당 템플릿 엔진 npm 패키지를 설치하십시오. 예를 들어 Pug를 설치하려면</target>
        </trans-unit>
        <trans-unit id="e60ca4b8e3d0c2392c17476bd9bab2d79bc35dac" translate="yes" xml:space="preserve">
          <source>Then load &lt;code&gt;http://localhost:3000/&lt;/code&gt; in your browser to access the app.</source>
          <target state="translated">그런 다음 브라우저에 &lt;code&gt;http://localhost:3000/&lt;/code&gt; 을 로드 하여 앱에 액세스하십시오.</target>
        </trans-unit>
        <trans-unit id="7fae67f35e1ce6760152544dd2e31157d5b0e646" translate="yes" xml:space="preserve">
          <source>Then run the service with:</source>
          <target state="translated">그런 다음 다음을 사용하여 서비스를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="60dd8ce3d1564d3cfff7bf8cfdbc99c375c37583" translate="yes" xml:space="preserve">
          <source>Then start the service with:</source>
          <target state="translated">그런 다음 서비스를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="f1344d5024e8280dc94dd2c532c5d9f9c43d785a" translate="yes" xml:space="preserve">
          <source>Then to use it in your code:</source>
          <target state="translated">그런 다음 코드에서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e0f8a4a914369f83038f069eb0a65844df12fc30" translate="yes" xml:space="preserve">
          <source>Then, create the following route in your app.</source>
          <target state="translated">그런 다음 앱에서 다음 경로를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7200e6f2f424015df41973313013765338beb3c1" translate="yes" xml:space="preserve">
          <source>Then, load &lt;code&gt;http://localhost:3000/&lt;/code&gt; in a browser to see the output.</source>
          <target state="translated">그런 다음 브라우저에 &lt;code&gt;http://localhost:3000/&lt;/code&gt; 을 로드 하여 출력을보십시오.</target>
        </trans-unit>
        <trans-unit id="065e8d6b87455fea692b5996a0909443c140cc4e" translate="yes" xml:space="preserve">
          <source>Then, load the router module in the app:</source>
          <target state="translated">그런 다음 앱에 라우터 모듈을로드하십시오.</target>
        </trans-unit>
        <trans-unit id="f13fd315b2fad8692cf76eae1dd6e29885611d35" translate="yes" xml:space="preserve">
          <source>Then, remove invalid code, load the required middleware, and make other changes as necessary. The &lt;code&gt;app.js&lt;/code&gt; file will look like this:</source>
          <target state="translated">그런 다음 유효하지 않은 코드를 제거하고 필요한 미들웨어를로드 한 후 필요에 따라 다른 변경을 수행하십시오. &lt;code&gt;app.js&lt;/code&gt; 의 파일은 다음과 같이 표시됩니다</target>
        </trans-unit>
        <trans-unit id="991a23aae9cdfdc87568b871e83b58064a39c63c" translate="yes" xml:space="preserve">
          <source>There are several significant changes in Express 4:</source>
          <target state="translated">Express 4에는 몇 가지 중요한 변경 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd1af7fc5f124707d3d486f9e632314f3b36c58c" translate="yes" xml:space="preserve">
          <source>There are two main middleware cookie session modules:</source>
          <target state="translated">미들웨어 쿠키 세션 모듈에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f758c1cf6d4c8cb9e9cd51e5dec0ee41ce2374f" translate="yes" xml:space="preserve">
          <source>There are two ways to use init systems with your Express app:</source>
          <target state="translated">Express 앱에서 init 시스템을 사용하는 방법에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9351e9914c8bc586d41c0c4a01832839a34f310b" translate="yes" xml:space="preserve">
          <source>There is a special routing method, &lt;code&gt;app.all()&lt;/code&gt;, used to load middleware functions at a path for &lt;em&gt;all&lt;/em&gt; HTTP request methods. For example, the following handler is executed for requests to the route &amp;ldquo;/secret&amp;rdquo; whether using GET, POST, PUT, DELETE, or any other HTTP request method supported in the &lt;a href=&quot;https://nodejs.org/api/http.html#http_http_methods&quot;&gt;http module&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;모든&lt;/em&gt; HTTP 요청 메소드 의 경로에서 미들웨어 함수를로드하는 데 사용되는 특수 라우팅 메소드 인 &lt;code&gt;app.all()&lt;/code&gt; 있습니다. 예를 들어, 다음 핸들러는 GET, POST, PUT, DELETE 또는 &lt;a href=&quot;https://nodejs.org/api/http.html#http_http_methods&quot;&gt;http 모듈&lt;/a&gt; 에서 지원되는 다른 HTTP 요청 방법을 사용하든 경로 &quot;/ secret&quot;에 대한 요청에 대해 실행됩니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa1d6dc8e632f8aa86480e78f1c3005fddd15f8b" translate="yes" xml:space="preserve">
          <source>There is no definitive answer to this question. The answer depends on the scale of your application and the team that is involved. To be as flexible as possible, Express makes no assumptions in terms of structure.</source>
          <target state="translated">이 질문에 대한 명확한 답은 없습니다. 대답은 응용 프로그램의 규모와 관련 팀에 따라 다릅니다. 가능한 유연하게 표현하기 위해 Express는 구조 측면에서 가정을하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="63b9dd413da07edf287e7fe6981e9b8f72c900c9" translate="yes" xml:space="preserve">
          <source>These database drivers are among many that are available. For other options, search on the &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; site.</source>
          <target state="translated">이러한 데이터베이스 드라이버는 사용 가능한 많은 것 중 하나입니다. 다른 옵션을 보려면 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; 사이트를 검색 하십시오.</target>
        </trans-unit>
        <trans-unit id="99bb054abe760f22530355254d09281008974ff3" translate="yes" xml:space="preserve">
          <source>These routing methods specify a callback function (sometimes called &amp;ldquo;handler functions&amp;rdquo;) called when the application receives a request to the specified route (endpoint) and HTTP method. In other words, the application &amp;ldquo;listens&amp;rdquo; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.</source>
          <target state="translated">이러한 라우팅 메서드는 응용 프로그램이 지정된 경로 (종료점) 및 HTTP 메서드에 대한 요청을받을 때 호출되는 콜백 함수 ( &quot;핸들러 함수&quot;라고도 함)를 지정합니다. 다시 말해, 응용 프로그램은 지정된 경로 및 메소드와 일치하는 요청을 &quot;수신&quot;하고 일치를 감지하면 지정된 콜백 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f46d47c06c7d915c40e70255eb957409610468fd" translate="yes" xml:space="preserve">
          <source>Things to do in your code</source>
          <target state="translated">코드에서해야 할 일</target>
        </trans-unit>
        <trans-unit id="a235dc03a74ce9e2751a9a72025475f40ce97169" translate="yes" xml:space="preserve">
          <source>Things to do in your code (the dev part):</source>
          <target state="translated">코드에서해야 할 일 (개발 부분) :</target>
        </trans-unit>
        <trans-unit id="5d6a2a16dd07c4b465cbbb29719ced0eb4bc6db6" translate="yes" xml:space="preserve">
          <source>Things to do in your environment / setup</source>
          <target state="translated">환경 / 설정에서해야 할 일</target>
        </trans-unit>
        <trans-unit id="699cb6d5b2493ef4b92f01b495acbdc09f859a81" translate="yes" xml:space="preserve">
          <source>Things to do in your environment / setup (the ops part):</source>
          <target state="translated">환경 / 설정에서 수행 할 작업 (Ops 부분) :</target>
        </trans-unit>
        <trans-unit id="559a5f7f0ea436d823c1ba60e07a18a0dfdabe73" translate="yes" xml:space="preserve">
          <source>Think of &lt;code&gt;app.render()&lt;/code&gt; as a utility function for generating rendered view strings. Internally &lt;code&gt;res.render()&lt;/code&gt; uses &lt;code&gt;app.render()&lt;/code&gt; to render views.</source>
          <target state="translated">&lt;code&gt;app.render()&lt;/code&gt; 를 렌더링 된 뷰 문자열을 생성하기위한 유틸리티 함수로 생각하십시오 . 내부적으로 &lt;code&gt;res.render()&lt;/code&gt; 는 &lt;code&gt;app.render()&lt;/code&gt; 를 사용하여 뷰를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="5ab7780493a98e511acb8e937e221168d4665a10" translate="yes" xml:space="preserve">
          <source>Third-party middleware</source>
          <target state="translated">타사 미들웨어</target>
        </trans-unit>
        <trans-unit id="f75cab7683b144c5a84f60e5a14ef4dbf7592d5b" translate="yes" xml:space="preserve">
          <source>Third-party solution: terminus</source>
          <target state="translated">타사 솔루션 : terminus</target>
        </trans-unit>
        <trans-unit id="2612d57a5ef17fe4d49fb78f6d7734e40b0f1045" translate="yes" xml:space="preserve">
          <source>Third-party solutions</source>
          <target state="translated">타사 솔루션</target>
        </trans-unit>
        <trans-unit id="4d2cbe6590eb5fa2fb65723fb66e125a528cf39d" translate="yes" xml:space="preserve">
          <source>This API provides access to data on the running file system. Ensure that either (a) the way in which the &lt;code&gt;path&lt;/code&gt; argument was constructed into an absolute path is secure if it contains user input or (b) set the &lt;code&gt;root&lt;/code&gt; option to the absolute path of a directory to contain access within.</source>
          <target state="translated">이 API는 실행중인 파일 시스템의 데이터에 대한 액세스를 제공합니다. (a) &lt;code&gt;path&lt;/code&gt; 인수가 절대 경로로 구성된 방식 이 사용자 입력을 포함하는 경우 안전한지 확인하거나 (b) &lt;code&gt;root&lt;/code&gt; 옵션을 액세스를 포함 할 디렉토리의 절대 경로로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="ee732985d852e0a58e1362f30062069245ba8f74" translate="yes" xml:space="preserve">
          <source>This app starts a server and listens on port 3000 for connections. The app responds with &amp;ldquo;Hello World!&amp;rdquo; for requests to the root URL (&lt;code&gt;/&lt;/code&gt;) or &lt;em&gt;route&lt;/em&gt;. For every other path, it will respond with a &lt;strong&gt;404 Not Found&lt;/strong&gt;.</source>
          <target state="translated">이 앱은 서버를 시작하고 포트 3000에서 연결을 수신합니다. 앱은 &quot;Hello World!&quot;로 응답합니다. 루트 URL (요청에 대한 &lt;code&gt;/&lt;/code&gt; ) 또는 &lt;em&gt;경로&lt;/em&gt; . 다른 모든 경로에 대해 &lt;strong&gt;404 Not Found로&lt;/strong&gt; 응답 합니다.</target>
        </trans-unit>
        <trans-unit id="36efd58e9596ed2d83d3910f938e1f6d51e40a6a" translate="yes" xml:space="preserve">
          <source>This approach re-uses the single &lt;code&gt;/users/:user_id&lt;/code&gt; path and adds handlers for various HTTP methods.</source>
          <target state="translated">이 방법은 단일 &lt;code&gt;/users/:user_id&lt;/code&gt; 경로를 재사용 하고 다양한 HTTP 메소드에 대한 핸들러를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="15f640bcd1b157d93a815d6bfb75ed7442c38f34" translate="yes" xml:space="preserve">
          <source>This article covers:</source>
          <target state="translated">이 기사는 다음을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="c9516eb72662bc86c4292c21dba5f6a5bbbe2d51" translate="yes" xml:space="preserve">
          <source>This article discusses performance and reliability best practices for Express applications deployed to production.</source>
          <target state="translated">이 문서에서는 프로덕션에 배포 된 Express 응용 프로그램의 성능 및 안정성 모범 사례를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d5b49bbbcdc2e9fa9a985699da5173951223f7fb" translate="yes" xml:space="preserve">
          <source>This can also be configured within a PM2 process file (&lt;code&gt;ecosystem.config.js&lt;/code&gt; or similar) by setting &lt;code&gt;exec_mode&lt;/code&gt; to &lt;code&gt;cluster&lt;/code&gt; and &lt;code&gt;instances&lt;/code&gt; to the number of workers to start.</source>
          <target state="translated">&lt;code&gt;exec_mode&lt;/code&gt; 를 &lt;code&gt;cluster&lt;/code&gt; 로 설정 하고 &lt;code&gt;instances&lt;/code&gt; 를 시작할 작업자 수로 설정 하여 PM2 프로세스 파일 ( &lt;code&gt;ecosystem.config.js&lt;/code&gt; 또는 이와 유사한) 내에서 구성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ae431e3803edf6da1aa164607df8bd9bf2b05bfb" translate="yes" xml:space="preserve">
          <source>This command prompts you for a number of things, such as the name and version of your application. For now, you can simply hit RETURN to accept the defaults for most of them, with the following exception:</source>
          <target state="translated">이 명령은 응용 프로그램의 이름 및 버전과 같은 여러 가지 사항을 묻습니다. 지금은 다음을 제외하고 RETURN을 눌러 대부분의 기본값을 승인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="566bc7ee678acbf385a283af7180d512ebfb19ea" translate="yes" xml:space="preserve">
          <source>This command will run the script in daemon mode (in the background).</source>
          <target state="translated">이 명령은 백그라운드에서 데몬 모드로 스크립트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="58d477748b97bf167d282df7ffa9a1891cca0c1a" translate="yes" xml:space="preserve">
          <source>This example shows a middleware function mounted on the &lt;code&gt;/user/:id&lt;/code&gt; path. The function is executed for any type of HTTP request on the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">이 예는 &lt;code&gt;/user/:id&lt;/code&gt; 경로 에 마운트 된 미들웨어 기능을 보여줍니다 . 이 기능은 &lt;code&gt;/user/:id&lt;/code&gt; 경로 에서 모든 유형의 HTTP 요청에 대해 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="1d5c2cbfa770a96f4b141b6897a34db0dbc7535c" translate="yes" xml:space="preserve">
          <source>This example shows a middleware function with no mount path. The function is executed every time the app receives a request.</source>
          <target state="translated">이 예는 마운트 경로가없는 미들웨어 기능을 보여줍니다. 이 함수는 앱이 요청을받을 때마다 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="9cefc3f75f01437fc9cc6427cd73ab2845d6b98e" translate="yes" xml:space="preserve">
          <source>This example shows a middleware sub-stack that handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">이 예는 &lt;code&gt;/user/:id&lt;/code&gt; 경로 에 대한 GET 요청을 처리하는 미들웨어 서브 스택을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="8f8016d96e4d65b50f07562de145ce0bdf0e1399" translate="yes" xml:space="preserve">
          <source>This example shows a route and its handler function (middleware system). The function handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path.</source>
          <target state="translated">이 예는 경로와 처리기 기능 (미들웨어 시스템)을 보여줍니다. 이 함수는 &lt;code&gt;/user/:id&lt;/code&gt; 경로 에 대한 GET 요청을 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="81ab12ce60756e8d0f7bde88788a292df98fcbe1" translate="yes" xml:space="preserve">
          <source>This example shows an array with a middleware sub-stack that handles GET requests to the &lt;code&gt;/user/:id&lt;/code&gt; path</source>
          <target state="translated">이 예제는 &lt;code&gt;/user/:id&lt;/code&gt; 경로에 대한 GET 요청을 처리하는 미들웨어 하위 스택이있는 어레이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c4a02c7c014e2ccf2d2089858e1e33898ab89b68" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming request payloads into a &lt;code&gt;Buffer&lt;/code&gt; and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">이것은 Express에 내장 된 미들웨어 기능입니다. 들어오는 요청 페이로드를 &lt;code&gt;Buffer&lt;/code&gt; 로 구문 분석 하고 &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser를&lt;/a&gt; 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="44f3f4ac34f02dac90091a9c71dd1e7de5487bd3" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming request payloads into a string and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">이것은 Express에 내장 된 미들웨어 기능입니다. 수신 요청 페이로드를 문자열로 구문 분석하고 &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser를&lt;/a&gt; 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="c90a6b0044a0af85a69597582e3ab719a3739104" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">Express에 내장 된 미들웨어 기능입니다. 수신 요청을 JSON 페이로드로 구문 분석하고 &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt; 기반입니다 .</target>
        </trans-unit>
        <trans-unit id="10acacd215e7c98a06786d3f4b77d6cf8bc61d08" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">이것은 Express에 내장 된 미들웨어 기능입니다. 수신 요청을 JSON 페이로드로 구문 분석하고 &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser를&lt;/a&gt; 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="4bbe82504369c95b9102307a8cf4f3e2d3176028" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">Express에 내장 된 미들웨어 기능입니다. 수신 요청을 urlencoded 페이로드로 구문 분석하고 &lt;a href=&quot;http://expressjs.com/en/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt; 기반입니다 .</target>
        </trans-unit>
        <trans-unit id="dc995425695069d3dcf0dab1c57eadaaec496d9a" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser&lt;/a&gt;.</source>
          <target state="translated">이것은 Express에 내장 된 미들웨어 기능입니다. urlencoded 페이로드로 들어오는 요청을 구문 분석하고 &lt;a href=&quot;http://expressjs.com/resources/middleware/body-parser.html&quot;&gt;body-parser를&lt;/a&gt; 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="29bc77ae6bbabb233725459b0510c827a0610701" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It serves static files and is based on &lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="translated">Express에 내장 된 미들웨어 기능입니다. 정적 파일을 &lt;a href=&quot;http://expressjs.com/en/resources/middleware/serve-static.html&quot;&gt;제공&lt;/a&gt; 하며 serve-static을 기반으로 합니다 .</target>
        </trans-unit>
        <trans-unit id="14a14f3ebcab251ce8c689060c5c9df8d95bf404" translate="yes" xml:space="preserve">
          <source>This is a built-in middleware function in Express. It serves static files and is based on &lt;a href=&quot;http://expressjs.com/resources/middleware/serve-static.html&quot;&gt;serve-static&lt;/a&gt;.</source>
          <target state="translated">이것은 Express에 내장 된 미들웨어 기능입니다. 정적 파일을 &lt;a href=&quot;http://expressjs.com/resources/middleware/serve-static.html&quot;&gt;제공&lt;/a&gt; 하며 serve-static을 기반으로 합니다 .</target>
        </trans-unit>
        <trans-unit id="ba3161c6fc316443fceaac32641ff76a588f6c2a" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;bin&lt;/code&gt;), a mime type (like &lt;code&gt;application/octet-stream&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/*&lt;/code&gt; or &lt;code&gt;application/*&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="translated">미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수일 수 있습니다. 함수가 아닌 경우 &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; 라이브러리에 직접 전달되며 확장 이름 (예 : &lt;code&gt;bin&lt;/code&gt; ), mime 유형 (예 : &lt;code&gt;application/octet-stream&lt;/code&gt; ) 또는 와일드 카드가있는 MIME 유형 (예 : &lt;code&gt;*/*&lt;/code&gt; 또는 &lt;code&gt;application/*&lt;/code&gt; ). 함수 인 경우 &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;code&gt;fn(req)&lt;/code&gt; 로 호출되고 요청이 정확한 값을 반환하면 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="52f181e2c6c39faa736cc2ef98a667cf8cfea26f" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;json&lt;/code&gt;), a mime type (like &lt;code&gt;application/json&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/*&lt;/code&gt; or &lt;code&gt;*/json&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="translated">미들웨어가 구문 분석 할 매체 유형을 판별하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수일 수 있습니다. 함수가 아닌 경우 &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; 라이브러리로 직접 전달되며 확장명 (예 : &lt;code&gt;json&lt;/code&gt; ), MIME 유형 ( &lt;code&gt;application/json&lt;/code&gt; ) 또는 와일드 카드가있는 MIME 유형 (예 : &lt;code&gt;*/*&lt;/code&gt; )일 수 있습니다. 또는 &lt;code&gt;*/json&lt;/code&gt; ). 함수 인 경우 &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;code&gt;fn(req)&lt;/code&gt; 로 호출되고 요청이 정확한 값을 반환하면 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="4ceb3f43e2a1d698ef77fe966ee3a76ee67aec0a" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;txt&lt;/code&gt;), a mime type (like &lt;code&gt;text/plain&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/*&lt;/code&gt; or &lt;code&gt;text/*&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="translated">미들웨어가 구문 분석 할 미디어 유형을 결정하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수일 수 있습니다. 함수가 아닌 경우 &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; 라이브러리로 직접 전달되며 확장 이름 (예 : &lt;code&gt;txt&lt;/code&gt; ), MIME 유형 (예 : &lt;code&gt;text/plain&lt;/code&gt; ) 또는 와일드 카드가있는 MIME 유형 (예 : &lt;code&gt;*/*&lt;/code&gt; )일 수 있습니다. 또는 &lt;code&gt;text/*&lt;/code&gt; ). 함수 인 경우 &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;code&gt;fn(req)&lt;/code&gt; 로 호출되고 요청이 정확한 값을 반환하면 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="676612b8539e51a6459e419fd9a06c46e6bcca17" translate="yes" xml:space="preserve">
          <source>This is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, &lt;code&gt;type&lt;/code&gt; option is passed directly to the &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; library and this can be an extension name (like &lt;code&gt;urlencoded&lt;/code&gt;), a mime type (like &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;), or a mime type with a wildcard (like &lt;code&gt;*/x-www-form-urlencoded&lt;/code&gt;). If a function, the &lt;code&gt;type&lt;/code&gt; option is called as &lt;code&gt;fn(req)&lt;/code&gt; and the request is parsed if it returns a truthy value.</source>
          <target state="translated">미들웨어가 구문 분석 할 매체 유형을 판별하는 데 사용됩니다. 이 옵션은 문자열, 문자열 배열 또는 함수일 수 있습니다. 함수가 아닌 경우, &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;a href=&quot;https://www.npmjs.org/package/type-is#readme&quot;&gt;type-is&lt;/a&gt; 라이브러리로 직접 전달되며 확장자 이름 ( &lt;code&gt;urlencoded&lt;/code&gt; 등 ), mime 유형 ( &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 등 ) 또는 mime 유형이 될 수 있습니다. 와일드 카드 (예 : &lt;code&gt;*/x-www-form-urlencoded&lt;/code&gt; ). 함수 인 경우 &lt;code&gt;type&lt;/code&gt; 옵션은 &lt;code&gt;fn(req)&lt;/code&gt; 로 호출되고 요청이 정확한 값을 반환하면 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="ed47c755eaa7b19095ecd45a3de07ddd5f8ca6ec" translate="yes" xml:space="preserve">
          <source>This method is extremely useful for mapping &amp;ldquo;global&amp;rdquo; logic for specific path prefixes or arbitrary matches. For example, if you placed the following route at the top of all other route definitions, it would require that all routes from that point on would require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end points; &lt;code&gt;loadUser&lt;/code&gt; can perform a task, then call &lt;code&gt;next()&lt;/code&gt; to continue matching subsequent routes.</source>
          <target state="translated">이 방법은 특정 경로 접두사 또는 임의의 일치에 대한 &quot;전역&quot;논리를 매핑하는 데 매우 유용합니다. 예를 들어, 다음 경로를 다른 모든 경로 정의의 맨 위에 놓으면 해당 지점의 모든 경로에 인증이 필요하고 사용자를 자동으로로드해야합니다. 이러한 콜백이 엔드 포인트 역할을 할 필요는 없습니다. &lt;code&gt;loadUser&lt;/code&gt; 는 작업을 수행 한 후 &lt;code&gt;next()&lt;/code&gt; 를 호출 하여 후속 경로를 계속 일치 시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="838e5b05a805cfc293c010b0fc4905f0f167264e" translate="yes" xml:space="preserve">
          <source>This method is just like the &lt;code&gt;router.METHOD()&lt;/code&gt; methods, except that it matches all HTTP methods (verbs).</source>
          <target state="translated">이 메소드는 &lt;code&gt;router.METHOD()&lt;/code&gt; 메소드와 비슷하지만 모든 HTTP 메소드 (동사)와 일치한다는 점이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="c90c875b757be730a3772a4a27392d7b09e9be19" translate="yes" xml:space="preserve">
          <source>This method is like the standard &lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD()&lt;/a&gt; methods, except it matches all HTTP verbs.</source>
          <target state="translated">이 메소드는 모든 HTTP 동사와 일치한다는 점을 제외하고 표준 &lt;a href=&quot;#app.METHOD&quot;&gt;app.METHOD ()&lt;/a&gt; 메소드 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="cf56cb52c0c76c96a67f1f83f961a6e9c0378047" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt;. A simple example and use case is described below. See &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; for more information.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#app.use&quot;&gt;app.use ()&lt;/a&gt; 와 유사합니다 . 간단한 예와 사용 사례가 아래에 설명되어 있습니다. 자세한 내용은 &lt;a href=&quot;#app.use&quot;&gt;app.use ()&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="00076ed1b4d5e7715ecdc20b994b41c690eae8d3" translate="yes" xml:space="preserve">
          <source>This method now enforces asynchronous behavior for all view engines, avoiding bugs caused by view engines that had a synchronous implementation and that violated the recommended interface.</source>
          <target state="translated">이 방법은 이제 모든 뷰 엔진에 대해 비동기 동작을 적용하여 동기식 구현이 있고 권장 인터페이스를 위반 한 뷰 엔진으로 인한 버그를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="6b1a6c0a79f9dcc510d5992813a536810c87f5c8" translate="yes" xml:space="preserve">
          <source>This method performs many useful tasks for simple non-streaming responses: For example, it automatically assigns the &lt;code&gt;Content-Length&lt;/code&gt; HTTP response header field (unless previously defined) and provides automatic HEAD and HTTP cache freshness support.</source>
          <target state="translated">이 방법은 간단한 비 스트리밍 응답에 유용한 여러 가지 작업을 수행합니다. 예를 들어, 이전에 정의되지 않은 경우 &lt;code&gt;Content-Length&lt;/code&gt; HTTP 응답 헤더 필드를 자동으로 할당하고 자동 HEAD 및 HTTP 캐시 최신 지원을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="49116002c4bfce97e880a28a9dd031fcfa18e6e9" translate="yes" xml:space="preserve">
          <source>This middleware is available in Express v4.16.0 onwards.</source>
          <target state="translated">이 미들웨어는 Express v4.16.0 이상에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="aa2da2c1b6a71e94152ca6eecf6535dc7cbc2dbe" translate="yes" xml:space="preserve">
          <source>This middleware is available in Express v4.17.0 onwards.</source>
          <target state="translated">이 미들웨어는 Express v4.17.0 이상에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b56e031c5c7795accd8ffe8cb03cb1c8fe9da732" translate="yes" xml:space="preserve">
          <source>This option allows to choose between parsing the URL-encoded data with the &lt;code&gt;querystring&lt;/code&gt; library (when &lt;code&gt;false&lt;/code&gt;) or the &lt;code&gt;qs&lt;/code&gt; library (when &lt;code&gt;true&lt;/code&gt;). The &amp;ldquo;extended&amp;rdquo; syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please &lt;a href=&quot;https://www.npmjs.org/package/qs#readme&quot;&gt;see the qs library&lt;/a&gt;.</source>
          <target state="translated">이 옵션을 사용하면 URL로 인코딩 된 데이터를 &lt;code&gt;querystring&lt;/code&gt; 라이브러리 ( &lt;code&gt;false&lt;/code&gt; 인 경우 ) 또는 &lt;code&gt;qs&lt;/code&gt; 라이브러리 ( &lt;code&gt;true&lt;/code&gt; 인 경우 )로 구문 분석 할 수 있습니다 . &quot;확장 된&quot;구문을 사용하면 리치 객체 및 배열을 URL 인코딩 형식으로 인코딩 할 수 있으므로 URL 인코딩에 대한 JSON과 같은 경험이 가능합니다. 자세한 정보 &lt;a href=&quot;https://www.npmjs.org/package/qs#readme&quot;&gt;는 qs 라이브러리&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2a0c97a43cb8e3078822cc255b6382a146c2671" translate="yes" xml:space="preserve">
          <source>This option controls the maximum number of parameters that are allowed in the URL-encoded data. If a request contains more parameters than this value, an error will be raised.</source>
          <target state="translated">이 옵션은 URL 인코딩 데이터에서 허용되는 최대 매개 변수 수를 제어합니다. 요청에이 값보다 많은 매개 변수가 포함되어 있으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6a3efb98930e470bc9733bc6f117eafc912ee9e2" translate="yes" xml:space="preserve">
          <source>This option, if supplied, is called as &lt;code&gt;verify(req, res, buf, encoding)&lt;/code&gt;, where &lt;code&gt;buf&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; of the raw request body and &lt;code&gt;encoding&lt;/code&gt; is the encoding of the request. The parsing can be aborted by throwing an error.</source>
          <target state="translated">이 옵션이 제공되는 경우 &lt;code&gt;verify(req, res, buf, encoding)&lt;/code&gt; . 여기서 &lt;code&gt;buf&lt;/code&gt; 는 원시 요청 본문 의 &lt;code&gt;Buffer&lt;/code&gt; 이고 &lt;code&gt;encoding&lt;/code&gt; 은 요청의 인코딩입니다. 오류가 발생하여 구문 분석이 중단 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6ceb5ff97eef7c446d8730c4e50f1c21c7aed11" translate="yes" xml:space="preserve">
          <source>This page contains list of examples using Express.</source>
          <target state="translated">이 페이지에는 Express를 사용하는 예제 목록이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9c46f7597dea04c7cf428ffaf0e872629e37804" translate="yes" xml:space="preserve">
          <source>This potentially confusing and dangerous method of retrieving form data has been removed. You will now need to specifically look for the submitted parameter name in the &lt;code&gt;req.params&lt;/code&gt;, &lt;code&gt;req.body&lt;/code&gt;, or &lt;code&gt;req.query&lt;/code&gt; object.</source>
          <target state="translated">이 잠재적으로 혼란스럽고 위험한 양식 데이터 검색 방법이 제거되었습니다. 이제 &lt;code&gt;req.params&lt;/code&gt; , &lt;code&gt;req.body&lt;/code&gt; 또는 &lt;code&gt;req.query&lt;/code&gt; 오브젝트 에서 제출 된 매개 변수 이름을 구체적으로 찾아야 합니다.</target>
        </trans-unit>
        <trans-unit id="0c30d6396be263e9272d62be76ccbb0f7258e52a" translate="yes" xml:space="preserve">
          <source>This property holds a reference to the instance of the Express application that is using the middleware.</source>
          <target state="translated">이 특성은 미들웨어를 사용하는 Express 애플리케이션의 인스턴스에 대한 참조를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="4639436b062fc694302176c104048361b091b002" translate="yes" xml:space="preserve">
          <source>This property is an object containing a property for each query string parameter in the route. If there is no query string, it is the empty object, &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">이 속성은 경로의 각 쿼리 문자열 매개 변수에 대한 속성이 포함 된 개체입니다. 쿼리 문자열이 없으면 빈 객체 &lt;code&gt;{}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="aed1fb50e2cca83bed4859c329c5152816e5862f" translate="yes" xml:space="preserve">
          <source>This property is an object containing a property for each query string parameter in the route. When &lt;a href=&quot;#app.settings.table&quot;&gt;query parser&lt;/a&gt; is set to disabled, it is an empty object &lt;code&gt;{}&lt;/code&gt;, otherwise it is the result of the configured query parser.</source>
          <target state="translated">이 속성은 경로의 각 쿼리 문자열 매개 변수에 대한 속성을 포함하는 개체입니다. 때 &lt;a href=&quot;#app.settings.table&quot;&gt;쿼리 파서가&lt;/a&gt; 비활성화로 설정되어, 그것은 빈 객체이다 &lt;code&gt;{}&lt;/code&gt; 그렇지 않으면 구성된 쿼리 분석기의 결과입니다.</target>
        </trans-unit>
        <trans-unit id="94b585f1ffae7c231195df5813092e052b4259dc" translate="yes" xml:space="preserve">
          <source>This property is an object containing properties mapped to the &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;named route &amp;ldquo;parameters&amp;rdquo;&lt;/a&gt;. For example, if you have the route &lt;code&gt;/user/:name&lt;/code&gt;, then the &amp;ldquo;name&amp;rdquo; property is available as &lt;code&gt;req.params.name&lt;/code&gt;. This object defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">이 속성은 &lt;a href=&quot;guide/routing#route-parameters&quot;&gt;명명 된 경로 &quot;parameters&quot;에&lt;/a&gt; 매핑 된 속성을 포함하는 객체 입니다. 예를 들어, &lt;code&gt;/user/:name&lt;/code&gt; 라우트가 있으면 &amp;ldquo;name&amp;rdquo;특성을 &lt;code&gt;req.params.name&lt;/code&gt; 으로 사용할 수 있습니다 . 이 객체의 기본값은 &lt;code&gt;{}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1044dd424ff21196f0650d68bea91e62c630e482" translate="yes" xml:space="preserve">
          <source>This property is much like &lt;code&gt;req.url&lt;/code&gt;; however, it retains the original request URL, allowing you to rewrite &lt;code&gt;req.url&lt;/code&gt; freely for internal routing purposes. For example, the &amp;ldquo;mounting&amp;rdquo; feature of &lt;a href=&quot;#app.use&quot;&gt;app.use()&lt;/a&gt; will rewrite &lt;code&gt;req.url&lt;/code&gt; to strip the mount point.</source>
          <target state="translated">이 속성은 &lt;code&gt;req.url&lt;/code&gt; 과 매우 유사 합니다 . 그러나 원래 요청 URL을 유지하므로 내부 라우팅 목적으로 &lt;code&gt;req.url&lt;/code&gt; 을 자유롭게 다시 작성할 수 있습니다 . 예를 들어,의 &quot;설치&quot;기능 &lt;a href=&quot;#app.use&quot;&gt;app.use ()는&lt;/a&gt; 다시 작성합니다 &lt;code&gt;req.url&lt;/code&gt; 를 마운트 지점을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0289192a83596cb79a0734069985a1b8903bac8" translate="yes" xml:space="preserve">
          <source>This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on.</source>
          <target state="translated">이 특성은 요청 경로 이름, 인증 된 사용자, 사용자 설정 등과 같은 요청 레벨 정보를 노출하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3abc0f802a527da9953fd7611de9ae3cf7df10a0" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;/abe&lt;/code&gt; and &lt;code&gt;/abcde&lt;/code&gt;.</source>
          <target state="translated">이 경로는 &lt;code&gt;/abe&lt;/code&gt; 및 &lt;code&gt;/abcde&lt;/code&gt; 와 일치 합니다 .</target>
        </trans-unit>
        <trans-unit id="60052f35a103754e81aa05e013591352e892bb44" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;abcd&lt;/code&gt;, &lt;code&gt;abbcd&lt;/code&gt;, &lt;code&gt;abbbcd&lt;/code&gt;, and so on.</source>
          <target state="translated">이 경로 경로는 &lt;code&gt;abcd&lt;/code&gt; , &lt;code&gt;abbcd&lt;/code&gt; , &lt;code&gt;abbbcd&lt;/code&gt; 등과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="f1ff5af1cd371d50fc340a9f4c567cc1c94a391d" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;abcd&lt;/code&gt;, &lt;code&gt;abxcd&lt;/code&gt;, &lt;code&gt;abRANDOMcd&lt;/code&gt;, &lt;code&gt;ab123cd&lt;/code&gt;, and so on.</source>
          <target state="translated">이 경로 경로는 &lt;code&gt;abcd&lt;/code&gt; , &lt;code&gt;abxcd&lt;/code&gt; , &lt;code&gt;abRANDOMcd&lt;/code&gt; , &lt;code&gt;ab123cd&lt;/code&gt; 등과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="9e0f177459664773b537fa28909645541fe435b4" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;acd&lt;/code&gt; and &lt;code&gt;abcd&lt;/code&gt;.</source>
          <target state="translated">이 경로는 &lt;code&gt;acd&lt;/code&gt; 및 &lt;code&gt;abcd&lt;/code&gt; 와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="3f073528ec1f551c90a8b35f9a8eaa3ac640a80d" translate="yes" xml:space="preserve">
          <source>This route path will match &lt;code&gt;butterfly&lt;/code&gt; and &lt;code&gt;dragonfly&lt;/code&gt;, but not &lt;code&gt;butterflyman&lt;/code&gt;, &lt;code&gt;dragonflyman&lt;/code&gt;, and so on.</source>
          <target state="translated">이 경로 경로는 &lt;code&gt;butterfly&lt;/code&gt; 와 &lt;code&gt;dragonfly&lt;/code&gt; 와 일치 하지만 &lt;code&gt;butterflyman&lt;/code&gt; , &lt;code&gt;dragonflyman&lt;/code&gt; 과 는 일치 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2fbd74a88b38190f0ef1d961e49022795a361e44" translate="yes" xml:space="preserve">
          <source>This route path will match anything with an &amp;ldquo;a&amp;rdquo; in it.</source>
          <target state="translated">이 경로는 &quot;a&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="bdfcc9e95077df3c0fc6c31f30437e8b2663d6d1" translate="yes" xml:space="preserve">
          <source>This route path will match requests to &lt;code&gt;/about&lt;/code&gt;.</source>
          <target state="translated">이 경로는 &lt;code&gt;/about&lt;/code&gt; 요청과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="58387bf487afa1113753e71a0cae2b0212feacf2" translate="yes" xml:space="preserve">
          <source>This route path will match requests to &lt;code&gt;/random.text&lt;/code&gt;.</source>
          <target state="translated">이 경로는 요청을 &lt;code&gt;/random.text&lt;/code&gt; 에 일치 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="62a598c25ea684b94de3293e017b1e83e69a0c04" translate="yes" xml:space="preserve">
          <source>This route path will match requests to the root route, &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">이 경로 경로는 요청을 루트 경로 &lt;code&gt;/&lt;/code&gt; 와 일치시킵니다 .</target>
        </trans-unit>
        <trans-unit id="7368005de74370f3529bb041a70e104f947f5f30" translate="yes" xml:space="preserve">
          <source>This should not affect your code if you follow the Express 4 documentation of &lt;a href=&quot;../index#app.param&quot;&gt;app.param&lt;/a&gt;, as it makes no mention of the leading colon.</source>
          <target state="translated">&lt;a href=&quot;../index#app.param&quot;&gt;app.param&lt;/a&gt; 의 Express 4 문서를 따르는 경우 코드에 영향을 미치지 않아야합니다 . 이는 선행 콜론을 언급하지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="fe79a028de6351d5457903e4ee44238b7ce90b8f" translate="yes" xml:space="preserve">
          <source>This topic clearly falls into the &amp;ldquo;devops&amp;rdquo; world, spanning both traditional development and operations. Accordingly, the information is divided into two parts:</source>
          <target state="translated">이 주제는 분명히 전통적인 개발과 운영에 걸친&amp;ldquo;개발자&amp;rdquo;세계에 속합니다. 따라서 정보는 두 부분으로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="4ec4fd32478986815d2f0fa47a088b06e395b391" translate="yes" xml:space="preserve">
          <source>This tutorial assumes that an instance of &lt;code&gt;express&lt;/code&gt; named &lt;code&gt;app&lt;/code&gt; is created and the server is running. If you are not familiar with creating an app and starting it, see the &lt;a href=&quot;hello-world&quot;&gt;Hello world example&lt;/a&gt;.</source>
          <target state="translated">이 학습서는 &lt;code&gt;app&lt;/code&gt; 이라는 이름 의 &lt;code&gt;express&lt;/code&gt; 인스턴스 가 작성되고 서버가 실행중인 것으로 가정합니다 . 앱을 만들고 시작하는 데 익숙하지 않은 경우 &lt;a href=&quot;hello-world&quot;&gt;Hello world 예제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d01ef283da347650a3411bb7e58d7d617b48d0d9" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abc` and `/xyz`:</source>
          <target state="translated">이것은`/ abc`와`/ xyz`로 시작하는 경로와 일치합니다 :</target>
        </trans-unit>
        <trans-unit id="f4b781798be2a4f0d248c0a4ba715440d0a3f01f" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd` and `/abd`:</source>
          <target state="translated">이것은`/ abcd`와`/ abd`로 시작하는 경로와 일치합니다 :</target>
        </trans-unit>
        <trans-unit id="18bfff599c45ed15caa41cf6f665f414c21cedbe" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/abbcd`, `/abbbbbcd`, and so on:</source>
          <target state="translated">이것은`/ abcd`,`/ abbcd`,`/ abbbbbcd` 등으로 시작하는 경로와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="50988b7ce5ab1e9d8a8a7408d1b628bc70fd1c11" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/abxcd`, `/abFOOcd`, `/abbArcd`, and so on:</source>
          <target state="translated">이것은`/ abcd`,`/ abxcd`,`/ abFOOcd`,`/ abbArcd` 등으로 시작하는 경로와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="637082278ad75872c412668b93aecbf4244b500e" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`, `/xyza`, `/lmn`, and `/pqr`:</source>
          <target state="translated">이것은`/ abcd`,`/ xyza`,`/ lmn` 및`/ pqr`로 시작하는 경로와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="1070fae6f19aa324457a0bc087a38ad9c08e740b" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/abcd`:</source>
          <target state="translated">이것은`/ abcd`로 시작하는 경로와 일치합니다 :</target>
        </trans-unit>
        <trans-unit id="2462d9dc5f5bcd31e6573510daecb10e95bf162e" translate="yes" xml:space="preserve">
          <source>This will match paths starting with `/ad` and `/abcd`:</source>
          <target state="translated">이것은`/ ad`와`/ abcd`로 시작하는 경로와 일치합니다 :</target>
        </trans-unit>
        <trans-unit id="9d1c503406001fbdd2189da2b95349ba7b42b622" translate="yes" xml:space="preserve">
          <source>To avoid this problem, use generic cookie names; for example using &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; middleware:</source>
          <target state="translated">이 문제를 피하려면 일반 쿠키 이름을 사용하십시오. 예를 들어 &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;빠른 세션&lt;/a&gt; 미들웨어 를 사용 하는 경우 :</target>
        </trans-unit>
        <trans-unit id="70de49e4beafd96bc96b83e88468c789f24fc8de" translate="yes" xml:space="preserve">
          <source>To create a virtual path prefix (where the path does not actually exist in the file system) for files that are served by the &lt;code&gt;express.static&lt;/code&gt; function, &lt;a href=&quot;../index#app.use&quot;&gt;specify a mount path&lt;/a&gt; for the static directory, as shown below:</source>
          <target state="translated">&lt;code&gt;express.static&lt;/code&gt; 함수 가 제공하는 파일에 대한 가상 경로 접두어 (파일 시스템에 실제로 존재하지 않는 경로)를 작성하려면 다음과 같이 정적 디렉토리 &lt;a href=&quot;../index#app.use&quot;&gt;의 마운트 경로&lt;/a&gt; 를 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a0b534121b9c7593a6d1cfea749627d520a71e95" translate="yes" xml:space="preserve">
          <source>To define routes with route parameters, simply specify the route parameters in the path of the route as shown below.</source>
          <target state="translated">경로 매개 변수로 경로를 정의하려면 아래 표시된대로 경로 경로에 경로 매개 변수를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="764c26101974c824af2f1da1b98284a5b20afc68" translate="yes" xml:space="preserve">
          <source>To enable cluster mode, start your application like so:</source>
          <target state="translated">클러스터 모드를 활성화하려면 다음과 같이 응용 프로그램을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="0f96dd4baffb52d50feb8c73808a2be59f65dbc4" translate="yes" xml:space="preserve">
          <source>To ensure cookies don&amp;rsquo;t open your app to exploits, don&amp;rsquo;t use the default session cookie name and set cookie security options appropriately.</source>
          <target state="translated">쿠키가 익스플로잇을 위해 앱을 열지 못하게하려면 기본 세션 쿠키 이름을 사용하지 말고 쿠키 보안 옵션을 적절하게 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="790e51c14fc23369f47b40e4a8ffc841bb32158c" translate="yes" xml:space="preserve">
          <source>To ensure you handle all exceptions, use the following techniques:</source>
          <target state="translated">모든 예외를 처리하려면 다음 기술을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="41609a57e3ab7975f4c451831acbc047c0f0d51b" translate="yes" xml:space="preserve">
          <source>To get rid of the &lt;code&gt;www&lt;/code&gt; directory and keep things the &amp;ldquo;Express 3 way&amp;rdquo;, delete the line that says &lt;code&gt;module.exports = app;&lt;/code&gt; at the end of the &lt;code&gt;app.js&lt;/code&gt; file, then paste the following code in its place:</source>
          <target state="translated">&lt;code&gt;www&lt;/code&gt; 디렉토리를 제거 하고 &quot;Express 3 way&quot;를 유지하려면 &lt;code&gt;module.exports = app;&lt;/code&gt; &lt;code&gt;app.js&lt;/code&gt; 파일 의 끝 에서 다음 코드를 그 자리에 붙여 넣습니다.</target>
        </trans-unit>
        <trans-unit id="c1beb29a2014abbed3c385925bdbf252eca04a20" translate="yes" xml:space="preserve">
          <source>To have more control over the exact string that can be matched by a route parameter, you can append a regular expression in parentheses (&lt;code&gt;()&lt;/code&gt;):</source>
          <target state="translated">라우트 매개 변수와 일치 할 수있는 정확한 문자열을보다 잘 제어하려면 괄호 ( &lt;code&gt;()&lt;/code&gt; ) 로 정규 표현식을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e3a80b2ecde7d262e30f3f506adb50320479a603" translate="yes" xml:space="preserve">
          <source>To install Express temporarily and not add it to the dependencies list:</source>
          <target state="translated">Express를 임시로 설치하고 종속성 목록에 추가하지 않으려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="800782a4da9a7253ba3eb71924b97cc3c7c9cb09" translate="yes" xml:space="preserve">
          <source>To install StrongLoop PM as a systemd service:</source>
          <target state="translated">시스템 서비스로 StrongLoop PM을 설치하려면 :</target>
        </trans-unit>
        <trans-unit id="0a0b9acbd1f9e6bc422b6fd6713f7383d422aad4" translate="yes" xml:space="preserve">
          <source>To install StrongLoop PM as an Upstart 1.4 service:</source>
          <target state="translated">Upstart 1.4 서비스로 StrongLoop PM을 설치하려면 :</target>
        </trans-unit>
        <trans-unit id="296a4bfe6e60b561d69a5e0bb6146cfa46c308e8" translate="yes" xml:space="preserve">
          <source>To install the latest alpha and to preview Express 5, enter the following command in your application root directory:</source>
          <target state="translated">최신 알파를 설치하고 Express 5를 미리 보려면 응용 프로그램 루트 디렉토리에 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="92d0608cd352d5c2fc87e0effe600a7a27ed50be" translate="yes" xml:space="preserve">
          <source>To learn more about how template engines work in Express, see: &lt;a href=&quot;../advanced/developing-template-engines&quot;&gt;&amp;ldquo;Developing template engines for Express&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">Express에서 템플릿 엔진이 작동하는 방법에 대한 자세한 내용은 &lt;a href=&quot;../advanced/developing-template-engines&quot;&gt;&amp;ldquo;Express 용 템플릿 엔진 개발&amp;rdquo;을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c80176cd042205531cb13f4f13f0e26b951ab32e" translate="yes" xml:space="preserve">
          <source>To load the middleware function, call &lt;code&gt;app.use()&lt;/code&gt;, specifying the middleware function. For example, the following code loads the &lt;code&gt;myLogger&lt;/code&gt; middleware function before the route to the root path (/).</source>
          <target state="translated">미들웨어 함수를로드하려면 미들웨어 함수를 지정하여 &lt;code&gt;app.use()&lt;/code&gt; 호출 하십시오 . 예를 들어 다음 코드 는 루트 경로 (/) 로의 경로 이전에 &lt;code&gt;myLogger&lt;/code&gt; 미들웨어 함수를 로드합니다 .</target>
        </trans-unit>
        <trans-unit id="6662fbd38726ccc12e34e964bac507fe1bcba315" translate="yes" xml:space="preserve">
          <source>To remove an app from PM2&amp;rsquo;s registry:</source>
          <target state="translated">PM2의 레지스트리에서 앱을 제거하려면</target>
        </trans-unit>
        <trans-unit id="2564c5b3f834d0b8f7af686a29a177bc783fa61d" translate="yes" xml:space="preserve">
          <source>To remove an app from management:</source>
          <target state="translated">관리에서 앱을 제거하려면</target>
        </trans-unit>
        <trans-unit id="d5bc3d4f8d4358cbbff256367a0f328d858c7959" translate="yes" xml:space="preserve">
          <source>To render template files, set the following &lt;a href=&quot;../index#app.set&quot;&gt;application setting properties&lt;/a&gt;, set in &lt;code&gt;app.js&lt;/code&gt; in the default app created by the generator:</source>
          <target state="translated">템플릿 파일을 렌더링하려면 생성기에서 생성 한 기본 앱 에서 &lt;code&gt;app.js&lt;/code&gt; 에 설정된 다음 &lt;a href=&quot;../index#app.set&quot;&gt;애플리케이션 설정 속성&lt;/a&gt; 을 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="7d0f6cf6c5f8b764d50004f97817954f3166b8f0" translate="yes" xml:space="preserve">
          <source>To route methods that translate to invalid JavaScript variable names, use the bracket notation. For example, &lt;code&gt;app['m-search']('/', function ...&lt;/code&gt;.</source>
          <target state="translated">유효하지 않은 JavaScript 변수 이름으로 변환되는 메소드를 라우트하려면 대괄호 표기법을 사용하십시오. 예를 들어 &lt;code&gt;app['m-search']('/', function ...&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1d7f7e3a4de3894abfdc8caee99a8babab1d31c1" translate="yes" xml:space="preserve">
          <source>To run the script so that it is attached to the terminal, omit &lt;code&gt;start&lt;/code&gt;:</source>
          <target state="translated">터미널에 첨부되도록 스크립트를 실행하려면 &lt;code&gt;start&lt;/code&gt; 를 생략하십시오 .</target>
        </trans-unit>
        <trans-unit id="552cb19dd03b77d93dc0d30ab216d99368217be4" translate="yes" xml:space="preserve">
          <source>To see all the internal logs used in Express, set the &lt;code&gt;DEBUG&lt;/code&gt; environment variable to &lt;code&gt;express:*&lt;/code&gt; when launching your app.</source>
          <target state="translated">Express에서 사용 된 모든 내부 로그를 보려면 앱을 시작할 때 &lt;code&gt;DEBUG&lt;/code&gt; 환경 변수를 &lt;code&gt;express:*&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="c89a30d4aa5c388c56654c4b5aaf14746777f571" translate="yes" xml:space="preserve">
          <source>To see the logs only from the router implementation set the value of &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;express:router&lt;/code&gt;. Likewise, to see logs only from the application implementation set the value of &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;express:application&lt;/code&gt;, and so on.</source>
          <target state="translated">라우터 구현에서만 로그를 보려면 &lt;code&gt;DEBUG&lt;/code&gt; 값 을 &lt;code&gt;express:router&lt;/code&gt; 로 설정하십시오 . 마찬가지로, 응용 프로그램 구현에서만 로그를 보려면 &lt;code&gt;DEBUG&lt;/code&gt; 의 값 을 &lt;code&gt;express:application&lt;/code&gt; 등으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="db9d240c057bf8c5ec5baf7229fa37ab9ca10595" translate="yes" xml:space="preserve">
          <source>To serve static files such as images, CSS files, and JavaScript files, use the &lt;code&gt;express.static&lt;/code&gt; built-in middleware function in Express.</source>
          <target state="translated">이미지, CSS 파일 및 JavaScript 파일과 같은 정적 파일을 제공하려면 Express에서 &lt;code&gt;express.static&lt;/code&gt; 내장 미들웨어 기능을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ef0b3ce1769ca1c370ce68ad18599938d1dc28d2" translate="yes" xml:space="preserve">
          <source>To skip the rest of the middleware functions from a router middleware stack, call &lt;code&gt;next('route')&lt;/code&gt; to pass control to the next route. &lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;next('route')&lt;/code&gt; will work only in middleware functions that were loaded by using the &lt;code&gt;app.METHOD()&lt;/code&gt; or &lt;code&gt;router.METHOD()&lt;/code&gt; functions.</source>
          <target state="translated">라우터 미들웨어 스택에서 나머지 미들웨어 기능을 건너 뛰려면 &lt;code&gt;next('route')&lt;/code&gt; 를 호출 하여 제어를 다음 라우트로 전달하십시오. &lt;strong&gt;참고&lt;/strong&gt; : &lt;code&gt;next('route')&lt;/code&gt; 는 &lt;code&gt;app.METHOD()&lt;/code&gt; 또는 &lt;code&gt;router.METHOD()&lt;/code&gt; 함수 를 사용하여로드 된 미들웨어 함수에서만 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="9d814e6b9633e4adf25443034eb37fa975c489ba" translate="yes" xml:space="preserve">
          <source>To skip the rest of the router&amp;rsquo;s middleware functions, call &lt;code&gt;next('router')&lt;/code&gt; to pass control back out of the router instance.</source>
          <target state="translated">라우터의 나머지 미들웨어 기능을 건너 뛰려면 &lt;code&gt;next('router')&lt;/code&gt; 를 호출 하여 라우터 인스턴스에서 제어를 다시 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="cd544db021bd5efb6f3f66fe83d3d7692f80e2c9" translate="yes" xml:space="preserve">
          <source>To start a script, use the &lt;code&gt;forever start&lt;/code&gt; command and specify the path of the script:</source>
          <target state="translated">스크립트를 시작하려면 &lt;code&gt;forever start&lt;/code&gt; 명령을 사용하고 스크립트 경로를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="b352b5d51736731ab31821097fa398fcf08a1edc" translate="yes" xml:space="preserve">
          <source>To stop a script that was started by Forever use the &lt;code&gt;forever stop&lt;/code&gt; command and specify the process index (as listed by the &lt;code&gt;forever list&lt;/code&gt; command).</source>
          <target state="translated">Forever에서 시작한 스크립트를 중지하려면 &lt;code&gt;forever stop&lt;/code&gt; 명령을 사용하고 프로세스 색인을 지정하십시오 ( &lt;code&gt;forever list&lt;/code&gt; 명령 으로 나열 됨 ).</target>
        </trans-unit>
        <trans-unit id="96fb7872e3f4f0c650e76255b149f3bbe68bc286" translate="yes" xml:space="preserve">
          <source>To stop all the scripts that were started by Forever:</source>
          <target state="translated">Forever에서 시작한 모든 스크립트를 중지하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="ca5ca602885d49606c457d484a3453c0e237c01f" translate="yes" xml:space="preserve">
          <source>To use multiple static assets directories, call the &lt;code&gt;express.static&lt;/code&gt; middleware function multiple times:</source>
          <target state="translated">여러 정적 자산 디렉토리를 사용하려면 &lt;code&gt;express.static&lt;/code&gt; 미들웨어 함수를 여러 번 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="e3f2d2b7be73a7a1089185b391b590a70ad34810" translate="yes" xml:space="preserve">
          <source>To view detailed information about an app:</source>
          <target state="translated">앱에 대한 자세한 정보를 보려면</target>
        </trans-unit>
        <trans-unit id="77340b9ee0ab1bcf2bc1e395c700959f0330134e" translate="yes" xml:space="preserve">
          <source>To view the list of scripts that were started by Forever:</source>
          <target state="translated">Forever에서 시작한 스크립트 목록을 보려면</target>
        </trans-unit>
        <trans-unit id="813595a271258afbaaf456e614a60924bc719e61" translate="yes" xml:space="preserve">
          <source>Transfers the file at &lt;code&gt;path&lt;/code&gt; as an &amp;ldquo;attachment&amp;rdquo;. Typically, browsers will prompt the user for download. By default, the &lt;code&gt;Content-Disposition&lt;/code&gt; header &amp;ldquo;filename=&amp;rdquo; parameter is &lt;code&gt;path&lt;/code&gt; (this typically appears in the browser dialog). Override this default with the &lt;code&gt;filename&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 의 파일을 &quot;첨부 파일&quot;로 전송합니다 . 일반적으로 브라우저는 사용자에게 다운로드하라는 메시지를 표시합니다. 기본적으로 &lt;code&gt;Content-Disposition&lt;/code&gt; 헤더&amp;ldquo;filename =&amp;rdquo;매개 변수는 &lt;code&gt;path&lt;/code&gt; 입니다 (일반적으로 브라우저 대화 상자에 나타남). &lt;code&gt;filename&lt;/code&gt; 매개 변수 로이 기본값을 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1110c972c4b1318fb6f953698f8f57f1408e54f" translate="yes" xml:space="preserve">
          <source>Transfers the file at the given &lt;code&gt;path&lt;/code&gt;. Sets the &lt;code&gt;Content-Type&lt;/code&gt; response HTTP header field based on the filename&amp;rsquo;s extension. Unless the &lt;code&gt;root&lt;/code&gt; option is set in the options object, &lt;code&gt;path&lt;/code&gt; must be an absolute path to the file.</source>
          <target state="translated">주어진 &lt;code&gt;path&lt;/code&gt; 에서 파일을 전송합니다 . 설정합니다 &lt;code&gt;Content-Type&lt;/code&gt; 파일 이름의 확장명을 기준으로 응답 HTTP 헤더 필드. 하지 않는 &lt;code&gt;root&lt;/code&gt; 옵션이 옵션 개체에 설정, &lt;code&gt;path&lt;/code&gt; 파일에 대한 절대 경로 여야합니다.</target>
        </trans-unit>
        <trans-unit id="0e32a089aa2349ed04cb819b16b721bcf1ec543a" translate="yes" xml:space="preserve">
          <source>Trust the</source>
          <target state="translated">신뢰</target>
        </trans-unit>
        <trans-unit id="8ba4c13364dc9fbd26f7d827764a19c0630616ba" translate="yes" xml:space="preserve">
          <source>Trust the &lt;code&gt;n&lt;/code&gt;th hop from the front-facing proxy server as the client.</source>
          <target state="translated">클라이언트로 전면 프록시 서버에서 &lt;code&gt;n&lt;/code&gt; 번째 홉을 신뢰하십시오 .</target>
        </trans-unit>
        <trans-unit id="d8e592f92fad96eb3037716c43aee515afb5488e" translate="yes" xml:space="preserve">
          <source>Try-catch is a JavaScript language construct that you can use to catch exceptions in synchronous code. Use try-catch, for example, to handle JSON parsing errors as shown below.</source>
          <target state="translated">Try-catch는 동기 코드에서 예외를 포착하는 데 사용할 수있는 JavaScript 언어 구문입니다. 예를 들어 try-catch를 사용하여 아래와 같이 JSON 구문 분석 오류를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="7a82c5ffc33c76a2d189706604a691cc757084b7" translate="yes" xml:space="preserve">
          <source>Unify multiple StrongLoop PMs to a distributed microservices runtime that is managed from Arc.</source>
          <target state="translated">여러 StrongLoop PM을 Arc에서 관리되는 분산 마이크로 서비스 런타임에 통합하십시오.</target>
        </trans-unit>
        <trans-unit id="be91ee2527adb4d5295a14e8f4c70d557c9ee45d" translate="yes" xml:space="preserve">
          <source>Unless you need to work directly with the &lt;code&gt;http&lt;/code&gt; module (socket.io/SPDY/HTTPS), loading it is not required, and the app can be simply started this way:</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; 모듈 (socket.io/SPDY/HTTPS)을 직접 사용해야하는 경우가 아니라면로드 할 필요가 없으며 앱을 다음과 같이 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f85371579c00ca2ba8a0632fdb6d0f5c2ed67fc1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;app.param()&lt;/code&gt;, &lt;code&gt;router.param()&lt;/code&gt; does not accept an array of route parameters.</source>
          <target state="translated">달리 &lt;code&gt;app.param()&lt;/code&gt; , &lt;code&gt;router.param()&lt;/code&gt; 루트 매개 변수의 배열을 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eb3720f042ef2dc469a062002b304ed3f943018a" translate="yes" xml:space="preserve">
          <source>Upgrading to the Express 4 app generator</source>
          <target state="translated">Express 4 앱 생성기로 업그레이드</target>
        </trans-unit>
        <trans-unit id="9100b7ce2f64a70e8a1c5883615a9f34edb2815c" translate="yes" xml:space="preserve">
          <source>Upstart</source>
          <target state="translated">Upstart</target>
        </trans-unit>
        <trans-unit id="0d84ca8bcef7004ca57c061fb2af74408a7daa97" translate="yes" xml:space="preserve">
          <source>Upstart is a system tool available on many Linux distributions for starting tasks and services during system startup, stopping them during shutdown, and supervising them. You can configure your Express app or process manager as a service and then Upstart will automatically restart it when it crashes.</source>
          <target state="translated">Upstart는 시스템 시작 중에 작업 및 서비스를 시작하고 종료하는 동안 중지하고 감독하기 위해 많은 Linux 배포에서 사용할 수있는 시스템 도구입니다. Express 앱 또는 프로세스 관리자를 서비스로 구성한 다음 충돌시 Upstart가 자동으로 다시 시작합니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="92953bf89f16bbc8d0777a585a83944c0a9331ee" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.npmjs.com/package/csurf&quot;&gt;csurf&lt;/a&gt; middleware to protect against cross-site request forgery (CSRF).</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/csurf&quot;&gt;csurf&lt;/a&gt; 미들웨어를 사용하여 CSRF (Cross-Site Request Forgery) 를 방지 하십시오 .</target>
        </trans-unit>
        <trans-unit id="029916f122cc122d4922df388d06b3723375f842" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.npmjs.com/package/safe-regex&quot;&gt;safe-regex&lt;/a&gt; to ensure your regular expressions are not susceptible to &lt;a href=&quot;https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS&quot;&gt;regular expression denial of service&lt;/a&gt; attacks.</source>
          <target state="translated">정규 표현식이 &lt;a href=&quot;https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS&quot;&gt;정규 표현식 서비스 거부 공격에&lt;/a&gt; 취약하지 않도록 하려면 &lt;a href=&quot;https://www.npmjs.com/package/safe-regex&quot;&gt;안전 정규식&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec7a61534f1816ead22365bba6458427adc90f3c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;false&lt;/code&gt; if you have mounted this middleware at a path designed to be strictly a single file system directory, which allows for short-circuiting 404s for less overhead. This middleware will also reply to all methods.</source>
          <target state="translated">이 미들웨어를 단일 파일 시스템 디렉토리로 설계된 경로에 마운트 한 경우에는 404를 단락시켜 오버 헤드를 줄이려면 &lt;code&gt;false&lt;/code&gt; 를 사용하십시오 . 이 미들웨어는 모든 메소드에 응답합니다.</target>
        </trans-unit>
        <trans-unit id="c513011c4f6c45303d53f25059cbea71a137c8ab" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;req.accepts()&lt;/code&gt;, &lt;code&gt;req.acceptsEncodings()&lt;/code&gt;, &lt;code&gt;req.acceptsCharsets()&lt;/code&gt;, and &lt;code&gt;req.acceptsLanguages()&lt;/code&gt;.</source>
          <target state="translated">사용 &lt;code&gt;req.accepts()&lt;/code&gt; , &lt;code&gt;req.acceptsEncodings()&lt;/code&gt; , &lt;code&gt;req.acceptsCharsets()&lt;/code&gt; , 및 &lt;code&gt;req.acceptsLanguages()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99aab5c9dce5ec98bf0489b75ecda59765fdb297" translate="yes" xml:space="preserve">
          <source>Use Helmet</source>
          <target state="translated">헬멧 사용</target>
        </trans-unit>
        <trans-unit id="f5c26334c3707c998f07f49984cc50ae8ba2df75" translate="yes" xml:space="preserve">
          <source>Use TLS</source>
          <target state="translated">TLS 사용</target>
        </trans-unit>
        <trans-unit id="8ce0779b98259c382ad04f568518386e95df45bd" translate="yes" xml:space="preserve">
          <source>Use a caching server like &lt;a href=&quot;https://www.varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt; or &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/&quot;&gt;Nginx&lt;/a&gt; (see also &lt;a href=&quot;https://serversforhackers.com/nginx-caching/&quot;&gt;Nginx Caching&lt;/a&gt;) to greatly improve the speed and performance of your app.</source>
          <target state="translated">&lt;a href=&quot;https://www.varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt; 또는 &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/&quot;&gt;Nginx&lt;/a&gt; 와 같은 캐싱 서버 ( &lt;a href=&quot;https://serversforhackers.com/nginx-caching/&quot;&gt;Nginx 캐싱&lt;/a&gt; 참조 )를 사용하여 앱의 속도와 성능을 크게 향상 시키십시오.</target>
        </trans-unit>
        <trans-unit id="edf6c7b3cd19181653c23de6840110ccdbe0d79d" translate="yes" xml:space="preserve">
          <source>Use a load balancer</source>
          <target state="translated">로드 밸런서 사용</target>
        </trans-unit>
        <trans-unit id="7acf259d66d15c7080bc5835b24d74a75ab53179" translate="yes" xml:space="preserve">
          <source>Use a process manager</source>
          <target state="translated">프로세스 관리자 사용</target>
        </trans-unit>
        <trans-unit id="d8c16b8ec94d201e75a5346f4cb14b0e1d2e2499" translate="yes" xml:space="preserve">
          <source>Use a reverse proxy</source>
          <target state="translated">리버스 프록시 사용</target>
        </trans-unit>
        <trans-unit id="2beaf7fd84f8ae48408301b6008ba574fa9c83a1" translate="yes" xml:space="preserve">
          <source>Use a tool such as &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; or &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; to help you find implicit exceptions like &lt;a href=&quot;http://www.jshint.com/docs/options/#undef&quot;&gt;reference errors on undefined variables&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; 또는 &lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; 와 같은 도구를 사용하면 &lt;a href=&quot;http://www.jshint.com/docs/options/#undef&quot;&gt;정의되지 않은 변수에 대한 참조 오류&lt;/a&gt; 와 같은 암시 적 예외를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="86e8e9a32e6ad3c7570ff7b27af04d865718ba55" translate="yes" xml:space="preserve">
          <source>Use an array to group middleware logically. If you pass an array of middleware as the first or only middleware parameters, then you &lt;em&gt;must&lt;/em&gt; specify the mount path.</source>
          <target state="translated">어레이를 사용하여 미들웨어를 논리적으로 그룹화하십시오. 미들웨어 배열을 첫 번째 또는 유일한 미들웨어 매개 변수로 전달하는 경우 마운트 경로를 지정 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="27a741103afa3ffffd43676c4ac698704424f032" translate="yes" xml:space="preserve">
          <source>Use an init system</source>
          <target state="translated">init 시스템 사용</target>
        </trans-unit>
        <trans-unit id="975a1cb62c4c0de841d4ba0e44fb702cff6b1937" translate="yes" xml:space="preserve">
          <source>Use cookies securely</source>
          <target state="translated">쿠키를 안전하게 사용하십시오</target>
        </trans-unit>
        <trans-unit id="9a7d880256013e0fbc96622b6897da9ed70c2e59" translate="yes" xml:space="preserve">
          <source>Use gzip compression</source>
          <target state="translated">gzip 압축 사용</target>
        </trans-unit>
        <trans-unit id="bf3ad30cb26ebd99be031d05deef7058432597bd" translate="yes" xml:space="preserve">
          <source>Use promises</source>
          <target state="translated">약속 사용</target>
        </trans-unit>
        <trans-unit id="c2eaf7dafcff98319621114957e9f32fc2b6b505" translate="yes" xml:space="preserve">
          <source>Use promises to avoid the overhead of the &lt;code&gt;try..catch&lt;/code&gt; block or when using functions that return promises. For example:</source>
          <target state="translated">약속을 사용하여 &lt;code&gt;try..catch&lt;/code&gt; 블록 의 오버 헤드를 방지 하거나 약속을 반환하는 함수를 사용할 때. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ac06791a68881a1b554d195ce538cc4aa8d60dd7" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://nmap.org/&quot;&gt;nmap&lt;/a&gt; and &lt;a href=&quot;https://github.com/nabla-c0d3/sslyze&quot;&gt;sslyze&lt;/a&gt; tools to test the configuration of your SSL ciphers, keys, and renegotiation as well as the validity of your certificate.</source>
          <target state="translated">&lt;a href=&quot;https://nmap.org/&quot;&gt;nmap&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/nabla-c0d3/sslyze&quot;&gt;sslyze&lt;/a&gt; 도구를 사용 하여 인증서의 유효성뿐만 아니라 SSL 암호, 키 및 재협상 구성을 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="402e2cebebb17d60701c9b4a2ec5aeca0353738a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;app.engine(ext, callback)&lt;/code&gt; method to create your own template engine. &lt;code&gt;ext&lt;/code&gt; refers to the file extension, and &lt;code&gt;callback&lt;/code&gt; is the template engine function, which accepts the following items as parameters: the location of the file, the options object, and the callback function.</source>
          <target state="translated">사용 &lt;code&gt;app.engine(ext, callback)&lt;/code&gt; 자신의 템플릿 엔진을 만드는 방법. &lt;code&gt;ext&lt;/code&gt; 는 파일 확장자를 나타내며 &lt;code&gt;callback&lt;/code&gt; 은 템플릿 엔진 함수이며 파일의 위치, 옵션 객체 및 콜백 함수와 같은 항목을 매개 변수로 허용합니다.</target>
        </trans-unit>
        <trans-unit id="10a48ab614a8bd860342c4a69066fc9f8ce06896" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;express.Router&lt;/code&gt; class to create modular, mountable route handlers. A &lt;code&gt;Router&lt;/code&gt; instance is a complete middleware and routing system; for this reason, it is often referred to as a &amp;ldquo;mini-app&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;express.Router&lt;/code&gt; 클래스를 사용하여 마운트 가능한 모듈 식 라우트 핸들러를 작성 하십시오 . &lt;code&gt;Router&lt;/code&gt; 인스턴스는 완전한 미들웨어 및 라우팅 시스템입니다; 이러한 이유로 종종 &quot;미니 앱&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="2b0f5e15d50e3580e380b77c0b8193c797838c29" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;npm init&lt;/code&gt; command to create a &lt;code&gt;package.json&lt;/code&gt; file for your application. For more information on how &lt;code&gt;package.json&lt;/code&gt; works, see &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;Specifics of npm&amp;rsquo;s package.json handling&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;code&gt;npm init&lt;/code&gt; 만들 명령을 &lt;code&gt;package.json&lt;/code&gt; 의 응용 프로그램에 대한 파일을. &lt;code&gt;package.json&lt;/code&gt; 의 작동 방식 에 대한 자세한 정보 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;는 npm의 package.json 처리 세부 사항을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a5ed754a08ec38ba5129971920e73486079d9ca" translate="yes" xml:space="preserve">
          <source>Use the application generator tool, &lt;code&gt;express-generator&lt;/code&gt;, to quickly create an application skeleton.</source>
          <target state="translated">애플리케이션 생성기 도구 인 &lt;code&gt;express-generator&lt;/code&gt; 를 사용하여 애플리케이션 스켈레톤을 빠르게 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="b167954a8c8aaef02302a47b4713756baeca2f5b" translate="yes" xml:space="preserve">
          <source>Use the module according to its documentation: &lt;code&gt;app.use( ... )&lt;/code&gt;</source>
          <target state="translated">설명서에 따라 모듈을 사용하십시오. &lt;code&gt;app.use( ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb65cda5338a2a461000fb0f78b38d5bda1aabef" translate="yes" xml:space="preserve">
          <source>Use the open-source &lt;a href=&quot;http://sqlmap.org/&quot;&gt;sqlmap&lt;/a&gt; tool to detect SQL injection vulnerabilities in your app.</source>
          <target state="translated">오픈 소스 &lt;a href=&quot;http://sqlmap.org/&quot;&gt;sqlmap&lt;/a&gt; 도구를 사용 하여 앱에서 SQL 인젝션 취약점을 탐지하십시오.</target>
        </trans-unit>
        <trans-unit id="d9fc0658b28305b4640074d3f740947da7109632" translate="yes" xml:space="preserve">
          <source>Use third-party middleware to add functionality to Express apps.</source>
          <target state="translated">타사 미들웨어를 사용하여 Express 앱에 기능을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d09c99575956d0ad4f4fb22fd6a6f7d9b2dfc48c" translate="yes" xml:space="preserve">
          <source>Use this command to open a wizard that walks you through the process of applying updates or patches to fix the vulnerabilities that were found:</source>
          <target state="translated">발견 된 취약점을 해결하기 위해 업데이트 또는 패치 적용 프로세스를 안내하는 마법사를 열려면이 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="26cb220c84713286eebb65fe910ff44a323d050a" translate="yes" xml:space="preserve">
          <source>Use this command to test your application for vulnerabilities:</source>
          <target state="translated">이 명령을 사용하여 응용 프로그램의 취약점을 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="20d50c5d7ebafbb34dd5729ecbb1bc3fed22d92e" translate="yes" xml:space="preserve">
          <source>Use this method for engines that do not provide &lt;code&gt;.__express&lt;/code&gt; out of the box, or if you wish to &amp;ldquo;map&amp;rdquo; a different extension to the template engine.</source>
          <target state="translated">&lt;code&gt;.__express&lt;/code&gt; 제공하지 않거나 템플리트 엔진에 다른 확장자를 &quot;매핑&quot;하려는 경우이 방법을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="85fae4738cd97d2316ea63e464bf7578d52bcff3" translate="yes" xml:space="preserve">
          <source>Use to quickly end the response without any data. If you need to respond with data, instead use methods such as &lt;a href=&quot;#res.send&quot;&gt;res.send()&lt;/a&gt; and &lt;a href=&quot;#res.json&quot;&gt;res.json()&lt;/a&gt;.</source>
          <target state="translated">데이터없이 신속하게 응답을 종료하는 데 사용합니다. 데이터로 응답해야하는 경우 &lt;a href=&quot;#res.send&quot;&gt;res.send ()&lt;/a&gt; 및 &lt;a href=&quot;#res.json&quot;&gt;res.json ()&lt;/a&gt; 과 같은 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="902e06128bbbdbfa5af337a6b50e502630b4a69f" translate="yes" xml:space="preserve">
          <source>Use try-catch</source>
          <target state="translated">try-catch 사용</target>
        </trans-unit>
        <trans-unit id="4e340171e2a1dbe1b56c47d487e564503cfd65a4" translate="yes" xml:space="preserve">
          <source>Uses the specified middleware function or functions, with optional mount path &lt;code&gt;path&lt;/code&gt;, that defaults to &amp;ldquo;/&amp;rdquo;.</source>
          <target state="translated">선택적 마운트 경로 &lt;code&gt;path&lt;/code&gt; 와 함께 지정된 미들웨어 기능을 사용하며 기본값은 &quot;/&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="654f3bf05b77360df0a3406aeca71887e7f6c41d" translate="yes" xml:space="preserve">
          <source>Using Node&amp;rsquo;s cluster module</source>
          <target state="translated">노드의 클러스터 모듈 사용</target>
        </trans-unit>
        <trans-unit id="ed7e58dba08b5bbd33a51ab77dc535570101ba4b" translate="yes" xml:space="preserve">
          <source>Using PM2</source>
          <target state="translated">PM2 사용</target>
        </trans-unit>
        <trans-unit id="99dc3d579975a83c8bfee195fa3c382d605df9cb" translate="yes" xml:space="preserve">
          <source>Using StrongLoop PM</source>
          <target state="translated">StrongLoop PM 사용</target>
        </trans-unit>
        <trans-unit id="93af00e90887257be98737715d7b9512739fd90b" translate="yes" xml:space="preserve">
          <source>Using a process manager to restart the app (and Node) when it crashes.</source>
          <target state="translated">프로세스 관리자를 사용하여 앱 및 노드가 충돌 할 때 다시 시작합니다.</target>
        </trans-unit>
        <trans-unit id="e9e88d83e9f5bdd6606c81ada6a1e5e4a7e2c54d" translate="yes" xml:space="preserve">
          <source>Using any of these four tools can be very helpful, however StrongLoop Process Manager is the only tool that provides a comprehensive runtime and deployment solution that addresses the entire Node.js application life cycle, with tooling for every step before and after production, in a unified interface.</source>
          <target state="translated">이 4 가지 도구 중 하나를 사용하면 매우 도움이 될 수 있지만 StrongLoop Process Manager는 전체 Node.js 애플리케이션 수명주기를 해결하는 포괄적 인 런타임 및 배포 솔루션을 제공하는 유일한 도구로, 프로덕션 전후의 모든 단계에 대한 툴링을 제공합니다. 통합 인터페이스.</target>
        </trans-unit>
        <trans-unit id="6b59ba3bacb0395c40b1cd2367e58d01d3cb95f7" translate="yes" xml:space="preserve">
          <source>Using any of these process managers will suffice to keep your application up, even if it does crash from time to time.</source>
          <target state="translated">이러한 프로세스 관리자를 사용하면 때때로 충돌이 발생하더라도 응용 프로그램을 유지하기에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="083a810caa46fbc37f37806ef55b10b0f6008390" translate="yes" xml:space="preserve">
          <source>Using middleware</source>
          <target state="translated">미들웨어 사용</target>
        </trans-unit>
        <trans-unit id="986b1f6b1ad043d2ce053a3361640dbdb32b8b1a" translate="yes" xml:space="preserve">
          <source>Using npm to manage your application&amp;rsquo;s dependencies is powerful and convenient. But the packages that you use may contain critical security vulnerabilities that could also affect your application. The security of your app is only as strong as the &amp;ldquo;weakest link&amp;rdquo; in your dependencies.</source>
          <target state="translated">npm을 사용하여 응용 프로그램의 종속성을 관리하는 것이 강력하고 편리합니다. 그러나 사용하는 패키지에는 응용 프로그램에 영향을 줄 수있는 중요한 보안 취약점이있을 수 있습니다. 앱의 보안은 종속성의 &quot;가장 약한 링크&quot;만큼 강력합니다.</target>
        </trans-unit>
        <trans-unit id="d15e03d3bf76fe22116274f02829fd0f950aef97" translate="yes" xml:space="preserve">
          <source>Using template engines with Express</source>
          <target state="translated">Express에서 템플릿 엔진 사용</target>
        </trans-unit>
        <trans-unit id="88dad4f352fd25bbb342e06fd4d4f3aaf02ad16d" translate="yes" xml:space="preserve">
          <source>Using the default session cookie name can open your app to attacks. The security issue posed is similar to &lt;code&gt;X-Powered-By&lt;/code&gt;: a potential attacker can use it to fingerprint the server and target attacks accordingly.</source>
          <target state="translated">기본 세션 쿠키 이름을 사용하면 앱이 공격에 노출 될 수 있습니다. 제기 된 보안 문제는 &lt;code&gt;X-Powered-By&lt;/code&gt; 와 유사합니다 . 잠재적 공격자는이 정보를 사용하여 서버를 지문으로 인식하고 그에 따라 공격을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff9cc0c45cda492964982d7bb4e6026ccfa4d1d8" translate="yes" xml:space="preserve">
          <source>Using the init system provided by your OS to restart the process manager when the OS crashes. It&amp;rsquo;s also possible to use the init system without a process manager.</source>
          <target state="translated">OS가 제공 할 때 OS가 제공 한 init 시스템을 사용하여 프로세스 관리자를 다시 시작하십시오. 프로세스 관리자없이 init 시스템을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="b384be08e3744f644d6661d74d37f3a2500f08d7" translate="yes" xml:space="preserve">
          <source>Value of the &amp;ldquo;SameSite&amp;rdquo; &lt;strong&gt;Set-Cookie&lt;/strong&gt; attribute. More information at &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&quot;&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&lt;/a&gt;.</source>
          <target state="translated">&quot;SameSite&quot; &lt;strong&gt;Set-Cookie&lt;/strong&gt; 속성의 값입니다 . 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1&quot;&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00#section-4.1.1에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="07e9c0b5945c7935722397003f02b17b15f53167" translate="yes" xml:space="preserve">
          <source>Varied</source>
          <target state="translated">Varied</target>
        </trans-unit>
        <trans-unit id="313e3195b8777bdfcaf118aada15075b112e9026" translate="yes" xml:space="preserve">
          <source>Various other changes.</source>
          <target state="translated">다양한 다른 변화들.</target>
        </trans-unit>
        <trans-unit id="1b75cf0a0a90a6e984c7c739220f3506d3b65e97" translate="yes" xml:space="preserve">
          <source>Version 3 app</source>
          <target state="translated">버전 3 앱</target>
        </trans-unit>
        <trans-unit id="bba4be33fc4135a08d9f92218a86cb87aaf67a8a" translate="yes" xml:space="preserve">
          <source>Version 4 app</source>
          <target state="translated">버전 4 앱</target>
        </trans-unit>
        <trans-unit id="8d3a5f6f7177b543da808decde47ae7014e5e733" translate="yes" xml:space="preserve">
          <source>View CPU profiles and heap snapshots to optimize performance and diagnose memory leaks.</source>
          <target state="translated">CPU 프로파일 및 힙 스냅 샷을보고 성능을 최적화하고 메모리 누수를 진단하십시오.</target>
        </trans-unit>
        <trans-unit id="8dbc5ebdf047a122b839510acaf7e34e34ee82a6" translate="yes" xml:space="preserve">
          <source>View performance metrics for your application.</source>
          <target state="translated">응용 프로그램의 성능 지표를 봅니다.</target>
        </trans-unit>
        <trans-unit id="8f6d0d87ece400b8cf64cd304ffa809e3eaac0af" translate="yes" xml:space="preserve">
          <source>View performance metrics on your application.</source>
          <target state="translated">애플리케이션에서 성능 지표를 봅니다.</target>
        </trans-unit>
        <trans-unit id="032b39e1a29b75323ed6e822431fdf1653840053" translate="yes" xml:space="preserve">
          <source>View the status of Process Manager and all deployed apps:</source>
          <target state="translated">프로세스 관리자 및 배포 된 모든 앱의 상태를 봅니다.</target>
        </trans-unit>
        <trans-unit id="840005c99ca00aaadff0aa978bf6fd105851a418" translate="yes" xml:space="preserve">
          <source>Was a function; now an object.</source>
          <target state="translated">기능이었다; 이제 개체입니다.</target>
        </trans-unit>
        <trans-unit id="e2ce2bc0e4251b94db6ef70e713d919be237ddd7" translate="yes" xml:space="preserve">
          <source>Was an array; now an object.</source>
          <target state="translated">배열이었다; 이제 개체입니다.</target>
        </trans-unit>
        <trans-unit id="cbe5e34be9e88f0e513902136c6edc0db8309f06" translate="yes" xml:space="preserve">
          <source>We also don&amp;rsquo;t recommend using &lt;a href=&quot;https://nodejs.org/api/domain.html&quot;&gt;domains&lt;/a&gt;. It generally doesn&amp;rsquo;t solve the problem and is a deprecated module.</source>
          <target state="translated">또한 &lt;a href=&quot;https://nodejs.org/api/domain.html&quot;&gt;도메인&lt;/a&gt; 사용을 권장하지 않습니다 . 일반적으로 문제를 해결하지 않으며 더 이상 사용되지 않는 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="725f77d1ff07e7333aab3f34668b6b7e73d2487d" translate="yes" xml:space="preserve">
          <source>Web browsers and other compliant clients will only clear the cookie if the given &lt;code&gt;options&lt;/code&gt; is identical to those given to &lt;a href=&quot;#res.cookie&quot;&gt;res.cookie()&lt;/a&gt;, excluding &lt;code&gt;expires&lt;/code&gt; and &lt;code&gt;maxAge&lt;/code&gt;.</source>
          <target state="translated">웹 브라우저 및 기타 호환 클라이언트는 지정된 &lt;code&gt;options&lt;/code&gt; 이 &lt;a href=&quot;#res.cookie&quot;&gt;res.cookie ()에&lt;/a&gt; 지정된 옵션 과 동일한 경우에만 &lt;code&gt;expires&lt;/code&gt; 및 &lt;code&gt;maxAge&lt;/code&gt; 를 제외 하고 쿠키를 지 웁니다 .</target>
        </trans-unit>
        <trans-unit id="e57180805b4fa9b41b1a61c5b0fcb6b6d98b20c3" translate="yes" xml:space="preserve">
          <source>What not to do</source>
          <target state="translated">하지 말아야 할 것</target>
        </trans-unit>
        <trans-unit id="9705af16b960bbfb3b6da178b485da7d5dc3aa9b" translate="yes" xml:space="preserve">
          <source>When StrongLoop Process Manager (PM) runs an application, it automatically runs it in a cluster with a number of workers equal to the number of CPU cores on the system. You can manually change the number of worker processes in the cluster using the slc command line tool without stopping the app.</source>
          <target state="translated">PM (StrongLoop Process Manager)이 애플리케이션을 실행하면 시스템의 CPU 코어 수와 동일한 작업자 수가있는 클러스터에서 자동으로 애플리케이션을 실행합니다. 앱을 중지하지 않고 slc 명령 줄 도구를 사용하여 클러스터에서 작업자 프로세스 수를 수동으로 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22fcf3ab0c770fc0609563dd477686e765908780" translate="yes" xml:space="preserve">
          <source>When a client sends the &lt;code&gt;Cache-Control: no-cache&lt;/code&gt; request header to indicate an end-to-end reload request, this module will return &lt;code&gt;false&lt;/code&gt; to make handling these requests transparent.</source>
          <target state="translated">클라이언트 가 종단 간 재로드 요청을 나타 내기 위해 &lt;code&gt;Cache-Control: no-cache&lt;/code&gt; 요청 헤더를 보낼 때이 모듈은 이러한 요청을 투명하게 처리하기 위해 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="501c75627bf5873f6ed0764334661d4dd399725c" translate="yes" xml:space="preserve">
          <source>When a request is made to &lt;code&gt;/greet/jp&lt;/code&gt;, &lt;code&gt;req.baseUrl&lt;/code&gt; is &amp;ldquo;/greet&amp;rdquo;. When a request is made to &lt;code&gt;/hello/jp&lt;/code&gt;, &lt;code&gt;req.baseUrl&lt;/code&gt; is &amp;ldquo;/hello&amp;rdquo;.</source>
          <target state="translated">요청이하려고 할 때 &lt;code&gt;/greet/jp&lt;/code&gt; , &lt;code&gt;req.baseUrl&lt;/code&gt; 이 있다 &quot;/ 인사&quot;. 요청을하려고 할 때 &lt;code&gt;/hello/jp&lt;/code&gt; , &lt;code&gt;req.baseUrl&lt;/code&gt; 는 &quot;/ 안녕하세요&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="2a13209ce06db6ad843d64699453b28b2d44f24b" translate="yes" xml:space="preserve">
          <source>When a request is then made to the app, you will see the logs specified in the Express code:</source>
          <target state="translated">그런 다음 앱에 요청하면 Express 코드에 지정된 로그가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3763069422f8e223e5f809023d15f1f53eb78128" translate="yes" xml:space="preserve">
          <source>When an error is written, the following information is added to the response:</source>
          <target state="translated">오류가 기록되면 다음 정보가 응답에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="02e357d1d01f898305f5390f0fdd3955974b7d32" translate="yes" xml:space="preserve">
          <source>When an error occurs or transfer is complete, the method calls the optional callback function &lt;code&gt;fn&lt;/code&gt;. This method uses &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile()&lt;/a&gt; to transfer the file.</source>
          <target state="translated">오류가 발생하거나 전송이 완료되면 메소드는 선택적 콜백 함수 &lt;code&gt;fn&lt;/code&gt; 을 호출합니다 . 이 메소드는 &lt;a href=&quot;#res.sendFile&quot;&gt;res.sendFile ()&lt;/a&gt; 을 사용 하여 파일을 전송합니다.</target>
        </trans-unit>
        <trans-unit id="4ed6b235e1c71c4d3da06dd2039800decab66c92" translate="yes" xml:space="preserve">
          <source>When called from a middleware, the mount point is not included in &lt;code&gt;req.path&lt;/code&gt;. See &lt;a href=&quot;http://expressjs.com/index.html#app.use&quot;&gt;app.use()&lt;/a&gt; for more details.</source>
          <target state="translated">미들웨어에서 호출하면 마운트 포인트가 &lt;code&gt;req.path&lt;/code&gt; 에 포함되지 않습니다 . 자세한 내용은 &lt;a href=&quot;http://expressjs.com/index.html#app.use&quot;&gt;app.use ()&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="55d9aaa93ce05438d0e4ea773e11b6e9636744be" translate="yes" xml:space="preserve">
          <source>When enabled, Express attempts to determine the IP address of the client connected through the front-facing proxy, or series of proxies. The `req.ips` property, then contains an array of IP addresses the client is connected through. To enable it, use the values described in the &lt;a href=&quot;#trust.proxy.options.table&quot;&gt;trust proxy options table&lt;/a&gt;.</source>
          <target state="translated">활성화 된 경우 Express는 전면 프록시 또는 일련의 프록시를 통해 연결된 클라이언트의 IP 주소를 확인하려고합니다. `req.ips` 속성은 클라이언트가 연결된 IP 주소 배열을 포함합니다. 이를 사용하려면 &lt;a href=&quot;#trust.proxy.options.table&quot;&gt;신뢰 프록시 옵션 테이블에&lt;/a&gt; 설명 된 값을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="32c85044bc57f0d6a884e4489274a420e7a2a184" translate="yes" xml:space="preserve">
          <source>When running an Express app behind a proxy, set (by using &lt;a href=&quot;../index#app.set&quot;&gt;app.set()&lt;/a&gt;) the application variable &lt;code&gt;trust proxy&lt;/code&gt; to one of the values listed in the following table.</source>
          <target state="translated">프록시 뒤에서 Express 앱을 실행하는 경우 ( &lt;a href=&quot;../index#app.set&quot;&gt;app.set ()&lt;/a&gt; 을 사용하여 ) 애플리케이션 변수 &lt;code&gt;trust proxy&lt;/code&gt; 를 다음 표에 나열된 값 중 하나로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a7c9495350f9799c80da28b9b15615ee54293fc4" translate="yes" xml:space="preserve">
          <source>When running an application with PM2, you can enable &lt;strong&gt;cluster mode&lt;/strong&gt; to run it in a cluster with a number of instances of your choosing, such as the matching the number of available CPUs on the machine. You can manually change the number of processes in the cluster using the &lt;code&gt;pm2&lt;/code&gt; command line tool without stopping the app.</source>
          <target state="translated">PM2를 사용하여 응용 프로그램 을 실행하는 경우 컴퓨터에서 사용 가능한 CPU 수와 같은 여러 인스턴스를 선택하여 클러스터에서 &lt;strong&gt;클러스터 모드&lt;/strong&gt; 를 실행할 수 있습니다. 앱을 중지하지 않고 &lt;code&gt;pm2&lt;/code&gt; 명령 줄 도구를 사용하여 클러스터의 프로세스 수를 수동으로 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8718d114494b58133c220dfc493f3bb36c1dd6d5" translate="yes" xml:space="preserve">
          <source>When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging:</source>
          <target state="translated">Node.js를 통해 실행할 때 디버그 로깅의 동작을 변경하는 몇 가지 환경 변수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3bf187cc64c7a6034a0b049373e96ea76d47cc0" translate="yes" xml:space="preserve">
          <source>When specified, the IP addresses or the subnets are excluded from the address determination process, and the untrusted IP address nearest to the application server is determined as the client&amp;rsquo;s IP address.</source>
          <target state="translated">지정된 경우 IP 주소 또는 서브넷이 주소 결정 프로세스에서 제외되고 응용 프로그램 서버에 가장 가까운 신뢰할 수없는 IP 주소가 클라이언트의 IP 주소로 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="8ee3b71d91dea9af0efb8da6ed0f211084882e46" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will use the value of the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header field if present. This header can be set by the client or by the proxy.</source>
          <target state="translated">때 &lt;a href=&quot;#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 설정&lt;/a&gt; 을 평가하지 않습니다 &lt;code&gt;false&lt;/code&gt; 이 속성의 값을 사용합니다 &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; 헤더 필드 존재하는 경우입니다. 이 헤더는 클라이언트 또는 프록시에서 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbd362e75c41d7b3a53b3434b31e630d2d3538a4" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, the value of this property is derived from the left-most entry in the &lt;code&gt;X-Forwarded-For&lt;/code&gt; header. This header can be set by the client or by the proxy.</source>
          <target state="translated">때 &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 설정&lt;/a&gt; 을 평가하지 않습니다 &lt;code&gt;false&lt;/code&gt; 이 속성의 값에서 가장 왼쪽에있는 항목에서 파생 된 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 헤더입니다. 이 헤더는 클라이언트 또는 프록시에 의해 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce50831515757b2bb1be2df81591c7189da47af2" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property contains an array of IP addresses specified in the &lt;code&gt;X-Forwarded-For&lt;/code&gt; request header. Otherwise, it contains an empty array. This header can be set by the client or by the proxy.</source>
          <target state="translated">때 &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 설정&lt;/a&gt; 을 평가하지 않습니다 &lt;code&gt;false&lt;/code&gt; 이 속성에 지정된 IP 주소의 배열을 포함하는 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 요청 헤더. 그렇지 않으면 빈 배열이 포함됩니다. 이 헤더는 클라이언트 또는 프록시에 의해 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3c8243790cc76f8a149a9d0f261b0fa1b235df1" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will instead get the value from the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header field. This header can be set by the client or by the proxy.</source>
          <target state="translated">때 &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 설정&lt;/a&gt; 을 평가하지 않습니다 &lt;code&gt;false&lt;/code&gt; 이 속성 대신의 값 얻을 것이다 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 헤더 필드를. 이 헤더는 클라이언트 또는 프록시에서 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43b29989490006b123a1fed6d88ef54e8b7bd056" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will instead have the value of the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header field. This header can be set by the client or by the proxy.</source>
          <target state="translated">때 &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 설정&lt;/a&gt; 을 평가하지 않습니다 &lt;code&gt;false&lt;/code&gt; 이 속성 대신의 값이됩니다 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 헤더 필드를. 이 헤더는 클라이언트 또는 프록시에 의해 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7f7c94e0ad0f11ece916f4860888b8e24018424" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt;&lt;code&gt;trust proxy&lt;/code&gt; setting&lt;/a&gt; does not evaluate to &lt;code&gt;false&lt;/code&gt;, this property will use the value of the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header field if present. This header can be set by the client or by the proxy.</source>
          <target state="translated">때 &lt;a href=&quot;http://expressjs.com/index.html#trust.proxy.options.table&quot;&gt; &lt;code&gt;trust proxy&lt;/code&gt; 설정&lt;/a&gt; 을 평가하지 않습니다 &lt;code&gt;false&lt;/code&gt; 이 속성의 값을 사용합니다 &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; 헤더 필드 존재하는 경우입니다. 이 헤더는 클라이언트 또는 프록시에 의해 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5626e2a7a298a5a2201387af8876bd72beda3a53" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;root&lt;/code&gt; option is provided, the &lt;code&gt;path&lt;/code&gt; argument is allowed to be a relative path, including containing &lt;code&gt;..&lt;/code&gt;. Express will validate that the relative path provided as &lt;code&gt;path&lt;/code&gt; will resolve within the given &lt;code&gt;root&lt;/code&gt; option.</source>
          <target state="translated">때 &lt;code&gt;root&lt;/code&gt; 옵션이 제공되면, &lt;code&gt;path&lt;/code&gt; 인수를 포함 포함, 상대 경로가 될 수있다 &lt;code&gt;..&lt;/code&gt; . . 익스프레스가 제공 상대 경로 것을 검증하는 &lt;code&gt;path&lt;/code&gt; 주어진 내에서 해결됩니다 &lt;code&gt;root&lt;/code&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="d53fc9203cdc95f94a55562a14485c99b8a9949d" translate="yes" xml:space="preserve">
          <source>When the parameter is a &lt;code&gt;Buffer&lt;/code&gt; object, the method sets the &lt;code&gt;Content-Type&lt;/code&gt; response header field to &amp;ldquo;application/octet-stream&amp;rdquo;, unless previously defined as shown below:</source>
          <target state="translated">매개 변수가 &lt;code&gt;Buffer&lt;/code&gt; 객체 인 경우이 메서드는 이전에 아래와 같이 정의하지 않은 경우 &lt;code&gt;Content-Type&lt;/code&gt; 응답 헤더 필드를 &quot;application / octet-stream&quot;으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7b0049ab549f6d0d34dc584905288009eb3cb2e4" translate="yes" xml:space="preserve">
          <source>When the parameter is a &lt;code&gt;String&lt;/code&gt;, the method sets the &lt;code&gt;Content-Type&lt;/code&gt; to &amp;ldquo;text/html&amp;rdquo;:</source>
          <target state="translated">매개 변수가 &lt;code&gt;String&lt;/code&gt; 인 경우 메소드는 &lt;code&gt;Content-Type&lt;/code&gt; 을 &quot;text / html&quot;로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c7ba0d6a23b9ed3115c1635386577be778c6b4aa" translate="yes" xml:space="preserve">
          <source>When the parameter is an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Object&lt;/code&gt;, Express responds with the JSON representation:</source>
          <target state="translated">매개 변수가 &lt;code&gt;Array&lt;/code&gt; 또는 &lt;code&gt;Object&lt;/code&gt; 인 경우 Express는 JSON 표현으로 응답합니다.</target>
        </trans-unit>
        <trans-unit id="7abf9099a612dd6978b67d1aa48069db28a0d4fe" translate="yes" xml:space="preserve">
          <source>When the response is still &amp;ldquo;fresh&amp;rdquo; in the client&amp;rsquo;s cache &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt; is returned to indicate that the client cache is now stale and the full response should be sent.</source>
          <target state="translated">응답이 클라이언트 캐시에서 여전히 &quot;새로&quot; 인 경우 &lt;code&gt;true&lt;/code&gt; 가 반환되고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 가 반환되어 클라이언트 캐시가 현재 부실하고 전체 응답을 보내야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="34ef7c7734b2e6c93e13e00c6118eca632c95cd0" translate="yes" xml:space="preserve">
          <source>When this option is &lt;code&gt;true&lt;/code&gt;, client errors such as a bad request or a request to a non-existent file will cause this middleware to simply call &lt;code&gt;next()&lt;/code&gt; to invoke the next middleware in the stack. When false, these errors (even 404s), will invoke &lt;code&gt;next(err)&lt;/code&gt;.</source>
          <target state="translated">이 옵션이 &lt;code&gt;true&lt;/code&gt; 이면 잘못된 요청 또는 존재하지 않는 파일에 대한 요청과 같은 클라이언트 오류로 인해이 미들웨어가 &lt;code&gt;next()&lt;/code&gt; 를 호출하여 스택에서 다음 미들웨어를 호출하게됩니다. false 인 경우 이러한 오류 (404도 포함)는 &lt;code&gt;next(err)&lt;/code&gt; 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="241a1ef9cbb953d3dd1bcbdf485e7709184954a6" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this method also supports signed cookies. Simply include the &lt;code&gt;signed&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. Then &lt;code&gt;res.cookie()&lt;/code&gt; will use the secret passed to &lt;code&gt;cookieParser(secret)&lt;/code&gt; to sign the value.</source>
          <target state="translated">사용하는 경우 &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;쿠키 파서&lt;/a&gt; 미들웨어,이 방법은 서명 쿠키를 지원합니다. 간단히 포함 &lt;code&gt;signed&lt;/code&gt; 으로 설정 옵션이 &lt;code&gt;true&lt;/code&gt; . 그런 다음 &lt;code&gt;res.cookie()&lt;/code&gt; 는 &lt;code&gt;cookieParser(secret)&lt;/code&gt; 에 전달 된 비밀을 사용 하여 값을 서명합니다.</target>
        </trans-unit>
        <trans-unit id="cbc29d15127af324c2a1391b359a25496708ce09" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this property contains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside in a different object to show developer intent; otherwise, a malicious attack could be placed on &lt;code&gt;req.cookie&lt;/code&gt; values (which are easy to spoof). Note that signing a cookie does not make it &amp;ldquo;hidden&amp;rdquo; or encrypted; but simply prevents tampering (because the secret used to sign is private).</source>
          <target state="translated">사용하는 경우 &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;쿠키 파서&lt;/a&gt; 미들웨어,이 속성 서명되지 않은 사용을위한 준비, 요청에 의해 전송 된 쿠키를 서명 포함되어 있습니다. 서명 된 쿠키는 개발자 의도를 나타 내기 위해 다른 개체에 상주합니다. 그렇지 않으면, &lt;code&gt;req.cookie&lt;/code&gt; 값 (스푸핑하기 쉬운) 에 악의적 인 공격이 가해질 수 있습니다 . 쿠키에 서명해도 쿠키가&amp;ldquo;숨겨 지거나&amp;rdquo;암호화되지는 않습니다. 서명하는 데 사용 된 비밀이 비공개이기 때문에 단순히 변조를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="6aca4707c58c587acb5d60b42e8c8c750f5a5242" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;cookie-parser&lt;/a&gt; middleware, this property is an object that contains cookies sent by the request. If the request contains no cookies, it defaults to &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">사용하는 경우 &lt;a href=&quot;https://www.npmjs.com/package/cookie-parser&quot;&gt;쿠키 파서&lt;/a&gt; 미들웨어,이 속성은 요청에 의해 전송 된 쿠키를 포함하는 개체입니다. 요청에 쿠키가없는 경우 기본값은 &lt;code&gt;{}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="03f62ca822bb0bd974e0c5045f5d781823948cd7" translate="yes" xml:space="preserve">
          <source>When you deploy a new version of your application, you must replace the previous version. The &lt;a href=&quot;pm&quot;&gt;process manager&lt;/a&gt; you&amp;rsquo;re using will first send a SIGTERM signal to the application to notify it that it will be killed. Once the application gets this signal, it should stop accepting new requests, finish all the ongoing requests, clean up the resources it used, including database connections and file locks then exit.</source>
          <target state="translated">애플리케이션의 새 버전을 배포 할 때 이전 버전을 교체해야합니다. &lt;a href=&quot;pm&quot;&gt;프로세스 관리자&lt;/a&gt; 사용중인 먼저 살해 될 것이라고를 알리기 위해 응용 프로그램에 SIGTERM 신호를 보냅니다. 애플리케이션이이 신호를 받으면 새 요청 수락을 중지하고 진행중인 모든 요청을 완료하고 데이터베이스 연결 및 파일 잠금을 포함하여 사용 된 리소스를 정리 한 다음 종료해야합니다.</target>
        </trans-unit>
        <trans-unit id="527bc3d9a378866748647528d7a788311664bf1e" translate="yes" xml:space="preserve">
          <source>When you deploy a new version of your application, you must replace the previous version. The &lt;a href=&quot;pm&quot;&gt;process manager&lt;/a&gt; you&amp;rsquo;re using will first send a SIGTERM signal to the application to notify it that it will be killed. Once the application gets this signal, it will stop accepting new requests, finish all the ongoing requests, and clean up the resources it used, including database connections and file locks.</source>
          <target state="translated">새 버전의 응용 프로그램을 배포 할 때는 이전 버전을 바꿔야합니다. &lt;a href=&quot;pm&quot;&gt;프로세스 관리자&lt;/a&gt; 사용중인 먼저 살해 될 것이라고를 알리기 위해 응용 프로그램에 SIGTERM 신호를 보냅니다. 응용 프로그램이이 신호를 받으면 새 요청 수락을 중지하고 진행중인 모든 요청을 완료하며 데이터베이스 연결 및 파일 잠금을 포함하여 사용 된 리소스를 정리합니다.</target>
        </trans-unit>
        <trans-unit id="112db72b1b684632edf5399c5fd68decb2048e78" translate="yes" xml:space="preserve">
          <source>When you make a request to the home page, &lt;code&gt;index.ntl&lt;/code&gt; will be rendered as HTML.</source>
          <target state="translated">홈페이지를 요청하면 &lt;code&gt;index.ntl&lt;/code&gt; 이 HTML로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="f40ea203a597f70c6562ce508b93150441d07be2" translate="yes" xml:space="preserve">
          <source>When you make a request to the home page, the &lt;code&gt;index.pug&lt;/code&gt; file will be rendered as HTML.</source>
          <target state="translated">홈 페이지를 요청하면 &lt;code&gt;index.pug&lt;/code&gt; 파일이 HTML로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="28e2a41040365a3317d4cc514f3f135fc159164e" translate="yes" xml:space="preserve">
          <source>When you make a request to the root of the app, the app now displays the timestamp of your request in the browser.</source>
          <target state="translated">앱의 루트에 요청하면 이제 앱에 브라우저에 요청 타임 스탬프가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="15a48d068b5118e8159fde711e2291a6f8f2ce62" translate="yes" xml:space="preserve">
          <source>When you run Express apps for production, it is helpful to use a &lt;em&gt;process manager&lt;/em&gt; to achieve the following tasks:</source>
          <target state="translated">프로덕션 용 Express 앱을 실행할 때 &lt;em&gt;프로세스 관리자&lt;/em&gt; 를 사용 하여 다음 작업을 수행 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="009f86cf89a86f0607fb4fd4704007c386d7da46" translate="yes" xml:space="preserve">
          <source>When you run Express apps for production, it is helpful to use a &lt;em&gt;process manager&lt;/em&gt; to:</source>
          <target state="translated">프로덕션 용 Express 앱을 실행할 때 &lt;em&gt;프로세스 관리자&lt;/em&gt; 를 사용하여 다음을 &lt;em&gt;수행&lt;/em&gt; 하는 것이 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="13e6fb3d9ea8a3687a1f5b5b573d13fbe7bb3b86" translate="yes" xml:space="preserve">
          <source>When you start an app by using the &lt;code&gt;pm2&lt;/code&gt; command, the app is immediately sent to the background. You can control the background app from the command line by using various &lt;code&gt;pm2&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;pm2&lt;/code&gt; 명령 을 사용하여 앱을 시작하면 앱 이 즉시 백그라운드로 전송됩니다. 다양한 &lt;code&gt;pm2&lt;/code&gt; 명령 을 사용하여 명령 줄에서 백그라운드 앱을 제어 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c59bfe72d6d73e91826b5eca71df05ad7544aa6c" translate="yes" xml:space="preserve">
          <source>When you start an app by using the &lt;code&gt;pm2&lt;/code&gt; command, you must specify the path of the app. However, when you stop, restart, or delete an app, you can specify just the name or the id of the app.</source>
          <target state="translated">&lt;code&gt;pm2&lt;/code&gt; 명령 을 사용하여 앱을 시작할 때 앱 의 경로를 지정해야합니다. 그러나 앱을 중지, 재시작 또는 삭제할 때 앱의 이름이나 ID 만 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd69fd61eae1415d060d6fc65ebc3eed412af958" translate="yes" xml:space="preserve">
          <source>When you use a regular expression for the route definition, capture groups are provided in the array using &lt;code&gt;req.params[n]&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the n&lt;sup&gt;th&lt;/sup&gt; capture group. This rule is applied to unnamed wild card matches with string routes such as &lt;code&gt;/file/*&lt;/code&gt;:</source>
          <target state="translated">경로 정의에 정규식을 사용하면 &lt;code&gt;req.params[n]&lt;/code&gt; 사용하여 캡처 그룹이 배열에 제공됩니다. 여기서 &lt;code&gt;n&lt;/code&gt; 은 n &lt;sup&gt;번째&lt;/sup&gt; 캡처 그룹입니다. 이 규칙은 &lt;code&gt;/file/*&lt;/code&gt; 와 같은 문자열 경로와 이름이없는 와일드 카드 일치에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="f73b8c8177773c5a8c233b30149804b08bab6db2" translate="yes" xml:space="preserve">
          <source>Whether or not to use colors in the debug output.</source>
          <target state="translated">디버그 출력에서 ​​색상을 사용할지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="015deb11a0b53c5bec42b592c6680d2852f63bab" translate="yes" xml:space="preserve">
          <source>Which template engines does Express support?</source>
          <target state="translated">Express는 어떤 템플릿 엔진을 지원합니까?</target>
        </trans-unit>
        <trans-unit id="c0541422e39055f0122db6367a3febd98e3075d8" translate="yes" xml:space="preserve">
          <source>Whichever method you use, if you want Express error handlers to be called in and the application to survive, you must ensure that Express receives the error.</source>
          <target state="translated">어떤 방법을 사용하든 Express 오류 처리기를 호출하고 응용 프로그램을 유지하려면 Express가 오류를 받도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="57770079da3be365b005a2a2304f26f4a961d641" translate="yes" xml:space="preserve">
          <source>With Upstart, use the &lt;code&gt;env&lt;/code&gt; keyword in your job file. For example:</source>
          <target state="translated">Upstart를 사용하면 작업 파일에서 &lt;code&gt;env&lt;/code&gt; 키워드를 사용 하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9126b23002c151251365607be139da9c53a52c81" translate="yes" xml:space="preserve">
          <source>With load balancing, you might have to ensure that requests that are associated with a particular session ID connect to the process that originated them. This is known as &lt;em&gt;session affinity&lt;/em&gt;, or &lt;em&gt;sticky sessions&lt;/em&gt;, and may be addressed by the suggestion above to use a data store such as Redis for session data (depending on your application). For a discussion, see &lt;a href=&quot;http://socket.io/docs/using-multiple-nodes/&quot;&gt;Using multiple nodes&lt;/a&gt;.</source>
          <target state="translated">로드 밸런싱을 사용하면 특정 세션 ID와 연관된 요청이 요청을 시작한 프로세스에 연결되도록해야합니다. 이것을 &lt;em&gt;세션 선호도&lt;/em&gt; 또는 &lt;em&gt;고정 세션이라고&lt;/em&gt; 하며, 세션 데이터에 응용 프로그램에 따라 Redis와 같은 데이터 저장소를 사용하기 위해 위의 제안으로 해결할 수 있습니다. 토론은 &lt;a href=&quot;http://socket.io/docs/using-multiple-nodes/&quot;&gt;다중 노드 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a9d0a21af360f9a50bd9513ad5278e2d81d25739" translate="yes" xml:space="preserve">
          <source>With systemd, use the &lt;code&gt;Environment&lt;/code&gt; directive in your unit file. For example:</source>
          <target state="translated">systemd를 사용하면 단위 파일에서 &lt;code&gt;Environment&lt;/code&gt; 지시문을 사용 하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ad4b282b9b543394da45c47db8aef175048b5d84" translate="yes" xml:space="preserve">
          <source>Without built-in middleware, you must explicitly add all the middleware that is required to run your app. Simply follow these steps:</source>
          <target state="translated">기본 제공 미들웨어가 없으면 앱을 실행하는 데 필요한 모든 미들웨어를 명시 적으로 추가해야합니다. 다음 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="73c719370b85f52a302f9af0bc5e8dffa6230d34" translate="yes" xml:space="preserve">
          <source>Writing error handlers</source>
          <target state="translated">오류 처리기 작성</target>
        </trans-unit>
        <trans-unit id="3372b1b5955f502cd5c59cee832b86b347d9ff1e" translate="yes" xml:space="preserve">
          <source>Writing middleware for use in Express apps</source>
          <target state="translated">Express 앱에서 사용할 미들웨어 작성</target>
        </trans-unit>
        <trans-unit id="4c6e3d4c09f9f5d74359d9d5e16938c14c10017d" translate="yes" xml:space="preserve">
          <source>Yields the following results:</source>
          <target state="translated">다음과 같은 결과를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="5ef34ed32c89d8ecd7d5129a83874c305deb4868" translate="yes" xml:space="preserve">
          <source>You can access local variables in templates rendered within the application. This is useful for providing helper functions to templates, as well as application-level data. Local variables are available in middleware via &lt;code&gt;req.app.locals&lt;/code&gt; (see &lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt;)</source>
          <target state="translated">응용 프로그램 내에서 렌더링 된 템플릿의 로컬 변수에 액세스 할 수 있습니다. 응용 프로그램 수준의 데이터뿐만 아니라 템플릿에 도우미 기능을 제공하는 데 유용합니다. 로컬 변수는 &lt;code&gt;req.app.locals&lt;/code&gt; 를 통해 미들웨어에서 사용 가능합니다 ( &lt;a href=&quot;#req.app&quot;&gt;req.app&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="76ba5cbf9ec74c5bfa4b4e04b502d3e22f0f08bb" translate="yes" xml:space="preserve">
          <source>You can add middleware and HTTP method routes (such as &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and so on) to &lt;code&gt;router&lt;/code&gt; just like an application.</source>
          <target state="translated">애플리케이션과 마찬가지로 &lt;code&gt;router&lt;/code&gt; 에 미들웨어 및 HTTP 메소드 경로 (예 : &lt;code&gt;get&lt;/code&gt; , &lt;code&gt;put&lt;/code&gt; , &lt;code&gt;post&lt;/code&gt; 등)를 라우터 에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f9298bfc210261527b90870db24a5f9c65bc99de" translate="yes" xml:space="preserve">
          <source>You can also &amp;ldquo;soft restart,&amp;rdquo; which gives worker processes a grace period to close existing connections, then restarts the current application:</source>
          <target state="translated">작업자 프로세스에 유예 기간을 부여하여 기존 연결을 닫은 다음 현재 응용 프로그램을 다시 시작하는 &quot;소프트 재시작&quot;도 가능합니다.</target>
        </trans-unit>
        <trans-unit id="c160ab1af9771808d27a6250c8f1317c88050706" translate="yes" xml:space="preserve">
          <source>You can also use regular expressions&amp;mdash;useful if you have very specific constraints, for example the following would match &amp;ldquo;GET /commits/71dbb9c&amp;rdquo; as well as &amp;ldquo;GET /commits/71dbb9c..4c084f9&amp;rdquo;.</source>
          <target state="translated">정규 표현식을 사용할 수도 있습니다. 매우 구체적인 제약 조건이있는 경우 유용합니다. 예를 들어 다음은 &quot;GET / commits / 71dbb9c&quot;및 &quot;GET /commits/71dbb9c..4c084f9&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="4cd37ca0380136541bb2cdb065d0f644848ef0fa" translate="yes" xml:space="preserve">
          <source>You can combine all the above ways of mounting middleware.</source>
          <target state="translated">위의 모든 미들웨어 마운트 방법을 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98410bf4500a3e769cf2974ff2789c94beb8a263" translate="yes" xml:space="preserve">
          <source>You can create chainable route handlers for a route path by using &lt;code&gt;app.route()&lt;/code&gt;. Because the path is specified at a single location, creating modular routes is helpful, as is reducing redundancy and typos. For more information about routes, see: &lt;a href=&quot;../index#router&quot;&gt;Router() documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;app.route()&lt;/code&gt; 를 사용하여 경로 경로에 대해 체인 가능한 경로 처리기를 만들 수 있습니다 . 경로는 단일 위치에 지정되므로 중복성 및 오타를 줄이는 것처럼 모듈 식 경로를 만드는 것이 도움이됩니다. 경로에 대한 자세한 내용은 &lt;a href=&quot;../index#router&quot;&gt;Router () documentation을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d5a3b1fb3b3d7101453eaa0c578ee607a4cb3a4c" translate="yes" xml:space="preserve">
          <source>You can define and mount a middleware function locally.</source>
          <target state="translated">미들웨어 기능을 로컬로 정의하고 마운트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf6be1821000bc03fe174db325d7a155613fd483" translate="yes" xml:space="preserve">
          <source>You can easily install StrongLoop Process Manager as a systemd service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.</source>
          <target state="translated">시스템 서비스로 StrongLoop Process Manager를 쉽게 설치할 수 있습니다. 그런 다음 서버가 다시 시작되면 StrongLoop PM이 자동으로 다시 시작되고 관리하는 모든 앱이 다시 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="0e947505467b4fe74639dadcb47ce3642b79f9be" translate="yes" xml:space="preserve">
          <source>You can easily install StrongLoop Process Manager as an Upstart service. After you do, when the server restarts, it will automatically restart StrongLoop PM, which will then restart all the apps it is managing.</source>
          <target state="translated">StrongLoop Process Manager를 Upstart 서비스로 쉽게 설치할 수 있습니다. 그런 다음 서버가 다시 시작되면 StrongLoop PM이 자동으로 다시 시작되고 관리하는 모든 앱이 다시 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="bb6387910e4bed6dd6f4b1178c5b289b5a6fa20c" translate="yes" xml:space="preserve">
          <source>You can load application-level and router-level middleware with an optional mount path. You can also load a series of middleware functions together, which creates a sub-stack of the middleware system at a mount point.</source>
          <target state="translated">선택적 마운트 경로를 사용하여 애플리케이션 레벨 및 라우터 레벨 미들웨어를로드 할 수 있습니다. 또한 일련의 미들웨어 기능을 함께로드하여 마운트 지점에 미들웨어 시스템의 서브 스택을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f54e45775688802f42924ff2ad74adf8791258a3" translate="yes" xml:space="preserve">
          <source>You can override the signature and behavior of existing methods with your own, by assigning a custom function.</source>
          <target state="translated">사용자 지정 함수를 할당하여 기존 메서드의 서명과 동작을 자신의 방식으로 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f54d6d83c2831da220dc839d0f1f1c85ce840c31" translate="yes" xml:space="preserve">
          <source>You can pass an object as the &lt;code&gt;value&lt;/code&gt; parameter; it is then serialized as JSON and parsed by &lt;code&gt;bodyParser()&lt;/code&gt; middleware.</source>
          <target state="translated">객체를 &lt;code&gt;value&lt;/code&gt; 매개 변수 로 전달할 수 있습니다 . 그런 다음 JSON으로 직렬화되고 &lt;code&gt;bodyParser()&lt;/code&gt; 미들웨어에 의해 구문 분석됩니다 .</target>
        </trans-unit>
        <trans-unit id="b33543cbc9ae9b756d1c80e53a9a660a2b80fc8f" translate="yes" xml:space="preserve">
          <source>You can provide multiple callback functions that behave just like middleware, except that these callbacks can invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callback(s). You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there is no reason to proceed with the current route.</source>
          <target state="translated">이러한 콜백이 &lt;code&gt;next('route')&lt;/code&gt; 를 호출 하여 나머지 라우트 콜백을 우회 할 수 있다는 점을 제외하고 미들웨어처럼 작동하는 여러 콜백 함수를 제공 할 수 있습니다 . 이 메커니즘을 사용하여 경로에 사전 조건을 적용한 다음 현재 경로를 진행할 이유가없는 경우 후속 경로로 제어를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f413616449c4f8674342bf9524c0861b22e6054" translate="yes" xml:space="preserve">
          <source>You can provide multiple callback functions that behave like &lt;a href=&quot;using-middleware&quot;&gt;middleware&lt;/a&gt; to handle a request. The only exception is that these callbacks might invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callbacks. You can use this mechanism to impose pre-conditions on a route, then pass control to subsequent routes if there&amp;rsquo;s no reason to proceed with the current route.</source>
          <target state="translated">요청을 처리하기 위해 &lt;a href=&quot;using-middleware&quot;&gt;미들웨어&lt;/a&gt; 처럼 동작하는 여러 콜백 함수를 제공 할 수 있습니다 . 유일한 예외는 이러한 콜백이 &lt;code&gt;next('route')&lt;/code&gt; 를 호출 하여 나머지 라우트 콜백을 무시할 수 있다는 것입니다. 이 메커니즘을 사용하여 경로에 사전 조건을 적용한 다음 현재 경로를 진행할 이유가없는 경우 후속 경로로 제어를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f3160d5888f53a0436dc8303e6a7b32382d04b1" translate="yes" xml:space="preserve">
          <source>You can provide multiple callbacks, and all are treated equally, and behave just like middleware, except that these callbacks may invoke &lt;code&gt;next('route')&lt;/code&gt; to bypass the remaining route callback(s). You can use this mechanism to perform pre-conditions on a route then pass control to subsequent routes when there is no reason to proceed with the route matched.</source>
          <target state="translated">여러 개의 콜백을 제공 할 수 있으며 모두 콜백이 동일하게 처리되며 미들웨어처럼 작동합니다. 단, 이러한 콜백이 &lt;code&gt;next('route')&lt;/code&gt; 를 호출 하여 나머지 경로 콜백을 우회 할 수 있습니다. 이 메커니즘을 사용하여 경로에서 사전 조건을 수행 한 다음 일치하는 경로를 진행할 이유가없는 경우 후속 경로로 제어를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ffad1b43151b1628003dde27e303c902a2bcc81" translate="yes" xml:space="preserve">
          <source>You can run the application generator with the &lt;code&gt;npx&lt;/code&gt; command (available in Node.js 8.2.0).</source>
          <target state="translated">&lt;code&gt;npx&lt;/code&gt; 명령 (Node.js 8.2.0에서 사용 가능)을 사용 하여 애플리케이션 생성기를 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="353ae66caf29607f1e61863fb32c5e585e174482" translate="yes" xml:space="preserve">
          <source>You can set IP addresses in any of the following ways:</source>
          <target state="translated">다음 방법 중 하나로 IP 주소를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c556f65328f999b65f4ce06f22ac39ca15333189" translate="yes" xml:space="preserve">
          <source>You can set multiple cookies in a single response by calling &lt;code&gt;res.cookie&lt;/code&gt; multiple times, for example:</source>
          <target state="translated">&lt;code&gt;res.cookie&lt;/code&gt; 를 여러 번 호출하여 단일 응답에 여러 쿠키를 설정할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="570005772e6d8637491c837390c8f86ee11ffd94" translate="yes" xml:space="preserve">
          <source>You can specify more than one debug namespace by assigning a comma-separated list of names:</source>
          <target state="translated">쉼표로 구분 된 이름 목록을 지정하여 둘 이상의 디버그 네임 스페이스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f6a1726fe64b7e031645302d21eb2777b6da994" translate="yes" xml:space="preserve">
          <source>You can specify more than one middleware function at the same mount path.</source>
          <target state="translated">동일한 마운트 경로에서 둘 이상의 미들웨어 기능을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c8bfecfd02bf22b488eccf0b73dbf30f9f0e9f5" translate="yes" xml:space="preserve">
          <source>You can then run your automated tests to see what fails, and fix problems according to the updates listed below. After addressing test failures, run your app to see what errors occur. You&amp;rsquo;ll find out right away if the app uses any methods or properties that are not supported.</source>
          <target state="translated">그런 다음 자동화 된 테스트를 실행하여 실패한 사항을 확인하고 아래 나열된 업데이트에 따라 문제를 해결할 수 있습니다. 테스트 실패를 해결 한 후 앱을 실행하여 어떤 오류가 발생하는지 확인하십시오. 앱에서 지원되지 않는 메서드 나 속성을 사용하는지 즉시 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2878120e801b6538ece42279b7388f977e27d91e" translate="yes" xml:space="preserve">
          <source>You can then use a router for a particular root URL in this way separating your routes into files or even mini-apps.</source>
          <target state="translated">그런 다음 경로를 파일 또는 미니 앱으로 분리하는 방식으로 특정 루트 URL에 라우터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e59600f0f18a0f8c79ce7c42cdc9cbed617dab47" translate="yes" xml:space="preserve">
          <source>You can work with StrongLoop PM by using a powerful command-line interface tool called &lt;code&gt;slc&lt;/code&gt;, or a graphical tool called Arc. Arc is open source, with professional support provided by StrongLoop.</source>
          <target state="translated">&lt;code&gt;slc&lt;/code&gt; 라는 강력한 명령 줄 인터페이스 도구 또는 Arc라는 그래픽 도구 를 사용하여 StrongLoop PM으로 작업 할 수 있습니다 . Arc는 오픈 소스이며 StrongLoop의 전문적인 지원을받습니다.</target>
        </trans-unit>
        <trans-unit id="5f6c2ca9bdc896797e058fe4987d31f4ea111eb1" translate="yes" xml:space="preserve">
          <source>You could also use a chain of handlers to rely on synchronous error catching, by reducing the asynchronous code to something trivial. For example:</source>
          <target state="translated">또한 일련의 처리기를 사용하여 비동기 코드를 사소한 것으로 줄여 동기 오류 포착에 의존 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3b63f34d17f9e0ec5789ae699119332e25efa5cf" translate="yes" xml:space="preserve">
          <source>You define error-handling middleware in the same way as other middleware, except with four arguments instead of three; specifically with the signature &lt;code&gt;(err, req, res, next)&lt;/code&gt;:</source>
          <target state="translated">오류 처리 미들웨어는 다른 미들웨어와 동일한 방식으로 정의합니다. 단, 3 개 대신 4 개의 인수가 있습니다. 특히 서명 &lt;code&gt;(err, req, res, next)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3b86858d0f37ba393118efcc6591e14415ebe664" translate="yes" xml:space="preserve">
          <source>You define error-handling middleware last, after other &lt;code&gt;app.use()&lt;/code&gt; and routes calls; for example:</source>
          <target state="translated">다른 &lt;code&gt;app.use()&lt;/code&gt; 후 마지막으로 오류 처리 미들웨어를 정의 하고 호출을 라우팅합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a01686d33994edd50201b6783e4606ef768e78f0" translate="yes" xml:space="preserve">
          <source>You define routing using methods of the Express &lt;code&gt;app&lt;/code&gt; object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle GET requests and &lt;code&gt;app.post&lt;/code&gt; to handle POST requests. For a full list, see &lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD&lt;/a&gt;. You can also use &lt;a href=&quot;../index#app.all&quot;&gt;app.all()&lt;/a&gt; to handle all HTTP methods and &lt;a href=&quot;../index#app.use&quot;&gt;app.use()&lt;/a&gt; to specify middleware as the callback function (See &lt;a href=&quot;using-middleware&quot;&gt;Using middleware&lt;/a&gt; for details).</source>
          <target state="translated">HTTP 메소드에 해당하는 Express &lt;code&gt;app&lt;/code&gt; 객체의 메소드를 사용하여 라우팅을 정의 합니다. 예를 들어 &lt;code&gt;app.get()&lt;/code&gt; 은 GET 요청 을 처리 하고 &lt;code&gt;app.post&lt;/code&gt; 는 POST 요청을 처리합니다. 전체 목록은 &lt;a href=&quot;../index#app.METHOD&quot;&gt;app.METHOD를&lt;/a&gt; 참조하십시오 . &lt;a href=&quot;../index#app.all&quot;&gt;app.all ()&lt;/a&gt; 을 사용 하여 모든 HTTP 메소드를 처리하고 &lt;a href=&quot;../index#app.use&quot;&gt;app.use ()&lt;/a&gt; 를 &lt;a href=&quot;using-middleware&quot;&gt;사용하여 미들웨어&lt;/a&gt; 를 콜백 함수로 지정할 수 있습니다 (자세한 내용은 미들웨어 사용 참조).</target>
        </trans-unit>
        <trans-unit id="42dcbc260ccad05bbf0833210397f0ef0602f413" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t! There&amp;rsquo;s no need to &amp;ldquo;render&amp;rdquo; HTML with the &lt;code&gt;res.render()&lt;/code&gt; function. If you have a specific file, use the &lt;code&gt;res.sendFile()&lt;/code&gt; function. If you are serving many assets from a directory, use the &lt;code&gt;express.static()&lt;/code&gt; middleware function.</source>
          <target state="translated">당신은하지 않습니다! &lt;code&gt;res.render()&lt;/code&gt; 함수를 사용하여 HTML을 &quot;렌더링&quot;할 필요가 없습니다 . 특정 파일이 있으면 &lt;code&gt;res.sendFile()&lt;/code&gt; 함수를 사용하십시오 . 디렉토리에서 많은 자산을 제공하는 경우 &lt;code&gt;express.static()&lt;/code&gt; 미들웨어 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f08fc535c4618cf05fb6de4cc356326814161ef2" translate="yes" xml:space="preserve">
          <source>You have now moved the functionality of &lt;code&gt;./bin/www&lt;/code&gt; back to &lt;code&gt;app.js&lt;/code&gt;. This change is not recommended, but the exercise helps you to understand how the &lt;code&gt;./bin/www&lt;/code&gt; file works, and why the &lt;code&gt;app.js&lt;/code&gt; file no longer starts on its own.</source>
          <target state="translated">이제 &lt;code&gt;./bin/www&lt;/code&gt; 의 기능을 app.js로 다시 이동 &lt;code&gt;app.js&lt;/code&gt; . 이 변경은 권장되지 않지만이 연습을 통해 &lt;code&gt;./bin/www&lt;/code&gt; 파일의 작동 방식과 &lt;code&gt;app.js&lt;/code&gt; 파일이 더 이상 자체적으로 시작되지 않는 이유 를 이해하는 데 도움이됩니다 .</target>
        </trans-unit>
        <trans-unit id="a9d30ce5abc7d8039203f11555293bb4e8bbdba1" translate="yes" xml:space="preserve">
          <source>You may be familiar with Secure Socket Layer (SSL) encryption. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380515(v=vs.85).aspx&quot;&gt;TLS is simply the next progression of SSL&lt;/a&gt;. In other words, if you were using SSL before, consider upgrading to TLS. In general, we recommend Nginx to handle TLS. For a good reference to configure TLS on Nginx (and other servers), see &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Server_Configurations&quot;&gt;Recommended Server Configurations (Mozilla Wiki)&lt;/a&gt;.</source>
          <target state="translated">SSL (Secure Socket Layer) 암호화에 익숙 할 수 있습니다. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380515(v=vs.85).aspx&quot;&gt;TLS는 SSL의 다음 발전입니다&lt;/a&gt; . 다시 말해, 이전에 SSL을 사용하고 있었다면 TLS로 업그레이드하십시오. 일반적으로 TLS를 처리하기 위해 Nginx를 권장합니다. Nginx 및 기타 서버에서 TLS를 구성하는 방법에 대한 참조는 &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Server_Configurations&quot;&gt;권장 서버 구성 (Mozilla Wiki)을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8aae250f7999dbc21f586d6ea27e4dee5436f84e" translate="yes" xml:space="preserve">
          <source>You must catch errors that occur in asynchronous code invoked by route handlers or middleware and pass them to Express for processing. For example:</source>
          <target state="translated">라우트 핸들러 또는 미들웨어가 호출 한 비동기 코드에서 발생하는 오류를 포착하여 처리를 위해 Express로 전달해야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="91bff4e5944a817d2b779f6298b31e6262e47f1d" translate="yes" xml:space="preserve">
          <source>You no longer need to load the &lt;code&gt;app.router&lt;/code&gt; function. It is not a valid Express 4 app object, so remove the &lt;code&gt;app.use(app.router);&lt;/code&gt; code.</source>
          <target state="translated">더 이상 &lt;code&gt;app.router&lt;/code&gt; 함수 를로드 할 필요가 없습니다 . 유효한 Express 4 앱 객체가 &lt;code&gt;app.use(app.router);&lt;/code&gt; 제거하십시오 . 암호.</target>
        </trans-unit>
        <trans-unit id="4c280e38b87ac78f4bcb841159de9ed86291faa5" translate="yes" xml:space="preserve">
          <source>You will also notice that the &lt;code&gt;app.js&lt;/code&gt; file is now a Node.js module, in contrast to the standalone app that was generated by the old generator.</source>
          <target state="translated">또한 이전 생성기에 의해 생성 된 독립형 앱과 달리 &lt;code&gt;app.js&lt;/code&gt; 파일이 이제 Node.js 모듈이라는 것을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59082a2396586f774d1cab2f7a3f8a4b9c0f946d" translate="yes" xml:space="preserve">
          <source>Your app will now be able to render &lt;code&gt;.ntl&lt;/code&gt; files. Create a file named &lt;code&gt;index.ntl&lt;/code&gt; in the &lt;code&gt;views&lt;/code&gt; directory with the following content.</source>
          <target state="translated">이제 앱에서 &lt;code&gt;.ntl&lt;/code&gt; 파일 을 렌더링 할 수 있습니다. 라는 이름의 파일 작성 &lt;code&gt;index.ntl&lt;/code&gt; 에서 &lt;code&gt;views&lt;/code&gt; 다음과 같은 내용으로 디렉토리를.</target>
        </trans-unit>
        <trans-unit id="a838ff1a911eb3f4af98ef687b76715c682147c0" translate="yes" xml:space="preserve">
          <source>app.METHOD()</source>
          <target state="translated">app.METHOD()</target>
        </trans-unit>
        <trans-unit id="f3f6ec3046b7162e61285bc0748169141af181c0" translate="yes" xml:space="preserve">
          <source>app.METHOD(path, callback [, callback ...])</source>
          <target state="translated">app.METHOD (경로, 콜백 [, 콜백 ...])</target>
        </trans-unit>
        <trans-unit id="72e55a2e4936fdca99b5697552b3b1e0469ff658" translate="yes" xml:space="preserve">
          <source>app.all()</source>
          <target state="translated">app.all()</target>
        </trans-unit>
        <trans-unit id="9cb57d8e4680cc2c1874ad526f059e2bed5a3251" translate="yes" xml:space="preserve">
          <source>app.all(path, callback [, callback ...])</source>
          <target state="translated">app.all (경로, 콜백 [, 콜백 ...])</target>
        </trans-unit>
        <trans-unit id="b00be65b35b7e8b804e9efbd03c668fbeb75bc20" translate="yes" xml:space="preserve">
          <source>app.del()</source>
          <target state="translated">app.del()</target>
        </trans-unit>
        <trans-unit id="6b03211e8fe91b9a33ba359e93af1d45d34a839b" translate="yes" xml:space="preserve">
          <source>app.delete()</source>
          <target state="translated">app.delete()</target>
        </trans-unit>
        <trans-unit id="5dfa82fa9634c97068378ca973320ca0260c0545" translate="yes" xml:space="preserve">
          <source>app.delete(path, callback [, callback ...])</source>
          <target state="translated">app.delete (경로, 콜백 [, 콜백 ...])</target>
        </trans-unit>
        <trans-unit id="a95bac08da335ff48120839521aa81dc0f56bc01" translate="yes" xml:space="preserve">
          <source>app.disable()</source>
          <target state="translated">app.disable()</target>
        </trans-unit>
        <trans-unit id="02d88135e3e28dd96dffcefb711a1e56d406811c" translate="yes" xml:space="preserve">
          <source>app.disable(name)</source>
          <target state="translated">app.disable(name)</target>
        </trans-unit>
        <trans-unit id="9d4957c4bc18288fc56a8d5179d909162132b1c0" translate="yes" xml:space="preserve">
          <source>app.disabled()</source>
          <target state="translated">app.disabled()</target>
        </trans-unit>
        <trans-unit id="461fd03f28cf1c66c31b58fe640165cb316282da" translate="yes" xml:space="preserve">
          <source>app.disabled(name)</source>
          <target state="translated">app.disabled(name)</target>
        </trans-unit>
        <trans-unit id="8a348956a1d39cf3ddf33f6585b104288457e209" translate="yes" xml:space="preserve">
          <source>app.enable()</source>
          <target state="translated">app.enable()</target>
        </trans-unit>
        <trans-unit id="6de3d9252ddaa1f91f299b9917c5bb7d0fe58e62" translate="yes" xml:space="preserve">
          <source>app.enable(name)</source>
          <target state="translated">app.enable(name)</target>
        </trans-unit>
        <trans-unit id="62d2c462b4c1d5268aaf45210d145baab573d4c7" translate="yes" xml:space="preserve">
          <source>app.enabled()</source>
          <target state="translated">app.enabled()</target>
        </trans-unit>
        <trans-unit id="e57ca2d1382c6376c7dd2231e97c8323651f2c64" translate="yes" xml:space="preserve">
          <source>app.enabled(name)</source>
          <target state="translated">app.enabled(name)</target>
        </trans-unit>
        <trans-unit id="ff09693ef1b27c6ac3769f579205fbe7fb7d7630" translate="yes" xml:space="preserve">
          <source>app.engine()</source>
          <target state="translated">app.engine()</target>
        </trans-unit>
        <trans-unit id="6839aa7526163d3421a1ab736549c8c402d226a7" translate="yes" xml:space="preserve">
          <source>app.engine(ext, callback)</source>
          <target state="translated">app.engine (ext, 콜백)</target>
        </trans-unit>
        <trans-unit id="c5f464cad95a85e6de551e6f032792402fe2a483" translate="yes" xml:space="preserve">
          <source>app.get()</source>
          <target state="translated">app.get()</target>
        </trans-unit>
        <trans-unit id="c7d373bd472acb2058c399476e974f26979ca762" translate="yes" xml:space="preserve">
          <source>app.get(name)</source>
          <target state="translated">app.get(name)</target>
        </trans-unit>
        <trans-unit id="bfc09379b954e0bc4cb7b44b6d30a18d269104a4" translate="yes" xml:space="preserve">
          <source>app.get(path, callback [, callback ...])</source>
          <target state="translated">app.get (경로, 콜백 [, 콜백 ...])</target>
        </trans-unit>
        <trans-unit id="72e865215b0a584ffca00b4e67de78ec2a3e0ed0" translate="yes" xml:space="preserve">
          <source>app.listen()</source>
          <target state="translated">app.listen()</target>
        </trans-unit>
        <trans-unit id="42e83e86bcd51a22128cd9f638d86e1a90e22a97" translate="yes" xml:space="preserve">
          <source>app.listen([port[, host[, backlog]]][, callback])</source>
          <target state="translated">app.listen ([포트 [, 호스트 [, 백 로그]]] [, 콜백])</target>
        </trans-unit>
        <trans-unit id="034b5efe6a9c5bc7bd5f0f7ff4b64b0cf43197eb" translate="yes" xml:space="preserve">
          <source>app.listen(path, [callback])</source>
          <target state="translated">app.listen (경로, [콜백])</target>
        </trans-unit>
        <trans-unit id="8553d4240cb81aa6198823b92dcb651766d4bf4b" translate="yes" xml:space="preserve">
          <source>app.locals</source>
          <target state="translated">app.locals</target>
        </trans-unit>
        <trans-unit id="bb7ebf675e483c5ae4f49f6af5f6ad24e55ef389" translate="yes" xml:space="preserve">
          <source>app.mountpath</source>
          <target state="translated">app.mountpath</target>
        </trans-unit>
        <trans-unit id="12cdb3903f6c8a973e6d0092c1fc7a9b98e2a650" translate="yes" xml:space="preserve">
          <source>app.on('mount', callback(parent))</source>
          <target state="translated">app.on ( 'mount', 콜백 (부모))</target>
        </trans-unit>
        <trans-unit id="3e5fafbbfac1475a116085409056abbc510708ae" translate="yes" xml:space="preserve">
          <source>app.on()</source>
          <target state="translated">app.on()</target>
        </trans-unit>
        <trans-unit id="5dd07676a8d0e78040af8d4aa702ee0fedf720c5" translate="yes" xml:space="preserve">
          <source>app.param()</source>
          <target state="translated">app.param()</target>
        </trans-unit>
        <trans-unit id="31899f869d9363a677df7cb478103a65d3574135" translate="yes" xml:space="preserve">
          <source>app.param([name], callback)</source>
          <target state="translated">app.param ([이름], 콜백)</target>
        </trans-unit>
        <trans-unit id="7d0c185ff686f9ce2a34776e2750f73918574444" translate="yes" xml:space="preserve">
          <source>app.param(fn)</source>
          <target state="translated">app.param(fn)</target>
        </trans-unit>
        <trans-unit id="08d2cd9e9b518830c37b54e4dcbfb58878f6b965" translate="yes" xml:space="preserve">
          <source>app.path()</source>
          <target state="translated">app.path()</target>
        </trans-unit>
        <trans-unit id="679596d299677c2bad263cb8f2aedfe469512252" translate="yes" xml:space="preserve">
          <source>app.post()</source>
          <target state="translated">app.post()</target>
        </trans-unit>
        <trans-unit id="4855f39f495af951f33dbd8c43bc77de838bf78d" translate="yes" xml:space="preserve">
          <source>app.post(path, callback [, callback ...])</source>
          <target state="translated">app.post (경로, 콜백 [, 콜백 ...])</target>
        </trans-unit>
        <trans-unit id="8d30009bb11d533c956eb27eb017e8523b42d9d5" translate="yes" xml:space="preserve">
          <source>app.put()</source>
          <target state="translated">app.put()</target>
        </trans-unit>
        <trans-unit id="35a37cfb8f71d31dd9b48144a81923a746c61098" translate="yes" xml:space="preserve">
          <source>app.put(path, callback [, callback ...])</source>
          <target state="translated">app.put (경로, 콜백 [, 콜백 ...])</target>
        </trans-unit>
        <trans-unit id="6165a666cad761f82cd239272ea43d20cfeabc9f" translate="yes" xml:space="preserve">
          <source>app.render()</source>
          <target state="translated">app.render()</target>
        </trans-unit>
        <trans-unit id="e7fe78a7c9aabf41daa35ff43d22dcd9da2b58cf" translate="yes" xml:space="preserve">
          <source>app.render(view, [locals], callback)</source>
          <target state="translated">app.render (보기, [로컬], 콜백)</target>
        </trans-unit>
        <trans-unit id="95cf6417b823019e37aac623934d67ce2bc3a036" translate="yes" xml:space="preserve">
          <source>app.route()</source>
          <target state="translated">app.route()</target>
        </trans-unit>
        <trans-unit id="ef403c5ae042d5139816a9b362f7073de4fc6a22" translate="yes" xml:space="preserve">
          <source>app.route(path)</source>
          <target state="translated">app.route(path)</target>
        </trans-unit>
        <trans-unit id="54160d53742fa246cf6e9617e93c555bef2ad5ee" translate="yes" xml:space="preserve">
          <source>app.router</source>
          <target state="translated">app.router</target>
        </trans-unit>
        <trans-unit id="a5e371552e3d2936a3d4bdf72646abf244a4346c" translate="yes" xml:space="preserve">
          <source>app.set()</source>
          <target state="translated">app.set()</target>
        </trans-unit>
        <trans-unit id="5ce1dd408ca0b7f0ffc9dfc6cf8505ec39c5e608" translate="yes" xml:space="preserve">
          <source>app.set(name, value)</source>
          <target state="translated">app.set (이름, 값)</target>
        </trans-unit>
        <trans-unit id="64cc94153849c91b77d0739b693a0814eee45666" translate="yes" xml:space="preserve">
          <source>app.use()</source>
          <target state="translated">app.use()</target>
        </trans-unit>
        <trans-unit id="59d50fcd03051afcdfa39c0a77fb15c313db975d" translate="yes" xml:space="preserve">
          <source>app.use([path,] callback [, callback...])</source>
          <target state="translated">app.use ([경로,] 콜백 [, 콜백 ...])</target>
        </trans-unit>
        <trans-unit id="e4c94651c6dfed693ca8e5c7ebc8e201be81fb74" translate="yes" xml:space="preserve">
          <source>compression</source>
          <target state="translated">compression</target>
        </trans-unit>
        <trans-unit id="cab0f5624db8cb73abb99e85bd9ca1d11d1458c5" translate="yes" xml:space="preserve">
          <source>connect-timeout</source>
          <target state="translated">connect-timeout</target>
        </trans-unit>
        <trans-unit id="558682e9a8606eadee61d393c36c68d315869b3f" translate="yes" xml:space="preserve">
          <source>cookie-parser</source>
          <target state="translated">cookie-parser</target>
        </trans-unit>
        <trans-unit id="c4736ce5561fcb21e9981845ff2907e2388f8a62" translate="yes" xml:space="preserve">
          <source>cookie-session</source>
          <target state="translated">cookie-session</target>
        </trans-unit>
        <trans-unit id="41ee80a53c1d882ca9c974670f1c037fc380e83e" translate="yes" xml:space="preserve">
          <source>csurf</source>
          <target state="translated">csurf</target>
        </trans-unit>
        <trans-unit id="1587c51d541276724d2e1d176819746317137164" translate="yes" xml:space="preserve">
          <source>dotfiles</source>
          <target state="translated">dotfiles</target>
        </trans-unit>
        <trans-unit id="27617c0e0564364346bd433b20612f0b0fccc154" translate="yes" xml:space="preserve">
          <source>errorhandler</source>
          <target state="translated">errorhandler</target>
        </trans-unit>
        <trans-unit id="bba37bccd187ac39286ab2f65c0a90b2a327a437" translate="yes" xml:space="preserve">
          <source>express()</source>
          <target state="translated">express()</target>
        </trans-unit>
        <trans-unit id="6ca9c35e4a89979f1d80e1aeb61800650968b7fb" translate="yes" xml:space="preserve">
          <source>express-session</source>
          <target state="translated">express-session</target>
        </trans-unit>
        <trans-unit id="d8399bf4ffcaf94469d588787f36eb4347b161a6" translate="yes" xml:space="preserve">
          <source>express.Router</source>
          <target state="translated">express.Router</target>
        </trans-unit>
        <trans-unit id="1d97037b9bb7fc5944dc67651d55bbe109673f16" translate="yes" xml:space="preserve">
          <source>express.Router()</source>
          <target state="translated">express.Router()</target>
        </trans-unit>
        <trans-unit id="c9ebb15c536c0c81e95d98819026323f2008108e" translate="yes" xml:space="preserve">
          <source>express.Router([options])</source>
          <target state="translated">express.Router([options])</target>
        </trans-unit>
        <trans-unit id="7d24a187b8abd31ebe16afd44c64f0a6847367d0" translate="yes" xml:space="preserve">
          <source>express.json()</source>
          <target state="translated">express.json()</target>
        </trans-unit>
        <trans-unit id="173878196b2e58c5b7b68d23f968b05d6909ab14" translate="yes" xml:space="preserve">
          <source>express.json([options])</source>
          <target state="translated">express.json([options])</target>
        </trans-unit>
        <trans-unit id="2022cb41d6316384d8997d071811d1c3c7e759ff" translate="yes" xml:space="preserve">
          <source>express.raw([options])</source>
          <target state="translated">express.raw([options])</target>
        </trans-unit>
        <trans-unit id="e80f14809aed87513756371d68b4053e20766a7c" translate="yes" xml:space="preserve">
          <source>express.static()</source>
          <target state="translated">express.static()</target>
        </trans-unit>
        <trans-unit id="37bdc01607dc7c622029d937af399044eaad0e41" translate="yes" xml:space="preserve">
          <source>express.static(root, [options])</source>
          <target state="translated">express.static (루트, [옵션])</target>
        </trans-unit>
        <trans-unit id="bdb435b6b6896ccbebff549991e1fe352694a0a8" translate="yes" xml:space="preserve">
          <source>express.text([options])</source>
          <target state="translated">express.text([options])</target>
        </trans-unit>
        <trans-unit id="931644caa0ed99aad45bfe9b177b15b07c545079" translate="yes" xml:space="preserve">
          <source>express.urlencoded()</source>
          <target state="translated">express.urlencoded()</target>
        </trans-unit>
        <trans-unit id="a0bbf7f5c077234fdae52b5ecb0b095d579e9c14" translate="yes" xml:space="preserve">
          <source>express.urlencoded([options])</source>
          <target state="translated">express.urlencoded([options])</target>
        </trans-unit>
        <trans-unit id="302537ac017dcbf48c03777d4be2e78fcd5aa71a" translate="yes" xml:space="preserve">
          <source>fallthrough</source>
          <target state="translated">fallthrough</target>
        </trans-unit>
        <trans-unit id="1f369c8bd1569394fb3ddb8f4d09cb9a9b21e527" translate="yes" xml:space="preserve">
          <source>http-terminator</source>
          <target state="translated">http-terminator</target>
        </trans-unit>
        <trans-unit id="c7868b0ca6417a8c9e4ea8eff421703e5ff95304" translate="yes" xml:space="preserve">
          <source>inherit the value of this setting, even though it has a default value.</source>
          <target state="translated">이 설정의 값은 기본값이 있더라도 상속합니다.</target>
        </trans-unit>
        <trans-unit id="78ffe21eeabe8d0af01cdddd41a5adee0f68d76d" translate="yes" xml:space="preserve">
          <source>linklocal - &lt;code&gt;169.254.0.0/16&lt;/code&gt;, &lt;code&gt;fe80::/10&lt;/code&gt;</source>
          <target state="translated">linklocal- &lt;code&gt;169.254.0.0/16&lt;/code&gt; &lt;code&gt;fe80::/10&lt;/code&gt; , fe80 :: / 10</target>
        </trans-unit>
        <trans-unit id="c3115012771630a9f133aea2eef1c5714c36b40d" translate="yes" xml:space="preserve">
          <source>loopback - &lt;code&gt;127.0.0.1/8&lt;/code&gt;, &lt;code&gt;::1/128&lt;/code&gt;</source>
          <target state="translated">루프백 &lt;code&gt;127.0.0.1/8&lt;/code&gt; , &lt;code&gt;::1/128&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b00fa9d468f2a76a3f394f47bf897a57c3841bf" translate="yes" xml:space="preserve">
          <source>method-override</source>
          <target state="translated">method-override</target>
        </trans-unit>
        <trans-unit id="519bc3f0fda96312357e1409de278bff4d5f5b25" translate="yes" xml:space="preserve">
          <source>morgan</source>
          <target state="translated">morgan</target>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="translated">n</target>
        </trans-unit>
        <trans-unit id="0573a9a28d76348073d0992e349e6d16e168c2b6" translate="yes" xml:space="preserve">
          <source>req.accepts()</source>
          <target state="translated">req.accepts()</target>
        </trans-unit>
        <trans-unit id="c2fd085c6f47415a8b07cb8793c96b2ab5ce86a3" translate="yes" xml:space="preserve">
          <source>req.accepts(types)</source>
          <target state="translated">req.accepts(types)</target>
        </trans-unit>
        <trans-unit id="abdf0f7bfa9bcee5f8ae30009b58641de200222e" translate="yes" xml:space="preserve">
          <source>req.acceptsCharsets()</source>
          <target state="translated">req.acceptsCharsets()</target>
        </trans-unit>
        <trans-unit id="f9df014f398a14da8070a481c747f1cc52544f26" translate="yes" xml:space="preserve">
          <source>req.acceptsCharsets(charset [, ...])</source>
          <target state="translated">req.acceptsCharsets (charset [, ...])</target>
        </trans-unit>
        <trans-unit id="c500b7d919d3ee5d83cc4d699081cf3168cd9dce" translate="yes" xml:space="preserve">
          <source>req.acceptsEncodings()</source>
          <target state="translated">req.acceptsEncodings()</target>
        </trans-unit>
        <trans-unit id="e59cb2c81e6e04fd410d33fcf5349b0642ee9b26" translate="yes" xml:space="preserve">
          <source>req.acceptsEncodings(encoding [, ...])</source>
          <target state="translated">req.acceptsEncodings (인코딩 [, ...])</target>
        </trans-unit>
        <trans-unit id="65fed5fbe88100a956f74f80374b9dc66ad25fea" translate="yes" xml:space="preserve">
          <source>req.acceptsLanguages()</source>
          <target state="translated">req.acceptsLanguages()</target>
        </trans-unit>
        <trans-unit id="91c737a7254e0522e28123cd9831e5b72318c684" translate="yes" xml:space="preserve">
          <source>req.acceptsLanguages(lang [, ...])</source>
          <target state="translated">req.acceptsLanguages ​​(lang [, ...])</target>
        </trans-unit>
        <trans-unit id="ceea344f474505d214adecf449c7ebc5bc076dc5" translate="yes" xml:space="preserve">
          <source>req.app</source>
          <target state="translated">req.app</target>
        </trans-unit>
        <trans-unit id="a64ffadcd5fa0a8a144649dcf2c8ff3c2a409c29" translate="yes" xml:space="preserve">
          <source>req.baseUrl</source>
          <target state="translated">req.baseUrl</target>
        </trans-unit>
        <trans-unit id="c09b3cf3a63a04bfdc00b09ed53963e899af3079" translate="yes" xml:space="preserve">
          <source>req.body</source>
          <target state="translated">req.body</target>
        </trans-unit>
        <trans-unit id="b0fe86d4749862cf23747240c6adb64773533292" translate="yes" xml:space="preserve">
          <source>req.cookies</source>
          <target state="translated">req.cookies</target>
        </trans-unit>
        <trans-unit id="6d10b1f040b25f3b1f9225c2cc3d139126e3bc45" translate="yes" xml:space="preserve">
          <source>req.fresh</source>
          <target state="translated">req.fresh</target>
        </trans-unit>
        <trans-unit id="2caae5d78eb439354a3392577f19ad92c976190d" translate="yes" xml:space="preserve">
          <source>req.get()</source>
          <target state="translated">req.get()</target>
        </trans-unit>
        <trans-unit id="dc830fb7ae5e0449b46798a7312055cfb356a346" translate="yes" xml:space="preserve">
          <source>req.get(field)</source>
          <target state="translated">req.get(field)</target>
        </trans-unit>
        <trans-unit id="3315a1d3f43addc98b7837512e14740a9484e908" translate="yes" xml:space="preserve">
          <source>req.host</source>
          <target state="translated">req.host</target>
        </trans-unit>
        <trans-unit id="a8c128a537175820007a6e925205fe65ff896d61" translate="yes" xml:space="preserve">
          <source>req.hostname</source>
          <target state="translated">req.hostname</target>
        </trans-unit>
        <trans-unit id="38d0fb279d6126607ded35c39ff584032668dc2c" translate="yes" xml:space="preserve">
          <source>req.ip</source>
          <target state="translated">req.ip</target>
        </trans-unit>
        <trans-unit id="4067c6f2a97609981b358cee9d6dce548fdda8e3" translate="yes" xml:space="preserve">
          <source>req.ips</source>
          <target state="translated">req.ips</target>
        </trans-unit>
        <trans-unit id="9b1d85aba335e65747c25c6810d61a12e4cf7266" translate="yes" xml:space="preserve">
          <source>req.is()</source>
          <target state="translated">req.is()</target>
        </trans-unit>
        <trans-unit id="24269cbb1290603169b693b936906800d7ea35ef" translate="yes" xml:space="preserve">
          <source>req.is(type)</source>
          <target state="translated">req.is(type)</target>
        </trans-unit>
        <trans-unit id="0375227020ede7f69e6cfa0585a2a18ba889b300" translate="yes" xml:space="preserve">
          <source>req.method</source>
          <target state="translated">req.method</target>
        </trans-unit>
        <trans-unit id="e7d41d891589f04499a39addb298ca4c20450922" translate="yes" xml:space="preserve">
          <source>req.originalUrl</source>
          <target state="translated">req.originalUrl</target>
        </trans-unit>
        <trans-unit id="7a2f22abe7b87d06a9ada54ab2215e59e94271bf" translate="yes" xml:space="preserve">
          <source>req.param()</source>
          <target state="translated">req.param()</target>
        </trans-unit>
        <trans-unit id="def4edeb854e454304ae9f045c230d5ff08a401a" translate="yes" xml:space="preserve">
          <source>req.param(name [, defaultValue])</source>
          <target state="translated">req.param (이름 [, defaultValue])</target>
        </trans-unit>
        <trans-unit id="2d0ab7cc86b03e2f1c73f0cea5ca521aaac2782e" translate="yes" xml:space="preserve">
          <source>req.param(name)</source>
          <target state="translated">req.param(name)</target>
        </trans-unit>
        <trans-unit id="d9f1403de6f4160062a44db7f69ab376946a8c24" translate="yes" xml:space="preserve">
          <source>req.params</source>
          <target state="translated">req.params</target>
        </trans-unit>
        <trans-unit id="19f5f28b5e85f198eb2b25e6d302763759110a3f" translate="yes" xml:space="preserve">
          <source>req.path</source>
          <target state="translated">req.path</target>
        </trans-unit>
        <trans-unit id="7c1a4b0d2680a7dec6110dc617959b9e785871da" translate="yes" xml:space="preserve">
          <source>req.protocol</source>
          <target state="translated">req.protocol</target>
        </trans-unit>
        <trans-unit id="979e40316b240d89f020ab27fccc81fe9d093ba1" translate="yes" xml:space="preserve">
          <source>req.query</source>
          <target state="translated">req.query</target>
        </trans-unit>
        <trans-unit id="16a46aca4b79907155e4bfec2d5711b9bea8dad6" translate="yes" xml:space="preserve">
          <source>req.range()</source>
          <target state="translated">req.range()</target>
        </trans-unit>
        <trans-unit id="84530fcf152ab20166be9822d850fe6e0d9d4405" translate="yes" xml:space="preserve">
          <source>req.range(size[, options])</source>
          <target state="translated">req.range (크기 [, 옵션])</target>
        </trans-unit>
        <trans-unit id="63a009be30a101bad68597d689fda2a2e086257c" translate="yes" xml:space="preserve">
          <source>req.route</source>
          <target state="translated">req.route</target>
        </trans-unit>
        <trans-unit id="8a4e0a01700a2de190316747dbbb3acd298dfee2" translate="yes" xml:space="preserve">
          <source>req.secure</source>
          <target state="translated">req.secure</target>
        </trans-unit>
        <trans-unit id="da8c2de355db5eb4da50c8fc89efa7c9e5c92780" translate="yes" xml:space="preserve">
          <source>req.signedCookies</source>
          <target state="translated">req.signedCookies</target>
        </trans-unit>
        <trans-unit id="67dd3f50bf529295dee306d162ee028e21478dc0" translate="yes" xml:space="preserve">
          <source>req.stale</source>
          <target state="translated">req.stale</target>
        </trans-unit>
        <trans-unit id="3ca99d41ad8dad2a97a61cdb2b14ce48aca53b93" translate="yes" xml:space="preserve">
          <source>req.subdomains</source>
          <target state="translated">req.subdomains</target>
        </trans-unit>
        <trans-unit id="6d92923eaa52431a959ff1f65835d2111ab1e9f5" translate="yes" xml:space="preserve">
          <source>req.xhr</source>
          <target state="translated">req.xhr</target>
        </trans-unit>
        <trans-unit id="dbfdd9f3454d267306feb0bbf77da093dbfa0ffd" translate="yes" xml:space="preserve">
          <source>res.app</source>
          <target state="translated">res.app</target>
        </trans-unit>
        <trans-unit id="552d5cd0a26979f6cb9eab9511549012d2edd7ff" translate="yes" xml:space="preserve">
          <source>res.append()</source>
          <target state="translated">res.append()</target>
        </trans-unit>
        <trans-unit id="46da46a5dcc17b35a2f1c7c1a554e22e571cd01e" translate="yes" xml:space="preserve">
          <source>res.append(field [, value])</source>
          <target state="translated">res.append (필드 [, 값])</target>
        </trans-unit>
        <trans-unit id="60065656c823adc312515e29c90e7ac4a6a58fe4" translate="yes" xml:space="preserve">
          <source>res.attachment()</source>
          <target state="translated">res.attachment()</target>
        </trans-unit>
        <trans-unit id="c6bf1656677d6be8b1bf6d015dd8a465026949cf" translate="yes" xml:space="preserve">
          <source>res.attachment([filename])</source>
          <target state="translated">res.attachment([filename])</target>
        </trans-unit>
        <trans-unit id="279a92c6f0d376e1ca3f7160c456a7ea76b73ea8" translate="yes" xml:space="preserve">
          <source>res.clearCookie()</source>
          <target state="translated">res.clearCookie()</target>
        </trans-unit>
        <trans-unit id="5450dea065376384554a1043dd594f31e084177a" translate="yes" xml:space="preserve">
          <source>res.clearCookie(name [, options])</source>
          <target state="translated">res.clearCookie (이름 [, 옵션])</target>
        </trans-unit>
        <trans-unit id="022e05e9c9e3db5d610cb27c43d21465c05c5864" translate="yes" xml:space="preserve">
          <source>res.cookie()</source>
          <target state="translated">res.cookie()</target>
        </trans-unit>
        <trans-unit id="7ed0a66256d36951ef2068cb85bdb6028d166d37" translate="yes" xml:space="preserve">
          <source>res.cookie(name, value [, options])</source>
          <target state="translated">res.cookie (이름, 값 [, 옵션])</target>
        </trans-unit>
        <trans-unit id="83716236a26c5b875be376269e1bc6e4e8e82209" translate="yes" xml:space="preserve">
          <source>res.download()</source>
          <target state="translated">res.download()</target>
        </trans-unit>
        <trans-unit id="f05b3a2ae767a9068e7ee75549478b240c915314" translate="yes" xml:space="preserve">
          <source>res.download(path [, filename] [, options] [, fn])</source>
          <target state="translated">res.download (경로 [, 파일 이름] [, 옵션] [, fn])</target>
        </trans-unit>
        <trans-unit id="819c01b624ee810f1c8dcdc320f86a26a308d917" translate="yes" xml:space="preserve">
          <source>res.end()</source>
          <target state="translated">res.end()</target>
        </trans-unit>
        <trans-unit id="b5bf967b0b9915d9a2a120f53bab1736cb9cf7bb" translate="yes" xml:space="preserve">
          <source>res.end([data] [, encoding])</source>
          <target state="translated">res.end ([데이터] [, 인코딩])</target>
        </trans-unit>
        <trans-unit id="001efc2ac33184e05bd5985cfe6848826d30e9db" translate="yes" xml:space="preserve">
          <source>res.format()</source>
          <target state="translated">res.format()</target>
        </trans-unit>
        <trans-unit id="df6f32370a29d86049d9e95d67f57d6b17424f88" translate="yes" xml:space="preserve">
          <source>res.format(object)</source>
          <target state="translated">res.format(object)</target>
        </trans-unit>
        <trans-unit id="1eac806898fcfdfd6d848cab03a6f41e01759059" translate="yes" xml:space="preserve">
          <source>res.get()</source>
          <target state="translated">res.get()</target>
        </trans-unit>
        <trans-unit id="f47260b11a7d3f7d396eb8374b11dde3e08200b4" translate="yes" xml:space="preserve">
          <source>res.get(field)</source>
          <target state="translated">res.get(field)</target>
        </trans-unit>
        <trans-unit id="ad044b84dc8dd0f126496fb95d0d243240abd61a" translate="yes" xml:space="preserve">
          <source>res.headersSent</source>
          <target state="translated">res.headersSent</target>
        </trans-unit>
        <trans-unit id="104ecc2c15e364a063fe2a8ee446da65e5358d02" translate="yes" xml:space="preserve">
          <source>res.json()</source>
          <target state="translated">res.json()</target>
        </trans-unit>
        <trans-unit id="d4c0c7d52d4a80d1e599383e993776c1cb7b32fb" translate="yes" xml:space="preserve">
          <source>res.json([body])</source>
          <target state="translated">res.json([body])</target>
        </trans-unit>
        <trans-unit id="a00a09ee307543b703439968f17119a2c3da75aa" translate="yes" xml:space="preserve">
          <source>res.json(obj, status)</source>
          <target state="translated">res.json (obj, 상태)</target>
        </trans-unit>
        <trans-unit id="e66c858e7faea6fd4a219f62263e2828333593ac" translate="yes" xml:space="preserve">
          <source>res.jsonp()</source>
          <target state="translated">res.jsonp()</target>
        </trans-unit>
        <trans-unit id="7e4ca2e94d3497ba0a53dcbfbc3151b555ff5060" translate="yes" xml:space="preserve">
          <source>res.jsonp([body])</source>
          <target state="translated">res.jsonp([body])</target>
        </trans-unit>
        <trans-unit id="cee87dab6a4a380352567cc52f41aebe7610b1ee" translate="yes" xml:space="preserve">
          <source>res.jsonp(obj, status)</source>
          <target state="translated">res.jsonp (obj, status)</target>
        </trans-unit>
        <trans-unit id="8547ef25de8f7b6be7966ae7fa6bc5480ec080b6" translate="yes" xml:space="preserve">
          <source>res.links()</source>
          <target state="translated">res.links()</target>
        </trans-unit>
        <trans-unit id="a8fe9e83ad549a184cfb5dabd6039a97c6aa1ead" translate="yes" xml:space="preserve">
          <source>res.links(links)</source>
          <target state="translated">res.links(links)</target>
        </trans-unit>
        <trans-unit id="10ee7e912d3f45329a7e20dfe0929a9eba1e770c" translate="yes" xml:space="preserve">
          <source>res.locals</source>
          <target state="translated">res.locals</target>
        </trans-unit>
        <trans-unit id="ecee29772d360af4c9df81955546ec19d2bab7fd" translate="yes" xml:space="preserve">
          <source>res.location()</source>
          <target state="translated">res.location()</target>
        </trans-unit>
        <trans-unit id="3648756abde5edf94fe1a44e7ffec86fcd7fde72" translate="yes" xml:space="preserve">
          <source>res.location(path)</source>
          <target state="translated">res.location(path)</target>
        </trans-unit>
        <trans-unit id="db689745fd1784885c81318dd7a36275a572b475" translate="yes" xml:space="preserve">
          <source>res.redirect()</source>
          <target state="translated">res.redirect()</target>
        </trans-unit>
        <trans-unit id="77c12ba62b8063aed92cd0ac9a19b38b6fad6893" translate="yes" xml:space="preserve">
          <source>res.redirect([status,] path)</source>
          <target state="translated">res.redirect ([상태,] 경로)</target>
        </trans-unit>
        <trans-unit id="2c56c99126aaef66b730ddeeea5cdac83d9fd31a" translate="yes" xml:space="preserve">
          <source>res.render()</source>
          <target state="translated">res.render()</target>
        </trans-unit>
        <trans-unit id="aade41007808e4f875a0cccad77bd169dc15fc04" translate="yes" xml:space="preserve">
          <source>res.render(view [, locals] [, callback])</source>
          <target state="translated">res.render (view [, locals] [, 콜백])</target>
        </trans-unit>
        <trans-unit id="80a399e3340e14335bb31f075b3dc0da017d9ece" translate="yes" xml:space="preserve">
          <source>res.send()</source>
          <target state="translated">res.send()</target>
        </trans-unit>
        <trans-unit id="4b226cc66a813582f24d0d59aee2733b034ce1ba" translate="yes" xml:space="preserve">
          <source>res.send([body])</source>
          <target state="translated">res.send([body])</target>
        </trans-unit>
        <trans-unit id="9ee6550cba81611d25838adfbe6c17488a1310a6" translate="yes" xml:space="preserve">
          <source>res.send(body, status)</source>
          <target state="translated">res.send (본문, 상태)</target>
        </trans-unit>
        <trans-unit id="1191cee7db001968f190519ebed49bc5b3676627" translate="yes" xml:space="preserve">
          <source>res.send(status)</source>
          <target state="translated">res.send(status)</target>
        </trans-unit>
        <trans-unit id="dc6c0e48c64bbfcdfeb3e7af3d83e26cc72c61e9" translate="yes" xml:space="preserve">
          <source>res.sendFile()</source>
          <target state="translated">res.sendFile()</target>
        </trans-unit>
        <trans-unit id="6f6accc02d8f1c14cc0424189472752ee3a2d51e" translate="yes" xml:space="preserve">
          <source>res.sendFile(path [, options] [, fn])</source>
          <target state="translated">res.sendFile (경로 [, 옵션] [, fn])</target>
        </trans-unit>
        <trans-unit id="63dd552f80083a69d873a3e60807a5bafd63e340" translate="yes" xml:space="preserve">
          <source>res.sendStatus()</source>
          <target state="translated">res.sendStatus()</target>
        </trans-unit>
        <trans-unit id="bf307262cb0eb7a057c0d9cb5503342c3bb82042" translate="yes" xml:space="preserve">
          <source>res.sendStatus(statusCode)</source>
          <target state="translated">res.sendStatus(statusCode)</target>
        </trans-unit>
        <trans-unit id="71f7e30176b432408f38acda415a62d8ddcd272e" translate="yes" xml:space="preserve">
          <source>res.sendfile()</source>
          <target state="translated">res.sendfile()</target>
        </trans-unit>
        <trans-unit id="19bb83ed5ec58c3a114e87c47ae515179e617cb7" translate="yes" xml:space="preserve">
          <source>res.set()</source>
          <target state="translated">res.set()</target>
        </trans-unit>
        <trans-unit id="5a2e87ca7b60a593207c894c6eda7ffff24eaa3a" translate="yes" xml:space="preserve">
          <source>res.set(field [, value])</source>
          <target state="translated">res.set (필드 [, 값])</target>
        </trans-unit>
        <trans-unit id="1b5a22853f5922e76efab1500ca1fe41ea759736" translate="yes" xml:space="preserve">
          <source>res.status()</source>
          <target state="translated">res.status()</target>
        </trans-unit>
        <trans-unit id="eefce9919c36ec6a0adeeedc7191b80abc86408b" translate="yes" xml:space="preserve">
          <source>res.status(code)</source>
          <target state="translated">res.status(code)</target>
        </trans-unit>
        <trans-unit id="b0127d5b2f0d9821c360ef760121e602c0d2bf22" translate="yes" xml:space="preserve">
          <source>res.type()</source>
          <target state="translated">res.type()</target>
        </trans-unit>
        <trans-unit id="d38e248fd694a0958037ec7f6f91a3665cf72c8d" translate="yes" xml:space="preserve">
          <source>res.type(type)</source>
          <target state="translated">res.type(type)</target>
        </trans-unit>
        <trans-unit id="44730073d9f80b39259a36c8ad46e35cdc2889e4" translate="yes" xml:space="preserve">
          <source>res.vary()</source>
          <target state="translated">res.vary()</target>
        </trans-unit>
        <trans-unit id="690d3d1d374a6aa2294ce75a4bfda0fd1b430341" translate="yes" xml:space="preserve">
          <source>res.vary(field)</source>
          <target state="translated">res.vary(field)</target>
        </trans-unit>
        <trans-unit id="55bc846e88a6febe851934450a72d65318b85f78" translate="yes" xml:space="preserve">
          <source>response-time</source>
          <target state="translated">response-time</target>
        </trans-unit>
        <trans-unit id="1c94ac827ab88d29cc39474371e7a8b70d603c5f" translate="yes" xml:space="preserve">
          <source>router.METHOD()</source>
          <target state="translated">router.METHOD()</target>
        </trans-unit>
        <trans-unit id="6eb6a302f12a6f6d5e9ddef289f65eb7793b8825" translate="yes" xml:space="preserve">
          <source>router.METHOD(path, [callback, ...] callback)</source>
          <target state="translated">router.METHOD (경로, [콜백, ...] 콜백)</target>
        </trans-unit>
        <trans-unit id="f84e6dac1f8d334e00c2415507c5d6337751fe51" translate="yes" xml:space="preserve">
          <source>router.all()</source>
          <target state="translated">router.all()</target>
        </trans-unit>
        <trans-unit id="c0e47131c47c4c81e093b88f5f48c3a373b54e8f" translate="yes" xml:space="preserve">
          <source>router.all(path, [callback, ...] callback)</source>
          <target state="translated">router.all (경로, [콜백, ...] 콜백)</target>
        </trans-unit>
        <trans-unit id="c3cbe5704d39a68da489447cd2f492118cb8f1a7" translate="yes" xml:space="preserve">
          <source>router.param()</source>
          <target state="translated">router.param()</target>
        </trans-unit>
        <trans-unit id="8b9b95024a7fb7e4502a8f587f2b8cd47c7cffe4" translate="yes" xml:space="preserve">
          <source>router.param(name, callback)</source>
          <target state="translated">router.param (이름, 콜백)</target>
        </trans-unit>
        <trans-unit id="05213405ad3e982f74ba1bdb896dba6ebd383604" translate="yes" xml:space="preserve">
          <source>router.route()</source>
          <target state="translated">router.route()</target>
        </trans-unit>
        <trans-unit id="6b74d17e788a4608e25428b4650dca605ba8c685" translate="yes" xml:space="preserve">
          <source>router.route(path)</source>
          <target state="translated">router.route(path)</target>
        </trans-unit>
        <trans-unit id="21765202948a7298719daa10e75001db652eb2f9" translate="yes" xml:space="preserve">
          <source>router.use()</source>
          <target state="translated">router.use()</target>
        </trans-unit>
        <trans-unit id="777cd87b38a78f87aaa233a8508aa0bcc8e8537a" translate="yes" xml:space="preserve">
          <source>router.use([path], [function, ...] function)</source>
          <target state="translated">router.use ([경로], [기능, ...] 기능)</target>
        </trans-unit>
        <trans-unit id="0af74e3c01ca7b6492b5d01b640ecb8188796e1f" translate="yes" xml:space="preserve">
          <source>serve-favicon</source>
          <target state="translated">serve-favicon</target>
        </trans-unit>
        <trans-unit id="d15917a9a70998b4e091520ab28f9727ef390f0f" translate="yes" xml:space="preserve">
          <source>serve-index</source>
          <target state="translated">serve-index</target>
        </trans-unit>
        <trans-unit id="fae0c2c0f96ac832e715c29ba152e7253c8f2987" translate="yes" xml:space="preserve">
          <source>serve-static</source>
          <target state="translated">serve-static</target>
        </trans-unit>
        <trans-unit id="36a8065db3b305cacce5d2a79c6eb94f976ee64e" translate="yes" xml:space="preserve">
          <source>setHeaders</source>
          <target state="translated">setHeaders</target>
        </trans-unit>
        <trans-unit id="4ec425e40046d264c02628b94f12daa230c34ee4" translate="yes" xml:space="preserve">
          <source>uniquelocal - &lt;code&gt;10.0.0.0/8&lt;/code&gt;, &lt;code&gt;172.16.0.0/12&lt;/code&gt;, &lt;code&gt;192.168.0.0/16&lt;/code&gt;, &lt;code&gt;fc00::/7&lt;/code&gt;</source>
          <target state="translated">uniquelocal- &lt;code&gt;10.0.0.0/8&lt;/code&gt; &lt;code&gt;fc00::/7&lt;/code&gt; , &lt;code&gt;172.16.0.0/12&lt;/code&gt; , &lt;code&gt;192.168.0.0/16&lt;/code&gt; , fc00 :: / 7</target>
        </trans-unit>
        <trans-unit id="f60bd82a61f2f560092ee3376ac781a684f11d57" translate="yes" xml:space="preserve">
          <source>vhost</source>
          <target state="translated">vhost</target>
        </trans-unit>
        <trans-unit id="37d41699bdee4fcb969ca499eb0f8b82c60d59cc" translate="yes" xml:space="preserve">
          <source>will</source>
          <target state="translated">will</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
