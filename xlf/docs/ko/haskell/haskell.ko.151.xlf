<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="434952a5725e7de695b3a6a4b3a96155d48436c1" translate="yes" xml:space="preserve">
          <source>Causes the compiler to emit a warning when a Prelude numeric conversion converts a type &lt;code&gt;T&lt;/code&gt; to the same type &lt;code&gt;T&lt;/code&gt;; such calls are probably no-ops and can be omitted. The functions checked for are: &lt;code&gt;toInteger&lt;/code&gt;, &lt;code&gt;toRational&lt;/code&gt;, &lt;code&gt;fromIntegral&lt;/code&gt;, and &lt;code&gt;realToFrac&lt;/code&gt;.</source>
          <target state="translated">Prelude 숫자 변환이 유형 &lt;code&gt;T&lt;/code&gt; 를 동일한 유형 &lt;code&gt;T&lt;/code&gt; 로 변환 할 때 컴파일러에서 경고를 발생시킵니다 . 이러한 호출은 아마도 작동하지 않으며 생략 될 수 있습니다. 확인 된 함수는 &lt;code&gt;toInteger&lt;/code&gt; , &lt;code&gt;toRational&lt;/code&gt; , &lt;code&gt;fromIntegral&lt;/code&gt; 및 &lt;code&gt;realToFrac&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="99fb2233386feaebc8cae57990b88088c30ee46f" translate="yes" xml:space="preserve">
          <source>Causes the compiler to emit a warning when a module or interface file in the current directory is shadowing one with the same module name in a library or other directory.</source>
          <target state="translated">현재 디렉토리의 모듈 또는 인터페이스 파일이 라이브러리 또는 다른 디렉토리에서 동일한 모듈 이름을 가진 파일 또는 섀도우를 섀도 잉 할 때 컴파일러에서 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="afdfafb40e8a88887307fad43761f46853103015" translate="yes" xml:space="preserve">
          <source>Causes the finalizers associated with a foreign pointer to be run immediately.</source>
          <target state="translated">외부 포인터와 관련된 종료자가 즉시 실행되도록합니다.</target>
        </trans-unit>
        <trans-unit id="94c778edfde07b73ccf5c0d6cd8b7010e4f03d9d" translate="yes" xml:space="preserve">
          <source>Causes the finalizers associated with a foreign pointer to be run immediately. The foreign pointer must not be used again after this function is called. If the foreign pointer does not support finalizers, this is a no-op.</source>
          <target state="translated">외부 포인터와 연관된 종료자가 즉시 실행되도록합니다. 이 함수가 호출 된 후에는 외부 포인터를 다시 사용해서는 안됩니다. 외부 포인터가 종료자를 지원하지 않는 경우 이는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="54fd86ce8e8302272d0e97f23989674677147c23" translate="yes" xml:space="preserve">
          <source>Causes the output from all of the flags listed below to be dumped to a file. The file name depends upon the output produced; for instance, output from &lt;a href=&quot;#ghc-flag--ddump-simpl&quot;&gt;&lt;code&gt;-ddump-simpl&lt;/code&gt;&lt;/a&gt; will end up in &lt;code&gt;&lt;em&gt;module&lt;/em&gt;.dump-simpl&lt;/code&gt;.</source>
          <target state="translated">아래 나열된 모든 플래그의 출력이 파일로 덤프되도록합니다. 파일 이름은 생성 된 출력에 따라 다릅니다. 예를 들어, &lt;a href=&quot;#ghc-flag--ddump-simpl&quot;&gt; &lt;code&gt;-ddump-simpl&lt;/code&gt; 의&lt;/a&gt; 출력은 &lt;code&gt;&lt;em&gt;module&lt;/em&gt;.dump-simpl&lt;/code&gt; simpl &lt;em&gt;모듈&lt;/em&gt; 에서 끝납니다 .</target>
        </trans-unit>
        <trans-unit id="ec4c4a9b78df554f2361cec3adb0f5b2c38f8d94" translate="yes" xml:space="preserve">
          <source>Caution: &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; necessarily delays retrieving the requested element until the result is forced. It can therefore lead to a space leak if the result is stored, unforced, in another structure. To retrieve an element immediately without forcing it, use &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;(!?)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주의 : &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; 반드시 결과가 강제 될 때까지 요청 된 요소 검색을 지연시킵니다. 따라서 결과가 다른 구조에 강제로 저장되면 공간 누출이 발생할 수 있습니다. 강제하지 않고 즉시 요소를 검색하려면 &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;data-sequence#v:-33--63-&quot;&gt;(!?)&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9452e73ef346ac944b5f51db164d667752e4ddf7" translate="yes" xml:space="preserve">
          <source>Caveat for POSIX systems: This function returns a timestamp with sub-second resolution only if this package is compiled against &lt;code&gt;unix-2.6.0.0&lt;/code&gt; or later and the underlying filesystem supports them.</source>
          <target state="translated">POSIX 시스템에 대한주의 사항 :이 함수는이 패키지가 &lt;code&gt;unix-2.6.0.0&lt;/code&gt; 이상 에 대해 컴파일 되고 기본 파일 시스템이이를 지원하는 경우에만 초 미만의 해상도로 타임 스탬프를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ecb440a03f6dbd53a44110493f3da116c4ae1381" translate="yes" xml:space="preserve">
          <source>Cc: Other, Control</source>
          <target state="translated">참조 : 기타, 통제</target>
        </trans-unit>
        <trans-unit id="3f65512b343186766813dc45cc276246f8a4ec1a" translate="yes" xml:space="preserve">
          <source>Centi</source>
          <target state="translated">Centi</target>
        </trans-unit>
        <trans-unit id="c1a76f1c3c812a00183788cc7dee0166fabca31f" translate="yes" xml:space="preserve">
          <source>Certain lexical rules regarding qualified identifiers are slightly different in GHC compared to the Haskell report. When you have ⟨module⟩&lt;code&gt;.&lt;/code&gt;⟨reservedop⟩, such as &lt;code&gt;M.\&lt;/code&gt;, GHC will interpret it as a single qualified operator rather than the two lexemes &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;.\&lt;/code&gt;.</source>
          <target state="translated">정규화 된 식별자에 관한 특정 어휘 규칙은 Haskell 보고서와 비교하여 GHC에서 약간 다릅니다. 당신은 ⟨module⟩있을 때 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;M.\&lt;/code&gt; 과 같은 &quot;reservedop&quot; 는 GHC 가이를 두 개의 어휘 &lt;code&gt;M&lt;/code&gt; 과 &lt;code&gt;.\&lt;/code&gt; 대신 단일 정규 연산자로 해석합니다 .</target>
        </trans-unit>
        <trans-unit id="4a7b4652caf25e3351a7832df015e2959b0fbeda" translate="yes" xml:space="preserve">
          <source>Certain pragmas are &lt;em&gt;file-header pragmas&lt;/em&gt;:</source>
          <target state="translated">특정 pragma는 &lt;em&gt;파일 헤더 pragma입니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ae7abbf68a883aede0cacb97e407ea65ab0158f5" translate="yes" xml:space="preserve">
          <source>Certain record pattern synonyms (&lt;a href=&quot;pattern_synonyms#record-patsyn&quot;&gt;Record Pattern Synonyms&lt;/a&gt;) can give rise to top-level field selectors. Consider the following example:</source>
          <target state="translated">특정 레코드 패턴 동의어 ( &lt;a href=&quot;pattern_synonyms#record-patsyn&quot;&gt;레코드 패턴 동의어&lt;/a&gt; )는 최상위 필드 선택자를 생성 할 수 있습니다. 다음 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="90ec155e49787cf6b35f15aacd48331aebf44025" translate="yes" xml:space="preserve">
          <source>Certain static options (&lt;code&gt;-package ⟨pkg⟩&lt;/code&gt;, &lt;code&gt;-I⟨dir⟩&lt;/code&gt;, &lt;code&gt;-i⟨dir⟩[:⟨dir⟩]*&lt;/code&gt;, and &lt;code&gt;-l ⟨lib⟩&lt;/code&gt; in particular) will also work, but some may not take effect until the next reload.</source>
          <target state="translated">특정 정적 옵션 ( &lt;code&gt;-package ⟨pkg⟩&lt;/code&gt; , &lt;code&gt;-I⟨dir⟩&lt;/code&gt; , &lt;code&gt;-i⟨dir⟩[:⟨dir⟩]*&lt;/code&gt; 및 &lt;code&gt;-l ⟨lib⟩&lt;/code&gt; )도 작동하지만 일부는 다음 재 장전.</target>
        </trans-unit>
        <trans-unit id="85fb7bc2cf9eae529cf203fca43ad1fafe544f1d" translate="yes" xml:space="preserve">
          <source>Cf: Other, Format</source>
          <target state="translated">Cf : 기타, 형식</target>
        </trans-unit>
        <trans-unit id="8d2e02be6c58addb2b99edf9f0ec28ccb830c1c6" translate="yes" xml:space="preserve">
          <source>Chan</source>
          <target state="translated">Chan</target>
        </trans-unit>
        <trans-unit id="23d8c781bba25bcb2e23d6e6e1d1df6c5b04d4ed" translate="yes" xml:space="preserve">
          <source>Change a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; such that it first applies a function to the value to be encoded.</source>
          <target state="translated">인코딩 할 값에 함수를 먼저 적용 하도록 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="7fd9f6eb3359e7000ce00ff5cb820e7e2625290f" translate="yes" xml:space="preserve">
          <source>Change a primitives such that it first applies a function to the value to be encoded.</source>
          <target state="translated">인코딩 할 값에 함수를 먼저 적용하도록 기본 요소를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="263534a8d3cd1368405332d115a3e8a5e0916791" translate="yes" xml:space="preserve">
          <source>Change the current line input history.</source>
          <target state="translated">현재 라인 입력 히스토리를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="e135b569c9c36fdc4c10a1b8dd5606f2dde8cdda" translate="yes" xml:space="preserve">
          <source>Change the time at which the file or directory was last accessed.</source>
          <target state="translated">파일 또는 디렉토리에 마지막으로 액세스 한 시간을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="75a57fef1bcad1b10050502db22d105dd5b681bb" translate="yes" xml:space="preserve">
          <source>Change the time at which the file or directory was last modified.</source>
          <target state="translated">파일 또는 디렉토리가 마지막으로 수정 된 시간을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="b543b3e3f6d011d29dc48b49b65528b6bfe6213c" translate="yes" xml:space="preserve">
          <source>Change the working directory to the given path.</source>
          <target state="translated">작업 디렉토리를 지정된 경로로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="6b7fe5344acf1d056f5c7f968f7d90a57f5755a8" translate="yes" xml:space="preserve">
          <source>Changes the current working directory to ⟨dir⟩. A &amp;ldquo;&lt;code&gt;~&lt;/code&gt;&amp;rdquo; symbol at the beginning of ⟨dir⟩ will be replaced by the contents of the environment variable &lt;code id=&quot;index-23&quot;&gt;HOME&lt;/code&gt;. See also the &lt;a href=&quot;#ghci-cmd-:show%20paths&quot;&gt;&lt;code&gt;:show paths&lt;/code&gt;&lt;/a&gt; command for showing the current working directory.</source>
          <target state="translated">현재 작업 디렉토리를 ⟨dir⟩로 변경합니다. ⟨dir⟩ 시작 부분에 &amp;ldquo; &lt;code&gt;~&lt;/code&gt; &amp;rdquo;기호가 환경 변수 &lt;code id=&quot;index-23&quot;&gt;HOME&lt;/code&gt; 의 내용으로 바뀝니다 . 현재 작업 디렉토리를 표시 하려면 &lt;a href=&quot;#ghci-cmd-:show%20paths&quot;&gt; &lt;code&gt;:show paths&lt;/code&gt; &lt;/a&gt; 명령을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="02830b0e406321c00f4e989af81f77de40608024" translate="yes" xml:space="preserve">
          <source>Changing file ownership</source>
          <target state="translated">파일 소유권 변경</target>
        </trans-unit>
        <trans-unit id="67fe79d904122f61e2cdc2d493c6c81c184e8492" translate="yes" xml:space="preserve">
          <source>Changing file timestamps</source>
          <target state="translated">파일 타임 스탬프 변경</target>
        </trans-unit>
        <trans-unit id="0f9ba953e35135a3f8ec268817cc92f2557202a9" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>
        </trans-unit>
        <trans-unit id="6463234936cd262a8d045abb04db34f49114c50c" translate="yes" xml:space="preserve">
          <source>Char#</source>
          <target state="translated">Char#</target>
        </trans-unit>
        <trans-unit id="56bec3c9c8a8dad6071b1b6b042ef9a2a5bda1c1" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 를 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="ca25f4863f8e85cc61cbab5a040f8d62a44d6c3f" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="7944d84952e03be4a7f69bb2af7dd857be996747" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7은 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 인코딩 .</target>
        </trans-unit>
        <trans-unit id="02d8aa8dbc448bf6435de25a933ea14a00f8bd3e" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7 인코딩 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ee40235e7d52b4857c9da32ce3bd53ad762b4fe" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7은 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="3de3f637fd46ac3b2325813d150d0b0bbcb04b9e" translate="yes" xml:space="preserve">
          <source>Char7 encode a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char7은 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="81a641cf47ecbd4c697e96c66aba11b0c68cdc70" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 를 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="73a137c3d21795e097bcef660d4a361b0293d6b9" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="806351eb1d21f41b4f14d2e5cb77c1d44de0b39d" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8은 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 인코딩 .</target>
        </trans-unit>
        <trans-unit id="066e74b4858d2de6b482fe998d3b517bff80ddaa" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8 인코딩 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="641dc3e10663fc6e82c27597680481e18b1eed6a" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8은 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="a8cff84331551b1938e53fdba74521c4da68aee0" translate="yes" xml:space="preserve">
          <source>Char8 encode a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Char8은 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="92af232f3a9bd64dcd64ea977038fd76b6e233ed" translate="yes" xml:space="preserve">
          <source>CharBufElem</source>
          <target state="translated">CharBufElem</target>
        </trans-unit>
        <trans-unit id="1029d1073715d0c2874bb05515b41e266c15b911" translate="yes" xml:space="preserve">
          <source>CharBuffer</source>
          <target state="translated">CharBuffer</target>
        </trans-unit>
        <trans-unit id="69cd83e8ac58e314719145762c2f1e00606d331f" translate="yes" xml:space="preserve">
          <source>CharParser</source>
          <target state="translated">CharParser</target>
        </trans-unit>
        <trans-unit id="40fd1d8ea17fad45eeb0dcb82eff37e2a5f260c9" translate="yes" xml:space="preserve">
          <source>CharPos</source>
          <target state="translated">CharPos</target>
        </trans-unit>
        <trans-unit id="cf26c45564a5d71f6fbcb46788282afd466cd0cd" translate="yes" xml:space="preserve">
          <source>CharRep</source>
          <target state="translated">CharRep</target>
        </trans-unit>
        <trans-unit id="fb8fc97261645407d2f98f04514273d3d0cb5189" translate="yes" xml:space="preserve">
          <source>Character Parsing</source>
          <target state="translated">문자 파싱</target>
        </trans-unit>
        <trans-unit id="11a965778572465b297760373bc0ab9a5fe50dd4" translate="yes" xml:space="preserve">
          <source>Character classification</source>
          <target state="translated">문자 분류</target>
        </trans-unit>
        <trans-unit id="96ba4ad9b6b1f70ec2978c3be7ed7b307b7c2671" translate="yes" xml:space="preserve">
          <source>Character encodings</source>
          <target state="translated">문자 인코딩</target>
        </trans-unit>
        <trans-unit id="4e9dedca31fc0a76de315c47da7f7ed9522f709a" translate="yes" xml:space="preserve">
          <source>Character literal</source>
          <target state="translated">문자 리터럴</target>
        </trans-unit>
        <trans-unit id="e427563a8b5dc581e2494d6b8c388bc1ad418d61" translate="yes" xml:space="preserve">
          <source>Characters &lt;code&gt;'0'&lt;/code&gt; through &lt;code&gt;'9'&lt;/code&gt; are converted properly to &lt;code&gt;0..9&lt;/code&gt;:</source>
          <target state="translated">문자 &lt;code&gt;'0'&lt;/code&gt; 에서 &lt;code&gt;'9'&lt;/code&gt; 는 &lt;code&gt;0..9&lt;/code&gt; 로 올바르게 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="eb4562ddc1f04fb37fa10db9a68fa2f0e8c61127" translate="yes" xml:space="preserve">
          <source>Characters that appeared immediately to the left of &lt;code&gt;&lt;a href=&quot;text-printf#v:fmtChar&quot;&gt;fmtChar&lt;/a&gt;&lt;/code&gt; in the format and were accepted by the type's &lt;code&gt;&lt;a href=&quot;text-printf#v:parseFormat&quot;&gt;parseFormat&lt;/a&gt;&lt;/code&gt;. Normally the empty string.</source>
          <target state="translated">형식에서 &lt;code&gt;&lt;a href=&quot;text-printf#v:fmtChar&quot;&gt;fmtChar&lt;/a&gt;&lt;/code&gt; 의 왼쪽에 즉시 표시되고 유형의 &lt;code&gt;&lt;a href=&quot;text-printf#v:parseFormat&quot;&gt;parseFormat&lt;/a&gt;&lt;/code&gt; 에 허용 된 문자 입니다. 일반적으로 빈 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="908bf09306338791f760412f7c7988ee09c08be0" translate="yes" xml:space="preserve">
          <source>Characters which count as whitespace</source>
          <target state="translated">공백으로 간주되는 문자</target>
        </trans-unit>
        <trans-unit id="9d410b862f74f639c4ccd481bdde8ba8344a5692" translate="yes" xml:space="preserve">
          <source>Characters which set off quotes</source>
          <target state="translated">따옴표를 설정 한 문자</target>
        </trans-unit>
        <trans-unit id="fa756d077568ca3fa7947f31c705c22d117ea195" translate="yes" xml:space="preserve">
          <source>Chars</source>
          <target state="translated">Chars</target>
        </trans-unit>
        <trans-unit id="2e60ca723b4ed6f5fe1f74ebd6455919301f1401" translate="yes" xml:space="preserve">
          <source>Check consistency of dependencies in the package database, and report packages that have missing dependencies.</source>
          <target state="translated">패키지 데이터베이스에서 종속성의 일관성을 확인하고 종속성이없는 패키지를보고하십시오.</target>
        </trans-unit>
        <trans-unit id="ef742726504fae73624f1d2740eee33b1e18a5f5" translate="yes" xml:space="preserve">
          <source>Check for equivalence with &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 와 동등한 지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="de449d61d494945947e42f41ad579bebeff5e057" translate="yes" xml:space="preserve">
          <source>Check for types that have all the fields being updated. For example:</source>
          <target state="translated">모든 필드가 업데이트되는 유형을 확인하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="25aad50f0d98555e9126477d94936281988cdbdd" translate="yes" xml:space="preserve">
          <source>Check that the boolean condition is true and, if not, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">부울 조건이 true인지 확인하고 그렇지 않은 경우 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="11a65f40a8c0c96612141eee9a7f9eb387c8de3b" translate="yes" xml:space="preserve">
          <source>Check the invariant lazily.</source>
          <target state="translated">불변을 게으르게 점검하십시오.</target>
        </trans-unit>
        <trans-unit id="bd68f45e63afd7b81448d1161a637f4740403686" translate="yes" xml:space="preserve">
          <source>Check the invariant strictly.</source>
          <target state="translated">불변량을 엄격하게 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="2d152033bdb1cb8a45c7f057dae3baf09a98ae2a" translate="yes" xml:space="preserve">
          <source>Check whether a given &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">주어진 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 이 비어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a141584193fc65caf312c7c3cddb0fcb2070af5" translate="yes" xml:space="preserve">
          <source>Check whether a given &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 이 비어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d28efe491390c6fe1ac8116c9cfdb5631d83fe1" translate="yes" xml:space="preserve">
          <source>Check whether a given &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">주어진 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 이 비어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="5a5443b9581579f42781516a697f0d0a7ee7f754" translate="yes" xml:space="preserve">
          <source>Check whether an existing &lt;code&gt;path&lt;/code&gt; is a symbolic link. If &lt;code&gt;path&lt;/code&gt; is a regular file or directory, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; is returned. If &lt;code&gt;path&lt;/code&gt; does not exist or is otherwise inaccessible, an exception is thrown (see below).</source>
          <target state="translated">기존 &lt;code&gt;path&lt;/code&gt; 가 기호 링크 인지 확인하십시오 . 경우 &lt;code&gt;path&lt;/code&gt; 일반 파일이나 디렉토리, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 반환됩니다. 경우 &lt;code&gt;path&lt;/code&gt; 존재하거나 액세스하지 않으며, 예외 (아래 참조) 슬로우됩니다.</target>
        </trans-unit>
        <trans-unit id="9aed78b9f2fc66a97f4b3828eefcf158c19b3680" translate="yes" xml:space="preserve">
          <source>Check whether an existing &lt;code&gt;path&lt;/code&gt; is a symbolic link. If &lt;code&gt;path&lt;/code&gt; is a regular file or directory, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; is returned. If &lt;code&gt;path&lt;/code&gt; does not exist or is otherwise inaccessible, an exception is thrown (see below).</source>
          <target state="translated">기존 &lt;code&gt;path&lt;/code&gt; 가 심볼릭 링크 인지 확인합니다 . 경우 &lt;code&gt;path&lt;/code&gt; 일반 파일이나 디렉토리, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 반환됩니다. 경우 &lt;code&gt;path&lt;/code&gt; 존재하거나 액세스하지 않으며, 예외 (아래 참조) 슬로우됩니다.</target>
        </trans-unit>
        <trans-unit id="81790fca1bc2a2b5b63ac233ca7a5d6307c84d40" translate="yes" xml:space="preserve">
          <source>Check whether an existing &lt;code&gt;path&lt;/code&gt; is a symbolic link. If &lt;code&gt;path&lt;/code&gt; is a regular file or directory, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; is returned. If &lt;code&gt;path&lt;/code&gt; does not exist or is otherwise inaccessible, an exception is thrown (see below).</source>
          <target state="translated">기존 &lt;code&gt;path&lt;/code&gt; 가 심볼릭 링크 인지 확인합니다 . 경우 &lt;code&gt;path&lt;/code&gt; 일반 파일이나 디렉토리, &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 반환됩니다. 경우 &lt;code&gt;path&lt;/code&gt; 존재하거나 액세스하지 않으며, 예외 (아래 참조) 슬로우됩니다.</target>
        </trans-unit>
        <trans-unit id="82dbd9b339d6f7f92f4bd0c72b0bef9f5a34c4a1" translate="yes" xml:space="preserve">
          <source>Check whether one string is a substring of another. &lt;code&gt;isInfixOf
 p s&lt;/code&gt; is equivalent to &lt;code&gt;not (null (findSubstrings p s))&lt;/code&gt;.</source>
          <target state="translated">한 문자열이 다른 문자열의 하위 문자열인지 확인하십시오. &lt;code&gt;isInfixOf p s&lt;/code&gt; 는 &lt;code&gt;not (null (findSubstrings p s))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7fdf24713c560ff98cf452189cb048219eca67de" translate="yes" xml:space="preserve">
          <source>Check whether the given &lt;code&gt;&lt;a href=&quot;system-directory-internal#t:FileType&quot;&gt;FileType&lt;/a&gt;&lt;/code&gt; is considered a directory by the operating system. This affects the choice of certain functions e.g. &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt; vs &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;system-directory-internal#t:FileType&quot;&gt;FileType&lt;/a&gt;&lt;/code&gt; 이 운영 체제에서 디렉토리로 간주 되는지 확인하십시오 . 이것은 &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt; vs &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt; 과 같은 특정 기능의 선택에 영향을줍니다 .</target>
        </trans-unit>
        <trans-unit id="52740c11c5d39eaa519b1832e56f1e95c8609f55" translate="yes" xml:space="preserve">
          <source>CheckParity</source>
          <target state="translated">CheckParity</target>
        </trans-unit>
        <trans-unit id="09a06f8efb932eccedb1dd7a9216909430208a61" translate="yes" xml:space="preserve">
          <source>Checked multiplication</source>
          <target state="translated">확인 된 곱셈</target>
        </trans-unit>
        <trans-unit id="ea3ac447c448b90e76751006f13e1748798bb639" translate="yes" xml:space="preserve">
          <source>Checked multiplication. Calls &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the result would overflow.</source>
          <target state="translated">곱셈을 확인했습니다. 결과가 오버플로되면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="9bf66b62d5804bba01666f4f93f75fd65a90179a" translate="yes" xml:space="preserve">
          <source>Checked multiplication. Calls &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the result would overflow.</source>
          <target state="translated">곱셈을 확인했습니다. 결과가 오버플로되면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="00688638245da9431354271e5e1dd0d3fd8029a0" translate="yes" xml:space="preserve">
          <source>Checked multiplication. Calls &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; if the result would overflow.</source>
          <target state="translated">곱셈을 확인했습니다. 결과가 오버플로되면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="3f0d53e241985069ceb51705a16b43d06a5acc8f" translate="yes" xml:space="preserve">
          <source>Checking file existence and permissions</source>
          <target state="translated">파일 존재 및 권한 확인</target>
        </trans-unit>
        <trans-unit id="4464fb45383f2597a31ff80b2d8dbda1450c4726" translate="yes" xml:space="preserve">
          <source>Checking for consistency</source>
          <target state="translated">일관성 검사</target>
        </trans-unit>
        <trans-unit id="ca3a7a57aa4a608fe51ddc03446b424b880acba0" translate="yes" xml:space="preserve">
          <source>Checking for determinism</source>
          <target state="translated">결정 성 점검</target>
        </trans-unit>
        <trans-unit id="a7f7acb822fded721293744105332288e2484ab2" translate="yes" xml:space="preserve">
          <source>Checks for the existence of the file.</source>
          <target state="translated">파일이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b4ab3ea54f7e566d3d728008dc0c562ddc7c45d3" translate="yes" xml:space="preserve">
          <source>Checks if this file is a block device.</source>
          <target state="translated">이 파일이 블록 장치인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a9eeb420f641371df249b8ac2aae9cd0ac5ba1bd" translate="yes" xml:space="preserve">
          <source>Checks if this file is a character device.</source>
          <target state="translated">이 파일이 문자 장치인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7a7a7cc4baffd5c22aa4dd7ed8e12cdbe92b8017" translate="yes" xml:space="preserve">
          <source>Checks if this file is a directory device.</source>
          <target state="translated">이 파일이 디렉토리 장치인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a6b75a7cca0bb0ff7447a30447eb3daca3fc1c91" translate="yes" xml:space="preserve">
          <source>Checks if this file is a named pipe device.</source>
          <target state="translated">이 파일이 명명 된 파이프 장치인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="fcc9d0081bb40037655c3ba6937c9168f5f71295" translate="yes" xml:space="preserve">
          <source>Checks if this file is a regular file device.</source>
          <target state="translated">이 파일이 일반 파일 장치인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="2fc3ff702b6140e0eb8eb69271ae1bd3182c40b0" translate="yes" xml:space="preserve">
          <source>Checks if this file is a socket device.</source>
          <target state="translated">이 파일이 소켓 장치인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b2afe097f238b20f51392bcd05b20dff1668d511" translate="yes" xml:space="preserve">
          <source>Checks if this file is a symbolic link device.</source>
          <target state="translated">이 파일이 심볼릭 링크 장치인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="a865b429ea0c77675a6dd025a7152c183a8bd24d" translate="yes" xml:space="preserve">
          <source>Checks whether the given piece of HTML is empty.</source>
          <target state="translated">주어진 HTML 조각이 비어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="6842c74c4d5122bd28c5c4fc9d30c451e8a95d41" translate="yes" xml:space="preserve">
          <source>Child</source>
          <target state="translated">Child</target>
        </trans-unit>
        <trans-unit id="37ea6ef6e4338441ebeb5e096561bf600ba81fca" translate="yes" xml:space="preserve">
          <source>ChildLimit</source>
          <target state="translated">ChildLimit</target>
        </trans-unit>
        <trans-unit id="a1d44262e667f0e22eca44263d5bbb77be567d2c" translate="yes" xml:space="preserve">
          <source>Choice, for arrows that support it. This class underlies the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; constructs in arrow notation.</source>
          <target state="translated">그것을 지원하는 화살표에 대한 선택. 이 클래스 는 화살표 표기법 의 &lt;code&gt;if&lt;/code&gt; 및 &lt;code&gt;case&lt;/code&gt; 구성을 기본으로합니다 .</target>
        </trans-unit>
        <trans-unit id="13af4af8e3e12cca4c60c768de395cb0f257043c" translate="yes" xml:space="preserve">
          <source>Chris Dornan &amp;lt;chris@chrisdornan.com&amp;gt;</source>
          <target state="translated">크리스 도넌 &amp;lt;chris@chrisdornan.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="daa5b3c4fad889858348d9c19a1c5933411b0421" translate="yes" xml:space="preserve">
          <source>Chris Okasaki and Andy Gill, &quot;&lt;em&gt;Fast Mergeable Integer Maps&lt;/em&gt;&quot;, Workshop on ML, September 1998, pages 77-86, &lt;a href=&quot;http://citeseer.ist.psu.edu/okasaki98fast.html&quot;&gt;http://citeseer.ist.psu.edu/okasaki98fast.html&lt;/a&gt;</source>
          <target state="translated">Chris Okasaki와 Andy Gill, &quot; &lt;em&gt;빠른 병합 가능한 정수 맵&lt;/em&gt; &quot;, 1998 년 9 월 ML 워크샵, 77-86 페이지, &lt;a href=&quot;http://citeseer.ist.psu.edu/okasaki98fast.html&quot;&gt;http://citeseer.ist.psu.edu/okasaki98fast.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed6f6fc339c9088311874c37e2861e67295e97c2" translate="yes" xml:space="preserve">
          <source>Chris Okasaki and Andy Gill, &quot;&lt;em&gt;Fast Mergeable Integer Maps&lt;/em&gt;&quot;, Workshop on ML, September 1998, pages 77-86, &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452&quot;&gt;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452&lt;/a&gt;</source>
          <target state="translated">Chris Okasaki와 Andy Gill, &quot; &lt;em&gt;빠른 병합 가능한 정수 맵&lt;/em&gt; &quot;, 1998 년 9 월 ML 워크샵, 77-86 페이지, &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452&quot;&gt;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.5452&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb618ab2d17116430268c3b604170b890ad43696" translate="yes" xml:space="preserve">
          <source>Chunk allocation sizes</source>
          <target state="translated">청크 할당 크기</target>
        </trans-unit>
        <trans-unit id="7777060af843be77aa5fec39d877f4b2ffeaee57" translate="yes" xml:space="preserve">
          <source>Chunk to insert.</source>
          <target state="translated">삽입 할 덩어리.</target>
        </trans-unit>
        <trans-unit id="410001263d4aa32074ffb0d3a6eb2ff557bad6c2" translate="yes" xml:space="preserve">
          <source>Chunk-wise application of &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapByteStringBounded&quot;&gt;primMapByteStringBounded&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:primMapByteStringBounded&quot;&gt;primMapByteStringBounded&lt;/a&gt;&lt;/code&gt; 의 청크 응용 프로그램입니다 .</target>
        </trans-unit>
        <trans-unit id="b4f59873cb3e72fb38cf19d2b36fab47d679c94f" translate="yes" xml:space="preserve">
          <source>ChunkIOStream</source>
          <target state="translated">ChunkIOStream</target>
        </trans-unit>
        <trans-unit id="d97a67e9246e46a1be8dbb497eed30b48a60bc9d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; defines operations on sequentially ordered types.</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; 은 순차적으로 정렬 된 유형에 대한 작업을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="819336fd3db33e885f20dc739ecf93f47f1b9f76" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; defines operations on sequentially ordered types.</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; 은 순차적으로 정렬 된 유형에 대한 작업을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d40184336a522bd6bc26b0c42ef807a3a543b2ad" translate="yes" xml:space="preserve">
          <source>Class and instance declarations (&lt;a href=&quot;#cls-inst-scoped-tyvars&quot;&gt;Class and instance declarations&lt;/a&gt;)</source>
          <target state="translated">클래스 및 인스턴스 선언 ( &lt;a href=&quot;#cls-inst-scoped-tyvars&quot;&gt;클래스 및 인스턴스 선언&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="fd7f11dc1d2fad2dbac2d16012a84109a8d077b4" translate="yes" xml:space="preserve">
          <source>Class and type-family instance declarations are simply added to the list of available instances, with one exception. Since you might want to re-define one, a class instance &lt;em&gt;replaces&lt;/em&gt; any earlier instance with an identical head. You aren&amp;rsquo;t allowed to re-define a type family instance, since it might not be type safe to do so. Instead, re-define the whole type-family. (See &lt;a href=&quot;exts/type_families#type-families&quot;&gt;Type families&lt;/a&gt;.) For example:</source>
          <target state="translated">클래스 및 유형 계열 인스턴스 선언은 한 가지 예외를 제외하고 사용 가능한 인스턴스 목록에 추가됩니다. 하나를 다시 정의하고 싶을 수 있으므로 클래스 인스턴스 &lt;em&gt;는&lt;/em&gt; 이전 인스턴스를 동일한 헤드로 &lt;em&gt;대체&lt;/em&gt; 합니다. 유형 패밀리 인스턴스를 다시 정의 할 수 없습니다. 유형이 안전하지 않을 수 있기 때문입니다. 대신 전체 유형 제품군을 다시 정의하십시오. ( &lt;a href=&quot;exts/type_families#type-families&quot;&gt;유형 패밀리를&lt;/a&gt; 참조하십시오 .) 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="924e048091aed52128ab74910590a52413dde333" translate="yes" xml:space="preserve">
          <source>Class and type-family instance declarations are simply added to the list of available instances, with one exception. Since you might want to re-define one, a class instance &lt;em&gt;replaces&lt;/em&gt; any earlier instance with an identical head. You aren&amp;rsquo;t allowed to re-define a type family instance, since it might not be type safe to do so. Instead, re-define the whole type-family. (See &lt;a href=&quot;glasgow_exts#type-families&quot;&gt;Type families&lt;/a&gt;.) For example:</source>
          <target state="translated">클래스 및 유형 군 인스턴스 선언은 한 가지 예외를 제외하고 사용 가능한 인스턴스 목록에 추가됩니다. 인스턴스를 재정의하고 싶을 수 있으므로 클래스 인스턴스 &lt;em&gt;는&lt;/em&gt; 이전 인스턴스를 동일한 헤드로 &lt;em&gt;바꿉니다&lt;/em&gt; . 형식 패밀리 인스턴스는 재정의하기에 안전하지 않을 수 있으므로 형식 패밀리 인스턴스를 다시 정의 할 수 없습니다. 대신, 전체 유형 군을 재정의하십시오. &lt;a href=&quot;glasgow_exts#type-families&quot;&gt;유형 패밀리를&lt;/a&gt; 참조하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dbd6445135b61fd761e687dcf8a870f3ea1dea84" translate="yes" xml:space="preserve">
          <source>Class constraints, e.g. &lt;code&gt;Show a&lt;/code&gt;</source>
          <target state="translated">클래스 제약, 예를 들어 &lt;code&gt;Show a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d7bca3e56080c23850f3acb90b54dcb1a96dc654" translate="yes" xml:space="preserve">
          <source>Class declarations is exactly as in Haskell, except that you may not put default method declarations. You can also omit all the superclasses and class methods entirely; but you must either omit them all or put them all in.</source>
          <target state="translated">클래스 선언은 기본 메소드 선언을 넣을 수 없다는 점을 제외하고는 Haskell과 동일합니다. 모든 수퍼 클래스와 클래스 메소드를 완전히 생략 할 수도 있습니다. 그러나 모두 생략하거나 모두 넣어야합니다.</target>
        </trans-unit>
        <trans-unit id="c04fb6dc921e526046174553a4c408bf753d8ee0" translate="yes" xml:space="preserve">
          <source>Class for datatypes that represent data constructors</source>
          <target state="translated">데이터 생성자를 나타내는 데이터 유형 클래스</target>
        </trans-unit>
        <trans-unit id="d7cc5c22214efa6a1295a7d24536607aca2083df" translate="yes" xml:space="preserve">
          <source>Class for datatypes that represent datatypes</source>
          <target state="translated">데이터 유형을 나타내는 데이터 유형 클래스</target>
        </trans-unit>
        <trans-unit id="e127b45647c9a4c3ba8f7ac4875018fbb6a16737" translate="yes" xml:space="preserve">
          <source>Class for datatypes that represent records</source>
          <target state="translated">레코드를 나타내는 데이터 유형에 대한 클래스</target>
        </trans-unit>
        <trans-unit id="8549ac8b4ee9bfeb8645985029308c53753bf854" translate="yes" xml:space="preserve">
          <source>Class for string-like datastructures; used by the overloaded string extension (-XOverloadedStrings in GHC).</source>
          <target state="translated">문자열과 유사한 데이터 구조를위한 클래스; 오버로드 된 문자열 확장 (GHC의 -XOverloadedStrings)에 의해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4948308069f33f36a4053463c9649351542c16cf" translate="yes" xml:space="preserve">
          <source>Class methods&amp;rsquo; type arguments include the class type variables, followed by any variables an individual method is polymorphic in. So, &lt;code&gt;class Monad m where return :: a -&amp;gt; m a&lt;/code&gt; means that &lt;code&gt;return&lt;/code&gt;&amp;lsquo;s type arguments are &lt;code&gt;m, a&lt;/code&gt;.</source>
          <target state="translated">클래스 메소드의 타입 인수는 클래스 타입 변수와 개별 메소드가 다형성 인 변수를 포함합니다. 따라서 &lt;code&gt;class Monad m where return :: a -&amp;gt; m a&lt;/code&gt; 는 &lt;code&gt;return&lt;/code&gt; 의 타입 인수가 &lt;code&gt;m, a&lt;/code&gt; 임을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="010e6b293a7b7949ca86158365e2fcf17d4dac85" translate="yes" xml:space="preserve">
          <source>Class methods&amp;rsquo; type arguments include the class type variables, followed by any variables an individual method is polymorphic in. So, &lt;code&gt;class Monad m where return :: a -&amp;gt; m a&lt;/code&gt; means that &lt;code&gt;return&lt;/code&gt;&amp;rsquo;s type arguments are &lt;code&gt;m, a&lt;/code&gt;.</source>
          <target state="translated">클래스 메서드의 형식 인수에는 클래스 형식 변수가 포함되고 그 뒤에 개별 메서드가 다형성되는 변수가 있습니다. 따라서 &lt;code&gt;class Monad m where return :: a -&amp;gt; m a&lt;/code&gt; 는 &lt;code&gt;return&lt;/code&gt; 의 형식 인수가 &lt;code&gt;m, a&lt;/code&gt; 임을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="9d3b2c4ae4fed83178d28ffb4d6469c4f1fac0b3" translate="yes" xml:space="preserve">
          <source>Class of buffered IO devices</source>
          <target state="translated">버퍼링 된 IO 장치 클래스</target>
        </trans-unit>
        <trans-unit id="dcb424210f30d3d1885a481fb6e80274f648bf66" translate="yes" xml:space="preserve">
          <source>Class of data structures that can be folded to a summary value.</source>
          <target state="translated">요약 값으로 접을 수있는 데이터 구조 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="86acf5be4bcf0f38d7ad86842a5e8b8d12bdcd6f" translate="yes" xml:space="preserve">
          <source>Class of data structures that can be traversed from left to right, performing an action on each element.</source>
          <target state="translated">왼쪽에서 오른쪽으로 순회하여 각 요소에 대해 작업을 수행 할 수있는 데이터 구조 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="0241949bfd1df7bd2b0081e06778e290d086e82f" translate="yes" xml:space="preserve">
          <source>Class of immutable array types.</source>
          <target state="translated">불변 배열 타입의 클래스.</target>
        </trans-unit>
        <trans-unit id="cac499272eb010644590cb8d20b3650649d0272d" translate="yes" xml:space="preserve">
          <source>Class of monads based on &lt;code&gt;IO&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; 기반의 모나드 클래스 .</target>
        </trans-unit>
        <trans-unit id="740da89f6aef37ca8e423a79a1d1e996f6b8fb03" translate="yes" xml:space="preserve">
          <source>Class of mutable array types</source>
          <target state="translated">가변 배열 유형의 클래스</target>
        </trans-unit>
        <trans-unit id="c31c068d3603ea16b7e5bf11e6ba00a6f58a81aa" translate="yes" xml:space="preserve">
          <source>Class of mutable array types.</source>
          <target state="translated">변경 가능한 배열 유형의 클래스.</target>
        </trans-unit>
        <trans-unit id="eeec90853fc9b89566dd858a99cee46219c6fb39" translate="yes" xml:space="preserve">
          <source>ClassName</source>
          <target state="translated">ClassName</target>
        </trans-unit>
        <trans-unit id="69ed6e820b1deef905c18fab761e23a80cfa9b95" translate="yes" xml:space="preserve">
          <source>ClassStyle</source>
          <target state="translated">ClassStyle</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="66fb29109f0accb4d436590329b4f5afec345136" translate="yes" xml:space="preserve">
          <source>Classes are subject to the same rules:</source>
          <target state="translated">수업에는 동일한 규칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="d405817f67f8ccd40d1f186d851d563829e280b7" translate="yes" xml:space="preserve">
          <source>Classes have their roles default to nominal to promote coherence of class instances. If a &lt;code&gt;C Int&lt;/code&gt; were stored in a datatype, it would be quite bad if that were somehow changed into a &lt;code&gt;C Age&lt;/code&gt; somewhere, especially if another &lt;code&gt;C Age&lt;/code&gt; had been declared!</source>
          <target state="translated">클래스는 클래스 인스턴스의 일관성을 높이기 위해 기본적으로 역할이 명목으로 설정되어 있습니다. 경우 &lt;code&gt;C Int&lt;/code&gt; 데이터 형식에 저장된 것을 어떻게 든로 변경된 경우, 그것은 아주 나쁜 것 &lt;code&gt;C Age&lt;/code&gt; 또 다른 특히, 어딘가 &lt;code&gt;C Age&lt;/code&gt; 선언했다!</target>
        </trans-unit>
        <trans-unit id="93b7e7a75ba6d33fe9be07d2a3e2fa9626b54d48" translate="yes" xml:space="preserve">
          <source>Classifying I/O errors</source>
          <target state="translated">I / O 오류 분류</target>
        </trans-unit>
        <trans-unit id="bfa26f82d31c6894fd22c56cda343f490718f895" translate="yes" xml:space="preserve">
          <source>Clause</source>
          <target state="translated">Clause</target>
        </trans-unit>
        <trans-unit id="9b872e330183d04e1a1a4290222d5cb47562a233" translate="yes" xml:space="preserve">
          <source>ClauseQ</source>
          <target state="translated">ClauseQ</target>
        </trans-unit>
        <trans-unit id="ee7cfdc9ab0d2f3ca826d7784900906fd869f0c4" translate="yes" xml:space="preserve">
          <source>Cleans up the process.</source>
          <target state="translated">프로세스를 정리합니다.</target>
        </trans-unit>
        <trans-unit id="2e2883e56829ccbd086b2dd5718641dbc818fcfd" translate="yes" xml:space="preserve">
          <source>Clear display after cursor.</source>
          <target state="translated">커서 다음에 표시를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="7d39c804b5f0f442455fdc7a9b1ab8e70d955dec" translate="yes" xml:space="preserve">
          <source>Clear from beginning of line to cursor.</source>
          <target state="translated">줄의 시작부터 커서까지 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="863fe34b6840d335bdcff9f93282d90d0ad96d1f" translate="yes" xml:space="preserve">
          <source>Clear from cursor to end of line.</source>
          <target state="translated">커서에서 줄 끝까지 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="169f7f4047b8ceccc556f3729a697372b83a0de4" translate="yes" xml:space="preserve">
          <source>Clear the list of active plugins</source>
          <target state="translated">활성화 된 플러그인 목록 지우기</target>
        </trans-unit>
        <trans-unit id="c6d618522c990e09135eec0305687f5879f50def" translate="yes" xml:space="preserve">
          <source>Clear the list of plugins previously specified with &lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt;&lt;code&gt;-fplugin&lt;/code&gt;&lt;/a&gt;. This is useful in GHCi where simply removing the &lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt;&lt;code&gt;-fplugin&lt;/code&gt;&lt;/a&gt; options from the command line is not possible. Instead &lt;code&gt;:set -fclear-plugins&lt;/code&gt; can be used.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt; &lt;code&gt;-fplugin&lt;/code&gt; 으로&lt;/a&gt; 이전에 지정한 플러그인 목록을 지 웁니다 . 이것은 단순히 명령 줄에서 &lt;a href=&quot;#ghc-flag--fplugin=%E2%9F%A8module%E2%9F%A9&quot;&gt; &lt;code&gt;-fplugin&lt;/code&gt; &lt;/a&gt; 옵션을 제거 할 수 없는 GHCi에서 유용 합니다. 대신 &lt;code&gt;:set -fclear-plugins&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a119788b3630d8f3b45ede3cd009306fe477e64" translate="yes" xml:space="preserve">
          <source>Clear the list of plugins previously specified with &lt;code&gt;-fplugin&lt;/code&gt;. This is useful in GHCi where simply removing the &lt;code&gt;-fplugin&lt;/code&gt; options from the command line is not possible. Instead &lt;code&gt;:set -fclear-plugins&lt;/code&gt; can be used.</source>
          <target state="translated">&lt;code&gt;-fplugin&lt;/code&gt; 로 이전에 지정된 플러그인 목록을 지우십시오 . 이것은 명령 행에서 &lt;code&gt;-fplugin&lt;/code&gt; 옵션을 제거 할 수 없는 GHCi에서 유용 합니다. 대신 &lt;code&gt;:set -fclear-plugins&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffee99c0945047090206f8990265200cbc624e46" translate="yes" xml:space="preserve">
          <source>Clear the package db stack.</source>
          <target state="translated">패키지 DB 스택을 지우십시오.</target>
        </trans-unit>
        <trans-unit id="d480e0ec83525208c67c6460dd75891a7ca91e71" translate="yes" xml:space="preserve">
          <source>Clear the screen, and move the cursor to the upper left.</source>
          <target state="translated">화면을 지우고 커서를 왼쪽 상단으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="dc3e61dff076245afbb13dc5197f67c8287830f6" translate="yes" xml:space="preserve">
          <source>ClockTick</source>
          <target state="translated">ClockTick</target>
        </trans-unit>
        <trans-unit id="eee1c2870c3b40065a4220926d03eaeb0e857d08" translate="yes" xml:space="preserve">
          <source>Clone a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;: similar to dupTChan, but the cloned channel starts with the same content available as the original channel.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 복제 : dupTChan 과 유사하지만 복제 된 채널은 원래 채널과 동일한 컨텐츠로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5d1cfcac4faffd2b08657d148dbd22de938d3212" translate="yes" xml:space="preserve">
          <source>Close a file descriptor in a concurrency-safe way (GHC only). If you are using &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; to perform blocking I/O, you &lt;em&gt;must&lt;/em&gt; use this function to close file descriptors, or blocked threads may not be woken.</source>
          <target state="translated">동시성 안전 방식으로 파일 디스크립터를 닫습니다 (GHC 만 해당). 당신이 사용하는 경우 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; 을 내가 차단 수행 / O, 당신은 &lt;em&gt;해야한다&lt;/em&gt; 가까운 파일 설명이 기능을 사용하거나 차단 된 스레드를 깨우지되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc87ec5b0ef750d4f2e2d9ec9a9ffcf65a6c4a96" translate="yes" xml:space="preserve">
          <source>Close a file descriptor in a concurrency-safe way (GHC only). If you are using &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; to perform blocking I/O, you &lt;em&gt;must&lt;/em&gt; use this function to close file descriptors, or blocked threads may not be woken.</source>
          <target state="translated">동시성 안전 방식으로 파일 디스크립터를 닫습니다 (GHC 만 해당). 당신이 사용하는 경우 &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitRead&quot;&gt;threadWaitRead&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadWaitWrite&quot;&gt;threadWaitWrite&lt;/a&gt;&lt;/code&gt; 을 내가 차단 수행 / O, 당신은 &lt;em&gt;해야한다&lt;/em&gt; 가까운 파일 설명이 기능을 사용하거나 차단 된 스레드를 깨우지되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9092cf5ca26659c0b2af9e5b4531d24f8f6350d" translate="yes" xml:space="preserve">
          <source>Close a file descriptor in a race-safe way.</source>
          <target state="translated">안전한 레이스 방식으로 파일 디스크립터를 닫습니다.</target>
        </trans-unit>
        <trans-unit id="9d5c798e0344f77d1c996e5e81ff8d2b98453475" translate="yes" xml:space="preserve">
          <source>Close all file descriptors except stdin, stdout and stderr in the new process (on Windows, only works if std_in, std_out, and std_err are all Inherit). This implementation will call close an every fd from 3 to the maximum of open files, which can be slow for high maximum of open files.</source>
          <target state="translated">새 프로세스에서 stdin, stdout 및 stderr을 제외한 모든 파일 디스크립터를 닫으십시오 (Windows의 경우 std_in, std_out 및 std_err가 모두 상속인 경우에만 작동 함). 이 구현은 3에서 최대 열린 파일까지 fd마다 닫기를 호출하며, 최대 열린 파일의 경우 느려질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98c3aa307a0312c2e11b280654b2f1d4079df142" translate="yes" xml:space="preserve">
          <source>Close the stream's file descriptor without passing a Handle. On POSIX systems this may lead to strange behavior in the child process because attempting to read or write after the file has been closed throws an error. This should only be used with child processes that don't use the file descriptor at all. If you wish to ignore the child process's output you should either create a pipe and drain it manually or pass a &lt;code&gt;Handle&lt;/code&gt; that writes to &lt;code&gt;/dev/null&lt;/code&gt;.</source>
          <target state="translated">Handle을 전달하지 않고 스트림의 파일 설명자를 닫습니다. POSIX 시스템에서 파일이 닫힌 후 읽거나 쓰려고하면 오류가 발생하기 때문에 자식 프로세스에서 이상한 동작이 발생할 수 있습니다. 파일 디스크립터를 전혀 사용하지 않는 하위 프로세스에만 사용해야합니다. 자식 프로세스의 출력을 무시하려면 파이프를 만들어 수동으로 배출하거나 &lt;code&gt;/dev/null&lt;/code&gt; 에 쓰는 &lt;code&gt;Handle&lt;/code&gt; 을 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2ea2af70fc138f26f348cf6dad01ed75575e4e50" translate="yes" xml:space="preserve">
          <source>Close this file descriptor. May throw an exception if this is an invalid descriptor.</source>
          <target state="translated">이 파일 기술자를 닫습니다. 이 설명이 잘못된 경우 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="811752522d6efa2e6106b3e14a2e8c400418d872" translate="yes" xml:space="preserve">
          <source>CloseOnExec</source>
          <target state="translated">CloseOnExec</target>
        </trans-unit>
        <trans-unit id="74f5110afd9e5ed8f7ed4ee3f0d820b8ae840226" translate="yes" xml:space="preserve">
          <source>ClosePunctuation</source>
          <target state="translated">ClosePunctuation</target>
        </trans-unit>
        <trans-unit id="b5f942f4945ccd4503e37185b81abe3813c6153c" translate="yes" xml:space="preserve">
          <source>Closed type family declarations are permitted as in normal Haskell. They can also be given abstractly, as in the following example:</source>
          <target state="translated">폐쇄 형 패밀리 선언은 일반적인 Haskell에서와 같이 허용됩니다. 다음 예제와 같이 추상적으로 제공 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9415135252407e489e4bef80489a80b7345ea075" translate="yes" xml:space="preserve">
          <source>Closed type family instances are subject to the same rules:</source>
          <target state="translated">닫힌 유형 패밀리 인스턴스에는 동일한 규칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="a22f8edc9ec00c1253daf3abe643715855ef7b2d" translate="yes" xml:space="preserve">
          <source>ClosedHandle</source>
          <target state="translated">ClosedHandle</target>
        </trans-unit>
        <trans-unit id="88cbb0e9b3665b84e68912220d84f4ccce482b9f" translate="yes" xml:space="preserve">
          <source>Closing files</source>
          <target state="translated">파일 닫기</target>
        </trans-unit>
        <trans-unit id="6eff27329154e48d2497e2761cfc78ac4c290992" translate="yes" xml:space="preserve">
          <source>CmdSpec</source>
          <target state="translated">CmdSpec</target>
        </trans-unit>
        <trans-unit id="00c9ebb79d485779a8695c6f65000dd203007211" translate="yes" xml:space="preserve">
          <source>Cmm dumps don&amp;rsquo;t include unreachable blocks since we print blocks in reverse post-order.</source>
          <target state="translated">Cmm 덤프는 역순으로 블록을 인쇄하므로 도달 할 수없는 블록은 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a72146b8b9af5c3ceb4aefd17f4f09c46ccaf1d2" translate="yes" xml:space="preserve">
          <source>CmpNat</source>
          <target state="translated">CmpNat</target>
        </trans-unit>
        <trans-unit id="af349cec81bbf377eb1d1b8aa70308944b0eb74a" translate="yes" xml:space="preserve">
          <source>CmpSymbol</source>
          <target state="translated">CmpSymbol</target>
        </trans-unit>
        <trans-unit id="c03c2f517bd68402abc80b64bf3c4c63c6929f29" translate="yes" xml:space="preserve">
          <source>Cn: Other, Not Assigned</source>
          <target state="translated">Cn : 기타, 할당되지 않음</target>
        </trans-unit>
        <trans-unit id="54221ba418721739a8ff14e82be112ff09a0e22b" translate="yes" xml:space="preserve">
          <source>Co: Other, Private Use</source>
          <target state="translated">공동 : 기타, 개인 사용</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="416b4b5cbe12f3e7317518b4f66b2407e361a13f" translate="yes" xml:space="preserve">
          <source>Code coverage tools allow a programmer to determine what parts of their code have been actually executed, and which parts have never actually been invoked. GHC has an option for generating instrumented code that records code coverage as part of the Haskell Program Coverage (HPC) toolkit, which is included with GHC. HPC tools can be used to render the generated code coverage information into human understandable format.</source>
          <target state="translated">코드 커버리지 도구를 사용하면 프로그래머는 코드에서 실제로 실행 된 부분과 실제로 호출 된 부분을 확인할 수 있습니다. GHC에는 GHC에 포함 된 Haskell Program Coverage (HPC) 툴킷의 일부로 코드 적용 범위를 기록하는 인스트루먼트 된 코드 생성 옵션이 있습니다. HPC 도구를 사용하여 생성 된 코드 적용 범위 정보를 사람이 이해할 수있는 형식으로 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d84ad6878edb87ffc63bd03d4c4722b820998eb1" translate="yes" xml:space="preserve">
          <source>Code duplication is common in instance declarations. A familiar pattern is lifting operations over an &lt;code&gt;Applicative&lt;/code&gt; functor. Instead of having catch-all instances for &lt;code&gt;f a&lt;/code&gt; which overlap with all other such instances, like so:</source>
          <target state="translated">코드 복제는 인스턴스 선언에서 일반적입니다. 친숙한 패턴은 &lt;code&gt;Applicative&lt;/code&gt; 케이 티브 펑터 에 대한 작업을 해제하는 것입니다 . 다음 과 같이 다른 모든 인스턴스 와 겹치는 &lt;code&gt;f a&lt;/code&gt; 대한 catch-all 인스턴스를 갖는 대신 :</target>
        </trans-unit>
        <trans-unit id="f60f36f4db67f21e71a72761d315435a9c529b04" translate="yes" xml:space="preserve">
          <source>Code point</source>
          <target state="translated">코드 포인트</target>
        </trans-unit>
        <trans-unit id="43c3c1202b40acaa8c60a0b568b196bc4472756d" translate="yes" xml:space="preserve">
          <source>Code that must be here for accessibility</source>
          <target state="translated">접근성을 위해 여기에 있어야하는 코드</target>
        </trans-unit>
        <trans-unit id="19853b6a9cc434dab30c8be6a98b0608be4cba57" translate="yes" xml:space="preserve">
          <source>CodePage</source>
          <target state="translated">CodePage</target>
        </trans-unit>
        <trans-unit id="26d60e31d9c3a523558e2dc242bf13dbf3396f76" translate="yes" xml:space="preserve">
          <source>CodingFailureMode</source>
          <target state="translated">CodingFailureMode</target>
        </trans-unit>
        <trans-unit id="41b57a1263ef8dd69abac21bfccbecfd18393172" translate="yes" xml:space="preserve">
          <source>CodingProgress</source>
          <target state="translated">CodingProgress</target>
        </trans-unit>
        <trans-unit id="d9ad8925f5fe3abf0c399e351d2f7304eb9b1b5e" translate="yes" xml:space="preserve">
          <source>Coerce a stable pointer to an address. No guarantees are made about the resulting value, except that the original stable pointer can be recovered by &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt;. In particular, the address may not refer to an accessible memory location and any attempt to pass it to the member functions of the class &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; leads to undefined behaviour.</source>
          <target state="translated">주소에 대한 안정적인 포인터를 강제하십시오. &lt;code&gt;&lt;a href=&quot;foreign-stableptr#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt; 로 원래 안정 포인터를 복구 할 수 있다는 점을 제외하고 결과 값에 대해 보장되지 않습니다 . 특히, 주소는 액세스 가능한 메모리 위치를 나타내지 않을 수 있으며이를 &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; 클래스의 멤버 함수에 전달하려는 시도 는 정의되지 않은 동작을 유발합니다.</target>
        </trans-unit>
        <trans-unit id="f3a753242e593c3cac1ec904eafd7f1233ed77c5" translate="yes" xml:space="preserve">
          <source>Coerce a stable pointer to an address. No guarantees are made about the resulting value, except that the original stable pointer can be recovered by &lt;code&gt;&lt;a href=&quot;ghc-stable#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt;. In particular, the address may not refer to an accessible memory location and any attempt to pass it to the member functions of the class &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; leads to undefined behaviour.</source>
          <target state="translated">주소에 대한 안정적인 포인터를 강제하십시오. &lt;code&gt;&lt;a href=&quot;ghc-stable#v:castPtrToStablePtr&quot;&gt;castPtrToStablePtr&lt;/a&gt;&lt;/code&gt; 로 원래 안정 포인터를 복구 할 수 있다는 점을 제외하고 결과 값에 대해 보장되지 않습니다 . 특히, 주소는 액세스 가능한 메모리 위치를 나타내지 않을 수 있으며이를 &lt;code&gt;&lt;a href=&quot;foreign-storable#v:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; 클래스의 멤버 함수에 전달하려는 시도 는 정의되지 않은 동작을 유발합니다.</target>
        </trans-unit>
        <trans-unit id="805b3ca6eb96ac39480847af7bc0df22ba567c79" translate="yes" xml:space="preserve">
          <source>Coerce a value from one type to another, bypassing the type-checker.</source>
          <target state="translated">유형 검사기를 우회하여 한 유형에서 다른 유형으로 값을 강제합니다.</target>
        </trans-unit>
        <trans-unit id="ca19423ba5b20dbdc916f5f8a3dc500a52cd36db" translate="yes" xml:space="preserve">
          <source>Coerce directly from address to int.</source>
          <target state="translated">주소에서 int로 직접 강제 변환</target>
        </trans-unit>
        <trans-unit id="a4633d6025b85dfbf4ccf830e7d211bd0817e137" translate="yes" xml:space="preserve">
          <source>Coerce directly from int to address.</source>
          <target state="translated">int에서 주소로 직접 강제 변환합니다.</target>
        </trans-unit>
        <trans-unit id="c72f3c4e38a830abbf4c0149569760714debb495" translate="yes" xml:space="preserve">
          <source>Coercible</source>
          <target state="translated">Coercible</target>
        </trans-unit>
        <trans-unit id="a809433cf66e2c59e60de4aa71c982ddad377c2c" translate="yes" xml:space="preserve">
          <source>Coercion</source>
          <target state="translated">Coercion</target>
        </trans-unit>
        <trans-unit id="52d7ba5fbed6b59cde2f362b70b06b964ac9754e" translate="yes" xml:space="preserve">
          <source>Collect type and location information after loading modules. The commands &lt;a href=&quot;#ghci-cmd-:all-types&quot;&gt;&lt;code&gt;:all-types&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:loc-at&quot;&gt;&lt;code&gt;:loc-at&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt;&lt;code&gt;:type-at&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ghci-cmd-:uses&quot;&gt;&lt;code&gt;:uses&lt;/code&gt;&lt;/a&gt; require &lt;code&gt;+c&lt;/code&gt; to be active.</source>
          <target state="translated">모듈을로드 한 후 유형 및 위치 정보를 수집하십시오. 명령 &lt;a href=&quot;#ghci-cmd-:all-types&quot;&gt; &lt;code&gt;:all-types&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:loc-at&quot;&gt; &lt;code&gt;:loc-at&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt; &lt;code&gt;:type-at&lt;/code&gt; &lt;/a&gt; , 그리고 &lt;a href=&quot;#ghci-cmd-:uses&quot;&gt; &lt;code&gt;:uses&lt;/code&gt; &lt;/a&gt; 필요 &lt;code&gt;+c&lt;/code&gt; 활성화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17a714fadd635197b2116c67227ed66f0ac0bcf5" translate="yes" xml:space="preserve">
          <source>CollectGCStats</source>
          <target state="translated">CollectGCStats</target>
        </trans-unit>
        <trans-unit id="32b4156b950cf504b11da81e465c1a2e42e07e67" translate="yes" xml:space="preserve">
          <source>Collecting errors</source>
          <target state="translated">오류 수집</target>
        </trans-unit>
        <trans-unit id="6efff0338c27974aea0535f726a3188e30ffd9f2" translate="yes" xml:space="preserve">
          <source>Collects the list of elements of a structure, from left to right.</source>
          <target state="translated">왼쪽에서 오른쪽으로 구조의 요소 목록을 수집합니다.</target>
        </trans-unit>
        <trans-unit id="1d0c8304baedcf8e3a78982c2e7c0b04622bf2a0" translate="yes" xml:space="preserve">
          <source>Color</source>
          <target state="translated">Color</target>
        </trans-unit>
        <trans-unit id="65ba00e95e60fb8971e699c771908e7c41d91624" translate="yes" xml:space="preserve">
          <source>Column</source>
          <target state="translated">Column</target>
        </trans-unit>
        <trans-unit id="25e719594fe4392044efc80322d910ef4492ead1" translate="yes" xml:space="preserve">
          <source>Combinators</source>
          <target state="translated">Combinators</target>
        </trans-unit>
        <trans-unit id="30d04e0fa9775766030300ce1babf8c3dc0c01f4" translate="yes" xml:space="preserve">
          <source>Combine</source>
          <target state="translated">Combine</target>
        </trans-unit>
        <trans-unit id="e3a781ea78ec285c4adbcbafd96b9cecd3645555" translate="yes" xml:space="preserve">
          <source>Combine the elements of a structure using a monoid.</source>
          <target state="translated">단일체를 사용하여 구조의 요소를 결합하십시오.</target>
        </trans-unit>
        <trans-unit id="326743f99b0787ac5e15cb067df9da8c084bb783" translate="yes" xml:space="preserve">
          <source>Combine two paths with a path separator. If the second path starts with a path separator or a drive letter, then it returns the second. The intention is that &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; will access the same file as &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt;.</source>
          <target state="translated">두 경로를 경로 구분 기호와 결합하십시오. 두 번째 경로가 경로 구분 기호 나 드라이브 문자로 시작하면 두 번째 경로가 반환됩니다. 의도이다 &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; 과 같은 파일에 액세스 &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="078baed7b6f96f5ac4bcae9dd0fd976c0796a4ed" translate="yes" xml:space="preserve">
          <source>Combine two paths with a path separator. If the second path starts with a path separator or a drive letter, then it returns the second. The intention is that &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; will access the same file as &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt;.</source>
          <target state="translated">두 경로를 경로 구분 기호와 결합하십시오. 두 번째 경로가 경로 구분 기호 나 드라이브 문자로 시작하면 두 번째 경로가 반환됩니다. 의도이다 &lt;code&gt;readFile (dir &lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt; file)&lt;/code&gt; 과 같은 파일에 액세스 &lt;code&gt;setCurrentDirectory dir; readFile file&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d371749c69756d64263bf1edcd9544ba068d339a" translate="yes" xml:space="preserve">
          <source>Combined allocation and marshalling</source>
          <target state="translated">결합 된 할당 및 마샬링</target>
        </trans-unit>
        <trans-unit id="8c2bb286238fa0676a23f350beb14a91d4f1d379" translate="yes" xml:space="preserve">
          <source>Combined size of the filled and free space in the buffer.</source>
          <target state="translated">버퍼에서 채워진 여유 공간의 결합 된 크기.</target>
        </trans-unit>
        <trans-unit id="225d5977d8f87a56a27787ccff7686552cc76d19" translate="yes" xml:space="preserve">
          <source>Combined:</source>
          <target state="translated">Combined:</target>
        </trans-unit>
        <trans-unit id="a3baedfb2d4f69ab62a34902311439fb3ab84874" translate="yes" xml:space="preserve">
          <source>Combines all parsers in the specified list.</source>
          <target state="translated">지정된 목록의 모든 파서를 결합합니다.</target>
        </trans-unit>
        <trans-unit id="bc34b78e49e60ab0df88484977f09e92b544b526" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure in a left associative manner. Given a hypothetical function &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; yielding a list of all elements of a structure in order, the following would hold:</source>
          <target state="translated">구조의 요소를 왼쪽 연관 방식으로 결합합니다. 구조의 모든 요소 목록을 순서대로 생성 하는 가상 함수 &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; 주어지면 다음과 같은 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="21a0aac12edbd3a2453863bbf0b4359c2b22568b" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure in a right associative manner. Given a hypothetical function &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; yielding a list of all elements of a structure in order, the following would hold:</source>
          <target state="translated">구조의 요소를 올바른 연관 방식으로 결합합니다. 구조의 모든 요소 목록을 순서대로 생성 하는 가상 함수 &lt;code&gt;toEitherList :: p a b -&amp;gt; [Either a b]&lt;/code&gt; 주어지면 다음과 같은 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="b15766e5b013b4e0a383e1d326453ad986906241" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure using a monoid.</source>
          <target state="translated">단일체를 사용하여 구조의 요소를 결합합니다.</target>
        </trans-unit>
        <trans-unit id="0d6850410c88f0cb9f5c453c497ed9e8e06dbe3d" translate="yes" xml:space="preserve">
          <source>Combines the elements of a structure, given ways of mapping them to a common monoid.</source>
          <target state="translated">공통 monoid에 매핑하는 방법을 고려하여 구조의 요소를 결합합니다.</target>
        </trans-unit>
        <trans-unit id="234c965158d8a66f7b8c4eca636aa31129a64470" translate="yes" xml:space="preserve">
          <source>Combines the two file modes into one that contains modes that appear in either.</source>
          <target state="translated">두 파일 모드를 둘 중 하나에 나타나는 모드를 포함하는 하나로 결합합니다.</target>
        </trans-unit>
        <trans-unit id="687b44f5f4bdb58538f25c112637bc3fbc0d5a31" translate="yes" xml:space="preserve">
          <source>Combines two file modes into one that only contains modes that appear in both.</source>
          <target state="translated">두 파일 모드를 둘 다에 표시되는 모드 만 포함하는 하나의 파일 모드로 결합합니다.</target>
        </trans-unit>
        <trans-unit id="afd4c024368ab6b220ce67fd02f540f219d8c426" translate="yes" xml:space="preserve">
          <source>Combining &lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt;&lt;code&gt;-threaded&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt; is perfectly fine, and indeed it is possible to profile a program running on multiple processors with the RTS &lt;code&gt;-N ⟨x⟩&lt;/code&gt; option. &lt;a href=&quot;#id7&quot; id=&quot;id4&quot;&gt;3&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt; &lt;code&gt;-threaded&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 를&lt;/a&gt; 결합하는 것은 완벽하며, 실제로 RTS &lt;code&gt;-N ⟨x⟩&lt;/code&gt; 옵션을 사용하여 여러 프로세서에서 실행되는 프로그램을 프로파일 링 할 수 있습니다. &lt;a href=&quot;#id7&quot; id=&quot;id4&quot;&gt;삼&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d94bd5fd0802efbda98881240c8f23a765b78c53" translate="yes" xml:space="preserve">
          <source>Combining &lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt;&lt;code&gt;-threaded&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt; is perfectly fine, and indeed it is possible to profile a program running on multiple processors with the RTS &lt;code&gt;-N ⟨x⟩&lt;/code&gt; option. &lt;a href=&quot;#id7&quot; id=&quot;id4&quot;&gt;[3]&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;phases#ghc-flag--threaded&quot;&gt; &lt;code&gt;-threaded&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 를&lt;/a&gt; 결합하면 완벽하게 작동하며 실제로 RTS &lt;code&gt;-N ⟨x⟩&lt;/code&gt; 옵션을 사용하여 여러 프로세서에서 실행중인 프로그램을 프로파일 링 할 수 있습니다. &lt;a href=&quot;#id7&quot; id=&quot;id4&quot;&gt;[삼]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="932fc2151115c22c1df9b2b0817ce70119350f33" translate="yes" xml:space="preserve">
          <source>Combining documents</source>
          <target state="translated">문서 결합</target>
        </trans-unit>
        <trans-unit id="f6e3493fae4182acd953cf6f9e003d4e48be2f96" translate="yes" xml:space="preserve">
          <source>Combining marks such as accent characters usually need to follow another character before they become printable:</source>
          <target state="translated">악센트 문자와 같은 마크를 결합하면 일반적으로 다른 문자를 인쇄해야 인쇄 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="f6fe35e209171bf42b301a97ecb399ad5a56cfaf" translate="yes" xml:space="preserve">
          <source>Command line</source>
          <target state="translated">커맨드 라인</target>
        </trans-unit>
        <trans-unit id="c77b09f88b480c60ffb002c56bc70e50c802591d" translate="yes" xml:space="preserve">
          <source>Command-line arguments are either options or file names.</source>
          <target state="translated">명령 줄 인수는 옵션 또는 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="97746ca51646b7c285d878f982fc0bfe1f03e3b1" translate="yes" xml:space="preserve">
          <source>Command-line options begin with &lt;code&gt;-&lt;/code&gt;. They may &lt;em&gt;not&lt;/em&gt; be grouped: &lt;code&gt;-vO&lt;/code&gt; is different from &lt;code&gt;-v -O&lt;/code&gt;. Options need not precede filenames: e.g., &lt;code&gt;ghc *.o -o foo&lt;/code&gt;. All options are processed and then applied to all files; you cannot, for example, invoke &lt;code&gt;ghc -c -O1 Foo.hs -O2 Bar.hs&lt;/code&gt; to apply different optimisation levels to the files &lt;code&gt;Foo.hs&lt;/code&gt; and &lt;code&gt;Bar.hs&lt;/code&gt;.</source>
          <target state="translated">명령 줄 옵션은 &lt;code&gt;-&lt;/code&gt; 로 시작합니다 . 그들은 수 &lt;em&gt;없습니다&lt;/em&gt; 그룹화 : &lt;code&gt;-vO&lt;/code&gt; 다른 &lt;code&gt;-v -O&lt;/code&gt; . 옵션은 파일 이름 앞에 올 필요는 없습니다 (예 : &lt;code&gt;ghc *.o -o foo&lt;/code&gt; . 모든 옵션이 처리 된 후 모든 파일에 적용됩니다. 예를 들어 &lt;code&gt;ghc -c -O1 Foo.hs -O2 Bar.hs&lt;/code&gt; 를 호출 하여 &lt;code&gt;Foo.hs&lt;/code&gt; 및 &lt;code&gt;Bar.hs&lt;/code&gt; 파일에 다른 최적화 레벨을 적용 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="fc82dd68c96d012c0cbf3ea8ef6eea8a8608b8d0" translate="yes" xml:space="preserve">
          <source>Commands produce values, but (like monadic computations) may yield more than one value, or none, and may do other things as well. For the most part, familiarity with monadic notation is a good guide to using commands. However the values of expressions, even monadic ones, are determined by the values of the variables they contain; this is not necessarily the case for commands.</source>
          <target state="translated">명령은 값을 생성하지만 (모나드 계산과 같은) 둘 이상의 값을 생성하거나 전혀 생성하지 않을 수 있으며 다른 작업도 수행 할 수 있습니다. 대부분의 경우, 모나 딕 표기법에 익숙하면 명령 사용에 대한 유용한 안내서입니다. 그러나 표현의 값, 심지어 모나드 식도 포함하는 변수의 값에 의해 결정됩니다. 이것은 반드시 명령의 경우는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="3fd60311837613f6d5f756e7e2e7ad3c24dee6e4" translate="yes" xml:space="preserve">
          <source>Commands that query the package database (list, latest, describe, field, dot) operate on the list of databases specified by the flags &lt;code&gt;--user&lt;/code&gt;, &lt;code&gt;--global&lt;/code&gt;, and &lt;code&gt;--package-db&lt;/code&gt;. If none of these flags are given, the default is &lt;code&gt;--global --user&lt;/code&gt;.</source>
          <target state="translated">패키지 데이터베이스 (list, latest, describe, field, dot)를 쿼리하는 명령은 &lt;code&gt;--user&lt;/code&gt; , &lt;code&gt;--global&lt;/code&gt; 및 &lt;code&gt;--package-db&lt;/code&gt; 플래그로 지정된 데이터베이스 목록에서 작동합니다 . 이러한 플래그가 없으면 기본값은 &lt;code&gt;--global --user&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="49214ebc6100ebd00f552b691f4d58c0630ce7ce" translate="yes" xml:space="preserve">
          <source>Commentary</source>
          <target state="translated">Commentary</target>
        </trans-unit>
        <trans-unit id="fa3cebfbf6f771693249fc7ce6a3c38aa0b23801" translate="yes" xml:space="preserve">
          <source>Comments are not treated properly</source>
          <target state="translated">댓글이 제대로 처리되지 않습니다</target>
        </trans-unit>
        <trans-unit id="afae993471ec7ce7a7be6045f0a41cf9022e3b08" translate="yes" xml:space="preserve">
          <source>Common &lt;code&gt;errno&lt;/code&gt; symbols</source>
          <target state="translated">공통 &lt;code&gt;errno&lt;/code&gt; 상징</target>
        </trans-unit>
        <trans-unit id="543b8b243671de8e71dfa53c7167226813d46006" translate="yes" xml:space="preserve">
          <source>Common Timer definitions shared between WinIO and RIO.</source>
          <target state="translated">WinIO와 RIO간에 공유되는 공통 타이머 정의.</target>
        </trans-unit>
        <trans-unit id="52343b241dc42a51fa6d140ac292e59f94917586" translate="yes" xml:space="preserve">
          <source>Common elements of &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt;. By analogy with &quot;head&quot; for type classes and type class instances as defined in &lt;em&gt;Type classes: an exploration of the design space&lt;/em&gt;, the &lt;code&gt;TypeFamilyHead&lt;/code&gt; is defined to be the elements of the declaration between &lt;code&gt;type family&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt;.</source>
          <target state="translated">의 공통 요소 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt; . 에 정의 된 타입의 클래스와 타입 클래스 인스턴스의 &quot;머리&quot;를 유추 &lt;em&gt;유형 클래스 : 설계 공간의 탐사&lt;/em&gt; 는 &lt;code&gt;TypeFamilyHead&lt;/code&gt; 는 사이 선언의 요소로 정의 된 &lt;code&gt;type family&lt;/code&gt; 및 &lt;code&gt;where&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="33a282e7465d506412ff779b9f08cd52c3d865ab" translate="yes" xml:space="preserve">
          <source>Common elements of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt;. By analogy with &quot;head&quot; for type classes and type class instances as defined in &lt;em&gt;Type classes: an exploration of the design space&lt;/em&gt;, the &lt;code&gt;TypeFamilyHead&lt;/code&gt; is defined to be the elements of the declaration between &lt;code&gt;type family&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt;.</source>
          <target state="translated">의 공통 요소 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:OpenTypeFamilyD&quot;&gt;OpenTypeFamilyD&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:ClosedTypeFamilyD&quot;&gt;ClosedTypeFamilyD&lt;/a&gt;&lt;/code&gt; . 에 정의 된 타입의 클래스와 타입 클래스 인스턴스의 &quot;머리&quot;를 유추 &lt;em&gt;유형 클래스 : 설계 공간의 탐사&lt;/em&gt; 는 &lt;code&gt;TypeFamilyHead&lt;/code&gt; 는 사이 선언의 요소로 정의 된 &lt;code&gt;type family&lt;/code&gt; 및 &lt;code&gt;where&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02182decb305de8a5b5b4ef5b825077aa338c104" translate="yes" xml:space="preserve">
          <source>Common examples of lazy corecursive reduction are functions that map and flatten a structure to a lazy stream of result values, i.e. an iterator over the transformed input elements. In such cases, it is important to choose a &lt;code&gt;Foldable&lt;/code&gt; method that is lazy in the tail of the structure, such as &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt;, if the result &lt;code&gt;Monoid&lt;/code&gt; has a lazy &lt;code&gt;&lt;a href=&quot;data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; as with e.g. ByteString Builders).</source>
          <target state="translated">lazy corecursive reduction의 일반적인 예는 구조를 결과 값의 지연 스트림 (예 : 변환 된 입력 요소에 대한 반복기)에 매핑하고 평면화하는 함수입니다. 이러한 경우에, 그것을 선택하는 것이 중요 &lt;code&gt;Foldable&lt;/code&gt; 같은 구조의 꼬리 게으름 방법 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; (또는 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldMap&quot;&gt;foldMap&lt;/a&gt;&lt;/code&gt; 결과 경우 &lt;code&gt;Monoid&lt;/code&gt; 게으른 갖는다 &lt;code&gt;&lt;a href=&quot;data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; 예 ByteString 빌더 등 참조).</target>
        </trans-unit>
        <trans-unit id="d0057c61d2235d4bfb85a3aca60642905fab2385" translate="yes" xml:space="preserve">
          <source>Common examples of strict recursive reduction are the various &lt;em&gt;aggregate&lt;/em&gt; functions, like &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-foldable#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-foldable#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;, as well as more complex summaries such as frequency counts. These functions return only a single value after processing the entire input structure. In such cases, lazy processing of the tail of the input structure is generally not only unnecessary, but also inefficient. Thus, these and similar folds should be implemented in terms of strict left-associative &lt;code&gt;Foldable&lt;/code&gt; methods (typically &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;`) to perform an efficient reduction in constant space.</source>
          <target state="translated">엄격한 재귀 감소의 일반적인 예는 &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-foldable#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-foldable#v:length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 와 같은 다양한 &lt;em&gt;집계&lt;/em&gt; 함수 와 빈도 수와 같은 더 복잡한 요약입니다. 이러한 함수는 전체 입력 구조를 처리 한 후 단일 값만 반환합니다. 이러한 경우 입력 구조의 꼬리를 지연 처리하는 것은 일반적으로 불필요 할뿐만 아니라 비효율적입니다. 따라서 이러한 폴드와 유사한 폴드는 일정한 공간에서 효율적인 축소를 수행하기 위해 엄격한 왼쪽 연관 &lt;code&gt;Foldable&lt;/code&gt; 방법 (일반적으로 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ` )의 관점에서 구현되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="b59ec1942d8e9f013706dc9a24e9eb5c726a306b" translate="yes" xml:space="preserve">
          <source>Common formats</source>
          <target state="translated">일반적인 형식</target>
        </trans-unit>
        <trans-unit id="e931eda41ccdc6c79825f108209c068d4815ee76" translate="yes" xml:space="preserve">
          <source>Common stream fusion functionality for text.</source>
          <target state="translated">텍스트에 대한 일반적인 스트림 융합 기능.</target>
        </trans-unit>
        <trans-unit id="c9c7cbee5c9989529ec5925cc2476349c2d639f1" translate="yes" xml:space="preserve">
          <source>Common uses of &lt;code&gt;&lt;a href=&quot;control-monad#v:guard&quot;&gt;guard&lt;/a&gt;&lt;/code&gt; include conditionally signaling an error in an error monad and conditionally rejecting the current choice in an &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt;-based parser.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:guard&quot;&gt;guard&lt;/a&gt;&lt;/code&gt; 일반적인 사용 에는 오류 모나드에서 오류를 조건부로 시그널링하고 &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; 기반 구문 분석기 에서 현재 선택을 조건부로 거부하는 것이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="3a797cab5e9f4cdef8a5b261c31c94ac959fed24" translate="yes" xml:space="preserve">
          <source>Commonly used character parsers.</source>
          <target state="translated">일반적으로 사용되는 문자 파서.</target>
        </trans-unit>
        <trans-unit id="6dbc52fcaf742bd3fb1fe8be15c8803b20c2641d" translate="yes" xml:space="preserve">
          <source>Commonly used generic combinators.</source>
          <target state="translated">일반적으로 사용되는 일반 결합기.</target>
        </trans-unit>
        <trans-unit id="8b3636e1e55923a26c05e64ff5b55a880d9b28d5" translate="yes" xml:space="preserve">
          <source>Communication abstractions</source>
          <target state="translated">통신 추상화</target>
        </trans-unit>
        <trans-unit id="1a91068e8c37f76d27ba59ed8c8586a0c6fbdc02" translate="yes" xml:space="preserve">
          <source>Commutativity:</source>
          <target state="translated">Commutativity:</target>
        </trans-unit>
        <trans-unit id="11f0c32cc3e9b111d748fe5c3c72b6fa336d6a63" translate="yes" xml:space="preserve">
          <source>Comp1</source>
          <target state="translated">Comp1</target>
        </trans-unit>
        <trans-unit id="a613abf47784201711cd3857151c6baaf8c38146" translate="yes" xml:space="preserve">
          <source>Compact your data:</source>
          <target state="translated">데이터 압축 :</target>
        </trans-unit>
        <trans-unit id="de66cb0fded4835d2eef3e5c6acbf67820c3bab9" translate="yes" xml:space="preserve">
          <source>Compact#</source>
          <target state="translated">Compact#</target>
        </trans-unit>
        <trans-unit id="2e688d1607bf5b299794bf9babefe5b6b5b64725" translate="yes" xml:space="preserve">
          <source>Compaction doesn&amp;rsquo;t currently work when a single generation is requested using the &lt;code&gt;-G1&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;-G1&lt;/code&gt; 옵션을 사용하여 단일 세대를 요청하면 압축이 현재 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2bd1ace8f92aa24691490f39739111ced50cae7a" translate="yes" xml:space="preserve">
          <source>Compaction found an object that cannot be compacted. Functions cannot be compacted, nor can mutable objects or pinned objects. See &lt;code&gt;&lt;a href=&quot;ghc-compact#v:compact&quot;&gt;compact&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">압축으로 압축 할 수없는 개체가 발견되었습니다. 함수는 압축 될 수 없으며 변경 가능한 객체 나 고정 된 객체도 아닙니다. &lt;code&gt;&lt;a href=&quot;ghc-compact#v:compact&quot;&gt;compact&lt;/a&gt;&lt;/code&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="1d94473fce37a944f8d15f4b44d1a7dc05875cc1" translate="yes" xml:space="preserve">
          <source>CompactionFailed</source>
          <target state="translated">CompactionFailed</target>
        </trans-unit>
        <trans-unit id="084ff497f0c5a4e86fea1ec11bf4997b88426625" translate="yes" xml:space="preserve">
          <source>Compare and swap on a word-sized and aligned memory location.</source>
          <target state="translated">단어 크기의 정렬 된 메모리 위치에서 비교하고 교체합니다.</target>
        </trans-unit>
        <trans-unit id="21990c02465d86e704747fbbf82422b02cef7d1d" translate="yes" xml:space="preserve">
          <source>Compare and swap on a word-sized memory location.</source>
          <target state="translated">단어 크기의 메모리 위치에서 비교하고 교체합니다.</target>
        </trans-unit>
        <trans-unit id="b5caa09841cf5ce42f4036c793d72ae158366c9a" translate="yes" xml:space="preserve">
          <source>Compare portions of two arrays for equality. No bounds checking is performed.</source>
          <target state="translated">두 배열의 일부가 동일한 지 비교하십시오. 경계 검사가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="220dbf8ed8f5a2b31430fba7a2177ab329aca604" translate="yes" xml:space="preserve">
          <source>Compare the two (identical) definitions for examples &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;; they are both legal whether or not &lt;code&gt;a&lt;/code&gt; is already in scope. They differ in that &lt;em&gt;if&lt;/em&gt;&lt;code&gt;a&lt;/code&gt; is already in scope, the signature constrains the pattern, rather than the pattern binding the variable.</source>
          <target state="translated">예제 &lt;code&gt;f&lt;/code&gt; , &lt;code&gt;g&lt;/code&gt; 에 대한 두 개의 (동일한) 정의를 비교하십시오 . 그들은 법적 여부를 모두 &lt;code&gt;a&lt;/code&gt; 범위를 이미 사용 중입니다. &lt;code&gt;a&lt;/code&gt; 가 이미 범위 내에 &lt;em&gt;있으면&lt;/em&gt; 서명이 변수를 바인딩하는 패턴이 아니라 패턴을 제한 한다는 점이 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="d90e6f44ce6797f04a00ccbe4cd93b22fa26b700" translate="yes" xml:space="preserve">
          <source>Compare using &lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#v:compare&quot;&gt;compare&lt;/a&gt;&lt;/code&gt; 를 사용하여 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="2b7eb28a60393abac04cd18adf31dcf9dffe5e87" translate="yes" xml:space="preserve">
          <source>Compared to &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; sequences the event with respect to other IO actions.</source>
          <target state="translated">비교 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; 는 다른 IO 작업에 대한 이벤트를 시퀀스.</target>
        </trans-unit>
        <trans-unit id="9de0d9277c7d6078bdc2dca756a37281882f8c6b" translate="yes" xml:space="preserve">
          <source>Compared to &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; sequences the event with respect to other IO actions.</source>
          <target state="translated">비교 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; 는 다른 IO 작업에 대한 이벤트를 시퀀스.</target>
        </trans-unit>
        <trans-unit id="901dceed97e0d79a8a18894fb6d8ed7cf068a2e9" translate="yes" xml:space="preserve">
          <source>Compared to using timeouts, allocation limits don't count time spent blocked or in foreign calls.</source>
          <target state="translated">시간 제한을 사용하는 것과 비교하여 할당 제한은 차단 된 통화 나 외화에서 소비 한 시간을 계산하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2dfcf898a3bd4e011123eee87384ecb67d0919d4" translate="yes" xml:space="preserve">
          <source>Comparison</source>
          <target state="translated">Comparison</target>
        </trans-unit>
        <trans-unit id="e921574fc44623c29c053d6b7fd240a163624042" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a constraint.</source>
          <target state="translated">제약 조건으로 유형 수준의 자연 요소 비교</target>
        </trans-unit>
        <trans-unit id="aa8308777bcfcff2dec92d52b52443f203022452" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a function.</source>
          <target state="translated">함수로서의 유형 수준 내재의 비교.</target>
        </trans-unit>
        <trans-unit id="aa4ca01f57fa56be5fd2598712735854c62eb4c5" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a function. NOTE: The functionality for this function should be subsumed by &lt;code&gt;&lt;a href=&quot;ghc-typelits#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt;, so this might go away in the future. Please let us know, if you encounter discrepancies between the two.</source>
          <target state="translated">함수로서의 유형 수준 내재의 비교. 참고 :이 기능의 기능은 &lt;code&gt;&lt;a href=&quot;ghc-typelits#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt; 에 의해 포괄되어야 하므로 나중에 사라질 수 있습니다. 둘 사이에 불일치가 발생하면 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="eb65d9b6fe233325df5863a365593aaebc62c3ce" translate="yes" xml:space="preserve">
          <source>Comparison of type-level naturals, as a function. NOTE: The functionality for this function should be subsumed by &lt;code&gt;&lt;a href=&quot;ghc-typenats#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt;, so this might go away in the future. Please let us know, if you encounter discrepancies between the two.</source>
          <target state="translated">함수로서의 유형 수준 내재의 비교. 참고 :이 기능의 기능은 &lt;code&gt;&lt;a href=&quot;ghc-typenats#t:CmpNat&quot;&gt;CmpNat&lt;/a&gt;&lt;/code&gt; 에 의해 포괄되어야 하므로 나중에 사라질 수 있습니다. 둘 사이에 불일치가 발생하면 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="9e25b7c41fd0905eea4810870f0eab56fbd2824f" translate="yes" xml:space="preserve">
          <source>Comparison of type-level symbols, as a function.</source>
          <target state="translated">함수로서의 유형 레벨 기호 비교.</target>
        </trans-unit>
        <trans-unit id="97374173ce83d8875cee826b6127f78ede00427a" translate="yes" xml:space="preserve">
          <source>Comparison predicates</source>
          <target state="translated">비교 술어</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="61d1c1d0543a4be4801ed83bba18544ce52b12ca" translate="yes" xml:space="preserve">
          <source>Compat wrapper</source>
          <target state="translated">Compat 래퍼</target>
        </trans-unit>
        <trans-unit id="2cb53559d09ec4706b50627aafe05c3f74ccaf5c" translate="yes" xml:space="preserve">
          <source>Compatibility Notes</source>
          <target state="translated">호환성 노트</target>
        </trans-unit>
        <trans-unit id="9008b604eab95237fc4f922da57e81197f19a6c3" translate="yes" xml:space="preserve">
          <source>Compatibility also affects closed type families. When simplifying an application of a closed type family, GHC will select an equation only when it is sure that no incompatible previous equation will ever apply. Here are some examples:</source>
          <target state="translated">호환성은 폐쇄 형 패밀리에도 영향을줍니다. 폐쇄 형 패밀리의 응용을 단순화 할 때, GHC는 호환되지 않는 이전 방정식이 적용되지 않을 것으로 확신 할 때만 방정식을 선택합니다. 여기 몇 가지 예가 있어요.</target>
        </trans-unit>
        <trans-unit id="e46f047adaf9c1affb041ea1b7e209e0e6bb4f3d" translate="yes" xml:space="preserve">
          <source>Compatibility module for pre ghc-bignum code.</source>
          <target state="translated">ghc-bignum 이전 코드에 대한 호환성 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="08ce87af586a08b116960b3df6481bbd3bb52827" translate="yes" xml:space="preserve">
          <source>Compatibility with previous &lt;code&gt;deepseq&lt;/code&gt; versions</source>
          <target state="translated">이전 &lt;code&gt;deepseq&lt;/code&gt; 버전 과의 호환성</target>
        </trans-unit>
        <trans-unit id="986befebe402aca3d901c796be89790196522679" translate="yes" xml:space="preserve">
          <source>Compile Haskell 2010 language variant. Enables the following language extensions:</source>
          <target state="translated">Haskell 2010 언어 변형을 컴파일합니다. 다음 언어 확장을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="4a974edf66309c2d6908e505483c83f98fc68d89" translate="yes" xml:space="preserve">
          <source>Compile and run this program as before, and take a look at the new profiling results:</source>
          <target state="translated">이전과 같이이 프로그램을 컴파일하고 실행하고 새로운 프로파일 링 결과를 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="91ce6f974a8d3731fbe5eb1708d9cf19d31689d3" translate="yes" xml:space="preserve">
          <source>Compile and run this program as follows:</source>
          <target state="translated">다음과 같이이 프로그램을 컴파일하고 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="0c5321a6a5377746aa4249de3cd1656d0020532f" translate="yes" xml:space="preserve">
          <source>Compile in a sandbox, such as a chroot or similar container technology. Or simply as a user with very reduced system access.</source>
          <target state="translated">chroot 또는 유사한 컨테이너 기술과 같은 샌드 박스에서 컴파일하십시오. 또는 단순히 시스템 액세스가 매우 적은 사용자로서.</target>
        </trans-unit>
        <trans-unit id="6bf66e78bebd666b8a85fd7bd219a06b8cb74c07" translate="yes" xml:space="preserve">
          <source>Compile the program for profiling (&lt;a href=&quot;#prof-compiler-options&quot;&gt;Compiler options for profiling&lt;/a&gt;).</source>
          <target state="translated">프로파일 링을위한 프로그램을 컴파일하십시오 (프로파일 링 &lt;a href=&quot;#prof-compiler-options&quot;&gt;을위한 컴파일러 옵션&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="d151464167c933448d7efb45560269227175b8dd" translate="yes" xml:space="preserve">
          <source>Compile the program or library first the normal way, without &lt;a href=&quot;../profiling#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../profiling#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; &lt;/a&gt; 없이 일반적인 방법으로 프로그램이나 라이브러리를 먼저 컴파일하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad9a7464d9492dd9d47c62dcb7e5dcd686b01694" translate="yes" xml:space="preserve">
          <source>Compile the program or library first the normal way, without &lt;a href=&quot;profiling#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;profiling#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; &lt;/a&gt; 없이 프로그램이나 라이브러리를 일반적인 방식으로 컴파일하십시오 .</target>
        </trans-unit>
        <trans-unit id="a07000eb81b80056da99e252ad53cd685639acff" translate="yes" xml:space="preserve">
          <source>Compile to be part of unit (i.e. package) ⟨unit-id⟩</source>
          <target state="translated">유닛 (예 : 패키지)의 일부로 컴파일 ⟨unit-id⟩</target>
        </trans-unit>
        <trans-unit id="406aa8d8d6e870538104dd59f38e61ce717b8dcc" translate="yes" xml:space="preserve">
          <source>Compile untrusted code with the &lt;code&gt;-XSafe&lt;/code&gt; flag being specified on the command line. This will ensure that modifications to the source being compiled can&amp;rsquo;t disable the use of the Safe Language as the command line flag takes precedence over a source level pragma.</source>
          <target state="translated">명령 행에 &lt;code&gt;-XSafe&lt;/code&gt; 플래그를 지정 하여 신뢰할 수없는 코드를 컴파일 하십시오. 이렇게하면 명령 행 플래그가 소스 레벨 pragma보다 우선하므로 컴파일되는 소스를 수정해도 안전 언어를 사용할 수 없게됩니다.</target>
        </trans-unit>
        <trans-unit id="ec7b8dffbe107a7ba50c4ccbbe694e5b7570a02d" translate="yes" xml:space="preserve">
          <source>Compile using Haskell 98 language variant. Enables the following language extensions:</source>
          <target state="translated">Haskell 98 언어 변형을 사용하여 컴파일합니다. 다음 언어 확장을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="b244c4678b38e3b0409a58a3cf7cfd854b5606dc" translate="yes" xml:space="preserve">
          <source>Compile using the &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM code generator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM 코드 생성기를&lt;/a&gt; 사용하여 컴파일</target>
        </trans-unit>
        <trans-unit id="8c792691e745ba40eed571e6a8110896f1362a49" translate="yes" xml:space="preserve">
          <source>Compile via &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt; instead of using the native code generator. This will generally take slightly longer than the native code generator to compile. Produced code is generally the same speed or faster than the other two code generators. Compiling via LLVM requires LLVM&amp;rsquo;s &lt;strong&gt;opt&lt;/strong&gt; and &lt;strong&gt;llc&lt;/strong&gt; executables to be in &lt;code id=&quot;index-12&quot;&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">기본 코드 생성기를 사용하는 대신 &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt; 을 통해 컴파일하십시오 . 컴파일하는 데 일반적으로 네이티브 코드 생성기보다 약간 더 오래 걸립니다. 생성 된 코드는 일반적으로 다른 두 코드 생성기와 동일한 속도이거나 빠릅니다. LLVM을 통해 컴파일하려면 LLVM의 &lt;strong&gt;opt&lt;/strong&gt; 및 &lt;strong&gt;llc&lt;/strong&gt; 실행 파일이 &lt;code id=&quot;index-12&quot;&gt;PATH&lt;/code&gt; 에 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="6961a477bdd706ad87f613e9d4a0e5343e4bc1f4" translate="yes" xml:space="preserve">
          <source>Compile via &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt; instead of using the native code generator. This will generally take slightly longer than the native code generator to compile. Produced code is generally the same speed or faster than the other two code generators. Compiling via LLVM requires LLVM&amp;rsquo;s &lt;strong&gt;opt&lt;/strong&gt; and &lt;strong&gt;llc&lt;/strong&gt; executables to be in &lt;code id=&quot;index-13&quot;&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">네이티브 코드 생성기를 사용하는 대신 &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM&lt;/a&gt; 을 통해 컴파일 합니다. 일반적으로 컴파일하는 데 네이티브 코드 생성기보다 약간 더 오래 걸립니다. 생성 된 코드는 일반적으로 다른 두 코드 생성기보다 속도가 같거나 빠릅니다. LLVM을 통해 컴파일하려면 LLVM의 &lt;strong&gt;opt&lt;/strong&gt; 및 &lt;strong&gt;llc&lt;/strong&gt; 실행 파일이 &lt;code id=&quot;index-13&quot;&gt;PATH&lt;/code&gt; 에 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="500837f016a3885e4e93218e293318560780de99" translate="yes" xml:space="preserve">
          <source>Compile via LLVM:</source>
          <target state="translated">LLVM을 통한 컴파일 :</target>
        </trans-unit>
        <trans-unit id="a3a539c351c31c8ac1d823504bbbecbf3dfcd431" translate="yes" xml:space="preserve">
          <source>Compile with alignment checks for all info table dereferences.</source>
          <target state="translated">모든 정보 테이블 역 참조에 대한 정렬 검사로 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="b1c9f6541aa06984a2159522a866f0cc1f4dfb94" translate="yes" xml:space="preserve">
          <source>Compile with alignment checks for all info table dereferences. This can be useful when finding pointer tagging issues.</source>
          <target state="translated">모든 정보 테이블 역 참조에 대한 정렬 검사로 컴파일하십시오. 포인터 태그 문제를 찾을 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25cde5233438b79b38e53ab8e943382cef0ed33b" translate="yes" xml:space="preserve">
          <source>Compiling and executing untrusted code</source>
          <target state="translated">신뢰할 수없는 코드 컴파일 및 실행</target>
        </trans-unit>
        <trans-unit id="53e8702909d1ebc72da3ae47338c3a148da61147" translate="yes" xml:space="preserve">
          <source>Compiling it results in:</source>
          <target state="translated">컴파일하면 다음과 같은 결과가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b08f1ddb86984efef89d0d078f37bacde1a2fb02" translate="yes" xml:space="preserve">
          <source>Compiling this program with &lt;a href=&quot;#extension-NamedWildCards&quot;&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;/a&gt; (as well as &lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt;&lt;code&gt;PartialTypeSignatures&lt;/code&gt;&lt;/a&gt;) enabled produces the following error message reporting the inferred type of the named wildcard &lt;code&gt;_a&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-NamedWildCards&quot;&gt; &lt;code&gt;NamedWildCards&lt;/code&gt; &lt;/a&gt; (및 &lt;a href=&quot;#extension-PartialTypeSignatures&quot;&gt; &lt;code&gt;PartialTypeSignatures&lt;/code&gt; &lt;/a&gt; )를 사용 하여이 프로그램을 컴파일 하면 명명 된 와일드 카드 &lt;code&gt;_a&lt;/code&gt; 의 유추 된 유형을보고하는 다음 오류 메시지가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="d3117f2c03409f7cf1d821c695695c6c1fde32c7" translate="yes" xml:space="preserve">
          <source>Compiling this program with &lt;code&gt;-O&lt;/code&gt; results in &lt;code&gt;Hello&lt;/code&gt; to be printed, despite the fact that &lt;code&gt;evaluate&lt;/code&gt; should have bottomed. Compiling with &lt;code&gt;-O -fno-state-hack&lt;/code&gt; results in the exception one would expect.</source>
          <target state="translated">&lt;code&gt;-O&lt;/code&gt; 로이 프로그램을 컴파일하면 &lt;code&gt;evaluate&lt;/code&gt; 결과 가 바닥이 났음에도 불구하고 &lt;code&gt;Hello&lt;/code&gt; 가 인쇄 됩니다. &lt;code&gt;-O -fno-state-hack&lt;/code&gt; 으로 컴파일 하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fee1f536d4bdba15881aca78bd2bb046f0532526" translate="yes" xml:space="preserve">
          <source>Compiling this program without enabling &lt;a href=&quot;#extension-NamedWildCards&quot;&gt;&lt;code&gt;NamedWildCards&lt;/code&gt;&lt;/a&gt; produces the following error message complaining about the type variable &lt;code&gt;_a&lt;/code&gt; no matching the actual type &lt;code&gt;Bool&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-NamedWildCards&quot;&gt; &lt;code&gt;NamedWildCards&lt;/code&gt; &lt;/a&gt; 를 활성화하지 않고이 프로그램을 컴파일 하면 실제 변수 &lt;code&gt;Bool&lt;/code&gt; 과 일치하지 않는 &lt;code&gt;_a&lt;/code&gt; 유형 변수에 대해 다음과 같은 오류 메시지가 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="06099fdd18d60563ec395a192acb2b565f742e65" translate="yes" xml:space="preserve">
          <source>Compiling to object code inside GHCi is particularly useful if you are developing a compiled application, because the &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; command typically runs much faster than restarting GHC with &lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; from the command-line, because all the interface files are already cached in memory.</source>
          <target state="translated">모든 인터페이스 파일이 메모리에 이미 캐시되어 있기 때문에 &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt; 명령은 일반적으로 명령 줄에서 &lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt; 를 사용하여 GHC를 다시 시작하는 것보다 훨씬 빠르게 실행 되므로 컴파일 된 응용 프로그램을 개발하는 경우 GHCi 내에서 객체 코드로 컴파일하는 것이 특히 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="2ff255684a2277f806fcebf3fe338ed27857f350" translate="yes" xml:space="preserve">
          <source>Completion</source>
          <target state="translated">Completion</target>
        </trans-unit>
        <trans-unit id="41b9f20265bec93dd558616fa397b05adcbe3b67" translate="yes" xml:space="preserve">
          <source>CompletionFunc</source>
          <target state="translated">CompletionFunc</target>
        </trans-unit>
        <trans-unit id="10b26b96b1c573965f14a325ef88109f84be8e3b" translate="yes" xml:space="preserve">
          <source>Complex</source>
          <target state="translated">Complex</target>
        </trans-unit>
        <trans-unit id="c3ae08546f0e5973ea7d96b40a7d7971cb5462c7" translate="yes" xml:space="preserve">
          <source>Complex control structures, error handling, and creating co-routines.</source>
          <target state="translated">복잡한 제어 구조, 오류 처리 및 공동 루틴 생성</target>
        </trans-unit>
        <trans-unit id="01688b183b7e89599b6518bb4975bb3ea424e76f" translate="yes" xml:space="preserve">
          <source>Complex numbers are an algebraic type.</source>
          <target state="translated">복소수는 대수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="7611b3d644720e341343c4b145fe3d01e8fd3e09" translate="yes" xml:space="preserve">
          <source>Complex numbers.</source>
          <target state="translated">복소수</target>
        </trans-unit>
        <trans-unit id="9544f3a71921a13c33ee53a59e474880b679791a" translate="yes" xml:space="preserve">
          <source>Complexity: \( O (n * \log(m)) \), where \(m\) is the size of the first argument</source>
          <target state="translated">복잡성 : \ (O (n * \ log (m)) \), 여기서 \ (m \)은 첫 번째 인수의 크기입니다.</target>
        </trans-unit>
        <trans-unit id="2eabd12d8586aef1675b898dbd78deda13d2dc97" translate="yes" xml:space="preserve">
          <source>Complexity: \( O(n * \min(m,W)) \), where \(m\) is the size of the first argument</source>
          <target state="translated">복잡성 : \ (O (n * \ min (m, W)) \), 여기서 \ (m \)은 첫 번째 인수의 크기입니다.</target>
        </trans-unit>
        <trans-unit id="47da6f0838f083d3a01f384d483b468a305c5a2c" translate="yes" xml:space="preserve">
          <source>Compose</source>
          <target state="translated">Compose</target>
        </trans-unit>
        <trans-unit id="7bcb41ba4e19f1985f7e7cf393d8e66dfe864d2f" translate="yes" xml:space="preserve">
          <source>Compose two alternative STM actions (GHC only).</source>
          <target state="translated">두 가지 대체 STM 작업을 작성하십시오 (GHC 만 해당).</target>
        </trans-unit>
        <trans-unit id="8100607e5596f367342785baaf8eb8229db550d5" translate="yes" xml:space="preserve">
          <source>Composing &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; should be the identity on singleton/empty lists:</source>
          <target state="translated">작곡 &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; 을 함께 &lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; 은 싱글 / 빈리스트의 정체성을해야합니다 :</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="da818419137937903a1858853ac80f87ce89c6c3" translate="yes" xml:space="preserve">
          <source>Composition of functors</source>
          <target state="translated">펑터의 구성</target>
        </trans-unit>
        <trans-unit id="13a40f8de1b8a7eb274a7a72a88d8183b4d42cb7" translate="yes" xml:space="preserve">
          <source>Composition of functors.</source>
          <target state="translated">펑터의 구성.</target>
        </trans-unit>
        <trans-unit id="414cc4c73ae313a535588c63d3f1f05526178a19" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-environment#v:getFullArgs&quot;&gt;getFullArgs&lt;/a&gt;&lt;/code&gt; is the &quot;raw&quot; version of &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt;, similar to &lt;code&gt;argv&lt;/code&gt; in other languages. It returns a list of the program's command line arguments, starting with the program name, and including those normally eaten by the RTS (+RTS ... -RTS).</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-environment#v:getFullArgs&quot;&gt;getFullArgs&lt;/a&gt;&lt;/code&gt; 는 다른 언어의 &lt;code&gt;argv&lt;/code&gt; 와 비슷한 &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 의 &quot;원시&quot;버전입니다 . 프로그램 이름으로 시작하고 RTS에서 일반적으로 먹는 것을 포함하여 프로그램의 명령 행 인수 목록을 리턴합니다 (+ RTS ... -RTS).</target>
        </trans-unit>
        <trans-unit id="a062c1b66a07f883c944fa26db9ef0e1390c2371" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; makes handle &lt;code&gt;hdl&lt;/code&gt; closed. Before the computation finishes, if &lt;code&gt;hdl&lt;/code&gt; is writable its buffer is flushed as for &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt;. Performing &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; on a handle that has already been closed has no effect; doing so is not an error. All other operations on a closed handle will fail. If &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; fails for any reason, any further operations (apart from &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;) on the handle will still fail as if &lt;code&gt;hdl&lt;/code&gt; had been successfully closed.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 핸들 &lt;code&gt;hdl&lt;/code&gt; 을 닫습니다. 계산이 완료되기 전에 &lt;code&gt;hdl&lt;/code&gt; 이 쓰기 가능하면 버퍼는 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt; 와 같이 플러시됩니다 . 수행 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 을 이미 종료 된 핸들에 아무런 영향을주지 않습니다; 그렇게하는 것은 오류가 아닙니다. 닫힌 핸들에 대한 다른 모든 작업은 실패합니다. 경우 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 가 어떤 이유로 실패, (떨어져에서 더 이상 작업 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 핸들)은 여전히 것처럼 실패 &lt;code&gt;hdl&lt;/code&gt; 성공적으로 종료되었다.</target>
        </trans-unit>
        <trans-unit id="1a0f96d478fac21b58d80997f07ef016438eb9b6" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current buffering mode for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;hdl&lt;/code&gt; 현재 버퍼링 모드를 반환 &lt;code&gt;hdl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="93fc702197413fd9cf0453efd7545ca16dd892fd" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a character from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;, blocking until a character is available.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;hdl&lt;/code&gt; 관리하는 파일이나 채널의 문자를 읽어 &lt;code&gt;hdl&lt;/code&gt; 문자를 사용할 수있을 때까지 차단.</target>
        </trans-unit>
        <trans-unit id="b3ea4c07e03478e8df1258a6d00d5232fa206e40" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the list of characters corresponding to the unread portion of the channel or file managed by &lt;code&gt;hdl&lt;/code&gt;, which is put into an intermediate state, &lt;em&gt;semi-closed&lt;/em&gt;. In this state, &lt;code&gt;hdl&lt;/code&gt; is effectively closed, but items are read from &lt;code&gt;hdl&lt;/code&gt; on demand and accumulated in a special list returned by &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 &lt;code&gt;hdl&lt;/code&gt; 에 의해 관리되는 채널 또는 파일의 읽지 않은 부분에 해당하는 문자 목록을 반환합니다.이 목록은 중간 상태 인 &lt;em&gt;semi-closed로 설정&lt;/em&gt; 됩니다. 이 상태에서 &lt;code&gt;hdl&lt;/code&gt; 은 효과적으로 닫히지 만 요청시 &lt;code&gt;hdl&lt;/code&gt; 에서 항목을 읽고 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 이 리턴 한 특수 목록에 누적됩니다 .</target>
        </trans-unit>
        <trans-unit id="8ddb09fc7dbc5300dfd77b82562ad84e85308d89" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a line from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에서 라인을 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="e034dc0672d6460334d5992bda74221b0145923e" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current I/O position of &lt;code&gt;hdl&lt;/code&gt; as a value of the abstract type &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 반환의 현재 I / O 위치 &lt;code&gt;hdl&lt;/code&gt; 추상 형의 값으로 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8d0046166f9e6d4122802bb521c2c02515c40aa" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; returns the next character from the handle without removing it from the input buffer, blocking until a character is available.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; 는 입력 버퍼에서 문자를 제거하지 않고 핸들에서 다음 문자를 반환하여 문자를 사용할 수있을 때까지 차단합니다.</target>
        </trans-unit>
        <trans-unit id="c5e7bf72d6cbd9e1e6e59a9c1c754f4c447b3ce4" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl ch&lt;/code&gt; writes the character &lt;code&gt;ch&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;. Characters may be buffered if buffering is enabled for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl ch&lt;/code&gt; 는 문자 &lt;code&gt;ch&lt;/code&gt; 를 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에 씁니다 . &lt;code&gt;hdl&lt;/code&gt; 에 버퍼링이 사용 가능한 경우 문자가 버퍼링 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="858b261b3e7fc4abd46093960748e4d4805502c3" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 는 문자열 &lt;code&gt;s&lt;/code&gt; 를 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="559786c97768f1282ab9399178ca49d2850e6eee" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode i&lt;/code&gt; sets the position of handle &lt;code&gt;hdl&lt;/code&gt; depending on &lt;code&gt;mode&lt;/code&gt;. The offset &lt;code&gt;i&lt;/code&gt; is given in terms of 8-bit bytes.</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode i&lt;/code&gt; &lt;code&gt;mode&lt;/code&gt; 에 따라 핸들 &lt;code&gt;hdl&lt;/code&gt; 의 위치를 ​​설정 합니다 . 오프셋 &lt;code&gt;i&lt;/code&gt; 는 8 비트 바이트로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="68f0fbaa1f670d7c60a1c1516d3c37f8bbbd3b1a" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode&lt;/code&gt; sets the mode of buffering for handle &lt;code&gt;hdl&lt;/code&gt; on subsequent reads and writes.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode&lt;/code&gt; 는 후속 읽기 및 쓰기에서 핸들 &lt;code&gt;hdl&lt;/code&gt; 에 대한 버퍼링 모드를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="85e0d89d9ef8f280cace7df15993fd8c8a03cdde" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current position of the handle &lt;code&gt;hdl&lt;/code&gt;, as the number of bytes from the beginning of the file. The value returned may be subsequently passed to &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; to reposition the handle to the current position.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 핸들 &lt;code&gt;hdl&lt;/code&gt; 의 현재 위치를 파일의 시작부터 바이트 수로 리턴 합니다. 반환 된 값은 이후 핸들을 현재 위치로 재배치 하기 위해 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; 에 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="984e716b71d09a30ae98a342c122c61dcaf6fb9d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; waits until input is available on handle &lt;code&gt;hdl&lt;/code&gt;. It returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; as soon as input is available on &lt;code&gt;hdl&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if no input is available within &lt;code&gt;t&lt;/code&gt; milliseconds. Note that &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; waits until one or more full &lt;em&gt;characters&lt;/em&gt; are available, which means that it needs to do decoding, and hence may fail with a decoding error.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 는 핸들 &lt;code&gt;hdl&lt;/code&gt; 에서 입력을 사용할 수있을 때까지 기다립니다 . &lt;code&gt;hdl&lt;/code&gt; 에서 입력을 사용할 수있게되면 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환하고 , &lt;code&gt;t&lt;/code&gt; 밀리 초 내에 입력이 없으면 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 참고 것을 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 은 하나 개 이상의 전체 때까지 대기 &lt;em&gt;문자를&lt;/em&gt; 사용할 수 있습니다 그것은 디코딩 오류와 함께 실패 할 수 있습니다 따라서 디코딩 할 필요가, 그 어떤 수단.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fc82c6f8a8d504350e4c5428182b9899eef017fa" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;file mode&lt;/code&gt; allocates and returns a new, open handle to manage the file &lt;code&gt;file&lt;/code&gt;. It manages input if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt;, output if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt;, and both input and output if mode is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;file mode&lt;/code&gt; 는 파일 &lt;code&gt;file&lt;/code&gt; 을 관리하기 위해 새로운 열린 핸들을 할당하고 반환 합니다 . 경우 입력을 관리하는 &lt;code&gt;mode&lt;/code&gt; 이다 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt; 출력하는 경우, &lt;code&gt;mode&lt;/code&gt; 이다 &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt; 모드 인 경우, 양쪽의 입출력 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt; 이 .</target>
        </trans-unit>
        <trans-unit id="9859745e8dd6e608e7892b279fd0713c0dd4c9d8" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a character from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;, blocking until a character is available.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;hdl&lt;/code&gt; 관리하는 파일이나 채널의 문자를 읽어 &lt;code&gt;hdl&lt;/code&gt; 문자를 사용할 수있을 때까지 차단.</target>
        </trans-unit>
        <trans-unit id="8b5afc8336038a96086c74a0d7659e3af511e919" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the list of characters corresponding to the unread portion of the channel or file managed by &lt;code&gt;hdl&lt;/code&gt;, which is put into an intermediate state, &lt;em&gt;semi-closed&lt;/em&gt;. In this state, &lt;code&gt;hdl&lt;/code&gt; is effectively closed, but items are read from &lt;code&gt;hdl&lt;/code&gt; on demand and accumulated in a special list returned by &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 &lt;code&gt;hdl&lt;/code&gt; 에 의해 관리되는 채널 또는 파일의 읽지 않은 부분에 해당하는 문자 목록을 반환합니다.이 목록은 중간 상태 인 &lt;em&gt;semi-closed로 설정&lt;/em&gt; 됩니다. 이 상태에서 &lt;code&gt;hdl&lt;/code&gt; 은 효과적으로 닫히지 만 요청시 &lt;code&gt;hdl&lt;/code&gt; 에서 항목을 읽고 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 이 리턴 한 특수 목록에 누적됩니다 .</target>
        </trans-unit>
        <trans-unit id="196000078fd695d57daf6062cb233e1691317b4d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a line from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에서 라인을 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="0dbbac2e42edf5e29528cec77563dbae456ee29a" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl ch&lt;/code&gt; writes the character &lt;code&gt;ch&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;. Characters may be buffered if buffering is enabled for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl ch&lt;/code&gt; 는 문자 &lt;code&gt;ch&lt;/code&gt; 를 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에 씁니다 . &lt;code&gt;hdl&lt;/code&gt; 에 버퍼링이 사용 가능한 경우 문자가 버퍼링 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82bbf466cac23dd0b8ebc1be4c0964365a2c3bb7" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 는 문자열 &lt;code&gt;s&lt;/code&gt; 를 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="1022b5517638ab91a72ea2cb271baf16c1e1ec75" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; waits until input is available on handle &lt;code&gt;hdl&lt;/code&gt;. It returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; as soon as input is available on &lt;code&gt;hdl&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if no input is available within &lt;code&gt;t&lt;/code&gt; milliseconds. Note that &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; waits until one or more full &lt;em&gt;characters&lt;/em&gt; are available, which means that it needs to do decoding, and hence may fail with a decoding error.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 는 핸들 &lt;code&gt;hdl&lt;/code&gt; 에서 입력을 사용할 수있을 때까지 기다립니다 . &lt;code&gt;hdl&lt;/code&gt; 에서 입력을 사용할 수있게되면 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환하고 , &lt;code&gt;t&lt;/code&gt; 밀리 초 내에 입력이 없으면 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 참고 것을 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 은 하나 개 이상의 전체 때까지 대기 &lt;em&gt;문자를&lt;/em&gt; 사용할 수 있습니다 그것은 디코딩 오류와 함께 실패 할 수 있습니다 따라서 디코딩 할 필요가, 그 어떤 수단.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="81fb5ccf6d9b5e91fa9e4bc4650fe044ed66f61d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-cputime#v:getCPUTime&quot;&gt;getCPUTime&lt;/a&gt;&lt;/code&gt; returns the number of picoseconds CPU time used by the current program. The precision of this result is implementation-dependent.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-cputime#v:getCPUTime&quot;&gt;getCPUTime&lt;/a&gt;&lt;/code&gt; 은 현재 프로그램에서 사용한 피코 초 CPU 시간 수를 반환합니다. 이 결과의 정밀도는 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="333a46ef6dacf6c5a80f278b48fc1b418642c882" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name).</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 는 프로그램의 명령 행 인수 목록을 리턴합니다 (프로그램 이름은 포함하지 않음).</target>
        </trans-unit>
        <trans-unit id="dd6dbee1f3528160102b639d3ffa4216eea30bb4" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt;&lt;code&gt;var&lt;/code&gt; returns the value of the environment variable &lt;code&gt;var&lt;/code&gt;. For the inverse, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function can be used.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; 는 환경 변수 &lt;code&gt;var&lt;/code&gt; 의 값을 반환합니다 . 반대로, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ca7f63fe3d0a903bfae6c5134c9430b61994835" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt;&lt;code&gt;var&lt;/code&gt; returns the value of the environment variable &lt;code&gt;var&lt;/code&gt;. For the inverse, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function can be used.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; 은 환경 변수 &lt;code&gt;var&lt;/code&gt; 의 값을 반환합니다 . 반대의 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3135c3e7a2cb69d8b2c83b9a8629d453e5f970da" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt;&lt;code&gt;var&lt;/code&gt; returns the value of the environment variable &lt;code&gt;var&lt;/code&gt;. For the inverse, the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function can be used.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; 은 환경 변수 &lt;code&gt;var&lt;/code&gt; 의 값을 반환합니다 . 반대의 경우 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d48baf2075c3ee22718940634bbbddb083ab881" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; makes handle &lt;code&gt;hdl&lt;/code&gt; closed. Before the computation finishes, if &lt;code&gt;hdl&lt;/code&gt; is writable its buffer is flushed as for &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt;. Performing &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; on a handle that has already been closed has no effect; doing so is not an error. All other operations on a closed handle will fail. If &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; fails for any reason, any further operations (apart from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;) on the handle will still fail as if &lt;code&gt;hdl&lt;/code&gt; had been successfully closed.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 핸들 &lt;code&gt;hdl&lt;/code&gt; 을 닫습니다. 계산이 완료되기 전에 &lt;code&gt;hdl&lt;/code&gt; 이 쓰기 가능하면 버퍼는 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt; 와 같이 플러시됩니다 . 수행 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 을 이미 종료 된 핸들에 아무런 영향을주지 않습니다; 그렇게하는 것은 오류가 아닙니다. 닫힌 핸들에 대한 다른 모든 작업은 실패합니다. 경우 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 가 어떤 이유로 실패, (떨어져에서 더 이상 작업 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 핸들)은 여전히 것처럼 실패 &lt;code&gt;hdl&lt;/code&gt; 성공적으로 종료되었다.</target>
        </trans-unit>
        <trans-unit id="ae6369992b71cbb1678afb5376d9e6269c231cb1" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 는 문자열 &lt;code&gt;s&lt;/code&gt; 를 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="9a6238acf0510b26a31458c62c98d733cf29782e" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name).</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 는 프로그램의 명령 행 인수 목록을 리턴합니다 (프로그램 이름은 포함하지 않음).</target>
        </trans-unit>
        <trans-unit id="73c0cc06c24d549877e94bc38248d3ee6d646d88" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt;&lt;code&gt;var&lt;/code&gt; returns the value of the environment variable &lt;code&gt;var&lt;/code&gt;. For the inverse, the &lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; function can be used.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-environment#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; 는 환경 변수 &lt;code&gt;var&lt;/code&gt; 의 값을 반환합니다 . 반대로, &lt;code&gt;&lt;a href=&quot;system-environment#v:setEnv&quot;&gt;setEnv&lt;/a&gt;&lt;/code&gt; 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="983d00657a17c6db29e365b387a16723173ec1ad" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; returns the name of the program as it was invoked.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; 은 호출 된 프로그램의 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="17000e1334d14d03ae1356f9f4e1fa55b98b5275" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name).</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 는 프로그램의 명령 행 인수 목록을 리턴합니다 (프로그램 이름은 포함하지 않음).</target>
        </trans-unit>
        <trans-unit id="f0c0fcf448bf5244743b9ac30e39970de524d214" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; returns the name of the program as it was invoked.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; 은 호출 된 프로그램의 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3409f02406e5a33c426a5f87bde07ed79637fc0e" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt;&lt;code&gt;code&lt;/code&gt; throws &lt;code&gt;&lt;a href=&quot;system-exit#t:ExitCode&quot;&gt;ExitCode&lt;/a&gt;&lt;/code&gt;&lt;code&gt;code&lt;/code&gt;. Normally this terminates the program, returning &lt;code&gt;code&lt;/code&gt; to the program's caller.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;code&lt;/code&gt; 슬로우 &lt;code&gt;&lt;a href=&quot;system-exit#t:ExitCode&quot;&gt;ExitCode&lt;/a&gt;&lt;/code&gt; &lt;code&gt;code&lt;/code&gt; . 일반적으로 이것은 프로그램을 종료하고 프로그램의 호출자에게 &lt;code&gt;code&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="78b2e536d933878b74647d8bca3f6c8bcae1eeb8" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; makes handle &lt;code&gt;hdl&lt;/code&gt; closed. Before the computation finishes, if &lt;code&gt;hdl&lt;/code&gt; is writable its buffer is flushed as for &lt;code&gt;&lt;a href=&quot;system-io#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt;. Performing &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; on a handle that has already been closed has no effect; doing so is not an error. All other operations on a closed handle will fail. If &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; fails for any reason, any further operations (apart from &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt;) on the handle will still fail as if &lt;code&gt;hdl&lt;/code&gt; had been successfully closed.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 핸들 &lt;code&gt;hdl&lt;/code&gt; 을 닫습니다. 계산이 완료되기 전에 &lt;code&gt;hdl&lt;/code&gt; 이 쓰기 가능하면 버퍼는 &lt;code&gt;&lt;a href=&quot;system-io#v:hFlush&quot;&gt;hFlush&lt;/a&gt;&lt;/code&gt; 와 같이 플러시됩니다 . 수행 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 을 이미 종료 된 핸들에 아무런 영향을주지 않습니다; 그렇게하는 것은 오류가 아닙니다. 닫힌 핸들에 대한 다른 모든 작업은 실패합니다. 경우 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 가 어떤 이유로 실패, (떨어져에서 더 이상 작업 &lt;code&gt;&lt;a href=&quot;system-io#v:hClose&quot;&gt;hClose&lt;/a&gt;&lt;/code&gt; 핸들)은 여전히 것처럼 실패 &lt;code&gt;hdl&lt;/code&gt; 성공적으로 종료되었다.</target>
        </trans-unit>
        <trans-unit id="06feb11277fd1c39107474d92fe70ca3dd16e6e9" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current buffering mode for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuffering&quot;&gt;hGetBuffering&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;hdl&lt;/code&gt; 현재 버퍼링 모드를 반환 &lt;code&gt;hdl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e42f92bdc28a95e571d0a397cee8fb23228323d8" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a character from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;, blocking until a character is available.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetChar&quot;&gt;hGetChar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;hdl&lt;/code&gt; 관리하는 파일이나 채널의 문자를 읽어 &lt;code&gt;hdl&lt;/code&gt; 문자를 사용할 수있을 때까지 차단.</target>
        </trans-unit>
        <trans-unit id="66d82e9932953500676f78c08885c387094e6b9d" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the list of characters corresponding to the unread portion of the channel or file managed by &lt;code&gt;hdl&lt;/code&gt;, which is put into an intermediate state, &lt;em&gt;semi-closed&lt;/em&gt;. In this state, &lt;code&gt;hdl&lt;/code&gt; is effectively closed, but items are read from &lt;code&gt;hdl&lt;/code&gt; on demand and accumulated in a special list returned by &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 &lt;code&gt;hdl&lt;/code&gt; 에 의해 관리되는 채널 또는 파일의 읽지 않은 부분에 해당하는 문자 목록을 반환합니다.이 목록은 중간 상태 인 &lt;em&gt;semi-closed로 설정&lt;/em&gt; 됩니다. 이 상태에서 &lt;code&gt;hdl&lt;/code&gt; 은 효과적으로 닫히지 만 요청시 &lt;code&gt;hdl&lt;/code&gt; 에서 항목을 읽고 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 이 리턴 한 특수 목록에 누적됩니다 .</target>
        </trans-unit>
        <trans-unit id="d4f0db17e2b8f97007d5f0849da51462b8ba8a79" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; reads a line from the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetLine&quot;&gt;hGetLine&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에서 라인을 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="bb7baa9ab5bd0d03f4272f4add2817a242a78e22" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current I/O position of &lt;code&gt;hdl&lt;/code&gt; as a value of the abstract type &lt;code&gt;&lt;a href=&quot;system-io#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetPosn&quot;&gt;hGetPosn&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 반환의 현재 I / O 위치 &lt;code&gt;hdl&lt;/code&gt; 추상 형의 값으로 &lt;code&gt;&lt;a href=&quot;system-io#t:HandlePosn&quot;&gt;HandlePosn&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dcccb109f989ac7adbf8e833e8b7c9ff22baa840" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; returns the next character from the handle without removing it from the input buffer, blocking until a character is available.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hLookAhead&quot;&gt;hLookAhead&lt;/a&gt;&lt;/code&gt; 는 입력 버퍼에서 문자를 제거하지 않고 핸들에서 다음 문자를 반환하여 문자를 사용할 수있을 때까지 차단합니다.</target>
        </trans-unit>
        <trans-unit id="eaa75d6a9bd56419249769fb216f808b0f4b9eba" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hPrint&quot;&gt;hPrint&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; writes the string representation of &lt;code&gt;t&lt;/code&gt; given by the &lt;code&gt;&lt;a href=&quot;text-show#v:shows&quot;&gt;shows&lt;/a&gt;&lt;/code&gt; function to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt; and appends a newline.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hPrint&quot;&gt;hPrint&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;text-show#v:shows&quot;&gt;shows&lt;/a&gt;&lt;/code&gt; 함수가 제공 한 &lt;code&gt;t&lt;/code&gt; 의 문자열 표현을 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널 에 기록하고 개행을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="81b1c9708b1942bda0e7b068176a8e3bc516f577" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl ch&lt;/code&gt; writes the character &lt;code&gt;ch&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;. Characters may be buffered if buffering is enabled for &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl ch&lt;/code&gt; 는 문자 &lt;code&gt;ch&lt;/code&gt; 를 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에 씁니다 . &lt;code&gt;hdl&lt;/code&gt; 에 버퍼링이 사용 가능한 경우 문자가 버퍼링 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="918ecee63c912a23cc6dfa75cd690eee7bed9bc2" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl s&lt;/code&gt; writes the string &lt;code&gt;s&lt;/code&gt; to the file or channel managed by &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl s&lt;/code&gt; 는 문자열 &lt;code&gt;s&lt;/code&gt; 를 &lt;code&gt;hdl&lt;/code&gt; 이 관리하는 파일 또는 채널에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="565f5e55a0fbc846dfe3436c847d4600597981b1" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hReady&quot;&gt;hReady&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; indicates whether at least one item is available for input from handle &lt;code&gt;hdl&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hReady&quot;&gt;hReady&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 핸들 &lt;code&gt;hdl&lt;/code&gt; 에서 입력 할 수있는 항목이 하나 이상 있는지 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="30289a7e45689ee554f7c011744608dad361c1b9" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode i&lt;/code&gt; sets the position of handle &lt;code&gt;hdl&lt;/code&gt; depending on &lt;code&gt;mode&lt;/code&gt;. The offset &lt;code&gt;i&lt;/code&gt; is given in terms of 8-bit bytes.</source>
          <target state="translated">Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode i&lt;/code&gt; &lt;code&gt;mode&lt;/code&gt; 에 따라 핸들 &lt;code&gt;hdl&lt;/code&gt; 의 위치를 ​​설정 합니다 . 오프셋 &lt;code&gt;i&lt;/code&gt; 는 8 비트 바이트로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="31865c99a7f0b8f829935ce8bc7dab155c6c5bb7" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl mode&lt;/code&gt; sets the mode of buffering for handle &lt;code&gt;hdl&lt;/code&gt; on subsequent reads and writes.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hSetBuffering&quot;&gt;hSetBuffering&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl mode&lt;/code&gt; 는 후속 읽기 및 쓰기에서 핸들 &lt;code&gt;hdl&lt;/code&gt; 에 대한 버퍼링 모드를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="8a7aa425aff4d649515373f238f25e6910189b1b" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt; returns the current position of the handle &lt;code&gt;hdl&lt;/code&gt;, as the number of bytes from the beginning of the file. The value returned may be subsequently passed to &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; to reposition the handle to the current position.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hTell&quot;&gt;hTell&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 은 핸들 &lt;code&gt;hdl&lt;/code&gt; 의 현재 위치를 파일의 시작부터 바이트 수로 리턴 합니다. 반환 된 값은 이후 핸들을 현재 위치로 재배치 하기 위해 &lt;code&gt;&lt;a href=&quot;system-io#v:hSeek&quot;&gt;hSeek&lt;/a&gt;&lt;/code&gt; 에 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7374bf851b67b93fac4af7416c689532f833b474" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl t&lt;/code&gt; waits until input is available on handle &lt;code&gt;hdl&lt;/code&gt;. It returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; as soon as input is available on &lt;code&gt;hdl&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if no input is available within &lt;code&gt;t&lt;/code&gt; milliseconds. Note that &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; waits until one or more full &lt;em&gt;characters&lt;/em&gt; are available, which means that it needs to do decoding, and hence may fail with a decoding error.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl t&lt;/code&gt; 는 핸들 &lt;code&gt;hdl&lt;/code&gt; 에서 입력을 사용할 수있을 때까지 기다립니다 . &lt;code&gt;hdl&lt;/code&gt; 에서 입력을 사용할 수있게되면 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환하고 , &lt;code&gt;t&lt;/code&gt; 밀리 초 내에 입력이 없으면 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 참고 것을 &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; 은 하나 개 이상의 전체 때까지 대기 &lt;em&gt;문자를&lt;/em&gt; 사용할 수 있습니다 그것은 디코딩 오류와 함께 실패 할 수 있습니다 따라서 디코딩 할 필요가, 그 어떤 수단.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b5d22abbd9e42ae89ac96d258c71de3c5efc1e9f" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;file mode&lt;/code&gt; allocates and returns a new, open handle to manage the file &lt;code&gt;file&lt;/code&gt;. It manages input if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt;, output if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt;, and both input and output if mode is &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;file mode&lt;/code&gt; 는 파일 &lt;code&gt;file&lt;/code&gt; 을 관리하기 위해 새로운 열린 핸들을 할당하고 반환 합니다 . 경우 입력을 관리하는 &lt;code&gt;mode&lt;/code&gt; 이다 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadMode&quot;&gt;ReadMode&lt;/a&gt;&lt;/code&gt; 출력하는 경우, &lt;code&gt;mode&lt;/code&gt; 이다 &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;system-io#v:AppendMode&quot;&gt;AppendMode&lt;/a&gt;&lt;/code&gt; 모드 인 경우, 양쪽의 입출력 &lt;code&gt;&lt;a href=&quot;system-io#v:ReadWriteMode&quot;&gt;ReadWriteMode&lt;/a&gt;&lt;/code&gt; 이 .</target>
        </trans-unit>
        <trans-unit id="0a267fc98e0887b06c428eb759a73b0a2415f8b5" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name), as &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 는 프로그램 명령 행 인수 목록 (프로그램 이름 제외)을 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 으로 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="43a7c9ace23d1dae2e2d7884d60e83b258453180" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; returns a list of the program's command line arguments (not including the program name), as &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">계산 &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 는 프로그램의 명령 줄 인수 목록 (프로그램 이름 제외)을 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 으로 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="173f16d1c29da35668fa25d3c5feae7903d9a190" translate="yes" xml:space="preserve">
          <source>Computation &lt;code&gt;system cmd&lt;/code&gt; returns the exit code produced when the operating system runs the shell command &lt;code&gt;cmd&lt;/code&gt;.</source>
          <target state="translated">계산 &lt;code&gt;system cmd&lt;/code&gt; 는 운영 체제가 쉘 명령 &lt;code&gt;cmd&lt;/code&gt; 를 실행할 때 생성 된 종료 코드를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5943a4fc5e2555aaac37422a0de78f765a8617a9" translate="yes" xml:space="preserve">
          <source>Computation to run</source>
          <target state="translated">실행할 계산</target>
        </trans-unit>
        <trans-unit id="c8a170a3b747ca22f1d4b56b6bc8091b936fb686" translate="yes" xml:space="preserve">
          <source>Computation to run in the modified environment.</source>
          <target state="translated">수정 된 환경에서 실행할 계산입니다.</target>
        </trans-unit>
        <trans-unit id="395564d952cf55d40bed153b5a7ea77f8f7361fb" translate="yes" xml:space="preserve">
          <source>Computation type:</source>
          <target state="translated">계산 유형 :</target>
        </trans-unit>
        <trans-unit id="528287b862f50905b7d4dac4caa370a0e3a882a7" translate="yes" xml:space="preserve">
          <source>Computations are actions that may produce a value or exit.</source>
          <target state="translated">계산은 가치를 창출하거나 빠져 나갈 수있는 행동입니다.</target>
        </trans-unit>
        <trans-unit id="c36b791a16f2d2e83af649c48f9331faff40c774" translate="yes" xml:space="preserve">
          <source>Computations are either exceptions or normal values.</source>
          <target state="translated">계산은 예외 또는 정상 값입니다.</target>
        </trans-unit>
        <trans-unit id="ece7dbd68baf18a047d8ff86d1ae4523aa7a82e9" translate="yes" xml:space="preserve">
          <source>Computations are functions of a shared environment.</source>
          <target state="translated">계산은 공유 환경의 기능입니다.</target>
        </trans-unit>
        <trans-unit id="1231ea3805616498abbd9a29a9c71e500d80a589" translate="yes" xml:space="preserve">
          <source>Computations which can be interrupted and resumed.</source>
          <target state="translated">중단 및 재개 할 수있는 계산.</target>
        </trans-unit>
        <trans-unit id="ed5e6b9fffa43d51b9cfbdef14affbd1d9cc0a99" translate="yes" xml:space="preserve">
          <source>Computations which may fail or throw exceptions.</source>
          <target state="translated">실패하거나 예외가 발생할 수있는 계산</target>
        </trans-unit>
        <trans-unit id="e7b93e209bf365eeb2e47a2f67afda45f906497e" translate="yes" xml:space="preserve">
          <source>Computations which read values from a shared environment.</source>
          <target state="translated">공유 환경에서 값을 읽는 계산.</target>
        </trans-unit>
        <trans-unit id="ce49c21cca27f7efda439007b9520214424bc467" translate="yes" xml:space="preserve">
          <source>Compute absolute value of an &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 절대 값 계산</target>
        </trans-unit>
        <trans-unit id="0c4d2dacaf0b01be409ede17c08ec8afecfd68af" translate="yes" xml:space="preserve">
          <source>Compute base-2 log of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; 의 base-2 로그 계산</target>
        </trans-unit>
        <trans-unit id="41f1f3c498e9e370bd509a5ca499e1687f0f4eed" translate="yes" xml:space="preserve">
          <source>Compute base-2 log of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; 의 base-2 로그 계산</target>
        </trans-unit>
        <trans-unit id="e371c66821c3c8601ec67ea6d81996b858684a1d" translate="yes" xml:space="preserve">
          <source>Compute greatest common divisor.</source>
          <target state="translated">최대 공약수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="9f517d7003ca1e6fa6ed101b53521d0a7777a04c" translate="yes" xml:space="preserve">
          <source>Compute least common multiple.</source>
          <target state="translated">최소 공배수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="1c880a5fe1a5ab1eeb98ef65b0f69203e403e4b6" translate="yes" xml:space="preserve">
          <source>Compute n-ary logic exclusive OR operation on &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; 목록 에서 n 개의 논리 독점 OR 연산을 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="b39667573824dacb99ea3b5c798fe22e8b493e4e" translate="yes" xml:space="preserve">
          <source>Compute next prime greater than &lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; probalistically.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 보다 큰 다음 소수는 계산적으로 계산하십시오 .</target>
        </trans-unit>
        <trans-unit id="d33eedc2c81f4649c2634a937f86f162194eb380" translate="yes" xml:space="preserve">
          <source>Compute number of digits (without sign) in given &lt;code&gt;&lt;em&gt;base&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;&lt;em&gt;base&lt;/em&gt;&lt;/code&gt; 에서 자릿수를 계산합니다 (부호 없음) .</target>
        </trans-unit>
        <trans-unit id="31653fd8d49487dfb88104e07b384204607afa7d" translate="yes" xml:space="preserve">
          <source>Compute size of serialisation</source>
          <target state="translated">직렬화의 계산 크기</target>
        </trans-unit>
        <trans-unit id="d00de1bfc097ec786fd6b841cb126241ba32ff89" translate="yes" xml:space="preserve">
          <source>Compute the length of a NUL-terminated string. This address must refer to immutable memory. GHC includes a built-in rule for constant folding when the argument is a statically-known literal. That is, a core-to-core pass reduces the expression &lt;code&gt;cstringLength# &quot;hello&quot;#&lt;/code&gt; to the constant &lt;code&gt;5#&lt;/code&gt;.</source>
          <target state="translated">NUL로 끝나는 문자열의 길이를 계산합니다. 이 주소는 불변 메모리를 참조해야합니다. GHC에는 인수가 정적으로 알려진 리터럴 일 때 상수 접기에 대한 기본 제공 규칙이 포함되어 있습니다. 즉, core-to-core 패스는 &lt;code&gt;cstringLength# &quot;hello&quot;#&lt;/code&gt; 표현식 을 상수 &lt;code&gt;5#&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="932be4bfd168bc37465e3549a403c6414b683f75" translate="yes" xml:space="preserve">
          <source>Compute the maximum size from a size hint, if possible.</source>
          <target state="translated">가능한 경우 크기 힌트에서 최대 크기를 계산하십시오.</target>
        </trans-unit>
        <trans-unit id="889d89291c16bb001ded3003749e279a017d05db" translate="yes" xml:space="preserve">
          <source>Computed value</source>
          <target state="translated">계산 된 가치</target>
        </trans-unit>
        <trans-unit id="d4170a2ec3c4bb825e6e8112ccad9cea837d259c" translate="yes" xml:space="preserve">
          <source>Computer Name</source>
          <target state="translated">컴퓨터 이름</target>
        </trans-unit>
        <trans-unit id="1489fd81a0417ecf958b9d01347167d1f10379a4" translate="yes" xml:space="preserve">
          <source>Computes the alignment constraint of the argument. An alignment constraint &lt;code&gt;x&lt;/code&gt; is fulfilled by any address divisible by &lt;code&gt;x&lt;/code&gt;. The value of the argument is not used.</source>
          <target state="translated">인수의 정렬 제약 조건을 계산합니다. 정렬 제약 조건 &lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 로 나눌 수있는 모든 주소에 의해 충족됩니다 . 인수의 값은 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6e8be9a732d468673522e80c8afaee0e03727423" translate="yes" xml:space="preserve">
          <source>Computes the alignment, in bytes, of &lt;code&gt;struct_type&lt;/code&gt;. It will have type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;struct_type&lt;/code&gt; 의 정렬을 바이트 단위로 계산합니다 . 유형은 &lt;code&gt;Int&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="16ae87dbf75fe0a890fa8b40cc88399164adc272" translate="yes" xml:space="preserve">
          <source>Computes the hash of a given file. This function loops over the handle, running in constant memory.</source>
          <target state="translated">주어진 파일의 해시를 계산합니다. 이 함수는 상수 메모리에서 실행되는 핸들을 반복합니다.</target>
        </trans-unit>
        <trans-unit id="e40774cf79f1d6668a3ee91a6d2146b564fb68eb" translate="yes" xml:space="preserve">
          <source>Computes the offset required to get from the second to the first argument. We have</source>
          <target state="translated">두 번째 인수에서 첫 번째 인수로 얻는 데 필요한 오프셋을 계산합니다. 우리는</target>
        </trans-unit>
        <trans-unit id="e777d2021cc4a779dd595b85d7531e8e5da555cc" translate="yes" xml:space="preserve">
          <source>Computes the offset, in bytes, of &lt;code&gt;field&lt;/code&gt; in &lt;code&gt;struct_type&lt;/code&gt;. It will have type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;struct_type&lt;/code&gt; 에서 &lt;code&gt;field&lt;/code&gt; 의 오프셋 (바이트)을 계산합니다 . 유형은 &lt;code&gt;Int&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="537d6be6337ae1a839c062f33d0cdd2379322fa3" translate="yes" xml:space="preserve">
          <source>Computes the position of a token.</source>
          <target state="translated">토큰의 위치를 ​​계산합니다.</target>
        </trans-unit>
        <trans-unit id="500d251f1f0a8c6255068cbba9713d60a1513f6a" translate="yes" xml:space="preserve">
          <source>Computes the size, in bytes, of &lt;code&gt;struct_type&lt;/code&gt;. It will have type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;struct_type&lt;/code&gt; 의 크기를 바이트 단위로 계산합니다 . 유형은 &lt;code&gt;Int&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a8a9dd2d134353659dc9a798da68b82859ae1518" translate="yes" xml:space="preserve">
          <source>Computes the storage requirements (in bytes) of the argument. The value of the argument is not used.</source>
          <target state="translated">인수의 스토리지 요구 사항 (바이트)을 계산합니다. 인수의 값은 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f6b38904cc0da7828feea802c2bc7123fb8a090a" translate="yes" xml:space="preserve">
          <source>Con</source>
          <target state="translated">Con</target>
        </trans-unit>
        <trans-unit id="155d1779a179a9c816355eea6266197b27b09b96" translate="yes" xml:space="preserve">
          <source>Con&amp;#x27;</source>
          <target state="translated">Con&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="dfd0ea26101cc0cb549bafb1a0ad08464a910111" translate="yes" xml:space="preserve">
          <source>ConIndex</source>
          <target state="translated">ConIndex</target>
        </trans-unit>
        <trans-unit id="1f51a40f68db3f804dc7221a60211e31eac51e42" translate="yes" xml:space="preserve">
          <source>ConLike</source>
          <target state="translated">ConLike</target>
        </trans-unit>
        <trans-unit id="6687920f3069bcec52c734754da20c563aaca3a2" translate="yes" xml:space="preserve">
          <source>ConQ</source>
          <target state="translated">ConQ</target>
        </trans-unit>
        <trans-unit id="26f08e846bd4fb0ff727cca18183acb384d61bb4" translate="yes" xml:space="preserve">
          <source>ConcFlags</source>
          <target state="translated">ConcFlags</target>
        </trans-unit>
        <trans-unit id="7e753af33c5e8b0b810748b18ff7f60b83d5a7d0" translate="yes" xml:space="preserve">
          <source>Concatenate a list of lists.</source>
          <target state="translated">목록 목록을 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="6fddd8991c881242e663fb2719b1935da7d4b553" translate="yes" xml:space="preserve">
          <source>Concatenate two &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">두 개의 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 연결하십시오 . 이 함수는 다시 쓰기 규칙에서만 사용하도록 내 보냅니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1f9185fadb26dc3dda1d2f233018d881fca3f99" translate="yes" xml:space="preserve">
          <source>Concatenate two &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">두 개의 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 연결합니다 . 이 함수는 다시 쓰기 규칙에 사용하기 위해 내보내집니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce06b4fbe5237e6dc1b364879915d4c69aab83a2" translate="yes" xml:space="preserve">
          <source>Concatenate two &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">두 개의 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 연결합니다 . 이 함수는 다시 쓰기 규칙에 사용하기 위해서만 내보내집니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="eec037fd21cdbe752cf956ee1da877b809e27461" translate="yes" xml:space="preserve">
          <source>Concatenation</source>
          <target state="translated">Concatenation</target>
        </trans-unit>
        <trans-unit id="25f0db722595c638f2891a9581d00e40d5c30f10" translate="yes" xml:space="preserve">
          <source>Concatenation of type-level symbols.</source>
          <target state="translated">유형 수준 기호의 연결</target>
        </trans-unit>
        <trans-unit id="4cea7654fa1b91467fe76911980be1ab5326f949" translate="yes" xml:space="preserve">
          <source>Conceptually, the definition of the &lt;code&gt;gmap&lt;/code&gt; combinators in terms of the primitive &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; requires the identification of the &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; function arguments. Technically, we also need to identify the type constructor &lt;code&gt;c&lt;/code&gt; for the construction of the result type from the folded term type.</source>
          <target state="translated">개념적으로, 원시 &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; 과 관련 하여 &lt;code&gt;gmap&lt;/code&gt; 콤비 네이터를 정의 하려면 &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; 함수 인수를 식별해야합니다 . 기술적으로 접힌 용어 유형에서 결과 유형을 구성하기위한 유형 생성자 &lt;code&gt;c&lt;/code&gt; 도 식별해야 합니다.</target>
        </trans-unit>
        <trans-unit id="9d23fcea4daf97ef1036cd2456514834dc79655f" translate="yes" xml:space="preserve">
          <source>Concretely, consider the following code</source>
          <target state="translated">구체적으로 다음 코드를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="5b1efe2191a68a684d543e4bb322dd269b90561b" translate="yes" xml:space="preserve">
          <source>Concurrency is &quot;lightweight&quot;, which means that both thread creation and context switching overheads are extremely low. Scheduling of Haskell threads is done internally in the Haskell runtime system, and doesn't make use of any operating system-supplied thread packages.</source>
          <target state="translated">동시성은 &quot;경량&quot;이므로 스레드 작성 및 컨텍스트 전환 오버 헤드가 모두 매우 낮습니다. Haskell 스레드 예약은 Haskell 런타임 시스템에서 내부적으로 수행되며 운영 체제 제공 스레드 패키지를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e7a41309b89ac86304011c0bf55274a6f708a87" translate="yes" xml:space="preserve">
          <source>Concurrency-based &lt;code&gt;ForeignPtr&lt;/code&gt; operations</source>
          <target state="translated">동시성 기반의 &lt;code&gt;ForeignPtr&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="8e6395e744c1e58cf0ac43a4cddb054dece909f2" translate="yes" xml:space="preserve">
          <source>Concurrent Haskell</source>
          <target state="translated">동시 하스켈</target>
        </trans-unit>
        <trans-unit id="8da54ad7b1a1507fe2aeb1b7a9ae1a4e91a3e713" translate="yes" xml:space="preserve">
          <source>Concurrent Haskell is the name given to GHC&amp;rsquo;s concurrency extension. It is enabled by default, so no special flags are required. The &lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz&quot;&gt;Concurrent Haskell paper&lt;/a&gt; is still an excellent resource, as is &lt;a href=&quot;http://research.microsoft.com/%7Esimonpj/papers/marktoberdorf/&quot;&gt;Tackling the awkward squad&lt;/a&gt;.</source>
          <target state="translated">Concurrent Haskell은 GHC의 동시성 확장에 부여 된 이름입니다. 기본적으로 활성화되므로 특별한 플래그가 필요하지 않습니다. &lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz&quot;&gt;동시 하스켈 용지는&lt;/a&gt; 그대로, 여전히 훌륭한 자원이다 &lt;a href=&quot;http://research.microsoft.com/%7Esimonpj/papers/marktoberdorf/&quot;&gt;어색한 팀 태클&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="13390ebeda0b4bed1680907383941e27fcb28643" translate="yes" xml:space="preserve">
          <source>Concurrent threads don&amp;rsquo;t carry on running when GHCi is waiting for input.</source>
          <target state="translated">GHCi가 입력을 기다리는 동안 동시 스레드는 계속 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="52dcbd4fd374ecdafc2e0d8e67a5e5660b3ec9fd" translate="yes" xml:space="preserve">
          <source>CondBinBox</source>
          <target state="translated">CondBinBox</target>
        </trans-unit>
        <trans-unit id="e308ff9f582e2ed2418ba0def59e798db0f15db7" translate="yes" xml:space="preserve">
          <source>CondBox</source>
          <target state="translated">CondBox</target>
        </trans-unit>
        <trans-unit id="16ff3c39aa1df66f0de6e8fb5fa8b2f30aa3253d" translate="yes" xml:space="preserve">
          <source>Conditional compilation directives are passed unmodified to the C program, C file, and C header. Putting them in the C program means that appropriate parts of the Haskell file will be skipped.</source>
          <target state="translated">조건부 컴파일 지시문은 수정되지 않은 C 프로그램, C 파일 및 C 헤더로 전달됩니다. C 프로그램에 넣는 것은 Haskell 파일의 해당 부분을 건너 뛰는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="130461107c667211620f8ce9b47b3259b61a2163" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 표현식 의 조건부 실행 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="0e84529d3218c6191555cc76b24770860872b0a0" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 의 조건부 실행 표현식 . 예를 들면</target>
        </trans-unit>
        <trans-unit id="73d9314a281739311632daba1183360cadf04cbc" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 표현식 의 조건부 실행 . 예를 들면</target>
        </trans-unit>
        <trans-unit id="ffb162b4c5d7281912e8372eba4648b6ba711a94" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 표현식 의 조건부 실행 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="f411034d4fd2c6cc6534d98bb6906efa3ba93aa8" translate="yes" xml:space="preserve">
          <source>Conditional execution of &lt;code&gt;&lt;a href=&quot;ghc-base#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; expressions. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-base#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 표현식 의 조건부 실행 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="566f41ff6a81d32d387f3840948d99e44a4737ec" translate="yes" xml:space="preserve">
          <source>Conditional execution of monadic expressions</source>
          <target state="translated">모나 딕 표현식의 조건부 실행</target>
        </trans-unit>
        <trans-unit id="94c006419889fc0dbc2ea0945043db19993802b9" translate="yes" xml:space="preserve">
          <source>Conditional failure of &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; computations. Defined by</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; 계산 의 조건부 오류 . 에 의해 정의</target>
        </trans-unit>
        <trans-unit id="2dd691e974da5d9a58d8b60641d036dfe53b65fe" translate="yes" xml:space="preserve">
          <source>Conditionally execute an action depending on the configured I/O subsystem. On POSIX systems always execute the first action. On windows execute the second action if WINIO as active, otherwise fall back to the first action.</source>
          <target state="translated">구성된 I / O 하위 시스템에 따라 조건부로 작업을 실행합니다. POSIX 시스템에서는 항상 첫 번째 작업을 실행합니다. Windows에서 WINIO가 활성 상태이면 두 번째 작업을 실행하고 그렇지 않으면 첫 번째 작업으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="ca2401387ad3b267393e50496be6a9aa8b97e675" translate="yes" xml:space="preserve">
          <source>Conditionally prove the equality of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">조건부 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 의 동등성을 증명합니다 .</target>
        </trans-unit>
        <trans-unit id="590b64e2731b9d71fb7dd6b74e8f8430a100f6cf" translate="yes" xml:space="preserve">
          <source>Conditionally prove the representational equality of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 의 표현 평등을 조건부로 증명합니다 .</target>
        </trans-unit>
        <trans-unit id="465d19b1eca2928057588f1c0a3a232118c5e925" translate="yes" xml:space="preserve">
          <source>Conditionally select a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. For example, we can implement the ASCII primitive that drops characters with Unicode codepoints above 127 as follows.</source>
          <target state="translated">조건부로 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 선택하십시오 . 예를 들어, 다음과 같이 127 이상의 유니 코드 코드 포인트로 문자를 삭제하는 ASCII 프리미티브를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2275cbca87eca820e502f9ccc7688d5277fccaa3" translate="yes" xml:space="preserve">
          <source>Conditionally select a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. For example, we can implement the ASCII primitive that drops characters with Unicode codepoints above 127 as follows.</source>
          <target state="translated">조건부로 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 선택하십시오 . 예를 들어, 다음과 같이 127 이상의 유니 코드 코드 포인트로 문자를 삭제하는 ASCII 프리미티브를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6a56385d0729f6ff4bf27671cc845cb6f2cfde5" translate="yes" xml:space="preserve">
          <source>Conditionals</source>
          <target state="translated">Conditionals</target>
        </trans-unit>
        <trans-unit id="666cdf1d4cacc1a0770eed791fdf23c246328dbf" translate="yes" xml:space="preserve">
          <source>Conditionals (e.g. &amp;ldquo;&lt;code&gt;if&lt;/code&gt; e1 &lt;code&gt;then&lt;/code&gt; e2 &lt;code&gt;else&lt;/code&gt; e3&amp;rdquo;) means &amp;ldquo;&lt;code&gt;ifThenElse&lt;/code&gt; e1 e2 e3&amp;rdquo;. However &lt;code&gt;case&lt;/code&gt; expressions are unaffected.</source>
          <target state="translated">조건부 (예 :&amp;ldquo; &lt;code&gt;if&lt;/code&gt; e1 &lt;code&gt;then&lt;/code&gt; e2 &lt;code&gt;else&lt;/code&gt; e3&amp;rdquo;)는&amp;ldquo; &lt;code&gt;ifThenElse&lt;/code&gt; e1 e2 e3&amp;rdquo;을 의미합니다. 그러나 &lt;code&gt;case&lt;/code&gt; 표현에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c872d2249b3ed3269c6ce50f0ffd0cb67089f40d" translate="yes" xml:space="preserve">
          <source>Confirm that &lt;code&gt;&lt;a href=&quot;data-bool#v:bool&quot;&gt;bool&lt;/a&gt; x y p&lt;/code&gt; and &lt;code&gt;if p then y else x&lt;/code&gt; are equivalent:</source>
          <target state="translated">것을 확인 &lt;code&gt;&lt;a href=&quot;data-bool#v:bool&quot;&gt;bool&lt;/a&gt; x y p&lt;/code&gt; 하고 &lt;code&gt;if p then y else x&lt;/code&gt; 동등하다 :</target>
        </trans-unit>
        <trans-unit id="18deff53cdd05b346de3253c1dd1e509db65c095" translate="yes" xml:space="preserve">
          <source>Conjugate</source>
          <target state="translated">Conjugate</target>
        </trans-unit>
        <trans-unit id="c50eb143c997c6c488a9dd7e244fe98a4087d50c" translate="yes" xml:space="preserve">
          <source>ConnectorPunctuation</source>
          <target state="translated">ConnectorPunctuation</target>
        </trans-unit>
        <trans-unit id="edd7f0ca8504937d01d607e07723ac46aa052210" translate="yes" xml:space="preserve">
          <source>Conor McBride and Ross Paterson 2005</source>
          <target state="translated">코너 맥브라이드와 로스 패터슨 2005</target>
        </trans-unit>
        <trans-unit id="adf92671c951691565d7070c7723f7d16bbef6c3" translate="yes" xml:space="preserve">
          <source>Consequences:</source>
          <target state="translated">Consequences:</target>
        </trans-unit>
        <trans-unit id="bd243da61bc83e255c691b0eeb1676f5cf315d17" translate="yes" xml:space="preserve">
          <source>Consider</source>
          <target state="translated">Consider</target>
        </trans-unit>
        <trans-unit id="5f6ea1d3e0aefd32c3e548a33f65c235ecc5ec3e" translate="yes" xml:space="preserve">
          <source>Consider a server that broadcasts messages to clients:</source>
          <target state="translated">클라이언트에게 메시지를 브로드 캐스트하는 서버를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="b6fc02c5d9d768d1713ce738098380aec015b8f7" translate="yes" xml:space="preserve">
          <source>Consider inferring the kind for</source>
          <target state="translated">종류를 유추하는 것을 고려하십시오</target>
        </trans-unit>
        <trans-unit id="4e93ba43c70f76bdfa8c67f12b8bb7a26b1a408a" translate="yes" xml:space="preserve">
          <source>Consider the following class, intended as part of a library for collection types:</source>
          <target state="translated">컬렉션 유형에 대한 라이브러리의 일부로 다음 클래스를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="7ac04222a10e38f19c86cbfc8b2cee9271b488dd" translate="yes" xml:space="preserve">
          <source>Consider the following concurrent data structure, a skip channel. This is a channel for an intermittent source of high bandwidth information (for example, mouse movement events.) Writing to the channel never blocks, and reading from the channel only returns the most recent value, or blocks if there are no new values. Multiple readers are supported with a &lt;code&gt;dupSkipChan&lt;/code&gt; operation.</source>
          <target state="translated">스킵 채널 인 다음의 동시 데이터 구조를 고려하십시오. 이는 고 대역폭 정보의 간헐적 인 소스 (예 : 마우스 이동 이벤트)를위한 채널입니다. 채널에 쓰면 절대로 차단되지 않으며 채널에서 읽은 것은 가장 최근의 값만 반환하거나 새로운 값이 없으면 차단됩니다. &lt;code&gt;dupSkipChan&lt;/code&gt; 조작으로 다중 리더가 지원 됩니다.</target>
        </trans-unit>
        <trans-unit id="ab5b83c5a66bbdddaedee7ab1295c114ef96eac2" translate="yes" xml:space="preserve">
          <source>Consider the following example of a poly-kinded class and an instance for it:</source>
          <target state="translated">다종 클래스의 다음 예제와 그 인스턴스를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">다음 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="9c9abb7300d19ea6f39900d470fca65b3c7ac134" translate="yes" xml:space="preserve">
          <source>Consider the following examples:</source>
          <target state="translated">다음 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4e519bef8cd17f981ed1232126e9a1bd8a6ad96a" translate="yes" xml:space="preserve">
          <source>Consider the following program:</source>
          <target state="translated">다음 프로그램을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="30970fb88d0ce6c25be2f0fd4328cbe922acc343" translate="yes" xml:space="preserve">
          <source>Consider the function &lt;code&gt;foo&lt;/code&gt; in a module &lt;code&gt;Main&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Main&lt;/code&gt; 모듈의 &lt;code&gt;foo&lt;/code&gt; 함수를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d1112dda0a0046cb307c5b5dc63bd4b726f05a4" translate="yes" xml:space="preserve">
          <source>Consider the scoping rules for type synonyms and type family instances, such as these:</source>
          <target state="translated">다음과 같은 유형 동의어 및 유형 패밀리 인스턴스에 대한 범위 지정 규칙을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="b04cfc74606234c3bd3484f1142c20251f5d126c" translate="yes" xml:space="preserve">
          <source>Consider the type</source>
          <target state="translated">유형을 고려하십시오</target>
        </trans-unit>
        <trans-unit id="6f1dc922bd88dfa0062a7f9f0d6263e729edf934" translate="yes" xml:space="preserve">
          <source>Consider these two code fragments:</source>
          <target state="translated">다음 두 코드 조각을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="87d852e021a93bddf899b5f28b58afd9c6974e91" translate="yes" xml:space="preserve">
          <source>Consider these two definitions:</source>
          <target state="translated">이 두 가지 정의를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="b0d9bcf7bc58e7b27e69c575fdfb5a87d1ef0d68" translate="yes" xml:space="preserve">
          <source>Consider these two pattern synonyms:</source>
          <target state="translated">이 두 패턴 동의어를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="1a11cf05b826f74b0437934930569c2c5eb2bee6" translate="yes" xml:space="preserve">
          <source>Consider this GHCi session:</source>
          <target state="translated">이 GHCi 세션을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="translated">이 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="e429601e69f5b4d1daf533944f4c1a13931e5e34" translate="yes" xml:space="preserve">
          <source>Considers all packages distrusted unless they are explicitly set to be trusted by subsequent command-line options.</source>
          <target state="translated">후속 명령 행 옵션에서 명시 적으로 신뢰하도록 설정되지 않은 경우 모든 패키지를 신뢰할 수없는 것으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="c512ecf111c7072432db358aea1b0d0808bfafdf" translate="yes" xml:space="preserve">
          <source>Console code pages</source>
          <target state="translated">콘솔 코드 페이지</target>
        </trans-unit>
        <trans-unit id="7dbbb0f84ac6788456545803b583d5af8e0bc22a" translate="yes" xml:space="preserve">
          <source>Console mode</source>
          <target state="translated">콘솔 모드</target>
        </trans-unit>
        <trans-unit id="56d0232c998d778ef55ad35e83c8072f0d14ad7f" translate="yes" xml:space="preserve">
          <source>Const</source>
          <target state="translated">Const</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="56741fe253b20e820ac9d4980cd91b02df83d27d" translate="yes" xml:space="preserve">
          <source>Constant functor.</source>
          <target state="translated">일정한 functor.</target>
        </trans-unit>
        <trans-unit id="048991ab35f72179c70dcbb3608a1aa047c74519" translate="yes" xml:space="preserve">
          <source>Constant-time access to both the front and the rear with &lt;code&gt;&lt;a href=&quot;data-sequence#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:-124--62-&quot;&gt;|&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewl&quot;&gt;viewl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewr&quot;&gt;viewr&lt;/a&gt;&lt;/code&gt;. For recent GHC versions, this can be done more conveniently using the bidirectional patterns &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt;. See the detailed explanation in the &quot;Pattern synonyms&quot; section.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt; 로 전면과 후면 모두에 일정한 시간 액세스 , &lt;code&gt;&lt;a href=&quot;data-sequence#v:-124--62-&quot;&gt;|&amp;gt;&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewl&quot;&gt;viewl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-sequence#v:viewr&quot;&gt;viewr&lt;/a&gt;&lt;/code&gt; 입니다. 최근 GHC 버전의 경우 양방향 패턴 &lt;code&gt;&lt;a href=&quot;data-sequence#v:Empty&quot;&gt;Empty&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-sequence#v::-60--124-&quot;&gt;:&amp;lt;|&lt;/a&gt;&lt;/code&gt; 를 사용하여보다 편리하게 수행 할 수 있습니다 . 및 &lt;code&gt;&lt;a href=&quot;data-sequence#v::-124--62-&quot;&gt;:|&amp;gt;&lt;/a&gt;&lt;/code&gt; . &quot;패턴 동의어&quot;섹션의 자세한 설명을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="371f549ea50275a8fdad426a77dadc019f20bfac" translate="yes" xml:space="preserve">
          <source>Constants of unlifted kinds</source>
          <target state="translated">들지 않는 종류의 상수</target>
        </trans-unit>
        <trans-unit id="1eb9dafcce160d5f1c0ebe79fa66ee190788984e" translate="yes" xml:space="preserve">
          <source>Constants, additional parameters and recursion of kind &lt;code&gt;*&lt;/code&gt;</source>
          <target state="translated">상수, 추가 매개 변수 및 종류의 재귀 &lt;code&gt;*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57a4414bb7765f60b3f2ec385c9b24b5748f3665" translate="yes" xml:space="preserve">
          <source>Constr</source>
          <target state="translated">Constr</target>
        </trans-unit>
        <trans-unit id="21c820b69bf6c7c4b0ac91f54590652550002acd" translate="yes" xml:space="preserve">
          <source>ConstrRep</source>
          <target state="translated">ConstrRep</target>
        </trans-unit>
        <trans-unit id="01f8a6f673895ca3238e845234e6065ee2865d9c" translate="yes" xml:space="preserve">
          <source>ConstrainedClassMethods</source>
          <target state="translated">ConstrainedClassMethods</target>
        </trans-unit>
        <trans-unit id="cdd87b7907fb17673e884c148848c9c5e93b59ca" translate="yes" xml:space="preserve">
          <source>Constraint</source>
          <target state="translated">Constraint</target>
        </trans-unit>
        <trans-unit id="75786eb55c7c8b70c132b69502ae4ead847f4971" translate="yes" xml:space="preserve">
          <source>Constraint representing the fact that the field &lt;code&gt;x&lt;/code&gt; belongs to the record type &lt;code&gt;r&lt;/code&gt; and has field type &lt;code&gt;a&lt;/code&gt;. This will be solved automatically, but manual instances may be provided as well.</source>
          <target state="translated">필드 &lt;code&gt;x&lt;/code&gt; 가 레코드 유형 &lt;code&gt;r&lt;/code&gt; 에 속 하고 필드 유형이 &lt;code&gt;a&lt;/code&gt; 라는 사실을 나타내는 제한 조건 . 이것은 자동으로 해결되지만 수동 인스턴스도 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="524a5a84dda74ac067bc68274307126f82427aa8" translate="yes" xml:space="preserve">
          <source>ConstraintKinds</source>
          <target state="translated">ConstraintKinds</target>
        </trans-unit>
        <trans-unit id="caf70f8d01ddd9b74e3c756ed105855ca10f1157" translate="yes" xml:space="preserve">
          <source>ConstraintT</source>
          <target state="translated">ConstraintT</target>
        </trans-unit>
        <trans-unit id="67f8f093175dfad7d4cda8ae5154585d89127b22" translate="yes" xml:space="preserve">
          <source>Constraints on the non-default type signatures can play a role in inferring the instance context as well. For example, if you have this class:</source>
          <target state="translated">기본이 아닌 형식의 서명에 대한 제약 조건은 인스턴스 컨텍스트를 유추하는 역할도 할 수 있습니다. 예를 들어이 클래스가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="9e8638d0568cf3139dfd44edc291ff8d2d398ea8" translate="yes" xml:space="preserve">
          <source>Constraints that have been solved by the plugin must be provided with evidence in the form of an &lt;code&gt;EvTerm&lt;/code&gt; of the type of the constraint. This evidence is ignored for given and derived constraints, which GHC &amp;ldquo;solves&amp;rdquo; simply by discarding them; typically this is used when they are uninformative (e.g. reflexive equations). For wanted constraints, the evidence will form part of the Core term that is generated after typechecking, and can be checked by &lt;code&gt;-dcore-lint&lt;/code&gt;. It is possible for the plugin to create equality axioms for use in evidence terms, but GHC does not check their consistency, and inconsistent axiom sets may lead to segfaults or other runtime misbehaviour.</source>
          <target state="translated">플러그인으로 해결 된 제약 조건에는 제약 조건 유형의 &lt;code&gt;EvTerm&lt;/code&gt; 형식으로 증거가 제공되어야합니다 . 이 증거는 주어진 제약 조건과 파생 된 제약 조건에서 무시되며, GHC는이를 단순히 버림으로써&amp;ldquo;해결&amp;rdquo;합니다. 일반적으로 이것은 유익하지 않은 경우에 사용됩니다 (예 : 반사 방정식). 원하는 제한 조건의 경우, 증거는 유형 점검 후 생성되는 핵심 항의 일부를 형성하며 &lt;code&gt;-dcore-lint&lt;/code&gt; 로 확인할 수 있습니다 . 플러그인이 증거 용어로 사용하기 위해 동등 공리를 만들 수는 있지만 GHC는 일관성을 검사하지 않으며 일치하지 않는 공리 세트가 segfaults 또는 기타 런타임 오작동을 유발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fefb2e34c7ab6e48bb2cb28e4452c143f7bf8217" translate="yes" xml:space="preserve">
          <source>Construct 1-limb &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; 에서 1-limb &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 구성</target>
        </trans-unit>
        <trans-unit id="ce83dffb75ae10033babed14acf241eba3aff8b2" translate="yes" xml:space="preserve">
          <source>Construct 1-limb &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; 에서 1-limb &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 생성</target>
        </trans-unit>
        <trans-unit id="b92a60d93d0fbfa32d52116bcdd6a0e9f22561d7" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; value from list of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 의 목록에서 값을 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 인 들.</target>
        </trans-unit>
        <trans-unit id="67bd7e1a6daf5e9472fe6fdb69116295ccccdb71" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; value from list of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 의 목록에서 값을 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 인 들.</target>
        </trans-unit>
        <trans-unit id="3000609bf1e46204d8f4d1b42e5f8251b8953caa" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; from existing &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; containing &lt;em&gt;n&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt;s in least-significant-first order.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 를 기존에서 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-prim-0.6.1/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; 함유 &lt;em&gt;N &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt; S의 최하위 우선 순서.</target>
        </trans-unit>
        <trans-unit id="0b943c713fdc28bb45933e7e2f0397324571603a" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; from existing &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; containing &lt;em&gt;n&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt;s in least-significant-first order.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 를 기존에서 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; 함유 &lt;em&gt;N &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt; S의 최하위 우선 순서.</target>
        </trans-unit>
        <trans-unit id="546c7d91e365ed08852f86313d097f20c2743c02" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 값.</target>
        </trans-unit>
        <trans-unit id="643f46731d056f74a8c6e4a19be28280ee88d08e" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; value from list of &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 의 목록에서 값 &lt;code&gt;&lt;a href=&quot;data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="89c76f0f8f3ee74a0f8230bdec3d2aefb4ff500e" translate="yes" xml:space="preserve">
          <source>Construct &lt;code&gt;Integer&lt;/code&gt;s</source>
          <target state="translated">구축 &lt;code&gt;Integer&lt;/code&gt; 들</target>
        </trans-unit>
        <trans-unit id="53668995e6cac4f7005b91abb6dee7ff39c02f4e" translate="yes" xml:space="preserve">
          <source>Construct BigNat from 2 limbs. The first argument is the most-significant limb.</source>
          <target state="translated">2 개의 사지에서 BigNat을 구성하십시오. 첫 번째 주장은 가장 중요한 사지입니다.</target>
        </trans-unit>
        <trans-unit id="5969202d507980e84b50c59a87e69ec14a08f411" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; from an arbitrary &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;. It is the caller's responsibility to ensure that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; points to an area of memory sufficient for the specified bounds.</source>
          <target state="translated">임의의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 로부터 &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; 를 구축합니다 . &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 이 지정된 범위에 충분한 메모리 영역을 가리 키도록하는 것은 호출자의 책임 입니다.</target>
        </trans-unit>
        <trans-unit id="8df5c46ae1f3d372da1b0ed4c49cbaaca41c0dbe" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; from an arbitrary &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;. It is the caller's responsibility to ensure that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; points to an area of memory sufficient for the specified bounds.</source>
          <target state="translated">컨스 &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; 을 임의로부터 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 을 확인하는 것은 호출자의 책임입니다. 이 지정된 경계에 충분한 메모리 영역을 가리 키도록하는 입니다.</target>
        </trans-unit>
        <trans-unit id="058a8cb464d7e736c9278ce05052a31bbc410d28" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; from an arbitrary &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;. It is the caller's responsibility to ensure that the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; points to an area of memory sufficient for the specified bounds.</source>
          <target state="translated">컨스 &lt;code&gt;&lt;a href=&quot;data-array-storable#t:StorableArray&quot;&gt;StorableArray&lt;/a&gt;&lt;/code&gt; 을 임의로부터 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 이 지정된 경계에 충분한 메모리 영역을 가리 키도록하는 것은 호출자의 책임 입니다.</target>
        </trans-unit>
        <trans-unit id="3ca39844115fdfcf141d70ec5b637b00c55e4055" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that always inserts the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly as a chunk.</source>
          <target state="translated">항상 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 청크로 직접 삽입 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="6e447cfec4aa783ba093628c4f4c3610a2526157" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the &lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 을 복사 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="82076a1b089015b2805c4f3aaeae7e1cfb399f4c" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 복사 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ed3b7db4dcf48958be11a2f1e636f93893544a1" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 복사 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb6b8d6db0bb055f860a0f94b00d34f5fb046647" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s, if it is smaller than the treshold, and inserts it directly otherwise.</source>
          <target state="translated">임계 값보다 작은 경우 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 복사하고 그렇지 않으면 직접 삽입 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="080faddfc6d1022396830af46ec675a3461a9c44" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that inserts all chunks of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 모든 청크를 직접 삽입 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="61948ff0bad46869d84bf9c199f30454a7371a4f" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that uses the thresholding strategy of &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; for each chunk of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지연 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 각 청크에 대해 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; 임계 값 전략을 사용 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="43aa14046b04f6cfefe7b3855e0caffff3dd98fb" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that always inserts the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly as a chunk.</source>
          <target state="translated">항상 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 청크로 직접 삽입 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="f307a277c3bbee41d07fd5830f6b9307b9d81c87" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the &lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sh#v:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 을 복사 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="fceee5706e1add7e5f23e1355b2319dcfd21e81f" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 복사 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="b7b25fd23e7f26312eafdda4e2bf443e4f863964" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 복사 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6a225d573c02c3c260741be4849f4986b0ec32c" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that copies the strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s, if it is smaller than the treshold, and inserts it directly otherwise.</source>
          <target state="translated">임계 값보다 작은 경우 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 복사하고 그렇지 않으면 직접 삽입 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b21cab2be8964afd16d9f174dc888d825faaaa9" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that inserts all chunks of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 모든 청크를 직접 삽입 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7cbff3a7dc9228ccd4cc015fa6c0004acb9f113" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that uses the thresholding strategy of &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; for each chunk of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지연 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 각 청크에 대해 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:byteStringThreshold&quot;&gt;byteStringThreshold&lt;/a&gt;&lt;/code&gt; 임계 값 전략을 사용 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="646ad7dbacc9300052c7e605b753d6f666ea4833" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;. In contrast to &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;s, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s are referentially transparent.</source>
          <target state="translated">컨스 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; . 대조적으로 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; 의, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 들 referentially 투명합니다.</target>
        </trans-unit>
        <trans-unit id="c0fe2bfe9d2c472c2224740c1f5ef532280f7cab" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; action. In contrast to &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;s, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt;s are referentially transparent in the sense that sequencing the same &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; multiple times yields every time the same value with the same side-effect.</source>
          <target state="translated">컨스 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 행동을. 대조적 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; S, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; S 시퀀싱은 동일한 의미에서 referentially 투명 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 여러 번하면마다 같은 부작용과 동일한 값을 산출한다.</target>
        </trans-unit>
        <trans-unit id="c26b940b015d57c7981b8be3d2f64c9034e4ceee" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; list from a single element.</source>
          <target state="translated">구성체 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; 하나의 요소에서 목록을.</target>
        </trans-unit>
        <trans-unit id="43f4e84d1539c9f72160bf5eaed772879b40f624" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; without invisibly pinning its byte array in memory if its length has dwindled to zero.</source>
          <target state="translated">길이가 0으로 줄어들면 메모리에 바이트 배열을 보이지 않게 고정하지 않고 &lt;code&gt;&lt;a href=&quot;data-text-internal#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c1125c323d6822e0795fb650c9cb7e2349c0c97" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; record for passing to &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt;, representing a command to be passed to the shell.</source>
          <target state="translated">컨스 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; 에 전달하는 기록을 &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; 쉘에 전달하는 명령을 나타내는.</target>
        </trans-unit>
        <trans-unit id="5a63159034cf2c4f34bbd264ba1ab926754a84fa" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; record for passing to &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt;, representing a raw command with arguments.</source>
          <target state="translated">컨스 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; 에 전달하는 기록을 &lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; 인수 원시 명령을 나타내는.</target>
        </trans-unit>
        <trans-unit id="9a3508787004dbd21f8461c38be23ad087070642" translate="yes" xml:space="preserve">
          <source>Construct a continuation-passing computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">함수에서 연속 통과 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="40a8861c10af19deb91fcbb7b498cc61481ecce8" translate="yes" xml:space="preserve">
          <source>Construct a continuation-passing computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">함수에서 연속 통과 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-cont#v:runCont&quot;&gt;runCont&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="fafe012cf7ba57adfc109c825c282d785078fcab" translate="yes" xml:space="preserve">
          <source>Construct a path relative to the current directory, similar to &lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:makeRelative&quot;&gt;makeRelative&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../filepath-1.4.2.1/system-filepath-posix#v:makeRelative&quot;&gt;makeRelative&lt;/a&gt;&lt;/code&gt; 와 유사하게 현재 디렉토리에 상대적인 경로를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="7e744960d0a7a1397b4c24a9d34a5bc0d6b9d62d" translate="yes" xml:space="preserve">
          <source>Construct a representation for a type application.</source>
          <target state="translated">타입 어플리케이션의 표현을 구축합니다.</target>
        </trans-unit>
        <trans-unit id="8e736b6db59081e88685c5059c6ecb455f59ce0f" translate="yes" xml:space="preserve">
          <source>Construct a representation for a type constructor applied at a monomorphic kind.</source>
          <target state="translated">monomorphic 종류에 적용된 형식 생성자에 대한 표현을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9dd9db3e95212979125fe6e4bf88925811a42a45" translate="yes" xml:space="preserve">
          <source>Construct a state monad computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 상태 모나드 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="9f037c8b08c79bac52423ae62381e204b19fb85d" translate="yes" xml:space="preserve">
          <source>Construct a state monad computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-strict#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 상태 모나드 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-strict#v:runState&quot;&gt;runState&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="53aec054094f2b28df182b46629d579290489263" translate="yes" xml:space="preserve">
          <source>Construct a state monad computation from a state transformer function.</source>
          <target state="translated">상태 변환기 함수에서 상태 모나드 계산을 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="36c5989f501b9c2d93f9c2c4e272caca2c456aff" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) computation. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriterT&quot;&gt;runWriterT&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">(결과, 출력) 계산에서 기록기 계산을 구성합니다. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriterT&quot;&gt;runWriterT&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="aa055c344459e267691d83158c55afe6ac0d97fa" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair.</source>
          <target state="translated">(결과, 출력) 쌍에서 기록기 계산을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="6794fac16c9b50c09c162f42def8b6509b4de34d" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">(결과, 출력) 쌍에서 기록기 계산을 구성합니다. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-cps#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt; 의 역함 )</target>
        </trans-unit>
        <trans-unit id="ebd2ff56b014d733d97dae5115b1cfe78aeee682" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-lazy#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">(결과, 출력) 쌍에서 기록기 계산을 구성합니다. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-lazy#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt; 의 역함 )</target>
        </trans-unit>
        <trans-unit id="570f5647e39682a1aa49d822e5c073065351c2e5" translate="yes" xml:space="preserve">
          <source>Construct a writer computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-strict#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">(결과, 출력) 쌍에서 기록기 계산을 구성합니다. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-writer-strict#v:runWriter&quot;&gt;runWriter&lt;/a&gt;&lt;/code&gt; 의 역함 )</target>
        </trans-unit>
        <trans-unit id="afa14a572fa87fba46902ade8aac3bafa0ea5af5" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;ghc-io-exception#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">오류를 설명하는 문자열 로 &lt;code&gt;&lt;a href=&quot;ghc-io-exception#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 값을 구성하십시오. &lt;code&gt;fail&lt;/code&gt; 의 방법 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 의 예를 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 제기 &lt;code&gt;&lt;a href=&quot;ghc-io-exception#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; 를 따라서 :</target>
        </trans-unit>
        <trans-unit id="e11618239dca01a342d56c1c4910dc7e03f18843" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">오류를 설명하는 문자열 로 &lt;code&gt;&lt;a href=&quot;prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 값을 구성하십시오. &lt;code&gt;fail&lt;/code&gt; 의 방법 &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 의 예를 &lt;code&gt;&lt;a href=&quot;prelude#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 제기 &lt;code&gt;&lt;a href=&quot;prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; 를 따라서 :</target>
        </trans-unit>
        <trans-unit id="a84840578a93fcc813e462ae43d93aa06dd5cce9" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; of the given type where the second argument describes the error location and the third and fourth argument contain the file handle and file path of the file involved in the error if applicable.</source>
          <target state="translated">두 번째 인수가 오류 위치를 설명하고 세 번째 및 네 번째 인수가 해당되는 경우 오류와 관련된 파일의 파일 핸들 및 파일 경로를 포함하는 지정된 유형 의 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="0eb909b0100da50815034b4ea4273edfb0ccdbfe" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">오류를 설명하는 문자열 로 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 값을 구성하십시오. &lt;code&gt;fail&lt;/code&gt; 의 방법 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 의 예를 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 제기 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; 를 따라서 :</target>
        </trans-unit>
        <trans-unit id="0c5391336f936e074ee003b6594fbe812721a3a1" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">오류를 설명하는 문자열 로 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 값을 구성합니다. &lt;code&gt;fail&lt;/code&gt; 의 방법 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 의 예를 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 제기 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; 을 따라서 :</target>
        </trans-unit>
        <trans-unit id="f79f5d221de9d97993fafc2300a92a5da958d6fd" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">오류를 설명하는 문자열 로 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 값을 구성합니다. &lt;code&gt;fail&lt;/code&gt; 의 방법 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 의 예를 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 제기 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; 를 따라서 :</target>
        </trans-unit>
        <trans-unit id="27d446782d7a0a6431559c109811d9cb6a12d2eb" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; based on the given &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; value. The optional information can be used to improve the accuracy of error messages.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 지정된에 기반 &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; 값. 선택적 정보는 오류 메시지의 정확성을 향상시키는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c057289c4006f5004f40a92d1d18be0debe524b" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; of the given type where the second argument describes the error location and the third and fourth argument contain the file handle and file path of the file involved in the error if applicable.</source>
          <target state="translated">두 번째 인수가 오류 위치를 설명하고 세 번째 및 네 번째 인수가 해당되는 경우 오류와 관련된 파일의 파일 핸들 및 파일 경로를 포함하는 지정된 유형 의 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="ba266a3cb1aac8c4f0d604e31cfe44ef07729188" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; value with a string describing the error. The &lt;code&gt;fail&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; instance of the &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class raises a &lt;code&gt;&lt;a href=&quot;system-io-error#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt;, thus:</source>
          <target state="translated">오류를 설명하는 문자열 로 &lt;code&gt;&lt;a href=&quot;system-io-error#t:IOError&quot;&gt;IOError&lt;/a&gt;&lt;/code&gt; 값을 구성하십시오. &lt;code&gt;fail&lt;/code&gt; 의 방법 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 의 예를 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 제기 &lt;code&gt;&lt;a href=&quot;system-io-error#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; 를 따라서 :</target>
        </trans-unit>
        <trans-unit id="f76925adff9b7313e2fb2272df27ab5428c544bb" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 RWS 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 의 역수 )</target>
        </trans-unit>
        <trans-unit id="6167a533277d2b8bcf216f55f388b90e1fabb718" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 RWS 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 의 역수 )</target>
        </trans-unit>
        <trans-unit id="77270b4acbe724f22dc553a3a5f01f5ae711ef45" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 RWS 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 의 역수 )</target>
        </trans-unit>
        <trans-unit id="35d22bddf20c8644753d465ef6b56ae4d777a697" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 RWS 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 의 역수 )</target>
        </trans-unit>
        <trans-unit id="58c1ec1c33c68a0f9fef84a00a8d262058638a6f" translate="yes" xml:space="preserve">
          <source>Construct an RWS computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 RWS 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:runRWS&quot;&gt;runRWS&lt;/a&gt;&lt;/code&gt; 의 역수 )</target>
        </trans-unit>
        <trans-unit id="0e94a51065102218cfb8a10a74bacfee87e2c998" translate="yes" xml:space="preserve">
          <source>Construct an RWST computation from a function. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWST&quot;&gt;runRWST&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">함수에서 RWST 계산을 구성하십시오. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:runRWST&quot;&gt;runRWST&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="229a1e04823558b3cb4d4978ff107b110ff894be" translate="yes" xml:space="preserve">
          <source>Construct an accumulation computation from a (result, output) pair. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-accum#v:runAccum&quot;&gt;runAccum&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">(결과, 출력) 쌍에서 누적 계산을 구성합니다. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-accum#v:runAccum&quot;&gt;runAccum&lt;/a&gt;&lt;/code&gt; 의 역함 )</target>
        </trans-unit>
        <trans-unit id="713effcd12b07bd1c1f823d565249a29943850a0" translate="yes" xml:space="preserve">
          <source>Construct an array from a pair of bounds and a list of values in index order.</source>
          <target state="translated">한 쌍의 경계와 인덱스 목록에서 값 목록으로 배열을 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="7ba3635ee2cbe52b09a32bddf71f04287d7ccefe" translate="yes" xml:space="preserve">
          <source>Construct an array with the specified bounds and containing values for given indices within these bounds.</source>
          <target state="translated">지정된 범위를 가지고이 범위 내에 주어진 인덱스에 대한 값을 포함하는 배열을 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="729f4a3ef676a588113886a5f0dc230740af03ad" translate="yes" xml:space="preserve">
          <source>Construct an iconv-based &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the given character set and &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 문자 세트 및 &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; 에 대한 iconv 기반 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="5deb5b0bb6aac9d6666b492aa50d2eaf9cacd053" translate="yes" xml:space="preserve">
          <source>Construct an iconv-based &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the given character set and &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 문자 세트와 &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; 에 대한 iconv 기반 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="ff1f89358947cc9fd02b9650da8adf127293c4e9" translate="yes" xml:space="preserve">
          <source>Construct an iconv-based &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the given character set and &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 문자 세트 및 &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; 에 대한 iconv 기반 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="8bf4c1ac278b2e3f39f7e65171d8ed01b18bd269" translate="yes" xml:space="preserve">
          <source>Construct format string according to &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO-8601&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO-8601&lt;/a&gt; 에 따라 형식 문자열을 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="67e9053a6b311b291c3d124af1e80d92b9ab6845" translate="yes" xml:space="preserve">
          <source>Construct format string according to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO-8601&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO-8601&lt;/a&gt; 에 따라 형식 문자열을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="551df780808d8498c605c080d05f4c2963f2b5f1" translate="yes" xml:space="preserve">
          <source>Construct new &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; with an initial counter value.</source>
          <target state="translated">초기 카운터 값으로 새로운 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tsem#t:TSem&quot;&gt;TSem&lt;/a&gt;&lt;/code&gt; 을 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="c7bdba9b06316a551e9130279b8de3424d0ef2ec" translate="yes" xml:space="preserve">
          <source>Construct tag-less &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">태그가없는 &lt;code&gt;&lt;a href=&quot;data-version#t:Version&quot;&gt;Version&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3a7471fa0a1b6b91ba3aa8a5ea29d6baf8bef32" translate="yes" xml:space="preserve">
          <source>Construct the tree of &lt;code&gt;Integer&lt;/code&gt;s where each node has two children: &lt;code&gt;left = 2*x&lt;/code&gt; and &lt;code&gt;right = 2*x + 1&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;data-tree#v:rootLabel&quot;&gt;rootLabel&lt;/a&gt;&lt;/code&gt; of the node. Stop when the values exceed 7.</source>
          <target state="translated">각 노드에 &lt;code&gt;left = 2*x&lt;/code&gt; 및 &lt;code&gt;right = 2*x + 1&lt;/code&gt; 두 자식이있는 &lt;code&gt;Integer&lt;/code&gt; 트리를 구성하십시오 . 여기서 &lt;code&gt;x&lt;/code&gt; 는 노드 의 &lt;code&gt;&lt;a href=&quot;data-tree#v:rootLabel&quot;&gt;rootLabel&lt;/a&gt;&lt;/code&gt; 입니다. 값이 7을 초과하면 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="3cdd8523e19cf65f3fa93bc20fc59b0ffec18b52" translate="yes" xml:space="preserve">
          <source>Constructing Builders</source>
          <target state="translated">빌더 구축</target>
        </trans-unit>
        <trans-unit id="5be18449f77f3a82cad130a1d05fd37b92f0c974" translate="yes" xml:space="preserve">
          <source>Constructing an explicitly bidirectional pattern synonym also:</source>
          <target state="translated">명시 적 양방향 패턴 동의어 구성하기 :</target>
        </trans-unit>
        <trans-unit id="840c013a39932d3c804ee07ae47c9e5073d42a71" translate="yes" xml:space="preserve">
          <source>Constructing documents</source>
          <target state="translated">문서 작성</target>
        </trans-unit>
        <trans-unit id="4c50a189529450d3380818281c6ab3f79f66124e" translate="yes" xml:space="preserve">
          <source>Constructing mutable arrays</source>
          <target state="translated">가변 배열 생성</target>
        </trans-unit>
        <trans-unit id="b094947bf88a8db80b50a2d24e17b5de2a41dddf" translate="yes" xml:space="preserve">
          <source>Constructing names</source>
          <target state="translated">이름 짓기</target>
        </trans-unit>
        <trans-unit id="da33e1b7e0c4eae1911ee4a15280f0990e1a6115" translate="yes" xml:space="preserve">
          <source>Construction</source>
          <target state="translated">Construction</target>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="2fd910a8e641e118ebbcd211b7150329f75700af" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the exception monad. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:runExcept&quot;&gt;runExcept&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">예외 모나드에서의 계산을위한 생성자. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:runExcept&quot;&gt;runExcept&lt;/a&gt;&lt;/code&gt; 의 반대 ).</target>
        </trans-unit>
        <trans-unit id="cdc55e56a6cb7e7ce5e5e0b10a76180957575a92" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">리더 모나드에서 계산을위한 생성자 ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; 와 동일 ).</target>
        </trans-unit>
        <trans-unit id="29753848500c22c85b434223bffee9144211bab6" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">리더 모나드에서 계산을위한 생성자 ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-cps#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; 와 동일 ).</target>
        </trans-unit>
        <trans-unit id="eaa1e2ff4aaebb24966d925065b0b67eb6091c2e" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">리더 모나드에서 계산을위한 생성자 ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-lazy#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; 와 동일 ).</target>
        </trans-unit>
        <trans-unit id="d01e8b4c92b72dc928b0a7994d007f4582b81724" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the reader monad (equivalent to &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">리더 모나드에서 계산을위한 생성자 ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-rws-strict#v:asks&quot;&gt;asks&lt;/a&gt;&lt;/code&gt; 와 동일 ).</target>
        </trans-unit>
        <trans-unit id="ccb57a04a6e11d67a842a8924dc83ab1e7a89f63" translate="yes" xml:space="preserve">
          <source>Constructor for computations in the selection monad.</source>
          <target state="translated">선택 모나드에서의 계산을위한 생성자.</target>
        </trans-unit>
        <trans-unit id="b5c9417824a65aca8745057dafb4c034175cb1b9" translate="yes" xml:space="preserve">
          <source>Constructor function</source>
          <target state="translated">생성자 함수</target>
        </trans-unit>
        <trans-unit id="52312b265be254029688404c1c716835f8169693" translate="yes" xml:space="preserve">
          <source>Constructor strictness lookup</source>
          <target state="translated">생성자 엄격 조회</target>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="0db3840fb009c9e199a0811671b68463a30b0ba8" translate="yes" xml:space="preserve">
          <source>Constructors without fields: &lt;code&gt;U1&lt;/code&gt;</source>
          <target state="translated">필드가없는 생성자 : &lt;code&gt;U1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fe68d8828df1efd322944d2c1bf5d2db9456df8" translate="yes" xml:space="preserve">
          <source>Constructs a constructor</source>
          <target state="translated">생성자를 생성합니다</target>
        </trans-unit>
        <trans-unit id="84c67f8e4e905477fd9effb2e30fd3068019dcf3" translate="yes" xml:space="preserve">
          <source>Constructs a mutable array from a list of initial elements. The list gives the elements of the array in ascending order beginning with the lowest index.</source>
          <target state="translated">초기 요소 목록에서 변경 가능한 배열을 구성합니다. 이 목록은 가장 낮은 인덱스로 시작하여 오름차순으로 배열의 요소를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c37ac8e7192962c3cbf4fcbd43e92f84aa8089e6" translate="yes" xml:space="preserve">
          <source>Constructs a new array derived from the original array by applying a function to each of the elements.</source>
          <target state="translated">각 요소에 함수를 적용하여 원래 배열에서 파생 된 새 배열을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="183d3f225fea9472cb3e1633596bb10e9211c6be" translate="yes" xml:space="preserve">
          <source>Constructs a new array derived from the original array by applying a function to each of the indices.</source>
          <target state="translated">각 인덱스에 함수를 적용하여 원래 배열에서 파생 된 새 배열을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="dc5c1437cce708210a0e3758246e0050b0e1c23b" translate="yes" xml:space="preserve">
          <source>Constructs a non-representation for a non-representable type</source>
          <target state="translated">표현할 수없는 형태의 표현을 구축합니다</target>
        </trans-unit>
        <trans-unit id="02e84422de576a5cd3dbab749aad68ed036386b8" translate="yes" xml:space="preserve">
          <source>Constructs an algebraic datatype</source>
          <target state="translated">대수 데이터 유형을 구성합니다</target>
        </trans-unit>
        <trans-unit id="c07a9e34d54e72c1d3ca4ff75d114050b9077593" translate="yes" xml:space="preserve">
          <source>Constructs an array identical to the first argument except that it has been updated by the associations in the right argument. For example, if &lt;code&gt;m&lt;/code&gt; is a 1-origin, &lt;code&gt;n&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt; matrix, then</source>
          <target state="translated">오른쪽 인수의 연관에 의해 업데이트 된 것을 제외하고 첫 번째 인수와 동일한 배열을 구성합니다. 예를 들어, &lt;code&gt;m&lt;/code&gt; 이 1- 원점이고 &lt;code&gt;n&lt;/code&gt; x &lt;code&gt;n&lt;/code&gt; 행렬 인 경우</target>
        </trans-unit>
        <trans-unit id="351bb1bf05637d4ebcd251efe13b04b604395cda" translate="yes" xml:space="preserve">
          <source>Constructs an element with a custom name, and without any children.</source>
          <target state="translated">자식이없는 사용자 정의 이름을 가진 요소를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="ac73c83c4b36afe3f6b0b069ab11982d31c0dd2e" translate="yes" xml:space="preserve">
          <source>Constructs an element with a custom name.</source>
          <target state="translated">사용자 정의 이름으로 요소를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="1c5525518ac16e2ae61febd10f46980c2793f67c" translate="yes" xml:space="preserve">
          <source>Constructs an immutable array from a list of associations. Unlike &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, the same index is allowed to occur multiple times in the list of associations; an &lt;em&gt;accumulating function&lt;/em&gt; is used to combine the values of elements with the same index.</source>
          <target state="translated">연관 목록에서 변경 불가능한 배열을 구성합니다. &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; 와 달리 연관 목록에서 동일한 색인이 여러 번 발생할 수 있습니다. &lt;em&gt;누적 함수는&lt;/em&gt; 인덱스와 같은 요소의 값을 결합하는 데 사용된다.</target>
        </trans-unit>
        <trans-unit id="503fc4c1015baa8a701a00fe83632ade0d4ac7c4" translate="yes" xml:space="preserve">
          <source>Constructs an immutable array from a list of initial elements. The list gives the elements of the array in ascending order beginning with the lowest index.</source>
          <target state="translated">초기 요소리스트로부터 불변 배열을 구축합니다. 이 목록은 가장 낮은 인덱스로 시작하여 오름차순으로 배열의 요소를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d9b7ba711df09eccc4710d3389aed461e3dbc536" translate="yes" xml:space="preserve">
          <source>Constructs an immutable array from a pair of bounds and a list of initial associations.</source>
          <target state="translated">한 쌍의 경계와 초기 연관 목록에서 불변 배열을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="e9e69ade4383000dffc37611c195f7e5376c5981" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 유형을</target>
        </trans-unit>
        <trans-unit id="7d576d991cc2081c94d0c6f54096ca945fe0e6c3" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 형을 구축</target>
        </trans-unit>
        <trans-unit id="8af8b05fff04159fdbfebae14dce835012fe098b" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; 타입을 구축</target>
        </trans-unit>
        <trans-unit id="09bf43f01b48072a3c5378f5e196bd6447777b17" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a natural right fold.</source>
          <target state="translated">자연스러운 오른쪽 접기 로 게으른 &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 덩어리를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5873c7e81d4758c499eb387c1f60b147ddd2dffd" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a strict, tail-recursive, accumulating left fold.</source>
          <target state="translated">엄밀한 꼬리 재귀 적산 왼쪽 폴드와 함께 게으른 &lt;code&gt;&lt;a href=&quot;data-text-internal-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 덩어리를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b9ce1f22a7507727e45b588cca6a8c2b1ffc5b1b" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a natural right fold.</source>
          <target state="translated">자연스러운 오른쪽 접기 로 게으른 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 덩어리를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9bc1680efa5cec582f6aa88b4980972853912bd6" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; with a strict, tail-recursive, accumulating left fold.</source>
          <target state="translated">엄밀한 꼬리 재귀 적산 왼쪽 폴드와 함께 게으른 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 덩어리를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="008bf2f62c091044db3bdb944b0e7b432e3a7322" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy ByteString with a natural right fold.</source>
          <target state="translated">게으른 ByteString의 덩어리를 자연스럽게 접습니다.</target>
        </trans-unit>
        <trans-unit id="2858b9cf2c03c4f1085ceb512d8f49fa3e00c28f" translate="yes" xml:space="preserve">
          <source>Consume the chunks of a lazy ByteString with a strict, tail-recursive, accumulating left fold.</source>
          <target state="translated">엄격한 꼬리 재귀 적산 왼쪽 폴드와 함께 게으른 ByteString 청크를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cf12704be37bd6ccd3de06eea21b725a20d88ab4" translate="yes" xml:space="preserve">
          <source>Consumed</source>
          <target state="translated">Consumed</target>
        </trans-unit>
        <trans-unit id="4313c54a3c25ad540a82980f7e3dd5b931a8f67c" translate="yes" xml:space="preserve">
          <source>Consumes and returns the next character, if it satisfies the specified predicate.</source>
          <target state="translated">지정된 술어를 만족하면 다음 문자를 소비하고 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3f3766e538c9f981b8d9685d841c0000c29d719f" translate="yes" xml:space="preserve">
          <source>Consumes and returns the next character. Fails if there is no input left.</source>
          <target state="translated">다음 문자를 소비하고 반환합니다. 남아있는 입력이 없으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="cbc747123f7b7ecd93fd53d3c24d63e771fcde4f" translate="yes" xml:space="preserve">
          <source>Cont</source>
          <target state="translated">Cont</target>
        </trans-unit>
        <trans-unit id="f6d09d1bee516498d232f4748ebcb4f020174919" translate="yes" xml:space="preserve">
          <source>ContT</source>
          <target state="translated">ContT</target>
        </trans-unit>
        <trans-unit id="db786cc02bae301b5a9b0e190fc7850f8f1da28d" translate="yes" xml:space="preserve">
          <source>Contains the import list of the module.</source>
          <target state="translated">모듈의 가져 오기 목록을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="94caf119019f6e259e7477ddfc9cff4975eaeddf" translate="yes" xml:space="preserve">
          <source>Contains the various unsafe operations that can be performed on arrays.</source>
          <target state="translated">어레이에서 수행 할 수있는 다양한 안전하지 않은 작업을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="f5cbdf6bfb51439be085b5c6b7460a7c91eabc3c" translate="yes" xml:space="preserve">
          <source>Contents</source>
          <target state="translated">Contents</target>
        </trans-unit>
        <trans-unit id="e416e43f493dc03bd7f45d55965a398e7052a174" translate="yes" xml:space="preserve">
          <source>Contents:</source>
          <target state="translated">Contents:</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="759afc40e0ad3a48d4a339d746d617abcf884d69" translate="yes" xml:space="preserve">
          <source>Continuation &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">지속 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f5aac91d70abca445d7979bfc8b0c3a7dd9b72ea" translate="yes" xml:space="preserve">
          <source>Continuation monad. &lt;code&gt;Cont r a&lt;/code&gt; is a CPS (&quot;continuation-passing style&quot;) computation that produces an intermediate result of type &lt;code&gt;a&lt;/code&gt; within a CPS computation whose final result type is &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">연속 모나드. &lt;code&gt;Cont r a&lt;/code&gt; CPS 형의 중간 결과를 생성 ( &quot;연속 통과 스타일&quot;) 연산이다 &lt;code&gt;a&lt;/code&gt; 그 최종 결과 형태 인 CPS 연산에서 &lt;code&gt;r&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f0bb7b960cfef6ddaf9904fca03950cf9da86c51" translate="yes" xml:space="preserve">
          <source>Continuation monads.</source>
          <target state="translated">연속 모나드.</target>
        </trans-unit>
        <trans-unit id="b49577918a547ac64f63c58759e01d168ba6e73e" translate="yes" xml:space="preserve">
          <source>Continuation to use for computing the final result and the tail of its side-effect (the written bytes).</source>
          <target state="translated">최종 결과 및 부작용의 꼬리 (쓰기 된 바이트)를 계산하는 데 계속 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2a779de660b6a7cee1b66b5e5c80edd2c856f030" translate="yes" xml:space="preserve">
          <source>Continue compilation as far as possible on errors</source>
          <target state="translated">오류에 대해 가능한 한 컴파일을 계속하십시오.</target>
        </trans-unit>
        <trans-unit id="1896bb514a2ea00bdcb533f36dbf51abda3d1eb2" translate="yes" xml:space="preserve">
          <source>Continue the current evaluation, when stopped at a breakpoint.</source>
          <target state="translated">중단 점에서 중지되면 현재 평가를 계속하십시오.</target>
        </trans-unit>
        <trans-unit id="b20d37a3583293b7dc41e6c569837e9748090ac3" translate="yes" xml:space="preserve">
          <source>Continuing with our example from the last section, we can write a simple plugin that just prints out the name of all the non-recursive bindings in a module it compiles:</source>
          <target state="translated">마지막 섹션의 예제를 계속 진행하면서 컴파일하는 모듈에서 모든 비 재귀 바인딩의 이름을 인쇄하는 간단한 플러그인을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95a21dcc84564345047a8d939ae4ecb365bd1446" translate="yes" xml:space="preserve">
          <source>Contract a filename, based on a relative path. Note that the resulting path will never introduce &lt;code&gt;..&lt;/code&gt; paths, as the presence of symlinks means &lt;code&gt;../b&lt;/code&gt; may not reach &lt;code&gt;a/b&lt;/code&gt; if it starts from &lt;code&gt;a/c&lt;/code&gt;. For a worked example see &lt;a href=&quot;http://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">상대 경로를 기준으로 파일 이름을 계약하십시오. 심볼릭 링크의 존재는 &lt;code&gt;../b&lt;/code&gt; 가 &lt;code&gt;a/c&lt;/code&gt; 에서 시작하면 &lt;code&gt;a/b&lt;/code&gt; 에 도달하지 않을 수 있으므로 결과 경로는 &lt;code&gt;..&lt;/code&gt; 경로 를 절대로 도입 하지 않습니다 . 효과적인 예제는 &lt;a href=&quot;http://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html&quot;&gt;이 블로그 게시물을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9663357c6f785171025473e9b8f9bf0fc5a27cab" translate="yes" xml:space="preserve">
          <source>Contract a filename, based on a relative path. Note that the resulting path will never introduce &lt;code&gt;..&lt;/code&gt; paths, as the presence of symlinks means &lt;code&gt;../b&lt;/code&gt; may not reach &lt;code&gt;a/b&lt;/code&gt; if it starts from &lt;code&gt;a/c&lt;/code&gt;. For a worked example see &lt;a href=&quot;https://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">상대 경로를 기반으로 파일 이름을 계약하십시오. 결과 경로는 &lt;code&gt;..&lt;/code&gt; 경로를 도입하지 않습니다 . 심볼릭 링크 가 있다는 것은 &lt;code&gt;../b&lt;/code&gt; 가 &lt;code&gt;a/c&lt;/code&gt; 에서 시작 하는 경우 &lt;code&gt;a/b&lt;/code&gt; 에 도달하지 못할 수 있음을 의미하기 때문 입니다. 실제 예제는 &lt;a href=&quot;https://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html&quot;&gt;이 블로그 게시물을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="70c70eb080f2d52cac4b5198ebf02ee0681cf70f" translate="yes" xml:space="preserve">
          <source>Contrast this with &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldrM&quot;&gt;foldrM&lt;/a&gt;&lt;/code&gt;, which uses &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; to sequence the effects, and therefore diverges (running out of space) when given an unbounded input structure. The short-circuit condition is never reached</source>
          <target state="translated">이것을 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldrM&quot;&gt;foldrM&lt;/a&gt;&lt;/code&gt; 을 사용 하여 효과를 시퀀스하는 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 과 대조 하여 제한되지 않은 입력 구조가 주어지면 발산 (공간 부족)합니다. 단락 상태에 도달하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="008c624abc4dd957c3b569ffba23b2ef6ff4774f" translate="yes" xml:space="preserve">
          <source>Contrast this with the special treatment of named wildcards in type signatures (&lt;a href=&quot;#named-wildcards&quot;&gt;Named Wildcards&lt;/a&gt;).</source>
          <target state="translated">이것을 타입 시그니처 ( &lt;a href=&quot;#named-wildcards&quot;&gt;Named Wildcards&lt;/a&gt; )에서 명명 된 와일드 카드의 특수 처리와 대조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac04c4319677181214aaf5d5295a93de6915f858" translate="yes" xml:space="preserve">
          <source>Contrast this with the special treatment of named wildcards in type signatures (&lt;a href=&quot;partial_type_signatures#named-wildcards&quot;&gt;Named Wildcards&lt;/a&gt;).</source>
          <target state="translated">이를 형식 서명 ( &lt;a href=&quot;partial_type_signatures#named-wildcards&quot;&gt;Named Wildcards&lt;/a&gt; )에서 명명 된 와일드 카드의 특수 처리와 대조합니다 .</target>
        </trans-unit>
        <trans-unit id="18a8eb3dc8f8b2d90b0e435bb2073e587ebd6a81" translate="yes" xml:space="preserve">
          <source>Contravariant</source>
          <target state="translated">Contravariant</target>
        </trans-unit>
        <trans-unit id="e2653d10632c0f7beb41009c9e821fb1d07faa1c" translate="yes" xml:space="preserve">
          <source>Contravariant Functors</source>
          <target state="translated">다변량 펑터</target>
        </trans-unit>
        <trans-unit id="443958f25681d009bb993fd1d5b07011d260a11f" translate="yes" xml:space="preserve">
          <source>Contravariant maps for tactics</source>
          <target state="translated">전술에 대한 반 변형지도</target>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="a99d4f40800f2a960fb18d14b5fb4422ea9f5f81" translate="yes" xml:space="preserve">
          <source>Control over lifetype</source>
          <target state="translated">생명 형에 대한 통제</target>
        </trans-unit>
        <trans-unit id="db4db64a9e962ed5747e6b8156712fb90401488a" translate="yes" xml:space="preserve">
          <source>Control the rendering of floating point numbers.</source>
          <target state="translated">부동 소수점 숫자의 렌더링을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="0b6ef37e35fb2a9630357c328a739b15875132a9" translate="yes" xml:space="preserve">
          <source>Control verbosity. Verbosity levels range from 0-2, where the default is 1, and &lt;code&gt;-v&lt;/code&gt; alone selects level 2.</source>
          <target state="translated">세부 사항을 제어합니다. 상세 레벨의 범위는 0-2이며, 기본값은 1이며 &lt;code&gt;-v&lt;/code&gt; 만으로 레벨 2를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="2f72ca83ae117700d88b0cd7f55fcf4ae60a74d0" translate="yes" xml:space="preserve">
          <source>Control whether the RTS behaviour can be tweaked via command-line flags and the &lt;code&gt;GHCRTS&lt;/code&gt; environment variable. Using &lt;code&gt;none&lt;/code&gt; means no RTS flags can be given; &lt;code&gt;some&lt;/code&gt; means only a minimum of safe options can be given (the default); &lt;code&gt;all&lt;/code&gt; (or no argument at all) means that all RTS flags are permitted; &lt;code&gt;ignore&lt;/code&gt; means RTS flags can be given, but are treated as regular arguments and passed to the Haskell program as arguments; &lt;code&gt;ignoreAll&lt;/code&gt; is the same as &lt;code&gt;ignore&lt;/code&gt;, but &lt;code&gt;GHCRTS&lt;/code&gt; is also ignored. &lt;code&gt;-rtsopts&lt;/code&gt; does not affect &lt;code&gt;-with-rtsopts&lt;/code&gt; behavior; flags passed via &lt;code&gt;-with-rtsopts&lt;/code&gt; are used regardless of &lt;code&gt;-rtsopts&lt;/code&gt;.</source>
          <target state="translated">명령 행 플래그 및 &lt;code&gt;GHCRTS&lt;/code&gt; 환경 변수 를 통해 RTS 동작을 조정할 수 있는지 여부를 제어 하십시오. &lt;code&gt;none&lt;/code&gt; 을 사용하면 RTS 플래그를 지정할 수 없습니다. &lt;code&gt;some&lt;/code&gt; 는 최소 안전 옵션 만 제공 할 수 있음을 의미합니다 (기본값). &lt;code&gt;all&lt;/code&gt; (또는 인수가 전혀 없음)은 모든 RTS 플래그가 허용됨을 의미합니다. &lt;code&gt;ignore&lt;/code&gt; 는 RTS 플래그가 제공 될 수 있지만 정규 인수로 처리되어 Haskell 프로그램에 인수로 전달됨을 의미합니다. &lt;code&gt;ignoreAll&lt;/code&gt; 은 &lt;code&gt;ignore&lt;/code&gt; 와 동일 하지만 &lt;code&gt;GHCRTS&lt;/code&gt; 도 무시됩니다. &lt;code&gt;-rtsopts&lt;/code&gt; 는 -with &lt;code&gt;-with-rtsopts&lt;/code&gt; 동작에 영향을 미치지 않습니다 . &lt;code&gt;-with-rtsopts&lt;/code&gt; 를 통해 전달 된 플래그 &lt;code&gt;-rtsopts&lt;/code&gt; 에 관계없이 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="9ddba1aa2b8740846582df2425d6760f92e3d0f1" translate="yes" xml:space="preserve">
          <source>Control-C</source>
          <target state="translated">Control-C</target>
        </trans-unit>
        <trans-unit id="a947c53f739ad81f1acf6d7e50f0e35ff6fe2716" translate="yes" xml:space="preserve">
          <source>Control-C handling on Unix</source>
          <target state="translated">유닉스에서의 Control-C 처리</target>
        </trans-unit>
        <trans-unit id="ba1eeec2c01c8f6e60827d09f9c5bfc96582a1fb" translate="yes" xml:space="preserve">
          <source>Control-D</source>
          <target state="translated">Control-D</target>
        </trans-unit>
        <trans-unit id="4511d631680da8a44e3325201a0809c9eb26c605" translate="yes" xml:space="preserve">
          <source>Control.Applicative</source>
          <target state="translated">Control.Applicative</target>
        </trans-unit>
        <trans-unit id="7cdb17ee9ff6600603494ff42270ffd016b9204f" translate="yes" xml:space="preserve">
          <source>Control.Applicative.Backwards</source>
          <target state="translated">Control.Applicative.Backwards</target>
        </trans-unit>
        <trans-unit id="edc5f3ca3d8db72769e30b42bb7ac57e3c6c1439" translate="yes" xml:space="preserve">
          <source>Control.Applicative.Lift</source>
          <target state="translated">Control.Applicative.Lift</target>
        </trans-unit>
        <trans-unit id="6ff5edd9d9ec603db5c46a14a631e95d05949658" translate="yes" xml:space="preserve">
          <source>Control.Arrow</source>
          <target state="translated">Control.Arrow</target>
        </trans-unit>
        <trans-unit id="37457c94fe6146a1b986239bf5c728bf98f6b094" translate="yes" xml:space="preserve">
          <source>Control.Category</source>
          <target state="translated">Control.Category</target>
        </trans-unit>
        <trans-unit id="cf26d765ed001864f5b2fcbe9ca44af826190c44" translate="yes" xml:space="preserve">
          <source>Control.Concurrent</source>
          <target state="translated">Control.Concurrent</target>
        </trans-unit>
        <trans-unit id="73fa379214f17675b6ae81e583feabee7d6208aa" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.Chan</source>
          <target state="translated">Control.Concurrent.Chan</target>
        </trans-unit>
        <trans-unit id="ed0308fb66d37563635d9e49be001913df1a8aca" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.MVar</source>
          <target state="translated">Control.Concurrent.MVar</target>
        </trans-unit>
        <trans-unit id="61f10c3323bc4d768a0b627cd4fae1ca08d953bf" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.QSem</source>
          <target state="translated">Control.Concurrent.QSem</target>
        </trans-unit>
        <trans-unit id="c5c49dac901a04507955d6163481c1b647d53aed" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.QSemN</source>
          <target state="translated">Control.Concurrent.QSemN</target>
        </trans-unit>
        <trans-unit id="c937b43e7fd67b62172df97e953fa49416eb3ead" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TArray</source>
          <target state="translated">Control.Concurrent.STM.TArray</target>
        </trans-unit>
        <trans-unit id="f8e53fde32d3ac5c13461f756ae00f5fa310680e" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TBQueue</source>
          <target state="translated">Control.Concurrent.STM.TBQueue</target>
        </trans-unit>
        <trans-unit id="ace5a1d4e657e7330376812687524e770f0e52b4" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TChan</source>
          <target state="translated">Control.Concurrent.STM.TChan</target>
        </trans-unit>
        <trans-unit id="6ed79ee66f306b0da615380cba46e5283be08865" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TMVar</source>
          <target state="translated">Control.Concurrent.STM.TMVar</target>
        </trans-unit>
        <trans-unit id="6d19c24669e701a2d7c4d03640bdc5ff1f04d3f4" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TQueue</source>
          <target state="translated">Control.Concurrent.STM.TQueue</target>
        </trans-unit>
        <trans-unit id="14544d7a03e24c9431c9f3a4880f83b145e7ab7b" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TSem</source>
          <target state="translated">Control.Concurrent.STM.TSem</target>
        </trans-unit>
        <trans-unit id="ab65f4db921c77efc32ced0c51f9a24ca1e480d1" translate="yes" xml:space="preserve">
          <source>Control.Concurrent.STM.TVar</source>
          <target state="translated">Control.Concurrent.STM.TVar</target>
        </trans-unit>
        <trans-unit id="30887df360beccfa667ab4d2e8f50031842e6ffb" translate="yes" xml:space="preserve">
          <source>Control.DeepSeq</source>
          <target state="translated">Control.DeepSeq</target>
        </trans-unit>
        <trans-unit id="0e1aa0ea4d23e309d09d22e5d97b167abedb7823" translate="yes" xml:space="preserve">
          <source>Control.Exception</source>
          <target state="translated">Control.Exception</target>
        </trans-unit>
        <trans-unit id="ae0e25272afc82ddf0f1336bd7ff604af23b0eb3" translate="yes" xml:space="preserve">
          <source>Control.Monad</source>
          <target state="translated">Control.Monad</target>
        </trans-unit>
        <trans-unit id="974ca26a43608abbd9ea5de330cf276f85900ea0" translate="yes" xml:space="preserve">
          <source>Control.Monad.Catch</source>
          <target state="translated">Control.Monad.Catch</target>
        </trans-unit>
        <trans-unit id="ebec3819bf64dc19a1bb2aa42503f704152c92d5" translate="yes" xml:space="preserve">
          <source>Control.Monad.Catch.Pure</source>
          <target state="translated">Control.Monad.Catch.Pure</target>
        </trans-unit>
        <trans-unit id="072235ab16047be447ef5dbe9624632280a5cda7" translate="yes" xml:space="preserve">
          <source>Control.Monad.Cont</source>
          <target state="translated">Control.Monad.Cont</target>
        </trans-unit>
        <trans-unit id="a06adfcdd725cc45c7b777a5eabda1702940ae9a" translate="yes" xml:space="preserve">
          <source>Control.Monad.Error</source>
          <target state="translated">Control.Monad.Error</target>
        </trans-unit>
        <trans-unit id="090f5a2d43666e0b3b3364cf68f1e49b843e16ac" translate="yes" xml:space="preserve">
          <source>Control.Monad.Error.Class</source>
          <target state="translated">Control.Monad.Error.Class</target>
        </trans-unit>
        <trans-unit id="8dd2cf8685f98437d62feb2da158729074523ca8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Except</source>
          <target state="translated">Control.Monad.Except</target>
        </trans-unit>
        <trans-unit id="606ac30d070e7171d627aedaae6a560de9e7bad3" translate="yes" xml:space="preserve">
          <source>Control.Monad.Fail</source>
          <target state="translated">Control.Monad.Fail</target>
        </trans-unit>
        <trans-unit id="1f0bfc4b673b6c810bd329b98ed961829ea42687" translate="yes" xml:space="preserve">
          <source>Control.Monad.Fix</source>
          <target state="translated">Control.Monad.Fix</target>
        </trans-unit>
        <trans-unit id="82dfb4fa8104b5914da63d078dc514adfe5e7148" translate="yes" xml:space="preserve">
          <source>Control.Monad.IO.Class</source>
          <target state="translated">Control.Monad.IO.Class</target>
        </trans-unit>
        <trans-unit id="27d09a75ae0a4657d5e5b791cda5b456aaaa0828" translate="yes" xml:space="preserve">
          <source>Control.Monad.Instances</source>
          <target state="translated">Control.Monad.Instances</target>
        </trans-unit>
        <trans-unit id="45f2844c57d18fb3e712e58b937c1a86db5462e2" translate="yes" xml:space="preserve">
          <source>Control.Monad.List</source>
          <target state="translated">Control.Monad.List</target>
        </trans-unit>
        <trans-unit id="145ea034a1a6bfa4d9a736992f0fb8b8de1f54a5" translate="yes" xml:space="preserve">
          <source>Control.Monad.RWS.Lazy</source>
          <target state="translated">Control.Monad.RWS.Lazy</target>
        </trans-unit>
        <trans-unit id="26558601213fe7fdac24a247fce6298eeb41324c" translate="yes" xml:space="preserve">
          <source>Control.Monad.RWS.Strict</source>
          <target state="translated">Control.Monad.RWS.Strict</target>
        </trans-unit>
        <trans-unit id="f4724058f59389b34b5817e067ae3b8c1e86971f" translate="yes" xml:space="preserve">
          <source>Control.Monad.Reader</source>
          <target state="translated">Control.Monad.Reader</target>
        </trans-unit>
        <trans-unit id="05cb4b25947768699d0141483ee2f038dcd61697" translate="yes" xml:space="preserve">
          <source>Control.Monad.Reader.Class</source>
          <target state="translated">Control.Monad.Reader.Class</target>
        </trans-unit>
        <trans-unit id="0b837a7b5848e20a3e3c8e3efa7e008263cea086" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST</source>
          <target state="translated">Control.Monad.ST</target>
        </trans-unit>
        <trans-unit id="3f76fcc8a2ef0110e9175026f918b7ba69c323c0" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Lazy</source>
          <target state="translated">Control.Monad.ST.Lazy</target>
        </trans-unit>
        <trans-unit id="418d57912482f4399c6c57d791c995a4f2b4a78d" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Lazy.Safe</source>
          <target state="translated">Control.Monad.ST.Lazy.Safe</target>
        </trans-unit>
        <trans-unit id="045bbd90bf485252be2546913919c937fda5d3e8" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Lazy.Unsafe</source>
          <target state="translated">Control.Monad.ST.Lazy.Unsafe</target>
        </trans-unit>
        <trans-unit id="a7f54b6294523d96bf7cae459e883fb4b80a0f34" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Safe</source>
          <target state="translated">Control.Monad.ST.Safe</target>
        </trans-unit>
        <trans-unit id="2223de15e18690b25c4ad771884743118abbc8ec" translate="yes" xml:space="preserve">
          <source>Control.Monad.ST.Unsafe</source>
          <target state="translated">Control.Monad.ST.Unsafe</target>
        </trans-unit>
        <trans-unit id="29c2210f0e698c51d7585295ec24cc8d40e5559f" translate="yes" xml:space="preserve">
          <source>Control.Monad.STM</source>
          <target state="translated">Control.Monad.STM</target>
        </trans-unit>
        <trans-unit id="3d0faa8f2521422fc5b5727ad873944b27bcff6f" translate="yes" xml:space="preserve">
          <source>Control.Monad.Signatures</source>
          <target state="translated">Control.Monad.Signatures</target>
        </trans-unit>
        <trans-unit id="c2802414d1b059cb0094fd293a49743f94002cd3" translate="yes" xml:space="preserve">
          <source>Control.Monad.State.Class</source>
          <target state="translated">Control.Monad.State.Class</target>
        </trans-unit>
        <trans-unit id="15531a7195d4187f3cddd3166d49bc6b415f5931" translate="yes" xml:space="preserve">
          <source>Control.Monad.State.Lazy</source>
          <target state="translated">Control.Monad.State.Lazy</target>
        </trans-unit>
        <trans-unit id="b0eafe241f8970912c2cafd010efdd620fc9184a" translate="yes" xml:space="preserve">
          <source>Control.Monad.State.Strict</source>
          <target state="translated">Control.Monad.State.Strict</target>
        </trans-unit>
        <trans-unit id="81dc73a79818a33e2b02b8cf485869d0b8732aa8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Accum</source>
          <target state="translated">Control.Monad.Trans.Accum</target>
        </trans-unit>
        <trans-unit id="7554c0a6f80ff2128ad69324c36d2e377129c041" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Class</source>
          <target state="translated">Control.Monad.Trans.Class</target>
        </trans-unit>
        <trans-unit id="f79921ad7fb410600b0a0c752805e701f1bf5e34" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Cont</source>
          <target state="translated">Control.Monad.Trans.Cont</target>
        </trans-unit>
        <trans-unit id="458fb22402868d5c4b5880060b4281a2095c63b8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Error</source>
          <target state="translated">Control.Monad.Trans.Error</target>
        </trans-unit>
        <trans-unit id="10d041bae4f737af7274d65ab91df147c4d2aae8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Except</source>
          <target state="translated">Control.Monad.Trans.Except</target>
        </trans-unit>
        <trans-unit id="de796ae786c3643528fd4d068522599a4b6c66dc" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Identity</source>
          <target state="translated">Control.Monad.Trans.Identity</target>
        </trans-unit>
        <trans-unit id="decb4a7b00dfe9b518249a4f7592246e1ee229f0" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.List</source>
          <target state="translated">Control.Monad.Trans.List</target>
        </trans-unit>
        <trans-unit id="c00964e20de662eee9d788996980ce96e611190b" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Maybe</source>
          <target state="translated">Control.Monad.Trans.Maybe</target>
        </trans-unit>
        <trans-unit id="a6e396a97b523509230d2cbe6cd660e53ec9dc37" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.RWS.CPS</source>
          <target state="translated">Control.Monad.Trans.RWS.CPS</target>
        </trans-unit>
        <trans-unit id="1bdccaf141a8f972c393e6447c09e138a9ae70b8" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.RWS.Lazy</source>
          <target state="translated">Control.Monad.Trans.RWS.Lazy</target>
        </trans-unit>
        <trans-unit id="274974d12143a83ecb78a678305e208ddd07c876" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.RWS.Strict</source>
          <target state="translated">Control.Monad.Trans.RWS.Strict</target>
        </trans-unit>
        <trans-unit id="313da9376b611ba462db7d9d7d0867d1291903c1" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Reader</source>
          <target state="translated">Control.Monad.Trans.Reader</target>
        </trans-unit>
        <trans-unit id="c27d6621d19100422e3c8ddb622fbf85f28df17b" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Select</source>
          <target state="translated">Control.Monad.Trans.Select</target>
        </trans-unit>
        <trans-unit id="8a2cfb8ddd1e04ccb44e6a026f03f56efe34a999" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.State.Lazy</source>
          <target state="translated">Control.Monad.Trans.State.Lazy</target>
        </trans-unit>
        <trans-unit id="a38e078f9ed2fdad6e6ad25947bc4156a33c8630" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.State.Strict</source>
          <target state="translated">Control.Monad.Trans.State.Strict</target>
        </trans-unit>
        <trans-unit id="8cc03e36817d3710074d888204004d99fd0c9d42" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Writer.CPS</source>
          <target state="translated">Control.Monad.Trans.Writer.CPS</target>
        </trans-unit>
        <trans-unit id="7aad1efd922305b7aab7e0a73230b9d451064cf6" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Writer.Lazy</source>
          <target state="translated">Control.Monad.Trans.Writer.Lazy</target>
        </trans-unit>
        <trans-unit id="e302a223cc41d81923a8e6c86cc7fb143de0ae4f" translate="yes" xml:space="preserve">
          <source>Control.Monad.Trans.Writer.Strict</source>
          <target state="translated">Control.Monad.Trans.Writer.Strict</target>
        </trans-unit>
        <trans-unit id="6fc5c908ab365348c8011d58474fe282894e7e49" translate="yes" xml:space="preserve">
          <source>Control.Monad.Writer.Class</source>
          <target state="translated">Control.Monad.Writer.Class</target>
        </trans-unit>
        <trans-unit id="28268221721a628c7904391064fb4353cb6f340d" translate="yes" xml:space="preserve">
          <source>Control.Monad.Writer.Lazy</source>
          <target state="translated">Control.Monad.Writer.Lazy</target>
        </trans-unit>
        <trans-unit id="71b8413cff57c260d48931edfb611c0648ce2f97" translate="yes" xml:space="preserve">
          <source>Control.Monad.Writer.Strict</source>
          <target state="translated">Control.Monad.Writer.Strict</target>
        </trans-unit>
        <trans-unit id="b14f785feedbb962ee56354141b1c432e908223b" translate="yes" xml:space="preserve">
          <source>Control.Monad.Zip</source>
          <target state="translated">Control.Monad.Zip</target>
        </trans-unit>
        <trans-unit id="4e339e42ff90594d3d6953c5325c9130c04bf74a" translate="yes" xml:space="preserve">
          <source>ControlCharacter</source>
          <target state="translated">ControlCharacter</target>
        </trans-unit>
        <trans-unit id="71f004fe90297850d5fabf4527dff81a7cfa4409" translate="yes" xml:space="preserve">
          <source>Controllable error handling</source>
          <target state="translated">제어 가능한 오류 처리</target>
        </trans-unit>
        <trans-unit id="62f4bec8a3402e19d696b7f3b4bbf935d70ef75c" translate="yes" xml:space="preserve">
          <source>Controlling chunk boundaries</source>
          <target state="translated">청크 경계 제어</target>
        </trans-unit>
        <trans-unit id="ff13a07a9dd6ae99c44c021135e1e2e56d5aa833" translate="yes" xml:space="preserve">
          <source>Controls finalization of a &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt;, that is, what should happen if the &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; becomes unreachable. Visually, these data constructors are appropriate in these scenarios:</source>
          <target state="translated">컨트롤은 완성 될 &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 경우 어떻게해야하는지입니다, &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 이 도달하게된다. 시각적으로 이러한 데이터 생성자는 다음 시나리오에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="525e46127102da694ad76f087b77331d6d9c30b9" translate="yes" xml:space="preserve">
          <source>Controls whether GHC displays a line of the original source code where the error was detected. This also affects the associated caret symbol that points at the region of code at fault. The flag is on by default.</source>
          <target state="translated">GHC가 오류가 감지 된 원래 소스 코드의 행을 표시할지 여부를 제어합니다. 이것은 결함이있는 코드 영역을 가리키는 관련 캐럿 기호에도 영향을줍니다. 플래그는 기본적으로 켜져 있습니다.</target>
        </trans-unit>
        <trans-unit id="85d7112dc03ecd7a181b360083728d01f6db75f0" translate="yes" xml:space="preserve">
          <source>Convenience definitions for working with lazy &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 작업을위한 편의성 정의 .</target>
        </trans-unit>
        <trans-unit id="f310e7c1c541dd9ac6157b55814e9889dc7b705f" translate="yes" xml:space="preserve">
          <source>Convenience definitions for working with lazy &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 작업에 대한 편의 정의 .</target>
        </trans-unit>
        <trans-unit id="54f8847271275c20882f5493b542952a954f1fc1" translate="yes" xml:space="preserve">
          <source>Convenience definitions for working with lazy &lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">lazy &lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 작업을위한 편의 정의 .</target>
        </trans-unit>
        <trans-unit id="e3771c790b5f7ae4b73a634398817e36b854bd7d" translate="yes" xml:space="preserve">
          <source>Convenience function: algebraic data types</source>
          <target state="translated">편의 기능 : 대수 데이터 유형</target>
        </trans-unit>
        <trans-unit id="1c4be7e6e4f92b537985118ffae61f13674d390a" translate="yes" xml:space="preserve">
          <source>Convenience functions</source>
          <target state="translated">편의 기능</target>
        </trans-unit>
        <trans-unit id="8c00f8befc4093dd54ec39a47878bf39ae257a00" translate="yes" xml:space="preserve">
          <source>Convenience functions: take type constructors apart</source>
          <target state="translated">편의 함수 : 타입 생성자를 분리</target>
        </trans-unit>
        <trans-unit id="3746e9bbd44ea64ae0e92d5854024253c89a7d89" translate="yes" xml:space="preserve">
          <source>Convenience re-exports</source>
          <target state="translated">편의성 재수출</target>
        </trans-unit>
        <trans-unit id="61856b8c17a4ff32006fe4b7dcc6f96f253b2120" translate="yes" xml:space="preserve">
          <source>Conventions</source>
          <target state="translated">Conventions</target>
        </trans-unit>
        <trans-unit id="6e1a38ade6348814bebf27792d9b350289eb14e7" translate="yes" xml:space="preserve">
          <source>Conversely, an implementation of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; for a structure that can accommodate a large (and possibly unbounded) number of elements is expected to be lazy in the tail of the input, allowing operators that are lazy in the accumulator to yield intermediate results incrementally. Such folds are right-associative, with the tail of the stream returned as a lazily evaluated component of the result (an element of a tuple or some other non-strict constructor, e.g. the &lt;code&gt;(:)&lt;/code&gt; constructor for lists).</source>
          <target state="translated">반대로, 많은 (그리고 제한되지 않은) 수의 요소를 수용 할 수있는 구조에 대한 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 구현은 입력 끝 부분에서 게으른 것으로 예상되므로 누산기에서 게으른 연산자가 점진적으로 중간 결과를 생성 할 수 있습니다. 이러한 폴드는 결과의 느리게 평가 된 구성 요소 (튜플의 요소 또는 기타 엄격하지 않은 생성자, 예를 들어 목록 의 &lt;code&gt;(:)&lt;/code&gt; 생성자) 로 반환되는 스트림의 꼬리와 함께 오른쪽 연관 입니다.</target>
        </trans-unit>
        <trans-unit id="4aee964d248573317776601f140d7ca5f9eeecdf" translate="yes" xml:space="preserve">
          <source>Conversely, an implementation of &lt;code&gt;Foldable&lt;/code&gt; for a new structure should ensure that &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;` actually performs a strict left-associative reduction.</source>
          <target state="translated">반대로, 새로운 구조에 대한 &lt;code&gt;Foldable&lt;/code&gt; 구현은 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; `이 실제로 엄격한 왼쪽 연관 축소를 수행 하도록 보장해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d1cc7b75ffd93dc0d3a0ea528b0cc946cb212f85" translate="yes" xml:space="preserve">
          <source>Conversely, any entity requested by a signature can be provided by a reexport from the implementing module. This is different from &lt;code&gt;hs-boot&lt;/code&gt; files, which require every entity to be defined locally in the implementing module.</source>
          <target state="translated">반대로, 서명이 요청한 모든 엔티티는 구현 모듈에서 다시 내보내기하여 제공 할 수 있습니다. 이것은 모든 엔티티를 구현 모듈에서 로컬로 정의해야하는 &lt;code&gt;hs-boot&lt;/code&gt; 파일과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="9151f8433f795cb0f0b5b6743aeb7de77ec49f00" translate="yes" xml:space="preserve">
          <source>Conversion</source>
          <target state="translated">Conversion</target>
        </trans-unit>
        <trans-unit id="03f98de60dba44602f5d22b2db4617355faad3bc" translate="yes" xml:space="preserve">
          <source>Conversion between &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;. Should compile to a no-op.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 사이의 변환 . no-op로 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="986e019e1554ed8aab166bb45b187eb2173e39bf" translate="yes" xml:space="preserve">
          <source>Conversion between &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;. Should compile to a no-op.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 간의 변환 . no-op으로 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="79dde3e5a6527f2bdca57b0b55fd51c15b57b26f" translate="yes" xml:space="preserve">
          <source>Conversion between &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;. Should compile to a no-op.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 간의 변환 . no-op으로 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="a036cbcccc8b7bf9599b3a1632ae1c559d09835e" translate="yes" xml:space="preserve">
          <source>Conversion from &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s in various encodings.</source>
          <target state="translated">다양한 인코딩 에서 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 로 변환</target>
        </trans-unit>
        <trans-unit id="80f765369ff28710f3a5a6531c73911c37430d94" translate="yes" xml:space="preserve">
          <source>Conversion from &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s in various encodings.</source>
          <target state="translated">다양한 인코딩 으로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 로 변환 .</target>
        </trans-unit>
        <trans-unit id="6c523e4f4b1bc95f30eed411a8519db7fdad9d29" translate="yes" xml:space="preserve">
          <source>Conversion from &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; into &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;s in various encodings.</source>
          <target state="translated">다양한 인코딩 으로 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 로 변환 .</target>
        </trans-unit>
        <trans-unit id="80b3f7717d1704bd9b51def9939f7b97cb65b991" translate="yes" xml:space="preserve">
          <source>Conversion from a &lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; (that is &lt;code&gt;&lt;a href=&quot;ghc-real#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;). A floating literal stands for an application of &lt;code&gt;&lt;a href=&quot;ghc-real#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; to a value of type &lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 에서 변환 (즉, &lt;code&gt;&lt;a href=&quot;ghc-real#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; ). 부동 리터럴은 &lt;code&gt;&lt;a href=&quot;ghc-real#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 유형의 값으로 적용하는 것을 나타내 므로 이러한 리터럴에는 &lt;code&gt;(&lt;a href=&quot;ghc-real#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; 유형 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="87d64cfad96fd6d4d5f6bc4485e81af8ea5782ad" translate="yes" xml:space="preserve">
          <source>Conversion from a &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; (that is &lt;code&gt;&lt;a href=&quot;data-ratio#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;). A floating literal stands for an application of &lt;code&gt;&lt;a href=&quot;prelude#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; to a value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 에서 변환 (즉, &lt;code&gt;&lt;a href=&quot;data-ratio#t:Ratio&quot;&gt;Ratio&lt;/a&gt; &lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; ). 부동 리터럴은 &lt;code&gt;&lt;a href=&quot;prelude#v:fromRational&quot;&gt;fromRational&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 유형의 값으로 적용하는 것을 나타내 므로 이러한 리터럴에는 &lt;code&gt;(&lt;a href=&quot;prelude#t:Fractional&quot;&gt;Fractional&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; 유형 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9354fe86ceef93fe0187009815d9b7830e12fbb4" translate="yes" xml:space="preserve">
          <source>Conversion from an &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;. An integer literal represents the application of the function &lt;code&gt;&lt;a href=&quot;ghc-num#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; to the appropriate value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 에서 변환 . 정수 리터럴 함수의 응용 나타낸다 &lt;code&gt;&lt;a href=&quot;ghc-num#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; 유형의 적절한 값으로 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 이므로 이러한 리터럴 타입이, &lt;code&gt;(&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8abc8ebb7e52b758f68315accd53b140e87db8e3" translate="yes" xml:space="preserve">
          <source>Conversion from an &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;. An integer literal represents the application of the function &lt;code&gt;&lt;a href=&quot;prelude#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; to the appropriate value of type &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;, so such literals have type &lt;code&gt;(&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 에서 변환 . 정수 리터럴 함수의 응용 나타낸다 &lt;code&gt;&lt;a href=&quot;prelude#v:fromInteger&quot;&gt;fromInteger&lt;/a&gt;&lt;/code&gt; 유형의 적절한 값으로 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 이므로 이러한 리터럴 타입이, &lt;code&gt;(&lt;a href=&quot;prelude#t:Num&quot;&gt;Num&lt;/a&gt; a) =&amp;gt; a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1bc4facd67d8b9399bd6ab9408fa98f8d7288c5" translate="yes" xml:space="preserve">
          <source>Conversion functions will treat it as seconds. For example, &lt;code&gt;(0.010 :: NominalDiffTime)&lt;/code&gt; corresponds to 10 milliseconds.</source>
          <target state="translated">변환 함수는이를 초로 취급합니다. 예를 들어 &lt;code&gt;(0.010 :: NominalDiffTime)&lt;/code&gt; 은 10 밀리 초에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="c18feefd417a0cbe14e4acfc8ed24349072dc9a8" translate="yes" xml:space="preserve">
          <source>Conversion of values to readable &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">값의 변환 읽을 수 있습니다 &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="c41de73bd765f6dbd4ffbffd45f74c43aeabb1e7" translate="yes" xml:space="preserve">
          <source>Conversion of values to readable &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">값의 변환 읽을 수 있습니다 &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="a91fdf58947502d3e0a163a058adc4eb08aaa8e6" translate="yes" xml:space="preserve">
          <source>Conversion to and from Builders</source>
          <target state="translated">빌더와의 변환</target>
        </trans-unit>
        <trans-unit id="c6dddf065c92050d6a5f8fc85ad8fce05b414e39" translate="yes" xml:space="preserve">
          <source>Conversion to and from ForeignPtrs</source>
          <target state="translated">ForeignPtr과의 전환</target>
        </trans-unit>
        <trans-unit id="ebce3a96a378128b8ca5b23650b13b3b0fd6ca4c" translate="yes" xml:space="preserve">
          <source>Conversion to other integral types</source>
          <target state="translated">다른 정수형으로 변환</target>
        </trans-unit>
        <trans-unit id="30122a0db100fe4f54ba80eca7d6a679af7e1ccb" translate="yes" xml:space="preserve">
          <source>Conversion with lists: packing and unpacking</source>
          <target state="translated">목록으로 변환 : 포장 및 포장 풀기</target>
        </trans-unit>
        <trans-unit id="b08eaadf77cfdba7944ddcaf69eee5a983b74af3" translate="yes" xml:space="preserve">
          <source>Conversions</source>
          <target state="translated">Conversions</target>
        </trans-unit>
        <trans-unit id="73a7edc577732e7ee07365acc9871acb8143265a" translate="yes" xml:space="preserve">
          <source>Conversions between mutable and immutable arrays</source>
          <target state="translated">가변 배열과 불변 배열 간 변환</target>
        </trans-unit>
        <trans-unit id="aa753fdc419d0d2bd21377afcbed18ec686ab147" translate="yes" xml:space="preserve">
          <source>Conversions to/from &lt;code&gt;BigNat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; 과의 전환</target>
        </trans-unit>
        <trans-unit id="297441dd206fdd05c7a71792e9614307113147d1" translate="yes" xml:space="preserve">
          <source>Convert &lt;a href=&quot;exts/typed_holes#typed-holes&quot;&gt;typed hole&lt;/a&gt; errors into warnings, &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;deferring the error until runtime&lt;/a&gt;. Implied by &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt;&lt;code&gt;-fdefer-type-errors&lt;/code&gt;&lt;/a&gt;. See also &lt;a href=&quot;using-warnings#ghc-flag--Wtyped-holes&quot;&gt;&lt;code&gt;-Wtyped-holes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;exts/typed_holes#typed-holes&quot;&gt;유형이 지정된 구멍&lt;/a&gt; 오류를 경고로 변환 &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;하여 런타임까지 오류를 연기합니다&lt;/a&gt; . &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt; &lt;code&gt;-fdefer-type-errors&lt;/code&gt; 에&lt;/a&gt; 의해 암시됩니다 . &lt;a href=&quot;using-warnings#ghc-flag--Wtyped-holes&quot;&gt; &lt;code&gt;-Wtyped-holes&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e53fb16a0856d0cb7ffedc37783a810764597c85" translate="yes" xml:space="preserve">
          <source>Convert &lt;a href=&quot;glasgow_exts#typed-holes&quot;&gt;typed hole&lt;/a&gt; errors into warnings, &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;deferring the error until runtime&lt;/a&gt;. Implied by &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt;&lt;code&gt;-fdefer-type-errors&lt;/code&gt;&lt;/a&gt;. See also &lt;a href=&quot;using-warnings#ghc-flag--Wtyped-holes&quot;&gt;&lt;code&gt;-Wtyped-holes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glasgow_exts#typed-holes&quot;&gt;입력 된 구멍&lt;/a&gt; 오류를 경고로 변환 &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;하여 런타임까지 오류를 지연시킵니다&lt;/a&gt; . &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt; &lt;code&gt;-fdefer-type-errors&lt;/code&gt; 에&lt;/a&gt; 의해 암시됩니다 . &lt;a href=&quot;using-warnings#ghc-flag--Wtyped-holes&quot;&gt; &lt;code&gt;-Wtyped-holes&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6c2b2038e44c60303e29ec254e8c4dbb55f3cf4" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt;. Throws &lt;code&gt;&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt;&lt;/code&gt; when passed a negative &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 . 예외 &lt;code&gt;&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt;&lt;/code&gt; 부정 통과 할 때 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1354e45c028636f8da1812d39c09c7b75b774c28" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt;, matching zero &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to midnight of &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 으로 변환 하고 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC의 자정에 0 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 을 일치 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="a09b0837999b09e91b54ee0d75c47ae892fd88e6" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt;, matching zero &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to midnight of &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;data-time-clock#t:UTCTime&quot;&gt;UTCTime&lt;/a&gt;&lt;/code&gt; 으로 변환 하고 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; UTC의 자정에 0 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 을 일치 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="fac7818ee694c684710c555ffce6d02662bb549a" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-time-clock-tai#t:AbsoluteTime&quot;&gt;AbsoluteTime&lt;/a&gt;&lt;/code&gt;, matching zero &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; to midnight of &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; TAI.</source>
          <target state="translated">변환 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;data-time-clock-tai#t:AbsoluteTime&quot;&gt;AbsoluteTime&lt;/a&gt;&lt;/code&gt; 제로 일치 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; 의 자정 &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemEpochDay&quot;&gt;systemEpochDay&lt;/a&gt;&lt;/code&gt; TAI를.</target>
        </trans-unit>
        <trans-unit id="225f1292e0d1e11e71d5229c52352f75a1a8b9b0" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">이스케이프해야하는 문자를 HTML 엔티티로 변환하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="7093b43578478f99ff48ff5cfcef979da167ea1b" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">이스케이프해야하는 문자를 HTML 엔티티로 변환하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="27898c83d10ec111d83884e3e166a2e145f3541c" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">이스케이프해야하는 문자를 HTML 엔티티로 변환하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="8face85bea9b57ba416a12f86942432cd88df9ca" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 필요가 HTML 엔티티로 탈출 할 것을 문자로 변환.</target>
        </trans-unit>
        <trans-unit id="9508df496c86228bdcca3d8dc4afc75d34d406b5" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 필요가 HTML 엔티티로 탈출 할 것을 문자로 변환.</target>
        </trans-unit>
        <trans-unit id="d4b6ffc489e8fc7578e72d39bf31e9f9443eaba7" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 필요가 HTML 엔티티로 탈출 할 것을 문자로 변환.</target>
        </trans-unit>
        <trans-unit id="b3d81fed884d735470c62484b8064cf5f5c4895f" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 필요가 HTML 엔티티로 탈출 할 것을 문자로 변환.</target>
        </trans-unit>
        <trans-unit id="9501db87f9de3f9b107ce3ea97af117700337302" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 필요가 HTML 엔티티로 탈출 할 것을 문자로 변환.</target>
        </trans-unit>
        <trans-unit id="fe22e5d0bc0cbc408680213524fdfa35d716a8b2" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt;, converting characters that need to be escaped to HTML entities.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#t:Html&quot;&gt;Html&lt;/a&gt;&lt;/code&gt; 필요가 HTML 엔티티로 탈출 할 것을 문자로 변환.</target>
        </trans-unit>
        <trans-unit id="4ead5afd69ddf93203b14bb57b2bcdf7910b417f" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; computation to &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt;, discarding the value of any exception.</source>
          <target state="translated">예외 값을 버리고 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 계산을 &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="3b71074c790dcab4a6fefe131bcedd0f0fb3ea10" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; computation to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt;, with a default exception value.</source>
          <target state="translated">기본 예외 값 을 사용 하여 &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; 계산을 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="91cf9c88591a73abb39623630b404d0de5e67ca0" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; stream by executing it on &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Buffer&quot;&gt;Buffer&lt;/a&gt;&lt;/code&gt;s allocated according to the given &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:AllocationStrategy&quot;&gt;AllocationStrategy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:AllocationStrategy&quot;&gt;AllocationStrategy&lt;/a&gt;&lt;/code&gt; 에 따라 할당 된 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Buffer&quot;&gt;Buffer&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:BuildStep&quot;&gt;BuildStep&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; 스트림으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="e26b60596f796c7c2c441d6c0ddfa0d0dc5b2e09" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; to a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; 게으른에 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="d25622eac920253d61e0aa69cdad640475475fe7" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; to a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; 게으른에 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ca9a05847d5f3892b3013974eb39429f0bd207a3" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; to a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt; ()&lt;/code&gt; 게으른에 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="93ddacb8d6db585b9396ae6f414b4ed4bdb1a501" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; to a lazy tuple of the result and the written &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; 을 결과의 게으른 튜플과 서면에 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="0d6326ad6e22cbcf04fe3521f9983ac78cf04542" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; to a lazy tuple of the result and the written &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; 을 결과의 게으른 튜플과 서면에 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="607e25202a77f16d13618c96498e688687139e9e" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; to a lazy tuple of the result and the written &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:ChunkIOStream&quot;&gt;ChunkIOStream&lt;/a&gt;&lt;/code&gt; 을 결과의 게으른 튜플과 서면에 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io-unsafe#v:unsafeDupablePerformIO&quot;&gt;unsafeDupablePerformIO&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="35ab4d261dbd9413a55631dbec9803e8597233bd" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt; ()&lt;/code&gt; action to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt; ()&lt;/code&gt; 액션을 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="60e4754c6c58fa94215bb6e620a8b435ed45b584" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 을 A와 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6100385e2c51dcd20067f630c16ceecbf9c49f97" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; returned is not necessarily unique; several &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt;s may map to the same &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (in practice however, the chances of this are small, so the result of &lt;code&gt;&lt;a href=&quot;ghc-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; makes a good hash key).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 변환하십시오 . 반환 된 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 가 반드시 고유하지는 않습니다. 여러 &lt;code&gt;&lt;a href=&quot;ghc-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 은 동일한 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 에 매핑 될 수 있습니다 (그러나 실제로는 가능성이 적으므로 &lt;code&gt;&lt;a href=&quot;ghc-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; 의 결과가 좋은 해시 키를 만듭니다).</target>
        </trans-unit>
        <trans-unit id="32af3d5dd3e225fe3673711f6fe71bdf33e15fca" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; returned is not necessarily unique; several &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt;s may map to the same &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; (in practice however, the chances of this are small, so the result of &lt;code&gt;&lt;a href=&quot;system-mem-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; makes a good hash key).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 변환하십시오 . 반환 된 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 가 반드시 고유하지는 않습니다. 여러 &lt;code&gt;&lt;a href=&quot;system-mem-stablename#t:StableName&quot;&gt;StableName&lt;/a&gt;&lt;/code&gt; 은 동일한 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 에 매핑 될 수 있습니다 (그러나 실제로는 가능성이 적으므로 &lt;code&gt;&lt;a href=&quot;system-mem-stablename#v:hashStableName&quot;&gt;hashStableName&lt;/a&gt;&lt;/code&gt; 의 결과가 좋은 해시 키를 만듭니다).</target>
        </trans-unit>
        <trans-unit id="49e58fc4b1ce8fdb1edeccf4026d54972e93401e" translate="yes" xml:space="preserve">
          <source>Convert a Boolean in numeric representation to a Haskell value</source>
          <target state="translated">숫자 표현의 부울을 하스켈 값으로 변환</target>
        </trans-unit>
        <trans-unit id="add57a579fbcbc7b16ccd3672e91b7fa3c349b2c" translate="yes" xml:space="preserve">
          <source>Convert a C &lt;code&gt;signed char&lt;/code&gt;, representing a Latin-1 character, to the corresponding Haskell character.</source>
          <target state="translated">Latin-1 문자를 나타내는 C &lt;code&gt;signed char&lt;/code&gt; 를 해당 Haskell 문자로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="9408d5e16c71eb46b7f791b4ee5933182b4f9aea" translate="yes" xml:space="preserve">
          <source>Convert a C &lt;code&gt;unsigned char&lt;/code&gt;, representing a Latin-1 character, to the corresponding Haskell character.</source>
          <target state="translated">Latin-1 문자를 나타내는 C &lt;code&gt;unsigned char&lt;/code&gt; 를 해당 Haskell 문자로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="1c61174035ed24642151950b9ed59d6a72e55c6d" translate="yes" xml:space="preserve">
          <source>Convert a C byte, representing a Latin-1 character, to the corresponding Haskell character.</source>
          <target state="translated">Latin-1 문자를 나타내는 C 바이트를 해당 Haskell 문자로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="9b7995722c1381aea793cbfef4cf08b9e9aedbfe" translate="yes" xml:space="preserve">
          <source>Convert a Haskell &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; to its numeric representation</source>
          <target state="translated">Haskell &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; 을 숫자 표현으로 변환</target>
        </trans-unit>
        <trans-unit id="78a88d0144531b579e58e385eb9438f51858e5d2" translate="yes" xml:space="preserve">
          <source>Convert a Haskell character to a C &lt;code&gt;signed char&lt;/code&gt;. This function is only safe on the first 256 characters.</source>
          <target state="translated">Haskell 문자를 C &lt;code&gt;signed char&lt;/code&gt; 로 변환하십시오 . 이 기능은 처음 256 자에서만 안전합니다.</target>
        </trans-unit>
        <trans-unit id="a986a3e036e3a2cc3cd0aee1a2f7d483f1688c07" translate="yes" xml:space="preserve">
          <source>Convert a Haskell character to a C &lt;code&gt;unsigned char&lt;/code&gt;. This function is only safe on the first 256 characters.</source>
          <target state="translated">Haskell 문자를 C &lt;code&gt;unsigned char&lt;/code&gt; 로 변환하십시오 . 이 기능은 처음 256 자에서만 안전합니다.</target>
        </trans-unit>
        <trans-unit id="b38588134e51b133267d7afb4a6741974cc50b0f" translate="yes" xml:space="preserve">
          <source>Convert a Haskell character to a C character. This function is only safe on the first 256 characters.</source>
          <target state="translated">Haskell 문자를 C 문자로 변환하십시오. 이 기능은 처음 256 자에서만 안전합니다.</target>
        </trans-unit>
        <trans-unit id="dd33d417fbb44d20ec17b95d99a21d44693d7347" translate="yes" xml:space="preserve">
          <source>Convert a Word# into a Natural</source>
          <target state="translated">단어 #를 자연어로 변환</target>
        </trans-unit>
        <trans-unit id="cca866413f6e188d3a66231d0ec884291f9e0307" translate="yes" xml:space="preserve">
          <source>Convert a bit queue builder to a bit queue. This shifts in a new guard bit on the left, and shifts right until the old guard bit falls off.</source>
          <target state="translated">비트 큐 빌더를 비트 큐로 변환하십시오. 왼쪽에서 새 가드 비트가 이동하고 이전 가드 비트가 떨어질 때까지 오른쪽으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="e54977b34bb26a075a505f22f3cb19c02522b8bd" translate="yes" xml:space="preserve">
          <source>Convert a bit queue to a list of bits by unconsing. This is used to test that the queue functions properly.</source>
          <target state="translated">unconsing하여 비트 대기열을 비트 목록으로 변환합니다. 큐가 올바르게 작동하는지 테스트하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1f3f317342c4c33d787139161d4a3ef9c58795fe" translate="yes" xml:space="preserve">
          <source>Convert a character to a string using only printable characters, using Haskell source-language escape conventions. For example:</source>
          <target state="translated">Haskell 소스 언어 이스케이프 규칙을 사용하여 인쇄 가능한 문자 만 사용하여 문자를 문자열로 변환하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="461fea11388916477d6dcd61f862a5783f75cc17" translate="yes" xml:space="preserve">
          <source>Convert a count of days and a time of day since midnight into a period of time.</source>
          <target state="translated">자정 이후의 일 수와 시간을 특정 기간으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="440236428189e86240a4304a31fcfaa848f47a40" translate="yes" xml:space="preserve">
          <source>Convert a lazy &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation into a strict one.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산을 엄격한 것으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="4a8848ddf3c54b6f57f6a9214c1c385e34929acb" translate="yes" xml:space="preserve">
          <source>Convert a lazy &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation into a strict one.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산을 엄격한 것으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="75aea82a106bb03cf50fe05303197cceb4e2a8ef" translate="yes" xml:space="preserve">
          <source>Convert a letter to the corresponding lower-case letter, if any. Any other character is returned unchanged.</source>
          <target state="translated">문자를 해당하는 경우 소문자로 변환하십시오. 다른 문자는 변경되지 않은 상태로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4ee6954ed78015ea7d29b640b65fc7c12fcd0d84" translate="yes" xml:space="preserve">
          <source>Convert a letter to the corresponding title-case or upper-case letter, if any. (Title case differs from upper case only for a small number of ligature letters.) Any other character is returned unchanged.</source>
          <target state="translated">문자를 해당 제목 또는 대문자로 변환하십시오 (있는 경우). 제목은 소수의 합자 문자에 대해서만 대문자와 다릅니다. 다른 문자는 변경되지 않고 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="30a93cb00f30ee92c18395187903b9b72f61487d" translate="yes" xml:space="preserve">
          <source>Convert a letter to the corresponding upper-case letter, if any. Any other character is returned unchanged.</source>
          <target state="translated">문자를 해당 대문자로 변환하십시오 (있는 경우). 다른 문자는 변경되지 않은 상태로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c01ce343f251d5f421082350ad1567d3a7d947b8" translate="yes" xml:space="preserve">
          <source>Convert a list of call-sites to a &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">호출 사이트 목록을 &lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec112ccbf1d4d737285d15bbf0515ce549babede" translate="yes" xml:space="preserve">
          <source>Convert a list of call-sites to a &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">호출 사이트 목록을 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c2ffd055ca02feb544b1080310fdc071a30c577" translate="yes" xml:space="preserve">
          <source>Convert a list of call-sites to a &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">호출 사이트 목록을 &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e5d0a3738078db61665b290ff0d18c35edd8348" translate="yes" xml:space="preserve">
          <source>Convert a path into an absolute path. If the given path is relative, the current directory is prepended and the path may or may not be simplified. If the path is already absolute, the path is returned unchanged. The function preserves the presence or absence of the trailing path separator.</source>
          <target state="translated">경로를 절대 경로로 변환하십시오. 주어진 경로가 상대 경로이면 현재 디렉토리가 앞에 추가되고 경로가 단순화되거나 단순화되지 않을 수 있습니다. 경로가 이미 절대 경로이면 변경되지 않은 상태로 반환됩니다. 이 기능은 후행 경로 구분 기호의 존재 유무를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="ce36b3d9e0f7bb9e6aa680a0ec3e982cfb3aeee9" translate="yes" xml:space="preserve">
          <source>Convert a path into an absolute path. If the given path is relative, the current directory is prepended and then the combined result is normalized. If the path is already absolute, the path is simply normalized. The function preserves the presence or absence of the trailing path separator unless the path refers to the root directory &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">경로를 절대 경로로 변환하십시오. 주어진 경로가 상대 경로이면 현재 디렉토리가 앞에 추가되고 결합 된 결과가 정규화됩니다. 경로가 이미 절대적인 경우 경로는 단순히 정규화됩니다. 경로 루트 디렉토리를 참조하지 않으면 함수 후단 경로 세퍼레이터의 유무를 유지 &lt;code&gt;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71e0bce6c1946d87ddff4dfb34893c7681f51eba" translate="yes" xml:space="preserve">
          <source>Convert a peek combinator into a one returning &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if applied to a &lt;code&gt;&lt;a href=&quot;foreign-ptr#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-ptr#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; 적용된 경우 픽 ( Pek) 결합기 를 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환하는 하나로 변환</target>
        </trans-unit>
        <trans-unit id="4188bdd6ed5599fcdeb2cff29ed135b428f53ee4" translate="yes" xml:space="preserve">
          <source>Convert a period of time into a count of days and a time of day since midnight. The time of day will never have a leap second.</source>
          <target state="translated">기간을 자정 이후의 일 수와 시간으로 변환합니다. 하루의 시간은 결코 도약 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="834dbf3c13dffcbe8c79a14d60d773cd25ca966b" translate="yes" xml:space="preserve">
          <source>Convert a read-only computation into an accumulation computation.</source>
          <target state="translated">읽기 전용 계산을 누적 계산으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="f999a2287b1ca726aefc5cbc4affe6fd9f01db29" translate="yes" xml:space="preserve">
          <source>Convert a selection computation to a continuation-passing computation.</source>
          <target state="translated">선택 계산을 연속 통과 계산으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="80c30195beaa2bdb370ac55c764a09a1d124d25d" translate="yes" xml:space="preserve">
          <source>Convert a single digit &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; to the corresponding &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. This function fails unless its argument satisfies &lt;code&gt;&lt;a href=&quot;data-char#v:isHexDigit&quot;&gt;isHexDigit&lt;/a&gt;&lt;/code&gt;, but recognises both upper- and lower-case hexadecimal digits (that is, &lt;code&gt;'0'&lt;/code&gt;..&lt;code&gt;'9'&lt;/code&gt;, &lt;code&gt;'a'&lt;/code&gt;..&lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'A'&lt;/code&gt;..&lt;code&gt;'F'&lt;/code&gt;).</source>
          <target state="translated">한 자릿수 &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 를 해당 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 변환합니다 . 인수가 &lt;code&gt;&lt;a href=&quot;data-char#v:isHexDigit&quot;&gt;isHexDigit&lt;/a&gt;&lt;/code&gt; 를 충족하지 않으면이 함수는 실패 하지만 대문자와 소문자 16 진수를 모두 인식합니다 (즉, &lt;code&gt;'0'&lt;/code&gt; .. &lt;code&gt;'9'&lt;/code&gt; , &lt;code&gt;'a'&lt;/code&gt; .. &lt;code&gt;'f'&lt;/code&gt; , &lt;code&gt;'A'&lt;/code&gt; .. &lt;code&gt;'F'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a8b58abdc7314d189db4477d184c4c7f4ad1b8ea" translate="yes" xml:space="preserve">
          <source>Convert a stream to a normal list efficiently.</source>
          <target state="translated">스트림을 일반 목록으로 효율적으로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="66fc8d3c0ff49b685e7d1277606e1714ef38e232" translate="yes" xml:space="preserve">
          <source>Convert a strict &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation into a lazy one. The strict state thread passed to &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:strictToLazyST&quot;&gt;strictToLazyST&lt;/a&gt;&lt;/code&gt; is not performed until the result of the lazy state thread it returns is demanded.</source>
          <target state="translated">엄격한 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산을 게으른 것으로 변환하십시오 . &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:strictToLazyST&quot;&gt;strictToLazyST&lt;/a&gt;&lt;/code&gt; 에 전달 된 엄격한 상태 스레드는 반환 된 지연 상태 스레드의 결과가 필요할 때까지 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0cd7667ea5e65ac9aa16df2f526ffa83317e3f90" translate="yes" xml:space="preserve">
          <source>Convert a strict &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation into a lazy one. The strict state thread passed to &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:strictToLazyST&quot;&gt;strictToLazyST&lt;/a&gt;&lt;/code&gt; is not performed until the result of the lazy state thread it returns is demanded.</source>
          <target state="translated">엄격한 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산을 게으른 것으로 변환하십시오 . &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:strictToLazyST&quot;&gt;strictToLazyST&lt;/a&gt;&lt;/code&gt; 에 전달 된 엄격한 상태 스레드는 반환 된 지연 상태 스레드의 결과가 필요할 때까지 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2c85eee20a2c7195a879b2859c36bc00d4409d03" translate="yes" xml:space="preserve">
          <source>Convert a strict pair to a standard pair.</source>
          <target state="translated">엄격한 쌍을 표준 쌍으로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="dcaba7de3acf83d2343a96e8cd0e9db73d554961" translate="yes" xml:space="preserve">
          <source>Convert a string into an unknown type-level symbol.</source>
          <target state="translated">문자열을 알 수없는 유형 수준 기호로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="1af4693ff19cc7b50bb5b292b3837c46600843dd" translate="yes" xml:space="preserve">
          <source>Convert a time of day in UTC to a time of day in some timezone, together with a day adjustment.</source>
          <target state="translated">요일 조정과 함께 UTC의 시간을 일부 시간대의 시간으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="610f52f47184222d2336a2cfe271511a7eb2035c" translate="yes" xml:space="preserve">
          <source>Convert a time of day in some timezone to a time of day in UTC, together with a day adjustment.</source>
          <target state="translated">일부 시간대의 시간을 요일 조정과 함께 UTC로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="5186433eee47a0a45b61419a36e8bc0b1244558b" translate="yes" xml:space="preserve">
          <source>Convert a value to a readable &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">값을 읽을 수있는 &lt;code&gt;&lt;a href=&quot;data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="3affb50ec8f318ae3a162e125de023dcfdeb9fb8" translate="yes" xml:space="preserve">
          <source>Convert a value to a readable &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">값을 읽을 수있는 &lt;code&gt;&lt;a href=&quot;prelude#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="66cc1077c425874ff1c4f259b425fac56418f735" translate="yes" xml:space="preserve">
          <source>Convert a writer computation into an accumulation computation.</source>
          <target state="translated">라이터 계산을 누적 계산으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a3097bc8f451f472a403377815e4fba2d572f590" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; action to an &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action. This relies on &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; having the same representation modulo the constraint on the state thread type parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 조치를 &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치 로 변환하십시오 . 이는 상태 스레드 유형 매개 변수의 제한 조건과 동일한 표현을 갖는 &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="8f79fe0c96bf72632a61bfe4daf1548a63999379" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; action to an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action. This relies on &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; having the same representation modulo the constraint on the state thread type parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 조치를 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치 로 변환하십시오 . 이는 상태 스레드 유형 매개 변수의 제한 조건과 동일한 표현을 갖는 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="2d3dce826b1745d7c992b21222274c6017c12a60" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; in the range &lt;code&gt;0&lt;/code&gt;..&lt;code&gt;15&lt;/code&gt; to the corresponding single digit &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;. This function fails on other inputs, and generates lower-case hexadecimal digits.</source>
          <target state="translated">변환 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 범위 &lt;code&gt;0&lt;/code&gt; ... &lt;code&gt;15&lt;/code&gt; 대응 한 자리에 &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; . 이 기능은 다른 입력에서 실패하며 소문자 16 진수를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="11f0b6b1260d5defd56a239f83bfbed4227bb373" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action into an &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; action. The type of the result is constrained to use a &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:RealWorld&quot;&gt;RealWorld&lt;/a&gt;&lt;/code&gt; state thread, and therefore the result cannot be passed to &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치를 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 조치 로 변환하십시오 . 결과 유형은 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:RealWorld&quot;&gt;RealWorld&lt;/a&gt;&lt;/code&gt; 상태 스레드 를 사용하도록 제한 되므로 결과를 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; 로 전달할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="96f2267726028a74544624c09249fb0ad0568827" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action to an &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; action. This relies on &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; having the same representation modulo the constraint on the state thread type parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치를 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 조치 로 변환하십시오 . 이는 상태 스레드 유형 매개 변수의 제한 조건과 동일한 표현을 갖는 &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="1c8669d2a4196ccf1ec2548a59f26e2f961b9e43" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action to an &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; action. This relies on &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; having the same representation modulo the constraint on the state thread type parameter.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치를 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 조치 로 변환하십시오 . 이는 상태 스레드 유형 매개 변수의 제한 조건과 동일한 표현을 갖는 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="8f9624afdf7d460a90aeb20a9d89d18f01c7440f" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;Addr#&lt;/code&gt; to a followable Any type.</source>
          <target state="translated">&lt;code&gt;Addr#&lt;/code&gt; 를 팔로우 가능한 Any 유형으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="d27dde92842032874ddd117444ea1996f0f6a7f3" translate="yes" xml:space="preserve">
          <source>Convert an HValueRef to an HValue. Should only be used if the HValue originated in this process.</source>
          <target state="translated">HValueRef를 HValue로 변환하십시오. HValue가이 프로세스에서 시작된 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="9c3b5b5e30a7279d8b066b2899f4ba5bb8b255f3" translate="yes" xml:space="preserve">
          <source>Convert an accumulation (append-only) computation into a fully stateful computation.</source>
          <target state="translated">누적 (추가 전용) 계산을 완전한 상태 저장 계산으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a5c26a9a80ed57fafedee05dfb536a7db66f700a" translate="yes" xml:space="preserve">
          <source>Convert an array of given length into a Haskell list. The implementation is tail-recursive and so uses constant stack space.</source>
          <target state="translated">주어진 길이의 배열을 Haskell 목록으로 변환합니다. 구현은 꼬리 재귀이므로 일정한 스택 공간을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3ff3affd229bfd39f3632c917a3fb014f44bb93b" translate="yes" xml:space="preserve">
          <source>Convert an array terminated by the given end marker into a Haskell list</source>
          <target state="translated">주어진 종료 마커로 끝나는 배열을 Haskell 목록으로 변환</target>
        </trans-unit>
        <trans-unit id="e22024ce50341e68ba27616082b9f97f4ffa58e3" translate="yes" xml:space="preserve">
          <source>Convert an immutable array to a list.</source>
          <target state="translated">불변 배열을리스트로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="05f9aa467cfcf62fbe469b7ccf956bd45e053001" translate="yes" xml:space="preserve">
          <source>Convert an integer into an unknown type-level natural.</source>
          <target state="translated">정수를 알 수없는 유형 수준의 자연으로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="2bf621a15d173cd265c3ba565665dcb436a36fb6" translate="yes" xml:space="preserve">
          <source>Convert day of year in the Gregorian or Julian calendars to month and day. First arg is leap year flag.</source>
          <target state="translated">그레고리력 또는 율리우스 력으로 연중을 달과 일로 변환합니다. 첫 번째 인수는 윤년 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="d37f7ac9a35a02cf8326f872bb9f3fbea761ab56" translate="yes" xml:space="preserve">
          <source>Convert empty paths to the current directory, otherwise leave it unchanged.</source>
          <target state="translated">빈 경로를 현재 디렉토리로 변환하십시오. 그렇지 않으면 변경하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="63405a27647cb210fb1a3a5f7dfb33b37f497009" translate="yes" xml:space="preserve">
          <source>Convert from &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;control-applicative-lift#t:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; (inverse of &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:runErrors&quot;&gt;runErrors&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">변환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#t:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; (역의 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:runErrors&quot;&gt;runErrors&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7e8724929527ac9ad8da0e3d00bd19b069f9c666" translate="yes" xml:space="preserve">
          <source>Convert from &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;control-applicative-lift#t:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; (inverse of &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:runErrors&quot;&gt;runErrors&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#t:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 변환 ( &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:runErrors&quot;&gt;runErrors&lt;/a&gt;&lt;/code&gt; 의 역) ).</target>
        </trans-unit>
        <trans-unit id="0246d9b7d2514c5efc8e280513aaf28633f192f8" translate="yes" xml:space="preserve">
          <source>Convert from &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;control-applicative-lift#t:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; (inverse of &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:runErrors&quot;&gt;runErrors&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#t:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 로 변환합니다 ( &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:runErrors&quot;&gt;runErrors&lt;/a&gt;&lt;/code&gt; 의 역함 ).</target>
        </trans-unit>
        <trans-unit id="76f3d416fef322766db7239cb611c35c46da47b8" translate="yes" xml:space="preserve">
          <source>Convert from ISO 8601 Ordinal Date format. Invalid day numbers return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ISO 8601 서수 날짜 형식에서 변환하십시오. 유효하지 않은 요일 번호는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 반환 하지 않습니다</target>
        </trans-unit>
        <trans-unit id="bd3860371042225b5c7bc8a4cd656b211e69815a" translate="yes" xml:space="preserve">
          <source>Convert from ISO 8601 Ordinal Date format. Invalid day numbers return &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ISO 8601 서수 날짜 형식에서 변환합니다. 유효하지 않은 일수는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 반환 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c91ef1c2242e6ce516a6231be8166c73d0ed50e3" translate="yes" xml:space="preserve">
          <source>Convert from ISO 8601 Ordinal Date format. Invalid day numbers return &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ISO 8601 서수 날짜 형식에서 변환합니다. 유효하지 않은 일수는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 반환 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb864c9536371d3479760fce4e9bde5e881f31d4" translate="yes" xml:space="preserve">
          <source>Convert from ISO 8601 Ordinal Date format. Invalid day numbers will be clipped to the correct range (1 to 365 or 366).</source>
          <target state="translated">ISO 8601 서수 날짜 형식에서 변환하십시오. 유효하지 않은 요일 번호가 올바른 범위 (1-365 또는 366)로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="97a325947c34d0c6972435f016ee2ce8b3f602a4" translate="yes" xml:space="preserve">
          <source>Convert from ISO 8601 Week Date format. First argument is year, second week number (1-52 or 53), third day of week (1 for Monday to 7 for Sunday). Invalid week and day values will be clipped to the correct range.</source>
          <target state="translated">ISO 8601 Week Date 형식에서 변환하십시오. 첫 번째 인수는 연도, 두 번째 주 번호 (1-52 또는 53), 세 번째 요일 (월요일은 1 ~ 일요일은 7)입니다. 잘못된 요일 및 요일 값이 올바른 범위로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="b7cf0382c17e7377e5a95ac6ce7dfb066a00a948" translate="yes" xml:space="preserve">
          <source>Convert from ISO 8601 Week Date format. First argument is year, second week number (1-52 or 53), third day of week (1 for Monday to 7 for Sunday). Invalid week and day values will return Nothing.</source>
          <target state="translated">ISO 8601 Week Date 형식에서 변환하십시오. 첫 번째 인수는 연도, 두 번째 주 번호 (1-52 또는 53), 세 번째 요일 (월요일은 1 ~ 일요일은 7)입니다. 잘못된 요일 및 요일 값은 Nothing을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="67eb0938a355fe3cf134ea7ed1362e4214969392" translate="yes" xml:space="preserve">
          <source>Convert from a &lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt;
&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">A로부터 변환 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; A를 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt; &lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 사용하여 &lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a59f506ff81e94fc6fe05d0f1e56a736002791fa" translate="yes" xml:space="preserve">
          <source>Convert from an &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="85644c051d11a3568fa6cc60adce651a22f8d86a" translate="yes" xml:space="preserve">
          <source>Convert from an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 에서 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="b2eaadd9bf8f5f6c98721679570631814b1be28b" translate="yes" xml:space="preserve">
          <source>Convert from an &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 에서 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="b6b83e98c957ac7804ac824a5c19642bc967e35e" translate="yes" xml:space="preserve">
          <source>Convert from proleptic Gregorian calendar. First argument is year, second month number (1-12), third day (1-31). Invalid values will be clipped to the correct range, month first, then day.</source>
          <target state="translated">proleptic 그레고리력에서 변환합니다. 첫 번째 인수는 연도, 두 번째 달 번호 (1-12), 세 번째 날 (1-31)입니다. 유효하지 않은 값은 월, 일, 일의 올바른 범위로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="469c7c0640886e82239e7d6cc781ea45a2b6b968" translate="yes" xml:space="preserve">
          <source>Convert from proleptic Gregorian calendar. First argument is year, second month number (1-12), third day (1-31). Invalid values will return Nothing</source>
          <target state="translated">proleptic 그레고리력에서 변환합니다. 첫 번째 인수는 연도, 두 번째 달 번호 (1-12), 세 번째 날 (1-31)입니다. 유효하지 않은 값은 Nothing을 반환합니다</target>
        </trans-unit>
        <trans-unit id="b305509e78a4fc56609978b75821aeba0ef88991" translate="yes" xml:space="preserve">
          <source>Convert from proleptic Julian calendar. First argument is year, second month number (1-12), third day (1-31). Invalid values will be clipped to the correct range, month first, then day.</source>
          <target state="translated">Proleptic Julian 일정에서 변환합니다. 첫 번째 인수는 연도, 두 번째 달 번호 (1-12), 세 번째 날 (1-31)입니다. 유효하지 않은 값은 월, 일, 일의 올바른 범위로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="ff62787e9261f7cdda067a1867b18b1005af48f1" translate="yes" xml:space="preserve">
          <source>Convert from proleptic Julian calendar. First argument is year, second month number (1-12), third day (1-31). Invalid values will return Nothing.</source>
          <target state="translated">Proleptic Julian 일정에서 변환합니다. 첫 번째 인수는 연도, 두 번째 달 번호 (1-12), 세 번째 날 (1-31)입니다. 유효하지 않은 값은 Nothing을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="27b312ed692dd9941efb9f711c0fe97a68a51681" translate="yes" xml:space="preserve">
          <source>Convert from proleptic Julian year and day format. Invalid day numbers will be clipped to the correct range (1 to 365 or 366).</source>
          <target state="translated">proleptic Julian 년과 일 형식에서 변환하십시오. 유효하지 않은 요일 번호가 올바른 범위 (1-365 또는 366)로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="791436a0af7c6a7b742e32360b555f2662b6a13b" translate="yes" xml:space="preserve">
          <source>Convert from proleptic Julian year and day format. Invalid day numbers will return Nothing</source>
          <target state="translated">proleptic Julian 년과 일 형식에서 변환하십시오. 유효하지 않은 요일 번호는 Nothing을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a4109dbd23cca830e424df2b2ec9b825b78f79d" translate="yes" xml:space="preserve">
          <source>Convert from the datatype to its representation</source>
          <target state="translated">데이터 유형에서 표현으로 변환</target>
        </trans-unit>
        <trans-unit id="61e27c8607e8afb531582e838c540e6692c273a0" translate="yes" xml:space="preserve">
          <source>Convert from the representation to the datatype</source>
          <target state="translated">표현에서 데이터 유형으로 변환</target>
        </trans-unit>
        <trans-unit id="3f6af6cc7168a09017d2e2b0ecf8578dfd9965fb" translate="yes" xml:space="preserve">
          <source>Convert month and day in the Gregorian or Julian calendars to day of year. First arg is leap year flag.</source>
          <target state="translated">그레고리력 또는 율리우스 력으로 월과 일을 일자로 변환합니다. 첫 번째 인수는 윤년 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="b5bf03ef36655551931dc898719f97831c239fdf" translate="yes" xml:space="preserve">
          <source>Convert propositional (nominal) equality to representational equality</source>
          <target state="translated">명제 (명칭) 평등을 표현 평등으로 변환</target>
        </trans-unit>
        <trans-unit id="43ce469a115dc3dc5aca28141f9d487f32bab06b" translate="yes" xml:space="preserve">
          <source>Convert the filled part of a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Buffer&quot;&gt;Buffer&lt;/a&gt;&lt;/code&gt; to a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Buffer&quot;&gt;Buffer&lt;/a&gt;&lt;/code&gt; 의 채워진 부분을 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 으로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="d31ccd4043fb20c8e7fee555c14ee36e4d6ae1a5" translate="yes" xml:space="preserve">
          <source>Convert to ISO 8601 Ordinal Date format. First element of result is year (proleptic Gregoran calendar), second is the day of the year, with 1 for Jan 1, and 365 (or 366 in leap years) for Dec 31.</source>
          <target state="translated">ISO 8601 서수 날짜 형식으로 변환하십시오. 결과의 첫 번째 요소는 연도 (발음 그레고리 달력)이고, 두 번째는 1 월 1 일은 1, 12 월 31 일은 365 (또는 윤년은 366)입니다.</target>
        </trans-unit>
        <trans-unit id="d242675b463d83dcd5a529af5d365a9e8ad39b5d" translate="yes" xml:space="preserve">
          <source>Convert to ISO 8601 Week Date format. First element of result is year, second week number (1-53), third day of week (1 for Monday to 7 for Sunday). Note that &quot;Week&quot; years are not quite the same as Gregorian years, as the first day of the year is always a Monday. The first week of a year is the first week to contain at least four days in the corresponding Gregorian year.</source>
          <target state="translated">ISO 8601 Week Date 형식으로 변환하십시오. 결과의 첫 번째 요소는 연도, 둘째 주 번호 (1-53), 세 번째 요일 (월요일은 1 ~ 일요일은 7)입니다. &quot;주&quot;연도는 그레고리력 연도와는 같지 않습니다. 연도의 첫 날은 항상 월요일입니다. 일년의 첫주는 해당 그레고리력에서 최소 4 일을 포함하는 첫 주입니다.</target>
        </trans-unit>
        <trans-unit id="78267ac5f05b0a0dee850776bf0e019ff5377188" translate="yes" xml:space="preserve">
          <source>Convert to an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. It is implementation-dependent what &lt;code&gt;&lt;a href=&quot;ghc-enum#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; returns when applied to a value that is too large to fit in an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 변환합니다 . &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 에 맞지 않는 너무 큰 값에 적용될 때 &lt;code&gt;&lt;a href=&quot;ghc-enum#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; 이 반환 하는 것은 구현에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="42c9ad262cdb4a665746bcaa5dfd395de14cdae0" translate="yes" xml:space="preserve">
          <source>Convert to an &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. It is implementation-dependent what &lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; returns when applied to a value that is too large to fit in an &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 변환합니다 . &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 에 맞지 않는 너무 큰 값에 적용될 때 &lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; 이 반환 하는 것은 구현에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="f2a9a439e957cd49c9d8784d65671a76323cc5ad" translate="yes" xml:space="preserve">
          <source>Convert to integer. First component of the result is -1 or 1, indicating the sign of the mantissa. The next two are the high and low 32 bits of the mantissa respectively, and the last is the exponent.</source>
          <target state="translated">정수로 변환합니다. 결과의 첫 번째 구성 요소는 가수의 부호를 나타내는 -1 또는 1입니다. 다음 2 개는 각각 가수의 상위 및 하위 32 비트이며 마지막은 지수입니다.</target>
        </trans-unit>
        <trans-unit id="db6538f02c12e21155f3cc865514637d9896586b" translate="yes" xml:space="preserve">
          <source>Convert to integers. First &lt;code&gt;Int#&lt;/code&gt; in result is the mantissa; second is the exponent.</source>
          <target state="translated">정수로 변환하십시오. 결과적으로 첫 번째 &lt;code&gt;Int#&lt;/code&gt; 는 가수입니다. 두 번째는 지수입니다.</target>
        </trans-unit>
        <trans-unit id="ae47d5cd27263ada9ba8089a719b9a36300f0c2c" translate="yes" xml:space="preserve">
          <source>Convert to proleptic Gregorian calendar. First element of result is year, second month number (1-12), third day (1-31).</source>
          <target state="translated">proleptic 그레고리력으로 변환합니다. 결과의 첫 번째 요소는 연도, 두 번째 달 번호 (1-12), 세 번째 날 (1-31)입니다.</target>
        </trans-unit>
        <trans-unit id="f72db1a605e2f1c123e7e1ed3c7fd9ba09542193" translate="yes" xml:space="preserve">
          <source>Convert to proleptic Julian calendar. First element of result is year, second month number (1-12), third day (1-31).</source>
          <target state="translated">Proleptic Julian 일정으로 변환합니다. 결과의 첫 번째 요소는 연도, 두 번째 달 번호 (1-12), 세 번째 날 (1-31)입니다.</target>
        </trans-unit>
        <trans-unit id="fed6adcb53e75e65f8cb94103d28123301c88d1e" translate="yes" xml:space="preserve">
          <source>Convert to proleptic Julian year and day format. First element of result is year (proleptic Julian calendar), second is the day of the year, with 1 for Jan 1, and 365 (or 366 in leap years) for Dec 31.</source>
          <target state="translated">proleptic Julian 년 및 일 형식으로 변환하십시오. 결과의 첫 번째 요소는 연도 (폭력 율리우스 력)이고, 두 번째는 1 월 1 일은 1, 12 월 31 일은 365 (또는 윤년은 366)입니다.</target>
        </trans-unit>
        <trans-unit id="1ec35eab1bf8ff757aa20928e847beae39bb272d" translate="yes" xml:space="preserve">
          <source>Convert to the right kind of slashes.</source>
          <target state="translated">올바른 종류의 슬래시로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="6ad566d6dc915c1f04c22f62d46f1639af0be1dd" translate="yes" xml:space="preserve">
          <source>Convert variable out of scope variables errors into warnings. Implied by &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt;&lt;code&gt;-fdefer-type-errors&lt;/code&gt;&lt;/a&gt;. See also &lt;a href=&quot;using-warnings#ghc-flag--Wdeferred-out-of-scope-variables&quot;&gt;&lt;code&gt;-Wdeferred-out-of-scope-variables&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">범위를 벗어난 변수 오류를 경고로 변환합니다. &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt; &lt;code&gt;-fdefer-type-errors&lt;/code&gt; 에&lt;/a&gt; 의해 암시됩니다 . &lt;a href=&quot;using-warnings#ghc-flag--Wdeferred-out-of-scope-variables&quot;&gt; &lt;code&gt;-Wdeferred-out-of-scope-variables&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a89fde6d6a92b19247264815bcda3f0b2c24bd4" translate="yes" xml:space="preserve">
          <source>Converters</source>
          <target state="translated">Converters</target>
        </trans-unit>
        <trans-unit id="ff40a1f4372ec126fbc5f44bcd1d70873f2d3f79" translate="yes" xml:space="preserve">
          <source>Converting &lt;code&gt;ST&lt;/code&gt; To &lt;code&gt;IO&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ST&lt;/code&gt; 를 &lt;code&gt;IO&lt;/code&gt; 로 변환</target>
        </trans-unit>
        <trans-unit id="2cf173807d599be5f29f6ea397af0b52832ad9d4" translate="yes" xml:space="preserve">
          <source>Converting &lt;code&gt;ST&lt;/code&gt; to &lt;code&gt;IO&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ST&lt;/code&gt; 를 &lt;code&gt;IO&lt;/code&gt; 로 변환</target>
        </trans-unit>
        <trans-unit id="40cb2a8750427f7936586698517ff65216593ac5" translate="yes" xml:space="preserve">
          <source>Converting CStrings to ByteStrings</source>
          <target state="translated">CString을 ByteString으로 변환</target>
        </trans-unit>
        <trans-unit id="98449002eb0ed21951bbe655a615daa43b56371c" translate="yes" xml:space="preserve">
          <source>Converting between strict and lazy &lt;code&gt;ST&lt;/code&gt;</source>
          <target state="translated">엄격한 &lt;code&gt;ST&lt;/code&gt; 와 게으른 ST 간 변환</target>
        </trans-unit>
        <trans-unit id="63c6feacad13dc3a7138b2212b529d8c5680b28c" translate="yes" xml:space="preserve">
          <source>Converting file descriptors to/from Handles</source>
          <target state="translated">파일 디스크립터를 핸들로 / 핸들에서 변환</target>
        </trans-unit>
        <trans-unit id="0482ba24d08f59046a76206fba405db795c7a5de" translate="yes" xml:space="preserve">
          <source>Converting from &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 에서 변환</target>
        </trans-unit>
        <trans-unit id="5da1118e3ce662c6d206a1124e1f9ba8ebb26e62" translate="yes" xml:space="preserve">
          <source>Converting strings to HTML</source>
          <target state="translated">문자열을 HTML로 변환</target>
        </trans-unit>
        <trans-unit id="4173bd74d262e9479ccd9e3c4de001cad6940370" translate="yes" xml:space="preserve">
          <source>Converting strings to values.</source>
          <target state="translated">문자열을 값으로 변환</target>
        </trans-unit>
        <trans-unit id="8b6aba911527a738e2e03952c04bcad448968ea8" translate="yes" xml:space="preserve">
          <source>Converting to &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 변환</target>
        </trans-unit>
        <trans-unit id="99547e8858198f6f2cfd4feb3bb5dc4ae63a091a" translate="yes" xml:space="preserve">
          <source>Converting to and from &lt;code&gt;Dynamic&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Dynamic&lt;/code&gt; 변환 및 동적 변환</target>
        </trans-unit>
        <trans-unit id="6ba505af9c39acec63179b145d28b2331f7f82ad" translate="yes" xml:space="preserve">
          <source>Converting to and from &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 과의 변환</target>
        </trans-unit>
        <trans-unit id="972c7a51a520be22fe11e2861b6607eb4b51c1df" translate="yes" xml:space="preserve">
          <source>Converting to and from a list</source>
          <target state="translated">리스트와의 변환</target>
        </trans-unit>
        <trans-unit id="1eb4b84c140907b7598e2afe6ec587285f72643a" translate="yes" xml:space="preserve">
          <source>Converting values into documents</source>
          <target state="translated">값을 문서로 변환</target>
        </trans-unit>
        <trans-unit id="a62536252f28880b1dbb14db038090613b03b91d" translate="yes" xml:space="preserve">
          <source>Converting values to readable strings: the &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; class and associated functions.</source>
          <target state="translated">값을 읽을 수있는 문자열로 변환 : &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 클래스 및 관련 함수</target>
        </trans-unit>
        <trans-unit id="1ddea431bb3209cff12fab73f2837f2465f33f10" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; object back into an ordinary Haskell value of the correct type. See also &lt;code&gt;&lt;a href=&quot;data-dynamic#v:fromDyn&quot;&gt;fromDyn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; 객체를 올바른 유형의 일반 Haskell 값으로 다시 변환합니다 . &lt;code&gt;&lt;a href=&quot;data-dynamic#v:fromDyn&quot;&gt;fromDyn&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fcbc864b9aed65009fb8ffc13a989024ff90273d" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; object back into an ordinary Haskell value of the correct type. See also &lt;code&gt;&lt;a href=&quot;data-dynamic#v:fromDynamic&quot;&gt;fromDynamic&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; 객체를 올바른 유형의 일반 Haskell 값으로 다시 변환합니다 . &lt;code&gt;&lt;a href=&quot;data-dynamic#v:fromDynamic&quot;&gt;fromDynamic&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="17f58f5ad653117a2104c2ccbb8afa4ff7fd0b7e" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; value into any type in class &lt;code&gt;&lt;a href=&quot;ghc-float#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 값을 &lt;code&gt;&lt;a href=&quot;ghc-float#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 클래스의 모든 유형으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="53ead0b1836cb8fca1049909ca74508d6393e424" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; value into any type in class &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Rational&quot;&gt;Rational&lt;/a&gt;&lt;/code&gt; 값을 &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 클래스의 모든 유형으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="8d3ef5cb8d8e26efbc35a30fe7984ec9410503e6" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;withXXX&lt;/code&gt; combinator into one marshalling a value wrapped into a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; to represent &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;withXXX&lt;/code&gt; 콤비 네이터 를 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 로 래핑 된 값을 정렬하는 하나의 마샬링으로 변환하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="28c80eb87ded9476e9d67e02ec23ae363833b82b" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;withXXX&lt;/code&gt; combinator into one marshalling a value wrapped into a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; to represent &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 나타내며 , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 로 래핑 된 값을 마샬링 하는 &lt;code&gt;withXXX&lt;/code&gt; 결합 자를 하나로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="93a0ec15ab1907cdbc7c940422c3fa06e035c53a" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;withXXX&lt;/code&gt; combinator into one marshalling a value wrapped into a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; to represent &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 나타내며 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 로 래핑 된 값을 마샬링 하는 &lt;code&gt;withXXX&lt;/code&gt; 결합 자를 하나로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="05a905138dbf7107147e68ec78f26c025a56c006" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;withXXX&lt;/code&gt; combinator into one marshalling a value wrapped into a &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;&lt;a href=&quot;foreign-ptr#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; to represent &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;withXXX&lt;/code&gt; 콤비 네이터 를 &lt;code&gt;&lt;a href=&quot;foreign-ptr#v:nullPtr&quot;&gt;nullPtr&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 로 래핑 된 값을 정렬하는 하나의 마샬링으로 변환하여 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="b090cd3e952fb38c4328670fe0e5cd245edb4c59" translate="yes" xml:space="preserve">
          <source>Converts a Haskell ReadS-style function into a parser. Warning: This introduces local backtracking in the resulting parser, and therefore a possible inefficiency.</source>
          <target state="translated">Haskell ReadS 스타일 함수를 파서로 변환합니다. 경고 : 결과 파서에 로컬 역 추적이 발생하므로 비효율적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d258218a53afaa6146ce3bd0d2b2a0432cdb695c" translate="yes" xml:space="preserve">
          <source>Converts a mutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt;) to an immutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt;) by taking a complete copy of it.</source>
          <target state="translated">전체 복사본을 가져 와서 가변 배열 ( &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; 인스턴스 )을 불변 배열 ( &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt; 인스턴스)로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="db665403b470abc0f5b248c6aa39ff8da55be4ea" translate="yes" xml:space="preserve">
          <source>Converts a mutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-marray-safe#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt;) to an immutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt;) by taking a complete copy of it.</source>
          <target state="translated">전체 복사본을 가져 와서 가변 배열 ( &lt;code&gt;&lt;a href=&quot;data-array-marray-safe#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; 인스턴스 )을 불변 배열 ( &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt; 인스턴스)로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="8e70d82801df49daa796bb73ccabdb90c8e58b3c" translate="yes" xml:space="preserve">
          <source>Converts a normal list to a &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; stream.</source>
          <target state="translated">일반 목록을 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; 스트림으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="c3b7b406f45837988453307ff0a7cf0906222f89" translate="yes" xml:space="preserve">
          <source>Converts a parser into a Haskell ReadS-style function. This is the main way in which you can &quot;run&quot; a &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; parser: the expanded type is &lt;code&gt; readP_to_S :: ReadP a -&amp;gt; String -&amp;gt; [(a,String)] &lt;/code&gt;</source>
          <target state="translated">파서를 Haskell ReadS 스타일 함수로 변환합니다. 이것이 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readp#t:ReadP&quot;&gt;ReadP&lt;/a&gt;&lt;/code&gt; 파서를 &quot;실행&quot;할 수있는 주요 방법입니다 . 확장 된 유형은 &lt;code&gt; readP_to_S :: ReadP a -&amp;gt; String -&amp;gt; [(a,String)] &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2da27aa3e38fb7a7fa5871ce895ef8edaca7b071" translate="yes" xml:space="preserve">
          <source>Converts a possibly-negative &lt;code&gt;&lt;a href=&quot;ghc-real#t:Real&quot;&gt;Real&lt;/a&gt;&lt;/code&gt; value to a string.</source>
          <target state="translated">음의 &lt;code&gt;&lt;a href=&quot;ghc-real#t:Real&quot;&gt;Real&lt;/a&gt;&lt;/code&gt; 값을 문자열로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="be635d9afe4b8e08d188497be0abe1248a45335b" translate="yes" xml:space="preserve">
          <source>Converts a possibly-negative &lt;code&gt;&lt;a href=&quot;prelude#t:Real&quot;&gt;Real&lt;/a&gt;&lt;/code&gt; value to a string.</source>
          <target state="translated">음의 &lt;code&gt;&lt;a href=&quot;prelude#t:Real&quot;&gt;Real&lt;/a&gt;&lt;/code&gt; 값을 문자열로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="9c1053f441abc4b481879264322b03856c4f39d1" translate="yes" xml:space="preserve">
          <source>Converts an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; that can be used with the standard Haskell IO library (see &lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; 를 표준 Haskell IO 라이브러리와 함께 사용할 수 있는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 로 변환합니다 ( &lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="1c439643357cf47b47b9847e45217d7db7551ab4" translate="yes" xml:space="preserve">
          <source>Converts an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; that can be used with the standard Haskell IO library (see &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; 를 표준 Haskell IO 라이브러리와 함께 사용할 수 있는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 로 변환합니다 ( &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="89db4964b56eb09c5d98e388e24f947b6b628453" translate="yes" xml:space="preserve">
          <source>Converts an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; into a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; that can be used with the standard Haskell IO library (see &lt;a href=&quot;../base-4.15.0.0/system-io&quot;&gt;System.IO&lt;/a&gt;).</source>
          <target state="translated">표준 Haskell IO 라이브러리와 함께 사용할 수 있는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 로 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; 를 변환합니다 ( &lt;a href=&quot;../base-4.15.0.0/system-io&quot;&gt;System.IO&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="b55c1799c540db0b8d11acaf3d49077eec4e2b09" translate="yes" xml:space="preserve">
          <source>Converts an arbitrary value into an object of type &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">임의의 값을 &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; 유형의 객체로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="a1571584db72c118261d0ab776d67ce2f640a04c" translate="yes" xml:space="preserve">
          <source>Converts an immutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt;) into a mutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt;) by taking a complete copy of it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt; 배열 ( &lt;code&gt;&lt;a href=&quot;data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; 모든 인스턴스 )을 전체 사본을 가져 와서 변경 가능한 배열 ( MArray의 모든 인스턴스 )로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="194bdb8f1345b25ef47f537b89822d85290b899a" translate="yes" xml:space="preserve">
          <source>Converts an immutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt;) into a mutable array (any instance of &lt;code&gt;&lt;a href=&quot;data-array-marray-safe#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt;) by taking a complete copy of it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-array-iarray#t:IArray&quot;&gt;IArray&lt;/a&gt;&lt;/code&gt; 배열 ( &lt;code&gt;&lt;a href=&quot;data-array-marray-safe#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; 모든 인스턴스 )을 전체 사본을 가져 와서 변경 가능한 배열 ( MArray의 모든 인스턴스 )로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="d18ac7fa4a02f89db21f9adc7c2d4ab678ce5872" translate="yes" xml:space="preserve">
          <source>Converts an immutable array into a mutable array. The implementation may either simply cast the array from one type to the other without copying the array, or it may take a full copy of the array.</source>
          <target state="translated">불변 배열을 변경 가능한 배열로 변환합니다. 구현은 배열을 복사하지 않고 단순히 한 유형에서 다른 유형으로 배열을 캐스트하거나 배열의 전체 사본을 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b96c2c572aa22372004feee4685547a459b6486b" translate="yes" xml:space="preserve">
          <source>Converts an mutable array into an immutable array. The implementation may either simply cast the array from one type to the other without copying the array, or it may take a full copy of the array.</source>
          <target state="translated">변경 가능한 배열을 변경 불가능한 배열로 변환합니다. 구현은 배열을 복사하지 않고 단순히 한 유형에서 다른 유형으로 배열을 캐스트하거나 배열의 전체 사본을 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c9704fe5361082e38fe0837b2d9fb771ce65a4b" translate="yes" xml:space="preserve">
          <source>Convinience definitions for working with &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">작업을위한적이고 정의 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의.</target>
        </trans-unit>
        <trans-unit id="4876d3c0962abbaa5da2e7200a2fa3a5dd981065" translate="yes" xml:space="preserve">
          <source>Convinience definitions for working with &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">작업을위한적이고 정의 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의.</target>
        </trans-unit>
        <trans-unit id="4bf8adc4a7202f0b9c447f428aa29e180b5f444d" translate="yes" xml:space="preserve">
          <source>Convinience definitions for working with &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 작업을위한 편의성 정의 .</target>
        </trans-unit>
        <trans-unit id="a72213a972c400aa0d57ccb1834e5a497f989eb2" translate="yes" xml:space="preserve">
          <source>Convinience definitions for working with &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 작업을위한 편리한 정의 .</target>
        </trans-unit>
        <trans-unit id="abdf6f654cb21625e1e204e6935c6359db926195" translate="yes" xml:space="preserve">
          <source>Convinience definitions for working with &lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../text-1.2.4.1/data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 작업을위한 편의성 정의 .</target>
        </trans-unit>
        <trans-unit id="95c58873957476a0d13386da8ab1aaf0968fb357" translate="yes" xml:space="preserve">
          <source>Convinience definitions for working with lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">게으른 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 작업을위한 편리한 정의 .</target>
        </trans-unit>
        <trans-unit id="f83dd9fcdb13fbbec9e5891bded8b7590c00cb4b" translate="yes" xml:space="preserve">
          <source>Convinience definitions for working with lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.12.1/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 작업을위한 편의성 정의 .</target>
        </trans-unit>
        <trans-unit id="33b0b4b24f6dda602a523816f006da6afa42fa95" translate="yes" xml:space="preserve">
          <source>Copies the given number of bytes from the second area (source) into the first (destination); the copied areas &lt;em&gt;may&lt;/em&gt; overlap</source>
          <target state="translated">지정된 바이트 수를 두 번째 영역 (소스)에서 첫 번째 (대상)로 복사합니다. 복사 된 영역 &lt;em&gt;이&lt;/em&gt; 겹칠 &lt;em&gt;수 있습니다&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="62f375eff7a072273bedab4df7dc2d55e5b4438e" translate="yes" xml:space="preserve">
          <source>Copies the given number of bytes from the second area (source) into the first (destination); the copied areas may &lt;em&gt;not&lt;/em&gt; overlap</source>
          <target state="translated">지정된 바이트 수를 두 번째 영역 (소스)에서 첫 번째 (대상)로 복사합니다. 복사 된 영역이 겹치지 &lt;em&gt;않을&lt;/em&gt; 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d7370cc0ddb7aa8412bb477820ffa609369bfe22" translate="yes" xml:space="preserve">
          <source>Copy a file with its associated metadata. If the destination file already exists, it is overwritten. There is no guarantee of atomicity in the replacement of the destination file. Neither path may refer to an existing directory. If the source and/or destination are symbolic links, the copy is performed on the targets of the links.</source>
          <target state="translated">관련 메타 데이터가있는 파일을 복사하십시오. 대상 파일이 이미 있으면 덮어 씁니다. 대상 파일을 교체 할 때 원 자성을 보장 할 수 없습니다. 어느 경로도 기존 디렉토리를 참조 할 수 없습니다. 소스 및 / 또는 대상이 심볼릭 링크 인 경우 링크 대상에서 복사가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="13ba749731c0b029c990c8a392be73e07cfc5d28" translate="yes" xml:space="preserve">
          <source>Copy a file with its permissions. If the destination file already exists, it is replaced atomically. Neither path may refer to an existing directory. No exceptions are thrown if the permissions could not be copied.</source>
          <target state="translated">권한이있는 파일을 복사하십시오. 대상 파일이 이미 존재하면 원자 적으로 대체됩니다. 어느 경로도 기존 디렉토리를 참조 할 수 없습니다. 권한을 복사 할 수없는 경우 예외가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d9c03b4539be0395f5dece752373b846d414becf" translate="yes" xml:space="preserve">
          <source>Copy a memory range starting at the Addr# to the specified range in the MutableByteArray#. The memory region at Addr# and the ByteArray# must fully contain the specified ranges, but this is not checked. The Addr# must not point into the MutableByteArray# (e.g. if the MutableByteArray# were pinned), but this is not checked either.</source>
          <target state="translated">Addr #에서 시작하여 메모리 범위를 MutableByteArray #의 지정된 범위로 복사하십시오. Addr # 및 ByteArray #의 메모리 영역은 지정된 범위를 완전히 포함해야하지만 확인되지는 않습니다. Addr #은 MutableByteArray #를 가리켜서는 안됩니다 (예 : MutableByteArray #가 고정 된 경우).</target>
        </trans-unit>
        <trans-unit id="23b958776ae71006550392eb451998a15b80fd73" translate="yes" xml:space="preserve">
          <source>Copy a range of the ArrayArray# to the specified region in the MutableArrayArray#. Both arrays must fully contain the specified ranges, but this is not checked. The two arrays must not be the same array in different states, but this is not checked either.</source>
          <target state="translated">MuArrayArrayArray #의 지정된 영역에 ArrayArray #의 범위를 복사합니다. 두 배열 모두 지정된 범위를 완전히 포함해야하지만 이것은 확인되지 않습니다. 두 어레이는 서로 다른 상태에서 동일한 어레이가 아니어야하지만이 역시 점검되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e2259fc41f9bf3fd3964399d4a856d49c2541f19" translate="yes" xml:space="preserve">
          <source>Copy a range of the ByteArray# to the memory range starting at the Addr#. The ByteArray# and the memory region at Addr# must fully contain the specified ranges, but this is not checked. The Addr# must not point into the ByteArray# (e.g. if the ByteArray# were pinned), but this is not checked either.</source>
          <target state="translated">ByteArray #의 범위를 Addr #에서 시작하는 메모리 범위로 복사하십시오. Addr #의 ByteArray # 및 메모리 영역은 지정된 범위를 완전히 포함해야하지만 이것은 확인되지 않습니다. Addr #은 ByteArray #를 가리켜서는 안됩니다 (예 : ByteArray #가 고정 된 경우).</target>
        </trans-unit>
        <trans-unit id="7b81ff3e9f8618d42f23d16984ec0efe8f654f4e" translate="yes" xml:space="preserve">
          <source>Copy a range of the MutableByteArray# to the memory range starting at the Addr#. The MutableByteArray# and the memory region at Addr# must fully contain the specified ranges, but this is not checked. The Addr# must not point into the MutableByteArray# (e.g. if the MutableByteArray# were pinned), but this is not checked either.</source>
          <target state="translated">MutableByteArray #의 범위를 Addr #에서 시작하는 메모리 범위로 복사하십시오. MutableByteArray # 및 Addr #의 메모리 영역에 지정된 범위가 완전히 포함되어 있어야하지만 이것은 확인되지 않습니다. Addr #은 MutableByteArray #를 가리켜서는 안됩니다 (예 : MutableByteArray #가 고정 된 경우).</target>
        </trans-unit>
        <trans-unit id="5e98456630d78a0c1b8233f9c4a42ab48eb4c2b4" translate="yes" xml:space="preserve">
          <source>Copy a range of the first MutableArrayArray# to the specified region in the second MutableArrayArray#. Both arrays must fully contain the specified ranges, but this is not checked. The regions are allowed to overlap, although this is only possible when the same array is provided as both the source and the destination.</source>
          <target state="translated">첫 번째 MutableArrayArray #의 범위를 두 번째 MutableArrayArray #의 지정된 영역으로 복사하십시오. 두 배열 모두 지정된 범위를 완전히 포함해야하지만 이것은 확인되지 않습니다. 동일한 배열이 소스와 대상으로 모두 제공되는 경우에만 가능하지만 영역은 겹칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee3358cc06858ef1837cac03859b4ffe623b0985" translate="yes" xml:space="preserve">
          <source>Copy a range of the first MutableByteArray# to the specified region in the second MutableByteArray#. Both arrays must fully contain the specified ranges, but this is not checked. The regions are allowed to overlap, although this is only possible when the same array is provided as both the source and the destination.</source>
          <target state="translated">첫 번째 MutableByteArray #의 범위를 두 번째 MutableByteArray #의 지정된 영역으로 복사하십시오. 두 배열 모두 지정된 범위를 완전히 포함해야하지만 이것은 확인되지 않습니다. 동일한 배열이 소스와 대상으로 모두 제공되는 경우에만 가능하지만 영역은 겹칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdf9459a64b2b7b5fc0ee5c07d5b6f628ffb6e2d" translate="yes" xml:space="preserve">
          <source>Copy all data from a file to a handle.</source>
          <target state="translated">파일의 모든 데이터를 핸들로 복사하십시오.</target>
        </trans-unit>
        <trans-unit id="8d3ae9975a13d3c351b4d04b7cadbe07aa23dd36" translate="yes" xml:space="preserve">
          <source>Copy data from one handle to another until end of file.</source>
          <target state="translated">파일 끝까지 한 핸들에서 다른 핸들로 데이터를 복사합니다.</target>
        </trans-unit>
        <trans-unit id="49089833661d92c10e46ac3b85707492d4283604" translate="yes" xml:space="preserve">
          <source>Copy some elements of a mutable array.</source>
          <target state="translated">가변 배열의 일부 요소를 복사하십시오.</target>
        </trans-unit>
        <trans-unit id="37f16d968b545bf097a6f37b71ac7033bbeba57b" translate="yes" xml:space="preserve">
          <source>Copy some elements of an immutable array.</source>
          <target state="translated">불변 배열의 일부 요소를 복사하십시오.</target>
        </trans-unit>
        <trans-unit id="6562da081dbd47a9d7b80efae6dc0c0fc316533a" translate="yes" xml:space="preserve">
          <source>Copy the given number of elements from the second array (source) into the first array (destination); the copied areas &lt;em&gt;may&lt;/em&gt; overlap</source>
          <target state="translated">주어진 수의 요소를 두 번째 배열 (소스)에서 첫 번째 배열 (대상)로 복사합니다. 복사 된 영역 &lt;em&gt;이&lt;/em&gt; 겹칠 &lt;em&gt;수 있습니다&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a86802b0d2fff91a8e1351b2e7b686942496e819" translate="yes" xml:space="preserve">
          <source>Copy the given number of elements from the second array (source) into the first array (destination); the copied areas may &lt;em&gt;not&lt;/em&gt; overlap</source>
          <target state="translated">주어진 수의 요소를 두 번째 배열 (소스)에서 첫 번째 배열 (대상)로 복사합니다. 복사 된 영역이 겹치지 &lt;em&gt;않을&lt;/em&gt; 수 있습니다</target>
        </trans-unit>
        <trans-unit id="703ebcc4482f1e2fb8745f39c4f020b62cd0e1aa" translate="yes" xml:space="preserve">
          <source>Copy the permissions of one file to another. This reproduces the permissions more accurately than using &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; followed by &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">한 파일의 권한을 다른 파일로 복사하십시오. &lt;code&gt;&lt;a href=&quot;system-directory#v:getPermissions&quot;&gt;getPermissions&lt;/a&gt;&lt;/code&gt; 다음에 &lt;code&gt;&lt;a href=&quot;system-directory#v:setPermissions&quot;&gt;setPermissions&lt;/a&gt;&lt;/code&gt; 를 사용하는 것보다 권한을보다 정확하게 재생산합니다 .</target>
        </trans-unit>
        <trans-unit id="43b7de9894fd26b8d14ca6988e963239baff6ad4" translate="yes" xml:space="preserve">
          <source>Copying</source>
          <target state="translated">Copying</target>
        </trans-unit>
        <trans-unit id="3a8f5d919db1d18829220cf2186b85c84a9c0ce3" translate="yes" xml:space="preserve">
          <source>Copying ByteStrings</source>
          <target state="translated">바이트 문자열 복사</target>
        </trans-unit>
        <trans-unit id="a420abf6e89816696d0724f377c00c6447c28f0a" translate="yes" xml:space="preserve">
          <source>Copyright</source>
          <target state="translated">Copyright</target>
        </trans-unit>
        <trans-unit id="46e89a0cf0ed6d956922aa679114e142b3db4a7e" translate="yes" xml:space="preserve">
          <source>Copyright 2002 - 2007, The University Court of the University of Glasgow. All rights reserved.</source>
          <target state="translated">Copyright 2002-2007, The University Court of the University of Glasgow. 판권 소유.</target>
        </trans-unit>
        <trans-unit id="f34f7ece0033be1157bb2ea62d68ea31d3a1999d" translate="yes" xml:space="preserve">
          <source>Copyright sign.</source>
          <target state="translated">저작권 표시.</target>
        </trans-unit>
        <trans-unit id="e7f47f4645aaef2045dee2741d015b26c6ec59db" translate="yes" xml:space="preserve">
          <source>Core dumps contain a large amount of information. Depending on what you are doing, not all of it will be useful. Use these flags to suppress the parts that you are not interested in.</source>
          <target state="translated">코어 덤프에는 많은 양의 정보가 포함됩니다. 당신이하고있는 일에 따라 모든 것이 유용하지는 않습니다. 이 플래그를 사용하여 관심이없는 부분을 억제하십시오.</target>
        </trans-unit>
        <trans-unit id="a15a5148b9c1ee468348de4c9e13ef760f806003" translate="yes" xml:space="preserve">
          <source>Core representation and simplification</source>
          <target state="translated">핵심 표현 및 단순화</target>
        </trans-unit>
        <trans-unit id="5dd2e3153c231b0770a66b56bd4d7ead1486a42a" translate="yes" xml:space="preserve">
          <source>Core stream fusion functionality for text.</source>
          <target state="translated">텍스트를위한 핵심 스트림 융합 기능.</target>
        </trans-unit>
        <trans-unit id="68445a701b2ec7a561a15f4a2c994aa11a81cac4" translate="yes" xml:space="preserve">
          <source>Core types and functions for the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; monoid and its generalization, the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; monoid 및 일반화, &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 모나드의 핵심 유형 및 기능</target>
        </trans-unit>
        <trans-unit id="094ded4e031e4987e25d535bf16ee1c81bb249cd" translate="yes" xml:space="preserve">
          <source>Correctly instrumented code provides coverage information of two kinds: source coverage and boolean-control coverage. Source coverage is the extent to which every part of the program was used, measured at three different levels: declarations (both top-level and local), alternatives (among several equations or case branches) and expressions (at every level). Boolean coverage is the extent to which each of the values True and False is obtained in every syntactic boolean context (ie. guard, condition, qualifier).</source>
          <target state="translated">올바르게 계측 된 코드는 소스 범위와 부울 제어 범위라는 두 가지 종류의 범위 정보를 제공합니다. 소스 범위는 프로그램의 모든 부분이 사용 된 정도이며, 선언 (최상위 및 로컬 모두), 대안 (여러 방정식 또는 사례 분기) 및 식 (모든 레벨)의 세 가지 수준으로 측정됩니다. 부울 범위는 모든 구문 부울 컨텍스트 (가드, 조건, 한정자)에서 각 True 및 False 값을 얻는 범위입니다.</target>
        </trans-unit>
        <trans-unit id="13a84bf10f17131cd3bbe05e6d6b69842f08da92" translate="yes" xml:space="preserve">
          <source>Correspond to some of the int flags from C's fcntl.h.</source>
          <target state="translated">C의 fcntl.h에서 일부 int 플래그에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="3083b12b64eedd917dae6d40d788078aa911156b" translate="yes" xml:space="preserve">
          <source>Cost centre annotations can also appear in the top-level or in a declaration context. In that case you need to pass a function name defined in the same module or scope with the annotation. Example:</source>
          <target state="translated">코스트 센터 주석은 최상위 또는 선언 컨텍스트에 나타날 수도 있습니다. 이 경우 주석과 함께 동일한 모듈 또는 범위에 정의 된 함수 이름을 전달해야합니다. 예:</target>
        </trans-unit>
        <trans-unit id="41a57dec5dab2c8600419bf9a0f35dd5a900db94" translate="yes" xml:space="preserve">
          <source>Cost centres are just program annotations. When you say &lt;code&gt;-fprof-auto&lt;/code&gt; to the compiler, it automatically inserts a cost centre annotation around every binding not marked INLINE in your program, but you are entirely free to add cost centre annotations yourself.</source>
          <target state="translated">코스트 센터는 단지 프로그램 주석입니다. 컴파일러에 &lt;code&gt;-fprof-auto&lt;/code&gt; 를 말하면 프로그램에서 INLINE으로 표시되지 않은 모든 바인딩 주위에 비용 센터 주석이 자동으로 삽입되지만, 비용 센터 주석을 자유롭게 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dfe9147164335478c6505e7792c465be684c626" translate="yes" xml:space="preserve">
          <source>CostCentre</source>
          <target state="translated">CostCentre</target>
        </trans-unit>
        <trans-unit id="bb8c68a235a0709f0f1575a65aea2c3233e7b3c8" translate="yes" xml:space="preserve">
          <source>CostCentreStack</source>
          <target state="translated">CostCentreStack</target>
        </trans-unit>
        <trans-unit id="17b7cb4f62cf8b34e2d355c70d772c07a9c249b9" translate="yes" xml:space="preserve">
          <source>CostCentresAll</source>
          <target state="translated">CostCentresAll</target>
        </trans-unit>
        <trans-unit id="34880f8a0edcd55dfce8473beea622cdcc056d3b" translate="yes" xml:space="preserve">
          <source>CostCentresJSON</source>
          <target state="translated">CostCentresJSON</target>
        </trans-unit>
        <trans-unit id="0739dd2ceaf7613ecfbe7585f0298037df383653" translate="yes" xml:space="preserve">
          <source>CostCentresNone</source>
          <target state="translated">CostCentresNone</target>
        </trans-unit>
        <trans-unit id="0375166c101d8700c9288a1bacf44e490fed6e11" translate="yes" xml:space="preserve">
          <source>CostCentresSummary</source>
          <target state="translated">CostCentresSummary</target>
        </trans-unit>
        <trans-unit id="693cfea7e902b11abdc78940917858c40fc362a4" translate="yes" xml:space="preserve">
          <source>CostCentresVerbose</source>
          <target state="translated">CostCentresVerbose</target>
        </trans-unit>
        <trans-unit id="20a97932f00140e6abca9c5265b02f10696707bc" translate="yes" xml:space="preserve">
          <source>Could not decode a byte sequence because it was invalid under the given encoding, or ran out of input in mid-decode.</source>
          <target state="translated">주어진 인코딩에서 유효하지 않거나 바이트 중간에 입력이 부족하여 바이트 시퀀스를 디코딩 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="66e12969c225cc6d65e18210488acb826eba907e" translate="yes" xml:space="preserve">
          <source>Count</source>
          <target state="translated">Count</target>
        </trans-unit>
        <trans-unit id="fe1cc521035a196e773c4a8058997db13978c627" translate="yes" xml:space="preserve">
          <source>Count leading zeros in a 64-bit word.</source>
          <target state="translated">64 비트 워드에서 선행 0을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="ace8357e575af86590a89513b902c958c8980d3b" translate="yes" xml:space="preserve">
          <source>Count leading zeros in a word.</source>
          <target state="translated">단어에서 선행 0을 세십시오.</target>
        </trans-unit>
        <trans-unit id="f0c73627fc4fd426c7fb8e46ebd01cbfd252acac" translate="yes" xml:space="preserve">
          <source>Count leading zeros in the lower 16 bits of a word.</source>
          <target state="translated">워드의 하위 16 비트에서 선행 0을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="865329aabf6c11fe2986bac17e7c792957dbce43" translate="yes" xml:space="preserve">
          <source>Count leading zeros in the lower 32 bits of a word.</source>
          <target state="translated">워드의 하위 32 비트에서 선행 0을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="6005e90398520d2ddd82a456fd4ecdff930046f9" translate="yes" xml:space="preserve">
          <source>Count leading zeros in the lower 8 bits of a word.</source>
          <target state="translated">워드의 하위 8 비트에서 선행 0을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="962b503db00b1879672bcf5ddf3d085de53c8149" translate="yes" xml:space="preserve">
          <source>Count number of set bits. For negative arguments returns negative population count of negated argument.</source>
          <target state="translated">세트 비트 수를 센다. 음수 인수 인 경우 음수 인수의 음수 모집단을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="63090ecac9b0f57709ee501a0435d228fe773b35" translate="yes" xml:space="preserve">
          <source>Count number of zero bits following the least significant set bit.</source>
          <target state="translated">최하위 설정 비트 다음에 오는 0 비트 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="5faeacbce8f47c677bf96f6dc4c1b07606858fc8" translate="yes" xml:space="preserve">
          <source>Count number of zero bits preceding the most significant set bit.</source>
          <target state="translated">가장 중요한 세트 비트 앞에 오는 0 비트 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="846dc456d8def4f1b260a6da69f7b7fbe3df67ec" translate="yes" xml:space="preserve">
          <source>Count of &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt;s, must be positive (unless specified otherwise).</source>
          <target state="translated">백작 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:GmpLimb&quot;&gt;GmpLimb&lt;/a&gt;&lt;/code&gt; (달리 명시되지 않는 한) 양수 여야,의.</target>
        </trans-unit>
        <trans-unit id="968c5d63647ccad23d5845924b8ad126e11fc3c0" translate="yes" xml:space="preserve">
          <source>Count the number of leaves in the tree:</source>
          <target state="translated">나무의 잎 수를 세십시오.</target>
        </trans-unit>
        <trans-unit id="70ba0602752c999e2b1af71b124c514535f3a370" translate="yes" xml:space="preserve">
          <source>Count the number of set bits in a 64-bit word.</source>
          <target state="translated">64 비트 워드에서 세트 비트 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="de38555facf060099d7100744f90c6f19bf42ebf" translate="yes" xml:space="preserve">
          <source>Count the number of set bits in a word.</source>
          <target state="translated">단어의 세트 비트 수를 센다.</target>
        </trans-unit>
        <trans-unit id="e9e12af935c1c09d3bcc55efcd42491435100638" translate="yes" xml:space="preserve">
          <source>Count the number of set bits in the lower 16 bits of a word.</source>
          <target state="translated">워드의 하위 16 비트에서 설정 비트 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="502e6842237bc7395372b3ecfd7f130090008bfb" translate="yes" xml:space="preserve">
          <source>Count the number of set bits in the lower 32 bits of a word.</source>
          <target state="translated">워드의 하위 32 비트에서 설정된 비트 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="fa8beae6de25ee4645fd4845f0007b7246fed692" translate="yes" xml:space="preserve">
          <source>Count the number of set bits in the lower 8 bits of a word.</source>
          <target state="translated">워드의 하위 8 비트에서 설정 비트 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="9e42b339884c70f35a6332efcbdfdf754c50e096" translate="yes" xml:space="preserve">
          <source>Count trailing zeros in a 64-bit word.</source>
          <target state="translated">64 비트 워드에서 후행 0을 센다.</target>
        </trans-unit>
        <trans-unit id="e01aec7ad840416ccdaf0e0340d4c72c7f5f5464" translate="yes" xml:space="preserve">
          <source>Count trailing zeros in a word.</source>
          <target state="translated">단어에서 후행 0을 센다.</target>
        </trans-unit>
        <trans-unit id="cd11dfc96a67079f175a06a8e98a8a0280f000d8" translate="yes" xml:space="preserve">
          <source>Count trailing zeros in the lower 16 bits of a word.</source>
          <target state="translated">워드의 하위 16 비트에서 후행 0을 센다.</target>
        </trans-unit>
        <trans-unit id="5f7378b9b285283323f64c8e328b2ee5a0c5dcfd" translate="yes" xml:space="preserve">
          <source>Count trailing zeros in the lower 32 bits of a word.</source>
          <target state="translated">워드의 하위 32 비트에서 후행 0을 센다.</target>
        </trans-unit>
        <trans-unit id="53a08e4694fc99f309fef7d332b71b56cd7c3dda" translate="yes" xml:space="preserve">
          <source>Count trailing zeros in the lower 8 bits of a word.</source>
          <target state="translated">워드의 하위 8 비트에서 후행 0을 센다.</target>
        </trans-unit>
        <trans-unit id="7810ca2eec9994e430b34bfbe7314516c25672d5" translate="yes" xml:space="preserve">
          <source>Counting</source>
          <target state="translated">Counting</target>
        </trans-unit>
        <trans-unit id="f027a8b8a8793e448266ca8427d676578bbb3a62" translate="yes" xml:space="preserve">
          <source>Covariant maps for tactics</source>
          <target state="translated">전술에 대한 공변량 맵</target>
        </trans-unit>
        <trans-unit id="e131440f69a2587f5c701c399ddee50b8b84976f" translate="yes" xml:space="preserve">
          <source>Cpp</source>
          <target state="translated">Cpp</target>
        </trans-unit>
        <trans-unit id="6e157c5da4410b7e9de85f5c93026b9176e69064" translate="yes" xml:space="preserve">
          <source>Create</source>
          <target state="translated">Create</target>
        </trans-unit>
        <trans-unit id="71899b9c58c5fa970a54ea8ca721e5c8881e4ea5" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;MutVar#&lt;/code&gt; with specified initial value in specified state thread.</source>
          <target state="translated">지정된 상태 스레드에서 지정된 초기 값으로 &lt;code&gt;MutVar#&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="2dd79f3974a375b94ca3336287dc3156af9dc178" translate="yes" xml:space="preserve">
          <source>Create ByteString of size &lt;code&gt;l&lt;/code&gt; and use action &lt;code&gt;f&lt;/code&gt; to fill it's contents.</source>
          <target state="translated">크기의 ByteString 만들기 &lt;code&gt;l&lt;/code&gt; 및 사용 액션 &lt;code&gt;f&lt;/code&gt; 그것의 내용을 채우기 위해.</target>
        </trans-unit>
        <trans-unit id="9e7aa979887174273fbbaa4ad9bbab3dde21a3a1" translate="yes" xml:space="preserve">
          <source>Create ByteString of size &lt;code&gt;l&lt;/code&gt; and use action &lt;code&gt;f&lt;/code&gt; to fill its contents.</source>
          <target state="translated">크기가 &lt;code&gt;l&lt;/code&gt; 인 ByteString을 만들고 작업 &lt;code&gt;f&lt;/code&gt; 를 사용하여 내용을 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="b0b35794a4db80f46d09ae5f0f93b508db91517a" translate="yes" xml:space="preserve">
          <source>Create ByteString of up to size size &lt;code&gt;l&lt;/code&gt; and use action &lt;code&gt;f&lt;/code&gt; to fill it's contents which returns its true size.</source>
          <target state="translated">최대 크기 &lt;code&gt;l&lt;/code&gt; 의 ByteString 을 작성하고 조치 &lt;code&gt;f&lt;/code&gt; 를 사용 하여 실제 크기를 리턴하는 컨텐츠를 채우십시오.</target>
        </trans-unit>
        <trans-unit id="0945deb2c25ab70c2886de7a1095808fed6401d5" translate="yes" xml:space="preserve">
          <source>Create Simple MAPI-session by logon</source>
          <target state="translated">로그온하여 간단한 MAPI 세션 만들기</target>
        </trans-unit>
        <trans-unit id="00045f2da876d4c575659e861cdc511bbfb730ab" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; which contains the supplied value.</source>
          <target state="translated">제공된 값을 포함 하는 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="0803ec81cb3e82177f6bdf3135ff80b12cec95eb" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; which is initially empty.</source>
          <target state="translated">초기에 비어 있는 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ff9c04c9b23f38a861cb2dcee73a0838b483bf9" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting the same sequence of bytes as a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; inserts large chunks of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly, but copies small ones to ensure that the generated chunks are large on average.</source>
          <target state="translated">지연 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 과 동일한 바이트 시퀀스를 나타내는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 . &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 게으른의 큰 덩어리 삽입 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 직접하지만, 복사 작은 사람은 생성 된 덩어리가 평균에 큰 것을 확인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="756d9726d3c4afa0501e00686cab8175fde2a167" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting the same sequence of bytes as a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; inserts large &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s directly, but copies small ones to ensure that the generated chunks are large on average.</source>
          <target state="translated">엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 과 동일한 바이트 시퀀스를 나타내는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 . &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 삽입 큰 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 는 직접이야,하지만 복사 작은 사람은 생성 된 덩어리가 평균에 큰 것을 확인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="651a2b5eb80e5360fbfc949b9a8c2d604d201c2d" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that encodes a list of values consecutively using a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; for each element. This function is more efficient than</source>
          <target state="translated">각 요소에 대해 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 사용하여 연속적으로 값 목록을 인코딩 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 만듭니다 . 이 기능은</target>
        </trans-unit>
        <trans-unit id="f8082f8ed051f7d5aa24e3ae9264cc7457689650" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that encodes a list of values consecutively using a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; for each element. This function is more efficient than the canonical</source>
          <target state="translated">각 요소에 대해 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 사용하여 값 목록을 연속적으로 인코딩 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 . 이 기능은 표준보다 더 효율적입니다</target>
        </trans-unit>
        <trans-unit id="e97bb11d4a028d1bdcf23ef87494572bd93b6397" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that encodes a sequence generated from a seed value using a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; for each sequence element.</source>
          <target state="translated">각 시퀀스 요소에 대해 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 사용하여 시드 값에서 생성 된 시퀀스를 인코딩 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="42e50bff5d707a845a13084b9a9418eb725fcf7b" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that encodes each &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; of a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. For example, we can write a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that filters a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; as follows.</source>
          <target state="translated">크리에이트 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 각 인코딩 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 을 엄격한의 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 . 예를 들어 다음과 같이 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 필터링하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aed26c73f4764e5f6bdb769a33697f69bb93a0b7" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that encodes each &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; of a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. For example, we can write a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that filters a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; as follows.</source>
          <target state="translated">크리에이트 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 각 인코딩 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 을 엄격한의 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 . 예를 들어 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 필터링하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성할 수 있습니다. 다음과 같이 .</target>
        </trans-unit>
        <trans-unit id="2424671ddb1277a20f3d15187bbca66bfe402e90" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that encodes each &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; of a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;. For example, we can write a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that filters a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; as follows.</source>
          <target state="translated">크리에이트 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 각 인코딩 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 을 엄격한의 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 을 . 예를 들어 다음과 같이 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 필터링하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd5b440a25af7d8a6d033ee2c0d4aa99f941053e" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that encodes values with the given &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 으로 값을 인코딩 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d8925f336391a694d9217788be990e809b9e36b" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting the same sequence of bytes as a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; inserts large chunks of the lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; directly, but copies small ones to ensure that the generated chunks are large on average.</source>
          <target state="translated">지연 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 과 동일한 바이트 시퀀스를 나타내는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 . &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 게으른의 큰 덩어리 삽입 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 직접하지만, 복사 작은 사람은 생성 된 덩어리가 평균에 큰 것을 확인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45be853fdd5f3117cd54a8929b9cc6c349053db8" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting the same sequence of bytes as a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; inserts large &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s directly, but copies small ones to ensure that the generated chunks are large on average.</source>
          <target state="translated">엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 과 동일한 바이트 시퀀스를 나타내는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 . &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 삽입 큰 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 는 직접이야,하지만 복사 작은 사람은 생성 된 덩어리가 평균에 큰 것을 확인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db85620f84495a90f05bfed7f97054ac264d43f9" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-time-clock#t:DiffTime&quot;&gt;DiffTime&lt;/a&gt;&lt;/code&gt; from a number of picoseconds.</source>
          <target state="translated">여러 피코 초에서 &lt;code&gt;&lt;a href=&quot;data-time-clock#t:DiffTime&quot;&gt;DiffTime&lt;/a&gt;&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="36ee02840fe2d65f0f66f7f5fac6512b64c205b1" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-time-clock#t:DiffTime&quot;&gt;DiffTime&lt;/a&gt;&lt;/code&gt; which represents an integral number of seconds.</source>
          <target state="translated">정수 초를 나타내는 &lt;code&gt;&lt;a href=&quot;data-time-clock#t:DiffTime&quot;&gt;DiffTime&lt;/a&gt;&lt;/code&gt; 을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="b6cf657720739c222d1ad7e74033369a0823ad2c" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;data-time-clock#t:NominalDiffTime&quot;&gt;NominalDiffTime&lt;/a&gt;&lt;/code&gt; from a number of seconds.</source>
          <target state="translated">몇 초에서 &lt;code&gt;&lt;a href=&quot;data-time-clock#t:NominalDiffTime&quot;&gt;NominalDiffTime&lt;/a&gt;&lt;/code&gt; 을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca821b3aed22d09be20b7a0b697024210b14e69e" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:ForeignRef&quot;&gt;ForeignRef&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:RemoteRef&quot;&gt;RemoteRef&lt;/a&gt;&lt;/code&gt;. The finalizer should arrange to call &lt;code&gt;freeHValueRef&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:HValueRef&quot;&gt;HValueRef&lt;/a&gt;&lt;/code&gt;. (since this function needs to be called in the process that created the &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:HValueRef&quot;&gt;HValueRef&lt;/a&gt;&lt;/code&gt;, it cannot be called directly from the finalizer).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:RemoteRef&quot;&gt;RemoteRef&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:ForeignRef&quot;&gt;ForeignRef&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 . 종료 자는 전화를 준비해야 &lt;code&gt;freeHValueRef&lt;/code&gt; 을 온 &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:HValueRef&quot;&gt;HValueRef&lt;/a&gt;&lt;/code&gt; . (이 함수는 &lt;code&gt;&lt;a href=&quot;ghci-remotetypes#t:HValueRef&quot;&gt;HValueRef&lt;/a&gt;&lt;/code&gt; 를 생성 한 프로세스에서 호출되어야하므로 종료 자 에서 직접 호출 할 수 없습니다).</target>
        </trans-unit>
        <trans-unit id="36b1c0b9e3b7377d3fb704254d436888da703f96" translate="yes" xml:space="preserve">
          <source>Create a &lt;em&gt;directory&lt;/em&gt; symbolic link. The target path can be either absolute or relative and need not refer to an existing directory. The order of arguments follows the POSIX convention.</source>
          <target state="translated">&lt;em&gt;디렉토리&lt;/em&gt; 기호 링크를 작성하십시오 . 대상 경로는 절대 또는 상대 경로 일 수 있으며 기존 디렉토리를 참조 할 필요는 없습니다. 인수 순서는 POSIX 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="92afe06e8360d935ffa0176ee680da6d515bd51d" translate="yes" xml:space="preserve">
          <source>Create a &lt;em&gt;file&lt;/em&gt; symbolic link. The target path can be either absolute or relative and need not refer to an existing file. The order of arguments follows the POSIX convention.</source>
          <target state="translated">&lt;em&gt;파일&lt;/em&gt; 기호 링크를 작성하십시오 . 대상 경로는 절대 또는 상대 경로 일 수 있으며 기존 파일을 참조 할 필요는 없습니다. 인수 순서는 POSIX 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="9cbdfd87c409c245bfe8440c2433e05b3b6e5158" translate="yes" xml:space="preserve">
          <source>Create a Haskell &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; from a Windows &lt;code&gt;&lt;a href=&quot;system-win32-types#t:HANDLE&quot;&gt;HANDLE&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Windows &lt;code&gt;&lt;a href=&quot;system-win32-types#t:HANDLE&quot;&gt;HANDLE&lt;/a&gt;&lt;/code&gt; 에서 Haskell &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="ad2a8a535dd9dfa4f0cb74b89c39bf49ccfebbc9" translate="yes" xml:space="preserve">
          <source>Create a Haskell &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; from a Windows &lt;code&gt;&lt;a href=&quot;system-win32-types#t:HANDLE&quot;&gt;HANDLE&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Windows &lt;code&gt;&lt;a href=&quot;system-win32-types#t:HANDLE&quot;&gt;HANDLE&lt;/a&gt;&lt;/code&gt; 에서 Haskell &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="9a850f9130cddbb6d0838748b45fa0cd237ead40" translate="yes" xml:space="preserve">
          <source>Create a Haskell &lt;code&gt;&lt;a href=&quot;../base/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; from a Windows &lt;code&gt;&lt;a href=&quot;system-win32-types#t:HANDLE&quot;&gt;HANDLE&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Windows &lt;code&gt;&lt;a href=&quot;system-win32-types#t:HANDLE&quot;&gt;HANDLE&lt;/a&gt;&lt;/code&gt; 에서 Haskell &lt;code&gt;&lt;a href=&quot;../base/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="5802df023298c4d16cf0b9712b8c70a4b7e9f148" translate="yes" xml:space="preserve">
          <source>Create a custom allocation strategy. See the code for &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:safeStrategy&quot;&gt;safeStrategy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:untrimmedStrategy&quot;&gt;untrimmedStrategy&lt;/a&gt;&lt;/code&gt; for examples.</source>
          <target state="translated">맞춤 할당 전략을 만듭니다. &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:safeStrategy&quot;&gt;safeStrategy&lt;/a&gt;&lt;/code&gt; 코드 와 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:untrimmedStrategy&quot;&gt;untrimmedStrategy&lt;/a&gt;&lt;/code&gt; 예제 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2b8e31fcd93a870f79943de5f8da99266563a5fe" translate="yes" xml:space="preserve">
          <source>Create a finished completion out of the given word.</source>
          <target state="translated">주어진 단어에서 완성 된 완성을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e58cf08c8ca6e9d8e367573248dc7abe191bbfc0" translate="yes" xml:space="preserve">
          <source>Create a mutable byte array that the GC guarantees not to move.</source>
          <target state="translated">GC가 움직이지 않을 것을 보장하는 가변 바이트 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="edd1495853d6b79fa3d7de4879e4f0b3ff310bd9" translate="yes" xml:space="preserve">
          <source>Create a mutable byte array, aligned by the specified amount, that the GC guarantees not to move.</source>
          <target state="translated">GC가 움직이지 않도록 보장하기 위해 지정된 양으로 정렬 된 가변 바이트 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2f00dd1caa57025743acb620673aca92325ea94a" translate="yes" xml:space="preserve">
          <source>Create a nameless non-summer timezone for this number of hours.</source>
          <target state="translated">이 시간 동안 무 여름 시간대를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="d69c61885d235f126ac1a1c5ffb931b232d9dea4" translate="yes" xml:space="preserve">
          <source>Create a nameless non-summer timezone for this number of minutes.</source>
          <target state="translated">이 시간 (분) 동안 이름이없는 여름이 아닌 시간대를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8508d459c4bff012afd8c5c0c0f0f926a7e005dd" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; holding a value supplied</source>
          <target state="translated">제공된 값을 보유한 새로운 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 만들기</target>
        </trans-unit>
        <trans-unit id="af477688018958b86db99d8bc227f224fba9b3fd" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; holding a value supplied</source>
          <target state="translated">제공된 값을 보유한 새로운 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 만들기</target>
        </trans-unit>
        <trans-unit id="c77360c2c7cdba4d7876a1e48915312076868236" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; holding a value supplied</source>
          <target state="translated">제공된 값을 보유한 새로운 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 만들기</target>
        </trans-unit>
        <trans-unit id="38180d40d7c61af3911ac6376d1b69ab379c5227" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;text-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; with the given source name, and line number and column number set to 1, the upper left.</source>
          <target state="translated">주어진 소스 이름과 줄 번호와 열 번호를 왼쪽 상단으로 1로 설정 하여 새로운 &lt;code&gt;&lt;a href=&quot;text-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="8c6ef286fe16e752b32e572d6c496342eb951a2c" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;text-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; with the given source name, line number and column number.</source>
          <target state="translated">지정된 소스 이름, 행 번호 및 열 번호 로 새 &lt;code&gt;&lt;a href=&quot;text-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="daea250c1ea7ee436301f9cd3ff21648d39b426d" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; with the given source name, and line number and column number set to 1, the upper left.</source>
          <target state="translated">주어진 소스 이름과 줄 번호와 열 번호를 왼쪽 상단으로 1로 설정 하여 새로운 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="4c76b562980b75a054716cda65a92b5a25047a1d" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; with the given source name, line number and column number.</source>
          <target state="translated">지정된 소스 이름, 행 번호 및 열 번호 로 새 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="39dcd97a1dc08bc2569b3fc23fd8ed00fabccda6" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;TVar#&lt;/code&gt; holding a specified initial value.</source>
          <target state="translated">지정된 초기 값을 보유한 새 &lt;code&gt;TVar#&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="23258a2fdac63015c5100ac11f1a84c9cec65aa7" translate="yes" xml:space="preserve">
          <source>Create a new CNF with a single compact block. The argument is the capacity of the compact block (in bytes, not words). The capacity is rounded up to a multiple of the allocator block size and is capped to one mega block.</source>
          <target state="translated">단일 컴팩트 블록으로 새 CNF를 만듭니다. 인수는 압축 블록의 용량 (단어가 아닌 바이트)입니다. 용량은 할당 자 블록 크기의 배수로 반올림되며 1 메가 블록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="00160bd46f8c39abd64446014cdb16af8aa67d19" translate="yes" xml:space="preserve">
          <source>Create a new Compact with the given size (in bytes, not words). The size is rounded up to a multiple of the allocator block size, and capped to one mega block.</source>
          <target state="translated">주어진 크기 (워드가 아닌 바이트)로 새로운 Compact를 만듭니다. 크기는 할당 자 블록 크기의 배수로 반올림되고 하나의 메가 블록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="f586fe8956038825470043a85ce56f1b0a9b45f1" translate="yes" xml:space="preserve">
          <source>Create a new array of breakpoint flags</source>
          <target state="translated">새로운 중단 점 플래그 배열 만들기</target>
        </trans-unit>
        <trans-unit id="114bc5f557448f87ba3ba37d21a33303d48e608b" translate="yes" xml:space="preserve">
          <source>Create a new event manager.</source>
          <target state="translated">새로운 이벤트 관리자를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="81ba7cf2f715d09d883a2584e949b47dbe98eab6" translate="yes" xml:space="preserve">
          <source>Create a new mutable array of arrays with the specified number of elements, in the specified state thread, with each element recursively referring to the newly created array.</source>
          <target state="translated">지정된 상태 스레드에서 지정된 수의 요소를 갖는 새로운 가변 배열을 새로 생성 된 배열을 반복적으로 참조하는 각 요소로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="54f2ac2227f78c40097b4522ee37bec2c89c5e10" translate="yes" xml:space="preserve">
          <source>Create a new mutable array with the specified number of elements, in the specified state thread, with each element containing the specified initial value.</source>
          <target state="translated">지정된 상태 스레드에서 지정된 수의 요소로 지정된 초기 값을 포함하는 각 요소를 사용하여 새 가변 배열을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="466a1587cd583580f451238c1058532cc7173ae1" translate="yes" xml:space="preserve">
          <source>Create a new mutable byte array of specified size (in bytes), in the specified state thread.</source>
          <target state="translated">지정된 상태 스레드에서 지정된 크기 (바이트)의 새로운 가변 바이트 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8d38747d5cafb62a1d4c23189ab75d25c33220ef" translate="yes" xml:space="preserve">
          <source>Create a new pipe. The returned &lt;code&gt;Handle&lt;/code&gt; will use the default encoding and newline translation mode (just like &lt;code&gt;Handle&lt;/code&gt;s created by &lt;code&gt;openFile&lt;/code&gt;).</source>
          <target state="translated">새 파이프를 작성하십시오. 리턴 된 &lt;code&gt;Handle&lt;/code&gt; 은 기본 인코딩 및 개행 변환 모드를 사용합니다 ( &lt;code&gt;openFile&lt;/code&gt; 에 의해 작성된 &lt;code&gt;Handle&lt;/code&gt; 과 동일 ).</target>
        </trans-unit>
        <trans-unit id="49a95fcd208e463894853db8e17df73866959fee" translate="yes" xml:space="preserve">
          <source>Create a new process group</source>
          <target state="translated">새로운 프로세스 그룹 생성</target>
        </trans-unit>
        <trans-unit id="f4918908a9ddecf23399957c34bf47bc495f2595" translate="yes" xml:space="preserve">
          <source>Create a piece of HTML which is the concatenation of two things which can be made into HTML.</source>
          <target state="translated">HTML로 만들 수있는 두 가지를 연결 한 HTML을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="1ae61ab6375f35c4b6014b06d93a599ec08de088" translate="yes" xml:space="preserve">
          <source>Create a pipe for interprocess communication and return a &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; pair.</source>
          <target state="translated">프로세스 간 통신을위한 파이프를 작성하고 &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 쌍을 리턴하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f7d000399adba15dedace95e8d2bfdadc34c9ec" translate="yes" xml:space="preserve">
          <source>Create a pipe for interprocess communication and return a &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-internals#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; pair.</source>
          <target state="translated">프로세스 간 통신을위한 파이프를 작성하고 &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-internals#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; 쌍을 리턴하십시오 .</target>
        </trans-unit>
        <trans-unit id="d73287a3adf48de007154fd95a0fe3aee808b7b7" translate="yes" xml:space="preserve">
          <source>Create a pipe for interprocess communication and return a &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; pair.</source>
          <target state="translated">프로세스 간 통신을위한 파이프를 &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 쌍을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cdc27ee4247ee7993cd8dfa3462e5691853360c3" translate="yes" xml:space="preserve">
          <source>Create a pipe for interprocess communication and return a &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-internals#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; pair.</source>
          <target state="translated">프로세스 간 통신을위한 파이프를 &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-internals#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; 쌍을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a8c6b8ab6044799f5d618de8915a3775c6bdae69" translate="yes" xml:space="preserve">
          <source>Create a pipe for interprocess communication and return a &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; pair.</source>
          <target state="translated">프로세스 간 통신을위한 파이프를 &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 쌍을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4419c4f78a6adf0aa94b60fe3032e533a6ff63d2" translate="yes" xml:space="preserve">
          <source>Create a pipe for interprocess communication and return a &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-internals#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; pair.</source>
          <target state="translated">프로세스 간 통신을위한 파이프를 &lt;code&gt;(readEnd, writeEnd)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-internals#t:FD&quot;&gt;FD&lt;/a&gt;&lt;/code&gt; 쌍을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="be9c023d68f2a1484387a1c5d6c3f97319bc656c" translate="yes" xml:space="preserve">
          <source>Create a set of BCO objects, and return HValueRefs to them Note: Each ByteString contains a Binary-encoded [ResolvedBCO], not a ResolvedBCO. The list is to allow us to serialise the ResolvedBCOs in parallel. See &lt;code&gt;createBCOs&lt;/code&gt; in compiler&lt;em&gt;GHC&lt;/em&gt;Runtime/Interpreter.hs.</source>
          <target state="translated">BCO 개체 집합을 만들고 HValueRefs를 반환합니다. 참고 : 각 ByteString에는 ResolvedBCO가 아닌 이진 인코딩 된 [ResolvedBCO]가 포함됩니다. 목록은 ResolvedBCO를 병렬로 직렬화 할 수 있도록하는 것입니다. 컴파일러 &lt;em&gt;GHC&lt;/em&gt; Runtime / Interpreter.hs의 &lt;code&gt;createBCOs&lt;/code&gt; 를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="af88e6d672145d94814d61a78597bfa9755d78cc" translate="yes" xml:space="preserve">
          <source>Create a set of BCO objects, and return HValueRefs to them Note: Each ByteString contains a Binary-encoded [ResolvedBCO], not a ResolvedBCO. The list is to allow us to serialise the ResolvedBCOs in parallel. See &lt;code&gt;createBCOs&lt;/code&gt; in compiler&lt;em&gt;ghci&lt;/em&gt;GHCi.hsc.</source>
          <target state="translated">BCO 오브젝트 세트를 작성하고 HValueRefs를 리턴하십시오. 참고 : 각 ByteString에는 ResolvedBCO가 아닌 2 진 인코딩 된 [ResolvedBCO]가 포함됩니다. 목록은 ResolvedBCO를 병렬로 직렬화 할 수 있도록하기위한 것입니다. 컴파일러 &lt;em&gt;ghci&lt;/em&gt; GHCi.hsc의 &lt;code&gt;createBCOs&lt;/code&gt; 를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a70d76d7b1bbdb192631eea8926a810275465a84" translate="yes" xml:space="preserve">
          <source>Create a set of CostCentres with the same module name</source>
          <target state="translated">동일한 모듈 이름으로 CostCentres 세트를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="17d0ad1df326bea41844dc0f4b9b03677110fcca" translate="yes" xml:space="preserve">
          <source>Create a snapshot of specified resources. Call closeHandle to close snapshot.</source>
          <target state="translated">지정된 리소스의 스냅 샷을 만듭니다. closeHandle을 호출하여 스냅 샷을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="ee95cbf0d5a198a97ef6b06969dec534d13e3341" translate="yes" xml:space="preserve">
          <source>Create a stable pointer referring to the given Haskell value.</source>
          <target state="translated">주어진 Haskell 값을 참조하는 안정적인 포인터를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6ff03cd89035feea1054db8e78456707fac6e2b5" translate="yes" xml:space="preserve">
          <source>Create a write-only &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;. More precisely, &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:readTChan&quot;&gt;readTChan&lt;/a&gt;&lt;/code&gt; will &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; even after items have been written to the channel. The only way to read a broadcast channel is to duplicate it with &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:dupTChan&quot;&gt;dupTChan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">쓰기 전용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 을 작성하십시오 . 보다 정확하게, &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:readTChan&quot;&gt;readTChan&lt;/a&gt;&lt;/code&gt; 은 항목이 채널에 쓰여진 후에도 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; 합니다. 브로드 캐스트 채널을 읽는 유일한 방법은 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:dupTChan&quot;&gt;dupTChan&lt;/a&gt;&lt;/code&gt; 으로 복제하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="f42e3de888a4aea08cf836053a9965e3af6b1c9a" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; which is initially empty.</source>
          <target state="translated">처음에 비어 있는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="2845c4f09dbf233465931337526920c110b11a98" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; which is initially empty.</source>
          <target state="translated">처음에는 비어 있는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="386ee16223aa47b9d5bc78d45b702bcd34c4da15" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; which is initially empty.</source>
          <target state="translated">처음에는 비어 있는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="3d6ecaa898ffe7f3832b01a81f12eb20577a8fa0" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; which contains the supplied value.</source>
          <target state="translated">제공된 값이 포함 된 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="b6004b41f6fe416427fd43cae954921d997817b3" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; which is initially empty.</source>
          <target state="translated">처음에 비어 있는 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d792718b036d54e94a179082639af76b1e63a57d" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; which contains the supplied value.</source>
          <target state="translated">제공된 값이 포함 된 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="81a2227df32ab3e6b7015c7d796833117c2764b2" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; which is initially empty.</source>
          <target state="translated">처음에 비어 있는 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="3da5d0de72d8d0b6c57ab915289b292ac1ce1f98" translate="yes" xml:space="preserve">
          <source>Create an empty bit queue builder. This is represented as a single guard bit in the most significant position.</source>
          <target state="translated">빈 비트 큐 빌더를 작성하십시오. 가장 중요한 위치에서 단일 가드 비트로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f1269bcfb28e5f12bbc5b255bc45ff128cf82968" translate="yes" xml:space="preserve">
          <source>Create an info table for a constructor</source>
          <target state="translated">생성자를위한 정보 테이블 만들기</target>
        </trans-unit>
        <trans-unit id="6da892e18107b5a7c239993e97889226099e469a" translate="yes" xml:space="preserve">
          <source>Create an uninitialized mutable array.</source>
          <target state="translated">초기화되지 않은 가변 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="1b29f91a26b2c9da91db97e0a0f96868491242a9" translate="yes" xml:space="preserve">
          <source>Create and open this file in WriteOnly mode. A special case of &lt;code&gt;&lt;a href=&quot;system-posix-io#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">WriteOnly 모드에서이 파일을 작성하고여십시오. &lt;code&gt;&lt;a href=&quot;system-posix-io#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt; 의 특별한 경우입니다 . &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; 유형 을 사용하는 방법에 대한 정보는 &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3126a05adda43c14337cdc996328505473853475" translate="yes" xml:space="preserve">
          <source>Create and open this file in WriteOnly mode. A special case of &lt;code&gt;&lt;a href=&quot;system-posix-io#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">이 파일을 WriteOnly 모드로 만들고 엽니 다. &lt;code&gt;&lt;a href=&quot;system-posix-io#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt; 의 특별한 경우 . &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; 유형 을 사용하는 방법에 대한 정보는 &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="88f03b4509ee14aca613f7ec11d5f8859ac9ff6d" translate="yes" xml:space="preserve">
          <source>Create and open this file in WriteOnly mode. A special case of &lt;code&gt;&lt;a href=&quot;system-posix-io#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">이 파일을 WriteOnly 모드로 만들고 엽니 다. &lt;code&gt;&lt;a href=&quot;system-posix-io#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt; 의 특별한 경우 . &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; 유형 을 사용하는 방법에 대한 정보는 &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe01c256ba94b6ec912cf325cc7b32cddd10f106" translate="yes" xml:space="preserve">
          <source>Create and open this file in WriteOnly mode. A special case of &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">WriteOnly 모드에서이 파일을 작성하고여십시오. &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt; 의 특별한 경우입니다 . &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; 유형 을 사용하는 방법에 대한 정보는 &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="373805356060a6eba44037018a99d0dcf234509b" translate="yes" xml:space="preserve">
          <source>Create and open this file in WriteOnly mode. A special case of &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">이 파일을 WriteOnly 모드로 만들고 엽니 다. &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt; 의 특별한 경우 . &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; 유형 을 사용하는 방법에 대한 정보는 &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="535f7ca7939f399498218cdd03b1b2352e3d6f4c" translate="yes" xml:space="preserve">
          <source>Create and open this file in WriteOnly mode. A special case of &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; for information on how to use the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">이 파일을 WriteOnly 모드로 만들고 엽니 다. &lt;code&gt;&lt;a href=&quot;system-posix-io-bytestring#v:openFd&quot;&gt;openFd&lt;/a&gt;&lt;/code&gt; 의 특별한 경우 . &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-posix-types#t:FileMode&quot;&gt;FileMode&lt;/a&gt;&lt;/code&gt; 유형 을 사용하는 방법에 대한 정보는 &lt;code&gt;&lt;a href=&quot;system-posix#v:Files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c1448c32ebec73c944bf29bb1c28a62ae40dcc25" translate="yes" xml:space="preserve">
          <source>Create is mix file.</source>
          <target state="translated">믹스 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="442f68673be56dd124bd7dad15bd5f0e66b61be9" translate="yes" xml:space="preserve">
          <source>Create its parents too?</source>
          <target state="translated">부모도 만드세요?</target>
        </trans-unit>
        <trans-unit id="c4a1cef96dc6ec531c7274e3f7fd12df3848593e" translate="yes" xml:space="preserve">
          <source>Create new &lt;code&gt;IOPort#&lt;/code&gt;; initially empty.</source>
          <target state="translated">새 &lt;code&gt;IOPort#&lt;/code&gt; 생성 ; 처음에는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d74508472aa325dd84197b6ddff0cec62a5f5a4e" translate="yes" xml:space="preserve">
          <source>Create new &lt;code&gt;MVar#&lt;/code&gt;; initially empty.</source>
          <target state="translated">새로운 &lt;code&gt;MVar#&lt;/code&gt; 생성 ; 처음에는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3472467b8d8410a5ff1a349d7f4a7ffb7b36975b" translate="yes" xml:space="preserve">
          <source>Create output suitable for the &lt;code&gt;gs&lt;/code&gt; PostScript previewer (or similar). In this case the graph is printed in portrait mode without scaling. The output is unsuitable for a laser printer.</source>
          <target state="translated">&lt;code&gt;gs&lt;/code&gt; PostScript 미리보기 (또는 유사한)에 적합한 출력을 만듭니다 . 이 경우 그래프는 배율 조정없이 세로 모드로 인쇄됩니다. 레이저 프린터에 적합하지 않은 출력입니다.</target>
        </trans-unit>
        <trans-unit id="e15726c31f279d0765b9db3ac04ae041e4e0a51b" translate="yes" xml:space="preserve">
          <source>Create the symbolic link with the unprivileged mode</source>
          <target state="translated">비 특권 모드로 심볼릭 링크 만들기</target>
        </trans-unit>
        <trans-unit id="7bc424af47afeb108b9e4b025a3def9b10cf95b7" translate="yes" xml:space="preserve">
          <source>Create top-level non-recursive functions with at most &amp;lt;n&amp;gt; parameters while performing late lambda lifting.</source>
          <target state="translated">늦은 람다 리프팅을 수행하는 동안 최대 &amp;lt;n&amp;gt; 개의 파라미터로 최상위 비 재귀 함수를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e03ce82a78cde6058e9032f135260a43c85752d8" translate="yes" xml:space="preserve">
          <source>Create top-level non-recursive functions with at most &amp;lt;n&amp;gt; parameters while performing late lambda lifting. The default is 5, the number of available parameter registers on x86_64.</source>
          <target state="translated">늦은 람다 리프팅을 수행하는 동안 최대 &amp;lt;n&amp;gt; 개의 파라미터로 최상위 비 재귀 함수를 만듭니다. 기본값은 x86_64에서 사용 가능한 매개 변수 레지스터의 수인 5입니다.</target>
        </trans-unit>
        <trans-unit id="8e93ad897e92d6188e52e3ca375347d470b573e2" translate="yes" xml:space="preserve">
          <source>Create top-level recursive functions with at most &amp;lt;n&amp;gt; parameters while performing late lambda lifting.</source>
          <target state="translated">늦은 람다 리프팅을 수행하면서 최대 &amp;lt;n&amp;gt; 개의 파라미터로 최상위 재귀 함수를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="055ee3dd4f1a8dd32a19dec9d6ec26fef4b75249" translate="yes" xml:space="preserve">
          <source>Create top-level recursive functions with at most &amp;lt;n&amp;gt; parameters while performing late lambda lifting. The default is 5, the number of available parameter registers on x86_64.</source>
          <target state="translated">늦은 람다 리프팅을 수행하면서 최대 &amp;lt;n&amp;gt; 개의 파라미터로 최상위 재귀 함수를 만듭니다. 기본값은 x86_64에서 사용 가능한 매개 변수 레지스터의 수인 5입니다.</target>
        </trans-unit>
        <trans-unit id="d5b19f9b9886a420702073940f6470c9db65a8d8" translate="yes" xml:space="preserve">
          <source>CreateFile handle</source>
          <target state="translated">CreateFile 핸들</target>
        </trans-unit>
        <trans-unit id="c3253efe9093358f7a6b05b7418a6f8169415700" translate="yes" xml:space="preserve">
          <source>CreateMode</source>
          <target state="translated">CreateMode</target>
        </trans-unit>
        <trans-unit id="09e793592754b717d65893a2edec48a18a91f778" translate="yes" xml:space="preserve">
          <source>CreatePipe</source>
          <target state="translated">CreatePipe</target>
        </trans-unit>
        <trans-unit id="d87c0b36b43c81178bf82f05421a7974783ce7e0" translate="yes" xml:space="preserve">
          <source>CreateProcess</source>
          <target state="translated">CreateProcess</target>
        </trans-unit>
        <trans-unit id="182e32c5591f9bdfa9259f14cd20558084afd9ef" translate="yes" xml:space="preserve">
          <source>Creates a means of decoding bytes into characters: the result must not be shared between several byte sequences or simultaneously across threads</source>
          <target state="translated">바이트를 문자로 디코딩하는 수단을 만듭니다. 결과는 여러 바이트 시퀀스간에 또는 스레드간에 동시에 공유되어서는 안됩니다</target>
        </trans-unit>
        <trans-unit id="b24e9933117124de7d907f3000c8eed42d4dcd03" translate="yes" xml:space="preserve">
          <source>Creates a means of encode characters into bytes: the result must not be shared between several character sequences or simultaneously across threads</source>
          <target state="translated">문자를 바이트로 인코딩하는 수단을 만듭니다. 결과는 여러 문자 시퀀스간에 또는 스레드간에 동시에 공유되어서는 안됩니다</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
