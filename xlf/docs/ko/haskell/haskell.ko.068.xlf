<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="34d3235657a416a08470e9737648f234dc9b564c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; 은 줄 바꿈 문자에서 문자열을 문자열 목록으로 나눕니다. 결과 문자열에는 줄 바꿈이 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d257a40bab1ece98bfd0554292505ad0b8197913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; 은 목록에서 최대 값을 반환합니다.이 값은 비어 있지 않고 유한하며 정렬 된 유형이어야합니다. &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt; 의 특수한 경우로, 프로그래머가 자체 비교 기능을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b409d587004226531c4c952954bf3a65187c828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; 은 목록에서 최소값을 반환합니다.이 값은 비어 있지 않고 유한하며 정렬 된 유형이어야합니다. 프로그래머가 자체 비교 기능을 제공 할 수 있도록하는 &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt; 의 특수한 경우입니다.</target>
        </trans-unit>
        <trans-unit id="e9f4ff7773a89ae60de1da2aac827c2152bcd23c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; 의 부정입니다.</target>
        </trans-unit>
        <trans-unit id="f5918c8d1b197ed3a0becf2b7ca664b38cc19f74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; 부울 목록의 분리를 반환합니다. 결과가 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 가되도록하려면 목록이 유한해야합니다. &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , 그러나, 결과 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 유한 또는 무한 목록의 유한 인덱스 값입니다.</target>
        </trans-unit>
        <trans-unit id="a677af46f3e047946923afd966e750559d7d679a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 는 무한리스트이며 &lt;code&gt;x&lt;/code&gt; 는 모든 원소의 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="255b893eabb96daf6eb78db66aa3d00d0aacdcd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n x&lt;/code&gt; 길이의 목록 &lt;code&gt;n&lt;/code&gt; 과 &lt;code&gt;x&lt;/code&gt; 각 요소의 값. 보다 일반적인 &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; 의 인스턴스이며,여기서 &lt;code&gt;n&lt;/code&gt; 은 일체형 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c67f8631f7545bf0267d1a9d6bde0113e4bd6401" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; 의 요소를 반환 &lt;code&gt;xs&lt;/code&gt; 역순으로합니다. &lt;code&gt;xs&lt;/code&gt; 는 유한해야합니다.</target>
        </trans-unit>
        <trans-unit id="a62d4347f16c1bd4b0511872d22b982a5a62c665" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; 술어 &lt;code&gt;p&lt;/code&gt; 및 목록 &lt;code&gt;xs&lt;/code&gt; 에 적용되는 span 은 첫 번째 요소가 &lt;code&gt;p&lt;/code&gt; 를 만족하는 &lt;code&gt;xs&lt;/code&gt; 요소 중 가장 긴 접두사 (비어있을 수 있음)이고 두 번째 요소가 목록의 나머지 부분 인튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bb6be4a3e987c474d875791b91a20621fb5f5954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; 는 &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1dd2175a54ef8e7543543661ef61e6630901d48d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; 는 첫 번째 요소가길이 &lt;code&gt;n&lt;/code&gt; 의 &lt;code&gt;xs&lt;/code&gt; 접두사이고 두 번째 요소가 목록의 나머지 부분 인튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3a431017754ad67adc003f8933b8daf88f503298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; 리스트 &lt;code&gt;xs&lt;/code&gt; 에 적용된 &lt;code&gt;n&lt;/code&gt; 을취 하면길이 &lt;code&gt;n&lt;/code&gt; 의 &lt;code&gt;xs&lt;/code&gt; 접두어를 반환하거나 &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;길이&lt;/a&gt; xs 이면 &lt;code&gt;xs&lt;/code&gt; 자체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9416f8ab38a6a456ce2ab46b5cb5ee0a714c32f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; 는 , 술어에 적용 &lt;code&gt;p&lt;/code&gt; 및 목록 &lt;code&gt;xs&lt;/code&gt; , 가장 긴 접두사 (하늘의) 반환 &lt;code&gt;xs&lt;/code&gt; 충족의 그 요소의 &lt;code&gt;p&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ca3260bd80e445c70ebee8ef36bb94699933245d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; 에 역 동작이다 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; . 각각에 새 줄 바꿈을 추가 한 후 행을 결합합니다.</target>
        </trans-unit>
        <trans-unit id="2c343661c4c5b2ba3867b786e6ec22fcd23bab38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; 에 역 동작 인 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; . 공백을 구분하여 단어를 결합합니다.</target>
        </trans-unit>
        <trans-unit id="e15cac96c59f8fe5a7d26cbe12b261e69528ec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 은 쌍 목록을 첫 번째 구성 요소 목록과 두 번째 구성 요소 목록으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="21fad57b58ceda8fc2c35e80ccbbf130647310a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; 는 문자열을 단어 목록으로 나누고 공백으로 구분합니다.</target>
        </trans-unit>
        <trans-unit id="dcdc3bff0e3d396c9659b6e0817fd3ca5435c91f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 은 목록 융합이 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="a4c74902e41e6a90fe42cbdb4a15b17aa3612718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 가 게으르다 :</target>
        </trans-unit>
        <trans-unit id="27dc5d2945ebc8477d5418718b41eff26f59f736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; 은 세 개의 목록을 가져와 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 과 유사한 트리플 목록을 반환합니다. 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="5704149f69dc4d065be3de2c92a9bfd3b028b253" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 는리스트 융합이 가능하지만, 첫번째리스트 인수와 결과리스트로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="3067983166d12ffd7099880da0207ed3c82c3b10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 는 게으른 것입니다 :</target>
        </trans-unit>
        <trans-unit id="3b8a40cd1a39553a12b4e46d896437e11f11ae50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a record field, of the form &lt;code&gt;fieldName#=value&lt;/code&gt;. That is, an alphanumeric identifier &lt;code&gt;fieldName&lt;/code&gt; followed by the symbol &lt;code&gt;#&lt;/code&gt;. The second argument is a parser for the field value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; &lt;code&gt;fieldName#=value&lt;/code&gt; 형식의 레코드 필드에 대한 구문 분석기를 읽으십시오 . 즉, 영숫자 식별자 &lt;code&gt;fieldName&lt;/code&gt; 뒤에 &lt;code&gt;#&lt;/code&gt; 기호가옵니다. 두 번째 인수는 필드 값에 대한 파서입니다.</target>
        </trans-unit>
        <trans-unit id="ae5a5faeb26de5b3c48d6dd9e8be5375ec884457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a record field, of the form &lt;code&gt;fieldName=value&lt;/code&gt;. The &lt;code&gt;fieldName&lt;/code&gt; must be an alphanumeric identifier; for symbols (operator-style) field names, e.g. &lt;code&gt;(#)&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readSymField&quot;&gt;readSymField&lt;/a&gt;&lt;/code&gt;). The second argument is a parser for the field value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; &lt;code&gt;fieldName=value&lt;/code&gt; 형식의 레코드 필드에 대한 구문 분석기를 읽으십시오 . &lt;code&gt;fieldName&lt;/code&gt; 영숫자 식별자 여야; 기호 (연산자 스타일) 필드 이름의 경우 (예 : &lt;code&gt;(#)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ghc-read#v:readSymField&quot;&gt;readSymField&lt;/a&gt;&lt;/code&gt; 사용) 두 번째 인수는 필드 값에 대한 파서입니다.</target>
        </trans-unit>
        <trans-unit id="3da2aac9b80108a5b3b6a34b0e30c108d0d00cca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a symbol record field, of the form &lt;code&gt;(###)=value&lt;/code&gt; (where &lt;code&gt;###&lt;/code&gt; is the field name). The field name must be a symbol (operator-style), e.g. &lt;code&gt;(#)&lt;/code&gt;. For regular (alphanumeric) field names, use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt;. The second argument is a parser for the field value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(###)=value&lt;/code&gt; 형식의 기호 레코드 필드에 대한 구문 분석기를 읽으십시오 (여기서 &lt;code&gt;###&lt;/code&gt; 은 필드 이름 임). 필드 이름은 기호 (연산자 스타일) 여야합니다 (예 : &lt;code&gt;(#)&lt;/code&gt; ) . 일반 (영숫자) 필드 이름의 경우 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt; 를 사용하십시오. 두 번째 인수는 필드 값에 대한 파서입니다.</target>
        </trans-unit>
        <trans-unit id="fc1e4a49a842bcc7357116b4bcaf1dbd3fe4f53e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; 무엇을 파싱 &lt;code&gt;p&lt;/code&gt; 파싱 만 선택적으로 괄호로 둘러싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bae4abccfaabf546f2e1228b2518d60b461a6ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; 무엇을 파싱 &lt;code&gt;p&lt;/code&gt; 파싱,하지만 괄호로 둘러싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="567d3f90c45d29b23b2c186f5f5cc356673aa5cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 은 훨씬 더 효율적인 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; 데이터 유형 (일명 &quot;새로운 스타일 파서&quot;)을 기반으로하지만, 그 정의는 &lt;code&gt;RankNTypes&lt;/code&gt; 언어 확장의 사용에 의존합니다. 따라서 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (및 사촌 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; )는 GHC 전용으로 표시됩니다. 그럼에도 불구하고, 사용하는 것이 좋습니다 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 대신 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 을 가능하면이 가져 오는 효율성 개선을 위해.</target>
        </trans-unit>
        <trans-unit id="f818d33f49c36e5bd08eeae556f19678592545d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; returns the least integer not less than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; 보다 작지 않은 최소의 정수를 반환 &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c50aa2a62a618744936a20658cca1344b434a10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; returns the greatest integer not greater than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; 보다 큰 정수 크지 반환 &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="319a905d94ae2e8f071c1798237712390429f2dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; is the non-negative factor of both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of which every common factor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is also a factor; for example &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;. (That is, the common divisor that is &quot;greatest&quot; in the divisibility preordering.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; 양자의 음이 아닌 인자 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 의 모든 공통의 요인이있는 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 또한 인자이고; 예를 들어 &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt; 입니다. &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; . (분할 성 사전 주문에서 &quot;가장 큰&quot;공통 제수입니다.)</target>
        </trans-unit>
        <trans-unit id="e92565e2a3dec9cdb3459eed5d5f0d227e08643d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; is the smallest positive integer that both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; divide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 모두나누는가장 작은 양의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="cb83bf837be47ed6a65ffe14ae13c31a18082e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:reduce&quot;&gt;reduce&lt;/a&gt;&lt;/code&gt; is a subsidiary function used only in this module. It normalises a ratio by dividing both numerator and denominator by their greatest common divisor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:reduce&quot;&gt;reduce&lt;/a&gt;&lt;/code&gt; 는이 모듈에서만 사용되는 보조 기능입니다. 분자와 분모를 최대 공약수로 나눠서 비율을 정규화합니다.</target>
        </trans-unit>
        <trans-unit id="a9dd499cd9c9b751c0fca50154687b004edfff3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; returns the nearest integer to &lt;code&gt;x&lt;/code&gt;; the even integer if &lt;code&gt;x&lt;/code&gt; is equidistant between two integers</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; 가장 가까운 정수를 반환 &lt;code&gt;x&lt;/code&gt; ; &lt;code&gt;x&lt;/code&gt; 가 두 정수 사이에 등거리 인경우 짝수정수</target>
        </trans-unit>
        <trans-unit id="b18f58d80977e91ef26ad42b2e08deecc2d7820e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; returns the integer nearest &lt;code&gt;x&lt;/code&gt; between zero and &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-real#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; 가까운 수익률을 정수 &lt;code&gt;x&lt;/code&gt; 제로 사이 &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f18b7e588038bb2313fb65fa5f5ae38b5e024f32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-rts-flags#t:RtsTime&quot;&gt;RtsTime&lt;/a&gt;&lt;/code&gt; is defined as a &lt;code&gt;StgWord64&lt;/code&gt; in &lt;code&gt;stg/Types.h&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-rts-flags#t:RtsTime&quot;&gt;RtsTime&lt;/a&gt;&lt;/code&gt; 는 A와 정의 &lt;code&gt;StgWord64&lt;/code&gt; 에 &lt;code&gt;stg/Types.h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3914e0bcc8d1236c512d64770c07549eca388052" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; 은 &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt; 문자열을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="bc45df7c2d0510c8aff5c5b3a84ba902911f4890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 법을 충족시켜야 함</target>
        </trans-unit>
        <trans-unit id="3eb99f6e79be6e92cc4c84aa3ae6ef2cf6ebfb21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeDupableInterleaveST&quot;&gt;unsafeDupableInterleaveST&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;ST a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeDupableInterleaveST&quot;&gt;unsafeDupableInterleaveST&lt;/a&gt;&lt;/code&gt; 를 사용하면 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산이 느리게 지연 될 수 있습니다. 유형의 값에 전달하면 &lt;code&gt;ST a&lt;/code&gt; 상기 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 의 값의 계산시에만 수행되는 &lt;code&gt;a&lt;/code&gt; 요구된다.</target>
        </trans-unit>
        <trans-unit id="7912136bfe56b731805d99e4b630da55cbd9f2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeInterleaveST&quot;&gt;unsafeInterleaveST&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;ST a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeInterleaveST&quot;&gt;unsafeInterleaveST&lt;/a&gt;&lt;/code&gt; 를 사용하면 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산이 느리게 지연 될 수 있습니다. 유형의 값에 전달하면 &lt;code&gt;ST a&lt;/code&gt; 상기 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 의 값의 계산시에만 수행되는 &lt;code&gt;a&lt;/code&gt; 요구된다.</target>
        </trans-unit>
        <trans-unit id="b4c9af8fda41ef6eb26ff7db581519d20c9414c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s are a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 은 프로그램의 어느 지점에서나 부분 호출 스택을 얻는 간단한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="bed0ecabea47e9d304fac4c13dc87e914b8dc670" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s do not interact with the RTS and do not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as they are built up explicitly via the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; constraints, they will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 은 RTS와 상호 작용하지 않으며 &lt;code&gt;-prof&lt;/code&gt; 로 컴파일 할 필요가 없습니다. 반면, &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; 제약 조건을통해 명시 적으로 구축되므로 일반적으로 RTS에서 유지 관리하는 시뮬레이션 된 콜 스택만큼 많은 정보를 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0b54b6378609adfef6bcc92559ed48934566d6dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s are a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 은 프로그램의 어느 지점에서나 부분 호출 스택을 얻는 간단한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="1ccdf2703d063754e5da79d77d000c1e4a8bdf62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s do not interact with the RTS and do not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as they are built up explicitly via the &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; constraints, they will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 은 RTS와 상호 작용하지 않으며 &lt;code&gt;-prof&lt;/code&gt; 로 컴파일 할 필요가 없습니다. 반면, &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; 제약 조건을통해 명시 적으로 구축되므로 일반적으로 RTS에서 유지 관리하는 시뮬레이션 된 콜 스택만큼 많은 정보를 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="93b4a0b3ee1f7074fdbceb2404e3c332a0581142" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtrInfo&quot;&gt;StaticPtrInfo&lt;/a&gt;&lt;/code&gt; of the given &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtrInfo&quot;&gt;StaticPtrInfo&lt;/a&gt;&lt;/code&gt; 주어진의 &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eaf127c76c486df4dbaba4066f38234d89487977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; is wrapped around every &lt;code&gt;foreign export&lt;/code&gt; and &lt;code&gt;foreign
 import &quot;wrapper&quot;&lt;/code&gt; to mop up any uncaught exceptions. Thus, the result of running &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; in a foreign-exported function is the same as in the main thread: it terminates the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; 는 모든 &lt;code&gt;foreign export&lt;/code&gt; 및 &lt;code&gt;foreign import &quot;wrapper&quot;&lt;/code&gt; 를감싸서포착되지 않은 예외를 해결합니다. 따라서foreign-exported 함수에서 &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; 를 실행 한 결과는 메인 스레드에서와 동일합니다. 프로그램을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="30e2557cd44bda005fab1056fa2bf589342d1921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runMainIO&quot;&gt;runMainIO&lt;/a&gt;&lt;/code&gt; is wrapped around &lt;code&gt;&lt;a href=&quot;main#v:main&quot;&gt;main&lt;/a&gt;&lt;/code&gt; (or whatever main is called in the program). It catches otherwise uncaught exceptions, and also flushes stdout/stderr before exiting.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runMainIO&quot;&gt;runMainIO&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;main#v:main&quot;&gt;main&lt;/a&gt;&lt;/code&gt; (또는 프로그램에서 main이 호출되는 모든것)을 감싸고 있습니다. 그렇지 않으면 포착되지 않은 예외를 포착하고 종료하기 전에 stdout / stderr를 플러시합니다.</target>
        </trans-unit>
        <trans-unit id="0e33df6a525249c18105a29a873ed6404b98744d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; was applied to &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 에 적용되었습니다.</target>
        </trans-unit>
        <trans-unit id="1ac0d90eaed26f78e7e904a221a7ec137823fb97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; size is an exact multiple of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; size</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; 크기는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; 크기의 정확한 배수입니다 .</target>
        </trans-unit>
        <trans-unit id="2cfa58e5846605bc97f27d46b944d2cffadf6d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; desribes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; 은 클래스 또는 유형 함수의 단일 인스턴스를 설명합니다. &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt; 불과하지만 다음 중 하나가 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="07bd31aaac16d5e33d0f79df81ab94bfb8d25b35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;s can be constructed in several ways, which come with different name-capture guarantees (see &lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for an explanation of name capture):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; 은 여러 가지 방법으로 구성 할 수 있으며, 다른 이름 캡처 보장과 함께 제공됩니다 (이름 캡처에 대한 설명은&lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt; Language.Haskell.TH.&lt;/a&gt; 구문 참조).</target>
        </trans-unit>
        <trans-unit id="79e0fef24bf5f2a737953d8e70adf7276053b2a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (with empty derived &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (빈 파생 된 &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="3f8654d746f2c60644b5d2281313083cc9a1aa53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (with empty &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (빈 &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d9c7ba6a896ef8663fc06d9c179a38c6ce1844ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; are similar to &lt;code&gt;'f&lt;/code&gt; and &lt;code&gt;''T&lt;/code&gt; respectively, but the &lt;code&gt;Name&lt;/code&gt;s are looked up at the point where the current splice is being run. These names can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; 은각각 &lt;code&gt;'f&lt;/code&gt; 및 &lt;code&gt;''T&lt;/code&gt; 와유사하지만 &lt;code&gt;Name&lt;/code&gt; 은 현재 스플 라이스가 실행되는 지점에서 조회됩니다. 이 이름은 절대로 캡처 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dcbce836ad277a603ffcf7c220b9f06cb8eab87f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; generates a capturable name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; 은 캡처 가능한 이름을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="5c56cad08125fd33a494fa84bec89a27cd88b90a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; monadically generates a new name, which can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; 은 단식 적으로 새로운 이름을 생성하며,이 이름은 절대로 캡처 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8c4147d27888b89b2c78b46305d524b8aa858515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; looks up information about the &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; 에 대한 정보를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="1232001b6fbae38e36c1cd90a7584f019a4964b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; under most circumstances, but it would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; if the &lt;code&gt;-XStrictData&lt;/code&gt; language extension was enabled.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; 가 반환 &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; 대부분의 상황에서, 그러나 반환 &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; 경우 &lt;code&gt;-XStrictData&lt;/code&gt; 언어 확장이 활성화되었습니다.</target>
        </trans-unit>
        <trans-unit id="dc83d1bc9715c0147848c379b12c8b18d57a5085" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Exp' representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; 는 SYB 스타일에서 값을 동일한 값의 'Q Exp'표현으로 변환합니다. 함수 재정의 유형별 사례를 취하는 것이 일반적입니다. 보다 일반적으로 사용되는 변형에대해서는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; 를참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a796695d16121f87b865283cf6538c18e0ac6eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Pat' representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; 는 SYB 스타일에서 값을 동일한 값의 'Q Pat'표현으로 변환합니다. 유형별 사례를 처리하는 함수가 필요하거나기본 동작을 얻기 위해 &lt;code&gt;const Nothing&lt;/code&gt; 을전달합니다.</target>
        </trans-unit>
        <trans-unit id="9649b818454081f402bceec28a692626aec7dcbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 인스턴스가있는유형에서 다양한 유사 인용 표현으로일반 변환 함수를 구성하기위한 내부 유틸리티 함수입니다.두 가지 사용 예는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; 의 소스를 참조하십시오. &lt;code&gt;mkCon&lt;/code&gt; , &lt;code&gt;mkLit&lt;/code&gt; 및 &lt;code&gt;appQ&lt;/code&gt; 는 표현식 및 패턴의 다른 구문을 설명하기 위해 오버로드 가능합니다. &lt;code&gt;antiQ&lt;/code&gt; 를 사용하면 유형별 사례를 무시할 수 있습니다. 일반적인 사용법은 &lt;code&gt;const Nothing&lt;/code&gt; 이므로 오버로드가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d9999bf12ab30c952de4581c3e5219fe3da4a3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:quoteFile&quot;&gt;quoteFile&lt;/a&gt;&lt;/code&gt; takes a &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; and lifts it into one that read the data out of a file. For example, suppose &lt;code&gt;asmq&lt;/code&gt; is an assembly-language quoter, so that you can write [asmq| ld r1, r2 |] as an expression. Then if you define &lt;code&gt;asmq_f = quoteFile asmq&lt;/code&gt;, then the quote [asmq_f|foo.s|] will take input from file &lt;code&gt;&quot;foo.s&quot;&lt;/code&gt; instead of the inline text</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:quoteFile&quot;&gt;quoteFile&lt;/a&gt;&lt;/code&gt; 는 소요 &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; 및 파일에서 데이터를 읽을 하나에 리프트를. 예를 들어, &lt;code&gt;asmq&lt;/code&gt; 가 어셈블리 언어 인용 자라고가정하면 [asmq | ld r1, r2 |]를 표현식으로 사용하십시오. 그런 다음 &lt;code&gt;asmq_f = quoteFile asmq&lt;/code&gt; 를 정의하면 따옴표 [asmq_f | foo.s |]가인라인 텍스트 대신 &lt;code&gt;&quot;foo.s&quot;&lt;/code&gt; 파일에서 입력을 받습니다.</target>
        </trans-unit>
        <trans-unit id="494cab9c250a45952ecb439d0268aa339e64f1eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; desribes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; 은 클래스 또는 유형 함수의 단일 인스턴스를 설명합니다. &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt; 불과하지만 다음 중 하나가 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="bd3b710ead83ecd7653b5b900b934a99e2f05f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; instances can be derived automatically by use of the &lt;code&gt;-XDeriveLift&lt;/code&gt; GHC language extension:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; &lt;code&gt;-XDeriveLift&lt;/code&gt; GHC 언어 확장을 사용하여 리프트 인스턴스를 자동으로 파생시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23d7b99c603ed7e2bb515dc1e52c2959a87dc223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;s can be constructed in several ways, which come with different name-capture guarantees (see &lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for an explanation of name capture):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; 은 여러 가지 방법으로 구성 할 수 있으며, 다른 이름 캡처 보장과 함께 제공됩니다 (이름 캡처에 대한 설명은&lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt; Language.Haskell.TH.&lt;/a&gt; 구문 참조).</target>
        </trans-unit>
        <trans-unit id="840f5a195d18c505eed5b6054a43f1d20883a5c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (with empty derived &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (빈 파생 된 &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ff569f15354913d27bea83e61cb925996c8b4b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (with empty &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (빈 &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f86a8355fed83acbfb520a5aab5343fc869dd2e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Exp' representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; 는 SYB 스타일에서 값을 동일한 값의 'Q Exp'표현으로 변환합니다. 함수 재정의 유형별 사례를 취하는 것이 일반적입니다. 보다 일반적으로 사용되는 변형에대해서는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; 를참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9c6b26f7ad040178ea0b3b4d3d2be19ece4e031f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Pat' representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Pat' representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</target>
        </trans-unit>
        <trans-unit id="22aaea3f49bbbb1c791befecde6970da7b81782b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 인스턴스가있는유형에서 다양한 유사 인용 표현으로일반 변환 함수를 구성하기위한 내부 유틸리티 함수입니다.두 가지 사용 예는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; 의 소스를 참조하십시오. &lt;code&gt;mkCon&lt;/code&gt; , &lt;code&gt;mkLit&lt;/code&gt; 및 &lt;code&gt;appQ&lt;/code&gt; 는 표현식 및 패턴의 다른 구문을 설명하기 위해 오버로드 가능합니다. &lt;code&gt;antiQ&lt;/code&gt; 를 사용하면 유형별 사례를 무시할 수 있습니다. 일반적인 사용법은 &lt;code&gt;const Nothing&lt;/code&gt; 이므로 오버로드가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b4f75bfe15dbc2aba3edb2e4be0269424f421b58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; type class which works for any type with a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 인스턴스가있는 모든 유형에 대해 작동하는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; 유형 클래스의 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; 변형입니다.</target>
        </trans-unit>
        <trans-unit id="dcc1818b27997f484d76b1b79bfb3ed25655b1c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; are similar to &lt;code&gt;'f&lt;/code&gt; and &lt;code&gt;''T&lt;/code&gt; respectively, but the &lt;code&gt;Name&lt;/code&gt;s are looked up at the point where the current splice is being run. These names can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; 은각각 &lt;code&gt;'f&lt;/code&gt; 및 &lt;code&gt;''T&lt;/code&gt; 와유사하지만 &lt;code&gt;Name&lt;/code&gt; 은 현재 스플 라이스가 실행되는 지점에서 조회됩니다. 이 이름은 절대로 캡처 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="782af2f301a050a096829ddcc020be752f84b031" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; generates a capturable name.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; 은 캡처 가능한 이름을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="a79c55fb6b73bfd7edc3807f496aa3696fb852af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; monadically generates a new name, which can never be captured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; 은 단식 적으로 새로운 이름을 생성하며,이 이름은 절대로 캡처 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="381c1a27fd7e44fc833c358502fc48714bafb7d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; looks up information about the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt; 에 대한 정보를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="f3240516619298cb631a45a4cbd8e169f3c59649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; under most circumstances, but it would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; if the &lt;code&gt;-XStrictData&lt;/code&gt; language extension was enabled.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; 가 반환 &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; 대부분의 상황에서, 그러나 반환 &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; 경우 &lt;code&gt;-XStrictData&lt;/code&gt; 언어 확장이 활성화되었습니다.</target>
        </trans-unit>
        <trans-unit id="454769dfaae8136c2efb11174dc30677b704c7d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:expm1&quot;&gt;expm1&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x - 1&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:expm1&quot;&gt;expm1&lt;/a&gt; x&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x - 1&lt;/code&gt; 계산하지만가능한 경우 &lt;code&gt;x&lt;/code&gt; 의 작은 (절대) 값에 대해보다 정확한 결과를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="37a695e4fedd553cca25bc687a091bbb8bd1eb4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:floatToDigits&quot;&gt;floatToDigits&lt;/a&gt;&lt;/code&gt; takes a base and a non-negative &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; number, and returns a list of digits and an exponent. In particular, if &lt;code&gt;x&amp;gt;=0&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:floatToDigits&quot;&gt;floatToDigits&lt;/a&gt;&lt;/code&gt; 는 기본 및 음이 아닌 &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 숫자를 사용하여 숫자 목록과 지수를 반환합니다. 특히 &lt;code&gt;x&amp;gt;=0&lt;/code&gt; 이면</target>
        </trans-unit>
        <trans-unit id="2bc289c8e0f3df346b3f2df9d3046765701b5d00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1mexp&quot;&gt;log1mexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 - &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:log1mexp&quot;&gt;log1mexp&lt;/a&gt; x&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 - &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt; 계산하지만 가능한 경우보다 정확한 결과를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="73d3a0d65b796f7a7d489e2a0759ae805e686ffc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1p&quot;&gt;log1p&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + x)&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:log1p&quot;&gt;log1p&lt;/a&gt; x&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + x)&lt;/code&gt; 계산하지만가능한 경우 &lt;code&gt;x&lt;/code&gt; 의 작은 (절대) 값에 대해보다 정확한 결과를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a6b46197cb9efd3cbb22ddf1716cbb034ebe2c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1pexp&quot;&gt;log1pexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;numeric#v:log1pexp&quot;&gt;log1pexp&lt;/a&gt; x&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt; 계산하지만 가능한 경우보다 정확한 결과를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6424498da93c2983f328c66db54a22f98306bf63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; 인스턴스 :</target>
        </trans-unit>
        <trans-unit id="0c1a4639ba97766eb5656c3df06ea8d4a0f0d9b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; 인스턴스 :</target>
        </trans-unit>
        <trans-unit id="b9bd3b22141c968eee8ca6b786e08d4e759efff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is a monad, so &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; actions can be combined using either the do-notation or the &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; operations from the &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 는 모나드이므로, do-notation 또는 &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스의 &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 작업을사용하여 &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 작업을 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e32ea5f5b152080a9f34fd24ca98e1512f639bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; types, including &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 를 포함한 일체형</target>
        </trans-unit>
        <trans-unit id="ea52587d7432250da9aeb55e6e11c439a3603740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; types</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 타입</target>
        </trans-unit>
        <trans-unit id="39e34dbd740d7bf97972384f8bcece1a0e39559e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE &quot;not-a-number&quot; (NaN) value</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인수가 IEEE &quot;숫자&quot;(NaN) 값인 경우 참</target>
        </trans-unit>
        <trans-unit id="180bb4b0bf7a783f528ceb51480a97a340dccdf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE floating point number</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인수가 IEEE 부동 소수점 숫자 인 경우 참</target>
        </trans-unit>
        <trans-unit id="c29dfef2c890e37ba43e2c88e4bce45d2762f25c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE infinity or negative infinity</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인수가 IEEE 무한대 또는 음의 무한대이면 참</target>
        </trans-unit>
        <trans-unit id="30bab898a810255506ac0b849f91dc439e83157a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE negative zero</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인수가 IEEE 음수 인 경우 참</target>
        </trans-unit>
        <trans-unit id="e885ccee58dc4e7f6edcffcd266655296a0da640" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is too small to be represented in normalized format</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인수가 너무 작아서 정규화 된 형식으로 표현할 수없는 경우 참</target>
        </trans-unit>
        <trans-unit id="3ea9bb036ffe299726473f5b83da12eaf2ce2ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y) &amp;lt;= &lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y')&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y) &amp;lt;= &lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y')&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="fceec3ddb765a69aa6c91cd7fc9f35374de2ae71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; Bools의 컨테이너의 연계를 반환합니다. 결과가 &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 가 되려면 컨테이너가 유한해야합니다. &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 그러나, 결과 &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 유한 한 멀리 왼쪽 끝에서 값.</target>
        </trans-unit>
        <trans-unit id="0f9c668715480a625fd9af9eb80eeeb206edb78b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:asTypeOf&quot;&gt;asTypeOf&lt;/a&gt;&lt;/code&gt; is a type-restricted version of &lt;code&gt;&lt;a href=&quot;prelude#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;. It is usually used as an infix operator, and its typing forces its first argument (which is usually overloaded) to have the same type as the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:asTypeOf&quot;&gt;asTypeOf&lt;/a&gt;&lt;/code&gt; 는 형식이 제한된 &lt;code&gt;&lt;a href=&quot;prelude#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 버전입니다. 일반적으로 중위 연산자로 사용되며, 입력하면 첫 번째 인수 (일반적으로 오버로드 됨)가 두 번째와 동일한 유형이되도록합니다.</target>
        </trans-unit>
        <trans-unit id="b0d89710515219cec11872fcfa257cbf3a150eab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; 술어에 적용, &lt;code&gt;p&lt;/code&gt; 및 목록 &lt;code&gt;xs&lt;/code&gt; 의 첫 번째 요소는 접두사 가장 긴 튜플 (비어) 반환, &lt;code&gt;xs&lt;/code&gt; 요소를&lt;em&gt; 만족하지 않는 &lt;/em&gt; &lt;code&gt;p&lt;/code&gt; 와 두 번째 요소하면 목록의 나머지 부분입니다 :</target>
        </trans-unit>
        <trans-unit id="65677c9d5d8e6310793e1ab8a36f6af8c40c3791" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;prelude#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; 는 동등 &lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;prelude#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be66c280ca45c2cf1c5ce3828088758d49c7d3ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; returns the least integer not less than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; 보다 작지 않은 최소의 정수를 반환 &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35530e911664fd9b3c43e39777246bc6aad72b52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:curry&quot;&gt;curry&lt;/a&gt;&lt;/code&gt; converts an uncurried function to a curried function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:curry&quot;&gt;curry&lt;/a&gt;&lt;/code&gt; 는 커리되지 않은 함수를 커리 된 함수로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="2d8691393163701b125cd36603fd414089952c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; 은 유한 목록을 원형 목록 또는 원래 목록의 무한 반복에 묶습니다. 무한 목록의 정체성입니다.</target>
        </trans-unit>
        <trans-unit id="e37417a71dbc3a4e0a039f0004373fc1c05087a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; 는첫 번째 &lt;code&gt;n&lt;/code&gt; 요소다음의 &lt;code&gt;xs&lt;/code&gt; 접미사를 반환하거나 &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;길이&lt;/a&gt; xs 인 경우 &lt;code&gt;[]&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="538ae1fd53b40794542f19501354d2d6fa15020e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; 후에 남아있는 접미사 반환 &lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;p xs&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b506e84360977987754db1c0f4ccade20a2e0af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt;&lt;/code&gt; performs the inverse of &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; in the sense that for finite &lt;code&gt;x&lt;/code&gt; with the exception of &lt;code&gt;-0.0&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt; &lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) = x&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; m n&lt;/code&gt; is one of the two closest representable floating-point numbers to &lt;code&gt;m*b^^n&lt;/code&gt; (or &lt;code&gt;&amp;plusmn;Infinity&lt;/code&gt; if overflow occurs); usually the closer, but if &lt;code&gt;m&lt;/code&gt; contains too many bits, the result may be rounded in the wrong direction.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt;&lt;/code&gt; 은 의 역 수행 &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; 을 감각이 유한 대한 &lt;code&gt;x&lt;/code&gt; 제외한 &lt;code&gt;-0.0&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt; &lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) = x&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; m n&lt;/code&gt; 은 &lt;code&gt;m*b^^n&lt;/code&gt; 가장 가까운 두 개의 부동 소수점 숫자 중 하나입니다(또는오버플로가 발생하면 &lt;code&gt;&amp;plusmn;Infinity&lt;/code&gt; ). 일반적으로 더 가까이 있지만 &lt;code&gt;m&lt;/code&gt; 에 비트가 너무 많으면 결과가 잘못된 방향으로 반올림 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e005e5bf5443bae1200923a51681b7678dea36c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:enumFrom&quot;&gt;enumFrom&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:enumFromThen&quot;&gt;enumFromThen&lt;/a&gt;&lt;/code&gt; should be defined with an implicit bound, thus:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:enumFrom&quot;&gt;enumFrom&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;prelude#v:enumFromThen&quot;&gt;enumFromThen&lt;/a&gt;&lt;/code&gt; 은 암시 적 바운드로 정의되어야합니다.</target>
        </trans-unit>
        <trans-unit id="5f76a96d436885ad0fc422b0d0033bcce4f84b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; stops execution and displays an error message.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 는 실행을 중지하고 오류 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="99cd8d4c12d9480115246931f5727c25ecc68890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt;&lt;/code&gt; corresponds to the second component of &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; 0 = 0&lt;/code&gt; and for finite nonzero &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x = snd (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) + &lt;a href=&quot;prelude#v:floatDigits&quot;&gt;floatDigits&lt;/a&gt; x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is a finite floating-point number, it is equal in value to &lt;code&gt;&lt;a href=&quot;prelude#v:significand&quot;&gt;significand&lt;/a&gt; x * b ^^ &lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x&lt;/code&gt;, where &lt;code&gt;b&lt;/code&gt; is the floating-point radix. The behaviour is unspecified on infinite or &lt;code&gt;NaN&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; 의 두 번째 구성 요소에 해당 합니다. &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; 0 = 0&lt;/code&gt; 이고 0이 아닌 유한 &lt;code&gt;x&lt;/code&gt; 의 경우 &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x = snd (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) + &lt;a href=&quot;prelude#v:floatDigits&quot;&gt;floatDigits&lt;/a&gt; x&lt;/code&gt; 입니다. 경우 &lt;code&gt;x&lt;/code&gt; 유한 한 부동 소수점 숫자이고,이 값에 동일 &lt;code&gt;&lt;a href=&quot;prelude#v:significand&quot;&gt;significand&lt;/a&gt; x * b ^^ &lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x&lt;/code&gt; , 여기서 &lt;code&gt;b&lt;/code&gt; 부동 소수점 기수이다. 무한대 또는 &lt;code&gt;NaN&lt;/code&gt; 값에서는 동작이 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9eb0d52360c67c8eed2b8ebe7918d0021bfca7cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:flip&quot;&gt;flip&lt;/a&gt; f&lt;/code&gt; takes its (first) two arguments in the reverse order of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:flip&quot;&gt;flip&lt;/a&gt; f&lt;/code&gt; 역순으로의 (제 1) 2 개 개의 인수를 취하는 &lt;code&gt;f&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74582fe2c1b8b6147f60f7d9b00babc28681d6af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; returns the greatest integer not greater than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; 보다 큰 정수 크지 반환 &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41ab1bc2943c0be811d10077bb62e6127ff2dd29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; should give a runtime error if the result value is not representable in the result type. For example, &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt; 7 :: &lt;a href=&quot;prelude#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; 결과 값에서 결과 값을 표시 할 수없는 경우 fromEnum 및 &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; 은 런타임 오류를 제공해야합니다. 예를 들어, &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt; 7 :: &lt;a href=&quot;prelude#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; 은 오류입니다.</target>
        </trans-unit>
        <trans-unit id="4ce643c41c2db2cd82ad44ae59c126bfc3d20a14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; is the non-negative factor of both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of which every common factor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is also a factor; for example &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;. (That is, the common divisor that is &quot;greatest&quot; in the divisibility preordering.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; 양자의 음이 아닌 인자 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 의 모든 공통의 요인이있는 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 또한 인자이고; 예를 들어 &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt; 입니다. &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; . (분할 성 사전 주문에서 &quot;가장 큰&quot;공통 제수입니다.)</target>
        </trans-unit>
        <trans-unit id="5cca57c5550be7ce21679621b488ce401911a226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;f x&lt;/code&gt; 반복 응용 프로그램의 무한 목록을 반환 &lt;code&gt;f&lt;/code&gt; 에 &lt;code&gt;x&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9a579489e99e31a99cb9989088525deb9b63c304" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; is the smallest positive integer that both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; divide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 가 모두나누는가장 작은 양의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="ad1e9d56d03a39d084962d1040fb10f5830e566d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; 은 줄 바꿈 문자에서 문자열을 문자열 목록으로 나눕니다. 결과 문자열에는 줄 바꿈이 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="90c3b95d95e8a8b18102086e126bd104cf69ecf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;prelude#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;prelude#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; 의 부정입니다.</target>
        </trans-unit>
        <trans-unit id="4b28da115bfd5d00bf1b920bb984e01a5fc3c009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; Bools 컨테이너의 분리를 반환합니다. 결과가 &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 가 되려면 컨테이너가 유한해야합니다. &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , 그러나, 결과 &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 유한 한 멀리 왼쪽 끝에서 값.</target>
        </trans-unit>
        <trans-unit id="e4fd83f3d011b16b6dc51c43a910c7e9a78e1cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:otherwise&quot;&gt;otherwise&lt;/a&gt;&lt;/code&gt; is defined as the value &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;. It helps to make guards more readable. eg.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:otherwise&quot;&gt;otherwise&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 값으로 정의됩니다. 가드를 더 읽기 쉽게 만드는 데 도움이됩니다. 예.</target>
        </trans-unit>
        <trans-unit id="ea0cc360ae261aac376aac41131de9104e521a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; 무엇을 파싱 &lt;code&gt;p&lt;/code&gt; 파싱 만 선택적으로 괄호로 둘러싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e7b88af6312a71be1e6cc5991346df63e87cce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; 무엇을 파싱 &lt;code&gt;p&lt;/code&gt; 파싱,하지만 괄호로 둘러싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="95cc0f4a75c44098555587a9b632e29fb9c47ba9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 는 무한리스트이며 &lt;code&gt;x&lt;/code&gt; 는 모든 원소의 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="14ec4a6aab6c31f279c50924ed8fe63b61c8afc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n x&lt;/code&gt; 길이의 목록 &lt;code&gt;n&lt;/code&gt; 과 &lt;code&gt;x&lt;/code&gt; 각 요소의 값. 보다 일반적인 &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; 의 인스턴스이며,여기서 &lt;code&gt;n&lt;/code&gt; 은 일체형 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb0f5651974cd39db6372713ad54f0e127cd892e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; &lt;code&gt;xs&lt;/code&gt; 의 요소를 반환 &lt;code&gt;xs&lt;/code&gt; 역순으로합니다. &lt;code&gt;xs&lt;/code&gt; 는 유한해야합니다.</target>
        </trans-unit>
        <trans-unit id="8866f3369aabdd70b6cea2f8ac67cc5354993ba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; returns the nearest integer to &lt;code&gt;x&lt;/code&gt;; the even integer if &lt;code&gt;x&lt;/code&gt; is equidistant between two integers</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; 가장 가까운 정수를 반환 &lt;code&gt;x&lt;/code&gt; ; &lt;code&gt;x&lt;/code&gt; 가 두 정수 사이에 등거리 인경우 짝수정수</target>
        </trans-unit>
        <trans-unit id="8197db2f8f42c33ac929501c115f060c4003dc88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; 은 &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt; 문자열을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2ff5551274655dfcc8b4e4f810e9c6303ce24ce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 법을 충족시켜야 함</target>
        </trans-unit>
        <trans-unit id="cd876887b676862f1db8746de58d3818bafe9192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; 술어 &lt;code&gt;p&lt;/code&gt; 및 목록 &lt;code&gt;xs&lt;/code&gt; 에 적용되는 span 은 첫 번째 요소가 &lt;code&gt;p&lt;/code&gt; 를 만족하는 &lt;code&gt;xs&lt;/code&gt; 요소 중 가장 긴 접두사 (비어있을 수 있음)이고 두 번째 요소가 목록의 나머지 부분 인튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9ef69a25e6b580461c6edf12e74a04f68967a80a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt; &lt;code&gt;p xs&lt;/code&gt; 는 &lt;code&gt;(&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a9986add984ef8935e2a10368b30a5809dab25a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; &lt;code&gt;n xs&lt;/code&gt; 는 첫 번째 요소가길이 &lt;code&gt;n&lt;/code&gt; 의 &lt;code&gt;xs&lt;/code&gt; 접두사이고 두 번째 요소가 목록의 나머지 부분 인튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="85f7535d630138e7e51f7c3606a32ee218bfc27c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; 리스트 &lt;code&gt;xs&lt;/code&gt; 에 적용된 &lt;code&gt;n&lt;/code&gt; 을취 하면길이 &lt;code&gt;n&lt;/code&gt; 의 &lt;code&gt;xs&lt;/code&gt; 접두어를 반환하거나 &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;길이&lt;/a&gt; xs 이면 &lt;code&gt;xs&lt;/code&gt; 자체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e32f5f2062f7bfd5341a8a4f847eef925def4c9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt; 는 , 술어에 적용 &lt;code&gt;p&lt;/code&gt; 및 목록 &lt;code&gt;xs&lt;/code&gt; , 가장 긴 접두사 (하늘의) 반환 &lt;code&gt;xs&lt;/code&gt; 충족의 그 요소의 &lt;code&gt;p&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c565b5e43a2f7011ee17ba13f5a371da254c5bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; returns the integer nearest &lt;code&gt;x&lt;/code&gt; between zero and &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; 가까운 수익률을 정수 &lt;code&gt;x&lt;/code&gt; 제로 사이 &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6833bf4f6e77728c935667d52aa1f8e4d0e22592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt;&lt;/code&gt; converts a curried function to a function on pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt;&lt;/code&gt; 는 카레 함수를 쌍 함수로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="82b39b05584d753464e0a137e37b0275efe3cd36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; 에 역 동작이다 &lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; . 각각에 새 줄 바꿈을 추가 한 후 행을 결합합니다.</target>
        </trans-unit>
        <trans-unit id="4c0909cfb4024e044a781c8cc3e577608acc465b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:until&quot;&gt;until&lt;/a&gt; p f&lt;/code&gt; yields the result of applying &lt;code&gt;f&lt;/code&gt; until &lt;code&gt;p&lt;/code&gt; holds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:until&quot;&gt;until&lt;/a&gt; p f&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; 가 유지될 때까지 &lt;code&gt;f&lt;/code&gt; 를 적용한 결과를 pf 까지 산출합니다.</target>
        </trans-unit>
        <trans-unit id="8bd1257a93569ed215b8f5b00ca0ecbd2be3bd4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; 에 역 동작 인 &lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; . 공백을 구분하여 단어를 결합합니다.</target>
        </trans-unit>
        <trans-unit id="01bef010073b5e20e4dd758bd14bfeda1aaccea8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 은 쌍 목록을 첫 번째 구성 요소 목록과 두 번째 구성 요소 목록으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="c52b4c6fc29dbc556d93ce39796f1355a44b3669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; 는 문자열을 단어 목록으로 나누고 공백으로 구분합니다.</target>
        </trans-unit>
        <trans-unit id="9e4c37f6f58036a01b451e7d137537e6c4533a7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 은 목록 융합이 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="5f0622371527d648d60c30d9849cadcf847e4eb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 가 게으르다 :</target>
        </trans-unit>
        <trans-unit id="a7a23fc01912013cc00c836f8604380b992b0b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; 은 세 개의 목록을 가져와 &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 과 유사한 트리플 목록을 반환합니다. 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="5690d97420c567a27377bcacc8f8b46ef04bfcdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 는리스트 융합이 가능하지만, 첫번째리스트 인수와 결과리스트로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="1fa4a1a38d950808687c491ece1044d0ba291c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 는 게으른 것입니다 :</target>
        </trans-unit>
        <trans-unit id="3cfd4533290c5ef0e949ada807c3772d5eebbee4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-console-getopt#v:getOpt&quot;&gt;getOpt&lt;/a&gt;&lt;/code&gt; returns a triple consisting of the option arguments, a list of non-options, and a list of error messages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-getopt#v:getOpt&quot;&gt;getOpt&lt;/a&gt;&lt;/code&gt; 는 옵션 인수, 비 옵션 목록 및 오류 메시지 목록으로 구성된 트리플을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="428066ca06ed596ddd333bde5016b887aba49d76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Prefs&quot;&gt;Prefs&lt;/a&gt;&lt;/code&gt; allow the user to customize the terminal-style line-editing interface. They are read by default from &lt;code&gt;~/.haskeline&lt;/code&gt;; to override that behavior, use &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:readPrefs&quot;&gt;readPrefs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;runInputTWithPrefs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Prefs&quot;&gt;Prefs&lt;/a&gt;&lt;/code&gt; 통해 사용자는 터미널 스타일 라인 편집 인터페이스를 사용자 정의 할 수 있습니다. 그것들은 기본적으로 &lt;code&gt;~/.haskeline&lt;/code&gt; 에서 읽습니다. 이 동작을 무시하려면 &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:readPrefs&quot;&gt;readPrefs&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;runInputTWithPrefs&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4f6d385a35e1b7babd43615a60f7444f80af2444" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectory&quot;&gt;createDirectory&lt;/a&gt; dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; which is initially empty, or as near to empty as the operating system allows.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectory&quot;&gt;createDirectory&lt;/a&gt; dir&lt;/code&gt; 은 처음에 비어 있거나 운영 체제가 허용하는 한 거의 비어있는 새 디렉토리 &lt;code&gt;dir&lt;/code&gt; 을작성합니다.</target>
        </trans-unit>
        <trans-unit id="705ef22f70043a77d804ac1a1f20e78c6f911351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; if it doesn't exist. If the first argument is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the function will also create all parent directories if they are missing.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; 새로운 디렉토리 생성 &lt;code&gt;dir&lt;/code&gt; 존재하지 않는 경우입니다. 첫 번째 인수가 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 이면이 함수는 모든 상위 디렉토리가 누락 된 경우이를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="5dd8d9e061e9438354e5ec94c30200556169080d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; if it doesn't exist. If the first argument is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the function will also create all parent directories if they are missing.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; if it doesn't exist. If the first argument is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the function will also create all parent directories if they are missing.</target>
        </trans-unit>
        <trans-unit id="3f166a33c1b1210e5ef26e6bcfe69d6be0bbcfca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:listDirectory&quot;&gt;listDirectory&lt;/a&gt; dir&lt;/code&gt; returns a list of &lt;em&gt;all&lt;/em&gt; entries in &lt;em&gt;dir&lt;/em&gt; without the special entries (&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:listDirectory&quot;&gt;listDirectory&lt;/a&gt; dir&lt;/code&gt; 은특수 항목 ( &lt;code&gt;.&lt;/code&gt; 및 &lt;code&gt;..&lt;/code&gt; )없이&lt;em&gt; dir&lt;/em&gt; 의&lt;em&gt; 모든&lt;/em&gt; 항목목록을 반환합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1f17bbcb6b2bedb9848c973e471df1323555cd5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt; dir&lt;/code&gt; removes an existing directory &lt;em&gt;dir&lt;/em&gt;. The implementation may specify additional constraints which must be satisfied before a directory can be removed (e.g. the directory has to be empty, or may not be in use by other processes). It is not legal for an implementation to partially remove a directory unless the entire directory is removed. A conformant implementation need not support directory removal in all situations (e.g. removal of the root directory).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt; dir&lt;/code&gt; 기존 디렉토리 제거&lt;em&gt; 일세&lt;/em&gt; . 구현시 디렉토리를 제거하기 전에 충족해야하는 추가 제한 조건을 지정할 수 있습니다 (예 : 디렉토리가 비어 있거나 다른 프로세스에서 사용 중이 아닐 수 있음). 전체 디렉토리를 제거하지 않으면 구현시 디렉토리를 부분적으로 제거하는 것은 합법적이지 않습니다. 적합한 구현은 모든 상황에서 디렉토리 제거를 지원할 필요는 없습니다 (예 : 루트 디렉토리 제거).</target>
        </trans-unit>
        <trans-unit id="811605cb16909a2d10f9fbab42d71ae040bd7169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectoryRecursive&quot;&gt;removeDirectoryRecursive&lt;/a&gt; dir&lt;/code&gt; removes an existing directory &lt;em&gt;dir&lt;/em&gt; together with its contents and subdirectories. Within this directory, symbolic links are removed without affecting their targets.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectoryRecursive&quot;&gt;removeDirectoryRecursive&lt;/a&gt; dir&lt;/code&gt; 기존 디렉토리 제거&lt;em&gt; 디렉터리&lt;/em&gt; 내용 및 하위 디렉토리와 함께합니다. 이 디렉토리에서 기호 링크는 대상에 영향을주지 않고 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="16d7e645324acff7f68a3c901de6f888fcae3589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt;&lt;em&gt;file&lt;/em&gt; removes the directory entry for an existing file &lt;em&gt;file&lt;/em&gt;, where &lt;em&gt;file&lt;/em&gt; is not itself a directory. The implementation may specify additional constraints which must be satisfied before a file can be removed (e.g. the file may not be in use by other processes).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt; &lt;em&gt; 파일&lt;/em&gt; 은 기존 파일&lt;em&gt; file&lt;/em&gt; 의 디렉토리 항목을 제거&lt;em&gt; 합니다&lt;/em&gt; . 여기서&lt;em&gt; file&lt;/em&gt; 은 자체가 디렉토리가 아닙니다. 구현시 파일을 제거하기 전에 충족해야하는 추가 제한 조건을 지정할 수 있습니다 (예 : 파일이 다른 프로세스에서 사용 중이 아닐 수 있음).</target>
        </trans-unit>
        <trans-unit id="512fb3e5392402ecd530cb7a00735e380b377ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:renameDirectory&quot;&gt;renameDirectory&lt;/a&gt; old new&lt;/code&gt; changes the name of an existing directory from &lt;em&gt;old&lt;/em&gt; to &lt;em&gt;new&lt;/em&gt;. If the &lt;em&gt;new&lt;/em&gt; directory already exists, it is atomically replaced by the &lt;em&gt;old&lt;/em&gt; directory. If the &lt;em&gt;new&lt;/em&gt; directory is neither the &lt;em&gt;old&lt;/em&gt; directory nor an alias of the &lt;em&gt;old&lt;/em&gt; directory, it is removed as if by &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt;. A conformant implementation need not support renaming directories in all situations (e.g. renaming to an existing directory, or across different physical devices), but the constraints must be documented.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:renameDirectory&quot;&gt;renameDirectory&lt;/a&gt; old new&lt;/code&gt; 변화에서 기존 디렉토리의 이름&lt;em&gt; 이전&lt;/em&gt; 에&lt;em&gt; 새&lt;/em&gt; . 경우&lt;em&gt; 새&lt;/em&gt; 디렉토리가 이미 존재, 그것은 원자에 의해 대체&lt;em&gt; 된&lt;/em&gt; 디렉토리. 경우&lt;em&gt; 새&lt;/em&gt; 디렉토리가도 아니다&lt;em&gt; 된&lt;/em&gt; 디렉토리도의 별칭&lt;em&gt; 된&lt;/em&gt; 디렉토리, 그것은 경우와 같이 제거 &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt; . 적합한 구현은 모든 상황에서 디렉토리 이름 바꾸기 (예 : 기존 디렉토리로 이름 바꾸기 또는 다른 물리적 장치에서 이름 바꾸기)를 지원할 필요는 없지만 제약 조건을 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="1eb6bb0aba7cc14757847ba9a69350ee82df65ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:renameFile&quot;&gt;renameFile&lt;/a&gt; old new&lt;/code&gt; changes the name of an existing file system object from &lt;em&gt;old&lt;/em&gt; to &lt;em&gt;new&lt;/em&gt;. If the &lt;em&gt;new&lt;/em&gt; object already exists, it is atomically replaced by the &lt;em&gt;old&lt;/em&gt; object. Neither path may refer to an existing directory. A conformant implementation need not support renaming files in all situations (e.g. renaming across different physical devices), but the constraints must be documented.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory#v:renameFile&quot;&gt;renameFile&lt;/a&gt; old new&lt;/code&gt; 변화를에서 기존 파일 시스템 오브젝트의 이름&lt;em&gt; 이전&lt;/em&gt; 에&lt;em&gt; 새를&lt;/em&gt; . 경우&lt;em&gt; 새&lt;/em&gt; 개체가 이미, 그것은 원자에 의해 대체&lt;em&gt; 된&lt;/em&gt; 객체입니다. 어느 경로도 기존 디렉토리를 참조 할 수 없습니다. 적합한 구현은 모든 상황에서 파일 이름 바꾸기 (예 : 다른 물리적 장치에서 이름 바꾸기)를 지원할 필요는 없지만 제약 조건을 문서화해야합니다.</target>
        </trans-unit>
        <trans-unit id="51de27a973f5ea2ab881c2dcfed1f431af95026d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt; f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory sufficient to hold values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt; f&lt;/code&gt; 실행 연산 &lt;code&gt;f&lt;/code&gt; , 형의 보류 값에 충분한 메모리의 임시 할당 된 블록을 인수로 포인터를 전달. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30881e33e4b76a76383543da3ebacc9cb6fcb0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:allocaBytes&quot;&gt;allocaBytes&lt;/a&gt; n f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory of &lt;code&gt;n&lt;/code&gt; bytes. The block of memory is sufficiently aligned for any of the basic foreign types that fits into a memory block of the allocated size.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:allocaBytes&quot;&gt;allocaBytes&lt;/a&gt; n f&lt;/code&gt; 는 계산 &lt;code&gt;f&lt;/code&gt; 를 실행하여 &lt;code&gt;n&lt;/code&gt; 바이트의 임시 할당 된 메모리 블록에 대한 포인터를 인수로 전달합니다. 메모리 블록은 할당 된 크기의 메모리 블록에 맞는 기본 외부 유형에 맞게 충분히 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="f2ba2e7e29aaa12a74022482ac7bb88fbe0e0b96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; 있다 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; 반전의 인수. 결과를 무시하는 버전은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6ab889ad9f194c93c1eea10d838337f057a56901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9fdb0cf82593649629819bceb7666b11e7e622a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; 는인수가 반전 된 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; 입니다. 버전의 경우 그 결과를보고 무시하지 않습니다 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df8475c8cf49f84b6370923213383095fa9333d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="028b5625464fb8097365abe596c3d54434e3ec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 일반적인 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를무시하고바이트를 직접 읽습니다.</target>
        </trans-unit>
        <trans-unit id="eaf72ee3c4b139e6871f68b5d4b0867bf429a8ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; , and reads bytes directly.</target>
        </trans-unit>
        <trans-unit id="57cfc1e5042a12660b3e720d93cf0cab9c7794d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 는 EOF 예외를 발생 시키지 않으며 대신 &lt;code&gt;count&lt;/code&gt; 보다 작은 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f11b3c0865d210f9ab7b132999b6c4c16d6ef98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; 는 EOF에 도달하거나 &lt;code&gt;count&lt;/code&gt; 8 비트 바이트를 읽을때까지핸들 &lt;code&gt;hdl&lt;/code&gt; 에서 버퍼 &lt;code&gt;buf&lt;/code&gt; 로데이터를 읽습니다. 실제로 읽은 바이트 수를 반환합니다. 데이터를 읽기 전에 EOF에 도달 한 경우 (또는 &lt;code&gt;count&lt;/code&gt; 가 0 인 경우) 0일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14075775c0ee25ea68f9e2f09601e21154b0a0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에 적용되는 모든 텍스트 인코딩을 무시하고 바이트를 기본 파일 또는 장치에 직접 씁니다.</target>
        </trans-unit>
        <trans-unit id="d99d667e36582cea7f2334c492a206fcb6df9006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 일반적인 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를무시하고바이트를 직접 씁니다.</target>
        </trans-unit>
        <trans-unit id="4692edaab9643d8a5e7c5c6c2f995daef5ee1220" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; , and writes bytes directly.</target>
        </trans-unit>
        <trans-unit id="0490d1f560a432f99bac3122c75fb8ef6af90f33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; 는버퍼 &lt;code&gt;buf&lt;/code&gt; 에서 핸들 &lt;code&gt;hdl&lt;/code&gt; 에 &lt;code&gt;count&lt;/code&gt; 8 비트 바이트를씁니다. ()를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="675e0c5497e4318c63592abccd2c82715047a160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isAlreadyExistsError&quot;&gt;isAlreadyExistsError&lt;/a&gt;&lt;/code&gt; The operand refers to a directory that already exists. &lt;code&gt; [EEXIST]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isAlreadyExistsError&quot;&gt;isAlreadyExistsError&lt;/a&gt;&lt;/code&gt; 피연산자는 이미 존재하는 디렉토리를 참조합니다. &lt;code&gt; [EEXIST]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e8d3a2ed896f8f5ead7e97db7d1db41059cac067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The directory does not exist. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 디렉토리가 존재하지 않습니다. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="570fc6e70848e62062b5f67d22eb279fa47e3442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The document directory for the current user does not exist, or cannot be found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 현재 사용자의 문서 디렉토리가 없거나 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e20e3f01828fc8f87cbe164a8b5c4e1b2aa04ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The file does not exist. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 파일이 존재하지 않습니다. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="858cd772984a7e4429db514018b70ce3afd9ae06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The home directory for the current user does not exist, or cannot be found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 현재 사용자의 홈 디렉토리가 없거나 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7a85b3657c156b8ae293b591e0cb872c2e655091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The original directory does not exist, or there is no path to the target. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 원래 디렉토리가 존재하지 않거나 대상에 대한 경로가 없습니다. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47c5c9601ce63bc94ccc8604c54e7bb22d69d8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The original file does not exist, or there is no path to the target. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 원본 파일이 없거나 대상에 대한 경로가 없습니다. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2ab4ae517a822445df2a1a704ad3674534b7b20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; There is no path referring to the working directory. &lt;code&gt;[EPERM, ENOENT, ESTALE...]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 작업 디렉토리를 참조하는 경로가 없습니다. &lt;code&gt;[EPERM, ENOENT, ESTALE...]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae0dd37d90f48cfbdef6a570db9acc64836085b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; There is no path to the directory. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 디렉토리 경로가 없습니다. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="347fc8584d20e401ff8f78ac63c1500e20cf5de5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the file or directory does not exist.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 파일이나 디렉토리가 없으면 isDoesNotExistError 입니다.</target>
        </trans-unit>
        <trans-unit id="e5fc418c169c85bf7e022cca595290b216e02ae5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the symbolic link does not exist; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 기호 링크가 존재하지 않으면 isDoesNotExistError ; 또는</target>
        </trans-unit>
        <trans-unit id="a4a49ab0d29fe4fe855dfb979840d520e0507041" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EACCES]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 프로세스가 작업을 수행 할 수있는 권한이 없습니다. &lt;code&gt;[EACCES]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee56e32bdbd4711aea4be33a1fcaaf4bda21f029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EROFS, EACCES, EPERM]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 프로세스가 작업을 수행 할 수있는 권한이 없습니다. &lt;code&gt;[EROFS, EACCES, EPERM]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b64e747953087c74ce74e2be09ce5f51ed1f10f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EROFS, EACCES]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 프로세스가 작업을 수행 할 수있는 권한이 없습니다. &lt;code&gt;[EROFS, EACCES]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9131e447f68b5aa32b4fe3baa0338cd3a6741e0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if another system resource limit would be exceeded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 다른 시스템 리소스 제한을 초과하면 isPermissionError</target>
        </trans-unit>
        <trans-unit id="42d89f5accd453087b393d912d9093968f25de64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to access the permissions, or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자가 권한에 액세스 할 수없는 경우 isPermissionError</target>
        </trans-unit>
        <trans-unit id="c180a36cc0fcd2cf5d5a734f85406f596ffb1a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to alter the access time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자가 액세스 시간을 변경할 수없는 경우 isPermissionError ; 또는</target>
        </trans-unit>
        <trans-unit id="05cff511b1fbc5935a930f77cb71c60e1570a1cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to alter the modification time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자가 수정 시간을 변경할 수없는 경우 isPermissionError ; 또는</target>
        </trans-unit>
        <trans-unit id="60d066f5275ae106507bc969993fbcf135694886" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the access time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자가 액세스 시간을 읽을 수없는 경우 isPermissionError ; 또는</target>
        </trans-unit>
        <trans-unit id="8fc550853d68871a0ca61e37d18be5e8873706bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the modification time; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자가 수정 시간을 읽을 수없는 경우 isPermissionError ; 또는</target>
        </trans-unit>
        <trans-unit id="7cfd615404ba5f6b6c0ef4f41d095e3187b64658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the symbolic link.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자가 기호 링크를 읽을 수없는 경우 isPermissionError</target>
        </trans-unit>
        <trans-unit id="d6d79b4dc766b0087bfb9c761ba001e872def17a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to set the permissions, or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자가 권한을 설정할 수없는 경우 isPermissionError</target>
        </trans-unit>
        <trans-unit id="8d1c7bba021927430b68ec57e72e32c19451ce3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</target>
        </trans-unit>
        <trans-unit id="344e76d740bf897453387371cea23cc330cac420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; 가 제기 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; 주어진 스레드 예외 (GHC 만).</target>
        </trans-unit>
        <trans-unit id="e615977c2722c4f0e45c54f7345e00cff9115bc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:on&quot;&gt;on&lt;/a&gt; b u x y&lt;/code&gt; runs the binary function &lt;code&gt;b&lt;/code&gt;&lt;em&gt;on&lt;/em&gt; the results of applying unary function &lt;code&gt;u&lt;/code&gt; to two arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. From the opposite perspective, it transforms two inputs and combines the outputs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:on&quot;&gt;on&lt;/a&gt; b u x y&lt;/code&gt; 이진 함수 실행 &lt;code&gt;b&lt;/code&gt; &lt;em&gt;에&lt;/em&gt; 단항 함수 적용의 결과 &lt;code&gt;u&lt;/code&gt; 두 개의 인자로 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; . 반대 관점에서 두 입력을 변환하고 출력을 결합합니다.</target>
        </trans-unit>
        <trans-unit id="786c99907a020f9c48152e8d24c6885af0611c87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 는 싱글 웨이크 업입니다. 차단 여러 스레드가있는 경우 즉, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 이 , 그리고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 빈되고, 하나의 스레드 만이 깨어됩니다. 런타임은 깨어 난 스레드가 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 작업을완료하도록 보장 합니다.</target>
        </trans-unit>
        <trans-unit id="74a812d8a8c0f3519c071dad1226398b35116293" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; , and the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</target>
        </trans-unit>
        <trans-unit id="e578064f0da8499089a403d976f0baf9159aed9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 는 다중 웨이크 업이므로 여러 판독기가 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 에서차단되면 모든판독기가동시에 깨어납니다.</target>
        </trans-unit>
        <trans-unit id="249cb4fb75c51d144375974f15423f8de0ca57cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; , all of them are woken up at the same time.</target>
        </trans-unit>
        <trans-unit id="0b3f50ac80b1318619fa52bcf2532a8192f5aefc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 는 싱글 웨이크 업입니다. 차단 여러 스레드가있는 경우 즉, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 이 , 그리고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 가득 차면, 하나의 스레드 만이 깨어됩니다. 런타임은 깨어 난 스레드가 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 작업을완료하도록 보장 합니다.</target>
        </trans-unit>
        <trans-unit id="b69d3fc09ff33c36a03a7ba1a1ea73aff653b08e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; , and the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</target>
        </trans-unit>
        <trans-unit id="2b4939a05367193825eecc5af2806613fa289229" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:with&quot;&gt;with&lt;/a&gt; val f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory into which &lt;code&gt;val&lt;/code&gt; has been marshalled (the combination of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:with&quot;&gt;with&lt;/a&gt; val f&lt;/code&gt; 실행 연산 &lt;code&gt;f&lt;/code&gt; ,되는 메모리에 일시적으로 할당 된 블록을 인수로 포인터를 전달 &lt;code&gt;val&lt;/code&gt; 배열 된 (조합 된 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; 를 하고 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9e61feadfc129e536f83d38e4032d764857e8122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 파일을 열고 결과 핸들을 계산 &lt;code&gt;act&lt;/code&gt; 에 전달합니다. 정상 종료 또는 예외 발생에 관계없이 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt; 종료시 핸들이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="c6dad49a905f8d674e7d0ee29159ce4a7bd8962f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt; . The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt; , whether by normal termination or by raising an exception.</target>
        </trans-unit>
        <trans-unit id="97f4bfc1af66b1f78e6fa201119dedebf31cea28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; 는 전체 환경을 &lt;code&gt;(key,value)&lt;/code&gt; 쌍의 목록으로 검색합니다.</target>
        </trans-unit>
        <trans-unit id="77b5a03cf9bedea531e171f5f1e26bc4003a8f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt;&lt;code&gt;args act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt; &lt;code&gt;args act&lt;/code&gt; 조치 실행하는 동안 - &lt;code&gt;act&lt;/code&gt; ,이 &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 가 반환 &lt;code&gt;args&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab56e078d2844082ad734d0aabb2c57a6ce5bc98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt;&lt;code&gt;name act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;name act&lt;/code&gt; - 액션 실행하는 동안 &lt;code&gt;act&lt;/code&gt; 가지고 &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; 의 반환 &lt;code&gt;name&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f58d145ae3238904f6ded50a490545f505e32944" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; 는 전체 환경을 &lt;code&gt;(key,value)&lt;/code&gt; 쌍의 목록으로 검색합니다.</target>
        </trans-unit>
        <trans-unit id="6013d33c430ebf7ce02db5cc25b9470bb617134d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt;&lt;code&gt;args act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt; &lt;code&gt;args act&lt;/code&gt; 조치 실행하는 동안 - &lt;code&gt;act&lt;/code&gt; ,이 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; 가 반환 &lt;code&gt;args&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff4e2cb305925639cfd5cfb1c2f1ba63b4d75cb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt;&lt;code&gt;name act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;name act&lt;/code&gt; - 액션 실행하는 동안 &lt;code&gt;act&lt;/code&gt; 가지고 &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; 의 반환 &lt;code&gt;name&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="750cbc8039fe1c83e8763f28996fdc34077a41e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt; 을 제공합니다</target>
        </trans-unit>
        <trans-unit id="ee498c484d9daa5b759cbcd3d038588c60a44a4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;file&quot;&lt;/code&gt; 제공 합니다</target>
        </trans-unit>
        <trans-unit id="204e024900f7186a24f70c664c7a279d94013014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&quot;/directory&quot;&lt;/code&gt; 를 제공합니다</target>
        </trans-unit>
        <trans-unit id="505fc89627c6e7b66a4e50349bdf9c2ce4989f4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;.ext&quot;&lt;/code&gt; 를 제공합니다</target>
        </trans-unit>
        <trans-unit id="9828687142d3f94e89126e3b00c12daaf2d4cd55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt; 를 제공합니다</target>
        </trans-unit>
        <trans-unit id="5a8b69a5412a9c411b18cda76536b61138da5070" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt; 을 제공합니다</target>
        </trans-unit>
        <trans-unit id="67fe48558f1fa4ec40f72ce35a9aab921fcd7182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;file&quot;&lt;/code&gt; 제공 합니다</target>
        </trans-unit>
        <trans-unit id="f3d9d266b688f599b0358a6292fe227b5ec8759f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&quot;/directory&quot;&lt;/code&gt; 를 제공합니다</target>
        </trans-unit>
        <trans-unit id="e898427c7f13c21982b1e0944597a896ad6ad697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;.ext&quot;&lt;/code&gt; 를 제공합니다</target>
        </trans-unit>
        <trans-unit id="c6f4096a36fedbe5e31682897c961e85cc71b392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt; 를 제공합니다</target>
        </trans-unit>
        <trans-unit id="2fd87e5da495cc20bcf39cf6c0ba9d2a05fc5f65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is a monad, so &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; actions can be combined using either the do-notation or the &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; operations from the &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 는 모나드이므로, do-notation 또는 &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스의 &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 작업을사용하여 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 작업을 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c113f8cff9254292f69bc05445fda1246e90fbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 일반적인 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를무시하고바이트를 직접 읽습니다.</target>
        </trans-unit>
        <trans-unit id="1e51dc3c610b9def739345e883f90795ad069471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 는 EOF 예외를 발생 시키지 않으며 대신 &lt;code&gt;count&lt;/code&gt; 보다 작은 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="fedf06dacc84d057e0aff65b80b4609f5234e578" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; 는 EOF에 도달하거나 &lt;code&gt;count&lt;/code&gt; 8 비트 바이트를 읽을때까지핸들 &lt;code&gt;hdl&lt;/code&gt; 에서 버퍼 &lt;code&gt;buf&lt;/code&gt; 로데이터를 읽습니다. 실제로 읽은 바이트 수를 반환합니다. 데이터를 읽기 전에 EOF에 도달 한 경우 (또는 &lt;code&gt;count&lt;/code&gt; 가 0 인 경우) 0일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47492e6c7d3b7b167bf4a77f02ebb3177702211f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 일반적인 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를무시하고바이트를 직접 읽습니다.</target>
        </trans-unit>
        <trans-unit id="8d5e68a418777562629e83c6914b5965e4f8b7de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; is identical to &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, except that it will never block waiting for data to become available, instead it returns only whatever data is available. To wait for data to arrive before calling &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; 는 동일 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; 이 데이터를 사용할 수있게 대기를 방해하지 않습니다 것을 제외하고 대신 사용할 수있는 어떤 데이터 만 반환합니다. &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; 을 호출하기 전에 데이터가 도착하기를 기다리려면 hWaitForInput 을 사용 &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="01b3ffe2679a681145b675a90cf9229e33661ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached, or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read, or there is no more data available to read immediately.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; 핸들로부터 데이터를 판독 &lt;code&gt;hdl&lt;/code&gt; 버퍼에 &lt;code&gt;buf&lt;/code&gt; 하거나 EOF에 도달하거나 할 때까지 &lt;code&gt;count&lt;/code&gt; 8 비트 바이트가 판독 된, 즉시 읽을 수있는 데이터가 더 이상 없다.</target>
        </trans-unit>
        <trans-unit id="900ccd5046937da12e632c0bd8f4813e0b7ef207" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 일반적인 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를무시하고바이트를 직접 읽습니다.</target>
        </trans-unit>
        <trans-unit id="22c26258224fd2f78d0012cf7ca47b489b5ae960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; 은 EOF 예외를 발생 시키지 않으며 대신 &lt;code&gt;count&lt;/code&gt; 보다 작은 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="118c238c7398f2db604334baf0dccba6607b9e36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt;. If there is any data available to read, then &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; returns it immediately; it only blocks if there is no data to be read.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; 는 핸들 &lt;code&gt;hdl&lt;/code&gt; 에서 버퍼 &lt;code&gt;buf&lt;/code&gt; 로데이터를 읽습니다. 읽을 수있는 데이터가 있으면 &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; 에서 즉시 반환합니다. 읽을 데이터가없는 경우에만 차단됩니다.</target>
        </trans-unit>
        <trans-unit id="70fd3acb2ea09a247c6cc9f61439f4360fb06b9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에 적용되는 모든 텍스트 인코딩을 무시하고 바이트를 기본 파일 또는 장치에 직접 씁니다.</target>
        </trans-unit>
        <trans-unit id="e2c77d44f270fef69a537c97036ebff6b054a777" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 일반적인 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를무시하고바이트를 직접 씁니다.</target>
        </trans-unit>
        <trans-unit id="79fa5cc1f0dea220b5d570d24561ebd4cee15a81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl buf count&lt;/code&gt; 는버퍼 &lt;code&gt;buf&lt;/code&gt; 에서 핸들 &lt;code&gt;hdl&lt;/code&gt; 에 &lt;code&gt;count&lt;/code&gt; 8 비트 바이트를씁니다. ()를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d26bfccb8bc5cc4f2e1a6ae4c49863b3fecc5656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; may need to flush buffered data in order to change the encoding.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; 인코딩을 변경하려면 hSetEncoding 이 버퍼링 된 데이터를 플러시해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f709fcc15fedd012e20af0c4a2ce129ee579458" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;&lt;code&gt;size&lt;/code&gt; truncates the physical file with handle &lt;code&gt;hdl&lt;/code&gt; to &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; &lt;code&gt;size&lt;/code&gt; 는 핸들 &lt;code&gt;hdl&lt;/code&gt; 이있는 실제 파일을 &lt;code&gt;size&lt;/code&gt; 바이트로절단합니다.</target>
        </trans-unit>
        <trans-unit id="fee68b3d1c21bbb0d90dc848ac40c2956dc50c88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; is in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad, and gives more comprehensive output than the (pure) instance of &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 모나드에 있으며 &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 (순수) 인스턴스보다 포괄적 인 출력을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5868d6a3771c787f8c7a6ca4570efb80ef87837a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 파일을 열고 결과 핸들을 계산 &lt;code&gt;act&lt;/code&gt; 에 전달합니다. 정상 종료 또는 예외 발생에 관계없이 &lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt; 종료시 핸들이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="bbf5cb2c1fd5be3e782db10ab3e5cb2a4b1ee149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception. If closing the handle raises an exception, then this exception will be raised by &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt; rather than any exception raised by &lt;code&gt;act&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt; name mode act&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 파일을 열고결과 핸들을 계산 &lt;code&gt;act&lt;/code&gt; 로 전달합니다. 정상 종료 또는 예외 발생으로 &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt; 종료시핸들이 닫힙니다. 핸들을 닫으면 예외가 발생하면 &lt;code&gt;act&lt;/code&gt; 에서 발생한 예외가 아니라 &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt; 이 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="dabc71eec17f83a93ea23ff66cab4a1dc6ba84c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isAlreadyInUseError&quot;&gt;isAlreadyInUseError&lt;/a&gt;&lt;/code&gt; if the file is already open and cannot be reopened;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isAlreadyInUseError&quot;&gt;isAlreadyInUseError&lt;/a&gt;&lt;/code&gt; 파일이 이미 열려 있고 다시 열 수없는 경우 isAlreadyInUseError ;</target>
        </trans-unit>
        <trans-unit id="75e8b0ed7a31703858ed0a28c48503222d5319df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the encoding is unknown</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 인코딩을 알 수없는 경우 isDoesNotExistError</target>
        </trans-unit>
        <trans-unit id="a3003e85eaf3fbc4d4ba4bf2a4cb43b86fc85bdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the environment variable does not exist.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 환경 변수가 없으면 isDoesNotExistError 입니다.</target>
        </trans-unit>
        <trans-unit id="084f3f0a8dd95c22a11cd704ae034bf71b1f18cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the file does not exist or (on POSIX systems) is a FIFO without a reader and &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; was requested; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 는 파일이 존재하거나 (POSIX 시스템)는 FIFO는 리더와없이하지 않는 경우 &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; 가 요청 된; 또는</target>
        </trans-unit>
        <trans-unit id="c936737e355c2bbc41be6c619b317caa00c885f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; if the end of file has been reached.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; 파일 끝에 도달하면 isEOFError 입니다.</target>
        </trans-unit>
        <trans-unit id="ea9e4b0caa72bab041ae1ff68c755698491c977d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; if the end of file is encountered when reading the &lt;em&gt;first&lt;/em&gt; character of the line.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; 줄의&lt;em&gt; 첫 번째&lt;/em&gt; 문자를읽을 때 파일 끝이 발견되면 isEOFError 입니다.</target>
        </trans-unit>
        <trans-unit id="61c609bcfaa99944aeb4ff3e9dd3d277f3cdb404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; if the device is full;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; 장치가 가득 찬 경우 isFullError ;</target>
        </trans-unit>
        <trans-unit id="8b22ca3a03b411a711bed4b581a930e9ee4bf29b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; if the device is full; or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; 장치가 가득 찬 경우 isFullError ; 또는</target>
        </trans-unit>
        <trans-unit id="45e7a82af7669853759d0945fa89a702e11253c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;hdl&lt;/code&gt; has buffered read data, and is not seekable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; &lt;code&gt;hdl&lt;/code&gt; 이 읽은 데이터를 버퍼링하고 검색 할 수 없는 경우 isIllegalOperation 입니다.</target>
        </trans-unit>
        <trans-unit id="4da7adc31ef4edef17a242440c7d64d638a8bd80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; if the Handle is not seekable, or does not support the requested seek mode.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; 핸들을 검색 할 수 없거나 요청 된 검색 모드를 지원하지 않는 경우 isIllegalOperationError</target>
        </trans-unit>
        <trans-unit id="c8e8eb6cf62901659fe79c54f96421c223046405" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; if the Handle is not seekable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; 핸들을 찾을 수없는 경우 isIllegalOperationError</target>
        </trans-unit>
        <trans-unit id="5ce2292e357dc0bd830c43d2560fdb040d147b0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 시스템 리소스 제한을 초과하면 isPermissionError</target>
        </trans-unit>
        <trans-unit id="8c1106621d2a78ef47cd789f50dfd1a8b9f50c67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded. It is unspecified whether the characters in the buffer are discarded or retained under these circumstances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 시스템 리소스 제한을 초과하면 isPermissionError 이러한 상황에서 버퍼의 문자가 버려지거나 유지되는지 여부는 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2180955149dbf5012930133930c9cc308ff60476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded. It is unspecified whether the characters in the buffer are discarded or retained under these circumstances;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 시스템 리소스 제한을 초과하면 isPermissionError 이러한 상황에서 버퍼의 문자가 버려지거나 유지되는지 여부는 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f1e9517f13f2c20a3e48c3a33ab514f471703b91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if another system resource limit would be exceeded.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 다른 시스템 리소스 제한을 초과하면 isPermissionError</target>
        </trans-unit>
        <trans-unit id="d8930e357a572dfef9dbdede92f4e890fe39a178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the handle has already been used for reading or writing and the implementation does not allow the buffering mode to be changed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 핸들이 읽기 또는 쓰기에 이미 사용되었고 구현에서 버퍼링 모드를 변경할 수없는 경우 isPermissionError</target>
        </trans-unit>
        <trans-unit id="e9bbfadf606b4d0c13351714bfa1ed22830942d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user does not have permission to open the file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; 사용자에게 파일을 열 수있는 권한이없는 경우 isPermissionError</target>
        </trans-unit>
        <trans-unit id="9a84d685062db941954c961e65e03ffbf15c9da5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded. This is used to implement lazy file reading, see &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; 를 사용하면 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산이 느리게 지연 될 수 있습니다. 유형의 값 통과 할 때 &lt;code&gt;IO a&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 는 의 값 경우에만 수행됩니다 &lt;code&gt;a&lt;/code&gt; 요구한다. 지연 파일 읽기를 구현하는 데 사용됩니다 ( &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="636f9ef00f0bbe41d9813b08a2e27024248f864a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;source&lt;/code&gt; 로 식별 된 공유 객체에서 발생하는 것처럼symbol에 설명 된 &lt;code&gt;symbol&lt;/code&gt; 의 주소 바인딩을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="db638659b004f209b3be8d77aaba2e2a820082ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; 은 raw 핸들을 얻습니다. &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; 와 같은 것을해서는 안됩니다 $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="594f51891d30d86cfed741461446e3a9341bd7ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;source&lt;/code&gt; 로 식별 된 공유 객체에서 발생하는 것처럼symbol에 설명 된 &lt;code&gt;symbol&lt;/code&gt; 의 주소 바인딩을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="38a741da0985ccc5379b3b2289e21c9c8ecc6c53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; 은 raw 핸들을 얻습니다. &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; 와 같은 것을해서는 안됩니다 $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="6ffd9b58b987c6fd0a2c462b44c0987761e83f02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;source&lt;/code&gt; 로 식별 된 공유 객체에서 발생하는 것처럼symbol에 설명 된 &lt;code&gt;symbol&lt;/code&gt; 의 주소 바인딩을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6bc263b138bbc4a173923c1e1aefd1e9bda3260d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; 은 raw 핸들을 얻습니다. &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; 와 같은 것을해서는 안됩니다 $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="0e4787c41d0942e72d36598464f8701661cb6393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;source&lt;/code&gt; 로 식별 된 공유 객체에서 발생하는 것처럼symbol에 설명 된 &lt;code&gt;symbol&lt;/code&gt; 의 주소 바인딩을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3bc21cb66946a59fcabcd04a2651b642cc04cdfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; 은 raw 핸들을 얻습니다. &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;= p -&amp;gt; use p&lt;/code&gt; 와 같은 것을해서는 안됩니다 $ liftM undl &amp;gt;&amp;gt; = p-&amp;gt; use p</target>
        </trans-unit>
        <trans-unit id="875b6886f5f845cde066821d5d52dcec6a8d27c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; looks up a variable in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; 는 환경에서 변수를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="77f55c89f7417b0b10d95b889afaa28b4a9090e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; is a wrapper around &lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; where the programmer can specify a fallback if the variable is not found in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; 는환경에서 변수를 찾을 수없는 경우 프로그래머가 대체를 지정할 수있는 &lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; 주위의 랩퍼입니다.</target>
        </trans-unit>
        <trans-unit id="cca2c0a4d829cb0ea281df253eab24ce8639f433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; 는 전체 환경을 &lt;code&gt;(key,value)&lt;/code&gt; 쌍의 목록으로 검색합니다.</target>
        </trans-unit>
        <trans-unit id="4ec6916cb7447bb41f13e0beda26ad49291fcde9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; function takes an argument of the form &lt;code&gt;name=value&lt;/code&gt; and is equivalent to &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; 함수 형태의 인수 얻어 &lt;code&gt;name=value&lt;/code&gt; 과 동등하다 &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f64fc2012cb425156b398f64b5e3be84f23273cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnvironment&quot;&gt;setEnvironment&lt;/a&gt;&lt;/code&gt; resets the entire environment to the given list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnvironment&quot;&gt;setEnvironment&lt;/a&gt;&lt;/code&gt; 는 전체 환경을 주어진 &lt;code&gt;(key,value)&lt;/code&gt; 쌍의목록으로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="e4643c36ddd3c482bcd236e8e545490ab553c2dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; looks up a variable in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; 는 환경에서 변수를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="45ae85a79131db90987ae906284712d80186032c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; is a wrapper around &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; where the programmer can specify a fallback if the variable is not found in the environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; 는환경에서 변수를 찾을 수없는 경우 프로그래머가 대체를 지정할 수있는 &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; 주위의 랩퍼입니다.</target>
        </trans-unit>
        <trans-unit id="1d18cbcc5157f7be9ed80d4af97fcdb77623d64a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; 는 전체 환경을 &lt;code&gt;(key,value)&lt;/code&gt; 쌍의 목록으로 검색합니다.</target>
        </trans-unit>
        <trans-unit id="6df8503d7e50a0837aebd3fee4a3c41e23fd2cbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; function takes an argument of the form &lt;code&gt;name=value&lt;/code&gt; and is equivalent to &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; 함수 형태의 인수 얻어 &lt;code&gt;name=value&lt;/code&gt; 과 동등하다 &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c9265b7d41ad37773728bc0c5f02dcfc38e8770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader. This function is currently deprecated, and might be changed to making the current process a new process group leader in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; 는프로세스 &lt;code&gt;pid&lt;/code&gt; 를 새로운 프로세스 그룹 리더로 만들기 위해 &lt;code&gt;setpgid&lt;/code&gt; 를호출합니다. 이 기능은 현재 더 이상 사용되지 않으며 향후 버전에서 현재 프로세스를 새 프로세스 그룹 리더로 만들기 위해 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afde6d8639aaa455c87557d905849cd65ad38cfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; 호출 &lt;code&gt;setpgid&lt;/code&gt; 를 만드는 과정은 &lt;code&gt;pid&lt;/code&gt; 새로운 프로세스 그룹 리더를.</target>
        </trans-unit>
        <trans-unit id="33add91f94714967891e5a07f35980bf1089bae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;setsid&lt;/code&gt; to create a new session with the current process as session leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;setsid&lt;/code&gt; 를호출하여 현재 프로세스를 세션 리더로 사용하여 새 세션을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="245ba1378d38e9bdbe623e874acbfa4bb68bd7dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; calls one of the &lt;code&gt;execv*&lt;/code&gt; family, depending on whether or not the current PATH is to be searched for the command, and whether or not an environment is provided to supersede the process's current environment. The basename (leading directory names suppressed) of the command is passed to &lt;code&gt;execv*&lt;/code&gt; as &lt;code&gt;arg[0]&lt;/code&gt;; the argument list passed to &lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; therefore begins with &lt;code&gt;arg[1]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; 는 현재 PATH에서 명령을 검색할지 여부와 프로세스의 현재 환경을 대체하기 위해 환경이 제공되는지 여부에 따라 &lt;code&gt;execv*&lt;/code&gt; 제품군중 하나를 호출합니다. 명령의 기본 이름 (리딩 디렉토리 이름은 표시되지 않음)이 &lt;code&gt;arg[0]&lt;/code&gt; 으로 &lt;code&gt;execv*&lt;/code&gt; 전달됩니다. 따라서 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; 에 전달 된 인수 목록은 &lt;code&gt;arg[1]&lt;/code&gt; 시작합니다.</target>
        </trans-unit>
        <trans-unit id="4f8a276c3f2654ee2807265a2207fd529c00542f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; calls &lt;code&gt;_exit&lt;/code&gt; to terminate the process with the indicated exit &lt;code&gt;status&lt;/code&gt;. The operation never returns.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; 는 &lt;code&gt;_exit&lt;/code&gt; 를호출하여 표시된 종료 &lt;code&gt;status&lt;/code&gt; 프로세스를 종료 합니다 . 작업이 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b331a44e9f2d96759818096d963d90ff6d61a2b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; comes with a giant warning: since any other running threads are not copied into the child process, it's easy to go wrong: e.g. by accessing some shared resource that was held by another thread in the parent.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; 는 다른 경고 스레드가 자식 프로세스에 복사되지 않기 때문에 잘못 경고하기 쉽습니다. 예를 들어 부모의 다른 스레드가 보유한 일부 공유 리소스에 액세스하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a4692b194fcb7b65a798de44ae9867dce23eaa1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; 는 POSIX &lt;code&gt;fork&lt;/code&gt; 시스템 호출에해당합니다. 인수로 전달된 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치는 하위 프로세스에서 실행됩니다. 다른 스레드는 하위 프로세스로 복사되지 않습니다. 성공시, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; 는 아이의 반환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 부모 프로세스에; 오류가 발생하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="af51370316e8fa699d7f1a30060504b482c10353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</target>
        </trans-unit>
        <trans-unit id="b809bf2a9fb32b1598e28df2a68a97866ebf61db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; 통화 &lt;code&gt;waitpid&lt;/code&gt; 반환, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; 을 자식 프로세스가 종료 된 경우 자식 프로세스, 또는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 가 자식 프로세스하지만 아무도이 종료되지 않은 경우. 자식 프로세스가 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;isDoesNotExistError&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="e41dc14e618360849da7757b81e03c6d1da557c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt; , returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; , the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</target>
        </trans-unit>
        <trans-unit id="c98ebfb294b94ec9189fdc4e24a36426044fac82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; 통화 &lt;code&gt;waitpid&lt;/code&gt; 반환, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; 을 그룹의 모든 프로세스에 대한 &lt;code&gt;pgid&lt;/code&gt; 가 하나를 사용할 수있는 경우, 또는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 가 자식 프로세스하지만 아무도이 종료되지 않은 경우. 자식 프로세스가 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;isDoesNotExistError&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="4398624eeea97dd37bcf79734f76f75600b92ced" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt; , returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; , the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</target>
        </trans-unit>
        <trans-unit id="fb25d6c41db8f5f6945414c45e95ecdf7eb42feb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;getpgrp&lt;/code&gt; 를호출하여 현재 프로세스의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="35000f6c82ef3af2376fdde5f80d49175fb12291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</target>
        </trans-unit>
        <trans-unit id="2f67b7427ac92b4b61f43521ff5a27e70fd55c8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 는 &lt;code&gt;getpgid&lt;/code&gt; 를호출하여 &lt;code&gt;pid&lt;/code&gt; 프로세스의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="46a851a447c67bd1371b24ded961af267f234f12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48849504f015622f71b1e18ff371e828e5bee0ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;getpid&lt;/code&gt; 를호출하여 현재 프로세스의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="70f9238aecdfcdf1b12e61afd35983097f9772a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</target>
        </trans-unit>
        <trans-unit id="decddcab9a19d21de13b036047e55700e721b43c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; 호출 &lt;code&gt;getppid&lt;/code&gt; 는 현재 프로세스의 상위에 대한 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="7cc151819d797fce9c21a832e6de34540fea1f28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</target>
        </trans-unit>
        <trans-unit id="9e8af69aea7593c4003bc5ffe850e0a4ff63aa42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; 통화 &lt;code&gt;waitpid&lt;/code&gt; 반환, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; 프로세스는 &lt;code&gt;pid&lt;/code&gt; 가능한 경우, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그렇지. 경우 &lt;code&gt;blk&lt;/code&gt; 있다 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; , 다음 &lt;code&gt;WNOHANG&lt;/code&gt; 가 에 대한 옵션으로 설정되어 &lt;code&gt;waitpid&lt;/code&gt; 를 , 그렇지 않으면 없습니다. 경우 &lt;code&gt;stopped&lt;/code&gt; 입니다 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , 다음 &lt;code&gt;WUNTRACED&lt;/code&gt; 는 대한 옵션에서 설정 &lt;code&gt;waitpid&lt;/code&gt; 를 , 그렇지 않으면 없습니다.</target>
        </trans-unit>
        <trans-unit id="579432a4355fa782df05cd3e056646e7b878df3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt; , returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; , the &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; , then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt; , otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt; , otherwise not.</target>
        </trans-unit>
        <trans-unit id="f018d81ab726d4c0eb48f687fbe0b88d32709812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;times&lt;/code&gt; to obtain time-accounting information for the current process and its children.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; 는 현재 프로세스 및 해당 하위 프로세스에 대한 시간 계산 정보를 얻기 위해 &lt;code&gt;times&lt;/code&gt; 을호출합니다.</target>
        </trans-unit>
        <trans-unit id="ee83b521f68e9f8ba6aacfaae6c1f93e7e178ebf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 호출 &lt;code&gt;setpgid&lt;/code&gt; 를 세트에 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 을 현재 프로세스의 &lt;code&gt;pgid&lt;/code&gt; 가 .</target>
        </trans-unit>
        <trans-unit id="b7a1554e08d9805f8d7b85b2bcb9156a604fe233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="72301bac429c0fcb4bdd937a5f747b9535a5d2a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 호출 &lt;code&gt;setpgid&lt;/code&gt; 를 세트에 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 을 프로세스에 대한 &lt;code&gt;pid&lt;/code&gt; 에 &lt;code&gt;pgid&lt;/code&gt; 가 . 이 기능은 현재 더 이상 사용되지 않으며향후 버전에서 현재 프로세스에 대한 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 설정으로 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cc89a927ba375b64508c726899bf6a65979b8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt; . This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</target>
        </trans-unit>
        <trans-unit id="6326a70dbe10166b3d108453064f69feb6545960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; 호출 &lt;code&gt;setpgid&lt;/code&gt; 를 세트에 &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; 을 프로세스에 대한 &lt;code&gt;pid&lt;/code&gt; 에 &lt;code&gt;pgid&lt;/code&gt; 가 .</target>
        </trans-unit>
        <trans-unit id="49bd46c02e8acf48d5c4c4f61e50fb216e1bf2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader. This function is currently deprecated, and might be changed to making the current process a new process group leader in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; 는프로세스 &lt;code&gt;pid&lt;/code&gt; 를 새로운 프로세스 그룹 리더로 만들기 위해 &lt;code&gt;setpgid&lt;/code&gt; 를호출합니다. 이 기능은 현재 더 이상 사용되지 않으며 향후 버전에서 현재 프로세스를 새 프로세스 그룹 리더로 만들기 위해 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdaf0e0f4ace757b290ce823bf71937210469424" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; 호출 &lt;code&gt;setpgid&lt;/code&gt; 를 만드는 과정은 &lt;code&gt;pid&lt;/code&gt; 새로운 프로세스 그룹 리더를.</target>
        </trans-unit>
        <trans-unit id="469b4647b75bb623290b754f947b421cc558a3a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;setsid&lt;/code&gt; to create a new session with the current process as session leader.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;setsid&lt;/code&gt; 를호출하여 현재 프로세스를 세션 리더로 사용하여 새 세션을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3b6263bdcc9198f197573ea3e7bff7fd1a1f9b98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; calls one of the &lt;code&gt;execv*&lt;/code&gt; family, depending on whether or not the current PATH is to be searched for the command, and whether or not an environment is provided to supersede the process's current environment. The basename (leading directory names suppressed) of the command is passed to &lt;code&gt;execv*&lt;/code&gt; as &lt;code&gt;arg[0]&lt;/code&gt;; the argument list passed to &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; therefore begins with &lt;code&gt;arg[1]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; 는 현재 PATH에서 명령을 검색할지 여부와 프로세스의 현재 환경을 대체하기 위해 환경이 제공되는지 여부에 따라 &lt;code&gt;execv*&lt;/code&gt; 제품군중 하나를 호출합니다. 명령의 기본 이름 (리딩 디렉토리 이름은 표시되지 않음)이 &lt;code&gt;arg[0]&lt;/code&gt; 으로 &lt;code&gt;execv*&lt;/code&gt; 전달됩니다. 따라서 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; 에 전달 된 인수 목록은 &lt;code&gt;arg[1]&lt;/code&gt; 시작합니다.</target>
        </trans-unit>
        <trans-unit id="f62df387d69aa46aebb9fd22e8170de79505247a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; calls &lt;code&gt;_exit&lt;/code&gt; to terminate the process with the indicated exit &lt;code&gt;status&lt;/code&gt;. The operation never returns.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; 는 &lt;code&gt;_exit&lt;/code&gt; 를호출하여 표시된 종료 &lt;code&gt;status&lt;/code&gt; 프로세스를 종료 합니다 . 작업이 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b6fbeeb193386e128dd8791d9dbb3d92d21dddff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; comes with a giant warning: since any other running threads are not copied into the child process, it's easy to go wrong: e.g. by accessing some shared resource that was held by another thread in the parent.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; 는 다른 경고 스레드가 자식 프로세스에 복사되지 않기 때문에 잘못 경고하기 쉽습니다. 예를 들어 부모의 다른 스레드가 보유한 일부 공유 리소스에 액세스하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d58c670bbc1937d16c9525d1af1ece17d42e24b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; 는 POSIX &lt;code&gt;fork&lt;/code&gt; 시스템 호출에해당합니다. 인수로 전달된 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치는 하위 프로세스에서 실행됩니다. 다른 스레드는 하위 프로세스로 복사되지 않습니다. 성공시, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; 는 아이의 반환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 부모 프로세스에; 오류가 발생하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1d73f9a1ea23a3c6cbe77983b6fc1fcbe1c10802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</target>
        </trans-unit>
        <trans-unit id="5c78fd307d5e5a42736a557bf89bf2c903970904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; 통화 &lt;code&gt;waitpid&lt;/code&gt; 반환, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; 을 자식 프로세스가 종료 된 경우 자식 프로세스, 또는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 가 자식 프로세스하지만 아무도이 종료되지 않은 경우. 자식 프로세스가 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;isDoesNotExistError&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="58aa010afbdea9f9c683c6e4ae48ebc9ed80f53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt; , returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; , the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</target>
        </trans-unit>
        <trans-unit id="b0156321aba7322067db6b6b754a4fa5290e04b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; 통화 &lt;code&gt;waitpid&lt;/code&gt; 반환, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; 을 그룹의 모든 프로세스에 대한 &lt;code&gt;pgid&lt;/code&gt; 가 하나를 사용할 수있는 경우, 또는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 가 자식 프로세스하지만 아무도이 종료되지 않은 경우. 자식 프로세스가 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;isDoesNotExistError&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="af035c09a69441b421533cd8e0b957536055b1f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt; , returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt; , the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</target>
        </trans-unit>
        <trans-unit id="87c9e9b139b243bcf78e76dd75ea702542d69581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;getpgrp&lt;/code&gt; 를호출하여 현재 프로세스의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="e0c4fd79c2ba2ad4684e017c47b25f789ff7ad57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</target>
        </trans-unit>
        <trans-unit id="74dd1b917e9a69953bf4b8c937d8de8237d2dc57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; 는 &lt;code&gt;getpgid&lt;/code&gt; 를호출하여 &lt;code&gt;pid&lt;/code&gt; 프로세스의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="2722768d62346c78e55322c9c90b517d3798beb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54cca06453c3413022dab30e1c4b8ad600d8a92b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;getpid&lt;/code&gt; 를호출하여 현재 프로세스의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="2ac8b6dd9e674ed076100afb6b8f72517c55a5a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</target>
        </trans-unit>
        <trans-unit id="79de4d0dd36d60e8d1af122d16523600e029dc2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; 호출 &lt;code&gt;getppid&lt;/code&gt; 는 현재 프로세스의 상위에 대한 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; 를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="a6332a3dd49bea9bab89b165d20990868c0b72be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</target>
        </trans-unit>
        <trans-unit id="8a4c674b6cb46e258db01fef8f8501dd6db5f62c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; 통화 &lt;code&gt;waitpid&lt;/code&gt; 반환, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; 프로세스는 &lt;code&gt;pid&lt;/code&gt; 가능한 경우, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그렇지. 경우 &lt;code&gt;blk&lt;/code&gt; 있다 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; , 다음 &lt;code&gt;WNOHANG&lt;/code&gt; 가 에 대한 옵션으로 설정되어 &lt;code&gt;waitpid&lt;/code&gt; 를 , 그렇지 않으면 없습니다. 경우 &lt;code&gt;stopped&lt;/code&gt; 입니다 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , 다음 &lt;code&gt;WUNTRACED&lt;/code&gt; 는 대한 옵션에서 설정 &lt;code&gt;waitpid&lt;/code&gt; 를 , 그렇지 않으면 없습니다.</target>
        </trans-unit>
        <trans-unit id="65781d113566d57dadcf38da291555269df6461a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt; , returning &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt; , the &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; , then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt; , otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; , then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt; , otherwise not.</target>
        </trans-unit>
        <trans-unit id="d7311896f40e30cb5781949c817e42696c43aed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;times&lt;/code&gt; to obtain time-accounting information for the current process and its children.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; 는 현재 프로세스 및 해당 하위 프로세스에 대한 시간 계산 정보를 얻기 위해 &lt;code&gt;times&lt;/code&gt; 을호출합니다.</target>
        </trans-unit>
        <trans-unit id="b6c595a2d722abb1bcf2e66915b65efc8d9368e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; 는 &lt;code&gt;setpgid&lt;/code&gt; 를호출하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 를 설정합니다. 현재 프로세스의 &lt;code&gt;pgid&lt;/code&gt; 가 .</target>
        </trans-unit>
        <trans-unit id="240034462e5baf7004d022d107b82e4b88ad9176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2dc571de8e85d6e8e708d01bd91d87adf802e837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; 호출 &lt;code&gt;setpgid&lt;/code&gt; 를 세트에 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 을 프로세스에 대한 &lt;code&gt;pid&lt;/code&gt; 에 &lt;code&gt;pgid&lt;/code&gt; 가 . 이 기능은 현재 더 이상 사용되지 않으며향후 버전에서 현재 프로세스에 대한 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; 설정으로 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa3ce82401a2804b5bdee5fc9addab00f4af2750" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt; . This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</target>
        </trans-unit>
        <trans-unit id="53ceb7acc2877b94d34a92c5a21115598457dc92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; 호출 &lt;code&gt;setpgid&lt;/code&gt; 를 세트에 &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; 을 프로세스에 대한 &lt;code&gt;pid&lt;/code&gt; 에 &lt;code&gt;pgid&lt;/code&gt; 가 .</target>
        </trans-unit>
        <trans-unit id="15c39aa4ff44d160dd0591f998e5da759c4de9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-temp-bytestring#v:mkstemps&quot;&gt;mkstemps&lt;/a&gt;&lt;/code&gt; - make a unique filename with a given prefix and suffix and open it for reading/writing (only safe on GHC &amp;amp; Hugs). The returned &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-posix-temp-bytestring#v:mkstemps&quot;&gt;mkstemps&lt;/a&gt;&lt;/code&gt; - 주어진 접두사와 접미사로 고유 한 파일 이름을 만들고 읽기 / 쓰기를 위해 엽니 다 (GHC 및 Hugs에서만 안전). 반환 된 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; 는 생성 된 파일의 (상대적으로) 경로이며 접두사와 접미사 사이에 6 개의 임의 문자가 들어 있습니다.</target>
        </trans-unit>
        <trans-unit id="46bea2aa50741b2e7f2386613326bfd099a95d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;(&lt;em&gt;mb_stdin_hdl&lt;/em&gt;, &lt;em&gt;mb_stdout_hdl&lt;/em&gt;, &lt;em&gt;mb_stderr_hdl&lt;/em&gt;, &lt;em&gt;ph&lt;/em&gt;)&lt;/code&gt;, where</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;(&lt;em&gt;mb_stdin_hdl&lt;/em&gt;, &lt;em&gt;mb_stdout_hdl&lt;/em&gt;, &lt;em&gt;mb_stderr_hdl&lt;/em&gt;, &lt;em&gt;ph&lt;/em&gt;)&lt;/code&gt; 리턴합니다. 여기서</target>
        </trans-unit>
        <trans-unit id="de0c3cc659c266f87b433652ed3e05f145a2368e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; can be set in CreateProcess since 1.5.0.0 in order to create an I/O completion port to monitor a process tree's progress on Windows.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; Windows에서 프로세스 트리의 진행 상황을 모니터하기 위해 I / O 완료 포트를 작성하기 위해 1.5.0.0 이후 CreateProcess에서 use_process_jobs 를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d33ffc652cd6edf400a46276eaaa778541643378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process-internals#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; can be set in CreateProcess since 1.5.0.0 in order to create an I/O completion port to monitor a process tree's progress on Windows.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-process-internals#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; Windows에서 프로세스 트리의 진행 상황을 모니터하기 위해 I / O 완료 포트를 작성하기 위해 1.5.0.0 이후 CreateProcess에서 use_process_jobs 를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f52a0c6f660fe927ed21e05a3a1360d4ea9efe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsec#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; 것입니다&lt;em&gt; 하지&lt;/em&gt; 에 해당 &lt;code&gt;&lt;a href=&quot;text-parsec#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt; 및</target>
        </trans-unit>
        <trans-unit id="68c49529901eea1e0cb2b493adedce1abc8b1a33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; &lt;em&gt; 는&lt;/em&gt; 실패&lt;em&gt; 하지&lt;/em&gt; 않습니다.</target>
        </trans-unit>
        <trans-unit id="3af5a9904d9710409de9c4aebdf7e5361ebc65a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; 것입니다&lt;em&gt; 하지&lt;/em&gt; 에 해당 &lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt; 및</target>
        </trans-unit>
        <trans-unit id="92803927bf6a1f9b9f8b4ddc08877befa5fdd4e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; &lt;em&gt; 는&lt;/em&gt; 실패&lt;em&gt; 하지&lt;/em&gt; 않습니다.</target>
        </trans-unit>
        <trans-unit id="35e8fcc93dfde1032e0672527b4aa4de752f9942" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; 것입니다&lt;em&gt; 하지&lt;/em&gt; 에 해당 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt; 및</target>
        </trans-unit>
        <trans-unit id="d6635c77539cf16fd391ec1952c7c92332d159d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; &lt;em&gt; 는&lt;/em&gt; 실패&lt;em&gt; 하지&lt;/em&gt; 않습니다.</target>
        </trans-unit>
        <trans-unit id="df3d9cbc949cf6333e88d0ebc550d9fdbbf76c29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; 는 연관성이 있으며 ID가 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; 있으며 만족합니다.</target>
        </trans-unit>
        <trans-unit id="141a47d100bf17a87275869021f7f3028622c513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 가 비어 있지 않은경우 텍스트 &quot;&quot; &amp;lt;&amp;gt; x = x</target>
        </trans-unit>
        <trans-unit id="457174c44b409f24e8791008f7651eca30c9c696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; 는 연관성이 있으며 ID가 &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; 있으며 만족합니다.</target>
        </trans-unit>
        <trans-unit id="26226ef68095c42422efb5c3d8302ac36a4708d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 가 비어 있지 않은경우 텍스트 &quot;&quot; &amp;lt;&amp;gt; x = x</target>
        </trans-unit>
        <trans-unit id="45c2291fca5d52ef3b8e385c5f03a12ad549a5f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; 는 연관성이 있으며 ID가 &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; 있으며 만족합니다.</target>
        </trans-unit>
        <trans-unit id="a32bc610caedfebea4dc059d18e1763813e85b09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 가 비어 있지 않은경우 텍스트 &quot;&quot; &amp;lt;&amp;gt; x = x</target>
        </trans-unit>
        <trans-unit id="725f5858e606954b65734f12a822508079606c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; is also extensible to support other types: see below.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 는 다른 유형을 지원하도록 확장 할 수도 있습니다. 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0644a1d5dabe87d85072f10dfb2b9115091ba3c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 인스턴스 읽기 :</target>
        </trans-unit>
        <trans-unit id="dd9cd267df7fcaca555ff4ca74cb25cf9a34b68b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument type. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다. 표준 목록 구문을 사용하는 기본 구현은 대부분의 유형에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="38cb59ebfa0eac4e107f95758f79cf34e98d7c15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument types. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다. 표준 목록 구문을 사용하는 기본 구현은 대부분의 유형에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="bdfeef58efc61d05d69245dec05258ba6ce9073b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="6197b43c339862398a73fc7613d833b3a16c5f39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="8db3b7b54f5fc83a3fcfd970477f8aebb48a3cec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; 는 어떤 &lt;code&gt;p&lt;/code&gt; 를 구문 분석합니다 파싱 만 선택적으로 괄호로 둘러싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="2044ace9d85fa680cc478309bd2f2ded048a2b39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; 는 어떤 &lt;code&gt;p&lt;/code&gt; 를 구문 분석합니다 파싱,하지만 괄호로 둘러싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a9ff89d616e39145786ac040250d647eab33b9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="5e6189616d11fa36d845ab24a61e5678894ac658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="b0d3b65253e1a0e79d545366904f567a7720fddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 은 훨씬 더 효율적인 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; 데이터 유형 (일명 &quot;새로운 스타일 파서&quot;)을 기반으로하지만, 그 정의는 &lt;code&gt;RankNTypes&lt;/code&gt; 언어 확장의 사용에 의존합니다. 따라서 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (및 사촌 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; )는 GHC 전용으로 표시됩니다. 그럼에도 불구하고, 사용하는 것이 좋습니다 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 대신 &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 을 가능하면이 가져 오는 효율성 개선을 위해.</target>
        </trans-unit>
        <trans-unit id="b44fdded4467ee56f959686fa369301287106b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 은 훨씬 더 효율적인 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; 데이터 유형 (일명 &quot;새로운 스타일 파서&quot;)을 기반으로하지만, 그 정의는 &lt;code&gt;RankNTypes&lt;/code&gt; 언어 확장의 사용에 의존합니다. 따라서 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (및 사촌 &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; )는 GHC 전용으로 표시됩니다. 그럼에도 불구하고, 사용하는 것이 좋습니다 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 대신 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 을 가능하면이 가져 오는 효율성 개선을 위해.</target>
        </trans-unit>
        <trans-unit id="c25a064a5394131ced760c05653fc84a47396bf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="c55e89dc1b131b2fd55b8fd8b3cb60cfb042c4be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="13c815201524120824766c3dddd2008bb519e427" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 인스턴스 표시 :</target>
        </trans-unit>
        <trans-unit id="83e49af0b446f9ab9986d2b037bf28032ad9c217" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt;ing a value of type &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; returns a pretty-printed representation of the object's type; useful for debugging.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 유형의 값 보내고 &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; 객체의 타입의 꽤 인쇄 된 표현을 반환합니다; 디버깅에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="12e1a13168f31f937931e2e70ce16a2f67a0264d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; 은 &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt; 문자열을 생성합니다 . .</target>
        </trans-unit>
        <trans-unit id="f872106d8005b7af4744ef31052e2ecc016fcb23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument type. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다. 표준 목록 구문을 사용하는 기본 구현은 대부분의 유형에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="23c5fb4ec796298a072bbc0df7dcab65babeaf7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument types. The default implementation using standard list syntax is correct for most types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다. 표준 목록 구문을 사용하는 기본 구현은 대부분의 유형에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="b35b80b86962fdcf1594ced86e6e8402d3fdb4b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="2cb41c0ec80e9802efc6886fc457bc595361ca2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 에 기초하여 상기 입력 생성자 어플리케이션 펑션 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; 인수 타입 기능한다.</target>
        </trans-unit>
        <trans-unit id="e18c8f572d4c964d5cef3f1b56f579716e61ef57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 법을 충족시켜야 함</target>
        </trans-unit>
        <trans-unit id="8452d2c7d8573e6d8d7eebb138d036b0ba6609e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-mix#t:Mix&quot;&gt;Mix&lt;/a&gt;&lt;/code&gt; is the information about a modules static properties, like location of Tix's in a file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-mix#t:Mix&quot;&gt;Mix&lt;/a&gt;&lt;/code&gt; 는 파일에서 Tix의 위치와 같은 모듈 정적 속성에 대한 정보입니다.</target>
        </trans-unit>
        <trans-unit id="1a3f75375d99611ab884a7c4628ca1086ff611c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-tix#t:Tix&quot;&gt;Tix&lt;/a&gt;&lt;/code&gt; is the storage format for our dynamic information about what boxes are ticked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-tix#t:Tix&quot;&gt;Tix&lt;/a&gt;&lt;/code&gt; 는 체크 박스에 대한 동적 정보를 저장하는 형식입니다.</target>
        </trans-unit>
        <trans-unit id="cf8eaede1379a8ef516539cf75e1e62246c19952" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#t:HpcPos&quot;&gt;HpcPos&lt;/a&gt;&lt;/code&gt; is an Hpc local rendition of a Span.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-util#t:HpcPos&quot;&gt;HpcPos&lt;/a&gt;&lt;/code&gt; 는 스팬의 Hpc 로컬 변환입니다.</target>
        </trans-unit>
        <trans-unit id="222d13f1ef6a9c1b57a2f449156236fe67454407" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:fromHpcPos&quot;&gt;fromHpcPos&lt;/a&gt;&lt;/code&gt; explodes the HpcPos into &lt;em&gt;line:column&lt;/em&gt;-&lt;em&gt;line:column&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:fromHpcPos&quot;&gt;fromHpcPos&lt;/a&gt;&lt;/code&gt; 는 HpcPos를&lt;em&gt; line : column&lt;/em&gt; -&lt;em&gt; line : column&lt;/em&gt; 으로 분해&lt;em&gt; 합니다.&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0cf707979d12a15b678a25d216452eb375b3ad48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:toHpcPos&quot;&gt;toHpcPos&lt;/a&gt;&lt;/code&gt; implodes to HpcPos, from &lt;em&gt;line:column&lt;/em&gt;-&lt;em&gt;line:column&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:toHpcPos&quot;&gt;toHpcPos&lt;/a&gt;&lt;/code&gt; 가&lt;em&gt; line : column&lt;/em&gt; -&lt;em&gt; line : column&lt;/em&gt; 에서 HpcPos로 전달&lt;em&gt; 됩니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14d85912577817b4928dad24283578df3ee994e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;appdata&lt;/em&gt;/ghc/ghci.conf&lt;/code&gt;, where ⟨appdata⟩ depends on your system, but is usually something like &lt;code&gt;C:/Documents and Settings/user/Application Data&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;appdata&lt;/em&gt;/ghc/ghci.conf&lt;/code&gt; , 여기서 ⟨appdata⟩는 시스템에 따라 다르지만 일반적으로 &lt;code&gt;C:/Documents and Settings/user/Application Data&lt;/code&gt; 와 같습니다.</target>
        </trans-unit>
        <trans-unit id="aa3074d66d301f190f572eaf6abdc1642ce7ec0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;ghcappdata&lt;/em&gt;/ghci.conf&lt;/code&gt;, where ⟨ghcappdata⟩ depends on your system, but is usually something like &lt;code&gt;$HOME/.ghc&lt;/code&gt; on Unix or &lt;code&gt;C:/Documents and Settings/user/Application
Data/ghc&lt;/code&gt; on Windows.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;ghcappdata&lt;/em&gt;/ghci.conf&lt;/code&gt; , where ⟨ghcappdata⟩ depends on your system, but is usually something like &lt;code&gt;$HOME/.ghc&lt;/code&gt; on Unix or &lt;code&gt;C:/Documents and Settings/user/Application Data/ghc&lt;/code&gt; on Windows.</target>
        </trans-unit>
        <trans-unit id="5a7730656222b7aef7f9ac270eef1ee1a0a0cc87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;size&lt;/em&gt;&lt;/code&gt; bytes from the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;em&gt;ba&lt;/em&gt;&lt;/code&gt; starting at &lt;code&gt;&lt;em&gt;offset&lt;/em&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;size&lt;/em&gt;&lt;/code&gt; &lt;code&gt;&lt;em&gt;offset&lt;/em&gt;&lt;/code&gt; 에서 시작하는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;em&gt;ba&lt;/em&gt;&lt;/code&gt; 의&lt;em&gt; 크기&lt;/em&gt; 바이트&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="04cc56f9108b51d563dbeb568d126dd0908fa34e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Alternative&lt;/code&gt; wrapper</source>
          <target state="translated">&lt;code&gt;Alternative&lt;/code&gt; 포장지</target>
        </trans-unit>
        <trans-unit id="d1b5ad560a36d111f7b170517bec1ad9c252b361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Applicative&lt;/code&gt; wrapper</source>
          <target state="translated">&lt;code&gt;Applicative&lt;/code&gt; 래퍼</target>
        </trans-unit>
        <trans-unit id="ed139e35c53a715a44b14239fe12ce2befbcd11b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array#&lt;/code&gt;&lt;code&gt;MutableArray#&lt;/code&gt;&lt;code&gt;SmallArray#&lt;/code&gt;&lt;code&gt;MutableSmallArray#&lt;/code&gt;&lt;code&gt;ArrayArray#&lt;/code&gt;&lt;code&gt;MutableArrayArray#&lt;/code&gt; unpinned &lt;code&gt;ByteArray#&lt;/code&gt; unpinned &lt;code&gt;MutableByteArray#&lt;/code&gt; pinned &lt;code&gt;ByteArray#&lt;/code&gt; pinned &lt;code&gt;MutableByteArray#&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Array#&lt;/code&gt; &lt;code&gt;MutableArray#&lt;/code&gt; &lt;code&gt;SmallArray#&lt;/code&gt; &lt;code&gt;MutableSmallArray#&lt;/code&gt; &lt;code&gt;ArrayArray#&lt;/code&gt; &lt;code&gt;MutableArrayArray#&lt;/code&gt; unpinned &lt;code&gt;ByteArray#&lt;/code&gt; unpinned &lt;code&gt;MutableByteArray#&lt;/code&gt; pinned &lt;code&gt;ByteArray#&lt;/code&gt; pinned &lt;code&gt;MutableByteArray#&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ded059f33997a34e4cb25713d008460b2ad90488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; arithmetic operations</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; 산술 연산</target>
        </trans-unit>
        <trans-unit id="d0e53fe9f571fb27c2541c25d32556160cbfe83e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; comparison predicates</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; 비교 술어</target>
        </trans-unit>
        <trans-unit id="d650170048a21327c9057e63a570ab7560de1b5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; logic operations</source>
          <target state="translated">&lt;code&gt;BigNat&lt;/code&gt; 논리 연산</target>
        </trans-unit>
        <trans-unit id="98cced63202e4646943f1d5997420ad399053024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bool&lt;/code&gt; wrappers</source>
          <target state="translated">&lt;code&gt;Bool&lt;/code&gt; 래퍼</target>
        </trans-unit>
        <trans-unit id="f6fac90529992fc3ed472546b3158d027f06fa86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buggle&lt;/code&gt;, is compiled with &lt;code&gt;-XSafe&lt;/code&gt;, so the code is machine-checked to be OK, but again under the assumption that all of &lt;code&gt;Buggle&lt;/code&gt;&amp;lsquo;s imports are trusted by &lt;code&gt;C&lt;/code&gt;. We must recursively check all imports!</source>
          <target state="translated">&lt;code&gt;Buggle&lt;/code&gt; 는 , 컴파일 &lt;code&gt;-XSafe&lt;/code&gt; 코드가 기계 검사 OK가 될 것입니다, 그러나 다시 모든 것을 전제로하므로, &lt;code&gt;Buggle&lt;/code&gt; 의 수입이 신뢰하는 &lt;code&gt;C&lt;/code&gt; . 모든 수입품을 재귀 적으로 점검해야합니다!</target>
        </trans-unit>
        <trans-unit id="e302746e5a51cd50b17e28f9955a7b45b41bc60c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buggle&lt;/code&gt;, is compiled with &lt;code&gt;-XSafe&lt;/code&gt;, so the code is machine-checked to be OK, but again under the assumption that all of &lt;code&gt;Buggle&lt;/code&gt;&amp;rsquo;s imports are trusted by &lt;code&gt;C&lt;/code&gt;. We must recursively check all imports!</source>
          <target state="translated">&lt;code&gt;Buggle&lt;/code&gt; , is compiled with &lt;code&gt;-XSafe&lt;/code&gt; , so the code is machine-checked to be OK, but again under the assumption that all of &lt;code&gt;Buggle&lt;/code&gt; &amp;rsquo;s imports are trusted by &lt;code&gt;C&lt;/code&gt; . We must recursively check all imports!</target>
        </trans-unit>
        <trans-unit id="8776b69f579fb241ce32fd13622015e4d0b83de0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ByteString&lt;/code&gt; shared substring: 5 words; 20 or 40 bytes.</source>
          <target state="translated">&lt;code&gt;ByteString&lt;/code&gt; 공유 하위 문자열 : 5 워드; 20 또는 40 바이트</target>
        </trans-unit>
        <trans-unit id="7599c125a41ef345c4cf6708fab6e6948fb7ee1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ByteString&lt;/code&gt; unshared: 9 words; 36 or 72 bytes.</source>
          <target state="translated">&lt;code&gt;ByteString&lt;/code&gt; 비공유 : 9 단어; 36 또는 72 바이트</target>
        </trans-unit>
        <trans-unit id="bc938b5f924562545bcd6ad426f0bdc998312507" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; does not have any associated data families (only type families). To see why data families are forbidden, imagine the following scenario:</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 에는 연결된 데이터 패밀리가 없습니다 (유형 패밀리 만). 데이터 패밀리가 금지 된 이유를 보려면 다음 시나리오를 상상하십시오.</target>
        </trans-unit>
        <trans-unit id="6ea75b2216d756d059065338554235079a07239d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is allowed to be different from &lt;code&gt;C'&lt;/code&gt;, but the right-hand sides of the type signatures must coincide. We require this because when you declare an empty instance for a class that uses &lt;a href=&quot;#extension-DefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt;, GHC implicitly fills in the default implementation like this:</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 는 &lt;code&gt;C'&lt;/code&gt; 와 다를 수 있지만 형식 서명의 오른쪽은 일치해야합니다. &lt;a href=&quot;#extension-DefaultSignatures&quot;&gt; &lt;code&gt;DefaultSignatures&lt;/code&gt; &lt;/a&gt; 를 사용하는 클래스에 대해 빈 인스턴스를 선언하면 GHC가 다음과 같이 기본 구현을 암시 적으로 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="278d10bb958aa2569a8ce66305104a3060e9a7bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is allowed to have associated type families, provided they meet the requirements laid out in the section on &lt;a href=&quot;#gnd-and-associated-types&quot;&gt;GND and associated types&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 는 &lt;a href=&quot;#gnd-and-associated-types&quot;&gt;GND 및 관련 유형&lt;/a&gt; 섹션에 제시된 요구 사항을 충족하는 경우 관련 유형 패밀리를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4c00311b73a3a04aff330aa580c1629544cc14f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is not &lt;code&gt;Read&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Typeable&lt;/code&gt;, or &lt;code&gt;Data&lt;/code&gt;. These classes should not &amp;ldquo;look through&amp;rdquo; the type or its constructor. You can still derive these classes for a newtype, but it happens in the usual way, not via this new mechanism. Confer with &lt;a href=&quot;#default-deriving-strategy&quot;&gt;Default deriving strategy&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 는 &lt;code&gt;Read&lt;/code&gt; , &lt;code&gt;Show&lt;/code&gt; , &lt;code&gt;Typeable&lt;/code&gt; 또는 &lt;code&gt;Data&lt;/code&gt; 가 아닙니다 . 이 클래스들은 타입이나 그것의 생성자를 &quot;보이지&quot;않아야합니다. 여전히 이러한 클래스를 새로운 유형으로 파생시킬 수 있지만이 새로운 메커니즘을 통하지 않고 일반적인 방식으로 발생합니다. 와 협의 &lt;a href=&quot;#default-deriving-strategy&quot;&gt;기본 유도하는 전략&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be4e6723a7a8830f64b1c41d49bc7a4eb6985c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMPLETE&lt;/code&gt; pragmas are only used by the pattern match checker. If a function definition matches on all the constructors specified in the pragma then the compiler will produce no warning.</source>
          <target state="translated">&lt;code&gt;COMPLETE&lt;/code&gt; pragma는 패턴 일치 검사기에서만 사용됩니다. 함수 정의가 pragma에 지정된 모든 생성자에서 일치하면 컴파일러는 경고를 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b3da2fa05cdf701d710001ae3f83641efe49d34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMPLETE&lt;/code&gt; pragmas can contain any data constructors or pattern synonyms which are in scope, but must mention at least one data constructor or pattern synonym defined in the same module. &lt;code&gt;COMPLETE&lt;/code&gt; pragmas may only appear at the top level of a module. Once defined, they are automatically imported and exported from modules. &lt;code&gt;COMPLETE&lt;/code&gt; pragmas should be thought of as asserting a universal truth about a set of patterns and as a result, should not be used to silence context specific incomplete match warnings.</source>
          <target state="translated">&lt;code&gt;COMPLETE&lt;/code&gt; pragma는 범위 내에있는 데이터 생성자 또는 패턴 동의어를 포함 할 수 있지만 동일한 모듈에 정의 된 하나 이상의 데이터 생성자 또는 패턴 동의어를 언급해야합니다. &lt;code&gt;COMPLETE&lt;/code&gt; pragma는 모듈의 최상위 레벨에만 나타날 수 있습니다. 일단 정의되면 모듈에서 자동으로 가져오고 내 보냅니다. &lt;code&gt;COMPLETE&lt;/code&gt; pragma는 일련의 패턴에 대한 보편적 인 진실을 주장하는 것으로 생각되어야하며, 결과적으로 문맥 특정 불완전한 일치 경고를 침묵시키는 데 사용되어서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="485baa405ddb5381f9b1f0f30331e14960f4dfc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONLIKE&lt;/code&gt; is a modifier to an &lt;code&gt;INLINE&lt;/code&gt; or &lt;code&gt;NOINLINE&lt;/code&gt; pragma. It specifies that an application of &lt;code&gt;f&lt;/code&gt; to one argument (in general, the number of arguments to the left of the &lt;code&gt;=&lt;/code&gt; sign) should be considered cheap enough to duplicate, if such a duplication would make rule fire. (The name &amp;ldquo;CONLIKE&amp;rdquo; is short for &amp;ldquo;constructor-like&amp;rdquo;, because constructors certainly have such a property.) The &lt;a href=&quot;#pragma-CONLIKE&quot;&gt;&lt;code&gt;CONLIKE&lt;/code&gt;&lt;/a&gt; pragma is a modifier to &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; because it really only makes sense to match &lt;code&gt;f&lt;/code&gt; on the LHS of a rule if you are sure that &lt;code&gt;f&lt;/code&gt; is not going to be inlined before the rule has a chance to fire.</source>
          <target state="translated">&lt;code&gt;CONLIKE&lt;/code&gt; is a modifier to an &lt;code&gt;INLINE&lt;/code&gt; or &lt;code&gt;NOINLINE&lt;/code&gt; pragma. It specifies that an application of &lt;code&gt;f&lt;/code&gt; to one argument (in general, the number of arguments to the left of the &lt;code&gt;=&lt;/code&gt; sign) should be considered cheap enough to duplicate, if such a duplication would make rule fire. (The name &amp;ldquo;CONLIKE&amp;rdquo; is short for &amp;ldquo;constructor-like&amp;rdquo;, because constructors certainly have such a property.) The &lt;a href=&quot;#pragma-CONLIKE&quot;&gt; &lt;code&gt;CONLIKE&lt;/code&gt; &lt;/a&gt; pragma is a modifier to &lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt;/&lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; &lt;/a&gt; because it really only makes sense to match &lt;code&gt;f&lt;/code&gt; on the LHS of a rule if you are sure that &lt;code&gt;f&lt;/code&gt; is not going to be inlined before the rule has a chance to fire.</target>
        </trans-unit>
        <trans-unit id="d2d81e2d9ec7cf4164a86b31f92b6391db5bcaa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONLIKE&lt;/code&gt; is a modifier to an &lt;code&gt;INLINE&lt;/code&gt; or &lt;code&gt;NOINLINE&lt;/code&gt; pragma. It specifies that an application of &lt;code&gt;f&lt;/code&gt; to one argument (in general, the number of arguments to the left of the &lt;code&gt;=&lt;/code&gt; sign) should be considered cheap enough to duplicate, if such a duplication would make rule fire. (The name &amp;ldquo;CONLIKE&amp;rdquo; is short for &amp;ldquo;constructor-like&amp;rdquo;, because constructors certainly have such a property.) The &lt;code&gt;CONLIKE&lt;/code&gt; pragma is a modifier to &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; because it really only makes sense to match &lt;code&gt;f&lt;/code&gt; on the LHS of a rule if you are sure that &lt;code&gt;f&lt;/code&gt; is not going to be inlined before the rule has a chance to fire.</source>
          <target state="translated">&lt;code&gt;CONLIKE&lt;/code&gt; 는 &lt;code&gt;INLINE&lt;/code&gt; 또는 &lt;code&gt;NOINLINE&lt;/code&gt; pragma 의 수정 자 입니다. 이 중복으로 인해 규칙이 실행되면 &lt;code&gt;f&lt;/code&gt; 를 하나의 인수 (일반적으로 &lt;code&gt;=&lt;/code&gt; 부호 왼쪽의 인수 수 )에 적용하는 것은 복제하기에 충분히 저렴한 것으로 간주되도록 지정합니다. (생성자는 확실히 그런 속성을 가지고 있기 때문에 이름은 &quot;CONLIKE은&quot;, &quot;생성자와 같은&quot;에 대한 짧은입니다.) &lt;code&gt;CONLIKE&lt;/code&gt; 의 프라그가에 수정이다 &lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; &lt;/a&gt; 정말에만 일치하는 의미하게 때문에 &lt;code&gt;f&lt;/code&gt; 를 규칙 경우의 LHS에를 규칙이 실행되기 전에 &lt;code&gt;f&lt;/code&gt; 가 인라인되지 않을 것이라고 확신합니다 .</target>
        </trans-unit>
        <trans-unit id="ca0776483d98a399bc40ea0c0a1e8f9c8c9ec7b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CallStack&lt;/code&gt; is kept abstract, but GHC provides a function</source>
          <target state="translated">&lt;code&gt;CallStack&lt;/code&gt; 은 추상적으로 유지되지만 GHC는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f6f472147735abc0cecb50b7cdcae7f9dffd268e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Coercible&lt;/code&gt; is a two-parameter class that has instances for types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; if the compiler can infer that they have the same representation. This class does not have regular instances; instead they are created on-the-fly during type-checking. Trying to manually declare an instance of &lt;code&gt;Coercible&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;Coercible&lt;/code&gt; 은 컴파일러가 동일한 표현을 가지고 있다고 유추 할 수있는 경우 유형 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 에 대한 인스턴스가있는 2 개의 매개 변수 클래스입니다 . 이 클래스에는 일반 인스턴스가 없습니다. 대신 형식 확인 중에 즉석에서 생성됩니다. &lt;code&gt;Coercible&lt;/code&gt; 인스턴스를 수동으로 선언하려고 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="68695f75a6a8888c47fbc91891863a97d327aa92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CoreM&lt;/code&gt; is a monad that all of the Core optimizations live and operate inside of.</source>
          <target state="translated">&lt;code&gt;CoreM&lt;/code&gt; 은 모든 Core 최적화가 작동하고 내부에서 작동하는 모나드입니다.</target>
        </trans-unit>
        <trans-unit id="6583859913f3d3f655e0c5fc1c133204e495bdd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CoreToDo&lt;/code&gt; is effectively a data type that describes all the kinds of optimization passes GHC does on Core. There are passes for simplification, CSE, etc. There is a specific case for plugins, &lt;code&gt;CoreDoPluginPass :: String -&amp;gt; PluginPass -&amp;gt; CoreToDo&lt;/code&gt; which should be what you always use when inserting your own pass into the pipeline. The first parameter is the name of the plugin, and the second is the pass you wish to insert.</source>
          <target state="translated">&lt;code&gt;CoreToDo&lt;/code&gt; 는 효과적으로 GHC가 Core에서 수행하는 모든 종류의 최적화 패스를 설명하는 데이터 유형입니다. 단순화, CSE 등을위한 패스가 있습니다. 플러그인에 대한 특별한 경우가 있습니다. &lt;code&gt;CoreDoPluginPass :: String -&amp;gt; PluginPass -&amp;gt; CoreToDo&lt;/code&gt; 는 자신의 패스를 파이프 라인에 삽입 할 때 항상 사용해야합니다. 첫 번째 매개 변수는 플러그인의 이름이고 두 번째 매개 변수는 삽입하려는 패스입니다.</target>
        </trans-unit>
        <trans-unit id="dfd16322bf8019d77331194eed535094f9511cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DW_TAG_ghc_src_note&lt;/code&gt; DIEs (tag 0x5b01) are found as children of &lt;code&gt;DW_TAG_lexical_block&lt;/code&gt; DIEs. They describe source spans which gave rise to the block; formally these spans are causally responsible for produced code: changes to code in the given span may change the code within the block; conversely changes outside the span are guaranteed not to affect the code in the block.</source>
          <target state="translated">&lt;code&gt;DW_TAG_ghc_src_note&lt;/code&gt; DIE (태그 0x5b01)는 &lt;code&gt;DW_TAG_lexical_block&lt;/code&gt; DIE의 자식으로 발견됩니다 . 그들은 블록을 일으킨 소스 스팬을 설명합니다. 공식적으로이 범위는 생성 된 코드를 인과 적으로 책임집니다. 주어진 범위의 코드를 변경하면 블록 내의 코드가 변경 될 수 있습니다. 반대로 범위 밖의 변경 사항은 블록의 코드에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8b7c7d802a6dbb96171248964f81e77ab81fa0f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data.List.splitAt&lt;/code&gt; is more strict than specified in the Report. Specifically, the Report specifies that</source>
          <target state="translated">&lt;code&gt;Data.List.splitAt&lt;/code&gt; 는 보고서에 지정된 것보다 더 엄격합니다. 특히 보고서는</target>
        </trans-unit>
        <trans-unit id="634502578bcebb8751a50be27b2ca0dc61cb2dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data.List&lt;/code&gt; due to the future addition of &lt;code&gt;Data.List.singleton&lt;/code&gt; and specialisation of exports to the &lt;code&gt;[]&lt;/code&gt; type. See the mailing list for details.</source>
          <target state="translated">&lt;code&gt;Data.List&lt;/code&gt; .singleton 의 향후 추가 및 &lt;code&gt;[]&lt;/code&gt; 유형 에 대한 내보내기의 전문화 로 인한 &lt;code&gt;Data.List.singleton&lt;/code&gt; . 자세한 내용은 메일 링리스트를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="815ef066b033cb4c87bc7a18a2fa4cd277f22cb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Debug.Trace.traceStack&lt;/code&gt; is a version of &lt;code&gt;Debug.Trace.trace&lt;/code&gt; that also prints the current call stack.</source>
          <target state="translated">&lt;code&gt;Debug.Trace.traceStack&lt;/code&gt; 은 현재 호출 스택을 인쇄하는 &lt;code&gt;Debug.Trace.trace&lt;/code&gt; 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="b8d4387e40f23e3472e133e5c182a6f9802e1b6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENTLOG_NOT_CONFIGURED&lt;/code&gt;: An &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt; has not yet been configured.</source>
          <target state="translated">&lt;code&gt;EVENTLOG_NOT_CONFIGURED&lt;/code&gt; : &lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; &lt;/a&gt; 가 아직 구성되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="b27f651b027bed566be4b5cf11369491bee9e73e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENTLOG_NOT_SUPPORTED&lt;/code&gt;: The runtime system wasn&amp;rsquo;t compiled with eventlog support.</source>
          <target state="translated">&lt;code&gt;EVENTLOG_NOT_SUPPORTED&lt;/code&gt; : 런타임 시스템이 이벤트 로그 지원으로 컴파일되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="e317c61d93437ba4a2376e0409ff8c943799793b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENTLOG_RUNNING&lt;/code&gt;: An &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt; has been configured and is running.</source>
          <target state="translated">&lt;code&gt;EVENTLOG_RUNNING&lt;/code&gt; : &lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; &lt;/a&gt; 가 구성되어 실행 중입니다.</target>
        </trans-unit>
        <trans-unit id="1100cc7824ba867b1412485db228fd16684f426f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Errno&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;Errno&lt;/code&gt; 기능</target>
        </trans-unit>
        <trans-unit id="888974bc2aa26aaf4445c229662809d0f31e1715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExceptT&lt;/code&gt; constructs a monad parameterized over two things:</source>
          <target state="translated">&lt;code&gt;ExceptT&lt;/code&gt; 는 다음 두 가지에 대해 매개 변수화 된 모나드를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="8f5c6138e19bc23ad3c13556f8e70f0b98fb7c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Floats&lt;/code&gt; (probably 32-bits) are almost always a bad idea, anyway, unless you Really Know What You Are Doing. Use &lt;code&gt;Double&lt;/code&gt;s. There&amp;rsquo;s rarely a speed disadvantage&amp;mdash;modern machines will use the same floating-point unit for both. With &lt;code&gt;Double&lt;/code&gt;s, you are much less likely to hang yourself with numerical errors.</source>
          <target state="translated">&lt;code&gt;Floats&lt;/code&gt; (아마 32 비트)는 실제로 무엇을하고 있는지 알지 못한다면 거의 항상 나쁜 생각입니다. &lt;code&gt;Double&lt;/code&gt; s를 사용하십시오 . 속도 단점은 거의 없습니다. 현대 기계는 두 장치 모두에 동일한 부동 소수점 단위를 사용합니다. &lt;code&gt;Double&lt;/code&gt; 을 사용하면 숫자 오류로 교수형에 처할 가능성이 훨씬 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="955ed75750440fafd18815a2c675e276a49e5759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; deriving will produce</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; 파생물은</target>
        </trans-unit>
        <trans-unit id="e0678b9641a4a2d85d4305a811bf0abc62c93278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; instances are expected to satisfy the following laws:</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; 인스턴스는 다음 법률을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="3dce461b4659e9b6b61c24b5f4524e648fc47d64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; instances can be derived for data types in which the last type parameter is existentially constrained or refined in a GADT. For example, this data type:</source>
          <target state="translated">&lt;code&gt;Foldable&lt;/code&gt; 마지막 유형 매개 변수가 GADT에서 본질적으로 제한되거나 구체화 된 데이터 유형에 대해 접이식 인스턴스가 파생 될 수 있습니다. 예를 들어이 데이터 유형은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2cfc19a59e8f6e4775b559a0bc28b66c2ed86472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &amp;mdash; Foreign import declarations that import a function with a non-&lt;code&gt;IO&lt;/code&gt; type are disallowed.</source>
          <target state="translated">&lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &amp;mdash; &lt;code&gt;IO&lt;/code&gt; 가 아닌 유형 의 함수를 가져 오는 외부 가져 오기 선언 은 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="de3911b91d2db2e249dba745cebf6cf6a5bd07ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FrontendPlugin&lt;/code&gt; exports a field &lt;code&gt;frontend&lt;/code&gt;, which is a function &lt;code&gt;[String] -&amp;gt; [(String, Maybe Phase)] -&amp;gt; Ghc ()&lt;/code&gt;. The first argument is a list of extra flags passed to the frontend with &lt;code&gt;-ffrontend-opt&lt;/code&gt;; the second argument is the list of arguments, usually source files and module names to be compiled (the &lt;code&gt;Phase&lt;/code&gt; indicates if an &lt;code&gt;-x&lt;/code&gt; flag was set), and a frontend simply executes some operation in the &lt;code&gt;Ghc&lt;/code&gt; monad (which, among other things, has a &lt;code&gt;Session&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;FrontendPlugin&lt;/code&gt; 은 필드 &lt;code&gt;frontend&lt;/code&gt; 를 내 보냅니다. 이 함수는 &lt;code&gt;[String] -&amp;gt; [(String, Maybe Phase)] -&amp;gt; Ghc ()&lt;/code&gt; 입니다. 첫 번째 인수는 &lt;code&gt;-ffrontend-opt&lt;/code&gt; 를 사용하여 프론트 엔드에 전달 된 추가 플래그 목록입니다 . 두 번째 인수는 인수 목록, 일반적으로 컴파일 할 소스 파일 및 모듈 이름 ( &lt;code&gt;Phase&lt;/code&gt; 는 &lt;code&gt;-x&lt;/code&gt; 플래그가 설정 되었는지 여부를 나타냄 )이며 프런트 엔드는 &lt;code&gt;Ghc&lt;/code&gt; 모나드 에서 일부 작업을 실행합니다 (이것은 무엇보다도 &lt;code&gt;Session&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e224ff13d4731a0e30f49bc73daccfc5e8a6efb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Generics&lt;/code&gt; &amp;mdash; Hand crafted instances of the &lt;code&gt;Generic&lt;/code&gt; type class are not allowed in Safe Haskell. Such instances aren&amp;rsquo;t strictly unsafe, but there is an important invariant that a &lt;code&gt;Generic&lt;/code&gt; instance should adhere to the structure of the data type for which the instance is defined, and allowing manually implemented &lt;code&gt;Generic&lt;/code&gt; instances would break that invariant. Derived instances (through the &lt;a href=&quot;glasgow_exts#extension-DeriveGeneric&quot;&gt;&lt;code&gt;DeriveGeneric&lt;/code&gt;&lt;/a&gt; extension) are still allowed. Note that the only allowed &lt;a href=&quot;glasgow_exts#deriving-strategies&quot;&gt;deriving strategy&lt;/a&gt; for deriving &lt;code&gt;Generic&lt;/code&gt; under Safe Haskell is &lt;code&gt;stock&lt;/code&gt;, as another strategy (e.g., &lt;code&gt;anyclass&lt;/code&gt;) would produce an instance that violates the invariant.</source>
          <target state="translated">&lt;code&gt;GHC.Generics&lt;/code&gt; &amp;mdash; &lt;code&gt;Generic&lt;/code&gt; 유형 클래스 의 수제 인스턴스는 Safe Haskell에서 허용되지 않습니다. 이러한 인스턴스는 엄격하게 안전하지는 않지만 &lt;code&gt;Generic&lt;/code&gt; 인스턴스가 인스턴스가 정의 된 데이터 유형의 구조를 준수해야하며, 수동으로 구현 된 &lt;code&gt;Generic&lt;/code&gt; 인스턴스를 허용 하면 해당 불변을 깨뜨릴 수 있는 중요한 불변이 있습니다 . 파생 인스턴스 ( &lt;a href=&quot;glasgow_exts#extension-DeriveGeneric&quot;&gt; &lt;code&gt;DeriveGeneric&lt;/code&gt; &lt;/a&gt; 확장을 통한 )는 여전히 허용됩니다. Safe Haskell 에서 &lt;code&gt;Generic&lt;/code&gt; 을&lt;a href=&quot;glasgow_exts#deriving-strategies&quot;&gt;파생하기&lt;/a&gt; 위해 유일하게 허용되는 파생 전략 은 &lt;code&gt;stock&lt;/code&gt; 입니다 . 다른 전략 (예 : &lt;code&gt;anyclass&lt;/code&gt; )은 불변을 위반하는 인스턴스를 생성하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="30bec5effabc453c5c550dd66f484dff6b4e7c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Stack.HasCallStack&lt;/code&gt; is a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="translated">&lt;code&gt;GHC.Stack.HasCallStack&lt;/code&gt; 은 프로그램의 어느 시점에서나 부분 호출 스택을 얻는 간단한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="03dd505cec7bb9d9c1f6b491b23d69415fd128d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Stack&lt;/code&gt; additionally exports a function &lt;code&gt;withFrozenCallStack&lt;/code&gt; that allows users to freeze the current &lt;code&gt;CallStack&lt;/code&gt;, preventing any future push operations from having an effect. This can be used by library authors to prevent &lt;code&gt;CallStack&lt;/code&gt;s from exposing unnecessary implementation details. Consider the &lt;code&gt;myHead&lt;/code&gt; example above, the &lt;code&gt;errorWithCallStack&lt;/code&gt; line in the printed stack is not particularly enlightening, so we might choose to suppress it by freezing the &lt;code&gt;CallStack&lt;/code&gt; that we pass to &lt;code&gt;errorWithCallStack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GHC.Stack&lt;/code&gt; 은 추가로 사용자가 현재 &lt;code&gt;CallStack&lt;/code&gt; 을 고정시켜 향후 푸시 작업에 영향을 미치지 않도록하는 &lt;code&gt;withFrozenCallStack&lt;/code&gt; 기능을 내 보냅니다 . 라이브러리 작성자가이를 사용하여 &lt;code&gt;CallStack&lt;/code&gt; 이 불필요한 구현 세부 사항을 노출하지 않도록 할 수 있습니다 . 위 의 &lt;code&gt;myHead&lt;/code&gt; 예제를 고려하면 인쇄 된 스택 의 &lt;code&gt;errorWithCallStack&lt;/code&gt; 행이 특별히 밝아지지 않으므로 &lt;code&gt;errorWithCallStack&lt;/code&gt; 에 전달 하는 &lt;code&gt;CallStack&lt;/code&gt; 을 고정 하여 억제하도록 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cacf23bdced212015af63b3a25cbc43c9f95175b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneralisedNewtypeDeriving&lt;/code&gt; &amp;mdash; GND is not allowed in the safe language. This is due to the ability of it to violate module boundaries when module authors forget to put nominal role annotations on their types as appropriate. For this reason, the &lt;code&gt;Data.Coerce&lt;/code&gt; module is also considered unsafe. We are hoping to find a better solution here in the future.</source>
          <target state="translated">&lt;code&gt;GeneralisedNewtypeDeriving&lt;/code&gt; &amp;mdash; 안전한 언어로 GND를 사용할 수 없습니다. 모듈 작성자가 해당 유형에 대한 명목상의 역할 주석을 적절하게 입력하는 것을 잊었을 때 모듈 경계를 위반할 수 있기 때문입니다. 이러한 이유로 &lt;code&gt;Data.Coerce&lt;/code&gt; 모듈도 안전하지 않은 것으로 간주됩니다. 앞으로 더 나은 솔루션을 찾을 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="0c565ee148d058ead79d9d99b67aa40318a498ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Generic1&lt;/code&gt; is used for functions that can only be defined over type containers, such as &lt;code&gt;map&lt;/code&gt;. Note that &lt;code&gt;Generic1&lt;/code&gt; ranges over types of kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; by default, but if the &lt;a href=&quot;#extension-PolyKinds&quot;&gt;&lt;code&gt;PolyKinds&lt;/code&gt;&lt;/a&gt; extension is enabled, then it can range of types of kind &lt;code&gt;k -&amp;gt; Type&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Generic1&lt;/code&gt; 은 &lt;code&gt;map&lt;/code&gt; 과 같은 유형 컨테이너에서만 정의 할 수있는 함수에 사용 됩니다 . 참고 것을 &lt;code&gt;Generic1&lt;/code&gt; 가 가지 유형 이상의 범위 &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; 경우 기본적으로,하지만 &lt;a href=&quot;#extension-PolyKinds&quot;&gt; &lt;code&gt;PolyKinds&lt;/code&gt; 의&lt;/a&gt; 확장이 활성화되어, 다음은 가지 유형의 범위는 &lt;code&gt;k -&amp;gt; Type&lt;/code&gt; , 모든 종류의 &lt;code&gt;k&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a148a88bda531280ce07277c149aeeb8b4a7fa46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_BIOGRAPHY&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hb&quot;&gt;&lt;code&gt;-hb&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_BIOGRAPHY&lt;/code&gt; (출력 &lt;a href=&quot;profiling#rts-flag--hb&quot;&gt; &lt;code&gt;-hb&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="068621d0e0e41ba086128590df0fff41e1584f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_DESCR&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hd&quot;&gt;&lt;code&gt;-hd&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_DESCR&lt;/code&gt; ( &lt;a href=&quot;profiling#rts-flag--hd&quot;&gt; &lt;code&gt;-hd&lt;/code&gt; 의&lt;/a&gt; 출력 )</target>
        </trans-unit>
        <trans-unit id="58a8b71168176994430a3b85d67178e5de6130f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_TYPE&lt;/code&gt; (output from &lt;a href=&quot;runtime_control#rts-flag--hT&quot;&gt;&lt;code&gt;-hT&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_TYPE&lt;/code&gt; (출력 &lt;a href=&quot;runtime_control#rts-flag--hT&quot;&gt; &lt;code&gt;-hT&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="209a144514bd6e95585d78e3e5e19f871cad323d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_COST_CENTER&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt;&lt;code&gt;-hc&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_COST_CENTER&lt;/code&gt; (출력 &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt; &lt;code&gt;-hc&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f451a9f63b51d74a46a9eb64ea0f9b88a970893b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_MODULE&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hm&quot;&gt;&lt;code&gt;-hm&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_MODULE&lt;/code&gt; (출력 &lt;a href=&quot;profiling#rts-flag--hm&quot;&gt; &lt;code&gt;-hm&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ec935e2a6930cb421328847852dc23d457d013d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_RETAINER&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hr&quot;&gt;&lt;code&gt;-hr&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_RETAINER&lt;/code&gt; (출력 &lt;a href=&quot;profiling#rts-flag--hr&quot;&gt; &lt;code&gt;-hr&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ca3e72b620b2d3d0650ba2a97060b270f6baaf16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_TYPE_DESCR&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hy&quot;&gt;&lt;code&gt;-hy&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAP_PROF_BREAKDOWN_TYPE_DESCR&lt;/code&gt; (출력 &lt;a href=&quot;profiling#rts-flag--hy&quot;&gt; &lt;code&gt;-hy&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="d7bc90056af6e8a8f92b1863498736e87ba72e93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Happy&lt;/code&gt; is at its shining best when compiled by GHC.</source>
          <target state="translated">&lt;code&gt;Happy&lt;/code&gt; GHC가 컴파일 할 때 행복 은 최고입니다.</target>
        </trans-unit>
        <trans-unit id="4e7fb99a7c08e34fbbbc2b3dcaabb50bc04ddf4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HardwareFault&lt;/code&gt; A physical I/O error has occurred. &lt;code&gt;[EIO]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HardwareFault&lt;/code&gt; 물리적 I / O 오류가 발생했습니다. &lt;code&gt;[EIO]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6068446cca90eb8d5dbf34bec50409f58be19461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasCallStack&lt;/code&gt; does not interact with the RTS and does not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as the &lt;code&gt;CallStack&lt;/code&gt; is built up explicitly via the &lt;code&gt;HasCallStack&lt;/code&gt; constraints, it will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="translated">&lt;code&gt;HasCallStack&lt;/code&gt; 은 RTS와 상호 작용하지 않으며 &lt;code&gt;-prof&lt;/code&gt; 로 컴파일 할 필요가 없습니다 . 반면에 &lt;code&gt;CallStack&lt;/code&gt; 은 &lt;code&gt;HasCallStack&lt;/code&gt; 제약 조건을 통해 명시 적으로 구축 되므로 일반적으로 RTS가 유지 관리하는 시뮬레이션 된 콜 스택만큼 많은 정보를 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e5d8b1de1f8979e61e56730cc1889a483e11eac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField &quot;foo&quot; (T ...) _&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; has a field &lt;code&gt;foo&lt;/code&gt; (but this instance is permitted if it does not).</source>
          <target state="translated">&lt;code&gt;HasField &quot;foo&quot; (T ...) _&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 필드가 &lt;code&gt;foo&lt;/code&gt; 는 (하지만 그렇지 않은 경우이 인스턴스가 허용됩니다).</target>
        </trans-unit>
        <trans-unit id="5700fafed7e10df4a8c118fcd5e9263f0065a67b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField _ (T ...) _&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a data family (because it might have fields introduced later, using data instance declarations);</source>
          <target state="translated">&lt;code&gt;HasField _ (T ...) _&lt;/code&gt; 경우 &lt;code&gt;T&lt;/code&gt; 는 데이터 가족 (이 필드는 데이터 인스턴스 선언을 사용하여, 나중에 발생했을 수 있기 때문)이다;</target>
        </trans-unit>
        <trans-unit id="5264b03696796236f3d719c78abcae6b3f3f0a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField _ r _&lt;/code&gt; where &lt;code&gt;r&lt;/code&gt; is a variable;</source>
          <target state="translated">&lt;code&gt;HasField _ r _&lt;/code&gt; 여기서 &lt;code&gt;r&lt;/code&gt; 은 변수입니다.</target>
        </trans-unit>
        <trans-unit id="e9c05d6fdac6e1567fec438d0cdab0fc4afb3545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField x (T ...) _&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a variable and &lt;code&gt;T&lt;/code&gt; has any fields at all (but this instance is permitted if &lt;code&gt;T&lt;/code&gt; has no fields);</source>
          <target state="translated">&lt;code&gt;HasField x (T ...) _&lt;/code&gt; 경우 &lt;code&gt;x&lt;/code&gt; 는 변수이고 &lt;code&gt;T&lt;/code&gt; 는 전혀 어떤 필드가 있습니다 (하지만 경우이 인스턴스가 허용되는 &lt;code&gt;T&lt;/code&gt; 이 필드는 없습니다)</target>
        </trans-unit>
        <trans-unit id="7aec9ce990f77203a5be3e65db8c8327be14721f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField&lt;/code&gt; is a magic built-in typeclass (similar to &lt;code&gt;Coercible&lt;/code&gt;, for example). It is given special treatment by the constraint solver (see &lt;a href=&quot;#solving-hasfield-constraints&quot;&gt;Solving HasField constraints&lt;/a&gt;). Users may define their own instances of &lt;code&gt;HasField&lt;/code&gt; also (see &lt;a href=&quot;#virtual-record-fields&quot;&gt;Virtual record fields&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;HasField&lt;/code&gt; 는 매직 내장 타입 클래스입니다 ( 예 : &lt;code&gt;Coercible&lt;/code&gt; 과 유사 ). 구속 조건 솔버에 의해 특별한 처리가 제공됩니다 ( &lt;a href=&quot;#solving-hasfield-constraints&quot;&gt;HasField 제약 조건 해결&lt;/a&gt; 참조 ). 사용자는 자신 만의 &lt;code&gt;HasField&lt;/code&gt; 인스턴스를 정의 할 수도 있습니다 ( &lt;a href=&quot;#virtual-record-fields&quot;&gt;가상 레코드 필드&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="d20e178ee4e7ec8ad37a957ea188f63fe497426d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HoleFitPlugins&lt;/code&gt; are then defined as follows</source>
          <target state="translated">&lt;code&gt;HoleFitPlugins&lt;/code&gt; 은 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="533982614e84625b9b013ab97e717a02d3751315" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HoleFitPlugins&lt;/code&gt; are wrapped in a &lt;code&gt;HoleFitPluginR&lt;/code&gt;, which provides a &lt;code&gt;TcRef&lt;/code&gt; for the plugin to use to track internal state, and to facilitate communication between the candidate and fit plugin.</source>
          <target state="translated">&lt;code&gt;HoleFitPlugins&lt;/code&gt; 는 (A)에 감싸 &lt;code&gt;HoleFitPluginR&lt;/code&gt; 제공 &lt;code&gt;TcRef&lt;/code&gt; 을 내부 상태를 추적하고, 상기 후보 맞추기 플러그 사이의 통신을 용이하게하기 위해 사용하는 플러그인.</target>
        </trans-unit>
        <trans-unit id="dc6cffe526f8b73f4e82196500374e9b8a6444bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INLINE&lt;/code&gt; pragmas are a particularly good idea for the &lt;code&gt;then&lt;/code&gt;/&lt;code&gt;return&lt;/code&gt; (or &lt;code&gt;bind&lt;/code&gt;/&lt;code&gt;unit&lt;/code&gt;) functions in a monad. For example, in GHC&amp;rsquo;s own &lt;code&gt;UniqueSupply&lt;/code&gt; monad code, we have:</source>
          <target state="translated">&lt;code&gt;INLINE&lt;/code&gt; pragma는 모나드에서 &lt;code&gt;then&lt;/code&gt; / &lt;code&gt;return&lt;/code&gt; (또는 &lt;code&gt;bind&lt;/code&gt; / &lt;code&gt;unit&lt;/code&gt; ) 함수에 특히 좋습니다 . 예를 들어 GHC 고유의 &lt;code&gt;UniqueSupply&lt;/code&gt; 모나드 코드에는 다음이 있습니다.</target>
        </trans-unit>
        <trans-unit id="901c047eb44abad4b6a88d748d755034c6f1a34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; arrays with boxed elements</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; 박스형 요소가있는 IO 어레이</target>
        </trans-unit>
        <trans-unit id="42a7b46391e9bb7b64c3bb83e7cfb74f064ef781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; arrays with unboxed elements</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; 박스형 요소가있는 IO 어레이</target>
        </trans-unit>
        <trans-unit id="1bab4139528505f1933a5126ca5e8dad8d6f05a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;atomically&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;atomically&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="379e487bf600ecb8b0dc3c55ed12ff6ecee70812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;atomically&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;atomically&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="e0fe5fae312067423e670caed31b21f21aec8380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newBroadcastTChan&quot;&gt;newBroadcastTChan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newBroadcastTChan&quot;&gt;newBroadcastTChan&lt;/a&gt;&lt;/code&gt; 의 IO 버전 .</target>
        </trans-unit>
        <trans-unit id="8b624f4c489644af79e12b03eb404af311649a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="ea4f0d05d35ce3750a6c2a025173003d7ee8e4b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="9bf20f0a03d2295cf766d6ee202fdb2629a13ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="da9f8cb745e6853c75472a31ab7067ff76e01f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="c2d30910e61968ba33e90093ef732f69e067e626" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="8cebd28d4c93e1df1496cde6e41b72ebde7a7ad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="cf1336f44e50c7b39bebbf08a440daab9c174089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt; 의 IO 버전입니다 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="e714c34e96580f3404158dafccee4018c47a4e7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="3d874a88b64c4df2448eb9e342598edefa0288cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="4a6fecbf37ac802d728b75b399dce7f6cb65a300" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="516f29992eac640bfb59ed6888b6d20b2bbab2db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;ghc-conc#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-conc#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;ghc-conc#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="bceb1c379d548419d109f13f58a3de8d417d8817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt; 의 IO 버전 . 이 최상위 만드는 데 유용 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 사용 &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 을 사용하기 때문에, &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; 내부 &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; 하는 것은 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="1ce0b487e317e9c5b653ea8d945068173ff933f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IOErrorType&lt;/code&gt; predicates</source>
          <target state="translated">&lt;code&gt;IOErrorType&lt;/code&gt; 조건 자</target>
        </trans-unit>
        <trans-unit id="c15b27b6cc7c3faa78681c91847f1fd46e4be27b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImportQualifiedPost&lt;/code&gt; allows the syntax &lt;code&gt;import M qualified&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ImportQualifiedPost&lt;/code&gt; 는 구문 &lt;code&gt;import M qualified&lt;/code&gt; 허용합니다.</target>
        </trans-unit>
        <trans-unit id="e13aa25c95855e50897a4ca7fc4be0bc55141120" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImportQualifiedPost&lt;/code&gt; allows the syntax &lt;code&gt;import M qualified&lt;/code&gt;, that is, to annotate a module as qualified by writing &lt;code&gt;qualified&lt;/code&gt; after the module name.</source>
          <target state="translated">&lt;code&gt;ImportQualifiedPost&lt;/code&gt; 는 구문 있도록 &lt;code&gt;import M qualified&lt;/code&gt; 작성하여 정규화 모듈로서 주석, 인, &lt;code&gt;qualified&lt;/code&gt; 모듈 이름 후.</target>
        </trans-unit>
        <trans-unit id="6ec2892e99b7bf5db3e130e5a59572fb77c0cfde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either path refers to an existing directory. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 경로가 기존 디렉토리를 나타냅니다. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9167ba62b64c56ed3fb570018b11a056ec8c14e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either path refers to an existing non-directory object. &lt;code&gt;[ENOTDIR, EISDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 경로는 기존의 비 디렉토리 객체를 나타냅니다. &lt;code&gt;[ENOTDIR, EISDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fde883260c4267d5fd7e6f9499278487dbc99deb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either the destination path refers to an existing directory, or one of the parent segments in the destination path is not a directory. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 대상 경로가 기존 디렉토리를 참조하거나 대상 경로의 상위 세그먼트 중 하나가 디렉토리가 아닙니다. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19368a400e931bcc5f0723b99aa19e33c6f36db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The operand refers to an existing directory. &lt;code&gt;[EPERM, EINVAL]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 피연산자는 기존 디렉토리를 나타냅니다. &lt;code&gt;[EPERM, EINVAL]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d93edc091d9addc333a574a6fb146b6b670ded1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The operand refers to an existing non-directory object. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 피연산자는 기존의 비 디렉토리 객체를 나타냅니다. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2653bd58a2db75a12dbbb3dfbc2c005ae4a403db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The path refers to an existing non-directory object. &lt;code&gt;[EEXIST]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 경로는 기존의 비 디렉토리 객체를 나타냅니다. &lt;code&gt;[EEXIST]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97c23c3e11cba77cebb16481b8ae3eb81980a2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The path refers to an existing non-directory object. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InappropriateType&lt;/code&gt; 경로는 기존의 비 디렉토리 객체를 나타냅니다. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e316f50b68392c3bf88565809d8d5921608e25e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int#&lt;/code&gt;-boolean valued versions of comparison predicates</source>
          <target state="translated">&lt;code&gt;Int#&lt;/code&gt; 부울 값 버전의 비교 술어</target>
        </trans-unit>
        <trans-unit id="3c5af0835484c93acfce75dd1f0be2a7475a5843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, and &lt;code&gt;Double&lt;/code&gt; arithmetic is &lt;em&gt;unchecked&lt;/em&gt;. Overflows, underflows and loss of precision are either silent or reported as an exception by the operating system (depending on the platform). Divide-by-zero &lt;em&gt;may&lt;/em&gt; cause an untrapped exception (please report it if it does).</source>
          <target state="translated">&lt;code&gt;Int&lt;/code&gt; , &lt;code&gt;Float&lt;/code&gt; 및 &lt;code&gt;Double&lt;/code&gt; 산술은 &lt;em&gt;선택되어&lt;/em&gt; 있지 않습니다 . 오버플로, 언더 플로 및 정밀도 손실은 플랫폼에 따라 운영 체제에서 자동으로 발생하거나 예외로보고됩니다. 0으로 나누면 트랩되지 않은 예외 &lt;em&gt;가&lt;/em&gt; 발생할 &lt;em&gt;수&lt;/em&gt; 있습니다 (그렇다면보고하십시오).</target>
        </trans-unit>
        <trans-unit id="d99bc7e94a1d72caaafed95443b5f36b2617ac42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; Either operand is not a valid directory name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; 피연산자가 유효한 디렉토리 이름이 아닙니다. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96ababa591787c1343e9b7ad0aaab21ce4e69061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; Either operand is not a valid file name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; 피연산자가 유효한 파일 이름이 아닙니다. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9840b1befc0df2612d36488b1b1d4ecccc5f414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; The operand is not a valid directory name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; 피연산자가 유효한 디렉토리 이름이 아닙니다. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f49c8b69035a45d96153fa175c98a2806e9feead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; The operand is not a valid file name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InvalidArgument&lt;/code&gt; 피연산자가 유효한 파일 이름이 아닙니다. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7fd3d7a643641e7914c0691c98647c1656fdbcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ix&lt;/code&gt; is an orphan instance or a multi-parameter-type-class.</source>
          <target state="translated">&lt;code&gt;Ix&lt;/code&gt; 는 고아 인스턴스 또는 다중 매개 변수 유형 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="9bf57a5f62276c3028a14efb3cc961be69551b17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Iy&lt;/code&gt; is not marked &lt;code&gt;OVERLAPPABLE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Iy&lt;/code&gt; 표시되지 &lt;code&gt;OVERLAPPABLE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7de88eab6cd0113c6c7ff7d763258bf2eb18a9bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LANGUAGE&lt;/code&gt; is a file-header pragma (see &lt;a href=&quot;#pragmas&quot;&gt;Pragmas&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;LANGUAGE&lt;/code&gt; 는 파일 헤더 pragma입니다 ( &lt;a href=&quot;#pragmas&quot;&gt;Pragmas&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f076d3164cc7f28be9ed21236444f2fb85c29cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LINE&lt;/code&gt; pragmas generated from Template Haskell set the file and line position for the duration of the splice and are limited to the splice. Note that because Template Haskell splices abstract syntax, the file positions are not automatically advanced.</source>
          <target state="translated">&lt;code&gt;LINE&lt;/code&gt; Template Haskell에서 생성 된 LINE pragma는 스플 라이스 기간 동안 파일과 라인 위치를 설정하며 스플 라이스로 제한됩니다. 템플릿 Haskell은 추상 구문을 결합하기 때문에 파일 위치가 자동으로 향상되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="470d6dd2e7912f4907d0f83a0fcef8239178e8af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MVar&lt;/code&gt;s</source>
          <target state="translated">&lt;code&gt;MVar&lt;/code&gt;s</target>
        </trans-unit>
        <trans-unit id="8e950852064463f2891ce5299025a3f0486b0f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Maybe&lt;/code&gt; wrappers</source>
          <target state="translated">&lt;code&gt;Maybe&lt;/code&gt; 랩퍼</target>
        </trans-unit>
        <trans-unit id="f1847b86db7d48ce524d541637255e35bc38b76a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MkFoo1&lt;/code&gt; and &lt;code&gt;MkFoo2&lt;/code&gt; can be promoted, since their contexts only involve equality-oriented constraints. However, &lt;code&gt;MkFoo3&lt;/code&gt;&amp;lsquo;s context contains a non-equality constraint &lt;code&gt;Show a&lt;/code&gt;, and thus cannot be promoted.</source>
          <target state="translated">&lt;code&gt;MkFoo1&lt;/code&gt; 및 &lt;code&gt;MkFoo2&lt;/code&gt; 는 컨텍스트에 동등 지향 제한 조건 만 포함되므로 승격 될 수 있습니다. 그러나 &lt;code&gt;MkFoo3&lt;/code&gt; 의 컨텍스트에는 동일하지 않은 제약 조건 &lt;code&gt;Show a&lt;/code&gt; 가 포함되어 있으므로 승격 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9f5ee6f833d3b2e9951ec6ab238d8ea1b6fd3579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MkFoo1&lt;/code&gt; and &lt;code&gt;MkFoo2&lt;/code&gt; can be promoted, since their contexts only involve equality-oriented constraints. However, &lt;code&gt;MkFoo3&lt;/code&gt;&amp;rsquo;s context contains a non-equality constraint &lt;code&gt;Show a&lt;/code&gt;, and thus cannot be promoted.</source>
          <target state="translated">&lt;code&gt;MkFoo1&lt;/code&gt; 및 &lt;code&gt;MkFoo2&lt;/code&gt; 는 컨텍스트가 동등성 지향적 제약 만 포함하기 때문에 승격 될 수 있습니다. 그러나 &lt;code&gt;MkFoo3&lt;/code&gt; 의 컨텍스트에는 비동 등 제약 인 &lt;code&gt;Show a&lt;/code&gt; 가 포함되어 있으므로 승격 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3db30a94611388e3ec6f6f7a0d10306ac89b36b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Monoid&lt;/code&gt; typeclass</source>
          <target state="translated">&lt;code&gt;Monoid&lt;/code&gt; 타입 클래스</target>
        </trans-unit>
        <trans-unit id="6ce30fdd32f587a07c3ccd03a7589cbe882b388f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFData&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;NFData&lt;/code&gt; 클래스</target>
        </trans-unit>
        <trans-unit id="ec680a929ede9b766f3bf18664d11ed7399400a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NOTINLINE&lt;/code&gt; is a synonym for &lt;code&gt;NOINLINE&lt;/code&gt; (&lt;code&gt;NOINLINE&lt;/code&gt; is specified by Haskell 98 as the standard way to disable inlining, so it should be used if you want your code to be portable).</source>
          <target state="translated">&lt;code&gt;NOTINLINE&lt;/code&gt; 는 동의어입니다 &lt;code&gt;NOINLINE&lt;/code&gt; ( &lt;code&gt;NOINLINE&lt;/code&gt; 은 그것이 당신이 당신의 코드를 이식 할 경우에 사용되어야하므로, 비활성화 인라인에 대한 표준 방법으로 하스켈 (98)에 의해 지정됩니다).</target>
        </trans-unit>
        <trans-unit id="d2cb5297978bdd0d73f9920f2cb94ca4e2c109d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NominalDiffTime&lt;/code&gt; and &lt;code&gt;DiffTime&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;NominalDiffTime&lt;/code&gt; 및 &lt;code&gt;DiffTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c84f1d4a4b497e7078e729e86506cddd7bfb2b75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Num&lt;/code&gt; instance, and</source>
          <target state="translated">&lt;code&gt;Num&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="45c396e63bd9c44eeb55cdefadb405ee01a84408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Num&lt;/code&gt; wrappers</source>
          <target state="translated">&lt;code&gt;Num&lt;/code&gt; 래퍼</target>
        </trans-unit>
        <trans-unit id="339e7f1c84a18e65c7b455719bba422a3d544601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS_GHC&lt;/code&gt; is a &lt;em&gt;file-header pragma&lt;/em&gt; (see &lt;a href=&quot;glasgow_exts#options-pragma&quot;&gt;OPTIONS_GHC pragma&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;OPTIONS_GHC&lt;/code&gt; 는 &lt;em&gt;파일 헤더 프라 그마입니다&lt;/em&gt; ( &lt;a href=&quot;glasgow_exts#options-pragma&quot;&gt;OPTIONS_GHC pragma&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e59fff9df8173d07867cecfecb2c5ff2512242c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS_GHC&lt;/code&gt; is a file-header pragma (see &lt;a href=&quot;#pragmas&quot;&gt;Pragmas&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;OPTIONS_GHC&lt;/code&gt; 은 파일 헤더 프라그이다 (참조 &lt;a href=&quot;#pragmas&quot;&gt;하는 pragma를&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="7765f78f62ac1e9afb8eb0f2da33f6f7ea4ee12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OverlappingInstances&lt;/code&gt; &amp;mdash; There is no restriction on the creation of overlapping instances, but we do restrict their use at a particular call site. This is a detailed restriction, please refer to &lt;a href=&quot;#safe-overlapping-instances&quot;&gt;Safe Overlapping Instances&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;OverlappingInstances&lt;/code&gt; &amp;mdash; 중복 인스턴스 생성에는 제한이 없지만 특정 콜 사이트에서 사용을 제한합니다. 자세한 제한 사항은 자세한 내용은 &lt;a href=&quot;#safe-overlapping-instances&quot;&gt;안전한 겹치는 인스턴스&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="36255b2fbbb41ed1d004bec3abd13a6f6d816e9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParsecT s u m a&lt;/code&gt; is a parser with stream type &lt;code&gt;s&lt;/code&gt;, user state type &lt;code&gt;u&lt;/code&gt;, underlying monad &lt;code&gt;m&lt;/code&gt; and return type &lt;code&gt;a&lt;/code&gt;. Parsec is strict in the user state. If this is undesirable, simply use a data type like &lt;code&gt;data Box a = Box a&lt;/code&gt; and the state type &lt;code&gt;Box YourStateType&lt;/code&gt; to add a level of indirection.</source>
          <target state="translated">&lt;code&gt;ParsecT s u m a&lt;/code&gt; 는 스트림 유형 &lt;code&gt;s&lt;/code&gt; , 사용자 상태 유형 &lt;code&gt;u&lt;/code&gt; , 기본 모나드 &lt;code&gt;m&lt;/code&gt; 및 리턴 유형 &lt;code&gt;a&lt;/code&gt; 를 가진 파서입니다 . Parsec은 사용자 상태에서 엄격합니다. 이것이 바람직하지 않은 경우, 간단히 &lt;code&gt;data Box a = Box a&lt;/code&gt; 및 State Type &lt;code&gt;Box YourStateType&lt;/code&gt; 과 같은 데이터 유형을 사용하여 간접적 인 수준을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="fb6af7ff9bda841f09ba07d97347830184d0f8f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Plugin&lt;/code&gt; exports a field, &lt;code&gt;installCoreToDos&lt;/code&gt; which is a function of type &lt;code&gt;[CommandLineOption] -&amp;gt; [CoreToDo] -&amp;gt; CoreM [CoreToDo]&lt;/code&gt;. A &lt;code&gt;CommandLineOption&lt;/code&gt; is effectively just &lt;code&gt;String&lt;/code&gt;, and a &lt;code&gt;CoreToDo&lt;/code&gt; is basically a function of type &lt;code&gt;Core -&amp;gt; Core&lt;/code&gt;. A &lt;code&gt;CoreToDo&lt;/code&gt; gives your pass a name and runs it over every compiled module when you invoke GHC.</source>
          <target state="translated">&lt;code&gt;Plugin&lt;/code&gt; 은 &lt;code&gt;[CommandLineOption] -&amp;gt; [CoreToDo] -&amp;gt; CoreM [CoreToDo]&lt;/code&gt; 유형의 함수 인 &lt;code&gt;installCoreToDos&lt;/code&gt; 필드를 내 보냅니다 . &lt;code&gt;CommandLineOption&lt;/code&gt; 는 효과적으로 그냥 &lt;code&gt;String&lt;/code&gt; , 그리고 &lt;code&gt;CoreToDo&lt;/code&gt; 은 기본적 유형의 함수 &lt;code&gt;Core -&amp;gt; Core&lt;/code&gt; . &lt;code&gt;CoreToDo&lt;/code&gt; 는 이름 패스를 제공하고 당신을 GHC 호출마다 컴파일 된 모듈에 그것을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="67d3d0e89234b63e36a3e1abd25e28e36aa4ba6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prelude&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;Prelude&lt;/code&gt; 그렇지 않으면 전주곡 .</target>
        </trans-unit>
        <trans-unit id="d7a373f7633c479789271c23e1b1277df47fb78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PyYmMdD&lt;/code&gt; (ISO 8601:2004(E) sec. 4.4.3.2)</source>
          <target state="translated">&lt;code&gt;PyYmMdD&lt;/code&gt; (ISO 8601 : 2004 (E) 초 4.4.3.2)</target>
        </trans-unit>
        <trans-unit id="42b6f33dd8dd2f78ec60b0d48abb85f162e0cb84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PyYmMdDThHmMs[.sss]S&lt;/code&gt; (ISO 8601:2004(E) sec. 4.4.3.2)</source>
          <target state="translated">&lt;code&gt;PyYmMdDThHmMs[.sss]S&lt;/code&gt; (ISO 8601 : 2004 (E) 초 4.4.3.2)</target>
        </trans-unit>
        <trans-unit id="961ff89792e76bad1270d0352029c98a7f2504d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RULES&lt;/code&gt; &amp;mdash; Rewrite rules defined in a module M compiled with &lt;a href=&quot;#extension-Safe&quot;&gt;&lt;code&gt;Safe&lt;/code&gt;&lt;/a&gt; are dropped. Rules defined in Trustworthy modules that &lt;code&gt;M&lt;/code&gt; imports are still valid and will fire as usual.</source>
          <target state="translated">&lt;code&gt;RULES&lt;/code&gt; &amp;mdash; &lt;a href=&quot;#extension-Safe&quot;&gt; &lt;code&gt;Safe&lt;/code&gt; &lt;/a&gt; 로 컴파일 된 모듈 M에 정의 된 다시 쓰기 규칙 이 삭제됩니다. &lt;code&gt;M&lt;/code&gt; 이 가져 오는 신뢰할 수있는 모듈에 정의 된 규칙 은 여전히 ​​유효하며 평소처럼 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="f68ff9c1328c6499c92ab6bc0d005a077e93ba0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reader&lt;/code&gt; to run in the modified environment.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 수정 된 환경에서 실행할 리더 입니다.</target>
        </trans-unit>
        <trans-unit id="150747c346cb4043728e6aeb094f71c729c4ff44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RealWorld&lt;/code&gt; is deeply magical. It is &lt;em&gt;primitive&lt;/em&gt;, but it is not &lt;em&gt;unlifted&lt;/em&gt; (hence &lt;code&gt;ptrArg&lt;/code&gt;). We never manipulate values of type &lt;code&gt;RealWorld&lt;/code&gt;; it's only used in the type system, to parameterise &lt;code&gt;State#&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RealWorld&lt;/code&gt; 는 매우 마법입니다. 그것은 인 &lt;em&gt;프리미티브&lt;/em&gt; 하지만되지 &lt;em&gt;unlifted&lt;/em&gt; (따라서 &lt;code&gt;ptrArg&lt;/code&gt; 을 ). &lt;code&gt;RealWorld&lt;/code&gt; 유형의 값을 조작하지 않습니다 . &lt;code&gt;State#&lt;/code&gt; 시스템을 매개 변수화하기 위해 유형 시스템에서만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="17d8e5b60e541c9708c36f2eb66acc458855d367" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScopedTypeVariables&lt;/code&gt; breaks GHC&amp;rsquo;s usual rule that explicit &lt;code&gt;forall&lt;/code&gt; is optional and doesn&amp;rsquo;t affect semantics. For the &lt;a href=&quot;#decl-type-sigs&quot;&gt;Declaration type signatures&lt;/a&gt; (or &lt;a href=&quot;#exp-type-sigs&quot;&gt;Expression type signatures&lt;/a&gt;) examples in this section, the explicit &lt;code&gt;forall&lt;/code&gt; is required. (If omitted, usually the program will not compile; in a few cases it will compile but the functions get a different signature.) To trigger those forms of &lt;code&gt;ScopedTypeVariables&lt;/code&gt;, the &lt;code&gt;forall&lt;/code&gt; must appear against the top-level signature (or outer expression) but &lt;em&gt;not&lt;/em&gt; against nested signatures referring to the same type variables.</source>
          <target state="translated">&lt;code&gt;ScopedTypeVariables&lt;/code&gt; 는 명시 적 &lt;code&gt;forall&lt;/code&gt; 이 선택적이며 의미에 영향을 미치지 않는다는 GHC의 일반적인 규칙을 위반합니다 . 이 섹션 의 &lt;a href=&quot;#decl-type-sigs&quot;&gt;선언 유형 서명&lt;/a&gt; (또는 &lt;a href=&quot;#exp-type-sigs&quot;&gt;표현식 유형 서명&lt;/a&gt; ) 예제의 경우 명시 적 &lt;code&gt;forall&lt;/code&gt; 이 필요합니다. (생략하면, 일반적으로 프로그램이 컴파일되지 않을 것이다. 몇 가지 경우에 컴파일되지만 기능은 다른 서명을받을)의 그 형태 트리거하려면 &lt;code&gt;ScopedTypeVariables&lt;/code&gt; 을 의 &lt;code&gt;forall&lt;/code&gt; 최상위 서명 (또는 외부 식)에 대해 표시해야하지만 동일한 유형 변수를 참조하는 중첩 된 서명에 반대 &lt;em&gt;하지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5e8546de8393043d85df6466b8334ea2602c27fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Show&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; instances, and</source>
          <target state="translated">&lt;code&gt;Show&lt;/code&gt; 및 &lt;code&gt;Eq&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="b045de224343a1c387b5019818791a2694ab3cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State#&lt;/code&gt; is the primitive, unlifted type of states. It has one type parameter, thus &lt;code&gt;State# RealWorld&lt;/code&gt;, or &lt;code&gt;State# s&lt;/code&gt;, where s is a type variable. The only purpose of the type parameter is to keep different state threads separate. It is represented by nothing at all.</source>
          <target state="translated">&lt;code&gt;State#&lt;/code&gt; 는 기본적이고 해제되지 않은 상태 유형입니다. 여기에는 s가 유형 변수 인 하나의 유형 매개 변수, 즉 &lt;code&gt;State# RealWorld&lt;/code&gt; 또는 &lt;code&gt;State# s&lt;/code&gt; s가 있습니다. type 매개 변수의 유일한 목적은 다른 상태 스레드를 별도로 유지하는 것입니다. 그것은 전혀 아무것도 나타내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d953c49248db1d20798dbfecf150b0ea4f7ce454" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strict&lt;/code&gt; and &lt;code&gt;StrictData&lt;/code&gt; only affects definitions in the module they are used in. Functions and data types imported from other modules are unaffected. For example, we won&amp;rsquo;t evaluate the argument to &lt;code&gt;Just&lt;/code&gt; before applying the constructor. Similarly we won&amp;rsquo;t evaluate the first argument to &lt;code&gt;Data.Map.findWithDefault&lt;/code&gt; before applying the function.</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; 및 &lt;code&gt;StrictData&lt;/code&gt; 는 사용 된 모듈의 정의에만 영향을줍니다. 다른 모듈에서 가져온 함수 및 데이터 유형에는 영향을 미치지 않습니다. 예를 들어, 생성자를 적용 하기 &lt;code&gt;Just&lt;/code&gt; 인수를 평가하지 않습니다 . 마찬가지로 함수를 적용하기 전에 &lt;code&gt;Data.Map.findWithDefault&lt;/code&gt; 에 대한 첫 번째 인수를 평가하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="691f5268bc97c136ef0fd5624b38ea2322b13642" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strict&lt;/code&gt; implies &lt;a href=&quot;#strict-data&quot;&gt;StrictData&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; 는&lt;a href=&quot;#strict-data&quot;&gt;StrictData를&lt;/a&gt; 의미 합니다 .</target>
        </trans-unit>
        <trans-unit id="3ab68fe30de1834c2407e7d2cc3e965d8327927b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Biography filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 전기 필터</target>
        </trans-unit>
        <trans-unit id="ac96b5031b77df4e051a07a8628edebd8d8b9bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Closure description filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 폐쇄 설명 필터</target>
        </trans-unit>
        <trans-unit id="828827c4a462555cbd27487175c17eb5af20e685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Cost centre filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 코스트 센터 필터</target>
        </trans-unit>
        <trans-unit id="dd397d881f95605a8a1624c0c1e46541c77ed119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Cost centre stack filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 코스트 센터 스택 필터</target>
        </trans-unit>
        <trans-unit id="766256d50228d727faf935a0f569e1ea819a4474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Module filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 모듈 필터</target>
        </trans-unit>
        <trans-unit id="ad54b46a3384c1f6d54893db00cf8b346306d510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Retainer filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 리테이너 필터</target>
        </trans-unit>
        <trans-unit id="c65175f99eb3eb09144f63eeba4ed2896107f996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Type description filter</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 유형 설명 필터</target>
        </trans-unit>
        <trans-unit id="35e6ada374a8716af991f1b75981c04e5ec1447a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: label</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 라벨</target>
        </trans-unit>
        <trans-unit id="fe2014b1e5fbc9dfd7f95e8a5e6c5b90d10ec94b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: module</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 모듈</target>
        </trans-unit>
        <trans-unit id="9cce2ee62be918d933789d987c72075e686fd01f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: source location</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 소스 위치</target>
        </trans-unit>
        <trans-unit id="cbeeb8eae0e3e79bc5d61d9b5f58ef4cd5fe08ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: type or closure description, or module name</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : 유형 또는 클로저 설명 또는 모듈 이름</target>
        </trans-unit>
        <trans-unit id="593aedd04957fecb0ecd4a0d1682f6ecef4e48ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TemplateHaskell&lt;/code&gt; &amp;mdash; Can be used to gain access to constructors and abstract data types that weren&amp;rsquo;t exported by a module, subverting module boundaries.</source>
          <target state="translated">&lt;code&gt;TemplateHaskell&lt;/code&gt; &amp;mdash; 모듈이 내 보내지 않은 생성자와 추상 데이터 형식에 액세스하여 모듈 경계를 파괴하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a239272fe0fbb6f9e56ba6d7932a7c3e4ef6a90e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Typeable&lt;/code&gt; is kind-polymorphic (see &lt;a href=&quot;#kind-polymorphism&quot;&gt;Kind polymorphism&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;Typeable&lt;/code&gt; 것은 다형성입니다 ( &lt;a href=&quot;#kind-polymorphism&quot;&gt;종류 다형성&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="52040b4bac337720bdaeb27d72d21766b604d15d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTCTime&lt;/code&gt; and &lt;code&gt;ZonedTime&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UTCTime&lt;/code&gt; 및 &lt;code&gt;ZonedTime&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d6bf75fee53246b618432df56bf7f00bae7355c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-16&lt;/code&gt;, &lt;code&gt;UTF-16BE&lt;/code&gt;, &lt;code&gt;UTF-16LE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; , &lt;code&gt;UTF-16BE&lt;/code&gt; , &lt;code&gt;UTF-16LE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="83582f01952008dd81c27fec6422bc954d9d5f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-32&lt;/code&gt;, &lt;code&gt;UTF-32BE&lt;/code&gt;, &lt;code&gt;UTF-32LE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UTF-32&lt;/code&gt; , &lt;code&gt;UTF-32BE&lt;/code&gt; , &lt;code&gt;UTF-32LE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b54c2f57fb807de8cc0df62106b648136974182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; Implementation-dependent constraints are not satisfied. &lt;code&gt;[EBUSY, ENOTEMPTY, EEXIST]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; 구현에 의존하는 제약 조건을 만족하지 않습니다. &lt;code&gt;[EBUSY, ENOTEMPTY, EEXIST]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da250b3804989b0a72671f1b86ef79968ebb5238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; Implementation-dependent constraints are not satisfied. &lt;code&gt;[EBUSY]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; 구현에 의존하는 제약 조건을 만족하지 않습니다. &lt;code&gt;[EBUSY]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0660b241338bccd2fb6cd29b6bb53ab9cc39c5c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support removal in this situation. &lt;code&gt;[EINVAL]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 구현은이 상황에서 제거를 지원하지 않습니다. &lt;code&gt;[EINVAL]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d46558055619c14ce6a83bcc00dd667c816ea08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support renaming in this situation. &lt;code&gt;[EINVAL, EXDEV]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 구현은이 상황에서 이름 바꾸기를 지원하지 않습니다. &lt;code&gt;[EINVAL, EXDEV]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6dc475e868fb74e8ba3bdab39d0aff97dc8489c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support renaming in this situation. &lt;code&gt;[EXDEV]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 구현은이 상황에서 이름 바꾸기를 지원하지 않습니다. &lt;code&gt;[EXDEV]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9545512e2aded1a5123c575c06b5c671197e8add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of application-specific data directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 운영 체제에 응용 프로그램 별 데이터 디렉토리 개념이 없습니다.</target>
        </trans-unit>
        <trans-unit id="9af063b48cb70612c9e31e94606b9d63a49558b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of current working directory, or the working directory cannot be dynamically changed.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 운영 체제에 현재 작업 디렉토리에 대한 개념이 없거나 작업 디렉토리를 동적으로 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f2d2661856a3cd03506f48fe4735aa425a9e11e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of current working directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 운영 체제에 현재 작업 디렉토리 개념이 없습니다.</target>
        </trans-unit>
        <trans-unit id="de72e737e54be81258b64fb7ba3aff517fab9709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of document directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 운영 체제에 문서 디렉토리 개념이 없습니다.</target>
        </trans-unit>
        <trans-unit id="f20d062d31428763adab8d45ff072cb7e3756899" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of home directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 운영 체제에 홈 디렉토리 개념이 없습니다.</target>
        </trans-unit>
        <trans-unit id="db45167ed4c480f8e5ee5133b810c044467b5f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of temporary directory.</source>
          <target state="translated">&lt;code&gt;UnsupportedOperation&lt;/code&gt; 운영 체제에 임시 디렉토리 개념이 없습니다.</target>
        </trans-unit>
        <trans-unit id="6d187643c9b7dbe49cc293ea82ff2dfa5448a074" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhenMatched&lt;/code&gt; tactics</source>
          <target state="translated">&lt;code&gt;WhenMatched&lt;/code&gt; 전술</target>
        </trans-unit>
        <trans-unit id="159616400a692c69b068d46bd4c970d467315dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhenMissing&lt;/code&gt; tactics</source>
          <target state="translated">&lt;code&gt;WhenMissing&lt;/code&gt; 전술</target>
        </trans-unit>
        <trans-unit id="e1e8c1ea96c98074e49f8099c1ba8333765ef6b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word32&lt;/code&gt;: Sample break-down type. One of,</source>
          <target state="translated">&lt;code&gt;Word32&lt;/code&gt; : 샘플 분류 유형. 중 하나</target>
        </trans-unit>
        <trans-unit id="e974cf0cf18bc7a75aada6d6fbad1643ca335886" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word32&lt;/code&gt;: cost centre number</source>
          <target state="translated">&lt;code&gt;Word32&lt;/code&gt; : 코스트 센터 번호</target>
        </trans-unit>
        <trans-unit id="5f4ada9410b62496b425a16307d467f11f28d2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word32[]&lt;/code&gt;: cost centre stack starting with inner-most (cost centre numbers)</source>
          <target state="translated">&lt;code&gt;Word32[]&lt;/code&gt; : 가장 안쪽부터 시작하는 코스트 센터 스택 (코스트 센터 번호)</target>
        </trans-unit>
        <trans-unit id="a7e547fe5072b36274cbe18086fdc1cef3c94170" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word64&lt;/code&gt;: Sampling period in nanoseconds</source>
          <target state="translated">&lt;code&gt;Word64&lt;/code&gt; : 나노초 단위의 샘플링 기간</target>
        </trans-unit>
        <trans-unit id="655461f866e8dcf7a719b29ca9eae06d41cc16f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word64&lt;/code&gt;: heap residency in bytes</source>
          <target state="translated">&lt;code&gt;Word64&lt;/code&gt; : 바이트 단위의 힙 상주</target>
        </trans-unit>
        <trans-unit id="57c4bf76d18b8d73b8885944b2c3aba87800835e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word64&lt;/code&gt;: sample number</source>
          <target state="translated">&lt;code&gt;Word64&lt;/code&gt; : 샘플 번호</target>
        </trans-unit>
        <trans-unit id="8c1b5641770bd3fd50e280d95a8774029f41ec91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word8&lt;/code&gt;: Profile ID</source>
          <target state="translated">&lt;code&gt;Word8&lt;/code&gt; : 프로필 ID</target>
        </trans-unit>
        <trans-unit id="74a3555d86cd073ebeb3b493a6db6382cf95b8cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word8&lt;/code&gt;: flags</source>
          <target state="translated">&lt;code&gt;Word8&lt;/code&gt; : 깃발</target>
        </trans-unit>
        <trans-unit id="5f5c8012178da4dfb98e24b91a15275dc83f0cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Word8&lt;/code&gt;: stack depth</source>
          <target state="translated">&lt;code&gt;Word8&lt;/code&gt; : 스택 깊이</target>
        </trans-unit>
        <trans-unit id="3c0de180396ecebd5a0cc21d0d8efc7bd303c02c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[d| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is a list of top-level declarations; the quotation has type &lt;code&gt;Q [Dec]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[d| ... |]&lt;/code&gt; , 여기서&amp;ldquo;&amp;hellip;&amp;rdquo;은 최상위 선언 목록입니다. 견적의 유형은 &lt;code&gt;Q [Dec]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d6dbcfd4aff3d285d540a23f09e537c93ce97438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[d| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a list of top-level declarations; the quotation has type &lt;code&gt;Q [Dec]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[d| ... |]&lt;/code&gt; , 여기서 &quot;...&quot;은 최상위 선언 목록입니다. 견적에는 &lt;code&gt;Q [Dec]&lt;/code&gt; 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1376f4269d1a1b13c9bee1537886b55bc5e97ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[p| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is a pattern; the quotation has type &lt;code&gt;Q Pat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[p| ... |]&lt;/code&gt; , 여기서&amp;ldquo;&amp;hellip;&amp;rdquo;은 패턴입니다. 견적의 유형은 &lt;code&gt;Q Pat&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dc1e911488d0253fbdf7543f136d38edfc246336" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[p| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a pattern; the quotation has type &lt;code&gt;Q Pat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[p| ... |]&lt;/code&gt; , 여기서 &quot;...&quot;는 패턴입니다. 견적에는 &lt;code&gt;Q Pat&lt;/code&gt; 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4733a2580f30b50f050ebbd7f025ec21e698c97f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[t| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is a type; the quotation has type &lt;code&gt;Q Type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[t| ... |]&lt;/code&gt; , 여기서&amp;ldquo;&amp;hellip;&amp;rdquo;은 유형입니다. 견적의 유형은 &lt;code&gt;Q Type&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2025e48e0db384fd506f6cfd601352a1e0460961" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[t| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a type; the quotation has type &lt;code&gt;Q Type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[t| ... |]&lt;/code&gt; , 여기서 &quot;...&quot;는 유형입니다. 견적 유형은 &lt;code&gt;Q Type&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8f40b2c7c94c5e2a59a4dc6260ed1675d91eea1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[varid| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is an arbitrary string; a full description of the quasi-quotation facility is given in &lt;a href=&quot;#th-quasiquotation&quot;&gt;Template Haskell Quasi-quotation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;[varid| ... |]&lt;/code&gt; , 여기서&amp;ldquo;&amp;hellip;&amp;rdquo;은 임의의 문자열입니다. 유사 인용 기능에 대한 전체 설명은 &lt;a href=&quot;#th-quasiquotation&quot;&gt;Template Haskell Quasi-quotation에서 제공&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="27f1a9cdc8c400f772fa51edfe8a34908baf7581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[varid| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an arbitrary string; a full description of the quasi-quotation facility is given in &lt;a href=&quot;#th-quasiquotation&quot;&gt;Template Haskell Quasi-quotation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;[varid| ... |]&lt;/code&gt; , 여기서 &quot;...&quot;는 임의의 문자열입니다. 유사 인용 기능에 대한 자세한 설명은 &lt;a href=&quot;#th-quasiquotation&quot;&gt;Template Haskell Quasi-quotation에 나와&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="30ab6f1a47eb9bba8ed335ad0c82c4a9273a314e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[| ... |]&lt;/code&gt;, or &lt;code&gt;[e| ... |]&lt;/code&gt;, where the &amp;ldquo;&amp;hellip;&amp;rdquo; is an expression; the quotation has type &lt;code&gt;Q Exp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[| ... |]&lt;/code&gt; 또는 &lt;code&gt;[e| ... |]&lt;/code&gt; , 여기서&amp;ldquo;&amp;hellip;&amp;rdquo;은 표현식입니다. 견적의 유형은 &lt;code&gt;Q Exp&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0447e54062d56fc83577942673bc23adc6a785d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[| ... |]&lt;/code&gt;, or &lt;code&gt;[e| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an expression; the quotation has type &lt;code&gt;Q Exp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[| ... |]&lt;/code&gt; 또는 &lt;code&gt;[e| ... |]&lt;/code&gt; , 여기서 &quot;...&quot;는 표현식입니다. 견적에는 &lt;code&gt;Q Exp&lt;/code&gt; 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2eb1f60931044aab8e92659cfcd1fa7dd4353883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a * (b + c)&lt;/code&gt; = &lt;code&gt;(a * b) + (a * c)&lt;/code&gt; and &lt;code&gt;(b + c) * a&lt;/code&gt; = &lt;code&gt;(b * a) + (c * a)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a * (b + c)&lt;/code&gt; = &lt;code&gt;(a * b) + (a * c)&lt;/code&gt; 및 &lt;code&gt;(b + c) * a&lt;/code&gt; = &lt;code&gt;(b * a) + (c * a)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7186a6c673d735648990c73c641adbe3bdd3474f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; &amp;mdash; enable all event classes listed above</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; &amp;mdash; 위에 나열된 모든 이벤트 클래스를 활성화합니다</target>
        </trans-unit>
        <trans-unit id="149cba18745043c4326ac22f19718f7a6d529cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; must appear after &lt;code&gt;k&lt;/code&gt; in the declaration, and</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 선언에서 &lt;code&gt;k&lt;/code&gt; 뒤에 a 가 나타나야합니다.</target>
        </trans-unit>
        <trans-unit id="6dd7f136797a73d97f172726782cf449cc821102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accum f&lt;/code&gt; takes an array and an association list and accumulates pairs from the list into the array with the accumulating function &lt;code&gt;f&lt;/code&gt;. Thus &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; can be defined using &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accum&quot;&gt;accum&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;accum f&lt;/code&gt; 는 배열과 연관 목록을 가져 와서 누적 함수 &lt;code&gt;f&lt;/code&gt; 를 사용하여 목록에서 배열로 쌍을 누적합니다 . 따라서 &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accum&quot;&gt;accum&lt;/a&gt;&lt;/code&gt; 을 사용하여 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bc2d0019a6be9362d0d370987d97b795ac5b5928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accum&lt;/code&gt; is strict in all the results of applying the accumulation. However, it is lazy in the initial values of the array.</source>
          <target state="translated">&lt;code&gt;accum&lt;/code&gt; 은 누적을 적용한 모든 결과에서 엄격합니다. 그러나 배열의 초기 값에서는 게으르다.</target>
        </trans-unit>
        <trans-unit id="92c3c436ea0e922399fff00f11ab69e17acf33e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accumArray&lt;/code&gt; is strict in each result of applying the accumulating function, although it is lazy in the initial value. Thus, unlike arrays built with &lt;code&gt;&lt;a href=&quot;data-array#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, accumulated arrays should not in general be recursive.</source>
          <target state="translated">&lt;code&gt;accumArray&lt;/code&gt; 는 초기 값이 게으르지 만 누적 함수를 적용한 각 결과에서 엄격합니다. 따라서 array로 빌드 된 &lt;code&gt;&lt;a href=&quot;data-array#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; 과 달리 누적 배열은 일반적으로 재귀 적이 어서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="83233de3ba4aa8ca11ffaf932deec605d107e1a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accumArray&lt;/code&gt; is strict in each result of applying the accumulating function, although it is lazy in the initial value. Thus, unlike arrays built with &lt;code&gt;&lt;a href=&quot;ghc-arr#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, accumulated arrays should not in general be recursive.</source>
          <target state="translated">&lt;code&gt;accumArray&lt;/code&gt; 는 초기 값이 게으르지 만 누적 함수를 적용한 각 결과에서 엄격합니다. 따라서 array로 빌드 된 &lt;code&gt;&lt;a href=&quot;ghc-arr#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; 과 달리 누적 배열은 일반적으로 재귀 적이 어서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="9923105636c6caa73cb09df905df6a129e309eff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addCFinalizerToWeak# fptr ptr flag eptr w&lt;/code&gt; attaches a C function pointer &lt;code&gt;fptr&lt;/code&gt; to a weak pointer &lt;code&gt;w&lt;/code&gt; as a finalizer. If &lt;code&gt;flag&lt;/code&gt; is zero, &lt;code&gt;fptr&lt;/code&gt; will be called with one argument, &lt;code&gt;ptr&lt;/code&gt;. Otherwise, it will be called with two arguments, &lt;code&gt;eptr&lt;/code&gt; and &lt;code&gt;ptr&lt;/code&gt;. &lt;code&gt;addCFinalizerToWeak#&lt;/code&gt; returns 1 on success, or 0 if &lt;code&gt;w&lt;/code&gt; is already dead.</source>
          <target state="translated">&lt;code&gt;addCFinalizerToWeak# fptr ptr flag eptr w&lt;/code&gt; 는 C 함수 포인터 &lt;code&gt;fptr&lt;/code&gt; 을 약한 포인터 &lt;code&gt;w&lt;/code&gt; 에 종료 자로 연결합니다. 경우 &lt;code&gt;flag&lt;/code&gt; 제로, &lt;code&gt;fptr&lt;/code&gt; 는 하나 개의 인수로 호출됩니다 &lt;code&gt;ptr&lt;/code&gt; . 그렇지 않으면 &lt;code&gt;eptr&lt;/code&gt; 과 &lt;code&gt;ptr&lt;/code&gt; 두 개의 인수로 호출됩니다 . &lt;code&gt;addCFinalizerToWeak#&lt;/code&gt; 는 성공하면 1을, &lt;code&gt;w&lt;/code&gt; 가 이미 죽은 경우 0을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3f49149e870aea23ae76be6e895338577892e46f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addCorePlugin m&lt;/code&gt; has almost the same effect as passing &lt;code&gt;-fplugin=m&lt;/code&gt; to ghc in the command line. The major difference is that the plugin module &lt;code&gt;m&lt;/code&gt; must not belong to the current package. When TH executes, it is too late to tell the compiler that we needed to compile first a plugin module in the current package.</source>
          <target state="translated">&lt;code&gt;addCorePlugin m&lt;/code&gt; 은 명령 행에서 &lt;code&gt;-fplugin=m&lt;/code&gt; 을 ghc에 전달하는 것과 거의 동일한 효과를 갖 습니다. 가장 큰 차이점은 플러그인 모듈 &lt;code&gt;m&lt;/code&gt; 이 현재 패키지에 속하지 않아야한다는 것입니다. TH가 실행될 때 컴파일러에게 현재 패키지에서 플러그인 모듈을 먼저 컴파일해야한다고 말하기에는 너무 늦습니다.</target>
        </trans-unit>
        <trans-unit id="d279010765e6e6b900a3896b2e19ea792336d687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;any&lt;/code&gt; , &lt;code&gt;all&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51f41197b390a7a1589583f2062f9ff7711a6864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyclass&lt;/code&gt;: Use &lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#derive-any-class&quot;&gt;Deriving any other class&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;anyclass&lt;/code&gt; : 사용 &lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt; &lt;code&gt;DeriveAnyClass&lt;/code&gt; 는&lt;/a&gt; (참조 &lt;a href=&quot;#derive-any-class&quot;&gt;다른 클래스를 파생&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5b4c5b8b1d0fbe5510c268591ea1736245a43d72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg1 `Name` arg2&lt;/code&gt; or &lt;code&gt;arg1 op arg2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arg1 `Name` arg2&lt;/code&gt; 또는 &lt;code&gt;arg1 op arg2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7aaf19cc340c9cf99a449248ea81553e1e61e914" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arithSeqE&lt;/code&gt; Shortcuts</source>
          <target state="translated">&lt;code&gt;arithSeqE&lt;/code&gt; 바로 가기</target>
        </trans-unit>
        <trans-unit id="41adaeb06038cb0ab2e6d98a6ec1c7cd61ee8445" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; (on its second argument)</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; (두 번째 인수)</target>
        </trans-unit>
        <trans-unit id="77ec368c080e175a9a031ae9ab42188f68c395a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoAddHistory&lt;/code&gt;: add nonblank lines to the command history (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; by default).</source>
          <target state="translated">&lt;code&gt;autoAddHistory&lt;/code&gt; : 명령 기록에 공백이 아닌 행을 추가합니다 ( 기본적으로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="dfdb0f8dc66ababee0bfcfeccddd70afba3e3f40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awaitSignal iset&lt;/code&gt; suspends execution until an interrupt is received. If &lt;code&gt;iset&lt;/code&gt; is &lt;code&gt;Just s&lt;/code&gt;, &lt;code&gt;awaitSignal&lt;/code&gt; calls &lt;code&gt;sigsuspend&lt;/code&gt;, installing &lt;code&gt;s&lt;/code&gt; as the new signal mask before suspending execution; otherwise, it calls &lt;code&gt;sigsuspend&lt;/code&gt; with current signal mask. Note that RTS scheduler signal (either &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:virtualTimerExpired&quot;&gt;virtualTimerExpired&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:realTimeAlarm&quot;&gt;realTimeAlarm&lt;/a&gt;&lt;/code&gt;) could cause premature termination of this call. It might be necessary to block that signal before invocation of &lt;code&gt;awaitSignal&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:blockSignals&quot;&gt;blockSignals&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;system-posix-signals#v:reservedSignals&quot;&gt;reservedSignals&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;awaitSignal iset&lt;/code&gt; 은 인터럽트가 수신 될 때까지 실행을 일시 중단합니다. 경우 &lt;code&gt;iset&lt;/code&gt; 것입니다 &lt;code&gt;Just s&lt;/code&gt; , &lt;code&gt;awaitSignal&lt;/code&gt; 는 호출 &lt;code&gt;sigsuspend&lt;/code&gt; 를 설치, &lt;code&gt;s&lt;/code&gt; 실행을 일시 중단하기 전에 새로운 신호 마스크로; 그렇지 않으면 현재 신호 마스크와 함께 &lt;code&gt;sigsuspend&lt;/code&gt; 를 호출합니다 . RTS 스케줄러 신호 ( &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:virtualTimerExpired&quot;&gt;virtualTimerExpired&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:realTimeAlarm&quot;&gt;realTimeAlarm&lt;/a&gt;&lt;/code&gt; )로 인해이 호출이 조기 종료 될 수 있습니다. &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:blockSignals&quot;&gt;blockSignals&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:reservedSignals&quot;&gt;reservedSignals&lt;/a&gt;&lt;/code&gt; 로 &lt;code&gt;awaitSignal&lt;/code&gt; 을 호출하기 전에 해당 신호를 차단해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5eddccd6b130a969a4bbe6cdbe1b5a2f2a4ecc07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awaitSignal&lt;/code&gt; returns when signal was received and processed by a signal handler, or if the signal could not be caught. If you have installed any signal handlers with &lt;code&gt;installHandler&lt;/code&gt;, it may be wise to call &lt;code&gt;yield&lt;/code&gt; directly after &lt;code&gt;awaitSignal&lt;/code&gt; to ensure that the signal handler runs as promptly as possible.</source>
          <target state="translated">&lt;code&gt;awaitSignal&lt;/code&gt; 은 신호 핸들러가 신호를 수신하여 처리했거나 신호를 포착 할 수없는 경우 리턴합니다. 당신이 어떤 신호 처리기를 설치 한 경우 &lt;code&gt;installHandler&lt;/code&gt; 를 , 그것은 전화를하는 것이 현명 할 수 &lt;code&gt;yield&lt;/code&gt; 직접 후 &lt;code&gt;awaitSignal&lt;/code&gt; 보장하기 위해 그 즉시 가능한 신호 처리기가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="3f5527e0647486b41cc4312b1d976476b7d23da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;between open close p&lt;/code&gt; parses &lt;code&gt;open&lt;/code&gt;, followed by &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;. Returns the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;between open close p&lt;/code&gt; 파싱 &lt;code&gt;open&lt;/code&gt; , 다음 &lt;code&gt;p&lt;/code&gt; 및 &lt;code&gt;close&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f0efed973c68857e9c777874430eb0a944f2fb18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;between open close p&lt;/code&gt; parses &lt;code&gt;open&lt;/code&gt;, followed by &lt;code&gt;p&lt;/code&gt; and finally &lt;code&gt;close&lt;/code&gt;. Only the value of &lt;code&gt;p&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;between open close p&lt;/code&gt; 파싱 &lt;code&gt;open&lt;/code&gt; , 다음 &lt;code&gt;p&lt;/code&gt; 결국 &lt;code&gt;close&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 값만 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b59bced716aaa8611056a86795f00fa553ec80c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bit &lt;em&gt;i&lt;/em&gt;&lt;/code&gt; is a value with the &lt;code&gt;&lt;em&gt;i&lt;/em&gt;&lt;/code&gt;th bit set and all other bits clear.</source>
          <target state="translated">&lt;code&gt;bit &lt;em&gt;i&lt;/em&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;em&gt;i&lt;/em&gt;&lt;/code&gt; 번째 비트가 설정되고 다른 모든 비트가 지워진 값입니다 .</target>
        </trans-unit>
        <trans-unit id="23bb751a500bd875d7a338e20a5b8f74883baf0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blockSignals mask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; with &lt;code&gt;SIG_BLOCK&lt;/code&gt; to add all interrupts in &lt;code&gt;mask&lt;/code&gt; to the set of blocked interrupts.</source>
          <target state="translated">&lt;code&gt;blockSignals mask&lt;/code&gt; 는 &lt;code&gt;SIG_BLOCK&lt;/code&gt; 으로 &lt;code&gt;sigprocmask&lt;/code&gt; 를 호출 하여 &lt;code&gt;mask&lt;/code&gt; 모든 인터럽트 를 차단 된 인터럽트 세트에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="aa85a6159c096b8d76aaf5324597df0c97865075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buildExpressionParser table term&lt;/code&gt; builds an expression parser for terms &lt;code&gt;term&lt;/code&gt; with operators from &lt;code&gt;table&lt;/code&gt;, taking the associativity and precedence specified in &lt;code&gt;table&lt;/code&gt; into account. Prefix and postfix operators of the same precedence can only occur once (i.e. &lt;code&gt;--2&lt;/code&gt; is not allowed if &lt;code&gt;-&lt;/code&gt; is prefix negate). Prefix and postfix operators of the same precedence associate to the left (i.e. if &lt;code&gt;++&lt;/code&gt; is postfix increment, than &lt;code&gt;-2++&lt;/code&gt; equals &lt;code&gt;-1&lt;/code&gt;, not &lt;code&gt;-3&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;buildExpressionParser table term&lt;/code&gt; 는 &lt;code&gt;table&lt;/code&gt; 에 지정된 연관성과 우선 순위 를 고려 하여 &lt;code&gt;table&lt;/code&gt; 연산자를 &lt;code&gt;term&lt;/code&gt; 하여 용어 term에 대한 표현식 구문 분석기를 빌드 합니다. 우선 순위가 동일한 접두사 및 접미사 연산자는 한 번만 발생할 수 있습니다 (즉 , &lt;code&gt;-&lt;/code&gt; 가 접두사 부정 인 경우 &lt;code&gt;--2&lt;/code&gt; 는 허용되지 않음 ). 왼쪽에 우선 순위가 같은 동료의 접두사와 접미사 사업자 (즉, 경우 &lt;code&gt;++&lt;/code&gt; IS 후위 증가,보다 &lt;code&gt;-2++&lt;/code&gt; 동일 &lt;code&gt;-1&lt;/code&gt; ,하지 &lt;code&gt;-3&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="fad0cb08a7c9a3cf2d210817336c422f8de0001f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;/code&gt; coverage</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 범위</target>
        </trans-unit>
        <trans-unit id="3c4f0b1c441a8fe302ce5fcf7e664d845e9fa265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls a function with the current continuation as its argument. Provides an escape continuation mechanism for use with Continuation monads. Escape continuations allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-error#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-error#v:catchError&quot;&gt;catchError&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-error#v:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; monad. Advantage of this function over calling &lt;code&gt;return&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control (see examples in &lt;a href=&quot;control-monad-cont&quot;&gt;Control.Monad.Cont&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; (현재 연속 호출)는 현재 연속을 인수로 사용하여 함수를 호출합니다. 연속 모나드와 함께 사용할 이스케이프 연속 메커니즘을 제공합니다. 이스케이프 연속을 사용하면 현재 계산을 중단하고 즉시 값을 반환 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;control-monad-error#v:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; 모나드 내 에서 &lt;code&gt;&lt;a href=&quot;control-monad-error#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad-error#v:catchError&quot;&gt;catchError&lt;/a&gt;&lt;/code&gt; 와 비슷한 효과를 얻습니다 . &lt;code&gt;return&lt;/code&gt; 을 호출 하는 것보다이 함수의 장점은 연속성을 명시 적으로 만들어 더 많은 유연성과 더 나은 제어를 가능하게한다는 것입니다 ( &lt;a href=&quot;control-monad-cont&quot;&gt;Control.Monad.Cont의&lt;/a&gt; 예제 참조 ).</target>
        </trans-unit>
        <trans-unit id="b4ceae3c8a658aaa250e40e1e151e962d689447b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls its argument function, passing it the current continuation. It provides an escape continuation mechanism for use with continuation monads. Escape continuations one allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; monad. The advantage of this function over calling &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control.</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; (현재 연속 호출)는 현재 연속을 전달하여 인수 함수를 호출합니다. 연속 모나드와 함께 사용하기위한 이스케이프 연속 메커니즘을 제공합니다. 이스케이프 연속을 사용하면 현재 계산을 중단하고 즉시 값을 반환 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 모나드 내 에서 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; 와 비슷한 효과를 얻습니다 . &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 을 호출 하는 것보다이 함수의 장점은 연속성을 명시 적으로 만들어 더 많은 유연성과 제어를 가능하게한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="26616a8960b4dcf96d8cb0402767831b4e88b141" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls its argument function, passing it the current continuation. It provides an escape continuation mechanism for use with continuation monads. Escape continuations one allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; monad. The advantage of this function over calling &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control.</source>
          <target state="translated">&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation)는 인수 함수를 호출하여 현재 연속을 전달합니다. 연속 모나드와 함께 사용하기위한 이스케이프 연속 메커니즘을 제공합니다. 이스케이프 연속 1은 현재 계산을 중단하고 즉시 값을 반환 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 모나드 내 에서 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; 와 유사한 효과를 얻습니다 . &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 호출에 비해이 함수의 장점은 연속을 명시 적으로 만들어 더 많은 유연성과 더 나은 제어를 허용한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1b1b977fbb6cf876421ec8abbe31bbe12bcf60ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;canonicalizePath&lt;/code&gt; can resolve at least 64 indirections in a single path, more than what is supported by most operating systems. Therefore, it may return the fully resolved path even though the operating system itself would have long given up.</source>
          <target state="translated">&lt;code&gt;canonicalizePath&lt;/code&gt; 는 대부분의 운영 체제에서 지원하는 것보다 단일 경로에서 64 개 이상의 간접 경로를 확인할 수 있습니다. 따라서 운영 체제 자체가 오랫동안 포기 했더라도 완전히 해결 된 경로를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36dcb166d8a42d48877e184da7dd256de9be24bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl p op x&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value obtained by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. If there are zero occurrences of &lt;code&gt;p&lt;/code&gt;, the value &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainl p op x&lt;/code&gt; 파싱은 &lt;em&gt;제로&lt;/em&gt; 또는 그 이상의 사건 &lt;code&gt;p&lt;/code&gt; ,에 의해 분리 &lt;code&gt;op&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 에 &lt;code&gt;op&lt;/code&gt; 가 반환 한 모든 함수를 &lt;em&gt;왼쪽&lt;/em&gt; 연관 적용 하여 얻은 값을 반환합니다 . &lt;code&gt;p&lt;/code&gt; 의 발생이 0 이면 값 &lt;code&gt;x&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="194ab257885ffa8cbd5692de9ec6b0aeef2c6c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl p op x&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value produced by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainl p op x&lt;/code&gt; 파싱은 0 개 이상의 어커런스 &lt;code&gt;p&lt;/code&gt; ,에 의해 분리 &lt;code&gt;op&lt;/code&gt; . &lt;code&gt;op&lt;/code&gt; 가 반환 한 모든 함수 의 &lt;em&gt;왼쪽&lt;/em&gt; 연관 응용 프로그램에서 생성 된 값을 반환합니다 . 전혀 발생이없는 경우 &lt;code&gt;p&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="24ff236a28e78bb8481813277cfd6fb730a2afd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl1 p op&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. This parser can for example be used to eliminate left recursion which typically occurs in expression grammars.</source>
          <target state="translated">&lt;code&gt;chainl1 p op&lt;/code&gt; 파싱 &lt;em&gt;하나 명&lt;/em&gt; 의 이상의 발생 &lt;code&gt;p&lt;/code&gt; 에 의해 분리, &lt;code&gt;op&lt;/code&gt; 리턴 한 값 &lt;em&gt;왼쪽&lt;/em&gt; 으로 돌려 모든 기능에 연관 애플리케이션 &lt;code&gt;op&lt;/code&gt; 에 의해 리턴 된 값 &lt;code&gt;p&lt;/code&gt; . 이 파서는 예를 들어 표현 문법에서 일반적으로 발생하는 왼쪽 재귀를 제거하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68ed2fa3e7c58bbb8e0801d890944be400e1a245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr p op x&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, the value &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainr p op x&lt;/code&gt; 파싱은 &lt;em&gt;제로&lt;/em&gt; 또는 그 이상의 사건 &lt;code&gt;p&lt;/code&gt; 에 의해 분리, &lt;code&gt;op&lt;/code&gt; a로 얻어진 값 리턴 &lt;em&gt;오른쪽&lt;/em&gt; 으로 돌려 모든 기능에 연관 애플리케이션 &lt;code&gt;op&lt;/code&gt; 에 의해 리턴 된 값 &lt;code&gt;p&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 없으면 &lt;code&gt;x&lt;/code&gt; 값 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8c985ed0f65a6c5e10c4638ffd95ed75329f0609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr p op x&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value produced by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;chainr p op x&lt;/code&gt; 파싱은 0 개 이상의 어커런스 &lt;code&gt;p&lt;/code&gt; ,에 의해 분리 &lt;code&gt;op&lt;/code&gt; . &lt;code&gt;op&lt;/code&gt; 가 반환 한 모든 함수를 &lt;em&gt;올바른&lt;/em&gt; 연관 응용 프로그램으로 생성 한 값을 반환합니다 . 전혀 발생이없는 경우 &lt;code&gt;p&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="16cb565d6d3d03fad93241fb30def31c12816cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr1 p op x&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of |p|, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chainr1 p op x&lt;/code&gt; 파싱 &lt;em&gt;한&lt;/em&gt; p는 | |로 분리의 이상 발생 &lt;code&gt;op&lt;/code&gt; a로 얻어진 값 리턴 &lt;em&gt;오른쪽&lt;/em&gt; 으로 돌려 모든 기능에 연관 애플리케이션 &lt;code&gt;op&lt;/code&gt; 에 의해 리턴 된 값 &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2063898cc537ebd7e745780ddecfa292106d7e4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;changeWorkingDirectory dir&lt;/code&gt; calls &lt;code&gt;chdir&lt;/code&gt; to change the current working directory to &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;changeWorkingDirectory dir&lt;/code&gt; 은 &lt;code&gt;chdir&lt;/code&gt; 을 호출 하여 현재 작업 디렉토리를 &lt;code&gt;dir&lt;/code&gt; 로 변경합니다 .</target>
        </trans-unit>
        <trans-unit id="052c109fb02bbddcf21e7a3e895f702c6cbe4d90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char c&lt;/code&gt; parses a single character &lt;code&gt;c&lt;/code&gt;. Returns the parsed character (i.e. &lt;code&gt;c&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;char c&lt;/code&gt; 단일 문자 구문 분석 &lt;code&gt;c&lt;/code&gt; . 파싱 ​​된 문자를 반환합니다 (예 : &lt;code&gt;c&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f74b913f338132524c6dc452f39e326e7016e390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;choice ps&lt;/code&gt; tries to apply the parsers in the list &lt;code&gt;ps&lt;/code&gt; in order, until one of them succeeds. Returns the value of the succeeding parser.</source>
          <target state="translated">&lt;code&gt;choice ps&lt;/code&gt; 는 파서 중 하나가 성공할 때까지 목록 &lt;code&gt;ps&lt;/code&gt; 의 파서 를 순서대로 적용하려고 시도 합니다. 다음 구문 분석기의 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="062c2c8918d9490e5adc2e2a085dfd713939cbf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 선언 :</target>
        </trans-unit>
        <trans-unit id="0e0fa4497c830d4b56d4c13c5c623e1dc2dbc3ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closeDirStream dp&lt;/code&gt; calls &lt;code&gt;closedir&lt;/code&gt; to close the directory stream &lt;code&gt;dp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;closeDirStream dp&lt;/code&gt; 는 &lt;code&gt;closedir&lt;/code&gt; 을 호출 하여 디렉토리 스트림 &lt;code&gt;dp&lt;/code&gt; 를 닫습니다 .</target>
        </trans-unit>
        <trans-unit id="4ea4a17d2d326c8280f997479099e349bd994f4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareByteArrays# src1 src1_ofs src2 src2_ofs n&lt;/code&gt; compares &lt;code&gt;n&lt;/code&gt; bytes starting at offset &lt;code&gt;src1_ofs&lt;/code&gt; in the first &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src1&lt;/code&gt; to the range of &lt;code&gt;n&lt;/code&gt; bytes (i.e. same length) starting at offset &lt;code&gt;src2_ofs&lt;/code&gt; of the second &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src2&lt;/code&gt;. Both arrays must fully contain the specified ranges, but this is not checked. Returns an &lt;code&gt;Int#&lt;/code&gt; less than, equal to, or greater than zero if the range is found, respectively, to be byte-wise lexicographically less than, to match, or be greater than the second range.</source>
          <target state="translated">&lt;code&gt;compareByteArrays# src1 src1_ofs src2 src2_ofs n&lt;/code&gt; 을 비교하여 &lt;code&gt;n&lt;/code&gt; 오프셋에서 시작하는 바이트 &lt;code&gt;src1_ofs&lt;/code&gt; 처음에 &lt;code&gt;ByteArray#&lt;/code&gt; &lt;code&gt;src1&lt;/code&gt; 의 범위에서 &lt;code&gt;n&lt;/code&gt; 오프셋에서 시작하는 바이트 (즉 동일한 길이) &lt;code&gt;src2_ofs&lt;/code&gt; 제의 &lt;code&gt;ByteArray#&lt;/code&gt; &lt;code&gt;src2&lt;/code&gt; . 두 배열 모두 지정된 범위를 완전히 포함해야하지만 이것은 확인되지 않습니다. 범위가 각각 사전 순으로 바이트 단위보다 작거나 일치하거나 두 번째 범위보다 큰 경우, 범위가 각각 0보다 작거나 같거나 0보다 큰 &lt;code&gt;Int#&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e544d236b45af1423cd3bc87ffb5df232a61481e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const x&lt;/code&gt; is a unary function which evaluates to &lt;code&gt;x&lt;/code&gt; for all inputs.</source>
          <target state="translated">&lt;code&gt;const x&lt;/code&gt; 는 모든 입력에 대해 &lt;code&gt;x&lt;/code&gt; 로 평가되는 단항 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="62f12c013af092c4fde3972020484445440d928a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controlFlow fd action&lt;/code&gt; calls &lt;code&gt;tcflow&lt;/code&gt; to control the flow of data on &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;, as indicated by &lt;code&gt;action&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;controlFlow fd action&lt;/code&gt; 호출 &lt;code&gt;tcflow&lt;/code&gt; 에서 데이터 흐름 제어 &lt;code&gt;Fd&lt;/code&gt; 에 &lt;code&gt;fd&lt;/code&gt; 로 나타내는 바와 같이, &lt;code&gt;action&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4520bb319d4ec6dac65138fd7754f5a137bf16e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copyByteArray# src src_ofs dst dst_ofs n&lt;/code&gt; copies the range starting at offset &lt;code&gt;src_ofs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt; from the &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src&lt;/code&gt; to the &lt;code&gt;MutableByteArray#&lt;/code&gt;&lt;code&gt;dst&lt;/code&gt; starting at offset &lt;code&gt;dst_ofs&lt;/code&gt;. Both arrays must fully contain the specified ranges, but this is not checked. The two arrays must not be the same array in different states, but this is not checked either.</source>
          <target state="translated">&lt;code&gt;copyByteArray# src src_ofs dst dst_ofs n&lt;/code&gt; 사본 오프셋에서 시작하는 범위 &lt;code&gt;src_ofs&lt;/code&gt; 길이 &lt;code&gt;n&lt;/code&gt; 으로부터 &lt;code&gt;ByteArray#&lt;/code&gt; &lt;code&gt;src&lt;/code&gt; 받는 &lt;code&gt;MutableByteArray#&lt;/code&gt; &lt;code&gt;dst&lt;/code&gt; 오프셋에서 시작 &lt;code&gt;dst_ofs&lt;/code&gt; . 두 배열 모두 지정된 범위를 완전히 포함해야하지만 이것은 확인되지 않습니다. 두 어레이는 서로 다른 상태에서 동일한 어레이가 아니어야하지만이 역시 점검되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="73a9a6ad988ae4dd809544f37834df439c94aeb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count n p&lt;/code&gt; parses &lt;code&gt;n&lt;/code&gt; occurrences of &lt;code&gt;p&lt;/code&gt; in sequence. A list of results is returned.</source>
          <target state="translated">&lt;code&gt;count n p&lt;/code&gt; 는 &lt;code&gt;p&lt;/code&gt; 의 &lt;code&gt;n&lt;/code&gt; 개의 발생을 순서대로 구문 분석 합니다. 결과 목록이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ef3ab7cc4ff01c7961fe0a527f57426f6bcf5c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count n p&lt;/code&gt; parses &lt;code&gt;n&lt;/code&gt; occurrences of &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is smaller or equal to zero, the parser equals to &lt;code&gt;return []&lt;/code&gt;. Returns a list of &lt;code&gt;n&lt;/code&gt; values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count n p&lt;/code&gt; 는 &lt;code&gt;p&lt;/code&gt; 의 &lt;code&gt;n&lt;/code&gt; 발생을 구문 분석 합니다. 경우 &lt;code&gt;n&lt;/code&gt; 이 작거나 제로인, 파서는 동일하기 &lt;code&gt;return []&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 돌려주는 &lt;code&gt;n&lt;/code&gt; 값 의리스트를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="e830eb32578a6325a39011990994921443ead963" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDevice path mode dev&lt;/code&gt; creates either a regular or a special file depending on the value of &lt;code&gt;mode&lt;/code&gt; (and &lt;code&gt;dev&lt;/code&gt;). &lt;code&gt;mode&lt;/code&gt; will normally be either &lt;code&gt;&lt;a href=&quot;system-posix-files#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-files#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the file.</source>
          <target state="translated">&lt;code&gt;createDevice path mode dev&lt;/code&gt; 는 &lt;code&gt;mode&lt;/code&gt; (및 &lt;code&gt;dev&lt;/code&gt; ) 의 값에 따라 일반 파일이나 특수 파일을 만듭니다 . &lt;code&gt;mode&lt;/code&gt; 는 일반적으로 &lt;code&gt;&lt;a href=&quot;system-posix-files#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;system-posix-files#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt; 입니다. &lt;code&gt;name&lt;/code&gt; 이라는 파일이 이미 존재하거나 현재 프로세스의 유효 사용자 ID에 파일을 작성할 권한이없는 경우 &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; 로 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb2dd5362da4181a22373ec75833e78ad69887b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDevice path mode dev&lt;/code&gt; creates either a regular or a special file depending on the value of &lt;code&gt;mode&lt;/code&gt; (and &lt;code&gt;dev&lt;/code&gt;). &lt;code&gt;mode&lt;/code&gt; will normally be either &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the file.</source>
          <target state="translated">&lt;code&gt;createDevice path mode dev&lt;/code&gt; 는 &lt;code&gt;mode&lt;/code&gt; (및 &lt;code&gt;dev&lt;/code&gt; ) 의 값에 따라 일반 파일이나 특수 파일을 만듭니다 . &lt;code&gt;mode&lt;/code&gt; 는 일반적으로 &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt; 입니다. &lt;code&gt;name&lt;/code&gt; 이라는 파일이 이미 존재하거나 현재 프로세스의 유효 사용자 ID에 파일을 작성할 권한이없는 경우 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; 로 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4db2b138b3574750e07f04c89c2cc7fbde2fdc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDirectory dir mode&lt;/code&gt; calls &lt;code&gt;mkdir&lt;/code&gt; to create a new directory, &lt;code&gt;dir&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;createDirectory dir mode&lt;/code&gt; 는 &lt;code&gt;mkdir&lt;/code&gt; 을 호출 하여 &lt;code&gt;mode&lt;/code&gt; 기반의 권한으로 새 디렉토리 &lt;code&gt;dir&lt;/code&gt; 을 작성 합니다 .</target>
        </trans-unit>
        <trans-unit id="c58e82da0a7fba5c9695024c0d36d817d9035005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createLink old new&lt;/code&gt; creates a new path, &lt;code&gt;new&lt;/code&gt;, linked to an existing file, &lt;code&gt;old&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;createLink old new&lt;/code&gt; 새 경로 생성 &lt;code&gt;new&lt;/code&gt; 기존 파일, 링크, &lt;code&gt;old&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1232f65b6cf592ca37036cb00c10cd711926dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; creates a new named pipe, &lt;code&gt;fifo&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the pipe.</source>
          <target state="translated">&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; 새로 명명 된 파이프를 생성 &lt;code&gt;fifo&lt;/code&gt; 기반으로 권한, &lt;code&gt;mode&lt;/code&gt; . &lt;code&gt;name&lt;/code&gt; 이라는 이름 의 파일이 이미 존재하거나 현재 프로세스의 유효 사용자 ID에 파이프를 작성할 권한이없는 경우 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; 로 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70ad04d1d6775e833f76121193627201a6e247a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; creates a new named pipe, &lt;code&gt;fifo&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the pipe.</source>
          <target state="translated">&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; 새로 명명 된 파이프를 생성 &lt;code&gt;fifo&lt;/code&gt; 기반으로 권한, &lt;code&gt;mode&lt;/code&gt; . &lt;code&gt;name&lt;/code&gt; 이라는 이름 의 파일이 이미 존재하거나 현재 프로세스의 유효 사용자 ID에 파이프를 작성할 권한이없는 경우 &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; 로 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9ee9efc00efab99d5643207aebaa92809f127e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createSymbolicLink file1 file2&lt;/code&gt; creates a symbolic link named &lt;code&gt;file2&lt;/code&gt; which points to the file &lt;code&gt;file1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;createSymbolicLink file1 file2&lt;/code&gt; 는 &lt;code&gt;file1&lt;/code&gt; 파일을 가리키는 &lt;code&gt;file2&lt;/code&gt; 라는 기호 링크를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="c1fbc8e436d708733f29d632bb7c387b44f62477" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 선언 :</target>
        </trans-unit>
        <trans-unit id="df60e7df637060c0210c29137e93f51d157ff540" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaultPlugin&lt;/code&gt; defines &lt;code&gt;pluginRecompile&lt;/code&gt; to be &lt;code&gt;impurePlugin&lt;/code&gt; which is the most conservative and backwards compatible option.</source>
          <target state="translated">&lt;code&gt;defaultPlugin&lt;/code&gt; 는 정의 &lt;code&gt;pluginRecompile&lt;/code&gt; 가 될 &lt;code&gt;impurePlugin&lt;/code&gt; 가장 보수적와 호환 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="9d8ac8ba952e96f2f584ff153d1e0d2c50fbb8b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;discardData fd queues&lt;/code&gt; calls &lt;code&gt;tcflush&lt;/code&gt; to discard pending input and/or output for &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;, as indicated by the &lt;code&gt;QueueSelector&lt;/code&gt;&lt;code&gt;queues&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;discardData fd queues&lt;/code&gt; 는 &lt;code&gt;tcflush&lt;/code&gt; 를 호출 하여 &lt;code&gt;QueueSelector&lt;/code&gt; &lt;code&gt;queues&lt;/code&gt; 표시된대로 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; 에 대한 보류중인 입력 및 / 또는 출력을 삭제 합니다.</target>
        </trans-unit>
        <trans-unit id="653522ba69eccab6c77a8c5417dd32997d59a2ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dlopen(3)&lt;/code&gt; and friends Derived from &lt;code&gt;GModule.chs&lt;/code&gt; by M.Weber &amp;amp; M.Chakravarty which is part of c2hs. I left the API more or less the same, mostly the flags are different.</source>
          <target state="translated">&lt;code&gt;dlopen(3)&lt;/code&gt; 및 친구들 &lt;code&gt;GModule.chs&lt;/code&gt; 일부인 M.Weber &amp;amp; M.Chakravarty가 GModule.chs 에서 파생되었습니다 . 나는 API를 거의 동일하게 두었습니다. 대부분 플래그가 다릅니다.</target>
        </trans-unit>
        <trans-unit id="ef46bdd157c3375114408f775493150852e02e44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drainOutput fd&lt;/code&gt; calls &lt;code&gt;tcdrain&lt;/code&gt; to block until all output written to &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; has been transmitted.</source>
          <target state="translated">&lt;code&gt;drainOutput fd&lt;/code&gt; 는 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; 에 기록 된 모든 출력 이 전송 될 때까지 &lt;code&gt;tcdrain&lt;/code&gt; 을 호출 하여 차단 합니다.</target>
        </trans-unit>
        <trans-unit id="d76e6c62116a09c7ea69142e3b355a99f57dbfe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2 source target&lt;/code&gt; replaces the target device with the source device. The target device is closed first, if necessary, and then it is made into a duplicate of the first device (like Unix &lt;code&gt;dup2&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;dup2 source target&lt;/code&gt; 은 대상 장치를 소스 장치로 바꿉니다. 필요한 경우 대상 장치를 먼저 닫은 다음 첫 번째 장치의 복제본 (예 : Unix &lt;code&gt;dup2&lt;/code&gt; )으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="554a03aaac855cf87b3e1e6f5b648cb30d35ab3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; : 배열의 요소 유형</target>
        </trans-unit>
        <trans-unit id="466c8896289ba5414e01061af7677aabe076c33c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array. Only certain element types are supported.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; : 배열의 요소 유형 특정 요소 유형 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="86251c46011752870f8ac6831c8af890201af68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array. Only certain element types are supported: see &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; for a list of instances.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; : 배열의 요소 유형 특정 요소 유형 만 지원됩니다. 인스턴스 목록 은 &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="57723498d28290c18a0e14ab2d7a1a61c416dc3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy p sep&lt;/code&gt; 파싱은 &lt;em&gt;제로&lt;/em&gt; 또는 그 이상의 사건 &lt;code&gt;p&lt;/code&gt; 분리에 의해 종료 &lt;code&gt;sep&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a3ea67996444d2042ff0261a1d87529799f87f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy p sep&lt;/code&gt; 파싱 하나 이상의 어커런스 &lt;code&gt;p&lt;/code&gt; 분리에 의해 종료 &lt;code&gt;sep&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="311ae2cbe599a5740080499a38949d85bd6cacaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy p sep&lt;/code&gt; 파싱은 0 개 이상의 어커런스 &lt;code&gt;p&lt;/code&gt; 분리에 의해 종료 &lt;code&gt;sep&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d1116ff23b47ec9512b9459f3a2fdaf213daad63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy1 p sep&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;endBy1 p sep&lt;/code&gt; 파싱 &lt;em&gt;하나 개&lt;/em&gt; 의 이상의 발생 &lt;code&gt;p&lt;/code&gt; 분리에 의해 종료 &lt;code&gt;sep&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3e4bfd1c817ef4eb16eb5e85f5174941b1fb2639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epochTime&lt;/code&gt; calls &lt;code&gt;time&lt;/code&gt; to obtain the number of seconds that have elapsed since the epoch (Jan 01 00:00:00 GMT 1970).</source>
          <target state="translated">&lt;code&gt;epochTime&lt;/code&gt; 은 epoch (Jan 01 00:00:00 GMT 1970) 이후 경과 된 시간 (초)을 얻기 위해 &lt;code&gt;time&lt;/code&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="a3b22431113363995e02522f9f91315f345d06cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; automatically attach the current stack to the error message. This often complements the &lt;code&gt;HasCallStack&lt;/code&gt; stack (see &lt;a href=&quot;glasgow_exts#hascallstack&quot;&gt;HasCallStack&lt;/a&gt;), so both call stacks are shown.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; 및 &lt;code&gt;undefined&lt;/code&gt; 는 현재 스택을 오류 메시지에 자동으로 첨부합니다. 이것은 종종 보완 &lt;code&gt;HasCallStack&lt;/code&gt; 의 (참조 스택을 &lt;a href=&quot;glasgow_exts#hascallstack&quot;&gt;HasCallStack을&lt;/a&gt; 모두 호출 스택이 표시되도록).</target>
        </trans-unit>
        <trans-unit id="c51b9aa0edf648e3722c4daac57a257721f19863" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp (a + b)&lt;/code&gt; = &lt;code&gt;exp a * exp b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exp (a + b)&lt;/code&gt; = &lt;code&gt;exp a * exp b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eac0e4af0d48ad50e7fd3f23c631168d62f509d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp (fromInteger 0)&lt;/code&gt; = &lt;code&gt;fromInteger 1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exp (fromInteger 0)&lt;/code&gt; = &lt;code&gt;fromInteger 1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b126a049558f379fb47e63dbe3b5d5892512a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f1&lt;/code&gt; is a function binding, and &lt;code&gt;f2&lt;/code&gt; binds a bare variable; in both cases the type signature brings &lt;code&gt;a&lt;/code&gt; into scope. However the binding for &lt;code&gt;f3&lt;/code&gt; is a pattern binding, and so &lt;code&gt;f3&lt;/code&gt; is a fresh variable brought into scope by the pattern, not connected with top level &lt;code&gt;f3&lt;/code&gt;. Then type variable &lt;code&gt;a&lt;/code&gt; is not in scope of the right-hand side of &lt;code&gt;Just f3 = ...&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f1&lt;/code&gt; 은 함수 바인딩이고, &lt;code&gt;f2&lt;/code&gt; 는 베어 변수를 바인딩합니다. 두 경우 모두 형식 서명이 범위 &lt;code&gt;a&lt;/code&gt; 들어갑니다. 그러나 &lt;code&gt;f3&lt;/code&gt; 에 대한 바인딩은 패턴 바인딩이므로 &lt;code&gt;f3&lt;/code&gt; 은 최상위 레벨 &lt;code&gt;f3&lt;/code&gt; 과 연결되지 않은 패턴에 의해 범위에 적용되는 새로운 변수 입니다. 그런 다음 변수 &lt;code&gt;a&lt;/code&gt; 를 입력 &lt;code&gt;Just f3 = ...&lt;/code&gt; 의 오른쪽 범위에 있지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="088aadfe34e0c8fec30aa1426daa42c266d37c9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; &amp;mdash; parallel sparks (fully accurate). Disabled by default.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; &amp;mdash; 병렬 스파크 (완전히 정확함). 기본적으로 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a21ee40c92d51b07b0a214a5537689b1a9fe1a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; does not use an explicit &lt;code&gt;forall&lt;/code&gt;, so type variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are brought into scope implicitly. &lt;code&gt;g&lt;/code&gt; quantifies both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; explicitly. Both &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; work today and will continue to work in the future because they adhere to the &amp;ldquo;forall-or-nothing&amp;rdquo; rule: either all type variables in a function definition are introduced explicitly or implicitly, there is no middle ground.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 는 명시적인 &lt;code&gt;forall&lt;/code&gt; 을 사용하지 않으므로 유형 변수 &lt;code&gt;a&lt;/code&gt; 및 &lt;code&gt;b&lt;/code&gt; 는 암시 적으로 범위에 포함됩니다. &lt;code&gt;g&lt;/code&gt; 는 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 를 명시 적으로 정량화합니다 . 모두 &lt;code&gt;f&lt;/code&gt; 와 &lt;code&gt;g&lt;/code&gt; 작업 오늘날 그들이 &quot;FORALL 아니면도&quot;규칙을 준수하기 때문에 앞으로 계속 작동합니다 : 두 함수 정의의 모든 종류의 변수는 중간 지대가 없다, 명시 적 또는 암시 적으로 도입된다.</target>
        </trans-unit>
        <trans-unit id="d7d648ac806ab27c3b6b97ebdc3984b377a4b72d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a fraction with the same type and sign as &lt;code&gt;x&lt;/code&gt;, and with absolute value less than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 와 유형 및 부호가 같고 절대 값이 &lt;code&gt;1&lt;/code&gt; 미만인 분수입니다 .</target>
        </trans-unit>
        <trans-unit id="c1f56fbf9b84fe774bb4706812a58a48678a4d4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a record field of constructor &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 는 생성자 &lt;code&gt;C&lt;/code&gt; 의 레코드 필드입니다 .</target>
        </trans-unit>
        <trans-unit id="eefbbe91a073414235b75d9f1a3b74ecb7ba1a01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileAccess name read write exec&lt;/code&gt; checks if the file (or other file system object) &lt;code&gt;name&lt;/code&gt; can be accessed for reading, writing and/or executing. To check a permission set the corresponding argument to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileAccess name read write exec&lt;/code&gt; 는 파일 (또는 다른 파일 시스템 객체) &lt;code&gt;name&lt;/code&gt; 이 읽기, 쓰기 및 / 또는 실행을 위해 액세스 될 수 있는지 확인합니다 . 권한을 확인하려면 해당 인수를 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="21096c752309e1ba1993b650b0441bde685dce28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileAccess name read write exec&lt;/code&gt; checks if the file (or other file system object) &lt;code&gt;name&lt;/code&gt; can be accessed for reading, writing and/or executing. To check a permission set the corresponding argument to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileAccess name read write exec&lt;/code&gt; 는 읽기, 쓰기 및 / 또는 실행을 위해 파일 (또는 기타 파일 시스템 개체) &lt;code&gt;name&lt;/code&gt; 액세스 할 수 있는지 확인합니다 . 권한을 확인하려면 해당 인수를 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="841b2ff8e1b534d6b7ff33e50bc7b8b488c6d4f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findFilesWith predicate dirs name&lt;/code&gt; searches through the list of directories (&lt;code&gt;dirs&lt;/code&gt;) for files that have the given &lt;code&gt;name&lt;/code&gt; and satisfy the given &lt;code&gt;predicate&lt;/code&gt; ands return the paths of those files. The directories are checked in a left-to-right order and the paths are returned in the same order.</source>
          <target state="translated">&lt;code&gt;findFilesWith predicate dirs name&lt;/code&gt; ( &lt;code&gt;dirs&lt;/code&gt; )을 통해 주어진 &lt;code&gt;name&lt;/code&gt; 을 가진 파일을 찾고 주어진 &lt;code&gt;predicate&lt;/code&gt; 만족시키고 해당 파일의 경로를 리턴합니다. 디렉토리는 왼쪽에서 오른쪽 순서로 점검되며 경로는 동일한 순서로 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="be93079f8a7e644b25fa4bf9cbf3c7628d158741" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first&lt;/code&gt; returns its first argument if it is non-empty, otherwise its second.</source>
          <target state="translated">&lt;code&gt;first&lt;/code&gt; 번째 인수가 비어 있지 않으면 첫 번째 인수를 반환하고, 그렇지 않으면 두 번째 인수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9248da6ebdc881872dcbd69414dec40c653819fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt; is always a reserved keyword at the type level, contrary to the Haskell Report, which allows type variables to be named &lt;code&gt;forall&lt;/code&gt;. Note that this does not imply that GHC always enables the &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt;&lt;code&gt;-XExplicitForAll&lt;/code&gt;&lt;/a&gt; extension. Even without this extension enabled, reserving &lt;code&gt;forall&lt;/code&gt; as a keyword has significance. For instance, GHC will not parse the type signature &lt;code&gt;foo :: forall x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; 은 유형 변수 이름을 &lt;code&gt;forall&lt;/code&gt; 로 지정할 수있는 Haskell 보고서와 달리 항상 유형 수준에서 예약 된 키워드 입니다. 이것이 GHC가 항상 &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt; &lt;code&gt;-XExplicitForAll&lt;/code&gt; &lt;/a&gt; 확장을 활성화한다는 것을 의미하지는 않습니다 . 이 확장을 사용하지 않아도 키워드로 &lt;code&gt;forall&lt;/code&gt; 을 예약 하면 의미가 있습니다. 예를 들어, GHC는 형식 서명 &lt;code&gt;foo :: forall x&lt;/code&gt; 구문 분석하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e045484c5dafee9e3b89e2862b7036eb43ca1c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt; is always a reserved keyword at the type level, contrary to the Haskell Report, which allows type variables to be named &lt;code&gt;forall&lt;/code&gt;. Note that this does not imply that GHC always enables the &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt;&lt;code&gt;ExplicitForAll&lt;/code&gt;&lt;/a&gt; extension. Even without this extension enabled, reserving &lt;code&gt;forall&lt;/code&gt; as a keyword has significance. For instance, GHC will not parse the type signature &lt;code&gt;foo :: forall x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; 은 유형 변수의 이름을 &lt;code&gt;forall&lt;/code&gt; 로 지정할 수있는 Haskell Report와는 달리 항상 유형 수준에서 예약 된 키워드 입니다. 이것이 GHC가 항상 &lt;a href=&quot;glasgow_exts#extension-ExplicitForAll&quot;&gt; &lt;code&gt;ExplicitForAll&lt;/code&gt; &lt;/a&gt; 확장을 활성화한다는 것을 의미하지는 않습니다 . 이 확장을 사용하지 않아도 &lt;code&gt;forall&lt;/code&gt; 을 키워드로 예약 하는 것은 의미가 있습니다. 예를 들어, GHC는 유형 서명 &lt;code&gt;foo :: forall x&lt;/code&gt; 구문 분석하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="08b836363d9e5a185a08c9082ffa2e4a6e0db892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt;&amp;lsquo;s in type signatures:</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; 형식 서명의 forall :</target>
        </trans-unit>
        <trans-unit id="96e1f4d2001cd4c4cadecf2c88a6ab6d6bba71cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt;&amp;rsquo;s in type signatures:</source>
          <target state="translated">&lt;code&gt;forall&lt;/code&gt; 의 유형 서명 :</target>
        </trans-unit>
        <trans-unit id="13628c7bed0f5a87fd30a4a8c34334306d16fb22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force x&lt;/code&gt; fully evaluates &lt;code&gt;x&lt;/code&gt;, and then returns it. Note that &lt;code&gt;force x&lt;/code&gt; only performs evaluation when the value of &lt;code&gt;force x&lt;/code&gt; itself is demanded, so essentially it turns shallow evaluation into deep evaluation.</source>
          <target state="translated">&lt;code&gt;force x&lt;/code&gt; 충분히 평가하여 &lt;code&gt;x&lt;/code&gt; , 다음 돌려줍니다. 참고 &lt;code&gt;force x&lt;/code&gt; 의 값 때만 수행 평가 &lt;code&gt;force x&lt;/code&gt; 자체가 요구되고, 그래서 그것은 본질적으로 얕은 깊이의 평가 평가집니다.</target>
        </trans-unit>
        <trans-unit id="2d98f965de72b886a03781bc735bd86909818e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;g&lt;/code&gt; &amp;mdash; GC events, including GC start/stop. Enabled by default.</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; &amp;mdash; GC 시작 / 중지를 포함한 GC 이벤트. 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b249929568260bd2badbaaecf85c48a21a93b9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getAllGroupEntries&lt;/code&gt; returns all group entries on the system by repeatedly calling &lt;code&gt;getgrent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getAllGroupEntries&lt;/code&gt; 는 &lt;code&gt;getgrent&lt;/code&gt; 를 반복적으로 호출하여 시스템의 모든 그룹 항목을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="155ffebaf7cac1b73e60ff3d2c7fabfebde64da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getAllUserEntries&lt;/code&gt; returns all user entries on the system by repeatedly calling &lt;code&gt;getpwent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getAllUserEntries&lt;/code&gt; 는 &lt;code&gt;getpwent&lt;/code&gt; 를 반복적으로 호출하여 시스템의 모든 사용자 항목을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d62311d6fe39b7f73808772e922af25463f96b74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getControllingTerminalName&lt;/code&gt; calls &lt;code&gt;ctermid&lt;/code&gt; to obtain a name associated with the controlling terminal for the process. If a controlling terminal exists, &lt;code&gt;getControllingTerminalName&lt;/code&gt; returns the name of the controlling terminal.</source>
          <target state="translated">&lt;code&gt;getControllingTerminalName&lt;/code&gt; 은 &lt;code&gt;ctermid&lt;/code&gt; 를 호출 하여 프로세스의 제어 터미널과 연관된 이름을 얻습니다. 제어 터미널이 존재하는 경우 &lt;code&gt;getControllingTerminalName&lt;/code&gt; 은 제어 터미널의 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7b48c75090f4029b19deb63392b19507171798cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveGroupID&lt;/code&gt; calls &lt;code&gt;getegid&lt;/code&gt; to obtain the effective &lt;code&gt;GroupID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getEffectiveGroupID&lt;/code&gt; 는 &lt;code&gt;getegid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 유효 &lt;code&gt;GroupID&lt;/code&gt; 를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="1466a085d0563a0c255277828065f309f7b37c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveUserID&lt;/code&gt; calls &lt;code&gt;geteuid&lt;/code&gt; to obtain the effective &lt;code&gt;UserID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getEffectiveUserID&lt;/code&gt; 는 &lt;code&gt;geteuid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 유효 &lt;code&gt;UserID&lt;/code&gt; 를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="4f0a78700d175452cf4149f703baaec00541475e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveUserName&lt;/code&gt; gets the name associated with the effective &lt;code&gt;UserID&lt;/code&gt; of the process.</source>
          <target state="translated">&lt;code&gt;getEffectiveUserName&lt;/code&gt; 은 프로세스 의 유효 &lt;code&gt;UserID&lt;/code&gt; 와 연관된 이름을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="bb694fd7dcf596ee545e8885cab4fbd6764ef189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFdPathVar var fd&lt;/code&gt; obtains the dynamic value of the requested configurable file limit or option associated with the file or directory attached to the open channel &lt;code&gt;fd&lt;/code&gt;. For defined file limits, &lt;code&gt;getFdPathVar&lt;/code&gt; returns the associated value. For defined file options, the result of &lt;code&gt;getFdPathVar&lt;/code&gt; is undefined, but not failure.</source>
          <target state="translated">&lt;code&gt;getFdPathVar var fd&lt;/code&gt; 는 열린 채널 &lt;code&gt;fd&lt;/code&gt; 에 연결된 파일 또는 디렉토리와 연관된 요청 된 구성 가능한 파일 제한 또는 옵션의 동적 값을 가져옵니다 . 정의 된 파일 제한의 경우 &lt;code&gt;getFdPathVar&lt;/code&gt; 는 관련 값을 반환합니다. 정의 된 파일 옵션의 경우 &lt;code&gt;getFdPathVar&lt;/code&gt; 의 결과 는 정의되지 않지만 실패는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="db3b2f46830208e498ebfb2dd49b7cdea145897b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFdStatus fd&lt;/code&gt; acts as &lt;code&gt;getFileStatus&lt;/code&gt; but uses a file descriptor &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getFdStatus fd&lt;/code&gt; 는 &lt;code&gt;getFileStatus&lt;/code&gt; 역할을 하지만 파일 디스크립터 &lt;code&gt;fd&lt;/code&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="4b8b63428c73d4d68ccfd8d495d890a2bc5622c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFileStatus path&lt;/code&gt; calls gets the &lt;code&gt;FileStatus&lt;/code&gt; information (user ID, size, access times, etc.) for the file &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getFileStatus path&lt;/code&gt; 호출은 파일 &lt;code&gt;path&lt;/code&gt; 대한 &lt;code&gt;FileStatus&lt;/code&gt; 정보 (사용자 ID, 크기, 액세스 시간 등)를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="1c4b2df9f9650d51c44fc63378f653450e8fbaa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; calls &lt;code&gt;getgrgid_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with &lt;code&gt;GroupID&lt;/code&gt;&lt;code&gt;gid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; 는 &lt;code&gt;getgrgid_r&lt;/code&gt; 을 호출 하여 &lt;code&gt;GroupID&lt;/code&gt; &lt;code&gt;gid&lt;/code&gt; 와 연관된 &lt;code&gt;GroupEntry&lt;/code&gt; 정보 를 얻습니다 . 이러한 그룹이 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 와 함께이 조작이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85c29b25ea39b82d40b02d29f39278619e3c5996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; calls &lt;code&gt;getgrgid_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with &lt;code&gt;GroupID&lt;/code&gt;&lt;code&gt;gid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; 는 &lt;code&gt;getgrgid_r&lt;/code&gt; 을 호출 하여 &lt;code&gt;GroupID&lt;/code&gt; &lt;code&gt;gid&lt;/code&gt; 와 관련된 &lt;code&gt;GroupEntry&lt;/code&gt; 정보 를 얻습니다 . 해당 그룹이 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 와 함께이 작업이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d99566a619942846eb4f8f101022a3e21cd7ef5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForName name&lt;/code&gt; calls &lt;code&gt;getgrnam_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with the group called &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForName name&lt;/code&gt; 은 &lt;code&gt;getgrnam_r&lt;/code&gt; 을 호출 하여 &lt;code&gt;name&lt;/code&gt; 이라는 그룹과 연관된 &lt;code&gt;GroupEntry&lt;/code&gt; 정보 를 얻습니다 . 이러한 그룹이 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 와 함께이 조작이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5377f754e4ff03e12d095983355683d1a2c03b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForName name&lt;/code&gt; calls &lt;code&gt;getgrnam_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with the group called &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="translated">&lt;code&gt;getGroupEntryForName name&lt;/code&gt; 은 &lt;code&gt;getgrnam_r&lt;/code&gt; 을 호출 하여 &lt;code&gt;name&lt;/code&gt; 이라는 그룹과 연관된 &lt;code&gt;GroupEntry&lt;/code&gt; 정보 를 얻습니다 . 해당 그룹이 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 와 함께이 작업이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13de22006fa5622016e7393522a11015373b3d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroups&lt;/code&gt; calls &lt;code&gt;getgroups&lt;/code&gt; to obtain the list of supplementary &lt;code&gt;GroupID&lt;/code&gt;s associated with the current process.</source>
          <target state="translated">&lt;code&gt;getGroups&lt;/code&gt; 는 &lt;code&gt;getgroups&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 보충 &lt;code&gt;GroupID&lt;/code&gt; 목록을 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="85af0049a29319ae7de0479eb0f344f0e66f16b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getLoginName&lt;/code&gt; calls &lt;code&gt;getlogin&lt;/code&gt; to obtain the login name associated with the current process.</source>
          <target state="translated">&lt;code&gt;getLoginName&lt;/code&gt; 은 &lt;code&gt;getlogin&lt;/code&gt; 을 호출 하여 현재 프로세스와 연관된 로그인 이름을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="cbddb8a78d2ffe61237c26bedc39c18a07770790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPathVar var path&lt;/code&gt; obtains the dynamic value of the requested configurable file limit or option associated with file or directory &lt;code&gt;path&lt;/code&gt;. For defined file limits, &lt;code&gt;getPathVar&lt;/code&gt; returns the associated value. For defined file options, the result of &lt;code&gt;getPathVar&lt;/code&gt; is undefined, but not failure.</source>
          <target state="translated">&lt;code&gt;getPathVar var path&lt;/code&gt; 는 요청 된 구성 가능한 파일 제한 또는 파일 또는 디렉토리 &lt;code&gt;path&lt;/code&gt; 와 관련된 옵션의 동적 값을 가져옵니다 . 정의 된 파일 제한의 경우 &lt;code&gt;getPathVar&lt;/code&gt; 는 관련 값을 반환합니다. 정의 된 파일 옵션의 경우 &lt;code&gt;getPathVar&lt;/code&gt; 의 결과 는 정의되지 않지만 실패는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="66d396e74c45dc35a39ef497b1e2868eefb84330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPendingSignals&lt;/code&gt; calls &lt;code&gt;sigpending&lt;/code&gt; to obtain the set of interrupts which have been received but are currently blocked.</source>
          <target state="translated">&lt;code&gt;getPendingSignals&lt;/code&gt; 는 &lt;code&gt;sigpending&lt;/code&gt; 을 호출 하여 수신되었지만 현재 차단 된 인터럽트 세트를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="f9d58ff35678f8b2b29a5d781fabf1cb87c05f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRealGroupID&lt;/code&gt; calls &lt;code&gt;getgid&lt;/code&gt; to obtain the real &lt;code&gt;GroupID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getRealGroupID&lt;/code&gt; 는 &lt;code&gt;getgid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 실제 &lt;code&gt;GroupID&lt;/code&gt; 를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="2a3a1137f3fbbbc0823d11c9ceed084d0845b810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRealUserID&lt;/code&gt; calls &lt;code&gt;getuid&lt;/code&gt; to obtain the real &lt;code&gt;UserID&lt;/code&gt; associated with the current process.</source>
          <target state="translated">&lt;code&gt;getRealUserID&lt;/code&gt; 는 &lt;code&gt;getuid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 실제 &lt;code&gt;UserID&lt;/code&gt; 를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="0a0848532c3948ab0f2e080e8d8f66facf8bf125" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getSignalMask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; to determine the set of interrupts which are currently being blocked.</source>
          <target state="translated">&lt;code&gt;getSignalMask&lt;/code&gt; 는 &lt;code&gt;sigprocmask&lt;/code&gt; 를 호출 하여 현재 차단중인 인터럽트 세트를 판별합니다.</target>
        </trans-unit>
        <trans-unit id="45792ac1182ddb07da8ad701cd5db05b437b3f26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getSlaveTerminalName&lt;/code&gt; calls &lt;code&gt;ptsname&lt;/code&gt; to obtain the name of the slave terminal associated with a pseudoterminal pair. The file descriptor to pass in must be that of the master.</source>
          <target state="translated">&lt;code&gt;getSlaveTerminalName&lt;/code&gt; 은 &lt;code&gt;ptsname&lt;/code&gt; 을 호출 하여 의사 터미널 쌍과 연관된 슬레이브 터미널의 이름을 얻습니다. 전달할 파일 디스크립터는 마스터의 디스크립터 여야합니다.</target>
        </trans-unit>
        <trans-unit id="0b9d53296999bcb92b005cdf6ca8476ec18bb8a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalAttributes fd&lt;/code&gt; calls &lt;code&gt;tcgetattr&lt;/code&gt; to obtain the &lt;code&gt;TerminalAttributes&lt;/code&gt; associated with &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getTerminalAttributes fd&lt;/code&gt; 는 &lt;code&gt;tcgetattr&lt;/code&gt; 을 호출 하여 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; 와 연관된 &lt;code&gt;TerminalAttributes&lt;/code&gt; 를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="0aabec5d2ccf6dc660c81c4d3db77eeda5c51c5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalName fd&lt;/code&gt; calls &lt;code&gt;ttyname&lt;/code&gt; to obtain a name associated with the terminal for &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;fd&lt;/code&gt; is associated with a terminal, &lt;code&gt;getTerminalName&lt;/code&gt; returns the name of the terminal.</source>
          <target state="translated">&lt;code&gt;getTerminalName fd&lt;/code&gt; 는 &lt;code&gt;ttyname&lt;/code&gt; 을 호출 하여 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; 의 터미널과 연관된 이름을 얻습니다 . &lt;code&gt;fd&lt;/code&gt; 가 터미널과 연관된 경우 , &lt;code&gt;getTerminalName&lt;/code&gt; 은 터미널 의 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f737b45d8d4b7f86b0a85afaefa9c1d471e82657" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalProcessGroupID fd&lt;/code&gt; calls &lt;code&gt;tcgetpgrp&lt;/code&gt; to obtain the &lt;code&gt;ProcessGroupID&lt;/code&gt; of the foreground process group associated with the terminal attached to &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getTerminalProcessGroupID fd&lt;/code&gt; 호출 &lt;code&gt;tcgetpgrp&lt;/code&gt; 수득 &lt;code&gt;ProcessGroupID&lt;/code&gt; 에 연결된 단말기와 연관된 전경 처리 그룹 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="87891a3f9d6eb6431b9cf1cc3d718af57ed5829e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTixFullName&lt;/code&gt; takes a binary or &lt;code&gt;.tix&lt;/code&gt;-file name, and normalizes it into a &lt;code&gt;.tix&lt;/code&gt;-file name.</source>
          <target state="translated">&lt;code&gt;getTixFullName&lt;/code&gt; 은 2 진 또는 &lt;code&gt;.tix&lt;/code&gt; 파일 이름을 사용하여 &lt;code&gt;.tix&lt;/code&gt; 파일 이름 으로 정규화합니다 .</target>
        </trans-unit>
        <trans-unit id="9261c091b62d2dfbb82de0c098cfc567fa937d7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForID gid&lt;/code&gt; calls &lt;code&gt;getpwuid_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with &lt;code&gt;UserID&lt;/code&gt;&lt;code&gt;uid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForID gid&lt;/code&gt; 는 &lt;code&gt;getpwuid_r&lt;/code&gt; 을 호출 하여 &lt;code&gt;UserID&lt;/code&gt; &lt;code&gt;uid&lt;/code&gt; 와 연관된 &lt;code&gt;UserEntry&lt;/code&gt; 정보 를 얻습니다 . 해당 사용자가 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 와 함께이 조작이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8344adfa513e619454773c358dd2db2dfd4aeb48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForID gid&lt;/code&gt; calls &lt;code&gt;getpwuid_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with &lt;code&gt;UserID&lt;/code&gt;&lt;code&gt;uid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForID gid&lt;/code&gt; 는 &lt;code&gt;getpwuid_r&lt;/code&gt; 을 호출 하여 &lt;code&gt;UserID&lt;/code&gt; &lt;code&gt;uid&lt;/code&gt; 와 연관된 &lt;code&gt;UserEntry&lt;/code&gt; 정보 를 얻습니다 . 이러한 사용자가 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 로 인해이 작업이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccf511082d2a6b712638b3e82d5840bf3ca63672" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForName name&lt;/code&gt; calls &lt;code&gt;getpwnam_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with the user login &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForName name&lt;/code&gt; 은 &lt;code&gt;getpwnam_r&lt;/code&gt; 을 호출 하여 사용자 로그인 &lt;code&gt;name&lt;/code&gt; 과 연관된 &lt;code&gt;UserEntry&lt;/code&gt; 정보 를 얻습니다 . 해당 사용자가 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 와 함께이 조작이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4164e1d23ba1b22b5610de03ae6cb68bb1d4105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForName name&lt;/code&gt; calls &lt;code&gt;getpwnam_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with the user login &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="translated">&lt;code&gt;getUserEntryForName name&lt;/code&gt; 은 &lt;code&gt;getpwnam_r&lt;/code&gt; 을 호출 하여 사용자 로그인 &lt;code&gt;name&lt;/code&gt; 과 관련된 &lt;code&gt;UserEntry&lt;/code&gt; 정보 를 얻습니다 . 이러한 사용자가 없으면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; 로 인해이 작업이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8740046480f41b804442de90b74552696ab9e20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getWorkingDirectory&lt;/code&gt; calls &lt;code&gt;getcwd&lt;/code&gt; to obtain the name of the current working directory.</source>
          <target state="translated">&lt;code&gt;getWorkingDirectory&lt;/code&gt; 는 &lt;code&gt;getcwd&lt;/code&gt; 를 호출 하여 현재 작업 디렉토리의 이름을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="4762bc4b56e65e8b8a41059f063dd83d23d621b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;graph :: Graph&lt;/code&gt; is the raw, array based adjacency list for the graph.</source>
          <target state="translated">&lt;code&gt;graph :: Graph&lt;/code&gt; 는 그래프 의 원시 배열 기반 인접 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e79558186bcedb7ea80b05cefae0ea91dd4a1a9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; in which to search</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; 검색 할 건초 더미</target>
        </trans-unit>
        <trans-unit id="7149c630b16c4633db4eba03d7f955c96e250e83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; in which to search.</source>
          <target state="translated">&lt;code&gt;haystack&lt;/code&gt; 검색 할 건초 더미 .</target>
        </trans-unit>
        <trans-unit id="8f32f6945456e580108cadc3338cc8b49521e04a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hh:mm:ss[.sss]&lt;/code&gt; (ISO 8601:2004(E) sec. 4.2.2.2, 4.2.2.4(a) extended format)</source>
          <target state="translated">&lt;code&gt;hh:mm:ss[.sss]&lt;/code&gt; (ISO 8601 : 2004 (E) 초 4.2.2.2, 4.2.2.4 (a) 확장 형식)</target>
        </trans-unit>
        <trans-unit id="2a73e769e2f0e725e70eea0a5095b2b787c516ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;historyFile&lt;/code&gt;: read/write the history to a file before and after the line input session.</source>
          <target state="translated">&lt;code&gt;historyFile&lt;/code&gt; : 라인 입력 세션 전후에 파일에 기록을 읽거나 씁니다.</target>
        </trans-unit>
        <trans-unit id="c698564f1a7e7c33afd149f30061f586392287cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc combine&lt;/code&gt; is the swiss army knife of &lt;code&gt;hpc&lt;/code&gt;. It can be used to take the difference between &lt;code&gt;.tix&lt;/code&gt; files, to subtract one &lt;code&gt;.tix&lt;/code&gt; file from another, or to add two &lt;code&gt;.tix&lt;/code&gt; files. hpc combine does not change the original &lt;code&gt;.tix&lt;/code&gt; file; it generates a new &lt;code&gt;.tix&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;hpc combine&lt;/code&gt; 의 스위스 군용 칼 &lt;code&gt;hpc&lt;/code&gt; . &lt;code&gt;.tix&lt;/code&gt; 파일 의 차이점을 파악 하거나 한 &lt;code&gt;.tix&lt;/code&gt; 파일을 다른 .tix 파일에서 빼 거나 두 개의 &lt;code&gt;.tix&lt;/code&gt; 파일 을 추가하는 데 사용할 수 있습니다. hpc 결합은 원본 &lt;code&gt;.tix&lt;/code&gt; 파일을 변경하지 않습니다 . 새로운 &lt;code&gt;.tix&lt;/code&gt; 파일을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="84c21af023ae06fb4936ed44b4cdebc2dee607a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc markup&lt;/code&gt; marks up source files into colored html.</source>
          <target state="translated">&lt;code&gt;hpc markup&lt;/code&gt; 소스 파일을 컬러 HTML로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7243cfbd88573b525191ebf4ad35c0dcbe0f0b2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc report&lt;/code&gt; gives a textual report of coverage. By default, all modules and packages are considered in generating report, unless include or exclude are used. The report is a summary unless the &lt;code&gt;--per-module&lt;/code&gt; flag is used. The &lt;code&gt;--xml-output&lt;/code&gt; option allows for tools to use hpc to glean coverage.</source>
          <target state="translated">&lt;code&gt;hpc report&lt;/code&gt; 는 적용 범위에 대한 텍스트 보고서를 제공합니다. 포함 또는 제외를 사용하지 않는 한 기본적으로 모든 모듈 및 패키지가 보고서 생성시 고려됩니다. &lt;code&gt;--per-module&lt;/code&gt; 플래그를 사용 하지 않으면 보고서는 요약 입니다. &lt;code&gt;--xml-output&lt;/code&gt; 도구 이삭 범위에 HPC를 사용하는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3252f4e6796500fd704525666c9774a65171e975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc sum&lt;/code&gt; adds together any number of &lt;code&gt;.tix&lt;/code&gt; files into a single &lt;code&gt;.tix&lt;/code&gt; file. &lt;code&gt;hpc sum&lt;/code&gt; does not change the original &lt;code&gt;.tix&lt;/code&gt; file; it generates a new &lt;code&gt;.tix&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;hpc sum&lt;/code&gt; 은 여러 &lt;code&gt;.tix&lt;/code&gt; 파일을 하나의 &lt;code&gt;.tix&lt;/code&gt; 파일에 추가 합니다. &lt;code&gt;hpc sum&lt;/code&gt; 은 원본 &lt;code&gt;.tix&lt;/code&gt; 파일을 변경하지 않습니다 . 새로운 &lt;code&gt;.tix&lt;/code&gt; 파일을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="7dcb7093805a2f32af47e2a28fbdb5856337eb0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hs_exit()&lt;/code&gt; normally causes the termination of any running Haskell threads in the system, and when &lt;code&gt;hs_exit()&lt;/code&gt; returns, there will be no more Haskell threads running. The runtime will then shut down the system in an orderly way, generating profiling output and statistics if necessary, and freeing all the memory it owns.</source>
          <target state="translated">&lt;code&gt;hs_exit()&lt;/code&gt; 일반적으로 시스템에서 실행중인 Haskell 스레드를 종료 &lt;code&gt;hs_exit()&lt;/code&gt; 리턴되면 더 이상 Haskell 스레드가 실행되지 않습니다. 그런 다음 런타임은 순서대로 시스템을 종료하고 필요한 경우 프로파일 링 출력 및 통계를 생성하고 소유 한 모든 메모리를 비 웁니다.</target>
        </trans-unit>
        <trans-unit id="6171e08dc403c1068b283577596b39ac17685cb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hs_free_stable_ptr_unsafe&lt;/code&gt; must be used &lt;em&gt;only&lt;/em&gt; when the table has been locked using &lt;code&gt;hs_lock_stable_ptr_table&lt;/code&gt;. It must be unlocked afterwards using &lt;code&gt;hs_unlock_stable_ptr_table&lt;/code&gt;. The Haskell garbage collector cannot run while the table is locked, so it should be unlocked promptly. The following operations are forbidden while the stable pointer table is locked:</source>
          <target state="translated">&lt;code&gt;hs_free_stable_ptr_unsafe&lt;/code&gt; 이 사용되어야 &lt;em&gt;에만&lt;/em&gt; 테이블을 사용하여 고정 된 경우 &lt;code&gt;hs_lock_stable_ptr_table&lt;/code&gt; 을 . &lt;code&gt;hs_unlock_stable_ptr_table&lt;/code&gt; 을 사용하여 나중에 잠금 해제해야합니다 . 테이블이 잠겨있는 동안 Haskell 가비지 수집기를 실행할 수 없으므로 즉시 잠금을 해제해야합니다. 안정 포인터 테이블이 잠겨있는 동안 다음 작업은 금지됩니다.</target>
        </trans-unit>
        <trans-unit id="158445a439d4ff5a6a7d5923dbb75384af873d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsc2hs&lt;/code&gt; normally operates by creating, compiling, and running a C program. That approach doesn&amp;rsquo;t work when cross-compiling &amp;mdash; in this case, the C compiler&amp;rsquo;s generates code for the target machine, not the host machine. For this situation, there&amp;rsquo;s a special mode &lt;code&gt;hsc2hs --cross-compile&lt;/code&gt; which can generate the .hs by extracting information from compilations only &amp;mdash; specifically, whether or not compilation fails.</source>
          <target state="translated">&lt;code&gt;hsc2hs&lt;/code&gt; 는 일반적으로 C 프로그램을 작성, 컴파일 및 실행하여 작동합니다. 이 방법은 크로스 컴파일시 작동하지 않습니다.이 경우 C 컴파일러는 호스트 시스템이 아닌 대상 시스템에 대한 코드를 생성합니다. 이러한 상황을 위해 컴파일 전용 정보 (특히 컴파일 실패 여부) 만 추출하여 .hs를 생성 할 수 있는 특수 모드 &lt;code&gt;hsc2hs --cross-compile&lt;/code&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d99d4db11281b54a6773aae14f2c6331f47f456e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsc2hs&lt;/code&gt; takes input files as arguments, and flags that modify its behavior:</source>
          <target state="translated">&lt;code&gt;hsc2hs&lt;/code&gt; 는 입력 파일을 인수로 사용하고 해당 동작을 수정하는 플래그를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3c128fada72033616aaef08247531117855db892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsig&lt;/code&gt; files are written in a variant of Haskell similar to &lt;code&gt;hs-boot&lt;/code&gt; files, but with some slight changes:</source>
          <target state="translated">&lt;code&gt;hsig&lt;/code&gt; 파일은 &lt;code&gt;hs-boot&lt;/code&gt; 파일 과 유사한 Haskell 변형으로 작성 되었지만 약간 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="fffb7b4d60dfc9369148b986d5c58f8a5d0a5726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; : 배열의 인덱스 유형 ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 의 인스턴스 여야 함 )</target>
        </trans-unit>
        <trans-unit id="b7aad8e1ace6210c4105af3b2907a570de93e87e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; : 배열의 인덱스 유형 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 의 인스턴스 여야 함 )</target>
        </trans-unit>
        <trans-unit id="db798c17f327bae423b0e022cc72a3fe7bfec9cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; : 배열의 인덱스 유형 ( &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 의 인스턴스 여야 함 )</target>
        </trans-unit>
        <trans-unit id="180d4e808183a0bb9849f66107190e0a00a9ef78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; : 배열의 인덱스 유형 ( &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 의 인스턴스 여야 함 )</target>
        </trans-unit>
        <trans-unit id="617a65d4ddc0f8fa29d5630aad7e1b8a5082dbf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;Ix&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; : 배열의 인덱스 유형 ( &lt;code&gt;Ix&lt;/code&gt; 의 인스턴스 여야 함 )</target>
        </trans-unit>
        <trans-unit id="5f54123d67fec07d114ce05638f1a7715e824f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;installHandler int handler iset&lt;/code&gt; calls &lt;code&gt;sigaction&lt;/code&gt; to install an interrupt handler for signal &lt;code&gt;int&lt;/code&gt;. If &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Default&lt;/code&gt;, &lt;code&gt;SIG_DFL&lt;/code&gt; is installed; if &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Ignore&lt;/code&gt;, &lt;code&gt;SIG_IGN&lt;/code&gt; is installed; if &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Catch action&lt;/code&gt;, a handler is installed which will invoke &lt;code&gt;action&lt;/code&gt; in a new thread when (or shortly after) the signal is received. If &lt;code&gt;iset&lt;/code&gt; is &lt;code&gt;Just s&lt;/code&gt;, then the &lt;code&gt;sa_mask&lt;/code&gt; of the &lt;code&gt;sigaction&lt;/code&gt; structure is set to &lt;code&gt;s&lt;/code&gt;; otherwise it is cleared. The previously installed signal handler for &lt;code&gt;int&lt;/code&gt; is returned</source>
          <target state="translated">&lt;code&gt;installHandler int handler iset&lt;/code&gt; 는 &lt;code&gt;sigaction&lt;/code&gt; 을 호출 하여 &lt;code&gt;int&lt;/code&gt; 신호에 대한 인터럽트 핸들러를 설치합니다 . 경우 &lt;code&gt;handler&lt;/code&gt; 입니다 &lt;code&gt;Default&lt;/code&gt; , &lt;code&gt;SIG_DFL&lt;/code&gt; 이 설치되어; 경우 &lt;code&gt;handler&lt;/code&gt; 입니다 &lt;code&gt;Ignore&lt;/code&gt; , &lt;code&gt;SIG_IGN&lt;/code&gt; 이 설치되어; 만약 &lt;code&gt;handler&lt;/code&gt; 이다 &lt;code&gt;Catch action&lt;/code&gt; , 핸들러가 호출되는 설치 &lt;code&gt;action&lt;/code&gt; (또는 직후에) 상기 신호가 수신되면 새로운 스레드. &lt;code&gt;iset&lt;/code&gt; 이 &lt;code&gt;Just s&lt;/code&gt; 이면 , &lt;code&gt;sigaction&lt;/code&gt; 구조 의 &lt;code&gt;sa_mask&lt;/code&gt; 는 &lt;code&gt;s&lt;/code&gt; 로 설정됩니다; 그렇지 않으면 지워집니다. 이전에 설치된 &lt;code&gt;int&lt;/code&gt; 신호 핸들러 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="2735fff850fb0ce80ad1b2ea06ae65280146117c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interruptible&lt;/code&gt; behaves exactly as &lt;code&gt;safe&lt;/code&gt;, except that when a &lt;code&gt;throwTo&lt;/code&gt; is directed at a thread in an interruptible foreign call, an OS-specific mechanism will be used to attempt to cause the foreign call to return:</source>
          <target state="translated">&lt;code&gt;interruptible&lt;/code&gt; &lt;code&gt;throwTo&lt;/code&gt; 가 인터럽트 가능한 외래 호출의 스레드로 전달 될 때 OS 특정 메커니즘을 사용하여 외래 호출을 반환하려고 시도 한다는 점을 제외하고, 인터럽트 가능 은 정확히 &lt;code&gt;safe&lt;/code&gt; 로 동작합니다 .</target>
        </trans-unit>
        <trans-unit id="2139518b81e5d97293508153cbed8ebe724f4f8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iserv-proxy&lt;/code&gt; needs to be built on the build machine by the build compiler.</source>
          <target state="translated">&lt;code&gt;iserv-proxy&lt;/code&gt; 는 빌드 컴파일러에 의해 빌드 머신에 빌드되어야합니다.</target>
        </trans-unit>
        <trans-unit id="27b48731a8a7e22b2dcac8d4798c86a629568e47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterate&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;iterate&lt;/code&gt; , &lt;code&gt;repeat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc3895b019e0a39f76ec6015b7f84c618a1850f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt; is chosen so that &lt;code&gt;C t1..tj (T v1...vk)&lt;/code&gt; is well-kinded. (Or, in the case of a &lt;code&gt;data instance&lt;/code&gt;, so that &lt;code&gt;C t1..tj (T s1..sk)&lt;/code&gt; is well kinded.)</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; 는 &lt;code&gt;C t1..tj (T v1...vk)&lt;/code&gt; 가 잘 정돈되도록 선택됩니다. (또는, (a)의 경우, &lt;code&gt;data instance&lt;/code&gt; , 그래서 &lt;code&gt;C t1..tj (T s1..sk)&lt;/code&gt; 잘 kinded된다.)</target>
        </trans-unit>
        <trans-unit id="622e7af3e93d01a6d8d5dc33d97ddfe36bec9e82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt; must appear explicitly in the kind of &lt;em&gt;some&lt;/em&gt; type variable in that declaration.</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; 는 선언에서 &lt;em&gt;어떤&lt;/em&gt; 유형 변수 의 종류로 명시 적으로 나타나야합니다 .</target>
        </trans-unit>
        <trans-unit id="29d303bf07ef6fd38f12c9c9c2623f4ab1cdfe97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;l&lt;/code&gt; the object linker</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; 객체 링커</target>
        </trans-unit>
        <trans-unit id="283469c10fca69b6183207317811536889b814a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexeme p&lt;/code&gt; first applies parser &lt;code&gt;p&lt;/code&gt; and then the &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; parser, returning the value of &lt;code&gt;p&lt;/code&gt;. Every lexical token (lexeme) is defined using &lt;code&gt;lexeme&lt;/code&gt;, this way every parse starts at a point without white space. Parsers that use &lt;code&gt;lexeme&lt;/code&gt; are called &lt;em&gt;lexeme&lt;/em&gt; parsers in this document.</source>
          <target state="translated">&lt;code&gt;lexeme p&lt;/code&gt; 는 먼저 파서 &lt;code&gt;p&lt;/code&gt; 를 적용한 다음 &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; 파서 를 적용 하여 &lt;code&gt;p&lt;/code&gt; 값을 반환합니다 . 모든 어휘 토큰 (lexeme)은 &lt;code&gt;lexeme&lt;/code&gt; 을 사용하여 정의되며 , 이런 식으로 모든 구문 분석은 공백이없는 지점에서 시작됩니다. 이 문서 에서는 &lt;code&gt;lexeme&lt;/code&gt; 를 사용하는 파서를 &lt;em&gt;lexeme&lt;/em&gt; 파서 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="ab75ab10eb3e1a67279f20cdfe9db09933d97808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexeme p&lt;/code&gt; first applies parser &lt;code&gt;p&lt;/code&gt; and then the &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; parser, returning the value of &lt;code&gt;p&lt;/code&gt;. Every lexical token (lexeme) is defined using &lt;code&gt;lexeme&lt;/code&gt;, this way every parse starts at a point without white space. Parsers that use &lt;code&gt;lexeme&lt;/code&gt; are called &lt;em&gt;lexeme&lt;/em&gt; parsers in this document.</source>
          <target state="translated">&lt;code&gt;lexeme p&lt;/code&gt; 는 먼저 파서 &lt;code&gt;p&lt;/code&gt; 를 적용한 다음 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; 파서 를 적용 하여 &lt;code&gt;p&lt;/code&gt; 값을 반환합니다 . 모든 어휘 토큰 (lexeme)은 &lt;code&gt;lexeme&lt;/code&gt; 을 사용하여 정의되며 , 이런 식으로 모든 구문 분석은 공백이없는 지점에서 시작됩니다. 이 문서 에서는 &lt;code&gt;lexeme&lt;/code&gt; 를 사용하는 파서를 &lt;em&gt;lexeme&lt;/em&gt; 파서 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="53d24678ad2c8b5597e9f0ac0655b8161c2e0827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookAhead p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; without consuming any input.</source>
          <target state="translated">&lt;code&gt;lookAhead p&lt;/code&gt; 구문 분석 &lt;code&gt;p&lt;/code&gt; 모든 입력을 사용하지 않고.</target>
        </trans-unit>
        <trans-unit id="be8260c972c6f5f473130a0d9d8505bde17b521f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; - The inner monad.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; - 내부 모나드</target>
        </trans-unit>
        <trans-unit id="2469e47161db63f9190e78307eaf5fe489c6f0fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; does not introduce one of the variables, &lt;code&gt;b&lt;/code&gt;, and thus is rejected.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; 은 변수 &lt;code&gt;b&lt;/code&gt; 중 하나를 도입하지 않으므로 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="0ccdfdf9e6a52d5ec89e3c0b202b8b38f2042c49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;many p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;zero&lt;/em&gt; or more times. Returns a list of the returned values of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;many p&lt;/code&gt; 는 파서 &lt;code&gt;p&lt;/code&gt; 를&lt;em&gt;0&lt;/em&gt; 번 이상 적용합니다 . 반환 된 &lt;code&gt;p&lt;/code&gt; 값 목록을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c8386ca93afe24efb128ad974653e26fa09db4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;many1 p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;one&lt;/em&gt; or more times. Returns a list of the returned values of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;many1 p&lt;/code&gt; 는 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를&lt;em&gt;한&lt;/em&gt; 번 이상 적용합니다 . 반환 된 &lt;code&gt;p&lt;/code&gt; 값 목록을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="532542dcaa9192e88329138dac2196c78bce7c41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manyTill p end&lt;/code&gt; applies parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;zero&lt;/em&gt; or more times until parser &lt;code&gt;end&lt;/code&gt; succeeds. Returns the list of values returned by &lt;code&gt;p&lt;/code&gt;. This parser can be used to scan comments:</source>
          <target state="translated">&lt;code&gt;manyTill p end&lt;/code&gt; 는 파서 &lt;code&gt;end&lt;/code&gt; 성공할 때까지 파서 &lt;code&gt;p&lt;/code&gt; 를&lt;em&gt;0&lt;/em&gt; 회 이상 적용 합니다. &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다 . 이 파서는 주석을 스캔하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd84809de445a13b8fa6c8bf6e31f5e5e33ad2ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manyTill p end&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, until &lt;code&gt;end&lt;/code&gt; succeeds. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;manyTill p end&lt;/code&gt; 의 0 개 이상의 발생 구문 분석 &lt;code&gt;p&lt;/code&gt; 때까지 &lt;code&gt;end&lt;/code&gt; 성공합니다. &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9e00baf13c159c42b130a388fa7c68571d949d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt;&lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;T t . &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; = &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; . t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; &lt;em&gt;XXX &lt;/em&gt; &lt;code&gt;T t . &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; = &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; . t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff044cde3ea44699eaa1733d0c06230bf5e937bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mappend&lt;/code&gt; takes the longer of two lifetimes.</source>
          <target state="translated">&lt;code&gt;mappend&lt;/code&gt; 는 두 수명보다 더 오래 걸립니다.</target>
        </trans-unit>
        <trans-unit id="cb09e948d69668b5b23f295b4403b0940d6ca175" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인 경우</target>
        </trans-unit>
        <trans-unit id="2ee5f7e457014efc55712b28856e1e8c43cc3a2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인 경우</target>
        </trans-unit>
        <trans-unit id="f2d6f36a3f246953bf407b238d5d4b4956e89839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mergeA&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="translated">&lt;code&gt;mergeA&lt;/code&gt; 는 먼저이 맵들을 키로 &quot;정렬&quot;합니다 :</target>
        </trans-unit>
        <trans-unit id="07564f3f6292128b7fb23deab444d624083a69a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5baaa477d2b0357e85c24cc65b9a0c8db647b2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cc58927959aeb9dab3dc72ab465ca570a504b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mkWeak# k v finalizer s&lt;/code&gt; creates a weak reference to value &lt;code&gt;k&lt;/code&gt;, with an associated reference to some value &lt;code&gt;v&lt;/code&gt;. If &lt;code&gt;k&lt;/code&gt; is still alive then &lt;code&gt;v&lt;/code&gt; can be retrieved using &lt;code&gt;deRefWeak#&lt;/code&gt;. Note that the type of &lt;code&gt;k&lt;/code&gt; must be represented by a pointer (i.e. of kind &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; or &lt;code&gt;TYPE 'UnliftedRep&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;mkWeak# k v finalizer s&lt;/code&gt; 는 값 &lt;code&gt;k&lt;/code&gt; 에 대한 약한 참조를 생성하고 일부 값 &lt;code&gt;v&lt;/code&gt; 에 대한 참조를 생성합니다 . &lt;code&gt;k&lt;/code&gt; 가 여전히 살아 있으면 &lt;code&gt;deRefWeak#&lt;/code&gt; 사용하여 &lt;code&gt;v&lt;/code&gt; 를 검색 할 수 있습니다 . &lt;code&gt;k&lt;/code&gt; 의 유형은 포인터로 표시되어야합니다 (예 : &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; 또는 &lt;code&gt;TYPE 'UnliftedRep&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f980f294fcd0aaa83bf0434a1d2798b56e011816" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modifyState f&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to the user state. Suppose that we want to count identifiers in a source, we could use the user state as:</source>
          <target state="translated">&lt;code&gt;modifyState f&lt;/code&gt; 는 함수 &lt;code&gt;f&lt;/code&gt; 를 사용자 상태에 적용합니다 . 소스에서 식별자를 세고 싶다고 가정하면 사용자 상태를 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e460b94b8a438c08063c41e5f7e745a074b16b31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; could be a Haskell source filename with or without the extension. If for some reason the filename starts with a &lt;code&gt;-&lt;/code&gt; you can use a second &lt;code&gt;--&lt;/code&gt; to indicate the end of flags. Anything following a second &lt;code&gt;--&lt;/code&gt; will be considered a program file or module name followed by its arguments. For example:</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 은 확장자가 있거나없는 Haskell 소스 파일 이름 일 수 있습니다. 어떤 이유로와 파일 이름 시작이있는 경우 &lt;code&gt;-&lt;/code&gt; 두 번째를 사용할 수 있습니다 &lt;code&gt;--&lt;/code&gt; 플래그의 끝을 나타냅니다. 두 번째를 다음 아무거나는 &lt;code&gt;--&lt;/code&gt; 프로그램 파일 고려 나 모듈 이름은 인수가 따라야 할 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="42df5d70d0c8653f3f8af294a83e6694b808b964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; &amp;mdash; non-moving garbage collector (see &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt;&lt;code&gt;--nonmoving-gc&lt;/code&gt;&lt;/a&gt;) events including start and end of the concurrent mark and census information to characterise heap fragmentation. Disabled by default.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; &amp;mdash; 힙 조각화를 특성화하기위한 동시 표시 및 인구 조사 정보의 시작 및 끝을 포함 하는 이동하지 않는 가비지 수집기 ( &lt;a href=&quot;#rts-flag---nonmoving-gc&quot;&gt; &lt;code&gt;--nonmoving-gc&lt;/code&gt; &lt;/a&gt; 참조 ) 이벤트입니다. 기본적으로 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="856fcb98eadbb78f6ce119264b935b6e706ee599" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is an integral number with the same sign as &lt;code&gt;x&lt;/code&gt;; and</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 은 &lt;code&gt;x&lt;/code&gt; 와 같은 부호를 가진 정수입니다 . 과</target>
        </trans-unit>
        <trans-unit id="33d513bf305b7a102b9a18dbc0caa74d78da4beb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;needle&lt;/code&gt; to search for</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; 검색 바늘</target>
        </trans-unit>
        <trans-unit id="ff8dbf7443db4c2f2acbe71b904cddb2944e1a8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;needle&lt;/code&gt; to search for. If this string is empty, an error will occur.</source>
          <target state="translated">&lt;code&gt;needle&lt;/code&gt; 검색 바늘 . 이 문자열이 비어 있으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3617913f70a336eee917e86d8a292b8fdc107490" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newBCO# instrs lits ptrs arity bitmap&lt;/code&gt; creates a new bytecode object. The resulting object encodes a function of the given arity with the instructions encoded in &lt;code&gt;instrs&lt;/code&gt;, and a static reference table usage bitmap given by &lt;code&gt;bitmap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;newBCO# instrs lits ptrs arity bitmap&lt;/code&gt; 은 새로운 바이트 코드 객체를 생성합니다. 얻어진 개체에 인코딩 지침 주어진 인수에 대응하는 기능 인코딩 &lt;code&gt;instrs&lt;/code&gt; 및 주어진 정적 참조 테이블 사용 비트 맵 &lt;code&gt;bitmap&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d5d69a0b7d37427bfa59138ce5d6ff629f5c0f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newtype: Use&lt;/code&gt;&lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;newtype: Use&lt;/code&gt; &lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt; &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; &lt;/a&gt; 사용</target>
        </trans-unit>
        <trans-unit id="5c6ce5e75313c95a77bc3bab8bfba53e26446a4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeFromVertex :: Vertex -&amp;gt; (node, key, [key])&lt;/code&gt; returns the node associated with the given 0-based &lt;code&gt;Int&lt;/code&gt; vertex; see &lt;em&gt;warning&lt;/em&gt; below.</source>
          <target state="translated">&lt;code&gt;nodeFromVertex :: Vertex -&amp;gt; (node, key, [key])&lt;/code&gt; 는 주어진 0 기반 &lt;code&gt;Int&lt;/code&gt; 버텍스 와 관련된 노드를 반환합니다 . 아래 &lt;em&gt;경고를&lt;/em&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c8e41909ff90e256d7c446570c47a96250d4299b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notFollowedBy p&lt;/code&gt; only succeeds when parser &lt;code&gt;p&lt;/code&gt; fails. This parser does not consume any input. This parser can be used to implement the 'longest match' rule. For example, when recognizing keywords (for example &lt;code&gt;let&lt;/code&gt;), we want to make sure that a keyword is not followed by a legal identifier character, in which case the keyword is actually an identifier (for example &lt;code&gt;lets&lt;/code&gt;). We can program this behaviour as follows:</source>
          <target state="translated">&lt;code&gt;notFollowedBy p&lt;/code&gt; 는 파서 &lt;code&gt;p&lt;/code&gt; 가 실패한 경우에만 성공 합니다. 이 파서는 입력을 소비하지 않습니다. 이 파서는 '최장 일치'규칙을 구현하는 데 사용할 수 있습니다. 예를 들어 키워드를 인식 할 때 (예 : &lt;code&gt;let&lt;/code&gt; ) 키워드 뒤에 유효한 식별자 문자가 없는지 확인하려고합니다.이 경우 키워드는 실제로 식별자입니다 (예 : &lt;code&gt;lets&lt;/code&gt; ). 다음과 같이이 동작을 프로그래밍 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a5fe52c557ae22b302bd14a1e2519394bd13a06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubInt&lt;/code&gt; is strict in the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubInt&lt;/code&gt; 는 목록의 요소가 엄격합니다.</target>
        </trans-unit>
        <trans-unit id="3f23a458f31f92b124a38b0e41aaac962127e60e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubIntOn&lt;/code&gt; is strict in the values of the function applied to the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubIntOn&lt;/code&gt; 은 목록의 요소에 적용되는 함수의 값이 엄격합니다.</target>
        </trans-unit>
        <trans-unit id="5d4b8287c8c8882e31b3f8d2880cdfeab11fc132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubOrd&lt;/code&gt; is strict in the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubOrd&lt;/code&gt; 는 목록의 요소가 엄격합니다.</target>
        </trans-unit>
        <trans-unit id="686732935ff85a620a7bd6262da47b1e3811624f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubOrdOn&lt;/code&gt; is strict in the values of the function applied to the elements of the list.</source>
          <target state="translated">&lt;code&gt;nubOrdOn&lt;/code&gt; 은 목록의 요소에 적용되는 함수의 값이 엄격합니다.</target>
        </trans-unit>
        <trans-unit id="7367896f7681bf47f880f32a2ceb33950d3c01be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oneOf cs&lt;/code&gt; succeeds if the current character is in the supplied list of characters &lt;code&gt;cs&lt;/code&gt;. Returns the parsed character. See also &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;oneOf cs&lt;/code&gt; 현재의 문자는 문자 제공된 목록에있는 경우 성공 &lt;code&gt;cs&lt;/code&gt; . 파싱 ​​된 문자를 반환합니다. 참조 &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2dba7dbf8a8ed84fe2b86840692ea4684e4d77da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oneOf cs&lt;/code&gt; succeeds if the current character is in the supplied list of characters &lt;code&gt;cs&lt;/code&gt;. Returns the parsed character. See also &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;oneOf cs&lt;/code&gt; 현재의 문자는 문자 제공된 목록에있는 경우 성공 &lt;code&gt;cs&lt;/code&gt; . 파싱 ​​된 문자를 반환합니다. 참조 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0a04efca569dfa9fbbe7d89cb7c4dd3f73aa983" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;openDirStream dir&lt;/code&gt; calls &lt;code&gt;opendir&lt;/code&gt; to obtain a directory stream for &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;openDirStream dir&lt;/code&gt; 호출 &lt;code&gt;opendir&lt;/code&gt; 에 대한 디렉토리 스트림 얻을 &lt;code&gt;dir&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="192a654c09f0df329ab2519a071a25e8eab05de9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;openPseudoTerminal&lt;/code&gt; creates a pseudoterminal (pty) pair, and returns the newly created pair as a (&lt;code&gt;master&lt;/code&gt;, &lt;code&gt;slave&lt;/code&gt;) tuple.</source>
          <target state="translated">&lt;code&gt;openPseudoTerminal&lt;/code&gt; 은 의사 터미널 (pty) 쌍을 작성하고 새로 작성된 쌍을 ( &lt;code&gt;master&lt;/code&gt; , &lt;code&gt;slave&lt;/code&gt; ) 튜플 로 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="bace0c54f31a15f5bddbe9ad572bb21e32508f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option x p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it returns the value &lt;code&gt;x&lt;/code&gt;, otherwise the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;option x p&lt;/code&gt; 는 파서 &lt;code&gt;p&lt;/code&gt; 를 적용하려고 시도합니다 . 경우 &lt;code&gt;p&lt;/code&gt; 는 입력을 사용하지 않고 실패, 그것은 값 반환 &lt;code&gt;x&lt;/code&gt; , 그렇지 않으면 값에 의해 반환, &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4ebf5c81299360ece1c5fcdf4eefbb30ff2d4c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option x p&lt;/code&gt; will either parse &lt;code&gt;p&lt;/code&gt; or return &lt;code&gt;x&lt;/code&gt; without consuming any input.</source>
          <target state="translated">&lt;code&gt;option x p&lt;/code&gt; 는 입력을 소비하지 않고 &lt;code&gt;p&lt;/code&gt; 를 구문 분석 하거나 &lt;code&gt;x&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="28b4086a811e0da08b201496f5d39d65225aa8a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optionMaybe p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, otherwise it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optionMaybe p&lt;/code&gt; 는 파서 &lt;code&gt;p&lt;/code&gt; 를 적용하려고 시도합니다 . 경우 &lt;code&gt;p&lt;/code&gt; 는 입력을 사용하지 않고 실패, 그것은 반환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , 그렇지 않으면 반환, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 에서 반환 된 값 &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b61bd1c4a189a12ad0e625a4e5613f6f3fd49a73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optionMaybe p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it return &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, otherwise it returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optionMaybe p&lt;/code&gt; 는 파서 &lt;code&gt;p&lt;/code&gt; 를 적용하려고 시도합니다 . 경우 &lt;code&gt;p&lt;/code&gt; 는 입력을 사용하지 않고 실패, 그것은 반환 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , 그렇지 않으면 반환, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 에서 반환 된 값 &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56f4b419c9e52aaebf3661bb8fc5fd960b9dbbbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optional p&lt;/code&gt; optionally parses &lt;code&gt;p&lt;/code&gt; and always returns &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optional p&lt;/code&gt; 선택적으로 구문 분석 &lt;code&gt;p&lt;/code&gt; 항상 수익을 &lt;code&gt;()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52a9fa7e27cef29971c48bc00d735454128fbbd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optional p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. It will parse &lt;code&gt;p&lt;/code&gt; or nothing. It only fails if &lt;code&gt;p&lt;/code&gt; fails after consuming input. It discards the result of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;optional p&lt;/code&gt; 는 파서 &lt;code&gt;p&lt;/code&gt; 를 적용하려고 시도합니다 . &lt;code&gt;p&lt;/code&gt; 또는 아무것도 해석 하지 않습니다. 경우에만 실패 &lt;code&gt;p&lt;/code&gt; 는 입력을 소모 후 실패합니다. &lt;code&gt;p&lt;/code&gt; 의 결과를 버립니다 .</target>
        </trans-unit>
        <trans-unit id="724942ba218da78a2b98ad86431785fc08972c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; &amp;mdash; parallel sparks (sampled). Enabled by default.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; &amp;mdash; 병렬 스파크 (샘플링). 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1500ec5b52d9695092d929dcc0d64f327ff5fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; 은 사용자 상태없이 Identity를 통해 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;filePath&lt;/code&gt; 오류 메시지 만 사용되며 빈 문자열 일 수 있습니다. &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 &lt;code&gt;a&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ) 유형 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5d2afcdb91582af684549b0b5b315b8b27b776e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; 은 사용자 상태없이 Identity를 통해 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;filePath&lt;/code&gt; 오류 메시지 만 사용되며 빈 문자열 일 수 있습니다. 반환 값 중 하나 &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 형의 값 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5054021e9af465d95264d1946eaa05a51db43fb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; 은 사용자 상태없이 Identity를 통해 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;filePath&lt;/code&gt; 오류 메시지 만 사용되며 빈 문자열 일 수 있습니다. &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 &lt;code&gt;a&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ) 유형 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="07ad6dff7f3b300c74accf61e4a0a68f323e23ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parse p filePath input&lt;/code&gt; 은 사용자 상태없이 Identity를 통해 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;filePath&lt;/code&gt; 오류 메시지 만 사용되며 빈 문자열 일 수 있습니다. 반환 값 중 하나 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 형의 값 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0116427892802de970e9caf1b430f5b1e1556ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a lazy bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 지연 바이트 스트링 파서 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 &lt;code&gt;a&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ) 유형 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d1d5cdfb4505652b21669dced167c2669cab0606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a lazy bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 지연 바이트 문자열 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . 반환 값 중 하나 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 형의 값 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b0af969a2929691936a95f88bc3a6ec38adc318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 엄격한 바이트 문자열 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 &lt;code&gt;a&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ) 유형 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7c92c41179d84bebc475d2609a463b9b7af88b5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 엄격한 바이트 문자열 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . 반환 값 중 하나 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 형의 값 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9274ce751d68bc092fadbf25016576d667e7a055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 엄격한 텍스트 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . 반환 값 중 하나 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 형의 값 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b56993adb3ddf07cc416f8812b76c888415e3090" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../text-1.2.3.2/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 엄격한 텍스트 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . 반환 값 중 하나 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 형의 값 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c82856998d9751a3733e60c0607c7b45ff990c62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 엄격한 텍스트 파서 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 &lt;code&gt;a&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ) 유형 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d74d5d2e59d089c23ba274edea898c51fbfd1b0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 엄격한 텍스트 파서 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 &lt;code&gt;a&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ) 유형 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="10e0c755040d08e0b997234debcadf0bec890c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a string parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 문자열 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 &lt;code&gt;a&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ) 유형 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="477dcde6e2ec4bd125a8dff3dd805107405d8b62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a string parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFromFile p filePath&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;filePath&lt;/code&gt; 에서 읽은 입력에 대해 문자열 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를 실행합니다 . 반환 값 중 하나 &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; ) 또는 형의 값 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43361805333d6340ba3d49341667b633c9628ea2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTrace label&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTrace label&lt;/code&gt; 은 불완전한 함수이며 &lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace로&lt;/a&gt; 구현되어 호출 될 때 남은 파서 상태를 콘솔에 인쇄합니다. 중간 상태를 검사하여 파서를 디버깅하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="93f3ac1ff6bb5a54866efe8adc497fffdb4a9ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTrace label&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTrace label&lt;/code&gt; 은 호출시 남아있는 구문 분석기 상태를 콘솔에 인쇄하는 &lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace로&lt;/a&gt; 구현 된 불순한 함수 입니다. 파서의 중간 상태를 검사하여 디버깅하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="32d68a071a6f06d0f798f3a76c7a234c33d6d89b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTraced label p&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It then continues to apply parser &lt;code&gt;p&lt;/code&gt;, and if &lt;code&gt;p&lt;/code&gt; fails will indicate that the label has been backtracked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTraced label p&lt;/code&gt; 는 불완전한 함수이며 &lt;a href=&quot;../base-4.13.0.0/debug-trace&quot;&gt;Debug.Trace로&lt;/a&gt; 구현되어 호출 될 때 남은 파서 상태를 콘솔에 인쇄합니다. 그런 다음 계속 파서 &lt;code&gt;p&lt;/code&gt; 를 적용 하고 &lt;code&gt;p&lt;/code&gt; 가 실패하면 레이블이 역 추적되었음을 나타냅니다. 중간 상태를 검사하여 파서를 디버깅하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1281f6233dfa11f4020888eb8828673fa8d58a8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserTraced label p&lt;/code&gt; is an impure function, implemented with &lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace&lt;/a&gt; that prints to the console the remaining parser state at the time it is invoked. It then continues to apply parser &lt;code&gt;p&lt;/code&gt;, and if &lt;code&gt;p&lt;/code&gt; fails will indicate that the label has been backtracked. It is intended to be used for debugging parsers by inspecting their intermediate states.</source>
          <target state="translated">&lt;code&gt;parserTraced label p&lt;/code&gt; 는 호출시 남아있는 파서 상태를 콘솔에 인쇄하는 &lt;a href=&quot;../base-4.14.1.0/debug-trace&quot;&gt;Debug.Trace로&lt;/a&gt; 구현 된 불순한 함수 입니다. 그런 다음 계속해서 파서 &lt;code&gt;p&lt;/code&gt; 를 적용 하고, &lt;code&gt;p&lt;/code&gt; 가 실패하면 레이블이 역 추적되었음을 나타냅니다. 파서의 중간 상태를 검사하여 디버깅하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="236d859b7609fc1ca1bc13d6b5fcf5a0b0f249f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserZero&lt;/code&gt; always fails without consuming any input. &lt;code&gt;parserZero&lt;/code&gt; is defined equal to the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; class and to the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;parserZero&lt;/code&gt; 는 항상 입력을 사용하지 않고 실패합니다. &lt;code&gt;parserZero&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; 클래스 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; 멤버 와 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; 클래스 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; 멤버 와 동일하게 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="9d89f53e0ad613258b6413d6827e25a6d280be5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserZero&lt;/code&gt; always fails without consuming any input. &lt;code&gt;parserZero&lt;/code&gt; is defined equal to the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; class and to the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; member of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;parserZero&lt;/code&gt; 는 입력을 사용하지 않고 항상 실패합니다. &lt;code&gt;parserZero&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; 클래스 의 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:mzero&quot;&gt;mzero&lt;/a&gt;&lt;/code&gt; 멤버 및 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; 클래스 의 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt; 멤버 와 동일하게 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="6b37ef552b620f945e9569f42eacd214db31f687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;purgeObj&lt;/code&gt; drops the symbols for the dynamic library from the symbol table. Unlike &lt;code&gt;&lt;a href=&quot;ghci-objlink#v:unloadObj&quot;&gt;unloadObj&lt;/a&gt;&lt;/code&gt;, the library will not be dropped memory during a future major GC.</source>
          <target state="translated">&lt;code&gt;purgeObj&lt;/code&gt; 는 심볼 테이블에서 동적 라이브러리의 심볼을 삭제합니다. &lt;code&gt;&lt;a href=&quot;ghci-objlink#v:unloadObj&quot;&gt;unloadObj&lt;/a&gt;&lt;/code&gt; 와 달리 , 향후 주요 GC 중에 라이브러리는 메모리가 삭제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="170f3799fb282ab1d8c87871e662353dc351f122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;putState st&lt;/code&gt; set the user state to &lt;code&gt;st&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;putState st&lt;/code&gt; 상기 사용자의 상태를 설정 &lt;code&gt;st&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8dae793f8fc921273397467c9a90d1a4fe2513a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;queryTerminal fd&lt;/code&gt; calls &lt;code&gt;isatty&lt;/code&gt; to determine whether or not &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; is associated with a terminal.</source>
          <target state="translated">&lt;code&gt;queryTerminal fd&lt;/code&gt; 통화 &lt;code&gt;isatty&lt;/code&gt; 을 하는지 여부를 결정하기 &lt;code&gt;Fd&lt;/code&gt; 에 &lt;code&gt;fd&lt;/code&gt; 단말기와 연관된다.</target>
        </trans-unit>
        <trans-unit id="886c07b9fda367d73fea1ebd7fa724ee8ac39ee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;raiseSignal int&lt;/code&gt; calls &lt;code&gt;kill&lt;/code&gt; to signal the current process with interrupt signal &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;raiseSignal int&lt;/code&gt; 호출을 &lt;code&gt;kill&lt;/code&gt; 인터럽트 신호와 현재 프로세스 신호를 &lt;code&gt;int&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6dcb68b814fda4f0e43be7d3203f944bd95bb03a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readCreateProcess&lt;/code&gt; works exactly like &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; except that it lets you pass &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; giving better flexibility.</source>
          <target state="translated">&lt;code&gt;readCreateProcess&lt;/code&gt; 는 더 나은 유연성을 제공하는 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; 를 전달할 수 있다는 점을 제외하고는 &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; 와 동일하게 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="81073c68ed5f7be32aa4c53668308268db887816" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readCreateProcessWithExitCode&lt;/code&gt; works exactly like &lt;code&gt;&lt;a href=&quot;system-process#v:readProcessWithExitCode&quot;&gt;readProcessWithExitCode&lt;/a&gt;&lt;/code&gt; except that it lets you pass &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; giving better flexibility.</source>
          <target state="translated">&lt;code&gt;readCreateProcessWithExitCode&lt;/code&gt; 는 더 나은 유연성을 제공하는 &lt;code&gt;&lt;a href=&quot;system-process#t:CreateProcess&quot;&gt;CreateProcess&lt;/a&gt;&lt;/code&gt; 를 전달할 수 있다는 점을 제외하고는 &lt;code&gt;&lt;a href=&quot;system-process#v:readProcessWithExitCode&quot;&gt;readProcessWithExitCode&lt;/a&gt;&lt;/code&gt; 와 동일하게 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="d854f1fd3410de9533ec03113bd2149d14e1e32f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readDirStream dp&lt;/code&gt; calls &lt;code&gt;readdir&lt;/code&gt; to obtain the next directory entry (&lt;code&gt;struct dirent&lt;/code&gt;) for the open directory stream &lt;code&gt;dp&lt;/code&gt;, and returns the &lt;code&gt;d_name&lt;/code&gt; member of that structure.</source>
          <target state="translated">&lt;code&gt;readDirStream dp&lt;/code&gt; 는 &lt;code&gt;readdir&lt;/code&gt; 을 호출 하여 열린 디렉토리 스트림 &lt;code&gt;dp&lt;/code&gt; 에 대한 다음 디렉토리 항목 ( &lt;code&gt;struct dirent&lt;/code&gt; ) 을 얻고 해당 구조 의 &lt;code&gt;d_name&lt;/code&gt; 멤버를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2dd1b8c25588d116697950fed46adb2fda59d402" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readProcess&lt;/code&gt; forks an external process, reads its standard output strictly, blocking until the process terminates, and returns the output string. The external process inherits the standard error.</source>
          <target state="translated">&lt;code&gt;readProcess&lt;/code&gt; 는 외부 프로세스를 분기하고 표준 출력을 엄격하게 읽고 프로세스가 종료 될 때까지 차단 한 다음 출력 문자열을 반환합니다. 외부 프로세스는 표준 오류를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="b887babad0ba6bd33de067b5d1b4e71a63412ecd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readProcessWithExitCode&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; but with two differences:</source>
          <target state="translated">&lt;code&gt;readProcessWithExitCode&lt;/code&gt; 는 readProcess 와 &lt;code&gt;&lt;a href=&quot;system-process#v:readProcess&quot;&gt;readProcess&lt;/a&gt;&lt;/code&gt; 하지만 두 가지 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f483a9990e96db9a4f03d5a02fa8dae77197ad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ready dev write msecs&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the device has data to read (if &lt;code&gt;write&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;) or space to write new data (if &lt;code&gt;write&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;). &lt;code&gt;msecs&lt;/code&gt; specifies how long to wait, in milliseconds.</source>
          <target state="translated">&lt;code&gt;ready dev write msecs&lt;/code&gt; 반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; (경우 장치가 읽을 데이터가있는 경우 &lt;code&gt;write&lt;/code&gt; 입니다 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; (경우) 또는 공간은 새로운 데이터를 기록하는 &lt;code&gt;write&lt;/code&gt; 입니다 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ). &lt;code&gt;msecs&lt;/code&gt; 는 대기 시간을 밀리 초 단위로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="98f3be57aded45701eafb922c4274e13ced485c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rec&lt;/code&gt; blocks can also be used inside &lt;code&gt;mdo&lt;/code&gt;-expressions, which will be treated as a single statement. However, it is good style to either use &lt;code&gt;mdo&lt;/code&gt; or &lt;code&gt;rec&lt;/code&gt; blocks in a single expression.</source>
          <target state="translated">&lt;code&gt;rec&lt;/code&gt; 블록은 &lt;code&gt;mdo&lt;/code&gt; -expressions 내에서도 사용될 수 있으며 단일 명령문으로 취급됩니다. 그러나 단일 표현식에서 &lt;code&gt;mdo&lt;/code&gt; 또는 &lt;code&gt;rec&lt;/code&gt; 블록을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="dc7e5bdf258b0658e02b38e74dc9e32538cea781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recover&lt;/code&gt; may raise an exception rather than skipping anything.</source>
          <target state="translated">&lt;code&gt;recover&lt;/code&gt; 는 아무것도 건너 뛰지 않고 예외를 발생시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="265d32357e56084e5000a238d381807aead6cf70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registerFd mgr cb fd evs lt&lt;/code&gt; registers interest in the events &lt;code&gt;evs&lt;/code&gt; on the file descriptor &lt;code&gt;fd&lt;/code&gt; for lifetime &lt;code&gt;lt&lt;/code&gt;. &lt;code&gt;cb&lt;/code&gt; is called for each event that occurs. Returns a cookie that can be handed to &lt;code&gt;&lt;a href=&quot;ghc-event#v:unregisterFd&quot;&gt;unregisterFd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;registerFd mgr cb fd evs lt&lt;/code&gt; 는 수명 &lt;code&gt;lt&lt;/code&gt; 동안 파일 디스크립터 &lt;code&gt;fd&lt;/code&gt; 의 이벤트 &lt;code&gt;evs&lt;/code&gt; 에 대한 관심을 등록 합니다. 발생하는 각 이벤트에 대해 &lt;code&gt;cb&lt;/code&gt; 가 호출됩니다. &lt;code&gt;&lt;a href=&quot;ghc-event#v:unregisterFd&quot;&gt;unregisterFd&lt;/a&gt;&lt;/code&gt; 로 전달할 수있는 쿠키를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ceba8248ce54a903b180a608d6cdff89c75e179e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyAnnotations target&lt;/code&gt; returns the list of annotations associated with &lt;code&gt;target&lt;/code&gt;. Only the annotations that are appropriately typed is returned. So if you have &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; annotations for the same target, you have to call this function twice.</source>
          <target state="translated">&lt;code&gt;reifyAnnotations target&lt;/code&gt; 수익률을과 관련된 주석의 목록 &lt;code&gt;target&lt;/code&gt; . 적절하게 입력 된 주석 만 반환됩니다. 따라서 동일한 대상에 대해 &lt;code&gt;Int&lt;/code&gt; 및 &lt;code&gt;String&lt;/code&gt; 주석이있는 경우이 함수를 두 번 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="1d5cf4e2162253915e3ee1295e39df377a108dba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyConStrictness nm&lt;/code&gt; looks up the strictness information for the fields of the constructor with the name &lt;code&gt;nm&lt;/code&gt;. Note that the strictness information that &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; returns may not correspond to what is written in the source code. For example, in the following data declaration:</source>
          <target state="translated">&lt;code&gt;reifyConStrictness nm&lt;/code&gt; 는 이름이 &lt;code&gt;nm&lt;/code&gt; 인 생성자의 필드에 대한 엄격 성 정보를 찾습니다 . &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; 가 리턴 하는 엄격 성 정보 는 소스 코드에 작성된 내용과 일치하지 않을 수 있습니다. 예를 들어, 다음 데이터 선언에서 :</target>
        </trans-unit>
        <trans-unit id="57fa87179057dc8ec4e7011d77aa926ee76aecb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyConStrictness nm&lt;/code&gt; looks up the strictness information for the fields of the constructor with the name &lt;code&gt;nm&lt;/code&gt;. Note that the strictness information that &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; returns may not correspond to what is written in the source code. For example, in the following data declaration:</source>
          <target state="translated">&lt;code&gt;reifyConStrictness nm&lt;/code&gt; 는 이름이 &lt;code&gt;nm&lt;/code&gt; 인 생성자의 필드에 대한 엄격 성 정보를 찾습니다 . &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; 가 리턴 하는 엄격 성 정보 는 소스 코드에 작성된 내용과 일치하지 않을 수 있습니다. 예를 들어, 다음 데이터 선언에서 :</target>
        </trans-unit>
        <trans-unit id="3171898bb71444e3f243c891e7ea1ff27407d6b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; 시도에 대한 정착 선언 찾을 수 &lt;code&gt;nm&lt;/code&gt; . 함수 예를 들어, &lt;code&gt;foo&lt;/code&gt; 는이 고정성에 선언이 &lt;code&gt;infixr 7 foo&lt;/code&gt; 는 다음 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; 반환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; . 기능 &lt;code&gt;bar&lt;/code&gt; 에 고 정성 선언이 없으면 &lt;code&gt;reifyFixity 'bar&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 리턴 하므로 &lt;code&gt;bar&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; 가 있다고 가정 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9186e7ae6d03c2aeb322f6526d5dc2396a52ba7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyFixity nm&lt;/code&gt; attempts to find a fixity declaration for &lt;code&gt;nm&lt;/code&gt;. For example, if the function &lt;code&gt;foo&lt;/code&gt; has the fixity declaration &lt;code&gt;infixr 7 foo&lt;/code&gt;, then &lt;code&gt;reifyFixity 'foo&lt;/code&gt; would return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt;. If the function &lt;code&gt;bar&lt;/code&gt; does not have a fixity declaration, then &lt;code&gt;reifyFixity 'bar&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, so you may assume &lt;code&gt;bar&lt;/code&gt; has &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyFixity nm&lt;/code&gt; 시도에 대한 정착 선언 찾을 수 &lt;code&gt;nm&lt;/code&gt; . 함수 예를 들어, &lt;code&gt;foo&lt;/code&gt; 는이 고정성에 선언이 &lt;code&gt;infixr 7 foo&lt;/code&gt; 는 다음 &lt;code&gt;reifyFixity 'foo&lt;/code&gt; 반환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#t:Fixity&quot;&gt;Fixity&lt;/a&gt; 7 &lt;a href=&quot;language-haskell-th-syntax#v:InfixR&quot;&gt;InfixR&lt;/a&gt;)&lt;/code&gt; . 기능 &lt;code&gt;bar&lt;/code&gt; 에 고 정성 선언이 없으면 &lt;code&gt;reifyFixity 'bar&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 리턴 하므로 &lt;code&gt;bar&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:defaultFixity&quot;&gt;defaultFixity&lt;/a&gt;&lt;/code&gt; 가 있다고 가정 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ec02029956845456aa9222455473fd38db7f2e45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 포함 &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; 관계없이 여부 및 &lt;code&gt;B&lt;/code&gt; 자체는 구현 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="283004a3b86ddf80020a048e53a2844f731c1145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; contains the &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; regardless of whether &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; themselves implement &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Eq [ &lt;a href=&quot;language-haskell-th-syntax#v:TupleT&quot;&gt;TupleT&lt;/a&gt; 2 `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''A `&lt;a href=&quot;language-haskell-th-syntax#v:AppT&quot;&gt;AppT&lt;/a&gt;` &lt;a href=&quot;language-haskell-th-syntax#v:ConT&quot;&gt;ConT&lt;/a&gt; ''B ]&lt;/code&gt; 포함 &lt;code&gt;instance (Eq a, Eq b) =&amp;gt; Eq (a, b)&lt;/code&gt; 관계없이 여부 및 &lt;code&gt;B&lt;/code&gt; 자체는 구현 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c88069868bb5989758442814f5f3137ad959b9a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; 는 사용 가능한 모든 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 인스턴스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7d6895425c26a36b390cb51e247d255d052077ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; produces every available instance of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reifyInstances ''Show [ &lt;a href=&quot;language-haskell-th-syntax#v:VarT&quot;&gt;VarT&lt;/a&gt; (&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt; &quot;a&quot;) ]&lt;/code&gt; 는 사용 가능한 모든 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 인스턴스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="8593931ee33b1f35174c28ea1bd5868e84bf8fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyInstances nm tys&lt;/code&gt; returns a list of visible instances of &lt;code&gt;nm tys&lt;/code&gt;. That is, if &lt;code&gt;nm&lt;/code&gt; is the name of a type class, then all instances of this class at the types &lt;code&gt;tys&lt;/code&gt; are returned. Alternatively, if &lt;code&gt;nm&lt;/code&gt; is the name of a data family or type family, all instances of this family at the types &lt;code&gt;tys&lt;/code&gt; are returned.</source>
          <target state="translated">&lt;code&gt;reifyInstances nm tys&lt;/code&gt; 수익률을 보이는 인스턴스의 목록 &lt;code&gt;nm tys&lt;/code&gt; . 즉, &lt;code&gt;nm&lt;/code&gt; 이 유형 클래스의 이름이면 유형 &lt;code&gt;tys&lt;/code&gt; 에서이 클래스의 모든 인스턴스 가 리턴됩니다. 또는 &lt;code&gt;nm&lt;/code&gt; 이 데이터 패밀리 또는 유형 패밀리의 이름 인 경우 유형 &lt;code&gt;tys&lt;/code&gt; 에서이 패밀리의 모든 인스턴스 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="b0d42ac930e50199fc7453bb2278f37f2da1f282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyModule mod&lt;/code&gt; looks up information about module &lt;code&gt;mod&lt;/code&gt;. To look up the current module, call this function with the return value of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyModule mod&lt;/code&gt; 는 모듈 &lt;code&gt;mod&lt;/code&gt; 에 대한 정보를 찾습니다 . 현재 모듈을 찾으려면 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:thisModule&quot;&gt;thisModule&lt;/a&gt;&lt;/code&gt; 의 반환 값으로이 함수를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="575396fa065d49a249a7e28aff7323762a2a438f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyRoles nm&lt;/code&gt; returns the list of roles associated with the parameters of the tycon &lt;code&gt;nm&lt;/code&gt;. Fails if &lt;code&gt;nm&lt;/code&gt; cannot be found or is not a tycon. The returned list should never contain &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyRoles nm&lt;/code&gt; 반환에게 TYCON의의 매개 변수와 관련된 역할 목록 &lt;code&gt;nm&lt;/code&gt; 의 . &lt;code&gt;nm&lt;/code&gt; 를 찾을 수 없거나 tycon이 아닌 경우 실패합니다 . 반환 된리스트에는 &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt; 이 포함 되어서 는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="3965028a5f0f0e3fcee0452d77c2e97741ed567e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reifyRoles nm&lt;/code&gt; returns the list of roles associated with the parameters of the tycon &lt;code&gt;nm&lt;/code&gt;. Fails if &lt;code&gt;nm&lt;/code&gt; cannot be found or is not a tycon. The returned list should never contain &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reifyRoles nm&lt;/code&gt; 반환에게 TYCON의의 매개 변수와 관련된 역할 목록 &lt;code&gt;nm&lt;/code&gt; 의 . &lt;code&gt;nm&lt;/code&gt; 를 찾을 수 없거나 tycon이 아닌 경우 실패합니다 . 반환 된리스트에는 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InferR&quot;&gt;InferR&lt;/a&gt;&lt;/code&gt; 이 포함 되어서 는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="0aaf5a16b5281de946b561ad54cd72f255f67752" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote-iserv&lt;/code&gt; needs to be built with the cross compiler to be executed on the remote host. Or in the case of using it on the same host the stage2 compiler will do as well.</source>
          <target state="translated">&lt;code&gt;remote-iserv&lt;/code&gt; 는 원격 호스트에서 실행될 크로스 컴파일러로 빌드되어야합니다. 또는 동일한 호스트에서 사용하는 경우 stage2 컴파일러도 수행합니다.</target>
        </trans-unit>
        <trans-unit id="f9d448e97359782a5dbe07e79da2577eca574e63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;removeLink path&lt;/code&gt; removes the link named &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;removeLink path&lt;/code&gt; 라는 링크를 제거 &lt;code&gt;path&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="550bb511ad425f8c4f3c908fe6da9909ef7c475c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rename old new&lt;/code&gt; renames a file or directory from &lt;code&gt;old&lt;/code&gt; to &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rename old new&lt;/code&gt; 이름 변경을에서 파일이나 디렉토리 &lt;code&gt;old&lt;/code&gt; 에 &lt;code&gt;new&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="155b28beb538e403a66daa23e12f814af17aba07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacement&lt;/code&gt; to replace &lt;code&gt;needle&lt;/code&gt; with.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; 교체 &lt;code&gt;needle&lt;/code&gt; 과 함께합니다.</target>
        </trans-unit>
        <trans-unit id="ba4e244589f4c5565cb799374bf758dedf3facf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rewindDirStream dp&lt;/code&gt; calls &lt;code&gt;rewinddir&lt;/code&gt; to reposition the directory stream &lt;code&gt;dp&lt;/code&gt; at the beginning of the directory.</source>
          <target state="translated">&lt;code&gt;rewindDirStream dp&lt;/code&gt; 는 &lt;code&gt;rewinddir&lt;/code&gt; 을 호출합니다. 을 하여 디렉토리 시작 부분에서 디렉토리 스트림 &lt;code&gt;dp&lt;/code&gt; 를 재배치합니다 .</target>
        </trans-unit>
        <trans-unit id="bee3ee293e4f137dbc8b105d9ba4102b86baba79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runInteractiveProcess&lt;/code&gt; blocks signals around the fork(). Since blocking/unblocking of signals is a global state operation, we need to ensure mutual exclusion of calls to &lt;code&gt;runInteractiveProcess&lt;/code&gt;. This lock is exported so that other libraries which also need to fork() (and also need to make the same global state changes) can protect their changes with the same lock. See &lt;a href=&quot;https://github.com/haskell/process/pull/154&quot;&gt;https://github.com/haskell/process/pull/154&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;runInteractiveProcess&lt;/code&gt; 는 fork () 주위의 신호를 차단합니다. 신호 차단 / 차단 해제는 전역 상태 작업이므로 &lt;code&gt;runInteractiveProcess&lt;/code&gt; 호출에 대한 상호 배제를 보장해야합니다 . 이 잠금을 내 보내서 fork ()해야하는 (그리고 동일한 전역 상태 변경이 필요한) 다른 라이브러리도 동일한 잠금으로 변경 사항을 보호 할 수 있습니다. &lt;a href=&quot;https://github.com/haskell/process/pull/154&quot;&gt;https://github.com/haskell/process/pull/154를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="34289d913a16bfedba5ca3d6752f02385b8b653b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runghc&lt;/code&gt; allows you to run Haskell programs without first having to compile them.</source>
          <target state="translated">&lt;code&gt;runghc&lt;/code&gt; 를 사용하면 먼저 컴파일하지 않아도 Haskell 프로그램을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b84851a67c47a052297b1232f321d809608f6e15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s1 .. sm&lt;/code&gt; do not contain any type family constructors,</source>
          <target state="translated">&lt;code&gt;s1 .. sm&lt;/code&gt; 에는 유형 패밀리 생성자가 포함되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3923d4c847731e9498f0e85f056ea723a3948e90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; &amp;mdash; scheduler events, including Haskell thread creation and start/stop events. Enabled by default.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; - 하스켈 스레드 생성 및 시작 / 정지 이벤트를 포함 스케줄러 이벤트. 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="36bb8b9f5b49f0248d1a78893f02454f60534738" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; - The state.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; - 상태</target>
        </trans-unit>
        <trans-unit id="68bd906be5272ad750e3c56fccd45549df340855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt;: the state variable argument for the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 유형 의 상태 변수 인수</target>
        </trans-unit>
        <trans-unit id="8c6429e6d8889099651756a94a20ea03db85310f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt;: the state variable argument for the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 유형에 대한 상태 변수 인수</target>
        </trans-unit>
        <trans-unit id="207537d27d8ae7f188d92ab61ff49bb12848f7e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt;: the state variable argument for the &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 유형 의 상태 변수 인수</target>
        </trans-unit>
        <trans-unit id="c42b28513e488d4362f2dccd9d0d96c921e9f416" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scheduleAlarm i&lt;/code&gt; calls &lt;code&gt;alarm&lt;/code&gt; to schedule a real time alarm at least &lt;code&gt;i&lt;/code&gt; seconds in the future.</source>
          <target state="translated">&lt;code&gt;scheduleAlarm i&lt;/code&gt; 는 &lt;code&gt;alarm&lt;/code&gt; 을 호출 하여 향후 &lt;code&gt;i&lt;/code&gt; 초 이상 실시간 알람 을 예약합니다 .</target>
        </trans-unit>
        <trans-unit id="b241c731169644e013bae8079e23dda9697ded53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sendBreak fd duration&lt;/code&gt; calls &lt;code&gt;tcsendbreak&lt;/code&gt; to transmit a continuous stream of zero-valued bits on &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; for the specified implementation-dependent &lt;code&gt;duration&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sendBreak fd duration&lt;/code&gt; 은 &lt;code&gt;tcsendbreak&lt;/code&gt; 를 호출 하여 지정된 구현 종속 &lt;code&gt;duration&lt;/code&gt; &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; 에서 0 값 비트의 연속 스트림을 전송합니다 .</target>
        </trans-unit>
        <trans-unit id="932b7380a5c3d8b991073fc982fdfa0124a38a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepBy p sep&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sepBy p sep&lt;/code&gt; 파싱은 &lt;em&gt;제로&lt;/em&gt; 또는 그 이상의 사건 &lt;code&gt;p&lt;/code&gt; ,에 의해 분리 &lt;code&gt;sep&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="d753d6b553c2ce2fda36548d1af42e8658527e8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepBy p sep&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sepBy p sep&lt;/code&gt; 파싱은 0 개 이상의 어커런스 &lt;code&gt;p&lt;/code&gt; ,에 의해 분리 &lt;code&gt;sep&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="b4683bfa7aac305771a4a95bac801e3f83e796a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepBy1 p sep&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sepBy1 p sep&lt;/code&gt; 파싱 &lt;em&gt;하나 명&lt;/em&gt; 의 이상의 발생 &lt;code&gt;p&lt;/code&gt; 로 구분 &lt;code&gt;sep&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="a36ce76f271256567b0fccdc5bddcc30dbb27a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepBy1 p sep&lt;/code&gt; parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sepBy1 p sep&lt;/code&gt; 의 하나 이상의 어커런스 파싱 &lt;code&gt;p&lt;/code&gt; 로 분리 &lt;code&gt;sep&lt;/code&gt; . &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="d4514573ecb7ee67cbba21f7d6e4bf8c60569679" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepEndBy p sep&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and optionally ended by &lt;code&gt;sep&lt;/code&gt;, ie. haskell style statements. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sepEndBy p sep&lt;/code&gt; 는 &lt;em&gt;0&lt;/em&gt; 개 이상의 &lt;code&gt;p&lt;/code&gt; 발생을 구문 분석 하고 , &lt;code&gt;sep&lt;/code&gt; 로 구분되고 선택적으로 끝납니다 . 하스켈 스타일 문. &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="15f8af570dc63730d757c1ef207b9f8df71771f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sepEndBy1 p sep&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and optionally ended by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sepEndBy1 p sep&lt;/code&gt; 는 분리하여 선택적으로 &lt;code&gt;sep&lt;/code&gt; 로 끝나는 &lt;em&gt;하나&lt;/em&gt; 이상의 &lt;code&gt;p&lt;/code&gt; 발생을 구문 분석 합니다. &lt;code&gt;p&lt;/code&gt; 가 반환 한 값 목록을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="a3a27f76df4d4fb5d967bac56e73e4bdf074f5cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setByteArray# ba off len c&lt;/code&gt; sets the byte range &lt;code&gt;[off, off+len]&lt;/code&gt; of the &lt;code&gt;MutableByteArray#&lt;/code&gt; to the byte &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setByteArray# ba off len c&lt;/code&gt; 바이트 범위를 설정한다 &lt;code&gt;[off, off+len]&lt;/code&gt; 의 &lt;code&gt;MutableByteArray#&lt;/code&gt; 바이트로 &lt;code&gt;c&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="58e35895811f37bfd4db9306e73a869a809a08bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setEffectiveGroupID uid&lt;/code&gt; calls &lt;code&gt;setegid&lt;/code&gt; to set the effective group-id associated with the current process to &lt;code&gt;gid&lt;/code&gt;. This does not update the real group-id or set-group-id.</source>
          <target state="translated">&lt;code&gt;setEffectiveGroupID uid&lt;/code&gt; 는 &lt;code&gt;setegid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 유효 그룹 ID를 &lt;code&gt;gid&lt;/code&gt; 로 설정합니다. 합니다. 실제 group-id 또는 set-group-id는 업데이트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f5578ba6a4f348fd36d3a550923fc508b1a6c88a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setEffectiveUserID uid&lt;/code&gt; calls &lt;code&gt;seteuid&lt;/code&gt; to set the effective user-id associated with the current process to &lt;code&gt;uid&lt;/code&gt;. This does not update the real user-id or set-user-id.</source>
          <target state="translated">&lt;code&gt;setEffectiveUserID uid&lt;/code&gt; 는 &lt;code&gt;seteuid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 유효 사용자 ID를 &lt;code&gt;uid&lt;/code&gt; 로 설정 합니다. 실제 사용자 ID 또는 set-user-id는 업데이트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81fcdecb45f79ccf1f68cffd11144812c0eb7951" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setEnv name value&lt;/code&gt; sets the specified environment variable to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setEnv name value&lt;/code&gt; 은 지정된 환경 변수를 &lt;code&gt;value&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="56843a81fcccdcb43ea574b7311cb41248a05565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setFdMode fd mode&lt;/code&gt; acts like &lt;code&gt;setFileMode&lt;/code&gt; but uses a file descriptor &lt;code&gt;fd&lt;/code&gt; instead of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setFdMode fd mode&lt;/code&gt; 는 &lt;code&gt;setFileMode&lt;/code&gt; 처럼 작동 하지만 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; 대신 파일 디스크립터 &lt;code&gt;fd&lt;/code&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="7eb32e620d3c7d1d6f887e0a29119dd6bca99be4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setFdMode fd mode&lt;/code&gt; acts like &lt;code&gt;setFileMode&lt;/code&gt; but uses a file descriptor &lt;code&gt;fd&lt;/code&gt; instead of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setFdMode fd mode&lt;/code&gt; 는 &lt;code&gt;setFileMode&lt;/code&gt; 처럼 작동 하지만 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; 대신 파일 설명자 &lt;code&gt;fd&lt;/code&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="ffda38437b74002f3ab73764cb13b7c93039a299" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setFileCreationMask mode&lt;/code&gt; sets the file mode creation mask to &lt;code&gt;mode&lt;/code&gt;. Modes set by this operation are subtracted from files and directories upon creation. The previous file creation mask is returned.</source>
          <target state="translated">&lt;code&gt;setFileCreationMask mode&lt;/code&gt; 는 파일 모드 작성 마스크를 &lt;code&gt;mode&lt;/code&gt; 로 설정합니다. . 이 조작으로 설정된 모드는 작성시 파일 및 디렉토리에서 뺍니다. 이전 파일 생성 마스크가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8eb867a5a2013f449224127aa025bb592268a99d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setFileMode path mode&lt;/code&gt; changes permission of the file given by &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;mode&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;path&lt;/code&gt; doesn't exist or if the effective user ID of the current process is not that of the file's owner.</source>
          <target state="translated">&lt;code&gt;setFileMode path mode&lt;/code&gt; 는 &lt;code&gt;path&lt;/code&gt; 로 지정된 파일의 권한을 mode로 변경 &lt;code&gt;mode&lt;/code&gt; . &lt;code&gt;path&lt;/code&gt; 가 존재하지 않거나 현재 프로세스의 유효 사용자 ID가 파일 소유자의 ID가 아닌 경우 &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; 과 함께이 조작이 실패 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5a727db0eead596618d8587d321ff8bbace2092" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setFileMode path mode&lt;/code&gt; changes permission of the file given by &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;mode&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;path&lt;/code&gt; doesn't exist or if the effective user ID of the current process is not that of the file's owner.</source>
          <target state="translated">&lt;code&gt;setFileMode path mode&lt;/code&gt; 는 &lt;code&gt;path&lt;/code&gt; 로 지정된 파일의 권한을 mode로 변경 &lt;code&gt;mode&lt;/code&gt; . &lt;code&gt;path&lt;/code&gt; 가 존재하지 않거나 현재 프로세스의 유효 사용자 ID가 파일 소유자의 ID가 아닌 경우 &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; 과 함께이 조작이 실패 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b178f8ce3d50ce801bf6b2f53e4f64dee92925da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setFileTimes path atime mtime&lt;/code&gt; sets the access and modification times associated with file &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;atime&lt;/code&gt; and &lt;code&gt;mtime&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;setFileTimes path atime mtime&lt;/code&gt; 파일과 연관된 액세스 및 수정 시간 설정 &lt;code&gt;path&lt;/code&gt; 까지 &lt;code&gt;atime&lt;/code&gt; 및 &lt;code&gt;mtime&lt;/code&gt; 에 각각이.</target>
        </trans-unit>
        <trans-unit id="dfa90c6531c31f16f0794119cacd3d6de78a6275" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setGroupID gid&lt;/code&gt; calls &lt;code&gt;setgid&lt;/code&gt; to set the real, effective, and saved set-group-id associated with the current process to &lt;code&gt;gid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setGroupID gid&lt;/code&gt; &lt;code&gt;setgid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 실제 유효하고 저장된 set-group-id를 &lt;code&gt;gid&lt;/code&gt; 로 설정합니다. 합니다.</target>
        </trans-unit>
        <trans-unit id="cda9d847ff408053039c5d76348b7eca00aa0682" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setGroups&lt;/code&gt; calls &lt;code&gt;setgroups&lt;/code&gt; to set the list of supplementary &lt;code&gt;GroupID&lt;/code&gt;s associated with the current process.</source>
          <target state="translated">&lt;code&gt;setGroups&lt;/code&gt; 호출 &lt;code&gt;setgroups&lt;/code&gt; 을을 보충의 목록을 설정하는 &lt;code&gt;GroupID&lt;/code&gt; 하여 현재 프로세스와 연관된 .</target>
        </trans-unit>
        <trans-unit id="05b6623dc4a1393e991d4276e89fa7b1f65a2ce3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setInput input&lt;/code&gt; continues parsing with &lt;code&gt;input&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;text-parsec#v:getInput&quot;&gt;getInput&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;setInput&lt;/code&gt; functions can for example be used to deal with #include files.</source>
          <target state="translated">&lt;code&gt;setInput input&lt;/code&gt; 은 input 과 구문 분석을 계속 &lt;code&gt;input&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;text-parsec#v:getInput&quot;&gt;getInput&lt;/a&gt;&lt;/code&gt; 에 와 &lt;code&gt;setInput&lt;/code&gt; 에 기능은 예를 들어 #INCLUDE 파일을 처리하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a31195ceeff2a888e07bb6bd9f69c7f061eb088" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setInput input&lt;/code&gt; continues parsing with &lt;code&gt;input&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;text-parsec-prim#v:getInput&quot;&gt;getInput&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;setInput&lt;/code&gt; functions can for example be used to deal with #include files.</source>
          <target state="translated">&lt;code&gt;setInput input&lt;/code&gt; 은 input 과 구문 분석을 계속 &lt;code&gt;input&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;text-parsec-prim#v:getInput&quot;&gt;getInput&lt;/a&gt;&lt;/code&gt; 에 와 &lt;code&gt;setInput&lt;/code&gt; 에 기능은 예를 들어 #INCLUDE 파일을 처리하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6865a1400c35697d031421a20797f3c0de3a07c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setInput input&lt;/code&gt; continues parsing with &lt;code&gt;input&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-prim#v:getInput&quot;&gt;getInput&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;setInput&lt;/code&gt; functions can for example be used to deal with #include files.</source>
          <target state="translated">&lt;code&gt;setInput input&lt;/code&gt; 은 input 과 구문 분석을 계속 &lt;code&gt;input&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-prim#v:getInput&quot;&gt;getInput&lt;/a&gt;&lt;/code&gt; 에 와 &lt;code&gt;setInput&lt;/code&gt; 에 기능은 예를 들어 #INCLUDE 파일을 처리하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13049f33a3ce6b4e3ddf9125c0b60ccceb35438d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setOwnerAndGroup path uid gid&lt;/code&gt; changes the owner and group of &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;setOwnerAndGroup path uid gid&lt;/code&gt; 는 소유자 및 &lt;code&gt;path&lt;/code&gt; 그룹 을 &lt;code&gt;uid&lt;/code&gt; 및 &lt;code&gt;gid&lt;/code&gt; 로 변경합니다. 각각.</target>
        </trans-unit>
        <trans-unit id="5f6b2ce14924773d071cdb89feac6b506ff3391d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setParserState st&lt;/code&gt; set the full parser state to &lt;code&gt;st&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setParserState st&lt;/code&gt; 전체 파서 상태를 &lt;code&gt;st&lt;/code&gt; 로 설정 .</target>
        </trans-unit>
        <trans-unit id="59f8d0f2b216a37317940928988683ccd8a49ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setPosition pos&lt;/code&gt; sets the current source position to &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setPosition pos&lt;/code&gt; 는 현재 소스 위치를 &lt;code&gt;pos&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="90d7a07e5e261bb44aed049c3d7024d386eace35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setSignalMask mask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; with &lt;code&gt;SIG_SETMASK&lt;/code&gt; to block all interrupts in &lt;code&gt;mask&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setSignalMask mask&lt;/code&gt; 는 &lt;code&gt;SIG_SETMASK&lt;/code&gt; 와 함께 &lt;code&gt;sigprocmask&lt;/code&gt; 를 호출 하여 &lt;code&gt;mask&lt;/code&gt; 의 모든 인터럽트를 차단합니다 .</target>
        </trans-unit>
        <trans-unit id="9b62df21d578e60086418669f594c90551b40b08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setTerminalAttributes fd attr ts&lt;/code&gt; calls &lt;code&gt;tcsetattr&lt;/code&gt; to change the &lt;code&gt;TerminalAttributes&lt;/code&gt; associated with &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; to &lt;code&gt;attr&lt;/code&gt;, when the terminal is in the state indicated by &lt;code&gt;ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setTerminalAttributes fd attr ts&lt;/code&gt; 는 터미널이 &lt;code&gt;ts&lt;/code&gt; 로 표시된 상태에있을 때 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; 와 연관된 &lt;code&gt;TerminalAttributes&lt;/code&gt; 를 &lt;code&gt;attr&lt;/code&gt; 로 변경하기 위해 &lt;code&gt;tcsetattr&lt;/code&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="c3ccc3e3331d7159eb6aaad72d38f33f90d07516" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setTerminalProcessGroupID fd pgid&lt;/code&gt; calls &lt;code&gt;tcsetpgrp&lt;/code&gt; to set the &lt;code&gt;ProcessGroupID&lt;/code&gt; of the foreground process group associated with the terminal attached to &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setTerminalProcessGroupID fd pgid&lt;/code&gt; 호출 &lt;code&gt;tcsetpgrp&lt;/code&gt; 를 세트에 &lt;code&gt;ProcessGroupID&lt;/code&gt; 를 부착 단말과 연관된 전경 프로세스기로 &lt;code&gt;Fd&lt;/code&gt; &lt;code&gt;fd&lt;/code&gt; 에 &lt;code&gt;pgid&lt;/code&gt; 가이 .</target>
        </trans-unit>
        <trans-unit id="71352b8c5016c5719f130ce4158d5795f5364762" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setUserID uid&lt;/code&gt; calls &lt;code&gt;setuid&lt;/code&gt; to set the real, effective, and saved set-user-id associated with the current process to &lt;code&gt;uid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setUserID uid&lt;/code&gt; &lt;code&gt;setuid&lt;/code&gt; 를 호출 하여 현재 프로세스와 연관된 실제 유효하고 저장된 set-user-id를 &lt;code&gt;uid&lt;/code&gt; 로 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="36b060ea85ca0f12ed8fd7d54fc896de2be3fbe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signalProcess int pid&lt;/code&gt; calls &lt;code&gt;kill&lt;/code&gt; to signal process &lt;code&gt;pid&lt;/code&gt; with interrupt signal &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;signalProcess int pid&lt;/code&gt; 호출 은 인터럽트 신호 &lt;code&gt;int&lt;/code&gt; 로 프로세스 &lt;code&gt;pid&lt;/code&gt; 신호를 보내기 &lt;code&gt;kill&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="768bd67e3ea95321f64a00ec87bddccb6e083afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signalProcessGroup int pgid&lt;/code&gt; calls &lt;code&gt;kill&lt;/code&gt; to signal all processes in group &lt;code&gt;pgid&lt;/code&gt; with interrupt signal &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;signalProcessGroup int pgid&lt;/code&gt; 통화를 &lt;code&gt;kill&lt;/code&gt; 그룹의 모든 프로세스 신호를 &lt;code&gt;pgid&lt;/code&gt; 가 인터럽트 신호와 &lt;code&gt;int&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13c91da54236e45c36fd001f1da561745fa1f864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipMany p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;zero&lt;/em&gt; or more times, skipping its result.</source>
          <target state="translated">&lt;code&gt;skipMany p&lt;/code&gt; 는 파서 &lt;code&gt;p&lt;/code&gt; &lt;em&gt;0을&lt;/em&gt; 적용합니다&lt;em&gt;&lt;/em&gt; 번 이상 하고 결과를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="fd3243666dc2a4a55dea6762c3d734849c5a827b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipMany1 p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;one&lt;/em&gt; or more times, skipping its result.</source>
          <target state="translated">&lt;code&gt;skipMany1 p&lt;/code&gt; 는 구문 분석기 &lt;code&gt;p&lt;/code&gt; 를&lt;em&gt;한&lt;/em&gt; 번 이상 적용 하고 결과를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="fe87a301df3e166696a7e70dde2bd92b693b50d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stock&lt;/code&gt;: Have GHC implement a &amp;ldquo;standard&amp;rdquo; instance for a data type, if possible (e.g., &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;Generic&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, &lt;code&gt;Functor&lt;/code&gt;, etc.)</source>
          <target state="translated">&lt;code&gt;stock&lt;/code&gt; : 가능한 경우 GHC가 데이터 유형에 대해 &quot;표준&quot;인스턴스를 구현하도록하십시오 (예 : &lt;code&gt;Eq&lt;/code&gt; , &lt;code&gt;Ord&lt;/code&gt; , &lt;code&gt;Generic&lt;/code&gt; , &lt;code&gt;Data&lt;/code&gt; , &lt;code&gt;Functor&lt;/code&gt; 등)</target>
        </trans-unit>
        <trans-unit id="74986175d8266038caefa62ac5e59f42996dccf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string s&lt;/code&gt; parses a sequence of characters given by &lt;code&gt;s&lt;/code&gt;. Returns the parsed string (i.e. &lt;code&gt;s&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;string s&lt;/code&gt; 구문 분석에 의해 주어진 일련의 문자 &lt;code&gt;s&lt;/code&gt; . 파싱 ​​된 문자열을 반환합니다 (예 : &lt;code&gt;s&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0be1cb00b935dd01926cf0627d3bcb71ec27635f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;product&lt;/code&gt;, &lt;code&gt;maximum&lt;/code&gt;, and &lt;code&gt;minimum&lt;/code&gt; should all be essentially equivalent to &lt;code&gt;foldMap&lt;/code&gt; forms, such as</source>
          <target state="translated">&lt;code&gt;sum&lt;/code&gt; , &lt;code&gt;product&lt;/code&gt; , &lt;code&gt;maximum&lt;/code&gt; 및 &lt;code&gt;minimum&lt;/code&gt; 은 모두 기본적으로 &lt;code&gt;foldMap&lt;/code&gt; 과 동일해야합니다. 양식</target>
        </trans-unit>
        <trans-unit id="9cde322f2c41ade8bb79e24597dc2f44ca5b188b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t . &lt;a href=&quot;data-traversable#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; = &lt;a href=&quot;data-traversable#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; . &lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt; t&lt;/code&gt; for every applicative transformation &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t . &lt;a href=&quot;data-traversable#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; = &lt;a href=&quot;data-traversable#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; . &lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt; t&lt;/code&gt; 모든 실용적 변환 용 &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="286fbc3f2e24c73982d6a63e429fda7383660524" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t . &lt;a href=&quot;data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; f = &lt;a href=&quot;data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; (t . f)&lt;/code&gt; for every applicative transformation &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t . &lt;a href=&quot;data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; f = &lt;a href=&quot;data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt; (t . f)&lt;/code&gt; 모든 적용 변환에 대한 트래버스 (t.f) &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c4e16b6f9802162989c29abe9e129094dafee5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t . &lt;a href=&quot;prelude#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; = &lt;a href=&quot;prelude#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; . &lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt; t&lt;/code&gt; for every applicative transformation &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t . &lt;a href=&quot;prelude#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; = &lt;a href=&quot;prelude#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt; . &lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt; t&lt;/code&gt; 모든 실용적 변환 용 &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b73b395dd285ab403cad7df445e6f3f3082f0aff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t . &lt;a href=&quot;prelude#v:traverse&quot;&gt;traverse&lt;/a&gt; f = &lt;a href=&quot;prelude#v:traverse&quot;&gt;traverse&lt;/a&gt; (t . f)&lt;/code&gt; for every applicative transformation &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t . &lt;a href=&quot;prelude#v:traverse&quot;&gt;traverse&lt;/a&gt; f = &lt;a href=&quot;prelude#v:traverse&quot;&gt;traverse&lt;/a&gt; (t . f)&lt;/code&gt; 모든 적용 변환에 대한 트래버스 (t.f) &lt;code&gt;t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efd6d2cfb064cae50fe766decb5dfdb2f6546e9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;take&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;take&lt;/code&gt; , &lt;code&gt;filter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71919383e786fc02ffee26a3052be3266871a72d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;takeMVar&lt;/code&gt; can be interrupted by an asynchronous exception. If this happens, the callback in C will still run at some point in the future, will still write the result, and will still call &lt;code&gt;hs_try_putmvar()&lt;/code&gt;. Therefore we have to arrange that the memory for the result stays alive until the callback has run, so if an exception is thrown during &lt;code&gt;takeMVar&lt;/code&gt; we fork another thread to wait for the callback and hold the memory alive using &lt;code&gt;touchForeignPtr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;takeMVar&lt;/code&gt; 는 비동기 예외에 의해 중단 될 수 있습니다. 이런 일이 발생하면 C의 콜백은 앞으로도 어느 시점에서 계속 실행되어 결과를 &lt;code&gt;hs_try_putmvar()&lt;/code&gt; 여전히 hs_try_putmvar ()을 호출 합니다. 따라서 콜백이 실행될 때까지 결과에 대한 메모리가 &lt;code&gt;takeMVar&lt;/code&gt; 상태로 유지되도록해야합니다. 따라서 takeMVar 중에 예외가 발생하면 다른 스레드를 분기하여 콜백을 대기하고 &lt;code&gt;touchForeignPtr&lt;/code&gt; 을 사용하여 메모리를 활성 상태로 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="0806004cd897adf5e3fdbdd1689fe81a85a3a193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touchFile path&lt;/code&gt; sets the access and modification times associated with file &lt;code&gt;path&lt;/code&gt; to the current time.</source>
          <target state="translated">&lt;code&gt;touchFile path&lt;/code&gt; 는 파일 &lt;code&gt;path&lt;/code&gt; 와 관련된 액세스 및 수정 시간 을 현재 시간으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="546955895ba67a1f2fe78c3bc4bc41e85564c2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 선언 :</target>
        </trans-unit>
        <trans-unit id="c0ac793228c71dc7fba088328f57689df799d75a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; &amp;mdash; user events. These are events emitted from Haskell code using functions such as &lt;code&gt;Debug.Trace.traceEvent&lt;/code&gt;. Enabled by default.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; &amp;mdash; 사용자 이벤트. 이는 &lt;code&gt;Debug.Trace.traceEvent&lt;/code&gt; 와 같은 함수를 사용하여 Haskell 코드에서 생성 된 이벤트입니다. 입니다. 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bac91f676ff505dab80496e846b4a80e14109200" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unblockSignals mask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; with &lt;code&gt;SIG_UNBLOCK&lt;/code&gt; to remove all interrupts in &lt;code&gt;mask&lt;/code&gt; from the set of blocked interrupts.</source>
          <target state="translated">&lt;code&gt;unblockSignals mask&lt;/code&gt; 는 &lt;code&gt;SIG_UNBLOCK&lt;/code&gt; 과 함께 &lt;code&gt;sigprocmask&lt;/code&gt; 를 호출 하여 차단 된 인터럽트 세트 에서 &lt;code&gt;mask&lt;/code&gt; 모든 인터럽트를 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="e19ffa0ebfa12476abcd767472f619bfcd6954de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unfoldForest f seeds&lt;/code&gt; invokes &lt;code&gt;&lt;a href=&quot;data-tree#v:unfoldTree&quot;&gt;unfoldTree&lt;/a&gt;&lt;/code&gt; on each seed value.</source>
          <target state="translated">&lt;code&gt;unfoldForest f seeds&lt;/code&gt; 는 각 seed 값에 대해 &lt;code&gt;&lt;a href=&quot;data-tree#v:unfoldTree&quot;&gt;unfoldTree&lt;/a&gt;&lt;/code&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="488e34b3c85668e310a79644972e6a0cc0f4c050" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unfoldTree f b&lt;/code&gt; constructs a tree by starting with the tree &lt;code&gt;Node { rootLabel=b, subForest=[] }&lt;/code&gt; and repeatedly applying &lt;code&gt;f&lt;/code&gt; to each &lt;code&gt;&lt;a href=&quot;data-tree#v:rootLabel&quot;&gt;rootLabel&lt;/a&gt;&lt;/code&gt; value in the tree's leaves to generate its &lt;code&gt;&lt;a href=&quot;data-tree#v:subForest&quot;&gt;subForest&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unfoldTree f b&lt;/code&gt; 는 트리 &lt;code&gt;Node { rootLabel=b, subForest=[] }&lt;/code&gt; 로 시작하여 나무 잎의 각 &lt;code&gt;&lt;a href=&quot;data-tree#v:rootLabel&quot;&gt;rootLabel&lt;/a&gt;&lt;/code&gt; 값에 &lt;code&gt;f&lt;/code&gt; 를 반복적으로 적용 하여 &lt;code&gt;&lt;a href=&quot;data-tree#v:subForest&quot;&gt;subForest&lt;/a&gt;&lt;/code&gt; 를 생성하여 트리를 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="c5c0d0af382bafc12f77e85f32fa88d99b7374cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unloadObj&lt;/code&gt; drops the given dynamic library from the symbol table as well as enables the library to be removed from memory during a future major GC.</source>
          <target state="translated">&lt;code&gt;unloadObj&lt;/code&gt; 는 심볼 테이블에서 지정된 동적 라이브러리를 삭제하고 향후 주요 GC 중에 라이브러리에서 메모리에서 제거 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="101f2ddd29363fd0306605ede235ffe98e99f70e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unpackClosure# closure&lt;/code&gt; copies the closure and pointers in the payload of the given closure into two new arrays, and returns a pointer to the first word of the closure's info table, a non-pointer array for the raw bytes of the closure, and a pointer array for the pointers in the payload.</source>
          <target state="translated">&lt;code&gt;unpackClosure# closure&lt;/code&gt; 는 주어진 클로저의 페이로드에있는 클로저와 포인터를 두 개의 새로운 배열로 복사하고 클로저 정보 테이블의 첫 번째 단어에 대한 포인터, 클로저의 원시 바이트에 대한 비 포인터 배열 및 포인터를 반환합니다. 페이로드의 포인터 배열.</target>
        </trans-unit>
        <trans-unit id="fe56c4063908142ae106b6be5163c142c0d52eba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsetEnv name&lt;/code&gt; removes the specified environment variable from the environment of the current process.</source>
          <target state="translated">&lt;code&gt;unsetEnv name&lt;/code&gt; 은 현재 프로세스 환경에서 지정된 환경 변수를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="c1d5594570a9a04161ca74be624f7960c0fdf72f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzip&lt;/code&gt;, &lt;code&gt;unzip2&lt;/code&gt;, &lt;code&gt;unzip3&lt;/code&gt;, &lt;code&gt;unzip4&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;unzip&lt;/code&gt; , &lt;code&gt;unzip2&lt;/code&gt; , &lt;code&gt;unzip3&lt;/code&gt; , &lt;code&gt;unzip4&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc234395126813de5787b2ab0844753677fb6e91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzipWith&lt;/code&gt; produces its two results in lockstep. If you calculate &lt;code&gt; unzipWith f xs &lt;/code&gt; and fully force &lt;em&gt;either&lt;/em&gt; of the results, then the entire structure of the &lt;em&gt;other&lt;/em&gt; one will be built as well. This behavior allows the garbage collector to collect each calculated pair component as soon as it dies, without having to wait for its mate to die. If you do not need this behavior, you may be better off simply calculating the sequence of pairs and using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; to extract each component sequence.</source>
          <target state="translated">&lt;code&gt;unzipWith&lt;/code&gt; 는 두 단계의 잠금 단계를 생성합니다. &lt;code&gt; unzipWith f xs &lt;/code&gt; 를 계산 하고 결과 &lt;em&gt;중 하나&lt;/em&gt; 를 완전히 강제 하면 &lt;em&gt;다른&lt;/em&gt; 구조의 전체 구조 도 빌드됩니다. 이 동작을 통해 가비지 수집기는 메이트가 죽을 때까지 기다릴 필요없이 계산 된 각 쌍 구성 요소가 죽 자마자 수집 할 수 있습니다. 이 동작이 필요하지 않으면 단순히 쌍의 시퀀스를 계산하고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 을 사용하는 것이 좋습니다. 을 각 구성 요소 시퀀스를 추출 .</target>
        </trans-unit>
        <trans-unit id="1df0cc89a47dbe6ce6069d94344a03d90896a9bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzipWith&lt;/code&gt; produces its two results in lockstep. If you calculate &lt;code&gt; unzipWith f xs &lt;/code&gt; and fully force &lt;em&gt;either&lt;/em&gt; of the results, then the entire structure of the &lt;em&gt;other&lt;/em&gt; one will be built as well. This behavior allows the garbage collector to collect each calculated pair component as soon as it dies, without having to wait for its mate to die. If you do not need this behavior, you may be better off simply calculating the sequence of pairs and using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; to extract each component sequence.</source>
          <target state="translated">&lt;code&gt;unzipWith&lt;/code&gt; 는 lockstep에서 두 가지 결과를 생성합니다. &lt;code&gt; unzipWith f xs &lt;/code&gt; 를 계산 하고 결과 &lt;em&gt;중 하나&lt;/em&gt; 를 완전히 강제 하면 &lt;em&gt;다른&lt;/em&gt; 하나 의 전체 구조 도 빌드됩니다. 이 동작을 통해 가비지 수집기는 메이트가 죽을 때까지 기다릴 필요없이 죽 자마자 계산 된 각 쌍 구성 요소를 수집 할 수 있습니다. 이 동작이 필요하지 않은 경우 단순히 쌍의 시퀀스를 계산하고 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 을 사용하여 각 구성 요소 시퀀스를 추출 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="416424db0eea8d026587dff582e683bbd81b80a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;updateParserState f&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to the parser state.</source>
          <target state="translated">&lt;code&gt;updateParserState f&lt;/code&gt; 함수 적용 &lt;code&gt;f&lt;/code&gt; 를 파서 상태에 .</target>
        </trans-unit>
        <trans-unit id="d2b7da99b42f639297b767e8ff67542f1759d842" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v1..vn&lt;/code&gt; are type variables, and &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;s1..sk&lt;/code&gt;, &lt;code&gt;t1..tj&lt;/code&gt; are types.</source>
          <target state="translated">&lt;code&gt;v1..vn&lt;/code&gt; 은 유형 변수이며 &lt;code&gt;t&lt;/code&gt; , &lt;code&gt;s1..sk&lt;/code&gt; , &lt;code&gt;t1..tj&lt;/code&gt; 는 유형입니다.</target>
        </trans-unit>
        <trans-unit id="357002452d362f6cfb47953c8fae798bd5f57c66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vertexFromKey :: key -&amp;gt; Maybe Vertex&lt;/code&gt; returns the &lt;code&gt;Int&lt;/code&gt; vertex for the key if it exists in the graph, &lt;code&gt;Nothing&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;vertexFromKey :: key -&amp;gt; Maybe Vertex&lt;/code&gt; 는 키에 &lt;code&gt;Int&lt;/code&gt; 꼭짓점이 있으면 그래프에 &lt;code&gt;Nothing&lt;/code&gt; 반환 하지 않습니다. 그렇지 않으면 반환 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2f29f83800fb5491f61584614b81837f63da046" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;via&lt;/code&gt;: Use &lt;a href=&quot;#extension-DerivingVia&quot;&gt;&lt;code&gt;DerivingVia&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#deriving-via&quot;&gt;Deriving via&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;via&lt;/code&gt; : &lt;a href=&quot;#extension-DerivingVia&quot;&gt; &lt;code&gt;DerivingVia&lt;/code&gt; &lt;/a&gt; 사용 ( &lt;a href=&quot;#deriving-via&quot;&gt;Deriving via&lt;/a&gt; 참조 ) )</target>
        </trans-unit>
        <trans-unit id="a16dd80212d6b6ff9f1328d470ef1b17023bdf9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w&lt;/code&gt; - the output to accumulate.</source>
          <target state="translated">&lt;code&gt;w&lt;/code&gt; 누적되는 출력</target>
        </trans-unit>
        <trans-unit id="5ae241bd707600cfac66e75bb696f2fab5ccfa4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;gt; y&lt;/code&gt; = &lt;code&gt;compare x y == GT&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;gt; y&lt;/code&gt; = &lt;code&gt;compare x y == GT&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ad96211a0464e341b29628255c9196c833c6b49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;gt; y&lt;/code&gt; = &lt;code&gt;y &amp;lt; x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;gt; y&lt;/code&gt; = &lt;code&gt;y &amp;lt; x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21e206a9fafe0d666e622b4a7c2cc3622dbf3f78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;gt;= y&lt;/code&gt; = &lt;code&gt;y &amp;lt;= x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;gt;= y&lt;/code&gt; = &lt;code&gt;y &amp;lt;= x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5aa3feae6a58a1951e17fb22c0c5dcde77347f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt; y&lt;/code&gt; = &lt;code&gt;compare x y == LT&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;lt; y&lt;/code&gt; = &lt;code&gt;compare x y == LT&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a9c7cfb5259bcfba9ab0dd4ebcc6ea895494fb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt; y&lt;/code&gt; = &lt;code&gt;x &amp;lt;= y &amp;amp;&amp;amp; x /= y&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;lt; y&lt;/code&gt; = &lt;code&gt;x &amp;lt;= y &amp;amp;&amp;amp; x /= y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0566b8324fef43fa53a2e00b874148a34ed135cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt;- e1 | s2, s3 | s4&lt;/code&gt; (in &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:CompE&quot;&gt;CompE&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;x &amp;lt;- e1 | s2, s3 | s4&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:CompE&quot;&gt;CompE&lt;/a&gt;&lt;/code&gt; 에서) )</target>
        </trans-unit>
        <trans-unit id="df851ee1aa0a627d07400ff7d24ff292f310106f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt;- e1 | s2, s3 | s4&lt;/code&gt; (in &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:CompE&quot;&gt;CompE&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;x &amp;lt;- e1 | s2, s3 | s4&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:CompE&quot;&gt;CompE&lt;/a&gt;&lt;/code&gt; 에서) )</target>
        </trans-unit>
        <trans-unit id="0e543755ace2ae50599cf3a46be72a5c50c36024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt;= x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;lt;= x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae323fb462f45fd714b64e9e0e517235a5743af7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt;= x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x &amp;lt;= x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f5847085f71415dd64a10a3ce4c86668cee52ef5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x * fromInteger 1&lt;/code&gt; = &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;fromInteger 1 * x&lt;/code&gt; = &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x * fromInteger 1&lt;/code&gt; = &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;fromInteger 1 * x&lt;/code&gt; = &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb3af3bd4ac91546545e6e62f7ae83fb9fa6691b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x * recip x&lt;/code&gt; = &lt;code&gt;recip x * x&lt;/code&gt; = &lt;code&gt;fromInteger 1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x * recip x&lt;/code&gt; = &lt;code&gt;recip x * x&lt;/code&gt; = &lt;code&gt;fromInteger 1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0db8141a78e42c3a72acceb8bcef50d72e32db11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x + fromInteger 0&lt;/code&gt; = &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x + fromInteger 0&lt;/code&gt; = &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="329576ccdcce234a221f901194ef52303fc77904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x + negate x&lt;/code&gt; = &lt;code&gt;fromInteger 0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x + negate x&lt;/code&gt; = &lt;code&gt;fromInteger 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8628b8534b0bc7e99ec149abde799f2ba773658c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x + y&lt;/code&gt; = &lt;code&gt;y + x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x + y&lt;/code&gt; = &lt;code&gt;y + x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf4724f88cb57f27ab7b605e932de14bbcc85988" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x /= y&lt;/code&gt; = &lt;code&gt;not (x == y)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x /= y&lt;/code&gt; = &lt;code&gt;not (x == y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a21fdaa9c0b28d2e6457c85b6d8d0dc0eaa54189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; law)</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;../base-4.13.0.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 법)</target>
        </trans-unit>
        <trans-unit id="dac335da7d714294b4d21d230cb3b6ae9c38b26e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; law)</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;../base-4.14.1.0/data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 법칙)</target>
        </trans-unit>
        <trans-unit id="5dd2c97c423b20f70854c0cff7205332082d21fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; law)</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;data-monoid#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 법)</target>
        </trans-unit>
        <trans-unit id="be2da3669cdcb52cb3ee73a2b65c9a829f34930b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;ghc-base#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; law)</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;ghc-base#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;ghc-base#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 법)</target>
        </trans-unit>
        <trans-unit id="5d0de2d5e3f27b15cb77f8c3c340f938ed7df7d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; law)</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; (y &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z) = (x &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y) &lt;a href=&quot;prelude#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; z&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 법)</target>
        </trans-unit>
        <trans-unit id="c84d85e90b905ea5d153c2e0e814ac1f301d5cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a href=&quot;text-prettyprint-annotated#v:nest&quot;&gt;nest&lt;/a&gt; k y = x &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a href=&quot;text-prettyprint-annotated#v:nest&quot;&gt;nest&lt;/a&gt; k y = x &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 인 경우 비어</target>
        </trans-unit>
        <trans-unit id="e9391da006c7f19060d8cf8ccc10b373d54d3f13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:nest&quot;&gt;nest&lt;/a&gt; k y = x &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:nest&quot;&gt;nest&lt;/a&gt; k y = x &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 인 경우 비어</target>
        </trans-unit>
        <trans-unit id="3f50b0eb9de4bb7f00d66b4586a69b27604f7656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a href=&quot;text-prettyprint-hughespj#v:nest&quot;&gt;nest&lt;/a&gt; k y = x &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="translated">&lt;code&gt;x &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; &lt;a href=&quot;text-prettyprint-hughespj#v:nest&quot;&gt;nest&lt;/a&gt; k y = x &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; y&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 인 경우 비어</target>
        </trans-unit>
        <trans-unit id="8e2ac0b3b48aa34bb5e8880b2bcbb579362b11b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x == x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x == x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f84a736278499a1263563c915ebbb19128e9bacd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x == x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x == x&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d66f413f4cdc855e0b3fe3756077f1da3b373e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x == y&lt;/code&gt; = &lt;code&gt;compare x y == EQ&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x == y&lt;/code&gt; = &lt;code&gt;compare x y == EQ&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="601b2d6b723d90b16f4b9e84daa0b87ef9fa6a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x == y&lt;/code&gt; = &lt;code&gt;y == x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x == y&lt;/code&gt; = &lt;code&gt;y == x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c15f4082bad64847b2240917d3e12b1e3b9d34f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x `clearBit` i&lt;/code&gt; is the same as &lt;code&gt;x .&amp;amp;. complement (bit i)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x `clearBit` i&lt;/code&gt; 는 &lt;code&gt;x .&amp;amp;. complement (bit i)&lt;/code&gt; 와 동일 합니다. 보수 (비트 i)</target>
        </trans-unit>
        <trans-unit id="c0ea9caeb1827a2f4126e11b0540e03dc0d9cf05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x `complementBit` i&lt;/code&gt; is the same as &lt;code&gt;x `xor` bit i&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x `complementBit` i&lt;/code&gt; &lt;code&gt;x `xor` bit i&lt;/code&gt; i 는 x`xor` 비트 i 와 동일</target>
        </trans-unit>
        <trans-unit id="05d9716de33bb9f08b4a4690f0c099084b01f466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x `setBit` i&lt;/code&gt; is the same as &lt;code&gt;x .|. bit i&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x `setBit` i&lt;/code&gt; 는 &lt;code&gt;x .|. bit i&lt;/code&gt; 와 같습니다 . |. 나 조금</target>
        </trans-unit>
        <trans-unit id="7982d2b1e3786a2550caade576c79f50aa8da8e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; = &lt;code&gt;y * div x y + mod x y&lt;/code&gt; with &lt;code&gt;mod x y&lt;/code&gt; = &lt;code&gt;fromInteger 0&lt;/code&gt; or &lt;code&gt;f (mod x y)&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; = &lt;code&gt;y * div x y + mod x y&lt;/code&gt; 로 &lt;code&gt;mod x y&lt;/code&gt; = &lt;code&gt;fromInteger 0&lt;/code&gt; 또는 &lt;code&gt;f (mod x y)&lt;/code&gt; &amp;lt; &lt;code&gt;f y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d569428b655a245498a73da1168b267093dea2d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; = &lt;code&gt;y * quot x y + rem x y&lt;/code&gt; with &lt;code&gt;rem x y&lt;/code&gt; = &lt;code&gt;fromInteger 0&lt;/code&gt; or &lt;code&gt;g (rem x y)&lt;/code&gt; &amp;lt; &lt;code&gt;g y&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; = &lt;code&gt;y * quot x y + rem x y&lt;/code&gt; with &lt;code&gt;rem x y&lt;/code&gt; = &lt;code&gt;fromInteger 0&lt;/code&gt; 또는 &lt;code&gt;g (rem x y)&lt;/code&gt; &amp;lt; &lt;code&gt;g y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e222eb3b2732525891741d8fd5b65ec684d36fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xs !! n&lt;/code&gt; returns the element of the stream &lt;code&gt;xs&lt;/code&gt; at index &lt;code&gt;n&lt;/code&gt;. Note that the head of the stream has index 0.</source>
          <target state="translated">&lt;code&gt;xs !! n&lt;/code&gt; 은 인덱스 &lt;code&gt;n&lt;/code&gt; 의 스트림 &lt;code&gt;xs&lt;/code&gt; 요소를 반환합니다 . 스트림 헤드의 인덱스는 0입니다.</target>
        </trans-unit>
        <trans-unit id="b5370b7f8201938b5ed2347f8567872fae6d4ba8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy-mm-dd&lt;/code&gt; (ISO 8601:2004(E) sec. 4.1.2.2 extended format)</source>
          <target state="translated">&lt;code&gt;yyyy-mm-dd&lt;/code&gt; (ISO 8601 : 2004 (E) 초 4.1.2.2 확장 형식)</target>
        </trans-unit>
        <trans-unit id="8e41d3d8eebba40636821057acdc4ac6f852d3b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy-mm-ddThh:mm:ss[.sss]&amp;plusmn;hh:mm&lt;/code&gt; (ISO 8601:2004(E) sec. 4.3.2 extended format)</source>
          <target state="translated">&lt;code&gt;yyyy-mm-ddThh:mm:ss[.sss]&amp;plusmn;hh:mm&lt;/code&gt; (ISO 8601 : 2004 (E) 초 4.3.2 확장 형식)</target>
        </trans-unit>
        <trans-unit id="5bc9d75ce0ced05428136eb2d477a013f2242efe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy-mm-ddThh:mm:ss[.sss]&lt;/code&gt; (ISO 8601:2004(E) sec. 4.3.2 extended format)</source>
          <target state="translated">&lt;code&gt;yyyy-mm-ddThh:mm:ss[.sss]&lt;/code&gt; (ISO 8601 : 2004 (E) 초 4.3.2 확장 형식)</target>
        </trans-unit>
        <trans-unit id="107b9eb89699287951fb08339c754900dcfed7d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy-mm-ddThh:mm:ss[.sss]Z&lt;/code&gt; (ISO 8601:2004(E) sec. 4.3.2 extended format)</source>
          <target state="translated">&lt;code&gt;yyyy-mm-ddThh:mm:ss[.sss]Z&lt;/code&gt; (ISO 8601 : 2004 (E) 초 4.3.2 확장 형식)</target>
        </trans-unit>
        <trans-unit id="365adfe40f8a5c6e9d0a613a2e994422a5f6ceaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt; stack squeezing &amp;amp; lazy blackholing</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; 스택 압착 및 게으른 블랙홀 링</target>
        </trans-unit>
        <trans-unit id="f066afb123e9bdff92af0060a807878ad49bd101" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;zipWith&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; , &lt;code&gt;zipWith&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9bb6877312ac648655613406340d15e406705f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;zipWith&lt;/code&gt; (but on one argument only; if both are good producers, &lt;code&gt;zip&lt;/code&gt; will fuse with one but not the other)</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; , &lt;code&gt;zipWith&lt;/code&gt; (하나의 인수에만 해당; 둘 다 좋은 생산자 인 경우 &lt;code&gt;zip&lt;/code&gt; 은 하나와 융합하지만 다른 하나는 융합되지 않음)</target>
        </trans-unit>
        <trans-unit id="dec683c6c6f4a929a3a633e0aa9cea036ac78cc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ #x }&lt;/code&gt; ( Overloaded label )</source>
          <target state="translated">&lt;code&gt;{ #x }&lt;/code&gt; (과부하 라벨)</target>
        </trans-unit>
        <trans-unit id="65f3bf090257dbf312605b17d03be9ddeb722510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ ?x }&lt;/code&gt; ( Implicit parameter )</source>
          <target state="translated">&lt;code&gt;{ ?x }&lt;/code&gt; (암시 적 매개 변수)</target>
        </trans-unit>
        <trans-unit id="b742b01ff7fc5676d44094a9a942f4ee62692d0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ pattern P v1 v2 .. vn &amp;lt;- p }&lt;/code&gt; unidirectional or &lt;code&gt;{ pattern P v1 v2 .. vn = p  }&lt;/code&gt; implicit bidirectional or &lt;code&gt;{ pattern P v1 v2 .. vn &amp;lt;- p
        where P v1 v2 .. vn = e  }&lt;/code&gt; explicit bidirectional</source>
          <target state="translated">&lt;code&gt;{ pattern P v1 v2 .. vn &amp;lt;- p }&lt;/code&gt; 단방향 또는 &lt;code&gt;{ pattern P v1 v2 .. vn = p }&lt;/code&gt; 암시 적 양방향 또는 &lt;code&gt;{ pattern P v1 v2 .. vn &amp;lt;- p where P v1 v2 .. vn = e }&lt;/code&gt; 명시 적 양방향</target>
        </trans-unit>
        <trans-unit id="08f08f91cafaaeed1e2f80fb876e8abf6eb37748" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(deprecated)&lt;/em&gt; warn about polymorphic local bindings without signatures</source>
          <target state="translated">&lt;em&gt;(더 이상 사용되지 않음)&lt;/em&gt; 서명이없는 다형성 로컬 바인딩에 대해 경고</target>
        </trans-unit>
        <trans-unit id="b3856f9d445424436029ce02ffea084bea60b0f0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(deprecated)&lt;/em&gt; warn about top-level functions without signatures, only if they are exported. takes precedence over -Wmissing-signatures</source>
          <target state="translated">&lt;em&gt;(더 이상 사용되지 않음)&lt;/em&gt; 서명이없는 최상위 함수는 내보내는 경우에만 경고합니다. -Wissing-signatures보다 우선합니다</target>
        </trans-unit>
        <trans-unit id="82289b73295a37e000437a3a2561ca5ef13c5b45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(deprecated)&lt;/em&gt; warn when a &lt;code&gt;.hi&lt;/code&gt; file in the current directory shadows a library</source>
          <target state="translated">&lt;em&gt;(더 이상 사용되지 않음)&lt;/em&gt; 현재 디렉토리 의 &lt;code&gt;.hi&lt;/code&gt; 파일이 라이브러리를 섀도 잉 할 때 경고</target>
        </trans-unit>
        <trans-unit id="5434178603c89ab9c0003e067becad16160ce143" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A New Notation for Arrows&lt;/em&gt;, by Ross Paterson, in &lt;em&gt;ICFP 2001&lt;/em&gt;, Firenze, Italy, pp229-240.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Ross Paterson의 &lt;em&gt;ICFP 2001&lt;/em&gt; , Firenze, Italy, pp229-240의 &lt;em&gt;화살표&lt;/em&gt; 에 &lt;em&gt;대한 새로운 표기법&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="7dd53ed299ffea23c0efeba5f0f67ff24095eae8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A historical note.&lt;/em&gt; GHC used to impose some more restrictive and less principled conditions on type signatures. For type &lt;code&gt;forall tv1..tvn (c1, ...,cn) =&amp;gt; type&lt;/code&gt; GHC used to require</source>
          <target state="translated">&lt;em&gt;역사적 메모. &lt;/em&gt;GHC는 형식 서명에 대해 좀 더 제한적이고 덜 원칙적인 조건을 부과하는 데 사용되었습니다. 모든 &lt;code&gt;forall tv1..tvn (c1, ...,cn) =&amp;gt; type&lt;/code&gt; 유형의 경우 (c1, ..., cn) =&amp;gt; 필요한 GHC 유형</target>
        </trans-unit>
        <trans-unit id="2a00c3f3848ad82951e14175e94f6a827986c411" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A semantics for imprecise exceptions&lt;/em&gt;, by Simon Peyton Jones, Alastair Reid, Tony Hoare, Simon Marlow, Fergus Henderson, in &lt;em&gt;PLDI'99&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;em&gt;PLDI'99&lt;/em&gt; 에서 Simon Peyton Jones, Alastair Reid, Tony Hoare, Simon Marlow, Fergus Henderson의 &lt;em&gt;부정확 한 예외에 대한 의미론&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="09c6a41a7c624e1766c417db16cd4d57741cd08c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All&lt;/em&gt; bindings not marked INLINE, whether exported or not, top level or nested, will be given automatic &lt;code&gt;SCC&lt;/code&gt; annotations. Functions marked INLINE must be given a cost centre manually.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;수출 여부에 상관없이 INLINE으로 표시되지 않은 &lt;em&gt;모든&lt;/em&gt; 바인딩에는 자동 &lt;code&gt;SCC&lt;/code&gt; 주석 이 제공됩니다 . INLINE으로 표시된 기능에는 코스트 센터가 수동으로 제공되어야합니다.</target>
        </trans-unit>
        <trans-unit id="eabcd5305055073d7c098ef6fb1bbbe77609b9d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;An Extensible Dynamically-Typed Hierarchy of Exceptions&lt;/em&gt;, by Simon Marlow, in &lt;em&gt;Haskell '06&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Simon Marlow의 &lt;em&gt;Haskell '06&lt;/em&gt; 에서 &lt;em&gt;확장 가능한 동적 유형 예외의 계층 구조&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="a159a782aa2062cb24e8bedbd52d57211a37694f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Asynchronous exceptions in Haskell&lt;/em&gt;, by Simon Marlow, Simon Peyton Jones, Andy Moran and John Reppy, in &lt;em&gt;PLDI'01&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;하스켈에서 비동기 예외&lt;/em&gt; 사이먼 말로우, 사이먼 페이튼 존스, 앤디 모란과 존 레피에 의해, &lt;em&gt;PLDI'01&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ceb4edf2d3bf3be61162934272e34eec9c7133ac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Beware&lt;/em&gt;: a negative or out-of-bounds index will cause an error.</source>
          <target state="translated">&lt;em&gt;주의&lt;/em&gt; : 음수 또는 범위를 벗어난 인덱스는 오류를 유발합니다.</target>
        </trans-unit>
        <trans-unit id="87e33a6ffeff3f5fd99e5613b63ed994c721b2ec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Bounded(-size) primitives&lt;/em&gt; are builder primitives that always result in a sequence of bytes that is no larger than a predetermined bound. That is, the bound is independent of the value that is encoded but the actual length will depend on the value. An example for a bounded primitive is the UTF-8 encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;, which can be 1,2,3 or 4 bytes long, so the bound is 4 bytes.</source>
          <target state="translated">&lt;em&gt;바운딩 된 (-size) 프리미티브&lt;/em&gt; 는 빌더 프리미티브로, 미리 정해진 바인드보다 크지 않은 바이트 시퀀스를 항상 생성합니다. 즉, 바운드는 인코딩 된 값과 독립적이지만 실제 길이는 값에 따라 다릅니다. 바운딩 된 프리미티브의 예는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 의 UTF-8 인코딩으로 길이는 1,2,3 또는 4 바이트 일 수 있으며, 바인드는 4 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="a55cd548f9ce635bab44c817ce4170e41a9a84ea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Bounded(-size) primitives&lt;/em&gt; are builder primitives that always result in a sequence of bytes that is no larger than a predetermined bound. That is, the bound is independent of the value that is encoded but the actual length will depend on the value. An example for a bounded primitive is the UTF-8 encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;, which can be 1,2,3 or 4 bytes long, so the bound is 4 bytes.</source>
          <target state="translated">&lt;em&gt;Bounded (-size) 기본 요소&lt;/em&gt; 는 항상 미리 결정된 경계보다 크지 않은 바이트 시퀀스를 생성하는 빌더 기본 요소입니다. 즉, 경계는 인코딩 된 값과 무관하지만 실제 길이는 값에 따라 달라집니다. 바운드 프리미티브의 예는 1 , 2, 3 또는 4 바이트 길이가 될 수 있는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 의 UTF-8 인코딩 이므로 바운드는 4 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="1d5d31373296c3101d3eceeac03e8610ad0a71ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Changes since 1.2.3.0:&lt;/em&gt; The function has been altered to be more robust and has the same exception behavior as &lt;code&gt;&lt;a href=&quot;system-directory#v:makeAbsolute&quot;&gt;makeAbsolute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;1.2.3.0 이후의 변경 사항 :&lt;/em&gt; 이 함수는보다 강력하게 변경되었으며 &lt;code&gt;&lt;a href=&quot;system-directory#v:makeAbsolute&quot;&gt;makeAbsolute&lt;/a&gt;&lt;/code&gt; 와 동일한 예외 동작을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="a86c602774d4cd617593f2c4c7874eb80693a5ee" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Changes since 1.3.0.0:&lt;/em&gt; The function no longer preserves the trailing path separator. File symbolic links that appear in the middle of a path are properly dereferenced. Case canonicalization and symbolic link expansion are now performed on Windows.</source>
          <target state="translated">&lt;em&gt;1.3.0.0 이후 변경 사항 :&lt;/em&gt; 이 함수는 더 이상 후행 경로 구분 기호를 유지하지 않습니다. 경로 중간에 나타나는 파일 심볼릭 링크가 올바르게 역 참조됩니다. Windows에서 사례 표준화 및 기호 링크 확장이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="bfb3e1295f6692bfe6aaae665399f93c2bc26cb4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Compatibility note:&lt;/em&gt; Prior to base 4.7, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; was a combination of &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;. This mean that in the presence of other threads attempting to &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; could block. Furthermore, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; would not receive the next &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; if there was already a pending thread blocked on &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;. The old behavior can be recovered by implementing 'readMVar as follows:</source>
          <target state="translated">&lt;em&gt;호환성 노트 :&lt;/em&gt; 기본 4.7 이전에, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 가 의 조합이었다 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 가 . 이는 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 를 시도하는 다른 스레드가 있는 경우 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 가 차단 될 수 있음을 의미합니다 . 또한, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 는 다음받을 것 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 을 이미 차단 계류중인 스레드가 있다면 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; . 다음과 같이 'readMVar'를 구현하면 이전 동작을 복구 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="319ca43387d89f62710ae2d4d129701ab966ab80" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Compatibility note:&lt;/em&gt; Prior to base 4.7, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; was a combination of &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;. This mean that in the presence of other threads attempting to &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; could block. Furthermore, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; would not receive the next &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; if there was already a pending thread blocked on &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;. The old behavior can be recovered by implementing 'readMVar as follows:</source>
          <target state="translated">&lt;em&gt;호환성 노트 :&lt;/em&gt; 기본 4.7 이전에, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 가 의 조합이었다 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 가 . 이는 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 를 시도하는 다른 스레드가 있는 경우 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 가 차단 될 수 있음을 의미합니다 . 또한, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 는 다음받을 것 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 을 이미 차단 계류중인 스레드가 있다면 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; . 다음과 같이 'readMVar'를 구현하면 이전 동작을 복구 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2ac360117f063d2978509684266f81d0b959b00" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Compatibility note:&lt;/em&gt; Prior to base 4.7, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; was a combination of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;. This mean that in the presence of other threads attempting to &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; could block. Furthermore, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; would not receive the next &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; if there was already a pending thread blocked on &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;. The old behavior can be recovered by implementing 'readMVar as follows:</source>
          <target state="translated">&lt;em&gt;호환성 노트 :&lt;/em&gt; 기본 4.7 이전에, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 가 의 조합이었다 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 가 . 이는 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 를 시도하는 다른 스레드가 있는 경우 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 가 차단 될 수 있음을 의미합니다 . 또한, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; 는 다음받을 것 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; 을 이미 차단 계류중인 스레드가 있다면 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; . 다음과 같이 'readMVar'를 구현하면 이전 동작을 복구 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c030f78766179d99d8e90f096f9040d5014a348c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composable memory transactions&lt;/em&gt;, by Tim Harris, Simon Marlow, Simon Peyton Jones, and Maurice Herlihy, in &lt;em&gt;ACM Conference on Principles and Practice of Parallel Programming&lt;/em&gt; 2005. &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/composable-memory-transactions/&quot;&gt;https://www.microsoft.com/en-us/research/publication/composable-memory-transactions/&lt;/a&gt;</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;em&gt;병렬 프로그래밍의 원칙과 실무에 관한 ACM 컨퍼런스에서&lt;/em&gt; Tim Harris, Simon Marlow, Simon Peyton Jones 및 Maurice Herlihy의 &lt;em&gt;작곡 가능한 메모리 트랜잭션&lt;/em&gt; . &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/composable-memory-transactions/&quot;&gt;https://www.microsoft.com/en-us/research/publication/composable 메모리 거래 /&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1384236f2def3ab4fc185f94284fcd38ee43b6a4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Concurrency&lt;/em&gt; means implementing a program by using multiple I/O-performing threads. While a concurrent Haskell program &lt;em&gt;can&lt;/em&gt; run on a parallel machine, the primary goal of using concurrency is not to gain performance, but rather because that is the simplest and most direct way to write the program. Since the threads perform I/O, the semantics of the program is necessarily non-deterministic.</source>
          <target state="translated">&lt;em&gt;동시성&lt;/em&gt; 은 다중 I / O 수행 스레드를 사용하여 프로그램을 구현하는 것을 의미합니다. 동시 Haskell 프로그램 &lt;em&gt;은&lt;/em&gt; 병렬 시스템에서 실행될 &lt;em&gt;수&lt;/em&gt; 있지만 동시성 을 사용하는 주요 목표는 성능을 얻는 것이 아니라 프로그램을 작성하는 가장 단순하고 직접적인 방법이기 때문입니다. 스레드가 I / O를 수행하기 때문에 프로그램의 의미는 반드시 비 결정적입니다.</target>
        </trans-unit>
        <trans-unit id="9769d80734ce4bf34dc95f0640efe2c479cd90ba" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Currently slow.&lt;/em&gt; Decimal encoding of an IEEE &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;현재 느립니다. &lt;/em&gt;IEEE &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 의 십진 인코딩 .</target>
        </trans-unit>
        <trans-unit id="ab5e6587c0995d55a3684ee1cd14c3397310ad1a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Currently slow.&lt;/em&gt; Decimal encoding of an IEEE &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;현재 느립니다. &lt;/em&gt;IEEE &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; 의 십진 인코딩 .</target>
        </trans-unit>
        <trans-unit id="a7c470140844c8efa9ac7828527d2f6848e1675a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Currently slow.&lt;/em&gt; Decimal encoding of an IEEE &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;현재 느립니다. &lt;/em&gt;IEEE &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 의 십진 인코딩 .</target>
        </trans-unit>
        <trans-unit id="501105d057ba603d5e0fe6107331cbb752e4f08a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Currently slow.&lt;/em&gt; Decimal encoding of an IEEE &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;현재 느립니다. &lt;/em&gt;IEEE &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; 의 십진 인코딩 .</target>
        </trans-unit>
        <trans-unit id="cef633ea41ab3c775f849cd0c8d5925778e5fd72" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;. Decode a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; containing 7-bit ASCII encoded text.</source>
          <target state="translated">&lt;em&gt;더 이상 사용되지 않습니다&lt;/em&gt; . 7 비트 ASCII 인코딩 텍스트를 포함 하는 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 디코딩하십시오 .</target>
        </trans-unit>
        <trans-unit id="6587719ee839def4397854c915e327d0c7ab7343" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;. Decode a &lt;code&gt;ByteString&lt;/code&gt; containing 7-bit ASCII encoded text.</source>
          <target state="translated">&lt;em&gt;더 이상 사용되지 않습니다&lt;/em&gt; . 7 비트 ASCII 인코딩 텍스트를 포함 하는 &lt;code&gt;ByteString&lt;/code&gt; 을 디코딩하십시오 .</target>
        </trans-unit>
        <trans-unit id="35a4beb7d9ace7831ced9f276401139e209978e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Either&lt;/em&gt; the class has no functional dependencies, and none of the type constructors in the instance head is declared in &lt;code&gt;M&lt;/code&gt;; &lt;em&gt;or&lt;/em&gt; there is a functional dependency for which none of the type constructors mentioned in the &lt;em&gt;non-determined&lt;/em&gt; part of the instance head is defined in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;어느&lt;/em&gt; 클래스는 기능적인 종속성이없고, 머리에 선언 된 인스턴스의 타입 생성자 없음 &lt;code&gt;M&lt;/code&gt; ; &lt;em&gt;또는&lt;/em&gt; 인스턴스 헤드의 &lt;em&gt;결정되지 않은&lt;/em&gt; 부분 에서 언급 된 유형 생성자 가 &lt;code&gt;M&lt;/code&gt; 에 정의되어 있지 않은 기능적 종속성 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="69d233ec3e7419b821cebae877ba853dd31f9606" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example 1:&lt;/em&gt; Find the possible locations of a Haskell module &lt;code&gt;Test&lt;/code&gt; imported from module &lt;code&gt;Main&lt;/code&gt;:</source>
          <target state="translated">&lt;em&gt;예제 1 : &lt;/em&gt; &lt;code&gt;Main&lt;/code&gt; 모듈에서 가져온 Haskell 모듈 &lt;code&gt;Test&lt;/code&gt; 의 가능한 위치 찾기 :</target>
        </trans-unit>
        <trans-unit id="36ca18a44d985a8cfc24a08857c736aaad181a9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example 2:&lt;/em&gt; Download a file from &lt;code&gt;url&lt;/code&gt; and save it to disk:</source>
          <target state="translated">&lt;em&gt;예 2 : &lt;/em&gt; &lt;code&gt;url&lt;/code&gt; 에서 파일을 다운로드 하여 디스크에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="ae3939ddef267bbf4bf180d9366e5d8818f80256" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example 3:&lt;/em&gt; Compile a Haskell file, putting the &lt;code&gt;.hi&lt;/code&gt; file under &lt;code&gt;interface&lt;/code&gt;:</source>
          <target state="translated">&lt;em&gt;예제 3 :&lt;/em&gt; Haskell 파일을 컴파일하여 &lt;code&gt;.hi&lt;/code&gt; 파일을 &lt;code&gt;interface&lt;/code&gt; 아래에 둡니다 .</target>
        </trans-unit>
        <trans-unit id="a6a420b71e7be83e3bb04156ec688b47d49eebd5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Experimental.&lt;/em&gt; Read a single chunk of strict text from a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. The size of the chunk depends on the amount of input currently buffered.</source>
          <target state="translated">&lt;em&gt;실험적. &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에서 하나의 엄격한 텍스트 덩어리를 읽습니다 . 청크의 크기는 현재 버퍼링 된 입력량에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="5944546a01ded45bf6275d83e88add520a72327d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Explicit&lt;/em&gt; &amp;mdash; This gives your library a stable Safe Haskell type that others can depend on. However, it will increase the chance of compilation failure when your package dependencies change.</source>
          <target state="translated">&lt;em&gt;명시 적&lt;/em&gt; &amp;mdash; 라이브러리에 다른 사람이 신뢰할 수있는 안정적인 Safe Haskell 유형을 제공합니다. 그러나 패키지 종속성이 변경되면 컴파일 실패 가능성이 높아집니다.</target>
        </trans-unit>
        <trans-unit id="f9fb7085892243540161ce1e4eca53598f72dc30" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fixed size&lt;/em&gt;: All event records of a fixed-sized type are of the same length, given in the header event-log header.</source>
          <target state="translated">&lt;em&gt;고정 크기&lt;/em&gt; : 고정 크기 유형의 모든 이벤트 레코드는 헤더 이벤트 로그 헤더에 지정된 길이가 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ea33a4779416b430a5ae6cc265baf4a73107f69f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fixed(-size) primitives&lt;/em&gt; are builder primitives that always result in a sequence of bytes of a fixed length. That is, the length is independent of the value that is encoded. An example of a fixed size primitive is the big-endian encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;, which always results in exactly 8 bytes.</source>
          <target state="translated">&lt;em&gt;고정 (-크기) 프리미티브&lt;/em&gt; 는 항상 고정 길이의 바이트 시퀀스를 생성하는 빌더 프리미티브입니다. 즉, 길이는 인코딩 된 값과 무관합니다. 고정 크기 프리미티브의 예는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 의 빅 엔디안 인코딩으로 , 항상 정확히 8 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="e3a525b75e447e5dd355cddf7b622e8bf3ab9d4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fixed(-size) primitives&lt;/em&gt; are builder primitives that always result in a sequence of bytes of a fixed length. That is, the length is independent of the value that is encoded. An example of a fixed size primitive is the big-endian encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;, which always results in exactly 8 bytes.</source>
          <target state="translated">&lt;em&gt;Fixed (-size) 기본 요소&lt;/em&gt; 는 항상 고정 길이의 바이트 시퀀스를 생성하는 빌더 기본 요소입니다. 즉, 길이는 인코딩 된 값과 무관합니다. 고정 크기 프리미티브의 예는 항상 정확히 8 바이트를 생성 하는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 의 빅 엔디안 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="3289dcdadb15f8d3934b93eb40f90927bb216d11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;GHC Note&lt;/em&gt;: &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; is a better choice. Since GHC uses signals for its internal clock, a call to &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; will usually be interrupted immediately. That makes &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; unusable in a program compiled with GHC, unless the RTS timer is disabled (with &lt;code&gt;+RTS -V0&lt;/code&gt;). Furthermore, without the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; will block all other user threads. Even with the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; requires a full OS thread to itself. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; has none of these shortcomings.</source>
          <target state="translated">&lt;em&gt;GHC 참고&lt;/em&gt; : &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 가 더 나은 선택입니다. GHC는 내부 클럭에 신호를 사용하기 때문에 일반적으로 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 호출이 즉시 중단됩니다. 그 차종은 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; RTS 타이머가 (에 사용하지 않는 한, GHC로 컴파일 된 프로그램에서 사용할 수 없게 &lt;code&gt;+RTS -V0&lt;/code&gt; ). 또한 &lt;code&gt;-threaded&lt;/code&gt; 옵션이 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 은 다른 모든 사용자 스레드를 차단합니다. &lt;code&gt;-threaded&lt;/code&gt; 옵션을 사용 하더라도 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 에는 자체 OS 풀이 필요합니다. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 에는 이러한 단점이 없습니다.</target>
        </trans-unit>
        <trans-unit id="a15d5da49c36e04ca679f2d22b36974f7d9740c0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;GHC Note&lt;/em&gt;: &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; is a better choice. Without the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; will block all other user threads. Even with the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; requires a full OS thread to itself. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; has neither of these shortcomings.</source>
          <target state="translated">&lt;em&gt;GHC 참고&lt;/em&gt; : &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 가 더 나은 선택입니다. &lt;code&gt;-threaded&lt;/code&gt; 옵션이 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; 은 다른 모든 사용자 스레드를 차단합니다. &lt;code&gt;-threaded&lt;/code&gt; 옵션을 사용 하더라도 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; 에는 전체 OS 스레드가 필요합니다. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 에는 이러한 단점이 없습니다.</target>
        </trans-unit>
        <trans-unit id="8554363f3811b7724bb7944656ead45e58c9ca22" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;GHC Note&lt;/em&gt;: &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; is a better choice. Since GHC uses signals for its internal clock, a call to &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; will usually be interrupted immediately. That makes &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; unusable in a program compiled with GHC, unless the RTS timer is disabled (with &lt;code&gt;+RTS -V0&lt;/code&gt;). Furthermore, without the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; will block all other user threads. Even with the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; requires a full OS thread to itself. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; has none of these shortcomings.</source>
          <target state="translated">&lt;em&gt;GHC 참고&lt;/em&gt; : &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 가 더 나은 선택입니다. GHC는 내부 클럭에 신호를 사용하기 때문에 일반적으로 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 호출이 즉시 중단됩니다. 그 차종은 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; RTS 타이머가 (에 사용하지 않는 한, GHC로 컴파일 된 프로그램에서 사용할 수 없게 &lt;code&gt;+RTS -V0&lt;/code&gt; ). 또한 &lt;code&gt;-threaded&lt;/code&gt; 옵션이 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 은 다른 모든 사용자 스레드를 차단합니다. &lt;code&gt;-threaded&lt;/code&gt; 옵션을 사용 하더라도 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 에는 전체 OS 스레드가 필요합니다. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 에는 이러한 단점이 없습니다.</target>
        </trans-unit>
        <trans-unit id="a6525d7f5973bf76c3974e6f50a56f3a9b6b4511" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;GHC Note&lt;/em&gt;: &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; is a better choice. Without the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; will block all other user threads. Even with the &lt;code&gt;-threaded&lt;/code&gt; option, &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; requires a full OS thread to itself. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; has neither of these shortcomings.</source>
          <target state="translated">&lt;em&gt;GHC 참고&lt;/em&gt; : &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 가 더 나은 선택입니다. &lt;code&gt;-threaded&lt;/code&gt; 옵션이 없으면 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; 은 다른 모든 사용자 스레드를 차단합니다. &lt;code&gt;-threaded&lt;/code&gt; 옵션을 사용 하더라도 &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; 은 전체 OS 스레드가 필요합니다. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 에는 이러한 단점이 없습니다.</target>
        </trans-unit>
        <trans-unit id="c83e572121dc84da38a01487077757af11bf4ef2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;GHC Note&lt;/em&gt;: the comment for &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; also applies here.</source>
          <target state="translated">&lt;em&gt;GHC 참고&lt;/em&gt; : &lt;code&gt;&lt;a href=&quot;system-posix-unistd#v:usleep&quot;&gt;usleep&lt;/a&gt;&lt;/code&gt; 에 대한 주석 도 여기에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="45ed8bb553ac516567f209502f17b7cd7842b213" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Generalising Monads to Arrows&lt;/em&gt;, by John Hughes, &lt;em&gt;Science of Computer Programming&lt;/em&gt; 37, pp67-111, May 2000.</source>
          <target state="translated">&lt;em&gt;Monads to Arrows 일반화&lt;/em&gt; , John Hughes, &lt;em&gt;컴퓨터 프로그래밍 과학&lt;/em&gt; 37, pp67-111, 2000 년 5 월.</target>
        </trans-unit>
        <trans-unit id="cf486314cf99cc4ced55abbd834a237e04e41a59" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Generic instances&lt;/em&gt; for the function, implementing it for most of the representation type constructors introduced above.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;위에서 소개 한 대부분의 표현 유형 생성자를 위해 함수를 구현하는 &lt;em&gt;일반 인스턴스&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b308dc3ee1f74f1a781f4782dc2dad4ef82ae33f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Haskell Language&lt;/em&gt; &amp;mdash; Restricted to Safe Language</source>
          <target state="translated">&lt;em&gt;하스켈 언어&lt;/em&gt; &amp;mdash; 안전한 언어로 제한</target>
        </trans-unit>
        <trans-unit id="aad50340bc609ad76fc76adb4f31485b5cd83ba8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Haskell Language&lt;/em&gt; &amp;mdash; Unrestricted</source>
          <target state="translated">&lt;em&gt;하스켈 언어&lt;/em&gt; &amp;mdash; 무제한</target>
        </trans-unit>
        <trans-unit id="5ebaf0411167ad857d8dc7d2ae7807288079f228" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Haskell Language&lt;/em&gt; &amp;mdash; Unrestricted, except only safe overlapping instances allowed.</source>
          <target state="translated">&lt;em&gt;Haskell Language&lt;/em&gt; &amp;mdash; 안전한 겹치는 인스턴스 만 허용하는 것을 제외하고는 무제한입니다.</target>
        </trans-unit>
        <trans-unit id="8151fcb8906a3769463bbe914723d5ffce1fc8d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Heavy inlining.&lt;/em&gt; Encode all bytes of a lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from left-to-right with a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;무거운 인라인. &lt;/em&gt;게으른 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 모든 바이트 를 왼쪽에서 오른쪽으로 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 으로 인코딩하십시오 .</target>
        </trans-unit>
        <trans-unit id="214dabd485077503a8b6a7f38e082f535e1df6da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Heavy inlining.&lt;/em&gt; Encode all bytes of a strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; from left-to-right with a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt;. This function is quite versatile. For example, we can use it to construct a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; that maps every byte before copying it to the buffer to be filled.</source>
          <target state="translated">&lt;em&gt;무거운 인라인. &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 사용하여 엄격한 ByteString 의 모든 바이트 를 왼쪽에서 오른쪽으로 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; . 이 기능은 매우 다양합니다. 예를 들어,이를 사용하여 채워질 버퍼에 복사하기 전에 모든 바이트를 맵핑 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0fed53e9a2b24ad96627ee523d518c9c0c02b955" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Heavy inlining.&lt;/em&gt; Execute a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; with custom execution parameters.</source>
          <target state="translated">&lt;em&gt;무거운 인라인. &lt;/em&gt;사용자 정의 실행 매개 변수를 사용 하여 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="22fb4fc692075d9d0e85632e980c98ab05962217" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Heavy inlining.&lt;/em&gt; Execute a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; with custom execution parameters.</source>
          <target state="translated">&lt;em&gt;무거운 인라인. &lt;/em&gt;사용자 정의 실행 매개 변수를 사용 하여 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="407e90695fb9cc9626dbcdc9743dd1dd428fd272" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Hint:&lt;/em&gt; You can obtain information about the code being generated from GHC by passing the &lt;code&gt;-ddump-deriv&lt;/code&gt; flag. In GHCi, you can expand a type family such as &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep&quot;&gt;Rep&lt;/a&gt;&lt;/code&gt; using the &lt;code&gt;:kind!&lt;/code&gt; command.</source>
          <target state="translated">&lt;em&gt;힌트 : &lt;/em&gt; &lt;code&gt;-ddump-deriv&lt;/code&gt; 플래그를 전달하여 GHC에서 생성되는 코드에 대한 정보를 얻을 수 있습니다 . GHCi 에서 &lt;code&gt;:kind!&lt;/code&gt; 를 사용하여 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep&quot;&gt;Rep&lt;/a&gt;&lt;/code&gt; 와 같은 유형 군을 확장 할 수 있습니다 . 명령.</target>
        </trans-unit>
        <trans-unit id="276947b2d66c76922669549b0556dd0c2280a221" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;IMPORTANT&lt;/em&gt;: the size of the annotation string does NOT figure into the layout of the document, so the document will lay out as though the annotations are not present.</source>
          <target state="translated">&lt;em&gt;중요&lt;/em&gt; : 주석 문자열의 크기는 문서의 레이아웃을 나타내지 않으므로 주석이없는 것처럼 문서가 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="0ccc6401af7612d98c635a53bcda561bc1cbd018" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Imported Modules&lt;/em&gt; &amp;mdash; All forced to be safe imports, all must be trusted.</source>
          <target state="translated">&lt;em&gt;Imported Modules (가져온 모듈)&lt;/em&gt; &amp;mdash; 모두 안전하게 가져 오도록 강요되며 모두 신뢰할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="3177944c79160b113c3e6825a1110e135d8482a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Imported Modules&lt;/em&gt; &amp;mdash; Under control of module author which ones must be trusted.</source>
          <target state="translated">&lt;em&gt;가져온 모듈&lt;/em&gt; &amp;mdash; 신뢰할 수 있어야하는 모듈 작성자의 제어하에 있습니다.</target>
        </trans-unit>
        <trans-unit id="5929f52816170952b5022cd518be1d190e68180d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Inferred&lt;/em&gt; &amp;mdash; This works well and adds no dependencies on the Safe Haskell type of any modules in other packages. It does mean that the Safe Haskell type of your own modules could change without warning if a dependency changes. One way to deal with this is through the use of &lt;a href=&quot;#safe-flag-summary&quot;&gt;Safe Haskell warning flags&lt;/a&gt; that will warn if GHC infers a Safe Haskell type different from expected.</source>
          <target state="translated">&lt;em&gt;유추&lt;/em&gt; &amp;mdash; 이것은 잘 작동하며 다른 패키지에있는 모든 모듈의 Safe Haskell 유형에 대한 종속성을 추가하지 않습니다. 이는 의존성이 변경 될 경우 Safe Haskell 유형의 자체 모듈이 경고없이 변경 될 수 있음을 의미합니다. 이를 처리하는 한 가지 방법은 GHC가 예상과 다른 Safe Haskell 유형을 유추하는 경우 &lt;a href=&quot;#safe-flag-summary&quot;&gt;경고&lt;/a&gt; 하는 Safe Haskell 경고 플래그를 사용 하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e324661ef3cfb26e07739b2998871807a6d64fbb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Linux&lt;/em&gt;: Use your package management tool.</source>
          <target state="translated">&lt;em&gt;Linux&lt;/em&gt; : 패키지 관리 도구를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0a054eafd72b0536034dcbbe0d2010494e24e9e0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Mac OS X&lt;/em&gt;: Clang is included by default on recent OS X machines when XCode is installed (from 10.6 and later). LLVM is not included. In order to use the LLVM based code generator, you should install the &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt; package manager for OS X. Alternatively you can download binaries for LLVM and Clang from &lt;a href=&quot;http://llvm.org/releases/download.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Mac OS X&lt;/em&gt; : CCode는 XCode가 설치 될 때 최신 OS X 시스템에 기본적으로 포함됩니다 (10.6 이상). LLVM은 포함되어 있지 않습니다. LLVM 기반 코드 생성기를 사용하려면 OS X 용 &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt; 패키지 관리자를 설치해야합니다. 또는 LLVM 및 Clang 용 바이너리를 &lt;a href=&quot;http://llvm.org/releases/download.html&quot;&gt;여기&lt;/a&gt; 에서 다운로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="00e93d4ed6d5ea7079faa5a2a3e3003a4f1ddfef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Mac OS X&lt;/em&gt;: Clang is included by default on recent OS X machines when Xcode is installed (from 10.6 and later). LLVM is not included. In order to use the LLVM based code generator, you should install the &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt; package manager for OS X. Alternatively you can download binaries for LLVM and Clang from &lt;a href=&quot;http://llvm.org/releases/download.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Mac OS X&lt;/em&gt; : Clang은 Xcode가 설치 될 때 (10.6 이상부터) 최신 OS X 컴퓨터에 기본적으로 포함됩니다. LLVM은 포함되어 있지 않습니다. LLVM 기반 코드 생성기를 사용하려면 OS X 용 &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt; 패키지 관리자를 설치해야합니다. 또는 &lt;a href=&quot;http://llvm.org/releases/download.html&quot;&gt;여기&lt;/a&gt; 에서 LLVM 및 Clang 용 바이너리를 다운로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ccf1b145735dbf1e0dd404a06c2e1f539013cc07" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Module Trusted&lt;/em&gt; &amp;mdash; No</source>
          <target state="translated">&lt;em&gt;신뢰할 수있는 모듈&lt;/em&gt; &amp;mdash; 아니요</target>
        </trans-unit>
        <trans-unit id="8844cafd0561a033b1cb5d1b26abfcaf377275d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Module Trusted&lt;/em&gt; &amp;mdash; Yes</source>
          <target state="translated">&lt;em&gt;신뢰할 수있는 모듈&lt;/em&gt; &amp;mdash; 예</target>
        </trans-unit>
        <trans-unit id="7e2e89c9e9c52676de7c3b95d3a7e6d106f82d06" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Module Trusted&lt;/em&gt; &amp;mdash; Yes.</source>
          <target state="translated">&lt;em&gt;신뢰할 수있는 모듈&lt;/em&gt; &amp;mdash; 예.</target>
        </trans-unit>
        <trans-unit id="b4df3316e20037d36a201ec12b627c6791628c00" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Module Trusted&lt;/em&gt; (&lt;a href=&quot;#ghc-flag--fpackage-trust&quot;&gt;&lt;code&gt;-fpackage-trust&lt;/code&gt;&lt;/a&gt; enabled) &amp;mdash; Yes but only if the package the module resides in is also trusted.</source>
          <target state="translated">&lt;em&gt;신뢰할 수있는 모듈&lt;/em&gt; ( &lt;a href=&quot;#ghc-flag--fpackage-trust&quot;&gt; &lt;code&gt;-fpackage-trust&lt;/code&gt; &lt;/a&gt; enabled) &amp;mdash; 예이지만 모듈이있는 패키지도 신뢰할 수있는 경우에만 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="62db890e544c1cb820e640dc6716e0a5d3efb852" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Module boundary control&lt;/em&gt; &amp;mdash; Only symbols that are publicly available through other module export lists can be accessed in the safe language. Values using data constructors not exported by the defining module, cannot be examined or created. As such, if a module &lt;code&gt;M&lt;/code&gt; establishes some invariants through careful use of its export list, then code written in the safe language that imports &lt;code&gt;M&lt;/code&gt; is guaranteed to respect those invariants.</source>
          <target state="translated">&lt;em&gt;모듈 경계 제어&lt;/em&gt; &amp;mdash; 다른 모듈 내보내기 목록을 통해 공개적으로 사용 가능한 기호 만 안전한 언어로 액세스 할 수 있습니다. 정의 모듈에서 내 보내지 않은 데이터 생성자를 사용하는 값은 검사하거나 만들 수 없습니다. 따라서, 모듈의 경우 &lt;code&gt;M&lt;/code&gt; 은 수출 목록, 수입하는 안전 언어로 작성된 다음 코드의주의 사용을 통해 몇 가지 불변 설정 &lt;code&gt;M&lt;/code&gt; 은 그 불변을 존중이 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="af6f97a5db3c64ddd8971103b6bc9da3d0737912" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NB:&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;numeric#v:readInt&quot;&gt;readInt&lt;/a&gt;&lt;/code&gt; is the 'dual' of &lt;code&gt;&lt;a href=&quot;numeric#v:showIntAtBase&quot;&gt;showIntAtBase&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;numeric#v:readDec&quot;&gt;readDec&lt;/a&gt;&lt;/code&gt; is the `dual' of &lt;code&gt;&lt;a href=&quot;numeric#v:showInt&quot;&gt;showInt&lt;/a&gt;&lt;/code&gt;. The inconsistent naming is a historical accident.</source>
          <target state="translated">&lt;em&gt;NB : &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;numeric#v:readInt&quot;&gt;readInt&lt;/a&gt;&lt;/code&gt; 가 의 '듀얼'이다 &lt;code&gt;&lt;a href=&quot;numeric#v:showIntAtBase&quot;&gt;showIntAtBase&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;numeric#v:readDec&quot;&gt;readDec&lt;/a&gt;&lt;/code&gt; 은 의 '는'듀얼입니다 &lt;code&gt;&lt;a href=&quot;numeric#v:showInt&quot;&gt;showInt&lt;/a&gt;&lt;/code&gt; . 일치하지 않는 이름 지정은 역사적 사고입니다.</target>
        </trans-unit>
        <trans-unit id="bca180f17751f120e4fc116efb72dc04296161c0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: This is included for backwards compatibility.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : 이전 버전과의 호환성을 위해 포함되었습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e3699309a32757a05c18bbf210b56e81ae43c34b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; The &lt;a href=&quot;data-array-iarray&quot;&gt;Data.Array.IArray&lt;/a&gt; module provides a more general interface to immutable arrays: it defines operations with the same names as those defined below, but with more general types, and also defines &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; instances of the relevant classes. To use that more general interface, import &lt;a href=&quot;data-array-iarray&quot;&gt;Data.Array.IArray&lt;/a&gt; but not &lt;a href=&quot;data-array&quot;&gt;Data.Array&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;참고 : &lt;/em&gt;&lt;a href=&quot;data-array-iarray&quot;&gt;Data.Array.IArray의&lt;/a&gt; 좀 더 일반적인 유형을 아래에 정의 된 것과 동일한 이름을 가진 작업을 정의하지만 함께, 또한 정의 모듈은 불변의 배열에 더 일반적인 인터페이스를 제공 &lt;code&gt;&lt;a href=&quot;data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; 관련 클래스의 인스턴스를. 보다 일반적인 인터페이스를 사용하려면 &lt;a href=&quot;data-array-iarray&quot;&gt;Data.Array가&lt;/a&gt; 아닌 &lt;a href=&quot;data-array&quot;&gt;Data.Array.IArray를&lt;/a&gt; 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="99a1736f2957ab2831f3fb2c06b8e3ef16a472ca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; This module will be removed in a future release. Instead, use &lt;a href=&quot;control-monad-trans-except&quot;&gt;Control.Monad.Trans.Except&lt;/a&gt;, which does not restrict the exception type, and also includes a base exception monad.</source>
          <target state="translated">&lt;em&gt;참고 :&lt;/em&gt; 이 모듈은 향후 릴리스에서 제거 될 예정입니다. 대신, 예외 유형을 제한하지 않으며 기본 예외 모나드도 포함하는 &lt;a href=&quot;control-monad-trans-except&quot;&gt;Control.Monad.Trans.Except를&lt;/a&gt; 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="cf3e60fafda98a23cbcee79e00d6faf14e067641" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; You should use &lt;a href=&quot;data-map-strict&quot;&gt;Data.Map.Strict&lt;/a&gt; instead of this module if:</source>
          <target state="translated">&lt;em&gt;참고 : 다음&lt;/em&gt; 과 같은 경우이 모듈 대신 &lt;a href=&quot;data-map-strict&quot;&gt;Data.Map.Strict&lt;/a&gt; 를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="7ef42cb512999221456657d1ed0873d9c3a0dd04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; this does not yield a monad unless the argument monad is commutative.</source>
          <target state="translated">&lt;em&gt;참고 :&lt;/em&gt; 모나드 인수가 정식이 아닌 한 모나드를 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8b10853fe07ed106cc40e33aa049552c45deb62e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; this is valid only on architectures where data and function pointers range over the same set of addresses, and should only be used for bindings to external libraries whose interface already relies on this assumption.</source>
          <target state="translated">&lt;em&gt;참고 :&lt;/em&gt; 이것은 데이터 및 함수 포인터가 동일한 주소 집합에 걸쳐있는 아키텍처에서만 유효하며 인터페이스가 이미이 가정에 의존하는 외부 라이브러리에 바인딩하는 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="d46668e6afc2ef7a4c00f5c45217e100c43a41ae" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: For fixed-width integer types, this function does not attempt to detect overflow, so a sufficiently long input may give incorrect results. If you are worried about overflow, use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; for your result type.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : 고정 너비 정수 유형의 경우이 함수는 오버플로를 감지하지 않으므로 충분히 긴 입력은 잘못된 결과를 초래할 수 있습니다. 오버플로가 걱정되면 결과 유형에 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 를 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="4beca137cb65d5e5734601659db1bb31ff532dee" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: In some languages, case conversion is a locale- and context-dependent operation. The case conversion functions in this module are &lt;em&gt;not&lt;/em&gt; locale sensitive. Programs that require locale sensitivity should use appropriate versions of the &lt;a href=&quot;http://hackage.haskell.org/package/text-icu-0.6.3.7/docs/Data-Text-ICU.html#g:4&quot;&gt;case mapping functions from the text-icu package&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : 일부 언어에서 경우 변환은 로캘 및 상황에 따른 작업입니다. 이 모듈의 대소 문자 변환 기능은 로케일에 민감 &lt;em&gt;하지 않습니다&lt;/em&gt; . 로케일 구분이 필요한 프로그램 &lt;a href=&quot;http://hackage.haskell.org/package/text-icu-0.6.3.7/docs/Data-Text-ICU.html#g:4&quot;&gt;은 text-icu 패키지에서&lt;/a&gt; 적절한 버전의 케이스 맵핑 기능을 사용해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="6daf5267275b3ec6a8acadfb74c700b91109e913" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Read below the synopsis for important notes on the use of this module.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이 모듈 사용에 대한 중요한 참고 사항은 아래 개요를 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="dfe49f9a1b9803fa8045d1cd893d57c7cca1fc13" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: The behaviour of functions in this module depends on the version of GHC you are using.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이 모듈의 기능 동작은 사용중인 GHC 버전에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="ab507f138df0f9821f8c05dc187d168b78752b2c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: This function is almost ten times faster than &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt;, but is slightly less accurate.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이 기능은 &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; 것보다 거의 10 배 빠르지 만 정확도는 약간 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="fc1b3f8e0b226adbcd2f02ea9dc1633a3659acbb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: This function is almost ten times faster than &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt;, but is slightly less accurate.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이 기능은 &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; 것보다 거의 10 배 빠르지 만 정확도는 약간 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="56157e5c45db589d39d9fd25447e4e607a3dfb9b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: This operation is highly unsafe, as it can introduce externally visible non-determinism into an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; action.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이 작업은 외부에서 볼 수있는 비결 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 작업에 도입 할 수 있으므로 안전하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="db2c98782f53c435c668ec2d9e1db82df6eb2ab6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: in GHC, if you have a &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;, you essentially have a pointer to the thread itself. This means the thread itself can't be garbage collected until you drop the &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. This misfeature will hopefully be corrected at a later date.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : GHC에서 &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 가 있으면 본질적으로 스레드 자체에 대한 포인터가 있습니다. 이것은 &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 를 삭제할 때까지 스레드 자체를 가비지 수집 할 수 없음을 의미합니다 . 이 기능은 나중에 수정 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="3aeab860b4eeed250ea1a07689f81707d8979a70" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: in GHC, if you have a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;, you essentially have a pointer to the thread itself. This means the thread itself can't be garbage collected until you drop the &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. This misfeature will hopefully be corrected at a later date.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : GHC에서 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 가 있으면 본질적으로 스레드 자체에 대한 포인터가 있습니다. 이것은 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 를 삭제할 때까지 스레드 자체를 가비지 수집 할 수 없음을 의미합니다 . 이 기능은 나중에 수정 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="82625db6b0d8147f8dac816f8114b6297c4e4718" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: in GHC, if you have a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;, you essentially have a pointer to the thread itself. This means the thread itself can't be garbage collected until you drop the &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt;. This misfeature will hopefully be corrected at a later date.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; : GHC에서 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 가 있으면 본질적으로 스레드 자체에 대한 포인터가 있습니다. 이것은 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 를 삭제할 때까지 스레드 자체를 가비지 수집 할 수 없음을 의미합니다 . 이 기능은 나중에 수정 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="be1a1b117be20cf2f08d99126acdd91a639256ca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: this function does not take language or culture specific rules into account. For instance, in English, different style guides disagree on whether the book name &quot;The Hill of the Red Fox&quot; is correctly title cased&amp;mdash;but this function will capitalize &lt;em&gt;every&lt;/em&gt; word.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이 기능은 언어 또는 문화 별 규칙을 고려하지 않습니다. 예를 들어 영어로 된 다른 스타일 가이드는 책 이름 &quot;The Red Fox의 언덕&quot;이 정확하게 제목을 붙 였는지 여부에 동의하지 않지만이 함수는 &lt;em&gt;모든&lt;/em&gt; 단어 를 대문자로 표시 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="20250cede5659fe8bf002a7115317e6d98ec119e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: this function is &lt;em&gt;not&lt;/em&gt; lazy, as it must decode its entire input before it can return a result. If you need lazy (streaming) decoding, use &lt;code&gt;&lt;a href=&quot;data-text-lazy-encoding#v:decodeUtf8With&quot;&gt;decodeUtf8With&lt;/a&gt;&lt;/code&gt; in lenient mode.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이 함수는 결과를 반환하기 전에 전체 입력을 디코딩해야하므로 지연 &lt;em&gt;되지 않습니다&lt;/em&gt; . 지연 (스트리밍) 디코딩이 필요한 경우 &lt;code&gt;&lt;a href=&quot;data-text-lazy-encoding#v:decodeUtf8With&quot;&gt;decodeUtf8With&lt;/a&gt;&lt;/code&gt; 모드에서 decodeUtf8With 를 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="b62e2da0e17d12769884b1aa2ba415a21c18dd0d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Only applies in combination with the native code generator.&lt;/em&gt; Use the graph colouring register allocator for register allocation in the native code generator. By default, GHC uses a simpler, faster linear register allocator. The downside being that the linear register allocator usually generates worse code.</source>
          <target state="translated">&lt;em&gt;기본 코드 생성기와 함께 만 적용됩니다. &lt;/em&gt;원시 코드 생성기의 레지스터 할당에 그래프 색상 지정 레지스터 할당자를 사용하십시오. 기본적으로 GHC는 더 단순하고 빠른 선형 레지스터 할당자를 사용합니다. 단점은 선형 레지스터 할당자가 일반적으로 더 나쁜 코드를 생성한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fa91af8cf761e521aabf547672f18803ac273063" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Only applies in combination with the native code generator.&lt;/em&gt; Use the iterative coalescing graph colouring register allocator for register allocation in the native code generator. This is the same register allocator as the &lt;a href=&quot;#ghc-flag--fregs-graph&quot;&gt;&lt;code&gt;-fregs-graph&lt;/code&gt;&lt;/a&gt; one but also enables iterative coalescing during register allocation.</source>
          <target state="translated">&lt;em&gt;기본 코드 생성기와 함께 만 적용됩니다. &lt;/em&gt;기본 코드 생성기에서 레지스터 할당에 반복 병합 그래프 색상 지정 레지스터 할당자를 사용하십시오. 이것은 &lt;a href=&quot;#ghc-flag--fregs-graph&quot;&gt; &lt;code&gt;-fregs-graph&lt;/code&gt; &lt;/a&gt; 와 동일한 레지스터 할당 자 이지만 레지스터 할당 중에 반복 병합을 가능하게합니다.</target>
        </trans-unit>
        <trans-unit id="e45b4e85e98a22a00d832409ff973eebd06b5740" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Open type families&lt;/em&gt; Open type families are typechecked incrementally. This means that when a module is imported type family instances contained in that module are checked against instances present in already imported modules.</source>
          <target state="translated">&lt;em&gt;개방형 패밀리&lt;/em&gt; 개방형 패밀리는 점진적으로 유형 검사됩니다. 이는 모듈을 가져올 때 해당 모듈에 포함 된 유형의 패밀리 인스턴스를 이미 가져온 모듈에있는 인스턴스와 비교하여 검사 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7113721ad76d60dd94d004e6812d911541ae5431" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Package database stack:&lt;/em&gt; Package databases are arranged in a stack structure. When GHC starts up it adds the global and the user package databases to the stack, in that order, unless &lt;a href=&quot;#envvar-GHC_PACKAGE_PATH&quot; id=&quot;index-2&quot;&gt;&lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt;&lt;/a&gt; is specified. When &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; is specified then it will determine the initial database stack. Several command line options described below can further manipulate this initial stack. You can see GHC&amp;rsquo;s effective package database stack by running GHC with the &lt;a href=&quot;using#ghc-flag--v&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;em&gt;패키지 데이터베이스 스택 :&lt;/em&gt; 패키지 데이터베이스는 스택 구조로 배열됩니다. GHC가 시작되면 &lt;a href=&quot;#envvar-GHC_PACKAGE_PATH&quot; id=&quot;index-2&quot;&gt; &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; &lt;/a&gt; 가 지정 되지 않은 경우 전역 및 사용자 패키지 데이터베이스를 순서대로 스택에 추가 합니다. &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; 가 지정 되면 초기 데이터베이스 스택이 결정됩니다. 아래에 설명 된 여러 명령 줄 옵션은이 초기 스택을 추가로 조작 할 수 있습니다. &lt;a href=&quot;using#ghc-flag--v&quot;&gt; &lt;code&gt;-v&lt;/code&gt; &lt;/a&gt; 플래그 와 함께 GHC를 실행하면 GHC의 효과적인 패키지 데이터베이스 스택을 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f3290aca1792d3baafd6652be0ab62eee820c25a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Package shadowing:&lt;/em&gt; When multiple package databases are in use it is possible, though rarely, that the same installed package id is present in more than one database. In that case, packages closer to the top of the stack will override (&lt;em&gt;shadow&lt;/em&gt;) those below them. If the conflicting packages are found to be equivalent (by ABI hash comparison) then one of them replaces all references to the other, otherwise the overridden package and all those depending on it will be removed.</source>
          <target state="translated">&lt;em&gt;패키지 섀도 잉 :&lt;/em&gt; 여러 패키지 데이터베이스를 사용하는 경우, 설치된 동일한 패키지 ID가 둘 이상의 데이터베이스에 존재할 가능성은 거의 없습니다. 이 경우 스택의 상단에 가까운 패키지는 그 아래의 패키지보다 우선합니다 ( &lt;em&gt;shadow&lt;/em&gt; ). 충돌하는 패키지가 ABI 해시 비교에 의해 동등한 것으로 판명되면 패키지 중 하나가 다른 모든 참조를 대체합니다. 그렇지 않으면 재정의 된 패키지와 패키지에 따라 모든 패키지가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="912b6dba6e6e1a26c1c6c1b4ec3b984dd9aa9c87" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Package version selection:&lt;/em&gt; When selecting a package, GHC will search for packages in all available databases. If multiple versions of the same package are available the latest non-broken version will be chosen.</source>
          <target state="translated">&lt;em&gt;패키지 버전 선택 : 패키지를 선택할&lt;/em&gt; 때 GHC는 사용 가능한 모든 데이터베이스에서 패키지를 검색합니다. 동일한 패키지의 여러 버전이 사용 가능한 경우 최신의 최신 버전이 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="d0a2b1f35156dec789ec1cde8499bf3f8439c973" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Parallelism&lt;/em&gt; means running a Haskell program on multiple processors, with the goal of improving performance. Ideally, this should be done invisibly, and with no semantic changes.</source>
          <target state="translated">&lt;em&gt;병렬 처리&lt;/em&gt; 는 성능 향상을 목표로 여러 프로세서에서 Haskell 프로그램을 실행하는 것을 의미합니다. 이상적으로는 눈에 보이지 않고 의미 론적 변화가 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="0261c851960dca416433683c95d0391ecabea5a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Parsing Permutation Phrases,&lt;/em&gt; by Arthur Baars, Andres Loh and Doaitse Swierstra. Published as a functional pearl at the Haskell Workshop 2001.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Arthur Baars, Andres Loh 및 Doaitse Swierstra의 해석 &lt;em&gt;구문 분석 구문 분석 &lt;/em&gt;Haskell Workshop 2001에서 기능성 진주로 출판.</target>
        </trans-unit>
        <trans-unit id="1cf75643fba70a9e965c9a0d56f5ecd26f9a996c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Please note that fold will be deprecated in the future and removed.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;접기는 앞으로 더 이상 사용되지 않으며 제거 될 예정입니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2b4461f500d5286b1fbbf5fde66a9dce3cef7a3d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Referential transparency&lt;/em&gt; &amp;mdash; The types can be trusted. Any pure function, is guaranteed to be pure. Evaluating them is deterministic and won&amp;rsquo;t cause any side effects. Functions in the &lt;code&gt;IO&lt;/code&gt; monad are still allowed and behave as usual. So, for example, the &lt;code&gt;unsafePerformIO :: IO a -&amp;gt; a&lt;/code&gt; function is disallowed in the safe language to enforce this property.</source>
          <target state="translated">&lt;em&gt;참조 투명성&lt;/em&gt; &amp;mdash; 형식을 신뢰할 수 있습니다. 모든 순수한 기능은 순수한 것으로 보장됩니다. 그것들을 평가하는 것은 결정 론적이며 부작용을 일으키지 않습니다. &lt;code&gt;IO&lt;/code&gt; 모나드의 기능 은 여전히 ​​허용되며 평소와 같이 작동합니다. 예를 들어 &lt;code&gt;unsafePerformIO :: IO a -&amp;gt; a&lt;/code&gt; 함수는이 속성을 적용하기 위해 안전한 언어로 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="705e87f1f4b75ba77eb74be2111fcfa0a7270e06" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires :ghc-flag:`-prof`.&lt;/em&gt; Break down the graph by biography. Biographical profiling is described in more detail below (&lt;a href=&quot;#biography-prof&quot;&gt;Biographical Profiling&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;: ghc-flag :`-prof`가 필요합니다. &lt;/em&gt;전기로 그래프를 분류하십시오. 전기 프로파일 링은 아래에서보다 상세하게 설명됩니다 ( &lt;a href=&quot;#biography-prof&quot;&gt;전기 프로파일 링&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="42f2b1f3a6341c4a533f0870768e002177176b61" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires :ghc-flag:`-prof`.&lt;/em&gt; Break down the graph by retainer set. Retainer profiling is described in more detail below (&lt;a href=&quot;#retainer-prof&quot;&gt;Retainer Profiling&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;: ghc-flag :`-prof`가 필요합니다. &lt;/em&gt;리테이너 세트별로 그래프를 분류하십시오. 리테이너 프로파일 링은 아래에 자세히 설명되어 있습니다 ( &lt;a href=&quot;#retainer-prof&quot;&gt;리테이너 프로파일 링&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="e8fb77f52aacf2a8ea7260f93819ef43bb939eb9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires :ghc-flag:`-prof`.&lt;/em&gt; Break down the live heap by the module containing the code which produced the data.</source>
          <target state="translated">&lt;em&gt;: ghc-flag :`-prof`가 필요합니다. &lt;/em&gt;데이터를 생성 한 코드가 포함 된 모듈로 라이브 힙을 분류하십시오.</target>
        </trans-unit>
        <trans-unit id="a0658daba7f9f5546286f9552e60fcd18e33daa3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires :ghc-flag:`-prof`.&lt;/em&gt; Breaks down the graph by closure description. For actual data, the description is just the constructor name, for other closures it is a compiler-generated string identifying the closure.</source>
          <target state="translated">&lt;em&gt;: ghc-flag :`-prof`가 필요합니다. &lt;/em&gt;클로저 설명으로 그래프를 세분화합니다. 실제 데이터의 경우 설명은 생성자 이름이며 다른 클로저의 경우 클로저를 식별하는 컴파일러 생성 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="123d7cdc18e17372a1940b984b00aee65bc8b638" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires :ghc-flag:`-prof`.&lt;/em&gt; Breaks down the graph by the cost-centre stack which produced the data.</source>
          <target state="translated">&lt;em&gt;: ghc-flag :`-prof`가 필요합니다.&lt;/em&gt; 데이터를 생성 한 비용 중심 스택별로 그래프를 세분화합니다.</target>
        </trans-unit>
        <trans-unit id="57721a591ecc617b70db041058504ed77707be00" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires :ghc-flag:`-prof`.&lt;/em&gt; Breaks down the graph by type. For closures which have function type or unknown/polymorphic type, the string will represent an approximation to the actual type.</source>
          <target state="translated">&lt;em&gt;: ghc-flag :`-prof`가 필요합니다. &lt;/em&gt;유형별로 그래프를 세분화합니다. 함수 유형 또는 알 수없는 / 다형성 유형이있는 클로저의 경우 문자열은 실제 유형에 대한 근사값을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="462386cf81a5d9ff64647c9902f04e34274934c2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;. Break down the graph by biography. Biographical profiling is described in more detail below (&lt;a href=&quot;#biography-prof&quot;&gt;Biographical Profiling&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 가&lt;/a&gt;&lt;em&gt; 필요합니다&lt;/em&gt; . 전기별로 그래프를 분류합니다. 전기 프로파일 링은 아래에 자세히 설명되어 있습니다 ( &lt;a href=&quot;#biography-prof&quot;&gt;전기 프로파일 링&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="81e800810d90bf54a05dd074d7404e3f55f6dfe5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;. Break down the graph by retainer set. Retainer profiling is described in more detail below (&lt;a href=&quot;#retainer-prof&quot;&gt;Retainer Profiling&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 가&lt;/a&gt;&lt;em&gt; 필요합니다&lt;/em&gt; . 리테이너 세트별로 그래프를 분류합니다. 리테이너 프로파일 링은 아래에 자세히 설명되어 있습니다 ( &lt;a href=&quot;#retainer-prof&quot;&gt;리테이너 프로파일 링&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1b33582c594205ec781a8f4ce93138e6af6938cd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;. Break down the live heap by the module containing the code which produced the data.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 가&lt;/a&gt;&lt;em&gt; 필요합니다&lt;/em&gt; . 데이터를 생성 한 코드가 포함 된 모듈별로 라이브 힙을 분류합니다.</target>
        </trans-unit>
        <trans-unit id="2a74b213feb21230452d654c07f48705359ea420" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;. Breaks down the graph by closure description. For actual data, the description is just the constructor name, for other closures it is a compiler-generated string identifying the closure.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 가&lt;/a&gt;&lt;em&gt; 필요합니다&lt;/em&gt; . 마감 설명으로 그래프를 분류합니다. 실제 데이터의 경우 설명은 생성자 이름 일 뿐이고 다른 클로저의 경우에는 클로저를 식별하는 컴파일러 생성 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="47b3758b9f4d5b38e4146a2f02b81f8056d08bbb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;. Breaks down the graph by the cost-centre stack which produced the data.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 가&lt;/a&gt;&lt;em&gt; 필요합니다&lt;/em&gt; . 데이터를 생성 한 비용 센터 스택별로 그래프를 분류합니다.</target>
        </trans-unit>
        <trans-unit id="40a816f0ee8634bf396e7c364e4e63d3ce40f49f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt;. Breaks down the graph by type. For closures which have function type or unknown/polymorphic type, the string will represent an approximation to the actual type.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; 가&lt;/a&gt;&lt;em&gt; 필요합니다&lt;/em&gt; . 유형별로 그래프를 분류합니다. 함수 유형 또는 알 수없는 / 다형성 유형이있는 클로저의 경우 문자열은 실제 유형에 대한 근사치를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b425bb33f0cf5570e1aae023075a9a1ba7f42526" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Semantic consistency&lt;/em&gt; &amp;mdash; For any module that imports a module written in the safe language, expressions that compile both with and without the safe import have the same meaning in both cases. That is, importing a module written in the safe language cannot change the meaning of existing code that isn&amp;rsquo;t dependent on that module. So, for example, there are some restrictions placed on the use of &lt;a href=&quot;glasgow_exts#instance-overlap&quot;&gt;OverlappingInstances&lt;/a&gt;, as these can violate this property.</source>
          <target state="translated">&lt;em&gt;의미 일관성&lt;/em&gt; &amp;mdash; 안전한 언어로 작성된 모듈을 가져 오는 모듈의 경우, 안전한 가져 오기가 있거나없는 컴파일은 두 경우 모두 동일한 의미를 갖습니다. 즉, 안전한 언어로 작성된 모듈을 가져 오면 해당 모듈에 의존하지 않는 기존 코드의 의미를 변경할 수 없습니다. 예를 들어, 이 속성을 위반할 수 있으므로 &lt;a href=&quot;glasgow_exts#instance-overlap&quot;&gt;OverlappingInstances&lt;/a&gt; 사용에 일부 제한 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="89de00924cd3479beec6109e9b79b70ef0022bcc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Strict subset&lt;/em&gt; &amp;mdash; The safe language is strictly a subset of Haskell as implemented by GHC. Any expression that compiles in the safe language has the same meaning as it does when compiled in normal Haskell.</source>
          <target state="translated">&lt;em&gt;엄격한 하위 집합&lt;/em&gt; &amp;mdash; 안전한 언어는 GHC에서 구현 한 Haskell의 하위 집합입니다. 안전한 언어로 컴파일되는 표현식은 일반적인 Haskell에서 컴파일 할 때와 같은 의미를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="3db8e3e352c0b76e2e5b6b872c0aa32b584fb409" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Structuring Depth-First Search Algorithms in Haskell&lt;/em&gt;, by David King and John Launchbury, &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.6526&quot;&gt;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.6526&lt;/a&gt;</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;David King과 John Launchbury의 &lt;em&gt;Haskell에서 깊이 우선 검색 알고리즘&lt;/em&gt; 구조화, &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.6526&quot;&gt;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.6526&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6953c31e452f3102215b2750c3df5ff2d08c0540" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Switching off the ambiguity check.&lt;/em&gt; Even if a function has an ambiguous type according the &amp;ldquo;guiding principle&amp;rdquo;, it is possible that the function is callable. For example:</source>
          <target state="translated">&lt;em&gt;모호성 검사를 끕니다. &lt;/em&gt;&quot;안내 원칙&quot;에 따라 함수가 모호한 유형을 갖는 경우에도 해당 함수를 호출 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0dcbc9c8d506fce1593616196ad42863caef94f5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This module is DEPRECATED and will be removed in the future!&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;이 모듈은 더 이상 사용되지 않으며 향후 제거 될 예정입니다!&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4511ddab48f01e74dbb8517f44eb7eeb29128bed" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Variable size&lt;/em&gt;: Each event record includes a length field.</source>
          <target state="translated">&lt;em&gt;가변 크기&lt;/em&gt; : 각 이벤트 레코드에는 길이 필드가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="5957913496482cb50d556eae277fd4fdc650517b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Version conflict resolution:&lt;/em&gt; If multiple instances of a package version chosen by GHC are available then GHC will choose an unspecified instance.</source>
          <target state="translated">&lt;em&gt;버전 충돌 해결 :&lt;/em&gt; GHC에서 선택한 패키지 버전의 여러 인스턴스를 사용할 수있는 경우 GHC는 지정되지 않은 인스턴스를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="f205a3e455ddcfcad3d33dabd9244ab103b9a8a2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning&lt;/em&gt;: The size of the map must not exceed &lt;code&gt;maxBound::Int&lt;/code&gt;. Violation of this condition is not detected and if the size limit is exceeded, its behaviour is undefined.</source>
          <target state="translated">&lt;em&gt;경고&lt;/em&gt; : 맵의 크기는 &lt;code&gt;maxBound::Int&lt;/code&gt; 초과하지 않아야합니다 . 이 조건을 위반하면 감지되지 않으며 크기 제한을 초과하면 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b585db4fa55353109462192344937f67dbb88de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning&lt;/em&gt;: the &lt;code&gt;&lt;a href=&quot;system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; operation holds a semi-closed handle on the file until the entire contents of the file have been consumed. It follows that an attempt to write to a file (using &lt;code&gt;&lt;a href=&quot;system-io#v:writeFile&quot;&gt;writeFile&lt;/a&gt;&lt;/code&gt;, for example) that was earlier opened by &lt;code&gt;&lt;a href=&quot;system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; will usually result in failure with &lt;code&gt;&lt;a href=&quot;system-io-error#v:isAlreadyInUseError&quot;&gt;isAlreadyInUseError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;경고&lt;/em&gt; : &lt;code&gt;&lt;a href=&quot;system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 작업은 파일의 전체 내용이 소비 될 때까지 파일에 반쯤 닫힌 핸들을 유지합니다. &lt;code&gt;&lt;a href=&quot;system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 에 의해 이전에 열린 파일에 쓰기를 시도하면 ( 예를 들어 &lt;code&gt;&lt;a href=&quot;system-io#v:writeFile&quot;&gt;writeFile&lt;/a&gt;&lt;/code&gt; 사용 ) &lt;code&gt;&lt;a href=&quot;system-io-error#v:isAlreadyInUseError&quot;&gt;isAlreadyInUseError&lt;/a&gt;&lt;/code&gt; 로 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="93166860cf34225f1627c354dd12c3b2a1360b00" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning&lt;/em&gt;: this is an internal module, and does not have a stable API or name. Functions in this module may not check or enforce preconditions expected by public modules. Use at your own risk!</source>
          <target state="translated">&lt;em&gt;경고&lt;/em&gt; : 이것은 내부 모듈이며 안정적인 API 또는 이름이 없습니다. 이 모듈의 기능은 공용 모듈에서 예상되는 사전 조건을 확인하거나 시행하지 않을 수 있습니다. 자신의 책임하에 사용하십시오!</target>
        </trans-unit>
        <trans-unit id="82ff565161479f911aee1e9f05ae8c38c6c1a1ec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Warning&lt;/em&gt;: this is an internal module, and does not have a stable API or name. Use at your own risk!</source>
          <target state="translated">&lt;em&gt;경고&lt;/em&gt; : 이것은 내부 모듈이며 안정적인 API 또는 이름이 없습니다. 자신의 책임하에 사용하십시오!</target>
        </trans-unit>
        <trans-unit id="d127c14d0847810ba261c5a1deb29d3cf81d4266" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;When there is a right-hand side, GHC infers the most polymorphic kind consistent with the right-hand side.&lt;/em&gt; Examples: ordinary data type and GADT declarations, class declarations. In the case of a class declaration the role of &amp;ldquo;right hand side&amp;rdquo; is played by the class method signatures.</source>
          <target state="translated">&lt;em&gt;우변이있을 때, GHC는 우변과 일치하는 가장 다형성을 유추합니다. &lt;/em&gt;예 : 일반 데이터 유형 및 GADT 선언, 클래스 선언 클래스 선언의 경우 &quot;오른쪽&quot;의 역할은 클래스 메소드 서명에 의해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="4a842e58b2e8acdebedf4712bca8d844fe2498be" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;When there is no right hand side, GHC defaults argument and result kinds to ``Type``, except when directed otherwise by a kind signature&lt;/em&gt;. Examples: data and open type family declarations.</source>
          <target state="translated">&lt;em&gt;오른쪽이없는 경우 GHC는 기본적으로 인수 및 결과 종류를``Type ''으로 지정합니다 (단, 시그니처 서명으로 다르게 지시 된 경우 제외)&lt;/em&gt; . 예 : 데이터 및 개방형 패밀리 선언</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
