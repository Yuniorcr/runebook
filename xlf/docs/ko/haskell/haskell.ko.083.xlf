<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="a93f06c73a9f12fa3e18026b2a8785a41a101bf6" translate="yes" xml:space="preserve">
          <source>Specialized folds</source>
          <target state="translated">특수 주름</target>
        </trans-unit>
        <trans-unit id="f97044c34f322278833a86f50d9bdc888c10c331" translate="yes" xml:space="preserve">
          <source>Specific signals</source>
          <target state="translated">특정 신호</target>
        </trans-unit>
        <trans-unit id="012d095adddd2c75c8a53cf7b075e562107942d0" translate="yes" xml:space="preserve">
          <source>Specifically, a package &lt;em&gt;P is trusted&lt;/em&gt; when one of these hold:</source>
          <target state="translated">특히 패키지 &lt;em&gt;P는&lt;/em&gt; 다음 중 하나를 보유 할 때 &lt;em&gt;신뢰&lt;/em&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="31067049b8259a6fe75ff4e59dea7ee1d9fd4720" translate="yes" xml:space="preserve">
          <source>Specifically, we apply the following rule to determine if a type-class method call is &lt;em&gt;unsafe&lt;/em&gt; when overlapping instances are involved:</source>
          <target state="translated">특히 겹치는 인스턴스가 관련 될 때 형식 클래스 메서드 호출이 &lt;em&gt;안전하지 않은지&lt;/em&gt; 확인하려면 다음 규칙을 적용합니다 .</target>
        </trans-unit>
        <trans-unit id="8500b954beac6c09bc9a2ffd80eaf5707b319a7f" translate="yes" xml:space="preserve">
          <source>Specifies the path to the package environment file to be used by GHC. Overridden by the &lt;a href=&quot;#ghc-flag--package-env%20%E2%9F%A8file%E2%9F%A9%7C%E2%9F%A8name%E2%9F%A9&quot;&gt;&lt;code&gt;-package-env ⟨file⟩|⟨name⟩&lt;/code&gt;&lt;/a&gt; flag if set.</source>
          <target state="translated">GHC에서 사용할 패키지 환경 파일의 경로를 지정합니다. 설정된 경우 &lt;a href=&quot;#ghc-flag--package-env%20%E2%9F%A8file%E2%9F%A9%7C%E2%9F%A8name%E2%9F%A9&quot;&gt; &lt;code&gt;-package-env ⟨file⟩|⟨name⟩&lt;/code&gt; &lt;/a&gt; 플래그로 재정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="1b4862443cf2a7d1cac51c15b30d894bfc62157c" translate="yes" xml:space="preserve">
          <source>Specifies the translation, if any, of newline characters between internal Strings and the external file or stream. Haskell Strings are assumed to represent newlines with the &lt;code&gt;'\n'&lt;/code&gt; character; the newline mode specifies how to translate &lt;code&gt;'\n'&lt;/code&gt; on output, and what to translate into &lt;code&gt;'\n'&lt;/code&gt; on input.</source>
          <target state="translated">내부 문자열과 외부 파일 또는 스트림 사이의 개행 문자 변환을 지정합니다 (있는 경우). Haskell 문자열은 &lt;code&gt;'\n'&lt;/code&gt; 문자로 줄 바꿈을 나타내는 것으로 가정합니다 . 줄 바꿈 모드 는 출력시 &lt;code&gt;'\n'&lt;/code&gt; 을 번역하는 방법 과 입력시 &lt;code&gt;'\n'&lt;/code&gt; 으로 번역 할 것을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="ebf5b69cd7c66af683c0b7a42a0af08526744a15" translate="yes" xml:space="preserve">
          <source>Specify a directory in which to look for &lt;code&gt;#include&lt;/code&gt; files, in the usual C way.</source>
          <target state="translated">일반적인 C 방식으로 &lt;code&gt;#include&lt;/code&gt; 파일 을 찾을 디렉토리를 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d4c49c89d68c7a927228351dcbcc9ab40cd7d1e" translate="yes" xml:space="preserve">
          <source>Specify the set of constructors or pattern synonyms which constitute a total match.</source>
          <target state="translated">전체 일치를 구성하는 생성자 또는 패턴 동의어 세트를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="00db81cc99d352529fe191ffc9903c20f150f263" translate="yes" xml:space="preserve">
          <source>Specifying 1 generation with &lt;code&gt;+RTS -G1&lt;/code&gt; gives you a simple 2-space collector, as you would expect. In a 2-space collector, the &lt;a href=&quot;#rts-flag--A%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-A
⟨size⟩&lt;/code&gt;&lt;/a&gt; option specifies the &lt;em&gt;minimum&lt;/em&gt; allocation area size, since the allocation area will grow with the amount of live data in the heap. In a multi-generational collector the allocation area is a fixed size (unless you use the &lt;a href=&quot;#rts-flag--H%20%5B%E2%9F%A8size%E2%9F%A9%5D&quot;&gt;&lt;code&gt;-H [⟨size⟩]&lt;/code&gt;&lt;/a&gt; option).</source>
          <target state="translated">&lt;code&gt;+RTS -G1&lt;/code&gt; 을 사용 하여 1 세대를 지정 하면 예상대로 간단한 2 공간 콜렉터가 제공됩니다. 2 공간 콜렉터에서 &lt;a href=&quot;#rts-flag--A%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-A ⟨size⟩&lt;/code&gt; &lt;/a&gt; 옵션은 &lt;em&gt;최소&lt;/em&gt; 할당 영역 크기를 지정합니다 . 할당 영역은 힙의 라이브 데이터 양에 따라 증가하기 때문입니다. 다세대 콜렉터에서 할당 영역은 고정 크기입니다 ( &lt;a href=&quot;#rts-flag--H%20%5B%E2%9F%A8size%E2%9F%A9%5D&quot;&gt; &lt;code&gt;-H [⟨size⟩]&lt;/code&gt; &lt;/a&gt; 옵션 을 사용하지 않는 경우 ).</target>
        </trans-unit>
        <trans-unit id="bf1ac07144caf163566ae2b03385ea555d86cddf" translate="yes" xml:space="preserve">
          <source>Split a filename into directory and file. &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is the inverse. The first component will often end with a trailing slash.</source>
          <target state="translated">파일 이름을 디렉토리와 파일로 분할하십시오. &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; 는 그 반대입니다. 첫 번째 구성 요소는 종종 슬래시로 끝납니다.</target>
        </trans-unit>
        <trans-unit id="d592948a8e0377a4243d7b9fc69951e953dde864" translate="yes" xml:space="preserve">
          <source>Split a filename into directory and file. &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; is the inverse. The first component will often end with a trailing slash.</source>
          <target state="translated">파일 이름을 디렉토리와 파일로 분할하십시오. &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-60--47--62-&quot;&gt;&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/code&gt; 는 그 반대입니다. 첫 번째 구성 요소는 종종 슬래시로 끝납니다.</target>
        </trans-unit>
        <trans-unit id="a2bc85796ff5f7226a895f062a3613441039aeea" translate="yes" xml:space="preserve">
          <source>Split a path by the directory separator.</source>
          <target state="translated">디렉토리 구분 기호로 경로를 분할하십시오.</target>
        </trans-unit>
        <trans-unit id="cebdf092e543b83f3fb3d5aeb6388d38ad7eac5a" translate="yes" xml:space="preserve">
          <source>Split a path into a drive and a path. On Posix, / is a Drive.</source>
          <target state="translated">경로를 드라이브와 경로로 분할하십시오. Posix에서 /는 드라이브입니다.</target>
        </trans-unit>
        <trans-unit id="cb53d1cfdd5b139b7bd5fc1b2a8bd36d0ed492a7" translate="yes" xml:space="preserve">
          <source>Split objects (for libraries)</source>
          <target state="translated">분할 객체 (라이브러리 용)</target>
        </trans-unit>
        <trans-unit id="2a067f724534a9c83887aebcdf2c883c2a8417e6" translate="yes" xml:space="preserve">
          <source>Split on all extensions.</source>
          <target state="translated">모든 확장으로 분할하십시오.</target>
        </trans-unit>
        <trans-unit id="e263c8e234fad76e90972473c790d76df84e5e16" translate="yes" xml:space="preserve">
          <source>Split on the extension. &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; is the inverse.</source>
          <target state="translated">확장에서 분할하십시오. &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; 은 그 반대입니다.</target>
        </trans-unit>
        <trans-unit id="42c55528a61016a85d0981a77f718525c03afd02" translate="yes" xml:space="preserve">
          <source>Split on the extension. &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; is the inverse.</source>
          <target state="translated">확장에서 분할하십시오. &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; 은 그 반대입니다.</target>
        </trans-unit>
        <trans-unit id="90c9f466e36b1d73c1fe86a7707a2200dcd9d2b3" translate="yes" xml:space="preserve">
          <source>Split sections for link-time dead-code stripping</source>
          <target state="translated">링크 타임 데드 코드 스트리핑을위한 분할 섹션</target>
        </trans-unit>
        <trans-unit id="7af7b9d93aa19256eefce38852f4b5d272275331" translate="yes" xml:space="preserve">
          <source>Split the input between the two argument arrows and combine their output. Note that this is in general not a functor.</source>
          <target state="translated">두 개의 인수 화살표 사이에서 입력을 나누고 출력을 결합하십시오. 이것은 일반적으로 functor가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c1f4e0453574829c9c92fa9f38974ac29cedef5e" translate="yes" xml:space="preserve">
          <source>Split the input between the two argument arrows, retagging and merging their outputs. Note that this is in general not a functor.</source>
          <target state="translated">두 개의 인수 화살표 사이에서 입력을 분할하여 출력에 태그를 지정하고 병합합니다. 이것은 일반적으로 functor가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="316d460a7a2507e25510a2601feefd8ca7cc2063" translate="yes" xml:space="preserve">
          <source>Splits a type constructor application. Note that if the type constructor is polymorphic, this will not return the kinds that were used.</source>
          <target state="translated">형식 생성자 응용 프로그램을 분할합니다. 형식 생성자가 다형성 인 경우 사용 된 종류를 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e7cf9a5d6d4c50cdabf326f01166416b681f8a38" translate="yes" xml:space="preserve">
          <source>Splitting functions in this library do not perform character-wise copies to create substrings; they just construct new &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s that are slices of the original.</source>
          <target state="translated">이 라이브러리의 분할 함수는 문자 스트링을 수행하여 하위 문자열을 작성하지 않습니다. 그들은 단지 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 의 조각 인 새로운 Text를 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="ae15788730e0f1320a6a5a039cedc7a46ed9e446" translate="yes" xml:space="preserve">
          <source>Splitting functions in this library do not perform character-wise copies to create substrings; they just construct new &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s that are slices of the original.</source>
          <target state="translated">이 라이브러리의 분할 함수는 문자 스트링을 수행하여 하위 문자열을 작성하지 않습니다. 그들은 단지 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 의 조각 인 새로운 Text를 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="da6ae66c86b9a6e3e1c72f728844ea7edf75d30e" translate="yes" xml:space="preserve">
          <source>Square &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">정사각형 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6779d64ea3734d3b574f9704fc863bcc4d27a144" translate="yes" xml:space="preserve">
          <source>Square &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">제곱 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90d977c737cfe8e295a62ac0d52b9b79cbdebb7f" translate="yes" xml:space="preserve">
          <source>SrcLoc</source>
          <target state="translated">SrcLoc</target>
        </trans-unit>
        <trans-unit id="785ca9526809c90e3417966be7d5844fd2a0c5c8" translate="yes" xml:space="preserve">
          <source>Stability</source>
          <target state="translated">Stability</target>
        </trans-unit>
        <trans-unit id="d96e5b2dd07c1733b2b013bd82922c22baade37d" translate="yes" xml:space="preserve">
          <source>Stable</source>
          <target state="translated">Stable</target>
        </trans-unit>
        <trans-unit id="1b9780093cdfd639e1fc94e37ddfc9e261e9c1dd" translate="yes" xml:space="preserve">
          <source>Stable Names</source>
          <target state="translated">안정적인 이름</target>
        </trans-unit>
        <trans-unit id="b124de185c68f1d92f48239730360ca3c1db0932" translate="yes" xml:space="preserve">
          <source>Stable Names are similar to Stable Pointers (&lt;a href=&quot;foreign-stableptr&quot;&gt;Foreign.StablePtr&lt;/a&gt;), but differ in the following ways:</source>
          <target state="translated">안정 이름은 안정 포인터 ( &lt;a href=&quot;foreign-stableptr&quot;&gt;Foreign.StablePtr&lt;/a&gt; ) 와 유사 하지만 다음과 같은 방식으로 다릅니다.</target>
        </trans-unit>
        <trans-unit id="a01c1d0efe78a3ab9a11dd3d476288433a0081aa" translate="yes" xml:space="preserve">
          <source>Stable branches are numbered &lt;code&gt;x.y&lt;/code&gt;, where ⟨y⟩ is &lt;em&gt;even&lt;/em&gt;. Releases on the stable branch &lt;code&gt;x.y&lt;/code&gt; are numbered &lt;code&gt;x.y.z&lt;/code&gt;, where ⟨z⟩ (&amp;gt;= 1) is the patchlevel number. Patchlevels are bug-fix releases only, and never change the programmer interface to any system-supplied code. However, if you install a new patchlevel over an old one you will need to recompile any code that was compiled against the old libraries.</source>
          <target state="translated">안정적인 브랜치는 &lt;code&gt;x.y&lt;/code&gt; 로 번호가 매겨지며 , 여기서 ⟨y⟩는 &lt;em&gt;짝수&lt;/em&gt; 입니다. 안정 브랜치 &lt;code&gt;x.y&lt;/code&gt; 릴리스 번호는 &lt;code&gt;x.y.z&lt;/code&gt; . 여기서 ⟨z⟩ (&amp;gt; = 1)은 패치 수준 번호입니다. 패치 수준은 버그 수정 릴리스 일 뿐이며 프로그래머 인터페이스를 시스템 제공 코드로 변경하지 마십시오. 그러나 이전 패치 레벨에 새 패치 레벨을 설치하는 경우 이전 라이브러리에 대해 컴파일 된 코드를 다시 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="4cd3f2d0c8741933dae5efc8c6c48a88e995a1c5" translate="yes" xml:space="preserve">
          <source>Stable names are a way of performing fast (O(1)), not-quite-exact comparison between objects.</source>
          <target state="translated">안정적인 이름은 객체 간의 정확한 비교가 아닌 빠른 (O (1)) 수행 방법입니다.</target>
        </trans-unit>
        <trans-unit id="6545f5f403dd45baa6ff4a3ad49d364a7e57e87a" translate="yes" xml:space="preserve">
          <source>Stable names have the following property:</source>
          <target state="translated">안정적인 이름의 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c930dd441ec9a10fa8b41f15b63e01cc4a9157dc" translate="yes" xml:space="preserve">
          <source>Stable names solve the following problem: suppose you want to build a hash table with Haskell objects as keys, but you want to use pointer equality for comparison; maybe because the keys are large and hashing would be slow, or perhaps because the keys are infinite in size. We can't build a hash table using the address of the object as the key, because objects get moved around by the garbage collector, meaning a re-hash would be necessary after every garbage collection.</source>
          <target state="translated">안정적인 이름은 다음과 같은 문제를 해결합니다. Haskell 객체를 키로 해시 테이블을 작성하려고하지만 비교를 위해 포인터 평등을 사용하려고합니다. 키가 크고 해싱이 느리거나 키 크기가 무한하기 때문일 수 있습니다. 객체의 주소를 키로 사용하여 해시 테이블을 만들 수 없습니다. 가비지 수집기에서 객체가 이동하기 때문에 모든 가비지 수집 후에 다시 해시가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="8e44ac7fde1a959e4f87285404024914d18fcbbf" translate="yes" xml:space="preserve">
          <source>Stable pointers.</source>
          <target state="translated">안정적인 포인터.</target>
        </trans-unit>
        <trans-unit id="f96c029d1e410dab21513196d744d01064e5a832" translate="yes" xml:space="preserve">
          <source>Stable references to Haskell values</source>
          <target state="translated">하스켈 값에 대한 안정적인 참조</target>
        </trans-unit>
        <trans-unit id="b7009f4dd94170790b48faf243126af3763a3938" translate="yes" xml:space="preserve">
          <source>Stable snapshot releases are named &lt;code&gt;x.y.z.YYYYMMDD&lt;/code&gt;. where &lt;code&gt;YYYYMMDD&lt;/code&gt; is the date of the sources from which the snapshot was built, and &lt;code&gt;x.y.z+1&lt;/code&gt; is the next release to be made on that branch. For example, &lt;code&gt;6.8.1.20040225&lt;/code&gt; would be a snapshot of the &lt;code&gt;6.8&lt;/code&gt; branch during the development of &lt;code&gt;6.8.2&lt;/code&gt;.</source>
          <target state="translated">안정적인 스냅 샷 릴리스 이름은 &lt;code&gt;x.y.z.YYYYMMDD&lt;/code&gt; 입니다. 여기서 &lt;code&gt;YYYYMMDD&lt;/code&gt; 는 스냅 샷이 &lt;code&gt;x.y.z+1&lt;/code&gt; 소스의 날짜이며 xyz + 1 은 해당 분기에서 다음 릴리스가됩니다. 예를 들어, &lt;code&gt;6.8.1.20040225&lt;/code&gt; 는 &lt;code&gt;6.8.2&lt;/code&gt; 개발 중 &lt;code&gt;6.8&lt;/code&gt; 분기 의 스냅 샷입니다 .</target>
        </trans-unit>
        <trans-unit id="64feb94468e16e2ea70284003a8c4dfee7a2b84e" translate="yes" xml:space="preserve">
          <source>StableName</source>
          <target state="translated">StableName</target>
        </trans-unit>
        <trans-unit id="fbb55afa3444be1926fc9d52446de2670df59e35" translate="yes" xml:space="preserve">
          <source>StableName#</source>
          <target state="translated">StableName#</target>
        </trans-unit>
        <trans-unit id="de96d23d1deefa3ce99fa0a6afe698d4777eea5c" translate="yes" xml:space="preserve">
          <source>StablePtr</source>
          <target state="translated">StablePtr</target>
        </trans-unit>
        <trans-unit id="7e5628607d77a5b61e929e3d235dd3928a074751" translate="yes" xml:space="preserve">
          <source>StablePtr#</source>
          <target state="translated">StablePtr#</target>
        </trans-unit>
        <trans-unit id="f7b98e4b6482e7275550ba1011355872faf5ea2a" translate="yes" xml:space="preserve">
          <source>Stack trace functionality is exposed for use by Haskell programs in the &lt;a href=&quot;../libraries/base-4.13.0.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt; module. See the Haddock documentation in this module for details regarding usage.</source>
          <target state="translated">스택 추적 기능은 &lt;a href=&quot;../libraries/base-4.13.0.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt; 모듈의 Haskell 프로그램에서 사용할 수 있도록 노출되어 있습니다 . 사용법에 대한 자세한 내용은이 모듈의 Haddock 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3714e866dbf3b26bb67f3d0d8dde5ef4dcd4ec16" translate="yes" xml:space="preserve">
          <source>Stack trace functionality is exposed for use by Haskell programs in the &lt;a href=&quot;../libraries/base-4.14.1.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt; module. See the Haddock documentation in this module for details regarding usage.</source>
          <target state="translated">스택 추적 기능은 &lt;a href=&quot;../libraries/base-4.14.1.0/ghc-executionstack&quot;&gt;GHC.ExecutionStack&lt;/a&gt; 모듈의 Haskell 프로그램에서 사용할 수 있도록 노출됩니다 . 사용법에 대한 자세한 내용은이 모듈의 Haddock 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="68c48da7f7123f0ff64967c266833c6e4063f95a" translate="yes" xml:space="preserve">
          <source>Stack two pieces of error message on top of each other.</source>
          <target state="translated">두 개의 오류 메시지를 서로 쌓아 올리십시오.</target>
        </trans-unit>
        <trans-unit id="11982574c05624fd4946dda5298cf9db6c679ef4" translate="yes" xml:space="preserve">
          <source>StackOverflow</source>
          <target state="translated">StackOverflow</target>
        </trans-unit>
        <trans-unit id="c7d890a6474c971c057ab4ea575d83552a62c69b" translate="yes" xml:space="preserve">
          <source>StackTrace</source>
          <target state="translated">StackTrace</target>
        </trans-unit>
        <trans-unit id="0bf83f962ea4728b5cef631d3fafc1a5854fc24f" translate="yes" xml:space="preserve">
          <source>Standalone &lt;code&gt;deriving&lt;/code&gt; declarations permit the use of a single, extra-constraints wildcard, like so:</source>
          <target state="translated">독립형 &lt;code&gt;deriving&lt;/code&gt; 선언을 사용하면 다음과 같이 제약 조건이없는 단일 와일드 카드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebe743ca060fac51902b85da54b6ccd49dd8f45d" translate="yes" xml:space="preserve">
          <source>StandaloneDeriving</source>
          <target state="translated">StandaloneDeriving</target>
        </trans-unit>
        <trans-unit id="cf09d1d65d0c5998001c536d15e70925e670b957" translate="yes" xml:space="preserve">
          <source>Standard C Functions</source>
          <target state="translated">표준 C 함수</target>
        </trans-unit>
        <trans-unit id="dd904943e5d0e0ae554caef1ba1d493b42ea28e6" translate="yes" xml:space="preserve">
          <source>Standard Formatters</source>
          <target state="translated">표준 포맷터</target>
        </trans-unit>
        <trans-unit id="e0571ffbdfbb2ed310c1a468b735edd6e5003c26" translate="yes" xml:space="preserve">
          <source>Standard Haskell has a rich type language. Types classify terms and serve to avoid many common programming mistakes. The kind language, however, is relatively simple, distinguishing only regular types (kind &lt;code&gt;Type&lt;/code&gt;) and type constructors (e.g. kind &lt;code&gt;Type -&amp;gt; Type -&amp;gt; Type&lt;/code&gt;). In particular when using advanced type system features, such as type families (&lt;a href=&quot;#type-families&quot;&gt;Type families&lt;/a&gt;) or GADTs (&lt;a href=&quot;#gadt&quot;&gt;Generalised Algebraic Data Types (GADTs)&lt;/a&gt;), this simple kind system is insufficient, and fails to prevent simple errors. Consider the example of type-level natural numbers, and length-indexed vectors:</source>
          <target state="translated">표준 Haskell에는 다양한 유형의 언어가 있습니다. 유형은 용어를 분류하고 많은 일반적인 프로그래밍 실수를 피하는 역할을합니다. 그러나 종류 언어는 일반 유형 (종류 &lt;code&gt;Type&lt;/code&gt; )과 유형 생성자 (예 : 종류 &lt;code&gt;Type -&amp;gt; Type -&amp;gt; Type&lt;/code&gt; ) 만 구별하여 비교적 단순 합니다. 특히 유형 패밀리 ( &lt;a href=&quot;#type-families&quot;&gt;Type family&lt;/a&gt; ) 또는 GADT (GADT ( &lt;a href=&quot;#gadt&quot;&gt;Generalized Algebraic Data Types)&lt;/a&gt; ) 와 같은 고급 유형 시스템 기능을 사용하는 경우이 간단한 시스템은 불충분하며 간단한 오류를 방지하지 못합니다. 타입 레벨 자연수와 길이 인덱스 벡터의 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="df22790aeb71a9887d25b6dd614d58cf9fb0694a" translate="yes" xml:space="preserve">
          <source>Standard IO Errors.</source>
          <target state="translated">표준 IO 오류.</target>
        </trans-unit>
        <trans-unit id="249edee58712f047430f6cee9d157476dba55fa5" translate="yes" xml:space="preserve">
          <source>Standard decimal notation.</source>
          <target state="translated">표준 십진 표기법.</target>
        </trans-unit>
        <trans-unit id="4a1d4ca499caf2fdda735441459f6399ddcd070d" translate="yes" xml:space="preserve">
          <source>Standard encodings of Haskell values</source>
          <target state="translated">하스켈 값의 표준 인코딩</target>
        </trans-unit>
        <trans-unit id="6641ea0e41b6762a2dc18847e3792238d0d52d15" translate="yes" xml:space="preserve">
          <source>Standard file descriptors</source>
          <target state="translated">표준 파일 기술자</target>
        </trans-unit>
        <trans-unit id="95653fb800f837db1f88a5516a37229f7e9ae2b9" translate="yes" xml:space="preserve">
          <source>Standard functions on rational numbers</source>
          <target state="translated">유리수에 대한 표준 함수</target>
        </trans-unit>
        <trans-unit id="41705579c741338bdfe2f2ddf805a96446f8e522" translate="yes" xml:space="preserve">
          <source>Standard handles</source>
          <target state="translated">표준 핸들</target>
        </trans-unit>
        <trans-unit id="feb489760695bfa9f478fd69772c4e317ba3a9fa" translate="yes" xml:space="preserve">
          <source>Standard input and output</source>
          <target state="translated">표준 입력 및 출력</target>
        </trans-unit>
        <trans-unit id="8a130b0aafbe13ee540535ba34a95f4a2bd1d78e" translate="yes" xml:space="preserve">
          <source>Standard types, classes and related functions</source>
          <target state="translated">표준 유형, 클래스 및 관련 함수</target>
        </trans-unit>
        <trans-unit id="05565eead6cfb1432b88147e2b7df47f443c8aa8" translate="yes" xml:space="preserve">
          <source>StarIsType</source>
          <target state="translated">StarIsType</target>
        </trans-unit>
        <trans-unit id="b71fa15cc8a020abade88d38b208048c963ab2a9" translate="yes" xml:space="preserve">
          <source>StarT</source>
          <target state="translated">StarT</target>
        </trans-unit>
        <trans-unit id="952f375412e89ff213a8aca383d18e5691354347" translate="yes" xml:space="preserve">
          <source>Start</source>
          <target state="translated">Start</target>
        </trans-unit>
        <trans-unit id="164f116940c507103d0f7330fae894367bd8f944" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;UniqSupply&lt;/code&gt; allocation from ⟨s⟩.</source>
          <target state="translated">&lt;code&gt;UniqSupply&lt;/code&gt; 에서 UniqSupply 할당을 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="87cd67587e7700e90403704138073c86ff153532" translate="yes" xml:space="preserve">
          <source>Start a new TH module, return a state token that should be</source>
          <target state="translated">새로운 TH 모듈을 시작하고 상태 토큰을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="05924043e5e4e1f8094f7c0ced251fc393740a73" translate="yes" xml:space="preserve">
          <source>Start attributing ticks to cost centres. This is called by the RTS on startup.</source>
          <target state="translated">코스트 센터에 진드기를 부여하십시오. 시작시 RTS에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e956beda0bcd377f3930544bb800c5b08449c53e" translate="yes" xml:space="preserve">
          <source>Start logging events to the given &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt;. Returns true on success or false is another writer has already been configured.</source>
          <target state="translated">지정된 &lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; 에&lt;/a&gt; 이벤트 로깅을 시작합니다 . 성공하면 true를 반환하고 다른 작성기가 이미 구성되어 있으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6ce1d9a5005d443d987ee67873bd91b0a6d5100e" translate="yes" xml:space="preserve">
          <source>StartStopInput</source>
          <target state="translated">StartStopInput</target>
        </trans-unit>
        <trans-unit id="c52f329a2ad4e9037d6af00f2143b3e11f38996b" translate="yes" xml:space="preserve">
          <source>StartStopOutput</source>
          <target state="translated">StartStopOutput</target>
        </trans-unit>
        <trans-unit id="9760639dd8bd243ed8a34ff7a71ee1c87cbfc596" translate="yes" xml:space="preserve">
          <source>Starting an annotation.</source>
          <target state="translated">주석을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="a2bbf1741439888f11bdd7d78ae7a3c39a61635c" translate="yes" xml:space="preserve">
          <source>Starting with GHC 7.10, the example above can be written more concisely by enabling the new &lt;code&gt;DeriveAnyClass&lt;/code&gt; extension:</source>
          <target state="translated">GHC 7.10부터 새로운 &lt;code&gt;DeriveAnyClass&lt;/code&gt; 확장 을 활성화하여 위 예제를보다 간결하게 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="443aedd3cb6408bc6151745f0efb5bde637384f3" translate="yes" xml:space="preserve">
          <source>Starting with GHC 7.2, you can automatically derive instances for types possessing a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">GHC 7.2부터 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; 인스턴스를 소유 한 유형의 인스턴스를 자동으로 파생시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="083897f53ad9288353b0b64c6973be990cb1d2df" translate="yes" xml:space="preserve">
          <source>Starting with GHC 7.2, you can automatically derive instances for types possessing a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">GHC 7.2부터는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; 인스턴스를 소유 한 유형에 대한 인스턴스를 자동으로 파생 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0717d7a07a44a226da10392758555b92d5c36a4e" translate="yes" xml:space="preserve">
          <source>Starting with GHC 8.0 type families can be annotated with injectivity information. This information is then used by GHC during type checking to resolve type ambiguities in situations where a type variable appears only under type family applications. Consider this contrived example:</source>
          <target state="translated">GHC 8.0 유형 제품군부터는 주입 정보에 주석을 달 수 있습니다. 그런 다음이 정보는 GHC에서 유형 검사 중에 유형 변수가 유형 계열 응용 프로그램에서만 나타나는 상황에서 유형 모호성을 해결하기 위해 사용됩니다. 이 고안된 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="fa3a5bbcd112252696951a4fcf34da3cfa7847b0" translate="yes" xml:space="preserve">
          <source>Starting with minimal verbosity (&lt;code&gt;-v1&lt;/code&gt;, see &lt;a href=&quot;#ghc-flag--v&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt;), GHC displays the name, the source path and the target path of each compiled module. This flag can be used to reduce GHC&amp;rsquo;s output by hiding source paths and target paths.</source>
          <target state="translated">최소 상세 정보 ( &lt;code&gt;-v1&lt;/code&gt; , &lt;a href=&quot;#ghc-flag--v&quot;&gt; &lt;code&gt;-v&lt;/code&gt; &lt;/a&gt; 참조 )로 시작하여 GHC는 컴파일 된 각 모듈의 이름, 소스 경로 및 대상 경로를 표시합니다. 이 플래그는 소스 경로와 대상 경로를 숨겨 GHC의 출력을 줄이는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="66da945894f82db14a77a8be2c6323321041bb1c" translate="yes" xml:space="preserve">
          <source>State monads</source>
          <target state="translated">스테이트 모나드</target>
        </trans-unit>
        <trans-unit id="158b4d2c36c72da53e5e963fedebe7ce62a55af8" translate="yes" xml:space="preserve">
          <source>State operations</source>
          <target state="translated">국가 운영</target>
        </trans-unit>
        <trans-unit id="536a546647686d5dbe50b90d5b04f3d2452d84ce" translate="yes" xml:space="preserve">
          <source>State#</source>
          <target state="translated">State#</target>
        </trans-unit>
        <trans-unit id="79532d5103d1a13b6e1c0c339a9743192eeb51c6" translate="yes" xml:space="preserve">
          <source>StateT</source>
          <target state="translated">StateT</target>
        </trans-unit>
        <trans-unit id="e5f4ecfe4af1087571afda2ddc97808c6498333b" translate="yes" xml:space="preserve">
          <source>Static pointers were first proposed in the paper &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf&quot;&gt;Towards Haskell in the cloud&lt;/a&gt;, Jeff Epstein, Andrew P. Black and Simon Peyton-Jones, Proceedings of the 4th ACM Symposium on Haskell, pp. 118-129, ACM, 2011.</source>
          <target state="translated">정적 포인터는 &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf&quot;&gt;Haskell의 Towards Haskell&lt;/a&gt; 논문 , Jeff Epstein, Andrew P. Black 및 Simon Peyton-Jones, Haskell의 제 4 회 ACM 심포지엄, pp. 118-129, ACM, 2011 년에 처음 제안되었습니다.</target>
        </trans-unit>
        <trans-unit id="74315e17a1a8b045102ac7e9df4355c190ad7a64" translate="yes" xml:space="preserve">
          <source>StaticKey</source>
          <target state="translated">StaticKey</target>
        </trans-unit>
        <trans-unit id="c4cf883c115ad4a37a0d8ea79661e165e8cf7edf" translate="yes" xml:space="preserve">
          <source>StaticPointers</source>
          <target state="translated">StaticPointers</target>
        </trans-unit>
        <trans-unit id="04c2c864bcbffe68997c27cc94d1413712fc6055" translate="yes" xml:space="preserve">
          <source>StaticPtr</source>
          <target state="translated">StaticPtr</target>
        </trans-unit>
        <trans-unit id="1985d9c485de177986ea553f7aa1b1ec15724799" translate="yes" xml:space="preserve">
          <source>StaticPtrInfo</source>
          <target state="translated">StaticPtrInfo</target>
        </trans-unit>
        <trans-unit id="b6ed444cfd31a4303c65cc81df375b9c2410e95d" translate="yes" xml:space="preserve">
          <source>Statistics about a single GC. This is a mirror of the C &lt;code&gt;struct
   GCDetails&lt;/code&gt; in &lt;code&gt;RtsAPI.h&lt;/code&gt;, with the field prefixed with &lt;code&gt;gc_&lt;/code&gt; to avoid collisions with &lt;code&gt;&lt;a href=&quot;ghc-stats#t:RTSStats&quot;&gt;RTSStats&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">단일 GC에 대한 통계. 이것은 C에서의 거울이다 &lt;code&gt;struct GCDetails&lt;/code&gt; 에 &lt;code&gt;RtsAPI.h&lt;/code&gt; 접두사 필드와 &lt;code&gt;gc_&lt;/code&gt; 과의 충돌 방지 할 &lt;code&gt;&lt;a href=&quot;ghc-stats#t:RTSStats&quot;&gt;RTSStats&lt;/a&gt;&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="cfe3c1150c6acf9c8d532af7cedc95d73c3a8d58" translate="yes" xml:space="preserve">
          <source>Statistics about runtime activity since the start of the program. This is a mirror of the C &lt;code&gt;struct RTSStats&lt;/code&gt; in &lt;code&gt;RtsAPI.h&lt;/code&gt;</source>
          <target state="translated">프로그램 시작 이후 런타임 활동에 대한 통계. 이것은 C에서의 거울이다 &lt;code&gt;struct RTSStats&lt;/code&gt; 에 &lt;code&gt;RtsAPI.h&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e42b22b2b6b3e7f57c4367d72673984413ed8319" translate="yes" xml:space="preserve">
          <source>StdCall</source>
          <target state="translated">StdCall</target>
        </trans-unit>
        <trans-unit id="f187fc429f4baaf1f243e44e3303328c03854a81" translate="yes" xml:space="preserve">
          <source>StdStream</source>
          <target state="translated">StdStream</target>
        </trans-unit>
        <trans-unit id="dc416e1088e4bf094dfc9abe0210e0288f5a169e" translate="yes" xml:space="preserve">
          <source>Step</source>
          <target state="translated">Step</target>
        </trans-unit>
        <trans-unit id="db05c9beb5e691dc03390a6a1b7db16a6ffddc7d" translate="yes" xml:space="preserve">
          <source>Stephen Adams, &quot;&lt;em&gt;Efficient sets: a balancing act&lt;/em&gt;&quot;, Journal of Functional Programming 3(4):553-562, October 1993, &lt;a href=&quot;http://www.swiss.ai.mit.edu/~adams/BB/&quot;&gt;http://www.swiss.ai.mit.edu/~adams/BB/&lt;/a&gt;.</source>
          <target state="translated">Stephen Adams, &quot; &lt;em&gt;효율적인 세트 : 밸런싱 행위&lt;/em&gt; &quot;, 1993 년 10 월, Journal of Functional Programming 3 (4) : 553-562, &lt;a href=&quot;http://www.swiss.ai.mit.edu/~adams/BB/&quot;&gt;http://www.swiss.ai.mit.edu/~adams/BB/&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="35cb1f2f3090469fddd290f48f6f6f66f6cfbf71" translate="yes" xml:space="preserve">
          <source>Stmt</source>
          <target state="translated">Stmt</target>
        </trans-unit>
        <trans-unit id="31572ff73d7bde41a9d74f83a2ddad260f7a6baa" translate="yes" xml:space="preserve">
          <source>StmtQ</source>
          <target state="translated">StmtQ</target>
        </trans-unit>
        <trans-unit id="de21a77acb31d0982c49a80ac234a3a75eaede79" translate="yes" xml:space="preserve">
          <source>Stock type classes, i.e. those specified in the report and those enabled by &lt;a href=&quot;#deriving-extra&quot;&gt;language extensions&lt;/a&gt;, are derived using the &lt;code&gt;stock&lt;/code&gt; strategy, with the following exception:</source>
          <target state="translated">재고 유형 클래스 (예 : 보고서에 지정된 클래스 및 &lt;a href=&quot;#deriving-extra&quot;&gt;언어 확장에&lt;/a&gt; 의해 활성화 된 클래스) 는 다음을 제외 하고 &lt;code&gt;stock&lt;/code&gt; 전략을 사용하여 파생됩니다 .</target>
        </trans-unit>
        <trans-unit id="204cbd05b28e23bed603f5dd8080b3836a48b443" translate="yes" xml:space="preserve">
          <source>StockStrategy</source>
          <target state="translated">StockStrategy</target>
        </trans-unit>
        <trans-unit id="2384b537a83bb6a33e1d390c0c67ee850919b47c" translate="yes" xml:space="preserve">
          <source>Stolen (in types) by default (see &lt;a href=&quot;bugs#infelicities-lexical&quot;&gt;Lexical syntax&lt;/a&gt;). &lt;code&gt;forall&lt;/code&gt; is a reserved keyword and never a type variable, in accordance with &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0043-forall-keyword.rst&quot;&gt;GHC Proposal #43&lt;/a&gt;.</source>
          <target state="translated">기본적으로 도난 (유형) ( &lt;a href=&quot;bugs#infelicities-lexical&quot;&gt;어휘 구문&lt;/a&gt; 참조 ). &lt;code&gt;forall&lt;/code&gt; 은 &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0043-forall-keyword.rst&quot;&gt;GHC Proposal # 43&lt;/a&gt; 에 따라 예약 키워드이며 유형 변수가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="0109369d2950503b351e2a645b66ee0cdfb0870d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-Arrows&quot;&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난 당 : &lt;a href=&quot;#extension-Arrows&quot;&gt; &lt;code&gt;Arrows&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5fc6096bd7063eafd5e2d7f8790bd891b7444589" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-BangPatterns&quot;&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난 당 : &lt;a href=&quot;#extension-BangPatterns&quot;&gt; &lt;code&gt;BangPatterns&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="694982805bbb9dcc8a752cd200a66c9de952c939" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-ImplicitParams&quot;&gt;&lt;code&gt;ImplicitParams&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난당한 사람 : &lt;a href=&quot;#extension-ImplicitParams&quot;&gt; &lt;code&gt;ImplicitParams&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9dd99f3a29bdf521b42a19c25458329948cfb7d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-MagicHash&quot;&gt;&lt;code&gt;MagicHash&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난 당 : &lt;a href=&quot;#extension-MagicHash&quot;&gt; &lt;code&gt;MagicHash&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="653e10151f5343c05b8d78af3a7faf47567411a0" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-PatternSynonyms&quot;&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난 당 : &lt;a href=&quot;#extension-PatternSynonyms&quot;&gt; &lt;code&gt;PatternSynonyms&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3efe252a38c04276c73af597275737fcd9cfdad6" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난당한 사람 : &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77ef467f6713170bca1aee5678526a7c56d8ba32" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt;. Moreover, this introduces an ambiguity with list comprehension syntax. See the &lt;a href=&quot;#quasi-quotes-list-comprehension-ambiguity&quot;&gt;discussion on quasi-quoting&lt;/a&gt; for details.</source>
          <target state="translated">도난당한 사람 : &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt; . 또한, 이것은리스트 이해 구문에 대한 모호성을 소개합니다. 자세한 내용은 &lt;a href=&quot;#quasi-quotes-list-comprehension-ambiguity&quot;&gt;준 인용에&lt;/a&gt; 대한 토론을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="1c972925d5d27b40147d40d5e67b8fcfe3d1b5c4" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-RecursiveDo&quot;&gt;&lt;code&gt;RecursiveDo&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난당한 사람 : &lt;a href=&quot;#extension-RecursiveDo&quot;&gt; &lt;code&gt;RecursiveDo&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b7f9280e17d67586f2b5b75560c5c0e17b233c4d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-StaticPointers&quot;&gt;&lt;code&gt;StaticPointers&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난당한 사람 : &lt;a href=&quot;#extension-StaticPointers&quot;&gt; &lt;code&gt;StaticPointers&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7856923f2170cc077edb89e9a27de0c565b9f3d5" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난 당 : &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef9015f89e07e2c82a32bc002e98ffaf87a6d39d" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;#extension-UnboxedTuples&quot;&gt;&lt;code&gt;UnboxedTuples&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난 당 : &lt;a href=&quot;#extension-UnboxedTuples&quot;&gt; &lt;code&gt;UnboxedTuples&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fed63a5d990e7192e1cdc7d3914885acbeebf644" translate="yes" xml:space="preserve">
          <source>Stolen by: &lt;a href=&quot;ffi-chap#extension-ForeignFunctionInterface&quot;&gt;&lt;code&gt;ForeignFunctionInterface&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">도난 : &lt;a href=&quot;ffi-chap#extension-ForeignFunctionInterface&quot;&gt; &lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e253470c876ee6d5c720eb777aeb82d4c26e28f" translate="yes" xml:space="preserve">
          <source>Stop</source>
          <target state="translated">Stop</target>
        </trans-unit>
        <trans-unit id="b413b82268045c1e7ece0c70b4a9a04ae7c50bcc" translate="yes" xml:space="preserve">
          <source>Stop after generating C (&lt;code&gt;.hc&lt;/code&gt; file)</source>
          <target state="translated">C ( &lt;code&gt;.hc&lt;/code&gt; 파일) 생성 후 중지</target>
        </trans-unit>
        <trans-unit id="77bce4d6858afe8047dad68e79b4b967e9dbc28a" translate="yes" xml:space="preserve">
          <source>Stop after generating assembly (&lt;code&gt;.s&lt;/code&gt; file)</source>
          <target state="translated">어셈블리 생성 후 정지 ( &lt;code&gt;.s&lt;/code&gt; 파일)</target>
        </trans-unit>
        <trans-unit id="72f8e464de0b7ece18b856f82c9428b57e04e974" translate="yes" xml:space="preserve">
          <source>Stop after generating object (&lt;code&gt;.o&lt;/code&gt;) file</source>
          <target state="translated">객체 ( &lt;code&gt;.o&lt;/code&gt; ) 파일 생성 후 중지</target>
        </trans-unit>
        <trans-unit id="ccf7f91d046e26549f0e33e6e9690b34f2c10594" translate="yes" xml:space="preserve">
          <source>Stop after preprocessing (&lt;code&gt;.hspp&lt;/code&gt; file)</source>
          <target state="translated">전처리 후 중지 ( &lt;code&gt;.hspp&lt;/code&gt; 파일)</target>
        </trans-unit>
        <trans-unit id="04cf767bea5cd66e2d50d24b00a36eb3c8c924af" translate="yes" xml:space="preserve">
          <source>Stop after writing out the intermediate C program to disk. The file name for the intermediate C program is the input file name with &lt;code&gt;.hsc&lt;/code&gt; replaced with &lt;code&gt;_hsc_make.c&lt;/code&gt;.</source>
          <target state="translated">중간 C 프로그램을 디스크에 쓴 후 중지하십시오. 중간체 C 프로그램의 파일명은 입력 파일 이름 &lt;code&gt;.hsc&lt;/code&gt; 대체 &lt;code&gt;_hsc_make.c&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="023c4f92246f4178341e6f0a01ceb000f420e539" translate="yes" xml:space="preserve">
          <source>Stop attributing ticks to cost centres. Allocations will still be attributed.</source>
          <target state="translated">코스트 센터에 진드기를 제공하지 마십시오. 할당은 여전히 ​​유효합니다.</target>
        </trans-unit>
        <trans-unit id="988ad614c0272f1d7935dae544cb67bc6c2c9fa0" translate="yes" xml:space="preserve">
          <source>Stopped because the input contains insufficient available elements, or all of the input sequence has been successfully translated.</source>
          <target state="translated">입력에 사용 가능한 요소가 충분하지 않거나 모든 입력 시퀀스가 ​​성공적으로 변환되어 중지되었습니다.</target>
        </trans-unit>
        <trans-unit id="a8ba068bf5a51f6b6475c3d5a9cb52f8a6f89148" translate="yes" xml:space="preserve">
          <source>Stopped because the output contains insufficient free elements</source>
          <target state="translated">출력에 여유 요소가 충분하지 않아 중지되었습니다.</target>
        </trans-unit>
        <trans-unit id="5af0db05a6b8a98c75558631d0f653da1ee69ba7" translate="yes" xml:space="preserve">
          <source>Stopped because there are sufficient free elements in the output to output at least one encoded ASCII character, but the input contains an invalid or unrepresentable sequence</source>
          <target state="translated">출력에 최소한 하나의 인코딩 된 ASCII 문자를 출력 할 수있는 충분한 여유 요소가 있지만 입력에 유효하지 않거나 표현할 수없는 시퀀스가 ​​포함되어 중지되었습니다</target>
        </trans-unit>
        <trans-unit id="45b0f8b6273dfd6e7997a4038c99b48d40e17dae" translate="yes" xml:space="preserve">
          <source>Storable</source>
          <target state="translated">Storable</target>
        </trans-unit>
        <trans-unit id="3b41fc4e981bcddf2ba33abc4e193e3e4d082300" translate="yes" xml:space="preserve">
          <source>StorableArray</source>
          <target state="translated">StorableArray</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="3be78028889b120996da7446ec1e97f062f6f5e6" translate="yes" xml:space="preserve">
          <source>Stream interface</source>
          <target state="translated">스트림 인터페이스</target>
        </trans-unit>
        <trans-unit id="a48481a1738943e8ff33ac4241138fa17939a34e" translate="yes" xml:space="preserve">
          <source>Stream oriented decoding</source>
          <target state="translated">스트림 지향 디코딩</target>
        </trans-unit>
        <trans-unit id="1b965be2081b010a98a8633b41b3ef04aba79c9a" translate="yes" xml:space="preserve">
          <source>Stream the UTF-8-like packed encoding used by GHC to represent constant strings in generated code.</source>
          <target state="translated">생성 된 코드에서 상수 문자열을 나타 내기 위해 GHC에서 사용하는 UTF-8과 같은 압축 인코딩을 스트리밍하십시오.</target>
        </trans-unit>
        <trans-unit id="e39823f5d6394e4bb2bfdaafc16bb62eb67d74f1" translate="yes" xml:space="preserve">
          <source>StreamPermParser</source>
          <target state="translated">StreamPermParser</target>
        </trans-unit>
        <trans-unit id="1e8325521df6e6903ede77955f9bf1a333363aed" translate="yes" xml:space="preserve">
          <source>Streaming</source>
          <target state="translated">Streaming</target>
        </trans-unit>
        <trans-unit id="47ed8fde8f8f26c0b70f354149f72da58928a969" translate="yes" xml:space="preserve">
          <source>Strict</source>
          <target state="translated">Strict</target>
        </trans-unit>
        <trans-unit id="b055906719fced632d6400efb20c56d4258a207b" translate="yes" xml:space="preserve">
          <source>Strict (call-by-value) application operator. It takes a function and an argument, evaluates the argument to weak head normal form (WHNF), then calls the function with that value.</source>
          <target state="translated">엄격한 (값별 호출) 응용 프로그램 연산자 함수와 인수를 사용하여 약한 헤드 노멀 형식 (WHNF)으로 인수를 평가 한 다음 해당 값으로 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="2363e1b8ae1b0a70a1ec6e14abb0c9296f7b59e1" translate="yes" xml:space="preserve">
          <source>Strict RWS monad.</source>
          <target state="translated">엄격한 RWS 모나드.</target>
        </trans-unit>
        <trans-unit id="76c36336f1c9bfc6331550790fe3c915ad08f140" translate="yes" xml:space="preserve">
          <source>Strict Reader-writer-state monads</source>
          <target state="translated">엄격한 리더-라이터 상태 모나드</target>
        </trans-unit>
        <trans-unit id="24fea344d26bff4ae8bc8eed70c80a6cb9aa0f42" translate="yes" xml:space="preserve">
          <source>Strict data types (&lt;a href=&quot;#extension-StrictData&quot;&gt;&lt;code&gt;StrictData&lt;/code&gt;&lt;/a&gt;) makes constructor fields strict by default, on a per-module basis.</source>
          <target state="translated">엄격한 데이터 형식 ( &lt;a href=&quot;#extension-StrictData&quot;&gt; &lt;code&gt;StrictData&lt;/code&gt; &lt;/a&gt; )은 기본적으로 생성자 필드를 모듈별로 엄격하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="783404847dd6d8a5d62d9c622cb41988c5035941" translate="yes" xml:space="preserve">
          <source>Strict folds</source>
          <target state="translated">엄격한 주름</target>
        </trans-unit>
        <trans-unit id="d3d907b1eb1f2241730e00b68e6ba576432e2b4d" translate="yes" xml:space="preserve">
          <source>Strict functions are good for space usage, as they are for time, as discussed in the previous section. Strict functions get right down to business, rather than filling up the heap with closures (the system&amp;rsquo;s notes to itself about how to evaluate something, should it eventually be required).</source>
          <target state="translated">엄격한 기능은 이전 섹션에서 설명한대로 시간이 지남에 따라 공간 사용에 좋습니다. 엄격한 기능은 힙을 클로저로 채우지 않고 비즈니스에 바로 적용됩니다 (결국 필요한 경우 평가 방법에 대한 시스템 노트 자체).</target>
        </trans-unit>
        <trans-unit id="8c4eb494994ad32b8dbb336545842b450c139303" translate="yes" xml:space="preserve">
          <source>Strict functions are your dear friends:</source>
          <target state="translated">엄격한 기능은 친애하는 친구입니다.</target>
        </trans-unit>
        <trans-unit id="a914659b0f38edc507ba27a21a6bdfb6fb5c1655" translate="yes" xml:space="preserve">
          <source>Strict monadic functions</source>
          <target state="translated">엄격한 수도원 기능</target>
        </trans-unit>
        <trans-unit id="9ca63820e49dcf2df96864861f0eefabb957830d" translate="yes" xml:space="preserve">
          <source>Strict monads</source>
          <target state="translated">엄격한 모나드</target>
        </trans-unit>
        <trans-unit id="4c509cf9b703d49cd6bbacf171b7c6babe197659" translate="yes" xml:space="preserve">
          <source>Strict pair.</source>
          <target state="translated">엄격한 쌍.</target>
        </trans-unit>
        <trans-unit id="35d0eb483830c5ebf332d2a08d7d715707ad4d98" translate="yes" xml:space="preserve">
          <source>Strict pattern (&lt;a href=&quot;#extension-Strict&quot;&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;/a&gt;) makes all patterns and let bindings strict by default, on a per-module basis.</source>
          <target state="translated">엄격한 패턴 ( &lt;a href=&quot;#extension-Strict&quot;&gt; &lt;code&gt;Strict&lt;/code&gt; &lt;/a&gt; )은 모든 패턴을 만들고 기본적으로 모듈별로 바인딩을 엄격하게합니다.</target>
        </trans-unit>
        <trans-unit id="397ea718e8a9c7d01c35b292cb86a750beb71caa" translate="yes" xml:space="preserve">
          <source>Strict state monads, passing an updatable state through a computation. See below for examples.</source>
          <target state="translated">엄격한 상태 모나드, 업데이트 가능한 상태를 계산을 통해 전달합니다. 예는 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8e2a656a92ddc304255d0a52d40959ab09737cb2" translate="yes" xml:space="preserve">
          <source>Strict state monads.</source>
          <target state="translated">엄격한 주 모나드.</target>
        </trans-unit>
        <trans-unit id="c23a76f4f4cbe7a8a5ea9caabae32c329023144a" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar&quot;&gt;modifyTVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:modifyTVar&quot;&gt;modifyTVar&lt;/a&gt;&lt;/code&gt; 의 엄격한 버전 .</target>
        </trans-unit>
        <trans-unit id="a9f6e9fe1cf7ec312e545a2b19d927d754a6713f" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt; 의 엄격한 버전 .</target>
        </trans-unit>
        <trans-unit id="b5b1f7c9a0fe31f46ed198e1435d2adf277aa5a7" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt;. This forces both the value stored in the &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; and the value returned. The new value is installed in the &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; before the returned value is forced. So</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; 의 엄격한 버전 . 이는 &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; 에 저장된 값과 반환 된 값을 모두 강제합니다 . 반환 된 값이 &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; 되기 전에 새 값이 IORef에 설치됩니다 . 그래서</target>
        </trans-unit>
        <trans-unit id="42d8bc23e3f7197b0d30446e7060aeae40e600db" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt;. This forces both the value stored in the &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; and the value returned. The new value is installed in the &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; before the returned value is forced. So</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; 의 엄격한 버전 . 이는 &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; 에 저장된 값과 반환 된 값을 모두 강제합니다 . 반환 된 값이 &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; 되기 전에 새 값이 IORef에 설치됩니다 . 그래서</target>
        </trans-unit>
        <trans-unit id="c77f471f01bedb20ebf62401466c912c23fb1b2b" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-ioref#v:modifyIORef&quot;&gt;modifyIORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ioref#v:modifyIORef&quot;&gt;modifyIORef&lt;/a&gt;&lt;/code&gt; 의 엄격한 버전</target>
        </trans-unit>
        <trans-unit id="b7514ea4bb82dd2520d82e380ee5aa69bd87d59b" translate="yes" xml:space="preserve">
          <source>Strict version of &lt;code&gt;&lt;a href=&quot;data-stref#v:modifySTRef&quot;&gt;modifySTRef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-stref#v:modifySTRef&quot;&gt;modifySTRef&lt;/a&gt;&lt;/code&gt; 의 엄격한 버전</target>
        </trans-unit>
        <trans-unit id="8ca33b0d79de13dece7742f5c06160e31b2fa41c" translate="yes" xml:space="preserve">
          <source>Strict vs lazy types</source>
          <target state="translated">엄격한 대 게으른 유형</target>
        </trans-unit>
        <trans-unit id="074e69dbc31a99f40b705371021696d29cc33268" translate="yes" xml:space="preserve">
          <source>Strict writer monads.</source>
          <target state="translated">엄격한 작가 모나드.</target>
        </trans-unit>
        <trans-unit id="7adb8ee02eaf5cab8e6bbff5ce1f99a1ae0004b9" translate="yes" xml:space="preserve">
          <source>StrictData</source>
          <target state="translated">StrictData</target>
        </trans-unit>
        <trans-unit id="99c80ad9bf7b25224884bf0b85507c17346ab8e3" translate="yes" xml:space="preserve">
          <source>StrictPair</source>
          <target state="translated">StrictPair</target>
        </trans-unit>
        <trans-unit id="03053dcabec6cb004527a0b6b191c9f8ef2e0a88" translate="yes" xml:space="preserve">
          <source>StrictType</source>
          <target state="translated">StrictType</target>
        </trans-unit>
        <trans-unit id="ab1c44ad2859867b138996798bcf74fea8aec139" translate="yes" xml:space="preserve">
          <source>StrictTypeQ</source>
          <target state="translated">StrictTypeQ</target>
        </trans-unit>
        <trans-unit id="42f1bfdab9b4c0657e9556a7fee5234617960acf" translate="yes" xml:space="preserve">
          <source>Strictly speaking it is better to use &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;, because the number of capabilities might vary at runtime.</source>
          <target state="translated">엄밀히 말하면 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 를 사용하는 것이 좋습니다 . 기능의 수는 런타임에 따라 다를 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e7c5a762202275568d2d039c3d14f4827f67e0c5" translate="yes" xml:space="preserve">
          <source>Strictly speaking it is better to use &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;, because the number of capabilities might vary at runtime.</source>
          <target state="translated">엄밀히 말하면 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 를 사용하는 것이 좋습니다 . 기능의 수는 런타임에 따라 다를 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="4e4b8136d197b8377982f8eec167ef1e32bcd988" translate="yes" xml:space="preserve">
          <source>Strictly speaking, &lt;code&gt;-main-is&lt;/code&gt; is not a link-phase flag at all; it has no effect on the link step. The flag must be specified when compiling the module containing the specified main function (e.g. module &lt;code&gt;A&lt;/code&gt; in the latter two items above). It has no effect for other modules, and hence can safely be given to &lt;code&gt;ghc --make&lt;/code&gt;. However, if all the modules are otherwise up to date, you may need to force recompilation both of the module where the new &amp;ldquo;main&amp;rdquo; is, and of the module where the &amp;ldquo;main&amp;rdquo; function used to be; &lt;code&gt;ghc&lt;/code&gt; is not clever enough to figure out that they both need recompiling. You can force recompilation by removing the object file, or by using the &lt;a href=&quot;separate_compilation#ghc-flag--fforce-recomp&quot;&gt;&lt;code&gt;-fforce-recomp&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">엄밀히 말해, &lt;code&gt;-main-is&lt;/code&gt; 는 링크 단계 플래그가 아닙니다. 링크 단계에는 영향을 미치지 않습니다. 지정된 주요 기능을 포함하는 모듈을 컴파일 할 때 플래그를 지정해야합니다 (예 : 위의 두 항목에서 모듈 &lt;code&gt;A&lt;/code&gt; ). 다른 모듈에는 영향을 미치지 않으므로 &lt;code&gt;ghc --make&lt;/code&gt; 에 안전하게 제공 할 수 있습니다 . 그러나 모든 모듈이 최신 상태 인 경우 새 &quot;메인&quot;이있는 모듈과 &quot;메인&quot;기능이 사용 된 모듈 모두를 강제로 다시 컴파일해야 할 수도 있습니다. &lt;code&gt;ghc&lt;/code&gt; 는 재 컴파일이 필요하다는 것을 알기에 충분히 영리하지 않습니다. 오브젝트 파일을 제거하거나 &lt;a href=&quot;separate_compilation#ghc-flag--fforce-recomp&quot;&gt; &lt;code&gt;-fforce-recomp&lt;/code&gt; &lt;/a&gt; 플래그를 사용하여 강제로 재 컴파일 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea178a9a9bd02024d63a2e33e3d1c06a8b763aa9" translate="yes" xml:space="preserve">
          <source>Strictness</source>
          <target state="translated">Strictness</target>
        </trans-unit>
        <trans-unit id="ae70c5e0aadd2a887566abe055fa2287e396a0cb" translate="yes" xml:space="preserve">
          <source>Strictness properties</source>
          <target state="translated">엄격 성</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="df69c43ff78249932546b7a676fcb79fae83ee1b" translate="yes" xml:space="preserve">
          <source>String I/O functions</source>
          <target state="translated">문자열 I / O 함수</target>
        </trans-unit>
        <trans-unit id="8bafd8dde0ea5116b7c687fc066421bac5b8e127" translate="yes" xml:space="preserve">
          <source>String concatenation is another example of a &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="translated">문자열 연결은 &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 인스턴스 의 또 다른 예입니다 .</target>
        </trans-unit>
        <trans-unit id="93a6aed0e197696ef30cd67ec01d419a5ab47362" translate="yes" xml:space="preserve">
          <source>String literal, with escapes interpreted</source>
          <target state="translated">이스케이프가 해석 된 문자열 리터럴</target>
        </trans-unit>
        <trans-unit id="fead3f626ab1bc4364788f5110ede5fbbe578349" translate="yes" xml:space="preserve">
          <source>String literals are also handled the same way, except that the translation is &lt;code&gt;fromString (&quot;368&quot;::String)&lt;/code&gt;.</source>
          <target state="translated">번역이 &lt;code&gt;fromString (&quot;368&quot;::String)&lt;/code&gt; 인 것을 제외하고 문자열 리터럴도 같은 방식으로 처리 됩니다.</target>
        </trans-unit>
        <trans-unit id="322526bf32416e96b1ec87cec2493bb7d90ce000" translate="yes" xml:space="preserve">
          <source>String representations</source>
          <target state="translated">문자열 표현</target>
        </trans-unit>
        <trans-unit id="82ff0b28eaf4650bf30ef651a57f09d0653293aa" translate="yes" xml:space="preserve">
          <source>String to seach in.</source>
          <target state="translated">들어가는 끈.</target>
        </trans-unit>
        <trans-unit id="4eb2a869e70cfb05bab0937ce14f9bffba3de724" translate="yes" xml:space="preserve">
          <source>String to search for</source>
          <target state="translated">검색 할 문자열</target>
        </trans-unit>
        <trans-unit id="deba9216c2af2ec3dea18fad6cf02b2f8a974cd4" translate="yes" xml:space="preserve">
          <source>String to search for.</source>
          <target state="translated">검색 할 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4e35ca95f79c8fb89c80a4d3e5db5f199d244ff7" translate="yes" xml:space="preserve">
          <source>String to search in</source>
          <target state="translated">검색 할 문자열</target>
        </trans-unit>
        <trans-unit id="053cfb20420cb605c24aee25c0bbdf9ce7b6d359" translate="yes" xml:space="preserve">
          <source>String to split on. If this string is empty, an error will occur.</source>
          <target state="translated">분할 할 문자열입니다. 이 문자열이 비어 있으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fff53bec8fdc451861d5af1b1290addb682dd9c5" translate="yes" xml:space="preserve">
          <source>String-based POSIX directory support</source>
          <target state="translated">문자열 기반 POSIX 디렉토리 지원</target>
        </trans-unit>
        <trans-unit id="8cef583d5b61b7fc89558336bd703935be4e09ad" translate="yes" xml:space="preserve">
          <source>StripHighBit</source>
          <target state="translated">StripHighBit</target>
        </trans-unit>
        <trans-unit id="871647865c6cba3a00d16282577f9276133331ff" translate="yes" xml:space="preserve">
          <source>Strongly Connected Components</source>
          <target state="translated">강력하게 연결된 구성 요소</target>
        </trans-unit>
        <trans-unit id="9885145de2eac313bd39f23faaeadb94394cd85f" translate="yes" xml:space="preserve">
          <source>Strongly connected component.</source>
          <target state="translated">강력하게 연결된 구성 요소.</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="076bd1a687008936807629119bee2e2c08a156e4" translate="yes" xml:space="preserve">
          <source>SubLANGID</source>
          <target state="translated">SubLANGID</target>
        </trans-unit>
        <trans-unit id="246054a773a4e9a7ae273fea13e407f37de9f51d" translate="yes" xml:space="preserve">
          <source>Subject to fusion (fuses with its argument).</source>
          <target state="translated">융합의 대상이된다 (논쟁과 융합).</target>
        </trans-unit>
        <trans-unit id="38dc790c6071b3fcf05389a8505d2d40f9609dfa" translate="yes" xml:space="preserve">
          <source>Subject to fusion. Performs replacement on invalid scalar values.</source>
          <target state="translated">융합 될 수 있습니다. 유효하지 않은 스칼라 값을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="d560c3166145993736fa5da12096c1747a90f1a1" translate="yes" xml:space="preserve">
          <source>Sublist predicates</source>
          <target state="translated">서브리스트 술어</target>
        </trans-unit>
        <trans-unit id="7503d011931067b41e002f8956088332dc99cac0" translate="yes" xml:space="preserve">
          <source>Sublists</source>
          <target state="translated">Sublists</target>
        </trans-unit>
        <trans-unit id="e452b6e9b72f42cbb3a20fd5c96416db827ecc42" translate="yes" xml:space="preserve">
          <source>Submap</source>
          <target state="translated">Submap</target>
        </trans-unit>
        <trans-unit id="041d20cfb351df25518b1fc63a1180aa4794aa06" translate="yes" xml:space="preserve">
          <source>Subranges</source>
          <target state="translated">Subranges</target>
        </trans-unit>
        <trans-unit id="04b8db0c75f75123429916d395a99faa9f90f414" translate="yes" xml:space="preserve">
          <source>Subscribers can post to the list by sending their message to &lt;a href=&quot;mailto:ghc-devs%40haskell.org&quot;&gt;ghc-devs@haskell.org&lt;/a&gt;. Further information can be found on the &lt;a href=&quot;http://www.haskell.org/mailman/listinfo/ghc-devs&quot;&gt;Mailman page&lt;/a&gt;.</source>
          <target state="translated">가입자는 &lt;a href=&quot;mailto:ghc-devs%40haskell.org&quot;&gt;ghc-devs@haskell.org로&lt;/a&gt; 메시지를 보내서 목록에 게시 할 수 있습니다 . 자세한 정보는 &lt;a href=&quot;http://www.haskell.org/mailman/listinfo/ghc-devs&quot;&gt;Mailman 페이지&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5eb1c8f193a2e720b166a1c1ec2db58a17d52f8b" translate="yes" xml:space="preserve">
          <source>Subscribers can post to the list by sending their message to &lt;a href=&quot;mailto:glasgow-haskell-users%40haskell.org&quot;&gt;glasgow-haskell-users@haskell.org&lt;/a&gt;. Further information can be found on the &lt;a href=&quot;http://www.haskell.org/mailman/listinfo/glasgow-haskell-users&quot;&gt;Mailman page&lt;/a&gt;.</source>
          <target state="translated">가입자는 메시지를 &lt;a href=&quot;mailto:glasgow-haskell-users%40haskell.org&quot;&gt;glasgow-haskell-users@haskell.org&lt;/a&gt; 로 보내 목록에 게시 할 수 있습니다 . 자세한 정보는 &lt;a href=&quot;http://www.haskell.org/mailman/listinfo/glasgow-haskell-users&quot;&gt;Mailman 페이지&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1ee5424964da2c091edd5848a37ea5bf9cb02ac7" translate="yes" xml:space="preserve">
          <source>Substitute a 'v' format character with the given default format character in the &lt;code&gt;&lt;a href=&quot;text-printf#t:FieldFormat&quot;&gt;FieldFormat&lt;/a&gt;&lt;/code&gt;. A convenience for user-implemented types, which should support &quot;%v&quot;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-printf#t:FieldFormat&quot;&gt;FieldFormat&lt;/a&gt;&lt;/code&gt; 에서 지정된 기본 형식 문자로 'v'형식 문자를 대체하십시오 . &quot;% v&quot;를 지원해야하는 사용자 구현 형식의 편의성.</target>
        </trans-unit>
        <trans-unit id="827c20543512b6872f9167e039de225d7f3586ed" translate="yes" xml:space="preserve">
          <source>Substitute various time-related information for each %-code in the string, as per &lt;code&gt;&lt;a href=&quot;data-time-format-internal#v:formatCharacter&quot;&gt;formatCharacter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-time-format-internal#v:formatCharacter&quot;&gt;formatCharacter&lt;/a&gt;&lt;/code&gt; 에 따라 문자열의 각 %-코드에 대해 다양한 시간 관련 정보를 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="21d9ae09150728fb01f3df8f2d5bf01b3f3ebc56" translate="yes" xml:space="preserve">
          <source>Substring matching is supported for ⟨M⟩ in &lt;code&gt;find-module&lt;/code&gt; and for ⟨P⟩ in &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;describe&lt;/code&gt;, and &lt;code&gt;field&lt;/code&gt;, where a &lt;code&gt;'*'&lt;/code&gt; indicates open substring ends (&lt;code&gt;prefix*&lt;/code&gt;, &lt;code&gt;*suffix&lt;/code&gt;, &lt;code&gt;*infix*&lt;/code&gt;). Examples (output omitted):</source>
          <target state="translated">하위 문자열 일치는 &lt;code&gt;find-module&lt;/code&gt; ⟨M⟩ 및 &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;describe&lt;/code&gt; 및 &lt;code&gt;field&lt;/code&gt; 의 ⟨P⟨에 대해 지원됩니다 . 여기서 &lt;code&gt;'*'&lt;/code&gt; 는 열린 하위 문자열 끝 ( &lt;code&gt;prefix*&lt;/code&gt; , &lt;code&gt;*suffix&lt;/code&gt; , &lt;code&gt;*infix*&lt;/code&gt; )을 나타냅니다 . 예 (출력 생략) :</target>
        </trans-unit>
        <trans-unit id="ab6fff443cc0973a1c46302de5d05ef909254c54" translate="yes" xml:space="preserve">
          <source>Substring to search for (&lt;code&gt;needle&lt;/code&gt;)</source>
          <target state="translated">검색 할 부분 문자열 ( &lt;code&gt;needle&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="910b443e8f3aa911551fe1b15df5c21842322d13" translate="yes" xml:space="preserve">
          <source>Substrings</source>
          <target state="translated">Substrings</target>
        </trans-unit>
        <trans-unit id="98a81fc167b58777c62ed1dfaa91251ba9db5eee" translate="yes" xml:space="preserve">
          <source>Subtract one &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; from another.</source>
          <target state="translated">하나의 &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 를 다른 정수 에서 빼십시오 .</target>
        </trans-unit>
        <trans-unit id="ee4ba19df4728cec72d08a77d05708e00b8bcb7a" translate="yes" xml:space="preserve">
          <source>Subtract signed integers reporting overflow. First member of result is the difference truncated to an &lt;code&gt;Int#&lt;/code&gt;; second member is zero if the true difference fits in an &lt;code&gt;Int#&lt;/code&gt;, nonzero if overflow occurred (the difference is either too large or too small to fit in an &lt;code&gt;Int#&lt;/code&gt;).</source>
          <target state="translated">오버플로보고 부호있는 정수를 뺍니다. 결과의 첫 번째 멤버는 차이가 &lt;code&gt;Int#&lt;/code&gt; 잘린 것입니다 . 실제 차이가 &lt;code&gt;Int#&lt;/code&gt; 맞는 경우 두 번째 멤버는 0이고 오버플로가 발생한 경우 0이 아닙니다 (차이가 너무 크거나 작아서 &lt;code&gt;Int#&lt;/code&gt; 에 맞지 않음).</target>
        </trans-unit>
        <trans-unit id="30c07609e2e31f77bb622485b3cc7bf36c0b3d7d" translate="yes" xml:space="preserve">
          <source>Subtract two vectors element-wise.</source>
          <target state="translated">요소별로 두 벡터를 뺍니다.</target>
        </trans-unit>
        <trans-unit id="b665f5751f6c474585435dc9171b3dae6053a5f0" translate="yes" xml:space="preserve">
          <source>Subtract unsigned integers reporting overflow. The first element of the pair is the result. The second element is the carry flag, which is nonzero on overflow.</source>
          <target state="translated">오버 플로우를보고하는 부호없는 정수를 뺍니다. 쌍의 첫 번째 요소가 결과입니다. 두 번째 요소는 캐리 플래그이며 오버플로시 0이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="497cccd33439953bbbd65da81332fed6920de8d2" translate="yes" xml:space="preserve">
          <source>Subtraction of type-level naturals.</source>
          <target state="translated">유형 수준의 자연 제거.</target>
        </trans-unit>
        <trans-unit id="91d5cb154b12d16f439a24c1bf3b1c526a720a4b" translate="yes" xml:space="preserve">
          <source>Succeeds iff we are at the end of input</source>
          <target state="translated">입력이 끝났을 때 성공</target>
        </trans-unit>
        <trans-unit id="85957404dd49cf29cf9e260987f143968d4c3b86" translate="yes" xml:space="preserve">
          <source>Such arrows are equivalent to monads (see &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowMonad&quot;&gt;ArrowMonad&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">이러한 화살표는 모나드와 동일합니다 ( &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowMonad&quot;&gt;ArrowMonad&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="8b16de06d17ad8c6bf7ec704068bb13890314a12" translate="yes" xml:space="preserve">
          <source>Such data types have only one value, namely bottom. Nevertheless, they can be useful when defining &amp;ldquo;phantom types&amp;rdquo;.</source>
          <target state="translated">이러한 데이터 유형에는 하나의 값, 즉 bottom 만 있습니다. 그럼에도 불구하고 &quot;팬텀 유형&quot;을 정의 할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1473fd9419719956dc153fb3e53b7c0229f16c2" translate="yes" xml:space="preserve">
          <source>Such macros can also be defined directly in the source. They are useful for making a &lt;code&gt;#let&lt;/code&gt;-like macro whose expansion uses other &lt;code&gt;#let&lt;/code&gt; macros. Plain &lt;code&gt;#let&lt;/code&gt; prepends &lt;code&gt;hsc_&lt;/code&gt; to the macro name and wraps the definition in a &lt;code&gt;printf&lt;/code&gt; call.</source>
          <target state="translated">이러한 매크로는 소스에서 직접 정의 할 수도 있습니다. 확장시 다른 &lt;code&gt;#let&lt;/code&gt; 매크로를 사용 하는 &lt;code&gt;#let&lt;/code&gt; 유사 매크로 를 만드는 데 유용 합니다. 일반 &lt;code&gt;#let&lt;/code&gt; 은 매크로 이름 앞에 &lt;code&gt;hsc_&lt;/code&gt; 를 붙이고 &lt;code&gt;printf&lt;/code&gt; 호출 에서 정의를 래핑합니다 .</target>
        </trans-unit>
        <trans-unit id="55b56095e34a272508b89dad1dc7be5bd15118fb" translate="yes" xml:space="preserve">
          <source>Such multiline commands can be used with any GHCi command, and note that the layout rule is in effect. The main purpose of multiline commands is not to replace module loading but to make definitions in .ghci-files (see &lt;a href=&quot;#ghci-dot-files&quot;&gt;The .ghci and .haskeline files&lt;/a&gt;) more readable and maintainable.</source>
          <target state="translated">이러한 여러 줄 명령은 모든 GHCi 명령과 함께 사용할 수 있으며 레이아웃 규칙이 적용됩니다. 여러 줄 명령의 주요 목적은 모듈로드를 대체하는 것이 아니라 .ghci 파일 ( &lt;a href=&quot;#ghci-dot-files&quot;&gt;.ghci 및 .haskeline 파일&lt;/a&gt; 참조) 의 정의를 보다 읽기 쉽고 유지 관리하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="7169e9119a6aaa5f7b6232bacf90dcb50543ba51" translate="yes" xml:space="preserve">
          <source>Suffix saying &amp;ldquo;start here&amp;rdquo;</source>
          <target state="translated">접미사 &quot;여기에서 시작&quot;</target>
        </trans-unit>
        <trans-unit id="65ff33cefc3f84e88830d0bf249af62b2e49d228" translate="yes" xml:space="preserve">
          <source>Suggest that the compiler always consider inlining &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">컴파일러는 항상 &lt;code&gt;name&lt;/code&gt; 인라이닝을 고려하도록 제안하십시오 .</target>
        </trans-unit>
        <trans-unit id="fc9ce14b28c6f2c3b72caf056ca604b2b96f7d2b" translate="yes" xml:space="preserve">
          <source>Sum</source>
          <target state="translated">Sum</target>
        </trans-unit>
        <trans-unit id="d9e2491eb7656e3492fcc3876a7a77de3462b7a8" translate="yes" xml:space="preserve">
          <source>Sum of copied_bytes across all GCs</source>
          <target state="translated">모든 GC에서 복사 된 바이트의 합계</target>
        </trans-unit>
        <trans-unit id="0d9ccb61b1acc93fbb28f6e048faf94d55b713a5" translate="yes" xml:space="preserve">
          <source>Sum of copied_bytes across all parallel GCs</source>
          <target state="translated">모든 병렬 GC에서 복사 된 바이트의 합계</target>
        </trans-unit>
        <trans-unit id="dcad0491181633bafafa0e3db915b09abae702b5" translate="yes" xml:space="preserve">
          <source>Sum of live bytes across all major GCs. Divided by major_gcs gives the average live data over the lifetime of the program.</source>
          <target state="translated">모든 주요 GC에 걸친 라이브 바이트의 합. major_gcs로 나누어 프로그램 수명 동안 평균 라이브 데이터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="70ac69aadffa6cb9bde16c8cdf6f65307407d32c" translate="yes" xml:space="preserve">
          <source>Sum of par_balanced_copied bytes across all parallel GCs</source>
          <target state="translated">모든 병렬 GC에서 par_balanced_copied 바이트의 합</target>
        </trans-unit>
        <trans-unit id="07a5b55c642011e64059485d82402747c10b4adb" translate="yes" xml:space="preserve">
          <source>Sum of par_max_copied_bytes across all parallel GCs. Deprecated.</source>
          <target state="translated">모든 병렬 GC에서 par_max_copied_bytes의 합계 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5215b34dfb01abbf7378acfdcf4fe1dedcc8e009" translate="yes" xml:space="preserve">
          <source>Sum the values in a tree:</source>
          <target state="translated">트리의 값을 합산하십시오.</target>
        </trans-unit>
        <trans-unit id="4f4abb0e8c9277199f066395cb9c2c425902f02e" translate="yes" xml:space="preserve">
          <source>SumAlt</source>
          <target state="translated">SumAlt</target>
        </trans-unit>
        <trans-unit id="9d6c94fe6e3e0e9614bba2768e5b7540a7c0bf47" translate="yes" xml:space="preserve">
          <source>SumArity</source>
          <target state="translated">SumArity</target>
        </trans-unit>
        <trans-unit id="e797e0283a33d4a2f6f3ed364c6e9ca07755e641" translate="yes" xml:space="preserve">
          <source>Summarise timing stats for GHC (same as &lt;code&gt;+RTS -tstderr&lt;/code&gt;).</source>
          <target state="translated">GHC의 타이밍 통계를 요약합니다 ( &lt;code&gt;+RTS -tstderr&lt;/code&gt; 와 동일 ).</target>
        </trans-unit>
        <trans-unit id="6a0ba6d4cba69cca9ee908b3882310d0126b622e" translate="yes" xml:space="preserve">
          <source>SummaryGCStats</source>
          <target state="translated">SummaryGCStats</target>
        </trans-unit>
        <trans-unit id="45c7c0bcfb7345694edd730cace93da339799b81" translate="yes" xml:space="preserve">
          <source>Sums, lifted to functors.</source>
          <target state="translated">펑터로 들어 올린 합계</target>
        </trans-unit>
        <trans-unit id="825e9b3f9d7fa4f8c1136e7e836e969e05770489" translate="yes" xml:space="preserve">
          <source>Sums: encode choice between constructors</source>
          <target state="translated">합계 : 생성자 간 선택 인코딩</target>
        </trans-unit>
        <trans-unit id="bc5dd045b8623ddfc4bd0bce98ca5fda42accf88" translate="yes" xml:space="preserve">
          <source>Sunday</source>
          <target state="translated">Sunday</target>
        </trans-unit>
        <trans-unit id="e87c6d01d55d0ce0b58fc09dd2f8e52d59de79d1" translate="yes" xml:space="preserve">
          <source>Sunday-starting week number (as &lt;code&gt;%U&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">(같은 주 번호 일요일-시작 &lt;code&gt;%U&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-time-format#v:formatTime&quot;&gt;formatTime&lt;/a&gt;&lt;/code&gt; 을 ).</target>
        </trans-unit>
        <trans-unit id="7c7cab6646f2b97044e50ae44c966832deeaa85f" translate="yes" xml:space="preserve">
          <source>Superclass for asynchronous exceptions.</source>
          <target state="translated">비동기 예외의 슈퍼 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="ff030e54038a44e824c8361bcdbaeb79e030624e" translate="yes" xml:space="preserve">
          <source>Support for API calls that are passed a fixed-size buffer and tell you via the return value if the buffer was too small. In that case, we extend the buffer size and try again.</source>
          <target state="translated">고정 크기 버퍼에 전달되고 버퍼가 너무 작은 경우 반환 값을 통해 알려주는 API 호출을 지원합니다. 이 경우 버퍼 크기를 확장하고 다시 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="42fe79082e0a9288bda8ac01c25ca56f6078fa67" translate="yes" xml:space="preserve">
          <source>Support for bound threads; see the paper &lt;a href=&quot;http://community.haskell.org/~simonmar/papers/conc-ffi.pdf&quot;&gt;Extending the FFI with concurrency&lt;/a&gt;.</source>
          <target state="translated">바운드 스레드 지원; &lt;a href=&quot;http://community.haskell.org/~simonmar/papers/conc-ffi.pdf&quot;&gt;동시성으로 FFI 확장&lt;/a&gt; 백서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f3cb7ae652ba2f67aaaa3d6c38db502bc3ca3643" translate="yes" xml:space="preserve">
          <source>Support for catching exceptions raised during top-level computations (e.g. &lt;code&gt;Main.main&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, and foreign exports)</source>
          <target state="translated">최상위 계산 (예 : &lt;code&gt;Main.main&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; 및 해외 수출) 중에 발생한 예외 포착 지원</target>
        </trans-unit>
        <trans-unit id="31617f5b30b1b9c8053b244b4ae6feb5a246d66c" translate="yes" xml:space="preserve">
          <source>Support for multiple operating system threads and bound threads as described below is currently only available in the GHC runtime system if you use the &lt;em&gt;-threaded&lt;/em&gt; option when linking.</source>
          <target state="translated">링크 할 때 &lt;em&gt;-threaded&lt;/em&gt; 옵션 을 사용하는 경우 아래 설명 된대로 다중 운영 체제 스레드 및 바운드 스레드 지원은 현재 GHC 런타임 시스템에서만 사용 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="e0bd01fb9ed07046a4615b96dd1a8c99f7d4ce7b" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; data with native code via the Haskell foreign function interface.</source>
          <target state="translated">Haskell 외부 함수 인터페이스를 통해 네이티브 코드로 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 데이터 를 사용하도록 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="ddf769c12c4f317b302132ad5336a5ddba73c0c8" translate="yes" xml:space="preserve">
          <source>Suppose a client C decides to trust package &lt;code&gt;P&lt;/code&gt; and package &lt;code&gt;base&lt;/code&gt;. Then does C trust module &lt;code&gt;M&lt;/code&gt;? Well &lt;code&gt;M&lt;/code&gt; is marked &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt;, so we don&amp;rsquo;t restrict the language. However, we still must check &lt;code&gt;M&lt;/code&gt;&amp;lsquo;s imports:</source>
          <target state="translated">클라이언트 C가 패키지 &lt;code&gt;P&lt;/code&gt; 와 패키지 &lt;code&gt;base&lt;/code&gt; 을 신뢰하기로 결정했다고 가정합니다 . 그렇다면 C는 모듈 &lt;code&gt;M&lt;/code&gt; 을 신뢰 합니까? 음 &lt;code&gt;M&lt;/code&gt; 은 &lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt; 으로 표시 되므로 언어를 제한하지 않습니다. 그러나 여전히 &lt;code&gt;M&lt;/code&gt; 의 수입품을 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6edabccdee60f9757ab610d65ace3f274d627ee0" translate="yes" xml:space="preserve">
          <source>Suppose a client C decides to trust package &lt;code&gt;P&lt;/code&gt; and package &lt;code&gt;base&lt;/code&gt;. Then does C trust module &lt;code&gt;M&lt;/code&gt;? Well &lt;code&gt;M&lt;/code&gt; is marked &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt;, so we don&amp;rsquo;t restrict the language. However, we still must check &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s imports:</source>
          <target state="translated">클라이언트 C가 패키지 &lt;code&gt;P&lt;/code&gt; 및 패키지 &lt;code&gt;base&lt;/code&gt; 를 신뢰하기로 결정했다고 가정합니다 . 그렇다면 C는 모듈 &lt;code&gt;M&lt;/code&gt; 을 신뢰 합니까? 그런데 &lt;code&gt;M&lt;/code&gt; 이 표시되어 &lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt; , 그래서 우리는 언어를 제한하지 않습니다. 그러나 여전히 &lt;code&gt;M&lt;/code&gt; 의 수입품을 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="095b60f3ba2863e8c5c5d107012bf74c2b5f0019" translate="yes" xml:space="preserve">
          <source>Suppose that from the RHS of &lt;code&gt;f&lt;/code&gt; we get the constraint &lt;code&gt;C b [b]&lt;/code&gt;. But GHC does not commit to instance (C), because in a particular call of &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; might be instantiated to &lt;code&gt;Int&lt;/code&gt;, in which case instance (D) would be more specific still. So GHC rejects the program.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 의 RHS로부터 제약 조건 &lt;code&gt;C b [b]&lt;/code&gt; 를 얻는다고 가정하자 . 그러나 GHC는 &lt;code&gt;f&lt;/code&gt; 의 특정 호출 에서 &lt;code&gt;b&lt;/code&gt; 가 &lt;code&gt;Int&lt;/code&gt; 로 인스턴스화 될 수 있으므로 인스턴스 (C)를 커밋하지 않습니다 .이 경우 인스턴스 (D)는 여전히 더 구체적입니다. 따라서 GHC는 프로그램을 거부합니다.</target>
        </trans-unit>
        <trans-unit id="da498088a064a16427d552d5b30c6ce378689bb7" translate="yes" xml:space="preserve">
          <source>Suppose we have the following Haskell source code, which we place in a file &lt;code&gt;Main.hs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Main.hs&lt;/code&gt; 파일에 다음과 같은 Haskell 소스 코드가 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="efb59f4ee25bd81474f2698e49ad1d0c32f825f1" translate="yes" xml:space="preserve">
          <source>Suppose we have two uses of a type constructor, each applied to the same parameters except for one difference. (For example, &lt;code&gt;T Age Bool c&lt;/code&gt; and &lt;code&gt;T Int Bool c&lt;/code&gt; for some type &lt;code&gt;T&lt;/code&gt;.) The role of a type parameter says what we need to know about the two differing type arguments in order to know that the two outer types have the same representation (in the example, what must be true about &lt;code&gt;Age&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt; in order to show that &lt;code&gt;T Age Bool c&lt;/code&gt; has the same representation as &lt;code&gt;T Int Bool c&lt;/code&gt;).</source>
          <target state="translated">하나의 차이점을 제외하고는 동일한 매개 변수에 각각 적용되는 두 가지 유형 생성자가 있다고 가정합니다. (예를 들어, 일부 유형 &lt;code&gt;T&lt;/code&gt; 의 경우 &lt;code&gt;T Age Bool c&lt;/code&gt; 및 &lt;code&gt;T Int Bool c&lt;/code&gt; ) 유형 매개 변수의 역할은 두 개의 외부 유형이 동일한 표현을 갖기 위해 두 개의 다른 유형 인수에 대해 알아야 할 사항을 나타냅니다. (이 예에서, &lt;code&gt;T Age Bool c&lt;/code&gt; 가 &lt;code&gt;T Int Bool c&lt;/code&gt; 와 동일한 표현을 나타 내기 위해 &lt;code&gt;Age&lt;/code&gt; 및 &lt;code&gt;Int&lt;/code&gt; 에 대해 진실해야하는 것 ).</target>
        </trans-unit>
        <trans-unit id="e3f030babe9d462a874f39c8cea4c76533ced64f" translate="yes" xml:space="preserve">
          <source>Suppose we have:</source>
          <target state="translated">우리가 가지고 있다고 가정 해보십시오.</target>
        </trans-unit>
        <trans-unit id="95d757c1803d865246ed0c5f9c2e1f752242c85c" translate="yes" xml:space="preserve">
          <source>Suppose we want to define an interpreter that can do I/O and has exceptions, an environment and a modifiable store. We can define a monad that supports all these things as a stack of monad transformers:</source>
          <target state="translated">I / O를 수행 할 수 있고 예외, 환경 및 수정 가능한 저장소가있는 인터프리터를 정의하려고한다고 가정하십시오. 이러한 모든 것을 지원하는 모나드를 모나드 변환기의 스택으로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e761d7f04f0cd2dc6abebf53430127001808a68" translate="yes" xml:space="preserve">
          <source>Suppose you are importing a Prelude of your own in order to define your own numeric class hierarchy. It completely defeats that purpose if the literal &amp;ldquo;1&amp;rdquo; means &amp;ldquo;&lt;code&gt;Prelude.fromInteger 1&lt;/code&gt;&amp;rdquo;, which is what the Haskell Report specifies. So the &lt;a href=&quot;#extension-RebindableSyntax&quot;&gt;&lt;code&gt;RebindableSyntax&lt;/code&gt;&lt;/a&gt; extension causes the following pieces of built-in syntax to refer to &lt;em&gt;whatever is in scope&lt;/em&gt;, not the Prelude versions:</source>
          <target state="translated">고유 한 숫자 클래스 계층 구조를 정의하기 위해 사용자 고유의 Prelude를 가져오고 있다고 가정하십시오. 리터럴 &quot;1&quot;이 &quot; &lt;code&gt;Prelude.fromInteger 1&lt;/code&gt; &quot;을 의미하는 경우 이러한 목적을 완전히 무효화 합니다. 이는 Haskell 보고서가 지정한 것입니다. 따라서 &lt;a href=&quot;#extension-RebindableSyntax&quot;&gt; &lt;code&gt;RebindableSyntax&lt;/code&gt; &lt;/a&gt; 확장은 다음 내장 구문 이 Prelude 버전이 아니라 &lt;em&gt;scope&lt;/em&gt; 에있는 &lt;em&gt;모든&lt;/em&gt; 것을 참조하게합니다 .</target>
        </trans-unit>
        <trans-unit id="c769136ca44e362284769d80ccd2b1f9f09dfcf1" translate="yes" xml:space="preserve">
          <source>Suppress &quot;ticks&quot; in the pretty-printer output.</source>
          <target state="translated">pretty-printer 출력에서 ​​&quot;틱&quot;을 억제합니다.</target>
        </trans-unit>
        <trans-unit id="ac34491e80235a273a00fbf5ae564921bc6adb63" translate="yes" xml:space="preserve">
          <source>Suppress &amp;ldquo;ticks&amp;rdquo; in the pretty-printer output.</source>
          <target state="translated">프리티 프린터 출력에서 ​​&quot;틱&quot;을 억제합니다.</target>
        </trans-unit>
        <trans-unit id="6adae4844792476be6006de9e866028d9783ef04" translate="yes" xml:space="preserve">
          <source>Suppress any unsolicited debugging output. When GHC has been built with the &lt;code&gt;DEBUG&lt;/code&gt; option it occasionally emits debug output of interest to developers. The extra output can confuse the testing framework and cause bogus test failures, so this flag is provided to turn it off.</source>
          <target state="translated">불필요한 디버깅 출력을 억제하십시오. &lt;code&gt;DEBUG&lt;/code&gt; 옵션 으로 GHC를 빌드 하면 개발자가 관심있는 디버그 출력을 생성하는 경우가 있습니다. 추가 출력은 테스트 프레임 워크를 혼동시키고 가짜 테스트 실패를 유발할 수 있으므로이 플래그는이를 해제하기 위해 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="290ff2e65a492c159dfad44b8433444fb21b1d9b" translate="yes" xml:space="preserve">
          <source>Suppress everything that can be suppressed, except for unique ids as this often makes the printout ambiguous. If you just want to see the overall structure of the code, then start here.</source>
          <target state="translated">고유 ID를 제외하고는 인쇄물을 모호하게 만들 수 있으므로 억제 할 수있는 모든 것을 억제하십시오. 코드의 전체 구조를 보려면 여기에서 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="a53d305ee7381472627843798c8d10190107cab3" translate="yes" xml:space="preserve">
          <source>Suppress extended information about identifiers where they are bound</source>
          <target state="translated">바인딩 된 식별자에 대한 확장 정보 억제</target>
        </trans-unit>
        <trans-unit id="11b448ead99f0bf773abbe1b2d9be994c6e6b74f" translate="yes" xml:space="preserve">
          <source>Suppress extended information about identifiers where they are bound. This includes strictness information and inliner templates. Using this flag can cut the size of the core dump in half, due to the lack of inliner templates</source>
          <target state="translated">바인딩 된 식별자에 대한 확장 정보를 억제합니다. 여기에는 엄격 정보 및 인라이너 템플릿이 포함됩니다. 이 플래그를 사용하면 인라이너 템플릿이 없기 때문에 코어 덤프의 크기를 절반으로 줄일 수 있습니다</target>
        </trans-unit>
        <trans-unit id="fbb75bd7a15050e7f0b879e9c42149aa1c523a0e" translate="yes" xml:space="preserve">
          <source>Suppress the printing of closure free variable lists in STG output</source>
          <target state="translated">STG 출력에서 ​​클로저 프리 변수 목록의 인쇄를 억제합니다</target>
        </trans-unit>
        <trans-unit id="e6f6d31cea2bd9d749646450b106f137701dd495" translate="yes" xml:space="preserve">
          <source>Suppress the printing of coercions in Core dumps to make them shorter</source>
          <target state="translated">코어 덤프에서 강제 인쇄를 억제하여 더 짧게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="12c098bf156d0093acc5cd885289b696e4cc4c15" translate="yes" xml:space="preserve">
          <source>Suppress the printing of module qualification prefixes</source>
          <target state="translated">모듈 한정 접두사 인쇄 금지</target>
        </trans-unit>
        <trans-unit id="5bbac2f4b131b833c24ec52650a5f5f342d244b7" translate="yes" xml:space="preserve">
          <source>Suppress the printing of module qualification prefixes. This is the &lt;code&gt;Data.List&lt;/code&gt; in &lt;code&gt;Data.List.length&lt;/code&gt;.</source>
          <target state="translated">모듈 규정 접두사의 인쇄를 억제하십시오. 이것은 &lt;code&gt;Data.List&lt;/code&gt; .length 의 &lt;code&gt;Data.List.length&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="71860721ed879e362ecab05e711aec4a79ac4c5e" translate="yes" xml:space="preserve">
          <source>Suppress the printing of the stable unfolding of a variable at its binding site</source>
          <target state="translated">바인딩 사이트에서 변수의 안정적인 전개를 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dbb99127d9ceaf3187aec7c23b17de65a58473e2" translate="yes" xml:space="preserve">
          <source>Suppress the printing of the stable unfolding of a variable at its binding site.</source>
          <target state="translated">바인딩 사이트에서 변수의 안정적인 전개를 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dd6fc6999fd1d0618447db94d8224cadf833b0b9" translate="yes" xml:space="preserve">
          <source>Suppress the printing of timestamps. This makes it easier to diff dumps.</source>
          <target state="translated">타임 스탬프 인쇄를 억제합니다. 이렇게하면 덤프를 쉽게 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ae280ce64aac04364611b8b6b2d9fdd41e13369" translate="yes" xml:space="preserve">
          <source>Suppress the printing of type applications.</source>
          <target state="translated">유형 응용 프로그램의 인쇄를 억제하십시오.</target>
        </trans-unit>
        <trans-unit id="c8cbf5451aabc9715d94f13c130e063b24125bba" translate="yes" xml:space="preserve">
          <source>Suppress the printing of type coercions.</source>
          <target state="translated">강제 변환 유형의 인쇄를 억제합니다.</target>
        </trans-unit>
        <trans-unit id="60d40a0d45f6f7bc2dc57806157b743c4e81be9e" translate="yes" xml:space="preserve">
          <source>Suppress the printing of type signatures.</source>
          <target state="translated">유형 서명 인쇄를 억제합니다.</target>
        </trans-unit>
        <trans-unit id="1e1a665236d94041050e8a7fe1af9a10ff9786d7" translate="yes" xml:space="preserve">
          <source>Suppress the printing of uniques in debug output (easier to use &lt;code&gt;diff&lt;/code&gt;)</source>
          <target state="translated">디버그 출력에서 ​​고유 한 인쇄를 억제합니다 ( &lt;code&gt;diff&lt;/code&gt; 사용하기 쉬움 ).</target>
        </trans-unit>
        <trans-unit id="8200cb700aabd0d0bba42349c1c49130a9f1b310" translate="yes" xml:space="preserve">
          <source>Suppress the printing of uniques. This may make the printout ambiguous (e.g. unclear where an occurrence of &amp;lsquo;x&amp;rsquo; is bound), but it makes the output of two compiler runs have many fewer gratuitous differences, so you can realistically apply &lt;code&gt;diff&lt;/code&gt;. Once &lt;code&gt;diff&lt;/code&gt; has shown you where to look, you can try again without &lt;a href=&quot;#ghc-flag--dsuppress-uniques&quot;&gt;&lt;code&gt;-dsuppress-uniques&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">고유 인쇄를 억제합니다. 이로 인해 출력물이 모호해질 수 있습니다 (예 : 'x'의 발생 위치가 불분명 할 수 있음). 그러나 두 개의 컴파일러 실행 결과의 차이가 훨씬 적으므로 &lt;code&gt;diff&lt;/code&gt; 를 실제로 적용 할 수 있습니다 . 일단 &lt;code&gt;diff&lt;/code&gt; 어디 있는지 당신에게 보여 주었다, 당신은하지 않고 다시 시도 할 수 있습니다 &lt;a href=&quot;#ghc-flag--dsuppress-uniques&quot;&gt; &lt;code&gt;-dsuppress-uniques&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6bc6a8fee0bd35a3f374848c1e256872c6dd2b76" translate="yes" xml:space="preserve">
          <source>Suppress the printing of variable kinds</source>
          <target state="translated">다양한 종류의 인쇄 억제</target>
        </trans-unit>
        <trans-unit id="6c6d53545f757aadefd3054db1329ebc043b8bef" translate="yes" xml:space="preserve">
          <source>Suppress timestamps in dumps</source>
          <target state="translated">덤프에서 타임 스탬프 억제</target>
        </trans-unit>
        <trans-unit id="3abe7da92f27950aff8e21a0aef0128f001453a5" translate="yes" xml:space="preserve">
          <source>Suppress type applications</source>
          <target state="translated">억제 형 응용</target>
        </trans-unit>
        <trans-unit id="44ecea02757bd5ca6bbfad966fb0bcd136dfa16a" translate="yes" xml:space="preserve">
          <source>Suppress type signatures</source>
          <target state="translated">형식 서명 억제</target>
        </trans-unit>
        <trans-unit id="54ef935ccf47a05ace57d8ba2fc3133cb9a96abf" translate="yes" xml:space="preserve">
          <source>Suppress unsolicited debugging output</source>
          <target state="translated">불필요한 디버깅 출력 억제</target>
        </trans-unit>
        <trans-unit id="ab5b3b04ea9eccd0e7c10a8ebf5857fc6c1efffc" translate="yes" xml:space="preserve">
          <source>Suppressing unwanted information</source>
          <target state="translated">원치 않는 정보 억제</target>
        </trans-unit>
        <trans-unit id="c948ea0246807256cf48a7cfaaf94b78e7b2095a" translate="yes" xml:space="preserve">
          <source>Surrogate</source>
          <target state="translated">Surrogate</target>
        </trans-unit>
        <trans-unit id="b24247fb5a9d8d8059901182187be57626f3ba71" translate="yes" xml:space="preserve">
          <source>Suspend</source>
          <target state="translated">Suspend</target>
        </trans-unit>
        <trans-unit id="60bdfaeef9de3afa9e3d9ef36f96b7bc40de22ca" translate="yes" xml:space="preserve">
          <source>SuspendOutput</source>
          <target state="translated">SuspendOutput</target>
        </trans-unit>
        <trans-unit id="e2749e7502a8294d14da474dd386ce65dffc90c7" translate="yes" xml:space="preserve">
          <source>Suspends the current thread for a given number of microseconds (GHC only).</source>
          <target state="translated">지정된 수의 마이크로 초 동안 현재 스레드를 일시 중단합니다 (GHC 만 해당).</target>
        </trans-unit>
        <trans-unit id="4996fb84d9b501491f3973b59b2e677765620dc5" translate="yes" xml:space="preserve">
          <source>Swap bytes in &lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 에서 바이트를 교체하십시오 .</target>
        </trans-unit>
        <trans-unit id="72e71d9c46fe0a70f7a1bcce92e5572e02939858" translate="yes" xml:space="preserve">
          <source>Swap bytes in &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 에서 바이트를 교체하십시오 .</target>
        </trans-unit>
        <trans-unit id="63ac1bbf25314306de791757bf99d5d5c6a18eb6" translate="yes" xml:space="preserve">
          <source>Swap bytes in a 64 bits of a word.</source>
          <target state="translated">64 비트 워드에서 바이트를 교체합니다.</target>
        </trans-unit>
        <trans-unit id="982631a751cc307941c1b0d5303a312235500a9f" translate="yes" xml:space="preserve">
          <source>Swap bytes in a word.</source>
          <target state="translated">단어에서 바이트를 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="b5c217b3175f1db23e820f4a3a6c120af18860d1" translate="yes" xml:space="preserve">
          <source>Swap bytes in the lower 16 bits of a word. The higher bytes are undefined.</source>
          <target state="translated">워드의 하위 16 비트에서 바이트를 교체하십시오. 더 높은 바이트는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c7a751206d598feafc5b6d1ca524120a3e50c2de" translate="yes" xml:space="preserve">
          <source>Swap bytes in the lower 32 bits of a word. The higher bytes are undefined.</source>
          <target state="translated">워드의 하위 32 비트에서 바이트를 교체하십시오. 더 높은 바이트는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="63dba41d9260dcf93f9a599778c93ef027d53087" translate="yes" xml:space="preserve">
          <source>Swap the components of a pair.</source>
          <target state="translated">쌍의 구성 요소를 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="77dc57d8f17c6348cc9cdd40f021e393b0104236" translate="yes" xml:space="preserve">
          <source>Swap the contents of a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; for a new value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 의 내용을 새 값으로 교체하십시오 .</target>
        </trans-unit>
        <trans-unit id="27a7ce7e921ae432d26780f916950fbd4a0fa123" translate="yes" xml:space="preserve">
          <source>Swap the contents of a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; for a new value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 내용을 새로운 가치 로 바꾸십시오 .</target>
        </trans-unit>
        <trans-unit id="3c4b8d9f358f2ff51aae7a538ec11a54f6930031" translate="yes" xml:space="preserve">
          <source>Switch on all rewrite rules (including rules generated by automatic specialisation of overloaded functions). Implied by &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모든 다시 쓰기 규칙 (오버로드 된 기능의 자동 특수화에 의해 생성 된 규칙 포함)을 켭니다. &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; 에&lt;/a&gt; 의해 암시됩니다 .</target>
        </trans-unit>
        <trans-unit id="a04b53848ca9575d58f32001c43b4ce12406c870" translate="yes" xml:space="preserve">
          <source>Switch on the strictness analyser. The implementation is described in the paper &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/03/demand-jfp-draft.pdf&quot;&gt;Theory and Practice of Demand Analysis in Haskell&lt;/a&gt;.</source>
          <target state="translated">엄격 성 분석기를 켭니다. 구현은 &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2017/03/demand-jfp-draft.pdf&quot;&gt;Haskell의 수요 분석 이론 및 실습에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="02d654f263c534c666ce44e6336048ef132a5d99" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">주어진 마이크로 초 후에 리턴 된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 값을 초기 값 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 전환하십시오 . &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 와 관련된 경고 도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="0eeb0af96c4035314f68fc54800b2cbb07932307" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">주어진 시간 (마이크로 초) 후에 반환 된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 값을 초기 값 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 전환합니다 . &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 와 관련된주의 사항 도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="7cfbadc54deedd0db1e69f8be2474847082c0a00" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">주어진 마이크로 초 후에 리턴 된 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 값을 초기 값 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 전환하십시오 . &lt;code&gt;&lt;a href=&quot;ghc-conc#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 와 관련된 경고 도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e07d7d535fdc45f51b0b07854b267895fb591b38" translate="yes" xml:space="preserve">
          <source>Switch the value of returned &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; from initial value &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; after a given number of microseconds. The caveats associated with &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; also apply.</source>
          <target state="translated">주어진 마이크로 초 후에 리턴 된 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 의 값을 초기 값 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 전환하십시오 . &lt;code&gt;&lt;a href=&quot;ghc-conc-io#v:threadDelay&quot;&gt;threadDelay&lt;/a&gt;&lt;/code&gt; 와 관련된 경고 도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="9a4a2407422f77912e71d6a50bc07b4dbe875d7d" translate="yes" xml:space="preserve">
          <source>Symbolic link name</source>
          <target state="translated">심볼릭 링크 이름</target>
        </trans-unit>
        <trans-unit id="1af7d6c34ea3d7825f1508a7baf71357f217a173" translate="yes" xml:space="preserve">
          <source>Symbolic links</source>
          <target state="translated">심볼릭 링크</target>
        </trans-unit>
        <trans-unit id="783361b7b59d49d71046c74299252d084b9c7882" translate="yes" xml:space="preserve">
          <source>Symbolic links are interpreted at run-time as if the contents of the link had been substituted into the path being followed to find a file or directory.</source>
          <target state="translated">심볼릭 링크는 링크 내용이 파일이나 디렉토리를 찾기 위해 따라 오는 경로로 대체 된 것처럼 런타임에 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="aff7b58eb9d618c164b0172e0b642bbd7ee3bed7" translate="yes" xml:space="preserve">
          <source>Symbolic references to values.</source>
          <target state="translated">값에 대한 상징적 참조.</target>
        </trans-unit>
        <trans-unit id="6085593feb58c36d11cea09fb5b42788f1a415de" translate="yes" xml:space="preserve">
          <source>SymbolicLink</source>
          <target state="translated">SymbolicLink</target>
        </trans-unit>
        <trans-unit id="21d208078f8fa17e45f46b6a3dbd64fbee7de0c9" translate="yes" xml:space="preserve">
          <source>SymbolicLinkFlags</source>
          <target state="translated">SymbolicLinkFlags</target>
        </trans-unit>
        <trans-unit id="788f13ef423790cd39647c69cc0a0c58faa99c27" translate="yes" xml:space="preserve">
          <source>SymbolicLinkLimit</source>
          <target state="translated">SymbolicLinkLimit</target>
        </trans-unit>
        <trans-unit id="9f1776cfc9a7333966da54deeb1343c396bc5ca1" translate="yes" xml:space="preserve">
          <source>Symmetric choice.</source>
          <target state="translated">대칭 선택.</target>
        </trans-unit>
        <trans-unit id="a30db73bdbd543bd62c51cc7cbfd53abdb952bb2" translate="yes" xml:space="preserve">
          <source>Symmetry</source>
          <target state="translated">Symmetry</target>
        </trans-unit>
        <trans-unit id="c65dc38c1e7d55fb39d508e68b61f0074c4c4660" translate="yes" xml:space="preserve">
          <source>Symmetry of equality</source>
          <target state="translated">평등의 대칭</target>
        </trans-unit>
        <trans-unit id="daaae392ecd2cfcb8c9a5ad68257590b8bbdfaee" translate="yes" xml:space="preserve">
          <source>Symmetry of representational equality</source>
          <target state="translated">표현 평등의 대칭</target>
        </trans-unit>
        <trans-unit id="a9b8b1d19a51e6138d76dae280c03cb8a38abaff" translate="yes" xml:space="preserve">
          <source>SyncIOAvailable</source>
          <target state="translated">SyncIOAvailable</target>
        </trans-unit>
        <trans-unit id="78a8df308e4ac054650c3c44fc4298d45737ee3c" translate="yes" xml:space="preserve">
          <source>Synchronised mutable variables, called &lt;code&gt;MVars&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MVars&lt;/code&gt; 라는 동기화 된 가변 변수</target>
        </trans-unit>
        <trans-unit id="bb4777d71294a1975decab3266abe6d4a49ac42f" translate="yes" xml:space="preserve">
          <source>SynchronousWrites</source>
          <target state="translated">SynchronousWrites</target>
        </trans-unit>
        <trans-unit id="8c4e75e6b94ca02b13fdfea1474a5fa8bf2871da" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:-60--124-&quot;&gt;&amp;lt;|&lt;/a&gt;&lt;/code&gt; 의 동의어 .</target>
        </trans-unit>
        <trans-unit id="c5009b7aa8ffbb85e47c87d652e2c495fe1375d8" translate="yes" xml:space="preserve">
          <source>Synonyms for convenience</source>
          <target state="translated">편의를위한 동의어</target>
        </trans-unit>
        <trans-unit id="5fd831fc65c8b632816765c2116fb97599a425fe" translate="yes" xml:space="preserve">
          <source>Syntactically, an &lt;code&gt;INLINE&lt;/code&gt; pragma for a function can be put anywhere its type signature could be put.</source>
          <target state="translated">구문 상 함수에 대한 &lt;code&gt;INLINE&lt;/code&gt; 프라그 마는 형식 서명을 넣을 수있는 모든 곳에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="111026c4c5d52f704cc515ec3a428bac05c14bda" translate="yes" xml:space="preserve">
          <source>Syntactically, the declaration lacks the &amp;ldquo;= constrs&amp;rdquo; part. The type can be parameterised over types of any kind, but if the kind is not &lt;code&gt;Type&lt;/code&gt; then an explicit kind annotation must be used (see &lt;a href=&quot;#kinding&quot;&gt;Explicitly-kinded quantification&lt;/a&gt;).</source>
          <target state="translated">구문 상 선언에는 &quot;= constrs&quot;부분이 없습니다. 유형은 모든 유형의 유형에 대해 매개 변수화 될 수 있지만, 유형이 &lt;code&gt;Type&lt;/code&gt; 이 아닌 경우 명시 적 종류 주석을 사용해야합니다 ( &lt;a href=&quot;#kinding&quot;&gt;명시 적으로 분류 된 수량&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="ced60300064781c174fbd8a0a8185d8ec7226f08" translate="yes" xml:space="preserve">
          <source>SysVar</source>
          <target state="translated">SysVar</target>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="translated">System</target>
        </trans-unit>
        <trans-unit id="22f626269b535be1c0e966f5cc96ffff2957b1b5" translate="yes" xml:space="preserve">
          <source>System environment</source>
          <target state="translated">시스템 환경</target>
        </trans-unit>
        <trans-unit id="9542bd35aa2f7ec22b0274a1a139aa8b0370e91b" translate="yes" xml:space="preserve">
          <source>System metrics</source>
          <target state="translated">시스템 메트릭</target>
        </trans-unit>
        <trans-unit id="054d4da93d51f39ec2625b1a2fd9ef9d24365634" translate="yes" xml:space="preserve">
          <source>System-independent interface to directory manipulation.</source>
          <target state="translated">디렉토리 조작에 대한 시스템 독립적 인터페이스.</target>
        </trans-unit>
        <trans-unit id="3cd94fc5a1a46ef3a6e5357bbfd94595a0395feb" translate="yes" xml:space="preserve">
          <source>System.CPUTime</source>
          <target state="translated">System.CPUTime</target>
        </trans-unit>
        <trans-unit id="abc2d555767936189fe82418dc11207d84b13f01" translate="yes" xml:space="preserve">
          <source>System.Cmd</source>
          <target state="translated">System.Cmd</target>
        </trans-unit>
        <trans-unit id="c80643d67b51d9087bf1a233ae3f8b99119d3de9" translate="yes" xml:space="preserve">
          <source>System.Console.GetOpt</source>
          <target state="translated">System.Console.GetOpt</target>
        </trans-unit>
        <trans-unit id="94c2d8456ad9d7db7535979829f620bdf7715969" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline</source>
          <target state="translated">System.Console.Haskeline</target>
        </trans-unit>
        <trans-unit id="995530c03cc406b77999512d065a39ec46d35a9f" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.Completion</source>
          <target state="translated">System.Console.Haskeline.Completion</target>
        </trans-unit>
        <trans-unit id="a684ecdf4d5d95d72d8af3b78db64da52bff47f0" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.History</source>
          <target state="translated">System.Console.Haskeline.History</target>
        </trans-unit>
        <trans-unit id="54886ee30a709eefbeeff00d918f48ef8511c73a" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.IO</source>
          <target state="translated">System.Console.Haskeline.IO</target>
        </trans-unit>
        <trans-unit id="3d1ff7ae655f9425baf34abb0fc50577afb05559" translate="yes" xml:space="preserve">
          <source>System.Console.Haskeline.MonadException</source>
          <target state="translated">System.Console.Haskeline.MonadException</target>
        </trans-unit>
        <trans-unit id="b38428bbdc0febc23724b9b6917d59dc07cd4772" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Base</source>
          <target state="translated">System.Console.Terminfo.Base</target>
        </trans-unit>
        <trans-unit id="f0530b93c36300df420c73051cf5d07524a2cd9e" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Color</source>
          <target state="translated">System.Console.Terminfo.Color</target>
        </trans-unit>
        <trans-unit id="8720cecc6bce59d2d1b27f650fff474071f33a34" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Cursor</source>
          <target state="translated">System.Console.Terminfo.Cursor</target>
        </trans-unit>
        <trans-unit id="a30e7d7d690dc83e7411bcf1cfa0738ae0ea6724" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Edit</source>
          <target state="translated">System.Console.Terminfo.Edit</target>
        </trans-unit>
        <trans-unit id="b42df4bf6e0e3dbffae5ad7025449b91817b472a" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Effects</source>
          <target state="translated">System.Console.Terminfo.Effects</target>
        </trans-unit>
        <trans-unit id="caf0cb118af26fb3d6c8a384d366d0d181635bfb" translate="yes" xml:space="preserve">
          <source>System.Console.Terminfo.Keys</source>
          <target state="translated">System.Console.Terminfo.Keys</target>
        </trans-unit>
        <trans-unit id="11c2831a9056f8ddbe33dd4b68973289a4922bc9" translate="yes" xml:space="preserve">
          <source>System.Directory</source>
          <target state="translated">System.Directory</target>
        </trans-unit>
        <trans-unit id="2231e02df58e07096e144b5dd37896c98561a1ce" translate="yes" xml:space="preserve">
          <source>System.Directory.Internal</source>
          <target state="translated">System.Directory.Internal</target>
        </trans-unit>
        <trans-unit id="bf7d731a3526683fd629e32ccc3301b8cd716809" translate="yes" xml:space="preserve">
          <source>System.Directory.Internal.Prelude</source>
          <target state="translated">System.Directory.Internal.Prelude</target>
        </trans-unit>
        <trans-unit id="e21d345f344bfeaa3d9d66b3283c404541cdc3c0" translate="yes" xml:space="preserve">
          <source>System.Environment</source>
          <target state="translated">System.Environment</target>
        </trans-unit>
        <trans-unit id="0682f5d14b13bf07429dea7469e3c899f29deabf" translate="yes" xml:space="preserve">
          <source>System.Environment.Blank</source>
          <target state="translated">System.Environment.Blank</target>
        </trans-unit>
        <trans-unit id="6953b81e8a3a09467269ca7c82603f7cd5beec76" translate="yes" xml:space="preserve">
          <source>System.Exit</source>
          <target state="translated">System.Exit</target>
        </trans-unit>
        <trans-unit id="d08a9c01ae30c3d75533db9568bfa6bd75ed9d5a" translate="yes" xml:space="preserve">
          <source>System.FilePath.Posix</source>
          <target state="translated">System.FilePath.Posix</target>
        </trans-unit>
        <trans-unit id="9345ab5d2c1dc96d733c628fcb0d3f1eafabe3db" translate="yes" xml:space="preserve">
          <source>System.FilePath.Windows</source>
          <target state="translated">System.FilePath.Windows</target>
        </trans-unit>
        <trans-unit id="e506c53144a5eb9430973dbf3945a01b65e458c8" translate="yes" xml:space="preserve">
          <source>System.IO</source>
          <target state="translated">System.IO</target>
        </trans-unit>
        <trans-unit id="f14994a07ba5c1fead4e1586350fd2f9f21b59ac" translate="yes" xml:space="preserve">
          <source>System.IO.Error</source>
          <target state="translated">System.IO.Error</target>
        </trans-unit>
        <trans-unit id="e6c221935a69c687e42cd4035eb242d37e0bc15d" translate="yes" xml:space="preserve">
          <source>System.IO.Unsafe</source>
          <target state="translated">System.IO.Unsafe</target>
        </trans-unit>
        <trans-unit id="4419a80c9771611849683123ba04940c8af31934" translate="yes" xml:space="preserve">
          <source>System.Info</source>
          <target state="translated">System.Info</target>
        </trans-unit>
        <trans-unit id="3617a3cadbc5a5ec3cfc9d65ecc01945d52eb407" translate="yes" xml:space="preserve">
          <source>System.Mem</source>
          <target state="translated">System.Mem</target>
        </trans-unit>
        <trans-unit id="6c9fd4d2bf1355b803db6cbe5d56252ee1742a6f" translate="yes" xml:space="preserve">
          <source>System.Mem.StableName</source>
          <target state="translated">System.Mem.StableName</target>
        </trans-unit>
        <trans-unit id="ac63ef484f855a177f2a757712147bfca196e486" translate="yes" xml:space="preserve">
          <source>System.Mem.Weak</source>
          <target state="translated">System.Mem.Weak</target>
        </trans-unit>
        <trans-unit id="ff9de231a8350dc1875fefc39446441429733a49" translate="yes" xml:space="preserve">
          <source>System.Posix</source>
          <target state="translated">System.Posix</target>
        </trans-unit>
        <trans-unit id="3cf8346d50b6c4a7d2803333b7d5081b7651d6d0" translate="yes" xml:space="preserve">
          <source>System.Posix.ByteString</source>
          <target state="translated">System.Posix.ByteString</target>
        </trans-unit>
        <trans-unit id="615b349e99f89ae638c9bbfee8d35110bc55e372" translate="yes" xml:space="preserve">
          <source>System.Posix.ByteString.FilePath</source>
          <target state="translated">System.Posix.ByteString.FilePath</target>
        </trans-unit>
        <trans-unit id="839c186633a65e67330b131f125358fae81aa060" translate="yes" xml:space="preserve">
          <source>System.Posix.Directory</source>
          <target state="translated">System.Posix.Directory</target>
        </trans-unit>
        <trans-unit id="5a3b5e49d6b16b646df6df41ead9202c77b9bef0" translate="yes" xml:space="preserve">
          <source>System.Posix.Directory.ByteString</source>
          <target state="translated">System.Posix.Directory.ByteString</target>
        </trans-unit>
        <trans-unit id="bca5aa52215960fa4b05ae4e363825a04f9aa221" translate="yes" xml:space="preserve">
          <source>System.Posix.DynamicLinker</source>
          <target state="translated">System.Posix.DynamicLinker</target>
        </trans-unit>
        <trans-unit id="77f11246dec1a6540247cbe70a18bcc1f279f73d" translate="yes" xml:space="preserve">
          <source>System.Posix.DynamicLinker.ByteString</source>
          <target state="translated">System.Posix.DynamicLinker.ByteString</target>
        </trans-unit>
        <trans-unit id="eb9f2c4c4cf862c1683a5ce26af6cc931dacac14" translate="yes" xml:space="preserve">
          <source>System.Posix.DynamicLinker.Prim</source>
          <target state="translated">System.Posix.DynamicLinker.Prim</target>
        </trans-unit>
        <trans-unit id="7012264b990a89bac3be5d6ca05099972d043ade" translate="yes" xml:space="preserve">
          <source>System.Posix.Env</source>
          <target state="translated">System.Posix.Env</target>
        </trans-unit>
        <trans-unit id="d85b248583f751494f8005b88043518e74818eb6" translate="yes" xml:space="preserve">
          <source>System.Posix.Env.ByteString</source>
          <target state="translated">System.Posix.Env.ByteString</target>
        </trans-unit>
        <trans-unit id="9d076155d3a24a5f2de23d788d4abcd046d5e3ae" translate="yes" xml:space="preserve">
          <source>System.Posix.Error</source>
          <target state="translated">System.Posix.Error</target>
        </trans-unit>
        <trans-unit id="fd09872967b2ac3194c5fc4696d20d385a7860cf" translate="yes" xml:space="preserve">
          <source>System.Posix.Fcntl</source>
          <target state="translated">System.Posix.Fcntl</target>
        </trans-unit>
        <trans-unit id="8b9dfa6855c09b97391250383b5e8b726a1e9368" translate="yes" xml:space="preserve">
          <source>System.Posix.Files</source>
          <target state="translated">System.Posix.Files</target>
        </trans-unit>
        <trans-unit id="3f16b041c6b93909cffec51a79153fc2127e2847" translate="yes" xml:space="preserve">
          <source>System.Posix.Files.ByteString</source>
          <target state="translated">System.Posix.Files.ByteString</target>
        </trans-unit>
        <trans-unit id="22826d441bec239829da5b7727f84d6d3b1133c0" translate="yes" xml:space="preserve">
          <source>System.Posix.IO</source>
          <target state="translated">System.Posix.IO</target>
        </trans-unit>
        <trans-unit id="18c8e2232b9cdd0cf3ebd5fa88f48eca9614e2e6" translate="yes" xml:space="preserve">
          <source>System.Posix.IO.ByteString</source>
          <target state="translated">System.Posix.IO.ByteString</target>
        </trans-unit>
        <trans-unit id="0e75686cfcd84fcb1d09bd17aae8a371c23e513a" translate="yes" xml:space="preserve">
          <source>System.Posix.Process</source>
          <target state="translated">System.Posix.Process</target>
        </trans-unit>
        <trans-unit id="a2480310db25045522aaedbac979f4e3b09ed4f7" translate="yes" xml:space="preserve">
          <source>System.Posix.Process.ByteString</source>
          <target state="translated">System.Posix.Process.ByteString</target>
        </trans-unit>
        <trans-unit id="3d04fba1f9cd86e6a65d2fe8eeafe107cd69e871" translate="yes" xml:space="preserve">
          <source>System.Posix.Resource</source>
          <target state="translated">System.Posix.Resource</target>
        </trans-unit>
        <trans-unit id="51c71a3d3a66769026e6df46a54a73309e13f961" translate="yes" xml:space="preserve">
          <source>System.Posix.Semaphore</source>
          <target state="translated">System.Posix.Semaphore</target>
        </trans-unit>
        <trans-unit id="ac81966f5a16d6c1c0e69ed22750af2629c3fae8" translate="yes" xml:space="preserve">
          <source>System.Posix.SharedMem</source>
          <target state="translated">System.Posix.SharedMem</target>
        </trans-unit>
        <trans-unit id="3d33e9b08ac0cb85ad23dc6f05061d5b85066a26" translate="yes" xml:space="preserve">
          <source>System.Posix.Signals</source>
          <target state="translated">System.Posix.Signals</target>
        </trans-unit>
        <trans-unit id="bb04d0378c3bdc451f4e9aa993deb76622436b73" translate="yes" xml:space="preserve">
          <source>System.Posix.Temp</source>
          <target state="translated">System.Posix.Temp</target>
        </trans-unit>
        <trans-unit id="d0851806197ca7004c5d22b8345141db932aaaf7" translate="yes" xml:space="preserve">
          <source>System.Posix.Temp.ByteString</source>
          <target state="translated">System.Posix.Temp.ByteString</target>
        </trans-unit>
        <trans-unit id="b09408e86331461a71180d769c64b1a1e47eeb55" translate="yes" xml:space="preserve">
          <source>System.Posix.Terminal</source>
          <target state="translated">System.Posix.Terminal</target>
        </trans-unit>
        <trans-unit id="870614aa5a0cdaab31cb71eae42b2b0cb05f0acb" translate="yes" xml:space="preserve">
          <source>System.Posix.Terminal.ByteString</source>
          <target state="translated">System.Posix.Terminal.ByteString</target>
        </trans-unit>
        <trans-unit id="c0e3de00081dd59744fcaeb8b4867250ed4b1d63" translate="yes" xml:space="preserve">
          <source>System.Posix.Time</source>
          <target state="translated">System.Posix.Time</target>
        </trans-unit>
        <trans-unit id="65da21e1dd4c609c1a9f47d74327799512873aad" translate="yes" xml:space="preserve">
          <source>System.Posix.Types</source>
          <target state="translated">System.Posix.Types</target>
        </trans-unit>
        <trans-unit id="372a2b6602a17fa2360b51ad286e668b23423aba" translate="yes" xml:space="preserve">
          <source>System.Posix.Unistd</source>
          <target state="translated">System.Posix.Unistd</target>
        </trans-unit>
        <trans-unit id="34810d7b3b44d620826a9004dc0e5f29f8060ad2" translate="yes" xml:space="preserve">
          <source>System.Posix.User</source>
          <target state="translated">System.Posix.User</target>
        </trans-unit>
        <trans-unit id="2f1f00ef514b8a51d9e31107436a2fadecf66e3a" translate="yes" xml:space="preserve">
          <source>System.Process</source>
          <target state="translated">System.Process</target>
        </trans-unit>
        <trans-unit id="3674625325b086997e3b8bdb4b942a52193dbf8d" translate="yes" xml:space="preserve">
          <source>System.Process.Internals</source>
          <target state="translated">System.Process.Internals</target>
        </trans-unit>
        <trans-unit id="f1d0016b14caeb58ea97185a11bffc8f1b11451e" translate="yes" xml:space="preserve">
          <source>System.Timeout</source>
          <target state="translated">System.Timeout</target>
        </trans-unit>
        <trans-unit id="fa140aad200d97695f84bf85abb63a17293dd672" translate="yes" xml:space="preserve">
          <source>System.Win32</source>
          <target state="translated">System.Win32</target>
        </trans-unit>
        <trans-unit id="414f69cf4731ac1ba88cdb13dba547656cf1b29c" translate="yes" xml:space="preserve">
          <source>System.Win32.Automation.Input</source>
          <target state="translated">System.Win32.Automation.Input</target>
        </trans-unit>
        <trans-unit id="75709f84f78171e47b532b82a0fbbe8bc1e08692" translate="yes" xml:space="preserve">
          <source>System.Win32.Console</source>
          <target state="translated">System.Win32.Console</target>
        </trans-unit>
        <trans-unit id="5d3b2aa714514fda846675252ec6852b1e3d17f9" translate="yes" xml:space="preserve">
          <source>System.Win32.Console.CtrlHandler</source>
          <target state="translated">System.Win32.Console.CtrlHandler</target>
        </trans-unit>
        <trans-unit id="f096899037f3e974d013f5997b2831c5300d2cb1" translate="yes" xml:space="preserve">
          <source>System.Win32.Console.HWND</source>
          <target state="translated">System.Win32.Console.HWND</target>
        </trans-unit>
        <trans-unit id="41a35e001877340a7eb5d9fc7e67e59fe2abb4cc" translate="yes" xml:space="preserve">
          <source>System.Win32.Encoding</source>
          <target state="translated">System.Win32.Encoding</target>
        </trans-unit>
        <trans-unit id="66112b6d5cadbf608f5cd52ef12708bb3b252bc2" translate="yes" xml:space="preserve">
          <source>System.Win32.File</source>
          <target state="translated">System.Win32.File</target>
        </trans-unit>
        <trans-unit id="2095f23b33e7b9883a33cd535b5a08c23ad182d2" translate="yes" xml:space="preserve">
          <source>System.Win32.FileMapping</source>
          <target state="translated">System.Win32.FileMapping</target>
        </trans-unit>
        <trans-unit id="d73afd581990396c86d0f828e422efce382953f7" translate="yes" xml:space="preserve">
          <source>System.Win32.HardLink</source>
          <target state="translated">System.Win32.HardLink</target>
        </trans-unit>
        <trans-unit id="ad3fe0641322a90efb9d6f6bcc1b642f286a6068" translate="yes" xml:space="preserve">
          <source>System.Win32.Info.Computer</source>
          <target state="translated">System.Win32.Info.Computer</target>
        </trans-unit>
        <trans-unit id="e7cbd6f609063d2fbbea58646f57624041dc6fa9" translate="yes" xml:space="preserve">
          <source>System.Win32.Info.Version</source>
          <target state="translated">System.Win32.Info.Version</target>
        </trans-unit>
        <trans-unit id="b3bf2730645f2e3a415e64c3d5d248b5dc815140" translate="yes" xml:space="preserve">
          <source>System.Win32.MinTTY</source>
          <target state="translated">System.Win32.MinTTY</target>
        </trans-unit>
        <trans-unit id="e6d32a80127bc26de0ea4f3f6100d936dbac372e" translate="yes" xml:space="preserve">
          <source>System.Win32.NLS</source>
          <target state="translated">System.Win32.NLS</target>
        </trans-unit>
        <trans-unit id="773e9bbcf1f71ef20e54313cffbf86abf337dc71" translate="yes" xml:space="preserve">
          <source>System.Win32.Process</source>
          <target state="translated">System.Win32.Process</target>
        </trans-unit>
        <trans-unit id="923aeaa600aee8a79d1f2ddee37447444712bc2a" translate="yes" xml:space="preserve">
          <source>System.Win32.Security</source>
          <target state="translated">System.Win32.Security</target>
        </trans-unit>
        <trans-unit id="60a4407d0e475e148aadd205cc69e995817d6bcc" translate="yes" xml:space="preserve">
          <source>System.Win32.SimpleMAPI</source>
          <target state="translated">System.Win32.SimpleMAPI</target>
        </trans-unit>
        <trans-unit id="4413d5194e6ad6774ef578e46350e454f43dbdc7" translate="yes" xml:space="preserve">
          <source>System.Win32.String</source>
          <target state="translated">System.Win32.String</target>
        </trans-unit>
        <trans-unit id="9f1c463c538ca39643a8017b215c963a6f077f2f" translate="yes" xml:space="preserve">
          <source>System.Win32.SymbolicLink</source>
          <target state="translated">System.Win32.SymbolicLink</target>
        </trans-unit>
        <trans-unit id="cd93fa66a20bf4df736ed9cc81adf625096902ac" translate="yes" xml:space="preserve">
          <source>System.Win32.Types</source>
          <target state="translated">System.Win32.Types</target>
        </trans-unit>
        <trans-unit id="1a22699e906f0cbad54a648440b242757ba8bd85" translate="yes" xml:space="preserve">
          <source>System.Win32.Utils</source>
          <target state="translated">System.Win32.Utils</target>
        </trans-unit>
        <trans-unit id="47e68638ef3b94e3c34563e1179f97e827fb9bec" translate="yes" xml:space="preserve">
          <source>SystemError</source>
          <target state="translated">SystemError</target>
        </trans-unit>
        <trans-unit id="268b2a7b07a0ad87688e0007102a12e89748562a" translate="yes" xml:space="preserve">
          <source>SystemID</source>
          <target state="translated">SystemID</target>
        </trans-unit>
        <trans-unit id="cf2a95ca758b8bdeeb2ecf600f0df3a984af4e8f" translate="yes" xml:space="preserve">
          <source>SystemTime</source>
          <target state="translated">SystemTime</target>
        </trans-unit>
        <trans-unit id="851bce85512645682970d2b5fe17d9d43c9de283" translate="yes" xml:space="preserve">
          <source>Systems such as information flow control security, capability based security systems and DSLs for working with encrypted data.. etc can be built in the Haskell language as a library. However they require guarantees about the properties of Haskell that aren&amp;rsquo;t true in general due to the presence of functions like &lt;code&gt;unsafePerformIO&lt;/code&gt;. Safe Haskell gives users enough guarantees about the type system to allow them to build such secure systems.</source>
          <target state="translated">정보 흐름 제어 보안, 기능 기반 보안 시스템 및 암호화 된 데이터 작업을위한 DSL 등의 시스템을 Haskell 언어로 라이브러리로 구축 할 수 있습니다. 그러나 &lt;code&gt;unsafePerformIO&lt;/code&gt; 와 같은 함수가 있기 때문에 일반적으로 사실이 아닌 Haskell의 속성에 대한 보증이 필요합니다 . Safe Haskell은 유형 시스템에 대해 충분한 보안 시스템을 구축 할 수 있도록 충분한 보증을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="74319ad714357112b950fcacee0295caa8b354ea" translate="yes" xml:space="preserve">
          <source>TAI - UTC during this day. No table is provided, as any program compiled with it would become out of date in six months.</source>
          <target state="translated">TAI-이 날짜의 UTC 이 프로그램으로 컴파일 된 프로그램이 6 개월 후에 만료 될 수 있으므로 테이블이 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1727e72b5c5ad211de6825534794a74df1a1a413" translate="yes" xml:space="preserve">
          <source>TAI and leap-second maps for converting to UTC: most people won't need this module.</source>
          <target state="translated">UTC로 변환하기위한 TAI 및 윤초지도 : 대부분의 사람들은이 모듈이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9b62e74d4806b8741ec136d2ab4f7a33bba92e70" translate="yes" xml:space="preserve">
          <source>TAI clock, if it exists. Note that it is unlikely to be set correctly, without due care and attention.</source>
          <target state="translated">존재하는 경우 TAI 시계. 주의를 기울이지 않고 올바르게 설정하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea7d3c18994e2490c462241ebe25179ce7ebd3bc" translate="yes" xml:space="preserve">
          <source>TArray</source>
          <target state="translated">TArray</target>
        </trans-unit>
        <trans-unit id="c84c024ccfb745d3cd171eb6af01cfd3bc8684cb" translate="yes" xml:space="preserve">
          <source>TArray is a transactional array, supporting the usual &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; interface for mutable arrays.</source>
          <target state="translated">TArray는 트랜잭션 배열로, 가변 배열에 대한 일반적인 &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array-marray#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; 인터페이스를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="10f16ce6fbbc23c8f857fdac0d27ba4eb31ec913" translate="yes" xml:space="preserve">
          <source>TBQueue</source>
          <target state="translated">TBQueue</target>
        </trans-unit>
        <trans-unit id="1eb5affcfc085f437d0186c927dcc74b9e2e4fbb" translate="yes" xml:space="preserve">
          <source>TCHAR</source>
          <target state="translated">TCHAR</target>
        </trans-unit>
        <trans-unit id="fda90d9eef3786d8353f1a1a0101c2994f16dc3e" translate="yes" xml:space="preserve">
          <source>TCIOFF</source>
          <target state="translated">TCIOFF</target>
        </trans-unit>
        <trans-unit id="33b459f201eb7b79961025dfa1eb8056af66b395" translate="yes" xml:space="preserve">
          <source>TCION</source>
          <target state="translated">TCION</target>
        </trans-unit>
        <trans-unit id="91b82e688ad4a91a8f8d35942bfb1b0267a2bc12" translate="yes" xml:space="preserve">
          <source>TCOOFF</source>
          <target state="translated">TCOOFF</target>
        </trans-unit>
        <trans-unit id="458745b27d48d51cbe1818f94471b17912d468ed" translate="yes" xml:space="preserve">
          <source>TCOON</source>
          <target state="translated">TCOON</target>
        </trans-unit>
        <trans-unit id="b0b62257759bc2acc58f041228bc720d599dfd23" translate="yes" xml:space="preserve">
          <source>TChan</source>
          <target state="translated">TChan</target>
        </trans-unit>
        <trans-unit id="9d004963a17f54a22663ca06e4dc245e834f954b" translate="yes" xml:space="preserve">
          <source>TChans</source>
          <target state="translated">TChans</target>
        </trans-unit>
        <trans-unit id="f78b01a61a63053d8f5ba0765d223c8c30a0c824" translate="yes" xml:space="preserve">
          <source>TEMP environment variable.</source>
          <target state="translated">TEMP 환경 변수.</target>
        </trans-unit>
        <trans-unit id="77d01d4400641cd13772b447d053178042a5b9f8" translate="yes" xml:space="preserve">
          <source>TExp</source>
          <target state="translated">TExp</target>
        </trans-unit>
        <trans-unit id="ffc50102cf77faab4bd8d11769fb4a9db711a702" translate="yes" xml:space="preserve">
          <source>TExpQ</source>
          <target state="translated">TExpQ</target>
        </trans-unit>
        <trans-unit id="bf532ec46446db37cd9e4a9a9e0a0ca2b9cf4069" translate="yes" xml:space="preserve">
          <source>THAnnWrapper</source>
          <target state="translated">THAnnWrapper</target>
        </trans-unit>
        <trans-unit id="038851b817b9b84caf352b988e893435568ae800" translate="yes" xml:space="preserve">
          <source>THDec</source>
          <target state="translated">THDec</target>
        </trans-unit>
        <trans-unit id="badeede43ed54cb619ce6c3b76094dd5c7488268" translate="yes" xml:space="preserve">
          <source>THExp</source>
          <target state="translated">THExp</target>
        </trans-unit>
        <trans-unit id="ea60d3ac9972fdc020e7c91d19f18f48686c8c5a" translate="yes" xml:space="preserve">
          <source>THMessage</source>
          <target state="translated">THMessage</target>
        </trans-unit>
        <trans-unit id="dff6bb8e59ff4feee5b2c3a461ab059b8e32e9ea" translate="yes" xml:space="preserve">
          <source>THMsg</source>
          <target state="translated">THMsg</target>
        </trans-unit>
        <trans-unit id="2a19baa88a31d713903f96a9d03e694a78c0eb00" translate="yes" xml:space="preserve">
          <source>THPat</source>
          <target state="translated">THPat</target>
        </trans-unit>
        <trans-unit id="aaa0285fa41dd2a2d13544b874effeb1204519cb" translate="yes" xml:space="preserve">
          <source>THResult</source>
          <target state="translated">THResult</target>
        </trans-unit>
        <trans-unit id="f80a9d51dc48677f6d6e0e07a50d560ec6c5a50c" translate="yes" xml:space="preserve">
          <source>THResultType</source>
          <target state="translated">THResultType</target>
        </trans-unit>
        <trans-unit id="f1239fbccf0f921ceee38368839375fffd40c686" translate="yes" xml:space="preserve">
          <source>THType</source>
          <target state="translated">THType</target>
        </trans-unit>
        <trans-unit id="9f8f499f0f42ab20ff0659d3dce21f141749ef81" translate="yes" xml:space="preserve">
          <source>TMP environment variable.</source>
          <target state="translated">TMP 환경 변수.</target>
        </trans-unit>
        <trans-unit id="1ed48a41abbc149594d26db97fa4773fef889eb2" translate="yes" xml:space="preserve">
          <source>TMVar</source>
          <target state="translated">TMVar</target>
        </trans-unit>
        <trans-unit id="977a7d57f19d844873125a2f1ca576764e2a543e" translate="yes" xml:space="preserve">
          <source>TMVars</source>
          <target state="translated">TMVars</target>
        </trans-unit>
        <trans-unit id="b698c11e84460ed5999bfeb5cbf25b865c238f3c" translate="yes" xml:space="preserve">
          <source>TODO</source>
          <target state="translated">TODO</target>
        </trans-unit>
        <trans-unit id="5189c0462a327407842c657829fb8cfcdcee04ca" translate="yes" xml:space="preserve">
          <source>TQList</source>
          <target state="translated">TQList</target>
        </trans-unit>
        <trans-unit id="c9f4ed3ab0090df5294277bfc9635ecd16c9294d" translate="yes" xml:space="preserve">
          <source>TQNil</source>
          <target state="translated">TQNil</target>
        </trans-unit>
        <trans-unit id="5e8112b9bc7d573e0132a346e4f69b74ded60a70" translate="yes" xml:space="preserve">
          <source>TQueue</source>
          <target state="translated">TQueue</target>
        </trans-unit>
        <trans-unit id="33e8a7fb34109ea263f4e125202073824c4c8b68" translate="yes" xml:space="preserve">
          <source>TSem</source>
          <target state="translated">TSem</target>
        </trans-unit>
        <trans-unit id="4464b8e4a039bf6559ad424da8e3e745adcd64af" translate="yes" xml:space="preserve">
          <source>TVar</source>
          <target state="translated">TVar</target>
        </trans-unit>
        <trans-unit id="d2c1f866346f095c2573a4945b2e554e4287937b" translate="yes" xml:space="preserve">
          <source>TVar#</source>
          <target state="translated">TVar#</target>
        </trans-unit>
        <trans-unit id="ea0172c0f81612a2096348aa35563dc56d777a10" translate="yes" xml:space="preserve">
          <source>TVars</source>
          <target state="translated">TVars</target>
        </trans-unit>
        <trans-unit id="6e9816a8e9d0388eecdb52866188c04e75e4b1b3" translate="yes" xml:space="preserve">
          <source>TYPE</source>
          <target state="translated">TYPE</target>
        </trans-unit>
        <trans-unit id="8b7a73938e078907cbcaa328110155ded5994f28" translate="yes" xml:space="preserve">
          <source>Tab stops are the size of a tab in the provided &lt;em&gt;line:column&lt;/em&gt; values.</source>
          <target state="translated">탭 정지는 제공된 &lt;em&gt;행 : 열&lt;/em&gt; 값 의 탭 크기입니다 .</target>
        </trans-unit>
        <trans-unit id="0424f6e7026fa4bc2c4a7043083417315113c79b" translate="yes" xml:space="preserve">
          <source>Table</source>
          <target state="translated">Table</target>
        </trans-unit>
        <trans-unit id="78f5f5dd09ff7a5e934419029673c218534f2b15" translate="yes" xml:space="preserve">
          <source>Table combinators for XHTML.</source>
          <target state="translated">XHTML 용 테이블 조합기.</target>
        </trans-unit>
        <trans-unit id="80d8dd8f19975ebde18e5655c0adff4ea370a112" translate="yes" xml:space="preserve">
          <source>Table indexed by a contiguous set of vertices.</source>
          <target state="translated">연속 정점 세트로 인덱스 된 테이블.</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="3c85b45a7de3b7201de5d83d204a225914dd2b80" translate="yes" xml:space="preserve">
          <source>Tag for K1: recursion (of kind &lt;code&gt;Type&lt;/code&gt;)</source>
          <target state="translated">K1에 대한 태그 : 재귀 (종류 &lt;code&gt;Type&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="e972fe06be2cdde81f3a01b7d99768480021a3c4" translate="yes" xml:space="preserve">
          <source>Tag for M1: constructor</source>
          <target state="translated">M1 태그 : 생성자</target>
        </trans-unit>
        <trans-unit id="592655fa52c225437f9b7c4bff055c1860aa44b8" translate="yes" xml:space="preserve">
          <source>Tag for M1: datatype</source>
          <target state="translated">M1에 대한 태그 : 데이터 유형</target>
        </trans-unit>
        <trans-unit id="13d0d11f8436482da878107e6ab575c238f46af8" translate="yes" xml:space="preserve">
          <source>Tag for M1: record selector</source>
          <target state="translated">M1 용 태그 : 레코드 선택기</target>
        </trans-unit>
        <trans-unit id="fa463232bf447f8bacd0d6f66b5937149f02d14f" translate="yes" xml:space="preserve">
          <source>TaggedQueue</source>
          <target state="translated">TaggedQueue</target>
        </trans-unit>
        <trans-unit id="80af165ded52eb5f823b06e8e7198b1e25fbc5da" translate="yes" xml:space="preserve">
          <source>Take a FilePath and make it valid; does not change already valid FilePaths.</source>
          <target state="translated">FilePath를 가져 와서 유효하게하십시오. 이미 유효한 FilePath를 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a723fc39dcf4377dc0d11aafd6f849c739325aa" translate="yes" xml:space="preserve">
          <source>Take a given number of elements in order, beginning with the smallest ones.</source>
          <target state="translated">가장 작은 것부터 시작하여 주어진 수의 요소를 순서대로 가져갑니다.</target>
        </trans-unit>
        <trans-unit id="430d666fb3c9c0e08a2be91c56b9433434f51150" translate="yes" xml:space="preserve">
          <source>Take a given number of entries in key order, beginning with the smallest keys.</source>
          <target state="translated">가장 작은 키부터 시작하여 키 순서대로 지정된 수의 항목을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="9587c5ae4ea1a4fbd4bab86f98fb889083a0db82" translate="yes" xml:space="preserve">
          <source>Take a string, split it on the &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; character. Blank items are ignored on Windows, and converted to &lt;code&gt;.&lt;/code&gt; on Posix. On Windows path elements are stripped of quotes.</source>
          <target state="translated">문자열을 취해 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; 문자로 분할하십시오 . 빈 항목은 Windows에서 무시되고로 변환됩니다 &lt;code&gt;.&lt;/code&gt; Posix에. Windows에서 경로 요소는 따옴표가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="80240e9aba0721fddd38fea701f84cdb2e1f6e0b" translate="yes" xml:space="preserve">
          <source>Take a string, split it on the &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; character. Blank items are ignored on Windows, and converted to &lt;code&gt;.&lt;/code&gt; on Posix. On Windows path elements are stripped of quotes.</source>
          <target state="translated">문자열을 취해 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:searchPathSeparator&quot;&gt;searchPathSeparator&lt;/a&gt;&lt;/code&gt; 문자로 분할하십시오 . 빈 항목은 Windows에서 무시되고로 변환됩니다 &lt;code&gt;.&lt;/code&gt; Posix에. Windows에서 경로 요소는 따옴표가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="1d8280d5e368da252b3055a1416972cdcbb48aa9" translate="yes" xml:space="preserve">
          <source>Take a value from an &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, put a new value into the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; and return the value taken. This function is atomic only if there are no other producers for this &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">에서 값을 가지고 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 의에 새 값을 넣어 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 하고 촬영 한 값을 반환합니다. 이 기능은이 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 에 대한 다른 생산자가없는 경우에만 원자 적 입니다.</target>
        </trans-unit>
        <trans-unit id="8bddc3bc632e48c7b7df71bdce026a23e42c19ce" translate="yes" xml:space="preserve">
          <source>Take, for example,</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="7004c356a6391cdc61b111e2dfbd22378fd51474" translate="yes" xml:space="preserve">
          <source>Take, for example, the following program</source>
          <target state="translated">예를 들어, 다음 프로그램을 보자</target>
        </trans-unit>
        <trans-unit id="4397c207b3f93f72f76adcda5a12f1ef685122e8" translate="yes" xml:space="preserve">
          <source>Takes a value of type &lt;code&gt;a&lt;/code&gt; and returns a concrete representation of that type.</source>
          <target state="translated">유형 &lt;code&gt;a&lt;/code&gt; 의 값을 가져와 해당 유형의 구체적인 표현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="9c14b0726bc4a4cfe19a274b23d1058099f497a9" translate="yes" xml:space="preserve">
          <source>Takes an array and a list of pairs and returns an array identical to the left argument except that it has been updated by the associations in the right argument. For example, if m is a 1-origin, n by n matrix, then &lt;code&gt;m//[((i,i), 0) | i &amp;lt;- [1..n]]&lt;/code&gt; is the same matrix, except with the diagonal zeroed.</source>
          <target state="translated">배열과 쌍의 목록을 가져 와서 오른쪽 인수의 연관에 의해 업데이트 된 것을 제외하고 왼쪽 인수와 동일한 배열을 리턴합니다. 예를 들어, m이 1- 원점이고 n이 n 행렬 인 경우 &lt;code&gt;m//[((i,i), 0) | i &amp;lt;- [1..n]]&lt;/code&gt; 은 대각선이 0 인 것을 제외하고는 동일한 행렬입니다.</target>
        </trans-unit>
        <trans-unit id="a81c08f0a558b2cdb54cb75a7570aa71433fb35d" translate="yes" xml:space="preserve">
          <source>Target byte ordering.</source>
          <target state="translated">대상 바이트 순서.</target>
        </trans-unit>
        <trans-unit id="2212c7b535f766ed5f3dc0a2d491cf1267e6dc5e" translate="yes" xml:space="preserve">
          <source>Target file path</source>
          <target state="translated">대상 파일 경로</target>
        </trans-unit>
        <trans-unit id="478d30d8174645ac8285e3dd15ce42c3543a6834" translate="yes" xml:space="preserve">
          <source>TcClsName</source>
          <target state="translated">TcClsName</target>
        </trans-unit>
        <trans-unit id="e4e0aabcee25a85a81c328ace4a61f66b1899623" translate="yes" xml:space="preserve">
          <source>Tear down the active &lt;a href=&quot;#c.EventLogWriter&quot;&gt;&lt;code&gt;EventLogWriter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">활성 &lt;a href=&quot;#c.EventLogWriter&quot;&gt; &lt;code&gt;EventLogWriter&lt;/code&gt; 를&lt;/a&gt; 분해합니다 .</target>
        </trans-unit>
        <trans-unit id="56829ff154bdc1bf9f3f2d63d8359c01ea11c05e" translate="yes" xml:space="preserve">
          <source>Technically in Haskell 2010 this is illegal:</source>
          <target state="translated">기술적으로 Haskell 2010에서는 불법입니다.</target>
        </trans-unit>
        <trans-unit id="16afc18c8983601b01eddd4bfffa7ba0a0a2c738" translate="yes" xml:space="preserve">
          <source>Tell a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; that there is no more input. This passes &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; decoder, otherwise returns the decoder unchanged.</source>
          <target state="translated">더 이상 입력이 없다고 &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; 알리십시오 . 이것은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;data-binary-get#v:Partial&quot;&gt;Partial&lt;/a&gt;&lt;/code&gt; decoder에 전달 하고 , 그렇지 않으면 디코더를 변경하지 않고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6af5e03d501c4ea227683a7b31027dcfffc9e0f7" translate="yes" xml:space="preserve">
          <source>Tell the linker to avoid shared Haskell libraries, if possible. This is the default.</source>
          <target state="translated">가능한 경우 링커에게 공유 Haskell 라이브러리를 피하도록 지시하십시오. 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="bbc0aca55dd018fd5970b62abe8e150fd79f9ab2" translate="yes" xml:space="preserve">
          <source>Tell the linker to split the single object file that would normally be generated into multiple object files, one per top-level Haskell function or type in the module. This only makes sense for libraries, where it means that executables linked against the library are smaller as they only link against the object files that they need. However, assembling all the sections separately is expensive, so this is slower than compiling normally. Additionally, the size of the library itself (the &lt;code&gt;.a&lt;/code&gt; file) can be a factor of 2 to 2.5 larger.</source>
          <target state="translated">링커에게 일반적으로 생성되는 단일 객체 파일을 최상위 Haskell 함수 또는 모듈의 유형별로 하나씩 여러 객체 파일로 분할하도록 지시합니다. 라이브러리에만 적합합니다. 라이브러리에 연결된 실행 파일은 필요한 개체 파일에 대해서만 링크되므로 크기가 작습니다. 그러나 모든 섹션을 개별적으로 조립하는 것은 비용이 많이 들기 때문에 정상적으로 컴파일하는 것보다 느립니다. 또한 라이브러리 자체 ( &lt;code&gt;.a&lt;/code&gt; 파일) 의 크기 는 2 ~ 2.5 배 더 클 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76ed640ba01abb6ba7a1c2453ca7124d9760be5f" translate="yes" xml:space="preserve">
          <source>Tells GHC not to collect information about how often functions are entered at runtime (the &amp;ldquo;entries&amp;rdquo; column of the time profile), for this module. This tends to make the profiled code run faster, and hence closer to the speed of the unprofiled code, because GHC is able to optimise more aggressively if it doesn&amp;rsquo;t have to maintain correct entry counts. This option can be useful if you aren&amp;rsquo;t interested in the entry counts (for example, if you only intend to do heap profiling).</source>
          <target state="translated">이 모듈에 대해 런타임에 기능이 입력되는 빈도 (시간 프로필의 &quot;항목&quot;열)에 대한 정보를 GHC에 수집하지 않도록 지시합니다. 이것은 GHC가 정확한 엔트리 수를 유지할 필요가 없다면 GHC가 더욱 적극적으로 최적화 할 수 있기 때문에 프로파일 링 된 코드가 더 빨리 실행되게하고 프로파일 링되지 않은 코드의 속도에 더 가깝게 만드는 경향이 있습니다. 이 옵션은 항목 수에 관심이없는 경우 (예 : 힙 프로파일 링 만 수행하려는 경우) 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16a08220f8dfb558172d312872b55f0316d3cfa8" translate="yes" xml:space="preserve">
          <source>Tells GHC that the module being compiled forms part of unit ID ⟨unit-id⟩; internally, these keys are used to determine type equality and linker symbols. As of GHC 8.0, unit IDs must consist solely of alphanumeric characters, dashes, underscores and periods. GHC reserves the right to interpret other characters in a special way in later releases.</source>
          <target state="translated">GHC에게 컴파일되는 모듈이 유닛 ID ⟨unit-id⟩의 일부를 형성한다고 알려줍니다. 내부적으로 이러한 키는 형식 평등과 링커 기호를 결정하는 데 사용됩니다. GHC 8.0부터 장치 ID는 영숫자 문자, 대시, 밑줄 및 마침표로만 구성되어야합니다. GHC는 이후 릴리스에서 다른 문자를 특별한 방식으로 해석 할 권리를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="57fde8a4c38996e78f9476baf473c5f093c84804" translate="yes" xml:space="preserve">
          <source>Tells GHC to ignore all inessential information when reading interface files. That is, even if &lt;code&gt;M.hi&lt;/code&gt; contains unfolding or strictness information for a function, GHC will ignore that information.</source>
          <target state="translated">인터페이스 파일을 읽을 때 모든 필수 정보를 무시하도록 GHC에 지시합니다. 즉, &lt;code&gt;M.hi&lt;/code&gt; 에 기능에 대한 전개 또는 엄격 정보가 포함되어 있어도 GHC는 해당 정보를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="f49bc22458bf36f5d9ba2d83d0c8c50ed672a695" translate="yes" xml:space="preserve">
          <source>Tells GHC to omit all inessential information from the interface file generated for the module being compiled (say M). This means that a module importing M will see only the &lt;em&gt;types&lt;/em&gt; of the functions that M exports, but not their unfoldings, strictness info, etc. Hence, for example, no function exported by M will be inlined into an importing module. The benefit is that modules that import M will need to be recompiled less often (only when M&amp;rsquo;s exports change their type, not when they change their implementation).</source>
          <target state="translated">GHC에게 컴파일되는 모듈에 대해 생성 된 인터페이스 파일 (예 : M)에서 모든 필수 정보를 생략하도록 지시합니다. 즉, M을 가져 오는 모듈 은 M이 내보내는 기능 의 &lt;em&gt;유형&lt;/em&gt; 만 볼 수 있지만 전개, 엄격 정보 등은 볼 수 없습니다. 따라서 M에서 내 보낸 함수는 가져 오기 모듈에 인라인되지 않습니다. 이점은 M을 가져 오는 모듈을 덜 자주 다시 컴파일해야한다는 것입니다 (M의 내보내기가 구현을 변경할 때가 아니라 유형을 변경할 때만).</target>
        </trans-unit>
        <trans-unit id="ededfcf737f4c4553d987674c6464c6bd022107e" translate="yes" xml:space="preserve">
          <source>Tells GHC to omit heap checks when no allocation is being performed. While this improves binary sizes by about 5%, it also means that threads run in tight non-allocating loops will not get preempted in a timely fashion. If it is important to always be able to interrupt such threads, you should turn this optimization off. Consider also recompiling all libraries with this optimization turned off, if you need to guarantee interruptibility.</source>
          <target state="translated">할당이 수행되지 않을 때 힙 검사를 생략하도록 GHC에 지시합니다. 이것은 바이너리 크기를 약 5 % 향상시키는 반면, 비 할당되지 않은 (non-allocating) 루프에서 실행되는 스레드는 적시에 선점되지 않습니다. 이러한 스레드를 항상 중단 할 수 있어야하는 경우이 최적화를 해제해야합니다. 인터럽트 가능성을 보장해야하는 경우이 최적화를 끈 상태에서 모든 라이브러리를 다시 컴파일하는 것도 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="fce750875cd9a44b96f71a6caaa5492836a9bfeb" translate="yes" xml:space="preserve">
          <source>Tells the system whether or not to set the &lt;code&gt;SA_NOCLDSTOP&lt;/code&gt; flag when installing new signal handlers.</source>
          <target state="translated">새 신호 처리기를 설치할 때 &lt;code&gt;SA_NOCLDSTOP&lt;/code&gt; 플래그 를 설정할지 여부를 시스템에 알려줍니다 .</target>
        </trans-unit>
        <trans-unit id="ff437703677ef424e354947da194211739cafb40" translate="yes" xml:space="preserve">
          <source>Template Haskell allows you to do compile-time meta-programming in Haskell. The background to the main technical innovations is discussed in &amp;ldquo;&lt;a href=&quot;http://research.microsoft.com/~simonpj/papers/meta-haskell/&quot;&gt;Template Meta-programming for Haskell&lt;/a&gt;&amp;rdquo; (Proc Haskell Workshop 2002).</source>
          <target state="translated">Template Haskell을 사용하면 Haskell에서 컴파일 타임 메타 프로그래밍을 수행 할 수 있습니다. 주요 기술 혁신에 대한 배경은&amp;ldquo; &lt;a href=&quot;http://research.microsoft.com/~simonpj/papers/meta-haskell/&quot;&gt;Haskell의 템플릿 메타 프로그래밍&lt;/a&gt; &amp;rdquo;(Proc Haskell Workshop 2002)에서 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5a8aec726ed3125e3c09e3a3ff7b03d8c159f6e8" translate="yes" xml:space="preserve">
          <source>Template Haskell cannot know what the argument to &lt;code&gt;add1&lt;/code&gt; will be at the function&amp;rsquo;s definition site, so a lifting mechanism is used to promote &lt;code&gt;x&lt;/code&gt; into a value of type &lt;code&gt;Q Exp&lt;/code&gt;. This functionality is exposed to the user as the &lt;code&gt;Lift&lt;/code&gt; typeclass in the &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; module. If a type has a &lt;code&gt;Lift&lt;/code&gt; instance, then any of its values can be lifted to a Template Haskell expression:</source>
          <target state="translated">템플리트 Haskell은 &lt;code&gt;add1&lt;/code&gt; 에 대한 인수가 함수의 정의 사이트에 어떤 것인지 알 수 없으므로 &lt;code&gt;x&lt;/code&gt; 를 &lt;code&gt;Q Exp&lt;/code&gt; 유형의 값으로 승격시키기 위해 리프팅 메커니즘이 사용됩니다 . 이 기능은 &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; 모듈 에서 &lt;code&gt;Lift&lt;/code&gt; 유형 클래스 로 사용자에게 노출됩니다 . 유형에 &lt;code&gt;Lift&lt;/code&gt; 인스턴스 가있는 경우 해당 값 중 하나를 Template Haskell 표현식으로 들어 올릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bfc14e4c55c321d42934a17794446d7262b8922" translate="yes" xml:space="preserve">
          <source>Template Haskell has no way of knowing what value &lt;code&gt;x&lt;/code&gt; will take on at splice-time, so it requires the type of &lt;code&gt;x&lt;/code&gt; to be an instance of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">템플릿 하스켈 값이 무엇인지 알 수있는 방법이 없습니다 &lt;code&gt;x&lt;/code&gt; 는 그것의 유형을 필요로하므로, 스플 라이스 시간에 걸릴 것 &lt;code&gt;x&lt;/code&gt; 의 인스턴스로 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa5b11adaee119e29f46852dbeadbc40dddb30de" translate="yes" xml:space="preserve">
          <source>Template Haskell has the following new syntactic constructions. You need to use the extension &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; to switch these syntactic extensions on. Alternatively, the &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt;&lt;code&gt;TemplateHaskellQuotes&lt;/code&gt;&lt;/a&gt; extension can be used to enable the quotation subset of Template Haskell (i.e. without splice syntax). The &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt;&lt;code&gt;TemplateHaskellQuotes&lt;/code&gt;&lt;/a&gt; extension is considered safe under &lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;Safe Haskell&lt;/a&gt; while &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; is not.</source>
          <target state="translated">템플릿 Haskell은 다음과 같은 새로운 구문 구조를 갖습니다. 이러한 구문 확장을 켜려면 &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; &lt;/a&gt; 확장을 사용해야합니다 . 또는 &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt; &lt;code&gt;TemplateHaskellQuotes&lt;/code&gt; &lt;/a&gt; 확장을 사용하여 Template Haskell의 인용 서브 세트를 활성화 할 수 있습니다 (예 : 스플 라이스 구문 없음). &lt;a href=&quot;#extension-TemplateHaskellQuotes&quot;&gt; &lt;code&gt;TemplateHaskellQuotes&lt;/code&gt; 의&lt;/a&gt; 확장은 아래에 안전한 것으로 간주되는 &lt;a href=&quot;safe_haskell#safe-haskell&quot;&gt;안전 하스켈&lt;/a&gt; 동안 &lt;a href=&quot;#extension-TemplateHaskell&quot;&gt; &lt;code&gt;TemplateHaskell&lt;/code&gt; 가&lt;/a&gt; 없습니다.</target>
        </trans-unit>
        <trans-unit id="cf0bfe7b83cf1fe4eb5eae8c6dda164d7ea82705" translate="yes" xml:space="preserve">
          <source>Template Haskell relies on GHC&amp;rsquo;s built-in bytecode compiler and interpreter to run the splice expressions. The bytecode interpreter runs the compiled expression on top of the same runtime on which GHC itself is running; this means that the compiled code referred to by the interpreted expression must be compatible with this runtime, and in particular this means that object code that is compiled for profiling &lt;em&gt;cannot&lt;/em&gt; be loaded and used by a splice expression, because profiled object code is only compatible with the profiling version of the runtime.</source>
          <target state="translated">템플릿 Haskell은 GHC의 내장 바이트 코드 컴파일러와 인터프리터를 사용하여 스플 라이스 표현식을 실행합니다. 바이트 코드 인터프리터는 GHC 자체가 실행되는 동일한 런타임에서 컴파일 된 표현식을 실행합니다. 이는 해석 된 표현식에 의해 참조 된 컴파일 된 코드가이 런타임과 호환 가능해야 함을 의미하며, 특히 프로파일 링 &lt;em&gt;을&lt;/em&gt; 위해 컴파일 된 오브젝트 코드 는 스플 라이스 표현식에 의해로드되고 사용될 &lt;em&gt;수 없습니다.&lt;/em&gt; 런타임의 프로파일 링 버전</target>
        </trans-unit>
        <trans-unit id="7bdefc9539b9194a2d4149a5c91d997eef29d850" translate="yes" xml:space="preserve">
          <source>Template Haskell return values</source>
          <target state="translated">템플릿 하스켈 반환 값</target>
        </trans-unit>
        <trans-unit id="9b404f6d6623869222b538ba6bfc06c98e19cb94" translate="yes" xml:space="preserve">
          <source>Template Haskell splices won&amp;rsquo;t be checked for warnings, because the code causing the warning might originate from a third-party library and possibly was not written by the user. If you want to have warnings for splices anyway, pass &lt;a href=&quot;#ghc-flag--fenable-th-splice-warnings&quot;&gt;&lt;code&gt;-fenable-th-splice-warnings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플릿 Haskell 스플 라이스는 경고를 확인하지 않습니다. 경고를 유발하는 코드가 타사 라이브러리에서 생성되었을 수 있고 사용자가 작성하지 않았을 수 있기 때문입니다. 어쨌든 스플 라이스에 대한 경고를 &lt;a href=&quot;#ghc-flag--fenable-th-splice-warnings&quot;&gt; &lt;code&gt;-fenable-th-splice-warnings&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d152140c1e18c7cd3a3f310906c764d63ca1e2f5" translate="yes" xml:space="preserve">
          <source>Template Haskell supports quasiquoting, which permits users to construct program fragments by directly writing concrete syntax. A quasiquoter is essentially a function with takes a string to a Template Haskell AST. This module defines the &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; datatype, which specifies a quasiquoter &lt;code&gt;q&lt;/code&gt; which can be invoked using the syntax &lt;code&gt;[q| ... string to parse ... |]&lt;/code&gt; when the &lt;code&gt;QuasiQuotes&lt;/code&gt; language extension is enabled, and some utility functions for manipulating quasiquoters. Nota bene: this package does not define any parsers, that is up to you.</source>
          <target state="translated">템플릿 Haskell은 준 따옴표를 지원하므로 사용자는 구체적인 구문을 직접 작성하여 프로그램 조각을 작성할 수 있습니다. 준 따옴표는 본질적으로 문자열을 Template Haskell AST로 가져 오는 함수입니다. 이 모듈은 정의 &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; 의 quasiquoter 지정하는 데이터 타입, &lt;code&gt;q&lt;/code&gt; 구문 사용하여 호출 될 수있다 &lt;code&gt;[q| ... string to parse ... |]&lt;/code&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; 언어 확장이 활성화 된 경우 구문 분석 할 문자열 및 | quotisquoters 조작을위한 일부 유틸리티 기능. 참고 :이 패키지는 파서를 정의하지 않으며, 이는 귀하에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebddc9e0d108559114cba48b682824dfa130af27" translate="yes" xml:space="preserve">
          <source>Template Haskell works in any mode (&lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;using#ghc-flag---interactive&quot;&gt;&lt;code&gt;--interactive&lt;/code&gt;&lt;/a&gt;, or file-at-a-time). There used to be a restriction to the former two, but that restriction has been lifted.</source>
          <target state="translated">템플릿 Haskell은 모든 모드 ( &lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;using#ghc-flag---interactive&quot;&gt; &lt;code&gt;--interactive&lt;/code&gt; &lt;/a&gt; 또는 한 번에 한 파일)에서 작동합니다. 이전의 두 가지에 대한 제한이 있었지만 그 제한이 해제되었습니다.</target>
        </trans-unit>
        <trans-unit id="eff1de13128bcd2013c8040639470f88614a3c94" translate="yes" xml:space="preserve">
          <source>TemplateHaskell</source>
          <target state="translated">TemplateHaskell</target>
        </trans-unit>
        <trans-unit id="e2eaaaa85415bd784e73442f3556432b23b5f25d" translate="yes" xml:space="preserve">
          <source>TemplateHaskellQuotes</source>
          <target state="translated">TemplateHaskellQuotes</target>
        </trans-unit>
        <trans-unit id="c51a91a0b8b55080de83a8c4c22ec084a18dc465" translate="yes" xml:space="preserve">
          <source>Temporarily allocate space for the given number of elements (like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">주어진 수의 요소 (예 : &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; 와 같은 요소 , 여러 요소)에 임시로 공간을 할당</target>
        </trans-unit>
        <trans-unit id="9904b71b142aff63e385635451d8015680bcbfa1" translate="yes" xml:space="preserve">
          <source>Temporarily allocate space for the given number of elements (like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">주어진 요소 수에 임시로 공간을 할당합니다 ( &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; 와 같지만 여러 요소에 대해).</target>
        </trans-unit>
        <trans-unit id="3aa2fa00cb424efa41a42f9a30ef6767085c8e77" translate="yes" xml:space="preserve">
          <source>Temporarily allocate space for the given number of elements (like &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">주어진 수의 요소 (예 : &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; 와 같은 요소 , 여러 요소)에 임시로 공간을 할당</target>
        </trans-unit>
        <trans-unit id="d153213de595f2b0457842b1e89ecf37e5861427" translate="yes" xml:space="preserve">
          <source>Temporarily store a list of storable values in memory (like &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">일시적 (같은 메모리에 저장 가능한 값의리스트를 저장할 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 하지만 복수의 요소).</target>
        </trans-unit>
        <trans-unit id="747adc425badeb586a9ef48c932f50cbafbf55bd" translate="yes" xml:space="preserve">
          <source>Temporarily store a list of storable values in memory (like &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">일시적 (같은 메모리에 저장 가능한 값의리스트를 저장할 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 하지만 복수의 요소).</target>
        </trans-unit>
        <trans-unit id="910480cf7ceec100a9b2c82c87ed4abd8a847b1f" translate="yes" xml:space="preserve">
          <source>Temporarily store a list of storable values in memory (like &lt;code&gt;&lt;a href=&quot;foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">일시적 (같은 메모리에 저장 가능한 값의리스트를 저장할 &lt;code&gt;&lt;a href=&quot;foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 하지만 복수의 요소).</target>
        </trans-unit>
        <trans-unit id="951532b532d7745015bbec59ce7f15413c9aa665" translate="yes" xml:space="preserve">
          <source>Temporary bindings introduced at the prompt only last until the next &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; command, at which time they will be simply lost. However, they do survive a change of context with &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt;: the temporary bindings just move to the new location.</source>
          <target state="translated">프롬프트에 도입 된 임시 바인딩은 다음 &lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt; 명령 까지만 지속 되며,이 경우 단순히 손실됩니다. 그러나, 그들은과 상황의 변화 생존 할 &lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; : 임시 바인딩은 새 위치로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="8e2754fc91f29834706af71cfa26258d56805769" translate="yes" xml:space="preserve">
          <source>Temporary files</source>
          <target state="translated">임시 파일</target>
        </trans-unit>
        <trans-unit id="61dadf9304563410bab92330ef592c2024f65bc0" translate="yes" xml:space="preserve">
          <source>TermOutput</source>
          <target state="translated">TermOutput</target>
        </trans-unit>
        <trans-unit id="ea3bc4f028c31af0bf78ae8d2532320026163e9c" translate="yes" xml:space="preserve">
          <source>TermStr</source>
          <target state="translated">TermStr</target>
        </trans-unit>
        <trans-unit id="a1f52cdcb3f2bf91aa12082618f306714fbe6324" translate="yes" xml:space="preserve">
          <source>Terminal</source>
          <target state="translated">Terminal</target>
        </trans-unit>
        <trans-unit id="656752cc25cccadfaad5f1821bdf864540c6e0e9" translate="yes" xml:space="preserve">
          <source>Terminal attributes</source>
          <target state="translated">터미널 속성</target>
        </trans-unit>
        <trans-unit id="c74ce25f28d15f536a08e8a7aae17a8cd82fa296" translate="yes" xml:space="preserve">
          <source>Terminal dimensions</source>
          <target state="translated">터미널 치수</target>
        </trans-unit>
        <trans-unit id="16006e478e8b7dad1a17b3808b498b74f603d953" translate="yes" xml:space="preserve">
          <source>Terminal operations</source>
          <target state="translated">터미널 운영</target>
        </trans-unit>
        <trans-unit id="8abbc9be81a91e1208c58253f1fdb1868684462a" translate="yes" xml:space="preserve">
          <source>Terminal operations (not portable: GHC only)</source>
          <target state="translated">터미널 작업 (휴대용 아님 : GHC 만 해당)</target>
        </trans-unit>
        <trans-unit id="03e69355cb9e53e2cd49b81f2188ca3e9216ddfa" translate="yes" xml:space="preserve">
          <source>Terminal support</source>
          <target state="translated">터미널 지원</target>
        </trans-unit>
        <trans-unit id="4356c0a245abed0df475bf4fd2e4f9252ed9378c" translate="yes" xml:space="preserve">
          <source>TerminalAttributes</source>
          <target state="translated">TerminalAttributes</target>
        </trans-unit>
        <trans-unit id="48cf04933dc0932b897bc63f987d824ce367d66f" translate="yes" xml:space="preserve">
          <source>TerminalMode</source>
          <target state="translated">TerminalMode</target>
        </trans-unit>
        <trans-unit id="eeed32bdc9fc6804be1d50287fd767119a6e6a5c" translate="yes" xml:space="preserve">
          <source>TerminalState</source>
          <target state="translated">TerminalState</target>
        </trans-unit>
        <trans-unit id="60e3b2b4662f7f71b1278d8bd5f47d4ddfcd23fa" translate="yes" xml:space="preserve">
          <source>Terminating the program</source>
          <target state="translated">프로그램 종료</target>
        </trans-unit>
        <trans-unit id="bf3badca71aac2c2189a5d1f128d3744ce4ba74d" translate="yes" xml:space="preserve">
          <source>Terminfo contains many string capabilities for special effects. For example, the &lt;code&gt;cuu1&lt;/code&gt; capability moves the cursor up one line; on ANSI terminals this is accomplished by printing the control sequence &lt;code&gt;&quot;\ESC[A&quot;&lt;/code&gt;. However, some older terminals also require &quot;padding&quot;, or short pauses, after certain commands. For example, when &lt;code&gt;TERM=vt100&lt;/code&gt; the &lt;code&gt;cuu1&lt;/code&gt; capability is &lt;code&gt;&quot;\ESC[A$&amp;lt;2&amp;gt;&quot;&lt;/code&gt;, which instructs terminfo to pause for two milliseconds after outputting the control sequence.</source>
          <target state="translated">Terminfo에는 특수 효과를위한 많은 문자열 기능이 포함되어 있습니다. 예를 들어, &lt;code&gt;cuu1&lt;/code&gt; 기능은 커서를 한 줄 위로 이동합니다. ANSI 터미널에서는 제어 시퀀스 &lt;code&gt;&quot;\ESC[A&quot;&lt;/code&gt; 를 인쇄하여이 작업을 수행합니다 . 그러나 일부 구형 터미널은 특정 명령 후에 &quot;패딩&quot;또는 일시 정지가 필요합니다. 예를 들어, &lt;code&gt;TERM=vt100&lt;/code&gt; 인 경우 &lt;code&gt;cuu1&lt;/code&gt; 기능은 &lt;code&gt;&quot;\ESC[A$&amp;lt;2&amp;gt;&quot;&lt;/code&gt; 이며 제어 시퀀스를 출력 한 후 terminfo에 2 밀리 초 동안 일시 중지하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="5a1bfca651035bf564aa1981572b07bdf7c4afa0" translate="yes" xml:space="preserve">
          <source>Test for a non-representable type</source>
          <target state="translated">표현할 수없는 유형에 대한 테스트</target>
        </trans-unit>
        <trans-unit id="e53f6246b72df3a6091a48b1550fd22b7e1ecb7b" translate="yes" xml:space="preserve">
          <source>Test for an algebraic type</source>
          <target state="translated">대수 유형 테스트</target>
        </trans-unit>
        <trans-unit id="6d642ca4244b8dfb74521331eba817e7a20071aa" translate="yes" xml:space="preserve">
          <source>Test for special 0-sized &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; representing underflows.</source>
          <target state="translated">언더 플로를 나타내는 특수한 0 크기의 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 을 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="1d02aa099737fb0fe7c1625e39f58b89235df364" translate="yes" xml:space="preserve">
          <source>Test if &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; value is equal to zero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 값이 0 인지 테스트하십시오 .</target>
        </trans-unit>
        <trans-unit id="95bb15347fba86c3b17001ad0a8b69992a876f4b" translate="yes" xml:space="preserve">
          <source>Test if &lt;em&gt;n&lt;/em&gt;-th bit is set.</source>
          <target state="translated">&lt;em&gt;n&lt;/em&gt; 번째 비트가 설정되어 있는지 테스트합니다 .</target>
        </trans-unit>
        <trans-unit id="292e850af715e74ed5bb5feffdf8cbf1885014a3" translate="yes" xml:space="preserve">
          <source>Test if a map obeys the balance invariants.</source>
          <target state="translated">지도가 균형 불변량을 따르는 지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="5a94265ab8733a209e426c94ee183c76717c01db" translate="yes" xml:space="preserve">
          <source>Test if each node of a map reports its size correctly.</source>
          <target state="translated">지도의 각 노드가 크기를 올바르게보고하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="96936c8d777fcfcafb5eb9b7eb0d03ba6539a1a1" translate="yes" xml:space="preserve">
          <source>Test if the keys are ordered correctly.</source>
          <target state="translated">키가 올바르게 주문되었는지 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="d7e009b0c3f999ffcaef1173db81146aed8dee25" translate="yes" xml:space="preserve">
          <source>Test whether all input has been consumed, i.e. there are no remaining undecoded bytes.</source>
          <target state="translated">모든 입력이 소비되었는지, 즉 디코딩되지 않은 나머지 바이트가 없는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="9925348510b47b2863e5ef1c82653a196c4b207d" translate="yes" xml:space="preserve">
          <source>Test whether all internal invariants are satisfied by &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="translated">모든 내부 불변 값 이 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 값 으로 충족되는지 테스트</target>
        </trans-unit>
        <trans-unit id="06cded3ffb44966c229aa0a84babdf0e8c0c2137" translate="yes" xml:space="preserve">
          <source>Test whether all internal invariants are satisfied by &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="translated">모든 내부 불변 값 이 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 값 으로 충족되는지 테스트</target>
        </trans-unit>
        <trans-unit id="cca497a59c276e03e96debbd45d14f22a694b070" translate="yes" xml:space="preserve">
          <source>Test whether all internal invariants are satisfied by &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; value</source>
          <target state="translated">모든 내부 불변이 &lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; 가치에 의해 충족되는지 테스트</target>
        </trans-unit>
        <trans-unit id="87dfc36f0f2fd749d5bd7ceb68abbb872b3a6ab1" translate="yes" xml:space="preserve">
          <source>Test whether the given path points to an existing filesystem object. If the user lacks necessary permissions to search the parent directories, this function may return false even if the file does actually exist.</source>
          <target state="translated">주어진 경로가 기존 파일 시스템 객체를 가리키는 지 테스트합니다. 사용자에게 상위 디렉토리를 검색하는 데 필요한 권한이 없으면 파일이 실제로 존재하더라도이 함수는 false를 리턴 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="618c6539f1506b1efcaa432cec593a3ec5e5b23d" translate="yes" xml:space="preserve">
          <source>Test whether the structure is empty.</source>
          <target state="translated">구조가 비어 있는지 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="9ec504560faa4c177387ae484066374e0280ed4d" translate="yes" xml:space="preserve">
          <source>Test whether the structure is empty. The default implementation is optimized for structures that are similar to cons-lists, because there is no general way to do better.</source>
          <target state="translated">구조가 비어 있는지 테스트하십시오. 기본 구현은 더 나은 일반적인 방법이 없기 때문에 cons-list와 유사한 구조에 최적화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ffe4f99279c8b3a1a6045e3b220319bfa26e4d4" translate="yes" xml:space="preserve">
          <source>TestCoercion</source>
          <target state="translated">TestCoercion</target>
        </trans-unit>
        <trans-unit id="6baebd3bcf2faffa77a6af6d701aed3296ee682f" translate="yes" xml:space="preserve">
          <source>TestEquality</source>
          <target state="translated">TestEquality</target>
        </trans-unit>
        <trans-unit id="13305b14347347ab0b4ea787bc14cb2b6a7b2d6b" translate="yes" xml:space="preserve">
          <source>Testing a file descriptor</source>
          <target state="translated">파일 디스크립터 테스트</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="28ca7dae3040931c19068173384884833a123118" translate="yes" xml:space="preserve">
          <source>Text attributes</source>
          <target state="translated">텍스트 속성</target>
        </trans-unit>
        <trans-unit id="fbaed2b20b527facc4ca0f4514252eda74d458bd" translate="yes" xml:space="preserve">
          <source>Text codecs for I/O</source>
          <target state="translated">I / O 용 텍스트 코덱</target>
        </trans-unit>
        <trans-unit id="24fe565b53a0883ce95a8e632e2283a1bc0c4892" translate="yes" xml:space="preserve">
          <source>Text formatting.</source>
          <target state="translated">텍스트 형식.</target>
        </trans-unit>
        <trans-unit id="c8677ef2e3f2a24ffc9cc25edf46d04be93e6e2d" translate="yes" xml:space="preserve">
          <source>Text input</source>
          <target state="translated">텍스트 입력</target>
        </trans-unit>
        <trans-unit id="b0540832a654644f2f5c3a0970298868a5907146" translate="yes" xml:space="preserve">
          <source>Text input and output</source>
          <target state="translated">텍스트 입력 및 출력</target>
        </trans-unit>
        <trans-unit id="05a09f33e47e5c09ffcc367387ff34665b9cdd9d" translate="yes" xml:space="preserve">
          <source>Text manipulation functions represented as fusible operations over streams.</source>
          <target state="translated">스트림을 통한 가능한 조작으로 표현 된 텍스트 조작 기능.</target>
        </trans-unit>
        <trans-unit id="722885d8d390e65ecfcdb41ec41ea3b9328037eb" translate="yes" xml:space="preserve">
          <source>Text output</source>
          <target state="translated">텍스트 출력</target>
        </trans-unit>
        <trans-unit id="13943b8e4677c9da2e6203d1b329951861af4e3e" translate="yes" xml:space="preserve">
          <source>Text representing the offset of this timezone, such as &quot;-0800&quot; or &quot;+0400&quot; (like &lt;code&gt;%z&lt;/code&gt; in formatTime), with arbitrary padding.</source>
          <target state="translated">이 시간대의 오프셋을 나타내는 텍스트 (예 : &quot;-0800&quot;또는 &quot;+0400&quot;(예 : formatTime의 &lt;code&gt;%z&lt;/code&gt; ))에 임의의 패딩이 있습니다.</target>
        </trans-unit>
        <trans-unit id="852166d16456b6fa662df8fb149d236828c68e68" translate="yes" xml:space="preserve">
          <source>Text representing the offset of this timezone, such as &quot;-0800&quot; or &quot;+0400&quot; (like &lt;code&gt;%z&lt;/code&gt; in formatTime).</source>
          <target state="translated">&quot;-0800&quot;또는 &quot;+0400&quot;과 같은이 시간대의 오프셋을 나타내는 텍스트 (예 : formatTime의 &lt;code&gt;%z&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ed7ae1196ea4dde7920491b601f4301c95e1e9a5" translate="yes" xml:space="preserve">
          <source>Text to display when listing alternatives.</source>
          <target state="translated">대안을 나열 할 때 표시 할 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="11b672bb892b79d6582e0455b8fff6ee5ceb9ac5" translate="yes" xml:space="preserve">
          <source>Text to insert in line.</source>
          <target state="translated">줄에 삽입 할 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="b3cddd25d1a3ba043388a9be9c805221e0702100" translate="yes" xml:space="preserve">
          <source>Text to search in (&lt;code&gt;haystack&lt;/code&gt;)</source>
          <target state="translated">검색 할 텍스트 ( &lt;code&gt;haystack&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f4926373d9c800f5b51da1a7b6d5f3a2e217d0fb" translate="yes" xml:space="preserve">
          <source>Text.Parsec</source>
          <target state="translated">Text.Parsec</target>
        </trans-unit>
        <trans-unit id="4396c7c924e8d78705c74431cf54ec75db0c822f" translate="yes" xml:space="preserve">
          <source>Text.Parsec.ByteString</source>
          <target state="translated">Text.Parsec.ByteString</target>
        </trans-unit>
        <trans-unit id="5f5916c1c3b3ac72a76fc3edc051f943c1ed5cc5" translate="yes" xml:space="preserve">
          <source>Text.Parsec.ByteString.Lazy</source>
          <target state="translated">Text.Parsec.ByteString.Lazy</target>
        </trans-unit>
        <trans-unit id="5026a39135d437c0e3d50661263d3bddb505076d" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Char</source>
          <target state="translated">Text.Parsec.Char</target>
        </trans-unit>
        <trans-unit id="d79e1e5ccbab402519d7709b426069da0e1ba90e" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Combinator</source>
          <target state="translated">Text.Parsec.Combinator</target>
        </trans-unit>
        <trans-unit id="eaa3d89d72b1231b22ba03f0db4bdaf19d21fcb1" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Error</source>
          <target state="translated">Text.Parsec.Error</target>
        </trans-unit>
        <trans-unit id="111558045cf99bdede51fa1129966883ff24afd0" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Expr</source>
          <target state="translated">Text.Parsec.Expr</target>
        </trans-unit>
        <trans-unit id="a80b14e828d7ccebb142e616cfa44b68880cc27b" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Language</source>
          <target state="translated">Text.Parsec.Language</target>
        </trans-unit>
        <trans-unit id="6c69560acd89a3439e49df9a1a3254a8b3186128" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Perm</source>
          <target state="translated">Text.Parsec.Perm</target>
        </trans-unit>
        <trans-unit id="899a00a65f2d54739e5641e8688795990245109f" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Pos</source>
          <target state="translated">Text.Parsec.Pos</target>
        </trans-unit>
        <trans-unit id="7636f7cf5f4e8c88253662fac8c688523ac4d886" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Prim</source>
          <target state="translated">Text.Parsec.Prim</target>
        </trans-unit>
        <trans-unit id="29826c57fcb89761863c39eec9c5af8a6f5febad" translate="yes" xml:space="preserve">
          <source>Text.Parsec.String</source>
          <target state="translated">Text.Parsec.String</target>
        </trans-unit>
        <trans-unit id="3b836c92fbd7582025c709ff24c175d6e716ca73" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Text</source>
          <target state="translated">Text.Parsec.Text</target>
        </trans-unit>
        <trans-unit id="e90063f714a4da52e66a2df4dd86435908e09fa3" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Text.Lazy</source>
          <target state="translated">Text.Parsec.Text.Lazy</target>
        </trans-unit>
        <trans-unit id="6fe265f0e82179432eb9ade64e7861432f7d60af" translate="yes" xml:space="preserve">
          <source>Text.Parsec.Token</source>
          <target state="translated">Text.Parsec.Token</target>
        </trans-unit>
        <trans-unit id="f172b568000576f45d59679777ed7684132968eb" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec</source>
          <target state="translated">Text.ParserCombinators.Parsec</target>
        </trans-unit>
        <trans-unit id="10b214a4ec90242f725f97833fd7675f54a888a3" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Char</source>
          <target state="translated">Text.ParserCombinators.Parsec.Char</target>
        </trans-unit>
        <trans-unit id="79ef51731535d8527d907194e42ac5b111d4c5fe" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Combinator</source>
          <target state="translated">Text.ParserCombinators.Parsec.Combinator</target>
        </trans-unit>
        <trans-unit id="61d2e006fb97d64aea24f02c9e3c08ebb1a99396" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Error</source>
          <target state="translated">Text.ParserCombinators.Parsec.Error</target>
        </trans-unit>
        <trans-unit id="516a4fb2d75ecfa62ec407490b7bc7c2d044edf8" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Expr</source>
          <target state="translated">Text.ParserCombinators.Parsec.Expr</target>
        </trans-unit>
        <trans-unit id="5e6854330348d33d0af39d8fdc6812b41298e84f" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Language</source>
          <target state="translated">Text.ParserCombinators.Parsec.Language</target>
        </trans-unit>
        <trans-unit id="05c55b78874022b802d181ba4f2880cd161193cb" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Perm</source>
          <target state="translated">Text.ParserCombinators.Parsec.Perm</target>
        </trans-unit>
        <trans-unit id="23fb49ec2cfe90e1ed5d4c61ff69122ee664057b" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Pos</source>
          <target state="translated">Text.ParserCombinators.Parsec.Pos</target>
        </trans-unit>
        <trans-unit id="f235b5d7f1d368a293584919135e9009215e4195" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Prim</source>
          <target state="translated">Text.ParserCombinators.Parsec.Prim</target>
        </trans-unit>
        <trans-unit id="f3945aa5d3428a81bf8a3a610bbab3644b5df29a" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.Parsec.Token</source>
          <target state="translated">Text.ParserCombinators.Parsec.Token</target>
        </trans-unit>
        <trans-unit id="b77b2a992aaa4c5d69ac5d9df4c739fffdace5ec" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.ReadP</source>
          <target state="translated">Text.ParserCombinators.ReadP</target>
        </trans-unit>
        <trans-unit id="bd62cb34823dd96a921d926b9390b7652930d50d" translate="yes" xml:space="preserve">
          <source>Text.ParserCombinators.ReadPrec</source>
          <target state="translated">Text.ParserCombinators.ReadPrec</target>
        </trans-unit>
        <trans-unit id="841f953fb25d967de66bdc2bfa7b808a4902b9cc" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.Annotated</source>
          <target state="translated">Text.PrettyPrint.Annotated</target>
        </trans-unit>
        <trans-unit id="933dae42a8460538e7deec160889c28236a5659e" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.Annotated.HughesPJ</source>
          <target state="translated">Text.PrettyPrint.Annotated.HughesPJ</target>
        </trans-unit>
        <trans-unit id="6ba7533c729a21d883c35ea710a41810576fe3f9" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.Annotated.HughesPJClass</source>
          <target state="translated">Text.PrettyPrint.Annotated.HughesPJClass</target>
        </trans-unit>
        <trans-unit id="75d296916408b85ed138aacae307021f81e9b105" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.HughesPJ</source>
          <target state="translated">Text.PrettyPrint.HughesPJ</target>
        </trans-unit>
        <trans-unit id="070a1b0e3666fba02bf11cf21864f94454e18fee" translate="yes" xml:space="preserve">
          <source>Text.PrettyPrint.HughesPJClass</source>
          <target state="translated">Text.PrettyPrint.HughesPJClass</target>
        </trans-unit>
        <trans-unit id="852f9faf333892c8bfed010752077687bc710eb3" translate="yes" xml:space="preserve">
          <source>Text.Printf</source>
          <target state="translated">Text.Printf</target>
        </trans-unit>
        <trans-unit id="3e467eeda741670cee0544e799baf3bc68f8f6af" translate="yes" xml:space="preserve">
          <source>Text.Read</source>
          <target state="translated">Text.Read</target>
        </trans-unit>
        <trans-unit id="e7d2b433e6b1a5bfaf0e500258b53ab2699f6b40" translate="yes" xml:space="preserve">
          <source>Text.Read.Lex</source>
          <target state="translated">Text.Read.Lex</target>
        </trans-unit>
        <trans-unit id="82d6f31f8994e83ef79b1676df6acd06d40c0952" translate="yes" xml:space="preserve">
          <source>Text.Show</source>
          <target state="translated">Text.Show</target>
        </trans-unit>
        <trans-unit id="a8c2710c3553b8ef538c168f7f038d784360e352" translate="yes" xml:space="preserve">
          <source>Text.XHtml</source>
          <target state="translated">Text.XHtml</target>
        </trans-unit>
        <trans-unit id="1c794c577eeed3e827f3f4434b0b677541efc237" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Frameset</source>
          <target state="translated">Text.XHtml.Frameset</target>
        </trans-unit>
        <trans-unit id="4e310429294785c3e4ed13f69b32d21e7e3c6e8a" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Strict</source>
          <target state="translated">Text.XHtml.Strict</target>
        </trans-unit>
        <trans-unit id="eaaae80f3e09d76e5b52e5458697c3fd39663493" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Table</source>
          <target state="translated">Text.XHtml.Table</target>
        </trans-unit>
        <trans-unit id="b60bd5c761b5c1a8480926f234df22b56fc27ec9" translate="yes" xml:space="preserve">
          <source>Text.XHtml.Transitional</source>
          <target state="translated">Text.XHtml.Transitional</target>
        </trans-unit>
        <trans-unit id="840c7e38544dbd613fa0b1f9a59f6f627ea3dd88" translate="yes" xml:space="preserve">
          <source>TextDecoder</source>
          <target state="translated">TextDecoder</target>
        </trans-unit>
        <trans-unit id="b1ec439dd8ac6da12ff0821c5bfa7393b4881faa" translate="yes" xml:space="preserve">
          <source>TextEncoder</source>
          <target state="translated">TextEncoder</target>
        </trans-unit>
        <trans-unit id="9195c9a1d76bd3421ac42c82a5d2ce786ab09b23" translate="yes" xml:space="preserve">
          <source>TextEncoding</source>
          <target state="translated">TextEncoding</target>
        </trans-unit>
        <trans-unit id="ef309892f2826f378147927737ca881b40420a37" translate="yes" xml:space="preserve">
          <source>Textual name of this user (pw_name)</source>
          <target state="translated">이 사용자의 텍스트 이름 (pw_name)</target>
        </trans-unit>
        <trans-unit id="45b3ae04eef9762e57f97f506e36c837398301fc" translate="yes" xml:space="preserve">
          <source>Textual source positions.</source>
          <target state="translated">텍스트 소스 위치.</target>
        </trans-unit>
        <trans-unit id="6a2ec719ddee27b8ee0018e15dcb0d3552659a4c" translate="yes" xml:space="preserve">
          <source>Th32SnapFlags</source>
          <target state="translated">Th32SnapFlags</target>
        </trans-unit>
        <trans-unit id="f1c71aeaa559503cb5c111582956f3709a70b40b" translate="yes" xml:space="preserve">
          <source>Th32SnapHandle</source>
          <target state="translated">Th32SnapHandle</target>
        </trans-unit>
        <trans-unit id="78e1c498231e4965c95cd3fcf27fb9a7f46b40a8" translate="yes" xml:space="preserve">
          <source>That being said, with the appropriate use of wrapper datatypes, the above limitations induce no loss of generality:</source>
          <target state="translated">랩퍼 데이터 유형을 적절하게 사용하면 위의 제한으로 인해 일반성이 손실되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="58dcecccbdfb19a6c28d4e72b8694cf3a95079aa" translate="yes" xml:space="preserve">
          <source>That gives rise to a &lt;code&gt;(X [Bool] beta)&lt;/code&gt; constraint, and using the instance means we need &lt;code&gt;(D Bool beta)&lt;/code&gt; and that fixes &lt;code&gt;beta&lt;/code&gt; via &lt;code&gt;D&lt;/code&gt;&amp;lsquo;s fundep!</source>
          <target state="translated">그것은 &lt;code&gt;(X [Bool] beta)&lt;/code&gt; 제약 을 야기하고 , 인스턴스를 사용한다는 것은 우리가 필요하다는 것을 의미하고 &lt;code&gt;(D Bool beta)&lt;/code&gt; &lt;code&gt;D&lt;/code&gt; 를 통해 &lt;code&gt;beta&lt;/code&gt; 를 수정합니다 !</target>
        </trans-unit>
        <trans-unit id="6a7f123da8ed9434c97040e703694b356a4d2399" translate="yes" xml:space="preserve">
          <source>That gives rise to a &lt;code&gt;(X [Bool] beta)&lt;/code&gt; constraint, and using the instance means we need &lt;code&gt;(D Bool beta)&lt;/code&gt; and that fixes &lt;code&gt;beta&lt;/code&gt; via &lt;code&gt;D&lt;/code&gt;&amp;rsquo;s fundep!</source>
          <target state="translated">그러면 &lt;code&gt;(X [Bool] beta)&lt;/code&gt; 제약이 발생하고 인스턴스를 사용하면 &lt;code&gt;(D Bool beta)&lt;/code&gt; 가 필요 하며 &lt;code&gt;D&lt;/code&gt; 의 fundep을 통해 &lt;code&gt;beta&lt;/code&gt; 를 수정합니다 !</target>
        </trans-unit>
        <trans-unit id="f2a29bc8dbb5ee0c4a1930b318abbbb60994a117" translate="yes" xml:space="preserve">
          <source>That is because we require an &lt;code&gt;Eq (Option a)&lt;/code&gt; instance from the default type signature for &lt;code&gt;(==#)&lt;/code&gt;, which in turn requires an &lt;code&gt;Eq a&lt;/code&gt; instance, which we don&amp;rsquo;t have in scope. But if you tweak the definition of &lt;code&gt;HigherEq&lt;/code&gt; slightly:</source>
          <target state="translated">우리가 필요로하기 때문에 즉 &lt;code&gt;Eq (Option a)&lt;/code&gt; 의 기본 유형 서명에서 인스턴스 &lt;code&gt;(==#)&lt;/code&gt; , 차례에서 요구하는 &lt;code&gt;Eq a&lt;/code&gt; 우리가 범위에없는 인스턴스를. 그러나 &lt;code&gt;HigherEq&lt;/code&gt; 의 정의를 약간 조정하면 :</target>
        </trans-unit>
        <trans-unit id="462366d2ca673f43337d58fb2f79b52eb40d828a" translate="yes" xml:space="preserve">
          <source>That is the same as the dynamic linking on other platforms, and it is described in &lt;a href=&quot;shared_libs#using-shared-libs&quot;&gt;Using shared libraries&lt;/a&gt;.</source>
          <target state="translated">이는 다른 플랫폼의 동적 링크와 동일하며 &lt;a href=&quot;shared_libs#using-shared-libs&quot;&gt;공유 라이브러리 사용에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5adb8f6d680643cb988e19cd9ebd95685b0e9084" translate="yes" xml:space="preserve">
          <source>That is, &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt;&lt;code&gt;DeriveFunctor&lt;/code&gt;&lt;/a&gt; pattern-matches its way into tuples and maps over each type that constitutes the tuple. The generated code is reminiscent of what would be generated from &lt;code&gt;data Triple a = Triple a Int [a]&lt;/code&gt;, except with extra machinery to handle the tuple.</source>
          <target state="translated">즉, &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt; &lt;code&gt;DeriveFunctor&lt;/code&gt; 는&lt;/a&gt; 패턴을 튜플에 일치시키고 튜플을 구성하는 각 유형에 매핑합니다. 생성 된 코드는 튜플을 처리하는 추가 기계를 제외하고 &lt;code&gt;data Triple a = Triple a Int [a]&lt;/code&gt; 에서 생성 된 것을 연상시킵니다 .</target>
        </trans-unit>
        <trans-unit id="4a82aebf2ff4e63f82086bf2da9eae4d7a61ab25" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">즉, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 가 에 의해 생성 된 문자열 구문 분석 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 을 하고, 그 값을 제공 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 가 시작합니다.</target>
        </trans-unit>
        <trans-unit id="9e481507876f41c367fe06e578b12b78a4e7b1ac" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">즉, &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 가 에 의해 생성 된 문자열 구문 분석 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 을 하고, 그 값을 제공 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 가 시작합니다.</target>
        </trans-unit>
        <trans-unit id="49ebb42c3d6e117d12265da60c750a18218cde33" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">즉, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 가 에 의해 생성 된 문자열 구문 분석 &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 을 하고, 그 값을 제공 &lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 가 시작합니다.</target>
        </trans-unit>
        <trans-unit id="924d09ba70f052db4b220a5f8dac59b3109fa413" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">즉, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 가 에 의해 생성 된 문자열 구문 분석 &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 을 하고, 그 값을 제공 &lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 가 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5981428896475a8992aaf356fb600c2886c3b975" translate="yes" xml:space="preserve">
          <source>That is, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; parses the string produced by &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt;, and delivers the value that &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; started with.</source>
          <target state="translated">즉, &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 가 에 의해 생성 된 문자열 구문 분석 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 을 하고, 그 값을 제공 &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; 가 시작합니다.</target>
        </trans-unit>
        <trans-unit id="a0d56a2fcb64d6ff47305c969e3cc186106c4d12" translate="yes" xml:space="preserve">
          <source>That is, a quoter is a tuple of four parsers, one for each of the contexts in which a quasi-quote can occur.</source>
          <target state="translated">즉, 따옴표는 4 개의 구문 분석기로 구성된 튜플입니다. 각 인용 부호는 준 인용 부호가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ac21267c135501bf8d1d0d91f2b069a3782591d" translate="yes" xml:space="preserve">
          <source>That is, an &lt;code&gt;SPretty Foo&lt;/code&gt; instance will be created with empty implementations for all methods. Since we are using &lt;a href=&quot;#extension-DefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt; in this example, a default implementation of &lt;code&gt;sPpr&lt;/code&gt; is filled in automatically.</source>
          <target state="translated">즉, &lt;code&gt;SPretty Foo&lt;/code&gt; 인스턴스는 모든 메소드에 대해 빈 구현으로 작성됩니다. 이 예제에서는 &lt;a href=&quot;#extension-DefaultSignatures&quot;&gt; &lt;code&gt;DefaultSignatures&lt;/code&gt; &lt;/a&gt; 를 사용하므로 &lt;code&gt;sPpr&lt;/code&gt; 의 기본 구현이 자동으로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="8b860dffaafb771638ee538e2b0ac1693cebe622" translate="yes" xml:space="preserve">
          <source>That is, since the type variable &lt;code&gt;a&lt;/code&gt; isn&amp;rsquo;t in scope, it&amp;rsquo;s implicitly universally quantified.</source>
          <target state="translated">즉, 타입 변수 &lt;code&gt;a&lt;/code&gt; 는 범위 내에 있지 않기 때문에 암시 적으로 보편적으로 정량화됩니다.</target>
        </trans-unit>
        <trans-unit id="d7a4e9e2c0f64dd1b628ca2224d1a3e388241d4f" translate="yes" xml:space="preserve">
          <source>That is, the &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; methods should be the inverse of each other. A range of instances are provided for basic Haskell types.</source>
          <target state="translated">즉, &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; 메소드는 서로 반대 여야합니다. 기본 Haskell 유형에 대해 다양한 인스턴스가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="2de858dbd3f42f7a78dc46a1d661e4c45116e634" translate="yes" xml:space="preserve">
          <source>That is, the operator must be a function of two arguments. GHC allows it to take only one argument, and that in turn allows you to write the function postfix.</source>
          <target state="translated">즉, 연산자는 두 인수의 함수 여야합니다. GHC를 사용하면 인수를 하나만 사용할 수 있으며 함수 접미사를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de2666094f8dd3b89fcecfae7a344b137b1c390e" translate="yes" xml:space="preserve">
          <source>That is, the scoping is the same as it would be if the curried arguments were collected into a tuple.</source>
          <target state="translated">즉, 범위 지정은 카레 인수가 튜플로 수집 된 경우와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a08280c0c335de4d817b47c060a3f4af660b030a" translate="yes" xml:space="preserve">
          <source>That is, to match a variable ⟨v⟩ against a pattern &lt;code&gt;(&lt;/code&gt; ⟨exp⟩ &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨pat⟩ &lt;code&gt;)&lt;/code&gt;, evaluate &lt;code&gt;(&lt;/code&gt; ⟨exp⟩ ⟨v⟩ &lt;code&gt;)&lt;/code&gt; and match the result against ⟨pat⟩.</source>
          <target state="translated">즉, 패턴에 대한 변수 ⟨v⟩에 맞게 &lt;code&gt;(&lt;/code&gt; ⟨exp⟩ &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨pat⟩ &lt;code&gt;)&lt;/code&gt; , 평가를 &lt;code&gt;(&lt;/code&gt; ⟨exp⟩ ⟨v⟩ &lt;code&gt;)&lt;/code&gt; 와 ⟨pat⟩에 대한 결과와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="f81ae30760fa45f0027ed10944dbae9bf4a7947d" translate="yes" xml:space="preserve">
          <source>That is, we add a new form of pattern, written ⟨expression⟩ &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟨pattern⟩ that means &amp;ldquo;apply the expression to whatever we&amp;rsquo;re trying to match against, and then match the result of that application against the pattern&amp;rdquo;. The expression can be any Haskell expression of function type, and view patterns can be used wherever patterns are used.</source>
          <target state="translated">즉, 우리 는&amp;ldquo;표현식&amp;rdquo; &lt;code&gt;-&amp;gt;&lt;/code&gt; ⟩ 패턴&amp;rdquo;이라는 새로운 형태의 패턴을 추가 합니다. 이는&amp;ldquo;표현식에 적용하려는 모든 것에 표현식을 적용한 다음 해당 응용 프로그램의 결과를 패턴과 일치시키는 것&amp;rdquo;을 의미합니다. 표현식은 함수 유형의 하스켈 표현식 일 수 있으며 패턴이 사용되는 모든 위치에서 뷰 패턴을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4472bb74389d304d179494e5f818bbd3e2091fe" translate="yes" xml:space="preserve">
          <source>That is, we represent every functional dependency (FD) &lt;code&gt;a1 .. an -&amp;gt; b&lt;/code&gt; by an FD type family &lt;code&gt;F a1 .. an&lt;/code&gt; and a superclass context equality &lt;code&gt;F a1 .. an ~ b&lt;/code&gt;, essentially giving a name to the functional dependency. In class instances, we define the type instances of FD families in accordance with the class head. Method signatures are not affected by that process.</source>
          <target state="translated">즉, FD 유형 패밀리 &lt;code&gt;F a1 .. an&lt;/code&gt; 및 수퍼 클래스 컨텍스트 동등성 &lt;code&gt;F a1 .. an ~ b&lt;/code&gt; 모든 기능적 종속성 (FD) &lt;code&gt;a1 .. an -&amp;gt; b&lt;/code&gt; 를 나타내며 , 기본적으로 기능 종속성에 이름을 지정합니다. 클래스 인스턴스에서는 클래스 헤드에 따라 FD 패밀리의 유형 인스턴스를 정의합니다. 메소드 서명은 해당 프로세스의 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="087a1186066043015d53285a25aa834f074c4bb9" translate="yes" xml:space="preserve">
          <source>That last one deserves a special mention, however, since &lt;code&gt;a -&amp;gt; Int -&amp;gt; Int&lt;/code&gt; is a straightforward instantiation of &lt;code&gt;forall b. a -&amp;gt; b -&amp;gt; b&lt;/code&gt;. You can still write such a default type signature, but you now must use type equalities to do so:</source>
          <target state="translated">&lt;code&gt;a -&amp;gt; Int -&amp;gt; Int&lt;/code&gt; 는 &lt;code&gt;forall b. a -&amp;gt; b -&amp;gt; b&lt;/code&gt; 의 간단한 인스턴스화 이기 때문에 마지막에 특별한 언급이 필요합니다 . b. a-&amp;gt; b-&amp;gt; b . 여전히 이러한 기본 유형 서명을 작성할 수 있지만 이제 유형 평등을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="7aa747ff9513051d2f3e0f63c5ab4677db5c86d5" translate="yes" xml:space="preserve">
          <source>That leaves let expressions, whose translation is given in &lt;a href=&quot;http://www.haskell.org/onlinereport/exps.html#sect3.12&quot;&gt;Section 3.12&lt;/a&gt; of the Haskell Report. Replace the &amp;ldquo;Translation&amp;rdquo; there with the following one. Given &lt;code&gt;let { bind1 ... bindn } in body&lt;/code&gt;:</source>
          <target state="translated">그것은 하스켈 보고서의 &lt;a href=&quot;http://www.haskell.org/onlinereport/exps.html#sect3.12&quot;&gt;3.12 절에&lt;/a&gt; 주어진 번역 표현을 남겨둔다 . &amp;ldquo;번역&amp;rdquo;을 다음과 같이 바꾸십시오. &lt;code&gt;let { bind1 ... bindn } in body&lt;/code&gt; 주어진 경우 :</target>
        </trans-unit>
        <trans-unit id="9239200a2fcf1e520b700775bc66f764a197c669" translate="yes" xml:space="preserve">
          <source>That postpones the question of which instance to pick to the call site for &lt;code&gt;f&lt;/code&gt; by which time more is known about the type &lt;code&gt;b&lt;/code&gt;. You can write this type signature yourself if you use the &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension.</source>
          <target state="translated">에있는 인스턴스의 질문은 전화 사이트를 선택하는 그 연기합니다 &lt;code&gt;f&lt;/code&gt; 어떤 시간에 더 많은 유형에 대해 알려진 &lt;code&gt;b&lt;/code&gt; . &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt; 확장 을 사용하는 경우이 유형 서명을 직접 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0af663474763fbec92b5233bfe0db021c376fce2" translate="yes" xml:space="preserve">
          <source>That would make no sense if the expression to the left of &lt;code&gt;-&amp;lt;&lt;/code&gt; involves the bound variable &lt;code&gt;x&lt;/code&gt;. More generally, the expression to the left of &lt;code&gt;-&amp;lt;&lt;/code&gt; may not involve any local variable, i.e. a variable bound in the current arrow abstraction. For such a situation there is a variant &lt;code&gt;-&amp;lt;&amp;lt;&lt;/code&gt;, as in</source>
          <target state="translated">&lt;code&gt;-&amp;lt;&lt;/code&gt; 의 왼쪽에있는 표현식에 바인딩 된 변수 &lt;code&gt;x&lt;/code&gt; 가 포함 되어 있으면 의미가 없습니다 . 보다 일반적으로 &lt;code&gt;-&amp;lt;&lt;/code&gt; 의 왼쪽에있는 표현식 은 로컬 변수, 즉 현재 화살표 추상화에 바인딩 된 변수를 포함하지 않을 수 있습니다. 이러한 상황에서는 다음과 같이 변형 &lt;code&gt;-&amp;lt;&amp;lt;&lt;/code&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8395997f12760883e7bd00deba567522fa0be628" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all a little confusing, so here&amp;rsquo;s a few examples. To start with, here&amp;rsquo;s a new GHCi command which doesn&amp;rsquo;t take any arguments or produce any results, it just outputs the current date and time:</source>
          <target state="translated">모두 약간 혼란 스럽습니다. 여기 몇 가지 예가 있습니다. 우선, 인수를 취하거나 결과를 생성하지 않는 새로운 GHCi 명령이 있습니다. 현재 날짜와 시간 만 출력합니다.</target>
        </trans-unit>
        <trans-unit id="3a5d327acf1cda84e99ba8c8418f8a6e3f1a6041" translate="yes" xml:space="preserve">
          <source>The &quot;%v&quot; specifier is provided for all built-in types, and should be provided for user-defined type formatters as well. It picks a &quot;best&quot; representation for the given type. For the built-in types the &quot;%v&quot; specifier is converted as follows:</source>
          <target state="translated">&quot;% v&quot;지정자는 모든 내장 유형에 제공되며 사용자 정의 유형 포맷터에도 제공해야합니다. 주어진 유형에 대해 &quot;최상의&quot;표현을 선택합니다. 내장 유형의 경우 &quot;% v&quot;지정자는 다음과 같이 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="307d8dbf7393ba19bad8b70f752ec95aa046ce44" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;code&gt;By&lt;/code&gt;&quot; operations</source>
          <target state="translated">&quot; &lt;code&gt;By&lt;/code&gt; &quot;조작</target>
        </trans-unit>
        <trans-unit id="599928469bbf0c1871f851f1ade723c44533fb25" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;code&gt;generic&lt;/code&gt;&quot; operations</source>
          <target state="translated">&quot; &lt;code&gt;generic&lt;/code&gt; &quot;작업</target>
        </trans-unit>
        <trans-unit id="d6bed068edef8687960252343aec2dce4a6f9960" translate="yes" xml:space="preserve">
          <source>The &quot;alternate form&quot; for unsigned radix conversions is as in C &lt;code&gt;printf(3)&lt;/code&gt;:</source>
          <target state="translated">부호없는 기수 변환에 대한 &quot;대체 형식&quot;은 C &lt;code&gt;printf(3)&lt;/code&gt; 같습니다.</target>
        </trans-unit>
        <trans-unit id="594cda52526f7a4ced49e3f563eb6b3d2f24eeb4" translate="yes" xml:space="preserve">
          <source>The &quot;format parser&quot; walks over argument-type-specific modifier characters to find the primary format character. This is the type of its result.</source>
          <target state="translated">&quot;형식 파서&quot;는 기본 형식 문자를 찾기 위해 인수 유형별 수정 자 문자를 검토합니다. 이것이 결과의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="7723ee8b77a369d6247096077763bfcd23d475ce" translate="yes" xml:space="preserve">
          <source>The &quot;live&quot; elements of the buffer are those between the &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt; offsets. In an empty buffer, &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; is equal to &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt;, but they might not be zero: for example, the buffer might correspond to a memory-mapped file and in which case &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; will point to the next location to be written, which is not necessarily the beginning of the file.</source>
          <target state="translated">버퍼의 &quot;라이브&quot;요소는 &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt; 오프셋 사이의 요소입니다 . 빈 버퍼에서 &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufR&quot;&gt;bufR&lt;/a&gt;&lt;/code&gt; 과 같지만 0이 아닐 수 있습니다. 예를 들어, 버퍼는 메모리 매핑 된 파일에 해당 할 수 &lt;code&gt;&lt;a href=&quot;ghc-io-buffer#v:bufL&quot;&gt;bufL&lt;/a&gt;&lt;/code&gt; 경우 bufL 은 다음에 쓸 위치를 가리킬 것입니다. 파일의 시작</target>
        </trans-unit>
        <trans-unit id="2a8382d16990b13cd15a39a55ae784945d07894a" translate="yes" xml:space="preserve">
          <source>The &quot;normal&quot; (Level 0) of detail.</source>
          <target state="translated">세부 사항의 &quot;일반&quot;(레벨 0)입니다.</target>
        </trans-unit>
        <trans-unit id="667c18fb4c63293a30cf0ae6252784353ac2d4c3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;&lt;code&gt;forall a&lt;/code&gt;&amp;rdquo; brings &amp;ldquo;&lt;code&gt;a&lt;/code&gt;&amp;rdquo; into scope in the definition of &amp;ldquo;&lt;code&gt;f&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">&quot; &lt;code&gt;forall a&lt;/code&gt; &quot;는 &quot; &lt;code&gt;f&lt;/code&gt; &quot; 의 정의에서 &quot; &lt;code&gt;a&lt;/code&gt; &quot;를 범위 내로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="c6c6c6b0c9636ffbfcb145dd52b6cf329767257a" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;bytes allocated in the heap&amp;rdquo; is the total bytes allocated by the program over the whole run.</source>
          <target state="translated">&amp;ldquo;힙에 할당 된 바이트&amp;rdquo;는 전체 실행에서 프로그램이 할당 한 총 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="584d620fa2734b6b5eaa0370f4dc4f644b3e240e" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;bytes maximum slop&amp;rdquo; tells you the most space that is ever wasted due to the way GHC allocates memory in blocks. Slop is memory at the end of a block that was wasted. There&amp;rsquo;s no way to control this; we just like to see how much memory is being lost this way.</source>
          <target state="translated">&quot;바이트 최대 슬로프&quot;는 GHC가 블록 단위로 메모리를 할당하는 방식으로 인해 낭비되는 가장 많은 공간을 알려줍니다. Slop은 낭비 된 블록의 끝에있는 메모리입니다. 이것을 제어 할 수있는 방법이 없습니다. 우리는이 방법으로 얼마나 많은 메모리가 손실되고 있는지 알고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="45090aca257e8cf2e737992e0dab8be6af802dda" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;general principle&amp;rdquo; described here is meant to make all this more predictable for users. It would not be hard to extend GHC to relax this principle. If you should want a change here, consider writing a &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/&quot;&gt;proposal&lt;/a&gt; to do so.</source>
          <target state="translated">여기에 설명 된 &quot;일반 원칙&quot;은 사용자가이 모든 것을보다 예측 가능하게 만들기위한 것입니다. 이 원칙을 완화하기 위해 GHC를 확장하는 것은 어렵지 않습니다. 여기에서 변경을 원하면 &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/&quot;&gt;제안서&lt;/a&gt; 를 작성해보십시오 .</target>
        </trans-unit>
        <trans-unit id="4fef8e475f005ce6d6f926436263775847cc3803" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;i&amp;rdquo; stands for &amp;ldquo;Interactive&amp;rdquo;</source>
          <target state="translated">&quot;i&quot;는 &quot;Interactive&quot;를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="fc84efa3e37fb0d48e7458b75c4700965bef870a" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;total memory in use&amp;rdquo; tells you the peak memory the RTS has allocated from the OS.</source>
          <target state="translated">&quot;사용중인 총 메모리&quot;는 RTS가 OS에서 할당 한 최대 메모리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="eb3433e82abbee6557ae4932640c2d8da6b781db" translate="yes" xml:space="preserve">
          <source>The (mono)type: &lt;code&gt;tau&lt;/code&gt;</source>
          <target state="translated">(모노) 타입 : &lt;code&gt;tau&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60b26e67d917cc3a857c71a7f8b8990a2841e52f" translate="yes" xml:space="preserve">
          <source>The 0 pointer. Used to indicate the empty Bytestring.</source>
          <target state="translated">0 포인터. 빈 Bytestring을 나타내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b0f2110e66ee660be4c8c2f43b8e22fc7b2ac364" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-BlockArguments&quot;&gt;&lt;code&gt;BlockArguments&lt;/code&gt;&lt;/a&gt; extension allows these constructs to be directly used as a function argument. For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-BlockArguments&quot;&gt; &lt;code&gt;BlockArguments&lt;/code&gt; 의&lt;/a&gt; 확장은 이러한 구조에 직접 함수의 인수로서 사용되는 것을 허용한다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="64bdb3d073f079d531b8a96572945cc8af7548ae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-BlockArguments&quot;&gt;&lt;code&gt;BlockArguments&lt;/code&gt;&lt;/a&gt; extension moves these production rules under &lt;code&gt;aexp&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;#extension-BlockArguments&quot;&gt; &lt;code&gt;BlockArguments&lt;/code&gt; 의&lt;/a&gt; 확장에 따라이 생성 규칙 이동 &lt;code&gt;aexp&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="7c6312d568cf2735ca75edec69b8ff484ecdbef9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-BlockArguments&quot;&gt;&lt;code&gt;BlockArguments&lt;/code&gt;&lt;/a&gt; extension moves these production rules under &lt;code&gt;aexp&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#extension-BlockArguments&quot;&gt; &lt;code&gt;BlockArguments&lt;/code&gt; 의&lt;/a&gt; 확장에 따라이 생성 규칙을 이동 &lt;code&gt;aexp&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="35c65f0dc74f4931d91c01fa9c6d3700981ddac7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-CPP&quot;&gt;&lt;code&gt;CPP&lt;/code&gt;&lt;/a&gt; language extension can also be enabled using the &lt;a href=&quot;glasgow_exts#language-pragma&quot;&gt;LANGUAGE&lt;/a&gt; pragma; For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-CPP&quot;&gt; &lt;code&gt;CPP&lt;/code&gt; 의&lt;/a&gt; 언어 확장은 또한 사용하여 활성화 될 수 &lt;a href=&quot;glasgow_exts#language-pragma&quot;&gt;언어의&lt;/a&gt; 프라그를; 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="cb9ce911311ab5062d718c76033a5381bcc759c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-CPP&quot;&gt;&lt;code&gt;CPP&lt;/code&gt;&lt;/a&gt; language extension enables the C pre-processor. This can be turned into a command-line flag by prefixing it with &lt;code&gt;-X&lt;/code&gt;; For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-CPP&quot;&gt; &lt;code&gt;CPP&lt;/code&gt; 의&lt;/a&gt; 언어 확장은 C의 전처리를 가능하게한다. &lt;code&gt;-X&lt;/code&gt; 접두사를 붙여서 명령 줄 플래그로 바꿀 수 있습니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="ae4cf567699873d6594767b8148b3283fe3e91e5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-EmptyCase&quot;&gt;&lt;code&gt;EmptyCase&lt;/code&gt;&lt;/a&gt; extension enables case expressions, or lambda-case expressions, that have no alternatives, thus:</source>
          <target state="translated">&lt;a href=&quot;#extension-EmptyCase&quot;&gt; &lt;code&gt;EmptyCase&lt;/code&gt; 의&lt;/a&gt; 확장 따라서, 어떤 대안이없는 경우 식 또는 람다의 경우 표현을 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="abbd0ecca5ae43844dd2d11341709a7cbf2688b3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;/a&gt; flag is only required to enable deriving of these four &amp;ldquo;standard&amp;rdquo; type classes (which are mentioned in the Haskell Report). Other extensions to the &lt;code&gt;deriving&lt;/code&gt; mechanism, which are explained below in greater detail, do not require &lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt;&lt;code&gt;EmptyDataDeriving&lt;/code&gt;&lt;/a&gt; to be used in conjunction with empty data types. These include:</source>
          <target state="translated">&lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt; &lt;code&gt;EmptyDataDeriving&lt;/code&gt; &lt;/a&gt; 플래그는 (하스켈 보고서에 언급 된)이 4 개의 &quot;표준&quot;형 클래스의 파생 사용하는 데 필요합니다. 아래에서 자세히 설명 하는 &lt;code&gt;deriving&lt;/code&gt; 메커니즘 에 대한 다른 확장 에서는 &lt;a href=&quot;#extension-EmptyDataDeriving&quot;&gt; &lt;code&gt;EmptyDataDeriving&lt;/code&gt; &lt;/a&gt; 을 빈 데이터 유형과 함께 사용할 필요가 없습니다 . 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="012817880879ac3870d5610c6cda1f372d2afa1d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-ExplicitNamespaces&quot;&gt;&lt;code&gt;ExplicitNamespaces&lt;/code&gt;&lt;/a&gt; extension allows you to prefix the name of a type constructor in an import or export list with &amp;ldquo;&lt;code&gt;type&lt;/code&gt;&amp;rdquo; to disambiguate this case, thus:</source>
          <target state="translated">&lt;a href=&quot;#extension-ExplicitNamespaces&quot;&gt; &lt;code&gt;ExplicitNamespaces&lt;/code&gt; 의&lt;/a&gt; 확장은 당신이 &quot;를 가져 오기 또는 내보내기 목록에서 형식 생성자의 이름 앞에 할 수 있습니다 &lt;code&gt;type&lt;/code&gt; 따라서,이 사건을 명확하게하기 위해&quot;</target>
        </trans-unit>
        <trans-unit id="5ba167f467ba97a573f10efce8b6b966cd314396" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension lifts the Haskell 98 restriction that the type-class constraints in a type signature must have the form &lt;em&gt;(class type-variable)&lt;/em&gt; or &lt;em&gt;(class (type-variable type1 type2 &amp;hellip; typen))&lt;/em&gt;. With &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; these type signatures are perfectly okay</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; 의&lt;/a&gt; 확장은 유형 서명의 타입 클래스 제약 양식이 있어야 하스켈 (98) 제한 리프트 &lt;em&gt;(클래스 형 변수)&lt;/em&gt; 또는 &lt;em&gt;(클래스 (유형 변수를 타입 1 타입 2 ... typen))&lt;/em&gt; . &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; 를&lt;/a&gt; 사용하면 이러한 유형 서명이 완벽하게 괜찮습니다.</target>
        </trans-unit>
        <trans-unit id="1e42ac5c594dfd901f58792044e9a9041c4003be" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension lifts the Haskell 98 restriction that the type-class constraints in a type signature must have the form &lt;em&gt;(class type-variable)&lt;/em&gt; or &lt;em&gt;(class (type-variable type1 type2 ... typen))&lt;/em&gt;. With &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; these type signatures are perfectly okay</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; 의&lt;/a&gt; 확장은 유형 서명의 타입 클래스 제약 양식이 있어야 하스켈 (98) 제한 리프트 &lt;em&gt;(클래스 형 변수)&lt;/em&gt; 또는 &lt;em&gt;(클래스 (유형 변수를 타입 1 타입 2 ... typen))&lt;/em&gt; . &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt; 사용하면 이러한 유형 서명이 완벽하게 괜찮습니다.</target>
        </trans-unit>
        <trans-unit id="7a3b07e5c3b3f792ae9a2205da0ebe6f644dadb1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; extension relaxes this rule, as well as relaxing the corresponding rule for type signatures (see &lt;a href=&quot;#flexible-contexts&quot;&gt;The context of a type signature&lt;/a&gt;). Specifically, &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt;, allows (well-kinded) class constraints of form &lt;code&gt;(C t1 ... tn)&lt;/code&gt; in the context of an instance declaration.</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; 의&lt;/a&gt; 확장이 규칙뿐만 아니라 타입 시그니처에 해당하는 규칙 (참조 휴식을 완화 &lt;a href=&quot;#flexible-contexts&quot;&gt;타입 서명의 컨텍스트&lt;/a&gt; ). 특히 &lt;a href=&quot;#extension-FlexibleContexts&quot;&gt; &lt;code&gt;FlexibleContexts&lt;/code&gt; &lt;/a&gt; 는 인스턴스 선언의 맥락에서 &lt;code&gt;(C t1 ... tn)&lt;/code&gt; 형식의 ( 종종) 클래스 제약 조건을 허용 합니다.</target>
        </trans-unit>
        <trans-unit id="0562613b8f75a0cd91d39da3210ac809ea1b3a19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleInstances&quot;&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;/a&gt; extension allows the head of the instance declaration to mention arbitrary nested types. For example, this becomes a legal instance declaration</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleInstances&quot;&gt; &lt;code&gt;FlexibleInstances&lt;/code&gt; 의&lt;/a&gt; 확장은 인스턴스 선언의 머리가 임의의 중첩 된 유형을 언급 할 수 있습니다. 예를 들어, 이것은 유효한 인스턴스 선언이됩니다.</target>
        </trans-unit>
        <trans-unit id="661ec8113ef99ccdd08a9cd1e3cdeaf21af63fa6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-FlexibleInstances&quot;&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;/a&gt; extension implies &lt;a href=&quot;#extension-TypeSynonymInstances&quot;&gt;&lt;code&gt;TypeSynonymInstances&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-FlexibleInstances&quot;&gt; &lt;code&gt;FlexibleInstances&lt;/code&gt; 의&lt;/a&gt; 확장을 의미한다 &lt;a href=&quot;#extension-TypeSynonymInstances&quot;&gt; &lt;code&gt;TypeSynonymInstances&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bdcc91b25b9ed4cc5c0260c1f012c1a5f82d2927" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-LambdaCase&quot;&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;/a&gt; extension enables expressions of the form</source>
          <target state="translated">&lt;a href=&quot;#extension-LambdaCase&quot;&gt; &lt;code&gt;LambdaCase&lt;/code&gt; 의&lt;/a&gt; 확장 형태의 표현을 가능하게</target>
        </trans-unit>
        <trans-unit id="ae186343574b4460d96f7f83aeb4d511026cbbfd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-MagicHash&quot;&gt;&lt;code&gt;MagicHash&lt;/code&gt;&lt;/a&gt; also enables some new forms of literals (see &lt;a href=&quot;#glasgow-unboxed&quot;&gt;Unboxed types&lt;/a&gt;):</source>
          <target state="translated">&lt;a href=&quot;#extension-MagicHash&quot;&gt; &lt;code&gt;MagicHash&lt;/code&gt; 은&lt;/a&gt; 또한 리터럴 (참조의 새로운 형태를 가능하게 &lt;a href=&quot;#glasgow-unboxed&quot;&gt;박스 없음 타입&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f156d0b8de4e1a07b993f716b37564cac76a1370" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-PostfixOperators&quot;&gt;&lt;code&gt;PostfixOperators&lt;/code&gt;&lt;/a&gt; extension enables a small extension to the syntax of left operator sections, which allows you to define postfix operators. The extension is this: the left section</source>
          <target state="translated">&lt;a href=&quot;#extension-PostfixOperators&quot;&gt; &lt;code&gt;PostfixOperators&lt;/code&gt; 의&lt;/a&gt; 확장은 후위 연산자를 정의 할 수 있습니다 왼쪽 운영자 섹션의 구문에 작은 확장 할 수 있습니다. 확장은 이쪽 : 왼쪽 섹션</target>
        </trans-unit>
        <trans-unit id="a89c98a9a3a672e6e0625684027419f38aef7f06" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-RankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt; option is also required for any type with a &lt;code&gt;forall&lt;/code&gt; or context to the right of an arrow (e.g. &lt;code&gt;f :: Int -&amp;gt; forall a. a-&amp;gt;a&lt;/code&gt;, or &lt;code&gt;g :: Int -&amp;gt; Ord a =&amp;gt; a -&amp;gt; a&lt;/code&gt;). Such types are technically rank 1, but are clearly not Haskell-98, and an extra extension did not seem worth the bother.</source>
          <target state="translated">&lt;a href=&quot;#extension-RankNTypes&quot;&gt; &lt;code&gt;RankNTypes&lt;/code&gt; 의&lt;/a&gt; 옵션은 또한 어떤 유형 필요 &lt;code&gt;forall&lt;/code&gt; (화살표의 우측 또는 문맥 예 &lt;code&gt;f :: Int -&amp;gt; forall a. a-&amp;gt;a&lt;/code&gt; 또는 &lt;code&gt;g :: Int -&amp;gt; Ord a =&amp;gt; a -&amp;gt; a&lt;/code&gt; ). 이러한 유형은 기술적으로 1 등급이지만 분명히 Haskell-98이 아니며 추가 확장은 귀찮은 것으로 보이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="35fe223925e3329d9b396b0289c0f1edb80c5f64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-TupleSections&quot;&gt;&lt;code&gt;TupleSections&lt;/code&gt;&lt;/a&gt; extension enables partially applied tuple constructors. For example, the following program</source>
          <target state="translated">&lt;a href=&quot;#extension-TupleSections&quot;&gt; &lt;code&gt;TupleSections&lt;/code&gt; 의&lt;/a&gt; 확장 부분인가 튜플 생성자 수있다. 예를 들어, 다음 프로그램</target>
        </trans-unit>
        <trans-unit id="b17d31417452ac7082cc9ac3c80a11f860e37344" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-TypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; extension allows you to use &lt;em&gt;visible type application&lt;/em&gt; in expressions. Here is an example: &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt;. The &lt;code&gt;@Int&lt;/code&gt; is the visible type application; it specifies the value of the type variable in &lt;code&gt;read&lt;/code&gt;&amp;lsquo;s type.</source>
          <target state="translated">&lt;a href=&quot;#extension-TypeApplications&quot;&gt; &lt;code&gt;TypeApplications&lt;/code&gt; 의&lt;/a&gt; 확장은 사용할 수 있습니다 &lt;em&gt;눈에 보이는 유형의 응용 프로그램을&lt;/em&gt; 표정에. 다음은 예입니다 : &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt; . &lt;code&gt;@Int&lt;/code&gt; 는 가시 형 응용 프로그램; &lt;code&gt;read&lt;/code&gt; 의 타입으로 타입 변수의 값을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="815a49f2870c920071d25b5de51faa8078cb6a12" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-TypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; extension allows you to use &lt;em&gt;visible type application&lt;/em&gt; in expressions. Here is an example: &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt;. The &lt;code&gt;@Int&lt;/code&gt; is the visible type application; it specifies the value of the type variable in &lt;code&gt;read&lt;/code&gt;&amp;rsquo;s type.</source>
          <target state="translated">The &lt;a href=&quot;#extension-TypeApplications&quot;&gt; &lt;code&gt;TypeApplications&lt;/code&gt; &lt;/a&gt; extension allows you to use &lt;em&gt;visible type application&lt;/em&gt; in expressions. Here is an example: &lt;code&gt;show (read @Int &quot;5&quot;)&lt;/code&gt; . The &lt;code&gt;@Int&lt;/code&gt; is the visible type application; it specifies the value of the type variable in &lt;code&gt;read&lt;/code&gt; &amp;rsquo;s type.</target>
        </trans-unit>
        <trans-unit id="2ebe94937368bfa68f3a743d993e9e33b0ab16eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#extension-UndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt; extension is also used to lift some of the restrictions imposed on type family instances. See &lt;a href=&quot;#type-family-decidability&quot;&gt;Decidability of type synonym instances&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-UndecidableInstances&quot;&gt; &lt;code&gt;UndecidableInstances&lt;/code&gt; 의&lt;/a&gt; 확장은 형 가족 인스턴스에 부과 된 제한의 일부를 해제하는 데 사용됩니다. &lt;a href=&quot;#type-family-decidability&quot;&gt;동의어 인스턴스 유형의 결정 가능성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a40f430193c52ab9a3cf3f22af8fbf5bb4348a51" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--Wmissing-export-lists&quot;&gt;&lt;code&gt;-Wmissing-export-lists&lt;/code&gt;&lt;/a&gt; flag will warn that &lt;code&gt;M&lt;/code&gt; does not declare an export list. Declaring an explicit export list for &lt;code&gt;M&lt;/code&gt; enables GHC dead code analysis, prevents accidental export of names and can ease optimizations like inlining.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wmissing-export-lists&quot;&gt; &lt;code&gt;-Wmissing-export-lists&lt;/code&gt; &lt;/a&gt; 플래그는 것을 경고합니다 &lt;code&gt;M&lt;/code&gt; 은 수출 목록을 선언하지 않습니다. &lt;code&gt;M&lt;/code&gt; 에 대한 명시 적 내보내기 목록을 선언 하면 GHC 데드 코드 분석이 가능하며 실수로 이름을 내보내는 것을 방지하고 인라인과 같은 최적화를 쉽게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a474ac6ba444d90bd68f49cf89271d299c2d550" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt;&lt;code&gt;-Wmissing-import-lists&lt;/code&gt;&lt;/a&gt; flag will warn about the import of &lt;code&gt;Y&lt;/code&gt; but not &lt;code&gt;X&lt;/code&gt; If module &lt;code&gt;Y&lt;/code&gt; is later changed to export (say) &lt;code&gt;f&lt;/code&gt;, then the reference to &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;M&lt;/code&gt; will become ambiguous. No warning is produced for the import of &lt;code&gt;Z&lt;/code&gt; because extending &lt;code&gt;Z&lt;/code&gt;&amp;lsquo;s exports would be unlikely to produce ambiguity in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt; &lt;code&gt;-Wmissing-import-lists&lt;/code&gt; &lt;/a&gt; 플래그는 수입에 대해 경고한다 &lt;code&gt;Y&lt;/code&gt; 아니라 &lt;code&gt;X&lt;/code&gt; 모듈 경우 &lt;code&gt;Y&lt;/code&gt; 는 나중에 내보내기 (말)로 변경된다 &lt;code&gt;f&lt;/code&gt; 다음에, 기준 &lt;code&gt;f&lt;/code&gt; 에서 &lt;code&gt;M&lt;/code&gt; 은 모호해질 것이다. &lt;code&gt;Z&lt;/code&gt; 의 수출을 늘리는 것이 &lt;code&gt;M&lt;/code&gt; 에서 모호성을 일으키지 않기 때문에 &lt;code&gt;Z&lt;/code&gt; 의 수입에 대해서는 경고가 없다 .</target>
        </trans-unit>
        <trans-unit id="0e9463d37bc7356ac89d64ece95dfb6664646492" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt;&lt;code&gt;-Wmissing-import-lists&lt;/code&gt;&lt;/a&gt; flag will warn about the import of &lt;code&gt;Y&lt;/code&gt; but not &lt;code&gt;X&lt;/code&gt; If module &lt;code&gt;Y&lt;/code&gt; is later changed to export (say) &lt;code&gt;f&lt;/code&gt;, then the reference to &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;M&lt;/code&gt; will become ambiguous. No warning is produced for the import of &lt;code&gt;Z&lt;/code&gt; because extending &lt;code&gt;Z&lt;/code&gt;&amp;rsquo;s exports would be unlikely to produce ambiguity in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">The &lt;a href=&quot;#ghc-flag--Wmissing-import-lists&quot;&gt; &lt;code&gt;-Wmissing-import-lists&lt;/code&gt; &lt;/a&gt; flag will warn about the import of &lt;code&gt;Y&lt;/code&gt; but not &lt;code&gt;X&lt;/code&gt; If module &lt;code&gt;Y&lt;/code&gt; is later changed to export (say) &lt;code&gt;f&lt;/code&gt; , then the reference to &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;M&lt;/code&gt; will become ambiguous. No warning is produced for the import of &lt;code&gt;Z&lt;/code&gt; because extending &lt;code&gt;Z&lt;/code&gt; &amp;rsquo;s exports would be unlikely to produce ambiguity in &lt;code&gt;M&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e36bf4d5a27eab719495aba2d65180ff3cb627fe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt;&lt;code&gt;-XEmptyDataDeriving&lt;/code&gt;&lt;/a&gt; flag is only required to enable deriving of these four &amp;ldquo;standard&amp;rdquo; type classes (which are mentioned in the Haskell Report). Other extensions to the &lt;code&gt;deriving&lt;/code&gt; mechanism, which are explained below in greater detail, do not require &lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt;&lt;code&gt;-XEmptyDataDeriving&lt;/code&gt;&lt;/a&gt; to be used in conjunction with empty data types. These include:</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt; &lt;code&gt;-XEmptyDataDeriving&lt;/code&gt; &lt;/a&gt; 플래그는 (하스켈 보고서에 언급 된)이 4 개의 &quot;표준&quot;형 클래스의 파생 사용하는 데 필요합니다. &lt;code&gt;deriving&lt;/code&gt; 메커니즘 에 대한 다른 확장 ( 아래에서 더 자세히 설명)은 빈 데이터 유형과 함께 &lt;a href=&quot;#ghc-flag--XEmptyDataDeriving&quot;&gt; &lt;code&gt;-XEmptyDataDeriving&lt;/code&gt; &lt;/a&gt; 을 사용할 필요가 없습니다 . 여기에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="db722c4293a180623ff6c051b1d85ff7e25c05ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt;&lt;/a&gt; flag allows to specify any function of type &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt;, for some constraint &lt;code&gt;C&lt;/code&gt;, as the function for printing evaluated expressions. The function can reside in any loaded module or any registered package, but only when it resides in a registered package will it survive a &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt;&lt;code&gt;:cd&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; or, &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt; &lt;/a&gt; 플래그 타입의 모든 기능을 지정할 수 &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt; 일부 제한을 위해, &lt;code&gt;C&lt;/code&gt; 평가 식을 인쇄하기위한 함수로서,. 이 함수는로드 된 모듈 또는 등록 된 패키지에 상주 할 수 있지만 등록 된 패키지에 상주하는 경우에만 &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt; &lt;code&gt;:cd&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; 유지&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="630c44ffedd4dd17a812ef0191fcfe9f164168e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt;&lt;/a&gt; flag can also be used when running GHC in &lt;code&gt;-e mode&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8expr%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨expr⟩&lt;/code&gt; &lt;/a&gt; 에서 GHC를 실행할 때 플래그도 사용할 수 있습니다 &lt;code&gt;-e mode&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="78f35da957d4cd52b15e9fdc17483788082f1d5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt;&lt;/a&gt; flag allows to specify any function of type &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt;, for some constraint &lt;code&gt;C&lt;/code&gt;, as the function for printing evaluated expressions. The function can reside in any loaded module or any registered package, but only when it resides in a registered package will it survive a &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt;&lt;code&gt;:cd&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; or, &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt; &lt;/a&gt; flag allows to specify any function of type &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt; , for some constraint &lt;code&gt;C&lt;/code&gt; , as the function for printing evaluated expressions. The function can reside in any loaded module or any registered package, but only when it resides in a registered package will it survive a &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt; &lt;code&gt;:cd&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt; or, &lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="21b2b57c36c8c1575a9d46ca71c9857aa94c645d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt;&lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt;&lt;/a&gt; flag can also be used when running GHC in &lt;code&gt;-e mode&lt;/code&gt;:</source>
          <target state="translated">The &lt;a href=&quot;#ghc-flag--interactive-print%20%E2%9F%A8name%E2%9F%A9&quot;&gt; &lt;code&gt;-interactive-print ⟨name⟩&lt;/code&gt; &lt;/a&gt; flag can also be used when running GHC in &lt;code&gt;-e mode&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a9ee5aa0e4404a66caea5cfa0e31661321a8a071" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghc-flag--v&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/a&gt; option makes GHC &lt;em&gt;verbose&lt;/em&gt;: it reports its version number and shows (on stderr) exactly how it invokes each phase of the compilation system. Moreover, it passes the &lt;code&gt;-v&lt;/code&gt; flag to most phases; each reports its version number (and possibly some other information).</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--v&quot;&gt; &lt;code&gt;-v&lt;/code&gt; &lt;/a&gt; 옵션은 GHC를 만드는 &lt;em&gt;자세한&lt;/em&gt; : 그것은 컴파일 시스템의 각 단계를 호출 정확히 어떻게 (표준 에러에) 버전 번호와 쇼를보고합니다. 또한 &lt;code&gt;-v&lt;/code&gt; 플래그를 대부분의 단계로 전달합니다 . 각 버전 번호 (및 기타 정보)를보고합니다.</target>
        </trans-unit>
        <trans-unit id="f2aaf666449f19ca504a747ac617450334ac0091" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:list&quot;&gt;&lt;code&gt;:list&lt;/code&gt;&lt;/a&gt; command is particularly useful when single-stepping, to see where you currently are:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:list&quot;&gt; &lt;code&gt;:list&lt;/code&gt; &lt;/a&gt; 현재 어디에 단일 스테핑이 볼 때 명령은 특히 유용합니다 :</target>
        </trans-unit>
        <trans-unit id="c742c2c7dca48891181fe9d4cdbd89257e05f404" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:list&quot;&gt;&lt;code&gt;:list&lt;/code&gt;&lt;/a&gt; command lists the source code around the current breakpoint. If your output device supports it, then GHCi will highlight the active subexpression in bold.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:list&quot;&gt; &lt;code&gt;:list&lt;/code&gt; &lt;/a&gt; 명령 목록 현재 중단 점 주위의 소스 코드를. 출력 장치가 지원하는 경우 GHCi는 활성 하위 표현식을 굵게 강조 표시합니다.</target>
        </trans-unit>
        <trans-unit id="207cb516d01051ef8920382f50ac703484da325f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; commands (&lt;a href=&quot;#ghci-load-scope&quot;&gt;The effect of :load on what is in scope&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt; 명령 ( &lt;a href=&quot;#ghci-load-scope&quot;&gt;의 효과 : 범위가 무엇인지에 대한 부하&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8573f5c2fc7b5e00d88d28e04c98a9bc731777f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; commands (&lt;a href=&quot;#loading-source-files&quot;&gt;Loading source files&lt;/a&gt; and &lt;a href=&quot;#ghci-compiled&quot;&gt;Loading compiled code&lt;/a&gt;) affect the top-level scope. Let&amp;rsquo;s start with the simple cases; when you start GHCi the prompt looks like this:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt; 명령 ( &lt;a href=&quot;#loading-source-files&quot;&gt;로드 소스 파일&lt;/a&gt; 과 &lt;a href=&quot;#ghci-compiled&quot;&gt;로드 컴파일 된 코드&lt;/a&gt; ) 최상위 범위에 영향을 미친다. 간단한 경우부터 시작하겠습니다. GHCi를 시작할 때 프롬프트는 다음과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="37bb2b0da32b33f4372a12f64ecdf95d300dbf99" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; command (&lt;a href=&quot;#ghci-module-cmd&quot;&gt;Controlling what is in scope with the :module command&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; (명령 &lt;a href=&quot;#ghci-module-cmd&quot;&gt;와 범위에 어떤 제어 : 모듈 명령&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="f54887dc2345c58aa577bced9bca30f40c4398ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; command provides a way to do two things that cannot be done with ordinary &lt;code&gt;import&lt;/code&gt; declarations:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; 명령은 보통으로 할 수없는 두 가지 할 수있는 방법 제공 &lt;code&gt;import&lt;/code&gt; 선언 :</target>
        </trans-unit>
        <trans-unit id="18bed73a85898df39bbfb21bec72caa1d380f65e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command modifies both, but there is also a &lt;a href=&quot;#ghci-cmd-:seti&quot;&gt;&lt;code&gt;:seti&lt;/code&gt;&lt;/a&gt; command (for &amp;ldquo;set interactive&amp;rdquo;) that affects only the interactive options set.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt; 명령 수정 모두뿐만 아니라이 &lt;a href=&quot;#ghci-cmd-:seti&quot;&gt; &lt;code&gt;:seti&lt;/code&gt; &lt;/a&gt; 설정 한 경우에만 대화 형 옵션에 영향을 미친다 ( &quot;설정 대화&quot;에 대한) 명령.</target>
        </trans-unit>
        <trans-unit id="93a4b5fbe24659bd6501066dacfcac63a656645a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command sets two types of options: GHCi options, which begin with &amp;ldquo;&lt;code&gt;+&lt;/code&gt;&amp;rdquo;, and &amp;ldquo;command-line&amp;rdquo; options, which begin with &amp;ldquo;&lt;code&gt;-&lt;/code&gt;&amp;ldquo;.</source>
          <target state="translated">The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt; command sets two types of options: GHCi options, which begin with &amp;ldquo; &lt;code&gt;+&lt;/code&gt; &amp;rdquo;, and &amp;ldquo;command-line&amp;rdquo; options, which begin with &amp;ldquo; &lt;code&gt;-&lt;/code&gt; &amp;ldquo;.</target>
        </trans-unit>
        <trans-unit id="09a5d114307bab84d24ded440bb5e92a7d6743f5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command sets two types of options: GHCi options, which begin with &amp;ldquo;&lt;code&gt;+&lt;/code&gt;&amp;rdquo;, and &amp;ldquo;command-line&amp;rdquo; options, which begin with &amp;ldquo;&lt;code&gt;-&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt; 명령 세트 두 가지 옵션의 종류 : &quot;로 시작 GHCi 옵션 &lt;code&gt;+&lt;/code&gt; &quot;및 시작 &quot;명령 줄&quot;옵션 &quot; &lt;code&gt;-&lt;/code&gt; &quot;.</target>
        </trans-unit>
        <trans-unit id="994ae649374ddd00dcbdb0398a07b789d70d3ee6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:trace&quot;&gt;&lt;code&gt;:trace&lt;/code&gt;&lt;/a&gt; command can be used with or without an expression. When used without an expression, tracing begins from the current breakpoint, just like &lt;a href=&quot;#ghci-cmd-:step&quot;&gt;&lt;code&gt;:step&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:trace&quot;&gt; &lt;code&gt;:trace&lt;/code&gt; &lt;/a&gt; 명령 또는 식없이 사용할 수 있습니다. 표현식없이 사용하면 &lt;a href=&quot;#ghci-cmd-:step&quot;&gt; &lt;code&gt;:step&lt;/code&gt; &lt;/a&gt; 과 같이 현재 중단 점에서 추적이 시작됩니다 .</target>
        </trans-unit>
        <trans-unit id="d895b0d326a117dc38216e64627bcf0b504cc040" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt;&lt;code&gt;:type-at&lt;/code&gt;&lt;/a&gt; command requires &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; to be set.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:type-at&quot;&gt; &lt;code&gt;:type-at&lt;/code&gt; &lt;/a&gt; 명령이 필요합니다 &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt; 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="199a238337750e7292c80d8483aa164b1180ba95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#ghci-cmd-:uses&quot;&gt;&lt;code&gt;:uses&lt;/code&gt;&lt;/a&gt; command requires &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; to be set.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:uses&quot;&gt; &lt;code&gt;:uses&lt;/code&gt; &lt;/a&gt; 명령이 필요합니다 &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt; 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="aa13aae9cfabe1538d35b3d45ac31cfcc6173609" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; pragma has the additional effect of making the function body look small, so that when inlining is allowed it is very likely to happen.</source>
          <target state="translated">&lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; 의&lt;/a&gt; pragma는 인라인이 허용 될 때 매우 가능성이 발생하는 것입니다 때문에, 함수 본문 모양이 작은 만드는 부가적인 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f27181af99e9c0027aecbaabc8044d1c05e8049" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pragma-NOINLINE&quot;&gt;&lt;code&gt;NOINLINE&lt;/code&gt;&lt;/a&gt; pragma does exactly what you&amp;rsquo;d expect: it stops the named function from being inlined by the compiler. You shouldn&amp;rsquo;t ever need to do this, unless you&amp;rsquo;re very cautious about code size.</source>
          <target state="translated">&lt;a href=&quot;#pragma-NOINLINE&quot;&gt; &lt;code&gt;NOINLINE&lt;/code&gt; 의&lt;/a&gt; pragma는 당신이 기대하는 것을 정확히 않습니다 : 그것은 컴파일러에 의해 인라인되는 명명 된 기능을 중지합니다. 코드 크기에 대해 신중하지 않으면이 작업을 수행 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c1a5fffbed9c12afd5da25081d7fe2ae31e2b1e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pragma-RULES&quot;&gt;&lt;code&gt;RULES&lt;/code&gt;&lt;/a&gt; pragma lets you specify rewrite rules. It is described in &lt;a href=&quot;#rewrite-rules&quot;&gt;Rewrite rules&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pragma-RULES&quot;&gt; &lt;code&gt;RULES&lt;/code&gt; &lt;/a&gt; pragma는 당신이 재 작성 규칙을 지정할 수 있습니다. &lt;a href=&quot;#rewrite-rules&quot;&gt;다시 쓰기 규칙에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf0632a671131031d8937312a06897d2e45574c4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt;&lt;code&gt;-F ⟨factor⟩&lt;/code&gt;&lt;/a&gt; setting will be automatically reduced by the garbage collector when the maximum heap size (the &lt;a href=&quot;#rts-flag--M%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-M ⟨size⟩&lt;/code&gt;&lt;/a&gt; setting) is approaching.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt; &lt;code&gt;-F ⟨factor⟩&lt;/code&gt; &lt;/a&gt; 설정은 자동으로 최대 힙 사이즈 (상기 가비지 컬렉터에 의해 감소 될 것이다 &lt;a href=&quot;#rts-flag--M%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-M ⟨size⟩&lt;/code&gt; &lt;/a&gt; 설정)에 접근한다.</target>
        </trans-unit>
        <trans-unit id="e8b0c5124d5ea3dd22ec93a4e1efaee8762c585c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--P&quot;&gt;&lt;code&gt;-P&lt;/code&gt;&lt;/a&gt; option produces a more detailed report containing the actual time and allocation data as well. (Not used much.)</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--P&quot;&gt; &lt;code&gt;-P&lt;/code&gt; 의&lt;/a&gt; 옵션이 아니라 실제 시간 및 할당 데이터를 포함하는 자세한 보고서를 생성합니다. (별로 사용하지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="1bd683aedc043a933d9975ed15640d3bb66f7a3a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--p&quot;&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/a&gt; option produces a standard &lt;em&gt;time profile&lt;/em&gt; report. It is written into the file &lt;code&gt;&amp;lt;stem&amp;gt;.prof&lt;/code&gt;; the stem is taken to be the program name by default, but can be overridden by the &lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt;&lt;code&gt;-po
⟨stem⟩&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--p&quot;&gt; &lt;code&gt;-p&lt;/code&gt; &lt;/a&gt; 옵션은 표준 생산 &lt;em&gt;시간 프로파일&lt;/em&gt; 보고서를. &lt;code&gt;&amp;lt;stem&amp;gt;.prof&lt;/code&gt; 파일에 기록됩니다 . 기본적으로 스템은 프로그램 이름으로 사용되지만 &lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt; &lt;code&gt;-po ⟨stem⟩&lt;/code&gt; &lt;/a&gt; 플래그 로 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f811997f5e52254e16a04cd53e244ebe3b6c6f7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--pa&quot;&gt;&lt;code&gt;-pa&lt;/code&gt;&lt;/a&gt; option produces the most detailed report containing all cost centres in addition to the actual time and allocation data.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--pa&quot;&gt; &lt;code&gt;-pa&lt;/code&gt; 의&lt;/a&gt; 옵션은 실제 시간 및 할당 데이터뿐만 아니라 모든 비용 센터를 포함하는 가장 상세한 보고서를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7a84a3b7430c33f4f0db03022262f484fb7742f5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--pj&quot;&gt;&lt;code&gt;-pj&lt;/code&gt;&lt;/a&gt; option produces a time/allocation profile report in JSON format written into the file &lt;code&gt;&amp;lt;program&amp;gt;.prof&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--pj&quot;&gt; &lt;code&gt;-pj&lt;/code&gt; &lt;/a&gt; 옵션은 파일에 기록 JSON 형식의 시간 / 할당 프로필 보고서 생성 &lt;code&gt;&amp;lt;program&amp;gt;.prof&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49e571794c298f99f38543a85d7967e52fd97375" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt;&lt;code&gt;-po ⟨stem⟩&lt;/code&gt;&lt;/a&gt; option overrides the stem used to form the output file paths for the cost-centre profiler (see &lt;a href=&quot;#rts-flag--p&quot;&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#rts-flag--pj&quot;&gt;&lt;code&gt;-pj&lt;/code&gt;&lt;/a&gt; flags above) and heap profiler (see &lt;a href=&quot;runtime_control#rts-flag--h&quot;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--po%20%E2%9F%A8stem%E2%9F%A9&quot;&gt; &lt;code&gt;-po ⟨stem⟩&lt;/code&gt; &lt;/a&gt; 옵션은 비용 센터 프로파일 러의 출력 파일 경로를 형성한다 (참조하는 데 사용되는 줄기 무시 &lt;a href=&quot;#rts-flag--p&quot;&gt; &lt;code&gt;-p&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#rts-flag--pj&quot;&gt; &lt;code&gt;-pj&lt;/code&gt; &lt;/a&gt; 플래그 이상) 및 힙 프로파일 러 (참조 &lt;a href=&quot;runtime_control#rts-flag--h&quot;&gt; &lt;code&gt;-h&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="b5635087d38bc262bde4371eac4de7d97f976c29" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO의&lt;/a&gt; 입력 기능 (예를 들면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; 이 기능이 적절한 유니 코드 문자열로 지정된 코드 페이지의 멀티 바이트 캐릭터의 전환을 위해 제공되도록) 자동 유니 코드로 변환하지 않는다. 콘솔의 코드 페이지를 가져 오려면 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9765ad4ea03f4950380592b31970ad8c5c5f3ec8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO&lt;/a&gt; output functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt;) don't automatically convert to multibyte string on Windows, so this function is provided to make the conversion from a Unicode string in the given code page to a proper multibyte string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../base-4.13.0.0/system-io&quot;&gt;System.IO의&lt;/a&gt; 출력 기능 (예 : &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt; 는 이 기능이 적절한 멀티 바이트 문자열로 지정된 코드 페이지에 유니 코드 문자열에서 변환을 제공되도록) 자동으로 Windows에서 멀티 바이트 문자열로 변환하지 않습니다. 콘솔의 코드 페이지를 가져 오려면 &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="3ce9122f50ea53be58cbd2cf028ecc8f4c1bc2e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt;) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">The &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt; input functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:getLine&quot;&gt;getLine&lt;/a&gt;&lt;/code&gt; ) don't automatically convert to Unicode, so this function is provided to make the conversion from a multibyte string in the given code page to a proper Unicode string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dcced739f4877615ca0b1d338f8fe3c56b49eea5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt; output functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt;) don't automatically convert to multibyte string on Windows, so this function is provided to make the conversion from a Unicode string in the given code page to a proper multibyte string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">The &lt;a href=&quot;../base-4.14.1.0/system-io&quot;&gt;System.IO&lt;/a&gt; output functions (e.g. &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:putStr&quot;&gt;putStr&lt;/a&gt;&lt;/code&gt; ) don't automatically convert to multibyte string on Windows, so this function is provided to make the conversion from a Unicode string in the given code page to a proper multibyte string. To get the code page for the console, use &lt;code&gt;&lt;a href=&quot;system-win32-encoding#v:getCurrentCodePage&quot;&gt;getCurrentCodePage&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b352da45baeb9202cb7df82ff50b474eca2ca6d4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM code generator&lt;/a&gt; can sometimes do a far better job at producing fast code than the &lt;a href=&quot;codegens#native-code-gen&quot;&gt;native code generator&lt;/a&gt;. This is not universal and depends on the code. Numeric heavy code seems to show the best improvement when compiled via LLVM. You can also experiment with passing specific flags to LLVM with the &lt;code&gt;-optlo ⟨option⟩&lt;/code&gt; and &lt;code&gt;-optlc ⟨option⟩&lt;/code&gt; flags. Be careful though as setting these flags stops GHC from setting its usual flags for the LLVM optimiser and compiler.</source>
          <target state="translated">&lt;a href=&quot;codegens#llvm-code-gen&quot;&gt;LLVM 코드 생성기는&lt;/a&gt; 때때로보다 빠른 코드를 생산에서 훨씬 더 나은 일을 할 수있는 &lt;a href=&quot;codegens#native-code-gen&quot;&gt;네이티브 코드 생성기&lt;/a&gt; . 이것은 보편적이지 않으며 코드에 따라 다릅니다. LLVM을 통해 컴파일 할 때 숫자가 많은 코드가 가장 개선 된 것으로 보입니다. &lt;code&gt;-optlo ⟨option⟩&lt;/code&gt; 및 &lt;code&gt;-optlc ⟨option⟩&lt;/code&gt; 플래그를 사용하여 특정 플래그를 LLVM에 전달하여 실험 할 수도 있습니다 . 이 플래그를 설정하면 GHC가 LLVM 옵티 마이저 및 컴파일러에 대한 일반적인 플래그를 설정하지 못하므로주의하십시오.</target>
        </trans-unit>
        <trans-unit id="25f2f2f377d7a4d9d4c30076fac395670f976ba5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ghc-err&quot;&gt;GHC.Err&lt;/a&gt; module defines the code for the wired-in error functions, which have a special type in the compiler (with &quot;open tyvars&quot;).</source>
          <target state="translated">&lt;a href=&quot;ghc-err&quot;&gt;GHC.Err의&lt;/a&gt; 모듈을위한 코드를 정의하고 유선 된 ( &quot;개방 tyvars&quot;)와 컴파일러 특별한 유형이 오차 함수.</target>
        </trans-unit>
        <trans-unit id="be2bac9dc3e1c4a106dab0bef04844b8cf103571" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glasgow_exts#th-usage&quot;&gt;Template Haskell staging restrictions&lt;/a&gt; apply to the expression being annotated with, so for example you cannot run a function from the module being compiled.</source>
          <target state="translated">&lt;a href=&quot;glasgow_exts#th-usage&quot;&gt;템플릿 하스켈 준비 제한&lt;/a&gt; 때문에 예를 들어, 당신은 컴파일되는 모듈에서 기능을 실행할 수 없습니다, 주석되는 표현에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="7bcd2aebd16cff6eded9cdf9d7624bc94b45657f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.haskell.org/haskellwiki/Template_Haskell&quot;&gt;Template Haskell&lt;/a&gt; page on the GHC Wiki has a wealth of information. You may also consult the Haddock reference documentation &amp;lt;Language.Haskell.TH.&amp;gt;. Many changes to the original design are described in &lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/th2.ps&quot;&gt;Notes on Template Haskell version 2&lt;/a&gt;. Not all of these changes are in GHC, however.</source>
          <target state="translated">GHC Wiki 의 &lt;a href=&quot;http://www.haskell.org/haskellwiki/Template_Haskell&quot;&gt;Template Haskell&lt;/a&gt; 페이지에는 풍부한 정보가 있습니다. Haddock 참조 문서 &amp;lt;Language.Haskell.TH.&amp;gt;를 참조 할 수도 있습니다. 원본 디자인에 대한 많은 변경 &lt;a href=&quot;https://www.haskell.org/ghc/docs/papers/th2.ps&quot;&gt;사항은 Template Haskell 버전 2에 대한 참고 사항에&lt;/a&gt; 설명되어 있습니다. 그러나 이러한 변경 사항이 모두 GHC에있는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="813ef8b7c698943925b858288d022656cbf4c0e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compact&lt;/a&gt; module provides a way to make garbage collection more efficient for long-lived data structures. Compacting a data structure collects the objects together in memory, where they are treated as a single object by the garbage collector and not traversed individually.</source>
          <target state="translated">The &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compact&lt;/a&gt; module provides a way to make garbage collection more efficient for long-lived data structures. Compacting a data structure collects the objects together in memory, where they are treated as a single object by the garbage collector and not traversed individually.</target>
        </trans-unit>
        <trans-unit id="b007f5500c0bf2359ef4d7c48a45339585e270b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compact&lt;/a&gt; module provides a way to make garbage collection more efficient for long-lived data structures. Compacting a data structure collects the objects together in memory, where they are treated as a single object by the garbage collector and not traversed individually.</source>
          <target state="translated">&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-compact-0.1.0.0/GHC-Compact.html&quot;&gt;GHC.Compact의&lt;/a&gt; 모듈은 수명이 긴 데이터 구조에 대한 가비지 컬렉션을보다 효율적으로 할 수있는 방법을 제공합니다. 데이터 구조를 압축하면 객체가 메모리에 함께 수집되어 가비지 수집기에서 단일 객체로 취급되며 개별적으로 순회하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="096f364a4638bd5a30481fff7cf63dd60a75f2bb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;system-io&quot;&gt;System.IO&lt;/a&gt; library manages multiplexing in its own way. On Windows systems it uses &lt;code&gt;safe&lt;/code&gt; foreign calls to ensure that threads doing I/O operations don't block the whole runtime, whereas on Unix systems all the currently blocked I/O requests are managed by a single thread (the &lt;em&gt;IO manager thread&lt;/em&gt;) using a mechanism such as &lt;code&gt;epoll&lt;/code&gt; or &lt;code&gt;kqueue&lt;/code&gt;, depending on what is provided by the host operating system.</source>
          <target state="translated">&lt;a href=&quot;system-io&quot;&gt;System.IO의&lt;/a&gt; 라이브러리는 자신의 방식으로 다중화 관리합니다. Windows 시스템에서는 &lt;code&gt;safe&lt;/code&gt; 외부 호출을 사용하여 I / O 작업을 수행하는 스레드가 전체 런타임을 차단하지 않도록하고, Unix 시스템에서는 현재 차단 된 모든 I / O 요청이 단일 스레드 ( &lt;em&gt;IO 관리자 스레드&lt;/em&gt; )에 의해 관리됩니다. 호스트 운영 체제에서 제공하는 기능에 따라 &lt;code&gt;epoll&lt;/code&gt; 또는 &lt;code&gt;kqueue&lt;/code&gt; 와 같은 메커니즘 .</target>
        </trans-unit>
        <trans-unit id="ad73609e01e96153a93cfebddc86a915d6769a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;text-read&quot;&gt;Text.Read&lt;/a&gt; library is the canonical library to import for &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt;-class facilities. For GHC only, it offers an extended and much improved &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; class, which constitutes a proposed alternative to the Haskell 2010 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt;. In particular, writing parsers is easier, and the parsers are much more efficient.</source>
          <target state="translated">&lt;a href=&quot;text-read&quot;&gt;Text.Read의&lt;/a&gt; 라이브러리에 대한 가져올 수있는 표준 라이브러리 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; - 클래스의 시설과 서비스를 제공합니다. GHC의 경우에만 확장되고 훨씬 개선 된 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 클래스를 제공하며 , 이는 Haskell 2010 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 에 대한 제안 된 대안을 구성합니다 . 특히 파서를 작성하는 것이 더 쉽고 파서가 훨씬 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="6049bb328d08178d103c9076445b562b087834cb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt;&lt;code&gt;state hack&lt;/code&gt;&lt;/a&gt; optimization can result in non-obvious changes in evaluation ordering which may hide exceptions, even with &lt;a href=&quot;using-optimisation#ghc-flag--fpedantic-bottoms&quot;&gt;&lt;code&gt;-fpedantic-bottoms&lt;/code&gt;&lt;/a&gt; (see, e.g., &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7411&quot;&gt;#7411&lt;/a&gt;). For instance,</source>
          <target state="translated">The &lt;a href=&quot;using-optimisation#ghc-flag--fno-state-hack&quot;&gt; &lt;code&gt;state hack&lt;/code&gt; &lt;/a&gt; optimization can result in non-obvious changes in evaluation ordering which may hide exceptions, even with &lt;a href=&quot;using-optimisation#ghc-flag--fpedantic-bottoms&quot;&gt; &lt;code&gt;-fpedantic-bottoms&lt;/code&gt; &lt;/a&gt; (see, e.g., &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7411&quot;&gt;#7411&lt;/a&gt;). For instance,</target>
        </trans-unit>
        <trans-unit id="f6bc8b6c64115e4a7c4698a00f5d0d1bc2ad89f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator adds the bound function into the continuation chain.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 연산자가 연속 사슬로 결합 된 기능을 추가한다.</target>
        </trans-unit>
        <trans-unit id="5c388ccd0a655842d446db681e2ea71ce5783acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'MetaSel&lt;/code&gt; type is also an instance of the type class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Selector&quot;&gt;Selector&lt;/a&gt;&lt;/code&gt;, which can be used to obtain information about the field at the value level.</source>
          <target state="translated">&lt;code&gt;'MetaSel&lt;/code&gt; 의 종류도 입력 클래스의 인스턴스 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Selector&quot;&gt;Selector&lt;/a&gt;&lt;/code&gt; 값 레벨의 필드에 대한 정보를 얻기 위해 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="866373df1d7e4a2d96c88db426b8a4e214a580f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(C t1..tj)&lt;/code&gt; is a partial applications of the class &lt;code&gt;C&lt;/code&gt;, where the arity of &lt;code&gt;C&lt;/code&gt; is exactly &lt;code&gt;j+1&lt;/code&gt;. That is, &lt;code&gt;C&lt;/code&gt; lacks exactly one type argument.</source>
          <target state="translated">&lt;code&gt;(C t1..tj)&lt;/code&gt; 클래스의 부분 인 어플리케이션 &lt;code&gt;C&lt;/code&gt; 의 인수에 대응, &lt;code&gt;C&lt;/code&gt; 가 정확히 &lt;code&gt;j+1&lt;/code&gt; . 즉, &lt;code&gt;C&lt;/code&gt; 에는 정확히 하나의 유형 인수가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0e53d457109427ef5ddcdce2f9d16292b3ffd5e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt;-form is only available for modules which are interpreted; for compiled modules (including modules from packages) only the non-&lt;code&gt;*&lt;/code&gt; form of &lt;a href=&quot;#ghci-cmd-:browse&quot;&gt;&lt;code&gt;:browse&lt;/code&gt;&lt;/a&gt; is available.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; - 형은 해석 모듈에서만 사용할 수 있습니다; 컴파일 된 모듈 (패키지의 모듈 포함)의 경우 &lt;code&gt;*&lt;/code&gt; 형식이 아닌 &lt;a href=&quot;#ghci-cmd-:browse&quot;&gt; &lt;code&gt;:browse&lt;/code&gt; &lt;/a&gt; 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b53e971ecc81a3e0c6bf1b64d28ddf52cdda1a1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-#include&lt;/code&gt; option is now deprecated, and the &lt;code&gt;include-files&lt;/code&gt; field in a Cabal package specification is ignored.</source>
          <target state="translated">&lt;code&gt;-#include&lt;/code&gt; 옵션이 사용되지 않습니다, 그리고이 &lt;code&gt;include-files&lt;/code&gt; 음모 패키지 사양의 필드를 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ab34545a3d0cf93b61e2311037778df3c80a23fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--numa&lt;/code&gt; flag is typically beneficial when a program is using all cores of a large multi-core NUMA system, with a large allocation area (&lt;code&gt;-A&lt;/code&gt;). All memory accesses to the allocation area will go to local memory, which can save a significant amount of remote memory access. A runtime speedup on the order of 10% is typical, but can vary a lot depending on the hardware and the memory behaviour of the program.</source>
          <target state="translated">&lt;code&gt;--numa&lt;/code&gt; 의 프로그램이 큰 할당 영역 (함께 큰 멀티 코어 NUMA 시스템의 모든 코어를 사용하는 경우 플래그는 전형적으로 유리하다 &lt;code&gt;-A&lt;/code&gt; ). 할당 영역에 대한 모든 메모리 액세스는 로컬 메모리로 이동하여 상당한 양의 원격 메모리 액세스를 절약 할 수 있습니다. 10 % 정도의 런타임 속도 향상이 일반적이지만 하드웨어 및 프로그램의 메모리 동작에 따라 크게 달라질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="561f71da812b2bddee25afb3e6e2e25bcb2e2f87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--numa&lt;/code&gt; option tells the RTS to tune its memory usage to maximize local memory accesses. In particular, the RTS will:</source>
          <target state="translated">&lt;code&gt;--numa&lt;/code&gt; 의 옵션은 로컬 메모리 액세스를 극대화하기 위해 조정 메모리 사용에 RTS를 알려줍니다. 특히 RTS는 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="82790760e32203fbe3b3708f08a40fb1f26d4abb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-O*&lt;/code&gt; options specify convenient &amp;ldquo;packages&amp;rdquo; of optimisation flags; the &lt;code&gt;-f*&lt;/code&gt; options described later on specify &lt;em&gt;individual&lt;/em&gt; optimisations to be turned on/off; the &lt;code&gt;-m*&lt;/code&gt; options specify &lt;em&gt;machine-specific&lt;/em&gt; optimisations to be turned on/off.</source>
          <target state="translated">&lt;code&gt;-O*&lt;/code&gt; 옵션은 최적화 플래그의 편리한 &quot;패키지&quot;를 지정; 나중에 설명 할 &lt;code&gt;-f*&lt;/code&gt; 옵션은 &lt;em&gt;개별&lt;/em&gt; 최적화가 설정 / 해제되도록 지정 합니다. &lt;code&gt;-m*&lt;/code&gt; 지정 옵션 &lt;em&gt;기계 별의&lt;/em&gt; 최적화가 켜져 수 / 오프.</target>
        </trans-unit>
        <trans-unit id="00acee18a5b40f8ae0cd328101fb51b5648ea410" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-S&lt;/code&gt; flag, as well as giving the same output as the &lt;code&gt;-s&lt;/code&gt; flag, prints information about each GC as it happens:</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; 플래그뿐만 아니라, 동일한 출력을 제공 &lt;code&gt;-s&lt;/code&gt; 공교롭게도 플래그 각 GC에 대한 정보를 출력한다 :</target>
        </trans-unit>
        <trans-unit id="5abe89944b59b5975a75aacf7b4842e37070b39c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-XMonadFailDesugaring&lt;/code&gt; extension switches the desugaring of &lt;code&gt;do&lt;/code&gt;-blocks to use &lt;code&gt;MonadFail.fail&lt;/code&gt; instead of &lt;code&gt;Monad.fail&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-XMonadFailDesugaring&lt;/code&gt; 확장의 desugaring 전환 &lt;code&gt;do&lt;/code&gt; 사용하는 -blocks &lt;code&gt;MonadFail.fail&lt;/code&gt; 대신 &lt;code&gt;Monad.fail&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="97d0f469a862a380331313f906971c001e89be36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-fno-gen-manifest&lt;/code&gt; disables generation of the manifest file. One reason to do this would be if you had a manifest file of your own, for example.</source>
          <target state="translated">&lt;code&gt;-fno-gen-manifest&lt;/code&gt; 매니페스트 파일의 비활성화 생성. 이를위한 한 가지 이유는 예를 들어 자신의 매니페스트 파일이있는 경우입니다.</target>
        </trans-unit>
        <trans-unit id="f09316b31fc22fa8a933567bd8337abedb8c8a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-hiesuf&lt;/code&gt; ⟨suffix⟩ will change the &lt;code&gt;.hie&lt;/code&gt; file suffix for extended interface files to whatever you specify.</source>
          <target state="translated">&lt;code&gt;-hiesuf&lt;/code&gt; ⟨suffix⟩이 변경됩니다 &lt;code&gt;.hie&lt;/code&gt; 의 사용자가 지정한대로로 확장 인터페이스 파일에 대한 파일 접미사를.</target>
        </trans-unit>
        <trans-unit id="181c112c9b1448494d00b3a0eb2345692c427713" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-hisuf&lt;/code&gt;/&lt;code&gt;-osuf&lt;/code&gt; game is particularly useful if you want to compile a program both with and without profiling, in the same directory. You can say:</source>
          <target state="translated">&lt;code&gt;-hisuf&lt;/code&gt; / &lt;code&gt;-osuf&lt;/code&gt; 당신이 같은 디렉토리에 프로파일 링없이 두 프로그램을 컴파일하려면 게임에 특히 유용합니다. 당신은 말할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9cfd0028b8c4e48cc0b0a43a4c0d4e8fc3d08a43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-no-hs-main&lt;/code&gt; flag can also be used to persuade the compiler to do the link step in &lt;a href=&quot;using#ghc-flag---make&quot;&gt;&lt;code&gt;--make&lt;/code&gt;&lt;/a&gt; mode when there is no Haskell &lt;code&gt;Main&lt;/code&gt; module present (normally the compiler will not attempt linking when there is no &lt;code&gt;Main&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;-no-hs-main&lt;/code&gt; 플래그도에 링크 단계를 수행하도록 컴파일러 설득하는 데 사용할 수 있습니다 &lt;a href=&quot;using#ghc-flag---make&quot;&gt; &lt;code&gt;--make&lt;/code&gt; &lt;/a&gt; 더 하스켈이없는 경우 모드 &lt;code&gt;Main&lt;/code&gt; 모듈 존재는 (어떤이없는 경우 일반적으로 컴파일러가 연결을 시도하지 않습니다 &lt;code&gt;Main&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cfb7b69d0673862e9ddfa0a4b5f54819de95e5d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-osuf&lt;/code&gt; ⟨suffix⟩ will change the &lt;code&gt;.o&lt;/code&gt; file suffix for object files to whatever you specify. We use this when compiling libraries, so that objects for the profiling versions of the libraries don&amp;rsquo;t clobber the normal ones.</source>
          <target state="translated">&lt;code&gt;-osuf&lt;/code&gt; ⟨suffix⟩이 변경됩니다 &lt;code&gt;.o&lt;/code&gt; 인 사용자가 지정한대로에 오브젝트 파일에 대한 파일 접미사를. 라이브러리를 컴파일 할 때이를 사용하여 라이브러리의 프로파일 링 버전에 대한 객체가 일반 객체를 방해하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="58fc191cffb134d6d4bcb21e65f27ae26e638ff7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-outputdir&lt;/code&gt; option is shorthand for the combination of &lt;a href=&quot;#ghc-flag--odir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-odir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghc-flag--hidir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-hidir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghc-flag--stubdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-stubdir
⟨dir⟩&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ghc-flag--dumpdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt;&lt;code&gt;-dumpdir ⟨dir⟩&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-outputdir&lt;/code&gt; 옵션의 조합에 대한 속기 &lt;a href=&quot;#ghc-flag--odir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-odir ⟨dir⟩&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghc-flag--hidir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-hidir ⟨dir⟩&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghc-flag--stubdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-stubdir ⟨dir⟩&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#ghc-flag--dumpdir%20%E2%9F%A8dir%E2%9F%A9&quot;&gt; &lt;code&gt;-dumpdir ⟨dir⟩&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9ae93959276ca239dd5463c43ee8f6f822a7abcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-package ⟨pkg⟩&lt;/code&gt; option also causes package ⟨pkg⟩ to be linked into the resulting executable or shared object. Whether a packages&amp;rsquo; library is linked statically or dynamically is controlled by the flag pair &lt;a href=&quot;phases#ghc-flag--static&quot;&gt;&lt;code&gt;-static&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt;&lt;code&gt;-dynamic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-package ⟨pkg⟩&lt;/code&gt; 의 옵션은 패키지 ⟨pkg⟩이 결과 실행 또는 공유 객체로 연결되도록합니다. 패키지 라이브러리가 정적으로 또는 동적으로 링크되는지 여부는 플래그 쌍 &lt;a href=&quot;phases#ghc-flag--static&quot;&gt; &lt;code&gt;-static&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt; &lt;code&gt;-dynamic&lt;/code&gt; 에&lt;/a&gt; 의해 제어됩니다 .</target>
        </trans-unit>
        <trans-unit id="712c183f0262639bdefc67f670ef5786d9f9839d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-qn&lt;/code&gt; flag may be useful when running with a large &lt;code&gt;-A&lt;/code&gt; value (so that GC is infrequent), and a large &lt;code&gt;-N&lt;/code&gt; value (so as to make use of hyperthreaded cores, for example). For example, on a 24-core machine with 2 hyperthreads per core, we might use &lt;code&gt;-N48 -qn24 -A128m&lt;/code&gt; to specify that the mutator should use hyperthreads but the GC should only use real cores. Note that this configuration would use 6GB for the allocation area.</source>
          <target state="translated">&lt;code&gt;-qn&lt;/code&gt; 큰 실행 플래그 때 유용 할 수 &lt;code&gt;-A&lt;/code&gt; 의 값 (GC가 빈번가되도록), 큰 &lt;code&gt;-N&lt;/code&gt; 에 (예를 들어, 하이퍼 때문에 코어 화장 용도에 관한) 값. 예를 들어 코어 당 2 개의 하이퍼 스레드가있는 24 코어 시스템에서 &lt;code&gt;-N48 -qn24 -A128m&lt;/code&gt; 을 사용하여 뮤 테이터가 하이퍼 스레드를 사용해야하지만 GC는 실제 코어 만 사용해야한다고 지정할 수 있습니다. 이 구성은 할당 영역에 6GB를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b8f8cb8014da701a79e6b46cb3e225b86d226612" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; is meant literally &amp;ndash; you should write two dots in your file. Note that the &lt;code&gt;where&lt;/code&gt; clause is still necessary to distinguish closed families from open ones. If you give any equations of a closed family, you must give all of them, in the same order as they appear in the accompanying Haskell file.</source>
          <target state="translated">은 &lt;code&gt;..&lt;/code&gt; 말 그대로 의미 - 당신은 당신의 파일에 두 개의 점을 작성해야합니다. 닫힌 패밀리와 열린 패밀리를 구별 하려면 &lt;code&gt;where&lt;/code&gt; 절이 여전히 필요합니다. 폐쇄 된 패밀리의 방정식을 제공하는 경우 첨부 된 Haskell 파일에 나타나는 순서대로 모든 방정식을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="83164f5917a7372adba9f0624f17681c738f05e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; is meant literally &amp;ndash; you should write two dots in your file. The &lt;code&gt;where&lt;/code&gt; clause distinguishes closed families from open ones.</source>
          <target state="translated">은 &lt;code&gt;..&lt;/code&gt; 말 그대로 의미 - 당신은 당신의 파일에 두 개의 점을 작성해야합니다. &lt;code&gt;where&lt;/code&gt; 절을 구별하는 열린 사람에서 가족을 마감했다.</target>
        </trans-unit>
        <trans-unit id="dcb0143d4440c731a3c677d373f63d932883b86d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hp&lt;/code&gt; file is generated incrementally as your program runs. In principle, running &lt;strong&gt;hp2ps&lt;/strong&gt; on the incomplete file should produce a snapshot of your program&amp;rsquo;s heap usage. However, the last sample in the file may be incomplete, causing &lt;strong&gt;hp2ps&lt;/strong&gt; to fail. If you are using a machine with UNIX utilities installed, it&amp;rsquo;s not too hard to work around this problem (though the resulting command line looks rather Byzantine):</source>
          <target state="translated">&lt;code&gt;.hp&lt;/code&gt; 파일은 프로그램이 실행으로 점진적으로 생성됩니다. 불완전한 파일 에서 &lt;strong&gt;hp2ps&lt;/strong&gt; 를 실행 &lt;strong&gt;하면&lt;/strong&gt; 프로그램 힙 사용량의 스냅 샷이 생성됩니다. 그러나 파일의 마지막 샘플이 불완전하여 &lt;strong&gt;hp2ps&lt;/strong&gt; 가 실패 할 수 있습니다. UNIX 유틸리티가 설치된 시스템을 사용하는 경우이 문제를 해결하기가 어렵지 않습니다 (명령 행은 비잔틴으로 보이지만).</target>
        </trans-unit>
        <trans-unit id="cc7ae67c0b8544a12cdcfe050a8d2d65b4d2d666" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:loc-at&lt;/code&gt; command requires &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt;&lt;code&gt;:set +c&lt;/code&gt;&lt;/a&gt; to be set.</source>
          <target state="translated">&lt;code&gt;:loc-at&lt;/code&gt; 명령이 필요합니다 &lt;a href=&quot;#ghci-cmd-:set%20+c&quot;&gt; &lt;code&gt;:set +c&lt;/code&gt; &lt;/a&gt; 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="868acbe7a67a816021798517632096beabaa53fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; 방법 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="245cbed390fbb3e5caa7e31d436f7995b13c904c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , 그리고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 에 대한 인스턴스 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 의 가 유효하기 때문에 전술이 포함되어 있습니다. 그러나 많은 경우 비효율적이며 일반적으로 피해야합니다. &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 전술 의 사례는 큰 효율성 문제 를 일으키지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="642ea10a7ef999e759dd2a8003076f1bb542bca1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , 그리고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 에 대한 인스턴스 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 의 가 유효하기 때문에 전술이 포함되어 있습니다. 그러나 많은 경우 비효율적이며 일반적으로 피해야합니다. &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 전술 의 사례는 큰 효율성 문제 를 일으키지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="a07f81de1f86161a74a26e3f56178d074bbb9cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , 그리고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 에 대한 인스턴스 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 의 가 유효하기 때문에 전술이 포함되어 있습니다. 그러나 많은 경우 비효율적이며 일반적으로 피해야합니다. &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 전술 의 사례는 큰 효율성 문제 를 일으키지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="2d902fab64461e51ee2d74548c6c487fbabdaebf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , 그리고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 에 대한 인스턴스 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; 의 가 유효하기 때문에 전술이 포함되어 있습니다. 그러나 많은 경우 비효율적이며 일반적으로 피해야합니다. &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; 전술 의 사례는 큰 효율성 문제 를 일으키지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="3c17f4dbd13e6f82990bc913e1553422faf7c0d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function ignores the environment, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; passes the inherited environment to both subcomputations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 하면서 기능은 환경을 무시 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 모두 subcomputations에 상속 된 환경을 통과한다.</target>
        </trans-unit>
        <trans-unit id="51a96013d171e823610e883b0dcca6ee8756149e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function leaves the state unchanged, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; uses the final state of the first computation as the initial state of the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 하면서 기능, 상태가 변경되지 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 제의 초기 상태로서 상기 제 계산의 최종 상태를 이용한다.</target>
        </trans-unit>
        <trans-unit id="d443b950974bb112ab951f3d2eeff5624ca7c870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 함수는 출력 생성 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 을 하면서 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 사용 subcomputations의 출력 결합 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="a5978bf75b4f58ddc37c3dcfcb955a35e4410f24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 함수는 출력 생성 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 을 하면서 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 사용 subcomputations의 출력 결합 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="eefac33165054643d0f820e7473410a1e3ca417e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 기능이 있지만, 통상의 값을 반환 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 제 예외에 종료. 오류 발생 후 계속되고 모든 오류를 수집하는 변형에 대해서는 &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="197b7d8676ceb906c4004a1522862a02b89f5e72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 기능이 있지만, 통상의 값을 반환 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 제 예외에 종료. 오류 발생 후 계속되고 모든 오류를 수집하는 변형에 대해서는 &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0e2a2bef52e7aaec2926a366a49ef4ff7f5dc015" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces that value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting if either computation does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 기능이 있지만, 그 값을 생성하는 연산을 수득 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 어느 연산이 종료 않는 경우, 두 서열 subcomputations.</target>
        </trans-unit>
        <trans-unit id="a772099ec423a1c20cd2f57c2352719bbfc68ad0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces the given value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting on the first exception.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 기능이 있지만, 주어진 값을 생성하는 연산을 수득 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 제 예외에 빠져, 두 서열 subcomputations.</target>
        </trans-unit>
        <trans-unit id="0c02e3b1c74fff6be8fd138b7b81638f5520f137" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a successful computation, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, failing on the first error.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 기능은 있지만, 성공 계산을 산출 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 제 에러 실패 서열 두 subcomputations.</target>
        </trans-unit>
        <trans-unit id="591c2084b78ba16832d7264b63d440c1c164a1fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt;, along with &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 방법은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 함수 와 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; 와 함께, &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fd5d1becb199aae7fcf8f5cddb1b46323f94938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; 대한 인스턴스 &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; 는 같은 목적을 위해 사용되는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 예.</target>
        </trans-unit>
        <trans-unit id="b9caf64cdefb09c64255eb7f22c88a16a5fc1ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; 대한 인스턴스 &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; 는 같은 목적을 위해 사용되는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 예.</target>
        </trans-unit>
        <trans-unit id="d633291de962b83e64a4f5366d8780f130fabd29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 정밀도의 16 개 진수 장소에 대한 유형 지원합니다. 94.2 %의 숫자에 대해이 함수와 &lt;code&gt;&lt;a href=&quot;data-text-lazy-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; 는 동일한 결과를 제공하지만 나머지 5.8 %의 경우이 함수는 소수 15 번째 자리에서 정밀도를 잃습니다. 0.001 %의 숫자의 경우이 함수는 소수점 13 ~ 14 번째 자리에서 정밀도를 잃습니다.</target>
        </trans-unit>
        <trans-unit id="d703712be7881bd93cfd2bc01dfee32118d427e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; type supports about 16 decimal places of accuracy. For 94.2% of numbers, this function and &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; give identical results, but for the remaining 5.8%, this function loses precision around the 15th decimal place. For 0.001% of numbers, this function will lose precision at the 13th or 14th decimal place.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 정밀도의 16 개 진수 장소에 대한 유형 지원합니다. 94.2 %의 숫자의 경우이 함수와 &lt;code&gt;&lt;a href=&quot;data-text-read#v:rational&quot;&gt;rational&lt;/a&gt;&lt;/code&gt; 는 동일한 결과를 제공하지만 나머지 5.8 %의 경우이 함수는 소수 15 번째 자리에서 정밀도를 잃습니다. 0.001 %의 숫자의 경우이 함수는 소수점 13 ~ 14 번째 자리에서 정밀도를 잃습니다.</target>
        </trans-unit>
        <trans-unit id="f8c0ff807ccff9eb26062cb229ca77b0ed057850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 인스턴스는 다음 과 같은 여러 파서의 결과를 추가하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9c784a6d7ab10d7763556a008a4766e1b2eda4a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 인스턴스는 다음 과 같은 여러 파서의 결과를 추가하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8d81a3f4c85b4191151075e8c67e5bf6b30eb413" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 대한 작업 &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 입니다 &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; 왼쪽 피연산자의 값을 선호한다. 경우 &lt;code&gt;m1&lt;/code&gt; 키 맵핑 &lt;code&gt;k&lt;/code&gt; 값에 대한 &lt;code&gt;a1&lt;/code&gt; , 및 &lt;code&gt;m2&lt;/code&gt; 는 다른 값에 대해 동일한 키를 맵핑 &lt;code&gt;a2&lt;/code&gt; 그들의 조합, &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; 매핑 &lt;code&gt;k&lt;/code&gt; 에 &lt;code&gt;a1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="886078b2aaab08d590ba45d81857ef8f5563600b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 대한 작업 &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 입니다 &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; 왼쪽 피연산자의 값을 선호한다. 경우 &lt;code&gt;m1&lt;/code&gt; 키 맵핑 &lt;code&gt;k&lt;/code&gt; 값에 대한 &lt;code&gt;a1&lt;/code&gt; , 및 &lt;code&gt;m2&lt;/code&gt; 는 다른 값에 대해 동일한 키를 맵핑 &lt;code&gt;a2&lt;/code&gt; 그들의 조합, &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; 매핑 &lt;code&gt;k&lt;/code&gt; 에 &lt;code&gt;a1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="519517bb832149c99d7d65f9e38c30f74e55d8c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; argument names the executable, and is interpreted according to the platform's standard policy for searching for executables. Specifically:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:FilePath&quot;&gt;FilePath&lt;/a&gt;&lt;/code&gt; 인수 이름 실행, 그리고 실행 파일 검색을위한 플랫폼의 표준 정책에 따라 해석됩니다. 구체적으로 특별히:</target>
        </trans-unit>
        <trans-unit id="9c0ad1ae490321b15fc5c17f80550d3243babef6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-60--42-&quot;&gt;&amp;lt;*&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dece6bc59608b974325c5124d02a6f75ef4c62d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</target>
        </trans-unit>
        <trans-unit id="f7a9c0b4e24f513886a0fe3de6f9f53dadcdf0d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</target>
        </trans-unit>
        <trans-unit id="1bc09e39326ac463b521633cc81f1ec225a8a20d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</target>
        </trans-unit>
        <trans-unit id="68eed02a9714eb35cf81751d72df7caa308a61f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-category#v:Category&quot;&gt;Category&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics are included because they are valid. However, they are inefficient in many cases and should usually be avoided. The instances for &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactics should not pose any major efficiency problems.</target>
        </trans-unit>
        <trans-unit id="7f2da1b81116404bb6e8b43cb3a0637a688bb46e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function ignores the environment, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; passes the inherited environment to both subcomputations.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function ignores the environment, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; passes the inherited environment to both subcomputations.</target>
        </trans-unit>
        <trans-unit id="260fcde2dc8277fbba23a670e261449948424309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function leaves the state unchanged, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; uses the final state of the first computation as the initial state of the second.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function leaves the state unchanged, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; uses the final state of the first computation as the initial state of the second.</target>
        </trans-unit>
        <trans-unit id="dc6d56b3f6d2c5e6f40ede452ae79b597fe5912c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; , while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1c0f713409cb9cf5a1a1a5c72fd485b5db43eb31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt;, while &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function produces the output &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; , while &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; combines the outputs of the subcomputations using &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mappend&quot;&gt;mappend&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7de8acf7cc9bc186692daa7881912af0fc23a852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1706a86dea612dae3883f17c7ddf1ff83583e970" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function returns a normal value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; exits on the first exception. For a variant that continues after an error and collects all the errors, see &lt;code&gt;&lt;a href=&quot;control-applicative-lift#v:Errors&quot;&gt;Errors&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56aecaa933008307756b2efe20503802422650bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces that value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting if either computation does.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces that value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting if either computation does.</target>
        </trans-unit>
        <trans-unit id="1cc201c4c6a6bfd3a1b5af7fbb6792cb6cd39609" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces the given value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting on the first exception.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a computation that produces the given value, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, exiting on the first exception.</target>
        </trans-unit>
        <trans-unit id="d623297a7b53d6225cb0faf61fb94fa727435ae3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a successful computation, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, failing on the first error.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; function yields a successful computation, while &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; sequences two subcomputations, failing on the first error.</target>
        </trans-unit>
        <trans-unit id="55ee7b9be2c0feeeaeb3c31adf4da82d6f854ddf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt;, along with &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; methods &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; , along with &lt;code&gt;&lt;a href=&quot;data-sequence#v:mapWithIndex&quot;&gt;mapWithIndex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="11b5bc40c86fffa7a6076174b1bffbac140f29df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</target>
        </trans-unit>
        <trans-unit id="f95780e47c020eeeda31a8c201eb535a8974578f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used for the same purposes as the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance.</target>
        </trans-unit>
        <trans-unit id="2acb16e4a1657fdc3b4413dfd0838f6380ef5ab8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</target>
        </trans-unit>
        <trans-unit id="a9de1cc1416c3082400d8b6dfbf1289ad2cbe6d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:ParsecT&quot;&gt;ParsecT&lt;/a&gt;&lt;/code&gt; is used to append the result of several parsers, for example:</target>
        </trans-unit>
        <trans-unit id="d955c1b4b45545a54049a0a44af93865745803be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; , which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt; , and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt; , then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1e8a62dc2c0577ea2e4fa388d91268432827035" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;, which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt;, then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; operation for &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-map-strict#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; , which prefers values from the left operand. If &lt;code&gt;m1&lt;/code&gt; maps a key &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;a1&lt;/code&gt; , and &lt;code&gt;m2&lt;/code&gt; maps the same key to a different value &lt;code&gt;a2&lt;/code&gt; , then their union &lt;code&gt;m1 &amp;lt;&amp;gt; m2&lt;/code&gt; maps &lt;code&gt;k&lt;/code&gt; to &lt;code&gt;a1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b8ec1a27d9645ead49a8fac70722d498afadafab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-applicative#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; functor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-applicative#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; 펑터.</target>
        </trans-unit>
        <trans-unit id="404d7369c3ed5cd7574fad867737a14afb444a12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; class is equivalent to &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt;: any monad gives rise to a &lt;code&gt;&lt;a href=&quot;control-arrow#t:Kleisli&quot;&gt;Kleisli&lt;/a&gt;&lt;/code&gt; arrow, and any instance of &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; defines a monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; 의 클래스에 상당 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; : 모든 모나드는 상승을 제공 &lt;code&gt;&lt;a href=&quot;control-arrow#t:Kleisli&quot;&gt;Kleisli&lt;/a&gt;&lt;/code&gt; 의 화살표를의 인스턴스 &lt;code&gt;&lt;a href=&quot;control-arrow#t:ArrowApply&quot;&gt;ArrowApply&lt;/a&gt;&lt;/code&gt; 모나드를 정의한다.</target>
        </trans-unit>
        <trans-unit id="712abe7e2f78e39742519eb3d9a6b4a2f4ce365d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; operator expresses computations in which an output value is fed back as input, although the computation occurs only once. It underlies the &lt;code&gt;rec&lt;/code&gt; value recursion construct in arrow notation. &lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; should satisfy the following laws:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; 계산 번만 발생하지만 운영자는, 출력값을 입력으로 다시 공급되는 연산을 나타낸다. 화살표 표기법으로 &lt;code&gt;rec&lt;/code&gt; 값 재귀 구성의 기초가 됩니다. &lt;code&gt;&lt;a href=&quot;control-arrow#v:loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; 는 다음 법칙을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="4d5ea08c77b20ca5949edb787e87c9bfc18d424c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-concurrent#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; action allows (forces, in a co-operative multitasking implementation) a context-switch to any other currently runnable threads (if any), and is occasionally useful when implementing concurrency abstractions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; 조치는 다른 현재 실행 가능한 스레드 (있는 경우)에의 (a 협동 멀티 태스킹 구현에 힘) 컨텍스트 스위치를 허용하고, 동시성 추상화를 구현할 때 가끔 유용하다.</target>
        </trans-unit>
        <trans-unit id="2aecf2fbfb3505dad21f83e912f2781f57633420" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; classes, with some useful operations on monads.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;control-monad#t:MonadPlus&quot;&gt;MonadPlus&lt;/a&gt;&lt;/code&gt; 모나드에 대한 몇 가지 유용한 작업과 클래스.</target>
        </trans-unit>
        <trans-unit id="e42cbe3850d6befefe426ee80a44a4c35d7e57b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class defines the basic operations over a &lt;em&gt;monad&lt;/em&gt;, a concept from a branch of mathematics known as &lt;em&gt;category theory&lt;/em&gt;. From the perspective of a Haskell programmer, however, it is best to think of a monad as an &lt;em&gt;abstract datatype&lt;/em&gt; of actions. Haskell's &lt;code&gt;do&lt;/code&gt; expressions provide a convenient syntax for writing monadic expressions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 통해 기본 동작을 정의 &lt;em&gt;모나드&lt;/em&gt; 로 알려진 수학의 지점에서, 개념을 &lt;em&gt;범주 이론&lt;/em&gt; . 그러나 Haskell 프로그래머의 관점에서 모나드는 &lt;em&gt;추상적 인 데이터&lt;/em&gt; 작업 &lt;em&gt;유형&lt;/em&gt; 으로 생각하는 것이 가장 좋습니다 . Haskell의 &lt;code&gt;do&lt;/code&gt; 표현식은 모나 딕 표현식을 작성하기위한 편리한 구문을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4fc32a4cddc34ade233961b4012b777dbb17097e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; allows us to chain together multiple actions which may fail, and fail overall if any of the individual steps failed. First we'll write a function that can either parse an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; from a &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;, or fail.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;control-monad#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 인스턴스를 사용하면 실패 할 수있는 여러 작업을 함께 연결할 수 있으며 개별 단계 중 하나라도 실패하면 전체적으로 실패 할 수 있습니다. 먼저 &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 를 파싱 ​​할 수있는 함수를 작성합니다 하거나 실패 .</target>
        </trans-unit>
        <trans-unit id="841e7fb83df459d53e389056b37c0fc15cd60e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; operations are not strict in the state. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 하고 &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; 조작 상태에 엄격하지 않다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="8492deac48ede758cea8f52bc65fb3e2f9ba2826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; operations are strict in the state (though not in values stored in the state). For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; 작업 (상태 값을 저장 아니지만) 상태에서 엄격하다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="27d5a6c8ea1acb5010f2c9679c264fd5c989ebdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; function is analogous to &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, except that its result is encapsulated in a monad. Note that &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; works from left-to-right over the list arguments. This could be an issue where &lt;code&gt;(&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;)&lt;/code&gt; and the `folded function' are not commutative.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; 의 기능과 유사하다 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; 그 결과 모나드에 캡슐화한다는 점을 제외. 참고 것을 &lt;code&gt;&lt;a href=&quot;control-monad#v:foldM&quot;&gt;foldM&lt;/a&gt;&lt;/code&gt; 가 에서 작동 왼쪽에서 오른쪽 목록 인수를 통해. 이 문제는 &lt;code&gt;(&lt;a href=&quot;control-monad#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;)&lt;/code&gt; 과 '접힌 함수'가 정식이 아닌 .</target>
        </trans-unit>
        <trans-unit id="9ee235b387a6a14db33bdf2a6b2158fa66bc38c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.</source>
          <target state="translated">은 &lt;code&gt;&lt;a href=&quot;control-monad#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 함수 종래 모나드 조인 연산자이다. 하나의 레벨의 모나 딕 구조를 제거하고 바인딩 된 인수를 외부 레벨로 투영하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b7e9731c305b0f549055c674d9ac68832bd130e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:mapAndUnzipM&quot;&gt;mapAndUnzipM&lt;/a&gt;&lt;/code&gt; function maps its first argument over a list, returning the result as a pair of lists. This function is mainly used with complicated data structures or a state monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:mapAndUnzipM&quot;&gt;mapAndUnzipM&lt;/a&gt;&lt;/code&gt; 의 기능은리스트의 쌍으로 결과를 반환 목록을 통해 자사의 첫 번째 인수를 매핑합니다. 이 기능은 주로 복잡한 데이터 구조 또는 상태 모나드와 함께 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="adfaa2036ac4e96d2cf9b7c53ce9041b46c41b72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad#v:zipWithM&quot;&gt;zipWithM&lt;/a&gt;&lt;/code&gt; function generalizes &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; to arbitrary applicative functors.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:zipWithM&quot;&gt;zipWithM&lt;/a&gt;&lt;/code&gt; 함수 는 zipWith를 일반화 &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 임의 실용적으로 펑.</target>
        </trans-unit>
        <trans-unit id="9e4c77f8896de4159de2b19d91214d29c830fc9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-instances#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class defines the basic operations over a &lt;em&gt;monad&lt;/em&gt;, a concept from a branch of mathematics known as &lt;em&gt;category theory&lt;/em&gt;. From the perspective of a Haskell programmer, however, it is best to think of a monad as an &lt;em&gt;abstract datatype&lt;/em&gt; of actions. Haskell's &lt;code&gt;do&lt;/code&gt; expressions provide a convenient syntax for writing monadic expressions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-instances#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 통해 기본 동작을 정의 &lt;em&gt;모나드&lt;/em&gt; 로 알려진 수학의 지점에서, 개념을 &lt;em&gt;범주 이론&lt;/em&gt; . 그러나 Haskell 프로그래머의 관점에서 모나드는 &lt;em&gt;추상적 인 데이터&lt;/em&gt; 작업 &lt;em&gt;유형&lt;/em&gt; 으로 생각하는 것이 가장 좋습니다 . Haskell의 &lt;code&gt;do&lt;/code&gt; 표현식은 모나 딕 표현식을 작성하기위한 편리한 구문을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="680d557813d267dc8f3ee06e2da84590ab3ebc77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; monad (also called the Environment monad). Represents a computation, which can read values from a shared environment, pass values from function to function, and execute sub-computations in a modified environment. Using &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; monad for such computations is often clearer and easier than using the &lt;code&gt;&lt;a href=&quot;control-monad-state#v:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; monad.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; 모나드 (또한 환경 모나드라고합니다). 공유 환경에서 값을 읽고 함수에서 값을 전달하며 수정 된 환경에서 하위 계산을 실행할 수있는 계산을 나타냅니다. 사용 &lt;code&gt;&lt;a href=&quot;control-monad-reader#t:Reader&quot;&gt;Reader&lt;/a&gt;&lt;/code&gt; 와 같은 계산에 모나드은 사용하는 것보다 종종 명확하고 쉽게 &lt;code&gt;&lt;a href=&quot;control-monad-state#v:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; 모나드를.</target>
        </trans-unit>
        <trans-unit id="81283641c0b20f0b2748a09d602fde66cbffe272" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; operation has a more complex type, so we need to use the special-purpose lifting function &lt;code&gt;liftCatch&lt;/code&gt; provided by most monad transformers. Here we use the &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:ReaderT&quot;&gt;ReaderT&lt;/a&gt;&lt;/code&gt; version followed by the &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt;&lt;/code&gt; version:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; 의 우리가 특수 목적 리프팅 기능을 사용할 필요가 있으므로 작업은 더 복잡한 유형이 &lt;code&gt;liftCatch&lt;/code&gt; 대부분의 모나드 변압기에서 제공합니다. 여기에 우리가 사용 &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:ReaderT&quot;&gt;ReaderT&lt;/a&gt;&lt;/code&gt; 에 의해 다음 버전 &lt;code&gt;&lt;a href=&quot;control-monad-trans-state-lazy#v:StateT&quot;&gt;StateT&lt;/a&gt;&lt;/code&gt; 의 버전 :</target>
        </trans-unit>
        <trans-unit id="545d7b475a316b28ef1da840a21adda70380c2c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; monad transformer extends a monad with the ability to exit the computation without returning a value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-trans-maybe#t:MaybeT&quot;&gt;MaybeT&lt;/a&gt;&lt;/code&gt; 모나드 변압기의 값을 리턴하지 않고 연산을 종료하는 기능을 확장 모나드.</target>
        </trans-unit>
        <trans-unit id="a2118806ea587f5911ee90a60aa429d89bdcab96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-array#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; function deals with repeated indices in the association list using an &lt;em&gt;accumulating function&lt;/em&gt; which combines the values of associations with the same index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-array#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; 의 사용 연관리스트에 반복 지수 함수와 상품 &lt;em&gt;축적 함수&lt;/em&gt; 인덱스와 같은 연관 값을 결합한다.</target>
        </trans-unit>
        <trans-unit id="0179248504c3fa08ab2a958c9b5147b68d6c33e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifind&quot;&gt;bifind&lt;/a&gt;&lt;/code&gt; function takes a predicate and a structure and returns the leftmost element of the structure matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifind&quot;&gt;bifind&lt;/a&gt;&lt;/code&gt; 함수 술어 및 구조 복귀 좌단 술어 일치 구조의 요소 또는 필요 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="87802a775d4245309a8eade317e7d18abe967e8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:biproduct&quot;&gt;biproduct&lt;/a&gt;&lt;/code&gt; function computes the product of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:biproduct&quot;&gt;biproduct&lt;/a&gt;&lt;/code&gt; 의 기능 구조의 수의 곱을 계산한다.</target>
        </trans-unit>
        <trans-unit id="e6a2674d1a15617e9adc9ceb2614394b34abbb43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisum&quot;&gt;bisum&lt;/a&gt;&lt;/code&gt; function computes the sum of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisum&quot;&gt;bisum&lt;/a&gt;&lt;/code&gt; 기능 구조의 수의 합을 계산한다.</target>
        </trans-unit>
        <trans-unit id="dc2ecd95ed8a8f0c6f2cf1d560aaa6d8aea4ed41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; class provides &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt;, methods to encode and decode a Haskell value to a lazy &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It mirrors the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; classes for textual representation of Haskell types, and is suitable for serialising Haskell values to disk, over the network.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary#t:Binary&quot;&gt;Binary&lt;/a&gt;&lt;/code&gt; 클래스는 제공 &lt;code&gt;&lt;a href=&quot;data-binary#v:put&quot;&gt;put&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-binary#v:get&quot;&gt;get&lt;/a&gt;&lt;/code&gt; , 인코딩하는 방법과 게으른에 하스켈 값 디코딩 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 . Haskell 유형의 텍스트 표현을 위해 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; 클래스를 미러링 하며 네트워크를 통해 Haskell 값을 디스크에 직렬화하는 데 적합합니다.</target>
        </trans-unit>
        <trans-unit id="fc3c4e321db0da5c60f5e57209330b5697cd8103" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; monad. A monad for efficiently building structures from encoded lazy ByteStrings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; 모나드. 인코딩 된 지연 ByteString으로부터 구조를 효율적으로 구축하기위한 모나드.</target>
        </trans-unit>
        <trans-unit id="4d3613093bfbb78cd7a2a16f8922cee7681b2bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumL&quot;&gt;bimapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt;; it traverses a structure from left to right, threading a state of type &lt;code&gt;a&lt;/code&gt; and using the given actions to compute new elements for the structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumL&quot;&gt;bimapAccumL&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt; ; 그 유형의 상태 스레딩, 왼쪽에서 오른쪽으로 구성 횡단 &lt;code&gt;a&lt;/code&gt; 하고 새로운 구조 요소를 계산하기 위해 소정의 액션을 사용한다.</target>
        </trans-unit>
        <trans-unit id="9a87ec27622ff13e398e24344f3a64ac0e1395d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumR&quot;&gt;bimapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt;; it traverses a structure from right to left, threading a state of type &lt;code&gt;a&lt;/code&gt; and using the given actions to compute new elements for the structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bitraversable#v:bimapAccumR&quot;&gt;bimapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bifoldl&quot;&gt;bifoldl&lt;/a&gt;&lt;/code&gt; ; 그 유형의 상태 스레딩, 오른쪽에서 왼쪽으로 구조를 가로 지르는 &lt;code&gt;a&lt;/code&gt; 하고 새로운 구조 요소를 계산하기 위해 소정의 액션을 사용.</target>
        </trans-unit>
        <trans-unit id="48db54c46d3aa624ae5d297b1ebeb1fa3977d71b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bits#t:Bits&quot;&gt;Bits&lt;/a&gt;&lt;/code&gt; class defines bitwise operations over integral types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bits#t:Bits&quot;&gt;Bits&lt;/a&gt;&lt;/code&gt; 클래스 정의는 정수형을 통해 작업을 비트 단위.</target>
        </trans-unit>
        <trans-unit id="0ad9b411edb3c5e8c1b9471ab75ecc126a6721eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bits#t:FiniteBits&quot;&gt;FiniteBits&lt;/a&gt;&lt;/code&gt; class denotes types with a finite, fixed number of bits.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bits#t:FiniteBits&quot;&gt;FiniteBits&lt;/a&gt;&lt;/code&gt; 의 클래스 비트 한정된 고정 수와 종류를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="20817eeecc682279fcdb27f8168c9dc5e0bd900f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; type and related functions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; 유형 및 관련 기능.</target>
        </trans-unit>
        <trans-unit id="0ac698df5fa5f3ca66ad118ffad20bf3b266295d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 의 함수 술어 및 소요 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 를 술어를 만족 ByteString의 첫 번째 요소의 인덱스를 반환한다.</target>
        </trans-unit>
        <trans-unit id="a88a45076c0dfb13c7596a49a77c0da26a873595" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 을 오름차순 술어를 만족하는 모든 원소의 인덱스를 반환하여.</target>
        </trans-unit>
        <trans-unit id="d89ae35b30db39f44c3fe60d6b3d04049f068a4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 함수 ByteString 소요 결과 병합이 인수 동일하도록 ByteStrings의리스트를 반환한다. 또한 결과의 각 하위 목록에는 동일한 요소 만 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="4ee4acaf8e9d95a9f5ef4c31e80b5ce11a67d031" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 기능의 비 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6e617691064b9b4b87d847163f54ff7d363170a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ; ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 왼쪽에서 오른쪽으로 전달하고이 누산기의 최종 값을 새 목록과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2ea34718a3c5162fce3eb666e6adf60a8a7d062c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;data-bytestring#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 ByteString과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fd51442d30fe2b55d7fe46723f9d58913d2aa41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 함수는의 행과 열 전치 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 인수를.</target>
        </trans-unit>
        <trans-unit id="c1aa92f924157b1d391e0c5573f2c097c3b5ec16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:BufferWriter&quot;&gt;BufferWriter&lt;/a&gt;&lt;/code&gt; itself is an IO action: you supply it with a buffer (as a pointer and length) and it will write data into the buffer. It returns a number indicating how many bytes were actually written (which can be &lt;code&gt;0&lt;/code&gt;). It also returns a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; which describes what comes next.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:BufferWriter&quot;&gt;BufferWriter&lt;/a&gt;&lt;/code&gt; 자체는 IO 작업입니다 : 당신은 (포인터와 길이로) 버퍼로 공급하며 버퍼에 데이터를 기록합니다. 실제로 쓴 바이트 수를 나타내는 숫자를 리턴합니다 ( &lt;code&gt;0&lt;/code&gt; 일 수 있음 ). 또한 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-extra#t:Next&quot;&gt;Next&lt;/a&gt;&lt;/code&gt; 오는 것을 설명 하는 Next 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ea2d270840cc8c9daa194a459da571d928cff274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting a zero-length sequence of bytes. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 는 바이트 길이 제로의 순서를 나타내는. 이 함수는 다시 쓰기 규칙에서만 사용하도록 내 보냅니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="77e9d20b09fe3cb5d3e34c82f2d34d8c4d1fbd52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting a zero-length sequence of bytes. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; denoting a zero-length sequence of bytes. This function is only exported for use in rewriting rules. Use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-monoid#v:mempty&quot;&gt;mempty&lt;/a&gt;&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="02c6b6ed74cc07d8a8ef6b6a51e39f07fbdde207" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 항상 길이 제로의 순서로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="386c97767c9a0e690099a424827f366fbf618180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 항상 길이 제로의 순서로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e4a29465a0ac4c8f6fffb025991665c12b63f1c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--42--60-&quot;&gt;(&amp;gt;*&amp;lt;)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--36--60-&quot;&gt;(&amp;gt;$&amp;lt;)&lt;/a&gt;&lt;/code&gt; pairing and mapping operators can be used with &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--42--60-&quot;&gt;(&amp;gt;*&amp;lt;)&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#v:-62--36--60-&quot;&gt;(&amp;gt;$&amp;lt;)&lt;/a&gt;&lt;/code&gt; 페어링 및 매핑 연산자와 함께 사용할 수 있습니다 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cdd16a4104dcd27da4c5d7c015155569458cf5d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:BoundedPrim&quot;&gt;BoundedPrim&lt;/a&gt;&lt;/code&gt; 항상 길이 제로의 순서로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f5ca076d9cd96bbcd373168527623c2c7280cd67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; that always results in the zero-length sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-prim-internal#t:FixedPrim&quot;&gt;FixedPrim&lt;/a&gt;&lt;/code&gt; 항상 길이 제로의 순서로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="34fcdbaf6996fe7f65d389f0c0fdfc1f2f89c754" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 의 함수 술어 및 소요 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 를 술어를 만족 ByteString의 첫 번째 요소의 인덱스를 반환한다.</target>
        </trans-unit>
        <trans-unit id="2808d77c990696b44b127af7d539f85921526158" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 을 오름차순 술어를 만족하는 모든 원소의 인덱스를 반환하여.</target>
        </trans-unit>
        <trans-unit id="3b2f3c13460a923ec70902424b286392ebcf4ee2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 함수 ByteString 소요 결과 병합이 인수 동일하도록 ByteStrings의리스트를 반환한다. 또한 결과의 각 하위 목록에는 동일한 요소 만 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="011ecd68a05489bd1b20ac9d77a9cea0655b8352" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 기능의 비 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="72cc5f08d56e30d247f072343ee4d0e1aa87e68f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ; ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 왼쪽에서 오른쪽으로 전달하고이 누산기의 최종 값을 새 목록과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c9e160c9ad7473babd1af40af00cbf0162bdef7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 ByteString과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="83f55a6f846dc49344b68895528bedee225f9b95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 함수는의 행과 열 전치 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 인수를.</target>
        </trans-unit>
        <trans-unit id="cfef4b206c70c32eec3092e778efb683d81d66b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; function is analogous to the &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; function, on words.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; 기능은 유사 &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; 의 단어, 기능.</target>
        </trans-unit>
        <trans-unit id="1d758a0f563300419f025322f07bdf29baaf99ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 의 함수 술어 및 소요 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 를 술어를 만족 ByteString의 첫 번째 요소의 인덱스를 반환한다.</target>
        </trans-unit>
        <trans-unit id="bc3fedbb007a3889a87db49cdfcce211f6dec12f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 을 오름차순 술어를 만족하는 모든 원소의 인덱스를 반환하여.</target>
        </trans-unit>
        <trans-unit id="11978bfbf1d81f38393dc6440b94501585d47dc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 함수 ByteString 소요 결과 병합이 인수 동일하도록 ByteStrings의리스트를 반환한다. 또한 결과의 각 하위 목록에는 동일한 요소 만 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="063223aebad86f89a99e6e89e5807a67aa057281" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 기능의 비 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de39eec2cad2fac68f9d8a352ebb2380e3936c42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; 기능은 얻어 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 및 산재 ''의 요소 사이의 바이트 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 를 . Lists의 intersperse 기능과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="6625add11fa1e445312d92a0c6788839896adacf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;. It is analogous to the intersperse function on Lists.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and `intersperses' that byte between the elements of the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; . It is analogous to the intersperse function on Lists.</target>
        </trans-unit>
        <trans-unit id="8b89a766d13b74128a8333abb002900f94b6b437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ; ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 왼쪽에서 오른쪽으로 전달하고이 누산기의 최종 값을 새 ByteString과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c773ca1b34d782e061cf0d6996806a66376f97f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 ByteString과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="612dd81abb27b510de3a02ab1ed120cd76a9a6a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 함수는의 행과 열 전치 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 인수를.</target>
        </trans-unit>
        <trans-unit id="b02cc89d4861343dc4906429c0519e1e575b9b01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; and returns the index of the first element in the ByteString satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 의 함수 술어 및 소요 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 를 술어를 만족 ByteString의 첫 번째 요소의 인덱스를 반환한다.</target>
        </trans-unit>
        <trans-unit id="89e6612f1c49c256bb1909e6d5ea7235d2f56477" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 을 오름차순 술어를 만족하는 모든 원소의 인덱스를 반환하여.</target>
        </trans-unit>
        <trans-unit id="0683ca6fb89db86c531b2e317168c1b2a68d2259" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a ByteString and returns a list of ByteStrings such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 함수 ByteString 소요 결과 병합이 인수 동일하도록 ByteStrings의리스트를 반환한다. 또한 결과의 각 하위 목록에는 동일한 요소 만 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="7f63028123ecc27ee69e82bdcdeb63da564a6078" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 기능의 비 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e9318a5a01ea45d555a0875fa484d9ff476c3e0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ; ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 왼쪽에서 오른쪽으로 전달하고이 누산기의 최종 값을 새 ByteString과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e142671c8576be4ab4d32dbd1993a19bfee360ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a ByteString, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new ByteString.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 ByteString의 각 요소에 함수를 적용하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 ByteString과 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="21e9a6162eb970619d9172486dd0b5106006c4bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 함수는의 행과 열 전치 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 의 인수를.</target>
        </trans-unit>
        <trans-unit id="981ef85d841145750af6b8e72525229c75f0ae12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; function is analogous to the &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; function, on words.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; 기능은 유사 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; 의 단어, 기능.</target>
        </trans-unit>
        <trans-unit id="70b1e8ad66966b19620f6916e96d89ef82853d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; class comprehends a fundamental primitive &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; for folding over constructor applications, say terms. This primitive can be instantiated in several ways to map over the immediate subterms of a term; see the &lt;code&gt;gmap&lt;/code&gt; combinators later in this class. Indeed, a generic programmer does not necessarily need to use the ingenious gfoldl primitive but rather the intuitive &lt;code&gt;gmap&lt;/code&gt; combinators. The &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; primitive is completed by means to query top-level constructors, to turn constructor representations into proper terms, and to list all possible datatype constructors. This completion allows us to serve generic programming scenarios like read, show, equality, term generation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 클래스는 기본적인 원시 이해한다 &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; 를 생성자 응용 프로그램을 통해 접는 용어들은 말한다. 이 기본 요소는 여러 가지 방법으로 인스턴스화하여 용어의 즉각적인 하위 용어를 맵핑 할 수 있습니다. 이 클래스 후반에 있는 &lt;code&gt;gmap&lt;/code&gt; 결합기를 참조하십시오 . 실제로, 일반 프로그래머는 반드시 독창적 인 gfoldl 프리미티브가 아니라 직관적 인 &lt;code&gt;gmap&lt;/code&gt; 결합기를 사용해야합니다 . &lt;code&gt;&lt;a href=&quot;data-data#v:gfoldl&quot;&gt;gfoldl&lt;/a&gt;&lt;/code&gt; 프리미티브는 적절한 조건으로 생성자 표현을 설정하고, 모든 가능한 데이터 유형을 나열 생성자 쿼리 최상위 생성자에 의해 완성된다. 이 완료를 통해 읽기, 표시, 평등, 용어 생성과 같은 일반적인 프로그래밍 시나리오를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a4e313748880e797d1bcb646d76cb8547d19d57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type is sometimes used to represent a value which is either correct or an error; by convention, the &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; constructor is used to hold an error value and the &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; constructor is used to hold a correct value (mnemonic: &quot;right&quot; also means &quot;correct&quot;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 유형은 종종 하나 또는 정확한 오류라고하는 값을 나타내는 데 사용된다; 일반적으로 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 생성자는 오류 값 을 보유하는 데 사용되고 &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 생성자는 올바른 값을 보유하는 데 사용됩니다 (니모닉 : &quot;right&quot;는 &quot;correct&quot;를 의미 함).</target>
        </trans-unit>
        <trans-unit id="f0e4baff05206c672300bb2b38395a9530159b34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type represents values with two possibilities: a value of type &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt; a b&lt;/code&gt; is either &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 유형은 두 가지 가능성으로 값을 나타냄 타입의 값 &lt;code&gt;&lt;a href=&quot;data-either#t:Either&quot;&gt;Either&lt;/a&gt; a b&lt;/code&gt; 하나 인 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt; a&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt; b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1c8bc066a25dbdc9345dc643976410a0121b2ada" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; class defines equality (&lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;) and inequality (&lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt;). All the basic datatypes exported by the &lt;a href=&quot;prelude&quot;&gt;Prelude&lt;/a&gt; are instances of &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; may be derived for any datatype whose constituents are also instances of &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">그만큼 &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 클래스 정의를 항등 ( &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; ) 불평등 ( &lt;code&gt;&lt;a href=&quot;data-eq#v:-47--61-&quot;&gt;/=&lt;/a&gt;&lt;/code&gt; ). &lt;a href=&quot;prelude&quot;&gt;Prelude에서&lt;/a&gt; 내 보낸 모든 기본 데이터 유형은 &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 의 인스턴스이며, &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 는 구성 요소가 &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 의 인스턴스 인 모든 데이터 유형에 대해 파생 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69af3900bc4a32d170db2d927f8de7596335e0e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; instances traverse the real part first.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 인스턴스 먼저 실수 부분을 통과.</target>
        </trans-unit>
        <trans-unit id="5eff372cb874b6edeef6ee4a0a04355990bb5ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a structure and returns the leftmost element of the structure matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; 기능은 술어와 구조 및 반환 왼쪽 술어 일치하는 구조의 요소 또는 소요 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="168798718c8d67f564d095b7f2c27b1f23db19a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 기능 구조의 수의 곱을 계산한다.</target>
        </trans-unit>
        <trans-unit id="7cca4119f8a53ddfe67d87125c91cc29b78f8689" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 기능 구조의 수의 합을 계산한다.</target>
        </trans-unit>
        <trans-unit id="f9699a12c867a28d982d3293073c01ca1c9af29d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; from our &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; instance will ignore &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; values, but will apply the supplied function to values contained in a &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">그만큼 &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; 인스턴스 fmap 은 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 값을 무시하지만 제공된 함수를 &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 에 포함 된 값에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="b77100b25e8a5a0820122925237280bb25f1620c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; function is also available as the infix operator &lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 함수의 기능은 또한 중위 연산자 가능 &lt;code&gt;&lt;a href=&quot;data-functor#v:-60--36--62-&quot;&gt;&amp;lt;$&amp;gt;&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="75d054c2f2cab23d848c32214fa7c03446c931b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-functor-const#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; functor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-functor-const#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt; 펑터.</target>
        </trans-unit>
        <trans-unit id="91affd44c758dc656c5a465b34202e2474e6eec1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-graph#t:Graph&quot;&gt;Graph&lt;/a&gt;&lt;/code&gt; type is an adjacency list representation of a finite, directed graph with vertices of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-graph#t:Graph&quot;&gt;Graph&lt;/a&gt;&lt;/code&gt; 형태는 유한의 인접리스트 표현 형식의 정점으로 향하는 그래프 &lt;code&gt;Int&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="da965f8602a83550c13d9322bdab8f201adad863" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-graph#t:SCC&quot;&gt;SCC&lt;/a&gt;&lt;/code&gt; type represents a &lt;a href=&quot;https://en.wikipedia.org/wiki/Strongly_connected_component&quot;&gt;strongly-connected component&lt;/a&gt; of a graph.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-graph#t:SCC&quot;&gt;SCC&lt;/a&gt;&lt;/code&gt; 의 유형은 대표 &lt;a href=&quot;https://en.wikipedia.org/wiki/Strongly_connected_component&quot;&gt;강하게 연결된 구성 요소&lt;/a&gt; 그래프의이.</target>
        </trans-unit>
        <trans-unit id="b13b673bb0340c3f60ad133cedd86aba2eebb7ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; argument specifies a &lt;em&gt;capability number&lt;/em&gt; (see &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;). Typically capabilities correspond to physical processors, but the exact behaviour is implementation-dependent. The value passed to &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo the total number of capabilities as returned by &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 인수가 지정하는 &lt;em&gt;기능 번호를&lt;/em&gt; (참조 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 을 ). 일반적으로 기능은 실제 프로세서에 해당하지만 정확한 동작은 구현에 따라 다릅니다. 에 전달 된 값 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 은 에 의해 반환 기능의 총 수를 모듈로 해석된다 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5f78d4fb8fef90bc420e0f272097151354016eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; argument specifies a &lt;em&gt;capability number&lt;/em&gt; (see &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;). Typically capabilities correspond to physical processors, but the exact behaviour is implementation-dependent. The value passed to &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo the total number of capabilities as returned by &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 인수가 지정하는 &lt;em&gt;기능 번호를&lt;/em&gt; (참조 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 을 ). 일반적으로 기능은 실제 프로세서에 해당하지만 정확한 동작은 구현에 따라 다릅니다. 에 전달 된 값 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 은 에 의해 반환 기능의 총 수를 모듈로 해석된다 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="990e9e27ae850a84a5975a64be27bfdd1b9f5808" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; argument specifies a &lt;em&gt;capability number&lt;/em&gt; (see &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;). Typically capabilities correspond to physical processors, but the exact behaviour is implementation-dependent. The value passed to &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo the total number of capabilities as returned by &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 인수가 지정하는 &lt;em&gt;기능 번호를&lt;/em&gt; (참조 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; 을 ). 일반적으로 기능은 실제 프로세서에 해당하지만 정확한 동작은 구현에 따라 다릅니다. 에 전달 된 값 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 은 에 의해 반환 기능의 총 수를 모듈로 해석된다 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:getNumCapabilities&quot;&gt;getNumCapabilities&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="26c55fb3d34eb375b02ebba32fb7b2dd27c91fb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from keys of type &lt;code&gt;Int&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">그만큼 &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; 유형이 유형의 키에서 (때로는 사전이라고 함) 유한지도 나타냅니다 &lt;code&gt;Int&lt;/code&gt; 형의 값으로 &lt;code&gt;v&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9babf39e61d88f08afacef329c45b58b748886e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict&lt;/a&gt; then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 기능은 게으른 엄격한 모듈에 의해 공유됩니다. 병합 전술의 선택 만이 엄격 성을 결정합니다. 당신이 사용하는 경우 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict&lt;/a&gt; 에서 mapMissing결과가 삽입되기 전에 강제 적용됩니다. 이 모듈에서 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; 을 사용하면 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="918fcfe1bbabd9b098a3357af6b4c10845874e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy&lt;/a&gt; then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 기능은 게으른 엄격한 모듈에 의해 공유됩니다. 병합 전술의 선택 만이 엄격 성을 결정합니다. 당신이 사용하는 경우 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; 이 모듈에서 mapMissing하면 결과가 삽입되기 전에 결과가 적용됩니다. &lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy&lt;/a&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; 을 사용하면 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e82dc1c0b8d264abe9b7b565b8cd539e1dbf5c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from key of type &lt;code&gt;Int&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">그만큼 &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; 유형이 유형의 키에서 (때로는 사전이라고 함) 유한지도 나타냅니다 &lt;code&gt;Int&lt;/code&gt; 형의 값으로 &lt;code&gt;v&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1641ed0171bfd491e6f0e6638191a7945a81dba8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Traversable&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; 의 유형은 동일한 것을 의미하는 엄격한 지연 모듈간에 공유 &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; 의 값은 모두 기능 모듈로 전달 될 수있다. 이것은 &lt;code&gt;Functor&lt;/code&gt; , &lt;code&gt;Traversable&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 인스턴스가 &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; 모듈 과 동일 하므로 사용 된 경우 결과 맵에 일시 중단 된 값 (썽크)이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d01cac285dd99db980e4e71910e5f17ef1269f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Traversable&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;Functor&lt;/code&gt; , &lt;code&gt;Traversable&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</target>
        </trans-unit>
        <trans-unit id="ca6e272f4b13fc32e4e87c18c5a09335a1d8e5ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from key of type &lt;code&gt;Int&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt; v&lt;/code&gt; 유형이 유형의 키에서 (때로는 사전이라고 함) 유한지도 나타냅니다 &lt;code&gt;Int&lt;/code&gt; 형의 값으로 &lt;code&gt;v&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="318814e0b6ddaa927c58b1267d22b77390f5ece2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; 의 유형은 동일한 것을 의미하는 엄격한 지연 모듈간에 공유 &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; 의 값은 모두 기능 모듈로 전달 될 수있다. 이는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 인스턴스가 &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; 모듈 과 동일 하므로 사용 된 경우 결과 맵에 일시 중단 된 값 (썽크)이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="352aafc40cb132717ac79f053c1b34a159a6c7a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#t:IntMap&quot;&gt;IntMap&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#t:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-intmap-lazy&quot;&gt;Data.IntMap.Lazy&lt;/a&gt; module, so if they are used the resulting map may contain suspended values (thunks).</target>
        </trans-unit>
        <trans-unit id="89f7bb2231b7f0bb854265a80968d382d2ee4a72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; type represents a set of elements of type &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; 의 타입 타입의 요소 세트 나타내는 &lt;code&gt;Int&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="235975fc327cbd37e2885a32990dd1d50e6ef2a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; class is used to map a contiguous subrange of values in a type onto integers. It is used primarily for array indexing (see the array package).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 클래스는 정수 상에 형의 값의 연속 부분 범위를 매핑하는 데 사용됩니다. 주로 배열 인덱싱에 사용됩니다 (어레이 패키지 참조).</target>
        </trans-unit>
        <trans-unit id="213033fe7d1bfa8957877f18a3b95df927b829f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; class is used to map a contiguous subrange of values in type onto integers. It is used primarily for array indexing (see the array package). &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; uses row-major order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 클래스는 정수로 형의 값의 연속 부분 범위를 매핑하는 데 사용됩니다. 주로 배열 인덱싱에 사용됩니다 (어레이 패키지 참조). &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 는 행 주요 순서를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1c9726b499ba205a67e8661afa56b3f5e6610bf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; function is list difference (non-associative). In the result of &lt;code&gt;xs&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt;&lt;code&gt;ys&lt;/code&gt;, the first occurrence of each element of &lt;code&gt;ys&lt;/code&gt; in turn (if any) has been removed from &lt;code&gt;xs&lt;/code&gt;. Thus</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; 의 기능 목록 차 (비 결합)이다. 결과에서 &lt;code&gt;xs&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-list#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; &lt;code&gt;ys&lt;/code&gt; , 각 요소의 첫 번째 발생 &lt;code&gt;ys&lt;/code&gt; 차례로 (있는 경우)에서 제거 된 &lt;code&gt;xs&lt;/code&gt; . 그러므로</target>
        </trans-unit>
        <trans-unit id="d02a0fb924a1fb516ed51240226d0d6e5d964fd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; function takes a predicate and two lists and returns the first list with the first occurrence of each element of the second list removed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; 의 함수 술어 두리스트를 취하고 제거 번째 목록의 각 요소의 최초 발생에 첫 번째 목록을 반환한다.</target>
        </trans-unit>
        <trans-unit id="0d81ce03e6c4879c98e79164e27980ccd4245607" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; function drops the largest suffix of a list in which the given predicate holds for all elements. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; 의 함수는 주어진 술어 모든 요소에 보유 된리스트의 최대 접미사 떨어진다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8e6ebb6facf4e5e8507546d0730cd3d8aaa7cdbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given list which is equal (by &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;) to the query element, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; 의 함수 (동일한 의해 지정된리스트의 첫 번째 요소의 인덱스를 반환 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 질의 요소 또는 행) &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우를.</target>
        </trans-unit>
        <trans-unit id="35376b9066c242bc547e361977a97acd67654b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;data-list#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; 를 오름차순으로, 모든 요소의 인덱스는 쿼리 소자 동일 반환하여.</target>
        </trans-unit>
        <trans-unit id="777c2200547e9739ba52a7633b954736b9823c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; function is just &lt;code&gt;&lt;a href=&quot;control-monad#v:mfilter&quot;&gt;mfilter&lt;/a&gt;&lt;/code&gt; specialized to the list monad:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; 기능은 그냥 &lt;code&gt;&lt;a href=&quot;control-monad#v:mfilter&quot;&gt;mfilter&lt;/a&gt;&lt;/code&gt; 리스트 모나드에 전문 :</target>
        </trans-unit>
        <trans-unit id="a5d8b6f3eaba5030a68bf5d06e480657d33033a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a structure and returns the leftmost element of the structure matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; 기능은 술어와 구조 및 반환 왼쪽 술어 일치하는 구조의 요소 또는 소요 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="75b2422f251ce2039aaef3829d2dd5ca0ff38fd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a list and returns the index of the first element in the list satisfying the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 의 함수는 술어와리스트를 취해 조건을 만족하는 목록의 첫 번째 요소의 인덱스를 반환하거나 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="9ea9c7c9c9ab7b6e747e9ebc107dbbfddd67c972" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;data-list#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 을 오름차순 술어를 만족하는 모든 원소의 인덱스를 반환하여.</target>
        </trans-unit>
        <trans-unit id="be32822442735a04d54fa68d012d24ba5b89a668" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to drop.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 드롭 소자의 수와 같은 값.</target>
        </trans-unit>
        <trans-unit id="2812d742b2328d1abd314aebeef9aa75d01e9698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-list#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt; 모든 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 값을 인덱스로 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="737fc86009d880ef7008902e996d5561992367bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of repetitions to make.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 반복 횟수를 확인하기 위해 값.</target>
        </trans-unit>
        <trans-unit id="3402cafa3322e6ce9bc65e493a0acf1f2884672d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the position at which to split.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 분할하는 위치로서 값.</target>
        </trans-unit>
        <trans-unit id="f78c90a57d5cce824e07db93d2197f95aa21a155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to take.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 취할 소자의 수와 같은 값.</target>
        </trans-unit>
        <trans-unit id="ca4d378c787c5b9b2a06ae77c402a921da5aae20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a list and returns a list of lists such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 기능 목록을 취하여 결과 병합이 인수 동일하도록리스트의 목록을 반환한다. 또한 결과의 각 하위 목록에는 동일한 요소 만 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="b33d3992fa75b8c5a7295f072191cef6471b5d58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 기능의 비 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-list#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a2aa0c2fff9d0cd85f48ee4e5c547b1e24beae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; function returns all initial segments of the argument, shortest first. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; 는 짧은 첫째, 반환에게 인수의 모든 초기 세그먼트를 작동합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="e70f04ea60546783e780339c103b21d6a6b67467" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; function takes the list intersection of two lists. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; 기능은 두 목록의 목록 교차합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="a6dc46001b61fa48ad57e1c564b945db378bd949" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; 의 기능의 비 오버로드 된 버전입니다 &lt;code&gt;&lt;a href=&quot;data-list#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1446aaefcfea8557eabaae6ea889f9011ff1bbe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is contained, wholly and intact, anywhere within the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:isInfixOf&quot;&gt;isInfixOf&lt;/a&gt;&lt;/code&gt; 의 기능은 두 개의 목록 및 반환 소요 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 어디서나 초 이내에 전적으로 그대로, 포함 된 첫 번째 목록 IFF를.</target>
        </trans-unit>
        <trans-unit id="8577e2ac2954a5de0cd6238c09ea92a58c9fb7f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:isSubsequenceOf&quot;&gt;isSubsequenceOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if all the elements of the first list occur, in order, in the second. The elements do not have to occur consecutively.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:isSubsequenceOf&quot;&gt;isSubsequenceOf&lt;/a&gt;&lt;/code&gt; 의 기능은 두리스트를 받아 반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 제리스트의 요소가 발생하는 모든 경우에 두 번째 순서. 요소가 연속적으로 발생할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="4a40ec49296ced12343a8fd18ca5c49b63aabe04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; function takes two lists and returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff the first list is a suffix of the second. The second list must be finite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:isSuffixOf&quot;&gt;isSuffixOf&lt;/a&gt;&lt;/code&gt; 의 기능은 두 개의리스트를 받아 반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 첫 번째 목록이 두 번째의 접미사입니다 IFF에. 두 번째 목록은 유한해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b34469353a0b037b47cce6d230cb4cb71110874" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 함수 및 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ; 이 함수는 구조의 각 요소에 함수를 적용하여 누적 매개 변수를 왼쪽에서 오른쪽으로 전달하고이 누적 기의 최종 값을 새 구조와 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b6ebf56806d59584f196cd5d11b8904d0639b1d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 함수 와 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 구조체의 각 요소에 함수를 적용하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 구조와 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7eb6f6e78bb431c6ad213eb9d21c75fa95dc7ddf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt;, except it uses a user-supplied equality predicate instead of the overloaded &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; 단지와 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; , 대신 과부하의 사용자 제공 동등 술어 사용 제외 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="fc7232b1ebffbebb739ba096d41e32596b9eedb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate a list and returns the pair of lists of elements which do and do not satisfy the predicate, respectively; i.e.,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; 기능 목록 술어 소요 할 각각 술어를 만족하지 않는 요소들의리스트의 한 쌍의 리턴; 즉,</target>
        </trans-unit>
        <trans-unit id="2b6ed649212daaa5b7d86c6ccef6bf66b085c1db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:permutations&quot;&gt;permutations&lt;/a&gt;&lt;/code&gt; function returns the list of all permutations of the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:permutations&quot;&gt;permutations&lt;/a&gt;&lt;/code&gt; 반환에게 인수의 모든 순열의 목록을 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2f287658e3d55e31f32fe140091016332ce08537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 기능 구조의 수의 곱을 계산한다.</target>
        </trans-unit>
        <trans-unit id="a463a93b298d3088c6a486752b752d20e4b0de19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; function implements a stable sorting algorithm. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 기능 구현은 안정적인 알고리즘을 정렬. &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 의 특수한 경우로 , 프로그래머가 자체 비교 기능을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="095b73e07b36153b051dcf74ac3cefd56274581f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 의 기능의 비 오버로드 된 버전입니다 &lt;code&gt;&lt;a href=&quot;data-list#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b88e9d47462c1b9615bcd7d7acc05eba51c65b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:subsequences&quot;&gt;subsequences&lt;/a&gt;&lt;/code&gt; function returns the list of all subsequences of the argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:subsequences&quot;&gt;subsequences&lt;/a&gt;&lt;/code&gt; 반환에게 인수의 모든 서브 시퀀스의 목록을 작동합니다.</target>
        </trans-unit>
        <trans-unit id="eff98324d1a84c781b046e919d0b375a374d6a43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of the numbers of a structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 기능 구조의 수의 합을 계산한다.</target>
        </trans-unit>
        <trans-unit id="ac33ccd64dfa538162e29b5368275ac3dcab2e9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; function transposes the rows and columns of its argument. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; 함수는 인수의 행 및 열을 바꿉니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="21074974ba0da203fdbe3139596e6c3eb82eacd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is a `dual' to &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;: while &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; reduces a list to a summary value, &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; builds a list from a seed value. The function takes the element and returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if it is done producing the list or returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(a,b)&lt;/code&gt;, in which case, &lt;code&gt;a&lt;/code&gt; is a prepended to the list and &lt;code&gt;b&lt;/code&gt; is used as the next element in a recursive call. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 기능을 할 '는'듀얼입니다 &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; : 동안 &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 은 요약 값 목록을 감소 &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 는 시드 값의 목록을 작성합니다. 이 함수는 요소 반환지지 않습니다 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 가 목록 또는 반환 생성 할 경우 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(a,b)&lt;/code&gt; ,이 경우, &lt;code&gt;a&lt;/code&gt; A가 목록에 앞에 추가이고 &lt;code&gt;b&lt;/code&gt; 는 재귀 호출의 다음 요소로 사용된다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="6f5fe84f2f6e359d0b958ffdfd50c5ad6c942d08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; function returns the list union of the two lists. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; 기능은 두 목록의 목록 조합을 반환합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="26aa6f38df9eac11f0ca7ea5149a65e6f035439a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unionBy&quot;&gt;unionBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unionBy&quot;&gt;unionBy&lt;/a&gt;&lt;/code&gt; 의 기능의 비 오버로드 된 버전입니다 &lt;code&gt;&lt;a href=&quot;data-list#v:union&quot;&gt;union&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3512932a90bda2966b9c4bde2bc99fdaee65977a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; function takes a list of triples and returns three lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; 기능은 유사 트리플 돌아갑니다 세 가지 목록의 목록 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="465b134f0e0674fc306964e8911a4c8f5a23b544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip4&quot;&gt;unzip4&lt;/a&gt;&lt;/code&gt; function takes a list of quadruples and returns four lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip4&quot;&gt;unzip4&lt;/a&gt;&lt;/code&gt; 기능이 유사한 4 배로 돌아갑니다 넷 개리스트의 목록 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eab7f028c5e43e9c371d7627b6af73045109e75d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip5&quot;&gt;unzip5&lt;/a&gt;&lt;/code&gt; function takes a list of five-tuples and returns five lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip5&quot;&gt;unzip5&lt;/a&gt;&lt;/code&gt; 기능은 유사 다섯 튜플 반환 다섯 개 목록의 목록 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6934051d9d7b99ca14d42b993760a93edf9a7566" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip6&quot;&gt;unzip6&lt;/a&gt;&lt;/code&gt; function takes a list of six-tuples and returns six lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip6&quot;&gt;unzip6&lt;/a&gt;&lt;/code&gt; 기능은 유사 여섯 튜플 반환 여섯 개 목록의 목록 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="782bb3363a3945b001878329fde4ebb88dcb6fb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:unzip7&quot;&gt;unzip7&lt;/a&gt;&lt;/code&gt; function takes a list of seven-tuples and returns seven lists, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:unzip7&quot;&gt;unzip7&lt;/a&gt;&lt;/code&gt; 기능은 유사 일곱 튜플 반환 일곱 개 목록의 목록 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="17802af283250b2eaa32a2ecb8cb86776774ec7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; function takes four lists and returns a list of quadruples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; 기능은 네 개의리스트를 취하고 유사한 4 배의 목록을 반환 &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="6bce1a1341ac4dd8d73f1e68a1710aec2a623827" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip5&quot;&gt;zip5&lt;/a&gt;&lt;/code&gt; function takes five lists and returns a list of five-tuples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip5&quot;&gt;zip5&lt;/a&gt;&lt;/code&gt; 기능은 다섯 명 목록을 받아 유사한 다섯 튜플의 목록을 반환 &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="451d4d26a4f677865f2a3a707b38064fca9f4083" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip6&quot;&gt;zip6&lt;/a&gt;&lt;/code&gt; function takes six lists and returns a list of six-tuples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip6&quot;&gt;zip6&lt;/a&gt;&lt;/code&gt; 기능은 여섯리스트를 취하고 유사 여섯 튜플의 목록을 반환 &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="c305b363ee1ef77beb2a8edb13e3c0d40953e5c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zip7&quot;&gt;zip7&lt;/a&gt;&lt;/code&gt; function takes seven lists and returns a list of seven-tuples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zip7&quot;&gt;zip7&lt;/a&gt;&lt;/code&gt; 기능은 일곱리스트를 취하고 유사 일곱 튜플의 목록을 반환 &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="88779bb5c5d951c52ff0e703df09adaeddb2bdff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; 의 기능은 세 가지 요소뿐만 아니라, 세 가지 목록을 결합하고 유사 자신의 포인트 현명한 조합의 목록을 반환하는 함수 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 을 . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="60ff42280ef2fd04c5a52b0fb6c4ced9f80d259b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; function takes a function which combines four elements, as well as four lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; 의 기능은 네 가지 요소뿐만 아니라, 네 개의 목록을 결합하고 유사 자신의 포인트 현명한 조합의 목록을 반환하는 함수 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 을 . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="9fb3b6d637e7bdf78afcd7364064abe2b747412a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith5&quot;&gt;zipWith5&lt;/a&gt;&lt;/code&gt; function takes a function which combines five elements, as well as five lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith5&quot;&gt;zipWith5&lt;/a&gt;&lt;/code&gt; 의 기능은 다섯 개 가지 요소뿐만 아니라 다섯 개 목록을 결합하고 유사 자신의 포인트 현명한 조합의 목록을 반환하는 함수 소요 &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 을 . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="76824cb1a5c46cd7971e7c2fd78abbe2f0690804" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith6&quot;&gt;zipWith6&lt;/a&gt;&lt;/code&gt; function takes a function which combines six elements, as well as six lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith6&quot;&gt;zipWith6&lt;/a&gt;&lt;/code&gt; 의 함수 여섯 개 요소뿐만 아니라 여섯리스트를 결합하고 유사한 자신의 포인트 - 방식의 조합의리스트를 반환하는 함수 얻어 &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 를 . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="c2eb2006a61b2e5916c9fa720bb30884f6a6a25d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith7&quot;&gt;zipWith7&lt;/a&gt;&lt;/code&gt; function takes a function which combines seven elements, as well as seven lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith7&quot;&gt;zipWith7&lt;/a&gt;&lt;/code&gt; 의 기능은 일곱 개 요소뿐만 아니라 칠 개 목록 및 반환 유사 자신의 포인트 현명한 조합의 목록을 결합하는 기능을한다 &lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 을 . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="657b1604cfab08f6d70ddcd61991924e84fa776b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:break&quot;&gt;break&lt;/a&gt; p&lt;/code&gt; function is equivalent to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:span&quot;&gt;span&lt;/a&gt; (not . p)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:break&quot;&gt;break&lt;/a&gt; p&lt;/code&gt; 함수에 상당 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:span&quot;&gt;span&lt;/a&gt; (not . p)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee5bf1dc8f489bf35d33f57749203f70974c1fd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a stream and returns a list of streams such that flattening the resulting list is equal to the argument. Moreover, each stream in the resulting list contains only equal elements. For example, in list notation:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 기능이 스트림을 받아서 생성 된 목록을 평탄화하는 인수와 동일하도록 스트림의리스트를 반환한다. 또한 결과 목록의 각 스트림에는 동일한 요소 만 포함됩니다. 예를 들어, 목록 표기법에서 :</target>
        </trans-unit>
        <trans-unit id="d4768abc565ec9f4747dd76eb1df6c5aed894777" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; function takes a stream &lt;code&gt;xs&lt;/code&gt; and returns all the finite prefixes of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; 의 함수는 스트림 소요 &lt;code&gt;xs&lt;/code&gt; 모두에게의 유한 접두사 반환 &lt;code&gt;xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="37ce52036d19badb8eb3e19e52707cf238bc5e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the first argument is a prefix of the second.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:isPrefixOf&quot;&gt;isPrefixOf&lt;/a&gt;&lt;/code&gt; 의 기능은 반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 첫 번째 인수가 두 번째의 접두사 인 경우.</target>
        </trans-unit>
        <trans-unit id="bd9fc5f9beeabe2f81cfc9e7c5d9e742fa36f643" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function removes duplicate elements from a list. In particular, it keeps only the first occurrence of each element. (The name &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; means 'essence'.) It is a special case of &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own inequality test.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 함수는 목록에서 중복 요소를 제거합니다. 특히 각 요소의 첫 번째 항목 만 유지합니다. &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 라는 이름 은 '본질'을 의미합니다. &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; 의 특수한 경우로 , 프로그래머가 자체 불평등 테스트를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fd2343fdb59771c84cb4f982c7246f3073f744d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; function behaves just like &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt;, except it uses a user-supplied equality predicate instead of the overloaded &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nubBy&quot;&gt;nubBy&lt;/a&gt;&lt;/code&gt; 단지와 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; , 대신 과부하의 사용자 제공 동등 술어 사용 제외 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="3ca6a46f6f161da72b75fa2b96c21284bff63000" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate &lt;code&gt;p&lt;/code&gt; and a stream &lt;code&gt;xs&lt;/code&gt;, and returns a pair of lists. The first list corresponds to the elements of &lt;code&gt;xs&lt;/code&gt; for which &lt;code&gt;p&lt;/code&gt; holds; the second corresponds to the elements of &lt;code&gt;xs&lt;/code&gt; for which &lt;code&gt;p&lt;/code&gt; does not hold.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; 함수는 술어 소요 &lt;code&gt;p&lt;/code&gt; 와 스트림 &lt;code&gt;xs&lt;/code&gt; , 및 목록의 한 쌍을 반환합니다. 제리스트의 요소에 대응 &lt;code&gt;xs&lt;/code&gt; 되는 &lt;code&gt;p&lt;/code&gt; 보유하고; 의 요소에 대응하고 상기 제 &lt;code&gt;xs&lt;/code&gt; 있는 &lt;code&gt;p&lt;/code&gt; 보유하지 않는다.</target>
        </trans-unit>
        <trans-unit id="97f203f3e97c286860c77a16076e2c5ba5e804b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; function takes a stream &lt;code&gt;xs&lt;/code&gt; and returns all the suffixes of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt; 함수는 스트림 소요 &lt;code&gt;xs&lt;/code&gt; 모두에게의 접미사 반환 &lt;code&gt;xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4b73a8b2bef137b1be451c67193ea1b9dd5278a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; function is analogous to &lt;a href=&quot;data-list&quot;&gt;Data.List&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 함수 유사 &lt;a href=&quot;data-list&quot;&gt;Data.List&lt;/a&gt; 의 &lt;code&gt;&lt;a href=&quot;data-list#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt;&lt;/code&gt; 동작.</target>
        </trans-unit>
        <trans-unit id="2413c236691707253e811091fb05fcbb1bf0b562" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; function is the inverse of the &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; 함수의 역인 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="ce09038022ed3cd501096c0d8a1d4d43ab363fc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; function takes two streams and returns a stream of corresponding pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 함수는 두 개의 스트림을 취하여 해당 쌍의 스트림을 리턴한다.</target>
        </trans-unit>
        <trans-unit id="f10666c8af44a76f18b1cbb206ccc5dbbcf92fdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; function generalizes &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. Rather than tupling the elements, the elements are combined using the function passed as the first argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 의 기능 일반화는 &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; . 요소를 터플 링하는 대신 첫 번째 인수로 전달 된 함수를 사용하여 요소를 결합합니다.</target>
        </trans-unit>
        <trans-unit id="16a4e90fc05f7eb7703f8d38de0941aad54680ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from keys of type &lt;code&gt;k&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;. A &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; is strict in its keys but lazy in its values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; 유형은 유형의 키에서 (때로는 사전이라고 함) 유한지도 나타냅니다 &lt;code&gt;k&lt;/code&gt; 형의 값으로 &lt;code&gt;v&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;data-map-lazy#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 그 값의 키에 엄격하지만 게으른입니다.</target>
        </trans-unit>
        <trans-unit id="4715b3b3e03f7ebfbfad3ed60bdf0126093bd7fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict&lt;/a&gt; then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 기능은 게으른 엄격한 모듈에 의해 공유됩니다. 병합 전술의 선택 만이 엄격 성을 결정합니다. &lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict&lt;/a&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; 을 사용 하면 결과가 삽입되기 전에 결과가 적용됩니다. 이 모듈에서 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; 을 사용 하면 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2b155238023fcafca6284b024ed0af65f6650208" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; functions are shared by the lazy and strict modules. Only the choice of merge tactics determines strictness. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from this module then the results will be forced before they are inserted. If you use &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; from &lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy&lt;/a&gt; then they will not.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; 기능은 게으른 엄격한 모듈에 의해 공유됩니다. 병합 전술의 선택 만이 엄격 성을 결정합니다. 이 모듈에서 &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; 을 사용 하면 결과가 삽입되기 전에 결과가 적용됩니다. &lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy&lt;/a&gt; 에서 &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMissing&quot;&gt;mapMissing&lt;/a&gt;&lt;/code&gt; 을 사용 하면 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="662c04a7a17ee001eac580254bab8523defdb93a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; type represents a finite map (sometimes called a dictionary) from keys of type &lt;code&gt;k&lt;/code&gt; to values of type &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt; k v&lt;/code&gt; 유형은 유형의 키에서 (때로는 사전이라고 함) 유한지도 나타냅니다 &lt;code&gt;k&lt;/code&gt; 형의 값으로 &lt;code&gt;v&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12662a5070f04b0d43497ea05090a5128c804911" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt; module, so if they are used the resulting maps may contain suspended values (thunks).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 유형은 같은 의미 게으른 엄격한 모듈간에 공유되는 &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; 값이 두 모듈에서 함수에 전달 될 수 있습니다. 이는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 인스턴스가 &lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt; 모듈 과 동일 하므로 사용되는 경우 결과 맵에 일시 중단 된 값 (썽크)이 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80a0485ade9c643df5c2ea0bf0c47d55fb54166e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt; module, so if they are used the resulting maps may contain suspended values (thunks).</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; type is shared between the lazy and strict modules, meaning that the same &lt;code&gt;&lt;a href=&quot;data-map-strict#t:Map&quot;&gt;Map&lt;/a&gt;&lt;/code&gt; value can be passed to functions in both modules. This means that the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-traversable#v:Traversable&quot;&gt;Traversable&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-data#v:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances are the same as for the &lt;a href=&quot;data-map-lazy&quot;&gt;Data.Map.Lazy&lt;/a&gt; module, so if they are used the resulting maps may contain suspended values (thunks).</target>
        </trans-unit>
        <trans-unit id="7f52f3aa69ba900643917df0d514ebfe7065396f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type encapsulates an optional value. A value of type &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; either contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt;), or it is empty (represented as &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;). Using &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is a good way to deal with errors or exceptional cases without resorting to drastic measures such as &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 유형은 옵션 값을 캡슐화합니다. 유형의 값은 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; 두 유형의 값을 포함 (로 표현 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; 을 ), 또는 (로 표현 비어 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ). 사용 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 등 과감한 조치에 의존하지 않고 오류 또는 예외적 인 경우를 처리 할 수있는 좋은 방법입니다 &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f185e83cdbbc510aa029904011adfe83bd8b1220" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type is also a monad. It is a simple kind of error monad, where all errors are represented by &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;. A richer error monad can be built using the &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 유형은 모나드이다. 모든 오류가 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 으로 표시되는 간단한 종류의 오류 모나드 입니다. 보다 풍부한 에러 모나드는 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 타입을 사용하여 구축 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e8aa4a4fc49f7638e33b52125beaf5389284d595" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; function takes a list of &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;s and returns a list of all the &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:catMaybes&quot;&gt;catMaybes&lt;/a&gt;&lt;/code&gt; 의 기능의 목록이 소요 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 들과 모든 목록을 반환 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 값을.</target>
        </trans-unit>
        <trans-unit id="8e3cc1728b8d32e7bd6e33d7191898329f389751" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:fromJust&quot;&gt;fromJust&lt;/a&gt;&lt;/code&gt; function extracts the element out of a &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; and throws an error if its argument is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:fromJust&quot;&gt;fromJust&lt;/a&gt;&lt;/code&gt; 의 기능은 밖으로 요소를 추출 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 그 인수 인 경우 오류가 발생합니다 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de4cf2aa7df453c08de73e06681e00b3a9d47c30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; function takes a default value and and &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, it returns the default values; otherwise, it returns the value contained in the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:fromMaybe&quot;&gt;fromMaybe&lt;/a&gt;&lt;/code&gt; 의 기능은 기본 값 및 소요 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 값입니다. (가) 경우 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 이다 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; , 그것은 기본 값을 반환 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 에 포함 된 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7a5a7a323996766db88ca0c88884029bb8a6704d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:isJust&quot;&gt;isJust&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff its argument is of the form &lt;code&gt;Just _&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:isJust&quot;&gt;isJust&lt;/a&gt;&lt;/code&gt; 의 기능은 반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인수의 형식입니다 IFF에 &lt;code&gt;Just _&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52483bf501d37712c976868bb9284af355744fac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:isNothing&quot;&gt;isNothing&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; iff its argument is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:isNothing&quot;&gt;isNothing&lt;/a&gt;&lt;/code&gt; 의 함수가 반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 인수 IFF는 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eee25b35452f5d1cfc414313539edda0a7120764" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; on an empty list or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt; is the first element of the list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:listToMaybe&quot;&gt;listToMaybe&lt;/a&gt;&lt;/code&gt; 의 함수를 반환 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 빈리스트 나에 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; 리스트의 첫 번째 요소입니다.</target>
        </trans-unit>
        <trans-unit id="d9226f117113df71e3656c9e6013ce6d6bf13f04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:mapMaybe&quot;&gt;mapMaybe&lt;/a&gt;&lt;/code&gt; function is a version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; which can throw out elements. In particular, the functional argument returns something of type &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; b&lt;/code&gt;. If this is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, no element is added on to the result list. If it is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; b&lt;/code&gt;, then &lt;code&gt;b&lt;/code&gt; is included in the result list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:mapMaybe&quot;&gt;mapMaybe&lt;/a&gt;&lt;/code&gt; 의 기능은 버전입니다 &lt;code&gt;&lt;a href=&quot;ghc-list#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 요소를 던질 수 있습니다. 특히, 함수 인수는 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; b&lt;/code&gt; 유형을 리턴합니다 . 이것이 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 이면 결과 목록에 요소가 추가되지 않습니다. 이 경우 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt; b&lt;/code&gt; 다음 &lt;code&gt;b&lt;/code&gt; 결과 목록에 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="85d0ce65a11dff7a785fa5be5465e4febfc6e9a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybe&quot;&gt;maybe&lt;/a&gt;&lt;/code&gt; function takes a default value, a function, and a &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value. If the &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, the function returns the default value. Otherwise, it applies the function to the value inside the &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; and returns the result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:maybe&quot;&gt;maybe&lt;/a&gt;&lt;/code&gt; 함수는 디폴트 값, 함수 및 소요 &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 값입니다. 는 IF &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 값이없는 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 함수는 기본 값을 반환합니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 내부의 값에 함수를 적용 하고 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5c611fd7648ec2451334092c9df4afb5e19ad5d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; function returns an empty list when given &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; or a singleton list when given &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:maybeToList&quot;&gt;maybeToList&lt;/a&gt;&lt;/code&gt; 의 주어 졌을 때 함수는 빈 목록을 반환 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 주어 졌을 때 또는 싱글 목록을 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="795a9f9783333374a76593a231e073666138ebda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-monoid#t:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; monoid is defined by the numerical addition operator and `0` as neutral element:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-monoid#t:Sum&quot;&gt;Sum&lt;/a&gt;&lt;/code&gt; 모노 이드 중성 원소로서 '0'수치 또한 오퍼레이터에 의해 정의된다 :</target>
        </trans-unit>
        <trans-unit id="9acde1593d8ad750d5ecbfa06d97960b56f05f43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; type allows you to reverse sort order conveniently. A value of type &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt;). If &lt;code&gt;a&lt;/code&gt; has an &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance associated with it then comparing two values thus wrapped will give you the opposite of their normal sort order. This is particularly useful when sorting in generalised list comprehensions, as in: &lt;code&gt;then sortWith by &lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; 유형은 편리하게 정렬 순서를 반대로 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 유형의 값 에는 a 유형 &lt;code&gt;a&lt;/code&gt; 값이 포함 됩니다 ( &lt;code&gt;&lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 로 표시 ). 경우 &lt;code&gt;a&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 그 다음 따라서 당신에게 정상적인 정렬 순서의 반대를 줄 것이다 감싸 두 값을 비교와 관련된 인스턴스를. 이것은 &lt;code&gt;then sortWith by &lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt; 과 같이 일반화 된 목록 이해에서 정렬 할 때 특히 유용합니다. then sortWith by &lt;a href=&quot;data-ord#t:Down&quot;&gt;Down&lt;/a&gt; x</target>
        </trans-unit>
        <trans-unit id="2d480aba9ca8f558b9bab4a7470c617258413273" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class is used for totally ordered datatypes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 클래스는 완전히 정렬 된 데이터 유형에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9743e6ce1ccca02d84b310e0c03e3b64b006ece2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Min&quot;&gt;Min&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instance for &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; is defined to always pick the smaller number: &amp;gt;&amp;gt;&amp;gt; Min 1 &amp;lt;&amp;gt; Min 2 &amp;lt;&amp;gt; Min 3 &amp;lt;&amp;gt; Min 4 :: Min Int Min {getMin = 1}</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-semigroup#t:Min&quot;&gt;Min&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; 대한 인스턴스 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 작은 번호 선택 항상 정의된다 : &amp;gt;&amp;gt;&amp;gt; 최소 1 &amp;lt;&amp;gt; 최소 2 &amp;lt;&amp;gt; 3 분 &amp;lt;&amp;gt; :: 최소 4 분 지능 최소 getMin = {1}</target>
        </trans-unit>
        <trans-unit id="d415a40b49223b304b71b398a708eb25f07e68ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a&lt;/code&gt; type represents a finite sequence of values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a&lt;/code&gt; 형 타입의 값의 유한 시퀀스 나타낸다 &lt;code&gt;a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13ce1c3f2600f3e2f50834c056ec8fa70e4eab37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; type represents a set of elements of type &lt;code&gt;e&lt;/code&gt;. Most operations require that &lt;code&gt;e&lt;/code&gt; be an instance of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class. A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; is strict in its elements.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; 형 타입의 소자의 세트 나타내는 &lt;code&gt;e&lt;/code&gt; . 대부분의 작업에서는 &lt;code&gt;e&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 클래스 의 인스턴스 여야합니다 . &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; 요소에 엄격하다.</target>
        </trans-unit>
        <trans-unit id="1038dcfb90af9b5c0cfcdb7ab1311da4e5ed3150" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; type represents a set of elements of type &lt;code&gt;e&lt;/code&gt;. Most operations require that &lt;code&gt;e&lt;/code&gt; be an instance of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class. A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; is strict in its elements.</source>
          <target state="translated">The &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt; e&lt;/code&gt; type represents a set of elements of type &lt;code&gt;e&lt;/code&gt; . Most operations require that &lt;code&gt;e&lt;/code&gt; be an instance of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; class. A &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; is strict in its elements.</target>
        </trans-unit>
        <trans-unit id="8881e3fb681798d7bf981e8e9d449509800437b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type is implemented using arrays that are not guaranteed to have a fixed address in the Haskell heap. All communication with native code must thus occur by copying data back and forth.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 유형은 하스켈 힙에 고정 된 주소가 보장되지 않습니다 배열을 사용하여 구현됩니다. 따라서 원시 코드와의 모든 통신은 데이터를 앞뒤로 복사하여 발생해야합니다.</target>
        </trans-unit>
        <trans-unit id="9d9c2733ed15ccf0d235e8a6b100f93fe8426bb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; type's internal representation is UTF-16, using the platform's native endianness. This makes copied data suitable for use with native libraries that use a similar representation, such as ICU. To interoperate with native libraries that use different internal representations, such as UTF-8 or UTF-32, consider using the functions in the &lt;code&gt;&lt;a href=&quot;data-text#v:Encoding&quot;&gt;Encoding&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 형식의 내부 표현은 플랫폼의 네이티브 엔디안을 사용하여 UTF-16입니다. 따라서 복사 된 데이터는 ICU와 같은 유사한 표현을 사용하는 기본 라이브러리와 함께 사용하기에 적합합니다. UTF-8 또는 UTF-32와 같은 다른 내부 표현을 사용하는 기본 라이브러리와 상호 운용하려면 &lt;code&gt;&lt;a href=&quot;data-text#v:Encoding&quot;&gt;Encoding&lt;/a&gt;&lt;/code&gt; 모듈 의 기능을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="161f7f591d2f56a095b5a6738fe11dc948f83c20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and a strict &lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-text#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 와 엄격한 &lt;code&gt;&lt;a href=&quot;data-text#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 의 각 요소에 함수를 적용 하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 와 함께 반환합니다 . 유효하지 않은 스칼라 값을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="c5823a0c22eaaaf0e0d80ffbc2bbde448d239204" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; constructor is exposed since &lt;code&gt;text-1.1.1.3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; 생성자는 이후 노출 된 &lt;code&gt;text-1.1.1.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d764c078d54b6747b82b1fb65bc90cbfdc33a9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-array#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; constructor is exposed since &lt;code&gt;text-1.1.1.3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-array#t:MArray&quot;&gt;MArray&lt;/a&gt;&lt;/code&gt; 의 생성자는 이후 노출 된 &lt;code&gt;text-1.1.1.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e4b96f6778d5f3fbaa9eb0f8c186a8f261148c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8&quot;&gt;streamDecodeUtf8&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8With&quot;&gt;streamDecodeUtf8With&lt;/a&gt;&lt;/code&gt; functions accept a &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; that represents a possibly incomplete input (e.g. a packet from a network stream) that may not end on a UTF-8 boundary.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8&quot;&gt;streamDecodeUtf8&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-text-encoding#v:streamDecodeUtf8With&quot;&gt;streamDecodeUtf8With&lt;/a&gt;&lt;/code&gt; 기능은 수락 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; UTF-8 경계에서 종료하지 않을 수 불완전한 입력 (네트워크 스트림 패킷 등)을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="d8de0eaf04140ba7158dddc8d0be85ce0ccccc4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a stream and returns the index of the first element in the stream satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 의 함수 술어 및 스트림을 취하고 술어를 만족하는 스트림의 첫 번째 요소의 인덱스를 반환한다.</target>
        </trans-unit>
        <trans-unit id="bf384e38dd6fd9c82df77df8975246cdedc34701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:findIndexI&quot;&gt;findIndexI&lt;/a&gt;&lt;/code&gt; function takes a predicate and a stream and returns the index of the first element in the stream satisfying the predicate.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:findIndexI&quot;&gt;findIndexI&lt;/a&gt;&lt;/code&gt; 의 함수 술어 및 스트림을 취하고 술어를 만족하는 스트림의 첫 번째 요소의 인덱스를 반환한다.</target>
        </trans-unit>
        <trans-unit id="ee94ea37dfd7850ffc9a486e3dd92c091c5cbec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt; code points.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 코드 포인트 의 &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="66da5760dab680492ae3a48dc3a35550be6dc4df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; of the given code point.</source>
          <target state="translated">주어진 코드 포인트 의 &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-size#t:Size&quot;&gt;Size&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a75e1f66c9b008e7ba6ff420a20501b8af837a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; function takes a function of type &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; as its argument. The entire input from the standard input device is passed to this function as its argument, and the resulting string is output on the standard output device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; 기능이 타입의 함수 소요 &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; 를 인수로서. 표준 입력 장치의 전체 입력이 인수로이 함수에 전달되고 결과 문자열이 표준 출력 장치에 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="b417d4f678288b71d35accb0f99175761f3e1e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; function reads a file and returns the contents of the file as a string. The entire file is read strictly, as with &lt;code&gt;&lt;a href=&quot;data-text-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt; 함수는 파일을 읽고 문자열로 파일의 내용을 반환합니다. &lt;code&gt;&lt;a href=&quot;data-text-io#v:getContents&quot;&gt;getContents&lt;/a&gt;&lt;/code&gt; 와 같이 전체 파일을 엄격하게 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="68615baf25b8a5dabb727f9a05e4f69c95e23d72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; and returns a list of &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;s such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 기능이 얻어 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 및 목록 돌려 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 결과 병합이 인수와 동일한 것을들 등을. 또한 결과의 각 하위 목록에는 동일한 요소 만 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="448dca813f1fb16bef7c7de2c7c5fae5b0a093ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 기능의 비 과부하 버전 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bea18231a8f3d26a5fe0119fe32dfbafea55d681" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; and a strict &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;. Performs replacement on invalid scalar values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능의 동작합니다 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 와 엄격한 &lt;code&gt;&lt;a href=&quot;data-text-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 의 각 요소에 함수를 적용 하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 와 함께 반환합니다 . 유효하지 않은 스칼라 값을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="1a76ea813e8c21de4f80acb76647bc2ec24349f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-text-lazy-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; function takes a function of type &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; as its argument. The entire input from the standard input device is passed (lazily) to this function as its argument, and the resulting string is output on the standard output device.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-text-lazy-io#v:interact&quot;&gt;interact&lt;/a&gt;&lt;/code&gt; 기능이 타입의 함수 소요 &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt; 를 인수로서. 표준 입력 장치의 전체 입력이 인수로이 함수에 게으르게 전달되고 결과 문자열이 표준 출력 장치에 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="0f4eb06ba150dfea2048571ec4f24a657175124e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumL&quot;&gt;mapAccumL&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 함수 및 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ; 이 함수는 구조의 각 요소에 함수를 적용하여 누적 매개 변수를 왼쪽에서 오른쪽으로 전달하고이 누적 기의 최종 값을 새 구조와 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7d943aed90068948d72a0d5858ba1b7944e9decb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; function behaves like a combination of &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;; it applies a function to each element of a structure, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-traversable#v:mapAccumR&quot;&gt;mapAccumR&lt;/a&gt;&lt;/code&gt; 의 조합과 같은 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt;&lt;/code&gt; 함수 와 &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; ; 이 함수는 구조체의 각 요소에 함수를 적용하여 누적 매개 변수를 오른쪽에서 왼쪽으로 전달하고이 누산기의 최종 값을 새 구조와 함께 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6a5f7c77832ccee5dc8f444bf10cb820686c5a90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-tree#t:Forest&quot;&gt;Forest&lt;/a&gt; a&lt;/code&gt; type represents a forest of &lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-tree#t:Forest&quot;&gt;Forest&lt;/a&gt; a&lt;/code&gt; 유형의 숲 나타내는 &lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt; 들.</target>
        </trans-unit>
        <trans-unit id="4dde0b10b0f433f8901cc6d31ae5f25b888075e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt; type represents a lazy, possibly infinite, multi-way tree (also known as a &lt;em&gt;rose tree&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-tree#t:Tree&quot;&gt;Tree&lt;/a&gt; a&lt;/code&gt; 유형은 (또한으로 알려진 게으른 가능성이 무한, 멀티 웨이 트리 나타내는 &lt;em&gt;장미 나무&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="8007180e7dc5a974039c84bcb837081428c5c9da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; class reifies types to some extent by associating type representations to types. These type representations can be compared, and one can in turn define a type-safe cast operation. To this end, an unsafe cast is guarded by a test for type (representation) equivalence. The module &lt;a href=&quot;data-dynamic&quot;&gt;Data.Dynamic&lt;/a&gt; uses Typeable for an implementation of dynamics. The module &lt;a href=&quot;data-data&quot;&gt;Data.Data&lt;/a&gt; uses Typeable and type-safe cast (but not dynamics) to support the &quot;Scrap your boilerplate&quot; style of generic programming.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-typeable#t:Typeable&quot;&gt;Typeable&lt;/a&gt;&lt;/code&gt; 클래스는 유형 유형 표현을 연결하여 어느 정도 유형을 reifies. 이러한 형식 표현을 비교할 수 있으며 형식에 안전한 캐스트 작업을 정의 할 수 있습니다. 이를 위해 안전하지 않은 캐스트는 유형 (표현) 동등성 테스트에 의해 보호됩니다. &lt;a href=&quot;data-dynamic&quot;&gt;Data.Dynamic&lt;/a&gt; 모듈 은 동적 구현을 ​​위해 Typeable을 사용합니다. &lt;a href=&quot;data-data&quot;&gt;Data.Data&lt;/a&gt; 모듈 은 Typeable 및 Type-Safe 캐스트 (동적 제외)를 사용하여 &quot;보일러 플레이트 스크랩&quot;스타일의 일반 프로그래밍을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d043229d0aba230c46b619f1751b3e8e83785014" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; function outputs the trace message given as its first argument, before returning the second argument as its result.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 기능은 결과적으로 두 번째 인수를 리턴하기 전에, 그 첫 번째 인수로 주어진 추적 메시지를 출력한다.</target>
        </trans-unit>
        <trans-unit id="140721e416adc2345c2c2facce319e06db5e38ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; function should &lt;em&gt;only&lt;/em&gt; be used for debugging, or for monitoring execution. The function is not referentially transparent: its type indicates that it is a pure function but it has the side effect of outputting the trace message.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 기능한다 &lt;em&gt;만&lt;/em&gt; , 또는 실행을 감시하는 디버깅에 사용된다. 이 함수는 참조 적으로 투명하지 않습니다.이 함수의 유형은 순수한 함수임을 나타내지 만 추적 메시지를 출력하는 부작용이 있습니다.</target>
        </trans-unit>
        <trans-unit id="605bec91baff60047b066d4e1ac30c1faa493023" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; functions print messages to an output stream. They are intended for &quot;printf debugging&quot;, that is: tracing the flow of execution and printing interesting values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceShow&quot;&gt;traceShow&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; 함수는 출력 스트림에 메시지를 인쇄 할 수 있습니다. 이들은 &quot;printf 디버깅&quot;, 즉 실행 흐름을 추적하고 흥미로운 값을 인쇄하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="a88df11e31fce4c7204e009946e93a681d719b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt; function behaves like &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; with the difference that the message is emitted to the eventlog, if eventlog profiling is available and enabled at runtime.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEvent&quot;&gt;traceEvent&lt;/a&gt;&lt;/code&gt; 의 추천 기능 동작합니다 &lt;code&gt;&lt;a href=&quot;debug-trace#v:trace&quot;&gt;trace&lt;/a&gt;&lt;/code&gt; 메시지가 이벤트 로그 프로파일을 사용할 수있는 경우, 이벤트 로그 출사 런타임시에 활성화되어 있다는 차이.</target>
        </trans-unit>
        <trans-unit id="49d4ea0d4504acbc4d1aca32b1293ddbe4063444" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; function emits a message to the eventlog, if eventlog profiling is available and enabled at runtime.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceEventIO&quot;&gt;traceEventIO&lt;/a&gt;&lt;/code&gt; 의 이벤트 로그 프로파일 링이 가능하며 런타임에 활성화 된 경우 함수는 이벤트 로그에 메시지를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="b3a4eae130c3225cefb9efb90d8be9b83b521fab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; function outputs the trace message from the IO monad. This sequences the output with respect to other IO actions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceIO&quot;&gt;traceIO&lt;/a&gt;&lt;/code&gt; 의 함수는 IO 모나드에서 추적 메시지를 출력한다. 이는 다른 IO 동작과 관련하여 출력을 시퀀싱합니다.</target>
        </trans-unit>
        <trans-unit id="d97ccf67a57dfd415eb74011cb7d1b6a77ff69bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt; function emits a marker to the eventlog, if eventlog profiling is available and enabled at runtime. The &lt;code&gt;String&lt;/code&gt; is the name of the marker. The name is just used in the profiling tools to help you keep clear which marker is which.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarker&quot;&gt;traceMarker&lt;/a&gt;&lt;/code&gt; 의 이벤트 로그 프로파일 링이 가능하며 런타임에 활성화 된 경우 함수는 이벤트 로그에 마커를 방출한다. &lt;code&gt;String&lt;/code&gt; 마커의 이름입니다. 이 이름은 프로파일 링 도구에서 어떤 마커가 어떤 마커인지 명확하게 유지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fa771e47c5e0835b60259fdc80c34fd55cfa3c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; function emits a marker to the eventlog, if eventlog profiling is available and enabled at runtime.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;debug-trace#v:traceMarkerIO&quot;&gt;traceMarkerIO&lt;/a&gt;&lt;/code&gt; 의 이벤트 로그 프로파일 링이 가능하며 런타임에 활성화 된 경우 함수는 이벤트 로그에 마커를 방출한다.</target>
        </trans-unit>
        <trans-unit id="65a90e57ddce6b3095e1eb053172e0add59b8b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is parameterised in the same way as &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;. The type argument of &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; should normally be an instance of class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 는 같은 방법으로 매개 변수화됩니다 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 의 type 인수 는 일반적으로 &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; 클래스의 인스턴스 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="47f829e4b12e19d9b1b9c867b798c3d41bfa7cc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; type and operations. This module is part of the Foreign Function Interface (FFI) and will usually be imported via the &lt;a href=&quot;foreign&quot;&gt;Foreign&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 의 유형 및 운영. 이 모듈은 FFI (Foreign Function Interface)의 일부이며 일반적으로 &lt;a href=&quot;foreign&quot;&gt;외부&lt;/a&gt; 모듈을 통해 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="4fea14f33688c221cc4b82a2e64457f2c1daf4c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is parameterised in the same way as &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;. The type argument of &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; should normally be an instance of class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 는 같은 방법으로 매개 변수화됩니다 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 의 type 인수 는 일반적으로 &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; 클래스의 인스턴스 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="46ba37e75544b376d91afd7d94cc178e3d4edd60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; type and operations. This module is part of the Foreign Function Interface (FFI) and will usually be imported via the &lt;a href=&quot;foreign&quot;&gt;Foreign&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 의 유형 및 운영. 이 모듈은 FFI (Foreign Function Interface)의 일부이며 일반적으로 &lt;a href=&quot;foreign&quot;&gt;외부&lt;/a&gt; 모듈을 통해 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="05673b670d8de49659d7ca54ef48d3649d1c6cc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;foreign-ptr#v:castPtr&quot;&gt;castPtr&lt;/a&gt;&lt;/code&gt; function casts a pointer from one type to another.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-ptr#v:castPtr&quot;&gt;castPtr&lt;/a&gt;&lt;/code&gt; 의 기능은 하나 개의 유형에서 다른 포인터를 캐스팅합니다.</target>
        </trans-unit>
        <trans-unit id="f4a69e977af812c4c1901ff0ace0b2bb4a9d9dd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; class is used to map a contiguous subrange of values in a type onto integers. It is used primarily for array indexing (see the array package).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; 클래스는 정수 상에 형의 값의 연속 부분 범위를 매핑하는 데 사용됩니다. 주로 배열 인덱싱에 사용됩니다 (어레이 패키지 참조).</target>
        </trans-unit>
        <trans-unit id="e348453b816674bfaf92baa8a27076b87c3aa9bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-arr#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; function deals with repeated indices in the association list using an &lt;em&gt;accumulating function&lt;/em&gt; which combines the values of associations with the same index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-arr#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; 의 사용 연관리스트에 반복 지수 함수와 상품 &lt;em&gt;축적 함수&lt;/em&gt; 인덱스와 같은 연관 값을 결합한다.</target>
        </trans-unit>
        <trans-unit id="7873c676664db92e7ab0f598d2d48e71762b5260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-base#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class defines the basic operations over a &lt;em&gt;monad&lt;/em&gt;, a concept from a branch of mathematics known as &lt;em&gt;category theory&lt;/em&gt;. From the perspective of a Haskell programmer, however, it is best to think of a monad as an &lt;em&gt;abstract datatype&lt;/em&gt; of actions. Haskell's &lt;code&gt;do&lt;/code&gt; expressions provide a convenient syntax for writing monadic expressions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-base#t:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; 클래스는 통해 기본 동작을 정의 &lt;em&gt;모나드&lt;/em&gt; 로 알려진 수학의 지점에서, 개념을 &lt;em&gt;범주 이론&lt;/em&gt; . 그러나 Haskell 프로그래머의 관점에서 모나드는 &lt;em&gt;추상적 인 데이터&lt;/em&gt; 작업 &lt;em&gt;유형&lt;/em&gt; 으로 생각하는 것이 가장 좋습니다 . Haskell의 &lt;code&gt;do&lt;/code&gt; 표현식은 모나 딕 표현식을 작성하기위한 편리한 구문을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ee50bbd3c67bae7f49e378336e2e433f6106ccf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-base#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.</source>
          <target state="translated">은 &lt;code&gt;&lt;a href=&quot;ghc-base#v:join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 함수 종래 모나드 조인 연산자이다. 하나의 레벨의 모나 딕 구조를 제거하고 바인딩 된 인수를 외부 레벨로 투영하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="27aabb232ca4b09ca8d220a432dd7f16df59a935" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-conc#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; action allows (forces, in a co-operative multitasking implementation) a context-switch to any other currently runnable threads (if any), and is occasionally useful when implementing concurrency abstractions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; 조치는 다른 현재 실행 가능한 스레드 (있는 경우)에의 (a 협동 멀티 태스킹 구현에 힘) 컨텍스트 스위치를 허용하고, 동시성 추상화를 구현할 때 가끔 유용하다.</target>
        </trans-unit>
        <trans-unit id="4a132846a2c0d7c2c3007c1d18b85a3d84e2a398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; action allows (forces, in a co-operative multitasking implementation) a context-switch to any other currently runnable threads (if any), and is occasionally useful when implementing concurrency abstractions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; 조치는 다른 현재 실행 가능한 스레드 (있는 경우)에의 (a 협동 멀티 태스킹 구현에 힘) 컨텍스트 스위치를 허용하고, 동시성 추상화를 구현할 때 가끔 유용하다.</target>
        </trans-unit>
        <trans-unit id="9dd95524ffc61573839150d5ca8d3bbeafd0b7a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; class is used to name the upper and lower limits of a type. &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; is not a superclass of &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; since types that are not totally ordered may also have upper and lower bounds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; 클래스는 형의 상한과 하한의 이름을 지정하는 데 사용됩니다. &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 는 완전히 정렬되지 않은 유형에도 상한과 하한이있을 수 있으므로 &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; 의 수퍼 클래스 가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="3e4a35f48d43f24d53c5bb16b69fba56be493a94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; class may be derived for any enumeration type; &lt;code&gt;&lt;a href=&quot;ghc-enum#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; is the first constructor listed in the &lt;code&gt;data&lt;/code&gt; declaration and &lt;code&gt;&lt;a href=&quot;ghc-enum#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; is the last. &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; may also be derived for single-constructor datatypes whose constituent types are in &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; 클래스는 임의의 열거 형에 대해 유도 될 수있다; &lt;code&gt;&lt;a href=&quot;ghc-enum#v:minBound&quot;&gt;minBound&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;data&lt;/code&gt; 선언에 나열된 첫 번째 생성자 이며 &lt;code&gt;&lt;a href=&quot;ghc-enum#v:maxBound&quot;&gt;maxBound&lt;/a&gt;&lt;/code&gt; 는 마지막입니다. &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; 유형은 구성 유형이 &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; 인 단일 생성자 데이터 유형에 대해서도 파생 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="674d2d4d75029f825bd270a8d08697ebd9b70ba6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; classes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; 하고 &lt;code&gt;&lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; 클래스.</target>
        </trans-unit>
        <trans-unit id="c5cd6d00d90b1e061059918ba18205b11c14c002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; type allows you to reverse sort order conveniently. A value of type &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt;). If &lt;code&gt;a&lt;/code&gt; has an &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance associated with it then comparing two values thus wrapped will give you the opposite of their normal sort order. This is particularly useful when sorting in generalised list comprehensions, as in: &lt;code&gt;then sortWith by &lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt;&lt;/code&gt; 유형은 편리하게 정렬 순서를 반대로 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 유형의 값 에는 a 유형 &lt;code&gt;a&lt;/code&gt; 값이 포함 됩니다 ( &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; a&lt;/code&gt; 로 표시 ). 경우 &lt;code&gt;a&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; 그 다음 따라서 당신에게 정상적인 정렬 순서의 반대를 줄 것이다 감싸 두 값을 비교와 관련된 인스턴스를. 이것은 &lt;code&gt;then sortWith by &lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; x&lt;/code&gt; 과 같이 일반화 된 목록 이해에서 정렬 할 때 특히 유용합니다. then sortWith by &lt;a href=&quot;ghc-exts#t:Down&quot;&gt;Down&lt;/a&gt; x</target>
        </trans-unit>
        <trans-unit id="bf4c3fac24e8ca008ba612ac6b40c0fcd012f0f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:IsList&quot;&gt;IsList&lt;/a&gt;&lt;/code&gt; class and its methods are intended to be used in conjunction with the OverloadedLists extension.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#t:IsList&quot;&gt;IsList&lt;/a&gt;&lt;/code&gt; 의 클래스 및 메소드는 OverloadedLists 확장과 함께 사용되는 것으로 의도된다.</target>
        </trans-unit>
        <trans-unit id="d7ba5830092cef4d84647e79c69131dbc7adc059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#t:Item&quot;&gt;Item&lt;/a&gt;&lt;/code&gt; type function returns the type of items of the structure &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#t:Item&quot;&gt;Item&lt;/a&gt;&lt;/code&gt; 유형 기능은 구조의 항목 유형 반환 &lt;code&gt;l&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f84b47ee1d124d1ca79a226e83d25027b22134b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; function constructs the structure &lt;code&gt;l&lt;/code&gt; from the given list of &lt;code&gt;Item l&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; 기능 구조 구조체 &lt;code&gt;l&lt;/code&gt; 주어진 목록으로부터 &lt;code&gt;Item l&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ceee73322b5e0bdd5f3091f55d6384a70d17944b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; function takes the input list's length as a hint. Its behaviour should be equivalent to &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt;. The hint can be used to construct the structure &lt;code&gt;l&lt;/code&gt; more efficiently compared to &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt;. If the given hint does not equal to the input list's length the behaviour of &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; is not specified.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; 의 함수 힌트로 입력리스트의 길이가 걸린다. 동작은 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; 와 동일해야합니다 . 힌트는 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromList&quot;&gt;fromList&lt;/a&gt;&lt;/code&gt; 와 비교하여 &lt;code&gt;l&lt;/code&gt; 구조를 보다 효율적 으로 구성하는 데 사용될 수 있습니다 . 주어진 힌트가 입력 목록의 길이와 같지 않으면 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:fromListN&quot;&gt;fromListN&lt;/a&gt;&lt;/code&gt; 의 동작이 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c5c04c12c048d0307d00092d987715f0d989db28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt; function uses the user supplied function which projects an element out of every list element in order to first sort the input list and then to form groups by equality on these projected elements</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt; 의 기능이 투영 요소에 의해 형성 평등 그룹 먼저 정렬 입력리스트하기 위해 각리스트 요소로부터 돌출 된 요소와 사용자의 함수를 사용하여</target>
        </trans-unit>
        <trans-unit id="695facc226b98a2fdc94f961971c4ce121f69e9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; function restrains strictness analysis a little. The call &lt;code&gt;lazy e&lt;/code&gt; means the same as &lt;code&gt;e&lt;/code&gt;, but &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; has a magical property so far as strictness analysis is concerned: it is lazy in its first argument, even though its semantics is strict. After strictness analysis has run, calls to &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; are inlined to be the identity function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; 기능을 제지 엄격 분석 좀. 호출 &lt;code&gt;lazy e&lt;/code&gt; 같은 의미 &lt;code&gt;e&lt;/code&gt; ,하지만 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; 지금까지 엄격 분석에 관한 한 마법의 속성이 있습니다 : 그것의 의미는 엄격에도 불구하고, 첫 번째 인자에 게으른입니다. 엄격 성 분석이 실행 된 후 &lt;code&gt;&lt;a href=&quot;ghc-exts#v:lazy&quot;&gt;lazy&lt;/a&gt;&lt;/code&gt; 호출 은 ID 함수로 인라인됩니다.</target>
        </trans-unit>
        <trans-unit id="c62e040021cb66d2ce6289579ad247f811fcaf97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:oneShot&quot;&gt;oneShot&lt;/a&gt;&lt;/code&gt; function can be used to give a hint to the compiler that its argument will be called at most once, which may (or may not) enable certain optimizations. It can be useful to improve the performance of code in continuation passing style.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:oneShot&quot;&gt;oneShot&lt;/a&gt;&lt;/code&gt; 기능 (또는하지 않을 수 있습니다) 특정 최적화를 가능하게 할 수있다 인수 한 번 가장 호출 할 것을 컴파일러에 힌트를 제공 할 수 있습니다. 연속 전달 스타일에서 코드 성능을 향상시키는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="738f70f90664f23041407e78e7481ca578a61fb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:sortWith&quot;&gt;sortWith&lt;/a&gt;&lt;/code&gt; function sorts a list of elements using the user supplied function to project something out of each element</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:sortWith&quot;&gt;sortWith&lt;/a&gt;&lt;/code&gt; 의 기능은 각 요소의 돌출 된 것을 사용자에게 제공되는 기능을 이용하여 요소의 목록을 정렬</target>
        </trans-unit>
        <trans-unit id="f8c0871b5b6f8b978adbdfa4a64b81796ab60e0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-exts#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; function extracts a list of &lt;code&gt;Item l&lt;/code&gt; from the structure &lt;code&gt;l&lt;/code&gt;. It should satisfy fromList . toList = id.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-exts#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; 의 기능의리스트 추출 &lt;code&gt;Item l&lt;/code&gt; 구조에서 &lt;code&gt;l&lt;/code&gt; . fromList를 만족시켜야합니다. toList = id.</target>
        </trans-unit>
        <trans-unit id="b18ac779aba3ac796c0284e4d2cc3bb7c69a9f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; is parameterised in the same way as &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt;. The type argument of &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; should normally be an instance of class &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 는 같은 방법으로 매개 변수화됩니다 &lt;code&gt;&lt;a href=&quot;foreign-ptr#t:Ptr&quot;&gt;Ptr&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#t:ForeignPtr&quot;&gt;ForeignPtr&lt;/a&gt;&lt;/code&gt; 의 type 인수 는 일반적으로 &lt;code&gt;&lt;a href=&quot;foreign-storable#t:Storable&quot;&gt;Storable&lt;/a&gt;&lt;/code&gt; 클래스의 인스턴스 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="c5c813e0c538449c8b967f68e862c925ce84f9ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Leaf&quot; 'PrefixI 'False)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Node&quot; 'PrefixI 'False)&lt;/code&gt; invocations indicate that the enclosed part is the representation of the first and second constructor of datatype &lt;code&gt;Tree&lt;/code&gt;, respectively. Here, the meta-information regarding constructor names, fixity and whether it has named fields or not is encoded at the type level. The &lt;code&gt;'MetaCons&lt;/code&gt; type is also an instance of the type class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Constructor&quot;&gt;Constructor&lt;/a&gt;&lt;/code&gt;. This type class can be used to obtain information about the constructor at the value level.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Leaf&quot; 'PrefixI 'False)&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:C1&quot;&gt;C1&lt;/a&gt; ('MetaCons &quot;Node&quot; 'PrefixI 'False)&lt;/code&gt; 호출은 밀폐 부분 데이터 타입의 제 1 및 제 2 생성자의 표현임을 나타내 &lt;code&gt;Tree&lt;/code&gt; 각각. 여기에서 생성자 이름, 고 정성 및 필드 이름 지정 여부에 관한 메타 정보가 유형 레벨로 인코딩됩니다. &lt;code&gt;'MetaCons&lt;/code&gt; 의 유형은 유형 클래스의 인스턴스 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Constructor&quot;&gt;Constructor&lt;/a&gt;&lt;/code&gt; . 이 형식 클래스는 값 수준에서 생성자에 대한 정보를 얻는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b3758b0106cdc9eb50e8251878d12e347f33b9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:D1&quot;&gt;D1&lt;/a&gt; ('MetaData &quot;Tree&quot; &quot;Main&quot; &quot;package-name&quot; 'False)&lt;/code&gt; tag indicates that the enclosed part is the representation of the datatype &lt;code&gt;Tree&lt;/code&gt;. Again, the meta-information is encoded at the type level. The &lt;code&gt;'MetaData&lt;/code&gt; type is an instance of class &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Datatype&quot;&gt;Datatype&lt;/a&gt;&lt;/code&gt;, which can be used to obtain the name of a datatype, the module it has been defined in, the package it is located under, and whether it has been defined using &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;newtype&lt;/code&gt; at the value level.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:D1&quot;&gt;D1&lt;/a&gt; ('MetaData &quot;Tree&quot; &quot;Main&quot; &quot;package-name&quot; 'False)&lt;/code&gt; 태그는 동봉 된 부분은 데이터 형식의 표현을 나타냅니다 &lt;code&gt;Tree&lt;/code&gt; . 다시, 메타 정보는 타입 레벨에서 인코딩된다. &lt;code&gt;'MetaData&lt;/code&gt; 타입 클래스의 인스턴스 인 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Datatype&quot;&gt;Datatype&lt;/a&gt;&lt;/code&gt; 데이터 유형의 이름을 획득하기 위해 사용될 수있다,이 정의 된 모듈은 아래에있는 패키지 및이를 이용하여 정의되었는지 &lt;code&gt;data&lt;/code&gt; 또는 &lt;code&gt;newtype&lt;/code&gt; 은을 상기 가치 수준.</target>
        </trans-unit>
        <trans-unit id="490133c0313c9ba8b7db7fbe7e0fe5b2bf18b53d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; class can be generalized to range over types of kind &lt;code&gt;k -&amp;gt; *&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;. To do so, derive a &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; instance with the &lt;code&gt;PolyKinds&lt;/code&gt; extension enabled. For example, the declaration</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; 의 클래스 가지 유형 이상의 범위로 일반화 될 수있다 &lt;code&gt;k -&amp;gt; *&lt;/code&gt; 에 대한 어떠한 &lt;code&gt;k&lt;/code&gt; . 그렇게하려면 &lt;code&gt;PolyKinds&lt;/code&gt; 확장이 활성화 된 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic1&quot;&gt;Generic1&lt;/a&gt;&lt;/code&gt; 인스턴스를 파생시킵니다 . 예를 들어, 선언</target>
        </trans-unit>
        <trans-unit id="b51e7af78f64d86aed93f2c4d635092dabfbb762" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-generics#t:S1&quot;&gt;S1&lt;/a&gt; ('MetaSel 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness
      'DecidedLazy)&lt;/code&gt; tag indicates several things. The &lt;code&gt;'Nothing&lt;/code&gt; indicates that there is no record field selector associated with this field of the constructor (if there were, it would have been marked &lt;code&gt;'Just
      &quot;recordName&quot;&lt;/code&gt; instead). The other types contain meta-information on the field's strictness:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-generics#t:S1&quot;&gt;S1&lt;/a&gt; ('MetaSel 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)&lt;/code&gt; 태그는 몇 가지를 나타냅니다. &lt;code&gt;'Nothing&lt;/code&gt; (이 있다면, 그것은 표시 한 것입니다 생성자의이 분야와 관련된 레코드 필드 선택기가 없음을 나타냅니다 &lt;code&gt;'Just &quot;recordName&quot;&lt;/code&gt; 대신). 다른 유형에는 필드의 엄격성에 대한 메타 정보가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d0cdba7fd39b9182aef4d3fd8dd460a16d152145" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 유형입니다.</target>
        </trans-unit>
        <trans-unit id="ccb84e64bf7ed15245460804350d5f1cb2e76cd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; is used to construct &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt;s, and specifies how they handle illegal sequences.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-encoding-failure#t:CodingFailureMode&quot;&gt;CodingFailureMode&lt;/a&gt;&lt;/code&gt; 를 구성하는 데 사용됩니다 &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 들, 그리고 지정은 어떻게 불법 시퀀스를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="727269e258ca0cc1f5b84b187e061106f48b55ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; function computes the product of a finite list of numbers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:product&quot;&gt;product&lt;/a&gt;&lt;/code&gt; 함수는 숫자 유한 목록의 제품을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="29f4142ef18f41223155d901b10e8d9efcecd6fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; function computes the sum of a finite list of numbers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:sum&quot;&gt;sum&lt;/a&gt;&lt;/code&gt; 함수는 숫자 한정된리스트의 합을 계산한다.</target>
        </trans-unit>
        <trans-unit id="791089d56d61f4d3b56178eb7352f6df80bab567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; function takes a list of triples and returns three lists, analogous to &lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip3&quot;&gt;unzip3&lt;/a&gt;&lt;/code&gt; 기능은 유사 트리플 돌아갑니다 세 가지 목록의 목록 소요 &lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7bb018b60fccf9ba007b71e9eb3d8a718941c0f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; function takes a function which combines three elements, as well as three lists and returns a list of their point-wise combination, analogous to &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; 의 기능은 세 가지 요소뿐만 아니라, 세 가지 목록을 결합하고 유사 자신의 포인트 현명한 조합의 목록을 반환하는 함수 소요 &lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 을 . 목록 융합은 가능하지만 첫 번째 목록 인수와 결과 목록으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="24f96e687e4620b9109ecaf114edba80a1baa66c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type encapsulates an optional value. A value of type &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; either contains a value of type &lt;code&gt;a&lt;/code&gt; (represented as &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt;), or it is empty (represented as &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;). Using &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; is a good way to deal with errors or exceptional cases without resorting to drastic measures such as &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 유형은 옵션 값을 캡슐화합니다. 유형의 값은 &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt; 두 유형의 값을 포함 (로 표현 &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; a&lt;/code&gt; 을 ), 또는 (로 표현 비어 &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; ). 사용 &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 등 과감한 조치에 의존하지 않고 오류 또는 예외적 인 경우를 처리 할 수있는 좋은 방법입니다 &lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="266e593abd43191340f9b33fd8e15a10e0dc922a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; type is also a monad. It is a simple kind of error monad, where all errors are represented by &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;. A richer error monad can be built using the &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; 유형은 모나드이다. 모든 오류가 &lt;code&gt;&lt;a href=&quot;ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 으로 표시되는 간단한 종류의 오류 모나드 입니다. 보다 풍부한 에러 모나드는 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;&lt;/code&gt; 타입을 사용하여 구축 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b66270e05d2350973bd17982c61ae01a11e0a3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; class and the &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-num#t:Num&quot;&gt;Num&lt;/a&gt;&lt;/code&gt; 클래스와 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 유형입니다.</target>
        </trans-unit>
        <trans-unit id="d90a8339ada736c69e4569a04518d30718bf0396" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; function is list difference (non-associative). In the result of &lt;code&gt;xs&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt;&lt;code&gt;ys&lt;/code&gt;, the first occurrence of each element of &lt;code&gt;ys&lt;/code&gt; in turn (if any) has been removed from &lt;code&gt;xs&lt;/code&gt;. Thus</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; 의 기능 목록 차 (비 결합)이다. 결과에서 &lt;code&gt;xs&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-92--92-&quot;&gt;\\&lt;/a&gt;&lt;/code&gt; &lt;code&gt;ys&lt;/code&gt; , 각 요소의 첫 번째 발생 &lt;code&gt;ys&lt;/code&gt; 차례로 (있는 경우)에서 제거 된 &lt;code&gt;xs&lt;/code&gt; . 그러므로</target>
        </trans-unit>
        <trans-unit id="5f790bce52b575010739edf6cb02aa96c2885cb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; function takes a predicate and two lists and returns the first list with the first occurrence of each element of the second list removed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:deleteFirstsBy&quot;&gt;deleteFirstsBy&lt;/a&gt;&lt;/code&gt; 의 함수 술어 두리스트를 취하고 제거 번째 목록의 각 요소의 최초 발생에 첫 번째 목록을 반환한다.</target>
        </trans-unit>
        <trans-unit id="a978c3a6eaa51a8f531e3682bd2d367abf6607ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; function drops the largest suffix of a list in which the given predicate holds for all elements. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhileEnd&quot;&gt;dropWhileEnd&lt;/a&gt;&lt;/code&gt; 의 함수는 주어진 술어 모든 요소에 보유 된리스트의 최대 접미사 떨어진다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="109bdc9435b830725cf189c556de56387a5634f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; function returns the index of the first element in the given list which is equal (by &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;) to the query element, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; 의 함수 (동일한 의해 지정된리스트의 첫 번째 요소의 인덱스를 반환 &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt; 질의 요소 또는 행) &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우를.</target>
        </trans-unit>
        <trans-unit id="fadb3e5498f5526f3f541154cc26a34805337369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements equal to the query element, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndices&quot;&gt;elemIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elemIndex&quot;&gt;elemIndex&lt;/a&gt;&lt;/code&gt; 를 오름차순으로, 모든 요소의 인덱스는 쿼리 소자 동일 반환하여.</target>
        </trans-unit>
        <trans-unit id="6568db6f34d6f7a7bf8a446041bb3489740f3067" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; function takes a predicate and a list and returns the first element in the list matching the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:find&quot;&gt;find&lt;/a&gt;&lt;/code&gt; 기능은 술어와 목록을 받아서 첫 번째 술어와 일치하는 목록의 요소 또는 반환 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="4275cc9b36aa0e4769199e754686defa1594e4b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; function takes a predicate and a list and returns the index of the first element in the list satisfying the predicate, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there is no such element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 의 함수는 술어와리스트를 취해 조건을 만족하는 목록의 첫 번째 요소의 인덱스를 반환하거나 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 그러한 요소가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="2f76c76695266af5e321e89b84f46bb9a822c35f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; function extends &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt;, by returning the indices of all elements satisfying the predicate, in ascending order.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndices&quot;&gt;findIndices&lt;/a&gt;&lt;/code&gt; 의 기능 확장 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:findIndex&quot;&gt;findIndex&lt;/a&gt;&lt;/code&gt; 을 오름차순 술어를 만족하는 모든 원소의 인덱스를 반환하여.</target>
        </trans-unit>
        <trans-unit id="305fac941a1cc5c29fd70cdde5362cbcac036635" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to drop.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericDrop&quot;&gt;genericDrop&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 드롭 소자의 수와 같은 값.</target>
        </trans-unit>
        <trans-unit id="acf544a13e18ba4358a78c184967bf2f876a1aec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the index.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericIndex&quot;&gt;genericIndex&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:-33--33-&quot;&gt;!!&lt;/a&gt;&lt;/code&gt; 모든 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 값을 인덱스로 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="813efa98177dcd58489481e0cb89e0133d9e87e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of repetitions to make.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 반복 횟수를 확인하기 위해 값.</target>
        </trans-unit>
        <trans-unit id="d7d4ee3930a7434ca7c403b4565de9be9be21b9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the position at which to split.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericSplitAt&quot;&gt;genericSplitAt&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 분할하는 위치로서 값.</target>
        </trans-unit>
        <trans-unit id="e4afafa2336fcae4601a2eaca8e96fec05a60b92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; function is an overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;, which accepts any &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; value as the number of elements to take.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:genericTake&quot;&gt;genericTake&lt;/a&gt;&lt;/code&gt; 의 함수의 과부하 버전 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt; 임의 받아 &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 취할 소자의 수와 같은 값.</target>
        </trans-unit>
        <trans-unit id="f4f6a5e91131c42f6af8de505ab848b2b5f93891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; function takes a list and returns a list of lists such that the concatenation of the result is equal to the argument. Moreover, each sublist in the result contains only equal elements. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 기능 목록을 취하여 결과 병합이 인수 동일하도록리스트의 목록을 반환한다. 또한 결과의 각 하위 목록에는 동일한 요소 만 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="d100c0bef6b2c8b32f44a08a7e7eacb8db8f8cbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; 기능의 비 과부하 버전 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34b65659a51ccdb8baad87c00cd32d74ef9d403b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; function returns all initial segments of the argument, shortest first. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt; 는 짧은 첫째, 반환에게 인수의 모든 초기 세그먼트를 작동합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="144853d03169fd7769ada44b12eba567928f0591" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; function takes the list intersection of two lists. For example,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; 기능은 두 목록의 목록 교차합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="605c4315b576beab0a53cad6a48c3adba1b2f451" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; function is the non-overloaded version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersectBy&quot;&gt;intersectBy&lt;/a&gt;&lt;/code&gt; 의 기능의 비 오버로드 된 버전입니다 &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intersect&quot;&gt;intersect&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
