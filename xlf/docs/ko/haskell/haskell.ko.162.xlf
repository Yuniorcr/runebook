<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="c7349a34435850bc973a75584dea2319034c0124" translate="yes" xml:space="preserve">
          <source>Renamer stats</source>
          <target state="translated">Renamer 통계</target>
        </trans-unit>
        <trans-unit id="9e1ec92d4c65cbeb56b4afb5c7eb5b28b06150b9" translate="yes" xml:space="preserve">
          <source>Renaming files</source>
          <target state="translated">파일 이름 바꾸기</target>
        </trans-unit>
        <trans-unit id="57bb091db8c41259255e747c0ecd1b604c7e516e" translate="yes" xml:space="preserve">
          <source>Render a document with annotations, by interpreting the start and end of the annotations, as well as the text details in the context of a monad.</source>
          <target state="translated">주석의 시작과 끝 및 모나드 컨텍스트의 텍스트 세부 사항을 해석하여 주석이있는 문서를 렌더링하십시오.</target>
        </trans-unit>
        <trans-unit id="a9a4799c8dd61934677f0523fd77b9ce5a5bae56" translate="yes" xml:space="preserve">
          <source>Render a piece of HTML without adding a DOCTYPE declaration or root element. Does not add any extra whitespace.</source>
          <target state="translated">DOCTYPE 선언 또는 루트 요소를 추가하지 않고 HTML을 렌더링하십시오. 여분의 공백을 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0396f6604a2cd217fc5188ee1468a23a68c8152" translate="yes" xml:space="preserve">
          <source>Render a piece of indented HTML without adding a DOCTYPE declaration or a root element. The indentation is done inside elements. This can change the meaning of the HTML document, and is mostly useful for debugging the HTML output. The implementation is inefficient, and you are normally better off using &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:showHtmlFragment&quot;&gt;showHtmlFragment&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:renderHtmlFragment&quot;&gt;renderHtmlFragment&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">DOCTYPE 선언이나 루트 요소를 추가하지 않고 들여 쓰기 된 HTML 조각을 렌더링하십시오. 들여 쓰기는 요소 내부에서 수행됩니다. HTML 문서의 의미를 변경할 수 있으며 HTML 출력을 디버깅하는 데 주로 유용합니다. 구현은 비효율적이며 일반적으로 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:showHtmlFragment&quot;&gt;showHtmlFragment&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:renderHtmlFragment&quot;&gt;renderHtmlFragment&lt;/a&gt;&lt;/code&gt; 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a89ea59d1fabd252ac4ff35ea0e42758d3ed5fc6" translate="yes" xml:space="preserve">
          <source>Render a piece of indented HTML without adding a DOCTYPE declaration or a root element. The indentation is done inside elements. This can change the meaning of the HTML document, and is mostly useful for debugging the HTML output. The implementation is inefficient, and you are normally better off using &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:showHtmlFragment&quot;&gt;showHtmlFragment&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:renderHtmlFragment&quot;&gt;renderHtmlFragment&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">DOCTYPE 선언이나 루트 요소를 추가하지 않고 들여 쓰기 된 HTML 조각을 렌더링하십시오. 들여 쓰기는 요소 내부에서 수행됩니다. HTML 문서의 의미를 변경할 수 있으며 HTML 출력을 디버깅하는 데 주로 유용합니다. 구현은 비효율적이며 일반적으로 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:showHtmlFragment&quot;&gt;showHtmlFragment&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:renderHtmlFragment&quot;&gt;renderHtmlFragment&lt;/a&gt;&lt;/code&gt; 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="6d0f0aa368898e42e42051599ad438bce930756e" translate="yes" xml:space="preserve">
          <source>Render a piece of indented HTML without adding a DOCTYPE declaration or a root element. The indentation is done inside elements. This can change the meaning of the HTML document, and is mostly useful for debugging the HTML output. The implementation is inefficient, and you are normally better off using &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:showHtmlFragment&quot;&gt;showHtmlFragment&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:renderHtmlFragment&quot;&gt;renderHtmlFragment&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">DOCTYPE 선언이나 루트 요소를 추가하지 않고 들여 쓰기 된 HTML 조각을 렌더링하십시오. 들여 쓰기는 요소 내부에서 수행됩니다. HTML 문서의 의미를 변경할 수 있으며 HTML 출력을 디버깅하는 데 주로 유용합니다. 구현은 비효율적이며 일반적으로 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:showHtmlFragment&quot;&gt;showHtmlFragment&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:renderHtmlFragment&quot;&gt;renderHtmlFragment&lt;/a&gt;&lt;/code&gt; 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="71fee5123224c152c3f87461295917f353b82c69" translate="yes" xml:space="preserve">
          <source>Render a piece of indented HTML without adding a DOCTYPE declaration or root element. Only adds whitespace where it does not change the meaning of the document.</source>
          <target state="translated">DOCTYPE 선언 또는 루트 요소를 추가하지 않고 들여 쓰기 된 HTML 조각을 렌더링하십시오. 문서의 의미를 변경하지 않는 공백 만 추가합니다.</target>
        </trans-unit>
        <trans-unit id="989a09007121599919344bf188e1cc94bb96ae11" translate="yes" xml:space="preserve">
          <source>Render a stacktrace as a string</source>
          <target state="translated">스택 추적을 문자열로 렌더링</target>
        </trans-unit>
        <trans-unit id="1c7773afe751d705bbb0bab378fcfc6c481f0947" translate="yes" xml:space="preserve">
          <source>Render an annotated &lt;code&gt;Doc&lt;/code&gt; to a String and list of annotations (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt;) using the default &lt;code&gt;Style&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">기본 &lt;code&gt;Style&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 참조 )을 사용하여 주석 이 달린 &lt;code&gt;Doc&lt;/code&gt; 을 String 및 주석 목록 ( &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; 참조 )에 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="9f470695f470e172217ac5b861bd07c99096b4a5" translate="yes" xml:space="preserve">
          <source>Render an annotated &lt;code&gt;Doc&lt;/code&gt; to a String and list of annotations (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt;) using the default &lt;code&gt;Style&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">기본 &lt;code&gt;Style&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 참조 )을 사용하여 주석 이 달린 &lt;code&gt;Doc&lt;/code&gt; 을 String 및 주석 목록 ( &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#t:Span&quot;&gt;Span&lt;/a&gt;&lt;/code&gt; 참조 )에 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="92ba9e1fab478804fa747870260b0ff064c15ae9" translate="yes" xml:space="preserve">
          <source>Render out a String, interpreting the annotations as part of the resulting document.</source>
          <target state="translated">주석을 결과 문서의 일부로 해석하여 문자열을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="74c43db33234ecef01eb99606404a4b48f7d70ce" translate="yes" xml:space="preserve">
          <source>Render the &lt;code&gt;Doc&lt;/code&gt; to a String using the default &lt;code&gt;Style&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">기본 &lt;code&gt;Style&lt;/code&gt; 사용하여 &lt;code&gt;Doc&lt;/code&gt; 를 문자열로 렌더링합니다 ( &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="3f8842d2196fa6bcd3a6003035321861d97ea702" translate="yes" xml:space="preserve">
          <source>Render the &lt;code&gt;Doc&lt;/code&gt; to a String using the default &lt;code&gt;Style&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">기본 &lt;code&gt;Style&lt;/code&gt; 사용하여 &lt;code&gt;Doc&lt;/code&gt; 를 문자열로 렌더링합니다 ( &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="87d0d1bd7f492f89f6856659a698622e65a18512" translate="yes" xml:space="preserve">
          <source>Render the &lt;code&gt;Doc&lt;/code&gt; to a String using the default &lt;code&gt;Style&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">기본 &lt;code&gt;Style&lt;/code&gt; 사용하여 &lt;code&gt;Doc&lt;/code&gt; 를 문자열로 렌더링합니다 ( &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="12f0d532a812bfd8c1a9dcc5e2d9fb2fc2e469b9" translate="yes" xml:space="preserve">
          <source>Render the &lt;code&gt;Doc&lt;/code&gt; to a String using the given &lt;code&gt;Style&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;Style&lt;/code&gt; 를 사용해 &lt;code&gt;Doc&lt;/code&gt; 를 String에 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="e263a3336086d5999e51a2639cfc00cf3424c6ff" translate="yes" xml:space="preserve">
          <source>Render this exception value in a human-friendly manner.</source>
          <target state="translated">이 예외 값을 인간 친화적 인 방식으로 렌더링하십시오.</target>
        </trans-unit>
        <trans-unit id="e066e80468f5234a1001137061731ae39a651ab5" translate="yes" xml:space="preserve">
          <source>Rendering</source>
          <target state="translated">Rendering</target>
        </trans-unit>
        <trans-unit id="34a6e257033eabcb340989811be4abac8f495cec" translate="yes" xml:space="preserve">
          <source>Rendering documents</source>
          <target state="translated">문서 렌더링</target>
        </trans-unit>
        <trans-unit id="c4352059e23f7c8b5fdeb527b42173ae6cff8abe" translate="yes" xml:space="preserve">
          <source>Rendering mode.</source>
          <target state="translated">렌더링 모드.</target>
        </trans-unit>
        <trans-unit id="edcebf7a78fe981d04d9e64e593c132261b8c07d" translate="yes" xml:space="preserve">
          <source>Rendering with a particular style</source>
          <target state="translated">특정 스타일로 렌더링</target>
        </trans-unit>
        <trans-unit id="7db65b43576bf07e08468b53aec04cf679691cd8" translate="yes" xml:space="preserve">
          <source>Rep (Generic)</source>
          <target state="translated">담당자 (일반)</target>
        </trans-unit>
        <trans-unit id="25e90fd26c391e05ac5ac88ef33690eb193fa404" translate="yes" xml:space="preserve">
          <source>Rep1 (Generic1)</source>
          <target state="translated">담당자 1 (일반 1)</target>
        </trans-unit>
        <trans-unit id="c55c5386c4748e58caec034acfad7a9a0f8d3a82" translate="yes" xml:space="preserve">
          <source>Repeat a value &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="translated">값을 &lt;code&gt;n&lt;/code&gt; 번 반복하십시오 .</target>
        </trans-unit>
        <trans-unit id="13ca240f053ae4ac28b651b1633ebe58645ee9c6" translate="yes" xml:space="preserve">
          <source>Repeat an action indefinitely.</source>
          <target state="translated">작업을 무기한 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="180241f79b869b03862e97b4f7229351a6acf267" translate="yes" xml:space="preserve">
          <source>Repeat the previous command.</source>
          <target state="translated">이전 명령을 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="b4c2e50efbac27b5756172990043eab9f749caef" translate="yes" xml:space="preserve">
          <source>Repeated indices in the association list are handled as for &lt;code&gt;&lt;a href=&quot;data-array#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;: Haskell 2010 specifies that the resulting array is undefined (i.e. bottom), but GHC's implementation uses the last association for each index.</source>
          <target state="translated">연관 목록에서 반복되는 인덱스는 &lt;code&gt;&lt;a href=&quot;data-array#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; 과 같이 처리됩니다. . Haskell 2010은 결과 배열이 정의되지 않음 (즉, 아래쪽)을 지정하지만 GHC 구현에서는 각 인덱스의 마지막 연관을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="061f8bc61cf8ff462c0933d83acdae1674118907" translate="yes" xml:space="preserve">
          <source>Repeated indices in the association list are handled as for &lt;code&gt;&lt;a href=&quot;ghc-arr#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;: Haskell 2010 specifies that the resulting array is undefined (i.e. bottom), but GHC's implementation uses the last association for each index.</source>
          <target state="translated">연관리스트의 반복 된 인덱스는 &lt;code&gt;&lt;a href=&quot;ghc-arr#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt; 과 같이 처리됩니다 . Haskell 2010은 결과 배열이 정의되지 않음 (즉, 아래쪽)을 지정하지만 GHC 구현에서는 각 인덱스의 마지막 연관을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="711ba373a79d31376784182b72065d953222072d" translate="yes" xml:space="preserve">
          <source>Repetition</source>
          <target state="translated">Repetition</target>
        </trans-unit>
        <trans-unit id="203954ef3852cad427fc7bba8f24e8bfd55318a5" translate="yes" xml:space="preserve">
          <source>Replace all extensions of a file with a new extension. Note that &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:replaceExtension&quot;&gt;replaceExtension&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; both work for adding multiple extensions, so only required when you need to drop all extensions first.</source>
          <target state="translated">파일의 모든 확장자를 새로운 확장자로 바꾸십시오. 참고 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:replaceExtension&quot;&gt;replaceExtension&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; 먼저 모든 확장을 드롭해야 할 때 너무에만 필요합니다 여러 확장 기능을 추가, 모두 작동합니다.</target>
        </trans-unit>
        <trans-unit id="72c284911c0f562af8d743e9793ca8e8ff29667d" translate="yes" xml:space="preserve">
          <source>Replace all extensions of a file with a new extension. Note that &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:replaceExtension&quot;&gt;replaceExtension&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; both work for adding multiple extensions, so only required when you need to drop all extensions first.</source>
          <target state="translated">파일의 모든 확장자를 새로운 확장자로 바꾸십시오. 참고 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:replaceExtension&quot;&gt;replaceExtension&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:addExtension&quot;&gt;addExtension&lt;/a&gt;&lt;/code&gt; 먼저 모든 확장을 드롭해야 할 때 너무에만 필요합니다 여러 확장 기능을 추가, 모두 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4c0823f4847d545567dd8302135788f079ea55c4" translate="yes" xml:space="preserve">
          <source>Replace all locations in the input with the same value. The default definition is &lt;code&gt;&lt;a href=&quot;control-monad#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, but this may be overridden with a more efficient version.</source>
          <target state="translated">입력의 모든 위치를 동일한 값으로 바꿉니다. 기본 정의는 &lt;code&gt;&lt;a href=&quot;control-monad#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 이지만 더 효율적인 버전으로 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ae954cfcce8d05d3d28022faa1cefad196caa67" translate="yes" xml:space="preserve">
          <source>Replace all locations in the input with the same value. The default definition is &lt;code&gt;&lt;a href=&quot;control-monad-instances#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, but this may be overridden with a more efficient version.</source>
          <target state="translated">입력의 모든 위치를 동일한 값으로 바꾸십시오. 기본 정의는 &lt;code&gt;&lt;a href=&quot;control-monad-instances#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 이지만 더 효율적인 버전으로 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc970150dc79b794321f0edff04417f225cb5aef" translate="yes" xml:space="preserve">
          <source>Replace all locations in the input with the same value. The default definition is &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, but this may be overridden with a more efficient version.</source>
          <target state="translated">입력의 모든 위치를 동일한 값으로 바꾸십시오. 기본 정의는 &lt;code&gt;&lt;a href=&quot;data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 이지만 더 효율적인 버전으로 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a81c2807ba345abe34a825bdb92d7f1c4f392afa" translate="yes" xml:space="preserve">
          <source>Replace all locations in the input with the same value. The default definition is &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;ghc-base#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, but this may be overridden with a more efficient version.</source>
          <target state="translated">입력의 모든 위치를 동일한 값으로 바꾸십시오. 기본 정의는 &lt;code&gt;&lt;a href=&quot;ghc-base#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;ghc-base#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 이지만 더 효율적인 버전으로 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f677b5ab54ec7700f8aa112431fe1d686734e1e1" translate="yes" xml:space="preserve">
          <source>Replace all locations in the input with the same value. The default definition is &lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;prelude#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, but this may be overridden with a more efficient version.</source>
          <target state="translated">입력의 모든 위치를 동일한 값으로 바꾸십시오. 기본 정의는 &lt;code&gt;&lt;a href=&quot;prelude#v:fmap&quot;&gt;fmap&lt;/a&gt; . &lt;a href=&quot;prelude#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 이지만 더 효율적인 버전으로 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01390d4b3f68ac20f556d360b5e40d6cc51b0423" translate="yes" xml:space="preserve">
          <source>Replace all locations in the output with the same value. The default definition is &lt;code&gt;&lt;a href=&quot;data-functor-contravariant#v:contramap&quot;&gt;contramap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, but this may be overridden with a more efficient version.</source>
          <target state="translated">출력의 모든 위치를 동일한 값으로 바꾸십시오. 기본 정의는 &lt;code&gt;&lt;a href=&quot;data-functor-contravariant#v:contramap&quot;&gt;contramap&lt;/a&gt; . &lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt; 이지만 더 효율적인 버전으로 재정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98d97ae2c4e41287d8c7c06782fc94f17ade6313" translate="yes" xml:space="preserve">
          <source>Replace an invalid input byte with the Unicode replacement character U+FFFD.</source>
          <target state="translated">유효하지 않은 입력 바이트를 유니 코드 대체 문자 U + FFFD로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="b279f97032f9ccdb089926b2954f43b47cf0bc96" translate="yes" xml:space="preserve">
          <source>Replace an invalid input with a valid output.</source>
          <target state="translated">유효하지 않은 입력을 유효한 출력으로 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="710069cd7ce970d000411758cf92ef5db06e5b43" translate="yes" xml:space="preserve">
          <source>Replace any binding &lt;code&gt;!p = e&lt;/code&gt; with &lt;code&gt;v = case e of p -&amp;gt; (x1, ..., xn); (x1, ..., xn) = v&lt;/code&gt; and replace &lt;code&gt;body&lt;/code&gt; with &lt;code&gt;v seq body&lt;/code&gt;, where &lt;code&gt;v&lt;/code&gt; is fresh. This translation works fine if &lt;code&gt;p&lt;/code&gt; is already a variable &lt;code&gt;x&lt;/code&gt;, but can obviously be optimised by not introducing a fresh variable &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">모든 바인딩 &lt;code&gt;!p = e&lt;/code&gt; 를 &lt;code&gt;v = case e of p -&amp;gt; (x1, ..., xn); (x1, ..., xn) = v&lt;/code&gt; 이고 &lt;code&gt;body&lt;/code&gt; 를 &lt;code&gt;v seq body&lt;/code&gt; 로 바꿉니다 . 여기서 &lt;code&gt;v&lt;/code&gt; 는 최신입니다. 이 변환은 &lt;code&gt;p&lt;/code&gt; 가 이미 변수 &lt;code&gt;x&lt;/code&gt; 인 경우에는 잘 작동 하지만 새로운 변수 &lt;code&gt;v&lt;/code&gt; 를 도입하지 않으면 최적화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea93161b8e74f17f89a87eea1945732825c68a45" translate="yes" xml:space="preserve">
          <source>Replace any binding &lt;code&gt;p = e&lt;/code&gt;, where &lt;code&gt;p&lt;/code&gt; is not a variable, with &lt;code&gt;v = e; x1 = case v of p -&amp;gt; x1; ...; xn = case v of p -&amp;gt; xn&lt;/code&gt;, where &lt;code&gt;v&lt;/code&gt; is fresh and &lt;code&gt;x1&lt;/code&gt;.. &lt;code&gt;xn&lt;/code&gt; are the bound variables of &lt;code&gt;p&lt;/code&gt;. Again if &lt;code&gt;e&lt;/code&gt; is a variable, this can be optimised by not introducing a fresh variable.</source>
          <target state="translated">바인딩 &lt;code&gt;p = e&lt;/code&gt; 바꿉니다 . 여기서 &lt;code&gt;p&lt;/code&gt; 는 변수가 아닙니다. &lt;code&gt;v = e; x1 = case v of p -&amp;gt; x1; ...; xn = case v of p -&amp;gt; xn&lt;/code&gt; . 여기서 &lt;code&gt;v&lt;/code&gt; 는 신선하고 &lt;code&gt;x1&lt;/code&gt; .. &lt;code&gt;xn&lt;/code&gt; 은 &lt;code&gt;p&lt;/code&gt; 의 바인딩 된 변수입니다 . 다시 &lt;code&gt;e&lt;/code&gt; 가 변수라면, 새로운 변수를 도입하지 않음으로써 최적화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81063ace05e94fc04efdafdeb00bab024fa5cbd6" translate="yes" xml:space="preserve">
          <source>Replace each element of a list with a constant &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">목록의 각 요소를 상수 &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="513681c11e07f73c6a50486d27fc8225cfd91990" translate="yes" xml:space="preserve">
          <source>Replace every element of a list with unit:</source>
          <target state="translated">목록의 모든 요소를 ​​단위로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="2648d76cb08af5485bbcad7562d6a30eed9a95d8" translate="yes" xml:space="preserve">
          <source>Replace the contents of a &lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; with a constant &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 의 내용을 상수 &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 교체합니다 :</target>
        </trans-unit>
        <trans-unit id="f31cb308fcd0aaf7f1f3072a015acd75e99b34bf" translate="yes" xml:space="preserve">
          <source>Replace the contents of a &lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; with unit:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-maybe#v:Maybe&quot;&gt;Maybe&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 의 내용을 단위로 교체하십시오 .</target>
        </trans-unit>
        <trans-unit id="5977c89e8466a29307fddb6c6e225a0b69928af1" translate="yes" xml:space="preserve">
          <source>Replace the contents of an &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; with a constant &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;, resulting in an &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt;
&lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">의 내용을 대체 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 상수와 &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 결과, &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0b7036b629fc4f069c30e816ee286bff66f0a0fe" translate="yes" xml:space="preserve">
          <source>Replace the contents of an &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; with unit, resulting in an &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; ()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 의 내용을 단위로 &lt;code&gt;&lt;a href=&quot;data-either#v:Either&quot;&gt;Either&lt;/a&gt; &lt;a href=&quot;data-int#v:Int&quot;&gt;Int&lt;/a&gt; ()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c404cb7e17bfbc9363bb25af2f270338bbdb908f" translate="yes" xml:space="preserve">
          <source>Replace the second element of a pair with a constant &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">쌍의 두 번째 요소를 상수 &lt;code&gt;&lt;a href=&quot;data-string#v:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="ad5fd43d79beb7227805310f949ed0b8e62c8219" translate="yes" xml:space="preserve">
          <source>Replace the second element of a pair with unit:</source>
          <target state="translated">쌍의 두 번째 요소를 단위로 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="73b7214222897a4da7310495b3173dc47e2ed0ae" translate="yes" xml:space="preserve">
          <source>Replace the state in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; monad. Note that the state is local to the Haskell module in which the Template Haskell expression is executed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Q&quot;&gt;Q&lt;/a&gt;&lt;/code&gt; 모나드 에서 상태를 교체하십시오 . 상태는 Template Haskell 표현식이 실행되는 Haskell 모듈에 국한됩니다.</target>
        </trans-unit>
        <trans-unit id="e783a2110c1a2dd69be9228b632da888c51e6f89" translate="yes" xml:space="preserve">
          <source>Replace the state inside the monad.</source>
          <target state="translated">모나드 내부의 상태를 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="fabcda4a7ffafa1589944ce7fdd1741e8b4ce15f" translate="yes" xml:space="preserve">
          <source>Replace with the closest visual match upon an illegal sequence</source>
          <target state="translated">잘못된 시퀀스에서 가장 가까운 시각적 일치로 교체</target>
        </trans-unit>
        <trans-unit id="78bc12a2d09cc8e540b1af5c661d077103eab0cf" translate="yes" xml:space="preserve">
          <source>Replicates a &lt;code&gt;withXXX&lt;/code&gt; combinator over a list of objects, yielding a list of marshalled objects</source>
          <target state="translated">&lt;code&gt;withXXX&lt;/code&gt; 콤비 네이터 를 객체 목록에 복제하여 마샬링 된 객체 목록을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6c2bb735a46a8ff307fe2e638d581295b2a49e09" translate="yes" xml:space="preserve">
          <source>Reply</source>
          <target state="translated">Reply</target>
        </trans-unit>
        <trans-unit id="210be950e48b6b09718f614ef624140560013a67" translate="yes" xml:space="preserve">
          <source>Report a warning to the user, and carry on.</source>
          <target state="translated">사용자에게 경고를보고하고 계속하십시오.</target>
        </trans-unit>
        <trans-unit id="e35e7e48596095fe28a97fb7c0701b1712a21966" translate="yes" xml:space="preserve">
          <source>Report all record wildcards where none of the variables bound implicitly are used. For instance:</source>
          <target state="translated">암시 적으로 바인딩 된 변수가 사용되지 않는 모든 레코드 와일드 카드를보고합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="f1819d25d3da8dde34b0be9d666711b3615eec69" translate="yes" xml:space="preserve">
          <source>Report all record wildcards where the wild card match binds no patterns. For instance:</source>
          <target state="translated">와일드 카드 일치가 패턴을 바인딩하지 않는 모든 레코드 와일드 카드를보고합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="b29cc263854e35bdc210f347658ec81f2657154e" translate="yes" xml:space="preserve">
          <source>Report all unused implicitly bound type variables which arise from patterns in type family and data family instances. For instance:</source>
          <target state="translated">유형 패밀리 및 데이터 패밀리 인스턴스의 패턴에서 발생하는 사용되지 않는 암시 적으로 바운드 된 유형 변수를 모두보고하십시오. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="5ac656d868f74d0d322d7eb08c66336d780f95e3" translate="yes" xml:space="preserve">
          <source>Report all unused type variables which arise from explicit, user-written &lt;code&gt;forall&lt;/code&gt; statements. For instance:</source>
          <target state="translated">명시적이고 사용자 작성 &lt;code&gt;forall&lt;/code&gt; 문 에서 발생하는 사용되지 않은 모든 유형 변수를보고하십시오 . 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="7e5640248d20d9738f29370ad53212fe64c17e0c" translate="yes" xml:space="preserve">
          <source>Report all unused variables which arise from term-level pattern matches, including patterns consisting of a single variable. For instance &lt;code&gt;f x y = []&lt;/code&gt; would report &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; as unused. The warning is suppressed if the variable name begins with an underscore, thus:</source>
          <target state="translated">단일 변수로 구성된 패턴을 포함하여 용어 수준 패턴 일치에서 발생하는 사용되지 않은 모든 변수를보고합니다. 예를 들어 &lt;code&gt;f x y = []&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 사용되지 않은 것으로보고 합니다. 변수 이름이 밑줄로 시작하면 경고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2d850b8b5dd31316cfd82cb19c2b631422fed64" translate="yes" xml:space="preserve">
          <source>Report an error (True) or warning (False) ...but carry on; use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; to stop</source>
          <target state="translated">오류 (True) 또는 경고 (False)를보고하지만 계속 수행하십시오. 사용 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; 정지</target>
        </trans-unit>
        <trans-unit id="acc2d5506ea8125ec29ec5ef8fe9fe49f69d40a1" translate="yes" xml:space="preserve">
          <source>Report an error (True) or warning (False) ...but carry on; use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; to stop</source>
          <target state="translated">오류 (True) 또는 경고 (False)를보고하지만 계속하십시오. 사용 중지 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5859a29b8a401433d1b3aeecf26cc9189797e212" translate="yes" xml:space="preserve">
          <source>Report an error (True) or warning (False) ...but carry on; use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; to stop</source>
          <target state="translated">오류 (True) 또는 경고 (False)를보고하지만 계속하십시오. 사용 중지 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1c620c4068859caa4d346ede74c1d8d10061e19" translate="yes" xml:space="preserve">
          <source>Report an error (True) or warning (False), but carry on; use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; to stop.</source>
          <target state="translated">오류 (참) 또는 경고 (거짓)를보고하지만 계속하십시오. 사용 을 중지 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; 마십시오 .</target>
        </trans-unit>
        <trans-unit id="7a73ba13d393a1dc95dce19effeef9fcff8d35c5" translate="yes" xml:space="preserve">
          <source>Report an error (True) or warning (False), but carry on; use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; to stop.</source>
          <target state="translated">오류 (True) 또는 경고 (False)를보고하지만 계속 진행합니다. 사용 중지에 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="b432c61adbdf2d1649e43e6985d528f2509ac58a" translate="yes" xml:space="preserve">
          <source>Report an error (True) or warning (False), but carry on; use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; to stop.</source>
          <target state="translated">오류 (True) 또는 경고 (False)를보고하지만 계속 진행합니다. 사용 중지에 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="27c2f2834c134bcd0f46f16a100ad0f41229f9a9" translate="yes" xml:space="preserve">
          <source>Report an error to the user, but allow the current splice's computation to carry on. To abort the computation, use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">사용자에게 오류를보고하지만 현재 스플 라이스의 계산을 계속 수행하십시오. 계산을 중단하려면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="394f0849152c51f645d6bcf635c3c97da8bbb201" translate="yes" xml:space="preserve">
          <source>Report an error to the user, but allow the current splice's computation to carry on. To abort the computation, use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">사용자에게 오류를보고하되 현재 스플 라이스의 계산이 계속되도록 허용합니다. 계산을 중단하려면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ff35f018bc80610f0ec44efef8fc8bfae660c5f3" translate="yes" xml:space="preserve">
          <source>Report an error to the user, but allow the current splice's computation to carry on. To abort the computation, use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">사용자에게 오류를보고하되 현재 스플 라이스의 계산이 계속되도록 허용합니다. 계산을 중단하려면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="62d5b0be5b3ad3e15cbbad98168f15169b9f9a48" translate="yes" xml:space="preserve">
          <source>Report an error.</source>
          <target state="translated">오류를보고하십시오.</target>
        </trans-unit>
        <trans-unit id="fcce7c0789dcd81563ee3585394cd8a41c2e0685" translate="yes" xml:space="preserve">
          <source>Report any function definitions (and local bindings) which are unused. An alias for</source>
          <target state="translated">사용되지 않은 함수 정의 (및 로컬 바인딩)를보고하십시오. 에 대한 별칭</target>
        </trans-unit>
        <trans-unit id="c73f069d8746fd50c3b70f8192e9fd23df6fc4f6" translate="yes" xml:space="preserve">
          <source>Report any function definitions which are unused.</source>
          <target state="translated">사용되지 않은 함수 정의를보고하십시오.</target>
        </trans-unit>
        <trans-unit id="c68cbca196a7f8a1f32e076e847cdcae60eb1331" translate="yes" xml:space="preserve">
          <source>Report any local definitions which are unused. For example:</source>
          <target state="translated">사용되지 않은 로컬 정의를보고하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="56ea34f3aadd7ff1bfabeb1f2e13d83f09f25cc0" translate="yes" xml:space="preserve">
          <source>Report any modules that are explicitly imported but never used. However, the form &lt;code&gt;import M()&lt;/code&gt; is never reported as an unused import, because it is a useful idiom for importing instance declarations, which are anonymous in Haskell.</source>
          <target state="translated">명시 적으로 가져 왔지만 사용되지 않은 모듈은 모두보고하십시오. 그러나 &lt;code&gt;import M()&lt;/code&gt; 형식 은 Haskell에서 익명 인 인스턴스 선언을 가져 오는 데 유용한 관용구이므로 사용되지 않은 가져 오기로보고되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="186922e407e4cea2c9163d0d00b27598db5e305a" translate="yes" xml:space="preserve">
          <source>Report expressions occurring in &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;mdo&lt;/code&gt; blocks that appear to lack a binding. For instance &lt;code&gt;do { return (popInt 10) ; return 10 }&lt;/code&gt; would report the first statement in the &lt;code&gt;do&lt;/code&gt; block as suspicious, as it has the type &lt;code&gt;StackM (StackM Int)&lt;/code&gt; (which consists of two nested applications of the same monad constructor), but which is not then &amp;ldquo;unpacked&amp;rdquo; by binding the result. The warning is suppressed by explicitly mentioning in the source code that your program is throwing something away:</source>
          <target state="translated">바인딩이없는 것으로 보이는 &lt;code&gt;do&lt;/code&gt; 및 &lt;code&gt;mdo&lt;/code&gt; 블록 에서 발생하는 표현식을보고하십시오 . 예를 들어 &lt;code&gt;do { return (popInt 10) ; return 10 }&lt;/code&gt; 은 &lt;code&gt;do&lt;/code&gt; 블록 의 첫 번째 명령문이 &lt;code&gt;StackM (StackM Int)&lt;/code&gt; 유형 ( 동일한 모나드 생성자의 두 개의 중첩 된 애플리케이션으로 구성됨)을 갖지만 의심되는 것으로보고 합니다. 결과. 프로그램이 무언가를 버리고 있다는 소스 코드를 명시 적으로 언급하면 ​​경고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="038c812031da3596ee105d128edaed69c9791794" translate="yes" xml:space="preserve">
          <source>Report expressions occurring in &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;mdo&lt;/code&gt; blocks that appear to silently throw information away. For instance &lt;code&gt;do { mapM popInt xs ; return 10 }&lt;/code&gt; would report the first statement in the &lt;code&gt;do&lt;/code&gt; block as suspicious, as it has the type &lt;code&gt;StackM [Int]&lt;/code&gt; and not &lt;code&gt;StackM ()&lt;/code&gt;, but that &lt;code&gt;[Int]&lt;/code&gt; value is not bound to anything. The warning is suppressed by explicitly mentioning in the source code that your program is throwing something away:</source>
          <target state="translated">정보를 자동으로 버리는 것처럼 보이는 &lt;code&gt;do&lt;/code&gt; 및 &lt;code&gt;mdo&lt;/code&gt; 블록 에서 발생하는 표현식을보고 하십시오. 예를 들어 &lt;code&gt;do { mapM popInt xs ; return 10 }&lt;/code&gt; (가)의 첫 번째 문을보고 할 &lt;code&gt;do&lt;/code&gt; 의심 블록은 유형이 같은 &lt;code&gt;StackM [Int]&lt;/code&gt; 하지 &lt;code&gt;StackM ()&lt;/code&gt; 하지만 &lt;code&gt;[Int]&lt;/code&gt; 값이 아무것도에 바인딩되지 않습니다. 프로그램이 무언가를 버리고 있다는 소스 코드를 명시 적으로 언급하면 ​​경고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cd30304350d0689ec5bbe6a3f6497f3ec6334207" translate="yes" xml:space="preserve">
          <source>Report the heap size.</source>
          <target state="translated">힙 크기를보고하십시오.</target>
        </trans-unit>
        <trans-unit id="70173459a195f442c355a3fc300b097436d9e070" translate="yes" xml:space="preserve">
          <source>Report the live heap size.</source>
          <target state="translated">라이브 힙 크기를보고하십시오.</target>
        </trans-unit>
        <trans-unit id="d80bdbb7c8a6935b5a45975b33da400dc2c16cc6" translate="yes" xml:space="preserve">
          <source>Report unqualified imports of core libraries which are expected to cause compatibility problems in future releases.</source>
          <target state="translated">향후 릴리스에서 호환성 문제를 일으킬 것으로 예상되는 코어 라이브러리의 정규화되지 않은 가져 오기를보고합니다.</target>
        </trans-unit>
        <trans-unit id="735a11bcb235cff53b8ba5b3f22520d05fd7bdbf" translate="yes" xml:space="preserve">
          <source>Report various information about the heap configuration. Typically produced during RTS initialization..</source>
          <target state="translated">힙 구성에 대한 다양한 정보를보고합니다. 일반적으로 RTS 초기화 중에 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="0956295ef6d976a4be613e585528efba127faa44" translate="yes" xml:space="preserve">
          <source>Report warnings when &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;deferred type errors&lt;/a&gt; are enabled. This option is enabled by default. See &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt;&lt;code&gt;-fdefer-type-errors&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;지연된 유형 오류&lt;/a&gt; 가 활성화 되면 경고를보고합니다 . 이 옵션은 기본적으로 활성화되어 있습니다. &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt; &lt;code&gt;-fdefer-type-errors&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c1b819dc66bd9a04185868bd6629101754476cb" translate="yes" xml:space="preserve">
          <source>Report warnings when &lt;a href=&quot;exts/typed_holes#typed-holes&quot;&gt;typed hole&lt;/a&gt; errors are &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;deferred until runtime&lt;/a&gt;. See &lt;a href=&quot;using-warnings#ghc-flag--fdefer-typed-holes&quot;&gt;&lt;code&gt;-fdefer-typed-holes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;exts/typed_holes#typed-holes&quot;&gt;입력 된 구멍&lt;/a&gt; 오류가 &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;런타임까지 연기&lt;/a&gt; 되면 경고를보고 합니다 . &lt;a href=&quot;using-warnings#ghc-flag--fdefer-typed-holes&quot;&gt; &lt;code&gt;-fdefer-typed-holes&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b51caa4097d27e97021974ca37a3eb172d1faa25" translate="yes" xml:space="preserve">
          <source>Report warnings when &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;deferred type errors&lt;/a&gt; are enabled. This option is enabled by default. See &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt;&lt;code&gt;-fdefer-type-errors&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;지연된 유형 오류&lt;/a&gt; 가 활성화 되면 경고를보고합니다 . 이 옵션은 기본적으로 활성화되어 있습니다. &lt;a href=&quot;using-warnings#ghc-flag--fdefer-type-errors&quot;&gt; &lt;code&gt;-fdefer-type-errors&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb8d962b7ceb76b163fd6f75585fd61427a421ba" translate="yes" xml:space="preserve">
          <source>Report warnings when &lt;a href=&quot;glasgow_exts#typed-holes&quot;&gt;typed hole&lt;/a&gt; errors are &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;deferred until runtime&lt;/a&gt;. See &lt;a href=&quot;using-warnings#ghc-flag--fdefer-typed-holes&quot;&gt;&lt;code&gt;-fdefer-typed-holes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glasgow_exts#typed-holes&quot;&gt;유형 홀&lt;/a&gt; 오류가 &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;런타임까지 지연 될 때&lt;/a&gt; 경고를보고 합니다 . &lt;a href=&quot;using-warnings#ghc-flag--fdefer-typed-holes&quot;&gt; &lt;code&gt;-fdefer-typed-holes&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f65c4728096e6f431178aff056b0068b34ac1053" translate="yes" xml:space="preserve">
          <source>Report warnings when variable out-of-scope errors are &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;deferred until runtime&lt;/a&gt;. See &lt;a href=&quot;using-warnings#ghc-flag--fdefer-out-of-scope-variables&quot;&gt;&lt;code&gt;-fdefer-out-of-scope-variables&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">변수 범위를 벗어난 오류가 &lt;a href=&quot;exts/defer_type_errors#defer-type-errors&quot;&gt;런타임까지 연기&lt;/a&gt; 되면 경고를보고 합니다 . &lt;a href=&quot;using-warnings#ghc-flag--fdefer-out-of-scope-variables&quot;&gt; &lt;code&gt;-fdefer-out-of-scope-variables&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3876a176e0cb586bc4ba95c55f3d4c1969ddb9dc" translate="yes" xml:space="preserve">
          <source>Report warnings when variable out-of-scope errors are &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;deferred until runtime&lt;/a&gt;. See &lt;a href=&quot;using-warnings#ghc-flag--fdefer-out-of-scope-variables&quot;&gt;&lt;code&gt;-fdefer-out-of-scope-variables&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">범위를 벗어난 변수 오류가 &lt;a href=&quot;glasgow_exts#defer-type-errors&quot;&gt;런타임까지 지연 될 때&lt;/a&gt; 경고를보고 합니다 . &lt;a href=&quot;using-warnings#ghc-flag--fdefer-out-of-scope-variables&quot;&gt; &lt;code&gt;-fdefer-out-of-scope-variables&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0148d6cc97deecd36edc0baa1b6a3f9dcb097f11" translate="yes" xml:space="preserve">
          <source>Reports all module-local uses of the thing at the given position in the module, e.g.:</source>
          <target state="translated">모듈의 지정된 위치에서 사물의 모든 모듈 로컬 사용을보고합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="ed90fb14d4af2cae21171d0f93343d8c595bf3d1" translate="yes" xml:space="preserve">
          <source>Reports the inferred type at the given span/position in the module, e.g.:</source>
          <target state="translated">모듈에서 주어진 범위 / 위치에서 유추 된 유형을보고합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="cb4f47e477ef256ba7b45b511bda017048a23708" translate="yes" xml:space="preserve">
          <source>Repositioning handles</source>
          <target state="translated">재배치 핸들</target>
        </trans-unit>
        <trans-unit id="cfd421be6e964f2d973beeab3a903b4b8dbca988" translate="yes" xml:space="preserve">
          <source>Representable types are collected in the &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; class, which defines the associated type &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep&quot;&gt;Rep&lt;/a&gt;&lt;/code&gt; as well as conversion functions &lt;code&gt;&lt;a href=&quot;ghc-generics#v:from&quot;&gt;from&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-generics#v:to&quot;&gt;to&lt;/a&gt;&lt;/code&gt;. Typically, you will not define &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; instances by hand, but have the compiler derive them for you.</source>
          <target state="translated">표현 가능한 형식은 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; 클래스 에서 수집되며,이 형식은 연결된 형식 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Rep&quot;&gt;Rep&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;ghc-generics#v:from&quot;&gt;from&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ghc-generics#v:to&quot;&gt;to&lt;/a&gt;&lt;/code&gt; 로의 변환 함수 를 정의합니다 . 일반적으로 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:Generic&quot;&gt;Generic&lt;/a&gt;&lt;/code&gt; 인스턴스를 직접 정의 하지는 않지만 컴파일러가이를 생성하도록합니다.</target>
        </trans-unit>
        <trans-unit id="19682e38b0c71dbda763927c57f8b65c290b0f2f" translate="yes" xml:space="preserve">
          <source>Representable types of kind &lt;code&gt;* -&amp;gt; *&lt;/code&gt; (or kind &lt;code&gt;k -&amp;gt; *&lt;/code&gt;, when &lt;code&gt;PolyKinds&lt;/code&gt; is enabled). This class is derivable in GHC with the &lt;code&gt;DeriveGeneric&lt;/code&gt; flag on.</source>
          <target state="translated">종류 &lt;code&gt;* -&amp;gt; *&lt;/code&gt; 의 대표 가능한 유형 (또는 &lt;code&gt;PolyKinds&lt;/code&gt; 가 활성화 된 경우 종류 &lt;code&gt;k -&amp;gt; *&lt;/code&gt; ). 이 클래스는 &lt;code&gt;DeriveGeneric&lt;/code&gt; 플래그 가 설정된 GHC에서 파생 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ee2698bb964d52fc57600dbd9abaf6d51a0a4e0" translate="yes" xml:space="preserve">
          <source>Representable types of kind &lt;code&gt;*&lt;/code&gt;. This class is derivable in GHC with the &lt;code&gt;DeriveGeneric&lt;/code&gt; flag on.</source>
          <target state="translated">대표 가능한 종류 &lt;code&gt;*&lt;/code&gt; . 이 클래스는 &lt;code&gt;DeriveGeneric&lt;/code&gt; 플래그 가 설정된 GHC에서 파생 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3046120cbf4b7cd62bc24b957ce87fe60e8d7792" translate="yes" xml:space="preserve">
          <source>Representation of &lt;code&gt;* -&amp;gt; *&lt;/code&gt; types</source>
          <target state="translated">의 표현 &lt;code&gt;* -&amp;gt; *&lt;/code&gt; 종류</target>
        </trans-unit>
        <trans-unit id="c04043fc4434d1f9286ef0d8dcc9a50d45126bbe" translate="yes" xml:space="preserve">
          <source>Representation of &lt;code&gt;k -&amp;gt; *&lt;/code&gt; types</source>
          <target state="translated">표현 &lt;code&gt;k -&amp;gt; *&lt;/code&gt; 유형</target>
        </trans-unit>
        <trans-unit id="3344925672ee12b2453942aee5ea1db1e2ff176d" translate="yes" xml:space="preserve">
          <source>Representation of constructors. Note that equality on constructors with different types may not work -- i.e. the constructors for &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; may compare equal.</source>
          <target state="translated">생성자 표현. 다른 유형의 생성자에서 동등성이 작동하지 않을 수 있습니다. 즉 &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 의 생성자가 동일하게 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a47a0325484885141fbc604287a2df8331178b15" translate="yes" xml:space="preserve">
          <source>Representation of datatypes. A package of constructor representations with names of type and module.</source>
          <target state="translated">데이터 유형 표현. 타입과 모듈의 이름을 가진 생성자 표현 패키지.</target>
        </trans-unit>
        <trans-unit id="6a8a2b8cb82090e3d77dce2dbb2bfcf782570834" translate="yes" xml:space="preserve">
          <source>Representation of types with many constructors or many fields</source>
          <target state="translated">많은 생성자 또는 많은 필드가있는 유형 표현</target>
        </trans-unit>
        <trans-unit id="35397673d9b11600f8956f67c44793a1eedc1924" translate="yes" xml:space="preserve">
          <source>Representation of unlifted types</source>
          <target state="translated">리프팅되지 않은 유형의 표현</target>
        </trans-unit>
        <trans-unit id="264ee02a2c969393a215ad8bfc32e8b2b845f204" translate="yes" xml:space="preserve">
          <source>Representation polymorphism</source>
          <target state="translated">표현 다형성</target>
        </trans-unit>
        <trans-unit id="879c48418a21002d9297fbd9e3ffac9d2017770f" translate="yes" xml:space="preserve">
          <source>Representational equality. If &lt;code&gt;Coercion a b&lt;/code&gt; is inhabited by some terminating value, then the type &lt;code&gt;a&lt;/code&gt; has the same underlying representation as the type &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">대표 평등. 경우 &lt;code&gt;Coercion a b&lt;/code&gt; 일부 종단 값 살고 다음은 입력 &lt;code&gt;a&lt;/code&gt; 유형과 같은 기본 표현을 갖는 &lt;code&gt;b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c720f46bcd60ae9520c3086c1ecf644ef6144adc" translate="yes" xml:space="preserve">
          <source>RepresentationalR</source>
          <target state="translated">RepresentationalR</target>
        </trans-unit>
        <trans-unit id="f097ee1b17998d299a2f160cedc967fc9f78cbf6" translate="yes" xml:space="preserve">
          <source>Representations of C types</source>
          <target state="translated">C 유형의 표현</target>
        </trans-unit>
        <trans-unit id="a79298e81ca3b532230a8583d8f8409c75a6d705" translate="yes" xml:space="preserve">
          <source>Representations of some basic types</source>
          <target state="translated">일부 기본 유형의 표현</target>
        </trans-unit>
        <trans-unit id="c5f36ecbc1823bac6b0b60140b82b2aed0c5b3dc" translate="yes" xml:space="preserve">
          <source>Represented as an array of limbs (Word#) stored in little-endian order (Word# themselves use machine order).</source>
          <target state="translated">little-endian 순서로 저장된 팔다리 (Word #)의 배열로 표시됩니다 (Word # 자체는 기계 순서를 사용함).</target>
        </trans-unit>
        <trans-unit id="67da1ed51acd40fcb2fcb744269f2c5d7d3d0098" translate="yes" xml:space="preserve">
          <source>Representing datatypes</source>
          <target state="translated">데이터 타입 표현</target>
        </trans-unit>
        <trans-unit id="34758cefddc40aa1470cfbff99ae668d79c9b020" translate="yes" xml:space="preserve">
          <source>Represents a C-- basic block. Note that this is a slight departure from the intended meaning of this DIE type as it does not necessarily reflect lexical scope in the source program.</source>
          <target state="translated">C-- 기본 블록을 나타냅니다. 이것은 소스 프로그램의 어휘 범위를 반드시 반영하지 않기 때문에이 DIE 유형의 의도 된 의미에서 약간 벗어납니다.</target>
        </trans-unit>
        <trans-unit id="1fa24476be6c73885eb7fbb4bf8517339a1cd7ef" translate="yes" xml:space="preserve">
          <source>Represents a C-- top-level basic block.</source>
          <target state="translated">C-- 최상위 기본 블록을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0cf15330bda4d0352a73b8fedf9c47f7a854fb5e" translate="yes" xml:space="preserve">
          <source>Represents a C-\- basic block. Note that this is a slight departure from the intended meaning of this DIE type as it does not necessarily reflect lexical scope in the source program.</source>
          <target state="translated">C-\-기본 블록을 나타냅니다. 소스 프로그램의 어휘 범위를 반드시 반영 할 필요는 없으므로이 DIE 유형의 의도 된 의미에서 약간 벗어난 것입니다.</target>
        </trans-unit>
        <trans-unit id="67e5c7afc820ce932f90778d78e604b5c2630d35" translate="yes" xml:space="preserve">
          <source>Represents a C-\- top-level basic block.</source>
          <target state="translated">C-\-최상위 레벨 기본 블록을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6dd9a4bf554abf7b310b93fad15543594f89afcc" translate="yes" xml:space="preserve">
          <source>Represents a compilation unit (e.g. a Haskell module).</source>
          <target state="translated">컴파일 단위 (예 : Haskell 모듈)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="fcb730488b84e7f5ed63ca89008924d5058dd35c" translate="yes" xml:space="preserve">
          <source>Represents an expression which has type &lt;code&gt;a&lt;/code&gt;. Built on top of &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt;, typed expressions allow for type-safe splicing via:</source>
          <target state="translated">유형이있는 표현식을 나타 &lt;code&gt;a&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt; 위에 빌드 된 형식화 된 표현식은 다음을 통해 형식이 안전한 스 플라이 싱을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="ae0ee5dc9568cf4ffac532349f638326663b8ea1" translate="yes" xml:space="preserve">
          <source>Represents an expression which has type &lt;code&gt;a&lt;/code&gt;. Built on top of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt;, typed expressions allow for type-safe splicing via:</source>
          <target state="translated">유형이있는 표현식을 나타 &lt;code&gt;a&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Exp&quot;&gt;Exp&lt;/a&gt;&lt;/code&gt; 위에 빌드 된 형식화 된 표현식은 다음을 통해 형식이 안전한 스 플라이 싱을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="71b0bcf91aa6fb4f634cf7991b4493fb262523a4" translate="yes" xml:space="preserve">
          <source>Request a CallStack.</source>
          <target state="translated">CallStack을 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="1a86db96bf5edca3b30436e4953013bfeb293ef4" translate="yes" xml:space="preserve">
          <source>RequireOrder</source>
          <target state="translated">RequireOrder</target>
        </trans-unit>
        <trans-unit id="5e3a8a744e7e46ab41222ebbc049e8887d9bf220" translate="yes" xml:space="preserve">
          <source>Reset the current package database stack. This option removes every previously specified package database (including those read from the &lt;a href=&quot;#envvar-GHC_PACKAGE_PATH&quot; id=&quot;index-4&quot;&gt;&lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt;&lt;/a&gt; environment variable) from the package database stack.</source>
          <target state="translated">현재 패키지 데이터베이스 스택을 재설정하십시오. 이 옵션은 패키지 데이터베이스 스택에서 이전에 지정된 모든 패키지 데이터베이스 ( &lt;a href=&quot;#envvar-GHC_PACKAGE_PATH&quot; id=&quot;index-4&quot;&gt; &lt;code&gt;GHC_PACKAGE_PATH&lt;/code&gt; &lt;/a&gt; 환경 변수 에서 읽은 데이터베이스 포함 )를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9d9437ce1c149db92a35f069931633d0e7667617" translate="yes" xml:space="preserve">
          <source>Reset the current thread's &lt;code&gt;errno&lt;/code&gt; value to &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eOK&quot;&gt;eOK&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">현재 스레드의 &lt;code&gt;errno&lt;/code&gt; 값을 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eOK&quot;&gt;eOK&lt;/a&gt;&lt;/code&gt; 로 재설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cf5aab60ea4b429ce0f728614ce1a39b30514f8" translate="yes" xml:space="preserve">
          <source>Resets the precedence context to zero.</source>
          <target state="translated">우선 순위 컨텍스트를 0으로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="3d530ddb394e59a93f8fd08475db15473c9be43e" translate="yes" xml:space="preserve">
          <source>Resize (unpinned) mutable byte array to new specified size (in bytes). The returned &lt;code&gt;MutableByteArray#&lt;/code&gt; is either the original &lt;code&gt;MutableByteArray#&lt;/code&gt; resized in-place or, if not possible, a newly allocated (unpinned) &lt;code&gt;MutableByteArray#&lt;/code&gt; (with the original content copied over).</source>
          <target state="translated">변경 가능한 고정되지 않은 바이트 배열의 크기를 새로운 지정된 크기 (바이트)로 조정합니다. 반환 된 &lt;code&gt;MutableByteArray#&lt;/code&gt; 는 원래 크기가 조정 된 원래 &lt;code&gt;MutableByteArray#&lt;/code&gt; 이거나 가능하지 않은 경우 새로 할당 된 (고정되지 않은) &lt;code&gt;MutableByteArray#&lt;/code&gt; (원본 내용이 복사 된 상태)입니다.</target>
        </trans-unit>
        <trans-unit id="af23022ae2fbc703adfc587f443d4886c8b9c829" translate="yes" xml:space="preserve">
          <source>Resize a memory area that was allocated with &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; to the given size. The returned pointer may refer to an entirely different memory area, but will be sufficiently aligned for any of the basic foreign types that fits into a memory block of the given size. The contents of the referenced memory area will be the same as of the original pointer up to the minimum of the original size and the given size.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; 로 할당 된 메모리 영역의 크기를 주어진 크기로 조정하십시오. 리턴 된 포인터는 완전히 다른 메모리 영역을 참조 할 수 있지만 주어진 크기의 메모리 블록에 맞는 기본 외부 유형에 대해 충분히 정렬됩니다. 참조 된 메모리 영역의 내용은 원래 크기와 지정된 크기의 최소값까지 원래 포인터와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0b2bb3f258d16c01bdf266d3f03d994c61e11ff5" translate="yes" xml:space="preserve">
          <source>Resize a memory area that was allocated with &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; to the size needed to store values of type &lt;code&gt;b&lt;/code&gt;. The returned pointer may refer to an entirely different memory area, but will be suitably aligned to hold values of type &lt;code&gt;b&lt;/code&gt;. The contents of the referenced memory area will be the same as of the original pointer up to the minimum of the original size and the size of values of type &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:mallocBytes&quot;&gt;mallocBytes&lt;/a&gt;&lt;/code&gt; 로 할당 된 메모리 영역 의 크기를 &lt;code&gt;b&lt;/code&gt; 유형의 값을 저장하는 데 필요한 크기로 조정하십시오 . 리턴 된 포인터는 완전히 다른 메모리 영역을 참조 할 수 있지만 &lt;code&gt;b&lt;/code&gt; 유형의 값을 보유하도록 적절하게 정렬됩니다 . 참조 된 메모리 영역의 내용은 원래 크기의 최소 크기와 &lt;code&gt;b&lt;/code&gt; 유형의 값 크기까지 원래 포인터와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="3570c5c7eea20213a2a8c3cbdd049e2af10c39ac" translate="yes" xml:space="preserve">
          <source>Resize a mutable array to new specified size. The returned &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SmallMutableArray-35-&quot;&gt;SmallMutableArray#&lt;/a&gt;&lt;/code&gt; is either the original &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SmallMutableArray-35-&quot;&gt;SmallMutableArray#&lt;/a&gt;&lt;/code&gt; resized in-place or, if not possible, a newly allocated &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SmallMutableArray-35-&quot;&gt;SmallMutableArray#&lt;/a&gt;&lt;/code&gt; with the original content copied over.</source>
          <target state="translated">변경 가능한 배열의 크기를 새로 지정된 크기로 조정합니다. 반환 된 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SmallMutableArray-35-&quot;&gt;SmallMutableArray#&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SmallMutableArray-35-&quot;&gt;SmallMutableArray#&lt;/a&gt;&lt;/code&gt; 크기가 조정 된 원본 SmallMutableArray # 이거나 가능하지 않은 경우 원본 콘텐츠가 복사 된 새로 할당 된 &lt;code&gt;&lt;a href=&quot;ghc-exts#t:SmallMutableArray-35-&quot;&gt;SmallMutableArray#&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ae93894b8f7d37188e0c60b68adb836aadfde7fe" translate="yes" xml:space="preserve">
          <source>Resize functions</source>
          <target state="translated">기능 크기 조정</target>
        </trans-unit>
        <trans-unit id="abb3f650c638a188171f11f7e236b22f5968cb9a" translate="yes" xml:space="preserve">
          <source>Resizing arrays of boxed elements is currently handled in library space (rather than being a primop) since there is not an efficient way to grow arrays. However, resize operations may become primops in a future release of GHC.</source>
          <target state="translated">박스형 요소의 배열 크기 조정은 배열을 늘리는 효율적인 방법이 없기 때문에 현재 라이브러리 공간에서 처리됩니다 (primop이 아닌). 그러나 크기 조정 작업은 향후 GHC 릴리스에서 주요 기능이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a005485cd10cadec5528720089b01d7c3f83bf1d" translate="yes" xml:space="preserve">
          <source>ResolvedBCO</source>
          <target state="translated">ResolvedBCO</target>
        </trans-unit>
        <trans-unit id="6e1de862f17f2c0d61dcfa8869842063045a9469" translate="yes" xml:space="preserve">
          <source>ResolvedBCOPtr</source>
          <target state="translated">ResolvedBCOPtr</target>
        </trans-unit>
        <trans-unit id="481ed4541019846722b9befe3b9bb925ee185d7b" translate="yes" xml:space="preserve">
          <source>Resolves to the MutableArray# inside the BreakArray</source>
          <target state="translated">BreakArray 내부의 MutableArray #로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="021493f340d35ce0d744f7a3a9e53445394e86a6" translate="yes" xml:space="preserve">
          <source>Resource</source>
          <target state="translated">Resource</target>
        </trans-unit>
        <trans-unit id="ad94287ab4f543bf10c68378e7ba19242a3df67f" translate="yes" xml:space="preserve">
          <source>Resource Limits</source>
          <target state="translated">자원 제한</target>
        </trans-unit>
        <trans-unit id="f26c6059d9651d00e556526c3868d40e27ae8a46" translate="yes" xml:space="preserve">
          <source>ResourceBusy</source>
          <target state="translated">ResourceBusy</target>
        </trans-unit>
        <trans-unit id="b020bc6431b3b7023d76f2e64d60f17277ec97b4" translate="yes" xml:space="preserve">
          <source>ResourceCPUTime</source>
          <target state="translated">ResourceCPUTime</target>
        </trans-unit>
        <trans-unit id="2dc3de2b05e8f70724173719ff240dda68f8caab" translate="yes" xml:space="preserve">
          <source>ResourceCoreFileSize</source>
          <target state="translated">ResourceCoreFileSize</target>
        </trans-unit>
        <trans-unit id="bcf85ca1883d8d70b35323b8ac1608d3228793f6" translate="yes" xml:space="preserve">
          <source>ResourceDataSize</source>
          <target state="translated">ResourceDataSize</target>
        </trans-unit>
        <trans-unit id="ba115e3b77b67bdb8168bff8f2572fe7a2e3bd8d" translate="yes" xml:space="preserve">
          <source>ResourceExhausted</source>
          <target state="translated">ResourceExhausted</target>
        </trans-unit>
        <trans-unit id="35fc7cdea7e77fa9f20ff9cf8167182034131cd7" translate="yes" xml:space="preserve">
          <source>ResourceFileSize</source>
          <target state="translated">ResourceFileSize</target>
        </trans-unit>
        <trans-unit id="d61e08164f1a81223237b903b736ba4407436943" translate="yes" xml:space="preserve">
          <source>ResourceLimit</source>
          <target state="translated">ResourceLimit</target>
        </trans-unit>
        <trans-unit id="32a2741a75201adad483efb7ecfc4c10371a9b6d" translate="yes" xml:space="preserve">
          <source>ResourceLimitInfinity</source>
          <target state="translated">ResourceLimitInfinity</target>
        </trans-unit>
        <trans-unit id="0d6dc59579d48df2cd89dd60631ce90b42cf2846" translate="yes" xml:space="preserve">
          <source>ResourceLimitUnknown</source>
          <target state="translated">ResourceLimitUnknown</target>
        </trans-unit>
        <trans-unit id="f11112cf2840ff9c720b327aaefa09f02d694542" translate="yes" xml:space="preserve">
          <source>ResourceLimits</source>
          <target state="translated">ResourceLimits</target>
        </trans-unit>
        <trans-unit id="d2af36c4a7640045e8251579752c2f729046eb04" translate="yes" xml:space="preserve">
          <source>ResourceOpenFiles</source>
          <target state="translated">ResourceOpenFiles</target>
        </trans-unit>
        <trans-unit id="147a596e2a9d58f70e713e6b3139672c9d488b7c" translate="yes" xml:space="preserve">
          <source>ResourceStackSize</source>
          <target state="translated">ResourceStackSize</target>
        </trans-unit>
        <trans-unit id="aa19422c07be3f3671269e1768d4706d3a3e2b2c" translate="yes" xml:space="preserve">
          <source>ResourceTotalMemory</source>
          <target state="translated">ResourceTotalMemory</target>
        </trans-unit>
        <trans-unit id="9c4dbd9b8ca47dc047650c64ccd632f15455d5c0" translate="yes" xml:space="preserve">
          <source>ResourceVanished</source>
          <target state="translated">ResourceVanished</target>
        </trans-unit>
        <trans-unit id="24f8e3947f79a1fb2d83a89f0b6ab726732d6422" translate="yes" xml:space="preserve">
          <source>Resources associated with the encoding may now be released. The &lt;code&gt;encode&lt;/code&gt; function may not be called again after calling &lt;code&gt;close&lt;/code&gt;.</source>
          <target state="translated">인코딩과 관련된 리소스가 이제 해제 될 수 있습니다. &lt;code&gt;encode&lt;/code&gt; 기능을 호출 한 후 다시 호출 할 수 없습니다 &lt;code&gt;close&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7eb20dcf60dd0da5f37b1239d272f3287ea9bcc3" translate="yes" xml:space="preserve">
          <source>Rest of the format string.</source>
          <target state="translated">나머지 형식 문자열</target>
        </trans-unit>
        <trans-unit id="879a3471887029471d2168fa737f849188fe74c6" translate="yes" xml:space="preserve">
          <source>RestartOutput</source>
          <target state="translated">RestartOutput</target>
        </trans-unit>
        <trans-unit id="94e38d2852d0374138e6492fc960350b1f4d7792" translate="yes" xml:space="preserve">
          <source>Restores foreground/background colors to their original settings.</source>
          <target state="translated">전경색 / 배경색을 원래 설정으로 복원합니다.</target>
        </trans-unit>
        <trans-unit id="38213008afe420fee37f728dc46cf0e5fd546894" translate="yes" xml:space="preserve">
          <source>Restreaming</source>
          <target state="translated">Restreaming</target>
        </trans-unit>
        <trans-unit id="3638fae628fb0f507ffb4a26800173a2467b3120" translate="yes" xml:space="preserve">
          <source>Restreaming state.</source>
          <target state="translated">리 스트리밍 상태.</target>
        </trans-unit>
        <trans-unit id="e2fc156aca734a5b9c9b389bcb970f6b6e0ce3b1" translate="yes" xml:space="preserve">
          <source>Restrict the .hsc directives to those supported by the &lt;code&gt;--cross-compile&lt;/code&gt; mode (see &lt;a href=&quot;#hsc2hs-cross&quot;&gt;Cross-compilation&lt;/a&gt;). This should be useful if your &lt;code&gt;.hsc&lt;/code&gt; files must be safely cross-compiled and you wish to keep non-cross-compilable constructs from creeping into them.</source>
          <target state="translated">.hsc 지시문을 &lt;code&gt;--cross-compile&lt;/code&gt; 모드 에서 지원하는 지시문으로 제한 하십시오 ( &lt;a href=&quot;#hsc2hs-cross&quot;&gt;교차 컴파일&lt;/a&gt; 참조 ). 이것은 &lt;code&gt;.hsc&lt;/code&gt; 파일을 안전하게 크로스 컴파일해야하고 크로스 컴파일 할 수없는 구문이 들어오지 않도록하려는 경우에 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="aedd633c093fe43362bae96de582861ec838410a" translate="yes" xml:space="preserve">
          <source>Restrict the number of elements in a retainer set to ⟨size⟩ (default 8).</source>
          <target state="translated">리테이너의 요소 수를 ⟨size⟩ (기본값 8)로 제한하십시오.</target>
        </trans-unit>
        <trans-unit id="7ba09a9a0fa12c5c7ed15a9028a5668c2066777d" translate="yes" xml:space="preserve">
          <source>Restrict the profile to closures produced by cost-centre stacks with one of the specified cost centres anywhere in the stack.</source>
          <target state="translated">지정된 코스트 센터 중 하나가 스택의 어느 위치에 있든 코스트 센터 스택에서 생성 된 마감으로 프로파일을 제한합니다.</target>
        </trans-unit>
        <trans-unit id="988f43d05062af42f11912707b2255cf7e924c8d" translate="yes" xml:space="preserve">
          <source>Restrict the profile to closures produced by cost-centre stacks with one of the specified cost centres at the top.</source>
          <target state="translated">지정된 코스트 센터 중 하나가 맨 위에있는 코스트 센터 스택에서 생성 된 마감으로 프로파일을 제한합니다.</target>
        </trans-unit>
        <trans-unit id="8cc2a3cc5491baa09dd9e6d7305aa27e9729ee67" translate="yes" xml:space="preserve">
          <source>Restrict the profile to closures produced by the specified modules.</source>
          <target state="translated">지정된 모듈에서 생성 한 클로저로 프로파일을 제한하십시오.</target>
        </trans-unit>
        <trans-unit id="8e5eb29c710134325c75e103e6c39e0d8cf4113d" translate="yes" xml:space="preserve">
          <source>Restrict the profile to closures with one of the specified biographies, where ⟨bio⟩ is one of &lt;code&gt;lag&lt;/code&gt;, &lt;code&gt;drag&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;, or &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="translated">지정된 약력 중 하나를 사용하여 프로파일을 클로저로 제한합니다. 여기서 ⟨bio⟩는 &lt;code&gt;lag&lt;/code&gt; , &lt;code&gt;drag&lt;/code&gt; , &lt;code&gt;void&lt;/code&gt; 또는 &lt;code&gt;use&lt;/code&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="77aa2da641bd4074fc631140f99b3429af2e4c61" translate="yes" xml:space="preserve">
          <source>Restrict the profile to closures with retainer sets containing cost-centre stacks with one of the specified cost centres at the top.</source>
          <target state="translated">지정된 코스트 센터 중 하나가 맨 위에있는 코스트 센터 스택이 포함 된 리테이너 세트를 사용하여 프로파일을 클로저로 제한합니다.</target>
        </trans-unit>
        <trans-unit id="8a4cf9779af43faa60dea8a6b135485084595f2c" translate="yes" xml:space="preserve">
          <source>Restrict the profile to closures with the specified description strings.</source>
          <target state="translated">지정된 설명 문자열을 사용하여 프로파일을 클로저로 제한하십시오.</target>
        </trans-unit>
        <trans-unit id="f8ec1f3f879de514bd809577ca2942e389746a15" translate="yes" xml:space="preserve">
          <source>Restrict the profile to closures with the specified types.</source>
          <target state="translated">지정된 유형의 클로저로 프로파일을 제한하십시오.</target>
        </trans-unit>
        <trans-unit id="91d9d512b80f1af15f20e59d89aecd2b45b56287" translate="yes" xml:space="preserve">
          <source>Restrictions on unlifted boxed arguments passed to foreign C calls. Cells marked as &amp;ldquo;Unsound&amp;rdquo; represent combinations that lead to undefined runtime behavior. GHC does not reject such unsound programs at compile time.</source>
          <target state="translated">외부 C 호출에 전달되는 해제되지 않은 boxed 인수에 대한 제한. &quot;Unsound&quot;로 표시된 셀은 정의되지 않은 런타임 동작을 유발하는 조합을 나타냅니다. GHC는 컴파일 타임에 이러한 불건전 한 프로그램을 거부하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="26d2b2f2e73d96c76f8c4e16a012c52b69296a83" translate="yes" xml:space="preserve">
          <source>Restricts the module to the safe language. All of the module&amp;rsquo;s direct imports must be trusted, but the module itself need not reside in a trusted package, because the compiler vouches for its trustworthiness. The &amp;ldquo;safe&amp;rdquo; keyword is allowed but meaningless in import statements, as regardless, every import is required to be safe.</source>
          <target state="translated">모듈을 안전한 언어로 제한합니다. 모든 모듈의 직접 가져 오기는 신뢰할 수 있어야하지만 컴파일러는 신뢰성을 보증하기 때문에 모듈 자체는 신뢰할 수있는 패키지에 상주 할 필요가 없습니다. &quot;safe&quot;키워드는 import 문에서 허용되지만 모든 가져 오기가 안전해야하므로 import 문에서는 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c7f93cb4cbd018198d45aad9dd5a95fdaa60b376" translate="yes" xml:space="preserve">
          <source>Result and lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; written as its side-effect</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 작성된 결과 및 게으른 ByteString</target>
        </trans-unit>
        <trans-unit id="f126664f4124c32cc770797ecc3b6cb80fef630c" translate="yes" xml:space="preserve">
          <source>Result is meaningless if two &lt;code&gt;Addr#&lt;/code&gt;s are so far apart that their difference doesn't fit in an &lt;code&gt;Int#&lt;/code&gt;.</source>
          <target state="translated">두 개의 &lt;code&gt;Addr#&lt;/code&gt; 이 너무 멀어 차이가 &lt;code&gt;Int#&lt;/code&gt; 맞지 않으면 결과는 의미 가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4e33029c02405231480642f8c9bc28cfb0dc6afd" translate="yes" xml:space="preserve">
          <source>Result.</source>
          <target state="translated">Result.</target>
        </trans-unit>
        <trans-unit id="1ea7765ea17f75b1dace09820437939bcd61f222" translate="yes" xml:space="preserve">
          <source>Resulting lazy &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">결과 게으른 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09514b660f7685e5cf80db6e1ba61aa96e531258" translate="yes" xml:space="preserve">
          <source>Resume evaluation of a statement after a breakpoint</source>
          <target state="translated">중단 점 이후 명령문의 평가 재개</target>
        </trans-unit>
        <trans-unit id="189b143e6db1cdbc059600f661781a293d9ff007" translate="yes" xml:space="preserve">
          <source>Resume forcing a free variable in a breakpoint (#2950)</source>
          <target state="translated">중단 점에서 자유 변수 강제 재개 (# 2950)</target>
        </trans-unit>
        <trans-unit id="99cd022cdbb965b966c78945de76be3957290c13" translate="yes" xml:space="preserve">
          <source>ResumeContext</source>
          <target state="translated">ResumeContext</target>
        </trans-unit>
        <trans-unit id="d5901174d9264b57ddae050fb20336e360ef9545" translate="yes" xml:space="preserve">
          <source>Retain CAFs unconditionally in linked Haskell code. Note that this prevents any code from being unloaded. It should not be necessary unless you are GHCi or hs-plugins, which needs to be able call any function in the compiled code.</source>
          <target state="translated">연결된 Haskell 코드에서 CAF를 무조건 유지합니다. 이렇게하면 코드가 언로드되지 않습니다. 컴파일 된 코드에서 함수를 호출 할 수 있어야하는 GHCi 또는 hs 플러그인이 아닌 경우 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c22154d58d981f7367609ab1e57cfd763b0192df" translate="yes" xml:space="preserve">
          <source>Retain all intermediate temporary files.</source>
          <target state="translated">모든 중간 임시 파일을 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="27d1adc7706f62a9f9a5cda60fb9e7578096f7d7" translate="yes" xml:space="preserve">
          <source>Retain intermediate &lt;code&gt;.hc&lt;/code&gt; files.</source>
          <target state="translated">중간 &lt;code&gt;.hc&lt;/code&gt; 파일을 보관 하십시오.</target>
        </trans-unit>
        <trans-unit id="1c913a795a1f09102a325857b15b734b517d6fd9" translate="yes" xml:space="preserve">
          <source>Retain intermediate &lt;code&gt;.hi&lt;/code&gt; files (the default).</source>
          <target state="translated">중간 &lt;code&gt;.hi&lt;/code&gt; 파일을 유지 합니다 (기본값).</target>
        </trans-unit>
        <trans-unit id="94f8149a3370382a007aedc88c60d2a9c3a7ac93" translate="yes" xml:space="preserve">
          <source>Retain intermediate &lt;code&gt;.hscpp&lt;/code&gt; files.</source>
          <target state="translated">중간 &lt;code&gt;.hscpp&lt;/code&gt; 파일을 보관 하십시오.</target>
        </trans-unit>
        <trans-unit id="a97f4a882fdd81370c7271183798db3e068d96e5" translate="yes" xml:space="preserve">
          <source>Retain intermediate &lt;code&gt;.o&lt;/code&gt; files (the default).</source>
          <target state="translated">중간 &lt;code&gt;.o&lt;/code&gt; 파일을 유지 합니다 (기본값).</target>
        </trans-unit>
        <trans-unit id="7677f34472654a783e346ec0365bf5cde487e01d" translate="yes" xml:space="preserve">
          <source>Retain intermediate &lt;code&gt;.s&lt;/code&gt; files.</source>
          <target state="translated">중간 &lt;code&gt;.s&lt;/code&gt; 파일을 유지 하십시오.</target>
        </trans-unit>
        <trans-unit id="6abfcf523bf9d66cec96d1a7ee8f7a4938402d9b" translate="yes" xml:space="preserve">
          <source>Retain intermediate LLVM &lt;code&gt;.ll&lt;/code&gt; files. Implies &lt;a href=&quot;phases#ghc-flag--fllvm&quot;&gt;&lt;code&gt;-fllvm&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">중간 LLVM &lt;code&gt;.ll&lt;/code&gt; 파일을 유지 하십시오. &lt;a href=&quot;phases#ghc-flag--fllvm&quot;&gt; &lt;code&gt;-fllvm&lt;/code&gt; 을&lt;/a&gt; 의미 합니다 .</target>
        </trans-unit>
        <trans-unit id="8bf8f391a4a50c2f5f64ab4e79fd10a787a92b03" translate="yes" xml:space="preserve">
          <source>RetainCAFs</source>
          <target state="translated">RetainCAFs</target>
        </trans-unit>
        <trans-unit id="8c7019f656594681f2d84dd41a1127bda39fb82f" translate="yes" xml:space="preserve">
          <source>Retainer profiling is designed to help answer questions like &amp;ldquo;why is this data being retained?&amp;rdquo;. We start by defining what we mean by a retainer:</source>
          <target state="translated">리테이너 프로파일 링은 &quot;이 데이터가 왜 유지됩니까?&quot;와 같은 질문에 대답 할 수 있도록 설계되었습니다. 리테이너가 의미하는 바를 정의하여 시작합니다.</target>
        </trans-unit>
        <trans-unit id="33953edf5744f519b329e5f8500334513029c025" translate="yes" xml:space="preserve">
          <source>Retainer profiling requires multiple passes over the live heap in order to discover the full retainer set for each object, which can be quite slow. So we set a limit on the maximum size of a retainer set, where all retainer sets larger than the maximum retainer set size are replaced by the special set &lt;code&gt;MANY&lt;/code&gt;. The maximum set size defaults to 8 and can be altered with the &lt;a href=&quot;#rts-flag--R%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-R ⟨size⟩&lt;/code&gt;&lt;/a&gt; RTS option:</source>
          <target state="translated">리테이너 프로파일 링은 각 오브젝트에 대해 전체 리테이너 세트를 발견하기 위해 라이브 힙을 여러 번 통과해야하므로 상당히 느릴 수 있습니다. 따라서 리테이너 세트의 최대 크기에 제한을 설정했습니다. 여기서 최대 리테이너 세트 크기보다 큰 모든 리테이너 세트는 특수 세트 &lt;code&gt;MANY&lt;/code&gt; 로 대체됩니다 . 최대 설정 크기는 기본적으로 8로 설정되며 &lt;a href=&quot;#rts-flag--R%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-R ⟨size⟩&lt;/code&gt; &lt;/a&gt; RTS 옵션을 사용하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="67be3168cf0629e4eae05d5b7b9dbd03b3c41ac3" translate="yes" xml:space="preserve">
          <source>Retrieve a function of the current environment.</source>
          <target state="translated">현재 환경의 기능을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="6d9571fc9ee3f5278e0c11ef645e5f7b3e1788c9" translate="yes" xml:space="preserve">
          <source>Retrieve the address of any Haskell value. This is essentially an &lt;code&gt;unsafeCoerce#&lt;/code&gt;, but if implemented as such the core lint pass complains and fails to compile. As a primop, it is opaque to core/stg, and only appears in cmm (where the copy propagation pass will get rid of it). Note that &quot;a&quot; must be a value, not a thunk! It's too late for strictness analysis to enforce this, so you're on your own to guarantee this. Also note that &lt;code&gt;Addr#&lt;/code&gt; is not a GC pointer - up to you to guarantee that it does not become a dangling pointer immediately after you get it.</source>
          <target state="translated">하스켈 값의 주소를 검색하십시오. 이것은 본질적으로 &lt;code&gt;unsafeCoerce#&lt;/code&gt; 이지만, 그렇게 구현 된 경우 코어 보풀 패스가 불평하고 컴파일에 실패합니다. Primop은 core / stg에 대해 불투명하며 cmm으로 만 나타납니다 (복사 전파 패스에서 제거). &quot;a&quot;는 썽크가 아닌 값이어야합니다! 엄격 성 분석이이를 시행하기에는 너무 늦었으므로이를 보장하기 위해 스스로해야합니다. 또한 &lt;code&gt;Addr#&lt;/code&gt; 은 GC 포인터가 아니라는 것을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d67c922a88a65693be2b1528f839dbe2af671ef5" translate="yes" xml:space="preserve">
          <source>Retrieve the system event manager for the capability on which the calling thread is running.</source>
          <target state="translated">호출 스레드가 실행중인 기능에 대한 시스템 이벤트 관리자를 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="235badb39d6373c1cb58e6c1848af90cf3bee578" translate="yes" xml:space="preserve">
          <source>Retrieve the target path of either a file or directory symbolic link. The returned path may not be absolute, may not exist, and may not even be a valid path.</source>
          <target state="translated">파일 또는 디렉토리 기호 링크의 대상 경로를 검색하십시오. 반환 된 경로는 절대적이지 않을 수도 있고 존재하지 않을 수도 있으며 유효한 경로가 아닐 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5b054dbd8a0e74b67f6dbc9d2335a04d6537353" translate="yes" xml:space="preserve">
          <source>Retrieves a function of the current environment.</source>
          <target state="translated">현재 환경의 기능을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="d17266b1630a9adf39cc3d99f791ee0584d71942" translate="yes" xml:space="preserve">
          <source>Retrieves the allocation counter for the current thread.</source>
          <target state="translated">현재 스레드의 할당 카운터를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="6e91946c8c050e29662b02a9062f6c9667679dfd" translate="yes" xml:space="preserve">
          <source>Retrieves the monad environment.</source>
          <target state="translated">모나드 환경을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="2c23c52fc6ba8b0150f98d916f65b08930d46770" translate="yes" xml:space="preserve">
          <source>Retry execution of the current memory transaction because it has seen values in &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s which mean that it should not continue (e.g. the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s represent a shared buffer that is now empty). The implementation may block the thread until one of the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s that it has read from has been updated. (GHC only)</source>
          <target state="translated">현재 메모리 트랜잭션이 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에서 값을 보았 으므로 계속 실행하지 않아야 함을 의미 하므로 현재 메모리 트랜잭션의 실행을 재 시도하십시오 (예 : &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 는 현재 비어있는 공유 버퍼를 나타냄). 구현 은 읽은 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 중 하나 가 업데이트 될 때까지 스레드를 차단할 수 있습니다 . (GHC 만 해당)</target>
        </trans-unit>
        <trans-unit id="bd96c6cf565c03c2ca0661677b90019b856d671d" translate="yes" xml:space="preserve">
          <source>Retry execution of the current memory transaction because it has seen values in &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s which mean that it should not continue (e.g. the &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s represent a shared buffer that is now empty). The implementation may block the thread until one of the &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s that it has read from has been updated. (GHC only)</source>
          <target state="translated">현재 메모리 트랜잭션이 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에서 값을 보았 으므로 계속 실행하지 않아야 함을 의미 하므로 현재 메모리 트랜잭션의 실행을 재 시도하십시오 (예 : &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 는 현재 비어있는 공유 버퍼를 나타냄). 구현 은 읽은 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 중 하나 가 업데이트 될 때까지 스레드를 차단할 수 있습니다 . (GHC 만 해당)</target>
        </trans-unit>
        <trans-unit id="a41598457732e6a139ea7baf3e01dacbaa879066" translate="yes" xml:space="preserve">
          <source>Retry execution of the current memory transaction because it has seen values in &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s which mean that it should not continue (e.g. the &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s represent a shared buffer that is now empty). The implementation may block the thread until one of the &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s that it has read from has been updated. (GHC only)</source>
          <target state="translated">현재 메모리 트랜잭션이 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에서 값을 보았 으므로 계속 실행하지 않아야 함을 의미 하므로 현재 메모리 트랜잭션의 실행을 재 시도하십시오 (예 : &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 는 현재 비어있는 공유 버퍼를 나타냄). 구현 은 읽은 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 중 하나 가 업데이트 될 때까지 스레드를 차단할 수 있습니다 . (GHC 만 해당)</target>
        </trans-unit>
        <trans-unit id="5f55dc7b78eff20eb547e4e65b19db690d4f2f91" translate="yes" xml:space="preserve">
          <source>Return 1 if &lt;code&gt;MVar#&lt;/code&gt; is empty; 0 otherwise.</source>
          <target state="translated">&lt;code&gt;MVar#&lt;/code&gt; 가 비어 있으면 1을 리턴합니다 . 그렇지 않으면 0입니다.</target>
        </trans-unit>
        <trans-unit id="239d43f62a2ac56e1dbb4fb2dddfc95302d9b332" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;1&lt;/code&gt; depending on whether argument is negative, zero, or positive, respectively</source>
          <target state="translated">인수가 각각 음수인지, 0인지, 양수인지에 따라 &lt;code&gt;-1&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; 및 &lt;code&gt;1&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="75ae59416d00ac6d23a619b93fee5990e88af0ba" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;n&lt;/code&gt;th bit of the argument is 1</source>
          <target state="translated">반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 경우 &lt;code&gt;n&lt;/code&gt; 개의 인수의 비트 일이 1</target>
        </trans-unit>
        <trans-unit id="53cf09a54a19ee477705620e40bcfb76df4f57a8" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is a signed type. The actual value of the argument is ignored</source>
          <target state="translated">인수가 부호있는 유형이면 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 리턴 하십시오. 인수의 실제 값은 무시됩니다</target>
        </trans-unit>
        <trans-unit id="eac4dfb2694aef9d0b8f5e10b7ac3081dd00ae76" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the given value is a &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;-value, &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 주어진 값은 경우 &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; - 값, &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="eca218c17eed305dc2ccdc0de31b5e04d9d790d4" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the given value is a &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;-value, &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 주어진 값은 경우 &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; - 값, &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="5d9487c74e478b83432c0f9ed756421488cb12f9" translate="yes" xml:space="preserve">
          <source>Return a lazy list representing the contents of the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt;, much like &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt; 와 같이 제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt; 의 내용을 나타내는 게으른 목록을 리턴하십시오 .</target>
        </trans-unit>
        <trans-unit id="dde79354e4f97fd4330824eb28771fc86a169834" translate="yes" xml:space="preserve">
          <source>Return a list of all the associations of a mutable array, in index order.</source>
          <target state="translated">가변 배열의 모든 연관 목록을 색인 순서로 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="5294447931aadc184da1bcc2bf0aa028072f7b77" translate="yes" xml:space="preserve">
          <source>Return a list of all the elements of a mutable array</source>
          <target state="translated">변경 가능한 배열의 모든 요소 목록을 반환</target>
        </trans-unit>
        <trans-unit id="50ee4676f7c6d6de5113fecfe4b4e6f32c7787ff" translate="yes" xml:space="preserve">
          <source>Return a printing function, which in terminal-style interactions is thread-safe and may be run concurrently with user input without affecting the prompt.</source>
          <target state="translated">터미널 스타일의 상호 작용에서 스레드 안전하고 프롬프트에 영향을주지 않고 사용자 입력과 동시에 실행될 수있는 인쇄 기능을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="57437da4505312d826ea216562dd7d443309e6b7" translate="yes" xml:space="preserve">
          <source>Return a string describing the usage of a command, derived from the header (first argument) and the options described by the second argument.</source>
          <target state="translated">헤더 (첫 번째 인수)와 두 번째 인수로 설명 된 옵션에서 파생 된 명령 사용법을 설명하는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="779e54790db9de99c9b1f48ad7780baecb50b57d" translate="yes" xml:space="preserve">
          <source>Return a triple (isHighNeeded,high,low) where high and low are respectively the high and low bits of the double-word result. isHighNeeded is a cheap way to test if the high word is a sign-extension of the low word (isHighNeeded = 0#) or not (isHighNeeded = 1#).</source>
          <target state="translated">high와 low가 각각 더블 워드 결과의 높은 비트와 낮은 비트 인 트리플 (isHighNeeded, high, low)을 반환합니다. isHighNeeded는 상위 단어가 하위 단어의 부호 확장 (isHighNeeded = 0 #)인지 아닌지 (isHighNeeded = 1 #) 테스트하는 저렴한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="239bc1a1b2f9b5af6133bea92a7a0289c85350c8" translate="yes" xml:space="preserve">
          <source>Return a word where only the highest bit is set.</source>
          <target state="translated">가장 높은 비트 만 설정된 단어를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a34cf9a224b0d2339198c27219aca2835c18c572" translate="yes" xml:space="preserve">
          <source>Return monotonic time in nanoseconds, since some unspecified starting point</source>
          <target state="translated">지정되지 않은 시작점이 있기 때문에 단조 시간을 나노초로 반환</target>
        </trans-unit>
        <trans-unit id="bc8397067589a4106551930ce04ff005c5ca83dc" translate="yes" xml:space="preserve">
          <source>Return monotonic time in seconds, since some unspecified starting point</source>
          <target state="translated">지정되지 않은 시작점이 있기 때문에 단조 시간을 초 단위로 반환</target>
        </trans-unit>
        <trans-unit id="e049737e569caa173356b218731d69e810155a45" translate="yes" xml:space="preserve">
          <source>Return non-zero if there is any possibility that the upper word of a signed integer multiply might contain useful information. Return zero only if you are completely sure that no overflow can occur. On a 32-bit platform, the recommended implementation is to do a 32 x 32 -&amp;gt; 64 signed multiply, and subtract result[63:32] from (result[31] &amp;gt;&amp;gt;signed 31). If this is zero, meaning that the upper word is merely a sign extension of the lower one, no overflow can occur.</source>
          <target state="translated">부호있는 정수의 상위 단어에 유용한 정보가 포함될 가능성이있는 경우 0이 아닌 값을 리턴하십시오. 오버플로가 발생하지 않는 것이 확실한 경우에만 0을 반환하십시오. 32 비트 플랫폼에서 권장되는 구현은 32 x 32-&amp;gt; 64 부호 곱하기를 수행하고 (결과 [31] &amp;gt;&amp;gt; 부호 31)에서 결과 [63:32]를 빼는 것입니다. 이것이 0 인 경우, 상위 단어는 하위 단어의 부호 확장 일 뿐이므로 오버 플로우가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="089af53d4f503e35d265ce67c50d16af5751b41c" translate="yes" xml:space="preserve">
          <source>Return number of limbs contained in &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:BigNat&quot;&gt;BigNat&lt;/a&gt;&lt;/code&gt; 에 포함 된 사지 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="85ec6ff49102368c01101d47968288128fbabe34" translate="yes" xml:space="preserve">
          <source>Return the Module at the place of splicing. Can be used as an input for &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">접속 장소에 모듈을 반환하십시오. &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyModule&quot;&gt;reifyModule&lt;/a&gt;&lt;/code&gt; 의 입력으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9feff01416814c7f674de08669bf9a6210d4ba5" translate="yes" xml:space="preserve">
          <source>Return the contents of a &lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;-value or a default value otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 값 의 내용을 반환 하거나 그렇지 않으면 기본값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6a4219a1ca698a5ce4bdecbe9f37c4fe76184a7b" translate="yes" xml:space="preserve">
          <source>Return the contents of a &lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;-value or a default value otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 값 의 내용을 반환 하거나 그렇지 않으면 기본값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="50a35e6d38815fc302d4c90367bb6daf75c38f29" translate="yes" xml:space="preserve">
          <source>Return the contents of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently empty, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; will wait until it is full. After a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 의 내용을 돌려 줍니다 . 는 IF &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 현재 비어, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 가 가득 찰 때까지 기다립니다. 후 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e26b74da17c33b2ba651eaaf96834eedc3261b44" translate="yes" xml:space="preserve">
          <source>Return the contents of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently empty, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; will wait until it is full. After a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 의 내용을 반환합니다 . 는 IF &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 현재 비어, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 가 가득 찰 때까지 기다립니다. 후 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe84a6a2a3e1083ff5d74eb60f5157e2929ab806" translate="yes" xml:space="preserve">
          <source>Return the contents of the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently empty, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; will wait until it is full. After a &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 의 내용을 반환합니다 . 는 IF &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 현재 비어, &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 가 가득 찰 때까지 기다립니다. 후 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="12d450260d7a459d097708b37ebc8db3a8f28013" translate="yes" xml:space="preserve">
          <source>Return the contents of the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently empty, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; will wait until it is full. After a &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 의 내용을 돌려 줍니다 . 는 IF &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 현재 비어, &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 가 가득 찰 때까지 기다립니다. 후 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d328824b3c6db4e18e37fb0076d3c2e8117db196" translate="yes" xml:space="preserve">
          <source>Return the contents of the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is currently empty, the transaction will &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;. After a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 의 내용을 돌려 줍니다 . 는 IF &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 가 현재 비어, 트랜잭션이됩니다 &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; . 후 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:takeTMVar&quot;&gt;takeTMVar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt; 는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5b4f1d61fdfa4d546a13cfaad9fb2a667775f27" translate="yes" xml:space="preserve">
          <source>Return the contents of the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is currently empty, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; will wait until it is full. After a &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; is left empty.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 의 내용을 돌려 줍니다 . 는 IF &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 현재 비어, &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 가 가득 찰 때까지 기다립니다. 후 &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea68eb97919fc9b0cfd5d29c51e40ceaef8943ba" translate="yes" xml:space="preserve">
          <source>Return the current &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">현재 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="817a97b03ad38f3f72fce56fda12a6de1ad19b0c" translate="yes" xml:space="preserve">
          <source>Return the current &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the specified &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; is in binary mode.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에 대한 현재 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 반환 하거나 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 이 이진 모드 인 경우 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="319e57db0ec551d795190efab473311e211d6d1f" translate="yes" xml:space="preserve">
          <source>Return the current &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the specified &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; is in binary mode.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 현재 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 반환 하거나 , &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 이 이진 모드 인 경우 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="f7a1a27b6aea426eea23d043cc1153d66ea581e5" translate="yes" xml:space="preserve">
          <source>Return the current &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the specified &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; is in binary mode.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에 대한 현재 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/GHC-IO-Encoding-Types.html#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 반환 하거나 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 이 이진 모드 인 경우 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a385606de0a0d97dcf5a301fa91b6acdb8993db6" translate="yes" xml:space="preserve">
          <source>Return the current &lt;code&gt;&lt;a href=&quot;system-io#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; for the specified &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; is in binary mode.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 의 현재 &lt;code&gt;&lt;a href=&quot;system-io#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 반환 하거나 , &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 이 이진 모드 인 경우 &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="030b59327240344191337257cba1ced35f7e462b" translate="yes" xml:space="preserve">
          <source>Return the current state of the codec.</source>
          <target state="translated">코덱의 현재 상태를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ffdac4826cf5e6776bfa99acff9575e942f4dcf5" translate="yes" xml:space="preserve">
          <source>Return the current value of the allocation counter for the current thread.</source>
          <target state="translated">현재 스레드에 대한 할당 카운터의 현재 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="614b003213b2a6029b214aae2c537019dd082e03" translate="yes" xml:space="preserve">
          <source>Return the current value stored in a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 저장된 현재 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c9ef1cc8cbe1136acc0260f0302bf15831f79133" translate="yes" xml:space="preserve">
          <source>Return the current value stored in a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;. This is equivalent to</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 저장된 현재 값을 반환합니다 . 이것은</target>
        </trans-unit>
        <trans-unit id="1adfeb4463484d8a90b6a055148c1a24fb260b36" translate="yes" xml:space="preserve">
          <source>Return the current value stored in a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 저장된 현재 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="de07a8e373cde6be61c5b2aa67d876192a13923f" translate="yes" xml:space="preserve">
          <source>Return the current value stored in a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;. This is equivalent to</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 저장된 현재 값을 반환합니다 . 이것은</target>
        </trans-unit>
        <trans-unit id="2989d911f3e6d348eb0d3212d71e35f878d57174" translate="yes" xml:space="preserve">
          <source>Return the current value stored in a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 저장된 현재 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b717a867ccdc10b3d490ff579c22b82c4b548f16" translate="yes" xml:space="preserve">
          <source>Return the current value stored in a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;. This is equivalent to</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 저장된 현재 값을 반환합니다 . 이것은</target>
        </trans-unit>
        <trans-unit id="7c3cf41214c8e4f2638aaeeaf85a590be1d8dfff" translate="yes" xml:space="preserve">
          <source>Return the length of a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 의 길이를 돌려 줍니다 .</target>
        </trans-unit>
        <trans-unit id="89e1ee73af0c66d132ceb25eff85b101d3885543" translate="yes" xml:space="preserve">
          <source>Return the number of bits in the type of the argument. The actual value of the argument is ignored. Moreover, &lt;code&gt;&lt;a href=&quot;data-bits#v:finiteBitSize&quot;&gt;finiteBitSize&lt;/a&gt;&lt;/code&gt; is total, in contrast to the deprecated &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt; function it replaces.</source>
          <target state="translated">인수 유형의 비트 수를 리턴하십시오. 인수의 실제 값은 무시됩니다. 또한 사용되지 않는 &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt; 함수 와 달리 &lt;code&gt;&lt;a href=&quot;data-bits#v:finiteBitSize&quot;&gt;finiteBitSize&lt;/a&gt;&lt;/code&gt; 는 총계 입니다.</target>
        </trans-unit>
        <trans-unit id="c3d31ee919be276fced9ac0c9ab3823d5574040e" translate="yes" xml:space="preserve">
          <source>Return the number of bits in the type of the argument. The actual value of the argument is ignored. Returns Nothing for types that do not have a fixed bitsize, like &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">인수 유형의 비트 수를 리턴하십시오. 인수의 실제 값은 무시됩니다. &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 와 같이 고정 된 비트 크기가없는 유형에 대해서는 Nothing을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ad946e3684fd16c73b3c7e852c835abb79d62032" translate="yes" xml:space="preserve">
          <source>Return the number of bits in the type of the argument. The actual value of the argument is ignored. The function &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt; is undefined for types that do not have a fixed bitsize, like &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">인수 유형의 비트 수를 리턴하십시오. 인수의 실제 값은 무시됩니다. &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt; 함수 는 &lt;code&gt;&lt;a href=&quot;prelude#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; 와 같이 고정 된 비트 크기가없는 유형에 대해서는 정의되어 있지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a62d9a774a1acb8192ffd48d2a06aba53e3f8629" translate="yes" xml:space="preserve">
          <source>Return the number of elements in an array, excluding the terminator</source>
          <target state="translated">터미네이터를 제외하고 배열의 요소 수를 반환</target>
        </trans-unit>
        <trans-unit id="7207025791701e635ca0ea0addb569d6c91a1091" translate="yes" xml:space="preserve">
          <source>Return the number of elements in the array.</source>
          <target state="translated">배열의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9af3da56d22f4c37adfe88ac9731dd1c08692c0c" translate="yes" xml:space="preserve">
          <source>Return the number of elements in the array. Note that this is deprecated as it is unsafe in the presence of resize operations on the same byte array.</source>
          <target state="translated">배열의 요소 수를 반환합니다. 동일한 바이트 배열에 대한 크기 조정 작업이있는 경우 안전하지 않으므로 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a2068ed16ec2d4a9d84e4d8813c65674231adbea" translate="yes" xml:space="preserve">
          <source>Return the number of elements in the array. Note that this is deprecated as it is unsafe in the presence of shrink and resize operations on the same small mutable array.</source>
          <target state="translated">배열의 요소 수를 반환합니다. 동일한 작은 가변 배열에서 축소 및 크기 조정 작업이있는 경우 안전하지 않으므로 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="73ecce489f9b016a85e9caf7097faa854323f633" translate="yes" xml:space="preserve">
          <source>Return the number of set bits in the argument. This number is known as the population count or the Hamming weight.</source>
          <target state="translated">인수의 세트 비트 수를 돌려줍니다. 이 숫자는 인구 수 또는 해밍 가중치로 알려져 있습니다.</target>
        </trans-unit>
        <trans-unit id="001826001d925fec3d8e09c965f9e3b649b1b3c4" translate="yes" xml:space="preserve">
          <source>Return the remainder when the &lt;code&gt;Addr#&lt;/code&gt; arg, treated like an &lt;code&gt;Int#&lt;/code&gt;, is divided by the &lt;code&gt;Int#&lt;/code&gt; arg.</source>
          <target state="translated">&lt;code&gt;Int#&lt;/code&gt; 취급 되는 &lt;code&gt;Addr#&lt;/code&gt; arg 가 &lt;code&gt;Int#&lt;/code&gt; arg로 나뉘어 질 때 나머지를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5e6078fa513ac85f0eda91b236f8fdce5222aa5e" translate="yes" xml:space="preserve">
          <source>Return the semaphore's current value.</source>
          <target state="translated">세마포어의 현재 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b5d147e285e6b05dbda5c74bad5337bb41dbd8b1" translate="yes" xml:space="preserve">
          <source>Return the size (in bytes) of the total amount of data in the Compact#</source>
          <target state="translated">Compact #에있는 총 데이터 양의 크기 (바이트)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="98e01265cf79d949deadddc3ba5e5f6f758f4186" translate="yes" xml:space="preserve">
          <source>Return the size of the array in bytes.</source>
          <target state="translated">배열의 크기를 바이트 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8704ecbd6192b39b6106bea7ebf11974686a3858" translate="yes" xml:space="preserve">
          <source>Return the size of the array in bytes. Note that this is deprecated as it is unsafe in the presence of concurrent resize operations on the same byte array.</source>
          <target state="translated">배열의 크기를 바이트 단위로 반환합니다. 동일한 바이트 배열에서 동시 크기 조정 작업이있는 경우 안전하지 않으므로 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1ff2930104db52d8e6af43f863c7b1f5a8a9c03b" translate="yes" xml:space="preserve">
          <source>Return the size of the array in bytes. Note that this is deprecated as it is unsafe in the presence of resize operations on the same byte array.</source>
          <target state="translated">배열의 크기를 바이트 단위로 반환합니다. 동일한 바이트 배열에 대한 크기 조정 작업이있는 경우 안전하지 않으므로 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="12f159b0466775f8400f24774f066906f003ac42" translate="yes" xml:space="preserve">
          <source>Return the size of the array in bytes. Note that this is deprecated as it is unsafe in the presence of shrink and resize operations on the same mutable byte array.</source>
          <target state="translated">배열의 크기를 바이트 단위로 반환합니다. 동일한 가변 바이트 배열에서 축소 및 크기 조정 작업이있는 경우 안전하지 않기 때문에 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dfa9f1634a0cad72a30578589079946deafd9460" translate="yes" xml:space="preserve">
          <source>Return the state from the internals of the monad.</source>
          <target state="translated">모나드 내부에서 상태를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ec810d4714696625c6439eddff2c4628fa57f73" translate="yes" xml:space="preserve">
          <source>Return the time value, or fail if the input could not be parsed using the given format.</source>
          <target state="translated">시간 값을 반환하거나 주어진 형식을 사용하여 입력을 구문 분석 할 수 없으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="f297d4738e7ca3048d89b170ec8392d122a67901" translate="yes" xml:space="preserve">
          <source>Return the total capacity (in bytes) of all the compact blocks in the CNF.</source>
          <target state="translated">CNF에있는 모든 압축 블록의 총 용량 (바이트)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="67594615fe0fd713d7301e1cf95394f84441524a" translate="yes" xml:space="preserve">
          <source>Return the value computed by a state thread. The &lt;code&gt;forall&lt;/code&gt; ensures that the internal state used by the &lt;code&gt;&lt;a href=&quot;control-monad-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation is inaccessible to the rest of the program.</source>
          <target state="translated">상태 스레드에 의해 계산 된 값을 반환합니다. &lt;code&gt;forall&lt;/code&gt; 보장에 의해 사용되는 내부 상태 것이 &lt;code&gt;&lt;a href=&quot;control-monad-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 의 연산 프로그램의 나머지 부분에 액세스 할 수있다.</target>
        </trans-unit>
        <trans-unit id="08ec30101641388ed0799d058467b964d16b9a11" translate="yes" xml:space="preserve">
          <source>Return the value computed by a state thread. The &lt;code&gt;forall&lt;/code&gt; ensures that the internal state used by the &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation is inaccessible to the rest of the program.</source>
          <target state="translated">상태 스레드에 의해 계산 된 값을 반환합니다. &lt;code&gt;forall&lt;/code&gt; 보장에 의해 사용되는 내부 상태 것이 &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 의 연산 프로그램의 나머지 부분에 액세스 할 수있다.</target>
        </trans-unit>
        <trans-unit id="5eb87b59acb5c444781344b0f77efc2846c346fe" translate="yes" xml:space="preserve">
          <source>Return the value computed by a state thread. The &lt;code&gt;forall&lt;/code&gt; ensures that the internal state used by the &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation is inaccessible to the rest of the program.</source>
          <target state="translated">상태 스레드에 의해 계산 된 값을 반환합니다. &lt;code&gt;forall&lt;/code&gt; 보장에 의해 사용되는 내부 상태 것이 &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 의 연산 프로그램의 나머지 부분에 액세스 할 수있다.</target>
        </trans-unit>
        <trans-unit id="2a81f979ce3d6a40db8e10b5ee216f1eed7fbeef" translate="yes" xml:space="preserve">
          <source>Return the value computed by an &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation. The &lt;code&gt;forall&lt;/code&gt; ensures that the internal state used by the &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation is inaccessible to the rest of the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산에 의해 계산 된 값을 반환합니다 . &lt;code&gt;forall&lt;/code&gt; 보장에 의해 사용되는 내부 상태 것이 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 의 연산 프로그램의 나머지 부분에 액세스 할 수있다.</target>
        </trans-unit>
        <trans-unit id="2c3fe4fba80f409979cb4f6d8d58120117fc9c9b" translate="yes" xml:space="preserve">
          <source>Return the value computed by an &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation. The &lt;code&gt;forall&lt;/code&gt; ensures that the internal state used by the &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation is inaccessible to the rest of the program.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 계산에 의해 계산 된 값을 반환합니다 . &lt;code&gt;forall&lt;/code&gt; 보장에 의해 사용되는 내부 상태 것이 &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; 의 연산 프로그램의 나머지 부분에 액세스 할 수있다.</target>
        </trans-unit>
        <trans-unit id="9d0082a9c912e15b1feb525005aab9eb60b8be4c" translate="yes" xml:space="preserve">
          <source>Return the value of the environment variable &lt;code&gt;var&lt;/code&gt;, or &lt;code&gt;Nothing&lt;/code&gt; if there is no such value.</source>
          <target state="translated">환경 변수의 값 반환 &lt;code&gt;var&lt;/code&gt; , 또는 &lt;code&gt;Nothing&lt;/code&gt; 그러한 값이없는 경우.</target>
        </trans-unit>
        <trans-unit id="1fe2d3d91d929346aa78f0873cf3985dba6a3e56" translate="yes" xml:space="preserve">
          <source>Return whether the given &lt;code&gt;&lt;a href=&quot;system-directory-internal#t:FileType&quot;&gt;FileType&lt;/a&gt;&lt;/code&gt; is a link.</source>
          <target state="translated">주어진 &lt;code&gt;&lt;a href=&quot;system-directory-internal#t:FileType&quot;&gt;FileType&lt;/a&gt;&lt;/code&gt; 이 링크 인지 여부를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="31ae2630c67c91d86384955170e52ce07a94347b" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;x&lt;/code&gt; unmodified</source>
          <target state="translated">수정되지 않은 &lt;code&gt;x&lt;/code&gt; 반환</target>
        </trans-unit>
        <trans-unit id="782ad6855ec6b3e543f77a57bf9d64a2ecd70bab" translate="yes" xml:space="preserve">
          <source>Returning to simpler instances, defined just in terms of &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, it is somewhat surprising that a fairly efficient &lt;em&gt;default&lt;/em&gt; implementation of the strict &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;` is defined in terms of lazy &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; when only the latter is explicitly provided by the instance. It may be instructive to take a look at how this works.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 로 정의 된 더 단순한 인스턴스로 돌아가서 , strict &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; ` 의 상당히 효율적인 &lt;em&gt;기본&lt;/em&gt; 구현 이 인스턴스에서 명시 적으로 제공되는 경우 lazy &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; 측면에서 정의 된다는 것은 다소 놀랍습니다 . 이것이 어떻게 작동하는지 살펴 보는 것이 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b4a5550d59915e56cad99e3c0f087b7602257cc" translate="yes" xml:space="preserve">
          <source>Returns $HOME env variable if set (including to an empty string).</source>
          <target state="translated">설정된 경우 $ HOME env 변수를 리턴합니다 (빈 문자열 포함).</target>
        </trans-unit>
        <trans-unit id="a8ed04ec8c74299c8edea1b659530fa3d6e54236" translate="yes" xml:space="preserve">
          <source>Returns 1# if the object is contained in the CNF, 0# otherwise.</source>
          <target state="translated">개체가 CNF에 포함되어 있으면 1 #을 반환하고 그렇지 않으면 0 #을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="030fb3b5f0545d8254f1c18f2171486ba7bed91a" translate="yes" xml:space="preserve">
          <source>Returns 1# if the object is contained in the compact, 0# otherwise.</source>
          <target state="translated">객체가 컴팩트에 포함되어 있으면 1 #을, 그렇지 않으면 0 #을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f24a51d2d2463cfd2fd00d79534de1ab6f0bf963" translate="yes" xml:space="preserve">
          <source>Returns 1# if the object is in any CNF at all, 0# otherwise.</source>
          <target state="translated">개체가 CNF에 있으면 1 #을 반환하고 그렇지 않으면 0 #을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="31bf08f6e44b790a526f3ea37ca40cb2c13ca76b" translate="yes" xml:space="preserve">
          <source>Returns 1# if the object is in any compact at all, 0# otherwise.</source>
          <target state="translated">객체가 압축되어 있으면 1 #을, 그렇지 않으면 0 #을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="40de57011981525670a3f92d1c62c69ee14f07ea" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;1#&lt;/code&gt; if the given pointers are equal and &lt;code&gt;0#&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;1#&lt;/code&gt; 주어진 포인터가 동일하고 경우 &lt;code&gt;0#&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="054506879fa255b3f44c6987f6925348a7c9958b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;1#&lt;/code&gt; if valid, &lt;code&gt;0#&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;1#&lt;/code&gt; 유효한 경우, &lt;code&gt;0#&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="66861a05c2b6a00a48f4b73591c9c11c31784b76" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the current process's standard error is attached to a MinTTY console (e.g., Cygwin or MSYS). Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">현재 프로세스의 표준 오류가 MinTTY 콘솔 (예 : Cygwin 또는 MSYS)에 연결된 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 반환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="1cb06e70b306281690d4964d1014d6443ff8910b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the current session uses terminal-style interaction. (See &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Behavior&quot;&gt;Behavior&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">현재 세션이 터미널 스타일 상호 작용을 사용하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Behavior&quot;&gt;Behavior&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="55ddad51179261e3fce77d477585e6ee7b9c48be" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the document is empty</source>
          <target state="translated">문서가 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환합니다</target>
        </trans-unit>
        <trans-unit id="f6bcb06cf572ace1fb67c627721d6fa9375571e5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 가 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d4381b423b7ed3206027d100df0db8796fec244b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; is full.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 가 가득 찬 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e3dacac11929a3bbcaac1dcae5a04ad003fad46c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 이 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="64d6bd42612b74dc3ea59431fe9eb65e59aa3cf2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; 가 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1052b9398d6120dfadc74e0d652efcf7d43679cc" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; is the given handle is attached to a MinTTY console (e.g., Cygwin or MSYS). Returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">주어진 핸들이 MinTTY 콘솔 (예 : Cygwin 또는 MSYS)에 연결된 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다. 반환 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="54722f10bce47c54cf3530854dd7446ab25c6470" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if it successfully accepted one key. Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if it encountered the end of input; i.e., an &lt;code&gt;EOF&lt;/code&gt; in file-style interaction, or a &lt;code&gt;Ctrl-D&lt;/code&gt; in terminal-style interaction.</source>
          <target state="translated">키 하나를 성공적으로 수락하면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 입력이 끝나면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 즉, 파일 스타일 상호 작용 의 &lt;code&gt;EOF&lt;/code&gt; 또는 터미널 스타일 상호 작용 의 &lt;code&gt;Ctrl-D&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b67950267c64457459aa19a05557b38832b7aba9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the current process's standard error is attached to a MinTTY console (e.g., Cygwin or MSYS). Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">현재 프로세스의 표준 오류가 MinTTY 콘솔 (예 : Cygwin 또는 MSYS)에 첨부되면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 반환 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d7d2365285ded5e73fd6755ed07fe50e888d57cf" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the current session uses terminal-style interaction. (See &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Behavior&quot;&gt;Behavior&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">현재 세션이 터미널 스타일 상호 작용을 사용하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. ( &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Behavior&quot;&gt;Behavior&lt;/a&gt;&lt;/code&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="3641a776d1e547e9c1672d18beae4e771e83fd0e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the document is empty</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 반환문서가 비어 있으면 합니다.</target>
        </trans-unit>
        <trans-unit id="80fb5e7b0993b7811aa6b29ad0dc4edafad50811" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 인 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 가 비어 .</target>
        </trans-unit>
        <trans-unit id="d97a55ba7afb2b3dddb5b79f91f2e61da9733a9a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; is full.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 인 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 가 가득 차면 .</target>
        </trans-unit>
        <trans-unit id="b32052b70ee89d7efa652e0da24350d5871d8f3f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 인 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 이 비어 .</target>
        </trans-unit>
        <trans-unit id="e9eb76bbfef5b534035f1fb75239cbbd1e800c2c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; 인 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 가 비어 .</target>
        </trans-unit>
        <trans-unit id="13abbe5f6ebe6768620139f449099bcf724d5ef5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; is the given handle is attached to a MinTTY console (e.g., Cygwin or MSYS). Returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">주어진 핸들이 MinTTY 콘솔 (예 : Cygwin 또는 MSYS)에 연결되면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 반환 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="966c0dd38c9877f6b297a6870cca0a3b30a3a142" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if it successfully accepted one key. Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; if it encountered the end of input; i.e., an &lt;code&gt;EOF&lt;/code&gt; in file-style interaction, or a &lt;code&gt;Ctrl-D&lt;/code&gt; in terminal-style interaction.</source>
          <target state="translated">키 하나를 성공적으로 수락하면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 입력이 끝나면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 즉, 파일 스타일 상호 작용 의 &lt;code&gt;EOF&lt;/code&gt; 또는 터미널 스타일 상호 작용 의 &lt;code&gt;Ctrl-D&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e51f38c28f6b9f7aa0bc12da083bb4c10ddda1c7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the current session uses terminal-style interaction. (See &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Behavior&quot;&gt;Behavior&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">현재 세션이 터미널 스타일 상호 작용을 사용하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. ( &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Behavior&quot;&gt;Behavior&lt;/a&gt;&lt;/code&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="f8316e0dd926dc0a9ef9d3c5cd795d0d58782452" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the document is empty</source>
          <target state="translated">문서가 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2605c2c49d498f4fb2e1e9854f3085f163690821" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 가 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="67119c8f7a602185396b70de71edf1ab4c192228" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; is full.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 가 가득 차면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="785bea9346e29d7249af715f63416e99ca1e8acd" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 이 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0e2cb593cea86621ae9f45ac9fc67cee8e3e0d17" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the supplied &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; is empty.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; 가 비어 있으면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dbeeb6827431115e5d05a673d0ca868c94b67d4d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the current process's standard error is attached to a MinTTY console (e.g., Cygwin or MSYS). Returns &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">현재 프로세스의 표준 오류가 MinTTY 콘솔 (예 : Cygwin 또는 MSYS)에 첨부되면 &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 반환 &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="534c94318aeb89f649bfb29cafc79eb7404c2872" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; is the given handle is attached to a MinTTY console (e.g., Cygwin or MSYS). Returns &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 하면 주어진 핸들이 MinTTY 콘솔 (예 : Cygwin 또는 MSYS)에 연결됩니다. 반환 &lt;code&gt;&lt;a href=&quot;../base/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="dfb1dc66a9aba039d8fb00faff4adccb11d691b4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; for any Unicode space character, and the control characters &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, &lt;code&gt;\f&lt;/code&gt;, &lt;code&gt;\v&lt;/code&gt;.</source>
          <target state="translated">모든 유니 코드 공백 문자 및 제어 문자 &lt;code&gt;\t&lt;/code&gt; , &lt;code&gt;\n&lt;/code&gt; , &lt;code&gt;\r&lt;/code&gt; , &lt;code&gt;\f&lt;/code&gt; , &lt;code&gt;\v&lt;/code&gt; 대해 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="354cea2878218788cfa494d1ab10a88a0967a70d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the calling thread is &lt;em&gt;bound&lt;/em&gt;, that is, if it is safe to use foreign libraries that rely on thread-local state from the calling thread.</source>
          <target state="translated">호출 스레드가 &lt;em&gt;바인드&lt;/em&gt; 되어있는 경우, 즉 호출 스레드의 스레드 로컬 상태에 의존하는 외부 라이브러리를 사용하는 것이 안전한 경우 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="07b3211aa1ea6cabc6ac7d153daf99074ac49195" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the given subscript lies in the range defined the bounding pair.</source>
          <target state="translated">주어진 첨자가 경계 쌍을 정의한 범위 내에있는 경우 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9687ecbbf8ea32d466eef44e6b0c5bed3f487cd5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:nullBigNat&quot;&gt;nullBigNat&lt;/a&gt;&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:isNullBigNat-35-&quot;&gt;isNullBigNat#&lt;/a&gt;&lt;/code&gt;) in case of underflow</source>
          <target state="translated">언더 플로의 경우 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:nullBigNat&quot;&gt;nullBigNat&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:isNullBigNat-35-&quot;&gt;isNullBigNat#&lt;/a&gt;&lt;/code&gt; 참조)를 반환합니다</target>
        </trans-unit>
        <trans-unit id="9df21b1c00d4c06244689abaf8fdc8b45b77e1be" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Nothing&lt;/code&gt; if stack trace support isn't available on host machine.</source>
          <target state="translated">호스트 시스템에서 스택 추적 지원을 사용할 수 &lt;code&gt;Nothing&lt;/code&gt; 경우 Nothing을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="225bbaf513586d23567156d335aa2d43da865b15" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the second vertex reachable from the first.</source>
          <target state="translated">첫 번째 정점에서 두 번째 정점에 도달 할 수 있으면 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="79e34c79319ff106b22502e2cb995e1d7fcdaca1" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;[String]&lt;/code&gt; representing the current call stack. This can be useful for debugging.</source>
          <target state="translated">현재 호출 스택을 나타내는 &lt;code&gt;[String]&lt;/code&gt; 반환합니다 . 디버깅에 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f728eb85795ae241fe6ba9ceea04df69a4f91459" translate="yes" xml:space="preserve">
          <source>Returns a ByteString, because we have to force the result before returning it to ensure there are no errors lurking in it. The TH types don't have NFData instances, and even if they did, we have to serialize the value anyway, so we might as well serialize it to force it.</source>
          <target state="translated">ByteString을 반환합니다. 결과를 숨기려면 오류가 발생하지 않도록 결과를 반환하기 전에 강제로 수행해야하기 때문입니다. TH 유형에는 NFData 인스턴스가 없으며, 인스턴스가 있더라도 어쨌든 값을 직렬화해야하므로 강제로 강제로 직렬화해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b333c2153cef9a52c787f55578053ac4ff50e4b8" translate="yes" xml:space="preserve">
          <source>Returns a duplicate of the original handle, with its own buffer. The two Handles will share a file pointer, however. The original handle's buffer is flushed, including discarding any input data, before the handle is duplicated.</source>
          <target state="translated">자체 버퍼와 함께 원래 핸들의 복제본을 리턴합니다. 그러나 두 핸들은 파일 포인터를 공유합니다. 핸들이 복제되기 전에 입력 데이터 삭제를 포함하여 원래 핸들의 버퍼가 플러시됩니다.</target>
        </trans-unit>
        <trans-unit id="03a895de8b7628324d51d76d7f6f6f7780bba4e4" translate="yes" xml:space="preserve">
          <source>Returns a list of all the elements of an array, in the same order as their indices.</source>
          <target state="translated">배열의 모든 요소 목록을 색인과 동일한 순서로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ebb32386c6ecb499712e2aa0bad3a305fc93ad84" translate="yes" xml:space="preserve">
          <source>Returns a list of all the valid indices in an array.</source>
          <target state="translated">배열에서 유효한 모든 인덱스 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c48f45abbd130e2787cb5db6b4f4c0174106f3a4" translate="yes" xml:space="preserve">
          <source>Returns a new array derived from the original array by applying a function to each of the elements.</source>
          <target state="translated">각 요소에 함수를 적용하여 원래 배열에서 파생 된 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dcaea403b41dea254087b3e3af90a56ecf3420c7" translate="yes" xml:space="preserve">
          <source>Returns a new array derived from the original array by applying a function to each of the indices.</source>
          <target state="translated">각 인덱스에 함수를 적용하여 원래 배열에서 파생 된 새 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0784b41850dcc90f8043d544ce24692388fabbf7" translate="yes" xml:space="preserve">
          <source>Returns an (encoded) result that depends on the THResultType</source>
          <target state="translated">THResultType에 의존하는 (인코딩 된) 결과를 반환합니다</target>
        </trans-unit>
        <trans-unit id="069b53cbdc1831a2ad4dd9e41459e90be8ba17d1" translate="yes" xml:space="preserve">
          <source>Returns an STM action that can be used to wait for data to read from a file descriptor. The second returned value is an IO action that can be used to deregister interest in the file descriptor.</source>
          <target state="translated">파일 디스크립터에서 데이터를 읽을 때까지 사용할 수있는 STM 조치를 리턴합니다. 두 번째 리턴 값은 파일 디스크립터에 대한 관심을 등록 취소하는 데 사용할 수있는 IO 조치입니다.</target>
        </trans-unit>
        <trans-unit id="a9a5fd7e27c63094640eafb67d49cd36e2cb689a" translate="yes" xml:space="preserve">
          <source>Returns an STM action that can be used to wait until data can be written to a file descriptor. The second returned value is an IO action that can be used to deregister interest in the file descriptor.</source>
          <target state="translated">데이터를 파일 디스크립터에 쓸 수있을 때까지 대기하는 데 사용할 수있는 STM 조치를 리턴합니다. 두 번째 리턴 값은 파일 디스크립터에 대한 관심을 등록 취소하는 데 사용할 수있는 IO 조치입니다.</target>
        </trans-unit>
        <trans-unit id="6d643fe07afdd98d0851bcf6b1d8f38b40abd0bc" translate="yes" xml:space="preserve">
          <source>Returns from the &lt;code&gt;Cont&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;Cont&lt;/code&gt; 블록 에서 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="41c6274ff072dc0df35107aa165a8e6946ebe8be" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; of the calling thread (GHC only).</source>
          <target state="translated">호출 스레드 의 &lt;code&gt;&lt;a href=&quot;control-concurrent#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 를 리턴합니다 (GHC 만 해당).</target>
        </trans-unit>
        <trans-unit id="d6d482611c58f400c4e9d4063a360d5e3e695927" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;&lt;a href=&quot;control-exception#t:MaskingState&quot;&gt;MaskingState&lt;/a&gt;&lt;/code&gt; for the current thread.</source>
          <target state="translated">현재 스레드 의 &lt;code&gt;&lt;a href=&quot;control-exception#t:MaskingState&quot;&gt;MaskingState&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="71b82dd9cb02104bc42f35f2d0381726ce977f50" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; of the calling thread (GHC only).</source>
          <target state="translated">호출 스레드 의 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 를 리턴합니다 (GHC 만 해당).</target>
        </trans-unit>
        <trans-unit id="cca0619154d3ff5cc205e78e6c6c7b8e4d80dfff" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; of the calling thread (GHC only).</source>
          <target state="translated">호출 스레드 의 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:ThreadId&quot;&gt;ThreadId&lt;/a&gt;&lt;/code&gt; 를 리턴합니다 (GHC 만 해당).</target>
        </trans-unit>
        <trans-unit id="bdaccac0b289ce01949934fbbb9b784902b17fa9" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;&lt;a href=&quot;ghc-io#t:MaskingState&quot;&gt;MaskingState&lt;/a&gt;&lt;/code&gt; for the current thread.</source>
          <target state="translated">현재 스레드 의 &lt;code&gt;&lt;a href=&quot;ghc-io#t:MaskingState&quot;&gt;MaskingState&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="58789f682b6b8f8157e4346b16928e86facf780a" translate="yes" xml:space="preserve">
          <source>Returns the PID (process ID) of a subprocess.</source>
          <target state="translated">서브 프로세스의 PID (프로세스 ID)를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d037192c5cf225fbebc2531165da5d25b77905eb" translate="yes" xml:space="preserve">
          <source>Returns the absolute pathname of the current executable.</source>
          <target state="translated">현재 실행 파일의 절대 경로 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e7f76e0dfa218f536a75044fa8b867cc9f6172d7" translate="yes" xml:space="preserve">
          <source>Returns the address and the size (in bytes) of the first block of a compact.</source>
          <target state="translated">압축의 첫 번째 블록의 주소와 크기 (바이트)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1e5f6d437872b556f3f7276052cdae89b65e0d01" translate="yes" xml:space="preserve">
          <source>Returns the address and the utilized size (in bytes) of the first compact block of a CNF.</source>
          <target state="translated">CNF의 첫 번째 압축 블록의 주소와 사용 된 크기 (바이트)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a8385cab3518738507f523cc2b52f6b0f0e3c240" translate="yes" xml:space="preserve">
          <source>Returns the bounds of the array</source>
          <target state="translated">배열의 경계를 반환</target>
        </trans-unit>
        <trans-unit id="35d33c421f8f4a5fc9ffea0f64b3b7aaf5b98122" translate="yes" xml:space="preserve">
          <source>Returns the contents of an array as a list of associations.</source>
          <target state="translated">배열의 내용을 연관 목록으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="32ff31240baf8692a7a3b6428c01b39ab55604ca" translate="yes" xml:space="preserve">
          <source>Returns the current &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; (value is &lt;code&gt;nullPtr&lt;/code&gt; if the current program was not compiled with profiling support). Takes a dummy argument which can be used to avoid the call to &lt;code&gt;getCurrentCCS&lt;/code&gt; being floated out by the simplifier, which would result in an uninformative stack (&lt;a href=&quot;caf&quot;&gt;CAF&lt;/a&gt;).</source>
          <target state="translated">현재 &lt;code&gt;&lt;a href=&quot;ghc-stack#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; 을 리턴합니다 ( 현재 프로그램이 프로파일 링 지원으로 컴파일되지 않은 경우 값은 &lt;code&gt;nullPtr&lt;/code&gt; 임). &lt;code&gt;getCurrentCCS&lt;/code&gt; 에 대한 호출 이 단순화 자에 의해 떠 다니는 것을 피하기 위해 사용될 수있는 더미 인수를 취합니다. 이로 인해 정보가없는 스택 ( &lt;a href=&quot;caf&quot;&gt;CAF&lt;/a&gt; )이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="8dad347ef9c92129b1c0a465b0b87f9eda7f369c" translate="yes" xml:space="preserve">
          <source>Returns the current &lt;code&gt;&lt;a href=&quot;ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; (value is &lt;code&gt;nullPtr&lt;/code&gt; if the current program was not compiled with profiling support). Takes a dummy argument which can be used to avoid the call to &lt;code&gt;getCurrentCCS&lt;/code&gt; being floated out by the simplifier, which would result in an uninformative stack (&lt;a href=&quot;caf&quot;&gt;CAF&lt;/a&gt;).</source>
          <target state="translated">현재 &lt;code&gt;&lt;a href=&quot;ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; 을 리턴합니다 ( 현재 프로그램이 프로파일 링 지원으로 컴파일되지 않은 경우 값은 &lt;code&gt;nullPtr&lt;/code&gt; 임). &lt;code&gt;getCurrentCCS&lt;/code&gt; 에 대한 호출 이 단순화 자에 의해 떠 다니는 것을 피하기 위해 사용될 수있는 더미 인수를 취합니다. 이로 인해 정보가없는 스택 ( &lt;a href=&quot;caf&quot;&gt;CAF&lt;/a&gt; )이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="704fb39ddb91269ef45975308aaeb6626a6afd79" translate="yes" xml:space="preserve">
          <source>Returns the current &lt;code&gt;CostCentreStack&lt;/code&gt; (value is &lt;code&gt;NULL&lt;/code&gt; if not profiling). Takes a dummy argument which can be used to avoid the call to &lt;code&gt;getCurrentCCS#&lt;/code&gt; being floated out by the simplifier, which would result in an uninformative stack (&quot;CAF&quot;).</source>
          <target state="translated">현재 &lt;code&gt;CostCentreStack&lt;/code&gt; 을 리턴합니다 ( 프로파일 링이 아닌 경우 값은 &lt;code&gt;NULL&lt;/code&gt; 임). &lt;code&gt;getCurrentCCS#&lt;/code&gt; 에 대한 호출 이 단순화 자에 의해 떠 다니는 것을 피하는 데 사용할 수있는 더미 인수를 사용 하여 정보가없는 스택 ( &quot;CAF&quot;)이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c23fd648b89a19cb62b7a1e1ac964c4fb2c8ead6" translate="yes" xml:space="preserve">
          <source>Returns the current directory for temporary files.</source>
          <target state="translated">임시 파일의 현재 디렉토리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a01fc104ad5582df2299a6a30a33655f64dce16e" translate="yes" xml:space="preserve">
          <source>Returns the current input</source>
          <target state="translated">현재 입력을 반환</target>
        </trans-unit>
        <trans-unit id="ed2770f6437427337593920876b367a58b85c9fe" translate="yes" xml:space="preserve">
          <source>Returns the current source position. See also &lt;code&gt;&lt;a href=&quot;text-parsec#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">현재 소스 위치를 반환합니다. &lt;code&gt;&lt;a href=&quot;text-parsec#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a00742a8a794d78dbfb24412764c22d8bd56bdc9" translate="yes" xml:space="preserve">
          <source>Returns the current source position. See also &lt;code&gt;&lt;a href=&quot;text-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">현재 소스 위치를 반환합니다. &lt;code&gt;&lt;a href=&quot;text-parsec-pos#t:SourcePos&quot;&gt;SourcePos&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b48effbaafaad1bdac27d8aeaf8e339010d1de63" translate="yes" xml:space="preserve">
          <source>Returns the current user state.</source>
          <target state="translated">현재 사용자 상태를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8b644030a492bccb7b3d07a11e9f5c18ebfe9f6b" translate="yes" xml:space="preserve">
          <source>Returns the current user's document directory.</source>
          <target state="translated">현재 사용자의 문서 디렉토리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eb0f0a7901fe875e87b6c9d1350a7662a2b25894" translate="yes" xml:space="preserve">
          <source>Returns the current user's home directory.</source>
          <target state="translated">현재 사용자의 홈 디렉토리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="73a4450f722c7001626909c4664aceece6946edc" translate="yes" xml:space="preserve">
          <source>Returns the element of an immutable array at the specified index.</source>
          <target state="translated">지정된 인덱스의 불변 배열의 요소를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="4135ad281d130ca531531402ab3922cff10c4f3d" translate="yes" xml:space="preserve">
          <source>Returns the elements of a tree in pre-order.</source>
          <target state="translated">순서대로 트리의 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6c1987b96e96cef6db7fb80584896113ded06ea4" translate="yes" xml:space="preserve">
          <source>Returns the full parser state as a &lt;code&gt;&lt;a href=&quot;text-parsec#t:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; record.</source>
          <target state="translated">전체 파서 상태를 &lt;code&gt;&lt;a href=&quot;text-parsec#t:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; 레코드 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="122526db1ffa1233009cfaee1f422c784e873e6b" translate="yes" xml:space="preserve">
          <source>Returns the full parser state as a &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; record.</source>
          <target state="translated">전체 파서 상태를 &lt;code&gt;&lt;a href=&quot;text-parsec-prim#t:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; 레코드 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6720f5cda22bd959ebcf8d8bbf2d3eff4fe8b33c" translate="yes" xml:space="preserve">
          <source>Returns the full parser state as a &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-prim#t:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; record.</source>
          <target state="translated">전체 파서 상태를 &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-prim#t:State&quot;&gt;State&lt;/a&gt;&lt;/code&gt; 레코드 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ac6c1b5d60cdba404da3a22b80654790d4253e6a" translate="yes" xml:space="preserve">
          <source>Returns the list of edges in the graph.</source>
          <target state="translated">그래프의 모서리 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a7d8165a9a37a003dd9c58b591114c635f526fd" translate="yes" xml:space="preserve">
          <source>Returns the list of nodes at each level of the tree.</source>
          <target state="translated">트리의 각 레벨에서 노드 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f229b14816eee865913d187f8a7f58402cd27231" translate="yes" xml:space="preserve">
          <source>Returns the list of vertices in the graph.</source>
          <target state="translated">그래프의 꼭짓점 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e387df86fb7b3b262154714381694c7bd5f23ec9" translate="yes" xml:space="preserve">
          <source>Returns the list of vertices reachable from a given vertex.</source>
          <target state="translated">주어진 정점에서 도달 할 수있는 정점 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ee86401c0a49621555bf5ab6a31c2075fc6204ce" translate="yes" xml:space="preserve">
          <source>Returns the number of CPUs that the machine has</source>
          <target state="translated">머신이 가지고있는 CPU 수를 반환합니다</target>
        </trans-unit>
        <trans-unit id="c4ab42b10e4c4d272229ee213335f383523c8a9b" translate="yes" xml:space="preserve">
          <source>Returns the number of Haskell threads that can run truly simultaneously (on separate physical processors) at any given time. To change this value, use &lt;code&gt;&lt;a href=&quot;control-concurrent#v:setNumCapabilities&quot;&gt;setNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 시간에 실제로 (별도의 물리적 프로세서에서) 동시에 실행될 수있는 Haskell 스레드 수를 반환합니다. 이 값을 변경하려면 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:setNumCapabilities&quot;&gt;setNumCapabilities&lt;/a&gt;&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="40806beaf3543cbdbed3bea032df175bb83631df" translate="yes" xml:space="preserve">
          <source>Returns the number of Haskell threads that can run truly simultaneously (on separate physical processors) at any given time. To change this value, use &lt;code&gt;&lt;a href=&quot;ghc-conc#v:setNumCapabilities&quot;&gt;setNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 시간에 실제로 (별도의 물리적 프로세서에서) 동시에 실행될 수있는 Haskell 스레드 수를 반환합니다. 이 값을 변경하려면 &lt;code&gt;&lt;a href=&quot;ghc-conc#v:setNumCapabilities&quot;&gt;setNumCapabilities&lt;/a&gt;&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d7fcafb83b804dbc4822df98086cf983d17752c" translate="yes" xml:space="preserve">
          <source>Returns the number of Haskell threads that can run truly simultaneously (on separate physical processors) at any given time. To change this value, use &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:setNumCapabilities&quot;&gt;setNumCapabilities&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 시간에 실제로 (별도의 물리적 프로세서에서) 동시에 실행될 수있는 Haskell 스레드 수를 반환합니다. 이 값을 변경하려면 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:setNumCapabilities&quot;&gt;setNumCapabilities&lt;/a&gt;&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="ceacd22f199c19bd1d7b1010bc4abd5817dc1dd7" translate="yes" xml:space="preserve">
          <source>Returns the number of sparks currently in the local spark pool</source>
          <target state="translated">현재 로컬 스파크 풀에있는 스파크 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="270b270ff8f2d165013014ca5716e450db9fd130" translate="yes" xml:space="preserve">
          <source>Returns the number of sparks in the local spark pool.</source>
          <target state="translated">로컬 스파크 풀의 스파크 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6182192420dd141358cbbc26d066d693f1ffd90a" translate="yes" xml:space="preserve">
          <source>Returns the number of the capability on which the thread is currently running, and a boolean indicating whether the thread is locked to that capability or not. A thread is locked to a capability if it was created with &lt;code&gt;forkOn&lt;/code&gt;.</source>
          <target state="translated">스레드가 현재 실행중인 기능의 수와 스레드가 해당 기능에 잠겨 있는지 여부를 나타내는 부울을 리턴합니다. 스레드가 &lt;code&gt;forkOn&lt;/code&gt; 으로 작성된 경우 기능에 잠겨 있습니다.</target>
        </trans-unit>
        <trans-unit id="6608dc9d731742faa501a91d3eb9883b9c1b3f91" translate="yes" xml:space="preserve">
          <source>Returns the size/length of a finite structure as an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">유한 구조체의 크기 / 길이를 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="699f3e4c880a8e7d9c8a7c3dfa52b2305a41d5a0" translate="yes" xml:space="preserve">
          <source>Returns the size/length of a finite structure as an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The default implementation is optimized for structures that are similar to cons-lists, because there is no general way to do better.</source>
          <target state="translated">유한 구조체의 크기 / 길이를 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 반환합니다 . 기본 구현은 더 나은 일반적인 방법이 없기 때문에 cons-list와 유사한 구조에 최적화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f7279cd7236997c95aafa6e5992a1d70e875de9" translate="yes" xml:space="preserve">
          <source>Returns the size/length of a finite structure as an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The default implementation just counts elements starting with the left-most. Instances for structures that can compute the element count faster than via element-by-element counting, should provide a specialised implementation.</source>
          <target state="translated">유한 구조체의 크기 / 길이를 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 반환합니다 . 기본 구현은 맨 왼쪽부터 시작하는 요소 만 계산합니다. 요소 별 개수를 계산하는 것보다 더 빠르게 요소 개수를 계산할 수있는 구조에 대한 인스턴스는 특수한 구현을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="498e56813e913b90c9a52d7c557f9c2293f41195" translate="yes" xml:space="preserve">
          <source>Returns the size/length of a finite structure as an &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The default implementation is optimized for structures that are similar to cons-lists, because there is no general way to do better.</source>
          <target state="translated">유한 구조체의 크기 / 길이를 &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 반환합니다 . 기본 구현은 더 나은 일반적인 방법이 없기 때문에 cons-list와 유사한 구조에 최적화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad3fbbe0bcb90d9763f333b79f9b3a09133da2b9" translate="yes" xml:space="preserve">
          <source>Returns the size/length of a finite structure as an &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;. The default implementation just counts elements starting with the left-most. Instances for structures that can compute the element count faster than via element-by-element counting, should provide a specialised implementation.</source>
          <target state="translated">유한 구조체의 크기 / 길이를 &lt;code&gt;&lt;a href=&quot;prelude#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 반환합니다 . 기본 구현은 맨 왼쪽부터 시작하는 요소 만 계산합니다. 요소 별 개수를 계산하는 것보다 더 빠르게 요소 개수를 계산할 수있는 구조에 대한 인스턴스는 특수한 구현을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="5407cb087162216d4cc6494ebb2033fd44fba60e" translate="yes" xml:space="preserve">
          <source>Returns the tag of a constructor application; this function is used by the deriving code for Eq, Ord and Enum.</source>
          <target state="translated">생성자 응용 프로그램의 태그를 반환합니다. 이 함수는 Eq, Ord 및 Enum의 파생 코드에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c7109a5a8a536432b7eeb9bbf23765d4d4f11a69" translate="yes" xml:space="preserve">
          <source>Returns the welcome message from the &lt;code&gt;&lt;a href=&quot;control-monad-cont#v:callCC&quot;&gt;callCC&lt;/a&gt;&lt;/code&gt; block. This line is not executed if &lt;code&gt;validateName&lt;/code&gt; fails.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-cont#v:callCC&quot;&gt;callCC&lt;/a&gt;&lt;/code&gt; 블록 에서 환영 메시지를 리턴합니다 . &lt;code&gt;validateName&lt;/code&gt; 이 실패하면 이 행이 실행되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2af42e634d7606bf9d85d733187712263c88111e" translate="yes" xml:space="preserve">
          <source>Returns whether GC stats have been enabled (with &lt;code&gt;+RTS -T&lt;/code&gt;, for example).</source>
          <target state="translated">GC 통계가 활성화되었는지 여부를 반환합니다 ( 예 : &lt;code&gt;+RTS -T&lt;/code&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="90ec23607782e5503ddf81a5bf25d15b6a07aa53" translate="yes" xml:space="preserve">
          <source>Returns whether a name represents an occurrence of a top-level variable (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarName&quot;&gt;VarName&lt;/a&gt;&lt;/code&gt;), data constructor (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataName&quot;&gt;DataName&lt;/a&gt;&lt;/code&gt;), type constructor, or type class (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:TcClsName&quot;&gt;TcClsName&lt;/a&gt;&lt;/code&gt;). If we can't be sure, it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이름이 최상위 변수 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarName&quot;&gt;VarName&lt;/a&gt;&lt;/code&gt; ), 데이터 생성자 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataName&quot;&gt;DataName&lt;/a&gt;&lt;/code&gt; ), 유형 생성자 또는 유형 클래스 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:TcClsName&quot;&gt;TcClsName&lt;/a&gt;&lt;/code&gt; ) 의 발생 여부를 리턴합니다 . 확실하지 않으면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="61cb912092d39366e8d513e750ef47c902eea956" translate="yes" xml:space="preserve">
          <source>Returns whether a name represents an occurrence of a top-level variable (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarName&quot;&gt;VarName&lt;/a&gt;&lt;/code&gt;), data constructor (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataName&quot;&gt;DataName&lt;/a&gt;&lt;/code&gt;), type constructor, or type class (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:TcClsName&quot;&gt;TcClsName&lt;/a&gt;&lt;/code&gt;). If we can't be sure, it returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이름이 최상위 변수 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarName&quot;&gt;VarName&lt;/a&gt;&lt;/code&gt; ), 데이터 생성자 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataName&quot;&gt;DataName&lt;/a&gt;&lt;/code&gt; ), 유형 생성자 또는 유형 클래스 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:TcClsName&quot;&gt;TcClsName&lt;/a&gt;&lt;/code&gt; ) 의 발생을 나타내는 지 여부를 반환합니다 . 확실하지 않으면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="63c449e339aebf60a5e7a2a8717c0f016029078a" translate="yes" xml:space="preserve">
          <source>Returns whether a name represents an occurrence of a top-level variable (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarName&quot;&gt;VarName&lt;/a&gt;&lt;/code&gt;), data constructor (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataName&quot;&gt;DataName&lt;/a&gt;&lt;/code&gt;), type constructor, or type class (&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:TcClsName&quot;&gt;TcClsName&lt;/a&gt;&lt;/code&gt;). If we can't be sure, it returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이름이 최상위 변수 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:VarName&quot;&gt;VarName&lt;/a&gt;&lt;/code&gt; ), 데이터 생성자 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataName&quot;&gt;DataName&lt;/a&gt;&lt;/code&gt; ), 유형 생성자 또는 유형 클래스 ( &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:TcClsName&quot;&gt;TcClsName&lt;/a&gt;&lt;/code&gt; ) 의 발생을 나타내는 지 여부를 반환합니다 . 확실하지 않으면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d90ebf44e1d20050486666990a89eb47e7944cd8" translate="yes" xml:space="preserve">
          <source>Returns: the array</source>
          <target state="translated">반환 값 : 배열</target>
        </trans-unit>
        <trans-unit id="fc6bdda7ee64a55787373a47d2597422688d9afb" translate="yes" xml:space="preserve">
          <source>Returns: the number of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s actually read, which might be smaller than the number requested if the end of file was reached.</source>
          <target state="translated">반환 값 : 수 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 파일의 마지막에 이르렀을 경우 숫자가 요구보다 작은 수 있습니다 실제로 읽어들.</target>
        </trans-unit>
        <trans-unit id="3367d7371a0b3059b765bd1a6fff1f5ca0ed7d5b" translate="yes" xml:space="preserve">
          <source>Returns: the number of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s actually read, which might be smaller than the number requested if the end of file was reached.</source>
          <target state="translated">반환 값 : 실제로 읽은 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 수. 파일 끝에 도달 한 경우 요청 된 수보다 적을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1296bc5bfca3a490c28bbd60da8212b36f1b8c9" translate="yes" xml:space="preserve">
          <source>Returns: the number of &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;s actually read, which might be smaller than the number requested if the end of file was reached.</source>
          <target state="translated">반환 값 : 실제로 읽은 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 수. 파일 끝에 도달 한 경우 요청 된 수보다 작을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57f9933768794f845d000833d367d5698393211d" translate="yes" xml:space="preserve">
          <source>Reverse</source>
          <target state="translated">Reverse</target>
        </trans-unit>
        <trans-unit id="f1b29d2392f6c1ffa813de793608d1688eec4ffe" translate="yes" xml:space="preserve">
          <source>Reverse all the bits in the argument</source>
          <target state="translated">인수의 모든 비트를 뒤집습니다</target>
        </trans-unit>
        <trans-unit id="fc33d8754555f15068931375920d0f2cef70f740" translate="yes" xml:space="preserve">
          <source>Reverse order of bytes in &lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 에서 바이트의 역순 .</target>
        </trans-unit>
        <trans-unit id="6d38b386d6091de460a03ef14e686f58fb0de4b6" translate="yes" xml:space="preserve">
          <source>Reverse order of bytes in &lt;code&gt;&lt;a href=&quot;data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 에서 바이트의 역순 입니다.</target>
        </trans-unit>
        <trans-unit id="16dcadf031117537b0a4de5e11b84da6506716a2" translate="yes" xml:space="preserve">
          <source>Reverse order of bytes in &lt;code&gt;&lt;a href=&quot;data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 에서 바이트의 역순 입니다.</target>
        </trans-unit>
        <trans-unit id="ce3879028f945cf89094b3c07186ba273e7bd194" translate="yes" xml:space="preserve">
          <source>Reverse order of bytes in &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 에서 바이트의 역순 .</target>
        </trans-unit>
        <trans-unit id="fb6e4e5660d77c6a7ef54a949c5684649ea23a6c" translate="yes" xml:space="preserve">
          <source>Reverse order of bytes in &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 에서 바이트의 역순 입니다.</target>
        </trans-unit>
        <trans-unit id="abd0a331bba34831b2d2e0b4cec13187fdf9f136" translate="yes" xml:space="preserve">
          <source>Reverse order of bytes in &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 에서 바이트의 역순 입니다.</target>
        </trans-unit>
        <trans-unit id="bb3b2b54206d2f7917f68ce4819891c982302258" translate="yes" xml:space="preserve">
          <source>Reverse ordering of &lt;code&gt;&lt;a href=&quot;data-graph#v:topSort&quot;&gt;topSort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-graph#v:topSort&quot;&gt;topSort&lt;/a&gt;&lt;/code&gt; 의 역순 .</target>
        </trans-unit>
        <trans-unit id="64881c5c2a13ba17fc5266eccf9ebcd6df9bcab5" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a 16-bit word.</source>
          <target state="translated">16 비트 워드에서 비트 순서를 반대로합니다.</target>
        </trans-unit>
        <trans-unit id="5dcf236fb13d112d9e19d65d6212210a0b915786" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a 32-bit word.</source>
          <target state="translated">32 비트 워드에서 비트 순서를 반대로합니다.</target>
        </trans-unit>
        <trans-unit id="d5372d7e3fd735f302124857c7f0f70b399ec1ee" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a 64-bit word.</source>
          <target state="translated">64 비트 워드에서 비트 순서를 반대로합니다.</target>
        </trans-unit>
        <trans-unit id="e84305c1c727c89925582024ec2d7b87ab0a27cf" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a 8-bit word.</source>
          <target state="translated">8 비트 워드에서 비트 순서를 반대로합니다.</target>
        </trans-unit>
        <trans-unit id="6bc1049e87c78c4890e903baf69e8135fc10ca5e" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="cba32d1480441f23022442f4dab6baae42fe8759" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="9e01edad93cdb3dcc83afadca7928e1d5b71af81" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="0fbc14d09916a3da668fac2692376c8c936d181b" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="4c11e3199242c4bc82ffdfca9e53dba5695d80eb" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="fb98204d3b532c1bb7df2272e692218701fa2713" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="0ac092db6b3e74e47de74ccaf04cfeade26d9065" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="f88be9676843724d6ce28a9958a6bb74a4bad7ff" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a &lt;code&gt;&lt;a href=&quot;ghc-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 에서 비트 순서를 반대로 합니다.</target>
        </trans-unit>
        <trans-unit id="26d795b526c33a2f012b185f3bbbad1b4ab51f11" translate="yes" xml:space="preserve">
          <source>Reverse the order of the bits in a word.</source>
          <target state="translated">단어의 비트 순서를 반대로합니다.</target>
        </trans-unit>
        <trans-unit id="2207145f56c1086843ae929cdca643dda45296a2" translate="yes" xml:space="preserve">
          <source>Reverse topologically sorted</source>
          <target state="translated">위상 적으로 정렬 된 역순</target>
        </trans-unit>
        <trans-unit id="07d6529269dbe464e3ef2e4bed692608f2ba4898" translate="yes" xml:space="preserve">
          <source>Reverse:</source>
          <target state="translated">Reverse:</target>
        </trans-unit>
        <trans-unit id="804c9c82e579d60fb3841aafb7fee29740cb0259" translate="yes" xml:space="preserve">
          <source>Rewrite rules can be used to get the same effect as a feature present in earlier versions of GHC. For example, suppose that:</source>
          <target state="translated">재 작성 규칙을 사용하여 이전 버전의 GHC에있는 기능과 동일한 효과를 얻을 수 있습니다. 예를 들어,</target>
        </trans-unit>
        <trans-unit id="c83b52d26d0088698518652fdb153807c4de8005" translate="yes" xml:space="preserve">
          <source>Ribbons per line.</source>
          <target state="translated">라인 당 리본.</target>
        </trans-unit>
        <trans-unit id="b3138852bdaf3763d016ac63a5c7c2c3e2c6dacb" translate="yes" xml:space="preserve">
          <source>Right and left shifts by amounts greater than or equal to the width of the type result in a zero result. This is contrary to the behaviour in C, which is undefined; a common interpretation is to truncate the shift count to the width of the type, for example &lt;code&gt;1 &amp;lt;&amp;lt;
  32 == 1&lt;/code&gt; in some C implementations.</source>
          <target state="translated">유형의 너비보다 크거나 같은 양만큼 오른쪽 및 왼쪽으로 이동하면 결과가 0이됩니다. 이것은 정의되지 않은 C의 동작과 반대입니다. 일반적인 해석은 일부 C 구현에서 시프트 수를 유형의 너비 (예 : &lt;code&gt;1 &amp;lt;&amp;lt; 32 == 1&lt;/code&gt; )로 자르는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4405b5d855d35430679b8f5b6802db9d92d20d73" translate="yes" xml:space="preserve">
          <source>Right and left shifts by amounts greater than or equal to the width of the type result in either zero or -1, depending on the sign of the value being shifted. This is contrary to the behaviour in C, which is undefined; a common interpretation is to truncate the shift count to the width of the type, for example &lt;code&gt;1 &amp;lt;&amp;lt; 32
  == 1&lt;/code&gt; in some C implementations.</source>
          <target state="translated">유형의 너비보다 크거나 같은 양만큼 오른쪽 및 왼쪽으로 이동하면 이동되는 값의 부호에 따라 0 또는 -1이됩니다. 이것은 정의되지 않은 C의 동작과 반대입니다. 일반적인 해석은 일부 C 구현에서 시프트 수를 유형의 너비 (예 : &lt;code&gt;1 &amp;lt;&amp;lt; 32 == 1&lt;/code&gt; )로 자르는 것입니다.</target>
        </trans-unit>
        <trans-unit id="2e504a21e956b694360170c2fd28d0e470b89e91" translate="yes" xml:space="preserve">
          <source>Right associative monadic bifold over a structure.</source>
          <target state="translated">구조에 대한 오른쪽 연관 모나 딕 이중.</target>
        </trans-unit>
        <trans-unit id="a9e2aceb009f5c71e7fcab284b8b1b2e1bac0f8d" translate="yes" xml:space="preserve">
          <source>Right identity</source>
          <target state="translated">올바른 정체성</target>
        </trans-unit>
        <trans-unit id="20396e07fc63f679a480f52e947312d23a912a71" translate="yes" xml:space="preserve">
          <source>Right shifts perform sign extension on signed number types; i.e. they fill the top bits with 1 if the &lt;code&gt;x&lt;/code&gt; is negative and with 0 otherwise.</source>
          <target state="translated">오른쪽 시프트는 부호있는 숫자 유형에서 부호 확장을 수행합니다. 즉, &lt;code&gt;x&lt;/code&gt; 가 음수 이면 최상위 비트를 1로 채우고 그렇지 않으면 0으로 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="39a8b324a5636c01dac0b096d9334843dc7b83f3" translate="yes" xml:space="preserve">
          <source>Right-associative fold of a structure, but with strict application of the operator.</source>
          <target state="translated">구조의 오른쪽 연관 접힘, 그러나 연산자의 엄격한 적용.</target>
        </trans-unit>
        <trans-unit id="4e9728c3c7c8dc0c07eef5abc20bb21e0e3b7aa8" translate="yes" xml:space="preserve">
          <source>Right-associative fold of a structure, lazy in the accumulator.</source>
          <target state="translated">누산기에서 게으른 구조의 오른쪽 연관 폴드.</target>
        </trans-unit>
        <trans-unit id="e7d487556c47a2ed2a493781bd0890940ed2d32c" translate="yes" xml:space="preserve">
          <source>Right-associative fold of a structure, strict in the accumulator. This is rarely what you want.</source>
          <target state="translated">누산기에서 엄격한 구조의 오른쪽 연관 폴드. 이것은 거의 당신이 원하는 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="8d786273bc2b4f065cb4111d4369cb2117126e69" translate="yes" xml:space="preserve">
          <source>Right-associative fold of a structure.</source>
          <target state="translated">구조의 오른쪽 연관 접힘.</target>
        </trans-unit>
        <trans-unit id="8fb46b967b84799898af36f08402697233e41725" translate="yes" xml:space="preserve">
          <source>Right-to-left composition</source>
          <target state="translated">오른쪽에서 왼쪽으로 컴포지션</target>
        </trans-unit>
        <trans-unit id="c8d5b70d1daa764c9b36dd6dcba6bbc27215937b" translate="yes" xml:space="preserve">
          <source>Right-to-left composition of Kleisli arrows. &lt;code&gt;(&lt;a href=&quot;control-monad#v:-62--61--62-&quot;&gt;&amp;gt;=&amp;gt;&lt;/a&gt;)&lt;/code&gt;, with the arguments flipped.</source>
          <target state="translated">Kleisli 화살표의 오른쪽에서 왼쪽으로 구성. &lt;code&gt;(&lt;a href=&quot;control-monad#v:-62--61--62-&quot;&gt;&amp;gt;=&amp;gt;&lt;/a&gt;)&lt;/code&gt; , 인수를 뒤집 었습니다.</target>
        </trans-unit>
        <trans-unit id="d18d0622af6613184dce18026185c0b4105c8eac" translate="yes" xml:space="preserve">
          <source>Right-to-left composition of Kleisli arrows. &lt;code&gt;(&lt;a href=&quot;system-directory-internal-prelude#v:-62--61--62-&quot;&gt;&amp;gt;=&amp;gt;&lt;/a&gt;)&lt;/code&gt;, with the arguments flipped.</source>
          <target state="translated">Kleisli 화살표의 오른쪽에서 왼쪽으로 구성. &lt;code&gt;(&lt;a href=&quot;system-directory-internal-prelude#v:-62--61--62-&quot;&gt;&amp;gt;=&amp;gt;&lt;/a&gt;)&lt;/code&gt; , 인수를 뒤집 었습니다.</target>
        </trans-unit>
        <trans-unit id="82305626a22e5a66eda35d5bba0fc29f0d97a54a" translate="yes" xml:space="preserve">
          <source>Right-to-left composition of functors. The composition of applicative functors is always applicative, but the composition of monads is not always a monad.</source>
          <target state="translated">펑터의 좌우 구성. 적용 펑터의 구성은 항상 적용되지만 모나드의 구성이 항상 모나드는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="819514316b4f4b54bdba64481d4287eda6cee587" translate="yes" xml:space="preserve">
          <source>Right-to-left variants</source>
          <target state="translated">오른쪽에서 왼쪽으로 변형</target>
        </trans-unit>
        <trans-unit id="379bbb03c903b2519ed8e7f314173932cc94b5b8" translate="yes" xml:space="preserve">
          <source>RightAssociative</source>
          <target state="translated">RightAssociative</target>
        </trans-unit>
        <trans-unit id="c3f104d1365744b538bfde9f4adb6a6df4b80355" translate="yes" xml:space="preserve">
          <source>Role</source>
          <target state="translated">Role</target>
        </trans-unit>
        <trans-unit id="93627fd1f79919d436b12ffa76a391d7b4747b58" translate="yes" xml:space="preserve">
          <source>Role annotations</source>
          <target state="translated">역할 주석</target>
        </trans-unit>
        <trans-unit id="00a8cc69af800f80142e071f3da079846d26d38d" translate="yes" xml:space="preserve">
          <source>Role annotations are allowed on data, newtype, and class declarations. A role annotation declaration starts with &lt;code&gt;type role&lt;/code&gt; and is followed by one role listing for each parameter of the type. (This parameter count includes parameters implicitly specified by a kind signature in a GADT-style data or newtype declaration.) Each role listing is a role (&lt;code&gt;nominal&lt;/code&gt;, &lt;code&gt;representational&lt;/code&gt;, or &lt;code&gt;phantom&lt;/code&gt;) or a &lt;code&gt;_&lt;/code&gt;. Using a &lt;code&gt;_&lt;/code&gt; says that GHC should infer that role. The role annotation may go anywhere in the same module as the datatype or class definition (much like a value-level type signature). Here are some examples:</source>
          <target state="translated">데이터, 새 유형 및 클래스 선언에 역할 주석이 허용됩니다. 역할 주석 선언은 &lt;code&gt;type role&lt;/code&gt; 시작하고 유형의 각 매개 변수에 대해 하나의 역할 목록이옵니다. (이 매개 변수 수에는 GADT 스타일 데이터 또는 newtype 선언에서 종류 서명으로 암시 적으로 지정된 매개 변수가 포함됩니다.) 각 역할 목록은 역할 ( &lt;code&gt;nominal&lt;/code&gt; , &lt;code&gt;representational&lt;/code&gt; 또는 &lt;code&gt;phantom&lt;/code&gt; ) 또는 &lt;code&gt;_&lt;/code&gt; 입니다. &lt;code&gt;_&lt;/code&gt; 를 사용하면 GHC가 그 역할을 유추해야한다고합니다. 역할 주석은 데이터 유형 또는 클래스 정의와 같은 모듈 내 어디든 갈 수 있습니다 (값 수준 유형 서명과 매우 유사). 여기 몇 가지 예가 있어요.</target>
        </trans-unit>
        <trans-unit id="5d285d0f925d9008464d2638ff6d3c96ed7ef3db" translate="yes" xml:space="preserve">
          <source>Role annotations can also be used should a programmer wish to write a class with a representational (or phantom) role. However, as a class with non-nominal roles can quickly lead to class instance incoherence, it is necessary to also specify &lt;a href=&quot;#extension-IncoherentInstances&quot;&gt;&lt;code&gt;IncoherentInstances&lt;/code&gt;&lt;/a&gt; to allow non-nominal roles for classes.</source>
          <target state="translated">프로그래머가 표현 (또는 팬텀) 역할을 가진 클래스를 작성하려는 경우 역할 주석을 사용할 수도 있습니다. 그러나 &lt;a href=&quot;#extension-IncoherentInstances&quot;&gt; &lt;code&gt;IncoherentInstances&lt;/code&gt; &lt;/a&gt; 역할을 가진 클래스 는 클래스 인스턴스 비 일관성을 신속하게 초래할 수 있으므로 클래스에 대한 비명 목적인 역할을 허용하려면 IncoherentInstances 도 지정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="38e8ac1e0499b4557fdad2cf823f65db3a1a8ebd" translate="yes" xml:space="preserve">
          <source>Role annotations can also be used should a programmer wish to write a class with a representational (or phantom) role. However, as a class with non-nominal roles can quickly lead to class instance incoherence, it is necessary to also specify &lt;a href=&quot;instances#extension-IncoherentInstances&quot;&gt;&lt;code&gt;IncoherentInstances&lt;/code&gt;&lt;/a&gt; to allow non-nominal roles for classes.</source>
          <target state="translated">프로그래머가 표현 (또는 팬텀) 역할을 가진 클래스를 작성하려는 경우 역할 주석을 사용할 수도 있습니다. 그러나 비명 목적 역할을 가진 클래스는 빠르게 클래스 인스턴스 불일치로 이어질 수 있으므로 클래스에 대해 &lt;a href=&quot;instances#extension-IncoherentInstances&quot;&gt; &lt;code&gt;IncoherentInstances&lt;/code&gt; &lt;/a&gt; 목적 역할을 허용하려면 IncoherentInstances 도 지정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="91665aa65139fc62f964b33d2e4f6471f47f8017" translate="yes" xml:space="preserve">
          <source>RoleAnnotations</source>
          <target state="translated">RoleAnnotations</target>
        </trans-unit>
        <trans-unit id="f21d347d37a185e4a4339bde6e6ea3b5624475c5" translate="yes" xml:space="preserve">
          <source>Roles as implemented in GHC are a from a simplified version of the work described in &lt;a href=&quot;http://www.seas.upenn.edu/~sweirich/papers/popl163af-weirich.pdf&quot;&gt;Generative type abstraction and type-level computation&lt;/a&gt;, published at POPL 2011.</source>
          <target state="translated">GHC에 구현 된 역할 은 POPL 2011에 게시 된 &lt;a href=&quot;http://www.seas.upenn.edu/~sweirich/papers/popl163af-weirich.pdf&quot;&gt;Generative type abstraction 및 type-level&lt;/a&gt; calculation에 설명 된 단순화 된 버전의 작업 입니다.</target>
        </trans-unit>
        <trans-unit id="4747c588a3531884b7f0d677c1be629af1fc5f9b" translate="yes" xml:space="preserve">
          <source>Roles as implemented in GHC are a from a simplified version of the work described in &lt;a href=&quot;https://www.seas.upenn.edu/~sweirich/papers/popl163af-weirich.pdf&quot;&gt;Generative type abstraction and type-level computation&lt;/a&gt;, published at POPL 2011.</source>
          <target state="translated">GHC에서 구현 된 역할 은 POPL 2011에 게시 된 &lt;a href=&quot;https://www.seas.upenn.edu/~sweirich/papers/popl163af-weirich.pdf&quot;&gt;Generative type abstraction and type-level&lt;/a&gt; calculation에 설명 된 작업의 단순화 된 버전 에서 가져온 것입니다.</target>
        </trans-unit>
        <trans-unit id="da8cee54f54784065270562bdc1909f6f51fa588" translate="yes" xml:space="preserve">
          <source>Roles lookup</source>
          <target state="translated">역할 조회</target>
        </trans-unit>
        <trans-unit id="c42fd15494a63d8230eaa066b81373c14d4e0d5e" translate="yes" xml:space="preserve">
          <source>Roles of type parameters are subject to the subtyping relation &lt;code&gt;phantom &amp;lt; representational &amp;lt; nominal&lt;/code&gt;: for example, an abstract type with a nominal type parameter can be implemented using a concrete type with a representational type parameter. Merging respects this subtyping relation (e.g., &lt;code&gt;nominal&lt;/code&gt; merged with &lt;code&gt;representational&lt;/code&gt; is &lt;code&gt;representational&lt;/code&gt;.) Roles in signatures default to &lt;code&gt;nominal&lt;/code&gt;, which gives maximum flexibility on the implementor&amp;rsquo;s side. You should only need to give an explicit role annotation if a client of the signature would like to coerce the abstract type in a type parameter (in which case you should specify &lt;code&gt;representational&lt;/code&gt; explicitly.) Unlike regular data types, we do &lt;em&gt;not&lt;/em&gt; assume that abstract data types are representationally injective: if we have &lt;code&gt;Coercible (T a) (T b)&lt;/code&gt;, and &lt;code&gt;T&lt;/code&gt; has role &lt;code&gt;nominal&lt;/code&gt;, this does not imply that &lt;code&gt;a ~ b&lt;/code&gt;.</source>
          <target state="translated">유형 매개 변수의 역할은 서브 타이핑 관계 &lt;code&gt;phantom &amp;lt; representational &amp;lt; nominal&lt;/code&gt; 적용을받습니다 . 예를 들어, 공칭 유형 매개 변수가있는 추상 유형은 표현 유형 매개 변수가있는 구체적 유형을 사용하여 구현할 수 있습니다. 병합은이 서브 타이핑 관계를 존중합니다 (예 : &lt;code&gt;representational&lt;/code&gt; 과 병합 된 &lt;code&gt;nominal&lt;/code&gt; 은 &lt;code&gt;representational&lt;/code&gt; 입니다.) 서명의 역할은 기본적으로 &lt;code&gt;nominal&lt;/code&gt; 으로 설정되어 구현 자 측에서 최대한의 유연성을 제공합니다. 서명의 클라이언트가 형식 매개 변수에서 추상 형식을 강제 변환하려면 명시 적 역할 주석 만 제공하면됩니다 (이 경우 명시 적으로 &lt;code&gt;representational&lt;/code&gt; 을 지정해야 합니다). 일반 데이터 형식과 달리&lt;em&gt;&lt;/em&gt;추상적 인 자료형이 표현 적으로 주입 &lt;em&gt;적이&lt;/em&gt; 라고 가정 &lt;em&gt;하지 말라&lt;/em&gt; . 만약 우리가 &lt;code&gt;Coercible (T a) (T b)&lt;/code&gt; 를 가지고 있고 &lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;nominal&lt;/code&gt; 역할을 한다고해서 &lt;code&gt;a ~ b&lt;/code&gt; 를 의미하는 것은 아니다 .</target>
        </trans-unit>
        <trans-unit id="e4d010e49e5bc26ba3b4b046466c867803ac5947" translate="yes" xml:space="preserve">
          <source>Ross Paterson 2005</source>
          <target state="translated">로스 패터슨 2005</target>
        </trans-unit>
        <trans-unit id="fbd27aa30a95ad22196d6918b13bb431346c5afa" translate="yes" xml:space="preserve">
          <source>Rotate the argument left by the specified number of bits (which must be non-negative).</source>
          <target state="translated">인수를 지정된 비트 수만큼 왼쪽으로 회전하십시오 (음수가 아니어야 함).</target>
        </trans-unit>
        <trans-unit id="0fe016ed8f9eedc521bdd592cfa02ebc0f59c73b" translate="yes" xml:space="preserve">
          <source>Rotate the argument right by the specified number of bits (which must be non-negative).</source>
          <target state="translated">인수를 지정된 비트 수만큼 오른쪽으로 회전하십시오 (음수가 아니어야 함).</target>
        </trans-unit>
        <trans-unit id="58051472c555d154ccb239c9e59fcfb66e67f0f8" translate="yes" xml:space="preserve">
          <source>Rounds towards zero element-wise.</source>
          <target state="translated">요소 단위로 0으로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="03edb479d9c8ffea9100cec4993af1810c9ece09" translate="yes" xml:space="preserve">
          <source>Rounds towards zero.</source>
          <target state="translated">0으로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="f2f05a17720b9a694ea73a1824fc70691d4746ff" translate="yes" xml:space="preserve">
          <source>Rounds towards zero. The behavior is undefined if the second argument is zero.</source>
          <target state="translated">0으로 반올림합니다. 두 번째 인수가 0이면 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2d9b74053b3dfe83bb7d2bee0dc7b331776ee830" translate="yes" xml:space="preserve">
          <source>RoundtripFailure</source>
          <target state="translated">RoundtripFailure</target>
        </trans-unit>
        <trans-unit id="657d849597f2d3e337f76ba58d755750c451b662" translate="yes" xml:space="preserve">
          <source>Routines for testing return values and raising a &lt;code&gt;&lt;a href=&quot;system-io-error#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; exception in case of values indicating an error state.</source>
          <target state="translated">오류 상태를 나타내는 값의 경우 반환 값을 테스트하고 &lt;code&gt;&lt;a href=&quot;system-io-error#v:userError&quot;&gt;userError&lt;/a&gt;&lt;/code&gt; 예외를 발생시키는 루틴 .</target>
        </trans-unit>
        <trans-unit id="d3e3e6f1bc5450d69a98b447fa8c548a9cb4e372" translate="yes" xml:space="preserve">
          <source>RtsTime</source>
          <target state="translated">RtsTime</target>
        </trans-unit>
        <trans-unit id="0d8023bd7802662dab455a02b3efe95a426a8682" translate="yes" xml:space="preserve">
          <source>RuleBndr</source>
          <target state="translated">RuleBndr</target>
        </trans-unit>
        <trans-unit id="1cbe389d3784439eacd168bbf7fba6ca33a912d5" translate="yes" xml:space="preserve">
          <source>RuleBndrQ</source>
          <target state="translated">RuleBndrQ</target>
        </trans-unit>
        <trans-unit id="c8865ebf9014d9f16c2870709b8c48749873fecb" translate="yes" xml:space="preserve">
          <source>RuleMatch</source>
          <target state="translated">RuleMatch</target>
        </trans-unit>
        <trans-unit id="90c48df1c92117b73e9121ba8818c7cd5c1fb3ac" translate="yes" xml:space="preserve">
          <source>Rules are enabled (that is, used during optimisation) by the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; flag. This flag is implied by &lt;a href=&quot;../using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt;, and may be switched off (as usual) by &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fno-enable-rewrite-rules&lt;/code&gt;&lt;/a&gt;. (NB: enabling &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; without &lt;a href=&quot;../using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt; may not do what you expect, though, because without &lt;a href=&quot;../using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt; GHC ignores all optimisation information in interface files; see &lt;a href=&quot;../using-optimisation#ghc-flag--fignore-interface-pragmas&quot;&gt;&lt;code&gt;-fignore-interface-pragmas&lt;/code&gt;&lt;/a&gt;). Note that &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; is an &lt;em&gt;optimisation&lt;/em&gt; flag, and has no effect on parsing or typechecking.</source>
          <target state="translated">규칙은 &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; 플래그에 의해 활성화됩니다 (즉, 최적화 중에 사용됨) . 이 플래그는 &lt;a href=&quot;../using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; &lt;/a&gt; 에 의해 암시되며 &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fno-enable-rewrite-rules&lt;/code&gt; 에&lt;/a&gt; 의해 (평상시처럼) 꺼질 수 있습니다 . (NB : 가능 &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; 없이 &lt;a href=&quot;../using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; 이&lt;/a&gt; 없이 때문에,하지만, 기대하지 않을 수 있습니다 &lt;a href=&quot;../using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; &lt;/a&gt; GHC 인터페이스 파일의 모든 최적화 정보를 무시; 참조 &lt;a href=&quot;../using-optimisation#ghc-flag--fignore-interface-pragmas&quot;&gt; &lt;code&gt;-fignore-interface-pragmas&lt;/code&gt; &lt;/a&gt; ). 참고 &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; 입니다 &lt;em&gt;최적화&lt;/em&gt; 플래그 및 구문 분석 또는 유형 검사에 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9da39d742ef2d2a4bf83cc2ae5fa28649ed94414" translate="yes" xml:space="preserve">
          <source>Rules are enabled (that is, used during optimisation) by the &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; flag. This flag is implied by &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt;, and may be switched off (as usual) by &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fno-enable-rewrite-rules&lt;/code&gt;&lt;/a&gt;. (NB: enabling &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; without &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt; may not do what you expect, though, because without &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt;&lt;code&gt;-O&lt;/code&gt;&lt;/a&gt; GHC ignores all optimisation information in interface files; see &lt;a href=&quot;using-optimisation#ghc-flag--fignore-interface-pragmas&quot;&gt;&lt;code&gt;-fignore-interface-pragmas&lt;/code&gt;&lt;/a&gt;). Note that &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt;&lt;code&gt;-fenable-rewrite-rules&lt;/code&gt;&lt;/a&gt; is an &lt;em&gt;optimisation&lt;/em&gt; flag, and has no effect on parsing or typechecking.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; 플래그에 의해 규칙이 활성화됩니다 (즉, 최적화 중에 사용됨) . 이 플래그는 &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; &lt;/a&gt; 에 의해 암시되며 &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fno-enable-rewrite-rules&lt;/code&gt; 에&lt;/a&gt; 의해 (평소대로) 끌 수 있습니다 . (NB : &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; &lt;/a&gt; 없이 &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; 를 활성화 하면 &lt;a href=&quot;using-optimisation#ghc-flag--O&quot;&gt; &lt;code&gt;-O&lt;/code&gt; &lt;/a&gt; 없이 GHC는 인터페이스 파일의 모든 최적화 정보를 무시 하므로 &lt;a href=&quot;using-optimisation#ghc-flag--fignore-interface-pragmas&quot;&gt; &lt;code&gt;-fignore-interface-pragmas&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 ). 참고 &lt;a href=&quot;#ghc-flag--fenable-rewrite-rules&quot;&gt; &lt;code&gt;-fenable-rewrite-rules&lt;/code&gt; &lt;/a&gt; 입니다 &lt;em&gt;최적화&lt;/em&gt; 플래그 및 구문 분석 또는 유형 검사에 영향을주지 않습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="68d0576090ddc092b61c62fcb447bec42dbb16bb" translate="yes" xml:space="preserve">
          <source>Rules are filtered by the user provided string, a rule is kept if a prefix of its name matches the string. The pass then checks whether any of these rules could apply to the program but which didn&amp;rsquo;t file for some reason. For example, specifying &lt;code&gt;-drule-check=SPEC&lt;/code&gt; will check whether there are any applications which might be subject to a rule created by specialisation.</source>
          <target state="translated">규칙은 사용자가 제공 한 문자열로 필터링되며 이름의 접두사가 문자열과 일치하면 규칙이 유지됩니다. 패스는 이러한 규칙 중 하나라도 프로그램에 적용 할 수 있지만 어떤 이유로 제출하지 않았는지 확인합니다. 예를 들어, &lt;code&gt;-drule-check=SPEC&lt;/code&gt; 을 지정 하면 전문화에 의해 생성 된 규칙이 적용될 수있는 응용 프로그램이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="65a428564569492a930c1aefe68483dbdf61444e" translate="yes" xml:space="preserve">
          <source>Rules are filtered by the user provided string, a rule is kept if a prefix of its name matches the string. The pass then checks whether any of these rules could apply to the program but which didn&amp;rsquo;t fire for some reason. For example, specifying &lt;code&gt;-drule-check=SPEC&lt;/code&gt; will check whether there are any applications which might be subject to a rule created by specialisation.</source>
          <target state="translated">규칙은 사용자가 제공 한 문자열로 필터링되며 이름의 접두사가 문자열과 일치하면 규칙이 유지됩니다. 그런 다음 패스는 이러한 규칙이 프로그램에 적용될 수 있지만 어떤 이유로 실행되지 않았는지 확인합니다. 예를 들어, &lt;code&gt;-drule-check=SPEC&lt;/code&gt; 을 지정 하면 전문화에 의해 생성 된 규칙이 적용될 수있는 응용 프로그램이 있는지 여부를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="961b5bf1e1c0621155da845303a2be9f0abb7f5a" translate="yes" xml:space="preserve">
          <source>Rules are regarded as left-to-right rewrite rules. When GHC finds an expression that is a substitution instance of the LHS of a rule, it replaces the expression by the (appropriately-substituted) RHS. By &amp;ldquo;a substitution instance&amp;rdquo; we mean that the LHS can be made equal to the expression by substituting for the pattern variables.</source>
          <target state="translated">규칙은 왼쪽에서 오른쪽으로 다시 쓰기 규칙으로 간주됩니다. GHC가 규칙의 LHS의 대체 인스턴스 인 표현식을 찾으면 표현식을 (적절하게 대체 된) RHS로 대체합니다. &quot;대체 사례&quot;는 패턴 변수를 대체함으로써 LHS가 표현과 동일하게 될 수 있음을 의미한다.</target>
        </trans-unit>
        <trans-unit id="dccde95933511de1a225f34f6a502e7bd837ebe5" translate="yes" xml:space="preserve">
          <source>Rules support the special phase-control notation &lt;code&gt;[~]&lt;/code&gt;, which means the rule is never active. This feature supports plugins (see &lt;a href=&quot;../extending_ghc#compiler-plugins&quot;&gt;Compiler Plugins&lt;/a&gt;), by making it possible to define a RULE that is never run by GHC, but is nevertheless parsed, typechecked etc, so that it is available to the plugin.</source>
          <target state="translated">규칙은 특별한 단계 제어 표기법 &lt;code&gt;[~]&lt;/code&gt; 을 지원합니다 . 이는 규칙이 활성화되지 않음을 의미합니다. 이 기능은 GHC에서 실행되지 않지만 그럼에도 불구하고 구문 분석, 유형 검사 등을 수행하여 플러그인에서 사용할 수있는 RULE을 정의 할 수 있도록하여 플러그인 ( &lt;a href=&quot;../extending_ghc#compiler-plugins&quot;&gt;컴파일러 플러그인&lt;/a&gt; 참조)을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="4c39950b1b0d3463482d104795f80836cdb36436" translate="yes" xml:space="preserve">
          <source>Rules support the special phase-control notation &lt;code&gt;[~]&lt;/code&gt;, which means the rule is never active. This feature supports plugins (see &lt;a href=&quot;extending_ghc#compiler-plugins&quot;&gt;Compiler Plugins&lt;/a&gt;), by making it possible to define a RULE that is never run by GHC, but is nevertheless parsed, typechecked etc, so that it is available to the plugin.</source>
          <target state="translated">규칙은 특수 위상 제어 표기법 &lt;code&gt;[~]&lt;/code&gt; 을 지원하므로 규칙이 활성화되지 않습니다. 이 기능은 GHC에 의해 실행되지 않지만 구문 분석, 유형 검사 등을 수행하여 플러그인에 사용 가능하도록 RULE을 정의 할 수 있도록하여 플러그인 ( &lt;a href=&quot;extending_ghc#compiler-plugins&quot;&gt;컴파일러 플러그인&lt;/a&gt; 참조)을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="bdfc1a6fd22feff8196d064513b680864dec98f2" translate="yes" xml:space="preserve">
          <source>Run &amp;ldquo;main&amp;rdquo; and here is your output:</source>
          <target state="translated">&quot;main&quot;을 실행하면 다음과 같이 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="f3cc3a22fa881d976320a326aaf28ee13bb7664b" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;main&lt;/code&gt; and here is your output:</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; 을 실행하면 다음 과 같이 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="618d6a6d2a262d48a555a0f6c8bbb7706e465de7" translate="yes" xml:space="preserve">
          <source>Run &lt;strong&gt;hp2ps&lt;/strong&gt; to produce a Postscript file, &lt;code&gt;&lt;em&gt;prog&lt;/em&gt;.ps&lt;/code&gt;. The &lt;strong&gt;hp2ps&lt;/strong&gt; utility is described in detail in &lt;a href=&quot;#hp2ps&quot;&gt;hp2ps &amp;ndash; Rendering heap profiles to PostScript&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;hp2ps&lt;/strong&gt; 를 실행 하여 포스트 스크립트 파일 &lt;code&gt;&lt;em&gt;prog&lt;/em&gt;.ps&lt;/code&gt; 를 생성 하십시오 . &lt;strong&gt;hp2ps의&lt;/strong&gt; 유틸리티에 자세히 설명되어 &lt;a href=&quot;#hp2ps&quot;&gt;hp2ps - 포스트 스크립트에 힙 프로파일을 렌더링&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="911fcf364edf62850e5ffcd07989b1f697e2705e" translate="yes" xml:space="preserve">
          <source>Run GHC using the given frontend plugin. See &lt;a href=&quot;extending_ghc#frontend-plugins&quot;&gt;Frontend plugins&lt;/a&gt; for details.</source>
          <target state="translated">주어진 프론트 엔드 플러그인을 사용하여 GHC를 실행하십시오. 자세한 내용은 &lt;a href=&quot;extending_ghc#frontend-plugins&quot;&gt;프론트 엔드 플러그인&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1d9fd5d82a08b556c1588a84ebc156eb28980feb" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; monad and return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; on failure and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; on success. In both cases any unconsumed input and the number of bytes consumed is returned. In the case of failure, a human-readable error message is included as well.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; 모나드를 실행하고 실패하면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; , 성공하면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 두 경우 모두 소비되지 않은 입력과 소비 된 바이트 수가 반환됩니다. 장애가 발생하면 사람이 읽을 수있는 오류 메시지도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="3b9396e08b478807ee6026a693ef5151770284a6" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; monad and return &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; on failure and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; on success. In both cases any unconsumed input and the number of bytes consumed is returned. In the case of failure, a human-readable error message is included as well.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; 모나드를 실행하고 실패하면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 를, 성공하면 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 두 경우 모두 사용되지 않은 입력과 사용 된 바이트 수가 반환됩니다. 실패한 경우 사람이 읽을 수있는 오류 메시지도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="965d78fe8955ae2faf5a1e6ce0699bff1999fb95" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; monad and return &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; on failure and &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; on success. In both cases any unconsumed input and the number of bytes consumed is returned. In the case of failure, a human-readable error message is included as well.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; 모나드를 실행하고 실패하면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 를, 성공하면 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 두 경우 모두 사용되지 않은 입력과 사용 된 바이트 수가 반환됩니다. 실패한 경우 사람이 읽을 수있는 오류 메시지도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="27d3ff1ab504e0b66e3c2e4a4954f4863febfa6b" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; monad. See &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; for what to do next, like providing input, handling decoder errors and to get the output value. Hint: Use the helper functions &lt;code&gt;&lt;a href=&quot;data-binary-get#v:pushChunk&quot;&gt;pushChunk&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-binary-get#v:pushChunks&quot;&gt;pushChunks&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-binary-get#v:pushEndOfInput&quot;&gt;pushEndOfInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary-get#t:Get&quot;&gt;Get&lt;/a&gt;&lt;/code&gt; 모나드를 실행하십시오 . 입력 제공, 디코더 오류 처리 및 출력 값 가져 오기와 같이 다음에 수행 할 작업 은 &lt;code&gt;&lt;a href=&quot;data-binary-get#t:Decoder&quot;&gt;Decoder&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 . 힌트 : 도우미 함수 &lt;code&gt;&lt;a href=&quot;data-binary-get#v:pushChunk&quot;&gt;pushChunk&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-binary-get#v:pushChunks&quot;&gt;pushChunks&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-binary-get#v:pushEndOfInput&quot;&gt;pushEndOfInput&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4a2047fac4fd63c9345e542f91bc2b20ce025bc7" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; as a side-effect of a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt; ()&lt;/code&gt; action.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt; ()&lt;/code&gt; () 조치 의 부작용으로 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="1d0fb6503860e9e4e489818701f663ad2fa4dee9" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:finalBuildStep&quot;&gt;finalBuildStep&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#v:finalBuildStep&quot;&gt;finalBuildStep&lt;/a&gt;&lt;/code&gt; 으로 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c58dce72981f7f2e5217c160d4f37c4f85c73c2" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9b9c04ff8d5743ab8accbf55491a7aad7010b5f" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; action redirecting the produced output to a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">생성 된 출력을 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 로 리디렉션 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 조치를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc8fd4293947f966432bfc2a91b948b341034c7e" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; action redirecting the produced output to a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">생성 된 출력을 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 로 리디렉션 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 작업을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="8ba4c4d701f272a3441f8b3ca2ed7932ea433eba" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; action redirecting the produced output to a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">생성 된 출력을 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 로 리디렉션 하는 &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 작업을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="335c022c0719fe99fc26bca294484d83c4310f29" translate="yes" xml:space="preserve">
          <source>Run a &lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-builder-internal#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="422e5b221bdc42780f1ab803b6dbf7eac79420db" translate="yes" xml:space="preserve">
          <source>Run a computation with an empty cost-center stack. For example, this is used by the interpreter to run an interpreted computation without the call stack showing that it was invoked from GHC.</source>
          <target state="translated">빈 코스트 센터 스택으로 계산을 실행하십시오. 예를 들어, 이것은 인터프리터가 호출 스택없이 GHC에서 호출되었음을 표시하지 않고 해석 된 계산을 실행하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3c70a9d8ade27baaef498ee1664afa61565ae7f4" translate="yes" xml:space="preserve">
          <source>Run a late specialisation pass</source>
          <target state="translated">늦게 전문화 패스를 실행</target>
        </trans-unit>
        <trans-unit id="183b385d6ba52473e0ecf4163ed478ce4985cea1" translate="yes" xml:space="preserve">
          <source>Run a line-reading application according to the given behavior.</source>
          <target state="translated">주어진 동작에 따라 줄 읽기 응용 프로그램을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="60d245c4cf9cf1eaf81f65dece4def9f6a25a167" translate="yes" xml:space="preserve">
          <source>Run a line-reading application.</source>
          <target state="translated">줄 읽기 응용 프로그램을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a0650ed8b3ae442ea763332ee6780ee7560f7a2a" translate="yes" xml:space="preserve">
          <source>Run a line-reading application. This function should suffice for most applications.</source>
          <target state="translated">줄 읽기 응용 프로그램을 실행하십시오. 이 기능은 대부분의 응용 프로그램에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="c9f5f1c288d3ca39171961b2f4776cbc8b9138f4" translate="yes" xml:space="preserve">
          <source>Run a line-reading application. Uses &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:defaultBehavior&quot;&gt;defaultBehavior&lt;/a&gt;&lt;/code&gt; to determine the interaction behavior.</source>
          <target state="translated">줄 읽기 응용 프로그램을 실행하십시오. 용도는 &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:defaultBehavior&quot;&gt;defaultBehavior&lt;/a&gt;&lt;/code&gt; 상호 작용 행동을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="b5813516b7ad0bf5051f8ec3ab8eff08394d1ff9" translate="yes" xml:space="preserve">
          <source>Run an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action with the given working directory and restore the original working directory afterwards, even if the given action fails due to an exception.</source>
          <target state="translated">주어진 작업 디렉토리 로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 조치를 실행하고 예외로 인해 지정된 조치가 실패하더라도 나중에 원래 작업 디렉토리를 복원하십시오.</target>
        </trans-unit>
        <trans-unit id="8d745de77c3f5aed6a42ab8ac9d92a3dba8a6e5f" translate="yes" xml:space="preserve">
          <source>Run an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action with the given working directory and restore the original working directory afterwards, even if the given action fails due to an exception.</source>
          <target state="translated">예외로 인해 지정된 작업이 실패하더라도 지정된 작업 디렉터리 로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 작업을 실행하고 나중에 원래 작업 디렉터리를 복원합니다.</target>
        </trans-unit>
        <trans-unit id="314e409c1307df8aa6ac1480db723dc1b169f70d" translate="yes" xml:space="preserve">
          <source>Run an &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action with the given working directory and restore the original working directory afterwards, even if the given action fails due to an exception.</source>
          <target state="translated">주어진 작업 디렉터리 로 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 작업을 실행하고 예외로 인해 지정된 작업이 실패하더라도 나중에 원래 작업 디렉터리를 복원합니다.</target>
        </trans-unit>
        <trans-unit id="cd67e6f9b14b5f1b4f390893a28449fb2a210e6d" translate="yes" xml:space="preserve">
          <source>Run an action in the ST monad and return an immutable array of its result paired with whatever else the action returns.</source>
          <target state="translated">ST 모나드에서 조치를 실행하고 조치가 리턴하는 다른 항목과 쌍을 이룬 결과의 불변 배열을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="ad9fc00aef2a60fbe890ead5d0fd3cbc251b9f92" translate="yes" xml:space="preserve">
          <source>Run an action in the ST monad and return an immutable array of its result.</source>
          <target state="translated">ST 모나드에서 조치를 실행하고 결과의 변경 불가능한 배열을 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="cf04cb16de76968e0988894c0c83c851d2dfe827" translate="yes" xml:space="preserve">
          <source>Run an action in the underlying monad, as per &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt;, passing it a runner function which restores the current &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:InputT&quot;&gt;InputT&lt;/a&gt;&lt;/code&gt; context. This can be used in the event that we have some function that takes an action in the underlying monad as an argument (such as &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;hoist&lt;/code&gt;, &lt;code&gt;forkIO&lt;/code&gt;, etc) and we want to compose it with actions in &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:InputT&quot;&gt;InputT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">당 같이 기본 모나드에서 작업을 실행 &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; 그것을 현재 복원 러너 함수 전달 &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:InputT&quot;&gt;InputT&lt;/a&gt;&lt;/code&gt; 의 컨텍스트. 이것은 기본 모나드에서 인자로 액션을 취하는 함수 (예 : &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;hoist&lt;/code&gt; , &lt;code&gt;forkIO&lt;/code&gt; 등)를 가지고 있고 &lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:InputT&quot;&gt;InputT&lt;/a&gt;&lt;/code&gt; 의 액션으로 구성하고 싶을 때 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04ebb7d09f1e8bcafd208fb465bd1c0a97a0f11d" translate="yes" xml:space="preserve">
          <source>Run an action only if an error is thrown in the main action. Unlike &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:onException&quot;&gt;onException&lt;/a&gt;&lt;/code&gt;, this works with every kind of error, not just exceptions. For example, if &lt;code&gt;f&lt;/code&gt; is an &lt;code&gt;&lt;a href=&quot;../mtl-2.2.2/control-monad-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; computation which aborts with a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;, the computation &lt;code&gt;onError f g&lt;/code&gt; will execute &lt;code&gt;g&lt;/code&gt;, while &lt;code&gt;onException f g&lt;/code&gt; will not.</source>
          <target state="translated">기본 작업에서 오류가 발생한 경우에만 작업을 실행합니다. &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:onException&quot;&gt;onException&lt;/a&gt;&lt;/code&gt; 과 달리 이것은 예외뿐만 아니라 모든 종류의 오류와 함께 작동합니다. 예를 들어 &lt;code&gt;f&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 로 중단 되는 &lt;code&gt;&lt;a href=&quot;../mtl-2.2.2/control-monad-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 계산 인 경우 계산 &lt;code&gt;onError f g&lt;/code&gt; 는 &lt;code&gt;g&lt;/code&gt; 를 실행 하지만 &lt;code&gt;onException f g&lt;/code&gt; 는 실행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f76e0042a6386395644739d326a5fb9836d1e921" translate="yes" xml:space="preserve">
          <source>Run an action only if an error is thrown in the main action. Unlike &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:onException&quot;&gt;onException&lt;/a&gt;&lt;/code&gt;, this works with every kind of error, not just exceptions. For example, if &lt;code&gt;f&lt;/code&gt; is an &lt;code&gt;&lt;a href=&quot;../mtl-2.2.2/control-monad-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; computation which aborts with a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;, the computation &lt;code&gt;onError f g&lt;/code&gt; will execute &lt;code&gt;g&lt;/code&gt;, while &lt;code&gt;onException f g&lt;/code&gt; will not.</source>
          <target state="translated">기본 작업에서 오류가 발생한 경우에만 작업을 실행합니다. &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:onException&quot;&gt;onException&lt;/a&gt;&lt;/code&gt; 과 달리 이것은 예외뿐만 아니라 모든 종류의 오류와 함께 작동합니다. 예를 들어 &lt;code&gt;f&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 로 중단 되는 &lt;code&gt;&lt;a href=&quot;../mtl-2.2.2/control-monad-except#t:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; 계산 인 경우 계산 &lt;code&gt;onError f g&lt;/code&gt; 는 &lt;code&gt;g&lt;/code&gt; 를 실행 하지만 &lt;code&gt;onException f g&lt;/code&gt; 는 실행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ff6d9eba1c8d691af1662a412cb04852b7d8c2c0" translate="yes" xml:space="preserve">
          <source>Run an action only if an exception is thrown in the main action. The exception is not caught, simply rethrown.</source>
          <target state="translated">기본 조치에서 예외가 발생한 경우에만 조치를 실행하십시오. 예외는 포착되지 않고 단순히 다시 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a0593a3587d1d52df5e1119e0c36ad372d09c8af" translate="yes" xml:space="preserve">
          <source>Run an additional strictness analysis before simplifier phase ⟨n⟩</source>
          <target state="translated">단순화 단계 beforen⟩ 전에 추가 엄격 성 분석 실행</target>
        </trans-unit>
        <trans-unit id="4bcbd3db63062dfa6231e65999e7f05a00b77dc7" translate="yes" xml:space="preserve">
          <source>Run an additional strictness analysis before simplifier phase ⟨n⟩.</source>
          <target state="translated">단순화 단계 ⟨n⟩ 전에 추가 엄격 성 분석을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="ed07c24b15fb62eced376881f4e6687ddfcb7e32" translate="yes" xml:space="preserve">
          <source>Run demand analysis again, at the end of the simplification pipeline</source>
          <target state="translated">단순화 파이프 라인의 끝에서 수요 분석을 다시 실행</target>
        </trans-unit>
        <trans-unit id="777b64f39eb2cb43ba27899e14df6d6e3da4eaa1" translate="yes" xml:space="preserve">
          <source>Run demand analysis again, at the end of the simplification pipeline. We found some opportunities for discovering strictness that were not visible earlier; and optimisations like &lt;a href=&quot;#ghc-flag--fspec-constr&quot;&gt;&lt;code&gt;-fspec-constr&lt;/code&gt;&lt;/a&gt; can create functions with unused arguments which are eliminated by late demand analysis. Improvements are modest, but so is the cost. See notes on the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/LateDmd&quot;&gt;Trac wiki page&lt;/a&gt;.</source>
          <target state="translated">단순화 파이프 라인의 끝에서 수요 분석을 다시 실행하십시오. 우리는 이전에는 볼 수 없었던 엄격함을 발견 할 기회를 찾았습니다. &lt;a href=&quot;#ghc-flag--fspec-constr&quot;&gt; &lt;code&gt;-fspec-constr&lt;/code&gt; &lt;/a&gt; 과 같은 최적화는 지연된 수요 분석에 의해 제거되는 사용되지 않은 인수로 함수를 작성할 수 있습니다. 개선은 크지 않지만 비용도 있습니다. &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/LateDmd&quot;&gt;Trac 위키 페이지&lt;/a&gt; 에서 메모를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0a23b4ee81b4d7f03a40590113dea015fd463a52" translate="yes" xml:space="preserve">
          <source>Run demand analysis again, at the end of the simplification pipeline. We found some opportunities for discovering strictness that were not visible earlier; and optimisations like &lt;a href=&quot;#ghc-flag--fspec-constr&quot;&gt;&lt;code&gt;-fspec-constr&lt;/code&gt;&lt;/a&gt; can create functions with unused arguments which are eliminated by late demand analysis. Improvements are modest, but so is the cost. See notes on the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/late-dmd&quot;&gt;wiki page&lt;/a&gt;.</source>
          <target state="translated">단순화 파이프 라인이 끝날 때 수요 분석을 다시 실행합니다. 우리는 이전에는 볼 수 없었던 엄격함을 발견 할 수있는 기회를 찾았습니다. &lt;a href=&quot;#ghc-flag--fspec-constr&quot;&gt; &lt;code&gt;-fspec-constr&lt;/code&gt; &lt;/a&gt; 과 같은 최적화 는 늦은 수요 분석에 의해 제거되는 사용되지 않는 인수로 함수를 생성 할 수 있습니다. 개선은 미미하지만 비용도 마찬가지입니다. &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/late-dmd&quot;&gt;위키 페이지&lt;/a&gt; 에서 노트보기 .</target>
        </trans-unit>
        <trans-unit id="14d6eb1f35c6369d6e742b2bcde845dc224c6e2f" translate="yes" xml:space="preserve">
          <source>Run interpreted code (for GHCi, Template Haskell, Quasi-quoting, or Annotations) in a separate process. The interpreter will run in profiling mode if &lt;a href=&quot;profiling#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt; is in effect, and in dynamically-linked mode if &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt;&lt;code&gt;-dynamic&lt;/code&gt;&lt;/a&gt; is in effect.</source>
          <target state="translated">별도의 프로세스에서 해석 된 코드 (GHCi, Template Haskell, Quasi-quoting 또는 Annotations의 경우)를 실행하십시오. &lt;a href=&quot;profiling#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; &lt;/a&gt; 가 유효 하면 인터프리터는 프로파일 링 모드에서 실행되고 &lt;a href=&quot;phases#ghc-flag--dynamic&quot;&gt; &lt;code&gt;-dynamic&lt;/code&gt; &lt;/a&gt; 이 유효 하면 동적 링크 모드 에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="4e3e1f7e6b2e9eebaa7a69a5da07907cfee9fb0e" translate="yes" xml:space="preserve">
          <source>Run interpreted code in a separate process</source>
          <target state="translated">별도의 프로세스에서 해석 된 코드 실행</target>
        </trans-unit>
        <trans-unit id="3eeb7fffd0e79015926b457be36571c62c7df4a7" translate="yes" xml:space="preserve">
          <source>Run it with one of the heap profiling options described below (eg. &lt;a href=&quot;runtime_control#rts-flag--h&quot;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/a&gt; for a basic producer profile). This generates the file &lt;code&gt;&lt;em&gt;prog&lt;/em&gt;.hp&lt;/code&gt;.</source>
          <target state="translated">아래 설명 된 힙 프로파일 링 옵션 중 하나를 사용하여 실행하십시오 (예 : 기본 생산자 프로파일의 경우 &lt;a href=&quot;runtime_control#rts-flag--h&quot;&gt; &lt;code&gt;-h&lt;/code&gt; &lt;/a&gt; ). 그러면 &lt;code&gt;&lt;em&gt;prog&lt;/em&gt;.hp&lt;/code&gt; 파일이 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="0e79dd058cbe769e629170b48754e0d7e7ef07d8" translate="yes" xml:space="preserve">
          <source>Run one action (for example, &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:getInputLine&quot;&gt;getInputLine&lt;/a&gt;&lt;/code&gt;) as part of a session of user interaction.</source>
          <target state="translated">사용자 상호 작용 세션의 일부로 하나의 조치 (예 : &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:getInputLine&quot;&gt;getInputLine&lt;/a&gt;&lt;/code&gt; ) 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="d57fa27be2988f809d9529acab96fbef90c6c352" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;&lt;a href=&quot;data-binary-put#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; monad</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-binary-put#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 모나드 실행</target>
        </trans-unit>
        <trans-unit id="c7822aaa89cafe0ed1b78a1705d18b68fb4f1c6c" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;&lt;a href=&quot;data-binary-put#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; monad with a serialiser</source>
          <target state="translated">시리얼 라이저로 &lt;code&gt;&lt;a href=&quot;data-binary-put#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 모나드 실행</target>
        </trans-unit>
        <trans-unit id="bc12f36a855cd28c296b8970e21c134b404b7bd5" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;&lt;a href=&quot;data-binary-put#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; monad with a serialiser and get its result</source>
          <target state="translated">시리얼 라이저로 &lt;code&gt;&lt;a href=&quot;data-binary-put#t:Put&quot;&gt;Put&lt;/a&gt;&lt;/code&gt; 모나드를 실행 하고 결과를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="15a91ed56f7eda8a762d99a1cbc9c6f9ca392a8e" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation passed as the first argument. If the calling thread is &lt;em&gt;bound&lt;/em&gt;, an unbound thread is created temporarily using &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;runInBoundThread&lt;/code&gt; doesn't finish until the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation finishes.</source>
          <target state="translated">첫 번째 인수로 전달 된 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산을 실행하십시오 . 호출 스레드가 &lt;em&gt;바인드&lt;/em&gt; 되면 바인딩되지 않은 스레드가 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; 를 사용하여 임시로 작성 됩니다. &lt;code&gt;runInBoundThread&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산이 완료 될 때까지 완료되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="39a55d8f298922fc3d80bcb0f67d3a91ca4143e0" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation passed as the first argument. If the calling thread is not &lt;em&gt;bound&lt;/em&gt;, a bound thread is created temporarily. &lt;code&gt;runInBoundThread&lt;/code&gt; doesn't finish until the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation finishes.</source>
          <target state="translated">첫 번째 인수로 전달 된 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산을 실행하십시오 . 호출 스레드가 &lt;em&gt;바인드&lt;/em&gt; 되지 않으면 바인드 스레드가 임시로 작성됩니다. &lt;code&gt;runInBoundThread&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산이 완료 될 때까지 완료되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d1e2537f970c1219bce27f4fde2e232c5e95ff38" translate="yes" xml:space="preserve">
          <source>Run the C pre-processor on Haskell source files</source>
          <target state="translated">Haskell 소스 파일에서 C 전 처리기 실행</target>
        </trans-unit>
        <trans-unit id="2bc40f11b79f2845f13680d5f55ceb53d5b2846e" translate="yes" xml:space="preserve">
          <source>Run the full laziness optimisation (also known as let-floating), which floats let-bindings outside enclosing lambdas, in the hope they will be thereby be computed less often. See &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/float.ps.gz&quot;&gt;Let-floating: moving bindings to give faster programs (ICFP&amp;lsquo;96)&lt;/a&gt;. Full laziness increases sharing, which can lead to increased memory residency.</source>
          <target state="translated">둘러싸는 람다 바깥쪽으로 let-bindings를 띄우는 완전 게으름 최적화 (let-floating이라고도 함)를 실행하면 계산 빈도가 낮아지기를 바랍니다. 참조 &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/float.ps.gz&quot;&gt;하자 - 부동 : 바인딩을 이동하는 빠른 프로그램 (ICFP'96)을 얻었다&lt;/a&gt; . 완전한 게으름은 공유를 증가시켜 메모리 상주를 증가시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ccd1c26409863d293e65d0c896041b206d99caf" translate="yes" xml:space="preserve">
          <source>Run the full laziness optimisation (also known as let-floating), which floats let-bindings outside enclosing lambdas, in the hope they will be thereby be computed less often. See &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/float.ps.gz&quot;&gt;Let-floating: moving bindings to give faster programs (ICFP&amp;rsquo;96)&lt;/a&gt;. Full laziness increases sharing, which can lead to increased memory residency.</source>
          <target state="translated">전체 게으름 최적화 (let-floating이라고도 함)를 실행합니다.이 최적화는 람다를 둘러싸고있는 외부에서 let-bindings를 부동화하여 덜 자주 계산되기를 바랍니다. 참조 &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/papers/float.ps.gz&quot;&gt;하자 - 부동 : 바인딩을 이동하는 빠른 프로그램 (ICFP'96)을 얻었다&lt;/a&gt; . 완전한 게으름은 공유를 증가시켜 메모리 상주를 증가시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cebc7466edc5c643c6fd34b1dee7b3748354f93d" translate="yes" xml:space="preserve">
          <source>Run the given decoder, and only consume its input if it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; is returned, the input will be unconsumed. If the given decoder fails, then so will this function.</source>
          <target state="translated">주어진 디코더를 실행하고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 를 반환하는 경우에만 입력을 소비합니다 . 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 반환되고, 입력이 사용되지 않은 것입니다. 주어진 디코더가 실패하면이 기능도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="48b2335cfe69fde08e5fb7ae064631dea3e3e163" translate="yes" xml:space="preserve">
          <source>Run the given decoder, and only consume its input if it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; is returned, the input will be unconsumed. If the given decoder fails, then so will this function.</source>
          <target state="translated">주어진 디코더를 실행하고 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 반환하는 경우에만 입력을 소비합니다 . 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 반환되고, 입력이 사용되지 않은 것입니다. 주어진 디코더가 실패하면이 기능도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="91db76ec878a21b6ef9305ed216d407c42529d15" translate="yes" xml:space="preserve">
          <source>Run the given decoder, and only consume its input if it returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; is returned, the input will be unconsumed. If the given decoder fails, then so will this function.</source>
          <target state="translated">주어진 디코더를 실행하고 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 를 반환하는 경우에만 입력을 사용합니다 . 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 반환되고, 입력이 사용되지 않은 것입니다. 지정된 디코더가 실패하면이 기능도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="e707bb9c05d4a4e7b7aa2ff317e62a251a1fff57" translate="yes" xml:space="preserve">
          <source>Run the given decoder, and only consume its input if it returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; is returned, the input will be unconsumed. If the given decoder fails, then so will this function.</source>
          <target state="translated">주어진 디코더를 실행하고 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 를 반환하는 경우에만 입력을 사용합니다 . &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 반환 되지 않으면 입력이 사용되지 않습니다. 지정된 디코더가 실패하면이 기능도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="62f7c74c7a4d0d4952e0a486ac0c9296aba74171" translate="yes" xml:space="preserve">
          <source>Run the given decoder, and only consume its input if it returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; is returned, the input will be unconsumed. If the given decoder fails, then so will this function.</source>
          <target state="translated">주어진 디코더를 실행하고 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt; 를 반환하는 경우에만 입력을 사용합니다 . 경우 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt; 반환되고, 입력이 사용되지 않은 것입니다. 지정된 디코더가 실패하면이 기능도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="f142942efdf4b42d2fcd3de7eb2f4538d913637b" translate="yes" xml:space="preserve">
          <source>Run the given decoder, and only consume its input if it returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; is returned, the input will be unconsumed. If the given decoder fails, then so will this function.</source>
          <target state="translated">주어진 디코더를 실행하고 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; 를 반환하는 경우에만 입력을 사용합니다 . &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 반환 되지 않으면 입력이 사용되지 않습니다. 지정된 디코더가 실패하면이 기능도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="4478823b43946bc8c6e78124aa9b1f0d67f43d61" translate="yes" xml:space="preserve">
          <source>Run the given decoder, but without consuming its input. If the given decoder fails, then so will this function.</source>
          <target state="translated">주어진 디코더를 실행하지만 입력을 소비하지 않습니다. 주어진 디코더가 실패하면이 기능도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="dcd41406029e6406480383fb84266bf1348d4497" translate="yes" xml:space="preserve">
          <source>Run the given mod finalizers.</source>
          <target state="translated">주어진 모드 종료자를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="8b176b07be206bdcb95736b2b498d455b027fd1e" translate="yes" xml:space="preserve">
          <source>Run the supplied IO action with an empty CCS. For example, this is used by the interpreter to run an interpreted computation without the call stack showing that it was invoked from GHC.</source>
          <target state="translated">빈 CCS로 제공된 IO 조치를 실행하십시오. 예를 들어, 이것은 인터프리터가 호출 스택없이 GHC에서 호출되었음을 표시하지 않고 해석 된 계산을 실행하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="20832ca6085c4b502e7eebf7e021a540475c97d5" translate="yes" xml:space="preserve">
          <source>RunIO</source>
          <target state="translated">RunIO</target>
        </trans-unit>
        <trans-unit id="95f65dbb3c870989ff905e99797f95da37004464" translate="yes" xml:space="preserve">
          <source>RunTH called &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">RunTH &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d5b14b1de606445983aa168d6bf8a2d6e2d6eeff" translate="yes" xml:space="preserve">
          <source>RunTH called &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">RunTH 호출 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57af8235663169b6139d510156489b353ea30080" translate="yes" xml:space="preserve">
          <source>RunTH called &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">RunTH 호출 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/control-monad-fail#v:fail&quot;&gt;fail&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7c65d9b24c951ddf2a8d49d3996c27df48d47f7" translate="yes" xml:space="preserve">
          <source>RunTH finished successfully; return value follows</source>
          <target state="translated">RunTH가 성공적으로 완료되었습니다. 반환 값은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="55f5d6f3fbc37e8e0ac70b5616ceb4c8cae7da87" translate="yes" xml:space="preserve">
          <source>RunTH threw an exception</source>
          <target state="translated">RunTH에서 예외가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="c7e2ecdf98b9f298685656e1a05e2f96a4be51e5" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;RealWorld&lt;/code&gt; state thread</source>
          <target state="translated">&lt;code&gt;RealWorld&lt;/code&gt; 상태 스레드 실행</target>
        </trans-unit>
        <trans-unit id="110ccc2b82282cf1f137b071c8241407f8dbc74c" translate="yes" xml:space="preserve">
          <source>Running TH splices</source>
          <target state="translated">TH 스플 라이스 실행</target>
        </trans-unit>
        <trans-unit id="5473653cff7c9841a6824eb8ab32656a543592d4" translate="yes" xml:space="preserve">
          <source>Running a custom pre-processor at compile-time is in some settings appropriate and useful. The &lt;code&gt;-F&lt;/code&gt; option lets you run a pre-processor as part of the overall GHC compilation pipeline, which has the advantage over running a Haskell pre-processor separately in that it works in interpreted mode and you can continue to take reap the benefits of GHC&amp;rsquo;s recompilation checker.</source>
          <target state="translated">컴파일 타임에 커스텀 프리 프로세서를 실행하는 것은 일부 설정에서 적절하고 유용합니다. &lt;code&gt;-F&lt;/code&gt; 의 옵션은 당신이 그것을 해석 모드에서 작동하고 GHC의의 혜택을 얻을 계속 취할 수 있다는 점에서 별도로 하스켈 프리 프로세서를 실행을 통해 장점을 가지고 전체 GHC 컴파일 파이프 라인의 일부로서 사전 프로세서를 실행할 수 있습니다 재 컴파일 검사기.</target>
        </trans-unit>
        <trans-unit id="debf34040ba2a5acc7a78a8f0a6722c03bde589c" translate="yes" xml:space="preserve">
          <source>Running a parser</source>
          <target state="translated">파서 실행</target>
        </trans-unit>
        <trans-unit id="60f20d277b623f5c35e48bfd4dc187e65b923ce6" translate="yes" xml:space="preserve">
          <source>Running multiple plugins is also supported, by passing multiple &lt;code&gt;-fplugin=...&lt;/code&gt; options. GHC will load the plugins in the order in which they are specified on the command line and, when appropriate, compose their effects in the same order. That is, if we had two Core plugins, &lt;code&gt;Plugin1&lt;/code&gt; and &lt;code&gt;Plugin2&lt;/code&gt;, each defining an &lt;code&gt;install&lt;/code&gt; function like the one above, then GHC would first run &lt;code&gt;Plugin1.install&lt;/code&gt; on the default &lt;code&gt;[CoreToDo]&lt;/code&gt;, take the result and feed it to &lt;code&gt;Plugin2.install&lt;/code&gt;. &lt;code&gt;-fplugin=Plugin1 -fplugin=Plugin2&lt;/code&gt; will update the Core pipeline by applying &lt;code&gt;Plugin1.install opts1 &amp;gt;=&amp;gt; Plugin2.install opts2&lt;/code&gt; (where &lt;code&gt;opts1&lt;/code&gt; and &lt;code&gt;opts2&lt;/code&gt; are the options passed to each plugin using &lt;code&gt;-fplugin-opt=...&lt;/code&gt;). This is not specific to Core plugins but holds for all the types of plugins that can be composed or sequenced in some way: the first plugin to appear on the GHC command line will always act first.</source>
          <target state="translated">여러 &lt;code&gt;-fplugin=...&lt;/code&gt; 옵션 을 전달하여 여러 플러그인 실행도 지원됩니다 . GHC는 명령 줄에 지정된 순서대로 플러그인을로드하고 적절한 경우 동일한 순서로 효과를 구성합니다. 즉 , 각각 위와 같은 &lt;code&gt;install&lt;/code&gt; 기능을 정의하는 두 개의 Core 플러그인 &lt;code&gt;Plugin1&lt;/code&gt; 및 &lt;code&gt;Plugin2&lt;/code&gt; 가 있는 경우 GHC는 먼저 기본 &lt;code&gt;[CoreToDo]&lt;/code&gt; 에서 &lt;code&gt;Plugin1.install&lt;/code&gt; 을 실행 하고 결과를 &lt;code&gt;Plugin2.install&lt;/code&gt; 공급합니다 . &lt;code&gt;-fplugin=Plugin1 -fplugin=Plugin2&lt;/code&gt; 는 &lt;code&gt;opts1&lt;/code&gt; 및 &lt;code&gt;opts2&lt;/code&gt; 를 적용하여 Core 파이프 라인을 업데이트합니다. &lt;code&gt;Plugin1.install opts1 &amp;gt;=&amp;gt; Plugin2.install opts2&lt;/code&gt; (여기서 &lt;code&gt;-fplugin-opt=...&lt;/code&gt; 를 사용하여 각 플러그인에 전달되는 옵션입니다 . 입니다. 이것은 Core 플러그인에만 국한된 것은 아니지만 어떤 방식 으로든 구성하거나 순서를 지정할 수있는 모든 유형의 플러그인에 적용됩니다. GHC 명령 줄에 나타나는 첫 번째 플러그인이 항상 먼저 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3ea0b855fd4a1f0434152ed3530d89a3c80488bf" translate="yes" xml:space="preserve">
          <source>Running sub-processes</source>
          <target state="translated">하위 프로세스 실행</target>
        </trans-unit>
        <trans-unit id="8a61554b223b5c9fc4ee8fbf79b7a49f7b54226a" translate="yes" xml:space="preserve">
          <source>Running the program generates a file with the &lt;code&gt;.tix&lt;/code&gt; suffix, in this case &lt;code&gt;Recip.tix&lt;/code&gt;, which contains the coverage data for this run of the program. The program may be run multiple times (e.g. with different test data), and the coverage data from the separate runs is accumulated in the &lt;code&gt;.tix&lt;/code&gt; file. To reset the coverage data and start again, just remove the &lt;code&gt;.tix&lt;/code&gt; file. You can control where the &lt;code&gt;.tix&lt;/code&gt; file is generated using the environment variable &lt;a href=&quot;#envvar-HPCTIXFILE&quot; id=&quot;index-9&quot;&gt;&lt;code&gt;HPCTIXFILE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">프로그램을 실행하면 &lt;code&gt;.tix&lt;/code&gt; 접미사가 있는 파일 ( 이 경우 &lt;code&gt;Recip.tix&lt;/code&gt; ) 이 생성 되며 여기에는이 프로그램 실행에 대한 적용 범위 데이터가 포함됩니다. 프로그램은 여러 번 실행될 수 있으며 (예 : 테스트 데이터가 다름) 별도 실행의 적용 범위 데이터는 &lt;code&gt;.tix&lt;/code&gt; 파일에 누적 됩니다. 적용 범위 데이터를 재설정하고 다시 시작하려면 &lt;code&gt;.tix&lt;/code&gt; 파일을 제거 하십시오. 환경 변수 &lt;a href=&quot;#envvar-HPCTIXFILE&quot; id=&quot;index-9&quot;&gt; &lt;code&gt;HPCTIXFILE&lt;/code&gt; 을&lt;/a&gt; 사용하여 &lt;code&gt;.tix&lt;/code&gt; 파일이 생성 되는 위치를 제어 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ebe0179422c905f3cf2c2e60f92ac32bd6424cf7" translate="yes" xml:space="preserve">
          <source>Runs a &lt;code&gt;Reader&lt;/code&gt; and extracts the final value from it. (The inverse of &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-reader#v:reader&quot;&gt;reader&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 를 실행 하고 최종 값을 추출합니다. ( &lt;code&gt;&lt;a href=&quot;../transformers-0.5.6.2/control-monad-trans-reader#v:reader&quot;&gt;reader&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="d81daff38a2e8becbe69003e3d64a0d02582ad64" translate="yes" xml:space="preserve">
          <source>Runs a &lt;code&gt;Reader&lt;/code&gt; and extracts the final value from it. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:reader&quot;&gt;reader&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 를 실행 하고 최종 값을 추출합니다. ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-reader#v:reader&quot;&gt;reader&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="b24f6b665ff90e778b2bc1246990ffb02aedd0ce" translate="yes" xml:space="preserve">
          <source>Runs a &lt;code&gt;Select&lt;/code&gt; computation with a function for evaluating answers to select a particular answer. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-select#v:select&quot;&gt;select&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">특정 답변을 선택하기 위해 답변을 평가하기위한 함수 로 &lt;code&gt;Select&lt;/code&gt; 계산을 실행합니다 . ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-select#v:select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="3ce8221138916a0224e49c3a5cb2e8ca476f8705" translate="yes" xml:space="preserve">
          <source>Runs a &lt;code&gt;SelectT&lt;/code&gt; computation with a function for evaluating answers to select a particular answer. (The inverse of &lt;code&gt;&lt;a href=&quot;control-monad-trans-select#v:select&quot;&gt;select&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">답변을 평가하여 특정 답변을 선택하는 기능 으로 &lt;code&gt;SelectT&lt;/code&gt; 계산을 실행합니다 . ( &lt;code&gt;&lt;a href=&quot;control-monad-trans-select#v:select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; 의 반대 )</target>
        </trans-unit>
        <trans-unit id="9702b4260727983ec3835e361a57f86bf43eb272" translate="yes" xml:space="preserve">
          <source>Runs a command using the shell, and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s that may be used to communicate with the process via its &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; respectively.</source>
          <target state="translated">쉘을 사용하여 명령을 실행하고 각각 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 를 통해 프로세스와 통신하는 데 사용할 수있는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="dc39087668ee73d261d085af5bfa7aaea25ad529" translate="yes" xml:space="preserve">
          <source>Runs a command using the shell, and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s that may be used to communicate with the process via its &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; respectively.</source>
          <target state="translated">셸을 사용하여 명령을 실행하고 각각 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 를 통해 프로세스와 통신하는 데 사용할 수있는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="80a3aa5db5f9b19220f922db252105c09ebe8b23" translate="yes" xml:space="preserve">
          <source>Runs a command using the shell, and returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s that may be used to communicate with the process via its &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; respectively.</source>
          <target state="translated">셸을 사용하여 명령을 실행하고 각각 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 를 통해 프로세스와 통신하는 데 사용할 수있는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e76e6388ca9a52ed94e2a298db04cfe4bd7865ce" translate="yes" xml:space="preserve">
          <source>Runs a command using the shell.</source>
          <target state="translated">쉘을 사용하여 명령을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="7d3eb255b4482ad8e99fec5f8dd54522d3f17add" translate="yes" xml:space="preserve">
          <source>Runs a raw command, and returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s that may be used to communicate with the process via its &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; respectively.</source>
          <target state="translated">raw 명령을 실행하고 각각 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 를 통해 프로세스와 통신하는 데 사용할 수있는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cefa4942e627a2e65d74f7eb4176a1ffe6fffb38" translate="yes" xml:space="preserve">
          <source>Runs a raw command, and returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s that may be used to communicate with the process via its &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; respectively.</source>
          <target state="translated">원시 명령을 실행하고 각각 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 을 통해 프로세스와 통신하는 데 사용할 수있는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5dc8c77ed9c979f1789e47db5d3b0f1acdcd1bdc" translate="yes" xml:space="preserve">
          <source>Runs a raw command, and returns &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s that may be used to communicate with the process via its &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; respectively.</source>
          <target state="translated">원시 명령을 실행하고 각각 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 을 통해 프로세스와 통신하는 데 사용할 수있는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2ac0263c85df97edaad82961ff458ab2a1952c1b" translate="yes" xml:space="preserve">
          <source>Runs a raw command, optionally specifying &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s from which to take the &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; channels for the new process (otherwise these handles are inherited from the current process).</source>
          <target state="translated">새 프로세스에 대해 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 채널 을 가져 오는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 선택적으로 지정하여 원시 명령을 실행합니다 (그렇지 않으면 이러한 핸들은 현재 프로세스에서 상 속됨).</target>
        </trans-unit>
        <trans-unit id="1f6c09d81a04a291610fc12c4731bdc523778432" translate="yes" xml:space="preserve">
          <source>Runs a raw command, optionally specifying &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s from which to take the &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; channels for the new process (otherwise these handles are inherited from the current process).</source>
          <target state="translated">원시 명령을 실행하고 선택적으로 새 프로세스에 대한 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 채널 을 가져올 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 지정 합니다 (그렇지 않으면 이러한 핸들이 현재 프로세스에서 상 속됨).</target>
        </trans-unit>
        <trans-unit id="baae3dfd91e1b73430259a143a21608146c85282" translate="yes" xml:space="preserve">
          <source>Runs a raw command, optionally specifying &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;s from which to take the &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; channels for the new process (otherwise these handles are inherited from the current process).</source>
          <target state="translated">원시 명령을 실행하고 선택적으로 새 프로세스에 대한 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 채널 을 가져올 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 지정 합니다 (그렇지 않으면 이러한 핸들이 현재 프로세스에서 상 속됨).</target>
        </trans-unit>
        <trans-unit id="5cb758bfedb5892b023f8cd504b7def95c728d00" translate="yes" xml:space="preserve">
          <source>Runs a series of sanity checks and lints on the extended interface files that are being written out. These include testing things properties such as variables not occuring outside of their expected scopes.</source>
          <target state="translated">작성중인 확장 인터페이스 파일에서 일련의 상태 점검 및 보푸라기를 실행합니다. 여기에는 예상 범위를 벗어나는 변수와 같은 속성 테스트가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="13e3ae59817862d6e24a80cea25f9d7d70d5c0ab" translate="yes" xml:space="preserve">
          <source>Runs a series of sanity checks and lints on the extended interface files that are being written out. These include testing things properties such as variables not occurring outside of their expected scopes.</source>
          <target state="translated">작성중인 확장 인터페이스 파일에 대해 일련의 온 전성 검사 및 Lint를 실행합니다. 여기에는 예상 범위 밖에서 발생하지 않는 변수와 같은 속성 테스트가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="fd82f504d2d58af05429e9e10aa1f178ddf80204" translate="yes" xml:space="preserve">
          <source>Runs an action with asynchronous exceptions disabled. The action is provided a method for restoring the async. environment to what it was at the &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; call. See &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">비동기 예외가 비활성화 된 작업을 실행합니다. 이 작업에는 비동기를 복원하는 방법이 제공됩니다. &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; 호출 당시의 환경으로 . &lt;a href=&quot;../base-4.14.1.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt; 의 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="764ddd4c68ca6dd931e1972b88a7147fdfa86781" translate="yes" xml:space="preserve">
          <source>Runs an action with asynchronous exceptions disabled. The action is provided a method for restoring the async. environment to what it was at the &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; call. See &lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">비동기 예외가 비활성화 된 작업을 실행합니다. 이 작업에는 비동기를 복원하는 방법이 제공됩니다. &lt;code&gt;&lt;a href=&quot;control-monad-catch#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; 호출 당시의 환경으로 . &lt;a href=&quot;../base-4.15.0.0/control-exception&quot;&gt;Control.Exception&lt;/a&gt; 의 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:mask&quot;&gt;mask&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3fe6084c1a3fd5b43bacc585f14f922412cce042" translate="yes" xml:space="preserve">
          <source>Runs an anonymous &lt;code&gt;&lt;a href=&quot;control-monad-cont#t:Cont&quot;&gt;Cont&lt;/a&gt;&lt;/code&gt; block and extracts value from it with &lt;code&gt;(`runCont` id)&lt;/code&gt;. Here &lt;code&gt;id&lt;/code&gt; is the continuation, passed to the &lt;code&gt;Cont&lt;/code&gt; block.</source>
          <target state="translated">익명 &lt;code&gt;&lt;a href=&quot;control-monad-cont#t:Cont&quot;&gt;Cont&lt;/a&gt;&lt;/code&gt; 블록을 실행하고 &lt;code&gt;(`runCont` id)&lt;/code&gt; 로 값을 추출합니다 . 여기서 &lt;code&gt;id&lt;/code&gt; 는 &lt;code&gt;Cont&lt;/code&gt; 블록으로 전달되는 연속 입니다.</target>
        </trans-unit>
        <trans-unit id="1c2160e3536a24db1fa5c7d6a9b48fc51e2b4654" translate="yes" xml:space="preserve">
          <source>Runs another specialisation pass towards the end of the optimisation pipeline. This can catch specialisation opportunities which arose from the previous specialisation pass or other inlining.</source>
          <target state="translated">최적화 파이프 라인 끝을 향해 다른 전문화 단계를 실행합니다. 이것은 이전의 전문화 과정이나 다른 인라인에서 발생한 전문화 기회를 잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a9d67a12e147a14423a8f285de654f95371aa27" translate="yes" xml:space="preserve">
          <source>Runs the mod finalizers.</source>
          <target state="translated">모드 종료자를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="17c0231a9c26233bc34f91a12eb6403f13a57ed2" translate="yes" xml:space="preserve">
          <source>Runtime statistics</source>
          <target state="translated">런타임 통계</target>
        </trans-unit>
        <trans-unit id="08e8f6f71c9bbd3500f65426030c8c9f591149d5" translate="yes" xml:space="preserve">
          <source>Runtime system name and version.</source>
          <target state="translated">런타임 시스템 이름 및 버전.</target>
        </trans-unit>
        <trans-unit id="7a012dd66b31c20680aae0c2a22bff371d2224bd" translate="yes" xml:space="preserve">
          <source>RuntimeRep</source>
          <target state="translated">RuntimeRep</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="1c12fa511d52194a5681ee8be41a1e398d85f290" translate="yes" xml:space="preserve">
          <source>S1</source>
          <target state="translated">S1</target>
        </trans-unit>
        <trans-unit id="899bf6f720e849dde5d0680c3b936af1ed0ed670" translate="yes" xml:space="preserve">
          <source>SCC</source>
          <target state="translated">SCC</target>
        </trans-unit>
        <trans-unit id="6745b0587785756298faec14a364901bd599fdd1" translate="yes" xml:space="preserve">
          <source>SCC stands for &amp;ldquo;Set Cost Centre&amp;rdquo;. The double quotes can be omitted if &lt;code&gt;name&lt;/code&gt; is a Haskell identifier starting with a lowercase letter, for example:</source>
          <target state="translated">SCC는&amp;ldquo;Set Cost Centre&amp;rdquo;를 의미합니다. &lt;code&gt;name&lt;/code&gt; 이 소문자로 시작하는 Haskell 식별자 인 경우 큰 따옴표를 생략 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f65329558d58550d256c29ddd08aefa1318badd6" translate="yes" xml:space="preserve">
          <source>SECURITY_DESCRIPTOR</source>
          <target state="translated">SECURITY_DESCRIPTOR</target>
        </trans-unit>
        <trans-unit id="7f9a19de07cd8af5c4dcf36abf5107acdd7e5e90" translate="yes" xml:space="preserve">
          <source>SECURITY_DESCRIPTOR_CONTROL</source>
          <target state="translated">SECURITY_DESCRIPTOR_CONTROL</target>
        </trans-unit>
        <trans-unit id="759f1d01aa3aa6eb019eaff57105108a241121c8" translate="yes" xml:space="preserve">
          <source>SECURITY_INFORMATION</source>
          <target state="translated">SECURITY_INFORMATION</target>
        </trans-unit>
        <trans-unit id="3ea6ea5359c3ec5b8c733abed79488b6cffb3f80" translate="yes" xml:space="preserve">
          <source>SHORT</source>
          <target state="translated">SHORT</target>
        </trans-unit>
        <trans-unit id="9c4876c894699d2a14673f8407ae9f51b03fe93b" translate="yes" xml:space="preserve">
          <source>SID</source>
          <target state="translated">SID</target>
        </trans-unit>
        <trans-unit id="7817913a615ba3fb96f9c4017b8bda6cab9a4d1c" translate="yes" xml:space="preserve">
          <source>SIZE_T</source>
          <target state="translated">SIZE_T</target>
        </trans-unit>
        <trans-unit id="a33fb99f39b188826f024829271dfaaae83bcff7" translate="yes" xml:space="preserve">
          <source>SMALL_RECT</source>
          <target state="translated">SMALL_RECT</target>
        </trans-unit>
        <trans-unit id="6a4bc1de8a6c2370dc5e29fab0a79b7d0110167d" translate="yes" xml:space="preserve">
          <source>SPEC</source>
          <target state="translated">SPEC</target>
        </trans-unit>
        <trans-unit id="51dd3a2be39f013fea07f9619118212919b9dc82" translate="yes" xml:space="preserve">
          <source>SPEC2</source>
          <target state="translated">SPEC2</target>
        </trans-unit>
        <trans-unit id="6df63cad9f75b5c64b7535d25c4ff47f6a51cc0d" translate="yes" xml:space="preserve">
          <source>SPLIT</source>
          <target state="translated">SPLIT</target>
        </trans-unit>
        <trans-unit id="6b42bd15d0f3851ba94b9c6f46ece2f62da81d54" translate="yes" xml:space="preserve">
          <source>SSE2 is unconditionally used on x86-64 platforms.</source>
          <target state="translated">SSE2는 x86-64 플랫폼에서 무조건 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="950615819f3a7970b3e5eaf04967ce0a92bb2835" translate="yes" xml:space="preserve">
          <source>ST</source>
          <target state="translated">ST</target>
        </trans-unit>
        <trans-unit id="e5c2bad261297a0753db2fa8888147b037862b4a" translate="yes" xml:space="preserve">
          <source>STArray</source>
          <target state="translated">STArray</target>
        </trans-unit>
        <trans-unit id="c0b3e8442a3ffe44627f4a9836264ede1d95c8cd" translate="yes" xml:space="preserve">
          <source>STG pass sanity checking</source>
          <target state="translated">STG 패스 온 전성 검사</target>
        </trans-unit>
        <trans-unit id="a6a77f4184b5dc9ae0ae578b959c5420076bb090" translate="yes" xml:space="preserve">
          <source>STG representation</source>
          <target state="translated">STG 표현</target>
        </trans-unit>
        <trans-unit id="cec127d634b8483c65675fe331bb988cce390f37" translate="yes" xml:space="preserve">
          <source>STM</source>
          <target state="translated">STM</target>
        </trans-unit>
        <trans-unit id="9066766844f7ae4915ba3de7074af6f2d62f2724" translate="yes" xml:space="preserve">
          <source>STM transactions that do not use &lt;code&gt;&lt;a href=&quot;ghc-conc#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-conc#v:retry&quot;&gt;retry&lt;/a&gt;&lt;/code&gt; 사용하지 않는 STM 트랜잭션</target>
        </trans-unit>
        <trans-unit id="e5a520427dd21587b99c696298b392dd5580f65f" translate="yes" xml:space="preserve">
          <source>STRef</source>
          <target state="translated">STRef</target>
        </trans-unit>
        <trans-unit id="e978eeb54fadf054d78e68edb89b81271ed3f4dd" translate="yes" xml:space="preserve">
          <source>STRefs</source>
          <target state="translated">STRefs</target>
        </trans-unit>
        <trans-unit id="90f5b7ef29126e57f0d1e034cac1ded1fa114c30" translate="yes" xml:space="preserve">
          <source>STRep</source>
          <target state="translated">STRep</target>
        </trans-unit>
        <trans-unit id="16e4def8ced7122c8ea371b85fa1cc9e985f98ab" translate="yes" xml:space="preserve">
          <source>STUArray</source>
          <target state="translated">STUArray</target>
        </trans-unit>
        <trans-unit id="ef9739d368e51997aa5b6a749bd020ce6df5c75d" translate="yes" xml:space="preserve">
          <source>STret</source>
          <target state="translated">STret</target>
        </trans-unit>
        <trans-unit id="9525ae1781bb71fc767a9bab4b6f299ac5cc8c5d" translate="yes" xml:space="preserve">
          <source>Safe</source>
          <target state="translated">Safe</target>
        </trans-unit>
        <trans-unit id="7535c06f3f5a4d0548fb0642ce1d61948347b105" translate="yes" xml:space="preserve">
          <source>Safe API Only.</source>
          <target state="translated">안전한 API 만.</target>
        </trans-unit>
        <trans-unit id="f756f346c9c3c1563af96de59654e6aa5b1dbb24" translate="yes" xml:space="preserve">
          <source>Safe API only of &lt;a href=&quot;data-array-st&quot;&gt;Data.Array.ST&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;data-array-st&quot;&gt;Data.Array.ST의&lt;/a&gt; 안전한 API 만 .</target>
        </trans-unit>
        <trans-unit id="b3d31a46f8a0b8d8beabe9685ebfe7850f5f2245" translate="yes" xml:space="preserve">
          <source>Safe API only of &lt;a href=&quot;data-array-storable&quot;&gt;Data.Array.Storable&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;data-array-storable&quot;&gt;Data.Array.Storable의&lt;/a&gt; 안전한 API 만 .</target>
        </trans-unit>
        <trans-unit id="e2daafb40e6c8d93bbdd4a902b19d52db880bc51" translate="yes" xml:space="preserve">
          <source>Safe API only.</source>
          <target state="translated">안전한 API 만.</target>
        </trans-unit>
        <trans-unit id="c2b4f1c091c04d25018e09e575dd73be9c363a4b" translate="yes" xml:space="preserve">
          <source>Safe Haskell</source>
          <target state="translated">안전 하스켈</target>
        </trans-unit>
        <trans-unit id="e67a69e7e826590a4bb3f189a2199e3523fbaf17" translate="yes" xml:space="preserve">
          <source>Safe Haskell enables a small extension to the usual import syntax of Haskell, adding a &lt;code&gt;safe&lt;/code&gt; keyword:</source>
          <target state="translated">Safe Haskell은 일반적인 Haskell 가져 오기 구문을 약간 확장하여 &lt;code&gt;safe&lt;/code&gt; 키워드를 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="61c09516b28b6110495b29552e9b7bdd6bc15fb3" translate="yes" xml:space="preserve">
          <source>Safe Haskell gives packages a new Boolean property, that of trust. Several new options are available at the GHC command-line to specify the trust property of packages:</source>
          <target state="translated">Safe Haskell은 패키지에 새로운 부울 속성 (신뢰 속성)을 제공합니다. 패키지의 신뢰 속성을 지정하기 위해 GHC 명령 줄에서 몇 가지 새로운 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b786b78a86f23785f5ed0ec33c27ec5ab85e8ccf" translate="yes" xml:space="preserve">
          <source>Safe Haskell has been designed with two use cases in mind:</source>
          <target state="translated">Safe Haskell은 다음 두 가지 사용 사례를 고려하여 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="7f51b5c9d1647923f4ab94e1f294b850fe65601a" translate="yes" xml:space="preserve">
          <source>Safe Haskell introduces the following three language flags:</source>
          <target state="translated">Safe Haskell은 다음 세 가지 언어 플래그를 소개합니다.</target>
        </trans-unit>
        <trans-unit id="dd09bfe0fa2d84cc1187db0f1ff4b4aad99dff27" translate="yes" xml:space="preserve">
          <source>Safe Haskell is an extension to the Haskell language that is implemented in GHC as of version 7.2. It allows for unsafe code to be securely included in a trusted code base by restricting the features of GHC Haskell the code is allowed to use. Put simply, it makes the types of programs trustable.</source>
          <target state="translated">Safe Haskell은 버전 7.2부터 GHC로 구현 된 Haskell 언어의 확장입니다. 이를 통해 GHC Haskell의 기능을 제한하여 안전하지 않은 코드를 신뢰할 수있는 코드 기반에 안전하게 포함 할 수 있습니다. 간단히 말해, 프로그램 유형을 신뢰할 수있게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7c263edc13b21bba8432087d3c5e3665015e0f69" translate="yes" xml:space="preserve">
          <source>Safe Haskell prevents all these attacks. This is done by compiling the RIO module with the &lt;a href=&quot;#extension-Safe&quot;&gt;&lt;code&gt;Safe&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt; flag and compiling &lt;code&gt;Danger&lt;/code&gt; with the &lt;a href=&quot;#extension-Safe&quot;&gt;&lt;code&gt;Safe&lt;/code&gt;&lt;/a&gt; flag. We explain each below.</source>
          <target state="translated">Safe Haskell은 이러한 모든 공격을 방지합니다. 이는 &lt;a href=&quot;#extension-Safe&quot;&gt; &lt;code&gt;Safe&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt; 플래그로 RIO 모듈을 컴파일 하고 &lt;a href=&quot;#extension-Safe&quot;&gt; &lt;code&gt;Safe&lt;/code&gt; &lt;/a&gt; 플래그로 &lt;code&gt;Danger&lt;/code&gt; 을 컴파일하여 수행됩니다 . 아래에 각각 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d6b18ccf751a55eeedf1919de6a02a1a66f79af5" translate="yes" xml:space="preserve">
          <source>Safe Haskell, however, &lt;em&gt;does not offer&lt;/em&gt; compilation safety. During compilation time it is possible for arbitrary processes to be launched, using for example the &lt;a href=&quot;../phases#pre-processor&quot;&gt;custom pre-processor&lt;/a&gt; flag. This can be manipulated to either compromise a user&amp;rsquo;s system at compilation time, or to modify the source code just before compilation to try to alter Safe Haskell flags. This is discussed further in section &lt;a href=&quot;#safe-compilation&quot;&gt;Safe Compilation&lt;/a&gt;.</source>
          <target state="translated">그러나 Safe Haskell &lt;em&gt;은&lt;/em&gt; 컴파일 안전성을 &lt;em&gt;제공하지 않습니다&lt;/em&gt; . 컴파일 시간 동안 &lt;a href=&quot;../phases#pre-processor&quot;&gt;사용자 지정 전 처리기&lt;/a&gt; 플래그를 사용하여 임의의 프로세스를 시작할 수 있습니다 . 이것은 컴파일 시간에 사용자의 시스템을 손상 시키거나 컴파일 직전에 소스 코드를 수정하여 Safe Haskell 플래그를 변경하도록 조작 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;#safe-compilation&quot;&gt;Safe Compilation&lt;/a&gt; 섹션에서 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="b3aeec5ca1980ad741d3ad1d344e12965e713814" translate="yes" xml:space="preserve">
          <source>Safe Haskell, however, &lt;em&gt;does not offer&lt;/em&gt; compilation safety. During compilation time it is possible for arbitrary processes to be launched, using for example the &lt;a href=&quot;phases#pre-processor&quot;&gt;custom pre-processor&lt;/a&gt; flag. This can be manipulated to either compromise a user&amp;rsquo;s system at compilation time, or to modify the source code just before compilation to try to alter Safe Haskell flags. This is discussed further in section &lt;a href=&quot;#safe-compilation&quot;&gt;Safe Compilation&lt;/a&gt;.</source>
          <target state="translated">그러나 Safe Haskell &lt;em&gt;은&lt;/em&gt; 컴파일 안전성을 &lt;em&gt;제공하지 않습니다&lt;/em&gt; . 컴파일 시간 동안 &lt;a href=&quot;phases#pre-processor&quot;&gt;사용자 지정 전 처리기&lt;/a&gt; 플래그를 사용하여 임의의 프로세스를 시작할 수 있습니다 . 컴파일 타임에 사용자 시스템을 손상 시키거나 컴파일 직전에 소스 코드를 수정하여 Safe Haskell 플래그를 변경하도록 조작 할 수 있습니다. 이에 대한 자세한 내용은 &lt;a href=&quot;#safe-compilation&quot;&gt;안전한 컴파일&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7559a2e6feca986de7fcdcc33b5293ce51f1953d" translate="yes" xml:space="preserve">
          <source>Safe coercions</source>
          <target state="translated">안전한 강압</target>
        </trans-unit>
        <trans-unit id="487c71c35953bfc2f56e52fc2926a6b36c72c198" translate="yes" xml:space="preserve">
          <source>Safe coercions between data types.</source>
          <target state="translated">데이터 유형 사이의 안전한 강제.</target>
        </trans-unit>
        <trans-unit id="15321e8ea7eb095fd68c7d2b0920edd30f70ee3f" translate="yes" xml:space="preserve">
          <source>Safe conversion functions</source>
          <target state="translated">안전한 변환 기능</target>
        </trans-unit>
        <trans-unit id="de5976ed065d66227eff9327d19b54162d6c1027" translate="yes" xml:space="preserve">
          <source>Safe-Inferred</source>
          <target state="translated">Safe-Inferred</target>
        </trans-unit>
        <trans-unit id="db6e7e410412f58574f766c3911f49badd42beca" translate="yes" xml:space="preserve">
          <source>Safety</source>
          <target state="translated">Safety</target>
        </trans-unit>
        <trans-unit id="7d347ee88f531b10951954bcba6275794f5522ac" translate="yes" xml:space="preserve">
          <source>Same again, only with a pattern binding:</source>
          <target state="translated">패턴 바인딩을 사용하는 경우에도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="42f54e3d92f1c859e49ab129bf706a1c9c9cab81" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;, but with the arguments interchanged.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 와 동일 하지만 인수가 교환되었습니다.</target>
        </trans-unit>
        <trans-unit id="b0b5e4ab3cff2b44673ef6d4dea093f7b4dfc984" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="c65c594f9b38468c895de45f5ed76cd46d6ec29f" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="8f972204c79e140345242f558fff756977035eef" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="9c6bc0e31c039cc996e63332133a33c423d504c6" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="1f573a703c6961ba94fbaef77183875d6c5cd3a6" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;data-map-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-map-strict#v:difference&quot;&gt;difference&lt;/a&gt;&lt;/code&gt; 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="b3f74cdd5ce7f2024b9dd79782a5c31a10f4ddf9" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;ghc-base#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;, but with the arguments interchanged.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-base#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 와 동일 하지만 인수가 교환되었습니다.</target>
        </trans-unit>
        <trans-unit id="e71b9165ae8f3cbcf5b73c9aa1bad1d9b5f6a9b6" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:indexBigNat-35-&quot;&gt;indexBigNat#&lt;/a&gt; bn 0#&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:indexBigNat-35-&quot;&gt;indexBigNat#&lt;/a&gt; bn 0#&lt;/code&gt; bn 0 # 과 동일</target>
        </trans-unit>
        <trans-unit id="2b6daf2b66f8854291aa22564f2eaa97349e4920" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;ghc-show#v:showLitChar&quot;&gt;showLitChar&lt;/a&gt;&lt;/code&gt;, but for strings It converts the string to a string using Haskell escape conventions for non-printable characters. Does not add double-quotes around the whole thing; the caller should do that. The main difference from showLitChar (apart from the fact that the argument is a string not a list) is that we must escape double-quotes</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-show#v:showLitChar&quot;&gt;showLitChar&lt;/a&gt;&lt;/code&gt; 와 동일 하지만 문자열의 경우 인쇄 할 수없는 문자에 대해 Haskell 이스케이프 규칙을 사용하여 문자열을 문자열로 변환합니다. 전체에 큰 따옴표를 추가하지 않습니다. 발신자가 그렇게해야합니다. showLitChar와의 주요 차이점 (인수가 목록이 아닌 문자열이라는 사실은 제외)은 큰 따옴표를 이스케이프해야한다는 것입니다</target>
        </trans-unit>
        <trans-unit id="30898b69e47931db50d50b02f157bc6df3bd4ce9" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addForeignSource&quot;&gt;addForeignSource&lt;/a&gt;&lt;/code&gt;, but expects to receive a path pointing to the foreign file instead of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; of its contents. Consider using this in conjunction with &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addTempFile&quot;&gt;addTempFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addForeignSource&quot;&gt;addForeignSource&lt;/a&gt;&lt;/code&gt; 와 동일 하지만 내용 의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 대신 외부 파일을 가리키는 경로를 수신해야합니다 . &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addTempFile&quot;&gt;addTempFile&lt;/a&gt;&lt;/code&gt; 과 함께 이것을 사용하는 것을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="0dd41aa353c5cad35016988621972655c6ee09ee" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addForeignSource&quot;&gt;addForeignSource&lt;/a&gt;&lt;/code&gt;, but expects to receive a path pointing to the foreign file instead of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; of its contents. Consider using this in conjunction with &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addTempFile&quot;&gt;addTempFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addForeignSource&quot;&gt;addForeignSource&lt;/a&gt;&lt;/code&gt; 와 동일 하지만 내용 의 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 대신 외부 파일을 가리키는 경로를 수신 할 것으로 예상합니다 . 이것을 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addTempFile&quot;&gt;addTempFile&lt;/a&gt;&lt;/code&gt; 과 함께 사용하는 것을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="00137cf474aa3291fae1d8cb980679602d1d2ed5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addForeignSource&quot;&gt;addForeignSource&lt;/a&gt;&lt;/code&gt;, but expects to receive a path pointing to the foreign file instead of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; of its contents. Consider using this in conjunction with &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addTempFile&quot;&gt;addTempFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addForeignSource&quot;&gt;addForeignSource&lt;/a&gt;&lt;/code&gt; 와 동일 하지만 내용 의 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 대신 외부 파일을 가리키는 경로를 수신 할 것으로 예상합니다 . 이것을 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:addTempFile&quot;&gt;addTempFile&lt;/a&gt;&lt;/code&gt; 과 함께 사용하는 것을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="db447a776588fef1645ee31ea1870e0abb16ba2d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt;, but with the arguments interchanged.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; 와 동일 하지만 인수가 교환되었습니다.</target>
        </trans-unit>
        <trans-unit id="4aa4d6a43b4d65f2e57f90340aedc9abdbfbac32" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:paragraph&quot;&gt;paragraph&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-xhtml-frameset#v:paragraph&quot;&gt;paragraph&lt;/a&gt;&lt;/code&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="8f568cab24dde73b38ef0088da38eb953dfcc1a3" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:paragraph&quot;&gt;paragraph&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-xhtml-strict#v:paragraph&quot;&gt;paragraph&lt;/a&gt;&lt;/code&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="a7b601cf774784717e90b534e29f08f76d19896f" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:paragraph&quot;&gt;paragraph&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-xhtml-transitional#v:paragraph&quot;&gt;paragraph&lt;/a&gt;&lt;/code&gt; 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="259d74b1086bc9c590828600acb6b3fa772be181" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;ignore&lt;/code&gt; but also ignores &lt;code&gt;GHCRTS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ignore&lt;/code&gt; 와 동일 하지만 &lt;code&gt;GHCRTS&lt;/code&gt; 도 무시합니다 .</target>
        </trans-unit>
        <trans-unit id="4651d7eb6692e845dd60cf4b29e508298b8de997" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;text&lt;/code&gt;. Used to be used for Bytestrings.</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt; 와 같습니다 . 바이트 열에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e2891da0f76cce0b60708f9a0abe80a850b0bc91" translate="yes" xml:space="preserve">
          <source>Same as previous item, but also exports all the data constructors for &lt;code&gt;GMap&lt;/code&gt;, namely &lt;code&gt;GMapEither&lt;/code&gt;.</source>
          <target state="translated">같은 이전 항목으로뿐만 아니라 모든 데이터 생성자를 수출 &lt;code&gt;GMap&lt;/code&gt; , 즉 &lt;code&gt;GMapEither&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d00a46d1ceda265f0fed0d1744950e3bd2e387e" translate="yes" xml:space="preserve">
          <source>Same as previous item.</source>
          <target state="translated">이전 항목과 동일</target>
        </trans-unit>
        <trans-unit id="edbc114aaea9352f5c850f9f7038b9b219489025" translate="yes" xml:space="preserve">
          <source>Same as the previous item. Note the &amp;ldquo;&lt;code&gt;type&lt;/code&gt;&amp;rdquo; keyword.</source>
          <target state="translated">이전 항목과 동일합니다. &quot; &lt;code&gt;type&lt;/code&gt; &quot;키워드에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb73a9a1da0c27b0a141302dc0b405c29b6c6b56" translate="yes" xml:space="preserve">
          <source>Same idea, except for instance declarations. For example:</source>
          <target state="translated">인스턴스 선언을 제외하고 동일한 아이디어입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="de41e8b279e79f48a4ce6e3563759979a51de726" translate="yes" xml:space="preserve">
          <source>Sample instance</source>
          <target state="translated">샘플 인스턴스</target>
        </trans-unit>
        <trans-unit id="de2a172486ea001bd4a04b969b6804b8695266a2" translate="yes" xml:space="preserve">
          <source>Satisfies &lt;code&gt;(quot# x y) times# y plus# (rem# x y) == x&lt;/code&gt;.</source>
          <target state="translated">만족 &lt;code&gt;(quot# x y) times# y plus# (rem# x y) == x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="62dc0506f62492cd0477624e00360efb6cf5d5de" translate="yes" xml:space="preserve">
          <source>Satisfies &lt;code&gt;(quotInt# x y) *# y +# (remInt# x y) == x&lt;/code&gt;. The behavior is undefined if the second argument is zero.</source>
          <target state="translated">만족 &lt;code&gt;(quotInt# x y) *# y +# (remInt# x y) == x&lt;/code&gt; . 두 번째 인수가 0이면 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="17063c506b81a46c2eb7716af50cf19d4ed5a6c6" translate="yes" xml:space="preserve">
          <source>Saturday</source>
          <target state="translated">Saturday</target>
        </trans-unit>
        <trans-unit id="a9478dccf725e7e77bb9bdb404a579319bda90bb" translate="yes" xml:space="preserve">
          <source>Saying &lt;code&gt;-ignore-package ⟨pkg⟩&lt;/code&gt; is the same as giving &lt;a href=&quot;#ghc-flag--hide-package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt;&lt;code&gt;-hide-package ⟨pkg⟩&lt;/code&gt;&lt;/a&gt; flags for ⟨pkg⟩ and all the packages that depend on ⟨pkg⟩. Sometimes we don&amp;rsquo;t know ahead of time which packages will be installed that depend on ⟨pkg⟩, which is when the &lt;a href=&quot;#ghc-flag--ignore-package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt;&lt;code&gt;-ignore-package ⟨pkg⟩&lt;/code&gt;&lt;/a&gt; flag can be useful.</source>
          <target state="translated">&lt;code&gt;-ignore-package ⟨pkg⟩&lt;/code&gt; 를 말하는 것은 ⟨pkg⟩ 및 ⟨pkg⟩에 의존하는 모든 패키지에 대해 &lt;a href=&quot;#ghc-flag--hide-package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt; &lt;code&gt;-hide-package ⟨pkg⟩&lt;/code&gt; &lt;/a&gt; 플래그를 제공하는 것과 같습니다. 때때로 우리는 &lt;a href=&quot;#ghc-flag--ignore-package%20%E2%9F%A8pkg%E2%9F%A9&quot;&gt; &lt;code&gt;-ignore-package ⟨pkg⟩&lt;/code&gt; &lt;/a&gt; 플래그가 유용 할 수있는 ⟨pkg depend에 따라 어떤 패키지가 설치 될지 미리 알지 못합니다 .</target>
        </trans-unit>
        <trans-unit id="338131a09df3c89b4b3a6759393cb8cab73f4a09" translate="yes" xml:space="preserve">
          <source>Sc: Symbol, Currency</source>
          <target state="translated">Sc : 기호, 통화</target>
        </trans-unit>
        <trans-unit id="546401c167d48728b944d3dac7bc4865e17a9993" translate="yes" xml:space="preserve">
          <source>Scale by a factor. Note that &lt;code&gt;scaleCalendarDiffDays (-1)&lt;/code&gt; will not perfectly invert a duration, due to variable month lengths.</source>
          <target state="translated">요인에 따라 스케일링합니다. 참고 &lt;code&gt;scaleCalendarDiffDays (-1)&lt;/code&gt; 하지 않습니다 완벽 기간 반전으로 인해 변수 달의 길이에.</target>
        </trans-unit>
        <trans-unit id="c514fa51cd274818822919c3c3118e8271c0700a" translate="yes" xml:space="preserve">
          <source>Scale by a factor. Note that &lt;code&gt;scaleCalendarDiffTime (-1)&lt;/code&gt; will not perfectly invert a duration, due to variable month lengths.</source>
          <target state="translated">요인에 따라 스케일링합니다. 참고 &lt;code&gt;scaleCalendarDiffTime (-1)&lt;/code&gt; 하지 않습니다 완벽 기간 반전으로 인해 변수 달의 길이에.</target>
        </trans-unit>
        <trans-unit id="28cba55d2aadf568463a9e7e645f8c7b1eed5e8b" translate="yes" xml:space="preserve">
          <source>Scan</source>
          <target state="translated">Scan</target>
        </trans-unit>
        <trans-unit id="71faf74908acae0c765880b1aea70a5559c3733d" translate="yes" xml:space="preserve">
          <source>Scans</source>
          <target state="translated">Scans</target>
        </trans-unit>
        <trans-unit id="b1429a72540c69e025c517fcc5b792419c88cd1a" translate="yes" xml:space="preserve">
          <source>Scheduling</source>
          <target state="translated">Scheduling</target>
        </trans-unit>
        <trans-unit id="6faf39f011de9cbf53782c396ae03385893350ef" translate="yes" xml:space="preserve">
          <source>Scheduling may be either pre-emptive or co-operative, depending on the implementation of Concurrent Haskell (see below for information related to specific compilers). In a co-operative system, context switches only occur when you use one of the primitives defined in this module. This means that programs such as:</source>
          <target state="translated">스케줄링은 Concurrent Haskell의 구현에 따라 선제 적이거나 협력적일 수 있습니다 (특정 컴파일러와 관련된 정보는 아래 참조). 협업 시스템에서 컨텍스트 전환은이 모듈에 정의 된 기본 요소 중 하나를 사용하는 경우에만 발생합니다. 이는 다음과 같은 프로그램을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="dccc54d9b157582e483a96946579d9be83fa9db6" translate="yes" xml:space="preserve">
          <source>Scheduling priority</source>
          <target state="translated">스케줄링 우선 순위</target>
        </trans-unit>
        <trans-unit id="5bbd286bc5c8c1f1c865fd99417573a56571d9da" translate="yes" xml:space="preserve">
          <source>Science and Technology 1999-2001</source>
          <target state="translated">과학 기술 1999-2001</target>
        </trans-unit>
        <trans-unit id="22beb4222dc3e5cbee9b467d0b9786f4f3e50125" translate="yes" xml:space="preserve">
          <source>Scientific notation (e.g. &lt;code&gt;2.3e123&lt;/code&gt;).</source>
          <target state="translated">과학적 표기법 (예 : &lt;code&gt;2.3e123&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="75380ef7a817972c15f49b0a28115411b698cf58" translate="yes" xml:space="preserve">
          <source>ScopedTypeVariables</source>
          <target state="translated">ScopedTypeVariables</target>
        </trans-unit>
        <trans-unit id="6c3ba74480874ebe767282d193c80088bceb78f7" translate="yes" xml:space="preserve">
          <source>Scoping: The variables bound by the view pattern are the variables bound by ⟨pat⟩.</source>
          <target state="translated">범위 : 뷰 패턴에 의해 구속되는 변수는 ⟨pat⟩에 의해 구속 된 변수입니다.</target>
        </trans-unit>
        <trans-unit id="0eebf4033ed3e2297458d965e638dd57e37fe477" translate="yes" xml:space="preserve">
          <source>Screen buffer</source>
          <target state="translated">화면 버퍼</target>
        </trans-unit>
        <trans-unit id="156b2b4d9bc708c55fb5b68f1d70e2d191678cf6" translate="yes" xml:space="preserve">
          <source>Scrolling</source>
          <target state="translated">Scrolling</target>
        </trans-unit>
        <trans-unit id="334dcf943f6bb00acd4e042e9bce8b88540c2911" translate="yes" xml:space="preserve">
          <source>Search PATH?</source>
          <target state="translated">PATH 검색?</target>
        </trans-unit>
        <trans-unit id="a127436f7e4ae37e45a1614cfb90e823c1d58a78" translate="yes" xml:space="preserve">
          <source>Search for arbitrary substrings</source>
          <target state="translated">임의의 하위 문자열 검색</target>
        </trans-unit>
        <trans-unit id="12389b6db2d6a15654261b506b03b98a8c4840a8" translate="yes" xml:space="preserve">
          <source>Search for executable files in a list of system-defined locations, which generally includes &lt;code&gt;PATH&lt;/code&gt; and possibly more.</source>
          <target state="translated">일반적으로 &lt;code&gt;PATH&lt;/code&gt; 등이 포함 된 시스템 정의 위치 목록에서 실행 파일을 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="a98c62f49b59f930f47977df6863e5ad4360e7ef" translate="yes" xml:space="preserve">
          <source>Search paths for various application data, as specified by the &lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt;.</source>
          <target state="translated">에 의해 지정된대로, 다양한 응용 프로그램 데이터에 대한 경로를 검색 &lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG 기본 디렉토리 사양&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7ec2a2567b823b14f349f3b42b249b53fc635616" translate="yes" xml:space="preserve">
          <source>Search paths for various application data, as specified by the &lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification에&lt;/a&gt; 지정된대로 다양한 애플리케이션 데이터에 대한 검색 경로 .</target>
        </trans-unit>
        <trans-unit id="e93e1199d58861a512ab27cc34a406b320a884b9" translate="yes" xml:space="preserve">
          <source>Search through a given list of directories for a file that has the given name and satisfies the given predicate and return the path of the first occurrence. The directories are checked in a left-to-right order.</source>
          <target state="translated">주어진 이름을 가진 파일에 대해 주어진 디렉토리 목록을 검색하고 주어진 술어를 만족시키고 첫 번째 발생 경로를 리턴하십시오. 디렉토리는 왼쪽에서 오른쪽 순서로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="71e66c7ed9a4c56bca17f8617c77a3b69ad27a5b" translate="yes" xml:space="preserve">
          <source>Search through the given list of directories for the given file and returns all paths where the given file exists.</source>
          <target state="translated">주어진 파일에 대해 주어진 디렉토리 목록을 검색하여 주어진 파일이 존재하는 모든 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="146f51cc73f2b136886c580f8108ca9198253c2d" translate="yes" xml:space="preserve">
          <source>Search through the given list of directories for the given file.</source>
          <target state="translated">주어진 파일에 대해 주어진 디렉토리 목록을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="450d52d3ef8975d374969138d196d6c1747d2a25" translate="yes" xml:space="preserve">
          <source>Searches</source>
          <target state="translated">Searches</target>
        </trans-unit>
        <trans-unit id="98cc363c0119e35d1c8070755fc4d4c2387aad71" translate="yes" xml:space="preserve">
          <source>Searching</source>
          <target state="translated">Searching</target>
        </trans-unit>
        <trans-unit id="99d17743e74ce54537b8c991a4a30b52cb4d36eb" translate="yes" xml:space="preserve">
          <source>Searching ByteStrings</source>
          <target state="translated">바이트 문자열 검색</target>
        </trans-unit>
        <trans-unit id="a67f0f78137f986e35f6c4d42fd904b4d1ec2b50" translate="yes" xml:space="preserve">
          <source>Searching by equality</source>
          <target state="translated">평등으로 검색</target>
        </trans-unit>
        <trans-unit id="fd334e8959b428cb282a19f2d183762892a2bb5b" translate="yes" xml:space="preserve">
          <source>Searching lists</source>
          <target state="translated">목록 검색</target>
        </trans-unit>
        <trans-unit id="e43759c82dd08f2e272ceeee2ea1b6915d671c48" translate="yes" xml:space="preserve">
          <source>Searching with a predicate</source>
          <target state="translated">술어를 사용하여 검색</target>
        </trans-unit>
        <trans-unit id="2a4bcae654f264daf22579fb462bf0bae302a057" translate="yes" xml:space="preserve">
          <source>Second</source>
          <target state="translated">Second</target>
        </trans-unit>
        <trans-unit id="41aadab64e8c4c09f38d5ce9dba630974c5030fc" translate="yes" xml:space="preserve">
          <source>Second, &lt;code&gt;M&lt;/code&gt; safe imports &lt;code&gt;Buggle&lt;/code&gt;. For this import &lt;code&gt;P&lt;/code&gt;&amp;lsquo;s author takes no responsibility for the safety, instead asking GHC to check whether &lt;code&gt;Buggle&lt;/code&gt; is trusted by &lt;code&gt;C&lt;/code&gt;. Is it?</source>
          <target state="translated">둘째, &lt;code&gt;M&lt;/code&gt; safe 수입 &lt;code&gt;Buggle&lt;/code&gt; . 이 수입품에 대해 &lt;code&gt;P&lt;/code&gt; 의 저자는 안전에 대한 책임을지지 않으며 대신 GHC에게 &lt;code&gt;Buggle&lt;/code&gt; 이 &lt;code&gt;C&lt;/code&gt; 에 의해 신뢰할 수 있는지 확인하도록 요청합니다 . 그렇습니까?</target>
        </trans-unit>
        <trans-unit id="2e928be918c85dcaa47082721f2415da45b64f49" translate="yes" xml:space="preserve">
          <source>Second, &lt;code&gt;M&lt;/code&gt; safe imports &lt;code&gt;Buggle&lt;/code&gt;. For this import &lt;code&gt;P&lt;/code&gt;&amp;rsquo;s author takes no responsibility for the safety, instead asking GHC to check whether &lt;code&gt;Buggle&lt;/code&gt; is trusted by &lt;code&gt;C&lt;/code&gt;. Is it?</source>
          <target state="translated">둘째, &lt;code&gt;M&lt;/code&gt; safe는 &lt;code&gt;Buggle&lt;/code&gt; 을 수입 합니다 . 이 수입에 대해 &lt;code&gt;P&lt;/code&gt; 의 작성자는 안전에 대한 책임을지지 않고 대신 GHC에게 &lt;code&gt;Buggle&lt;/code&gt; 이 &lt;code&gt;C&lt;/code&gt; 에서 신뢰 하는지 확인하도록 요청합니다. . 맞나요?</target>
        </trans-unit>
        <trans-unit id="6c78dcd73014ae61f9a2861d5642f4a3842b7141" translate="yes" xml:space="preserve">
          <source>Secondary field width specifier.</source>
          <target state="translated">보조 필드 너비 지정자</target>
        </trans-unit>
        <trans-unit id="535a8dd9a0bf8f6685407cc23c4fc9b41645994f" translate="yes" xml:space="preserve">
          <source>Secondly, quantified constraints allow for more concise and precise specifications. As an example, consider the MTL type class for monad transformers:</source>
          <target state="translated">둘째, 정량화 된 제약 조건은보다 간결하고 정확한 사양을 허용합니다. 예를 들어 모나드 변압기에 대한 MTL 유형 클래스를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="59f6f8daaa2e8298b150972a1f24b2062e5ac468" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#explicit-namespaces&quot;&gt;Explicit namespaces in import/export&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#explicit-namespaces&quot;&gt;가져 오기 / 내보내기의 명시 적 네임 스페이스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3d2323e785e9fbeead9b84a569915c4adbc461e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#ghci-cmd-:ctags&quot;&gt;&lt;code&gt;:ctags&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:ctags&quot;&gt; &lt;code&gt;:ctags&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c67269b07f4bc963dc25959c7df0f9e713b5e55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#ghci-cmd-:main&quot;&gt;&lt;code&gt;:main&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:main&quot;&gt; &lt;code&gt;:main&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c85401a395f7d969a0e271b5ee0adc2370d964e6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#options-f-compact&quot;&gt;Individual optimisations&lt;/a&gt; for a list of optimisations enabled on level 1 and level 2.</source>
          <target state="translated">레벨 1 및 레벨 2에서 사용 가능한 최적화 목록은 &lt;a href=&quot;#options-f-compact&quot;&gt;개별 최적화&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="952031d44aeabc0d6d835e921383416a26a07b30" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#pts-where&quot;&gt;Where can they occur?&lt;/a&gt; for using partial type signatures in quotations.</source>
          <target state="translated">&lt;a href=&quot;#pts-where&quot;&gt;어디서 발생할 수 있습니까?를&lt;/a&gt; 참조하십시오 . 따옴표로 부분 유형 서명을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="218c2cf2c21ad2b7f56bfd38658bd4e72f80809c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#recursive-and-polymorphic-let-bindings&quot;&gt;Semantics of let bindings with bang patterns&lt;/a&gt; for the detailed semantics.</source>
          <target state="translated">자세한 &lt;a href=&quot;#recursive-and-polymorphic-let-bindings&quot;&gt;의미는 뱅 패턴&lt;/a&gt; 을 사용한 let 바인딩의 의미론을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="45eed7f7734a6bded8533bbaee887d678010db32" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../libraries/base-4.15.0.0/ghc-staticptr#t:IsStatic&quot;&gt;GHC.StaticPtr.IsStatic&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../libraries/base-4.15.0.0/ghc-staticptr#t:IsStatic&quot;&gt;GHC.StaticPtr.IsStatic을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1f2d904d5a6d15342e041470413d0dbc8b15aad" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../libraries/base-4.13.0.0/ghc-staticptr#t:IsStatic&quot;&gt;GHC.StaticPtr.IsStatic&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../libraries/base-4.13.0.0/ghc-staticptr#t:IsStatic&quot;&gt;GHC.StaticPtr.IsStatic을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="544ebcc273d4071b5a34688d769bf8ffe59ed9d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../libraries/base-4.14.1.0/ghc-staticptr#t:IsStatic&quot;&gt;GHC.StaticPtr.IsStatic&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../libraries/base-4.14.1.0/ghc-staticptr#t:IsStatic&quot;&gt;GHC.StaticPtr.IsStatic을&lt;/a&gt; 참조하십시오 . .</target>
        </trans-unit>
        <trans-unit id="cc0b9e966872710b1e51708c686a203eb9661736" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;data-list&quot;&gt;Data.List&lt;/a&gt; for operations on lists.</source>
          <target state="translated">목록에 대한 작업 은 &lt;a href=&quot;data-list&quot;&gt;Data.List&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b103cec5a426d82d1f0f3b305273d3fc5fa5b795" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;data-map-merge-lazy&quot;&gt;Data.Map.Merge.Lazy를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="348d6eee6a1b58b191ea3c36bfa6ce95e893a2a6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;data-map-merge-strict&quot;&gt;Data.Map.Merge.Strict를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3a6fe43ed9f740f6e4129c00a0d02c391632d4e0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;explicit_namespaces#explicit-namespaces&quot;&gt;Explicit namespaces in import/export&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;explicit_namespaces#explicit-namespaces&quot;&gt;가져 오기 / 내보내기의 명시 적 네임 스페이스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cf2183ef5bcefc29fa8fa07b54b7a0fe01eaf8fc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;field_selectors_and_type_applications#field-selectors-and-type-applications&quot;&gt;Field selectors and TypeApplications&lt;/a&gt; for a full description of how the types of top-level field selectors are determined.</source>
          <target state="translated">최상위 필드 선택기 유형이 결정되는 방법에 대한 전체 설명은 &lt;a href=&quot;field_selectors_and_type_applications#field-selectors-and-type-applications&quot;&gt;필드 선택기 및 TypeApplications&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e15ea175220d64e983de65280b7e415868056c4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://i.cs.hku.hk/~bruno//papers/hs2017.pdf&quot;&gt;the paper&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://i.cs.hku.hk/~bruno//papers/hs2017.pdf&quot;&gt;종이를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fc16f292766496887e78f66d0c501279f8608f5d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.w3.org/TR/xhtml1/&quot;&gt;http://www.w3.org/TR/xhtml1/&lt;/a&gt; for more information about XHTML 1.0.</source>
          <target state="translated">XHTML 1.0에 대한 자세한 내용은 &lt;a href=&quot;http://www.w3.org/TR/xhtml1/&quot;&gt;http://www.w3.org/TR/xhtml1/&lt;/a&gt; 을 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="886ede7df1936e301a64ca1c3c96b46bc86dffec" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/14733#comment:6&quot;&gt;Iceland Jack&amp;rsquo;s summary&lt;/a&gt;. The key point is that the bit to the right of the &lt;code&gt;=&amp;gt;&lt;/code&gt; may be headed by a type &lt;em&gt;variable&lt;/em&gt; (&lt;code&gt;c&lt;/code&gt; in this case), rather than a class. It should not be one of the forall&amp;rsquo;d variables, though.</source>
          <target state="translated">&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/14733#comment:6&quot;&gt;Iceland Jack의 요약을&lt;/a&gt; 참조하십시오 . 요점은 &lt;code&gt;=&amp;gt;&lt;/code&gt; 오른쪽의 비트가 클래스가 아닌 유형 &lt;em&gt;변수&lt;/em&gt; ( 이 경우 &lt;code&gt;c&lt;/code&gt; )로 향할 수 있다는 것입니다. 그러나 이것은 가장 중요한 변수 중 하나가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="064de84f526dbd16cfbd26e503de3f36c8f29b17" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/5122&quot;&gt;https://ghc.haskell.org/trac/ghc/ticket/5122&lt;/a&gt; for the origin of the code in this module</source>
          <target state="translated">이 모듈의 코드 출처는 &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/5122&quot;&gt;https://ghc.haskell.org/trac/ghc/ticket/5122&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="451d331a283d1f20b1c366f73288b4312d9b70bf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0229-whitespace-bang-patterns.rst&quot;&gt;GHC Proposal #229&lt;/a&gt; for the precise rules.</source>
          <target state="translated">정확한 규칙 은 &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0229-whitespace-bang-patterns.rst&quot;&gt;GHC 제안 # 229&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3dfa61c2f8834364556f8f505e7b22705febb183" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/haskell/parsec/issues/8&quot;&gt;haskell/parsec#8&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/haskell/parsec/issues/8&quot;&gt;haskell / parsec # 8&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1b7dea437e1272d98dced7d4deb845f55f338ee5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/14733#note_148352&quot;&gt;Iceland Jack&amp;rsquo;s summary&lt;/a&gt;. The key point is that the bit to the right of the &lt;code&gt;=&amp;gt;&lt;/code&gt; may be headed by a type &lt;em&gt;variable&lt;/em&gt; (&lt;code&gt;c&lt;/code&gt; in this case), rather than a class. It should not be one of the forall&amp;rsquo;d variables, though.</source>
          <target state="translated">&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/14733#note_148352&quot;&gt;Iceland Jack의 요약을&lt;/a&gt; 참조하십시오 . 요점은 &lt;code&gt;=&amp;gt;&lt;/code&gt; 오른쪽의 비트가 유형 &lt;em&gt;변수&lt;/em&gt; ( &lt;code&gt;c&lt;/code&gt; 클래스가 아닌 이 경우 )로 향할 수 있다는 것입니다. 그러나 그것은 모든 변수 중 하나가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="3d01fc185a64f8788ef3d9ed26efd5c27fdd74a4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/5122&quot;&gt;https://gitlab.haskell.org/ghc/ghc/issues/5122&lt;/a&gt; for the origin of the code in this module</source>
          <target state="translated">이 모듈의 코드 출처는 &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/5122&quot;&gt;https://gitlab.haskell.org/ghc/ghc/issues/5122&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="a383eedfab30ff8810ffd0f9f2d1fca298054ee6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://prime.haskell.org/wiki/Libraries/Proposals/MonadFail&quot;&gt;https://prime.haskell.org/wiki/Libraries/Proposals/MonadFail&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://prime.haskell.org/wiki/Libraries/Proposals/MonadFail&quot;&gt;https://prime.haskell.org/wiki/Libraries/Proposals/MonadFail&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d6af523ed59a69391f5fa5c878f8a8cfa0e09d84" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.w3.org/TR/xhtml1/&quot;&gt;http://www.w3.org/TR/xhtml1/&lt;/a&gt; for more information about XHTML 1.0.</source>
          <target state="translated">XHTML 1.0에 대한 자세한 내용은 &lt;a href=&quot;https://www.w3.org/TR/xhtml1/&quot;&gt;http://www.w3.org/TR/xhtml1/&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f192387dd8900b1428692526b4d54bc13b90c2d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;language-haskell-th-syntax#infix&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;language-haskell-th-syntax#infix&quot;&gt;Language.Haskell.TH. 구문을&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6499e97d267b7e58d3e433850d6ae54ab7433600" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;partial_type_signatures#pts-where&quot;&gt;Where can they occur?&lt;/a&gt; for using partial type signatures in quotations.</source>
          <target state="translated">&lt;a href=&quot;partial_type_signatures#pts-where&quot;&gt;어디에서 발생할 수 있습니까?를&lt;/a&gt; 참조하십시오 . 따옴표 안에 부분 형식 서명을 사용하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="867f406c1d13a840407c602b6875530e87a5cf57" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;type_families#scoping-class-params&quot;&gt;Scoping of class parameters&lt;/a&gt; for further information.</source>
          <target state="translated">자세한 정보 &lt;a href=&quot;type_families#scoping-class-params&quot;&gt;는 클래스 매개 변수 범위 지정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b803be622c53ea782de38773c465e88dde41c7c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using#modes&quot;&gt;Modes of operation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;using#modes&quot;&gt;작동 모드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7290dc1cd6ef3fed1927cdff57ec8e269bc0cfa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using-concurrent#parallel-compile-options&quot;&gt;Compile-time options for SMP parallelism&lt;/a&gt; for a dicussion on its use.</source>
          <target state="translated">사용에 대한 설명은 &lt;a href=&quot;using-concurrent#parallel-compile-options&quot;&gt;SMP 병렬 처리에&lt;/a&gt; 대한 컴파일 시간 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="03e2306a737db14198fc25aa3524ba1d9104ac8f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;using-concurrent#parallel-compile-options&quot;&gt;Compile-time options for SMP parallelism&lt;/a&gt; for a discussion on its use.</source>
          <target state="translated">사용에 대한 논의 &lt;a href=&quot;using-concurrent#parallel-compile-options&quot;&gt;는 SMP 병렬 처리&lt;/a&gt; 를 위한 컴파일 시간 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="acfe4e766c9030345d7f21a1a81009297543750f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;win32-dlls#ghci-windows&quot;&gt;Running GHCi on Windows&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;win32-dlls#ghci-windows&quot;&gt;Windows에서 GHCi 실행을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e77258de6e014646d7bc2c75986128d049b87e77" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="f2f8183c6b8895104deecc469e863d26d53cf0cd" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="50d08ddee3fbcfe7cd5b7019c242d2a90b387056" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="ec0b4883c065a32c435126c490a4b2f54ad1869c" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; for the generic deriving.</source>
          <target state="translated">일반 파생에 대해서는 &lt;code&gt;&lt;a href=&quot;control-deepseq#v:rnf&quot;&gt;rnf&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7dc5167b59211f4555235a766237a08a49479f4c" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;data-tree#v:unfoldForest&quot;&gt;unfoldForest&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">자세한 내용은 &lt;code&gt;&lt;a href=&quot;data-tree#v:unfoldForest&quot;&gt;unfoldForest&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="80b7b6980434ec4f61f63b797ab275b23f9c9ecc" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;data-tree#v:unfoldTree&quot;&gt;unfoldTree&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">자세한 내용은 &lt;code&gt;&lt;a href=&quot;data-tree#v:unfoldTree&quot;&gt;unfoldTree&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="92bc38145e2678558bfb1ad312ab956bbb332712" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="28714bc9affad760d31bd7893e6648731274081e" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&lt;a href=&quot;system-process#v:RawCommand&quot;&gt;RawCommand&lt;/a&gt;&lt;/code&gt; for precise semantics of the specified &lt;code&gt;FilePath&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;FilePath&lt;/code&gt; 의 정확한 의미는 &lt;code&gt;&lt;a href=&quot;system-process#v:RawCommand&quot;&gt;RawCommand&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d02a20ac57d0e8d781baf120837224dcf49cb430" translate="yes" xml:space="preserve">
          <source>See GHC issue #17760 for more information about the unsoundness behavior that this function can result in.</source>
          <target state="translated">이 함수로 인해 발생할 수있는 불건전 한 동작에 대한 자세한 내용은 GHC 문제 # 17760을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6bc669e6ecb3d6e0ab576ee91eccc170d9e50b8d" translate="yes" xml:space="preserve">
          <source>See GHC.Classes#matching_overloaded_methods_in_rules</source>
          <target state="translated">GHC.Classes # matching_overloaded_methods_in_rules를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e326365b0584b5b9b467460d9f7981dd7976cce5" translate="yes" xml:space="preserve">
          <source>See Microsoft documentation for details, but a module definition file simply lists what entry points you want to export. Here&amp;rsquo;s one that&amp;rsquo;s suitable when building a Haskell COM server DLL:</source>
          <target state="translated">자세한 내용은 Microsoft 설명서를 참조하십시오. 그러나 모듈 정의 파일에는 내보내려는 진입 점 만 나열됩니다. Haskell COM 서버 DLL을 구축 할 때 적합한 것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">또한보십시오</target>
        </trans-unit>
        <trans-unit id="792a116eabc7383cf8c24e606c9b84b1fb2c92cf" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#actions-at-prompt&quot;&gt;I/O actions at the prompt&lt;/a&gt; for how the monad of a computational expression defaults to &lt;code&gt;IO&lt;/code&gt; if possible.</source>
          <target state="translated">계산식의 모나드가 기본적으로 &lt;code&gt;IO&lt;/code&gt; 로 기본 설정되는 방법 &lt;a href=&quot;#actions-at-prompt&quot;&gt;에 대해서는 프롬프트에서 I / O 작업을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f990b2ac161fedd9eed5b94eec33c55861665921" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#ghc-flag--Wmissing-monadfail-instances&quot;&gt;&lt;code&gt;-Wmissing-monadfail-instances&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wmissing-monadfail-instances&quot;&gt; &lt;code&gt;-Wmissing-monadfail-instances&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb98b6ede0fc9c98fa19f5ce8b4b776f013fd76b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#ghc-flag--Wnoncanonical-monadfail-instances&quot;&gt;&lt;code&gt;-Wnoncanonical-monadfail-instances&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--Wnoncanonical-monadfail-instances&quot;&gt; &lt;code&gt;-Wnoncanonical-monadfail-instances&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="47244a3231a9351f80a23391592cdd1f003ae73b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#ghc-flag--pgmwindres%20%E2%9F%A8cmd%E2%9F%A9&quot;&gt;&lt;code&gt;-pgmwindres ⟨cmd⟩&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;#replacing-phases&quot;&gt;Replacing the program for one or more phases&lt;/a&gt;) and &lt;a href=&quot;#ghc-flag--optwindres%20%E2%9F%A8option%E2%9F%A9&quot;&gt;&lt;code&gt;-optwindres ⟨option⟩&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;#forcing-options-through&quot;&gt;Forcing options to a particular phase&lt;/a&gt;).</source>
          <target state="translated">참조 &lt;a href=&quot;#ghc-flag--pgmwindres%20%E2%9F%A8cmd%E2%9F%A9&quot;&gt; &lt;code&gt;-pgmwindres ⟨cmd⟩&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;#replacing-phases&quot;&gt;하나 또는 그 이상의 단계에 대한 프로그램을 교체&lt;/a&gt; 하고) &lt;a href=&quot;#ghc-flag--optwindres%20%E2%9F%A8option%E2%9F%A9&quot;&gt; &lt;code&gt;-optwindres ⟨option⟩&lt;/code&gt; 을&lt;/a&gt; ( &lt;a href=&quot;#forcing-options-through&quot;&gt;특정 단계에 옵션을 강제&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="4647e38c1e7a6b944c94b406914cbd3600fe74e6" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#instance-overlap&quot;&gt;Overlapping instances&lt;/a&gt; for flags that loosen the instance resolution rules.</source>
          <target state="translated">인스턴스 확인 규칙을 완화시키는 플래그에 대해서는 &lt;a href=&quot;#instance-overlap&quot;&gt;인스턴스 겹침을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="68bec63d7198462a9a405bc8b9bfd8eea044f5f1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Libraries/Integer&quot;&gt;GHC Commentary: Libraries/Integer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Libraries/Integer&quot;&gt;GHC Commentary : Libraries / Integer&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="351782363a8c5ac7d4713a5632c30ddf80b39ea2" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7347&quot;&gt;#7347&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7347&quot;&gt;# 7347&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bae01c432460f8f4807fff5321397d8daf2f6631" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7347&quot;&gt;Issue #7347&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/7347&quot;&gt;Issue # 7347&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3bdbd9098e01a83f087eadf85700c50f3f61a6a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/libraries/integer&quot;&gt;GHC Commentary: Libraries/Integer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/libraries/integer&quot;&gt;GHC Commentary : Libraries / Integer&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c593dec67f89b0b8a48390421d4674b799715947" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;data-bits#v:zeroBits&quot;&gt;zeroBits&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bits#v:zeroBits&quot;&gt;zeroBits&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b246c35f93a333d56b43a521850d9d5706bc6244" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubIntOn&quot;&gt;nubIntOn&lt;/a&gt;&lt;/code&gt;, a more widely applicable generalization.</source>
          <target state="translated">보다 널리 적용 가능한 일반화 인 &lt;code&gt;&lt;a href=&quot;data-containers-listutils#v:nubIntOn&quot;&gt;nubIntOn&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac94b04577d6105b486e64aa04c9e8a70f5f371f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/template-haskell-2.16.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; for a useful combinator. The above example could be rewritten using &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/template-haskell-2.16.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; as</source>
          <target state="translated">유용한 결합 자에 대해서는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/template-haskell-2.16.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 . 위의 예는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/template-haskell-2.16.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; 을 사용하여 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a7eaa326d349e30843aed13689b8e2af5c152c9" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; for a useful combinator. The above example could be rewritten using &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; as</source>
          <target state="translated">유용한 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; 를 보려면 dyn 도 참조하십시오 . 위의 예는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/template-haskell-2.15.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; 을 사용하여 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd097cd14c0e35bdb5b898f6ec7aee1387f8cc36" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/template-haskell-2.17.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; for a useful combinator. The above example could be rewritten using &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/template-haskell-2.17.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; as</source>
          <target state="translated">유용한 결합 자에 대해서는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/template-haskell-2.17.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 . 위의 예는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/template-haskell-2.17.0.0/Language-Haskell-TH-Lib.html#v:dyn&quot;&gt;dyn&lt;/a&gt;&lt;/code&gt; 을 사용하여 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77cc8e5b2ed282e5f51037345f1dc397c5c3b6fd" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;#instance-overlap&quot;&gt;rules on overlap&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#instance-overlap&quot;&gt;오버랩 규칙&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0734e5814b7657a0b4d49d2cd0d4b40c67654fb0" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;../using-optimisation#ghc-flag--funbox-strict-fields&quot;&gt;&lt;code&gt;-funbox-strict-fields&lt;/code&gt;&lt;/a&gt; flag, which essentially has the effect of adding &lt;code&gt;{-# UNPACK #-}&lt;/code&gt; to every strict constructor field.</source>
          <target state="translated">기본적 으로 모든 엄격한 생성자 필드에 &lt;code&gt;{-# UNPACK #-}&lt;/code&gt; 을 추가하는 효과가 있는 &lt;a href=&quot;../using-optimisation#ghc-flag--funbox-strict-fields&quot;&gt; &lt;code&gt;-funbox-strict-fields&lt;/code&gt; &lt;/a&gt; 플래그 도 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="00aebdaeda9ba50a4cf396d83d221ba0f9b164bf" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;http://hackage.haskell.org/package/parser-combinators&quot;&gt;parser-combinators&lt;/a&gt; package for additional (and generalised) combinators.</source>
          <target state="translated">추가 (및 일반화 된) 조합기에 대한 &lt;a href=&quot;http://hackage.haskell.org/package/parser-combinators&quot;&gt;구문 분석기 조합&lt;/a&gt; 패키지 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="44adb3d0f3bbc1753332184898268e0024f12f55" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;https://hackage.haskell.org/package/parser-combinators&quot;&gt;parser-combinators&lt;/a&gt; package for additional (and generalised) combinators.</source>
          <target state="translated">추가 (및 일반화 된) 결합 자에 대해서는 &lt;a href=&quot;https://hackage.haskell.org/package/parser-combinators&quot;&gt;parser-combinators&lt;/a&gt; 패키지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="18439f44eba3153bdbcb728626e4cc51ef2aa2ef" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;using-optimisation#ghc-flag--funbox-strict-fields&quot;&gt;&lt;code&gt;-funbox-strict-fields&lt;/code&gt;&lt;/a&gt; flag, which essentially has the effect of adding &lt;code&gt;{-# UNPACK #-}&lt;/code&gt; to every strict constructor field.</source>
          <target state="translated">본질적 으로 모든 엄격한 생성자 필드에 &lt;code&gt;{-# UNPACK #-}&lt;/code&gt; 을 추가하는 효과가 있는 &lt;a href=&quot;using-optimisation#ghc-flag--funbox-strict-fields&quot;&gt; &lt;code&gt;-funbox-strict-fields&lt;/code&gt; &lt;/a&gt; 플래그 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a605b8449779131636ca56735634d351dade9873" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;--version&lt;/code&gt;, &lt;code&gt;--numeric-version&lt;/code&gt;, and &lt;code&gt;--print-libdir&lt;/code&gt; modes in &lt;a href=&quot;#modes&quot;&gt;Modes of operation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#modes&quot;&gt;작동&lt;/a&gt; 모드에서 &lt;code&gt;--help&lt;/code&gt; , &lt;code&gt;--version&lt;/code&gt; , &lt;code&gt;--numeric-version&lt;/code&gt; 및 &lt;code&gt;--print-libdir&lt;/code&gt; 모드를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1f495a5d4ad082f7878b188b1d38f1a6c34c873d" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;-pgmi ⟨cmd⟩&lt;/code&gt; (&lt;a href=&quot;phases#replacing-phases&quot;&gt;Replacing the program for one or more phases&lt;/a&gt;) and &lt;code&gt;-opti ⟨option⟩&lt;/code&gt; (&lt;a href=&quot;phases#forcing-options-through&quot;&gt;Forcing options to a particular phase&lt;/a&gt;) flags.</source>
          <target state="translated">또한 참조 &lt;code&gt;-pgmi ⟨cmd⟩&lt;/code&gt; ( &lt;a href=&quot;phases#replacing-phases&quot;&gt;하나 또는 그 이상의 단계에 대한 프로그램 교체&lt;/a&gt; ) 및 &lt;code&gt;-opti ⟨option⟩&lt;/code&gt; ( &lt;a href=&quot;phases#forcing-options-through&quot;&gt;특정 단계에 옵션을 강제&lt;/a&gt; 플래그).</target>
        </trans-unit>
        <trans-unit id="cdc687b8f290f0c9f5f26bece9cee4f8c5c711e9" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;NOINLINE&lt;/code&gt; (&lt;a href=&quot;#noinline-pragma&quot;&gt;NOINLINE pragma&lt;/a&gt;) and &lt;code&gt;INLINABLE&lt;/code&gt; (&lt;a href=&quot;#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt;) pragmas.</source>
          <target state="translated">&lt;code&gt;NOINLINE&lt;/code&gt; ( &lt;a href=&quot;#noinline-pragma&quot;&gt;NOINLINE pragma&lt;/a&gt; ) 및 &lt;code&gt;INLINABLE&lt;/code&gt; ( &lt;a href=&quot;#inlinable-pragma&quot;&gt;INLINABLE pragma&lt;/a&gt; ) 프라그 마도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d5bd3e029bdf78a3efc7994aa97cf299f92ddbb3" translate="yes" xml:space="preserve">
          <source>See also the function &lt;code&gt;traceStack&lt;/code&gt; in the module &lt;code&gt;Debug.Trace&lt;/code&gt; for another way to view call stacks.</source>
          <target state="translated">또한 함수 참조 &lt;code&gt;traceStack&lt;/code&gt; 모듈에서 &lt;code&gt;Debug.Trace&lt;/code&gt; 를 호출 스택을 볼 수있는 또 다른 방법을.</target>
        </trans-unit>
        <trans-unit id="cb6db37620dbcc1339dd7c9ee105029b4650573c" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:maybePeek&quot;&gt;maybePeek&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">참고 : &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:maybePeek&quot;&gt;maybePeek&lt;/a&gt;&lt;/code&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="8b3b279d8e2b97e201733853f5f17667d054456c" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:maybeWith&quot;&gt;maybeWith&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">참고 : &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-marshal-utils#v:maybeWith&quot;&gt;maybeWith&lt;/a&gt;&lt;/code&gt; 함수 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d2371d388d228011e90799af207212df8e7540d" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:maybePeek&quot;&gt;maybePeek&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">참조 : &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:maybePeek&quot;&gt;maybePeek&lt;/a&gt;&lt;/code&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="7254155fcdbc15e25c816d055a1da93b5da0ad67" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:maybeWith&quot;&gt;maybeWith&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">참조 : &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-marshal-utils#v:maybeWith&quot;&gt;maybeWith&lt;/a&gt;&lt;/code&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="fcb1a162f50889555af4685d1e76b574034e10cd" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&lt;a href=&quot;../base/foreign-marshal-utils#v:maybePeek&quot;&gt;maybePeek&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">참조 : &lt;code&gt;&lt;a href=&quot;../base/foreign-marshal-utils#v:maybePeek&quot;&gt;maybePeek&lt;/a&gt;&lt;/code&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="e26edec8001f446bfa5c3f8c48b16cf566a589ff" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&lt;a href=&quot;../base/foreign-marshal-utils#v:maybeWith&quot;&gt;maybeWith&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">참조 : &lt;code&gt;&lt;a href=&quot;../base/foreign-marshal-utils#v:maybeWith&quot;&gt;maybeWith&lt;/a&gt;&lt;/code&gt; 함수.</target>
        </trans-unit>
        <trans-unit id="29b443ed246b867336cd161ca8d820cc0d6bc9bc" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt;, which can remove an existing &lt;em&gt;file&lt;/em&gt; symbolic link.</source>
          <target state="translated">기존 &lt;em&gt;파일&lt;/em&gt; 심볼릭 링크를 제거 할 수있는 &lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="69335fcf6cfea5a3406385f338964fc25094e818" translate="yes" xml:space="preserve">
          <source>See description of &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:exportIntegerToMutableByteArray&quot;&gt;exportIntegerToMutableByteArray&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:exportIntegerToMutableByteArray&quot;&gt;exportIntegerToMutableByteArray&lt;/a&gt;&lt;/code&gt; 에 대한 설명 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="054a62d1694599bebea7a0ec77ba51ad0757eb80" translate="yes" xml:space="preserve">
          <source>See description of &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:importIntegerFromByteArray&quot;&gt;importIntegerFromByteArray&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#v:importIntegerFromByteArray&quot;&gt;importIntegerFromByteArray&lt;/a&gt;&lt;/code&gt; 에 대한 설명 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="abb414eb9521a6f2ecf3bd6ec8247dec4954debc" translate="yes" xml:space="preserve">
          <source>See examples in &lt;a href=&quot;control-monad-reader&quot;&gt;Control.Monad.Reader&lt;/a&gt;. Note, the partially applied function type &lt;code&gt;(-&amp;gt;) r&lt;/code&gt; is a simple reader monad. See the &lt;code&gt;instance&lt;/code&gt; declaration below.</source>
          <target state="translated">&lt;a href=&quot;control-monad-reader&quot;&gt;Control.Monad.Reader의&lt;/a&gt; 예제를 참조하십시오 . 부분적으로 적용되는 함수 유형 &lt;code&gt;(-&amp;gt;) r&lt;/code&gt; 은 간단한 리더 모나드입니다. 아래의 &lt;code&gt;instance&lt;/code&gt; 선언을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9639b57ad9c93125c26e7276738fa7285d5924f0" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/PatternSynonyms&quot;&gt;Wiki page&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/PatternSynonyms&quot;&gt;Wiki 페이지&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6ce8c8e6374d9bf56b2187c6495df5d99fdb1bdb" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/pattern-synonyms&quot;&gt;Wiki page&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/pattern-synonyms&quot;&gt;Wiki 페이지&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d756583aed3555a5a65eb4cd9d152d5b8bc07cc4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx&quot;&gt;Windows documentation&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx&quot;&gt;Windows 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b9368a6baa608e351b34f0f4bb3e3b50caa6b7ad" translate="yes" xml:space="preserve">
          <source>See the GHC user's guide for more information on pattern synonyms and their types: &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-synonyms&quot;&gt;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-synonyms&lt;/a&gt;.</source>
          <target state="translated">: 패턴 동의어 및 해당 유형에 대한 자세한 내용은 GHC 사용자 설명서를 참조하십시오 &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-synonyms&quot;&gt;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-synonyms&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="686cb337448a33c7768588af6b116f588bb1690b" translate="yes" xml:space="preserve">
          <source>See the note about efficiency at &lt;code&gt;&lt;a href=&quot;data-sequence#v:unzipWith&quot;&gt;unzipWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-sequence#v:unzipWith&quot;&gt;unzipWith&lt;/a&gt;&lt;/code&gt; 의 효율성에 대한 참고 사항을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="497dea2253a9763272c1d3ca91776ece14a847f1" translate="yes" xml:space="preserve">
          <source>See:</source>
          <target state="translated">See:</target>
        </trans-unit>
        <trans-unit id="d21835f29f64932ec50984ab5a7348670e80bfa2" translate="yes" xml:space="preserve">
          <source>SeekFromEnd</source>
          <target state="translated">SeekFromEnd</target>
        </trans-unit>
        <trans-unit id="c3b12b56a9fcafcaa59c660bef173a584ff8d094" translate="yes" xml:space="preserve">
          <source>SeekMode</source>
          <target state="translated">SeekMode</target>
        </trans-unit>
        <trans-unit id="08f7bb09909c995355ec3ded63e7d52066ec605d" translate="yes" xml:space="preserve">
          <source>Seeking</source>
          <target state="translated">Seeking</target>
        </trans-unit>
        <trans-unit id="191e7912fbdc95ca4ac43e8850c406317d9b8a3b" translate="yes" xml:space="preserve">
          <source>Segments in this sense are related to &lt;em&gt;strongly-connected components&lt;/em&gt; analysis, with the exception that bindings in a segment cannot be reordered and must be contiguous.</source>
          <target state="translated">이러한 의미 의 세그먼트는 세그먼트의 바인딩이 재정렬 될 수없고 연속적이어야한다는 점을 제외하고는 &lt;em&gt;강하게 연결된 컴포넌트&lt;/em&gt; 분석 과 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8598222918d3c6e513d63060cf55e2971ded729a" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">Select</target>
        </trans-unit>
        <trans-unit id="9ceed8562d4a3b2f05d5c2a988f33289c14848dd" translate="yes" xml:space="preserve">
          <source>Select binary mode (&lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;) or text mode (&lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;) on a open handle. (See also &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">열린 핸들에서 이진 모드 ( &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ) 또는 텍스트 모드 ( &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; )를 선택하십시오 . &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebfdbf32e897189b70b5437b726826c8e100dc90" translate="yes" xml:space="preserve">
          <source>Select binary mode (&lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;) or text mode (&lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;) on a open handle. (See also &lt;code&gt;&lt;a href=&quot;ghc-io-stdhandles#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">열린 핸들에서 이진 모드 ( &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ) 또는 텍스트 모드 ( &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; )를 선택합니다. ( &lt;code&gt;&lt;a href=&quot;ghc-io-stdhandles#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="53acb5d741db274cf9b515c4a37f2572d3437616" translate="yes" xml:space="preserve">
          <source>Select binary mode (&lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;) or text mode (&lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;) on a open handle. (See also &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">열린 핸들에서 이진 모드 ( &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; ) 또는 텍스트 모드 ( &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; )를 선택하십시오 . &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6563b60a85f0dd6dabcd9fbc69c9585048457c9" translate="yes" xml:space="preserve">
          <source>Select the function to use for printing evaluated expressions in GHCi</source>
          <target state="translated">GHCi에서 평가 된 표현식을 인쇄하는 데 사용할 함수를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="533e53a4ab3af0eff06d0968b1f9088632ec4912" translate="yes" xml:space="preserve">
          <source>SelectT</source>
          <target state="translated">SelectT</target>
        </trans-unit>
        <trans-unit id="3d6d281a753285e78d85aed3cd7b15d753ca8438" translate="yes" xml:space="preserve">
          <source>Selection monad transformer, modelling search algorithms.</source>
          <target state="translated">선택 모나드 변압기, 모델링 검색 알고리즘.</target>
        </trans-unit>
        <trans-unit id="e2fdfe0ef20a653e062f7f1ccf475abbd234ff40" translate="yes" xml:space="preserve">
          <source>Selection monad transformer.</source>
          <target state="translated">선택 모나드 변압기.</target>
        </trans-unit>
        <trans-unit id="43b0c2cc2f6ddf409049775ebfb86327940fecd3" translate="yes" xml:space="preserve">
          <source>Selection monad.</source>
          <target state="translated">선택 모나드.</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="a1991427effecf62e13936bf676a6fbfc4333be9" translate="yes" xml:space="preserve">
          <source>Selector function to extract the field from the record.</source>
          <target state="translated">레코드에서 필드를 추출하는 선택기 기능.</target>
        </trans-unit>
        <trans-unit id="78bdbb0db01f35bd6a638a54894b23a56fff7305" translate="yes" xml:space="preserve">
          <source>Selects ASCII digits, i.e. &lt;code&gt;'0'&lt;/code&gt;..&lt;code&gt;'9'&lt;/code&gt;.</source>
          <target state="translated">ASCII 숫자를 선택합니다 (예 : &lt;code&gt;'0'&lt;/code&gt; .. &lt;code&gt;'9'&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="d3b7e6e3d385a486c8480045875a98e2d81e2088" translate="yes" xml:space="preserve">
          <source>Selects ASCII hexadecimal digits, i.e. &lt;code&gt;'0'&lt;/code&gt;..&lt;code&gt;'9'&lt;/code&gt;, &lt;code&gt;'a'&lt;/code&gt;..&lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'A'&lt;/code&gt;..&lt;code&gt;'F'&lt;/code&gt;.</source>
          <target state="translated">ASCII 16 진수 (예 : &lt;code&gt;'0'&lt;/code&gt; .. &lt;code&gt;'9'&lt;/code&gt; , &lt;code&gt;'a'&lt;/code&gt; .. &lt;code&gt;'f'&lt;/code&gt; , &lt;code&gt;'A'&lt;/code&gt; .. &lt;code&gt;'F'&lt;/code&gt; )를 선택 합니다.</target>
        </trans-unit>
        <trans-unit id="3f19f72dddfd78fe0e7633807c00077ccf746375" translate="yes" xml:space="preserve">
          <source>Selects ASCII lower-case letters, i.e. characters satisfying both &lt;code&gt;&lt;a href=&quot;data-char#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-char#v:isLower&quot;&gt;isLower&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ASCII 소문자, 즉 &lt;code&gt;&lt;a href=&quot;data-char#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-char#v:isLower&quot;&gt;isLower&lt;/a&gt;&lt;/code&gt; 를 모두 만족시키는 문자를 선택합니다 .</target>
        </trans-unit>
        <trans-unit id="f3bdb7623d79b25c9608fb58d82339cdd31e7ac2" translate="yes" xml:space="preserve">
          <source>Selects ASCII lower-case letters, i.e. characters satisfying both &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isLower&quot;&gt;isLower&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ASCII 소문자, 즉 &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isLower&quot;&gt;isLower&lt;/a&gt;&lt;/code&gt; 를 모두 만족시키는 문자를 선택합니다 .</target>
        </trans-unit>
        <trans-unit id="addb8a785afa33a3dd84101eedebd7a5fd002260" translate="yes" xml:space="preserve">
          <source>Selects ASCII octal digits, i.e. &lt;code&gt;'0'&lt;/code&gt;..&lt;code&gt;'7'&lt;/code&gt;.</source>
          <target state="translated">ASCII 8 진수를 선택합니다 (예 : &lt;code&gt;'0'&lt;/code&gt; .. &lt;code&gt;'7'&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="6733d15ea36ff652cead4012951bc3d30ea249a9" translate="yes" xml:space="preserve">
          <source>Selects ASCII upper-case letters, i.e. characters satisfying both &lt;code&gt;&lt;a href=&quot;data-char#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-char#v:isUpper&quot;&gt;isUpper&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ASCII 대문자, 즉 &lt;code&gt;&lt;a href=&quot;data-char#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-char#v:isUpper&quot;&gt;isUpper&lt;/a&gt;&lt;/code&gt; 를 모두 만족시키는 문자를 선택합니다 .</target>
        </trans-unit>
        <trans-unit id="f609e16b1b7b0dad162a1675e8998ff584c4afb8" translate="yes" xml:space="preserve">
          <source>Selects ASCII upper-case letters, i.e. characters satisfying both &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isUpper&quot;&gt;isUpper&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ASCII 대문자, 즉 &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isAscii&quot;&gt;isAscii&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ghc-unicode#v:isUpper&quot;&gt;isUpper&lt;/a&gt;&lt;/code&gt; 를 모두 만족시키는 문자를 선택합니다 .</target>
        </trans-unit>
        <trans-unit id="afdcb493cc7140df5adae23c341088f5f626690a" translate="yes" xml:space="preserve">
          <source>Selects Unicode mark characters, for example accents and the like, which combine with preceding characters.</source>
          <target state="translated">선행 문자와 결합되는 유니 코드 마크 문자 (예 : 악센트 등)를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="d6394f6fcb1e6b142711f2b4df0a823312644330" translate="yes" xml:space="preserve">
          <source>Selects Unicode numeric characters, including digits from various scripts, Roman numerals, et cetera.</source>
          <target state="translated">다양한 스크립트, 로마 숫자 등의 숫자를 포함하여 유니 코드 숫자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="046d34ca61ae5a8dfe5cd59eb8542df48781a43d" translate="yes" xml:space="preserve">
          <source>Selects Unicode punctuation characters, including various kinds of connectors, brackets and quotes.</source>
          <target state="translated">다양한 종류의 커넥터, 대괄호 및 따옴표를 포함하여 유니 코드 문장 부호 문자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="ce1c4e328d65bbec99383ebc3fe1314029706e58" translate="yes" xml:space="preserve">
          <source>Selects Unicode space and separator characters.</source>
          <target state="translated">유니 코드 공백과 구분 문자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="4a10c50227b040198186e71354e5bc14a9c8c74d" translate="yes" xml:space="preserve">
          <source>Selects Unicode symbol characters, including mathematical and currency symbols.</source>
          <target state="translated">수학 및 통화 기호를 포함하여 유니 코드 기호 문자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="00adbe1aaee25e403afbd1494b4398cf0260b08d" translate="yes" xml:space="preserve">
          <source>Selects alphabetic Unicode characters (lower-case, upper-case and title-case letters, plus letters of caseless scripts and modifiers letters). This function is equivalent to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">알파벳순의 유니 코드 문자 (소문자, 대문자 및 제목 문자와 대소 문자가없는 스크립트 및 수정 자 문자)를 선택합니다. 이 함수는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="a96ef63922e017b107eb4ab6fd870bd71d35e740" translate="yes" xml:space="preserve">
          <source>Selects alphabetic Unicode characters (lower-case, upper-case and title-case letters, plus letters of caseless scripts and modifiers letters). This function is equivalent to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">알파벳 유니 코드 문자 (소문자, 대문자 및 제목 문자와 대소 문자가없는 스크립트 및 수정 자 문자)를 선택합니다. 이 함수는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="c15ff27eb2c6e1b0e9dda127fe1cb21b4c9425bf" translate="yes" xml:space="preserve">
          <source>Selects alphabetic Unicode characters (lower-case, upper-case and title-case letters, plus letters of caseless scripts and modifiers letters). This function is equivalent to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">알파벳 유니 코드 문자 (소문자, 대문자 및 제목 문자와 대소 문자가없는 스크립트 및 수정 자 문자)를 선택합니다. 이 함수는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="2bf31a0e79f23f03e2354953120c3bf230be608c" translate="yes" xml:space="preserve">
          <source>Selects alphabetic Unicode characters (lower-case, upper-case and title-case letters, plus letters of caseless scripts and modifiers letters). This function is equivalent to &lt;code&gt;&lt;a href=&quot;data-char#v:isAlpha&quot;&gt;isAlpha&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">알파벳순의 유니 코드 문자 (소문자, 대문자 및 제목 문자와 대소 문자가없는 스크립트 및 수정 자 문자)를 선택합니다. 이 함수는 &lt;code&gt;&lt;a href=&quot;data-char#v:isAlpha&quot;&gt;isAlpha&lt;/a&gt;&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="76a07761b0c7360d09184f968f819a0589585073" translate="yes" xml:space="preserve">
          <source>Selects alphabetic Unicode characters (lower-case, upper-case and title-case letters, plus letters of caseless scripts and modifiers letters). This function is equivalent to &lt;code&gt;&lt;a href=&quot;data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">알파벳순의 유니 코드 문자 (소문자, 대문자 및 제목 문자와 대소 문자가없는 스크립트 및 수정 자 문자)를 선택합니다. 이 함수는 &lt;code&gt;&lt;a href=&quot;data-char#v:isLetter&quot;&gt;isLetter&lt;/a&gt;&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="dfc14a1636219a13c955b8047638b74c65b5ac69" translate="yes" xml:space="preserve">
          <source>Selects alphabetic or numeric Unicode characters.</source>
          <target state="translated">알파벳 또는 숫자 유니 코드 문자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="465acfc244e1a3462f43074af569ba71dbdf8eff" translate="yes" xml:space="preserve">
          <source>Selects control characters, which are the non-printing characters of the Latin-1 subset of Unicode.</source>
          <target state="translated">유니 코드의 Latin-1 하위 집합의 비 인쇄 문자 인 제어 문자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="0f520a55599d6009f6b5a8111528d07771d2fe96" translate="yes" xml:space="preserve">
          <source>Selects lower-case alphabetic Unicode characters (letters).</source>
          <target state="translated">소문자 알파벳 유니 코드 문자 (문자)를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="7756c6924d48c99e6a26e45484199ec3fd702299" translate="yes" xml:space="preserve">
          <source>Selects one of a number of modes for finding shared libraries at runtime.</source>
          <target state="translated">런타임시 공유 라이브러리를 찾기위한 여러 모드 중 하나를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="dd03d64c804b48c585951c561d6b86387cc242a1" translate="yes" xml:space="preserve">
          <source>Selects printable Unicode characters (letters, numbers, marks, punctuation, symbols and spaces).</source>
          <target state="translated">인쇄 가능한 유니 코드 문자 (문자, 숫자, 마크, 문장 부호, 기호 및 공백)를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="c5b7d37c528ab7c89a2594e4ff45c15799470e68" translate="yes" xml:space="preserve">
          <source>Selects the first 128 characters of the Unicode character set, corresponding to the ASCII character set.</source>
          <target state="translated">ASCII 문자 세트에 해당하는 유니 코드 문자 세트의 처음 128자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="60b6ecd74d59bb6b87975edcb21e687e743d61e3" translate="yes" xml:space="preserve">
          <source>Selects the first 256 characters of the Unicode character set, corresponding to the ISO 8859-1 (Latin-1) character set.</source>
          <target state="translated">ISO 8859-1 (Latin-1) 문자 세트에 해당하는 유니 코드 문자 세트의 처음 256자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="e8ff50373d2be449d4352b13491627d479a80472" translate="yes" xml:space="preserve">
          <source>Selects upper-case or title-case alphabetic Unicode characters (letters). Title case is used by a small number of letter ligatures like the single-character form of &lt;em&gt;Lj&lt;/em&gt;.</source>
          <target state="translated">대문자 또는 제목의 알파벳 유니 코드 문자 (문자)를 선택합니다. 제목 케이스는 단일 문자 형식의 &lt;em&gt;Lj&lt;/em&gt; 와 같은 소수의 문자 합자가 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="61b98f1a0a08ab6480df5416102a5a731ccaae63" translate="yes" xml:space="preserve">
          <source>Selects white-space characters in the Latin-1 range</source>
          <target state="translated">라틴 -1 범위에서 공백 문자를 선택합니다</target>
        </trans-unit>
        <trans-unit id="ab68f6b2f89d019ad5adf0e1f341ed5d51e13b1b" translate="yes" xml:space="preserve">
          <source>Selects words corresponding to white-space characters in the Latin-1 range ordered by frequency.</source>
          <target state="translated">빈도 순서로 라틴 -1 범위에서 공백 문자에 해당하는 단어를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="9cb881ab1cd188ae66aa99c3dc8228baeb938bc3" translate="yes" xml:space="preserve">
          <source>Semaphore</source>
          <target state="translated">Semaphore</target>
        </trans-unit>
        <trans-unit id="80603f4ab5e8b245111bd9242e8a03cb1c042219" translate="yes" xml:space="preserve">
          <source>SemiClosedHandle</source>
          <target state="translated">SemiClosedHandle</target>
        </trans-unit>
        <trans-unit id="a7606fabb901db270a3a5b79254909611ffd627b" translate="yes" xml:space="preserve">
          <source>Semigroup</source>
          <target state="translated">Semigroup</target>
        </trans-unit>
        <trans-unit id="ef263c15e407f90a41b0a8c2dd9d910e87631aeb" translate="yes" xml:space="preserve">
          <source>Semigroups</source>
          <target state="translated">Semigroups</target>
        </trans-unit>
        <trans-unit id="80519dd6a843976af96095c2977d511895377e4e" translate="yes" xml:space="preserve">
          <source>Semigroups and Monoids</source>
          <target state="translated">세미 그룹 및 모노 이드</target>
        </trans-unit>
        <trans-unit id="83cdcbcc428cdc3fd53584aa033fba0b223ba7f5" translate="yes" xml:space="preserve">
          <source>Send the first component of the input through the argument arrow, and copy the rest unchanged to the output.</source>
          <target state="translated">인수 화살표를 통해 입력의 첫 번째 구성 요소를 보내고 나머지는 변경되지 않은 채로 출력에 복사하십시오.</target>
        </trans-unit>
        <trans-unit id="3af5eab8c1c4368fcdd626600364204a74e3ae44" translate="yes" xml:space="preserve">
          <source>Sending signals</source>
          <target state="translated">신호 보내기</target>
        </trans-unit>
        <trans-unit id="e0ec931e78437a9bab75ec98f19a51071a6782d9" translate="yes" xml:space="preserve">
          <source>Sends an interrupt signal to the process group of the given process.</source>
          <target state="translated">주어진 프로세스의 프로세스 그룹에 인터럽트 신호를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="f7f3f1da303067b2797bd4e61532ea8f79fde2cc" translate="yes" xml:space="preserve">
          <source>Separator predicates</source>
          <target state="translated">구분자 술어</target>
        </trans-unit>
        <trans-unit id="fa328f49b32e6dbe61c90ab9a659303e1d388d15" translate="yes" xml:space="preserve">
          <source>Seq</source>
          <target state="translated">Seq</target>
        </trans-unit>
        <trans-unit id="1ed99d1021ac12934f5a0ea0644a9df0bb383640" translate="yes" xml:space="preserve">
          <source>Sequence actions, discarding the value of the first argument.</source>
          <target state="translated">첫 번째 인수의 값을 버리고 시퀀스 조치.</target>
        </trans-unit>
        <trans-unit id="e3de6221f2c2fce3b329fbb42e1fb8e511f5e9e0" translate="yes" xml:space="preserve">
          <source>Sequence actions, discarding the value of the second argument.</source>
          <target state="translated">두 번째 인수의 값을 버리는 순서 조치.</target>
        </trans-unit>
        <trans-unit id="1552c16c6f8c19183500f6789356943755236c93" translate="yes" xml:space="preserve">
          <source>Sequences all the actions in a structure, building a new structure with the same shape using the results of the actions. For a version that ignores the results, see &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisequence_&quot;&gt;bisequence_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">구조의 모든 동작을 시퀀싱하고 동작 결과를 사용하여 동일한 모양의 새 구조를 만듭니다. 결과를 무시하는 버전은 &lt;code&gt;&lt;a href=&quot;data-bifoldable#v:bisequence_&quot;&gt;bisequence_&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="be00770ac3fb3c8ed2118045f75c580016a588d9" translate="yes" xml:space="preserve">
          <source>Sequences generally behave very much like lists.</source>
          <target state="translated">시퀀스는 일반적으로 목록과 매우 유사하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="389f8ea9e3e0ed9529c5ac9773a8c9859e399680" translate="yes" xml:space="preserve">
          <source>Sequences may also be compared to immutable &lt;a href=&quot;https://hackage.haskell.org/package/array&quot;&gt;arrays&lt;/a&gt; or &lt;a href=&quot;https://hackage.haskell.org/package/vector&quot;&gt;vectors&lt;/a&gt;. Like these structures, sequences support fast indexing, although not as fast. But editing an immutable array or vector, or combining it with another, generally requires copying the entire structure; sequences generally avoid that, copying only the portion that has changed.</source>
          <target state="translated">서열은 또한 불변 &lt;a href=&quot;https://hackage.haskell.org/package/array&quot;&gt;배열&lt;/a&gt; 또는 &lt;a href=&quot;https://hackage.haskell.org/package/vector&quot;&gt;벡터&lt;/a&gt; 와 비교 될 수있다 . 이러한 구조와 마찬가지로 시퀀스는 빠르지는 않지만 빠른 인덱싱을 지원합니다. 그러나 불변 배열 또는 벡터를 편집하거나 다른 배열 또는 벡터를 결합하려면 일반적으로 전체 구조를 복사해야합니다. 순서는 일반적으로 변경된 부분 만 복사하는 것을 피합니다.</target>
        </trans-unit>
        <trans-unit id="ddedd12a32633bb1e35ed359ae63bdca7bd52d10" translate="yes" xml:space="preserve">
          <source>Sequences support a wider variety of efficient operations than do lists. Notably, they offer</source>
          <target state="translated">시퀀스는 목록보다 훨씬 다양한 효율적인 작업을 지원합니다. 특히, 그들은 제공</target>
        </trans-unit>
        <trans-unit id="89275bcb3e26634eb9740ec6d09439242c7194a8" translate="yes" xml:space="preserve">
          <source>Sequential application.</source>
          <target state="translated">순차적 적용.</target>
        </trans-unit>
        <trans-unit id="238e3ee46b4adde5ae0db52db8c52d7371ab37cc" translate="yes" xml:space="preserve">
          <source>Sequential searches</source>
          <target state="translated">순차적 검색</target>
        </trans-unit>
        <trans-unit id="4eac8d8bd1b81b5be12df86539df26405ff3e4bc" translate="yes" xml:space="preserve">
          <source>Sequentially compose two actions, discarding any value produced by the first, like sequencing operators (such as the semicolon) in imperative languages.</source>
          <target state="translated">명령 행 연산자 (예 : 세미콜론)와 같이 첫 번째로 생성 된 모든 값을 명령형 언어로 버리는 두 가지 조치를 순차적으로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="a2295bbe9882331f9f8b1ec826238cac729e3c32" translate="yes" xml:space="preserve">
          <source>Sequentially compose two actions, passing any value produced by the first as an argument to the second.</source>
          <target state="translated">첫 번째 작업에서 생성 된 모든 값을 두 번째 작업의 인수로 전달하여 두 작업을 순차적으로 작성합니다.</target>
        </trans-unit>
        <trans-unit id="75fafb05751081f64a2484050588d619699d9e20" translate="yes" xml:space="preserve">
          <source>SerializableException</source>
          <target state="translated">SerializableException</target>
        </trans-unit>
        <trans-unit id="f7f1997c6cd1aa051279675742272a956e7db628" translate="yes" xml:space="preserve">
          <source>Session</source>
          <target state="translated">Session</target>
        </trans-unit>
        <trans-unit id="e11e37a9253b34ff1c7224447e143fabca1be9fd" translate="yes" xml:space="preserve">
          <source>Sessions</source>
          <target state="translated">Sessions</target>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="translated">Set</target>
        </trans-unit>
        <trans-unit id="6b3ea658a653e86954be656e000ca590af97c259" translate="yes" xml:space="preserve">
          <source>Set a breakpoint on the specified function or line and column. See &lt;a href=&quot;#setting-breakpoints&quot;&gt;Setting breakpoints&lt;/a&gt;.</source>
          <target state="translated">지정된 함수 또는 행과 열에 중단 점을 설정하십시오. &lt;a href=&quot;#setting-breakpoints&quot;&gt;중단 점 설정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="92eaa5df14d7b4342d4c3472a75bac1066b25b14" translate="yes" xml:space="preserve">
          <source>Set a command to be executed when a breakpoint is hit, or a new item in the history is selected. The most common use of &lt;a href=&quot;#ghci-cmd-:set%20stop&quot;&gt;&lt;code&gt;:set stop&lt;/code&gt;&lt;/a&gt; is to display the source code at the current location, e.g. &lt;code&gt;:set stop :list&lt;/code&gt;.</source>
          <target state="translated">중단 점에 도달하거나 히스토리에서 새 항목을 선택할 때 실행할 명령을 설정하십시오. &lt;a href=&quot;#ghci-cmd-:set%20stop&quot;&gt; &lt;code&gt;:set stop&lt;/code&gt; &lt;/a&gt; 의 가장 일반적인 용도 는 현재 위치에 소스 코드를 표시하는 것입니다 (예 &lt;code&gt;:set stop :list&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a5598d7c57da0bd198cfe4beaeacb18883914b13" translate="yes" xml:space="preserve">
          <source>Set group ID on execution.</source>
          <target state="translated">실행시 그룹 ID를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="38b2740eea5d30754b321b1f957647cbf10eef28" translate="yes" xml:space="preserve">
          <source>Set handlers of console Ctrl events.</source>
          <target state="translated">콘솔 Ctrl 이벤트 처리기를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="c6849edf0874e35a7f99bd004eccf06f8811bb47" translate="yes" xml:space="preserve">
          <source>Set main module and function</source>
          <target state="translated">메인 모듈 및 기능 설정</target>
        </trans-unit>
        <trans-unit id="df7c45a9c440cc50cf4a96b4f73bdf1c9e3dffa5" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the specified &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. All buffered data is flushed first.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를 설정하십시오 . 버퍼링 된 모든 데이터가 먼저 플러시됩니다.</target>
        </trans-unit>
        <trans-unit id="adcf1477b97e38d4050ce06778e07f2844dda0a9" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the specified &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;. All buffered data is flushed first.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; 를 설정하십시오 . 버퍼링 된 모든 데이터가 먼저 플러시됩니다.</target>
        </trans-unit>
        <trans-unit id="ec3b1d845fd2a0839efd12505034aac565fb1ed5" translate="yes" xml:space="preserve">
          <source>Set the HPC &lt;code&gt;.tix&lt;/code&gt; file output path.</source>
          <target state="translated">HPC &lt;code&gt;.tix&lt;/code&gt; 파일 출력 경로를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3b1100fbcb5c70102dfb3bcb48cd78df26f1a7b" translate="yes" xml:space="preserve">
          <source>Set the allocation area size used by the garbage collector. The allocation area (actually generation 0 step 0) is fixed and is never resized (unless you use &lt;a href=&quot;#rts-flag--H%20%5B%E2%9F%A8size%E2%9F%A9%5D&quot;&gt;&lt;code&gt;-H [⟨size⟩]&lt;/code&gt;&lt;/a&gt;, below).</source>
          <target state="translated">가비지 수집기에서 사용하는 할당 영역 크기를 설정하십시오. 할당 영역 (실제로 0 단계 0)은 고정되어 있으며 크기가 조정되지 않습니다 ( 아래의 &lt;a href=&quot;#rts-flag--H%20%5B%E2%9F%A8size%E2%9F%A9%5D&quot;&gt; &lt;code&gt;-H [⟨size⟩]&lt;/code&gt; &lt;/a&gt; 를 사용하지 않는 한 ).</target>
        </trans-unit>
        <trans-unit id="b4de9ea3fbc0c683d350f778336c93e1c0198e16" translate="yes" xml:space="preserve">
          <source>Set the base name.</source>
          <target state="translated">기본 이름을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="c2f2dd85f886cd5f61def475f8048755ecfe9183" translate="yes" xml:space="preserve">
          <source>Set the column number of a source position.</source>
          <target state="translated">소스 위치의 열 번호를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="b68583ed6a9e011dbab8bcc63b309be6143a778d" translate="yes" xml:space="preserve">
          <source>Set the default RTS options to ⟨opts⟩.</source>
          <target state="translated">기본 RTS 옵션을 ⟨opts⟩로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="c2acc9c7cfde8a35f523643587479d53c6a2b3b1" translate="yes" xml:space="preserve">
          <source>Set the depth for printing expressions in error msgs</source>
          <target state="translated">오류 메시지에서 표현식 인쇄 깊이 설정</target>
        </trans-unit>
        <trans-unit id="4d40edafcf71cbe8b907f85415c07a59806caed9" translate="yes" xml:space="preserve">
          <source>Set the directory, keeping the filename the same.</source>
          <target state="translated">파일 이름을 동일하게 유지하면서 디렉토리를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="0f7688bac0b0bbbb282f78d52fac7367accf5419" translate="yes" xml:space="preserve">
          <source>Set the echoing status of a handle connected to a terminal.</source>
          <target state="translated">터미널에 연결된 핸들의 에코 상태를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="bd42a1bfee166e7b293085f2f6e5dc908349a204" translate="yes" xml:space="preserve">
          <source>Set the extension of a file, overwriting one if already present, equivalent to &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-45--60-.-62-&quot;&gt;-&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">파일의 확장자를 설정하고 이미 존재하는 경우 파일을 덮어 쓰며 &lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:-45--60-.-62-&quot;&gt;-&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="45b63fada149a85372819a2585bf563905a2657d" translate="yes" xml:space="preserve">
          <source>Set the extension of a file, overwriting one if already present, equivalent to &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-45--60-.-62-&quot;&gt;-&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">파일의 확장자를 설정하고 이미 존재하는 경우 파일을 덮어 쓰며 &lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:-45--60-.-62-&quot;&gt;-&amp;lt;.&amp;gt;&lt;/a&gt;&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="0ad1fc1ee716e1bb760078c3d1f06b25654cdc2d" translate="yes" xml:space="preserve">
          <source>Set the filename.</source>
          <target state="translated">파일 이름을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="90b40690754f79e9fcf62ced7a8d41858f549afb" translate="yes" xml:space="preserve">
          <source>Set the function used by GHCi to print evaluation results. Expression must be of type &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt;.</source>
          <target state="translated">평가 결과를 인쇄하기 위해 GHCi에서 사용하는 기능을 설정하십시오. 식은 &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt; 형식이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="eb3560177d2aa96dba9e086ae11ef4922fcc790b" translate="yes" xml:space="preserve">
          <source>Set the function used by GHCi to print evaluation results. Given name must be of type &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt;.</source>
          <target state="translated">평가 결과를 인쇄하기 위해 GHCi에서 사용하는 기능을 설정합니다. 이름은 &lt;code&gt;C a =&amp;gt; a -&amp;gt; IO ()&lt;/code&gt; 유형이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="309de2db0b79340c9b93043c2bfb3105bca1551e" translate="yes" xml:space="preserve">
          <source>Set the increment for the generated &lt;code&gt;Unique&lt;/code&gt;&amp;lsquo;s to ⟨i⟩.</source>
          <target state="translated">생성 된 &lt;code&gt;Unique&lt;/code&gt; 의 증분 을 ⟨i⟩로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="3c44a6888eb466e5ca0e864954471062da1edc64" translate="yes" xml:space="preserve">
          <source>Set the increment for the generated &lt;code&gt;Unique&lt;/code&gt;&amp;rsquo;s to ⟨i⟩.</source>
          <target state="translated">생성 된 &lt;code&gt;Unique&lt;/code&gt; 항목의 증분 을 ⟨i⟩로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c10386b74d0839ff7965a7601425bb82c13edc89" translate="yes" xml:space="preserve">
          <source>Set the increment for the generated &lt;code&gt;Unique&lt;/code&gt;'s to ⟨i⟩.</source>
          <target state="translated">생성 된 &lt;code&gt;Unique&lt;/code&gt; 의 증분 을 ⟨i⟩로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="153a6823d609e74f71260ffedc330bb0f1974e42" translate="yes" xml:space="preserve">
          <source>Set the initial stack size for new threads.</source>
          <target state="translated">새 스레드의 초기 스택 크기를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="f079f0827adbcd29a1f309fa55de1d4d021c672e" translate="yes" xml:space="preserve">
          <source>Set the install name (via &lt;code&gt;-install_name&lt;/code&gt; passed to Apple&amp;rsquo;s linker), specifying the full install path of the library file. Any libraries or executables that link with it later will pick up that path as their runtime search location for it. (Darwin/OS X only)</source>
          <target state="translated">라이브러리 파일의 전체 설치 경로를 지정 하여 설치 이름 ( Apple의 링커에 전달 된 &lt;code&gt;-install_name&lt;/code&gt; 을 통해)을 설정 하십시오. 나중에 링크 된 라이브러리 또는 실행 파일은 해당 경로를 런타임 검색 위치로 선택합니다. (Darwin / OS X 만 해당)</target>
        </trans-unit>
        <trans-unit id="74254bb0267016ebcc16df3066fccdb36aaa93ae" translate="yes" xml:space="preserve">
          <source>Set the install name (via &lt;code&gt;-install_name&lt;/code&gt; passed to Apple's linker), specifying the full install path of the library file. Any libraries or executables that link with it later will pick up that path as their runtime search location for it. (Darwin/OS X only)</source>
          <target state="translated">라이브러리 파일의 전체 설치 경로를 지정 하여 설치 이름 ( Apple의 링커에 전달 된 &lt;code&gt;-install_name&lt;/code&gt; 을 통해)을 설정 합니다. 나중에 링크되는 모든 라이브러리 또는 실행 파일은 해당 경로를 런타임 검색 위치로 선택합니다. (Darwin / OS X 만 해당)</target>
        </trans-unit>
        <trans-unit id="154d944f5b541b4441cc4626008fba5da50b9508" translate="yes" xml:space="preserve">
          <source>Set the line input history.</source>
          <target state="translated">라인 입력 이력을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="9642e6627b8a554a8d171d7ea7a1cc7466b2bd29" translate="yes" xml:space="preserve">
          <source>Set the line number of a source position.</source>
          <target state="translated">소스 위치의 라인 번호를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="7f73c27e7dc3cbc3d482b15751ee8f603c17f752" translate="yes" xml:space="preserve">
          <source>Set the maximum heap size to ⟨size⟩ bytes. The heap normally grows and shrinks according to the memory requirements of the program. The only reason for having this option is to stop the heap growing without bound and filling up all the available swap space, which at the least will result in the program being summarily killed by the operating system.</source>
          <target state="translated">최대 힙 크기를 ⟨size⟩ 바이트로 설정하십시오. 힙은 일반적으로 프로그램의 메모리 요구 사항에 따라 커지거나 줄어 듭니다. 이 옵션을 사용하는 유일한 이유는 바인드없이 힙 증가를 중지하고 사용 가능한 모든 스왑 공간을 채우는 것이므로 최소한 운영 체제가 프로그램을 요약하여 종료시키기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="67c636527be62639907ed3cd2e046479f5422b13" translate="yes" xml:space="preserve">
          <source>Set the maximum number of specialisations that will be created for any one function by the SpecConstr transformation.</source>
          <target state="translated">SpecConstr 변환에 의해 하나의 함수에 대해 작성 될 최대 전문화 수를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="3c3d333729e5d534623f2d0eaba82012fecfe32c" translate="yes" xml:space="preserve">
          <source>Set the maximum size of inline array allocations to n bytes. GHC will allocate non-pinned arrays of statically known size in the current nursery block if they&amp;rsquo;re no bigger than n bytes, ignoring GC overheap. This value should be quite a bit smaller than the block size (typically: 4096).</source>
          <target state="translated">인라인 배열 할당의 최대 크기를 n 바이트로 설정하십시오. GHC 오버 헤드를 무시하고 n 바이트보다 크지 않은 경우 GHC는 고정되지 않은 고정 크기의 배열을 현재 보육 블록에 할당합니다. 이 값은 블록 크기보다 약간 작아야합니다 (일반적으로 4096).</target>
        </trans-unit>
        <trans-unit id="df6bf309de0671ddb20082e0e3ee95f06fd0f8ee" translate="yes" xml:space="preserve">
          <source>Set the maximum stack size for an individual thread to ⟨size⟩ bytes. If the thread attempts to exceed this limit, it will be sent the &lt;code&gt;StackOverflow&lt;/code&gt; exception. The limit can be disabled entirely by specifying a size of zero.</source>
          <target state="translated">개별 스레드의 최대 스택 크기를 ⟨size⟩ 바이트로 설정하십시오. 스레드가이 제한을 초과하려고하면 &lt;code&gt;StackOverflow&lt;/code&gt; 예외 가 전송됩니다 . 크기를 0으로 지정하여 제한을 완전히 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34a28a7a0ff4a3b46cf3855427f3aaf3ef912902" translate="yes" xml:space="preserve">
          <source>Set the minimum size of the heap to ⟨size⟩</source>
          <target state="translated">힙의 최소 크기를 ⟨size⟩로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="c3c689345a8a5e3e1614c388852a7d992055d604" translate="yes" xml:space="preserve">
          <source>Set the minimum size of the heap to ⟨size⟩. This option is equivalent to &lt;code&gt;+RTS -Hsize&lt;/code&gt;, see &lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;RTS options to control the garbage collector&lt;/a&gt;.</source>
          <target state="translated">힙의 최소 크기를 ⟨size⟩로 설정하십시오. 이 옵션은 &lt;code&gt;+RTS -Hsize&lt;/code&gt; 와 같습니다 . &lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;가비지 수집기를 제어하는 ​​RTS 옵션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ccd1e013c9acb626c6617269e9ad4b0a715fee04" translate="yes" xml:space="preserve">
          <source>Set the minimum size of the old generation. The old generation is collected whenever it grows to this size or the value of the &lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt;&lt;code&gt;-F ⟨factor⟩&lt;/code&gt;&lt;/a&gt; option multiplied by the size of the live data at the previous major collection, whichever is larger.</source>
          <target state="translated">구세대의 최소 크기를 설정하십시오. 이전 세대는이 크기 또는 &lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt; &lt;code&gt;-F ⟨factor⟩&lt;/code&gt; &lt;/a&gt; 옵션의 값에 이전 주요 콜렉션의 라이브 데이터 크기를 곱한 값 중 더 큰 값으로 커질 때마다 수집 됩니다.</target>
        </trans-unit>
        <trans-unit id="d81c121bc14e581e519dbc75d7eda8d3a59f503e" translate="yes" xml:space="preserve">
          <source>Set the name of the source.</source>
          <target state="translated">소스 이름을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="93cc8334ff7df03aaf2a23a40c74dfb0bccb9fba" translate="yes" xml:space="preserve">
          <source>Set the new allocation size of the CNF. This value (in bytes) determines the capacity of each compact block in the CNF. It does not retroactively affect existing compact blocks in the CNF.</source>
          <target state="translated">CNF의 새 할당 크기를 설정합니다. 이 값 (바이트)은 CNF에있는 각 압축 블록의 용량을 결정합니다. CNF의 기존 콤팩트 블록에는 소급 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3f2ff124f59a1531283a72f83e200ebc1a76d661" translate="yes" xml:space="preserve">
          <source>Set the new allocation size of the compact. This value (in bytes) determines the size of each block in the compact chain.</source>
          <target state="translated">컴팩트의 새 할당 크기를 설정하십시오. 이 값 (바이트)은 컴팩트 체인의 각 블록 크기를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="be84fc95b69c36167451b2aaed77808d4f4d2797" translate="yes" xml:space="preserve">
          <source>Set the number of Haskell threads that can run truly simultaneously (on separate physical processors) at any given time. The number passed to &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo this value. The initial value is given by the &lt;code&gt;+RTS -N&lt;/code&gt; runtime flag.</source>
          <target state="translated">주어진 시간에 실제로 (별도의 물리적 프로세서에서) 동시에 실행될 수있는 Haskell 스레드 수를 설정하십시오. &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 에 전달 된 숫자는 이 값을 모듈로 해석합니다. 초기 값은 &lt;code&gt;+RTS -N&lt;/code&gt; 런타임 플래그에 의해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="08ef23c845062be45d68cae8bd4d9e0a89f5300c" translate="yes" xml:space="preserve">
          <source>Set the number of Haskell threads that can run truly simultaneously (on separate physical processors) at any given time. The number passed to &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo this value. The initial value is given by the &lt;code&gt;+RTS -N&lt;/code&gt; runtime flag.</source>
          <target state="translated">주어진 시간에 실제로 (별도의 물리적 프로세서에서) 동시에 실행될 수있는 Haskell 스레드 수를 설정하십시오. &lt;code&gt;&lt;a href=&quot;ghc-conc#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 에 전달 된 숫자는 이 값을 모듈로 해석합니다. 초기 값은 &lt;code&gt;+RTS -N&lt;/code&gt; 런타임 플래그에 의해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="4b8986d6631f648280b8824a5e9acaa22cfd5ede" translate="yes" xml:space="preserve">
          <source>Set the number of Haskell threads that can run truly simultaneously (on separate physical processors) at any given time. The number passed to &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; is interpreted modulo this value. The initial value is given by the &lt;code&gt;+RTS -N&lt;/code&gt; runtime flag.</source>
          <target state="translated">주어진 시간에 실제로 (별도의 물리적 프로세서에서) 동시에 실행될 수있는 Haskell 스레드 수를 설정하십시오. &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:forkOn&quot;&gt;forkOn&lt;/a&gt;&lt;/code&gt; 에 전달 된 숫자는 이 값을 모듈로 해석합니다. 초기 값은 &lt;code&gt;+RTS -N&lt;/code&gt; 런타임 플래그에 의해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="49914586be421c1a51499082896596cdc3d1b52d" translate="yes" xml:space="preserve">
          <source>Set the number of entries GHCi keeps for &lt;code&gt;:history&lt;/code&gt;. See &lt;a href=&quot;ghci#ghci-debugger&quot;&gt;The GHCi Debugger&lt;/a&gt;.</source>
          <target state="translated">GHCi가 유지하는 항목 수를 &lt;code&gt;:history&lt;/code&gt; 로 설정하십시오 . &lt;a href=&quot;ghci#ghci-debugger&quot;&gt;GHCi 디버거를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="78111973c0a6975132f723e2af152cf8bff28dbe" translate="yes" xml:space="preserve">
          <source>Set the number of generations used by the garbage collector. The default of 2 seems to be good, but the garbage collector can support any number of generations. Anything larger than about 4 is probably not a good idea unless your program runs for a &lt;em&gt;long&lt;/em&gt; time, because the oldest generation will hardly ever get collected.</source>
          <target state="translated">가비지 수집기에서 사용하는 세대 수를 설정하십시오. 기본값 2는 양호하지만 가비지 수집기는 여러 세대를 지원할 수 있습니다. 가장 오래된 세대는 거의 수집되지 않기 때문에 프로그램이 &lt;em&gt;오랫동안&lt;/em&gt; 실행되지 않는 한 약 4보다 큰 것은 아마 좋은 생각 이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="974f10915fc1e5bb5d4657e8bfa0ee8f69071586" translate="yes" xml:space="preserve">
          <source>Set the number of phases for the simplifier. Ignored with &lt;code&gt;-O0&lt;/code&gt;.</source>
          <target state="translated">단순화 기의 위상 수를 설정합니다. &lt;code&gt;-O0&lt;/code&gt; 에서는 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="9d55f6df845d396fb3f26af370d6593432197c2d" translate="yes" xml:space="preserve">
          <source>Set the permissions of a file or directory.</source>
          <target state="translated">파일 또는 디렉토리의 권한을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="581f262ffcc5b132fc178bf2b945da3fa032db33" translate="yes" xml:space="preserve">
          <source>Set the prefix of the filenames used for debugging output.</source>
          <target state="translated">출력 디버깅에 사용되는 파일 이름의 접두사를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="27569170844fcd82a186fdf61977ee9c0555a54c" translate="yes" xml:space="preserve">
          <source>Set the prefix of the filenames used for debugging output. For example, &lt;code&gt;-ddump-file-prefix=Foo&lt;/code&gt; will cause the output from &lt;a href=&quot;#ghc-flag--ddump-simpl&quot;&gt;&lt;code&gt;-ddump-simpl&lt;/code&gt;&lt;/a&gt; to be dumped to &lt;code&gt;Foo.dump-simpl&lt;/code&gt;.</source>
          <target state="translated">출력 디버깅에 사용되는 파일 이름의 접두사를 설정하십시오. 예를 들어, &lt;code&gt;-ddump-file-prefix=Foo&lt;/code&gt; 는 &lt;a href=&quot;#ghc-flag--ddump-simpl&quot;&gt; &lt;code&gt;-ddump-simpl&lt;/code&gt; &lt;/a&gt; 의 출력이 Foo.dump- &lt;code&gt;Foo.dump-simpl&lt;/code&gt; 덤프되도록 합니다.</target>
        </trans-unit>
        <trans-unit id="ee90ac8ed288a340065381772b8b9d149143a2f0" translate="yes" xml:space="preserve">
          <source>Set the profiling (sampling) interval to ⟨secs⟩ seconds (the default is 0.1 second). Fractions are allowed: for example &lt;code&gt;-i0.2&lt;/code&gt; will get 5 samples per second. This only affects heap profiling; time profiles are always sampled with the frequency of the RTS clock. See &lt;a href=&quot;#prof-time-options&quot;&gt;Time and allocation profiling&lt;/a&gt; for changing that.</source>
          <target state="translated">프로파일 링 (샘플링) 간격을 ⟨secs⟩ 초로 설정하십시오 (기본값은 0.1 초). 분수가 허용됩니다. 예를 들어 &lt;code&gt;-i0.2&lt;/code&gt; 는 초당 5 개의 샘플을 얻습니다. 이것은 힙 프로파일 링에만 영향을줍니다. 시간 프로파일은 항상 RTS 클럭의 주파수로 샘플링됩니다. 이를 변경하려면 &lt;a href=&quot;#prof-time-options&quot;&gt;시간 및 할당 프로파일 링&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bde393e1c3aa9e9db3da19eaa0ed0bed96e40bc3" translate="yes" xml:space="preserve">
          <source>Set the size of &amp;ldquo;stack chunks&amp;rdquo;. When a thread&amp;rsquo;s current stack overflows, a new stack chunk is created and added to the thread&amp;rsquo;s stack, until the limit set by &lt;a href=&quot;#rts-flag--K%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-K ⟨size⟩&lt;/code&gt;&lt;/a&gt; is reached.</source>
          <target state="translated">&quot;스택 청크&quot;의 크기를 설정하십시오. 스레드의 현재 스택이 오버 플로우되면 &lt;a href=&quot;#rts-flag--K%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-K ⟨size⟩&lt;/code&gt; 에&lt;/a&gt; 의해 설정된 한계 에 도달 할 때까지 새 스택 청크가 작성되어 스레드의 스택에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="13830a2153ac99e2e5187f2607fe01677efb61a6" translate="yes" xml:space="preserve">
          <source>Set the size threshold for the SpecConstr transformation.</source>
          <target state="translated">SpecConstr 변환에 대한 크기 임계 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="1212f3cff89daa6357cba7682f3eb8eb280b1c85" translate="yes" xml:space="preserve">
          <source>Set the size threshold for the liberate-case transformation.</source>
          <target state="translated">자유 사례 변환에 대한 크기 임계 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a2ae25c78040fee94d69d11436a78f01d6fca2d0" translate="yes" xml:space="preserve">
          <source>Set the width of debugging output. For example &lt;code&gt;-dppr-cols200&lt;/code&gt;</source>
          <target state="translated">디버깅 출력의 너비를 설정하십시오. 예를 들어 &lt;code&gt;-dppr-cols200&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019b4ecc06f7c2f22b40358cf37ba57f0d48c6a8" translate="yes" xml:space="preserve">
          <source>Set the width of debugging output. Use this if your code is wrapping too much. For example: &lt;code&gt;-dppr-cols=200&lt;/code&gt;.</source>
          <target state="translated">디버깅 출력의 너비를 설정하십시오. 코드가 너무 많이 줄어드는 경우 사용하십시오. 예를 들어 &lt;code&gt;-dppr-cols=200&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c74eca7c43ef9fb73346c302c6712b095e6934a" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the language is case sensitive.</source>
          <target state="translated">언어가 대소 문자를 구분하면 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="73a9144ce523c26ead35be5e17a8b419754fb0f2" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the language supports nested block comments.</source>
          <target state="translated">언어가 중첩 된 블록 주석을 지원하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4ba15fda4bbbf376e19cc429fd5c215384831c8" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the language is case sensitive.</source>
          <target state="translated">언어가 대소 문자를 구분하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="f435d9dbcd9ebd77b8861f8b64110f1d0062614f" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the language supports nested block comments.</source>
          <target state="translated">언어가 중첩 된 블록 주석을 지원하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="5071d6a2399b543969684c2a37cc3cf3caaaf458" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the language is case sensitive.</source>
          <target state="translated">언어가 대소 문자를 구분하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb6cc723365f51624a7fb5fc4976d9b75b2ecd2c" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the language supports nested block comments.</source>
          <target state="translated">언어가 중첩 된 블록 주석을 지원하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ba8a4e35c2ca993f0910108377e4d4052112de4" translate="yes" xml:space="preserve">
          <source>Set type</source>
          <target state="translated">세트 타입</target>
        </trans-unit>
        <trans-unit id="3d5891cb9e8a0fc091a9171a8d1b4dbcf2f1f52b" translate="yes" xml:space="preserve">
          <source>Set user ID on execution.</source>
          <target state="translated">실행시 사용자 ID를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="62d7122885b6e1739f21a82263b34706a4d08844" translate="yes" xml:space="preserve">
          <source>SetOwnerAndGroupIsRestricted</source>
          <target state="translated">SetOwnerAndGroupIsRestricted</target>
        </trans-unit>
        <trans-unit id="5752a633b29be2c2c6d999e8ad3cf0d34e0b6bbb" translate="yes" xml:space="preserve">
          <source>SetWindowPosFlags</source>
          <target state="translated">SetWindowPosFlags</target>
        </trans-unit>
        <trans-unit id="5d59fc0c1ba1d0f45cfcd2a1a313a95a2f55060a" translate="yes" xml:space="preserve">
          <source>Sets edge weights used by the new code layout algorithm.</source>
          <target state="translated">새로운 코드 레이아웃 알고리즘에 사용되는 간선 가중치를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ea257dcefad7ec78df6ea3c4001b110c8fb57d58" translate="yes" xml:space="preserve">
          <source>Sets how many iterations of the pattern-match checker will perform before giving up. This limit is to catch cases where pattern-match checking might be excessively costly (due to the exponential complexity of coverage checking in the general case). It typically shouldn&amp;rsquo;t be necessary to set this unless GHC informs you that it has exceeded the pattern match checker&amp;rsquo;s iteration limit (in which case you may want to consider refactoring your pattern match, for the sake of future readers of your code.</source>
          <target state="translated">포기하기 전에 패턴 일치 검사기의 반복 횟수를 설정합니다. 이 한계는 패턴 일치 검사가 지나치게 비용이 많이 드는 경우를 포착하는 것입니다 (일반적인 경우 범위 검사의 기하 급수적 복잡성으로 인해). GHC에서 패턴 일치 검사기의 반복 한계를 초과했음을 알리지 않는 한 (이 경우 코드의 미래 독자를 위해 패턴 일치 리팩토링을 고려할 수 있음) 알리지 않는 한 일반적으로이를 설정하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="b920f85990a248c4469d8197adacc9f2e5b9eddc" translate="yes" xml:space="preserve">
          <source>Sets or modifies the current context for statements typed at the prompt. The form &lt;code&gt;import mod&lt;/code&gt; is equivalent to &lt;code&gt;:module +mod&lt;/code&gt;. See &lt;a href=&quot;#ghci-scope&quot;&gt;What&amp;rsquo;s really in scope at the prompt?&lt;/a&gt; for more details.</source>
          <target state="translated">프롬프트에 입력 된 명령문의 현재 컨텍스트를 설정하거나 수정합니다. &lt;code&gt;import mod&lt;/code&gt; 양식 은 &lt;code&gt;:module +mod&lt;/code&gt; 와 같습니다 . &lt;a href=&quot;#ghci-scope&quot;&gt;프롬프트에서 실제로 범위가 무엇입니까?를&lt;/a&gt; 참조하십시오 . 상세 사항은.</target>
        </trans-unit>
        <trans-unit id="674cd41ed08ffde00fe81d47ba369ce3000c07a0" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;exposed&lt;/code&gt; flag for package ⟨P⟩ to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">패키지 ⟨P⟩ 의 &lt;code&gt;exposed&lt;/code&gt; 플래그를 &lt;code&gt;False&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="21880bfdad398070705f7eac77b513092fea6267" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;exposed&lt;/code&gt; flag for package ⟨P⟩ to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">패키지 ⟨P⟩ 의 &lt;code&gt;exposed&lt;/code&gt; 플래그를 &lt;code&gt;True&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="a5475a6c0aa3b60ca9256f7baef6f42fb4d21e58" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;trusted&lt;/code&gt; flag for package ⟨P⟩ to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">패키지 ⟨P⟩ 의 &lt;code&gt;trusted&lt;/code&gt; 플래그를 &lt;code&gt;False&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="74610355e107472e2529949895e79f33df809382" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;trusted&lt;/code&gt; flag for package ⟨P⟩ to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">패키지 ⟨P⟩ 의 &lt;code&gt;trusted&lt;/code&gt; 플래그를 &lt;code&gt;True&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="b2e20ad62225863877ba8e6cb0b1dff5279b2d25" translate="yes" xml:space="preserve">
          <source>Sets the allocation counter for the current thread to the given value.</source>
          <target state="translated">현재 스레드의 할당 카운터를 주어진 값으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="b2c4dc1f6b2f05486d3823652f2f61d8d864b1c5" translate="yes" xml:space="preserve">
          <source>Sets the attributes on or off before outputting the given text, and then turns them all off. This capability will always succeed; properties which cannot be set in the current terminal will be ignored.</source>
          <target state="translated">주어진 텍스트를 출력하기 전에 속성을 켜거나 끈 다음 모두 끕니다. 이 기능은 항상 성공합니다. 현재 터미널에서 설정할 수없는 속성은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="f044a6bd0542095b6f8d833a9f63a0b91b0c7314" translate="yes" xml:space="preserve">
          <source>Sets the attributes on or off. This capability will always succeed; properties which cannot be set in the current terminal will be ignored.</source>
          <target state="translated">속성을 설정하거나 해제합니다. 이 기능은 항상 성공합니다. 현재 터미널에서 설정할 수없는 속성은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9e9d6260f5eb86f113f53ee7f94bef58759c1f45" translate="yes" xml:space="preserve">
          <source>Sets the background color of all further text output, using either the &lt;code&gt;setab&lt;/code&gt; or &lt;code&gt;setb&lt;/code&gt; capability.</source>
          <target state="translated">&lt;code&gt;setab&lt;/code&gt; 또는 &lt;code&gt;setb&lt;/code&gt; 기능을 사용하여 추가 텍스트 출력의 배경색을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="ec6f9b0ef35dbec0ee3e8807330155257d874c11" translate="yes" xml:space="preserve">
          <source>Sets the command used by &lt;a href=&quot;#ghci-cmd-:edit&quot;&gt;&lt;code&gt;:edit&lt;/code&gt;&lt;/a&gt; to ⟨cmd⟩.</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:edit&quot;&gt; &lt;code&gt;:edit&lt;/code&gt; &lt;/a&gt; 에서 사용하는 명령 을 ⟨cmd⟩로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="311542d39835606741eb83c49a3747557cb52c29" translate="yes" xml:space="preserve">
          <source>Sets the context switch interval to ⟨s⟩ seconds. A context switch will occur at the next heap block allocation after the timer expires (a heap block allocation occurs every 4k of allocation). With &lt;code&gt;-C0&lt;/code&gt; or &lt;code&gt;-C&lt;/code&gt;, context switches will occur as often as possible (at every heap block allocation).</source>
          <target state="translated">컨텍스트 전환 간격을 ⟨s⟩ 초로 설정합니다. 타이머가 만료 된 후 다음 힙 블록 할당에서 컨텍스트 전환이 발생합니다 (4k 할당마다 힙 블록 할당이 발생 함). &lt;code&gt;-C0&lt;/code&gt; 또는 &lt;code&gt;-C&lt;/code&gt; 를 사용하면 컨텍스트 전환이 가능한 한 자주 발생합니다 (모든 힙 블록 할당시).</target>
        </trans-unit>
        <trans-unit id="3cc3e2dca487963eddc51e609356dd3f2ebd666d" translate="yes" xml:space="preserve">
          <source>Sets the destination for the eventlog produced with the &lt;a href=&quot;#rts-flag--l%20%E2%9F%A8flags%E2%9F%A9&quot;&gt;&lt;code&gt;-l ⟨flags⟩&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;#rts-flag--l%20%E2%9F%A8flags%E2%9F%A9&quot;&gt; &lt;code&gt;-l ⟨flags⟩&lt;/code&gt; 로&lt;/a&gt; 생성 된 이벤트 로그의 대상을 설정합니다. 플래그로 .</target>
        </trans-unit>
        <trans-unit id="a7155bad6d4be2ffdb5bd3858939d96fb2158b21" translate="yes" xml:space="preserve">
          <source>Sets the destination for the eventlog produced with the &lt;a href=&quot;profiling#rts-flag--l&quot;&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;profiling#rts-flag--l&quot;&gt; &lt;code&gt;-l&lt;/code&gt; &lt;/a&gt; 플래그로 생성 된 이벤트 로그의 대상을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="3eeab4f5d8791e9b07157ed1c993b7d984742a51" translate="yes" xml:space="preserve">
          <source>Sets the foreground color of all further text output, using either the &lt;code&gt;setaf&lt;/code&gt; or &lt;code&gt;setf&lt;/code&gt; capability.</source>
          <target state="translated">&lt;code&gt;setaf&lt;/code&gt; 또는 &lt;code&gt;setf&lt;/code&gt; 기능을 사용하여 추가 텍스트 출력의 전경색을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="544f549a696a2ab69ee245ced9c83bd2e2b3a6fd" translate="yes" xml:space="preserve">
          <source>Sets the function to be used for the continuation prompt (used when using the &lt;a href=&quot;#ghci-cmd-:%7B&quot;&gt;&lt;code&gt;:{&lt;/code&gt;&lt;/a&gt; command) displaying in GHCi.</source>
          <target state="translated">GHCi에 표시 되는 연속 프롬프트 ( &lt;a href=&quot;#ghci-cmd-:%7B&quot;&gt; &lt;code&gt;:{&lt;/code&gt; &lt;/a&gt; 명령을 사용할 때 사용)에 사용할 기능을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="926985e64e5398fb8d04ccea5a3fc65cf84c7728" translate="yes" xml:space="preserve">
          <source>Sets the function to be used for the prompt displaying in GHCi. The function should be of the type &lt;code&gt;[String] -&amp;gt; Int -&amp;gt; IO String&lt;/code&gt;. This function is called each time the prompt is being made. The first argument stands for the names of the modules currently in scope(the name of the &amp;ldquo;topmost&amp;rdquo; module will begin with a &lt;code&gt;*&lt;/code&gt;; see &lt;a href=&quot;#ghci-scope&quot;&gt;What&amp;rsquo;s really in scope at the prompt?&lt;/a&gt; for more information). The second arguments is the line number (as referenced in compiler messages) of the current prompt.</source>
          <target state="translated">프롬프트가 GHCi에 표시되는 데 사용할 기능을 설정합니다. 함수는 &lt;code&gt;[String] -&amp;gt; Int -&amp;gt; IO String&lt;/code&gt; 유형이어야합니다 . 이 기능은 프롬프트가 작성 될 때마다 호출됩니다. 첫 번째 인수는 현재 범위에있는 모듈의 이름을 의미합니다 ( &quot;최상위&quot;모듈의 이름으로 시작하는 &lt;code&gt;*&lt;/code&gt; ; 참조 &lt;a href=&quot;#ghci-scope&quot;&gt;? 프롬프트에서 범위에 정말 어떤&lt;/a&gt; 자세한 정보). 두 번째 인수는 현재 프롬프트의 행 번호 (컴파일러 메시지에서 참조)입니다.</target>
        </trans-unit>
        <trans-unit id="85a9cc84fb8a975ac3d6d428a3e058beac0c24b8" translate="yes" xml:space="preserve">
          <source>Sets the interval that the RTS clock ticks at, which is also the sampling interval of the time and allocation profile. The default is 0.02 seconds. The runtime uses a single timer signal to count ticks; this timer signal is used to control the context switch timer (&lt;a href=&quot;using-concurrent#using-concurrent&quot;&gt;Using Concurrent Haskell&lt;/a&gt;) and the heap profiling timer &lt;a href=&quot;#rts-options-heap-prof&quot;&gt;RTS options for heap profiling&lt;/a&gt;. Also, the time profiler uses the RTS timer signal directly to record time profiling samples.</source>
          <target state="translated">RTS 클럭이 틱하는 간격을 설정합니다. 이는 시간 및 할당 프로파일의 샘플링 간격이기도합니다. 기본값은 0.02 초입니다. 런타임은 단일 타이머 신호를 사용하여 틱을 계산합니다. 이 타이머 신호는 컨텍스트 전환 타이머 ( &lt;a href=&quot;using-concurrent#using-concurrent&quot;&gt;Concurrent Haskell 사용&lt;/a&gt; ) 및 힙 프로파일 링 &lt;a href=&quot;#rts-options-heap-prof&quot;&gt;을위한 힙 프로파일&lt;/a&gt; 링 타이머 RTS 옵션 을 제어하는 ​​데 사용됩니다 . 또한 시간 프로파일 러는 RTS 타이머 신호를 직접 사용하여 시간 프로파일 링 샘플을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="766f638ba7d4bfc1f02388075a4f5e3e2202bb95" translate="yes" xml:space="preserve">
          <source>Sets the limit on the total size of &amp;ldquo;large objects&amp;rdquo; (objects larger than about 3KB) that can be allocated before a GC is triggered. By default this limit is the same as the &lt;a href=&quot;#rts-flag--A%20%E2%9F%A8size%E2%9F%A9&quot;&gt;&lt;code&gt;-A&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">GC가 트리거되기 전에 할당 할 수있는 &quot;대형 개체&quot;(약 3KB보다 큰 개체)의 총 크기에 대한 제한을 설정합니다. 기본적으로이 한계는 &lt;a href=&quot;#rts-flag--A%20%E2%9F%A8size%E2%9F%A9&quot;&gt; &lt;code&gt;-A&lt;/code&gt; &lt;/a&gt; 값 과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="c10a33938d60c3ade609b314a9182d052ff36554" translate="yes" xml:space="preserve">
          <source>Sets the list of arguments which are returned when the program calls &lt;code&gt;System.getArgs&lt;/code&gt;.</source>
          <target state="translated">프로그램이 &lt;code&gt;System.getArgs&lt;/code&gt; 를 호출 할 때 리턴되는 인수 목록을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="88921b7993f4ba8443e5f38b8fae986488002e50" translate="yes" xml:space="preserve">
          <source>Sets the maximal number of iterations for the simplifier.</source>
          <target state="translated">단순화 기의 최대 반복 횟수를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ddf6bcb4466d2f01e0e37403eb932bfd13d26db4" translate="yes" xml:space="preserve">
          <source>Sets the maximum length of a cost-centre stack name in a heap profile. Defaults to 25.</source>
          <target state="translated">힙 프로파일에서 비용 중심 스택 이름의 최대 길이를 설정합니다. 기본값은 25입니다.</target>
        </trans-unit>
        <trans-unit id="47f52e8de421c0d9f22c2be275bb2873b4389bb1" translate="yes" xml:space="preserve">
          <source>Sets the maximum length of the cost-centre names listed in the heap profile.</source>
          <target state="translated">힙 프로파일에 나열된 비용 센터 이름의 최대 길이를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="92f9bcec4dcffeb64d9f3f058d9712b71bf5e230" translate="yes" xml:space="preserve">
          <source>Sets the stack chunk buffer size. When a stack chunk overflows and a new stack chunk is created, some of the data from the previous stack chunk is moved into the new chunk, to avoid an immediate underflow and repeated overflow/underflow at the boundary. The amount of stack moved is set by the &lt;code&gt;-kb&lt;/code&gt; option.</source>
          <target state="translated">스택 청크 버퍼 크기를 설정합니다. 스택 청크가 오버플로되고 새 스택 청크가 생성되면 경계에서 즉시 언더 플로 및 오버플로 / 언더 플로가 반복되지 않도록 이전 스택 청크의 일부 데이터가 새 청크로 이동합니다. 이동 된 스택의 양은 &lt;code&gt;-kb&lt;/code&gt; 옵션으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="4939bbb209646ab6d5403c578234d941ca697dd6" translate="yes" xml:space="preserve">
          <source>Sets the string to be returned when the program calls &lt;code&gt;System.getProgName&lt;/code&gt;.</source>
          <target state="translated">프로그램이 &lt;code&gt;System.getProgName&lt;/code&gt; 을 호출 할 때 리턴 될 문자열을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="8a9b5c7bb27221f5a048ae6726e49420ae5ede27" translate="yes" xml:space="preserve">
          <source>Sets the string to be used as the continuation prompt (used when using the &lt;a href=&quot;#ghci-cmd-:%7B&quot;&gt;&lt;code&gt;:{&lt;/code&gt;&lt;/a&gt; command) in GHCi.</source>
          <target state="translated">GHCi에서 연속 프롬프트로 사용될 문자열을 설정합니다 ( &lt;a href=&quot;#ghci-cmd-:%7B&quot;&gt; &lt;code&gt;:{&lt;/code&gt; &lt;/a&gt; 명령을 사용할 때 사용됨).</target>
        </trans-unit>
        <trans-unit id="bccac63e58aa6d8722988126735a8bcd5644668e" translate="yes" xml:space="preserve">
          <source>Sets the string to be used as the prompt in GHCi. Inside ⟨prompt⟩, the next sequences are replaced:</source>
          <target state="translated">GHCi에서 프롬프트로 사용할 문자열을 설정합니다. &quot;프롬프트&quot;내부에서 다음 시퀀스가 ​​교체됩니다.</target>
        </trans-unit>
        <trans-unit id="ff691e62db73541f4c4094c63d16da5485d8223c" translate="yes" xml:space="preserve">
          <source>Sets various options. See &lt;a href=&quot;#ghci-set&quot;&gt;The :set and :seti commands&lt;/a&gt; for a list of available options and &lt;a href=&quot;flags#interactive-mode-options&quot;&gt;Interactive-mode options&lt;/a&gt; for a list of GHCi-specific flags. The &lt;a href=&quot;#ghci-cmd-:set&quot;&gt;&lt;code&gt;:set&lt;/code&gt;&lt;/a&gt; command by itself shows which options are currently set. It also lists the current dynamic flag settings, with GHCi-specific flags listed separately.</source>
          <target state="translated">다양한 옵션을 설정합니다. 사용 가능한 옵션 목록 및 GHCi 특정 플래그 목록에 대한 &lt;a href=&quot;flags#interactive-mode-options&quot;&gt;대화식 모드 옵션 &lt;/a&gt;&lt;a href=&quot;#ghci-set&quot;&gt;은 : set 및 : seti 명령&lt;/a&gt; 을 참조하십시오 . &lt;a href=&quot;#ghci-cmd-:set&quot;&gt; &lt;code&gt;:set&lt;/code&gt; &lt;/a&gt; 옵션은 현재 설정되어 자체 프로그램에 의해 명령. 또한 현재 동적 플래그 설정과 GHCi 특정 플래그가 별도로 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="b02b3fb57dbb29ad2afd733a05004b902652d901" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;-N&lt;/code&gt; also has the effect of enabling the parallel garbage collector (see &lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;RTS options to control the garbage collector&lt;/a&gt;).</source>
          <target state="translated">설정 &lt;code&gt;-N&lt;/code&gt; 는 또한 병렬 가비지 수집기 (볼 수있게하는 효과가 &lt;a href=&quot;runtime_control#rts-options-gc&quot;&gt;가비지 수집을 제어하기 위해 RTS 옵션&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="f8b24a10f616425c10b2f160079c3eaf143ea5b5" translate="yes" xml:space="preserve">
          <source>Setting Window to Foreground. See: &lt;a href=&quot;https://github.com/haskell/win32/pull/9&quot;&gt;https://github.com/haskell/win32/pull/9&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&quot;&gt;http://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&lt;/a&gt;.</source>
          <target state="translated">창을 전경으로 설정. 참조 : &lt;a href=&quot;https://github.com/haskell/win32/pull/9&quot;&gt;https://github.com/haskell/win32/pull/9&lt;/a&gt; , &lt;a href=&quot;http://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&quot;&gt;http://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="592c4220f4b3f852447765c28046882c8a6233ef" translate="yes" xml:space="preserve">
          <source>Setting Window to Foreground. See: &lt;a href=&quot;https://github.com/haskell/win32/pull/9&quot;&gt;https://github.com/haskell/win32/pull/9&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&quot;&gt;http://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&lt;/a&gt;.</source>
          <target state="translated">창을 전경으로 설정. 참조 : &lt;a href=&quot;https://github.com/haskell/win32/pull/9&quot;&gt;https://github.com/haskell/win32/pull/9&lt;/a&gt; , &lt;a href=&quot;https://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&quot;&gt;http://stackoverflow.com/questions/14297146/win32-setforegroundwindow-in-haskell&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="911e0f1e977e5874471327f6e88d2e9b306f382c" translate="yes" xml:space="preserve">
          <source>Setting file modes</source>
          <target state="translated">파일 모드 설정</target>
        </trans-unit>
        <trans-unit id="5a156bca207a4fa656b883b4543cb1921c262677" translate="yes" xml:space="preserve">
          <source>Setting file sizes</source>
          <target state="translated">파일 크기 설정</target>
        </trans-unit>
        <trans-unit id="104d388801cda83de3626670853dc2869f6271b4" translate="yes" xml:space="preserve">
          <source>Setting something like &lt;code&gt;GHCRTS=-M2G&lt;/code&gt; in your environment is a handy way to avoid Haskell programs growing beyond the real memory in your machine, which is easy to do by accident and can cause the machine to slow to a crawl until the OS decides to kill the process (and you hope it kills the right one).</source>
          <target state="translated">사용자 환경에서 &lt;code&gt;GHCRTS=-M2G&lt;/code&gt; 와 같은 것을 설정하면 하스켈 프로그램이 컴퓨터의 실제 메모리를 넘어 성장하는 것을 피할 수있는 편리한 방법입니다. 프로세스 (그리고 당신은 그것이 올바른 것을 죽이기를 바랍니다).</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="c5f6db8a79708d4475b4d45a9e56ed745f590d17" translate="yes" xml:space="preserve">
          <source>SetupTermError</source>
          <target state="translated">SetupTermError</target>
        </trans-unit>
        <trans-unit id="6af121bc9dfbeb28111655f8f6ac0ed254fd498a" translate="yes" xml:space="preserve">
          <source>Several functions take special advantage of sharing to produce results using much less time and memory than one might expect. These are documented individually for functions, but also include certain class methods:</source>
          <target state="translated">여러 기능은 공유의 특별한 이점을 활용하여 예상보다 훨씬 더 적은 시간과 메모리를 사용하여 결과를 생성합니다. ㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ ㅇㅇㅇ 이들은 함수에 대해 개별적으로 문서화되지만 특정 클래스 메소드도 포함합니다.</target>
        </trans-unit>
        <trans-unit id="5d264d925dcb62f989810a7e93f01c3dbbe4c5f3" translate="yes" xml:space="preserve">
          <source>Several functions take special advantage of sharing to produce results using much less time and memory than one might expect. These are documented individually for functions, but also include the methods &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, each of which take time and space proportional to the logarithm of the size of the result.</source>
          <target state="translated">일부 기능은 공유 할 때 특별한 이점을 활용하여 예상보다 훨씬 적은 시간과 메모리를 사용하여 결과를 생성합니다. 이것들은 함수에 대해 개별적으로 문서화되었지만 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 메소드도 포함합니다. 각 메소드 는 결과 크기의 로그에 비례하여 시간과 공간이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="2b2ffa3efe672ce8c5db2d19f5a868eb06b858f6" translate="yes" xml:space="preserve">
          <source>Several functions take special advantage of sharing to produce results using much less time and memory than one might expect. These are documented individually for functions, but also include the methods &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;, each of which take time and space proportional to the logarithm of the size of the result.</source>
          <target state="translated">여러 기능은 공유의 특별한 이점을 활용하여 예상보다 훨씬 적은 시간과 메모리를 사용하여 결과를 생성합니다. 이들은 함수에 대해 개별적으로 문서화되어 있지만 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-functor#v:-60--36-&quot;&gt;&amp;lt;$&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/control-applicative#v:-42--62-&quot;&gt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; 메서드도 포함되며 , 각 메서드 에는 결과 크기의 로그에 비례하는 시간과 공간이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="14623131cbbfbf706f6da750cb4eda364534f0b7" translate="yes" xml:space="preserve">
          <source>Several type synonyms are provided for convenience:</source>
          <target state="translated">편의를 위해 여러 유형 동의어가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="608834b8d971a99fa89ed3af5a6e5012cd7bd2a3" translate="yes" xml:space="preserve">
          <source>ShareMode</source>
          <target state="translated">ShareMode</target>
        </trans-unit>
        <trans-unit id="583a9b1c36af1bd025814d0fc796efab9d31a19c" translate="yes" xml:space="preserve">
          <source>Shared libraries allow a single instance of some pre-compiled code to be shared between several programs. In contrast, with static linking the code is copied into each program. Using shared libraries can thus save disk space. They also allow a single copy of code to be shared in memory between several programs that use it. Shared libraries are often used as a way of structuring large projects, especially where different parts are written in different programming languages. Shared libraries are also commonly used as a plugin mechanism by various applications. This is particularly common on Windows using COM.</source>
          <target state="translated">공유 라이브러리를 사용하면 사전 컴파일 된 코드의 단일 인스턴스를 여러 프로그램간에 공유 할 수 있습니다. 반대로 정적 링크를 사용하면 코드가 각 프로그램에 복사됩니다. 따라서 공유 라이브러리를 사용하면 디스크 공간을 절약 할 수 있습니다. 또한 코드를 사용하는 여러 프로그램간에 단일 코드 사본을 메모리에서 공유 할 수 있습니다. 공유 라이브러리는 대규모 프로젝트를 구성하는 방법으로 사용되며, 특히 다른 부분이 다른 프로그래밍 언어로 작성된 경우에 특히 유용합니다. 공유 라이브러리는 일반적으로 다양한 응용 프로그램에서 플러그인 메커니즘으로 사용됩니다. COM을 사용하는 Windows에서 특히 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="13954234065088eecc3bac65c756d464b4d46a13" translate="yes" xml:space="preserve">
          <source>Shared memory locations that support atomic memory transactions.</source>
          <target state="translated">원 자성 메모리 트랜잭션을 지원하는 공유 메모리 위치.</target>
        </trans-unit>
        <trans-unit id="9a6aa7a13d566b94eda1e2645e28063caf25a8e2" translate="yes" xml:space="preserve">
          <source>Shared operators</source>
          <target state="translated">공유 운영자</target>
        </trans-unit>
        <trans-unit id="274fc725957aa6d4979c2432b7d496117e9ed8db" translate="yes" xml:space="preserve">
          <source>SharedLock</source>
          <target state="translated">SharedLock</target>
        </trans-unit>
        <trans-unit id="5e34744b030e47f16f130270af0058932e6a1f29" translate="yes" xml:space="preserve">
          <source>Sharing mode, no sharing, share read, share read+write</source>
          <target state="translated">공유 모드, 공유 안함, 공유 읽기, 공유 읽기 + 쓰기</target>
        </trans-unit>
        <trans-unit id="38f4b8a455a292466f157f316e3093c50f02bae3" translate="yes" xml:space="preserve">
          <source>Shift left logical. Result undefined if shift amount is not in the range 0 to word size - 1 inclusive.</source>
          <target state="translated">논리적으로 왼쪽으로 이동합니다. 이동량이 0에서 단어 크기-1을 포함하지 않는 경우 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b2f8cb7e781b6bb9aed0002ab2fc6106b973ae86" translate="yes" xml:space="preserve">
          <source>Shift left. Result undefined if shift amount is not in the range 0 to word size - 1 inclusive.</source>
          <target state="translated">왼쪽으로 이동 이동량이 0에서 단어 크기-1을 포함하지 않는 경우 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e901c21d90a3526cb783e1819f6ca30b9c70da91" translate="yes" xml:space="preserve">
          <source>Shift right arithmetic. Result undefined if shift amount is not in the range 0 to word size - 1 inclusive.</source>
          <target state="translated">오른쪽 산술을 쉬프트하십시오. 이동량이 0에서 단어 크기-1을 포함하지 않는 경우 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="28a0660fffccb3ba1167e3a72d89322af4281d51" translate="yes" xml:space="preserve">
          <source>Shift right logical. Result undefined if shift amount is not in the range 0 to word size - 1 inclusive.</source>
          <target state="translated">논리를 오른쪽으로 이동 이동량이 0에서 단어 크기-1을 포함하지 않는 경우 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a52c028eff42818390bc2b9bd7519a304a6a92f1" translate="yes" xml:space="preserve">
          <source>Shift the argument left by the specified number of bits (which must be non-negative).</source>
          <target state="translated">인수를 지정된 비트 수만큼 왼쪽으로 이동하십시오 (음수가 아니어야 함).</target>
        </trans-unit>
        <trans-unit id="b6e53836ae613854d860d1f2fe1c8505679f067d" translate="yes" xml:space="preserve">
          <source>Shift the argument left by the specified number of bits (which must be non-negative). Some instances may throw an &lt;code&gt;&lt;a href=&quot;control-exception#v:Overflow&quot;&gt;Overflow&lt;/a&gt;&lt;/code&gt; exception if given a negative input.</source>
          <target state="translated">인수를 지정된 비트 수만큼 왼쪽으로 이동하십시오 (음수가 아니어야 함). 음의 입력이 주어지면 일부 인스턴스에서 &lt;code&gt;&lt;a href=&quot;control-exception#v:Overflow&quot;&gt;Overflow&lt;/a&gt;&lt;/code&gt; 예외 가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c3166679ee9af6f6f1606e73456f12038a442fcb" translate="yes" xml:space="preserve">
          <source>Shift the argument left by the specified number of bits. The result is undefined for negative shift amounts and shift amounts greater or equal to the &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지정된 비트 수만큼 인수를 왼쪽으로 이동하십시오. 음의 시프트 량 및 시프트 량은 &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt; 보다 크거나 같은 경우 결과가 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="470c27383beb816adacca5b2bcd6516fa9b92d07" translate="yes" xml:space="preserve">
          <source>Shift the argument right (signed) by the specified number of bits (which must be non-negative). The &lt;a href=&quot;ra&quot;&gt;RA&lt;/a&gt; means &quot;right, arithmetic&quot; (as opposed to RL for logical)</source>
          <target state="translated">인수를 지정된 비트 수만큼 음수 (서명)만큼 이동하십시오 (음수가 아니어야 함). &lt;a href=&quot;ra&quot;&gt;RA의&lt;/a&gt; 수단 &quot;오른쪽 산술&quot;(논리 대한 RL 대조적으로)</target>
        </trans-unit>
        <trans-unit id="5043c22cbbec3f3a95767439230311f3d6b9e1f7" translate="yes" xml:space="preserve">
          <source>Shift the argument right (unsigned) by the specified number of bits (which must be non-negative). The &lt;a href=&quot;rl&quot;&gt;RL&lt;/a&gt; means &quot;right, logical&quot; (as opposed to RA for arithmetic)</source>
          <target state="translated">지정된 비트 수만큼 음수가 아닌 인수를 오른쪽 (부호없는)으로 이동하십시오. &lt;a href=&quot;rl&quot;&gt;RL의&lt;/a&gt; 수단 &quot;오른쪽 논리 '(산술 RA는 대조적으로)</target>
        </trans-unit>
        <trans-unit id="51b6bbae92783fa587d037a508b5389c9ab60376" translate="yes" xml:space="preserve">
          <source>Shift the argument right by the specified number of bits (which must be non-negative). The &lt;a href=&quot;rl&quot;&gt;RL&lt;/a&gt; means &quot;right, logical&quot; (as opposed to RA for arithmetic) (although an arithmetic right shift wouldn't make sense for Word#)</source>
          <target state="translated">인수를 지정된 비트 수만큼 오른쪽으로 이동하십시오 (음수가 아니어야 함). &lt;a href=&quot;rl&quot;&gt;의 RL&lt;/a&gt; (산술에 대한 RA 반대) (산술 오른쪽 시프트는 워드 번호에 대한 이해가되지 것입니다 있지만) 수단 &quot;오른쪽 논리적&quot;</target>
        </trans-unit>
        <trans-unit id="0619240237ce131da774f1374298d4c953fc7e8d" translate="yes" xml:space="preserve">
          <source>Shift the first argument right by the specified number of bits, which must be non-negative and smaller than the number of bits in the type.</source>
          <target state="translated">음수가 아니어야하며 유형의 비트 수보다 작아야하는 지정된 비트 수만큼 첫 번째 인수를 오른쪽으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="46adb6ebe5f10576d4b174f20323e6c4db2a6e91" translate="yes" xml:space="preserve">
          <source>Shift the first argument right by the specified number of bits. The result is undefined for negative shift amounts and shift amounts greater or equal to the &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt;. Some instances may throw an &lt;code&gt;&lt;a href=&quot;control-exception#v:Overflow&quot;&gt;Overflow&lt;/a&gt;&lt;/code&gt; exception if given a negative input.</source>
          <target state="translated">지정된 비트 수만큼 첫 번째 인수를 오른쪽으로 이동하십시오. 음의 시프트 량 및 시프트 량은 &lt;code&gt;&lt;a href=&quot;data-bits#v:bitSize&quot;&gt;bitSize&lt;/a&gt;&lt;/code&gt; 보다 크거나 같은 경우 결과가 정의되지 않습니다 . 음의 입력이 주어지면 일부 인스턴스에서 &lt;code&gt;&lt;a href=&quot;control-exception#v:Overflow&quot;&gt;Overflow&lt;/a&gt;&lt;/code&gt; 예외 가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1a32afa70276a01c18c059113ba751b05104a74c" translate="yes" xml:space="preserve">
          <source>Shift-left operation</source>
          <target state="translated">왼쪽 시프트 조작</target>
        </trans-unit>
        <trans-unit id="0c5bc1ae01ce5504f9c4592b24f607b48210b732" translate="yes" xml:space="preserve">
          <source>Shifts</source>
          <target state="translated">Shifts</target>
        </trans-unit>
        <trans-unit id="08e0b171e80174af8f80564fa9b86dd93a7ae3d6" translate="yes" xml:space="preserve">
          <source>ShmOpenFlags</source>
          <target state="translated">ShmOpenFlags</target>
        </trans-unit>
        <trans-unit id="95895f33c6a9f0dfa8b81159786f55bbd7ac5a0d" translate="yes" xml:space="preserve">
          <source>Short-circuit folds</source>
          <target state="translated">단락 주름</target>
        </trans-unit>
        <trans-unit id="4201119b032db5c4951c0cb35d2d2de5c804364c" translate="yes" xml:space="preserve">
          <source>Short-circuiting</source>
          <target state="translated">Short-circuiting</target>
        </trans-unit>
        <trans-unit id="3544188ea4cceda2e27a126288058ee4da4a27f9" translate="yes" xml:space="preserve">
          <source>ShortByteString</source>
          <target state="translated">ShortByteString</target>
        </trans-unit>
        <trans-unit id="6573672f191fd1aa7184c9c7463aac2307f40385" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">소문자를 사용 하는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="56e27a99e38741b3b87777b7c4dc04c2829c5d08" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 사용 하는 Word16 의 가장 짧은 16 진 인코딩 .</target>
        </trans-unit>
        <trans-unit id="dfdd9446387fcb0ec3c52de0f37815bd0ead1c76" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 사용 하는 Word32 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="b29fa1327fbe2d0a9435aa142e5fe6a7fa89516a" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 사용 하는 Word64 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="bdcf7077aa810b8c43c689c42f8ac17e0857c869" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">소문자를 사용 하는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 의 가장 짧은 16 진 인코딩 .</target>
        </trans-unit>
        <trans-unit id="c5b3299b64f41e53c5656a894b54bb0f75c7a562" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">소문자를 사용 하는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="a7b69106f4f5891e3677d2928483100449c294dc" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 사용 하는 Word16 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="cdc270bd4463bfc79b05862c35bff48530d61308" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 사용 하는 Word32 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="f85f67b14e8e5a59ca6c871a3e2a191d9ce10be2" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 의 가장 짧은 16 진수 인코딩 사용 .</target>
        </trans-unit>
        <trans-unit id="c5930a3963156e2a5c930d8f980579a40e8741f5" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">소문자를 사용 하는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="d261053f7798346589e438e38d4551a0ed78fdbf" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">소문자를 사용 하는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="30ed90abafb2a2cdf1f6c12eb075d06480cadf66" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 사용 하는 Word16 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="4b979b0f99707dcc9955d6e53d501cfa19bc7cac" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word32&quot;&gt;Word32&lt;/a&gt;&lt;/code&gt; 사용 하는 Word32 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="4fc6b5d04646492d4498d26eb286aae109029911" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word64&quot;&gt;Word64&lt;/a&gt;&lt;/code&gt; 사용 하는 Word64 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="e18fc21a23bff33729f2a7c124cb46b96e38390b" translate="yes" xml:space="preserve">
          <source>Shortest hexadecimal encoding of a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; using lower-case characters.</source>
          <target state="translated">소문자를 사용 하는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 의 가장 짧은 16 진수 인코딩입니다 .</target>
        </trans-unit>
        <trans-unit id="60afd75a2b48bdc652a0df2879db9c8e99176f89" translate="yes" xml:space="preserve">
          <source>Should rather be called &lt;code&gt;intToInteger&lt;/code&gt;</source>
          <target state="translated">오히려 &lt;code&gt;intToInteger&lt;/code&gt; 라고 해야합니다.</target>
        </trans-unit>
        <trans-unit id="038bf6d0706d4605e93d495d1dd3f386418854e1" translate="yes" xml:space="preserve">
          <source>Should satisfy the law:</source>
          <target state="translated">법률을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="df01aa5e87d9f37c0304ad2ad1f465aabd71c890" translate="yes" xml:space="preserve">
          <source>Should the RTS produce a cost-center summary?</source>
          <target state="translated">RTS가 코스트 센터 요약을 작성해야합니까?</target>
        </trans-unit>
        <trans-unit id="bf378608eeb65194b94d70b91defec0ecbb44b40" translate="yes" xml:space="preserve">
          <source>Should the handler need to abort processing, it should use &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; an exception (preferably a &lt;code&gt;&lt;a href=&quot;data-text-encoding-error#t:UnicodeException&quot;&gt;UnicodeException&lt;/a&gt;&lt;/code&gt;). It may use the description provided to construct a more helpful error report.</source>
          <target state="translated">중단 처리 핸들러 필요가 게다가 안되는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 예외 (바람직 &lt;code&gt;&lt;a href=&quot;data-text-encoding-error#t:UnicodeException&quot;&gt;UnicodeException&lt;/a&gt;&lt;/code&gt; 을 ). 제공된 설명을 사용하여보다 유용한 오류 보고서를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="923b18d477f2cd41d3c8498a9969502f09a82ce0" translate="yes" xml:space="preserve">
          <source>Should the handler need to abort processing, it should use &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; an exception (preferably a &lt;code&gt;&lt;a href=&quot;data-text-encoding-error#t:UnicodeException&quot;&gt;UnicodeException&lt;/a&gt;&lt;/code&gt;). It may use the description provided to construct a more helpful error report.</source>
          <target state="translated">처리기가 처리를 중단해야하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 를 사용 하거나 예외를 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.10.2/docs/html/libraries/base-4.14.1.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 해야합니다 (바람직하게는 &lt;code&gt;&lt;a href=&quot;data-text-encoding-error#t:UnicodeException&quot;&gt;UnicodeException&lt;/a&gt;&lt;/code&gt; ). 제공된 설명을 사용하여보다 유용한 오류 보고서를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="554b4edbf1375b08df9085cbde94c81847f401e0" translate="yes" xml:space="preserve">
          <source>Should the handler need to abort processing, it should use &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; an exception (preferably a &lt;code&gt;&lt;a href=&quot;data-text-encoding-error#t:UnicodeException&quot;&gt;UnicodeException&lt;/a&gt;&lt;/code&gt;). It may use the description provided to construct a more helpful error report.</source>
          <target state="translated">처리기가 처리를 중단해야하는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; 를 사용 하거나 예외를 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/9.0.1/docs/html/libraries/base-4.15.0.0/Control-Exception-Base.html#v:throw&quot;&gt;throw&lt;/a&gt;&lt;/code&gt; 해야합니다 (바람직하게는 &lt;code&gt;&lt;a href=&quot;data-text-encoding-error#t:UnicodeException&quot;&gt;UnicodeException&lt;/a&gt;&lt;/code&gt; ). 제공된 설명을 사용하여보다 유용한 오류 보고서를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4198e75e3af4d31ecdb60ac624c0fe4351c8180d" translate="yes" xml:space="preserve">
          <source>Should we produce a summary of the garbage collector statistics after the program has exited?</source>
          <target state="translated">프로그램이 종료 된 후 가비지 수집기 통계 요약을 생성해야합니까?</target>
        </trans-unit>
        <trans-unit id="3c652c65622492bec520d3119019e65c87e27305" translate="yes" xml:space="preserve">
          <source>Should you wish to see levity polymorphism in your types, enable the flag &lt;a href=&quot;#ghc-flag--fprint-explicit-runtime-reps&quot;&gt;&lt;code&gt;-fprint-explicit-runtime-reps&lt;/code&gt;&lt;/a&gt;. For example,</source>
          <target state="translated">유형에서 &lt;a href=&quot;#ghc-flag--fprint-explicit-runtime-reps&quot;&gt; &lt;code&gt;-fprint-explicit-runtime-reps&lt;/code&gt; &lt;/a&gt; 다형성을 보려면 -fprint-explicit-runtime-reps 플래그를 활성화하십시오 . 예를 들면</target>
        </trans-unit>
        <trans-unit id="2895242999379ba36350c153d4bfcf8184653646" translate="yes" xml:space="preserve">
          <source>Should you wish to see levity polymorphism in your types, enable the flag &lt;a href=&quot;using#ghc-flag--fprint-explicit-runtime-reps&quot;&gt;&lt;code&gt;-fprint-explicit-runtime-reps&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">유형에서 &lt;a href=&quot;using#ghc-flag--fprint-explicit-runtime-reps&quot;&gt; &lt;code&gt;-fprint-explicit-runtime-reps&lt;/code&gt; &lt;/a&gt; 다형성을 보려면 플래그 -fprint-explicit-runtime-reps를 활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="21b265b29551b11438c8fce43d62f0508b9c3b80" translate="yes" xml:space="preserve">
          <source>ShouldRetainCAFs</source>
          <target state="translated">ShouldRetainCAFs</target>
        </trans-unit>
        <trans-unit id="d97d1ee339e4eeaba8cac91dca37c8b4ec8f5501" translate="yes" xml:space="preserve">
          <source>Show</source>
          <target state="translated">Show</target>
        </trans-unit>
        <trans-unit id="117d29428688243aaaaab142ae449651dc6629f6" translate="yes" xml:space="preserve">
          <source>Show &lt;em&gt;non-negative&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; numbers in base 10.</source>
          <target state="translated">기수 10에 &lt;em&gt;음이 아닌 &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="acf1cf75ee8f171bde11dd0e3e91773a691821fd" translate="yes" xml:space="preserve">
          <source>Show &lt;em&gt;non-negative&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; numbers in base 16.</source>
          <target state="translated">16 진수 &lt;em&gt;로 음이 아닌 &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="56a6c6a7bb27d30a360d75cd09a099c690e0b00e" translate="yes" xml:space="preserve">
          <source>Show &lt;em&gt;non-negative&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; numbers in base 8.</source>
          <target state="translated">기수 8에 &lt;em&gt;음수가 아닌 &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="3e3b232efc848d3cdba797e3bc15a04962a2670f" translate="yes" xml:space="preserve">
          <source>Show CoreToStg output</source>
          <target state="translated">CoreToStg 출력 표시</target>
        </trans-unit>
        <trans-unit id="f6bbb62ea9eafa153dda5dc2ee2f981379363988" translate="yes" xml:space="preserve">
          <source>Show a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; as a &lt;code&gt;[String]&lt;/code&gt;</source>
          <target state="translated">쇼 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; A와 &lt;code&gt;[String]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cd9f8ae0b4f88e62f250dedec4d7ad79711b70c" translate="yes" xml:space="preserve">
          <source>Show a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; as a &lt;code&gt;[String]&lt;/code&gt;</source>
          <target state="translated">쇼 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; A와 &lt;code&gt;[String]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16e2f460802c9bd67a7fd057be8dc3617ffb09ba" translate="yes" xml:space="preserve">
          <source>Show a &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; as a &lt;code&gt;[String]&lt;/code&gt;</source>
          <target state="translated">쇼 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/ghc-stack-ccs#t:CostCentreStack&quot;&gt;CostCentreStack&lt;/a&gt;&lt;/code&gt; A와 &lt;code&gt;[String]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13692eca48186ec0ecd895780a325fda9e13feba" translate="yes" xml:space="preserve">
          <source>Show a floating-point value in the hexadecimal format, similar to the &lt;code&gt;%a&lt;/code&gt; specifier in C's printf.</source>
          <target state="translated">C의 printf에 있는 &lt;code&gt;%a&lt;/code&gt; 지정자 와 유사한 16 진수 형식의 부동 소수점 값을 표시하십시오 .</target>
        </trans-unit>
        <trans-unit id="f913e71ca89b869c42305e4cf638482299992887" translate="yes" xml:space="preserve">
          <source>Show a list (using square brackets and commas), given a function for showing elements.</source>
          <target state="translated">요소를 표시하는 기능이있는 목록 (대괄호와 쉼표 사용)을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="e43e221ce3f46ebb3bf206d35b3380250ce6a74f" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value to full precision, using standard decimal notation for arguments whose absolute value lies between &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;9,999,999&lt;/code&gt;, and scientific notation otherwise.</source>
          <target state="translated">서명보기 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 의 절대 값의 거짓말 인수 표준 진수 표기법을 사용하여, 전체 정밀도 값을 &lt;code&gt;0.1&lt;/code&gt; 및 &lt;code&gt;9,999,999&lt;/code&gt; 달리, 과학 표기법.</target>
        </trans-unit>
        <trans-unit id="acb80109bd5ef5d33f98c9ae9e62bef32eb1a9f4" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value to full precision, using standard decimal notation for arguments whose absolute value lies between &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;9,999,999&lt;/code&gt;, and scientific notation otherwise.</source>
          <target state="translated">절대 값이 &lt;code&gt;0.1&lt;/code&gt; 에서 &lt;code&gt;9,999,999&lt;/code&gt; 사이 인 인수에 대해 표준 십진 표기법을 사용 하고 그렇지 않은 경우 과학적 표기법을 사용하여 부호있는 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 값을 전체 정밀도로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="74d4c6a537d33866b5e027436caa379eddad6fff" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value to full precision, using standard decimal notation for arguments whose absolute value lies between &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;9,999,999&lt;/code&gt;, and scientific notation otherwise.</source>
          <target state="translated">절대 값이 &lt;code&gt;0.1&lt;/code&gt; 에서 &lt;code&gt;9,999,999&lt;/code&gt; 사이 인 인수에 대해 표준 십진 표기법을 사용 하고 그렇지 않은 경우 과학적 표기법을 사용하여 부호있는 &lt;code&gt;&lt;a href=&quot;../base-4.15.0.0/prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 값을 전체 정밀도로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="655607e0094501ed2be906fe48ca250abcfa4446" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;ghc-float#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value to full precision using standard decimal notation for arguments whose absolute value lies between &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;9,999,999&lt;/code&gt;, and scientific notation otherwise.</source>
          <target state="translated">서명보기 &lt;code&gt;&lt;a href=&quot;ghc-float#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 의 절대 값이 거짓 사이의 인수 표준 진수 표기법을 사용하여 전체 정밀도 값 &lt;code&gt;0.1&lt;/code&gt; 및 &lt;code&gt;9,999,999&lt;/code&gt; 달리, 과학 표기법을.</target>
        </trans-unit>
        <trans-unit id="7833c1f677da9a57a749b69c54994e027b564fc2" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value to full precision using standard decimal notation for arguments whose absolute value lies between &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;9,999,999&lt;/code&gt;, and scientific notation otherwise.</source>
          <target state="translated">서명보기 &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 의 절대 값이 거짓 사이의 인수 표준 진수 표기법을 사용하여 전체 정밀도 값 &lt;code&gt;0.1&lt;/code&gt; 및 &lt;code&gt;9,999,999&lt;/code&gt; 달리, 과학 표기법을.</target>
        </trans-unit>
        <trans-unit id="83475c788fb6600a77565e8fbf321c1cdb3d99a1" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value using scientific (exponential) notation (e.g. &lt;code&gt;2.45e2&lt;/code&gt;, &lt;code&gt;1.5e-3&lt;/code&gt;).</source>
          <target state="translated">과학적 (지수) 표기법 (예 : &lt;code&gt;2.45e2&lt;/code&gt; , &lt;code&gt;1.5e-3&lt;/code&gt; )을 사용하여 서명 된 &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 값을 표시하십시오 .</target>
        </trans-unit>
        <trans-unit id="02e6ea9af4efca08b8f3c6e64035d16e99b21d5b" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value using standard decimal notation (e.g. &lt;code&gt;245000&lt;/code&gt;, &lt;code&gt;0.0015&lt;/code&gt;).</source>
          <target state="translated">표준 10 진수 표기법 (예 : &lt;code&gt;245000&lt;/code&gt; , &lt;code&gt;0.0015&lt;/code&gt; )을 사용하여 부호있는 &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 값을 표시하십시오 .</target>
        </trans-unit>
        <trans-unit id="03f7fa01d32f4e2f9b54104be5978b502ea8cb9f" translate="yes" xml:space="preserve">
          <source>Show a signed &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; value using standard decimal notation for arguments whose absolute value lies between &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;9,999,999&lt;/code&gt;, and scientific notation otherwise.</source>
          <target state="translated">서명보기 &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 의 절대 값이 거짓 사이의 인수 표준 진수 표기법을 사용하여 값 &lt;code&gt;0.1&lt;/code&gt; 및 &lt;code&gt;9,999,999&lt;/code&gt; 달리, 과학 표기법을.</target>
        </trans-unit>
        <trans-unit id="eaf538a2c78e6687f4dbe685bf90666dd8d48144" translate="yes" xml:space="preserve">
          <source>Show a type representation</source>
          <target state="translated">유형 표현 표시</target>
        </trans-unit>
        <trans-unit id="024ac7d8d11b4e2986b03a249f8abd0c904d123f" translate="yes" xml:space="preserve">
          <source>Show a value in the format, if representable</source>
          <target state="translated">표현 가능한 경우 형식으로 값을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="4b7a4151b67efe9cefbd5725d97622068e6694c5" translate="yes" xml:space="preserve">
          <source>Show a value in the format, or error if unrepresentable</source>
          <target state="translated">형식으로 값을 표시하거나 표현할 수없는 경우 오류 표시</target>
        </trans-unit>
        <trans-unit id="4ac9419264b8cd5acd5dfd4d21b01a8b3e2d3532" translate="yes" xml:space="preserve">
          <source>Show allocation and runtime statistics for various stages of compilation.</source>
          <target state="translated">다양한 컴파일 단계에 대한 할당 및 런타임 통계를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="83516217e9b3bdb2505c8054e270cdc1bfa38ed1" translate="yes" xml:space="preserve">
          <source>Show allocation and runtime statistics for various stages of compilation. Allocations are measured in bytes. Timings are measured in milliseconds.</source>
          <target state="translated">다양한 컴파일 단계에 대한 할당 및 런타임 통계를 표시합니다. 할당은 바이트 단위로 측정됩니다. 타이밍은 밀리 초 단위로 측정됩니다.</target>
        </trans-unit>
        <trans-unit id="a5efb61f79bd9234a002a9cb9f057671d8e47bf1" translate="yes" xml:space="preserve">
          <source>Show constraints when reporting typed holes.</source>
          <target state="translated">유형이 지정된 구멍을보고 할 때 구속 조건을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="9a147147deb6493ac159aee5669b9717aef338ff" translate="yes" xml:space="preserve">
          <source>Show in ISO 8601 Ordinal Date format (yyyy-ddd)</source>
          <target state="translated">ISO 8601 서수 날짜 형식으로 표시 (yyyy-ddd)</target>
        </trans-unit>
        <trans-unit id="afb826724b2cd9f2d602f35271085b26f8512996" translate="yes" xml:space="preserve">
          <source>Show in ISO 8601 Week Date format as yyyy-Www-d (e.g. &quot;2006-W46-3&quot;).</source>
          <target state="translated">yyyy-Www-d (예 : &quot;2006-W46-3&quot;)로 ISO 8601 Week Date 형식으로 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="556868b631229aa9d8ff5b6afc0f4ed6fa7dcdab" translate="yes" xml:space="preserve">
          <source>Show in ISO 8601 format (yyyy-mm-dd)</source>
          <target state="translated">ISO 8601 형식으로 표시 (yyyy-mm-dd)</target>
        </trans-unit>
        <trans-unit id="4961f0e3173af1c0d92452eecdeec2827dc30124" translate="yes" xml:space="preserve">
          <source>Show in proleptic Julian year and day format (yyyy-ddd)</source>
          <target state="translated">줄리안 율리우스 년과 일 형식으로 표시 (yyyy-ddd)</target>
        </trans-unit>
        <trans-unit id="3738b3260929b65ec16b653b3c3a9efae2f8f165" translate="yes" xml:space="preserve">
          <source>Show in the most commonly used ISO 8601 format.</source>
          <target state="translated">가장 일반적으로 사용되는 ISO 8601 형식으로 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="40c270f2bac6fc2501d4cef99e3eb8e339b58924" translate="yes" xml:space="preserve">
          <source>Show just a single field of the installed package description for &lt;code&gt;P&lt;/code&gt;. Multiple fields can be selected by separating them with commas</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; 에 대해 설치된 패키지 설명의 단일 필드 만 표시하십시오 . 쉼표로 구분하여 여러 필드를 선택할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d0faea938c36bd656177bef1c36b6444e9ed91c5" translate="yes" xml:space="preserve">
          <source>Show output from each STG-to-STG pass</source>
          <target state="translated">각 STG-to-STG 패스의 출력 표시</target>
        </trans-unit>
        <trans-unit id="0ed1cebcb7a9bc78d1767f4efa25a6ddab123221" translate="yes" xml:space="preserve">
          <source>Show output from each core-to-core pass</source>
          <target state="translated">각 코어-투-패스 패스의 출력 표시</target>
        </trans-unit>
        <trans-unit id="e4b24a50e7f3934afbfc83402685bb6ced50bb4b" translate="yes" xml:space="preserve">
          <source>Show output from main C-\- pipeline passes</source>
          <target state="translated">주요 C-\-파이프 라인 패스의 출력 표시</target>
        </trans-unit>
        <trans-unit id="b5ae6859ddc29cf979e805a4215774d7885bef31" translate="yes" xml:space="preserve">
          <source>Show output from main C-\- pipeline passes (grouped by proc)</source>
          <target state="translated">기본 C-\-파이프 라인 패스의 출력 표시 (proc별로 그룹화 됨)</target>
        </trans-unit>
        <trans-unit id="70bce662e9062620f80815f21cc16672010761be" translate="yes" xml:space="preserve">
          <source>Show output of last STG pass.</source>
          <target state="translated">마지막 STG 패스의 출력을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="40203dda604b39e83b98b0160a4fa91c962373fb" translate="yes" xml:space="preserve">
          <source>Show statistics for fast string usage when finished</source>
          <target state="translated">완료시 빠른 문자열 사용에 대한 통계 표시</target>
        </trans-unit>
        <trans-unit id="a504ea4918a73e784191cf8cadcc145e4baef3fb" translate="yes" xml:space="preserve">
          <source>Show statistics on the usage of fast strings by the compiler.</source>
          <target state="translated">컴파일러에서 빠른 문자열 사용에 대한 통계를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="15f0977262d8b15de95a92064ddda120a6abc341" translate="yes" xml:space="preserve">
          <source>Show the bindings made at the prompt and their types.</source>
          <target state="translated">프롬프트에서 작성된 바인딩 및 해당 유형을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="28f89a7efb551473fa814d00df8904658b42a4bc" translate="yes" xml:space="preserve">
          <source>Show the current working directory (as set via &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt;&lt;code&gt;:cd&lt;/code&gt;&lt;/a&gt; command), as well as the list of directories searched for source files (as set by the &lt;code&gt;-i&lt;/code&gt; option).</source>
          <target state="translated">현재 작업 디렉토리 ( &lt;a href=&quot;#ghci-cmd-:cd&quot;&gt; &lt;code&gt;:cd&lt;/code&gt; &lt;/a&gt; 명령을 통해 설정 )와 소스 파일을 검색 한 디렉토리 목록 ( &lt;code&gt;-i&lt;/code&gt; 옵션 으로 설정 )을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="06a3a8fa8e767a5deebcbb315f19467f070333f6" translate="yes" xml:space="preserve">
          <source>Show the currently active language flags for expressions typed at the prompt (see also &lt;a href=&quot;#ghci-cmd-:seti&quot;&gt;&lt;code&gt;:seti&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">프롬프트에 입력 된 표현식에 대해 현재 활성 언어 플래그를 표시하십시오 ( &lt;a href=&quot;#ghci-cmd-:seti&quot;&gt; &lt;code&gt;:seti&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="53c0a868fbcfa7a64327e51999687a40dba89052" translate="yes" xml:space="preserve">
          <source>Show the currently active language flags for source files.</source>
          <target state="translated">소스 파일에 대해 현재 활성화 된 언어 플래그를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="7e7f8e31c3c7b636fff61336a41f3cf5933177b6" translate="yes" xml:space="preserve">
          <source>Show the currently active package flags, as well as the list of packages currently loaded.</source>
          <target state="translated">현재 활성화 된 패키지 플래그와 현재로드 된 패키지 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="5574acbc151b9dd07bf6ae5d8664d6f13a1a82bc" translate="yes" xml:space="preserve">
          <source>Show the differences vs. the old interface</source>
          <target state="translated">이전 인터페이스와의 차이점 표시</target>
        </trans-unit>
        <trans-unit id="a81a9150b94eae9fbd51cfd6db684dd8e5f3f837" translate="yes" xml:space="preserve">
          <source>Show the imports that are currently in force, as created by &lt;code&gt;import&lt;/code&gt; and &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; commands.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 및 &lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; 명령 으로 작성된 현재 적용중인 가져 오기를 표시하십시오 .</target>
        </trans-unit>
        <trans-unit id="34b75e6c8dfbe2ca768a85bdc7bd776bfe32ccef" translate="yes" xml:space="preserve">
          <source>Show the list of modules currently loaded.</source>
          <target state="translated">현재로드 된 모듈 목록을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="31b56e398b4d864e4d7a8a31be37cb76a8a54c5f" translate="yes" xml:space="preserve">
          <source>Show the names of modules that GHCi loaded after a &lt;a href=&quot;ghci#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;ghci#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; 명령 후에 GHCi가로드 한 모듈의 이름을 표시하십시오 .</target>
        </trans-unit>
        <trans-unit id="25ab7debc44d05482144313b87da47401942243d" translate="yes" xml:space="preserve">
          <source>Show the output of CoreToStg pass.</source>
          <target state="translated">CoreToStg 패스의 출력을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b58222d59ce5f7ecd6949b5835cc64ddea5909ec" translate="yes" xml:space="preserve">
          <source>Show the output of each &lt;em&gt;iteration&lt;/em&gt; of the simplifier (each run of the simplifier has a maximum number of iterations, normally 4).</source>
          <target state="translated">단순화 기 의 각 &lt;em&gt;반복&lt;/em&gt; 출력을 표시합니다 (각 단순화 기의 실행에는 최대 반복 횟수가 있으며 일반적으로 4).</target>
        </trans-unit>
        <trans-unit id="3862e8bc3d8608ff50d37aec477df5fe81fa6fa0" translate="yes" xml:space="preserve">
          <source>Show the output of the intermediate Core-to-Core pass. (&lt;em&gt;lots&lt;/em&gt; of output!) So: when we&amp;rsquo;re really desperate:</source>
          <target state="translated">중간 코어 대 코어 패스의 출력을 보여줍니다. ( &lt;em&gt;많은&lt;/em&gt; 출력!) 그래서 : 우리가 정말로 절망적 인 경우 :</target>
        </trans-unit>
        <trans-unit id="1be64e20ffc163ff32f6f1057b29216586a7df33" translate="yes" xml:space="preserve">
          <source>Show the output of the intermediate STG-to-STG pass. (&lt;em&gt;lots&lt;/em&gt; of output!)</source>
          <target state="translated">중간 STG-to-STG 패스의 출력을 보여줍니다. ( &lt;em&gt;많은&lt;/em&gt; 출력!)</target>
        </trans-unit>
        <trans-unit id="adfd8257fe95d91ad70abd2b9e6fbaba3bb057c5" translate="yes" xml:space="preserve">
          <source>Show the output of the last STG pass before we generate Cmm.</source>
          <target state="translated">Cmm를 생성하기 전에 마지막 STG 패스의 출력을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="68d087ea4f9b35e73575659a33a92461b792bfc5" translate="yes" xml:space="preserve">
          <source>Show the output of the unarise pass.</source>
          <target state="translated">상승하지 않은 패스의 출력을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3f0d98a1ccfebb8cc2a096ec79bf4121a7bd5e58" translate="yes" xml:space="preserve">
          <source>Show the text as is.</source>
          <target state="translated">텍스트를 그대로 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="45e992ad602584684c807ff6d3b437e31050c34d" translate="yes" xml:space="preserve">
          <source>Show unarised STG</source>
          <target state="translated">확대되지 않은 STG 표시</target>
        </trans-unit>
        <trans-unit id="18ff03ed114fc78065d8eacccc0669031fb6bab0" translate="yes" xml:space="preserve">
          <source>Show1</source>
          <target state="translated">Show1</target>
        </trans-unit>
        <trans-unit id="d3cc2be9d2d10bc7b577435ab1fbe4b427d0047b" translate="yes" xml:space="preserve">
          <source>Show2</source>
          <target state="translated">Show2</target>
        </trans-unit>
        <trans-unit id="120ac7014d0d2d597e3d53430994b3b2374decd6" translate="yes" xml:space="preserve">
          <source>ShowS</source>
          <target state="translated">ShowS</target>
        </trans-unit>
        <trans-unit id="ba936cdd85da100a54393673071567edb3322323" translate="yes" xml:space="preserve">
          <source>ShowWindowControl</source>
          <target state="translated">ShowWindowControl</target>
        </trans-unit>
        <trans-unit id="163d8174ff4b0e67eec2f84dd87c1bb9e1da3b56" translate="yes" xml:space="preserve">
          <source>Showing</source>
          <target state="translated">Showing</target>
        </trans-unit>
        <trans-unit id="d518a310de1dd39d877eade8a197bc26d09255ea" translate="yes" xml:space="preserve">
          <source>Showing handle state (not portable: GHC only)</source>
          <target state="translated">핸들 상태 표시 (휴대용 아님 : GHC 만 해당)</target>
        </trans-unit>
        <trans-unit id="f391976f27b45e2222ab2b8077db82ced705b371" translate="yes" xml:space="preserve">
          <source>Shows a &lt;em&gt;non-negative&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; number using the base specified by the first argument, and the character representation specified by the second.</source>
          <target state="translated">첫 번째 인수로 지정된 밑과 두 번째로 지정된 문자 표현을 사용하여 &lt;em&gt;음&lt;/em&gt; 이 &lt;em&gt;아닌 &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; 표시합니다.</target>
        </trans-unit>
        <trans-unit id="052cc884d288956acfade3a9b77de2284678144f" translate="yes" xml:space="preserve">
          <source>Shows how to modify Reader content with &lt;code&gt;&lt;a href=&quot;control-monad-reader#v:local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-reader#v:local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 로 Reader 컨텐츠를 수정하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="82a0cb6f0185762603280b351ff4017f6c3a3963" translate="yes" xml:space="preserve">
          <source>Shrink mutable array to new specified size, in the specified state thread. The new size argument must be less than or equal to the current size as reported by &lt;code&gt;getSizeofSmallMutableArray#&lt;/code&gt;.</source>
          <target state="translated">지정된 상태 스레드에서 변경 가능한 배열을 새로 지정된 크기로 축소합니다. 새 크기 인수는 &lt;code&gt;getSizeofSmallMutableArray#&lt;/code&gt; 보고 한 현재 크기보다 작거나 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="431bd266399ea144a2d9b12be58bd9d8f995dc7e" translate="yes" xml:space="preserve">
          <source>Shrink mutable array to new specified size, in the specified state thread. The new size argument must be less than or equal to the current size as reported by &lt;code&gt;sizeofSmallMutableArray#&lt;/code&gt;.</source>
          <target state="translated">지정된 상태 스레드에서 변경 가능한 배열을 새로 지정된 크기로 축소합니다. 새 크기 인수는 &lt;code&gt;sizeofSmallMutableArray#&lt;/code&gt; 에보고 된 현재 크기보다 작거나 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="f3b3f9764654b544c2aa41ecce303f8aa5d01a81" translate="yes" xml:space="preserve">
          <source>Shrink mutable byte array to new specified size (in bytes), in the specified state thread. The new size argument must be less than or equal to the current size as reported by &lt;code&gt;getSizeofMutableByteArray#&lt;/code&gt;.</source>
          <target state="translated">변경 가능한 바이트 배열을 지정된 상태 스레드에서 새로 지정된 크기 (바이트)로 축소합니다. 새 크기 인수는 &lt;code&gt;getSizeofMutableByteArray#&lt;/code&gt; 보고 한 현재 크기보다 작거나 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="c5812cf0f14ba366eb8c3d7b9c7c7e98044bde57" translate="yes" xml:space="preserve">
          <source>Shrink mutable byte array to new specified size (in bytes), in the specified state thread. The new size argument must be less than or equal to the current size as reported by &lt;code&gt;sizeofMutableArray#&lt;/code&gt;.</source>
          <target state="translated">지정된 상태 스레드에서 가변 바이트 배열을 지정된 새 크기 (바이트)로 축소합니다. 새로운 size 인수는 &lt;code&gt;sizeofMutableArray#&lt;/code&gt; 의해보고 된대로 현재 크기보다 작거나 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="8237232a974460e2a77d748af661ebdf08f6f9cd" translate="yes" xml:space="preserve">
          <source>Shrink mutable byte array to new specified size (in bytes), in the specified state thread. The new size argument must be less than or equal to the current size as reported by &lt;code&gt;sizeofMutableByteArray#&lt;/code&gt;.</source>
          <target state="translated">변경 가능한 바이트 배열을 지정된 상태 스레드에서 새로 지정된 크기 (바이트)로 축소합니다. 새 크기 인수는 &lt;code&gt;sizeofMutableByteArray#&lt;/code&gt; 에보고 된 현재 크기보다 작거나 같아야합니다 .</target>
        </trans-unit>
        <trans-unit id="92b276ec3bcdf774d24b35d986ab30eb929cd4d9" translate="yes" xml:space="preserve">
          <source>Side note: the given performance bound is missing some messy terms that only really affect edge cases. Performance degrades smoothly from \( O(1) \) (for \( c = n \)) to \( O(n) \) (for \( c = 1 \)). The true bound is more like \( O \Bigl( \bigl(\frac{n}{c} - 1\bigr) (\log (c + 1)) + 1 \Bigr) \)</source>
          <target state="translated">참고 사항 : 주어진 성능 한계에는 실제 사례에만 영향을 미치는 지저분한 용어가 누락되었습니다. 성능은 \ (O (1) \) (\ (c = n \)의 경우)에서 \ (O (n) \) (\ (c = 1 \)의 경우)로 부드럽게 저하됩니다. 진정한 한계는 \ (O \ Bigl (\ bigl (\ frac {n} {c}-1 \ bigr) (\ log (c + 1)) + 1 \ Bigr) \)와 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="7bee6c65dcbca5aedde79f9f241234ee51b14d9e" translate="yes" xml:space="preserve">
          <source>SigChldInfo</source>
          <target state="translated">SigChldInfo</target>
        </trans-unit>
        <trans-unit id="6b4399d9583ca6e546dcf68dd0206536f7d46df1" translate="yes" xml:space="preserve">
          <source>Sign of a number. The functions &lt;code&gt;&lt;a href=&quot;ghc-num#v:abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-num#v:signum&quot;&gt;signum&lt;/a&gt;&lt;/code&gt; should satisfy the law:</source>
          <target state="translated">숫자의 부호. &lt;code&gt;&lt;a href=&quot;ghc-num#v:abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;ghc-num#v:signum&quot;&gt;signum&lt;/a&gt;&lt;/code&gt; 함수 는 법칙을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="8553aa30993045eb3e1c2102724a6deeb3be4c27" translate="yes" xml:space="preserve">
          <source>Sign of a number. The functions &lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:signum&quot;&gt;signum&lt;/a&gt;&lt;/code&gt; should satisfy the law:</source>
          <target state="translated">숫자의 부호. &lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;prelude#v:signum&quot;&gt;signum&lt;/a&gt;&lt;/code&gt; 함수 는 법칙을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="0466eed806bc3457c20fac70f46de4f930e80c3f" translate="yes" xml:space="preserve">
          <source>SignPlus</source>
          <target state="translated">SignPlus</target>
        </trans-unit>
        <trans-unit id="bbde2edb0df57d1da64ca238b03cd065ed3acfd5" translate="yes" xml:space="preserve">
          <source>SignSpace</source>
          <target state="translated">SignSpace</target>
        </trans-unit>
        <trans-unit id="27bed13a88c60350c3de92ec3820e1cc4f7d6ec3" translate="yes" xml:space="preserve">
          <source>Signal</source>
          <target state="translated">Signal</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
