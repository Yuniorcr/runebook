<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="27f2f23bcde10c66a5f5e9d8aafa47b4840854e9" translate="yes" xml:space="preserve">
          <source>Which will produce the following compile-time error,</source>
          <target state="translated">다음과 같은 컴파일 타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7c1db43b33397020a8ed5957fa5d9d38875398ba" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;&lt;a href=&quot;control-deepseq#v:deepseq&quot;&gt;deepseq&lt;/a&gt;&lt;/code&gt; will force evaluation of all the list elements:</source>
          <target state="translated">하지만 &lt;code&gt;&lt;a href=&quot;control-deepseq#v:deepseq&quot;&gt;deepseq&lt;/a&gt;&lt;/code&gt; 은 모든 목록 요소의 평가를 강제로 :</target>
        </trans-unit>
        <trans-unit id="8c332ca7e19d20c8fa57c56fd1a11cc1b3adb5fc" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;&lt;a href=&quot;ghc-responsefile#v:unescapeArgs&quot;&gt;unescapeArgs&lt;/a&gt;&lt;/code&gt; allows using quoting (i.e., convenient escaping of many characters) by having matching sets of single- or double-quotes,&lt;code&gt;&lt;a href=&quot;ghc-responsefile#v:escapeArgs&quot;&gt;escapeArgs&lt;/a&gt;&lt;/code&gt; does not use the quoting mechasnism, and thus will always escape any whitespace, quotes, and backslashes.</source>
          <target state="translated">하지만 &lt;code&gt;&lt;a href=&quot;ghc-responsefile#v:unescapeArgs&quot;&gt;unescapeArgs&lt;/a&gt;&lt;/code&gt; 인용 사용 허용 (즉, 많은 문자의 편리 이스케이프) 단일 또는 이중 따옴표의 매칭 세트를 가짐으로써는, &lt;code&gt;&lt;a href=&quot;ghc-responsefile#v:escapeArgs&quot;&gt;escapeArgs&lt;/a&gt;&lt;/code&gt; 는 항상 공백, 따옴표 및 백 슬래시를 이스케이프합니다 따라서 인용 mechasnism를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81b625ad3235f180ec5913cc634ab52ecae12b67" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;INLINE&lt;/code&gt; says &amp;ldquo;please inline me&amp;rdquo;, the &lt;code&gt;INLINABLE&lt;/code&gt; says &amp;ldquo;feel free to inline me; use your discretion&amp;rdquo;. In other words the choice is left to GHC, which uses the same rules as for pragma-free functions. Unlike &lt;code&gt;INLINE&lt;/code&gt;, that decision is made at the &lt;em&gt;call site&lt;/em&gt;, and will therefore be affected by the inlining threshold, optimisation level etc.</source>
          <target state="translated">하지만 &lt;code&gt;INLINE&lt;/code&gt; &quot;나 인라인하시기 바랍니다&quot;라고는 &lt;code&gt;INLINABLE&lt;/code&gt; 은 나를 인라인 주시기 바랍니다 &quot;라고; 재량을 사용하십시오&amp;rdquo;. 다시 말해, 선택은 pragma-free 기능과 동일한 규칙을 사용하는 GHC에 맡겨집니다. &lt;code&gt;INLINE&lt;/code&gt; 과 달리 결정은 &lt;em&gt;호출 사이트&lt;/em&gt; 에서 이루어 지므로 인라인 임계 값, 최적화 수준 등에 영향을받습니다.</target>
        </trans-unit>
        <trans-unit id="c6ee9afc23b83e42b01663a5ce2d75b90b1d7053" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;a + b&lt;/code&gt; is parsed as &lt;code&gt;(+) a b&lt;/code&gt; and becomes a binding position for the &lt;code&gt;(+)&lt;/code&gt; type operator, &lt;code&gt;a * b&lt;/code&gt; is parsed as &lt;code&gt;a (*) b&lt;/code&gt; and is rejected.</source>
          <target state="translated">상태 &lt;code&gt;a + b&lt;/code&gt; 로 파싱 &lt;code&gt;(+) a b&lt;/code&gt; 와 결합하는 위치로된다 &lt;code&gt;(+)&lt;/code&gt; 형 연산자, &lt;code&gt;a * b&lt;/code&gt; 로 파싱 &lt;code&gt;a (*) b&lt;/code&gt; 및 거부한다.</target>
        </trans-unit>
        <trans-unit id="dca826ec4b4920b6625508b06645e0892b105a31" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;n&lt;/code&gt; uses &lt;code&gt;k&lt;/code&gt; without introducing it and thus violates the rule, it is currently accepted. This is because &lt;code&gt;k&lt;/code&gt; in &lt;code&gt;n&lt;/code&gt; is considered a kind variable, as it occurs in a kind signature. In reality, the line between type variables and kind variables is blurry, as the following example demonstrates:</source>
          <target state="translated">반면 &lt;code&gt;n&lt;/code&gt; 용도에 &lt;code&gt;k&lt;/code&gt; 따라서 도입하고없이 규칙을 위반 그것이 현재 허용된다. 이는 &lt;code&gt;k&lt;/code&gt; in &lt;code&gt;n&lt;/code&gt; 이 종류 시그니처에서 발생 하기 때문에 종류 변수로 간주 되기 때문 입니다. 실제로 다음 예제에서 볼 수 있듯이 형식 변수와 종류 변수 사이의 경계는 모호합니다.</target>
        </trans-unit>
        <trans-unit id="89d044abb31d0358bb574168c9340e2f2b315fbc" translate="yes" xml:space="preserve">
          <source>While GHC is keen to inline the function, it does not do so blindly. For example, if you write</source>
          <target state="translated">GHC는 기능을 인라인하기를 원하지만 맹목적으로 그렇게하지는 않습니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="3add16df5fe36ab800dc2ff2e76070f38ee83e1d" translate="yes" xml:space="preserve">
          <source>While Safe Haskell is an extension, it actually runs in the background for every compilation with GHC. It does this to track the type violations of modules to infer their safety, even when they aren&amp;rsquo;t explicitly using Safe Haskell. Please refer to section &lt;a href=&quot;#safe-inference&quot;&gt;Safe Haskell Inference&lt;/a&gt; for more details of this.</source>
          <target state="translated">Safe Haskell은 확장 기능이지만 실제로는 GHC를 사용하는 모든 컴파일에 대해 백그라운드에서 실행됩니다. Safe Haskell을 명시 적으로 사용하지 않더라도 모듈의 유형 위반을 추적하여 안전을 유추합니다. 자세한 내용은 &lt;a href=&quot;#safe-inference&quot;&gt;Safe Haskell 추론&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="35b0013a13db3b6fdc98ef77d44fddaaca3cc7cb" translate="yes" xml:space="preserve">
          <source>While a primary use case of Safe Haskell is running untrusted code, Safe Haskell doesn&amp;rsquo;t provide this directly. Instead, Safe Haskell provides strict type safety. Without Safe Haskell, GHC allows many exceptions to the type system which can subvert any abstractions. By providing strict type safety, Safe Haskell enables developers to build their own library level sandbox mechanisms to run untrusted code.</source>
          <target state="translated">Safe Haskell의 기본 사용 사례는 신뢰할 수없는 코드를 실행하지만 Safe Haskell은이를 직접 제공하지 않습니다. 대신 Safe Haskell은 엄격한 유형의 안전을 제공합니다. Safe Haskell이 없으면 GHC는 유형 시스템에 많은 예외를 허용하여 추상화를 전복시킬 수 있습니다. Safe Haskell은 엄격한 유형 안전성을 제공함으로써 개발자가 신뢰할 수없는 코드를 실행하기위한 자체 라이브러리 수준 샌드 박스 메커니즘을 구축 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="def095ee0284bcac4322f43e6852c970ad41b290" translate="yes" xml:space="preserve">
          <source>While a standalone kind signature determines the kind of a type constructor, it does not determine its arity. This is of particular importance for type families and type synonyms, as they cannot be partially applied. See &lt;a href=&quot;#type-family-declarations&quot;&gt;Type family declarations&lt;/a&gt; for more information about arity.</source>
          <target state="translated">독립형 종류 서명은 형식 생성자의 종류를 결정하지만 그 배열을 결정하지는 않습니다. 이것은 부분적으로 적용될 수 없기 때문에 유형 패밀리 및 유형 동의어에 특히 중요합니다. 보다&lt;a href=&quot;#type-family-declarations&quot;&gt; 유형 제품군 선언을&lt;/a&gt; arity에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="bc21bcd88342a5bb609c83c4f4a251417917aeff" translate="yes" xml:space="preserve">
          <source>While developing, sometimes it is desirable to allow compilation to succeed even if there are type errors in the code. Consider the following case:</source>
          <target state="translated">개발하는 동안 때로는 코드에 유형 오류가 있어도 컴파일이 성공하도록하는 것이 바람직합니다. 다음과 같은 경우를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="91465cfe2041d24f0183967b4edb1cd4e56225f7" translate="yes" xml:space="preserve">
          <source>While modules loaded in GHCi with the &lt;a href=&quot;ghci#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; command may use &lt;a href=&quot;#extension-StaticPointers&quot;&gt;&lt;code&gt;StaticPointers&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;static&lt;/code&gt; expressions, statements entered on the REPL may not. This is a limitation of GHCi; see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12356&quot;&gt;#12356&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;ghci#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; 명령 으로 GHCi에로드 된 모듈 은 &lt;a href=&quot;#extension-StaticPointers&quot;&gt; &lt;code&gt;StaticPointers&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;static&lt;/code&gt; 표현식을 사용할 수 있지만 REPL에 입력 된 명령문은 그렇지 않을 수 있습니다. 이것은 GHCi의 제한 사항입니다. 자세한 내용은 &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12356&quot;&gt;# 12356&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="11d4576ffb50b0fa9daa17cbe0afb23508da41b7" translate="yes" xml:space="preserve">
          <source>While modules loaded in GHCi with the &lt;a href=&quot;ghci#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt; command may use &lt;a href=&quot;#extension-StaticPointers&quot;&gt;&lt;code&gt;StaticPointers&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;static&lt;/code&gt; expressions, statements entered on the REPL may not. This is a limitation of GHCi; see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12356&quot;&gt;Issue #12356&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;ghci#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; 명령 으로 GHCi에로드 된 모듈 은 &lt;a href=&quot;#extension-StaticPointers&quot;&gt; &lt;code&gt;StaticPointers&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;static&lt;/code&gt; 표현식을 사용할 수 있지만 REPL에 입력 된 명령문은 그렇지 않을 수 있습니다. 이것은 GHCi의 한계입니다. 자세한 내용은 &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/12356&quot;&gt;문제 # 12356&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="97f98250e481ccf0975daf7dab8b3fe176183423" translate="yes" xml:space="preserve">
          <source>While running a program with profiling turned on, GHC maintains a cost-centre stack behind the scenes, and attributes any costs (memory allocation and time) to whatever the current cost-centre stack is at the time the cost is incurred.</source>
          <target state="translated">프로파일 링이 설정된 상태에서 프로그램을 실행하는 동안 GHC는 비용 중심 스택 스택을 유지하고 모든 비용 (메모리 할당 및 시간)을 현재 비용 중심 스택이 비용 발생 시점의 원인이되도록합니다.</target>
        </trans-unit>
        <trans-unit id="976e206b9026791ffd0e6fb58a4293cf7ea81bb6" translate="yes" xml:space="preserve">
          <source>While stopped at the breakpoint on line 2 that we set earlier, we started a new evaluation with &lt;code&gt;:step qsort [1,3]&lt;/code&gt;. This new evaluation stopped after one step (at the definition of &lt;code&gt;qsort&lt;/code&gt;). The prompt has changed, now prefixed with &lt;code&gt;...&lt;/code&gt;, to indicate that there are saved breakpoints beyond the current one. To see the stack of contexts, use &lt;a href=&quot;#ghci-cmd-:show%20context&quot;&gt;&lt;code&gt;:show context&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">앞에서 설정 한 2 번 줄의 중단 점에서 중단 된 상태에서 &lt;code&gt;:step qsort [1,3]&lt;/code&gt; 으로 새로운 평가를 시작했습니다 . 이 새로운 평가는 한 단계 후에 ( &lt;code&gt;qsort&lt;/code&gt; 정의에서) 중지되었습니다 . 현재 접두사를 넘어서 저장된 중단 점이 있음을 나타 내기 위해 프롬프트에 &lt;code&gt;...&lt;/code&gt; 접두사가 붙었습니다 . 컨텍스트 스택을 보려면 &lt;a href=&quot;#ghci-cmd-:show%20context&quot;&gt; &lt;code&gt;:show context&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b98a4c50da2ca10fa0d38e9a101fe3f3e6126a79" translate="yes" xml:space="preserve">
          <source>While the following definitions are rejected:</source>
          <target state="translated">다음과 같은 정의는 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="b1966b6c5939a4035f3d998424b60e02fda159f6" translate="yes" xml:space="preserve">
          <source>While these are flags, they also correspond to Safe Haskell module types that a module can have. You can think of using these as declaring an explicit contract (or type) that a module must have. If it is invalid, then compilation will fail. GHC will also infer the correct type for Safe Haskell, please refer to section &lt;a href=&quot;#safe-inference&quot;&gt;Safe Haskell Inference&lt;/a&gt; for more details.</source>
          <target state="translated">이들은 플래그이지만 모듈이 가질 수있는 Safe Haskell 모듈 유형에도 해당합니다. 이것을 모듈이 가지고 있어야하는 명시 적 계약 (또는 유형)을 선언하는 것으로 생각할 수 있습니다. 유효하지 않으면 컴파일이 실패합니다. 또한 GHC는 Safe Haskell에 올바른 유형을 유추합니다 . 자세한 내용은 &lt;a href=&quot;#safe-inference&quot;&gt;Safe Haskell 추론&lt;/a&gt; 섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="022ab35cfa47002a4ebdaca07f6e366ba8988d90" translate="yes" xml:space="preserve">
          <source>While these examples look similar, none of them would successfully compile. This is because all occurrences of the last type parameter &lt;code&gt;a&lt;/code&gt; occur in &lt;em&gt;contravariant&lt;/em&gt; positions, not covariant ones.</source>
          <target state="translated">이 예제는 비슷해 보이지만 컴파일되지는 않습니다. 이는 마지막 유형 매개 변수 &lt;code&gt;a&lt;/code&gt; 의 모든 항목이 공변량이 아닌 &lt;em&gt;반 변형&lt;/em&gt; 위치 에서 발생하기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="75a5eda6c195abd9046975cac318fe63ebb5499d" translate="yes" xml:space="preserve">
          <source>While these functions have a stable API and you may use these functions in applications, do carefully consider the documented pre-conditions; incorrect use can break referential transparency or worse.</source>
          <target state="translated">이러한 함수에는 안정적인 API가 있으며 이러한 함수를 응용 프로그램에서 사용할 수 있지만 문서화 된 사전 조건을 신중하게 고려하십시오. 잘못 사용하면 참조 투명성이 손상되거나 악화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0aa0a8b0c40d44fe32076b2dde1270dea9d839c" translate="yes" xml:space="preserve">
          <source>While this is rather low level, it provides you with full flexibility in how the data is written out.</source>
          <target state="translated">이 수준은 다소 낮지 만 데이터 작성 방법에 대한 완전한 유연성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9187e41f7f9137050f5d28dffbf78dde7c993814" translate="yes" xml:space="preserve">
          <source>Whilst a normal pattern synonym can be used in two ways, there are then seven ways in which to use &lt;code&gt;Point&lt;/code&gt;. Precisely the ways in which a normal record constructor can be used.</source>
          <target state="translated">일반적인 패턴 동의어는 두 가지 방식으로 사용될 수 있지만 &lt;code&gt;Point&lt;/code&gt; 를 사용하는 일곱 가지 방법이 있습니다 . 정확하게 일반 레코드 생성자를 사용할 수있는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="37619fc13053f82b7cb7da3d24ceb1598ab6d05c" translate="yes" xml:space="preserve">
          <source>White</source>
          <target state="translated">White</target>
        </trans-unit>
        <trans-unit id="83eb1c09c969cd3e57a811f38dd6447b18c3ead5" translate="yes" xml:space="preserve">
          <source>Why did I get a link error?</source>
          <target state="translated">왜 링크 오류가 발생 했습니까?</target>
        </trans-unit>
        <trans-unit id="440e86b8976c4e4796fbf85e0f090b3bc6b09cbc" translate="yes" xml:space="preserve">
          <source>Why do both &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; exist, and why does GHC opt to implement &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; in derived &lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instances instead of &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt;? The reason is that &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; is based on the &lt;code&gt;&lt;a href=&quot;ghc-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; type, and although &lt;code&gt;&lt;a href=&quot;ghc-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; is mentioned in the Haskell 2010 Report, it is not a very efficient parser data structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 가 모두 존재하는 이유는 무엇이며 GHC 가 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 대신 파생 &lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 인스턴스 에서 &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 를 구현하도록 선택하는 이유는 무엇입니까? &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;ghc-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; 유형을 기반으로하기 때문에 HasSell 2010 보고서에 &lt;code&gt;&lt;a href=&quot;ghc-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; 가 언급되어 있지만 매우 효율적인 파서 데이터 구조는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="4b3d234dc0251109fb3ebae077fa379bf3b538ac" translate="yes" xml:space="preserve">
          <source>Why do both &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; exist, and why does GHC opt to implement &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; in derived &lt;code&gt;&lt;a href=&quot;prelude#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instances instead of &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt;? The reason is that &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; is based on the &lt;code&gt;&lt;a href=&quot;prelude#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; type, and although &lt;code&gt;&lt;a href=&quot;prelude#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; is mentioned in the Haskell 2010 Report, it is not a very efficient parser data structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 가 모두 존재하는 이유는 무엇이며 GHC 가 &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 대신 파생 &lt;code&gt;&lt;a href=&quot;prelude#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 인스턴스 에서 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 를 구현하도록 선택하는 이유는 무엇입니까? &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;prelude#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; 유형을 기반으로하기 때문에 HasSell 2010 보고서에 &lt;code&gt;&lt;a href=&quot;prelude#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; 가 언급되어 있지만 매우 효율적인 파서 데이터 구조는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f3e75c0bb579876ee1ae6f6f75f665c7fa512d6b" translate="yes" xml:space="preserve">
          <source>Why do both &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; exist, and why does GHC opt to implement &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; in derived &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instances instead of &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt;? The reason is that &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; is based on the &lt;code&gt;&lt;a href=&quot;text-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; type, and although &lt;code&gt;&lt;a href=&quot;text-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; is mentioned in the Haskell 2010 Report, it is not a very efficient parser data structure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 가 모두 존재하는 이유는 무엇이며 GHC 가 &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 대신 파생 &lt;code&gt;&lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; 인스턴스 에서 &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; 를 구현하도록 선택하는 이유는 무엇입니까? &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;text-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; 유형을 기반으로하기 때문에 HasSell 2010 보고서에 &lt;code&gt;&lt;a href=&quot;text-read#t:ReadS&quot;&gt;ReadS&lt;/a&gt;&lt;/code&gt; 가 언급되어 있지만 매우 효율적인 파서 데이터 구조는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="86af37585c6c693fdc0ebac6c3d4e275681346c9" translate="yes" xml:space="preserve">
          <source>Why do we need this? Because if a foreign library is called from a thread created using &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;, it won't have access to any &lt;em&gt;thread-local state&lt;/em&gt; - state variables that have specific values for each OS thread (see POSIX's &lt;code&gt;pthread_key_create&lt;/code&gt; or Win32's &lt;code&gt;TlsAlloc&lt;/code&gt;). Therefore, some libraries (OpenGL, for example) will not work from a thread created using &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt;. They work fine in threads created using &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOS&quot;&gt;forkOS&lt;/a&gt;&lt;/code&gt; or when called from &lt;code&gt;main&lt;/code&gt; or from a &lt;code&gt;foreign export&lt;/code&gt;.</source>
          <target state="translated">왜 이것이 필요한가요? 외부 라이브러리가 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; 를 사용하여 작성된 스레드에서 호출 되면 각 OS 스레드에 대해 특정 값을 갖는 &lt;em&gt;스레드 로컬&lt;/em&gt; 상태 변수에 액세스 할 수 없습니다 (POSIX의 &lt;code&gt;pthread_key_create&lt;/code&gt; 또는 Win32의 &lt;code&gt;TlsAlloc&lt;/code&gt; 참조 ). 따라서 일부 라이브러리 (예 : OpenGL)는 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkIO&quot;&gt;forkIO&lt;/a&gt;&lt;/code&gt; 를 사용하여 작성된 스레드에서 작동하지 않습니다 . 그것들은 &lt;code&gt;&lt;a href=&quot;control-concurrent#v:forkOS&quot;&gt;forkOS&lt;/a&gt;&lt;/code&gt; 를 사용하여 생성 된 스레드 에서 또는 &lt;code&gt;main&lt;/code&gt; 또는 &lt;code&gt;foreign export&lt;/code&gt; 에서 호출 될 때 정상적으로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="bbbc60c133dcaa45a637190bca0c68db03dab6c1" translate="yes" xml:space="preserve">
          <source>Why might we want to do this? The main reason is that the RTS running the interpreted code can be a different flavour (profiling or dynamically-linked) from GHC itself. So for example:</source>
          <target state="translated">왜 우리가 이것을하고 싶습니까? 주된 이유는 해석 된 코드를 실행하는 RTS가 GHC 자체와 다른 특징 (프로파일 링 또는 동적으로 링크 된) 일 수 있기 때문입니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="47b6a914e21ff5813991e6da748b083baff53cd8" translate="yes" xml:space="preserve">
          <source>Why should we want to run compiled code? Well, compiled code is roughly 10x faster than interpreted code, but takes about 2x longer to produce (perhaps longer if optimisation is on). So it pays to compile the parts of a program that aren&amp;rsquo;t changing very often, and use the interpreter for the code being actively developed.</source>
          <target state="translated">왜 컴파일 된 코드를 실행해야합니까? 컴파일 된 코드는 해석 된 코드보다 약 10 배 빠르지 만 생성하는 데 약 2 배가 더 걸립니다 (최적화가 설정된 경우 더 길어질 수 있음). 따라서 자주 변경되지 않는 프로그램 부분을 컴파일하고 코드가 활발하게 개발되도록 인터프리터를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="cc7d6ee8236b5733d37003f374fc603c874165c9" translate="yes" xml:space="preserve">
          <source>Width digits can also be used after any modifiers and before the specifier (here marked as &lt;code&gt;z&lt;/code&gt;), for example:</source>
          <target state="translated">너비 자릿수는 수정 자 다음과 지정자 앞에 (여기서 &lt;code&gt;z&lt;/code&gt; 로 표시 ) 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6cc81c4740a7ec55686ef91e0c779bca9974a1fc" translate="yes" xml:space="preserve">
          <source>WildCardT</source>
          <target state="translated">WildCardT</target>
        </trans-unit>
        <trans-unit id="9dd4ee310008cd2a0ddc0df60850b2b849a28904" translate="yes" xml:space="preserve">
          <source>WildP</source>
          <target state="translated">WildP</target>
        </trans-unit>
        <trans-unit id="0bad7324dc674391ab667a3facf3ae0df9dc30be" translate="yes" xml:space="preserve">
          <source>Wildcards occurring within the monotype (tau) part of the type signature are &lt;em&gt;type wildcards&lt;/em&gt; (&amp;ldquo;type&amp;rdquo; is often omitted as this is the default kind of wildcard). Type wildcards can be instantiated to any monotype like &lt;code&gt;Bool&lt;/code&gt; or &lt;code&gt;Maybe [Bool]&lt;/code&gt;, including functions and higher-kinded types like &lt;code&gt;(Int -&amp;gt; Bool)&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt;.</source>
          <target state="translated">타입 시그니처의 모노 타입 (tau) 부분에서 발생하는 와일드 카드는 &lt;em&gt;타입 와일드 카드입니다&lt;/em&gt; (&amp;ldquo;타입&amp;rdquo;은 기본 와일드 카드 유형이므로 생략되는 경우가 많습니다). 유형 와일드 카드는 함수 및 &lt;code&gt;(Int -&amp;gt; Bool)&lt;/code&gt; Int- &amp;gt; Bool) 또는 &lt;code&gt;Maybe&lt;/code&gt; 와 같은 상위 유형을 포함하여 &lt;code&gt;Bool&lt;/code&gt; 또는 &lt;code&gt;Maybe [Bool]&lt;/code&gt; 과 같은 모든 단일 유형 으로 인스턴스화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9658cea5793b3d031fa20c655bb68dd4c32b903a" translate="yes" xml:space="preserve">
          <source>Will emit no output, despite the fact that the ill-typed term appears after the well-typed &lt;code&gt;putStrLn &quot;Hi there.&quot;&lt;/code&gt;. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11197&quot;&gt;#11197&lt;/a&gt;.</source>
          <target state="translated">잘 입력 된 &lt;code&gt;putStrLn &quot;Hi there.&quot;&lt;/code&gt; 뒤에 잘못된 유형의 용어가 나타나더라도 출력을 내지 않습니다 . . &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11197&quot;&gt;# 11197을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ef392380581e1168eebb15a8a0e18150691c4d57" translate="yes" xml:space="preserve">
          <source>Will emit no output, despite the fact that the ill-typed term appears after the well-typed &lt;code&gt;putStrLn &quot;Hi there.&quot;&lt;/code&gt;. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11197&quot;&gt;Issue #11197&lt;/a&gt;.</source>
          <target state="translated">잘못 입력 한 용어가 잘 입력 된 &lt;code&gt;putStrLn &quot;Hi there.&quot;&lt;/code&gt; 뒤에 표시된다는 사실에도 불구하고 출력을 내 보내지 않습니다 . . &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11197&quot;&gt;문제 # 11197을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0a1662f103a3266468f46e63fa2cf2f0cfd01bbf" translate="yes" xml:space="preserve">
          <source>Will raise two warnings because &lt;code&gt;Zero&lt;/code&gt; and &lt;code&gt;Succ&lt;/code&gt; are not written as &lt;code&gt;'Zero&lt;/code&gt; and &lt;code&gt;'Succ&lt;/code&gt;.</source>
          <target state="translated">때문에이 경고를 올릴 것이다 &lt;code&gt;Zero&lt;/code&gt; 와 &lt;code&gt;Succ&lt;/code&gt; 로 작성되지 않은 &lt;code&gt;'Zero&lt;/code&gt; 와 &lt;code&gt;'Succ&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1c5ec9681ce2072b76c270f62f6f9eee48c28bf7" translate="yes" xml:space="preserve">
          <source>WindowClosure</source>
          <target state="translated">WindowClosure</target>
        </trans-unit>
        <trans-unit id="7e26c5824975ae8a63fa3abf0584b4efdb2b248d" translate="yes" xml:space="preserve">
          <source>WindowStyle</source>
          <target state="translated">WindowStyle</target>
        </trans-unit>
        <trans-unit id="9378a46e189b577aaeee3aa3a868039a552854b0" translate="yes" xml:space="preserve">
          <source>WindowStyleEx</source>
          <target state="translated">WindowStyleEx</target>
        </trans-unit>
        <trans-unit id="8a20bdc2dc7d2d8d4e84b9d92b1bb47619b3475f" translate="yes" xml:space="preserve">
          <source>Windows GUI-only programs have no stdin, stdout or stderr so using the ordinary Haskell input/output functions will cause your program to fail with an IO exception, such as:</source>
          <target state="translated">Windows GUI 전용 프로그램에는 stdin, stdout 또는 stderr이 없으므로 일반적인 Haskell 입력 / 출력 기능을 사용하면 다음과 같은 IO 예외로 인해 프로그램이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="5d6f840cad39d9a272a9703b68f0d38fb8222f38" translate="yes" xml:space="preserve">
          <source>Windows only: directory link</source>
          <target state="translated">Windows 전용 : 디렉토리 링크</target>
        </trans-unit>
        <trans-unit id="73d40c03f33c4a3de272ded5007d929ac7019282" translate="yes" xml:space="preserve">
          <source>Windows paths are not all the same. The different kinds of paths each have different meanings. The &lt;code&gt;MAX_PATH&lt;/code&gt; limitation is not a limitation of the operating system nor the file system. It is a limitation of the default namespace enforced by the Win32 API for backwards compatibility.</source>
          <target state="translated">Windows 경로가 모두 같지는 않습니다. 서로 다른 종류의 경로는 각각 다른 의미를 갖습니다. &lt;code&gt;MAX_PATH&lt;/code&gt; 의 제한은 운영 체제 나 파일 시스템의 제한이 없습니다. 이전 버전과의 호환성을 위해 Win32 API에 의해 적용되는 기본 네임 스페이스의 제한 사항입니다.</target>
        </trans-unit>
        <trans-unit id="48c423f5c542bd757cc0d8148840620479fe1d50" translate="yes" xml:space="preserve">
          <source>Windows systems</source>
          <target state="translated">Windows 시스템</target>
        </trans-unit>
        <trans-unit id="17b0e8d7184831d84e104c44677c17826487591f" translate="yes" xml:space="preserve">
          <source>Windows-specific errors: This operation may fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:illegalOperationErrorType&quot;&gt;illegalOperationErrorType&lt;/a&gt;&lt;/code&gt; if the file system does not support symbolic links.</source>
          <target state="translated">Windows 특정 오류 : 파일 시스템이 기호 링크를 지원하지 않으면 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:illegalOperationErrorType&quot;&gt;illegalOperationErrorType&lt;/a&gt;&lt;/code&gt; 으로 인해이 작업이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae9664fed6d551c4afead4741b8d33a6823b9b7c" translate="yes" xml:space="preserve">
          <source>Windows-specific errors: This operation may fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:permissionErrorType&quot;&gt;permissionErrorType&lt;/a&gt;&lt;/code&gt; if the user lacks the privileges to create symbolic links. It may also fail with &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:illegalOperationErrorType&quot;&gt;illegalOperationErrorType&lt;/a&gt;&lt;/code&gt; if the file system does not support symbolic links.</source>
          <target state="translated">Windows 관련 오류 : 사용자에게 기호 링크를 작성할 권한이없는 경우 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:permissionErrorType&quot;&gt;permissionErrorType&lt;/a&gt;&lt;/code&gt; 으로이 조작이 실패 할 수 있습니다. 파일 시스템이 기호 링크를 지원하지 않으면 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:illegalOperationErrorType&quot;&gt;illegalOperationErrorType&lt;/a&gt;&lt;/code&gt; 으로 실패 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="02de5f68b4be14e6f9c02d269cf51b2ebcc4d006" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DataKinds&quot;&gt;&lt;code&gt;DataKinds&lt;/code&gt;&lt;/a&gt;, GHC automatically promotes every datatype to be a kind and its (value) constructors to be type constructors. The following types</source>
          <target state="translated">&lt;a href=&quot;#extension-DataKinds&quot;&gt; &lt;code&gt;DataKinds&lt;/code&gt; 를&lt;/a&gt; 사용하면 GHC는 모든 데이터 유형을 자동으로 승격시키고 (값) 생성자를 유형 생성자로 승격시킵니다. 다음과 같은 유형</target>
        </trans-unit>
        <trans-unit id="66de61afd3dce19c1e8432307fd1a6cdbb984d5b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DataKinds&quot;&gt;&lt;code&gt;DataKinds&lt;/code&gt;&lt;/a&gt;, Haskell&amp;rsquo;s list and tuple types are natively promoted to kinds, and enjoy the same convenient syntax at the type level, albeit prefixed with a quote:</source>
          <target state="translated">&lt;a href=&quot;#extension-DataKinds&quot;&gt; &lt;code&gt;DataKinds&lt;/code&gt; 를&lt;/a&gt; 사용하면 Haskell의 목록 및 튜플 유형은 기본적으로 종류로 승격되며 따옴표가 붙어 있지만 유형 수준에서 동일한 편리한 구문을 즐길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad73cf0a187d7c5263c3ed9059162402b019df7e" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DataKinds&quot;&gt;&lt;code&gt;DataKinds&lt;/code&gt;&lt;/a&gt;, the example above can then be rewritten to:</source>
          <target state="translated">&lt;a href=&quot;#extension-DataKinds&quot;&gt; &lt;code&gt;DataKinds&lt;/code&gt; 를&lt;/a&gt; 사용하면 위 예제를 다음과 같이 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9694f3dae022beb52b1d2eae44907067122df68b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; you can derive any other class. The compiler will simply generate an instance declaration with no explicitly-defined methods. This is mostly useful in classes whose &lt;a href=&quot;#minimal-pragma&quot;&gt;minimal set&lt;/a&gt; is empty, and especially when writing &lt;a href=&quot;#generic-programming&quot;&gt;generic functions&lt;/a&gt;.</source>
          <target state="translated">로 &lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt; &lt;code&gt;DeriveAnyClass&lt;/code&gt; &lt;/a&gt; 당신은 다른 클래스를 파생 할 수 있습니다. 컴파일러는 명시 적으로 정의 된 메소드없이 인스턴스 선언을 생성합니다. 이것은 &lt;a href=&quot;#minimal-pragma&quot;&gt;최소 집합&lt;/a&gt; 이 비어 있는 클래스 , 특히 &lt;a href=&quot;#generic-programming&quot;&gt;일반 함수를&lt;/a&gt; 작성할 때 주로 유용 합니다 .</target>
        </trans-unit>
        <trans-unit id="05e8935b6c02826df72f7c768e1ec4453e94c14a" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveDataTypeable&quot;&gt;&lt;code&gt;DeriveDataTypeable&lt;/code&gt;&lt;/a&gt;, you can derive instances of the class &lt;code&gt;Data&lt;/code&gt;, defined in &lt;code&gt;Data.Data&lt;/code&gt;.</source>
          <target state="translated">로 &lt;a href=&quot;#extension-DeriveDataTypeable&quot;&gt; &lt;code&gt;DeriveDataTypeable&lt;/code&gt; &lt;/a&gt; , 당신은 클래스의 인스턴스 유도 할 수있다 &lt;code&gt;Data&lt;/code&gt; 에 정의 &lt;code&gt;Data.Data&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ad9e3a1e0afdec73dafa2b178a39235fdd9bec14" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveFoldable&quot;&gt;&lt;code&gt;DeriveFoldable&lt;/code&gt;&lt;/a&gt;, one can derive &lt;code&gt;Foldable&lt;/code&gt; instances for data types of kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt;. For example, this declaration:</source>
          <target state="translated">&lt;a href=&quot;#extension-DeriveFoldable&quot;&gt; &lt;code&gt;DeriveFoldable&lt;/code&gt; 을&lt;/a&gt; 사용하면 Type- &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; 유형의 데이터 유형에 대한 &lt;code&gt;Foldable&lt;/code&gt; 인스턴스를 파생시킬 수 있습니다 . 예를 들어이 선언은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4864b90fc425d7d78346fd4210a107b2e500fb2e" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveFoldable&quot;&gt;&lt;code&gt;DeriveFoldable&lt;/code&gt;&lt;/a&gt;, you can derive instances of the class &lt;code&gt;Foldable&lt;/code&gt;, defined in &lt;code&gt;Data.Foldable&lt;/code&gt;.</source>
          <target state="translated">로 &lt;a href=&quot;#extension-DeriveFoldable&quot;&gt; &lt;code&gt;DeriveFoldable&lt;/code&gt; &lt;/a&gt; , 당신은 클래스의 인스턴스 유도 할 수있다 &lt;code&gt;Foldable&lt;/code&gt; 정의, &lt;code&gt;Data.Foldable&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="671954f0f4d9ee0f1430a6541e8fa3672fbee0d2" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt;&lt;code&gt;DeriveFunctor&lt;/code&gt;&lt;/a&gt;, one can derive &lt;code&gt;Functor&lt;/code&gt; instances for data types of kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt;. For example, this declaration:</source>
          <target state="translated">&lt;a href=&quot;#extension-DeriveFunctor&quot;&gt; &lt;code&gt;DeriveFunctor&lt;/code&gt; 를&lt;/a&gt; 사용하면 Type- &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; 유형의 데이터 유형에 대한 &lt;code&gt;Functor&lt;/code&gt; 인스턴스를 파생시킬 수 있습니다 . 예를 들어이 선언은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8a9d0c586e9f69c6ba34b372f93f09827c90392d" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt;&lt;code&gt;DeriveFunctor&lt;/code&gt;&lt;/a&gt;, you can derive instances of the class &lt;code&gt;Functor&lt;/code&gt;, defined in &lt;code&gt;GHC.Base&lt;/code&gt;.</source>
          <target state="translated">로 &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt; &lt;code&gt;DeriveFunctor&lt;/code&gt; &lt;/a&gt; , 당신은 클래스의 인스턴스 유도 할 수있다 &lt;code&gt;Functor&lt;/code&gt; 에 정의 &lt;code&gt;GHC.Base&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="70bde54b16dc89d95935abc8c585ccb864a45328" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveGeneric&quot;&gt;&lt;code&gt;DeriveGeneric&lt;/code&gt;&lt;/a&gt;, you can derive instances of the classes &lt;code&gt;Generic&lt;/code&gt; and &lt;code&gt;Generic1&lt;/code&gt;, defined in &lt;code&gt;GHC.Generics&lt;/code&gt;. You can use these to define generic functions, as described in &lt;a href=&quot;#generic-programming&quot;&gt;Generic programming&lt;/a&gt;.</source>
          <target state="translated">로 &lt;a href=&quot;#extension-DeriveGeneric&quot;&gt; &lt;code&gt;DeriveGeneric&lt;/code&gt; &lt;/a&gt; , 당신은 클래스의 인스턴스 유도 할 수있다 &lt;code&gt;Generic&lt;/code&gt; 및 &lt;code&gt;Generic1&lt;/code&gt; 에 정의 &lt;code&gt;GHC.Generics&lt;/code&gt; 을 . &lt;a href=&quot;#generic-programming&quot;&gt;일반 프로그래밍에&lt;/a&gt; 설명 된대로이를 사용하여 일반 기능을 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e5f52e040d0ae2ddbdd82b0a2735b846ecf5083" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveLift&quot;&gt;&lt;code&gt;DeriveLift&lt;/code&gt;&lt;/a&gt;, you can derive instances of the class &lt;code&gt;Lift&lt;/code&gt;, defined in the &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; module of the &lt;code&gt;template-haskell&lt;/code&gt; package.</source>
          <target state="translated">&lt;a href=&quot;#extension-DeriveLift&quot;&gt; &lt;code&gt;DeriveLift&lt;/code&gt; 를&lt;/a&gt; 사용 하면 &lt;code&gt;template-haskell&lt;/code&gt; 패키지 의 &lt;code&gt;Language.Haskell.TH.Syntax&lt;/code&gt; 모듈에 정의 된 &lt;code&gt;Lift&lt;/code&gt; 클래스의 인스턴스를 파생시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4dc82d6ad448bf5d43bd791bf2a64d65052ded54" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveTraversable&quot;&gt;&lt;code&gt;DeriveTraversable&lt;/code&gt;&lt;/a&gt;, one can derive &lt;code&gt;Traversable&lt;/code&gt; instances for data types of kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt;. For example, this declaration:</source>
          <target state="translated">&lt;a href=&quot;#extension-DeriveTraversable&quot;&gt; &lt;code&gt;DeriveTraversable&lt;/code&gt; 을&lt;/a&gt; 사용하면 Type- &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; 유형의 데이터 유형에 대해 &lt;code&gt;Traversable&lt;/code&gt; 인스턴스를 파생시킬 수 있습니다 . 예를 들어이 선언은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1bd07f0bfee4349fb82f2d04a2759ee937885c23" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DeriveTraversable&quot;&gt;&lt;code&gt;DeriveTraversable&lt;/code&gt;&lt;/a&gt;, you can derive instances of the class &lt;code&gt;Traversable&lt;/code&gt;, defined in &lt;code&gt;Data.Traversable&lt;/code&gt;. Since the &lt;code&gt;Traversable&lt;/code&gt; instance dictates the instances of &lt;code&gt;Functor&lt;/code&gt; and &lt;code&gt;Foldable&lt;/code&gt;, you&amp;rsquo;ll probably want to derive them too, so &lt;a href=&quot;#extension-DeriveTraversable&quot;&gt;&lt;code&gt;DeriveTraversable&lt;/code&gt;&lt;/a&gt; implies &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt;&lt;code&gt;DeriveFunctor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#extension-DeriveFoldable&quot;&gt;&lt;code&gt;DeriveFoldable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">로 &lt;a href=&quot;#extension-DeriveTraversable&quot;&gt; &lt;code&gt;DeriveTraversable&lt;/code&gt; &lt;/a&gt; , 당신은 클래스의 인스턴스 유도 할 수 &lt;code&gt;Traversable&lt;/code&gt; 정의, &lt;code&gt;Data.Traversable&lt;/code&gt; 을 . 이후 &lt;code&gt;Traversable&lt;/code&gt; 인스턴스 지시의 인스턴스 &lt;code&gt;Functor&lt;/code&gt; 및 &lt;code&gt;Foldable&lt;/code&gt; , 그래서, 당신은 아마 그들도 도출 할 수 있습니다 &lt;a href=&quot;#extension-DeriveTraversable&quot;&gt; &lt;code&gt;DeriveTraversable&lt;/code&gt; 는&lt;/a&gt; 의미 &lt;a href=&quot;#extension-DeriveFunctor&quot;&gt; &lt;code&gt;DeriveFunctor&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#extension-DeriveFoldable&quot;&gt; &lt;code&gt;DeriveFoldable&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="559a00aea3f890980a1f984df90a03d7d63d1ade" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-DisambiguateRecordFields&quot;&gt;&lt;code&gt;DisambiguateRecordFields&lt;/code&gt;&lt;/a&gt; you can use &lt;em&gt;unqualified&lt;/em&gt; field names even if the corresponding selector is only in scope &lt;em&gt;qualified&lt;/em&gt; For example, assuming the same module &lt;code&gt;M&lt;/code&gt; as in our earlier example, this is legal:</source>
          <target state="translated">로 &lt;a href=&quot;#extension-DisambiguateRecordFields&quot;&gt; &lt;code&gt;DisambiguateRecordFields&lt;/code&gt; &lt;/a&gt; 당신이 사용할 수있는 &lt;em&gt;자격이&lt;/em&gt; 해당 선택은 범위에있는 경우에도 필드 이름을 &lt;em&gt;자격을&lt;/em&gt; 예를 들어 같은 모듈 가정, &lt;code&gt;M&lt;/code&gt; 을 ,이 법적으로 우리의 이전의 예에서와 같이 :</target>
        </trans-unit>
        <trans-unit id="d839e1b384cdeb1b20e6abc8876be37df3ce01a5" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#extension-MultiWayIf&quot;&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;&lt;/a&gt; extension GHC accepts conditional expressions with multiple branches:</source>
          <target state="translated">&lt;a href=&quot;#extension-MultiWayIf&quot;&gt; &lt;code&gt;MultiWayIf&lt;/code&gt; &lt;/a&gt; 확장을 사용하면 GHC는 여러 분기로 조건식을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="a0d6333b42a8531a55b6ff2108e890fa59726fab" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-maxN⟨x⟩&lt;/code&gt;, i.e. &lt;code&gt;+RTS -maxN3 -RTS&lt;/code&gt;, the runtime will choose at most (x), also limited by the number of processors on the system. Omitting (x) is an error, if you need a default use option &lt;code&gt;-N&lt;/code&gt;.</source>
          <target state="translated">로 &lt;code&gt;-maxN⟨x⟩&lt;/code&gt; , 즉 &lt;code&gt;+RTS -maxN3 -RTS&lt;/code&gt; , 런타임은 시스템의 프로세서 수에 의해 제한, 대부분의 (X)로 선택합니다. 기본 사용 옵션 &lt;code&gt;-N&lt;/code&gt; 이 필요한 경우 (x)를 생략하면 오류가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="bf6c6cd414272ae624ac863540c1eb4369c6d081" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;hpc-tracer&lt;/code&gt;, this is 8 (a tab represents several spaces).</source>
          <target state="translated">&lt;code&gt;hpc-tracer&lt;/code&gt; 를 사용하면 8입니다 (탭은 여러 공백을 나타냄).</target>
        </trans-unit>
        <trans-unit id="cec44f01be85a69c1fd7140d01ffa23f751d8ab9" translate="yes" xml:space="preserve">
          <source>With GHC, the &lt;code&gt;ByteString&lt;/code&gt; representation uses &lt;em&gt;pinned&lt;/em&gt; memory, meaning it cannot be moved by the GC. This is usually the right thing to do for larger strings, but for small strings using pinned memory can lead to heap fragmentation which wastes space. The &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; type (and the &lt;code&gt;Text&lt;/code&gt; type from the &lt;code&gt;text&lt;/code&gt; package) use &lt;em&gt;unpinned&lt;/em&gt; memory so they do not contribute to heap fragmentation. In addition, with GHC, small unpinned strings are allocated in the same way as normal heap allocations, rather than in a separate pinned area.</source>
          <target state="translated">GHC에서 &lt;code&gt;ByteString&lt;/code&gt; 표현은 &lt;em&gt;고정 된&lt;/em&gt; 메모리를 사용하므로 GC로 이동할 수 없습니다. 이는 일반적으로 더 큰 문자열에 대해 올바른 작업이지만 고정 된 메모리를 사용하는 작은 문자열에 대해서는 힙 조각화가 발생하여 공간을 낭비 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 의 유형 (과 &lt;code&gt;Text&lt;/code&gt; 로부터 유형 &lt;code&gt;text&lt;/code&gt; 패키지)를 사용하여 &lt;em&gt;고정 해제&lt;/em&gt; 가 힙 단편화에 기여하지 않도록 메모리를. 또한 GHC를 사용하면 고정되지 않은 작은 문자열이 별도의 고정 영역이 아닌 일반 힙 할당과 동일한 방식으로 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="1b24cdcec5afa4ca8ae04f5f805367b2d6db2d4d" translate="yes" xml:space="preserve">
          <source>With GHC, the memory overheads are as follows, expressed in words and in bytes (words are 4 and 8 bytes on 32 or 64bit machines respectively).</source>
          <target state="translated">GHC를 사용하면 메모리 오버 헤드는 다음과 같이 단어와 바이트로 표시됩니다 (워드는 각각 32 또는 64 비트 시스템에서 4 및 8 바이트입니다).</target>
        </trans-unit>
        <trans-unit id="2d06615b16a183cf6330905f8030d63fe75722c8" translate="yes" xml:space="preserve">
          <source>With Unicode text, it is incorrect to use combinators like &lt;code&gt;map
 toUpper&lt;/code&gt; to case convert each character of a string individually. Instead, use the whole-string case conversion functions from this module. For correctness in different writing systems, these functions may map one input character to two or three output characters.</source>
          <target state="translated">유니 코드 텍스트 의 경우 문자열의 각 문자를 개별적으로 변환하기 위해 &lt;code&gt;map toUpper&lt;/code&gt; 와 같은 결합자를 사용하는 것은 올바르지 않습니다 . 대신이 모듈에서 전체 문자열 대 / 소문자 변환 함수를 사용하십시오. 다른 쓰기 시스템에서의 정확성을 위해 이러한 기능은 하나의 입력 문자를 두세 개의 출력 문자에 매핑 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="51f3ae84f7608aa013b4484775362a706adc53f0" translate="yes" xml:space="preserve">
          <source>With any luck, &lt;code&gt;__GLASGOW_HASKELL__&lt;/code&gt; will be undefined in all other implementations that support C-style pre-processing.</source>
          <target state="translated">운 &lt;code&gt;__GLASGOW_HASKELL__&lt;/code&gt; C 스타일 사전 처리를 지원하는 다른 모든 구현 에서는 __GLASGOW_HASKELL__ 이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c44ed7fc274ccaa822b5b3ccf3ecc3bf7adbae81" translate="yes" xml:space="preserve">
          <source>With dependently-typed features it is more useful (see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/2431&quot;&gt;#2431&lt;/a&gt;). For example, consider these two candidate definitions of &lt;code&gt;absurd&lt;/code&gt;:</source>
          <target state="translated">종속 유형 기능을 사용하면 더 유용합니다 ( &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/2431&quot;&gt;# 2431&lt;/a&gt; 참조 ). 예를 들어, &lt;code&gt;absurd&lt;/code&gt; 두 가지 후보 정의를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="107ef4354dd6e452c7d4441a2e93bd2aacde1ddc" translate="yes" xml:space="preserve">
          <source>With dependently-typed features it is more useful (see &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/2431&quot;&gt;Issue #2431&lt;/a&gt;). For example, consider these two candidate definitions of &lt;code&gt;absurd&lt;/code&gt;:</source>
          <target state="translated">종속적으로 유형이 지정된 기능을 사용하면 더 유용합니다 ( &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/2431&quot;&gt;문제 # 2431&lt;/a&gt; 참조 ). 예를 들어, &lt;code&gt;absurd&lt;/code&gt; 다음 두 후보 정의를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="21e78b74f477258018d7a7870e8af03b21095ae1" translate="yes" xml:space="preserve">
          <source>With kind polymorphism, there is quite a bit going on behind the scenes that may be invisible to a Haskell programmer. GHC supports several flags that control how types are printed in error messages and at the GHCi prompt. See the &lt;a href=&quot;using#pretty-printing-types&quot;&gt;discussion of type pretty-printing options&lt;/a&gt; for further details. If you are using kind polymorphism and are confused as to why GHC is rejecting (or accepting) your program, we encourage you to turn on these flags, especially &lt;a href=&quot;using#ghc-flag--fprint-explicit-kinds&quot;&gt;&lt;code&gt;-fprint-explicit-kinds&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">친절한 다형성으로, Haskell 프로그래머에게는 보이지 않을 수있는이면에서 약간의 진행이 있습니다. GHC는 오류 메시지와 GHCi 프롬프트에서 유형이 인쇄되는 방법을 제어하는 ​​여러 플래그를 지원합니다. 자세한 내용은 &lt;a href=&quot;using#pretty-printing-types&quot;&gt;예쁜 인쇄 옵션&lt;/a&gt; 에 대한 설명을 참조하십시오. 친절한 다형성을 사용하고 왜 GHC가 프로그램을 거부 (또는 수락)하는지에 대해 혼란 &lt;a href=&quot;using#ghc-flag--fprint-explicit-kinds&quot;&gt; &lt;code&gt;-fprint-explicit-kinds&lt;/code&gt; &lt;/a&gt; 이러한 플래그, 특히 -fprint-explicit-kinds를 설정하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="69cd37ef3fe1623579439f2a0ea2d08874630d4e" translate="yes" xml:space="preserve">
          <source>With multiple modules in scope, especially multiple &lt;code&gt;*&lt;/code&gt;-form modules, it is likely that name clashes will occur. Haskell specifies that name clashes are only reported when an ambiguous identifier is used, and GHCi behaves in the same way for expressions typed at the prompt.</source>
          <target state="translated">범위 내에서 여러 모듈, 특히 여러 &lt;code&gt;*&lt;/code&gt; 양식 모듈을 사용하면 이름 충돌이 발생할 수 있습니다. Haskell은 이름 충돌이 모호한 식별자가 사용될 때만보고되고 GHCi가 프롬프트에 입력 된 표현식에 대해 동일한 방식으로 동작하도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="d0493423cb33f94a9da912db9832c18dcdd8ec9d" translate="yes" xml:space="preserve">
          <source>With only 1 generation (e.g. &lt;code&gt;-G1&lt;/code&gt;, see &lt;a href=&quot;#rts-flag--G%20%E2%9F%A8generations%E2%9F%A9&quot;&gt;&lt;code&gt;-G ⟨generations⟩&lt;/code&gt;&lt;/a&gt;) the &lt;code&gt;-A&lt;/code&gt; option specifies the minimum allocation area, since the actual size of the allocation area will be resized according to the amount of data in the heap (see &lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt;&lt;code&gt;-F ⟨factor⟩&lt;/code&gt;&lt;/a&gt;, below).</source>
          <target state="translated">단지 1 세대 (예 &lt;code&gt;-G1&lt;/code&gt; 참조 &lt;a href=&quot;#rts-flag--G%20%E2%9F%A8generations%E2%9F%A9&quot;&gt; &lt;code&gt;-G ⟨generations⟩&lt;/code&gt; &lt;/a&gt; )에 &lt;code&gt;-A&lt;/code&gt; 의 할당 영역의 실제 크기가 힙 데이터 량에 따라 크기가 조정되기 때문에 옵션이 최소 할당 영역을 지정한다 (참조 &lt;a href=&quot;#rts-flag--F%20%E2%9F%A8factor%E2%9F%A9&quot;&gt; &lt;code&gt;-F ⟨factor⟩&lt;/code&gt; &lt;/a&gt; 아래의 ⟨factor below).</target>
        </trans-unit>
        <trans-unit id="785aea24bc9e99119b7035e19ac075542c979030" translate="yes" xml:space="preserve">
          <source>With some exceptions (see below), the file will be created securely in the sense that an attacker should not be able to cause openTempFile to overwrite another file on the filesystem using your credentials, by putting symbolic links (on Unix) in the place where the temporary file is to be created. On Unix the &lt;code&gt;O_CREAT&lt;/code&gt; and &lt;code&gt;O_EXCL&lt;/code&gt; flags are used to prevent this attack, but note that &lt;code&gt;O_EXCL&lt;/code&gt; is sometimes not supported on NFS filesystems, so if you rely on this behaviour it is best to use local filesystems only.</source>
          <target state="translated">일부 예외 (아래 참조)를 제외하면 공격자가 사용자의 자격 증명을 사용하여 openTempFile이 파일 시스템의 다른 파일을 덮어 쓸 수 없도록하는 의미로 파일이 안전하게 생성됩니다. 임시 파일이 작성됩니다. Unix에서는 &lt;code&gt;O_CREAT&lt;/code&gt; 및 &lt;code&gt;O_EXCL&lt;/code&gt; 플래그가이 공격을 방지하는 데 사용되지만 NFS 파일 시스템에서는 &lt;code&gt;O_EXCL&lt;/code&gt; 이 지원되지 않는 경우 가 있으므로이 동작에 의존하는 경우 로컬 파일 시스템 만 사용하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a93509c3f999509299ef31391df84499497efcb8" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;#extension-Arrows&quot;&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;/a&gt; extension, GHC supports the arrow notation described in the second of these papers, translating it using combinators from the &lt;a href=&quot;../libraries/base-4.13.0.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; module. What follows is a brief introduction to the notation; it won&amp;rsquo;t make much sense unless you&amp;rsquo;ve read Hughes&amp;rsquo;s paper.</source>
          <target state="translated">&lt;a href=&quot;#extension-Arrows&quot;&gt; &lt;code&gt;Arrows&lt;/code&gt; &lt;/a&gt; 확장을 사용하면 GHC는이 두 번째 논문에서 설명하는 화살표 표기법을 지원하며 &lt;a href=&quot;../libraries/base-4.13.0.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; 모듈 의 결합기를 사용하여 번역합니다 . 다음은 표기법에 대한 간략한 소개입니다. 휴즈의 논문을 읽지 않으면 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6b570873f02bd59cb3d75af7817ea6c7ba50ea43" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;#extension-Arrows&quot;&gt;&lt;code&gt;Arrows&lt;/code&gt;&lt;/a&gt; extension, GHC supports the arrow notation described in the second of these papers, translating it using combinators from the &lt;a href=&quot;../libraries/base-4.14.1.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; module. What follows is a brief introduction to the notation; it won&amp;rsquo;t make much sense unless you&amp;rsquo;ve read Hughes&amp;rsquo;s paper.</source>
          <target state="translated">으로 &lt;a href=&quot;#extension-Arrows&quot;&gt; &lt;code&gt;Arrows&lt;/code&gt; &lt;/a&gt; 확장 GHC 그것이에서 연결자를 이용하여 변환이 논문에 기재된 초 화살표 표시를 지원&lt;a href=&quot;../libraries/base-4.14.1.0/control-arrow&quot;&gt; Control.Arrow 용&lt;/a&gt; 모듈. 다음은 표기법에 대한 간략한 소개입니다. Hughes의 논문을 읽지 않았다면 말이 안됩니다.</target>
        </trans-unit>
        <trans-unit id="6f1c52b5955db050f2c09abaaf8b8f9460a4acba" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;#extension-ConstraintKinds&quot;&gt;&lt;code&gt;ConstraintKinds&lt;/code&gt;&lt;/a&gt; extension, GHC becomes more liberal in what it accepts as constraints in your program. To be precise, with this flag any &lt;em&gt;type&lt;/em&gt; of the new kind &lt;code&gt;Constraint&lt;/code&gt; can be used as a constraint. The following things have kind &lt;code&gt;Constraint&lt;/code&gt;:</source>
          <target state="translated">으로 &lt;a href=&quot;#extension-ConstraintKinds&quot;&gt; &lt;code&gt;ConstraintKinds&lt;/code&gt; 의&lt;/a&gt; 확장, GHC는 프로그램의 제약으로 받아들이는 것에 자유주의된다. 정확하게 말하면,이 플래그를 사용하면 모든 &lt;em&gt;종류&lt;/em&gt; 의 새로운 &lt;code&gt;Constraint&lt;/code&gt; 으로 사용할 수 있습니다. 다음과 같은 종류의 &lt;code&gt;Constraint&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1664518d009a52644be50176a94b39948aa07fe" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;#extension-EmptyDataDecls&quot;&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;/a&gt; extension, GHC lets you declare a data type with no constructors.</source>
          <target state="translated">으로 &lt;a href=&quot;#extension-EmptyDataDecls&quot;&gt; &lt;code&gt;EmptyDataDecls&lt;/code&gt; 의&lt;/a&gt; 확장, GHC는없는 생성자와 데이터 유형을 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86f5c1ba9a946fe63d6ee762808ace202ba1df31" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;#extension-PackageImports&quot;&gt;&lt;code&gt;PackageImports&lt;/code&gt;&lt;/a&gt; extension, GHC allows import declarations to be qualified by the package name that the module is intended to be imported from. For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-PackageImports&quot;&gt; &lt;code&gt;PackageImports&lt;/code&gt; &lt;/a&gt; 확장을 사용하면 GHC를 통해 모듈을 가져 오려는 패키지 이름으로 가져 오기 선언을 규정 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0081b5adf07c359a705bcc01d665e8bd9d05b630" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;#extension-RankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt; extension (&lt;a href=&quot;#universal-quantification&quot;&gt;Lexically scoped type variables&lt;/a&gt;), it is possible to declare type arguments somewhere other than the beginning of a type. For example, we can have &lt;code&gt;pair :: forall a. a -&amp;gt; forall b. b -&amp;gt; (a, b)&lt;/code&gt; and then say &lt;code&gt;pair @Bool True @Char&lt;/code&gt; which would have type &lt;code&gt;Char -&amp;gt; (Bool, Char)&lt;/code&gt;.</source>
          <target state="translated">으로 &lt;a href=&quot;#extension-RankNTypes&quot;&gt; &lt;code&gt;RankNTypes&lt;/code&gt; 의&lt;/a&gt; 확장자 ( &lt;a href=&quot;#universal-quantification&quot;&gt;어휘 적 형 변수 범위&lt;/a&gt; ), 그 유형의 시작 아닌 다른 형태 인수를 선언 할 수있다. 예를 들어, &lt;code&gt;pair :: forall a. a -&amp;gt; forall b. b -&amp;gt; (a, b)&lt;/code&gt; 을 가질 수 있습니다 . a-&amp;gt; forall b. b-&amp;gt; (a, b) 를 누른 다음 &lt;code&gt;pair @Bool True @Char&lt;/code&gt; &lt;code&gt;Char -&amp;gt; (Bool, Char)&lt;/code&gt; 유형의 @Bool True @Char 쌍 을 말합니다 .</target>
        </trans-unit>
        <trans-unit id="76eee139e346997f5c9c53bbb31187ae5e3574e1" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;#extension-TypeSynonymInstances&quot;&gt;&lt;code&gt;TypeSynonymInstances&lt;/code&gt;&lt;/a&gt; extension, instance heads may use type synonyms. As always, using a type synonym is just shorthand for writing the RHS of the type synonym definition. For example:</source>
          <target state="translated">&lt;a href=&quot;#extension-TypeSynonymInstances&quot;&gt; &lt;code&gt;TypeSynonymInstances&lt;/code&gt; &lt;/a&gt; 확장을 사용하면 인스턴스 헤드에서 유형 동의어를 사용할 수 있습니다. 항상 그렇듯이, 유형 동의어를 사용하는 것은 유형 동의어 정의의 RHS를 작성하기위한 간단한 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd64afd9c5cd942b81bb03eac59d62ba1c9175a3" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;safe_haskell#extension-Safe&quot;&gt;&lt;code&gt;Safe&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;safe_haskell#extension-Trustworthy&quot;&gt;&lt;code&gt;Trustworthy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;safe_haskell#extension-Unsafe&quot;&gt;&lt;code&gt;Unsafe&lt;/code&gt;&lt;/a&gt; language flags, GHC extends the import declaration syntax to take an optional &lt;code&gt;safe&lt;/code&gt; keyword after the &lt;code&gt;import&lt;/code&gt; keyword. This feature is part of the Safe Haskell GHC extension. For example:</source>
          <target state="translated">으로 &lt;a href=&quot;safe_haskell#extension-Safe&quot;&gt; &lt;code&gt;Safe&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;safe_haskell#extension-Trustworthy&quot;&gt; &lt;code&gt;Trustworthy&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;safe_haskell#extension-Unsafe&quot;&gt; &lt;code&gt;Unsafe&lt;/code&gt; &lt;/a&gt; 언어 플래그, GHC는 옵션 취할 수있는 수입 신고 구문 확장 &lt;code&gt;safe&lt;/code&gt; 애프터 키워드 &lt;code&gt;import&lt;/code&gt; 키워드를. 이 기능은 Safe Haskell GHC 확장의 일부입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="86dce2a8a32edb642a5851fc037f97dda0e2a514" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;-XDeriveDataTypeable&lt;/code&gt; option, GHC can generate instances of the &lt;code&gt;&lt;a href=&quot;data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; class automatically. For example, given the declaration</source>
          <target state="translated">&lt;code&gt;-XDeriveDataTypeable&lt;/code&gt; 옵션을 사용하면 GHC는 &lt;code&gt;&lt;a href=&quot;data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; 클래스의 인스턴스를 자동으로 생성 할 수 있습니다 . 예를 들어 다음과 같이 선언하면</target>
        </trans-unit>
        <trans-unit id="7061af1c2882d04c412d1f683d99f0149d64aa2b" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;T&lt;/code&gt; example above, we could bind &lt;code&gt;k&lt;/code&gt;&lt;em&gt;after&lt;/em&gt;&lt;code&gt;a&lt;/code&gt;; doing so would not violate dependency concerns. However, it would violate our general principle, and so &lt;code&gt;k&lt;/code&gt; comes first.</source>
          <target state="translated">위의 &lt;code&gt;T&lt;/code&gt; 예제를 사용하면 &lt;code&gt;a&lt;/code&gt; &lt;em&gt;다음 &lt;/em&gt;에 &lt;code&gt;k&lt;/code&gt; &lt;em&gt;를&lt;/em&gt; 바인딩 할 수 있습니다 . 그렇게하면 종속성 문제를 위반하지 않습니다. 그러나 그것은 우리의 일반적인 원칙을 위반하므로 &lt;code&gt;k&lt;/code&gt; 가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="95a87e504b0a793e5fd58318fbc965d5cde726b1" translate="yes" xml:space="preserve">
          <source>With the declaration of &lt;code&gt;(:~~:)&lt;/code&gt; above, it gets kind &lt;code&gt;forall k1 k2. k1 -&amp;gt; k2 -&amp;gt; Type&lt;/code&gt;. Thus, the type &lt;code&gt;(:~~:) a&lt;/code&gt; has kind &lt;code&gt;k2 -&amp;gt; Type&lt;/code&gt; for some &lt;code&gt;k2&lt;/code&gt;. GHC cannot then &lt;em&gt;regeneralize&lt;/em&gt; this kind to become &lt;code&gt;forall k2. k2 -&amp;gt; Type&lt;/code&gt; as desired. Thus, the instance is rejected as ill-kinded.</source>
          <target state="translated">위의 &lt;code&gt;(:~~:)&lt;/code&gt; 선언으로 모든 &lt;code&gt;forall k1 k2. k1 -&amp;gt; k2 -&amp;gt; Type&lt;/code&gt; 친절 합니다. k1-&amp;gt; k2-&amp;gt; 유형 . 따라서 타입 &lt;code&gt;(:~~:) a&lt;/code&gt; 는 &lt;code&gt;k2 -&amp;gt; Type&lt;/code&gt; &lt;code&gt;k2&lt;/code&gt; 에 대한 종류 k2를 갖습니다 . 그런 다음 GHC는 이러한 종류를 &lt;em&gt;다시 생성&lt;/em&gt; 하여 모든 &lt;code&gt;forall k2. k2 -&amp;gt; Type&lt;/code&gt; 가 될 수 없습니다 . k2-&amp;gt; 원하는대로 입력하십시오 . 따라서 인스턴스는 잘못된 것으로 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="8e9d7ae0964f2c8a37967ebdf7b51ca679bfce71" translate="yes" xml:space="preserve">
          <source>With the extension that adds a &lt;a href=&quot;#constraint-kind&quot;&gt;kind of constraints&lt;/a&gt;, you can write more exotic superclass definitions. The superclass cycle check is even more liberal in these case. For example, this is OK:</source>
          <target state="translated">&lt;a href=&quot;#constraint-kind&quot;&gt;일종의 제약 조건&lt;/a&gt; 을 추가하는 확장을 사용하면 더 이국적인 수퍼 클래스 정의를 작성할 수 있습니다. 이 경우 수퍼 클래스 사이클 점검이 훨씬 더 자유 롭습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c21ffce8c72ae9e80966f7f06bfe16bc1598f575" translate="yes" xml:space="preserve">
          <source>With the goal in mind to make &lt;code&gt;encode&lt;/code&gt; work on &lt;code&gt;Tree&lt;/code&gt; and other datatypes, we now define instances for the representation type constructors &lt;code&gt;&lt;a href=&quot;ghc-generics#t:V1&quot;&gt;V1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t:U1&quot;&gt;U1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tree&lt;/code&gt; 및 기타 데이터 유형 에 대한 &lt;code&gt;encode&lt;/code&gt; 작업을 염두에두고 이제 표현 유형 생성자 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:V1&quot;&gt;V1&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ghc-generics#t:U1&quot;&gt;U1&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-43-:&quot;&gt;:+:&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ghc-generics#t::-42-:&quot;&gt;:*:&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;ghc-generics#t:K1&quot;&gt;K1&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ghc-generics#t:M1&quot;&gt;M1&lt;/a&gt;&lt;/code&gt; 에 대한 인스턴스를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="5302a8fcd7027fe5fed3ca73b8eed7f9ceed1e24" translate="yes" xml:space="preserve">
          <source>With the improved kind of &lt;code&gt;Vec&lt;/code&gt;, things like &lt;code&gt;Vec Int Char&lt;/code&gt; are now ill-kinded, and GHC will report an error.</source>
          <target state="translated">&lt;code&gt;Vec&lt;/code&gt; 의 향상된 종류로 Vec &lt;code&gt;Vec Int Char&lt;/code&gt; 와 같은 것들이 잘못되어 GHC가 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="0aed3bcdd45e9d87e9c818064646efdefe64f958" translate="yes" xml:space="preserve">
          <source>With the language extension &lt;a href=&quot;#extension-UndecidableSuperClasses&quot;&gt;&lt;code&gt;UndecidableSuperClasses&lt;/code&gt;&lt;/a&gt; GHC lifts all restrictions on superclass constraints. If there really &lt;em&gt;is&lt;/em&gt; a loop, GHC will only expand it to finite depth.</source>
          <target state="translated">언어 확장이 &lt;a href=&quot;#extension-UndecidableSuperClasses&quot;&gt; &lt;code&gt;UndecidableSuperClasses&lt;/code&gt; 인&lt;/a&gt; GHC는 수퍼 클래스 제약에 대한 모든 제한을 해제합니다. 정말이 경우 &lt;em&gt;입니다&lt;/em&gt; 루프가, GHC는 유한 깊이로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="881f9aca2cbf94416a15c78d09c89a5e610b3cba" translate="yes" xml:space="preserve">
          <source>With this extension turned on, &lt;code&gt;static&lt;/code&gt; is no longer a valid identifier.</source>
          <target state="translated">이 확장을 설정하면 &lt;code&gt;static&lt;/code&gt; 은 더 이상 유효한 식별자가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="3eae705dd30aa403e3959eddafb73fb5d53a286c" translate="yes" xml:space="preserve">
          <source>With this flag enabled we use the last jump instruction in blocks. Without this flags the old algorithm also uses the heaviest outgoing edge.</source>
          <target state="translated">이 플래그를 활성화하면 마지막 점프 명령을 블록 단위로 사용합니다. 이 플래그가 없으면 기존 알고리즘은 가장 무거운 발신 에지도 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b16f923b2bccb6268626a56190ac266418d2ee9a" translate="yes" xml:space="preserve">
          <source>With this form of the group statement, f is required to simply have the type &lt;code&gt;forall a. [a] -&amp;gt; [[a]]&lt;/code&gt;, which will be used to group up the comprehension so far directly. An example of this form is as follows:</source>
          <target state="translated">이 형식의 그룹 설명을 사용하면 f는 단순히 &lt;code&gt;forall a. [a] -&amp;gt; [[a]]&lt;/code&gt; 유형을 가져야합니다 . [a]-&amp;gt; [[a]] , 지금까지 이해를 그룹화하는 데 사용됩니다. 이 형식의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c1ca2feeac1b63c8b0e8b5d863d1efdb6417eb61" translate="yes" xml:space="preserve">
          <source>With this macro defined in your &lt;code&gt;.ghci&lt;/code&gt; file, you can use &lt;code&gt;:source file&lt;/code&gt; to read GHCi commands from &lt;code&gt;file&lt;/code&gt;. You can find (and contribute!-) other suggestions for &lt;code&gt;.ghci&lt;/code&gt; files on this Haskell wiki page: &lt;a href=&quot;http://haskell.org/haskellwiki/GHC/GHCi&quot;&gt;GHC/GHCi&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;.ghci&lt;/code&gt; 파일 에이 매크로가 정의되어 있으면 &lt;code&gt;:source file&lt;/code&gt; 을 사용하여 &lt;code&gt;file&lt;/code&gt; 에서 GHCi 명령을 읽을 수 있습니다 . 이 Haskell 위키 페이지에서 &lt;code&gt;.ghci&lt;/code&gt; 파일에 대한 다른 제안을 찾아서 제공 할 수 있습니다 : &lt;a href=&quot;http://haskell.org/haskellwiki/GHC/GHCi&quot;&gt;GHC / GHCi&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c6c0ef956744d9c2875427c6662b77c5a888414" translate="yes" xml:space="preserve">
          <source>With zig-zag cuts.</source>
          <target state="translated">지그재그 컷.</target>
        </trans-unit>
        <trans-unit id="bc2f9125cc8c7112d9ada66985a127ec0ad4e915" translate="yes" xml:space="preserve">
          <source>Within reason, more memory for heap space means less garbage collection for GHC, which means less compilation time. If you use the &lt;code&gt;-Rghc-timing&lt;/code&gt; option, you&amp;rsquo;ll get a garbage-collector report. (Again, you can use the cheap-and-nasty &lt;code&gt;+RTS -S -RTS&lt;/code&gt; option to send the GC stats straight to standard error.)</source>
          <target state="translated">이러한 이유로 힙 공간에 대한 메모리가 많을수록 GHC에 대한 가비지 수집이 줄어들어 컴파일 시간이 줄어 듭니다. &lt;code&gt;-Rghc-timing&lt;/code&gt; 옵션 을 사용하면 가비지 수집기 보고서가 표시됩니다. (또한 저렴하고 불쾌한 &lt;code&gt;+RTS -S -RTS&lt;/code&gt; 옵션을 사용하여 GC 통계를 표준 오류로 바로 보낼 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="8f47805e05322cd599bf35fe9faf060f5e73efd3" translate="yes" xml:space="preserve">
          <source>Within this module, many functions construct a &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from one or more &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; values. Those functions will substitute &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; values that are not valid Unicode scalar values with the replacement character &quot;�&quot; (U+FFFD). Functions that perform this inspection and replacement are documented with the phrase &quot;Performs replacement on invalid scalar values&quot;.</source>
          <target state="translated">이 모듈에서 많은 함수 는 하나 이상의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 값 으로 &lt;code&gt;&lt;a href=&quot;data-text#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 를 구성 합니다. 이러한 함수는 유효한 유니 코드 스칼라 값이 아닌 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 값을 대체 문자 &quot;&quot;(U + FFFD)로 대체합니다. 이 검사 및 교체를 수행하는 함수는 &quot;유효하지 않은 스칼라 값에서 교체를 수행합니다&quot;라는 문구와 함께 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="dea0da7408cfec1901b2368ef703f2aecf1f6514" translate="yes" xml:space="preserve">
          <source>Within this module, many functions construct a &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; from one or more &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; values. Those functions will substitute &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; values that are not valid Unicode scalar values with the replacement character &quot;�&quot; (U+FFFD). Functions that perform this inspection and replacement are documented with the phrase &quot;Performs replacement on invalid scalar values&quot;.</source>
          <target state="translated">이 모듈에서 많은 함수 는 하나 이상의 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 값 으로 &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; 를 구성 합니다. 이러한 함수는 유효한 유니 코드 스칼라 값이 아닌 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; 값을 대체 문자 &quot;&quot;(U + FFFD)로 대체합니다. 이 검사 및 교체를 수행하는 함수는 &quot;유효하지 않은 스칼라 값에서 교체를 수행합니다&quot;라는 문구와 함께 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9dfb1e2314e140fc44280b93e374d8103a6bd88" translate="yes" xml:space="preserve">
          <source>Without &lt;a href=&quot;#extension-DuplicateRecordFields&quot;&gt;&lt;code&gt;DuplicateRecordFields&lt;/code&gt;&lt;/a&gt;, an update mentioning &lt;code&gt;foo&lt;/code&gt; will always be ambiguous if all these definitions were in scope. When the extension is enabled, there are several options for disambiguating updates:</source>
          <target state="translated">&lt;a href=&quot;#extension-DuplicateRecordFields&quot;&gt; &lt;code&gt;DuplicateRecordFields&lt;/code&gt; 가&lt;/a&gt; 없으면 이러한 모든 정의가 범위 내에 있으면 &lt;code&gt;foo&lt;/code&gt; 를 언급하는 업데이트 가 항상 모호합니다. 확장 기능을 사용하면 명확하게 업데이트 할 수있는 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf558caacc962a4ce5708595b14947064e9202c7" translate="yes" xml:space="preserve">
          <source>Without &lt;a href=&quot;#extension-PolyKinds&quot;&gt;&lt;code&gt;PolyKinds&lt;/code&gt;&lt;/a&gt;, GHC refuses to generalise over kind variables. It thus defaults kind variables to &lt;code&gt;Type&lt;/code&gt; when possible; when this is not possible, an error is issued.</source>
          <target state="translated">&lt;a href=&quot;#extension-PolyKinds&quot;&gt; &lt;code&gt;PolyKinds&lt;/code&gt; 가&lt;/a&gt; 없으면 GHC는 종류 변수에 대한 일반화를 거부합니다. 따라서 가능한 경우 종류 변수를 &lt;code&gt;Type&lt;/code&gt; 기본 설정 합니다. 이것이 불가능하면 오류가 발행됩니다.</target>
        </trans-unit>
        <trans-unit id="2a9c3c68ec886ab1a40dbb182885c56e2b6ca831" translate="yes" xml:space="preserve">
          <source>Without &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt; this is parsed as a list comprehension. With &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt; this is parsed as a quasi-quote; however, this parse will fail due to the lack of a closing &lt;code&gt;|]&lt;/code&gt;. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11679&quot;&gt;#11679&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt; 가 없으면 목록 이해로 구문 분석됩니다. &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; 를&lt;/a&gt; 사용하면 유사 인용문으로 구문 분석됩니다. 그러나 닫는 &lt;code&gt;|]&lt;/code&gt; 이 없기 때문에이 구문 분석은 실패 합니다. &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11679&quot;&gt;# 11679를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5845f382c175f98b7eb91c01c1ee5f311d078978" translate="yes" xml:space="preserve">
          <source>Without &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt; this is parsed as a list comprehension. With &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt; this is parsed as a quasi-quote; however, this parse will fail due to the lack of a closing &lt;code&gt;|]&lt;/code&gt;. See &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11679&quot;&gt;Issue #11679&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; &lt;/a&gt; 가 없으면 목록 이해력으로 해석됩니다. &lt;a href=&quot;#extension-QuasiQuotes&quot;&gt; &lt;code&gt;QuasiQuotes&lt;/code&gt; 를&lt;/a&gt; 사용하면 이를 준 따옴표로 분석합니다. 그러나이 구문 분석은 닫는 &lt;code&gt;|]&lt;/code&gt; 부족으로 인해 실패 합니다. &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/11679&quot;&gt;문제 # 11679를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f3724a985619b98c0ad7733af9c670b7ea356bd" translate="yes" xml:space="preserve">
          <source>Without a &lt;a href=&quot;#ghc-flag--prof&quot;&gt;&lt;code&gt;-prof&lt;/code&gt;&lt;/a&gt; option, your &lt;code&gt;SCC&lt;/code&gt;s are ignored; so you can compile &lt;code&gt;SCC&lt;/code&gt;-laden code without changing it.</source>
          <target state="translated">&lt;a href=&quot;#ghc-flag--prof&quot;&gt; &lt;code&gt;-prof&lt;/code&gt; &lt;/a&gt; 옵션이 없으면 &lt;code&gt;SCC&lt;/code&gt; 가 무시됩니다. &lt;code&gt;SCC&lt;/code&gt; 가 포함 된 코드를 변경하지 않고 컴파일 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7b93607420f6e329b78506ca570d35577aad1878" translate="yes" xml:space="preserve">
          <source>Without any arguments, displays the current set of options that are applied to expressions and commands typed at the prompt.</source>
          <target state="translated">인수없이 프롬프트에서 입력 한 표현식 및 명령에 적용되는 현재 옵션 세트를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6afd1c5d24d0c6ba28deb9777974788c74c647b1" translate="yes" xml:space="preserve">
          <source>Without lifting a finger, the &lt;code&gt;?cmp&lt;/code&gt; parameter is propagated to become a parameter of &lt;code&gt;least&lt;/code&gt; as well. With explicit parameters, the default is that parameters must always be explicit propagated. With implicit parameters, the default is to always propagate them.</source>
          <target state="translated">손가락을 들어 올리지 않으면, &lt;code&gt;?cmp&lt;/code&gt; 파라미터는 &lt;code&gt;least&lt;/code&gt; 의 파라미터가되도록 전파된다 . 명시 적 매개 변수를 사용하면 기본적으로 매개 변수가 항상 명시 적으로 전파되어야합니다. 암시 적 매개 변수를 사용하면 기본값은 항상 매개 변수를 전파하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b0f92d9fa8c76be5e794944834d2ec86a2772775" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;MINIMAL&lt;/code&gt; pragma no warning would be generated for an instance that implements neither method.</source>
          <target state="translated">포함하지 않는 &lt;code&gt;MINIMAL&lt;/code&gt; 프라그 경고는 인스턴스가 구현도 방법에 대해 생성되지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="50d9f1e1cbc21e6ec9dc165a0f7dae51d3263314" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;forall b&lt;/code&gt;, the type variable &lt;code&gt;b&lt;/code&gt; would be quantified over the whole instance declaration, which is not what is intended.</source>
          <target state="translated">&lt;code&gt;forall b&lt;/code&gt; 가 없으면 유형 변수 &lt;code&gt;b&lt;/code&gt; 는 전체 인스턴스 선언에 대해 수량화되며 이는 의도 된 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="d93b93f4b6fa3889a10d8fc5065716508c9b410a" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;pattern&lt;/code&gt; prefix, &lt;code&gt;Zero&lt;/code&gt; would be interpreted as a type constructor in the export list.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 접두사가 없으면 &lt;code&gt;Zero&lt;/code&gt; 은 내보내기 목록에서 유형 생성자로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="8529406902d1abcacd9905fe51002c24837c1b9f" translate="yes" xml:space="preserve">
          <source>Witness for an unboxed &lt;code&gt;Proxy#&lt;/code&gt; value, which has no runtime representation.</source>
          <target state="translated">언 박스 (unboxed) &lt;code&gt;Proxy#&lt;/code&gt; 값에 대한 감시로 런타임 표현이 없습니다.</target>
        </trans-unit>
        <trans-unit id="610f9340ef73da170fe3d746b635b1e322839287" translate="yes" xml:space="preserve">
          <source>Witness the trail of destruction:</source>
          <target state="translated">파괴의 흔적을 목격하십시오 :</target>
        </trans-unit>
        <trans-unit id="44363ccb8230b892c5ab09c35a02a4ea41ff9976" translate="yes" xml:space="preserve">
          <source>Word</source>
          <target state="translated">Word</target>
        </trans-unit>
        <trans-unit id="d5483c905b6d49a4bb959ca289af138ba2e3974b" translate="yes" xml:space="preserve">
          <source>Word completion</source>
          <target state="translated">단어 완성</target>
        </trans-unit>
        <trans-unit id="ebec3f021b32b6cc5c3702fa2014aacc63a489c8" translate="yes" xml:space="preserve">
          <source>Word#</source>
          <target state="translated">Word#</target>
        </trans-unit>
        <trans-unit id="6a84434113170dd2196183223a37fdceb55ba2fb" translate="yes" xml:space="preserve">
          <source>Word16</source>
          <target state="translated">Word16</target>
        </trans-unit>
        <trans-unit id="47cfcc5721eb7b6a68e503b7664fe5da8cc042b7" translate="yes" xml:space="preserve">
          <source>Word16#</source>
          <target state="translated">Word16#</target>
        </trans-unit>
        <trans-unit id="c3be769dd2ec4a171cda42ade7fe290e55320847" translate="yes" xml:space="preserve">
          <source>Word16ElemRep</source>
          <target state="translated">Word16ElemRep</target>
        </trans-unit>
        <trans-unit id="6e4a4a97ad2c84568dfc9c970956cd5aea4291f3" translate="yes" xml:space="preserve">
          <source>Word16Rep</source>
          <target state="translated">Word16Rep</target>
        </trans-unit>
        <trans-unit id="27d33d7ad79bddbd9198dbf60544ea0a5922ab2d" translate="yes" xml:space="preserve">
          <source>Word16X16#</source>
          <target state="translated">Word16X16#</target>
        </trans-unit>
        <trans-unit id="581ced5045f9589c18eb6b89774a5edb7cf18907" translate="yes" xml:space="preserve">
          <source>Word16X32#</source>
          <target state="translated">Word16X32#</target>
        </trans-unit>
        <trans-unit id="cb0fa55002540cd66201e78dd2a473b775807583" translate="yes" xml:space="preserve">
          <source>Word16X8#</source>
          <target state="translated">Word16X8#</target>
        </trans-unit>
        <trans-unit id="ca9cf535ecc0d6f9c09f163d1eace0c0b75e14df" translate="yes" xml:space="preserve">
          <source>Word32</source>
          <target state="translated">Word32</target>
        </trans-unit>
        <trans-unit id="a933b159a6b2cb61c00b71e8591eb2ee110f8728" translate="yes" xml:space="preserve">
          <source>Word32#</source>
          <target state="translated">Word32#</target>
        </trans-unit>
        <trans-unit id="399b80b5d6a6df00939198146bfa201fbcfcb514" translate="yes" xml:space="preserve">
          <source>Word32ElemRep</source>
          <target state="translated">Word32ElemRep</target>
        </trans-unit>
        <trans-unit id="bb69aca3ee85ff65d670de320b3a0722f77e6a2c" translate="yes" xml:space="preserve">
          <source>Word32X16#</source>
          <target state="translated">Word32X16#</target>
        </trans-unit>
        <trans-unit id="8243c948dcd7f5412910c04096e56d0136dac05a" translate="yes" xml:space="preserve">
          <source>Word32X4#</source>
          <target state="translated">Word32X4#</target>
        </trans-unit>
        <trans-unit id="b142d249e87e96429320d524a3b07bd2246dd820" translate="yes" xml:space="preserve">
          <source>Word32X8#</source>
          <target state="translated">Word32X8#</target>
        </trans-unit>
        <trans-unit id="8a1457858cb6a778826be1ec52c62538bb952ff7" translate="yes" xml:space="preserve">
          <source>Word64</source>
          <target state="translated">Word64</target>
        </trans-unit>
        <trans-unit id="8530200a24dcfbd549467b756af592d29de90c98" translate="yes" xml:space="preserve">
          <source>Word64#</source>
          <target state="translated">Word64#</target>
        </trans-unit>
        <trans-unit id="5346b71b27abd762c16882d8503921d915a9b596" translate="yes" xml:space="preserve">
          <source>Word64ElemRep</source>
          <target state="translated">Word64ElemRep</target>
        </trans-unit>
        <trans-unit id="ad9de82091d9f5be6f70404a7f6ea77db4515661" translate="yes" xml:space="preserve">
          <source>Word64Rep</source>
          <target state="translated">Word64Rep</target>
        </trans-unit>
        <trans-unit id="0bf4e17ceba7b29f9db8d40fc30978cabad5b2e3" translate="yes" xml:space="preserve">
          <source>Word64X2#</source>
          <target state="translated">Word64X2#</target>
        </trans-unit>
        <trans-unit id="f30283a81aeb4836e2239aa4b4f88d036171e15d" translate="yes" xml:space="preserve">
          <source>Word64X4#</source>
          <target state="translated">Word64X4#</target>
        </trans-unit>
        <trans-unit id="6df564da800ea9db332a4e4f70ac3b7baee68108" translate="yes" xml:space="preserve">
          <source>Word64X8#</source>
          <target state="translated">Word64X8#</target>
        </trans-unit>
        <trans-unit id="7d4f09dfc217ef6de83fd0a7817a34a9c524f5f8" translate="yes" xml:space="preserve">
          <source>Word8</source>
          <target state="translated">Word8</target>
        </trans-unit>
        <trans-unit id="1026530b7f2b7d11ceed950f769ae8af9db41c6d" translate="yes" xml:space="preserve">
          <source>Word8#</source>
          <target state="translated">Word8#</target>
        </trans-unit>
        <trans-unit id="46fa1330e06c95858d3c751456971104c43240e6" translate="yes" xml:space="preserve">
          <source>Word8ElemRep</source>
          <target state="translated">Word8ElemRep</target>
        </trans-unit>
        <trans-unit id="bb25378aca5d0bf9417565eddafe0c9955fced88" translate="yes" xml:space="preserve">
          <source>Word8Rep</source>
          <target state="translated">Word8Rep</target>
        </trans-unit>
        <trans-unit id="6d9c171610680a48a7e1adce25e5ef2175c1786b" translate="yes" xml:space="preserve">
          <source>Word8X16#</source>
          <target state="translated">Word8X16#</target>
        </trans-unit>
        <trans-unit id="7d2b3864aa2a328b268de16ec90a676d025166df" translate="yes" xml:space="preserve">
          <source>Word8X32#</source>
          <target state="translated">Word8X32#</target>
        </trans-unit>
        <trans-unit id="420bed9409614065e79233ee278151c88a99c07c" translate="yes" xml:space="preserve">
          <source>Word8X64#</source>
          <target state="translated">Word8X64#</target>
        </trans-unit>
        <trans-unit id="84c6a57a62c9a723bc4c3a3bbe6ffc9a885219d9" translate="yes" xml:space="preserve">
          <source>WordPtr</source>
          <target state="translated">WordPtr</target>
        </trans-unit>
        <trans-unit id="68dc8baeafc9a279622fb5e31be3ed83d95357da" translate="yes" xml:space="preserve">
          <source>WordRep</source>
          <target state="translated">WordRep</target>
        </trans-unit>
        <trans-unit id="7ba9e8f41622b0ccfc835a4f2140ab6eea7b7e9b" translate="yes" xml:space="preserve">
          <source>Work left-to-right through the input list of type variables, with a cursor.</source>
          <target state="translated">커서로 유형 변수의 입력 목록에서 왼쪽에서 오른쪽으로 작업하십시오.</target>
        </trans-unit>
        <trans-unit id="bc1c455e1b31ed1393785a6cdc3045bbb118f243" translate="yes" xml:space="preserve">
          <source>Workaround so that we can have a Haskell 98 instance &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#t:Error&quot;&gt;Error&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Haskell 98 인스턴스 &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#t:Error&quot;&gt;Error&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 가질 수있는 해결 방법 .</target>
        </trans-unit>
        <trans-unit id="9c02809968c5a04b4bf0b6d24112481a63ca6dca" translate="yes" xml:space="preserve">
          <source>Workaround so that we can have a Haskell 98 instance &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#t:Error&quot;&gt;Error&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Haskell 98 인스턴스 &lt;code&gt;&lt;a href=&quot;control-monad-trans-error#t:Error&quot;&gt;Error&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 가질 수 있도록 해결 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="5ab49cd9ef02b20b8f0a395f52a3bac5f961ae20" translate="yes" xml:space="preserve">
          <source>Worker-wrapper removes unused arguments, but usually we do not remove them all, lest it turn a function closure into a thunk, thereby perhaps creating a space leak and/or disrupting inlining. This flag allows worker/wrapper to remove &lt;em&gt;all&lt;/em&gt; value lambdas.</source>
          <target state="translated">Worker-wrapper는 사용하지 않는 인수를 제거하지만 일반적으로 함수 클로저를 썽 크로 바꾸어 공간 누출을 유발하거나 인라인을 방해하지 않도록 모든 인수를 제거하지는 않습니다. 이 플래그를 사용하면 작업자 / 래퍼가 &lt;em&gt;모든&lt;/em&gt; 값 람다 를 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="61f4d4dd918269bf5a5ff69500737f2e3c652d80" translate="yes" xml:space="preserve">
          <source>Working with equality</source>
          <target state="translated">평등하게 일하기</target>
        </trans-unit>
        <trans-unit id="b7851eadac070ddfea609696fdeb164b7899ebe8" translate="yes" xml:space="preserve">
          <source>Would result in a generated &lt;code&gt;Functor&lt;/code&gt; instance like so:</source>
          <target state="translated">다음 과 같이 생성 된 &lt;code&gt;Functor&lt;/code&gt; 인스턴스 가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="6ee562876821329b8991ff4daaadbf4f98ef9b98" translate="yes" xml:space="preserve">
          <source>Wrap a BCO in a &lt;code&gt;AP_UPD&lt;/code&gt; thunk which will be updated with the value of the BCO when evaluated.</source>
          <target state="translated">평가할 때 BCO 값으로 업데이트 될 &lt;code&gt;AP_UPD&lt;/code&gt; 썽크에 BCO를 래핑하십시오 .</target>
        </trans-unit>
        <trans-unit id="16397dd6317efa9c9836ee42453758565f8d25ed" translate="yes" xml:space="preserve">
          <source>Wrap an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to time out and return &lt;code&gt;Nothing&lt;/code&gt; in case no result is available within &lt;code&gt;n&lt;/code&gt; microseconds (&lt;code&gt;1/10^6&lt;/code&gt; seconds). In case a result is available before the timeout expires, &lt;code&gt;Just a&lt;/code&gt; is returned. A negative timeout interval means &quot;wait indefinitely&quot;. When specifying long timeouts, be careful not to exceed &lt;code&gt;maxBound :: Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 마이크로 초 ( &lt;code&gt;1/10^6&lt;/code&gt; 초) 내에 결과가없는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산을 시간 종료하고 &lt;code&gt;Nothing&lt;/code&gt; 리턴 하지 않도록 랩핑하십시오 . 시간 초과가 만료되기 전에 결과를 사용할 수있는 경우 &lt;code&gt;Just a&lt;/code&gt; 가 반환됩니다. 음의 시간 초과 간격은 &quot;무한 대기&quot;를 의미합니다. 긴 시간 초과를 지정할 때 &lt;code&gt;maxBound :: Int&lt;/code&gt; 를 초과하지 않도록주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="298bd3ed150b3f0eda86e3bd26b9d517dfc0dc76" translate="yes" xml:space="preserve">
          <source>Wrap an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to time out and return &lt;code&gt;Nothing&lt;/code&gt; in case no result is available within &lt;code&gt;n&lt;/code&gt; microseconds (&lt;code&gt;1/10^6&lt;/code&gt; seconds). In case a result is available before the timeout expires, &lt;code&gt;Just a&lt;/code&gt; is returned. A negative timeout interval means &quot;wait indefinitely&quot;. When specifying long timeouts, be careful not to exceed &lt;code&gt;maxBound :: Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 마이크로 초 ( &lt;code&gt;1/10^6&lt;/code&gt; 초) 내에 결과를 사용할 수없는 경우 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산을 시간 초과하고 &lt;code&gt;Nothing&lt;/code&gt; 을 반환하도록 래핑합니다 . 제한 시간이 만료되기 전에 결과를 사용할 수있는 경우 &lt;code&gt;Just a&lt;/code&gt; 가 반환됩니다. 음의 시간 초과 간격은 &quot;무한 대기&quot;를 의미합니다. 긴 시간 제한을 지정할 때 초과하지 않도록주의하십시오. &lt;code&gt;maxBound :: Int&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="769d436eab4aa870cf748d72592199f75a9fdf28" translate="yes" xml:space="preserve">
          <source>Wrap an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to time out and return &lt;code&gt;Nothing&lt;/code&gt; in case no result is available within &lt;code&gt;n&lt;/code&gt; microseconds (&lt;code&gt;1/10^6&lt;/code&gt; seconds). In case a result is available before the timeout expires, &lt;code&gt;Just a&lt;/code&gt; is returned. A negative timeout interval means &quot;wait indefinitely&quot;. When specifying long timeouts, be careful not to exceed &lt;code&gt;maxBound :: Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 마이크로 초 ( &lt;code&gt;1/10^6&lt;/code&gt; 초) 내에 결과가없는 경우 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 계산을 시간 종료하고 &lt;code&gt;Nothing&lt;/code&gt; 리턴 하지 않도록 랩핑하십시오 . 시간 초과가 만료되기 전에 결과를 사용할 수있는 경우 &lt;code&gt;Just a&lt;/code&gt; 가 반환됩니다. 음의 시간 초과 간격은 &quot;무한 대기&quot;를 의미합니다. 긴 시간 초과를 지정할 때 &lt;code&gt;maxBound :: Int&lt;/code&gt; 를 초과하지 않도록주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="052e52e2ec601e51ff67cce14d06f664e23dd732" translate="yes" xml:space="preserve">
          <source>Wrap document in &lt;code&gt;&quot;...&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;...&quot;&lt;/code&gt; 로 문서 랩</target>
        </trans-unit>
        <trans-unit id="3e2463a3964a6d5f90893a0cb4a83e415f58109e" translate="yes" xml:space="preserve">
          <source>Wrap document in &lt;code&gt;'...'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'...'&lt;/code&gt; 로 문서 줄 바꿈</target>
        </trans-unit>
        <trans-unit id="e11d85c98f81ceac1c15ffeb3554f6ef50d942c9" translate="yes" xml:space="preserve">
          <source>Wrap document in &lt;code&gt;(...)&lt;/code&gt;</source>
          <target state="translated">문서 감싸기 &lt;code&gt;(...)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fefcdd75b8d3ceac5767fa9ddb3485c2fae7387b" translate="yes" xml:space="preserve">
          <source>Wrap document in &lt;code&gt;[...]&lt;/code&gt;</source>
          <target state="translated">문서를 &lt;code&gt;[...]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d9a81e67b5bd2bc5cede4830f07d4ee5769499a" translate="yes" xml:space="preserve">
          <source>Wrap document in &lt;code&gt;{...}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{...}&lt;/code&gt; 로 문서 줄 바꿈</target>
        </trans-unit>
        <trans-unit id="b5150dc051fd47e830d39a1a10a0d5cede823b6b" translate="yes" xml:space="preserve">
          <source>WrapArrow</source>
          <target state="translated">WrapArrow</target>
        </trans-unit>
        <trans-unit id="c92147ea0c2b0677b7c09751757b19d07bd7b17c" translate="yes" xml:space="preserve">
          <source>WrapMonad</source>
          <target state="translated">WrapMonad</target>
        </trans-unit>
        <trans-unit id="4069d5a8b2d61fc44c53d1d69a1603e75124fe55" translate="yes" xml:space="preserve">
          <source>WrapMonoid</source>
          <target state="translated">WrapMonoid</target>
        </trans-unit>
        <trans-unit id="f72344941ecf4dbf3a6b05f7d128cba499a51fde" translate="yes" xml:space="preserve">
          <source>WrappedArrow</source>
          <target state="translated">WrappedArrow</target>
        </trans-unit>
        <trans-unit id="5424268dd193f61b9e7843ef4109dc2a12bac7a6" translate="yes" xml:space="preserve">
          <source>WrappedMonad</source>
          <target state="translated">WrappedMonad</target>
        </trans-unit>
        <trans-unit id="459140ee141c9d01be26238b973ae1046e530be2" translate="yes" xml:space="preserve">
          <source>WrappedMonoid</source>
          <target state="translated">WrappedMonoid</target>
        </trans-unit>
        <trans-unit id="fb18f208c8e09b8e152ee97be9d763608b85aabc" translate="yes" xml:space="preserve">
          <source>Wrapper of &lt;code&gt;mallocForeignPtrBytes&lt;/code&gt; with faster implementation for GHC</source>
          <target state="translated">GHC 구현 속도가 빠른 &lt;code&gt;mallocForeignPtrBytes&lt;/code&gt; 래퍼</target>
        </trans-unit>
        <trans-unit id="f5bae4c947473ab2febca5eb61bfa9da65f60ac7" translate="yes" xml:space="preserve">
          <source>Wrapping an IO action that can throw an error &lt;code&gt;e&lt;/code&gt;:</source>
          <target state="translated">오류가 발생할 수있는 IO 조치 랩핑 &lt;code&gt;e&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0d27d9e2d3a2ad251d4892a773947e707db18720" translate="yes" xml:space="preserve">
          <source>Wrapping documents in delimiters</source>
          <target state="translated">분리 문자로 문서 랩핑</target>
        </trans-unit>
        <trans-unit id="48606f4bb9cb6f76c6d45f0aae55cb4f7a999651" translate="yes" xml:space="preserve">
          <source>Write 31-bit character; offset in 4-byte words.</source>
          <target state="translated">31 비트 문자를 작성하십시오. 4 바이트 단어로 오프셋합니다.</target>
        </trans-unit>
        <trans-unit id="132823a14fa0074e9c3549c122a220890e54d9b3" translate="yes" xml:space="preserve">
          <source>Write 8-bit character; offset in bytes.</source>
          <target state="translated">8 비트 문자를 작성하십시오. 바이트 단위의 오프셋.</target>
        </trans-unit>
        <trans-unit id="6cfb95525e855d3c2fb90f553acacc9ffd9b1afe" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; to the buffer</source>
          <target state="translated">버퍼에 &lt;code&gt;&lt;a href=&quot;../bytestring-0.10.10.0/data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt; 쓰기</target>
        </trans-unit>
        <trans-unit id="a30ef0a4dea3adbd954b944a856f0d73077a7fef" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;.tix&lt;/code&gt; File.</source>
          <target state="translated">&lt;code&gt;.tix&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="2384eda70bde5fbafcdce06c7083ad1f34fba13d" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; using the locale encoding.</source>
          <target state="translated">로케일 인코딩을 사용하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="641fdc517a3a148a3426445c3e2501afc543647f" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; in big endian IEEE-754 format.</source>
          <target state="translated">빅 엔디안 IEEE-754 형식으로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="19f5831180b0536c875f7fde0710ba2f6b629a3f" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; in little endian IEEE-754 format.</source>
          <target state="translated">리틀 엔디안 IEEE-754 형식으로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="993b7cc9e4c74d2721eedc685664742cc7c82795" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; in native in IEEE-754 format and host endian.</source>
          <target state="translated">IEEE-754 형식 및 호스트 엔디안으로 기본 으로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Double&quot;&gt;Double&lt;/a&gt;&lt;/code&gt; 을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="025b69c4396276807676b294d74b3b70f46bef94" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; in big endian IEEE-754 format.</source>
          <target state="translated">빅 엔디안 IEEE-754 형식으로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="2300f23523bc1b33ccbbebf657381c02dd05c86c" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; in little endian IEEE-754 format.</source>
          <target state="translated">리틀 엔디안 IEEE-754 형식으로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; 를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a6e3e08979b85f7f159802afa8ee51f8a4eedd1" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; in native in IEEE-754 format and host endian.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/prelude#t:Float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt; 를 IEEE-754 형식으로 네이티브로 작성 하고 호스트 엔디안을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="100ddab2dd798658dd4fbb44584d4757dded426e" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; using the locale encoding.</source>
          <target state="translated">로케일 인코딩을 사용하여 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-string#t:String&quot;&gt;String&lt;/a&gt;&lt;/code&gt; 을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="59ed5c3f805685b995398b8616a908c0066ad70a" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 파일에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="ca463eab69a5fff98e0ab2e75dce7ed014b9ab1b" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 파일에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="3ad21d75c6a544747e2e36fcec12a87a1aebe727" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 파일에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="a8e6f690eb143ffdbea5335db0be7244660876a2" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; to a file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 파일에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="244e830bbe30fb0c3258c35cfc26647f07415c80" translate="yes" xml:space="preserve">
          <source>Write a ByteString to a handle, appending a newline byte</source>
          <target state="translated">줄 바꿈 바이트를 추가하여 핸들에 ByteString을 씁니다.</target>
        </trans-unit>
        <trans-unit id="a70a82a5347cdeed11b696c9567115f30a6a5296" translate="yes" xml:space="preserve">
          <source>Write a ByteString to stdout</source>
          <target state="translated">stdout에 ByteString 작성</target>
        </trans-unit>
        <trans-unit id="e8ad66b8476a9e49cc072f07250605c906e95e94" translate="yes" xml:space="preserve">
          <source>Write a ByteString to stdout, appending a newline byte</source>
          <target state="translated">줄 바꿈 바이트를 추가하여 ByteString을 stdout에 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="c0c3cc8f4573e40e62c43e8422d4118f97ea3fea" translate="yes" xml:space="preserve">
          <source>Write a Int16 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Int16 작성</target>
        </trans-unit>
        <trans-unit id="9d73a70f9f179a81035be58cee26e559014c575a" translate="yes" xml:space="preserve">
          <source>Write a Int16 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Int16 작성</target>
        </trans-unit>
        <trans-unit id="7d8b2b4323c44fde9919abbfb9988c387020100a" translate="yes" xml:space="preserve">
          <source>Write a Int16 in native host order and host endianness. 2 bytes will be written, unaligned.</source>
          <target state="translated">기본 호스트 순서와 호스트 엔디안으로 Int16을 작성하십시오. 정렬되지 않은 2 바이트가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="fb3123d3e54a5bdf6aa5b4391bbf7b28df79fb37" translate="yes" xml:space="preserve">
          <source>Write a Int32 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Int32 작성</target>
        </trans-unit>
        <trans-unit id="7e919ad40c1b9ea38485684cbf74d8a9568b9af7" translate="yes" xml:space="preserve">
          <source>Write a Int32 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Int32 작성</target>
        </trans-unit>
        <trans-unit id="c8c3c578503e8e7468915f61ff1fa6751340cce3" translate="yes" xml:space="preserve">
          <source>Write a Int32 in native host order and host endianness. 4 bytes will be written, unaligned.</source>
          <target state="translated">기본 호스트 순서와 호스트 엔디안으로 Int32를 작성하십시오. 정렬되지 않은 4 바이트가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="b4e181d3a02580a355986a71c12d4507242968cf" translate="yes" xml:space="preserve">
          <source>Write a Int64 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Int64 작성</target>
        </trans-unit>
        <trans-unit id="6a15b266b9877bbd729c40ccb87aa3db359c9f58" translate="yes" xml:space="preserve">
          <source>Write a Int64 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Int64 작성</target>
        </trans-unit>
        <trans-unit id="001b75a9a615fe6648502bcfe94fd2920ba86af5" translate="yes" xml:space="preserve">
          <source>Write a Int64 in native host order. On a 32 bit machine we write two host order Int32s, in big endian form. 8 bytes will be written, unaligned.</source>
          <target state="translated">기본 호스트 순서로 Int64를 작성하십시오. 32 비트 시스템에서 우리는 큰 엔디안 형태로 두 개의 호스트 순서 Int32를 씁니다. 정렬되지 않은 8 바이트가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="50fde014dba0a50360d764d6c2704238d9a9cb90" translate="yes" xml:space="preserve">
          <source>Write a String using UTF-8 encoding.</source>
          <target state="translated">UTF-8 인코딩을 사용하여 문자열을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="ca1a04969f07426c1e00b1b3766e301003971851" translate="yes" xml:space="preserve">
          <source>Write a Unicode string to the user's standard output.</source>
          <target state="translated">사용자의 표준 출력에 유니 코드 문자열을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="de13c62099cbcafc759fb5510fbb414e0c611d13" translate="yes" xml:space="preserve">
          <source>Write a Word16 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Word16 작성</target>
        </trans-unit>
        <trans-unit id="1d3480abbd86fc7688fd650a23916c935ed2b876" translate="yes" xml:space="preserve">
          <source>Write a Word16 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Word16 작성</target>
        </trans-unit>
        <trans-unit id="374953a98335b9e84fa5e0a4c035b46b2a892799" translate="yes" xml:space="preserve">
          <source>Write a Word16 in native host order and host endianness. 2 bytes will be written, unaligned.</source>
          <target state="translated">기본 호스트 순서와 호스트 엔디안으로 Word16을 작성하십시오. 정렬되지 않은 2 바이트가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="b1d543a7902bc6e8e15046b66cf37db05811d00c" translate="yes" xml:space="preserve">
          <source>Write a Word32 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Word32 작성</target>
        </trans-unit>
        <trans-unit id="426bab66f99e758605e62a76ce97b5ce1321c0e7" translate="yes" xml:space="preserve">
          <source>Write a Word32 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Word32 작성</target>
        </trans-unit>
        <trans-unit id="22533b04aaf4738c420c7810c743da18ca10d4e0" translate="yes" xml:space="preserve">
          <source>Write a Word32 in native host order and host endianness. 4 bytes will be written, unaligned.</source>
          <target state="translated">기본 호스트 순서와 호스트 엔디안으로 Word32를 작성하십시오. 정렬되지 않은 4 바이트가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="d00bd933478ce30ee3627449becbce383505e676" translate="yes" xml:space="preserve">
          <source>Write a Word64 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Word64 작성</target>
        </trans-unit>
        <trans-unit id="1ccded859c25705e9ae2dccba946964f2b4b599e" translate="yes" xml:space="preserve">
          <source>Write a Word64 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Word64 작성</target>
        </trans-unit>
        <trans-unit id="fe8b5771af7a4fe3ab30f772b71da7013250ca90" translate="yes" xml:space="preserve">
          <source>Write a Word64 in native host order. On a 32 bit machine we write two host order Word32s, in big endian form. 8 bytes will be written, unaligned.</source>
          <target state="translated">기본 호스트 순서로 Word64를 작성하십시오. 32 비트 시스템에서 우리는 큰 엔디 언 형태로 두 개의 호스트 순서 Word32를 작성합니다. 정렬되지 않은 8 바이트가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="d084d0a0a3ee70356c669bbf84781436e439ab8d" translate="yes" xml:space="preserve">
          <source>Write a character into the array at the given offset. Returns the number of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt;s written.</source>
          <target state="translated">주어진 오프셋에서 배열에 문자를 씁니다. 작성된 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word16&quot;&gt;Word16&lt;/a&gt;&lt;/code&gt; 수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="824db4935989674b3e285858238d002d124cd8b6" translate="yes" xml:space="preserve">
          <source>Write a character to the standard output device (same as &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">표준 출력 장치에 문자를 씁니다 ( &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 과 동일 ).</target>
        </trans-unit>
        <trans-unit id="f3d825454d2db1c3d3f226a28bb4ebdfec603097" translate="yes" xml:space="preserve">
          <source>Write a character to the standard output device (same as &lt;code&gt;&lt;a href=&quot;system-io#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">표준 출력 장치에 문자를 씁니다 ( &lt;code&gt;&lt;a href=&quot;system-io#v:hPutChar&quot;&gt;hPutChar&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 과 동일 ).</target>
        </trans-unit>
        <trans-unit id="955d70d1572c0c0ab9646927bdac5ea547ae35f8" translate="yes" xml:space="preserve">
          <source>Write a character using UTF-8 encoding.</source>
          <target state="translated">UTF-8 인코딩을 사용하여 문자를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="0a40d25653018769760da200e171fb69042b97ba" translate="yes" xml:space="preserve">
          <source>Write a floating point value to a &lt;code&gt;&lt;a href=&quot;data-text-lazy-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">부동 소수점 값을 &lt;code&gt;&lt;a href=&quot;data-text-lazy-builder#t:Builder&quot;&gt;Builder&lt;/a&gt;&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="6f0e537457e84f16fbaa39fa0827e8c740824c36" translate="yes" xml:space="preserve">
          <source>Write a lazy ByteString efficiently, simply appending the lazy ByteString chunks to the output buffer</source>
          <target state="translated">지연된 ByteString 청크를 출력 버퍼에 간단히 추가하여 지연된 ByteString을 효율적으로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="4a5a6f538364d52e8d401c4fc9299b67f51eb2c1" translate="yes" xml:space="preserve">
          <source>Write a list of storable elements into a newly allocated, consecutive sequence of storable values (like &lt;code&gt;&lt;a href=&quot;foreign-marshal-utils#v:new&quot;&gt;new&lt;/a&gt;&lt;/code&gt;, but for multiple elements).</source>
          <target state="translated">저장 가능 요소 목록을 새로 할당 된 연속 가능한 저장 가능 값 시퀀스에 작성하십시오 ( &lt;code&gt;&lt;a href=&quot;foreign-marshal-utils#v:new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; 와 같지만 여러 요소의 경우).</target>
        </trans-unit>
        <trans-unit id="cdf3a3bd7d79bb717fec0614e932a3f554e7d129" translate="yes" xml:space="preserve">
          <source>Write a list of storable elements into a newly allocated, consecutive sequence of storable values, where the end is fixed by the given end marker</source>
          <target state="translated">저장 가능한 요소 목록을 새로 할당 된 연속적인 저장 가능한 값 시퀀스에 기록합니다. 여기서 끝은 지정된 끝 표시 자에 의해 고정됩니다.</target>
        </trans-unit>
        <trans-unit id="46dde6be964e98cc511af24b16c6e57e81e0249e" translate="yes" xml:space="preserve">
          <source>Write a new value into an &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; 에 새로운 가치를 씁니다</target>
        </trans-unit>
        <trans-unit id="ded1b880637c536601d5622865a8ac5bee12d73f" translate="yes" xml:space="preserve">
          <source>Write a new value into an &lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt; 에 새로운 가치를 씁니다</target>
        </trans-unit>
        <trans-unit id="7b15bee858199106a92ca21868dcf92516cce78a" translate="yes" xml:space="preserve">
          <source>Write a new value into an &lt;code&gt;&lt;a href=&quot;ghc-ioarray#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-ioarray#t:IOArray&quot;&gt;IOArray&lt;/a&gt;&lt;/code&gt; 에 새 값을 씁니다</target>
        </trans-unit>
        <trans-unit id="cfd1ae109907abef00a2e666c2fb353f397524eb" translate="yes" xml:space="preserve">
          <source>Write a new value into an &lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; 에 새로운 가치를 씁니다</target>
        </trans-unit>
        <trans-unit id="a0bbd3fd99a0c8ca169dc0a0800f474e5f53bf14" translate="yes" xml:space="preserve">
          <source>Write a new value into an &lt;code&gt;&lt;a href=&quot;ghc-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-stref#t:STRef&quot;&gt;STRef&lt;/a&gt;&lt;/code&gt; 에 새로운 가치를 씁니다</target>
        </trans-unit>
        <trans-unit id="4a779d08a6f4043a50272816a75acd9ee4cacd4c" translate="yes" xml:space="preserve">
          <source>Write a new value into an &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; 에 새로운 가치를 씁니다</target>
        </trans-unit>
        <trans-unit id="20f4593948df5a33a2e433f875c4b3f08e697cff" translate="yes" xml:space="preserve">
          <source>Write a string the end of a file.</source>
          <target state="translated">파일의 끝에 문자열을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="c180f2e1d927a73773a56afa0d7e8518dedba44e" translate="yes" xml:space="preserve">
          <source>Write a string to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;, followed by a newline.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 에 문자열을 쓴 다음 줄 바꿈을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f7e8eefc7a202ba520c173df9a961b393fa4acc7" translate="yes" xml:space="preserve">
          <source>Write a string to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 에 문자열을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="7142ba8529e9f3798882070ee18b16fa9830450d" translate="yes" xml:space="preserve">
          <source>Write a string to a file. The file is truncated to zero length before writing begins.</source>
          <target state="translated">파일에 문자열을 씁니다. 쓰기가 시작되기 전에 파일 길이가 0으로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="1c2990ff65d290d7bbb87a7564d0e4e76c8f8255" translate="yes" xml:space="preserve">
          <source>Write a string to a handle, followed by a newline.</source>
          <target state="translated">핸들에 문자열을 쓴 다음 줄 바꿈을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="bd7a02731ecdcdf45341edba546df5ac23933c67" translate="yes" xml:space="preserve">
          <source>Write a string to a handle.</source>
          <target state="translated">핸들에 문자열을 씁니다.</target>
        </trans-unit>
        <trans-unit id="ece9511f02a82892ce27b96dda3476e25a7fbdb9" translate="yes" xml:space="preserve">
          <source>Write a string to the standard output device (same as &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">표준 출력 장치에 문자열을 씁니다 ( &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 과 동일 ).</target>
        </trans-unit>
        <trans-unit id="ffa575f023b590cb0185153c4e3bb7bcdf3ca8ca" translate="yes" xml:space="preserve">
          <source>Write a string to the standard output device (same as &lt;code&gt;&lt;a href=&quot;system-io#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">표준 출력 장치에 문자열을 씁니다 ( &lt;code&gt;&lt;a href=&quot;system-io#v:hPutStr&quot;&gt;hPutStr&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;system-io#v:stdout&quot;&gt;stdout&lt;/a&gt;&lt;/code&gt; 과 동일 ).</target>
        </trans-unit>
        <trans-unit id="9ddf3308755406ffab4fefd34e1c0f532c36bfca" translate="yes" xml:space="preserve">
          <source>Write a string to the user's standard output, followed by a newline.</source>
          <target state="translated">문자열을 사용자의 표준 출력에 쓴 다음 줄 바꿈을 씁니다.</target>
        </trans-unit>
        <trans-unit id="d649865e90fcbff9ffe50b1a59105ee5172bcad2" translate="yes" xml:space="preserve">
          <source>Write a value to a &lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt; 에 값을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="9bb0e77531d8dd5855a5dee42f98bdfb66dea502" translate="yes" xml:space="preserve">
          <source>Write a value to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;; blocks if the queue is full.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt; 에 값을 씁니다 . 큐가 가득 찬 경우 차단합니다.</target>
        </trans-unit>
        <trans-unit id="9b880d3a6f95fb0643f6f8cb86d9febe4b457c2d" translate="yes" xml:space="preserve">
          <source>Write a value to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt; 에 값을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="502f2a89fe6ab954ea36d4a5f5ae4da0588aaadf" translate="yes" xml:space="preserve">
          <source>Write a value to a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt; 에 값을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="b003c4b3a259d538a4ba6bcb5c8dd4f54a8c348a" translate="yes" xml:space="preserve">
          <source>Write a value to a memory area regarded as an array of values of the same kind. The following equality holds:</source>
          <target state="translated">같은 종류의 값 배열로 간주되는 메모리 영역에 값을 씁니다. 다음과 같은 평등이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="2278658d6c531603ea71643e435890480712f25e" translate="yes" xml:space="preserve">
          <source>Write a value to a memory location given by a base address and offset. The following equality holds:</source>
          <target state="translated">기본 주소 및 오프셋으로 지정된 메모리 위치에 값을 씁니다. 다음과 같은 평등이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="d2bcb5f72dff224c65e70a09f3049dbb8677df2f" translate="yes" xml:space="preserve">
          <source>Write a vector to specified index of mutable array of scalars; offset is in scalar elements.</source>
          <target state="translated">스칼라의 가변 배열의 지정된 인덱스에 벡터를 씁니다. 오프셋은 스칼라 요소입니다.</target>
        </trans-unit>
        <trans-unit id="47fbcdcf5427d81f8e800b2a3be52a9b2780f1f2" translate="yes" xml:space="preserve">
          <source>Write a vector to specified index of mutable array.</source>
          <target state="translated">가변 배열의 지정된 인덱스에 벡터를 씁니다.</target>
        </trans-unit>
        <trans-unit id="2cbdaab506338b440edffc79752d43d3b372babf" translate="yes" xml:space="preserve">
          <source>Write an Int16 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Int16 작성</target>
        </trans-unit>
        <trans-unit id="a4e76ca260148b04e485fd2b3ab9435bef6ca68d" translate="yes" xml:space="preserve">
          <source>Write an Int16 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Int16 작성</target>
        </trans-unit>
        <trans-unit id="04d7dd93d431136691244f8a8060c6f710b4c9c7" translate="yes" xml:space="preserve">
          <source>Write an Int32 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Int32 작성</target>
        </trans-unit>
        <trans-unit id="ac3eecde6710e67b4fbd62fe5faea7085564b9e9" translate="yes" xml:space="preserve">
          <source>Write an Int32 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Int32 작성</target>
        </trans-unit>
        <trans-unit id="4ecb73c918eeb208591574c27bf43973ceabac8a" translate="yes" xml:space="preserve">
          <source>Write an Int64 in big endian format</source>
          <target state="translated">빅 엔디안 형식으로 Int64 작성</target>
        </trans-unit>
        <trans-unit id="062b3fd33b7744aa05c8b488aac57bd5719de134" translate="yes" xml:space="preserve">
          <source>Write an Int64 in little endian format</source>
          <target state="translated">리틀 엔디안 형식으로 Int64 작성</target>
        </trans-unit>
        <trans-unit id="f3475a216b60f541f9561999947a42033537d47f" translate="yes" xml:space="preserve">
          <source>Write an element in a mutable array</source>
          <target state="translated">가변 배열로 요소 작성</target>
        </trans-unit>
        <trans-unit id="3a6dc8d047fec7b46b0233f24f9a28adcd679e26" translate="yes" xml:space="preserve">
          <source>Write an entire list of items to a &lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">전체 아이템 목록을 &lt;code&gt;&lt;a href=&quot;control-concurrent-chan#t:Chan&quot;&gt;Chan&lt;/a&gt;&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="f9599a175165c39f1f29ddd9bb8c7e18497bf06b" translate="yes" xml:space="preserve">
          <source>Write contents of &lt;code&gt;MutVar#&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MutVar#&lt;/code&gt; 내용을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="842c4baf59de10dbe1f4228d4e89548eb6cfad90" translate="yes" xml:space="preserve">
          <source>Write contents of &lt;code&gt;TVar#&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TVar#&lt;/code&gt; 내용을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3de1d04f7bf6af5e972546fb7777d6bafc52d88" translate="yes" xml:space="preserve">
          <source>Write data from memory to an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt;. This is exactly equivalent to the POSIX &lt;code&gt;write&lt;/code&gt; function.</source>
          <target state="translated">메모리에서 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; 로 데이터를 씁니다 . POSIX &lt;code&gt;write&lt;/code&gt; 기능 과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="3589adf6c850b011d135abac8239e99774d7263d" translate="yes" xml:space="preserve">
          <source>Write data from memory to an &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt;. This is exactly equivalent to the POSIX &lt;code&gt;write&lt;/code&gt; function.</source>
          <target state="translated">메모리에서 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/system-posix-types#t:Fd&quot;&gt;Fd&lt;/a&gt;&lt;/code&gt; 로 데이터를 씁니다 . 이것은 POSIX &lt;code&gt;write&lt;/code&gt; 기능 과 정확히 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="b7773c80499d5b3f15854fd0b2e72f86ef50f9e8" translate="yes" xml:space="preserve">
          <source>Write given error message to &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; and terminate with &lt;code&gt;&lt;a href=&quot;system-exit#v:exitFailure&quot;&gt;exitFailure&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 오류 메시지를 &lt;code&gt;&lt;a href=&quot;ghc-io-handle-fd#v:stderr&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;system-exit#v:exitFailure&quot;&gt;exitFailure&lt;/a&gt;&lt;/code&gt; 종료 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4355c147f16522d41a43d5a06119aedec6f7144b" translate="yes" xml:space="preserve">
          <source>Write output from main C-\- pipeline passes to files</source>
          <target state="translated">기본 C-\-파이프 라인 패스의 출력을 파일에 쓰기</target>
        </trans-unit>
        <trans-unit id="b96bdb27f817c3c1baec26eb6ded0edc44bb3c99" translate="yes" xml:space="preserve">
          <source>Write the given value to the given memory location. Alignment restrictions might apply; see &lt;code&gt;&lt;a href=&quot;foreign-storable#v:peek&quot;&gt;peek&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 값을 주어진 메모리 위치에 씁니다. 정렬 제한이 적용될 수 있습니다. &lt;code&gt;&lt;a href=&quot;foreign-storable#v:peek&quot;&gt;peek&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="77655bd9fbe731998656fdcf621486c02b0a375a" translate="yes" xml:space="preserve">
          <source>Write the given value to the given memory location. Alignment restrictions might apply; see &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:peek&quot;&gt;peek&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 값을 주어진 메모리 위치에 씁니다. 정렬 제한이 적용될 수 있습니다. &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:peek&quot;&gt;peek&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="babfd98df4815040b9b8feaf92e4a373432b470f" translate="yes" xml:space="preserve">
          <source>Write the list elements consecutive into memory</source>
          <target state="translated">목록 요소를 메모리에 연속적으로 씁니다.</target>
        </trans-unit>
        <trans-unit id="c13f0a2faae8bb31701cafde84fa1d469581a021" translate="yes" xml:space="preserve">
          <source>Write the list elements consecutive into memory and terminate them with the given marker element</source>
          <target state="translated">목록 요소를 메모리에 연속적으로 쓰고 주어진 마커 요소로 종료</target>
        </trans-unit>
        <trans-unit id="4bfb3401061c515a5bf897d647437c6e727895e8" translate="yes" xml:space="preserve">
          <source>Write the specified number of bytes.</source>
          <target state="translated">지정된 바이트 수를 씁니다.</target>
        </trans-unit>
        <trans-unit id="7948630f19859069bae4a14e2c76f2c7020b9d2a" translate="yes" xml:space="preserve">
          <source>Write the supplied value into a &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">제공된 값을 &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="8756d20514051c6080e747e02c7172e182a101af" translate="yes" xml:space="preserve">
          <source>Write the supplied value into a &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">제공된 값을 &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="f27a7a93b6c3f65c763bd60036589804bd7bf721" translate="yes" xml:space="preserve">
          <source>Write the supplied value into a &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">제공된 값을 &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt; 에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="155f12112f4379352bcdee8335e8ff9abd964e75" translate="yes" xml:space="preserve">
          <source>Write the terminal output to the standard output device.</source>
          <target state="translated">터미널 출력을 표준 출력 장치에 씁니다.</target>
        </trans-unit>
        <trans-unit id="2ffb13840f565fd761a331ddc6dc0237d509420b" translate="yes" xml:space="preserve">
          <source>Write the terminal output to the terminal or file managed by the given &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 로 관리되는 터미널 또는 파일에 터미널 출력을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="3cd750e768a4d8f40411b104e6eddf083a4f201a" translate="yes" xml:space="preserve">
          <source>Write the terminal output to the terminal or file managed by the given &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에 의해 관리되는 터미널 또는 파일에 터미널 출력을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="4bab7a81286ec426207ad20332db127f5e40c79b" translate="yes" xml:space="preserve">
          <source>Write to specified index of mutable array.</source>
          <target state="translated">가변 배열의 지정된 인덱스에 씁니다.</target>
        </trans-unit>
        <trans-unit id="faa64ad5644001c4c4dc3bee878a933e8c8aac0e" translate="yes" xml:space="preserve">
          <source>Write up to the specified number of bytes without blocking. Returns the actual number of bytes written.</source>
          <target state="translated">차단하지 않고 지정된 바이트 수까지 쓰십시오. 쓴 실제 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="74120aff54b3ed793ccfa34d37318c6efb458636" translate="yes" xml:space="preserve">
          <source>Write vector; offset in bytes.</source>
          <target state="translated">벡터 쓰기; 바이트 단위의 오프셋.</target>
        </trans-unit>
        <trans-unit id="fd96182628831a4dab0848bbbb0a8a86256945c3" translate="yes" xml:space="preserve">
          <source>Write vector; offset in scalar elements.</source>
          <target state="translated">벡터 쓰기; 스칼라 요소의 오프셋.</target>
        </trans-unit>
        <trans-unit id="e1f97fa6627971c9b0e683428fd5abfab1ecbdb9" translate="yes" xml:space="preserve">
          <source>Write? (False = read-only)</source>
          <target state="translated">쓰다? (거짓 = 읽기 전용)</target>
        </trans-unit>
        <trans-unit id="09c7377b67eee34defdc1dd0804c879b090650d2" translate="yes" xml:space="preserve">
          <source>WriteBuffer</source>
          <target state="translated">WriteBuffer</target>
        </trans-unit>
        <trans-unit id="3082b1ffe24322eee941ed215c852cffc7410d42" translate="yes" xml:space="preserve">
          <source>WriteHandle</source>
          <target state="translated">WriteHandle</target>
        </trans-unit>
        <trans-unit id="9ee45a046a695fc62952355259c464d3782298a5" translate="yes" xml:space="preserve">
          <source>WriteLock</source>
          <target state="translated">WriteLock</target>
        </trans-unit>
        <trans-unit id="60841bf1ad2d01720515c6eb9b3efbeb2e0f7656" translate="yes" xml:space="preserve">
          <source>WriteMode</source>
          <target state="translated">WriteMode</target>
        </trans-unit>
        <trans-unit id="f5ca54e8210ce7deaf5fa1129a91a1f50f08386a" translate="yes" xml:space="preserve">
          <source>WriteOnly</source>
          <target state="translated">WriteOnly</target>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">Writer</target>
        </trans-unit>
        <trans-unit id="a8f135f9c50f7fe5f7a287362386d791fee8800a" translate="yes" xml:space="preserve">
          <source>Writer operations</source>
          <target state="translated">작가 작업</target>
        </trans-unit>
        <trans-unit id="a123ab5d3541d6386c9d34765c7348e78d2bb09e" translate="yes" xml:space="preserve">
          <source>WriterT</source>
          <target state="translated">WriterT</target>
        </trans-unit>
        <trans-unit id="1cccc800c778fc7aea514948aa922ecafd4399e9" translate="yes" xml:space="preserve">
          <source>Writes an array of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 배열을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="d30a3e22fd6539c1c9d94fc5b04d15e2c9f7e725" translate="yes" xml:space="preserve">
          <source>Writes an array of &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; to the specified &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-word#t:Word8&quot;&gt;Word8&lt;/a&gt;&lt;/code&gt; 배열을 씁니다 .</target>
        </trans-unit>
        <trans-unit id="b2b97a0aaa412174782d8ac6874c3f7cc18e81e9" translate="yes" xml:space="preserve">
          <source>Writes out extended interface files alongisde regular enterface files. Just like regular interface files, GHC has a recompilation check to detect out of date or missing extended interface files.</source>
          <target state="translated">일반 인터페이스 파일과 함께 확장 인터페이스 파일을 작성합니다. 일반 인터페이스 파일과 마찬가지로 GHC에는 오래된 인터페이스 파일이나 누락 된 확장 인터페이스 파일을 감지하기 위해 재 컴파일 검사가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8ed5cefe0e622b3e54c1d44f041cf244581a4d3" translate="yes" xml:space="preserve">
          <source>Writes out extended interface files alongside regular interface files. Just like regular interface files, GHC has a recompilation check to detect out of date or missing extended interface files.</source>
          <target state="translated">일반 인터페이스 파일과 함께 확장 인터페이스 파일을 작성합니다. 일반 인터페이스 파일과 마찬가지로 GHC에는 오래되거나 누락 된 확장 인터페이스 파일을 감지하는 재 컴파일 검사가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e584f7c39c3d0e184b912ee7be64b91cc4f0e227" translate="yes" xml:space="preserve">
          <source>Writes the line history to the given file. If there is an error when writing the file, it will be ignored.</source>
          <target state="translated">주어진 파일에 행 히스토리를 작성합니다. 파일을 쓸 때 오류가 있으면 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="82675cd0bc2b58173645fe62ed090db0c903a0d8" translate="yes" xml:space="preserve">
          <source>XdgCache</source>
          <target state="translated">XdgCache</target>
        </trans-unit>
        <trans-unit id="a09516bd6fa5e0d22f97cc882d59eced3f611c61" translate="yes" xml:space="preserve">
          <source>XdgConfig</source>
          <target state="translated">XdgConfig</target>
        </trans-unit>
        <trans-unit id="513936143f60ff489cea943b4d3cf5ff7ec804be" translate="yes" xml:space="preserve">
          <source>XdgConfigDirs</source>
          <target state="translated">XdgConfigDirs</target>
        </trans-unit>
        <trans-unit id="b55b13216c4a49a521787620dab302740b661e55" translate="yes" xml:space="preserve">
          <source>XdgData</source>
          <target state="translated">XdgData</target>
        </trans-unit>
        <trans-unit id="5c87de6a1cfa7e4af282e624345c841e7d8bd0bb" translate="yes" xml:space="preserve">
          <source>XdgDataDirs</source>
          <target state="translated">XdgDataDirs</target>
        </trans-unit>
        <trans-unit id="1fbbfb2eaf00935b6eaff85397e2d3159b40fac3" translate="yes" xml:space="preserve">
          <source>XdgDirectory</source>
          <target state="translated">XdgDirectory</target>
        </trans-unit>
        <trans-unit id="2a60deb694d7c793f949c28507f268cafab38ce5" translate="yes" xml:space="preserve">
          <source>XdgDirectoryList</source>
          <target state="translated">XdgDirectoryList</target>
        </trans-unit>
        <trans-unit id="14824d205a044c81fdecf7f246ad054ed0648b74" translate="yes" xml:space="preserve">
          <source>Year and day format</source>
          <target state="translated">년과 일 형식</target>
        </trans-unit>
        <trans-unit id="ed289f57da895ead697dd2c01857ff65cfc7ea93" translate="yes" xml:space="preserve">
          <source>Year.</source>
          <target state="translated">Year.</target>
        </trans-unit>
        <trans-unit id="3526f607bcd4f51ad0bc05f814579a42c2c0ba57" translate="yes" xml:space="preserve">
          <source>Yellow</source>
          <target state="translated">Yellow</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="520497482bb4d7526496e8edb3018d95cee38510" translate="yes" xml:space="preserve">
          <source>Yes (Explicit)</source>
          <target state="translated">예 (명시 적)</target>
        </trans-unit>
        <trans-unit id="90c557a6b48e6bc7ef30b6f2d5fb9c703c39cf2f" translate="yes" xml:space="preserve">
          <source>Yes (Inferred)</source>
          <target state="translated">예 (유추 됨)</target>
        </trans-unit>
        <trans-unit id="86200a8547bb15fb3a4cf8bb1368b37de64fb317" translate="yes" xml:space="preserve">
          <source>Yield &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the given &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; value is valid on the system. This implies that the &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance of &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; is also system dependent as it is only defined for valid values of &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">항복 &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; 주어진 경우 &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; 값이 시스템에서 유효합니다. 이는 &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; 인스턴스가 유효한 &lt;code&gt;&lt;a href=&quot;foreign-c-error#t:Errno&quot;&gt;Errno&lt;/a&gt;&lt;/code&gt; 값에 대해서만 정의되므로 시스템에 따라 달라짐을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="1f384c9380a1584c25f0df9644ddfab42bb5794c" translate="yes" xml:space="preserve">
          <source>Yield a &lt;em&gt;non-empty&lt;/em&gt; strict &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">수율 &lt;em&gt;비어&lt;/em&gt; 엄격한 &lt;code&gt;&lt;a href=&quot;data-bytestring#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="711685e6ca2af214ee9e0c03ff3f6e2991b1fffe" translate="yes" xml:space="preserve">
          <source>Yield not to its blasphemous call! Flee traveller! Flee or you will be corrupted and devoured!</source>
          <target state="translated">신성 모독의 부르심에 굴복하지 마십시오! 도망자! 도망 치거나 타락하고 삼킬 것입니다!</target>
        </trans-unit>
        <trans-unit id="a5cc7a47f6c353cbfbd096e4097551052e651002" translate="yes" xml:space="preserve">
          <source>You can add a module to the scope (via &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;import&lt;/code&gt;) only if either (a) it is loaded, or (b) it is a module from a package that GHCi knows about. Using &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;import&lt;/code&gt; to try bring into scope a non-loaded module may result in the message &lt;code&gt;module M is not loaded&lt;/code&gt;.</source>
          <target state="translated">(a)로드되었거나 (b) GHCi가 알고있는 패키지의 모듈 인 경우에만 &lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; 범위에 추가 할 수 있습니다 ( : module 또는 &lt;code&gt;import&lt;/code&gt; ). 로드되지 않은 모듈을 범위로 &lt;code&gt;import&lt;/code&gt; 위해 &lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; 또는 import 를 사용 하면 메시지 &lt;code&gt;module M is not loaded&lt;/code&gt; 이로드되지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="269b166a8fb9660360ed22bb6ffd6ad1f5dbf714" translate="yes" xml:space="preserve">
          <source>You can add explicit phase control (&lt;a href=&quot;#phase-control&quot;&gt;Phase control&lt;/a&gt;) to &lt;code&gt;SPECIALISE INLINE&lt;/code&gt; pragma, just like on an &lt;a href=&quot;#pragma-INLINE&quot;&gt;&lt;code&gt;INLINE&lt;/code&gt;&lt;/a&gt; pragma; if you do so, the same phase is used for the rewrite rule and the INLINE control of the specialised function.</source>
          <target state="translated">당신은 명시 적 위상 제어 (추가 할 수 있습니다 &lt;a href=&quot;#phase-control&quot;&gt;위상 제어&lt;/a&gt; 에) &lt;code&gt;SPECIALISE INLINE&lt;/code&gt; 단지에서처럼, 프라 그마 &lt;a href=&quot;#pragma-INLINE&quot;&gt; &lt;code&gt;INLINE&lt;/code&gt; 의&lt;/a&gt; 프라그; 그렇게하면 다시 쓰기 규칙과 특수 함수의 INLINE 제어에 동일한 단계가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="76b4dc225411289e9acdbfffaafe383a16ca2930" translate="yes" xml:space="preserve">
          <source>You can add phase control (&lt;a href=&quot;#phase-control&quot;&gt;Phase control&lt;/a&gt;) to the RULE generated by a &lt;code&gt;SPECIALIZE&lt;/code&gt; pragma, just as you can if you write a &lt;code&gt;RULE&lt;/code&gt; directly. For example:</source>
          <target state="translated">&lt;code&gt;RULE&lt;/code&gt; 을 직접 작성하는 것과 마찬가지로 &lt;code&gt;SPECIALIZE&lt;/code&gt; pragma가 생성 한 RULE 에 위상 제어 ( &lt;a href=&quot;#phase-control&quot;&gt;Phase control&lt;/a&gt; )를 추가 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d19396807b5bb813f8f10443b8f102685ebd9a78" translate="yes" xml:space="preserve">
          <source>You can also define functions at the prompt:</source>
          <target state="translated">프롬프트에서 기능을 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f2d6d5ccc9f9a9d9f25489b257a5154dc96e794" translate="yes" xml:space="preserve">
          <source>You can also get this in a more future-proof, machine readable format, with &lt;code&gt;-t --machine-readable&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;-t --machine-readable&lt;/code&gt; 를 사용 하여 미래에 대비할 수있는 머신 판독 가능 형식으로 얻을 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5b15205797af6957ff9cf5c81b6dc586582e3e9" translate="yes" xml:space="preserve">
          <source>You can also use a standalone deriving declaration instead (see &lt;a href=&quot;#stand-alone-deriving&quot;&gt;Stand-alone deriving declarations&lt;/a&gt;).</source>
          <target state="translated">당신은 또한 대신 독립 파생 선언을 사용 (볼 수있는 &lt;a href=&quot;#stand-alone-deriving&quot;&gt;독립 실행 형 유도 선언&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="bf82ec7c5c55deb1e4326a6cd0200b4cd6f00276" translate="yes" xml:space="preserve">
          <source>You can annotate modules with the &lt;code&gt;ANN&lt;/code&gt; pragma by using the &lt;code&gt;module&lt;/code&gt; keyword. For example:</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 키워드 를 사용하여 &lt;code&gt;ANN&lt;/code&gt; pragma로 모듈에 주석을 달 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bd200064406d69a57200444728341c157a15f8d7" translate="yes" xml:space="preserve">
          <source>You can annotate types with the &lt;code&gt;ANN&lt;/code&gt; pragma by using the &lt;code&gt;type&lt;/code&gt; keyword. For example:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 키워드 를 사용하여 &lt;code&gt;ANN&lt;/code&gt; pragma로 유형에 주석을 달 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="190d499d4f768a4e6267637fa569282ca6b46254" translate="yes" xml:space="preserve">
          <source>You can apply a type synonym to a forall type:</source>
          <target state="translated">forall 유형에 유형 동의어를 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c64d81db37258386a1e4b81a293b2b44f3418af" translate="yes" xml:space="preserve">
          <source>You can apply a type synonym to a partially applied type synonym:</source>
          <target state="translated">형식 동의어를 부분적으로 적용되는 형식 동의어에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ff9739eba78b0ef326aef750e441b5f886825f8" translate="yes" xml:space="preserve">
          <source>You can attach a warning to a function, class, type, or data constructor, with the following top-level declarations:</source>
          <target state="translated">다음과 같은 최상위 선언을 사용하여 함수, 클래스, 유형 또는 데이터 생성자에 경고를 첨부 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f496445edbfd2209c4adb64a23b8653fa9374d16" translate="yes" xml:space="preserve">
          <source>You can build Haskell code into a shared library and make a package to be used by other Haskell programs. The easiest way is using Cabal, simply configure the Cabal package with the &lt;code&gt;--enable-shared&lt;/code&gt; flag.</source>
          <target state="translated">Haskell 코드를 공유 라이브러리에 빌드하고 다른 Haskell 프로그램에서 사용할 패키지를 만들 수 있습니다. 가장 쉬운 방법은 Cabal을 사용하는 것입니다. 간단히 &lt;code&gt;--enable-shared&lt;/code&gt; 플래그로 Cabal 패키지를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="84f62a92315cdce6616bfcedb52e44f10633e662" translate="yes" xml:space="preserve">
          <source>You can change the messages printed when the runtime system &amp;ldquo;blows up,&amp;rdquo; e.g., on stack overflow. The hooks for these are as follows:</source>
          <target state="translated">예를 들어, 스택 오버플로와 같이 런타임 시스템이 &quot;작동 할 때&quot;인쇄되는 메시지를 변경할 수 있습니다. 이에 대한 후크는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0d971c05fa641eaafca23d1a4589109ee786b1b8" translate="yes" xml:space="preserve">
          <source>You can check if your GHC is unregisterised by calling &lt;code&gt;ghc --info&lt;/code&gt; (see &lt;a href=&quot;using#ghc-flag---info&quot;&gt;&lt;code&gt;--info&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;ghc --info&lt;/code&gt; 를 호출하여 GHC 등록이 해제되었는지 확인할 수 있습니다 ( &lt;a href=&quot;using#ghc-flag---info&quot;&gt; &lt;code&gt;--info&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="4ddf7fef2dbc32cef483b738d74cadfca1ba8b1a" translate="yes" xml:space="preserve">
          <source>You can control GHC&amp;rsquo;s package database stack using the following options:</source>
          <target state="translated">다음 옵션을 사용하여 GHC의 패키지 데이터베이스 스택을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ad73c7ee3619d8e3b374d0e125dd12d41cec6bc" translate="yes" xml:space="preserve">
          <source>You can define a &lt;code&gt;&lt;a href=&quot;data-bifunctor#t:Bifunctor&quot;&gt;Bifunctor&lt;/a&gt;&lt;/code&gt; by either defining &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; or by defining both &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:first&quot;&gt;first&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:second&quot;&gt;second&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">당신은 정의 할 수 있습니다 &lt;code&gt;&lt;a href=&quot;data-bifunctor#t:Bifunctor&quot;&gt;Bifunctor&lt;/a&gt;&lt;/code&gt; 를 하나 정의하여 &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:bimap&quot;&gt;bimap&lt;/a&gt;&lt;/code&gt; 또는 둘 모두가 정의하여 &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:first&quot;&gt;first&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;data-bifunctor#v:second&quot;&gt;second&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53d888cce5d1295c1df726fcad67480174d570f2" translate="yes" xml:space="preserve">
          <source>You can disable specific classes, or enable/disable all classes at once:</source>
          <target state="translated">특정 클래스를 비활성화하거나 모든 클래스를 한 번에 활성화 / 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fbcd80b12cae4ea9adddbab75b6d400e890e23d" translate="yes" xml:space="preserve">
          <source>You can even implement traverse using foldTree:</source>
          <target state="translated">foldTree를 사용하여 트래버스를 구현할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a260428745d36797e89aab007cfe35565db63b20" translate="yes" xml:space="preserve">
          <source>You can get &lt;code&gt;happy&lt;/code&gt; from &lt;a href=&quot;http://www.haskell.org/happy/&quot;&gt;the Happy Homepage&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.haskell.org/happy/&quot;&gt;행복한 홈페이지&lt;/a&gt; 에서 &lt;code&gt;happy&lt;/code&gt; 을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26072251a75edc8b05b0ea7a052c2c2aab0d70e9" translate="yes" xml:space="preserve">
          <source>You can have an unboxed tuple in a pattern binding, thus</source>
          <target state="translated">패턴 바인딩에 언 박싱 된 튜플을 가질 수 있으므로</target>
        </trans-unit>
        <trans-unit id="e9c31fd3f547dd66812622d105b2e524f835762e" translate="yes" xml:space="preserve">
          <source>You can however use &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, as well as &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt;, to build infinite lazy ByteStrings.</source>
          <target state="translated">그러나 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; 뿐만 아니라 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; 를 사용 하여 무한한 지연 ByteString을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20f45eef250ed5478e99a9bcb99d2a343f22a32e" translate="yes" xml:space="preserve">
          <source>You can however use &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt;, as well as &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt;, to build infinite lazy ByteStrings.</source>
          <target state="translated">그러나 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; 뿐만 아니라 &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cons&quot;&gt;cons&lt;/a&gt;&lt;/code&gt; 를 사용 하여 무한한 지연 ByteString을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e461b7e374bf4b1ebdad57b113f09b1939fc459" translate="yes" xml:space="preserve">
          <source>You can identify an orphan module by looking in its interface file, &lt;code&gt;M.hi&lt;/code&gt;, using the &lt;code&gt;--show-iface ⟨file⟩&lt;/code&gt;&lt;a href=&quot;using#modes&quot;&gt;mode&lt;/a&gt;. If there is a &lt;code&gt;[orphan module]&lt;/code&gt; on the first line, GHC considers it an orphan module.</source>
          <target state="translated">&lt;code&gt;--show-iface ⟨file⟩&lt;/code&gt; &lt;a href=&quot;using#modes&quot;&gt;모드를&lt;/a&gt; 사용하여 인터페이스 파일 &lt;code&gt;M.hi&lt;/code&gt; 를 보면 고아 모듈을 식별 할 수 있습니다 . 첫 번째 줄에 &lt;code&gt;[orphan module]&lt;/code&gt; 이 있으면 GHC는이를 고아 모듈로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="38974e60b1eeba7a0c51ba486dac9a8715f3e4cb" translate="yes" xml:space="preserve">
          <source>You can include instance declarations as in Haskell; just omit the &amp;ldquo;where&amp;rdquo; part. An instance declaration need not be implemented directly; if an instance can be derived based on instances in the environment, it is considered implemented. For example, the following signature:</source>
          <target state="translated">Haskell에서와 같이 인스턴스 선언을 포함 할 수 있습니다. &quot;where&quot;부분 만 생략하십시오. 인스턴스 선언은 직접 구현할 필요가 없습니다. 환경의 인스턴스를 기반으로 인스턴스를 파생 할 수있는 경우 구현 된 것으로 간주됩니다. 예를 들어 다음과 같은 서명이 있습니다.</target>
        </trans-unit>
        <trans-unit id="883238e8f9c1b291d24a7f3127451079919bd8ed" translate="yes" xml:space="preserve">
          <source>You can include instance declarations just as in Haskell; but omit the &amp;ldquo;where&amp;rdquo; part.</source>
          <target state="translated">Haskell에서와 같이 인스턴스 선언을 포함 할 수 있습니다. &quot;where&quot;부분은 생략하십시오.</target>
        </trans-unit>
        <trans-unit id="dbe26650bd87158ad61fd3785ea8839ebbef7ad8" translate="yes" xml:space="preserve">
          <source>You can look at particular regions of your profile simply by loading a copy of the &lt;code&gt;.hp&lt;/code&gt; file into a text editor and deleting the unwanted samples. The resulting &lt;code&gt;.hp&lt;/code&gt; file can be run through &lt;code&gt;hp2ps&lt;/code&gt; and viewed or printed.</source>
          <target state="translated">&lt;code&gt;.hp&lt;/code&gt; 파일 의 사본을 텍스트 편집기로 로드 하고 원치 않는 샘플을 삭제하기 만하면 프로파일의 특정 영역을 볼 수 있습니다 . 그 결과 &lt;code&gt;.hp&lt;/code&gt; 파일을 실행할 수 있습니다 &lt;code&gt;hp2ps&lt;/code&gt; 및 보거나 인쇄.</target>
        </trans-unit>
        <trans-unit id="0c84e4d34de9122e33e533828fb9f8724a21faac" translate="yes" xml:space="preserve">
          <source>You can make &lt;code&gt;stdin&lt;/code&gt; reset itself after every evaluation by giving GHCi the command &lt;code&gt;:set +r&lt;/code&gt;. This works because &lt;code&gt;stdin&lt;/code&gt; is just a top-level expression that can be reverted to its unevaluated state in the same way as any other top-level expression (CAF).</source>
          <target state="translated">GHCi에 명령 &lt;code&gt;:set +r&lt;/code&gt; 을 부여하여 모든 평가 후 &lt;code&gt;stdin&lt;/code&gt; 을 자체적으로 재설정 할 수 있습니다 . &lt;code&gt;stdin&lt;/code&gt; 은 다른 최상위 식 (CAF)과 같은 방식으로 평가되지 않은 상태로 되돌릴 수있는 최상위 식일 뿐이 므로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="e642c86265941a9874870fbd23a160343b970a77" translate="yes" xml:space="preserve">
          <source>You can make GHC diverge by using &lt;code&gt;SPECIALISE INLINE&lt;/code&gt; on an ordinarily-recursive function.</source>
          <target state="translated">일반 재귀 함수에서 &lt;code&gt;SPECIALISE INLINE&lt;/code&gt; 을 사용하여 GHC 분기를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d1af34bbd7e2122f7192f46d93908d24a763ec3d" translate="yes" xml:space="preserve">
          <source>You can make code that works with both Haskell 2010 and GHC by:</source>
          <target state="translated">다음과 같이 Haskell 2010 및 GHC에서 모두 작동하는 코드를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="410bc62782311c49772c6565c53d200146f4a94c" translate="yes" xml:space="preserve">
          <source>You can make code that works with both Haskell98/Haskell2010 and GHC by:</source>
          <target state="translated">Haskell98 / Haskell2010 및 GHC에서 작동하는 코드는 다음과 같이 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="acfc22cad2a308c7de056289b725564bbb1e0277" translate="yes" xml:space="preserve">
          <source>You can omit any combination of arguments to the tuple, as in the following</source>
          <target state="translated">다음과 같이 튜플에 대한 인수 조합을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4451b727c18bc51073a4d56eb70e8515e899636b" translate="yes" xml:space="preserve">
          <source>You can only attach to entities declared at top level in the module being compiled, and you can only use unqualified names in the list of entities. A capitalised name, such as &lt;code&gt;T&lt;/code&gt; refers to &lt;em&gt;either&lt;/em&gt; the type constructor &lt;code&gt;T&lt;/code&gt;&lt;em&gt;or&lt;/em&gt; the data constructor &lt;code&gt;T&lt;/code&gt;, or both if both are in scope. If both are in scope, there is currently no way to specify one without the other (c.f. fixities &lt;a href=&quot;#infix-tycons&quot;&gt;Infix type constructors, classes, and type variables&lt;/a&gt;).</source>
          <target state="translated">컴파일중인 모듈에서 최상위 수준으로 선언 된 엔터티에만 연결할 수 있으며 엔터티 목록에서 정규화되지 않은 이름 만 사용할 수 있습니다. 같은 대문자 이름, &lt;code&gt;T&lt;/code&gt; 는 지칭 &lt;em&gt;어느&lt;/em&gt; 유형 생성자 &lt;code&gt;T&lt;/code&gt; &lt;em&gt;또는&lt;/em&gt; 데이터 생성자 &lt;code&gt;T&lt;/code&gt; , 또는 두 경우 모두이 범주에있다. 둘 다 범위에 속하면 현재 다른 것을 지정하지 않고 하나를 지정할 수있는 방법이 없습니다 (cf fixities &lt;a href=&quot;#infix-tycons&quot;&gt;Infix 유형 생성자, 클래스 및 유형 변수&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="f886d18b90cb7daa351868e61fa0d9da62761871" translate="yes" xml:space="preserve">
          <source>You can only run a function at compile time if it is imported from another module &lt;em&gt;that is not part of a mutually-recursive group of modules that includes the module currently being compiled&lt;/em&gt;. Furthermore, all of the modules of the mutually-recursive group must be reachable by non-SOURCE imports from the module where the splice is to be run.</source>
          <target state="translated">&lt;em&gt;현재 컴파일중인 모듈을 포함하는 상호 재귀 적 모듈 그룹의 일부가 아닌&lt;/em&gt; 다른 모듈에서 함수를 가져 오는 경우 컴파일시에만 함수를 실행할 수 있습니다 . 또한, 상호 재귀 그룹의 모든 모듈은 스플 라이스가 실행될 모듈에서 비 소스 가져 오기를 통해 도달 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="2006128483b352bda9f0e5cd0d687c4c8519ed68" translate="yes" xml:space="preserve">
          <source>You can only run a function at compile time if it is imported from another module. That is, you can&amp;rsquo;t define a function in a module, and call it from within a splice in the same module. (It would make sense to do so, but it&amp;rsquo;s hard to implement.)</source>
          <target state="translated">다른 모듈에서 가져온 함수는 컴파일 타임에만 실행할 수 있습니다. 즉, 모듈에서 함수를 정의 할 수 없으며 같은 모듈의 스플 라이스 내에서 호출 할 수 없습니다. (그렇게하는 것이 합리적이지만 구현하기는 어렵습니다.)</target>
        </trans-unit>
        <trans-unit id="0f32acc6c773313553a7cd09864edd18e6cff35d" translate="yes" xml:space="preserve">
          <source>You can package up a complete Haskell program as a DLL, to be called by some external (usually non-Haskell) program. This is usually used to implement plugins and the like, and is described below.</source>
          <target state="translated">완전한 하스켈 프로그램을 DLL로 패키지하여 외부 (보통 비 하스켈 이외) 프로그램에 의해 호출 될 수 있습니다. 일반적으로 플러그인 등을 구현하는 데 사용되며 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f1f2284e872267e26710c33db91da1ce9d66612" translate="yes" xml:space="preserve">
          <source>You can read about &lt;a href=&quot;http://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/RecompilationAvoidance&quot;&gt;how all this works&lt;/a&gt; in the GHC commentary.</source>
          <target state="translated">&lt;a href=&quot;http://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/RecompilationAvoidance&quot;&gt;이 모든&lt;/a&gt; 것이 GHC 해설에서 어떻게 작동하는지 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2b48804fb365ae68472ebab1f616e9dd08d1939a" translate="yes" xml:space="preserve">
          <source>You can read about &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/compiler/recompilation-avoidance&quot;&gt;how all this works&lt;/a&gt; in the GHC commentary.</source>
          <target state="translated">&lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/wikis/commentary/compiler/recompilation-avoidance&quot;&gt;이 모든&lt;/a&gt; 것이 GHC 해설에서 어떻게 작동하는지 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e9702340c88d3c9a130465b064633bbe3ada3fe" translate="yes" xml:space="preserve">
          <source>You can read this much like ordinary &lt;code&gt;do&lt;/code&gt;-notation, but with commands in place of monadic expressions. The first line sends the value of &lt;code&gt;x+1&lt;/code&gt; as an input to the arrow &lt;code&gt;f&lt;/code&gt;, and matches its output against &lt;code&gt;y&lt;/code&gt;. In the next line, the output is discarded. The arrow &lt;code&gt;returnA&lt;/code&gt; is defined in the &lt;a href=&quot;../libraries/base-4.13.0.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; module as &lt;code&gt;arr id&lt;/code&gt;. The above example is treated as an abbreviation for</source>
          <target state="translated">이것을 일반적인 &lt;code&gt;do&lt;/code&gt; - notation 과 같이 읽을 수 있지만, 모나 딕 식 대신에 명령을 사용하면됩니다. 첫 번째 행은 &lt;code&gt;x+1&lt;/code&gt; 값을 화살표 &lt;code&gt;f&lt;/code&gt; 에 대한 입력으로 보내고 출력을 &lt;code&gt;y&lt;/code&gt; 에 일치시킵니다 . 다음 줄에서는 출력이 삭제됩니다. 화살표 &lt;code&gt;returnA&lt;/code&gt; 는 &lt;a href=&quot;../libraries/base-4.13.0.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; 모듈에서 &lt;code&gt;arr id&lt;/code&gt; 로 정의됩니다 . 위의 예는 다음의 약어로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="e35a1b51b1f66368a4527f3e02178b039c453864" translate="yes" xml:space="preserve">
          <source>You can read this much like ordinary &lt;code&gt;do&lt;/code&gt;-notation, but with commands in place of monadic expressions. The first line sends the value of &lt;code&gt;x+1&lt;/code&gt; as an input to the arrow &lt;code&gt;f&lt;/code&gt;, and matches its output against &lt;code&gt;y&lt;/code&gt;. In the next line, the output is discarded. The arrow &lt;code&gt;returnA&lt;/code&gt; is defined in the &lt;a href=&quot;../libraries/base-4.14.1.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; module as &lt;code&gt;arr id&lt;/code&gt;. The above example is treated as an abbreviation for</source>
          <target state="translated">일반적인 &lt;code&gt;do&lt;/code&gt; -notation 과 매우 비슷 하지만 모나드 식 대신 명령을 사용하여 읽을 수 있습니다 . 첫 번째 줄은 &lt;code&gt;x+1&lt;/code&gt; 값을 화살표 &lt;code&gt;f&lt;/code&gt; 에 대한 입력으로 보내고 그 출력을 &lt;code&gt;y&lt;/code&gt; 와 일치시킵니다 . 다음 줄에서는 출력이 삭제됩니다. 화살표 &lt;code&gt;returnA&lt;/code&gt; 는 &lt;a href=&quot;../libraries/base-4.14.1.0/control-arrow&quot;&gt;Control.Arrow&lt;/a&gt; 모듈에서 &lt;code&gt;arr id&lt;/code&gt; 로 정의됩니다 . 위의 예는 다음에 대한 약어로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="1e72e813532509ba13800f35b2a255158378cdcd" translate="yes" xml:space="preserve">
          <source>You can safely replace all the import declarations in &lt;code&gt;&lt;em&gt;M&lt;/em&gt;.hs&lt;/code&gt; with those found in its respective &lt;code&gt;.imports&lt;/code&gt; file. Why would you want to do that? Because the &amp;ldquo;minimal&amp;rdquo; imports (a) import everything explicitly, by name, and (b) import nothing that is not required. It can be quite painful to maintain this property by hand, so this flag is intended to reduce the labour.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;M&lt;/em&gt;.hs&lt;/code&gt; 모든 가져 오기 선언을 해당 &lt;code&gt;.imports&lt;/code&gt; 파일 에있는 선언으로 안전하게 바꿀 수 있습니다 . 왜 그렇게 하시겠습니까? &quot;최소&quot;수입품은 (a) 이름으로 모든 것을 명시 적으로 수입하고 (b) 필요하지 않은 것은 수입하지 않기 때문입니다. 이 재산을 손으로 관리하는 것은 상당히 고통 스럽기 때문에이 깃발은 노동을 줄이기 위해 고안되었습니다.</target>
        </trans-unit>
        <trans-unit id="2311eafd5220e927965cb0ade033a0464e40e05e" translate="yes" xml:space="preserve">
          <source>You can save &lt;code&gt;Main.hs&lt;/code&gt; anywhere you like, but if you save it somewhere other than the current directory &lt;a href=&quot;#id7&quot; id=&quot;id6&quot;&gt;3&lt;/a&gt; then we will need to change to the right directory in GHCi:</source>
          <target state="translated">&lt;code&gt;Main.hs&lt;/code&gt; 는 원하는 곳에 저장할 수 있지만 현재 디렉토리 &lt;a href=&quot;#id7&quot; id=&quot;id6&quot;&gt;3이&lt;/a&gt; 아닌 다른 곳에 저장하면 GHCi 에서 올바른 디렉토리로 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="3d11ab0fd694aaac48c2e11aa4e207640df0eae3" translate="yes" xml:space="preserve">
          <source>You can save &lt;code&gt;Main.hs&lt;/code&gt; anywhere you like, but if you save it somewhere other than the current directory &lt;a href=&quot;#id7&quot; id=&quot;id6&quot;&gt;[3]&lt;/a&gt; then we will need to change to the right directory in GHCi:</source>
          <target state="translated">&lt;code&gt;Main.hs&lt;/code&gt; 를 원하는 곳에 저장할 수 있지만 현재 디렉토리가 아닌 다른 곳에 저장하면 &lt;a href=&quot;#id7&quot; id=&quot;id6&quot;&gt;[3]&lt;/a&gt; GHCi의 올바른 디렉토리로 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="ee71858b230e5297e34b408df25cee981faf2858" translate="yes" xml:space="preserve">
          <source>You can suppress the warnings with the flag &lt;a href=&quot;using-warnings#ghc-flag--Wwarnings-deprecations&quot;&gt;&lt;code&gt;-Wno-warnings-deprecations&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;using-warnings#ghc-flag--Wwarnings-deprecations&quot;&gt; &lt;code&gt;-Wno-warnings-deprecations&lt;/code&gt; &lt;/a&gt; 플래그를 사용하여 경고를 억제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5b5b508f9d570be456fe99f9c95ddc6eecec794" translate="yes" xml:space="preserve">
          <source>You can turn each Haskell package into a DLL, so that multiple Haskell executables using the same packages can share the DLL files. (As opposed to linking the libraries statically, which in effect creates a new copy of the RTS and all libraries for each executable produced.)</source>
          <target state="translated">각 Haskell 패키지를 DLL로 변환하여 동일한 패키지를 사용하는 여러 Haskell 실행 파일이 DLL 파일을 공유 할 수 있습니다. (라이브러리를 정적으로 링크하는 것과는 대조적으로, 실제로는 생성 된 각 실행 파일에 대해 새로운 RTS 사본과 모든 라이브러리를 작성합니다.)</target>
        </trans-unit>
        <trans-unit id="6a0144c3e2ac0c6bb9606a34c0cd2ffa74b49390" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;data-time-clock-posix#t:POSIXTime&quot;&gt;POSIXTime&lt;/a&gt;&lt;/code&gt; to obtain integer/word timestamps. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;data-time-clock-posix#t:POSIXTime&quot;&gt;POSIXTime&lt;/a&gt;&lt;/code&gt; 을 사용 하여 정수 / 워드 타임 스탬프를 얻을 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fbf78f5184b54413fec2edf8ed7eaa43cd191246" translate="yes" xml:space="preserve">
          <source>You can use a &lt;code&gt;deriving&lt;/code&gt; clause on a &lt;code&gt;data instance&lt;/code&gt; or &lt;code&gt;newtype instance&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;data instance&lt;/code&gt; 또는 &lt;code&gt;newtype instance&lt;/code&gt; 선언 에 &lt;code&gt;deriving&lt;/code&gt; 절을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4aac8ca00f383844bd9a5a98bae02690f26dd140" translate="yes" xml:space="preserve">
          <source>You can use a &lt;code&gt;deriving&lt;/code&gt; clause on a GADT-style data type declaration. For example, these two declarations are equivalent</source>
          <target state="translated">GADT 스타일 데이터 형식 선언에 &lt;code&gt;deriving&lt;/code&gt; 절을 사용할 수 있습니다 . 예를 들어,이 두 선언은 동일합니다</target>
        </trans-unit>
        <trans-unit id="243f575d20a545ebc20c87833a714937518039c5" translate="yes" xml:space="preserve">
          <source>You can use an external main function if you initialize the RTS manually and pass &lt;code&gt;-no-hs-main&lt;/code&gt;. See also &lt;a href=&quot;ffi-chap#using-own-main&quot;&gt;Using your own main()&lt;/a&gt;.</source>
          <target state="translated">RTS를 수동으로 초기화하고 &lt;code&gt;-no-hs-main&lt;/code&gt; 을 전달하면 외부 기본 기능을 사용할 수 있습니다 . &lt;a href=&quot;ffi-chap#using-own-main&quot;&gt;자체 main () 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e680225c09eb0b9138a98df5d3c63c9df7449b8c" translate="yes" xml:space="preserve">
          <source>You can use record syntax on a GADT-style data type declaration:</source>
          <target state="translated">GADT 스타일 데이터 형식 선언에서 레코드 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="409585b916d348cb201d92711807df5aad400581" translate="yes" xml:space="preserve">
          <source>You can use renaming to provide an alternate prelude, e.g. &lt;code&gt;-hide-all-packages -package &quot;basic-prelude (BasicPrelude as Prelude)&quot;&lt;/code&gt;, in lieu of the &lt;a href=&quot;glasgow_exts#rebindable-syntax&quot;&gt;Rebindable syntax and the implicit Prelude import&lt;/a&gt; extension.</source>
          <target state="translated">이름 바꾸기를 사용 하여 리 &lt;a href=&quot;glasgow_exts#rebindable-syntax&quot;&gt;바인드 가능 구문 및 내재 된 Prelude 가져 오기&lt;/a&gt; 확장 대신 대체 &lt;code&gt;-hide-all-packages -package &quot;basic-prelude (BasicPrelude as Prelude)&quot;&lt;/code&gt; 예 : -hide-all-packages -package &quot;기본 사전 작성 (BasicPrelude as Prelude))&quot; 을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="34cd599ca69b1635630c1789384078026b1631bc" translate="yes" xml:space="preserve">
          <source>You can use strictness annotations, in the obvious places in the constructor type:</source>
          <target state="translated">생성자 유형의 명백한 위치에서 엄격 주석을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed972027c3bec7c1eb51e6a5766ee6c2d7ade065" translate="yes" xml:space="preserve">
          <source>You can work on an entire module thus:</source>
          <target state="translated">따라서 전체 모듈에서 작업 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf48999c2bd9335885a5b2d5518e8a1da408a898" translate="yes" xml:space="preserve">
          <source>You can wrap a series of foreign function calls that rely on thread-local state with &lt;code&gt;runInBoundThread&lt;/code&gt; so that you can use them without knowing whether the current thread is &lt;em&gt;bound&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;runInBoundThread&lt;/code&gt; 를 사용하여 스레드 로컬 상태에 의존하는 일련의 외부 함수 호출을 랩 하여 현재 스레드가 &lt;em&gt;바인드되어&lt;/em&gt; 있는지 여부를 알 수없이 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="01f309884997472a9a1052740889026ae8bf67aa" translate="yes" xml:space="preserve">
          <source>You can write a &lt;code&gt;forall&lt;/code&gt; (including overloading) in a type synonym, thus:</source>
          <target state="translated">형식 동의어 로 &lt;code&gt;forall&lt;/code&gt; (오버로딩 포함)을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4c8f6089007a930f61ef159774cdb1a472069313" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t have an implicit parameter in the context of a class or instance declaration. For example, both these declarations are illegal:</source>
          <target state="translated">클래스 또는 인스턴스 선언의 컨텍스트에서 암시 적 매개 변수를 가질 수 없습니다. 예를 들어,이 두 선언은 모두 불법입니다.</target>
        </trans-unit>
        <trans-unit id="4de126d4c7a597b1d236ebb25b9bb6637ffa49d2" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t pattern-match on an existentially quantified constructor in a &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;where&lt;/code&gt; group of bindings. So this is illegal:</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 또는 &lt;code&gt;where&lt;/code&gt; 바인딩 그룹의 존재 수량화 된 생성자에서는 패턴 일치를 수행 할 수 없습니다 . 따라서 이것은 불법입니다 :</target>
        </trans-unit>
        <trans-unit id="c72ea2d044d7e8facee1aae8ded417fac4a31d3f" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t use &lt;code&gt;deriving&lt;/code&gt; to define instances of a data type with existentially quantified data constructors. Reason: in most cases it would not make sense. For example:;</source>
          <target state="translated">&lt;code&gt;deriving&lt;/code&gt; 을 사용하여 존재 수량화 된 데이터 생성자가있는 데이터 유형의 인스턴스를 정의 할 수 없습니다 . 이유 : 대부분의 경우 이해가되지 않습니다. 예를 들면 다음과 같습니다.;</target>
        </trans-unit>
        <trans-unit id="f58bc414fc59408f4615033fa5f4af7c26c36eb5" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t use existential quantification for &lt;code&gt;newtype&lt;/code&gt; declarations. So this is illegal:</source>
          <target state="translated">&lt;code&gt;newtype&lt;/code&gt; 선언 에는 실존 적 수량화를 사용할 수 없습니다 . 따라서 이것은 불법입니다 :</target>
        </trans-unit>
        <trans-unit id="3b5cdddee5d2f5aa4dc4f653d99b00c57d60b7ea" translate="yes" xml:space="preserve">
          <source>You cannot bind a variable with an unboxed type in a &lt;em&gt;recursive&lt;/em&gt; binding.</source>
          <target state="translated">&lt;em&gt;재귀&lt;/em&gt; 바인딩 에서 상자가 없는 유형의 변수를 바인딩 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8fc0d15dc8ae90bf550f66d4910d3cffc3b11e0a" translate="yes" xml:space="preserve">
          <source>You cannot bind a variable with an unboxed type in a &lt;em&gt;top-level&lt;/em&gt; binding.</source>
          <target state="translated">&lt;em&gt;최상위 레벨&lt;/em&gt; 바인딩 에서 상자없는 유형으로 변수를 바인딩 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="2b1b59bb7b1256234d2e287ed8419a725eea98b4" translate="yes" xml:space="preserve">
          <source>You cannot define a newtype whose representation type (the argument type of the data constructor) is an unboxed type. Thus, this is illegal:</source>
          <target state="translated">표시 유형 (데이터 생성자의 인수 유형)이 상자없는 유형 인 새 유형을 정의 할 수 없습니다. 따라서 이것은 불법입니다 :</target>
        </trans-unit>
        <trans-unit id="53d57a9a763d91b8c3c30f9e88b44d16989b4ef8" translate="yes" xml:space="preserve">
          <source>You cannot use &lt;code&gt;deriving&lt;/code&gt; on a data type declaration; write an &lt;code&gt;instance&lt;/code&gt; declaration instead.</source>
          <target state="translated">데이터 형식 선언에는 &lt;code&gt;deriving&lt;/code&gt; 을 사용할 수 없습니다 . 쓰기 &lt;code&gt;instance&lt;/code&gt; 대신 선언.</target>
        </trans-unit>
        <trans-unit id="6c32b374e885a0b6d9cb00079f7e8613d4b04f29" translate="yes" xml:space="preserve">
          <source>You cannot use a &lt;code&gt;deriving&lt;/code&gt; clause for a GADT; only for an ordinary data type.</source>
          <target state="translated">GADT에 &lt;code&gt;deriving&lt;/code&gt; 조항을 사용할 수 없습니다 . 일반 데이터 유형에만 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="30dbefdf45ec49645c5f83a96844f0e523320cd0" translate="yes" xml:space="preserve">
          <source>You cannot write &lt;code&gt;GMapKey(type GMap(..))&lt;/code&gt; &amp;mdash; i.e., sub-component specifications cannot be nested. To specify &lt;code&gt;GMap&lt;/code&gt;&amp;lsquo;s data constructors, you have to list it separately.</source>
          <target state="translated">&lt;code&gt;GMapKey(type GMap(..))&lt;/code&gt; 작성할 수 없습니다 . 즉, 하위 구성 요소 스펙을 중첩 할 수 없습니다. &lt;code&gt;GMap&lt;/code&gt; 의 데이터 생성자 를 지정하려면 별도로 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="504d8482be9fb213017caf5dad95956603bd628a" translate="yes" xml:space="preserve">
          <source>You cannot write &lt;code&gt;GMapKey(type GMap(..))&lt;/code&gt; &amp;mdash; i.e., sub-component specifications cannot be nested. To specify &lt;code&gt;GMap&lt;/code&gt;&amp;rsquo;s data constructors, you have to list it separately.</source>
          <target state="translated">&lt;code&gt;GMapKey(type GMap(..))&lt;/code&gt; 작성할 수 없습니다 . 즉, 하위 구성 요소 사양은 중첩 될 수 없습니다. &lt;code&gt;GMap&lt;/code&gt; 의 데이터 생성자 를 지정하려면 별도로 나열해야합니다.</target>
        </trans-unit>
        <trans-unit id="801821aa8abcdb27ec906dde72beecfda446438f" translate="yes" xml:space="preserve">
          <source>You construct values of types &lt;code&gt;T1, MonadT, Swizzle&lt;/code&gt; by applying the constructor to suitable values, just as usual. For example,</source>
          <target state="translated">평소처럼 생성자를 적합한 값에 적용하여 &lt;code&gt;T1, MonadT, Swizzle&lt;/code&gt; 유형의 값을 구성합니다 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="35e2c1cf685c898a2ffd48135532e04038f5cd4e" translate="yes" xml:space="preserve">
          <source>You could also refactor to a left-fold, to decode in a more streaming fashion, and get the following decoder. It will start to return data without knowing that it can decode all input.</source>
          <target state="translated">또한 왼쪽으로 리팩토링하고 더 스트리밍 방식으로 디코딩하고 다음 디코더를 얻을 수 있습니다. 모든 입력을 해독 할 수 있다는 것을 모르고 데이터를 반환하기 시작합니다.</target>
        </trans-unit>
        <trans-unit id="71ec1076802c7edea768f5f032750297cd230b60" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t have to write a &lt;code&gt;Makefile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Makefile&lt;/code&gt; 을 작성할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="672d8bd48c35b0238c3a6248aa09088d6f74bcfe" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to give a type signature if the lambda bound variable is a constructor argument. Here is an example we saw earlier:</source>
          <target state="translated">람다 바운드 변수가 생성자 인수 인 경우 유형 서명을 제공 할 필요가 없습니다. 우리가 앞에서 본 예제는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e18c34733b256b9593b5ee6ff19c7fc0070729c9" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to use &lt;code&gt;-fprof-auto&lt;/code&gt; for interpreted modules, annotations are automatically added at a granularity fine enough to distinguish individual call sites. However, you won&amp;rsquo;t see any call stack information for compiled code unless it was compiled with &lt;code&gt;-fprof-auto&lt;/code&gt; or has explicit &lt;code&gt;SCC&lt;/code&gt; annotations (see &lt;a href=&quot;profiling#scc-pragma&quot;&gt;Inserting cost centres by hand&lt;/a&gt;).</source>
          <target state="translated">해석 된 모듈에는 &lt;code&gt;-fprof-auto&lt;/code&gt; 를 사용할 필요가 없습니다 . 주석은 개별 호출 사이트를 구별 할 수있을만큼 세분화되어 자동으로 추가됩니다. 그러나 컴파일 된 코드에 대해 &lt;code&gt;-fprof-auto&lt;/code&gt; 로 컴파일 되었거나 명시적인 &lt;code&gt;SCC&lt;/code&gt; 주석 이 없는 경우를 제외하고는 호출 스택 정보가 표시되지 않습니다 ( &lt;a href=&quot;profiling#scc-pragma&quot;&gt;수동으로 코스트 센터 삽입&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="31b23007442846d8966d8b9c7845ac06100f1b24" translate="yes" xml:space="preserve">
          <source>You get &lt;code&gt;:type 3&lt;/code&gt;</source>
          <target state="translated">당신은 얻는다 &lt;code&gt;:type 3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d5ece0b208425f5c34d6d99b2faf1ff3266b3af5" translate="yes" xml:space="preserve">
          <source>You get &lt;code&gt;:type 3&lt;/code&gt; with your defined macro, not the builtin.</source>
          <target state="translated">내장이 아닌 정의 된 매크로로 &lt;code&gt;:type 3&lt;/code&gt; 을 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="55bf28bc378f0c361c15d24c0484d765d31cbd6c" translate="yes" xml:space="preserve">
          <source>You get &lt;code&gt;:type 3&lt;/code&gt; with your defined macro.</source>
          <target state="translated">정의 된 매크로로 &lt;code&gt;:type 3&lt;/code&gt; 을 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="351ad6e5432243b3e78e9a641aceba23d847888a" translate="yes" xml:space="preserve">
          <source>You have a macro &lt;code&gt;:time&lt;/code&gt; and a macro &lt;code&gt;:type&lt;/code&gt;, and enter &lt;code&gt;:t 3&lt;/code&gt;</source>
          <target state="translated">매크로 &lt;code&gt;:time&lt;/code&gt; 및 매크로 &lt;code&gt;:type&lt;/code&gt; 이 있고 &lt;code&gt;:t 3&lt;/code&gt; 을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="8b967e14a3b2c88438d391b51a97e44abc37b8a3" translate="yes" xml:space="preserve">
          <source>You have a macro &lt;code&gt;:time&lt;/code&gt; and enter &lt;code&gt;:t 3&lt;/code&gt;</source>
          <target state="translated">매크로 &lt;code&gt;:time&lt;/code&gt; 있고 &lt;code&gt;:t 3&lt;/code&gt; 을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="6e64bb8bb775010f86695f2cafd801d4cc29f97f" translate="yes" xml:space="preserve">
          <source>You have a macro &lt;code&gt;:type&lt;/code&gt; and enter &lt;code&gt;:t 3&lt;/code&gt;</source>
          <target state="translated">매크로 &lt;code&gt;:type&lt;/code&gt; 이 있고 &lt;code&gt;:t 3&lt;/code&gt; 을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="0c5292c5b2bc0c1ca9d4ca9e4d5b25bbd9e291c2" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;pattern&lt;/code&gt; keyword in an import/export specification to import or export an ordinary data constructor. For example:</source>
          <target state="translated">가져 오기 / 내보내기 스펙에서 &lt;code&gt;pattern&lt;/code&gt; 키워드를 사용하여 일반 데이터 생성자를 가져 오거나 내보낼 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b74a8315c09d21b66a862d09b6cf623f9312b66e" translate="yes" xml:space="preserve">
          <source>You may also write an explicit exponent, which is similar to the exponent in decimal notation with the following differences: - the exponent begins with &lt;code&gt;p&lt;/code&gt; instead of &lt;code&gt;e&lt;/code&gt; - the exponent is written in base &lt;code&gt;10&lt;/code&gt; (&lt;strong&gt;not&lt;/strong&gt; 16) - the base of the exponent is &lt;code&gt;2&lt;/code&gt; (&lt;strong&gt;not&lt;/strong&gt; 16).</source>
          <target state="translated">또한 다음과 같은 차이점 진수 표기법 지수 유사한 명시 적 지수를 쓸 수 있습니다 : - 지수로 시작 &lt;code&gt;p&lt;/code&gt; 대신 &lt;code&gt;e&lt;/code&gt; - 지수를 기초로 작성 &lt;code&gt;10&lt;/code&gt; ( &lt;strong&gt;하지&lt;/strong&gt; 16) - 지수의 기본이다 &lt;code&gt;2&lt;/code&gt; ( &lt;strong&gt;되지&lt;/strong&gt; 16).</target>
        </trans-unit>
        <trans-unit id="8707d0873e271cfc9458fd1a9219b507929f88d1" translate="yes" xml:space="preserve">
          <source>You may bind unboxed variables in a (non-recursive, non-top-level) pattern binding, but you must make any such pattern-match strict. (Failing to do so emits a warning &lt;a href=&quot;using-warnings#ghc-flag--Wunbanged-strict-patterns&quot;&gt;&lt;code&gt;-Wunbanged-strict-patterns&lt;/code&gt;&lt;/a&gt;.) For example, rather than:</source>
          <target state="translated">(비재 귀적, 최상위가 아닌) 패턴 바인딩에서 비 박스 화 변수를 바인딩 할 수 있지만 이러한 패턴 일치를 엄격하게 만들어야합니다. (그렇게하지 않으면 경고 &lt;a href=&quot;using-warnings#ghc-flag--Wunbanged-strict-patterns&quot;&gt; &lt;code&gt;-Wunbanged-strict-patterns&lt;/code&gt; 가 발생&lt;/a&gt; 합니다.) 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e5864b6382b64fb2ddff9a22e3cb269048cd1a65" translate="yes" xml:space="preserve">
          <source>You may not mix implicit-parameter bindings with ordinary bindings in a single &lt;code&gt;let&lt;/code&gt; expression; use two nested &lt;code&gt;let&lt;/code&gt;s instead. (In the case of &lt;code&gt;where&lt;/code&gt; you are stuck, since you can&amp;rsquo;t nest &lt;code&gt;where&lt;/code&gt; clauses.)</source>
          <target state="translated">단일 &lt;code&gt;let&lt;/code&gt; 표현식 에서 암시 적 매개 변수 바인딩과 일반 바인딩을 혼합 할 수 없습니다 . 대신 두 개의 중첩 &lt;code&gt;let&lt;/code&gt; 을 사용하십시오. &lt;code&gt;where&lt;/code&gt; 절을 중첩 할 수 없으므로 붙어 &lt;code&gt;where&lt;/code&gt; 의 경우 .</target>
        </trans-unit>
        <trans-unit id="8a15b835542506de56c4f0581f50dc84443c25f1" translate="yes" xml:space="preserve">
          <source>You may omit the &lt;code&gt;$(...)&lt;/code&gt; in a top-level declaration splice. Simply writing an expression (rather than a declaration) implies a splice. For example, you can write</source>
          <target state="translated">최상위 선언 스플 라이스에서 &lt;code&gt;$(...)&lt;/code&gt; 를 생략 할 수 있습니다 . 선언이 아닌 표현식을 작성하는 것은 스플 라이스를 의미합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="2a2636e1eccaa733c43b723cac9f02b969f1c6f5" translate="yes" xml:space="preserve">
          <source>You may put multiple implicit-parameter bindings in a single binding group; but they are &lt;em&gt;not&lt;/em&gt; treated as a mutually recursive group (as ordinary &lt;code&gt;let&lt;/code&gt; bindings are). Instead they are treated as a non-recursive group, simultaneously binding all the implicit parameter. The bindings are not nested, and may be re-ordered without changing the meaning of the program. For example, consider:</source>
          <target state="translated">단일 바인딩 그룹에 여러 개의 암시 적 매개 변수 바인딩을 넣을 수 있습니다. 그러나 그들은되는 &lt;em&gt;하지&lt;/em&gt; (보통으로 상호 재귀 그룹으로 처리 &lt;code&gt;let&lt;/code&gt; 바인딩이 있습니다). 대신, 이들은 비 재귀 그룹으로 취급되며 모든 암시 적 매개 변수를 동시에 바인딩합니다. 바인딩은 중첩되지 않으며 프로그램의 의미를 변경하지 않고 재정렬 될 수 있습니다. 예를 들어, 다음을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="69c2bcd249a51f493b6d8defcfa352db2fe97573" translate="yes" xml:space="preserve">
          <source>You may specify an explicit &lt;em&gt;pattern signature&lt;/em&gt;, as we did for &lt;code&gt;ExNumPat&lt;/code&gt; above, to specify the type of a pattern, just as you can for a function. As usual, the type signature can be less polymorphic than the inferred type. For example</source>
          <target state="translated">함수에 대해 가능한 것처럼 패턴의 유형을 지정하기 위해 위의 &lt;code&gt;ExNumPat&lt;/code&gt; 에서와 같이 명시 적 &lt;em&gt;패턴 서명&lt;/em&gt; 을 지정할 수 있습니다. 통상적으로 타입 시그니처는 유추 된 타입보다 다형성이 적을 수 있습니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="e235042667b9c56eb4698542652a4ffe747fce1f" translate="yes" xml:space="preserve">
          <source>You may specify that a different program be used for one of the phases of the compilation system, in place of whatever the &lt;code&gt;ghc&lt;/code&gt; has wired into it. For example, you might want to try a different assembler. The following options allow you to change the external program used for a given compilation phase:</source>
          <target state="translated">&lt;code&gt;ghc&lt;/code&gt; 가 연결 한 것을 대신하여 컴파일 시스템의 단계 중 하나에 다른 프로그램을 사용하도록 지정할 수 있습니다 . 예를 들어, 다른 어셈블러를 시도 할 수 있습니다. 다음 옵션을 사용하면 지정된 컴파일 단계에 사용되는 외부 프로그램을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffee81bdfe61682f0576300599ea43f154d0f848" translate="yes" xml:space="preserve">
          <source>You may want to enable this warning on a clean build or enable &lt;a href=&quot;separate_compilation#ghc-flag--fforce-recomp&quot;&gt;&lt;code&gt;-fforce-recomp&lt;/code&gt;&lt;/a&gt; in order to get reliable results.</source>
          <target state="translated">신뢰할 수있는 결과를 얻으려면 클린 빌드에서이 경고를 활성화하거나 &lt;a href=&quot;separate_compilation#ghc-flag--fforce-recomp&quot;&gt; &lt;code&gt;-fforce-recomp&lt;/code&gt; &lt;/a&gt; 를 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c11ae553a6507ead096463536fbbb081dce0652" translate="yes" xml:space="preserve">
          <source>You may write programs that use exotic sorts of constraints in instance contexts and superclasses, but to do so you must use &lt;a href=&quot;#extension-UndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt; to signal that you don&amp;rsquo;t mind if the type checker fails to terminate.</source>
          <target state="translated">인스턴스 컨텍스트와 수퍼 클래스에 이국적인 종류의 제약 조건을 사용하는 프로그램을 작성할 수 있지만, 그렇게하려면 형식 검사기가 종료되지 않으면 신경 쓰지 않음을 &lt;a href=&quot;#extension-UndecidableInstances&quot;&gt; &lt;code&gt;UndecidableInstances&lt;/code&gt; &lt;/a&gt; 위해 UndecidableInstances 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d9ac328de126bafdb81fd66142c9606ef9f2bba1" translate="yes" xml:space="preserve">
          <source>You might also want to take a look at &lt;a href=&quot;http://www.haskell.org/haskellwiki/Hp2any&quot;&gt;hp2any&lt;/a&gt;, a more advanced suite of tools (not distributed with GHC) for displaying heap profiles.</source>
          <target state="translated">힙 프로파일을 표시하기위한 고급 도구 모음 (GHC와 함께 제공되지 않음) 인 &lt;a href=&quot;http://www.haskell.org/haskellwiki/Hp2any&quot;&gt;hp2any를&lt;/a&gt; 살펴볼 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1723e9eaca2c46aa402d493c6d51826bd13e2dec" translate="yes" xml:space="preserve">
          <source>You might find it useful to use Haskell&amp;rsquo;s &lt;code&gt;seq&lt;/code&gt; function to evaluate individual thunks rather than evaluating the whole expression with &lt;a href=&quot;#ghci-cmd-:force&quot;&gt;&lt;code&gt;:force&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;a href=&quot;#ghci-cmd-:force&quot;&gt; &lt;code&gt;:force&lt;/code&gt; 로&lt;/a&gt; 전체 표현식을 평가하는 대신 Haskell의 &lt;code&gt;seq&lt;/code&gt; 함수 를 사용 하여 개별 썽크를 평가 하는 것이 유용 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8b2b2c5879599e9fb9784f8ece7db05367147809" translate="yes" xml:space="preserve">
          <source>You might want to use this if you are you have a type class method which returns a constrained type. For example, a type class where one of the methods implements a traversal.</source>
          <target state="translated">제한된 유형을 리턴하는 유형 클래스 메소드가있는 경우이를 사용할 수 있습니다. 예를 들어, 메소드 중 하나가 순회를 구현하는 유형 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="7ca17a83d89102130bc3fbe2303f1ff784f0cd26" translate="yes" xml:space="preserve">
          <source>You must install and have LLVM available on your &lt;code&gt;PATH&lt;/code&gt; for the LLVM code generator to work. Specifically GHC needs to be able to call the &lt;code&gt;opt&lt;/code&gt; and &lt;code&gt;llc&lt;/code&gt; tools. Secondly, if you are running Mac OS X with LLVM 3.0 or greater then you also need the &lt;a href=&quot;http://clang.llvm.org&quot;&gt;Clang C compiler&lt;/a&gt; compiler available on your &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">LLVM 코드 생성기가 작동하려면 &lt;code&gt;PATH&lt;/code&gt; 에 LLVM을 설치하고 사용할 수 있어야합니다 . 특히 GHC는 &lt;code&gt;opt&lt;/code&gt; 및 &lt;code&gt;llc&lt;/code&gt; 도구 를 호출 할 수 있어야 합니다. 둘째, LLVM 3.0 이상으로 Mac OS X를 실행하는 경우 &lt;code&gt;PATH&lt;/code&gt; 에서 사용할 수 있는 &lt;a href=&quot;http://clang.llvm.org&quot;&gt;Clang C 컴파일러&lt;/a&gt; 컴파일러 도 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="7848640f49a2013635063f5f2a65c426e3adec48" translate="yes" xml:space="preserve">
          <source>You need this when using &lt;code&gt;&lt;a href=&quot;control-exception#v:catches&quot;&gt;catches&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-exception#v:catches&quot;&gt;catches&lt;/a&gt;&lt;/code&gt; 사용할 때 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="5e3e8cd42cf48f666040b93e9cb7bcb77de13e8f" translate="yes" xml:space="preserve">
          <source>You need to build an &amp;ldquo;installed package info&amp;rdquo; file for passing to &lt;code&gt;ghc-pkg&lt;/code&gt; when installing your package. The contents of this file are described in &lt;a href=&quot;#installed-pkg-info&quot;&gt;InstalledPackageInfo: a package specification&lt;/a&gt;.</source>
          <target state="translated">패키지 를 설치할 때 &lt;code&gt;ghc-pkg&lt;/code&gt; 에 전달하기 위해&amp;ldquo;설치된 패키지 정보&amp;rdquo;파일을 작성 해야합니다. 이 파일의 내용은 &lt;a href=&quot;#installed-pkg-info&quot;&gt;InstalledPackageInfo : a package specification에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecae143bd200467151fc11557c8e8ff56f5c8728" translate="yes" xml:space="preserve">
          <source>You only need to enable this extension if the language you&amp;rsquo;re using is Haskell 98, in which a data type must have at least one constructor. Haskell 2010 relaxed this rule to allow data types with no constructors, and thus &lt;a href=&quot;#extension-EmptyDataDecls&quot;&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;/a&gt; is enabled by default when the language is Haskell 2010.</source>
          <target state="translated">사용중인 언어가 Haskell 98 인 경우에만이 확장명을 활성화하면되는데, 여기에는 데이터 유형에 생성자가 하나 이상 있어야합니다. Haskell 2010은이 규칙을 완화하여 생성자가없는 데이터 유형을 허용하므로 언어가 Haskell 2010 인 경우 기본적으로 &lt;a href=&quot;#extension-EmptyDataDecls&quot;&gt; &lt;code&gt;EmptyDataDecls&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="20e8c6e9c630a979645ea222c79a82dcdd527d41" translate="yes" xml:space="preserve">
          <source>You probably don&amp;rsquo;t need to use this feature, it was added mainly so that we can build backwards-compatible versions of packages when APIs change. It can lead to fragile dependencies in the common case: modules occasionally move from one package to another, rendering any package-qualified imports broken. See also &lt;a href=&quot;packages#package-thinning-and-renaming&quot;&gt;Thinning and renaming modules&lt;/a&gt; for an alternative way of disambiguating between module names.</source>
          <target state="translated">이 기능을 사용할 필요는 없습니다. API가 변경 될 때 이전 버전과 호환되는 패키지 버전을 빌드 할 수 있도록 주로 추가되었습니다. 일반적인 경우에는 취약한 종속성이 발생할 수 있습니다. 모듈은 때때로 한 패키지에서 다른 패키지로 이동하여 패키지 인증 가져 오기가 손상됩니다. 모듈 이름을 명확하게 구분하는 다른 방법은 &lt;a href=&quot;packages#package-thinning-and-renaming&quot;&gt;모듈 축소 및 이름 바꾸기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="06a8acb7bef4875c53862bd963dfb3bee4782074" translate="yes" xml:space="preserve">
          <source>You should be careful with your installation function, because the list of passes you give back isn&amp;rsquo;t questioned or double checked by GHC at the time of this writing. An installation function like the following:</source>
          <target state="translated">이 글을 쓰는 시점에 GHC가 제공 한 패스 목록에 의문을 제기하거나 이중 점검하지 않기 때문에 설치 기능에주의해야합니다. 다음과 같은 설치 기능 :</target>
        </trans-unit>
        <trans-unit id="c8fb8a0845765453a3b51653e072b1e3775e368f" translate="yes" xml:space="preserve">
          <source>You should not use this module unless you are determined to monkey with the internals, as the functions here do just about nothing to preserve data invariants. You have been warned!</source>
          <target state="translated">내부 함수를 원숭이로 결정하지 않는 한이 모듈을 사용하면 안됩니다. 여기서 함수는 데이터 불변을 보존하기 위해 아무것도 수행하지 않기 때문입니다. 경고를 받았습니다!</target>
        </trans-unit>
        <trans-unit id="e9580720487f8d0a617fa4e79bebc3170cc9fb48" translate="yes" xml:space="preserve">
          <source>You should think of the object file and the interface file as a pair, since the interface file is in a sense a compiler-readable description of the contents of the object file. If the interface file and object file get out of sync for any reason, then the compiler may end up making assumptions about the object file that aren&amp;rsquo;t true; trouble will almost certainly follow. For this reason, we recommend keeping object files and interface files in the same place (GHC does this by default, but it is possible to override the defaults as we&amp;rsquo;ll explain shortly).</source>
          <target state="translated">인터페이스 파일은 어떤 의미에서 오브젝트 파일의 내용에 대한 컴파일러가 읽을 수있는 설명이므로 오브젝트 파일과 인터페이스 파일을 쌍으로 생각해야합니다. 인터페이스 파일과 객체 파일이 어떤 이유로 든 동기화되지 않으면 컴파일러는 객체 파일에 대해 사실이 아닌 것으로 가정 할 수 있습니다. 문제는 거의 확실하게 따릅니다. 이러한 이유로 객체 파일과 인터페이스 파일을 같은 위치에 유지하는 것이 좋습니다 (GHC는 기본적으로이 작업을 수행하지만 곧 설명 할 기본값을 재정의 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="c015ba62398898e9130e51965530b85d77f20111" translate="yes" xml:space="preserve">
          <source>You will eventually need all the values stored.</source>
          <target state="translated">결국에는 저장된 모든 값이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f1f3422827e73aced4dc67f6bd9053292d8032b6" translate="yes" xml:space="preserve">
          <source>You would think that the definition of &lt;code&gt;g&lt;/code&gt; would surely typecheck! After all &lt;code&gt;f&lt;/code&gt; has exactly the same type, and &lt;code&gt;g=f&lt;/code&gt;. But in fact &lt;code&gt;f&lt;/code&gt;&amp;lsquo;s type is instantiated and the instantiated constraints are solved against the constraints bound by &lt;code&gt;g&lt;/code&gt;&amp;lsquo;s signature. So, in the case an ambiguous type, solving will fail. For example, consider the earlier definition &lt;code&gt;f :: C a =&amp;gt; Int&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;g&lt;/code&gt; 의 정의 가 반드시 타입 체크 라고 생각할 것입니다 ! 모든 &lt;code&gt;f&lt;/code&gt; 는 정확히 같은 유형이며 &lt;code&gt;g=f&lt;/code&gt; 입니다. 그러나 실제로 &lt;code&gt;f&lt;/code&gt; 의 타입은 인스턴스화되고 인스턴스화 된 제약은 &lt;code&gt;g&lt;/code&gt; 의 서명에 의해 구속 된 제약에 대해 해결 됩니다. 따라서 모호한 유형의 경우 해결이 실패합니다. 예를 들어, 이전 정의 &lt;code&gt;f :: C a =&amp;gt; Int&lt;/code&gt; 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="3bacaebd47954a76b1781e22db7949543ec0e3fb" translate="yes" xml:space="preserve">
          <source>You would think that the definition of &lt;code&gt;g&lt;/code&gt; would surely typecheck! After all &lt;code&gt;f&lt;/code&gt; has exactly the same type, and &lt;code&gt;g=f&lt;/code&gt;. But in fact &lt;code&gt;f&lt;/code&gt;&amp;rsquo;s type is instantiated and the instantiated constraints are solved against the constraints bound by &lt;code&gt;g&lt;/code&gt;&amp;rsquo;s signature. So, in the case an ambiguous type, solving will fail. For example, consider the earlier definition &lt;code&gt;f :: C a =&amp;gt; Int&lt;/code&gt;:</source>
          <target state="translated">당신은 &lt;code&gt;g&lt;/code&gt; 의 정의 가 확실히 typecheck 할 것이라고 생각할 것입니다 ! 결국 &lt;code&gt;f&lt;/code&gt; 는 정확히 동일한 유형이고 &lt;code&gt;g=f&lt;/code&gt; 입니다. 그러나 실제로 &lt;code&gt;f&lt;/code&gt; 의 유형은 인스턴스화되고 인스턴스화 된 제약은 &lt;code&gt;g&lt;/code&gt; 의 서명에 의해 구속 된 제약에 대해 해결 됩니다. 따라서 모호한 유형의 경우 해결이 실패합니다. 예를 들어, 이전 정의 &lt;code&gt;f :: C a =&amp;gt; Int&lt;/code&gt; 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="a82f52f22d9821ac7862aa36528ae6d83fd3c82d" translate="yes" xml:space="preserve">
          <source>Your GHC must have been built with &lt;code&gt;libdw&lt;/code&gt; support for this to work.</source>
          <target state="translated">이 작업을 수행 하려면 GHC가 &lt;code&gt;libdw&lt;/code&gt; 지원 으로 구축되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="9519d527689c73f17e39c0b9add443cee365e48f" translate="yes" xml:space="preserve">
          <source>Your code should just work as before when &lt;a href=&quot;#extension-ApplicativeDo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; is enabled, provided you use conventional &lt;code&gt;Applicative&lt;/code&gt; instances. However, if you define a &lt;code&gt;Functor&lt;/code&gt; or &lt;code&gt;Applicative&lt;/code&gt; instance using do-notation, then it will likely get turned into an infinite loop by GHC. For example, if you do this:</source>
          <target state="translated">일반적인 &lt;code&gt;Applicative&lt;/code&gt; 인스턴스 를 사용하는 경우 &lt;a href=&quot;#extension-ApplicativeDo&quot;&gt; &lt;code&gt;ApplicativeDo&lt;/code&gt; &lt;/a&gt; 가 활성화 될 때와 마찬가지로 코드가 작동해야 합니다. 그러나 do-notation을 사용하여 &lt;code&gt;Functor&lt;/code&gt; 또는 &lt;code&gt;Applicative&lt;/code&gt; 인스턴스를 정의하면 GHC에 의해 무한 루프로 바뀔 수 있습니다. 예를 들어, 이렇게하면 :</target>
        </trans-unit>
        <trans-unit id="a1183986a9ffb1b2af584571ceb4a326e3d27e31" translate="yes" xml:space="preserve">
          <source>Z NOTATION LEFT IMAGE BRACKET</source>
          <target state="translated">Z 표기법 왼쪽 이미지 브래킷</target>
        </trans-unit>
        <trans-unit id="0c83924bcb1f702fbc698e5e6e9f9116245051fc" translate="yes" xml:space="preserve">
          <source>Z NOTATION RIGHT IMAGE BRACKET</source>
          <target state="translated">Z 표기법 오른쪽 이미지 브래킷</target>
        </trans-unit>
        <trans-unit id="9ee13b9d7e56ee129a6f6f181a2acc60f3e30fdb" translate="yes" xml:space="preserve">
          <source>Zero and plus:</source>
          <target state="translated">제로 플러스 :</target>
        </trans-unit>
        <trans-unit id="e033898555382f2650b269ecbde512101722e511" translate="yes" xml:space="preserve">
          <source>Zero is represented by an empty error and the plus operation executes its second argument if the first fails.</source>
          <target state="translated">0은 빈 오류로 표시되며 첫 번째 작업이 실패하면 더하기 작업이 두 번째 인수를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="89ce708b7ebe149f5f5bb556542ed3a714814ce1" translate="yes" xml:space="preserve">
          <source>Zero or more.</source>
          <target state="translated">0 이상</target>
        </trans-unit>
        <trans-unit id="4f2b9ff1bc4646cc78797dbbfc4b21df6589cf65" translate="yes" xml:space="preserve">
          <source>ZeroPad</source>
          <target state="translated">ZeroPad</target>
        </trans-unit>
        <trans-unit id="2700bd76f0516df842fd9e4abb85f8429575d4af" translate="yes" xml:space="preserve">
          <source>ZigZagMode</source>
          <target state="translated">ZigZagMode</target>
        </trans-unit>
        <trans-unit id="e3c3091702d0663b55dd13e13b164ff519e2737a" translate="yes" xml:space="preserve">
          <source>ZipList</source>
          <target state="translated">ZipList</target>
        </trans-unit>
        <trans-unit id="281d4deef155f3f504d99a312a022a397d572373" translate="yes" xml:space="preserve">
          <source>Zipping</source>
          <target state="translated">Zipping</target>
        </trans-unit>
        <trans-unit id="933679db226a72e96000d73f1c7a880b6ddef5ad" translate="yes" xml:space="preserve">
          <source>Zipping and unzipping</source>
          <target state="translated">압축 및 압축 해제</target>
        </trans-unit>
        <trans-unit id="005dee8618c3540289989daf3c2e77debf4a260b" translate="yes" xml:space="preserve">
          <source>Zipping and unzipping ByteStrings</source>
          <target state="translated">ByteString 압축 및 압축 해제</target>
        </trans-unit>
        <trans-unit id="30dc05c3a24d302f5746bde459be8a25f4a06e2d" translate="yes" xml:space="preserve">
          <source>Zipping and unzipping lists</source>
          <target state="translated">압축 및 압축 해제 목록</target>
        </trans-unit>
        <trans-unit id="07d080af9fb55da8f84a8c1fcaee4852c64bdb52" translate="yes" xml:space="preserve">
          <source>Zipping and unzipping streams</source>
          <target state="translated">압축 및 압축 해제 스트림</target>
        </trans-unit>
        <trans-unit id="aa0ede24e19b5ea08adf33939b19f9036f4d61de" translate="yes" xml:space="preserve">
          <source>Zips and unzip</source>
          <target state="translated">지퍼 및 압축 해제</target>
        </trans-unit>
        <trans-unit id="826ebf2b3d9d03b6187eb018e001d37252118a80" translate="yes" xml:space="preserve">
          <source>Zl: Separator, Line</source>
          <target state="translated">Zl : 분리기, 라인</target>
        </trans-unit>
        <trans-unit id="0f9a135b374272cc3038eb482b2ccf2620a381ea" translate="yes" xml:space="preserve">
          <source>ZonedTime</source>
          <target state="translated">ZonedTime</target>
        </trans-unit>
        <trans-unit id="53df64e0f183ed18f2af00a3cd4b1e5f59e3ad75" translate="yes" xml:space="preserve">
          <source>Zp: Separator, Paragraph</source>
          <target state="translated">Zp : 구분자, 단락</target>
        </trans-unit>
        <trans-unit id="b8543845a37a3bc5a76a7d50c4861b4a9b6ca581" translate="yes" xml:space="preserve">
          <source>Zs: Separator, Space</source>
          <target state="translated">Zs : 분리기, 공간</target>
        </trans-unit>
        <trans-unit id="ed9b7c0478a525885fdc0372f59486ef9c26b349" translate="yes" xml:space="preserve">
          <source>[ This is an experimental feature enabled by the new &lt;code&gt;-fexternal-interpreter&lt;/code&gt; flag that was introduced in GHC 8.0.1. It is currently not supported on Windows.]</source>
          <target state="translated">[이것은 GHC 8.0.1에 도입 된 새로운 &lt;code&gt;-fexternal-interpreter&lt;/code&gt; 플래그에 의해 가능한 실험 기능 입니다. 현재 Windows에서는 지원되지 않습니다.]</target>
        </trans-unit>
        <trans-unit id="8d3d9a8e3d2cb9184eb7776e15ffceb7ac844db5" translate="yes" xml:space="preserve">
          <source>[AssocDataTypes2005]</source>
          <target state="translated">[AssocDataTypes2005]</target>
        </trans-unit>
        <trans-unit id="3149026df86df09307a54a32b5ebc7072dbf3911" translate="yes" xml:space="preserve">
          <source>[AssocTypeSyn2005]</source>
          <target state="translated">[AssocTypeSyn2005]</target>
        </trans-unit>
        <trans-unit id="27ff8c3223896183bde17540d1a603485152df8f" translate="yes" xml:space="preserve">
          <source>[Example: &lt;code&gt;-n4m&lt;/code&gt; ] When set to a non-zero value, this option divides the allocation area (&lt;code&gt;-A&lt;/code&gt; value) into chunks of the specified size. During execution, when a processor exhausts its current chunk, it is given another chunk from the pool until the pool is exhausted, at which point a collection is triggered.</source>
          <target state="translated">[예 : &lt;code&gt;-n4m&lt;/code&gt; ] 0이 아닌 값으로 설정되면이 옵션은 할당 영역 ( &lt;code&gt;-A&lt;/code&gt; 값)을 지정된 크기의 청크로 나눕니다 . 실행 중에 프로세서가 현재 청크를 소진하면 풀이 소진 될 때까지 풀에서 다른 청크가 제공되며,이 시점에서 컬렉션이 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="fd9c35275c0e496e473d959fc136a682ad3086d9" translate="yes" xml:space="preserve">
          <source>[Generics2010]</source>
          <target state="translated">[Generics2010]</target>
        </trans-unit>
        <trans-unit id="2163465089d2b153e0b8b61b46434eae8e1fe466" translate="yes" xml:space="preserve">
          <source>[Jones1999]</source>
          <target state="translated">[Jones1999]</target>
        </trans-unit>
        <trans-unit id="0c12f0c3c0a3e1aa6318a2e1ca646ed6212245b2" translate="yes" xml:space="preserve">
          <source>[Jones2000]</source>
          <target state="translated">[Jones2000]</target>
        </trans-unit>
        <trans-unit id="5f40289190bf70086cf4ad6fbc3348c060199dc3" translate="yes" xml:space="preserve">
          <source>[Lewis2000]</source>
          <target state="translated">[Lewis2000]</target>
        </trans-unit>
        <trans-unit id="c15f78a0d8a349e988dcf4bdf728980c9aa85b77" translate="yes" xml:space="preserve">
          <source>[TypeFamilies2008]</source>
          <target state="translated">[TypeFamilies2008]</target>
        </trans-unit>
        <trans-unit id="b5891f87311c40fc7e2feb2ed9e6cc0bd4955f76" translate="yes" xml:space="preserve">
          <source>[Vista and later only] The RTS calls the Win32 function &lt;code&gt;CancelSynchronousIo&lt;/code&gt;, which will cause a blocking I/O operation to return with the error &lt;code&gt;ERROR_OPERATION_ABORTED&lt;/code&gt;.</source>
          <target state="translated">[Vista 이상에만 해당] RTS는 Win32 함수 &lt;code&gt;CancelSynchronousIo&lt;/code&gt; 를 호출하여 블로킹 I / O 작업이 오류 &lt;code&gt;ERROR_OPERATION_ABORTED&lt;/code&gt; 와 함께 반환되도록합니다 .</target>
        </trans-unit>
        <trans-unit id="e646f03d1dbd0ea6ebb7f3338bf711149839b070" translate="yes" xml:space="preserve">
          <source>[this is the default setting] Enable only the &amp;ldquo;safe&amp;rdquo; RTS options: (Currently only &lt;code&gt;-?&lt;/code&gt; and &lt;code&gt;--info&lt;/code&gt;.) Any other RTS options on the command line or in the &lt;code&gt;GHCRTS&lt;/code&gt; environment variable causes the program with to abort with an error message.</source>
          <target state="translated">[이것이 기본 설정입니다.] &quot;안전한&quot;RTS 옵션 만 활성화하십시오 : (현재는 &lt;code&gt;-?&lt;/code&gt; 및 &lt;code&gt;--info&lt;/code&gt; ) 명령 줄 또는 &lt;code&gt;GHCRTS&lt;/code&gt; 환경 변수의 다른 RTS 옵션으로 인해 프로그램이 오류와 함께 중단됩니다 메시지.</target>
        </trans-unit>
        <trans-unit id="34cbcaa3ebb2e1b02bbd040476f4a4192d9188e6" translate="yes" xml:space="preserve">
          <source>\( O(1) \). A singleton sequence.</source>
          <target state="translated">\ (O (1) \). 싱글 톤 시퀀스.</target>
        </trans-unit>
        <trans-unit id="3b0d6be93c20b18b6a203f57ca8cdd843632dbbc" translate="yes" xml:space="preserve">
          <source>\( O(1) \). Add an element to the left end of a sequence. Mnemonic: a triangle with the single element at the pointy end.</source>
          <target state="translated">\ (O (1) \). 시퀀스의 왼쪽 끝에 요소를 추가하십시오. 니모닉 : 뾰족한 끝에 단일 요소가있는 삼각형.</target>
        </trans-unit>
        <trans-unit id="e29f0dd89cf4b98d9f9940c595b922a5dd21f994" translate="yes" xml:space="preserve">
          <source>\( O(1) \). Add an element to the right end of a sequence. Mnemonic: a triangle with the single element at the pointy end.</source>
          <target state="translated">\ (O (1) \). 시퀀스의 오른쪽 끝에 요소를 추가하십시오. 니모닉 : 뾰족한 끝에 단일 요소가있는 삼각형.</target>
        </trans-unit>
        <trans-unit id="e2f5fbbdc003ed6b6112958c18acd9b5bad4a569" translate="yes" xml:space="preserve">
          <source>\( O(1) \). Analyse the left end of a sequence.</source>
          <target state="translated">\ (O (1) \). 시퀀스의 왼쪽 끝을 분석합니다.</target>
        </trans-unit>
        <trans-unit id="f32019dd1c2a2c3b992da628e1dbb8fca3a9a405" translate="yes" xml:space="preserve">
          <source>\( O(1) \). Analyse the right end of a sequence.</source>
          <target state="translated">\ (O (1) \). 시퀀스의 오른쪽 끝을 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="7b89d619c376ded4ba8029ab80cbbe273480461c" translate="yes" xml:space="preserve">
          <source>\( O(1) \). Is this the empty sequence?</source>
          <target state="translated">\ (O (1) \). 이것이 빈 순서입니까?</target>
        </trans-unit>
        <trans-unit id="4043cdf48e14bbc7bef8e182dfe108b0e21704e2" translate="yes" xml:space="preserve">
          <source>\( O(1) \). The empty sequence.</source>
          <target state="translated">\ (O (1) \). 빈 시퀀스입니다.</target>
        </trans-unit>
        <trans-unit id="789a94c6e45150494a843083839c99ddbbcbcb8b" translate="yes" xml:space="preserve">
          <source>\( O(1) \). The number of elements in the sequence.</source>
          <target state="translated">\ (O (1) \). 시퀀스의 요소 수</target>
        </trans-unit>
        <trans-unit id="9c9b70cf9a1b94d641385e597a06a4220c6c9d1d" translate="yes" xml:space="preserve">
          <source>\( O(\log n) \). &lt;code&gt;replicate n x&lt;/code&gt; is a sequence consisting of &lt;code&gt;n&lt;/code&gt; copies of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ log n) \). &lt;code&gt;replicate n x&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 의 &lt;code&gt;n&lt;/code&gt; 개 복사본 으로 구성된 시퀀스 입니다.</target>
        </trans-unit>
        <trans-unit id="546ea35cf6dc085674954ee6937f092065e639a0" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:insertAt&quot;&gt;insertAt&lt;/a&gt; i x xs&lt;/code&gt; inserts &lt;code&gt;x&lt;/code&gt; into &lt;code&gt;xs&lt;/code&gt; at the index &lt;code&gt;i&lt;/code&gt;, shifting the rest of the sequence over.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:insertAt&quot;&gt;insertAt&lt;/a&gt; i x xs&lt;/code&gt; 는 인덱스 &lt;code&gt;i&lt;/code&gt; 에서 &lt;code&gt;x&lt;/code&gt; 를 &lt;code&gt;xs&lt;/code&gt; 에 삽입 하여 나머지 시퀀스를 이동시킵니다.</target>
        </trans-unit>
        <trans-unit id="0fe577d234433675e32729fdf0c2bc4f8e4d33da" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). A flipped, infix version of &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 뒤집힌 접미사 버전의 &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f1d705d397309f0a39429659216e4009c9399c0" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). Delete the element of a sequence at a given index. Return the original sequence if the index is out of range.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 주어진 인덱스에서 시퀀스의 요소를 삭제하십시오. 인덱스가 범위를 벗어난 경우 원래 순서를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="5bf003bead51d54a782a3e3daf5bde07395d33e1" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). Elements of a sequence after the first &lt;code&gt;i&lt;/code&gt;. If &lt;code&gt;i&lt;/code&gt; is negative, &lt;code&gt;&lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt; i s&lt;/code&gt; yields the whole sequence. If the sequence contains fewer than &lt;code&gt;i&lt;/code&gt; elements, the empty sequence is returned.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 제 후의 시퀀스의 요소 &lt;code&gt;i&lt;/code&gt; . 경우 &lt;code&gt;i&lt;/code&gt; 부정, &lt;code&gt;&lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt; i s&lt;/code&gt; 시퀀스 전체 수율. 시퀀스에 &lt;code&gt;i&lt;/code&gt; 보다 적은 요소 가 포함 된 경우 빈 시퀀스가 ​​반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ca211904aa96b1bd11aefb66842881538beef91d" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). Replace the element at the specified position. If the position is out of range, the original sequence is returned.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 지정된 위치에서 요소를 교체하십시오. 위치가 범위를 벗어나면 원래 순서가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d2ebe26c5fed5338d546b09c50f90bdfc79c5c59" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). Split a sequence at a given position. &lt;code&gt;&lt;a href=&quot;data-sequence#v:splitAt&quot;&gt;splitAt&lt;/a&gt; i s = (&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt; i s, &lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt; i s)&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 주어진 위치에서 시퀀스를 분할합니다. &lt;code&gt;&lt;a href=&quot;data-sequence#v:splitAt&quot;&gt;splitAt&lt;/a&gt; i s = (&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt; i s, &lt;a href=&quot;data-sequence#v:drop&quot;&gt;drop&lt;/a&gt; i s)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b9982ecf4ad26d9bf2a275e1e35fdb06d9eb20b1" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). The element at the specified position, counting from 0. If the specified position is negative or at least the length of the sequence, &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 지정된 위치의 요소 (0부터 계산). 지정된 위치가 음수이거나 시퀀스 길이 이상인 경우 &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b4d4d2f3cb4b284e3cbd0d7773d4efed269d4097" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). The element at the specified position, counting from 0. If the specified position is negative or at least the length of the sequence, &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 0부터 계산되는 지정된 위치의 요소입니다. 지정된 위치가 음수이거나 적어도 시퀀스 길이 인 경우 &lt;code&gt;&lt;a href=&quot;data-sequence#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="532d131357cc364ae609f962dfa852c5ecc94891" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). The element at the specified position, counting from 0. The argument should thus be a non-negative integer less than the size of the sequence. If the position is out of range, &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; fails with an error.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 지정된 위치에있는 요소 (0부터 계산). 따라서 인수는 시퀀스 크기보다 작은 음이 아닌 정수 여야합니다. 위치가 범위를 벗어나면 오류가 발생하여 &lt;code&gt;&lt;a href=&quot;data-sequence#v:index&quot;&gt;index&lt;/a&gt;&lt;/code&gt; 가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="31957683248c73c401120fd6ad1cf601736552c0" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). The first &lt;code&gt;i&lt;/code&gt; elements of a sequence. If &lt;code&gt;i&lt;/code&gt; is negative, &lt;code&gt;&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt; i s&lt;/code&gt; yields the empty sequence. If the sequence contains fewer than &lt;code&gt;i&lt;/code&gt; elements, the whole sequence is returned.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 시퀀스 의 첫 번째 &lt;code&gt;i&lt;/code&gt; 요소 경우 &lt;code&gt;i&lt;/code&gt; 음, &lt;code&gt;&lt;a href=&quot;data-sequence#v:take&quot;&gt;take&lt;/a&gt; i s&lt;/code&gt; 빈 시퀀스를 얻을 수 있습니다. 시퀀스에 &lt;code&gt;i&lt;/code&gt; 보다 적은 요소 가 포함 된 경우 전체 시퀀스가 ​​반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3751741ea558f6d0bac38a7743eebeac69c91050" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). Update the element at the specified position. If the position is out of range, the original sequence is returned. &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust&quot;&gt;adjust&lt;/a&gt;&lt;/code&gt; can lead to poor performance and even memory leaks, because it does not force the new value before installing it in the sequence. &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust-39-&quot;&gt;adjust'&lt;/a&gt;&lt;/code&gt; should usually be preferred.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 지정된 위치에서 요소를 업데이트하십시오. 위치가 범위를 벗어나면 원래 순서가 반환됩니다. &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust&quot;&gt;adjust&lt;/a&gt;&lt;/code&gt; 는 순서대로 설치하기 전에 새로운 값을 강제하지 않기 때문에 성능 저하 및 메모리 누수로 이어질 수 있습니다. &lt;code&gt;&lt;a href=&quot;data-sequence#v:adjust-39-&quot;&gt;adjust'&lt;/a&gt;&lt;/code&gt; 가 일반적으로 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="899c0369d8a46c9994ff0ff3c2c10f46f7406360" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(i,n-i))) \). Update the element at the specified position. If the position is out of range, the original sequence is returned. The new value is forced before it is installed in the sequence.</source>
          <target state="translated">\ (O (\ log (\ min (i, ni))) \). 지정된 위치에서 요소를 업데이트하십시오. 위치가 범위를 벗어나면 원래 순서가 반환됩니다. 순서대로 설치하기 전에 새 값이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="040c9f3a0d532171b25aefd9fcca6a4a01b60888" translate="yes" xml:space="preserve">
          <source>\( O(\log(\min(n_1,n_2))) \). Concatenate two sequences.</source>
          <target state="translated">\ (O (\ log (\ min (n_1, n_2))) \). 두 개의 시퀀스를 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="06b9733d915a81dc3c5e947c773106d127b1fbcf" translate="yes" xml:space="preserve">
          <source>\( O(\min(n_1,n_2)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; takes two sequences and returns a sequence of corresponding pairs. If one input is short, excess elements are discarded from the right end of the longer sequence.</source>
          <target state="translated">\ (O (\ min (n_1, n_2)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 은 두 개의 시퀀스를 사용하여 해당 쌍의 시퀀스를 반환합니다. 하나의 입력이 짧으면 초과 시퀀스는 긴 시퀀스의 오른쪽 끝에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="b0d0c309376140b35e15a12bd8a45bdb90c7b61c" translate="yes" xml:space="preserve">
          <source>\( O(\min(n_1,n_2)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalizes &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. For example, &lt;code&gt;zipWith (+)&lt;/code&gt; is applied to two sequences to take the sequence of corresponding sums.</source>
          <target state="translated">\ (O (\ min (n_1, n_2)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 는 튜플 링 함수 대신 첫 번째 인수로 제공된 함수로 압축하여 &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 을 일반화 합니다. 예를 들어, &lt;code&gt;zipWith (+)&lt;/code&gt; 는 두 개의 시퀀스에 적용되어 해당 합계의 시퀀스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="dbdb161425b4bae8703cd60a4996961e056d4753" translate="yes" xml:space="preserve">
          <source>\( O(\min(n_1,n_2,n_3)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three sequences and returns a sequence of triples, analogous to &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ min (n_1, n_2, n_3)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; 은 3 개의 시퀀스를 취하여 &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 과 유사한 3 배 시퀀스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eb3b48ecc1f93c5a7b9927fe5999f5b74e5ec5b7" translate="yes" xml:space="preserve">
          <source>\( O(\min(n_1,n_2,n_3)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; takes a function which combines three elements, as well as three sequences and returns a sequence of their point-wise combinations, analogous to &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ min (n_1, n_2, n_3)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith3&quot;&gt;zipWith3&lt;/a&gt;&lt;/code&gt; 은 3 개의 요소와 3 개의 시퀀스를 결합하고 &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 와 유사한 포인트 단위 조합의 시퀀스를 반환하는 함수를 취 합니다.</target>
        </trans-unit>
        <trans-unit id="fa10a5a78855dcba7d813e3ee6a207f58661c276" translate="yes" xml:space="preserve">
          <source>\( O(\min(n_1,n_2,n_3,n_4)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; takes four sequences and returns a sequence of quadruples, analogous to &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ min (n_1, n_2, n_3, n_4)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip4&quot;&gt;zip4&lt;/a&gt;&lt;/code&gt; 는 4 개의 시퀀스를 취하여 &lt;code&gt;&lt;a href=&quot;data-sequence#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; 과 비슷한 네 개의 시퀀스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4390799dddf20a6343ea9646879bb16e7f084e8e" translate="yes" xml:space="preserve">
          <source>\( O(\min(n_1,n_2,n_3,n_4)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; takes a function which combines four elements, as well as four sequences and returns a sequence of their point-wise combinations, analogous to &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (\ min (n_1, n_2, n_3, n_4)) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith4&quot;&gt;zipWith4&lt;/a&gt;&lt;/code&gt; 는 4 개의 요소와 4 개의 시퀀스를 결합하고 &lt;code&gt;&lt;a href=&quot;data-sequence#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; 와 유사한 포인트 단위 조합의 시퀀스를 반환하는 함수를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="854a5f214f7aa4910183ce26158e2621a9a01034" translate="yes" xml:space="preserve">
          <source>\( O(i) \) where \( i \) is the breakpoint index. &lt;code&gt;&lt;a href=&quot;data-sequence#v:breakl&quot;&gt;breakl&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a sequence &lt;code&gt;xs&lt;/code&gt;, returns a pair whose first element is the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and the second element is the remainder of the sequence.</source>
          <target state="translated">\ (O (i) \) 여기서 \ (i \)는 중단 점 색인입니다. 술어 &lt;code&gt;p&lt;/code&gt; 및 시퀀스 &lt;code&gt;xs&lt;/code&gt; 에 적용되는 &lt;code&gt;&lt;a href=&quot;data-sequence#v:breakl&quot;&gt;breakl&lt;/a&gt;&lt;/code&gt; 은 첫 번째 요소가 &lt;code&gt;p&lt;/code&gt; 를&lt;em&gt;만족하지 않는 &lt;/em&gt; &lt;code&gt;xs&lt;/code&gt; 요소 중 가장 긴 접두사 (비어있을 수 있음)이고 두 번째 요소가 나머지 시퀀스 인 쌍을 리턴합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb6c136646637ba26b9e4d03ff183d0f2f7f4e9e" translate="yes" xml:space="preserve">
          <source>\( O(i) \) where \( i \) is the prefix length. &lt;code&gt;&lt;a href=&quot;data-sequence#v:dropWhileL&quot;&gt;dropWhileL&lt;/a&gt; p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileL&quot;&gt;takeWhileL&lt;/a&gt; p xs&lt;/code&gt;.</source>
          <target state="translated">\ (O (i) \) 여기서 \ (i \)는 접두사 길이입니다. &lt;code&gt;&lt;a href=&quot;data-sequence#v:dropWhileL&quot;&gt;dropWhileL&lt;/a&gt; p xs&lt;/code&gt; 반환합니다 후 남아있는 접미사 &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileL&quot;&gt;takeWhileL&lt;/a&gt; p xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cbf309903f09bc7649ddc265c0f3450f702cefc0" translate="yes" xml:space="preserve">
          <source>\( O(i) \) where \( i \) is the prefix length. &lt;code&gt;&lt;a href=&quot;data-sequence#v:spanl&quot;&gt;spanl&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a sequence &lt;code&gt;xs&lt;/code&gt;, returns a pair whose first element is the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and the second element is the remainder of the sequence.</source>
          <target state="translated">\ (O (i) \) 여기서 \ (i \)는 접두사 길이입니다. 술어 &lt;code&gt;p&lt;/code&gt; 및 시퀀스 &lt;code&gt;xs&lt;/code&gt; 에 적용되는 &lt;code&gt;&lt;a href=&quot;data-sequence#v:spanl&quot;&gt;spanl&lt;/a&gt;&lt;/code&gt; 은 첫 번째 요소가 &lt;code&gt;p&lt;/code&gt; 를 만족하는 &lt;code&gt;xs&lt;/code&gt; 의 요소 중 가장 긴 접두사 (비어있을 수 있음)이고 두 번째 요소가 나머지 시퀀스 인 쌍을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="8a5eca9907659b3a43380501559c0f8bf072c551" translate="yes" xml:space="preserve">
          <source>\( O(i) \) where \( i \) is the prefix length. &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileL&quot;&gt;takeWhileL&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a sequence &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">\ (O (i) \) 여기서 \ (i \)는 접두사 길이입니다. &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileL&quot;&gt;takeWhileL&lt;/a&gt;&lt;/code&gt; 는 , 술어에인가 &lt;code&gt;p&lt;/code&gt; 및 시퀀스 &lt;code&gt;xs&lt;/code&gt; 의 (비어) 최장 프리픽스 반환 &lt;code&gt;xs&lt;/code&gt; 충족 된 것을 소자 &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2527991eb02d123ae97e3053f7be92eb76670670" translate="yes" xml:space="preserve">
          <source>\( O(i) \) where \( i \) is the suffix length. &lt;code&gt;&lt;a href=&quot;data-sequence#v:dropWhileR&quot;&gt;dropWhileR&lt;/a&gt; p xs&lt;/code&gt; returns the prefix remaining after &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileR&quot;&gt;takeWhileR&lt;/a&gt; p xs&lt;/code&gt;.</source>
          <target state="translated">\ (O (i) \) 여기서 \ (i \)는 접미사 길이입니다. &lt;code&gt;&lt;a href=&quot;data-sequence#v:dropWhileR&quot;&gt;dropWhileR&lt;/a&gt; p xs&lt;/code&gt; 반환합니다 후에 남아있는 접두사 &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileR&quot;&gt;takeWhileR&lt;/a&gt; p xs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ca86e7d1bc6e9440039fd89da4b54ce4dc1b17ba" translate="yes" xml:space="preserve">
          <source>\( O(i) \) where \( i \) is the suffix length. &lt;code&gt;&lt;a href=&quot;data-sequence#v:spanr&quot;&gt;spanr&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a sequence &lt;code&gt;xs&lt;/code&gt;, returns a pair whose &lt;em&gt;first&lt;/em&gt; element is the longest &lt;em&gt;suffix&lt;/em&gt; (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and the second element is the remainder of the sequence.</source>
          <target state="translated">\ (O (i) \) 여기서 \ (i \)는 접미사 길이입니다. 조건 자 &lt;code&gt;p&lt;/code&gt; 및 시퀀스 &lt;code&gt;xs&lt;/code&gt; 에 적용되는 &lt;code&gt;&lt;a href=&quot;data-sequence#v:spanr&quot;&gt;spanr&lt;/a&gt;&lt;/code&gt; 는 &lt;em&gt;첫 번째&lt;/em&gt; 요소가 &lt;code&gt;p&lt;/code&gt; 를 만족하는 &lt;code&gt;xs&lt;/code&gt; 요소 중 가장 긴 &lt;em&gt;접미사&lt;/em&gt; (비어있을 수 있음)이고 두 번째 요소가 시퀀스의 나머지 부분 인 쌍을 반환합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bcfc88e467626c77e9e30a0a96b1b1973c08c4cc" translate="yes" xml:space="preserve">
          <source>\( O(i) \) where \( i \) is the suffix length. &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileR&quot;&gt;takeWhileR&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a sequence &lt;code&gt;xs&lt;/code&gt;, returns the longest suffix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">\ (O (i) \) 여기서 \ (i \)는 접미사 길이입니다. &lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileR&quot;&gt;takeWhileR&lt;/a&gt;&lt;/code&gt; 는 , 술어에인가 &lt;code&gt;p&lt;/code&gt; 및 시퀀스 &lt;code&gt;xs&lt;/code&gt; 의 (비어) 긴 접미사 반환 &lt;code&gt;xs&lt;/code&gt; 충족 된 것을 소자 &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="89864ca7ad3a975e47d1ac468095d918264767d7" translate="yes" xml:space="preserve">
          <source>\( O(n \log d) \). The &lt;code&gt;nubOrd&lt;/code&gt; function removes duplicate elements from a list. In particular, it keeps only the first occurrence of each element. By using a &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; internally it has better asymptotics than the standard &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">\ (O (n \ log d) \). &lt;code&gt;nubOrd&lt;/code&gt; 의 기능은 목록에서 중복 요소를 제거합니다. 특히 각 요소의 첫 번째 항목 만 유지합니다. 내부적 으로 &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; 을 사용 하면 표준 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 기능 보다 무증상 상태가 됩니다.</target>
        </trans-unit>
        <trans-unit id="77dbb7bcdeacb5504a0ef6cf2f5ee72db2c1bd02" translate="yes" xml:space="preserve">
          <source>\( O(n \log d) \). The &lt;code&gt;nubOrd&lt;/code&gt; function removes duplicate elements from a list. In particular, it keeps only the first occurrence of each element. By using a &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; internally it has better asymptotics than the standard &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">\ (O (n \ log d) \). &lt;code&gt;nubOrd&lt;/code&gt; 의 기능은 목록에서 중복 요소를 제거합니다. 특히 각 요소의 첫 번째 발생 만 유지합니다. 내부적 으로 &lt;code&gt;&lt;a href=&quot;data-set#t:Set&quot;&gt;Set&lt;/a&gt;&lt;/code&gt; 을 사용 하면 표준 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 함수 보다 더 나은 무증상을 보입니다 .</target>
        </trans-unit>
        <trans-unit id="5fe404a925ef3c49842338c60efd96b745d6f3be" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by the natural ordering of its elements. The sort is stable. If stability is not required, &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; can be slightly faster.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 는 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 요소의 자연 순서에 따라 정렬합니다. 정렬이 안정적입니다. 안정성이 필요하지 않으면 &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; 가 약간 더 빠를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1098d943b88eab1e390e5ed0bde58e02fe11a30b" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; according to the specified comparator. The sort is stable. If stability is not required, &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; can be slightly faster.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 는 지정된 비교자를 기준으로 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . 정렬이 안정적입니다. 안정성이 필요하지 않은 경우 &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; 가 약간 더 빠를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="783b6fa9efe8b0aacee689453492ec1f64175be9" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; 와 동일하지만 입력 목록의 각 요소에 대해 &lt;code&gt;f&lt;/code&gt; 를 한 번만 평가하는 성능 이점이 있습니다. 이를 데코레이션-소트-데코레이션 해제 패러다임 또는 슈바르츠 식 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="dd5b729298fbee668ec8a880b8bbf7694c81ab2d" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; 동등 &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; , 오직 평가의 성능 이점을 갖는다 &lt;code&gt;f&lt;/code&gt; 입력리스트의 각 요소를 한번. 이를 장식-정렬-비 장식 패러다임 또는 Schwartzian 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="76919fecc6589c311cc2f157b3a6e318f7753a16" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by the natural ordering of its elements, but the sort is not stable. This algorithm is frequently faster and uses less memory than &lt;code&gt;&lt;a href=&quot;data-sequence#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; 는 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 요소의 자연 순서에 따라 정렬하지만 정렬이 안정적이지 않습니다. 이 알고리즘은 종종 더 빠르며 &lt;code&gt;&lt;a href=&quot;data-sequence#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 보다 적은 메모리를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="9085dac0a56339479accab8408ea49a6a539f2cb" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; 동등 &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; , 오직 평가의 성능 이점을 갖는다 &lt;code&gt;f&lt;/code&gt; 입력리스트의 각 요소를 한번. 이를 데코레이션-소트-데코레이션 해제 패러다임 또는 슈바르츠 식 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="7a75f512d7ba326f341d19f6a0cb353e820eb396" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; 와 동일하지만 입력 목록의 각 요소에 대해 &lt;code&gt;f&lt;/code&gt; 를 한 번만 평가하는 성능 이점이 있습니다. 이를 장식-정렬-비 장식 패러다임 또는 Schwartzian 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="20373e1ed680ebc14f4b07924b5b470cc33402e5" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by the natural ordering of its elements. The sort is stable. If stability is not required, &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; can be slightly faster.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 는 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 요소의 자연 순서에 따라 정렬합니다. 정렬이 안정적입니다. 안정성이 필요하지 않으면 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; 가 약간 더 빠를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0eccdd8235b36a805ffa872f4e21e6f3de43dfa9" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; according to the specified comparator. The sort is stable. If stability is not required, &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; can be slightly faster.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 는 지정된 비교자를 기준으로 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . 정렬이 안정적입니다. 안정성이 필요하지 않은 경우 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; 가 약간 더 빠를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72a13ba7d54627091e4ede4aa6ae6a602d067ef1" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; 와 동일하지만 입력 목록의 각 요소에 대해 &lt;code&gt;f&lt;/code&gt; 를 한 번만 평가하는 성능 이점이 있습니다. 이를 데코레이션-소트-데코레이션 해제 패러다임 또는 슈바르츠 식 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="7753c3a048f9c8faf7bca750396f1ef7c209569b" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortOn&quot;&gt;sortOn&lt;/a&gt; f&lt;/code&gt; 동등 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; , 오직 평가의 성능 이점을 갖는다 &lt;code&gt;f&lt;/code&gt; 입력리스트의 각 요소를 한번. 이를 장식-정렬-비 장식 패러다임 또는 Schwartzian 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="7788d5dd9362fea81aef704f1b25c424829d973e" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by the natural ordering of its elements, but the sort is not stable. This algorithm is frequently faster and uses less memory than &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; 는 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 요소의 자연 순서에 따라 정렬하지만 정렬이 안정적이지 않습니다. 이 알고리즘은 종종 더 빠르며 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 보다 적은 메모리를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="923bbcdf6473777345bf3471e264e87c7325e7e1" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; 동등 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.13.0.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; , 오직 평가의 성능 이점을 갖는다 &lt;code&gt;f&lt;/code&gt; 입력리스트의 각 요소를 한번. 이를 데코레이션-소트-데코레이션 해제 패러다임 또는 슈바르츠 식 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="1626966051459fb3709cd1435e0670a0dbe0a5a9" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; sorts the specified &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; by comparing the results of a key function applied to each element. &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt;, but has the performance advantage of only evaluating &lt;code&gt;f&lt;/code&gt; once for each element in the input list. This is called the decorate-sort-undecorate paradigm, or Schwartzian transform.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt;&lt;/code&gt; 은 각 요소에 적용된 키 함수의 결과를 비교 하여 지정된 &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 정렬합니다 . &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortOn&quot;&gt;unstableSortOn&lt;/a&gt; f&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt; (&lt;a href=&quot;../base-4.14.1.0/data-ord#v:compare&quot;&gt;compare&lt;/a&gt; &lt;a href=&quot;../base-4.14.1.0/data-function#v:on&quot;&gt;`on`&lt;/a&gt; f)&lt;/code&gt; 와 동일하지만 입력 목록의 각 요소에 대해 &lt;code&gt;f&lt;/code&gt; 를 한 번만 평가하는 성능 이점이 있습니다. 이를 장식-정렬-비 장식 패러다임 또는 Schwartzian 변환이라고합니다.</target>
        </trans-unit>
        <trans-unit id="8c993d7ee2b9e07347303a1bfa6fbe29b0033e24" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). A generalization of &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; takes an arbitrary comparator and sorts the specified sequence. The sort is not stable. This algorithm is frequently faster and uses less memory than &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-sequence#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; 의 일반화 는 임의의 비교기를 사용하여 지정된 순서를 정렬합니다. 정렬이 안정적이지 않습니다. 이 알고리즘은 종종 &lt;code&gt;&lt;a href=&quot;data-sequence#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 보다 빠르며 더 적은 메모리를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="5c91e61a22ccef5e854b0115e7bae5f82a0d4e39" translate="yes" xml:space="preserve">
          <source>\( O(n \log n) \). A generalization of &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; takes an arbitrary comparator and sorts the specified sequence. The sort is not stable. This algorithm is frequently faster and uses less memory than &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\ (O (n \ log n) \). &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSort&quot;&gt;unstableSort&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:unstableSortBy&quot;&gt;unstableSortBy&lt;/a&gt;&lt;/code&gt; 의 일반화 는 임의의 비교기를 사용하여 지정된 순서를 정렬합니다. 정렬이 안정적이지 않습니다. 이 알고리즘은 종종 &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; 보다 빠르며 더 적은 메모리를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="930890d550afe6b5871128789424f2ee5f748526" translate="yes" xml:space="preserve">
          <source>\( O(n \min(d,W)) \). The &lt;code&gt;nubInt&lt;/code&gt; function removes duplicate &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; values from a list. In particular, it keeps only the first occurrence of each element. By using an &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; internally, it attains better asymptotics than the standard &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">\ (O (n \ 분 (d, W)) \). &lt;code&gt;nubInt&lt;/code&gt; 의 기능들을 제거 중복 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 목록에서 값을. 특히 각 요소의 첫 번째 항목 만 유지합니다. 내부적 으로 &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; 을 사용하면 표준 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 함수 보다 더 나은 무증상 을 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="c1a5d9655deddf9d1b59afeca8f46744a66f38b7" translate="yes" xml:space="preserve">
          <source>\( O(n \min(d,W)) \). The &lt;code&gt;nubInt&lt;/code&gt; function removes duplicate &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; values from a list. In particular, it keeps only the first occurrence of each element. By using an &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; internally, it attains better asymptotics than the standard &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">\ (O (n \ min (d, W)) \). &lt;code&gt;nubInt&lt;/code&gt; 의 기능들을 제거 중복 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 목록에서 값을. 특히 각 요소의 첫 번째 발생 만 유지합니다. 내부적 으로 &lt;code&gt;&lt;a href=&quot;data-intset#t:IntSet&quot;&gt;IntSet&lt;/a&gt;&lt;/code&gt; 를 사용하면 표준 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-list#v:nub&quot;&gt;nub&lt;/a&gt;&lt;/code&gt; 함수 보다 더 나은 무증상을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="603349967cf31a7e7a62cb16fea5e3004150cc9a" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Constructs a sequence by repeated application of a function to a seed value.</source>
          <target state="translated">\( 의 위에) \). 시드 값에 함수를 반복 적용하여 시퀀스를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="e68f82855a00f85773c90f1119ff0dc9a7c9916f" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Convert a given sequence length and a function representing that sequence into a sequence.</source>
          <target state="translated">\( 의 위에) \). 주어진 시퀀스 길이와 해당 시퀀스를 나타내는 함수를 시퀀스로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="28abf92fc465e3c6920cbdd18d990aa00bd50bda" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Create a sequence consisting of the elements of an &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt;. Note that the resulting sequence elements may be evaluated lazily (as on GHC), so you must force the entire structure to be sure that the original array can be garbage-collected.</source>
          <target state="translated">\( 의 위에) \). &lt;code&gt;&lt;a href=&quot;../array-0.5.4.0/data-array#t:Array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; 요소로 구성된 시퀀스를 만듭니다 . 결과 시퀀스 요소는 GHC에서와 같이 느리게 평가 될 수 있으므로 원래 배열을 가비지 수집 할 수 있도록 전체 구조를 강제로 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="c7cdb9801d2d28c4375010fb1f7c0579b09caa2d" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Create a sequence from a finite list of elements. There is a function &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; in the opposite direction for all instances of the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; class, including &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\( 의 위에) \). 유한 요소 목록에서 시퀀스를 만듭니다. &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 포함 하여 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; 클래스 의 모든 인스턴스에 대해 반대 방향으로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; 하는 함수가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69a0fce5498890ae28d63d4fde0c7bd1e787e9c0" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Create a sequence from a finite list of elements. There is a function &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; in the opposite direction for all instances of the &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; class, including &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">\( 의 위에) \). 유한 요소 목록에서 시퀀스를 만듭니다. &lt;code&gt;&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt;&lt;/code&gt; 를 포함 하여 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#t:Foldable&quot;&gt;Foldable&lt;/a&gt;&lt;/code&gt; 클래스 의 모든 인스턴스에 대해 반대 방향으로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/data-foldable#v:toList&quot;&gt;toList&lt;/a&gt;&lt;/code&gt; 함수가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1dbfa82306b38fbfc581f7b62fe7f6936fc85d5d" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Intersperse an element between the elements of a sequence.</source>
          <target state="translated">\( 의 위에) \). 시퀀스의 요소 사이에 요소를 산재합니다.</target>
        </trans-unit>
        <trans-unit id="eb33857f95e6abd9b8e92b965742544d371251b4" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Returns a sequence of all prefixes of this sequence, shortest first. For example,</source>
          <target state="translated">\( 의 위에) \). 이 시퀀스의 모든 접두사 시퀀스를 가장 짧은 순서로 반환합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="e9bb88e43721f0ad090dd3079c9ab2d4f7f5e33e" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Returns a sequence of all suffixes of this sequence, longest first. For example,</source>
          <target state="translated">\( 의 위에) \). 이 시퀀스의 모든 접미사 시퀀스를 가장 긴 순서로 반환합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="d22fb3ce0a67f04fdebb29f7e29e9664003f24cc" translate="yes" xml:space="preserve">
          <source>\( O(n) \). The &lt;code&gt;&lt;a href=&quot;data-sequence#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; function takes a predicate &lt;code&gt;p&lt;/code&gt; and a sequence &lt;code&gt;xs&lt;/code&gt; and returns a sequence of those elements which satisfy the predicate.</source>
          <target state="translated">\( 의 위에) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:filter&quot;&gt;filter&lt;/a&gt;&lt;/code&gt; 함수 술어 얻어 &lt;code&gt;p&lt;/code&gt; 및 시퀀스 &lt;code&gt;xs&lt;/code&gt; 술어를 만족하는 요소의 순서를 리턴한다.</target>
        </trans-unit>
        <trans-unit id="95c6f2c5a83a628e74aa5f06545408e2cd588fd6" translate="yes" xml:space="preserve">
          <source>\( O(n) \). The &lt;code&gt;&lt;a href=&quot;data-sequence#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; function takes a predicate &lt;code&gt;p&lt;/code&gt; and a sequence &lt;code&gt;xs&lt;/code&gt; and returns sequences of those elements which do and do not satisfy the predicate.</source>
          <target state="translated">\( 의 위에) \). &lt;code&gt;&lt;a href=&quot;data-sequence#v:partition&quot;&gt;partition&lt;/a&gt;&lt;/code&gt; 기능 술어 걸리는 &lt;code&gt;p&lt;/code&gt; 과 시퀀스 &lt;code&gt;xs&lt;/code&gt; 않으며 술어를 만족시키지 않는 요소의 복귀 시퀀스.</target>
        </trans-unit>
        <trans-unit id="7d2552d02625413aa29e21b7cef52458a7ad4167" translate="yes" xml:space="preserve">
          <source>\( O(n) \). The reverse of a sequence.</source>
          <target state="translated">\( 의 위에) \). 시퀀스의 반대입니다.</target>
        </trans-unit>
        <trans-unit id="ef7cfa6738484ccd222c60ae3aef6fc4d639c58e" translate="yes" xml:space="preserve">
          <source>\( O(n) \). Unzip a sequence using a function to divide elements.</source>
          <target state="translated">\( 의 위에) \). 함수를 사용하여 요소를 나누는 시퀀스를 압축 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="652ee9de3d79897676915fbdfd5346a4ef2470da" translate="yes" xml:space="preserve">
          <source>\(IY\) is strictly more specific than \(IX\). That is, \(IY\) is a substitution instance of \(IX\) but not vice versa.</source>
          <target state="translated">\ (IY \)는 \ (IX \)보다 엄격합니다. 즉, \ (IY \)는 \ (IX \)의 대체 인스턴스이지만 그 반대도 아닙니다.</target>
        </trans-unit>
        <trans-unit id="b689d73e7c786fd5b31eb51ed9d31a3f7d6ae37b" translate="yes" xml:space="preserve">
          <source>\(O \Bigl(\bigl(\frac{n}{c}\bigr) \log c\Bigr)\). &lt;code&gt;chunksOf c xs&lt;/code&gt; splits &lt;code&gt;xs&lt;/code&gt; into chunks of size &lt;code&gt;c&amp;gt;0&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; does not divide the length of &lt;code&gt;xs&lt;/code&gt; evenly, then the last element of the result will be short.</source>
          <target state="translated">\ (O \ Bigl (\ bigl (\ frac {n} {c} \ bigr) \ log c \ Bigr) \). &lt;code&gt;chunksOf c xs&lt;/code&gt; 청크 &lt;code&gt;xs&lt;/code&gt; 를 &lt;code&gt;c&amp;gt;0&lt;/code&gt; 크기의 청크로 나눕니다 . 경우 &lt;code&gt;c&lt;/code&gt; 길이 나누지 &lt;code&gt;xs&lt;/code&gt; 고르게, 결과의 마지막 요소는 단락 될 것이다.</target>
        </trans-unit>
        <trans-unit id="5e6f80a34a9798cafc6a5db96cc57ba4c4db59c2" translate="yes" xml:space="preserve">
          <source>^</source>
          <target state="translated">^</target>
        </trans-unit>
        <trans-unit id="600e600a68a149108f159e39fce17366d56fc4e6" translate="yes" xml:space="preserve">
          <source>_ &lt;a href=&quot;data-type-equality#t:-61--61-&quot;&gt;==&lt;/a&gt; _ = '&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;</source>
          <target state="translated">_ &lt;a href=&quot;data-type-equality#t:-61--61-&quot;&gt;==&lt;/a&gt; _ = ' &lt;a href=&quot;data-bool#v:False&quot;&gt;거짓&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="81245c14fa4af0f8aca817f3aac71e3856bb2e1a" translate="yes" xml:space="preserve">
          <source>_open_osfhandle</source>
          <target state="translated">_open_osfhandle</target>
        </trans-unit>
        <trans-unit id="8022fc62249fb25428a03d36552b9662db865b9c" translate="yes" xml:space="preserve">
          <source>a 32-bit floating point number</source>
          <target state="translated">32 비트 부동 소수점 숫자</target>
        </trans-unit>
        <trans-unit id="25484eb33e4ca7fa03af08f774aeade1c4ee2d63" translate="yes" xml:space="preserve">
          <source>a 64-bit floating point number</source>
          <target state="translated">64 비트 부동 소수점 숫자</target>
        </trans-unit>
        <trans-unit id="495a1fe000be6a5008ec4d1eb84e2a1d5d084889" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-bool#t:-124--124-&quot;&gt;||&lt;/a&gt; '&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; = a</source>
          <target state="translated">&lt;a href=&quot;data-type-bool#t:-124--124-&quot;&gt;|| &lt;/a&gt;' &lt;a href=&quot;data-bool#v:False&quot;&gt;거짓&lt;/a&gt; = a</target>
        </trans-unit>
        <trans-unit id="1048dece3526da535f415f1622b9e7f4b2a0f838" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-bool#t:-124--124-&quot;&gt;||&lt;/a&gt; '&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; = '&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;data-type-bool#t:-124--124-&quot;&gt;|| &lt;/a&gt;' &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; =' &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d8d742293ecc54e41ac09b51fa2b2c86cd8c0847" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-bool#t:-124--124-&quot;&gt;||&lt;/a&gt; a = a</source>
          <target state="translated">&lt;a href=&quot;data-type-bool#t:-124--124-&quot;&gt;|| &lt;/a&gt;a = a</target>
        </trans-unit>
        <trans-unit id="dfc3eece5d5fbbfb2557fdd2f1a0de5ec1613686" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-bool#t:-38--38-&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt; '&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; = '&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;data-type-bool#t:-38--38-&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt; ' &lt;a href=&quot;data-bool#v:False&quot;&gt;거짓&lt;/a&gt; =' &lt;a href=&quot;data-bool#v:False&quot;&gt;거짓&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="01ba601786bc77082f70fd3b2a119e6f137598d1" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-bool#t:-38--38-&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt; '&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; = a</source>
          <target state="translated">&lt;a href=&quot;data-type-bool#t:-38--38-&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt; ' &lt;a href=&quot;data-bool#v:True&quot;&gt;진정한&lt;/a&gt; = A</target>
        </trans-unit>
        <trans-unit id="db482d5c52f88bf9c927868acddf21f43b80bd3f" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-bool#t:-38--38-&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt; a = a</source>
          <target state="translated">a &lt;a href=&quot;data-type-bool#t:-38--38-&quot;&gt;&amp;amp;&amp;amp;&lt;/a&gt; a = a</target>
        </trans-unit>
        <trans-unit id="46a1e8ea1de968dcf4615a18bb4b53b696036bd4" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="2784769421385712bd50e00b7541bc81e814f56a" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="f867947542827acc0d2ea8e0082554ae2d9a293e" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;ghc-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="abf8e156382601d33ab4309b568c53d2699611e4" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="0375fef85fb75ec4eaea1233da0a84c6a11f70eb" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="04456549f2a5abfaa433721a9e4d30e8a18a7b88" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="a89d1de959bd2ba9abd9673e63ea6a45b095b5bd" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="5ce73f6cfcb9fe04f1a9c2ebf0e845f07785c1c6" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="027733db5bec3026113257962749176c09fed167" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="36b1d286e77dd08402089dc786c5d6751384d91a" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;prelude#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="16c734ad064a036a3668c749c7ed15b1c82c32e7" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="8e9dc88d9d6b9dc3f6810c3cb75f9b31968412fb" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="b047af46bc432fe3a62a3c51785c13516dfb1285" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126--126-:&quot;&gt;:~~:&lt;/a&gt; b)</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-126--126-&quot;&gt;~~&lt;/a&gt; b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126--126-:&quot;&gt;: ~~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="66da0a7f93a9faeeee0de1ce9988147838ae30bc" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;data-type-equality#t:-61--61-&quot;&gt;==&lt;/a&gt; a = '&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;</source>
          <target state="translated">a &lt;a href=&quot;data-type-equality#t:-61--61-&quot;&gt;==&lt;/a&gt; a = ' &lt;a href=&quot;data-bool#v:True&quot;&gt;참&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e53f9d6aefd63368970fd8b1c03f48b2146d52ae" translate="yes" xml:space="preserve">
          <source>a &lt;a id=&quot;v::-124-&quot;&gt;:|&lt;/a&gt; [a] infixr 5</source>
          <target state="translated">&lt;a id=&quot;v::-124-&quot;&gt;: | &lt;/a&gt;[a] 인 펜서 5</target>
        </trans-unit>
        <trans-unit id="c09b5ca0ab45efbf368c8f883aaeb643f25da75f" translate="yes" xml:space="preserve">
          <source>a &lt;a id=&quot;v::-60-&quot;&gt;:&amp;lt;&lt;/a&gt; (&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a) infixr 5</source>
          <target state="translated">a &lt;a id=&quot;v::-60-&quot;&gt;: &amp;lt;&lt;/a&gt; ( &lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a) 인 펜서 5</target>
        </trans-unit>
        <trans-unit id="4366d8309e6c4a93d2e6f9fac58abf7190d747db" translate="yes" xml:space="preserve">
          <source>a SIMD vector type</source>
          <target state="translated">SIMD 벡터 타입</target>
        </trans-unit>
        <trans-unit id="2c60a8948409326587e2d80c0533c0b2ba526f53" translate="yes" xml:space="preserve">
          <source>a buffer (whose length may be zero).</source>
          <target state="translated">버퍼 (길이가 0 일 수 있음)</target>
        </trans-unit>
        <trans-unit id="6aba5037454fcbe2497a45a925a7bf0909281177" translate="yes" xml:space="preserve">
          <source>a constant function, returning the lowest and highest values the exponent may assume</source>
          <target state="translated">지수 함수가 가정 할 수있는 가장 낮은 값과 가장 높은 값을 반환하는 상수 함수</target>
        </trans-unit>
        <trans-unit id="5b9c7de41a1536a2cf821f605e86c2793f6bd4c5" translate="yes" xml:space="preserve">
          <source>a constant function, returning the number of digits of &lt;code&gt;&lt;a href=&quot;ghc-float#v:floatRadix&quot;&gt;floatRadix&lt;/a&gt;&lt;/code&gt; in the significand</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-float#v:floatRadix&quot;&gt;floatRadix&lt;/a&gt;&lt;/code&gt; 에 floatRadix 의 자릿수를 리턴하는 상수 함수</target>
        </trans-unit>
        <trans-unit id="cde248066dbb28c999a2778ce818e55f0128d213" translate="yes" xml:space="preserve">
          <source>a constant function, returning the number of digits of &lt;code&gt;&lt;a href=&quot;prelude#v:floatRadix&quot;&gt;floatRadix&lt;/a&gt;&lt;/code&gt; in the significand</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;prelude#v:floatRadix&quot;&gt;floatRadix&lt;/a&gt;&lt;/code&gt; 에 floatRadix 의 자릿수를 리턴하는 상수 함수</target>
        </trans-unit>
        <trans-unit id="a633e2dd8b55ec1e8c7eb858ebb8fa756f27e31c" translate="yes" xml:space="preserve">
          <source>a constant function, returning the radix of the representation (often &lt;code&gt;2&lt;/code&gt;)</source>
          <target state="translated">상수의 함수로 표현의 기수를 돌려줍니다 (종종 &lt;code&gt;2&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="2d112c21b644b5118250a8a70b2538ed21ba15e3" translate="yes" xml:space="preserve">
          <source>a decoding error, if the input begins with an invalid byte sequence in this Handle's encoding.</source>
          <target state="translated">입력이이 Handle 인코딩에서 유효하지 않은 바이트 시퀀스로 시작하는 경우 디코딩 오류</target>
        </trans-unit>
        <trans-unit id="13d51f2874011f80c0fda1c8dd64f87141fd6f14" translate="yes" xml:space="preserve">
          <source>a default value</source>
          <target state="translated">기본값</target>
        </trans-unit>
        <trans-unit id="efc6e377ad13780bc21173cedd26de2bc7744fdb" translate="yes" xml:space="preserve">
          <source>a function converting a valid digit character to an &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">유효한 숫자를 &lt;code&gt;&lt;a href=&quot;data-int#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; 로 변환하는 함수</target>
        </trans-unit>
        <trans-unit id="64e5fba578c7d1891365516501058a16fc9e7609" translate="yes" xml:space="preserve">
          <source>a function that can show unsigned values</source>
          <target state="translated">부호없는 값을 표시 할 수있는 함수</target>
        </trans-unit>
        <trans-unit id="4ad166b7834c36795a4fe596e5997879628c7a69" translate="yes" xml:space="preserve">
          <source>a handler for errors in the inner computation</source>
          <target state="translated">내부 계산의 오류 처리기</target>
        </trans-unit>
        <trans-unit id="c3c5aa9d0619cb64fabfcd8bc2312b400a6ca3c8" translate="yes" xml:space="preserve">
          <source>a handler for exceptions in the inner computation</source>
          <target state="translated">내부 계산의 예외 처리기</target>
        </trans-unit>
        <trans-unit id="e9b3db5689251b32a019d1c409373cee04ec49ff" translate="yes" xml:space="preserve">
          <source>a list of &lt;em&gt;associations&lt;/em&gt; of the form (&lt;em&gt;index&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;). Typically, this list will be expressed as a comprehension. An association &lt;code&gt;(i, x)&lt;/code&gt; defines the value of the array at index &lt;code&gt;i&lt;/code&gt; to be &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">양식 의 &lt;em&gt;연관&lt;/em&gt; 목록 ( &lt;em&gt;index&lt;/em&gt; , &lt;em&gt;value&lt;/em&gt; ) 일반적으로이 목록은 이해도로 표현됩니다. 연관 &lt;code&gt;(i, x)&lt;/code&gt; 인덱스 어레이 값을 정의 &lt;code&gt;i&lt;/code&gt; 될 &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1838769c938ccda3c38c195704df00e6f8f9cac3" translate="yes" xml:space="preserve">
          <source>a list of declarations at top level; the spliced expression must have type &lt;code&gt;Q [Dec]&lt;/code&gt;</source>
          <target state="translated">최상위 수준의 선언 목록; 스 플라이 싱 된 표현식의 유형은 &lt;code&gt;Q [Dec]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c84a8e03c639e4b99b736533f6ce0d75c3d436cc" translate="yes" xml:space="preserve">
          <source>a nested BCO</source>
          <target state="translated">중첩 된 BCO</target>
        </trans-unit>
        <trans-unit id="dacf656c29af63ede7d5a66eb4c195cb7d68d27c" translate="yes" xml:space="preserve">
          <source>a nonempty subtree present only in the first map is passed to &lt;code&gt;only1&lt;/code&gt; and the output is added to the result;</source>
          <target state="translated">첫 번째 맵에서 비어 있지 않은 서브 트리 존재에 전달 &lt;code&gt;only1&lt;/code&gt; 과 출력 결과에 부가되고;</target>
        </trans-unit>
        <trans-unit id="9431cc2ffae3083c6fd4eb94123849e01bcd09de" translate="yes" xml:space="preserve">
          <source>a nonempty subtree present only in the second map is passed to &lt;code&gt;only2&lt;/code&gt; and the output is added to the result.</source>
          <target state="translated">단지 제 맵에서 비어 있지 않은 서브 트리 존재에 전달 &lt;code&gt;only2&lt;/code&gt; 상기 출력 결과에 부가된다.</target>
        </trans-unit>
        <trans-unit id="b079c712d0fda010c398b8b4fc564c5d93d60fd1" translate="yes" xml:space="preserve">
          <source>a pair of &lt;em&gt;bounds&lt;/em&gt;, each of the index type of the array. These bounds are the lowest and highest indices in the array, in that order. For example, a one-origin vector of length &lt;code&gt;10&lt;/code&gt; has bounds &lt;code&gt;(1,10)&lt;/code&gt;, and a one-origin &lt;code&gt;10&lt;/code&gt; by &lt;code&gt;10&lt;/code&gt; matrix has bounds &lt;code&gt;((1,1),(10,10))&lt;/code&gt;.</source>
          <target state="translated">배열의 인덱스 타입 의 &lt;em&gt;범위&lt;/em&gt; 의 &lt;em&gt;경계 &lt;/em&gt;이 범위는 순서대로 배열에서 가장 낮고 가장 높은 지수입니다. 예를 들어 길이가 &lt;code&gt;10&lt;/code&gt; 인 1- 원점 벡터 에는 범위 &lt;code&gt;(1,10)&lt;/code&gt; 이 있고 원-원점 &lt;code&gt;10&lt;/code&gt; x &lt;code&gt;10&lt;/code&gt; 행렬에는 범위가 &lt;code&gt;((1,1),(10,10))&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba8e826714a73899830f6ab608075ff579906dbb" translate="yes" xml:space="preserve">
          <source>a pattern; the spliced pattern must have type &lt;code&gt;Q Pat&lt;/code&gt;</source>
          <target state="translated">패턴; 접합 패턴은 &lt;code&gt;Q Pat&lt;/code&gt; 유형이어야합니다.</target>
        </trans-unit>
        <trans-unit id="73059a8046b1c205b18c2f7d1b925674ed55a915" translate="yes" xml:space="preserve">
          <source>a pre-existing chunks of data represented by a strict &lt;code&gt;ByteString&lt;/code&gt;</source>
          <target state="translated">엄격한 &lt;code&gt;ByteString&lt;/code&gt; 으로 표시되는 기존 데이터 청크</target>
        </trans-unit>
        <trans-unit id="12724a459ab10a8829360de4d06541b3e47dba30" translate="yes" xml:space="preserve">
          <source>a predicate distinguishing valid digits in this base</source>
          <target state="translated">이 기본에서 유효한 숫자를 구별하는 술어</target>
        </trans-unit>
        <trans-unit id="c68f4a2495d7173548e9a09cb2324b41dff54f59" translate="yes" xml:space="preserve">
          <source>a relative path that is appended to the path</source>
          <target state="translated">경로에 추가 된 상대 경로</target>
        </trans-unit>
        <trans-unit id="8fed21137ffe5d0c7090ea916a8c3a6106462526" translate="yes" xml:space="preserve">
          <source>a relative path that is appended to the path; if empty, the base path is returned</source>
          <target state="translated">경로에 추가 된 상대 경로; 비어 있으면 기본 경로가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="02e6f3d317a5b730213d444073c4a9d995df7da7" translate="yes" xml:space="preserve">
          <source>a restricted append-only version of a state monad transformer or</source>
          <target state="translated">상태 모나드 변환기의 제한된 추가 전용 버전 또는</target>
        </trans-unit>
        <trans-unit id="00cd8647e896b38e11fdde37050fe414990bbb27" translate="yes" xml:space="preserve">
          <source>a simplified AST</source>
          <target state="translated">단순화 된 AST</target>
        </trans-unit>
        <trans-unit id="0f5ca64142ff0bb325d5429f5831baee94016b9b" translate="yes" xml:space="preserve">
          <source>a standard &lt;code&gt;&lt;a href=&quot;data-functor-classes#t:Read1&quot;&gt;Read1&lt;/a&gt;&lt;/code&gt; instance may be defined as</source>
          <target state="translated">표준 &lt;code&gt;&lt;a href=&quot;data-functor-classes#t:Read1&quot;&gt;Read1&lt;/a&gt;&lt;/code&gt; 인스턴스는 다음과 같이 정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af4e0527aa2daaff6ce8c67a4930a298ed4dbc12" translate="yes" xml:space="preserve">
          <source>a string describing the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, e.g. the file path for a file. Used in error messages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt; 을 설명하는 문자열 ( 예 : 파일의 파일 경로) 오류 메시지에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="32ae1817dace426c93d098fe2524e0f3abe3aa1a" translate="yes" xml:space="preserve">
          <source>a string literal denoting a common prefix to be added to the returned completion candidates.</source>
          <target state="translated">리턴 된 완료 후보에 추가 될 공통 접 두부를 나타내는 문자열 리터럴</target>
        </trans-unit>
        <trans-unit id="654558a0452dc0b9f151efdec13bb4d9e7dd1b7f" translate="yes" xml:space="preserve">
          <source>a string that can be passed to &lt;code&gt;&lt;a href=&quot;system-io#v:mkTextEncoding&quot;&gt;mkTextEncoding&lt;/a&gt;&lt;/code&gt; to create an equivalent &lt;code&gt;&lt;a href=&quot;ghc-io-encoding#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">에 전달 될 수있는 문자열 &lt;code&gt;&lt;a href=&quot;system-io#v:mkTextEncoding&quot;&gt;mkTextEncoding&lt;/a&gt;&lt;/code&gt; 은 동등한 만들 수 &lt;code&gt;&lt;a href=&quot;ghc-io-encoding#t:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="b85621828f70ac37a526068e8083c87be9c3be28" translate="yes" xml:space="preserve">
          <source>a suffix of &lt;code&gt;//IGNORE&lt;/code&gt;, e.g. &lt;code&gt;UTF-8//IGNORE&lt;/code&gt;, will cause all illegal sequences on input to be ignored, and on output will drop all code points that have no representation in the target encoding.</source>
          <target state="translated">&lt;code&gt;//IGNORE&lt;/code&gt; 접미어 ( 예 : &lt;code&gt;UTF-8//IGNORE&lt;/code&gt; )는 입력시 모든 잘못된 시퀀스를 무시하고 출력시 대상 인코딩에 표시되지 않은 모든 코드 포인트를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="c776055d334ae6a629010d30b766a23c8aa3fde8" translate="yes" xml:space="preserve">
          <source>a suffix of &lt;code&gt;//ROUNDTRIP&lt;/code&gt; will use a PEP383-style escape mechanism to represent any invalid bytes in the input as Unicode codepoints (specifically, as lone surrogates, which are normally invalid in UTF-32). Upon output, these special codepoints are detected and turned back into the corresponding original byte.</source>
          <target state="translated">&lt;code&gt;//ROUNDTRIP&lt;/code&gt; 접미사는 PEP383 스타일 이스케이프 메커니즘을 사용하여 입력의 유효하지 않은 바이트를 유니 코드 코드 포인트 (특히 UTF-32에서는 일반적으로 유효하지 않은 고독한 대리자로 표시)로 표시합니다. 출력시 이러한 특수 코드 포인트가 감지되고 해당 원래 바이트로 다시 전환됩니다.</target>
        </trans-unit>
        <trans-unit id="8e864fd0038b9dc298144ef97f622ae11f451d8b" translate="yes" xml:space="preserve">
          <source>a suffix of &lt;code&gt;//TRANSLIT&lt;/code&gt; will choose a replacement character for illegal sequences or code points.</source>
          <target state="translated">&lt;code&gt;//TRANSLIT&lt;/code&gt; 접미사는 잘못된 시퀀스 또는 코드 포인트의 대체 문자를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="3397cb671916c002d3ff115ddde37cc1a14cdaba" translate="yes" xml:space="preserve">
          <source>a suitable instance would be</source>
          <target state="translated">적절한 예는</target>
        </trans-unit>
        <trans-unit id="d80c6eecdcbcce1a1bc8b7bef1f178ffa9e415f5" translate="yes" xml:space="preserve">
          <source>a type variable that names the result of a type family. Syntax: &lt;code&gt;= tyvar&lt;/code&gt; or &lt;code&gt;= (tyvar :: kind)&lt;/code&gt;. The type variable must be fresh.</source>
          <target state="translated">유형 패밀리의 결과를 명명하는 유형 변수. 구문 : &lt;code&gt;= tyvar&lt;/code&gt; 또는 &lt;code&gt;= (tyvar :: kind)&lt;/code&gt; . 유형 변수는 신선해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd9d6630c224794540c3f07f3de17df1e2d88d75" translate="yes" xml:space="preserve">
          <source>a type variable that names the result of a type family. Syntax: &lt;code&gt;= tyvar&lt;/code&gt; or &lt;code&gt;= (tyvar :: kind)&lt;/code&gt;. Type variable must be fresh.</source>
          <target state="translated">타입 패밀리의 결과를 명명하는 타입 변수. 구문 : &lt;code&gt;= tyvar&lt;/code&gt; 또는 &lt;code&gt;= (tyvar :: kind)&lt;/code&gt; . 타입 변수는 신선해야합니다.</target>
        </trans-unit>
        <trans-unit id="657ee88f03507eb2daa1cae621b0d82027549b01" translate="yes" xml:space="preserve">
          <source>a type; the spliced expression must have type &lt;code&gt;Q Type&lt;/code&gt;</source>
          <target state="translated">유형; 스 플라이 싱 된 표현식은 &lt;code&gt;Q Type&lt;/code&gt; 이어야합니다.</target>
        </trans-unit>
        <trans-unit id="0ffe8b2f16c8d4d508612436c15bcb9b6541a38f" translate="yes" xml:space="preserve">
          <source>a value of type &lt;code&gt;STRef s a&lt;/code&gt; is a mutable variable in state thread &lt;code&gt;s&lt;/code&gt;, containing a value of type &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">입력 값 &lt;code&gt;STRef s a&lt;/code&gt; 상태 스레드의 가변 변수 &lt;code&gt;s&lt;/code&gt; 입력 값 함유 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6175f44ee858b68670e6002cb56e8b10631f1a87" translate="yes" xml:space="preserve">
          <source>a variant of &lt;code&gt;&lt;a href=&quot;control-deepseq#v:deepseq&quot;&gt;deepseq&lt;/a&gt;&lt;/code&gt; that is useful in some circumstances:</source>
          <target state="translated">일부 상황에서 유용한 &lt;code&gt;&lt;a href=&quot;control-deepseq#v:deepseq&quot;&gt;deepseq&lt;/a&gt;&lt;/code&gt; 의 변형 :</target>
        </trans-unit>
        <trans-unit id="a649924718de2a48a367079f1e0da51d4a9da37f" translate="yes" xml:space="preserve">
          <source>a version of arctangent taking two real floating-point arguments. For real floating &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; computes the angle (from the positive x-axis) of the vector from the origin to the point &lt;code&gt;(x,y)&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; returns a value in the range [&lt;code&gt;-pi&lt;/code&gt;, &lt;code&gt;pi&lt;/code&gt;]. It follows the Common Lisp semantics for the origin when signed zeroes are supported. &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt; y 1&lt;/code&gt;, with &lt;code&gt;y&lt;/code&gt; in a type that is &lt;code&gt;&lt;a href=&quot;ghc-float#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt;, should return the same value as &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan&quot;&gt;atan&lt;/a&gt; y&lt;/code&gt;. A default definition of &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt;&lt;/code&gt; is provided, but implementors can provide a more accurate implementation.</source>
          <target state="translated">두 개의 실수 부동 소수점 인수를 취하는 아크 탄젠트 버전. 실수 부동 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 의 경우 &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; 는 원점에서 점 &lt;code&gt;(x,y)&lt;/code&gt; 까지의 벡터 각도 (양의 x 축에서)를 계산합니다 . &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; 는 [ &lt;code&gt;-pi&lt;/code&gt; , &lt;code&gt;pi&lt;/code&gt; ] 범위의 값을 반환합니다 . 부호있는 0이 지원 될 때 원점에 대한 Common Lisp 의미를 따릅니다. &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt; y 1&lt;/code&gt; 과 &lt;code&gt;y&lt;/code&gt; 인 타입 &lt;code&gt;&lt;a href=&quot;ghc-float#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 와 동일한 값을 반환한다 &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan&quot;&gt;atan&lt;/a&gt; y&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;ghc-float#v:atan2&quot;&gt;atan2&lt;/a&gt;&lt;/code&gt; 의 기본 정의 제공되지만 구현자는보다 정확한 구현을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe74ee7452742c4171313955ab223053c4556057" translate="yes" xml:space="preserve">
          <source>a version of arctangent taking two real floating-point arguments. For real floating &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; computes the angle (from the positive x-axis) of the vector from the origin to the point &lt;code&gt;(x,y)&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; returns a value in the range [&lt;code&gt;-pi&lt;/code&gt;, &lt;code&gt;pi&lt;/code&gt;]. It follows the Common Lisp semantics for the origin when signed zeroes are supported. &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt; y 1&lt;/code&gt;, with &lt;code&gt;y&lt;/code&gt; in a type that is &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt;, should return the same value as &lt;code&gt;&lt;a href=&quot;prelude#v:atan&quot;&gt;atan&lt;/a&gt; y&lt;/code&gt;. A default definition of &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt;&lt;/code&gt; is provided, but implementors can provide a more accurate implementation.</source>
          <target state="translated">두 개의 실수 부동 소수점 인수를 취하는 아크 탄젠트 버전. 실수 부동 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 의 경우 &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; 는 원점에서 점 &lt;code&gt;(x,y)&lt;/code&gt; 까지의 벡터 각도 (양의 x 축에서)를 계산합니다 . &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt; y x&lt;/code&gt; 는 [ &lt;code&gt;-pi&lt;/code&gt; , &lt;code&gt;pi&lt;/code&gt; ] 범위의 값을 반환합니다 . 부호있는 0이 지원 될 때 원점에 대한 Common Lisp 의미를 따릅니다. &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt; y 1&lt;/code&gt; 과 &lt;code&gt;y&lt;/code&gt; 인 타입 &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; 와 동일한 값을 반환한다 &lt;code&gt;&lt;a href=&quot;prelude#v:atan&quot;&gt;atan&lt;/a&gt; y&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;prelude#v:atan2&quot;&gt;atan2&lt;/a&gt;&lt;/code&gt; 의 기본 정의 제공되지만 구현자는보다 정확한 구현을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab5c5acde1e2f6c3f101707a78f1d04cb72059dd" translate="yes" xml:space="preserve">
          <source>a writer monad transformer with the extra ability to read all previous output.</source>
          <target state="translated">모든 이전 출력을 읽을 수있는 추가 기능이있는 라이터 모나드 변압기.</target>
        </trans-unit>
        <trans-unit id="590421791efe5c46df565897151f6d7d2023d8e6" translate="yes" xml:space="preserve">
          <source>a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt; (&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</source>
          <target state="translated">a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt; ( &lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="31c6d7a30a36618fec3902097e5b43815bce0f49" translate="yes" xml:space="preserve">
          <source>a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt; (&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt; a)</source>
          <target state="translated">a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt; ( &lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="35ef1ee6ab6f7855e9ef87b5827bdeb7fde62274" translate="yes" xml:space="preserve">
          <source>a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt; (&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</source>
          <target state="translated">a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:HPrintfType&quot;&gt;HPrintfType&lt;/a&gt; ( &lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="409880a65ffaa71a1e0d0fe62cfabfa3a938169c" translate="yes" xml:space="preserve">
          <source>a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt; (&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</source>
          <target state="translated">a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt; ( &lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="3e151aca4c15d6934c037ad431662959917ad736" translate="yes" xml:space="preserve">
          <source>a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt; (&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt; a)</source>
          <target state="translated">a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt; ( &lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="98a378d9b15b70d74d0944fb1e954d4256523aa2" translate="yes" xml:space="preserve">
          <source>a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt; (&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</source>
          <target state="translated">a ~ () =&amp;gt; &lt;a href=&quot;text-printf#t:PrintfType&quot;&gt;PrintfType&lt;/a&gt; ( &lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="a332ce52488d1d5de5b7bfd2033ff8678cc81e6d" translate="yes" xml:space="preserve">
          <source>a ~ &lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;../base-4.13.0.0/data-string#t:IsString&quot;&gt;IsString&lt;/a&gt; (&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a)</source>
          <target state="translated">a ~ &lt;a href=&quot;../base-4.13.0.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;../base-4.13.0.0/data-string#t:IsString&quot;&gt;IsString&lt;/a&gt; ( &lt;a href=&quot;data-sequence#t:Seq&quot;&gt;시퀀스&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="9ecaf4f34f4aad0b04127e60e022b72ec77a2eaa" translate="yes" xml:space="preserve">
          <source>a ~ &lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;../base-4.14.1.0/data-string#t:IsString&quot;&gt;IsString&lt;/a&gt; (&lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a)</source>
          <target state="translated">a ~ &lt;a href=&quot;../base-4.14.1.0/data-char#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;../base-4.14.1.0/data-string#t:IsString&quot;&gt;IsString&lt;/a&gt; ( &lt;a href=&quot;data-sequence#t:Seq&quot;&gt;Seq&lt;/a&gt; a)</target>
        </trans-unit>
        <trans-unit id="915fd9d7d50fa1f7e70a03265ca1bb088bdf1f16" translate="yes" xml:space="preserve">
          <source>a ~ &lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;data-string#t:IsString&quot;&gt;IsString&lt;/a&gt; [a]</source>
          <target state="translated">a ~ &lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;data-string#t:IsString&quot;&gt;IsString&lt;/a&gt; [a]</target>
        </trans-unit>
        <trans-unit id="523bc46d742e3092442dc8594623b4685aa196dc" translate="yes" xml:space="preserve">
          <source>a ~ &lt;a href=&quot;ghc-exts#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;ghc-exts#t:IsString&quot;&gt;IsString&lt;/a&gt; [a]</source>
          <target state="translated">a ~ &lt;a href=&quot;ghc-exts#t:Char&quot;&gt;Char&lt;/a&gt; =&amp;gt; &lt;a href=&quot;ghc-exts#t:IsString&quot;&gt;IsString&lt;/a&gt; [a]</target>
        </trans-unit>
        <trans-unit id="044c3a8ec5a5d9d794332e8feedf60bf63246f8d" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="c737fd2304d681b949b955e6cfaadea29b7174bd" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;ghc-enum#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="5581fcde0073364eee5b2f7c3bcbc6f61185c507" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;ghc-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="ed4469140697334ccde0a1e5ed82cd81fb9b8dce" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="e716884071d36d90840e4caf15ff812e7f6a4a74" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="7ab919c4c8d16d344ff842435c43a224ea48ef20" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Bounded&quot;&gt;바운드&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="77faa75fa005c9774da433fc23465bd9c8bebd3d" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="74e2e6fa82ee67074c4af2de1a01a37948e866f2" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="92d3e309f797fb4f4c1371be971b05d314eef8fa" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Enum&quot;&gt;열거 형&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="3557a95257ef12efdfbd0506e1f8c579d231ef7d" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;prelude#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="657481dfd6da9b659b9b66c663a065a94bf937a3" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-type-equality#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="cbde84fe7ced7f537dc42c05790ea00c1f4ccf3c" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;data-typeable#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="3a4dfd01691dd3bc592cf6604b7e5fd0d0d580cc" translate="yes" xml:space="preserve">
          <source>a ~ b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;Read&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;:~:&lt;/a&gt; b)</source>
          <target state="translated">a ~ b =&amp;gt; &lt;a href=&quot;text-read#t:Read&quot;&gt;읽기&lt;/a&gt; (a &lt;a href=&quot;type-reflection#t::-126-:&quot;&gt;: ~ :&lt;/a&gt; b)</target>
        </trans-unit>
        <trans-unit id="891c3640894e01860eb0ae7ccf5446799d718ed2" translate="yes" xml:space="preserve">
          <source>aCCESS_SYSTEM_SECURITY</source>
          <target state="translated">aCCESS_SYSTEM_SECURITY</target>
        </trans-unit>
        <trans-unit id="b9bce8bc7cbd4cfc74af295dc63b50f294e0fb27" translate="yes" xml:space="preserve">
          <source>abbr</source>
          <target state="translated">abbr</target>
        </trans-unit>
        <trans-unit id="9fbb397449fabe7370de4e726a586750c0e025d4" translate="yes" xml:space="preserve">
          <source>above</source>
          <target state="translated">above</target>
        </trans-unit>
        <trans-unit id="dbaa3b644912f622f62ee8b0092a8d9ffa527bdc" translate="yes" xml:space="preserve">
          <source>aboves</source>
          <target state="translated">aboves</target>
        </trans-unit>
        <trans-unit id="3c647eaa3ec188fa4a41bc29560cf3d263ce2c90" translate="yes" xml:space="preserve">
          <source>abs (Num)</source>
          <target state="translated">복근 (숫자)</target>
        </trans-unit>
        <trans-unit id="ccfa5b700105590fd54b7a4acd40d0f1749a6761" translate="yes" xml:space="preserve">
          <source>absInteger</source>
          <target state="translated">absInteger</target>
        </trans-unit>
        <trans-unit id="bce57942f67ca0fbd6511ebbaac8b282f36b38f8" translate="yes" xml:space="preserve">
          <source>absentErr</source>
          <target state="translated">absentErr</target>
        </trans-unit>
        <trans-unit id="64b6ed23db21d395b30faeea0ee1a854363149cc" translate="yes" xml:space="preserve">
          <source>absolute value expressed in 31 bit chunks, least significant first (ideally these would be machine-word &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt;s rather than 31-bit truncated &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;s)</source>
          <target state="translated">31 개 비트 청크 표현 절대치 최하위 제 (이상적으로 이러한 머신 단어 될 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Word&quot;&gt;Word&lt;/a&gt;&lt;/code&gt; 들보다는 31 비트가 절단 &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/ghc-prim-0.5.3/GHC-Types.html#t:Int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; S)</target>
        </trans-unit>
        <trans-unit id="c51b51e73e19ddc7f3d78e1d559b9e094d6aabd7" translate="yes" xml:space="preserve">
          <source>absurd</source>
          <target state="translated">absurd</target>
        </trans-unit>
        <trans-unit id="1add8034a0b73096de672f41850b64a5ad712a1a" translate="yes" xml:space="preserve">
          <source>accepts any of &lt;code&gt;&amp;plusmn;HHMM&lt;/code&gt; or &lt;code&gt;&amp;plusmn;HH:MM&lt;/code&gt;.</source>
          <target state="translated">의 수용 &lt;code&gt;&amp;plusmn;HHMM&lt;/code&gt; 또는 &lt;code&gt;&amp;plusmn;HH:MM&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d33d98937b79b4741648859979c3a47d36f7b6e" translate="yes" xml:space="preserve">
          <source>accepts any string of letters, or any of the formats accepted by &lt;code&gt;%z&lt;/code&gt;.</source>
          <target state="translated">모든 문자열 또는 &lt;code&gt;%z&lt;/code&gt; 허용하는 형식을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="d6401d94d7fa2a221be73d01898ea5b60b61008b" translate="yes" xml:space="preserve">
          <source>accepts exactly four digits.</source>
          <target state="translated">정확히 네 자리를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8b61036933e858789a8f27653fcaabe0dd729aed" translate="yes" xml:space="preserve">
          <source>accepts exactly two digits.</source>
          <target state="translated">정확히 두 자리를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8c5af12517ca0f8866b26bf9c075f775fccff465" translate="yes" xml:space="preserve">
          <source>accessModes</source>
          <target state="translated">accessModes</target>
        </trans-unit>
        <trans-unit id="bb99d38076a7fd7a77e43ad49c41b08fd8af4431" translate="yes" xml:space="preserve">
          <source>accessTime</source>
          <target state="translated">accessTime</target>
        </trans-unit>
        <trans-unit id="122871cac8e2ec1f46010f99a1357daa1eb8508a" translate="yes" xml:space="preserve">
          <source>accessTimeFromMetadata</source>
          <target state="translated">accessTimeFromMetadata</target>
        </trans-unit>
        <trans-unit id="f45e20611738871cf30c605a806206b5753c0310" translate="yes" xml:space="preserve">
          <source>accessTimeHiRes</source>
          <target state="translated">accessTimeHiRes</target>
        </trans-unit>
        <trans-unit id="5a6b2eab4e73bc94a6e4f9f228c7bdd126f38135" translate="yes" xml:space="preserve">
          <source>accum</source>
          <target state="translated">accum</target>
        </trans-unit>
        <trans-unit id="32ba47d6af576dc9065e3c948273f0cf110aea55" translate="yes" xml:space="preserve">
          <source>accumArray</source>
          <target state="translated">accumArray</target>
        </trans-unit>
        <trans-unit id="d3d1577ef799a30fb0de62bf57405648e1d9ac27" translate="yes" xml:space="preserve">
          <source>accumToStateT</source>
          <target state="translated">accumToStateT</target>
        </trans-unit>
        <trans-unit id="6f1430af6498d7c1125ea1bbdd4422357b12b588" translate="yes" xml:space="preserve">
          <source>accumulating function</source>
          <target state="translated">축적 기능</target>
        </trans-unit>
        <trans-unit id="71215402ee267f31cd6fff0de041f00108e40d9d" translate="yes" xml:space="preserve">
          <source>accursedUnutterablePerformIO</source>
          <target state="translated">accursedUnutterablePerformIO</target>
        </trans-unit>
        <trans-unit id="74463958ab508dde5fa01d729fc7e788ebaf16ad" translate="yes" xml:space="preserve">
          <source>acosDouble</source>
          <target state="translated">acosDouble</target>
        </trans-unit>
        <trans-unit id="aa8712a2c68660e7cab096247485e031962170db" translate="yes" xml:space="preserve">
          <source>acosDouble#</source>
          <target state="translated">acosDouble#</target>
        </trans-unit>
        <trans-unit id="06ead770755ad26198b691576891794699c24da7" translate="yes" xml:space="preserve">
          <source>acosFloat</source>
          <target state="translated">acosFloat</target>
        </trans-unit>
        <trans-unit id="5a1736b2ae2b058f0de2f7136bce2a54c8d5dabb" translate="yes" xml:space="preserve">
          <source>acosFloat#</source>
          <target state="translated">acosFloat#</target>
        </trans-unit>
        <trans-unit id="a117ad6e1e8d24d25a3c1d016abe956c25876c10" translate="yes" xml:space="preserve">
          <source>acoshDouble</source>
          <target state="translated">acoshDouble</target>
        </trans-unit>
        <trans-unit id="6ad5f18630535118c189843962d470a8fc55e725" translate="yes" xml:space="preserve">
          <source>acoshDouble#</source>
          <target state="translated">acoshDouble#</target>
        </trans-unit>
        <trans-unit id="9a15b5f46d5d30c87845f315fc5849e9e48b45e2" translate="yes" xml:space="preserve">
          <source>acoshFloat</source>
          <target state="translated">acoshFloat</target>
        </trans-unit>
        <trans-unit id="e919f2e880321a0f856646007be4dae7a833f62e" translate="yes" xml:space="preserve">
          <source>acoshFloat#</source>
          <target state="translated">acoshFloat#</target>
        </trans-unit>
        <trans-unit id="18b1ec962b2619762af0ec0fed21b2a539c0a2ad" translate="yes" xml:space="preserve">
          <source>acronym</source>
          <target state="translated">acronym</target>
        </trans-unit>
        <trans-unit id="34eb4c4ef005207e8b8f916b9f1fffacccd6945e" translate="yes" xml:space="preserve">
          <source>action</source>
          <target state="translated">action</target>
        </trans-unit>
        <trans-unit id="1b306a7ae5a93c2bc409337ec3c59d10b467f3be" translate="yes" xml:space="preserve">
          <source>action to execute before retrying if an immediate retry would block</source>
          <target state="translated">즉시 재 시도가 차단되는 경우 재시도 전에 실행할 조치</target>
        </trans-unit>
        <trans-unit id="aee7075968e647c3563062ca38e54057dc8697f6" translate="yes" xml:space="preserve">
          <source>action which may fail</source>
          <target state="translated">실패 할 수있는 행동</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="bc819af4dff987b7d40d69f25a7222d9022e6a4a" translate="yes" xml:space="preserve">
          <source>add ⟨dir⟩, ⟨dir2⟩, etc. to import path</source>
          <target state="translated">⟨dir⟩, ⟨dir2⟩ 등을 추가하여 경로를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1a53926ff9a1f6ce2083c28e73a8746413f7f9c2" translate="yes" xml:space="preserve">
          <source>addAbsoluteTime</source>
          <target state="translated">addAbsoluteTime</target>
        </trans-unit>
        <trans-unit id="87525f25780e527362cefa6bdd2e1b213af0972c" translate="yes" xml:space="preserve">
          <source>addAbsoluteTime a b = a + b</source>
          <target state="translated">addAbsoluteTime ab = a + b</target>
        </trans-unit>
        <trans-unit id="74be67a240cd07b3a37dad0d8885e9133def5e48" translate="yes" xml:space="preserve">
          <source>addCFinalizerToWeak#</source>
          <target state="translated">addCFinalizerToWeak#</target>
        </trans-unit>
        <trans-unit id="731c5bb583d26164f9396c8cbc16dca6d0509a59" translate="yes" xml:space="preserve">
          <source>addCorePlugin</source>
          <target state="translated">addCorePlugin</target>
        </trans-unit>
        <trans-unit id="d0145a9d610a932d395308c0578f0b6ae175e2af" translate="yes" xml:space="preserve">
          <source>addDays</source>
          <target state="translated">addDays</target>
        </trans-unit>
        <trans-unit id="2efe0e94d3706a6e4d0eadfeff52bfc1d5378955" translate="yes" xml:space="preserve">
          <source>addDependentFile</source>
          <target state="translated">addDependentFile</target>
        </trans-unit>
        <trans-unit id="32ef3f548fdf998e0f408d513f2294dc9d188d08" translate="yes" xml:space="preserve">
          <source>addErrorMessage</source>
          <target state="translated">addErrorMessage</target>
        </trans-unit>
        <trans-unit id="d4d3026cb3c2c56719fbc6c14e120de7e351ab45" translate="yes" xml:space="preserve">
          <source>addExtension</source>
          <target state="translated">addExtension</target>
        </trans-unit>
        <trans-unit id="2cc1c20966f345f8990d256b3116243a546f91f7" translate="yes" xml:space="preserve">
          <source>addFinalizer</source>
          <target state="translated">addFinalizer</target>
        </trans-unit>
        <trans-unit id="5ada88558e381a62eb980a4682593062da9dc534" translate="yes" xml:space="preserve">
          <source>addForeignFile</source>
          <target state="translated">addForeignFile</target>
        </trans-unit>
        <trans-unit id="9882e831aabf83aae4b0eeca2389878efc89c287" translate="yes" xml:space="preserve">
          <source>addForeignFilePath</source>
          <target state="translated">addForeignFilePath</target>
        </trans-unit>
        <trans-unit id="5328cde5115b1f16a2cc11d9a0999d26769e04e4" translate="yes" xml:space="preserve">
          <source>addForeignPtrConcFinalizer</source>
          <target state="translated">addForeignPtrConcFinalizer</target>
        </trans-unit>
        <trans-unit id="d5e1b3826f3b45dbf1383bc16da6aa8896061279" translate="yes" xml:space="preserve">
          <source>addForeignPtrFinalizer</source>
          <target state="translated">addForeignPtrFinalizer</target>
        </trans-unit>
        <trans-unit id="1b7fc9ba8933d32e1ac319cb6b2984e1f1263c5f" translate="yes" xml:space="preserve">
          <source>addForeignPtrFinalizerEnv</source>
          <target state="translated">addForeignPtrFinalizerEnv</target>
        </trans-unit>
        <trans-unit id="330e67d423abd9f347b5714dc456b22d4a8b754f" translate="yes" xml:space="preserve">
          <source>addForeignSource</source>
          <target state="translated">addForeignSource</target>
        </trans-unit>
        <trans-unit id="efd9bbf9d174ede41caa654a081e970edbaf7c5a" translate="yes" xml:space="preserve">
          <source>addGregorianDurationClip</source>
          <target state="translated">addGregorianDurationClip</target>
        </trans-unit>
        <trans-unit id="1561a5201a8010ec95ce0c3dd4a699656e12c8ee" translate="yes" xml:space="preserve">
          <source>addGregorianDurationRollOver</source>
          <target state="translated">addGregorianDurationRollOver</target>
        </trans-unit>
        <trans-unit id="c2d30e34952b264621f5128e144c309a55f7bf00" translate="yes" xml:space="preserve">
          <source>addGregorianMonthsClip</source>
          <target state="translated">addGregorianMonthsClip</target>
        </trans-unit>
        <trans-unit id="f575f24b13db058d587ee4f1fde8e06c8c98ba49" translate="yes" xml:space="preserve">
          <source>addGregorianMonthsRollOver</source>
          <target state="translated">addGregorianMonthsRollOver</target>
        </trans-unit>
        <trans-unit id="ddaf167355addb06f5a1984493ceb5270c71e859" translate="yes" xml:space="preserve">
          <source>addGregorianYearsClip</source>
          <target state="translated">addGregorianYearsClip</target>
        </trans-unit>
        <trans-unit id="176a967932a4ed7f3164e00ef84d05bd16c7e27d" translate="yes" xml:space="preserve">
          <source>addGregorianYearsRollOver</source>
          <target state="translated">addGregorianYearsRollOver</target>
        </trans-unit>
        <trans-unit id="ded846822c1263da1a8e8a9ddeec15118958535b" translate="yes" xml:space="preserve">
          <source>addHistory</source>
          <target state="translated">addHistory</target>
        </trans-unit>
        <trans-unit id="6e68d851a386df95bf92d31df2026345efb374ee" translate="yes" xml:space="preserve">
          <source>addHistoryRemovingAllDupes</source>
          <target state="translated">addHistoryRemovingAllDupes</target>
        </trans-unit>
        <trans-unit id="ae0889be6dd5d5e2cb3eccf41df9b9dd0362c36c" translate="yes" xml:space="preserve">
          <source>addHistoryUnlessConsecutiveDupe</source>
          <target state="translated">addHistoryUnlessConsecutiveDupe</target>
        </trans-unit>
        <trans-unit id="b670556bdf5011b208984ce40cfe570a51d8e4c8" translate="yes" xml:space="preserve">
          <source>addIntC#</source>
          <target state="translated">addIntC#</target>
        </trans-unit>
        <trans-unit id="ae0f81dae2059fbf8cf6fe47528bd5afce44b4c4" translate="yes" xml:space="preserve">
          <source>addJulianDurationClip</source>
          <target state="translated">addJulianDurationClip</target>
        </trans-unit>
        <trans-unit id="eaebfd6c1cc89922e86b864fb75e87647b8ef728" translate="yes" xml:space="preserve">
          <source>addJulianDurationRollOver</source>
          <target state="translated">addJulianDurationRollOver</target>
        </trans-unit>
        <trans-unit id="219dd18ee334cb16306dfefb1974c0e75d510e41" translate="yes" xml:space="preserve">
          <source>addJulianMonthsClip</source>
          <target state="translated">addJulianMonthsClip</target>
        </trans-unit>
        <trans-unit id="aa98e6a4ed889b1f638a01298b19623885f610d0" translate="yes" xml:space="preserve">
          <source>addJulianMonthsRollOver</source>
          <target state="translated">addJulianMonthsRollOver</target>
        </trans-unit>
        <trans-unit id="4a89e71927988a572e8cc407c7a6e67fdeb4175c" translate="yes" xml:space="preserve">
          <source>addJulianYearsClip</source>
          <target state="translated">addJulianYearsClip</target>
        </trans-unit>
        <trans-unit id="32c9d769452701100b91ebed14ed6e082ec489c8" translate="yes" xml:space="preserve">
          <source>addJulianYearsRollOver</source>
          <target state="translated">addJulianYearsRollOver</target>
        </trans-unit>
        <trans-unit id="595781519f927b0b1834b52a7e1a1a39c625039c" translate="yes" xml:space="preserve">
          <source>addLibrarySearchPath</source>
          <target state="translated">addLibrarySearchPath</target>
        </trans-unit>
        <trans-unit id="3e4666f9ee956353d042bfd9513fa4abc5a3f310" translate="yes" xml:space="preserve">
          <source>addLocalTime</source>
          <target state="translated">addLocalTime</target>
        </trans-unit>
        <trans-unit id="2abbdc9eb41c727e121578360a859ca4e4efe078" translate="yes" xml:space="preserve">
          <source>addLocalTime a b = a + b</source>
          <target state="translated">addLocalTime ab = a + b</target>
        </trans-unit>
        <trans-unit id="84862540c7306b95991c435f71820dd519248fee" translate="yes" xml:space="preserve">
          <source>addMVarFinalizer</source>
          <target state="translated">addMVarFinalizer</target>
        </trans-unit>
        <trans-unit id="8f456b836a57e7b521cd3fe8b4642d186ff9a89d" translate="yes" xml:space="preserve">
          <source>addModFinalizer</source>
          <target state="translated">addModFinalizer</target>
        </trans-unit>
        <trans-unit id="2eb2458fc9cab4d81757f4fc410fbe961d8d6e36" translate="yes" xml:space="preserve">
          <source>addSignal</source>
          <target state="translated">addSignal</target>
        </trans-unit>
        <trans-unit id="ccd08e29dfeaf9bdafa115354157598d5b620f0f" translate="yes" xml:space="preserve">
          <source>addTempFile</source>
          <target state="translated">addTempFile</target>
        </trans-unit>
        <trans-unit id="40603c528fd8abd1b5db422a5605a0e04b8c7ed9" translate="yes" xml:space="preserve">
          <source>addTopDecls</source>
          <target state="translated">addTopDecls</target>
        </trans-unit>
        <trans-unit id="26384875d473da292e6e94fb202bd58ec4f113bb" translate="yes" xml:space="preserve">
          <source>addTrailingPathSeparator</source>
          <target state="translated">addTrailingPathSeparator</target>
        </trans-unit>
        <trans-unit id="7bab5da1619b04063aec0086211d40edc00e803a" translate="yes" xml:space="preserve">
          <source>addUTCTime</source>
          <target state="translated">addUTCTime</target>
        </trans-unit>
        <trans-unit id="94debf7f133c839a02e77b349992ff46a34a4e84" translate="yes" xml:space="preserve">
          <source>addUTCTime a b = a + b</source>
          <target state="translated">addUTCTime ab = a + b</target>
        </trans-unit>
        <trans-unit id="3d2e6af91d0fb8fdb6a080fc71913d8cc6de0cb0" translate="yes" xml:space="preserve">
          <source>addWordC#</source>
          <target state="translated">addWordC#</target>
        </trans-unit>
        <trans-unit id="9557408f6ee06dc0fa69765d1d00f6920af8ad4a" translate="yes" xml:space="preserve">
          <source>addr2Int#</source>
          <target state="translated">addr2Int#</target>
        </trans-unit>
        <trans-unit id="16deaa35f322d5f82263f26196529ef5d290a995" translate="yes" xml:space="preserve">
          <source>addrToAny#</source>
          <target state="translated">addrToAny#</target>
        </trans-unit>
        <trans-unit id="c662180230cad14787d4ab7e77aa08681ce783fa" translate="yes" xml:space="preserve">
          <source>address</source>
          <target state="translated">address</target>
        </trans-unit>
        <trans-unit id="e691d1d7cc0ac7819d8356620e2e134b524e40d6" translate="yes" xml:space="preserve">
          <source>address to ask the OS for memory</source>
          <target state="translated">OS에 메모리를 요청하는 주소</target>
        </trans-unit>
        <trans-unit id="135486a4f285b9b2d8d7bd7607211013e28e557c" translate="yes" xml:space="preserve">
          <source>address to ask the OS for memory for the linker, 0 ==&amp;gt; off</source>
          <target state="translated">링커의 메모리를 OS에 요청하는 주소, 0 ==&amp;gt; 꺼짐</target>
        </trans-unit>
        <trans-unit id="a11f5c3beed47c29da089d9337054f1fc3438334" translate="yes" xml:space="preserve">
          <source>adjust</source>
          <target state="translated">adjust</target>
        </trans-unit>
        <trans-unit id="3df5363464281a44973ce242c507cca4e611d019" translate="yes" xml:space="preserve">
          <source>adjust&amp;#x27;</source>
          <target state="translated">adjust&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="31d7b3d0b23c3ecce467382f288a8fda07a7c947" translate="yes" xml:space="preserve">
          <source>adjustWindowRect</source>
          <target state="translated">adjustWindowRect</target>
        </trans-unit>
        <trans-unit id="39d007aebebe2c8bc50eed203cdd819637109fdd" translate="yes" xml:space="preserve">
          <source>adjustWindowRectEx</source>
          <target state="translated">adjustWindowRectEx</target>
        </trans-unit>
        <trans-unit id="f1adf0c08b54d347ada18d14a364b4d35310daa7" translate="yes" xml:space="preserve">
          <source>adjustWithKey</source>
          <target state="translated">adjustWithKey</target>
        </trans-unit>
        <trans-unit id="06212ffae182c208d663c07c546f86798115e6a3" translate="yes" xml:space="preserve">
          <source>advancePtr</source>
          <target state="translated">advancePtr</target>
        </trans-unit>
        <trans-unit id="1feb0e8c71dbee8b02e939d3ad8d65534654459e" translate="yes" xml:space="preserve">
          <source>afile</source>
          <target state="translated">afile</target>
        </trans-unit>
        <trans-unit id="5e372bd188ae2b14d932c8f290b9a501ab4e56dc" translate="yes" xml:space="preserve">
          <source>after &lt;code&gt;import&lt;/code&gt; statement</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 명세서 후</target>
        </trans-unit>
        <trans-unit id="ae21c64a87f6bb0b8e16e55c48be4cc638d7bd3f" translate="yes" xml:space="preserve">
          <source>align</source>
          <target state="translated">align</target>
        </trans-unit>
        <trans-unit id="e7a2e2805d2496ca587239d4cda31b89c1c0ca73" translate="yes" xml:space="preserve">
          <source>alignPtr</source>
          <target state="translated">alignPtr</target>
        </trans-unit>
        <trans-unit id="99fce70bf4748d7e0078cd0fcd052d2b36a1e4c0" translate="yes" xml:space="preserve">
          <source>alignment (Storable)</source>
          <target state="translated">정렬 (저장 가능)</target>
        </trans-unit>
        <trans-unit id="107c36de6ed8336bd0dd209e95b562425b9dfe41" translate="yes" xml:space="preserve">
          <source>alink</source>
          <target state="translated">alink</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="9e504920833d81fde6eef06c19b51058b5894375" translate="yes" xml:space="preserve">
          <source>all corresponding types and implicit kinds in the patterns are apart, or</source>
          <target state="translated">패턴의 모든 해당 유형과 암시 적 유형이 서로 떨어져 있거나</target>
        </trans-unit>
        <trans-unit id="f00b4fd0886decfe65d992c1b482efde2ec4ad08" translate="yes" xml:space="preserve">
          <source>all get implicit bangs on the &lt;code&gt;x&lt;/code&gt; pattern.</source>
          <target state="translated">모두 &lt;code&gt;x&lt;/code&gt; 패턴 에 대한 암시 적 영향을받습니다 .</target>
        </trans-unit>
        <trans-unit id="95e8b2f063141b33afc19049d243214aa4c78c85" translate="yes" xml:space="preserve">
          <source>allAttributesOff</source>
          <target state="translated">allAttributesOff</target>
        </trans-unit>
        <trans-unit id="f8206e23a1b240fef234ee0c8e667350841f4923" translate="yes" xml:space="preserve">
          <source>allWriteMode</source>
          <target state="translated">allWriteMode</target>
        </trans-unit>
        <trans-unit id="65af051f252c2e070428b3d48c9e06ebe2a6b9c5" translate="yes" xml:space="preserve">
          <source>alloca</source>
          <target state="translated">alloca</target>
        </trans-unit>
        <trans-unit id="ace0898eccdd75ebfb1591fbb1f2dbc979e5ad25" translate="yes" xml:space="preserve">
          <source>allocaArray</source>
          <target state="translated">allocaArray</target>
        </trans-unit>
        <trans-unit id="3c6264e932ab091f892ddfcaa83d5b30f2c01c4f" translate="yes" xml:space="preserve">
          <source>allocaArray0</source>
          <target state="translated">allocaArray0</target>
        </trans-unit>
        <trans-unit id="d9eb1cc224bdf43481701f92d17f35791017e33f" translate="yes" xml:space="preserve">
          <source>allocaBytes</source>
          <target state="translated">allocaBytes</target>
        </trans-unit>
        <trans-unit id="5d343fcaee75170a8a898d45cbed43b312645e86" translate="yes" xml:space="preserve">
          <source>allocaBytesAligned</source>
          <target state="translated">allocaBytesAligned</target>
        </trans-unit>
        <trans-unit id="84626ff1da5397b1239fa0814deff4f223952861" translate="yes" xml:space="preserve">
          <source>allocaMessage</source>
          <target state="translated">allocaMessage</target>
        </trans-unit>
        <trans-unit id="b49fefbc56c98ab832581d8b1bb506eda4ac7c40" translate="yes" xml:space="preserve">
          <source>allocaPAINTSTRUCT</source>
          <target state="translated">allocaPAINTSTRUCT</target>
        </trans-unit>
        <trans-unit id="fdf0e6df6506ba938948d557b4d1f03e17cbb2b3" translate="yes" xml:space="preserve">
          <source>allocate a new buffer. The size of the buffer is at the discretion of the device; e.g. for a memory-mapped file the buffer will probably cover the entire file.</source>
          <target state="translated">새 버퍼를 할당하십시오. 버퍼의 크기는 장치의 재량에 달려 있습니다. 예를 들어 메모리 매핑 된 파일의 경우 버퍼가 아마도 전체 파일을 덮을 것입니다.</target>
        </trans-unit>
        <trans-unit id="289ed2f20ead6ffa1318be2c56745e75cb77aa27" translate="yes" xml:space="preserve">
          <source>allocated bytes</source>
          <target state="translated">할당 된 바이트</target>
        </trans-unit>
        <trans-unit id="76ededb15aa1dda3618c7c1cf4e3aedb0e8dea5a" translate="yes" xml:space="preserve">
          <source>allocation area size</source>
          <target state="translated">할당 영역 크기</target>
        </trans-unit>
        <trans-unit id="ffa8f79db994faec1f045dbc1b04ca9ac632eea6" translate="yes" xml:space="preserve">
          <source>allocationLimitExceeded</source>
          <target state="translated">allocationLimitExceeded</target>
        </trans-unit>
        <trans-unit id="b078c2f6d3c7744f8976d1d17d71825f67b47295" translate="yes" xml:space="preserve">
          <source>allowInterrupt</source>
          <target state="translated">allowInterrupt</target>
        </trans-unit>
        <trans-unit id="46538fd00b80c35182c9a6cbe69b8620bd73e5c7" translate="yes" xml:space="preserve">
          <source>allowSetForegroundWindow</source>
          <target state="translated">allowSetForegroundWindow</target>
        </trans-unit>
        <trans-unit id="385328d8d58c05e38abadd834d135fcb1234ee31" translate="yes" xml:space="preserve">
          <source>along with a small type-level language (via &lt;a href=&quot;#extension-DataKinds&quot;&gt;&lt;code&gt;DataKinds&lt;/code&gt;&lt;/a&gt;) for constructing pretty-printed error messages,</source>
          <target state="translated">예쁘게 인쇄 된 오류 메시지를 구성하기위한 작은 유형 수준 언어 ( &lt;a href=&quot;#extension-DataKinds&quot;&gt; &lt;code&gt;DataKinds&lt;/code&gt; 사용&lt;/a&gt; ) 와 함께 ,</target>
        </trans-unit>
        <trans-unit id="f14454571676762f4aecebfa7dc8a7a5ad23c746" translate="yes" xml:space="preserve">
          <source>alphaNum</source>
          <target state="translated">alphaNum</target>
        </trans-unit>
        <trans-unit id="20907882970dfeb7440c3195b40a5426061f849c" translate="yes" xml:space="preserve">
          <source>alreadyExistsErrorType</source>
          <target state="translated">alreadyExistsErrorType</target>
        </trans-unit>
        <trans-unit id="497df3e3e76e1bafba0c1940aab161fb87e25e86" translate="yes" xml:space="preserve">
          <source>alreadyInUseErrorType</source>
          <target state="translated">alreadyInUseErrorType</target>
        </trans-unit>
        <trans-unit id="c39c53f1191c5c35e3887a3c8411e8cfdb1ba72e" translate="yes" xml:space="preserve">
          <source>also, besides prefix pattern synonyms, both infix and record pattern synonyms are supported. See &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:PatSynArgs&quot;&gt;PatSynArgs&lt;/a&gt;&lt;/code&gt; for details</source>
          <target state="translated">또한 접두사 패턴 동의어 외에도 접두사와 레코드 패턴 동의어가 모두 지원됩니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:PatSynArgs&quot;&gt;PatSynArgs&lt;/a&gt;&lt;/code&gt; 를 참조하십시오</target>
        </trans-unit>
        <trans-unit id="00b732ba358efaf68ff5f29272104b074de33b1c" translate="yes" xml:space="preserve">
          <source>also, besides prefix pattern synonyms, both infix and record pattern synonyms are supported. See &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:PatSynArgs&quot;&gt;PatSynArgs&lt;/a&gt;&lt;/code&gt; for details</source>
          <target state="translated">또한 접두사 패턴 동의어 외에도 접두사와 레코드 패턴 동의어가 모두 지원됩니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:PatSynArgs&quot;&gt;PatSynArgs&lt;/a&gt;&lt;/code&gt; 를 참조하십시오</target>
        </trans-unit>
        <trans-unit id="325562c769da3f80d0e63bb56514bc2e2723c9b5" translate="yes" xml:space="preserve">
          <source>alt</source>
          <target state="translated">alt</target>
        </trans-unit>
        <trans-unit id="70387ea39726018c3fbc6e6646f6b3e08f2653fb" translate="yes" xml:space="preserve">
          <source>altcode</source>
          <target state="translated">altcode</target>
        </trans-unit>
        <trans-unit id="736d58ea8a0e114d72df992adfb0b598f3d56609" translate="yes" xml:space="preserve">
          <source>alter</source>
          <target state="translated">alter</target>
        </trans-unit>
        <trans-unit id="eab443df259d59b7f0be0d6ae1cf891a240928da" translate="yes" xml:space="preserve">
          <source>alterF</source>
          <target state="translated">alterF</target>
        </trans-unit>
        <trans-unit id="9552a99adb576ef72b680991b858dbee59db6a1c" translate="yes" xml:space="preserve">
          <source>alternate formatting</source>
          <target state="translated">대체 형식</target>
        </trans-unit>
        <trans-unit id="abdb4562600d39b8d30b8d0b475ccf60e1bf89c7" translate="yes" xml:space="preserve">
          <source>alternativeDurationDaysFormat</source>
          <target state="translated">alternativeDurationDaysFormat</target>
        </trans-unit>
        <trans-unit id="fdd881d0882b1c4c5f048f7d8e0e623bcf9325d2" translate="yes" xml:space="preserve">
          <source>alternativeDurationTimeFormat</source>
          <target state="translated">alternativeDurationTimeFormat</target>
        </trans-unit>
        <trans-unit id="7bd9c52c9a7f5e5d2e984623ea3ff531278ec6f8" translate="yes" xml:space="preserve">
          <source>although it may be implemented differently internally: you may not assume that the memory returned by &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; has been allocated with &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">내부적으로 다르게 구현 될 수도 있지만 : &lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; 에 의해 반환 된 메모리 가 &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; 으로 할당 되었다고 가정 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="934eb62a6b31097f2fac60e6fd55182652f37d42" translate="yes" xml:space="preserve">
          <source>although it may be implemented differently internally: you may not assume that the memory returned by &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; has been allocated with &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">내부적으로 다르게 구현 될 수도 있지만 : &lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; 에 의해 반환 된 메모리 가 &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; 으로 할당 되었다고 가정 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="d3519690ec5174207733af0989822eef74a9c717" translate="yes" xml:space="preserve">
          <source>although it may be implemented differently internally: you may not assume that the memory returned by &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; has been allocated with &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">내부적으로 다르게 구현 될 수도 있지만 : &lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; 에 의해 반환 된 메모리 가 &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:malloc&quot;&gt;malloc&lt;/a&gt;&lt;/code&gt; 으로 할당 되었다고 가정 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="aef5549ddc5a767e365906475597631e50d60859" translate="yes" xml:space="preserve">
          <source>amap</source>
          <target state="translated">amap</target>
        </trans-unit>
        <trans-unit id="f2a0ab49a9adc5a07c9ee8cd9d68bbd663d1c7f2" translate="yes" xml:space="preserve">
          <source>an IO action for writing the Builder's data into a user-supplied memory buffer.</source>
          <target state="translated">빌더의 데이터를 사용자 제공 메모리 버퍼에 쓰는 IO 조치</target>
        </trans-unit>
        <trans-unit id="8952e66aaa1977113e4b1a4ba68eedb56b0fbe3d" translate="yes" xml:space="preserve">
          <source>an expression; the spliced expression must have type &lt;code&gt;Q Exp&lt;/code&gt;</source>
          <target state="translated">표현; 스 플라이 싱 된 표현식은 &lt;code&gt;Q Exp&lt;/code&gt; 유형이어야합니다.</target>
        </trans-unit>
        <trans-unit id="ea36d7e375ce2814347654f5ef296397ce4aba4e" translate="yes" xml:space="preserve">
          <source>an injectivity annotation of the form &lt;code&gt;| A -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is the result type variable (see previous bullet) and &lt;code&gt;B&lt;/code&gt; is a list of argument type and kind variables in which type family is injective. It is possible to omit some variables if the type family is not injective in them.</source>
          <target state="translated">형식의 주 입성 주석 &lt;code&gt;| A -&amp;gt; B&lt;/code&gt; , 여기서 &lt;code&gt;A&lt;/code&gt; 는 결과 유형 변수 (이전 글 머리 기호 참조)이고 &lt;code&gt;B&lt;/code&gt; 는 유형 패밀리가 주입 형인 인수 유형 및 종류 변수 목록입니다. 타입 패밀리가 주입 적이 지 않은 경우 일부 변수를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="121f54c8437072b73e02a43f271054b7774b4a32" translate="yes" xml:space="preserve">
          <source>an injectivity annotation of the form &lt;code&gt;| A -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is the result type variable (see previous bullet) and &lt;code&gt;B&lt;/code&gt; is a list of argument type and kind variables in which type family is injective. It is possible to omit some variables if type family is not injective in them.</source>
          <target state="translated">형태의 주입 주석 &lt;code&gt;| A -&amp;gt; B&lt;/code&gt; 여기서 &lt;code&gt;A&lt;/code&gt; 는 결과 유형 변수 (이전 글 머리표 참조)이고 &lt;code&gt;B&lt;/code&gt; 는 유형 패밀리가 주입적인 인수 유형 및 종류 변수의 목록입니다. 유형 패밀리가 주입 형이 아닌 경우 일부 변수를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a95fd2b1f1263e20bf576cce1bb6848b28d31fc" translate="yes" xml:space="preserve">
          <source>an integer denoting the total number of completions available, and finally</source>
          <target state="translated">사용 가능한 총 완료 수를 나타내는 정수</target>
        </trans-unit>
        <trans-unit id="f44dc67be4e4958de07b0ede75630e83a23b10ae" translate="yes" xml:space="preserve">
          <source>an uninstantiated type variable (inside invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt;), or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; 유형 변수 ( runST 호출 내부 ) 또는</target>
        </trans-unit>
        <trans-unit id="992794f62e6051e5e84c50b259319620ef00db27" translate="yes" xml:space="preserve">
          <source>an uninstantiated type variable (inside invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt;), or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-lazy#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; 유형 변수 ( runST 호출 내부 ) 또는</target>
        </trans-unit>
        <trans-unit id="6e6f742509798b1d55d4f9ddf3f20626b1e54ef1" translate="yes" xml:space="preserve">
          <source>an uninstantiated type variable (inside invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt;), or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-lazy-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; 유형 변수 ( runST 호출 내부 ) 또는</target>
        </trans-unit>
        <trans-unit id="89a3f6e722a126ad023f9020da68a4c65094180b" translate="yes" xml:space="preserve">
          <source>an uninstantiated type variable (inside invocations of &lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt;), or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;control-monad-st-safe#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; 유형 변수 ( runST 호출 내부 ) 또는</target>
        </trans-unit>
        <trans-unit id="e10af2d69950ac2fb9dab5fc0d823c9b9607ba56" translate="yes" xml:space="preserve">
          <source>an uninstantiated type variable (inside invocations of &lt;code&gt;&lt;a href=&quot;ghc-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt;), or</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ghc-st#v:runST&quot;&gt;runST&lt;/a&gt;&lt;/code&gt; 유형 변수 ( runST 호출 내부 ) 또는</target>
        </trans-unit>
        <trans-unit id="f06df609aed50661247cc6ec96c1599c193c3ec4" translate="yes" xml:space="preserve">
          <source>anchor</source>
          <target state="translated">anchor</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="fe59db250f48c323d463aa9559750b0ad6dced15" translate="yes" xml:space="preserve">
          <source>and a polymorphic one:</source>
          <target state="translated">다형성 것 :</target>
        </trans-unit>
        <trans-unit id="73f706b0b1b0c12a6ba4c1f76fdaaf06a88ee8e7" translate="yes" xml:space="preserve">
          <source>and now we&amp;rsquo;d be in a superclass loop. Here&amp;rsquo;s an example involving a type variable</source>
          <target state="translated">이제 우리는 슈퍼 클래스 루프에있을 것입니다. 다음은 유형 변수와 관련된 예입니다.</target>
        </trans-unit>
        <trans-unit id="18d42fb779a37e4e1dc3e098558cdf4c4c83ec15" translate="yes" xml:space="preserve">
          <source>and parses as:</source>
          <target state="translated">다음과 같이 파싱합니다.</target>
        </trans-unit>
        <trans-unit id="e8fa7487b8c23045ccaa94a54053cdefcb655f2e" translate="yes" xml:space="preserve">
          <source>and pass &lt;code&gt;-F -pgmF convert.sh&lt;/code&gt; to GHC. The &lt;code&gt;-f l1&lt;/code&gt; option tells iconv to convert your Latin-1 file, supplied in argument &lt;code&gt;$2&lt;/code&gt;, while the &amp;ldquo;-t utf-8&amp;rdquo; options tell iconv to return a UTF-8 encoded file. The result is redirected into argument &lt;code&gt;$3&lt;/code&gt;. The &lt;code&gt;echo &quot;{-# LINE 1 \&quot;$2\&quot; #-}&quot;&lt;/code&gt; just makes sure that your error positions are reported as in the original source file.</source>
          <target state="translated">&lt;code&gt;-F -pgmF convert.sh&lt;/code&gt; 를 GHC로 전달하십시오 . &lt;code&gt;-f l1&lt;/code&gt; 옵션은 인수에 공급하여 라틴어-1 파일, 변환의 iconv를 알려줍니다 &lt;code&gt;$2&lt;/code&gt; 은 &quot;-t UTF-8&quot;옵션은 UTF-8 인코딩 된 파일을 반환의 iconv를 말할 때. 결과는 &lt;code&gt;$3&lt;/code&gt; 인수로 리디렉션됩니다 . 는 &lt;code&gt;echo &quot;{-# LINE 1 \&quot;$2\&quot; #-}&quot;&lt;/code&gt; 당신의 오류 위치가 원래의 소스 파일로보고되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="9b4aa4b3a300c8b4126f09367d0c6c3c4e36cddf" translate="yes" xml:space="preserve">
          <source>and that &lt;code&gt;&lt;a href=&quot;control-applicative#v:pure&quot;&gt;pure&lt;/a&gt;&lt;/code&gt; and (&lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;) satisfy the applicative functor laws.</source>
          <target state="translated">것을 &lt;code&gt;&lt;a href=&quot;control-applicative#v:pure&quot;&gt;pure&lt;/a&gt;&lt;/code&gt; 하고 ( &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; )가 실용적 펑터의 법칙을 만족시킨다.</target>
        </trans-unit>
        <trans-unit id="f0d6908641261ebacdf7178f2871da4376ad002e" translate="yes" xml:space="preserve">
          <source>and that &lt;code&gt;&lt;a href=&quot;ghc-base#v:pure&quot;&gt;pure&lt;/a&gt;&lt;/code&gt; and (&lt;code&gt;&lt;a href=&quot;ghc-base#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;) satisfy the applicative functor laws.</source>
          <target state="translated">것을 &lt;code&gt;&lt;a href=&quot;ghc-base#v:pure&quot;&gt;pure&lt;/a&gt;&lt;/code&gt; 하고 ( &lt;code&gt;&lt;a href=&quot;ghc-base#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; )가 실용적 펑터의 법칙을 만족시킨다.</target>
        </trans-unit>
        <trans-unit id="80de4bb2e6277bfe415251a8215406a0da053134" translate="yes" xml:space="preserve">
          <source>and that &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt;&lt;/code&gt; and (&lt;code&gt;&lt;a href=&quot;prelude#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt;) satisfy the applicative functor laws.</source>
          <target state="translated">것을 &lt;code&gt;&lt;a href=&quot;prelude#v:pure&quot;&gt;pure&lt;/a&gt;&lt;/code&gt; 하고 ( &lt;code&gt;&lt;a href=&quot;prelude#v:-60--42--62-&quot;&gt;&amp;lt;*&amp;gt;&lt;/a&gt;&lt;/code&gt; )가 실용적 펑터의 법칙을 만족시킨다.</target>
        </trans-unit>
        <trans-unit id="f628fa481829f10eb7ed0ce431a96d7a312b5c2a" translate="yes" xml:space="preserve">
          <source>and the automatically-added import is replaced the next time you use &lt;a href=&quot;#ghci-cmd-:load&quot;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ghci-cmd-:add&quot;&gt;&lt;code&gt;:add&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt;. It can also be removed by &lt;a href=&quot;#ghci-cmd-:module&quot;&gt;&lt;code&gt;:module&lt;/code&gt;&lt;/a&gt; as with normal imports.</source>
          <target state="translated">다음에 &lt;a href=&quot;#ghci-cmd-:load&quot;&gt; &lt;code&gt;:load&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ghci-cmd-:add&quot;&gt; &lt;code&gt;:add&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#ghci-cmd-:reload&quot;&gt; &lt;code&gt;:reload&lt;/code&gt; &lt;/a&gt; 를 사용할 때 자동으로 추가 된 가져 오기가 대체 됩니다. 일반 가져 오기와 마찬가지로 &lt;a href=&quot;#ghci-cmd-:module&quot;&gt; &lt;code&gt;:module&lt;/code&gt; &lt;/a&gt; 로 제거 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd67bd2ac58a98ba4fa381140fe6ca401229a1a0" translate="yes" xml:space="preserve">
          <source>and the corresponding &lt;code&gt;&lt;a href=&quot;data-functor-classes#t:Show1&quot;&gt;Show1&lt;/a&gt;&lt;/code&gt; instance as</source>
          <target state="translated">해당 &lt;code&gt;&lt;a href=&quot;data-functor-classes#t:Show1&quot;&gt;Show1&lt;/a&gt;&lt;/code&gt; 인스턴스는</target>
        </trans-unit>
        <trans-unit id="254f16578d53d1a8d664ec9f65a09ea9414efbab" translate="yes" xml:space="preserve">
          <source>and the fixity declaration applies wherever the binding is in scope. For example, in a &lt;code&gt;let&lt;/code&gt;, it applies in the right-hand sides of other &lt;code&gt;let&lt;/code&gt;-bindings and the body of the &lt;code&gt;let&lt;/code&gt;C. Or, in recursive &lt;code&gt;do&lt;/code&gt; expressions (&lt;a href=&quot;#recursive-do-notation&quot;&gt;The recursive do-notation&lt;/a&gt;), the local fixity declarations of a &lt;code&gt;let&lt;/code&gt; statement scope over other statements in the group, just as the bound name does.</source>
          <target state="translated">고 정성 선언은 바인딩의 범위 내에서 적용됩니다. 예를 들어,에 &lt;code&gt;let&lt;/code&gt; , 다른의 오른쪽 측면에 적용 &lt;code&gt;let&lt;/code&gt; -bindings과의 신체 &lt;code&gt;let&lt;/code&gt; 재귀에, C. 또는 &lt;code&gt;do&lt;/code&gt; 표현 ( &lt;a href=&quot;#recursive-do-notation&quot;&gt;재귀 DO-표기&lt;/a&gt; ), a의 지역 정착 선언 &lt;code&gt;let&lt;/code&gt; 문 바인딩 된 이름과 마찬가지로 그룹의 다른 명령문보다 범위가 좁습니다.</target>
        </trans-unit>
        <trans-unit id="84804ecc7a15277c8dc72ca8493fc5365f07f3ef" translate="yes" xml:space="preserve">
          <source>and the identity functor &lt;code&gt;&lt;a href=&quot;data-functor-identity#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; and composition functors &lt;code&gt;&lt;a href=&quot;data-functor-compose#v:Compose&quot;&gt;Compose&lt;/a&gt;&lt;/code&gt; are from &lt;a href=&quot;data-functor-identity&quot;&gt;Data.Functor.Identity&lt;/a&gt; and &lt;a href=&quot;data-functor-compose&quot;&gt;Data.Functor.Compose&lt;/a&gt;.</source>
          <target state="translated">ID functor &lt;code&gt;&lt;a href=&quot;data-functor-identity#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;data-functor-compose#v:Compose&quot;&gt;Compose&lt;/a&gt;&lt;/code&gt; 는 &lt;a href=&quot;data-functor-identity&quot;&gt;Data.Functor.Identity&lt;/a&gt; 및 &lt;a href=&quot;data-functor-compose&quot;&gt;Data.Functor.Compose&lt;/a&gt; 에서 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="dce8d78586a4b2e598fe2638354e4f7a8a928b05" translate="yes" xml:space="preserve">
          <source>and the implementation uses the &lt;em&gt;same&lt;/em&gt;&lt;code&gt;Num&lt;/code&gt; dictionary for &lt;code&gt;Dollars&lt;/code&gt; as for &lt;code&gt;Int&lt;/code&gt;. In other words, GHC will generate something that resembles the following code</source>
          <target state="translated">구현은 &lt;code&gt;Int&lt;/code&gt; &lt;em&gt;와 같은 &lt;/em&gt; &lt;code&gt;Dollars&lt;/code&gt; 에 대해 &lt;em&gt;동일한 &lt;/em&gt; &lt;code&gt;Num&lt;/code&gt; 사전을 사용합니다 . 즉, GHC는 다음 코드와 유사한 것을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="479c818bfd711cf4544f049828ee87d6403981e8" translate="yes" xml:space="preserve">
          <source>and the newtype is of the form</source>
          <target state="translated">그리고 새로운 유형은 형태입니다</target>
        </trans-unit>
        <trans-unit id="590c3603be97a6e205368ca55f167ade6ac064b9" translate="yes" xml:space="preserve">
          <source>and the syntax for explicitly bidirectional pattern synonyms is:</source>
          <target state="translated">명시 적으로 양방향 패턴 동의어에 대한 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0582d614d00a0cc31ca47309d416d9c73c2b4a28" translate="yes" xml:space="preserve">
          <source>and then attempt to simplify the &lt;code&gt;Num Int&lt;/code&gt; context as much as possible. GHC knows that there is a &lt;code&gt;Num Int&lt;/code&gt; instance in scope, so it is able to discharge the &lt;code&gt;Num Int&lt;/code&gt; constraint, leaving the code that GHC actually generates</source>
          <target state="translated">그런 다음 &lt;code&gt;Num Int&lt;/code&gt; 컨텍스트를 최대한 단순화하려고 시도 하십시오. GHC는 범위에 &lt;code&gt;Num Int&lt;/code&gt; 인스턴스 가 있다는 것을 알고 있으므로 &lt;code&gt;Num Int&lt;/code&gt; 제약 조건을 해제하여 GHC가 실제로 생성하는 코드를 남겨 둡니다.</target>
        </trans-unit>
        <trans-unit id="c322cc3213fe26babdb6c814e4efa12934234d9b" translate="yes" xml:space="preserve">
          <source>and then run a small &lt;code&gt;qsort&lt;/code&gt; with tracing:</source>
          <target state="translated">그런 다음 추적 으로 작은 &lt;code&gt;qsort&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="ddf2a0569d46e773bb95b39acec93f8f9616fd41" translate="yes" xml:space="preserve">
          <source>and then the normal rules for filling in associated types from the default will apply, making &lt;code&gt;Size Bar&lt;/code&gt; equal to &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">그런 다음 기본값에서 관련 유형을 채우는 일반적인 규칙이 적용되어 &lt;code&gt;Size Bar&lt;/code&gt; 가 &lt;code&gt;Int&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7ee881b8d8c4966597ddf76a2c6819072e3ad2d8" translate="yes" xml:space="preserve">
          <source>and to get information about &lt;code&gt;D&lt;/code&gt;-the-type, use &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;D&lt;/code&gt; - &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; -type 에 대한 정보를 얻으려면 lookupTypeName을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="72e1560bd573c44690e8f372c23f99bf5c5c54f0" translate="yes" xml:space="preserve">
          <source>and to get information about &lt;code&gt;D&lt;/code&gt;-the-type, use &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;D&lt;/code&gt; - &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; -type 에 대한 정보를 얻으려면 lookupTypeName을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f1bb3adf03e7143a41d976d15feec1f47502e762" translate="yes" xml:space="preserve">
          <source>and use it in the same way. Of course this infix syntax only makes sense for binary operators; there is also a more general syntax involving special brackets:</source>
          <target state="translated">같은 방식으로 사용하십시오. 물론이 접두사 구문은 이진 연산자에만 적합합니다. 특수 괄호와 관련된 일반적인 구문도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc36b3ac9b0cab4ebdb5bc9351b8ed24cbc593ec" translate="yes" xml:space="preserve">
          <source>and you want to use arithmetic on &lt;code&gt;Dollars&lt;/code&gt;, you have to explicitly define an instance of &lt;code&gt;Num&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Dollars&lt;/code&gt; 에 산술을 사용하려면 &lt;code&gt;Num&lt;/code&gt; 인스턴스를 명시 적으로 정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3d85f61e8bf8baf82dec3b62fb3db463f9e02400" translate="yes" xml:space="preserve">
          <source>and#</source>
          <target state="translated">and#</target>
        </trans-unit>
        <trans-unit id="ce8b3c83a77157c293197da1e8ece9fd23e4db66" translate="yes" xml:space="preserve">
          <source>and, as before, the constraint &lt;code&gt;C Int [b]&lt;/code&gt; arises from &lt;code&gt;f&lt;/code&gt;&amp;lsquo;s right hand side. GHC will reject the instance, complaining as before that it does not know how to resolve the constraint &lt;code&gt;C Int [b]&lt;/code&gt;, because it matches more than one instance declaration. The solution is to postpone the choice by adding the constraint to the context of the instance declaration, thus:</source>
          <target state="translated">전과 같이, 구속 조건 &lt;code&gt;C Int [b]&lt;/code&gt; 는 &lt;code&gt;f&lt;/code&gt; 의 우측 으로부터 발생한다 . GHC는 하나 이상의 인스턴스 선언과 일치하기 때문에 제약 조건 &lt;code&gt;C Int [b]&lt;/code&gt; 를 해결하는 방법을 모른다고 불평하는 인스턴스를 거부합니다 . 해결책은 인스턴스 선언의 컨텍스트에 제약 조건을 추가하여 선택을 연기하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8257199ccb697b2284946ec000922d2ad79c7d40" translate="yes" xml:space="preserve">
          <source>and, as before, the constraint &lt;code&gt;C Int [b]&lt;/code&gt; arises from &lt;code&gt;f&lt;/code&gt;&amp;rsquo;s right hand side. GHC will reject the instance, complaining as before that it does not know how to resolve the constraint &lt;code&gt;C Int [b]&lt;/code&gt;, because it matches more than one instance declaration. The solution is to postpone the choice by adding the constraint to the context of the instance declaration, thus:</source>
          <target state="translated">이전과 마찬가지로 제약 조건 &lt;code&gt;C Int [b]&lt;/code&gt; 는 &lt;code&gt;f&lt;/code&gt; 의 오른쪽 에서 발생합니다 . GHC는 하나 이상의 인스턴스 선언과 일치하기 때문에 제약 조건 &lt;code&gt;C Int [b]&lt;/code&gt; 를 해결하는 방법을 모른다고 이전과 같이 불평하면서 인스턴스를 거부합니다 . 해결책은 인스턴스 선언의 컨텍스트에 제약 조건을 추가하여 선택을 연기하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
        <trans-unit id="51cb746cbd26ba2c83bb1c29641dd6acb59162bd" translate="yes" xml:space="preserve">
          <source>andBigNat</source>
          <target state="translated">andBigNat</target>
        </trans-unit>
        <trans-unit id="d8f45440d8ba6866f7cd5dc9bf5424e9b0b82c2f" translate="yes" xml:space="preserve">
          <source>andI#</source>
          <target state="translated">andI#</target>
        </trans-unit>
        <trans-unit id="47f0b6684dbf7a499fc68bc95f91b2dd33a57aaa" translate="yes" xml:space="preserve">
          <source>andInteger</source>
          <target state="translated">andInteger</target>
        </trans-unit>
        <trans-unit id="1b1321e7bbc9ab6c6d41f2b691ec74af95021bc8" translate="yes" xml:space="preserve">
          <source>andM</source>
          <target state="translated">andM</target>
        </trans-unit>
        <trans-unit id="814ff70e0e4573ee360322855b959e5fa7c40f93" translate="yes" xml:space="preserve">
          <source>andNatural</source>
          <target state="translated">andNatural</target>
        </trans-unit>
        <trans-unit id="5c461ca98c1ea925fc7570dbd2ef273904334489" translate="yes" xml:space="preserve">
          <source>annotate</source>
          <target state="translated">annotate</target>
        </trans-unit>
        <trans-unit id="b224d0a37a2b7e392efa9ba57defb2614389b40e" translate="yes" xml:space="preserve">
          <source>annotateIOError</source>
          <target state="translated">annotateIOError</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="0eaff237de409b9bb83d222042afab63b7aa7e45" translate="yes" xml:space="preserve">
          <source>any arguments</source>
          <target state="translated">어떤 주장</target>
        </trans-unit>
        <trans-unit id="71fd737816349a57448a748088738167c106781c" translate="yes" xml:space="preserve">
          <source>anyChar</source>
          <target state="translated">anyChar</target>
        </trans-unit>
        <trans-unit id="23f707c706019ea8a3e4c900f99f499e2129f964" translate="yes" xml:space="preserve">
          <source>anyPopup</source>
          <target state="translated">anyPopup</target>
        </trans-unit>
        <trans-unit id="3a6ae3160bdbc79be800415d5f533bcc73358975" translate="yes" xml:space="preserve">
          <source>anyToAddr#</source>
          <target state="translated">anyToAddr#</target>
        </trans-unit>
        <trans-unit id="9a61e5c837ce511951eff7447ed2c803341fc214" translate="yes" xml:space="preserve">
          <source>anyToken</source>
          <target state="translated">anyToken</target>
        </trans-unit>
        <trans-unit id="31381916f8b077eea68fc95956f9ac85845dcea8" translate="yes" xml:space="preserve">
          <source>anyclassStrategy</source>
          <target state="translated">anyclassStrategy</target>
        </trans-unit>
        <trans-unit id="112c2a063a0f6f3f9ba00da0de16624f951645e8" translate="yes" xml:space="preserve">
          <source>anywhere</source>
          <target state="translated">anywhere</target>
        </trans-unit>
        <trans-unit id="ac78b022715c5b8357b4dca8045e8463b4de2124" translate="yes" xml:space="preserve">
          <source>ap</source>
          <target state="translated">ap</target>
        </trans-unit>
        <trans-unit id="eba4c8092cbdadb7794392e190d53493bc334208" translate="yes" xml:space="preserve">
          <source>app (ArrowApply)</source>
          <target state="translated">앱 (ArrowApply)</target>
        </trans-unit>
        <trans-unit id="b3ad6eeb824a8ec02a5d5e832b7879b06ba3f19c" translate="yes" xml:space="preserve">
          <source>appE</source>
          <target state="translated">appE</target>
        </trans-unit>
        <trans-unit id="802f5d989c7e8fb560cd4b955e72235ad480c9b4" translate="yes" xml:space="preserve">
          <source>appEndo (Endo)</source>
          <target state="translated">appEndo (엔도)</target>
        </trans-unit>
        <trans-unit id="f4713737d3cbea3609f53517d475c7e6e3986e2b" translate="yes" xml:space="preserve">
          <source>appK</source>
          <target state="translated">appK</target>
        </trans-unit>
        <trans-unit id="c0e58dc12e9bd5c4adbcb30a9574b1f2780375f6" translate="yes" xml:space="preserve">
          <source>appKindT</source>
          <target state="translated">appKindT</target>
        </trans-unit>
        <trans-unit id="13a372d7a48946366bdcae29392ac2b0f5f7ff1f" translate="yes" xml:space="preserve">
          <source>appPrec</source>
          <target state="translated">appPrec</target>
        </trans-unit>
        <trans-unit id="ea808d665df6304e606fa6defa67afb2c39c79f0" translate="yes" xml:space="preserve">
          <source>appPrec1</source>
          <target state="translated">appPrec1</target>
        </trans-unit>
        <trans-unit id="cd060661c5ec3eafa096c5f8fa941dd1132de886" translate="yes" xml:space="preserve">
          <source>appT</source>
          <target state="translated">appT</target>
        </trans-unit>
        <trans-unit id="81896820296fd9273be70f37e16dacbfaf88d3d4" translate="yes" xml:space="preserve">
          <source>appTypeE</source>
          <target state="translated">appTypeE</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="dca4d637857ca4573531b3a30d8e520334044cac" translate="yes" xml:space="preserve">
          <source>append&amp;#x27;</source>
          <target state="translated">append&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="289ddd34d1c4c8e0f0b12fd9e90183d6e6e44042" translate="yes" xml:space="preserve">
          <source>appendFile</source>
          <target state="translated">appendFile</target>
        </trans-unit>
        <trans-unit id="6fc61421d8e67210538b07798f3f1fdd6e9d1d3b" translate="yes" xml:space="preserve">
          <source>applet</source>
          <target state="translated">applet</target>
        </trans-unit>
        <trans-unit id="69f45da1683c501696ebfa086d25192af3807dc6" translate="yes" xml:space="preserve">
          <source>apply</source>
          <target state="translated">apply</target>
        </trans-unit>
        <trans-unit id="3485dd31164492649d7850c2cbd3db18e0cea072" translate="yes" xml:space="preserve">
          <source>approxRational</source>
          <target state="translated">approxRational</target>
        </trans-unit>
        <trans-unit id="8d7fd28b52e8e13346543859eb3cc8e8ecf65d19" translate="yes" xml:space="preserve">
          <source>appsE</source>
          <target state="translated">appsE</target>
        </trans-unit>
        <trans-unit id="66a6d5d94fb47f2ef2a016ae65996e8ebb737df1" translate="yes" xml:space="preserve">
          <source>aqua</source>
          <target state="translated">aqua</target>
        </trans-unit>
        <trans-unit id="5a36f117812e69f1a5ab7e32a43b6e3db24618b2" translate="yes" xml:space="preserve">
          <source>arch</source>
          <target state="translated">arch</target>
        </trans-unit>
        <trans-unit id="ebfb55f4432b592119a10592e4f26272cc72359e" translate="yes" xml:space="preserve">
          <source>archive</source>
          <target state="translated">archive</target>
        </trans-unit>
        <trans-unit id="587353d9fa39c1a7c6f546af5b28c31d9eb924a3" translate="yes" xml:space="preserve">
          <source>are unaffected by &lt;code&gt;Strict&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; 의 영향을받지 않습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0ca629a075fdb2a4486bdcf79b95788644f92842" translate="yes" xml:space="preserve">
          <source>areFileApisANSI</source>
          <target state="translated">areFileApisANSI</target>
        </trans-unit>
        <trans-unit id="699e8ae92ca31d0753b1eacb9fbc3f555d78fbd6" translate="yes" xml:space="preserve">
          <source>area</source>
          <target state="translated">area</target>
        </trans-unit>
        <trans-unit id="da023efeab5413d5c77467c8faa27e7fae7632ba" translate="yes" xml:space="preserve">
          <source>argument descriptor</source>
          <target state="translated">인수 기술자</target>
        </trans-unit>
        <trans-unit id="adb0d32f4dfc9a26ee81327b9fdd7725056a7848" translate="yes" xml:space="preserve">
          <source>argvEncoding</source>
          <target state="translated">argvEncoding</target>
        </trans-unit>
        <trans-unit id="d4aa8007cc1ad1656027fb89671813afa9615288" translate="yes" xml:space="preserve">
          <source>arithSeqE</source>
          <target state="translated">arithSeqE</target>
        </trans-unit>
        <trans-unit id="b55192fbef76929083a8c47c155f2d75d1279c47" translate="yes" xml:space="preserve">
          <source>arr (Arrow)</source>
          <target state="translated">arr (화살표)</target>
        </trans-unit>
        <trans-unit id="8dc9c706f2a67ddc7029207634dc6e4e70b1196f" translate="yes" xml:space="preserve">
          <source>arrEleBottom</source>
          <target state="translated">arrEleBottom</target>
        </trans-unit>
        <trans-unit id="a667da204ed8615229188eafa47f44e91ddfec77" translate="yes" xml:space="preserve">
          <source>arrangeIconicWindows</source>
          <target state="translated">arrangeIconicWindows</target>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="translated">array</target>
        </trans-unit>
        <trans-unit id="39a531d92bbe1cfd6268cd99d999880c84640b1d" translate="yes" xml:space="preserve">
          <source>arrow</source>
          <target state="translated">arrow</target>
        </trans-unit>
        <trans-unit id="49a75ba655b6e52469ec549f06d8e82cf0c80387" translate="yes" xml:space="preserve">
          <source>arrowK</source>
          <target state="translated">arrowK</target>
        </trans-unit>
        <trans-unit id="9aff066125957e947bc0bfb08e59a5bf496963cf" translate="yes" xml:space="preserve">
          <source>arrowT</source>
          <target state="translated">arrowT</target>
        </trans-unit>
        <trans-unit id="e819945bb4cc7f0b639ef2ce6c193ee892c3a6ca" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrno&quot;&gt;throwErrno&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrno&quot;&gt;throwErrno&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="96f77b642b11d04a41a4094411649679d7a24b87" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="7a29f051d3cf3ba47d4940dab0a1b98525bf1e08" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt; 하지만, 폐기 결과.</target>
        </trans-unit>
        <trans-unit id="1bb58d8d61b0a45cdd25a0e6737c6ac8ff064c9d" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="2fda8be4ddf0842edb4c586310d4c411e6a7be79" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="f9b17066fdd54a0ee439651126df58fbfc0b71d7" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfNull&quot;&gt;throwErrnoIfNull&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIfNull&quot;&gt;throwErrnoIfNull&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="bd3956e9755ec06f0d40dc090ede99dcbb5a2c61" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIf_&quot;&gt;throwErrnoIf_&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/foreign-c-error#v:throwErrnoIf_&quot;&gt;throwErrnoIf_&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="54be1a118d09364e48eba38faac9bcdf1c280da4" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrno&quot;&gt;throwErrno&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrno&quot;&gt;throwErrno&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="6a0b769c2ab633bf9a89e72197d1fc8d90463ac4" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="83a9d24ea4357625e3019ab18f6bed7e17caada7" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt; 하지만, 폐기 결과.</target>
        </trans-unit>
        <trans-unit id="3b28d2e27982f340e764338aba91d855ff20fa4e" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="99eef91aa6b3298e186dee1eb985415200b5d76b" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="140b3d97c89285ce5f71ef6e7de14797de48d5e2" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfNull&quot;&gt;throwErrnoIfNull&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIfNull&quot;&gt;throwErrnoIfNull&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="61a900df7d46cd130c61b8d235b16fe1740b305e" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIf_&quot;&gt;throwErrnoIf_&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;../base-4.14.1.0/foreign-c-error#v:throwErrnoIf_&quot;&gt;throwErrnoIf_&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="292df3dc62007f310b3c79925b96c07e718c31aa" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;data-time-format#v:dateFmt&quot;&gt;dateFmt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;locale&lt;/code&gt; (e.g. &lt;code&gt;%m/%d/%y&lt;/code&gt;)</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;data-time-format#v:dateFmt&quot;&gt;dateFmt&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;locale&lt;/code&gt; (예 &lt;code&gt;%m/%d/%y&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="291a1609f67076e32d715dddabdba1cf4c5c5b5e" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;data-time-format#v:dateTimeFmt&quot;&gt;dateTimeFmt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;locale&lt;/code&gt; (e.g. &lt;code&gt;%a %b %e %H:%M:%S %Z %Y&lt;/code&gt;)</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;data-time-format#v:dateTimeFmt&quot;&gt;dateTimeFmt&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;locale&lt;/code&gt; (예 &lt;code&gt;%a %b %e %H:%M:%S %Z %Y&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="970b1db84cd96ca172b047731015ba6ecda1ba07" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;data-time-format#v:time12Fmt&quot;&gt;time12Fmt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;locale&lt;/code&gt; (e.g. &lt;code&gt;%I:%M:%S %p&lt;/code&gt;)</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;data-time-format#v:time12Fmt&quot;&gt;time12Fmt&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;locale&lt;/code&gt; (예 &lt;code&gt;%I:%M:%S %p&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="df1972bf94c556a7884296d05bdc48fcccce16f2" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;data-time-format#v:timeFmt&quot;&gt;timeFmt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;locale&lt;/code&gt; (e.g. &lt;code&gt;%H:%M:%S&lt;/code&gt;)</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;data-time-format#v:timeFmt&quot;&gt;timeFmt&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;locale&lt;/code&gt; (예 &lt;code&gt;%H:%M:%S&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f7e96f215927e941b653cff123cbcf2de8abbff1" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrno&quot;&gt;throwErrno&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrno&quot;&gt;throwErrno&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="bdf24192f6eeea66c9cad99a9d280aea79054142" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt;, but discards the result of the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action after error handling.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt; ,의 만 폐기 결과 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 의 오류 처리 후 작업입니다.</target>
        </trans-unit>
        <trans-unit id="a98feb25d133ec0151cd4a528cf48c56551e9f63" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="5f6c31933ee748b74fb263ed08a51305b4ea18e9" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt;, but retry the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action when it yields the error code &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eINTR&quot;&gt;eINTR&lt;/a&gt;&lt;/code&gt; - this amounts to the standard retry loop for interrupted POSIX system calls.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf&quot;&gt;throwErrnoIf&lt;/a&gt;&lt;/code&gt; 하지만, 다시 시도 &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; 는 오류 코드 산출 행동 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eINTR&quot;&gt;eINTR&lt;/a&gt;&lt;/code&gt; 중단 POSIX 시스템 호출에 대한 표준 재시도 루프에이 금액을 -.</target>
        </trans-unit>
        <trans-unit id="ed7aca01b1bcc64bdb45cf9da3e07b273e9e0df3" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt; 하지만, 폐기 결과.</target>
        </trans-unit>
        <trans-unit id="8a37df41ad608f22eddaaf22361006ad30fa864f" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1&quot;&gt;throwErrnoIfMinus1&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="4cc4fb680d1e77a08ff23d577d37af2100e211a6" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1Retry&quot;&gt;throwErrnoIfMinus1Retry&lt;/a&gt;&lt;/code&gt;, but checks for operations that would block.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1Retry&quot;&gt;throwErrnoIfMinus1Retry&lt;/a&gt;&lt;/code&gt; 은 차단 작업이지만 검사한다.</target>
        </trans-unit>
        <trans-unit id="598153ee0de2ca393ccb04fdeb820cd54cee0e16" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1RetryMayBlock&quot;&gt;throwErrnoIfMinus1RetryMayBlock&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1RetryMayBlock&quot;&gt;throwErrnoIfMinus1RetryMayBlock&lt;/a&gt;&lt;/code&gt; 하지만, 폐기 결과.</target>
        </trans-unit>
        <trans-unit id="b8edcd7d36c2fd591e6897e4332eaab46dc764e7" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="9804d1ba7b8da3c9e3a4ef99531988c78f218222" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfNull&quot;&gt;throwErrnoIfNull&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfNull&quot;&gt;throwErrnoIfNull&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="c8698d99887005060341f5b60b398465646cf6fb" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfNullRetry&quot;&gt;throwErrnoIfNullRetry&lt;/a&gt;&lt;/code&gt;, but checks for operations that would block.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfNullRetry&quot;&gt;throwErrnoIfNullRetry&lt;/a&gt;&lt;/code&gt; 은 차단 작업이지만 검사한다.</target>
        </trans-unit>
        <trans-unit id="b19b8fabcd211661d8b5390b377c495088fc70f4" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfRetry&quot;&gt;throwErrnoIfRetry&lt;/a&gt;&lt;/code&gt;, but additionally if the operation yields the error code &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eAGAIN&quot;&gt;eAGAIN&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eWOULDBLOCK&quot;&gt;eWOULDBLOCK&lt;/a&gt;&lt;/code&gt;, an alternative action is executed before retrying.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfRetry&quot;&gt;throwErrnoIfRetry&lt;/a&gt;&lt;/code&gt; 하지만 추가적으로 동작은 오류 코드 수득 경우 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eAGAIN&quot;&gt;eAGAIN&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:eWOULDBLOCK&quot;&gt;eWOULDBLOCK&lt;/a&gt;&lt;/code&gt; 대체 동작이 재 시도하기 전에 실행된다.</target>
        </trans-unit>
        <trans-unit id="1eb02da65c06d772e342d2fae781776b4596b374" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfRetry&quot;&gt;throwErrnoIfRetry&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfRetry&quot;&gt;throwErrnoIfRetry&lt;/a&gt;&lt;/code&gt; 하지만, 폐기 결과.</target>
        </trans-unit>
        <trans-unit id="41a70d526fc5d66b6e72036d342b71b990840eaf" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfRetryMayBlock&quot;&gt;throwErrnoIfRetryMayBlock&lt;/a&gt;&lt;/code&gt;, but discards the result.</source>
          <target state="translated">같은 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIfRetryMayBlock&quot;&gt;throwErrnoIfRetryMayBlock&lt;/a&gt;&lt;/code&gt; 하지만, 폐기 결과.</target>
        </trans-unit>
        <trans-unit id="669c7af8f0cadb94cd9f2b594244dcd11aacc58a" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf_&quot;&gt;throwErrnoIf_&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;foreign-c-error#v:throwErrnoIf_&quot;&gt;throwErrnoIf_&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="0743fe895c0907bd9048df44c862343c74e6cfac" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt;, but exceptions include the given path when appropriate.</source>
          <target state="translated">로 &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:throwErrnoIfMinus1_&quot;&gt;throwErrnoIfMinus1_&lt;/a&gt;&lt;/code&gt; 하지만 예외는 적절한 때 주어진 경로를 포함한다.</target>
        </trans-unit>
        <trans-unit id="4bdb9edb01ac73d5dfc0966b5d0f87bfb05bf2d4" translate="yes" xml:space="preserve">
          <source>as a variant of &lt;code&gt;putStrLn&lt;/code&gt; that will get its call-site and print it, along with the string given as argument. We can access the call-stack inside &lt;code&gt;putStrLnWithCallStack&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;ghc-stack#v:callStack&quot;&gt;callStack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;putStrLn&lt;/code&gt; 의 변형으로 호출 사이트를 가져 와서 인수로 주어진 문자열과 함께 인쇄합니다. 우리는 내부의 호출 스택에 액세스 할 수 있습니다 &lt;code&gt;putStrLnWithCallStack&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;ghc-stack#v:callStack&quot;&gt;callStack&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f6f25e3f987bc94c803c4edfff11a7724cd8a42" translate="yes" xml:space="preserve">
          <source>as the latter associates &lt;code&gt;mappend&lt;/code&gt; to the left.</source>
          <target state="translated">후자의 동료 들은 왼쪽으로 &lt;code&gt;mappend&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="0ec49f33a5c0fd6f9c40b5d1e5c86efdf6e0513e" translate="yes" xml:space="preserve">
          <source>as the latter associates &lt;code&gt;mappend&lt;/code&gt; to the left. Or, equivalently, prefer</source>
          <target state="translated">후자의 동료 들은 왼쪽으로 &lt;code&gt;mappend&lt;/code&gt; 합니다. 또는 동등하게 선호</target>
        </trans-unit>
        <trans-unit id="2f7bcccbf546e4a1340bef75a56622aaee918661" translate="yes" xml:space="preserve">
          <source>asForeignPtr</source>
          <target state="translated">asForeignPtr</target>
        </trans-unit>
        <trans-unit id="9c29488bac6732c312d5e1817af558a3ade02e0b" translate="yes" xml:space="preserve">
          <source>asP</source>
          <target state="translated">asP</target>
        </trans-unit>
        <trans-unit id="0a1a0a9d0fe57896cd23296365b42da1d2dc4c01" translate="yes" xml:space="preserve">
          <source>asProxyTypeOf</source>
          <target state="translated">asProxyTypeOf</target>
        </trans-unit>
        <trans-unit id="59cf77a30e5e610fb9842bb358fa075e5d50f012" translate="yes" xml:space="preserve">
          <source>asTypeOf</source>
          <target state="translated">asTypeOf</target>
        </trans-unit>
        <trans-unit id="51c066b36ea8b32076964c766f8a0324ca4eb4b9" translate="yes" xml:space="preserve">
          <source>ascii</source>
          <target state="translated">ascii</target>
        </trans-unit>
        <trans-unit id="da10be596dd940edab68f6508f410c8033a12c17" translate="yes" xml:space="preserve">
          <source>asciiTab</source>
          <target state="translated">asciiTab</target>
        </trans-unit>
        <trans-unit id="3b7c2523ef37662f91fb9233bee7fc9451493c6a" translate="yes" xml:space="preserve">
          <source>ascii_decode</source>
          <target state="translated">ascii_decode</target>
        </trans-unit>
        <trans-unit id="c60994a2e4ac1f3ba12a2bd38fd2ed607346c0bd" translate="yes" xml:space="preserve">
          <source>ascii_encode</source>
          <target state="translated">ascii_encode</target>
        </trans-unit>
        <trans-unit id="ca2d03115a335901df8d495a843c04f7cc55294c" translate="yes" xml:space="preserve">
          <source>ashley@semantic.org</source>
          <target state="translated">ashley@semantic.org</target>
        </trans-unit>
        <trans-unit id="8ab4958aa4c54efdc364c319ca6616fd33eab112" translate="yes" xml:space="preserve">
          <source>asin (Floating)</source>
          <target state="translated">asin (부동)</target>
        </trans-unit>
        <trans-unit id="0c63938f823ed86bbe8104784ae1d8817a7e3686" translate="yes" xml:space="preserve">
          <source>asinDouble</source>
          <target state="translated">asinDouble</target>
        </trans-unit>
        <trans-unit id="aadb01d2056340843324c3da5565923a1eca49ea" translate="yes" xml:space="preserve">
          <source>asinDouble#</source>
          <target state="translated">asinDouble#</target>
        </trans-unit>
        <trans-unit id="4d1b4aa15ef446aaf2f36efe1163d12eadce3150" translate="yes" xml:space="preserve">
          <source>asinFloat</source>
          <target state="translated">asinFloat</target>
        </trans-unit>
        <trans-unit id="466d0916fd029dd1a0be7a1ddad3a0a8d6022554" translate="yes" xml:space="preserve">
          <source>asinFloat#</source>
          <target state="translated">asinFloat#</target>
        </trans-unit>
        <trans-unit id="6f5241ed5c8c1d065bcdd826ec0db80b2c41f9d5" translate="yes" xml:space="preserve">
          <source>asinh (Floating)</source>
          <target state="translated">asinh (부동)</target>
        </trans-unit>
        <trans-unit id="6a3a79e625e3c37b27c88131adf3361a4bbd3b51" translate="yes" xml:space="preserve">
          <source>asinhDouble</source>
          <target state="translated">asinhDouble</target>
        </trans-unit>
        <trans-unit id="bb15e70a287c413a82c6520b9672b673bc72f23c" translate="yes" xml:space="preserve">
          <source>asinhDouble#</source>
          <target state="translated">asinhDouble#</target>
        </trans-unit>
        <trans-unit id="0ddf6991a935b88788a9c19aaba2458e17863c64" translate="yes" xml:space="preserve">
          <source>asinhFloat</source>
          <target state="translated">asinhFloat</target>
        </trans-unit>
        <trans-unit id="73575de3303288f9d3181229eed89e6146960f3a" translate="yes" xml:space="preserve">
          <source>asinhFloat#</source>
          <target state="translated">asinhFloat#</target>
        </trans-unit>
        <trans-unit id="1c8f09270fc33a393af3eaf0b2ebf58eb9bbbcc2" translate="yes" xml:space="preserve">
          <source>ask</source>
          <target state="translated">ask</target>
        </trans-unit>
        <trans-unit id="26b0aff2ef859d930a04e2bd423d2b11109c8b4b" translate="yes" xml:space="preserve">
          <source>ask (MonadReader)</source>
          <target state="translated">묻다 (MonadReader)</target>
        </trans-unit>
        <trans-unit id="a2f8909c86e91117070277875fbe03ff7e61c8a8" translate="yes" xml:space="preserve">
          <source>asks</source>
          <target state="translated">asks</target>
        </trans-unit>
        <trans-unit id="5b9a307943f0d16237239e002d1dd9ba522e93aa" translate="yes" xml:space="preserve">
          <source>aslatter@gmail.com</source>
          <target state="translated">aslatter@gmail.com</target>
        </trans-unit>
        <trans-unit id="cd2e8cfa846b1038a2c00c38e0753eb7f162dc23" translate="yes" xml:space="preserve">
          <source>assembler</source>
          <target state="translated">assembler</target>
        </trans-unit>
        <trans-unit id="64b5daad5073849378993ba34e058d7008293097" translate="yes" xml:space="preserve">
          <source>assert</source>
          <target state="translated">assert</target>
        </trans-unit>
        <trans-unit id="331818bdb6b82eee2ad1926a159dee726d981108" translate="yes" xml:space="preserve">
          <source>assertError</source>
          <target state="translated">assertError</target>
        </trans-unit>
        <trans-unit id="20eaf0193c1a0e9284d8a930cf806a43ab9fb8d4" translate="yes" xml:space="preserve">
          <source>association list</source>
          <target state="translated">협회 목록</target>
        </trans-unit>
        <trans-unit id="e58c4b53165caa444bed9a1d506569c916774721" translate="yes" xml:space="preserve">
          <source>assocs</source>
          <target state="translated">assocs</target>
        </trans-unit>
        <trans-unit id="cccf0912d9c37aa31708ddf4ec02b6da7101c49c" translate="yes" xml:space="preserve">
          <source>asum</source>
          <target state="translated">asum</target>
        </trans-unit>
        <trans-unit id="bf4172a1b40fa1ad58df6d838b23b886f07ca355" translate="yes" xml:space="preserve">
          <source>asyncExceptionFromException</source>
          <target state="translated">asyncExceptionFromException</target>
        </trans-unit>
        <trans-unit id="f6ad4d48a787677d35259d8dfe8b961a822239ef" translate="yes" xml:space="preserve">
          <source>asyncExceptionToException</source>
          <target state="translated">asyncExceptionToException</target>
        </trans-unit>
        <trans-unit id="f27f1bd487bd79ecde66ad956cc1b76df04a2b93" translate="yes" xml:space="preserve">
          <source>asynchronous exceptions are unmasked (the normal state)</source>
          <target state="translated">비동기 예외가 마스크 해제 됨 (정상 상태)</target>
        </trans-unit>
        <trans-unit id="ac16cfd6ae8d97d8022bfbfb2185827798fcd682" translate="yes" xml:space="preserve">
          <source>asynchronous: the actual putMVar may be performed after the call returns (for example, if the RTS is currently garbage collecting). That&amp;rsquo;s why &lt;code&gt;hs_try_putmvar()&lt;/code&gt; doesn&amp;rsquo;t return a result to say whether the put succeeded. It is your responsibility to ensure that the &lt;code&gt;MVar&lt;/code&gt; is empty; if it is full, &lt;code&gt;hs_try_putmvar()&lt;/code&gt; will have no effect.</source>
          <target state="translated">비동기 : 호출이 리턴 된 후 (예 : RTS가 현재 가비지 수집중인 경우) 실제 putMVar이 수행 될 수 있습니다. 이것이 &lt;code&gt;hs_try_putmvar()&lt;/code&gt; 가 풋이 성공했는지 여부를 나타내는 결과를 반환하지 않는 이유 입니다. &lt;code&gt;MVar&lt;/code&gt; 가 비어 있는지 확인하는 것은 귀하의 책임 입니다. 가득 차면 &lt;code&gt;hs_try_putmvar()&lt;/code&gt; 는 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="07e381931523b54b284216ff3f12c77f8a1babc7" translate="yes" xml:space="preserve">
          <source>at compile-time, using &lt;code&gt;-with-rtsopts=⟨opts⟩&lt;/code&gt; (&lt;a href=&quot;#rts-opts-compile-time&quot;&gt;Setting RTS options at compile time&lt;/a&gt;)</source>
          <target state="translated">컴파일시에 사용 &lt;code&gt;-with-rtsopts=⟨opts⟩&lt;/code&gt; ( &lt;a href=&quot;#rts-opts-compile-time&quot;&gt;컴파일시에 RTS 옵션 설정&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="841382eece6b02b23cdf81905c9c082c29dd6750" translate="yes" xml:space="preserve">
          <source>at least for strict &lt;code&gt;k&lt;/code&gt;. (This should be automatic if you&amp;rsquo;re not using &lt;code&gt;seq&lt;/code&gt;.) This ensures that environments seen by the subcommands are environments of the whole command, and also allows the translation to safely trim these environments. (The second component of the input pairs can contain unnamed input values, as described in the next section.) The operator must also not use any variable defined within the current arrow abstraction.</source>
          <target state="translated">적어도 엄격한 &lt;code&gt;k&lt;/code&gt; . ( &lt;code&gt;seq&lt;/code&gt; 를 사용하지 않는 경우 자동으로 수행되어야합니다 .) 이는 부속 명령이 표시하는 환경이 전체 명령의 환경이되도록하며 변환이 이러한 환경을 안전하게 다듬을 수있게합니다. 입력 쌍의 두 번째 구성 요소는 다음 섹션에서 설명하는 것처럼 이름이없는 입력 값을 포함 할 수 있습니다. 또한 작업자는 현재 화살표 추상화 내에 정의 된 변수를 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="dc8a09c1c2595ed7a7a3b2986b6d0807e3341155" translate="yes" xml:space="preserve">
          <source>at the prompt.</source>
          <target state="translated">프롬프트에서.</target>
        </trans-unit>
        <trans-unit id="686eeca8176d8cc53292cd978c09588d3431b398" translate="yes" xml:space="preserve">
          <source>at top level</source>
          <target state="translated">최상위</target>
        </trans-unit>
        <trans-unit id="279683d42bd96937141868b95971f01746b87ca9" translate="yes" xml:space="preserve">
          <source>atan2 (RealFloat)</source>
          <target state="translated">atan2 (RealFloat)</target>
        </trans-unit>
        <trans-unit id="4a27b4dad5038f014c060a6e03423dd5683cd2e1" translate="yes" xml:space="preserve">
          <source>atanDouble</source>
          <target state="translated">atanDouble</target>
        </trans-unit>
        <trans-unit id="791c56b87f8aeac733c32f85c17be8c1d6e8ff2d" translate="yes" xml:space="preserve">
          <source>atanDouble#</source>
          <target state="translated">atanDouble#</target>
        </trans-unit>
        <trans-unit id="12a19eaa6a0a56b112ead4430aa9de73d52a5937" translate="yes" xml:space="preserve">
          <source>atanFloat</source>
          <target state="translated">atanFloat</target>
        </trans-unit>
        <trans-unit id="fb74964bdc54ca68a808186703fa440baf02fca5" translate="yes" xml:space="preserve">
          <source>atanFloat#</source>
          <target state="translated">atanFloat#</target>
        </trans-unit>
        <trans-unit id="17590fa63d5b0284f1a569d89f38e04818c73107" translate="yes" xml:space="preserve">
          <source>atanhDouble</source>
          <target state="translated">atanhDouble</target>
        </trans-unit>
        <trans-unit id="ea9fd29206ac6a7fd6e13be3ba89509ac3bf4fa2" translate="yes" xml:space="preserve">
          <source>atanhDouble#</source>
          <target state="translated">atanhDouble#</target>
        </trans-unit>
        <trans-unit id="d8f70827d2119a01785ddde4cddcf40bbd328905" translate="yes" xml:space="preserve">
          <source>atanhFloat</source>
          <target state="translated">atanhFloat</target>
        </trans-unit>
        <trans-unit id="ca6c218f732b3a65fde0a91d2c0c8bb32bc18a54" translate="yes" xml:space="preserve">
          <source>atanhFloat#</source>
          <target state="translated">atanhFloat#</target>
        </trans-unit>
        <trans-unit id="37f2a114321eb35683cbe582c206f91b9444919f" translate="yes" xml:space="preserve">
          <source>atomicModifyIORef</source>
          <target state="translated">atomicModifyIORef</target>
        </trans-unit>
        <trans-unit id="aaab5fca3a784d01a1fa679f7b3bda0da428539f" translate="yes" xml:space="preserve">
          <source>atomicModifyIORef&amp;#x27;</source>
          <target state="translated">atomicModifyIORef&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="76498065a0459b00d75f1486b688eff4bb5daf79" translate="yes" xml:space="preserve">
          <source>atomicModifyIORef&amp;#x27;_</source>
          <target state="translated">atomicModifyIORef&amp;#x27;_</target>
        </trans-unit>
        <trans-unit id="59ba5625a988c56daa8a4477ef1b473e13245e69" translate="yes" xml:space="preserve">
          <source>atomicModifyIORef2</source>
          <target state="translated">atomicModifyIORef2</target>
        </trans-unit>
        <trans-unit id="e5070f03e1c36359942e14319ab0a04fa1a8efd3" translate="yes" xml:space="preserve">
          <source>atomicModifyIORef2Lazy</source>
          <target state="translated">atomicModifyIORef2Lazy</target>
        </trans-unit>
        <trans-unit id="5c79d9a757131488cca33cafd56d14c09d974504" translate="yes" xml:space="preserve">
          <source>atomicModifyIORefLazy_</source>
          <target state="translated">atomicModifyIORefLazy_</target>
        </trans-unit>
        <trans-unit id="6baa1456309aa779040c8e3898b95a3cd5941d2d" translate="yes" xml:space="preserve">
          <source>atomicModifyIORefP</source>
          <target state="translated">atomicModifyIORefP</target>
        </trans-unit>
        <trans-unit id="277573c1ff027b94839102be35105dac13beb430" translate="yes" xml:space="preserve">
          <source>atomicModifyMutVar#</source>
          <target state="translated">atomicModifyMutVar#</target>
        </trans-unit>
        <trans-unit id="cf9bcd290c284cca99a1a92d8d23c1e33c369948" translate="yes" xml:space="preserve">
          <source>atomicModifyMutVar2#</source>
          <target state="translated">atomicModifyMutVar2#</target>
        </trans-unit>
        <trans-unit id="8afe9283db349a10f51bf06015ef958b0005d2bf" translate="yes" xml:space="preserve">
          <source>atomicModifyMutVar_#</source>
          <target state="translated">atomicModifyMutVar_#</target>
        </trans-unit>
        <trans-unit id="571d2c16821da3f0d253347c1452ec53d054f56c" translate="yes" xml:space="preserve">
          <source>atomicReadIntArray#</source>
          <target state="translated">atomicReadIntArray#</target>
        </trans-unit>
        <trans-unit id="8958e94565e0dd853f3923753d1550276eafdb75" translate="yes" xml:space="preserve">
          <source>atomicSwapIORef</source>
          <target state="translated">atomicSwapIORef</target>
        </trans-unit>
        <trans-unit id="1650c5513a5c658d9f0f7869503d84921f910e31" translate="yes" xml:space="preserve">
          <source>atomicWriteIORef</source>
          <target state="translated">atomicWriteIORef</target>
        </trans-unit>
        <trans-unit id="5c1ff7d510d6a193972699afa30c4cb601de7002" translate="yes" xml:space="preserve">
          <source>atomicWriteIntArray#</source>
          <target state="translated">atomicWriteIntArray#</target>
        </trans-unit>
        <trans-unit id="035c31229bf4f528a298d211c7911c455d388b84" translate="yes" xml:space="preserve">
          <source>atomically</source>
          <target state="translated">atomically</target>
        </trans-unit>
        <trans-unit id="df2fb53fcb53403bb5fdd797b42e38c59407cede" translate="yes" xml:space="preserve">
          <source>atomically#</source>
          <target state="translated">atomically#</target>
        </trans-unit>
        <trans-unit id="b33ef518505469185ccab5a61fb50217dab84a35" translate="yes" xml:space="preserve">
          <source>attempts to parse a value from the front of the string, returning a list of (parsed value, remaining string) pairs. If there is no successful parse, the returned list is empty.</source>
          <target state="translated">문자열의 앞쪽에서 값을 구문 분석하여 (구문 분석 된 값, 나머지 문자열) 쌍의 목록을 반환합니다. 구문 분석에 성공하지 못하면 리턴 된 목록이 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6bc890ddcf8a44060c47dafdb46321b799b3f05" translate="yes" xml:space="preserve">
          <source>augment</source>
          <target state="translated">augment</target>
        </trans-unit>
        <trans-unit id="d13b4658cef0107758394496a571bcb9a325039f" translate="yes" xml:space="preserve">
          <source>augmentIOError</source>
          <target state="translated">augmentIOError</target>
        </trans-unit>
        <trans-unit id="5a75ab98e10ba559ee7bc1a7009d08c5d6da36a7" translate="yes" xml:space="preserve">
          <source>autoLeftMargin</source>
          <target state="translated">autoLeftMargin</target>
        </trans-unit>
        <trans-unit id="90d8d7a015405319a777247de83767f218d4afb0" translate="yes" xml:space="preserve">
          <source>autoRightMargin</source>
          <target state="translated">autoRightMargin</target>
        </trans-unit>
        <trans-unit id="808de801e98ad6b34bce4b8ca076574a52a93aed" translate="yes" xml:space="preserve">
          <source>avoiding a few redundant allocations</source>
          <target state="translated">중복 할당을 피하십시오</target>
        </trans-unit>
        <trans-unit id="3446c7d499589ede568f2c16f54669c219ded4e8" translate="yes" xml:space="preserve">
          <source>awaitSignal</source>
          <target state="translated">awaitSignal</target>
        </trans-unit>
        <trans-unit id="248a20b62efba8f4303c75830c83230f1b088f1e" translate="yes" xml:space="preserve">
          <source>background</source>
          <target state="translated">background</target>
        </trans-unit>
        <trans-unit id="f54b7ea09b331b8019120b505ad8db889f36e065" translate="yes" xml:space="preserve">
          <source>backgroundRead</source>
          <target state="translated">backgroundRead</target>
        </trans-unit>
        <trans-unit id="2140356f0e9b5ffe96dd20d4b68a8dab81e31e9d" translate="yes" xml:space="preserve">
          <source>backgroundWrite</source>
          <target state="translated">backgroundWrite</target>
        </trans-unit>
        <trans-unit id="4ddac83c47bfe8a4e056b0e440bd90d679ba18c8" translate="yes" xml:space="preserve">
          <source>badIO</source>
          <target state="translated">badIO</target>
        </trans-unit>
        <trans-unit id="54794ca033082925c04a6e2c1e3e1c9b459a6ed0" translate="yes" xml:space="preserve">
          <source>badSafeIndex</source>
          <target state="translated">badSafeIndex</target>
        </trans-unit>
        <trans-unit id="7b6bc3e94c887f46e187788740be96cdf64e1aa0" translate="yes" xml:space="preserve">
          <source>badSystemCall</source>
          <target state="translated">badSystemCall</target>
        </trans-unit>
        <trans-unit id="6217e69f789ed5f163d5136d4ae52dcd00b047a7" translate="yes" xml:space="preserve">
          <source>balanced</source>
          <target state="translated">balanced</target>
        </trans-unit>
        <trans-unit id="0ab79927a592f1727d4d2c6abd69b159462b349d" translate="yes" xml:space="preserve">
          <source>bang</source>
          <target state="translated">bang</target>
        </trans-unit>
        <trans-unit id="8e0470d66678fb379e74f57f2c01044d53046aa6" translate="yes" xml:space="preserve">
          <source>bangP</source>
          <target state="translated">bangP</target>
        </trans-unit>
        <trans-unit id="bd48a75a6e210331105de89ac8faf7be41bdceab" translate="yes" xml:space="preserve">
          <source>bangType</source>
          <target state="translated">bangType</target>
        </trans-unit>
        <trans-unit id="62cdb7020ff920e5aa642c3d4066950dd1f01f4d" translate="yes" xml:space="preserve">
          <source>bar</source>
          <target state="translated">bar</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="29569af7293fbb608560d9e9c3e35c7c3a817c10" translate="yes" xml:space="preserve">
          <source>base-2 logarithm of &lt;em&gt;blk_sz&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;blk_sz의&lt;/em&gt; 밑이 2 인 로그 .</target>
        </trans-unit>
        <trans-unit id="e020ea1ef8f134b08044839fe5697e90f67435d1" translate="yes" xml:space="preserve">
          <source>basefont</source>
          <target state="translated">basefont</target>
        </trans-unit>
        <trans-unit id="e87b45953875b7caad2f0266b83919ebff7fb937" translate="yes" xml:space="preserve">
          <source>bcc</source>
          <target state="translated">bcc</target>
        </trans-unit>
        <trans-unit id="910273218ae5b885464f7e6c8bddecee249e65f5" translate="yes" xml:space="preserve">
          <source>bdo</source>
          <target state="translated">bdo</target>
        </trans-unit>
        <trans-unit id="ebdd7551b2d98e64c961486c2a3a6ff2c8f830d7" translate="yes" xml:space="preserve">
          <source>because GHC does not allow type constructors applied to for-all types.</source>
          <target state="translated">GHC는 형식 생성자를 모든 형식에 적용 할 수 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e805ee658f9c460b06720196966dd85296d6e4bb" translate="yes" xml:space="preserve">
          <source>because according to the report, the &lt;code&gt;let&lt;/code&gt; expression &amp;ldquo;extends as far to the right as possible&amp;rdquo;. Since it can&amp;rsquo;t extend past the second equals sign without causing a parse error (&lt;code&gt;==&lt;/code&gt; is non-fix), the &lt;code&gt;let&lt;/code&gt;-expression must terminate there. GHC simply gobbles up the whole expression, parsing like this:</source>
          <target state="translated">보고서에 따르면, &lt;code&gt;let&lt;/code&gt; 표현은&amp;ldquo;가능한 한 오른쪽으로 확장됩니다&amp;rdquo;. 구문 분석 오류를 발생시키지 않고 두 번째 등호를 넘어 확장 할 수 없으므로 ( &lt;code&gt;==&lt;/code&gt; 수정이 아님) &lt;code&gt;let&lt;/code&gt; -expression이 종료되어야합니다. GHC는 단순히 다음과 같이 파싱하면서 전체 표현을 복잡하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="abe60f172be3b07770a2e3323f768af75903c1cc" translate="yes" xml:space="preserve">
          <source>because it moves several variables out of the inner loop.</source>
          <target state="translated">내부 루프 밖으로 여러 변수를 이동시키기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d9901eccb94d56def92a11f936488f5aa3028af1" translate="yes" xml:space="preserve">
          <source>because layout translates it as</source>
          <target state="translated">레이아웃은 그것을 다음과 같이 번역하기 때문에</target>
        </trans-unit>
        <trans-unit id="93d53ed69a40db0047beb9ee6c816d706547b112" translate="yes" xml:space="preserve">
          <source>because the derived instance</source>
          <target state="translated">파생 된 인스턴스 때문에</target>
        </trans-unit>
        <trans-unit id="275b55ce602c1618ed593dac2e71ff8868de2c13" translate="yes" xml:space="preserve">
          <source>because the type variable &lt;code&gt;s&lt;/code&gt; occurs in &lt;code&gt;State s m&lt;/code&gt;, and so cannot be &amp;ldquo;eta-converted&amp;rdquo; away. It is a good thing that this &lt;code&gt;deriving&lt;/code&gt; clause is rejected, because &lt;code&gt;NonMonad m&lt;/code&gt; is not, in fact, a monad &amp;mdash; for the same reason. Try defining &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; with the correct type: you won&amp;rsquo;t be able to.</source>
          <target state="translated">타입 변수 &lt;code&gt;s&lt;/code&gt; 는 &lt;code&gt;State s m&lt;/code&gt; 에서 발생 하기 때문에 &quot;eta 변환&quot;할 수 없습니다. &lt;code&gt;NonMonad m&lt;/code&gt; 도 같은 이유로 모나드가 아니기 때문에이 &lt;code&gt;deriving&lt;/code&gt; 조항이 거부 되는 것이 좋습니다 . 올바른 유형으로 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 를 정의 해보십시오 . 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c02ceb78ff4863ee1a75d232c4f53af56b182ec9" translate="yes" xml:space="preserve">
          <source>becomes:</source>
          <target state="translated">becomes:</target>
        </trans-unit>
        <trans-unit id="25d4f172feced085f8da17d458f640ffad47ca65" translate="yes" xml:space="preserve">
          <source>beginDeferWindowPos</source>
          <target state="translated">beginDeferWindowPos</target>
        </trans-unit>
        <trans-unit id="bf5b6f618f1773563185d77326e1f1c36867708e" translate="yes" xml:space="preserve">
          <source>beginPaint</source>
          <target state="translated">beginPaint</target>
        </trans-unit>
        <trans-unit id="04bf886e8ac26aef79ce20e35be5e4e7220e2db3" translate="yes" xml:space="preserve">
          <source>bell</source>
          <target state="translated">bell</target>
        </trans-unit>
        <trans-unit id="d1c8869983ffe3b4f9abe1dc851bda61399ef6e6" translate="yes" xml:space="preserve">
          <source>beside</source>
          <target state="translated">beside</target>
        </trans-unit>
        <trans-unit id="94a325fbad774506643bcbe612567eb0ffe5f2fe" translate="yes" xml:space="preserve">
          <source>besides</source>
          <target state="translated">besides</target>
        </trans-unit>
        <trans-unit id="709634051471385aada32356842983beeff4b065" translate="yes" xml:space="preserve">
          <source>between</source>
          <target state="translated">between</target>
        </trans-unit>
        <trans-unit id="a0cdafd233cbaab2a9872ea8f8ae7581da6ba991" translate="yes" xml:space="preserve">
          <source>betweenSize</source>
          <target state="translated">betweenSize</target>
        </trans-unit>
        <trans-unit id="870d252224979a90e62fe3dfae2a37da5097e6fa" translate="yes" xml:space="preserve">
          <source>bgcolor</source>
          <target state="translated">bgcolor</target>
        </trans-unit>
        <trans-unit id="5fe1effab7e467663478de549c8df90ff86372b0" translate="yes" xml:space="preserve">
          <source>biList</source>
          <target state="translated">biList</target>
        </trans-unit>
        <trans-unit id="a29450bec3a3589b279c0948b8063a67ac9e0757" translate="yes" xml:space="preserve">
          <source>biall</source>
          <target state="translated">biall</target>
        </trans-unit>
        <trans-unit id="00f0211353249bf0e58ba56c7be776f845161e55" translate="yes" xml:space="preserve">
          <source>biand</source>
          <target state="translated">biand</target>
        </trans-unit>
        <trans-unit id="0ed64e17fbcb9435a4b0fb68b00971aaad576558" translate="yes" xml:space="preserve">
          <source>biany</source>
          <target state="translated">biany</target>
        </trans-unit>
        <trans-unit id="41322bdf72449d66ef86f0acb2b5e5cba0392d22" translate="yes" xml:space="preserve">
          <source>biasum</source>
          <target state="translated">biasum</target>
        </trans-unit>
        <trans-unit id="6d0b73fbf7591ec6a14fcf194cd7154596972155" translate="yes" xml:space="preserve">
          <source>biconcat</source>
          <target state="translated">biconcat</target>
        </trans-unit>
        <trans-unit id="0beef8ddc76a511f095195bb24509617d0506ea1" translate="yes" xml:space="preserve">
          <source>biconcatMap</source>
          <target state="translated">biconcatMap</target>
        </trans-unit>
        <trans-unit id="e82a328908f724f886dd94265a71641504d6fa3e" translate="yes" xml:space="preserve">
          <source>bielem</source>
          <target state="translated">bielem</target>
        </trans-unit>
        <trans-unit id="40acb1a8fbde0ccfb9056001870625497a46d9bd" translate="yes" xml:space="preserve">
          <source>bifind</source>
          <target state="translated">bifind</target>
        </trans-unit>
        <trans-unit id="9e4a7383da4d79a93f908a594eb6a160011fc94f" translate="yes" xml:space="preserve">
          <source>bifold (Bifoldable)</source>
          <target state="translated">이중 (겹)</target>
        </trans-unit>
        <trans-unit id="bcb0288dc54254a2d7108d44583a2b0b43c0ee3b" translate="yes" xml:space="preserve">
          <source>bifoldMap (Bifoldable)</source>
          <target state="translated">bifoldMap (접이식)</target>
        </trans-unit>
        <trans-unit id="102fdda1302e8724f8058b275be3811d36ccf065" translate="yes" xml:space="preserve">
          <source>bifoldMapDefault</source>
          <target state="translated">bifoldMapDefault</target>
        </trans-unit>
        <trans-unit id="faa946782e982acac423fbaed8864996776d423c" translate="yes" xml:space="preserve">
          <source>bifoldl (Bifoldable)</source>
          <target state="translated">이중 폴더</target>
        </trans-unit>
        <trans-unit id="294b3c9c0ab8b163852b2650d5ed4ca6cc054ad8" translate="yes" xml:space="preserve">
          <source>bifoldl&amp;#x27;</source>
          <target state="translated">bifoldl&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="e0b522e3492c89197e5b5897a798b9e3ef91d191" translate="yes" xml:space="preserve">
          <source>bifoldl1</source>
          <target state="translated">bifoldl1</target>
        </trans-unit>
        <trans-unit id="cc84226c264bf11d1035ff4d949b8a23fed5c607" translate="yes" xml:space="preserve">
          <source>bifoldlM</source>
          <target state="translated">bifoldlM</target>
        </trans-unit>
        <trans-unit id="296f5ac551c6b9df1c50a5e987015a09b1459d8c" translate="yes" xml:space="preserve">
          <source>bifoldr (Bifoldable)</source>
          <target state="translated">이중 폴더 (접이식)</target>
        </trans-unit>
        <trans-unit id="2439b81ecf3182d30e5de2eb92002a889d209b1f" translate="yes" xml:space="preserve">
          <source>bifoldr&amp;#x27;</source>
          <target state="translated">bifoldr&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="6cb4a2f54985dae435a7108865c2684e50f1c5cd" translate="yes" xml:space="preserve">
          <source>bifoldr1</source>
          <target state="translated">bifoldr1</target>
        </trans-unit>
        <trans-unit id="99b60545e479d2e7e89f2bcb80c280a69826ca62" translate="yes" xml:space="preserve">
          <source>bifoldrM</source>
          <target state="translated">bifoldrM</target>
        </trans-unit>
        <trans-unit id="b2fe64680fbd74762cadc29f110644de5956c06f" translate="yes" xml:space="preserve">
          <source>bifor</source>
          <target state="translated">bifor</target>
        </trans-unit>
        <trans-unit id="c3d643ddc50a496e9889b78779b57c7b08cffb10" translate="yes" xml:space="preserve">
          <source>biforM</source>
          <target state="translated">biforM</target>
        </trans-unit>
        <trans-unit id="9691cda04cf6118ce3f9ece627fc30026b94bcb7" translate="yes" xml:space="preserve">
          <source>biforM_</source>
          <target state="translated">biforM_</target>
        </trans-unit>
        <trans-unit id="4221cf4ea6c18a13c3ab25d96211126fbc01dc1c" translate="yes" xml:space="preserve">
          <source>bifor_</source>
          <target state="translated">bifor_</target>
        </trans-unit>
        <trans-unit id="95c4bea12e4edcf8aad730a222793324dc42c29d" translate="yes" xml:space="preserve">
          <source>big</source>
          <target state="translated">big</target>
        </trans-unit>
        <trans-unit id="4654e62302abbca1dc8c5be7cfbf7cc32e30a206" translate="yes" xml:space="preserve">
          <source>bigNatToInt</source>
          <target state="translated">bigNatToInt</target>
        </trans-unit>
        <trans-unit id="12bf4403c477d2f174b7d780e129891e6ea93038" translate="yes" xml:space="preserve">
          <source>bigNatToInteger</source>
          <target state="translated">bigNatToInteger</target>
        </trans-unit>
        <trans-unit id="692962999d7f315287cc6ce21ef6dc2e8f1a97bd" translate="yes" xml:space="preserve">
          <source>bigNatToNegInteger</source>
          <target state="translated">bigNatToNegInteger</target>
        </trans-unit>
        <trans-unit id="e0d17b7bff18e538276fea9a638fe1132106520f" translate="yes" xml:space="preserve">
          <source>bigNatToWord</source>
          <target state="translated">bigNatToWord</target>
        </trans-unit>
        <trans-unit id="53e563d0c86b8ceed31c0faa7603f12bc5d0086f" translate="yes" xml:space="preserve">
          <source>bilength</source>
          <target state="translated">bilength</target>
        </trans-unit>
        <trans-unit id="17047bdfe2ff0b0f30babdc53b7c185fcfac6a70" translate="yes" xml:space="preserve">
          <source>bimap (Bifunctor)</source>
          <target state="translated">바이 맵 (Bifunctor)</target>
        </trans-unit>
        <trans-unit id="6610bd2cd6d018c2df92eedba8ea4e6874036c18" translate="yes" xml:space="preserve">
          <source>bimapAccumL</source>
          <target state="translated">bimapAccumL</target>
        </trans-unit>
        <trans-unit id="98e3164e93f32b7d4254d2c099a7bbbea5112a6c" translate="yes" xml:space="preserve">
          <source>bimapAccumR</source>
          <target state="translated">bimapAccumR</target>
        </trans-unit>
        <trans-unit id="dc31914fd4bafde0a7f3445b8b9d59f06f2cc059" translate="yes" xml:space="preserve">
          <source>bimapDefault</source>
          <target state="translated">bimapDefault</target>
        </trans-unit>
        <trans-unit id="8875024c342221102e8396f338452d97261b0833" translate="yes" xml:space="preserve">
          <source>bimapM</source>
          <target state="translated">bimapM</target>
        </trans-unit>
        <trans-unit id="b1e5aaa3ec6c63ea26a55db8ec127f457ea158f2" translate="yes" xml:space="preserve">
          <source>bimapM_</source>
          <target state="translated">bimapM_</target>
        </trans-unit>
        <trans-unit id="40de4e7c019ce55c0cc23bf04f384b14ee1e34b7" translate="yes" xml:space="preserve">
          <source>bimaximum</source>
          <target state="translated">bimaximum</target>
        </trans-unit>
        <trans-unit id="1510e419b048cbba88d1280f8dee38fb37dfa80d" translate="yes" xml:space="preserve">
          <source>bimaximumBy</source>
          <target state="translated">bimaximumBy</target>
        </trans-unit>
        <trans-unit id="e50dbcfb24621fae138a21f53b2773f4e1e5a24e" translate="yes" xml:space="preserve">
          <source>biminimum</source>
          <target state="translated">biminimum</target>
        </trans-unit>
        <trans-unit id="ad9cdb8a48f31c54a908a01a732d12df66cf5d02" translate="yes" xml:space="preserve">
          <source>biminimumBy</source>
          <target state="translated">biminimumBy</target>
        </trans-unit>
        <trans-unit id="af20a4bb0a3ad35ebad1b6b67ec11fb91cea0a5a" translate="yes" xml:space="preserve">
          <source>bimsum</source>
          <target state="translated">bimsum</target>
        </trans-unit>
        <trans-unit id="3cb377e066ede6e6f04f2b56ec085a0f25109b81" translate="yes" xml:space="preserve">
          <source>bindIO</source>
          <target state="translated">bindIO</target>
        </trans-unit>
        <trans-unit id="93896c4721c10251f7a1b788ab491ae442e79881" translate="yes" xml:space="preserve">
          <source>bindQ</source>
          <target state="translated">bindQ</target>
        </trans-unit>
        <trans-unit id="744146c4af990823a3a16ee1258ec54a315bb733" translate="yes" xml:space="preserve">
          <source>bindS</source>
          <target state="translated">bindS</target>
        </trans-unit>
        <trans-unit id="1dade36213d96ce86f55416ca6794efa60c21ad2" translate="yes" xml:space="preserve">
          <source>binotElem</source>
          <target state="translated">binotElem</target>
        </trans-unit>
        <trans-unit id="5b99e762557d42112f3c1c2543bdab268e20bfa3" translate="yes" xml:space="preserve">
          <source>binull</source>
          <target state="translated">binull</target>
        </trans-unit>
        <trans-unit id="3de4a52f42bb2bec1bc3e2822d29712faee37977" translate="yes" xml:space="preserve">
          <source>biography filter</source>
          <target state="translated">전기 필터</target>
        </trans-unit>
        <trans-unit id="97bc6e68e0164c59650e60f80dd8cb462aa6bc74" translate="yes" xml:space="preserve">
          <source>bior</source>
          <target state="translated">bior</target>
        </trans-unit>
        <trans-unit id="56b9ed772ce11b1599c43d331debd0387cee2da6" translate="yes" xml:space="preserve">
          <source>biproduct</source>
          <target state="translated">biproduct</target>
        </trans-unit>
        <trans-unit id="6d95e431300442b1d06144e0c2ad9984696e3e0f" translate="yes" xml:space="preserve">
          <source>bisequence</source>
          <target state="translated">bisequence</target>
        </trans-unit>
        <trans-unit id="4f2f6994b2f1a96da05ff723898a1b35a4bcc633" translate="yes" xml:space="preserve">
          <source>bisequenceA</source>
          <target state="translated">bisequenceA</target>
        </trans-unit>
        <trans-unit id="6a87edf4c72fc237e94c4ab7aca152c6591718bf" translate="yes" xml:space="preserve">
          <source>bisequenceA_</source>
          <target state="translated">bisequenceA_</target>
        </trans-unit>
        <trans-unit id="47be8c691096a43dc654c5d2d58c9de88d2c13ce" translate="yes" xml:space="preserve">
          <source>bisequence_</source>
          <target state="translated">bisequence_</target>
        </trans-unit>
        <trans-unit id="4db8e41b7900844669fa820ba302368399b7e410" translate="yes" xml:space="preserve">
          <source>bisum</source>
          <target state="translated">bisum</target>
        </trans-unit>
        <trans-unit id="f782ad2620888631f2243c4d2e0eca1083a08aa4" translate="yes" xml:space="preserve">
          <source>bit (Bits)</source>
          <target state="translated">비트 (비트)</target>
        </trans-unit>
        <trans-unit id="72ee6ad45b097a5c0c917c48d3ae507ab8bf2591" translate="yes" xml:space="preserve">
          <source>bit 0: is the cost-centre a CAF?</source>
          <target state="translated">비트 0 : 비용 중심이 CAF입니까?</target>
        </trans-unit>
        <trans-unit id="f0cd538277c4b728b7f469148c4fe98f0841e19d" translate="yes" xml:space="preserve">
          <source>bitBigNat</source>
          <target state="translated">bitBigNat</target>
        </trans-unit>
        <trans-unit id="1bcf414ccd175876be2ac312b2c054af807ca082" translate="yes" xml:space="preserve">
          <source>bitDefault</source>
          <target state="translated">bitDefault</target>
        </trans-unit>
        <trans-unit id="0824abb0cf865f3172e552b6ecf95e6e77d4e5d9" translate="yes" xml:space="preserve">
          <source>bitInteger</source>
          <target state="translated">bitInteger</target>
        </trans-unit>
        <trans-unit id="e589df1352e0d64fdb186ef235a95f0c341c0cf3" translate="yes" xml:space="preserve">
          <source>bitNatural</source>
          <target state="translated">bitNatural</target>
        </trans-unit>
        <trans-unit id="8814ee0b056a62691e76c73f19c36ff99b44582d" translate="yes" xml:space="preserve">
          <source>bitSize (Bits)</source>
          <target state="translated">bitSize (비트)</target>
        </trans-unit>
        <trans-unit id="193b2d8d716f2455dac7fc1c182a149ead00615d" translate="yes" xml:space="preserve">
          <source>bitSizeMaybe (Bits)</source>
          <target state="translated">bitSizeMaybe (비트)</target>
        </trans-unit>
        <trans-unit id="4da764e1824ae57728952e1b0615985ed94f59b9" translate="yes" xml:space="preserve">
          <source>bitcount</source>
          <target state="translated">bitcount</target>
        </trans-unit>
        <trans-unit id="3ee338087fc5281bc3cab77d5688bab6b7a22fb4" translate="yes" xml:space="preserve">
          <source>bitmapOf</source>
          <target state="translated">bitmapOf</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
