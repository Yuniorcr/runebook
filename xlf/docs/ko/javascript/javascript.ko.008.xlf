<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="33c38a2e18db9c66b1471f76b75c402d86a467fb" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt;, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">두 경우 모두 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 과 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; , &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 가가&lt;/a&gt; 로 처리됩니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4ebd17ee6524394d68de55d71267a3a2129d421" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;, NaN is treated as 0.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;length&lt;/code&gt; 모두 NaN은 0으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="26aabe4f640dee6e21eddc2167826f78cdca41f3" translate="yes" xml:space="preserve">
          <source>For certain methods, you have to provide a (callback) function and it will work on specific objects only. In this example, &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt; is used, which will work with &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; objects only.</source>
          <target state="translated">특정 방법의 경우 (콜백) 기능을 제공해야하며 특정 객체에서만 작동합니다. 이 예제에서는 &lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt; 이 사용되며 이는 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 객체에서만 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="e0e1751073e5970c64bca2f757d1c623e86bb3c0" translate="yes" xml:space="preserve">
          <source>For character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See &lt;a href=&quot;object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; for more information.)</source>
          <target state="translated">대괄호 표기법을 사용한 문자 액세스의 경우 이러한 속성에 값을 삭제하거나 할당하려고 시도하면 성공하지 못합니다. 관련된 속성은 쓰기 가능하거나 구성 가능하지 않습니다. 자세한 내용은 &lt;a href=&quot;object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="99044996f4e427d6809e09a478ce8eac0722235a" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.</source>
          <target state="translated">일반적으로 문자 그대로 처리되는 문자의 경우 다음 문자가 특수하며 문자 그대로 해석되지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a748d10a4ab866b8eb98e9cd6ef0ff7546d5f266" translate="yes" xml:space="preserve">
          <source>For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.</source>
          <target state="translated">일반적으로 특수하게 취급되는 문자의 경우 다음 문자가 특별하지 않으며 문자 그대로 해석되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="85db0ab8b5ed013f390f3a080dd3cfc842bb264d" translate="yes" xml:space="preserve">
          <source>For checking non-existent variables that would otherwise throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;, use &lt;code&gt;typeof nonExistentVar&amp;nbsp;=== 'undefined'&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt; 를 발생시킬 수있는 존재하지 않는 변수를 확인 하려면 &lt;code&gt;typeof nonExistentVar&amp;nbsp;=== 'undefined'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b13759ba937d4a7dfd20fa0a292bf064a8452b9" translate="yes" xml:space="preserve">
          <source>For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods &lt;a href=&quot;getfullyear&quot;&gt;&lt;code&gt;getFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;setfullyear&quot;&gt;&lt;code&gt;setFullYear()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcfullyear&quot;&gt;&lt;code&gt;getUTCFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setutcfullyear&quot;&gt;&lt;code&gt;setUTCFullYear()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">밀레니엄 계산과의 호환성 (즉, 2000 년을 고려)하려면 항상 연도를 전체적으로 지정해야합니다. 예를 들어 98이 아닌 1998을 사용하십시오. 전체 연도를 지정하는 데 도움이되도록 JavaScript에는 &lt;a href=&quot;getfullyear&quot;&gt; &lt;code&gt;getFullYear()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;setfullyear&quot;&gt; &lt;code&gt;setFullYear()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;getutcfullyear&quot;&gt; &lt;code&gt;getUTCFullYear()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;setutcfullyear&quot;&gt; &lt;code&gt;setUTCFullYear()&lt;/code&gt; &lt;/a&gt; 메소드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3404e5bf70a885865d212605712da9b2b525a7d4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padend&quot;&gt;&lt;code&gt;String.prototype.padEnd&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimEnd&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimRight&lt;/code&gt; remains as an alias to &lt;code&gt;trimEnd&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padend&quot;&gt; &lt;code&gt;String.prototype.padEnd&lt;/code&gt; &lt;/a&gt; 와 같은 함수와 일관성을 유지하기 위해 표준 메소드 이름은 &lt;code&gt;trimEnd&lt;/code&gt; 입니다. 그러나, 웹 호환성을 위해, &lt;code&gt;trimRight&lt;/code&gt; 는 별칭으로 남아 &lt;code&gt;trimEnd&lt;/code&gt; . 일부 엔진에서는 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f18d1ae2a3eb146497e18d6828d80707fdde7cf4" translate="yes" xml:space="preserve">
          <source>For consistency with functions like &lt;a href=&quot;padstart&quot;&gt;&lt;code&gt;String.prototype.padStart&lt;/code&gt;&lt;/a&gt; the standard method name is &lt;code&gt;trimStart&lt;/code&gt;. However, for web compatibility reasons, &lt;code&gt;trimLeft&lt;/code&gt; remains as an alias to &lt;code&gt;trimStart&lt;/code&gt;. In some engines this means:</source>
          <target state="translated">&lt;a href=&quot;padstart&quot;&gt; &lt;code&gt;String.prototype.padStart&lt;/code&gt; &lt;/a&gt; 와 같은 함수와 일관성을 유지하기 위해 표준 메소드 이름은 &lt;code&gt;trimStart&lt;/code&gt; 입니다. 그러나 웹 호환성을 위해 &lt;code&gt;trimLeft&lt;/code&gt; 는 trimStart 의 별칭으로 &lt;code&gt;trimStart&lt;/code&gt; 있습니다. 일부 엔진에서는 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e8af3d83a48402e400f35cfeec3c1af710d38b6f" translate="yes" xml:space="preserve">
          <source>For copying property definitions (including their enumerability) into prototypes, use &lt;a href=&quot;getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">속성 정의 (열거 가능성 포함)를 프로토 타입으로 복사하려면 대신 &lt;a href=&quot;getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f9918cac41143b821348744973cb230ce45c39e6" translate="yes" xml:space="preserve">
          <source>For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value). Note that values that are objects can still be modified, unless they are also frozen. As an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added to or removed from the array.</source>
          <target state="translated">고정 된 객체의 데이터 속성의 경우 값을 변경할 수 없으며 쓰기 가능 및 구성 가능 속성이 false로 설정됩니다. 접근 자 속성 (getter 및 setter)은 동일하게 작동하며 여전히 값을 변경하고 있다는 착각을줍니다. 객체 인 값도 동결되지 않는 한 여전히 수정할 수 있습니다. 객체는 배열을 고정시킬 수 있습니다. 그렇게 한 후에는 해당 요소를 변경할 수 없으며 배열에 요소를 추가하거나 제거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="10a18c2526932f22e98b63c9cadb43418dd3bf51" translate="yes" xml:space="preserve">
          <source>For deep cloning, we need to use alternatives, because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values.</source>
          <target state="translated">딥 클로닝의 경우 &lt;code&gt;Object.assign()&lt;/code&gt; 속성 값을 복사 하기 때문에 대안을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="3fc009100b3e934d5118774a507a120144dc3f88" translate="yes" xml:space="preserve">
          <source>For deep cloning, we need to use other alternatives because &lt;code&gt;Object.assign()&lt;/code&gt; copies property values. If the source value is a reference to an object, it only copies that reference value.</source>
          <target state="translated">딥 클로닝의 경우 &lt;code&gt;Object.assign()&lt;/code&gt; 속성 값을 복사 하므로 다른 대안을 사용해야 합니다. 소스 값이 객체에 대한 참조 인 경우 해당 참조 값만 복사합니다.</target>
        </trans-unit>
        <trans-unit id="a872f9cc20d8e834dae1ca1ebcab116bbe0ba998" translate="yes" xml:space="preserve">
          <source>For derived classes, the default constructor is:</source>
          <target state="translated">파생 클래스의 경우 기본 생성자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4093c0e4275a12fade1e18346d4b3f6b759cc5d2" translate="yes" xml:space="preserve">
          <source>For details of the comparison algorithm, see the page for the &lt;a href=&quot;equality&quot;&gt;equality&lt;/a&gt; operator.</source>
          <target state="translated">비교 알고리즘에 대한 자세한 내용은 &lt;a href=&quot;equality&quot;&gt;같음&lt;/a&gt; 연산자 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="37d61376b4d28260be3207ecd491fe3ddd063874" translate="yes" xml:space="preserve">
          <source>For details of the comparison algorithm, see the page for the &lt;a href=&quot;strict_equality&quot;&gt;strict equality&lt;/a&gt; operator.</source>
          <target state="translated">비교 알고리즘에 대한 자세한 내용은 &lt;a href=&quot;strict_equality&quot;&gt;완전 항등&lt;/a&gt; 연산자 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ae3d3d29fc3be84e49f8896de494e2a5bc4e77f" translate="yes" xml:space="preserve">
          <source>For didactic purpose only (since there is the &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; method), we show how it is possible to modify the &lt;code&gt;arrayFromMask&lt;/code&gt; algorithm in order to create a &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; containing the binary representation of a &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt;, rather than an &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">합니다 (이 있기 때문에 단지 교훈적인 목적을 위해 &lt;code&gt;&lt;a href=&quot;../global_objects/number/tostring&quot;&gt;Number.toString(2)&lt;/a&gt;&lt;/code&gt; 방법), 우리는 그것이 수정할 수 방법을 보여 &lt;code&gt;arrayFromMask&lt;/code&gt; 의 생성하기 위해 알고리즘을 &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; a의 바이너리 표현을 포함한 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; 오히려보다, &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c85141589120f45f5cb60eb2198157fb89d1407a" translate="yes" xml:space="preserve">
          <source>For each outcome object, a &lt;code&gt;status&lt;/code&gt; string is present. If the status is &lt;code&gt;fulfilled&lt;/code&gt;, then a &lt;code&gt;value&lt;/code&gt; is present. If the status is &lt;code&gt;rejected&lt;/code&gt;, then a &lt;code&gt;reason&lt;/code&gt; is present. The value (or reason) reflects what value each promise was fulfilled (or rejected) with.</source>
          <target state="translated">각 결과 개체에 대해 &lt;code&gt;status&lt;/code&gt; 문자열이 있습니다. 상태가 &lt;code&gt;fulfilled&lt;/code&gt; 이면 &lt;code&gt;value&lt;/code&gt; 이있는 것입니다. 상태가 &lt;code&gt;rejected&lt;/code&gt; 이면 &lt;code&gt;reason&lt;/code&gt; 가있는 것입니다. 가치 (또는 이유)는 각 약속이 이행 (또는 거부) 된 가치를 반영합니다.</target>
        </trans-unit>
        <trans-unit id="3be8fcb6f27956cba103591a38605bc08e18e6ee" translate="yes" xml:space="preserve">
          <source>For each variable declared, you may optionally specify its initial value to any legal JavaScript expression.</source>
          <target state="translated">선언 된 각 변수에 대해 선택적으로 올바른 JavaScript 표현식에 초기 값을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c660e337b7d93bed6e13f9f0a73344500d5771b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;work as expected with Traditional functions, because we establish the scope for each of the methods:</source>
          <target state="translated">예를 들어 각 메서드의 범위를 설정하기 때문에 기존 함수에서 예상대로 &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; 및 &lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt; 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="af9424dff50db5cffee05db82f14e282e8a7ffab" translate="yes" xml:space="preserve">
          <source>For example checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt;</source>
          <target state="translated">예를 들어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;노드&lt;/a&gt; 가 다른 컨텍스트에서 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; 인지 확인하는 경우 &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1921efdfed6a87b6e5c50e8a40d2c7e77f411a0" translate="yes" xml:space="preserve">
          <source>For example, &quot;*&quot; is a special character that means 0 or more occurrences of the preceding character should be matched; for example, &lt;code&gt;/a*/&lt;/code&gt; means match 0 or more &quot;a&quot;s. To match &lt;code&gt;*&lt;/code&gt; literally, precede it with a backslash; for example, &lt;code&gt;/a\*/&lt;/code&gt; matches &quot;a*&quot;.</source>
          <target state="translated">예를 들어, &quot;*&quot;는 특수 문자로, 앞의 문자가 0 번 이상 일치해야 함을 의미합니다. 예를 들어, &lt;code&gt;/a*/&lt;/code&gt; 는 0 개 이상의 &quot;a&quot;와 일치 함을 의미합니다. 문자 그대로 &lt;code&gt;*&lt;/code&gt; 를 일치 시키려면 백 슬래시를 앞에 두십시오. 예를 들어, &lt;code&gt;/a\*/&lt;/code&gt; 는 &quot;a *&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="06a8a96f44d115ddf9235c827e88879b5a516490" translate="yes" xml:space="preserve">
          <source>For example, &quot;&lt;code&gt;2011-10-10&lt;/code&gt;&quot; (&lt;em&gt;date-only&lt;/em&gt; form), &quot;&lt;code&gt;2011-10-10T14:48:00&lt;/code&gt;&quot; (&lt;em&gt;date-time&lt;/em&gt; form), or &quot;&lt;code&gt;2011-10-10T14:48:00.000+09:00&lt;/code&gt;&quot; (&lt;em&gt;date-time&lt;/em&gt; form with milliseconds and time zone) can be passed and will be parsed. When the time zone offset is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as local time.</source>
          <target state="translated">예 : &quot; &lt;code&gt;2011-10-10&lt;/code&gt; &quot;( &lt;em&gt;날짜 전용&lt;/em&gt; 형식), &quot; &lt;code&gt;2011-10-10T14:48:00&lt;/code&gt; &quot;( &lt;em&gt;날짜-시간&lt;/em&gt; 형식) 또는 &quot; &lt;code&gt;2011-10-10T14:48:00.000+09:00&lt;/code&gt; &quot;( &lt;em&gt;날짜-시간&lt;/em&gt; 밀리 초 및 시간대가있는 형식)을 전달할 수 있으며 구문 분석됩니다. 표준 시간대 오프셋이 없으면 날짜 전용 형식은 UTC 시간으로 해석되고 날짜-시간 형식은 현지 시간으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="bea3e1a01ebe6de98dcc04169dd3576954076ff3" translate="yes" xml:space="preserve">
          <source>For example, /&lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; matches &quot;Jack&quot; only if it is followed by &quot;Sprat&quot;.</source>
          <target state="translated">예를 들어, / &lt;code&gt;Jack(?=Sprat)/&lt;/code&gt; 은 &quot;Sprat&quot;뒤에 오는 경우에만 &quot;Jack&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="25c08938dc686489d7672a95a913a61d324a6a3f" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;../../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt; will create and throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; itself. If the mutation is performed by an operation that &lt;em&gt;doesn't&lt;/em&gt; ordinarily throw in case of failure, such as &lt;a href=&quot;../../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;, no exception will be thrown.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 자체를 생성하고 발생 시킵니다. &lt;a href=&quot;../../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; &lt;/a&gt; 와 같이 실패시 일반적으로 발생 &lt;em&gt;하지 않는&lt;/em&gt; 작업에 의해 변형이 수행되는 경우 예외가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f7e97cc7164eebed5ae5d22dd9b94a3bbd85996a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;'hello world'.indexOf('o', -5)&lt;/code&gt; will return &lt;code&gt;4&lt;/code&gt;, as it starts at position &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;o&lt;/code&gt; is found at position &lt;code&gt;4&lt;/code&gt;. On the other hand, &lt;code&gt;'hello world'.indexOf('o', 11)&lt;/code&gt; (and with any &lt;code&gt;fromIndex&lt;/code&gt; value greater than &lt;code&gt;11&lt;/code&gt;) will return &lt;code&gt;-1&lt;/code&gt;, as the search is started at position &lt;code&gt;11&lt;/code&gt;, a position &lt;em&gt;after&lt;/em&gt; the end of the string.</source>
          <target state="translated">예를 들어 &lt;code&gt;'hello world'.indexOf('o', -5)&lt;/code&gt; 는 위치 &lt;code&gt;0&lt;/code&gt; 에서 시작 하고 &lt;code&gt;o&lt;/code&gt; 는 위치 &lt;code&gt;4&lt;/code&gt; 에서 발견 되므로 &lt;code&gt;4&lt;/code&gt; 를 반환 합니다. 한편, &lt;code&gt;'hello world'.indexOf('o', 11)&lt;/code&gt; (및 함께 &lt;code&gt;fromIndex&lt;/code&gt; 와의 보다 값보다 &lt;code&gt;11&lt;/code&gt; ) 반환 &lt;code&gt;-1&lt;/code&gt; 검색 위치에서 시작되면, &lt;code&gt;11&lt;/code&gt; , 위치를 &lt;em&gt;후&lt;/em&gt; 문자열의 끝에 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f996f230c5ba69cacb722a4b28f7baf9a2451188" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt;&quot; in &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;, whereas &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; matches &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/&amp;lt;.*?&amp;gt;/&lt;/code&gt; 는 &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;의 &quot;&amp;lt;foo&amp;gt;&quot;와 일치하고 &lt;code&gt;/&amp;lt;.*&amp;gt;/&lt;/code&gt; 는 &quot;&amp;lt;foo&amp;gt; &amp;lt;bar&amp;gt;&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="27e4be0ac9808621eb5d1917ee74c672f0b47394" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/(foo)/&lt;/code&gt; matches and remembers &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/(foo)/&lt;/code&gt; 는 &quot;foo bar&quot;에서 &quot;foo&quot;와 일치하고 기억합니다.</target>
        </trans-unit>
        <trans-unit id="731dc4cf5c8a54fbcbc2af314a327d088d98638c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/.y/&lt;/code&gt; matches &quot;my&quot; and &quot;ay&quot;, but not &quot;yes&quot;, in &quot;yes make my day&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/.y/&lt;/code&gt; 는 &quot;yes make my day&quot;에서 &quot;my&quot;및 &quot;ay&quot;와 일치하지만 &quot;yes&quot;와 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e2ecf141ae7a336698fb8c2752ab124b962f13e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\Bon/&lt;/code&gt; matches &quot;on&quot; in &quot;at noon&quot;, and &lt;code&gt;/ye\B/&lt;/code&gt; matches &quot;ye&quot; in &quot;possibly yesterday&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\Bon/&lt;/code&gt; 은 &quot;정오&quot;의 &quot;on&quot;과 일치하고 &lt;code&gt;/ye\B/&lt;/code&gt; 는 &quot;어제&quot;의 &quot;ye&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ba512b360907fd081a5c8d7d957c6b35edbcd627" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\D/&lt;/code&gt; or &lt;code&gt;/[^0-9]/&lt;/code&gt; matches &quot;B&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\D/&lt;/code&gt; 또는 &lt;code&gt;/[^0-9]/&lt;/code&gt; 는 &quot;B2는 제품군 번호입니다&quot;의 &quot;B&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="72c8f4c13713a783b774b36799e9b95d4b11c727" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\S\w*/&lt;/code&gt; matches &quot;foo&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\S\w*/&lt;/code&gt; 는 &quot;foo bar&quot;의 &quot;foo&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a10d7b5dd4f43f12c1a090ad22713c68343dbcce" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\W/&lt;/code&gt; or &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; matches &quot;%&quot; in &quot;50%&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\W/&lt;/code&gt; 또는 &lt;code&gt;/[^A-Za-z0-9_]/&lt;/code&gt; 는 &quot;50 %&quot;의 &quot;%&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="58a7325cb42e0955f08d3fb78805a675633c686c" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\cM/&lt;/code&gt; matches control-M in a string.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\cM/&lt;/code&gt; 은 문자열의 control-M과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="54379d80b8754985be2df6f32cd7b59e7b5d22b6" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; matches a number only if it is not followed by a decimal point.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\d+(?!\.)/&lt;/code&gt; 는 뒤에 소수점이없는 경우에만 숫자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2f99f6f3b6617e0baeab0f498629bf696685e7c5" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\d/&lt;/code&gt; or &lt;code&gt;/[0-9]/&lt;/code&gt; matches &quot;2&quot; in &quot;B2 is the suite number&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\d/&lt;/code&gt; 또는 &lt;code&gt;/[0-9]/&lt;/code&gt; 는 &quot;B2는 제품군 번호&quot;의 &quot;2&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b666bd4de97017a6096dee7ee40ac60fc051d1ad" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\s\w*/&lt;/code&gt; matches &quot; bar&quot; in &quot;foo bar&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\s\w*/&lt;/code&gt; 는 &quot;foo bar&quot;의 &quot;bar&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="c081fbd7f9e8826910cd2ba54069a078d1643b1f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/\w/&lt;/code&gt; matches &quot;a&quot; in &quot;apple&quot;, &quot;5&quot; in &quot;$5.28&quot;, and &quot;3&quot; in &quot;3D&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/\w/&lt;/code&gt; 는 &quot;apple&quot;의 &quot;a&quot;, &quot;$ 5.28&quot;의 &quot;5&quot;및 &quot;3D&quot;의 &quot;3&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="04e47940435de007ee6bfc72f9ee144bd618626f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/^A/&lt;/code&gt; does not match the &quot;A&quot; in &quot;an A&quot;, but does match the first &quot;A&quot; in &quot;An A&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/^A/&lt;/code&gt; 는 &quot;an A&quot;의 &quot;A&quot;와 일치하지 않지만 &quot;An A&quot;의 첫 번째 &quot;A&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d8627b8a39beff2d023b9ce420d597267ed2aac7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a+/&lt;/code&gt; matches the &quot;a&quot; in &quot;candy&quot; and all the &quot;a&quot;'s in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a+/&lt;/code&gt; 는 &quot;candy&quot;의 &quot;a&quot;및 &quot;caaaaaaandy&quot;의 모든 &quot;a&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="77f98d5935fe226c6d759c07f102de18c3583fba" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; matches &quot;apple, orange,&quot; in &quot;apple, orange, cherry, peach&quot;. A complete example follows this table.</source>
          <target state="translated">예를 들어, &lt;code&gt;/apple(,)\sorange\1/&lt;/code&gt; 은 &quot;apple, orange, cherry, peach&quot;의 &quot;apple, orange&quot;와 일치합니다. 이 테이블 다음에 완전한 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="08296657ebef91f76b34b0de5567df76b6e97cb4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{1,3}/&lt;/code&gt; matches nothing in &quot;cndy&quot;, the &quot;a&quot; in &quot;candy&quot;, the two &quot;a&quot;'s in &quot;caandy&quot;, and the first three &quot;a&quot;'s in &quot;caaaaaaandy&quot;. Notice that when matching &quot;caaaaaaandy&quot;, the match is &quot;aaa&quot;, even though the original string had more &quot;a&quot;'s in it.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a{1,3}/&lt;/code&gt; 은 &quot;cndy&quot;, &quot;candy&quot;의 &quot;a&quot;, &quot;a&quot;는 &quot;caandy&quot;, &quot;a&quot;는 &quot; caaaaaaandy &quot;. &quot;caaaaaaandy&quot;와 일치 할 때 원래 문자열에 &quot;a&quot;가 더 있어도 일치는 &quot;aaa&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="a90f3faff5967d1b354e84aa4ba89dec44e6af85" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2,}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but matches all of the a's in &quot;caandy&quot; and in &quot;caaaaaaandy&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a{2,}/&lt;/code&gt; 는 &quot;candy&quot;의 &quot;a&quot;와 일치하지 않지만 &quot;caandy&quot;및 &quot;caaaaaaandy&quot;의 모든 a와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a4af36d397a8b981ed8a1d428eaa0a51abce8c20" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/a{2}/&lt;/code&gt; doesn't match the &quot;a&quot; in &quot;candy&quot;, but it matches all of the &quot;a&quot;'s in &quot;caandy&quot;, and the first two &quot;a&quot;'s in &quot;caaandy&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/a{2}/&lt;/code&gt; 는 &quot;candy&quot;의 &quot;a&quot;와 일치하지 않지만 &quot;caandy&quot;의 &quot;a&quot;와 &quot;caaandy의 첫 번째&quot;a &quot;와 모두 일치합니다. &quot;.</target>
        </trans-unit>
        <trans-unit id="3616762289f2ad86d25dbe81ba9ff555c4b706e2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/b/&lt;/code&gt; matches the character &quot;b&quot;. By placing a backslash in front of &quot;b&quot;, that is by using &lt;code&gt;/\b/&lt;/code&gt;, the character becomes special to mean match a word boundary.</source>
          <target state="translated">예를 들어, &lt;code&gt;/b/&lt;/code&gt; 는 문자 &quot;b&quot;와 일치합니다. &quot;b&quot;앞에 백 슬래시를 배치하면 (즉, &lt;code&gt;/\b/&lt;/code&gt; 를 사용하여) 문자가 단어 경계와 일치하도록 특별 해집니다.</target>
        </trans-unit>
        <trans-unit id="8e340ac6bd33c408c1574b00399d8080044c2819" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/bo*/&lt;/code&gt; matches &quot;boooo&quot; in &quot;A ghost booooed&quot; and &quot;b&quot; in &quot;A bird warbled&quot;, but nothing in &quot;A goat grunted&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/bo*/&lt;/code&gt; 는 &quot;A Ghost warbled&quot;의 &quot;A ghost booooed&quot;에서 &quot;boooo&quot;및 &quot;b&quot;와 일치하지만 &quot;A goat grunted&quot;에서는 아무것도 없습니다.</target>
        </trans-unit>
        <trans-unit id="ee70c325b7fda48a36f20806ce19cd350a23827a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/e?le?/&lt;/code&gt; matches the &quot;el&quot; in &quot;angel&quot; and the &quot;le&quot; in &quot;angle.&quot;</source>
          <target state="translated">예를 들어, &lt;code&gt;/e?le?/&lt;/code&gt; 는 &quot;angel&quot;의 &quot;el&quot;및 &quot;angle&quot;의 &quot;le&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="0890428ef6f4a779e8ee5f7ad1dcddbac728b190" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/green|red/&lt;/code&gt; matches &quot;green&quot; in &quot;green apple&quot; and &quot;red&quot; in &quot;red apple&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/green|red/&lt;/code&gt; 는 &quot;green apple&quot;의 &quot;green&quot;및 &quot;red apple&quot;의 &quot;red&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="8133255e243f3bc7a528482f8249e11e97cbc601" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;/t$/&lt;/code&gt; does not match the &quot;t&quot; in &quot;eater&quot;, but does match it in &quot;eat&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;/t$/&lt;/code&gt; 는 &quot;eater&quot;의 &quot;t&quot;와 일치하지 않지만 &quot;eat&quot;에서는 일치합니다.</target>
        </trans-unit>
        <trans-unit id="5cc5b6d1d137d8d2cc001b6a446910cfa7fb6b4f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a safe integer: it can be exactly represented in IEEE-754, but the integer &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; can't be directly represented in IEEE-754 but instead rounds to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; under round-to-nearest and round-to-zero rounding. The safe integers consist of all integers from &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; inclusive to &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; inclusive (&amp;plusmn; &lt;code&gt;9007199254740991&lt;/code&gt; or &amp;plusmn; 9,007,199,254,740,991).</source>
          <target state="translated">예를 들어, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; 안전한 정수 : 정확히 표현하지, 및 IEEE-754 둥근 모드 아래에 다른 정수 라운드 할 수있다. 대조적으로, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; 은 안전한 정수 가 &lt;em&gt;아닙니다&lt;/em&gt; : IEEE-754로 정확하게 표현 될 수 있지만, &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; + 1&lt;/code&gt; 의 정수 는 IEEE-754로 직접 표현 될 수 없지만 대신 가장 가까운 라운드에서 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt;&lt;/code&gt; 으로 반올림됩니다. 그리고 0에서 반올림. 안전한 정수 모든 정수 구성 &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; 을 포함한 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; (&amp;plusmn; 포함 &lt;code&gt;9007199254740991&lt;/code&gt; 또는 &amp;plusmn; 9,007,199,254,740,991).</target>
        </trans-unit>
        <trans-unit id="1468820736d3768571efe41dbb75777077dfdee4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; yields 2:</source>
          <target state="translated">예를 들어, &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; 2 :</target>
        </trans-unit>
        <trans-unit id="43017361c6ef1192dc85fc698a7f5457aa051e32" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; yields 36:</source>
          <target state="translated">예를 들어, &lt;code&gt;9 &amp;lt;&amp;lt; 2&lt;/code&gt; 36을 산출합니다.</target>
        </trans-unit>
        <trans-unit id="d40cd50395c60e958fd69dd0d91559fbae320fed" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[^abc]&lt;/code&gt; is the same as &lt;code&gt;[^a-c]&lt;/code&gt;. They initially match &quot;o&quot; in &quot;bacon&quot; and &quot;h&quot; in &quot;chop&quot;.</source>
          <target state="translated">예를 들어, &lt;code&gt;[^abc]&lt;/code&gt; 는 &lt;code&gt;[^a-c]&lt;/code&gt; 와 동일 합니다. 초기에는 &quot;베이컨&quot;에서 &quot;o&quot;, &quot;chop&quot;에서 &quot;h&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="3e34984e389a74734f82bae79350f3d5f1e65463" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[abcd]&lt;/code&gt; is the same as &lt;code&gt;[a-d]&lt;/code&gt;. They match the &quot;b&quot; in &quot;brisket&quot; and the &quot;c&quot; in &quot;chop&quot;.</source>
          <target state="translated">예를 들어 &lt;code&gt;[abcd]&lt;/code&gt; 는 &lt;code&gt;[a-d]&lt;/code&gt; 와 같습니다 . &quot;브래킷&quot;의 &quot;b&quot;및 &quot;chop&quot;의 &quot;c&quot;와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2d4c70a562d592dc4b4f50eca2763191f11d3182" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;slice(1,4)&lt;/code&gt; extracts the second element through the fourth element (elements indexed 1, 2, and 3).</source>
          <target state="translated">예를 들어 &lt;code&gt;slice(1,4)&lt;/code&gt; 는 네 번째 요소 (인덱스 1, 2 및 3)를 통해 두 번째 요소를 추출합니다.</target>
        </trans-unit>
        <trans-unit id="866a7c2ace957888375af096e8b401b5012bea84" translate="yes" xml:space="preserve">
          <source>For example, [\w-] is the same as [A-Za-z0-9_-]. They match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;n&quot; in &quot;non-profit&quot;.</source>
          <target state="translated">예를 들어 [\ w-]는 [A-Za-z0-9_-]와 동일합니다. &quot;브래킷&quot;의 &quot;b&quot;, &quot;chop&quot;의 &quot;c&quot;및 &quot;비영리&quot;의 &quot;n&quot;과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="1b85b07b0e9d23ce4d536e495de0c011cfeb1892" translate="yes" xml:space="preserve">
          <source>For example, [abcd-] and [-abcd] match the &quot;b&quot; in &quot;brisket&quot;, the &quot;c&quot; in &quot;chop&quot; and the &quot;-&quot; (hyphen) in &quot;non-profit&quot;.</source>
          <target state="translated">예를 들어, [abcd-] 및 [-abcd]는 &quot;브래킷&quot;의 &quot;b&quot;, &quot;chop&quot;의 &quot;c&quot;및 &quot;비영리&quot;의 &quot;-&quot;(하이픈)과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d534024361a43e9b767937a323c46e5884274247" translate="yes" xml:space="preserve">
          <source>For example, a bitwise AND of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0001&lt;/code&gt; which is 1 in decimal.</source>
          <target state="translated">예를 들어, 비트 AND &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; 의 &lt;code&gt;0001&lt;/code&gt; 은 10의 1입니다.</target>
        </trans-unit>
        <trans-unit id="35dfc44891ed2854f3701d280c936b920ff7097c" translate="yes" xml:space="preserve">
          <source>For example, a bitwise OR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</source>
          <target state="translated">예를 들어, 비트 단위 OR &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; 은 &lt;code&gt;0101&lt;/code&gt; ( 10 진수 5)입니다.</target>
        </trans-unit>
        <trans-unit id="7323a4bc05d149bad307094ed612a35fbc241715" translate="yes" xml:space="preserve">
          <source>For example, a bitwise OR of &lt;code&gt;5 | 1&lt;/code&gt; results in &lt;code&gt;0101&lt;/code&gt; which is 5 in decimal.</source>
          <target state="translated">예를 들어, 비트 OR &lt;code&gt;5 | 1&lt;/code&gt; 결과 &lt;code&gt;0101&lt;/code&gt; 진수 5이다.</target>
        </trans-unit>
        <trans-unit id="ff16bc0ecdfd4fb29f2ad2e161dd9ad9ab4eaa13" translate="yes" xml:space="preserve">
          <source>For example, a bitwise XOR of &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</source>
          <target state="translated">예를 들면, 비트 단위 XOR &lt;code&gt;5 &amp;amp; 1&lt;/code&gt; 결과 &lt;code&gt;0100&lt;/code&gt; 진수 4이다.</target>
        </trans-unit>
        <trans-unit id="d1c2cefbc98e7cccd6aa2ad1f5d4474b54e230e7" translate="yes" xml:space="preserve">
          <source>For example, a bitwise XOR of &lt;code&gt;5 ^ 1&lt;/code&gt; results in &lt;code&gt;0100&lt;/code&gt; which is 4 in decimal.</source>
          <target state="translated">예를 들면, 비트 단위 XOR &lt;code&gt;5 ^ 1&lt;/code&gt; 결과 &lt;code&gt;0100&lt;/code&gt; 진수 4이다.</target>
        </trans-unit>
        <trans-unit id="18a0c77ee8e8d786fbaa02174f49d557f339c981" translate="yes" xml:space="preserve">
          <source>For example, an extension designed to scrape contents of web-pages could have the scraping rules defined in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPath&lt;/a&gt; instead of JavaScript code.</source>
          <target state="translated">예를 들어, 웹 페이지의 내용을 긁기 위해 설계된 확장 프로그램 은 JavaScript 코드 대신 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XPath&quot;&gt;XPath에&lt;/a&gt; 긁기 규칙이 정의되어있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="30d78476f415ba39dfea6fce2e88c0a1b1289345" translate="yes" xml:space="preserve">
          <source>For example, assume you have this script:</source>
          <target state="translated">예를 들어,이 스크립트가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="bb063a9af9663d39a47eb4d1e7486590fe3ad853" translate="yes" xml:space="preserve">
          <source>For example, check if &lt;code&gt;baz&lt;/code&gt; object descends from &lt;code&gt;Foo.prototype&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;baz&lt;/code&gt; 객체가 &lt;code&gt;Foo.prototype&lt;/code&gt; 에서 내려 오는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="28f481915e88904767cd8c7e2eaf0055f62e4a76" translate="yes" xml:space="preserve">
          <source>For example, checking if a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;Nodes&lt;/a&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; in a different context, you can use &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node&quot;&gt;노드&lt;/a&gt; 가 다른 컨텍스트 의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGElement&quot;&gt;SVGElement&lt;/a&gt; 인지 확인하는 경우 &lt;code&gt;myNode instanceof myNode.ownerDocument.defaultView.SVGElement&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77866eb3501170410f292080c471f427ab9f9911" translate="yes" xml:space="preserve">
          <source>For example, consider an object &lt;code&gt;obj&lt;/code&gt; which has a nested structure. Without optional chaining, looking up a deeply-nested subproperty requires validating the references in between, such as:</source>
          <target state="translated">예를 들어, 중첩 된 구조를 가진 객체 &lt;code&gt;obj&lt;/code&gt; 를 생각해보십시오 . 선택적 연결없이 깊게 중첩 된 하위 속성을 찾으려면 다음과 같이 그 사이의 참조를 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="e88872bda7dcb80ad8bdf7d45a7fe8e4824839d7" translate="yes" xml:space="preserve">
          <source>For example, dividing zero by zero results in a &lt;code&gt;NaN&lt;/code&gt; &amp;mdash; but dividing other numbers by zero does not.</source>
          <target state="translated">예를 들어, 0을 0으로 나누면 &lt;code&gt;NaN&lt;/code&gt; 이 발생 하지만 다른 숫자를 0으로 나누지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="69c55058ffebb896925e6bc270d2df44eabd3997" translate="yes" xml:space="preserve">
          <source>For example, if 0 is provided for &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt;, the date will be set to the last day of the previous month.</source>
          <target state="translated">예를 들어 &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; 에 0이 제공 되면 날짜는 이전 달의 마지막 날로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="34ab198aa4b01ccc2fc1e99847d64c05bdafb92c" translate="yes" xml:space="preserve">
          <source>For example, if a function is passed 3 arguments, you can access them as follows:</source>
          <target state="translated">예를 들어, 함수에 3 개의 인수가 전달되면 다음과 같이 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="937d79a6cfd454f4894cee8f40a83443bcd6a1f3" translate="yes" xml:space="preserve">
          <source>For example, if a user writes &quot;Jack &amp;amp; Jill&quot;, the text may get encoded as &quot;Jack &amp;amp;amp; Jill&quot;. Without &lt;code&gt;encodeURIComponent&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</source>
          <target state="translated">예를 들어, 사용자가 &quot;Jack &amp;amp; Jill&quot;을 작성하면 텍스트가 &quot;Jack &amp;amp; Jill&quot;로 인코딩 될 수 있습니다. &lt;code&gt;encodeURIComponent&lt;/code&gt; 가 없으면 앰퍼샌드는 서버에서 새 필드의 시작으로 해석되어 데이터 무결성을 위협 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2a4384a07fe7bac3504b23df1745b8a2d2a4643" translate="yes" xml:space="preserve">
          <source>For example, if a user writes &lt;code&gt;Jack &amp;amp; Jill&lt;/code&gt;, the text may get encoded as &lt;code&gt;Jack &amp;amp;amp; Jill&lt;/code&gt;. Without &lt;code&gt;encodeURIComponent()&lt;/code&gt; the ampersand could be interpretted on the server as the start of a new field and jeopardize the integrity of the data.</source>
          <target state="translated">예를 들어 사용자가 &lt;code&gt;Jack &amp;amp; Jill&lt;/code&gt; 을 작성 하면 텍스트가 &lt;code&gt;Jack &amp;amp;amp; Jill&lt;/code&gt; . &lt;code&gt;encodeURIComponent()&lt;/code&gt; 없이는 앰퍼샌드가 서버에서 새 필드의 시작으로 해석되어 데이터의 무결성을 위협 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5799cfe8931ec98fb88c4a0444b5af94210cf13a" translate="yes" xml:space="preserve">
          <source>For example, if the buffer is 16 bytes long, the &lt;code&gt;byteOffset&lt;/code&gt; is 8, and the &lt;code&gt;byteLength&lt;/code&gt; is 10, this error is thrown because the resulting view tries to extend 2 bytes past the total length of the buffer.</source>
          <target state="translated">예를 들어, 버퍼 길이가 16 바이트이고 &lt;code&gt;byteOffset&lt;/code&gt; 이 8이고 &lt;code&gt;byteLength&lt;/code&gt; 가 10이면 결과 뷰가 버퍼의 전체 길이를 지나서 2 바이트를 확장하려고하기 때문에이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f667de28c6f09dc72511b3c72cdbcf9a60a30c1b" translate="yes" xml:space="preserve">
          <source>For example, if you had an object with a property named &lt;code&gt;3d&lt;/code&gt;, it can only be referenced using bracket notation.</source>
          <target state="translated">예를 들어, 속성이 &lt;code&gt;3d&lt;/code&gt; 인 객체가있는 경우 대괄호 표기법을 사용해서 만 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9623036ffbe9cadc02b09fb197118440205870ef" translate="yes" xml:space="preserve">
          <source>For example, if you have &lt;strong&gt;multiple arguments&lt;/strong&gt; or &lt;strong&gt;no arguments&lt;/strong&gt;, you'll need to re-introduce parentheses around the arguments:</source>
          <target state="translated">예를 들어 &lt;strong&gt;여러 인수가&lt;/strong&gt; 있거나 &lt;strong&gt;인수가 &lt;/strong&gt;&lt;strong&gt;없는 경우 인수를&lt;/strong&gt; 괄호로 다시 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="244a2aa8b9cb3ab3a65881329256b99f1e2c5386" translate="yes" xml:space="preserve">
          <source>For example, imagine having an array like the following, to be used with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;[2012, 11, 4]&lt;/code&gt;; in this case you have to write something like: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 생성자 와 함께 사용할 다음과 같은 배열이 있다고 가정합니다 . &lt;code&gt;[2012, 11, 4]&lt;/code&gt; ; 이 경우 다음과 같이 작성해야합니다. &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bbc03761f9eac4f5b7dd03a95b3ade42914f7efb" translate="yes" xml:space="preserve">
          <source>For example, in the &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; block it is not required to initialize variables:</source>
          <target state="translated">예를 들어 &lt;code&gt;&lt;var&gt;initialization&lt;/var&gt;&lt;/code&gt; 블록에서는 변수를 초기화 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b02fbdba4483319e083506a278688555164aea94" translate="yes" xml:space="preserve">
          <source>For example, in the &lt;em&gt;initialization&lt;/em&gt; block it is not required to initialize variables:</source>
          <target state="translated">예를 들어, &lt;em&gt;초기화&lt;/em&gt; 블록 에서 변수를 초기화 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="b10d4f788c270734ca92e90166633502ba4bbfb4" translate="yes" xml:space="preserve">
          <source>For example, in the following code an unhandled promise rejection error will be thrown, even if a &lt;code&gt;.catch&lt;/code&gt; handler has been configured further along the promise chain. This is because &lt;code&gt;p2&lt;/code&gt; will not be &quot;wired into&quot; the promise chain until control returns from &lt;code&gt;p1&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 다음 코드에서는 &lt;code&gt;.catch&lt;/code&gt; 핸들러가 promise 체인을 따라 추가로 구성 되었더라도 처리되지 않은 promise 거부 오류가 발생 합니다. 이는 제어가 &lt;code&gt;p1&lt;/code&gt; 에서 반환 될 때까지 &lt;code&gt;p2&lt;/code&gt; 가 promise 체인에 &quot;연결&quot;되지 않기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="99ec1dd0889b0f7d806f56f4eb1bb18db712b1fb" translate="yes" xml:space="preserve">
          <source>For example, suppose a script does &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt;, and &lt;code&gt;obj&lt;/code&gt; is not a proxy, and has no own property &lt;code&gt;.name&lt;/code&gt;, but it has a proxy on its prototype chain. That proxy's &lt;code&gt;set&lt;/code&gt; handler will be called, and &lt;code&gt;obj&lt;/code&gt; will be passed as the receiver.</source>
          <target state="translated">예를 들어, 스크립트가 &lt;code&gt;obj.name = &quot;jen&quot;&lt;/code&gt; 을 수행하고 &lt;code&gt;obj&lt;/code&gt; 가 프록시가 아니며 자체 속성 &lt;code&gt;.name&lt;/code&gt; 이 없지만 프로토 타입 체인에 프록시가 있다고 가정하십시오. 해당 프록시의 &lt;code&gt;set&lt;/code&gt; 핸들러가 호출되고 &lt;code&gt;obj&lt;/code&gt; 가 수신자로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="71916a917e381d9f4baa72eb7d0f481b27298684" translate="yes" xml:space="preserve">
          <source>For example, the following are equivalent:</source>
          <target state="translated">예를 들어 다음은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="cf3c80207a4428c3e01d80e5b0a5f1cb417b40ef" translate="yes" xml:space="preserve">
          <source>For example, the following syntax is often seen in many scripts.</source>
          <target state="translated">예를 들어 다음 구문은 많은 스크립트에서 자주 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0104484cd72318de837fc950dcc5c74b5243acc3" translate="yes" xml:space="preserve">
          <source>For example, the following two examples return same result.</source>
          <target state="translated">예를 들어 다음 두 예는 동일한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2467e34ebb06a05a1bf1438ed09bb680f3c3c652" translate="yes" xml:space="preserve">
          <source>For example, the following two functions are equivalent.</source>
          <target state="translated">예를 들어, 다음 두 기능은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0a5e19a07f0f940d54dbc5e573ed269580925a99" translate="yes" xml:space="preserve">
          <source>For example, the following:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="088fad1989d603ce1394ef481901b076020a1abe" translate="yes" xml:space="preserve">
          <source>For example, this code defines a simple target with just two properties, and an even simpler handler with no properties:</source>
          <target state="translated">예를 들어이 코드는 속성이 두 개 뿐인 단순한 대상과 속성이없는 더 단순한 처리기를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="8762ede52d7e131b7a89f66401e61b7b5608dc17" translate="yes" xml:space="preserve">
          <source>For example, this syntax worked:</source>
          <target state="translated">예를 들어이 구문은 다음과 같이 작동했습니다.</target>
        </trans-unit>
        <trans-unit id="add9ffbfd10baafea3cde62754b319742dc998d8" translate="yes" xml:space="preserve">
          <source>For example, to return an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; instead of an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;iterator&lt;/a&gt;:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;반복자&lt;/a&gt; 대신 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 을 반환하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="86aa87dc02431531a1951cc0ccafa84c378749c8" translate="yes" xml:space="preserve">
          <source>For example, when chaining expressions, trailing commas are not allowed.</source>
          <target state="translated">예를 들어, 식을 연결하는 경우 후행 쉼표는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="202acdf71c225449c011c82d77563f9f789c506e" translate="yes" xml:space="preserve">
          <source>For example, when using methods such as &lt;a href=&quot;global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; that returns the default constructor, you want these methods to return a parent &lt;code&gt;Array&lt;/code&gt; object, instead of the &lt;code&gt;MyArray&lt;/code&gt; object. The &lt;a href=&quot;global_objects/symbol/species&quot;&gt;&lt;code&gt;Symbol.species&lt;/code&gt;&lt;/a&gt; symbol lets you do this:</source>
          <target state="translated">예를 들어, 기본 생성자를 반환하는 &lt;a href=&quot;global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 과 같은 메서드를 사용하는 경우 이러한 메서드가 &lt;code&gt;MyArray&lt;/code&gt; 개체 대신 부모 &lt;code&gt;Array&lt;/code&gt; 개체 를 반환하려고 합니다. &lt;a href=&quot;global_objects/symbol/species&quot;&gt; &lt;code&gt;Symbol.species&lt;/code&gt; 의&lt;/a&gt; 기호는이 작업을 수행 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="72cf8e5e4e01454d7bd5aec5a5d5f1e02a408d12" translate="yes" xml:space="preserve">
          <source>For example, with the following HTML:</source>
          <target state="translated">예를 들어 다음 HTML을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="528dfe874f4c6aa065144a48883f47780d348e68" translate="yes" xml:space="preserve">
          <source>For example, you can use it on a single line:</source>
          <target state="translated">예를 들어 한 줄에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="01a23d9503be041aca2248747ff63b7c2a66fcbb" translate="yes" xml:space="preserve">
          <source>For function calls:</source>
          <target state="translated">함수 호출의 경우 :</target>
        </trans-unit>
        <trans-unit id="4899d05a52dfbdd8e893cffe81a4b7588cd8afd5" translate="yes" xml:space="preserve">
          <source>For greater specificity in checking types, a &lt;code&gt;typeof&lt;/code&gt; wrapper for usage in production-level code would be as follows (provided &lt;code&gt;obj&lt;/code&gt; exists):</source>
          <target state="translated">유형 검사의 특이성을 높이기 위해 프로덕션 수준 코드에서 사용하기위한 &lt;code&gt;typeof&lt;/code&gt; 래퍼는 다음과 같습니다 ( &lt;code&gt;obj&lt;/code&gt; 가 존재하는 경우).</target>
        </trans-unit>
        <trans-unit id="f9351ecb7139ba4a292947d12e3373f477026a84" translate="yes" xml:space="preserve">
          <source>For instance, if another exception occurs inside a try's catch-block, any remaining code in the same outer try-block enclosing that try..catch (or in the main flow, if not in an outer try-block) , will not get executed, since control is immediately transferred to the outer try's catch-block (or the internal error-generator, if not in a try-block).</source>
          <target state="translated">예를 들어 try의 catch-block 내에서 다른 예외가 발생하면 try..catch를 포함하는 동일한 외부 try-block (또는 외부 try-block에없는 경우 주 흐름)에 남아있는 코드는 얻을 수 없습니다. 제어는 즉시 외부 try의 catch-block (또는 try-block에없는 경우 내부 오류 생성기)으로 전송되므로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e5c59bc69ad175064d7452caaf3a7309c82376dd" translate="yes" xml:space="preserve">
          <source>For instance, if condition a is &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;return&lt;/code&gt; this templated literal.</source>
          <target state="translated">예를 들어, 조건 a가 &lt;code&gt;true&lt;/code&gt; 이면 이 템플릿 화 된 리터럴 을 &lt;code&gt;return&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="3d6c2ff5aafe8379fafb6af50138a5bbb4622c48" translate="yes" xml:space="preserve">
          <source>For instance, the following example adds a method to the &lt;code&gt;Math&lt;/code&gt; object for calculating the &lt;em&gt;greatest common divisor&lt;/em&gt; of a list of arguments.</source>
          <target state="translated">예를 들어 다음 예제에서는 인수 목록의 &lt;em&gt;최대 공약수&lt;/em&gt; 를 계산 하기 위해 &lt;code&gt;Math&lt;/code&gt; 객체에 메서드를 추가합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1868c7d85f9039bc5f29a9b5c60931981ac4943c" translate="yes" xml:space="preserve">
          <source>For larger integers, consider using &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">더 큰 정수의 경우 &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="b0b6c7680b4411889f316e62858715f52104323d" translate="yes" xml:space="preserve">
          <source>For larger integers, consider using the &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">더 큰 정수의 경우 &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 유형 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="21711d63e992ed5c39c7e55a8b4160a3ddd59a3e" translate="yes" xml:space="preserve">
          <source>For migrating away from String generics, see also &lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;Warning: String.x is deprecated; use String.prototype.x instead&lt;/a&gt;.</source>
          <target state="translated">String 제네릭에서 마이그레이션하려면 &lt;a href=&quot;../errors/deprecated_string_generics&quot;&gt;경고 : String.x는 더 이상 사용되지 않습니다.를&lt;/a&gt; 참조하십시오 . 대신 String.prototype.x를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb079a75ce78aeb8e4751ad38cdd82e4e1931681" translate="yes" xml:space="preserve">
          <source>For more details and examples, see the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; reference page.</source>
          <target state="translated">자세한 내용과 예제는 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 참조 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e5c537fbbdfb46a6df802c4196646c039b2d58aa" translate="yes" xml:space="preserve">
          <source>For more details see the</source>
          <target state="translated">자세한 내용은</target>
        </trans-unit>
        <trans-unit id="565399faf193cd242082c77a9136a91023cacc82" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="537acebfecc5ae5d569fe9aa4cc7353d681d905f" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;../global_objects/date/parse&quot;&gt;&lt;code&gt;Date.parse()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../global_objects/date/parse&quot;&gt; &lt;code&gt;Date.parse()&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ec7bb7f7f306725bc0cc8d0a9596c029c14e67e" translate="yes" xml:space="preserve">
          <source>For more examples and explanations, see also the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</source>
          <target state="translated">더 많은 예제와 설명 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;은 함수에 대한 JavaScript 안내서&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="29d5f8519fba312b94a2d3d21282946efe02f428" translate="yes" xml:space="preserve">
          <source>For more examples and explanations, see also the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;JavaScript guide about functions&lt;/a&gt;.</source>
          <target state="translated">더 많은 예제와 설명 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;은 함수에 대한 JavaScript 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f8c75dccfa7bff0491d015e11249ba2e60cb980b" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">더 많은 예제를 보려면 &lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt; 메서드 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b1d54ba61f44c6833dff7ca5a653708fc668d09" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../intl/numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../intl/datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; pages.</source>
          <target state="translated">더 많은 예제는 &lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../intl/numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../intl/datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd469e9a34419903e864c6e6bb0279a91ed2b956" translate="yes" xml:space="preserve">
          <source>For more examples, see also the &lt;a href=&quot;../intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; pages.</source>
          <target state="translated">더 많은 예제는 &lt;a href=&quot;../intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 페이지 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0de23395c0de08f95a240914e3c72a06c77acc1" translate="yes" xml:space="preserve">
          <source>For more information (but slower execution) use &lt;a href=&quot;match&quot;&gt;&lt;code&gt;match()&lt;/code&gt;&lt;/a&gt; (similar to the regular expression &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">자세한 정보 (하지만 실행 속도가 느림)를 보려면 &lt;a href=&quot;match&quot;&gt; &lt;code&gt;match()&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 (정규 표현식 &lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 메서드 와 유사 ).</target>
        </trans-unit>
        <trans-unit id="2b2a62fa06a569a4e71db2218e5ef99dea39c4d2" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;BigInt&lt;/code&gt;, see also &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#BigInt_type&quot;&gt;JavaScript data structures&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;BigInt&lt;/code&gt; 에 대한 자세한 내용은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#BigInt_type&quot;&gt;JavaScript 데이터 구조를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa45aa826bc67e52c3699e8add9da78f080b141c" translate="yes" xml:space="preserve">
          <source>For more information about the constructor syntax and the parameters, see &lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">생성자 구문 및 매개 변수에 대한 자세한 정보는 &lt;em&gt;&lt;a href=&quot;typedarray#Syntax&quot;&gt;TypedArray를&lt;/a&gt;&lt;/em&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb077bcb1697973ae809872951b88bd50d47f865" translate="yes" xml:space="preserve">
          <source>For more information and examples about methods, see &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definitions&lt;/a&gt;.</source>
          <target state="translated">메소드에 대한 자세한 정보 및 예제는 메소드 &lt;a href=&quot;../functions/method_definitions&quot;&gt;정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4147ffff788ad6e8dd732f25c8f44303ca5eff09" translate="yes" xml:space="preserve">
          <source>For more information on ES2015 generators, see &lt;a href=&quot;statements/function*&quot;&gt;the function* documentation&lt;/a&gt;.</source>
          <target state="translated">ES2015 생성기에 대한 자세한 내용 &lt;a href=&quot;statements/function*&quot;&gt;은 function * 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c20f6816b01b03bef7066dc636a8fdc827e288d4" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@replace&quot;&gt;&lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../regexp/@@replace&quot;&gt; &lt;code&gt;RegExp.prototype[@@replace]()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1d249c0c1e1c5c8d53c7694847144936b46861ae" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@search&quot;&gt;&lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../regexp/@@search&quot;&gt; &lt;code&gt;RegExp.prototype[@@search]()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="22a55ca163b96bcc1e7fca930dc6fbd5e236d8e6" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../regexp/@@split&quot;&gt;&lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../regexp/@@split&quot;&gt; &lt;code&gt;RegExp.prototype[@@split]()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b6e8482902bcbc4ca1024b1b563c87452c280bc6" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;classes/private_class_fields&quot;&gt;private class fields&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;classes/private_class_fields&quot;&gt;개인 클래스 필드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cadad1fb936cd59a173ee4ad751226d192504b1" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">자세한 내용은 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c3d3fb5e56a0795c1d85cbb417c634f7eb2a1bef" translate="yes" xml:space="preserve">
          <source>For most languages, this will return the same as &lt;a href=&quot;string/tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">대부분의 언어에서 이것은 &lt;a href=&quot;string/tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="c0607794d251fdce700dc8d89c0e7d5e6e11c20f" translate="yes" xml:space="preserve">
          <source>For most languages, this will return the same as &lt;a href=&quot;string/touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">대부분의 언어에서 이것은 &lt;a href=&quot;string/touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="0ff1246a9ef90a722598fb1022139c892f34d135" translate="yes" xml:space="preserve">
          <source>For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 2, the same as &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt;:</source>
          <target state="translated">음수가 아닌 숫자의 경우 제로 채우기 오른쪽 이동 및 부호 전파 오른쪽 이동은 동일한 결과를 생성합니다. 예를 들어, &lt;code&gt;9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; 는 &lt;code&gt;9 &amp;gt;&amp;gt; 2&lt;/code&gt; 와 같은 2를 산출합니다 .</target>
        </trans-unit>
        <trans-unit id="6d9507377b2f2c62fec727a5e7ce33f88d4c131d" translate="yes" xml:space="preserve">
          <source>For object &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a object changes, the changes are visible to both the new and original arrays.</source>
          <target state="translated">개체 &lt;code&gt;slice&lt;/code&gt; 개체 참조를 새 배열로 복사합니다. 원래 배열과 새 배열은 모두 동일한 객체를 참조합니다. 객체가 변경되면 변경 사항이 새 배열과 원래 배열 모두에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="948269bcb1af5d5bc928b45a45c3946fc9810b7e" translate="yes" xml:space="preserve">
          <source>For object literals (new in ECMAScript 2018):</source>
          <target state="translated">객체 리터럴 (ECMAScript 2018의 새로운 기능) :</target>
        </trans-unit>
        <trans-unit id="934a86b954c8fa55f872d6a94658543d7acf642d" translate="yes" xml:space="preserve">
          <source>For object references (and not the actual object), &lt;code&gt;slice&lt;/code&gt; copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</source>
          <target state="translated">실제 객체가 아닌 객체 참조의 경우 &lt;code&gt;slice&lt;/code&gt; 는 객체 참조를 새 배열에 복사합니다. 원래 배열과 새 배열은 모두 동일한 객체를 나타냅니다. 참조 된 객체가 변경되면 변경 사항이 새 배열과 원래 배열 모두에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f2ef7c7562983cf61dc4f265a8e5904aee8958ff" translate="yes" xml:space="preserve">
          <source>For octal &lt;code&gt;BigInt&lt;/code&gt; numbers, always use zero followed by the letter &quot;o&quot; (uppercase or lowercase):</source>
          <target state="translated">8 진수 &lt;code&gt;BigInt&lt;/code&gt; 숫자의 경우 항상 0 다음에 문자 &quot;o&quot;(대문자 또는 소문자)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5af6e6762708ddaa2c5f00a451db70105ec9d12f" translate="yes" xml:space="preserve">
          <source>For octal escape sequences, you can use hexadecimal escape sequences instead:</source>
          <target state="translated">8 진 이스케이프 시퀀스의 경우 16 진수 이스케이프 시퀀스를 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9f59cbb942a8e1a9e18f6e55a2b55245320287c" translate="yes" xml:space="preserve">
          <source>For of iteration and destructuring</source>
          <target state="translated">반복 및 파괴</target>
        </trans-unit>
        <trans-unit id="68d3d4aadf2af6b1d406267a65a2761e6a41bcd2" translate="yes" xml:space="preserve">
          <source>For radices above &lt;code&gt;10&lt;/code&gt;, letters of the English alphabet indicate numerals greater than &lt;code&gt;9&lt;/code&gt;. For example, for hexadecimal numbers (base &lt;code&gt;16&lt;/code&gt;), &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; are used.</source>
          <target state="translated">기수가 &lt;code&gt;10&lt;/code&gt; 이상인 경우 영문자는 &lt;code&gt;9&lt;/code&gt; 보다 큰 숫자를 나타냅니다 . 예를 들어 16 진수 (기본 &lt;code&gt;16&lt;/code&gt; )의 경우 &lt;code&gt;A&lt;/code&gt; 에서 &lt;code&gt;F&lt;/code&gt; 까지 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ec534dca289b00a3b54f4910479eff1332f34eb9" translate="yes" xml:space="preserve">
          <source>For several versions, Firefox's SpiderMonkey engine had &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;a bug&lt;/a&gt; with regard to the &lt;code&gt;^&lt;/code&gt; assertion and the sticky flag which allowed expressions starting with the &lt;code&gt;^&lt;/code&gt; assertion and using the sticky flag to match when they shouldn't. The bug was introduced some time after Firefox 3.6 (which had the sticky flag but not the bug) and fixed in 2015. Perhaps because of the bug, the ES2015 specification &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;specifically calls out&lt;/a&gt; the fact that:</source>
          <target state="translated">여러 버전의 파이어 폭스의 SpiderMonkey를 엔진은 있었다 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=773687&quot;&gt;버그&lt;/a&gt; 받는 관한 &lt;code&gt;^&lt;/code&gt; 표현이로 시작 허용 주장과 스티키 플래그 &lt;code&gt;^&lt;/code&gt; 주장하고 때해야하지 일치하도록 스티키 플래그를 사용합니다. 이 버그는 Firefox 3.6 (스티커 플래그는 있지만 버그는 아님) 이후에 소개되어 2015 년에 수정되었습니다. 버그로 인해 ES2015 사양은 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/index.html#sec-assertion&quot;&gt;구체적으로&lt;/a&gt; 다음과 같은 사실을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="93c92034cd1eb47a40c418b73dd2c65b5a95c260" translate="yes" xml:space="preserve">
          <source>For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English, use &lt;a href=&quot;../string/localecompare&quot;&gt;&lt;code&gt;String.localeCompare&lt;/code&gt;&lt;/a&gt;. This function can compare those characters so they appear in the right order.</source>
          <target state="translated">비 ASCII 문자가있는 문자열, 즉 악센트 부호가있는 문자 (e, ​​&amp;eacute;, &amp;egrave;, a, &amp;auml; 등)가있는 문자열, 영어가 아닌 언어의 문자열을 정렬하려면 &lt;a href=&quot;../string/localecompare&quot;&gt; &lt;code&gt;String.localeCompare&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 . 이 함수는 해당 문자를 비교하여 올바른 순서로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b46591f15bdd7e9992fad829386c92aad2d66b7" translate="yes" xml:space="preserve">
          <source>For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, &amp;eacute;, &amp;egrave;, a, &amp;auml;, etc.), strings from languages other than English: use &lt;a href=&quot;../string/localecompare&quot;&gt;&lt;code&gt;String.localeCompare&lt;/code&gt;&lt;/a&gt;. This function can compare those characters so they appear in the right order.</source>
          <target state="translated">ASCII가 아닌 문자가 포함 된 문자열, 즉 악센트 부호가있는 문자열 (e, &amp;eacute;, &amp;egrave;, a, &amp;auml; 등)을 정렬하려면 영어 이외의 언어 문자열 : &lt;a href=&quot;../string/localecompare&quot;&gt; &lt;code&gt;String.localeCompare&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 . 이 기능을 사용하면 해당 문자를 올바른 순서로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="540a56d0783c49dbe2c11278be8b492feebaf797" translate="yes" xml:space="preserve">
          <source>For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number or boolean in one array do not affect the other array.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체가 아닌 문자열 , 숫자 및 부울의 경우 &lt;code&gt;slice&lt;/code&gt; 는 값을 새 배열에 복사합니다. 한 배열에서 문자열, 숫자 또는 부울을 변경해도 다른 배열에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d444bd84437a0b6fcee2a95864c95e882927697" translate="yes" xml:space="preserve">
          <source>For strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects), &lt;code&gt;slice&lt;/code&gt; copies the values into the new array. Changes to the string, number, or boolean in one array do not affect the other array.</source>
          <target state="translated">문자열, 숫자 및 부울 ( &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체가 아님)의 경우 &lt;code&gt;slice&lt;/code&gt; 는 값을 새 배열에 복사합니다. 한 배열에서 문자열, 숫자 또는 부울을 변경해도 다른 배열에는 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="06785c7ab3ceabe53e023cc803f4cbcf0a2ea208" translate="yes" xml:space="preserve">
          <source>For that reason, it is recommended to always declare variables at the top of their scope (the top of global code and the top of function code) so it's clear which variables are function scoped (local) and which are resolved on the scope chain.</source>
          <target state="translated">따라서 항상 변수의 범위 맨 위 (글로벌 코드의 맨 위와 함수 코드의 맨 위)에 변수를 선언하는 것이 좋습니다. 따라서 어떤 변수가 함수 범위 (로컬)이고 범위 체인에서 해결되는지 명확하게 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a8ab842102daf5a75a62664fc4cef78325333c6" translate="yes" xml:space="preserve">
          <source>For the above polyfill code snippet, if you need support for IE &amp;lt; 9, then you will also need an Object.keys polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; page).</source>
          <target state="translated">위의 폴리 필 코드 스 니펫의 경우 IE &amp;lt;9를 지원해야하는 경우 Object.keys 폴리 필 (예 : &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; 페이지 에있는 폴리 필)도 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="2ff286ee9816975926ad2df5b818bca27d4aa4f3" translate="yes" xml:space="preserve">
          <source>For the above polyfill code snippet, if you need support for IE&amp;lt;9, then you will also need an &lt;code&gt;Object.keys()&lt;/code&gt; polyfill (such as the one found on the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; page).</source>
          <target state="translated">위의 폴리 필 코드 스 니펫의 경우 IE &amp;lt;9에 대한 지원이 필요하면 &lt;code&gt;Object.keys()&lt;/code&gt; 폴리 필 (예 : &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; 페이지 에있는 것)도 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="e86c69e41d5578c8ab620467b118befa7b4c82a3" translate="yes" xml:space="preserve">
          <source>For these reasons, the code may break when it encounters &lt;code&gt;String&lt;/code&gt; objects when it expects a primitive string instead, although generally, authors need not worry about the distinction.</source>
          <target state="translated">이러한 이유로 인해 원시 문자열을 기대할 때 &lt;code&gt;String&lt;/code&gt; 객체를 만나면 코드가 손상 될 수 있지만 일반적으로 작성자는 구분에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e795205d3a92bb247c9c7bd22a188d11d61d947e" translate="yes" xml:space="preserve">
          <source>For this example we need either to stay parent constructor to continue to work properly or reassign static properties to child's constructor:</source>
          <target state="translated">이 예제에서는 부모 생성자를 유지하여 계속 제대로 작동하거나 정적 속성을 자식 생성자에 다시 할당해야합니다.</target>
        </trans-unit>
        <trans-unit id="a80fbe0f90b18884c38de565a55619dfc8eef409" translate="yes" xml:space="preserve">
          <source>For this example we need to stay parent constructor to continue to work properly.</source>
          <target state="translated">이 예제에서는 계속 제대로 작동하려면 부모 생성자를 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="84d9ebf35a9fb052dc6520246e27e9c8406f4395" translate="yes" xml:space="preserve">
          <source>For this reason you cannot expect to be able to compare the results of &lt;code&gt;format()&lt;/code&gt; to a static value:</source>
          <target state="translated">이러한 이유로 &lt;code&gt;format()&lt;/code&gt; 의 결과를 정적 값과 비교할 수는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="623d1636d2cb82911dcfaa1f03be33571ed68e0b" translate="yes" xml:space="preserve">
          <source>For this reason, you cannot expect to be able to compare the results of &lt;code&gt;toLocaleString()&lt;/code&gt; to a static value:</source>
          <target state="translated">이러한 이유로 &lt;code&gt;toLocaleString()&lt;/code&gt; 의 결과를 정적 값과 비교할 수는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="d60021b97245913ab5c4645ab6423ee66b339bfc" translate="yes" xml:space="preserve">
          <source>For top-level documents, two headers will need to be set to cross-origin isolate your site:</source>
          <target state="translated">최상위 문서의 경우 사이트 간 격리를 위해 두 개의 헤더를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="b56658dd3fa703a5f77c5743fefd762f4e9d9be5" translate="yes" xml:space="preserve">
          <source>For top-level documents, two headers will need to be set:</source>
          <target state="translated">최상위 문서의 경우 두 개의 헤더를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="7e72d021a9c7dcee914ef4ae15b51fa929f6676a" translate="yes" xml:space="preserve">
          <source>For values greater than 1 or less than -1, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">1보다 크거나 -1보다 작은 값의 경우 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="87dff4f71b0ce96c7e09b920f635128236b8af67" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.acos()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1보다 작거나 1보다 큰 값의 경우 &lt;code&gt;Math.acos()&lt;/code&gt; 는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="07875d85c183bca60211acd95bc562b6d1f1151b" translate="yes" xml:space="preserve">
          <source>For values less than -1 or greater than 1, &lt;code&gt;Math.asin()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">-1보다 작거나 1보다 큰 값의 경우 &lt;code&gt;Math.asin()&lt;/code&gt; 은 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="dbccb44e1ad1d9938a16b005939cd9587366d68f" translate="yes" xml:space="preserve">
          <source>For values less than 1 &lt;code&gt;Math.acosh()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1보다 작은 값의 경우 &lt;code&gt;Math.acosh()&lt;/code&gt; 는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9b6b3c574ade47a62c108d529c0e430d70e98212" translate="yes" xml:space="preserve">
          <source>For very small values of &lt;em&gt;x&lt;/em&gt;, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.</source>
          <target state="translated">매우 작은 &lt;em&gt;x&lt;/em&gt; 값의 경우 1을 추가하면 정밀도를 줄이거 나 없앨 수 있습니다. JS에서 사용되는 이중 부동 소수점은 약 15 자리의 정밀도를 제공합니다. 1 + 1e-15 = 1.000000000000001이지만 1 + 1e-16 = 1.000000000000000이므로 15에서 지난 자릿수가 반올림되므로 해당 산술에서 정확히 1.0입니다.</target>
        </trans-unit>
        <trans-unit id="2bbd71eaf791bfb3f63adbb189825a54962439b5" translate="yes" xml:space="preserve">
          <source>For years between and including 1900 and 1999, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is between 0 and 99. For example, if the year is 1976, &lt;code&gt;getYear()&lt;/code&gt; returns 76.</source>
          <target state="translated">1900 년에서 1999 년 사이의 연도에 대해 &lt;code&gt;getYear()&lt;/code&gt; 반환되는 값 은 0에서 99 사이입니다. 예를 들어, 연도가 1976이면 &lt;code&gt;getYear()&lt;/code&gt; 는 76을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e42acf139f10d14a863cb22ae932066d8cc7564f" translate="yes" xml:space="preserve">
          <source>For years between and including 1900 and 1999, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is the year minus 1900. For example, if the year is 1976, the value returned is 76.</source>
          <target state="translated">1900 년과 1999 년 사이 의 연도 에 대해 &lt;code&gt;getYear()&lt;/code&gt; 반환 된 값 은 연도에서 1900을 뺀 값입니다. 예를 들어 연도가 1976 인 경우 반환되는 값은 76입니다.</target>
        </trans-unit>
        <trans-unit id="ca03ba2316c9371cee228c46bf88e3639ba32e55" translate="yes" xml:space="preserve">
          <source>For years greater than or equal to 2000, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is 100 or greater. For example, if the year is 2026, &lt;code&gt;getYear()&lt;/code&gt; returns 126.</source>
          <target state="translated">2000 년보다 크거나 같은 연도 동안 &lt;code&gt;getYear()&lt;/code&gt; 반환 된 값 은 100 이상입니다. 예를 들어 연도가 2026이면 &lt;code&gt;getYear()&lt;/code&gt; 는 126을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="34007a6b1801033b144059d555c483ce55e3a15f" translate="yes" xml:space="preserve">
          <source>For years less than 1900 or greater than 1999, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.</source>
          <target state="translated">1900 년보다 작거나 1999 년보다 긴 연도의 경우 &lt;code&gt;getYear()&lt;/code&gt; 가 반환하는 값 은 4 자리 연도입니다. 예를 들어, 연도가 1856이면 반환되는 값은 1856입니다. 연도가 2026이면 반환되는 값은 2026입니다.</target>
        </trans-unit>
        <trans-unit id="ec139ce1d67e28d42838e5f9cf1549db614c6512" translate="yes" xml:space="preserve">
          <source>For years less than 1900, the value returned by &lt;code&gt;getYear()&lt;/code&gt; is less than 0. For example, if the year is 1800, &lt;code&gt;getYear()&lt;/code&gt; returns -100.</source>
          <target state="translated">1900 년보다 작은 연도의 경우 &lt;code&gt;getYear()&lt;/code&gt; 에 의해 반환 된 값 은 0보다 작습니다. 예를 들어 연도가 1800이면 &lt;code&gt;getYear()&lt;/code&gt; 는 -100을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="04e11fb6d3be3c51b3a94e7dbcd6c14d6c2cfa81" translate="yes" xml:space="preserve">
          <source>For-each-in loops are deprecated</source>
          <target state="translated">For-each-in 루프는 더 이상 사용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="af0e67684b1c4abe6fb7b9901318f2329739aabd" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: Promises and Generators: control flow utopia -- JSConf EU 2013</source>
          <target state="translated">Forbes Lindesay : 약속 및 생성기 : 제어 흐름 유토피아-JSConf EU 2013</target>
        </trans-unit>
        <trans-unit id="7b32fb1f943493003851f2d112058fd52282df82" translate="yes" xml:space="preserve">
          <source>Forbes Lindesay: promisejs.org</source>
          <target state="translated">포브스 린데 세이 : promisejs.org</target>
        </trans-unit>
        <trans-unit id="a053925e9cf7d7a90e5b988e023b63f45b8b1600" translate="yes" xml:space="preserve">
          <source>Forgotten characters</source>
          <target state="translated">잊혀진 캐릭터</target>
        </trans-unit>
        <trans-unit id="a6261dda713480f61e179215417e7e8c9ea57961" translate="yes" xml:space="preserve">
          <source>Forgotten closing curly bracket</source>
          <target state="translated">잊혀진 닫는 중괄호</target>
        </trans-unit>
        <trans-unit id="736612168ad4b2ebbdea7fc60c97a690632ed1ff" translate="yes" xml:space="preserve">
          <source>Forgotten comma</source>
          <target state="translated">잊혀진 쉼표</target>
        </trans-unit>
        <trans-unit id="55550d89e7ca43740394fa9c2e706f8405aa15d0" translate="yes" xml:space="preserve">
          <source>Form feed</source>
          <target state="translated">용지 공급</target>
        </trans-unit>
        <trans-unit id="150d9f841097f64a42b925806fe3290abd9bc35d" translate="yes" xml:space="preserve">
          <source>Format String</source>
          <target state="translated">형식 문자열</target>
        </trans-unit>
        <trans-unit id="c9564ba8c76d4110b57b41baba092e3a50ad181e" translate="yes" xml:space="preserve">
          <source>Format of Date.prototype.toString is standardised.</source>
          <target state="translated">Date.prototype.toString의 형식이 표준화되었습니다.</target>
        </trans-unit>
        <trans-unit id="6303135fd457f5748b0f65e1c0ed6811b359b7fe" translate="yes" xml:space="preserve">
          <source>Formats a &lt;code&gt;value&lt;/code&gt; and a &lt;code&gt;unit&lt;/code&gt; according to the locale and formatting options of the given &lt;a href=&quot;relativetimeformat&quot;&gt;&lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">포맷 &lt;code&gt;value&lt;/code&gt; 및 &lt;code&gt;unit&lt;/code&gt; 로케일에 따른 상기 소정의 포맷 옵션 &lt;a href=&quot;relativetimeformat&quot;&gt; &lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt; 의&lt;/a&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="d885ea1814e7b1a55728852a1261e55f94c3db14" translate="yes" xml:space="preserve">
          <source>Formatting dates and numbers</source>
          <target state="translated">날짜 및 숫자 서식 지정</target>
        </trans-unit>
        <trans-unit id="9137de70f2a2e3b29ff45205f6e6d3f76de7e217" translate="yes" xml:space="preserve">
          <source>Formatting dates: &lt;a href=&quot;../datetimeformat/formattoparts&quot;&gt;&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">날짜 형식 지정 : &lt;a href=&quot;../datetimeformat/formattoparts&quot;&gt; &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="98fa7137d9a2d748fcbbbfd8b1e23d8f46f9b4f2" translate="yes" xml:space="preserve">
          <source>Formatting dates: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt;&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">서식 날짜 : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateFormat/formatToParts&quot;&gt; &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ac8fc42d2b96064f7447761abb1d6b2a1cc4fe6c" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="d61bb5d1708bc7b38517ac71a7df63c26e5057f7" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float32Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="425c654a6ac340d691d752960a9e7f52569afd68" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Float64Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="14546609f361e44ca966512a77290cf12a63fa3e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int16Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="60db126691b5722582058185268706c6e85661e3" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int32Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="99164b3e66d1fe611117c5f5c408c48a0336e80b" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Int8Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="0a7997ac147da1feac14077729de0f0f06e382f0" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;TypedArray.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="787212c5a9c84503f45356ae7e6124bb9b8bca71" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">전 비표준 버전 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint16Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="229f398e7f83b0bbc501b9d259ec99c5eadbf00e" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전의 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint32Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9dc5fa3b4b962f46918bf70fff9a0ed4d0005fe6" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이전 비표준 버전의 &lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8Array.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="61573e9050bbc7f9716c65c5a5be5d32c4b6dd10" translate="yes" xml:space="preserve">
          <source>Former non-standard version of &lt;a href=&quot;typedarray/copywithin&quot;&gt;&lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;typedarray/copywithin&quot;&gt; &lt;code&gt;Uint8ClampedArray.prototype.copyWithin()&lt;/code&gt; &lt;/a&gt; 의 비표준 버전 .</target>
        </trans-unit>
        <trans-unit id="01f10e37c5790e1fbab7120f2426462069f625d0" translate="yes" xml:space="preserve">
          <source>Fortunately, there's a very good alternative to &lt;code&gt;eval()&lt;/code&gt;: simply using &lt;a href=&quot;function&quot;&gt;&lt;code&gt;window.Function()&lt;/code&gt;&lt;/a&gt;. See this example of how to convert code using a dangerous &lt;code&gt;eval()&lt;/code&gt; to using &lt;code&gt;Function()&lt;/code&gt;, see below.</source>
          <target state="translated">다행히도 &lt;code&gt;eval()&lt;/code&gt; 대한 아주 좋은 대안이 있습니다 : 단순히 &lt;a href=&quot;function&quot;&gt; &lt;code&gt;window.Function()&lt;/code&gt; &lt;/a&gt; 사용하는 것입니다 . 위험한 &lt;code&gt;eval()&lt;/code&gt; 을 사용 하는 코드 를 &lt;code&gt;Function()&lt;/code&gt; 으로 변환하는 방법에 대한이 예제를 참조하십시오. 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0accbe68619f41f048c00252dd5cd3de52b67409" translate="yes" xml:space="preserve">
          <source>Four digit year (at least), padded on the left with zeros if necessary</source>
          <target state="translated">4 자리 연도 (최소), 필요한 경우 왼쪽이 0으로 채워짐</target>
        </trans-unit>
        <trans-unit id="48a73d90ee5399219a2b26ba8bbeaddc97c358c8" translate="yes" xml:space="preserve">
          <source>Fourth, strict mode prior to Gecko 34 requires that all properties named in an object literal be unique. The normal code may duplicate property names, with the last one determining the property's value. But since only the last one does anything, the duplication is simply a vector for bugs, if the code is modified to change the property value other than by changing the last instance. Duplicate property names are a syntax error in strict mode:</source>
          <target state="translated">넷째, Gecko 34 이전의 엄격 모드에서는 객체 리터럴로 명명 된 모든 속성이 고유해야합니다. 일반 코드는 속성 이름을 복제 할 수 있으며 마지막 이름은 속성 값을 결정합니다. 그러나 마지막 인스턴스 만 변경하기 때문에 코드가 마지막 인스턴스를 변경하는 것 이외의 속성 값을 변경하도록 수정되면 복제는 단순히 버그의 벡터입니다. 엄격한 모드에서 중복 속성 이름은 구문 오류입니다.</target>
        </trans-unit>
        <trans-unit id="4ca9f0aa5fd010590c2d9a5b1b7f430707dde52b" translate="yes" xml:space="preserve">
          <source>Freeing the contents of a variable</source>
          <target state="translated">변수 내용 해제</target>
        </trans-unit>
        <trans-unit id="342be9907aff8d146abb693da5c5fbdf10b3bfd4" translate="yes" xml:space="preserve">
          <source>Freezes an object. Other code cannot delete or change its properties.</source>
          <target state="translated">개체를 고정합니다. 다른 코드는 속성을 삭제하거나 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c12396c0b31eb0d4a22472ff15863783b40b01cf" translate="yes" xml:space="preserve">
          <source>Freezes an object: other code can't delete or change any properties.</source>
          <target state="translated">객체를 고정합니다. 다른 코드는 속성을 삭제하거나 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dda8928286e33df7e9ce870b122f4032e106574b" translate="yes" xml:space="preserve">
          <source>Freezing arrays</source>
          <target state="translated">배열 동결</target>
        </trans-unit>
        <trans-unit id="fff69c46ec0f3f13c6b9d6db7e3128d82b5edef7" translate="yes" xml:space="preserve">
          <source>Freezing objects</source>
          <target state="translated">객체 고정</target>
        </trans-unit>
        <trans-unit id="f845f4e8f7b96ac0598f032fd671c668cddf0fe3" translate="yes" xml:space="preserve">
          <source>From Chrome 42 to 48 strict mode is required. Non-strict mode support can be enabled using the flag &quot;Enable Experimental JavaScript&quot;.</source>
          <target state="translated">Chrome 42에서 48까지 엄격 모드가 필요합니다. &quot;실험용 JavaScript 활성화&quot;플래그를 사용하여 엄격하지 않은 모드 지원을 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a74d82ca6d704d6a1739c2f0ba541b688f9663fa" translate="yes" xml:space="preserve">
          <source>From ES2015 onwards, a non-object argument will be coerced to an object.</source>
          <target state="translated">ES2015부터는 객체가 아닌 인수가 객체로 강제 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="c25679ace478e563cd698a280a119eebace2f598" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Map.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13에서 Firefox 18까지 &lt;code&gt;size&lt;/code&gt; 속성은 &lt;code&gt;Map.prototype.size()&lt;/code&gt; 메서드 로 구현 되었으며 이후 버전의 ECMAScript 2015 사양에 따라 속성으로 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="0e0b399dc9eebfc7d1990373abc52e0d61c10f38" translate="yes" xml:space="preserve">
          <source>From Firefox 13 to Firefox 18, the &lt;code&gt;size&lt;/code&gt; property was implemented as a &lt;code&gt;Set.prototype.size()&lt;/code&gt; method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification.</source>
          <target state="translated">Firefox 13에서 Firefox 18까지 &lt;code&gt;size&lt;/code&gt; 속성은 &lt;code&gt;Set.prototype.size()&lt;/code&gt; 메서드 로 구현 되었으며 이후 버전의 ECMAScript 2015 사양에 따라 속성으로 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="551d3389162532e90e92d427f16e210eab0145b2" translate="yes" xml:space="preserve">
          <source>From Internet Explorer 5.5 through 8, all elements of the array will not be deleted if &lt;code&gt;deleteCount&lt;/code&gt; is omitted. This behavior was fixed in Internet Explorer 9.</source>
          <target state="translated">Internet Explorer 5.5에서 8까지는 &lt;code&gt;deleteCount&lt;/code&gt; 를 생략 해도 배열의 모든 요소가 삭제되지 않습니다 . 이 동작은 Internet Explorer 9에서 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="ee3161c209cb087ce7f1ec61b18e678d56621e54" translate="yes" xml:space="preserve">
          <source>From a Base64 string</source>
          <target state="translated">Base64 문자열에서</target>
        </trans-unit>
        <trans-unit id="e9fcc3ba0dacb2c33f5572d6513c46ec1f51af44" translate="yes" xml:space="preserve">
          <source>From a local file</source>
          <target state="translated">로컬 파일에서</target>
        </trans-unit>
        <trans-unit id="59ccfc107d86a4ba03bdf450f5345eccf7570e45" translate="yes" xml:space="preserve">
          <source>From a string</source>
          <target state="translated">문자열에서</target>
        </trans-unit>
        <trans-unit id="3c0ab59efded56b63f6b9de125b17bebffc0ee1c" translate="yes" xml:space="preserve">
          <source>From an iterable object (Set)</source>
          <target state="translated">반복 가능한 객체 (Set)에서</target>
        </trans-unit>
        <trans-unit id="95b25b855817858fdde0a383b9816b0ebbbd9c77" translate="yes" xml:space="preserve">
          <source>From another static method</source>
          <target state="translated">다른 정적 메소드에서</target>
        </trans-unit>
        <trans-unit id="cdc7d2920f0a75374a2c82187a3825b5b375d499" translate="yes" xml:space="preserve">
          <source>From arguments to an array</source>
          <target state="translated">인수에서 배열로</target>
        </trans-unit>
        <trans-unit id="edb7e13687c4fd064af515ae57c789b549d14b28" translate="yes" xml:space="preserve">
          <source>From class constructor and other methods</source>
          <target state="translated">클래스 생성자 및 기타 메소드에서</target>
        </trans-unit>
        <trans-unit id="1ab51c50144aa0f901d80f0ccd25700a9ed4ce50" translate="yes" xml:space="preserve">
          <source>From the JavaScript Guide:</source>
          <target state="translated">JavaScript 가이드에서 :</target>
        </trans-unit>
        <trans-unit id="3ce37f1321a1df7acda07b02703feaf9ec4a6639" translate="yes" xml:space="preserve">
          <source>Fulfillment</source>
          <target state="translated">Fulfillment</target>
        </trans-unit>
        <trans-unit id="c72c051b28b8c78171bcbcf2fd4fcfe0b74f3d7a" translate="yes" xml:space="preserve">
          <source>Fulfillment:</source>
          <target state="translated">Fulfillment:</target>
        </trans-unit>
        <trans-unit id="9b556da9671d8001f81148151b0a6bfa6ee1ec5c" translate="yes" xml:space="preserve">
          <source>Full JSON syntax</source>
          <target state="translated">전체 JSON 구문</target>
        </trans-unit>
        <trans-unit id="479c6a660c8cca606924f9a8f60062ac60b95222" translate="yes" xml:space="preserve">
          <source>Full width digits</source>
          <target state="translated">전체 너비 숫자</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="94666812ce5866cd1a15db937596988239737375" translate="yes" xml:space="preserve">
          <source>Function Call</source>
          <target state="translated">함수 호출</target>
        </trans-unit>
        <trans-unit id="c17d72a13ca98610038debcb2b1acf449da4ad6e" translate="yes" xml:space="preserve">
          <source>Function Properties of the &lt;code&gt;Module&lt;/code&gt; Constructor</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 생성자 의 함수 속성</target>
        </trans-unit>
        <trans-unit id="5bfbcebae9458d0af9e37589048c8edd93acdcad" translate="yes" xml:space="preserve">
          <source>Function body</source>
          <target state="translated">기능 바디</target>
        </trans-unit>
        <trans-unit id="19afabef296132b00adb34f8261f3cebd24ae6c3" translate="yes" xml:space="preserve">
          <source>Function call or new construction</source>
          <target state="translated">함수 호출 또는 신축</target>
        </trans-unit>
        <trans-unit id="11a9b2d4161e5ad9ec54d8d926e757e2efe309de" translate="yes" xml:space="preserve">
          <source>Function call overhead is minimal, making the far smaller code size well worth the benefit</source>
          <target state="translated">함수 호출 오버 헤드가 최소화되어 훨씬 작은 코드 크기로도 혜택을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6f490406ad4b3c4986a489d476e2a16ce80e13b" translate="yes" xml:space="preserve">
          <source>Function called on the wrong object</source>
          <target state="translated">잘못된 객체에서 호출 된 함수</target>
        </trans-unit>
        <trans-unit id="307d58da1cb5c708acf50f78b41a528827c81cf8" translate="yes" xml:space="preserve">
          <source>Function calls</source>
          <target state="translated">함수 호출</target>
        </trans-unit>
        <trans-unit id="b00de2862aa946dfc63f1e8f57701a7ce09a0278" translate="yes" xml:space="preserve">
          <source>Function composition enabling piping</source>
          <target state="translated">배관 가능한 기능 구성</target>
        </trans-unit>
        <trans-unit id="d1af7f91669f189668c5eb3a09479b4ab49a0508" translate="yes" xml:space="preserve">
          <source>Function constructor name</source>
          <target state="translated">함수 생성자 이름</target>
        </trans-unit>
        <trans-unit id="ec3a38ff47b4e9447d9b4167f95723643ee1edca" translate="yes" xml:space="preserve">
          <source>Function context</source>
          <target state="translated">기능 문맥</target>
        </trans-unit>
        <trans-unit id="371cd61240f0b649474e4841824d099d52b4a785" translate="yes" xml:space="preserve">
          <source>Function declaration hoisting</source>
          <target state="translated">기능 선언 게양</target>
        </trans-unit>
        <trans-unit id="964604cea11cd6874a8ee2a3a7585807e1d95455" translate="yes" xml:space="preserve">
          <source>Function declarations in JavaScript are hoisted to the top of the enclosing function or global scope. You can use the function before you declared it:</source>
          <target state="translated">JavaScript에서 함수 선언은 묶는 함수 또는 전역 범위의 맨 위에 있습니다. 선언하기 전에 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0882844bfef9215bf1252619621dc4233118aee9" translate="yes" xml:space="preserve">
          <source>Function expression</source>
          <target state="translated">함수 표현</target>
        </trans-unit>
        <trans-unit id="17fb59f0733689ed2045be8aa3262ce6ec9a7435" translate="yes" xml:space="preserve">
          <source>Function expression hoisting</source>
          <target state="translated">함수식 게양</target>
        </trans-unit>
        <trans-unit id="daae0e7952ba89448f51a03b65028ea3105791cd" translate="yes" xml:space="preserve">
          <source>Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;&lt;code&gt;function declarations&lt;/code&gt;&lt;/a&gt;. You can't use function expressions before you define them:</source>
          <target state="translated">JavaScript의 함수 표현식은 &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt; &lt;code&gt;function declarations&lt;/code&gt; &lt;/a&gt; 과 달리 게양되지 않습니다 . 함수 표현식은 정의하기 전에 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c255ed20dadf629d5459965af68b505c200db729" translate="yes" xml:space="preserve">
          <source>Function expressions in JavaScript are not hoisted, unlike &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;function declarations&lt;/a&gt;. You can't use function expressions before you create them:</source>
          <target state="translated">JavaScript의 함수 표현식은 &lt;a href=&quot;../statements/function#Function_declaration_hoisting&quot;&gt;함수 선언&lt;/a&gt; 과 달리 호이스트되지 않습니다 . 함수 표현식을 생성하기 전에는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dc209ae9e238f3c0aff47d37bc404c3e7a2be0ad" translate="yes" xml:space="preserve">
          <source>Function is a predicate, to test each element of the array. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise. It accepts three arguments:</source>
          <target state="translated">함수는 배열의 각 요소를 테스트하는 술어입니다. 요소를 유지하려면 &lt;code&gt;true&lt;/code&gt; 를, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴하십시오 . 세 가지 주장을 받아들입니다.</target>
        </trans-unit>
        <trans-unit id="5127dd5f27f6c6a6d5f0d78ec539e5213cae7cca" translate="yes" xml:space="preserve">
          <source>Function is a predicate, to test each element of the array. Return a value that coerces to &lt;code&gt;true&lt;/code&gt; to keep the element, or to &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">함수는 배열의 각 요소를 테스트하는 술어입니다. 요소를 유지하려면 &lt;code&gt;true&lt;/code&gt; 로, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 로 강제 변환하는 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5a44c442ae585c40fccbf2f6faa786a10212d74f" translate="yes" xml:space="preserve">
          <source>Function names for getters and setters</source>
          <target state="translated">게터 및 세터의 함수 이름</target>
        </trans-unit>
        <trans-unit id="708c1dbb97c63bf19d7f91be53f2b8467bf5e2e1" translate="yes" xml:space="preserve">
          <source>Function names in classes</source>
          <target state="translated">클래스의 함수 이름</target>
        </trans-unit>
        <trans-unit id="fd9bc7843bf061faafecc018aa83931d7818ecba" translate="yes" xml:space="preserve">
          <source>Function object (implements [[Call]] in ECMA-262 terms)</source>
          <target state="translated">함수 객체 (ECMA-262 용어에서 [[Call]] 구현)</target>
        </trans-unit>
        <trans-unit id="95796ca8b637d8dc40b037d8af4785cff79319f7" translate="yes" xml:space="preserve">
          <source>Function parameter definitions or function invocations only containing a comma will throw a &lt;a href=&quot;global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. Furthermore, when using a &lt;a href=&quot;functions/rest_parameters&quot;&gt;rest parameters&lt;/a&gt;, trailing commas are not allowed:</source>
          <target state="translated">함수 매개 변수 정의 또는 쉼표 만 포함하는 함수 호출은 &lt;a href=&quot;global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; 를 발생&lt;/a&gt; 시킵니다. 또한 &lt;a href=&quot;functions/rest_parameters&quot;&gt;나머지 매개 변수를&lt;/a&gt; 사용할 때 후행 쉼표는 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1e0d99529d66efa9e16b2a37d29fa7405450d6fd" translate="yes" xml:space="preserve">
          <source>Function parameters</source>
          <target state="translated">기능 매개 변수</target>
        </trans-unit>
        <trans-unit id="672b8daa03c25145e5097f1862c9ef31387136fa" translate="yes" xml:space="preserve">
          <source>Function parameters must be identifiers when setting up a function. All these function declarations fail, as they are providing values for their parameters:</source>
          <target state="translated">기능을 설정할 때 기능 매개 변수는 식별자 여야합니다. 이러한 모든 함수 선언은 매개 변수의 값을 제공하므로 실패합니다.</target>
        </trans-unit>
        <trans-unit id="5600fe54b54a8b636f91ef1623504e92aeaf1ae6" translate="yes" xml:space="preserve">
          <source>Function properties</source>
          <target state="translated">기능 속성</target>
        </trans-unit>
        <trans-unit id="6b465d97d33508de4883b2ea2aacf42b30c0c590" translate="yes" xml:space="preserve">
          <source>Function properties of the Global constructor</source>
          <target state="translated">글로벌 생성자의 함수 속성</target>
        </trans-unit>
        <trans-unit id="96d13c4b058b0e3603f90420cc0657996a50eabb" translate="yes" xml:space="preserve">
          <source>Function scope in the JavaScript Guide</source>
          <target state="translated">JavaScript 안내서의 기능 범위</target>
        </trans-unit>
        <trans-unit id="ab4bd9f09183936227e630a7c7b39b941aaf5590" translate="yes" xml:space="preserve">
          <source>Function shares a name with a pre-existing property</source>
          <target state="translated">함수가 기존 속성과 이름을 공유합니다</target>
        </trans-unit>
        <trans-unit id="bd3b89a4a10cf13f1260aab66f1be84bb80af97e" translate="yes" xml:space="preserve">
          <source>Function statement</source>
          <target state="translated">기능 설명</target>
        </trans-unit>
        <trans-unit id="eafea940d1e511a0a2f1cebf6796b3477ec72210" translate="yes" xml:space="preserve">
          <source>Function statement name</source>
          <target state="translated">함수명</target>
        </trans-unit>
        <trans-unit id="4cf12e2d177115edaad5e51ea329fbaa9987ccad" translate="yes" xml:space="preserve">
          <source>Function syntax</source>
          <target state="translated">함수 구문</target>
        </trans-unit>
        <trans-unit id="ea4d890dd16623c5c8446dce95b5a932109c776b" translate="yes" xml:space="preserve">
          <source>Function that is called for every element of &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt;. Each time &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; executes, the returned value is added to &lt;code&gt;&lt;var&gt;new_array&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;&lt;/code&gt; 의 모든 요소에 대해 호출되는 함수입니다 . &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 실행될 때마다 반환 된 값이 &lt;code&gt;&lt;var&gt;new_array&lt;/var&gt;&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="3d8ee8398d60cc1a5f5c35466d2a76d13621895a" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new Array, taking three arguments:</source>
          <target state="translated">세 개의 인수를 사용하여 새 배열의 요소를 생성하는 함수 :</target>
        </trans-unit>
        <trans-unit id="e6f81952ca9f35c640c03b5be0a1ea2ca810fee4" translate="yes" xml:space="preserve">
          <source>Function that produces an element of the new typed array, taking three arguments:</source>
          <target state="translated">세 가지 인수를 사용하여 새로운 형식의 배열 요소를 생성하는 함수 :</target>
        </trans-unit>
        <trans-unit id="e0aaa783b56f46ef91a7fcf55d33b81a0f903750" translate="yes" xml:space="preserve">
          <source>Function to execute for each element, taking three arguments:</source>
          <target state="translated">세 가지 인수를 사용하여 각 요소에 대해 실행할 함수 :</target>
        </trans-unit>
        <trans-unit id="0a9a09fba73beb71e3ec6b2f4fced16c535d8900" translate="yes" xml:space="preserve">
          <source>Function to execute for each element.</source>
          <target state="translated">각 요소에 대해 실행할 기능.</target>
        </trans-unit>
        <trans-unit id="8245e0a7fd1fb6820a2bdc6134a7f51effa836cd" translate="yes" xml:space="preserve">
          <source>Function to execute for each element. See &lt;a href=&quot;#Description&quot;&gt;Description&lt;/a&gt; for details.</source>
          <target state="translated">각 요소에 대해 실행할 기능. 자세한 내용은 &lt;a href=&quot;#Description&quot;&gt;설명&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="789b91b805025c1abb9b41a09ad7531dd443b8fd" translate="yes" xml:space="preserve">
          <source>Function to execute for each entry of &lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt;. It takes the following arguments:</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;myMap&lt;/var&gt;&lt;/code&gt; 의 각 항목에 대해 실행할 함수 입니다. 다음 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e59e92aca05dfc3936638050c64046f21a70c72f" translate="yes" xml:space="preserve">
          <source>Function to execute on each element in the array, taking four arguments:</source>
          <target state="translated">배열의 각 요소에서 실행되는 함수로 다음과 같은 네 가지 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8b0874ca6973cf3a686ef74edf9eb2c5aa9496a2" translate="yes" xml:space="preserve">
          <source>Function to execute on each element. It accepts between one and three arguments:</source>
          <target state="translated">각 요소에서 실행할 함수입니다. 1 ~ 3 개의 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="70dcfc2e124f327fc9032cb2b97496b173d1c660" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking 3 arguments:</source>
          <target state="translated">3 개의 인수를 사용하여 배열의 각 값에 대해 실행할 함수 :</target>
        </trans-unit>
        <trans-unit id="d9c16d36fcae4e723d177e4453f6bedf0139948a" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking four arguments:</source>
          <target state="translated">배열의 각 값에 대해 실행하는 함수로 4 개의 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e6195e252567d35a10d21eb1e04df6a69d8cfbdf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the array, taking three arguments:</source>
          <target state="translated">세 개의 인수를 사용하여 배열의 각 값에서 실행하는 함수 :</target>
        </trans-unit>
        <trans-unit id="06ab7f94fc517f961f4f408b0c5f87cd008986bf" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking four arguments:</source>
          <target state="translated">타입이 지정된 배열의 각 값에서 실행되는 함수로, 네 개의 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5f6b934406be9d6249cdc1b3a19e92f08c41af81" translate="yes" xml:space="preserve">
          <source>Function to execute on each value in the typed array, taking three arguments:</source>
          <target state="translated">유형이 지정된 배열의 각 값에서 실행되는 함수로 세 가지 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d0399838948b85571daab359e55567d43009c4e7" translate="yes" xml:space="preserve">
          <source>Function to test against</source>
          <target state="translated">테스트 할 기능</target>
        </trans-unit>
        <trans-unit id="3675e65254805019fa03ca3bbd0a78cd966d0b59" translate="yes" xml:space="preserve">
          <source>Function to test each element of the typed array. Invoked with arguments &lt;code&gt;(element, index, typedarray)&lt;/code&gt;. Return &lt;code&gt;true&lt;/code&gt; to keep the element, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">형식화 된 배열의 각 요소를 테스트하는 함수입니다. 인수 &lt;code&gt;(element, index, typedarray)&lt;/code&gt; 와 함께 호출됩니다 . 요소를 유지하려면 &lt;code&gt;true&lt;/code&gt; 를, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e7473d030993e2d6eb3f57687483d5d690862bd" translate="yes" xml:space="preserve">
          <source>Function to test for each element, taking three arguments:</source>
          <target state="translated">세 가지 인수를 사용하여 각 요소를 테스트하는 함수 :</target>
        </trans-unit>
        <trans-unit id="6dc02321ce201fb9e422a8eb5cc0645d8fa94712" translate="yes" xml:space="preserve">
          <source>Function.function</source>
          <target state="translated">Function.function</target>
        </trans-unit>
        <trans-unit id="ec0042429e084ef113ff136b415ef99aef55e4ca" translate="yes" xml:space="preserve">
          <source>Function.length</source>
          <target state="translated">Function.length</target>
        </trans-unit>
        <trans-unit id="fdbbb1ee0fc1df9dbe0f5ce2283603d07adf60ad" translate="yes" xml:space="preserve">
          <source>Function.name</source>
          <target state="translated">Function.name</target>
        </trans-unit>
        <trans-unit id="61048c595732199c0b042fcddcb8a4147d570f28" translate="yes" xml:space="preserve">
          <source>Function.prototype</source>
          <target state="translated">Function.prototype</target>
        </trans-unit>
        <trans-unit id="e8db8cd46941a2c6cb8556f8f50bea337d34209b" translate="yes" xml:space="preserve">
          <source>Function.prototype.toString result</source>
          <target state="translated">Function.prototype.toString 결과</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="c3b29c6be0b6a24a1feb33b3fab2c4f7ffa22f5d" translate="yes" xml:space="preserve">
          <source>Functions and classes</source>
          <target state="translated">함수와 클래스</target>
        </trans-unit>
        <trans-unit id="a993a7d52a753df1bbff39ffb1b6921b25fde081" translate="yes" xml:space="preserve">
          <source>Functions and function scope</source>
          <target state="translated">기능 및 기능 범위</target>
        </trans-unit>
        <trans-unit id="6673418c5f8022362be941a6c397594c4ab43b3a" translate="yes" xml:space="preserve">
          <source>Functions can be conditionally declared, that is, a function statement can be nested within an &lt;code&gt;if&lt;/code&gt; statement, however the results are inconsistent across implementations and therefore this pattern should not be used in production code. For conditional function creation, use function expressions instead.</source>
          <target state="translated">함수를 조건부로 선언 할 수 있습니다. 즉, 함수 명령문을 &lt;code&gt;if&lt;/code&gt; 문 내에 중첩 할 수 있지만 구현에서 결과가 일치하지 않으므로이 패턴을 프로덕션 코드에서 사용해서는 안됩니다. 조건부 함수 작성의 경우 함수 표현식을 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7a375adfd2b106044376f7940f10595ea47f0544" translate="yes" xml:space="preserve">
          <source>Functions created with the &lt;code&gt;Function&lt;/code&gt; constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;Function&lt;/code&gt; constructor was created. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a function expression.</source>
          <target state="translated">Function 생성자로 작성된 &lt;code&gt;Function&lt;/code&gt; 는 작성 컨텍스트에 대한 클로저를 작성하지 않습니다. 그들은 항상 글로벌 범위에서 만들어집니다. 그것들을 실행할 때, &lt;code&gt;Function&lt;/code&gt; 생성자가 작성된 범위의 변수가 아니라 자신의 로컬 변수 및 전역 변수에만 액세스 할 수 있습니다 . 이것은 함수 표현식을 위해 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 을 코드와 함께 사용하는 것과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="59d73efc9d6d784f8d7600d608f8c956ab9681d7" translate="yes" xml:space="preserve">
          <source>Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...) create&lt;/code&gt;&lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects and their name is &quot;anonymous&quot;.</source>
          <target state="translated">구문 구문 &lt;code&gt;new Function(...)&lt;/code&gt; 또는 그냥 &lt;code&gt;Function(...) create&lt;/code&gt; 작성된 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 객체를 생성 하며 이름은 &quot;익명&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="bd8f3ed7e9cf62bb2ef8799057f7ef8ed53c6712" translate="yes" xml:space="preserve">
          <source>Functions created with the syntax &lt;code&gt;new Function(...)&lt;/code&gt; or just &lt;code&gt;Function(...)&lt;/code&gt; create &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects and their name is &quot;anonymous&quot;.</source>
          <target state="translated">구문으로 생성 기능 &lt;code&gt;new Function(...)&lt;/code&gt; 하거나 &lt;code&gt;Function(...)&lt;/code&gt; 생성 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 객체를 자신의 이름이 &quot;익명&quot;이다.</target>
        </trans-unit>
        <trans-unit id="767b81b474f513e1ae3378489bb47b34cbac169b" translate="yes" xml:space="preserve">
          <source>Functions defined by function expressions and function declarations are parsed only once, while those defined by the &lt;code&gt;Function&lt;/code&gt; constructor are not. That is, the function body string passed to the &lt;code&gt;Function&lt;/code&gt; constructor must be parsed each and every time the constructor is called. Although a function expression creates a closure every time, the function body is not reparsed, so function expressions are still faster than &quot;&lt;code&gt;new Function(...)&lt;/code&gt;&quot;. Therefore the &lt;code&gt;Function&lt;/code&gt; constructor should generally be avoided whenever possible.</source>
          <target state="translated">함수 표현식과 함수 선언으로 정의 된 함수는 한 번만 구문 분석되지만 &lt;code&gt;Function&lt;/code&gt; 생성자에서 정의 된 함수는 분석 되지 않습니다. 즉, &lt;code&gt;Function&lt;/code&gt; 생성자에 전달 된 함수 본문 문자열 은 생성자가 호출 될 때마다 파싱해야합니다. 함수 표현식은 매번 클로저를 작성하지만 함수 본문은 재분석되지 않으므로 함수 표현식은 여전히 ​​&quot; &lt;code&gt;new Function(...)&lt;/code&gt; &quot; 보다 빠릅니다 . 따라서 &lt;code&gt;Function&lt;/code&gt; 생성자는 일반적으로 가능할 때마다 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="fea71cda87d91c331ea7710f6b634b839573601d" translate="yes" xml:space="preserve">
          <source>Functions defined inside function body</source>
          <target state="translated">함수 본문 내에 정의 된 함수</target>
        </trans-unit>
        <trans-unit id="edd7fcd1cb74de67d317175dfdbe9485ebef1286" translate="yes" xml:space="preserve">
          <source>Functions in the JavaScript Guide</source>
          <target state="translated">JavaScript 안내서의 함수</target>
        </trans-unit>
        <trans-unit id="bfa76ec20828c5499231c7f6de98463a13153ffb" translate="yes" xml:space="preserve">
          <source>Functions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed.</source>
          <target state="translated">자신을 재귀 적으로 호출하는 함수에는 이미 처리 된 개체를 추적하여 순환 데이터 구조를 보호하는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="808e29a2e402297441116279af3d78e2c5812556" translate="yes" xml:space="preserve">
          <source>Functions which are part of an object (apart from the global scope) can be deleted with &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">객체의 일부인 (전역 범위를 제외하고) 함수는 &lt;code&gt;delete&lt;/code&gt; 로 삭제할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="519b03d9cd4fe17b24fdac2c2c1f48f9d5d19463" translate="yes" xml:space="preserve">
          <source>Fundamental objects</source>
          <target state="translated">기본 객체</target>
        </trans-unit>
        <trans-unit id="af96cb6cb2cb8bbbf404180840dbd3f203d28b86" translate="yes" xml:space="preserve">
          <source>Further calls to &lt;code&gt;test(&lt;var&gt;str&lt;/var&gt;)&lt;/code&gt; will resume searching &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; starting from &lt;code&gt;lastIndex&lt;/code&gt;. The &lt;code&gt;lastIndex&lt;/code&gt; property will continue to increase each time &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;test(&lt;var&gt;str&lt;/var&gt;)&lt;/code&gt; 대한 추가 호출 은 &lt;code&gt;lastIndex&lt;/code&gt; 에서 시작하여 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 검색을 다시 시작 합니다. &lt;code&gt;lastIndex&lt;/code&gt; 속성마다 계속 증가 할 것 &lt;code&gt;test()&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e44c8b638baa470dbb5f127964c092cc77ea465" translate="yes" xml:space="preserve">
          <source>Further reading</source>
          <target state="translated">추가 읽기</target>
        </trans-unit>
        <trans-unit id="f56da1ac0eed73b36f6abe8c31e7f536f9ed32f4" translate="yes" xml:space="preserve">
          <source>Further, this technique could be extended to create jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to erase all higher set bits so that clz can then be used.</source>
          <target state="translated">또한이 기술을 확장하여 아래에서 볼 수있는 것처럼 점프없는 &quot;후행 0 계수&quot;및 &quot;후행 1 계수&quot;기능을 만들 수 있습니다. &lt;code&gt;ctrz&lt;/code&gt; 아래 함수는 가장 낮은 채워진 비트로 모든 상위 비트를 채운 다음 비트를 부정하여 모든 상위 세트 비트를 지워 clz를 사용할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="e0f4637b5c4a3036a3d75ea225910b8db3ffab0a" translate="yes" xml:space="preserve">
          <source>Further, this teqnique could be extended to creating jumpless &quot;Count Trailing Zeros&quot; and &quot;Count Trailing Ones&quot; functions as seen below. The &lt;code&gt;ctrz&lt;/code&gt; function below fills in all the high bits with the lowest filled bit, then negates the bits to earase all higher set bits so that clz can then be used.</source>
          <target state="translated">또한이 teqnique는 아래에서 볼 수 있듯이 점프없는 &quot;Count Trailing Zeros&quot;및 &quot;Count Trailing Ones&quot;기능을 생성하도록 확장 될 수 있습니다. 아래 의 &lt;code&gt;ctrz&lt;/code&gt; 함수는 모든 채워진 비트를 가장 낮은 채움 비트로 채운 다음 비트를 무효화하여 모든 더 높은 세트의 비트를 이어 잡아서 clz를 사용할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="028e83b088bd223b83541d60f46f27cfb73bef3a" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;substr()&lt;/code&gt; is considered a &lt;strong&gt;legacy feature in ECMAScript&lt;/strong&gt; and could be removed from future versions, so it is best to avoid using it if possible.</source>
          <target state="translated">또한 &lt;code&gt;substr()&lt;/code&gt; 은 &lt;strong&gt;ECMAScript&lt;/strong&gt; 의 &lt;strong&gt;레거시 기능으로&lt;/strong&gt; 간주 되며 향후 버전에서 제거 될 수 있으므로 가능하면 사용하지 않는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e95bc397d4ac052736cf87b758eeb2c07cff1cb8" translate="yes" xml:space="preserve">
          <source>Future ECMAScript versions will likely introduce new syntax, and strict mode in ECMAScript 5 applies some restrictions to ease the transition. It will be easier to make some changes if the foundations of those changes are prohibited in strict mode.</source>
          <target state="translated">향후 ECMAScript 버전은 새로운 구문을 도입 할 것으로 예상되며 ECMAScript 5의 엄격 모드는 전환을 쉽게하기 위해 몇 가지 제한 사항을 적용합니다. 엄격 모드에서 이러한 변경의 기초가 금지 된 경우 일부 변경이 더 쉬울 것입니다.</target>
        </trans-unit>
        <trans-unit id="c206106a39358ac1d296043204ca34946d2e58c3" translate="yes" xml:space="preserve">
          <source>Future reserved keywords</source>
          <target state="translated">향후 예약 된 키워드</target>
        </trans-unit>
        <trans-unit id="b493f1c7f16fd418270a7c7b36ea4521bd5a8305" translate="yes" xml:space="preserve">
          <source>Future reserved keywords in older standards</source>
          <target state="translated">이전 표준의 향후 예약 키워드</target>
        </trans-unit>
        <trans-unit id="eeec35195b8fa6e3f75a2d7f1965493078ca0bf3" translate="yes" xml:space="preserve">
          <source>GMT and UTC are considered equivalent. The local time zone is used to interpret arguments in &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt; format that do not contain time zone information.</source>
          <target state="translated">GMT와 UTC는 동등한 것으로 간주됩니다. 현지 시간대는 시간대 정보를 포함하지 않는 &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 섹션 3.3&lt;/a&gt; 형식의 인수를 해석하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f0d653807dac2b51d6e8b14c89bde357143fb7fa" translate="yes" xml:space="preserve">
          <source>Garbage collection work can be split up over time using incremental and concurrent techniques.</source>
          <target state="translated">가비지 수집 작업은 증분 및 동시 기술을 사용하여 시간이 지남에 따라 분할 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48b5cf380b98788e6ec261d8df907dfa694f80ed" translate="yes" xml:space="preserve">
          <source>Gecko-specific notes</source>
          <target state="translated">도마뱀 관련 메모</target>
        </trans-unit>
        <trans-unit id="bf536d82538e3716aa45f22ff44fd02408c927f0" translate="yes" xml:space="preserve">
          <source>Generally speaking, a function is a &quot;subprogram&quot; that can be &lt;em&gt;called&lt;/em&gt; by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the &lt;em&gt;function body&lt;/em&gt;. Values can be &lt;em&gt;passed&lt;/em&gt; to a function, and the function will &lt;em&gt;return&lt;/em&gt; a value.</source>
          <target state="translated">일반적으로 함수는 함수의 외부 (또는 재귀의 경우 내부) 코드 로 &lt;em&gt;호출&lt;/em&gt; 할 수있는 &quot;서브 프로그램&quot;입니다 . 프로그램 자체와 마찬가지로 함수는 &lt;em&gt;함수 body&lt;/em&gt; 라고하는 일련의 명령문으로 구성 됩니다. 값은 함수에 &lt;em&gt;전달&lt;/em&gt; 될 수 있으며 함수는 값 을 &lt;em&gt;반환&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="73d6b75809b724848c64268de10f6d2bb1d9bed7" translate="yes" xml:space="preserve">
          <source>Generally, if you don't know if a value is a promise or not, &lt;a href=&quot;promise/resolve&quot;&gt;&lt;code&gt;Promise.resolve(value)&lt;/code&gt;&lt;/a&gt; it instead and work with the return value as a promise.</source>
          <target state="translated">일반적으로 값이 약속인지 여부를 모르는 경우 &lt;a href=&quot;promise/resolve&quot;&gt; &lt;code&gt;Promise.resolve(value)&lt;/code&gt; &lt;/a&gt; 대신 반환 값을 약속으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="65a78dd223dd91fcaee9d90ee9beff7dff817351" translate="yes" xml:space="preserve">
          <source>Generally, in most code it's very rare to see &lt;code&gt;new&lt;/code&gt; used on a bound function, so it is generally best to go with the first option.</source>
          <target state="translated">일반적으로 대부분의 코드 에서 바인딩 된 함수에 &lt;code&gt;new&lt;/code&gt; 가 사용되는 것은 매우 드물기 때문에 일반적으로 첫 번째 옵션을 사용하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="37dfbd51d44cf4644175611088cd71ca34038f22" translate="yes" xml:space="preserve">
          <source>Generate a sequence of numbers</source>
          <target state="translated">일련의 숫자 생성</target>
        </trans-unit>
        <trans-unit id="1d20de03126b297e05c13a7d280f33e24c72c537" translate="yes" xml:space="preserve">
          <source>Generator</source>
          <target state="translated">Generator</target>
        </trans-unit>
        <trans-unit id="d3f2061539e543a51091b4d970d40aa70534574d" translate="yes" xml:space="preserve">
          <source>Generator Functions enable writing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;iterators&lt;/a&gt; more easily.</source>
          <target state="translated">생성기 함수를 사용하면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol&quot;&gt;반복자를&lt;/a&gt; 보다 쉽게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e142f1d86c6a656c893b034d595c0a2c316a2572" translate="yes" xml:space="preserve">
          <source>Generator as a computed property</source>
          <target state="translated">계산 된 속성으로서의 생성기</target>
        </trans-unit>
        <trans-unit id="94dba629617954b87149624231d0b9c8c8add564" translate="yes" xml:space="preserve">
          <source>Generator as an object method</source>
          <target state="translated">객체 메서드로서의 생성기</target>
        </trans-unit>
        <trans-unit id="046b63f03e98ea467eac58a8c9e48fd5a3dbef60" translate="yes" xml:space="preserve">
          <source>Generator as an object property</source>
          <target state="translated">객체 속성으로서의 생성기</target>
        </trans-unit>
        <trans-unit id="3e6c1576c99e691366d463b6cc7261f52436128a" translate="yes" xml:space="preserve">
          <source>Generator comprehensions</source>
          <target state="translated">발전기 이해</target>
        </trans-unit>
        <trans-unit id="ea618cb70bb6a900ab6754a69ae6cc8b7800d1ae" translate="yes" xml:space="preserve">
          <source>Generator comprehensions.</source>
          <target state="translated">발전기 이해력.</target>
        </trans-unit>
        <trans-unit id="760f7f62ed1bb4c4df9cae1aeb12d6e6a7d3cff3" translate="yes" xml:space="preserve">
          <source>Generator defined in an expression</source>
          <target state="translated">식에 정의 된 생성기</target>
        </trans-unit>
        <trans-unit id="8147ce33fc30c02f837dbffc168db88b0d2bb485" translate="yes" xml:space="preserve">
          <source>Generator example</source>
          <target state="translated">발전기 예</target>
        </trans-unit>
        <trans-unit id="e794b11cba8f11ca654cb29060aa1e3ce3e6b0fd" translate="yes" xml:space="preserve">
          <source>Generator methods</source>
          <target state="translated">발전기 방법</target>
        </trans-unit>
        <trans-unit id="c1435d362ab37b4b01f1069647bcc8d8375e7adc" translate="yes" xml:space="preserve">
          <source>Generator methods are not constructable (ES2016)</source>
          <target state="translated">생성기 방법을 구성 할 수 없음 (ES2016)</target>
        </trans-unit>
        <trans-unit id="6048aba4df24c5f501add490c86e5a00ceca6ecf" translate="yes" xml:space="preserve">
          <source>GeneratorFunction</source>
          <target state="translated">GeneratorFunction</target>
        </trans-unit>
        <trans-unit id="2a0186662d51266237099d799c6ba09ec8791ee4" translate="yes" xml:space="preserve">
          <source>GeneratorFunction.prototype</source>
          <target state="translated">GeneratorFunction.prototype</target>
        </trans-unit>
        <trans-unit id="19b9eb24b04f641254c53a3e7f692e1ee1738460" translate="yes" xml:space="preserve">
          <source>Generators and iterators in Firefox versions before 26</source>
          <target state="translated">Firefox 버전 26 이전의 생성기 및 반복기</target>
        </trans-unit>
        <trans-unit id="598e59e5777c5d9c20fe8167bf445d2664315ae7" translate="yes" xml:space="preserve">
          <source>Generators are functions that can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</source>
          <target state="translated">생성기는 종료했다가 나중에 다시 입력 할 수있는 기능입니다. 해당 컨텍스트 (변수 바인딩)는 재진입시 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="efc1c21247260851933d4a582e95a94e6b02af01" translate="yes" xml:space="preserve">
          <source>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</source>
          <target state="translated">생성기는 종료하고 나중에 다시 입력 할 수있는 기능입니다. 그들의 문맥 (가변 바인딩)은 재진입에 걸쳐 저장 될 것이다.</target>
        </trans-unit>
        <trans-unit id="869d87770dc1b9354d4e10914b5250ec24707455" translate="yes" xml:space="preserve">
          <source>Generators are not constructable</source>
          <target state="translated">발전기는 구성 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="4f0cd84055f0e4e5bb70077c4ce1a3815d964046" translate="yes" xml:space="preserve">
          <source>Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;.</source>
          <target state="translated">JavaScript의 생성기 (특히 Promises와 결합 된 경우)는 &lt;a href=&quot;http://callbackhell.com/&quot;&gt;콜백 지옥 (Callback Hell)&lt;/a&gt; 및 &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;제어 반전 (Inversion of Control)&lt;/a&gt; 과 같은 콜백 문제를 완전히 제거하지는 않지만 완화시키는 비동기식 프로그래밍을위한 매우 강력한 도구입니다 .</target>
        </trans-unit>
        <trans-unit id="289f27e87bbd62506b66c91bc83fb45e1ac1646b" translate="yes" xml:space="preserve">
          <source>Generators in JavaScript -- especially when combined with Promises -- are a very powerful tool for asynchronous programming as they mitigate -- if not entirely eliminate -- the problems with callbacks, such as &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; and &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt;. However, an even simpler solution to these problems can be achieved with &lt;a href=&quot;async_function&quot;&gt;async functions&lt;/a&gt;.</source>
          <target state="translated">JavaScript의 제너레이터 (특히 Promises와 결합 된 경우)는 &lt;a href=&quot;http://callbackhell.com/&quot;&gt;Callback Hell&lt;/a&gt; 및 &lt;a href=&quot;https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/&quot;&gt;Inversion of Control&lt;/a&gt; 과 같은 콜백 문제를 완전히 제거하지는 못하더라도 완화하므로 비동기 프로그래밍을위한 매우 강력한 도구입니다 . 그러나 이러한 문제에 대한 더 간단한 솔루션은 &lt;a href=&quot;async_function&quot;&gt;비동기 함수를&lt;/a&gt; 통해 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="50585588be2138822abbe8f8b1df2809a6a3a359" translate="yes" xml:space="preserve">
          <source>Generators should not be re-used, even if the &lt;code&gt;for...of&lt;/code&gt; loop is terminated early, for example via the &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; keyword. Upon exiting a loop, the generator is closed and trying to iterate over it again does not yield any further results.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; 루프가 예를 들어 &lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt; 키워드 를 통해 조기에 종료 된 경우에도 생성기를 재사용해서는 안됩니다 . 루프를 종료하면 생성기가 닫히고 다시 반복하려고 시도해도 더 이상 결과가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="19ff32cabc04ec23eb1a5aec10de0239f6e32924" translate="yes" xml:space="preserve">
          <source>Generic function</source>
          <target state="translated">일반 기능</target>
        </trans-unit>
        <trans-unit id="857bc90faf0413b73759698277c41331ae085628" translate="yes" xml:space="preserve">
          <source>Generic methods (non-standard)</source>
          <target state="translated">일반적인 방법 (비표준)</target>
        </trans-unit>
        <trans-unit id="469e0788e79d852a9a805ea846c580f27362cc2a" translate="yes" xml:space="preserve">
          <source>Gentle explanation of 'this' keyword in JavaScript</source>
          <target state="translated">JavaScript에서 'this'키워드에 대한 부드러운 설명</target>
        </trans-unit>
        <trans-unit id="01399544e6a6b247ebc9945e42a93b7039922a05" translate="yes" xml:space="preserve">
          <source>Georgian numerals &amp;mdash; algorithmic</source>
          <target state="translated">그루지야 숫자 &amp;mdash; 알고리즘</target>
        </trans-unit>
        <trans-unit id="f83d0b54329e66f173582e1190480dc976e5939b" translate="yes" xml:space="preserve">
          <source>Get Non-Enumerable Only</source>
          <target state="translated">숫자 만 허용</target>
        </trans-unit>
        <trans-unit id="96d7d9996736514d94d8665c714bc88031c21a2e" translate="yes" xml:space="preserve">
          <source>Get non-enumerable properties only</source>
          <target state="translated">열거 할 수없는 속성 만 가져 오기</target>
        </trans-unit>
        <trans-unit id="ac8081883e1d5686a080039aa13ba3a61df7e4fb" translate="yes" xml:space="preserve">
          <source>Get the number of seconds since Unix Epoch</source>
          <target state="translated">Unix Epoch 이후의 시간 (초)을 가져옵니다</target>
        </trans-unit>
        <trans-unit id="cc48a219b2e420c26d82a0a469611fa88424b57a" translate="yes" xml:space="preserve">
          <source>Get the number of seconds since the ECMAScript Epoch</source>
          <target state="translated">ECMAScript Epoch 이후의 시간 (초) 가져 오기</target>
        </trans-unit>
        <trans-unit id="24c89d564893863a779b5a6e9bbe9934dfe48687" translate="yes" xml:space="preserve">
          <source>Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 16 비트 정수 (short)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7c5b0df8b04a0c459aba5cd19fee72b7324990e0" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 32 비트 부동 소수점 (float)을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d609650bbdb5e336c7b9bb56379a37b51538aeea" translate="yes" xml:space="preserve">
          <source>Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 32 비트 정수 (길이)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0e5cc6ced115c2b184167e3f8f66963001ef368a" translate="yes" xml:space="preserve">
          <source>Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 64 비트 부동 소수점 (double)을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="1dcff3ef5fec7543be1f9816175abb10166b11a3" translate="yes" xml:space="preserve">
          <source>Gets a signed 64-bit integer (long long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작에서 지정된 바이트 오프셋에서 부호있는 64 비트 정수 (long long)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="81db90d6ffde9b6412bbe66c68c47ef4e7743159" translate="yes" xml:space="preserve">
          <source>Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호있는 8 비트 정수 (바이트)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8fc72f256d25a90c98cdb40cba94a8871282ad94" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호없는 16 비트 정수 (부호없는 short)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d7f4131283bcadf677ce4db2eedf7e688f79ab97" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호없는 32 비트 정수 (부호없는 long)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="9e9ab26b9ed9c46b2c8810613671bb1eff49aa86" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 64-bit integer (unsigned long long) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작에서 지정된 바이트 오프셋에서 부호없는 64 비트 정수 (부호없는 long long)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d5b761248a23b47f9e33c7eae9b8dc3f30519d6b" translate="yes" xml:space="preserve">
          <source>Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.</source>
          <target state="translated">뷰의 시작 부분에서 지정된 바이트 오프셋에서 부호없는 8 비트 정수 (부호없는 바이트)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="517e73146e7ee4f454706494cbb5d4f32255eb4b" translate="yes" xml:space="preserve">
          <source>Gets the most likely values for the language, script, and region of the locale based on existing values.</source>
          <target state="translated">기존 값을 기반으로 로케일의 언어, 스크립트 및 지역에 대해 가장 가능성이 높은 값을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="96857c88cebeabc578d887e01fbcb2fd02cbcdb7" translate="yes" xml:space="preserve">
          <source>Getter</source>
          <target state="translated">Getter</target>
        </trans-unit>
        <trans-unit id="f2e54c330cdd01c6d47ab5b44eb43fb8cf8f5947" translate="yes" xml:space="preserve">
          <source>Getter and setter functions</source>
          <target state="translated">게터와 세터 함수</target>
        </trans-unit>
        <trans-unit id="c2c017ff0a7d1ff62b3f698df3acbdea5c0a8d2a" translate="yes" xml:space="preserve">
          <source>Getter function that compares two strings according to the sort order of this &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">이 &lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt; 개체 의 정렬 순서에 따라 두 문자열을 비교하는 Getter 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="9d4fcdb364f11755535ec293d4d71f80eeed9d8d" translate="yes" xml:space="preserve">
          <source>Getter function that formats a date according to the locale and formatting options of this &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">이 &lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로케일 및 형식 지정 옵션에 따라 날짜 형식을 지정하는 Getter 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="22ac10018fde177456efdcb94558b350e814fc69" translate="yes" xml:space="preserve">
          <source>Getter function that formats a number according to the locale and formatting options of this &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">이 &lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로케일 및 포맷 옵션에 따라 숫자를 포맷하는 Getter 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="cb65abe3705de84bc96c85c734723746cfaff77d" translate="yes" xml:space="preserve">
          <source>Getter only</source>
          <target state="translated">게터 만</target>
        </trans-unit>
        <trans-unit id="b82e2aa4437224c3ce65ca8da908b4469c7c2482" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt; 객체 의 정렬 순서에 따라 두 문자열을 비교하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c22fac77c009059affb217382c064ececfc99ac0" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that compares two strings according to the sort order of this &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt; 객체 의 정렬 순서에 따라 두 문자열을 비교하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="b3bbfe3f0cad3780f6ed32aa64f5415f3f02b3ea" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 날짜의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="101493502c3dabb33abe624e85075b4278d7088d" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a date according to the locale and formatting options of this &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 날짜의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="0d595a3294f368cb93ba183d5cf3d0d933407b9a" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 숫자의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="d32338c2f6c2e1ff3f7f292dd7d93f2f42a2385e" translate="yes" xml:space="preserve">
          <source>Getter; returns a function that formats a number according to the locale and formatting options of this &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">얻는 사람; 이 &lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 숫자의 서식을 지정하는 함수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="84e6081823bf6b4731797c6da752dd3058121ab9" translate="yes" xml:space="preserve">
          <source>Getters and setters are special methods that bind to a class property and are called when that property is accessed or set. Use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set&quot;&gt;set&lt;/a&gt; syntax to declare a public instance getter or setter.</source>
          <target state="translated">Getter 및 Setter는 클래스 속성에 바인딩하는 특수 메서드이며 해당 속성에 액세스하거나 설정할 때 호출됩니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&quot;&gt;get&lt;/a&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set&quot;&gt;set&lt;/a&gt; 구문을 사용하여 공용 인스턴스 getter 또는 setter를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="f51c7283f5fc0d078770fc5011a7b53470280401" translate="yes" xml:space="preserve">
          <source>Getters give you a way to &lt;em&gt;define&lt;/em&gt; a property of an object, but they do not &lt;em&gt;calculate&lt;/em&gt; the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed. If it is never needed, you never pay the cost.</source>
          <target state="translated">Getter 는 객체의 속성 을 &lt;em&gt;정의&lt;/em&gt; 하는 방법을 제공 하지만 액세스 할 때까지 속성의 값을 &lt;em&gt;계산&lt;/em&gt; 하지 않습니다 . 게터는 값이 필요할 때까지 값 계산 비용을 연기합니다. 필요하지 않은 경우 비용을 지불하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8ea8a70e0c66dbc7cdb18bf43206be829e1c2b4" translate="yes" xml:space="preserve">
          <source>Getters give you a way to define a property of an object, but they do not calculate the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed, and if it is never needed, you never pay the cost.</source>
          <target state="translated">Getter는 객체의 속성을 정의하는 방법을 제공하지만 속성에 액세스 할 때까지 속성 값을 계산하지 않습니다. 게터는 값이 필요할 때까지 값을 계산하는 비용을 연기하며, 필요하지 않은 경우 절대 비용을 지불하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b65d9b412c6df59f988b1cc08ddee0764855c0ac" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values</source>
          <target state="translated">두 값 사이의 임의의 정수 얻기</target>
        </trans-unit>
        <trans-unit id="e006e97377ead1206e5712837e81f4c8008e48bd" translate="yes" xml:space="preserve">
          <source>Getting a random integer between two values, inclusive</source>
          <target state="translated">두 값 사이의 임의의 정수 가져 오기</target>
        </trans-unit>
        <trans-unit id="a7aaee129f91cb0de88f607c96a13e02b3eadf9e" translate="yes" xml:space="preserve">
          <source>Getting a random number between 0 (inclusive) and 1 (exclusive)</source>
          <target state="translated">0 (포함)과 1 (제외) 사이의 난수 얻기</target>
        </trans-unit>
        <trans-unit id="e7e9b5402b7c69e9cfcf0a3dc0c6734f74f10e42" translate="yes" xml:space="preserve">
          <source>Getting a random number between two values</source>
          <target state="translated">두 값 사이의 난수 구하기</target>
        </trans-unit>
        <trans-unit id="9cdb6a445dbcaa1ef224574cb3e4c4af50c03c03" translate="yes" xml:space="preserve">
          <source>Getting an array buffer from existing data</source>
          <target state="translated">기존 데이터에서 배열 버퍼 가져 오기</target>
        </trans-unit>
        <trans-unit id="0c5070744f1dae1186acd94d2236210213d9a650" translate="yes" xml:space="preserve">
          <source>Getting it to work with higher values</source>
          <target state="translated">더 높은 값으로 작동하도록하기</target>
        </trans-unit>
        <trans-unit id="95954ee87db9f0acbfea36a4c6b6016a61fd3d3e" translate="yes" xml:space="preserve">
          <source>Getting the global context: &lt;a href=&quot;../global_objects/globalthis&quot;&gt;&lt;code&gt;globalThis&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">글로벌 컨텍스트 얻기 : &lt;a href=&quot;../global_objects/globalthis&quot;&gt; &lt;code&gt;globalThis&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93fa8562e2ad496efa70d8d322f9289d62409ab4" translate="yes" xml:space="preserve">
          <source>Getting the maximum element of an array</source>
          <target state="translated">배열의 최대 요소 얻기</target>
        </trans-unit>
        <trans-unit id="159afb1c4f6c9a04181e9922b1f6ba14fa8bf7f4" translate="yes" xml:space="preserve">
          <source>Getting whole characters</source>
          <target state="translated">전체 문자 얻기</target>
        </trans-unit>
        <trans-unit id="c7b80d1da362b36bfdf86ed39ef7c4eb5beb6a45" translate="yes" xml:space="preserve">
          <source>Github - Proposal-pipeline-operator</source>
          <target state="translated">Github-제안 파이프 라인 연산자</target>
        </trans-unit>
        <trans-unit id="1ccf04e9757d71b593670b6503b8dfb8626fea28" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt;, this returns 'border-top'.</source>
          <target state="translated">&lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt; 이 주어지면 'border-top'을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1cbcc3faa93f2d068c8c5e13ce1cbe4bbad1c49e" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt;, this returns &lt;code&gt;'border-top'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;styleHyphenFormat('borderTop')&lt;/code&gt; 이 주어지면 &lt;code&gt;'border-top'&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8cf85e175fcc3bf8d435c791b50a25d2626fc4d0" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt; and string, returns a copy of the contents of all custom sections in the module with the given string name.</source>
          <target state="translated">주어진 &lt;code&gt;Module&lt;/code&gt; 및 문자열, 지정된 문자열 이름을 가진 모듈의 모든 사용자 정의 섹션의 내용의 카피를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="71816309ab49deddc634406a637aa5de13c077ff" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared exports.</source>
          <target state="translated">주어진 &lt;code&gt;Module&lt;/code&gt; 은 선언 된 모든 내보내기에 대한 설명이 포함 된 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f856fccf3beb4cca4ef1ea953cc00f8bd48e12ac" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Module&lt;/code&gt;, returns an array containing descriptions of all the declared imports.</source>
          <target state="translated">주어진 &lt;code&gt;Module&lt;/code&gt; 은 선언 된 모든 가져 오기에 대한 설명이 포함 된 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dd5ae485e18c7c0ddc8083d7c7bb31df74e1088c" translate="yes" xml:space="preserve">
          <source>Given a date string of &lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given an ISO format such as &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</source>
          <target state="translated">날짜 문자열이 &lt;code&gt;&quot;March 7, 2014&quot;&lt;/code&gt; 이면 &lt;code&gt;parse()&lt;/code&gt; 는 현지 시간대를 가정하지만 &lt;code&gt;&quot;2014-03-07&quot;&lt;/code&gt; 과 같은 ISO 형식을 사용하면 UTC (ES5 및 ECMAScript 2015)의 시간대를 가정합니다. 따라서 해당 문자열을 사용하여 생성 된 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체는 시스템이 현지 시간대 UTC로 설정되어 있지 않으면 지원되는 ECMAScript 버전에 따라 다른 시점을 나타낼 수 있습니다. 이는 동등한 것으로 보이는 두 개의 날짜 문자열이 변환되는 문자열의 형식에 따라 두 개의 다른 값을 초래할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f9c73621eb8378bc40ca8b96e5182b675e0b3c0c" translate="yes" xml:space="preserve">
          <source>Given a module &lt;code&gt;my-module.js&lt;/code&gt;</source>
          <target state="translated">모듈 &lt;code&gt;my-module.js&lt;/code&gt; 가 주어짐</target>
        </trans-unit>
        <trans-unit id="f6e9202ed4a0bee0090059436feae9f4d70aaff5" translate="yes" xml:space="preserve">
          <source>Given a non-standard date string of &quot;&lt;code&gt;March 7, 2014&lt;/code&gt;&quot;, &lt;code&gt;parse()&lt;/code&gt; assumes a local time zone, but given a simplification of the ISO 8601 calendar date extended format such as &quot;&lt;code&gt;2014-03-07&lt;/code&gt;&quot;, it will assume a time zone of UTC (ES5 and ECMAScript 2015). Therefore &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects produced using those strings may represent different moments in time depending on the version of ECMAScript supported unless the system is set with a local time zone of UTC. This means that two date strings that appear equivalent may result in two different values depending on the format of the string that is being converted.</source>
          <target state="translated">&quot;의 표준이 아닌 날짜 문자열을 감안할 때 &lt;code&gt;March 7, 2014&lt;/code&gt; ,&quot; &lt;code&gt;parse()&lt;/code&gt; , 로컬 시간대 가정하지만, 같은 &quot;로 ISO 8601 달력 날짜 확장 형식의 단순화를 부여 &lt;code&gt;2014-03-07&lt;/code&gt; &quot;, 그것은을 가정합니다 UTC 표준 시간대 (ES5 및 ECMAScript 2015). 따라서 이러한 문자열을 사용하여 생성 된 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체는 시스템이 UTC의 로컬 시간대로 설정되지 않는 한 지원되는 ECMAScript의 버전에 따라 다른 시점을 나타낼 수 있습니다. 즉, 동일하게 표시되는 두 개의 날짜 문자열이 변환되는 문자열의 형식에 따라 두 개의 다른 값이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35be346396e126b3b89b1cd82cc0c32b468472ae" translate="yes" xml:space="preserve">
          <source>Given a shared &lt;code&gt;Int32Array&lt;/code&gt;:</source>
          <target state="translated">공유 된 &lt;code&gt;Int32Array&lt;/code&gt; 가 주어진 경우 :</target>
        </trans-unit>
        <trans-unit id="d6fd3993d58d86b8a2d1b9dacc8bf0a3179cf150" translate="yes" xml:space="preserve">
          <source>Given a string representing a time, &lt;code&gt;parse()&lt;/code&gt; returns the time value. It accepts the RFC2822 / IETF date syntax (&lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 Section 3.3&lt;/a&gt;), e.g. &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt;. It understands the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian).</source>
          <target state="translated">시간을 나타내는 문자열이 주어지면 &lt;code&gt;parse()&lt;/code&gt; 는 시간 값을 반환합니다. RFC2822 / IETF 날짜 구문 ( &lt;a href=&quot;http://tools.ietf.org/html/rfc2822#section-3.3&quot;&gt;RFC2822 섹션 3.3&lt;/a&gt; )을 수락합니다 ( 예 : &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;&lt;/code&gt; . 미국 대륙 표준 시간대 약어를 이해하지만 일반적으로 사용하려면 &lt;code&gt;&quot;Mon, 25 Dec 1995 13:30:00 +0430&quot;&lt;/code&gt; (그리니치 자오선에서 동쪽으로 4 시간 30 분)과 같은 시간대 오프셋을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="95e6727da6ca58f8c51ff5196575c2e7fcac3248" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example counts the number of items that passes all the tests.</source>
          <target state="translated">항목 배열과 테스트 배열이 주어지면이 예제는 모든 테스트를 통과 한 항목 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="ed0e87792cb402fa5496b2410e4f2a4d126225e0" translate="yes" xml:space="preserve">
          <source>Given an array of items and an array of tests, this example determines whether all items pass all tests.</source>
          <target state="translated">항목 배열과 테스트 배열이 주어지면이 예제는 모든 항목이 모든 테스트를 통과하는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="ce988ebc4e75168602f3d1de0e938f1b059ff589" translate="yes" xml:space="preserve">
          <source>Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported) or explicitly (using the &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</source>
          <target state="translated">모듈 &lt;code&gt;my-module&lt;/code&gt; 에서 내 보낸 (내부 전체 모듈을 내보내므로) 또는 명시 적으로 ( &lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; 문을 사용하여) &lt;code&gt;myExport&lt;/code&gt; 라는 객체 또는 값을 지정 하면 &lt;code&gt;myExport&lt;/code&gt; 가 현재 범위에 삽입 됩니다.</target>
        </trans-unit>
        <trans-unit id="69376498e6019aa34656f953a77822cfbd1dc255" translate="yes" xml:space="preserve">
          <source>Given an object or value named &lt;code&gt;myExport&lt;/code&gt; which has been exported from the module &lt;code&gt;my-module&lt;/code&gt; either implicitly (because the entire module is exported, for example using &lt;code&gt;export * from 'another.js'&lt;/code&gt;) or explicitly (using the &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement), this inserts &lt;code&gt;myExport&lt;/code&gt; into the current scope.</source>
          <target state="translated">&lt;code&gt;my-module&lt;/code&gt; 모듈에서 내 보낸 &lt;code&gt;myExport&lt;/code&gt; 라는 이름의 개체 또는 값 이 암시 적으로 (예 &lt;code&gt;export * from 'another.js'&lt;/code&gt; 사용하여 전체 모듈이 내보내지기 때문에 ) 또는 명시 적으로 ( &lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; 문 사용) 다음이 삽입됩니다. 현재 범위로 &lt;code&gt;myExport&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36f6b120ef9e249fbfdff73698868c21b30ab839" translate="yes" xml:space="preserve">
          <source>Given at least a year and month, this form of &lt;code&gt;Date()&lt;/code&gt; returns a &lt;code&gt;Date&lt;/code&gt; object whose component values (year, month, day, hour, minute, second, and millisecond) all come from the following parameters. Any missing fields are given the lowest possible value (&lt;code&gt;1&lt;/code&gt; for &lt;code&gt;&lt;var&gt;day&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; for every other component).</source>
          <target state="translated">최소한 1 년과 월이 주어지면이 형식의 &lt;code&gt;Date()&lt;/code&gt; 는 구성 요소 값 (년, 월, 일,시, 분, 초 및 밀리 초)이 모두 다음 매개 변수에서 오는 &lt;code&gt;Date&lt;/code&gt; 객체를 반환합니다 . 상관없는 필드 (가장 낮은 값으로 주어진다 &lt;code&gt;1&lt;/code&gt; 대 &lt;code&gt;&lt;var&gt;day&lt;/var&gt;&lt;/code&gt; 및 &lt;code&gt;0&lt;/code&gt; 의 모든 다른 구성 요소에 대한 참조).</target>
        </trans-unit>
        <trans-unit id="ffa489942e5ce90ee9348d67bca34bc046d3d1a8" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;for...in&lt;/code&gt; is built for iterating object properties, not recommended for use with arrays, and options like &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; exist, what might be the use of &lt;code&gt;for...in&lt;/code&gt; at all?</source>
          <target state="translated">감안할 &lt;code&gt;for...in&lt;/code&gt; 개체 속성을 반복 위해 구축 같은 배열 및 옵션을 사용하지 않는 것이 좋습니다 &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; 와 &lt;code&gt;for...of&lt;/code&gt; 존재, 무엇의 사용 될 수 &lt;code&gt;for...in&lt;/code&gt; 조금도?</target>
        </trans-unit>
        <trans-unit id="57777d79c2c7fcb95a77d48ba531eb7fb132081d" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</source>
          <target state="translated">감안할 때 &lt;code&gt;this&lt;/code&gt; 주변 어휘 문맥에서 온다, &lt;a href=&quot;../strict_mode&quot;&gt;엄격한 모드&lt;/a&gt; 에 관한 규칙 &lt;code&gt;this&lt;/code&gt; 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="118a8602658c501cc841b17b0c4e058cb5605a35" translate="yes" xml:space="preserve">
          <source>Given that &lt;code&gt;this&lt;/code&gt; comes from the surrounding lexical context, &lt;code&gt;&lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;&lt;/code&gt; rules with regard to &lt;code&gt;this&lt;/code&gt; are ignored.</source>
          <target state="translated">감안할 때 &lt;code&gt;this&lt;/code&gt; 주변 어휘 문맥에서 온다, &lt;code&gt;&lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;&lt;/code&gt; 에 관한 규칙 &lt;code&gt;this&lt;/code&gt; 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="54f2ff8a238acabb2079588d5c2033656ef069ee" translate="yes" xml:space="preserve">
          <source>Given the following code:</source>
          <target state="translated">다음 코드가 주어진다 :</target>
        </trans-unit>
        <trans-unit id="66cc8f0aba96a51c396c49f13e7a6a7e2cfea340" translate="yes" xml:space="preserve">
          <source>Global Context</source>
          <target state="translated">글로벌 컨텍스트</target>
        </trans-unit>
        <trans-unit id="b5cdadeb82c625264f87984cdb7712780b8ec0e8" translate="yes" xml:space="preserve">
          <source>Global Objects</source>
          <target state="translated">글로벌 객체</target>
        </trans-unit>
        <trans-unit id="9c1d41d613e2de602e0cfbbc37dd6fb38c9598e2" translate="yes" xml:space="preserve">
          <source>Global context</source>
          <target state="translated">글로벌 컨텍스트</target>
        </trans-unit>
        <trans-unit id="d1a3f442a9873910f12738a060cce503718a5808" translate="yes" xml:space="preserve">
          <source>Global instances</source>
          <target state="translated">글로벌 인스턴스</target>
        </trans-unit>
        <trans-unit id="6c1092b384c391c235bf0f03a6b067bc9829d4dd" translate="yes" xml:space="preserve">
          <source>Global objects</source>
          <target state="translated">글로벌 객체</target>
        </trans-unit>
        <trans-unit id="8a4af69f1f63429ee0c62b75219b583716fe311b" translate="yes" xml:space="preserve">
          <source>Global replace can only be done with a regular expression. In the following example, the regular expression includes the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;global and ignore case flags&lt;/a&gt; which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of &lt;code&gt;'apples'&lt;/code&gt; in the string with &lt;code&gt;'oranges'&lt;/code&gt;.</source>
          <target state="translated">전역 바꾸기는 정규식으로 만 수행 할 수 있습니다. 다음 예제에서 정규 표현식에는 문자열에서 &lt;code&gt;'apples'&lt;/code&gt; 의 각 항목을 &lt;code&gt;'oranges'&lt;/code&gt; 로 바꾸는 &lt;code&gt;replace()&lt;/code&gt; 를 허용 하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;전역 및 대소 문자 무시 플래그가&lt;/a&gt; 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="20c3687f785130a94e95b82635515a9bed2f11aa" translate="yes" xml:space="preserve">
          <source>Global replace can only be done with a regular expression. In the following example, the regular expression includes the global and ignore case flags which permits &lt;code&gt;replace()&lt;/code&gt; to replace each occurrence of 'apples' in the string with 'oranges'.</source>
          <target state="translated">전역 바꾸기는 정규식으로 만 수행 할 수 있습니다. 다음 예제에서 정규식에는 global 및 ignore case 플래그가 포함되어 있으며, &lt;code&gt;replace()&lt;/code&gt; 는 문자열에서 'apples'의 각 항목을 'oranges'로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcd2f358507f46dacf4e333df045d970161f3961" translate="yes" xml:space="preserve">
          <source>Global search.</source>
          <target state="translated">글로벌 검색.</target>
        </trans-unit>
        <trans-unit id="167937e0f76150c8fbf7b4c427c862e86b880570" translate="yes" xml:space="preserve">
          <source>Global symbol registry</source>
          <target state="translated">글로벌 심볼 레지스트리</target>
        </trans-unit>
        <trans-unit id="2d42c9982fdb6c0ca28b87b881b760533f39e3bf" translate="yes" xml:space="preserve">
          <source>Glossary: &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt;</source>
          <target state="translated">용어 : &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;생성자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b29ffb55e0badb65375a434cf64ab1147fe24e3" translate="yes" xml:space="preserve">
          <source>Glossary: Symbol data type</source>
          <target state="translated">용어집 : 기호 데이터 유형</target>
        </trans-unit>
        <trans-unit id="3ed7f82aff7c093f6dce93e01e74889c131e51f5" translate="yes" xml:space="preserve">
          <source>Good variable names</source>
          <target state="translated">좋은 변수 이름</target>
        </trans-unit>
        <trans-unit id="693f74831dc013209e1555b1f5c7cc96e6a7244c" translate="yes" xml:space="preserve">
          <source>Google Chrome will accept a numerical string as a valid &lt;code&gt;&lt;em&gt;dateString&lt;/em&gt;&lt;/code&gt; parameter. This means that, for instance, while &lt;code&gt;!!Date.parse(&quot;42&quot;)&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; in Firefox, it evaluates to &lt;code&gt;true&lt;/code&gt; in Google Chrome because &quot;&lt;code&gt;42&lt;/code&gt;&quot; is interpreted as January 1&lt;sup&gt;st&lt;/sup&gt;, 2042.</source>
          <target state="translated">Google 크롬은 유효한 &lt;code&gt;&lt;em&gt;dateString&lt;/em&gt;&lt;/code&gt; 매개 변수 로 숫자 문자열을 허용합니다 . 예를 들어, 동안,이 수단 &lt;code&gt;!!Date.parse(&quot;42&quot;)&lt;/code&gt; 로 평가 &lt;code&gt;false&lt;/code&gt; 파이어 폭스에서, 그것은 평가 &lt;code&gt;true&lt;/code&gt; &quot;때문에 구글 크롬 &lt;code&gt;42&lt;/code&gt; &quot;1월 1일로 해석됩니다 &lt;sup&gt;일&lt;/sup&gt; , 2042.</target>
        </trans-unit>
        <trans-unit id="18e43c184811802315da94a97ea03158c2b342c5" translate="yes" xml:space="preserve">
          <source>Gotchas when throwing errors</source>
          <target state="translated">오류가 발생했을 때 발생하는 문제</target>
        </trans-unit>
        <trans-unit id="c48b6eab0a11f2fb1311c4134683f1d6408941fe" translate="yes" xml:space="preserve">
          <source>Graceful asynchronous programming with promises</source>
          <target state="translated">Promise가있는 우아한 비동기 프로그래밍</target>
        </trans-unit>
        <trans-unit id="755f5dc8338fdd2b9f3422f770363e935afd3aac" translate="yes" xml:space="preserve">
          <source>Gradual transition</source>
          <target state="translated">점진적 전환</target>
        </trans-unit>
        <trans-unit id="7be07c875cfba8e109b4abbd611ba4cce5fd4c77" translate="yes" xml:space="preserve">
          <source>Greater Than</source>
          <target state="translated">보다 큰</target>
        </trans-unit>
        <trans-unit id="661a1cf195498e4d5ef48d28086f549d7a9f9e52" translate="yes" xml:space="preserve">
          <source>Greater Than Or Equal</source>
          <target state="translated">크거나 같음</target>
        </trans-unit>
        <trans-unit id="599294f23ef04a992bc69ba465066344c3c7cf34" translate="yes" xml:space="preserve">
          <source>Greater than</source>
          <target state="translated">보다 큰</target>
        </trans-unit>
        <trans-unit id="acaff83628aa9c951c9c96ec4a78d05b5903c181" translate="yes" xml:space="preserve">
          <source>Greater than (&lt;code&gt;a &amp;gt; b&lt;/code&gt;)</source>
          <target state="translated">보다 큼 ( &lt;code&gt;a &amp;gt; b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ffe32369a84f4ec739ceff967787219177706892" translate="yes" xml:space="preserve">
          <source>Greater than operator</source>
          <target state="translated">연산자보다 큼</target>
        </trans-unit>
        <trans-unit id="19339cbb3bf9612b2d425533788b474fc71b7fc8" translate="yes" xml:space="preserve">
          <source>Greater than operator (&amp;gt;)</source>
          <target state="translated">연산자보다 큼 (&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="ba00f24f428c5c797c9c1a02fe3126b504dc367c" translate="yes" xml:space="preserve">
          <source>Greater than operator.</source>
          <target state="translated">연산자보다 큽니다.</target>
        </trans-unit>
        <trans-unit id="e8e9fd4aba5d1d5c651cb14cfb7ea55a98478786" translate="yes" xml:space="preserve">
          <source>Greater than or equal</source>
          <target state="translated">크거나 같음</target>
        </trans-unit>
        <trans-unit id="ce9ce28c1418e4236454c52dcc54f02f5b21530f" translate="yes" xml:space="preserve">
          <source>Greater than or equal (&lt;code&gt;a &amp;gt;= b&lt;/code&gt;)</source>
          <target state="translated">크거나 같음 ( &lt;code&gt;a &amp;gt;= b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="3640b6be07fa5c3e01237da1227a658dbc2702e5" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator</source>
          <target state="translated">크거나 같음 연산자</target>
        </trans-unit>
        <trans-unit id="49067406979e72aabf504916a7dbce98a5bea221" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator (&amp;gt;=)</source>
          <target state="translated">크거나 같은 연산자 (&amp;gt; =)</target>
        </trans-unit>
        <trans-unit id="4aeb184a334e8273aa73cf8c81481065f24bf2f2" translate="yes" xml:space="preserve">
          <source>Greater than or equal operator.</source>
          <target state="translated">크거나 같음 연산자.</target>
        </trans-unit>
        <trans-unit id="073a35811e22c290eb43ebc97da19cbac54af050" translate="yes" xml:space="preserve">
          <source>Greek lower case numerals &amp;mdash; algorithmic</source>
          <target state="translated">그리스어 소문자 숫자 &amp;mdash; 알고리즘</target>
        </trans-unit>
        <trans-unit id="e1ccadc4241e2cb20334df4b15a97fa2ecbc301f" translate="yes" xml:space="preserve">
          <source>Greek upper case numerals &amp;mdash; algorithmic</source>
          <target state="translated">그리스어 대문자 숫자 &amp;mdash; 알고리즘</target>
        </trans-unit>
        <trans-unit id="b48836bd60f1a3a7305ae4aec52e094503f42798" translate="yes" xml:space="preserve">
          <source>Gregorian calendar</source>
          <target state="translated">그레고리 언 달력</target>
        </trans-unit>
        <trans-unit id="2ae6967b07a45b63c8543a6c5e34052414ba32af" translate="yes" xml:space="preserve">
          <source>Grouping</source>
          <target state="translated">Grouping</target>
        </trans-unit>
        <trans-unit id="a558ecadea6e7417651ffb43f2ee9ca2c34b30f4" translate="yes" xml:space="preserve">
          <source>Grouping and back references</source>
          <target state="translated">그룹화 및 역 참조</target>
        </trans-unit>
        <trans-unit id="2cef99738d01030fced8fc7aad3f62156b1e6acd" translate="yes" xml:space="preserve">
          <source>Grouping objects by a property</source>
          <target state="translated">속성별로 개체 그룹화</target>
        </trans-unit>
        <trans-unit id="915853015f3b98ee479d01ab7ae275510ea0172b" translate="yes" xml:space="preserve">
          <source>Grouping operator &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">그룹화 연산자 &lt;code&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="527e76a146b1b5490208a09d5b54bffbd071c7e6" translate="yes" xml:space="preserve">
          <source>Grouping operator.</source>
          <target state="translated">그룹화 연산자.</target>
        </trans-unit>
        <trans-unit id="2502d06c6006140375ec3d62c3dc9f293b0195cd" translate="yes" xml:space="preserve">
          <source>Gujarati digits</source>
          <target state="translated">구자라트 어 숫자</target>
        </trans-unit>
        <trans-unit id="40ec51c8281742718756a57689093f05a70d38eb" translate="yes" xml:space="preserve">
          <source>Gunjala Gondi digits</source>
          <target state="translated">Gunjala Gondi 숫자</target>
        </trans-unit>
        <trans-unit id="ac47222ef99a366857403f36335b7ae783a1dacc" translate="yes" xml:space="preserve">
          <source>Gurmukhi digits</source>
          <target state="translated">구르 무키 숫자</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="af3b3fd4e5a91be3c9ae24e7f9f2b199db3bc273" translate="yes" xml:space="preserve">
          <source>HTML Living Standard&lt;br/&gt;&lt;small&gt;The definition of 'import.meta' in that specification.&lt;/small&gt;</source>
          <target state="translated">HTML Living Standard &lt;br/&gt;&lt;small&gt;해당 사양에서 'import.meta'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e651f6ceca9dc60673a6ca401a75b541edb381d0" translate="yes" xml:space="preserve">
          <source>HTML and the WindowProxy</source>
          <target state="translated">HTML과 WindowProxy</target>
        </trans-unit>
        <trans-unit id="4c41038188894303cbb976481fb1aa9e2a5e355e" translate="yes" xml:space="preserve">
          <source>HTML content</source>
          <target state="translated">HTML 내용</target>
        </trans-unit>
        <trans-unit id="bcbc9616d000628a0c49e8fdf2dae8519b74150b" translate="yes" xml:space="preserve">
          <source>HTML wrapper methods</source>
          <target state="translated">HTML 래퍼 메소드</target>
        </trans-unit>
        <trans-unit id="046b1a2a2d5f0690114e58492ae64eaf9df91f47" translate="yes" xml:space="preserve">
          <source>Hacks blog post by Jason Orendorff: &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 in Depth: Modules&lt;/a&gt;</source>
          <target state="translated">Jason Orendorff의 Hacks 블로그 게시물 : &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;ES6 in Depth : Modules&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef7049864e420c4deb0c6720a77f740d5c1d6f31" translate="yes" xml:space="preserve">
          <source>Hacks blog post by Lin Clark: &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES modules: A cartoon deep-dive&lt;/a&gt;</source>
          <target state="translated">Lin Clark의 Hacks 블로그 게시물 : &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES 모듈 : 만화 심층 분석&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b4d8d5585a333787270876f8d1add954316ec4fe" translate="yes" xml:space="preserve">
          <source>Han-character day-of-month numbering for lunar/other traditional calendars</source>
          <target state="translated">음력 / 기타 전통 달력에 대한 한자 날짜 번호 매기기</target>
        </trans-unit>
        <trans-unit id="c6ade9cd7521f0bda3a7985cfe1fbb3d2ca278a4" translate="yes" xml:space="preserve">
          <source>Handle rejected &lt;code&gt;Promise&lt;/code&gt; without try block.</source>
          <target state="translated">시도 차단없이 거부 된 &lt;code&gt;Promise&lt;/code&gt; 을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="8be500f20ceca94b841f8434fc8566ac689d6ad6" translate="yes" xml:space="preserve">
          <source>Handler functions</source>
          <target state="translated">핸들러 기능</target>
        </trans-unit>
        <trans-unit id="6049f9c7ffa20764b4ab263789591f7465a81e57" translate="yes" xml:space="preserve">
          <source>Handler functions are sometimes called &lt;em&gt;traps&lt;/em&gt;, presumably because they trap calls to the target object. The very simple trap in &lt;code&gt;handler2&lt;/code&gt; above redefines all property accessors:</source>
          <target state="translated">핸들러 함수는 &lt;em&gt;트랩&lt;/em&gt; 이라고도 &lt;em&gt;합니다&lt;/em&gt; . 아마도 대상 객체에 대한 호출을 트랩하기 때문입니다. 위의 &lt;code&gt;handler2&lt;/code&gt; 에 있는 매우 간단한 트랩은 모든 속성 접근 자를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="8609bae83f23d806c7b6766e0836ddbd278c693c" translate="yes" xml:space="preserve">
          <source>Handling a rejected promise too early has consequences further down the promise chain. Sometimes there is no choice because an error must be handled immediately; in such cases we must &lt;code&gt;throw&lt;/code&gt; something, even if it is a dummy error message like &lt;code&gt;throw -999&lt;/code&gt;, to maintain error state down the chain. On the other hand, in the absence of an immediate need it is simpler to leave out error handling until a final &lt;code&gt;.catch()&lt;/code&gt; statement.</source>
          <target state="translated">거부 된 Promise를 너무 일찍 처리하면 Promise 체인 아래로 내려가는 결과가 발생합니다. 오류는 즉시 처리해야하기 때문에 선택의 여지가없는 경우가 있습니다. 그러한 경우에 우리는 &lt;code&gt;throw&lt;/code&gt; &lt;code&gt;throw -999&lt;/code&gt; 와 같은 더미 오류 메시지라도 무언가 를 던져야 체인 아래로 오류 상태를 유지해야합니다. 반면에 즉각적인 필요가 없으면 최종 &lt;code&gt;.catch()&lt;/code&gt; 문 까지 오류 처리를 생략하는 것이 더 간단 합니다.</target>
        </trans-unit>
        <trans-unit id="05be078b093d3d7249de3afe5aeea8df03ebd38b" translate="yes" xml:space="preserve">
          <source>Handling a specific error</source>
          <target state="translated">특정 오류 처리</target>
        </trans-unit>
        <trans-unit id="7d0fe42db132d1f32eb7831f4f5dfd3df8464a0c" translate="yes" xml:space="preserve">
          <source>Handling null values</source>
          <target state="translated">null 값 처리</target>
        </trans-unit>
        <trans-unit id="b559965568e49e7ef2cb356360355aff78f4b4ad" translate="yes" xml:space="preserve">
          <source>Handling rejected promises</source>
          <target state="translated">거부 된 약속 처리</target>
        </trans-unit>
        <trans-unit id="0f0511546a2fd284a7b7e7b3e0c83c8b0aa321c0" translate="yes" xml:space="preserve">
          <source>Handling values larger or smaller than ~9 quadrillion with full precision requires using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;arbitrary precision arithmetic library&lt;/a&gt;. See &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;What Every Programmer Needs to Know about Floating Point Arithmetic&lt;/a&gt; for more information on floating point representations of numbers.</source>
          <target state="translated">완전 정밀도로 ~ 9 조보다 크거나 작은 값을 처리하려면 &lt;a href=&quot;https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&quot;&gt;임의의 정밀 산술 라이브러리를&lt;/a&gt; 사용해야합니다 . 부동 소수점 숫자에 대한 자세한 내용 &lt;a href=&quot;http://floating-point-gui.de/&quot;&gt;은 모든 프로그래머가 부동 소수점 산술&lt;/a&gt; 에 대해 알아야 할 사항을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="77b9dc1c507b553a2f069b382fe1361e6cd58f8c" translate="yes" xml:space="preserve">
          <source>Hanifi Rohingya digits</source>
          <target state="translated">Hanifi Rohingya 숫자</target>
        </trans-unit>
        <trans-unit id="c4f14b0be5232bf7b6a4a221e3c77e209ae1957e" translate="yes" xml:space="preserve">
          <source>Has a value of 1.</source>
          <target state="translated">값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="6769a17273095a460a5770629c83ce2f07e68f73" translate="yes" xml:space="preserve">
          <source>Has the same functionality as &lt;a href=&quot;arraybuffer/slice&quot;&gt;&lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;arraybuffer/slice&quot;&gt; &lt;code&gt;ArrayBuffer.prototype.slice()&lt;/code&gt; &lt;/a&gt; 와 기능이 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="086c9aa87eb5a88c029b61d7a7132c3c214e334a" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. (This is equivalent to not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.)</source>
          <target state="translated">반복자가 시퀀스에서 다음 값을 생성 할 수있는 경우 값이 &lt;code&gt;false&lt;/code&gt; 입니다. (이것은 &lt;code&gt;done&lt;/code&gt; 속성을 모두 지정하지 않는 것과 같습니다 .)</target>
        </trans-unit>
        <trans-unit id="3842628d6ffd70cf6c89393a3508b1bc7fbb2c25" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;false&lt;/code&gt; if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the &lt;code&gt;done&lt;/code&gt; property altogether.</source>
          <target state="translated">반복자가 시퀀스에서 다음 값을 생성 할 수 있으면 값이 &lt;code&gt;false&lt;/code&gt; 입니다. 이것은 &lt;code&gt;done&lt;/code&gt; 속성을 모두 지정하지 않는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8a395a560e0f4b02cb4707fbf65de88414505b92" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator has completed its sequence. In this case, &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</source>
          <target state="translated">반복기가 시퀀스를 완료 한 경우 &lt;code&gt;true&lt;/code&gt; 값을 갖습니다. 이 경우 &lt;code&gt;value&lt;/code&gt; 는 선택적으로 반복기의 반환 값을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f160378fa42521846caacc333df5e6d0e7f03987" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the &lt;em&gt;return value&lt;/em&gt; of the iterator.</source>
          <target state="translated">반복자가 반복 된 시퀀스의 끝을 지났 으면 값이 &lt;code&gt;true&lt;/code&gt; 입니다. 이 경우 &lt;code&gt;value&lt;/code&gt; 는 선택적으로 반복자 의 &lt;em&gt;리턴 값&lt;/em&gt; 을 지정 합니다.</target>
        </trans-unit>
        <trans-unit id="706e860c1a9505d02f07d336b066f2bf2d9d2bb4" translate="yes" xml:space="preserve">
          <source>Has the value &lt;code&gt;true&lt;/code&gt; if the iterator is past the end of the iterated sequence. In this case &lt;code&gt;value&lt;/code&gt; optionally specifies the return value of the iterator.</source>
          <target state="translated">반복자가 반복 된 시퀀스의 끝을 지났 으면 값이 &lt;code&gt;true&lt;/code&gt; 입니다. 이 경우 &lt;code&gt;value&lt;/code&gt; 는 선택적으로 반복자의 리턴 값을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="eb04312cb7765c6aeb622507d89de37f07bd7570" translate="yes" xml:space="preserve">
          <source>Hashbang (&lt;code&gt;#!&lt;/code&gt;) comment syntax</source>
          <target state="translated">Hashbang ( &lt;code&gt;#!&lt;/code&gt; ) 주석 구문</target>
        </trans-unit>
        <trans-unit id="c95ada6418643a8e50ee540a13b76604f7c0d069" translate="yes" xml:space="preserve">
          <source>Hashbang comments</source>
          <target state="translated">해시 방 댓글</target>
        </trans-unit>
        <trans-unit id="2c22c3520114fb61d11e204af264631a078cc957" translate="yes" xml:space="preserve">
          <source>Hebrew numerals &amp;mdash; algorithmic</source>
          <target state="translated">히브리어 숫자 &amp;mdash; 알고리즘</target>
        </trans-unit>
        <trans-unit id="dff380fb452861e60226e0ba7e56afc16a92aaf9" translate="yes" xml:space="preserve">
          <source>Hence &lt;code&gt;encodeURI()&lt;/code&gt;&lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, &lt;code&gt;encodeURI()&lt;/code&gt;&lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</source>
          <target state="translated">따라서 &lt;code&gt;encodeURI()&lt;/code&gt; &lt;strong&gt;는&lt;/strong&gt; 완전한 URI를 구성하는 데 필요한 문자를 인코딩 &lt;strong&gt;하지 않습니다&lt;/strong&gt; . 또한 &lt;code&gt;encodeURI()&lt;/code&gt; &lt;strong&gt;는&lt;/strong&gt; 예약 된 목적은 없지만 URI에서 &quot;있는 그대로&quot;허용되는 &quot;예약되지 않은 마크&quot;라고하는 몇 가지 추가 문자를 인코딩하지 않습니다. ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="89a512c7a0d8eebcc121926b32d2b19cb2392d47" translate="yes" xml:space="preserve">
          <source>Hence encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode characters that are necessary to formulate a complete URI. Also, encodeURI &lt;strong&gt;does not&lt;/strong&gt; encode a few additional characters, known as &quot;unreserved marks&quot;, which do not have a reserved purpose but are allowed in a URI &quot;as is&quot;. (See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396)&lt;/a&gt;</source>
          <target state="translated">따라서 encodeURI &lt;strong&gt;는&lt;/strong&gt; 완전한 URI를 공식화하는 데 필요한 문자를 인코딩 &lt;strong&gt;하지 않습니다&lt;/strong&gt; . 또한 encodeURI &lt;strong&gt;는&lt;/strong&gt; 예약되지 않은 URI를 &quot;있는 그대로&quot;사용할 수있는 &quot;예약되지 않은 표시&quot;라고하는 몇 가지 추가 문자를 인코딩하지 않습니다. ( &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC2396&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="cfa8a8d1543f550fd84beae6436f9ccfae0853b0" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt;, because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;++&lt;/code&gt; 는 &lt;code&gt;b&lt;/code&gt; 와 &lt;code&gt;++&lt;/code&gt; 사이에 줄 종결자가 발생하기 때문에 변수 &lt;code&gt;b&lt;/code&gt; 에 적용 되는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment&quot;&gt;접미사 연산자&lt;/a&gt; 로 취급되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="06a53efe4443b193ea939246d0bee3605e739beb" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;++&lt;/code&gt; is not treated as a &lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;postfix operator&lt;/a&gt; applying to variable &lt;code&gt;b&lt;/code&gt;, because a line terminator occurs between &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;++&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;++&lt;/code&gt; 는 &lt;code&gt;b&lt;/code&gt; 와 &lt;code&gt;++&lt;/code&gt; 사이에 줄 종결자가 있기 때문에 변수 &lt;code&gt;b&lt;/code&gt; 에 적용 되는 &lt;a href=&quot;operators/arithmetic_operators#Increment&quot;&gt;접미사 연산자&lt;/a&gt; 로 처리되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b316f1fcc81d86f5ec38af0adc62588474cb39dc" translate="yes" xml:space="preserve">
          <source>Here JavaScript thinks that you meant to have &lt;code&gt;);&lt;/code&gt; inside the string and ignores it, and it ends up not knowing that you meant the &lt;code&gt;);&lt;/code&gt; to end the function &lt;code&gt;console.log&lt;/code&gt;. To fix this, we could put a&lt;code&gt;'&lt;/code&gt; after the &quot;Script&quot; string:</source>
          <target state="translated">여기 JavaScript는 당신이 가지고 있다고 생각합니다 &lt;code&gt;);&lt;/code&gt; 문자열 내부에서 그것을 무시하고, 당신이 &lt;code&gt;);&lt;/code&gt; 을 의미한다는 것을 알지 못하게됩니다 . &lt;code&gt;console.log&lt;/code&gt; 기능을 종료합니다 . 이 문제를 해결하기 위해 &quot;스크립트&quot;문자열 뒤에 &lt;code&gt;'&lt;/code&gt; 를 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0856a04ac4cb4e4e83ac047c8e991838afc7b8c6" translate="yes" xml:space="preserve">
          <source>Here are some specific points that the authors of the WeakRef proposal included in its &lt;a href=&quot;https://github.com/tc39/proposal-weakrefs/blob/master/README.md&quot;&gt;explainer document&lt;/a&gt;:</source>
          <target state="translated">WeakRef 제안의 작성자가 &lt;a href=&quot;https://github.com/tc39/proposal-weakrefs/blob/master/README.md&quot;&gt;설명 문서에&lt;/a&gt; 포함 된 몇 가지 구체적인 사항은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="b69f63202829808a3ed5c904407f09912f3f4f7d" translate="yes" xml:space="preserve">
          <source>Here are some specific points that the authors of the WeakRef proposal that FinalizationRegistry is part of included in its &lt;a href=&quot;https://github.com/tc39/proposal-FinalizationRegistrys/blob/master/README.md&quot;&gt;explainer document&lt;/a&gt;:</source>
          <target state="translated">다음은 FinalizationRegistry가 해당 &lt;a href=&quot;https://github.com/tc39/proposal-FinalizationRegistrys/blob/master/README.md&quot;&gt;설명 문서&lt;/a&gt; 에 포함 된 WeakRef 제안의 저자가 포함하는 몇 가지 특정 사항입니다 .</target>
        </trans-unit>
        <trans-unit id="c196a482f6e0ba5b36fd2d7f104c322d2271fc25" translate="yes" xml:space="preserve">
          <source>Here is a concise example of the iteration steps:</source>
          <target state="translated">다음은 반복 단계의 간결한 예입니다.</target>
        </trans-unit>
        <trans-unit id="24a2c42eadaee1c238dcb34a8a11541d3566436b" translate="yes" xml:space="preserve">
          <source>Here is a correct implementation:</source>
          <target state="translated">다음은 올바른 구현입니다.</target>
        </trans-unit>
        <trans-unit id="6b78dc499efcb3a2e64d5a1d08544b298bfb6496" translate="yes" xml:space="preserve">
          <source>Here is an example of an &lt;strong&gt;anonymous&lt;/strong&gt; function expression (the &lt;code&gt;name&lt;/code&gt; is not used):</source>
          <target state="translated">다음은 &lt;strong&gt;익명&lt;/strong&gt; 함수 표현식 의 예입니다 ( &lt;code&gt;name&lt;/code&gt; 은 사용되지 않음).</target>
        </trans-unit>
        <trans-unit id="3165612e15dd81d081ad2ea3bdee303a0e8cef7a" translate="yes" xml:space="preserve">
          <source>Here is the output:</source>
          <target state="translated">출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a25458ba1519e52ca3b4eba3bb4f22092fc95ae9" translate="yes" xml:space="preserve">
          <source>Here is the same &quot;Conditional catch clauses&quot; using code that conforms to ECMAScript specification (obviously it's verbose, but works everywhere):</source>
          <target state="translated">다음은 ECMAScript 사양을 준수하는 코드를 사용하는 동일한 &quot;조건부 캐치 절&quot;입니다 (분명히 자세하지만 모든 곳에서 작동).</target>
        </trans-unit>
        <trans-unit id="2b981861ba4dd1afcb8302d8db5d56f4e3e89e1e" translate="yes" xml:space="preserve">
          <source>Here it counts forwards from the start by &lt;code&gt;11&lt;/code&gt; to find the start index and backwards from the end by &lt;code&gt;7&lt;/code&gt; to find the end index.</source>
          <target state="translated">여기서는 시작 인덱스를 찾기 위해 처음부터 &lt;code&gt;11&lt;/code&gt; 씩 앞으로 세고 끝 인덱스를 찾기 위해 끝에서 &lt;code&gt;7&lt;/code&gt; 만큼 뒤로 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="f0d1bc6ef7a193898558dcd4287addc94cb7eb24" translate="yes" xml:space="preserve">
          <source>Here the prototype of &lt;code&gt;Square&lt;/code&gt; class is changed&amp;mdash;but the constructor of its base class &lt;code&gt;Polygon&lt;/code&gt;is still called when a new instance of a square is created.</source>
          <target state="translated">여기에서 &lt;code&gt;Square&lt;/code&gt; 클래스 의 프로토 타입 이 변경되었지만 기본 클래스 &lt;code&gt;Polygon&lt;/code&gt; 의 생성자 는 사각형의 새 인스턴스가 생성 될 때 계속 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="b6ddfd08130fdd41064ead403ecc7771b756bd7a" translate="yes" xml:space="preserve">
          <source>Here the prototype of &lt;strong&gt;Square&lt;/strong&gt; class is changed but still the constructor of the previous base class &lt;strong&gt;Polygon &lt;/strong&gt;is called when a new instance of a square is being created.</source>
          <target state="translated">여기에서 &lt;strong&gt;Square&lt;/strong&gt; 클래스 의 프로토 타입 이 변경되었지만 여전히 사각형의 새 인스턴스가 생성 될 때 이전 기본 클래스 &lt;strong&gt;Polygon&lt;/strong&gt; 의 생성자 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="9d344bd5b43ce8d7785f99d6710ed007bee41389" translate="yes" xml:space="preserve">
          <source>Here the short-circuit is especially beneficial, since the element will not be updated unnecessarily and won't cause unwanted side-effects such as additional parsing or rendering work, or loss of focus, etc.</source>
          <target state="translated">여기서 단락은 요소가 불필요하게 업데이트되지 않고 추가 구문 분석 또는 렌더링 작업, 초점 손실 등과 같은 원치 않는 부작용을 일으키지 않기 때문에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5e9eaf917eac3048ca5292e8791a5a553b13c8df" translate="yes" xml:space="preserve">
          <source>Here we've provided an implementation of the &lt;a href=&quot;proxy/proxy/get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; handler, which intercepts attempts to access properties in the target.</source>
          <target state="translated">여기 에서 대상의 속성에 액세스하려는 시도를 가로채는 &lt;a href=&quot;proxy/proxy/get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 핸들러 의 구현을 제공했습니다 .</target>
        </trans-unit>
        <trans-unit id="90b6aaa340bd0ee0aff948f94fa41abe49107e85" translate="yes" xml:space="preserve">
          <source>Here's an external resource for getting the complete Unicode block range for different scripts: &lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt;.</source>
          <target state="translated">다른 스크립트에 대한 완전한 유니 코드 블록 범위를 얻기위한 외부 리소스는 다음과 같습니다. &lt;a href=&quot;http://kourge.net/projects/regexp-unicode-block&quot;&gt;Regexp-Unicode-block&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7857a46a59cc12380ddb853b6b9f402e6c55d9ef" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are declared before any code is executed, but the assignments occur later. At the time &quot;&lt;code&gt;x = y&lt;/code&gt;&quot; is evaluated, &lt;code&gt;y&lt;/code&gt; exists so no &lt;code&gt;ReferenceError&lt;/code&gt; is thrown and its value is &lt;code&gt;undefined&lt;/code&gt;. So, &lt;code&gt;x&lt;/code&gt; is assigned the undefined value. Then, &lt;code&gt;y&lt;/code&gt; is assigned the value &lt;code&gt;'A'&lt;/code&gt;. Consequently, after the first line, &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt;, hence the result.</source>
          <target state="translated">여기서 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 는 코드가 실행되기 전에 선언되지만 할당은 나중에 발생합니다. &quot; &lt;code&gt;x = y&lt;/code&gt; &quot;가 평가 될 때 &lt;code&gt;y&lt;/code&gt; 가 존재하므로 &lt;code&gt;ReferenceError&lt;/code&gt; 가 발생 하지 않으며 그 값은 &lt;code&gt;undefined&lt;/code&gt; 입니다. 따라서 &lt;code&gt;x&lt;/code&gt; 에는 정의되지 않은 값이 할당됩니다. 그런 다음 &lt;code&gt;y&lt;/code&gt; 에는 &lt;code&gt;'A'&lt;/code&gt; 값이 할당됩니다 . 결과적으로 첫 번째 줄 다음에 &lt;code&gt;x === undefined &amp;amp;&amp;amp; y === 'A'&lt;/code&gt; 이므로 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="c6bb89830625753d156ab93a0373ccd6a9471aee" translate="yes" xml:space="preserve">
          <source>Here, a &lt;code&gt;WeakSet&lt;/code&gt; is created on the first run, and passed along with every subsequent function call (using the internal &lt;code&gt;_refs&lt;/code&gt; parameter).</source>
          <target state="translated">여기서 &lt;code&gt;WeakSet&lt;/code&gt; 은 첫 번째 실행에서 생성되고 모든 후속 함수 호출과 함께 전달됩니다 (내부 &lt;code&gt;_refs&lt;/code&gt; 매개 변수 사용).</target>
        </trans-unit>
        <trans-unit id="f2c3bff61e26f4963cd35a7ab991589ba7008419" translate="yes" xml:space="preserve">
          <source>Here, accessing the exports means using the module name (&quot;myModule&quot; in this case) as a namespace. For example, if the module imported above includes an export &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt;, you would call it like this:</source>
          <target state="translated">여기서 내보내기에 액세스한다는 것은 모듈 이름 (이 경우 &quot;myModule&quot;)을 네임 스페이스로 사용하는 것을 의미합니다. 예를 들어, 위에서 가져온 모듈에 &lt;code&gt;doAllTheAmazingThings()&lt;/code&gt; 내보내기가 포함되어 있으면 다음 과 같이 호출합니다.</target>
        </trans-unit>
        <trans-unit id="15fbcc06494476e024486f2e5d0653c7309b6c60" translate="yes" xml:space="preserve">
          <source>Here, for example, &lt;code&gt;const {p: foo} = o&lt;/code&gt; takes from the object &lt;code&gt;o&lt;/code&gt; the property named &lt;code&gt;p&lt;/code&gt; and assigns it to a local variable named &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;const {p: foo} = o&lt;/code&gt; 는 객체 &lt;code&gt;o&lt;/code&gt; 에서 &lt;code&gt;p&lt;/code&gt; 라는 속성을 가져 와서 &lt;code&gt;foo&lt;/code&gt; 라는 지역 변수에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="f4a47d89f93702cfa385c9f04a141e2759682494" translate="yes" xml:space="preserve">
          <source>Here, the function produces a string (the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;primitive&lt;/a&gt; type) as promised. However, the constructor produces an instance of the type String (an object wrapper) and that's why you rarely want to use the String constructor at all.</source>
          <target state="translated">여기서 함수는 약속 된대로 문자열 ( &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;기본&lt;/a&gt; 유형)을 생성합니다 . 그러나 생성자는 String 유형 (객체 래퍼)의 인스턴스를 생성하므로 String 생성자를 거의 사용하고 싶지 않습니다.</target>
        </trans-unit>
        <trans-unit id="51f81ae1558077795df8fc0042020be94e3ff570" translate="yes" xml:space="preserve">
          <source>Here, the method named &quot;createElement&quot; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</source>
          <target state="translated">여기서 &quot;createElement&quot;라는 메소드가 &lt;code&gt;document&lt;/code&gt; 에서 검색되어 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="40d821e94b177f191399f4c6848c0999525332fe" translate="yes" xml:space="preserve">
          <source>Here, the method named &lt;code&gt;createElement&lt;/code&gt; is retrieved from &lt;code&gt;document&lt;/code&gt; and is called.</source>
          <target state="translated">여기서 &lt;code&gt;createElement&lt;/code&gt; 라는 메서드 가 &lt;code&gt;document&lt;/code&gt; 에서 검색되어 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="54b1a90f72334cf67c79da3608b8cff7cc194a79" translate="yes" xml:space="preserve">
          <source>Hexadecimal</source>
          <target state="translated">Hexadecimal</target>
        </trans-unit>
        <trans-unit id="0a2f21efe45a597d0c5e08f0bcf4197917ea15a9" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences</source>
          <target state="translated">16 진수 이스케이프 시퀀스</target>
        </trans-unit>
        <trans-unit id="9b58c9bceb1fb4cd00c1b0d68cba9a880adb6196" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences (&lt;code&gt;'\0xA9'&lt;/code&gt;)</source>
          <target state="translated">16 진 이스케이프 시퀀스 ( &lt;code&gt;'\0xA9'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d77a4d628bd253cb9d7796f35659fc6bb4dc2dfa" translate="yes" xml:space="preserve">
          <source>Hexadecimal escape sequences consist of &lt;code&gt;\x&lt;/code&gt; followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF.</source>
          <target state="translated">16 진 이스케이프 시퀀스는 &lt;code&gt;\x&lt;/code&gt; 와 0x0000에서 0x00FF 범위의 코드 포인트 또는 코드 포인트를 나타내는 정확히 2 개의 16 진수 로 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="8a582ad8df25c5d47dfed0df5132809e7d6d15eb" translate="yes" xml:space="preserve">
          <source>Hexadecimal escapes started by &quot;&lt;code&gt;\x&lt;/code&gt;&quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</source>
          <target state="translated">&quot; &lt;code&gt;\x&lt;/code&gt; &quot;로 시작되는 16 진수 이스케이프 ( 예 : &lt;code&gt;\xA9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4bd87c365a900dd5094579ce438c4cfe544351c" translate="yes" xml:space="preserve">
          <source>Hexadecimal escapes started by &quot;\x&quot;, for example &lt;code&gt;\xA9&lt;/code&gt;</source>
          <target state="translated">&quot;\ x&quot;로 시작한 16 진 이스케이프 (예 : &lt;code&gt;\xA9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9924bfb13046ed8f8cebb38c6e636ffefd5cb02" translate="yes" xml:space="preserve">
          <source>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt;. If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;a href=&quot;global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</source>
          <target state="translated">16 진수 구문은 &lt;code&gt;0x&lt;/code&gt; 오는 0과 소문자 또는 대문자 라틴 문자 &quot;X&quot;( 0x 또는 &lt;code&gt;0X)&lt;/code&gt; 를 사용 합니다. 0x 뒤의 숫자가 범위 (0123456789ABCDEF)를 벗어나면 다음 &lt;a href=&quot;global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. &quot;식별자는 숫자 리터럴 바로 뒤에서 시작됩니다.&quot;</target>
        </trans-unit>
        <trans-unit id="e066ca26a734b38a5a274a8d41c70f6df347e59e" translate="yes" xml:space="preserve">
          <source>Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;X&quot; (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X)&lt;/code&gt;. If the digits after 0x are outside the range (0123456789ABCDEF), the following &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; is thrown: &quot;Identifier starts immediately after numeric literal&quot;.</source>
          <target state="translated">16 진 숫자 구문은 &lt;code&gt;0x&lt;/code&gt; 0을 사용하고 소문자 또는 대문자 라틴 문자 &quot;X&quot;( 0x 또는 &lt;code&gt;0X)&lt;/code&gt; 를 사용 합니다. 0x 이후의 숫자가 범위 (0123456789ABCDEF)를 벗어나면 다음 &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; 가 발생합니다. &quot;숫자 리터럴 직후 식별자가 시작됩니다&quot;.</target>
        </trans-unit>
        <trans-unit id="a69413db5aeb0efb2c0b65dd4800effb756f3189" translate="yes" xml:space="preserve">
          <source>Hexadecimal numeric literals (&lt;code&gt;0xAF&lt;/code&gt;)</source>
          <target state="translated">16 진 숫자 리터럴 ( &lt;code&gt;0xAF&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ed159796c6374be3a3a7fcdf94ff47de9417b532" translate="yes" xml:space="preserve">
          <source>Hidden characters</source>
          <target state="translated">숨겨진 캐릭터</target>
        </trans-unit>
        <trans-unit id="ba8e27ee7970ed22acceee3b123e2ed01cfef7b9" translate="yes" xml:space="preserve">
          <source>Hiding Implementation Details with ECMAScript 6 WeakMaps</source>
          <target state="translated">ECMAScript 6 WeakMaps로 구현 세부 사항 숨기기</target>
        </trans-unit>
        <trans-unit id="48c7f05df7a5b55b6867d43de9a4ff0ca135540e" translate="yes" xml:space="preserve">
          <source>Historically &lt;code&gt;eval()&lt;/code&gt; had an optional second argument, specifying an object in whose context the evaluation was to be performed. This argument was non-standard, and was definitely removed from Firefox 4. See &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;bug 531675&lt;/a&gt;.</source>
          <target state="translated">역사적으로 &lt;code&gt;eval()&lt;/code&gt; 에는 선택적인 두 번째 인수가 있었으며 평가를 수행 할 컨텍스트에서 객체를 지정했습니다. 이 주장은 표준이 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=531675&quot;&gt;아니며&lt;/a&gt; Firefox 4에서 완전히 제거되었습니다 . 버그 531675를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d0556094a79057d9c2ab59684cc5203152ab3bf" translate="yes" xml:space="preserve">
          <source>Historically, JSON was &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;not a completely strict subset of JavaScript&lt;/a&gt;. The literal code points U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR could appear literally in string literals and property names in JSON text. But they could not appear literally in similar context in JavaScript text, only using Unicode escapes as &lt;code&gt;\u2028&lt;/code&gt; and &lt;code&gt;\u2029&lt;/code&gt;. This recently changed: now both code points may appear literally in strings in JSON and JavaScript both.</source>
          <target state="translated">역사적으로 JSON은 &lt;a href=&quot;http://timelessrepo.com/json-isnt-a-javascript-subset&quot;&gt;JavaScript의 완전히 엄격한 하위 집합&lt;/a&gt; 이 아닙니다 . 리터럴 코드 포인트 U + 2028 LINE SEPARATOR 및 U + 2029 PARAGRAPH SEPARATOR는 JSON 텍스트의 문자열 리터럴 및 속성 이름에 문자 그대로 나타날 수 있습니다. 그러나 그들은 JavaScript 텍스트에서 문자 그대로 비슷한 맥락에서 나타날 수 없었으며 유니 코드 이스케이프를 &lt;code&gt;\u2028&lt;/code&gt; 및 &lt;code&gt;\u2029&lt;/code&gt; 로만 사용했습니다 . 이것은 최근에 변경되었습니다. 이제 두 코드 포인트가 문자 그대로 JSON과 JavaScript의 문자열에 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4e7aea155b6fd0365d90d2db06835ebcdaa15e0" translate="yes" xml:space="preserve">
          <source>Historically, accessing the global object has required different syntax in different JavaScript environments. On the web you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/self&quot;&gt;&lt;code&gt;self&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/frames&quot;&gt;&lt;code&gt;frames&lt;/code&gt;&lt;/a&gt; - but in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker&quot;&gt;Web Workers&lt;/a&gt; only &lt;code&gt;self&lt;/code&gt; will work. In Node.js none of these work, and you must instead use &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">역사적으로 전역 개체에 액세스하려면 JavaScript 환경마다 다른 구문이 필요했습니다. 웹에서는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/self&quot;&gt; &lt;code&gt;self&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/frames&quot;&gt; &lt;code&gt;frames&lt;/code&gt; 를&lt;/a&gt; 사용할 수 있지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker&quot;&gt;Web Workers&lt;/a&gt; 에서는 &lt;code&gt;self&lt;/code&gt; 만 작동합니다. Node.js에서는 이러한 작업이 없으며 대신 &lt;code&gt;global&lt;/code&gt; 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7bcaf634e9dbfa99922f815d7eb0b950882fbc2c" translate="yes" xml:space="preserve">
          <source>Hoisting</source>
          <target state="translated">Hoisting</target>
        </trans-unit>
        <trans-unit id="5f27b866d76e39ba378b955e78eb58dfdd94f6f6" translate="yes" xml:space="preserve">
          <source>Horizontal tabulation</source>
          <target state="translated">가로 도표</target>
        </trans-unit>
        <trans-unit id="3adb95f9912f2091bd36deb307c797f8d4c2f8ed" translate="yes" xml:space="preserve">
          <source>Host object (provided by the JS environment)</source>
          <target state="translated">호스트 객체 (JS 환경에서 제공)</target>
        </trans-unit>
        <trans-unit id="d39c373de107a4bce739387a89a889c47d0c8cad" translate="yes" xml:space="preserve">
          <source>Hour cycle type</source>
          <target state="translated">시간주기 유형</target>
        </trans-unit>
        <trans-unit id="35b2dfb78eac72ed6693d54e3fef42f6d54dd0ef" translate="yes" xml:space="preserve">
          <source>Hour cycle. Possible values include: &quot;&lt;code&gt;h11&lt;/code&gt;&quot;, &quot;&lt;code&gt;h12&lt;/code&gt;&quot;, &quot;&lt;code&gt;h23&lt;/code&gt;&quot;, &quot;&lt;code&gt;h24&lt;/code&gt;&quot;.</source>
          <target state="translated">시간주기. 가능한 값은 다음과 같습니다 : &quot; &lt;code&gt;h11&lt;/code&gt; &quot;, &quot; &lt;code&gt;h12&lt;/code&gt; &quot;, &quot; &lt;code&gt;h23&lt;/code&gt; &quot;, &quot; &lt;code&gt;h24&lt;/code&gt; &quot;.</target>
        </trans-unit>
        <trans-unit id="05d832afb150e6d6cee536a5366db6a39f98f7aa" translate="yes" xml:space="preserve">
          <source>Hour cycle. Possible values include: &lt;code&gt;&quot;h11&quot;&lt;/code&gt;, &lt;code&gt;&quot;h12&quot;&lt;/code&gt;, &lt;code&gt;&quot;h23&quot;&lt;/code&gt;, &lt;code&gt;&quot;h24&quot;&lt;/code&gt;.</source>
          <target state="translated">시간주기. 가능한 값은 다음과 같습니다 : &lt;code&gt;&quot;h11&quot;&lt;/code&gt; , &lt;code&gt;&quot;h12&quot;&lt;/code&gt; , &lt;code&gt;&quot;h23&quot;&lt;/code&gt; , &lt;code&gt;&quot;h24&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ccc02ad3ffdd408fd6859d246a6a1c3e64a7a20" translate="yes" xml:space="preserve">
          <source>Hour system using 0&amp;ndash;11; corresponds to 'K' in patterns. The 12 hour clock, with midnight starting at 0:00 am.</source>
          <target state="translated">0-11을 사용하는 시간 시스템; 패턴의 'K'에 해당합니다. 자정이 오전 0시에 시작하는 12 시간 시계입니다.</target>
        </trans-unit>
        <trans-unit id="889ee33866e46727e54f1b752dd77e90c5bb090a" translate="yes" xml:space="preserve">
          <source>Hour system using 0&amp;ndash;23; corresponds to 'H' in patterns. The 24 hour clock, with midnight starting at 0:00.</source>
          <target state="translated">0&amp;ndash;23을 사용하는 시간 시스템; 패턴의 'H'에 해당합니다. 자정이 0시에 시작하는 24 시간 시계입니다.</target>
        </trans-unit>
        <trans-unit id="19ddd9112121365c57597c61d1c4206ef99b714f" translate="yes" xml:space="preserve">
          <source>Hour system using 1&amp;ndash;12; corresponds to 'h' in patterns. The 12 hour clock, with midnight starting at 12:00 am.</source>
          <target state="translated">1-12를 사용하는 시간 시스템; 패턴의 'h'에 해당합니다. 12 시간 시계, 자정은 오전 12시에 시작합니다.</target>
        </trans-unit>
        <trans-unit id="93a7c0c8873aebc58cf62b3e1f748e30e821f3ae" translate="yes" xml:space="preserve">
          <source>Hour system using 1&amp;ndash;24; corresponds to 'k' in pattern. The 24 hour clock, with midnight starting at 24:00.</source>
          <target state="translated">1&amp;ndash;24를 사용하는 시간 시스템; 패턴의 'k'에 해당합니다. 24 시간 시계, 자정은 24:00에 시작합니다.</target>
        </trans-unit>
        <trans-unit id="ee3e1dbb726eba3df0ad73f985155dde4b677d93" translate="yes" xml:space="preserve">
          <source>Hour, as two digits with leading zero if required</source>
          <target state="translated">시간 (필요한 경우 앞에 0이있는 2 자리 숫자)</target>
        </trans-unit>
        <trans-unit id="f4d808298af4e3a344801b330a4f9fdcd1165517" translate="yes" xml:space="preserve">
          <source>Hour: 2 digit hour of day, e.g. &quot;14&quot;</source>
          <target state="translated">시간 : 2 자리 시간 (예 : &quot;14&quot;)</target>
        </trans-unit>
        <trans-unit id="2f6aca7c8ed3e78d7b2ca4654ff033cbca51140c" translate="yes" xml:space="preserve">
          <source>How a static member (method or property) is defined on a class.</source>
          <target state="translated">클래스에서 정적 멤버 (메서드 또는 속성)를 정의하는 방법.</target>
        </trans-unit>
        <trans-unit id="170fd3a12359241b63d931c864e00d0ebab3ff77" translate="yes" xml:space="preserve">
          <source>How a static member can and cannot be called.</source>
          <target state="translated">정적 멤버를 호출 할 수있는 방법과 호출 할 수없는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="02b8a9b69ed5e801a258f6ff432668b197dc1977" translate="yes" xml:space="preserve">
          <source>How a static method can and cannot be called.</source>
          <target state="translated">정적 메소드를 호출 할 수있는 방법과 호출 할 수없는 방법</target>
        </trans-unit>
        <trans-unit id="9212bc0bac3b7334165992d907eff590f2d58bf7" translate="yes" xml:space="preserve">
          <source>How a static method is implemented on a class.</source>
          <target state="translated">정적 메소드가 클래스에서 구현되는 방법</target>
        </trans-unit>
        <trans-unit id="3c942ed885b162688cb9195ae45a134e9665a26b" translate="yes" xml:space="preserve">
          <source>How reduce() works</source>
          <target state="translated">reduce () 작동 방식</target>
        </trans-unit>
        <trans-unit id="590c269c92635e56c357d9c996f7ebd80cef25ce" translate="yes" xml:space="preserve">
          <source>How to display the currency in currency formatting. Possible values are &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; to use a localized currency symbol such as &amp;euro;, &lt;code&gt;&quot;code&quot;&lt;/code&gt; to use the ISO currency code, &lt;code&gt;&quot;name&quot;&lt;/code&gt; to use a localized currency name such as &lt;code&gt;&quot;dollar&quot;&lt;/code&gt;; the default is &lt;code&gt;&quot;symbol&quot;&lt;/code&gt;.</source>
          <target state="translated">통화를 통화 형식으로 표시하는 방법 가능한 값은 &amp;euro;와 같은 현지 통화 기호를 사용하는 &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; , ISO 통화 코드를 사용하는 &lt;code&gt;&quot;code&quot;&lt;/code&gt; , &lt;code&gt;&quot;dollar&quot;&lt;/code&gt; 와 같은 현지 통화 이름을 사용하는 &lt;code&gt;&quot;name&quot;&lt;/code&gt; &quot; ; 기본값은 &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b0c044b13c7bb4fb298968475ed3fc9068f5056c" translate="yes" xml:space="preserve">
          <source>How to display the currency in currency formatting. Possible values are:</source>
          <target state="translated">통화 형식으로 통화를 표시하는 방법. 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="317cebfb06712b03449e83ae5a1cfac238766c01" translate="yes" xml:space="preserve">
          <source>How to use a source map &amp;ndash; Firefox Tools documentation</source>
          <target state="translated">소스 맵을 사용하는 방법 &amp;ndash; Firefox 도구 설명서</target>
        </trans-unit>
        <trans-unit id="3cd53a529a6d6f543acf35035d0de8d5fea99843" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;const {a, b} = {a: 1, b: 2}&lt;/code&gt;</source>
          <target state="translated">그러나 &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; 는 &lt;code&gt;const {a, b} = {a: 1, b: 2}&lt;/code&gt; 와 마찬가지로 유효 합니다.</target>
        </trans-unit>
        <trans-unit id="72c36f97b9d3ec431e2384db73310aeb72ab6819" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; is valid, as is &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt;</source>
          <target state="translated">그러나 &lt;code&gt;var {a, b} = {a: 1, b: 2}&lt;/code&gt; 와 같이 &lt;code&gt;({a, b} = {a: 1, b: 2})&lt;/code&gt; 는 유효 합니다.</target>
        </trans-unit>
        <trans-unit id="6ca0de76b3b99b8b56c8d7af288735c24f70c1f3" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;eval()&lt;/code&gt; is not necessary here. In fact, its use here is discouraged. Instead, use the &lt;a href=&quot;../operators/property_accessors&quot;&gt;property accessors&lt;/a&gt;, which are much faster and safer:</source>
          <target state="translated">그러나 여기서는 &lt;code&gt;eval()&lt;/code&gt; 이 필요하지 않습니다. 실제로 여기서는 사용하지 않는 것이 좋습니다. 대신 훨씬 빠르고 안전한 &lt;a href=&quot;../operators/property_accessors&quot;&gt;속성 접근&lt;/a&gt; 자를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f9d62d5a3dc9dfd3f9a930073640792a4689bc84" translate="yes" xml:space="preserve">
          <source>However, &lt;strong&gt;if and only if&lt;/strong&gt; an empty iterable is passed as an argument, &lt;code&gt;Promise.allSettled()&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt; object that has &lt;strong&gt;already been resolved&lt;/strong&gt; as an empty array.</source>
          <target state="translated">그러나 빈 iterable이 인수로 전달되는 &lt;strong&gt;경우에만 &lt;/strong&gt; &lt;code&gt;Promise.allSettled()&lt;/code&gt; 는 &lt;strong&gt;이미&lt;/strong&gt; 빈 배열 &lt;strong&gt;로 확인&lt;/strong&gt; 된 &lt;code&gt;Promise&lt;/code&gt; 객체를 반환합니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b921fc32f59289040086bb44d7385dce3af7b6ca" translate="yes" xml:space="preserve">
          <source>However, a function can access all variables and functions defined inside the scope in which it is defined. In other words, a function defined in the global scope can access all variables defined in the global scope.</source>
          <target state="translated">그러나 함수는 정의 된 범위 내에 정의 된 모든 변수 및 함수에 액세스 할 수 있습니다. 즉, 전역 범위에 정의 된 함수는 전역 범위에 정의 된 모든 변수에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1344ff6ea20d410b0de6c7bf7acfe1eadf51dcfb" translate="yes" xml:space="preserve">
          <source>However, adding non-standard methods to the array object can cause issues later, either with your own code, or when &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;adding features to JavaScript&lt;/a&gt;.</source>
          <target state="translated">그러나 비표준 메소드를 배열 객체에 추가하면 나중에 자체 코드에서 또는 &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/smooshgate&quot;&gt;JavaScript에 기능을 추가&lt;/a&gt; 할 때 문제가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e2fc3da3ae9c154becb2bd8619ed5afc981767c4" translate="yes" xml:space="preserve">
          <source>However, as it is widely implemented and used on the Web, it is very unlikely that browsers will stop implementing it.</source>
          <target state="translated">그러나 웹에서 광범위하게 구현되고 사용되기 때문에 브라우저가 웹 사이트를 구현하지 않을 가능성은 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="f9600d456633eb4645e65e56ab2737fa05e32c69" translate="yes" xml:space="preserve">
          <source>However, both spread (&lt;code&gt;...&lt;/code&gt;) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using &lt;code&gt;apply&lt;/code&gt; and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</source>
          <target state="translated">그러나 배열에 요소가 너무 많으면 spread ( &lt;code&gt;...&lt;/code&gt; ) 및 &lt;code&gt;apply&lt;/code&gt; 가 실패하거나 잘못된 결과를 반환합니다. 배열 요소를 함수 매개 변수로 전달하려고하기 때문입니다. 참조 &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;하여 &lt;code&gt;apply&lt;/code&gt; 하고 기능을 내장&lt;/a&gt; 자세한 내용은. &lt;code&gt;reduce&lt;/code&gt; 솔루션은이 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a8f4a701bba3d52df404267d8b38008d653efd94" translate="yes" xml:space="preserve">
          <source>However, both spread (&lt;code&gt;...&lt;/code&gt;) and &lt;code&gt;apply&lt;/code&gt; will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;Using apply and built-in functions&lt;/a&gt; for more details. The &lt;code&gt;reduce&lt;/code&gt; solution does not have this problem.</source>
          <target state="translated">그러나 spread ( &lt;code&gt;...&lt;/code&gt; )와 &lt;code&gt;apply&lt;/code&gt; 는 모두 실패하거나 배열에 요소가 너무 많은 경우 잘못된 결과를 반환합니다. 이는 배열 요소를 함수 매개 변수로 전달하려고하기 때문입니다. 자세한 내용은 &lt;a href=&quot;../function/apply#Using_apply_and_built-in_functions&quot;&gt;적용 및 내장 함수 사용&lt;/a&gt; 을 참조하십시오. &lt;code&gt;reduce&lt;/code&gt; 솔루션은이 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="155f9210fb274769199d9d6e37fb1cb3e08415b0" translate="yes" xml:space="preserve">
          <source>However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN():&lt;/code&gt; the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt;, or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN:&lt;/code&gt;</source>
          <target state="translated">그러나 &lt;code&gt;isNaN()&lt;/code&gt; 과 &lt;code&gt;Number.isNaN():&lt;/code&gt; 의 차이점에 유의하십시오 . 값이 현재 &lt;code&gt;NaN&lt;/code&gt; 이거나 숫자로 강제 변환 된 후 &lt;code&gt;NaN&lt;/code&gt; 이 될 경우 전자는 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 후자는 반환합니다 값이 현재 &lt;code&gt;NaN:&lt;/code&gt; 경우에만 &lt;code&gt;true&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1a05afbdfaaafa830031102e2b9809905ecfa0f3" translate="yes" xml:space="preserve">
          <source>However, do note the difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN()&lt;/code&gt;: the former will return &lt;code&gt;true&lt;/code&gt; if the value is currently &lt;code&gt;NaN&lt;/code&gt;, or if it is going to be &lt;code&gt;NaN&lt;/code&gt; after it is coerced to a number, while the latter will return &lt;code&gt;true&lt;/code&gt; only if the value is currently &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">그러나 사이의 차이에 유의 할 &lt;code&gt;isNaN()&lt;/code&gt; 및 &lt;code&gt;Number.isNaN()&lt;/code&gt; : 전자가 반환 &lt;code&gt;true&lt;/code&gt; 값이 현재의 경우 &lt;code&gt;NaN&lt;/code&gt; 의 , 또는 될 것입니다 경우 &lt;code&gt;NaN&lt;/code&gt; 이를 이 숫자로 강제 후, 후자의 뜻을 반환하면서 값이 현재 &lt;code&gt;NaN&lt;/code&gt; 인 경우에만 &lt;code&gt;true&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d1cec757f8ff73194c703cf76ff4d0beb35547cf" translate="yes" xml:space="preserve">
          <source>However, due to &lt;code&gt;||&lt;/code&gt; being a boolean logical operator, the left hand-side operand was coerced to a boolean for the evaluation and any &lt;em&gt;falsy&lt;/em&gt; value (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;) was not returned. This behavior may cause unexpected consequences if you consider &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt; as valid values.</source>
          <target state="translated">하지만 &lt;code&gt;||&lt;/code&gt; 부울 논리 연산자 인 경우 왼쪽 피연산자는 평가를 위해 부울로 강제 변환되었으며 모든 &lt;em&gt;잘못된&lt;/em&gt; 값 ( &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;''&lt;/code&gt; , &lt;code&gt;NaN&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;undefined&lt;/code&gt; )이 반환되지 않았습니다. 이 동작은 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;''&lt;/code&gt; 또는 &lt;code&gt;NaN&lt;/code&gt; 을 유효한 값으로 간주하는 경우 예기치 않은 결과를 초래할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bb5955412c243802f624c3fcc726fa95ed764470" translate="yes" xml:space="preserve">
          <source>However, if a feature is part of the language, the burden of implementing that feature performantly is on the engine developers (ideally).</source>
          <target state="translated">그러나 기능이 언어의 일부인 경우 해당 기능을 구현하는 부담은 엔진 개발자에게 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="7d0e9166cc3877049fade8de88ba8526c9f995c0" translate="yes" xml:space="preserve">
          <source>However, if the string is recognized as an ISO format string and it contains invalid values, it will return &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; in all browsers compliant with ES5 and later:</source>
          <target state="translated">그러나 문자열이 ISO 형식 문자열로 인식되고 잘못된 값이 포함 된 경우 ES5 이상을 준수하는 모든 브라우저에서 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="022c3ab98768670bbf1933120325adce314d4bb1" translate="yes" xml:space="preserve">
          <source>However, if you are more interested in all the little technical bits defined by the ECMA standard, and are less concerned about performance or conciseness, then you may find this more descriptive polyfill to be more useful.</source>
          <target state="translated">그러나 ECMA 표준에 의해 정의 된 모든 작은 기술 비트에 더 관심이 있고 성능이나 간결성에 대해 덜 염려한다면이 설명적인 폴리 필이 더 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc57e792d30fa7d983982bc737c871ec52c8ca4c" translate="yes" xml:space="preserve">
          <source>However, if you provide your own constructor, and your class derives from some parent class, then you must explicitly call the parent class constructor using &lt;code&gt;super&lt;/code&gt;. For example:</source>
          <target state="translated">그러나 자체 생성자를 제공하고 클래스가 일부 부모 클래스에서 파생되는 경우 &lt;code&gt;super&lt;/code&gt; 를 사용하여 부모 클래스 생성자를 명시 적으로 호출해야합니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="e8b64102d1a72628622132dccbb3c2f213dbfead" translate="yes" xml:space="preserve">
          <source>However, if you set &lt;code&gt;Symbol.match&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;isRegExp&lt;/code&gt; check (that uses the &lt;code&gt;match&lt;/code&gt; property) will indicate that the object is not a regular expression object. The methods &lt;code&gt;startsWith&lt;/code&gt; and &lt;code&gt;endsWith&lt;/code&gt; won't throw a &lt;code&gt;TypeError&lt;/code&gt; as a consequence.</source>
          <target state="translated">사용자가 설정 한 경우, &lt;code&gt;Symbol.match&lt;/code&gt; 을 에 &lt;code&gt;false&lt;/code&gt; 의 &lt;code&gt;isRegExp&lt;/code&gt; 검사 (즉, 사용하는 &lt;code&gt;match&lt;/code&gt; 속성) 개체가 정규 표현식 객체가 아닌 것을 나타냅니다. 그 결과 &lt;code&gt;startsWith&lt;/code&gt; 및 &lt;code&gt;endsWith&lt;/code&gt; 는 &lt;code&gt;TypeError&lt;/code&gt; 를 발생 시키지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="31f1e2bdac94b098b9f877ce5da8857a1ad83361" translate="yes" xml:space="preserve">
          <source>However, illegal escape sequences must still be represented in the &amp;ldquo;cooked&amp;rdquo; representation. They will show up as &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; element in the &amp;ldquo;cooked&amp;rdquo; array:</source>
          <target state="translated">그러나 불법 이스케이프 시퀀스는 여전히 &quot;요리 된&quot;표현으로 표현되어야합니다. &quot;cooked&quot;배열에 &lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 요소 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="03a698f36d60dc84adc893e9fc94c9f9a1a121dc" translate="yes" xml:space="preserve">
          <source>However, in a case like the following, there are not alternatives to &lt;code&gt;arguments.callee&lt;/code&gt;, so its deprecation could be a bug (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;bug 725398&lt;/a&gt;):</source>
          <target state="translated">그러나 다음과 같은 경우 &lt;code&gt;arguments.callee&lt;/code&gt; 의 대안이 없으므로 사용 중단이 버그 일 수 있습니다 ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=725398&quot;&gt;버그 725398&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="4589d67aea24a69292bd71d7b10227587745cfc4" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;DateTimeFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">그러나 많은 사용자 인터페이스에서이 문자열의 형식을 사용자 정의하려고합니다. &lt;code&gt;formatToParts&lt;/code&gt; 의 방법에 의해 생산 된 문자열의 로케일 인식 포맷 할 수 &lt;code&gt;DateTimeFormat&lt;/code&gt; 의 당신에게 부분 문자열을 제공하여 포맷터 :</target>
        </trans-unit>
        <trans-unit id="8022b3b7bd063cb56b7912845f1a0f26bce01df9" translate="yes" xml:space="preserve">
          <source>However, in many User Interfaces there is a desire to customize the formatting of this string. The &lt;code&gt;formatToParts&lt;/code&gt; method enables locale-aware formatting of strings produced by &lt;code&gt;NumberFormat&lt;/code&gt; formatters by providing you the string in parts:</source>
          <target state="translated">그러나 많은 사용자 인터페이스에서이 문자열의 형식을 사용자 정의하려고합니다. &lt;code&gt;formatToParts&lt;/code&gt; 의 방법에 의해 생산 된 문자열의 로케일 인식 서식 수 &lt;code&gt;NumberFormat&lt;/code&gt; 당신에게 부분 문자열을 제공하여 포맷터 :</target>
        </trans-unit>
        <trans-unit id="f669417c4db529251f3383ce99a11f4abe560111" translate="yes" xml:space="preserve">
          <source>However, invalid values in date strings not recognized as simplified ISO format as defined by ECMA-262 may or may not result in &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, depending on the browser and values provided, e.g.:</source>
          <target state="translated">그러나 ECMA-262에서 정의한대로 날짜 문자열의 유효하지 않은 값이 단순화 된 ISO 형식으로 인식되지 않으면 브라우저 및 제공된 값에 따라 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이&lt;/a&gt; 발생할 수도 있고 그렇지 않을 수도 있습니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="ef074962521111d0da446df3606b66ac6041432b" translate="yes" xml:space="preserve">
          <source>However, it can be converted to a real &lt;code&gt;Array&lt;/code&gt;:</source>
          <target state="translated">그러나 실제 &lt;code&gt;Array&lt;/code&gt; 로 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a74265a92b19fdffe551a7aa2ab8d023b875e39a" translate="yes" xml:space="preserve">
          <source>However, it is important to consider the following scenarios:</source>
          <target state="translated">그러나 다음 시나리오를 고려하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="84cb019d3ebd3521eafb6da4bfd6f75dae35c17b" translate="yes" xml:space="preserve">
          <source>However, it's important to point out that a block nested inside a case clause will create a new block scoped lexical environment, which will not produce the redeclaration errors shown above.</source>
          <target state="translated">그러나 case 절 안에 중첩 된 블록은 새로운 블록 범위 어휘 환경을 작성하여 위에 표시된 재 선언 오류를 생성하지 않음을 지적하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="baa6aadd1c660682617a1e4f8bf27000cbc1c4f7" translate="yes" xml:space="preserve">
          <source>However, objects created with the object literal notation are an exception here: Although the prototype is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">그러나 예외가 여기에 객체 리터럴 표기법입니다 만든 개체 : 프로토 타입이 있지만 &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;instanceof Object&lt;/code&gt; 를 반환 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb206323f2e15d213b5f0f56c363d1864f9a048d" translate="yes" xml:space="preserve">
          <source>However, objects created with the object literal notation are an exception here: Although the prototype is undefined, &lt;code&gt;instanceof Object&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">그러나 객체 리터럴 표기법으로 생성 된 객체는 예외입니다. 프로토 타입이 정의되지 않았지만 &lt;code&gt;instanceof Object&lt;/code&gt; 는 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="cb8b548450bac1315df5f50eded94022c2cca6c2" translate="yes" xml:space="preserve">
          <source>However, oftentimes, this error is only a consequence of another error, like not escaping strings properly, or using &lt;code&gt;var&lt;/code&gt; wrongly. You might also have too many parenthesis somewhere. Carefully check the syntax when this error is thrown.</source>
          <target state="translated">그러나 종종이 오류는 문자열을 올바르게 이스케이프하지 않거나 &lt;code&gt;var&lt;/code&gt; 를 잘못 사용하는 것과 같은 다른 오류의 결과 일뿐 입니다. 어딘가에 괄호가 너무 많을 수도 있습니다. 이 오류가 발생하면 구문을주의해서 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="75c2f10e5aa796faf9bc362b9bd19e6e889e4841" translate="yes" xml:space="preserve">
          <source>However, provided arguments are still prepended to the constructor call:</source>
          <target state="translated">그러나 제공된 인수는 여전히 생성자 호출 앞에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="dd19dccaef7562e3656c9a100b4f55ef42fffd08" translate="yes" xml:space="preserve">
          <source>However, providing parenthesis to explicitly indicate precedence is correct:</source>
          <target state="translated">그러나 우선 순위를 명시 적으로 나타 내기 위해 괄호를 제공하는 것은 정확합니다.</target>
        </trans-unit>
        <trans-unit id="97e2c5535a759168412becefdd1bf3e1815503f4" translate="yes" xml:space="preserve">
          <source>However, setting the generic &lt;strong&gt;prototype&lt;/strong&gt; as the new object's prototype works even better:</source>
          <target state="translated">그러나 일반 &lt;strong&gt;프로토 타입&lt;/strong&gt; 을 새 객체의 프로토 &lt;strong&gt;타입&lt;/strong&gt; 으로 설정하면 훨씬 더 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="1e11e841387ec0c6e1a4dbc05297c9f5c95dcde4" translate="yes" xml:space="preserve">
          <source>However, since the code points are different, string comparison will not treat them as equal. And since the number of code points in each version is different, they even have different lengths.</source>
          <target state="translated">그러나 코드 포인트가 다르기 때문에 문자열 비교는 이들을 동일하게 취급하지 않습니다. 그리고 각 버전의 코드 포인트 수가 다르기 때문에 길이도 다릅니다.</target>
        </trans-unit>
        <trans-unit id="39ec507653dca53c60f648601219f3a82bc12d6d" translate="yes" xml:space="preserve">
          <source>However, since these are &lt;code&gt;BigInt&lt;/code&gt;s and not &lt;code&gt;BigDecimal&lt;/code&gt;s, this operation will round towards &lt;code&gt;0&lt;/code&gt; (which is to say, it will not return any fractional digits).</source>
          <target state="translated">그러나 이들은 &lt;code&gt;BigDecimal&lt;/code&gt; 이 아니라 &lt;code&gt;BigInt&lt;/code&gt; 이므로이 연산은 &lt;code&gt;0&lt;/code&gt; 으로 반올림됩니다 (즉, 소수 자릿수를 반환하지 않음).</target>
        </trans-unit>
        <trans-unit id="8a1264969786c794608eb6828a419e597ec032e7" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;await&lt;/code&gt; calls still run in series, which means the second &lt;code&gt;await&lt;/code&gt; will wait for the first one to finish. In this case, the result of the fastest timer is processed after the slowest.</source>
          <target state="translated">그러나 &lt;code&gt;await&lt;/code&gt; 호출은 여전히 ​​직렬로 실행되므로 두 번째 &lt;code&gt;await&lt;/code&gt; 는 첫 번째 await 가 완료 될 때까지 기다립니다. 이 경우 가장 빠른 타이머의 결과는 가장 느린 이후에 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="a979c19b10bb900d27fa12f6bd72e17ef4663d95" translate="yes" xml:space="preserve">
          <source>However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by comma. The following code creates an object with three properties and the keys are &lt;code&gt;&quot;foo&quot;&lt;/code&gt;, &lt;code&gt;&quot;age&quot;&lt;/code&gt; and &lt;code&gt;&quot;baz&quot;&lt;/code&gt;. The values of these keys are a string &lt;code&gt;&quot;bar&quot;&lt;/code&gt;, a number &lt;code&gt;42&lt;/code&gt;, and another object.</source>
          <target state="translated">그러나 &lt;em&gt;리터럴&lt;/em&gt; 또는 &lt;em&gt;이니셜 라이저&lt;/em&gt; 표기법 의 장점은 중괄호 안에 속성이있는 객체를 빠르게 만들 수 있다는 것입니다. &lt;code&gt;key: value&lt;/code&gt; 목록을 쉼표로 구분 된 값 쌍으로 간단히 알려 줍니다 . 다음 코드는 세 가지 속성을 가진 객체를 만들고 키는 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; , &lt;code&gt;&quot;age&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;baz&quot;&lt;/code&gt; 입니다. 이 키의 값은 문자열 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; , 숫자 &lt;code&gt;42&lt;/code&gt; 및 다른 객체입니다.</target>
        </trans-unit>
        <trans-unit id="842b6087386cc39e29d6f9f778642f041abe2fd9" translate="yes" xml:space="preserve">
          <source>However, the advantage of the &lt;em&gt;literal&lt;/em&gt; or &lt;em&gt;initializer&lt;/em&gt; notation is, that you are able to quickly create objects with properties inside the curly braces. You simply notate a list of &lt;code&gt;key: value&lt;/code&gt; pairs delimited by commas.</source>
          <target state="translated">그러나 &lt;em&gt;리터럴&lt;/em&gt; 또는 &lt;em&gt;이니셜 라이저&lt;/em&gt; 표기법 의 장점은 중괄호 안에 속성이있는 개체를 빠르게 만들 수 있다는 것입니다. 쉼표로 구분 된 &lt;code&gt;key: value&lt;/code&gt; 쌍 목록을 기록하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="90eb6b0644af78d5b428ee0a62bbaacec5e664a7" translate="yes" xml:space="preserve">
          <source>However, the following expressions are not equivalent due to &lt;a href=&quot;operator_precedence&quot;&gt;operator precedence&lt;/a&gt; and stresses the importance of requiring the right-hand operand to be a single expression (grouped if needed by parentheses).</source>
          <target state="translated">그러나 다음 식은 &lt;a href=&quot;operator_precedence&quot;&gt;연산자 우선 순위&lt;/a&gt; 로 인해 동일하지 않으며 오른쪽 피연산자가 단일 식 (괄호로 묶인 경우 그룹화)이어야한다는 중요성을 강조합니다.</target>
        </trans-unit>
        <trans-unit id="30b34a0bab1e094dcb3cefc2509d153860c7d52c" translate="yes" xml:space="preserve">
          <source>However, the following function is more performant because it is likely that browsers in which this polyfill would be used do not optimize with an internal integer type in JavaScript, instead using floating points for all numbers.</source>
          <target state="translated">그러나 다음 함수는이 폴리 필이 사용되는 브라우저가 모든 숫자에 부동 소수점을 사용하는 대신 JavaScript에서 내부 정수 유형으로 최적화하지 않을 가능성이 높기 때문에 더 성능이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5502e7d43a8615c92869746e5397dde33bba4059" translate="yes" xml:space="preserve">
          <source>However, the following function is more performant because it is likely that browsers in which this polyfill would be used do not optimize with an internal integer type in javascript, instead using floating points for all numbers.</source>
          <target state="translated">그러나 다음 함수는이 polyfill을 사용하는 브라우저가 모든 숫자에 대해 부동 소수점을 사용하는 대신 자바 스크립트에서 내부 정수 유형으로 최적화하지 않을 가능성이 높기 때문에 성능이 뛰어납니다.</target>
        </trans-unit>
        <trans-unit id="cb6b6a8647000d55f54a8880aa12a2276fcbbc59" translate="yes" xml:space="preserve">
          <source>However, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 32-bit and 64-bit:</source>
          <target state="translated">그러나 이진수 시스템에서는 숫자 1.337을 정확하게 표현할 수 없으므로 32 비트와 64 비트가 다릅니다.</target>
        </trans-unit>
        <trans-unit id="f5124f1c3ad2f7f00e73baa927186aad0ccc0316" translate="yes" xml:space="preserve">
          <source>However, the preferred way to get an &lt;code&gt;Instance&lt;/code&gt; is through the asynchronous &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function, for example like this:</source>
          <target state="translated">그러나 &lt;code&gt;Instance&lt;/code&gt; 를 가져 오는 데 선호되는 방법 은 다음과 같이 비동기 &lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 함수를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="755d9f766b888cb8715a1a08914fb46649ab701f" translate="yes" xml:space="preserve">
          <source>However, the third argument, &lt;code&gt;manyMoreArgs&lt;/code&gt;, will be an array that contains the 3&lt;sup&gt;rd&lt;/sup&gt;, 4&lt;sup&gt;th&lt;/sup&gt;, 5&lt;sup&gt;th&lt;/sup&gt;, 6&lt;sup&gt;th&lt;/sup&gt; ... &lt;var&gt;n&lt;/var&gt;&lt;sup&gt;th&lt;/sup&gt; &amp;mdash; as many arguments that the user includes.</source>
          <target state="translated">그러나, 제 3 인자는 &lt;code&gt;manyMoreArgs&lt;/code&gt; 는 , 3 포함한 배열 될 것이다 &lt;sup&gt;(RD)는&lt;/sup&gt; 4 &lt;sup&gt;번째&lt;/sup&gt; , 5 &lt;sup&gt;번째&lt;/sup&gt; , 6 &lt;sup&gt;번째&lt;/sup&gt; ... &lt;var&gt;n&lt;/var&gt; &lt;sup&gt;번째는&lt;/sup&gt; 사용자가 많은 인자로 포함하고 있음 -.</target>
        </trans-unit>
        <trans-unit id="3a937a7caf1d4996fe3ff6dfb753bac4db8bb380" translate="yes" xml:space="preserve">
          <source>However, there are important differences that make &lt;code&gt;Map&lt;/code&gt; preferable in certain cases:</source>
          <target state="translated">그러나 특정 경우에 &lt;code&gt;Map&lt;/code&gt; 선호 하는 중요한 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="66ed0c333ad51c15ca60e48fe30cb7b8328df4a7" translate="yes" xml:space="preserve">
          <source>However, there is another alternative. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context.</source>
          <target state="translated">그러나 다른 대안이 있습니다. JavaScript는 정적으로 범위가 지정된 언어이므로 변수가 선언되었는지 여부는 둘러싸는 컨텍스트에서 선언되었는지 여부를 확인하여 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="471ebf7edf48600abd0f6d54e5ea534330273953" translate="yes" xml:space="preserve">
          <source>However, this can be amended by putting the line break after the arrow or using parentheses/braces as seen below to ensure that the code stays pretty and fluffy. You can also put line breaks between arguments.</source>
          <target state="translated">그러나 이것은 화살표 뒤에 줄 바꿈을 두거나 아래에서 볼 수 있듯이 괄호 / 중괄호를 사용하여 코드가 예쁘고 푹신하게 유지되도록 수정할 수 있습니다. 인수 사이에 줄 바꿈을 둘 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf3c21d43997f2e38fde291780ac2373d6107bbd" translate="yes" xml:space="preserve">
          <source>However, this combination of &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; declaration below is a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; due to &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; being hoisted to the top of the block. This results in an implicit re-declaration of the variable.</source>
          <target state="translated">그러나,이 조합 &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; 및 &lt;code&gt;let&lt;/code&gt; A는 아래의 선언을 &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 로 인해 &lt;code&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/code&gt; 블록의 상단에 게양되는가. 그 결과 변수의 암시 적 재 선언이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5eb7c1d2404c8192a9680a075b13909caf70856d" translate="yes" xml:space="preserve">
          <source>However, this is not the case for negative numbers. For example, &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; yields 1073741821, which is different than &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; (which yields &lt;code&gt;-3&lt;/code&gt;):</source>
          <target state="translated">그러나 음수의 경우에는 해당되지 않습니다. 예를 들어, &lt;code&gt;-9 &amp;gt;&amp;gt;&amp;gt; 2&lt;/code&gt; 는 1073741821을 생성하며, 이는 &lt;code&gt;-9 &amp;gt;&amp;gt; 2&lt;/code&gt; 와 다릅니다 ( &lt;code&gt;-3&lt;/code&gt; 생성 ).</target>
        </trans-unit>
        <trans-unit id="14dcb2bd120f90b22199060ec27ba9fae6eef4eb" translate="yes" xml:space="preserve">
          <source>However, this kind of technique should be avoided. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context. The only exception is the global scope, but the global scope is bound to the global object, so checking the existence of a variable in the global context can be done by checking the existence of a property on the &lt;em&gt;global object&lt;/em&gt; (using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, for instance).</source>
          <target state="translated">그러나 이런 종류의 기술은 피해야합니다. JavaScript는 정적으로 범위가 지정된 언어이므로 변수가 선언되어 있는지 아는 것은 둘러싼 컨텍스트에서 선언되어 있는지 확인할 수 있습니다. 유일한 예외는 전역 범위이지만 전역 범위는 전역 객체에 바인딩되므로 전역 컨텍스트에서 변수의 존재를 확인하려면 &lt;em&gt;전역 객체&lt;/em&gt; 의 속성 존재 여부를 확인하여 수행 할 수 있습니다 ( &lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 연산자, 예를 들어).</target>
        </trans-unit>
        <trans-unit id="2730f9b7a2f6ab7900a8832f3fabf4b290a2468e" translate="yes" xml:space="preserve">
          <source>However, this was actually a really bad solution as this (in conjunction with other &lt;code&gt;arguments&lt;/code&gt;, &lt;code&gt;callee&lt;/code&gt;, and &lt;code&gt;caller&lt;/code&gt; issues) make inlining and tail recursion impossible in the general case (you can achieve it in select cases through tracing, etc., but even the best code is suboptimal due to checks that would not otherwise be necessary.) The other major issue is that the recursive call will get a different &lt;code&gt;this&lt;/code&gt; value, e.g.:</source>
          <target state="translated">그러나,이 (다른과 함께이 같은 정말 나쁜 솔루션 실제로이었다 &lt;code&gt;arguments&lt;/code&gt; , &lt;code&gt;callee&lt;/code&gt; 및 &lt;code&gt;caller&lt;/code&gt; 일반적인 경우에 인라인과 꼬리 재귀 불가능 (당신은 등 추적을 통해 선택의 경우에 그것을 달성 할 수 있는지 확인 문제), 그러나도 다른 방법으로는 필요하지 않은 검사로 인해 최상의 코드가 차선책 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e63c447862c1a00700022089166c5e9918e6d125" translate="yes" xml:space="preserve">
          <source>However, when possible, it's better for &lt;code&gt;iterable[Symbol.iterator]&lt;/code&gt; to return different iterators that always start from the beginning, like &lt;code&gt;&lt;a href=&quot;global_objects/set/@@iterator&quot;&gt;Set.prototype[@@iterator]()&lt;/a&gt;&lt;/code&gt; does.</source>
          <target state="translated">그러나 가능하면 &lt;code&gt;iterable[Symbol.iterator]&lt;/code&gt; 가 항상 처음부터 시작하는 다른 반복자를 반환하는 것이 &lt;code&gt;&lt;a href=&quot;global_objects/set/@@iterator&quot;&gt;Set.prototype[@@iterator]()&lt;/a&gt;&lt;/code&gt; 처럼.</target>
        </trans-unit>
        <trans-unit id="2c7f6b4de6ca0412e32fe91b98df7b3eb953a189" translate="yes" xml:space="preserve">
          <source>However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</source>
          <target state="translated">그러나 최종 결과는 동일하지만 프로세스에는 한 가지 중요한 차이점이 있습니다. 사용시 &lt;code&gt;Object.create()&lt;/code&gt; 및 &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; 상기 &lt;code&gt;new.target&lt;/code&gt; 의 연산자를 가리 &lt;code&gt;undefined&lt;/code&gt; 때문에, 생성자로서 사용 된 함수 내에 &lt;code&gt;new&lt;/code&gt; 키워드가 객체를 생성하는 데 사용되는 것은 아니다.</target>
        </trans-unit>
        <trans-unit id="f70a9726f7f1c9df802ece4459bb5ec212f9dbd6" translate="yes" xml:space="preserve">
          <source>However, while the end result is the same, there is one important difference in the process. When using &lt;code&gt;Object.create()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;, the &lt;code&gt;new.target&lt;/code&gt; operator will point to &lt;code&gt;undefined&lt;/code&gt; within the function used as the constructor, since the &lt;code&gt;new&lt;/code&gt; keyword is not being used to create the object.</source>
          <target state="translated">그러나 최종 결과는 동일하지만 프로세스에는 한 가지 중요한 차이점이 있습니다. 사용시 &lt;code&gt;Object.create()&lt;/code&gt; 및 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 상기 &lt;code&gt;new.target&lt;/code&gt; 의 연산자를 가리 &lt;code&gt;undefined&lt;/code&gt; 때문에, 생성자로서 사용 된 함수 내에 &lt;code&gt;new&lt;/code&gt; 키워드가 객체를 생성하는 데 사용되는 것은 아니다.</target>
        </trans-unit>
        <trans-unit id="44a5203eb3853d077adb7930e82ede4e77c6e086" translate="yes" xml:space="preserve">
          <source>However, with any &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; value equal to or greater than the string's &lt;code&gt;length&lt;/code&gt;, the returned value &lt;em&gt;is&lt;/em&gt; the string's &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">그러나 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 값이 문자열의 &lt;code&gt;length&lt;/code&gt; 보다 크거나 같은 경우 반환되는 값 &lt;em&gt;은&lt;/em&gt; 문자열의 &lt;code&gt;length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d665da1be9c5139e8b9c230d03e2c075c39ac725" translate="yes" xml:space="preserve">
          <source>However, you can easily polyfill this method:</source>
          <target state="translated">그러나이 메서드는 쉽게 폴리 필 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92b2e22e1dbe601387214c0563f125b87f989255" translate="yes" xml:space="preserve">
          <source>Human-readable description of the error</source>
          <target state="translated">사람이 읽을 수있는 오류 설명</target>
        </trans-unit>
        <trans-unit id="774702501a96f9f0360fe3448d0861eb6e5a1874" translate="yes" xml:space="preserve">
          <source>Human-readable description of the error.</source>
          <target state="translated">사람이 읽을 수있는 오류 설명.</target>
        </trans-unit>
        <trans-unit id="448a81285c534cff1a1840023fec38448070a6b1" translate="yes" xml:space="preserve">
          <source>IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;timeZone&lt;/code&gt; 옵션의 IANA 시간대 이름</target>
        </trans-unit>
        <trans-unit id="a21d59a5661c2ebdd093c152333c7379faae31bd" translate="yes" xml:space="preserve">
          <source>IE-specific notes</source>
          <target state="translated">IE 관련 노트</target>
        </trans-unit>
        <trans-unit id="60b82a5cb94fb01631398c058b59f037ae77f375" translate="yes" xml:space="preserve">
          <source>IIFE</source>
          <target state="translated">IIFE</target>
        </trans-unit>
        <trans-unit id="5b708885213e869006690316087909daafe502c3" translate="yes" xml:space="preserve">
          <source>IIFE are function expressions that are invoked as soon as the function is declared.</source>
          <target state="translated">IIFE는 함수가 선언 되 자마자 호출되는 함수 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="1cfaaf83b26c6843fa3671116defdf1614fa45fb" translate="yes" xml:space="preserve">
          <source>ISO 8601 format</source>
          <target state="translated">ISO 8601 형식</target>
        </trans-unit>
        <trans-unit id="9eeaa74042397b97a14990cbf31d4240f4ad8556" translate="yes" xml:space="preserve">
          <source>ISO calendar (Gregorian calendar using the ISO 8601 calendar week rules)</source>
          <target state="translated">ISO 달력 (ISO 8601 달력 주 규칙을 사용하는 그레고리력 달력)</target>
        </trans-unit>
        <trans-unit id="cf8e6bee03070b3dc40f512e498ab2c7e3c95539" translate="yes" xml:space="preserve">
          <source>ISO-8859-1 character / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+00FF&lt;/code&gt;</source>
          <target state="translated">ISO-8859-1 문자 / &lt;code&gt;U+0000&lt;/code&gt; 과 &lt;code&gt;U+00FF&lt;/code&gt; 사이의 유니 코드 코드 포인트</target>
        </trans-unit>
        <trans-unit id="662d84aac50b0d7e6987ea1c9fc03b1a8ce495d6" translate="yes" xml:space="preserve">
          <source>Ideally, an integer between 0 and 23, representing the hour. If a value greater than 23 is provided, the datetime will be incremented by the extra hours.</source>
          <target state="translated">시간을 나타내는 0에서 23 사이의 정수가 이상적입니다. 23보다 큰 값을 제공하면 날짜 시간이 추가 시간만큼 증가합니다.</target>
        </trans-unit>
        <trans-unit id="2afda55b08fab9ecb1a05641c3479447864735a5" translate="yes" xml:space="preserve">
          <source>Identifier after number</source>
          <target state="translated">숫자 다음의 식별자</target>
        </trans-unit>
        <trans-unit id="847e3311b1908b59346f71c4d71a8ffa62245c5d" translate="yes" xml:space="preserve">
          <source>Identifier associated with the label of the statement.</source>
          <target state="translated">명령문의 레이블과 연관된 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="eb00410628b8bc6a2a83e41c14565e4b8c6ef408" translate="yes" xml:space="preserve">
          <source>Identifier associated with the label of the statement. If the statement is not a loop or &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, this is required.</source>
          <target state="translated">명령문의 레이블과 연관된 식별자입니다. 문이 루프 또는 &lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt; 가 아닌 경우 필수입니다.</target>
        </trans-unit>
        <trans-unit id="48da5a75972beaa5c2cdb9f750d86967381f2555" translate="yes" xml:space="preserve">
          <source>Identifier to be exported (so that it can be imported via &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; in another script).</source>
          <target state="translated">내보낼 식별자 ( 다른 스크립트에서 &lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; 를 통해 가져올 수 있도록 )</target>
        </trans-unit>
        <trans-unit id="ce4aea56ef53c9d0e88aee0e538775cd2f579600" translate="yes" xml:space="preserve">
          <source>Identifiers with special meanings</source>
          <target state="translated">특별한 의미를 가진 식별자</target>
        </trans-unit>
        <trans-unit id="d51a0c29dcde247f2c5fa07087cd7413f54881c7" translate="yes" xml:space="preserve">
          <source>Identity (&lt;code&gt;a === b&lt;/code&gt;)</source>
          <target state="translated">동일성 ( &lt;code&gt;a === b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b6ee669ffc2f6225a3fb2a4731a3e560ea59a0b1" translate="yes" xml:space="preserve">
          <source>Identity / strict equality (===)</source>
          <target state="translated">동일성 / 엄격한 평등 (===)</target>
        </trans-unit>
        <trans-unit id="e31d1e49c9c1b5219f967fd5909aabf716932429" translate="yes" xml:space="preserve">
          <source>Identity operator.</source>
          <target state="translated">신원 연산자.</target>
        </trans-unit>
        <trans-unit id="37706df937348636f41c4367505b2b1bf3c7bdc7" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; is encountered during conversion it is either omitted (when it is found in an object) or censored to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; (when it is found in an array). &lt;code&gt;JSON.stringify()&lt;/code&gt; can also just return &lt;code&gt;undefined&lt;/code&gt; when passing in &quot;pure&quot; values like &lt;code&gt;JSON.stringify(function(){})&lt;/code&gt; or &lt;code&gt;JSON.stringify(undefined)&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 하는 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; , 또는 &lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; (이 개체에서 발견 될 때)이나 검열을가하거나 생략 변환시 발생 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; (이 배열에서 볼 때). &lt;code&gt;JSON.stringify()&lt;/code&gt; 는 &lt;code&gt;JSON.stringify(function(){})&lt;/code&gt; 또는 &lt;code&gt;JSON.stringify(undefined)&lt;/code&gt; 와 같은 &quot;순수한&quot;값을 전달할 때 &lt;code&gt;undefined&lt;/code&gt; 반환 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0830366e44ca860573514c10a22740499f87aeaa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;begin&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; begins from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;begin&lt;/var&gt;&lt;/code&gt; 정의되지, &lt;code&gt;slice&lt;/code&gt; 인덱스에서 시작 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ee01d9cf0fc88d1b48492c445ed087ead9d9db5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, an empty string is returned.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; 가 같거나보다 큰 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; , 빈 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="cf2a71f8aad1d69fb27e2edb72ffdca7718b8575" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or negative, no elements are removed. In this case, you should specify at least one new element (see below).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; 에이 인 &lt;code&gt;0&lt;/code&gt; 또는 음의 어떤 요소는 제거되지 않는다. 이 경우 하나 이상의 새 요소를 지정해야합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="493249ea5a30d91075fe23609561379fb3cfc61a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is omitted, or if its value is equal to or larger than &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; (that is, if it is equal to or greater than the number of elements left in the array, starting at &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt;), then all the elements from &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; to the end of the array will be deleted.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; 에가 생략되거나, 그 값과 같거나 초과하는 경우에 &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; (그것이 시작되는 배열의 좌측 요소의 개수보다 크거나 같으면하다 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; , 모든 요소) 에서 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 배열의 마지막에 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="0db5b6ced976a6ac58bdc41473dd0de476e98846" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as chosen.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; 가 너무 작거나 너무 큽니다. &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;100&lt;/code&gt; 사이의 값은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 일으키지 않습니다 . 구현은 선택한 더 크고 더 작은 값을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d616a57339402e501cabfc684de039bd2e7d84e8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is greater than the length of the sequence, &lt;code&gt;slice&lt;/code&gt; extracts through to the end of the sequence (&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 시퀀스의 길이보다 긴, &lt;code&gt;slice&lt;/code&gt; 서열의 끝까지 추출물 ( &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b1146ef210942a5665073aedf95f5b545cec3a64" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 서열의 끝까지 추출물 ( &lt;code&gt;&lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21d843701dc6ae4dccacff84635f2767354ca7d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;sab.byteLength&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;sab.byteLength&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0ed5ac3600cda1d212d5c69ad6c4d2b72f2bce4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;typedarray.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;end&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;typedarray.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5aa89169f61bf8a0b59192f2c6adc83e482b095e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is omitted or undefined, or greater than &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;, &lt;code&gt;slice()&lt;/code&gt; extracts to the end of the string. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt;. (For example, if &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt;, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt;.) If it is not undefined and not a number after &lt;code&gt;Number(&lt;var&gt;endIndex&lt;/var&gt;)&lt;/code&gt;, an empty string is returned.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 생략되거나 정의되지 않은, 또는보다 큰 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; , &lt;code&gt;slice()&lt;/code&gt; 는 문자열의 끝 추출물. 음수이면 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 로 처리됩니다 . (예를 들어 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 가 &lt;code&gt;-3&lt;/code&gt; 이면 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt; 으로 처리됩니다 .) 정의되지 않았고 &lt;code&gt;Number(&lt;var&gt;endIndex&lt;/var&gt;)&lt;/code&gt; 뒤에 숫자 가 없으면 빈 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4acb01293c9ebc96050277ec4ecea3d16d5d902c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; is negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be negative, otherwise an empty string is returned. (For example, &lt;code&gt;slice(-3, 0)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.)</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 지정되고 &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; 부의 경우, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 로는 그렇지 않으면 빈 문자열이 반환되고, 음수가 될 것이다. (예를 들어 &lt;code&gt;slice(-3, 0)&lt;/code&gt; 는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 를 반환합니다 .)</target>
        </trans-unit>
        <trans-unit id="8878d32eee2cef239c9db5973a9f340fcbb26f81" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; is specified, and &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; are both positive or negative, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; should be greater than &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt;, otherwise an empty string is returned. (For example, &lt;code&gt;slice(-1, -3)&lt;/code&gt; or &lt;code&gt;slice(3, 1)&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.)</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 지정되어 &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 에이 양 또는 음의 모두, &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 에는 보다 커야 &lt;code&gt;&lt;var&gt;startIndex&lt;/var&gt;&lt;/code&gt; , 그렇지 않으면 빈 문자열이 반환됩니다. (예를 들어 &lt;code&gt;slice(-1, -3)&lt;/code&gt; 또는 &lt;code&gt;slice(3, 1)&lt;/code&gt; 는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 를 반환합니다 .)</target>
        </trans-unit>
        <trans-unit id="121294759ab7292c1337d19189daa430ce452c18" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; is not specified and a regular expressions object is supplied, that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; value) will be copied over.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; 지정되지 않고 정규 표현식 객체가 공급되고, 해당 개체의 플래그 (그리고 &lt;code&gt;lastIndex&lt;/code&gt; 값) 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="8d99b93b549e170bd47548fe7639c9d43ffa3b25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; is too small or too large. Values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt;, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as well.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 너무 작거나 너무 큽니다. &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;20&lt;/code&gt; 사이의 값 ( 포함)은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 일으키지 않습니다 . 구현은 더 크고 작은 값도 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66544d3874ce4edf9eae7f1ef1fc6624550a1bd4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;false&lt;/code&gt; is returned. The array will not be searched.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 의 경우 보다 크거나 어레이의 길이와 동일한 경우, &lt;code&gt;false&lt;/code&gt; 반환된다. 어레이는 검색되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3da6648a80a1cefb8dd16cb0d291276bb874d4ee" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; is negative, the computed index is calculated to be used as a position in the array at which to begin searching for &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt;. If the computed index is less or equal than &lt;code&gt;-1 * &lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt;, the entire array will be searched.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 의 경우 제외하고, 계산 된 인덱스 검색을 시작하는 상기 어레이 내의 위치로서 사용되는 계산 &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt; . 계산 된 인덱스가 &lt;code&gt;-1 * &lt;var&gt;arr&lt;/var&gt;.length&lt;/code&gt; 보다 작거나 같으면 전체 배열이 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="487c67ed27fb656d12527f75dab2874199fb2c3b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;hint&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; tries to call the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;toString&lt;/code&gt; property does not exist, it tries to call the &lt;a href=&quot;../object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method and if the &lt;code&gt;valueOf&lt;/code&gt; does not exist either, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;hint&lt;/var&gt;&lt;/code&gt; 입니다 &lt;code&gt;string&lt;/code&gt; 또는 &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 부르는 시도 &lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt; 방법. 는 IF &lt;code&gt;toString&lt;/code&gt; 속성이 존재하지 않습니다, 그것은 호출하려고 &lt;a href=&quot;../object/valueof&quot;&gt; &lt;code&gt;valueOf&lt;/code&gt; &lt;/a&gt; 방법과 경우 &lt;code&gt;valueOf&lt;/code&gt; 가 존재하지 않습니다 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 발생 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0f5efa3659e939cb61d75f409dbc397e5dfd4f0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substring()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; 이 생략 &lt;code&gt;substring()&lt;/code&gt; 문자열의 끝에 문자를 추출합니다.</target>
        </trans-unit>
        <trans-unit id="74661abc79fb28575922d95466c74870f72fbf49" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is equal to &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;substring()&lt;/code&gt; returns an empty string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; 이 동일 &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; , &lt;code&gt;substring()&lt;/code&gt; 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="84c11d6a40baa8e63817b8454dc5cce38f79ac98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; is greater than &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;, then the effect of &lt;code&gt;substring()&lt;/code&gt; is as if the two arguments were swapped; See example below.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; 가 보다 큰 &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; 다음의 효과 &lt;code&gt;substring()&lt;/code&gt; 두 인수 교환 것처럼이고; 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4a1188d27acd2c85324f5dbe55ce141e568b561d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 됩니다 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;substr()&lt;/code&gt; 문자열의 끝으로 추출 문자.</target>
        </trans-unit>
        <trans-unit id="5b7e60e3ac0d123fc54358e5f55ea9dba862cec9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is a negative number, it is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 음의 수이며, 이는로서 취급된다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="130c6593a9b08fcf958e0b432ebefd8329c78064" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is omitted, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 생략 &lt;code&gt;substr()&lt;/code&gt; 문자열의 끝으로 추출 문자.</target>
        </trans-unit>
        <trans-unit id="ebb546c2adf4b19ea6847ce51502abf3f40c22af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt; is returned.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; 인 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;[]&lt;/code&gt; 반환된다.</target>
        </trans-unit>
        <trans-unit id="12844bd10cfb1aad475650759ba13047e670ffb9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; is a non-&lt;code&gt;RegExp&lt;/code&gt; object, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; 비이다 &lt;code&gt;RegExp&lt;/code&gt; 객체 그것은 암시 적으로 변환된다 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40d9a3e2e0e4ac01cd08feafbb23aaa11cbf2888" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; 배열이며, 배열의 값은 결과 JSON 문자열에 포함되어야하는 객체의 속성의 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ffed4cc806e515983ab47d40601f3fb95e4df288" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; appears at the beginning (or end) of the string, it still has the effect of splitting. The result is an empty (i.e. zero length) string, which appears at the first (or last) position of the returned array.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 문자열의 시작 부분 (또는 단부)에 표시 여전히 분할의 효과를 갖는다. 결과는 반환 된 배열의 첫 번째 (또는 마지막) 위치에 나타나는 빈 (즉, 길이가 0 인) 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="68e199d99c252fd48e1f805263f62e2034604071" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; contains multiple characters, that entire character sequence must be found in order to split.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 에 여러 문자가 포함 된 경우 분할하려면 전체 문자 시퀀스를 찾아야합니다.</target>
        </trans-unit>
        <trans-unit id="5b60c088d78a681e73c91c163ad39c4f7b653fc5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression that contains capturing parentheses &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, matched results are included in the array.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 가 캡처 링 괄호 &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; 를 포함하는 정규식 인 경우 일치하는 결과가 배열에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6a59ad5deb2302a9520d8bf6c2c307e8389d3d22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is a regular expression with capturing parentheses, then each time &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; matches, the results (including any &lt;code&gt;undefined&lt;/code&gt; results) of the capturing parentheses are spliced into the output array.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 캡처 괄호 정규식이고, 각 시간 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 일치가 (임의의 결과를 포함하는 &lt;code&gt;undefined&lt;/code&gt; 캡처 괄호의 결과)의 출력 배열에 접합된다.</target>
        </trans-unit>
        <trans-unit id="dd5410db2a9d04127c7025a228a8e52b90759641" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; is converted to an array of each of its UTF-16 &quot;characters&quot;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 빈 문자열이다 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ), &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 문자 &quot;UTF-16의 각각의 배열로 변환된다.&quot;</target>
        </trans-unit>
        <trans-unit id="15b494b90462f7791f44743fe53dc8f69ae000e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is omitted or does not occur in &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;, the returned array contains one element consisting of the entire string.</source>
          <target state="translated">경우에 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 를 생략 또는 발생하지 않는다 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; , 반환 된 배열은 전체 스트링으로 구성된 하나 개의 요소를 포함한다.</target>
        </trans-unit>
        <trans-unit id="8fab622fa90718e949282abdba7d384b53a7b0ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a negative number, the index starts counting from the end of the string. Its value is capped at &lt;code&gt;-&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 음의 번호입니다, 인덱스가 문자열의 끝에서 계산을 시작합니다. 이 값이 상한선입니다 &lt;code&gt;-&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bd3655fbe616d69829dde2d91c2c3cbc32cae520" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is a positive number, the index starts counting at the start of the string. Its value is capped at &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 양수이며, 인덱스는 문자열의 시작에서 계산을 시작합니다. 값은 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; 로 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="62a6623bb0673ca48812684ca8a1b3785951570f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is greater than the index range of the sequence, an empty array is returned.</source>
          <target state="translated">경우에 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 시퀀스의 인덱스 범위보다 큰 빈 어레이가 반환된다.</target>
        </trans-unit>
        <trans-unit id="518b8100637a518349d561e5c0006da27418be4d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; starts from the index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 정의되어 있지, &lt;code&gt;slice&lt;/code&gt; 인덱스에서 시작 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4bcc887cd3d6ed9699dcf5331a44ecb87115cfcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; is not extensible, the &lt;code&gt;prototype&lt;/code&gt; parameter must be the same value as &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 이 확장 가능하지 않은 경우 &lt;code&gt;prototype&lt;/code&gt; 매개 변수는 &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt; 와 동일한 값이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="27f8a986dabc90f3ed0ff5a4753f1d7845a6539b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is not a number, then it will be converted to a number first, then converted to a 32-bit unsigned integer.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; 숫자가 아닌, 다음 우선, 다음 32 비트의 부호없는 정수로 변환 숫자로 변환한다.</target>
        </trans-unit>
        <trans-unit id="64b63b25d9e84effd29498fdf2a885d5484eb8c3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IPOdate&lt;/code&gt; is an existing &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object, it can be set to August 9, 1995 (local time) as follows:</source>
          <target state="translated">경우 &lt;code&gt;IPOdate&lt;/code&gt; 가 기존이다 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 개체가 다음과 같이, 그것은 1995년 8월 9일 (현지 시간)로 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="eed1125bbd1b5a051850eabf9e5873d34704e7da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OP&lt;sub&gt;1&lt;/sub&gt;&lt;/code&gt; and &lt;code&gt;OP&lt;sub&gt;2&lt;/sub&gt;&lt;/code&gt; have different precedence levels (see the table below), the operator with the highest precedence goes first and associativity does not matter. Observe how multiplication has higher precedence than addition and executed first, even though addition is written first in the code.</source>
          <target state="translated">&lt;code&gt;OP&lt;sub&gt;1&lt;/sub&gt;&lt;/code&gt; 과 &lt;code&gt;OP&lt;sub&gt;2&lt;/sub&gt;&lt;/code&gt; 우선 순위 수준이 서로 다른 경우 (아래 표 참조) 우선 순위가 가장 높은 연산자가 먼저 표시되고 연관성은 중요하지 않습니다. 코드에서 덧셈이 먼저 작성되었지만 곱셈이 덧셈보다 우선 순위가 높고 먼저 실행되는 방법을 관찰하십시오.</target>
        </trans-unit>
        <trans-unit id="c8a241ffd2138d21f32a5fee3d772c309c3fb36c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;a&lt;/code&gt; is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment &lt;code&gt;i&lt;/code&gt; and decrement &lt;code&gt;j&lt;/code&gt; at once.</source>
          <target state="translated">경우 &lt;code&gt;a&lt;/code&gt; 양쪽에 10 개 엘리먼트와 2 차원 배열이며, 다음 코드는 증가하는 콤마 연산자를 사용하여 &lt;code&gt;i&lt;/code&gt; 및 감량 &lt;code&gt;j&lt;/code&gt; 한 번.</target>
        </trans-unit>
        <trans-unit id="eb85c26fba31d1a9441d0eb6dbc46b2aea5b80a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;a&lt;/code&gt; is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment two variables at once.</source>
          <target state="translated">경우 &lt;code&gt;a&lt;/code&gt; 양쪽에 10 개 엘리먼트와 2 차원 배열이며, 다음의 코드는 한 번에 두 개의 변수를 증가 콤마 연산자를 이용한다.</target>
        </trans-unit>
        <trans-unit id="e4b027b1b24fc7bb8b04abb0cb7a08da1bf2616b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;begin&lt;/code&gt; is greater than the length of the sequence, an empty array is returned.</source>
          <target state="translated">경우 &lt;code&gt;begin&lt;/code&gt; 시퀀스의 길이보다 큰 경우, 하늘의 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="1dc400567ab75269215a8320aa1d021ca5028205" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;begin&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; begins from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; 이 정의되어 있지 않으면 &lt;code&gt;slice&lt;/code&gt; 는 인덱스 &lt;code&gt;0&lt;/code&gt; 에서 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="70ac2a72695a74d8e8f6b33ca1a725afc2199df0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c105983c489170e4e720a825176c1cbbe0a9eafe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1a5537e2caa6ceac829f312a0e5008c342f283b9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3ccdf435ee7864d06931191b2056c8e2ed7a8c22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bufferSource&lt;/code&gt; is not a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt;, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;bufferSource&lt;/code&gt; 는 하지 않은 것입니다 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 하는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4e89c55d2f78906b0dcf24470198719184ae2ae3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is greater than 0, sort &lt;code&gt;b&lt;/code&gt; to an index lower than &lt;code&gt;a&lt;/code&gt;, i.e. &lt;code&gt;b&lt;/code&gt; comes first.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 종류, 0보다 큰 &lt;code&gt;b&lt;/code&gt; 를 보다 낮은 인덱스에 , 즉 &lt;code&gt;b&lt;/code&gt; 먼저 다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d5d2bff07568b6c90bcc417bf4d0e753a3bcc19f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; is less than 0, sort &lt;code&gt;a&lt;/code&gt; to an index lower than &lt;code&gt;b&lt;/code&gt;, i.e. &lt;code&gt;a&lt;/code&gt; comes first.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 종류 0보다 작은입니다 보다 낮은 인덱스에 &lt;code&gt;b&lt;/code&gt; , 즉 먼저 다. &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="223405fddc558bc5f7143526ce03de9f76e4808f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns 0, leave &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behavior, thus, not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0을 반환 떠나 와 &lt;code&gt;b&lt;/code&gt; 를 서로에 대해 변경을하지만, 모든 다른 요소에 대한 분류. 참고 : ECMAscript 표준은이 동작을 보장하지 않으므로 모든 브라우저 (예 : 최소 2003 년으로 거슬러 올라가는 Mozilla 버전)가이를 존중하지는 않습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa305bceeb386390b56ee72977e5735d91c97853" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns 0, leave &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 0을 반환 떠나 와 &lt;code&gt;b&lt;/code&gt; 를 서로에 대해 변경을하지만, 모든 다른 요소에 대한 분류. 참고 : ECMAscript 표준은 이러한 동작을 보증하지 않으므로 모든 브라우저 (예 : 2003 년 이전의 Mozilla 버전)가이를 존중하지는 않습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0225b42f9d41db4959457c9bc952359283745d0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns greater than 0, sort &lt;code&gt;b&lt;/code&gt; to an index lower than &lt;code&gt;a&lt;/code&gt; (i.e. &lt;code&gt;b&lt;/code&gt; comes first).</source>
          <target state="translated">경우 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 종류, 0보다 큰 반환 &lt;code&gt;b&lt;/code&gt; 를 보다 낮은 인덱스에 (즉, &lt;code&gt;b&lt;/code&gt; 먼저). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="517740eb24e4a25aeecf7184e1a227c9c3fcbfed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction(a, b)&lt;/code&gt; returns less than 0, sort &lt;code&gt;a&lt;/code&gt; to an index lower than &lt;code&gt;b&lt;/code&gt; (i.e. &lt;code&gt;a&lt;/code&gt; comes first).</source>
          <target state="translated">만약 &lt;code&gt;compareFunction(a, b)&lt;/code&gt; 이하 0이 아닌 반환, 일종의 인덱스보다 낮은에 &lt;code&gt;b&lt;/code&gt; (즉, &lt;code&gt;a&lt;/code&gt; 먼저). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed385a756462543affcbb15ce05a2a5778a35f22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is not supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, &quot;Banana&quot; comes before &quot;cherry&quot;. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, &quot;80&quot; comes before &quot;9&quot; in Unicode order. All &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction&lt;/code&gt; 공급되지 않고, 모든 비 &lt;code&gt;undefined&lt;/code&gt; 배열 요소들은 UTF-16 코드 유닛 위하여 문자열을 문자열로 변환과 비교하여 정렬된다. 예를 들어 &quot;Banana&quot;는 &quot;cherry&quot;앞에옵니다. 숫자 정렬에서 9는 80보다 먼저 나오지만 숫자는 문자열로 변환되므로 &quot;80&quot;은 유니 코드 순서로 &quot;9&quot;보다 먼저 나타납니다. &lt;code&gt;undefined&lt;/code&gt; 모든 요소는 배열 끝에 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="b76b7a0aeafaa087aee6bc8d316aa1cc0301c1a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is not supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, &quot;banana&quot; comes before &quot;cherry&quot;. In a numeric sort, 9 comes before 80, but because numbers are converted to strings, &quot;80&quot; comes before &quot;9&quot; in the Unicode order. All &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array.</source>
          <target state="translated">경우 &lt;code&gt;compareFunction&lt;/code&gt; 공급되지 않고, 모든 비 &lt;code&gt;undefined&lt;/code&gt; 배열 요소들은 UTF-16 코드 유닛 위하여 문자열을 문자열로 변환과 비교하여 정렬된다. 예를 들어, &quot;banana&quot;는 &quot;cherry&quot;앞에옵니다. 숫자 정렬에서 9는 80 앞에옵니다. 그러나 숫자는 문자열로 변환되기 때문에 &quot;80&quot;은 유니 코드 순서에서 &quot;9&quot;앞에옵니다. &lt;code&gt;undefined&lt;/code&gt; 모든 요소는 배열의 끝으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="2d2c5c13a8881bbff4667bdffbd6ad348b6e379a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compareFunction&lt;/code&gt; is supplied, all non-&lt;code&gt;undefined&lt;/code&gt; array elements are sorted according to the return value of the compare function (all &lt;code&gt;undefined&lt;/code&gt; elements are sorted to the end of the array, with no call to &lt;code&gt;compareFunction&lt;/code&gt;). If &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are two elements being compared, then:</source>
          <target state="translated">경우 &lt;code&gt;compareFunction&lt;/code&gt; 공급되고, 모든 비 &lt;code&gt;undefined&lt;/code&gt; 배열 요소가 비교 함수의 리턴 값에 따라 분류된다 (모든 &lt;code&gt;undefined&lt;/code&gt; 요소없이 호출 어레이의 끝에 정렬 &lt;code&gt;compareFunction&lt;/code&gt; ). 경우 및 &lt;code&gt;b&lt;/code&gt; 두 개의 요소는, 비교되는 : &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="130adca0f52b183426249a215e0d0abe632aa26e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;condition&lt;/code&gt; can be converted to &lt;code&gt;true&lt;/code&gt; (it is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;), the operator returns the value of &lt;code&gt;exprT&lt;/code&gt;; otherwise (when &lt;code&gt;condition&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;) it returns the value of &lt;code&gt;exprF&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;condition&lt;/code&gt; 으로 변환 될 수있는 &lt;code&gt;true&lt;/code&gt; (그것이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; ), 작업자의 반환 값 &lt;code&gt;exprT&lt;/code&gt; 을 ; 그렇지 않으면 ( &lt;code&gt;condition&lt;/code&gt; 이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;거짓 인 경우&lt;/a&gt; ) &lt;code&gt;exprF&lt;/code&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="81390427ea93c90575169e03eabf59e8dba53feb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;continue&lt;/code&gt; had a label of &lt;code&gt;checkiandj&lt;/code&gt;, the program would continue at the top of the &lt;code&gt;checkiandj&lt;/code&gt; statement.</source>
          <target state="translated">경우 &lt;code&gt;continue&lt;/code&gt; 의 레이블했다 &lt;code&gt;checkiandj&lt;/code&gt; 을 , 프로그램은 상단에 계속 &lt;code&gt;checkiandj&lt;/code&gt; 의 문.</target>
        </trans-unit>
        <trans-unit id="0669233d4672aaeccf93a7f396024d752c9f52d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;deleteCount&lt;/code&gt; is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).</source>
          <target state="translated">경우 &lt;code&gt;deleteCount&lt;/code&gt; 에가 0 또는 음수 어떠한 요소는 제거되지 않는다. 이 경우 하나 이상의 새 요소를 지정해야합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="4c76efae73e4cb264a24f14a2cd58259099138f9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;deleteCount&lt;/code&gt; is omitted, or if its value is larger than &lt;code&gt;array.length - start&lt;/code&gt; (that is, if it is greater than the number of elements left in the array, starting at &lt;code&gt;start&lt;/code&gt;), then all of the elements from &lt;code&gt;start&lt;/code&gt; through the end of the array will be deleted.</source>
          <target state="translated">경우 &lt;code&gt;deleteCount&lt;/code&gt; 에가 생략 값보다 큰 경우, 또는 &lt;code&gt;array.length - start&lt;/code&gt; (그것이 시작되는 배열에 남아 소자의 수보다 큰 경우이며, 그 &lt;code&gt;start&lt;/code&gt; 모두의 요소의 다음) &lt;code&gt;start&lt;/code&gt; 끝까지 배열 중 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="70a2b4d9d3b36ae4510ef7245f5f535ff3ce5084" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;digits&lt;/code&gt; is too small or too large. Values between 0 and 100, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as chosen.</source>
          <target state="translated">경우 &lt;code&gt;digits&lt;/code&gt; 가 너무 작거나 너무 큽니다. 0에서 100 사이의 값은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 발생시키지 않습니다 . 구현시 선택한대로 더 크고 작은 값을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4580b6fff4be8bc33c435f043a3c4fea2f3c3e85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is greater than the length of the sequence, &lt;code&gt;slice&lt;/code&gt; extracts through to the end of the sequence (&lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 시퀀스의 길이보다 더 큰 &lt;code&gt;slice&lt;/code&gt; 서열 (의 끝까지 추출 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f53aeed879b131ebf52a47532e5ca0f2980fae0c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is negative, it is treated as &lt;code&gt;array.length + end&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 부의 경우, 그것은로 취급 &lt;code&gt;array.length + end&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="622cb32152550c51b1ec138f2a6a7f8d94aa6205" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy until the end (default to &lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;copyWithin&lt;/code&gt; 는 말 (기본적 때까지 복사합니다 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="732b6a679d4cc00072a8041a727498042ab37315" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy until the last index (default to &lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;copyWithin&lt;/code&gt; 는 마지막 인덱스 (기본적 때까지 복사합니다 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b66c532602a6b4b7f541db03b69a714e5a2b76a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;arr.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;arr.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8a30a0de12206cc82d1d8300d6d97b1aabb83b4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;sab.byteLength&lt;/code&gt;)&lt;code&gt;.&lt;/code&gt;</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;sab.byteLength&lt;/code&gt; ) &lt;code&gt;.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8d10f38ed7b5214cddef84203097e400579f986" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;end&lt;/code&gt; is omitted, &lt;code&gt;slice&lt;/code&gt; extracts through the end of the sequence (&lt;code&gt;typedarray.length&lt;/code&gt;).</source>
          <target state="translated">경우 &lt;code&gt;end&lt;/code&gt; 생략 &lt;code&gt;slice&lt;/code&gt; 시퀀스 (말까지 추출물 &lt;code&gt;typedarray.length&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8d21f59d081b9187253e8d053e0e5fcd55d4d566" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; can be converted to &lt;code&gt;true&lt;/code&gt;, returns &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt;; else, returns &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; 로 변환 할 수있는 &lt;code&gt;true&lt;/code&gt; , 반환 &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; ; 그렇지 않으면 &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="35d9abc0608d0e3ea3f9c0446a5ba23235d15644" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; can be converted to &lt;code&gt;true&lt;/code&gt;, returns &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt;; else, returns &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; 로 변환 할 수있는 &lt;code&gt;true&lt;/code&gt; , 반환 &lt;code&gt;expr&lt;strong&gt;2&lt;/strong&gt;&lt;/code&gt; ; 그렇지 않으면 &lt;code&gt;expr&lt;strong&gt;1&lt;/strong&gt;&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f24f8d2a77b27c491ed6280ed52670147ab0b196" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fractionDigits&lt;/code&gt; is too small or too large. Values between 0 and 20, inclusive, will not cause a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;. Implementations are allowed to support larger and smaller values as well.</source>
          <target state="translated">경우 &lt;code&gt;fractionDigits&lt;/code&gt; 너무 작거나 너무 큽니다. 0에서 20 사이의 값은 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; 를&lt;/a&gt; 발생시키지 않습니다 . 구현은 더 크고 작은 값도 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3a08523a482bf8b3d61cb286205ca75f1674f55" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fromIndex&lt;/code&gt; is greater than or equal to the length of the array, &lt;code&gt;false&lt;/code&gt; is returned. The array will not be searched.</source>
          <target state="translated">경우 &lt;code&gt;fromIndex&lt;/code&gt; 의 경우 보다 크거나 어레이의 길이와 동일한 경우, &lt;code&gt;false&lt;/code&gt; 반환된다. 배열은 검색되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5df6396fcd29ff991a9e14ea494b1556385ed2d5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fromIndex&lt;/code&gt; is negative, the computed index is calculated to be used as a position in the array at which to begin searching for &lt;code&gt;searchElement&lt;/code&gt;. If the computed index is less or equal than &lt;code&gt;-1 * array.length&lt;/code&gt;, the entire array will be searched.</source>
          <target state="translated">경우 &lt;code&gt;fromIndex&lt;/code&gt; 의 경우 제외하고, 계산 된 인덱스 검색을 시작하는 상기 어레이 내의 위치로서 사용되는 계산 &lt;code&gt;searchElement&lt;/code&gt; . 계산 된 인덱스가 &lt;code&gt;-1 * array.length&lt;/code&gt; 보다 작거나 같은 경우 전체 배열이 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="0c13c1e9ad0c6b9a449ebb75ebc92f5c906c3f07" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;g&lt;/code&gt; is absent, this will always be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;g&lt;/code&gt; 이 결석이 항상있을 것입니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c6c46a41fb76b9e0e681e95a66aa79b8f042960" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;&quot;number&quot;&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; first tries to call &lt;code&gt;valueOf&lt;/code&gt;, and if that fails, it calls &lt;code&gt;toString&lt;/code&gt;.</source>
          <target state="translated">경우에 &lt;code&gt;hint&lt;/code&gt; 있다 &lt;code&gt;&quot;number&quot;&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 첫 번째 시도는 호출 &lt;code&gt;valueOf&lt;/code&gt; 하고, 실패 할 경우, 그것은 호출 &lt;code&gt;toString&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="df85462510e04f2f839a7631bf941f80c7953f6c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;&quot;string&quot;&lt;/code&gt; or &lt;code&gt;&quot;default&quot;&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; tries to call the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;toString&lt;/code&gt; property does not exist, it tries to call the &lt;a href=&quot;../object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method and if the &lt;code&gt;valueOf&lt;/code&gt; does not exist either, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우에 &lt;code&gt;hint&lt;/code&gt; 있다 &lt;code&gt;&quot;string&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;default&quot;&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 시도는 호출 &lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt; 방법. 는 IF &lt;code&gt;toString&lt;/code&gt; 속성이 존재하지 않습니다, 그것은 호출하려고 &lt;a href=&quot;../object/valueof&quot;&gt; &lt;code&gt;valueOf&lt;/code&gt; &lt;/a&gt; 방법과 경우 &lt;code&gt;valueOf&lt;/code&gt; 가 존재하지 않습니다 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 발생 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c761509807341dc52703b81421a4a131e809acc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hint&lt;/code&gt; is &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; first tries to call &lt;code&gt;valueOf&lt;/code&gt;, and if that fails, it calls &lt;code&gt;toString&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;hint&lt;/code&gt; 입니다 &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 첫 번째 시도는 호출 &lt;code&gt;valueOf&lt;/code&gt; 하고, 실패 할 경우, 그것은 호출 &lt;code&gt;toString&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="2b21616d26fe4a78293d088842e2969994ff5f28" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;indexEnd&lt;/code&gt; is omitted, &lt;code&gt;substring()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;indexEnd&lt;/code&gt; 이 생략 &lt;code&gt;substring()&lt;/code&gt; 문자열의 끝에 문자를 추출합니다.</target>
        </trans-unit>
        <trans-unit id="11187126c129f39c22041af784cef8d066d040df" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;indexStart&lt;/code&gt; is greater than &lt;code&gt;indexEnd&lt;/code&gt;, then the effect of &lt;code&gt;substring()&lt;/code&gt; is as if the two arguments were swapped; See example below.</source>
          <target state="translated">경우 &lt;code&gt;indexStart&lt;/code&gt; 가 보다 큰 &lt;code&gt;indexEnd&lt;/code&gt; 다음의 효과 &lt;code&gt;substring()&lt;/code&gt; 두 인수 교환 것처럼이고; 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d95177eda65034248451a49cc0f1e66632749edd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to or less than the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting from &lt;code&gt;lastIndex&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 행 이하 문자열의 길이보다 같으며 정규식 빈 문자열과 일치하는 경우, 정규 표현부터 입력 일치 &lt;code&gt;lastIndex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b33670f984535e0b59f902eaf191c404eb48715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and &lt;code&gt;lastIndex&lt;/code&gt; is reset to 0.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 문자열의 길이와 동일하고, 정규 표현식은 빈 문자열, 다음 정규 표현식 불일치 입력과 일치하지 않는 경우 &lt;code&gt;lastIndex&lt;/code&gt; 0으로 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="5bf25365ce1d6a9d04df754837052ef1438d40ea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at &lt;code&gt;lastIndex&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 문자열의 길이와 동일하고, 정규 표현식은 빈 문자열과 일치하는 경우, 다음 정규 표현식에 입력 시작 일치 &lt;code&gt;lastIndex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f431551312059047b6d1f0177bad8d497d6b2ecd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;lastIndex&lt;/code&gt; is greater than the length of the string, &lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; fail, then &lt;code&gt;lastIndex&lt;/code&gt; is set to 0.</source>
          <target state="translated">경우 &lt;code&gt;lastIndex&lt;/code&gt; 문자열의 길이보다 클 &lt;a href=&quot;test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 실패 후 &lt;code&gt;lastIndex&lt;/code&gt; 속성은 0으로 설정된다.</target>
        </trans-unit>
        <trans-unit id="5422b869ba1037ff1cca0689e54f83d4ea561a1e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;length&lt;/code&gt; 됩니다 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;substr()&lt;/code&gt; 문자열의 끝으로 추출 문자.</target>
        </trans-unit>
        <trans-unit id="083906d99f8ee5dd58fa1d2cf691d55abc86cda6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is a negative number, it is treated as 0.</source>
          <target state="translated">경우 &lt;code&gt;length&lt;/code&gt; 음의 수이고, 그것은 0으로 간주된다.</target>
        </trans-unit>
        <trans-unit id="e410f550731be85f946b7f2f4aed03a005c57a1c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;length&lt;/code&gt; is omitted, &lt;code&gt;substr()&lt;/code&gt; extracts characters to the end of the string.</source>
          <target state="translated">경우 &lt;code&gt;length&lt;/code&gt; 생략 &lt;code&gt;substr()&lt;/code&gt; 문자열의 끝으로 추출 문자.</target>
        </trans-unit>
        <trans-unit id="4cc430c3c8ccf77b6186468cad0a93d2a7e19225" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;maximum&lt;/code&gt; is specified and is smaller than &lt;code&gt;initial&lt;/code&gt;, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;maximum&lt;/code&gt; 지정보다 작은되는 &lt;code&gt;initial&lt;/code&gt; 하는 &lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a34d5712abc36aaa2eaef3f633100f03db354c27" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;maximum&lt;/code&gt; is specified and is smaller than &lt;code&gt;initial&lt;/code&gt;, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;maximum&lt;/code&gt; 지정보다 작은되는 &lt;code&gt;initial&lt;/code&gt; 하는 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="601972a8fa25f9b39b82c8fefe704d9ac430e5cf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;memoryDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;memoryDescriptor&lt;/code&gt; 이 개체 형식 아니다하는 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c0f0bc257bf3b949201321dcae7fcebf0bb14339" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;memoryDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;memoryDescriptor&lt;/code&gt; 가 객체 유형이 아닌 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="73a182f41773189b8cfdf256c034f5a1d80c29e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;module&lt;/code&gt; is not a &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object instance, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 이 &lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; 객체 인스턴스 가 아닌 경우 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="58c26c2f532124c97bb04e627c6da47861a4662f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;numeric:auto&lt;/code&gt; option is passed, it will produce the string &lt;code&gt;yesterday&lt;/code&gt; or &lt;code&gt;tomorrow&lt;/code&gt; instead of &lt;code&gt;1 day ago&lt;/code&gt; or &lt;code&gt;in 1 day&lt;/code&gt;. This allows to not always have to use numeric values in the output.</source>
          <target state="translated">경우 &lt;code&gt;numeric:auto&lt;/code&gt; 옵션이 전달됩니다, 그것은 문자열을 생성합니다 &lt;code&gt;yesterday&lt;/code&gt; 나 &lt;code&gt;tomorrow&lt;/code&gt; 대신 &lt;code&gt;1 day ago&lt;/code&gt; 또는 &lt;code&gt;in 1 day&lt;/code&gt; . 따라서 출력에서 ​​항상 숫자 값을 사용할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="ae5c7ddce76e5aae957eb4fa1138ed2f02a10861" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;onFulfilled&lt;/code&gt; returns a promise, the return value of &lt;code&gt;then&lt;/code&gt; will be resolved/rejected by the promise.</source>
          <target state="translated">경우 &lt;code&gt;onFulfilled&lt;/code&gt; 이 약속을 반환의 반환 값 &lt;code&gt;then&lt;/code&gt; / 해결 약속에 의해 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="2f2728a4f70add9e2f77317adda6b2ef26418eaa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseFloat&lt;/code&gt; encounters a character other than a plus sign (&lt;code&gt;+&lt;/code&gt;), minus sign (&lt;code&gt;-&lt;/code&gt; U+002D HYPHEN-MINUS), numeral (&lt;code&gt;0&lt;/code&gt;&amp;ndash;&lt;code&gt;9&lt;/code&gt;), decimal point (&lt;code&gt;.&lt;/code&gt;), or exponent (&lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;), it returns the value up to that character, ignoring the invalid character and characters following it.</source>
          <target state="translated">경우 &lt;code&gt;parseFloat&lt;/code&gt; A A 더하기 기호 (이외의 문자가 발생 &lt;code&gt;+&lt;/code&gt; (), 빼기 기호 &lt;code&gt;-&lt;/code&gt; U + 002D 하이픈-MINUS), 숫자 ( &lt;code&gt;0&lt;/code&gt; - &lt;code&gt;9&lt;/code&gt; ) (소수점 &lt;code&gt;.&lt;/code&gt; ), 또는 지수를 ( &lt;code&gt;e&lt;/code&gt; 또는 &lt;code&gt;E&lt;/code&gt; 를 ), 그것은을 반환 유효하지 않은 문자와 그 뒤에 오는 문자를 무시하고 해당 문자까지 값</target>
        </trans-unit>
        <trans-unit id="83728eb0d2a9e584dc04b1ee5d31294530473376" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseInt&lt;/code&gt; encounters a character that is not a numeral in the specified &lt;code&gt;radix&lt;/code&gt;, it ignores it and all succeeding characters and returns the integer value parsed up to that point. &lt;code&gt;parseInt&lt;/code&gt; truncates numbers to integer values. Leading and trailing spaces are allowed.</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; 가 지정된 &lt;code&gt;radix&lt;/code&gt; 의 숫자가 아닌 문자를 만나는 경우 , 그것을 무시하고 계속되는 모든 문자와 반환 정수 값은 그 시점까지 분석. &lt;code&gt;parseInt&lt;/code&gt; 는 숫자를 정수 값으로 자릅니다. 선행 및 후행 공백이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="8ead9333b62110d8b1b732ad127cf111fdc2eaf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;parseInt&lt;/code&gt; encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. &lt;code&gt;parseInt&lt;/code&gt; truncates numbers to integer values. Leading and trailing spaces are allowed.</source>
          <target state="translated">경우 &lt;code&gt;parseInt&lt;/code&gt; 지정된 기수 숫자가 아닌 문자를 만나면, 그것을 무시하고 계속되는 모든 문자와 반환 정수 값은 그 시점까지 분석. &lt;code&gt;parseInt&lt;/code&gt; 는 숫자를 정수 값으로 자릅니다. 선행 및 후행 공백이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="5ffbeddf0bcd7aec9bc1eee89d991e6401f78d4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;precision&lt;/code&gt; is not between 1 and 100 (inclusive), a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.</source>
          <target state="translated">경우 &lt;code&gt;precision&lt;/code&gt; 1과 100 (포함) 사이에하지하는 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생합니다. 구현은 더 크고 작은 값도 지원할 수 있습니다. ECMA-262는 최대 21 자리의 정밀도 만 요구합니다.</target>
        </trans-unit>
        <trans-unit id="46150c365467758d22f0868ddafd9b7825000fcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;precision&lt;/code&gt; is not between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; (inclusive), a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.</source>
          <target state="translated">경우 &lt;code&gt;precision&lt;/code&gt; 사이 아닌 &lt;code&gt;1&lt;/code&gt; 및 &lt;code&gt;100&lt;/code&gt; (포함)하는 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생합니다. 구현은 더 크고 작은 값도 지원할 수 있습니다. ECMA-262는 최대 21 개의 유효 숫자의 정밀도 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9a5460969a95744dffb5bbddf36d4bfb1069be0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;proto&lt;/code&gt; is neither of these a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;proto&lt;/code&gt; 가 이들 중 어느 것도 아닌 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="33c87e445a7edd2b640f50dae6ac2b0133882f41" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;replacer&lt;/code&gt; is an array, the array's values indicate the names of the properties in the object that should be included in the resulting JSON string.</source>
          <target state="translated">경우 &lt;code&gt;replacer&lt;/code&gt; 배열이며, 배열의 값은 결과 JSON 문자열에 포함되어야하는 객체의 속성의 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3c3a227a6da9d264dbe28f5f791a62dedb0625b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;return(&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; is called on a generator that is already in &quot;completed&quot; state, the generator will remain in &quot;completed&quot; state.</source>
          <target state="translated">경우 &lt;code&gt;return(&lt;var&gt;value&lt;/var&gt;)&lt;/code&gt; &quot;완료&quot;상태에 이미 발전기에서 호출, 발전기가 &quot;완료&quot;상태를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="87bf4b6e3dc943f062b1864ad40de7d0964087f1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;return(value)&lt;/code&gt; is called on a generator that is already in &quot;completed&quot; state, the generator will remain in &quot;completed&quot; state. If no argument is provided, the return object is the same as if &lt;code&gt;.next()&lt;/code&gt;. If an argument is provided, it will be set to the value of the &lt;code&gt;value&lt;/code&gt; property of the returned object.</source>
          <target state="translated">경우 &lt;code&gt;return(value)&lt;/code&gt; &quot;완료&quot;상태에 이미 발전기에서 호출, 발전기가 &quot;완료&quot;상태를 유지합니다. 인수가 제공되지 않으면 반환 객체는 if &lt;code&gt;.next()&lt;/code&gt; . 인수가 제공되면 , 리턴 된 오브젝트 의 &lt;code&gt;value&lt;/code&gt; 특성 값으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="cc1bfe2351b82485683c733bf222344eda1527d5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;separator&lt;/code&gt; is a regular expression that contains capturing parentheses &lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;, matched results are included in the array.</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt; 가 캡처 괄호 &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; 를 포함하는 정규식 인 경우 일치하는 결과가 배열에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d1eff576ddb621e4680b204ed4d5b41859eeef85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;separator&lt;/code&gt; is a regular expression that contains capturing parentheses, then each time &lt;code&gt;separator&lt;/code&gt; is matched, the results (including any undefined results) of the capturing parentheses are spliced into the output array.</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt; 가 캡처 괄호를 포함하는 정규식 인 경우 , &lt;code&gt;separator&lt;/code&gt; 가 일치 할 때마다 캡처 괄호 의 결과 (정의되지 않은 결과 포함)가 출력 배열에 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="58a1c53b01b40592a9c84549b9f166da18ea38eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is a negative number, the index starts counting from the end of the string. Its value is capped at &lt;code&gt;-str.length&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;start&lt;/code&gt; 음의 번호입니다, 인덱스가 문자열의 끝에서 계산을 시작합니다. 값은 &lt;code&gt;-str.length&lt;/code&gt; 로 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="c54578109a534f15d42b5a741a3d3d14d8a65f39" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is a positive number, the index starts counting at the start of the string. Its value is capped at &lt;code&gt;str.length&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;start&lt;/code&gt; 양수이며, 인덱스는 문자열의 시작에서 계산을 시작합니다. 그 값은 &lt;code&gt;str.length&lt;/code&gt; 에 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="ca01d0a0b0471740d571f8985792b98bb6955453" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is negative, it is treated as &lt;code&gt;array.length + start&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;start&lt;/code&gt; 부정적으로, 그것은 처리 &lt;code&gt;array.length + start&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a731fd434daa5cb19e9e29afc38306b20ebfb1ef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is negative, it is treated as &lt;code&gt;length+start&lt;/code&gt; where &lt;code&gt;length&lt;/code&gt; is the length of the array. If &lt;code&gt;end&lt;/code&gt; is negative, it is treated as &lt;code&gt;length+end&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;start&lt;/code&gt; 제외하고,이를 취급된다 &lt;code&gt;length+start&lt;/code&gt; 여기서 &lt;code&gt;length&lt;/code&gt; 배열의 길이이다. 경우 &lt;code&gt;end&lt;/code&gt; 부의 경우, 그것은로 취급 &lt;code&gt;length+end&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4de0599f1ce5809ec70b824f6abdd7e50e9e2834" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;start&lt;/code&gt; 생략 &lt;code&gt;copyWithin&lt;/code&gt; 인덱스 복사됩니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ebf5416996cbb15b5dc86c882e373b81b313cbcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; is omitted, &lt;code&gt;copyWithin&lt;/code&gt; will copy from the start (defaults to 0).</source>
          <target state="translated">경우 &lt;code&gt;start&lt;/code&gt; 생략 &lt;code&gt;copyWithin&lt;/code&gt; 는 처음부터 (0 기본값)를 복사합니다.</target>
        </trans-unit>
        <trans-unit id="78f1054bd85abad9229ac7aa8446546688aa2e3a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;tableDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;tableDescriptor&lt;/code&gt; 가 객체 유형이 아닌 경우 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="779eb5bbe71bf9f737544ad79ab2ebdb40b507a1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;tableDescriptor&lt;/code&gt; is not of type object, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;tableDescriptor&lt;/code&gt; 가 object 유형이 아닌 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e03af582a3944b0e649958576a4fa9f071ece201" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is at or greater than &lt;code&gt;arr.length&lt;/code&gt;, nothing will be copied. If &lt;code&gt;target&lt;/code&gt; is positioned after &lt;code&gt;start&lt;/code&gt;, the copied sequence will be trimmed to fit &lt;code&gt;arr.length&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;target&lt;/code&gt; 또는보다 큰 &lt;code&gt;arr.length&lt;/code&gt; , 아무것도 복사되지 않습니다. 경우 &lt;code&gt;target&lt;/code&gt; 뒤에 배치되는 &lt;code&gt;start&lt;/code&gt; , 복사 된 순서에 맞게 트리밍한다 &lt;code&gt;arr.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="921ceb48925cd3034432561bd64a6bf4a1ebb7c0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt; method must return the same value as &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 이 확장 가능하지 않은 경우 &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt; 메서드는 &lt;code&gt;Object.getPrototypeOf(&lt;var&gt;target&lt;/var&gt;)&lt;/code&gt; 과 동일한 값을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6a0d8e33e57948f6db6a21fc620101b71b816549" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, &lt;code&gt;Object.getPrototypeOf(proxy)&lt;/code&gt; method must return the same value as &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 을 확장 할 수없는 경우 &lt;code&gt;Object.getPrototypeOf(proxy)&lt;/code&gt; 메소드는 &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt; 과 동일한 값을 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d26238ec78eee84e2aeb55c52477788256e17a5e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; is not extensible, the &lt;code&gt;prototype&lt;/code&gt; parameter must be the same value as &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 을 확장 할 수없는 경우 &lt;code&gt;prototype&lt;/code&gt; 매개 변수는 &lt;code&gt;Object.getPrototypeOf(target)&lt;/code&gt; 과 동일한 값이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="3518942ce67ca5092859f653ed3ba773852ba0d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;theObject&lt;/code&gt; is reclaimed, your cleanup callback may be called at some point with the &lt;em&gt;held value&lt;/em&gt; you provided for it (&lt;code&gt;&quot;some value&quot;&lt;/code&gt; in the above). The held value can be any value you like: a primitive or an object, even &lt;code&gt;undefined&lt;/code&gt;. If the held value is an object, the registry keeps a &lt;em&gt;strong&lt;/em&gt; reference to it (so it can pass it to your cleanup callback later).</source>
          <target state="translated">만약 &lt;code&gt;theObject&lt;/code&gt; 가 회수 된다면 , 당신 이 제공 한 &lt;em&gt;보유 값&lt;/em&gt; ( 위에서 &lt;code&gt;&quot;some value&quot;&lt;/code&gt; ) 으로 정리 콜백이 어느 시점에서 호출 될 수 있습니다 . 보유 된 값은 기본 또는 객체, 심지어 &lt;code&gt;undefined&lt;/code&gt; 등 원하는 값이 될 수 있습니다 . 보유 된 값이 객체 인 경우 레지스트리는 이에 대한 &lt;em&gt;강력한&lt;/em&gt; 참조를 유지 합니다 (나중에 정리 콜백에 전달할 수 있음).</target>
        </trans-unit>
        <trans-unit id="984a9eed37b95f2c80689bed658a7a680c02c700" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;this&lt;/code&gt; is a mystery, please refer to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;this document&lt;/a&gt; for more information on how &lt;code&gt;this&lt;/code&gt; works. To summarize, &lt;code&gt;this&lt;/code&gt; refers to the instance. Instances are created when the &lt;code&gt;new&lt;/code&gt; keyword is invoked. Otherwise, &lt;code&gt;this&lt;/code&gt; will default to the window &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;this&lt;/code&gt; 신비를 참조하시기 바랍니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;이 문서의&lt;/a&gt; 방법에 대한 자세한 내용은 &lt;code&gt;this&lt;/code&gt; 작동합니다. 요약하면 &lt;code&gt;this&lt;/code&gt; 인스턴스를 나타냅니다. &lt;code&gt;new&lt;/code&gt; 키워드가 호출 되면 인스턴스가 생성 됩니다. 그렇지 않으면, &lt;code&gt;this&lt;/code&gt; 창을 기본값으로&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt; 범위&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c19cd77cae60ad00d362fc1024e84e33d0571105" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;three&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, nothing will happen, &lt;code&gt;four&lt;/code&gt; does not matter, and also the &lt;code&gt;launchRocket()&lt;/code&gt; function in the &lt;code&gt;else&lt;/code&gt; case will not be executed.</source>
          <target state="translated">경우 &lt;code&gt;three&lt;/code&gt; 입니다 &lt;code&gt;true&lt;/code&gt; , 아무것도 일어날 것 &lt;code&gt;four&lt;/code&gt; 중요하지 않습니다, 또한 &lt;code&gt;launchRocket()&lt;/code&gt; 의 기능이 &lt;code&gt;else&lt;/code&gt; 경우는 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3eef6456246e4dbfc287e8737faddd2509501cbb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;toString()&lt;/code&gt; is given a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; less than &lt;code&gt;2&lt;/code&gt; or greater than &lt;code&gt;36&lt;/code&gt;, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;toString()&lt;/code&gt; 주어진되는 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 미만 &lt;code&gt;2&lt;/code&gt; 보다 크거나 &lt;code&gt;36&lt;/code&gt; 하는 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생된다.</target>
        </trans-unit>
        <trans-unit id="6c379906b5792e3372d4efc200a114b3805195e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;toString()&lt;/code&gt; is given a radix less than 2 or greater than 36, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;code&gt;toString()&lt;/code&gt; 36보다 2 이상의 기수보다 덜 부여하는 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생된다.</target>
        </trans-unit>
        <trans-unit id="40eec480888d2c94873752b1567aea7b7efd8c4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;u&lt;/code&gt; flag is also enabled, use Unicode case folding.</source>
          <target state="translated">경우 &lt;code&gt;u&lt;/code&gt; 플래그도 사용 가능, 유니 코드 케이스 폴딩을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ed0a1bf3b0563282d5e450783f1851ac37bf1a0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x&lt;/code&gt; is not a number, then it will be converted to a number first, then converted to a 32-bit unsigned integer.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 가 숫자가 아닌 경우 먼저 숫자로 변환 된 다음 부호없는 32 비트 정수로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="bac40477e650e00204753fc97988ad91cec502d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;yearValue&lt;/code&gt; is a number between 0 and 99 (inclusive), then the year for &lt;code&gt;dateObj&lt;/code&gt; is set to &lt;code&gt;1900 + yearValue&lt;/code&gt;. Otherwise, the year for &lt;code&gt;dateObj&lt;/code&gt; is set to &lt;code&gt;yearValue&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;yearValue&lt;/code&gt; 는 0과 99 (포함) 사이의 번호는 다음을위한 연도 &lt;code&gt;dateObj&lt;/code&gt; 가 설정되어 &lt;code&gt;1900 + yearValue&lt;/code&gt; . 그렇지 않으면, 대한 올해 &lt;code&gt;dateObj&lt;/code&gt; 이 설정되어 &lt;code&gt;yearValue&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e2747de4d9fc8c30f2b40be49e35fdbf847eb82f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;index&lt;/em&gt; is greater than or equal to &lt;a href=&quot;length&quot;&gt;&lt;code&gt;Table.prototype.length&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;em&gt;지수&lt;/em&gt; 보다 크거나 같다 &lt;a href=&quot;length&quot;&gt; &lt;code&gt;Table.prototype.length&lt;/code&gt; &lt;/a&gt; 하는 &lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3c1e63156a59a69e643e2a9b0e2e65948c77850e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;value&lt;/em&gt; is not an exported WebAssembly function or &lt;code&gt;&lt;a href=&quot;../../null&quot;&gt;null&lt;/a&gt;&lt;/code&gt;, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">경우 &lt;em&gt;값이&lt;/em&gt; 내 보낸 WebAssembly 기능인지 아닌지 &lt;code&gt;&lt;a href=&quot;../../null&quot;&gt;null&lt;/a&gt;&lt;/code&gt; 하는 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d1f4c5491a947837a75b2577ec9165501da34cd8" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;radix&lt;/var&gt; is &lt;code&gt;undefined&lt;/code&gt; or 0 (or absent), JavaScript assumes the following:</source>
          <target state="translated">만약 &lt;var&gt;radix&lt;/var&gt; 되어 &lt;code&gt;undefined&lt;/code&gt; 또는 0 (결석)이, 자바 스크립트는 다음을 가정합니다 :</target>
        </trans-unit>
        <trans-unit id="bed881bbe4332a3924a8e5000bd3b3ce26c729d3" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; is used a function name and the symbol has a description, the method's name is the description in square brackets.</source>
          <target state="translated">경우 &lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; 함수 이름을 사용하고, 기호는 설명이 메서드의 이름은 대괄호의 설명이다.</target>
        </trans-unit>
        <trans-unit id="6c5ecf5b73187ab3241c34814c90ceb806d68640" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; is specified, the value computed by parsing is &lt;em&gt;transformed&lt;/em&gt; before being returned. Specifically, the computed value and all its properties (beginning with the most nested properties and proceeding to the original value itself) are individually run through the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt;. Then it is called, with the object containing the property being processed as &lt;code&gt;this&lt;/code&gt;, and with the property name as a string, and the property value as arguments. If the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; function returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (or returns no value, for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 지정되어, 해석에 의해 계산되는 값은 &lt;em&gt;변환 된&lt;/em&gt; 리턴 전에. 특히, 계산 된 값과 모든 속성 (가장 중첩 된 속성으로 시작하여 원래 값 자체로 진행)은 개별적으로 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 를 통해 실행됩니다 . 그런 다음 속성을 포함하는 객체를 &lt;code&gt;this&lt;/code&gt; 로 처리 하고 속성 이름을 문자열로, 속성 값을 인수로 사용하여 호출됩니다. 경우] &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 기능을 리턴 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; (실행 기능의 단부 떨어지면 또는 리턴 값 없음, 예를 들면,), 속성은 개체로부터 삭제된다. 그렇지 않으면 속성이 반환 값으로 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="c53eaa65f5d849d2ba7af580ec11f6071fb51361" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is passed to &lt;code&gt;findIndex()&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; inside each invocation of the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 파라미터가 전달 &lt;code&gt;findIndex()&lt;/code&gt; , 그것은로 사용될 &lt;code&gt;this&lt;/code&gt; 의 내부에 각 호출 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; . 제공되지 않은 경우&lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4b3191155df0440c882d493d118c3dac1f4c66d1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 매개 변수에 제공되는 &lt;code&gt;every&lt;/code&gt; , 그것은 콜백의로 사용됩니다 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5f498864454499bf2fa726743bb2df845d90f352" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 파라미터가 제공되는 &lt;code&gt;filter&lt;/code&gt; , 그것의 콜백으로 사용될 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d22cacfb6b4ad93d1afb332b58bc2b8b9e92dbe4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;find&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; value inside each invocation of the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 의 파라미터가 제공된다 &lt;code&gt;find&lt;/code&gt; , 그것은로 사용될 &lt;code&gt;this&lt;/code&gt; 의 내부 값 각 호출 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; . 제공되지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="09097dc35d89b7d28dbca20d40abc8970c3cab00" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 파라미터가 제공된다 &lt;code&gt;forEach()&lt;/code&gt; ,이를 전달 될 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 그것으로 사용하기 위해 호출 될 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="76ab4918e0c8bd05f962be5b62c98b05000b19de" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 파라미터가 제공된다 &lt;code&gt;forEach()&lt;/code&gt; , 그것의 콜백으로 사용될 &lt;code&gt;this&lt;/code&gt; 값. &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 에 의해 최종적으로 관측 값 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8ead08dc3ec7c47ac1db79cebb6c9921620ff42a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 매개 변수로 제공 &lt;code&gt;forEach&lt;/code&gt; , 전달됩니다 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 의로 사용하기 위해, 호출 할 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aa8f21a8595a09932fdcda7eaee1666d3af2bf6a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;map()&lt;/code&gt;, it will be passed to &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 매개 변수가 제공됩니다 &lt;code&gt;map()&lt;/code&gt; , 그것은 전달됩니다 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; 호출 할 때 그와 같은 사용을 위해, &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; 은 에 따라 결정되는 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0ad3e1dc3914885dba756cd8beedafc58dbd95b7" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter is provided to &lt;code&gt;some()&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 파라미터에 제공되는 &lt;code&gt;some()&lt;/code&gt; , 그것의 콜백으로 사용될 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2836faa89237b75d06562d178e0d8e7b62b20e4a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Promise&lt;/code&gt; is passed to an &lt;code&gt;await&lt;/code&gt; expression, it waits for the &lt;code&gt;Promise&lt;/code&gt; to be fulfilled and returns the fulfilled value.</source>
          <target state="translated">경우 &lt;code&gt;Promise&lt;/code&gt; 에 전달 &lt;code&gt;await&lt;/code&gt; 를 표현식에 대한, 그것은 기다립니다 &lt;code&gt;Promise&lt;/code&gt; 성취와 성취 값을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f0cd65c256b789ded1c56afc95a831c106e6d12" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;reviver&lt;/code&gt; is specified, the value computed by parsing is &lt;em&gt;transformed&lt;/em&gt; before being returned. Specifically, the computed value and all its properties (beginning with the most nested properties and proceeding to the original value itself) are individually run through the &lt;code&gt;reviver&lt;/code&gt;. Then it is called, with the object containing the property being processed as &lt;code&gt;this&lt;/code&gt;, and with the property name as a string, and the property value as arguments. If the &lt;code&gt;reviver&lt;/code&gt; function returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (or returns no value, for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value.</source>
          <target state="translated">경우 &lt;code&gt;reviver&lt;/code&gt; 지정되어, 해석에 의해 계산되는 값은 &lt;em&gt;변환 된&lt;/em&gt; 리턴 전에. 특히 계산 된 값과 모든 속성 (가장 중첩 된 속성으로 시작하여 원래 값 자체로 진행)은 개별적으로 &lt;code&gt;reviver&lt;/code&gt; 를 통해 실행됩니다 . 등록 정보를 포함하는 객체와 같이 처리되고 그 다음은, 호출 &lt;code&gt;this&lt;/code&gt; 한 문자열로 속성 이름과 인자와 속성 값. 경우] &lt;code&gt;reviver&lt;/code&gt; 기능을 리턴 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; (실행 기능의 단부 떨어지면 또는 리턴 값 없음, 예를 들면,), 속성은 개체로부터 삭제된다. 그렇지 않으면 속성이 반환 값이되도록 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f242b5dc288eac0b5d0ce91ad4f100013514504d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is passed to &lt;code&gt;findIndex&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; inside each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 파라미터가 전달 &lt;code&gt;findIndex&lt;/code&gt; , 그것은로 사용될 &lt;code&gt;this&lt;/code&gt; 의 내부에 각 호출 &lt;code&gt;callback&lt;/code&gt; . 제공되지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c6932692e1d4fb28b8121dffe2f3e2d0eb25fc31" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수에 제공되는 &lt;code&gt;every&lt;/code&gt; 이를 전달됩니다 &lt;code&gt;callback&lt;/code&gt; 의로 사용하기 위해, 호출 할 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c67511fcd2a06b290b63f0afdae294248024ceaa" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수에 제공되는 &lt;code&gt;every&lt;/code&gt; 이를 전달됩니다 &lt;code&gt;callback&lt;/code&gt; 의로 사용하기 위해, 호출 할 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="03473c038dbaa94c0f2f584238f87bb0a1c995c4" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;every&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수에 제공되는 &lt;code&gt;every&lt;/code&gt; , 그것은 콜백의로 사용됩니다 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8e885503fc50fcf3433a76da451d3a39bdb27787" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 파라미터가 제공되는 &lt;code&gt;filter&lt;/code&gt; 이를 전달 될 &lt;code&gt;callback&lt;/code&gt; 그것으로 사용하기 위해 호출 될 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="74757f9a027a1bd668415335ce369872b5c572ad" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;filter&lt;/code&gt;, it will be used as the callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 파라미터가 제공되는 &lt;code&gt;filter&lt;/code&gt; , 그것의 콜백으로 사용될 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf9143a7a8700db09906f59debf6818c19eb9dde" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;find&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 의 매개 변수가 제공됩니다 &lt;code&gt;find&lt;/code&gt; , 그것은으로 사용되는 &lt;code&gt;this&lt;/code&gt; 의 각 호출에 대한 &lt;code&gt;callback&lt;/code&gt; . 제공되지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="eb1fb27d6a8d4daf130eff947e69b141ae7f6214" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;findIndex&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; for each invocation of the &lt;code&gt;callback&lt;/code&gt;. If it is not provided, then &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 의 파라미터가 제공된다 &lt;code&gt;findIndex&lt;/code&gt; , 그것은로 사용될 &lt;code&gt;this&lt;/code&gt; 의 각각의 호출에 대한 &lt;code&gt;callback&lt;/code&gt; . 제공되지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9bf571e8c9fd950c0cba47616f69e3244e8ac908" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 파라미터가 제공된다 &lt;code&gt;forEach()&lt;/code&gt; ,이를 전달 될 &lt;code&gt;callback&lt;/code&gt; 그것으로 사용하기 위해 호출 될 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dadf3c2d4b8690337dfbe93c3a13c6ba5122a763" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 파라미터가 제공된다 &lt;code&gt;forEach()&lt;/code&gt; ,이를 전달 될 &lt;code&gt;callback&lt;/code&gt; 그것으로 사용하기 위해 호출 될 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff6f3b4478f7d568a6bd567df8cf574b18334edf" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach()&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 파라미터가 제공된다 &lt;code&gt;forEach()&lt;/code&gt; , 그것의 콜백으로 사용될 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b270f7b4f88096d2dc8decbc2a68475af4db9b54" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수로 제공 &lt;code&gt;forEach&lt;/code&gt; , 전달됩니다 &lt;code&gt;callback&lt;/code&gt; 의로 사용하기 위해, 호출 할 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e2c264894e88d2165b79806c0e46c3a7c2ac7698" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;map&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수가 제공됩니다 &lt;code&gt;map&lt;/code&gt; , 전달됩니다 &lt;code&gt;callback&lt;/code&gt; 의로 사용하기 위해, 호출 할 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="abc6187e52a5196ebde638cf0d74059344cc96a3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;map&lt;/code&gt;, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수가 제공됩니다 &lt;code&gt;map&lt;/code&gt; , 그것은 콜백의로 사용됩니다 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cfcc5144fcb480f5a9615bf35d8d640124ed689e" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some()&lt;/code&gt;, it will be used as callbacks' &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 파라미터에 제공되는 &lt;code&gt;some()&lt;/code&gt; , 그 콜백 '로서 이용 될 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c67518b6a0defe9f309867be0175b853cf5c13a8" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수로 제공되는 &lt;code&gt;some&lt;/code&gt; , 전달됩니다 &lt;code&gt;callback&lt;/code&gt; 의로 사용하기 위해, 호출 할 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9064bb0e6133b19da0f634085d617942132a380b" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;some&lt;/code&gt;, it will be passed to &lt;code&gt;callback&lt;/code&gt; when invoked, for use as its &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;code&gt;undefined&lt;/code&gt; will be passed for use as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;callback&lt;/code&gt; is determined according to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수로 제공되는 &lt;code&gt;some&lt;/code&gt; , 전달됩니다 &lt;code&gt;callback&lt;/code&gt; 의로 사용하기 위해, 호출 할 때 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;code&gt;undefined&lt;/code&gt; 값 &lt;code&gt;this&lt;/code&gt; 값으로 사용되도록 전달됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;callback&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3bda7ab606ed3004f2ea85c74dca1da94e54a790" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided, it will be used as callback's &lt;code&gt;this&lt;/code&gt; value. Otherwise, the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be used as its &lt;code&gt;this&lt;/code&gt; value. The &lt;code&gt;this&lt;/code&gt; value ultimately observable by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is determined according to &lt;a href=&quot;../../operators/this&quot;&gt;the usual rules for determining the &lt;code&gt;this&lt;/code&gt; seen by a function&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;thisArg&lt;/code&gt; 매개 변수를 제공, 그것은 콜백의로 사용됩니다 &lt;code&gt;this&lt;/code&gt; 값. 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값 &lt;code&gt;this&lt;/code&gt; 값 으로 사용됩니다 . &lt;code&gt;this&lt;/code&gt; 에 의해 궁극적으로 관측 값 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 따라 결정되어 &lt;a href=&quot;../../operators/this&quot;&gt;, 상기 결정에 대한 일반적인 규칙 &lt;code&gt;this&lt;/code&gt; 함수를 볼&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b15cc313fa96f0002ca8177237c5a6a7eaf8200b" translate="yes" xml:space="preserve">
          <source>If a browser doesn't support the &lt;code&gt;TypedArray.prototype.toString()&lt;/code&gt; method yet, JavaScript will call the &lt;code&gt;toString&lt;/code&gt; method of &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">브라우저가 &lt;code&gt;TypedArray.prototype.toString()&lt;/code&gt; 메서드를 아직 지원하지 않으면 JavaScript는 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;toString&lt;/code&gt; 메서드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="2d6530ce720bdee0f80c81e26f6ecfbd283b444c" translate="yes" xml:space="preserve">
          <source>If a descriptor has neither of &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keys, it is treated as a data descriptor. If a descriptor has both &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;writable&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; keys, an exception is thrown.</source>
          <target state="translated">디스크립터에 &lt;code&gt;value&lt;/code&gt; , &lt;code&gt;writable&lt;/code&gt; , &lt;code&gt;get&lt;/code&gt; 및 &lt;code&gt;set&lt;/code&gt; 키 가 없으면 데이터 디스크립터로 취급됩니다. 디스크립터에 &lt;code&gt;value&lt;/code&gt; 또는 &lt;code&gt;writable&lt;/code&gt; 키 와 &lt;code&gt;get&lt;/code&gt; 또는 &lt;code&gt;set&lt;/code&gt; 키 가 모두 있으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2c34c6a69dfdce3e819260be6a04cfda0fbf1dc6" translate="yes" xml:space="preserve">
          <source>If a descriptor has neither of &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keys, it is treated as a data descriptor. If a descriptor has both [&lt;code&gt;value&lt;/code&gt; or &lt;code&gt;writable&lt;/code&gt;] and [&lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt;] keys, an exception is thrown.</source>
          <target state="translated">설명자에 &lt;code&gt;value&lt;/code&gt; , &lt;code&gt;writable&lt;/code&gt; , &lt;code&gt;get&lt;/code&gt; 및 &lt;code&gt;set&lt;/code&gt; 키 가 없으면 데이터 설명 자로 처리됩니다. 설명자에 [ &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;writable&lt;/code&gt; ] 및 [ &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; ] 키가 모두있는 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8e83c8dedbe6c06d159a3f6dfaa971e14e68ad6d" translate="yes" xml:space="preserve">
          <source>If a function, this prescribes how the value originally produced by parsing is transformed, before being returned.</source>
          <target state="translated">함수 인 경우 파싱에 의해 원래 생성 된 값이 반환되기 전에 어떻게 변환되는지를 규정합니다.</target>
        </trans-unit>
        <trans-unit id="8b6c176c1bea48b791fa3c9ab49298d1b603e778" translate="yes" xml:space="preserve">
          <source>If a getter has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. &lt;code&gt;__lookupGetter__&lt;/code&gt; can be used to obtain a reference to the getter function.</source>
          <target state="translated">객체의 속성에 대해 getter가 정의 된 경우 해당 속성이 해당 함수의 반환 값을 참조하기 때문에 해당 속성을 통해 getter 함수를 참조 할 수 없습니다. &lt;code&gt;__lookupGetter__&lt;/code&gt; 를 사용하여 getter 함수에 대한 참조를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="391bf4a33b8c432c6b93a5a5e69abe068858d3be" translate="yes" xml:space="preserve">
          <source>If a negative number is provided for &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt;, the date will be set counting backwards from the last day of the previous month. -1 would result in the date being set to 1 day before the last day of the previous month.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; 에 음수가 제공 되면 이전 달의 마지막 날부터 역순으로 날짜가 설정됩니다. -1은 날짜가 이전 달의 마지막 날 1 일 전으로 설정되도록합니다.</target>
        </trans-unit>
        <trans-unit id="676a3f09e860cb1fdd6b7c64da13dd48930a4a79" translate="yes" xml:space="preserve">
          <source>If a new element is added to either array, the other array is not affected.</source>
          <target state="translated">새 요소가 각 배열에 추가되면 다른 배열은 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be4193e9e29d983836aef2375c967598b0df9279" translate="yes" xml:space="preserve">
          <source>If a new element is added to either typed array, the other typed array is not affected.</source>
          <target state="translated">유형이 지정된 배열에 새 요소가 추가되면 다른 유형이 지정된 배열에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="137c989c820760dd6f0e6247ad814de963ee17c5" translate="yes" xml:space="preserve">
          <source>If a non-&lt;code&gt;RegExp&lt;/code&gt; object &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt; is passed, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; by using &lt;code&gt;new RegExp(&lt;var&gt;obj&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; 가 아닌 객체 &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt; 가 전달되면 &lt;code&gt;new RegExp(&lt;var&gt;obj&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;obj&lt;/var&gt; )를 사용하여 암시 적으로 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="be50878ec0b2563ddd3389f7eebc5e92b8258b9c" translate="yes" xml:space="preserve">
          <source>If a non-RegExp object &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; is passed, it is implicitly converted to a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">비 RegExp 객체 &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; 가 전달되면 &lt;code&gt;new RegExp(&lt;var&gt;regexp&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;regexp&lt;/var&gt; ) 를 사용하여 암시 적으로 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="281423783d855ddb3f0a19f8508114c22a018543" translate="yes" xml:space="preserve">
          <source>If a non-strict function &lt;strong&gt;&lt;strong&gt;does &lt;/strong&gt;not&lt;/strong&gt; contain rest, default, or destructured parameters, then the values in the &lt;code&gt;arguments&lt;/code&gt; object &lt;strong&gt;do&lt;/strong&gt; change in sync with the values of the argument variables. See the code below:</source>
          <target state="translated">비 엄격한 기능이 경우 &lt;strong&gt;&lt;strong&gt;않습니다&lt;/strong&gt; 하지&lt;/strong&gt; 나머지, 기본, 또는 탈구 매개 변수를 포함, 다음의 값을 &lt;code&gt;arguments&lt;/code&gt; 반대 &lt;strong&gt;할&lt;/strong&gt; 인수 변수의 값과 동기화의 변화를. 아래 코드를 참조하십시오 :</target>
        </trans-unit>
        <trans-unit id="25fb90bb85af1ebb4d9188ee2fd33dfe9e1c2f50" translate="yes" xml:space="preserve">
          <source>If a nonempty &lt;em&gt;iterable&lt;/em&gt; is passed, and &lt;strong&gt;all&lt;/strong&gt; of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.</source>
          <target state="translated">비어 있지 않은 &lt;em&gt;iterable&lt;/em&gt; 이 전달되고 &lt;strong&gt;모든&lt;/strong&gt; promise가 이행되거나 promise가 아닌 경우이 메서드에서 반환 된 promise는 비동기 적으로 이행됩니다.</target>
        </trans-unit>
        <trans-unit id="0966c8b1283cd19fabd190331cceb4900390d4f4" translate="yes" xml:space="preserve">
          <source>If a nonempty &lt;em&gt;iterable&lt;/em&gt; is passed, and &lt;strong&gt;any&lt;/strong&gt; of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.</source>
          <target state="translated">비어 있지 않은 경우 &lt;em&gt;반복 가능한이&lt;/em&gt; 전달되고 &lt;strong&gt;어떤&lt;/strong&gt; 약속의가 충족하거나 약속하지,이 메소드에 의해 반환되는 약속은 비동기 적으로 수행 할 수있는 장점이있다.</target>
        </trans-unit>
        <trans-unit id="d069c32d6d18bca5b8bc39c5dc8fb8c3caa232ba" translate="yes" xml:space="preserve">
          <source>If a number has more digits than requested by the &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; parameter, the number is rounded to the nearest number represented by &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; digits. See the discussion of rounding in the description of the &lt;a href=&quot;tofixed&quot;&gt;&lt;code&gt;toFixed()&lt;/code&gt;&lt;/a&gt; method, which also applies to &lt;code&gt;toExponential()&lt;/code&gt;.</source>
          <target state="translated">숫자에 &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 매개 변수에서 요청한 것보다 많은 자릿수가 있으면 해당 숫자는 &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 자릿수로 표시되는 가장 가까운 숫자로 반올림됩니다 . &lt;a href=&quot;tofixed&quot;&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;/a&gt; 메서드 에 대한 설명에서 반올림에 대한 설명을 참조하십시오. 이는 &lt;code&gt;toExponential()&lt;/code&gt; 에도 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="5ea7ce40a49626eb3ae67d76fb0cb47271742b47" translate="yes" xml:space="preserve">
          <source>If a number has more digits than requested by the &lt;code&gt;fractionDigits&lt;/code&gt; parameter, the number is rounded to the nearest number represented by &lt;code&gt;fractionDigits&lt;/code&gt; digits. See the discussion of rounding in the description of the &lt;a href=&quot;tofixed&quot;&gt;&lt;code&gt;toFixed()&lt;/code&gt;&lt;/a&gt; method, which also applies to &lt;code&gt;toExponential()&lt;/code&gt;.</source>
          <target state="translated">숫자가 &lt;code&gt;fractionDigits&lt;/code&gt; 매개 변수에 의해 요청 된 것보다 많은 숫자를 갖는 경우, 숫자는 &lt;code&gt;fractionDigits&lt;/code&gt; 숫자로 표시되는 가장 가까운 숫자로 반올림됩니다 . &lt;a href=&quot;tofixed&quot;&gt; &lt;code&gt;toFixed()&lt;/code&gt; &lt;/a&gt; 메소드 에 대한 설명에서 반올림에 대한 설명을 참조하십시오. 이는 &lt;code&gt;toExponential()&lt;/code&gt; 에도 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="288361a178a4532457b48ca23e1080ecff1e23e8" translate="yes" xml:space="preserve">
          <source>If a parameter is outside of the expected range, the &lt;code&gt;UTC()&lt;/code&gt; method updates the other parameters to accommodate the value. For example, if 15 is used for month, the year will be incremented by 1 &lt;code&gt;(year + 1)&lt;/code&gt; and 3 will be used for the month.</source>
          <target state="translated">매개 변수가 예상 범위를 벗어나면 &lt;code&gt;UTC()&lt;/code&gt; 메서드는 다른 매개 변수를 업데이트하여 값을 수용합니다. 예를 들어, 월에 15를 사용하면 연도는 1 &lt;code&gt;(year + 1)&lt;/code&gt; 씩 증가 하고 3은 월에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c725aba9dc8cfc4ecef16eaeb9213edebcbb05da" translate="yes" xml:space="preserve">
          <source>If a parameter is outside of the expected range, the &lt;code&gt;UTC()&lt;/code&gt; method updates the other parameters to accommodate the value. For example, if &lt;code&gt;15&lt;/code&gt; is used for &lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt;, the year will be incremented by 1 &lt;code&gt;(&lt;var&gt;year&lt;/var&gt; + 1)&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; will be used for the month.</source>
          <target state="translated">매개 변수가 예상 범위를 벗어나면 &lt;code&gt;UTC()&lt;/code&gt; 메서드는 값을 수용하기 위해 다른 매개 변수를 업데이트합니다. 예를 들어 &lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt; &lt;code&gt;15&lt;/code&gt; 가 사용 되면 연도는 1 &lt;code&gt;(&lt;var&gt;year&lt;/var&gt; + 1)&lt;/code&gt; &lt;var&gt;year&lt;/var&gt; + 1) 및 &lt;code&gt;3&lt;/code&gt; 씩 증가합니다. 은 월에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="76e695a5051810de75d193b74766ab525b424229" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setFullYear()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 다른 매개 변수와 날짜 정보를 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; 에 15를 지정 하면 연도가 1 씩 증가합니다 ( &lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt; ) 월에는 3이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bc226135066c452e9f891ad0716eedfaf99c4f78" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;yearValue + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setFullYear()&lt;/code&gt; 는 다른 매개 변수와 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;monthValue&lt;/code&gt; 에 15를 지정 하면 연도는 1 ( &lt;code&gt;yearValue + 1&lt;/code&gt; ) 씩 증가하고 그 달에 3이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ccc6a64d169dbd4da5c7d23a80b1dd0d637ecc21" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setHours()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 업데이트하려고합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; 에 100을 사용 하면 분이 1 씩 증가합니다 ( &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ) 초에는 40이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a0bae704c8f363a3c418460072e51a073a948dc4" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setHours()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 그에 따라 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;secondsValue&lt;/code&gt; 에 100을 사용 하면 분이 1 ( &lt;code&gt;minutesValue + 1&lt;/code&gt; ) 씩 증가 하고 40이 초 동안 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="23b4dd0c538d62e6f6e8b5adb2fc8de560c3e8ba" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setMinutes()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 업데이트하려고합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; 에 100을 사용 하면 분이 1 씩 증가합니다 ( &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ) 초에는 40이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8dd78caa2b59300ea65d3ff5bde2b0076413d09a" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setMinutes()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;secondsValue&lt;/code&gt; 에 100을 사용 하면 분이 1 ( &lt;code&gt;minutesValue + 1&lt;/code&gt; ) 씩 증가 하고 40이 초 동안 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="18bd212d1a40736bf3e113a154e00179fdae9e3c" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setMonth()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 업데이트하려고합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; 에 15를 사용 하면 연도는 1 씩 증가하고 3은 월에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0cbcdc0755030f824b7ef9e0e2ebcf2e5cbc9c6f" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setMonth()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 그에 따라 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;monthValue&lt;/code&gt; 에 15를 사용 하면 연도는 1 씩 증가하고 3은 월에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ad6f7cf92def3c1f8a1915da21b1d6f52234d3f7" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setSeconds()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 업데이트하려고합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; 에 100을 사용 하면 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체에 저장된 분 은 1 씩 증가하고 40은 초에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e0c6676cd42b85e15c3ec0b0481c70d568ae9434" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setSeconds()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;secondsValue&lt;/code&gt; 에 100을 사용 하면 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체에 저장된 분이 1 씩 증가하고 40이 초 동안 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="df01689b65802985e92b006b852bab1789537c7d" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCDate()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 40 for &lt;code&gt;dayValue&lt;/code&gt;, and the month stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object is June, the day will be changed to 10 and the month will be incremented to July.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCDate()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;dayValue&lt;/code&gt; 에 40을 사용 하고 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체에 저장된 월이 6 월이면 일이 10으로 변경되고 월이 7 월로 증가합니다.</target>
        </trans-unit>
        <trans-unit id="0f6027596c322cca311a687bf3cf406e0ffc5812" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 &lt;code&gt;setUTCFullYear()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 다른 매개 변수와 날짜 정보를 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; 에 15를 지정 하면 연도가 1 씩 증가합니다 ( &lt;code&gt;&lt;var&gt;yearValue&lt;/var&gt; + 1&lt;/code&gt; ) 월에는 3이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="52dac7927320e1182e697b79ec8295155d19dc5c" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCFullYear()&lt;/code&gt; attempts to update the other parameters and the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you specify 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year is incremented by 1 (&lt;code&gt;yearValue + 1&lt;/code&gt;), and 3 is used for the month.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 &lt;code&gt;setUTCFullYear()&lt;/code&gt; 는 다른 매개 변수와 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;monthValue&lt;/code&gt; 에 15를 지정 하면 연도는 1 ( &lt;code&gt;yearValue + 1&lt;/code&gt; ) 씩 증가하고 그 달에 3이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5a55c9e4f35d76aa47c88004d1e11b285eaed954" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCHours()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; 에 100을 사용 하면 분이 1 씩 증가합니다 ( &lt;code&gt;minutesValue + 1&lt;/code&gt; ) 초에는 40이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c11c6ecd9791e9b4a84c89341e5b7e2f0989ca49" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCHours()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCHours()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;secondsValue&lt;/code&gt; 에 100을 사용 하면 분이 1 ( &lt;code&gt;minutesValue + 1&lt;/code&gt; ) 씩 증가 하고 40이 초 동안 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0be0566f667d3135990a5889ec32194ccf1a34d5" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 1100 for &lt;code&gt;&lt;var&gt;millisecondsValue&lt;/var&gt;&lt;/code&gt;, the seconds stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 100 will be used for milliseconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 업데이트하려고합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;millisecondsValue&lt;/var&gt;&lt;/code&gt; 에 1100을 사용 하면 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; 에&lt;/a&gt; 저장된 초 객체에 는 1 씩 증가하고 100은 밀리 초에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6e0fddf94acbeb7b53ae965497ce04cbb007f210" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 1100 for &lt;code&gt;millisecondsValue&lt;/code&gt;, the seconds stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 100 will be used for milliseconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;millisecondsValue&lt;/code&gt; 에 1100을 사용 하면 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체에 저장된 초가 1 씩 증가하고 100이 밀리 초 동안 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0844e22920653f7ff879d175734f8ca20542884e" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCMinutes()&lt;/code&gt; 는 그에 따라 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 업데이트하려고합니다 . 예를 들어 &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; 에 100을 사용 하면 분이 1 씩 증가합니다 ( &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt; + 1&lt;/code&gt; ) 초에는 40이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a4ab1e641e438a15929a07e53e62551090004df3" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMinutes()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes will be incremented by 1 (&lt;code&gt;minutesValue + 1&lt;/code&gt;), and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCMinutes()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;secondsValue&lt;/code&gt; 에 100을 사용 하면 분이 1 ( &lt;code&gt;minutesValue + 1&lt;/code&gt; ) 씩 증가 하고 40이 초 동안 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="77a89ca3d2dd51667af8624bdb97060e7f86c012" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCMonth()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 15 for &lt;code&gt;monthValue&lt;/code&gt;, the year will be incremented by 1, and 3 will be used for month.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCMonth()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;monthValue&lt;/code&gt; 에 15를 사용 하면 연도는 1 씩 증가하고 3은 월에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d37c5d009a9e0ab4ebd4c03c9cbe96e7a5031ea7" translate="yes" xml:space="preserve">
          <source>If a parameter you specify is outside of the expected range, &lt;code&gt;setUTCSeconds()&lt;/code&gt; attempts to update the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if you use 100 for &lt;code&gt;secondsValue&lt;/code&gt;, the minutes stored in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object will be incremented by 1, and 40 will be used for seconds.</source>
          <target state="translated">지정한 매개 변수가 예상 범위를 벗어나면 &lt;code&gt;setUTCSeconds()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 날짜 정보를 적절히 업데이트하려고 시도합니다 . 예를 들어 &lt;code&gt;secondsValue&lt;/code&gt; 에 100을 사용 하면 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체에 저장된 분이 1 씩 증가하고 40이 초 동안 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="587e004496e55096118f3c7229f4118638bf8fb6" translate="yes" xml:space="preserve">
          <source>If a property has a corresponding target object property then &lt;code&gt;Object.defineProperty(&lt;var&gt;target&lt;/var&gt;, &lt;var&gt;prop&lt;/var&gt;, &lt;var&gt;descriptor&lt;/var&gt;)&lt;/code&gt; will not throw an exception.</source>
          <target state="translated">속성에 해당 대상 객체 속성이있는 경우 &lt;code&gt;Object.defineProperty(&lt;var&gt;target&lt;/var&gt;, &lt;var&gt;prop&lt;/var&gt;, &lt;var&gt;descriptor&lt;/var&gt;)&lt;/code&gt; 는 예외를 발생시키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="54e5d5b9374c3920ec4b4ed3a7977f0fa06e19b2" translate="yes" xml:space="preserve">
          <source>If a property has a corresponding target object property then &lt;code&gt;Object.defineProperty(target, prop, descriptor)&lt;/code&gt; will not throw an exception.</source>
          <target state="translated">속성에 해당 대상 개체 속성이 &lt;code&gt;Object.defineProperty(target, prop, descriptor)&lt;/code&gt; 에서 예외가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="837d8d104001710dc6b1a33f7143ccc511c3351f" translate="yes" xml:space="preserve">
          <source>If a property is modified in one iteration and then visited at a later time, its value in the loop is its value at that later time. A property that is deleted before it has been visited will not be visited later. Properties added to the object over which iteration is occurring may either be visited or omitted from iteration.</source>
          <target state="translated">한 번의 반복으로 속성을 수정 한 다음 나중에 방문 할 경우 루프의 값은 그 이후의 값입니다. 방문하기 전에 삭제 된 속성은 나중에 방문하지 않습니다. 반복이 발생하는 오브젝트에 추가 된 특성은 방문에서 반복되거나 생략 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5534a4c3390c3a7ec2f13247ce7f50b399f6066" translate="yes" xml:space="preserve">
          <source>If a property with the same name exists on the object's prototype chain, then, after deletion, the object will use the property from the prototype chain (in other words, &lt;code&gt;delete&lt;/code&gt; only has an effect on own properties).</source>
          <target state="translated">동일한 이름을 가진 속성이 객체의 프로토 타입 체인에 존재하면 삭제 후 객체는 프로토 타입 체인의 속성을 사용합니다 (즉, &lt;code&gt;delete&lt;/code&gt; 는 자신의 속성에만 영향을 미칩니다).</target>
        </trans-unit>
        <trans-unit id="e99786657c508f5fdf7a106b6e2772b4a4777958" translate="yes" xml:space="preserve">
          <source>If a setter has been defined for an object's property, it was not possible to reference the setter function through that property, because that property refers to the return value of that function. &lt;code&gt;__lookupSetter__&lt;/code&gt; can be used to obtain a reference to the setter function.</source>
          <target state="translated">개체의 속성에 대해 setter가 정의 된 경우 해당 속성이 해당 함수의 반환 값을 참조하기 때문에 해당 속성을 통해 setter 함수를 참조 할 수 없습니다. &lt;code&gt;__lookupSetter__&lt;/code&gt; 를 사용하여 setter 함수에 대한 참조를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e95bbcb4d00da3194f60f32b87c232cfe48eb8b" translate="yes" xml:space="preserve">
          <source>If a value can be converted to &lt;code&gt;true&lt;/code&gt;, the value is so-called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;. If a value can be converted to &lt;code&gt;false&lt;/code&gt;, the value is so-called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;.</source>
          <target state="translated">값을 &lt;code&gt;true&lt;/code&gt; 로 변환 할 수 있으면 값은 소위 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;진실&lt;/a&gt; 입니다. 값을 &lt;code&gt;false&lt;/code&gt; 로 변환 할 수 있으면이 값을 소위 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;거짓&lt;/a&gt; 이라고 합니다 .</target>
        </trans-unit>
        <trans-unit id="8ab400bc46efabee8fe3b7f7d0f93c12a2cfeb1f" translate="yes" xml:space="preserve">
          <source>If all of the passed-in promises fulfill, or are not promises, the promise returned by &lt;code&gt;Promise.all&lt;/code&gt; is fulfilled asynchronously.</source>
          <target state="translated">전달 된 모든 약속이 약속을 이행하거나 약속이 아닌 경우 &lt;code&gt;Promise.all&lt;/code&gt; 에서 반환 한 약속 은 비동기 적으로 이행됩니다.</target>
        </trans-unit>
        <trans-unit id="27a946b1cec42590a3be910f1e249671d49ae692" translate="yes" xml:space="preserve">
          <source>If all of the passed-in promises reject, &lt;code&gt;Promise.any&lt;/code&gt; asynchronously rejects with an &lt;a href=&quot;../aggregateerror&quot;&gt;&lt;code&gt;AggregateError&lt;/code&gt;&lt;/a&gt; object, which extends &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;, and contains an &lt;code&gt;errors&lt;/code&gt; property with an array of rejection values.</source>
          <target state="translated">전달 된 모든 것이 거부를 약속하는 경우 &lt;code&gt;Promise.any&lt;/code&gt; 는 &lt;a href=&quot;../aggregateerror&quot;&gt; &lt;code&gt;AggregateError&lt;/code&gt; &lt;/a&gt; 객체를 사용하여 비동기 적으로 거부합니다.이 객체는 &lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 를 확장 하고 거부 값 배열이 있는 &lt;code&gt;errors&lt;/code&gt; 속성을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="bc419899ffe92367558ce569728bd6eda06f9488" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../../statements/for...of&quot;&gt;iterable object&lt;/a&gt; is passed, all of its elements will be added to the new &lt;code&gt;Set&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;a href=&quot;../../statements/for...of&quot;&gt;반복 가능한 객체가&lt;/a&gt; 전달되는 그 모든 요소는 새로운 추가됩니다 &lt;code&gt;Set&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a787a0c72cff07bbfd19755db6d82f58eef48c6" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../../statements/for...of&quot;&gt;iterable object&lt;/a&gt; is passed, all of its elements will be added to the new &lt;code&gt;WeakSet&lt;/code&gt;. null is treated as undefined.</source>
          <target state="translated">경우 &lt;a href=&quot;../../statements/for...of&quot;&gt;반복 가능한 객체가&lt;/a&gt; 전달되는 그 모든 요소는 새로운 추가됩니다 &lt;code&gt;WeakSet&lt;/code&gt; . null은 정의되지 않은 것으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="6f42c36a852e8a0e3d96038c9b48c242a9784442" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../statements/for...of&quot;&gt;iterable object &lt;/a&gt;is passed, all of its elements will be added to the new &lt;code&gt;Set&lt;/code&gt;. If you don't specify this parameter, or its value is &lt;code&gt;null&lt;/code&gt;, the new &lt;code&gt;Set&lt;/code&gt; is empty.</source>
          <target state="translated">경우 &lt;a href=&quot;../statements/for...of&quot;&gt;반복 가능한 객체가&lt;/a&gt; 전달되는 그 모든 요소는 새로운 추가됩니다 &lt;code&gt;Set&lt;/code&gt; . 이 매개 변수를 지정하지 않거나 해당 값이 &lt;code&gt;null&lt;/code&gt; 인 경우 새 &lt;code&gt;Set&lt;/code&gt; 가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d39d83ba6dd7a9c8c32bf2347faf691e07c8e4e" translate="yes" xml:space="preserve">
          <source>If an &lt;a href=&quot;../statements/for...of&quot;&gt;iterable object &lt;/a&gt;is passed, all of its elements will be added to the new &lt;code&gt;WeakSet&lt;/code&gt;. null is treated as undefined.</source>
          <target state="translated">경우 &lt;a href=&quot;../statements/for...of&quot;&gt;반복 가능한 객체가&lt;/a&gt; 전달되는 그 모든 요소는 새로운 추가됩니다 &lt;code&gt;WeakSet&lt;/code&gt; . null은 정의되지 않은 것으로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="2d3fe08780b4a61c2df0afb894ef6c7d6c984467" translate="yes" xml:space="preserve">
          <source>If an accessor property is inherited, its &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods will be called when the property is accessed and modified on descendant objects. If these methods use a variable to store the value, this value will be shared by all objects.</source>
          <target state="translated">접근 자 속성이 상속되면 하위 개체에서 속성에 액세스하고 수정할 때 &lt;code&gt;get&lt;/code&gt; 및 &lt;code&gt;set&lt;/code&gt; 메서드가 호출됩니다. 이러한 메소드가 변수를 사용하여 값을 저장하는 경우이 값은 모든 오브젝트에서 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="0a6096c9d36c7d06be6e0a07577d30ae12433148" translate="yes" xml:space="preserve">
          <source>If an arrow function needs to access the &lt;code&gt;this&lt;/code&gt; variable, you can use the arrow function as the enclosing function:</source>
          <target state="translated">화살표 함수 &lt;code&gt;this&lt;/code&gt; 변수 에 액세스해야하는 경우 화살표 함수를 묶는 함수로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b4be48e7bf99e7bb43a149c21ac7c6e39523941" translate="yes" xml:space="preserve">
          <source>If an element is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, it is converted to the empty string.</source>
          <target state="translated">요소가 &lt;code&gt;undefined&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; 인 경우 빈 문자열로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="e363aa536e88387e5c0cbd67a99ffab5a7c14024" translate="yes" xml:space="preserve">
          <source>If an element is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or an empty array &lt;code&gt;[]&lt;/code&gt;, it is converted to an empty string.</source>
          <target state="translated">요소가 &lt;code&gt;undefined&lt;/code&gt; 경우 &lt;code&gt;null&lt;/code&gt; 또는 빈 배열 &lt;code&gt;[]&lt;/code&gt; 이면 빈 문자열로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="082c0044fd10aae386a6cf9e4adb69b5ca782b44" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then the promise returned by this method is fulfilled synchronously. The resolved value is an empty array.</source>
          <target state="translated">빈 &lt;var&gt;iterable&lt;/var&gt; 이 전달되면이 메서드에서 반환 한 promise는 동 기적으로 수행됩니다. 해결 된 값은 빈 배열입니다.</target>
        </trans-unit>
        <trans-unit id="e60fae81c7a7430bdf5c15d8026a70bc4af462c2" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then the promise returned by this method is rejected synchronously. The rejected reason is an &lt;code&gt;AggregateError&lt;/code&gt; object whose &lt;code&gt;errors&lt;/code&gt; property is an empty array.</source>
          <target state="translated">빈 &lt;var&gt;iterable&lt;/var&gt; 이 전달되면이 메서드에서 반환 된 promise는 동 기적으로 거부됩니다. 거부 된 이유는 &lt;code&gt;errors&lt;/code&gt; 속성이 빈 배열 인 &lt;code&gt;AggregateError&lt;/code&gt; 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="54bc642374ee70081e3afb8490bd2269bdefd134" translate="yes" xml:space="preserve">
          <source>If an empty &lt;var&gt;iterable&lt;/var&gt; is passed, then this method returns (synchronously) an already resolved promise.</source>
          <target state="translated">빈 &lt;var&gt;iterable&lt;/var&gt; 이 전달되면이 메소드는 이미 해결 된 약속을 (동 기적으로) 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="115182e50bdd6201c48fa9cf7d25930ad3769130" translate="yes" xml:space="preserve">
          <source>If an existing, yet-unvisited element of the array is changed by &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;, its value passed to the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; will be the value at the time &lt;code&gt;find&lt;/code&gt; visits that element's index.</source>
          <target state="translated">아직 방문하지 않은 기존 배열 요소가 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 에 의해 변경된 경우 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 전달 된 값은 해당 요소의 색인을 &lt;code&gt;find&lt;/code&gt; 때의 값이됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd198759ec716bf61d3d545c999fb000e2238a04" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method does not return an iterator object, then it is a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:</source>
          <target state="translated">iterable의 &lt;code&gt;@@iterator&lt;/code&gt; 메소드가 iterator 객체를 반환하지 않으면 잘 구성되지 않은 iterable입니다. 그대로 사용하면 런타임 예외 또는 버그가있는 동작이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d69c0eecc261f462796bd6ac56dedc90c4a7ce55" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method doesn't return an iterator object, then it's a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:</source>
          <target state="translated">iterable의 &lt;code&gt;@@iterator&lt;/code&gt; 메소드가 iterator 객체를 반환하지 않으면 잘 구성되지 않은 iterable입니다. 그대로 사용하면 런타임 예외 또는 버그가있는 동작이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2112de509477c036e2a78f9bd9296395f6174868" translate="yes" xml:space="preserve">
          <source>If an iterable's &lt;code&gt;@@iterator&lt;/code&gt; method doesn't return an iterator object, then it's considered a &lt;em&gt;non-well-formed&lt;/em&gt; iterable.</source>
          <target state="translated">이터 러블의 &lt;code&gt;@@iterator&lt;/code&gt; 메서드가 이터레이터 개체를 반환하지 않으면 제대로 &lt;em&gt;구성된&lt;/em&gt; 이터 러블 이 &lt;em&gt;아닌&lt;/em&gt; 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="31b3cbae51b5fe192cd7a0df742cf2ba526bfcfb" translate="yes" xml:space="preserve">
          <source>If an object being stringified has a property named &lt;code&gt;toJSON&lt;/code&gt; whose value is a function, then the &lt;code&gt;toJSON()&lt;/code&gt; method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the &lt;code&gt;toJSON()&lt;/code&gt; method when called will be serialized. &lt;code&gt;JSON.stringify()&lt;/code&gt; calls &lt;code&gt;toJSON&lt;/code&gt; with one parameter:</source>
          <target state="translated">문자열 화되는 오브젝트에 값이 함수 인 &lt;code&gt;toJSON&lt;/code&gt; 이라는 특성 이있는 &lt;code&gt;toJSON()&lt;/code&gt; 메소드는 JSON 문자열 화 동작을 사용자 정의합니다. 직렬화되는 오브젝트 대신 호출 될 때 &lt;code&gt;toJSON()&lt;/code&gt; 메소드가 리턴 한 값 이 직렬화됩니다. &lt;code&gt;JSON.stringify()&lt;/code&gt; 는 하나의 매개 변수로 &lt;code&gt;toJSON&lt;/code&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="cef8f2323faa3f13ce8f7260bf8626d3157109e1" translate="yes" xml:space="preserve">
          <source>If an object is compared with a number or string, JavaScript attempts to return the default value for the object. Operators attempt to convert the object to a primitive value, a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Number&lt;/code&gt; value, using the &lt;code&gt;valueOf&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; methods of the objects. If this attempt to convert the object fails, a runtime error is generated.</source>
          <target state="translated">객체를 숫자 또는 문자열과 비교하면 JavaScript는 객체의 기본값을 반환하려고 시도합니다. 연산자는 객체 의 &lt;code&gt;valueOf&lt;/code&gt; 및 &lt;code&gt;toString&lt;/code&gt; 메서드를 사용하여 객체를 기본 값인 &lt;code&gt;String&lt;/code&gt; 또는 &lt;code&gt;Number&lt;/code&gt; 값 으로 변환하려고 합니다. 이 오브젝트 변환 시도가 실패하면 런타임 오류가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="5d9c8d242f07d4b8da5fc1c766cac77ace48f8da" translate="yes" xml:space="preserve">
          <source>If an optional value is passed to the generator's &lt;code&gt;next()&lt;/code&gt; method, that value becomes the value returned by the generator's current &lt;code&gt;yield&lt;/code&gt; operation.</source>
          <target state="translated">선택적 값이 생성기의 &lt;code&gt;next()&lt;/code&gt; 메서드에 전달되면 해당 값은 생성기의 현재 &lt;code&gt;yield&lt;/code&gt; 작업 에서 반환 된 값이 됩니다.</target>
        </trans-unit>
        <trans-unit id="eab9a8913c422ab58b02bbfa5d83f5998bdc01c2" translate="yes" xml:space="preserve">
          <source>If any of the arguments are &lt;code&gt;NaN&lt;/code&gt; or cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수가 &lt;code&gt;NaN&lt;/code&gt; 이거나 숫자로 변환 할 수없는 경우 결과는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 입니다.&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="14e60bca484450eba75e83eae86d457071ed10b7" translate="yes" xml:space="preserve">
          <source>If any of the passed-in promises reject, &lt;code&gt;Promise.all&lt;/code&gt; asynchronously rejects with the value of the promise that rejected, whether or not the other promises have resolved.</source>
          <target state="translated">전달 된 약속 중 하나라도 거부하면 &lt;code&gt;Promise.all&lt;/code&gt; 은 다른 약속이 해결되었는지 여부에 관계없이 거부 된 약속의 값으로 비동기 적으로 거부합니다.</target>
        </trans-unit>
        <trans-unit id="48d47027ffc774196b349859fb3e9da455a451c9" translate="yes" xml:space="preserve">
          <source>If at least one of arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">하나 이상의 인수를 숫자로 변환 할 수없는 경우 결과는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d5be6d3c080275816767e73cf9852e3c597d6d12" translate="yes" xml:space="preserve">
          <source>If at least one of the arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수 중 하나 이상을 숫자로 변환 할 수없는 경우 결과는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="09f549348155baea9ff0cca9052911fb73fa52d5" translate="yes" xml:space="preserve">
          <source>If at least two arguments are supplied, missing arguments are either set to 1 (if the day is missing) or 0 for all others.</source>
          <target state="translated">둘 이상의 인수가 제공되면 누락 된 인수는 1 (일이 누락 된 경우) 또는 다른 모든 인수에 대해 0으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="cf691c2a790d699ec9ba78a1973cef3c5c42d3c9" translate="yes" xml:space="preserve">
          <source>If both operands are &lt;code&gt;null&lt;/code&gt; or both operands are &lt;code&gt;undefined&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">두 피연산자가 모두 &lt;code&gt;null&lt;/code&gt; 이거나 두 피연산자가 모두 &lt;code&gt;undefined&lt;/code&gt; 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="c1c94151e65fa592234f81a33fa33dd6a609f2fd" translate="yes" xml:space="preserve">
          <source>If both operands are objects, return &lt;code&gt;true&lt;/code&gt; only if they refer to the same object.</source>
          <target state="translated">두 피연산자가 객체 &lt;code&gt;true&lt;/code&gt; 동일한 객체를 참조하는 경우에만 true를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a9d7637f29541f6febab3fa6b0b1f3aef2768080" translate="yes" xml:space="preserve">
          <source>If both values are strings, they are compared as strings, based on the values of the Unicode code points they contain.</source>
          <target state="translated">두 값이 모두 문자열이면 포함 된 유니 코드 코드 포인트의 값을 기준으로 문자열로 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="82315591edcb2db1b2e04264330ce3348f0aee52" translate="yes" xml:space="preserve">
          <source>If compilation fails, the promise rejects with a &lt;a href=&quot;compileerror&quot;&gt;&lt;code&gt;WebAssembly.CompileError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">컴파일이 실패하면 약속은 &lt;a href=&quot;compileerror&quot;&gt; &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; 로&lt;/a&gt; 거부됩니다 .</target>
        </trans-unit>
        <trans-unit id="cea3dd981e7a3aff7561a6922483101c40442bb9" translate="yes" xml:space="preserve">
          <source>If default parameters are defined for one or more parameter, then a &lt;a href=&quot;https://tc39.es/ecma262/#sec-functiondeclarationinstantiation&quot;&gt;second scope&lt;/a&gt; (Environment Record) is created, specifically for the identifiers within the parameter list. This scope is a parent of the scope created for the function body.</source>
          <target state="translated">하나 이상의 매개 변수에 대해 기본 매개 변수가 정의 된 경우 , 특히 매개 변수 목록 내의 식별자에 대해 &lt;a href=&quot;https://tc39.es/ecma262/#sec-functiondeclarationinstantiation&quot;&gt;두 번째 범위&lt;/a&gt; (환경 레코드)가 작성됩니다. 이 범위는 함수 본문에 대해 생성 된 범위의 부모입니다.</target>
        </trans-unit>
        <trans-unit id="e1f0c5928a0099cfe5ce965bc4209aa587dd166e" translate="yes" xml:space="preserve">
          <source>If either of the parameters are not of the correct type or structure, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">매개 변수 중 하나가 올바른 유형 또는 구조가 아닌 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="942b12103e01cee38325fcffdc6011f2a313fd82" translate="yes" xml:space="preserve">
          <source>If either operand is &lt;code&gt;NaN&lt;/code&gt;, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">피연산자가 &lt;code&gt;NaN&lt;/code&gt; 이면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="329fa71267e94c738bbeefa5e7aa0eabd7f7ae7a" translate="yes" xml:space="preserve">
          <source>If either or both of the arguments are negative or &lt;code&gt;NaN&lt;/code&gt;, the &lt;code&gt;substring()&lt;/code&gt; method treats them as if they were &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">인수 중 하나 또는 모두가 음수이거나 &lt;code&gt;NaN&lt;/code&gt; 인 경우 &lt;code&gt;substring()&lt;/code&gt; 메서드는 인수 를 &lt;code&gt;0&lt;/code&gt; 인 것처럼 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="8b1c72aa7914ae18205e9e718b1e5ff403ea5f72" translate="yes" xml:space="preserve">
          <source>If either value is &lt;code&gt;&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;&lt;/code&gt;, the operator returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">두 값 중 하나가 &lt;code&gt;&lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;&lt;/code&gt; 이면 연산자는 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="69769f880229b3b08f71eee7e43ec58963b459f3" translate="yes" xml:space="preserve">
          <source>If greater than the length of the array, &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.</source>
          <target state="translated">어레이의 길이보다 크면 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 는 어레이 의 길이로 설정됩니다. 이 경우 요소는 삭제되지 않지만 메서드는 제공된 item [n *]만큼 요소를 추가하는 추가 기능으로 동작합니다.</target>
        </trans-unit>
        <trans-unit id="cb72faf000f170f1b80581e4a48d82155c0c3894" translate="yes" xml:space="preserve">
          <source>If instead, you want to remove an array element by changing the contents of the array, use the &lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt; method. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is removed from the array completely using &lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">대신 배열의 내용을 변경하여 배열 요소를 제거하려면 &lt;a href=&quot;../global_objects/array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하십시오 . 다음 예제에서는 &lt;a href=&quot;../global_objects/array/splice&quot;&gt; &lt;code&gt;splice()&lt;/code&gt; &lt;/a&gt; 사용하여 &lt;code&gt;trees[3]&lt;/code&gt; 배열에서 완전히 제거했습니다. .</target>
        </trans-unit>
        <trans-unit id="49fc2322ca24a4cc53ec295316ce4fd08b085e67" translate="yes" xml:space="preserve">
          <source>If instead, you want to remove an array element by changing the contents of the array, use the &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is removed from the array completely using &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">대신 배열의 내용을 변경하여 배열 요소를 제거하려면 &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 메소드를 사용하십시오 . 다음 예제에서 &lt;code&gt;&lt;a href=&quot;../global_objects/array/splice&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;trees[3]&lt;/code&gt; 가 배열에서 완전히 제거됩니다 .</target>
        </trans-unit>
        <trans-unit id="2aa5046f9eb74295f861c69f7b20dc6058c9f652" translate="yes" xml:space="preserve">
          <source>If it is a positive number with a positive sign, &lt;code&gt;RegExp()&lt;/code&gt; will ignore the positive sign.</source>
          <target state="translated">양수 부호가있는 양수이면 &lt;code&gt;RegExp()&lt;/code&gt; 는 양수 부호를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="6fe41e69103f9edde244c8197d5369fb1ea48d61" translate="yes" xml:space="preserve">
          <source>If it is resolved</source>
          <target state="translated">그것이 해결되면</target>
        </trans-unit>
        <trans-unit id="446ee71b57c4dc727ad4482eb4cb20418b406cbe" translate="yes" xml:space="preserve">
          <source>If it rejects, it is rejected with the reason from the first promise in the iterable that was rejected.</source>
          <target state="translated">거부하면 거부 된 iterable의 첫 번째 약속의 이유와 함께 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="e1d9729db77586d30dcb90e9b3c12a312fac9880" translate="yes" xml:space="preserve">
          <source>If it rejects, it is rejected with the reason from the first promise that was rejected.</source>
          <target state="translated">거부하면 거부 된 첫 번째 약속의 이유와 함께 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="cfb1cc05b2c2ef7200a99e47d5f93b8653470671" translate="yes" xml:space="preserve">
          <source>If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed or shouldn't be re-calculated.</source>
          <target state="translated">사용되는 경우 여러 번 액세스되며 값이 변경되지 않거나 다시 계산되어서는 안되는 해당 값을 다시 계산할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="8d09c7d906444b72f87c57393ac10ac8d90cbc87" translate="yes" xml:space="preserve">
          <source>If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed, or shouldn't be re-calculated.</source>
          <target state="translated">사용되는 경우 여러 번 액세스되며 해당 값을 절대로 변경하지 않거나 다시 계산해서는 안되는 값을 다시 계산할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="d31244b48c8d3b0b322ef9ce1f75a06324d0d657" translate="yes" xml:space="preserve">
          <source>If module is not a &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object instance, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">모듈이 &lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; 객체 인스턴스 가 아닌 경우 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ed3504e341054924945fff0b8682ea59d40acaba" translate="yes" xml:space="preserve">
          <source>If more than one argument is passed to the constructor, a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; with the given elements is created.</source>
          <target state="translated">둘 이상의 인수가 생성자에 전달 되면 지정된 요소가 있는 새 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="1af819851a3c2bc5b680040e3a8ec24cc1ab5313" translate="yes" xml:space="preserve">
          <source>If more than one trailing comma is used, an elision (or hole) is produced. An array with holes is called &lt;em&gt;sparse&lt;/em&gt; (a &lt;em&gt;dense&lt;/em&gt; array has no holes). When iterating arrays for example with &lt;a href=&quot;global_objects/array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;, array holes are skipped.</source>
          <target state="translated">후행 쉼표가 두 개 이상 사용되면 제거 (또는 구멍)가 생성됩니다. 구멍이있는 배열을 &lt;em&gt;희소&lt;/em&gt; ( &lt;em&gt;sparse&lt;/em&gt; )라고합니다 ( &lt;em&gt;밀도&lt;/em&gt; 배열에는 구멍이 없음). 예를 들어 &lt;a href=&quot;global_objects/array/foreach&quot;&gt; &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt; 하여 배열을 반복 할 때 배열 구멍을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="1159ebab54dad1aea2ed2a3c6ea83b2343288cc8" translate="yes" xml:space="preserve">
          <source>If multiple &lt;code&gt;WeakRef&lt;/code&gt;s have the same target, they're consistent with one another. The result of calling &lt;code&gt;deref&lt;/code&gt; on one of them will match the result of calling &lt;code&gt;deref&lt;/code&gt; on another of them (in the same job), you won't get the target object from one of them but &lt;code&gt;undefined&lt;/code&gt; from another.</source>
          <target state="translated">여러 &lt;code&gt;WeakRef&lt;/code&gt; 가 동일한 대상을 갖는 경우 서로 일치합니다. 호출의 결과 &lt;code&gt;deref&lt;/code&gt; 호출 한 결과와 일치합니다 그들 중 하나에 &lt;code&gt;deref&lt;/code&gt; (동일한 작업에서) 이들의 또 다른에, 당신은 그들 중 하나에서 대상 개체를 얻을 수 있지만하지 않습니다 &lt;code&gt;undefined&lt;/code&gt; 서로.</target>
        </trans-unit>
        <trans-unit id="a6b8e3ea5e20c3a5881face3771f7491d5f74865" translate="yes" xml:space="preserve">
          <source>If negative, it will begin that many elements from the end of the array. (In this case, the origin &lt;code&gt;-1&lt;/code&gt;, meaning &lt;code&gt;-&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; is the index of the &lt;code&gt;&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; last element, and is therefore equivalent to the index of &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.) If &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length + &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;, it will begin from index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">음수이면 배열 끝에서 많은 요소를 시작합니다. (이 경우, 원점 &lt;code&gt;-1&lt;/code&gt; 의미하는 &lt;code&gt;-&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; 의 인덱스이며 &lt;code&gt;&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; &lt;sup&gt; 번째의&lt;/sup&gt; 마지막 요소, 따라서 인덱스에 해당 &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length - &lt;var&gt;n&lt;/var&gt;&lt;/code&gt; .) 경우 &lt;code&gt;&lt;var&gt;array&lt;/var&gt;.length + &lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 미만이고 &lt;code&gt;0&lt;/code&gt; 그것을 인덱스 &lt;code&gt;0&lt;/code&gt; 부터 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="6f05381949d7c897bb41de21ca73f9e4317dd755" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; is provided to &lt;code&gt;charAt()&lt;/code&gt;, the default is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;charAt()&lt;/code&gt; &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; 가 제공 되지 않으면 기본값은 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f91f0e4cc5abd9a5b3dbdbb7a0297c9b1abf06c5" translate="yes" xml:space="preserve">
          <source>If no argument is provided, the &lt;code&gt;value&lt;/code&gt; property of returned object is the same as if &lt;code&gt;.next()&lt;/code&gt;. If an argument is provided, it will be set to the value of the &lt;code&gt;value&lt;/code&gt; property of the returned object.</source>
          <target state="translated">인수가 제공되지 않으면 반환 된 객체 의 &lt;code&gt;value&lt;/code&gt; 속성은 &lt;code&gt;.next()&lt;/code&gt; 와 동일 합니다. 인수가 제공되는 경우, 그것은의 값으로 설정됩니다 &lt;code&gt;value&lt;/code&gt; 반환 된 개체 속성 .</target>
        </trans-unit>
        <trans-unit id="4e0091f074b8afb9219bdfed384f304735f7b83e" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is +0.</source>
          <target state="translated">인수가 제공되지 않으면 결과는 +0입니다.</target>
        </trans-unit>
        <trans-unit id="9990c049d2e8a0255f2ea7fdd43424a88bf9391b" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is +0. If any of the arguments is &amp;plusmn;Infinity, the result is Infinity. If any of the arguments is NaN (unless another argument is &amp;plusmn;Infinity), the result is NaN. If at least one of the arguments cannot be converted to a number, the result is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수가 제공되지 않으면 결과는 +0입니다. 인수 중 하나라도 &amp;plusmn; Infinity이면 결과는 Infinity입니다. 인수 중 하나가 NaN이면 (다른 인수가 &amp;plusmn; Infinity가 아닌 경우) 결과는 NaN입니다. 인수 중 하나 이상을 숫자로 변환 할 수없는 경우 결과는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cec49b483dc5f92d00626cab7c85c35367d1467e" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is -&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수가 제공되지 않으면 결과는 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d63e690a371b2f42dfb850c4bf3dbb9ed32758d6" translate="yes" xml:space="preserve">
          <source>If no arguments are given, the result is &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수가 제공되지 않으면 결과는 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1ce565041aff6de5300fa5e4efb7b43bee1e0ca9" translate="yes" xml:space="preserve">
          <source>If no arguments are provided, the constructor creates a JavaScript &lt;code&gt;Date&lt;/code&gt; object for the current date and time according to system settings for timezone offset.</source>
          <target state="translated">인수가 제공되지 않으면 생성자 는 표준 시간대 오프셋에 대한 시스템 설정에 따라 현재 날짜 및 시간에 대한 JavaScript &lt;code&gt;Date&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="349be3fe930215fab503b160fac65a4afd9578ab" translate="yes" xml:space="preserve">
          <source>If no elements are removed, an empty array is returned.</source>
          <target state="translated">제거 된 요소가 없으면 빈 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f768f5cdd68c2b69894b9dde66eb214e5224574b" translate="yes" xml:space="preserve">
          <source>If no index is provided to &lt;code&gt;charAt()&lt;/code&gt;, the default is 0.</source>
          <target state="translated">&lt;code&gt;charAt()&lt;/code&gt; 인덱스가 제공되지 않으면 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="df2278328be6b4739a3d8c782a34d0454e15f504" translate="yes" xml:space="preserve">
          <source>If no matching &lt;code&gt;case&lt;/code&gt; clause is found, the program looks for the optional &lt;code&gt;default&lt;/code&gt; clause, and if found, transfers control to that clause, executing the associated statements. If no &lt;code&gt;default&lt;/code&gt; clause is found, the program continues execution at the statement following the end of &lt;code&gt;switch&lt;/code&gt;. By convention, the &lt;code&gt;default&lt;/code&gt; clause is the last clause, but it does not need to be so.</source>
          <target state="translated">일치하는 &lt;code&gt;case&lt;/code&gt; 절이 없으면 프로그램은 선택적 &lt;code&gt;default&lt;/code&gt; 절을 찾고 찾은 경우 연관된 절을 실행하여 해당 절로 제어를 전송합니다. &lt;code&gt;default&lt;/code&gt; 절이 없으면 프로그램은 &lt;code&gt;switch&lt;/code&gt; 종료 후 명령문에서 실행을 계속 합니다 . 규칙에 따라 &lt;code&gt;default&lt;/code&gt; 절은 마지막 절이지만 그럴 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="f9c179b8d44481d64d61150bf0f2642fed87585c" translate="yes" xml:space="preserve">
          <source>If no string is explicitly provided, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;&lt;var&gt;searchValue&lt;/var&gt; will be coerced to &quot;&lt;code&gt;undefined&lt;/code&gt;&quot;&lt;/a&gt;, and this value will be searched for in &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">문자열이 명시 적으로 제공되지 않으면 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt; &lt;var&gt;searchValue&lt;/var&gt; 가 &quot; &lt;code&gt;undefined&lt;/code&gt; &quot; 로 강제 변환 되고이&lt;/a&gt; 값은 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 에서 검색됩니다. .</target>
        </trans-unit>
        <trans-unit id="03d6fe27bce7cb59badbbf88b73e5ae858f2f1f6" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;NaN&lt;/code&gt;, the return value will be the integer that is the first argument taken as a number in the specified &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt;. (For example, a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; of &lt;code&gt;10&lt;/code&gt; converts from a decimal number, &lt;code&gt;8&lt;/code&gt; converts from octal, &lt;code&gt;16&lt;/code&gt; from hexadecimal, and so on.)</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 이 아니면 반환 값은 지정된 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 의 숫자로 사용되는 첫 번째 인수 인 정수가됩니다 . (예를 들어, &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 의 &lt;code&gt;10&lt;/code&gt; 개 진수 번호로부터 변환 &lt;code&gt;8&lt;/code&gt; 개 진법으로 변환, &lt;code&gt;16&lt;/code&gt; 등의 진수 및).</target>
        </trans-unit>
        <trans-unit id="62b6da4ddc0e467fae3e22e79269a0cd81d2e64c" translate="yes" xml:space="preserve">
          <source>If one of the operands is &lt;code&gt;Boolean&lt;/code&gt;, convert the Boolean operand to 1 if it is &lt;code&gt;true&lt;/code&gt; and +0 if it is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">피연산자 중 하나가 &lt;code&gt;Boolean&lt;/code&gt; 이면 부울 피연산자가 &lt;code&gt;true&lt;/code&gt; 1로, &lt;code&gt;false&lt;/code&gt; 이면 +0으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="157db00b7126c89fc2532f635dc2767990139ad4" translate="yes" xml:space="preserve">
          <source>If one of the operands is &lt;code&gt;Boolean&lt;/code&gt;, the Boolean operand is converted to 1 if it is &lt;code&gt;true&lt;/code&gt; and +0 if it is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">피연산자 중 하나가 &lt;code&gt;Boolean&lt;/code&gt; 인 경우 부울 피연산자는 &lt;code&gt;true&lt;/code&gt; 이면 1로 변환되고 &lt;code&gt;false&lt;/code&gt; 이면 +0으로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="0799160a055aadf04357a628011b51ab4b1c6f7e" translate="yes" xml:space="preserve">
          <source>If one of the operands is an object and the other is a number or a string, try to convert the object to a primitive using the object's &lt;code&gt;valueOf()&lt;/code&gt; and &lt;code&gt;toString()&lt;/code&gt; methods.</source>
          <target state="translated">피연산자 중 하나가 객체이고 다른 하나가 숫자 또는 문자열 인 경우 객체의 &lt;code&gt;valueOf()&lt;/code&gt; 및 &lt;code&gt;toString()&lt;/code&gt; 메서드를 사용하여 객체를 기본 형식으로 변환 해보십시오 .</target>
        </trans-unit>
        <trans-unit id="820dfebc6e6888d4bc662c589d18f5d1c4b96705" translate="yes" xml:space="preserve">
          <source>If one operand is &lt;code&gt;null&lt;/code&gt; and the other is &lt;code&gt;undefined&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">한 피연산자가 &lt;code&gt;null&lt;/code&gt; 이고 다른 피연산자가 &lt;code&gt;undefined&lt;/code&gt; 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="5aa8b2baae192e612c1543533ffaebb114c4ec0f" translate="yes" xml:space="preserve">
          <source>If one or both arguments are omitted or are provided non-functions, then &lt;code&gt;then&lt;/code&gt; will be missing the handler(s), but will not generate any errors. If the &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;then&lt;/code&gt; is called on adopts a state (&lt;code&gt;fulfillment&lt;/code&gt; or &lt;code&gt;rejection&lt;/code&gt;) for which &lt;code&gt;then&lt;/code&gt; has no handler, a new &lt;code&gt;Promise&lt;/code&gt; is created with no additional handlers, simply adopting the final state of the original &lt;code&gt;Promise&lt;/code&gt; on which &lt;code&gt;then&lt;/code&gt; was called.</source>
          <target state="translated">하나 또는 두 개의 인자가 생략되거나 다음 비 기능 제공되면 &lt;code&gt;then&lt;/code&gt; 처리기 (들)를 누락한다, 그러나 어떤 오류가 발생하지 않을 것이다. 는 IF &lt;code&gt;Promise&lt;/code&gt; 것이 &lt;code&gt;then&lt;/code&gt; 에 호출은 상태 (채택 &lt;code&gt;fulfillment&lt;/code&gt; 또는 &lt;code&gt;rejection&lt;/code&gt; 하는) &lt;code&gt;then&lt;/code&gt; 어떤 핸들러가 없습니다를, 새로운 &lt;code&gt;Promise&lt;/code&gt; 단순히 원래의 최종 상태 채택, 추가 핸들러로 만든 &lt;code&gt;Promise&lt;/code&gt; 된 &lt;code&gt;then&lt;/code&gt; 라고했습니다.</target>
        </trans-unit>
        <trans-unit id="3b2d6b28b997335014500b08d8f04f7c3691b2c8" translate="yes" xml:space="preserve">
          <source>If one or both arguments are omitted or are provided non-functions, then &lt;code&gt;then&lt;/code&gt; will be missing the handler(s), but will not generate any errors. If the &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;then&lt;/code&gt; is called on adopts a state (&lt;code&gt;fulfillment&lt;/code&gt; or &lt;code&gt;rejection&lt;/code&gt;) for which &lt;code&gt;then&lt;/code&gt; has no handler, the returned promise simply adopts the final state of the original &lt;code&gt;Promise&lt;/code&gt; on which &lt;code&gt;then&lt;/code&gt; was called.</source>
          <target state="translated">하나 또는 두 개의 인자가 생략되거나 다음 비 기능 제공되면 &lt;code&gt;then&lt;/code&gt; 처리기 (들)를 누락한다, 그러나 어떤 오류가 발생하지 않을 것이다. 는 IF &lt;code&gt;Promise&lt;/code&gt; 것이 &lt;code&gt;then&lt;/code&gt; 에 호출은 상태 (채택 &lt;code&gt;fulfillment&lt;/code&gt; 또는 &lt;code&gt;rejection&lt;/code&gt; 하는) &lt;code&gt;then&lt;/code&gt; 어떤 핸들러가 없습니다를 반환 약속은 단순히 원래의 최종 상태 채택 &lt;code&gt;Promise&lt;/code&gt; 된 &lt;code&gt;then&lt;/code&gt; 라고했습니다.</target>
        </trans-unit>
        <trans-unit id="457b342baa5fd75eb025ca9f5b99efd20082c5f4" translate="yes" xml:space="preserve">
          <source>If one wishes to follow the more recent &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt; for URLs, which makes square brackets reserved (for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IPv6&quot;&gt;IPv6&lt;/a&gt;) and thus not encoded when forming something which could be part of a URL (such as a host), the following code snippet may help:</source>
          <target state="translated">URL에 대한 최신 &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC3986&lt;/a&gt; 을 따르고 자하는 경우 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IPv6&quot;&gt;IPv6의 경우&lt;/a&gt; ) 대괄호가 예약되어 URL (예 : 호스트)의 일부가 될 수있는 항목을 구성 할 때 인코딩되지 않는 경우 다음 코드 스 니펫이 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1c69555d0da6cfd17e4847850dca3e2008fe6a4" translate="yes" xml:space="preserve">
          <source>If only one element is removed, an array of one element is returned.</source>
          <target state="translated">하나의 요소 만 제거되면 한 요소의 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="89d18e2f04f7d7d60c84e76982daf3b58967d734" translate="yes" xml:space="preserve">
          <source>If passing the function argument using an &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;arrow function expression&lt;/a&gt; the &lt;code&gt;thisArg&lt;/code&gt; parameter can be omitted as arrow functions lexically bind the &lt;a href=&quot;../../operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">하여 함수 인수를 전달하는 경우, &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;화살표 함수식 &lt;/a&gt; &lt;code&gt;thisArg&lt;/code&gt; 파라미터 어휘 화살표 기능은 생략 될 수 인드 &lt;a href=&quot;../../operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; &lt;/a&gt; 값.</target>
        </trans-unit>
        <trans-unit id="6b009fba48b5763df48e0358044ceb1e1dc86d5e" translate="yes" xml:space="preserve">
          <source>If pattern argument is &lt;strong&gt;not&lt;/strong&gt; a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object, &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt; doesn't call this method, nor creates a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">패턴 인수가 &lt;strong&gt;없는 &lt;/strong&gt;&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체, &lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt; 이 메소드를 호출,도 아니다 생성하지 않는 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="6c9e2fc126b23061bb02204abf1952156dba945b" translate="yes" xml:space="preserve">
          <source>If provided, it is used as the length of &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;. Defaults to &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt;.</source>
          <target state="translated">제공되는 경우 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 의 길이로 사용됩니다 . 기본값은 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="afe3f0eab5663e5d1ba57f7d29abefac6af921f5" translate="yes" xml:space="preserve">
          <source>If specified and not &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, an object whose enumerable own properties (that is, those properties defined upon itself and &lt;em&gt;not&lt;/em&gt; enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of &lt;a href=&quot;defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">지정되고 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 가&lt;/a&gt; 아닌 경우 열거 가능한 자체 속성 (즉, 프로토 타입 체인을 따라 열거 가능한 속성이 &lt;em&gt;아닌&lt;/em&gt; 자체에 대해 정의 된 속성)을 가진 객체는 해당 속성 이름과 함께 새로 생성 된 객체에 추가 할 속성 설명자를 지정합니다. 이러한 속성은 &lt;a href=&quot;defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties()&lt;/code&gt; &lt;/a&gt; 의 두 번째 인수에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="13baf25040218d0501b94ae7baee74ac3f797eac" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; is a string that contains the flags to add.</source>
          <target state="translated">지정된 경우 &lt;code&gt;&lt;var&gt;flags&lt;/var&gt;&lt;/code&gt; 는 추가 할 플래그가 포함 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="2ffe4874009bf36af9606205e966fc91f48654a0" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;flags&lt;/code&gt; indicates the flags to add, or if an object is supplied for the pattern, the &lt;code&gt;flags&lt;/code&gt; value will replace any of that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; will be reset to 0) (as of ES2015). If &lt;code&gt;flags&lt;/code&gt; is not specified and a regular expressions object is supplied, that object's flags (and &lt;code&gt;lastIndex&lt;/code&gt; value) will be copied over. The value is a string containing any combination of the following values:</source>
          <target state="translated">지정된 경우 &lt;code&gt;flags&lt;/code&gt; 는 추가 할 플래그를 나타내거나 패턴에 객체가 제공되면 &lt;code&gt;flags&lt;/code&gt; 값은 해당 객체의 플래그를 대체합니다 (그리고 &lt;code&gt;lastIndex&lt;/code&gt; 는 0으로 재설정 됨) (ES2015 기준). 경우 &lt;code&gt;flags&lt;/code&gt; 지정되지 않고 정규 표현식 객체가 공급되고, 해당 개체의 플래그 (그리고 &lt;code&gt;lastIndex&lt;/code&gt; 값) 복사됩니다. 값은 다음 값의 조합을 포함하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="0f278705572fe4cf68405aa4e5bdb3c3070a0a9a" translate="yes" xml:space="preserve">
          <source>If specified, flags can have any combination of the following values:</source>
          <target state="translated">지정된 경우 플래그는 다음 값의 조합을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d41c0656b3d2ecfbd3b7ffcf0502574cc52a75c7" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;[@@search]()&lt;/code&gt; returns the index of the first match of the regular expression inside the string. Otherwise, it returns -1.</source>
          <target state="translated">성공하면 &lt;code&gt;[@@search]()&lt;/code&gt; 는 문자열 내에서 정규 표현식의 첫 번째 일치 색인을 리턴합니다. 그렇지 않으면 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ee11a9ac2ddedc856e6b1b7ccdce4f9c79a7d963" translate="yes" xml:space="preserve">
          <source>If such an element is found, &lt;code&gt;findIndex()&lt;/code&gt; immediately returns the element's index. If &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; never returns a truthy value (or the array's &lt;code&gt;length&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;), &lt;code&gt;findIndex()&lt;/code&gt; returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">그러한 요소가 발견되면 &lt;code&gt;findIndex()&lt;/code&gt; 즉시 요소의 인덱스를 반환합니다. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 이 진실 값을 반환하지 않는 경우 (또는 배열의 &lt;code&gt;length&lt;/code&gt; 가 &lt;code&gt;0&lt;/code&gt; ) &lt;code&gt;findIndex()&lt;/code&gt; 는 &lt;code&gt;-1&lt;/code&gt; 을 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="9c16da19397f9747a7c13f6fa34a9db0332a7be3" translate="yes" xml:space="preserve">
          <source>If such an element is found, &lt;code&gt;findIndex&lt;/code&gt; immediately returns that found element's index. If the callback never returns a truthy value or the array's &lt;code&gt;length&lt;/code&gt; is 0, &lt;code&gt;findIndex&lt;/code&gt; returns -1. Unlike some other array methods such as &lt;a href=&quot;some&quot;&gt;&lt;code&gt;Array.some&lt;/code&gt;&lt;/a&gt;, in sparse arrays the &lt;code&gt;callback&lt;/code&gt;&lt;strong&gt;is called&lt;/strong&gt; even for indexes of entries not present in the array.</source>
          <target state="translated">이러한 요소가 발견되면 &lt;code&gt;findIndex&lt;/code&gt; 는 발견 된 요소의 색인을 즉시 리턴합니다. 콜백이 절대 값을 반환하지 않거나 배열의 &lt;code&gt;length&lt;/code&gt; 가 0이면 &lt;code&gt;findIndex&lt;/code&gt; 는 -1을 반환합니다. &lt;a href=&quot;some&quot;&gt; &lt;code&gt;Array.some&lt;/code&gt; &lt;/a&gt; 과 같은 다른 배열 메소드와 달리 , 희소 배열에서는 배열에 없는 항목 색인에 대해서도 &lt;code&gt;callback&lt;/code&gt; &lt;strong&gt;이 호출&lt;/strong&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="748d54b21db1a50dc3ebf29e5799dd004bbc2b0c" translate="yes" xml:space="preserve">
          <source>If the &quot;lyrics&quot; element is empty, set the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;innerHTML&lt;/a&gt;&lt;/code&gt; to a default value:</source>
          <target state="translated">&quot;lyrics&quot;요소가 비어 있으면 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;innerHTML&lt;/a&gt;&lt;/code&gt; 을 기본값으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="aa1e6e164506acad60b43c996244e0ccc14c8ac0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; is outside of the range of date values for the month, &lt;code&gt;setDate()&lt;/code&gt; will update the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; 가 해당 월의 날짜 값 범위를 벗어나 면 &lt;code&gt;setDate()&lt;/code&gt; 가 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 를 업데이트합니다. 그에 따라 객체를 .</target>
        </trans-unit>
        <trans-unit id="50246270bc94fbe34619b2358197206035242ab3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.</source>
          <target state="translated">경우] &lt;code&gt;&lt;var&gt;fractionDigits&lt;/var&gt;&lt;/code&gt; 인수를 생략 필요한 숫자의 수에 소수점의 디폴트의 자리수는 고유 값을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a8a042a031513c64b3651a694e6ea1a7b0776593" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is &lt;code&gt;2&lt;/code&gt;; the string returned is the positive binary representation of the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; 가 부의 경우, 부호가 유지됩니다. 기수가 &lt;code&gt;2&lt;/code&gt; 인 경우에도 마찬가지입니다 . 반환 된 문자열은 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; 이 앞에는 &lt;code&gt;-&lt;/code&gt; 기호,&lt;strong&gt; 하지&lt;/strong&gt; 의 2의 보수 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d7a7c24bdbbc78170e073659c5f668b16269b25" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is not a whole number, the 'dot' sign is used to separate the decimal places.</source>
          <target state="translated">는 IF &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; 이 정수가 아닌는 '점'기호는 소수점을 분리하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b245f6f7566843542a7c173cff50732fbfd3bacf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is not specified, the preferred radix is assumed to be &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">경우] &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 지정되지 않은 선호 기수는 것으로 가정한다 &lt;code&gt;10&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54ad481de4c33588fdb0802190cf8b149d7966ee" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is smaller than &lt;code&gt;2&lt;/code&gt; or bigger than &lt;code&gt;36&lt;/code&gt;, and the first non-whitespace character cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">는 IF &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 보다 작다 &lt;code&gt;2&lt;/code&gt; 또는보다 큰 &lt;code&gt;36&lt;/code&gt; , 첫 번째 공백이 아닌 문자를 숫자로 변환 할 수 없습니다 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이&lt;/a&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="2a67a27ec1cbf334f567215905a7753278f9f6b8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; only transforms some values and not others, be certain to return all untransformed values as-is, otherwise, they will be deleted from the resulting object.</source>
          <target state="translated">경우 &lt;code&gt;&lt;var&gt;reviver&lt;/var&gt;&lt;/code&gt; 일부 값이 아닌 다른 사람을 변환,있는 그대로 모든 변형되지 않은 값을 반환 할 확신 그렇지 않으면 결과 객체에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="3f05af6384b04457cbb7e13272e0dc49a80bd675" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">이 메서드에 대한 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 인수가 객체 (기본)가 아니면&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; 를&lt;/a&gt; 사용하면객체가 아닌 첫 번째 인수가 처음에 객체로 강제 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="4b9f99648bb256a49a00568bf5dfb30e3033d62e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">이 메서드에 대한 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 인수가 객체 (기본)가 아니면&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;. 와&lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; 객체가 아닌 첫 번째 인수가 처음에 객체로 강제 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="7dcf4e160575e283d63147e2cc65d135d2974ea8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, a non-object &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; will be coerced to an object.</source>
          <target state="translated">이 메서드에 대한 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 인수가 객체 (기본 요소)가 아니면 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 . 와 &lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; , 비 객체 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 객체에 강요한다.</target>
        </trans-unit>
        <trans-unit id="ed3ac025020aed5a0890e8afac6c32f2c8ae815b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; value passed to &lt;code&gt;TypedArray.from()&lt;/code&gt; is not a constructor, &lt;code&gt;TypedArray.from()&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.from()&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TypedArray.from()&lt;/code&gt; 전달 된 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 값 이 생성자가 아닌 경우 &lt;code&gt;TypedArray.from()&lt;/code&gt; 은 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 를 발생 &lt;code&gt;Array.from()&lt;/code&gt; . 여기서 Array.from () 기본적으로 새 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="e38a2717bbd5bd5ac9ed570a97494bee3fa7ab86" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Promise&lt;/code&gt; is rejected, the &lt;code&gt;await&lt;/code&gt; expression throws the rejected value.</source>
          <target state="translated">는 IF &lt;code&gt;Promise&lt;/code&gt; 거부되면, &lt;code&gt;await&lt;/code&gt; 를 발현이 거부 된 값을 던졌습니다.</target>
        </trans-unit>
        <trans-unit id="35e4d659d7d35a3c85c18d904b4849b0e0e985e0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Promise&lt;/code&gt; is rejected, the rejected value is thrown.</source>
          <target state="translated">는 IF &lt;code&gt;Promise&lt;/code&gt; 거부, 거부 된 값이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="99d06a119e5b144d9d835a4bbbcbc47ccdafda9b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;bigIntObj&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the &lt;code&gt;bigIntObj&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;bigIntObj&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;code&gt;bigIntObj&lt;/code&gt; 가 부의 경우, 부호가 유지됩니다. 기수가 2 인 경우에도 마찬가지입니다. 반환 된 문자열의 긍정적 이진 표현이다 &lt;code&gt;bigIntObj&lt;/code&gt; 이 앞에는 &lt;code&gt;-&lt;/code&gt; 기호, &lt;strong&gt;하지&lt;/strong&gt; 의 2의 보수 &lt;code&gt;bigIntObj&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be3b876046ad63614f4af66a1f82f87240d95fa8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;configurable&lt;/code&gt; attribute of &lt;code&gt;o.a&lt;/code&gt; had been &lt;code&gt;true&lt;/code&gt;, none of the errors would be thrown and the property would be deleted at the end.</source>
          <target state="translated">&lt;code&gt;o.a&lt;/code&gt; 의 &lt;code&gt;configurable&lt;/code&gt; 속성 이 &lt;code&gt;true&lt;/code&gt; 이면 오류가 발생하지 않으며 속성이 끝날 때 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="ac47f72ce3f75c7a5073bd32d1f6a7c725984cd3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dayValue&lt;/code&gt; is outside of the range of date values for the month, &lt;code&gt;setDate()&lt;/code&gt; will update the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object accordingly. For example, if 0 is provided for &lt;code&gt;dayValue&lt;/code&gt;, the date will be set to the last day of the previous month.</source>
          <target state="translated">&lt;code&gt;dayValue&lt;/code&gt; 가 해당 월의 날짜 값 범위를 벗어나 면 &lt;code&gt;setDate()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체를 적절 하게 업데이트합니다 . 예를 들어 &lt;code&gt;dayValue&lt;/code&gt; 에 0을 제공 하면 날짜가 전월의 마지막 날로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8c831ca3402dbcf2a32deaa1dbe0ffc5d3e40992" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;finally&lt;/code&gt; block returns a value, this value becomes the return value of the entire &lt;code&gt;try-catch-finally&lt;/code&gt; production, regardless of any &lt;code&gt;return&lt;/code&gt; statements in the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks. This includes exceptions thrown inside of the catch block:</source>
          <target state="translated">경우 &lt;code&gt;finally&lt;/code&gt; 블록은 값을 반환,이 값은 전체의 반환 값이됩니다 &lt;code&gt;try-catch-finally&lt;/code&gt; 에 상관없이의 생산 &lt;code&gt;return&lt;/code&gt; 에서 문 &lt;code&gt;try&lt;/code&gt; 및 &lt;code&gt;catch&lt;/code&gt; 블록. 여기에는 catch 블록 내부에서 발생한 예외가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6bd8c3283258f28a255b8f9242378a0b430c842d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;finally&lt;/code&gt;-block returns a value, this value becomes the return value of the entire &lt;code&gt;try-catch-finally&lt;/code&gt; statement, regardless of any &lt;code&gt;return&lt;/code&gt; statements in the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;-blocks. This includes exceptions thrown inside of the &lt;code&gt;catch&lt;/code&gt;-block:</source>
          <target state="translated">는 IF &lt;code&gt;finally&lt;/code&gt; - 블록을 반환 값으로,이 값이 전체의 반환 값이됩니다 &lt;code&gt;try-catch-finally&lt;/code&gt; 어떤 관계없이 문을 &lt;code&gt;return&lt;/code&gt; 에 문을 &lt;code&gt;try&lt;/code&gt; 하고 &lt;code&gt;catch&lt;/code&gt; -blocks. 여기에는 &lt;code&gt;catch&lt;/code&gt; 블록 내부에서 발생한 예외가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="887007377f2e5472d0d2ce3630b6c75058342d26" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;fractionDigits&lt;/code&gt; argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.</source>
          <target state="translated">는 IF &lt;code&gt;fractionDigits&lt;/code&gt; 의 인수를 생략 필요한 숫자의 수에 소수점의 디폴트의 자리수는 고유 값을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3945a3dae8e73ba351db0fe2aed7b731eb381952" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;g&lt;/code&gt; flag is used, all results matching the complete regular expression will be returned, but capturing groups will not.</source>
          <target state="translated">는 IF &lt;code&gt;g&lt;/code&gt; 의 플래그를 사용, 전체 정규 표현식과 일치하는 모든 결과가 반환하지만 캡처 그룹은하지 않습니다됩니다.</target>
        </trans-unit>
        <trans-unit id="ef660d2f00a701c21aacee179340977e0be81003" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;grow()&lt;/code&gt; operation fails for whatever reason, a &lt;a href=&quot;../../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">는 IF &lt;code&gt;grow()&lt;/code&gt; 작업이 어떤 이유로 실패하는 &lt;a href=&quot;../../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="62ed07c8a605b46ecbd26f7316bd0d1b6317b32f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;numObj&lt;/code&gt; is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the &lt;code&gt;numObj&lt;/code&gt; preceded by a &lt;code&gt;-&lt;/code&gt; sign, &lt;strong&gt;not&lt;/strong&gt; the two's complement of the &lt;code&gt;numObj&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;code&gt;numObj&lt;/code&gt; 가 부의 경우, 부호가 유지됩니다. 기수가 2 인 경우에도 마찬가지입니다. 반환 된 문자열의 긍정적 이진 표현이다 &lt;code&gt;numObj&lt;/code&gt; 이 앞에는 &lt;code&gt;-&lt;/code&gt; 기호, &lt;strong&gt;하지&lt;/strong&gt; 의 2의 보수 &lt;code&gt;numObj&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="964309f504b1e8dbcd7544bd0f936b81ccb62f80" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;numObj&lt;/code&gt; is not a whole number, the 'dot' sign is used to separate the decimal places.</source>
          <target state="translated">&lt;code&gt;numObj&lt;/code&gt; 가 정수가 아닌 경우 '점'부호는 소수점 이하 자릿수를 구분하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a28f6f94f14d2f4d2bb91f60f2a5ef633b20a00e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;precision&lt;/code&gt; argument is omitted, behaves as &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt;. If the &lt;code&gt;precision&lt;/code&gt; argument is a non-integer value, it is rounded to the nearest integer.</source>
          <target state="translated">경우] &lt;code&gt;precision&lt;/code&gt; 인수를 생략로서 동작 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt; . 경우 &lt;code&gt;precision&lt;/code&gt; 인수가 정수가 아닌 값, 그것은 가장 가까운 정수로 반올림됩니다.</target>
        </trans-unit>
        <trans-unit id="6a944bff6bb8c754d1d8d302d8f5101d5f14b110" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;radix&lt;/code&gt; is not specified, the preferred radix is assumed to be 10.</source>
          <target state="translated">경우] &lt;code&gt;radix&lt;/code&gt; 지정되지 않은 선호 기수 10으로 가정한다.</target>
        </trans-unit>
        <trans-unit id="d18fb91572aa023d50209da5a43a714383069e99" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;reviver&lt;/code&gt; only transforms some values and not others, be certain to return all untransformed values as-is, otherwise they will be deleted from the resulting object.</source>
          <target state="translated">경우 &lt;code&gt;reviver&lt;/code&gt; 일부 값이 아닌 다른 사람을 변환,있는 그대로 모든 변형되지 않은 값을 반환 할 확신 할 그렇지 않으면 그들은 결과 객체에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="a158dec28bab58d57879567bd00f0791b3830d8a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;revoke()&lt;/code&gt; function gets called, the proxy becomes unusable: Any trap to a handler will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. Once a proxy is revoked, it will remain revoked and can be garbage collected. Calling &lt;code&gt;revoke()&lt;/code&gt; again has no effect.</source>
          <target state="translated">는 IF &lt;code&gt;revoke()&lt;/code&gt; 함수가 호출되는 프록시는 사용할 수 없게됩니다 : 핸들러에 대한 모든 트랩이 발생합니다 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . 프록시가 취소되면 취소 된 상태로 유지되며 가비지 수집 될 수 있습니다. &lt;code&gt;revoke()&lt;/code&gt; 다시 호출 해도 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e826b19fe49a495620cb6d66d9279f62014050dc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;set()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, and the assignment happened in strict-mode code, a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">는 IF &lt;code&gt;set()&lt;/code&gt; 메소드가 반환 &lt;code&gt;false&lt;/code&gt; , 그리고 할당이 엄격한 모드 코드에서 발생하는 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fb5c716988ff9e8f76361370d17e445497a6277b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;str&lt;/code&gt; argument is &lt;strong&gt;not&lt;/strong&gt; a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object, &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; doesn't call this method, nor create a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">경우 &lt;code&gt;str&lt;/code&gt; 인수가 &lt;strong&gt;없는 &lt;/strong&gt;&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체, &lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt; 이 메소드를 호출,도 아니다 만들지 않습니다 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="cf613b15f554627e183a5a0f855d2a4c7a2d77bb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;'currency'&lt;/code&gt;, a &lt;code&gt;currency&lt;/code&gt; property must be provided. Optionally, &lt;code&gt;currencyDisplay&lt;/code&gt; and &lt;code&gt;currencySign&lt;/code&gt; control the unit formatting.</source>
          <target state="translated">는 IF &lt;code&gt;style&lt;/code&gt; 이다 &lt;code&gt;'currency'&lt;/code&gt; 하는 &lt;code&gt;currency&lt;/code&gt; 속성을 제공해야합니다. 선택적으로 &lt;code&gt;currencyDisplay&lt;/code&gt; 및 &lt;code&gt;currencySign&lt;/code&gt; 은 단위 형식을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="5951f79c7aa318ae67f76dd9d9501b02e6390889" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;'unit'&lt;/code&gt;, a &lt;code&gt;unit&lt;/code&gt; property must be provided. Optionally, &lt;code&gt;unitDisplay&lt;/code&gt; controls the unit formatting.</source>
          <target state="translated">는 IF &lt;code&gt;style&lt;/code&gt; 이다 &lt;code&gt;'unit'&lt;/code&gt; 하는 &lt;code&gt;unit&lt;/code&gt; 속성을 제공해야합니다. 선택적으로 &lt;code&gt;unitDisplay&lt;/code&gt; 는 단위 형식을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="8eb4dd6a3439d48edde8782414da2fc33e520fe8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;this&lt;/code&gt; value passed to &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.of&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;this&lt;/code&gt; 값을 전달 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; 생성자 아니다, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.of&lt;/code&gt; 던져 것 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 어디 &lt;code&gt;Array.of&lt;/code&gt; 은 새로운 창조 기본값 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="723c644a1915a6d351777f6cab8660518aaa2659" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;this&lt;/code&gt; value passed to &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.of&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;this&lt;/code&gt; 전달 값 &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; 생성자되지는 &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.of&lt;/code&gt; 던져됩니다 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;Array.of&lt;/code&gt; 의 새로운 창조에 기본값을&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="09c65f33aa598404d3369137e257e8e881b958f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;toString()&lt;/code&gt; method is called on a function created by the &lt;code&gt;Function&lt;/code&gt; constructor, &lt;code&gt;toString()&lt;/code&gt; returns the source code of a synthesized function declaration named &quot;anonymous&quot; using the provided parameters and function body.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 생성자가 만든 함수 에서 &lt;code&gt;toString()&lt;/code&gt; 메서드를 호출 하면 &lt;code&gt;toString()&lt;/code&gt; 은 제공된 매개 변수와 함수 본문을 사용하여 &quot;anonymous&quot;라는 합성 함수 선언의 소스 코드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2d395675e98f1c324b31de3e7f800ca7f0ca1d0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;toString()&lt;/code&gt; method is called on built-in function objects or a function created by &lt;code&gt;Function.prototype.bind&lt;/code&gt;, &lt;code&gt;toString()&lt;/code&gt; returns a &lt;em&gt;native function string&lt;/em&gt; which looks like</source>
          <target state="translated">내장 함수 객체 또는 &lt;code&gt;Function.prototype.bind&lt;/code&gt; 로 작성된 함수 에서 &lt;code&gt;toString()&lt;/code&gt; 메소드가 호출 되면 &lt;code&gt;toString()&lt;/code&gt; 은 다음과 같은 &lt;em&gt;기본 함수 문자열&lt;/em&gt; 을 리턴합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="97c0dc3a0c924bef934b157bfd71aa0df99712cd" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;year&lt;/code&gt; option is not set in the bag (to any value), the result will include only the &lt;code&gt;relatedYear&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; 옵션이 bag에 설정되지 않은 경우 (어떤 값으로도) 결과에는 &lt;code&gt;relatedYear&lt;/code&gt; 만 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="4e56640ad0ffad1ff5993fcb62e39036efe032f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;|this|&lt;/code&gt; value passed to &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; is not a constructor, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;Array.from&lt;/code&gt; defaults to creating a new &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">만약 &lt;code&gt;|this|&lt;/code&gt; 전달 값 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; 생성자 아니다, &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; 던져 것 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 어디 &lt;code&gt;Array.from&lt;/code&gt; 은 새로운 창조 기본값 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="77fff64ff9eae8df8bbff897e13e7521a4049f5a" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;iterable&lt;/var&gt; contains non-promise values, they will be ignored, but still counted in the returned promise array value (if the promise is fulfilled):</source>
          <target state="translated">&lt;var&gt;iterable&lt;/var&gt; 에 약속이 아닌 값이 포함되어 있으면 값이 무시되지만 반환 된 약속 배열 값 (약속이 이행 된 경우)에 계속 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="4d5a749e884b72ff7fdb5c875dfb8ade05e78e57" translate="yes" xml:space="preserve">
          <source>If the JavaScript interpreter cannot guarantee that all the provided arguments are numbers at the point that the call is made, it needs to either insert checks for all the arguments before the inlined code, or it cannot inline the function. Now in this particular case a smart interpreter should be able to rearrange the checks to be more optimal and not check any values that would not be used. However in many cases that's just not possible and therefore it becomes impossible to inline.</source>
          <target state="translated">JavaScript 인터프리터가 제공된 모든 인수가 호출 시점의 숫자임을 보장 할 수없는 경우 인라인 된 코드 앞에 모든 인수에 대한 검사를 삽입하거나 함수를 인라인 할 수 없습니다. 이제이 특별한 경우에, 스마트 통역사는보다 최적의 수표를 재정렬하고 사용하지 않을 값을 점검하지 않아야합니다. 그러나 많은 경우에 그것은 가능하지 않으므로 인라인하는 것이 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="68a358bd84ef01c0635528f27a3fd8e8510d7208" translate="yes" xml:space="preserve">
          <source>If the above is written using traditional function-based syntax, then autoboxing in method calls will happen in non&amp;ndash;strict mode based on the initial &lt;em&gt;this&lt;/em&gt; value. If the initial value is &lt;code&gt;undefined&lt;/code&gt;, &lt;em&gt;this&lt;/em&gt; will be set to the global object.</source>
          <target state="translated">위가 기존 기능 기반 구문을 사용하여 작성되는 경우, 초기에 따라 비 엄격 모드에서 일어날 메서드 호출에 오토 박싱 &lt;em&gt;이&lt;/em&gt; 값. 초기 값이 경우 &lt;code&gt;undefined&lt;/code&gt; , &lt;em&gt;이것은&lt;/em&gt; 전역 객체로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="2de2f8611418b917390e5f634cefd48a2681c4fe" translate="yes" xml:space="preserve">
          <source>If the argument cannot be converted into a number, it returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수를 숫자로 변환 할 수 없으면 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="f86e9bf415bebd29a0f92aca1846c02d35a1eafa" translate="yes" xml:space="preserve">
          <source>If the argument is negative zero, returns &lt;code&gt;-0&lt;/code&gt;.</source>
          <target state="translated">인수가 음수 0이면 다음을 반환합니다. &lt;code&gt;-0&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="289d26426ef6dd5e6d6eab0c14be2df2d5ca5e8d" translate="yes" xml:space="preserve">
          <source>If the argument is negative, returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">인수가 음수 &lt;code&gt;-1&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c6e8a717149be7c86d7d72f862e113481d8afe3c" translate="yes" xml:space="preserve">
          <source>If the argument is positive zero, returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">인수가 정의 제로 인 경우, 반환 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d32df946129f68834ae9d6e3c48b76560ca41a5" translate="yes" xml:space="preserve">
          <source>If the argument is positive, returns &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">인수가 양수이면 &lt;code&gt;1&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="48a314159461e2f1c2180c3f2cc15ad46da26b49" translate="yes" xml:space="preserve">
          <source>If the argument of &lt;code&gt;eval()&lt;/code&gt; is not a string, &lt;code&gt;eval()&lt;/code&gt; returns the argument unchanged. In the following example, the &lt;code&gt;String&lt;/code&gt; constructor is specified and &lt;code&gt;eval()&lt;/code&gt; returns a &lt;code&gt;String&lt;/code&gt; object rather than evaluating the string.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 의 인수가 문자열이 아닌 경우 &lt;code&gt;eval()&lt;/code&gt; 은 인수를 변경하지 않고 리턴합니다. 다음 예제에서는 &lt;code&gt;String&lt;/code&gt; 생성자가 지정되고 &lt;code&gt;eval()&lt;/code&gt; 은 문자열을 평가하지 않고 &lt;code&gt;String&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="1bfa86a1ae20fafacc59165c12911fe2c76ebf6c" translate="yes" xml:space="preserve">
          <source>If the argument&amp;rsquo;s first character can&amp;rsquo;t be converted to a number (it&amp;rsquo;s not any of the above characters), &lt;code&gt;parseFloat&lt;/code&gt; returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">인수의 첫 문자를 숫자로 변환 할 수없는 경우 (위의 문자가 아님) &lt;code&gt;parseFloat&lt;/code&gt; 는 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9039cba0fc2b860a2bac0dd4ce6f62caa5dec6d9" translate="yes" xml:space="preserve">
          <source>If the arguments are not of the type string, they are converted to string values before concatenating.</source>
          <target state="translated">인수가 문자열 유형이 아닌 경우 연결하기 전에 문자열 값으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="8fa2bcd893cb4d56cf48e54162eb8eabb074cee3" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">배열이 비어 있고 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 가 제공 되지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="251133e014c170d65b3f1b94cd31ef8f9657cbc6" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; was provided, or if &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided but the array is empty, the solo value would be returned without calling &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">배열이 비어 있고 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 가 제공 되지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 배열에 (위치에 관계없이) 요소가 하나만 있고 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 가 제공 되지 않았 거나 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 가 제공되었지만 배열이 비어있는 경우 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 을 호출하지 않고 solo 값이 반환됩니다. .</target>
        </trans-unit>
        <trans-unit id="8ca4c7e25be73952009dedc5b8fea1da899df392" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;initialValue &lt;/code&gt;was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;initialValue &lt;/code&gt;was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">배열이 비어 있고 &lt;code&gt;initialValue &lt;/code&gt; 가 제공 되지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 배열에 요소가 하나만 있고 (위치에 관계없이) &lt;code&gt;initialValue &lt;/code&gt; 가 제공 되지 않았 거나 &lt;code&gt;initialValue&lt;/code&gt; 가 제공되었지만 배열이 비어있는 경우 &lt;code&gt;callback&lt;/code&gt; 을 호출하지 않고 솔로 값이 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="2c59f20390f4add64d4abadd81feb605dba0b978" translate="yes" xml:space="preserve">
          <source>If the array is empty and no &lt;code&gt;initialValue&lt;/code&gt; is provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be thrown. If the array has only one element (regardless of position) and no &lt;code&gt;initialValue&lt;/code&gt; is provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the array is empty, the solo value will be returned &lt;em&gt;without calling &lt;code&gt;callback&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">배열이 비어 있고 &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않으면 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 배열에 요소가 하나만 있고 (위치에 관계없이) &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않거나 &lt;code&gt;initialValue&lt;/code&gt; 가 제공되었지만 배열이 비어있는 경우 &lt;em&gt; &lt;code&gt;callback&lt;/code&gt; &lt;/em&gt;&lt;em&gt; 을 호출하지 않고&lt;/em&gt; 솔로 값이 반환 &lt;em&gt;됩니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1066bdb8f6e775da5b0f08dd139c62f7735718b8" translate="yes" xml:space="preserve">
          <source>If the array is modified during iteration, other elements might be skipped.</source>
          <target state="translated">반복 중에 배열을 수정하면 다른 요소를 건너 뛸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7918e87d675662b81e34c9d4d3015efc6c03c96" translate="yes" xml:space="preserve">
          <source>If the array only has one element (regardless of position) and no &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, or if &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided but the array is empty, the solo value will be returned &lt;em&gt;without &lt;/em&gt;calling&lt;em&gt; &lt;code&gt;callback&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">배열에 (위치에 관계없이) 요소가 하나만 있고 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 가 제공 되지 않거나 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 가 제공되었지만 배열이 비어있는 경우 &lt;em&gt; &lt;code&gt;callback&lt;/code&gt; &lt;/em&gt;&lt;em&gt; 을&lt;/em&gt; 호출 &lt;em&gt;하지 않고&lt;/em&gt; solo 값이 반환 &lt;em&gt;됩니다.&lt;/em&gt;&lt;em&gt; .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e8c9b894a110d1dce237c3ffe9e8ff7d483f6e8" translate="yes" xml:space="preserve">
          <source>If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker thread, retrieves remote file, etc).</source>
          <target state="translated">속성 값 계산이 비싼 경우 (RAM 또는 CPU 시간이 많이 걸리고 작업자 스레드를 생성하고 원격 파일을 검색하는 등)</target>
        </trans-unit>
        <trans-unit id="b4773ffb9070fe50ec4b5a95d53687ea8941a3c4" translate="yes" xml:space="preserve">
          <source>If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker threads, retrieves remote file, etc).</source>
          <target state="translated">속성 값 계산이 비용이 많이 드는 경우 (RAM 또는 CPU 시간이 많이 걸리고 작업자 스레드가 생성되고 원격 파일을 검색하는 등)</target>
        </trans-unit>
        <trans-unit id="97084eab376f3b04d4908cc6bf47f923311c72b1" translate="yes" xml:space="preserve">
          <source>If the converted 32-bit unsigned integer is &lt;code&gt;0&lt;/code&gt;, then return &lt;code&gt;32&lt;/code&gt;, because all bits are &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">변환 된 32 비트 부호없는 정수가 &lt;code&gt;0&lt;/code&gt; 이면 모든 비트가 &lt;code&gt;0&lt;/code&gt; 이므로 &lt;code&gt;32&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="0ad167e307d5ae6b6eba5969fea22aadee5ee633" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">이 메소드의 첫 번째 인수가 객체 (기본)가 아닌 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 . &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt; 를&lt;/a&gt; 사용하면 객체가 아닌 첫 번째 인수가 객체에 강제됩니다.</target>
        </trans-unit>
        <trans-unit id="f5e9511e31d3fc65e2014860d72bf862465ad596" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">이 메소드의 첫 번째 인수가 객체 (기본)가 아닌 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 . &lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; 사용하면 객체가 아닌 첫 번째 인수가 객체에 강제됩니다.</target>
        </trans-unit>
        <trans-unit id="1fce2befc5daf124a888421997f4eb1a74803bb3" translate="yes" xml:space="preserve">
          <source>If the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. With &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">이 메소드의 첫 번째 인수가 객체 (기본)가 아닌 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 . &lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; 사용하면 객체 가 아닌 첫 번째 인수가 처음에 객체에 강제됩니다.</target>
        </trans-unit>
        <trans-unit id="74367fdf24ade95ee132ed1601c1dd829d6eab8f" translate="yes" xml:space="preserve">
          <source>If the first character cannot be converted to a number with the radix in use, &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">첫 번째 문자를 사용중인 기수가있는 숫자로 변환 할 수없는 경우 &lt;code&gt;parseInt&lt;/code&gt; 는 &lt;code&gt;NaN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ace5bb08886884c70b8510126b7ab1ac0624e793" translate="yes" xml:space="preserve">
          <source>If the first character cannot be converted to a number, &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">첫 번째 문자를 숫자로 변환 할 수 없으면 &lt;code&gt;parseInt&lt;/code&gt; 는 &lt;code&gt;NaN&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2466baa3d5ce80a7bc532ef0c023761bde57195c" translate="yes" xml:space="preserve">
          <source>If the first parameter is an object, each slot in the array will reference that object.</source>
          <target state="translated">첫 번째 매개 변수가 객체이면 배열의 각 슬롯이 해당 객체를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="e759c6695a2302d21f9826503a1de5738e34c26d" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 불변이 위반되면 프록시는 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를 발생&lt;/a&gt; 시킵니다.</target>
        </trans-unit>
        <trans-unit id="e830391a32752966b6f8d6e46ae869596b43464d" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음과 같은 불변이 위반되면 프록시는 &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를 발생&lt;/a&gt; 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="02ea11ae320384d65baba2b2012559732cdf307a" translate="yes" xml:space="preserve">
          <source>If the following invariants are violated, the proxy will throw a TypeError:</source>
          <target state="translated">다음과 같은 변형이 위반되면 프록시에서 TypeError가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9a774c38f7a09fed2dfaac1cf3398252fa33b21d" translate="yes" xml:space="preserve">
          <source>If the fractional portion of the argument is greater than 0.5, the argument is rounded to the integer with the next higher absolute value. If it is less than 0.5, the argument is rounded to the integer with the lower absolute value. If the fractional portion is exactly 0.5, the argument is rounded to the next integer in the direction of +&amp;infin;. &lt;strong&gt;Note that this differs from many languages' &lt;code&gt;round()&lt;/code&gt; functions, which often round this case to the next integer &lt;em&gt;away from zero&lt;/em&gt;&lt;/strong&gt;, instead giving a different result in the case of negative numbers with a fractional part of exactly 0.5.</source>
          <target state="translated">인수의 소수 부분이 0.5보다 큰 경우 인수는 다음으로 높은 절대 값을 갖는 정수로 반올림됩니다. 0.5보다 작은 경우 인수는 절대 값이 더 낮은 정수로 반올림됩니다. 소수 부분이 정확히 0.5 인 경우 인수는 + &amp;infin; 방향으로 다음 정수로 반올림됩니다. &lt;strong&gt;이것은 많은 언어의 &lt;code&gt;round()&lt;/code&gt; 함수 와 다릅니다.이 함수는 종종이 경우를 &lt;em&gt;0&lt;/em&gt;&lt;/strong&gt; 에서 &lt;strong&gt;&lt;em&gt;멀어지는&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; 다음 정수로 반올림&lt;/strong&gt; 하는 대신 분수가 정확히 0.5 인 음수의 경우 다른 결과를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b0634e6f899b35ea60f41dd19d559af0166b4abf" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;eval&lt;/code&gt; is invoked by an expression of the form &lt;code&gt;eval(...)&lt;/code&gt; in strict mode code, the code will be evaluated as strict mode code. The code may explicitly invoke strict mode, but it's unnecessary to do so.</source>
          <target state="translated">엄격 모드 코드에서 &lt;code&gt;eval(...)&lt;/code&gt; 형식의 표현식으로 함수 &lt;code&gt;eval&lt;/code&gt; 을 호출 하면 코드는 엄격 모드 코드로 평가됩니다. 코드는 엄격하게 엄격 모드를 호출 할 수 있지만 그렇게 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="05bd31a40e7ca7512908a8b320de5524c479ea0e" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;f&lt;/code&gt; was invoked by the top level code, the value of &lt;code&gt;f.caller&lt;/code&gt; is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, otherwise it's the function that called &lt;code&gt;f&lt;/code&gt;. It's also &lt;code&gt;null&lt;/code&gt; for strict, async function and generator function callers.</source>
          <target state="translated">함수 &lt;code&gt;f&lt;/code&gt; 가 최상위 코드에 의해 호출 된 경우 &lt;code&gt;f.caller&lt;/code&gt; 의 값 은 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 이고, 그렇지 않으면 &lt;code&gt;f&lt;/code&gt; 를 호출 한 함수입니다 . 엄격한 비동기 함수 및 생성기 함수 호출자에 대해서도 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="24479fad2ce8f41c59aa63feefedbe701c9c9fa0" translate="yes" xml:space="preserve">
          <source>If the function passed as handler to &lt;code&gt;then&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt;, an equivalent &lt;code&gt;Promise&lt;/code&gt; will be exposed to the subsequent &lt;code&gt;then&lt;/code&gt; in the method chain. The below snippet simulates asynchronous code with the &lt;code&gt;setTimeout&lt;/code&gt; function.</source>
          <target state="translated">핸들러로서 기능이 경과하면 &lt;code&gt;then&lt;/code&gt; 반환 &lt;code&gt;Promise&lt;/code&gt; , 등가 &lt;code&gt;Promise&lt;/code&gt; 이후에 노출되는 &lt;code&gt;then&lt;/code&gt; 있어서 체인. 아래 스 니펫은 &lt;code&gt;setTimeout&lt;/code&gt; 함수를 사용하여 비동기 코드를 시뮬레이션 합니다.</target>
        </trans-unit>
        <trans-unit id="d889ec98d8457e0aea924810e5726b978b821209" translate="yes" xml:space="preserve">
          <source>If the function should be in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, and the entire script or enclosing function is also okay to be in strict mode, you can move the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive outside of the function:</source>
          <target state="translated">함수가 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드에&lt;/a&gt; 있어야 하고 전체 스크립트 또는 엔 클로징 함수도 엄격 모드에있는 것이 괜찮 으면 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 지시문을 함수 외부 로 이동할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="32ec2a558d2d7d263d497637245a807ee03c4f24" translate="yes" xml:space="preserve">
          <source>If the host system is configured for daylight saving, the offset will change depending on the date and time that the Date represents and that daylight saving applies.</source>
          <target state="translated">호스트 시스템이 일광 절약으로 구성된 경우 오프셋은 날짜가 나타내는 날짜 및 시간과 해당 일광 절약이 적용되는 시간에 따라 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="62f63a4a41145b733714a201b2e285ab0739d3b7" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;0&quot;, &lt;var&gt;radix&lt;/var&gt; is eight (octal) or 10 (decimal). Exactly which radix is chosen is implementation-dependent. ECMAScript 5 specifies that 10 (decimal) is used, but not all browsers support this yet. For this reason &lt;code&gt;parseInt&lt;/code&gt;.</source>
          <target state="translated">입력 &lt;code&gt;string&lt;/code&gt; 이 &quot;0&quot;으로 시작하면 &lt;var&gt;radix&lt;/var&gt; 는 8 (8 진수) 또는 10 (10 진수)입니다. 어떤 기수가 선택되는지는 구현에 따라 다릅니다. ECMAScript 5는 10 (10 진수)이 사용되도록 지정하지만 모든 브라우저에서 아직이 기능을 지원하지는 않습니다. 이런 이유로 &lt;code&gt;parseInt&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="014fd7b5028fdfd4181a76d255e1c44887ca6dae" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;0x&quot; or &quot;0X&quot;, &lt;var&gt;radix&lt;/var&gt; is 16 (hexadecimal) and the remainder of the string is parsed.</source>
          <target state="translated">입력 &lt;code&gt;string&lt;/code&gt; 이 &quot;0x&quot;또는 &quot;0X&quot;로 시작하면 &lt;var&gt;radix&lt;/var&gt; 는 16 (16 진수)이고 나머지 문자열은 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="f247d76b51985796282d05631d015cfe0ded8f0d" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;&lt;code&gt;0&lt;/code&gt;&quot; (a zero), &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is assumed to be &lt;code&gt;8&lt;/code&gt; (octal) or &lt;code&gt;10&lt;/code&gt; (decimal). Exactly which radix is chosen is implementation-dependent. ECMAScript 5 clarifies that &lt;code&gt;10&lt;/code&gt; (decimal) &lt;em&gt;should&lt;/em&gt; be used, but not all browsers support this yet. For this reason, &lt;strong&gt;always specify a &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; when using &lt;code&gt;parseInt&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">입력 &lt;code&gt;string&lt;/code&gt; 이 &quot; &lt;code&gt;0&lt;/code&gt; &quot;(0)으로 시작 하는 경우 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 는 &lt;code&gt;8&lt;/code&gt; (8 진수) 또는 &lt;code&gt;10&lt;/code&gt; (10 진수)으로 간주됩니다 . 정확히 어떤 기수가 선택되는지는 구현에 따라 다릅니다. ECMAScript 5는 &lt;code&gt;10&lt;/code&gt; (십진수)을 &lt;em&gt;사용해야한다고&lt;/em&gt; 명시하지만 모든 브라우저가 아직이를 지원하지는 않습니다. 이러한 이유로 &lt;strong&gt; &lt;code&gt;parseInt&lt;/code&gt; 를&lt;/strong&gt;&lt;strong&gt; 사용할 때는 &lt;/strong&gt;&lt;strong&gt;항상 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 지정하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="85d899c9908f1b8511a58cfbfbbc6efdff187932" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with &quot;&lt;code&gt;0x&lt;/code&gt;&quot; or &quot;&lt;code&gt;0X&lt;/code&gt;&quot; (a zero, followed by lowercase or uppercase X), &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; is assumed to be &lt;code&gt;16&lt;/code&gt; and the rest of the string is parsed as a hexidecimal number.</source>
          <target state="translated">입력 &lt;code&gt;string&lt;/code&gt; 이 &quot; &lt;code&gt;0x&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;0X&lt;/code&gt; &quot;(0 다음에 소문자 또는 대문자 X)로 시작하면 &lt;code&gt;&lt;var&gt;radix&lt;/var&gt;&lt;/code&gt; 는 &lt;code&gt;16&lt;/code&gt; 으로 간주됩니다. 나머지 문자열은 16 진수로 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="7391a0c805a3a7880ff98c62370413cf4a99a3c4" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with any other value, the radix is 10 (decimal).</source>
          <target state="translated">입력 &lt;code&gt;string&lt;/code&gt; 이 다른 값으로 시작하면 기수가 10 (10 진수)입니다.</target>
        </trans-unit>
        <trans-unit id="d48b16e0cf301f14341f3f7bd0a5ddc3c6245fa4" translate="yes" xml:space="preserve">
          <source>If the input &lt;code&gt;string&lt;/code&gt; begins with any other value, the radix is &lt;code&gt;10&lt;/code&gt; (decimal).</source>
          <target state="translated">입력 &lt;code&gt;string&lt;/code&gt; 이 다른 값으로 시작하는 경우 기수는 &lt;code&gt;10&lt;/code&gt; (10 진수)입니다.</target>
        </trans-unit>
        <trans-unit id="d8f0eb6abc2d809f6720afec4140ffa6145e1b16" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already resolved/rejected promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the array:</source>
          <target state="translated">iterable에 하나 이상의 비 약속 값 및 / 또는 이미 해결 / 거절 된 약속이 포함 된 경우 &lt;code&gt;Promise.race&lt;/code&gt; 는 배열에서 찾은 다음 값 중 첫 번째 값으로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="42bb8061af2674b09d2e81c3c794c84558b5c8c1" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already resolved/rejected promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the iterable.</source>
          <target state="translated">iterable에 하나 이상의 비 약속 값 및 / 또는 이미 해결 / 거절 된 약속이 포함 된 경우 &lt;code&gt;Promise.race&lt;/code&gt; 는 iterable에서 찾은 첫 번째 값으로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="eba5348fb21f253314c74035ef8a94d981d39d85" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already settled promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the array:</source>
          <target state="translated">iterable에 하나 이상의 비 약속 값 및 / 또는 이미 확정 된 약속이 포함 된 경우 &lt;code&gt;Promise.race&lt;/code&gt; 는 배열에서 찾은 다음 값 중 첫 번째 값으로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="8455736e47a9a384da44aad6c284be518f32649f" translate="yes" xml:space="preserve">
          <source>If the iterable contains one or more non-promise value and/or an already settled promise, then &lt;code&gt;Promise.race&lt;/code&gt; will resolve to the first of these values found in the iterable.</source>
          <target state="translated">iterable에 하나 이상의 비 약속 값 및 / 또는 이미 확정 된 약속이 포함 된 경우 &lt;code&gt;Promise.race&lt;/code&gt; 는 iterable에서 찾은 이러한 값 중 첫 번째 값으로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="133cdb90b6400a76c679993e7493ba162315d6a4" translate="yes" xml:space="preserve">
          <source>If the iterable passed is empty, the promise returned will be forever pending.</source>
          <target state="translated">전달 된 iterable이 비어 있으면 리턴 된 약속은 영원히 보류됩니다.</target>
        </trans-unit>
        <trans-unit id="5929c9470016412d62a0f7f3f9a21acab412f404" translate="yes" xml:space="preserve">
          <source>If the match fails, the &lt;code&gt;exec()&lt;/code&gt; method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, and sets &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">일치가 실패하면 &lt;code&gt;exec()&lt;/code&gt; 메서드는 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 을&lt;/a&gt; 반환 하고 &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;0&lt;/code&gt; 으로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="fed5bcc169dd3c7fb57fbf0f3eae42cda09790da" translate="yes" xml:space="preserve">
          <source>If the match fails, the &lt;code&gt;exec()&lt;/code&gt; method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일치에 실패하면 &lt;code&gt;exec()&lt;/code&gt; 메소드는 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 을&lt;/a&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="992c9b88d4c619e867d5faf6f752e55dcfba43d1" translate="yes" xml:space="preserve">
          <source>If the match succeeds, the &lt;code&gt;exec()&lt;/code&gt; method returns an array (with extra properties &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt;; see below) and updates the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text.</source>
          <target state="translated">일치가 성공하면 &lt;code&gt;exec()&lt;/code&gt; 메서드는 배열 (추가 속성 &lt;code&gt;index&lt;/code&gt; 및 &lt;code&gt;input&lt;/code&gt; , 아래 참조)을 반환하고 정규식 객체 의 &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; 속성을 업데이트 합니다. 반환 된 배열에는 첫 번째 항목으로 일치하는 텍스트가 있고 일치하는 텍스트의 각 괄호 캡처 그룹에 대해 하나의 항목이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad048d5802a4482d98378bb3e60f9d8891c84dff" translate="yes" xml:space="preserve">
          <source>If the match succeeds, the &lt;code&gt;exec()&lt;/code&gt; method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured.</source>
          <target state="translated">일치하는 경우 &lt;code&gt;exec()&lt;/code&gt; 메서드는 배열을 반환하고 정규식 객체의 속성을 업데이트합니다. 반환 된 배열에는 일치하는 텍스트가 첫 번째 항목으로 지정된 다음 캡처 된 텍스트를 포함하는 일치하는 각 캡처 괄호에 대해 하나의 항목이 있습니다.</target>
        </trans-unit>
        <trans-unit id="06b04d89d7ced98dfbbede5881b9b567808008e8" translate="yes" xml:space="preserve">
          <source>If the method is a function in &lt;a href=&quot;../../strict_mode&quot;&gt;non-strict mode&lt;/a&gt;, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; will be replaced with the global object, and primitive values will be converted to objects.</source>
          <target state="translated">상기 방법은 함수의 경우 &lt;a href=&quot;../../strict_mode&quot;&gt;비 엄격 모드&lt;/a&gt; , &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 하고 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 전역 객체로 대체 될 것이며, 기본 값은 오브젝트로 변환한다.</target>
        </trans-unit>
        <trans-unit id="d74a4cb5fa65d9b34a16e5d974e6dcf978094959" translate="yes" xml:space="preserve">
          <source>If the number is greater than 1e+21 (including) or less than 1e-7 (including), it will return &lt;code&gt;1&lt;/code&gt;. (when using radix 10).</source>
          <target state="translated">숫자가 1e + 21 (포함)보다 크거나 1e-7 (포함)보다 작 으면 &lt;code&gt;1&lt;/code&gt; 을 반환합니다. 합니다. (기수 10을 사용하는 경우).</target>
        </trans-unit>
        <trans-unit id="076b090beef22f90ac6afa326097c3fb2ace6350" translate="yes" xml:space="preserve">
          <source>If the object is sealed/frozen then the change has no effect and no exception is thrown:</source>
          <target state="translated">객체가 봉인 / 고정 된 경우 변경 사항이 적용되지 않으며 예외가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="07ccc48a8d47601113458d419e32b12076ea766d" translate="yes" xml:space="preserve">
          <source>If the only argument passed to the &lt;code&gt;Array&lt;/code&gt; constructor is an integer between 0 and 2&lt;sup&gt;32&lt;/sup&gt;-1 (inclusive), this returns a new JavaScript array with its &lt;code&gt;length&lt;/code&gt; property set to that number (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;arrayLength&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values). If the argument is any other number, a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception is thrown.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 생성자에 전달 된 유일한 인수 가 0에서 2 &lt;sup&gt;32&lt;/sup&gt; -1 (포함) 사이의 정수인 경우 &lt;code&gt;length&lt;/code&gt; 속성이 해당 숫자로 설정된 새 JavaScript 배열을 반환합니다 ( &lt;strong&gt;참고 :&lt;/strong&gt; 이것은 &lt;code&gt;arrayLength&lt;/code&gt; 빈 슬롯 의 배열을 의미합니다. 실제 &lt;code&gt;undefined&lt;/code&gt; 값이있는 슬롯 ). 인수가 다른 숫자이면 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea7372e8703a5521adb89c3b333094c42fd39770" translate="yes" xml:space="preserve">
          <source>If the only argument passed to the &lt;code&gt;Array&lt;/code&gt; constructor is an integer between 0 and 2&lt;sup&gt;32&lt;/sup&gt;-1 (inclusive), this returns a new JavaScript array with its &lt;code&gt;length&lt;/code&gt; property set to that number (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;arrayLength&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values). If the argument is any other number, a &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception is thrown.</source>
          <target state="translated">에 전달되는 유일한 인수하는 경우 &lt;code&gt;Array&lt;/code&gt; 생성자는 0과 2 사이의 정수 &lt;sup&gt;(32)&lt;/sup&gt; -1 (포함), 그와 함께 새로운 자바 스크립트 배열이 반환 &lt;code&gt;length&lt;/code&gt; 그 수 (에 속성 집합 &lt;strong&gt;: 참고&lt;/strong&gt; 이의 배열을 의미한다 &lt;code&gt;arrayLength&lt;/code&gt; 빈 슬롯을하지 않음 실제 &lt;code&gt;undefined&lt;/code&gt; 값이있는 슬롯 ). 인수가 다른 숫자이면 &lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c151f90630c0da1907fe3ede9799a04e02835ced" translate="yes" xml:space="preserve">
          <source>If the operands are both objects, return &lt;code&gt;true&lt;/code&gt; only if both operands reference the same object.</source>
          <target state="translated">피연산자가 두 개체 인 경우 두 피연산자가 동일한 개체를 참조하는 경우에만 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="33939db6a50d98508eed0a834601097c3eacd494" translate="yes" xml:space="preserve">
          <source>If the operands are of different types, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">피연산자가 다른 유형이면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="84881d69ed9598fe6d4fdbd0dbf254ee65068845" translate="yes" xml:space="preserve">
          <source>If the operands are of different types, try to convert them to the same type before comparing:</source>
          <target state="translated">피연산자의 유형이 다른 경우 비교하기 전에 동일한 유형으로 변환 해보십시오.</target>
        </trans-unit>
        <trans-unit id="29b04c75a7118532d56bf833fa26085a56463036" translate="yes" xml:space="preserve">
          <source>If the operands have the same type, they are compared as follows:</source>
          <target state="translated">피연산자의 유형이 동일한 경우 다음과 같이 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="3de7d3547772b56e44d561daed2b5f4e5c0051e3" translate="yes" xml:space="preserve">
          <source>If the operation fails, the promise rejects with a &lt;a href=&quot;compileerror&quot;&gt;&lt;code&gt;WebAssembly.CompileError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;linkerror&quot;&gt;&lt;code&gt;WebAssembly.LinkError&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt;&lt;/a&gt;, depending on the cause of the failure.</source>
          <target state="translated">작업이 실패하면 약속은 실패 원인에 따라 &lt;a href=&quot;compileerror&quot;&gt; &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;linkerror&quot;&gt; &lt;code&gt;WebAssembly.LinkError&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;WebAssembly.RuntimeError&lt;/code&gt; 로&lt;/a&gt; 거부됩니다 .</target>
        </trans-unit>
        <trans-unit id="c7ae6267575070773ce0e34354913d3b4cb253db" translate="yes" xml:space="preserve">
          <source>If the parameter cannot be converted to a number, or it is &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt; (&lt;code&gt;NaN&lt;/code&gt;), &lt;code&gt;Math.fround()&lt;/code&gt; will return &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">매개 변수를 숫자로 변환 할 수 없거나 숫자가 &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;아닌&lt;/a&gt; ( &lt;code&gt;NaN&lt;/code&gt; ) 경우 &lt;code&gt;Math.fround()&lt;/code&gt; 는 &lt;code&gt;NaN&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a4cb915c64d1dc820b0c684cdac48718bd6a3e1d" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, &lt;code&gt;delete&lt;/code&gt; will not have any effect and will return &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">삭제하려는 속성이 존재하지 않으면 &lt;code&gt;delete&lt;/code&gt; 는 아무런 영향을 미치지 않으며 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9571ccb67395bfe77750e491cdef9006177ddfa8" translate="yes" xml:space="preserve">
          <source>If the property which you are trying to delete does not exist, &lt;code&gt;delete&lt;/code&gt; will not have any effect and will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">삭제하려는 속성이 존재하지 않으면 &lt;code&gt;delete&lt;/code&gt; 는 아무런 영향을주지 않으며 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="928fd5633160fac29d5cef2872c5f9bc821a1144" translate="yes" xml:space="preserve">
          <source>If the regex has the global flag set, &lt;code&gt;test()&lt;/code&gt; will advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; of the regex. A subsequent use of &lt;code&gt;test()&lt;/code&gt; will start the search at the substring of &lt;code&gt;str&lt;/code&gt; specified by &lt;code&gt;lastIndex&lt;/code&gt; (&lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; will also advance the &lt;code&gt;lastIndex&lt;/code&gt; property). It is worth noting that the &lt;code&gt;lastIndex&lt;/code&gt; will not reset when testing a different string.</source>
          <target state="translated">정규식에 전역 플래그가 설정되어 있으면 &lt;code&gt;test()&lt;/code&gt; 는 정규식 의 &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; 를 진행시킵니다 . 나중에 &lt;code&gt;test()&lt;/code&gt; 하면 &lt;code&gt;lastIndex&lt;/code&gt; 에 의해 지정된 &lt;code&gt;str&lt;/code&gt; 의 하위 문자열에서 검색이 시작 됩니다 ( &lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 도 &lt;code&gt;lastIndex&lt;/code&gt; 속성을 진행시킵니다 ). 그것은 것을 주목할 가치가있다 &lt;code&gt;lastIndex&lt;/code&gt; 속성은 다른 문자열을 테스트 할 때 재설정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="54e623d784ebb3ca9ec36dc663b3600d3fafdecc" translate="yes" xml:space="preserve">
          <source>If the regular expression does not include the &lt;code&gt;g&lt;/code&gt; flag, &lt;code&gt;str.match()&lt;/code&gt; will return the same result as &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정규식에 &lt;code&gt;g&lt;/code&gt; 플래그가 포함되지 않은 경우 &lt;code&gt;str.match()&lt;/code&gt; 는 &lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt; 와 동일한 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ce0d349d09340572916f1b2c5d1d97584f2175f9" translate="yes" xml:space="preserve">
          <source>If the regular expression does not include the &lt;code&gt;g&lt;/code&gt; flag, &lt;code&gt;str.match()&lt;/code&gt; will return the same result as &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt;. The returned &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; has an extra &lt;code&gt;input&lt;/code&gt; property, which contains the original string that was parsed. In addition, it has an &lt;code&gt;index&lt;/code&gt; property, which represents the zero-based index of the match in the string.</source>
          <target state="translated">정규식에 &lt;code&gt;g&lt;/code&gt; 플래그가 포함되지 않은 경우 &lt;code&gt;str.match()&lt;/code&gt; 는 &lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt; 와 동일한 결과를 반환합니다 . 반환 된 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 에는 구문 분석 된 원래 문자열이 포함 된 추가 &lt;code&gt;input&lt;/code&gt; 속성이 있습니다. 또한 문자열에 일치하는 인덱스 (0부터 시작)를 나타내는 &lt;code&gt;index&lt;/code&gt; 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="30138364a3c3af0aa6191de310201697ce047a82" translate="yes" xml:space="preserve">
          <source>If the regular expression includes the &lt;code&gt;g&lt;/code&gt; flag, the method returns an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing all matched substrings rather than match objects. Captured groups are not returned. If there were no matches, the method returns &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정규 표현식에 &lt;code&gt;g&lt;/code&gt; 플래그가 포함 된 경우, 메소드는 일치 오브젝트가 아닌 일치하는 모든 서브 스트링을 포함 하는 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 을 리턴 합니다. 캡처 한 그룹은 반환되지 않습니다. 일치하는 것이 없으면 메서드는 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 을&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8b959552ef94320337e1ed0aeb1c7362f749576d" translate="yes" xml:space="preserve">
          <source>If the returned promise resolves, it is resolved with an aggregating array of the values from the resolved promises, in the same order as defined in the iterable of multiple promises.</source>
          <target state="translated">반환 된 프라 미스가 해결되면 여러 프라 미스의 반복 가능에 정의 된 순서와 동일한 순서로 해결 된 프라 미스에서 값의 집계 배열로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="9aad8e2f8495619d7aae6f0803f38d9b68950bdc" translate="yes" xml:space="preserve">
          <source>If the returned promise resolves, it is resolved with the value of the first promise in the iterable that resolved.</source>
          <target state="translated">반환 된 promise가 해결되면 해결 된 iterable의 첫 번째 promise 값으로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="a177c490157a79f5a76e27fe6956e99555e128cb" translate="yes" xml:space="preserve">
          <source>If the selected language tag had a Unicode extension substring, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the language tag. For example, the &quot;&lt;code&gt;co&lt;/code&gt;&quot; key (collation) is only supported by &lt;a href=&quot;intl/collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, and its &quot;&lt;code&gt;phonebk&lt;/code&gt;&quot; value is only supported for German.</source>
          <target state="translated">선택한 언어 태그에 유니 코드 확장 하위 문자열이있는 경우 해당 확장은 이제 생성 된 개체 또는 함수의 동작을 사용자 지정하는 데 사용됩니다. 각 생성자 또는 함수는 유니 코드 확장에 대해 정의 된 키의 하위 집합 만 지원하며 지원되는 값은 종종 언어 태그에 따라 다릅니다. 예를 들어 &quot; &lt;code&gt;co&lt;/code&gt; &quot;키 ( &lt;code&gt;phonebk&lt;/code&gt; )는 &lt;a href=&quot;intl/collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt; 에서만 지원되고 &quot; phonebk &quot;값은 독일어에 대해서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="52e0cd12612909bf0c4a612be8384c6d969c9ac4" translate="yes" xml:space="preserve">
          <source>If the selected language tag had a Unicode extension substring, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the language tag. For example, the &lt;code&gt;&quot;co&quot;&lt;/code&gt; key (collation) is only supported by &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, and its &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; value is only supported for German.</source>
          <target state="translated">선택한 언어 태그에 유니 코드 확장 하위 문자열이있는 경우 해당 확장은 이제 생성 된 객체 또는 함수의 동작을 사용자 정의하는 데 사용됩니다. 각 생성자 또는 함수는 유니 코드 확장에 대해 정의 된 키의 하위 집합 만 지원하며 지원되는 값은 종종 언어 태그에 따라 다릅니다. 예를 들어, &lt;code&gt;&quot;co&quot;&lt;/code&gt; 키 (데이터 정렬)에서만 지원됩니다 &lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt; , 그 &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; 값은 독일어로만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="0051f2f9e3b0c3c5f0efed5769af9ea4eeaaac1c" translate="yes" xml:space="preserve">
          <source>If the separator is an array, then that Array is coerced to a String and used as a separator.</source>
          <target state="translated">구분자가 배열이면 해당 배열은 문자열로 강제 변환되어 구분자로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1b286f7a3b45c9d956b26ab348a1958c44fb5f42" translate="yes" xml:space="preserve">
          <source>If the source array is a typed array, the two arrays may share the same underlying &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;; the JavaScript engine will intelligently &lt;strong&gt;copy&lt;/strong&gt; the source range of the buffer to the destination range.</source>
          <target state="translated">소스 배열이 형식화 된 배열 인 경우 두 배열은 동일한 기본 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 를&lt;/a&gt; 공유 할 수 있습니다 . JavaScript 엔진은 버퍼의 소스 범위를 대상 범위에 지능적으로 &lt;strong&gt;복사&lt;/strong&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="b353db1fb14273700c08d890316bc02b3fd861ed" translate="yes" xml:space="preserve">
          <source>If the source value is a reference to an object, it only copies the reference value.</source>
          <target state="translated">원본 값이 개체에 대한 참조이면 참조 값만 복사합니다.</target>
        </trans-unit>
        <trans-unit id="6a4ef9aab8e43c2b5e9c78c499c653ff6b14a42f" translate="yes" xml:space="preserve">
          <source>If the specified number of elements to insert differs from the number of elements being removed, the array's &lt;code&gt;length&lt;/code&gt; will be changed.</source>
          <target state="translated">삽입 할 지정된 요소 수가 제거되는 요소 수와 다른 경우 배열의 &lt;code&gt;length&lt;/code&gt; 가 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="11118b48f62c5ceba27585b77797df31fab20d6a" translate="yes" xml:space="preserve">
          <source>If the string matches the expression, it will return an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing the entire matched string as the first element, followed by any results captured in parentheses. If there were no matches, &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">문자열이 식과 일치하면 일치하는 전체 문자열이 첫 번째 요소로 포함 된 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 과 괄호로 묶은 결과 가 반환 됩니다. 일치하는 것이 없으면 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8df86ca042f37da0bf772e9d1368d49d51710bb8" translate="yes" xml:space="preserve">
          <source>If the string you're calling &lt;code&gt;eval()&lt;/code&gt; on contains data (for example, an array: &lt;code&gt;&quot;[1, 2, 3]&quot;&lt;/code&gt;), as opposed to code, you should consider switching to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;, which allows the string to use a subset of JavaScript syntax to represent data. See also &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Downloading_JSON_and_JavaScript_in_extensions&quot;&gt;Downloading JSON and JavaScript in extensions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 을 호출하는 문자열 에 코드와 달리 데이터가 포함 된 경우 (예 : 배열 : &lt;code&gt;&quot;[1, 2, 3]&quot;&lt;/code&gt; ) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON으로&lt;/a&gt; 전환 하여 문자열을 사용할 수 있도록해야합니다. 데이터를 나타내는 JavaScript 구문의 하위 집합입니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Downloading_JSON_and_JavaScript_in_extensions&quot;&gt;확장에서 JSON 및 JavaScript 다운로드&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b7e003732737f7eeca987515a181e7a6c0886873" translate="yes" xml:space="preserve">
          <source>If the target object is not extensible, then the result List must contain all the keys of the own properties of the target object and no other values.</source>
          <target state="translated">대상 개체를 확장 할 수 없으면 결과 목록에 대상 개체의 고유 속성에 대한 모든 키가 포함되고 다른 값은 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="e8487fe85382c0faecab53eac35c276804fd64cd" translate="yes" xml:space="preserve">
          <source>If the target of a &lt;code&gt;WeakRef&lt;/code&gt; is also in a &lt;a href=&quot;finalizationregistry&quot;&gt;&lt;code&gt;FinalizationRegistry&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;WeakRef&lt;/code&gt;'s target is cleared at the same time or before any cleanup callback associated with the registry is called; if your cleanup callback calls &lt;code&gt;deref&lt;/code&gt; on a &lt;code&gt;WeakRef&lt;/code&gt; for the object, it will receive &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">a의 목표 경우 &lt;code&gt;WeakRef&lt;/code&gt; 는 A의도 &lt;a href=&quot;finalizationregistry&quot;&gt; &lt;code&gt;FinalizationRegistry&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;WeakRef&lt;/code&gt; 의 목표는 동시에 또는 레지스트리가 호출에 관련된 모든 정리 콜백 전에 지워집니다; 정리 콜백 이 객체 의 &lt;code&gt;WeakRef&lt;/code&gt; 에서 &lt;code&gt;deref&lt;/code&gt; 를 호출 하면 &lt;code&gt;undefined&lt;/code&gt; 를 수신 합니다.</target>
        </trans-unit>
        <trans-unit id="e848b7dd6ac3915d3833ea99453aeb25eaa52820" translate="yes" xml:space="preserve">
          <source>If the target value is an integer, return &lt;code&gt;true&lt;/code&gt;, otherwise return &lt;code&gt;false&lt;/code&gt;. If the value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;, return &lt;code&gt;false&lt;/code&gt;. The method will also return &lt;code&gt;true&lt;/code&gt; for floating point numbers that can be represented as integer.</source>
          <target state="translated">대상 값이 정수 &lt;code&gt;true&lt;/code&gt; 반환 하고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 . 값이 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 이면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다. 이 메서드는 정수로 표현할 수있는 부동 소수점 숫자에 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="bdd4f6c5189b324bbcf046826b6268c8f7662e9b" translate="yes" xml:space="preserve">
          <source>If the target value is an integer, return &lt;code&gt;true&lt;/code&gt;, otherwise return &lt;code&gt;false&lt;/code&gt;. If the value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or infinite, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">대상 값이 정수 &lt;code&gt;true&lt;/code&gt; 반환 하고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 . 값이 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 또는 무한이면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="68866588f03b84c0c3e398a9e3f5578b4ce34bf3" translate="yes" xml:space="preserve">
          <source>If the type is &quot;currency&quot;, code should be a &lt;a href=&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;&gt;3-letter ISO 4217 currency code&lt;/a&gt;.</source>
          <target state="translated">유형이 '통화'인 경우 코드는 &lt;a href=&quot;https://www.iso.org/iso-4217-currency-codes.html&quot;&gt;3 글자 ISO 4217 통화 코드&lt;/a&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="f0cb5c046dac4045c9a89761a4a8b98c0ae77670" translate="yes" xml:space="preserve">
          <source>If the type is &quot;language&quot;, code should be a &lt;em&gt;languageCode&lt;/em&gt; [&quot;-&quot; &lt;em&gt;scriptCode&lt;/em&gt;] [&quot;-&quot; &lt;em&gt;regionCode&lt;/em&gt; ] *(&quot;-&quot; &lt;em&gt;variant&lt;/em&gt; ) subsequence of the unicode_language_id grammar in &lt;a href=&quot;http://unicode.org/reports/tr35/#Unicode_language_identifier&quot;&gt;UTS 35's Unicode Language and Locale Identifiers grammar&lt;/a&gt;. &lt;em&gt;languageCode&lt;/em&gt; is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.</source>
          <target state="translated">유형이 &quot;언어&quot;인 경우 코드는 &lt;a href=&quot;http://unicode.org/reports/tr35/#Unicode_language_identifier&quot;&gt;UTS 35의 유니 코드 언어 및 로케일 식별자 문법&lt;/a&gt; 에있는 unicode_language_id 문법 의 &lt;em&gt;languageCode&lt;/em&gt; [ &quot;-&quot; &lt;em&gt;scriptCode&lt;/em&gt; ] [ &quot;-&quot; &lt;em&gt;regionCode&lt;/em&gt; ] * ( &quot;-&quot; &lt;em&gt;variant&lt;/em&gt; ) 하위 시퀀스 &lt;em&gt;여야&lt;/em&gt; 합니다. &lt;em&gt;languageCode&lt;/em&gt; 는 두 글자의 ISO 639-1 언어 코드 또는 세 글자의 ISO 639-2 언어 코드입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca78f095eb556d05599a45f5418d96e0f963fba2" translate="yes" xml:space="preserve">
          <source>If the type is &quot;region&quot;, code should be either an &lt;a href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot;&gt;ISO-3166 two letters region code&lt;/a&gt;, or a &lt;a href=&quot;https://unstats.un.org/unsd/methodology/m49/&quot;&gt;three digits UN M49 Geographic Regions&lt;/a&gt;.</source>
          <target state="translated">유형이 '지역'인 경우 코드는 &lt;a href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot;&gt;ISO-3166 2 &lt;/a&gt;&lt;a href=&quot;https://unstats.un.org/unsd/methodology/m49/&quot;&gt;자리 &lt;/a&gt;지역 코드 또는 3 자리 UN M49 지리적 지역 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="cfe9db6773b02e2ea80f4ddb7ce1c0e560d94678" translate="yes" xml:space="preserve">
          <source>If the type is &quot;script&quot;, code should be an &lt;a href=&quot;http://unicode.org/iso15924/iso15924-codes.html&quot;&gt;ISO-15924 four letters script code&lt;/a&gt;.</source>
          <target state="translated">유형이 '스크립트'인 경우 코드는 &lt;a href=&quot;http://unicode.org/iso15924/iso15924-codes.html&quot;&gt;ISO-15924 네 글자 스크립트 코드&lt;/a&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="3b163d07b932ce80b4a6e15721f922f7fb30650e" translate="yes" xml:space="preserve">
          <source>If the typed array is empty and no &lt;code&gt;initialValue &lt;/code&gt;was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the typed array has only one element (regardless of position) and no &lt;code&gt;initialValue &lt;/code&gt;was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the typed array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">유형이 지정된 배열이 비어 있고 &lt;code&gt;initialValue &lt;/code&gt; 가 제공 되지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 형식화 된 배열에 위치에 관계없이 하나의 요소 만 있고 &lt;code&gt;initialValue &lt;/code&gt; 가 제공 되지 않았 거나 &lt;code&gt;initialValue&lt;/code&gt; 가 제공되었지만 형식화 된 배열이 비어있는 경우 &lt;code&gt;callback&lt;/code&gt; 을 호출하지 않고 솔로 값이 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="32f1892613c48627e71e01cfec6b0670419135f0" translate="yes" xml:space="preserve">
          <source>If the typed array is empty and no &lt;code&gt;initialValue&lt;/code&gt; was provided, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; would be thrown. If the typed array has only one element (regardless of position) and no &lt;code&gt;initialValue&lt;/code&gt; was provided, or if &lt;code&gt;initialValue&lt;/code&gt; is provided but the typed array is empty, the solo value would be returned without calling &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">유형이 지정된 배열이 비어 있고 &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 형식화 된 배열에 위치에 관계없이 하나의 요소 만 있고 &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않았 거나 &lt;code&gt;initialValue&lt;/code&gt; 가 제공되었지만 형식화 된 배열이 비어있는 경우 &lt;code&gt;callback&lt;/code&gt; 을 호출하지 않고 솔로 값이 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="510bd268f45e4d1729f707209afb02f9c7b0083d" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;a href=&quot;#toJSON()_behavior&quot;&gt;toJSON()&lt;/a&gt; method, it's responsible to define what data will be serialized.</source>
          <target state="translated">값에 &lt;a href=&quot;#toJSON()_behavior&quot;&gt;toJSON ()&lt;/a&gt; 메소드 가있는 경우 직렬화 할 데이터를 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="e00674da0b18b7b91ffb49a53cd9a91a4d73a00f" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;code&gt;&lt;a href=&quot;#toJSON_behavior&quot;&gt;toJSON()&lt;/a&gt;&lt;/code&gt; method, it's responsible to define what data will be serialized.</source>
          <target state="translated">값에 &lt;code&gt;&lt;a href=&quot;#toJSON_behavior&quot;&gt;toJSON()&lt;/a&gt;&lt;/code&gt; 메서드 가있는 경우 직렬화 할 데이터를 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="c197d6eace707cd4160203ef188b37b5f8ddd8e2" translate="yes" xml:space="preserve">
          <source>If the value is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, it will create and return an empty object.</source>
          <target state="translated">값이 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 인 경우 빈 개체를 만들고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="54140dc9eb589e0c204678e22bbbdb9cf79a2d04" translate="yes" xml:space="preserve">
          <source>If the value is &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, it will create and return an empty object.</source>
          <target state="translated">값이 &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 인 경우 빈 개체를 만들고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="561c9acef125c9f472e17089eda2c02ed61b2c26" translate="yes" xml:space="preserve">
          <source>If the value is a string and first character cannot be converted to a number, &lt;code&gt;parseFloat&lt;/code&gt; returns &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">값이 문자열이고 첫 번째 문자를 숫자로 변환 할 수 없으면 &lt;code&gt;parseFloat&lt;/code&gt; 는 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="ef9bb279e649c6b04963f948bf7ce36a932c8c2d" translate="yes" xml:space="preserve">
          <source>If the value is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;true&lt;/code&gt; is returned; otherwise, &lt;code&gt;false&lt;/code&gt; is.</source>
          <target state="translated">값이 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 이면 &lt;code&gt;true&lt;/code&gt; 가 반환됩니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="53a1da54003d5163c28e486b08412caa8da3e737" translate="yes" xml:space="preserve">
          <source>If the value is an object already, it will return the value.</source>
          <target state="translated">값이 이미 객체이면 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1640abfaf088fbcbdcadda1eedf8dab180bb6242" translate="yes" xml:space="preserve">
          <source>If the value is not a &lt;code&gt;Promise&lt;/code&gt;, it converts the value to a resolved &lt;code&gt;Promise&lt;/code&gt;, and waits for it.</source>
          <target state="translated">값이 &lt;code&gt;Promise&lt;/code&gt; 가 아닌 경우 값을 확인 된 &lt;code&gt;Promise&lt;/code&gt; 로 변환 하고 기다립니다.</target>
        </trans-unit>
        <trans-unit id="f0a64651c26d9a65bc75cc4516d6f569cc7361ac" translate="yes" xml:space="preserve">
          <source>If the value is omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="translated">값을 생략하면 &lt;code&gt;undefined&lt;/code&gt; 가 대신 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="7ea4c0759ce10f3ec998abec7f06323cfdcb044e" translate="yes" xml:space="preserve">
          <source>If the value isn't needed just now. It will be used later, or in some case it's not used at all.</source>
          <target state="translated">값이 지금 필요하지 않은 경우. 나중에 사용되거나 어떤 경우에는 전혀 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dcd7892bd313c45ff27bee53ccf94aa493673289" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is 0, the return value is always &lt;a href=&quot;../number/negative_infinity&quot;&gt;&lt;code&gt;-Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; 의 값 이 0이면 반환 값은 항상 &lt;a href=&quot;../number/negative_infinity&quot;&gt; &lt;code&gt;-Infinity&lt;/code&gt; 입니다.&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d4f9318ece72f4c2eeef6e7c2a93aef5af0daf69" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is less than 0, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; 값 이 0보다 작 으면 반환 값은 항상 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1239996883a93b9b2c50ccbd8a405e2eb8177812" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is negative, &lt;code&gt;Math.sqrt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; 값 이 음수이면 &lt;code&gt;Math.sqrt()&lt;/code&gt; 는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="059376bc4439a5267686d0fa5d49aac6a927f1ff" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is negative, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; 값 이 음수이면 반환 값은 항상 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ac2d5fb2a300d0369ab4234e82cc168cc8762ee4" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is less than -1, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 값 이 -1보다 작은 경우 반환 값은 항상 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9274a7a137b577eeaa2f04b6902d872eb4466cee" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is less than 0, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 값 이 0보다 작은 경우 반환 값은 항상 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e9eb70669a6e170dc1e8ae977b8cb8a15a0498f1" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is negative, &lt;code&gt;Math.sqrt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 값 이 음수이면 &lt;code&gt;Math.sqrt()&lt;/code&gt; 는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="6dbda7783aa9232721a5872c34710ccbbff0ffb5" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;x&lt;/code&gt; is negative, the return value is always &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 값 이 음수이면 반환 값은 항상 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7c96df6c0dbc7425e0d4c9a6c302f795ee1fc7c1" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;em&gt;expression&lt;/em&gt; following the &lt;code&gt;await&lt;/code&gt; operator is not a &lt;code&gt;Promise&lt;/code&gt;, it's converted to a &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;resolved Promise&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 연산자 다음 의 &lt;em&gt;표현식&lt;/em&gt; 값이 &lt;code&gt;Promise&lt;/code&gt; 가 아닌 경우 , &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;해결 된 Promise&lt;/a&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="7777a3173c1fc93619bfe4928f7864e3ee37ca7e" translate="yes" xml:space="preserve">
          <source>If there is a constructor present in the subclass, it needs to first call super() before using &quot;this&quot;.</source>
          <target state="translated">서브 클래스에 생성자가 있으면 &quot;this&quot;를 사용하기 전에 먼저 super ()를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="21978f541a285d4f0f6b8649673a45e9d8c65652" translate="yes" xml:space="preserve">
          <source>If there is no element at the specified position, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned. If no UTF-16 surrogate pair begins at &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt;, the code unit at &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">지정된 위치에 요소가 없으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 반환됩니다. 더 UTF-16 서로 게이트 쌍에서 시작하지 않는 경우 &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; ,의 코드 단위 &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="73a5e90cc482f2c146104da9fc8a32ddba669924" translate="yes" xml:space="preserve">
          <source>If there is no element at the specified position, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned. If no UTF-16 surrogate pair begins at &lt;code&gt;pos&lt;/code&gt;, the code unit at &lt;code&gt;pos&lt;/code&gt; is returned.</source>
          <target state="translated">지정된 위치에 요소가 없으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 반환됩니다. 더 UTF-16 서로 게이트 쌍에서 시작하지 않는 경우 &lt;code&gt;pos&lt;/code&gt; ,의 코드 단위 &lt;code&gt;pos&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="afdb33990e63ce9b5d36a9e521b9b2dbdc06c9d9" translate="yes" xml:space="preserve">
          <source>If this is a &lt;code&gt;Number&lt;/code&gt;, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just &lt;code&gt;10&lt;/code&gt;). Values less than 1 indicate that no space should be used.</source>
          <target state="translated">이것이 &lt;code&gt;Number&lt;/code&gt; 이면 공백으로 사용할 공백 문자 수를 나타냅니다. 이 숫자는 10으로 제한됩니다 (더 큰 경우 값은 &lt;code&gt;10&lt;/code&gt; 임). 1보다 작은 값은 사용 된 공간이 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4657fbccd094cf1a6aae2b07836eaa2e143cf7da" translate="yes" xml:space="preserve">
          <source>If this is a &lt;code&gt;String&lt;/code&gt;, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;), no white space is used.</source>
          <target state="translated">이것이 &lt;code&gt;String&lt;/code&gt; 이면 문자열 (또는 그보다 긴 경우 문자열의 처음 10 자)이 공백으로 사용됩니다. 이 매개 변수가 제공되지 않거나 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 인 경우&lt;/a&gt; 공백이 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3fe1411948efd2142af6ac7caf00bbd4cd925703" translate="yes" xml:space="preserve">
          <source>If this method is invoked on an object that is not a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 객체에 호출하면 그건 아닙니다 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fe15855eb8f13ceac6922262bfec88886e019764" translate="yes" xml:space="preserve">
          <source>If used immediately after any of the quantifiers &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;{}&lt;/code&gt;, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).</source>
          <target state="translated">수량 지시의 직후에 사용하면 &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;?&lt;/code&gt; , 또는 &lt;code&gt;{}&lt;/code&gt; 은 욕심 인 (최대 횟수와 일치하는) 기본값과 달리 수량자를 욕심없는 (최소 횟수와 일치하는) 것으로 만듭니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
