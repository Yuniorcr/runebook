<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="a57b4c3298b35e7edb3f90845c7cfcfac6e75ef3" translate="yes" xml:space="preserve">
          <source>The second element for comparison.</source>
          <target state="translated">비교를위한 두 번째 요소입니다.</target>
        </trans-unit>
        <trans-unit id="22841544311fffdd3a3c30c0a4872284a7c22a0e" translate="yes" xml:space="preserve">
          <source>The second inconvenience is a memory leak because the arrays ensure that references to each key and each value are maintained indefinitely. These references prevent the keys from being garbage collected, even if there are no other references to the object. This would also prevent the corresponding values from being garbage collected.</source>
          <target state="translated">두 번째 불편은 배열이 각 키와 각 값에 대한 참조가 무기한 유지되도록 보장하기 때문에 메모리 누수입니다. 이러한 참조는 객체에 대한 다른 참조가없는 경우에도 키가 가비지 수집되는 것을 방지합니다. 이것은 또한 해당 값이 가비지 수집되는 것을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="eb0086131e6b3531ebfb0c6d4586f854d8307796" translate="yes" xml:space="preserve">
          <source>The second one is bigger and less performant, but it permits some usage of the &lt;code&gt;new&lt;/code&gt; operator on bound functions.</source>
          <target state="translated">두 번째는 더 크고 성능이 떨어지지 만 바인딩 된 함수 에서 &lt;code&gt;new&lt;/code&gt; 연산자를 일부 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4af5fdad88a53c6ca2e10ebd0e8a5f9481a8a2f1" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 1 to &lt;code&gt;weekday&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;. December 25, 1995, is a Monday.</source>
          <target state="translated">아래 두 번째 문 은 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 &lt;code&gt;Xmas95&lt;/code&gt; 의 값을 기준으로 1에서 &lt;code&gt;weekday&lt;/code&gt; 까지 값을 할당합니다 . 1995 년 12 월 25 일은 월요일입니다.</target>
        </trans-unit>
        <trans-unit id="1c879df70b2272c9b5d5ec41f180cc20c882a52d" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 11 to the variable &lt;code&gt;month&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">아래 두 번째 문 은 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 &lt;code&gt;Xmas95&lt;/code&gt; 의 값을 기준으로 값 11을 변수 &lt;code&gt;month&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="c119c53df8dbc52c8270c24e802cc1458abdf049" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 15 to the variable &lt;code&gt;minutes&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">아래 두 번째 문 은 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 &lt;code&gt;Xmas95&lt;/code&gt; 의 값을 기준으로 값 15를 변수 &lt;code&gt;minutes&lt;/code&gt; 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="9a8bee7abf8a4065d5840aec3031141bf9e19841" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 23 to the variable &lt;code&gt;hours&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">아래 두 번째 문 은 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 &lt;code&gt;Xmas95&lt;/code&gt; 의 값을 기준으로 값 23을 변수 &lt;code&gt;hours&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="30d33ab3aec9a22329c064d587266eedecf3c3da" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 25 to the variable &lt;code&gt;day&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">아래 두 번째 명령문 은 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 &lt;code&gt;Xmas95&lt;/code&gt; 의 값을 기준으로 값 25를 변수 &lt;code&gt;day&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="745cd8a1301e16f24d369e3eb0cae17a9cf39f01" translate="yes" xml:space="preserve">
          <source>The second statement below assigns the value 30 to the variable &lt;code&gt;seconds&lt;/code&gt;, based on the value of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object &lt;code&gt;Xmas95&lt;/code&gt;.</source>
          <target state="translated">아래 두 번째 문 은 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 &lt;code&gt;Xmas95&lt;/code&gt; 의 값을 기준으로 값 30을 변수 &lt;code&gt;seconds&lt;/code&gt; 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="4024bd8f1cdd176e7775d73d2b29084da7618627" translate="yes" xml:space="preserve">
          <source>The second value to compare.</source>
          <target state="translated">비교할 두 번째 값입니다.</target>
        </trans-unit>
        <trans-unit id="abb522214d42e0562b3bff4958df65ccc0bca73b" translate="yes" xml:space="preserve">
          <source>The second way is the &lt;code&gt;/* */&lt;/code&gt; style, which is much more flexible.</source>
          <target state="translated">두 번째 방법은 &lt;code&gt;/* */&lt;/code&gt; 스타일이며 훨씬 융통성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cefef5fa8e63d0fd4ec579caf525e0c06577e1f0" translate="yes" xml:space="preserve">
          <source>The second way to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object is to have it exported by a WebAssembly module. The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;view it live also&lt;/a&gt;) fetches and instantiates the loaded memory.wasm byte code using the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method, while importing the memory created in the line above. It then stores some values in that memory, then exports a function and uses it to sum some values.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; 객체 를 얻는 두 번째 방법 은 WebAssembly 모듈에서 내보내는 것입니다. 다음 예제 ( GitHub의 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; 참조 및 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;라이브보기&lt;/a&gt; )는 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여로드 된 memory.wasm 바이트 코드를 가져 와서 인스턴스화하며 위 줄에 생성 된 메모리를 가져옵니다. 그런 다음 해당 메모리에 일부 값을 저장 한 다음 함수를 내보내고이를 사용하여 일부 값을 합칩니다.</target>
        </trans-unit>
        <trans-unit id="c1f1f1991cf227b29cc351ef76e1b1c1ad39d33b" translate="yes" xml:space="preserve">
          <source>The secondary overload takes an already-compiled &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and returns a &lt;code&gt;Promise&lt;/code&gt; that resolves to an &lt;code&gt;Instance&lt;/code&gt; of that &lt;code&gt;Module&lt;/code&gt;. This overload is useful if the &lt;code&gt;Module&lt;/code&gt; has already been compiled.</source>
          <target state="translated">보조 오버로드는 이미 컴파일 된 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; 을 취하여&lt;/a&gt; 해당 &lt;code&gt;Module&lt;/code&gt; 의 &lt;code&gt;Instance&lt;/code&gt; 로 해석 되는 &lt;code&gt;Promise&lt;/code&gt; 을 반환 합니다 . 이 과부하는 &lt;code&gt;Module&lt;/code&gt; 이 이미 컴파일 된 경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="1820b978ecac3858ab3dd6802f3b9ee97c6a18f2" translate="yes" xml:space="preserve">
          <source>The shift() method is often used in condition inside while loop. In the following example every iteration will remove the next element from an array, until it is empty:</source>
          <target state="translated">shift () 메소드는 종종 while 루프 내부의 조건에서 사용됩니다. 다음 예제에서 모든 반복은 비어있을 때까지 배열에서 다음 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="abee9f26ebefaef40a0c699186c2c458782cc646" translate="yes" xml:space="preserve">
          <source>The shorthand syntax also supports computed property names.</source>
          <target state="translated">속기 구문은 계산 된 속성 이름도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="0ec96efc35fa3234a2270887e3200075877ba098" translate="yes" xml:space="preserve">
          <source>The shorthand syntax is similar to the &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; and &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; syntax introduced in ECMAScript 2015.</source>
          <target state="translated">속기 구문은 ECMAScript 2015에 도입 된 &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; 및 &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; 구문 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="d970f2879008a5664e8f8ad4addd15f05ba6423e" translate="yes" xml:space="preserve">
          <source>The shorthand syntax is similar to the &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; and &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; syntax introduced in ES5.</source>
          <target state="translated">속기 구문은 ES5에 도입 된 &lt;a href=&quot;get&quot;&gt;getter&lt;/a&gt; 및 &lt;a href=&quot;set&quot;&gt;setter&lt;/a&gt; 구문 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="ab86750f1e64ce498e187f5d5f841e9f26691c5b" translate="yes" xml:space="preserve">
          <source>The simple alternative of assigning the object to a short name variable, then accessing the corresponding property on that variable, stands ready to replace &lt;code&gt;with&lt;/code&gt;.</source>
          <target state="translated">짧은 이름 변수에 객체를 할당 한 다음 해당 변수의 해당 속성에 액세스하는 간단한 대안은로 대체 할 준비가 된 것 &lt;code&gt;with&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c6147140bc7c5177cf3352c47afa22965051718" translate="yes" xml:space="preserve">
          <source>The simplest case is when &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is just a single character; this is used to split a delimited string. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like this: &lt;code&gt;myString.split(&quot;\t&quot;)&lt;/code&gt;.</source>
          <target state="translated">가장 간단한 경우는 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 가 단일 문자 일 때입니다. 구분 된 문자열을 분할하는 데 사용됩니다. 예를 들어 탭으로 구분 된 값 (TSV)을 포함하는 문자열은 다음과 같이 탭 문자를 구분 기호로 전달하여 구문 분석 할 수 있습니다. &lt;code&gt;myString.split(&quot;\t&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e0b22b9d7ecb2507195389b54eece72bc59a1c02" translate="yes" xml:space="preserve">
          <source>The simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function that, no matter how it is called, is called with a particular &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; 의 가장 간단한 사용 은 호출 방법에 관계없이 특정 &lt;code&gt;this&lt;/code&gt; 값으로 호출되는 함수를 만드는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="5835c1fc1912869cb1a9f6b017fc5089043ea886" translate="yes" xml:space="preserve">
          <source>The simplest use of &lt;code&gt;bind()&lt;/code&gt; is to make a function that, no matter how it is called, is called with a particular &lt;code&gt;this&lt;/code&gt; value. A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its &lt;code&gt;this&lt;/code&gt; (e.g. by using that method in callback-based code). Without special care, however, the original object is usually lost. Creating a bound function from the function, using the original object, neatly solves this problem:</source>
          <target state="translated">가장 간단한 사용 &lt;code&gt;bind()&lt;/code&gt; 가 호출되는 방법에 상관없이이 특정 호출되는 함수 만드는 것입니다 &lt;code&gt;this&lt;/code&gt; 값입니다. 새로운 자바 스크립트 프로그래머를위한 일반적인 실수는 나중에 그 함수를 호출 한 다음에, 객체에서 메서드를 추출하고 그것으로 원래 개체를 사용할 것으로 예상하는 &lt;code&gt;this&lt;/code&gt; (예를 들어, 콜백 기반의 코드에서 그 방법을 사용하여). 그러나 특별한주의를 기울이지 않으면 원래 객체는 대개 손실됩니다. 원래 객체를 사용하여 함수에서 바운드 함수를 만들면이 문제가 깔끔하게 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="6d6c63dff4f030464384082acb8b1913506c71dc" translate="yes" xml:space="preserve">
          <source>The simplest version directly imports the default:</source>
          <target state="translated">가장 간단한 버전은 기본값을 직접 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d69ece57bbd193284b3f54a7d109daeeae0e20ff" translate="yes" xml:space="preserve">
          <source>The sine of the given number.</source>
          <target state="translated">주어진 숫자의 사인</target>
        </trans-unit>
        <trans-unit id="7fa6c3c88196c9890ccc2acd1751ee8a3b162f6e" translate="yes" xml:space="preserve">
          <source>The single code point U+00F1.</source>
          <target state="translated">단일 코드 포인트 U + 00F1.</target>
        </trans-unit>
        <trans-unit id="df80f5ae8e83175ed50005f6bc69db2213cac60d" translate="yes" xml:space="preserve">
          <source>The single value that results from the reduction.</source>
          <target state="translated">감소로 인한 단일 값입니다.</target>
        </trans-unit>
        <trans-unit id="668a8c3d578534a6a438f66f8a70854b72068cc7" translate="yes" xml:space="preserve">
          <source>The size in bytes to check.</source>
          <target state="translated">확인할 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="57a5c0494833bea31465d3b044b0e0d342192fff" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the array buffer to create.</source>
          <target state="translated">만들 배열 버퍼의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="bcf6eda76bceac4f20d4cfa8a5529bffe65aa5c7" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. &lt;strong&gt;Read only.&lt;/strong&gt;</source>
          <target state="translated">배열의 크기 (바이트)입니다. 이것은 어레이가 구성 될 때 설정되며 변경할 수 없습니다. &lt;strong&gt;읽기 전용.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1c647ddc22eacea007c8f8f76aa48ee7a3bdf44" translate="yes" xml:space="preserve">
          <source>The smallest integer greater than or equal to the given number.</source>
          <target state="translated">주어진 숫자보다 크거나 같은 가장 작은 정수.</target>
        </trans-unit>
        <trans-unit id="4d5352391b7cf0872173723c1715230a82d0e709" translate="yes" xml:space="preserve">
          <source>The smallest interval between two representable numbers.</source>
          <target state="translated">표현 가능한 두 숫자 사이의 최소 간격입니다.</target>
        </trans-unit>
        <trans-unit id="578a6566f8dd2727ef2138039b6e1b260c726f43" translate="yes" xml:space="preserve">
          <source>The smallest of the given numbers. If any one or more of the parameters cannot be converted into a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned. The result is &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; if no parameters are provided.</source>
          <target state="translated">주어진 숫자 중 가장 작은 숫자입니다. 하나 이상의 매개 변수를 숫자로 변환 할 수 없으면 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이 리턴됩니다. 매개 변수가 제공되지 않으면 결과는 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1b584b056332604c643da0964809675ae4df19e1" translate="yes" xml:space="preserve">
          <source>The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).</source>
          <target state="translated">가장 작은 양의 표현 가능한 숫자, 즉 0에 가장 가까운 양수 (실제로 0이 아님).</target>
        </trans-unit>
        <trans-unit id="198213a60d9b14b4686129ce9aee85fc9c96c0ec" translate="yes" xml:space="preserve">
          <source>The smallest positive representable number&amp;mdash;that is, the positive number closest to zero (without actually being zero).</source>
          <target state="translated">표현 가능한 가장 작은 양수, 즉 0에 가장 가까운 양수입니다 (실제로 0이 아님).</target>
        </trans-unit>
        <trans-unit id="59980303f2b550bbba2cfdadd7dee2081477f6e1" translate="yes" xml:space="preserve">
          <source>The snippet below illustrates how to find and filter (thus causing data loss) a cyclic reference by using the &lt;code&gt;replacer&lt;/code&gt; parameter of &lt;a href=&quot;../global_objects/json/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">아래 스 니펫 은 &lt;a href=&quot;../global_objects/json/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;replacer&lt;/code&gt; 매개 변수를 사용하여 순환 참조를 찾아 필터링 (따라서 데이터 손실을 유발)하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0d525c5acea385ad7d50408039e4c710e63be90d" translate="yes" xml:space="preserve">
          <source>The sorted array. Note that the array is sorted &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt;, and no copy is made.</source>
          <target state="translated">정렬 된 배열. 배열이 &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;제자리에&lt;/a&gt;&lt;/em&gt; 정렬 &lt;em&gt;되고&lt;/em&gt; 복사가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4d59fac8447c22b135eb4a41f704bad8d5e0df4d" translate="yes" xml:space="preserve">
          <source>The sorted typed array.</source>
          <target state="translated">정렬 된 형식화 된 배열입니다.</target>
        </trans-unit>
        <trans-unit id="f8167c1b0cbe252b617b1b1e7b1d0ed414774fce" translate="yes" xml:space="preserve">
          <source>The source map specification changed the syntax due to a conflict with IE whenever it was found in the page after &lt;code&gt;//@cc_on&lt;/code&gt; was interpreted to turn on conditional compilation in the IE JScript engine. The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/8ka90k2e%28v=vs.94%29.aspx&quot;&gt;conditional compilation comment&lt;/a&gt; in IE is a little known feature, but it broke source maps with &lt;a href=&quot;https://bugs.jquery.com/ticket/13274&quot;&gt;jQuery&lt;/a&gt; and other libraries.</source>
          <target state="translated">&lt;code&gt;//@cc_on&lt;/code&gt; 이 해석되어 IE JScript 엔진에서 조건부 컴파일을 설정 한 후 페이지에서 발견 될 때마다 IE와의 충돌로 인해 소스 맵 스펙이 구문을 변경했습니다 . IE 의 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/8ka90k2e%28v=vs.94%29.aspx&quot;&gt;조건부 컴파일 주석은&lt;/a&gt; 약간의 알려진 기능이지만 &lt;a href=&quot;https://bugs.jquery.com/ticket/13274&quot;&gt;jQuery&lt;/a&gt; 및 기타 라이브러리 와의 소스 맵을 중단했습니다 .</target>
        </trans-unit>
        <trans-unit id="aa083e2e5d9db92e1fdd3a2dadc5b300ce6d155e" translate="yes" xml:space="preserve">
          <source>The source object(s) &amp;mdash; objects containing the properties you want to apply.</source>
          <target state="translated">소스 객체 &amp;mdash; 적용 할 속성이 포함 된 객체입니다.</target>
        </trans-unit>
        <trans-unit id="a6d0a7de6131e4d732a1c1c89a21e337c87b0b06" translate="yes" xml:space="preserve">
          <source>The source object(s).</source>
          <target state="translated">소스 객체.</target>
        </trans-unit>
        <trans-unit id="511eb85673324126c566f020ed174ab405eef44c" translate="yes" xml:space="preserve">
          <source>The space argument</source>
          <target state="translated">공간 논쟁</target>
        </trans-unit>
        <trans-unit id="40b8ea87c618fea41d5aab1faa4ecb32e6d1ea59" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;raw&lt;/code&gt; property, available on the first argument to the tag function, allows you to access the raw strings as they were entered, without processing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;escape sequences&lt;/a&gt;.</source>
          <target state="translated">태그 함수의 첫 번째 인수에서 사용할 수 있는 특수 &lt;code&gt;raw&lt;/code&gt; 속성을 사용하면 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;이스케이프 시퀀스&lt;/a&gt; 를 처리하지 않고도 입력 된 원시 문자열에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df8a5b4743460e7bd39f98c02ae1935d30bc0af0" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;raw&lt;/code&gt; property, available on the first function argument of tagged templates, allows you to access the raw strings as they were entered, without processing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;escape sequences&lt;/a&gt;.</source>
          <target state="translated">태그가 지정된 템플릿의 첫 번째 함수 인수에서 사용할 수 있는 특수 &lt;code&gt;raw&lt;/code&gt; 속성을 사용하면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings&quot;&gt;이스케이프 시퀀스&lt;/a&gt; 를 처리하지 않고 입력 한 그대로 원시 문자열에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="94f6db19f273c019178b304d1a64313a00b4826e" translate="yes" xml:space="preserve">
          <source>The species accessor property allows subclasses to override the default constructor for objects.</source>
          <target state="translated">species 접근 자 속성을 사용하면 하위 클래스가 객체의 기본 생성자를 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16021061db18ebd6a5d2f1fec6234d9ec169cb96" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;ArrayBuffer&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">species 접근 자 속성은 &lt;code&gt;ArrayBuffer&lt;/code&gt; 객체 의 기본 생성자를 반환 합니다. 생성자 할당을 변경하기 위해 서브 클래스 생성자가이를 오버라이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b750d87e0450750db11d484a6aacc4956dcfa7d" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;Map&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">species 접근 자 속성은 &lt;code&gt;Map&lt;/code&gt; 객체 의 기본 생성자를 반환 합니다. 생성자 할당을 변경하기 위해 서브 클래스 생성자가이를 오버라이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="491d41ab480e226fed33b559751c6077a08f7be3" translate="yes" xml:space="preserve">
          <source>The species accessor property returns the default constructor for &lt;code&gt;Set&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">species 접근 자 속성은 &lt;code&gt;Set&lt;/code&gt; 개체 의 기본 생성자를 반환 합니다. 생성자 할당을 변경하기 위해 서브 클래스 생성자가이를 오버라이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b584b6a94bc11fac8ce47d9f14648ec420fce3c4" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;ArrayBuffer&lt;/code&gt; constructor for &lt;code&gt;ArrayBuffer&lt;/code&gt; objects:</source>
          <target state="translated">species 속성은 기본 생성자 함수 인 &lt;code&gt;ArrayBuffer&lt;/code&gt; 객체 의 &lt;code&gt;ArrayBuffer&lt;/code&gt; 생성자를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2a17544fbb410f0df301670f863e167add111875" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;Map&lt;/code&gt; constructor for &lt;code&gt;Map&lt;/code&gt; objects:</source>
          <target state="translated">species 속성은 기본 생성자 함수 ( &lt;code&gt;Map&lt;/code&gt; 객체 의 &lt;code&gt;Map&lt;/code&gt; 생성자)를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="46a4bbfb225be485ea6fcd2993d62c627968df55" translate="yes" xml:space="preserve">
          <source>The species property returns the default constructor function, which is the &lt;code&gt;Set&lt;/code&gt; constructor for &lt;code&gt;Set&lt;/code&gt; objects:</source>
          <target state="translated">species 속성은 기본 생성자 함수 인 &lt;code&gt;Set&lt;/code&gt; 객체 의 &lt;code&gt;Set&lt;/code&gt; 생성자를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9659544f684f8e234ac1326aebca08dd5b470404" translate="yes" xml:space="preserve">
          <source>The specified object.</source>
          <target state="translated">지정된 객체.</target>
        </trans-unit>
        <trans-unit id="1f3f0ce94a2bcf1dd429f4d411f2f2b8d1305c23" translate="yes" xml:space="preserve">
          <source>The square brackets of an array comprehension introduce an implicit block for scoping purposes. New variables (such as i in the example) are treated as if they had been declared using &lt;a href=&quot;../statements/let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt;. This means that they will not be available outside of the comprehension.</source>
          <target state="translated">배열 이해의 대괄호는 범위 지정을 위해 암시 적 블록을 도입합니다. 새 변수 (예 : i)는 &lt;a href=&quot;../statements/let&quot;&gt; &lt;code&gt;let&lt;/code&gt; 을&lt;/a&gt; 사용하여 선언 된 것처럼 처리됩니다 . 이것은 그들이 이해할 수없는 곳에서는 이용할 수 없다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b2bcdf15b0d6fa2bcc088c169892370833652876" translate="yes" xml:space="preserve">
          <source>The square root of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">주어진 숫자의 제곱근. 숫자가 음수이면 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4666bf74066d922cd6cefe693f56d0c8313d153f" translate="yes" xml:space="preserve">
          <source>The square root of the sum of squares of the given arguments. If at least one of the arguments cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">주어진 인수의 제곱의 합의 제곱근. 인수 중 하나 이상을 숫자로 변환 할 수 없으면 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="0387989a2fa950c785b09a34ece64a2e3fdcf811" translate="yes" xml:space="preserve">
          <source>The standard equality operators (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt; to compare two operands. If the operands are of different types, it will attempt to convert them to the same type before making the comparison, e.g., in the expression &lt;code&gt;5 == '5'&lt;/code&gt;, the string on the right is converted to &lt;a href=&quot;../global_objects/number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; before the comparison is made.</source>
          <target state="translated">표준 항등 연산자 ( &lt;code&gt;==&lt;/code&gt; 및 &lt;code&gt;!=&lt;/code&gt; )는 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;추상 동등 비교 알고리즘&lt;/a&gt; 을 사용하여 두 피연산자를 비교합니다. 피연산자가 다른 유형 인 경우, 비교하기 전에 동일한 유형으로 변환하려고 시도합니다 (예 : 표현식 &lt;code&gt;5 == '5'&lt;/code&gt; ). 오른쪽 문자열 은 비교하기 전에 &lt;a href=&quot;../global_objects/number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="7d699ff1d0ad15f8264d303c6785a6e283211757" translate="yes" xml:space="preserve">
          <source>The standard import syntax is static and will always result in all code in the imported module being evaluated at load time. In situations where you wish to load a module conditionally or on demand, you can use a dynamic import instead. The following are some reasons why you might need to use dynamic import:</source>
          <target state="translated">표준 가져 오기 구문은 정적이며 항상 가져온 모듈의 모든 코드가로드시 평가됩니다. 조건부로 또는 요청시 모듈을로드하려는 경우 대신 동적 가져 오기를 사용할 수 있습니다. 다음은 동적 가져 오기를 사용해야하는 몇 가지 이유입니다.</target>
        </trans-unit>
        <trans-unit id="b74b19f4ceb5276ec846feec252ca8825e9367b4" translate="yes" xml:space="preserve">
          <source>The standard string representation of a date time string is a simplification of the ISO 8601 calendar date extended format. (See the section &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-time-string-format&quot;&gt;Date Time String Format&lt;/a&gt; in the ECMAScript specification for more details.)</source>
          <target state="translated">날짜 시간 문자열의 표준 문자열 표현은 ISO 8601 달력 날짜 확장 형식을 단순화 한 것입니다. (자세한 내용은 ECMAScript 사양의 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-time-string-format&quot;&gt;날짜 시간 문자열 형식&lt;/a&gt; 섹션 을 참조하십시오.)</target>
        </trans-unit>
        <trans-unit id="b0898b091e1d3ad98c99f7c945505cae7f09588f" translate="yes" xml:space="preserve">
          <source>The statements comprising the body of the function.</source>
          <target state="translated">기능의 본문을 구성하는 진술.</target>
        </trans-unit>
        <trans-unit id="5292df8522a93b76d66c5a4afeb6f245ff0ab8ec" translate="yes" xml:space="preserve">
          <source>The statements comprising the body of the function. The &lt;code&gt;await&lt;/code&gt; mechanism may be used.</source>
          <target state="translated">함수의 본문을 구성하는 문입니다. &lt;code&gt;await&lt;/code&gt; 기구가 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="fda11c0a9bea9de1bd840d175d6e7282612347e8" translate="yes" xml:space="preserve">
          <source>The statements to be executed.</source>
          <target state="translated">실행할 문장.</target>
        </trans-unit>
        <trans-unit id="0b7cace5e0a90d7bf7b781a74edd8bfb1a682291" translate="yes" xml:space="preserve">
          <source>The statements which comprise the body of the function.</source>
          <target state="translated">기능의 본문을 구성하는 진술.</target>
        </trans-unit>
        <trans-unit id="af2de8cd4975cbac3f2c6514c3154e49561e8f73" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;ArrayBuffer.transfer()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;ArrayBuffer&lt;/code&gt; whose contents have been taken from the &lt;code&gt;oldBuffer&lt;/code&gt;'s data and then is either truncated or zero-extended by &lt;code&gt;newByteLength&lt;/code&gt;. If &lt;code&gt;newByteLength&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, the &lt;code&gt;byteLength&lt;/code&gt; of the &lt;code&gt;oldBuffer&lt;/code&gt; is used. This operation leaves &lt;code&gt;oldBuffer&lt;/code&gt; in a detached state.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;ArrayBuffer.transfer()&lt;/strong&gt;&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;ArrayBuffer&lt;/code&gt; 그 내용으로부터 촬영 한 &lt;code&gt;oldBuffer&lt;/code&gt; 하거나 절단하거나하여 제로 - 확장되어 다음의 데이터 &lt;code&gt;newByteLength&lt;/code&gt; . 경우 &lt;code&gt;newByteLength&lt;/code&gt; 이 되어 &lt;code&gt;undefined&lt;/code&gt; 는 &lt;code&gt;byteLength&lt;/code&gt; 의 &lt;code&gt;oldBuffer&lt;/code&gt; 이 사용됩니다. 이 조작은 &lt;code&gt;oldBuffer&lt;/code&gt; 를 분리 된 상태로 둡니다 .</target>
        </trans-unit>
        <trans-unit id="fec0e30534f8672c0605f775fb24680275b23217" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.add()&lt;/code&gt; method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.add()&lt;/code&gt; 메소드는 배열의 지정된 위치에 지정된 값을 추가하고 해당 위치의 이전 값을 리턴합니다. 이 원자 연산은 수정 된 값이 다시 쓰여질 때까지 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="f0011b0ab0dfc8540c68447b4bdccd149dfa154e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.and()&lt;/code&gt; method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.and()&lt;/code&gt; 메소드는 배열의 지정된 위치에서 주어진 값으로 비트 AND를 계산하고 해당 위치에서 이전 값을 리턴합니다. 이 원자 연산은 수정 된 값이 다시 쓰여질 때까지 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="af50eef77235e45ea0e39a742ebfb44f0032d99d" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.compareExchange()&lt;/code&gt; method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.compareExchange()&lt;/code&gt; 메소드는 주어진 예상 값이 이전 값과 동일한 경우 지정된 대체 값을 배열의 지정된 위치에서 교환합니다. 예상 값과 같은지 여부에 관계없이 해당 위치의 이전 값을 반환합니다. 이 원자 연산은 수정 된 값이 다시 쓰여질 때까지 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="58f2eaed64525110a07c2c9298d09c022135db54" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.isLockFree()&lt;/code&gt; method is used to determine whether to use locks or atomic operations. It returns &lt;code&gt;true&lt;/code&gt;, if the given size is one of the &lt;a href=&quot;../typedarray/bytes_per_element&quot;&gt;BYTES_PER_ELEMENT&lt;/a&gt; property of integer TypedArray types.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.isLockFree()&lt;/code&gt; 메소드는 잠금 또는 원자 연산을 사용할지 여부를 판별하는 데 사용됩니다. 지정된 크기가 정수 TypedArray 유형 의 &lt;a href=&quot;../typedarray/bytes_per_element&quot;&gt;BYTES_PER_ELEMENT&lt;/a&gt; 특성 중 하나 인 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="2c7f01f3104d4a107eb890565aaa201bffb09a01" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.load()&lt;/code&gt; method returns a value at a given position in the array.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.load()&lt;/code&gt; 메소드는 배열의 지정된 위치에서 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="6462b2d9d930792381152b80f1427f0c1f7cca14" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.notify()&lt;/code&gt; method notifies up some agents that are sleeping in the wait queue.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.notify()&lt;/code&gt; 메소드는 대기 큐에서 대기중인 일부 에이전트에 알립니다.</target>
        </trans-unit>
        <trans-unit id="4205b3973e84d519136144d4c8b46564efb27293" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.or()&lt;/code&gt; method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.or()&lt;/code&gt; 메소드는 배열의 주어진 위치에서 주어진 값으로 비트 OR을 계산하고 해당 위치에서 이전 값을 리턴합니다. 이 원자 연산은 수정 된 값이 다시 쓰여질 때까지 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="efe340e63eb2088c81d321b80a5d5d3af5868809" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.store()&lt;/code&gt; method stores a given value at the given position in the array and returns that value.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.store()&lt;/code&gt; 메소드는 주어진 값을 배열의 지정된 위치에 저장하고 해당 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="cb854a5e6cbf84d6e52a0b31506ec682b29c7455" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.sub()&lt;/code&gt; method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.sub()&lt;/code&gt; 메소드는 배열의 지정된 위치에서 지정된 값을 빼고 해당 위치의 이전 값을 리턴합니다. 이 원자 연산은 수정 된 값이 다시 쓰여질 때까지 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="c927740464da9faa8686eae4c067cde1cdfe2a34" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.wait()&lt;/code&gt; method verifies that a given position in an &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either &quot;&lt;code&gt;ok&lt;/code&gt;&quot;, &quot;&lt;code&gt;not-equal&lt;/code&gt;&quot;, or &quot;&lt;code&gt;timed-out&lt;/code&gt;&quot;.</source>
          <target state="translated">정적의 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.wait()&lt;/code&gt; 메소드를 검증한다는 주어진 위치 &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt; 여전히 소정 값을 포함하고 있다면 웨이크 또는 타임 아웃을 대기 잠, 그래서. &quot; &lt;code&gt;ok&lt;/code&gt; &quot;, &quot; &lt;code&gt;not-equal&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;timed-out&lt;/code&gt; &quot;인 문자열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="92b05055b84702f2556852087e51e5debed0fb92" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.wait()&lt;/code&gt; method verifies that a given position in an &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either &lt;code&gt;&quot;ok&quot;&lt;/code&gt;, &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt;, or &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt;.</source>
          <target state="translated">정적의 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.wait()&lt;/code&gt; 주어진 위치한다는 방법을 검증 &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; 이&lt;/a&gt; 여전히 소정 값을 포함하고 있다면 웨이크 또는 타임 아웃을 대기 잠, 그래서. &lt;code&gt;&quot;ok&quot;&lt;/code&gt; , &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt; 인 문자열을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="67be5710c39f4a140b1b493763c08a3e3d826875" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.xor()&lt;/code&gt; method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Atomics&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.xor()&lt;/code&gt; 메소드는 배열의 지정된 위치에서 주어진 값으로 비트 XOR을 계산하고 해당 위치에서 이전 값을 리턴합니다. 이 원자 연산은 수정 된 값이 다시 쓰여질 때까지 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="7db98a25f456e5329b9fde7e474cdb5208a2b6d7" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect.construct()&lt;/strong&gt;&lt;/code&gt; method acts like the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator, but as a function. It is equivalent to calling &lt;code&gt;new target(...args)&lt;/code&gt;. It gives also the added option to specify a different prototype.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect.construct()&lt;/strong&gt;&lt;/code&gt; 메서드는&lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 연산자처럼 작동하지만 함수로 작동합니다. &lt;code&gt;new target(...args)&lt;/code&gt; 를 호출하는 것과 같습니다. 또한 다른 프로토 타입을 지정하는 추가 옵션도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b2ab58b2a2d76388fc95d13db70d0161ffceab73" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.apply()&lt;/code&gt; method calls a target function with arguments as specified.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.apply()&lt;/code&gt; 메소드는 지정된 인수를 사용하여 대상 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="e60a81890510d63e2d6ef8c32ffb1e9b9ecc1c1c" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.construct()&lt;/code&gt; method acts like the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt;, but as a function. It is equivalent to calling &lt;code&gt;new target(...args)&lt;/code&gt;. It gives also the added option to specify a different prototype.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.construct()&lt;/code&gt; 메소드는 &lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 연산자&lt;/a&gt; 처럼 작동 하지만 함수로 작동합니다. &lt;code&gt;new target(...args)&lt;/code&gt; 를 호출하는 것과 같습니다 . 또한 다른 프로토 타입을 지정하는 추가 옵션도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="017fa157ac61b53401f5cb2e6e3640d24750e2f0" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.defineProperty()&lt;/code&gt; method is like &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; but returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.defineProperty()&lt;/code&gt; 메소드는 &lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; 을&lt;/a&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f6d363c497e88472a0e66be0b359cea42ef4a3cd" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.deleteProperty()&lt;/code&gt; method allows to delete properties. It is like the &lt;a href=&quot;../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.deleteProperty()&lt;/code&gt; 메소드를 사용하면 속성을 삭제할 수 있습니다. 그것은처럼 &lt;a href=&quot;../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; 연산자&lt;/a&gt; 함수로.</target>
        </trans-unit>
        <trans-unit id="f420cd260cbc503b3ed49d8a8602567c43f99e33" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.getOwnPropertyDescriptor()&lt;/code&gt; method is similar to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;. It returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.getOwnPropertyDescriptor()&lt;/code&gt; 메소드는 &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; 와 유사합니다 . 주어진 프로퍼티의 프로퍼티 디스크립터가 객체에 존재하면, 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 를&lt;/a&gt; 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f594507dfbe84df768deb14a1430e696aec3e282" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.getPrototypeOf()&lt;/code&gt; method is almost the same method as &lt;a href=&quot;../object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.getPrototypeOf()&lt;/code&gt; 메소드는 &lt;a href=&quot;../object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt; 와 거의 동일한 메소드 입니다. 지정된 객체 의 프로토 타입 (즉, 내부 &lt;code&gt;[[Prototype]]&lt;/code&gt; 속성 의 값)을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="96117f1bdab8ca07b755f3c9d1f770485254a893" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.has()&lt;/code&gt; method works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.has()&lt;/code&gt; 메소드는 &lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 연산자&lt;/a&gt; 처럼 함수로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="61cfa4955f0ed6f84455e3714e51e58a202da52e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it). It is similar to &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.isExtensible()&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.isExtensible()&lt;/code&gt; 메소드는 객체가 확장 가능한지 여부를 결정합니다 (새 속성을 추가 할 수 있는지 여부). &lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; 과 비슷 하지만 약간의 &lt;a href=&quot;#Difference_to_Object.isExtensible()&quot;&gt;차이점이&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="82fbabb68637650603a621e6e651e1c535e33c57" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.ownKeys()&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.ownKeys()&lt;/code&gt; 메소드는 &lt;code&gt;target&lt;/code&gt; 객체 고유의 속성 키 배열을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="2a57630937594eb73d149839935552dede20e9c9" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.preventExtensions()&lt;/code&gt; method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It is similar to &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.preventExtensions()&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.preventExtensions()&lt;/code&gt; 메소드는 객체에 새로운 속성이 추가되는 것을 방지합니다 (즉, 객체에 대한 향후 확장을 방지). &lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 약간의 &lt;a href=&quot;#Difference_to_Object.preventExtensions()&quot;&gt;차이점이&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebdbba77dbd45f91cdb48da11c97627eee7d9438" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.set()&lt;/code&gt; method works like setting a property on an object.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.set()&lt;/code&gt; 메소드는 객체에서 속성을 설정하는 것과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="50dd64d4dfc656df46a7e0f060d23ece0a78b434" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;.setPrototypeOf()&lt;/code&gt; method is the same method as &lt;a href=&quot;../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It sets the prototype (i.e., the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of a specified object to another object or to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정적은 &lt;code&gt;&lt;strong&gt;Reflect&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;.setPrototypeOf()&lt;/code&gt; 방법과 동일한 방법 &lt;a href=&quot;../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt; . 지정된 객체 의 프로토 타입 (즉, 내부 &lt;code&gt;[[Prototype]]&lt;/code&gt; 속성)을 다른 객체 또는 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 로 설정&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="0eb93af43f589b80cf5a285f46fcba25eb100d45" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; statement is used to import bindings which are exported by another module. Imported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The &lt;code&gt;import&lt;/code&gt; statement cannot be used in embedded scripts unless such script has a &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; 명령문은 다른 모듈에서 내 보낸 바인딩을 가져 오는 데 사용됩니다. 가져온 모듈은 선언 여부에 관계없이 &lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt; &lt;/a&gt; 입니다. &lt;code&gt;import&lt;/code&gt; 등의 스크립트를 가지고 있지 않는 문이 포함 된 스크립트에서 사용할 수 없습니다 &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9813705cf188dd5f254d0eaadbddf65400aead3a" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; statement is used to import read only live bindings which are &lt;a href=&quot;export&quot;&gt;exported&lt;/a&gt; by another module. Imported modules are in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt;&lt;/a&gt; whether you declare them as such or not. The &lt;code&gt;import&lt;/code&gt; statement cannot be used in embedded scripts unless such script has a &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;. Bindings imported are called live bindings because they are updated by the module that exported the binding.</source>
          <target state="translated">정적 &lt;code&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/code&gt; 문은 &lt;a href=&quot;export&quot;&gt;내 보낸&lt;/a&gt; 읽기 전용 라이브 바인딩을 가져 오는 데 사용됩니다. 다른 모듈에서 . 가져온 모듈은 선언 여부에 관계없이 &lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict&amp;nbsp;mode&lt;/code&gt; &lt;/a&gt; 있습니다. &lt;code&gt;import&lt;/code&gt; 등의 스크립트를 가지고 있지 않는 문이 포함 된 스크립트에서 사용할 수 없습니다 &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; . 가져온 바인딩은 바인딩을 내 보낸 모듈에 의해 업데이트되므로 라이브 바인딩이라고합니다.</target>
        </trans-unit>
        <trans-unit id="d868ba88128cfe2f4dfb6b316e888ebde89b296b" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Atomics.exchange()&lt;/code&gt; method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.</source>
          <target state="translated">정적 &lt;code&gt;Atomics.exchange()&lt;/code&gt; 메서드는 주어진 값을 배열의 지정된 위치에 저장하고 해당 위치의 이전 값을 반환합니다. 이 원자 연산은 이전 값 읽기와 새 값 쓰기간에 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="0a9226ec84e2dacebdb4c2616163cd54f9d3d2e3" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Atomics.sub()&lt;/code&gt; method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</source>
          <target state="translated">정적 &lt;code&gt;Atomics.sub()&lt;/code&gt; 메서드는 배열의 지정된 위치에서 지정된 값을 빼고 해당 위치의 이전 값을 반환합니다. 이 원자 적 연산은 수정 된 값을 다시 쓸 때까지 다른 쓰기가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="f88bf7eb33c64a57d801dd3379b0fe4e960df80f" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Date.now()&lt;/code&gt; method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</source>
          <target state="translated">정적 &lt;code&gt;Date.now()&lt;/code&gt; 메서드는 1970 년 1 월 1 일 00:00:00 UTC 이후 경과 된 밀리 초 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4cff4455395e8d7a453784b6672e9138e0133455" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Promise.reject&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is rejected. For debugging purposes and selective error catching, it is useful to make &lt;code&gt;reason&lt;/code&gt; an &lt;code&gt;instanceof&lt;/code&gt;&lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">정적 &lt;code&gt;Promise.reject&lt;/code&gt; 함수 는 거부 된 &lt;code&gt;Promise&lt;/code&gt; 를 반환합니다 . 디버깅 목적과 잡기 선택적 오류의 경우, 확인하는 데 유용 &lt;code&gt;reason&lt;/code&gt; &lt;code&gt;instanceof&lt;/code&gt; 를&lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="90cfd1ce17a09ece2532de9bbc2ae9d0f2bfb7c8" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Promise.resolve&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is resolved.</source>
          <target state="translated">정적 &lt;code&gt;Promise.resolve&lt;/code&gt; 함수 는 해결 된 &lt;code&gt;Promise&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a21d42d17a2f572741533ffa8f2117a5682e671e" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.apply()&lt;/code&gt; method calls a target function with arguments as specified.</source>
          <target state="translated">The static &lt;code&gt;Reflect.apply()&lt;/code&gt; method calls a target function with arguments as specified.</target>
        </trans-unit>
        <trans-unit id="8a62d545267d57e38fd5cd02b700c84afe8a7849" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; method is like &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; but returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The static &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; method is like &lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; but returns a &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="daf9541750336db1ef3f90e685a8a5bb35fefbdc" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.get()&lt;/code&gt; method works like getting a property from an object (&lt;code&gt;target[propertyKey]&lt;/code&gt;) as a function.</source>
          <target state="translated">정적 &lt;code&gt;Reflect.get()&lt;/code&gt; 메서드는 객체 ( &lt;code&gt;target[propertyKey]&lt;/code&gt; )에서 속성을 함수로 가져 오는 것과 같이 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="e750705252caaefca2d5abe6183fc3318b43bae0" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt; method is similar to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;. It returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">The static &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt; method is similar to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt;. It returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="20a0bb46eb2f22b838e2e9fade5a9bb9eb3a74ca" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt; method is almost the same method as &lt;a href=&quot;../object/getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt;. It returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">The static &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt; method is almost the same method as &lt;a href=&quot;../object/getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt;. It returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</target>
        </trans-unit>
        <trans-unit id="4c7e4ee25c18939f40d68d9058ec9f5333cb752a" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.has()&lt;/code&gt; method works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">The static &lt;code&gt;Reflect.has()&lt;/code&gt; method works like the &lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</target>
        </trans-unit>
        <trans-unit id="7db233c270f8979d1b5c3ef2bbd6d81eac167e17" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it). It is similar to &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.isExtensible&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">The static &lt;code&gt;Reflect.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it). It is similar to &lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt;, but with some &lt;a href=&quot;#Difference_to_Object.isExtensible&quot;&gt;differences&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6a7328ff6cc40d7fecd957bafa030946ffe71bbe" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</source>
          <target state="translated">The static &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys.</target>
        </trans-unit>
        <trans-unit id="5ee721d282e35985c5967bb8bc2a21bcac8e8779" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt; method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;, but with some &lt;a href=&quot;#Difference_from_Object.preventExtensions&quot;&gt;differences&lt;/a&gt;.</source>
          <target state="translated">The static &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt; method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to &lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt;, but with some &lt;a href=&quot;#Difference_from_Object.preventExtensions&quot;&gt;differences&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="91735f1b96d2f17ae9d4b0083013a69e083cb2d9" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.set()&lt;/code&gt; method works like setting a property on an object.</source>
          <target state="translated">The static &lt;code&gt;Reflect.set()&lt;/code&gt; method works like setting a property on an object.</target>
        </trans-unit>
        <trans-unit id="b2383c9f6d48cdefe68ddd4c9c98beb354c09aa6" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; method is the same method as &lt;a href=&quot;../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;, except for its return type. It sets the prototype (i.e., the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of a specified object to another object or to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful, or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">The static &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt; method is the same method as &lt;a href=&quot;../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt;, except for its return type. It sets the prototype (i.e., the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of a specified object to another object or to &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;, and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful, or &lt;code&gt;false&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="0764467d102945b22b05fd0dad760b35aee367ab" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.fromCharCode()&lt;/code&gt; method returns a string created from the specified sequence of UTF-16 code units.</source>
          <target state="translated">정적 &lt;code&gt;String.fromCharCode()&lt;/code&gt; 메소드는 지정된 UTF-16 코드 단위 시퀀스에서 작성된 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b69a85724fb361ca15f0c31e4a0e03ac87c2298f" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.fromCodePoint()&lt;/code&gt; method returns a string created by using the specified sequence of code points.</source>
          <target state="translated">정적 &lt;code&gt;String.fromCodePoint()&lt;/code&gt; 메서드는 지정된 코드 포인트 시퀀스를 사용하여 만든 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5a1164088adaed231a8d0365747029a7565e0723" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.raw()&lt;/code&gt; method is a tag function of &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;, similar to the &lt;code&gt;r&lt;/code&gt; prefix in Python or the &lt;code&gt;@&lt;/code&gt; prefix in C# for string literals (yet there is a difference: see explanations in &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;this issue&lt;/a&gt;). It's used to get the raw string form of template strings, that is, substitutions (e.g. ${foo}) are processed, but escapes (e.g. &lt;code&gt;\n&lt;/code&gt;) are not.</source>
          <target state="translated">정적 &lt;code&gt;String.raw()&lt;/code&gt; 메서드는 파이썬 의 &lt;code&gt;r&lt;/code&gt; 접두사 또는 문자열 리터럴에 대한 C # 의 &lt;code&gt;@&lt;/code&gt; 접두사 와 비슷한 &lt;a href=&quot;../../template_literals&quot;&gt;템플릿 리터럴&lt;/a&gt; 의 태그 함수입니다 (차이가 있지만 &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;이 문제에&lt;/a&gt; 대한 설명 참조 ). 템플릿 문자열의 원시 문자열 형식을 가져 오는 데 사용됩니다. 즉, 대체 (예 : $ {foo})는 처리되지만 이스케이프 (예 : &lt;code&gt;\n&lt;/code&gt; )는 처리되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c01b8c9ffec8417a0f29a178c90e8903bce9ce58" translate="yes" xml:space="preserve">
          <source>The static &lt;code&gt;String.raw()&lt;/code&gt; method is a tag function of &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;. This is &lt;em&gt;similar&lt;/em&gt; to the &lt;code&gt;r&lt;/code&gt; prefix in Python, or the &lt;code&gt;@&lt;/code&gt; prefix in C# for string literals. (But it is not &lt;em&gt;identical&lt;/em&gt;; see explanations in &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;this issue&lt;/a&gt;.) It's used to get the raw string form of template strings, that is, substitutions (e.g. &lt;code&gt;${foo}&lt;/code&gt;) are processed, but escapes (e.g. &lt;code&gt;\n&lt;/code&gt;) are not.</source>
          <target state="translated">The static &lt;code&gt;String.raw()&lt;/code&gt; method is a tag function of &lt;a href=&quot;../../template_literals&quot;&gt;template literals&lt;/a&gt;. This is &lt;em&gt;similar&lt;/em&gt; to the &lt;code&gt;r&lt;/code&gt; prefix in Python, or the &lt;code&gt;@&lt;/code&gt; prefix in C# for string literals. (But it is not &lt;em&gt;identical&lt;/em&gt;; see explanations in &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5016&quot;&gt;this issue&lt;/a&gt;.) It's used to get the raw string form of template strings, that is, substitutions (e.g. &lt;code&gt;${foo}&lt;/code&gt; ) are processed, but escapes (e.g. &lt;code&gt;\n&lt;/code&gt; ) are not.</target>
        </trans-unit>
        <trans-unit id="a8ea9e9db5e6fe0dea4d47b272e5aa77aa474da1" translate="yes" xml:space="preserve">
          <source>The static function &lt;code&gt;&lt;strong&gt;Math.min()&lt;/strong&gt;&lt;/code&gt; returns the lowest-valued number passed into it, or &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if any parameter isn't a number and can't be converted into one.</source>
          <target state="translated">정적 함수 &lt;code&gt;&lt;strong&gt;Math.min()&lt;/strong&gt;&lt;/code&gt; 은 전달 된 가장 낮은 값의 숫자를 반환하거나 매개 변수가 숫자가 아니고 숫자로 변환 할 수없는 경우 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="343f98c933105ceddb9c93f3821cb9a718c16e0c" translate="yes" xml:space="preserve">
          <source>The static function &lt;code&gt;Math.min()&lt;/code&gt; returns the lowest-valued number passed into it, or &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if any parameter isn't a number and can't be converted into one.</source>
          <target state="translated">The static function &lt;code&gt;Math.min()&lt;/code&gt; returns the lowest-valued number passed into it, or &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; if any parameter isn't a number and can't be converted into one.</target>
        </trans-unit>
        <trans-unit id="29631328836304ccf3e2ce47dd6de68f5579f442" translate="yes" xml:space="preserve">
          <source>The static method &lt;code&gt;&lt;strong&gt;Object.defineProperty()&lt;/strong&gt;&lt;/code&gt; defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</source>
          <target state="translated">정적 메서드 &lt;code&gt;&lt;strong&gt;Object.defineProperty()&lt;/strong&gt;&lt;/code&gt; 는 객체에서 직접 새 속성을 정의하거나 객체의 기존 속성을 수정하고 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a47f0ebd85e4368447733e4227d60e812ee3637b" translate="yes" xml:space="preserve">
          <source>The static property &lt;code&gt;String.length&lt;/code&gt; is unrelated to the length of strings, it's the arity of the &lt;code&gt;String&lt;/code&gt; function (loosely, the number of formal parameters it has), which is 1.</source>
          <target state="translated">The static property &lt;code&gt;String.length&lt;/code&gt; is unrelated to the length of strings, it's the arity of the &lt;code&gt;String&lt;/code&gt; function (loosely, the number of formal parameters it has), which is 1.</target>
        </trans-unit>
        <trans-unit id="cd2c8d431cfc97f7ef0dad5eb64f02608a89c081" translate="yes" xml:space="preserve">
          <source>The static property &lt;code&gt;String.length&lt;/code&gt; returns the value 1.</source>
          <target state="translated">정적 속성 &lt;code&gt;String.length&lt;/code&gt; 는 값 1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d9489b7724c11a3e7506bfd4efd8ea6899a4157a" translate="yes" xml:space="preserve">
          <source>The strict equality operators (&lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;) use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;Strict Equality Comparison Algorithm&lt;/a&gt; and are intended for performing equality comparisons on operands of the same type. If the operands are of different types, the result is always &lt;code&gt;false&lt;/code&gt; so &lt;code&gt;5 !== '5'&lt;/code&gt;.</source>
          <target state="translated">엄격한 항등 연산자 ( &lt;code&gt;===&lt;/code&gt; 및 &lt;code&gt;!==&lt;/code&gt; )는 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6&quot;&gt;엄격한 평등 비교 알고리즘&lt;/a&gt; 을 사용하며 동일한 유형의 피연산자에서 동등 비교를 수행하기위한 것입니다. 피연산자가 다른 유형 인 경우 결과는 항상 &lt;code&gt;false&lt;/code&gt; 이므로 &lt;code&gt;5 !== '5'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2c891432614e0271990b19ee19c1960c4f7ed000" translate="yes" xml:space="preserve">
          <source>The string &quot;GMT&quot;</source>
          <target state="translated">문자열 &quot;GMT&quot;</target>
        </trans-unit>
        <trans-unit id="6088cf870949b49d36a431015f841c203f32b399" translate="yes" xml:space="preserve">
          <source>The string against which the &lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; is compared.</source>
          <target state="translated">The string against which the &lt;code&gt;&lt;var&gt;referenceStr&lt;/var&gt;&lt;/code&gt; is compared.</target>
        </trans-unit>
        <trans-unit id="ea2dee8a6f09197d3ef866b17c4fd784a8a2c4b5" translate="yes" xml:space="preserve">
          <source>The string against which the referring string is compared</source>
          <target state="translated">참조 문자열이 비교되는 문자열</target>
        </trans-unit>
        <trans-unit id="468533e087e1f94dc468f647db1085e7614cb88f" translate="yes" xml:space="preserve">
          <source>The string against which to match the regular expression.</source>
          <target state="translated">정규식과 일치하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="8791aa250b59014327c5ae3d1bec5e5e7b33faa7" translate="yes" xml:space="preserve">
          <source>The string conversions of all array elements are joined into one string.</source>
          <target state="translated">모든 배열 요소의 문자열 변환은 하나의 문자열로 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="083e61e70ae1931edd0dd9b748da358341d4a05c" translate="yes" xml:space="preserve">
          <source>The string name of the desired custom section.</source>
          <target state="translated">원하는 사용자 정의 섹션의 문자열 이름입니다.</target>
        </trans-unit>
        <trans-unit id="0499197d0f18f7e883f893ecbdf08eba61358189" translate="yes" xml:space="preserve">
          <source>The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt;, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is &quot;&quot; (&lt;code&gt;U+0020&lt;/code&gt;).</source>
          <target state="translated">The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; , it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is &quot;&quot; ( &lt;code&gt;U+0020&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3634ae755e3cc6172656cbc241422c078eafe53e" translate="yes" xml:space="preserve">
          <source>The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within the &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt;, it will be truncated from the end. The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; (&lt;code&gt;U+0020 'SPACE'&lt;/code&gt;).</source>
          <target state="translated">The string to pad the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; with. If &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; is too long to stay within the &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; , it will be truncated from the end. The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; ( &lt;code&gt;U+0020 'SPACE'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8949040080f63f417888c8f3d4b5caca1e95b9d2" translate="yes" xml:space="preserve">
          <source>The string to pad the current string with. If this padding string is too long to stay within the &lt;code&gt;targetLength&lt;/code&gt;, it will be truncated from the right. The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; (U+0020 'SPACE').</source>
          <target state="translated">현재 문자열을 채울 문자열입니다. 이 패딩 문자열이 너무 길어 &lt;code&gt;targetLength&lt;/code&gt; 내에 머 무르지 않으면 오른쪽에서 잘립니다. 기본값은 &lt;code&gt;&quot; &quot;&lt;/code&gt; (U + 0020 'SPACE')입니다.</target>
        </trans-unit>
        <trans-unit id="3ae9c2ba9c07edac725622631c539ef4861220e2" translate="yes" xml:space="preserve">
          <source>The string to pad the current string with. If this string is too long to stay within the target length, it will be truncated and the left-most part will be applied. The default value for this parameter is &quot; &quot; (U+0020).</source>
          <target state="translated">현재 문자열을 채울 문자열입니다. 이 문자열이 너무 길어 대상 길이 내에 머 무르지 않으면 잘리고 가장 왼쪽 부분이 적용됩니다. 이 매개 변수의 기본값은 &quot;&quot;(U + 0020)입니다.</target>
        </trans-unit>
        <trans-unit id="6eb20efa8147914bead5cc85faabfd37b0a79ce2" translate="yes" xml:space="preserve">
          <source>The string to parse as JSON. See the &lt;a href=&quot;../json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; object for a description of JSON syntax.</source>
          <target state="translated">JSON으로 구문 분석 할 문자열입니다. JSON 구문에 대한 설명은 &lt;a href=&quot;../json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt; 객체를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ece383f4f046e3b10b8fdb40e94943fce8defe5f" translate="yes" xml:space="preserve">
          <source>The string used for separating date and time values, for example &lt;code&gt;&quot;/&quot;&lt;/code&gt;, &lt;code&gt;&quot;,&quot;&lt;/code&gt;, &lt;code&gt;&quot;o'clock&quot;&lt;/code&gt;, &lt;code&gt;&quot;de&quot;&lt;/code&gt;, etc.</source>
          <target state="translated">날짜 및 시간 값을 구분하는 데 사용되는 문자열 (예 : &lt;code&gt;&quot;/&quot;&lt;/code&gt; , &lt;code&gt;&quot;,&quot;&lt;/code&gt; , &lt;code&gt;&quot;o'clock&quot;&lt;/code&gt; , &lt;code&gt;&quot;de&quot;&lt;/code&gt; 등)</target>
        </trans-unit>
        <trans-unit id="97c70adf07ed6fe421e6ab3aea9f6e11b32d0bad" translate="yes" xml:space="preserve">
          <source>The string used for the day period, for example, &lt;code&gt;&quot;AM&quot;&lt;/code&gt; or &lt;code&gt;&quot;PM&quot;&lt;/code&gt;.</source>
          <target state="translated">하루 기간, 예를 들어, 사용되는 문자열 &lt;code&gt;&quot;AM&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;PM&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eea68f2b6d4f128ec3670c07ba8f52cfffd311f9" translate="yes" xml:space="preserve">
          <source>The string used for the day, for example &lt;code&gt;&quot;17&quot;&lt;/code&gt;.</source>
          <target state="translated">문자열은 예를 들어, 하루에 사용되는 &lt;code&gt;&quot;17&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f7b7a19d8ba4def5ebc35fa32d9269cd27826d41" translate="yes" xml:space="preserve">
          <source>The string used for the era, for example &lt;code&gt;&quot;BC&quot;&lt;/code&gt; or &lt;code&gt;&quot;AD&quot;&lt;/code&gt;.</source>
          <target state="translated">시대에 사용되는 문자열, 예를 들어 &lt;code&gt;&quot;BC&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;AD&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e759f6fbbacc6f99271187d7be9864bc5915384e" translate="yes" xml:space="preserve">
          <source>The string used for the hour, for example &lt;code&gt;&quot;3&quot;&lt;/code&gt; or &lt;code&gt;&quot;03&quot;&lt;/code&gt;.</source>
          <target state="translated">문자열은 예를 들어, 시간에 사용되는 &lt;code&gt;&quot;3&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;03&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c164fc6c65c7700fa960520236c816173fcc5617" translate="yes" xml:space="preserve">
          <source>The string used for the minute, for example &lt;code&gt;&quot;00&quot;&lt;/code&gt;.</source>
          <target state="translated">문자열은 예를 들어, 분 사용 &lt;code&gt;&quot;00&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="60ec32bec7d9d2a13914ab52ebda2d26f201b9c4" translate="yes" xml:space="preserve">
          <source>The string used for the month, for example &lt;code&gt;&quot;12&quot;&lt;/code&gt;.</source>
          <target state="translated">문자열은 예를 들어, 한 달에 사용되는 &lt;code&gt;&quot;12&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d19840cd065c09bec79def64ce95d20a60fb6ef" translate="yes" xml:space="preserve">
          <source>The string used for the name of the time zone, for example &lt;code&gt;&quot;UTC&quot;&lt;/code&gt;.</source>
          <target state="translated">문자열은 예를 들어, 표준 시간대의 이름에 사용 &lt;code&gt;&quot;UTC&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b1d68127d11a219f5babe3c20efc89826607e6f8" translate="yes" xml:space="preserve">
          <source>The string used for the second, for example &lt;code&gt;&quot;07&quot;&lt;/code&gt; or &lt;code&gt;&quot;42&quot;&lt;/code&gt;.</source>
          <target state="translated">문자열은 예를 들어, 제 2 사용 &lt;code&gt;&quot;07&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;42&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d38a4ade74d0ab4b893963b67d1cb09d9f2a404" translate="yes" xml:space="preserve">
          <source>The string used for the weekday, for example &lt;code&gt;&quot;M&quot;&lt;/code&gt;, &lt;code&gt;&quot;Monday&quot;&lt;/code&gt;, or &lt;code&gt;&quot;Montag&quot;&lt;/code&gt;.</source>
          <target state="translated">다음은 평일에 사용되는 문자열, 예를 들어, &lt;code&gt;&quot;M&quot;&lt;/code&gt; , &lt;code&gt;&quot;Monday&quot;&lt;/code&gt; , 또는 &lt;code&gt;&quot;Montag&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae2ae8cd920d70f01746ef457540b120762ad06a" translate="yes" xml:space="preserve">
          <source>The string used for the year, for example &lt;code&gt;&quot;2012&quot;&lt;/code&gt; or &lt;code&gt;&quot;96&quot;&lt;/code&gt;.</source>
          <target state="translated">문자열은 예를 들어, 한 해에 사용되는 &lt;code&gt;&quot;2012&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;96&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="86421d2891f0d5bb6fd879465cb16df8ec5f0662" translate="yes" xml:space="preserve">
          <source>The string value to search for.</source>
          <target state="translated">The string value to search for.</target>
        </trans-unit>
        <trans-unit id="e9bdde92d3cbeffaa082f651f11b497fa77b8fd2" translate="yes" xml:space="preserve">
          <source>The strings to compare against each other.</source>
          <target state="translated">서로 비교할 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="f492cc4dc8b9f08a8ef3581852dc08ee1c45a4bb" translate="yes" xml:space="preserve">
          <source>The structured clone algorithm accepts &lt;code&gt;SharedArrayBuffers&lt;/code&gt; and &lt;code&gt;TypedArrays&lt;/code&gt; mapped onto &lt;code&gt;SharedArrayBuffers&lt;/code&gt;. In both cases, the &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object is transmitted to the receiver resulting in a new, private SharedArrayBuffer object in the receiving agent (just as for &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;). However, the shared data block referenced by the two &lt;code&gt;SharedArrayBuffer&lt;/code&gt; objects is the same data block, and a side effect to the block in one agent will eventually become visible in the other agent.</source>
          <target state="translated">구조화 된 클론 알고리즘은 &lt;code&gt;SharedArrayBuffers&lt;/code&gt; 에 매핑 된 SharedArrayBuffers 및 &lt;code&gt;TypedArrays&lt;/code&gt; 를 &lt;code&gt;SharedArrayBuffers&lt;/code&gt; 합니다. 두 경우 모두 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 객체가 수신기로 전송되어 수신 에이전트에 새로운 Private SharedArrayBuffer 객체가 생성됩니다 ( &lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 와 동일 ). 그러나 두 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 객체가 참조하는 공유 데이터 블록 은 동일한 데이터 블록이므로 한 에이전트의 블록에 대한 부작용은 다른 에이전트에서 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="caf06e59dd9d3fd319181700e1588c2227e098f4" translate="yes" xml:space="preserve">
          <source>The subtags identifying languages, scripts, countries (regions), and (rarely used) variants in BCP 47 language tags can be found in the &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA Language Subtag Registry&lt;/a&gt;.</source>
          <target state="translated">BCP 47 언어 태그에서 언어, 스크립트, 국가 (지역) 및 (드물게 사용되는) 변형을 식별하는 하위 태그는 &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA 언어 하위 태그 레지스트리&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a9423bac9c60cd258c03ee904fae2a893cde2301" translate="yes" xml:space="preserve">
          <source>The subtags identifying languages, scripts, regions (including countries), and (rarely used) variants in Unicode BCP 47 locale identifiers are registered in the &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA Language Subtag Registry&lt;/a&gt;. This registry is periodically updated over time, and implementations may not always be up to date, so be careful not to rely too much on tags being universally supported.</source>
          <target state="translated">The subtags identifying languages, scripts, regions (including countries), and (rarely used) variants in Unicode BCP 47 locale identifiers are registered in the &lt;a href=&quot;http://www.iana.org/assignments/language-subtag-registry&quot;&gt;IANA Language Subtag Registry&lt;/a&gt;. This registry is periodically updated over time, and implementations may not always be up to date, so be careful not to rely too much on tags being universally supported.</target>
        </trans-unit>
        <trans-unit id="1d96fc08252b76140c13df72ca13f6fd74626dbc" translate="yes" xml:space="preserve">
          <source>The subtraction assignment operator &lt;strong&gt;subtracts&lt;/strong&gt; the value of the right operand from a variable and assigns the result to the variable. See the &lt;a href=&quot;arithmetic_operators#Subtraction&quot;&gt;subtraction operator&lt;/a&gt; for more details.</source>
          <target state="translated">빼기 대입 연산자 는 변수에서 오른쪽 피연산자 값을 &lt;strong&gt;빼고&lt;/strong&gt; 결과를 변수에 지정합니다. 자세한 내용은 &lt;a href=&quot;arithmetic_operators#Subtraction&quot;&gt;빼기 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e5a192606cd2379497ef7500778ef0dedd487da3" translate="yes" xml:space="preserve">
          <source>The subtraction operator subtracts the two operands, producing their difference.</source>
          <target state="translated">빼기 연산자는 두 피연산자를 빼서 차이를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e6dc35427b4f1231c395f42c780c2c32dc31571c" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;&lt;em&gt;function&lt;/em&gt;.arguments&lt;/code&gt; is deprecated. The recommended way to access the &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object available within functions is simply to refer to the variable &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">구문 &lt;code&gt;&lt;em&gt;function&lt;/em&gt;.arguments&lt;/code&gt; 는 더 이상 사용되지 않습니다. 함수 내에서 사용 가능한 &lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 객체 에 액세스하기 위해 권장되는 방법 은 변수 &lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 를 참조하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="35225de91c22309587e0765dbda7a1b56bc3fa5c" translate="yes" xml:space="preserve">
          <source>The syntax consists of the keyword &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;, a dot, and the identifier &lt;code&gt;meta&lt;/code&gt;. Normally the left-hand side of the dot is the object on which property access is performed, but here &lt;code&gt;import&lt;/code&gt; is not really an object.</source>
          <target state="translated">The syntax consists of the keyword &lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;, a dot, and the identifier &lt;code&gt;meta&lt;/code&gt; . Normally the left-hand side of the dot is the object on which property access is performed, but here &lt;code&gt;import&lt;/code&gt; is not really an object.</target>
        </trans-unit>
        <trans-unit id="661ebe8cbb257036b3bf53968d2ada79c762b25a" translate="yes" xml:space="preserve">
          <source>The tag function can then perform whatever operations on these arguments you wish, and return the manipulated string. (Alternatively, it can return something completely different, as described in one of the following examples.)</source>
          <target state="translated">The tag function can then perform whatever operations on these arguments you wish, and return the manipulated string. (Alternatively, it can return something completely different, as described in one of the following examples.)</target>
        </trans-unit>
        <trans-unit id="dccb74fcc0fb4fc59af8e4a4d10de9e91cf03e6f" translate="yes" xml:space="preserve">
          <source>The tangent of the given number.</source>
          <target state="translated">주어진 숫자의 탄젠트</target>
        </trans-unit>
        <trans-unit id="469f21f213b41d308c8920db480a81cde33a180c" translate="yes" xml:space="preserve">
          <source>The target function to call.</source>
          <target state="translated">호출 할 대상 함수입니다.</target>
        </trans-unit>
        <trans-unit id="7875ceec72aba0e247daa5bcc9e1dd435300c2d4" translate="yes" xml:space="preserve">
          <source>The target object &amp;mdash; what to apply the sources&amp;rsquo; properties to, which is returned after it is modified.</source>
          <target state="translated">The target object &amp;mdash; what to apply the sources&amp;rsquo; properties to, which is returned after it is modified.</target>
        </trans-unit>
        <trans-unit id="00cce84c44330816293f399e47c6565e41c09eab" translate="yes" xml:space="preserve">
          <source>The target object from which to get the own keys.</source>
          <target state="translated">자체 키를 가져올 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="4e874cec897bdf6f3133cdf496c41e2ff9d741f9" translate="yes" xml:space="preserve">
          <source>The target object in which to look for the property.</source>
          <target state="translated">속성을 찾을 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="051b09e678e5463dcd53a2c00c66fcc5f1782088" translate="yes" xml:space="preserve">
          <source>The target object of which to get the prototype.</source>
          <target state="translated">프로토 타입을 가져올 대상 객체입니다.</target>
        </trans-unit>
        <trans-unit id="3bdead44f0d65b55d04c7601b57d65563c409e3b" translate="yes" xml:space="preserve">
          <source>The target object of which to set the prototype.</source>
          <target state="translated">프로토 타입을 설정할 대상 객체입니다.</target>
        </trans-unit>
        <trans-unit id="bf0854843b5e6ba404edf72c5e026e5f2141d555" translate="yes" xml:space="preserve">
          <source>The target object on which to define the property.</source>
          <target state="translated">속성을 정의 할 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="675a5362df487c69972974a9c10fa55e04caf16c" translate="yes" xml:space="preserve">
          <source>The target object on which to delete the property.</source>
          <target state="translated">속성을 삭제할 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="8b8960b4509e85a95deceb884878547ff861b0fd" translate="yes" xml:space="preserve">
          <source>The target object on which to get the property.</source>
          <target state="translated">속성을 가져올 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="6616a2e8a46edcbbb895a56e27f583fe0a532ade" translate="yes" xml:space="preserve">
          <source>The target object on which to prevent extensions.</source>
          <target state="translated">확장을 방지 할 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="5a6cbb29e073667475e26ed91074bb4afb428091" translate="yes" xml:space="preserve">
          <source>The target object on which to set the property.</source>
          <target state="translated">속성을 설정할 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="3dac858a5554f83564f7741da52fdb4a7aaf52dc" translate="yes" xml:space="preserve">
          <source>The target object which to check if it is extensible.</source>
          <target state="translated">확장 가능한지 확인할 대상 개체입니다.</target>
        </trans-unit>
        <trans-unit id="ccd29524854cacce5352c71cfb138711774ab1b4" translate="yes" xml:space="preserve">
          <source>The target object.</source>
          <target state="translated">대상 객체.</target>
        </trans-unit>
        <trans-unit id="040c0d8b033a7367e4036448381976cfc9922ebe" translate="yes" xml:space="preserve">
          <source>The target of the split operation.</source>
          <target state="translated">분할 작업의 대상입니다.</target>
        </trans-unit>
        <trans-unit id="7a67583055232db8b491024de029833ccb0310ac" translate="yes" xml:space="preserve">
          <source>The temporal dead zone and &lt;code&gt;typeof&lt;/code&gt;</source>
          <target state="translated">시간적 데드 존 및 &lt;code&gt;typeof&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af12426e57044936bc5a7828d384453e2f121825" translate="yes" xml:space="preserve">
          <source>The termination condition of a promise determines the &quot;settled&quot; state of the next promise in the chain. Any termination other than a &lt;code&gt;throw&lt;/code&gt; creates a &quot;resolved&quot; state while terminating with a &lt;code&gt;throw&lt;/code&gt; creates a &quot;rejected&quot; state.</source>
          <target state="translated">The termination condition of a promise determines the &quot;settled&quot; state of the next promise in the chain. Any termination other than a &lt;code&gt;throw&lt;/code&gt; creates a &quot;resolved&quot; state while terminating with a &lt;code&gt;throw&lt;/code&gt; creates a &quot;rejected&quot; state.</target>
        </trans-unit>
        <trans-unit id="824ca534e0a3140303d94cf320dfce9866fe7a67" translate="yes" xml:space="preserve">
          <source>The ternary operator is right-associative, which means it can be &quot;chained&quot; in the following way, similar to an &lt;code&gt;if &amp;hellip; else if &amp;hellip; else if &amp;hellip; else&lt;/code&gt; chain:</source>
          <target state="translated">삼항 연산자는 오른쪽 연관입니다. 이는 다음과 같은 방식으로 &quot;연결&quot;될 수 있음을 의미하며, &lt;code&gt;if &amp;hellip; else if &amp;hellip; else if &amp;hellip; else&lt;/code&gt; chain 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="f17ba73f80e0163509c9c072d0ed6e5856bb4cbe" translate="yes" xml:space="preserve">
          <source>The text of the pattern.</source>
          <target state="translated">패턴의 텍스트</target>
        </trans-unit>
        <trans-unit id="e8bf802ef8806ed6f866faf091bb463b602b37d4" translate="yes" xml:space="preserve">
          <source>The text of the regular expression or, as of ES5, another RegExp object (or literal) to copy (the latter for the two RegExp constructor notations only).</source>
          <target state="translated">정규식의 텍스트 또는 ES5에서 복사 할 다른 RegExp 객체 (또는 리터럴)의 텍스트 (후자는 두 개의 RegExp 생성자 표기법에만 해당)</target>
        </trans-unit>
        <trans-unit id="50666938177ee823dfcefe3edcfba80d5469a3f9" translate="yes" xml:space="preserve">
          <source>The text of the regular expression.</source>
          <target state="translated">정규식의 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="195791289d43b75e8e708dc661fc4d0ecceca467" translate="yes" xml:space="preserve">
          <source>The third argument is ignored by &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt&lt;/code&gt;&lt;/a&gt;&amp;mdash;but &lt;em&gt;not&lt;/em&gt; the second one! This is the source of possible confusion.</source>
          <target state="translated">The third argument is ignored by &lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt&lt;/code&gt; &lt;/a&gt;&amp;mdash;but &lt;em&gt;not&lt;/em&gt; the second one! This is the source of possible confusion.</target>
        </trans-unit>
        <trans-unit id="4e8de670d0da361927bb0beeeb9f6c7b622d64e7" translate="yes" xml:space="preserve">
          <source>The this argument for the call.</source>
          <target state="translated">호출에 대한 this 인수.</target>
        </trans-unit>
        <trans-unit id="78bf0895bd11812425093c3ff20374b2395fe39e" translate="yes" xml:space="preserve">
          <source>The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.</source>
          <target state="translated">The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.</target>
        </trans-unit>
        <trans-unit id="0bc2d6527e1e2ae900dd565b052cea11a754d135" translate="yes" xml:space="preserve">
          <source>The time and space complexity of the sort cannot be guaranteed as it is implementation dependent.</source>
          <target state="translated">정렬의 시간 및 공간 복잡성은 구현에 따라 다르므로 보장 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bad9736ef06f86e7966289bce2abb4832b000b82" translate="yes" xml:space="preserve">
          <source>The time zone offset returned is the one that applies for the Date that it's called on.</source>
          <target state="translated">The time zone offset returned is the one that applies for the Date that it's called on.</target>
        </trans-unit>
        <trans-unit id="6e8eb90b7012bf77a3d29bc66b2ceddfe35221e7" translate="yes" xml:space="preserve">
          <source>The time zone offset returned is the one that applies for the Date that it's called on. Where the host system is configured for daylight saving, the offset will change depending on the date and time that the Date represents and that daylight saving applies.</source>
          <target state="translated">반환 된 시간대 오프셋은 호출 된 날짜에 적용되는 시간대 오프셋입니다. 호스트 시스템이 일광 절약을 위해 구성된 경우 오프셋은 날짜가 나타내는 날짜 및 시간과 일광 절약이 적용되는 날짜에 따라 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="69013b7077c0106667c8e85d0871460c6d1ede7f" translate="yes" xml:space="preserve">
          <source>The time zone to use. The only value implementations must recognize is &lt;code&gt;&quot;UTC&quot;&lt;/code&gt;; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA time zone database&lt;/a&gt;, such as &lt;code&gt;&quot;Asia/Shanghai&quot;&lt;/code&gt;, &lt;code&gt;&quot;Asia/Kolkata&quot;&lt;/code&gt;, &lt;code&gt;&quot;America/New_York&quot;&lt;/code&gt;.</source>
          <target state="translated">사용할 시간대 유일하게 구현해야 할 가치 구현은 &lt;code&gt;&quot;UTC&quot;&lt;/code&gt; 입니다 . 기본값은 런타임의 기본 시간대입니다. 구현은 또한 &lt;code&gt;&quot;Asia/Shanghai&quot;&lt;/code&gt; , &lt;code&gt;&quot;Asia/Kolkata&quot;&lt;/code&gt; , &lt;code&gt;&quot;America/New_York&quot;&lt;/code&gt; 와 같은 &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;IANA 시간대 데이터베이스&lt;/a&gt; 의 시간대 이름을 인식 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="733c8e3f5bb06fb45edb56167b6f5498d9a8721b" translate="yes" xml:space="preserve">
          <source>The time-zone offset is the difference, in minutes, from local time to UTC.</source>
          <target state="translated">The time-zone offset is the difference, in minutes, from local time to UTC.</target>
        </trans-unit>
        <trans-unit id="ed347c9f4cd940be64c7f00782838e610c8b23ba" translate="yes" xml:space="preserve">
          <source>The time-zone offset is the difference, in minutes, from local time to UTC. Note that this means that the offset is positive if the local timezone is behind UTC and negative if it is ahead. For example, for time zone UTC+10:00 (Australian Eastern Standard Time, Vladivostok Time, Chamorro Standard Time), -600 will be returned.</source>
          <target state="translated">시간대 오프셋은 현지 시간과 UTC의 차이 (분)입니다. 이는 현지 시간대가 UTC보다 뒤에 있으면 오프셋이 양수이고, 앞에 있으면 네거티브임을 의미합니다. 예를 들어 UTC + 10 : 00 시간대 (오스트레일리아 동부 표준시, 블라디보스토크 시간, 차모로 표준시)의 경우 -600이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d8894cfe4467d5eb790a05c0aee3d5ffaca1c075" translate="yes" xml:space="preserve">
          <source>The trigonometric functions &lt;code&gt;sin()&lt;/code&gt;, &lt;code&gt;cos()&lt;/code&gt;, &lt;code&gt;tan()&lt;/code&gt;, &lt;code&gt;asin()&lt;/code&gt;, &lt;code&gt;acos()&lt;/code&gt;, &lt;code&gt;atan()&lt;/code&gt;, and &lt;code&gt;atan2()&lt;/code&gt; expect (and return) angles in &lt;em&gt;radians&lt;/em&gt;.</source>
          <target state="translated">The trigonometric functions &lt;code&gt;sin()&lt;/code&gt; , &lt;code&gt;cos()&lt;/code&gt; , &lt;code&gt;tan()&lt;/code&gt; , &lt;code&gt;asin()&lt;/code&gt; , &lt;code&gt;acos()&lt;/code&gt; , &lt;code&gt;atan()&lt;/code&gt; , and &lt;code&gt;atan2()&lt;/code&gt; expect (and return) angles in &lt;em&gt;radians&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="b30c359a4c613b1c190581117b776bc087a1dc16" translate="yes" xml:space="preserve">
          <source>The two's complement guarantees that the left-most bit is 0 when the number is positive and 1 when the number is negative. Thus, it is called the &lt;em&gt;sign bit&lt;/em&gt;.</source>
          <target state="translated">2의 보수는 숫자가 양수인 경우 맨 왼쪽 비트가 0이고 숫자가 음수 인 경우 1을 보장합니다. 따라서이를 &lt;em&gt;부호 비트&lt;/em&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="2f0e6e55a08664fd87f1098bd9485f986f7871d6" translate="yes" xml:space="preserve">
          <source>The type of each array element is either a &lt;a href=&quot;../../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">각 배열 요소의 유형은 &lt;a href=&quot;../../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e35aa223fd73eda1f795b991cd0cb3da98fedde9" translate="yes" xml:space="preserve">
          <source>The type of individual arguments can be determined by indexing &lt;code&gt;arguments&lt;/code&gt;:</source>
          <target state="translated">개별 인수의 유형은 색인에 의해 결정될 수있다 &lt;code&gt;arguments&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="51b6a2ef8e29331a08d48d85c1cc207b866ee6df" translate="yes" xml:space="preserve">
          <source>The type to use. Possible values are:</source>
          <target state="translated">사용할 유형입니다. 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2a7eaaa9a5e1205e7f93111a1f880f2d40b548b1" translate="yes" xml:space="preserve">
          <source>The type used (&lt;code&gt;cardinal&lt;/code&gt; or &lt;code&gt;ordinal&lt;/code&gt;).</source>
          <target state="translated">사용 된 유형 ( &lt;code&gt;cardinal&lt;/code&gt; 또는 &lt;code&gt;ordinal&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c37b46bd7b92c7bb3ebf9ecc3f4d45f87e92652c" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;every&lt;/code&gt; was called upon.</source>
          <target state="translated">입력 된 배열 &lt;code&gt;every&lt;/code&gt; 따라 불렀다.</target>
        </trans-unit>
        <trans-unit id="5298f166f10ed90e1cdd38e5c53e23ec0c73dbe8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;findIndex&lt;/code&gt; was called upon.</source>
          <target state="translated">유형이 지정된 배열 &lt;code&gt;findIndex&lt;/code&gt; 가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="b983755540296d3bf31c620e2154efed50f704b8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;map()&lt;/code&gt; was called upon.</source>
          <target state="translated">The typed array &lt;code&gt;map()&lt;/code&gt; was called upon.</target>
        </trans-unit>
        <trans-unit id="e38de23fabf4e3d3556dbf8011fd71dea9a9fba8" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;map&lt;/code&gt; was called upon.</source>
          <target state="translated">입력 된 배열 &lt;code&gt;map&lt;/code&gt; 이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="c0c164fa750b8ed95b7699fd8459ee95382c5425" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;reduce&lt;/code&gt; was called upon.</source>
          <target state="translated">형식화 된 배열 &lt;code&gt;reduce&lt;/code&gt; 가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="075012c9a0aa358b8a4f8937b9444b4c48842acf" translate="yes" xml:space="preserve">
          <source>The typed array &lt;code&gt;some&lt;/code&gt; was called upon.</source>
          <target state="translated">The typed array &lt;code&gt;some&lt;/code&gt; was called upon.</target>
        </trans-unit>
        <trans-unit id="93256d9b5ee445d4026c265fa2b246dc43bae9bc" translate="yes" xml:space="preserve">
          <source>The unary negation operator converts its operand to Number type and then negates it.</source>
          <target state="translated">단항 부정 연산자는 피연산자를 숫자 유형으로 변환 한 다음 부정합니다.</target>
        </trans-unit>
        <trans-unit id="a2d8c115850a5d12a72f7054b87d2ed428d4640b" translate="yes" xml:space="preserve">
          <source>The unary negation operator precedes its operand and negates it.</source>
          <target state="translated">단항 부정 연산자는 피연산자보다 앞에 오며 부정합니다.</target>
        </trans-unit>
        <trans-unit id="0970e3ebe9139b263bea5622849a0f6b003cdc95" translate="yes" xml:space="preserve">
          <source>The unary plus operator converts its operand to Number type.</source>
          <target state="translated">단항 더하기 연산자는 피연산자를 숫자 유형으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="470a22fa7fae7b57fb487e03bf1af5364fe8fa03" translate="yes" xml:space="preserve">
          <source>The unary plus operator precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already. Although unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number. It can convert string representations of integers and floats, as well as the non-string values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;. Integers in both decimal and hexadecimal (&quot;0x&quot;-prefixed) formats are supported. Negative numbers are supported (though not for hex). If it cannot parse a particular value, it will evaluate to &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt;.</source>
          <target state="translated">단항 더하기 연산자는 피연산자 앞에 오며 피연산자로 평가되지만 숫자가 아닌 경우에는 피연산자로 변환하려고 시도합니다. 단항 부정 (-)도 숫자가 아닌 숫자를 변환 할 수 있지만, 단항 더하기는 숫자에 대해 다른 연산을 수행하지 않기 때문에 무언가를 숫자로 변환하는 가장 빠르고 선호되는 방법입니다. 문자열이 아닌 값 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 및 &lt;code&gt;null&lt;/code&gt; 뿐만 아니라 정수 및 부동 소수점의 문자열 표현을 변환 할 수 있습니다 . 10 진수 및 16 진수 ( &quot;0x&quot;접두사) 형식의 정수가 지원됩니다. 음수가 지원됩니다 (16 진수는 아님). 특정 값을 구문 분석 할 수 없으면 &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN으로&lt;/a&gt; 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="59a4d2b2661caed6293860fbd4d244fb09e13a12" translate="yes" xml:space="preserve">
          <source>The unsigned right shift assignment operator moves the specified amount of bits to the right and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Unsigned_right_shift&quot;&gt; unsigned right shift operator&lt;/a&gt; for more details.</source>
          <target state="translated">부호없는 오른쪽 시프트 할당 연산자는 지정된 비트 수를 오른쪽으로 이동하고 결과를 변수에 할당합니다. 자세한 내용은 &lt;a href=&quot;bitwise_operators#Unsigned_right_shift&quot;&gt;부호없는 오른쪽 시프트 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="25e024a19a4d67d0856fd45914d89cb216b0fc0c" translate="yes" xml:space="preserve">
          <source>The use case for this syntax over using the dot notation (&lt;code&gt;Array.prototype.values()&lt;/code&gt;) is in a case where you don't know what object is going to be ahead of time. If you have a function that takes an iterator and then iterate over the value, but don't know if that Object is going to have a [Iterable].prototype.values method. This could be a built-in object like &lt;a href=&quot;../string/@@iterator&quot;&gt;String&lt;/a&gt; object or a custom object.</source>
          <target state="translated">The use case for this syntax over using the dot notation ( &lt;code&gt;Array.prototype.values()&lt;/code&gt; ) is in a case where you don't know what object is going to be ahead of time. If you have a function that takes an iterator and then iterate over the value, but don't know if that Object is going to have a [Iterable].prototype.values method. This could be a built-in object like &lt;a href=&quot;../string/@@iterator&quot;&gt;String&lt;/a&gt; object or a custom object.</target>
        </trans-unit>
        <trans-unit id="7a60d03695e2ab45d0e87e8a25df20b17610f271" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;__proto__&lt;/code&gt; is controversial and discouraged. It was never originally included in the ECMAScript language spec, but modern browsers implemented it anyway. Only recently was the &lt;code&gt;__proto__&lt;/code&gt; property standardized by the ECMAScript 2015 specification for compatibility with web browsers, so it will be supported into the future. It is deprecated in favor of &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/getprototypeof&quot;&gt;&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt;&lt;/a&gt; (though still, setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is a slow operation that should be avoided if performance is a concern).</source>
          <target state="translated">The use of &lt;code&gt;__proto__&lt;/code&gt; is controversial and discouraged. It was never originally included in the ECMAScript language spec, but modern browsers implemented it anyway. Only recently was the &lt;code&gt;__proto__&lt;/code&gt; property standardized by the ECMAScript 2015 specification for compatibility with web browsers, so it will be supported into the future. It is deprecated in favor of &lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt;/&lt;a href=&quot;../reflect/getprototypeof&quot;&gt; &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt;/&lt;a href=&quot;../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; &lt;/a&gt; (though still, setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is a slow operation that should be avoided if performance is a concern).</target>
        </trans-unit>
        <trans-unit id="267aaa42385e594f47748569e88ec1144f8cbe9f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;__proto__&lt;/code&gt; is controversial, and has been discouraged. It was never originally included in the EcmaScript language spec, but modern browsers decided to implement it anyway. Only recently, the &lt;code&gt;__proto__&lt;/code&gt; property has been standardized in the ECMAScript 2015 language specification for web browsers to ensure compatibility, so will be supported into the future. It is deprecated in favor of &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/getprototypeof&quot;&gt;&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;../reflect/setprototypeof&quot;&gt;&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt;&lt;/a&gt; (though still, setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is a slow operation that should be avoided if performance is a concern).</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; 의 사용 은 논쟁의 여지가 있으며 사용하지 않는 것이 좋습니다. 원래 EcmaScript 언어 사양에는 포함되지 않았지만 최신 브라우저는이를 구현하기로 결정했습니다. 최근에 &lt;code&gt;__proto__&lt;/code&gt; 속성은 호환성을 보장하기 위해 웹 브라우저에 대한 ECMAScript 2015 언어 사양으로 표준화되어 향후 지원 될 예정입니다. &lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/getprototypeof&quot;&gt; &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;../reflect/setprototypeof&quot;&gt; &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; &lt;/a&gt; 를 위해 더 이상 사용되지 않습니다 (그러나 여전히 개체 의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 설정은 성능이 문제가되는 경우 피해야하는 느린 작업입니다).</target>
        </trans-unit>
        <trans-unit id="63096decad056d7f99c64a85a1b5e24a024a4572" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; is written with a literal: &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; is not an identifier for a property of the global object, like &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; can be. Instead, &lt;code&gt;null&lt;/code&gt; expresses a lack of identification, indicating that a variable points to no object. In APIs, &lt;code&gt;null&lt;/code&gt; is often retrieved in a place where an object can be expected but no object is relevant.</source>
          <target state="translated">값 &lt;code&gt;null&lt;/code&gt; 리터럴로 기록됩니다 &lt;code&gt;null&lt;/code&gt; . &lt;code&gt;null&lt;/code&gt; 은 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 처럼 전역 객체의 속성에 대한 식별자가 아닙니다 . 대신, &lt;code&gt;null&lt;/code&gt; 은 식별 부족을 나타내며 변수가 객체가 없음을 나타냅니다. API에서 &lt;code&gt;null&lt;/code&gt; 은 종종 객체를 기대할 수 있지만 객체가 관련이없는 곳에서 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="85b116be763af0011adcca25c9521457c55df529" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object value. It is one of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; and is treated as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsy&lt;/a&gt; for boolean operations.</source>
          <target state="translated">The value &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object value. It is one of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; and is treated as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsy&lt;/a&gt; for boolean operations.</target>
        </trans-unit>
        <trans-unit id="33b4500099924c787f1bc7d8f8f6e45953665b50" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object value. It is one of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 값 은 의도적으로 객체 값이 없음을 나타냅니다. JavaScript의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;기본 값&lt;/a&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="bff8273e82837d0de52f6e70b8fd3d9415c07ae2" translate="yes" xml:space="preserve">
          <source>The value associated with the property (data descriptors only).</source>
          <target state="translated">속성과 관련된 값입니다 (데이터 설명 자만 해당).</target>
        </trans-unit>
        <trans-unit id="a67dddbd2bbd0115cca20e5cd07cf3e22cf36da9" translate="yes" xml:space="preserve">
          <source>The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).</source>
          <target state="translated">속성과 관련된 값입니다. 유효한 JavaScript 값 (숫자, 객체, 함수 등) 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59a3562a0724b93aba945b7a64c8a3d5ba95b25c" translate="yes" xml:space="preserve">
          <source>The value at the given position (&lt;code&gt;typedArray[index]&lt;/code&gt;).</source>
          <target state="translated">주어진 위치의 값 ( &lt;code&gt;typedArray[index]&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="0af3009ff47cbbfab21300bac505703ea7352b22" translate="yes" xml:space="preserve">
          <source>The value contained in the the current position in the Set. The same value is passed for both arguments.</source>
          <target state="translated">세트의 현재 위치에 포함 된 값입니다. 두 인수 모두에 동일한 값이 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8ee5fc3c0f69f15c01c307dab39bc4d88cd59ac3" translate="yes" xml:space="preserve">
          <source>The value contained inside the global variable &amp;mdash; this can be used to directly set and get the global's value.</source>
          <target state="translated">전역 변수에 포함 된 값 &amp;mdash; 전역 값을 직접 설정하고 가져 오는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="992ff3c59c8217dbd05be959d8d3c24fa1b74e5f" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;%GeneratorPrototype%&lt;/code&gt;.</source>
          <target state="translated">값은 &lt;code&gt;%GeneratorPrototype%&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="709c0fd06926b7c507c3fc1b3ee8b80d5d5acfa2" translate="yes" xml:space="preserve">
          <source>The value is only read-only for primitive values such as &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;&quot;test&quot;&lt;/code&gt;.</source>
          <target state="translated">The value is only read-only for primitive values such as &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;true&lt;/code&gt; , and &lt;code&gt;&quot;test&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="795679041097cce24480b245a846f179c329ac5b" translate="yes" xml:space="preserve">
          <source>The value is the same as &lt;a href=&quot;parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; of the global object.</source>
          <target state="translated">값은 글로벌 오브젝트의 &lt;a href=&quot;parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="59cece73f49dc6e713d1fbe3528758aa6ce588d0" translate="yes" xml:space="preserve">
          <source>The value is the same as &lt;a href=&quot;parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; of the global object.</source>
          <target state="translated">값은 전역 객체의 &lt;a href=&quot;parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt; 와 같습니다.</target>
        </trans-unit>
        <trans-unit id="2169594e1b3abf56f5cd7c0c31ebbaaaa0dae79b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Date.length&lt;/code&gt; is 7. This is the number of arguments handled by the constructor.</source>
          <target state="translated">&lt;code&gt;Date.length&lt;/code&gt; 의 값 은 7입니다. 이는 생성자가 처리하는 인수 수입니다.</target>
        </trans-unit>
        <trans-unit id="4a427b820317c84e0876360cc68648a291f62b99" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; is the same as the negative value of the global object's &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">&lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; 의 값은 전역 개체의 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 속성 의 음수 값과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7ad4e9812d1ae85de534771e604c469c669fa5e7" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; is the same as the value of the global object's &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">의 값 &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; 와는 전역 객체의 값과 동일 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 속성입니다.</target>
        </trans-unit>
        <trans-unit id="24c4ee9f0fe214492d89ff0a9f0d1ee0f239ed43" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;RegExp.length&lt;/code&gt; is 2.</source>
          <target state="translated">&lt;code&gt;RegExp.length&lt;/code&gt; 의 값 은 2입니다.</target>
        </trans-unit>
        <trans-unit id="3d8c65faad19f540a737c41845ed5faf6bc1720f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;global&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag was used; otherwise, &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag indicates that the regular expression should be tested against all possible matches in a string. A regular expression defined as both &lt;code&gt;global&lt;/code&gt; (&quot;&lt;code&gt;g&lt;/code&gt;&quot;) and &lt;code&gt;sticky&lt;/code&gt; (&quot;&lt;code&gt;y&lt;/code&gt;&quot;) will ignore the &lt;code&gt;global&lt;/code&gt; flag and perform sticky matches.</source>
          <target state="translated">값 &lt;code&gt;global&lt;/code&gt; A는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 과 &lt;code&gt;true&lt;/code&gt; 은 &quot;경우 &lt;code&gt;g&lt;/code&gt; &quot;플래그가 사용되었다; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다. &quot; &lt;code&gt;g&lt;/code&gt; &quot;플래그는 정규식이 문자열에서 가능한 모든 일치 항목에 대해 테스트되어야 함을 나타냅니다. &lt;code&gt;global&lt;/code&gt; ( &quot; &lt;code&gt;g&lt;/code&gt; &quot;) 및 &lt;code&gt;sticky&lt;/code&gt; ( &quot; &lt;code&gt;y&lt;/code&gt; &quot;)으로 정의 된 정규식 은 &lt;code&gt;global&lt;/code&gt; 플래그를 무시하고 고정 일치를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="2c5f64834e9e94e343e9f6e0919b24594b4a8b2d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;ignoreCase&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag was used; otherwise, &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag indicates that case should be ignored while attempting a match in a string.</source>
          <target state="translated">값 &lt;code&gt;ignoreCase&lt;/code&gt; A는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 과 &lt;code&gt;true&lt;/code&gt; 은 &quot;경우 &lt;code&gt;i&lt;/code&gt; &quot;플래그가 사용되었다; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다. &quot; &lt;code&gt;i&lt;/code&gt; &quot;플래그는 문자열에서 일치를 시도하는 동안 대소 문자를 무시해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a685c128fb38aa442155516a7c8dbad6545a579b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;multiline&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and is true if the &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag was used; otherwise, false. The &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag indicates that a multiline input string should be treated as multiple lines. For example, if &quot;&lt;code&gt;m&lt;/code&gt;&quot; is used, &quot;&lt;code&gt;^&lt;/code&gt;&quot; and &quot;&lt;code&gt;$&lt;/code&gt;&quot; change from matching at only the start or end of the entire string to the start or end of any line within the string.</source>
          <target state="translated">값 &lt;code&gt;multiline&lt;/code&gt; A는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 및 &quot;경우에 해당하는 &lt;code&gt;m&lt;/code&gt; &quot;플래그가 사용되었다; 그렇지 않으면 거짓입니다. &quot; &lt;code&gt;m&lt;/code&gt; &quot;플래그는 여러 줄 입력 문자열이 여러 줄로 처리되어야 함을 나타냅니다. 예를 들어, &quot; &lt;code&gt;m&lt;/code&gt; &quot;을 사용하는 경우 &quot; &lt;code&gt;^&lt;/code&gt; &quot;및 &quot; &lt;code&gt;$&lt;/code&gt; &quot;는 전체 문자열의 시작 또는 끝에서만 일치하는 항목에서 문자열 내의 모든 줄의 시작 또는 끝으로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="66ec41c802e7001a78f1b16509dd083319cbe7b8" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;size&lt;/code&gt; is an integer representing how many entries the &lt;code&gt;Map&lt;/code&gt; object has. A set accessor function for &lt;code&gt;size&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;; you can not change this property.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 값은 &lt;code&gt;Map&lt;/code&gt; 객체의 항목 수를 나타내는 정수 입니다. &lt;code&gt;size&lt;/code&gt; 에 대해 설정된 접근 자 함수 는 &lt;code&gt;undefined&lt;/code&gt; . 이 속성은 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e86dca3fbd0b3bf54891655d51af4b975b20157f" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;size&lt;/code&gt; is an integer representing how many entries the &lt;code&gt;Set&lt;/code&gt; object has. A set accessor function for &lt;code&gt;size&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;; you cannot change this property.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 값은 &lt;code&gt;Set&lt;/code&gt; 객체의 항목 수를 나타내는 정수 입니다. &lt;code&gt;size&lt;/code&gt; 에 대해 설정된 접근 자 함수 는 &lt;code&gt;undefined&lt;/code&gt; . 이 속성은 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4656ba10a86c93d64d47c6d7344086f608769c22" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;sticky&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and true if the &quot;&lt;code&gt;y&lt;/code&gt;&quot; flag was used; otherwise, false. The &quot;&lt;code&gt;y&lt;/code&gt;&quot; flag indicates that it matches only from the index indicated by the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of this regular expression in the target string (and does not attempt to match from any later indexes). A regular expression defined as both &lt;code&gt;sticky&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt; ignores the &lt;code&gt;global&lt;/code&gt; flag.</source>
          <target state="translated">값 &lt;code&gt;sticky&lt;/code&gt; A는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 은 &quot;경우에 해당 &lt;code&gt;y&lt;/code&gt; &quot;플래그가 사용되었다; 그렇지 않으면 거짓입니다. &quot; &lt;code&gt;y&lt;/code&gt; &quot;플래그는 대상 문자열에서이 정규식 의 &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; 속성으로 표시된 인덱스에서만 일치하며 이후 인덱스와는 일치하지 않습니다. &lt;code&gt;sticky&lt;/code&gt; 및 &lt;code&gt;global&lt;/code&gt; 으로 정의 된 정규식 은 &lt;code&gt;global&lt;/code&gt; 플래그를 무시합니다 .</target>
        </trans-unit>
        <trans-unit id="53cb066a0b00c5a9dd351ed993a35d82f72a2023" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6ac6f3c7766f1963a25c1aa798c181b73ecbbc5c" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a getter is encountered. When used with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;, it can be an object that inherits from &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a getter is encountered. When used with &lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;, it can be an object that inherits from &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8bdcf4b90977169bddf14a9adf7133b7dbba906" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a setter is encountered.</source>
          <target state="translated">The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; if a setter is encountered.</target>
        </trans-unit>
        <trans-unit id="a2eb1aec06ff39190817095f070f51d570788916" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="417434a4e709b850361422f0142eca501ad2853d" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;target&lt;/code&gt; if a getter is encountered. When used with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;, it can be an object that inherits from the target.</source>
          <target state="translated">의 값 &lt;code&gt;this&lt;/code&gt; 호출에 제공되는 정보는 다음의 제품에 &lt;code&gt;target&lt;/code&gt; 게터가 발생합니다. &lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt; 와 함께 사용 하면 대상에서 상속되는 객체가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0afaed19edc70c8ac45928336a8a643ec2b894f1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;code&gt;target&lt;/code&gt; if a setter is encountered.</source>
          <target state="translated">setter가있는 &lt;code&gt;this&lt;/code&gt; 값은 &lt;code&gt;target&lt;/code&gt; 호출에 제공 됩니다.</target>
        </trans-unit>
        <trans-unit id="9e6fecd45df2f4a2ad6b9eecbceab69bbe9a0a0b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; provided for the call to &lt;em&gt;&lt;code&gt;target&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">값 &lt;code&gt;this&lt;/code&gt; 호출 제공 &lt;em&gt; &lt;code&gt;target&lt;/code&gt; &lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ae126c42ae27c396aedfe16bb6ca187f7069b0c0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;unicode&lt;/code&gt; is a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;true&lt;/code&gt; if the &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag was used; otherwise &lt;code&gt;false&lt;/code&gt;. The &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag enables various Unicode-related features. With the &quot;u&quot; flag, any Unicode code point escapes will be interpreted as such, for example.</source>
          <target state="translated">값 &lt;code&gt;unicode&lt;/code&gt; A는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 과 &lt;code&gt;true&lt;/code&gt; 은 &quot;경우 &lt;code&gt;u&lt;/code&gt; &quot;플래그가 사용되었다; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다. &quot; &lt;code&gt;u&lt;/code&gt; &quot;플래그는 다양한 유니 코드 관련 기능을 활성화합니다. &quot;u&quot;플래그를 사용하면 모든 유니 코드 코드 포인트 이스케이프가 그대로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="7ab647412c5ad3ef19440885055d8e14d398f0bd" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;yield*&lt;/code&gt; expression itself</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 표현 자체 의 가치</target>
        </trans-unit>
        <trans-unit id="ba39ac25730a8f654bae49a2a26d1203596c89d0" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;yield*&lt;/code&gt; expression itself is the value returned by that iterator when it's closed (i.e., when &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">의 값 &lt;code&gt;yield*&lt;/code&gt; 표현 자체가 닫혀 때 반복자에 의해 반환되는 값 (즉, 때 &lt;code&gt;done&lt;/code&gt; 이다 &lt;code&gt;true&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8a17dbfd44499f94b3e43c816bf4f59f07edb8c4" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;length&lt;/code&gt; property is 0.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 특성 의 값 은 0입니다.</target>
        </trans-unit>
        <trans-unit id="fb7c54c8a4d05764d8d13573a8581e7d617334d5" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;length&lt;/code&gt; property is an integer with a positive sign and a value less than 2 to the 32nd power (2&lt;sup&gt;32&lt;/sup&gt;).</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 특성 의 값은 양의 부호와 32의 제곱 (2 &lt;sup&gt;32&lt;/sup&gt; ) 에 대해 2보다 작은 값을 갖는 정수입니다 .</target>
        </trans-unit>
        <trans-unit id="b4b98aa8f02d4951ad92b2ef43da39dc12d9e43a" translate="yes" xml:space="preserve">
          <source>The value of the arguments property is normally null if there is no outstanding invocation of the function in progress (that is, the function has been called but has not yet returned.</source>
          <target state="translated">진행중인 함수의 미해결 호출이없는 경우 (즉, 함수가 호출되었지만 아직 리턴되지 않은 경우) arguments 특성의 값은 일반적으로 널입니다.</target>
        </trans-unit>
        <trans-unit id="90592bbd3cdb1e13a6675e34e8b7c25f36c0f806" translate="yes" xml:space="preserve">
          <source>The value of the current element being processed in the array.</source>
          <target state="translated">배열에서 처리중인 현재 요소의 값입니다.</target>
        </trans-unit>
        <trans-unit id="9033b77c9e690b9b0b893a3d87ae53a8d2aad20c" translate="yes" xml:space="preserve">
          <source>The value of the element</source>
          <target state="translated">요소의 가치</target>
        </trans-unit>
        <trans-unit id="5a0b37e004bcdda51419bfe3b87b408c5e919ba3" translate="yes" xml:space="preserve">
          <source>The value of the element to add to the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">The value of the element to add to the &lt;code&gt;Map&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="375cb50ac5f8ae6db5bad228fb27242cc2a6613e" translate="yes" xml:space="preserve">
          <source>The value of the element to add to the &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">The value of the element to add to the &lt;code&gt;Set&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="2bfc2dd23e72701e22341662650b90645eea05b8" translate="yes" xml:space="preserve">
          <source>The value of the given number rounded to the nearest integer.</source>
          <target state="translated">주어진 숫자의 값은 가장 가까운 정수로 반올림됩니다.</target>
        </trans-unit>
        <trans-unit id="83ccae05d0f3bada8984becded60af7a9c6b9684" translate="yes" xml:space="preserve">
          <source>The value of the global is then changed, first to &lt;code&gt;42&lt;/code&gt; using the &lt;code&gt;Global.value&lt;/code&gt; property, and then to 43 using the &lt;code&gt;incGlobal()&lt;/code&gt; function exported out of the &lt;code&gt;global.wasm&lt;/code&gt; module (this adds 1 to whatever value is given to it and then returns the new value).</source>
          <target state="translated">그런 다음 &lt;code&gt;Global.value&lt;/code&gt; 속성을 사용하여 전역 값을 먼저 &lt;code&gt;42&lt;/code&gt; 로 변경 한 다음 &lt;code&gt;global.wasm&lt;/code&gt; 모듈 에서 내 보낸 &lt;code&gt;incGlobal()&lt;/code&gt; 함수를 사용하여 전역 값 을 43 으로 변경합니다. 새 값을 반환합니다).</target>
        </trans-unit>
        <trans-unit id="8e6b1a6d6df9caa879e4a52b4aef13f1d4aeeca5" translate="yes" xml:space="preserve">
          <source>The value of the property.</source>
          <target state="translated">속성 값입니다.</target>
        </trans-unit>
        <trans-unit id="89ac72de17924e273431acd0216774b519716d0c" translate="yes" xml:space="preserve">
          <source>The value of the specified &lt;code&gt;&lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; is passed into the &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; as its sole parameter.</source>
          <target state="translated">The value of the specified &lt;code&gt;&lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; is passed into the &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; as its sole parameter.</target>
        </trans-unit>
        <trans-unit id="d10369a304b3dabeb9f648e972d408f825afd5d0" translate="yes" xml:space="preserve">
          <source>The value of this property is &quot;Atomics&quot;.</source>
          <target state="translated">이 특성의 값은 &quot;Atomics&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="602deb4fbff480f54ac3487ed10fc319ebc28bc1" translate="yes" xml:space="preserve">
          <source>The value passed as the first parameter is converted to a boolean value, if necessary. If the value is omitted or is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the object has an initial value of &lt;code&gt;false&lt;/code&gt;. All other values, including any object or the string &lt;code&gt;&quot;false&quot;&lt;/code&gt;, create an object with an initial value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">첫 번째 매개 변수로 전달 된 값은 필요한 경우 부울 값으로 변환됩니다. 값이 생략되거나 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;-0&lt;/code&gt; , &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;false&lt;/code&gt; , &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 또는 빈 문자열 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ) 인 경우 객체의 초기 값은 &lt;code&gt;false&lt;/code&gt; 입니다. 객체 또는 문자열 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 를 포함한 다른 모든 값 은 초기 값이 &lt;code&gt;true&lt;/code&gt; 인 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e8b2fd4ff59e176e9713ab275f18ea741a9453f6" translate="yes" xml:space="preserve">
          <source>The value passed as the first parameter is converted to a boolean value, if necessary. If the value is omitted or is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the object has an initial value of &lt;code&gt;false&lt;/code&gt;. All other values, including any object, an empty array (&lt;code&gt;[]&lt;/code&gt;), or the string &quot;&lt;code&gt;false&lt;/code&gt;&quot;, create an object with an initial value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">The value passed as the first parameter is converted to a boolean value, if necessary. If the value is omitted or is &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;-0&lt;/code&gt; , &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;, &lt;code&gt;false&lt;/code&gt; , &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;, or the empty string ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ), the object has an initial value of &lt;code&gt;false&lt;/code&gt; . All other values, including any object, an empty array ( &lt;code&gt;[]&lt;/code&gt; ), or the string &quot; &lt;code&gt;false&lt;/code&gt; &quot;, create an object with an initial value of &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c90cef2323c14d826d0917e6adb3845eff127615" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, if supplied. (See below.)</source>
          <target state="translated">The value previously returned in the last invocation of the callback, or &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; , if supplied. (See below.)</target>
        </trans-unit>
        <trans-unit id="4b7328daf04c81ab8137722b8b006bf9c6f2c30c" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied (see below).</source>
          <target state="translated">콜백의 마지막 호출에서 이전에 반환 된 값 또는 제공된 경우 &lt;code&gt;initialValue&lt;/code&gt; 입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="26938a6c3b7c3667cae874428e7b0f973bd8b0f7" translate="yes" xml:space="preserve">
          <source>The value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied. (See below.)</source>
          <target state="translated">콜백의 마지막 호출에서 이전에 리턴 된 값 또는 제공된 경우 &lt;code&gt;initialValue&lt;/code&gt; (아래 참조)</target>
        </trans-unit>
        <trans-unit id="9f20cffd5ae4255c4f313c33939037ffe91a735a" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument or filled in as a default.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수 에서이 특성에 제공 되거나 기본값으로 채워진 값 입니다.</target>
        </trans-unit>
        <trans-unit id="1f013e6b1352fd1ab657f01903bf623f3e31d692" translate="yes" xml:space="preserve">
          <source>The value provided for this property in the &lt;code&gt;options&lt;/code&gt; argument; &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; (representing the runtime's default time zone) if none was provided. Warning: Applications should not rely on &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; being returned, as future versions may return a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; value identifying the runtime&amp;rsquo;s default time zone instead.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수 에서이 특성에 제공된 값 . &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; (런타임의 기본 시간대를 나타냄) 경고 : 이후 버전 에서는 런타임의 기본 시간대를 식별 하는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 값이 대신 반환 될 수 있으므로 응용 프로그램은 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 반환 에 의존해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="ae8d412b82b4d12d0146bc50d3b2fff727efd317" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable data property.</source>
          <target state="translated">대상 개체 속성이 쓸 수없고 구성 할 수없는 데이터 속성 인 경우 속성에 대해보고 된 값은 해당 대상 개체 속성의 값과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="fa34a691341ce51b61d78e48ec46aa0f5728c3de" translate="yes" xml:space="preserve">
          <source>The value reported for a property must be undefined if the corresponding target object property is non-configurable accessor property that has undefined as its [[Get]] attribute.</source>
          <target state="translated">해당 대상 개체 속성이 [[Get]] 특성으로 정의되지 않은 구성 할 수없는 접근 자 속성 인 경우 속성에 대해보고 된 값은 정의되지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="a2ca47894ce66a4ebd121f767d42d690831bfec2" translate="yes" xml:space="preserve">
          <source>The value requested using the Unicode extension key &lt;code&gt;&quot;co&quot;&lt;/code&gt;, if it is supported for &lt;code&gt;locale&lt;/code&gt;, or &lt;code&gt;&quot;default&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt; 또는 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 에 대해 지원되는 경우 유니 코드 확장 키 &lt;code&gt;&quot;co&quot;&lt;/code&gt; 를 사용하여 요청한 값 입니다.</target>
        </trans-unit>
        <trans-unit id="0283424a1178d6f4236ac1d8d6034b7ef42cf0bb" translate="yes" xml:space="preserve">
          <source>The value requested using the Unicode extension key &lt;code&gt;&quot;nu&quot;&lt;/code&gt; or filled in as a default.</source>
          <target state="translated">유니 코드 확장 키 &lt;code&gt;&quot;nu&quot;&lt;/code&gt; 를 사용하여 요청 했거나 기본값으로 채워진 값입니다.</target>
        </trans-unit>
        <trans-unit id="3fc94ba8a72cb17a2e2242a0dd731579febe1bc3" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;getFullYear()&lt;/code&gt; is an absolute number. For dates between the years 1000 and 9999, &lt;code&gt;getFullYear()&lt;/code&gt; returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.</source>
          <target state="translated">&lt;code&gt;getFullYear()&lt;/code&gt; 의해 리턴되는 값 은 절대 값 입니다. 1000에서 9999 사이의 날짜의 경우 &lt;code&gt;getFullYear()&lt;/code&gt; 는 1995와 같이 4 자리 숫자를 리턴합니다.이 함수를 사용하여 1 년이 2000 년 이후의 연도를 준수하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="6446a7f617b7c923a7cdded70ece6ac9a5479f4b" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;getUTCFullYear()&lt;/code&gt; is an absolute number that is compliant with year-2000, for example, 1995.</source>
          <target state="translated">&lt;code&gt;getUTCFullYear()&lt;/code&gt; 의해 리턴되는 값 은 2000 년 (예 : 1995)을 준수하는 절대 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="4d02fd6a19ea2394d421b081204d7d538e8ddef3" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduce()&lt;/code&gt; in this case would be &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">이 경우 &lt;code&gt;reduce()&lt;/code&gt; 에 의해 반환되는 값은 &lt;code&gt;20&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="753762dcffa9651103a411c28aba6537e911cd2a" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduce()&lt;/code&gt; would be that of the last callback invocation (&lt;code&gt;10&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;reduce()&lt;/code&gt; 의해 리턴 된 값 은 마지막 콜백 호출 ( &lt;code&gt;10&lt;/code&gt; )의 값입니다.</target>
        </trans-unit>
        <trans-unit id="25eda24a4c47ede90f492bd3eff94112bb092132" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduceRight&lt;/code&gt; this time would be, of course, &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; 가 이번에 반환 한 값 은 물론 &lt;code&gt;20&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="db3194ee28a78bcd5cd0e6d78b00827b8f173473" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;reduceRight&lt;/code&gt; would be that of the last callback invocation (&lt;code&gt;10&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; 에 의해 리턴되는 값 은 마지막 콜백 호출의 값입니다 ( &lt;code&gt;10&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="775546357ed316cf0984802343215e45cabfd5ab" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;toUTCString()&lt;/code&gt; is a string in the form &lt;code&gt;&lt;var&gt;Www&lt;/var&gt;, &lt;var&gt;dd&lt;/var&gt; &lt;var&gt;Mmm&lt;/var&gt; &lt;var&gt;yyyy&lt;/var&gt; &lt;var&gt;hh&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss&lt;/var&gt; GMT&lt;/code&gt;, Where:</source>
          <target state="translated">The value returned by &lt;code&gt;toUTCString()&lt;/code&gt; is a string in the form &lt;code&gt;&lt;var&gt;Www&lt;/var&gt;, &lt;var&gt;dd&lt;/var&gt; &lt;var&gt;Mmm&lt;/var&gt; &lt;var&gt;yyyy&lt;/var&gt; &lt;var&gt;hh&lt;/var&gt;:&lt;var&gt;mm&lt;/var&gt;:&lt;var&gt;ss&lt;/var&gt; GMT&lt;/code&gt; , Where:</target>
        </trans-unit>
        <trans-unit id="b313fb8c3da4ab52c40b731bd01d0a296137a71e" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;toUTCString()&lt;/code&gt; is a string in the same format as &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Date.prototype.toString()&lt;/code&gt;&lt;/a&gt; but with a zero timezone offset (</source>
          <target state="translated">&lt;code&gt;toUTCString()&lt;/code&gt; 의해 리턴되는 값 은 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Date.prototype.toString()&lt;/code&gt; &lt;/a&gt; 과 동일한 형식 이지만 시간대 오프셋이 0 인 문자열입니다 (</target>
        </trans-unit>
        <trans-unit id="f9bdda3fa3097eefa1caa7944df9fc8d71302bea" translate="yes" xml:space="preserve">
          <source>The value that has been stored.</source>
          <target state="translated">저장된 값입니다.</target>
        </trans-unit>
        <trans-unit id="c9a55cfa4ad9c8fef910bf08d5266b00ea90e690" translate="yes" xml:space="preserve">
          <source>The value that is always passed as &lt;code&gt;this&lt;/code&gt; value when calling the wrapped function.</source>
          <target state="translated">The value that is always passed as &lt;code&gt;this&lt;/code&gt; value when calling the wrapped function.</target>
        </trans-unit>
        <trans-unit id="ac55f175a6f636d5e37287a3f31bb5c06a9fd70f" translate="yes" xml:space="preserve">
          <source>The value that is given as an argument.</source>
          <target state="translated">인수로 제공되는 값입니다.</target>
        </trans-unit>
        <trans-unit id="b28bf68d03b135b289d89712da3c9911acf64c8f" translate="yes" xml:space="preserve">
          <source>The value that results from the reduction.</source>
          <target state="translated">축소로 인한 값입니다.</target>
        </trans-unit>
        <trans-unit id="1ba3bb3a5b53e2ce2574ffcb28fc3cbbb4f9f720" translate="yes" xml:space="preserve">
          <source>The value the variable contains. This can be any value, as long as its type matches the variable's data type. If no value is specified, a typed 0 value is used, as specified by the &lt;a href=&quot;https://webassembly.github.io/spec/js-api/#defaultvalue&quot;&gt;&lt;code&gt;DefaultValue&lt;/code&gt; algorithm&lt;/a&gt;.</source>
          <target state="translated">변수에 포함 된 값입니다. 유형이 변수의 데이터 유형과 일치하는 한 모든 값이 될 수 있습니다. 값을 지정하지 않으면 &lt;a href=&quot;https://webassembly.github.io/spec/js-api/#defaultvalue&quot;&gt; &lt;code&gt;DefaultValue&lt;/code&gt; 알고리즘에&lt;/a&gt; 지정된대로 유형이 지정된 0 값이 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="565efbb01120b89e014f45606039540d14a469a7" translate="yes" xml:space="preserve">
          <source>The value to be checked.</source>
          <target state="translated">확인할 값입니다.</target>
        </trans-unit>
        <trans-unit id="392314efaf475fe63083755ee1503c3782e6768c" translate="yes" xml:space="preserve">
          <source>The value to be passed as the &lt;code&gt;this&lt;/code&gt; parameter to the target function &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; when the bound function is called. The value is ignored if the bound function is constructed using the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. When using &lt;code&gt;bind&lt;/code&gt; to create a function (supplied as a callback) inside a &lt;code&gt;setTimeout&lt;/code&gt;, any primitive value passed as &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is converted to object. If no arguments are provided to &lt;code&gt;bind &lt;/code&gt;, or if the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;&lt;var&gt;null&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&lt;var&gt;undefined&lt;/var&gt;&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; of the executing scope is treated as the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; for the new function.</source>
          <target state="translated">The value to be passed as the &lt;code&gt;this&lt;/code&gt; parameter to the target function &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; when the bound function is called. The value is ignored if the bound function is constructed using the &lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; operator. When using &lt;code&gt;bind&lt;/code&gt; to create a function (supplied as a callback) inside a &lt;code&gt;setTimeout&lt;/code&gt; , any primitive value passed as &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is converted to object. If no arguments are provided to &lt;code&gt;bind &lt;/code&gt; , or if the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;&lt;var&gt;null&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&lt;var&gt;undefined&lt;/var&gt;&lt;/code&gt; , the &lt;code&gt;this&lt;/code&gt; of the executing scope is treated as the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; for the new function.</target>
        </trans-unit>
        <trans-unit id="163a204d47e94755d2a8dea42f492f6afec3ade3" translate="yes" xml:space="preserve">
          <source>The value to be passed as the &lt;code&gt;this&lt;/code&gt; parameter to the target function when the bound function is called. The value is ignored if the bound function is constructed using the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. When using &lt;code&gt;bind&lt;/code&gt; to create a function(supplied as a callback) inside a &lt;code&gt;setTimeout&lt;/code&gt;, any primitive value passed as &lt;code&gt;thisArg&lt;/code&gt; is converted to object. If no arguments are provided to &lt;code&gt;bind&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; of the executing scope is treated as the &lt;code&gt;thisArg&lt;/code&gt; for the new function.</source>
          <target state="translated">바운드 함수가 호출 될 때 &lt;code&gt;this&lt;/code&gt; 매개 변수로 대상 함수에 전달 될 값 입니다. 바인딩 된 함수가 &lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 연산자를 사용하여 구성된 경우 값이 무시됩니다 . 사용시 &lt;code&gt;bind&lt;/code&gt; , 안쪽 (콜백으로서 공급) 함수 만들 &lt;code&gt;setTimeout&lt;/code&gt; 같이 전달 된 프리미티브 값 &lt;code&gt;thisArg&lt;/code&gt; 는 객체로 변환된다. &lt;code&gt;bind&lt;/code&gt; 에 인수가 제공되지 않으면 실행 범위 의 &lt;code&gt;this&lt;/code&gt; 가 새 함수 의 &lt;code&gt;thisArg&lt;/code&gt; 로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="dc6855aee9e42fd78307e3cf03f38826e655a959" translate="yes" xml:space="preserve">
          <source>The value to be tested for &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 테스트 할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="0b40053d9aa1992f47c698a9a98680425a9a0efe" translate="yes" xml:space="preserve">
          <source>The value to be tested for being a safe integer.</source>
          <target state="translated">안전한 정수인지 테스트 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="aac6f6a6beee410fdb177d08be0e103d2a3014c4" translate="yes" xml:space="preserve">
          <source>The value to be tested for being an integer.</source>
          <target state="translated">정수인지 테스트 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="59bfce4de0f3bc70770e7f943f9528be413f79ba" translate="yes" xml:space="preserve">
          <source>The value to be tested for finiteness.</source>
          <target state="translated">유한성을 테스트 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="4b826fb647f77daf90366e276f5a2041c3eea0d6" translate="yes" xml:space="preserve">
          <source>The value to be tested.</source>
          <target state="translated">테스트 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="06b97d18aabb6ae6c63ded596ef86513a1b9ad9a" translate="yes" xml:space="preserve">
          <source>The value to check for equality.</source>
          <target state="translated">평등을 확인할 값입니다.</target>
        </trans-unit>
        <trans-unit id="f5893b2f6845ff50da342763ecbcb431372f8e12" translate="yes" xml:space="preserve">
          <source>The value to convert to a JSON string.</source>
          <target state="translated">JSON 문자열로 변환 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="5a8791a2fe96db71d9fb59af600bdadbf784b614" translate="yes" xml:space="preserve">
          <source>The value to parse. If the &lt;code&gt;string&lt;/code&gt; argument is not a string, then it is converted to a string (using the &lt;code&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation). Leading whitespace in the string argument is ignored.</source>
          <target state="translated">구문 분석 할 값입니다. 는 IF &lt;code&gt;string&lt;/code&gt; 인수가 문자열이 아닌, 다음은합니다 (사용하여 문자열로 변환 &lt;code&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; 추상적 인 작업을). 문자열 인수의 선행 공백은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="c5d68d1d561fee564f3324376066e2e0b9d7856b" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</source>
          <target state="translated">The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</target>
        </trans-unit>
        <trans-unit id="761a888194a1d3efba5aa5728509ec1440c00504" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</source>
          <target state="translated">The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; in this argument is ignored.</target>
        </trans-unit>
        <trans-unit id="06c60cfe7cf7b22fbd2cfac45c0050efe20b3c47" translate="yes" xml:space="preserve">
          <source>The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading whitespace in this argument is ignored.</source>
          <target state="translated">The value to parse. If this argument is not a string, then it is converted to one using the &lt;code&gt;&lt;a href=&quot;https://tc39.es/ecma262/#sec-tostring&quot;&gt;ToString&lt;/a&gt;&lt;/code&gt; abstract operation. Leading whitespace in this argument is ignored.</target>
        </trans-unit>
        <trans-unit id="f1c17f51813a132f8c8e2de408d090acbdfc805e" translate="yes" xml:space="preserve">
          <source>The value to remove from &lt;code&gt;&lt;var&gt;mySet&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">The value to remove from &lt;code&gt;&lt;var&gt;mySet&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6cbb6f2a4cf02d0acc268f73b395f7eaddccb296" translate="yes" xml:space="preserve">
          <source>The value to return.</source>
          <target state="translated">반환 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="5f9706fe37a21ebb4f5356314e9dbb0f193612de" translate="yes" xml:space="preserve">
          <source>The value to search for.</source>
          <target state="translated">검색 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="4725b3f97020ee2d2e6562f946a3c0c74977edbc" translate="yes" xml:space="preserve">
          <source>The value to send to the generator.</source>
          <target state="translated">The value to send to the generator.</target>
        </trans-unit>
        <trans-unit id="54308eaf4f65f985a376010b2fbadf19181c19b2" translate="yes" xml:space="preserve">
          <source>The value to send to the generator. The value will be assigned as a result of a yield expression. i.e in [variable] = yield [expression], the value passed to the .next function will be assigned to [variable]</source>
          <target state="translated">생성기로 보낼 값입니다. 수율 표현식의 결과로 값이 지정됩니다. 즉, [variable] = yield [expression]에서 .next 함수에 전달 된 값은 [variable]에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="27af97cf03ff5b42ffc052b39a9abfc7fee345ba" translate="yes" xml:space="preserve">
          <source>The value to set.</source>
          <target state="translated">설정할 값입니다.</target>
        </trans-unit>
        <trans-unit id="e466a461c0d81a1e5a265350b651378eb345c681" translate="yes" xml:space="preserve">
          <source>The value to test for presence in the &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">The value to test for presence in the &lt;code&gt;Set&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="bccbec616a7aa8d8ff02d2d7771872a2f34ef1f6" translate="yes" xml:space="preserve">
          <source>The value to use as &lt;code&gt;this&lt;/code&gt; when calling &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">The value to use as &lt;code&gt;this&lt;/code&gt; when calling &lt;code&gt;&lt;var&gt;func&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a42096f81c8b700c01a535b75abd018478cad5e6" translate="yes" xml:space="preserve">
          <source>The value which is given as the right hand-side of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt;&lt;code&gt;TypedArray.from&lt;/code&gt;&lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;. An iterable can be a built-in iterable type such as &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, a generator result, or an object implementing the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip; of&lt;/a&gt; 의 오른쪽 또는 &lt;a href=&quot;../global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt; &lt;code&gt;TypedArray.from&lt;/code&gt; &lt;/a&gt; 과 같은 함수의 인수로 제공되는 값 은 &lt;a href=&quot;../iteration_protocols&quot;&gt;반복 가능한 객체&lt;/a&gt; 가 아닙니다 . iterable은 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 과 같은 내장 된 iterable 유형 , 생성기 결과 또는 &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable 프로토콜을&lt;/a&gt; 구현하는 객체 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="85f284f4600acf33d2c2218b66e9ae87ac534b68" translate="yes" xml:space="preserve">
          <source>The value which is given as the right hand-side of &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt;&lt;code&gt;Promise.all&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt;&lt;code&gt;TypedArray.from&lt;/code&gt;&lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;. An iterable can be a built-in iterable type such as &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, a generator result, or an object implementing the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</source>
          <target state="translated">The value which is given as the right hand-side of &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;or as argument of a function such as &lt;a href=&quot;../global_objects/promise/all&quot;&gt; &lt;code&gt;Promise.all&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray/from&quot;&gt; &lt;code&gt;TypedArray.from&lt;/code&gt; &lt;/a&gt;, is not an &lt;a href=&quot;../iteration_protocols&quot;&gt;iterable object&lt;/a&gt;. An iterable can be a built-in iterable type such as &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;, a generator result, or an object implementing the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7a48c0bceb25d277223c5b39c5f4e6645c8f3d4f" translate="yes" xml:space="preserve">
          <source>The value will be assigned as a result of a &lt;code&gt;yield&lt;/code&gt; expression. For example, in &lt;code&gt;&lt;var&gt;variable&lt;/var&gt; = yield &lt;var&gt;expression&lt;/var&gt;&lt;/code&gt;, the value passed to the &lt;code&gt;.next()&lt;/code&gt; function will be assigned to &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">The value will be assigned as a result of a &lt;code&gt;yield&lt;/code&gt; expression. For example, in &lt;code&gt;&lt;var&gt;variable&lt;/var&gt; = yield &lt;var&gt;expression&lt;/var&gt;&lt;/code&gt; , the value passed to the &lt;code&gt;.next()&lt;/code&gt; function will be assigned to &lt;code&gt;&lt;var&gt;variable&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8d381c8d22bfc0f19c3ff81e2c2a77327ad37df" translate="yes" xml:space="preserve">
          <source>The value you want to mutate the reference to. This must be an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</source>
          <target state="translated">참조를 변경하려는 값입니다. 기본 wasm 함수에 대한 JavaScript 랩퍼 인 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;내 보낸 WebAssembly function&lt;/a&gt; 이어야합니다.</target>
        </trans-unit>
        <trans-unit id="6a1a15efc64d14b930da0c0f2af03ced19790118" translate="yes" xml:space="preserve">
          <source>The value you want to mutate the reference to. This must be an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</source>
          <target state="translated">The value you want to mutate the reference to. This must be an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;exported WebAssembly function&lt;/a&gt;, a JavaScript wrapper for an underlying wasm function.</target>
        </trans-unit>
        <trans-unit id="e4a5a6582f1f15de8a353319a060dbca049eb56c" translate="yes" xml:space="preserve">
          <source>The value you want to parse.</source>
          <target state="translated">파싱하려는 값입니다.</target>
        </trans-unit>
        <trans-unit id="c330d597b3dfd420a395b97922ea4f601cdaf257" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수 에서 이러한 특성에 제공 되거나 기본값으로 채워진 값입니다.</target>
        </trans-unit>
        <trans-unit id="3b9865fad94fc56ff337c268a776b107ba4a79a0" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are only present if &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;&quot;currency&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수 에서 이러한 특성에 제공 되거나 기본값으로 채워진 값입니다. 이 속성은 &lt;code&gt;style&lt;/code&gt; 이 &lt;code&gt;&quot;currency&quot;&lt;/code&gt; 인 경우에만 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="77632140a6d7f81694a32215750f6043951bce51" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are present only if at least one of them was provided in the &lt;code&gt;options&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수 에서 이러한 특성에 제공 되거나 기본값으로 채워진 값입니다. 이러한 특성은 &lt;code&gt;options&lt;/code&gt; 인수 에 하나 이상이 제공된 경우에만 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="c00811fc726b80d0206856d7d727f30706a7dc00" translate="yes" xml:space="preserve">
          <source>The values provided for these properties in the &lt;code&gt;options&lt;/code&gt; argument or filled in as defaults. These properties are present only if neither &lt;code&gt;minimumSignificantDigits&lt;/code&gt; nor &lt;code&gt;maximumSignificantDigits&lt;/code&gt; was provided in the &lt;code&gt;options&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수 에서 이러한 특성에 제공 되거나 기본값으로 채워진 값입니다. 이러한 특성은 &lt;code&gt;options&lt;/code&gt; 인수 에 &lt;code&gt;minimumSignificantDigits&lt;/code&gt; 또는 &lt;code&gt;maximumSignificantDigits&lt;/code&gt; 가 제공 되지 않은 경우에만 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="4e548ac0a58e8f8d45f275ef3a15166b64f3a5ec" translate="yes" xml:space="preserve">
          <source>The values requested for these properties in the &lt;code&gt;options&lt;/code&gt; argument or using the Unicode extension keys &lt;code&gt;&quot;kn&quot;&lt;/code&gt; and &lt;code&gt;&quot;kf&quot;&lt;/code&gt; or filled in as defaults. If the implementation does not support these properties, they are omitted.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수에서 또는 유니 코드 확장 키 &lt;code&gt;&quot;kn&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;kf&quot;&lt;/code&gt; 를 사용 하거나 기본값으로 채워진 이러한 특성에 요청 된 값 입니다. 구현이 이러한 속성을 지원하지 않으면 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="70d2beda49013ccaade06b55b87b79e9a948f83d" translate="yes" xml:space="preserve">
          <source>The values requested using the Unicode extension keys &lt;code&gt;&quot;ca&quot;&lt;/code&gt; and &lt;code&gt;&quot;nu&quot;&lt;/code&gt; or filled in as default values.</source>
          <target state="translated">유니 코드 확장 키 &lt;code&gt;&quot;ca&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;nu&quot;&lt;/code&gt; 를 사용하여 요청 되거나 기본값으로 채워진 값입니다.</target>
        </trans-unit>
        <trans-unit id="f382186cd21e7990d569381dfed57ffbf95cec18" translate="yes" xml:space="preserve">
          <source>The values resulting from format matching between the corresponding properties in the &lt;code&gt;options&lt;/code&gt; argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수 의 해당 특성 과 선택한 로케일의 날짜-시간 형식화에 사용 가능한 조합 및 표시 간의 형식 일치로 인한 값 입니다. 이러한 속성 중 일부가 존재하지 않을 수 있으며 이는 해당 구성 요소가 형식화 된 출력으로 표시되지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d5c1abe3f8184414323335d2b7a8b7ed460cacb2" translate="yes" xml:space="preserve">
          <source>The variable the function expression is assigned to will have a &lt;code&gt;name&lt;/code&gt; property. The name doesn't change if it's assigned to a different variable. If function name is omitted, it will be the variable name (implicit name). If function name is present, it will be the function name (explicit name). This also applies to &lt;a href=&quot;../functions/arrow_functions&quot;&gt;&lt;code&gt;arrow functions&lt;/code&gt;&lt;/a&gt; (arrows don't have a name so you can only give the variable an implicit name).</source>
          <target state="translated">The variable the function expression is assigned to will have a &lt;code&gt;name&lt;/code&gt; property. The name doesn't change if it's assigned to a different variable. If function name is omitted, it will be the variable name (implicit name). If function name is present, it will be the function name (explicit name). This also applies to &lt;a href=&quot;../functions/arrow_functions&quot;&gt; &lt;code&gt;arrow functions&lt;/code&gt; &lt;/a&gt; (arrows don't have a name so you can only give the variable an implicit name).</target>
        </trans-unit>
        <trans-unit id="fce9939a07c30c8f960444ebda763316f59e32e7" translate="yes" xml:space="preserve">
          <source>The variable the function expression is assigned to will have a &lt;code&gt;name&lt;/code&gt; property. The name doesn't change if it's assigned to a different variable. If function name is omitted, it will be the variable name (implicit name). If function name is present, it will be the function name (explicit name). This also applies to &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (arrows don't have a name so you can only give the variable an implicit name).</source>
          <target state="translated">함수 표현식이 할당 된 변수는 &lt;code&gt;name&lt;/code&gt; 속성 을 갖습니다 . 다른 변수에 할당 된 이름은 변경되지 않습니다. 함수 이름을 생략하면 변수 이름 (암시 적 이름)이됩니다. 함수 이름이 있으면 함수 이름 (명시한 이름)이됩니다. 이것은 &lt;a href=&quot;../functions/arrow_functions&quot;&gt;화살표 기능&lt;/a&gt; 에도 적용됩니다 (화살표에는 이름이 없으므로 변수에 암시 적 이름 만 지정할 수 있음).</target>
        </trans-unit>
        <trans-unit id="6ae939816326b73951d2be1abd4bc6d262210aa9" translate="yes" xml:space="preserve">
          <source>The variables contain the same string, except that the second string contains uppercase letters. The first &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; method displays &lt;code&gt;19&lt;/code&gt;. But because the &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive, the string &quot;&lt;code&gt;cheddar&lt;/code&gt;&quot; is not found in &lt;code&gt;myCapString&lt;/code&gt;, so the second &lt;code&gt;console.log()&lt;/code&gt; method displays &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">The variables contain the same string, except that the second string contains uppercase letters. The first &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt; method displays &lt;code&gt;19&lt;/code&gt; . But because the &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive, the string &quot; &lt;code&gt;cheddar&lt;/code&gt; &quot; is not found in &lt;code&gt;myCapString&lt;/code&gt; , so the second &lt;code&gt;console.log()&lt;/code&gt; method displays &lt;code&gt;-1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d6ec2ee3ed38b088ef2a037a36cdd2b64e278fc" translate="yes" xml:space="preserve">
          <source>The well-known &lt;code&gt;&lt;strong&gt;Symbol.iterator&lt;/strong&gt;&lt;/code&gt; symbol specifies the default iterator for an object. Used by &lt;a href=&quot;../../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The well-known &lt;code&gt;&lt;strong&gt;Symbol.iterator&lt;/strong&gt;&lt;/code&gt; symbol specifies the default iterator for an object. Used by &lt;a href=&quot;../../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b000b5f55890a7aad1048e348b7ab3061cdcc0ff" translate="yes" xml:space="preserve">
          <source>The well-known symbol &lt;code&gt;&lt;strong&gt;Symbol.species&lt;/strong&gt;&lt;/code&gt; specifies a function-valued property that the constructor function uses to create derived objects.</source>
          <target state="translated">잘 알려진 Symbol &lt;code&gt;&lt;strong&gt;Symbol.species&lt;/strong&gt;&lt;/code&gt; 는 생성자 함수가 파생 개체를 만드는 데 사용하는 함수 값 속성을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="834521bdfe73ddcdc5fb64cc09c454aa53e0e311" translate="yes" xml:space="preserve">
          <source>The whole string being examined.</source>
          <target state="translated">전체 문자열을 검사합니다.</target>
        </trans-unit>
        <trans-unit id="6513ed80efcd6bb03aba0325f5b6374023f42179" translate="yes" xml:space="preserve">
          <source>The wrapped function object</source>
          <target state="translated">The wrapped function object</target>
        </trans-unit>
        <trans-unit id="b098fda995b359e0cd8b60766d82754994697077" translate="yes" xml:space="preserve">
          <source>The x coordinate of the point</source>
          <target state="translated">점의 x 좌표</target>
        </trans-unit>
        <trans-unit id="cd2c7c9b69f12be1895dc37da25b7e1a86d5f87d" translate="yes" xml:space="preserve">
          <source>The y coordinate of the point.</source>
          <target state="translated">점의 y 좌표</target>
        </trans-unit>
        <trans-unit id="93dea93a508fb79cd213d78a9c05f9219bfcee1a" translate="yes" xml:space="preserve">
          <source>The zero-based index &lt;em&gt;before&lt;/em&gt; which to end extraction. The character at this index will not be included.</source>
          <target state="translated">The zero-based index &lt;em&gt;before&lt;/em&gt; which to end extraction. The character at this index will not be included.</target>
        </trans-unit>
        <trans-unit id="bf061c0e8764085670c93808d259b0b1537351a9" translate="yes" xml:space="preserve">
          <source>The zero-based index at which to begin extraction. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt;. (For example, if &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt;, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt;.) If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is not a number after &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number(&lt;var&gt;beginIndex&lt;/var&gt;)&lt;/code&gt;&lt;/a&gt;, it is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">The zero-based index at which to begin extraction. If negative, it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length + &lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; . (For example, if &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; , it is treated as &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.length - 3&lt;/code&gt; .) If &lt;code&gt;&lt;var&gt;beginIndex&lt;/var&gt;&lt;/code&gt; is not a number after &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number(&lt;var&gt;beginIndex&lt;/var&gt;)&lt;/code&gt; &lt;/a&gt;, it is treated as &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34484571df4043bcf44cbe6d7da204798ed3b521" translate="yes" xml:space="preserve">
          <source>The zero-based index at which to begin extraction. If negative, it is treated as &lt;code&gt;strLength + beginIndex&lt;/code&gt; where &lt;code&gt;strLength&lt;/code&gt; is the length of the string (for example, if &lt;code&gt;beginIndex&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; it is treated as &lt;code&gt;strLength - 3&lt;/code&gt;). If &lt;code&gt;beginIndex&lt;/code&gt; is greater than or equal to the length of the string, &lt;code&gt;slice()&lt;/code&gt; returns an empty string.</source>
          <target state="translated">추출을 시작할 인덱스 (0부터 시작)입니다. 음수 인 경우 &lt;code&gt;strLength + beginIndex&lt;/code&gt; 로 처리됩니다. 여기서 &lt;code&gt;strLength&lt;/code&gt; 는 문자열의 길이입니다 (예 : &lt;code&gt;beginIndex&lt;/code&gt; 가 &lt;code&gt;-3&lt;/code&gt; 인 경우 &lt;code&gt;strLength - 3&lt;/code&gt; 으로 처리됨 ). 경우 &lt;code&gt;beginIndex&lt;/code&gt; 가 보다 크거나 문자열의 길이와 동일, &lt;code&gt;slice()&lt;/code&gt; 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6773e8fa12942c218deb33c58b745ac45e65ebbc" translate="yes" xml:space="preserve">
          <source>The zero-based index of the match in the string.</source>
          <target state="translated">The zero-based index of the match in the string.</target>
        </trans-unit>
        <trans-unit id="34d44d2490e2fb4772a727440530e67bf85723bf" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt; &lt;strong&gt;for each...in&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; statement&lt;/strong&gt; iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.</source>
          <target state="translated">&lt;code&gt; &lt;strong&gt;for each...in&lt;/strong&gt;&lt;/code&gt; &lt;strong&gt; 문은&lt;/strong&gt; 객체의 모든 속성 값을 통해 지정된 변수를 반복 할. 각 고유 속성에 대해 지정된 명령문이 실행됩니다. &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4b464e820bc4e87bcd6963f6905cbc1a01380e81" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;const&lt;/code&gt; creates a read-only reference to a value. It does &lt;strong&gt;not&lt;/strong&gt; mean the value it holds is immutable, just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 값을 읽기 전용 기준을 생성한다. 변수 식별자를 재 할당 할 수 없다는 것만으로 보유한 값이 변경 불가능하다는 의미 는 &lt;strong&gt;아닙니다&lt;/strong&gt; . 예를 들어, 컨텐츠가 객체 인 경우, 이는 객체의 컨텐츠 (예를 들어, 그 속성)가 변경 될 수 있음을 의미한다.</target>
        </trans-unit>
        <trans-unit id="91d49a20203a919f8b5fd6ad03ea774e29460b2d" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;import.meta&lt;/code&gt; object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module's URL.</source>
          <target state="translated">The &lt;code&gt;import.meta&lt;/code&gt; object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module's URL.</target>
        </trans-unit>
        <trans-unit id="888ceea4a2d5630cdeaeabae5410b8503e85011e" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;import.meta&lt;/code&gt; object is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the module, like the module's URL.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; 의 목적은 자바 스크립트 모듈 콘텍스트 특정 메타 데이터를 노출시키는 메타 속성이다. 모듈의 URL과 같이 모듈에 대한 정보가 들어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f22535f791d6fffe0473d15653bcbb327d44f86c" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new.target&lt;/code&gt; property lets you detect whether a function or constructor was called using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator. In constructors and functions instantiated with the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator, &lt;code&gt;new.target&lt;/code&gt; returns a reference to the constructor or function. In normal function calls, &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; 속성을 사용하면 함수 또는 생성자가 사용하여 호출되었는지 여부를 감지 할 수 있습니다 &lt;a href=&quot;new&quot;&gt;새로운&lt;/a&gt; 연산자를. &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; 연산자로 인스턴스화 된 생성자 및 함수 에서 &lt;code&gt;new.target&lt;/code&gt; 은 생성자 또는 함수에 대한 참조를 반환합니다. 정상적인 함수 호출에서 &lt;code&gt;new.target&lt;/code&gt; 은 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fed48d0b750f633b0d77e462949f996a2556975a" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new.target&lt;/code&gt; pseudo-property lets you detect whether a function or constructor was called using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator. In constructors and functions invoked using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator, &lt;code&gt;new.target&lt;/code&gt; returns a reference to the constructor or function. In normal function calls, &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;new.target&lt;/code&gt; pseudo-property lets you detect whether a function or constructor was called using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator. In constructors and functions invoked using the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator, &lt;code&gt;new.target&lt;/code&gt; returns a reference to the constructor or function. In normal function calls, &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b8d285b4cba86a8ce926d2cc13ded2b699b1549b" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;new&lt;/code&gt; creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 사용자 정의 오브젝트 타입의 인스턴스를 생성 또는 생성자 기능이 내장 된 객체 유형 중 하나.</target>
        </trans-unit>
        <trans-unit id="86abe5c3b9ab6addd5d0545cccfa22bb72009209" translate="yes" xml:space="preserve">
          <source>The&lt;strong&gt; comma operator&lt;/strong&gt; (&lt;code&gt;,&lt;/code&gt;) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression's final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; loop.</source>
          <target state="translated">The&lt;strong&gt; comma operator&lt;/strong&gt; ( &lt;code&gt;,&lt;/code&gt; ) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression's final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a &lt;code&gt;&lt;a href=&quot;../statements/for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; loop.</target>
        </trans-unit>
        <trans-unit id="1f776538492eb864dce17dd7b00fa104f7b12cb5" translate="yes" xml:space="preserve">
          <source>The&lt;strong&gt; comma operator&lt;/strong&gt; evaluates each of its operands (from left to right) and returns the value of the last operand.</source>
          <target state="translated">&lt;strong&gt;콤마 연산자는&lt;/strong&gt; 피연산자들의 각각을 평가한다 (왼쪽에서 오른쪽) 마지막 피연산자의 값을 반환한다.</target>
        </trans-unit>
        <trans-unit id="b5ebca9ecf732c039f7854f5bb81acb03a7f7440" translate="yes" xml:space="preserve">
          <source>Then in the top-level module included in your HTML page, we could have:</source>
          <target state="translated">Then in the top-level module included in your HTML page, we could have:</target>
        </trans-unit>
        <trans-unit id="446e8c7e40da60abbd0e6f84bda93b4619c9635d" translate="yes" xml:space="preserve">
          <source>Then let's talk about solutions.</source>
          <target state="translated">Then let's talk about solutions.</target>
        </trans-unit>
        <trans-unit id="1cdd5f8c7de109e5949a05658cbe520dce6c688e" translate="yes" xml:space="preserve">
          <source>Then you can rewrite the definition of &lt;code&gt;Car&lt;/code&gt; to include an &lt;code&gt;owner&lt;/code&gt; property that takes a &lt;code&gt;Person&lt;/code&gt; object, as follows:</source>
          <target state="translated">Then you can rewrite the definition of &lt;code&gt;Car&lt;/code&gt; to include an &lt;code&gt;owner&lt;/code&gt; property that takes a &lt;code&gt;Person&lt;/code&gt; object, as follows:</target>
        </trans-unit>
        <trans-unit id="89551b1acb52a90d894ad75a0e7e84c5d566dcaf" translate="yes" xml:space="preserve">
          <source>Then you can rewrite the definition of &lt;code&gt;car&lt;/code&gt; to include an &lt;code&gt;owner&lt;/code&gt; property that takes a person object, as follows:</source>
          <target state="translated">그런 다음 다음과 같이 person 오브젝트를 취하는 &lt;code&gt;owner&lt;/code&gt; 특성 을 포함하도록 &lt;code&gt;car&lt;/code&gt; 정의를 다시 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2e2c81dd703d2e6ca2b3ff59db7c330e4a38f40d" translate="yes" xml:space="preserve">
          <source>Then, in another script, it is straightforward to import the default export:</source>
          <target state="translated">Then, in another script, it is straightforward to import the default export:</target>
        </trans-unit>
        <trans-unit id="d8256d79752173e7d51d23cf0e31f0b346c9b2c9" translate="yes" xml:space="preserve">
          <source>Then, in another script, it will be straightforward to import the default export:</source>
          <target state="translated">그런 다음 다른 스크립트에서 기본 내보내기를 가져 오는 것이 간단합니다.</target>
        </trans-unit>
        <trans-unit id="8477eef984ea4b4878880d1778d1f4463dab4368" translate="yes" xml:space="preserve">
          <source>Thenable objects</source>
          <target state="translated">Thenable objects</target>
        </trans-unit>
        <trans-unit id="d9b4388540b214218d6ebf1d5963566a2d626a47" translate="yes" xml:space="preserve">
          <source>There are 2 ways to create a &lt;code&gt;RegExp&lt;/code&gt; object: a literal notation and a constructor. To indicate strings, the parameters to the literal notation do not use quotation marks while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression:</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; 객체 를 생성하는 방법 에는 리터럴 표기법과 생성자가 있습니다. 문자열을 나타 내기 위해 리터럴 표기법의 매개 변수는 따옴표를 사용하지 않지만 생성자 함수의 매개 변수는 따옴표를 사용합니다. 따라서 다음 표현식은 동일한 정규 표현식을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9c934ffa69a2298f5b7b5e35beabe7d61c92a422" translate="yes" xml:space="preserve">
          <source>There are a few variable names that are &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt;. You can't use these. Sorry :(</source>
          <target state="translated">There are a few variable names that are &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt;. You can't use these. Sorry :(</target>
        </trans-unit>
        <trans-unit id="5e9900d3962d4ebc1cc24a8b6e55d7cf55a0a691" translate="yes" xml:space="preserve">
          <source>There are a few variable names that are &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserverd keywords&lt;/a&gt;. You can't use these. Sorry :(</source>
          <target state="translated">&lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reservedrd 키워드 인&lt;/a&gt; 변수 이름이 몇 가지 있습니다 . 사용할 수 없습니다. 죄송합니다 :(</target>
        </trans-unit>
        <trans-unit id="6b75accc15d966eb077568ed588a93a43a522ec5" translate="yes" xml:space="preserve">
          <source>There are also a few non-configurable properties built into JavaScript. Maybe you tried to delete a mathematical constant.</source>
          <target state="translated">JavaScript에는 기본적으로 구성 할 수없는 몇 가지 속성이 있습니다. 수학 상수를 삭제하려고 시도했을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23dcdc49ca1e35ff68fec21bb12a5225fcb5a8f1" translate="yes" xml:space="preserve">
          <source>There are also a few read-only properties built into JavaScript. Maybe you tried to redefine a mathematical constant.</source>
          <target state="translated">JavaScript에는 몇 가지 읽기 전용 속성도 내장되어 있습니다. 수학 상수를 재정의하려고 시도했을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1c9aeb3f2e2f35f5cd7d2044f132e06b0403e9f" translate="yes" xml:space="preserve">
          <source>There are also additional safer (and faster!) alternatives to &lt;code&gt;eval()&lt;/code&gt; or &lt;code&gt;Function()&lt;/code&gt; for common use-cases.</source>
          <target state="translated">일반적인 사용 사례 를 위해 &lt;code&gt;eval()&lt;/code&gt; 또는 &lt;code&gt;Function()&lt;/code&gt; 대한 더 안전하고 빠른 대안이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3525ab2cab918389a404e06213ec2767c08f0ae0" translate="yes" xml:space="preserve">
          <source>There are different ways to create a copy of an object. The following is just one way and is presented to explain how &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; works by using ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; meta property functions.</source>
          <target state="translated">There are different ways to create a copy of an object. The following is just one way and is presented to explain how &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; works by using ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; meta property functions.</target>
        </trans-unit>
        <trans-unit id="0d29d25bfa36a0a07c4cea3c152fe33c4a7a12ce" translate="yes" xml:space="preserve">
          <source>There are five different types of operations that return &lt;code&gt;NaN&lt;/code&gt;:</source>
          <target state="translated">There are five different types of operations that return &lt;code&gt;NaN&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0ef7627759e43c46aa6fde1debf8fc912c56d99e" translate="yes" xml:space="preserve">
          <source>There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second flag. They can also be defined in the constructor function of the &lt;a href=&quot;../global_objects/regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object (second parameter). Regular expression flags can be used separately or together in any order, but there are only five of them in ECMAScript.</source>
          <target state="translated">코드에 유효하지 않은 정규식 플래그가 있습니다. 슬래시로 묶인 패턴으로 구성된 정규식 리터럴에서 플래그는 두 번째 플래그 다음에 정의됩니다. 또한 &lt;a href=&quot;../global_objects/regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체 의 생성자 함수 (두 번째 매개 변수) 에서 정의 할 수도 있습니다 . 정규식 플래그는 순서에 관계없이 개별적으로 또는 함께 사용할 수 있지만 ECMAScript에는 5 개만 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c6b73b421181013c9343cae02a3a74cf6657f5f" translate="yes" xml:space="preserve">
          <source>There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second slash. They can also be defined in the constructor function of the &lt;a href=&quot;../global_objects/regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object (second parameter). Regular expression flags can be used separately or together in any order, but there are only six of them in ECMAScript.</source>
          <target state="translated">There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second slash. They can also be defined in the constructor function of the &lt;a href=&quot;../global_objects/regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; object (second parameter). Regular expression flags can be used separately or together in any order, but there are only six of them in ECMAScript.</target>
        </trans-unit>
        <trans-unit id="328306dfa957732254d942f732e2fe78edd08818" translate="yes" xml:space="preserve">
          <source>There are many APIs that accept iterables, for example: &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map([iterable])&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;global_objects/weakmap&quot;&gt;&lt;code&gt;WeakMap([iterable])&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;global_objects/set&quot;&gt;&lt;code&gt;Set([iterable])&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;global_objects/weakset&quot;&gt;&lt;code&gt;WeakSet([iterable])&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;global_objects/weakmap&quot;&gt; &lt;code&gt;WeakMap([iterable])&lt;/code&gt; &lt;/a&gt; 을 허용하는 많은 API가 있습니다 &lt;a href=&quot;global_objects/map&quot;&gt; &lt;code&gt;Map([iterable])&lt;/code&gt; &lt;/a&gt; 예 : Map ([iterable]) , WeakMap ([iterable]) , &lt;a href=&quot;global_objects/set&quot;&gt; &lt;code&gt;Set([iterable])&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;global_objects/weakset&quot;&gt; &lt;code&gt;WeakSet([iterable])&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="a19fad7ee3a1c683cf2203ca175b99d3c2e99019" translate="yes" xml:space="preserve">
          <source>There are many APIs that accept iterables. Some examples include:</source>
          <target state="translated">There are many APIs that accept iterables. Some examples include:</target>
        </trans-unit>
        <trans-unit id="f9c6f5cd6a5367cad9d27d056730f43556553be4" translate="yes" xml:space="preserve">
          <source>There are many built-in functions in need of a (callback) function. You will have to provide a function in order to have these methods working properly:</source>
          <target state="translated">(콜백) 함수를 필요로하는 많은 내장 함수가 있습니다. 이러한 방법이 제대로 작동하려면 기능을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="6d086eb6393ae332077e3f5864edfd84eba69f01" translate="yes" xml:space="preserve">
          <source>There are many global objects, like &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, which are constructable using &lt;code&gt;new&lt;/code&gt;. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/reflect&quot;&gt;&lt;code&gt;Reflect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/atomics&quot;&gt;&lt;code&gt;Atomics&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">There are many global objects, like &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;, which are constructable using &lt;code&gt;new&lt;/code&gt; . However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: &lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../global_objects/json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../global_objects/symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../global_objects/reflect&quot;&gt; &lt;code&gt;Reflect&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../global_objects/intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;../global_objects/atomics&quot;&gt; &lt;code&gt;Atomics&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1c2ac8cc4acc6e241d016d55aa566b4aa3cdd5b5" translate="yes" xml:space="preserve">
          <source>There are many global objects, like &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, which are constructable using &lt;code&gt;new&lt;/code&gt;. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/reflect&quot;&gt;&lt;code&gt;Reflect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/SIMD&quot;&gt;&lt;code&gt;SIMD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/atomics&quot;&gt;&lt;code&gt;Atomics&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 또는를 사용하여 구성 할 수있는 &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 와 같은 많은 전역 객체가 있습니다 . 그러나 일부 전역 객체는 아니며 해당 속성과 메서드는 정적입니다. 다음 JavaScript 표준 내장 객체는 생성자가 아닙니다 : &lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/reflect&quot;&gt; &lt;code&gt;Reflect&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/SIMD&quot;&gt; &lt;code&gt;SIMD&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/atomics&quot;&gt; &lt;code&gt;Atomics&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="693c279c59ce837d109a798ef270590b0da65569" translate="yes" xml:space="preserve">
          <source>There are multiple options to fix this error. Check what was intended to be achieved with the constant in question.</source>
          <target state="translated">이 오류를 해결하기위한 여러 옵션이 있습니다. 해당 상수로 달성하려는 의도를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ae37fb979bea6740ce70fa124f14a2bebac08325" translate="yes" xml:space="preserve">
          <source>There are no keys in &lt;code&gt;Set&lt;/code&gt; objects, however, so the first two arguments are both &lt;strong&gt;values&lt;/strong&gt; contained in the &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;. This is to make it consistent with other &lt;code&gt;forEach()&lt;/code&gt; methods for &lt;a href=&quot;../map/foreach&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">There are no keys in &lt;code&gt;Set&lt;/code&gt; objects, however, so the first two arguments are both &lt;strong&gt;values&lt;/strong&gt; contained in the &lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;. This is to make it consistent with other &lt;code&gt;forEach()&lt;/code&gt; methods for &lt;a href=&quot;../map/foreach&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../array/foreach&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6607743e80788e12daa18af41a3e436f3282e40b" translate="yes" xml:space="preserve">
          <source>There are no keys in &lt;code&gt;Set&lt;/code&gt; objects. However, the first two arguments are both &lt;strong&gt;values&lt;/strong&gt; contained in the &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, so that the callback function is consistent with the &lt;code&gt;forEach()&lt;/code&gt; methods for &lt;a href=&quot;../map/foreach&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 객체 에는 키가 없습니다 . 그러나 처음 두 인수는 모두 &lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; 에&lt;/a&gt; 포함 된 &lt;strong&gt;값&lt;/strong&gt; 이므로 콜백 함수는 &lt;a href=&quot;../map/foreach&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../array/foreach&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;forEach()&lt;/code&gt; 메소드 와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="3d5d1af1c0e36eebedace34f6ce7e6c0df713d90" translate="yes" xml:space="preserve">
          <source>There are only five valid regular expression flags.</source>
          <target state="translated">유효한 정규식 플래그는 5 개뿐입니다.</target>
        </trans-unit>
        <trans-unit id="ac2b0c8431e04307419d31c94f79361f6ff31325" translate="yes" xml:space="preserve">
          <source>There are only six valid regular expression flags.</source>
          <target state="translated">There are only six valid regular expression flags.</target>
        </trans-unit>
        <trans-unit id="7d10844d61cc30ce621c0ec05519562750155632" translate="yes" xml:space="preserve">
          <source>There are several differences between class expressions and &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;, however:</source>
          <target state="translated">There are several differences between class expressions and &lt;a href=&quot;../statements/class&quot;&gt;class statements&lt;/a&gt;, however:</target>
        </trans-unit>
        <trans-unit id="da9f3d69fb3ca5669544de1d84f843d8aec9af8d" translate="yes" xml:space="preserve">
          <source>There are several methods available to obtain a date in various formats, as well as to perform time zone conversions. Particularly useful are the functions that output the date and time in Coordinated Universal Time (UTC), the global standard time defined by the World Time Standard. (This time is historically known as &lt;em&gt;Greenwich Mean Time&lt;/em&gt;, as UTC lies along the meridian that includes London&amp;mdash;and nearby Greenwich&amp;mdash;in the United Kingdom.) The user's device provides the local time.</source>
          <target state="translated">There are several methods available to obtain a date in various formats, as well as to perform time zone conversions. Particularly useful are the functions that output the date and time in Coordinated Universal Time (UTC), the global standard time defined by the World Time Standard. (This time is historically known as &lt;em&gt;Greenwich Mean Time&lt;/em&gt;, as UTC lies along the meridian that includes London&amp;mdash;and nearby Greenwich&amp;mdash;in the United Kingdom.) The user's device provides the local time.</target>
        </trans-unit>
        <trans-unit id="2b8060ffb49f99b70454ca7c20d1536cfed320ba" translate="yes" xml:space="preserve">
          <source>There are several ways to define functions:</source>
          <target state="translated">함수를 정의하는 방법에는 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f46fa20df26a28f3afafec0caf95aacff7634c5f" translate="yes" xml:space="preserve">
          <source>There are three main differences between rest parameters and the &lt;a href=&quot;arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">rest 매개 변수와 &lt;a href=&quot;arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 오브젝트 에는 세 가지 주요 차이점이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cef9fc9ad4d99bdf9fc9094a7d87693bc809f91e" translate="yes" xml:space="preserve">
          <source>There are two different types of export, &lt;strong&gt;named&lt;/strong&gt; and &lt;strong&gt;default&lt;/strong&gt;. You can have multiple named exports per module but only one default export. Each type corresponds to one of the above syntax:</source>
          <target state="translated">&lt;strong&gt;이름&lt;/strong&gt; 과 &lt;strong&gt;기본값&lt;/strong&gt; 의 두 가지 내보내기 유형이 있습니다. 모듈 당 여러 개의 명명 된 내보내기를 가질 수 있지만 기본 내보내기는 하나만 가능합니다. 각 유형은 위의 구문 중 하나에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="3ddee455cf2360e71a5ca1f1e12008d3d2cfa4aa" translate="yes" xml:space="preserve">
          <source>There are two protocols: The &lt;a href=&quot;#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt; and the &lt;a href=&quot;#The_iterator_protocol&quot;&gt;iterator protocol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#The_iterable_protocol&quot;&gt;반복 가능한 프로토콜&lt;/a&gt; 과 &lt;a href=&quot;#The_iterator_protocol&quot;&gt;반복자 프로토콜&lt;/a&gt; 의 두 가지 프로토콜이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e0c76d53ebd5426a3fa7bc5f62eec9a68003babb" translate="yes" xml:space="preserve">
          <source>There are two types of exports:</source>
          <target state="translated">There are two types of exports:</target>
        </trans-unit>
        <trans-unit id="a5f5403695ad4b2c5ef25a3e77d3c0edf0e80b0f" translate="yes" xml:space="preserve">
          <source>There are two ways to access an individual character in a string. The first is the &lt;a href=&quot;string/charat&quot;&gt;&lt;code&gt;charAt()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">문자열에서 개별 문자에 액세스하는 방법에는 두 가지가 있습니다. 첫 번째는 &lt;a href=&quot;string/charat&quot;&gt; &lt;code&gt;charAt()&lt;/code&gt; &lt;/a&gt; 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="ff0f992d892480fe8b54b8c31c3b84480f99798b" translate="yes" xml:space="preserve">
          <source>There are two ways to access properties: &lt;em&gt;dot notation&lt;/em&gt; and &lt;em&gt;bracket notation&lt;/em&gt;.</source>
          <target state="translated">There are two ways to access properties: &lt;em&gt;dot notation&lt;/em&gt; and &lt;em&gt;bracket notation&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="3bc1100e82567e2f208fe7a12e55d415075ed582" translate="yes" xml:space="preserve">
          <source>There are two ways to access properties: dot notation and bracket notation.</source>
          <target state="translated">속성에 액세스하는 방법에는 점 표기법과 대괄호 표기법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2613c11b0a9e89514dcfe56d5a9e17dd865f6da" translate="yes" xml:space="preserve">
          <source>There are two ways to create a &lt;code&gt;RegExp&lt;/code&gt; object: a &lt;em&gt;literal notation&lt;/em&gt; and a &lt;em&gt;constructor&lt;/em&gt;.</source>
          <target state="translated">There are two ways to create a &lt;code&gt;RegExp&lt;/code&gt; object: a &lt;em&gt;literal notation&lt;/em&gt; and a &lt;em&gt;constructor&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="d9eac4d67471374ce0fca103ca47a518c3f5d80f" translate="yes" xml:space="preserve">
          <source>There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB).</source>
          <target state="translated">&lt;code&gt;WebAssembly.Memory&lt;/code&gt; 객체 를 얻는 방법에는 두 가지가 있습니다 . 첫 번째 방법은 JavaScript에서 구성하는 것입니다. 다음 예제는 초기 크기가 10 페이지 (640KiB)이고 최대 크기가 100 페이지 (6.4MiB) 인 새 웹 어셈블리 메모리 인스턴스를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="401d6e16400c1f5eb29b5ace1859174bc801d65c" translate="yes" xml:space="preserve">
          <source>There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB). Its &lt;code&gt;&lt;a href=&quot;memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; property will return an &lt;code&gt;&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">There are two ways to get a &lt;code&gt;WebAssembly.Memory&lt;/code&gt; object. The first way is to construct it from JavaScript. The following example creates a new WebAssembly Memory instance with an initial size of 10 pages (640KiB), and a maximum size of 100 pages (6.4MiB). Its &lt;code&gt;&lt;a href=&quot;memory/buffer&quot;&gt;buffer&lt;/a&gt;&lt;/code&gt; property will return an &lt;code&gt;&lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="08103d657e3ab1660bea7f1345f275c3a3040e73" translate="yes" xml:space="preserve">
          <source>There can be only one ...restParam.</source>
          <target state="translated">There can be only one ...restParam.</target>
        </trans-unit>
        <trans-unit id="f78ff8e98e3ceb773092982187159bbba9b6d20d" translate="yes" xml:space="preserve">
          <source>There can be only one special method with the name &quot;&lt;code&gt;constructor&lt;/code&gt;&quot; in a class. Having more than one occurrence of a &lt;code&gt;constructor&lt;/code&gt; method in a class will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">There can be only one special method with the name &quot; &lt;code&gt;constructor&lt;/code&gt; &quot; in a class. Having more than one occurrence of a &lt;code&gt;constructor&lt;/code&gt; method in a class will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; error.</target>
        </trans-unit>
        <trans-unit id="8cecd685f70850c0f03a58c949aa80ac6c0bdf27" translate="yes" xml:space="preserve">
          <source>There can be only one special method with the name &quot;constructor&quot; in a class. Having more than one occurrence of a &lt;code&gt;constructor&lt;/code&gt; method in a class will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">클래스에서 이름이 &quot;constructor&quot;인 특수 메소드는 하나만있을 수 있습니다. 클래스에서 &lt;code&gt;constructor&lt;/code&gt; 메서드가 두 번 이상 발생 하면 &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="966e916d083f8a8c8e09515513f3abbf40caae80" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, or if the function code is placed correctly in this context at all.</source>
          <target state="translated">코드에 이름을 요구 하는 &lt;a href=&quot;../statements/function&quot;&gt;함수 문&lt;/a&gt; 이 있습니다 . 함수가 정의 된 방식과 이름을 제공해야하는지 또는 문제의 함수가 함수 표현식, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; 이거나 함수 코드가이 컨텍스트에 올바르게 배치되어 있는지 확인해야합니다. .</target>
        </trans-unit>
        <trans-unit id="90808877b45c5bd07e9b7ced7576246800e49da6" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, or if the function code is placed correctly in this context at all.</source>
          <target state="translated">There is a &lt;a href=&quot;../statements/function&quot;&gt;function statement&lt;/a&gt; in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, or if the function code is placed correctly in this context at all.</target>
        </trans-unit>
        <trans-unit id="5828690653ee4c273ebe5eabccc86bcf251e5ace" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; constructor with at least two arguments passed in the code. The last argument is the source code for the new function you're creating. All the rest make up your new function's argument list.</source>
          <target state="translated">이 &lt;code&gt;&lt;a href=&quot;../global_objects/function&quot;&gt;Function()&lt;/a&gt;&lt;/code&gt; 코드에 전달 적어도 두 개의 인자를 가진 생성자. 마지막 인수는 만들고있는 새 함수의 소스 코드입니다. 나머지는 모두 새로운 함수의 인수 목록을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="36e983a9e9bfbb388d7bc8a8b42ff6aaf41e7557" translate="yes" xml:space="preserve">
          <source>There is a deprecated source map syntax in a JavaScript source.</source>
          <target state="translated">JavaScript 소스에는 더 이상 사용되지 않는 소스 맵 구문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="dad988a3dad8edbdac623e474ca021d682a19413" translate="yes" xml:space="preserve">
          <source>There is a distinction between the function name and the variable the function is assigned to. The function name cannot be changed, while the variable the function is assigned to can be reassigned. The function name can be used only within the function's body. Attempting to use it outside the function's body results in an error (or &lt;code&gt;undefined&lt;/code&gt; if the function name was previously declared via a &lt;code&gt;var&lt;/code&gt; statement). For example:</source>
          <target state="translated">함수 이름과 함수가 할당 된 변수 사이에는 차이가 있습니다. 기능 이름은 변경할 수 없지만 기능이 할당 된 변수는 재 할당 할 수 있습니다. 함수 이름은 함수 본문 내에서만 사용할 수 있습니다. 함수 본문 외부에서 사용하려고하면 오류가 발생합니다 (또는 함수 이름이 &lt;code&gt;var&lt;/code&gt; 를 통해 이전에 선언 된 경우 &lt;code&gt;undefined&lt;/code&gt; 문을 ). 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eef3629e677fb9eb1f15308be8de9f061c6ef012" translate="yes" xml:space="preserve">
          <source>There is a mistake in the &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma, for example. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.</source>
          <target state="translated">&lt;a href=&quot;../operators/object_initializer&quot;&gt;개체 이니셜 라이저&lt;/a&gt; 구문에 오류가 있습니다 . 실제로는 중괄호가 누락 될 수 있지만 쉼표가 누락 될 수도 있습니다. 또한 닫는 중괄호 나 괄호가 올바른 순서인지 확인하십시오. 코드를 들여 쓰거나 형식을 지정하면 정글을보다 쉽게 ​​볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bc3b0d19ead633f8047ed968b70ba512ec3dd88" translate="yes" xml:space="preserve">
          <source>There is a more usage oriented way to think of &lt;code&gt;isNaN()&lt;/code&gt;: If &lt;code&gt;isNaN(x)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, you can use &lt;code&gt;x&lt;/code&gt; in an arithmetic expression not making the expression return &lt;code&gt;NaN&lt;/code&gt;. If it returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; will make every arithmetic expression return &lt;code&gt;NaN&lt;/code&gt;. This means that in JavaScript, &lt;code&gt;isNaN(x) == true&lt;/code&gt; is equivalent to &lt;code&gt;x - 0&lt;/code&gt; returning &lt;code&gt;NaN&lt;/code&gt; (though in JavaScript &lt;code&gt;x - 0 == NaN&lt;/code&gt; always returns false, so you can't test for it). Actually, &lt;code&gt;isNaN(x)&lt;/code&gt;, &lt;code&gt;isNaN(x - 0)&lt;/code&gt;, &lt;code&gt;isNaN(Number(x))&lt;/code&gt;, &lt;code&gt;Number.isNaN(x - 0)&lt;/code&gt;, and &lt;code&gt;Number.isNaN(Number(x))&lt;/code&gt; always return the same and in JavaScript &lt;code&gt;isNaN(x)&lt;/code&gt; is just the shortest possible form to express each of these terms.</source>
          <target state="translated">&lt;code&gt;isNaN()&lt;/code&gt; 을 생각하는 사용법 지향적 인 방법이 있습니다 . &lt;code&gt;isNaN(x)&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 를 리턴 하면 , 산술 표현식에서 &lt;code&gt;x&lt;/code&gt; 를 사용 하여 표현식이 &lt;code&gt;NaN&lt;/code&gt; 을 리턴하지 않도록 할 수 있습니다 . &lt;code&gt;true&lt;/code&gt; 를 리턴 하면 &lt;code&gt;x&lt;/code&gt; 는 모든 산술 표현식이 &lt;code&gt;NaN&lt;/code&gt; 을 리턴하게 합니다. 이것은 JavaScript에서 &lt;code&gt;isNaN(x) == true&lt;/code&gt; 는 &lt;code&gt;NaN&lt;/code&gt; 을 반환 하는 &lt;code&gt;x - 0&lt;/code&gt; 과 같습니다 (JavaScript에서는 &lt;code&gt;x - 0 == NaN&lt;/code&gt; 항상 false를 반환하므로 테스트 할 수 없음). 실제로 &lt;code&gt;isNaN(x)&lt;/code&gt; , &lt;code&gt;isNaN(x - 0)&lt;/code&gt; , &lt;code&gt;isNaN(Number(x))&lt;/code&gt; , &lt;code&gt;Number.isNaN(x - 0)&lt;/code&gt; 및 &lt;code&gt;Number.isNaN(Number(x))&lt;/code&gt; 항상 동일하게 반환되며 JavaScript에서는 &lt;code&gt;isNaN(x)&lt;/code&gt; 는 이러한 각 용어를 표현할 수있는 가장 짧은 형식입니다.</target>
        </trans-unit>
        <trans-unit id="40dcca166458da9c01e173a2ec8260bb48d15fa0" translate="yes" xml:space="preserve">
          <source>There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need make sure it is available in your current script or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">존재하지 않는 변수가 어딘가에 참조되어 있습니다. 이 변수를 선언하거나 현재 스크립트 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;범위&lt;/a&gt; 에서 사용 가능한지 확인해야합니다. .</target>
        </trans-unit>
        <trans-unit id="c24a378ea23a0ced2fcd64dacfbf3a9155ca1871" translate="yes" xml:space="preserve">
          <source>There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need to make sure it is available in your current script or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need to make sure it is available in your current script or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/scope&quot;&gt;scope&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8329c9f9ae3f5403889a2d82f303e7411b01151c" translate="yes" xml:space="preserve">
          <source>There is a semicolon (&lt;code&gt;;&lt;/code&gt;) missing somewhere. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements&lt;/a&gt; must be terminated with semicolons. Some of them are affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;, but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.</source>
          <target state="translated">어딘가에 세미콜론 ( &lt;code&gt;;&lt;/code&gt; )이 없습니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript 문&lt;/a&gt; 은 세미콜론으로 끝나야합니다. 그중 일부는 &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;자동 세미콜론 삽입 (ASI)의&lt;/a&gt; 영향을받습니다. 받지만이 경우 JavaScript가 소스 코드를 올바르게 구문 분석 할 수 있도록 세미콜론을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="d5f3969067a779f17814a6ff550c49abff4d7d19" translate="yes" xml:space="preserve">
          <source>There is a semicolon (&lt;code&gt;;&lt;/code&gt;) missing somewhere. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements&lt;/a&gt; must be terminated with semicolons. Some of them are affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;, but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.</source>
          <target state="translated">There is a semicolon ( &lt;code&gt;;&lt;/code&gt; ) missing somewhere. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements&lt;/a&gt; must be terminated with semicolons. Some of them are affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;, but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.</target>
        </trans-unit>
        <trans-unit id="8ee613cc3110951c29ee7b623cb9cbfe91ba8967" translate="yes" xml:space="preserve">
          <source>There is a special syntax for declaring functions (see &lt;a href=&quot;statements/function&quot;&gt;function statement&lt;/a&gt; for details):</source>
          <target state="translated">함수 선언을위한 특별한 구문이 있습니다 (자세한 내용은 &lt;a href=&quot;statements/function&quot;&gt;함수 설명&lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="734192a42687a707ba6bbb1d256a37623fffc32a" translate="yes" xml:space="preserve">
          <source>There is a special syntax for generator function declarations (see &lt;a href=&quot;statements/function*&quot;&gt;&lt;code&gt;function* statement&lt;/code&gt;&lt;/a&gt; for details):</source>
          <target state="translated">생성기 함수 선언에 대한 특수 구문이 있습니다 (자세한 내용은 &lt;a href=&quot;statements/function*&quot;&gt; &lt;code&gt;function* statement&lt;/code&gt; &lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="63b7c66671ccda2191b78892ec7eccc87f33b7b5" translate="yes" xml:space="preserve">
          <source>There is a syntax mistake when creating a function somewhere. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.</source>
          <target state="translated">어딘가에 함수를 생성 할 때 구문 오류가 있습니다. 또한 닫는 중괄호 나 괄호가 올바른 순서인지 확인하십시오. 코드를 들여 쓰거나 형식을 지정하면 정글을보다 쉽게 ​​볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f90a14251ff602bf67fdc64be67fee8f5029bc0" translate="yes" xml:space="preserve">
          <source>There is also a function-like dynamic &lt;code&gt;&lt;strong&gt;import()&lt;/strong&gt;&lt;/code&gt;, which does not require scripts of &lt;code&gt;type=&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">함수형 동적 &lt;code&gt;&lt;strong&gt;import()&lt;/strong&gt;&lt;/code&gt; 도 있습니다.이 스크립트에는 &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; 스크립트가 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a0ea518cfe459b524823bdf5286dc6e89efe30c3" translate="yes" xml:space="preserve">
          <source>There is an attempt to set a new value to a property for which only a &lt;a href=&quot;../functions/get&quot;&gt;getter&lt;/a&gt; is specified. While this will be silently ignored in non-strict mode, it will throw a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../functions/get&quot;&gt;게터&lt;/a&gt; 만 지정된 속성에 새 값을 설정하려고 시도했습니다 . 엄격하지 않은 모드에서는 자동으로 무시되지만 엄격 모드에서는 &lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생 &lt;a href=&quot;../strict_mode&quot;&gt;합니다.&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="601d52f1826cbdd8b13cf22716b3e8003a4669ef" translate="yes" xml:space="preserve">
          <source>There is an error with how a function is called. More arguments need to be provided.</source>
          <target state="translated">함수 호출 방법에 오류가 있습니다. 더 많은 논쟁이 필요하다.</target>
        </trans-unit>
        <trans-unit id="e8bd24391f1947eca0620d3846b17ab9be056f5e" translate="yes" xml:space="preserve">
          <source>There is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string, for example.</source>
          <target state="translated">함수 호출 방법에 오류가 있습니다. 예를 들어 오타, 누락 된 연산자 또는 이스케이프되지 않은 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="079a090a362d6ae9416cb17d4e30a20176cb1123" translate="yes" xml:space="preserve">
          <source>There is an error with how an &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; condition is written. In any programming language, code needs to make decisions and carry out actions accordingly depending on different inputs. The if statement executes a statement if a specified condition is truthy. In JavaScript, this condition must appear in parenthesis after the &lt;code&gt;if&lt;/code&gt; keyword, like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if&lt;/a&gt;&lt;/code&gt; 조건을 작성 하는 방법에 오류 가 있습니다. 모든 프로그래밍 언어에서 코드는 다른 입력에 따라 결정을 내리고 그에 따라 조치를 수행해야합니다. if 문은 지정된 조건이 진실 인 경우 명령문을 실행합니다. JavaScript에서이 조건은 다음 과 같이 &lt;code&gt;if&lt;/code&gt; 키워드 뒤에 괄호 안에 나타나야 합니다.</target>
        </trans-unit>
        <trans-unit id="ac3ac3c8fba568b075002a16e13254b719e6ace9" translate="yes" xml:space="preserve">
          <source>There is an error with the array initializer syntax somewhere. Likely there is a closing bracket (&quot;&lt;code&gt;]&lt;/code&gt;&quot;) or a comma (&quot;&lt;code&gt;,&lt;/code&gt;&quot;) missing.</source>
          <target state="translated">어딘가에 배열 이니셜 라이저 구문에 오류가 있습니다. 닫는 대괄호 ( &quot; &lt;code&gt;]&lt;/code&gt; &quot;) 또는 쉼표 ( &quot; &lt;code&gt;,&lt;/code&gt; &quot;)가 누락되었을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a76af856478d22b7a91de90ab7d8913bbe495720" translate="yes" xml:space="preserve">
          <source>There is an invalid or unexpected token that doesn't belong at this position in the code. Use an editor that supports syntax highlighting and carefully check your code against mismatches like a minus sign (&lt;code&gt; - &lt;/code&gt;) versus a dash (&lt;code&gt; &amp;ndash; &lt;/code&gt;) or simple quotes (&lt;code&gt; &quot; &lt;/code&gt;) vs non-standard quotation marks (&lt;code&gt; &amp;ldquo; &lt;/code&gt;).</source>
          <target state="translated">코드에서이 위치에 속하지 않는 유효하지 않거나 예상치 못한 토큰이 있습니다. 마이너스 기호 같은 불일치에 대한 코드를 확인 신중하게 지원 구문 강조하는 편집기를 사용하여 ( &lt;code&gt; - &lt;/code&gt; ) (대시 대 &lt;code&gt; &amp;ndash; &lt;/code&gt; ) 또는 단순 따옴표 ( &lt;code&gt; &quot; &lt;/code&gt; (비표준 인용 부호 대) &lt;code&gt; &amp;ldquo; &lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3d79d3a8162216d15e7a3487ca2db20db3c47f5d" translate="yes" xml:space="preserve">
          <source>There is an open source library available called &lt;a href=&quot;https://null.house/open-source/mapsort&quot;&gt;mapsort&lt;/a&gt; which applies this approach.</source>
          <target state="translated">There is an open source library available called &lt;a href=&quot;https://null.house/open-source/mapsort&quot;&gt;mapsort&lt;/a&gt; which applies this approach.</target>
        </trans-unit>
        <trans-unit id="6205123b9aa140036711fe353dec412098e0dcd4" translate="yes" xml:space="preserve">
          <source>There is an unterminated &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; somewhere. String literals must be enclosed by single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&quot;&lt;/code&gt;) quotes. JavaScript makes no distinction between single-quoted strings and double-quoted strings. &lt;a href=&quot;../global_objects/string#Escape_notation&quot;&gt;Escape sequences&lt;/a&gt; work in strings created with either single or double quotes. To fix this error, check if:</source>
          <target state="translated">어딘가에 종결되지 않은 &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 이 있습니다 . 문자열 리터럴은 작은 따옴표 ( &lt;code&gt;'&lt;/code&gt; ) 또는 큰 따옴표 ( &lt;code&gt;&quot;&lt;/code&gt; )로 묶어야합니다. JavaScript는 작은 따옴표 문자열과 큰 따옴표 문자열을 구분하지 않습니다. &lt;a href=&quot;../global_objects/string#Escape_notation&quot;&gt;이스케이프 시퀀스&lt;/a&gt; 는 작은 따옴표 또는 큰 따옴표로 만든 문자열에서 작동합니다. 다음을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="dced52e45725251a5cf4e231f95674835cb7763b" translate="yes" xml:space="preserve">
          <source>There is no alignment constraint; multi-byte values may be fetched from any offset.</source>
          <target state="translated">정렬 구속 조건이 없습니다. 멀티 바이트 값은 모든 오프셋에서 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="813bfd8ad24be1ca9ab314e589857976cf8d0011" translate="yes" xml:space="preserve">
          <source>There is no way to make an object extensible again once it has been made non-extensible.</source>
          <target state="translated">확장 할 수 없게 된 개체를 다시 확장 할 수있는 방법은 없습니다.</target>
        </trans-unit>
        <trans-unit id="c6b6702ca6f9ac3a7721cff4e66e661d718f8baf" translate="yes" xml:space="preserve">
          <source>There is no way to stop or break a &lt;code&gt;forEach()&lt;/code&gt; loop other than by throwing an exception. If you need such behavior, the &lt;code&gt;forEach()&lt;/code&gt; method is the wrong tool.</source>
          <target state="translated">예외를 던지는 것 이외 의 &lt;code&gt;forEach()&lt;/code&gt; 루프 를 중지하거나 중단 할 수있는 방법이 없습니다 . 이러한 동작이 필요한 경우 &lt;code&gt;forEach()&lt;/code&gt; 메소드가 잘못된 도구입니다.</target>
        </trans-unit>
        <trans-unit id="19b88f705ac5c1d6eceb88623955d3cbf474e151" translate="yes" xml:space="preserve">
          <source>There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation and must be accessed using bracket notation.</source>
          <target state="translated">There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation and must be accessed using bracket notation.</target>
        </trans-unit>
        <trans-unit id="7e79d1c336655d9a3379f42b74223cd9f8017298" translate="yes" xml:space="preserve">
          <source>There is nothing special about JavaScript arrays and the properties that cause this. JavaScript properties that begin with a digit cannot be referenced with dot notation; and must be accessed using bracket notation. For example, if you had an object with a property named &lt;code&gt;'3d'&lt;/code&gt;, it can only be referenced using bracket notation. E.g.:</source>
          <target state="translated">JavaScript 배열과이를 일으키는 속성에는 특별한 것이 없습니다. 숫자로 시작하는 JavaScript 속성은 점 표기법으로 참조 할 수 없습니다. 대괄호 표기법을 사용하여 액세스해야합니다. 예를 들어, 이름이 &lt;code&gt;'3d'&lt;/code&gt; 인 객체가있는 경우 대괄호 표기법 만 사용하여 참조 할 수 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="252b4e8437eedd402437cd68393224c8497ca855" translate="yes" xml:space="preserve">
          <source>There isn't any method in an Object itself to delete its own properties (e.g. like &lt;code&gt;&lt;a href=&quot;map/delete&quot;&gt;Map.prototype.delete()&lt;/a&gt;&lt;/code&gt;). To do so one has to use the &lt;a href=&quot;../operators/delete&quot;&gt;delete operator&lt;/a&gt;.</source>
          <target state="translated">객체 자체에는 자체 속성을 삭제하는 메소드가 없습니다 (예 : &lt;code&gt;&lt;a href=&quot;map/delete&quot;&gt;Map.prototype.delete()&lt;/a&gt;&lt;/code&gt; ). 그렇게하려면 &lt;a href=&quot;../operators/delete&quot;&gt;delete 연산자&lt;/a&gt; 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="10b1ddca0fb6ef669c81b9c4f20fa38570137851" translate="yes" xml:space="preserve">
          <source>There isn't any method in an Object itself to delete its own properties (such as &lt;a href=&quot;map/delete&quot;&gt;&lt;code&gt;Map.prototype.delete()&lt;/code&gt;&lt;/a&gt;). To do so, one must use the &lt;a href=&quot;../operators/delete&quot;&gt;delete operator&lt;/a&gt;.</source>
          <target state="translated">There isn't any method in an Object itself to delete its own properties (such as &lt;a href=&quot;map/delete&quot;&gt; &lt;code&gt;Map.prototype.delete()&lt;/code&gt; &lt;/a&gt;). To do so, one must use the &lt;a href=&quot;../operators/delete&quot;&gt;delete operator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a3d402ccef36d314f4b2419d96fd7f974013a48d" translate="yes" xml:space="preserve">
          <source>There was an assignment (&lt;code&gt;=&lt;/code&gt;) when you would normally expect a test for equality (&lt;code&gt;==&lt;/code&gt;). To help debugging, JavaScript (with strict warnings enabled) warns about this pattern.</source>
          <target state="translated">평등 검정 ( &lt;code&gt;==&lt;/code&gt; ) 을 기대할 때 할당 ( &lt;code&gt;=&lt;/code&gt; ) 이있었습니다 . 디버깅을 돕기 위해 JavaScript (엄격한 경고 사용)가이 패턴에 대해 경고합니다.</target>
        </trans-unit>
        <trans-unit id="f9227994116fe5d0f8085970ec6f16ff6bfdc73c" translate="yes" xml:space="preserve">
          <source>There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt; or the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; for more information on what a constructor is.</source>
          <target state="translated">객체 또는 변수를 생성자로 사용하려고 시도했지만 해당 객체 또는 변수가 생성자가 아닙니다. 생성자가 무엇인지에 대한 자세한 내용 은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;생성자&lt;/a&gt; 또는 &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f951ee1c35465bac5e1963445b6acaf0bbbefedc" translate="yes" xml:space="preserve">
          <source>There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt; or the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; for more information on what a constructor is.</source>
          <target state="translated">There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/constructor&quot;&gt;constructor&lt;/a&gt; or the &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; for more information on what a constructor is.</target>
        </trans-unit>
        <trans-unit id="891ffccc316759ba568170669ba5546a49a0e599" translate="yes" xml:space="preserve">
          <source>There was an out of range precision argument in one of these methods:</source>
          <target state="translated">다음 방법 중 하나에서 범위를 벗어난 정밀도 인수가있었습니다.</target>
        </trans-unit>
        <trans-unit id="8555a1b96929dda25e05855a91841930b9895b54" translate="yes" xml:space="preserve">
          <source>There was an unexpected assignment somewhere. This might be due to a mismatch of a &lt;a href=&quot;../operators/assignment_operators&quot;&gt;assignment operator&lt;/a&gt; and a &lt;a href=&quot;../operators/comparison_operators&quot;&gt;comparison operator&lt;/a&gt;, for example. While a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; sign assigns a value to a variable, the &quot;&lt;code&gt;==&lt;/code&gt;&quot; or &quot;&lt;code&gt;===&lt;/code&gt;&quot; operators compare a value.</source>
          <target state="translated">어딘가에 예기치 않은 과제가있었습니다. 예를 들어, &lt;a href=&quot;../operators/assignment_operators&quot;&gt;할당 연산자&lt;/a&gt; 와 &lt;a href=&quot;../operators/comparison_operators&quot;&gt;비교 연산자&lt;/a&gt; 가 일치하지 않기 때문일 수 있습니다 . 단일 &quot; &lt;code&gt;=&lt;/code&gt; &quot;부호는 변수에 값을 할당하지만 &quot; &lt;code&gt;==&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;===&lt;/code&gt; &quot;연산자는 값을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="2cc0b62de74b6015a40cc1de92b6c589e33d8858" translate="yes" xml:space="preserve">
          <source>There was an unexpected assignment somewhere. This might be due to a mismatch of a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt; and a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;comparison operator&lt;/a&gt;, for example. While a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; sign assigns a value to a variable, the &quot;&lt;code&gt;==&lt;/code&gt;&quot; or &quot;&lt;code&gt;===&lt;/code&gt;&quot; operators compare a value.</source>
          <target state="translated">There was an unexpected assignment somewhere. This might be due to a mismatch of a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt; and a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;comparison operator&lt;/a&gt;, for example. While a single &quot; &lt;code&gt;=&lt;/code&gt; &quot; sign assigns a value to a variable, the &quot; &lt;code&gt;==&lt;/code&gt; &quot; or &quot; &lt;code&gt;===&lt;/code&gt; &quot; operators compare a value.</target>
        </trans-unit>
        <trans-unit id="c743d038ce86d7d1cf9aef67d46c92805bb7360b" translate="yes" xml:space="preserve">
          <source>There was an unexpected type. This occurs oftentimes with &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">예상치 못한 유형이있었습니다. 이것은 종종 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 않거나 &lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 값으로 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="fa851d659f9e3a5e5404c00816c8b91ca7df0be7" translate="yes" xml:space="preserve">
          <source>There was attempt to access an object for which you have no permission. This is likely an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; element loaded from a different domain for which you violated the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">권한이없는 개체에 액세스하려고했습니다. 이 일 가능성이다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 해당&lt;/a&gt; 당신이 위반하는 다른 도메인에서로드 된 요소 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;동일 출처 정책을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="573476911bbd2032116682ce4f1dfae94f4ea1e9" translate="yes" xml:space="preserve">
          <source>There was attempt to access an object for which you have no permission. This is likely an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; element loaded from a different domain for which you violated the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">There was attempt to access an object for which you have no permission. This is likely an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt; element loaded from a different domain for which you violated the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4a2fec0c776a0bb5124c90983a67b0ba18a2c6ee" translate="yes" xml:space="preserve">
          <source>There's a deprecated idiom to iterate over the specified object's key-value pairs using &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt; 및 deprecated &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; 객체를 사용하여 지정된 객체의 키-값 쌍을 반복하는 더 이상 사용되지 않는 관용구가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f9de48cf02c49531431b9a478a6c399bfdff23ed" translate="yes" xml:space="preserve">
          <source>There's a deprecated idiom to iterate over the specified object's key-value pairs using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">There's a deprecated idiom to iterate over the specified object's key-value pairs using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt; and the deprecated &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt; object.</target>
        </trans-unit>
        <trans-unit id="f79eb6500b4844bbdbe1fa124b2a371c97ab0a22" translate="yes" xml:space="preserve">
          <source>There's a subtle difference between the &lt;code&gt;substring()&lt;/code&gt; and &lt;a href=&quot;substr&quot;&gt;&lt;code&gt;substr()&lt;/code&gt;&lt;/a&gt; methods, so you should be careful not to get them confused.</source>
          <target state="translated">There's a subtle difference between the &lt;code&gt;substring()&lt;/code&gt; and &lt;a href=&quot;substr&quot;&gt; &lt;code&gt;substr()&lt;/code&gt; &lt;/a&gt; methods, so you should be careful not to get them confused.</target>
        </trans-unit>
        <trans-unit id="d47764807ef3f4ab89be2f3e1fff9829ca861331" translate="yes" xml:space="preserve">
          <source>There's a subtle difference between the &lt;code&gt;substring()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; methods, and you should be careful not get them confused.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; 메소드 는 미묘한 차이 가 있으므로 혼동하지 않도록주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="388052c72ae9c911a2a9c7d0600224bb8a43d9e8" translate="yes" xml:space="preserve">
          <source>Therefore we can't obtain the class name for virtually any class with a static method property &lt;code&gt;name()&lt;/code&gt;:</source>
          <target state="translated">따라서 정적 메소드 속성 &lt;code&gt;name()&lt;/code&gt; 이있는 거의 모든 클래스의 클래스 이름을 얻을 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="44baae7b20052d28f0d454acdd98cfe8611bd134" translate="yes" xml:space="preserve">
          <source>Therefore you may not rely on the built-in &lt;code&gt;Function.name&lt;/code&gt; property to always hold a class's name.</source>
          <target state="translated">따라서 클래스의 이름을 항상 보유하기 위해 기본 제공 &lt;code&gt;Function.name&lt;/code&gt; 속성 에 의존하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2cdba98eff68875b3d99014eb4149d2554d08b62" translate="yes" xml:space="preserve">
          <source>Therefore, if compatibility with older JavaScript engines is required, it is perilous to directly substitute the string returned by &lt;code&gt;JSON.stringify&lt;/code&gt; into a JavaScript string to be passed to &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;new Function&lt;/code&gt; or as part of a &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; URL, and the following utility can be used:</source>
          <target state="translated">Therefore, if compatibility with older JavaScript engines is required, it is perilous to directly substitute the string returned by &lt;code&gt;JSON.stringify&lt;/code&gt; into a JavaScript string to be passed to &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;new Function&lt;/code&gt; or as part of a &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; URL, and the following utility can be used:</target>
        </trans-unit>
        <trans-unit id="8dbf70e76e01d89d71c9236522a7b76a076b920f" translate="yes" xml:space="preserve">
          <source>Therefore, if the JSON is meant to be evaluated or directly utilized within &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;, the following utility can be used:</source>
          <target state="translated">따라서 JSON을 &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; 내에서 평가하거나 직접 활용 하려는 경우 다음 유틸리티를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69388a8bead74bc115a22073ad3512cb27d74046" translate="yes" xml:space="preserve">
          <source>Therefore, this appears to work in a way:</source>
          <target state="translated">Therefore, this appears to work in a way:</target>
        </trans-unit>
        <trans-unit id="40cbde5ec7d37565542fef4246a75fc1451e7a61" translate="yes" xml:space="preserve">
          <source>These are &lt;strong&gt;not&lt;/strong&gt; part of ECMAScript standards and they are not supported by non-Gecko browsers. As a standard alternative, you can convert your object to a proper array using &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;; although that method may not be supported in old browsers:</source>
          <target state="translated">이들은 &lt;strong&gt;있지&lt;/strong&gt; 인 ECMAScript 표준의 일부 그들은 비 게코 브라우저에서 지원되지 않습니다. 표준 대안으로 &lt;a href=&quot;array/from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt; 사용하여 객체를 적절한 배열로 변환 할 수 있습니다 . 이 방법은 이전 브라우저에서 지원되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19f1bdd2a382fb545b7ca233307dfaaa84cb23aa" translate="yes" xml:space="preserve">
          <source>These are always reserved:</source>
          <target state="translated">이들은 항상 예약되어 있습니다 :</target>
        </trans-unit>
        <trans-unit id="59320fcd83ed1d0de297136831e93c2907c65ba8" translate="yes" xml:space="preserve">
          <source>These are the base objects representing numbers, dates, and mathematical calculations.</source>
          <target state="translated">이들은 숫자, 날짜 및 수학적 계산을 나타내는 기본 개체입니다.</target>
        </trans-unit>
        <trans-unit id="adf2d53afae434de46f79f2141ac3e8883ace949" translate="yes" xml:space="preserve">
          <source>These are the fundamental, basic objects upon which all other objects are based. This includes objects that represent general objects, functions, and errors.</source>
          <target state="translated">이것들은 다른 모든 객체의 기반이되는 기본적이고 기본적인 객체입니다. 여기에는 일반적인 객체, 기능 및 오류를 나타내는 객체가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6fe3d01344deb2754adced0b183508db74566905" translate="yes" xml:space="preserve">
          <source>These arguments (if any) follow the provided &lt;code&gt;this&lt;/code&gt; value and are then inserted at the start of the arguments passed to the target function, followed by whatever arguments are passed bound function at the time it is called.</source>
          <target state="translated">These arguments (if any) follow the provided &lt;code&gt;this&lt;/code&gt; value and are then inserted at the start of the arguments passed to the target function, followed by whatever arguments are passed bound function at the time it is called.</target>
        </trans-unit>
        <trans-unit id="42c8e79787069b6f572c221d974856e04924de96" translate="yes" xml:space="preserve">
          <source>These arguments count backwards from the end by &lt;code&gt;5&lt;/code&gt; to find the start index and backwards from the end by &lt;code&gt;1&lt;/code&gt; to find the end index.</source>
          <target state="translated">이러한 인수 는 시작 인덱스를 찾기 위해 끝에서 &lt;code&gt;5&lt;/code&gt; 씩 거꾸로 세고 끝 인덱스를 찾기 위해 끝에서 &lt;code&gt;1&lt;/code&gt; 씩 거꾸로 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="c7f95be1daff8bb613e12808aacd684fe02e1320" translate="yes" xml:space="preserve">
          <source>These arguments customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In implementations which ignore the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation-dependent.</source>
          <target state="translated">이러한 인수는 함수의 동작을 사용자 지정하고 응용 프로그램이 형식 지정 규칙을 사용해야하는 언어를 지정하도록합니다. &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; 인수 를 무시하는 구현에서 사용되는 로케일 과 반환되는 문자열의 형식은 전적으로 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="23194fbe91023a3d742e7a70b01d6964ebbe7f8c" translate="yes" xml:space="preserve">
          <source>These differences are very subtle differences. It's possible that a test suite doesn't catch this kind of subtle difference. Careful review of your code base will probably be necessary to be sure these differences don't affect the semantics of your code. Fortunately, this careful review can be done gradually down the function granularity.</source>
          <target state="translated">이러한 차이는 매우 미묘한 차이입니다. 테스트 스위트가 이런 종류의 미묘한 차이를 포착하지 못할 수도 있습니다. 이러한 차이가 코드의 의미에 영향을 미치지 않도록하려면 코드 기반을 신중하게 검토해야합니다. 다행히도이 세심한 검토는 기능 세분성을 점차적으로 낮출 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c06c6284f0ffaf0405fa11a8b8cc1d7f5522abc" translate="yes" xml:space="preserve">
          <source>These errors are good, because they reveal plain errors or bad practices. They occur before the code is running.</source>
          <target state="translated">이러한 오류는 일반적인 오류나 잘못된 관행을 나타 내기 때문에 좋습니다. 코드가 실행되기 전에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="18942180c831ea71766358ab2ffac6c2e9f26c64" translate="yes" xml:space="preserve">
          <source>These flags are represented by a sequence of bits: DCBA. When a flag is &lt;em&gt;set&lt;/em&gt;, it has a value of 1. When a flag is &lt;em&gt;cleared&lt;/em&gt;, it has a value of 0. Suppose a variable &lt;code&gt;flags&lt;/code&gt; has the binary value 0101:</source>
          <target state="translated">이 플래그는 일련의 비트로 표시됩니다 : DCBA. 플래그가 &lt;em&gt;설정&lt;/em&gt; 되면 값은 1입니다. 플래그가 &lt;em&gt;지워&lt;/em&gt; 지면 값이 0입니다. 변수 &lt;code&gt;flags&lt;/code&gt; 의 이진 값이 0101 이라고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="7a8bbfc9a327eeeeb451f9c5c4ea38d87c6a7c23" translate="yes" xml:space="preserve">
          <source>These functions optionally take an &lt;code&gt;initialValue&lt;/code&gt; (which will be used as the first argument to the first call of the &lt;code&gt;callback&lt;/code&gt;). However, if no initial value is provided, it will use the first element of the &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; as the initial value. This error is raised when an empty array is provided because no initial value can be returned in that case.</source>
          <target state="translated">이 함수는 선택적으로 &lt;code&gt;initialValue&lt;/code&gt; ( &lt;code&gt;callback&lt;/code&gt; 의 첫 번째 호출에 대한 첫 번째 인수로 사용됨 )를 사용합니다. 그러나 초기 값이 제공되지 않으면 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 의 첫 번째 요소가 초기 값으로 사용됩니다. 이 경우 초기 값을 반환 할 수 없으므로 빈 배열이 제공되면이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d3ebf99aa1376aaab8e2544a1885be39b3c3454f" translate="yes" xml:space="preserve">
          <source>These global functions&amp;mdash;functions which are called globally rather than on an object&amp;mdash;directly return their results to the caller.</source>
          <target state="translated">이러한 전역 함수 (객체가 아닌 전역 적으로 호출되는 함수)는 결과를 호출자에게 직접 반환합니다.</target>
        </trans-unit>
        <trans-unit id="be3662942b2e23e810fbcea86843f724a5380ee4" translate="yes" xml:space="preserve">
          <source>These global properties return a simple value; they have no properties or methods.</source>
          <target state="translated">이러한 전역 속성은 간단한 값을 반환합니다. 속성이나 메소드가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3eb980c6d99c1f5db9089a31df189593846fe7bf" translate="yes" xml:space="preserve">
          <source>These lines display the following:</source>
          <target state="translated">이 줄은 다음을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b875f200c113c3bad4e865d005ac933a288076a1" translate="yes" xml:space="preserve">
          <source>These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.</source>
          <target state="translated">이러한 메소드는 사용 가능한 HTML 태그 및 속성의 서브 세트 만 제공하므로 제한적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e3ee9bd03f2c6bfdada06f10486463c886ffa413" translate="yes" xml:space="preserve">
          <source>These methods do not modify the array and return some representation of the array.</source>
          <target state="translated">이 메소드는 배열을 수정하지 않고 배열의 일부 표현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="cca597257f192f0edcd8d3eb2d971b0102febe49" translate="yes" xml:space="preserve">
          <source>These methods modify the array:</source>
          <target state="translated">이 메소드는 배열을 수정합니다.</target>
        </trans-unit>
        <trans-unit id="dddf9337efe3c3b9762a99aafc56201b0dedb279" translate="yes" xml:space="preserve">
          <source>These objects represent and interact with structured data buffers and data coded using JavaScript Object Notation (JSON).</source>
          <target state="translated">이러한 객체는 구조화 된 데이터 버퍼 및 JSON (JavaScript Object Notation)을 사용하여 코딩 된 데이터를 나타내고 상호 작용합니다.</target>
        </trans-unit>
        <trans-unit id="6c51b197bb3602dd2f9ac7530edbb1a23d06ee30" translate="yes" xml:space="preserve">
          <source>These objects represent collections of data which are ordered by an index value. This includes (typed) arrays and array-like constructs.</source>
          <target state="translated">이러한 객체는 색인 값으로 정렬 된 데이터 모음을 나타냅니다. 여기에는 (유형) 배열 및 배열과 유사한 구문이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="5a5c5cf351e08162c242dffe9e27358c69a77ce6" translate="yes" xml:space="preserve">
          <source>These objects represent collections which use keys; these contain elements which are iterable in the order of insertion.</source>
          <target state="translated">이 객체는 키를 사용하는 컬렉션을 나타냅니다. 이들은 삽입 순서대로 반복 가능한 요소를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="be1ed535f65e43f334e953098d706e7033065d61" translate="yes" xml:space="preserve">
          <source>These objects represent strings and support manipulating them.</source>
          <target state="translated">이 객체는 문자열을 나타내며 조작을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="a5000062ebcb72866a9718df3463c1a4fa8f41d9" translate="yes" xml:space="preserve">
          <source>These problems can be solved in two different ways.</source>
          <target state="translated">이러한 문제는 두 가지 방법으로 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aac36ff9b0b311c2538349f2b1b05f49629e4853" translate="yes" xml:space="preserve">
          <source>These values have the following meanings:</source>
          <target state="translated">이러한 값의 의미는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9a9946bdc385aabfb76bc69f8808fede478b2fa9" translate="yes" xml:space="preserve">
          <source>They are of limited use, as they provide only a subset of the available HTML tags and attributes.</source>
          <target state="translated">사용 가능한 HTML 태그 및 속성의 하위 집합 만 제공하므로 사용이 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="1bcb29680b8ba21cacb23cbd3cd454ddff5f16ef" translate="yes" xml:space="preserve">
          <source>They were called &quot;template strings&quot; in prior editions of the ES2015 specification.</source>
          <target state="translated">ES2015 사양의 이전 버전에서는 &quot;템플릿 문자열&quot;이라고 불 렸습니다.</target>
        </trans-unit>
        <trans-unit id="babef9389b45b02009b9150991ba15ce9ad6f6ee" translate="yes" xml:space="preserve">
          <source>Third example: Appending a chain to the Function.prototype object and appending a new function to that chain</source>
          <target state="translated">세 번째 예 : Function.prototype 객체에 체인 추가 및 해당 체인에 새 함수 추가</target>
        </trans-unit>
        <trans-unit id="78207ad5ecdb11b4b012586ec80cedacc9d1ec75" translate="yes" xml:space="preserve">
          <source>Third, &lt;code&gt;arguments.callee&lt;/code&gt; is no longer supported. In normal code &lt;code&gt;arguments.callee&lt;/code&gt; refers to the enclosing function. This use case is weak: simply name the enclosing function! Moreover, &lt;code&gt;arguments.callee&lt;/code&gt; substantially hinders optimizations like inlining functions, because it must be made possible to provide a reference to the un-inlined function if &lt;code&gt;arguments.callee&lt;/code&gt; is accessed. &lt;code&gt;arguments.callee&lt;/code&gt; for strict mode functions is a non-deletable property which throws an error when set or retrieved:</source>
          <target state="translated">셋째, &lt;code&gt;arguments.callee&lt;/code&gt; 는 더 이상 지원되지 않습니다. 일반 코드 &lt;code&gt;arguments.callee&lt;/code&gt; 는 둘러싸는 함수를 나타냅니다. 이 유스 케이스는 약합니다. 간단히 함수의 이름을 지정하십시오! 또한 &lt;code&gt;arguments.callee&lt;/code&gt; 에 액세스 할 경우 인라인되지 않은 함수에 대한 참조를 제공 할 수 있어야하므로 &lt;code&gt;arguments.callee&lt;/code&gt; 는 인라인 함수와 같은 최적화를 실질적으로 방해합니다 . 엄격 모드 함수의 &lt;code&gt;arguments.callee&lt;/code&gt; 는 삭제할 수없는 특성으로 설정하거나 검색 할 때 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a968b5b6e8588988f5a74e8a5155d1a4b027f828" translate="yes" xml:space="preserve">
          <source>Third, &lt;code&gt;arguments&lt;/code&gt; for strict mode functions no longer provide access to the corresponding function call's variables. In some old ECMAScript implementations &lt;code&gt;arguments.caller&lt;/code&gt; was an object whose properties aliased variables in that function. This is a &lt;a href=&quot;http://stuff.mit.edu/iap/2008/facebook/&quot;&gt;security hazard&lt;/a&gt; because it breaks the ability to hide privileged values via function abstraction; it also precludes most optimizations. For these reasons no recent browsers implement it. Yet because of its historical functionality, &lt;code&gt;arguments.caller&lt;/code&gt; for a strict mode function is also a non-deletable property which throws when set or retrieved:</source>
          <target state="translated">셋째, 엄격 모드 함수의 &lt;code&gt;arguments&lt;/code&gt; 는 더 이상 해당 함수 호출의 변수에 대한 액세스를 제공하지 않습니다. 일부 오래된 ECMAScript 구현에서 &lt;code&gt;arguments.caller&lt;/code&gt; 는 해당 함수에서 속성의 변수 별칭이 지정된 객체였습니다. 이는 함수 추상화를 통해 권한있는 값을 숨기는 기능을 손상시키기 때문에 &lt;a href=&quot;http://stuff.mit.edu/iap/2008/facebook/&quot;&gt;보안 위험&lt;/a&gt; 이 있습니다 . 또한 대부분의 최적화를 방해합니다. 이러한 이유로 최근 브라우저는이를 구현하지 않습니다. 그러나 히스토리 기능으로 인해 엄격 모드 함수에 대한 &lt;code&gt;arguments.caller&lt;/code&gt; 는 설정하거나 검색 할 때 던지는 삭제 불가능 특성입니다.</target>
        </trans-unit>
        <trans-unit id="f0bf4f0e82effc2fcdfbd0bafd2806f94fa53428" translate="yes" xml:space="preserve">
          <source>Third, strict mode forbids deleting plain names. &lt;code&gt;delete name&lt;/code&gt; in strict mode is a syntax error:</source>
          <target state="translated">셋째, 엄격 모드는 일반 이름을 삭제하는 것을 금지합니다. 엄격 모드에서 &lt;code&gt;delete name&lt;/code&gt; 는 구문 오류입니다.</target>
        </trans-unit>
        <trans-unit id="ff008ff7ee98b437d5c1a16b7ee7b658db491651" translate="yes" xml:space="preserve">
          <source>Third, strict mode makes attempts to delete undeletable properties throw (where before the attempt would simply have no effect):</source>
          <target state="translated">세 번째로, 엄격 모드는 삭제 불가능한 특성을 삭제하려고 시도합니다 (시도 전의 결과는 영향을 미치지 않음).</target>
        </trans-unit>
        <trans-unit id="7c10bb714d54c5d432d668317715e557bddcd5c9" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; doesn't support symbol properties, since ES5 doesn't have symbols anyway:</source>
          <target state="translated">ES5에는 어쨌든 심볼 이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;없으므로이 폴리 필&lt;/a&gt; 은 심볼 속성을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7ddedacdb98faa51edf3865ceeff542d95ca3174" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://gist.github.com/384583&quot;&gt;Polyfill&lt;/a&gt; offers &lt;code&gt;watch&lt;/code&gt; to all ES5 compatible browsers.</source>
          <target state="translated">이 &lt;a href=&quot;https://gist.github.com/384583&quot;&gt;Polyfill&lt;/a&gt; 은 모든 ES5 호환 브라우저에 &lt;code&gt;watch&lt;/code&gt; 를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="c93fa53d0bbd47a3db878d767ffa2e7c1648219a" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; doesn't support symbol properties, since ES5 doesn't have symbols anyway:</source>
          <target state="translated">이 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;폴리 필&lt;/a&gt; 은 ES5에 심볼이 없기 때문에 심볼 속성을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be206cd04ed5688a80c6141f96aa0b59a1e416bd" translate="yes" xml:space="preserve">
          <source>This Polyfill emulates the &lt;code&gt;Math.log2&lt;/code&gt; function. Note that it returns imprecise values on some inputs (like 1 &amp;lt;&amp;lt; 29), wrap into &lt;a href=&quot;round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt; if working with bit masks.</source>
          <target state="translated">이 Polyfill은 &lt;code&gt;Math.log2&lt;/code&gt; 함수를 에뮬레이트합니다 . 비트 마스크로 작업하는 경우 일부 입력 (예 : 1 &amp;lt;&amp;lt; 29)에서 부정확 한 값을 반환하고 &lt;a href=&quot;round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; &lt;/a&gt; 로 래핑 합니다.</target>
        </trans-unit>
        <trans-unit id="b2049c2c2e9560624c110069b0ab4063f7b90969" translate="yes" xml:space="preserve">
          <source>This algorithm is exactly the one specified in ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;&lt;var&gt;fun&lt;/var&gt;.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 알고리즘은 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 원래 값을 가지고 &lt;code&gt;&lt;var&gt;fun&lt;/var&gt;.call&lt;/code&gt; .call 이 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; 의 원래 값으로 평가 된다는 가정하에 ECMA-262, &lt;sup&gt;5th&lt;/sup&gt; edition에 지정된 알고리즘입니다 .</target>
        </trans-unit>
        <trans-unit id="17fdf255bf97502cb62fe16d12b782c79ab82346" translate="yes" xml:space="preserve">
          <source>This algorithm is exactly the one specified in ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition, assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values, and that &lt;code&gt;&lt;var&gt;callbackfn&lt;/var&gt;.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 알고리즘은 &lt;code&gt;Object&lt;/code&gt; 및 &lt;code&gt;TypeError&lt;/code&gt; 가 원래 값을 갖고 있고 해당 &lt;code&gt;&lt;var&gt;callbackfn&lt;/var&gt;.call&lt;/code&gt; .call 이 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt; 의 원래 값으로 평가 된다고 가정 하고 ECMA-262, &lt;sup&gt;5th&lt;/sup&gt; edition에 지정된 알고리즘입니다 .</target>
        </trans-unit>
        <trans-unit id="5509417f952d62bdba51aef5570b1804b8848367" translate="yes" xml:space="preserve">
          <source>This also demonstrates how the &lt;code&gt;exports&lt;/code&gt; property is used to access exported functions.</source>
          <target state="translated">또한 &lt;code&gt;exports&lt;/code&gt; 속성을 사용하여 내 보낸 함수에 액세스 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="bd5220bea55e1a743b859d6d37204563a0636619" translate="yes" xml:space="preserve">
          <source>This also outputs &quot;value&quot;, since both foo and bar are converted to the same string. In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; JavaScript engine, this string would be &quot;['object Object']&quot;.</source>
          <target state="translated">foo와 bar가 같은 문자열로 변환되기 때문에 &quot;value&quot;도 출력됩니다. 에서 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;의 SpiderMonkey&lt;/a&gt; 자바 스크립트 엔진이 문자열은 &quot;[ '개체 개체']&quot;일 것이다.</target>
        </trans-unit>
        <trans-unit id="987e22c0bf5a3bdeaa9ce39fd36c228ec1917bab" translate="yes" xml:space="preserve">
          <source>This also outputs &lt;code&gt;'value'&lt;/code&gt;, since both &lt;code&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;bar&lt;/var&gt;&lt;/code&gt; are converted to the same string.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;foo&lt;/var&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;var&gt;bar&lt;/var&gt;&lt;/code&gt; 가 모두 동일한 문자열로 변환 되기 때문에 &lt;code&gt;'value'&lt;/code&gt; 도 출력 됩니다.</target>
        </trans-unit>
        <trans-unit id="43e3ab0dc2fac9991fde806932764fcc7d178e23" translate="yes" xml:space="preserve">
          <source>This article aims at providing guidance for developers.</source>
          <target state="translated">이 기사는 개발자를위한 지침을 제공하는 것을 목표로합니다.</target>
        </trans-unit>
        <trans-unit id="9626b764e08efbd935cba08ae43dfb975f652917" translate="yes" xml:space="preserve">
          <source>This behavior does not apply to &lt;code&gt;Boolean&lt;/code&gt; primitives. For example, the condition in the following &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement evaluates to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">이 동작은 &lt;code&gt;Boolean&lt;/code&gt; 프리미티브 에는 적용되지 않습니다 . 예를 들어, 다음의 조건 &lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 문의 &lt;code&gt;false&lt;/code&gt; 로 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="a7d9211767c7428f9136180953a4195577a05ab3" translate="yes" xml:space="preserve">
          <source>This can be achieved with a combination of &lt;a href=&quot;math/random&quot;&gt;&lt;code&gt;Math.random()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이것은 &lt;a href=&quot;math/random&quot;&gt; &lt;code&gt;Math.random()&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt; 의 조합으로 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="54a8582be47d36134e44af859785bba94f93d79c" translate="yes" xml:space="preserve">
          <source>This can be achieved with the &quot;export from&quot; syntax:</source>
          <target state="translated">이는 &quot;export from&quot;구문으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ad291aa4d8ee431b14c569c6df3b5210c4b79f9" translate="yes" xml:space="preserve">
          <source>This can be converted to the following expression:</source>
          <target state="translated">이것은 다음 식으로 변환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b25c64a2bb1e288bd99c8fbe5b8bafb815e7e5" translate="yes" xml:space="preserve">
          <source>This can be emulated using the following function:</source>
          <target state="translated">다음 기능을 사용하여 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f926f626ea1e32d2d481952e313cfa41dc28e854" translate="yes" xml:space="preserve">
          <source>This can be emulated with the following function, if &lt;a href=&quot;../float32array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; are supported:</source>
          <target state="translated">&lt;a href=&quot;../float32array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt; 인 경우 다음 함수를 사용하여 에뮬레이션 할 수 있습니다. 가 지원되는 .</target>
        </trans-unit>
        <trans-unit id="d21f00b36784c0aeb2b851d770e82cc575dfd3b1" translate="yes" xml:space="preserve">
          <source>This can be emulated with the following function:</source>
          <target state="translated">이것은 다음 기능으로 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0fc43e5f46c538b39638bfb56ef17a17afaac04" translate="yes" xml:space="preserve">
          <source>This can be emulated with the help of the &lt;a href=&quot;exp&quot;&gt;&lt;code&gt;Math.exp()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">이것은 &lt;a href=&quot;exp&quot;&gt; &lt;code&gt;Math.exp()&lt;/code&gt; &lt;/a&gt; 의 도움으로 에뮬레이트 할 수 있습니다 함수를 .</target>
        </trans-unit>
        <trans-unit id="1caecfd92674232e7963c8708a5db376087af9c3" translate="yes" xml:space="preserve">
          <source>This can be encountered when:</source>
          <target state="translated">다음과 같은 경우에 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2878f6477ef171927dfb7b63ee15513ab49a0e4" translate="yes" xml:space="preserve">
          <source>This can be fixed by storing the value in another property. In &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods, &lt;code&gt;this&lt;/code&gt; points to the object which is used to access or modify the property.</source>
          <target state="translated">다른 속성에 값을 저장하면이 문제를 해결할 수 있습니다. 에서 &lt;code&gt;get&lt;/code&gt; 및 &lt;code&gt;set&lt;/code&gt; 방법 &lt;code&gt;this&lt;/code&gt; 개체에 포인트를 액세스하는 데 사용하거나 속성을 수정된다.</target>
        </trans-unit>
        <trans-unit id="8637424076e7fdfeee1e684695bee835d9c5b29c" translate="yes" xml:space="preserve">
          <source>This capability is similar to features present in languages such as Perl and Python.</source>
          <target state="translated">이 기능은 Perl 및 Python과 같은 언어로 제공되는 기능과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="f270662d770728da9dd5f30c95435fca6101409c" translate="yes" xml:space="preserve">
          <source>This change should be backwards-compatible as long as you pass the result of &lt;code&gt;JSON.stringify&lt;/code&gt; to APIs such as &lt;code&gt;JSON.parse&lt;/code&gt; that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves. &lt;em&gt;Only&lt;/em&gt; if you are directly interpreting the result of &lt;code&gt;JSON.stringify&lt;/code&gt; do you need to carefully handle &lt;code&gt;JSON.stringify&lt;/code&gt;'s two possible encodings of these code points.</source>
          <target state="translated">이 변경은 &lt;code&gt;JSON.stringify&lt;/code&gt; 의 결과를 유효한 JSON 텍스트를 허용하는 &lt;code&gt;JSON.parse&lt;/code&gt; 와 같은 API에 전달하는 한 하위 호환이 가능해야합니다 . &lt;code&gt;JSON.stringify&lt;/code&gt; 의 결과를 직접 해석하는 경우 &lt;em&gt;에만&lt;/em&gt; 이러한 코드 포인트에 대한 &lt;code&gt;JSON.stringify&lt;/code&gt; 의 두 가지 가능한 인코딩 을 신중하게 처리해야합니다 .</target>
        </trans-unit>
        <trans-unit id="52ec415c21656b4e1b8e73732c50ced79b4f1a06" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;JavaScript standard built-in objects&lt;/a&gt;, along with their methods and properties.</source>
          <target state="translated">이 장에서는 모든 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;JavaScript 표준 내장 객체&lt;/a&gt; 와 해당 메소드 및 속성에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="a0489c62937cfb2364acc83ca2a1245aa5088fbc" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;JavaScript expressions and operators&lt;/a&gt;.</source>
          <target state="translated">이 장에서는 모든 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;JavaScript 표현식 및 연산자에 대해 설명&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="cb18bdfe69d338a2e163b4a1ab159bf54053304d" translate="yes" xml:space="preserve">
          <source>This chapter documents all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript statements and declarations&lt;/a&gt;.</source>
          <target state="translated">이 장에서는 모든 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;JavaScript 문과 선언에 대해 설명&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="1946293170999b6370e4a8efc4bfc761c8dc2309" translate="yes" xml:space="preserve">
          <source>This chapter documents all the JavaScript language operators, expressions and keywords.</source>
          <target state="translated">이 장에서는 모든 JavaScript 언어 연산자, 표현식 및 키워드에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="2d3db99e9899796f2e575c3e83689ed0ea4faaa0" translate="yes" xml:space="preserve">
          <source>This chapter documents all the JavaScript standard built-in objects, along with their methods and properties.</source>
          <target state="translated">이 장에서는 모든 JavaScript 표준 내장 객체와 해당 메소드 및 속성에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8ea2390318cc20ce6263f76f13a6bae75bcc9bf0" translate="yes" xml:space="preserve">
          <source>This chapter documents how to work with &lt;a href=&quot;functions&quot;&gt;JavaScript functions&lt;/a&gt; to develop your applications.</source>
          <target state="translated">이 장에서는 &lt;a href=&quot;functions&quot;&gt;JavaScript 함수&lt;/a&gt; 를 사용하여 응용 프로그램을 개발 하는 방법에 대해 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="ab3c71a069164684e41148766021ad5ff5657de9" translate="yes" xml:space="preserve">
          <source>This code can be run under NodeJS. Comprehension is enhanced by seeing the errors actually occur. To force more errors, change the &lt;code&gt;threshold&lt;/code&gt; values.</source>
          <target state="translated">이 코드는 NodeJS에서 실행할 수 있습니다. 오류가 실제로 발생하는 것을 보면 이해력이 향상됩니다. 더 많은 오류를 강제하려면 &lt;code&gt;threshold&lt;/code&gt; 값을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="62359e7e1c67ff757c79cb13ebfa480bbfeddf35" translate="yes" xml:space="preserve">
          <source>This code fails, as the equal sign can't be used this way in this object initializer syntax.</source>
          <target state="translated">이 객체 초기화 구문에서 등호를 사용할 수 없으므로이 코드는 실패합니다.</target>
        </trans-unit>
        <trans-unit id="e93d09fba02a1fa5bed87320e7d4bb9906dcbc5d" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;classes sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;).</source>
          <target state="translated">이 코드 스 니펫은 &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;클래스 샘플&lt;/a&gt; ( &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;실시간 데모)&lt;/a&gt; 에서 가져옵니다. ) .</target>
        </trans-unit>
        <trans-unit id="f2ceb2ebf615c7ca60bc60dad3b8703a4ff16b94" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;classes sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;). Here &lt;code&gt;super()&lt;/code&gt; is called to avoid duplicating the constructor parts' that are common between &lt;code&gt;Rectangle&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt;.</source>
          <target state="translated">이 코드 스 니펫은 &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;클래스 샘플&lt;/a&gt; ( &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt; ) 에서 가져옵니다 . 여기서 &lt;code&gt;super()&lt;/code&gt; 는 &lt;code&gt;Rectangle&lt;/code&gt; 과 &lt;code&gt;Square&lt;/code&gt; 사이에 공통 인 생성자 부분을 복제하지 않도록 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="86727df284471763d7a0565fcf32b92e27198e51" translate="yes" xml:space="preserve">
          <source>This code will now output &lt;code&gt;hello&lt;/code&gt; in the console as it should, without any errors at all.</source>
          <target state="translated">이제이 코드는 오류없이 콘솔에 &lt;code&gt;hello&lt;/code&gt; 를 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="07a0c0a1c5279be7ca0fcebe7c55e2d76317b6a4" translate="yes" xml:space="preserve">
          <source>This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do &lt;strong&gt;not&lt;/strong&gt; become properties of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; object, unlike &lt;a href=&quot;var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; variables.</source>
          <target state="translated">이 선언은 범위가 선언 된 블록에 대해 전역 또는 로컬 일 수있는 상수를 만듭니다. 전역 상수는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt; &lt;code&gt;window&lt;/code&gt; &lt;/a&gt; 개체의 속성 이 &lt;strong&gt;되지 않습니다.&lt;/strong&gt;&lt;a href=&quot;var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt; 변수.</target>
        </trans-unit>
        <trans-unit id="acecf8c55497d383f08519c6b9f28ff9d6bb0d15" translate="yes" xml:space="preserve">
          <source>This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do not become properties of the window object, unlike &lt;code&gt;&lt;a href=&quot;var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; variables. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).</source>
          <target state="translated">이 선언은 범위가 선언 된 블록에 대해 전역 적이거나 로컬 일 수있는 상수를 만듭니다. 전역 상수는 &lt;code&gt;&lt;a href=&quot;var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 변수 와 달리 윈도우 객체의 속성이되지 않습니다 . 상수의 이니셜 라이저가 필요합니다. 즉, 선언 된 것과 같은 명령문에 값을 지정해야합니다 (나중에 변경할 수없는 경우에는 의미가 있습니다).</target>
        </trans-unit>
        <trans-unit id="bad3d863e88d4e3c25abb04fb7e467e62f6e75c5" translate="yes" xml:space="preserve">
          <source>This definition supersedes the definition provided in ECMA-262.</source>
          <target state="translated">이 정의는 ECMA-262에 제공된 정의보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="6f968fc9ccc244f1b76b93c6844d3619a51936f4" translate="yes" xml:space="preserve">
          <source>This demonstrates that it matters only that the function was invoked from the &lt;code&gt;f&lt;/code&gt; member of &lt;code&gt;o&lt;/code&gt;.</source>
          <target state="translated">이것은 함수가 &lt;code&gt;o&lt;/code&gt; 의 &lt;code&gt;f&lt;/code&gt; 멤버 에서 호출 된 것만 중요하다는 것을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0bda21ee36aa642cf18c3b46156646dc4fb2bfea" translate="yes" xml:space="preserve">
          <source>This differs from ECMAScript 3, which discouraged but allowed octal interpretation.</source>
          <target state="translated">이는 ECMAScript 3과는 다르지만 8 진 해석은 권장하지 않았지만 허용되었습니다.</target>
        </trans-unit>
        <trans-unit id="b2458fde30306d280c6f35c49d963363652697ca" translate="yes" xml:space="preserve">
          <source>This differs from ECMAScript 3, which merely &lt;em&gt;discouraged&lt;/em&gt; (but allowed) octal interpretation.</source>
          <target state="translated">이것은 ECMAScript 3과 다릅니다. &lt;em&gt;&lt;/em&gt; 8 진 해석을 &lt;em&gt;권장하지 않는&lt;/em&gt; (허용 된) .</target>
        </trans-unit>
        <trans-unit id="1519bf6763aba2fd7a8258fc6d70b97467e733a1" translate="yes" xml:space="preserve">
          <source>This displays &quot;Smith, John&quot;.</source>
          <target state="translated">&quot;Smith, John&quot;이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="ed5511f2421466f5e03a5a0b0c9360e0ff60283a" translate="yes" xml:space="preserve">
          <source>This displays &lt;code&gt;&quot;Smith, John&quot;&lt;/code&gt;.</source>
          <target state="translated">이것은 표시 &lt;code&gt;&quot;Smith, John&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06ee698241a832f0c35ecf961e5a598b1cb373fd" translate="yes" xml:space="preserve">
          <source>This does the exact same thing as the previous example.</source>
          <target state="translated">이것은 이전 예제와 정확히 동일합니다.</target>
        </trans-unit>
        <trans-unit id="2e9c0a635918e3c9d07d290025ea86eea4026e4c" translate="yes" xml:space="preserve">
          <source>This ensures the return value of &lt;code&gt;doSomething&lt;/code&gt; changing from &lt;code&gt;undefined&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will not change the behavior of this code.</source>
          <target state="translated">이렇게하면 &lt;code&gt;doSomething&lt;/code&gt; 의 반환 값이 &lt;code&gt;undefined&lt;/code&gt; 에서 &lt;code&gt;true&lt;/code&gt; 로 변경 되어도이 코드의 동작이 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="911d9f9d45b91545c221c3486eeb449728c67558" translate="yes" xml:space="preserve">
          <source>This error can occur easily when not escaping strings properly and the JavaScript engine is expecting the end of your string already. For example:</source>
          <target state="translated">이 오류는 문자열을 올바르게 이스케이프하지 않고 JavaScript 엔진이 이미 문자열의 끝을 예상하고있을 때 쉽게 발생할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0201c0b7ba051d29f8ca6584a85c6705befd0c09" translate="yes" xml:space="preserve">
          <source>This error happens only in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the assignment is silently ignored.</source>
          <target state="translated">이 오류는 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드 코드&lt;/a&gt; 에서만 발생 합니다 . 엄격하지 않은 코드에서는 할당이 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="096835feb91d9ff6a57e922f78bbdd190711d6fd" translate="yes" xml:space="preserve">
          <source>This error happens only in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the operation returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 오류는 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드 코드&lt;/a&gt; 에서만 발생 합니다 . 엄격하지 않은 코드에서 작업은 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1a0e3ad44d95312052d97db9a3a1d9c7cc2d5f29" translate="yes" xml:space="preserve">
          <source>This error occurs as a warning in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt; only. In non-strict code, the redeclaration is silently ignored.</source>
          <target state="translated">이 오류는 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드 코드&lt;/a&gt; 에서만 경고로 발생합니다 . 엄격하지 않은 코드에서는 재 선언이 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="bbd89c12b15d7bbad4f26beb179fde8bbe893186" translate="yes" xml:space="preserve">
          <source>This error only happens in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode code&lt;/a&gt;. In non-strict code, the operation just returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 오류는 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드 코드&lt;/a&gt; 에서만 발생 합니다 . 엄격하지 않은 코드에서 작업은 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bb2f48d817f97074af67cc74fa3d8ccee5fee9f0" translate="yes" xml:space="preserve">
          <source>This even applies to functions and variables:</source>
          <target state="translated">이것은 함수와 변수에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="0418362082cc8bf02ccf057b5001fec07604aec0" translate="yes" xml:space="preserve">
          <source>This example counts backwards from the end of the string by &lt;code&gt;11&lt;/code&gt; to find the start index and forwards from the start of the string by &lt;code&gt;16&lt;/code&gt; to find the end index.</source>
          <target state="translated">이 예제는 시작 인덱스를 찾기 위해 문자열의 끝에서 &lt;code&gt;11&lt;/code&gt; 씩 역방향으로 계산 하고 끝 인덱스를 찾기 위해 문자열의 시작부터 &lt;code&gt;16&lt;/code&gt; 까지 앞으로 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="e0ad76db7e3ffc323f896f6c610ff40d7b05bede" translate="yes" xml:space="preserve">
          <source>This example defines a function that concatenates several strings. The function's only formal argument is a string containing the characters that separate the items to concatenate.</source>
          <target state="translated">이 예는 여러 문자열을 연결하는 함수를 정의합니다. 함수의 유일한 형식 인수는 연결할 항목을 구분하는 문자를 포함하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="90f25031bc45dce7cbb8e9209d0d66425c578957" translate="yes" xml:space="preserve">
          <source>This example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is &quot;&lt;code&gt;u&lt;/code&gt;&quot; if the list is to be &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;unordered (bulleted)&lt;/a&gt;, or &quot;&lt;code&gt;o&lt;/code&gt;&quot; if the list is to be &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ol&quot;&gt;ordered (numbered)&lt;/a&gt;. The function is defined as follows:</source>
          <target state="translated">이 예제는 목록에 대한 HTML을 포함하는 문자열을 생성하는 함수를 정의합니다. 함수에 대한 유일한 공식 인수 는 목록이 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;순서&lt;/a&gt; 가 지정되지 않은 경우 (글 머리 기호) &quot; &lt;code&gt;u&lt;/code&gt; &quot; 또는 &quot; &lt;code&gt;o&lt;/code&gt; &quot;인 문자열입니다.&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/ol&quot;&gt; (번호 매기기) 인&lt;/a&gt; 경우 &quot;인 . 함수는 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="73a7c3b2b05f6ed743c9e09f0bd5e66a60a75b6f" translate="yes" xml:space="preserve">
          <source>This example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is &quot;&lt;code&gt;u&lt;/code&gt;&quot; if the list is to be unordered (bulleted), or &quot;&lt;code&gt;o&lt;/code&gt;&quot; if the list is to be ordered (numbered). The function is defined as follows:</source>
          <target state="translated">이 예제는 목록에 대한 HTML을 포함하는 문자열을 작성하는 함수를 정의합니다. 함수에 대한 유일한 형식 인수는 &quot;문자열입니다 &lt;code&gt;u&lt;/code&gt; , 또는&quot;목록 (글 머리 기호) 순서가 될 것입니다 &quot;경우 &lt;code&gt;o&lt;/code&gt; 리스트가 순서화 될 경우 (번호)&quot;. 기능은 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="bf75ffc93a3f734d878ab27162b4c36ee16bc2c6" translate="yes" xml:space="preserve">
          <source>This example demonstrates how one can separate out Unicode characters from a word.</source>
          <target state="translated">이 예제는 유니 코드 문자를 단어에서 분리하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="871c98d30147b459568b64391ee95744afc6f560" translate="yes" xml:space="preserve">
          <source>This example demonstrates that &lt;code&gt;Baz.prototype&lt;/code&gt;, &lt;code&gt;Bar.prototype&lt;/code&gt;, &lt;code&gt;Foo.prototype&lt;/code&gt; and &lt;code&gt;Object.prototype&lt;/code&gt; exist in the prototype chain for object &lt;code&gt;baz&lt;/code&gt;:</source>
          <target state="translated">이 예제는 &lt;code&gt;Baz.prototype&lt;/code&gt; , &lt;code&gt;Bar.prototype&lt;/code&gt; , &lt;code&gt;Foo.prototype&lt;/code&gt; 및 &lt;code&gt;Object.prototype&lt;/code&gt; 이 오브젝트 &lt;code&gt;baz&lt;/code&gt; 의 프로토 타입 체인에 존재 함을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="5cfd66d3f85028f1818634da1d4c6321fd88e0c9" translate="yes" xml:space="preserve">
          <source>This example displays the following output (comments added for reference):</source>
          <target state="translated">이 예는 다음 출력을 표시합니다 (참조 용으로 추가 된 주석).</target>
        </trans-unit>
        <trans-unit id="47851f66673ccc14ec0754c46428b69ca2e0999f" translate="yes" xml:space="preserve">
          <source>This example displays the following output:</source>
          <target state="translated">이 예제는 다음 출력을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="1a2e7cbddcea7b49fd155d4d8b4a95f64e4d1074" translate="yes" xml:space="preserve">
          <source>This example extends the built-in &lt;a href=&quot;../global_objects/date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object. This example is extracted from this &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt;.</source>
          <target state="translated">이 예제는 내장 &lt;a href=&quot;../global_objects/date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 를 확장 합니다. 이 예제는이 &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;라이브 데모 &lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt; 에서 추출되었습니다 .</target>
        </trans-unit>
        <trans-unit id="09e17c7f0dca3ac4b5a7ef196f654212d4264e30" translate="yes" xml:space="preserve">
          <source>This example first creates an async iterable for a stream of data, then uses it to find the size of the response from the API.</source>
          <target state="translated">이 예제에서는 먼저 데이터 스트림에 대한 비동기 반복 가능을 만든 다음이를 사용하여 API에서 응답의 크기를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="3c0cb82830ca1098ba1b0b5512fa2c2036073c25" translate="yes" xml:space="preserve">
          <source>This example is started by clicking the button. (You need a browser that supports &lt;code&gt;Promise&lt;/code&gt;. )</source>
          <target state="translated">이 예제는 버튼을 클릭하여 시작됩니다. ( &lt;code&gt;Promise&lt;/code&gt; 를 지원하는 브라우저가 필요합니다. .)</target>
        </trans-unit>
        <trans-unit id="0bd856e759126f7feb000d22a885f2704c020494" translate="yes" xml:space="preserve">
          <source>This example is started by clicking the button. You need a browser that supports &lt;code&gt;Promise&lt;/code&gt;. By clicking the button several times in a short amount of time, you'll even see the different promises being fulfilled one after another.</source>
          <target state="translated">이 예제는 버튼을 클릭하여 시작됩니다. &lt;code&gt;Promise&lt;/code&gt; 를 지원하는 브라우저가 필요합니다 . 짧은 시간에 버튼을 여러 번 클릭하면 서로 다른 약속이 차례로 이행되는 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="506e976c52ce7c84b595b66adf2793ef1c3bea8d" translate="yes" xml:space="preserve">
          <source>This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다. 출력에서 알 수 있듯이 비교 함수를 사용하면 숫자가 숫자인지 문자열인지에 따라 숫자가 올바르게 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="b834c1665b1411c83b15a236780f0e6f998b2e68" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="dbe0fb62601b83dd6e280fe780efcb2b15db5715" translate="yes" xml:space="preserve">
          <source>This example returns a random &lt;em&gt;integer&lt;/em&gt; between the specified values. The value is no lower than &lt;code&gt;min&lt;/code&gt; (or the next integer greater than &lt;code&gt;min&lt;/code&gt; if &lt;code&gt;min&lt;/code&gt; isn't an integer), and is less than (but not equal to) &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">이 예는 지정된 값 사이의 임의의 &lt;em&gt;정수&lt;/em&gt; 를 반환 합니다. 값이보다 낮은없는 &lt;code&gt;min&lt;/code&gt; (혹은 다음보다 큰 정수 &lt;code&gt;min&lt;/code&gt; 경우 &lt;code&gt;min&lt;/code&gt; 정수가 아닌)와 (그러나 동일)보다 적은 &lt;code&gt;max&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ad9a85be409f64d9aef24ce2c3dbcb40ad199d5" translate="yes" xml:space="preserve">
          <source>This example returns a random number between the specified values. The returned value is no lower than (and may possibly equal) &lt;code&gt;min&lt;/code&gt;, and is less than (and not equal) &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="translated">이 예제는 지정된 값 사이의 난수를 반환합니다. 반환 값은 &lt;code&gt;min&lt;/code&gt; 보다 작거나 같을 수도 있고 &lt;code&gt;max&lt;/code&gt; 보다 작을 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cd6856f24749ae44c743869c3071898a38155b08" translate="yes" xml:space="preserve">
          <source>This example shows diverse techniques for using Promise capabilities and diverse situations that can occur. To understand this, start by scrolling to the bottom of the code block, and examine the promise chain. Upon provision of an initial promise, a chain of promises can follow. The chain is composed of &lt;code&gt;.then()&lt;/code&gt; calls, and typically (but not necessarily) has a single &lt;code&gt;.catch()&lt;/code&gt; at the end, optionally followed by &lt;code&gt;.finally()&lt;/code&gt;. In this example, the promise chain is initiated by a custom-written &lt;code&gt;new Promise()&lt;/code&gt; construct; but in actual practice, promise chains more typically start with an API function (written by someone else) that returns a promise.</source>
          <target state="translated">이 예는 Promise 기능을 사용하는 다양한 기술과 발생할 수있는 다양한 상황을 보여줍니다. 이를 이해하려면 코드 블록의 맨 아래로 스크롤하여 시작하고 promise 체인을 조사하십시오. 초기 약속이 제공되면 일련의 약속이 뒤따를 수 있습니다. 체인은 &lt;code&gt;.then()&lt;/code&gt; 호출 로 구성 되며 일반적으로 (반드시 그런 것은 아님) 끝에 단일 &lt;code&gt;.catch()&lt;/code&gt; 가 있고 선택적으로 &lt;code&gt;.finally()&lt;/code&gt; 뒤 따릅니다 . 이 예제에서 promise 체인은 사용자 정의 작성 &lt;code&gt;new Promise()&lt;/code&gt; 구성에 의해 시작됩니다 . 그러나 실제로 프로 미스 체인은 일반적으로 프라 미스를 반환하는 API 함수 (다른 사람이 작성한)로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="57f2c7b225c188a1add4b85e9a2cc4aff53e12d6" translate="yes" xml:space="preserve">
          <source>This example shows how to iterate through a collection of objects collected by &lt;code&gt;querySelectorAll&lt;/code&gt;. In this case we get all selected options on the screen and printed on the console:</source>
          <target state="translated">이 예제는 &lt;code&gt;querySelectorAll&lt;/code&gt; 에 의해 수집 된 오브젝트 콜렉션을 반복하는 방법을 보여줍니다 . 이 경우 화면에서 선택한 모든 옵션을 콘솔에 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="eed1860eb426bfdbc2f776b86d3192a5fc464c1c" translate="yes" xml:space="preserve">
          <source>This example shows how to iterate through a collection of objects collected by &lt;code&gt;querySelectorAll&lt;/code&gt;. This is because &lt;code&gt;querySelectorAll&lt;/code&gt; returns a &lt;code&gt;NodeList&lt;/code&gt; (which is a collection of objects).</source>
          <target state="translated">이 예에서는 &lt;code&gt;querySelectorAll&lt;/code&gt; 에서 수집 한 객체 컬렉션을 반복하는 방법을 보여줍니다 . 이는 &lt;code&gt;querySelectorAll&lt;/code&gt; 이 &lt;code&gt;NodeList&lt;/code&gt; 를 반환 하기 때문입니다. (객체 컬렉션)를 입니다.</target>
        </trans-unit>
        <trans-unit id="dd2e6ee40526a1d0465fe37ec3a7aeb12df0a955" translate="yes" xml:space="preserve">
          <source>This example shows how to load functionality on to a page based on a user action, in this case a button click, and then call a function within that module. This is not the only way to implement this functionality. The &lt;code&gt;import()&lt;/code&gt; function also supports &lt;code&gt;await&lt;/code&gt;.</source>
          <target state="translated">이 예제는 사용자 조치 (이 경우 단추 클릭)를 기반으로 페이지에 기능을로드 한 다음 해당 모듈 내에서 함수를 호출하는 방법을 보여줍니다. 이것이이 기능을 구현하는 유일한 방법은 아닙니다. &lt;code&gt;import()&lt;/code&gt; 함수는 지원 &lt;code&gt;await&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="5cda9459bc6fad44cf5002bc12a2fafdfe5f77e4" translate="yes" xml:space="preserve">
          <source>This example shows how to use map on a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; to get an array of bytes in the ASCII encoding representing the character values:</source>
          <target state="translated">이 예제는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 에서 map을 사용 하여 문자 값을 나타내는 ASCII 인코딩의 바이트 배열을 얻는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="c6010b9290e4cac16f9239768f4269d093761d15" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; argument:</source>
          <target state="translated">이 예는 현지화 된 날짜 및 시간 형식의 몇 가지 변형을 보여줍니다. 애플리케이션의 사용자 인터페이스에서 사용되는 언어의 형식을 얻으려면 &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; 인수를 사용하여 해당 언어 (및 일부 대체 언어)를 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="590cefd23d1edd4dd188f61dcd919f75b1c64a1c" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">이 예는 현지화 된 날짜 및 시간 형식의 일부 변형을 보여줍니다. 응용 프로그램의 사용자 인터페이스에서 사용되는 언어 형식을 얻으려면 &lt;code&gt;locales&lt;/code&gt; 인수를 사용하여 해당 언어 (및 일부 대체 언어)를 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="43a7a6d067d8754510839a686064cf456dccd946" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized date formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">이 예는 현지화 된 날짜 형식의 일부 변형을 보여줍니다. 응용 프로그램의 사용자 인터페이스에서 사용되는 언어 형식을 얻으려면 &lt;code&gt;locales&lt;/code&gt; 인수를 사용하여 해당 언어 (및 일부 대체 언어)를 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="325cec468238da657537fbdc631c44daba6ab6b9" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">이 예는 현지화 된 숫자 형식의 일부 변형을 보여줍니다. 응용 프로그램의 사용자 인터페이스에서 사용되는 언어 형식을 얻으려면 &lt;code&gt;locales&lt;/code&gt; 인수를 사용하여 해당 언어 (및 일부 대체 언어)를 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d8b708372e6c816d7911558aa144dff0a2b1fb0d" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized plural rules. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">이 예는 현지화 된 복수 규칙의 일부 변형을 보여줍니다. 응용 프로그램의 사용자 인터페이스에서 사용되는 언어 형식을 얻으려면 &lt;code&gt;locales&lt;/code&gt; 인수를 사용하여 해당 언어 (및 일부 대체 언어)를 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="630dd3659d7f6ea887e3de3f43ca34b30710ff4d" translate="yes" xml:space="preserve">
          <source>This example shows some of the variations in localized time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the &lt;code&gt;locales&lt;/code&gt; argument:</source>
          <target state="translated">이 예는 현지화 된 시간 형식의 일부 변형을 보여줍니다. 응용 프로그램의 사용자 인터페이스에서 사용되는 언어 형식을 얻으려면 &lt;code&gt;locales&lt;/code&gt; 인수를 사용하여 해당 언어 (및 일부 대체 언어)를 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4a4a4676f6326fd0a096aa3c44f833d606d3cea8" translate="yes" xml:space="preserve">
          <source>This example shows that we're creating and accessing the table from JavaScript, but the same table is visible and callable inside the wasm instance too.</source>
          <target state="translated">이 예제는 JavaScript에서 테이블을 작성하고 액세스하고 있지만 wasm 인스턴스 내에서도 동일한 테이블을보고 호출 할 수 있음을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d1fcd9a201cc02314fd2430857eef298620fd20d" translate="yes" xml:space="preserve">
          <source>This example throws a &lt;code&gt;SyntaxError&lt;/code&gt;:</source>
          <target state="translated">이 예제는 &lt;code&gt;SyntaxError&lt;/code&gt; 를 발생시킵니다 :</target>
        </trans-unit>
        <trans-unit id="ede9db60430dbac72f66f4b56bcb70a97ac80f5e" translate="yes" xml:space="preserve">
          <source>This example uses &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; to push all elements from a second array.</source>
          <target state="translated">이 예제는 &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 두 번째 배열에서 모든 요소를 ​​푸시합니다.</target>
        </trans-unit>
        <trans-unit id="1dbdf5d54bd7ed988a153277a1893e923a88c1d4" translate="yes" xml:space="preserve">
          <source>This example will output the error &lt;code&gt;Uncaught SyntaxError: Identifier 'message' has already been declared&lt;/code&gt; which you were not probably expecting.</source>
          <target state="translated">이 예제는 &lt;code&gt;Uncaught SyntaxError: Identifier 'message' has already been declared&lt;/code&gt; 예상하지 못한 오류를 출력합니다 .</target>
        </trans-unit>
        <trans-unit id="11b1e0cb1465747928aea91ff0e45f56160857bb" translate="yes" xml:space="preserve">
          <source>This feature is deprecated in favor of defining getters using the &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer syntax&lt;/a&gt; or the &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; API. While this feature is widely implemented, it is only described in the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-additional-ecmascript-features-for-web-browsers&quot;&gt;ECMAScript specification&lt;/a&gt; because of legacy usage. This method should not be used since better alternatives exist.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;../../operators/object_initializer&quot;&gt;객체 이니셜 라이저 구문&lt;/a&gt; 또는 &lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; API를 사용하여 게터를 정의하기 위해 사용되지 않습니다 . 이 기능은 널리 구현되어 있지만 레거시 사용으로 인해 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-additional-ecmascript-features-for-web-browsers&quot;&gt;ECMAScript 사양&lt;/a&gt; 에만 설명되어 있습니다. 더 나은 대안이 존재하므로이 방법을 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="86411ba63951d765641d545f8df4bcf74c901436" translate="yes" xml:space="preserve">
          <source>This feature is deprecated in favor of defining setters using the &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer syntax&lt;/a&gt; or the &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;../../operators/object_initializer&quot;&gt;객체 이니셜 라이저 구문&lt;/a&gt; 또는 &lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; API를 사용하여 세터를 정의하기 위해 사용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="17fdac85d6009334c365dfdd6eb6bef5e4374b26" translate="yes" xml:space="preserve">
          <source>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the &lt;a href=&quot;#Browser_compatibility&quot;&gt;compatibility table&lt;/a&gt; at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</source>
          <target state="translated">이 기능은 더 이상 권장되지 않습니다. 일부 브라우저는 여전히이 브라우저를 지원할 수 있지만 관련 웹 표준에서 이미 제거되었거나 삭제 중이거나 호환성을 위해서만 유지 될 수 있습니다. 사용하지 말고 가능한 경우 기존 코드를 업데이트하십시오. 결정을 안내하려면이 페이지 하단의 &lt;a href=&quot;#Browser_compatibility&quot;&gt;호환성 표&lt;/a&gt; 를 참조하십시오 . 이 기능은 언제든지 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad63cac1625affd2a84d66756a720def351fb2b3" translate="yes" xml:space="preserve">
          <source>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</source>
          <target state="translated">이 기능은 비표준이며 표준 트랙이 아닙니다. 웹이있는 프로덕션 사이트에서는 사용하지 마십시오. 모든 사용자에게 적용되는 것은 아닙니다. 구현 간에는 큰 비 호환성이있을 수 있으며 향후 동작이 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59314e7aec66910164f6914bdc2ab1c6bad7e1f6" translate="yes" xml:space="preserve">
          <source>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</source>
          <target state="translated">이 기능은 더 이상 사용되지 않습니다. 일부 브라우저에서는 여전히 작동하지만 언제든지 제거 할 수 있으므로 사용하지 않는 것이 좋습니다. 사용을 피하십시오.</target>
        </trans-unit>
        <trans-unit id="9332d8bd72a7b666b3413523cb1369cd245eb1c2" translate="yes" xml:space="preserve">
          <source>This field does not exist in old browsers. Using it without checking its existence, such as &lt;code&gt;Math.max(Number.MAX_SAFE_INTEGER, 2)&lt;/code&gt;, will yield undesired results such as NaN.</source>
          <target state="translated">이 필드는 이전 브라우저에 없습니다. &lt;code&gt;Math.max(Number.MAX_SAFE_INTEGER, 2)&lt;/code&gt; 와 같이 존재 여부를 확인하지 않고 사용 NaN과 같은 원하지 않는 결과가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="46be1def72425868eca09f0760411eb2dd9baccb" translate="yes" xml:space="preserve">
          <source>This finds the min of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; and assigns it to &lt;code&gt;z&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 의 최소값을 찾아 &lt;code&gt;z&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="4b107bfe566d2f9992ca9dc28cf2aca5b2af5d50" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity (or synchronicity, if the &lt;var&gt;iterable&lt;/var&gt; passed is empty) of &lt;code&gt;Promise.all&lt;/code&gt;:</source>
          <target state="translated">다음 예제 는 &lt;code&gt;Promise.all&lt;/code&gt; 의 비동기 성 (또는 &lt;var&gt;iterable&lt;/var&gt; 이 비어있는 경우 동기 성 )을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="48475607d930124ebfc60f7a61a8c364116689e8" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity of &lt;code&gt;Promise.race:&lt;/code&gt;</source>
          <target state="translated">이 예제는 &lt;code&gt;Promise.race:&lt;/code&gt; 의 비동기 성을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="bbe307e833b2a5b11c90c84540468877e39c9e08" translate="yes" xml:space="preserve">
          <source>This following example demonstrates the asynchronicity of &lt;code&gt;Promise.race&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;Promise.race&lt;/code&gt; 의 비동기 성을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9d108093f87ed6fc8998f994e0fbf28bc1f87721" translate="yes" xml:space="preserve">
          <source>This form also supports the &lt;code&gt;await&lt;/code&gt; keyword.</source>
          <target state="translated">이 양식은 &lt;code&gt;await&lt;/code&gt; 키워드 도 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="790804d0887e21fb95e200e492b9af4cd6eecb43" translate="yes" xml:space="preserve">
          <source>This form also supports the await keyword.</source>
          <target state="translated">이 양식은 또한 await 키워드를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c6167b8589c3c1fe2493bf4052b5f23a49bc97a8" translate="yes" xml:space="preserve">
          <source>This function can be an ordinary function, or it can be a generator function, so that when invoked, an iterator object is returned. Inside of this generator function, each entry can be provided by using &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">이 함수는 일반 함수이거나 생성기 함수일 수 있으므로 호출시 반복기 객체가 반환됩니다. 이 생성기 함수 내에서 &lt;code&gt;yield&lt;/code&gt; 를 사용하여 각 항목을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f54b605c0dd86aec12c2d22119452c0b0adc8f5a" translate="yes" xml:space="preserve">
          <source>This function has 5 kinds of return values, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, which represent &quot;positive number&quot;, &quot;negative number&quot;, &quot;positive zero&quot;, &quot;negative zero&quot; and &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; respectively.</source>
          <target state="translated">이 함수에는 5 개의 반환 값인 &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;-1&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;-0&lt;/code&gt; , &lt;code&gt;NaN&lt;/code&gt; 이 있으며 각각 &quot;양수&quot;, &quot;음수&quot;, &quot;양수 0&quot;, &quot;음수 0&quot;및 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을&lt;/a&gt; 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4c64e07cb40ec02a6c4db2b3c13d9073478870a2" translate="yes" xml:space="preserve">
          <source>This function is also used to identify if objects have the behavior of regular expressions. For example, the methods &lt;a href=&quot;../string/startswith&quot;&gt;&lt;code&gt;String.prototype.startsWith()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string/endswith&quot;&gt;&lt;code&gt;String.prototype.endsWith()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/includes&quot;&gt;&lt;code&gt;String.prototype.includes()&lt;/code&gt;&lt;/a&gt;, check if their first argument is a regular expression and will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are. Now, if the &lt;code&gt;match&lt;/code&gt; symbol is set to &lt;code&gt;false&lt;/code&gt; (or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; value), it indicates that the object is not intended to be used as a regular expression object.</source>
          <target state="translated">이 함수는 객체에 정규 표현식의 동작이 있는지 식별하는 데에도 사용됩니다. 예를 들어, &lt;a href=&quot;../string/startswith&quot;&gt; &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../string/endswith&quot;&gt; &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/includes&quot;&gt; &lt;code&gt;String.prototype.includes()&lt;/code&gt; &lt;/a&gt; 메소드 는 첫 번째 인수가 정규식인지 확인한 후 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다. 이제 &lt;code&gt;match&lt;/code&gt; 기호가 &lt;code&gt;false&lt;/code&gt; (또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; 값) 로 설정 되면 개체가 정규식 개체로 사용되지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="51d34802e89b2dc0913e112fe99752a9146cac73" translate="yes" xml:space="preserve">
          <source>This function is also used to identify if objects have the behavior of regular expressions. For example, the methods &lt;a href=&quot;../string/startswith&quot;&gt;&lt;code&gt;String.prototype.startsWith()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string/endswith&quot;&gt;&lt;code&gt;String.prototype.endsWith()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../string/includes&quot;&gt;&lt;code&gt;String.prototype.includes()&lt;/code&gt;&lt;/a&gt;, check if their first argument is a regular expression and will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are. Now, if the &lt;code&gt;match&lt;/code&gt; symbol is set to &lt;code&gt;false&lt;/code&gt; (or a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; value), it indicates that the object is not intended to be used as a regular expression object.</source>
          <target state="translated">이 함수는 객체가 정규 표현식의 동작을 가지고 있는지 식별하는데도 사용됩니다. 예를 들어 &lt;a href=&quot;../string/startswith&quot;&gt; &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../string/endswith&quot;&gt; &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../string/includes&quot;&gt; &lt;code&gt;String.prototype.includes()&lt;/code&gt; &lt;/a&gt; 메서드 는 첫 번째 인수가 정규 표현식 인지 확인하고있는 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다. 이제 &lt;code&gt;match&lt;/code&gt; 기호가 &lt;code&gt;false&lt;/code&gt; (또는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy&lt;/a&gt; 값) 경우 개체가 정규식 개체로 사용되지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d9492f9fdf29859365cab477b4f5efad02b714ac" translate="yes" xml:space="preserve">
          <source>This function is part of the ECMAScript 2015 standard.</source>
          <target state="translated">이 기능은 ECMAScript 2015 표준의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="04e100fbaed23fb495fcdbbace27beaf29c58f01" translate="yes" xml:space="preserve">
          <source>This function is part of the ECMAScript 2015 standard. For more information see &lt;a href=&quot;https://gist.github.com/rwaldron/1074126&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt; and &lt;code&gt;Array.from&lt;/code&gt; proposal&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/rwaldron/3186576&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt; polyfill&lt;/a&gt;.</source>
          <target state="translated">이 기능은 ECMAScript 2015 표준의 일부입니다. 자세한 내용은 &lt;a href=&quot;https://gist.github.com/rwaldron/1074126&quot;&gt;제안서&lt;/a&gt; 및 &lt;a href=&quot;https://gist.github.com/rwaldron/3186576&quot;&gt; &lt;code&gt;Array.of&lt;/code&gt; &lt;/a&gt; polyfill의 &lt;code&gt;Array.of&lt;/code&gt; 및 &lt;code&gt;Array.from&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb60a4fbe159ca3a19c77f3d546c7dc7e3000fb0" translate="yes" xml:space="preserve">
          <source>This function is particularly useful for systems that compile to JS, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt; 과 같이 JS로 컴파일되는 시스템에 특히 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="8e06d06bd6d58f9afc5d4f430f376fd7ba568d8c" translate="yes" xml:space="preserve">
          <source>This function is particularly useful for systems that compile to JS, like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Emscripten&quot;&gt;Emscripten&lt;/a&gt; 과 같이 JS로 컴파일되는 시스템에 특히 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="66989f0dc7f4e0c3124cfbe7ba078b8f38a9390b" translate="yes" xml:space="preserve">
          <source>This function is provided to give objects a generic &lt;code&gt;toLocaleString&lt;/code&gt; method, even though not all may use it. See the list below.</source>
          <target state="translated">이 함수는 모든 객체를 사용할 수는 없지만 객체에 일반 &lt;code&gt;toLocaleString&lt;/code&gt; 메서드를 제공하기 위해 제공됩니다 . 아래 목록을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3bb0b38afd0b129339285d21c0385c86e345c176" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of Math.log(x) / Math.log(10). For log10(e) use the constant &lt;a href=&quot;log10e&quot;&gt;&lt;code&gt;Math.LOG10E&lt;/code&gt;&lt;/a&gt; which is 1 / &lt;a href=&quot;ln10&quot;&gt;&lt;code&gt;Math.LN10&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 Math.log (x) / Math.log (10)와 동일합니다. log10 (e)의 경우 상수 &lt;a href=&quot;log10e&quot;&gt; &lt;code&gt;Math.LOG10E&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 ( 1 / &lt;a href=&quot;ln10&quot;&gt; &lt;code&gt;Math.LN10&lt;/code&gt; )&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ddc1e6c850ddfa49ea34bff3fb25ca39ff5834dd" translate="yes" xml:space="preserve">
          <source>This function is the equivalent of Math.log(x) / Math.log(2). For log2(e) use the constant &lt;a href=&quot;log2e&quot;&gt;&lt;code&gt;Math.LOG2E&lt;/code&gt;&lt;/a&gt; which is 1 / &lt;a href=&quot;ln2&quot;&gt;&lt;code&gt;Math.LN2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 Math.log (x) / Math.log (2)와 동일합니다. LOG2 (E)에 대한 상수 사용 &lt;a href=&quot;log2e&quot;&gt; &lt;code&gt;Math.LOG2E&lt;/code&gt; &lt;/a&gt; 1 / IS &lt;a href=&quot;ln2&quot;&gt; &lt;code&gt;Math.LN2&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1dcdabb5b09f90d23d75a1602712d7f2e2cce4cc" translate="yes" xml:space="preserve">
          <source>This function is useful for setting date values based on string values, for example in conjunction with the &lt;a href=&quot;settime&quot;&gt;&lt;code&gt;setTime()&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">이 함수는 문자열 값을 기반으로 날짜 값을 설정하는 데 유용합니다. 예를 들어 &lt;a href=&quot;settime&quot;&gt; &lt;code&gt;setTime()&lt;/code&gt; &lt;/a&gt; 메서드 및 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 .</target>
        </trans-unit>
        <trans-unit id="8c2c9ac3b5f94f2cd80fd4dd8e672996cc3413a8" translate="yes" xml:space="preserve">
          <source>This function makes it a little easier and faster, you just call &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; , or &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; .</source>
          <target state="translated">이 함수는 좀 더 쉽고 빠릅니다. &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; 또는 &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; 만 호출하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="8d202b859680f485def6942c8ce2f1d29b582052" translate="yes" xml:space="preserve">
          <source>This function makes this calculation easier and faster; you simply call &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; , or &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt;.</source>
          <target state="translated">이 함수는이 계산을 더 쉽고 빠르게 만듭니다. &lt;code&gt;Math.hypot(v1, v2)&lt;/code&gt; 또는 &lt;code&gt;Math.hypot(v1, v2, v3, v4, ...)&lt;/code&gt; 를 호출하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="ae5c15791167b2f0e30cb3ce7631e52ffb33d946" translate="yes" xml:space="preserve">
          <source>This function selects a plural rule according to the locale and formatting options of a &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;PluralRules&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;PluralRules&lt;/code&gt; &lt;/a&gt; 객체 의 로캘 및 서식 옵션에 따라 복수 규칙을 선택 합니다.</target>
        </trans-unit>
        <trans-unit id="9292582dc2047a763c27a857f57223d2a2a2d860" translate="yes" xml:space="preserve">
          <source>This functionality can be approximated like this, which demonstrates how many edge cases are handled:</source>
          <target state="translated">이 기능은 다음과 같이 근사 될 수 있으며 처리되는 엣지 케이스 수를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e0d53ad502bbff0c0ab0cffb0ee72a35b804eed2" translate="yes" xml:space="preserve">
          <source>This has numerous benefits:</source>
          <target state="translated">이것은 많은 이점이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="0f88dbb0ebed51dd25eeac1290a329de8471f3a5" translate="yes" xml:space="preserve">
          <source>This helps to avoid duplicating code in both the promise's &lt;a href=&quot;then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;catch()&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">이렇게하면 promise의 &lt;a href=&quot;then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;catch&quot;&gt; &lt;code&gt;catch()&lt;/code&gt; &lt;/a&gt; 핸들러 에서 코드가 중복되는 것을 방지 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="40db1baaae21d697ce344817f85d6c1d56cdb99c" translate="yes" xml:space="preserve">
          <source>This highlights the subtle difference between &lt;code&gt;return foo;&lt;/code&gt; and &lt;code&gt;return await foo;&lt;/code&gt; &amp;mdash; &lt;code&gt;return foo&lt;/code&gt; immediately returns &lt;code&gt;foo&lt;/code&gt; and never throws, even if &lt;code&gt;foo&lt;/code&gt; is a Promise that rejects. &lt;code&gt;return await foo&lt;/code&gt; will &lt;em&gt;wait &lt;/em&gt;for &lt;code&gt;foo&lt;/code&gt; to resolve or reject if it's a Promise, and throws &lt;strong&gt;before returning&lt;/strong&gt; if it rejects.</source>
          <target state="translated">이것은 &lt;code&gt;return foo;&lt;/code&gt; 사이의 미묘한 차이를 강조합니다 . 그리고 &lt;code&gt;return await foo;&lt;/code&gt; - &lt;code&gt;return foo&lt;/code&gt; 즉시 반환 &lt;code&gt;foo&lt;/code&gt; 는 경우에도, 그리고 발생하지 &lt;code&gt;foo&lt;/code&gt; 거부하는 약속이다. &lt;code&gt;return await foo&lt;/code&gt; 됩니다 &lt;em&gt;기다릴&lt;/em&gt; 위해 &lt;code&gt;foo&lt;/code&gt; 를 해결하려면하거나 약속, 그리고 발생하는 경우 거부 &lt;strong&gt;반환하기 전에&lt;/strong&gt; 그것을 거부 할 경우.</target>
        </trans-unit>
        <trans-unit id="7dd453db4261d3e809715390b84eb4575dacb268" translate="yes" xml:space="preserve">
          <source>This inserts &lt;code&gt;myModule&lt;/code&gt; into the current scope, containing all the exports from the module in the file located in &lt;code&gt;/modules/my-module.js&lt;/code&gt;.</source>
          <target state="translated">이 인서트 &lt;code&gt;myModule&lt;/code&gt; 에있는 파일의 모듈에서 모든 수출 포함, 현재 범위에 &lt;code&gt;/modules/my-module.js&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="0aa48f38d5f447ed23921a93c4502d7fcac1a7e0" translate="yes" xml:space="preserve">
          <source>This inserts both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; into the current scope.</source>
          <target state="translated">이렇게하면 &lt;code&gt;foo&lt;/code&gt; 와 &lt;code&gt;bar&lt;/code&gt; 가 모두 현재 범위에 삽입 됩니다.</target>
        </trans-unit>
        <trans-unit id="a98d1a980f5c0a36ea503bbe11383206d1a0e32f" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;../../operators/comparison_operators#Equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;==&lt;/code&gt; operator applies various coercions to both sides (if they are not the same Type) before testing for equality (resulting in such behavior as &lt;code&gt;&quot;&quot; == false&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;), but &lt;code&gt;Object.is&lt;/code&gt; doesn't coerce either value.</source>
          <target state="translated">이다 &lt;em&gt;하지&lt;/em&gt; 받는있어서 동일하고 동일한 &lt;a href=&quot;../../operators/comparison_operators#Equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; 의&lt;/a&gt; 오퍼레이터. &lt;code&gt;==&lt;/code&gt; 의 (같은 행동의 결과 어떤지를 테스트하기 전에 (그들은 같은 형식이 아닌 경우) 연산자 양쪽에 다양한 강제 변환을 적용 &lt;code&gt;&quot;&quot; == false&lt;/code&gt; 되는 &lt;code&gt;true&lt;/code&gt; )하지만 &lt;code&gt;Object.is&lt;/code&gt; 는 두 값을 강요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="008f43d7b675b2decf01f251a65f2abc148b65b1" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;==&lt;/code&gt; operator applies various coercions to both sides (if they are not the same Type) before testing for equality (resulting in such behavior as &lt;code&gt;&quot;&quot; == false&lt;/code&gt; being &lt;code&gt;true&lt;/code&gt;), but &lt;code&gt;Object.is&lt;/code&gt; doesn't coerce either value.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Equality&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt; 연산자 에 따른 것과 같지 &lt;em&gt;않습니다&lt;/em&gt; . &lt;code&gt;==&lt;/code&gt; 의 (같은 행동의 결과 어떤지를 테스트하기 전에 (그들은 같은 형식이 아닌 경우) 연산자 양쪽에 다양한 강제 변환을 적용 &lt;code&gt;&quot;&quot; == false&lt;/code&gt; 되는 &lt;code&gt;true&lt;/code&gt; )하지만 &lt;code&gt;Object.is&lt;/code&gt; 는 두 값을 강요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="de74b347a723e07f2adc3e7d2325f165a647b429" translate="yes" xml:space="preserve">
          <source>This is a JavaScript wrapper object &amp;mdash; an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</source>
          <target state="translated">이것은 JavaScript 래퍼 객체입니다. 함수 참조를 저장하는 WebAssembly 테이블을 나타내는 배열과 유사한 구조입니다. JavaScript 또는 WebAssembly 코드로 작성된 테이블은 JavaScript 및 WebAssembly 둘 다에서 액세스하고 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="071df58adc32e3304b9300ca79770a087ffcd66c" translate="yes" xml:space="preserve">
          <source>This is also &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;../../operators/comparison_operators#Identity&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;===&lt;/code&gt; operator (and the &lt;code&gt;==&lt;/code&gt; operator as well) treats the number values &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; as equal and treats &lt;a href=&quot;../number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt; as not equal to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../operators/comparison_operators#Identity&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt; 연산자 에 따라 동일 &lt;em&gt;하지도 않습니다&lt;/em&gt; . &lt;code&gt;===&lt;/code&gt; 연산자 (상기 &lt;code&gt;==&lt;/code&gt; 아니라 오퍼레이터) 취급 숫자 값 &lt;code&gt;-0&lt;/code&gt; 과 &lt;code&gt;+0&lt;/code&gt; 같고 취급 등 &lt;a href=&quot;../number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt; 하지 같 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d2ec8d8345b64e733264037034d8ce25643de09" translate="yes" xml:space="preserve">
          <source>This is also &lt;em&gt;not&lt;/em&gt; the same as being equal according to the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator. The &lt;code&gt;===&lt;/code&gt; operator (and the &lt;code&gt;==&lt;/code&gt; operator as well) treats the number values &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; as equal and treats &lt;a href=&quot;../number/nan&quot;&gt;&lt;code&gt;Number.NaN&lt;/code&gt;&lt;/a&gt; as not equal to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt; 연산자 에 따른 것과 같지 &lt;em&gt;않습니다&lt;/em&gt; . &lt;code&gt;===&lt;/code&gt; 연산자 (상기 &lt;code&gt;==&lt;/code&gt; 아니라 오퍼레이터) 취급 숫자 값 &lt;code&gt;-0&lt;/code&gt; 과 &lt;code&gt;+0&lt;/code&gt; 같고 취급 등 &lt;a href=&quot;../number/nan&quot;&gt; &lt;code&gt;Number.NaN&lt;/code&gt; &lt;/a&gt; 하지 같 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a4b4c6648b0b4bb0e1933cfc63ddbb24f3498f86" translate="yes" xml:space="preserve">
          <source>This is an example of a multiple-operation sequential &lt;code&gt;case&lt;/code&gt; clause, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the &lt;code&gt;case&lt;/code&gt; clauses, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these &lt;code&gt;case&lt;/code&gt; statements as well.</source>
          <target state="translated">이는 제공된 정수에 따라 다른 출력을 수신 할 수 있는 다중 연산 순차 &lt;code&gt;case&lt;/code&gt; 절의 예입니다 . 이것은 &lt;code&gt;case&lt;/code&gt; 절 을 넣은 순서대로 순회한다는 것을 보여 주며 숫자 적으로 순차적 일 필요는 없습니다. JavaScript에서는 문자열 정의를 이러한 &lt;code&gt;case&lt;/code&gt; 문에 혼합 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="676fc2cf28b2cedb333e788eb070025ce27886f2" translate="yes" xml:space="preserve">
          <source>This is an example of a multiple-operation sequential switch statement, where, depending on the provided integer, you can receive different output. This shows you that it will traverse in the order that you put the case statements, and it does not have to be numerically sequential. In JavaScript, you can even mix in definitions of strings into these case statements as well.</source>
          <target state="translated">제공된 다중 정수에 따라 다른 출력을 수신 할 수있는 다중 조작 순차 스위치 명령문의 예입니다. 이는 사례 진술서에 따라 순서대로 순회하며 숫자 순으로 표시 될 필요가 없음을 나타냅니다. JavaScript에서는 문자열 정의를 이러한 case 문에 혼합하여 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b85fbba149f890d7e27c8cd91c2eededf5f628c6" translate="yes" xml:space="preserve">
          <source>This is an example of a single operation sequential &lt;code&gt;case&lt;/code&gt; statement, where four different values perform exactly the same.</source>
          <target state="translated">이것은 4 개의 다른 값이 정확히 동일하게 수행 하는 단일 연산 순차 &lt;code&gt;case&lt;/code&gt; 문의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="e8b3ee4757c675a8fed64b62d3c878f601fe81d6" translate="yes" xml:space="preserve">
          <source>This is an example of a single operation sequential switch statement, where four different values perform exactly the same.</source>
          <target state="translated">다음은 4 개의 다른 값이 정확히 동일한 단일 작업 순차 스위치 문의 예입니다.</target>
        </trans-unit>
        <trans-unit id="1c90ab2742a000b45036ef92b7dd0f8e48fa10e9" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; would be evaluated first as a string literal (resulting in the same &lt;code&gt;'$&amp;amp;'&lt;/code&gt;) before using the characters as a pattern.</source>
          <target state="translated">이는 문자를 패턴으로 사용하기 전에 &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; 가 먼저 문자열 리터럴 (같은 &lt;code&gt;'$&amp;amp;'&lt;/code&gt; )로 평가되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="fe6eaa3e73a5755d718a7471f3f60b32c355e48d" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; would first be evaluated as a string literal (resulting in the same &lt;code&gt;'$&amp;amp;'&lt;/code&gt;) before using the characters as a pattern.</source>
          <target state="translated">이는 문자를 패턴으로 사용하기 전에 &lt;code&gt;'$&amp;amp;'.toLowerCase()&lt;/code&gt; 가 먼저 문자열 리터럴 (동일한 &lt;code&gt;'$&amp;amp;'&lt;/code&gt; )로 평가되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="208ce14e060f11ae59221dc400e278091b2f8708" translate="yes" xml:space="preserve">
          <source>This is because the code inside braces ({}) is parsed as a sequence of statements (i.e. &lt;code&gt;foo&lt;/code&gt; is treated like a label, not a key in an object literal).</source>
          <target state="translated">이는 중괄호 ({}) 안의 코드가 일련의 명령문으로 구문 분석되기 때문입니다 (즉, &lt;code&gt;foo&lt;/code&gt; 는 오브젝트 리터럴의 키가 아닌 레이블처럼 취급됩니다).</target>
        </trans-unit>
        <trans-unit id="46a64a221d74a1f7969a48b07f5d469a42d407a7" translate="yes" xml:space="preserve">
          <source>This is because the first &lt;code&gt;let message = 'hello';&lt;/code&gt; conflicts with second let statement &lt;code&gt;let message = 'hi';&lt;/code&gt; even they're within their own separate case clauses &lt;code&gt;case 'say_hello':&lt;/code&gt; and &lt;code&gt;case 'say_hi':&lt;/code&gt;. Ultimately, this is due to both &lt;code&gt;let&lt;/code&gt; statements being interpreted as duplicate declarations of the same variable name within the same block scope.</source>
          <target state="translated">이것은 첫 번째 &lt;code&gt;let message = 'hello';&lt;/code&gt; 이기 때문입니다 . 두 번째 let 문과 충돌 &lt;code&gt;let message = 'hi';&lt;/code&gt; &lt;code&gt;case 'say_hello':&lt;/code&gt; 및 &lt;code&gt;case 'say_hi':&lt;/code&gt; 별도의 case 절에있는 경우 에도 마찬가지 입니다. 궁극적으로 이는 두 &lt;code&gt;let&lt;/code&gt; 문이 동일한 블록 범위 내에서 동일한 변수 이름의 중복 선언으로 해석되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="322e18c06f0cd5355bd782d8e430f33df48d0a05" translate="yes" xml:space="preserve">
          <source>This is because the limit (and indeed, even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. To illustrate this latter case: if such an engine had a limit of four arguments (actual limits are of course significantly higher), it would be as if the arguments &lt;code&gt;5, 6, 2, 3&lt;/code&gt; had been passed to &lt;code&gt;apply&lt;/code&gt; in the examples above, rather than the full array.</source>
          <target state="translated">이는 제한 (실제로는 과도하게 큰 스택 동작의 특성조차도)이 지정되지 않았기 때문입니다. 일부 엔진은 예외를 발생시킵니다. 더 위험한 것은 다른 사람들이 실제로 적용된 함수에 전달되는 인수의 수를 임의로 제한한다는 것입니다. 후자의 경우를 설명하기 위해 이러한 엔진에 4 개의 인수 제한이있는 경우 (물론 실제 제한은 훨씬 더 높음) 위의 예 에 &lt;code&gt;apply&lt;/code&gt; 하기 위해 인수 &lt;code&gt;5, 6, 2, 3&lt;/code&gt; 이 전달 된 것처럼 보입니다. 전체 배열보다는.</target>
        </trans-unit>
        <trans-unit id="14d3998758b1b2576489bfb42056c3c30e470107" translate="yes" xml:space="preserve">
          <source>This is deprecated as a property of &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;. Use the &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; object (available within the function) instead.</source>
          <target state="translated">이것은 &lt;a href=&quot;function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 의 속성으로 더 이상 사용되지 않습니다 . 사용 &lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; (함수 내에서 사용할 수있는) 객체 대신합니다.</target>
        </trans-unit>
        <trans-unit id="c252eae447e9cf5663be46226b163ee6e10465a8" translate="yes" xml:space="preserve">
          <source>This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a generator function expression.</source>
          <target state="translated">이것은 생성기 함수 표현식에 대해 코드와 함께 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 을 사용하는 것과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="073922126be7ad02a2ecb08bcaeb9932e3bf72c5" translate="yes" xml:space="preserve">
          <source>This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for an async function expression.</source>
          <target state="translated">이것은 비동기 함수 표현식에 대해 코드와 함께 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 을 사용하는 것과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="413187aaa333089aed8b057a0bcd81eca7f1c4c4" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; operation:</source>
          <target state="translated">이것은 다음 &lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 작업과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9c3a3de3442fecc3f0f59b51415d77d1af0ed66e" translate="yes" xml:space="preserve">
          <source>This is especially important for certain array subclasses, like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed arrays&lt;/a&gt;, since the intermediate array would necessarily have values truncated to fit into the appropriate type.</source>
          <target state="translated">이는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;유형 배열&lt;/a&gt; 과 같은 특정 배열 하위 클래스에 특히 중요 합니다. 중간 배열에는 적절한 유형에 맞게 잘린 값이 반드시 있어야하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="b314f830b2a93a472d6d90bf7bb7cc23bf075e6b" translate="yes" xml:space="preserve">
          <source>This is explained further on the &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;Array.length&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;Array.length&lt;/code&gt; &lt;/a&gt; 페이지 에서 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="a663719672c7bbbc98766394f1d89b793f57ceb5" translate="yes" xml:space="preserve">
          <source>This is just a simple anonymous class expression which you can refer to using the variable &quot;Foo&quot;.</source>
          <target state="translated">변수 &quot;Foo&quot;를 사용하여 참조 할 수있는 단순한 익명 클래스 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="eb13e45389aa5a141c169430057cb9ed714f79ce" translate="yes" xml:space="preserve">
          <source>This is just a simple anonymous class expression which you can refer to using the variable &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;Foo&lt;/code&gt; 변수를 사용하여 참조 할 수있는 단순한 익명의 클래스 표현식입니다 .</target>
        </trans-unit>
        <trans-unit id="1b13cac8cafe5eeceac27b3bac59e70b2f7171b9" translate="yes" xml:space="preserve">
          <source>This is no longer the case in ECMAScript 2015 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="translated">ECMAScript 2015 ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;버그 1041128&lt;/a&gt; ) 에서는 더 이상 해당되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="cf188543175f13d490410725532bec6c37e058eb" translate="yes" xml:space="preserve">
          <source>This is not a complete polyfill, since it returns an instance of Array, and not Uint8Array, so it lacks properties that would normally exist on TypedArrays.</source>
          <target state="translated">Uint8Array가 아닌 Array의 인스턴스를 반환하므로 완전한 polyfill이 아니므로 TypedArray에 일반적으로 존재하는 속성이 없습니다.</target>
        </trans-unit>
        <trans-unit id="bf8132eb74c2cf22ba7e0b5fe71b7215b5ce98fc" translate="yes" xml:space="preserve">
          <source>This is not a robust way to reverse a string:</source>
          <target state="translated">이것은 문자열을 뒤집는 강력한 방법이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="359c68fa95bdf9de648bfba3053c422111f3a164" translate="yes" xml:space="preserve">
          <source>This is not legal (the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise constructor&lt;/a&gt; is not being called correctly) and will throw a &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; exception:</source>
          <target state="translated">이것은 합법적이지 않으며 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise 생성자&lt;/a&gt; 가 올바르게 호출되지 않음) &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; 시킵니다 . 이것은 생성자 예외 가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="b599f8a621ba4222a4aac8151c0981083d9ff16a" translate="yes" xml:space="preserve">
          <source>This is not legal (the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise constructor&lt;/a&gt; is not being called correctly) and will throw a &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; exception:</source>
          <target state="translated">이것은 합법적이지 않으며 ( &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise#Constructor&quot;&gt;Promise 생성자&lt;/a&gt; 가 올바르게 호출되지 않음) &lt;code&gt;TypeError: this is not a constructor&lt;/code&gt; 예외 가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="5733b399958defe53c59bb5929031dc51b87600d" translate="yes" xml:space="preserve">
          <source>This is not the best way to do things, and probably not to be used in any production environment.</source>
          <target state="translated">이것은 작업을 수행하는 최선의 방법이 아니며 프로덕션 환경에서 사용하지 않을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d60dba41c390f2f7c1c5e15f9c7b5e18daf2bf8" translate="yes" xml:space="preserve">
          <source>This is now possible with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; (ES2015) loops as well.</source>
          <target state="translated">이와 함께있게되었습니다 &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; 뿐만 아니라 루프 (ES2015).</target>
        </trans-unit>
        <trans-unit id="be239762b46386fb92109519d0bbd048a6b09c7d" translate="yes" xml:space="preserve">
          <source>This is really different from</source>
          <target state="translated">이건 정말 다릅니다</target>
        </trans-unit>
        <trans-unit id="36b20f089e6393f1c8f2e76828d14573207c1677" translate="yes" xml:space="preserve">
          <source>This is really different from:</source>
          <target state="translated">이것은 다음과 정말 다릅니다.</target>
        </trans-unit>
        <trans-unit id="5d4b4888b60a7c7f44232635981717e49f6887fc" translate="yes" xml:space="preserve">
          <source>This is similar to the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object, so that each entry's &lt;em&gt;key&lt;/em&gt; is the same as its &lt;em&gt;value&lt;/em&gt; for a &lt;code&gt;Set&lt;/code&gt;.</source>
          <target state="translated">이것은 유사하다 &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 각 항목의 그래서, 객체 &lt;em&gt;키가&lt;/em&gt; 그와 동일한 &lt;em&gt;값&lt;/em&gt; A의 &lt;code&gt;Set&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1075ce64a26f9ab08ab3d64987d886262a92513" translate="yes" xml:space="preserve">
          <source>This is still in the temporal dead zone as its declaration statement has not been reached and terminated.</source>
          <target state="translated">선언문에 도달하지 않았고 종료되지 않았기 때문에 이것은 여전히 ​​일시적인 데드 존에 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fd74be57be6f93ffca00ff71e1d39061bd27902" translate="yes" xml:space="preserve">
          <source>This is the same as the global &lt;a href=&quot;parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">이것은 전역 &lt;a href=&quot;parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt; 함수 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="f2871763944d73fb8fffa612235b093d207efe83" translate="yes" xml:space="preserve">
          <source>This is the same as the global &lt;a href=&quot;parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">이것은 전역 &lt;a href=&quot;parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt; 함수 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="88221358a8c319f8e71bd4d82231d103ea61668a" translate="yes" xml:space="preserve">
          <source>This is what it would look like using code snippets:</source>
          <target state="translated">코드 스 니펫을 사용하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e9368acabfbbc0558888b69038b0a6146f379cc6" translate="yes" xml:space="preserve">
          <source>This issue also appears if the same variable is used in the getter.</source>
          <target state="translated">이 문제는 getter에서 동일한 변수를 사용하는 경우에도 나타납니다.</target>
        </trans-unit>
        <trans-unit id="ee37fbd5bde80ef8e8547277a4747ebc935aa3cf" translate="yes" xml:space="preserve">
          <source>This issue can also happen when providing a function (stored in an object) as an argument to another function. In this case, the object won't the &lt;code&gt;this&lt;/code&gt; target of the function. To work-around this issue, you will either need to provide a lambda which is making the call, or use the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt; function to force the &lt;code&gt;this&lt;/code&gt; argument to the expected object.</source>
          <target state="translated">이 문제는 객체에 저장된 함수를 다른 함수의 인수로 제공 할 때도 발생할 수 있습니다. 이 경우 객체는 함수 &lt;code&gt;this&lt;/code&gt; 대상 이 아닙니다 . 이 문제를 해결하려면 호출하는 람다를 제공하거나 &lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt; 함수를 사용 &lt;code&gt;this&lt;/code&gt; 인수를 예상 개체 에 강제로 적용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="cd883cc8bd740c640410d1ab1754c0d88be04eca" translate="yes" xml:space="preserve">
          <source>This issue can also happen when providing a function that is stored as a property of an object as an argument to another function. In this case, the object that stores the function won't be the &lt;code&gt;this&lt;/code&gt; target of that function when it is called by the other function. To work-around this issue, you will either need to provide a lambda which is making the call, or use the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt; function to force the &lt;code&gt;this&lt;/code&gt; argument to the expected object.</source>
          <target state="translated">이 문제는 객체의 속성으로 저장된 함수를 다른 함수에 대한 인수로 제공 할 때도 발생할 수 있습니다. 이 경우 함수를 저장하는 객체 는 다른 함수에서 호출 될 때 해당 함수 의 &lt;code&gt;this&lt;/code&gt; 대상 이 아닙니다 . 이 문제를 해결하려면 호출을 수행하는 람다를 제공하거나 &lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 &lt;code&gt;this&lt;/code&gt; 인수를 예상 된 개체 에 강제로 적용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f5a72d273fff00c9ce64d02a267b12f39fa00462" translate="yes" xml:space="preserve">
          <source>This issue can arise when using the &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; methods, and providing a &lt;code&gt;this&lt;/code&gt; argument which does not have the expected type.</source>
          <target state="translated">사용하는 경우이 문제가 발생할 수 있습니다 &lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; 메소드 및 제공 &lt;code&gt;this&lt;/code&gt; 예상되는 유형이없는 인수를.</target>
        </trans-unit>
        <trans-unit id="0c4d71403f2dccf2aa58ddcf9d5d880a2549dc90" translate="yes" xml:space="preserve">
          <source>This lets you avoid duplicating code in both the promise's &lt;a href=&quot;then&quot;&gt;&lt;code&gt;then()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;catch()&lt;/code&gt;&lt;/a&gt; handlers.</source>
          <target state="translated">이를 통해 promise의 &lt;a href=&quot;then&quot;&gt; &lt;code&gt;then()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;catch&quot;&gt; &lt;code&gt;catch()&lt;/code&gt; &lt;/a&gt; 핸들러 에서 코드가 중복되는 것을 방지 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dcbad0e9023fc522b259cefc46df847e5f50f715" translate="yes" xml:space="preserve">
          <source>This logs &quot;819199440000&quot;.</source>
          <target state="translated">&quot;819199440000&quot;을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="aa08ad3dc43c45f1a4ba5c981f5040dc358a1b07" translate="yes" xml:space="preserve">
          <source>This logs 'Smith, John'.</source>
          <target state="translated">이것은 'Smith, John'을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="8b5fad24ae3bf54a37018d5192408c9fee5fcf60" translate="yes" xml:space="preserve">
          <source>This logs 'Twas the night before Christmas...'</source>
          <target state="translated">이것은 '크리스마스 전날 밤 ...'</target>
        </trans-unit>
        <trans-unit id="2434413d65324cae030c2d45551314b68ec65fd7" translate="yes" xml:space="preserve">
          <source>This logs 'oranges are round, and oranges are juicy'.</source>
          <target state="translated">이 로그는 '오렌지가 둥글고 오렌지는 수분이 많습니다'.</target>
        </trans-unit>
        <trans-unit id="46dac4a89ea279eb2cd5c3e1e51ebcc49bad4a78" translate="yes" xml:space="preserve">
          <source>This logs 2 because the &lt;code&gt;var x&lt;/code&gt; statement within the block is in the same scope as the &lt;code&gt;var x&lt;/code&gt; statement before the block.</source>
          <target state="translated">이 로그 2 때문에 &lt;code&gt;var x&lt;/code&gt; 블록 내에서 문이 같은 범위에 &lt;code&gt;var x&lt;/code&gt; 블록 전에 문.</target>
        </trans-unit>
        <trans-unit id="bd32d940192f8f335d13d0e14bd38ea9ceec204f" translate="yes" xml:space="preserve">
          <source>This logs 2 because the &lt;code&gt;var x&lt;/code&gt; statement within the block is in the same scope as the &lt;code&gt;var x&lt;/code&gt; statement before the block. In C or Java, the equivalent code would have outputted 1.</source>
          <target state="translated">이 로그 2 때문에 &lt;code&gt;var x&lt;/code&gt; 블록 내에서 문이 같은 범위에 &lt;code&gt;var x&lt;/code&gt; 블록 전에 문. C 또는 Java에서 동등한 코드는 1을 출력했을 것입니다.</target>
        </trans-unit>
        <trans-unit id="eef6a2951162ef4b9fdfafdd91476e4959e0e5b2" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'Smith, John'&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;'Smith, John'&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="14cd5d6ad2ddeb940b09b38acb76fe57b64be76c" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'Twas the night before Christmas...'&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;'Twas the night before Christmas...'&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="28e6436e01c0063fe9c5dcb237ac04d17cbc993a" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;'oranges are round, and oranges are juicy'&lt;/code&gt;.</source>
          <target state="translated">이 로그는 &lt;code&gt;'oranges are round, and oranges are juicy'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="912efd6cc77f26d9c238d8e86e5f91f8734ce187" translate="yes" xml:space="preserve">
          <source>This logs &lt;code&gt;819199440000&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;819199440000&lt;/code&gt; 을 기록 합니다 .</target>
        </trans-unit>
        <trans-unit id="eeaaab61da8ae77302900204ae7682c5842307c1" translate="yes" xml:space="preserve">
          <source>This logs two lines; the first line logs the original string, and the second line logs the resulting array.</source>
          <target state="translated">이것은 두 줄을 기록합니다. 첫 번째 줄은 원래 문자열을 기록하고 두 번째 줄은 결과 배열을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="ff01ab748a447654b55cf2a732930c48cb640771" translate="yes" xml:space="preserve">
          <source>This loop is similar to the first one, but it uses &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; to check if the found enumerable property is the object's own, i.e. not inherited. If it is, the property is logged. Properties &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; are logged because they are own properties (&lt;strong&gt;not inherited&lt;/strong&gt;). Properties &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt; are not logged because they &lt;strong&gt;are inherited&lt;/strong&gt;.</source>
          <target state="translated">이 루프는 첫 번째 루프와 비슷하지만 &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 발견 된 열거 가능한 속성이 객체 소유인지, 즉 상속되지 않았는지 확인합니다. 그렇다면 속성이 기록됩니다. 속성 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; 및 &lt;code&gt;foo&lt;/code&gt; 는 자체 속성이기 때문에 기록됩니다 ( &lt;strong&gt;상속되지 않음&lt;/strong&gt; ). 속성 &lt;code&gt;arrCustom&lt;/code&gt; 및 &lt;code&gt;objCustom&lt;/code&gt; &lt;strong&gt;은 상속&lt;/strong&gt; 되기 때문에 기록되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8cbb9f7119905b2586838956a1338b5278260435" translate="yes" xml:space="preserve">
          <source>This loop is similar to the first one, but it uses &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; to check, if the found enumerable property is object's own (not inherited). And if it is, the property is logged. Properties &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; are logged because they are own properties (&lt;strong&gt;not inherited&lt;/strong&gt;). Properties &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt; are not logged because they &lt;strong&gt;are inherited&lt;/strong&gt;.</source>
          <target state="translated">이 루프는 첫 번째 루프와 비슷하지만 &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 찾은 열거 가능한 속성이 객체 자체 (상속되지 않은)인지 확인합니다. 그리고 그렇다면 속성이 기록됩니다. 속성 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; 및 &lt;code&gt;foo&lt;/code&gt; 는 &lt;strong&gt;상속되지 않은&lt;/strong&gt; 자체 속성이므로 기록 됩니다. &lt;code&gt;arrCustom&lt;/code&gt; 및 &lt;code&gt;objCustom&lt;/code&gt; 속성 &lt;strong&gt;은 상속&lt;/strong&gt; 되므로 기록되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="728cd810df8a5cfddb3cc665aaae28fc8419faf9" translate="yes" xml:space="preserve">
          <source>This loop iterates and logs &lt;strong&gt;values&lt;/strong&gt; that &lt;code&gt;iterable&lt;/code&gt;, as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt;, defines to be iterated over. The object's &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; are shown, but none of the object's &lt;strong&gt;properties&lt;/strong&gt;.</source>
          <target state="translated">이 루프 는 &lt;code&gt;iterable&lt;/code&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable 객체&lt;/a&gt; 로서 iterable 이 반복되도록 정의 하는 &lt;strong&gt;값&lt;/strong&gt; 을 반복하고 기록 &lt;strong&gt;합니다&lt;/strong&gt; . 개체의 &lt;strong&gt;요소 &lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; , &lt;code&gt;5&lt;/code&gt; , &lt;code&gt;7&lt;/code&gt; 이 표시되지만 개체의 &lt;strong&gt;속성&lt;/strong&gt; 은 표시되지 않습니다 .&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bd17082d80f63cf403d892f1a8c1bcc9695ce8b" translate="yes" xml:space="preserve">
          <source>This loop iterates and logs values that &lt;code&gt;iterable&lt;/code&gt; as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt;defines to be iterated over, which are array elements &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; and not any of object's &lt;strong&gt;properties&lt;/strong&gt;.</source>
          <target state="translated">이 루프는 반복 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;가능한 객체&lt;/a&gt; 가 반복되도록 정의 된 반복 &lt;code&gt;iterable&lt;/code&gt; 값을 반복하고 기록합니다 . 이는 객체의 &lt;strong&gt;속성이&lt;/strong&gt; 아닌 배열 요소 &lt;code&gt;3&lt;/code&gt; , &lt;code&gt;5&lt;/code&gt; , &lt;code&gt;7&lt;/code&gt; 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e61403415ab99c6515a2bc6a172cd44f69e2d71" translate="yes" xml:space="preserve">
          <source>This loop logs only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of &lt;code&gt;iterable&lt;/code&gt; object, in original insertion order. It doesn't log array &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;hello&lt;/code&gt; because those are &lt;strong&gt;not&lt;/strong&gt; enumerable properties. But it logs array &lt;strong&gt;indexes&lt;/strong&gt; as well as &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt;, which are. If you're not sure why the properties are iterated over, there's a more thorough explanation of how &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt;&lt;code&gt;array iteration and for...in&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">이 루프 는 &lt;code&gt;iterable&lt;/code&gt; 객체 의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;열거 가능한 속성&lt;/a&gt; 만 원래 삽입 순서대로 기록합니다. 배열 &lt;strong&gt;요소 &lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; , &lt;code&gt;5&lt;/code&gt; , &lt;code&gt;7&lt;/code&gt; 또는 &lt;code&gt;hello&lt;/code&gt; 는 열거 할 수 &lt;strong&gt;없는&lt;/strong&gt; 속성 이므로 기록하지 않습니다 . 그러나 배열 &lt;strong&gt;인덱스&lt;/strong&gt; 뿐만 아니라 &lt;code&gt;arrCustom&lt;/code&gt; 및 &lt;code&gt;objCustom&lt;/code&gt; 도 기록합니다. 속성이 왜 반복되는지 확실하지 않은 경우 &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt; &lt;code&gt;array iteration and for...in&lt;/code&gt; &lt;/a&gt; 작동 방식에 대한 자세한 설명이 있습니다.&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2dd45d02933ab08f03fa6d824036dccf5751085c" translate="yes" xml:space="preserve">
          <source>This loop logs only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of the &lt;code&gt;iterable&lt;/code&gt; object, in arbitrary order. It doesn't log array &lt;strong&gt;elements&lt;/strong&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt; or &lt;code&gt;hello&lt;/code&gt; because those are &lt;strong&gt;not&lt;/strong&gt; enumerable properties, in fact they are not properties at all, they are &lt;strong&gt;values&lt;/strong&gt;. It logs array &lt;strong&gt;indexes&lt;/strong&gt; as well as &lt;code&gt;arrCustom&lt;/code&gt; and &lt;code&gt;objCustom&lt;/code&gt;, which are. If you're not sure why these properties are iterated over, there's a more thorough explanation of how &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt;&lt;code&gt;array iteration and for...in&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">이 루프 는 &lt;code&gt;iterable&lt;/code&gt; 객체 의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;열거 가능한 속성&lt;/a&gt; 만 임의의 순서로 기록합니다. 그것은 배열 기록하지 않는 &lt;strong&gt;요소 &lt;/strong&gt; &lt;code&gt;3&lt;/code&gt; , &lt;code&gt;5&lt;/code&gt; , &lt;code&gt;7&lt;/code&gt; 또는 &lt;code&gt;hello&lt;/code&gt; 그이기 때문에 &lt;strong&gt;하지&lt;/strong&gt; 열거 속성들이 모든 속성에없는 사실, 그들이있다 &lt;strong&gt;값&lt;/strong&gt; . &lt;code&gt;arrCustom&lt;/code&gt; 및 &lt;code&gt;objCustom&lt;/code&gt; 뿐만 아니라 배열 &lt;strong&gt;인덱스&lt;/strong&gt; 도 기록 합니다. 이러한 속성이 반복되는 이유를 모르는 경우 &lt;a href=&quot;for...in#Array_iteration_and_for...in&quot;&gt; &lt;code&gt;array iteration and for...in&lt;/code&gt; &lt;/a&gt; 작동 방식에 대한 자세한 설명이 있습니다.&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a4b41d6f357f793b0bfe160c3e66477745c702dd" translate="yes" xml:space="preserve">
          <source>This may not make sense at first but when you start dealing with multiple frames or windows in your script and pass objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is, in fact, an Array using &lt;code&gt;Array.isArray(myObj)&lt;/code&gt;</source>
          <target state="translated">이것은 처음에는 의미가 없지만 스크립트에서 여러 프레임이나 창을 다루기 시작하고 함수를 통해 한 컨텍스트에서 다른 컨텍스트로 오브젝트를 전달할 때 이는 유효하고 강력한 문제입니다. 예를 들어, 주어진 객체가 실제로 &lt;code&gt;Array.isArray(myObj)&lt;/code&gt; 사용하여 배열인지 안전하게 확인할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="af969ba43007ff7edea6fe9c040fe7c98008d444" translate="yes" xml:space="preserve">
          <source>This may not make sense at first, but for scripts dealing with multiple frames or windows, and passing objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is, in fact, an Array using &lt;code&gt;Array.isArray(&lt;var&gt;myObj&lt;/var&gt;)&lt;/code&gt;</source>
          <target state="translated">처음에는 이해가되지 않을 수 있지만 여러 프레임이나 창을 처리하고 함수를 통해 한 컨텍스트에서 다른 컨텍스트로 객체를 전달하는 스크립트의 경우 이는 유효하고 강력한 문제가 될 것입니다. 예를 들어 주어진 객체가 실제로 &lt;code&gt;Array.isArray(&lt;var&gt;myObj&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;myObj&lt;/var&gt; )를 사용하여 Array인지 안전하게 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7b801d88a0da407c7128c2ff1c47e2c14695387" translate="yes" xml:space="preserve">
          <source>This means that a tagged template like the following is problematic, because, per ECMAScript grammar, a parser looks for valid Unicode escape sequences, but finds malformed syntax:</source>
          <target state="translated">이는 ECMAScript 문법에 따라 파서가 유효한 유니 코드 이스케이프 시퀀스를 찾지 만 잘못된 형식의 구문을 찾기 때문에 다음과 같은 태그가 지정된 템플릿은 문제가 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="4a5d64b9105ca942c48c028a9679b334a111eec7" translate="yes" xml:space="preserve">
          <source>This means that different browsers can give a different result. Even the same JavaScript engine on a different OS or architecture can give different results!</source>
          <target state="translated">이것은 다른 브라우저가 다른 결과를 제공 할 수 있음을 의미합니다. 다른 OS 또는 아키텍처의 동일한 JavaScript 엔진도 다른 결과를 제공 할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="d559f000b511e827a28282de94374f00bee4f11b" translate="yes" xml:space="preserve">
          <source>This means that functions and variables declared in the function body cannot be referred to from default value parameter initializers; attempting to do so throws a run-time &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">즉, 함수 본문에 선언 된 함수와 변수는 기본값 매개 변수 이니셜 라이저에서 참조 할 수 없습니다. 그렇게하려고하면 런타임 &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; 가 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="5b2ebc97be974edede44a91f6b7acedb37463134" translate="yes" xml:space="preserve">
          <source>This means that you shouldn&amp;rsquo;t write a lazy getter for a property whose value you expect to change, because if the getter is lazy then it will not recalculate the value.</source>
          <target state="translated">즉, 값이 변경 될 것으로 예상되는 속성에 대해 lazy getter를 작성해서는 안됩니다. 게터가 게으른 경우 값을 다시 계산하지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="fdf14e175098f04334392b1707305811a5a0ff5c" translate="yes" xml:space="preserve">
          <source>This means that you shouldn't use a lazy getter for a property whose value you expect to change, because the getter will not recalculate the value.</source>
          <target state="translated">즉, getter가 값을 다시 계산하지 않기 때문에 값을 변경하려는 속성에 지연 게터를 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="4f40669dfc3c484794dee2581cdbe35c00b46e74" translate="yes" xml:space="preserve">
          <source>This memory's &lt;code&gt;buffer&lt;/code&gt; property will return a &lt;code&gt;&lt;a href=&quot;../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 메모리의 &lt;code&gt;buffer&lt;/code&gt; 속성은 &lt;code&gt;&lt;a href=&quot;../sharedarraybuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7d54e4170435adc72ca9d3b2670d169f5e688127" translate="yes" xml:space="preserve">
          <source>This method allows a precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (&lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop or &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; method), whose values may be changed, and which may be &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt;. This method allows these extra details to be changed from their defaults. By default, values added using &lt;code&gt;Object.defineProperty()&lt;/code&gt; are immutable and not enumerable.</source>
          <target state="translated">이 방법을 사용하면 객체의 속성을 정확하게 추가하거나 수정할 수 있습니다. 할당을 통한 일반적인 속성 추가는 속성 열거 ( &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 루프 또는 &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; 메서드) 중에 표시되는 속성을 생성 하며, 해당 값은 변경 될 수 있으며 &lt;a href=&quot;../../operators/delete&quot;&gt;삭제할&lt;/a&gt; 수 있습니다 . 이 방법을 사용하면 이러한 추가 세부 정보를 기본값에서 변경할 수 있습니다. 기본적으로 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 사용하여 추가 된 값 은 변경할 수 없으며 열거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="491161e77a4b6245ea874583805ac06680c8c066" translate="yes" xml:space="preserve">
          <source>This method allows a precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (&lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop or &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; method), whose values may be changed, and which may be &lt;a href=&quot;../../operators/delete&quot;&gt;deleted&lt;/a&gt;. This method allows these extra details to be changed from their defaults. By default, values added using &lt;code&gt;Object.defineProperty()&lt;/code&gt; are immutable.</source>
          <target state="translated">이 방법을 사용하면 객체의 속성을 정확하게 추가하거나 수정할 수 있습니다. 할당을 통한 일반 속성 추가는 속성 열거 ( &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 루프 또는 &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; 메서드) 중에 표시되는 값을 변경하고 &lt;a href=&quot;../../operators/delete&quot;&gt;삭제&lt;/a&gt; 될 수있는 속성을 만듭니다 . 이 방법을 사용하면 이러한 추가 세부 정보를 기본값에서 변경할 수 있습니다. 기본적으로 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 사용하여 추가 한 값 은 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f704901faae524431730bdf40f9707422fd2785b" translate="yes" xml:space="preserve">
          <source>This method can be used in &lt;em&gt;almost&lt;/em&gt; the same way as &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">이 메서드는 &lt;code&gt;this&lt;/code&gt; 및 다른 인수 순서를 제외하고 &lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt; 와 &lt;em&gt;거의&lt;/em&gt; 동일한 방식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5e58d5e8f25a596fd61c42be4c70acd1f3af5138" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">이 메소드는 다른 &lt;code&gt;this&lt;/code&gt; 및 다른 인수 순서를 제외하고 &lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt; 와 거의 동일한 방식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d0e48a6c5ace0bade4c8279bb0f59b436d1ebb79" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">이 메소드는 다른 &lt;code&gt;this&lt;/code&gt; 및 다른 인수 순서를 제외하고 &lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt; 와 거의 동일한 방식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3af8eb9981bc847519477ca9d0eb927fcdbb1fb7" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">이 메소드는 다른 &lt;code&gt;this&lt;/code&gt; 및 다른 인수 순서를 제외하고 &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt; 와 거의 동일한 방식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2eda3fb2183a80f9f04697f8a3f51ec46e60dd89" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different arguments order.</source>
          <target state="translated">이 메소드는 다른 &lt;code&gt;this&lt;/code&gt; 및 다른 인수 순서를 제외하고 &lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt; 과 거의 동일한 방식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8c5a18dc13bb7c0f49f12e2d027ebf5a25908724" translate="yes" xml:space="preserve">
          <source>This method can be used in almost the same way as &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt;, except the different &lt;code&gt;this&lt;/code&gt; and the different order of arguments.</source>
          <target state="translated">이 메서드는 &lt;code&gt;this&lt;/code&gt; 및 인수 순서가 다르다는 점을 제외하면 &lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt; 과 거의 동일한 방식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="496b730643a0f9292cc6f1f1b5c17f4ff7d7e8fa" translate="yes" xml:space="preserve">
          <source>This method can be useful for aggregating the results of multiple promises.</source>
          <target state="translated">이 방법은 여러 약속의 결과를 집계하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3c50061f520cf8433f9f488097531f0f156580e" translate="yes" xml:space="preserve">
          <source>This method can be useful for aggregating the results of multiple promises. It is typically used when there are multiple related asynchronous tasks that the overall code relies on to work successfully &amp;mdash; all of whom we want to fulfill before the code execution continues.</source>
          <target state="translated">이 방법은 여러 약속의 결과를 집계하는 데 유용 할 수 있습니다. 일반적으로 전체 코드가 성공적으로 작동하기 위해 의존하는 여러 관련 비동기 작업이있을 때 사용됩니다.이 작업은 모두 코드 실행이 계속되기 전에 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="094f1b1bbabc6f64860f9c4d079b311edc345aec" translate="yes" xml:space="preserve">
          <source>This method does not change the &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object it is called on. It simply returns a new string.</source>
          <target state="translated">이 메소드 는 호출 된 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 오브젝트를 변경하지 않습니다 . 단순히 새 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6666baba3f580ccd286b61386774c40457db494b" translate="yes" xml:space="preserve">
          <source>This method does not change the calling &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object. It simply returns a new string.</source>
          <target state="translated">이 메서드는 호출하는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 개체를 변경하지 않습니다 . 단순히 새 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3a8f56da2c8475aed3f21d446424c570a9f6def7" translate="yes" xml:space="preserve">
          <source>This method exists for customizing match behavior within &lt;code&gt;RegExp&lt;/code&gt; subclasses.</source>
          <target state="translated">이 메소드는 &lt;code&gt;RegExp&lt;/code&gt; 서브 클래스 내에서 일치 동작을 사용자 정의하기 위해 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="e76d94ba71bcfb16503893dd48081fd35f84674b" translate="yes" xml:space="preserve">
          <source>This method exists for customizing replace behavior in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">이 메소드는 &lt;code&gt;RegExp&lt;/code&gt; 서브 클래스 에서 바꾸기 동작을 사용자 정의하기 위해 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="24b40d7ea7ebe565d676832de325fe71c3207bac" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the behavior of &lt;code&gt;split()&lt;/code&gt; in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">이 메서드 는 &lt;code&gt;RegExp&lt;/code&gt; 하위 클래스 에서 &lt;code&gt;split()&lt;/code&gt; 의 동작을 사용자 정의하기 위해 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="2a1aa28c4d36bff7298821a1aa9ee8c1461c765f" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the search behavior in &lt;code&gt;RegExp&lt;/code&gt; subclasses.</source>
          <target state="translated">이 메소드는 &lt;code&gt;RegExp&lt;/code&gt; 서브 클래스 에서 검색 동작을 사용자 정의하기 위해 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="21c6ecc9ef52cc6b8b8b85ede1e2f1c62b5fcf1f" translate="yes" xml:space="preserve">
          <source>This method exists for customizing the split behavior in &lt;code&gt;RegExp&lt;/code&gt; subclass.</source>
          <target state="translated">이 메소드는 &lt;code&gt;RegExp&lt;/code&gt; 서브 클래스 에서 분할 동작을 사용자 정의하기 위해 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="c14635a53db4b1e8b459a7ea3abf070bd7b3f80e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet.</source>
          <target state="translated">이 메서드는 ECMAScript 2015 사양에 추가되었으며 아직 모든 JavaScript 구현에서 사용하지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53cd014293bf6eef1dca1fc6b0aedf94ffb3257e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can easily polyfill this method:</source>
          <target state="translated">이 방법은 ECMAScript 2015 사양에 추가되었으며 아직 모든 JavaScript 구현에서 사용 가능한 것은 아닙니다. 그러나이 방법을 쉽게 폴리 필 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82515c7dd3160807e861a6cfc787f7e6349f9c7f" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;Array.prototype.find&lt;/code&gt; with the following snippet:</source>
          <target state="translated">이 방법은 ECMAScript 2015 사양에 추가되었으며 아직 모든 JavaScript 구현에서 사용 가능한 것은 아닙니다. 그러나 다음 코드 조각으로 &lt;code&gt;Array.prototype.find&lt;/code&gt; 를 polyfill 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1fc57f4cdb3c305fad0a32bc254517afa35c24c2" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.repeat()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">이 방법은 ECMAScript 2015 사양에 추가되었으며 아직 모든 JavaScript 구현에서 사용 가능한 것은 아닙니다. 그러나 다음 스 니펫으로 &lt;code&gt;String.prototype.repeat()&lt;/code&gt; 를 폴리 필 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57b7a3036cae93c2fe97c1a5f5ee95bfd9ab48bb" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 2015 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">이 방법은 ECMAScript 2015 사양에 추가되었으며 아직 모든 JavaScript 구현에서 사용 가능한 것은 아닙니다. 그러나 다음 스 니펫으로 &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; 를 폴리 필 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="936616e173741f4312192e2fcd2409dedbf7dc5e" translate="yes" xml:space="preserve">
          <source>This method has been added to the ECMAScript 6 specification and may not be available in all JavaScript implementations yet. However, you can polyfill &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; with the following snippet:</source>
          <target state="translated">이 방법은 ECMAScript 6 사양에 추가되었으며 아직 모든 JavaScript 구현에서 사용 가능한 것은 아닙니다. 그러나 다음 스 니펫으로 &lt;code&gt;String.prototype.endsWith()&lt;/code&gt; 를 폴리 필 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bfe844b6cbf350ae41cd8dcbe1f13a0e68c8c4eb" translate="yes" xml:space="preserve">
          <source>This method has the same functionality as the global &lt;a href=&quot;../parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">이 메서드는 전역 &lt;a href=&quot;../parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt; 함수 와 기능이 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="ba83ba57f2891f92243494071d0afca752ad2fe8" translate="yes" xml:space="preserve">
          <source>This method has the same functionality as the global &lt;a href=&quot;../parseint&quot;&gt;&lt;code&gt;parseInt()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">이 메소드는 전역 &lt;a href=&quot;../parseint&quot;&gt; &lt;code&gt;parseInt()&lt;/code&gt; &lt;/a&gt; 함수 와 동일한 기능을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="157a467bd4bfe2a9b7253d40a7eb7f1188b91c19" translate="yes" xml:space="preserve">
          <source>This method is also part of ECMAScript 2015. (Its purpose is modularization of globals.)</source>
          <target state="translated">이 방법은 또한 ECMAScript 2015의 일부입니다. (그 목적은 글로벌 모듈화입니다.)</target>
        </trans-unit>
        <trans-unit id="4155f5bb3d4edfa3e164f79c343e9177bbab6699" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메서드는 &lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt; 에서 내부적으로 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="58ce8895f44a9778e2bccac14b26144462e4ee01" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return same result.</source>
          <target state="translated">이 메소드는 내부적으로 &lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt; 에서 호출 됩니다. 예를 들어 다음 두 예제는 동일한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="867134c7dad2a60527307e11728be2b02487822b" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;pattern&lt;/code&gt; argument is a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. For example, following two examples return same result.</source>
          <target state="translated">이 방법은 내부에서 호출 &lt;a href=&quot;../string/replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt; 경우 생성 &lt;code&gt;pattern&lt;/code&gt; 인자가있다 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체. 예를 들어, 다음 두 가지 예는 동일한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="86fa8de37fbd2280d1611f0feaa8813ab9f284ac" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return the same result.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt; 내부에서 호출 됩니다. 예를 들어 다음 두 예제는 동일한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4b9d738d59cda9c7b6b804054c0d55b16db02235" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; if its &lt;code&gt;separator&lt;/code&gt; argument is an object that has a &lt;code&gt;@@split&lt;/code&gt; method, such as a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;. For example, the following two examples return the same result.</source>
          <target state="translated">이 메서드는 해당 &lt;code&gt;separator&lt;/code&gt; 인수가 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 와 같이 &lt;code&gt;@@split&lt;/code&gt; 메서드 가있는 개체 인 경우 &lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt; 에서 내부적으로 호출 됩니다 . 예를 들어 다음 두 예제는 동일한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aecce4dcdcf1c90ba9852754479cf86d49774f06" translate="yes" xml:space="preserve">
          <source>This method is called internally in &lt;a href=&quot;../string/split&quot;&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;separator&lt;/code&gt; argument is a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. For example, the following two examples return the same result.</source>
          <target state="translated">이 방법은 내부에서 호출 &lt;a href=&quot;../string/split&quot;&gt; &lt;code&gt;String.prototype.split()&lt;/code&gt; &lt;/a&gt; 경우 생성 &lt;code&gt;separator&lt;/code&gt; 인자가있다 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체. 예를 들어 다음 두 예제는 동일한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2215b5714302af0ad9a6b2b9e3f63217245d405b" translate="yes" xml:space="preserve">
          <source>This method is functionally equivalent to the &lt;a href=&quot;gettime&quot;&gt;&lt;code&gt;Date.prototype.getTime()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 메소드는 기능적으로 &lt;a href=&quot;gettime&quot;&gt; &lt;code&gt;Date.prototype.getTime()&lt;/code&gt; &lt;/a&gt; 메소드 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="e0f103d7fcbba7a9364dd76f1a0d2ace0a684f79" translate="yes" xml:space="preserve">
          <source>This method is usually called internally by JavaScript and not explicitly in code.</source>
          <target state="translated">이 메소드는 일반적으로 코드에서 명시 적으로가 아니라 JavaScript에 의해 내부적으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="943bb8e3d6bff4653010c545f007aa18b80883f3" translate="yes" xml:space="preserve">
          <source>This method is usually called internally by JavaScript and not explicitly in web code.</source>
          <target state="translated">이 메소드는 일반적으로 웹 코드에서 명시 적으로가 아니라 JavaScript에 의해 내부적으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a9f3feedcfbd882b304fea40935da4e86d837cb8" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string begins with another string. This method is case-sensitive.</source>
          <target state="translated">이 방법을 사용하면 문자열이 다른 문자열로 시작하는지 여부를 결정할 수 있습니다. 이 방법은 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="d6141821c36a082c54ef6dfceab269824cd1f20b" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string ends with another string. This method is case-sensitive.</source>
          <target state="translated">이 방법을 사용하면 문자열이 다른 문자열로 끝나는 지 여부를 결정할 수 있습니다. 이 방법은 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="f23d94e3a4f55e53eefade5510673cafacf53bdf" translate="yes" xml:space="preserve">
          <source>This method lets you determine whether or not a string includes another string.</source>
          <target state="translated">이 방법을 사용하면 문자열에 다른 문자열이 포함되는지 여부를 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1894a3eb4db50a4dc5d92a5ef479f8032ffb99c5" translate="yes" xml:space="preserve">
          <source>This method makes the &lt;code&gt;[[prototype]]&lt;/code&gt; of the target immutable; any &lt;code&gt;[[prototype]]&lt;/code&gt; re-assignment will throw a &lt;code&gt;TypeError&lt;/code&gt;. This behavior is specific to the internal &lt;code&gt;[[prototype]]&lt;/code&gt; property, other properties of the target object will remain mutable.</source>
          <target state="translated">이 방법으로 대상의 &lt;code&gt;[[prototype]]&lt;/code&gt; 을 변경할 수 없습니다. 어떤 &lt;code&gt;[[prototype]]&lt;/code&gt; 재 할당은 발생합니다 &lt;code&gt;TypeError&lt;/code&gt; . 이 동작은 내부 &lt;code&gt;[[prototype]]&lt;/code&gt; 속성 에만 적용되며 대상 개체의 다른 속성은 변경 가능한 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="500393b711fdd6a88b9196ca67eb4cc609689293" translate="yes" xml:space="preserve">
          <source>This method permits examination of the precise description of a property. A</source>
          <target state="translated">이 방법을 사용하면 속성에 대한 정확한 설명을 검사 할 수 있습니다. ㅏ</target>
        </trans-unit>
        <trans-unit id="3eacf62a095eeef78b835892cfa8d4ad1b86db35" translate="yes" xml:space="preserve">
          <source>This method permits examination of the precise description of all own properties of an object. A</source>
          <target state="translated">이 방법을 사용하면 객체의 모든 고유 속성에 대한 정확한 설명을 검사 할 수 있습니다. ㅏ</target>
        </trans-unit>
        <trans-unit id="f628a9e2d86a894b84ba58b4f4db996ed00761dc" translate="yes" xml:space="preserve">
          <source>This method replaces the experimental &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move&quot;&gt;&lt;code&gt;TypedArray.prototype.move()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메서드는 실험적인 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move&quot;&gt; &lt;code&gt;TypedArray.prototype.move()&lt;/code&gt; &lt;/a&gt; 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="b769488df20b7fa0fb182ad7f05d33b3fef47b8b" translate="yes" xml:space="preserve">
          <source>This method returns a string (and &lt;em&gt;not&lt;/em&gt; a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="translated">이 방법은 문자열 (그리고 반환 &lt;em&gt;하지 &lt;/em&gt;&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 객체).</target>
        </trans-unit>
        <trans-unit id="ecec38c609050aa60e91994e7d8ba633872bb9d0" translate="yes" xml:space="preserve">
          <source>This method returns a string and not a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 오브젝트가 아닌 문자열을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="f0d6240f8eb87d18ef982897ec85c80727169310" translate="yes" xml:space="preserve">
          <source>This method takes advantage of the fact that if there is no break below a &lt;code&gt;case&lt;/code&gt; clause it will continue to execute the next &lt;code&gt;case&lt;/code&gt; clause regardless if the &lt;code&gt;case&lt;/code&gt; meets the criteria. (See the section &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/What_happens_if_I_forgot_a_break&quot;&gt;What happens if I forgot a &lt;code&gt;break&lt;/code&gt;?&lt;/a&gt;)</source>
          <target state="translated">이 방법은 &lt;code&gt;case&lt;/code&gt; 절 아래에 중단이 없으면 해당 &lt;code&gt;case&lt;/code&gt; 가 기준을 충족하는지 여부에 관계없이 다음 &lt;code&gt;case&lt;/code&gt; 절을 계속 실행 한다는 사실을 활용 합니다. ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/What_happens_if_I_forgot_a_break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt; 잊어 버리면 어떻게 되나요? 섹션을 참조하십시오 . )</target>
        </trans-unit>
        <trans-unit id="160d98375587cf100c86355045411e205a9aa3c6" translate="yes" xml:space="preserve">
          <source>This method takes advantage of the fact that if there is no break below a case statement it will continue to execute the next case statement regardless if the case meets the criteria. See the section titled &quot;What happens if I forgot a break?&quot;</source>
          <target state="translated">이 방법은 사례 문 아래에 구분이 없으면 사례가 기준에 맞는지 여부에 관계없이 다음 사례 문을 계속 실행한다는 사실을 활용합니다. &quot;휴식을 잊어 버린 경우 어떻게됩니까?&quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f8e0a731699a0eee17b0a5f9ff70ada64cee899c" translate="yes" xml:space="preserve">
          <source>This method uses the same algorithm as &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;, so the same polyfill can be used here: simply replace &lt;code&gt;Array.prototype.reduce&lt;/code&gt; with &lt;code&gt;TypedArray.prototype.reduce&lt;/code&gt;.</source>
          <target state="translated">이 메서드는 &lt;a href=&quot;../array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘을 사용 하므로 여기에서 동일한 폴리 필을 사용할 수 있습니다 . &lt;code&gt;Array.prototype.reduce&lt;/code&gt; 를 &lt;code&gt;TypedArray.prototype.reduce&lt;/code&gt; 로 바꾸면됩니다 .</target>
        </trans-unit>
        <trans-unit id="1fb272f1e69fbd9d448926c2c4913638d9cc457d" translate="yes" xml:space="preserve">
          <source>This method was standardized in ECMA-262 5&lt;sup&gt;th&lt;/sup&gt; edition. Engines which have not been updated to support this method can work around the absence of this method using the following shim:</source>
          <target state="translated">이 방법은 ECMA-262 5에서 표준화 된 &lt;sup&gt;번째&lt;/sup&gt; 판. 이 방법을 지원하도록 업데이트되지 않은 엔진은 다음과 같은 심을 사용하여이 방법이 없을 때 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b91db49b547b2ce36f7047eddefa7ad664ba8706" translate="yes" xml:space="preserve">
          <source>This method was standardized in ECMA-262 5th edition. Engines which have not been updated to support this method can work around the absence of this method using the following shim:</source>
          <target state="translated">이 방법은 ECMA-262 5 판에서 표준화되었습니다. 이 방법을 지원하도록 업데이트되지 않은 엔진은 다음과 같은 심을 사용하여이 방법이 없을 때 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4f646092c3469f7bcbadba53da6650a96ad9c82" translate="yes" xml:space="preserve">
          <source>This method will convert any non-string value to a string, when you set its &lt;code&gt;this&lt;/code&gt; to a value that is not a string:</source>
          <target state="translated">당신이 설정 한 경우이 방법은 문자열이 아닌 문자열 값을 변환합니다 &lt;code&gt;this&lt;/code&gt; 문자열이 아닌 값으로 :</target>
        </trans-unit>
        <trans-unit id="d9e15cff51fdda19eea3480a0c3927434a5c139f" translate="yes" xml:space="preserve">
          <source>This method will convert any non-string value to a string, when you set its &lt;code&gt;this&lt;/code&gt; to a value that is not a string: ​​​​</source>
          <target state="translated">당신이 설정 한 경우이 방법은 문자열이 아닌 문자열 값을 변환합니다 &lt;code&gt;this&lt;/code&gt; 문자열이 아닌 값으로 :</target>
        </trans-unit>
        <trans-unit id="5a8275b6636a094c259f413cf80b1c146b13f174" translate="yes" xml:space="preserve">
          <source>This nonstandard behavior is now ignored in version 40 and later, and will present a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; (&quot;&lt;a href=&quot;../errors/invalid_for-in_initializer&quot;&gt;for-in loop head declarations may not have initializers&lt;/a&gt;&quot;) error in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=748550&quot;&gt;bug 748550&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1164741&quot;&gt;bug 1164741&lt;/a&gt;).</source>
          <target state="translated">이 비표준 동작은 현재 버전 40 이상에서 무시 되며 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드&lt;/a&gt; ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=748550&quot;&gt;버그 748550&lt;/a&gt; 및 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1164741&quot;&gt;버그 1164741&lt;/a&gt; ) &lt;a href=&quot;../errors/invalid_for-in_initializer&quot;&gt;에서 &lt;/a&gt;&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; ( &quot; for-in 루프 헤드 선언에 초기화 프로그램이 없을 수 있음 &quot;) 오류가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="bb93a48f120d06b9e746fa2ffa4fd9989decd1d7" translate="yes" xml:space="preserve">
          <source>This notation is rather wasteful and JavaScript 1.6 introduced a generic shorthand:</source>
          <target state="translated">이 표기법은 다소 낭비 적이며 JavaScript 1.6은 일반적인 속기를 소개했습니다.</target>
        </trans-unit>
        <trans-unit id="af24edab927c2ed4ec4c6f5f292138da26677829" translate="yes" xml:space="preserve">
          <source>This object cannot be instantiated directly. Instead, a &lt;code&gt;Generator&lt;/code&gt; instance can be returned from a &lt;a href=&quot;../statements/function*&quot;&gt;generator function&lt;/a&gt;:</source>
          <target state="translated">이 개체는 직접 인스턴스화 할 수 없습니다. 대신 &lt;code&gt;Generator&lt;/code&gt; 인스턴스는 &lt;a href=&quot;../statements/function*&quot;&gt;generator 함수&lt;/a&gt; 에서 반환 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4afda9ac25610715df5495b7cfe5137d0c5e5b32" translate="yes" xml:space="preserve">
          <source>This object cannot be instantiated directly. Instead, you create an instance of an array of a particular type, such as a &lt;a href=&quot;int8array&quot;&gt;&lt;code&gt;Int8Array&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;bigint64array&quot;&gt;&lt;code&gt;BigInt64Array&lt;/code&gt;&lt;/a&gt;. These objects all have a common syntax for their constructors:</source>
          <target state="translated">이 개체는 직접 인스턴스화 할 수 없습니다. 대신, 같은 같은 특정 유형의 배열의 인스턴스 생성 &lt;a href=&quot;int8array&quot;&gt; &lt;code&gt;Int8Array&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;bigint64array&quot;&gt; &lt;code&gt;BigInt64Array&lt;/code&gt; 을&lt;/a&gt; . 이러한 객체는 모두 생성자에 대한 공통 구문을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="c7839fe8fd2c6eb56255867dc586a7fb858261f6" translate="yes" xml:space="preserve">
          <source>This operator allows evaluating expressions that produce a value into places where an expression that evaluates to &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is desired.</source>
          <target state="translated">이 연산자를 사용하면 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 것으로 평가되는 표현식 이 필요한 위치에 값을 생성하는 표현식을 평가할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fd3a6ffaef17da0022d470be037d9568832d020" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.</source>
          <target state="translated">이 연산자는 첫 번째 피연산자를 지정된 비트 수만큼 왼쪽으로 이동합니다. 왼쪽으로 벗어난 초과 비트는 버려집니다. 오른쪽에서 0 비트가 이동합니다.</target>
        </trans-unit>
        <trans-unit id="1de4e33f05c9641a53e16b11a59c33498bdab388" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.</source>
          <target state="translated">이 연산자는 첫 번째 피연산자를 지정된 비트 수만큼 오른쪽으로 이동합니다. 오른쪽으로 이동 된 초과 비트는 삭제됩니다. 가장 왼쪽 비트의 사본이 왼쪽에서 이동합니다. 새로운 가장 왼쪽 비트는 이전 가장 왼쪽 비트와 동일한 값을 가지므로 부호 비트 (가장 왼쪽 비트)는 변하지 않습니다. 따라서 이름은 &quot;sign-propagating&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="32e932f7047a9122ced44d45cc753479d51a81a0" translate="yes" xml:space="preserve">
          <source>This operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative.</source>
          <target state="translated">이 연산자는 첫 번째 피연산자를 지정된 비트 수만큼 오른쪽으로 이동합니다. 오른쪽으로 이동 된 초과 비트는 삭제됩니다. 왼쪽에서 0 비트가 이동합니다. 부호 비트는 0이되므로 결과는 항상 음이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0e111cd40eced5b108c9050cbe82b03b064b622a" translate="yes" xml:space="preserve">
          <source>This outputs &quot;value&quot;, since 1 is type-casted into '1'.</source>
          <target state="translated">1은 '1'로 유형 캐스트되므로 &quot;값&quot;이 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="20bac07695b8ca5f84f1f7fd0c290eff44fd1484" translate="yes" xml:space="preserve">
          <source>This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;white space&lt;/a&gt;. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.</source>
          <target state="translated">이 페이지는 JavaScript의 어휘 문법을 설명합니다. ECMAScript 스크립트의 소스 텍스트는 왼쪽에서 오른쪽으로 스캔되고 토큰, 제어 문자, 줄 종결 자, 주석 또는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;공백 인&lt;/a&gt; 일련의 입력 요소로 변환됩니다 . ECMAScript는 또한 특정 키워드와 리터럴을 정의하고 문장을 끝낼 때 세미콜론을 자동으로 삽입하는 규칙을 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="01d92d11e05c85e95d6683f157729dc8ad9e7ed6" translate="yes" xml:space="preserve">
          <source>This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or white space. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.</source>
          <target state="translated">이 페이지는 JavaScript의 어휘 문법을 설명합니다. ECMAScript 스크립트의 소스 텍스트는 왼쪽에서 오른쪽으로 스캔되며 토큰, 제어 문자, 줄 종결 자, 주석 또는 공백과 같은 일련의 입력 요소로 변환됩니다. ECMAScript는 또한 특정 키워드 및 리터럴을 정의하며 세미콜론을 자동으로 삽입하여 규칙을 종료하는 규칙을 가지고 있습니다.</target>
        </trans-unit>
        <trans-unit id="93feabb1077a32bf47dd12b7732c3541d81b02c2" translate="yes" xml:space="preserve">
          <source>This page documents the use of the &lt;code&gt;Error&lt;/code&gt; object itself and its use as a constructor function. For a list of properties and methods inherited by &lt;code&gt;Error&lt;/code&gt; instances, see &lt;a href=&quot;error/prototype&quot;&gt;&lt;code&gt;Error.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 페이지는 &lt;code&gt;Error&lt;/code&gt; 객체 자체의 사용과 생성자 함수로의 사용에 대해 설명합니다. &lt;code&gt;Error&lt;/code&gt; 인스턴스에 상속 된 속성 및 메서드 목록 은 &lt;a href=&quot;error/prototype&quot;&gt; &lt;code&gt;Error.prototype&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2915a39190c4a1dd93fc41a4654be2f795649d92" translate="yes" xml:space="preserve">
          <source>This part of the JavaScript section on MDN serves as a repository of facts about the JavaScript language. Read more &lt;a href=&quot;about&quot;&gt;about this reference&lt;/a&gt;.</source>
          <target state="translated">MDN의 JavaScript 섹션 중이 부분은 JavaScript 언어에 대한 사실의 저장소 역할을합니다. &lt;a href=&quot;about&quot;&gt;이 참조에 대해&lt;/a&gt; 자세히 알아 보십시오 .</target>
        </trans-unit>
        <trans-unit id="979cd4db3e64e3b95348dd7cbdc13acf17ee3c52" translate="yes" xml:space="preserve">
          <source>This pattern is what &lt;code&gt;&lt;a href=&quot;async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt; functions are built on top of.</source>
          <target state="translated">이 패턴은 &lt;code&gt;&lt;a href=&quot;async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 함수가 위에 구축 된 것입니다.</target>
        </trans-unit>
        <trans-unit id="24899ef6e799fafad90014f7131779dab0d21866" translate="yes" xml:space="preserve">
          <source>This phenomenon may confuse you in a situation like the following. The instruction &lt;code&gt;let n of n.a&lt;/code&gt; is already inside the private scope of the &lt;u&gt;for loop's block&lt;/u&gt;, hence the identifier&lt;strong&gt; &quot;n.a&quot;&lt;/strong&gt; is resolved to the property 'a' of the &lt;u&gt;'n' object located in the first part of the instruction itself&lt;/u&gt; (&quot;let n&quot;), which is still in the temporal dead zone since its declaration statement has not been reached and &lt;strong&gt;terminated&lt;/strong&gt;.</source>
          <target state="translated">이 현상은 다음과 같은 상황에서 혼동 될 수 있습니다. &lt;code&gt;let n of n.a&lt;/code&gt; 의 명령어 n 은 이미 &lt;u&gt;for 루프 블록&lt;/u&gt; 의 전용 범위 내에 있으므로 식별자 &lt;strong&gt;&quot;na&quot;&lt;/strong&gt; 는 &lt;u&gt;명령어 자체의 첫 번째 부분에있는 'n'객체&lt;/u&gt; 의 속성 'a'로 해석 &lt;u&gt;됩니다&lt;/u&gt; ( &quot;let&quot; n &quot;), 선언문에 도달하여 &lt;strong&gt;종료&lt;/strong&gt; 되지 않았으므로 여전히 임시 사 영역에 있습니다.</target>
        </trans-unit>
        <trans-unit id="937f40e5237ef7b0264a21cd7f210b57dc6843bc" translate="yes" xml:space="preserve">
          <source>This phenomenon may confuse you in a situation like the following. The instruction &lt;code&gt;let n of n.a&lt;/code&gt; is already inside the private scope of the for loop's block. So, the identifier &lt;code&gt;n.a&lt;/code&gt; is resolved to the property '&lt;code&gt;a&lt;/code&gt;' of the '&lt;code&gt;n&lt;/code&gt;' object located in the first part of the instruction itself (&lt;code&gt;let n&lt;/code&gt;).</source>
          <target state="translated">이 현상은 다음과 같은 상황에서 혼동을 줄 수 있습니다. &lt;code&gt;let n of n.a&lt;/code&gt; 명령 은 이미 for 루프 블록의 private 범위 내에 있습니다. 따라서 식별자 &lt;code&gt;n.a&lt;/code&gt; 는 명령어 자체의 첫 번째 부분 ( &lt;code&gt;let n&lt;/code&gt; ) 에있는 ' &lt;code&gt;n&lt;/code&gt; '객체 의 속성 ' &lt;code&gt;a&lt;/code&gt; '로 확인됩니다 .</target>
        </trans-unit>
        <trans-unit id="e3c84e7611673a5e2c6ffc14c37964b05fe32994" translate="yes" xml:space="preserve">
          <source>This polyfill covers the main use case, which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.</source>
          <target state="translated">이 폴리 필은 기본 유스 케이스를 다루며, 프로토 타입이 선택되었지만 두 번째 인수는 고려하지 않은 새 오브젝트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="fe30a72a0c38324d405058ca91860820ecbc46cd" translate="yes" xml:space="preserve">
          <source>This prevents authors from creating an explicit &lt;code&gt;Symbol&lt;/code&gt; wrapper object instead of a new symbol value and might be surprising as creating explicit wrapper objects around primitive data types is generally possible (for example, &lt;code&gt;new Boolean&lt;/code&gt;, &lt;code&gt;new String&lt;/code&gt; and &lt;code&gt;new Number&lt;/code&gt;).</source>
          <target state="translated">이렇게하면 작성자 가 새 심볼 값 대신 명시 적 &lt;code&gt;Symbol&lt;/code&gt; 래퍼 객체를 만들 수 없으며 기본 데이터 유형 (예 : &lt;code&gt;new Boolean&lt;/code&gt; , &lt;code&gt;new String&lt;/code&gt; 및 &lt;code&gt;new Number&lt;/code&gt; )을 중심으로 명시 적 래퍼 객체를 만들 수 있다는 점이 놀랍습니다 .</target>
        </trans-unit>
        <trans-unit id="dd869962a817927e401d4f9a67bc9dcc9a5752d8" translate="yes" xml:space="preserve">
          <source>This problem appears frequently when combined with a filter (&lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/typedarray/filter&quot;&gt;&lt;code&gt;TypedArray.prototype.filter()&lt;/code&gt;&lt;/a&gt;) which will remove all elements of the list. Thus leaving none to be used as the initial value.</source>
          <target state="translated">이 문제 는 목록의 모든 요소를 ​​제거 하는 필터 ( &lt;a href=&quot;../global_objects/array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/typedarray/filter&quot;&gt; &lt;code&gt;TypedArray.prototype.filter()&lt;/code&gt; &lt;/a&gt; ) 와 결합 할 때 자주 나타납니다 . 따라서 초기 값으로 아무것도 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8412d6f266972faab17f3f66c154c1239965cfe" translate="yes" xml:space="preserve">
          <source>This prohibition isn't strict mode proper because such function statements are an extension of basic ES5. But it is the recommendation of the ECMAScript committee, and browsers will implement it.</source>
          <target state="translated">이러한 금지는 이러한 기능 설명이 기본 ES5의 확장이기 때문에 엄격한 모드에 적합하지 않습니다. 그러나 ECMAScript위원회의 추천이며 브라우저가이를 구현할 것입니다.</target>
        </trans-unit>
        <trans-unit id="202a2db44d59ddd4acaa1f18d4ffa7ecf2a16ab5" translate="yes" xml:space="preserve">
          <source>This property contains a brief description of the error if one is available or has been set. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; makes extensive use of the &lt;code&gt;message&lt;/code&gt; property for exceptions. The &lt;code&gt;message&lt;/code&gt; property combined with the &lt;a href=&quot;name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the Error.</source>
          <target state="translated">이 속성에는 사용 가능한 또는 설정된 오류에 대한 간단한 설명이 포함되어 있습니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 는 예외 에 대해 &lt;code&gt;message&lt;/code&gt; 속성을 광범위하게 사용합니다 . &lt;code&gt;message&lt;/code&gt; 결합 속성 &lt;a href=&quot;name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 속성에 의해 사용되는 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Error.prototype.toString()&lt;/code&gt; &lt;/a&gt; 에러의 스트링 표현을 생성하는 방법.</target>
        </trans-unit>
        <trans-unit id="e32b98d6bdcb68b6b9679955c7a1cc5624bf529f" translate="yes" xml:space="preserve">
          <source>This property contains a brief description of the error if one is available or has been set. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; makes extensive use of the &lt;code&gt;message&lt;/code&gt; property for exceptions. The &lt;code&gt;message&lt;/code&gt; property combined with the &lt;a href=&quot;name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the Error.</source>
          <target state="translated">이 속성에는 오류가 사용 가능하거나 설정된 경우 오류에 대한 간략한 설명이 포함됩니다. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; 는 예외 에 대해 &lt;code&gt;message&lt;/code&gt; 속성을 광범위하게 사용합니다 . &lt;code&gt;message&lt;/code&gt; 결합 속성 &lt;a href=&quot;name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 속성에 의해 사용되는 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Error.prototype.toString()&lt;/code&gt; &lt;/a&gt; 에러의 스트링 표현을 생성하는 방법.</target>
        </trans-unit>
        <trans-unit id="e7eb285194c539b0f44fb0a7e4f806262c8482b2" translate="yes" xml:space="preserve">
          <source>This property is deprecated, and is only functional for some non-strict functions.</source>
          <target state="translated">이 속성은 더 이상 사용되지 않으며 엄격하지 않은 일부 기능에 대해서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f5998fce63dfca9c1fb87201411dd0ad827571fa" translate="yes" xml:space="preserve">
          <source>This property is not available anymore, but you can still use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 속성은 더 이상 사용할 수 없지만 여전히 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt; &lt;code&gt;Function.caller&lt;/code&gt; 를&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0cf7ef2c65386430033403f11c63d24f9affc6de" translate="yes" xml:space="preserve">
          <source>This property is set only if the regular expression instance used the &lt;code&gt;&quot;g&quot;&lt;/code&gt; flag to indicate a global search, or the &lt;code&gt;&quot;y&quot;&lt;/code&gt; flag to indicate a sticky search. The following rules apply:</source>
          <target state="translated">이 속성은 정규식 인스턴스가 &lt;code&gt;&quot;g&quot;&lt;/code&gt; 플래그를 사용하여 전역 검색을 나타내거나 &lt;code&gt;&quot;y&quot;&lt;/code&gt; 플래그를 사용하여 고정 검색을 나타내는 경우에만 설정됩니다 . 다음 규칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="aab683ca27f26abb7ad2b645f8a4f2493ee2e20a" translate="yes" xml:space="preserve">
          <source>This property is set only if the regular expression instance used the &lt;code&gt;g&lt;/code&gt; flag to indicate a global search, or the &lt;code&gt;y&lt;/code&gt; flag to indicate a sticky search. The following rules apply:</source>
          <target state="translated">이 속성은 정규식 인스턴스가 &lt;code&gt;g&lt;/code&gt; 플래그를 사용하여 전역 검색을 나타내거나 &lt;code&gt;y&lt;/code&gt; 플래그를 사용하여 고정 검색을 나타내는 경우에만 설정됩니다 . 다음 규칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2320fa0c41f8739c3c394cbe2f1188606b3e3f28" translate="yes" xml:space="preserve">
          <source>This property returns the number of code units in the string. &lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt;, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by &lt;code&gt;length&lt;/code&gt; to not match the actual number of characters in the string.</source>
          <target state="translated">이 속성은 문자열의 코드 단위 수를 반환합니다. JavaScript에서 사용하는 문자열 형식 인 &lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt; 은 단일 16 비트 코드 단위를 사용하여 가장 일반적인 문자를 나타내지 만 덜 일반적으로 사용되는 문자에는 두 개의 코드 단위를 사용해야하므로 &lt;code&gt;length&lt;/code&gt; 에 의해 반환되는 값은 다음 과 같습니다. 문자열의 실제 문자 수와 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="51f7df5a59f1072af28236cee6828da432beb411" translate="yes" xml:space="preserve">
          <source>This provides developers with a way to include custom data inside wasm modules for other purposes, for example the &lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section&quot;&gt;name custom section&lt;/a&gt;, which allows developers to provide names for all the functions and locals in the module (like &quot;symbols&quot; in a native build).</source>
          <target state="translated">이를 통해 개발자는 wasm 모듈 내에 사용자 정의 데이터를 다른 목적 (예 : &lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section&quot;&gt;name custom section&lt;/a&gt; )으로 포함하여 모듈의 모든 기능 및 로컬 (예 : 고유 빌드의 기호)에 대한 이름을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4111ee54927f5e20a9a2557a5ce105b1380bc928" translate="yes" xml:space="preserve">
          <source>This proxy extends an array with some utility features. As you see, you can flexibly &quot;define&quot; properties without using &lt;a href=&quot;object/defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties&lt;/code&gt;&lt;/a&gt;. This example can be adapted to find a table row by its cell. In that case, the target will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/table.rows&quot;&gt;&lt;code&gt;table.rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 프록시는 일부 유틸리티 기능으로 배열을 확장합니다. 보다시피 &lt;a href=&quot;object/defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties&lt;/code&gt; &lt;/a&gt; 를 사용하지 않고도 속성을 유연하게 &quot;정의&quot;할 수 있습니다 . 이 예제는 셀별로 테이블 행을 찾도록 구성 할 수 있습니다. 이 경우 대상은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/table.rows&quot;&gt; &lt;code&gt;table.rows&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="82d934c9f1a0b8ea09917dc15c4260459f515c79" translate="yes" xml:space="preserve">
          <source>This proxy extends an array with some utility features. As you see, you can flexibly &quot;define&quot; properties without using &lt;a href=&quot;object/defineproperties&quot;&gt;&lt;code&gt;Object.defineProperties&lt;/code&gt;&lt;/a&gt;. This example can be adapted to find a table row by its cell. In that case, the target will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows&quot;&gt;&lt;code&gt;table.rows&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 프록시는 일부 유틸리티 기능으로 어레이를 확장합니다. 보시다시피 &lt;a href=&quot;object/defineproperties&quot;&gt; &lt;code&gt;Object.defineProperties&lt;/code&gt; &lt;/a&gt; 를 사용하지 않고도 유연하게 속성을 &quot;정의&quot;할 수 있습니다 . 이 예제는 셀별로 테이블 행을 찾는 데 적용 할 수 있습니다. 이 경우 대상은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows&quot;&gt; &lt;code&gt;table.rows&lt;/code&gt; 가&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="01d23dbd17d04a53d683524917699a6da5b9ca70" translate="yes" xml:space="preserve">
          <source>This recursive function is missing a base case. As there is no exit condition, the function will call itself infinitely.</source>
          <target state="translated">이 재귀 함수에는 기본 케이스가 없습니다. 종료 조건이 없으므로 함수는 자신을 무한히 호출합니다.</target>
        </trans-unit>
        <trans-unit id="bdcaea2351fa8298ed886d1f656da74f45e12f03" translate="yes" xml:space="preserve">
          <source>This recursive function runs 10 times, as per the exit condition.</source>
          <target state="translated">이 재귀 함수는 종료 조건에 따라 10 번 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="6d7fe022c1b8d346cdb3559df2027563a8d076f9" translate="yes" xml:space="preserve">
          <source>This returns 2 because in floating points, the value is actually the decimal trailing &quot;1&quot; except for in subnormal precision cases such as zero.</source>
          <target state="translated">부동 소수점에서 값은 0과 같은 비정규 정밀도 경우를 제외하고 실제로 소수점 후행 &quot;1&quot;이기 때문에 2를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cffba478216f1d53d5fd2660d7146f1f6f21e730" translate="yes" xml:space="preserve">
          <source>This script displays the following text:</source>
          <target state="translated">이 스크립트는 다음 텍스트를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="fc5e8aa3503a78d527035852a3bb3a3c978f762a" translate="yes" xml:space="preserve">
          <source>This script displays the following:</source>
          <target state="translated">이 스크립트는 다음을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="dd82a7a8c7d4b2a36b690c950052c93a110723dd" translate="yes" xml:space="preserve">
          <source>This script writes:</source>
          <target state="translated">이 스크립트는 다음과 같이 씁니다.</target>
        </trans-unit>
        <trans-unit id="3a8a92244d2d79390941df48f29fed6be1f59072" translate="yes" xml:space="preserve">
          <source>This section contains implementation-specific behavior that can be inconsistent across implementations.</source>
          <target state="translated">이 섹션에는 구현간에 일관성이 없을 수있는 구현 별 동작이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="55ef13a1e73329e726feb2ef079106cad9f434f9" translate="yes" xml:space="preserve">
          <source>This should work:</source>
          <target state="translated">이것은 작동해야합니다 :</target>
        </trans-unit>
        <trans-unit id="57425f37455982cba70a01c510cce95685b95c23" translate="yes" xml:space="preserve">
          <source>This small example shows the mechanism of a &lt;code&gt;Promise&lt;/code&gt;. The &lt;code&gt;testPromise()&lt;/code&gt; method is called each time the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/a&gt; is clicked. It creates a promise that will be fulfilled, using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt;&lt;code&gt;window.setTimeout()&lt;/code&gt;&lt;/a&gt;, to the promise count (number starting from 1) every 1-3 seconds, at random. The &lt;code&gt;Promise()&lt;/code&gt; constructor is used to create the promise.</source>
          <target state="translated">이 작은 예제는 &lt;code&gt;Promise&lt;/code&gt; 의 메커니즘을 보여줍니다 . &lt;code&gt;testPromise()&lt;/code&gt; 메소드가 호출 될 때마다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt; &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; &lt;/a&gt; 클릭. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt; &lt;code&gt;window.setTimeout()&lt;/code&gt; &lt;/a&gt; 사용하여 1-3 초마다 약속 수 (1부터 시작하는 숫자)까지 임의로 약속을 이행합니다. &lt;code&gt;Promise()&lt;/code&gt; 생성자는 약속을 만드는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="972d14a331e7e6b9052bc3420e7e6e7f39917288" translate="yes" xml:space="preserve">
          <source>This snippet generates an array of 3 objects in the desired format without using a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">이 스 니펫은 &lt;code&gt;for&lt;/code&gt; 루프 를 사용하지 않고 원하는 형식으로 3 개의 객체 배열을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="53341a59cc29d0476aae7b7ae1e4c3d989b12ca1" translate="yes" xml:space="preserve">
          <source>This statement creates &lt;code&gt;myCar&lt;/code&gt; and assigns it the specified values for its properties. Then the value of &lt;code&gt;myCar.make&lt;/code&gt; is the string &quot;Eagle&quot;, &lt;code&gt;myCar.year&lt;/code&gt; is the integer 1993, and so on.</source>
          <target state="translated">이 문은 &lt;code&gt;myCar&lt;/code&gt; 를 생성 하고 속성에 대해 지정된 값을 할당합니다. 그런 다음 &lt;code&gt;myCar.make&lt;/code&gt; 의 값은 &quot;Eagle&quot;문자열이고 &lt;code&gt;myCar.year&lt;/code&gt; 는 정수 1993입니다.</target>
        </trans-unit>
        <trans-unit id="75afc102c7b3254dfeceb06e6c8c171d8bc37a92" translate="yes" xml:space="preserve">
          <source>This statement creates &lt;code&gt;mycar&lt;/code&gt; and assigns it the specified values for its properties. Then the value of &lt;code&gt;mycar.make&lt;/code&gt; is the string &quot;Eagle&quot;, &lt;code&gt;mycar.year&lt;/code&gt; is the integer 1993, and so on.</source>
          <target state="translated">이 명령문은 &lt;code&gt;mycar&lt;/code&gt; 를 작성 하고 해당 특성에 지정된 값을 지정합니다. 그런 다음 &lt;code&gt;mycar.make&lt;/code&gt; 의 값은 문자열 &quot;Eagle&quot;이고 &lt;code&gt;mycar.year&lt;/code&gt; 는 정수 1993 등입니다.</target>
        </trans-unit>
        <trans-unit id="d4fdd4777e071bdcffbfcfe8ccadf9de6f044a61" translate="yes" xml:space="preserve">
          <source>This syntax has a trap that has &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;already bitten&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;a major site&lt;/a&gt;: it isn't possible to blindly concatenate conflicting scripts. Consider concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! The inverse is also true: non-strict plus strict looks non-strict. Obviously, concatenation of scripts is never ideal, but if you must, consider enabling strict on a function-by-function basis.</source>
          <target state="translated">이 구문에는 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;이미 &lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;주요 사이트를 &lt;/a&gt;물린 함정이 있습니다 . 충돌하는 스크립트를 맹목적으로 연결할 수 없습니다. 엄격 모드 스크립트를 비 엄격 모드 스크립트와 연결하는 것을 고려하십시오. 전체 연결이 엄격 해 보입니다! 그 반대도 사실입니다. 엄격하지 않은 것과 엄격함은 엄격하지 않은 것처럼 보입니다. 분명히 스크립트의 연결은 결코 이상적이지 않지만 필요한 경우 기능별로 엄격하게 활성화하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="94b85c795c1bd21e753a02bbb64f696799e5dcf5" translate="yes" xml:space="preserve">
          <source>This syntax has a trap that has &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;already bitten&lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;a major site&lt;/a&gt;: it isn't possible to blindly concatenate conflicting scripts. Consider concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! The inverse is also true: non-strict plus strict looks non-strict. Obviously, concatentation of scripts is never ideal, but if you must, consider enabling strict on a function-by-function basis.</source>
          <target state="translated">이 구문에는 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=579119&quot;&gt;이미 &lt;/a&gt;&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=627531&quot;&gt;주요 사이트를 &lt;/a&gt;물린 트랩이 있습니다 . 충돌하는 스크립트를 맹목적으로 연결할 수는 없습니다. 엄격하지 않은 모드 스크립트와 함께 엄격 모드 스크립트를 연결해보십시오. 전체 연결이 엄격 해 보입니다! 그 반대의 경우도 마찬가지입니다 : 엄격하지 않은 플러스 엄격은 엄격하지 않습니다. 분명히, 스크립트의 연결이 이상적인 것은 아니지만 반드시 필요한 경우 기능별로 엄격하게 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d79411a38550f1777768ec88eb728359a1fabc0b" translate="yes" xml:space="preserve">
          <source>This tests for a global &lt;code&gt;Intl&lt;/code&gt; object, checks that it's not &lt;code&gt;null&lt;/code&gt; and that it has a &lt;code&gt;NumberFormat&lt;/code&gt; property that is a function.</source>
          <target state="translated">글로벌위한이 시험 &lt;code&gt;Intl&lt;/code&gt; 객체, 그렇지 않은 것을 확인 &lt;code&gt;null&lt;/code&gt; 있으며이있다 그 &lt;code&gt;NumberFormat&lt;/code&gt; 함수 속성을.</target>
        </trans-unit>
        <trans-unit id="0c7b2dfd21538cefc6243b00c498ce94e98de0bc" translate="yes" xml:space="preserve">
          <source>This trap can intercept these operations:</source>
          <target state="translated">이 트랩은 다음 작업을 가로 챌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44780b8b6d104dea26bfef46597862478326e5ef" translate="yes" xml:space="preserve">
          <source>This unpacks the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;displayName&lt;/code&gt; and &lt;code&gt;firstName&lt;/code&gt; from the user object and prints them.</source>
          <target state="translated">이것은 사용자 객체에서 &lt;code&gt;id&lt;/code&gt; , &lt;code&gt;displayName&lt;/code&gt; 및 &lt;code&gt;firstName&lt;/code&gt; 의 압축을 풀고 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="2e72e3a3418ec2d204fbf9885686c8cee5ab7178" translate="yes" xml:space="preserve">
          <source>This used to change a value on the global object which is rarely the expected effect. If you really want to set a value to the global object, pass it as an argument and explicitly assign it as a property:</source>
          <target state="translated">이것은 거의 예상 된 효과가 아닌 전역 객체의 값을 변경하는 데 사용되었습니다. 전역 객체에 실제로 값을 설정하려면 값을 인수로 전달하고 명시 적으로 속성으로 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="321fdbbee133de6d338ef5ef7c8b1150d19ef59b" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt; function to remove the enumerable keys (obtained with &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) from a list of all keys (obtained with &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;) leaving only the non-enumerable keys.</source>
          <target state="translated">이것은 사용 &lt;a href=&quot;../array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt; (으로 얻어진 키 열거 제거 기능 &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; 모든 키의리스트로부터) (얻어 &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; ) 만 비 열거 키를 떠나는.</target>
        </trans-unit>
        <trans-unit id="71fc3bcdf532ca114046a8f9b6f3e72e4c6060de" translate="yes" xml:space="preserve">
          <source>This uses the &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt; function to remove the enumerable keys (obtained with &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) from a list of all keys (obtained with &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;) thus giving only the non-enumerable keys as output.</source>
          <target state="translated">이것은 &lt;a href=&quot;../array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 모든 키 목록 ( &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; 얻은)에서 열거 가능한 키 ( &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; 얻은 ) 를 제거합니다. 할 수없는 키만 출력으로 제공합니다. .</target>
        </trans-unit>
        <trans-unit id="3c02e9c7a3c452cf4739f32629f3bba5108e1474" translate="yes" xml:space="preserve">
          <source>This value behaves slightly differently than mathematical infinity:</source>
          <target state="translated">이 값은 수학적 무한대와 약간 다르게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="00be7e991d66825c1ced6628eaf258a6382e117a" translate="yes" xml:space="preserve">
          <source>This value behaves slightly differently than mathematical infinity; see &lt;a href=&quot;number/positive_infinity&quot;&gt;&lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">이 값은 수학적 무한대와 약간 다르게 작동합니다. 자세한 내용은 &lt;a href=&quot;number/positive_infinity&quot;&gt; &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7fffb9a86edf50e0f87a0b2a9c08748436821f09" translate="yes" xml:space="preserve">
          <source>This value indicates:</source>
          <target state="translated">이 값은 다음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="48034df0e320e5ef796a29033dc21b65f9f3b5a7" translate="yes" xml:space="preserve">
          <source>This version might be used in for loops and the like when it is unknown whether non-BMP characters exist before the specified index position.</source>
          <target state="translated">이 버전은 지정된 인덱스 위치 이전에 BMP 이외 문자가 존재하는지 여부를 알 수없는 경우 for 루프 등에 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0a97fea9fad05d93f86710b42ddab43931ceeba" translate="yes" xml:space="preserve">
          <source>This way, in another script, we could have:</source>
          <target state="translated">이 방법으로 다른 스크립트에서 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe9a5081a4c414346879b2f958aec2a00dc20419" translate="yes" xml:space="preserve">
          <source>This will always be &lt;code&gt;false&lt;/code&gt;. (&lt;code&gt;!mycar&lt;/code&gt; will be evaluated before &lt;code&gt;instanceof&lt;/code&gt;, so you always try to know if a boolean is an instance of &lt;code&gt;Car&lt;/code&gt;).</source>
          <target state="translated">이것은 항상 &lt;code&gt;false&lt;/code&gt; 입니다. ( &lt;code&gt;!mycar&lt;/code&gt; 는 &lt;code&gt;instanceof&lt;/code&gt; 전에 평가 되므로 항상 부울이 &lt;code&gt;Car&lt;/code&gt; 의 인스턴스인지 확인하려고합니다 ).</target>
        </trans-unit>
        <trans-unit id="eb0e28917792ec578dc71cec340d6470748b6262" translate="yes" xml:space="preserve">
          <source>This will create a pseudo-property &lt;code&gt;latest&lt;/code&gt; for object &lt;code&gt;obj&lt;/code&gt;, which will return the last array item in &lt;code&gt;log&lt;/code&gt;.</source>
          <target state="translated">그러면 객체 &lt;code&gt;obj&lt;/code&gt; 에 대한 &lt;code&gt;latest&lt;/code&gt; 의사 속성이 만들어 지고 마지막 배열 항목이 &lt;code&gt;log&lt;/code&gt; 로 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="37a760abd8402149b9ad72f21d3ac28804ce7d37" translate="yes" xml:space="preserve">
          <source>This will define a pseudo-property &lt;code&gt;current&lt;/code&gt; of object language that, when assigned a value, will update &lt;code&gt;log&lt;/code&gt; with that value:</source>
          <target state="translated">이는 값이 할당 될 때 해당 값으로 &lt;code&gt;log&lt;/code&gt; 를 업데이트하는 객체 언어 의 의사 속성 &lt;code&gt;current&lt;/code&gt; 를 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="3cefb4be8f41f052ae7fd64b565e044e7ac52ef9" translate="yes" xml:space="preserve">
          <source>This will log a message containing 'hello world!'.</source>
          <target state="translated">'hello world!'가 포함 된 메시지가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="23e59f9e3a66f884c91f809acf557e7ebb34688a" translate="yes" xml:space="preserve">
          <source>This will log a message containing &lt;code&gt;'hello world!'&lt;/code&gt;.</source>
          <target state="translated">그러면 &lt;code&gt;'hello world!'&lt;/code&gt; 가 포함 된 메시지가 기록됩니다 . .</target>
        </trans-unit>
        <trans-unit id="9cee2a4ecc0015ec63b3c281e6605427d41fcd66" translate="yes" xml:space="preserve">
          <source>This will make the currency bold, when using the &lt;code&gt;formatToParts()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;formatToParts()&lt;/code&gt; 메서드를 사용할 때 통화가 굵게 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="8028172fe00091f1c1cf3fccd5b1a1ed5fc5633e" translate="yes" xml:space="preserve">
          <source>This will make the day period bold, when using the &lt;code&gt;formatToParts()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;formatToParts()&lt;/code&gt; 메서드를 사용할 때 낮 기간이 굵게 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="100ed6381b382eab7586beb70a7b65e5f7d35b63" translate="yes" xml:space="preserve">
          <source>This works with &lt;a href=&quot;#Dynamic_Imports&quot;&gt;dynamic imports&lt;/a&gt; as well:</source>
          <target state="translated">이것은 &lt;a href=&quot;#Dynamic_Imports&quot;&gt;동적 가져 오기&lt;/a&gt; 에서도 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="636db55917614035fe1b036f236d448914b79ae3" translate="yes" xml:space="preserve">
          <source>This would be correct:</source>
          <target state="translated">이것은 맞을 것입니다 :</target>
        </trans-unit>
        <trans-unit id="188c51ce091fb6e829236976f947e1e4bce2a47f" translate="yes" xml:space="preserve">
          <source>This would work, for example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9410a411b7f52a1be65e72497f953473df6e2875" translate="yes" xml:space="preserve">
          <source>This, however, returns &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; in Firefox:</source>
          <target state="translated">그러나 이것은 Firefox에서 &lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="09a7b6c28e17a2a60b04a76384d6bb9623973bd2" translate="yes" xml:space="preserve">
          <source>Three things to note about declared and undeclared variables:</source>
          <target state="translated">선언 된 변수와 선언되지 않은 변수에 대해 알아야 할 세 가지</target>
        </trans-unit>
        <trans-unit id="a870888fa60e764069405b004c2fe3eab15ca774" translate="yes" xml:space="preserve">
          <source>Throw an object</source>
          <target state="translated">물건을 던져</target>
        </trans-unit>
        <trans-unit id="24ec8833996f8992a0b4c3785e514bcae986e6ab" translate="yes" xml:space="preserve">
          <source>Throwing a custom error</source>
          <target state="translated">맞춤 오류 발생</target>
        </trans-unit>
        <trans-unit id="6ba4891001405ff1a4ec6b1cfe33bd10ec6a01cc" translate="yes" xml:space="preserve">
          <source>Throwing a generic error</source>
          <target state="translated">일반적인 오류 발생</target>
        </trans-unit>
        <trans-unit id="c389a8efc2390a1aa64a95dbca196af84249da0f" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such as it would read beyond the end of the view.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; 가 뷰의 끝을 넘어 읽도록 설정 되면 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="0922a946a5169cd26976b7ef72965c11c56aef37" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; is set such as it would store beyond the end of the view.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; 가 뷰의 끝을 넘어서 저장되도록 설정 되면 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="3e91d77e2cbdd56a77448393bc4f5e96543cdd4a" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;byteOffset&lt;/code&gt; or &lt;code&gt;byteLength&lt;/code&gt; parameter values result in the view extending past the end of the buffer.</source>
          <target state="translated">경우 발생 &lt;code&gt;byteOffset&lt;/code&gt; 또는 &lt;code&gt;byteLength&lt;/code&gt; 매개 변수 값은 버퍼의 끝을지나 연장 될 전망.</target>
        </trans-unit>
        <trans-unit id="bb3234934bcd796fdf4ef1e5d3add12530cfe9e2" translate="yes" xml:space="preserve">
          <source>Thrown if the &lt;code&gt;offset&lt;/code&gt; is set such as it would store beyond the end of the typed array.</source>
          <target state="translated">형식화 된 배열의 끝을 넘어서 저장할 수 있도록 &lt;code&gt;offset&lt;/code&gt; 이 설정된 경우 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="b8da8f7f44eb2e8aad25d07636127923f72337fc" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;Global_objects/SyntaxError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; if the property is an own non-configurable property.</source>
          <target state="translated">예외 &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;Global_objects/SyntaxError&lt;/code&gt; &lt;/a&gt; 에 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드&lt;/a&gt; 재산이 자신의 구성 할 수없는 속성입니다 경우.</target>
        </trans-unit>
        <trans-unit id="d767214910c80de840f71784865caecc6fb0b66e" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;strict mode&lt;/code&gt;&lt;/a&gt; if the property is an own non-configurable property.</source>
          <target state="translated">예외 &lt;a href=&quot;../global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 에 &lt;a href=&quot;../strict_mode&quot;&gt; &lt;code&gt;strict mode&lt;/code&gt; &lt;/a&gt; 재산이 자신의 구성 할 수없는 속성입니다 경우.</target>
        </trans-unit>
        <trans-unit id="d976806ffa3ac78e1eec4fa41bb8e665570edeb7" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; is out of bounds in the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 경우, &lt;code&gt;&lt;var&gt;index&lt;/var&gt;&lt;/code&gt; 의 범위를 벗어났습니다 &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3d5a15ba4e2883562ccc781325a904f1c1ed200" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;index&lt;/code&gt; is out of bounds in the &lt;code&gt;typedArray&lt;/code&gt;.</source>
          <target state="translated">예외 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 경우, &lt;code&gt;index&lt;/code&gt; 의 범위를 벗어났습니다 &lt;code&gt;typedArray&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e6a99a2a7ba0910c50ad732908be04470cf0773c" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; exception if the string to parse is not valid JSON.</source>
          <target state="translated">예외 &lt;a href=&quot;../syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 구문 분석에 문자열이 유효한 JSON이없는 경우 예외를.</target>
        </trans-unit>
        <trans-unit id="a4ac5c3d480d82b0a12a86f5a24ea2f76f4f7901" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;BigInt value can't be serialized in JSON&quot;) when trying to stringify a &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 캐릭터 라인 화하려고 할 때 ( &quot;의 BIGINT 값은 JSON으로 직렬화 할 수 없습니다&quot;) &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 값입니다.</target>
        </trans-unit>
        <trans-unit id="9b742f071cb53d20fd249f8f0e5f93c441ae76fb" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;cyclic object value&quot;) exception when a circular reference is found.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 순환 참조가 발견되면 ( &quot;환상 개체 값&quot;) 예외.</target>
        </trans-unit>
        <trans-unit id="c5dfdfcd952515fb76b078b574cbd5677fc65b9f" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception if the object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; is to be modified is non-extensible according to &lt;a href=&quot;isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;. Does nothing if the &lt;code&gt;prototype&lt;/code&gt; parameter isn't an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; (i.e., number, string, boolean, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;). Otherwise, this method changes the &lt;code&gt;[[Prototype]]&lt;/code&gt; of &lt;code&gt;obj&lt;/code&gt; to the new value.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 개체 경우 예외 &lt;code&gt;[[Prototype]]&lt;/code&gt; 비연 신성에있어서 개질 될을 &lt;a href=&quot;isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;prototype&lt;/code&gt; 매개 변수가 객체 또는 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 이 아닌 경우 (예 : number, string, boolean 또는 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; ) 아무 작업도 수행하지 않습니다 . 그렇지 않으면이 메소드 는 &lt;code&gt;obj&lt;/code&gt; 의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 을 새 값으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="3333628f0ecce9f8df87cce1b8b5ea238120f628" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; is not a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 공유되지 않습니다 &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="93d661497f452e06f5e196f867d1ebf61ee1cfad" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; is not one of the allowed integer types.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 허용 된 정수 유형 중 하나가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="5397c200d2a2ee90e06e0032022137c360cfe34b" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;typedArray&lt;/code&gt; 하지 않은 것입니다 &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7ed853f33a922f8707507e2c55422e5484a7c330" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;typedArray&lt;/code&gt; 공유되지 않습니다 &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7b0b3b69354d9aa876d74badc3490211a69d9c9a" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not a shared typed array type.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;typedArray&lt;/code&gt; 공유 형식화 된 배열 타입이다.</target>
        </trans-unit>
        <trans-unit id="48c5d4bb1483df722a7363fcd4779e6ef9f37814" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;typedArray&lt;/code&gt; is not one of the allowed integer types.</source>
          <target state="translated">예외 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;typedArray&lt;/code&gt; 허용 된 정수 유형 중 하나가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="6379845ba68b9ce053f692a29e59dd73bac1533b" translate="yes" xml:space="preserve">
          <source>Throws a user-defined exception.</source>
          <target state="translated">사용자 정의 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1900005b555b636b4c5a98c47e3b5430ad9cce7e" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when &lt;code&gt;&lt;em&gt;encodedURI&lt;/em&gt;&lt;/code&gt; contains invalid character sequences.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;encodedURI&lt;/em&gt;&lt;/code&gt; 에 잘못된 문자 시퀀스가 ​​포함 된 경우 &lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt; ( &quot;잘못된 URI 시퀀스&quot;) 예외가 발생 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ade68e28b40dd65aa4ae02bf634b315bc9197553" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when &lt;code&gt;&lt;var&gt;encodedURI&lt;/var&gt;&lt;/code&gt; contains invalid character sequences.</source>
          <target state="translated">예외 &lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; 의&lt;/a&gt; ( &quot;잘못된 시퀀스 URI&quot;) 예외 &lt;code&gt;&lt;var&gt;encodedURI&lt;/var&gt;&lt;/code&gt; 은 에 잘못된 문자 시퀀스가 ​​포함 합니다.</target>
        </trans-unit>
        <trans-unit id="d0596e3edf384baf6965162fe31f6e5aeabf2b6d" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;urierror&quot;&gt;&lt;code&gt;URIError&lt;/code&gt;&lt;/a&gt; (&quot;malformed URI sequence&quot;) exception when used wrongly.</source>
          <target state="translated">잘못 사용 하면 &lt;a href=&quot;urierror&quot;&gt; &lt;code&gt;URIError&lt;/code&gt; &lt;/a&gt; ( &quot;잘못된 URI 시퀀스&quot;) 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7679a34cdca145043e71acfbd4afa3f6f45b224c" translate="yes" xml:space="preserve">
          <source>Throws an error to a generator (also finishes the generator, unless caught from within that generator).</source>
          <target state="translated">제너레이터에 오류를 발생시킵니다 (제너레이터 내에서 잡히지 않는 한 제너레이터를 완료 함).</target>
        </trans-unit>
        <trans-unit id="cd29b66a9ed7f4874f06db4d5590c606798c05ae" translate="yes" xml:space="preserve">
          <source>Throws an error to a generator. This corresponds to the &lt;code&gt;throw()&lt;/code&gt; method in the ES2015 generator object.</source>
          <target state="translated">발전기에 오류를 발생시킵니다. 이것은 ES2015 생성기 객체 의 &lt;code&gt;throw()&lt;/code&gt; 메서드에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="92298a4c89aa669c689af0dc8dbe4bc0cec2e65f" translate="yes" xml:space="preserve">
          <source>Thus from the above example of class &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt;, it seems that &lt;code&gt;new.target&lt;/code&gt; points to the class definition of class which is initialized. For example, when &lt;code&gt;d&lt;/code&gt; was initialized using &lt;code&gt;new D()&lt;/code&gt;, the class definition of &lt;code&gt;D&lt;/code&gt; was printed; and similarly, in case of &lt;code&gt;c&lt;/code&gt;, the class &lt;code&gt;C&lt;/code&gt; was printed.</source>
          <target state="translated">따라서 위의 클래스 &lt;code&gt;C&lt;/code&gt; 및 &lt;code&gt;D&lt;/code&gt; 예제에서 &lt;code&gt;new.target&lt;/code&gt; 이 초기화 된 클래스의 클래스 정의를 가리키는 것으로 보입니다 . 예를 들어, &lt;code&gt;d&lt;/code&gt; 이용하여 초기화 된 &lt;code&gt;new D()&lt;/code&gt; 의 클래스 정의 &lt;code&gt;D&lt;/code&gt; 는 인쇄 하였다; 유사하게 &lt;code&gt;c&lt;/code&gt; 의 경우 클래스 &lt;code&gt;C&lt;/code&gt; 가 인쇄되었습니다.</target>
        </trans-unit>
        <trans-unit id="006e0d66e833b398c42cfcdef2352f749de24e90" translate="yes" xml:space="preserve">
          <source>Thus from the above example of class C and D, it seems that new.target points to the class Definition of class which is initialized. For example, when D was initialized using new, the class definition of D was printed and similarly in case of c, class C was printed</source>
          <target state="translated">따라서 위의 클래스 C 및 D 예제에서 new.target은 초기화 된 클래스의 클래스 정의를 가리키는 것으로 보입니다. 예를 들어, new를 사용하여 D를 초기화하면 D의 클래스 정의가 인쇄되고 c의 경우와 마찬가지로 C 클래스가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="8869c01d48f0801606614941c0ab16d5ec6cf1de" translate="yes" xml:space="preserve">
          <source>Thus names in strict mode &lt;code&gt;eval&lt;/code&gt; code behave identically to names in strict mode code not being evaluated as the result of &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">따라서 엄격 모드 &lt;code&gt;eval&lt;/code&gt; 코드의 이름은 엄격 평가 코드의 이름과 동일하게 &lt;code&gt;eval&lt;/code&gt; 의 결과로 평가되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c6c74f1c6a27fa19af3bb0c8b1fa0d332430eda3" translate="yes" xml:space="preserve">
          <source>Thus, any routine cleanup code done in that enclosed (or the main) section before it exits, will be skipped. However, If the try-block has a finally-block, then that finally-block code will be executed first to permit any such cleanup, and THEN the other try's catch-block (or the error-generator) will get control to handle the second exception.</source>
          <target state="translated">따라서, 종료되기 전에 동봉 된 (또는 기본) 섹션에서 수행 된 일상적인 정리 코드는 건너 뜁니다. 그러나 try-block에 finally-block이있는 경우 해당 clean-block 코드가 먼저 실행되어 이러한 정리를 허용 한 다음 다른 try 's catch-block (또는 오류 생성기)이 두 번째 예외.</target>
        </trans-unit>
        <trans-unit id="734772e40bb6d21a7d6769a3d97371f37de54286" translate="yes" xml:space="preserve">
          <source>Thus, in the &lt;code&gt;eval()&lt;/code&gt; version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called &lt;code&gt;Date()&lt;/code&gt;. This is incredibly inefficient compared to &lt;code&gt;Function()&lt;/code&gt;.</source>
          <target state="translated">따라서 코드 의 &lt;code&gt;eval()&lt;/code&gt; 버전에서 브라우저는 &lt;code&gt;Date()&lt;/code&gt; 라는 로컬 변수가 있는지 확인하기 위해 값 비싼 조회 호출을 수행해야합니다 . 이것은 &lt;code&gt;Function()&lt;/code&gt; 비해 매우 비효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="7d5f001fb79d8a238bf76ed9526f508a6f1ac77a" translate="yes" xml:space="preserve">
          <source>Thus, in the &lt;code&gt;eval()&lt;/code&gt; version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called &lt;code&gt;Date()&lt;/code&gt;. This is incredibly innefficient compared to &lt;code&gt;Function()&lt;/code&gt;.</source>
          <target state="translated">따라서 코드 의 &lt;code&gt;eval()&lt;/code&gt; 버전에서 브라우저는 비싼 조회 호출을 수행하여 &lt;code&gt;Date()&lt;/code&gt; 라는 로컬 변수가 있는지 확인해야 합니다. 이것은 &lt;code&gt;Function()&lt;/code&gt; 과 비교할 때 매우 비효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="960afc28473e8cfc97b5a580872af16e460681a1" translate="yes" xml:space="preserve">
          <source>Thus, presented below are two options for &lt;code&gt;Function.prototype.bind()&lt;/code&gt; polyfills:</source>
          <target state="translated">따라서 아래에 &lt;code&gt;Function.prototype.bind()&lt;/code&gt; 폴리 필에 대한 두 가지 옵션이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b2ba52891c01a48629ba1937711224af337bf0ed" translate="yes" xml:space="preserve">
          <source>Time to wait in milliseconds. &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;, if no time is provided.</source>
          <target state="translated">밀리 초 단위의 대기 시간 시간이 제공되지 않으면 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8554d053f59f2ea34bc31ee4681625faa76e305e" translate="yes" xml:space="preserve">
          <source>Timezone offset sign, either:</source>
          <target state="translated">시간대 오프셋 부호 :</target>
        </trans-unit>
        <trans-unit id="79697cbcd2045cc71c3c01ceb134196ebf980f06" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.entries()&lt;/code&gt; support in older environments that do not natively support it, you can use any of the following:</source>
          <target state="translated">기본적으로 지원하지 않는 이전 환경에서 호환 가능한 &lt;code&gt;Object.entries()&lt;/code&gt; 지원 을 추가하려면 다음 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="735010d8962f0aecbb49e6bc825b61c55829c7cd" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.entries&lt;/code&gt; support in older environments that do not natively support it, you can find a demonstrational implementation of Object.entries in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; (if you don't need any support for IE), a polyfill in the &lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-shims/Object.entries&lt;/a&gt; repositories, or you can use the simple, ready to deploy polyfill listed below.</source>
          <target state="translated">기본적으로 지원하지 않는 이전 환경에서 호환 가능한 &lt;code&gt;Object.entries&lt;/code&gt; 지원 을 추가하려면 &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entries&lt;/a&gt; (IE에 대한 지원이 필요하지 않은 경우) 에서 Object.entries의 데모 구현을 찾을 수 있습니다. &lt;a href=&quot;https://github.com/es-shims/Object.entries&quot;&gt;es-shims / Object.entries&lt;/a&gt; 리포지토리 의 폴리 필을 사용하거나 아래에 나열된 간단하고 즉시 배포 할 수있는 폴리 필을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11e8061b160ea169ddea72755f0b856618a737a7" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.keys&lt;/code&gt; support in older environments that do not natively support it, copy the following snippet:</source>
          <target state="translated">기본적으로 지원하지 않는 이전 환경에서 호환 가능한 &lt;code&gt;Object.keys&lt;/code&gt; 지원 을 추가하려면 다음 스 니펫을 복사하십시오.</target>
        </trans-unit>
        <trans-unit id="05bf4d01ba615f0cd3a215a0e64d9df3bd7f545e" translate="yes" xml:space="preserve">
          <source>To add compatible &lt;code&gt;Object.values&lt;/code&gt; support in older environments that do not natively support it, you can find a Polyfill in the &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39/proposal-object-values-entries&lt;/a&gt; or in the &lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims/Object.values&lt;/a&gt; repositories.</source>
          <target state="translated">기본적으로 지원하지 않는 이전 환경에서 호환 가능한 &lt;code&gt;Object.values&lt;/code&gt; 지원 을 추가하려면 &lt;a href=&quot;https://github.com/tc39/proposal-object-values-entries&quot;&gt;tc39 / proposal-object-values-entries&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/es-shims/Object.values&quot;&gt;es-shims / Object.values&lt;/a&gt; 저장소 에서 Polyfill을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e87c9dfadb234300ea044e3a6a526ff10cd3c440" translate="yes" xml:space="preserve">
          <source>To append a getter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">나중에 언제든지 기존 객체에 게터를 추가하려면 &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="659eb35f4c695cf5f4dcfc2937f3da494d4e2a1e" translate="yes" xml:space="preserve">
          <source>To append a setter to an &lt;em&gt;existing&lt;/em&gt; object, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;기존&lt;/em&gt; 객체에 setter를 추가하려면 &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a3e1471758522734b843aea1b4e92cd9ed7b6bb" translate="yes" xml:space="preserve">
          <source>To append a setter to an existing object later at any time, use &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">나중에 언제든지 기존 객체에 세터를 추가하려면 &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="229057f1da598e787ee444d5057c05857da31eb2" translate="yes" xml:space="preserve">
          <source>To avoid name clashes with your global symbol keys and other (library code) global symbols, it might be a good idea to prefix your symbols:</source>
          <target state="translated">전역 기호 키 및 기타 (라이브러리 코드) 전역 기호와 이름 충돌을 피하려면 기호 앞에 접두사를 붙이는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b126d6e2e80461da4f922af64279968f4f8c738b" translate="yes" xml:space="preserve">
          <source>To avoid the error, you need to either add a definition for &lt;code&gt;bar&lt;/code&gt; to the object or check for the existence of the &lt;code&gt;bar&lt;/code&gt; property before trying to access it; one way to do that is to use the &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt;&lt;/a&gt; method), like this:</source>
          <target state="translated">오류를 피하려면 &lt;code&gt;bar&lt;/code&gt; 에 대한 정의를 오브젝트에 추가하거나 액세스하기 전에 &lt;code&gt;bar&lt;/code&gt; 특성 의 존재를 점검 해야합니다. 이를 수행하는 한 가지 방법은 다음과 &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; &lt;/a&gt; 메소드 를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cad7a96c7701e37d8b09b86ca2aa88e3150eb037" translate="yes" xml:space="preserve">
          <source>To avoid the error, you need to either add a definition for &lt;code&gt;bar&lt;/code&gt; to the object or check for the existence of the &lt;code&gt;bar&lt;/code&gt; property before trying to access it; ways to do that include using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, or the &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt;&lt;/a&gt; method, like this:</source>
          <target state="translated">오류를 방지하려면 객체 에 &lt;code&gt;bar&lt;/code&gt; 에 대한 정의를 추가 하거나 액세스를 시도하기 전에 &lt;code&gt;bar&lt;/code&gt; 속성 의 존재를 확인 해야합니다. 이를 수행하는 방법에는 &lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 연산자 또는 &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; &lt;/a&gt; 사용이 포함됩니다. 메서드를 .</target>
        </trans-unit>
        <trans-unit id="ff71ce43fff60e2c7e40d45499a27a7de439dc4a" translate="yes" xml:space="preserve">
          <source>To avoid this just assign necessary constructor which you are going to use.</source>
          <target state="translated">이를 피하려면 사용할 생성자를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="ef05d88a53a4e9cf7aa2df5505542ee1fc23439c" translate="yes" xml:space="preserve">
          <source>To avoid this problem (to prevent ASI), you could use parentheses:</source>
          <target state="translated">이 문제를 피하려면 (ASI를 방지하기 위해) 괄호를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f1fb295cbfdf10675698a084f9573787dc73972" translate="yes" xml:space="preserve">
          <source>To avoid this problem, make sure that the property being assigned to inside the setter function is different from the one that initially triggered the setter.The same goes for the getter.</source>
          <target state="translated">이 문제를 방지하려면 setter 함수 내부에 할당되는 속성이 처음에 setter를 트리거 한 속성과 다른지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="14166ee0fec3c194f4fc0df0688a0bc1f17feb8b" translate="yes" xml:space="preserve">
          <source>To avoid this, just assign the necessary constructor you are going to use.</source>
          <target state="translated">이를 방지하려면 사용할 필요한 생성자를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="4ee0ee4bb579af779267dc3c125db70264731acb" translate="yes" xml:space="preserve">
          <source>To avoid this, make sure a new array is always filled with non-empty values or not write to indexes past the end of array.</source>
          <target state="translated">이를 방지하려면 새 배열이 항상 비어 있지 않은 값으로 채워지거나 배열의 끝을지나 인덱스에 쓰지 않도록하십시오.</target>
        </trans-unit>
        <trans-unit id="b1f701e4f578c53ab427a079283d5ee6a7b477b0" translate="yes" xml:space="preserve">
          <source>To be a constant object, the entire reference graph (direct and indirect references to other objects) must reference only immutable frozen objects. The object being frozen is said to be immutable because the entire object &lt;em&gt;state&lt;/em&gt; (values and references to other objects) within the whole object is fixed. Note that strings, numbers, and booleans are always immutable and that Functions and Arrays are objects.</source>
          <target state="translated">상수 객체가 되려면 전체 참조 그래프 (다른 객체에 대한 직접 및 간접 참조)는 불변의 고정 된 객체 만 참조해야합니다. 고정 된 개체는 전체 개체 내의 전체 개체 &lt;em&gt;상태&lt;/em&gt; (값 및 다른 개체에 대한 참조)가 고정되어 있기 때문에 변경할 수 없다고합니다 . 문자열, 숫자 및 부울은 항상 변경할 수 없으며 함수 및 배열은 객체입니다.</target>
        </trans-unit>
        <trans-unit id="de007351cb0387325d3097a635ab72efab68a96d" translate="yes" xml:space="preserve">
          <source>To be more precise, the block statement is preventing the function declaration from being &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; to the top of the scope. The function is behaving as if it were defined as a function expression and, as such, it is only the implicit variable declaration that gets hoisted to the top of the scope:</source>
          <target state="translated">더 정확하게 말하면, 블록 문은 함수 선언 이 스코프의 상단 으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;들어 올리지&lt;/a&gt; 못하게합니다 . 함수는 마치 함수 표현식으로 정의 된 것처럼 동작하며, 따라서 스코프의 맨 위로 올라가는 암시 적 변수 선언 일뿐입니다.</target>
        </trans-unit>
        <trans-unit id="91d84150764106dcb84b71d84665d49643ba81c1" translate="yes" xml:space="preserve">
          <source>To be more stringent in adhering to &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt; (which reserves !, ', (, ), and *), even though these characters have no formalized URI delimiting uses, the following can be safely used:</source>
          <target state="translated">&lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt; (!, ', (,) 및 *를 보유 함)을보다 엄격하게 준수하기 위해 이러한 문자에 정규화 된 URI 구분 사용이없는 경우에도 다음을 안전하게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ed4a43645f0a2537c0221912eb5a09df85356fb" translate="yes" xml:space="preserve">
          <source>To change &quot;foo&quot; inside the if statement, you need to remove the &lt;code&gt;let&lt;/code&gt; that causes the redeclaration.</source>
          <target state="translated">if 문에서 &quot;foo&quot;를 변경하려면 재 선언을 일으키는 &lt;code&gt;let&lt;/code&gt; 을 제거해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d405cf494444cd6fd79287277242d527e2322819" translate="yes" xml:space="preserve">
          <source>To change it, use &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이를 변경하려면 &lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="16cc73a3ccd7572782dfa5f7a136f79687bbbe73" translate="yes" xml:space="preserve">
          <source>To change it, you could use &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; though.</source>
          <target state="translated">변경하려면 &lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b23e40255a27317ad4c5e7988f79e6d83e22e91b" translate="yes" xml:space="preserve">
          <source>To check if cross origin isolation has been successful, you can test against the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;crossOriginIsolated&lt;/a&gt;&lt;/code&gt; property available to window and worker contexts:</source>
          <target state="translated">교차 오리진 격리가 성공했는지 확인하려면 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/crossOriginIsolated&quot;&gt;crossOriginIsolated&lt;/a&gt;&lt;/code&gt; 에 대해 테스트 할 수 있습니다. 창 및 작업자 컨텍스트에서 사용할 수 속성 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f129204df59c5d4904a8a7b491a530f5eecaa53" translate="yes" xml:space="preserve">
          <source>To check whether an implementation supports them, use the &lt;code&gt;&quot;i&quot;&lt;/code&gt; argument (a requirement that illegal language tags are rejected) and look for a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">구현에서이를 지원하는지 확인하려면 &lt;code&gt;&quot;i&quot;&lt;/code&gt; 인수 (잘못된 언어 태그가 거부되어야 함)를 사용하고 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 예외를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="cf6c25e7e31c11f7c29484cdde462e57ff8e0ec5" translate="yes" xml:space="preserve">
          <source>To compare numbers instead of strings, the compare function can simply subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;. The following function will sort the array ascending (if it doesn't contain &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">대신 문자열의 숫자를 비교하려면 비교 기능은 간단하게 뺄 수 &lt;code&gt;b&lt;/code&gt; 에서 . 다음 함수는 배열을 오름차순으로 정렬합니다 ( &lt;code&gt;Infinity&lt;/code&gt; 및 &lt;code&gt;NaN&lt;/code&gt; 을 포함하지 않는 경우 ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f0b72177be072c3cc5f16b4c720a3f88c9d6225" translate="yes" xml:space="preserve">
          <source>To compare numbers instead of strings, the compare function can simply subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;. The following function will sort the array in ascending order (if it doesn't contain &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;):</source>
          <target state="translated">대신 문자열의 숫자를 비교하려면 비교 기능은 간단하게 뺄 수 &lt;code&gt;b&lt;/code&gt; 에서 . 다음 함수는 배열을 오름차순으로 정렬합니다 ( &lt;code&gt;Infinity&lt;/code&gt; 및 &lt;code&gt;NaN&lt;/code&gt; 이 포함되지 않은 경우 ). &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37e2da601250c750672096a3ac258a97ae0d4506" translate="yes" xml:space="preserve">
          <source>To convert a number to its string literal in a particular radix, use &lt;code&gt;&lt;var&gt;thatNumber&lt;/var&gt;.toString(&lt;var&gt;radix&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="translated">숫자를 특정 기수의 문자열 리터럴로 변환하려면 &lt;code&gt;&lt;var&gt;thatNumber&lt;/var&gt;.toString(&lt;var&gt;radix&lt;/var&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af4d1fa2b60b0aab96f8363f72219fd6ee63d633" translate="yes" xml:space="preserve">
          <source>To convert number to its string literal in a particular radix use &lt;code&gt;intValue.toString(radix)&lt;/code&gt;.</source>
          <target state="translated">특정 기수에서 숫자를 문자열 리터럴로 변환하려면 &lt;code&gt;intValue.toString(radix)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bdd25ea23fa70526ba94776a9ffa7c104991659a" translate="yes" xml:space="preserve">
          <source>To convert the non-standard expression closures syntax to standard ECMAScript syntax, you can add curly braces and return statements.</source>
          <target state="translated">비표준 표현식 클로저 구문을 표준 ECMAScript 구문으로 변환하기 위해 중괄호와 return 문을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c3d95d344533848c975698d3517cac4ca51dc93" translate="yes" xml:space="preserve">
          <source>To count how many elements are in a &lt;code&gt;Set&lt;/code&gt;, use &lt;a href=&quot;set/size&quot;&gt;&lt;code&gt;Set.prototype.size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 에있는 요소 수를 계산하려면 &lt;a href=&quot;set/size&quot;&gt; &lt;code&gt;Set.prototype.size&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4a70476c40d7f474041614202b80673d7ed88ad9" translate="yes" xml:space="preserve">
          <source>To create a new primitive symbol, you write &lt;code&gt;Symbol()&lt;/code&gt; with an optional string as its description:</source>
          <target state="translated">새로운 기본 심볼을 만들려면 선택적 문자열을 설명으로 사용하여 &lt;code&gt;Symbol()&lt;/code&gt; 을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="78eca4ff24cae301e8c463b3113c921a5299b2f0" translate="yes" xml:space="preserve">
          <source>To customise the proxy, we define functions on the handler object:</source>
          <target state="translated">프록시를 사용자 정의하기 위해 핸들러 객체에 함수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="1b00f2f6bb9327ee2c8dec177efb6a4af21ed29e" translate="yes" xml:space="preserve">
          <source>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself another object. See the examples below.</source>
          <target state="translated">객체 유형을 정의하려면 이름과 속성을 지정하는 객체 유형에 대한 함수를 만듭니다. 객체는 그 자체가 다른 객체 인 속성을 가질 수 있습니다. 아래의 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4131b3bc54e63c2abd6c58d537708c1ccc9e759c" translate="yes" xml:space="preserve">
          <source>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself or another object. See the examples below.</source>
          <target state="translated">객체 유형을 정의하려면 해당 객체의 이름과 속성을 지정하는 함수를 작성하십시오. 객체는 그 자체 또는 다른 객체 인 속성을 가질 수 있습니다. 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b7c92209a721c1091a0c7a22d35353dd58f6f205" translate="yes" xml:space="preserve">
          <source>To dynamically import a module, the &lt;code&gt;import&lt;/code&gt; keyword may be called as a function. When used this way, it returns a promise.</source>
          <target state="translated">모듈을 동적으로 가져 오기 위해 &lt;code&gt;import&lt;/code&gt; 키워드를 함수로 호출 할 수 있습니다. 이런 식으로 사용하면 promise를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d87c4eabb66bc009e7eab7f129b2bc8668efc006" translate="yes" xml:space="preserve">
          <source>To escape a backtick in a template literal, put a backslash (&lt;code&gt;\&lt;/code&gt;)before the backtick.</source>
          <target state="translated">템플릿 리터럴에서 백틱을 이스케이프하려면 백틱 앞에 백 슬래시 ( &lt;code&gt;\&lt;/code&gt; )를 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="4b772057c1501138b9270507d45837bdfa729e3b" translate="yes" xml:space="preserve">
          <source>To execute multiple statements within a clause, use a block statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested &lt;code&gt;if&lt;/code&gt; statements:</source>
          <target state="translated">절 내에서 여러 명령문을 실행하려면 블록 명령문 ( &lt;code&gt;{ ... }&lt;/code&gt; )을 사용하여 해당 명령문을 그룹화하십시오. 일반적으로, 특히 중첩 된 &lt;code&gt;if&lt;/code&gt; 문이 포함 된 코드에서 항상 block 문을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="fb5b6aa172088f8e8cb00281ed35e00d5092703a" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">예를 들어 null 포인터를 &lt;code&gt;undefined&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; 값으로 수정하려면 &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; 연산자를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91a86984838df61ba0846a39480b0309f51a02cc" translate="yes" xml:space="preserve">
          <source>To fix null pointer to &lt;code&gt;undefined&lt;/code&gt; values, you can use the &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; operator, for example.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 값으로 널 포인터를 수정하려면 예를 들어 &lt;a href=&quot;../operators/typeof&quot;&gt;typeof&lt;/a&gt; 연산자를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5d0de1e00e0b24955b2e7edd966d5a8cb99b6bfe" translate="yes" xml:space="preserve">
          <source>To fix these errors, you will either need to replace the &lt;a href=&quot;../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt; operator&lt;/a&gt; with the &lt;a href=&quot;../operators/typeof&quot;&gt;&lt;code&gt;typeof&lt;/code&gt; operator&lt;/a&gt;, or to make sure you use the function name, instead of the result of its evaluation.</source>
          <target state="translated">이러한 오류를 해결하려면 &lt;a href=&quot;../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; 연산자&lt;/a&gt; 를 &lt;a href=&quot;../operators/typeof&quot;&gt; &lt;code&gt;typeof&lt;/code&gt; 연산자&lt;/a&gt; 로 바꾸 거나 평가 결과 대신 함수 이름을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="6b30ab0fa15a53ce2b025fb9fcebeedead602778" translate="yes" xml:space="preserve">
          <source>To fix this code, you need to access the object like this:</source>
          <target state="translated">이 코드를 수정하려면 다음과 같이 객체에 액세스해야합니다.</target>
        </trans-unit>
        <trans-unit id="0b75000801b86b4c7e3a6280f97393340f3378fc" translate="yes" xml:space="preserve">
          <source>To fix this code, you would need to add a parenthesis that closes the condition.</source>
          <target state="translated">이 코드를 수정하려면 조건을 닫는 괄호를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="86accf46f3e132880f45e8ff095e3c12c10d297a" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove line 16, where there is an attempt to set the temperature property, or you will need to implement a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt; for it, for example like this:</source>
          <target state="translated">이 오류를 해결하려면 온도 속성을 설정하려는 16 번 라인을 제거하거나 다음 과 같이 &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt; 를 구현해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bf97dc62646ce58482960a37576e08c369e17aa5" translate="yes" xml:space="preserve">
          <source>To fix this error, you will either need to remove the call to &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt; entirely, or move it to a position so that the property is added earlier and only later the object is marked as non-extensible. Of course you can also remove the property that was attempted to be added, if you don't need it.</source>
          <target state="translated">이 오류를 해결하려면 &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; 호출을 완전히 제거 하거나 속성을 더 일찍 추가하고 나중에 개체를 확장 할 수없는 것으로 표시하도록 위치로 이동해야합니다. 물론 필요하지 않은 경우 추가하려고 시도한 속성을 제거 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4ba67838ff27fd0b5e835c26d775ab0240d0d03" translate="yes" xml:space="preserve">
          <source>To fix this warning, the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; statement can just be omitted, because the variable exists already. In other cases, you might to rename either the function parameter or the variable name.</source>
          <target state="translated">이 경고를 수정하려면 변수가 이미 존재하므로 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 문을 생략하면됩니다. 다른 경우에는 함수 매개 변수 또는 변수 이름의 이름을 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="956ca320c80ca726eca3552fa06ab58884939c87" translate="yes" xml:space="preserve">
          <source>To force the base of an exponentiation expression to be a negative number:</source>
          <target state="translated">지수 표현식의 밑을 음수가되도록하려면 :</target>
        </trans-unit>
        <trans-unit id="421bbcc452e2335197d911b9dedefef9f4238ca7" translate="yes" xml:space="preserve">
          <source>To free the contents of a variable, you can set it to &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">변수의 내용을 비우려면 변수를 &lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 로&lt;/a&gt; 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52dba64c34ae66410ba3b4d58157ff01e4fa831f" translate="yes" xml:space="preserve">
          <source>To get Date, Month and Year or Time</source>
          <target state="translated">날짜, 월, 연도 또는 시간을 얻으려면</target>
        </trans-unit>
        <trans-unit id="9e05bade19c4913cbfab30bd2bf88e465332af90" translate="yes" xml:space="preserve">
          <source>To get more information (but with slower execution), use the &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method. (This is similar to the &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt; method.)</source>
          <target state="translated">더 많은 정보를 얻으려면 (그러나 실행 속도가 느림) &lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하십시오 . (이는 &lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt; 메서드 와 유사합니다 .)</target>
        </trans-unit>
        <trans-unit id="747d05132d9cc0d0814a6d6f49d6ab71a0abfb50" translate="yes" xml:space="preserve">
          <source>To get the same effect using template literals, you can now write:</source>
          <target state="translated">템플릿 리터럴을 사용하여 동일한 효과를 얻으려면 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="038ccd252ffc16f9a65c61b5b1a06febf39f6feb" translate="yes" xml:space="preserve">
          <source>To guard against this, something like the second line would be used, where &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;multiply&lt;/code&gt; is called with only one argument:</source>
          <target state="translated">이를 방지하기 위해 두 번째 줄과 같은 것이 사용됩니다. 여기서 &lt;code&gt;multiply&lt;/code&gt; 가 하나의 인수로만 호출 되면 &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; 는 &lt;code&gt;1&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="0cd3ea0c08a76d95e41cc575c73f75a27dbaa192" translate="yes" xml:space="preserve">
          <source>To guard against this, something like the second line would be used, where &lt;code&gt;b&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;multiply&lt;/code&gt; is called with only one argument:</source>
          <target state="translated">이것을 막기 위해 두 번째 줄과 같은 것이 사용됩니다. 여기서 하나의 인수로 &lt;code&gt;multiply&lt;/code&gt; 가 호출 되면 &lt;code&gt;b&lt;/code&gt; 는 &lt;code&gt;1&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="c97668d524a150f31ca392e34bb401cbf968f4d2" translate="yes" xml:space="preserve">
          <source>To help explain these properties and elements, see this example and then refer to the table below:</source>
          <target state="translated">이러한 속성과 요소를 설명하려면이 예를 참조한 다음 아래 표를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2281f8bdaf901641e3dec3fa6d152fcde978085a" translate="yes" xml:space="preserve">
          <source>To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;weak references&lt;/a&gt;.</source>
          <target state="translated">메모리 사용을 개선하고 메모리 누수를 방지하기 위해 Firefox는 추가 기능이 상위 문서가 손상된 후에 DOM 객체에 대한 강력한 참조를 유지할 수 없습니다. 죽은 개체는 DOM에서 파괴 된 후에도 지속되는 DOM 요소에 대한 강력한 참조를 유지합니다. 이러한 문제를 피하려면 외래 문서의 DOM 노드에 대한 참조를 해당 문서와 관련된 객체에 저장하고 문서를 언로드하거나 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;약한 참조&lt;/a&gt; 로 저장하면 정리해야합니다 .</target>
        </trans-unit>
        <trans-unit id="af8a11962f2fa3f3529a0d98f145c56042a6b760" translate="yes" xml:space="preserve">
          <source>To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;weak references&lt;/a&gt;.</source>
          <target state="translated">메모리 사용을 개선하고 메모리 누수를 방지하기 위해 Firefox는 상위 문서가 삭제 된 후 DOM 개체에 대한 강력한 참조를 유지하는 애드온을 허용하지 않습니다. 죽은 객체는 DOM에서 소멸 된 후에도 지속되는 DOM 요소에 대한 강력한 (활성 유지) 참조를 보유하고 있습니다. 이러한 문제를 방지하려면 외부 문서의 DOM 노드에 대한 참조를 해당 문서와 관련된 객체에 대신 저장하고 문서를 언로드 할 때 정리하거나 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.getWeakReference&quot;&gt;약한 참조&lt;/a&gt; 로 저장해야 합니다.</target>
        </trans-unit>
        <trans-unit id="18ada6a5fe0260eaa93b8a294f2a8aa0b6e264d2" translate="yes" xml:space="preserve">
          <source>To improve readability for numeric literals, underscores (&lt;code&gt;_&lt;/code&gt;, &lt;code&gt;U+005F&lt;/code&gt;) can be used as separators:</source>
          <target state="translated">숫자 리터럴의 가독성을 높이기 위해 밑줄 ( &lt;code&gt;_&lt;/code&gt; , &lt;code&gt;U+005F&lt;/code&gt; )을 구분 기호로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62ae4acb76421f9729079bcd34138c41da17b09d" translate="yes" xml:space="preserve">
          <source>To include a flag with the regular expression, use this syntax:</source>
          <target state="translated">정규식에 플래그를 포함 시키려면 다음 구문을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6d7b234f80319b329c9f890cf3c6fb0952c75d99" translate="yes" xml:space="preserve">
          <source>To instantiate the new objects, you then use the following:</source>
          <target state="translated">새 객체를 인스턴스화하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2da07bc6be7bd717dced39e45d7ac3036fc78a69" translate="yes" xml:space="preserve">
          <source>To invert the sign of the result of an exponentiation expression:</source>
          <target state="translated">지수 표현식 결과의 부호를 반전 시키려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="307515a0238257589b141add168f26a6658356a9" translate="yes" xml:space="preserve">
          <source>To invoke strict mode for an entire script, put the &lt;em&gt;exact&lt;/em&gt; statement &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; (or &lt;code&gt;'use strict';&lt;/code&gt;) before any other statements.</source>
          <target state="translated">전체 스크립트에 대해 엄격 모드를 호출하려면 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; &lt;em&gt;정확한&lt;/em&gt; 문장을 넣으십시오 . 다른 진술보다 먼저 (또는 &lt;code&gt;'use strict';&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f1bb7e56e4e1c57532789b488df9a11f77ade640" translate="yes" xml:space="preserve">
          <source>To learn about the way promises work and how you can use them, we advise you to read &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Using promises&lt;/a&gt; first.</source>
          <target state="translated">프라 미스의 작동 방식과 사용 방법에 대해 알아 보려면 먼저 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;프라 미스 사용&lt;/a&gt; 을 읽어 보는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="75ac8e5447823b69e4e0fe22510dea636a6c8749" translate="yes" xml:space="preserve">
          <source>To learn more about ES2015 generators, see:</source>
          <target state="translated">ES2015 생성기에 대한 자세한 내용은 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="576cfdce3de5306eb146e890163b32ca758257fd" translate="yes" xml:space="preserve">
          <source>To make &quot;bar&quot; a declared variable, you can add the &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; keyword in front of it.</source>
          <target state="translated">&quot;bar&quot;를 선언 된 변수로 만들려면 변수 앞에 &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 키워드를 추가하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="7f704faae950a1e35871b3c65d28aa063776d91a" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;finally&lt;/code&gt; blocks of a sync generator to be always called use appropriate form of the loop, &lt;code&gt;for await...of&lt;/code&gt; for the async generator and &lt;code&gt;for...of&lt;/code&gt; for the sync one and await yielded promises explicitly inside the loop.</source>
          <target state="translated">만들려면 &lt;code&gt;finally&lt;/code&gt; , 루프의 동기 발전기의 블록 항상 호출 할 사용 적절한 형태 &lt;code&gt;for await...of&lt;/code&gt; 비동기 발전기와 &lt;code&gt;for...of&lt;/code&gt; 동기에 대 한 하나의 루프 내부에 명시 적으로 약속을 산출 기다리고 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d1fdea6be9a37db2a93137b0b09db6d812a2958" translate="yes" xml:space="preserve">
          <source>To make an object immutable, recursively freeze each property which is of type object (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycle_(graph_theory)&quot;&gt;cycles&lt;/a&gt; in the reference graph, otherwise an endless loop will be triggered. An enhancement to &lt;code&gt;deepFreeze()&lt;/code&gt; would be to have an internal function that receives a path (e.g. an Array) argument so you can suppress calling &lt;code&gt;deepFreeze()&lt;/code&gt; recursively when an object is in the process of being made immutable. You still run a risk of freezing an object that shouldn't be frozen, such as [window].</source>
          <target state="translated">객체를 불변으로 만들려면 객체 유형 인 각 속성을 재귀 적으로 동결합니다 (딥 동결). 객체가 참조 그래프에 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cycle_(graph_theory)&quot;&gt;주기&lt;/a&gt; 를 포함하지 않는다는 것을 알고있는 경우 디자인에 따라 사례별로 패턴을 사용하십시오. 그렇지 않으면 무한 루프가 트리거됩니다. &lt;code&gt;deepFreeze()&lt;/code&gt; 의 향상된 기능은 경로 (예 : Array) 인수를받는 내부 함수를 가지므로 객체가 불변으로 만들어 질 때 &lt;code&gt;deepFreeze()&lt;/code&gt; 재귀 적으로 호출하는 것을 억제 할 수 있습니다 . 여전히 [window]와 같이 고정하면 안되는 개체를 고정 할 위험이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b6d41263a3058c202ec56d40a9d6b8e1652059e" translate="yes" xml:space="preserve">
          <source>To make an object immutable, recursively freeze each property which is of type object (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no &lt;em&gt;Unknown prefix: Cycle_(graph_theory).&lt;/em&gt; in the reference graph, otherwise an endless loop will be triggered. An enhancement to &lt;code&gt;deepFreeze()&lt;/code&gt; would be to have an internal function that receives a path (e.g. an Array) argument so you can suppress calling &lt;code&gt;deepFreeze()&lt;/code&gt; recursively when an object is in the process of being made immutable. You still run a risk of freezing an object that shouldn't be frozen, such as [window].</source>
          <target state="translated">객체를 불변으로 만들려면 객체 유형의 각 속성을 재귀 적으로 고정합니다 (깊은 고정). 객체에 &lt;em&gt;알 수없는 접두사&lt;/em&gt; 가없는 것을 &lt;em&gt;알&lt;/em&gt; 때 디자인에 따라 사례별로 패턴을 사용하십시오 &lt;em&gt;. Cycle_ (graph_theory).&lt;/em&gt; 참조 그래프에서 그렇지 않으면 무한 루프가 트리거됩니다. &lt;code&gt;deepFreeze()&lt;/code&gt; 의 개선점 은 경로 (예 : Array) 인수를받는 내부 함수를 가지므로 객체가 불변으로 &lt;code&gt;deepFreeze()&lt;/code&gt; 과정에서 deepFreeze ()를 재귀 적으로 호출하는 것을 억제 할 수 있습니다 . [window]와 같이 동결되어서는 안되는 물체가 동결 될 위험이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1efb7a94840c6df8e1529f399f820556da3a48dc" translate="yes" xml:space="preserve">
          <source>To match characters from other languages such as Cyrillic or Hebrew, use &lt;code&gt;\u&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt;, where &lt;code&gt;&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; is the character's Unicode value in hexadecimal.</source>
          <target state="translated">키릴 자모 또는 히브리어와 같은 다른 언어의 문자를 일치 시키려면 &lt;code&gt;\u&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; 사용 하십시오 . 여기서 &lt;code&gt;&lt;var&gt;hhhh&lt;/var&gt;&lt;/code&gt; 는 16 진수로 된 문자의 유니 코드 값입니다.</target>
        </trans-unit>
        <trans-unit id="cdd97829643819341bae18d4865a301c7a49ae25" translate="yes" xml:space="preserve">
          <source>To mimic the function of the &lt;code&gt;includes()&lt;/code&gt; method, this custom function returns &lt;code&gt;true&lt;/code&gt; if the element exists in the array:</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; 메소드 의 기능을 모방하기 위해이 사용자 정의 함수는 요소가 배열에 존재하면 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="c99a2f7ab2302c62cb1ccbd0c741ca57d774dc7e" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;Date.now()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">타이밍 공격 및 지문으로부터 보호하기 위해 브라우저 설정에 따라 &lt;code&gt;Date.now()&lt;/code&gt; 의 정밀도 가 반올림 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="96915bb562bd10f7386212a4daf00e9d0be01c6c" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;new Date().getTime()&lt;/code&gt; might get rounded depending on browser settings.</source>
          <target state="translated">타이밍 공격 및 지문으로부터 보호하기 위해 브라우저 설정에 따라 &lt;code&gt;new Date().getTime()&lt;/code&gt; 의 정밀도 가 반올림 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfcee662fb59dd61867d35e910871be399e7d731" translate="yes" xml:space="preserve">
          <source>To offer protection against timing attacks and fingerprinting, the precision of &lt;code&gt;new Date().getTime()&lt;/code&gt; might get rounded depending on browser settings. In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20&amp;micro;s in Firefox 59; in 60 it will be 2ms.</source>
          <target state="translated">타이밍 공격 및 핑거 프린팅에 대한 보호를 제공하기 위해 &lt;code&gt;new Date().getTime()&lt;/code&gt; 의 정밀도는 브라우저 설정에 따라 반올림 될 수 있습니다. Firefox에서는 &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; 기본 설정이 기본적으로 활성화되어 있으며 Firefox 59에서는 기본값이 20&amp;micro;s입니다. 60 분에는 2ms가됩니다.</target>
        </trans-unit>
        <trans-unit id="ac37440f1ea5fb363f65d9cc2e0bc140f034f623" translate="yes" xml:space="preserve">
          <source>To pass the value of &lt;code&gt;this&lt;/code&gt; from one context to another, use &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="translated">한 컨텍스트에서 다른 컨텍스트 &lt;code&gt;this&lt;/code&gt; 값을 전달하려면 &lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt;&lt;strong&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4cf44ffc496e1c3ddaf8ae8f93838d413caef85" translate="yes" xml:space="preserve">
          <source>To perform a global search and replace, include the &lt;code&gt;g&lt;/code&gt; switch in the regular expression.</source>
          <target state="translated">글로벌 검색 및 바꾸기를 수행하려면 정규식에 &lt;code&gt;g&lt;/code&gt; 스위치를 포함 시키십시오 .</target>
        </trans-unit>
        <trans-unit id="f23eacdabe4319920cbeec8293bbfab4a25022b3" translate="yes" xml:space="preserve">
          <source>To provide a function with promise functionality, simply have it return a promise:</source>
          <target state="translated">약속 기능을 가진 기능을 제공하려면 간단히 약속을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="eefa6ae82f1c0d30ce5bb0a330d91982a9f8b2a7" translate="yes" xml:space="preserve">
          <source>To re-run a definition, use Scratchpad's menu Execute &amp;gt; Reload and Run.</source>
          <target state="translated">정의를 다시 실행하려면 Scratchpad의 메뉴 실행&amp;gt; 다시로드 및 실행을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ca212f1a4ca5b68e70b2f13799d3d4a605bdfbe3" translate="yes" xml:space="preserve">
          <source>To remove a watchpoint, use the &lt;a href=&quot;unwatch&quot;&gt;&lt;code&gt;unwatch()&lt;/code&gt;&lt;/a&gt; method. By default, the &lt;code&gt;watch&lt;/code&gt; method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주 &lt;a href=&quot;unwatch&quot;&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;/a&gt; 을 제거하려면 unwatch () 메소드를 사용하십시오 . 기본적으로 &lt;code&gt;watch&lt;/code&gt; 메소드는 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; 의&lt;/a&gt; 하위 오브젝트로 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="87769fb85ddf637fc522a9dfb87a72113fd21eef" translate="yes" xml:space="preserve">
          <source>To represent integers smaller than this, consider using &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이보다 작은 정수를 나타내려면 &lt;a href=&quot;../bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ee6bc67f7ce03bb1e34c845d08bbc1ab32fdec2" translate="yes" xml:space="preserve">
          <source>To return a value other than the default, a function must have a &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; statement that specifies the value to return. A function without a return statement will return a default value. In the case of a &lt;a href=&quot;global_objects/object/constructor&quot;&gt;constructor&lt;/a&gt; called with the &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; keyword, the default value is the value of its &lt;code&gt;this&lt;/code&gt; parameter. For all other functions, the default return value is &lt;a href=&quot;global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본값 이외의 값을 반환하려면 함수에 &lt;code&gt;&lt;a href=&quot;statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 할 값을 지정 하는 return 문이 있어야합니다 . return 문이없는 함수는 기본값을 반환합니다. &lt;code&gt;&lt;a href=&quot;operators/new&quot;&gt;new&lt;/a&gt;&lt;/code&gt; 키워드로 호출 된 &lt;a href=&quot;global_objects/object/constructor&quot;&gt;생성자&lt;/a&gt; 의 경우 기본값은 &lt;code&gt;this&lt;/code&gt; 매개 변수 의 값입니다 . 다른 모든 함수의 경우 기본 반환 값은 &lt;a href=&quot;global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bbe3e5bf31754ac82a3fa0bb9dc3481a4afd3106" translate="yes" xml:space="preserve">
          <source>To return an object literal expression requires parentheses around expression:</source>
          <target state="translated">객체 리터럴 표현식을 반환하려면 표현식을 괄호로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="d31111b28eb9b4fc6974976c91cab6c393986b53" translate="yes" xml:space="preserve">
          <source>To rewrite &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; statements so that values can be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; as well, you need to guard around &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">재 작성 &lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt; 값이 될 수 있도록 문 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 와 &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; 뿐만 아니라, 당신이 주변에 조심할 필요 &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7e88d9bfb366adfc5ca7ab4e34ccc17a0c2342ad" translate="yes" xml:space="preserve">
          <source>To rewrite &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each...in&lt;/code&gt;&lt;/a&gt; statements so that values can be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; with &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; as well, you need to guard around &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">재 작성 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt; &lt;code&gt;for each...in&lt;/code&gt; &lt;/a&gt; 값이 될 수 있도록 문 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 와 &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; 뿐만 아니라, 당신이 주변에 조심할 필요 &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ae85078dfd808f11e87a09a90b41a86b6930269f" translate="yes" xml:space="preserve">
          <source>To see how this works, this is how it would look if the nesting were properly indented:</source>
          <target state="translated">이것이 어떻게 작동하는지 보려면 중첩이 제대로 들여 쓰기 된 경우의 모습입니다.</target>
        </trans-unit>
        <trans-unit id="6d3d253ad399aba71e8bddceac06b64b3c64fcf9" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt; by Douglas Crockford) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">순환 참조를 직렬화하려면이를 참조하는 라이브러리 (예 : Douglas Crockford의 &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt; )를 사용하거나 직접 솔루션을 구현할 수 있습니다.이 경우 순환 참조를 직렬화 가능한 값으로 찾아서 바꾸거나 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="61341a387a73c6e0974b541c310c31fa835bad37" translate="yes" xml:space="preserve">
          <source>To serialize circular references you can use a library that supports them (e.g. &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt;) or implement a solution by yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.</source>
          <target state="translated">순환 참조를 직렬화하려면 순환 참조를 지원하는 라이브러리 (예 : &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/cycle.js&quot;&gt;cycle.js&lt;/a&gt; )를 사용하거나 직접 솔루션을 구현할 수 있습니다.이 경우 순환 참조를 직렬화 가능한 값으로 찾아서 바꾸거나 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="10e0214ad945a12c3e4bcb01423a2eee0fe2f7da" translate="yes" xml:space="preserve">
          <source>To set the value of &lt;code&gt;this&lt;/code&gt; to a particular value when calling a function, use &lt;a href=&quot;../global_objects/function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; as in the examples below.</source>
          <target state="translated">의 값을 설정하기 위해 &lt;code&gt;this&lt;/code&gt; 함수를 호출 할 때 사용하는 특정 값 &lt;a href=&quot;../global_objects/function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; , 또는 &lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; 하기 실시 예에서와 같이.</target>
        </trans-unit>
        <trans-unit id="66dfb8b03b279299af3ce7e3e3995c740c761e43" translate="yes" xml:space="preserve">
          <source>To share memory using &lt;a href=&quot;sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; objects from one agent in the cluster to another (an agent is either the web page&amp;rsquo;s main program or one of its web workers), &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;structured cloning&lt;/a&gt; is used.</source>
          <target state="translated">클러스터의 한 에이전트에서 다른 에이전트로 &lt;a href=&quot;sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; 객체를 사용하여 메모리를 공유하려면 (에이전트는 웹 페이지의 기본 프로그램이거나 웹 워커 중 하나임) &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage&lt;/a&gt;&lt;/code&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;구조적 복제&lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4c69f72f8a8e1556fbbba4284e4de161a49d7aa0" translate="yes" xml:space="preserve">
          <source>To solve this, &lt;code&gt;Math.fround()&lt;/code&gt; can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a &quot;round to even&quot; on the 23rd bit of the mantissa, and sets all following mantissa bits to &lt;code&gt;0&lt;/code&gt;. If the number is outside the range of a 32-bit float, &lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-Infinity&lt;/code&gt; is returned.</source>
          <target state="translated">이를 해결하기 위해 &lt;code&gt;Math.fround()&lt;/code&gt; 를 사용하여 64 비트 부동 소수점을 32 비트 부동 소수점으로 캐스트 할 수 있습니다. 내부적으로 JavaScript는 계속해서 숫자를 64 비트 부동 소수점으로 처리하고 가수의 23 번째 비트에서 &quot;반올림&quot;을 수행하고 다음의 모든 가수 비트를 &lt;code&gt;0&lt;/code&gt; 으로 설정합니다 . 숫자가 32 비트 부동 소수점 범위를 벗어나면 &lt;a href=&quot;../infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;-Infinity&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="51294f1892b4cc30fb189f09c42cde8df76f4c80" translate="yes" xml:space="preserve">
          <source>To solve this, &lt;code&gt;Math.fround()&lt;/code&gt; can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a &quot;round to even&quot; on the 23rd bit of the mantissa, and sets all following mantissa bits to &lt;code&gt;0&lt;/code&gt;. If the number is outside the range of a 32-bit float, &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt; is returned.</source>
          <target state="translated">이를 해결하기 위해 &lt;code&gt;Math.fround()&lt;/code&gt; 를 사용하여 64 비트 부동 소수점을 32 비트 부동 소수점으로 캐스트 할 수 있습니다. 내부적으로 JavaScript는 숫자를 64 비트 부동 소수점으로 계속 처리하며 가수의 23 비트에서 &quot;짝수로&quot;반올림 만 수행하며 다음의 가수 비트를 모두 &lt;code&gt;0&lt;/code&gt; 으로 설정합니다 . 숫자가 32 비트 부동 소수점 범위를 벗어나면 &lt;code&gt;&lt;a href=&quot;../infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;-Infinity&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="6b99e751f92b027a44ab3719b0e301b6ed16d648" translate="yes" xml:space="preserve">
          <source>To sum up values contained in an array of objects you &lt;strong&gt;must&lt;/strong&gt; supply an initial value so that each item passes through your function.</source>
          <target state="translated">당신이 객체의 배열에 포함 된 값을 정리해 &lt;strong&gt;해야한다&lt;/strong&gt; 각 항목이 함수를 통과하도록 초기 값을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="aedd09040224912bb4fa03a83868a27bf974dd84" translate="yes" xml:space="preserve">
          <source>To sum up, the values contained in an array of objects, you &lt;strong&gt;must&lt;/strong&gt; supply an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, so that each item passes through your function.</source>
          <target state="translated">요약하면, 값이 객체의 배열에 포함, 당신은 &lt;strong&gt;해야한다&lt;/strong&gt; 공급 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 각 항목이 함수를 통과 그래서.</target>
        </trans-unit>
        <trans-unit id="ff9bdaefda4afeb1b2d3c5e304f7dfdacddbf997" translate="yes" xml:space="preserve">
          <source>To test if an object is not an &lt;code&gt;instanceof&lt;/code&gt; a specific constructor, you can do</source>
          <target state="translated">객체가 특정 생성자 의 &lt;code&gt;instanceof&lt;/code&gt; 가 아닌지 테스트하려면 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d113798c2a75c1ed214232bb80df9ddd29edac47" translate="yes" xml:space="preserve">
          <source>To test if an object is not an instanceof a specific Constructor, you can do</source>
          <target state="translated">객체가 특정 생성자의 인스턴스가 아닌지 테스트하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="6189e37965976e54d4248b20bb1532f0b7800f11" translate="yes" xml:space="preserve">
          <source>To understand how prototypes are used for inheritance, see guide article &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">상속에 프로토 타입이 사용되는 방법을 이해하려면 가이드 문서 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;상속 및 프로토 타입 체인을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d0c27c1563eef054518761c7a92f5cf21d8d5ac6" translate="yes" xml:space="preserve">
          <source>To understand how prototypes are used for inheritance, see guide article &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain&lt;/a&gt;.</source>
          <target state="translated">프로토 타입이 상속에 사용되는 방법을 이해하려면 가이드 문서 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;상속 및 프로토 타입 체인을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aae9c12807500fea71bdcc71051a39f54f1052f0" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;Array&lt;/code&gt; methods on the &lt;code&gt;arguments&lt;/code&gt; object, it must be converted to a real array first.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 객체에서 &lt;code&gt;Array&lt;/code&gt; 메서드 를 사용하려면 먼저 실제 배열로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="75f905abea55b3adbcb30a94d7249e1c63fef4e2" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;new&lt;/code&gt; with an array of parameters without spread syntax, you would have to do it &lt;strong&gt;indirectly&lt;/strong&gt; through partial application:</source>
          <target state="translated">전개 구문없이 매개 변수 배열과 함께 &lt;code&gt;new&lt;/code&gt; 를 사용하려면 부분적 적용을 통해 &lt;strong&gt;간접적으로&lt;/strong&gt; 수행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="04a0acd17137930958c4357224572608c36ceb9a" translate="yes" xml:space="preserve">
          <source>To use new with an array of parameters without spread syntax, you would have to do it &lt;strong&gt;indirectly&lt;/strong&gt; through partial application:</source>
          <target state="translated">스프레드 구문없이 매개 변수 배열에 new를 사용하려면 부분 응용 프로그램을 통해 &lt;strong&gt;간접적으로&lt;/strong&gt; 수행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7274f7dbf9016c13ad74c7d68af0822075863807" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;Object.prototype.toString()&lt;/code&gt; with every object, you need to call &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; on it, passing the object you want to inspect as the first parameter (called &lt;code&gt;thisArg&lt;/code&gt;).</source>
          <target state="translated">모든 객체에 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; 을 사용하려면 여기에 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; 를 호출 하고 검사 할 객체를 첫 번째 매개 변수 ( &lt;code&gt;thisArg&lt;/code&gt; 라고 함)로 전달해야합니다. ).</target>
        </trans-unit>
        <trans-unit id="660ef13750fc5d9c949b57cdae0a4e8e70e15f7a" translate="yes" xml:space="preserve">
          <source>Too much recursion</source>
          <target state="translated">너무 많은 재귀</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="c2313470950f865647156a7a4a25ce3c2e83792f" translate="yes" xml:space="preserve">
          <source>Trailing ; is now optional.</source>
          <target state="translated">후행; 이제 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="e55b06e9f89f5676c1b49a5534be9075559f2b41" translate="yes" xml:space="preserve">
          <source>Trailing comma in parameters</source>
          <target state="translated">매개 변수의 후행 쉼표</target>
        </trans-unit>
        <trans-unit id="7b5b3a2e5f602edd973d6bc7c27d9b7106a52ef4" translate="yes" xml:space="preserve">
          <source>Trailing commas</source>
          <target state="translated">후행 쉼표</target>
        </trans-unit>
        <trans-unit id="42a3bb278c71efefd64c79603bbd7e4b085a3e13" translate="yes" xml:space="preserve">
          <source>Transitioning to strict mode</source>
          <target state="translated">엄격 모드로 전환</target>
        </trans-unit>
        <trans-unit id="7677dc0a64e242392b7b759584fdce97846e967e" translate="yes" xml:space="preserve">
          <source>Tricky use case</source>
          <target state="translated">까다로운 사용 사례</target>
        </trans-unit>
        <trans-unit id="5c4f40eb67c2580cbb047c0c2d7b18e62cfc6b44" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.</source>
          <target state="translated">문자열의 시작과 끝에서 공백을 자릅니다. ECMAScript 5 표준의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="589248aae63e048840e2320146a334266180f14a" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the beginning of the string.</source>
          <target state="translated">문자열의 시작 부분에서 공백을 자릅니다.</target>
        </trans-unit>
        <trans-unit id="f98e79143326b9112cafa11878a9f99a93d9f8f4" translate="yes" xml:space="preserve">
          <source>Trims whitespace from the end of the string.</source>
          <target state="translated">문자열 끝에서 공백을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="4d46d56fedff8d9d8e85c637f94cca6486220b3d" translate="yes" xml:space="preserve">
          <source>Try it:</source>
          <target state="translated">시도 해봐:</target>
        </trans-unit>
        <trans-unit id="ce521adbbb8a6a96e8c658ce0f73754df5d00657" translate="yes" xml:space="preserve">
          <source>Trying to delete a non-configurable property</source>
          <target state="translated">구성 할 수없는 속성을 삭제하려고 시도</target>
        </trans-unit>
        <trans-unit id="0bc27c8a219ca95024ca4076d021dd8abbc3f750" translate="yes" xml:space="preserve">
          <source>Trying to obtain the class of &lt;code&gt;fooInstance&lt;/code&gt; via &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; won't give us the class name at all but a reference to the static class method. Example:</source>
          <target state="translated">&lt;code&gt;fooInstance&lt;/code&gt; .constructor.name을 통해 &lt;code&gt;fooInstance.constructor.name&lt;/code&gt; 클래스를 얻으려고 시도 하면 정적 클래스 메소드에 대한 참조 이외의 클래스 이름이 제공되지 않습니다. 예:</target>
        </trans-unit>
        <trans-unit id="40cfb43d46ab09f148bea5b1d9e1aa5abb45e0bb" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;code&gt;Object.defineProperty()&lt;/code&gt; on native objects throws an error.</source>
          <target state="translated">기본 객체에서 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 를 사용하려고 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="42aa153f6061661d917a475e9e234bf07b1cb4ae" translate="yes" xml:space="preserve">
          <source>Tutorial on proxies</source>
          <target state="translated">프록시에 대한 자습서</target>
        </trans-unit>
        <trans-unit id="f48575e167a871ba14022198cbf7f03912cfd2c1" translate="yes" xml:space="preserve">
          <source>Two Boolean operands are strictly equal if both are &lt;code&gt;true&lt;/code&gt; or both are &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">두 부울 피연산자는 모두 &lt;code&gt;true&lt;/code&gt; 또는 둘 다 &lt;code&gt;false&lt;/code&gt; 인 경우 엄격하게 같습니다 .</target>
        </trans-unit>
        <trans-unit id="87c778f38cdd455f723836213ff5541f9312375a" translate="yes" xml:space="preserve">
          <source>Two Mozilla-specific caveats: First, if your code is JavaScript 1.7 or greater (for example in chrome code or when using the right &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt;) and is strict mode code, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; have the functionality they've had since those keywords were first introduced. But strict mode code on the web, loaded with &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;, won't be able to use &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;yield&lt;/code&gt; as identifiers. Second, while ES5 unconditionally reserves the words &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, and &lt;code&gt;super&lt;/code&gt;, before Firefox 5 Mozilla reserved them only in strict mode.</source>
          <target state="translated">두 모질라 고유의주의 사항 : 코드는 (크롬 코드에서 예를 들어, 또는 권리를 사용하는 경우 자바 스크립트 1.7 이상하는 경우, 최초로 &lt;code&gt;&amp;lt;script type=&quot;&quot;&amp;gt;&lt;/code&gt; ) 엄격 모드 코드이며, &lt;code&gt;let&lt;/code&gt; 및 &lt;code&gt;yield&lt;/code&gt; 그들이했습니다 기능을 가지고 그 키워드가 처음 소개 된 이래로 그러나 &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; 로 로드 된 웹의 엄격한 모드 코드는 &lt;code&gt;let&lt;/code&gt; / &lt;code&gt;yield&lt;/code&gt; 를 식별자 로 사용할 수 없습니다 . 둘째, ES5는 &lt;code&gt;class&lt;/code&gt; , &lt;code&gt;enum&lt;/code&gt; , &lt;code&gt;export&lt;/code&gt; , &lt;code&gt;extends&lt;/code&gt; , &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;super&lt;/code&gt; 단어를 무조건 예약합니다.Firefox 5 Mozilla가 엄격 모드에서만 예약했습니다.</target>
        </trans-unit>
        <trans-unit id="c90bd8efd9aba75342919e60f01051208a1b0dbe" translate="yes" xml:space="preserve">
          <source>Two digit day of the month, padded on the left a zero if necessary</source>
          <target state="translated">월의 두 자리 일, 필요한 경우 왼쪽이 0으로 채워짐</target>
        </trans-unit>
        <trans-unit id="06ba5800961ba03ca52214a88183a949ee3568cc" translate="yes" xml:space="preserve">
          <source>Two digit hour offset, e.g. &quot;14&quot;</source>
          <target state="translated">두 자리 시간 오프셋 (예 : &quot;14&quot;)</target>
        </trans-unit>
        <trans-unit id="8621e04d7232cc2dc37e5b84e933ec3bc06b72e3" translate="yes" xml:space="preserve">
          <source>Two digit minute offset, e.g. &quot;00&quot;</source>
          <target state="translated">두 자리 분 오프셋 (예 : &quot;00&quot;)</target>
        </trans-unit>
        <trans-unit id="d96364e22c9ee0fb4977ea215560ad73a809bd3c" translate="yes" xml:space="preserve">
          <source>Two digit years map to 1900 &amp;ndash; 1999</source>
          <target state="translated">2 자리 연도는 1900 &amp;ndash; 1999에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="dcc0b0e27681a4bfd0bb02dab459be7e1da3d54e" translate="yes" xml:space="preserve">
          <source>Two digit years map to 1900 - 1999</source>
          <target state="translated">두 자리 연도는 1900-1999로 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="bfdef2d93e0187c887de26ec520756ec15fd21f0" translate="yes" xml:space="preserve">
          <source>Two distinct objects are never equal for either strict or abstract comparisons.</source>
          <target state="translated">엄격하거나 추상적 인 비교를 위해 두 개의 별개의 객체가 동일하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f9f69cd7d34f5586d87a3b0bb756cc56e3e4faee" translate="yes" xml:space="preserve">
          <source>Two factors influenced the introduction of arrow functions: shorter functions and no existence of &lt;code&gt;this&lt;/code&gt; keyword.</source>
          <target state="translated">짧은 기능없이 존재 : 두 가지 요인 화살표 기능의 도입 영향 &lt;code&gt;this&lt;/code&gt; 키워드를.</target>
        </trans-unit>
        <trans-unit id="fdb1ca806fe597861317d9dd8b9b0f4e1091e759" translate="yes" xml:space="preserve">
          <source>Two kinds of exceptions</source>
          <target state="translated">두 종류의 예외</target>
        </trans-unit>
        <trans-unit id="7e45222dc719a42189ddea086a477a76a9f58c58" translate="yes" xml:space="preserve">
          <source>Two numbers are strictly equal when they are numerically equal (have the same number value). &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt; is not equal to anything, including NaN. Positive and negative zeros are equal to one another.</source>
          <target state="translated">두 숫자는 숫자가 같을 때 완전히 같습니다 (같은 숫자 값을 가짐). &lt;a href=&quot;../global_objects/nan&quot;&gt;NaN&lt;/a&gt; 은 NaN을 포함하여 아무것도 아닙니다. 양수 및 음수 0은 서로 같습니다.</target>
        </trans-unit>
        <trans-unit id="b2dfc98cea6d4f038c0adeb2a717a43bd3cbd1bd" translate="yes" xml:space="preserve">
          <source>Two other functions, &lt;code&gt;Food&lt;/code&gt; and &lt;code&gt;Toy&lt;/code&gt;, invoke &lt;code&gt;Product&lt;/code&gt;, passing &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;price&lt;/code&gt;. &lt;code&gt;Product&lt;/code&gt; initializes the properties &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;, both specialized functions define the &lt;code&gt;category&lt;/code&gt;.</source>
          <target state="translated">두 개의 다른 함수 인 &lt;code&gt;Food&lt;/code&gt; 및 &lt;code&gt;Toy&lt;/code&gt; 는 &lt;code&gt;Product&lt;/code&gt; 를 호출 하여 &lt;code&gt;this&lt;/code&gt; , &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;price&lt;/code&gt; 를 전달 합니다 . &lt;code&gt;Product&lt;/code&gt; 은 속성 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;price&lt;/code&gt; 초기화하며 , 두 특수 기능 모두 &lt;code&gt;category&lt;/code&gt; 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="767364ed74f9dfef1bba457b2a31bd97d28ec12b" translate="yes" xml:space="preserve">
          <source>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</source>
          <target state="translated">두 문자열은 해당 위치에 동일한 문자 시퀀스, 동일한 길이 및 동일한 문자가있을 때 엄격하게 동일합니다.</target>
        </trans-unit>
        <trans-unit id="22e62aada2d2ed4e6ef25446cc5d425779700a8b" translate="yes" xml:space="preserve">
          <source>Two variables values can be swapped in one destructuring expression.</source>
          <target state="translated">하나의 파괴 표현식에서 두 개의 변수 값을 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="6d00d4d021cf7823f5159794a262002d93abec26" translate="yes" xml:space="preserve">
          <source>TypeError.prototype</source>
          <target state="translated">TypeError.prototype</target>
        </trans-unit>
        <trans-unit id="d88135ee691d49ad087f9ee359ecbe46ea9528b7" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; has no properties</source>
          <target state="translated">TypeError : &quot;x&quot;에는 속성이 없습니다</target>
        </trans-unit>
        <trans-unit id="fda9971b475c2dc350019d59b66915fe2fc5f709" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is (not) &quot;y&quot;</source>
          <target state="translated">TypeError : &quot;x&quot;는 &quot;y&quot;가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0c6838555438ef7c5a3c7cfdcfb9cd2b062e017a" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a constructor</source>
          <target state="translated">TypeError : &quot;x&quot;는 생성자가 아닙니다</target>
        </trans-unit>
        <trans-unit id="b4b3f22cfb909a7ea57fce3d810b02b8c9c4944d" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a function</source>
          <target state="translated">TypeError : &quot;x&quot;는 함수가 아닙니다</target>
        </trans-unit>
        <trans-unit id="0907c062321c618b949345d16de90e484526d617" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is not a non-null object</source>
          <target state="translated">TypeError : &quot;x&quot;는 null이 아닌 개체가 아닙니다</target>
        </trans-unit>
        <trans-unit id="7f1a59d8d05baff12e8984f0d4f979e255eb85be" translate="yes" xml:space="preserve">
          <source>TypeError: &quot;x&quot; is read-only</source>
          <target state="translated">TypeError : &quot;x&quot;는 읽기 전용입니다</target>
        </trans-unit>
        <trans-unit id="93a64ae87ca50694ea65931b825ebbc14316100d" translate="yes" xml:space="preserve">
          <source>TypeError: 'x' is not iterable</source>
          <target state="translated">TypeError : 'x'는 반복 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="eadd3f3dd3d515bc2008a8c3ecbf97e414fadd33" translate="yes" xml:space="preserve">
          <source>TypeError: More arguments needed</source>
          <target state="translated">TypeError : 더 많은 인수가 필요합니다</target>
        </trans-unit>
        <trans-unit id="2a7a8f3a34edd73e7329425eba83dee00c2a463e" translate="yes" xml:space="preserve">
          <source>TypeError: Reduce of empty array with no initial value</source>
          <target state="translated">TypeError : 초기 값이없는 빈 배열 감소</target>
        </trans-unit>
        <trans-unit id="fc7a003e68b18bd51a0e2c7b4e9aa739a2628e68" translate="yes" xml:space="preserve">
          <source>TypeError: X.prototype.y called on incompatible type</source>
          <target state="translated">TypeError : 호환되지 않는 유형에서 X.prototype.y가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="2062e055b44d15065484da17110096e531bf60f7" translate="yes" xml:space="preserve">
          <source>TypeError: can't access dead object</source>
          <target state="translated">TypeError : 죽은 개체에 액세스 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="9eadd715821193dbb59f2029ac46c9c5acb67bac" translate="yes" xml:space="preserve">
          <source>TypeError: can't access property &quot;x&quot; of &quot;y&quot;</source>
          <target state="translated">TypeError : &quot;y&quot;의 &quot;x&quot;속성에 액세스 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="ffdc9764529529f831000de89ae3e001a2f25d64" translate="yes" xml:space="preserve">
          <source>TypeError: can't assign to property &quot;x&quot; on &quot;y&quot;: not an object</source>
          <target state="translated">TypeError : &quot;y&quot;의 &quot;x&quot;속성에 할당 할 수 없습니다. 개체가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="ad4dd8b46b5c3df52f2a0bc7f14317bff5729363" translate="yes" xml:space="preserve">
          <source>TypeError: can't define property &quot;x&quot;: &quot;obj&quot; is not extensible</source>
          <target state="translated">TypeError : &quot;x&quot;속성을 정의 할 수 없습니다 : &quot;obj&quot;는 확장 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="e7eda2849a3fa05ea9821acd46a58275cc93af66" translate="yes" xml:space="preserve">
          <source>TypeError: can't delete non-configurable array element</source>
          <target state="translated">TypeError : 구성 할 수없는 배열 요소를 삭제할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="9d546ed256470970d571134f12c516214042a8f8" translate="yes" xml:space="preserve">
          <source>TypeError: can't redefine non-configurable property &quot;x&quot;</source>
          <target state="translated">TypeError : 구성 할 수없는 속성 &quot;x&quot;를 재정의 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="0f6a8ff06a09e02690b7ab0b6f620e52b063692d" translate="yes" xml:space="preserve">
          <source>TypeError: cannot use 'in' operator to search for 'x' in 'y'</source>
          <target state="translated">TypeError : 'in'연산자를 사용하여 'y'에서 'x'를 검색 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="ab60634a7b25184b9af6dbfe2b46a127f045f29c" translate="yes" xml:space="preserve">
          <source>TypeError: cyclic object value</source>
          <target state="translated">TypeError : 순환 객체 값</target>
        </trans-unit>
        <trans-unit id="4c9fb78d7a67808097cba5dfefcb9df30ae2287d" translate="yes" xml:space="preserve">
          <source>TypeError: invalid 'instanceof' operand 'x'</source>
          <target state="translated">TypeError : 잘못된 'instanceof'피연산자 'x'</target>
        </trans-unit>
        <trans-unit id="804985ebf62efa82c95ca44aeb325d939fdd8196" translate="yes" xml:space="preserve">
          <source>TypeError: invalid Array.prototype.sort argument</source>
          <target state="translated">TypeError : 잘못된 Array.prototype.sort 인수</target>
        </trans-unit>
        <trans-unit id="8bd8a78e630e8119c68b4da0cc755876148f3614" translate="yes" xml:space="preserve">
          <source>TypeError: invalid arguments</source>
          <target state="translated">TypeError : 잘못된 인수</target>
        </trans-unit>
        <trans-unit id="da892f4d86f86bbc79faa3ccbe6da8413753b79e" translate="yes" xml:space="preserve">
          <source>TypeError: invalid assignment to const &quot;x&quot;</source>
          <target state="translated">TypeError : const &quot;x&quot;에 유효하지 않은 할당</target>
        </trans-unit>
        <trans-unit id="504d7c54e7d6b0bedf86d99552944cda9b64611d" translate="yes" xml:space="preserve">
          <source>TypeError: property &quot;x&quot; is non-configurable and can't be deleted</source>
          <target state="translated">TypeError : 속성 &quot;x&quot;는 구성 할 수 없으며 삭제할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="d59f59299d78a1e084bc1ab108285fbe7f7ff24a" translate="yes" xml:space="preserve">
          <source>TypeError: setting getter-only property &quot;x&quot;</source>
          <target state="translated">TypeError : 게터 전용 속성 &quot;x&quot;설정</target>
        </trans-unit>
        <trans-unit id="162a63e1f2a43ab2ace2903a72b848afcab003b2" translate="yes" xml:space="preserve">
          <source>TypeError: variable &quot;x&quot; redeclares argument</source>
          <target state="translated">TypeError : 변수 &quot;x&quot;가 인수를 다시 선언합니다.</target>
        </trans-unit>
        <trans-unit id="8668a6f3f477fa3a4eefc9753392f294a609fc27" translate="yes" xml:space="preserve">
          <source>Typed Array Specification</source>
          <target state="translated">타입 배열 사양</target>
        </trans-unit>
        <trans-unit id="0e3ced9152ebb319d31f440c27bb52b32c3d74e3" translate="yes" xml:space="preserve">
          <source>Typed Arrays</source>
          <target state="translated">타입 배열</target>
        </trans-unit>
        <trans-unit id="c32fcb187550b7bf4d1702cf9e0d2d8aeae8400f" translate="yes" xml:space="preserve">
          <source>Typed array invalid arguments</source>
          <target state="translated">형식화 된 배열 유효하지 않은 인수</target>
        </trans-unit>
        <trans-unit id="831e06c03f1dd990a2ed633ba22453d03ef9310d" translate="yes" xml:space="preserve">
          <source>Typed arrays</source>
          <target state="translated">타입 배열</target>
        </trans-unit>
        <trans-unit id="5e174443616f1ab6a6488259f4a4c0962e193335" translate="yes" xml:space="preserve">
          <source>Typed arrays, for example a &lt;a href=&quot;../global_objects/uint8array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;, can't be constructed from a string. In fact, strings can't be in typed arrays at all.</source>
          <target state="translated">유형이 지정된 배열 (예 : &lt;a href=&quot;../global_objects/uint8array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt; )은 문자열로 구성 할 수 없습니다. 실제로 문자열은 유형이 지정된 배열에있을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a675e12d09245bf3e11559a6c906caf65a0c34ae" translate="yes" xml:space="preserve">
          <source>TypedArray</source>
          <target state="translated">TypedArray</target>
        </trans-unit>
        <trans-unit id="9565828e7e18feab488461ba94cc0f8b6e1c6d60" translate="yes" xml:space="preserve">
          <source>TypedArray objects</source>
          <target state="translated">TypedArray 객체</target>
        </trans-unit>
        <trans-unit id="df563443a3d6070fb25ab6fc8e7e2386c0ceb9a1" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; constant contains the number of bytes each element in the given TypedArray has.</source>
          <target state="translated">TypedArray 객체는 요소 당 바이트 수와 바이트가 해석되는 방식이 서로 다릅니다. &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; 의 상수는 주어진하는 TypedArray 각 요소가 보유되는 바이트 수를 포함한다.</target>
        </trans-unit>
        <trans-unit id="8308ed4a83ee6818d0174d014e66c11e46202d6a" translate="yes" xml:space="preserve">
          <source>TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;name&lt;/code&gt; property describes of what data type the array consists. The first part can be &lt;code&gt;Int&lt;/code&gt; for &quot;integer&quot; or &lt;code&gt;Uint&lt;/code&gt; for an &quot;unsigned integer&quot;, also &lt;code&gt;Float&lt;/code&gt; for &quot;floating point&quot; is used. The second part is a number describing the bit-size of the array. Finally, the object type is &lt;code&gt;Array&lt;/code&gt;, with &lt;code&gt;ClampedArray&lt;/code&gt; as a special case. Please see &lt;a href=&quot;../uint8clampedarray&quot;&gt;&lt;code&gt;Uint8ClampedArray&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">TypedArray 객체는 요소 당 바이트 수와 바이트가 해석되는 방식이 서로 다릅니다. &lt;code&gt;name&lt;/code&gt; 속성은 데이터를 배열로 구성되어 입력 한 내용의 설명합니다. 첫 번째 부분이 될 수 있습니다 &lt;code&gt;Int&lt;/code&gt; &quot;정수&quot;또는 &lt;code&gt;Uint&lt;/code&gt; 또한, &quot;부호없는 정수&quot;에 대한 &lt;code&gt;Float&lt;/code&gt; 사용 &quot;부동 소수점&quot;를 참조하십시오. 두 번째 부분은 배열의 비트 크기를 나타내는 숫자입니다. 마지막으로 객체 유형은 &lt;code&gt;Array&lt;/code&gt; 이며 &lt;code&gt;ClampedArray&lt;/code&gt; 는 특별한 경우입니다. 자세한 내용은 &lt;a href=&quot;../uint8clampedarray&quot;&gt; &lt;code&gt;Uint8ClampedArray&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="09d7acc3385ee25cf71171846ae0bfe859fe9a73" translate="yes" xml:space="preserve">
          <source>TypedArray prototype</source>
          <target state="translated">TypedArray 프로토 타입</target>
        </trans-unit>
        <trans-unit id="d4ce014df3421685733cf5ffe8d38b6f3c599df4" translate="yes" xml:space="preserve">
          <source>TypedArray.@@species</source>
          <target state="translated">TypedArray.@@species</target>
        </trans-unit>
        <trans-unit id="e489cfc13d902aa038749ff4fe48077ca0a7211c" translate="yes" xml:space="preserve">
          <source>TypedArray.BYTES_PER_ELEMENT</source>
          <target state="translated">TypedArray.BYTES_PER_ELEMENT</target>
        </trans-unit>
        <trans-unit id="adf7db6dc7263fcbaca680036e73631182759551" translate="yes" xml:space="preserve">
          <source>TypedArray.from</source>
          <target state="translated">TypedArray.from</target>
        </trans-unit>
        <trans-unit id="8551dc8209fb18b38be485c43801c646aade3a70" translate="yes" xml:space="preserve">
          <source>TypedArray.name</source>
          <target state="translated">TypedArray.name</target>
        </trans-unit>
        <trans-unit id="9a0fb51cb88bee1e979510c2e27b232ed2323ee7" translate="yes" xml:space="preserve">
          <source>TypedArray.of</source>
          <target state="translated">TypedArray.of</target>
        </trans-unit>
        <trans-unit id="059f9b7c5f42d42cd8daa1d1d8596ee8f58560aa" translate="yes" xml:space="preserve">
          <source>TypedArray.prototype</source>
          <target state="translated">TypedArray.prototype</target>
        </trans-unit>
        <trans-unit id="928297cbc22683b1dcaf8e3a80b77c161ec670c5" translate="yes" xml:space="preserve">
          <source>Typical invalid assignments</source>
          <target state="translated">일반적인 잘못된 할당</target>
        </trans-unit>
        <trans-unit id="b6575abbbad2379dfd5301919609cfbc4ce6b7d0" translate="yes" xml:space="preserve">
          <source>U+0009</source>
          <target state="translated">U+0009</target>
        </trans-unit>
        <trans-unit id="1f49cae739d7edd9863d8bd81c01910dbbc089fd" translate="yes" xml:space="preserve">
          <source>U+000A</source>
          <target state="translated">U+000A</target>
        </trans-unit>
        <trans-unit id="87323b9e4dc26abc74fce3bd43d832f3f2dd8b38" translate="yes" xml:space="preserve">
          <source>U+000B</source>
          <target state="translated">U+000B</target>
        </trans-unit>
        <trans-unit id="ff0ef333b5e697ca7c0c191c7f65e6b0975a9fde" translate="yes" xml:space="preserve">
          <source>U+000C</source>
          <target state="translated">U+000C</target>
        </trans-unit>
        <trans-unit id="027e1c393361cda817913c6c63c5749c1a1ebf1c" translate="yes" xml:space="preserve">
          <source>U+000D</source>
          <target state="translated">U+000D</target>
        </trans-unit>
        <trans-unit id="28871eed17ccf0d0ed7cb83461497517a2d9d4b0" translate="yes" xml:space="preserve">
          <source>U+000D &amp;lt;CR&amp;gt;,</source>
          <target state="translated">U + 000D &amp;lt;CR&amp;gt;,</target>
        </trans-unit>
        <trans-unit id="538258cce356d6acc3d1b59869631a1b26b44251" translate="yes" xml:space="preserve">
          <source>U+0020</source>
          <target state="translated">U+0020</target>
        </trans-unit>
        <trans-unit id="ac91663a7dc88186dc866819cba4ad5bba584a83" translate="yes" xml:space="preserve">
          <source>U+005C (backslash),</source>
          <target state="translated">U + 005C (백 슬래시)</target>
        </trans-unit>
        <trans-unit id="8588a5507dea10de63bbd8777f9338ad2cd338d0" translate="yes" xml:space="preserve">
          <source>U+005C \ (backslash),</source>
          <target state="translated">U + 005C \ (백 슬래시),</target>
        </trans-unit>
        <trans-unit id="0fec4782338f4a34ab331b24e3952b0e5cb1ad5d" translate="yes" xml:space="preserve">
          <source>U+00A0</source>
          <target state="translated">U+00A0</target>
        </trans-unit>
        <trans-unit id="18beeeef428ffc1df892b484afcdbd03b7363497" translate="yes" xml:space="preserve">
          <source>U+2028</source>
          <target state="translated">U+2028</target>
        </trans-unit>
        <trans-unit id="e3743466af5e5ae35b041ce90fbacc309905247d" translate="yes" xml:space="preserve">
          <source>U+2029</source>
          <target state="translated">U+2029</target>
        </trans-unit>
        <trans-unit id="46d53800c7cc79a0380ef914950cceb919311d12" translate="yes" xml:space="preserve">
          <source>URI encoding or decoding wasn't successful. An argument given to either the &lt;a href=&quot;../global_objects/decodeuri&quot;&gt;&lt;code&gt;decodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuri&quot;&gt;&lt;code&gt;encodeURI&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt;&lt;code&gt;encodeURIComponent&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt;&lt;code&gt;decodeURIComponent&lt;/code&gt;&lt;/a&gt; function was not valid, so that the function was unable encode or decode properly.</source>
          <target state="translated">URI 인코딩 또는 디코딩에 실패했습니다. &lt;a href=&quot;../global_objects/decodeuri&quot;&gt; &lt;code&gt;decodeURI&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/encodeuri&quot;&gt; &lt;code&gt;encodeURI&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/encodeuricomponent&quot;&gt; &lt;code&gt;encodeURIComponent&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/decodeuricomponent&quot;&gt; &lt;code&gt;decodeURIComponent&lt;/code&gt; &lt;/a&gt; 함수에 제공된 인수 가 유효하지 않아 함수가 올바르게 인코딩 또는 디코딩 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d093bdaa782f59ac13b897f7b9054b31839f2bb9" translate="yes" xml:space="preserve">
          <source>URIError</source>
          <target state="translated">URIError</target>
        </trans-unit>
        <trans-unit id="fcd826fdce3e680ba53ae40238970f0c243a035c" translate="yes" xml:space="preserve">
          <source>URIError.prototype</source>
          <target state="translated">URIError.prototype</target>
        </trans-unit>
        <trans-unit id="24dfa6bae3df7e359ff385d1cf0198596d4240ba" translate="yes" xml:space="preserve">
          <source>URIError: malformed URI sequence</source>
          <target state="translated">URIError : 잘못된 URI 시퀀스</target>
        </trans-unit>
        <trans-unit id="bdfd4d8d6952777c39403b2d2e2f8a2a52bf255f" translate="yes" xml:space="preserve">
          <source>UTC</source>
          <target state="translated">UTC</target>
        </trans-unit>
        <trans-unit id="8b25ca8547ac04d71799be3d0a64dd85bdecc8c2" translate="yes" xml:space="preserve">
          <source>UTC)</source>
          <target state="translated">UTC)</target>
        </trans-unit>
        <trans-unit id="cfef49be4c8add6d6446b4adcc537017014f4915" translate="yes" xml:space="preserve">
          <source>UTC+3</source>
          <target state="translated">UTC+3</target>
        </trans-unit>
        <trans-unit id="fe85076f264e61cd020d0710115899e483ea0989" translate="yes" xml:space="preserve">
          <source>UTC-8</source>
          <target state="translated">UTC-8</target>
        </trans-unit>
        <trans-unit id="259c0ebc019175a9e0bd64273d4462cdb56f289e" translate="yes" xml:space="preserve">
          <source>UTF-16 code unit / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+FFFF&lt;/code&gt;</source>
          <target state="translated">UTF-16 코드 단위 / &lt;code&gt;U+0000&lt;/code&gt; 과 &lt;code&gt;U+FFFF&lt;/code&gt; 사이의 유니 코드 코드 포인트</target>
        </trans-unit>
        <trans-unit id="d758c4107adfa362d034a7ff3fa05dfc9926675d" translate="yes" xml:space="preserve">
          <source>UTF-32 code unit / Unicode code point between &lt;code&gt;U+0000&lt;/code&gt; and &lt;code&gt;U+10FFFF&lt;/code&gt;</source>
          <target state="translated">UTF-32 코드 단위 / &lt;code&gt;U+0000&lt;/code&gt; 과 &lt;code&gt;U+10FFFF&lt;/code&gt; 사이의 유니 코드 코드 포인트</target>
        </trans-unit>
        <trans-unit id="ff3d5b2abcbe69d249b5c141c82edeacc8a5da9a" translate="yes" xml:space="preserve">
          <source>Udacity: JavaScript Promises</source>
          <target state="translated">Udacity : JavaScript 약속</target>
        </trans-unit>
        <trans-unit id="ee17a2d4842b1562f38fb267817829d58a3dedfb" translate="yes" xml:space="preserve">
          <source>Uint16Array</source>
          <target state="translated">Uint16Array</target>
        </trans-unit>
        <trans-unit id="c5710667eadea14743f763131bdbd164d4d4297f" translate="yes" xml:space="preserve">
          <source>Uint16Array.length</source>
          <target state="translated">Uint16Array.length</target>
        </trans-unit>
        <trans-unit id="633c2aa79d88322b5d53222bfe0bb765531ece57" translate="yes" xml:space="preserve">
          <source>Uint32Array</source>
          <target state="translated">Uint32Array</target>
        </trans-unit>
        <trans-unit id="9a32be0557e5b962a300fae5eae084606cc75c5b" translate="yes" xml:space="preserve">
          <source>Uint32Array.length</source>
          <target state="translated">Uint32Array.length</target>
        </trans-unit>
        <trans-unit id="9dafd0a91ea1eadf5a4b323d71716a37f430543c" translate="yes" xml:space="preserve">
          <source>Uint8Array</source>
          <target state="translated">Uint8Array</target>
        </trans-unit>
        <trans-unit id="ad6c3f16d622ed3c29d4d93a881fdbf40e238c0f" translate="yes" xml:space="preserve">
          <source>Uint8Array.length</source>
          <target state="translated">Uint8Array.length</target>
        </trans-unit>
        <trans-unit id="80d3d1902630c787d741b39af0ddaba8dab6c5b7" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray</source>
          <target state="translated">Uint8ClampedArray</target>
        </trans-unit>
        <trans-unit id="3a7bddb5e24e03c48a5b389efa8055d3f2f596c5" translate="yes" xml:space="preserve">
          <source>Uint8ClampedArray.length</source>
          <target state="translated">Uint8ClampedArray.length</target>
        </trans-unit>
        <trans-unit id="bb9756e2dd53d8b412b093978529a20e6d87e501" translate="yes" xml:space="preserve">
          <source>Unary Negation</source>
          <target state="translated">단항 부정</target>
        </trans-unit>
        <trans-unit id="d2cedd82f30bde7abbd2d251adf7228473d72aed" translate="yes" xml:space="preserve">
          <source>Unary Plus</source>
          <target state="translated">단항 플러스</target>
        </trans-unit>
        <trans-unit id="513b253806a1a356b911c79a51a7bafa6bc52f0a" translate="yes" xml:space="preserve">
          <source>Unary negation (-)</source>
          <target state="translated">단항 부정 (-)</target>
        </trans-unit>
        <trans-unit id="befe22eda70bd6b5e1a787a97596068e0774676c" translate="yes" xml:space="preserve">
          <source>Unary negation (&lt;code&gt;-&lt;/code&gt;)</source>
          <target state="translated">단항 부정 ( &lt;code&gt;-&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ca09f5dbf89ea3eafb5ab27f217efe0b06a097c4" translate="yes" xml:space="preserve">
          <source>Unary operators</source>
          <target state="translated">단항 연산자</target>
        </trans-unit>
        <trans-unit id="abac30e3a2acb94fc462772b11ad68a9aa79c850" translate="yes" xml:space="preserve">
          <source>Unary plus (+)</source>
          <target state="translated">단항 플러스 (+)</target>
        </trans-unit>
        <trans-unit id="6bddeb4ef451282ac6aa78a777db40cd95d2a793" translate="yes" xml:space="preserve">
          <source>Unary plus (&lt;code&gt;+&lt;/code&gt;)</source>
          <target state="translated">단항 더하기 ( &lt;code&gt;+&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="2ae6cd0092c46d08603bf82278684279219f6c3a" translate="yes" xml:space="preserve">
          <source>Unconditional &lt;code&gt;catch&lt;/code&gt; clause</source>
          <target state="translated">무조건 &lt;code&gt;catch&lt;/code&gt; 조항</target>
        </trans-unit>
        <trans-unit id="cf180ccf6ec4ce4f39c2feff2a257878d4d851c6" translate="yes" xml:space="preserve">
          <source>Unconditional catch-block</source>
          <target state="translated">무조건 캐치 블록</target>
        </trans-unit>
        <trans-unit id="5140ee34748e590252ad94ce595eb05fc7886054" translate="yes" xml:space="preserve">
          <source>Undeclared var</source>
          <target state="translated">선언되지 않은 var</target>
        </trans-unit>
        <trans-unit id="0646f4afd90c8fdb87bbcb57b63ee1911f5a9a46" translate="yes" xml:space="preserve">
          <source>Undefined</source>
          <target state="translated">Undefined</target>
        </trans-unit>
        <trans-unit id="fb9dc4c2e3785b2c955042e52cbcc556d0858881" translate="yes" xml:space="preserve">
          <source>Undefined prop</source>
          <target state="translated">정의되지 않은 소품</target>
        </trans-unit>
        <trans-unit id="3fec4e60edf8ef578608ef502f4b2bacf3d7f069" translate="yes" xml:space="preserve">
          <source>Unescaped strings</source>
          <target state="translated">이스케이프되지 않은 문자열</target>
        </trans-unit>
        <trans-unit id="9fea685493a4859bb8dc7e48575411686bbd53e5" translate="yes" xml:space="preserve">
          <source>Unexpected token</source>
          <target state="translated">예기치 않은 토큰</target>
        </trans-unit>
        <trans-unit id="74dc936b263127fe4e9c42a9713ee6214e5bfcfe" translate="yes" xml:space="preserve">
          <source>Unexpected type</source>
          <target state="translated">예상치 못한 유형</target>
        </trans-unit>
        <trans-unit id="3aa854c653b7eb660e3b2a7248d1ad77d3b5c56a" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;next()&lt;/code&gt; is asymmetric, but that can&amp;rsquo;t be helped: It always sends a value to the currently suspended &lt;code&gt;yield&lt;/code&gt;, but returns the operand of the following &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">불행히도 &lt;code&gt;next()&lt;/code&gt; 는 비대칭이지만 어쩔 수 없습니다. 항상 현재 일시 중단 된 &lt;code&gt;yield&lt;/code&gt; 로 값을 보내지 만 다음 &lt;code&gt;yield&lt;/code&gt; 의 피연산자를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="5a088d8dac52305ddd74345a8b035629f9284105" translate="yes" xml:space="preserve">
          <source>Unicode Standard Annex #15, Unicode Normalization Forms</source>
          <target state="translated">유니 코드 표준 부록 # 15, 유니 코드 정규화 양식</target>
        </trans-unit>
        <trans-unit id="48c01f8059a880d3490d40f931d17143df746745" translate="yes" xml:space="preserve">
          <source>Unicode assigns a unique numerical value, called a &lt;em&gt;code point&lt;/em&gt;, to each character. For example, the code point for &lt;code&gt;&quot;A&quot;&lt;/code&gt; is given as U+0041. However, sometimes more than one code point, or sequence of code points, can represent the same abstract character &amp;mdash; the character &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; for example can be represented by either of:</source>
          <target state="translated">유니 &lt;em&gt;코드&lt;/em&gt; 는 각 문자에 &lt;em&gt;코드 포인트&lt;/em&gt; 라는 고유 한 숫자 값을 할당합니다 . 예를 들어, &lt;code&gt;&quot;A&quot;&lt;/code&gt; 의 코드 포인트 는 U + 0041로 제공됩니다. 그러나 때로는 하나 이상의 코드 포인트 또는 일련의 코드 포인트가 동일한 추상 문자를 나타낼 수 있습니다. 예를 들어 문자 &lt;code&gt;&quot;&amp;ntilde;&quot;&lt;/code&gt; 은 다음 중 하나로 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9c11da5db018877d7b5c0c5897bd818df342deb" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes</source>
          <target state="translated">유니 코드 코드 포인트 이스케이프</target>
        </trans-unit>
        <trans-unit id="53798ed42b9b310fc8897a38bd9f5a8ec102f8a2" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes \u{xxxxxx}</source>
          <target state="translated">유니 코드 코드 포인트 이스케이프 \ u {xxxxxx}</target>
        </trans-unit>
        <trans-unit id="ab691dc2f55ca32e25cc09e838e42a2db66ff157" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes indicated by &quot;&lt;code&gt;\u{}&lt;/code&gt;&quot;, for example &lt;code&gt;\u{2F804}&lt;/code&gt;</source>
          <target state="translated">&quot; &lt;code&gt;\u{}&lt;/code&gt; &quot;로 표시된 유니 코드 코드 포인트 이스케이프 ( 예 : &lt;code&gt;\u{2F804}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2520911378d53256963efaa10beebc649575df9" translate="yes" xml:space="preserve">
          <source>Unicode code point escapes indicated by &quot;\u{}&quot;, for example &lt;code&gt;\u{2F804}&lt;/code&gt;</source>
          <target state="translated">&quot;\ u {}&quot;로 표시된 유니 코드 코드 포인트 이스케이프 (예 : &lt;code&gt;\u{2F804}&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
