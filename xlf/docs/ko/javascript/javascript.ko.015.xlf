<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="c2a65696a4b66acd3ee78503a48ea845d6affce7" translate="yes" xml:space="preserve">
          <source>Unicode code points range from 0 to 1114111 (0x10FFFF). The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript Guide&lt;/a&gt;.</source>
          <target state="translated">유니 코드 코드 포인트의 범위는 0에서 1114111 (0x10FFFF)입니다. 처음 128 개의 유니 코드 코드 포인트는 ASCII 문자 인코딩과 직접 일치합니다. 유니 코드에 대한 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="94b4b6127f87c683d4345dfc6bfc7a024191f59b" translate="yes" xml:space="preserve">
          <source>Unicode code points range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1114111&lt;/code&gt;&lt;code&gt;(0x10FFFF&lt;/code&gt;). The first 128 Unicode code points are a direct match of the ASCII character encoding. (For information on Unicode, see the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript Guide&lt;/a&gt;.)</source>
          <target state="translated">유니 코드 코드 포인트의 범위는 &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;1114111&lt;/code&gt; &lt;code&gt;(0x10FFFF&lt;/code&gt; )입니다. 처음 128 개의 유니 코드 코드 포인트는 ASCII 문자 인코딩과 직접 일치합니다. (유니 코드에 대한 정보는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode&quot;&gt;JavaScript 안내서를&lt;/a&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="a025134c79f4b9916732f16566a13ab47dedcf4b" translate="yes" xml:space="preserve">
          <source>Unicode equivalence</source>
          <target state="translated">유니 코드 동등성</target>
        </trans-unit>
        <trans-unit id="e71b40efb0d9265c1c1c189e5fac0f62e09e0426" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences</source>
          <target state="translated">유니 코드 이스케이프 시퀀스</target>
        </trans-unit>
        <trans-unit id="d76088f1c6b72836fc3ecd9c247d6015e773943c" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences (&lt;code&gt;'\u00A9'&lt;/code&gt;)</source>
          <target state="translated">유니 코드 이스케이프 시퀀스 ( &lt;code&gt;'\u00A9'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="6a07429888c5454a48c5e7f3c7157573736be014" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences are valid JSON and are well-formed in both UTF-16 and UTF-8.</source>
          <target state="translated">유니 코드 이스케이프 시퀀스는 유효한 JSON이며 UTF-16과 UTF-8 모두에서 잘 구성되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fdaa28f5f9111accb0453491f8fbe09c9322dbe" translate="yes" xml:space="preserve">
          <source>Unicode escapes started by &quot;&lt;code&gt;\u&lt;/code&gt;&quot;, for example &lt;code&gt;\u00A9&lt;/code&gt;</source>
          <target state="translated">&quot; &lt;code&gt;\u&lt;/code&gt; &quot;로 시작되는 유니 코드 이스케이프 ( 예 : &lt;code&gt;\u00A9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a6ca54dc4df4102b400b35f7aa6149f2bc04adc" translate="yes" xml:space="preserve">
          <source>Unicode escapes started by &quot;\u&quot;, for example &lt;code&gt;\u00A9&lt;/code&gt;</source>
          <target state="translated">&quot;\ u&quot;로 시작된 유니 코드 이스케이프 (예 : &lt;code&gt;\u00A9&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5ae9c1a41c16af126275d4895ad5a15fbd0a14b" translate="yes" xml:space="preserve">
          <source>Unicode format-control characters</source>
          <target state="translated">유니 코드 형식 제어 문자</target>
        </trans-unit>
        <trans-unit id="efa15d0d47400b8935adb1ab9d0e8b0e45121a09" translate="yes" xml:space="preserve">
          <source>Unicode point escapes (&lt;code&gt;\u{}&lt;/code&gt;)</source>
          <target state="translated">유니 코드 포인트 이스케이프 ( &lt;code&gt;\u{}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="882ff6fb6578ac00311b7f580283cea902a289e7" translate="yes" xml:space="preserve">
          <source>Unicode property escapes (&lt;code&gt;\p{...}&lt;/code&gt;)</source>
          <target state="translated">유니 코드 속성 이스케이프 ( &lt;code&gt;\p{...}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b457734b05257a40626b40dc1f3d85a644a6b034" translate="yes" xml:space="preserve">
          <source>Unicode; treat pattern as a sequence of Unicode code points</source>
          <target state="translated">유니 코드; 패턴을 일련의 유니 코드 코드 포인트로 취급</target>
        </trans-unit>
        <trans-unit id="24a26a3e21bc5c2b19eca935b90d92fc4e3215cb" translate="yes" xml:space="preserve">
          <source>Unintentional usage</source>
          <target state="translated">의도하지 않은 사용</target>
        </trans-unit>
        <trans-unit id="bc7819b34ff87570745fbe461e36a16f80e562ce" translate="yes" xml:space="preserve">
          <source>Unknown</source>
          <target state="translated">Unknown</target>
        </trans-unit>
        <trans-unit id="261fcf34c4ffd802d6ad89abd31a44a403246f9b" translate="yes" xml:space="preserve">
          <source>Unknown&lt;br/&gt;&lt;small&gt;The definition of 'Date.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">알 수 없음 &lt;br/&gt;&lt;small&gt;해당 사양에서 'Date.prototype.toString'의 정의입니다.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5d6eb41228ded668c4a8d6e78574bc28b4827b14" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;Promise.resolve(2).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; (which will be resolved with &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;Promise.resolve(2).finally(() =&amp;gt; {})&lt;/code&gt; will be resolved with &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">달리 &lt;code&gt;Promise.resolve(2).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; (해결할 될 &lt;code&gt;undefined&lt;/code&gt; ) &lt;code&gt;Promise.resolve(2).finally(() =&amp;gt; {})&lt;/code&gt; 것 &lt;code&gt;2&lt;/code&gt; 로 해결됩니다 .</target>
        </trans-unit>
        <trans-unit id="992c78e7dae6d35a22f3c338d3ca7543e3e2aebd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;, you must specify a value for a &lt;code&gt;const&lt;/code&gt; declaration. This throws:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 또는 &lt;code&gt;let&lt;/code&gt; 과 달리 &lt;code&gt;const&lt;/code&gt; 선언 의 값을 지정해야합니다 . 이것은 던진다 :</target>
        </trans-unit>
        <trans-unit id="613c8f89d1402bfce10e0e37b5d94ff07d7a3cb9" translate="yes" xml:space="preserve">
          <source>Unlike accessor properties, value properties are always set on the object itself, not on a prototype. However, if a non-writable value property is inherited, it still prevents from modifying the property on the object.</source>
          <target state="translated">접근 자 속성과 달리 값 속성은 프로토 타입이 아니라 항상 개체 자체에 설정됩니다. 그러나 쓸 수없는 값 속성이 상속되면 여전히 개체의 속성을 수정하지 못합니다.</target>
        </trans-unit>
        <trans-unit id="ba04f2c0c252a2d67593d43ddb3827c08d93eb16" translate="yes" xml:space="preserve">
          <source>Unlike all other possible values in JavaScript, it is not possible to rely on the equality operators (== and ===) to determine whether a value &lt;em&gt;is&lt;/em&gt;&lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or not, because both &lt;code&gt;NaN == NaN&lt;/code&gt; and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluate to &lt;code&gt;false&lt;/code&gt;. Hence, the necessity of an &lt;code&gt;isNaN&lt;/code&gt; function.</source>
          <target state="translated">JavaScript의 다른 모든 가능한 값과 달리 , &lt;code&gt;NaN == NaN&lt;/code&gt; 및 &lt;code&gt;NaN === NaN&lt;/code&gt; 평가 되기 때문에 등식 연산자 (== 및 ===)를 사용하여 값 &lt;em&gt;이 &lt;/em&gt;&lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 인지 여부를 확인할 수 없습니다. &lt;code&gt;false&lt;/code&gt; . 따라서 &lt;code&gt;isNaN&lt;/code&gt; 함수 가 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="8c25308bb7bf2bbbc7257d1a5273188bec1c4892" translate="yes" xml:space="preserve">
          <source>Unlike all other possible values in JavaScript, it is not possible to use the equality operators (== and ===) to compare a value against &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; to determine whether the value &lt;em&gt;is&lt;/em&gt;&lt;code&gt;NaN&lt;/code&gt; or not, because both &lt;code&gt;NaN == NaN&lt;/code&gt; and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluate to &lt;code&gt;false&lt;/code&gt;. Hence, the necessity of an &lt;code&gt;isNaN&lt;/code&gt; function.</source>
          <target state="translated">JavaScript의 다른 모든 가능한 값과 달리, 등호 연산자 (== 및 ===)를 사용하여 값을 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 과 비교 하여 값 &lt;em&gt;이 &lt;/em&gt; &lt;code&gt;NaN&lt;/code&gt; 인지 여부를 확인할 수 없습니다. &lt;code&gt;NaN == NaN&lt;/code&gt; 및 &lt;code&gt;NaN === NaN&lt;/code&gt; 은 &lt;code&gt;false&lt;/code&gt; 로 평가됩니다 . 따라서 &lt;code&gt;isNaN&lt;/code&gt; 함수 가 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="8e5e68074ae161a867483e827fe011f25ea61ed3" translate="yes" xml:space="preserve">
          <source>Unlike base class constructors, derived constructors have no initial &lt;code&gt;this&lt;/code&gt; binding. Calling &lt;a href=&quot;super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;this&lt;/code&gt; binding within the constructor and essentially has the effect of evaluating the following line of code, where Base is the inherited class:</source>
          <target state="translated">기본 클래스 생성자와 달리 파생 생성자는 &lt;code&gt;this&lt;/code&gt; 바인딩의 초기 값 이 없습니다 . &lt;a href=&quot;super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt; 를 호출 하면 생성자 내에서 &lt;code&gt;this&lt;/code&gt; 바인딩이 생성되고 기본적으로 다음 코드 줄을 평가하는 효과가 있습니다. 여기서 Base는 상속 된 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="5efd508e8d41fe9661eaa00bc9ed36669f651ee8" translate="yes" xml:space="preserve">
          <source>Unlike functions defined by function expressions or by the &lt;code&gt;Function&lt;/code&gt; constructor, a function defined by a function declaration can be used before the function declaration itself. For example:</source>
          <target state="translated">함수 표현식 또는 &lt;code&gt;Function&lt;/code&gt; 생성자에 의해 정의 된 함수와 달리 , 함수 선언 자체에 앞서 함수 선언으로 정의 된 함수를 사용할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="22fe178bb9987412c1ce8ad5b696df107c408836" translate="yes" xml:space="preserve">
          <source>Unlike in other programming languages (e.g. Python), you can't search in strings using the &lt;a href=&quot;../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="translated">다른 프로그래밍 언어 (예를 들어, 파이썬)과는 달리, 당신은을 사용하여 문자열에서 검색 할 수 없습니다 &lt;a href=&quot;../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 연산자&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e97c189d35dbbc3bbd40408b5695832d7c02e8a0" translate="yes" xml:space="preserve">
          <source>Unlike many other global objects, &lt;code&gt;Math&lt;/code&gt; is not a constructor. All properties and methods of &lt;code&gt;Math&lt;/code&gt; are static. You refer to the constant pi as &lt;code&gt;Math.PI&lt;/code&gt; and you call the sine function as &lt;code&gt;Math.sin(&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;, where &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is the method&amp;rsquo;s argument. Constants are defined with the full precision of real numbers in JavaScript.</source>
          <target state="translated">다른 많은 전역 개체와 달리 &lt;code&gt;Math&lt;/code&gt; 는 생성자가 아닙니다. &lt;code&gt;Math&lt;/code&gt; 의 모든 속성과 메서드 는 정적입니다. 상수 pi를 &lt;code&gt;Math.PI&lt;/code&gt; 로 참조 하고 사인 함수를 &lt;code&gt;Math.sin(&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; 으로 호출합니다 . 여기서 &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; 는 메서드의 인수입니다. 상수는 JavaScript에서 실수의 완전한 정밀도로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="98b024aecb9721a4423deed34c80d321abd01b94" translate="yes" xml:space="preserve">
          <source>Unlike most global objects, &lt;code&gt;Reflect&lt;/code&gt; is not a constructor. You cannot use it with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; or invoke the &lt;code&gt;Reflect&lt;/code&gt; object as a function. All properties and methods of &lt;code&gt;Reflect&lt;/code&gt; are static (just like the &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="translated">대부분의 전역 객체와 달리 &lt;code&gt;Reflect&lt;/code&gt; 는 생성자가 아닙니다. &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 연산자&lt;/a&gt; 와 함께 사용 하거나 &lt;code&gt;Reflect&lt;/code&gt; 객체를 함수로 호출 할 수 없습니다 . &lt;code&gt;Reflect&lt;/code&gt; 의 모든 속성과 메소드 는 정적입니다 ( &lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt; 객체와 동일).</target>
        </trans-unit>
        <trans-unit id="ddc001d6383fdc0b3350bcf9ef726630747b7699" translate="yes" xml:space="preserve">
          <source>Unlike most other global objects, &lt;code&gt;WebAssembly&lt;/code&gt; is not a constructor (it is not a function object). You can compare it to &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, which is also a namespace object for mathematical constants and functions, or to &lt;a href=&quot;intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt; which is the namespace object for internationalization constructors and other language sensitive functions.</source>
          <target state="translated">대부분의 다른 전역 객체와 달리 &lt;code&gt;WebAssembly&lt;/code&gt; 는 생성자가 아닙니다 (함수 객체가 아님). 수학 상수와 함수를위한 네임 스페이스 객체 인 &lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt; 또는 국제화 생성자와 기타 언어에 민감한 함수를위한 네임 스페이스 객체 인 &lt;a href=&quot;intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt; 과 비교할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="122764b6a950c39ddd1acc102dbb5a46e158e8ef" translate="yes" xml:space="preserve">
          <source>Unlike most other global objects, &lt;code&gt;WebAssembly&lt;/code&gt; is not a constructor (it is not a function object). You can compare it to &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt;, which is also a namespace object for mathematical constants and functions, or to &lt;a href=&quot;intl&quot;&gt;&lt;code&gt;Intl&lt;/code&gt;&lt;/a&gt; which is the namespace object for internationalization constructors and other language-sensitive functions.</source>
          <target state="translated">대부분의 다른 전역 개체와 달리 &lt;code&gt;WebAssembly&lt;/code&gt; 는 생성자가 아닙니다 (함수 개체가 아님). 수학 상수 및 함수에 대한 네임 스페이스 개체 인 &lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt; 또는 국제화 생성자 및 기타 언어에 민감한 함수에 대한 네임 스페이스 개체 인 &lt;a href=&quot;intl&quot;&gt; &lt;code&gt;Intl&lt;/code&gt; &lt;/a&gt; 과 비교할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d4056340aaf08be974198ab42625840e3f1defbd" translate="yes" xml:space="preserve">
          <source>Unlike some other languages, JavaScript makes no distinction between single-quoted strings and double-quoted strings; therefore, the escape sequences above work in strings created with either single or double quotes.</source>
          <target state="translated">다른 언어와 달리 JavaScript는 작은 따옴표로 묶인 문자열과 큰 따옴표로 묶인 문자열을 구분하지 않습니다. 따라서 위의 이스케이프 시퀀스는 작은 따옴표 나 큰 따옴표로 만든 문자열에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3b9dce1197424f6e6df686b7bcbba3ed30a161fc" translate="yes" xml:space="preserve">
          <source>Unlike the other global objects, &lt;code&gt;Math&lt;/code&gt; is not a constructor. All properties and methods of &lt;code&gt;Math&lt;/code&gt; are static. You refer to the constant pi as &lt;code&gt;Math.PI&lt;/code&gt; and you call the sine function as &lt;code&gt;Math.sin(x)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.</source>
          <target state="translated">다른 전역 객체와 달리 &lt;code&gt;Math&lt;/code&gt; 는 생성자가 아닙니다. &lt;code&gt;Math&lt;/code&gt; 의 모든 속성과 메서드 는 정적입니다. 상수 pi를 &lt;code&gt;Math.PI&lt;/code&gt; 라고하고 사인 함수를 &lt;code&gt;Math.sin(x)&lt;/code&gt; 로 호출합니다 . 여기서 &lt;code&gt;x&lt;/code&gt; 는 메서드의 인수입니다. 상수는 JavaScript에서 실수의 전체 정밀도로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="eeefb383e0bbc04cf7a736fd1f6a3533defaebd6" translate="yes" xml:space="preserve">
          <source>Unlike the other three &lt;code&gt;Math&lt;/code&gt; methods: &lt;a href=&quot;floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ceil&quot;&gt;&lt;code&gt;Math.ceil()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt;, the way &lt;code&gt;Math.trunc()&lt;/code&gt; works is very simple. It &lt;em&gt;truncates&lt;/em&gt; (cuts off) the dot and the digits to the right of it, no matter whether the argument is a positive or negative number.</source>
          <target state="translated">다른 세와는 달리 &lt;code&gt;Math&lt;/code&gt; 방법 : &lt;a href=&quot;floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;ceil&quot;&gt; &lt;code&gt;Math.ceil()&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; &lt;/a&gt; , 방법 &lt;code&gt;Math.trunc()&lt;/code&gt; 작동은 매우 간단합니다. 그것은 &lt;em&gt;자릅니다&lt;/em&gt; (오프 컷) 점과 그것의 오른쪽에있는 숫자를, 상관없이 인수 여부를 양수 또는 음수이다.</target>
        </trans-unit>
        <trans-unit id="f1844c37bdbe74a20f4144cdd99b6a1033b0ce1c" translate="yes" xml:space="preserve">
          <source>Unlike variables declared with &lt;a href=&quot;var#var_hoisting&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt;, which will start with the value &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; variables are &lt;em&gt;not&lt;/em&gt; initialized until their definition is evaluated. Accessing the variable before the initialization results in a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;. The variable is in a &quot;temporal dead zone&quot; from the start of the block until the initialization is processed.</source>
          <target state="translated">로 선언 된 변수와 달리 &lt;a href=&quot;var#var_hoisting&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt; 값으로 시작, &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; 변수가있다 &lt;em&gt;하지&lt;/em&gt; 그들의 정의가 평가 될 때까지 초기화. 초기화 전에 변수에 액세스하면 &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; 가 발생&lt;/a&gt; 합니다. 변수는 블록의 시작부터 초기화가 처리 될 때까지 &quot;시간적 데드 존&quot;에 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c863a340e0612467bd35ad32221ddc10e7153e9" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests (perhaps due to other programming languages like &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cpp/delete-operator-cpp?view=vs-2019&quot;&gt;delete in C++&lt;/a&gt;), the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page for more details.</source>
          <target state="translated">일반적인 믿음이 암시하는 것과는 달리 (아마도 &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cpp/delete-operator-cpp?view=vs-2019&quot;&gt;C ++의 delete&lt;/a&gt; 와 같은 다른 프로그래밍 언어로 인해 ) &lt;code&gt;delete&lt;/code&gt; 연산자는 메모리를 직접 해제하는 것과 관련 이 &lt;strong&gt;없습니다&lt;/strong&gt; . 메모리 관리는 참조 중단을 통해 간접적으로 수행됩니다. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;메모리 관리&lt;/a&gt; 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3777b67e3ef2b77b0df4da0e1a2446fea2519cd3" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page and the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator page for more details.</source>
          <target state="translated">일반적인 믿음이 제안하는 것과 달리 &lt;code&gt;delete&lt;/code&gt; 연산자는 메모리를 직접 비우는 것과 &lt;strong&gt;아무 관련&lt;/strong&gt; 이 &lt;strong&gt;없습니다&lt;/strong&gt; . 메모리 관리는 참조 해제를 통해 간접적으로 수행됩니다. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;메모리 관리&lt;/a&gt; 페이지 및 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 연산자 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8094e45f031ff99438db42e704fbbb4cdbea53d7" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references, see the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page and the &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator page for more details.</source>
          <target state="translated">일반적인 믿음이 암시하는 것과 달리 &lt;code&gt;delete&lt;/code&gt; 연산자는 메모리를 직접 해제하는 것과 관련 이 &lt;strong&gt;없습니다&lt;/strong&gt; . 메모리 관리는 참조 중단을 통해 간접적으로 수행됩니다. 자세한 내용은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;메모리 관리&lt;/a&gt; 페이지 및 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 연산자 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ea30abbe64db13ca7800df70b372d3d8701c60f0" translate="yes" xml:space="preserve">
          <source>Unlike what common belief suggests, the &lt;code&gt;delete&lt;/code&gt; operator has &lt;strong&gt;nothing&lt;/strong&gt; to do with directly freeing memory. Memory management is done indirectly via breaking references. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;memory management&lt;/a&gt; page for more details.</source>
          <target state="translated">일반적인 믿음이 제안하는 것과 달리 &lt;code&gt;delete&lt;/code&gt; 연산자는 메모리를 직접 비우는 것과 &lt;strong&gt;아무 관련&lt;/strong&gt; 이 &lt;strong&gt;없습니다&lt;/strong&gt; . 메모리 관리는 참조 해제를 통해 간접적으로 수행됩니다. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;메모리 관리&lt;/a&gt; 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1892325da1ca271d2f0925142d0f4c916c78e9ff" translate="yes" xml:space="preserve">
          <source>Unlike with simply undeclared variables and variables that hold a value of &lt;code&gt;undefined&lt;/code&gt;, using the &lt;code&gt;typeof&lt;/code&gt; operator to check for the type of a variable in that variable's TDZ will throw a &lt;code&gt;ReferenceError&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 값을 보유하는 선언되지 않은 변수 및 변수와 달리 &lt;code&gt;typeof&lt;/code&gt; 연산자를 사용하여 해당 변수의 TDZ에서 변수 유형을 확인하면 &lt;code&gt;ReferenceError&lt;/code&gt; 가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="e3f39eec656c6819edddd487c281136c888d559f" translate="yes" xml:space="preserve">
          <source>Unlike with simply undeclared variables and variables that hold a value of &lt;code&gt;undefined&lt;/code&gt;, using the &lt;code&gt;typeof&lt;/code&gt; operator to check for the type of a variable in that variable's temporal dead zone will throw a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 값을 보유하는 단순히 선언되지 않은 변수 및 변수와 달리 &lt;code&gt;typeof&lt;/code&gt; 연산자를 사용하여 해당 변수의 시간 데드 존에서 변수 유형을 확인하면 &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; 가 발생합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="13fbb415054724c22847ea0715d22ed47c3a9f06" translate="yes" xml:space="preserve">
          <source>Unnamed function statement</source>
          <target state="translated">이름이없는 함수 문</target>
        </trans-unit>
        <trans-unit id="3a823b2e9d8bb93c11fe4029a9d33a0572f111b1" translate="yes" xml:space="preserve">
          <source>Unpacked from an object and assigned to a variable with a different name.</source>
          <target state="translated">개체에서 압축을 풀고 다른 이름을 가진 변수에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="de009fd834e141f4ba177dc9618c2d16e92d6029" translate="yes" xml:space="preserve">
          <source>Unpacking fields from objects passed as a function parameter</source>
          <target state="translated">함수 매개 변수로 전달 된 객체에서 필드 압축 해제</target>
        </trans-unit>
        <trans-unit id="9862cd4cd322ef31e87d03071b6bcceeff8ba01f" translate="yes" xml:space="preserve">
          <source>Unpacking fields from objects passed as function parameter</source>
          <target state="translated">함수 매개 변수로 전달 된 오브젝트에서 필드 풀기</target>
        </trans-unit>
        <trans-unit id="a72c257472bbec8c93924ec70c97af088fa8b78f" translate="yes" xml:space="preserve">
          <source>Unpacking values from a regular expression match</source>
          <target state="translated">정규식 일치에서 값 압축 풀기</target>
        </trans-unit>
        <trans-unit id="3c28b41a73146e42cc542100b6790d2fcad942af" translate="yes" xml:space="preserve">
          <source>Unprivileged code has no access to Component.utils and might just be able catch the exception.</source>
          <target state="translated">권한이없는 코드는 Component.utils에 액세스 할 수 없으며 예외를 포착 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f77d48631d074f8812ce7e706fd824c895d74d8" translate="yes" xml:space="preserve">
          <source>Unqualified identifier assignments</source>
          <target state="translated">규정되지 않은 식별자 할당</target>
        </trans-unit>
        <trans-unit id="798bada17a5178e499c053a0efb6062522b9a545" translate="yes" xml:space="preserve">
          <source>Unreachable code after a return statement might occur in these situations:</source>
          <target state="translated">다음 상황에서 return 문 이후에 도달 할 수없는 코드가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b064fc67acbd0ef9b9b63753613c5ec8f5262efc" translate="yes" xml:space="preserve">
          <source>Unrecognizable strings or dates containing illegal element values in ISO formatted strings usually return &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;. However, depending on the implementation, non&amp;ndash;conforming ISO format strings, may also throw &lt;code&gt;RangeError: invalid date&lt;/code&gt;, like the following cases in Firefox:</source>
          <target state="translated">인식 할 수없는 문자열 또는 ISO 형식 문자열에 잘못된 요소 값이 포함 된 날짜는 일반적으로 &lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환&lt;/a&gt; 합니다. 그러나 구현에 따라 비준수 ISO 형식 문자열 은 Firefox의 다음과 같은 &lt;code&gt;RangeError: invalid date&lt;/code&gt; 발생할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a37e276fc3dbd030fca8077a9bf31908eb1390f5" translate="yes" xml:space="preserve">
          <source>Unscopables in objects</source>
          <target state="translated">개체의 복제 불가</target>
        </trans-unit>
        <trans-unit id="1a424d3649ada9bd2e68f41ec2ffaf5a64c6736e" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment</source>
          <target state="translated">부호없는 오른쪽 교대 할당</target>
        </trans-unit>
        <trans-unit id="01cfe037451019c8188afb27bfd425f5645d3d7c" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment (&lt;code&gt;x &amp;gt;&amp;gt;&amp;gt;= y&lt;/code&gt;)</source>
          <target state="translated">부호없는 오른쪽 시프트 대입 ( &lt;code&gt;x &amp;gt;&amp;gt;&amp;gt;= y&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="af4eae21d35a396aab333964e702c6f49fee4317" translate="yes" xml:space="preserve">
          <source>Unsigned right shift assignment.</source>
          <target state="translated">부호없는 오른쪽 교대 할당.</target>
        </trans-unit>
        <trans-unit id="7d202f64842a95528992bee505d4ede3f3717db4" translate="yes" xml:space="preserve">
          <source>Unterminated string literal</source>
          <target state="translated">종료되지 않은 문자열 리터럴</target>
        </trans-unit>
        <trans-unit id="426b353b9db4c19924afb606b4d29ebfe9ff35a2" translate="yes" xml:space="preserve">
          <source>Unterminated strings</source>
          <target state="translated">종결되지 않은 문자열</target>
        </trans-unit>
        <trans-unit id="29ea0648053f54642ebdbcc8d7bc0b0d60c2732f" translate="yes" xml:space="preserve">
          <source>Until ECMAScript 2018 (edition 9), the format of the string returned by &lt;code&gt;Date.prototype.toString&lt;/code&gt; was implementation dependent. Therefore it should not be relied upon to be in the specified format.</source>
          <target state="translated">ECMAScript 2018 (버전 9)까지는 &lt;code&gt;Date.prototype.toString&lt;/code&gt; 에 의해 반환되는 문자열 형식 이 구현에 따라 다릅니다. 따라서 지정된 형식에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="796e16a716c7e4675178c5c341dd62f55ed0ba3c" translate="yes" xml:space="preserve">
          <source>Until arrow functions, every new function defined its own &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; value (based on how function was called, a new object in the case of a constructor, undefined in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; function calls, the base object if the function is called as an &quot;object method&quot;, etc.). This proved to be less than ideal with an object-oriented style of programming.</source>
          <target state="translated">화살표 함수까지, 모든 새로운 함수 는 함수가 &quot;객체 메소드로 호출 된 경우 함수가 호출 된 방법 , 생성자의 경우 새 객체, &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드&lt;/a&gt; 함수 호출 에서 정의되지 않은 기본 객체 에 따라 자체적 &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; 값을 정의했습니다. &quot;등). 이것은 객체 지향 스타일의 프로그래밍에 이상적이지 않은 것으로 판명되었습니다.</target>
        </trans-unit>
        <trans-unit id="60e73ac896fcd1e20ecdbe62b6e971173531a272" translate="yes" xml:space="preserve">
          <source>Update older browsers</source>
          <target state="translated">이전 브라우저 업데이트</target>
        </trans-unit>
        <trans-unit id="48578c6a749b5ff67cf1e8b4b13ab9237f09b50f" translate="yes" xml:space="preserve">
          <source>Updating and synchronizing shared memory with Atomic operations</source>
          <target state="translated">Atomic 작업으로 공유 메모리 업데이트 및 동기화</target>
        </trans-unit>
        <trans-unit id="60e0e9ec143532c6eb903423c9a4cfc54cee36cc" translate="yes" xml:space="preserve">
          <source>Updating and synchronizing shared memory with atomic operations</source>
          <target state="translated">원자 적 작업으로 공유 메모리 업데이트 및 동기화</target>
        </trans-unit>
        <trans-unit id="cc5dae35ee91a22668ad8f529681490cfba9ffb4" translate="yes" xml:space="preserve">
          <source>Upper case is used instead of lower case in this function, due to problems with certain UTF-8 character conversions.</source>
          <target state="translated">특정 UTF-8 문자 변환 문제로 인해이 함수에서 소문자 대신 대문자가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="92d99b032888bf69448943e3813f272f0f43c556" translate="yes" xml:space="preserve">
          <source>Usage notes</source>
          <target state="translated">사용법 메모</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="fae11d04640598770c380ecc173c3e3f57bb841a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;encodeURIComponent()&lt;/code&gt; on user-entered fields from forms &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt;'d to the server. This will encode &lt;code&gt;&amp;amp;&lt;/code&gt; symbols that may inadvertently be generated during data entry for special HTML entities or other characters that require encoding/decoding.</source>
          <target state="translated">양식 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&quot;&gt; &lt;code&gt;POST&lt;/code&gt; &lt;/a&gt; 'd에서 서버로 사용자가 입력 한 필드에 &lt;code&gt;encodeURIComponent()&lt;/code&gt; 를 사용하십시오 . 이는 특수 HTML 엔티티 또는 인코딩 / 디코딩이 필요한 기타 문자에 대한 데이터 입력 중에 실수로 생성 될 수있는 인코딩 &lt;code&gt;&amp;amp;&lt;/code&gt; 기호입니다.</target>
        </trans-unit>
        <trans-unit id="5b924f3a5d893825fa7ff6e707d26913c7b71dd1" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;encodeURIComponent&lt;/code&gt; on user-entered fields from forms POST'd to the server. This will encode &quot;&amp;amp;&quot; symbols that may inadvertently be generated during data entry for special HTML entities or other characters that require encoding/decoding.</source>
          <target state="translated">POST가 수행 한 양식에서 서버로 사용자가 입력 한 필드에서 &lt;code&gt;encodeURIComponent&lt;/code&gt; 를 사용하십시오 . 특수 HTML 엔터티 또는 인코딩 / 디코딩이 필요한 다른 문자에 대해 데이터를 입력하는 동안 실수로 생성 될 수있는 &quot;&amp;amp;&quot;기호를 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="8169020de50874cab1f3dee3fd82094c9d0d7a54" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;test()&lt;/code&gt; whenever you want to know whether a pattern is found in a string. &lt;code&gt;test()&lt;/code&gt; returns a boolean, unlike the &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; method (which returns the index of a match, or &lt;code&gt;-1&lt;/code&gt; if not found).</source>
          <target state="translated">문자열에서 패턴이 있는지 알고 싶을 때마다 &lt;code&gt;test()&lt;/code&gt; 사용하십시오 . &lt;code&gt;test()&lt;/code&gt; 는 &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt; 메서드 (일치의 인덱스를 반환하거나 찾을 수없는 경우 &lt;code&gt;-1&lt;/code&gt; ) 와 달리 부울 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b18d67e8a5ac3a6674fdb1efc60252ad8106a7b6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;test()&lt;/code&gt; whenever you want to know whether a pattern is found in a string. &lt;code&gt;test()&lt;/code&gt; returns a boolean, unlike the &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; method, which returns the index (or -1 if not found). To get more information (but with slower execution), use the &lt;a href=&quot;exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; method (similar to the &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt; method). As with &lt;code&gt;exec()&lt;/code&gt; (or in combination with it), &lt;code&gt;test()&lt;/code&gt; called multiple times on the same global regular expression instance will advance past the previous match.</source>
          <target state="translated">문자열에 패턴이 있는지 여부를 알고 싶을 때마다 &lt;code&gt;test()&lt;/code&gt; 사용하십시오 . &lt;code&gt;test()&lt;/code&gt; 는 색인을 리턴하는 &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt; 메소드 와 달리 부울 을 리턴합니다 (또는 찾지 못하면 -1). 더 자세한 정보를 얻으려면 (그러나 실행 속도는 느리게) &lt;a href=&quot;exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 메소드 ( &lt;a href=&quot;../string/match&quot;&gt; &lt;code&gt;String.prototype.match()&lt;/code&gt; &lt;/a&gt; 메소드 와 유사 )를 사용하십시오 . &lt;code&gt;exec()&lt;/code&gt; 와 같이 (또는 그것과 조합하여), 동일한 전역 정규 표현식 인스턴스에서 여러 번 호출 된 &lt;code&gt;test()&lt;/code&gt; 는 이전 일치를지나갑니다.</target>
        </trans-unit>
        <trans-unit id="e517f7c1c07a707de4fab4379936f4514452e989" translate="yes" xml:space="preserve">
          <source>Use Case for brace notation</source>
          <target state="translated">중괄호 표기 사용 사례</target>
        </trans-unit>
        <trans-unit id="720b4edf04389b8169218ea37223d4a391a3a5d7" translate="yes" xml:space="preserve">
          <source>Use Generator function</source>
          <target state="translated">Generator 기능 사용</target>
        </trans-unit>
        <trans-unit id="da4e0328e40a8194d5399bae005f4ada08dad0b5" translate="yes" xml:space="preserve">
          <source>Use Set to ensure the uniqueness of a list of values</source>
          <target state="translated">Set을 사용하여 값 목록의 고유성을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="30a3888da5f4a28292777575e9aa3adc54e79b94" translate="yes" xml:space="preserve">
          <source>Use a different property name instead:</source>
          <target state="translated">대신 다른 속성 이름을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bf2a85345d61cec27db77f35fab64a0e6ac9a223" translate="yes" xml:space="preserve">
          <source>Use a leading zero followed by the letter &quot;o&quot; or &quot;O&quot;:</source>
          <target state="translated">앞에 0을 사용하고 문자 &quot;o&quot;또는 &quot;O&quot;를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a2211d331794e0404bb9813a32f412e1fdf21c22" translate="yes" xml:space="preserve">
          <source>Use a leading zero followed by the letter &quot;o&quot;;</source>
          <target state="translated">앞에 0을 사용하고 문자 &quot;o&quot;를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="430bf270b3e2cd9d51f68c54d784a47b6b409383" translate="yes" xml:space="preserve">
          <source>Use a stack</source>
          <target state="translated">스택 사용</target>
        </trans-unit>
        <trans-unit id="cfa9ad22e487d75c6991da84fa3c0ec91af14d5a" translate="yes" xml:space="preserve">
          <source>Use an array instead:</source>
          <target state="translated">대신 배열을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ea5779e1fbdf5349917e803615c876e87a124938" translate="yes" xml:space="preserve">
          <source>Use an inline function with a regular expression to avoid &lt;code&gt;for&lt;/code&gt; loops</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 루프 를 피하기 위해 정규식에 인라인 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ec33787345829822780f6bb3ebf9f829c2e73505" translate="yes" xml:space="preserve">
          <source>Use case: Detecting circular references</source>
          <target state="translated">사용 사례 : 순환 참조 감지</target>
        </trans-unit>
        <trans-unit id="4475d8e25078166d996b8e417cd93847ea682358" translate="yes" xml:space="preserve">
          <source>Use dynamic import only when necessary. The static form is preferable for loading initial dependencies, and can benefit more readily from static analysis tools and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="translated">필요한 경우에만 동적 가져 오기를 사용하십시오. 정적 형식은 초기 종속성을로드하는 데 선호되며 정적 분석 도구 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking&quot;&gt;트리 흔들림을&lt;/a&gt; 통해보다 쉽게 ​​이점을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eecb7e122bd5a7261c65d771f6a80279af55c95f" translate="yes" xml:space="preserve">
          <source>Use functions instead of evaluating snippets of code</source>
          <target state="translated">코드 스 니펫을 평가하는 대신 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="21027ef412585805c5156982cc14f1e2ed4e3134" translate="yes" xml:space="preserve">
          <source>Use in with environments</source>
          <target state="translated">환경에서 사용</target>
        </trans-unit>
        <trans-unit id="59689be5f7f6db3befe58ea4502d6346d8f0e784" translate="yes" xml:space="preserve">
          <source>Use objects instead:</source>
          <target state="translated">대신 객체를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3289254e2cd8eff81fe4fba3443ba5e72f7369a7" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;prototype&lt;/code&gt; property</source>
          <target state="translated">의 사용 &lt;code&gt;prototype&lt;/code&gt; 특성</target>
        </trans-unit>
        <trans-unit id="3996252cd710649cfc857aa5772afe5d4e526301" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">의 사용으로 &lt;code&gt;new&lt;/code&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="9094eaab1aa22a2ddf2a490a883b3004802fb753" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;with&lt;/code&gt; statement is not recommended, as it may be the source of confusing bugs and compatibility issues. See the &quot;Ambiguity Contra&quot; paragraph in the &quot;Description&quot; section below for details.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 문은 혼란스러운 버그와 호환성 문제의 원인이 될 수 있으므로 사용 하지 않는 것이 좋습니다. 자세한 내용은 아래 &quot;설명&quot;섹션의 &quot;모호성 대비&quot;단락을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5604289c2f9b05e787276b05d6de50556f3ad0d2" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;yield&lt;/code&gt; keyword</source>
          <target state="translated">의 사용 &lt;code&gt;yield&lt;/code&gt; 키워드</target>
        </trans-unit>
        <trans-unit id="268f6efe6c4edc7a7a776c983c85355ce0bcb3c2" translate="yes" xml:space="preserve">
          <source>Use strict equality operators if the operands must be of a specific type as well as value or if the exact type of the operands is important. Otherwise, use the standard equality operators, which allow you to compare the identity of two operands even if they are not of the same type.</source>
          <target state="translated">피연산자가 값뿐만 아니라 특정 유형이어야하거나 정확한 피연산자 유형이 중요한 경우 엄격한 항등 연산자를 사용하십시오. 그렇지 않으면 표준 항등 연산자를 사용하면 두 피연산자가 같은 유형이 아닌 경우에도 ID를 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0ead207547cfc5b8a2f1836b2c3c936baac7322" translate="yes" xml:space="preserve">
          <source>Use the &quot;#&quot; sign instead.</source>
          <target state="translated">대신 &quot;#&quot;부호를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8de4076a747cfe1532a44b2bc3ca2df452856104" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;anchor()&lt;/code&gt; method to programmatically create and display an anchor in a document.</source>
          <target state="translated">&lt;code&gt;anchor()&lt;/code&gt; 메서드를 사용하여 프로그래밍 방식으로 문서에서 앵커를 만들고 표시합니다.</target>
        </trans-unit>
        <trans-unit id="259cb606e19c132188e630c58910ccf9746caeda" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;link()&lt;/code&gt; method to create an HTML snippet for a hypertext link. The returned string can then be added to the document via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;&lt;code&gt;element.innerHTML&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">하이퍼 텍스트 링크에 ​​대한 HTML 스 니펫을 작성 하려면 &lt;code&gt;link()&lt;/code&gt; 메소드를 사용하십시오. 반환 된 문자열은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt; &lt;code&gt;document.write()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt; &lt;code&gt;element.innerHTML&lt;/code&gt; 을&lt;/a&gt; 통해 문서에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ea4b6f5310e3fa0a5adc1ac28dc2c3ca97ff63e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;link()&lt;/code&gt; method to create an HTML snippet for a hypertext link. The returned string can then be added to the document via &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt;&lt;code&gt;element.innerHTML&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;code&gt;link()&lt;/code&gt; 하이퍼 텍스트 링크에 대한 HTML 코드 조각을 만드는 방법. 반환 된 문자열은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Document/write&quot;&gt; &lt;code&gt;document.write()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML&quot;&gt; &lt;code&gt;element.innerHTML&lt;/code&gt; 을&lt;/a&gt; 통해 문서에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f0db81531108fc16c5eb7e4e47995a7302205612" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;setTime()&lt;/code&gt; method to help assign a date and time to another &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;setTime()&lt;/code&gt; 메서드를 사용하면 다른 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체에 날짜와 시간을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5ff4c5c7b65009624928276d53eeac4f648d1962" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;throw&lt;/code&gt; statement to throw an exception. When you throw an exception, &lt;code&gt;expression&lt;/code&gt; specifies the value of the exception. Each of the following throws an exception:</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; 문을 사용하여 예외를 발생시킵니다. 예외를 throw하면 &lt;code&gt;expression&lt;/code&gt; 은 예외 값을 지정합니다. 다음은 각각 예외입니다.</target>
        </trans-unit>
        <trans-unit id="f2ba2a1040af150a170a58a7d87d684aec196c2a" translate="yes" xml:space="preserve">
          <source>Use the code below for a polyfill:</source>
          <target state="translated">폴리 필에 아래 코드를 사용하세요.</target>
        </trans-unit>
        <trans-unit id="ed1258678e4f54580c8c0dec2115541b6000d8ec" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;compare&lt;/code&gt; getter for finding matching strings in arrays:</source>
          <target state="translated">배열에서 일치하는 문자열을 찾으 려면 &lt;code&gt;compare&lt;/code&gt; getter에서 반환 한 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0a94e0addaa6e80f549291005ee82c31eb3029d4" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;compare&lt;/code&gt; getter for sorting arrays. Note that the function is bound to the collator from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열을 정렬하기 위해 &lt;code&gt;compare&lt;/code&gt; getter가 반환 한 함수를 사용하십시오 . 이 함수는 함수를 가져온 콜 레이터에 바인딩되므로 &lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt; 직접 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="08c434f65b76eb32642e2da1515f1c044f361f95" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting a single currency value, here for Russia:</source>
          <target state="translated">러시아의 경우 단일 통화 값 의 &lt;code&gt;format&lt;/code&gt; 을 지정 하려면 형식 getter에서 리턴 한 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d03ec2e55d3b859d9b58982b987671a50a0b6434" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting a single date, here for Serbia:</source>
          <target state="translated">단일 날짜를 형식화 하려면 &lt;code&gt;format&lt;/code&gt; getter에서 리턴 한 함수를 사용하십시오 ( 세르비아의 경우).</target>
        </trans-unit>
        <trans-unit id="ae052fe508232936eb87b2ad396357bb6d4a625c" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting all dates in an array. Note that the function is bound to the &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열의 모든 날짜를 형식화 하려면 &lt;code&gt;format&lt;/code&gt; getter에서 리턴 한 함수를 사용하십시오 . 이 함수는 얻은 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; 에&lt;/a&gt; 바인딩 되므로 &lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt; 직접 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d54c9c7d9b0bff48e6a95b24be16fb1999c65ee0" translate="yes" xml:space="preserve">
          <source>Use the function returned by the &lt;code&gt;format&lt;/code&gt; getter for formatting all numbers in an array. Note that the function is bound to the &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; from which it was obtained, so it can be passed directly to &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열의 모든 숫자를 형식화 하려면 &lt;code&gt;format&lt;/code&gt; getter에서 리턴 한 함수를 사용하십시오 . 함수는 얻은 &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; 에&lt;/a&gt; 바인딩 되므로 &lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map&lt;/code&gt; 에&lt;/a&gt; 직접 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bedc93a6a650821a167633ec706aac11a9101f79" translate="yes" xml:space="preserve">
          <source>Use this method instead of the &lt;a href=&quot;getyear&quot;&gt;&lt;code&gt;getYear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;getyear&quot;&gt; &lt;code&gt;getYear()&lt;/code&gt; &lt;/a&gt; 메서드 대신이 메서드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="49702e4d4cf8e2ba2300109ed149a26289ed510a" translate="yes" xml:space="preserve">
          <source>Use this method instead of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear&quot;&gt;&lt;code&gt;getYear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear&quot;&gt; &lt;code&gt;getYear()&lt;/code&gt; &lt;/a&gt; 메소드 대신이 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7af22a996975d27462e2f16cdba162f4fe94e747" translate="yes" xml:space="preserve">
          <source>Use with arrow function and map</source>
          <target state="translated">화살표 기능 및지도와 함께 사용</target>
        </trans-unit>
        <trans-unit id="e38d388b3fbc5f871702b5debb9b3ab8ec2478f5" translate="yes" xml:space="preserve">
          <source>Used as a function</source>
          <target state="translated">함수로 사용</target>
        </trans-unit>
        <trans-unit id="f3bcc454496e0d8095ef9d6544013fa49b94c904" translate="yes" xml:space="preserve">
          <source>Used at the start of the script to mark it as Unicode and the text's byte order (&lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;).</source>
          <target state="translated">스크립트 시작시이를 유니 코드 및 텍스트의 바이트 순서 ( &lt;a href=&quot;http://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt; )로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="91a9a56f8d5c07eee8eea8919cddd9d901f21448" translate="yes" xml:space="preserve">
          <source>Used at the start of the script to mark it as Unicode and the text's byte order (&lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt;).</source>
          <target state="translated">스크립트 시작 부분에서 유니 코드 및 텍스트의 바이트 순서 ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Byte_order_mark&quot;&gt;Wikipedia&lt;/a&gt; ) 로 표시하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="133e68ee5d8ba76c955db630077bf0beeee673ec" translate="yes" xml:space="preserve">
          <source>Used to access the character in the &lt;em&gt;N&lt;/em&gt;th position where &lt;em&gt;N&lt;/em&gt; is an integer between 0 and one less than the value of &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;. These properties are read-only.</source>
          <target state="translated">&lt;em&gt;N&lt;/em&gt; 번째 위치 의 문자에 액세스하는 데 사용됩니다. 여기서 &lt;em&gt;N&lt;/em&gt; 은 0과 &lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 값보다 작은 정수 입니다. 이러한 속성은 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="812e93e06643aee1ecaa300513446c1a6beb968c" translate="yes" xml:space="preserve">
          <source>Used to access the character in the &lt;em&gt;N&lt;/em&gt;th position where &lt;em&gt;N&lt;/em&gt; is an integer between 0 and one less than the value of &lt;a href=&quot;string/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;. These properties are read-only.</source>
          <target state="translated">&lt;em&gt;N&lt;/em&gt; 번째 위치 의 문자에 액세스하는 데 사용됩니다. 여기서 &lt;em&gt;N&lt;/em&gt; 은 0과 &lt;a href=&quot;string/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 값보다 작은 정수 입니다. 이러한 속성은 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="3b7acc356fa4a2bc2ccbd7d48e70ac3513c4a7e5" translate="yes" xml:space="preserve">
          <source>Used to export functions to make them available for imports in external modules, and other scripts.</source>
          <target state="translated">외부 모듈 및 기타 스크립트에서 가져 오기에 사용할 수 있도록 함수를 내보내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fb37f1aad3749171bebb1228de96a4676e09cfa5" translate="yes" xml:space="preserve">
          <source>Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.</source>
          <target state="translated">정규식과 문자열 사이의 일치를 찾고 일치하는 하위 문자열을 새 하위 문자열로 바꾸는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7955ee6b6bfc35018c789e83e4e210fac8047e36" translate="yes" xml:space="preserve">
          <source>Used to import functions exported from an external module, another script.</source>
          <target state="translated">다른 스크립트 인 외부 모듈에서 내 보낸 함수를 가져 오는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="13c2ae74a2bde43fe084992394a9e639aee35c2b" translate="yes" xml:space="preserve">
          <source>Used to match a regular expression against a string.</source>
          <target state="translated">정규식을 문자열과 일치시키는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b48f072e0df994bfca9f19d46f45af529b2e1d8a" translate="yes" xml:space="preserve">
          <source>Used to match regular expression &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; against a string.</source>
          <target state="translated">정규식 &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt; 를 문자열 과 일치시키는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="3dbed0041feb748fbbfcba1cc48420c33fadb168" translate="yes" xml:space="preserve">
          <source>Used to replace all occurrences of &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; using &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; may be a string or Regular Expression, and &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; may be a string or function.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; 를 사용하여 모든 &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; 항목을 바꾸는 데 사용됩니다 . &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; 는 문자열 또는 정규식 일 수 있고 &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; 는 문자열 또는 함수일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7edb7787ba6b0b7e8e6eeb532ac19fd7b1c85e4f" translate="yes" xml:space="preserve">
          <source>Used to replace occurrences of &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; using &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; may be a string or Regular Expression, and &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; may be a string or function.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; 발생을 바꾸는 데 사용됩니다 . &lt;code&gt;&lt;var&gt;searchFor&lt;/var&gt;&lt;/code&gt; 는 문자열 또는 정규식 일 수 있고 &lt;code&gt;&lt;var&gt;replaceWith&lt;/var&gt;&lt;/code&gt; 는 문자열 또는 함수일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="863c58fdd8701f9a6eb314389dddf8b12cb690be" translate="yes" xml:space="preserve">
          <source>Used to send a value to a generator. The value is returned from the &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression, and returns a value yielded by the next &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression. &lt;code&gt;send(x)&lt;/code&gt; corresponds to &lt;code&gt;next(x)&lt;/code&gt; in the ES2015 generator object.</source>
          <target state="translated">생성기에 값을 보내는 데 사용됩니다. 값은 &lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt; 표현식에서 리턴되며 다음 &lt;a href=&quot;../operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt; 표현식 에서 산출 된 값을 리턴합니다 . &lt;code&gt;send(x)&lt;/code&gt; 에 대응하는 &lt;code&gt;next(x)&lt;/code&gt; ES2015 발생기 개체.</target>
        </trans-unit>
        <trans-unit id="1ec22aff197651958c30fe3e4239fc7b58e48d52" translate="yes" xml:space="preserve">
          <source>Useful special-case behavior</source>
          <target state="translated">유용한 특수한 행동</target>
        </trans-unit>
        <trans-unit id="8f27339731a5380e7f5e31ad049633a94a300d7e" translate="yes" xml:space="preserve">
          <source>User-defined iterables</source>
          <target state="translated">사용자 정의 이터 러블</target>
        </trans-unit>
        <trans-unit id="28dafe5587205ea728cfd56a35524bbae528ca52" translate="yes" xml:space="preserve">
          <source>User-defined vs. built-in objects</source>
          <target state="translated">사용자 정의 및 내장 객체</target>
        </trans-unit>
        <trans-unit id="60551ea1bff7b4550201d95ea8c5d34732d0b1bf" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;@@iterator&lt;/code&gt;</source>
          <target state="translated">비표준 이름 인 &lt;code&gt;@@iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4562f8aefc1e7271c8a66b1eed41b4777a575795" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;contains&lt;/code&gt;</source>
          <target state="translated">비표준 이름을 사용합니다. &lt;code&gt;contains&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c93d825490057c3453aec31fdf28a9dcae9fa1a" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;futexWait&lt;/code&gt;</source>
          <target state="translated">비표준 이름 인 &lt;code&gt;futexWait&lt;/code&gt; 를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="89858b40234e19d9eadd0f8948f6700c18941a2f" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;futexWake&lt;/code&gt;</source>
          <target state="translated">비표준 이름 인 &lt;code&gt;futexWake&lt;/code&gt; 를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a2fbc98c756378751b8ba87caf92912e491ac620" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;iterator&lt;/code&gt;</source>
          <target state="translated">비표준 이름을 사용합니다 : &lt;code&gt;iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c51d0794d624ef371c8c4c7c70a4aaaa7f15011" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;trimLeft&lt;/code&gt;</source>
          <target state="translated">비표준 이름을 사용합니다. &lt;code&gt;trimLeft&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10b04306e1d06010bfe91004003ff857af27e87f" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;trimRight&lt;/code&gt;</source>
          <target state="translated">비표준 이름을 사용합니다. &lt;code&gt;trimRight&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2d239f5599e889e3ad65585fee736f8cbbc9cc3" translate="yes" xml:space="preserve">
          <source>Uses the non-standard name: &lt;code&gt;wake&lt;/code&gt;</source>
          <target state="translated">비표준 이름을 사용합니다 : &lt;code&gt;wake&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa7fcc0cace95ab92fb739e84bcfba711f862206" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../../operators/destructuring_assignment#Array_destructuring&quot;&gt;Array Destructuring&lt;/a&gt;, you can iterate through objects easily.</source>
          <target state="translated">&lt;a href=&quot;../../operators/destructuring_assignment#Array_destructuring&quot;&gt;Array Destructuring을&lt;/a&gt; 사용하면 객체를 쉽게 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a35e8629d4205d716d7879db06211269443cff86" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../global_objects/eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; as variable or function argument name</source>
          <target state="translated">변수 또는 함수 인수 이름으로 &lt;a href=&quot;../global_objects/eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 사용</target>
        </trans-unit>
        <trans-unit id="eaa1157703e2fddddf937141842eb4dded62c00e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../global_objects/nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; values, negative Integers (&lt;code&gt;-1&lt;/code&gt;), non-Integers (&lt;code&gt;3.14&lt;/code&gt;), or values larger than &lt;code&gt;0x10FFFF&lt;/code&gt; (&lt;code&gt;1114111&lt;/code&gt;) won't work with this method.</source>
          <target state="translated">사용 &lt;a href=&quot;../global_objects/nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 값 음수 ( &lt;code&gt;-1&lt;/code&gt; ), 비 - 정수 ( &lt;code&gt;3.14&lt;/code&gt; ), 또는보다 큰 값 &lt;code&gt;0x10FFFF&lt;/code&gt; ( &lt;code&gt;1114111&lt;/code&gt; )이 메소드하지 작동 할 것이다.</target>
        </trans-unit>
        <trans-unit id="3942794d0225dda9d28d31b5dbc2330d28350e6c" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../object/proto&quot;&gt;&lt;code&gt;Object.__proto__&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">사용하여 &lt;a href=&quot;../object/proto&quot;&gt; &lt;code&gt;Object.__proto__&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="51a5319931313933fe5d478d723005385757590e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;filter&quot;&gt;&lt;code&gt;Array.filter()&lt;/code&gt;&lt;/a&gt; then &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Array.map()&lt;/code&gt;&lt;/a&gt; traverses the array twice, but you can achieve the same effect while traversing only once with &lt;a href=&quot;reduce&quot;&gt;&lt;code&gt;Array.reduce()&lt;/code&gt;&lt;/a&gt;, thereby being more efficient. (If you like for loops, you can filter and map while traversing once with &lt;a href=&quot;foreach&quot;&gt;&lt;code&gt;Array.forEach()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;filter&quot;&gt; &lt;code&gt;Array.filter()&lt;/code&gt; &lt;/a&gt; 를 사용하면 &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Array.map()&lt;/code&gt; &lt;/a&gt; 이 배열을 두 번 순회하지만 &lt;a href=&quot;reduce&quot;&gt; &lt;code&gt;Array.reduce()&lt;/code&gt; &lt;/a&gt; 를 사용하여 한 번만 순회하면서 동일한 효과를 얻을 수 있으므로 더 효율적입니다. (for 루프를 좋아한다면 &lt;a href=&quot;foreach&quot;&gt; &lt;code&gt;Array.forEach()&lt;/code&gt; &lt;/a&gt; 하여 한 번 순회하면서 필터링하고 매핑 할 수 있습니다 .)</target>
        </trans-unit>
        <trans-unit id="535c1dd52fe8972c1fadf5078900fec27d10d19b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;클로저&lt;/a&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="c87322977a52f7bca265e3d228df36c203fead5f" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;클로저&lt;/a&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="afdf4a3c9b67bda257874ee44595423d90a12a17" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; on a variable name &lt;code&gt;delete myVariable&lt;/code&gt;;</source>
          <target state="translated">변수 이름에 &lt;code&gt;delete myVariable&lt;/code&gt; 사용하면 &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; myVariable ;</target>
        </trans-unit>
        <trans-unit id="26a3027fe72a00facbe50a3574538264e8f6778d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@match&lt;/code&gt; in subclasses</source>
          <target state="translated">서브 클래스에서 &lt;code&gt;@@match&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="6bd6526be1e62345fcf720d5a44848ce5d217f27" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@search&lt;/code&gt; in subclasses</source>
          <target state="translated">서브 클래스에서 &lt;code&gt;@@search&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="364a8655b56917844b72bbbe59f34bf6a668d4ab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@@split&lt;/code&gt; in subclasses</source>
          <target state="translated">서브 클래스에서 &lt;code&gt;@@split&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="db3eff818e2b5e01a1d45cd599a94c576a00c6d5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Collator&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Collator&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="aa9dd8a51114847faf5d80c7ec6a03c647bfb967" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Date.UTC()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Date.UTC()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dfbef0440c4ef535d60b20ec05e2da99357c3949" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Date.parse()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Date.parse()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b21d712bf1c7abde9c3a7a830c3d3690d1d9336" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;DateTimeFormat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;DateTimeFormat&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="fe7b70b0ad42931d4672a8fad5e459a0ddc059c8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;JSON.parse()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;JSON.parse()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fda9d47a7ba09f6e96cc1c88589cfc8f90e9550b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;MAX_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MAX_VALUE&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="ab1356c5da899d85adf68d98790d0688df3d9f4d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;MIN_VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MIN_VALUE&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="93859a76bff967dc62caa4d9aec6711cc95e39b9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.E&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="fdb062b8b41f6dd98a6b478f0c71351aa5f7f259" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LN10&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LN10&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="a8ac61c569646f667f7438c0f2008561889bb2cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LN2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LN2&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="f9f1159c9e322782a4c298efe9b7aaac4b3d7fa1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LOG10E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LOG10E&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="5d3f9a2daa7a1ca960475ed285b5de5ea74d1a82" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.LOG2E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.LOG2E&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="f43cc4d9501290c9fffb78530c1cc6e23e1fd9a8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.PI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.PI&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="ba651258cafb6f72b81503d4151ee1478c832059" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.SQRT1_2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.SQRT1_2&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="976aebb1bd71fa2937d372d6aff476b4860fff47" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.SQRT2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Math.SQRT2&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="e330c7190d2b0eed0076bc51b0c6727ee372dee7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.acos()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.acos()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbb8abbf744a7a471e0adef33108ce352e2cef14" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.acosh()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.acosh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe4e358b1ea8a6793bbbd038119abac908fa5d41" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.asin()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.asin()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7aaabb5d4c18bc47babe1fee3768b4cd56e819f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.asinh()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.asinh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a7acbe2b93c55e6766c21bb99a61136980f063f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atan()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.atan()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ae2e7939d311a6f4c12eeacc87617b45cc46426" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atan2()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.atan2()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e63930d26ed0da0e98e746e6a580eb549a18081" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.atanh()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.atanh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3de3f7ff132e94d11bcf96ec79c085701fa6d13f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cbrt()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.cbrt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f0795c7f6c72f3c4ee45db15995c4e83c4203e7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.ceil()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.ceil()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4b41b1997f3949c616b129d914b271ff196baf9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.clz32()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.clz32()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea87848369f3d8c269353d427b2f0ae6f09fc086" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cos()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.cos()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bc1746f4cc157b4b9df11ea279e9f777a7fdbd4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.cosh()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.cosh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb976ebe7c51e42a78c6812722dfe8cd5141a674" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.exp()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.exp()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="540b461b79bcaaa482e1e163588fe18bd457760c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.expm1()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.expm1()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bdc8b03db4073f084688d35cd02f9c80f2922d2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.floor()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.floor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e46a26bbc48638758a2228cb6d988bc690e678d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.fround()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.fround()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab97a7135ca6e7d20e6ad6ae467453d0e92d8204" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.hypot()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.hypot()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91ae785187110558b2089a65084f689ee71a03c7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.imul()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.imul()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9efc53c4e8b4e3a2795c2633f2e1579c2de24ae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.log()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b86f5d0131c58200f4e9f3a71450915e406593f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log()&lt;/code&gt; with a different base</source>
          <target state="translated">다른 기준으로 &lt;code&gt;Math.log()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="8cb369bd84fb3a9db42477c3d471253c1915fc98" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log10()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.log10()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fee67d42c34c290aa8bab4fac8f488c3fbf54b9b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log1p()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.log1p()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f76b6d6234aa36ce4d5c91bcb25f95c1f4680033" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.log2()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.log2()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d9e3a25687984bbdd6d8db20416e7b4b148e79a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.max()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.max()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8fe838b29e47e2ddc6c06243aa367e185007b1a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.min()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.min()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d047225943fee3e56662b65dd0dadae4d2d06fb0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.pow()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.pow()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="895e46a61e964641de16b978bac120590e127e57" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sign()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.sign()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2600f96fe3577a76e5bce2a8a5fa33a334ca4c5f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sin()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.sin()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="217b9b4dd477ec3b46def6888a0b6063371b73ba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sinh()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.sinh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2073d1948e291a0aba2f718d62ca6364e24cdfd6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.sqrt()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.sqrt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fce291cc3896de50d37da9836e86f63c6918e4bc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.tan()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.tan()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="227a5c68b610fa47d48e59f2bf2d80650dba11e0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.tanh()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.tanh()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5bee87d01db0a595ec64fba9359ca73345f1712" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Math.trunc()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Math.trunc()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4b4eb92a2ffff450696a5a3428799c8ada5aa97" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="06af22fcde5b1c83b1a5ee4cc714405b474f3f85" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;NaN&lt;/code&gt; as &lt;code&gt;Map&lt;/code&gt; keys</source>
          <target state="translated">사용 &lt;code&gt;NaN&lt;/code&gt; 의를 로 &lt;code&gt;Map&lt;/code&gt; 키</target>
        </trans-unit>
        <trans-unit id="34dcba570421eba4fd9981ae6cb67359e4a415cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Number&lt;/code&gt; to convert a &lt;code&gt;Date&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; 를 사용 하여 &lt;code&gt;Date&lt;/code&gt; 객체 변환</target>
        </trans-unit>
        <trans-unit id="50ad87e74aca29ee32cefc8aac202e01f3d594b9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40636fe65b241f78323c31826a3c853885dcb1de" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object&lt;/code&gt; given &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; types</source>
          <target state="translated">사용하여 &lt;code&gt;Object&lt;/code&gt; 주어진 &lt;code&gt;undefined&lt;/code&gt; 와 &lt;code&gt;null&lt;/code&gt; 유형</target>
        </trans-unit>
        <trans-unit id="1aed730fa13857ec34a8c1c7e6f1049d04b29aaa" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Object&lt;/code&gt; to create &lt;code&gt;Boolean&lt;/code&gt; objects</source>
          <target state="translated">사용 &lt;code&gt;Object&lt;/code&gt; 작성하는 &lt;code&gt;Boolean&lt;/code&gt; 객체를</target>
        </trans-unit>
        <trans-unit id="e64eb4c4dd053b88dcc89b8eb82656f5f33979eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="f8347a2bd0fee1e51d6d7c3a5a03c73b5f92291b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Promise.all&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="c7983a310913579e7f1d6d7d29f541ca7f7bc31f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Promise.race&lt;/code&gt; &amp;ndash; examples with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Promise.race&lt;/code&gt; 사용 &amp;ndash; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&quot;&gt; &lt;code&gt;setTimeout&lt;/code&gt; 을&lt;/a&gt; 사용한 예</target>
        </trans-unit>
        <trans-unit id="4bf3c2c92b26655f965a63cf04e47a407038309f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;RangeError&lt;/code&gt; (for non-numeric values)</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; 사용 (숫자가 아닌 값의 경우)</target>
        </trans-unit>
        <trans-unit id="9b3910a80105a107726af7df53c14bf5decb74eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;RangeError&lt;/code&gt; (for numeric values)</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; 사용 (숫자 값)</target>
        </trans-unit>
        <trans-unit id="32dc028e6ae49406b0f8b232da7879a6841597eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.apply()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.apply()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78dff74d34e66be69e07fb73eba8414dcb7abbe3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.construct()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.construct()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b278a106b6bc8adc803d37d53b05b9680bc0aa8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.defineProperty()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.defineProperty()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6e50310ac666f839a6b1c49d16cbc284733c482" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.deleteProperty()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.deleteProperty()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28791d84abb7871970f58bfc08646d85a486347b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.get()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.get()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8304e4a1ba40865f8890fe46ab03864fe6553640" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.getOwnPropertyDescriptor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c915e2c366a2a77265d9b4e74ef7c4f046504257" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.getPrototypeOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ba2ab55ddd7497bfffbe0d72ebb882fbd8a1585" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.has()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.has()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e24091a1e3ada68c43e5ad27ca36e597fb39a070" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.isExtensible()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.isExtensible()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="467c5ecb9bbb04697b7c860e3a3ae3cb73ef2080" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.ownKeys()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.ownKeys()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a825f724001bbe43c60c22d1e2911eeeabeaa9d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.preventExtensions()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad6e1fb12d2ff922480e416b7ca1e13789b8da3a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.set()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.set()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="86e64df031ede334382545587be9f79339c7a4b4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;Reflect.setPrototypeOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6becec3636e1ce2e5f1db49408fb138f4cb2061b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;String.raw()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;String.raw()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ac59f9f4cf19519393847dd73ca3e85fe1ee39c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;WeakMap&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="4e935599049c4d331606cf35f69f87d2fe630a33" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;[@@iterator]()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;[@@iterator]()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fcb2836a59b3825a96f686735cb098d1f8f1275" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;[@@iterator]()&lt;/code&gt; with &lt;code&gt;for..of&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;[@@iterator]()&lt;/code&gt; 와 &lt;code&gt;for..of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad6d25bb50f04ee46ca5804c8b77367a34dcf780" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;anchor()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;anchor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3797b2e02eb1b50879089022d7c3164e16ab7f69" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; and built-in functions</source>
          <target state="translated">사용 &lt;code&gt;apply&lt;/code&gt; 및 내장 함수</target>
        </trans-unit>
        <trans-unit id="b083afe9d3840b17bd2a374e9b1d657c93e787c9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; to append an array to another</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 를 사용 하여 배열을 다른 배열에 추가</target>
        </trans-unit>
        <trans-unit id="9713bdc691906ef72a6bc1a711804f2d79f4fa6e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;apply&lt;/code&gt; to chain constructors</source>
          <target state="translated">체인 생성자에 &lt;code&gt;apply&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="ceb48f3a5a4041edde04441562f95c41474638eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;arguments.callee&lt;/code&gt; in an anonymous recursive function</source>
          <target state="translated">익명 재귀 함수에서 &lt;code&gt;arguments.callee&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="09ad6b15b561cc4dea86fc3be9b381b7f96551c6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;arguments.length&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arguments.length&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="07b2edb9538b6d9db4de55e7358538e95e277d2e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;big()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;big()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a63831b9174917bd4ef59e8bac4ee7ad3750620" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;blink()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;blink()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fe07760305ea8b8baefa5e929fe548307c06f95" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;bold()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;bold()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16940a37535534140b72c771a3bd4135af0df59a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to chain constructors for an object</source>
          <target state="translated">객체에 대한 &lt;code&gt;call&lt;/code&gt; 투 체인 생성자 사용</target>
        </trans-unit>
        <trans-unit id="2030c5b59f5ca0acd57384cb212220b648ba3eae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke a function and specifying the context for '&lt;code&gt;this&lt;/code&gt;'</source>
          <target state="translated">&lt;code&gt;call&lt;/code&gt; 을 사용 하여 함수 호출 및 ' &lt;code&gt;this&lt;/code&gt; '에 대한 컨텍스트 지정</target>
        </trans-unit>
        <trans-unit id="20932bf11484b9bd555433ee437743ea8fc7634c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke a function and without specifying the first argument</source>
          <target state="translated">첫 번째 인수를 지정하지 않고 &lt;code&gt;call&lt;/code&gt; 을 사용 하여 함수 호출</target>
        </trans-unit>
        <trans-unit id="c7186bc460b794bceddf4a328c393fa6cdc29640" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;call&lt;/code&gt; to invoke an anonymous function</source>
          <target state="translated">&lt;code&gt;call&lt;/code&gt; 을 사용 하여 익명 함수 호출</target>
        </trans-unit>
        <trans-unit id="b867b50212ed6e89d2de6441c976ef336360830d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;charCodeAt()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;charCodeAt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="556d615d9041c8d5478e767d4d7a1410838ba06a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;codePointAt()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;codePointAt()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9429375d874123b345d7191586002d8083da071" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compare&lt;/code&gt; for array search</source>
          <target state="translated">배열 검색에 &lt;code&gt;compare&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="f16a1b178f956b7d75464f71fb597fe309cf5c10" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compare&lt;/code&gt; for array sort</source>
          <target state="translated">배열 정렬에 &lt;code&gt;compare&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="02b5e9985b8ecaa7f12774be0a8688f361e65c6c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;compile()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;compile()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85e65691e7cc08b10e7b80bb001289e75bbf23c9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;concat()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;concat()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="611eb26acf09c73abf163660771fc340757a96d3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;default&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 문 에서 &lt;code&gt;default&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="642628aa034f0b4d4c2784d4456bb61f2057fe09" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;default&lt;/code&gt; with &lt;code&gt;export&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; 와 함께 &lt;code&gt;default&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="78923445351c108fc913a9fac23c1aa9f6d3f3f3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;do...while&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;do...while&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a3bcbcba095740840e728c39a3f242bfb701569" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;else if&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;else if&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="646ee9e811ab23d353a774a0b354b8342975e5a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;endsWith()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;endsWith()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe0ae54c13633401a1ceb09277a500848db451ea" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;entries()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;entries()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9436728bf5ff88c5da41003c9a695a4269ce66b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="eb8f6039130d6008e8dc9ef8d1c09417e49c7f51" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval&lt;/code&gt; to evaluate a string of JavaScript statements</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 을 사용 하여 일련의 JavaScript 문 평가</target>
        </trans-unit>
        <trans-unit id="88e071cfe4d98766b2d0a4c39ce83f967246717a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;exec()&lt;/code&gt; with &lt;code&gt;RegExp&lt;/code&gt; literals</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; 리터럴 과 함께 &lt;code&gt;exec()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="a52ec19db691f347f5f2433ee6eb7fe006475d56" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;extends&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="e5eae3a4415c107042d5f17503c6ecae2bcdc31b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;extends&lt;/code&gt; with built-in objects</source>
          <target state="translated">내장 객체와 함께 &lt;code&gt;extends&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="6f7e9118e94835fcd9f5a428acb6732b0b3bfe05" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fixed()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;fixed()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8058f81484f83098711cee882913078eb17fe117" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;flags&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="3ec060be63d9a2d6b30d94a663eea50439b802b3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fontcolor()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;fontcolor()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fea03ae88fb10291a0695fd13fe77eec964a23bf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fontsize()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;fontsize()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="702e8d93e7600e0549629ee260fdf1db5a27a4db" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for each...in&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;for each...in&lt;/code&gt; 사용 ...</target>
        </trans-unit>
        <trans-unit id="0a7f47d7718b9d78b1fe878b530e960cb18938eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;for&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="491008517aae1412f6b94546b3220fd5b4353c00" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;for&lt;/code&gt; without a statement</source>
          <target state="translated">사용 &lt;code&gt;for&lt;/code&gt; 진술없이</target>
        </trans-unit>
        <trans-unit id="d5a9aaaeac0acbdcf769678baa5b9f4acff26d0d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;format&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="bb2e604aa63b714da8b15b55ebe41223fb2ac6d6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;format&lt;/code&gt; with &lt;code&gt;map&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 와 함께 &lt;code&gt;format&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="d104e0628dbbb852f433440106690c19f2c07e33" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fromCharCode()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;fromCharCode()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80b847492a6095bbae8614aec0a6543cf0367d9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fromCodePoint()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;fromCodePoint()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d00420b95ee683cbed8717a78c05748e24282a7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;function&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="a4b9545503ad7e7caaab9a705491e3e94e905a67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getDay()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getDay()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="540160723a5364f95f0dfafc1d17361d9d5a1964" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getFullYear()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91a3254251e7e95341290aec33ebd31b9038cf56" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getHours()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0528a1d02cd150547cf68575462307a6013150c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMilliseconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84519873ea12bef2a0b320cf648b5ba2c66f681f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMinutes()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ef82941d61c1f5ca81d2bc7825f0299185f34a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getMonth()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb6ce8532e2eed1444291d51e61fef2c99751a9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getSeconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eea233044fa126b4a981036ba57bcb77efe79c4d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getTime()&lt;/code&gt; for copying dates</source>
          <target state="translated">날짜 복사에 &lt;code&gt;getTime()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="45e362351d8145434a2ad82319115f1d839ca87e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getTimezoneOffset()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getTimezoneOffset()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce861b053d11ae717c849c1b5aeb5d963bef50ec" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCDate()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCDate()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="524d94a2241be43f466b1704d4629ecdba9a280e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCDay()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCDay()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31c5774ef5b7e5bb31e57cc1e7242a653019ba3e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCFullYear()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="284b794cd10bb9cc0059daa48bc8a6ad0cc91ea5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCHours()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a66620472398f85cd23eec76346748593e6062f6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCMilliseconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41e37c29afff9e2bba7e5d15fd7f67d183a75bec" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCMinutes()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96e9e3f635673ee1095fc3973244bbf3bb462298" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCMonth()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b7771c6105c7ebfa5e7c0e84ff104dd1fee0436" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;getUTCSeconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;getUTCSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5eb0ebc826ff5087b94da9913c4d13b979facd2c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;global&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0a2bd1a5741af5944c1a0dada08b5c3f27f6ea93" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; with &lt;code&gt;replace()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;global&lt;/code&gt; 과 &lt;code&gt;ignore&lt;/code&gt; 로 &lt;code&gt;replace()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9335bb0c8c7a9fbd334563abd721c366dd39c864" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;hasOwnProperty&lt;/code&gt; as a property name</source>
          <target state="translated">사용 &lt;code&gt;hasOwnProperty&lt;/code&gt; 를 속성 이름으로</target>
        </trans-unit>
        <trans-unit id="3eb66a176b56b916c633a6e1c14b6dfbe806f97d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;hasOwnProperty&lt;/code&gt; to test for a property's existence</source>
          <target state="translated">&lt;code&gt;hasOwnProperty&lt;/code&gt; 를 사용 하여 속성 존재 여부 테스트</target>
        </trans-unit>
        <trans-unit id="cd86ab8db79574591b27b8e93f672c5ddc50dd49" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;if...else&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;if...else&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f916f19d2d01c2801df44690242aad17fd222236" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ignoreCase&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ignoreCase&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="30df41115afaa4f9b2d06639f0f5256fa38a1cc6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;in&lt;/code&gt; with deleted or undefined properties</source>
          <target state="translated">사용 &lt;code&gt;in&lt;/code&gt; 삭제 또는 정의되지 않은 속성</target>
        </trans-unit>
        <trans-unit id="2f814dcbdca78274933b0fa26027a8ea2839f670" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;includes()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;includes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0796e7f2a1bd2be10a001c572495085ffc18f0a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;indexOf()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;indexOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4008dac0f5b598086ada72479a5ebe874221e021" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;indexOf()&lt;/code&gt; and &lt;code&gt;lastIndexOf()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;indexOf()&lt;/code&gt; 와 &lt;code&gt;lastIndexOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c5127b7bf6660a26dbe5ed59b8a90ceece94d18" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;indexOf()&lt;/code&gt; to count occurrences of a letter in a string</source>
          <target state="translated">문자열에서 문자 발생 횟수를 계산하기 위해 &lt;code&gt;indexOf()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="72fb91fb185fb0e7e6b31e86a649d824fea0957e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;italics()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;italics()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73ebea95bd3846e66e11fe85ea8b9598c0d1d7b8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;keys()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="3198dc775efd62bba2c46bf22fea734b6155a4b1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lastIndex&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;lastIndex&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0392eaabb822ccaa8f0b75db7e385e217ecb68e5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lastIndexOf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="13f4e3064e4d87f8de9fde36966b7ce2bc36c0d6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;link()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;link()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1870f6606aec044f0504be169615045f636102fb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;load&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="2b6dd847f974de41890037f3c9b44e636b32b805" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;localeCompare()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;localeCompare()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09ca3d1fdddcf1c8c4609c1738a4110d282a086c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;locales&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0b8d19e69df2cfb34dc429253f37d7fddffff291" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">사용하여 &lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d3212cd6cd2ebbbe01153a383c4e17109009799" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;map&lt;/code&gt; generically</source>
          <target state="translated">일반적으로 &lt;code&gt;map&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="e7315d0d5b3e4a02f5e549cafabc8b170d32135f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;map&lt;/code&gt; generically &lt;code&gt;querySelectorAll&lt;/code&gt;</source>
          <target state="translated">일반적으로 &lt;code&gt;map&lt;/code&gt; 사용 &lt;code&gt;querySelectorAll&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec279cff19f48229b6eb7573d552d3b8dd458a09" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;match()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;match()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7550a15bf265ec90df2d3d7306c3f9efe7f0010" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;match()&lt;/code&gt; with no parameter</source>
          <target state="translated">매개 변수없이 &lt;code&gt;match()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="5856f393538c67d40c79c2c5dfdd9ca70ae94e2f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;multiline&lt;/code&gt;</source>
          <target state="translated">사용하여 &lt;code&gt;multiline&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="246b016ef156f266458a958b00aac7aca228553b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 연산자 사용</target>
        </trans-unit>
        <trans-unit id="af80b903fc7b3bace484b851c9ef66c8664d46c3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;next()&lt;/code&gt;</source>
          <target state="translated">사용하여 &lt;code&gt;next()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4381befd814214d0f21bad72f7a9dcc9f2e4d66e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;normalize()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;normalize()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f774280b40aa1a5ffd264b4e0fd384132a130c0a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;notify&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;notify&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="3a92fec447e7b6f840d9946c406278bb9a9f12b2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0b3a131aae63f7c1f8510de17102d7e39bfeab51" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;propertiesObject&lt;/code&gt; argument with &lt;code&gt;Object.create()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Object.create()&lt;/code&gt; 와 함께 &lt;code&gt;propertiesObject&lt;/code&gt; 인수 사용</target>
        </trans-unit>
        <trans-unit id="1f858350a79c29457c7674871e8fd4b12922df79" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;return()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;return()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b660acdcb356f0a6813dcc9d5c93ef508fff1e1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;search()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;search()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6cb215be1ac6db7ea015e974a60ade5dd0443c51" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;select&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="4f8d41720bffacb21aef9fe16b150ead9c536389" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setDate()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setDate()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d50e594f02888eef760dd72f66649b3a6e274994" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setFullYear()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71a1cf51abe893f702e25c73b9abe4801407d2b7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setHours()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d1363cae1d81cda5f0adcc983359b97f54d31fd" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setMilliseconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19d3ca372144ddc83d3a42bebca924c8a4787f58" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setMinutes()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67488e7b58f2d2c3798fe0fc773bb711bfc0bfc2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setMonth()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d6df32b9d720dcfc1cf84e8c7c734be3c90164b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setSeconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3595097d2218c80be2e34adc66141afb6f7dbe9d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setTime()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setTime()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93acca4e1c613c9a779bacf3db24cb8022d84eb8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCDate()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setUTCDate()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d92f3007828aefd5a36a0aaf083e4f698842a3e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCFullYear()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setUTCFullYear()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f3599db912b4a0a35a599230df0f1e876366ee8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCHours()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setUTCHours()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a1bec3abcb5b4d3723b4b4e15736389055fcac8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCMilliseconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setUTCMilliseconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6733e4d2b3ee9e13b5af5b402fb4792dd9d7c81" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCMinutes()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setUTCMinutes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c446222eafac01b6b7cbacc716f330628bce1d4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCMonth()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setUTCMonth()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff8aad87d4c38c51abd09a19eeebe73e90a264fe" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;setUTCSeconds()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;setUTCSeconds()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61d8de8a3eef028b5de75b9d013b2dacad63837c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;size&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="c50e5877a94d2b339c616e8c1551c6117cd743a8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;slice()&lt;/code&gt; to create a new string</source>
          <target state="translated">사용 &lt;code&gt;slice()&lt;/code&gt; 새로운 캐릭터를 만들 수 있습니다</target>
        </trans-unit>
        <trans-unit id="8b4cffaf896f5f934d26f2c9816dbdcb00d87937" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;slice()&lt;/code&gt; with negative indexes</source>
          <target state="translated">음수 인덱스와 함께 &lt;code&gt;slice()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="0505da9ac6c39434adf9d76de6e8e12a87118194" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;slice&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="d724e1ea63edf61ad7264f76ee8d58ddbaf54988" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;small()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;small()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8983cb0f1b4c2cb71275fde6b685783122d04688" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;source&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="40602c91c772af3efda56b3a24117a382d55d66e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;split()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;split()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed15292fad5c7bd5ab09a2ec2fcac3ddaf14b74d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;startsWith()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;startsWith()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc77b4ff3e9316547f1d552c4c53a5f66270ff32" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;strike()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;strike()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33b07f99faefbdfa4a2c55ffb6386d0868ded0a5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;sub()&lt;/code&gt; and &lt;code&gt;sup()&lt;/code&gt; methods</source>
          <target state="translated">사용 &lt;code&gt;sub()&lt;/code&gt; 및 &lt;code&gt;sup()&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="e318e7a917252a12a91c3e8a01bf9d2dabebeb9a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;substr()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;substr()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3352f9595f5585b850e1d219c5e6b421406ad13" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;substring()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;substring()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30250ea7a7219ad073f33871266f5c05ae90cae1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;substring()&lt;/code&gt; with &lt;code&gt;length&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 속성 과 함께 &lt;code&gt;substring()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="fbf904135b14968fcdf3f739756ac4f83ecc3dd4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;super.prop&lt;/code&gt; in object literals</source>
          <target state="translated">객체 리터럴에서 &lt;code&gt;super.prop&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="e88598c78be6509407efcc63a24e7abf6ba088eb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;super&lt;/code&gt; in classes</source>
          <target state="translated">수업에서 &lt;code&gt;super&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="5dff570b29abe23b985888a40d346bf5cadf54f7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;supportedLocalesOf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;supportedLocalesOf&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="8c7758706562fda630d6755aab1f3cc186415ea5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;switch&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="30d897f5beae69bf418b80d47a134edb97053ad4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;test()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;test()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4cab76dc4cea0bd3fca28dcefbafc0a60c2833fc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;test()&lt;/code&gt; on a regex with the global flag</source>
          <target state="translated">전역 플래그로 정규식에서 &lt;code&gt;test()&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="db258c969443ad6b292b88ebd86e77e8081b9b5d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;thisArg&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="ebb8b7b58bfd56e42821c52ad2a68ec5ccaa9527" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;throw()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;throw()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="937ab0b24d027824f33355c724ee231409ceb3a5" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toExponential&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toExponential&lt;/code&gt; 사용하여</target>
        </trans-unit>
        <trans-unit id="58a0aa431da017f91a1517bf6bd28431a76defc0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toFixed&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toFixed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="baefb7bf3c55ed75d807ac8e91e6536057863625" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toISOString()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toISOString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6a6f0f54d04169f5799cf7422f843564f583974" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toJSON()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toJSON()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1df9fa01f03464d5cbea74246a85c7bd09b564d7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleDateString()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toLocaleDateString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fc00d6354172f4d3c310a9b634797c61caba608" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleLowerCase()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toLocaleLowerCase()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd2e22962dfa1c56823584b08661204d65a70169" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleString()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toLocaleString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea9f07fe937cfa8aa249b90bba93bad41a54e737" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleString&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toLocaleString&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="b9ff68cad4fb433cd8976d39a5edf16bddbb630d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleTimeString()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toLocaleTimeString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4935af0a22f1025fd3d249664e57a151694f8136" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLocaleUpperCase()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toLocaleUpperCase()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="756b245ec73f795eb77aae538f2045c283e286e4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toLowerCase()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toLowerCase()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8986072a6c91150877a79606966ef1d3b97a84d7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toPrecision&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toPrecision&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="eaef8ffe3f864b85a1d3c7961133f3d4f7356224" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toString()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="575a479275302af0f2efd99295ddb1cec22ffdda" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toString()&lt;/code&gt; in this way is unreliable; objects can change the behavior of &lt;code&gt;Object.prototype.toString()&lt;/code&gt; by defining a &lt;a href=&quot;../symbol/tostringtag&quot;&gt;&lt;code&gt;Symbol.toStringTag&lt;/code&gt;&lt;/a&gt; property, leading to unexpected results. For example:</source>
          <target state="translated">이런 방식으로 &lt;code&gt;toString()&lt;/code&gt; 을 사용 하는 것은 신뢰할 수 없습니다. 객체는 &lt;a href=&quot;../symbol/tostringtag&quot;&gt; &lt;code&gt;Symbol.toStringTag&lt;/code&gt; &lt;/a&gt; 속성 을 정의하여 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; 의 동작을 변경하여 예기치 않은 결과를 초래할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="1aaa2b702905e9e5af22e175d89f79f94623ddfc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toString()&lt;/code&gt; to detect object class</source>
          <target state="translated">사용 &lt;code&gt;toString()&lt;/code&gt; 객체 클래스를 감지</target>
        </trans-unit>
        <trans-unit id="149b6680423597fcfcec999b7db64ca42bb5cae8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toString&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;toString&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="30ac701da98c589119baf56516f9828f1bdc939d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;toUTCString()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;toUTCString()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed7ec81510e900115c58cf955f906a03bc7aacf3" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;trim()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;trim()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3bde3bd197e7877ea32e2b7dcaa9a06de8dc920" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;trimEnd()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;trimEnd()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6857d244d58dc6389563e9905d1f9787c6cb1752" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;trimStart()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;trimStart()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="032651b45070405671afb48d9f7af9d2df8bf4e0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;typeof&lt;/code&gt; with Arguments</source>
          <target state="translated">인수와 함께 &lt;code&gt;typeof&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="5a93be5e5a37537b8b5cacb3cd94852656694ba4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;valueOf()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;valueOf()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="222796ead6973d33b1caa999b658dd4e1d64d900" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;valueOf&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;valueOf&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="af146822dcb5f73cd83d6897c6cb5a23edcbf7cf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;values()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; 사용 ()</target>
        </trans-unit>
        <trans-unit id="b3cd2a7d1cf9e9cfaa2ad1795fdd66e3d3842698" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;watch&lt;/code&gt; and &lt;code&gt;unwatch&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;watch&lt;/code&gt; 와 &lt;code&gt;unwatch&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2cbb0585497a87121bfdf2e89696e7e1f752bacc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;watch&lt;/code&gt; to validate an object's properties</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; 를 사용 하여 객체 속성 확인</target>
        </trans-unit>
        <trans-unit id="6fd9e42f040bbedf10970469ffb6d94c33817e26" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;with&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="9f8f48c81ee74e79647332750e20d9654fe2f9ae" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;with&lt;/code&gt; is not recommended, and is forbidden in ECMAScript 5 &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. The recommended alternative is to assign the object whose properties you want to access to a temporary variable.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 를 사용 하는 것은 권장되지 않으며 ECMAScript 5 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드에서는&lt;/a&gt; 금지되어 있습니다 . 권장되는 대안은 속성을 액세스하려는 객체를 임시 변수에 할당하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d72a9261c95373fca733ad408aec958075410f36" translate="yes" xml:space="preserve">
          <source>Using @@replace in subclasses</source>
          <target state="translated">서브 클래스에서 @@ replace 사용</target>
        </trans-unit>
        <trans-unit id="10a2b1c3d026a368088ef8067b12ae3091a8bba9" translate="yes" xml:space="preserve">
          <source>Using @@search in subclasses</source>
          <target state="translated">하위 클래스에서 @@ search 사용</target>
        </trans-unit>
        <trans-unit id="3194a9e3540c5162f324f2f1ce747b59459ec262" translate="yes" xml:space="preserve">
          <source>Using @@split in subclasses</source>
          <target state="translated">하위 클래스에서 @@ split 사용</target>
        </trans-unit>
        <trans-unit id="85d3629462de18bcf70ed546ef740e99dd8f043c" translate="yes" xml:space="preserve">
          <source>Using @@toPrimitive</source>
          <target state="translated">@@ toPrimitive 사용</target>
        </trans-unit>
        <trans-unit id="ea5b16aff7cfe1c7471de2f8a73c803932fa9093" translate="yes" xml:space="preserve">
          <source>Using Array.isArray</source>
          <target state="translated">Array.isArray 사용</target>
        </trans-unit>
        <trans-unit id="befae23cfd2538f42c62e39144fc5c0dd4cffb67" translate="yes" xml:space="preserve">
          <source>Using Array.of</source>
          <target state="translated">Array.of 사용</target>
        </trans-unit>
        <trans-unit id="001cc0918f3af6645cb816420883ad4fbb7a93bc" translate="yes" xml:space="preserve">
          <source>Using Atomics</source>
          <target state="translated">원 자학 사용</target>
        </trans-unit>
        <trans-unit id="6d75f0d74cc1b9c51e5ed55ce479a71ab2e6b0c9" translate="yes" xml:space="preserve">
          <source>Using BYTES_PER_ELEMENT</source>
          <target state="translated">BYTES_PER_ELEMENT 사용</target>
        </trans-unit>
        <trans-unit id="a7007c1fb38b9246afe05ea8d6366cee03db692b" translate="yes" xml:space="preserve">
          <source>Using DataView</source>
          <target state="translated">DataView 사용</target>
        </trans-unit>
        <trans-unit id="ca69aa4622234635c97a4248949af93bb6cfedb2" translate="yes" xml:space="preserve">
          <source>Using Date.UTC()</source>
          <target state="translated">Date.UTC () 사용</target>
        </trans-unit>
        <trans-unit id="8169038916d9eb3a78d51cbdcacce2f2ac7bd58c" translate="yes" xml:space="preserve">
          <source>Using ES2015 arrow function</source>
          <target state="translated">ES2015 화살표 기능 사용</target>
        </trans-unit>
        <trans-unit id="59f64a2ee98bc6d317ceec577a394e6f7f790e6a" translate="yes" xml:space="preserve">
          <source>Using Infinity</source>
          <target state="translated">Infinity 사용</target>
        </trans-unit>
        <trans-unit id="9404b5f9859e7f887c4be9e3f6ee032b7b66abe1" translate="yes" xml:space="preserve">
          <source>Using JSON.parse()</source>
          <target state="translated">JSON.parse () 사용</target>
        </trans-unit>
        <trans-unit id="95c0a1777a3e4d0c84b4b02dcdcccfc4e9b99a2c" translate="yes" xml:space="preserve">
          <source>Using JSON.stringify</source>
          <target state="translated">JSON.stringify 사용</target>
        </trans-unit>
        <trans-unit id="bd068962a1ee49d75ea89253226e64c62f4bec6c" translate="yes" xml:space="preserve">
          <source>Using MAX_VALUE</source>
          <target state="translated">MAX_VALUE 사용</target>
        </trans-unit>
        <trans-unit id="bdccc62e4f1cb94153e56d76a12e341f9763a080" translate="yes" xml:space="preserve">
          <source>Using MIN_SAFE_INTEGER</source>
          <target state="translated">MIN_SAFE_INTEGER 사용</target>
        </trans-unit>
        <trans-unit id="5783d518b246254874051913c25aea90b00be011" translate="yes" xml:space="preserve">
          <source>Using MIN_VALUE</source>
          <target state="translated">MIN_VALUE 사용</target>
        </trans-unit>
        <trans-unit id="719949b8d0b4be56b9db7bfe44057439ff738247" translate="yes" xml:space="preserve">
          <source>Using Math.E</source>
          <target state="translated">Math.E 사용</target>
        </trans-unit>
        <trans-unit id="48ba2baf8468133f1574fbc1a19345764393d0ed" translate="yes" xml:space="preserve">
          <source>Using Math.LN10</source>
          <target state="translated">Math.LN10 사용</target>
        </trans-unit>
        <trans-unit id="aba768fbbebb4486c1787c5302c2b3fd958a949d" translate="yes" xml:space="preserve">
          <source>Using Math.LN2</source>
          <target state="translated">Math.LN2 사용</target>
        </trans-unit>
        <trans-unit id="d51d5f9ba3dd1f080da2aa476f16bdf014999d1f" translate="yes" xml:space="preserve">
          <source>Using Math.LOG10E</source>
          <target state="translated">Math.LOG10E 사용</target>
        </trans-unit>
        <trans-unit id="d6a0edb4c7b0a228fe5e6a7d0ea36ffb4ebbdef5" translate="yes" xml:space="preserve">
          <source>Using Math.LOG2E</source>
          <target state="translated">Math.LOG2E 사용</target>
        </trans-unit>
        <trans-unit id="39869e3881f35ea0c5167179d9d131b40208b46e" translate="yes" xml:space="preserve">
          <source>Using Math.PI</source>
          <target state="translated">Math.PI 사용</target>
        </trans-unit>
        <trans-unit id="6e11fdde5f4df9489ac2f18d389662bdc9a58a28" translate="yes" xml:space="preserve">
          <source>Using Math.SQRT1_2</source>
          <target state="translated">Math.SQRT1_2 사용</target>
        </trans-unit>
        <trans-unit id="2357861057178a79700cc65a9587cfefb531006b" translate="yes" xml:space="preserve">
          <source>Using Math.SQRT2</source>
          <target state="translated">Math.SQRT2 사용</target>
        </trans-unit>
        <trans-unit id="3b415fd45494e9408a52bbc7d229f8d001a92321" translate="yes" xml:space="preserve">
          <source>Using Math.acos()</source>
          <target state="translated">Math.acos () 사용</target>
        </trans-unit>
        <trans-unit id="4b9db29960b3efc4a440a0f6eaaaf5abf2928ec2" translate="yes" xml:space="preserve">
          <source>Using Math.acosh()</source>
          <target state="translated">Math.acosh () 사용</target>
        </trans-unit>
        <trans-unit id="d780889391127eabefb5d80f7217d41de506c584" translate="yes" xml:space="preserve">
          <source>Using Math.asin()</source>
          <target state="translated">Math.asin () 사용</target>
        </trans-unit>
        <trans-unit id="c89356178c41b1f8c98ec3f308f5531685e06aab" translate="yes" xml:space="preserve">
          <source>Using Math.asinh()</source>
          <target state="translated">Math.asinh () 사용</target>
        </trans-unit>
        <trans-unit id="793a97229683038d94a50a094ac5eab1da2da827" translate="yes" xml:space="preserve">
          <source>Using Math.atan()</source>
          <target state="translated">Math.atan () 사용</target>
        </trans-unit>
        <trans-unit id="166cc7fe4c80e8b568b85de0a6c0d5d9010a4a9d" translate="yes" xml:space="preserve">
          <source>Using Math.atan2()</source>
          <target state="translated">Math.atan2 () 사용</target>
        </trans-unit>
        <trans-unit id="9cce9647f886b613fda2fa5159312c607c8078ed" translate="yes" xml:space="preserve">
          <source>Using Math.atanh()</source>
          <target state="translated">Math.atanh () 사용</target>
        </trans-unit>
        <trans-unit id="34c55b3811680382d07971d4943a4abd4bbbb2aa" translate="yes" xml:space="preserve">
          <source>Using Math.cbrt()</source>
          <target state="translated">Math.cbrt () 사용</target>
        </trans-unit>
        <trans-unit id="cdcb301070da43f494526a06c1b89b54d08738f2" translate="yes" xml:space="preserve">
          <source>Using Math.ceil()</source>
          <target state="translated">Math.ceil () 사용</target>
        </trans-unit>
        <trans-unit id="570adc3a26330810b2c7caaeff761568abd98b65" translate="yes" xml:space="preserve">
          <source>Using Math.clz32()</source>
          <target state="translated">Math.clz32 () 사용</target>
        </trans-unit>
        <trans-unit id="962cdfcace200fe800ad6c4aaddb6c85da3944bf" translate="yes" xml:space="preserve">
          <source>Using Math.cos()</source>
          <target state="translated">Math.cos () 사용</target>
        </trans-unit>
        <trans-unit id="a630dd5a2a3112c750260fa0eb51ab6f679a5530" translate="yes" xml:space="preserve">
          <source>Using Math.cosh()</source>
          <target state="translated">Math.cosh () 사용</target>
        </trans-unit>
        <trans-unit id="04a17fae4e0152e20a9bc36538b4f3779668f282" translate="yes" xml:space="preserve">
          <source>Using Math.exp()</source>
          <target state="translated">Math.exp () 사용</target>
        </trans-unit>
        <trans-unit id="3d1ac07417578e71d5197a1d6612efc602ec3d89" translate="yes" xml:space="preserve">
          <source>Using Math.expm1()</source>
          <target state="translated">Math.expm1 () 사용</target>
        </trans-unit>
        <trans-unit id="ea02dcd90ea4af5d9febc626d053d208560f0fe3" translate="yes" xml:space="preserve">
          <source>Using Math.floor()</source>
          <target state="translated">Math.floor () 사용</target>
        </trans-unit>
        <trans-unit id="a343865f8a7b39f01cc50131bc1573e0ed6296cb" translate="yes" xml:space="preserve">
          <source>Using Math.fround()</source>
          <target state="translated">Math.fround () 사용</target>
        </trans-unit>
        <trans-unit id="542a5069bf82d82d45325bbeb81adb0e789bcc08" translate="yes" xml:space="preserve">
          <source>Using Math.hypot()</source>
          <target state="translated">Math.hypot () 사용</target>
        </trans-unit>
        <trans-unit id="04cb0a7e79a4de08b4e6e28280f48d8b9a2653b7" translate="yes" xml:space="preserve">
          <source>Using Math.imul()</source>
          <target state="translated">Math.imul () 사용</target>
        </trans-unit>
        <trans-unit id="f7a29dac1aada49fd01b0fa2abf1b1d1355144c6" translate="yes" xml:space="preserve">
          <source>Using Math.log()</source>
          <target state="translated">Math.log () 사용</target>
        </trans-unit>
        <trans-unit id="ac1bdbd9c9b722157f1f1feaf2edeeda38cb6318" translate="yes" xml:space="preserve">
          <source>Using Math.log() with a different base</source>
          <target state="translated">다른베이스와 함께 Math.log () 사용</target>
        </trans-unit>
        <trans-unit id="1c63277e0f6ef4228ff53fa7dd72b4e5e5e9d3b6" translate="yes" xml:space="preserve">
          <source>Using Math.log10()</source>
          <target state="translated">Math.log10 () 사용</target>
        </trans-unit>
        <trans-unit id="14104ad19292453f2cf38390d20d781bd1be18ef" translate="yes" xml:space="preserve">
          <source>Using Math.log2()</source>
          <target state="translated">Math.log2 () 사용</target>
        </trans-unit>
        <trans-unit id="745e60947ebcb9590b4381398e7d701d403027f6" translate="yes" xml:space="preserve">
          <source>Using Math.max()</source>
          <target state="translated">Math.max () 사용</target>
        </trans-unit>
        <trans-unit id="f9592a7a817ec739ee971375582eaddefe584eec" translate="yes" xml:space="preserve">
          <source>Using Math.min()</source>
          <target state="translated">Math.min () 사용</target>
        </trans-unit>
        <trans-unit id="5494ea9ffd5357f13a59b2b32d33e16e46d68821" translate="yes" xml:space="preserve">
          <source>Using Math.pow()</source>
          <target state="translated">Math.pow () 사용</target>
        </trans-unit>
        <trans-unit id="74cfc82ee5004cbbab6558aef01db56da5a7d1e3" translate="yes" xml:space="preserve">
          <source>Using Math.sign()</source>
          <target state="translated">Math.sign () 사용</target>
        </trans-unit>
        <trans-unit id="b85f033938afc1cfc257ea3331a4786502d9e18c" translate="yes" xml:space="preserve">
          <source>Using Math.sin()</source>
          <target state="translated">Math.sin () 사용</target>
        </trans-unit>
        <trans-unit id="3d80c5cbc8f111a2e61f3ec41d3e69a37e87994d" translate="yes" xml:space="preserve">
          <source>Using Math.sinh()</source>
          <target state="translated">Math.sinh () 사용</target>
        </trans-unit>
        <trans-unit id="9d86b933ca3c270099cebebc88be5c318a9da34e" translate="yes" xml:space="preserve">
          <source>Using Math.sqrt()</source>
          <target state="translated">Math.sqrt () 사용</target>
        </trans-unit>
        <trans-unit id="b9016f25376fd08bfb07fbf3c9a8664551048b73" translate="yes" xml:space="preserve">
          <source>Using Math.tan()</source>
          <target state="translated">Math.tan () 사용</target>
        </trans-unit>
        <trans-unit id="dfe89fa076c202b85b0f98d097b553babee5ecac" translate="yes" xml:space="preserve">
          <source>Using Math.tanh()</source>
          <target state="translated">Math.tanh () 사용</target>
        </trans-unit>
        <trans-unit id="1357fc9b975a8fc3bf0077e2f3a290db2ba2b8ee" translate="yes" xml:space="preserve">
          <source>Using Math.trunc()</source>
          <target state="translated">Math.trunc () 사용</target>
        </trans-unit>
        <trans-unit id="defb34b425d3fcb0d27a0a736cdde19ff61aee04" translate="yes" xml:space="preserve">
          <source>Using NEGATIVE_INFINITY</source>
          <target state="translated">NEGATIVE_INFINITY 사용</target>
        </trans-unit>
        <trans-unit id="7bd64c5ed88d243c2d4b01227e396eb72e624969" translate="yes" xml:space="preserve">
          <source>Using NaN as Map keys</source>
          <target state="translated">NaN을지도 키로 사용</target>
        </trans-unit>
        <trans-unit id="916d8ebb8432e45f7ec6c77b25ef0022c32ff15c" translate="yes" xml:space="preserve">
          <source>Using Number to convert a Date object</source>
          <target state="translated">Number를 사용하여 Date 객체 변환</target>
        </trans-unit>
        <trans-unit id="6755f1cb46d0e5c919a03c38f067c616bd293892" translate="yes" xml:space="preserve">
          <source>Using Object.defineProperties</source>
          <target state="translated">Object.defineProperties 사용</target>
        </trans-unit>
        <trans-unit id="504a7d1ffc1648c0d74e0a00001173d11270708f" translate="yes" xml:space="preserve">
          <source>Using Object.getOwnPropertyDescriptor</source>
          <target state="translated">Object.getOwnPropertyDescriptor 사용</target>
        </trans-unit>
        <trans-unit id="a0ace909076fca8bffb6e4b82c262fd9d2b6429c" translate="yes" xml:space="preserve">
          <source>Using Object.getOwnPropertyNames()</source>
          <target state="translated">Object.getOwnPropertyNames () 사용</target>
        </trans-unit>
        <trans-unit id="08316f00abc86583f3b98b007d9fbe9fc94ecc21" translate="yes" xml:space="preserve">
          <source>Using Object.is</source>
          <target state="translated">Object.is 사용</target>
        </trans-unit>
        <trans-unit id="d590b93c1345d408ef53b2e709690d48d9e9cf43" translate="yes" xml:space="preserve">
          <source>Using Object.isExtensible</source>
          <target state="translated">Object.isExtensible 사용</target>
        </trans-unit>
        <trans-unit id="1f8cb10b306c936041193600b12445bb11da11af" translate="yes" xml:space="preserve">
          <source>Using Object.isFrozen</source>
          <target state="translated">Object.isFrozen 사용</target>
        </trans-unit>
        <trans-unit id="8bc499e4bb885d36767677b80da9b0da74d91a19" translate="yes" xml:space="preserve">
          <source>Using Object.isSealed</source>
          <target state="translated">Object.isSealed 사용</target>
        </trans-unit>
        <trans-unit id="5c07426f185dea0efaf477ae037055818bc28ac4" translate="yes" xml:space="preserve">
          <source>Using Object.keys</source>
          <target state="translated">Object.keys 사용</target>
        </trans-unit>
        <trans-unit id="72b2c5a17f4fb15655a57fcb6f0a31115c76b9fb" translate="yes" xml:space="preserve">
          <source>Using Object.preventExtensions</source>
          <target state="translated">Object.preventExtensions 사용</target>
        </trans-unit>
        <trans-unit id="cd812b8c024eca09353bb269ab307aadb30fe8b3" translate="yes" xml:space="preserve">
          <source>Using Object.seal</source>
          <target state="translated">Object.seal 사용</target>
        </trans-unit>
        <trans-unit id="6910a498779326f8f6877abe3a941a43075d17a6" translate="yes" xml:space="preserve">
          <source>Using Object.setPrototypeOf</source>
          <target state="translated">Object.setPrototypeOf 사용</target>
        </trans-unit>
        <trans-unit id="d86f74ca78c1d08fa90fba5488985ee1ab159e5e" translate="yes" xml:space="preserve">
          <source>Using Object.values</source>
          <target state="translated">Object.values ​​사용</target>
        </trans-unit>
        <trans-unit id="b8bc8eb7a6ca0e72e42bc43423e21cabf29a7233" translate="yes" xml:space="preserve">
          <source>Using POSITIVE_INFINITY</source>
          <target state="translated">POSITIVE_INFINITY 사용</target>
        </trans-unit>
        <trans-unit id="bb8e6b30e4fc212e05d27197972cb90c90affc48" translate="yes" xml:space="preserve">
          <source>Using Promise.race &amp;ndash; examples with setTimeout</source>
          <target state="translated">Promise.race 사용 &amp;ndash; setTimeout을 사용한 예제</target>
        </trans-unit>
        <trans-unit id="f4f84a48633ba74c7d0c1f0856054168a7a3401d" translate="yes" xml:space="preserve">
          <source>Using Proxy.revocable</source>
          <target state="translated">Proxy.revocable 사용</target>
        </trans-unit>
        <trans-unit id="387de82f2dc9994601081354c91bc4bef2997e2c" translate="yes" xml:space="preserve">
          <source>Using RangeError (for non-numeric values)</source>
          <target state="translated">RangeError 사용 (숫자가 아닌 값의 경우)</target>
        </trans-unit>
        <trans-unit id="72a354c74e3ce484d59b07a28d3c026e6116a0e1" translate="yes" xml:space="preserve">
          <source>Using RangeError (for numeric values)</source>
          <target state="translated">RangeError 사용 (숫자 값)</target>
        </trans-unit>
        <trans-unit id="b2a4238c2a1e3a78914a7157d529d182893a0cf8" translate="yes" xml:space="preserve">
          <source>Using Reflect.apply()</source>
          <target state="translated">Reflect.apply () 사용</target>
        </trans-unit>
        <trans-unit id="063374179632852759bcda4103f92f941cd3a396" translate="yes" xml:space="preserve">
          <source>Using Reflect.defineProperty()</source>
          <target state="translated">Reflect.defineProperty () 사용</target>
        </trans-unit>
        <trans-unit id="116113de574ea3588fde4248ef229453b9b427f0" translate="yes" xml:space="preserve">
          <source>Using Reflect.getOwnPropertyDescriptor()</source>
          <target state="translated">Reflect.getOwnPropertyDescriptor () 사용</target>
        </trans-unit>
        <trans-unit id="9d17fdf47000e6dad5b7b54f77e5289c21346077" translate="yes" xml:space="preserve">
          <source>Using Reflect.getPrototypeOf()</source>
          <target state="translated">Reflect.getPrototypeOf () 사용</target>
        </trans-unit>
        <trans-unit id="cd3b0d5f284902b52cfc8815d484fffc2ee104a1" translate="yes" xml:space="preserve">
          <source>Using Reflect.has()</source>
          <target state="translated">Reflect.has () 사용</target>
        </trans-unit>
        <trans-unit id="070feee2e583395655a9ca0cc2cc3eb869ee78a9" translate="yes" xml:space="preserve">
          <source>Using Reflect.isExtensible()</source>
          <target state="translated">Reflect.isExtensible () 사용</target>
        </trans-unit>
        <trans-unit id="91d39df1f043cef8172e5c74545bf856e99a20b0" translate="yes" xml:space="preserve">
          <source>Using Reflect.ownKeys()</source>
          <target state="translated">Reflect.ownKeys () 사용</target>
        </trans-unit>
        <trans-unit id="c751eba43380256f47a2bd7db9c37ccfc682352e" translate="yes" xml:space="preserve">
          <source>Using Reflect.preventExtensions()</source>
          <target state="translated">Reflect.preventExtensions () 사용</target>
        </trans-unit>
        <trans-unit id="d179afad9401bebfb5240abbb47f8e9ccc05973f" translate="yes" xml:space="preserve">
          <source>Using Reflect.set()</source>
          <target state="translated">Reflect.set () 사용</target>
        </trans-unit>
        <trans-unit id="68c408a896ce117b138e6de233d336de96de0dc6" translate="yes" xml:space="preserve">
          <source>Using Reflect.setPrototypeOf()</source>
          <target state="translated">Reflect.setPrototypeOf () 사용</target>
        </trans-unit>
        <trans-unit id="cdcb151dcbc39b91cf423e71c01f1b70eeb37790" translate="yes" xml:space="preserve">
          <source>Using String.raw()</source>
          <target state="translated">String.raw () 사용</target>
        </trans-unit>
        <trans-unit id="1b8b9d7a700ba32ccffd6f0414f55c8557ada700" translate="yes" xml:space="preserve">
          <source>Using Symbol.for</source>
          <target state="translated">Symbol.for 사용</target>
        </trans-unit>
        <trans-unit id="cfa36ee2bd89fb08433d476d30b92d4025ef78ec" translate="yes" xml:space="preserve">
          <source>Using Symbol.replace</source>
          <target state="translated">Symbol.replace 사용</target>
        </trans-unit>
        <trans-unit id="dd43bd98fe9df46d952429cf18dedb1be4002362" translate="yes" xml:space="preserve">
          <source>Using Table.set</source>
          <target state="translated">Table.set 사용</target>
        </trans-unit>
        <trans-unit id="f75fb59fcdcafa395840e14cc63581835c25d29d" translate="yes" xml:space="preserve">
          <source>Using WeakMap</source>
          <target state="translated">WeakMap 사용</target>
        </trans-unit>
        <trans-unit id="51ed8cdf92e4bf2314a18329c243c97e0691c218" translate="yes" xml:space="preserve">
          <source>Using [@@iterator]()</source>
          <target state="translated">[@@ iterator] () 사용</target>
        </trans-unit>
        <trans-unit id="0e92ab6f86de1cab5f209c9ee1d6caeae72904ac" translate="yes" xml:space="preserve">
          <source>Using [@@iterator]() with for..of</source>
          <target state="translated">for..of와 함께 [@@ iterator] () 사용</target>
        </trans-unit>
        <trans-unit id="d1b93fca596ef0492b3e4116b86141e40d3995a3" translate="yes" xml:space="preserve">
          <source>Using __proto__</source>
          <target state="translated">__proto__ 사용</target>
        </trans-unit>
        <trans-unit id="23169e87ea17cda98c3362ddd8595d6314945f27" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;../../statements/for...of&quot;&gt;for&amp;hellip;of&lt;/a&gt; loop</source>
          <target state="translated">사용 &lt;a href=&quot;../../statements/for...of&quot;&gt;을 위해 ...의&lt;/a&gt; 루프</target>
        </trans-unit>
        <trans-unit id="a525b44c0b4aa4960b9058cd6478f8b34ea6b323" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Reflect.apply&lt;/code&gt; (&lt;a href=&quot;../reflect/apply&quot;&gt;&lt;code&gt;Reflect.apply()&lt;/code&gt;&lt;/a&gt;) method to create a (non-cancellable) &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate&quot;&gt;&lt;code&gt;window.setImmediate&lt;/code&gt;&lt;/a&gt;-style function.</source>
          <target state="translated">Using a &lt;a href=&quot;../function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Reflect.apply&lt;/code&gt; (&lt;a href=&quot;../reflect/apply&quot;&gt; &lt;code&gt;Reflect.apply()&lt;/code&gt; &lt;/a&gt;) method to create a (non-cancellable) &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate&quot;&gt; &lt;code&gt;window.setImmediate&lt;/code&gt; &lt;/a&gt;-style function.</target>
        </trans-unit>
        <trans-unit id="f36eafe27d99c81bd29f7f2b50a831d5d2e730b4" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Reflect.apply&lt;/code&gt; (&lt;a href=&quot;../reflect/apply&quot;&gt;&lt;code&gt;Reflect.apply()&lt;/code&gt;&lt;/a&gt;) method to create a (non-cancellable) setImmediate-style function.</source>
          <target state="translated">사용 &lt;a href=&quot;../function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Reflect.apply&lt;/code&gt; ( &lt;a href=&quot;../reflect/apply&quot;&gt; &lt;code&gt;Reflect.apply()&lt;/code&gt; &lt;/a&gt; ) 메소드 것은 (취소 불능) setImmediate 스타일의 기능을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa5565048e1c853c92fcf6232a55142c3c3c6d23" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; enables you do even deeper changes to how property assignments work.</source>
          <target state="translated">사용하여 &lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt; 어떻게 속성 할당 작업에도 깊은 변경을 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95ae0f4ca13ce8aa4ef772f7e6d20f6037f7b062" translate="yes" xml:space="preserve">
          <source>Using a computed property name</source>
          <target state="translated">계산 된 속성 이름 사용</target>
        </trans-unit>
        <trans-unit id="730c6133013cdedc5640a6ed149ebc3947ce7f3d" translate="yes" xml:space="preserve">
          <source>Using a function as a callback</source>
          <target state="translated">Using a function as a callback</target>
        </trans-unit>
        <trans-unit id="2e049cd2ca7aadfb96f977493edad5238d6c0c06" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;break&lt;/code&gt; statement</source>
          <target state="translated">레이블이 지정된 &lt;code&gt;break&lt;/code&gt; 문 사용</target>
        </trans-unit>
        <trans-unit id="4e9fba8cc776768eabe25b901630030635078d83" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;break&lt;/code&gt; with &lt;code&gt;for&lt;/code&gt; loops</source>
          <target state="translated">레이블이 사용 &lt;code&gt;break&lt;/code&gt; 에 &lt;code&gt;for&lt;/code&gt; 루프를</target>
        </trans-unit>
        <trans-unit id="5b9f2bd6736bab09327ec27ef35ff1f37761fa2c" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;continue&lt;/code&gt; statement</source>
          <target state="translated">레이블이있는 &lt;code&gt;continue&lt;/code&gt; 문 사용</target>
        </trans-unit>
        <trans-unit id="51aa6ccc3ca8126a9ecb477b0b8381239ec3e12c" translate="yes" xml:space="preserve">
          <source>Using a labeled &lt;code&gt;continue&lt;/code&gt; with &lt;code&gt;for&lt;/code&gt; loops</source>
          <target state="translated">표시된 사용 &lt;code&gt;continue&lt;/code&gt; 에 &lt;code&gt;for&lt;/code&gt; 루프</target>
        </trans-unit>
        <trans-unit id="e362889eafc12e1f642a4f766d95e1bf00fda2cc" translate="yes" xml:space="preserve">
          <source>Using a labeled block with &lt;code&gt;break&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 있는 레이블이 지정된 블록 사용</target>
        </trans-unit>
        <trans-unit id="905f71d90ff8219906a150babfe9064b2a24d67f" translate="yes" xml:space="preserve">
          <source>Using a labeled block with break</source>
          <target state="translated">Using a labeled block with break</target>
        </trans-unit>
        <trans-unit id="844d9c3e5fef4da5247a1035f0cebc61ad46d4da" translate="yes" xml:space="preserve">
          <source>Using a labeled break statement</source>
          <target state="translated">Using a labeled break statement</target>
        </trans-unit>
        <trans-unit id="bb3eb65ab8bb8127e5f449ca6b9d12dbd9b574de" translate="yes" xml:space="preserve">
          <source>Using a labeled break with for loops</source>
          <target state="translated">Using a labeled break with for loops</target>
        </trans-unit>
        <trans-unit id="f957cfbe50b124eeffe273f2b3db957019e02b4c" translate="yes" xml:space="preserve">
          <source>Using a labeled continue statement</source>
          <target state="translated">Using a labeled continue statement</target>
        </trans-unit>
        <trans-unit id="813bb0e558d97c7de27f071f05539b96de14ce2b" translate="yes" xml:space="preserve">
          <source>Using a labeled continue with for loops</source>
          <target state="translated">Using a labeled continue with for loops</target>
        </trans-unit>
        <trans-unit id="dfe4452da29034ff1a180fa9833fa40e31fbdf0d" translate="yes" xml:space="preserve">
          <source>Using a regular expression to change data format</source>
          <target state="translated">정규식을 사용하여 데이터 형식 변경</target>
        </trans-unit>
        <trans-unit id="82f7b316afcba40bbf80d93a3ff43a4a24aeddbf" translate="yes" xml:space="preserve">
          <source>Using a regular expression with the sticky flag</source>
          <target state="translated">sticky 플래그와 함께 정규 표현식 사용</target>
        </trans-unit>
        <trans-unit id="53be444b5f30ded3e73f2bbd22be9ed448770df9" translate="yes" xml:space="preserve">
          <source>Using a tab character mimics standard pretty-print appearance:</source>
          <target state="translated">탭 문자를 사용하면 표준 예쁜 인쇄 모양을 모방합니다.</target>
        </trans-unit>
        <trans-unit id="2490aa2ab8ffd77824ef0356064e1f9b755852c3" translate="yes" xml:space="preserve">
          <source>Using add</source>
          <target state="translated">Using add</target>
        </trans-unit>
        <trans-unit id="4d7860fa78a19cd7a15d20ad04fe858b2b013cc8" translate="yes" xml:space="preserve">
          <source>Using add()</source>
          <target state="translated">Using add()</target>
        </trans-unit>
        <trans-unit id="ec2f84e91d6965ed96a210bb5c657a3fa5cf45b7" translate="yes" xml:space="preserve">
          <source>Using an array to tabulate a set of values</source>
          <target state="translated">배열을 사용하여 값 집합을 표로 만들기</target>
        </trans-unit>
        <trans-unit id="43b4d7721df207f173194b64c30427bd98a83022" translate="yes" xml:space="preserve">
          <source>Using an arrow function as the map function to manipulate the elements</source>
          <target state="translated">Using an arrow function as the map function to manipulate the elements</target>
        </trans-unit>
        <trans-unit id="4297183f352aad56274d7fc344ce74272ab6c969" translate="yes" xml:space="preserve">
          <source>Using an immediately executed function expression</source>
          <target state="translated">Using an immediately executed function expression</target>
        </trans-unit>
        <trans-unit id="13948d827839045126caacaf1dbdab5237afa243" translate="yes" xml:space="preserve">
          <source>Using an inline function that modifies the matched characters</source>
          <target state="translated">일치하는 문자를 수정하는 인라인 함수 사용</target>
        </trans-unit>
        <trans-unit id="323b02788b7e19b875667a61327e499aa409a6f2" translate="yes" xml:space="preserve">
          <source>Using an invalid index number returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Using an invalid index number returns &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ea58ab4d26e8ac5872c3a1b28e4ce01a91bca10" translate="yes" xml:space="preserve">
          <source>Using an object in an array-like fashion</source>
          <target state="translated">배열과 같은 방식으로 객체 사용</target>
        </trans-unit>
        <trans-unit id="725865c464870e2965f9729f532857f18bd350ac" translate="yes" xml:space="preserve">
          <source>Using and chaining the &lt;code&gt;catch&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 방법 사용 및 연결</target>
        </trans-unit>
        <trans-unit id="4fbb0075c8756208b18365446723434ccd809a82" translate="yes" xml:space="preserve">
          <source>Using and chaining the catch method</source>
          <target state="translated">Using and chaining the catch method</target>
        </trans-unit>
        <trans-unit id="992be1042da44e613d079e03ab57f193219b3a37" translate="yes" xml:space="preserve">
          <source>Using and()</source>
          <target state="translated">Using and()</target>
        </trans-unit>
        <trans-unit id="63ddc146d6b975f5822c69d5a4d26104ba0ba1f3" translate="yes" xml:space="preserve">
          <source>Using apply and built-in functions</source>
          <target state="translated">Using apply and built-in functions</target>
        </trans-unit>
        <trans-unit id="6120873fb3f549fbdb45995b7eefb83a0c89120a" translate="yes" xml:space="preserve">
          <source>Using apply to append an array to another</source>
          <target state="translated">Using apply to append an array to another</target>
        </trans-unit>
        <trans-unit id="3541c55cb4c032272680d70434d5b1309467817b" translate="yes" xml:space="preserve">
          <source>Using apply to chain constructors</source>
          <target state="translated">Using apply to chain constructors</target>
        </trans-unit>
        <trans-unit id="558c1c73a2f00f471c5e651a77452ddece22d760" translate="yes" xml:space="preserve">
          <source>Using apply( ) or call ( ) on array-like objects</source>
          <target state="translated">Using apply( ) or call ( ) on array-like objects</target>
        </trans-unit>
        <trans-unit id="f1bf3807aece111e2b84df39a788650f93566a81" translate="yes" xml:space="preserve">
          <source>Using arrow function and destructuring</source>
          <target state="translated">Using arrow function and destructuring</target>
        </trans-unit>
        <trans-unit id="9516772c5fc3d3c19b6ad7a110e9584847f44613" translate="yes" xml:space="preserve">
          <source>Using arrow functions</source>
          <target state="translated">화살표 기능 사용</target>
        </trans-unit>
        <trans-unit id="9f26905aa2872f13aeacba7881a971956ca683a5" translate="yes" xml:space="preserve">
          <source>Using arrow functions and &lt;code&gt;Array.from()&lt;/code&gt;</source>
          <target state="translated">Using arrow functions and &lt;code&gt;Array.from()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eff930df6fbf35ab334f1cd7d9a93bacaea2ec96" translate="yes" xml:space="preserve">
          <source>Using arrow functions and &lt;code&gt;Array.from&lt;/code&gt;</source>
          <target state="translated">화살표 함수 및 &lt;code&gt;Array.from&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="2492791e1e24a5c825e473ad941dbf6a44f80cd7" translate="yes" xml:space="preserve">
          <source>Using brackets for multiplication</source>
          <target state="translated">곱셈에 대괄호 사용</target>
        </trans-unit>
        <trans-unit id="acf5cf1853cc1e1f52f313ae49b375dc4109f271" translate="yes" xml:space="preserve">
          <source>Using buffer</source>
          <target state="translated">Using buffer</target>
        </trans-unit>
        <trans-unit id="f771f6e8cd04d6392ec7b215d3d9028b74a95ee9" translate="yes" xml:space="preserve">
          <source>Using byteLength</source>
          <target state="translated">Using byteLength</target>
        </trans-unit>
        <trans-unit id="bdd3020e779ca42619462faf50bbbc40db72f141" translate="yes" xml:space="preserve">
          <source>Using clear()</source>
          <target state="translated">Using clear()</target>
        </trans-unit>
        <trans-unit id="942ba26f6630c3e5ca4640e8166a96e73d8a70bb" translate="yes" xml:space="preserve">
          <source>Using compareExchange()</source>
          <target state="translated">Using compareExchange()</target>
        </trans-unit>
        <trans-unit id="76d9d1f3ef463ceab4a8424902df4caf51de4fb5" translate="yes" xml:space="preserve">
          <source>Using compile</source>
          <target state="translated">Using compile</target>
        </trans-unit>
        <trans-unit id="e9f25d258b2fdca6217044b9403e784d39ac8c29" translate="yes" xml:space="preserve">
          <source>Using concat()</source>
          <target state="translated">Using concat()</target>
        </trans-unit>
        <trans-unit id="4266638185ad72cac0aac3a59e1f54ca2f6b98c0" translate="yes" xml:space="preserve">
          <source>Using continue with a label</source>
          <target state="translated">계속 레이블 사용</target>
        </trans-unit>
        <trans-unit id="c7fe042da8ffd8948375c018cd4922588724ee91" translate="yes" xml:space="preserve">
          <source>Using continue with while</source>
          <target state="translated">잠시 동안 계속 사용</target>
        </trans-unit>
        <trans-unit id="ba1160347cf7c2d505d1b2b36f9d927ce29e0252" translate="yes" xml:space="preserve">
          <source>Using copyWithin</source>
          <target state="translated">Using copyWithin</target>
        </trans-unit>
        <trans-unit id="8526d46fe38ae61bf3b632ec4d2e13edf9f80c20" translate="yes" xml:space="preserve">
          <source>Using customSections</source>
          <target state="translated">Using customSections</target>
        </trans-unit>
        <trans-unit id="41b3511138c1bea33ea9c666756af0a95a7ca7c7" translate="yes" xml:space="preserve">
          <source>Using delete()</source>
          <target state="translated">Using delete()</target>
        </trans-unit>
        <trans-unit id="bb648e2584bc7e43af386b5a4ccaf45fc66e45b0" translate="yes" xml:space="preserve">
          <source>Using description</source>
          <target state="translated">Using description</target>
        </trans-unit>
        <trans-unit id="637f40494652d4eb31c0069183b557e67abd5e21" translate="yes" xml:space="preserve">
          <source>Using else if</source>
          <target state="translated">Using else if</target>
        </trans-unit>
        <trans-unit id="ca53306e841880ebb04e39089be765977a82f8f7" translate="yes" xml:space="preserve">
          <source>Using entries()</source>
          <target state="translated">Using entries()</target>
        </trans-unit>
        <trans-unit id="df8ef827947e4c6dd63289eb7c1e8b326376ad9f" translate="yes" xml:space="preserve">
          <source>Using exchange()</source>
          <target state="translated">Using exchange()</target>
        </trans-unit>
        <trans-unit id="dca401b547a446c7268ad47d8637435dc38bc7b7" translate="yes" xml:space="preserve">
          <source>Using exec() with RegExp literals</source>
          <target state="translated">Using exec() with RegExp literals</target>
        </trans-unit>
        <trans-unit id="b4d8ad9ce112631a7ca5f77fab8fe29388ed88cc" translate="yes" xml:space="preserve">
          <source>Using export from</source>
          <target state="translated">Using export from</target>
        </trans-unit>
        <trans-unit id="dd645c85457c632bbbfa7a1478a26148849392d2" translate="yes" xml:space="preserve">
          <source>Using exports</source>
          <target state="translated">Using exports</target>
        </trans-unit>
        <trans-unit id="4848333ecaa3ee217c4e4f2837e797106515bccb" translate="yes" xml:space="preserve">
          <source>Using extends</source>
          <target state="translated">Using extends</target>
        </trans-unit>
        <trans-unit id="f83c732f1aaae1f0858e6a4aa1bc2a54839e842e" translate="yes" xml:space="preserve">
          <source>Using extends with built-in objects</source>
          <target state="translated">Using extends with built-in objects</target>
        </trans-unit>
        <trans-unit id="fa62b3ca2a5b5f9a4560375ab8cf85495180dd9d" translate="yes" xml:space="preserve">
          <source>Using fill</source>
          <target state="translated">Using fill</target>
        </trans-unit>
        <trans-unit id="d968c8b47c5de48676e4b875cd04a48e683d6470" translate="yes" xml:space="preserve">
          <source>Using fill to create a matrix</source>
          <target state="translated">Using fill to create a matrix</target>
        </trans-unit>
        <trans-unit id="06d86eea6047d756e200dff4396be1793cffaa0e" translate="yes" xml:space="preserve">
          <source>Using finally</source>
          <target state="translated">Using finally</target>
        </trans-unit>
        <trans-unit id="0ece706c2a0b48159c63e7930172531bf2218f4a" translate="yes" xml:space="preserve">
          <source>Using flags</source>
          <target state="translated">Using flags</target>
        </trans-unit>
        <trans-unit id="47a90188098365dd83035d63701d280a3b3d2022" translate="yes" xml:space="preserve">
          <source>Using for</source>
          <target state="translated">Using for</target>
        </trans-unit>
        <trans-unit id="842d42d5c9c20d03d17b8429da1d334a4a1fb9fc" translate="yes" xml:space="preserve">
          <source>Using for without a statement</source>
          <target state="translated">Using for without a statement</target>
        </trans-unit>
        <trans-unit id="dfa17668aa39e7162254ffdaeb2eed9ef7b9dc08" translate="yes" xml:space="preserve">
          <source>Using for...in</source>
          <target state="translated">Using for...in</target>
        </trans-unit>
        <trans-unit id="358b734486da44fba6047faa9d4b783fb5e83a41" translate="yes" xml:space="preserve">
          <source>Using function</source>
          <target state="translated">Using function</target>
        </trans-unit>
        <trans-unit id="333c4ae2a04dec5dbc25f9c1a163318ef84472dd" translate="yes" xml:space="preserve">
          <source>Using function length</source>
          <target state="translated">Using function length</target>
        </trans-unit>
        <trans-unit id="61cdbe18e333325cc72bcda2d2df125b3e30afe3" translate="yes" xml:space="preserve">
          <source>Using function*</source>
          <target state="translated">Using function*</target>
        </trans-unit>
        <trans-unit id="c57391e73b9893ec9c51882fe30237a6e857e9ec" translate="yes" xml:space="preserve">
          <source>Using get</source>
          <target state="translated">Using get</target>
        </trans-unit>
        <trans-unit id="cfbffe53d92c108cb09fd3ef092c9e1e429012b0" translate="yes" xml:space="preserve">
          <source>Using get()</source>
          <target state="translated">Using get()</target>
        </trans-unit>
        <trans-unit id="21bd11eb06a20addfef5d4950e740ed89384e6e4" translate="yes" xml:space="preserve">
          <source>Using getCanonicalLocales</source>
          <target state="translated">Using getCanonicalLocales</target>
        </trans-unit>
        <trans-unit id="c6d46d3e2970779c6d78bfba3a9ad9c843d5b7e4" translate="yes" xml:space="preserve">
          <source>Using getDate()</source>
          <target state="translated">getDate () 사용</target>
        </trans-unit>
        <trans-unit id="ad7c778ea6894a00060a0ce728779d0046614275" translate="yes" xml:space="preserve">
          <source>Using getDay()</source>
          <target state="translated">Using getDay()</target>
        </trans-unit>
        <trans-unit id="c8f3dd9284385c5fcb52eb13e37a5c4d3676cc95" translate="yes" xml:space="preserve">
          <source>Using getFullYear()</source>
          <target state="translated">Using getFullYear()</target>
        </trans-unit>
        <trans-unit id="4c1e907aba03b6eff9b742b95fe52c5f9f8175a2" translate="yes" xml:space="preserve">
          <source>Using getHours()</source>
          <target state="translated">Using getHours()</target>
        </trans-unit>
        <trans-unit id="5fecc14e3b02aa9d04037ae75756a01e4cdb6b98" translate="yes" xml:space="preserve">
          <source>Using getMilliseconds()</source>
          <target state="translated">Using getMilliseconds()</target>
        </trans-unit>
        <trans-unit id="fc5c2eb8f1a5aa646d2b39bef4e79bd1d8c13c66" translate="yes" xml:space="preserve">
          <source>Using getMinutes()</source>
          <target state="translated">Using getMinutes()</target>
        </trans-unit>
        <trans-unit id="d7aea2c806c55ba1fe057565987989f84e9dcb96" translate="yes" xml:space="preserve">
          <source>Using getMonth()</source>
          <target state="translated">Using getMonth()</target>
        </trans-unit>
        <trans-unit id="ddc3b0f04948c42bb3ce6f7e55222c9a95b3c63d" translate="yes" xml:space="preserve">
          <source>Using getOwnPropertySymbols</source>
          <target state="translated">Using getOwnPropertySymbols</target>
        </trans-unit>
        <trans-unit id="1ff08bf6826823bdd08c6ee129e2beaadb12bcbf" translate="yes" xml:space="preserve">
          <source>Using getPrototypeOf</source>
          <target state="translated">Using getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="e90f0b1a3b5be8425b9070ed492c55e63dba0596" translate="yes" xml:space="preserve">
          <source>Using getSeconds()</source>
          <target state="translated">Using getSeconds()</target>
        </trans-unit>
        <trans-unit id="a5628ed3e72f7218b9109ff43254d0caac081a6a" translate="yes" xml:space="preserve">
          <source>Using getTimezoneOffset()</source>
          <target state="translated">Using getTimezoneOffset()</target>
        </trans-unit>
        <trans-unit id="bc0aaf6086d3858d2b48d61ab95598c5d0702647" translate="yes" xml:space="preserve">
          <source>Using getUTCDate()</source>
          <target state="translated">Using getUTCDate()</target>
        </trans-unit>
        <trans-unit id="e0e9dde16e5a7f16edf6da9a141803b364934340" translate="yes" xml:space="preserve">
          <source>Using getUTCDay()</source>
          <target state="translated">Using getUTCDay()</target>
        </trans-unit>
        <trans-unit id="5de42b90505ef49be324c6d797e63eba84da5fed" translate="yes" xml:space="preserve">
          <source>Using getUTCFullYear()</source>
          <target state="translated">Using getUTCFullYear()</target>
        </trans-unit>
        <trans-unit id="bae7fcbee6f9e2b2518e9c4d13335e25b63fb655" translate="yes" xml:space="preserve">
          <source>Using getUTCHours()</source>
          <target state="translated">Using getUTCHours()</target>
        </trans-unit>
        <trans-unit id="a8dd1e14f413a103e697d3e1e12074a174ce1001" translate="yes" xml:space="preserve">
          <source>Using getUTCMilliseconds()</source>
          <target state="translated">Using getUTCMilliseconds()</target>
        </trans-unit>
        <trans-unit id="d466c31805e922801f38b8ff81331dbf758f95aa" translate="yes" xml:space="preserve">
          <source>Using getUTCMinutes()</source>
          <target state="translated">Using getUTCMinutes()</target>
        </trans-unit>
        <trans-unit id="d1d3c8ffee12a359aea748f7d3a72635c02dd43d" translate="yes" xml:space="preserve">
          <source>Using getUTCMonth()</source>
          <target state="translated">Using getUTCMonth()</target>
        </trans-unit>
        <trans-unit id="30f027bc76223b3c896c369bf3bb10532bb36ec7" translate="yes" xml:space="preserve">
          <source>Using getUTCSeconds()</source>
          <target state="translated">Using getUTCSeconds()</target>
        </trans-unit>
        <trans-unit id="f605470e76a287c771aaff676ec1d084475d9665" translate="yes" xml:space="preserve">
          <source>Using global</source>
          <target state="translated">Using global</target>
        </trans-unit>
        <trans-unit id="d998290f1177c8d373af4066ae75ccd78ca5c1ba" translate="yes" xml:space="preserve">
          <source>Using global and ignore case flags with &lt;code&gt;match()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;match()&lt;/code&gt; 와 함께 전역 및 무시 사례 플래그 사용</target>
        </trans-unit>
        <trans-unit id="b03161f749764c05a49c281fc65ec497f2f71398" translate="yes" xml:space="preserve">
          <source>Using global and ignore case flags with match()</source>
          <target state="translated">Using global and ignore case flags with match()</target>
        </trans-unit>
        <trans-unit id="b4528f41fc9d5f0217cb4f0473aa6add55fef82f" translate="yes" xml:space="preserve">
          <source>Using global and ignore with replace()</source>
          <target state="translated">Using global and ignore with replace()</target>
        </trans-unit>
        <trans-unit id="efac770b4fad9152b40b4f5576887298388e824e" translate="yes" xml:space="preserve">
          <source>Using grow</source>
          <target state="translated">Using grow</target>
        </trans-unit>
        <trans-unit id="6835db7ec3e718fe0a7d6a187670e111e3b8a37d" translate="yes" xml:space="preserve">
          <source>Using has()</source>
          <target state="translated">Using has()</target>
        </trans-unit>
        <trans-unit id="27c89663e781ada47d56435f483449d90ab1837e" translate="yes" xml:space="preserve">
          <source>Using hasOwnProperty as a property name</source>
          <target state="translated">Using hasOwnProperty as a property name</target>
        </trans-unit>
        <trans-unit id="6dfa12d4323366a9ad6fa5af120421e8b6a1a7f7" translate="yes" xml:space="preserve">
          <source>Using hasOwnProperty to test for a property's existence</source>
          <target state="translated">Using hasOwnProperty to test for a property's existence</target>
        </trans-unit>
        <trans-unit id="2d624db0c3c6651b19ee0c7c6fe5344e1897bbb2" translate="yes" xml:space="preserve">
          <source>Using if...else</source>
          <target state="translated">Using if...else</target>
        </trans-unit>
        <trans-unit id="9770c2cf1df89d76c3455d8ac5ac8ef47d5034f6" translate="yes" xml:space="preserve">
          <source>Using ignoreCase</source>
          <target state="translated">Using ignoreCase</target>
        </trans-unit>
        <trans-unit id="2fedec461f1801498f2b9daf57c78fc4366f32ce" translate="yes" xml:space="preserve">
          <source>Using import.meta</source>
          <target state="translated">Using import.meta</target>
        </trans-unit>
        <trans-unit id="7b3edfb560dd575e984551b0dc451b621435bc10" translate="yes" xml:space="preserve">
          <source>Using imports</source>
          <target state="translated">Using imports</target>
        </trans-unit>
        <trans-unit id="77f4c8c19c35065c9e3257f25d8e7adccd099b03" translate="yes" xml:space="preserve">
          <source>Using includes</source>
          <target state="translated">Using includes</target>
        </trans-unit>
        <trans-unit id="592372c414be5aea3e8cdcfb94c86c730b72b15c" translate="yes" xml:space="preserve">
          <source>Using indexOf</source>
          <target state="translated">Using indexOf</target>
        </trans-unit>
        <trans-unit id="bf62cbbd836d20d1dfcc3ed5000f38273fddcffa" translate="yes" xml:space="preserve">
          <source>Using isFinite</source>
          <target state="translated">Using isFinite</target>
        </trans-unit>
        <trans-unit id="180f1e7bcc5289206f86ed7a39439f1f364d3116" translate="yes" xml:space="preserve">
          <source>Using isInteger</source>
          <target state="translated">Using isInteger</target>
        </trans-unit>
        <trans-unit id="222c88ef14b94b06cd7fe40dd5432cf68b6dff1f" translate="yes" xml:space="preserve">
          <source>Using isLockFree</source>
          <target state="translated">Using isLockFree</target>
        </trans-unit>
        <trans-unit id="9af3d070f0d8f56f9288db5f0d1b0f64c6dce862" translate="yes" xml:space="preserve">
          <source>Using isNaN</source>
          <target state="translated">Using isNaN</target>
        </trans-unit>
        <trans-unit id="3b9410368fe9858bde671e7201d905dc7a3619e5" translate="yes" xml:space="preserve">
          <source>Using isPrototypeOf</source>
          <target state="translated">Using isPrototypeOf</target>
        </trans-unit>
        <trans-unit id="8f273b2f63e637f6a9d3e0071dc2c20a68fd5318" translate="yes" xml:space="preserve">
          <source>Using isSafeInteger</source>
          <target state="translated">Using isSafeInteger</target>
        </trans-unit>
        <trans-unit id="7f0f17579fa9ff470be768989357c1de64f3391e" translate="yes" xml:space="preserve">
          <source>Using isView</source>
          <target state="translated">Using isView</target>
        </trans-unit>
        <trans-unit id="1dcad23f54456ae5dcf21f3f870870a7e37894c8" translate="yes" xml:space="preserve">
          <source>Using it in a WebGL buffer</source>
          <target state="translated">Using it in a WebGL buffer</target>
        </trans-unit>
        <trans-unit id="d0412afcccf9f98f27a3ab0df49e6d7b51ac5bbd" translate="yes" xml:space="preserve">
          <source>Using join</source>
          <target state="translated">Using join</target>
        </trans-unit>
        <trans-unit id="dab3718cedc8c13889f6390cf7c2445e440c4ea9" translate="yes" xml:space="preserve">
          <source>Using keyFor</source>
          <target state="translated">Using keyFor</target>
        </trans-unit>
        <trans-unit id="b0800136b5f829e92a40ba8e8061004781b36de0" translate="yes" xml:space="preserve">
          <source>Using keys()</source>
          <target state="translated">Using keys()</target>
        </trans-unit>
        <trans-unit id="f81b04f5201ab2d6c97055500ed8b4315f57f180" translate="yes" xml:space="preserve">
          <source>Using lastIndex</source>
          <target state="translated">Using lastIndex</target>
        </trans-unit>
        <trans-unit id="322e21711a1dddc1d17de3dbcf6f57b0bc877589" translate="yes" xml:space="preserve">
          <source>Using lastIndexOf</source>
          <target state="translated">Using lastIndexOf</target>
        </trans-unit>
        <trans-unit id="fd215e0e35f6b6db2352000549f6369c899478a2" translate="yes" xml:space="preserve">
          <source>Using length</source>
          <target state="translated">Using length</target>
        </trans-unit>
        <trans-unit id="dae73a071350ea81e9a6a3084ce16153ee7f4941" translate="yes" xml:space="preserve">
          <source>Using locales</source>
          <target state="translated">로케일 사용</target>
        </trans-unit>
        <trans-unit id="39161556438a6127e13f2b5dbdb932d4374fb83d" translate="yes" xml:space="preserve">
          <source>Using locales and options</source>
          <target state="translated">Using locales and options</target>
        </trans-unit>
        <trans-unit id="dad8fb7222f17df432dd75e62ce7671e264b6ef4" translate="yes" xml:space="preserve">
          <source>Using map generically</source>
          <target state="translated">Using map generically</target>
        </trans-unit>
        <trans-unit id="8477f958231e81e8b426c1429b28e3d6b91d6c8a" translate="yes" xml:space="preserve">
          <source>Using map generically querySelectorAll</source>
          <target state="translated">Using map generically querySelectorAll</target>
        </trans-unit>
        <trans-unit id="1eaeeb9b1bdd633a7ee2be2491b50c4b2dd2f51c" translate="yes" xml:space="preserve">
          <source>Using map to reformat objects in an array</source>
          <target state="translated">배열을 사용하여 객체를 다시 포맷하기 위해 map 사용</target>
        </trans-unit>
        <trans-unit id="57fea5c1df70c1731b285c5bb8e84b0d0597d87a" translate="yes" xml:space="preserve">
          <source>Using match()</source>
          <target state="translated">Using match()</target>
        </trans-unit>
        <trans-unit id="34decca95c31fb0f36647a074e567c96d4cd2b86" translate="yes" xml:space="preserve">
          <source>Using match() with no parameter</source>
          <target state="translated">매개 변수없이 match () 사용</target>
        </trans-unit>
        <trans-unit id="3d9bc7a15e4413c2923839686949aa21ad4c75c1" translate="yes" xml:space="preserve">
          <source>Using multiline</source>
          <target state="translated">여러 줄 사용</target>
        </trans-unit>
        <trans-unit id="908af489a71764b87dc11d9422dbfebe684c29d8" translate="yes" xml:space="preserve">
          <source>Using name</source>
          <target state="translated">이름 사용</target>
        </trans-unit>
        <trans-unit id="37cc7e80587c16880e38299586ee198421f6dadc" translate="yes" xml:space="preserve">
          <source>Using named capturing groups</source>
          <target state="translated">명명 된 캡처 그룹 사용</target>
        </trans-unit>
        <trans-unit id="43a702ddd86f4d7f4ffc64cfc9724d04aad87e8c" translate="yes" xml:space="preserve">
          <source>Using named exports</source>
          <target state="translated">명명 된 내보내기 사용</target>
        </trans-unit>
        <trans-unit id="3ce8f6159e8a2c57b127fc9a28529f5d82937bef" translate="yes" xml:space="preserve">
          <source>Using next()</source>
          <target state="translated">next () 사용</target>
        </trans-unit>
        <trans-unit id="31956539c97795aeccf55de9e425b602d2a59da8" translate="yes" xml:space="preserve">
          <source>Using next() with a list</source>
          <target state="translated">목록과 함께 next () 사용</target>
        </trans-unit>
        <trans-unit id="d2eb3cd064b384251db35ecb8369daec88f56c11" translate="yes" xml:space="preserve">
          <source>Using normal strings, you would have to use the following syntax in order to get multi-line strings:</source>
          <target state="translated">일반 문자열을 사용하는 경우 여러 줄 문자열을 얻으려면 다음 구문을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="4570f0c53ffe44dd1aff9cab95bbae80e41a2e43" translate="yes" xml:space="preserve">
          <source>Using of</source>
          <target state="translated">사용</target>
        </trans-unit>
        <trans-unit id="2ac157cbadd0fe570dd3066357d979c7731da95d" translate="yes" xml:space="preserve">
          <source>Using one is likely to result in runtime errors or buggy behavior:</source>
          <target state="translated">하나를 사용하면 런타임 오류 또는 버그 동작이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79c2bee0e97b3f946b5be950f89965426ed5c112" translate="yes" xml:space="preserve">
          <source>Using one of the newly &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt; (in prevision for ECMAScript 2015): &lt;code&gt;implements&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">새로 중 하나를 사용하여 &lt;a href=&quot;../lexical_grammar#Keywords&quot;&gt;예약 된 키워드&lt;/a&gt; (ECMAScript를 2015 예견에) : &lt;code&gt;implements&lt;/code&gt; , &lt;code&gt;interface&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;package&lt;/code&gt; , &lt;code&gt;private&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; , &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;static&lt;/code&gt; 및 &lt;code&gt;yield&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d7a876bdd113f4940d781859515dc8f3133d487" translate="yes" xml:space="preserve">
          <source>Using options</source>
          <target state="translated">옵션 사용</target>
        </trans-unit>
        <trans-unit id="ff857323bcfdb45c1ad34e359d76f798bcdf782c" translate="yes" xml:space="preserve">
          <source>Using or</source>
          <target state="translated">또는 사용</target>
        </trans-unit>
        <trans-unit id="825f8b6b1c9ad158460a7202b903db2cc3e6785b" translate="yes" xml:space="preserve">
          <source>Using padEnd</source>
          <target state="translated">padEnd 사용</target>
        </trans-unit>
        <trans-unit id="1f7a57490393fd8594bc2ff1841908dfd1e9193f" translate="yes" xml:space="preserve">
          <source>Using parseInt</source>
          <target state="translated">parseInt 사용</target>
        </trans-unit>
        <trans-unit id="76725ad13661b304019ea358cfca45e614714de3" translate="yes" xml:space="preserve">
          <source>Using private fields, the definition can be refined as below.</source>
          <target state="translated">개인 필드를 사용하여 다음과 같이 정의를 세분화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ccaa6ecec23ddf5a861e417d481a9f4cc9f1663" translate="yes" xml:space="preserve">
          <source>Using promises</source>
          <target state="translated">약속 사용</target>
        </trans-unit>
        <trans-unit id="ae39009f8db560c822c57eaeef7e8d1936f7ba79" translate="yes" xml:space="preserve">
          <source>Using propertiesObject argument with Object.create()</source>
          <target state="translated">Object.create ()와 함께 propertiesObject 인수 사용</target>
        </trans-unit>
        <trans-unit id="13f4e9cfb7fcad90eab435e6419e019029f2cdd2" translate="yes" xml:space="preserve">
          <source>Using regular expression on multiple lines</source>
          <target state="translated">여러 줄에 정규 표현식 사용</target>
        </trans-unit>
        <trans-unit id="d8fcaaffaf763755745b2c99c373b25626997b0f" translate="yes" xml:space="preserve">
          <source>Using regular expression to split lines with different &lt;strong&gt;line endings/ends of line/line breaks&lt;/strong&gt;</source>
          <target state="translated">정규식을 사용하여 &lt;strong&gt;줄 끝 / 줄 끝 / 줄 바꿈이&lt;/strong&gt; 다른 &lt;strong&gt;줄을 나누기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b8a8cb24eea621ada043cec09d6a2f2b1790561" translate="yes" xml:space="preserve">
          <source>Using regular expression to split lines with different line endings/ends of line/line breaks</source>
          <target state="translated">정규식을 사용하여 줄 끝 / 줄 끝 / 줄 바꿈이 다른 줄 분할</target>
        </trans-unit>
        <trans-unit id="1a34a62a3bd3ec6e46d4ced224f5d83b37800a96" translate="yes" xml:space="preserve">
          <source>Using regular expressions in JavaScript</source>
          <target state="translated">JavaScript에서 정규식 사용</target>
        </trans-unit>
        <trans-unit id="03b5709d31c2e395573bc4e08697378a0f55b29a" translate="yes" xml:space="preserve">
          <source>Using repeat</source>
          <target state="translated">반복 사용</target>
        </trans-unit>
        <trans-unit id="105638c9819318e073f077d4cc651c64c62251e5" translate="yes" xml:space="preserve">
          <source>Using rest parameters</source>
          <target state="translated">나머지 매개 변수 사용</target>
        </trans-unit>
        <trans-unit id="809885cda989787526a155d7488c5e550aa23974" translate="yes" xml:space="preserve">
          <source>Using return()</source>
          <target state="translated">return () 사용</target>
        </trans-unit>
        <trans-unit id="3f728f98b9940c455a597b6a81f61d01e21c06f2" translate="yes" xml:space="preserve">
          <source>Using reverse</source>
          <target state="translated">역방향 사용</target>
        </trans-unit>
        <trans-unit id="6d3be18040c2607a8950e26be71b2257f761f24d" translate="yes" xml:space="preserve">
          <source>Using round</source>
          <target state="translated">라운드 사용</target>
        </trans-unit>
        <trans-unit id="326626598481f80a68fb94ad8965e25115cc888a" translate="yes" xml:space="preserve">
          <source>Using search()</source>
          <target state="translated">search () 사용</target>
        </trans-unit>
        <trans-unit id="425db714893879366e129a61732c33b6a5faf5d7" translate="yes" xml:space="preserve">
          <source>Using set()</source>
          <target state="translated">set () 사용</target>
        </trans-unit>
        <trans-unit id="aed3e20c3e3060048be4af92f99eb1a2b1a683be" translate="yes" xml:space="preserve">
          <source>Using setDate()</source>
          <target state="translated">setDate () 사용</target>
        </trans-unit>
        <trans-unit id="7b84fb240ecd88a4768de064e8f78e407d4ba2e4" translate="yes" xml:space="preserve">
          <source>Using setFullYear()</source>
          <target state="translated">setFullYear () 사용</target>
        </trans-unit>
        <trans-unit id="e70ebf32a50db20fe33f119d785b53e538b48e59" translate="yes" xml:space="preserve">
          <source>Using setHours()</source>
          <target state="translated">setHours () 사용</target>
        </trans-unit>
        <trans-unit id="a6bc4e383b870e15d75de20f7fddfd5668bb859d" translate="yes" xml:space="preserve">
          <source>Using setMilliseconds()</source>
          <target state="translated">setMilliseconds () 사용</target>
        </trans-unit>
        <trans-unit id="acb248b7fb11268cb6f935169267cdafc7c332b0" translate="yes" xml:space="preserve">
          <source>Using setMinutes()</source>
          <target state="translated">setMinutes () 사용</target>
        </trans-unit>
        <trans-unit id="8d0601f17325f809361ddcb0e3dc09e237df4834" translate="yes" xml:space="preserve">
          <source>Using setMonth()</source>
          <target state="translated">setMonth () 사용</target>
        </trans-unit>
        <trans-unit id="cfcffb9fa41ffe79d8aed3b98dd17e0ba532c32c" translate="yes" xml:space="preserve">
          <source>Using setSeconds()</source>
          <target state="translated">setSeconds () 사용</target>
        </trans-unit>
        <trans-unit id="5e8f4d64c97e29a6d0912f5a5e442ea539bbe4a6" translate="yes" xml:space="preserve">
          <source>Using setTime()</source>
          <target state="translated">setTime () 사용</target>
        </trans-unit>
        <trans-unit id="41de0a7f7603139f51c33444efd146dc663d95f3" translate="yes" xml:space="preserve">
          <source>Using setUTCDate()</source>
          <target state="translated">setUTCDate () 사용</target>
        </trans-unit>
        <trans-unit id="34bda14e2abfa4bfc03ab49015cd26cca884157d" translate="yes" xml:space="preserve">
          <source>Using setUTCFullYear()</source>
          <target state="translated">setUTCFullYear () 사용</target>
        </trans-unit>
        <trans-unit id="d41eb81d66e283738c9e28012e75ad16cf253ee0" translate="yes" xml:space="preserve">
          <source>Using setUTCHours()</source>
          <target state="translated">setUTCHours () 사용</target>
        </trans-unit>
        <trans-unit id="1f7c9b72f4e083f4357b856de48c6180cc296538" translate="yes" xml:space="preserve">
          <source>Using setUTCMilliseconds()</source>
          <target state="translated">setUTCMilliseconds () 사용</target>
        </trans-unit>
        <trans-unit id="7d9049851a9f00c4e10b33a562a892de0a7ecdb0" translate="yes" xml:space="preserve">
          <source>Using setUTCMinutes()</source>
          <target state="translated">setUTCMinutes () 사용</target>
        </trans-unit>
        <trans-unit id="eb4c39777934f7fabe240c77edd5e667d86fc4c2" translate="yes" xml:space="preserve">
          <source>Using setUTCMonth()</source>
          <target state="translated">setUTCMonth () 사용</target>
        </trans-unit>
        <trans-unit id="6e4fcb0440ba6442aa7d0f8152f1a83e6b5e6fba" translate="yes" xml:space="preserve">
          <source>Using setUTCSeconds()</source>
          <target state="translated">setUTCSeconds () 사용</target>
        </trans-unit>
        <trans-unit id="69e080040b10738c8afcd03deb0d85628ef3a5d3" translate="yes" xml:space="preserve">
          <source>Using shift() method in while loop</source>
          <target state="translated">while 루프에서 shift () 메소드 사용</target>
        </trans-unit>
        <trans-unit id="7385fef46abee1736ac5b98f7d435fb14a94c7f1" translate="yes" xml:space="preserve">
          <source>Using size</source>
          <target state="translated">크기 사용</target>
        </trans-unit>
        <trans-unit id="0d6834e544f7f11105dbc879dc890775e448a1ca" translate="yes" xml:space="preserve">
          <source>Using slice</source>
          <target state="translated">슬라이스 사용</target>
        </trans-unit>
        <trans-unit id="37eba0943db54828b213ac73f3e9ed0022f8f095" translate="yes" xml:space="preserve">
          <source>Using slice()</source>
          <target state="translated">slice () 사용</target>
        </trans-unit>
        <trans-unit id="2ebdd55d36a0b32024b6daaac003f6008c5ef1ed" translate="yes" xml:space="preserve">
          <source>Using sort</source>
          <target state="translated">정렬 사용</target>
        </trans-unit>
        <trans-unit id="933ab7f3893cce76a3ae270cf5340291da0234ad" translate="yes" xml:space="preserve">
          <source>Using source</source>
          <target state="translated">소스 사용</target>
        </trans-unit>
        <trans-unit id="bb69d0dac7b10532b7b2a94bd543c248a65f52a8" translate="yes" xml:space="preserve">
          <source>Using species</source>
          <target state="translated">종 사용</target>
        </trans-unit>
        <trans-unit id="9802eaa4ae417ab26b119d7cb6fb357b7e12c2cf" translate="yes" xml:space="preserve">
          <source>Using static members in classes</source>
          <target state="translated">클래스에서 정적 멤버 사용</target>
        </trans-unit>
        <trans-unit id="9a1049c4075b9c13970d7cf1ff4fb5c547bae435" translate="yes" xml:space="preserve">
          <source>Using store()</source>
          <target state="translated">store () 사용</target>
        </trans-unit>
        <trans-unit id="15c3352efb20b2399c4447240e20b63dabc43255" translate="yes" xml:space="preserve">
          <source>Using sub</source>
          <target state="translated">서브 사용</target>
        </trans-unit>
        <trans-unit id="51f7906b7c15d799ae957fb6c1a648bf884aa358" translate="yes" xml:space="preserve">
          <source>Using substr()</source>
          <target state="translated">substr () 사용</target>
        </trans-unit>
        <trans-unit id="963a38522de9798acef85f12b2331561291850f3" translate="yes" xml:space="preserve">
          <source>Using template literals, you can do the same like this:</source>
          <target state="translated">템플릿 리터럴을 사용하여 다음과 같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b549a6bbcc74457aead8bc6415f046127a6ab5f1" translate="yes" xml:space="preserve">
          <source>Using test()</source>
          <target state="translated">test () 사용</target>
        </trans-unit>
        <trans-unit id="33d084c77c0a305e8d75439239ee55025dd4b1d1" translate="yes" xml:space="preserve">
          <source>Using test() on a regex with the &quot;global&quot; flag</source>
          <target state="translated">&quot;global&quot;플래그로 정규식에서 test () 사용</target>
        </trans-unit>
        <trans-unit id="6df517976ef66b07cb11ade3e93f636707d93e93" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; constructor:</source>
          <target state="translated">은 Using &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 생성자를 :</target>
        </trans-unit>
        <trans-unit id="7aa31d1e62b235e2c9af364c8a7ebac64b73ab4a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;Map&lt;/code&gt; object</source>
          <target state="translated">은 Using &lt;code&gt;Map&lt;/code&gt; 객체를</target>
        </trans-unit>
        <trans-unit id="2b7112639fe0724543dd4fe914f8024f1274df06" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;Number&lt;/code&gt; object to assign values to numeric variables</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; 오브젝트를 사용하여 숫자 변수에 값 지정</target>
        </trans-unit>
        <trans-unit id="2da180e96c0d44481802a959caffa06e89d3c55e" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;Set&lt;/code&gt; object</source>
          <target state="translated">은 Using &lt;code&gt;Set&lt;/code&gt; 객체를</target>
        </trans-unit>
        <trans-unit id="1a705e1972fa32310b6d183debc8ff1e4b655b57" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;add&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;add&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="060310649cd7bd07b0fb5ce33774407a6fcc987b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;buffer&lt;/code&gt; property</source>
          <target state="translated">은 Using &lt;code&gt;buffer&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="17636c8fe1421043e421a10ca3292967a563f944" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;byteLength&lt;/code&gt; property</source>
          <target state="translated">은 Using &lt;code&gt;byteLength&lt;/code&gt; 속성을</target>
        </trans-unit>
        <trans-unit id="5d3cb85b5d2531bdca2df5cb3be77135d41d81d0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;byteOffset&lt;/code&gt; property</source>
          <target state="translated">은 Using &lt;code&gt;byteOffset&lt;/code&gt; 의 속성을</target>
        </trans-unit>
        <trans-unit id="3812b3bdd9d1183316efe5c656205634d6bc73d1" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;clear&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;clear&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="0d7fb8b01806c8f781e3aeaba0813539fcf1910b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;constructor&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;constructor&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="763d4745f82ee4dda7843b9b47b02f114bbec263" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;delete&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;delete&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="cd0cce4a7bb24463a85dbc5b2258d2a7190f67df" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;get&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;get&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="ea8088e170dc1068ccacc9cfa0bbd882ef2747fc" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getFloat32&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getFloat32&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="b0d639b7fb6b88549de590bff81cca9ba70603e9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getFloat64&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getFloat64&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="3b2ac72df9ac30445f67dc68d79abeb97041b407" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getInt16&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getInt16&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="7484baadf9cb95379e3f89ab6b61d7403157f747" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getInt32&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getInt32&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="3d167e11ae2b9f08de238cb2665ae39e7f7ddf09" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getInt8&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getInt8&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="d807de54c7de88cf35dd1d764ea1eed1088a40dd" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getUint16&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getUint16&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="cf46d850dca7ec2ecc349894a61fd86973ed38a0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getUint32&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getUint32&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="a6aa38f1e5e0218896cc7fd912115b996916bcf5" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;getUint8&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;getUint8&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="4ba6fb49f1699b5b23eb412e5863a030e46feb80" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;has&lt;/code&gt; method</source>
          <target state="translated">(가) 사용 &lt;code&gt;has&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="23d439477c548975addf6c44f9eb57a0c7a3300d" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;length&lt;/code&gt; property</source>
          <target state="translated">은 Using &lt;code&gt;length&lt;/code&gt; 속성을</target>
        </trans-unit>
        <trans-unit id="721bfbe8f3d441ad6e98f957929d2516b5f52f9b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;resolvedOptions&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;resolvedOptions&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="11ad006b0fe08f07b94e25e20ac3810a53373c95" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;reviver&lt;/code&gt; parameter</source>
          <target state="translated">은 Using &lt;code&gt;reviver&lt;/code&gt; 매개 변수를</target>
        </trans-unit>
        <trans-unit id="44318d406fa57dc8fb9b183dc858c7a0c5c5e236" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;set&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;set&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="20110daa0cfff630e933ef54899d2b905d479d38" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;set&lt;/code&gt; method with chaining</source>
          <target state="translated">체인과 함께 &lt;code&gt;set&lt;/code&gt; 메소드 사용</target>
        </trans-unit>
        <trans-unit id="cb27aa9c0701a5f16cb8372fb511c8755174037b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setFloat32&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setFloat32&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="1b630e8cc96aa98420147912bab138957fdc4748" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setFloat64&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setFloat64&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="e97a3a5fe1936c3c1cdb527f5a182db1bbb93c77" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setInt16&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setInt16&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="b25ce442471b34db1e8f771a1352031f37abb0a2" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setInt32&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setInt32&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="9df040b351fac68c30f82dac9469d547a0bcc827" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setInt8&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setInt8&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="cc5967a59f8ecff73ddd8166c7024c2d897688c0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setUint16&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setUint16&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="2e090cfb39824335c51a2ca978dad64f4d6877e8" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setUint32&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setUint32&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="93f41b970770c2780268dfba20edf118501b3bfa" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;setUint8&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;setUint8&lt;/code&gt; 의 방법을</target>
        </trans-unit>
        <trans-unit id="4b5ceb28e787cb4169fce2a298736badc5cb67de" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;subarray&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;subarray&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="4818dbc56f63c5cd137ed2225a59b70710006fc1" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;then&lt;/code&gt; method</source>
          <target state="translated">은 Using &lt;code&gt;then&lt;/code&gt; 방법을</target>
        </trans-unit>
        <trans-unit id="388d103635b65cc58cad5198640fdce20f85c24c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;typeof&lt;/code&gt; operator with symbols</source>
          <target state="translated">기호와 함께 &lt;code&gt;typeof&lt;/code&gt; 연산자 사용</target>
        </trans-unit>
        <trans-unit id="a5543d3464e6260d0c86f11deb582c82d760cffc" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;unicode&lt;/code&gt; property</source>
          <target state="translated">은 Using &lt;code&gt;unicode&lt;/code&gt; 속성을</target>
        </trans-unit>
        <trans-unit id="61ed51681d4132ac3476e93b13e299b104e7d0f7" translate="yes" xml:space="preserve">
          <source>Using the Map object</source>
          <target state="translated">Map 객체 사용</target>
        </trans-unit>
        <trans-unit id="0ca2315a1b8363dec8ecba300477e1a06d5e2c94" translate="yes" xml:space="preserve">
          <source>Using the Number object to assign values to numeric variables</source>
          <target state="translated">Number 객체를 사용하여 숫자 변수에 값 할당</target>
        </trans-unit>
        <trans-unit id="367b5c5a65bcad281b3de35da17d4ef458f6777a" translate="yes" xml:space="preserve">
          <source>Using the Set object</source>
          <target state="translated">Set 개체 사용</target>
        </trans-unit>
        <trans-unit id="2cd2aea6d5143be08cdcb069934b7cf5496a961d" translate="yes" xml:space="preserve">
          <source>Using the WeakSet object</source>
          <target state="translated">WeakSet 객체 사용</target>
        </trans-unit>
        <trans-unit id="e0e7339c08ba4cc50e07ceb0c45aa0d878640344" translate="yes" xml:space="preserve">
          <source>Using the WebAssembly JavaScript API</source>
          <target state="translated">웹 어셈블리 JavaScript API 사용</target>
        </trans-unit>
        <trans-unit id="42abf8b2c7b3649fea15d990cd95614aa585db74" translate="yes" xml:space="preserve">
          <source>Using the add() method</source>
          <target state="translated">add () 메서드 사용</target>
        </trans-unit>
        <trans-unit id="9eb6496ab64cb69a4d61c7ac040fb7221eb9d050" translate="yes" xml:space="preserve">
          <source>Using the arguments object</source>
          <target state="translated">인수 개체 사용</target>
        </trans-unit>
        <trans-unit id="0a08075fad2c8382d901f2bb5412728999e8914f" translate="yes" xml:space="preserve">
          <source>Using the buffer property</source>
          <target state="translated">버퍼 속성 사용</target>
        </trans-unit>
        <trans-unit id="67edaca9d46a44a3d97e6170735663348d7e6358" translate="yes" xml:space="preserve">
          <source>Using the byteLength property</source>
          <target state="translated">byteLength 속성 사용</target>
        </trans-unit>
        <trans-unit id="e445ecbdff6253430feed5efcad2687a8b6674f2" translate="yes" xml:space="preserve">
          <source>Using the byteOffset property</source>
          <target state="translated">byteOffset 속성 사용</target>
        </trans-unit>
        <trans-unit id="644987c7869ee58bbf9ba51ecdb4a56815ac0123" translate="yes" xml:space="preserve">
          <source>Using the clear() method</source>
          <target state="translated">clear () 메서드 사용</target>
        </trans-unit>
        <trans-unit id="8e9e239a94a07662c12fef0b44441fb3e1f98026" translate="yes" xml:space="preserve">
          <source>Using the debugger statement</source>
          <target state="translated">디버거 문 사용</target>
        </trans-unit>
        <trans-unit id="8435c2402c803d5b0c23a5ab8e6aa879dbefe401" translate="yes" xml:space="preserve">
          <source>Using the default export</source>
          <target state="translated">기본 내보내기 사용</target>
        </trans-unit>
        <trans-unit id="a003bfda6a8417338f47f7cdb0c053eb7f114327" translate="yes" xml:space="preserve">
          <source>Using the delete() method</source>
          <target state="translated">delete () 메서드 사용</target>
        </trans-unit>
        <trans-unit id="666845613d801295c55214f07242e40cb0e36dbe" translate="yes" xml:space="preserve">
          <source>Using the equality operators</source>
          <target state="translated">항등 연산자 사용</target>
        </trans-unit>
        <trans-unit id="0198236c598dc5c268a98c7a8c7cbda338cb715b" translate="yes" xml:space="preserve">
          <source>Using the get() method</source>
          <target state="translated">get () 메서드 사용</target>
        </trans-unit>
        <trans-unit id="91c047cbc8af6a2bff04026e2a720847fec8997c" translate="yes" xml:space="preserve">
          <source>Using the getFloat32 method</source>
          <target state="translated">getFloat32 메서드 사용</target>
        </trans-unit>
        <trans-unit id="f2ace268dfe45207159528a9d100b1d590c74ade" translate="yes" xml:space="preserve">
          <source>Using the getFloat64 method</source>
          <target state="translated">getFloat64 메서드 사용</target>
        </trans-unit>
        <trans-unit id="6915d8135f476f2f40ba2ff3bdea3cd24b1ef70d" translate="yes" xml:space="preserve">
          <source>Using the getInt16 method</source>
          <target state="translated">getInt16 메서드 사용</target>
        </trans-unit>
        <trans-unit id="d0ef5afbf3dbb1330f62dffa7e5779c8867ee1ed" translate="yes" xml:space="preserve">
          <source>Using the getInt32 method</source>
          <target state="translated">getInt32 메서드 사용</target>
        </trans-unit>
        <trans-unit id="0be7a5432b010a5b102aa2a4371f7f45fd16d6eb" translate="yes" xml:space="preserve">
          <source>Using the getInt8 method</source>
          <target state="translated">getInt8 메서드 사용</target>
        </trans-unit>
        <trans-unit id="916fdb7fbf3f613a08a485ec9a7a6827052c5a97" translate="yes" xml:space="preserve">
          <source>Using the getUint16 method</source>
          <target state="translated">getUint16 메서드 사용</target>
        </trans-unit>
        <trans-unit id="4e6b80057ba5c4586dce2af5f22514f79097cab5" translate="yes" xml:space="preserve">
          <source>Using the getUint32 method</source>
          <target state="translated">getUint32 메서드 사용</target>
        </trans-unit>
        <trans-unit id="b2042f636db37d74e954f4d7033c9e9dd1032c1d" translate="yes" xml:space="preserve">
          <source>Using the getUint8 method</source>
          <target state="translated">getUint8 메서드 사용</target>
        </trans-unit>
        <trans-unit id="91a51c3929522a9a419e38258806ea7498c04203" translate="yes" xml:space="preserve">
          <source>Using the grouping operator</source>
          <target state="translated">그룹화 연산자 사용</target>
        </trans-unit>
        <trans-unit id="82ed274235fc3bcdaccf01ee08806f168c67f3b4" translate="yes" xml:space="preserve">
          <source>Using the has method</source>
          <target state="translated">has 메소드 사용</target>
        </trans-unit>
        <trans-unit id="d4beba1771f2b2569c56eff45af02f8573e1e1c3" translate="yes" xml:space="preserve">
          <source>Using the has() method</source>
          <target state="translated">has () 메서드 사용</target>
        </trans-unit>
        <trans-unit id="b2039211011d8fdd1d88ca562d3cf948b0de3f5e" translate="yes" xml:space="preserve">
          <source>Using the latter will throw an error:</source>
          <target state="translated">후자를 사용하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="285fc329c1a77379f35f29c3c3c1088371fdd719" translate="yes" xml:space="preserve">
          <source>Using the older &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;Object.prototype.__proto__&lt;/code&gt;&lt;/a&gt; property, we can easily define &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; if it isn't available already:</source>
          <target state="translated">이전 &lt;a href=&quot;proto&quot;&gt; &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; &lt;/a&gt; 속성을 사용하여 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 를 아직 사용할 수없는 경우 쉽게 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2bb084c599b18647332d841114f01e839e8c6e4f" translate="yes" xml:space="preserve">
          <source>Using the reviver parameter</source>
          <target state="translated">reviver 매개 변수 사용</target>
        </trans-unit>
        <trans-unit id="cf3358ab3f89ba0d2aaa93343e07caf893b316c7" translate="yes" xml:space="preserve">
          <source>Using the same mechanism the following example counts the total number of words in a string:</source>
          <target state="translated">동일한 메커니즘을 사용하여 다음 예제는 문자열의 총 단어 수를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="0b7b8d72c9e25524f3680f3590ab14bc652e5a5d" translate="yes" xml:space="preserve">
          <source>Using the set() method</source>
          <target state="translated">set () 메서드 사용</target>
        </trans-unit>
        <trans-unit id="3289c3faf70feadda4fbe2731bdf8ed274b1a661" translate="yes" xml:space="preserve">
          <source>Using the set() with chaining</source>
          <target state="translated">연결과 함께 set () 사용</target>
        </trans-unit>
        <trans-unit id="e3a4ba5827bdb293e565ca3cc16cc257a2ba5e2e" translate="yes" xml:space="preserve">
          <source>Using the setFloat32 method</source>
          <target state="translated">setFloat32 메서드 사용</target>
        </trans-unit>
        <trans-unit id="40e33eda84b87841422c25bec78aff090782a8c6" translate="yes" xml:space="preserve">
          <source>Using the setFloat64 method</source>
          <target state="translated">setFloat64 메서드 사용</target>
        </trans-unit>
        <trans-unit id="66909e00b468e4c1a86a51b2023730aaca41abba" translate="yes" xml:space="preserve">
          <source>Using the setInt16 method</source>
          <target state="translated">setInt16 메서드 사용</target>
        </trans-unit>
        <trans-unit id="3913fbdf89695790517140c97ab59f62b757bd74" translate="yes" xml:space="preserve">
          <source>Using the setInt32 method</source>
          <target state="translated">setInt32 메서드 사용</target>
        </trans-unit>
        <trans-unit id="b05b98324a789f388da0e9e691dd4ed31faf7157" translate="yes" xml:space="preserve">
          <source>Using the setInt8 method</source>
          <target state="translated">setInt8 메서드 사용</target>
        </trans-unit>
        <trans-unit id="3530b876c7600833ae7a9baa238baa29c7fdc13d" translate="yes" xml:space="preserve">
          <source>Using the setUint16 method</source>
          <target state="translated">setUint16 메서드 사용</target>
        </trans-unit>
        <trans-unit id="3f70eebcbd996a2adef4c4638f5e016a32dcc95b" translate="yes" xml:space="preserve">
          <source>Using the setUint32 method</source>
          <target state="translated">setUint32 메서드 사용</target>
        </trans-unit>
        <trans-unit id="f8c35b571c0ef6398d67e9dc09fd17e737ab3f1e" translate="yes" xml:space="preserve">
          <source>Using the setUint8 method</source>
          <target state="translated">setUint8 메서드 사용</target>
        </trans-unit>
        <trans-unit id="16cdbf1e2fe53d21049b1aebbf57bc13b8622039" translate="yes" xml:space="preserve">
          <source>Using the static &lt;code&gt;Promise.resolve&lt;/code&gt; method</source>
          <target state="translated">정적 &lt;code&gt;Promise.resolve&lt;/code&gt; 메소드 사용</target>
        </trans-unit>
        <trans-unit id="4d319f61fbdfca489440ae7b0fa3b12be1791af1" translate="yes" xml:space="preserve">
          <source>Using the static Promise.reject() method</source>
          <target state="translated">정적 Promise.reject () 메소드 사용</target>
        </trans-unit>
        <trans-unit id="d0885381fc8e38963600ad318809baf874d28e0c" translate="yes" xml:space="preserve">
          <source>Using the static Promise.resolve method</source>
          <target state="translated">정적 Promise.resolve 메서드 사용</target>
        </trans-unit>
        <trans-unit id="75ccebb68eb74f8a29fa74fc88066f23693f3fff" translate="yes" xml:space="preserve">
          <source>Using the typeof operator with symbols</source>
          <target state="translated">기호와 함께 typeof 연산자 사용</target>
        </trans-unit>
        <trans-unit id="5da12ab598d7d9e62006f6efee7986e5b76ecf1a" translate="yes" xml:space="preserve">
          <source>Using the unicode property</source>
          <target state="translated">유니 코드 속성 사용</target>
        </trans-unit>
        <trans-unit id="d5858d68bbcf7b36cc58c06cf4446c0dd856b96a" translate="yes" xml:space="preserve">
          <source>Using this logic, a &lt;code&gt;clon&lt;/code&gt; function can be created as follows:</source>
          <target state="translated">이 논리를 사용하여 다음과 같이 &lt;code&gt;clon&lt;/code&gt; 기능을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43a44827105154bcc96c269c11a8be8b2918b585" translate="yes" xml:space="preserve">
          <source>Using thisArg</source>
          <target state="translated">thisArg 사용</target>
        </trans-unit>
        <trans-unit id="63597f3f37abf673561b304b0397c0f4e3bdf199" translate="yes" xml:space="preserve">
          <source>Using throw()</source>
          <target state="translated">throw () 사용</target>
        </trans-unit>
        <trans-unit id="10547c51925c21d50b948bb0bfca1570dce2e896" translate="yes" xml:space="preserve">
          <source>Using toExponential</source>
          <target state="translated">toExponential 사용</target>
        </trans-unit>
        <trans-unit id="9697996f429c5a1a33daadf283a77fad04c30aa7" translate="yes" xml:space="preserve">
          <source>Using toFixed</source>
          <target state="translated">toFixed 사용</target>
        </trans-unit>
        <trans-unit id="e6628741b70ae28fa2cda4a4eef5f414ef87d6cc" translate="yes" xml:space="preserve">
          <source>Using toISOString()</source>
          <target state="translated">toISOString () 사용</target>
        </trans-unit>
        <trans-unit id="75bbbf90ace8df689fdd341096e7530fa4eec649" translate="yes" xml:space="preserve">
          <source>Using toJSON()</source>
          <target state="translated">toJSON () 사용</target>
        </trans-unit>
        <trans-unit id="2b373d0edad6b3a29646c018f40f7aae8e60ebdc" translate="yes" xml:space="preserve">
          <source>Using toLocaleDateString()</source>
          <target state="translated">toLocaleDateString () 사용</target>
        </trans-unit>
        <trans-unit id="a480394b611d0787ab3d96907450d6a521084e7b" translate="yes" xml:space="preserve">
          <source>Using toLocaleString()</source>
          <target state="translated">toLocaleString () 사용</target>
        </trans-unit>
        <trans-unit id="4bc2af2f9c0ce773e57bd6c54aecb07f785d2cfb" translate="yes" xml:space="preserve">
          <source>Using toLocaleTimeString()</source>
          <target state="translated">toLocaleTimeString () 사용</target>
        </trans-unit>
        <trans-unit id="ea856694f75e4dbfc8a4fcdd0f465f5377b07fc8" translate="yes" xml:space="preserve">
          <source>Using toString</source>
          <target state="translated">toString 사용</target>
        </trans-unit>
        <trans-unit id="c28f3b3c72d2a90259fe30d0fbaa5dbc867239e4" translate="yes" xml:space="preserve">
          <source>Using toString()</source>
          <target state="translated">toString () 사용</target>
        </trans-unit>
        <trans-unit id="5c57ef5b24861ead1429d40e06111bffe3ed0a5e" translate="yes" xml:space="preserve">
          <source>Using toString() to detect object class</source>
          <target state="translated">toString ()을 사용하여 객체 클래스 감지</target>
        </trans-unit>
        <trans-unit id="5c6fdb2a410c22436566227f51ed2b53ea376377" translate="yes" xml:space="preserve">
          <source>Using toStringTag</source>
          <target state="translated">toStringTag 사용</target>
        </trans-unit>
        <trans-unit id="b234ae8d9ad22c8be607f4434532d2c9b2a2f854" translate="yes" xml:space="preserve">
          <source>Using toUTCString()</source>
          <target state="translated">toUTCString () 사용</target>
        </trans-unit>
        <trans-unit id="2298ee24c6b53ad8072e335688fa5c9054ce0e73" translate="yes" xml:space="preserve">
          <source>Using two for-of iterations to work with two arrays:</source>
          <target state="translated">두 개의 반복을 사용하여 두 개의 배열로 작업 :</target>
        </trans-unit>
        <trans-unit id="984ba4663162c377444e8a99b985bdea6ca233f1" translate="yes" xml:space="preserve">
          <source>Using typeof with arguments</source>
          <target state="translated">인수와 함께 typeof 사용</target>
        </trans-unit>
        <trans-unit id="fd8a5c5c4afe179104e6ad315ac045d8b22a4ae2" translate="yes" xml:space="preserve">
          <source>Using unary plus</source>
          <target state="translated">단항 더하기 사용</target>
        </trans-unit>
        <trans-unit id="1f0783cd9cb7ae11893e5bb8f40947946c17dbdc" translate="yes" xml:space="preserve">
          <source>Using unshift</source>
          <target state="translated">unshift 사용</target>
        </trans-unit>
        <trans-unit id="9b3489ec4eeb5d18dea9fc7fe66c3fe5cdb0e1d5" translate="yes" xml:space="preserve">
          <source>Using validate</source>
          <target state="translated">유효성 검사 사용</target>
        </trans-unit>
        <trans-unit id="002c1e0c369cfbb7cb5c2adce8fa546ceeb48507" translate="yes" xml:space="preserve">
          <source>Using valueOf</source>
          <target state="translated">valueOf 사용</target>
        </trans-unit>
        <trans-unit id="db98f0d058f8b7d257c0c4fe18e0eb082124cea9" translate="yes" xml:space="preserve">
          <source>Using valueOf on custom types</source>
          <target state="translated">사용자 정의 유형에 valueOf 사용</target>
        </trans-unit>
        <trans-unit id="07240915f520083975cd297557283b737d02755e" translate="yes" xml:space="preserve">
          <source>Using valueOf()</source>
          <target state="translated">valueOf () 사용</target>
        </trans-unit>
        <trans-unit id="25221944efc091d3758b693595f541f09c2845e2" translate="yes" xml:space="preserve">
          <source>Using values()</source>
          <target state="translated">values ​​() 사용</target>
        </trans-unit>
        <trans-unit id="2f72686661e980daa544eba8605dc565b1670549" translate="yes" xml:space="preserve">
          <source>Using wait()</source>
          <target state="translated">wait () 사용</target>
        </trans-unit>
        <trans-unit id="a710dacbcea66bf66eae8e33668e5dc3e0aa7d53" translate="yes" xml:space="preserve">
          <source>Using while</source>
          <target state="translated">동안 사용</target>
        </trans-unit>
        <trans-unit id="56761ba46c8d24eed7d881e958cd4440cdafc97d" translate="yes" xml:space="preserve">
          <source>Using with</source>
          <target state="translated">함께 사용</target>
        </trans-unit>
        <trans-unit id="17625cfeee447b8ba44bd697cb677536029fcbb5" translate="yes" xml:space="preserve">
          <source>Using xor</source>
          <target state="translated">xor 사용</target>
        </trans-unit>
        <trans-unit id="85f41777d2b0cc65a7f04311850a44fb4089cb08" translate="yes" xml:space="preserve">
          <source>Using yield</source>
          <target state="translated">수율 사용</target>
        </trans-unit>
        <trans-unit id="c1643b918b370de0df985bb907e1d1295cc5d395" translate="yes" xml:space="preserve">
          <source>Usually you create an &lt;code&gt;Error&lt;/code&gt; object with the intention of raising it using the &lt;a href=&quot;../statements/throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt; keyword. You can handle the error using the &lt;a href=&quot;../statements/try...catch&quot;&gt;&lt;code&gt;try...catch&lt;/code&gt;&lt;/a&gt; construct:</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../statements/throw&quot;&gt; &lt;code&gt;throw&lt;/code&gt; &lt;/a&gt; 키워드를 사용하여 객체를 올리려는 의도로 &lt;code&gt;Error&lt;/code&gt; 객체 를 만듭니다 . &lt;a href=&quot;../statements/try...catch&quot;&gt; &lt;code&gt;try...catch&lt;/code&gt; &lt;/a&gt; 구문을 사용하여 오류를 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="028522823973a359accfd991e9a11f26538c1bec" translate="yes" xml:space="preserve">
          <source>Usually, an object is extensible and new properties can be added to it. However, in this case &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt; marked an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible.</source>
          <target state="translated">일반적으로 객체는 확장 가능하며 새로운 속성을 추가 할 수 있습니다. 그러나이 경우 &lt;a href=&quot;../global_objects/object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; 는 객체를 더 이상 확장 할 수없는 것으로 표시하여 확장 할 수없는 것으로 표시된 당시의 속성 이외의 속성을 가지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="729ec6faa377f15330c6ec4333d5a7cc1008e901" translate="yes" xml:space="preserve">
          <source>Usually, properties in an object created by an &lt;a href=&quot;../global_objects/array#Syntax&quot;&gt;array initializer&lt;/a&gt; are configurable. However, for example, when using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, the property isn't configurable by default.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../global_objects/array#Syntax&quot;&gt;배열 이니셜 라이저&lt;/a&gt; 로 생성 된 객체의 속성을 구성 할 수 있습니다. 그러나 예를 들어 &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용하는 경우 기본적으로이 속성을 구성 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f38c9f1a95614045050e2aa55540b6933caff329" translate="yes" xml:space="preserve">
          <source>Valid &lt;code&gt;for-of&lt;/code&gt; loop</source>
          <target state="translated">유효한 &lt;code&gt;for-of&lt;/code&gt; 루프</target>
        </trans-unit>
        <trans-unit id="ac8102c9cb2a0cddbd0b586bee673befe3b905b2" translate="yes" xml:space="preserve">
          <source>Valid cases</source>
          <target state="translated">유효한 경우</target>
        </trans-unit>
        <trans-unit id="1ab413d429d0c4d151947326c53077a41ccae512" translate="yes" xml:space="preserve">
          <source>Valid for-in loop</source>
          <target state="translated">유효한 for-in 루프</target>
        </trans-unit>
        <trans-unit id="6843c40afb0afdfa8c868b99fba0ec16938ed173" translate="yes" xml:space="preserve">
          <source>Valid input:</source>
          <target state="translated">유효한 입력 :</target>
        </trans-unit>
        <trans-unit id="7ecb1f4a8ff8ccd062c99038efacdb3978a0c34b" translate="yes" xml:space="preserve">
          <source>Valid octal numbers</source>
          <target state="translated">유효한 8 진수</target>
        </trans-unit>
        <trans-unit id="62427623ec1fd77b629b493130d6011d493b75ba" translate="yes" xml:space="preserve">
          <source>Valid regular expression flags</source>
          <target state="translated">유효한 정규식 플래그</target>
        </trans-unit>
        <trans-unit id="53034c8ca0e9ac160f2d5018ec7250699b0001c2" translate="yes" xml:space="preserve">
          <source>Validates a given typed array of WebAssembly binary code, returning whether the bytes are valid WebAssembly code (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">바이트가 유효한 WebAssembly 코드인지 ( &lt;code&gt;true&lt;/code&gt; ) 아닌지 ( &lt;code&gt;false&lt;/code&gt; )를 반환하여 지정된 유형의 WebAssembly 이진 코드 배열을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="97eb3dad0caf7a0af0caef2ef21956a7465d9c32" translate="yes" xml:space="preserve">
          <source>Value Range</source>
          <target state="translated">가치 범위</target>
        </trans-unit>
        <trans-unit id="b7d636c3a9434a850eee328130074f786436fb4a" translate="yes" xml:space="preserve">
          <source>Value correction and an extra property</source>
          <target state="translated">가치 수정 및 추가 속성</target>
        </trans-unit>
        <trans-unit id="ceab60964f2a8b8a0b414a18859f8da76c815209" translate="yes" xml:space="preserve">
          <source>Value equality</source>
          <target state="translated">가치 평등</target>
        </trans-unit>
        <trans-unit id="88a356bf2b2612e85c09cc9204199d58052e5e19" translate="yes" xml:space="preserve">
          <source>Value of each iteration.</source>
          <target state="translated">각 반복의 값입니다.</target>
        </trans-unit>
        <trans-unit id="deb5559baa347c8fa63883cef40a651c5d96a454" translate="yes" xml:space="preserve">
          <source>Value properties</source>
          <target state="translated">가치 속성</target>
        </trans-unit>
        <trans-unit id="7e95513c13db4d4ce57cf68d5e04fce2088d7774" translate="yes" xml:space="preserve">
          <source>Value to fill an array.</source>
          <target state="translated">배열을 채울 값입니다.</target>
        </trans-unit>
        <trans-unit id="62994b4b99ba540510a3c04835ff0348716963d6" translate="yes" xml:space="preserve">
          <source>Value to fill the array with. (Note all elements in the array will be this exact value.)</source>
          <target state="translated">배열을 채울 값입니다. (배열의 모든 요소는이 정확한 값이됩니다.)</target>
        </trans-unit>
        <trans-unit id="03cf9449ccf155418b2f5482fb732e12234768e2" translate="yes" xml:space="preserve">
          <source>Value to fill the typed array with.</source>
          <target state="translated">유형이 지정된 배열을 채울 값입니다.</target>
        </trans-unit>
        <trans-unit id="6cd1bc01710ea3928dd42ebf711ff0dad289ebbc" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; (i.e the reference &lt;code&gt;Object&lt;/code&gt;) when executing &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">값으로 사용하는 &lt;code&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/code&gt; (즉, 참조 &lt;code&gt;Object&lt;/code&gt; 실행시) &lt;code&gt;callback&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4037481746de373affa7e65395873ee78fd6f100" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">값으로 사용하는 &lt;code&gt;this&lt;/code&gt; 실행할 때 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="697f56f6d674d2dde41f5b1f9bf5e0a76b1f91f7" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">값으로 사용하는 &lt;code&gt;this&lt;/code&gt; 실행할 때 &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="b237ad26015e6920af43cdcfb4766bd919a43a39" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">값으로 사용하는 &lt;code&gt;this&lt;/code&gt; 실행할 때 &lt;code&gt;callback&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a38e26f0de1cc21706ce788cd076d91affd9edd" translate="yes" xml:space="preserve">
          <source>Value to use as &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;mapFn&lt;/code&gt;.</source>
          <target state="translated">값으로 사용하는 &lt;code&gt;this&lt;/code&gt; 실행할 때 &lt;code&gt;mapFn&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="e2b71321d29494791f699d08194974c3877e5398" translate="yes" xml:space="preserve">
          <source>Value to use as accumulator to the first call of the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;. If no initial value is supplied, the last element in the array will be used and skipped. Calling reduce or reduceRight on an empty array without an initial value creates a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 의 첫 번째 호출에 대한 누산기로 사용할 값 입니다. 초기 값이 제공되지 않으면 배열의 마지막 요소가 사용되고 건너 뜁니다. 초기 값없이 빈 배열에서 reduce 또는 reduceRight를 호출하면 &lt;code&gt;TypeError&lt;/code&gt; 가 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="dad47e65c53169bdf1516f9f32906fb63c15105f" translate="yes" xml:space="preserve">
          <source>Value to use as the first argument to the first call of the &lt;code&gt;callback&lt;/code&gt;. If no initial value is supplied, the first element in the array will be used. Calling &lt;code&gt;reduce()&lt;/code&gt; on an empty array without an initial value is an error.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 의 첫 번째 호출에 대한 첫 번째 인수로 사용할 값 입니다. 초기 값이 제공되지 않으면 배열의 첫 번째 요소가 사용됩니다. 초기 값없이 빈 배열에서 &lt;code&gt;reduce()&lt;/code&gt; 를 호출 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4ffe9bc3428ff9f24d806e5a9eeaee7edc51dac9" translate="yes" xml:space="preserve">
          <source>Values of zero are all considered to be equal, regardless of sign. (That is, &lt;code&gt;-0&lt;/code&gt; is considered to be equal to both &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt;), but &lt;code&gt;false&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; considered to be the same as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">부호에 관계없이 0 값은 모두 동일한 것으로 간주됩니다. (즉, &lt;code&gt;-0&lt;/code&gt; 모두 동일한 것으로 간주 &lt;code&gt;0&lt;/code&gt; 과 &lt;code&gt;+0&lt;/code&gt; )하지만, &lt;code&gt;false&lt;/code&gt; 되어 &lt;em&gt;있지&lt;/em&gt; 동일한 것으로 간주 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="859b0b5b86d8313084f51bc48daa7a36bd52b191" translate="yes" xml:space="preserve">
          <source>Var hides argument</source>
          <target state="translated">Var는 논쟁을 숨긴다</target>
        </trans-unit>
        <trans-unit id="f06faae45051c6d773a060f64aa4b7927970a707" translate="yes" xml:space="preserve">
          <source>Variable declarations in the JavaScript Guide</source>
          <target state="translated">JavaScript 안내서의 변수 선언</target>
        </trans-unit>
        <trans-unit id="34721cbac05fd3459b9d40c8119157c44d7f9b76" translate="yes" xml:space="preserve">
          <source>Variable name. It can be any legal identifier.</source>
          <target state="translated">변수 이름. 유효한 식별자 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b6526218abccd9aaf72feb65b361d2b51bbd22f" translate="yes" xml:space="preserve">
          <source>Variable names can't start with numbers in JavaScript. The following fails:</source>
          <target state="translated">변수 이름은 JavaScript에서 숫자로 시작할 수 없습니다. 다음은 실패합니다 :</target>
        </trans-unit>
        <trans-unit id="0e909d01b8601e5cf9fb51367dcb305a9c9701e8" translate="yes" xml:space="preserve">
          <source>Variable names starting with numeric literals</source>
          <target state="translated">숫자 리터럴로 시작하는 변수 이름</target>
        </trans-unit>
        <trans-unit id="4197c4595ca86583cbae2b9136ba641f9a6e49bf" translate="yes" xml:space="preserve">
          <source>Variable not declared</source>
          <target state="translated">선언되지 않은 변수</target>
        </trans-unit>
        <trans-unit id="e093b0ba06f11745364d4d6cc453646e62d5c378" translate="yes" xml:space="preserve">
          <source>Variable to iterate over property values, optionally declared with the &lt;code&gt;var&lt;/code&gt; keyword. This variable is local to the function, not to the loop.</source>
          <target state="translated">속성 값을 반복하는 변수로, &lt;code&gt;var&lt;/code&gt; 키워드로 선택적으로 선언됩니다 . 이 변수는 루프가 아닌 함수에 국한됩니다.</target>
        </trans-unit>
        <trans-unit id="93357e07fe591c0b80ecee4526694c55f27bf8c3" translate="yes" xml:space="preserve">
          <source>Variables and methods can infer the name of an anonymous function from its syntactic position (new in ECMAScript 2015).</source>
          <target state="translated">변수와 메소드는 구문 상 위치에서 익명 함수의 이름을 추론 할 수 있습니다 (ECMAScript 2015의 새로운 기능).</target>
        </trans-unit>
        <trans-unit id="0794b9421123e365af068527287b4441d5c0f189" translate="yes" xml:space="preserve">
          <source>Variables declared by &lt;code&gt;let&lt;/code&gt; have their scope in the block for which they are declared, as well as in any contained sub-blocks. In this way, &lt;code&gt;let&lt;/code&gt; works very much like &lt;code&gt;var&lt;/code&gt;. The main difference is that the scope of a &lt;code&gt;var&lt;/code&gt; variable is the entire enclosing function:</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 에 의해 선언 된 변수는 선언 된 블록과 포함 된 하위 블록에서 범위를 갖습니다. 이런 식으로 &lt;code&gt;let&lt;/code&gt; 은 &lt;code&gt;var&lt;/code&gt; 와 매우 유사 하게 작동합니다 . 주요 차이점은 &lt;code&gt;var&lt;/code&gt; 변수 의 범위 가 전체 둘러싸는 함수라는 것입니다.</target>
        </trans-unit>
        <trans-unit id="54be569e281d5bfecc250892e33932f45a689c36" translate="yes" xml:space="preserve">
          <source>Variables declared by &lt;code&gt;let&lt;/code&gt; have their scope in the block for which they are defined, as well as in any contained sub-blocks. In this way, &lt;code&gt;let&lt;/code&gt; works very much like &lt;code&gt;var&lt;/code&gt;. The main difference is that the scope of a &lt;code&gt;var&lt;/code&gt; variable is the entire enclosing function:</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 에 의해 선언 된 변수 는 정의 된 블록과 포함 된 하위 블록에서 범위를 갖습니다. 이러한 방법으로 &lt;code&gt;let&lt;/code&gt; 매우 같은 작품 &lt;code&gt;var&lt;/code&gt; . 가장 큰 차이점은 &lt;code&gt;var&lt;/code&gt; 변수 의 범위 가 전체 둘러싸는 함수라는 것입니다.</target>
        </trans-unit>
        <trans-unit id="38d88d01c247355ecb4262251a091502bf4892df" translate="yes" xml:space="preserve">
          <source>Variables declared using &lt;code&gt;var&lt;/code&gt; are created before any code is executed in a process known as hoisting. Their initial value is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 를 사용하여 선언 된 변수는 호이 스팅이라는 프로세스에서 코드가 실행되기 전에 생성됩니다. 초기 값은 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="23382333cfe64a086a98043155a0bd5371c460b2" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;var&lt;/code&gt; or created by &lt;a href=&quot;function&quot;&gt;function declarations&lt;/a&gt; in non-strict mode &lt;strong&gt;do not&lt;/strong&gt; have block scope. Variables introduced within a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. For example:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 로 선언 되거나 엄격 &lt;strong&gt;하지 않은&lt;/strong&gt; 모드에서 &lt;a href=&quot;function&quot;&gt;함수 선언&lt;/a&gt; 으로 생성 된 변수 에는 블록 범위 &lt;strong&gt;가 없습니다&lt;/strong&gt; . 블록 내에 도입 된 변수는 포함하는 함수 또는 스크립트로 범위가 지정되며 설정의 효과는 블록 자체를 넘어서도 지속됩니다. 즉, 블록 문은 범위를 도입하지 않습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="51f758127e9b82bba992a23b60e91cdde2094233" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;var&lt;/code&gt;&lt;strong&gt;do not&lt;/strong&gt; have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although &quot;standalone&quot; blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 로 선언 된 변수 에는 블록 범위 &lt;strong&gt;가 없습니다&lt;/strong&gt; . 블록과 함께 도입 된 변수는 포함 함수 또는 스크립트로 범위가 지정되며 변수 설정의 효과는 블록 자체를 넘어서 유지됩니다. 다시 말해, 블록 명령문은 범위를 도입하지 않습니다. &quot;독립형&quot;블록은 유효한 구문이지만 C 또는 Java에서 이러한 블록과 같은 것을 수행한다고 생각되면 자신이 생각하는대로하지 않기 때문에 JavaScript에서 독립형 블록을 사용하고 싶지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="18fa0296710b520dc6023f1904d21b083fe180d8" translate="yes" xml:space="preserve">
          <source>Variables that appear to be implicit globals may be references to variables in an outer function scope:</source>
          <target state="translated">암시 적 전역 변수 인 것처럼 보이는 변수는 외부 함수 범위의 변수에 대한 참조 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c7312d6bb312853c19d38443e3377eca38079cc" translate="yes" xml:space="preserve">
          <source>Variant collations for certain locales. Possible values include: &lt;code&gt;&quot;big5han&quot;&lt;/code&gt;, &lt;code&gt;&quot;dict&quot;&lt;/code&gt;, &lt;code&gt;&quot;direct&quot;&lt;/code&gt;, &lt;code&gt;&quot;ducet&quot;&lt;/code&gt;, &lt;code&gt;&quot;gb2312&quot;&lt;/code&gt;, &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt;, &lt;code&gt;&quot;phonetic&quot;&lt;/code&gt;, &lt;code&gt;&quot;pinyin&quot;&lt;/code&gt;, &lt;code&gt;&quot;reformed&quot;&lt;/code&gt;, &lt;code&gt;&quot;searchjl&quot;&lt;/code&gt;, &lt;code&gt;&quot;stroke&quot;&lt;/code&gt;, &lt;code&gt;&quot;trad&quot;&lt;/code&gt;, &lt;code&gt;&quot;unihan&quot;&lt;/code&gt;. The &lt;code&gt;&quot;standard&quot;&lt;/code&gt; and &lt;code&gt;&quot;search&quot;&lt;/code&gt; values are ignored; they are replaced by the &lt;code&gt;options&lt;/code&gt; property &lt;code&gt;usage&lt;/code&gt; (see below).</source>
          <target state="translated">특정 로케일에 대한 변형 데이터 정렬. 가능한 값은 다음과 같습니다 : &lt;code&gt;&quot;big5han&quot;&lt;/code&gt; , &lt;code&gt;&quot;dict&quot;&lt;/code&gt; , &lt;code&gt;&quot;direct&quot;&lt;/code&gt; , &lt;code&gt;&quot;ducet&quot;&lt;/code&gt; , &lt;code&gt;&quot;gb2312&quot;&lt;/code&gt; , &lt;code&gt;&quot;phonebk&quot;&lt;/code&gt; , &lt;code&gt;&quot;phonetic&quot;&lt;/code&gt; , &lt;code&gt;&quot;pinyin&quot;&lt;/code&gt; , &lt;code&gt;&quot;reformed&quot;&lt;/code&gt; , &lt;code&gt;&quot;searchjl&quot;&lt;/code&gt; , &lt;code&gt;&quot;stroke&quot;&lt;/code&gt; , &lt;code&gt;&quot;trad&quot;&lt;/code&gt; , &lt;code&gt;&quot;unihan&quot;&lt;/code&gt; 입니다. &lt;code&gt;&quot;standard&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;search&quot;&lt;/code&gt; 값은 무시됩니다; &lt;code&gt;options&lt;/code&gt; 속성 &lt;code&gt;usage&lt;/code&gt; 으로 대체됩니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="bf57b0c489a8725e49acdae0bd72d262edfe17b9" translate="yes" xml:space="preserve">
          <source>Vendor-specific extensions</source>
          <target state="translated">공급 업체별 확장</target>
        </trans-unit>
        <trans-unit id="0ea3c77718c2c801946a36d69f35b87497b18336" translate="yes" xml:space="preserve">
          <source>Venkat.R - Various Syntax Error for const variables</source>
          <target state="translated">Venkat.R-const 변수에 대한 다양한 구문 오류</target>
        </trans-unit>
        <trans-unit id="f06cca3cedfe52389d86ad2bc0d3cb561f521c75" translate="yes" xml:space="preserve">
          <source>Venkat.R - Various Syntax Error for let variables</source>
          <target state="translated">Venkat.R-let 변수에 대한 다양한 구문 오류</target>
        </trans-unit>
        <trans-unit id="b7f06ad0a722ed487ff846d450043fedd3f6d0c1" translate="yes" xml:space="preserve">
          <source>Venkat.R - Various Syntax Error for var variables</source>
          <target state="translated">Venkat.R-var 변수에 대한 다양한 구문 오류</target>
        </trans-unit>
        <trans-unit id="b8a114e30b4ba12aeabad7d7bde58af00f7ffe47" translate="yes" xml:space="preserve">
          <source>Venkatraman.R - JS Promise (Part 1, Basics)</source>
          <target state="translated">Venkatraman.R-JS 약속 (1 부, 기본 사항)</target>
        </trans-unit>
        <trans-unit id="745aa0a5b0ea7dd1ef6b034b321c490d2e1e649e" translate="yes" xml:space="preserve">
          <source>Venkatraman.R - JS Promise (Part 2 - Using Q.js, When.js and RSVP.js)</source>
          <target state="translated">Venkatraman.R-JS 약속 (2 부-Q.js, When.js 및 RSVP.js 사용)</target>
        </trans-unit>
        <trans-unit id="67fec039179d5eaa41e92fed7cca3b18f2ebb69a" translate="yes" xml:space="preserve">
          <source>Venkatraman.R - Tools for Promises Unit Testing</source>
          <target state="translated">Venkatraman.R-약속 단위 테스트 도구</target>
        </trans-unit>
        <trans-unit id="ba4c53462dc4545ef309c66d114de828f2d0299c" translate="yes" xml:space="preserve">
          <source>Verifies that the specified index of the array still contains a value and sleeps awaiting or times out. Returns either &quot;&lt;code&gt;ok&lt;/code&gt;&quot;, &quot;&lt;code&gt;not-equal&lt;/code&gt;&quot;, or &quot;&lt;code&gt;timed-out&lt;/code&gt;&quot;. If waiting is not allowed in the calling agent then it throws an &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; exception. (Most browsers will not allow &lt;code&gt;wait()&lt;/code&gt; on the browser's main thread.)</source>
          <target state="translated">배열의 지정된 인덱스에 여전히 값이 포함되어 있고 대기 중이거나 시간 초과되었는지 확인합니다. &quot; &lt;code&gt;ok&lt;/code&gt; &quot;, &quot; &lt;code&gt;not-equal&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;timed-out&lt;/code&gt; &quot;을 반환합니다 . 호출 에이전트에서 대기가 허용되지 않으면 &lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. (대부분의 브라우저는 브라우저의 메인 스레드에서 &lt;code&gt;wait()&lt;/code&gt; 를 허용하지 않습니다 .)</target>
        </trans-unit>
        <trans-unit id="eb9301fe225dd357c9fc1f3e7d0f52d86381b70c" translate="yes" xml:space="preserve">
          <source>Verifies that the specified index of the array still contains a value and sleeps awaiting or times out. Returns either &lt;code&gt;&quot;ok&quot;&lt;/code&gt;, &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt;, or &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt;. If waiting is not allowed in the calling agent then it throws an Error exception (most browsers will not allow &lt;code&gt;wait()&lt;/code&gt; on the browser's main thread).</source>
          <target state="translated">배열의 지정된 인덱스에 여전히 값이 포함되어 있고 대기 또는 시간 초과 된 상태인지 확인합니다. &lt;code&gt;&quot;ok&quot;&lt;/code&gt; , &lt;code&gt;&quot;not-equal&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;timed-out&quot;&lt;/code&gt; 을 반환합니다 . 호출 에이전트에서 대기가 허용되지 않으면 오류 예외가 발생합니다 (대부분의 브라우저는 브라우저의 기본 스레드에서 &lt;code&gt;wait()&lt;/code&gt; 를 허용하지 않습니다 ).</target>
        </trans-unit>
        <trans-unit id="5170d77c566dde5f835fece888c96564a77fe0b2" translate="yes" xml:space="preserve">
          <source>Versions of Babel prior to 7 can handle &lt;code&gt;CustomError&lt;/code&gt; class methods, but only when they are declared with &lt;a href=&quot;object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;. Otherwise, old versions of Babel and other transpilers will not correctly handle the following code without &lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;additional configuration&lt;/a&gt;.</source>
          <target state="translated">7 이전 버전의 Babel은 &lt;code&gt;CustomError&lt;/code&gt; 클래스 메서드를 처리 할 수 있지만 &lt;a href=&quot;object/defineproperty&quot;&gt;Object.defineProperty ()&lt;/a&gt; 로 선언 된 경우에만 가능 합니다. 그렇지 않으면 이전 버전의 Babel 및 기타 트랜스 파일러는 &lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;추가 구성&lt;/a&gt; 없이 다음 코드를 올바르게 처리하지 못합니다 .</target>
        </trans-unit>
        <trans-unit id="2a0d4bdeb1c39c3531dedcf5fe570562282bdfeb" translate="yes" xml:space="preserve">
          <source>Versions of Chrome which implement &lt;code&gt;Object.defineProperty()&lt;/code&gt; in some circumstances ignore a length value different from the array's current &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property. In some circumstances changing writability seems to silently not work (and not throw an exception). Also, relatedly, some array-mutating methods like &lt;a href=&quot;../array/push&quot;&gt;&lt;code&gt;Array.prototype.push&lt;/code&gt;&lt;/a&gt; don't respect a non-writable length.</source>
          <target state="translated">경우에 따라 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 를 구현하는 Chrome 버전은 배열의 현재 &lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 속성 과 다른 길이 값을 무시 합니다. 경우에 따라서는 쓰기 가능한 쓰기 기능이 자동으로 작동하지 않는 것 같습니다 (예외가 발생하지 않음). 또한 관련하여 &lt;a href=&quot;../array/push&quot;&gt; &lt;code&gt;Array.prototype.push&lt;/code&gt; &lt;/a&gt; 와 같은 일부 배열 변경 메서드는 쓸 수없는 길이를 고려하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8009012bd2c4d9369856a9ce6eabe604f691a8f1" translate="yes" xml:space="preserve">
          <source>Versions of Safari which implement &lt;code&gt;Object.defineProperty()&lt;/code&gt; ignore a &lt;code&gt;length&lt;/code&gt; value different from the array's current &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property, and attempts to change writability execute without error but do not actually change the property's writability.</source>
          <target state="translated">&lt;code&gt;Object.defineProperty()&lt;/code&gt; 를 구현하는 Safari 버전은 배열의 현재 &lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 속성과 다른 &lt;code&gt;length&lt;/code&gt; 값을 무시하고 쓰기 가능성 을 변경하려고 시도하지만 오류없이 실행되지만 실제로 속성의 쓰기 가능성은 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="104253f6a152860a20a03899f360ca69966f78b6" translate="yes" xml:space="preserve">
          <source>Versions prior to JavaScript 1.3</source>
          <target state="translated">JavaScript 1.3 이전 버전</target>
        </trans-unit>
        <trans-unit id="46e754e54cee8d62f971832e184d68ff700f439a" translate="yes" xml:space="preserve">
          <source>Vertical tabulation</source>
          <target state="translated">수직 도표</target>
        </trans-unit>
        <trans-unit id="a1051b28a73d089699acc9ef668770118a942691" translate="yes" xml:space="preserve">
          <source>Void.</source>
          <target state="translated">Void.</target>
        </trans-unit>
        <trans-unit id="814f40affaed044233fd8ca6e9ba6886f4099c25" translate="yes" xml:space="preserve">
          <source>Wait and notify</source>
          <target state="translated">기다렸다 알림</target>
        </trans-unit>
        <trans-unit id="22a094e4eaefdac30d5bff15a36eef23a7272b32" translate="yes" xml:space="preserve">
          <source>Wait for all promises to be resolved, or for any to be rejected.</source>
          <target state="translated">모든 약속이 해결되거나 거부 될 때까지 기다리십시오.</target>
        </trans-unit>
        <trans-unit id="ecdb1368135fe5ef5f26a3f2c2300186cd2c5e00" translate="yes" xml:space="preserve">
          <source>Wait until all promises have settled (each may resolve or reject).</source>
          <target state="translated">모든 약속이 해결 될 때까지 기다리십시오 (각 약속이 해결되거나 거부 될 수 있음).</target>
        </trans-unit>
        <trans-unit id="a62d0aca99bffdb8877425c0ca5df5939f4ab016" translate="yes" xml:space="preserve">
          <source>Wait until any of the promises is resolved or rejected.</source>
          <target state="translated">약속이 해결되거나 거부 될 때까지 기다리십시오.</target>
        </trans-unit>
        <trans-unit id="7ddc9e9f125b34ac48475d1d37f451838ac106f4" translate="yes" xml:space="preserve">
          <source>Waiting and notifiying</source>
          <target state="translated">대기 및 알림</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="d0b8d87b5862684334cbb3837d487f1f309786bc" translate="yes" xml:space="preserve">
          <source>Warning for Deep Clone</source>
          <target state="translated">딥 클론에 대한 경고</target>
        </trans-unit>
        <trans-unit id="e9335003fee4eb3a41b0cc28198a374dbf8cdfc1" translate="yes" xml:space="preserve">
          <source>Warning. JavaScript execution won't be halted.</source>
          <target state="translated">경고. JavaScript 실행이 중단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a16a8f63688fe43bd5559274036ba17ac905cfb" translate="yes" xml:space="preserve">
          <source>Warning: -file- is being assigned a //# sourceMappingURL, but already has one</source>
          <target state="translated">경고 : -file-에 // # sourceMappingURL이 지정되었지만 이미 하나가 있습니다.</target>
        </trans-unit>
        <trans-unit id="33e99f0c5ab0d63c358a06e04f45316d2d30148f" translate="yes" xml:space="preserve">
          <source>Warning: 08/09 is not a legal ECMA-262 octal constant</source>
          <target state="translated">경고 : 08/09는 유효한 ECMA-262 8 진 상수가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="400d35cfbe0ff77de7ab338f1a24094cabaf2059" translate="yes" xml:space="preserve">
          <source>Warning: Although &lt;code&gt;String.prototype.substr(&amp;hellip;)&lt;/code&gt; is not strictly deprecated (as in &quot;removed from the Web standards&quot;), it is considered a &lt;strong&gt;legacy function&lt;/strong&gt; and should be avoided when possible. It is not part of the core JavaScript language and may be removed in the future. If at all possible, use the &lt;code&gt;&lt;a href=&quot;substring&quot;&gt;substring()&lt;/a&gt;&lt;/code&gt; method instead.</source>
          <target state="translated">경고 : &lt;code&gt;String.prototype.substr(&amp;hellip;)&lt;/code&gt; 은 엄격하게 사용되지 않지만 ( &quot;웹 표준에서 제거&quot;와 같이) &lt;strong&gt;레거시 함수&lt;/strong&gt; 로 간주되며 가능하면 피해야합니다. 핵심 JavaScript 언어의 일부가 아니며 나중에 제거 될 수 있습니다. 가능하면 &lt;code&gt;&lt;a href=&quot;substring&quot;&gt;substring()&lt;/a&gt;&lt;/code&gt; 메소드를 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4e6d31aabb57cbe8e5de5901eaa16756657491df" translate="yes" xml:space="preserve">
          <source>Warning: Date.prototype.toLocaleFormat is deprecated</source>
          <target state="translated">경고 : Date.prototype.toLocaleFormat은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8b822a7cf09228bed47d3756c97d5a00ff5de3b1" translate="yes" xml:space="preserve">
          <source>Warning: JavaScript 1.6's for-each-in loops are deprecated</source>
          <target state="translated">경고 : JavaScript 1.6의 for-each-in 루프는 더 이상 사용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="ea5464c818a72742368a1f944fd657a0b679d5d3" translate="yes" xml:space="preserve">
          <source>Warning: String.x is deprecated; use String.prototype.x instead</source>
          <target state="translated">경고 : String.x는 더 이상 사용되지 않습니다. 대신 String.prototype.x를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="93fd62106ca698fae1d29ec25b71e40a05a6d95d" translate="yes" xml:space="preserve">
          <source>Warning: expression closures are deprecated</source>
          <target state="translated">경고 : 표현식 클로저는 더 이상 사용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="b8c4fceee630e8f6db1289d72437e3a90b192936" translate="yes" xml:space="preserve">
          <source>Warning: unreachable code after return statement</source>
          <target state="translated">경고 : return 문 후 연결할 수없는 코드</target>
        </trans-unit>
        <trans-unit id="e9639b31b9176e58b05e3357bccad306aa8c5ab2" translate="yes" xml:space="preserve">
          <source>Warnings will not be shown for semicolon-less returns if these statements follow it:</source>
          <target state="translated">이 문장이 뒤에 오는 경우 세미콜론이없는 반환에 대해서는 경고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c0fb637549d87c45d789bda4fa312666aafdca18" translate="yes" xml:space="preserve">
          <source>Was available in Aurora and Nightly channels only.</source>
          <target state="translated">Aurora 및 Nightly 채널에서만 사용 가능했습니다.</target>
        </trans-unit>
        <trans-unit id="4b1850f48782418ea24dfd05790b888afd609c2a" translate="yes" xml:space="preserve">
          <source>Was initially in the ECMAScript 2015 draft, but got removed in revision 27 (August 2014). Please see older revisions of ES2015 for specification semantics.</source>
          <target state="translated">처음 ECMAScript 2015 초안에 있었지만 개정 27 (2014 년 8 월)에서 제거되었습니다. 사양 의미론에 대해서는 ES2015의 이전 개정판을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="088f664178b74d3557cbc57e9219ae2f969b1d18" translate="yes" xml:space="preserve">
          <source>Watches for assignment to a property named &lt;code&gt;prop&lt;/code&gt; in this object, calling &lt;code&gt;handler(prop, oldval, newval)&lt;/code&gt; whenever &lt;code&gt;prop&lt;/code&gt; is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified &lt;code&gt;newval&lt;/code&gt; (or by returning &lt;code&gt;oldval&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;prop&lt;/code&gt; 가 설정 될 때마다 &lt;code&gt;handler(prop, oldval, newval)&lt;/code&gt; 호출 하고 해당 속성에 반환 값을 저장하는 이 객체에서 &lt;code&gt;prop&lt;/code&gt; 라는 속성에 할당을 감시 합니다. 감시 점은 수정 된 &lt;code&gt;newval&lt;/code&gt; 을 반환하거나 &lt;code&gt;oldval&lt;/code&gt; 을 반환 하여 값 할당을 필터링 (또는 무효화) 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e45693d2a930efc7abd21812253dee83435a024e" translate="yes" xml:space="preserve">
          <source>We can easily fix this by wrapping our &lt;code&gt;case&lt;/code&gt; clauses with brackets:</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; 절을 대괄호로 묶어 쉽게 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d4b490c7beb982a8297cd854de2bc11d6727ef14" translate="yes" xml:space="preserve">
          <source>We can make our own iterables like this:</source>
          <target state="translated">우리는 다음과 같이 자신 만의 이터 러블을 만들 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="b76208d2ba82e6a7a86052a3bcd0e0a71e67eab5" translate="yes" xml:space="preserve">
          <source>We can redefine the iteration behavior by supplying our own &lt;code&gt;@@iterator&lt;/code&gt;:</source>
          <target state="translated">자체 &lt;code&gt;@@iterator&lt;/code&gt; 제공하여 반복 동작을 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="649d376a86e60a4c1a5f875edb3771ec5df66200" translate="yes" xml:space="preserve">
          <source>We can then grow the instance by one page like so:</source>
          <target state="translated">그런 다음 다음과 같이 한 페이지 씩 인스턴스를 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee6aa271621bd04ea4d1faf12428f9e6df7342f1" translate="yes" xml:space="preserve">
          <source>We can use &lt;code&gt;push&lt;/code&gt; to append an element to an array. And, because &lt;code&gt;push&lt;/code&gt; accepts a variable number of arguments, we can also push multiple elements at once. But, if we pass an array to &lt;code&gt;push&lt;/code&gt;, it will actually add that array as a single element, instead of adding the elements individually, so we end up with an array inside an array. What if that is not what we want? &lt;code&gt;concat&lt;/code&gt; does have the behaviour we want in this case, but it does not actually append to the existing array but creates and returns a new array. But we wanted to append to our existing array... So what now? Write a loop? Surely not?</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 를 사용 하여 요소를 배열에 추가 할 수 있습니다 . 또한 &lt;code&gt;push&lt;/code&gt; 는 가변 개수의 인수를 허용 하므로 여러 요소를 한 번에 푸시 할 수도 있습니다. 그러나 &lt;code&gt;push&lt;/code&gt; 배열을 전달 하면 요소를 개별적으로 추가하는 대신 실제로 해당 배열을 단일 요소로 추가하므로 배열 내부의 배열로 끝납니다. 그것이 우리가 원하는 것이 아니라면? &lt;code&gt;concat&lt;/code&gt; 에는이 경우 원하는 동작이 있지만 실제로는 기존 배열에 추가되지 않지만 새 배열을 작성하여 반환합니다. 그러나 기존 배열에 추가하고 싶었습니다. 이제 무엇을해야합니까? 루프를 작성 하시겠습니까? 분명히 아니다?</target>
        </trans-unit>
        <trans-unit id="8a3d256743ef04d19c7d610e3021d4c239b8c1b0" translate="yes" xml:space="preserve">
          <source>We have already learned how to notate properties using the initializer syntax. Oftentimes, there are variables in your code that you would like to put into an object. You will see code like this:</source>
          <target state="translated">이니셜 라이저 구문을 사용하여 속성을 표시하는 방법을 이미 배웠습니다. 종종 코드에 객체에 넣고 싶은 변수가 있습니다. 다음과 같은 코드가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3db171eb4b32a7305e9ce25b4aac305dcd518a56" translate="yes" xml:space="preserve">
          <source>We then create an import object that contains a reference to the table:</source>
          <target state="translated">그런 다음 테이블에 대한 참조가 포함 된 가져 오기 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="328556a4a648ea7eb2cf113557e53d98c76b6ff1" translate="yes" xml:space="preserve">
          <source>We then create an import object that contains the table:</source>
          <target state="translated">그런 다음 테이블이 포함 된 가져 오기 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ea5d5dae0af760aa2d944bfd09cfe9be0d652701" translate="yes" xml:space="preserve">
          <source>We then do a check using &lt;code&gt;WebAssembly.Module.customSections&lt;/code&gt;, looking to see whether the module instance contains a &quot;name&quot; custom section by checking that its &lt;code&gt;length&lt;/code&gt; is more than 0. Since there is a &quot;name&quot; section in the example, an &lt;code&gt;ArrayBuffer&lt;/code&gt; object is returned.</source>
          <target state="translated">그런 다음 &lt;code&gt;WebAssembly.Module.customSections&lt;/code&gt; 를 사용하여 검사하여 모듈 인스턴스의 &lt;code&gt;length&lt;/code&gt; 가 0보다 큰지 확인하여 모듈 인스턴스에 &quot;name&quot;사용자 정의 섹션이 포함되어 있는지 확인합니다 . 예제에 &quot;name&quot;섹션이 있으므로 &lt;code&gt;ArrayBuffer&lt;/code&gt; 객체가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="cc0dfa6f97adab0681d030a2d676da1cc5366761" translate="yes" xml:space="preserve">
          <source>We use our &lt;code&gt;degToRad()&lt;/code&gt; function to convert 60 degrees to radians, as &lt;a href=&quot;math/tan&quot;&gt;&lt;code&gt;Math.tan()&lt;/code&gt;&lt;/a&gt; expects an input value in radians.</source>
          <target state="translated">우리는 우리의 사용 &lt;code&gt;degToRad()&lt;/code&gt; 로, 라디안 60 개도를 변환하는 기능을 &lt;a href=&quot;math/tan&quot;&gt; &lt;code&gt;Math.tan()&lt;/code&gt; &lt;/a&gt; 라디안 입력 값을 기대하고있다.</target>
        </trans-unit>
        <trans-unit id="6279a80821249cab2332a0d932a3e191da10ddc9" translate="yes" xml:space="preserve">
          <source>WeakMap</source>
          <target state="translated">WeakMap</target>
        </trans-unit>
        <trans-unit id="c7b4a83585902eed00ada9c94e8937e6c0a8dada" translate="yes" xml:space="preserve">
          <source>WeakMap.prototype</source>
          <target state="translated">WeakMap.prototype</target>
        </trans-unit>
        <trans-unit id="9f48b9d4c39134a88b6b1b3ddc4feab4fccf55c5" translate="yes" xml:space="preserve">
          <source>WeakSet</source>
          <target state="translated">WeakSet</target>
        </trans-unit>
        <trans-unit id="2a2796d332dfa789b552dadcffe726463b5ed5ca" translate="yes" xml:space="preserve">
          <source>WeakSet.prototype</source>
          <target state="translated">WeakSet.prototype</target>
        </trans-unit>
        <trans-unit id="f76ce82654fc9f33f528ad8761bea75f5a412677" translate="yes" xml:space="preserve">
          <source>Web IDL type</source>
          <target state="translated">웹 IDL 유형</target>
        </trans-unit>
        <trans-unit id="e3fe058d1c44e5390193812c37403e5227e1a2c1" translate="yes" xml:space="preserve">
          <source>Web Workers</source>
          <target state="translated">웹 워커</target>
        </trans-unit>
        <trans-unit id="051061c35dede06e751f127657cfd8dabc9b47ce" translate="yes" xml:space="preserve">
          <source>WebAssembly</source>
          <target state="translated">WebAssembly</target>
        </trans-unit>
        <trans-unit id="371ae30303ef2ff39e3b7d64c9bc41b13d9a9601" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'Instance' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 '인스턴스'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a3a6667f30378a6164861acbff02320d86d471a4" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'LinkError' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'LinkError'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="228ba67f0f1102828b37015dec8376be8641e2eb" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'Memory' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 '메모리'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a0f26628ac421a7f0516ad687f9b21e68b572ff7" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'Table' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 '테이블'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0b03490a90d0f7fdcbc58a0d42bcea3159bf9c33" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly constructors' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'WebAssembly 생성자'정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="68eb7d9fb516a4d3d171361d847d0c6c95572981" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'WebAssembly'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4f4f0a0b3c4606f8aaca8421805ef7ab2614a993" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly.Global()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'WebAssembly.Global ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="385ab099cc34cd12a9ac3b9e1b8eb15f94d05b1f" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly.Instance objects' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'WebAssembly.Instance 객체'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd314909ee1550ec66d3b8e1e9f73dd74264d8ca" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly.Instance: exports' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'WebAssembly.Instance : exports'의 정의입니다.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7ad56cdca412c38ca9e25e8f246b8596ef675f86" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'WebAssembly.Module()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'WebAssembly.Module ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cd4bad7a680d529abbcb4bca38ad5f4118b2f350" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'buffer' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 '버퍼'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f46dd79c7bcb2afec83608cf7770efb45bfcfcb4" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'compile()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'compile ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5cbcf739bd2a29eacf396a2f60e2a2b05ec077c5" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'customSections()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'customSections ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2c618f1306c968cc0c0828000dc568da6951d989" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'exports()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'exports ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5d041e6a816e8255b24bfc5b67e79f352d7f8855" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'get()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'get ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9b3cbf605284784f89ab8a0eb477c44e76312377" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'grow()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'grow ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="274e2222aaf9aca64cf3acf58fe9340f0e5245aa" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'imports()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'imports ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7038f367c294a2fdeee9ecf355aaabba4d178dd2" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'instantiate()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'instantiate ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9af302b37c3595fbb194fa33e84be1ff9fc70ae8" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'length' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 '길이'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="134d3d4dadf68e8805a4b9cd63e55a127450e708" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'set()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'set ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9265d0947036796f414bd410a04aedb8c429c924" translate="yes" xml:space="preserve">
          <source>WebAssembly JavaScript Interface&lt;br/&gt;&lt;small&gt;The definition of 'validate()' in that specification.&lt;/small&gt;</source>
          <target state="translated">WebAssembly JavaScript 인터페이스 &lt;br/&gt;&lt;small&gt;해당 사양에서 'validate ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="95e5176f47e4ba9928485c4a4d99fdbcf44dc89b" translate="yes" xml:space="preserve">
          <source>WebAssembly concepts</source>
          <target state="translated">웹 어셈블리 개념</target>
        </trans-unit>
        <trans-unit id="c52b8dd953f8584136911242e6edb4c7aaf2df52" translate="yes" xml:space="preserve">
          <source>WebAssembly features for web embedding&lt;br/&gt;&lt;small&gt;The definition of 'compileStreaming()' in that specification.&lt;/small&gt;</source>
          <target state="translated">웹 임베딩을위한 WebAssembly 기능 &lt;br/&gt;&lt;small&gt;해당 사양에서 'compileStreaming ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="05849054975ad3e3b6e60ba31439297d23c2bea3" translate="yes" xml:space="preserve">
          <source>WebAssembly features for web embedding&lt;br/&gt;&lt;small&gt;The definition of 'instantiateStreaming()' in that specification.&lt;/small&gt;</source>
          <target state="translated">웹 임베딩을위한 WebAssembly 기능 &lt;br/&gt;&lt;small&gt;해당 사양에서 'instantiateStreaming ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ae824fe5f92b36ac7a19a9cd12a65420167dadbd" translate="yes" xml:space="preserve">
          <source>WebAssembly.compile</source>
          <target state="translated">WebAssembly.compile</target>
        </trans-unit>
        <trans-unit id="43fad88ad2126315bb57ca98d19d962bf3b492a9" translate="yes" xml:space="preserve">
          <source>WebAssembly.compileError</source>
          <target state="translated">WebAssembly.compileError</target>
        </trans-unit>
        <trans-unit id="34d8ec4b33d53fd459ca96f6cbbd13c30f229e6a" translate="yes" xml:space="preserve">
          <source>WebAssembly.compileStreaming</source>
          <target state="translated">WebAssembly.compileStreaming</target>
        </trans-unit>
        <trans-unit id="82e21134ce3681f9a90bdc1db0e5eb9f24d232cc" translate="yes" xml:space="preserve">
          <source>WebAssembly.global</source>
          <target state="translated">WebAssembly.global</target>
        </trans-unit>
        <trans-unit id="1edea0418ecbbeb6463e43a9ebaea47bc9ab85a4" translate="yes" xml:space="preserve">
          <source>WebAssembly.global.prototype</source>
          <target state="translated">WebAssembly.global.prototype</target>
        </trans-unit>
        <trans-unit id="45a83797f41229e8b93e4efe5084b717a49b83ab" translate="yes" xml:space="preserve">
          <source>WebAssembly.instance</source>
          <target state="translated">WebAssembly.instance</target>
        </trans-unit>
        <trans-unit id="8d4f80b0cd6ef208be8c542bd4420b87d61ede60" translate="yes" xml:space="preserve">
          <source>WebAssembly.instance.exports</source>
          <target state="translated">WebAssembly.instance.exports</target>
        </trans-unit>
        <trans-unit id="5e9265aedab45b30c5294edc420c97cc3b84d442" translate="yes" xml:space="preserve">
          <source>WebAssembly.instance.prototype</source>
          <target state="translated">WebAssembly.instance.prototype</target>
        </trans-unit>
        <trans-unit id="8ce6b43e3d6d8e5b3d4aa4d85125f8a665f5668d" translate="yes" xml:space="preserve">
          <source>WebAssembly.instantiate</source>
          <target state="translated">WebAssembly.instantiate</target>
        </trans-unit>
        <trans-unit id="621ad7c574456ba2e53808c51f44aa7623868d15" translate="yes" xml:space="preserve">
          <source>WebAssembly.instantiateStreaming</source>
          <target state="translated">WebAssembly.instantiateStreaming</target>
        </trans-unit>
        <trans-unit id="add6756e22c709f1e3db76d9f1fb6a979a891d5c" translate="yes" xml:space="preserve">
          <source>WebAssembly.linkError</source>
          <target state="translated">WebAssembly.linkError</target>
        </trans-unit>
        <trans-unit id="ccee7e6f8ce34316c17b387549a88212671c782c" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory</source>
          <target state="translated">WebAssembly.memory</target>
        </trans-unit>
        <trans-unit id="93c50f17da39cc76eb96f9043d7c9de3a781f068" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory.buffer</source>
          <target state="translated">WebAssembly.memory.buffer</target>
        </trans-unit>
        <trans-unit id="83337e3b318ba9cfc671c9982b7b45da18ea1ada" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory.grow</source>
          <target state="translated">WebAssembly.memory.grow</target>
        </trans-unit>
        <trans-unit id="77be6e46d6d3c97bf951a376f5375e390c10ba7e" translate="yes" xml:space="preserve">
          <source>WebAssembly.memory.prototype</source>
          <target state="translated">WebAssembly.memory.prototype</target>
        </trans-unit>
        <trans-unit id="c6463530cca74c798093482f9f0014b4469ce6b4" translate="yes" xml:space="preserve">
          <source>WebAssembly.module</source>
          <target state="translated">WebAssembly.module</target>
        </trans-unit>
        <trans-unit id="5531b0e53a6a2c45601f7cffb515277806290463" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.customSections</source>
          <target state="translated">WebAssembly.module.customSections</target>
        </trans-unit>
        <trans-unit id="3a48fdf1101d99f3c362c3f0828b1b9200bfbbf0" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.exports</source>
          <target state="translated">WebAssembly.module.exports</target>
        </trans-unit>
        <trans-unit id="898b1c94c9512fe1319541d4e3f270bb0ba29dae" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.imports</source>
          <target state="translated">WebAssembly.module.imports</target>
        </trans-unit>
        <trans-unit id="a78c75b049b1efd19740f2ab050e21152de9ce6b" translate="yes" xml:space="preserve">
          <source>WebAssembly.module.prototype</source>
          <target state="translated">WebAssembly.module.prototype</target>
        </trans-unit>
        <trans-unit id="238a77457c16bb642b7e80de646e6a48d4e2a4fe" translate="yes" xml:space="preserve">
          <source>WebAssembly.runtimeError</source>
          <target state="translated">WebAssembly.runtimeError</target>
        </trans-unit>
        <trans-unit id="d600d72e7bdd7ab6f365f4edafd14dcd993907ad" translate="yes" xml:space="preserve">
          <source>WebAssembly.table</source>
          <target state="translated">WebAssembly.table</target>
        </trans-unit>
        <trans-unit id="8659a5129e7c8cfd42870513844375cf100eacf4" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.get</source>
          <target state="translated">WebAssembly.table.get</target>
        </trans-unit>
        <trans-unit id="eb378d9144f06a93bdfd37f940753ecfdeb738eb" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.grow</source>
          <target state="translated">WebAssembly.table.grow</target>
        </trans-unit>
        <trans-unit id="164a07186592639798c447f1f35706131a14ea34" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.length</source>
          <target state="translated">WebAssembly.table.length</target>
        </trans-unit>
        <trans-unit id="d81cf07625a35b752621d8d40e32e6f85f556eae" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.prototype</source>
          <target state="translated">WebAssembly.table.prototype</target>
        </trans-unit>
        <trans-unit id="5af149065d203fa1662bf61f580c35a279adb04d" translate="yes" xml:space="preserve">
          <source>WebAssembly.table.set</source>
          <target state="translated">WebAssembly.table.set</target>
        </trans-unit>
        <trans-unit id="2416ed5e027b02f2b563bc37623ac598f96e60be" translate="yes" xml:space="preserve">
          <source>WebAssembly.validate</source>
          <target state="translated">WebAssembly.validate</target>
        </trans-unit>
        <trans-unit id="c67f639aa357c713f97a2d0d5ad253e1993230fe" translate="yes" xml:space="preserve">
          <source>WebExtensions: Using eval in content scripts</source>
          <target state="translated">WebExtensions : 컨텐츠 스크립트에서 eval 사용</target>
        </trans-unit>
        <trans-unit id="5046ef0a39320e7c50078df7c455984c8436b2ab" translate="yes" xml:space="preserve">
          <source>Week day: 3 letter English week day name, e.g. &quot;Sat&quot;</source>
          <target state="translated">요일 : 3 자 영어 요일 이름 (예 : &quot;토&quot;)</target>
        </trans-unit>
        <trans-unit id="c7d252fdefad522e350a7318b0cac908ffe23769" translate="yes" xml:space="preserve">
          <source>Well-formed &lt;code&gt;JSON.stringify()&lt;/code&gt;</source>
          <target state="translated">올바른 형식의 &lt;code&gt;JSON.stringify()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7de50ff92b1733150a149066ab8a41d69d95b534" translate="yes" xml:space="preserve">
          <source>Well-formed JSON.stringify</source>
          <target state="translated">잘 구성된 JSON.stringify</target>
        </trans-unit>
        <trans-unit id="44a6bd2a3c9e454ea5200229ca3400cf7749804b" translate="yes" xml:space="preserve">
          <source>Well-formed JSON.stringify()</source>
          <target state="translated">잘 구성된 JSON.stringify ()</target>
        </trans-unit>
        <trans-unit id="5d32bb05c45281464c3faa91449c698df5bf1223" translate="yes" xml:space="preserve">
          <source>Well-formed template call site object, like &lt;code&gt;{ raw: ['foo', 'bar', 'baz'] }&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{ raw: ['foo', 'bar', 'baz'] }&lt;/code&gt; 와 같이 올바른 형식의 템플릿 호출 사이트 개체 입니다.</target>
        </trans-unit>
        <trans-unit id="a408b4011c0c8a4e5376fd1dc963eea6863eba1b" translate="yes" xml:space="preserve">
          <source>Well-known symbols</source>
          <target state="translated">잘 알려진 기호</target>
        </trans-unit>
        <trans-unit id="78d26a80af4fe87cd860276048073b0b5ce45ee7" translate="yes" xml:space="preserve">
          <source>What does &amp;ldquo;can&amp;rsquo;t access dead object&amp;rdquo; mean?</source>
          <target state="translated">&quot;죽은 개체에 액세스 할 수 없음&quot;은 무엇을 의미합니까?</target>
        </trans-unit>
        <trans-unit id="6581a74aa8cab6d56992818832038f4787e21997" translate="yes" xml:space="preserve">
          <source>What happens if I forgot a &lt;code&gt;break&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 잊어 버리면 어떻게됩니까 ?</target>
        </trans-unit>
        <trans-unit id="8ba2b711f9288e512e60531638860df9cf5379ff" translate="yes" xml:space="preserve">
          <source>What happens if I forgot a break?</source>
          <target state="translated">휴식을 잊어 버리면 어떻게 되나요?</target>
        </trans-unit>
        <trans-unit id="bc0c5693b63c09bd41ce1ec6d6b860ea66e1b59b" translate="yes" xml:space="preserve">
          <source>What if that is not what you want? &lt;code&gt;concat&lt;/code&gt; does have the desired behaviour in this case, but it does not append to the &lt;em&gt;existing&lt;/em&gt; array&amp;mdash;it instead creates and returns a new array.</source>
          <target state="translated">그것이 당신이 원하는 것이 아니라면? &lt;code&gt;concat&lt;/code&gt; 은이 경우 원하는 동작을 갖지만 &lt;em&gt;기존&lt;/em&gt; 배열에 추가하지 않고 대신 새 배열을 만들고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bedd362c633647895894e24745a972d9c906fcf6" translate="yes" xml:space="preserve">
          <source>What is &quot;shallow freeze&quot;?</source>
          <target state="translated">&quot;얕은 동결&quot;이란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="71c8a4a23b0dea390d9c49b1b0992f6d919a9595" translate="yes" xml:space="preserve">
          <source>What went wrong?</source>
          <target state="translated">무엇이 잘못 되었나요?</target>
        </trans-unit>
        <trans-unit id="78325c9f4d3074c33d92b725132fbea45139cf0c" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or nothing is returned:</source>
          <target state="translated">때 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 또는 아무 것도 반환되지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="6e7c117b1dafb052196e7600c0b1060433b7079e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Array.from()&lt;/code&gt; gets an array-like which isn't an iterator, it respects holes. &lt;code&gt;TypedArray.from()&lt;/code&gt; will ensure the result is dense.</source>
          <target state="translated">경우 &lt;code&gt;Array.from()&lt;/code&gt; 가져 배열되는 형상이 구멍을 존중 반복자 아니다. &lt;code&gt;TypedArray.from()&lt;/code&gt; 은 결과가 조밀함 을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="48c6e8ee5aa7c7adce0fdc952dedf8296a802518" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Array.from&lt;/code&gt; gets an array-like which isn't an iterator, it respects holes, where &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; will ensure the result is dense.</source>
          <target state="translated">때 &lt;code&gt;Array.from&lt;/code&gt; 가 얻을 배열을 같이하는이 구멍, 존중, 반복자하지 않습니다 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from&lt;/code&gt; 결과는 밀도가 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="ec8a5d8c724855c28fa7632d40a88c1d342cc931" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Error&lt;/code&gt; is used like a function -- without &lt;code&gt;new&lt;/code&gt;, it will return an &lt;code&gt;Error&lt;/code&gt; object. Therefore, a mere call to &lt;code&gt;Error&lt;/code&gt; will produce the same output that constructing an &lt;code&gt;Error&lt;/code&gt; object via the &lt;code&gt;new&lt;/code&gt; keyword would.</source>
          <target state="translated">때 &lt;code&gt;Error&lt;/code&gt; 함수처럼 사용 -없이 &lt;code&gt;new&lt;/code&gt; , 그것은 반환합니다 &lt;code&gt;Error&lt;/code&gt; 개체를. 따라서 단순히 &lt;code&gt;Error&lt;/code&gt; 를 호출 하면 &lt;code&gt;new&lt;/code&gt; 키워드 를 통해 &lt;code&gt;Error&lt;/code&gt; 객체를 구성하는 것과 동일한 출력이 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="27acc0bd8a67c55fd07417ba3128135f63995090" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fill&lt;/code&gt; gets passed an object, it will copy the reference and fill the array with references to that object.</source>
          <target state="translated">때 &lt;code&gt;fill&lt;/code&gt; 객체를 전달되는,이 기준을 복사하고 해당 객체에 대한 참조와 배열을 채울 것입니다.</target>
        </trans-unit>
        <trans-unit id="29972fd8e8a2506bbe3cac2f8d497bfbedee00f8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;from&lt;/code&gt; gets an iterator, the &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;&lt;/code&gt; version first collects all the values from the iterator, then creates an instance of &lt;code&gt;|this|&lt;/code&gt; using the count, then sets the values on the instance. &lt;code&gt;Array.from&lt;/code&gt; sets each value as it gets them from the iterator then sets the length at the end.</source>
          <target state="translated">시 &lt;code&gt;from&lt;/code&gt; 반복자를 얻는다는 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;&lt;/code&gt; 버전을 먼저 반복자의 모든 값을 수집, 다음의 인스턴스 생성 &lt;code&gt;|this|&lt;/code&gt; 카운트를 사용하여 인스턴스의 값을 설정합니다. &lt;code&gt;Array.from&lt;/code&gt; 은 반복자에서 얻을 때 각 값을 설정 한 다음 끝에 길이를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="dfdf11eddce16fec07db5e941d3c8ecffd70a719" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, the calling regex's &lt;code&gt;lastIndex&lt;/code&gt; property will reset to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;test()&lt;/code&gt; 반환 &lt;code&gt;false&lt;/code&gt; , 호출 정규 표현식의 &lt;code&gt;lastIndex&lt;/code&gt; 속성의 속성으로 재설정됩니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56761113d92c77391744167196281cdb2a79152e" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;.then()&lt;/code&gt; lacks the appropriate function that returns a Promise object, processing simply continues to the next link of the chain. Therefore, a chain can safely omit every &lt;code&gt;handleRejection&lt;/code&gt; until the final &lt;code&gt;.catch()&lt;/code&gt;. Similarly, &lt;code&gt;.catch()&lt;/code&gt; is really just a &lt;code&gt;.then()&lt;/code&gt; without a slot for &lt;code&gt;handleFulfilled&lt;/code&gt;.</source>
          <target state="translated">때 &lt;code&gt;.then()&lt;/code&gt; 약속 객체를 반환 적절한 기능 부족, 간단히 처리하는 체인의 다음 링크에 계속된다. 따라서 체인은 최종 &lt;code&gt;.catch()&lt;/code&gt; 까지 모든 &lt;code&gt;handleRejection&lt;/code&gt; 을 안전하게 생략 할 수 있습니다 . 마찬가지로, &lt;code&gt;.catch()&lt;/code&gt; 정말로 단지입니다 &lt;code&gt;.then()&lt;/code&gt; 용 슬롯이없는 &lt;code&gt;handleFulfilled&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="35a2b15b580fd1bf059e597d04c92c0aa4e53426" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;catch&lt;/code&gt;-block is used, the &lt;code&gt;catch&lt;/code&gt;-block is executed when any exception is thrown from within the &lt;code&gt;try&lt;/code&gt;-block. For example, when the exception occurs in the following code, control transfers to the &lt;code&gt;catch&lt;/code&gt;-block.</source>
          <target state="translated">때 &lt;code&gt;catch&lt;/code&gt; - 블록을 사용하는 경우, &lt;code&gt;catch&lt;/code&gt; 예외가 내에서 발생하는 경우 - 블록이 실행됩니다 &lt;code&gt;try&lt;/code&gt; - 블록. 예를 들어 다음 코드에서 예외가 발생하면 제어가 &lt;code&gt;catch&lt;/code&gt; 블록으로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="9f1bc1a245ce2d073d8d15a7df2deeb94ffe2afd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;nextValue&lt;/code&gt; is a promise, the effect is a dynamic replacement. The &lt;code&gt;return&lt;/code&gt; causes a promise to be popped, but the &lt;code&gt;nextValue&lt;/code&gt; promise is pushed into its place. For the nesting shown above, suppose the &lt;code&gt;.then()&lt;/code&gt; associated with &quot;promise B&quot; returns a &lt;code&gt;nextValue&lt;/code&gt; of &quot;promise X&quot;. The resulting nesting would look like this:</source>
          <target state="translated">때 &lt;code&gt;nextValue&lt;/code&gt; 은 약속이며, 효과는 동적 교체입니다. &lt;code&gt;return&lt;/code&gt; 약속이 튀어되도록하지만, &lt;code&gt;nextValue&lt;/code&gt; 약속은 그 자리에 푸시됩니다. 위에 표시된 중첩의 경우 &quot;promise B&quot;와 관련된 &lt;code&gt;.then()&lt;/code&gt; 이 &quot;promise X&quot; 의 &lt;code&gt;nextValue&lt;/code&gt; 를 반환 한다고 가정합니다 . 결과 중첩은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cff7988e78976fd1c2345be099410b3b34450896" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;return&lt;/code&gt; statement is used in a function body, the execution of the function is stopped. If specified, a given value is returned to the function caller. For example, the following function returns the square of its argument, &lt;code&gt;x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is a number.</source>
          <target state="translated">때 &lt;code&gt;return&lt;/code&gt; 문이 함수 본문에서 사용되는 함수의 실행이 중지됩니다. 지정된 경우 지정된 값이 함수 호출자에게 리턴됩니다. 예를 들어 다음 함수는 인수 &lt;code&gt;x&lt;/code&gt; 의 제곱을 반환합니다 . 여기서 &lt;code&gt;x&lt;/code&gt; 는 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="ff03fe79b461ccf577f710e872cbb9b96f8fddce" translate="yes" xml:space="preserve">
          <source>When a Symbol wrapper object is used as a property key, this object will be coerced to its wrapped symbol:</source>
          <target state="translated">Symbol 래퍼 객체를 속성 키로 사용하면이 객체는 래핑 된 심볼로 강제 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="40d006638ff6702467c271d3645e4199dd3655c7" translate="yes" xml:space="preserve">
          <source>When a bound function is called, it calls internal method &lt;code&gt;[[Call]]&lt;/code&gt; on &lt;code&gt;[[BoundTargetFunction]]&lt;/code&gt;, with following arguments &lt;code&gt;Call(&lt;var&gt;boundThis&lt;/var&gt;, ...&lt;var&gt;args&lt;/var&gt;)&lt;/code&gt;. Where &lt;code&gt;&lt;var&gt;boundThis&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;[[BoundThis]]&lt;/code&gt;, &lt;code&gt;&lt;var&gt;args&lt;/var&gt;&lt;/code&gt; is &lt;code&gt;[[BoundArguments]]&lt;/code&gt;, followed by the arguments passed by the function call.</source>
          <target state="translated">바인딩 된 함수가 호출되면 다음 인수 &lt;code&gt;Call(&lt;var&gt;boundThis&lt;/var&gt;, ...&lt;var&gt;args&lt;/var&gt;)&lt;/code&gt; &lt;var&gt;boundThis&lt;/var&gt; , ... &lt;var&gt;args&lt;/var&gt; ) 와 함께 &lt;code&gt;[[BoundTargetFunction]]&lt;/code&gt; 에서 내부 메서드 &lt;code&gt;[[Call]]&lt;/code&gt; 을 호출 합니다. 여기서 &lt;code&gt;&lt;var&gt;boundThis&lt;/var&gt;&lt;/code&gt; 이 있다 &lt;code&gt;[[BoundThis]]&lt;/code&gt; , &lt;code&gt;&lt;var&gt;args&lt;/var&gt;&lt;/code&gt; 있다 &lt;code&gt;[[BoundArguments]]&lt;/code&gt; 함수 호출에 의해 전달되는 인수 하였다.</target>
        </trans-unit>
        <trans-unit id="96b0e4e2a594c56d1b6ff5183f4309702616eff2" translate="yes" xml:space="preserve">
          <source>When a browser follows a &lt;code&gt;javascript:&lt;/code&gt; URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;void&lt;/code&gt; operator can be used to return &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">브라우저가 &lt;code&gt;javascript:&lt;/code&gt; URI를 따르는 경우 , URI에서 코드를 평가 한 후 리턴 된 값이 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 경우 페이지의 컨텐츠를 리턴 된 값으로 대체합니다 . &lt;code&gt;void&lt;/code&gt; 연산자 복귀하는데 사용될 수 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b9b88e39f544bde2f844f86b4040395a0a0de4e0" translate="yes" xml:space="preserve">
          <source>When a browser follows a &lt;code&gt;javascript:&lt;/code&gt; URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;void&lt;/code&gt; operator can be used to return &lt;code&gt;undefined&lt;/code&gt;. For example:</source>
          <target state="translated">브라우저가 &lt;code&gt;javascript:&lt;/code&gt; URI를 따르는 경우 URI의 코드를 평가 한 다음 반환 된 값이 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 인 경우를 제외하고 페이지의 콘텐츠를 반환 된 값으로 바꿉니다 . &lt;code&gt;void&lt;/code&gt; 연산자 복귀하는데 사용될 수 &lt;code&gt;undefined&lt;/code&gt; . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="23bff28126820c5460b495146645f5081234cbac" translate="yes" xml:space="preserve">
          <source>When a function is called as a method of an object, its &lt;code&gt;this&lt;/code&gt; is set to the object the method is called on.</source>
          <target state="translated">함수를 객체의 방법이라 할 때, 그 &lt;code&gt;this&lt;/code&gt; 메소드가 호출되는 객체로 설정된다.</target>
        </trans-unit>
        <trans-unit id="6a47b34c61e463080f2816760a918433e9257135" translate="yes" xml:space="preserve">
          <source>When a function is called, the arguments to the call are held in the array-like &quot;variable&quot; &lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;. For example, in the call &quot;myFn(a, b, c)&quot;, the arguments within myFn's body will contain 3 array-like elements corresponding to (a, b, c). When modifying prototypes with hooks, simply pass this &amp;amp; the arguments (the call state) to the current behavior by calling apply() on the function. This pattern can be used for any prototype, such as Node.prototype, Function.prototype, etc.</source>
          <target state="translated">함수가 호출되면 호출에 대한 인수는 배열과 같은 &quot;변수&quot; &lt;a href=&quot;../../functions/arguments&quot;&gt;인수에 유지&lt;/a&gt; 됩니다. 예를 들어, &quot;myFn (a, b, c)&quot;호출에서 myFn 본문의 인수는 (a, b, c)에 해당하는 3 개의 배열 유사 요소를 포함합니다. 후크로 프로토 타입을 수정하는 경우 함수에서 apply ()를 호출하여이 &amp;amp; 인수 (호출 상태)를 현재 동작에 전달하면됩니다. 이 패턴은 Node.prototype, Function.prototype 등과 같은 모든 프로토 타입에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cd6a38f481f6ce6cb7f51dea1c51f7b68b7b143" translate="yes" xml:space="preserve">
          <source>When a function is called, the arguments to the call are held in the array-like &quot;variable&quot; &lt;a href=&quot;../functions/arguments&quot;&gt;arguments&lt;/a&gt;. For example, in the call &lt;code&gt;myFn(a, b, c)&lt;/code&gt;, the arguments within &lt;code&gt;myFn&lt;/code&gt;'s body will contain 3 array-like elements corresponding to &lt;code&gt;(a, b, c)&lt;/code&gt;.</source>
          <target state="translated">함수가 호출되면 호출에 대한 인수가 배열과 같은 &quot;변수&quot; &lt;a href=&quot;../functions/arguments&quot;&gt;인수에 보관&lt;/a&gt; 됩니다. 예를 들어 &lt;code&gt;myFn(a, b, c)&lt;/code&gt; 호출에서 &lt;code&gt;myFn&lt;/code&gt; 본문 내의 인수 에는 &lt;code&gt;(a, b, c)&lt;/code&gt; 해당하는 3 개의 배열 유사 요소가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="9f5c86afd59f1929f2470b136a17cb9ec01bf21f" translate="yes" xml:space="preserve">
          <source>When a function is used as a constructor (with the &lt;a href=&quot;new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; keyword), its &lt;code&gt;this&lt;/code&gt; is bound to the new object being constructed.</source>
          <target state="translated">함수가 (와 생성자로서 사용하는 경우에는 &lt;a href=&quot;new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 키워드)는 &lt;code&gt;this&lt;/code&gt; 새로운 객체가 생성되고 결합된다.</target>
        </trans-unit>
        <trans-unit id="8de0bad7dd92a233c21bcf01e6b748b81fa43bad" translate="yes" xml:space="preserve">
          <source>When a function is used as an event handler, its &lt;code&gt;this&lt;/code&gt; is set to the element on which the listener is placed (some browsers do not follow this convention for listeners added dynamically with methods other than &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">함수는 이벤트 핸들러로서 사용하는 경우, 그 &lt;code&gt;this&lt;/code&gt; 청취자가 배치되어있는 요소에 설정된다 (일부 브라우저 이외의 방법으로 동적으로 추가 리스너 협약 따르지 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt; &lt;code&gt;addEventListener()&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="827db5617a07e1bc83cbbf68125bec5e816787c3" translate="yes" xml:space="preserve">
          <source>When a function is used as an event handler, its &lt;code&gt;this&lt;/code&gt; is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">함수가 이벤트 핸들러로 사용하는 경우, 그 &lt;code&gt;this&lt;/code&gt; 이벤트가 발사 요소로 설정됩니다 (일부 브라우저 이외의 방법으로 동적으로 추가 된 청취자에 대한이 규칙 따르지 않는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt; &lt;code&gt;addEventListener()&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="fdf50a81297c2366a07db4501727452f4ccadd5a" translate="yes" xml:space="preserve">
          <source>When a generator is finished, subsequent &lt;code&gt;next()&lt;/code&gt; calls will not execute any of that generator's code, they will just return an object of this form: &lt;code&gt;{value: undefined, done: true}&lt;/code&gt;.</source>
          <target state="translated">생성기가 완료되면 후속 &lt;code&gt;next()&lt;/code&gt; 호출은 해당 생성기의 코드를 실행하지 않고 &lt;code&gt;{value: undefined, done: true}&lt;/code&gt; 형식의 객체 만 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3af1531783783ee5d0832a4b4e64b4886b45cf81" translate="yes" xml:space="preserve">
          <source>When a generator is finished, subsequent &lt;code&gt;next&lt;/code&gt; calls will not execute any of that generator's code, they will just return an object of this form: &lt;code&gt;{value: undefined, done: true}&lt;/code&gt;.</source>
          <target state="translated">생성기가 완료되면 이후의 &lt;code&gt;next&lt;/code&gt; 호출은 해당 생성자의 코드를 실행하지 않으며 &lt;code&gt;{value: undefined, done: true}&lt;/code&gt; 형식의 객체 만 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0bf258f3df79b96ae9c390090569c9b163176dca" translate="yes" xml:space="preserve">
          <source>When a non-strict function &lt;strong&gt;does&lt;/strong&gt; contain rest, default, or destructured parameters, then the values in the &lt;code&gt;arguments&lt;/code&gt; object &lt;strong&gt;do not&lt;/strong&gt; track the values of the arguments. Instead, they reflect the arguments provided when the function was called:</source>
          <target state="translated">엄격 &lt;strong&gt;하지&lt;/strong&gt; 않은 함수에 rest, default 또는 destructured 매개 변수 &lt;strong&gt;가&lt;/strong&gt; 포함되어 있으면 &lt;code&gt;arguments&lt;/code&gt; 객체 의 값이 인수 값을 추적 &lt;strong&gt;하지 않습니다&lt;/strong&gt; . 대신, 함수가 호출 될 때 제공된 인수를 반영합니다.</target>
        </trans-unit>
        <trans-unit id="8dac29556cd94c74fd383d38d328c4d37042fc32" translate="yes" xml:space="preserve">
          <source>When a property is marked as non-configurable, &lt;code&gt;delete&lt;/code&gt; won't have any effect, and will return &lt;code&gt;false&lt;/code&gt;. In strict mode this will raise a &lt;code&gt;SyntaxError&lt;/code&gt;.</source>
          <target state="translated">속성을 구성 할 수없는 것으로 표시하면 &lt;code&gt;delete&lt;/code&gt; 는 아무런 영향을 미치지 않으며 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다. 엄격 모드에서는 &lt;code&gt;SyntaxError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="6de26a10ac7887706ed2547e09d810036d94f142" translate="yes" xml:space="preserve">
          <source>When a property is marked as non-configurable, &lt;code&gt;delete&lt;/code&gt; won't have any effect, and will return &lt;code&gt;false&lt;/code&gt;. In strict mode this will raise a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">속성이 구성 할 수없는 것으로 표시되면 &lt;code&gt;delete&lt;/code&gt; 는 아무 효과가 없으며 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다. 엄격 모드에서는 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="9001787bc78b5a739f6abcef298c63a813005132" translate="yes" xml:space="preserve">
          <source>When a regex has the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;global flag&lt;/a&gt; set, &lt;code&gt;test()&lt;/code&gt; will advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; of the regex. (&lt;a href=&quot;exec&quot;&gt;&lt;code&gt;RegExp.prototype.exec()&lt;/code&gt;&lt;/a&gt; also advances the &lt;code&gt;lastIndex&lt;/code&gt; property.)</source>
          <target state="translated">정규식에 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2&quot;&gt;전역 플래그가&lt;/a&gt; 설정 되어 있으면 &lt;code&gt;test()&lt;/code&gt; 는 정규식 의 &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; 를 앞 당깁니다. ( &lt;a href=&quot;exec&quot;&gt; &lt;code&gt;RegExp.prototype.exec()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;lastIndex&lt;/code&gt; 속성 도 향상시킵니다 .)</target>
        </trans-unit>
        <trans-unit id="36615bffa2220f2be681e6f5d574bc4c7a1dc6b6" translate="yes" xml:space="preserve">
          <source>When a single, unconditional &lt;code&gt;catch&lt;/code&gt; clause is used, the &lt;code&gt;catch&lt;/code&gt; block is entered when any exception is thrown. For example, when the exception occurs in the following code, control transfers to the &lt;code&gt;catch&lt;/code&gt; clause.</source>
          <target state="translated">단일의 무조건 &lt;code&gt;catch&lt;/code&gt; 절이 사용될 때 예외가 발생하면 &lt;code&gt;catch&lt;/code&gt; 블록이 입력됩니다. 예를 들어, 다음 코드에서 예외가 발생하면 제어는 &lt;code&gt;catch&lt;/code&gt; 절로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="f4c278dd38e2da16f2fc4ed295fa46fdb5f51e34" translate="yes" xml:space="preserve">
          <source>When a static or prototype method is called without a value for &lt;a href=&quot;operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt;, such as by assigning the method to a variable and then calling it, the &lt;code&gt;this&lt;/code&gt; value will be &lt;code&gt;undefined&lt;/code&gt; inside the method. This behavior will be the same even if the &lt;a href=&quot;strict_mode&quot;&gt;&lt;code&gt;&quot;use strict&quot;&lt;/code&gt;&lt;/a&gt; directive isn't present, because code within the &lt;code&gt;class&lt;/code&gt; body's syntactic boundary is always executed in strict mode.</source>
          <target state="translated">메서드를 변수에 할당 한 다음 호출하는 것과 같이 &lt;a href=&quot;operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; 에&lt;/a&gt; 대한 값없이 정적 또는 프로토 타입 메서드 를 호출하면 &lt;code&gt;this&lt;/code&gt; 값은 메서드 내에서 &lt;code&gt;undefined&lt;/code&gt; . 이 동작은 &lt;a href=&quot;strict_mode&quot;&gt; &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; &lt;/a&gt; 지시문이없는 경우에도 동일 합니다. &lt;code&gt;class&lt;/code&gt; 본문의 구문 경계 내에있는 코드 는 항상 엄격 모드에서 실행 되기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="754f04a903d205e8befb7e425f8e0abae32114de" translate="yes" xml:space="preserve">
          <source>When a static or prototype method is called without a value for &lt;em&gt;this&lt;/em&gt;, the &lt;em&gt;this&lt;/em&gt; value will be &lt;code&gt;undefined&lt;/code&gt; inside the method. This behavior will be the same even if the &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive isn't present, because code within the &lt;code&gt;class&lt;/code&gt; body's syntactic boundary is always executed in strict mode.</source>
          <target state="translated">&lt;em&gt;this에&lt;/em&gt; 대한 값없이 정적 또는 프로토 타입 메소드를 호출 하면 &lt;em&gt;이&lt;/em&gt; 값이 메소드 내에서 &lt;code&gt;undefined&lt;/code&gt; . &lt;code&gt;class&lt;/code&gt; 본문의 구문 경계 내의 코드 는 항상 엄격 모드로 실행 되므로 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 지시문이없는 경우에도이 동작은 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="1fcb613d93697c0a1719836f81b6f96ffca6c11f" translate="yes" xml:space="preserve">
          <source>When a value is assigned to the property name (this.name = name;) JavaScript needs to set that property. When this happens, the setter function is triggered.</source>
          <target state="translated">속성 이름에 값이 할당되면 (this.name = name;) JavaScript는 해당 속성을 설정해야합니다. 이 경우 setter 기능이 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="0e6fbf4c1276a4e0854143d9918e3137304eb0ee" translate="yes" xml:space="preserve">
          <source>When a value is simply returned from within a &lt;code&gt;then&lt;/code&gt; handler, it will effectively return &lt;code&gt;Promise.resolve(&amp;lt;value returned by whichever handler was called&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; 핸들러 에서 값이 반환 &lt;code&gt;Promise.resolve(&amp;lt;value returned by whichever handler was called&amp;gt;)&lt;/code&gt; 을 효과적으로 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ca4d9f32ca7e30739d42845bcfe6fe53dad17e49" translate="yes" xml:space="preserve">
          <source>When adding &lt;code&gt;'use strict';&lt;/code&gt;, the following cases will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; before the script is executing:</source>
          <target state="translated">&lt;code&gt;'use strict';&lt;/code&gt; 추가 할 때 ; 스크립트가 실행되기 전에 다음과 같은 경우 &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; 가&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2dd0f86b8f00cb026fff6920349bd1c5cbfcb1da" translate="yes" xml:space="preserve">
          <source>When altering the behavior of existing &lt;code&gt;Object.prototype&lt;/code&gt; methods, consider injecting code by wrapping your extension before or after the existing logic. For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else's extension is executed.</source>
          <target state="translated">기존 &lt;code&gt;Object.prototype&lt;/code&gt; 메서드 의 동작을 변경할 때 기존 논리 앞이나 뒤에 확장을 래핑하여 코드를 삽입하는 것이 좋습니다. 예를 들어,이 코드는 기본 제공 논리 또는 다른 사람의 확장이 실행되기 전에 사전 조건부로 사용자 지정 논리를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="24dea5e139e5d4c37dc76aae9b33a1b797414045" translate="yes" xml:space="preserve">
          <source>When altering the behavior of existing Object.prototype methods, consider injecting code by wrapping your extension before or after the existing logic. For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else's extension is executed.</source>
          <target state="translated">기존 Object.prototype 메소드의 동작을 변경할 때 기존 로직 전후에 확장을 랩핑하여 코드 삽입을 고려하십시오. 예를 들어,이 (추천되지 않은) 코드는 내장 논리 또는 다른 사람의 확장이 실행되기 전에 사용자 정의 논리를 사전에 실행합니다.</target>
        </trans-unit>
        <trans-unit id="f8eb1f519c9dfc61d048d60e4ec167b43b593072" translate="yes" xml:space="preserve">
          <source>When an exception is thrown in the &lt;code&gt;try&lt;/code&gt; block, &lt;em&gt;&lt;code&gt;exception_var&lt;/code&gt;&lt;/em&gt; (e.g. the &lt;code&gt;e&lt;/code&gt; in &lt;code&gt;catch (e)&lt;/code&gt;) holds the value specified by the &lt;code&gt;throw&lt;/code&gt; statement. You can use this identifier to get information about the exception that was thrown. This identifier is local to the &lt;code&gt;catch&lt;/code&gt; clause. That is, it is created when the &lt;code&gt;catch&lt;/code&gt; clause is entered, and after the &lt;code&gt;catch&lt;/code&gt; clause finishes executing, the identifier is no longer available.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 블록 에서 예외가 발생하면 &lt;em&gt; &lt;code&gt;exception_var&lt;/code&gt; &lt;/em&gt; (예 : &lt;code&gt;e&lt;/code&gt; in &lt;code&gt;catch (e)&lt;/code&gt; )는 &lt;code&gt;throw&lt;/code&gt; 문으로 지정된 값을 보유합니다 . 이 식별자를 사용하여 발생한 예외에 대한 정보를 얻을 수 있습니다. 이 식별자는 &lt;code&gt;catch&lt;/code&gt; 절에 로컬 입니다. 즉, &lt;code&gt;catch&lt;/code&gt; 절이 입력 될 때 작성 되며 &lt;code&gt;catch&lt;/code&gt; 절의 실행이 끝나면 식별자를 더 이상 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b794d6a02c7641c4b0455b12d48123fbba55c55a" translate="yes" xml:space="preserve">
          <source>When an exception is thrown in the &lt;code&gt;try&lt;/code&gt;-block, &lt;em&gt;&lt;code&gt;exception_var&lt;/code&gt;&lt;/em&gt; (i.e., the &lt;code&gt;e&lt;/code&gt; in &lt;code&gt;catch (e)&lt;/code&gt;) holds the exception value. You can use this identifier to get information about the exception that was thrown. This identifier is only available in the &lt;code&gt;catch&lt;/code&gt;-block's &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;. If you don't need the exception value, it could be omitted.</source>
          <target state="translated">예외가 던져 때 &lt;code&gt;try&lt;/code&gt; - 블록, &lt;em&gt; &lt;code&gt;exception_var&lt;/code&gt; &lt;/em&gt; (즉, &lt;code&gt;e&lt;/code&gt; 의 &lt;code&gt;catch (e)&lt;/code&gt; ) 예외 값을 보유하고 있습니다. 이 식별자를 사용하여 발생한 예외에 대한 정보를 얻을 수 있습니다. 이 식별자는 &lt;code&gt;catch&lt;/code&gt; 블록의 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;범위&lt;/a&gt; 에서만 사용할 수 있습니다 . 예외 값이 필요하지 않으면 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bd2f6f2698e6164d709733fd82e7fd7e003a3eb" translate="yes" xml:space="preserve">
          <source>When an expression exists after a valid &lt;code&gt;return&lt;/code&gt; statement, a warning is given to indicate that the code after the &lt;code&gt;return&lt;/code&gt; statement is unreachable, meaning it can never be run.</source>
          <target state="translated">표현식이 유효한 후 존재하는 경우 &lt;code&gt;return&lt;/code&gt; 문, 경고가 후 코드를 나타 내기 위해 주어진 &lt;code&gt;return&lt;/code&gt; 이 실행되지 않을 수 있음을 의미, 문이 도달 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bb0ff1002ee4c47b8a3480265f2da081f6bc262f" translate="yes" xml:space="preserve">
          <source>When applying compatibility normalization it's important to consider what you intend to do with the strings, since the normalized form may not be appropriate for all applications. In the example above the normalization is appropriate for search, because it enables a user to find the string by searching for &lt;code&gt;&quot;f&quot;&lt;/code&gt;. But it may not be appropriate for display, because the visual representation is different.</source>
          <target state="translated">호환성 정규화를 적용 할 때는 정규화 된 형식이 모든 응용 프로그램에 적합하지 않을 수 있으므로 문자열로 수행 할 작업을 고려하는 것이 중요합니다. 위의 예에서 정규화는 사용자가 &lt;code&gt;&quot;f&quot;&lt;/code&gt; 를 검색하여 문자열을 찾을 수 있기 때문에 검색에 적합합니다 . 그러나 시각적 표현이 다르기 때문에 디스플레이에 적합하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0a1f6e25dd4b3d3d70cae80df44a55c86d29543" translate="yes" xml:space="preserve">
          <source>When bound function is called, it calls internal method&lt;strong&gt; [[Call]]&lt;/strong&gt; on &lt;strong&gt;[[BoundTargetFunction]], &lt;/strong&gt;with following arguments &lt;strong&gt;Call(&lt;em&gt;boundThis&lt;/em&gt;, &lt;em&gt;args&lt;/em&gt;).&lt;/strong&gt; Where, &lt;strong&gt;&lt;em&gt;boundThis &lt;/em&gt;&lt;/strong&gt;is &lt;strong&gt;[[BoundThis]]&lt;/strong&gt;, &lt;em&gt;&lt;strong&gt;args &lt;/strong&gt;&lt;/em&gt;is &lt;strong&gt;[[BoundArguments]]&lt;/strong&gt; followed by the arguments passed by the function call.</source>
          <target state="translated">바운드 함수가 호출되면 다음 인수 인 &lt;strong&gt;Call ( &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;boundThis&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; , &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;args&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; )&lt;/strong&gt; 과 함께 &lt;strong&gt;[[BoundTargetFunction]]에서&lt;/strong&gt; 내부 메소드 &lt;strong&gt;[[Call]]&lt;/strong&gt; 을 &lt;strong&gt;호출 &lt;/strong&gt;&lt;strong&gt;합니다. &lt;/strong&gt;여기서, &lt;strong&gt;&lt;em&gt;boundThis이&lt;/em&gt;&lt;/strong&gt; 있다 &lt;strong&gt;[BoundThis] []&lt;/strong&gt; , &lt;em&gt;&lt;strong&gt;인수가&lt;/strong&gt;&lt;/em&gt; 있다 &lt;strong&gt;[BoundArguments는]&lt;/strong&gt; 함수 호출에 의해 전달되는 인수 하였다.&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2fa57d92f2b1d0c57672adb2010e986a6a11349" translate="yes" xml:space="preserve">
          <source>When called in a non-constructor context, &lt;code&gt;Object&lt;/code&gt; behaves identically to &lt;code&gt;new Object()&lt;/code&gt;.</source>
          <target state="translated">생성자가 아닌 컨텍스트에서 호출되면 &lt;code&gt;Object&lt;/code&gt; 는 &lt;code&gt;new Object()&lt;/code&gt; 동일하게 동작합니다 .</target>
        </trans-unit>
        <trans-unit id="c45cbc0f99c0a40dca0a1833e10d6052bf8be295" translate="yes" xml:space="preserve">
          <source>When called on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, for example, &lt;code&gt;String.prototype.toUpperCase.call(undefined)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 에서 호출되는 경우 (예 : &lt;code&gt;String.prototype.toUpperCase.call(undefined)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d42ecec93e09021c6d947265107f5e363571b3e" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;&lt;var&gt;buffer&lt;/var&gt;&lt;/code&gt;, and optionally a &lt;code&gt;&lt;var&gt;byteOffset&lt;/var&gt;&lt;/code&gt; and a &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; argument, a new typed array view is created that views the specified &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;&lt;var&gt;byteOffset&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of &lt;code&gt;&lt;var&gt;buffer&lt;/var&gt;&lt;/code&gt; is viewed; if only &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; is omitted, the remainder of &lt;code&gt;&lt;var&gt;buffer&lt;/var&gt;&lt;/code&gt; is viewed.</source>
          <target state="translated">로 호출 할 때 &lt;code&gt;&lt;var&gt;buffer&lt;/var&gt;&lt;/code&gt; , 및 임의로 &lt;code&gt;&lt;var&gt;byteOffset&lt;/var&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 인수 새로운 형식화 된 배열 뷰 뷰는 지정된 것으로 만들어 &lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;&lt;var&gt;byteOffset&lt;/var&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 매개 변수는 입력 된 어레이 뷰에 의해 노출 될 메모리 영역을 지정. 둘 다 생략하면 모든 &lt;code&gt;&lt;var&gt;buffer&lt;/var&gt;&lt;/code&gt; 가 표시됩니다. &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 만 생략하면 나머지 &lt;code&gt;&lt;var&gt;buffer&lt;/var&gt;&lt;/code&gt; 가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f6778c7bfa449116dc6be2d6505848378361d502" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; argument, an internal array buffer is created in memory, of size &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt;&lt;em&gt; multiplied by &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt;&lt;/em&gt; bytes, containing zeros.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 인수를 사용하여 호출하면 0을 포함하는 &lt;em&gt; &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; &lt;/em&gt; 바이트를 &lt;em&gt;곱한&lt;/em&gt; 크기 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 의 내부 배열 버퍼가 메모리에 생성 됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="480f55670d2a3d9bcb889fa0cfe5b80525aa5464" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;buffer&lt;/code&gt;, and optionally a &lt;code&gt;byteOffset&lt;/code&gt; and a &lt;code&gt;length&lt;/code&gt; argument, a new typed array view is created that views the specified &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of &lt;code&gt;buffer&lt;/code&gt; is viewed; if only &lt;code&gt;length&lt;/code&gt; is omitted, the remainder of &lt;code&gt;buffer&lt;/code&gt; is viewed.</source>
          <target state="translated">로 호출 할 때 &lt;code&gt;buffer&lt;/code&gt; , 및 임의로 &lt;code&gt;byteOffset&lt;/code&gt; 및 &lt;code&gt;length&lt;/code&gt; 인수 새로운 형식화 된 배열 뷰 뷰는 지정된 것으로 만들어 &lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;byteOffset&lt;/code&gt; 와 &lt;code&gt;length&lt;/code&gt; 매개 변수는 입력 된 어레이 뷰에 의해 노출 될 메모리 영역을 지정. 둘 다 생략하면 모든 &lt;code&gt;buffer&lt;/code&gt; 가 표시됩니다. &lt;code&gt;length&lt;/code&gt; 만 생략하면 나머지 &lt;code&gt;buffer&lt;/code&gt; 가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6b66b1b26da86f54f2d85e2b1b7e352401ab639d" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;length&lt;/code&gt; argument, an internal array buffer is created in memory, of size &lt;em&gt;length multiplied by BYTES_PER_ELEMENT&lt;/em&gt; bytes, containing zeros.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 인수를 사용하여 호출하면 0에 포함 &lt;em&gt;된 BYTES_PER_ELEMENT&lt;/em&gt; 바이트를 &lt;em&gt;곱한&lt;/em&gt; 크기의 &lt;em&gt;길이&lt;/em&gt; 로 내부 배열 버퍼가 메모리에 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="ad7abc1659621f65bd139111aa3b7fb73eecc89d" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;typedArray&lt;/code&gt; argument, which can be an object of any of the typed array types (such as &lt;code&gt;Int32Array&lt;/code&gt;), the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; gets copied into a new typed array. Each value in &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;typedArray&lt;/code&gt; 인수 (예 : &lt;code&gt;Int32Array&lt;/code&gt; ) 의 개체가 될 수 있는 typedArray 인수를 사용하여 호출 하면 &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 가 새 형식화 된 배열로 복사됩니다. &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 의 각 값 은 새 배열로 복사되기 전에 생성자의 해당 유형으로 변환됩니다. 새 유형 배열의 길이는 &lt;code&gt;&lt;var&gt;typedArray&lt;/var&gt;&lt;/code&gt; 인수 의 길이와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="f4a01aa6745ceb790a15b401ce2371215524e86a" translate="yes" xml:space="preserve">
          <source>When called with a &lt;code&gt;typedArray&lt;/code&gt; argument, which can be an object of any of the typed array types (such as &lt;code&gt;Int32Array&lt;/code&gt;), the &lt;code&gt;typedArray&lt;/code&gt; gets copied into a new typed array. Each value in &lt;code&gt;typedArray&lt;/code&gt; is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the &lt;code&gt;typedArray&lt;/code&gt; argument.</source>
          <target state="translated">유형이 지정된 배열 유형 (예 : &lt;code&gt;Int32Array&lt;/code&gt; ) 의 객체 일 수 있는 &lt;code&gt;typedArray&lt;/code&gt; 인수를 사용하여 호출 하면 &lt;code&gt;typedArray&lt;/code&gt; 가 새로운 유형의 배열로 복사됩니다. &lt;code&gt;typedArray&lt;/code&gt; 의 각 값 은 새 배열로 복사되기 전에 해당 유형의 생성자로 변환됩니다. 새로운 타입의 배열의 길이는 &lt;code&gt;typedArray&lt;/code&gt; 인수 의 길이와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="4615504485ccbed026732920e1001228fad09f71" translate="yes" xml:space="preserve">
          <source>When called with an &lt;code&gt;&lt;var&gt;object&lt;/var&gt;&lt;/code&gt; argument, a new typed array is created as if by the &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.from()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;object&lt;/var&gt;&lt;/code&gt; 인수를 사용하여 호출 하면 &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;.from()&lt;/code&gt; 메서드 에서처럼 새 유형 배열이 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="65612a3309ec2c1ea8f3fd5fa8380c5307a38064" translate="yes" xml:space="preserve">
          <source>When called with an &lt;code&gt;object&lt;/code&gt; argument, a new typed array is created as if by the &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 인수 와 함께 호출 하면 &lt;code&gt;&lt;em&gt;TypedArray&lt;/em&gt;.from()&lt;/code&gt; 메서드 에서처럼 새로운 형식의 배열이 만들어집니다 .</target>
        </trans-unit>
        <trans-unit id="f29dcd984b9a7fb1349ad4ddb19c41e43536ea5f" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../reflect/defineproperty&quot;&gt;&lt;code&gt;Reflect.defineProperty()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;descriptor&lt;/code&gt; passed to &lt;code&gt;defineProperty&lt;/code&gt; trap has one restriction - only following properties are usable, nonstandard properties will be ignored:</source>
          <target state="translated">&lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../reflect/defineproperty&quot;&gt; &lt;code&gt;Reflect.defineProperty()&lt;/code&gt; &lt;/a&gt; 호출 할 때 &lt;code&gt;defineProperty&lt;/code&gt; 트랩에 전달 된 &lt;code&gt;descriptor&lt;/code&gt; 에는 한 가지 제한 사항이 있습니다. 다음 특성 만 사용할 수 있으며 비표준 특성은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="164ca91b3b90224d15b72b241ebe09d2d6dff26b" translate="yes" xml:space="preserve">
          <source>When calling a constructor with &lt;a href=&quot;new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; it's not possible to &lt;strong&gt;directly&lt;/strong&gt; use an array and &lt;code&gt;apply()&lt;/code&gt; (&lt;code&gt;apply()&lt;/code&gt; does a &lt;code&gt;[[Call]]&lt;/code&gt; and not a &lt;code&gt;[[Construct]]&lt;/code&gt;). However, an array can be easily used with &lt;code&gt;new&lt;/code&gt; thanks to spread syntax:</source>
          <target state="translated">와 생성자 호출 할 때 &lt;a href=&quot;new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 에 그것은 불가능 &lt;strong&gt;직접&lt;/strong&gt; 배열을 사용하여 &lt;code&gt;apply()&lt;/code&gt; ( &lt;code&gt;apply()&lt;/code&gt; 수행하는 &lt;code&gt;[[Call]]&lt;/code&gt; 가 아닌 &lt;code&gt;[[Construct]]&lt;/code&gt; ). 그러나 스프레드 구문 덕분에 &lt;code&gt;new&lt;/code&gt; 와 함께 배열을 쉽게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f1b55e9d5c398fb3c9268884017bf143b3953ab" translate="yes" xml:space="preserve">
          <source>When calling a constructor with &lt;code&gt;new&lt;/code&gt;, it's not possible to &lt;strong&gt;directly&lt;/strong&gt; use an array and &lt;code&gt;apply&lt;/code&gt; (&lt;code&gt;apply&lt;/code&gt; does a &lt;code&gt;[[Call]]&lt;/code&gt; and not a &lt;code&gt;[[Construct]]&lt;/code&gt;). However, an array can be easily used with &lt;code&gt;new&lt;/code&gt; thanks to spread syntax:</source>
          <target state="translated">와 생성자 호출 할 때 &lt;code&gt;new&lt;/code&gt; ,이 수는 없습니다 &lt;strong&gt;직접&lt;/strong&gt; 배열을 사용하고 &lt;code&gt;apply&lt;/code&gt; ( &lt;code&gt;apply&lt;/code&gt; 않습니다 &lt;code&gt;[[Call]]&lt;/code&gt; 와하지 &lt;code&gt;[[Construct]]&lt;/code&gt; ). 그러나 확산 구문 덕분에 배열을 &lt;code&gt;new&lt;/code&gt; 것과 함께 쉽게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="829a732fe2ba31465b1866fd100163c023907142" translate="yes" xml:space="preserve">
          <source>When checking for &lt;code&gt;Array&lt;/code&gt; instance, &lt;code&gt;Array.isArray&lt;/code&gt; is preferred over &lt;code&gt;instanceof&lt;/code&gt; because it works through &lt;code&gt;iframes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 인스턴스를 확인할 때 &lt;code&gt;Array.isArray&lt;/code&gt; 는 &lt;code&gt;iframes&lt;/code&gt; 통해 작동하기 때문에 &lt;code&gt;instanceof&lt;/code&gt; 보다 선호 됩니다.</target>
        </trans-unit>
        <trans-unit id="c810bbabef81f8c6d763de3d3ed3fd437b89c17b" translate="yes" xml:space="preserve">
          <source>When checking for &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, beware of the &lt;a href=&quot;../operators/comparison_operators&quot;&gt;differences between equality (==) and identity (===) operators&lt;/a&gt;, as the former performs type-conversion.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 를 확인할 때 전자가 형식 변환을 수행 &lt;a href=&quot;../operators/comparison_operators&quot;&gt;하므로 항등 (==) 연산자와 항등 (===) 연산자&lt;/a&gt; 의 차이점에 주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="e19cdbf310bd55195065d928246b5d7abe10f633" translate="yes" xml:space="preserve">
          <source>When checking for &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, beware of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;differences between equality (==) and identity (===) operators&lt;/a&gt;, as the former performs type-conversion.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 를 확인할 때 전자 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;연산자가&lt;/a&gt; 형식 변환을 수행 하므로 같음 (==) 및 ID (===) 연산자 의 차이점에 주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb817b3ade0ac387d420c7fa20d43d45c1488402" translate="yes" xml:space="preserve">
          <source>When comparing a number and a string, the string is converted to a number value. JavaScript attempts to convert the string numeric literal to a &lt;code&gt;Number&lt;/code&gt; type value. First, a mathematical value is derived from the string numeric literal. Next, this value is rounded to nearest &lt;code&gt;Number&lt;/code&gt; type value.</source>
          <target state="translated">숫자와 문자열을 비교할 때 문자열은 숫자 값으로 변환됩니다. JavaScript는 문자열 숫자 리터럴을 &lt;code&gt;Number&lt;/code&gt; 유형 값 으로 변환하려고 합니다. 먼저, 수학 값은 문자열 숫자 리터럴에서 파생됩니다. 다음으로이 값은 가장 가까운 &lt;code&gt;Number&lt;/code&gt; 유형 값으로 반올림됩니다 .</target>
        </trans-unit>
        <trans-unit id="6b998eb423464e5443bc464f2a4fa7bc4658bbe8" translate="yes" xml:space="preserve">
          <source>When comparing large numbers of strings, such as in sorting large arrays, it is better to create an &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../collator/compare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">큰 배열 정렬과 같이 많은 수의 문자열을 비교할 때는 &lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt; 객체 를 만들고 &lt;a href=&quot;../collator/compare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt; 속성에서 제공하는 함수를 사용 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="1fba2f233481ae6db2d320bc02abd4df9a6a3944" translate="yes" xml:space="preserve">
          <source>When comparing large numbers of strings, such as in sorting large arrays, it is better to create an &lt;a href=&quot;../intl/collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../intl/collator/compare&quot;&gt;&lt;code&gt;compare&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">큰 배열 정렬과 같이 많은 수의 문자열을 비교할 때는 &lt;a href=&quot;../intl/collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; &lt;/a&gt; 개체 를 만들고 &lt;a href=&quot;../intl/collator/compare&quot;&gt; &lt;code&gt;compare&lt;/code&gt; &lt;/a&gt; 속성에서 제공하는 함수를 사용 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="c2ecefcafbf7143f87fe3ad4276f62e616d8be92" translate="yes" xml:space="preserve">
          <source>When copy pasting code from external sources, there might be invalid characters. Watch out!</source>
          <target state="translated">외부 소스에서 붙여 넣기 코드를 복사 할 때 유효하지 않은 문자가있을 수 있습니다. 조심해!</target>
        </trans-unit>
        <trans-unit id="92aa3f970f388cdea751a9c03b575d4726043cbf" translate="yes" xml:space="preserve">
          <source>When creating a function inline, you can pass it once, instead of being forced to either declare it twice, or create a variable for it</source>
          <target state="translated">함수를 인라인으로 만들 때 두 번 선언하거나 변수를 만들지 않고 한 번만 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb29ed3782eb6e8c7b9a47c7152ab085c4ee55e4" translate="yes" xml:space="preserve">
          <source>When creating an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;../global_objects/arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; which has a length which is either negative or larger or equal to 2&lt;sup&gt;32&lt;/sup&gt;, or</source>
          <target state="translated">음수 또는 길이가 2 &lt;sup&gt;32&lt;/sup&gt; 인 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 를 만들 때 또는&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0a3f084abba28b7f74872d722bda68eb9cc74887" translate="yes" xml:space="preserve">
          <source>When creating an instance of a &lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;&lt;/code&gt; (e.g. &lt;code&gt;Int8Array&lt;/code&gt;), an array buffer is created internally in memory or, if an &lt;code&gt;ArrayBuffer&lt;/code&gt; object is given as constructor argument, then this is used instead. The buffer address is saved as an internal property of the instance and all the methods of &lt;code&gt;%&lt;var&gt;TypedArray&lt;/var&gt;%.prototype&lt;/code&gt;, i.e. set value and get value etc., operate on that array buffer address.</source>
          <target state="translated">&lt;code&gt;&lt;var&gt;TypedArray&lt;/var&gt;&lt;/code&gt; 의 인스턴스 (예 : &lt;code&gt;Int8Array&lt;/code&gt; )를 만들 때 배열 버퍼가 메모리에 내부적으로 생성되거나 &lt;code&gt;ArrayBuffer&lt;/code&gt; 객체가 생성자 인수로 제공되면 대신 사용됩니다. 버퍼 주소는 인스턴스의 내부 속성으로 저장되며 &lt;code&gt;%&lt;var&gt;TypedArray&lt;/var&gt;%.prototype&lt;/code&gt; 의 모든 메서드 ( 즉, 값 설정 및 값 가져 오기 등)는 해당 배열 버퍼 주소에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="b69e8046aa7fccd7b5d969872d4384fc6a0c4007" translate="yes" xml:space="preserve">
          <source>When creating an instance of a &lt;em&gt;TypedArray&lt;/em&gt; (e.g. &lt;code&gt;Int8Array&lt;/code&gt;), an array buffer is created internally in memory or, if an &lt;code&gt;ArrayBuffer&lt;/code&gt; object is given as constructor argument, then this is used instead. The buffer address is saved as an internal property of the instance and all the methods of %&lt;code&gt;TypedArray&lt;/code&gt;%.&lt;code&gt;prototype&lt;/code&gt;, i.e. set value and get value etc., operate on that array buffer address.</source>
          <target state="translated">&lt;em&gt;TypedArray&lt;/em&gt; 의 인스턴스 (예 : &lt;code&gt;Int8Array&lt;/code&gt; )를 만들 때 배열 버퍼가 내부적으로 메모리에 생성되거나 &lt;code&gt;ArrayBuffer&lt;/code&gt; 객체가 생성자 인수로 제공되면 대신 사용됩니다. 버퍼 주소는 인스턴스의 내부 속성 및 % &lt;code&gt;TypedArray&lt;/code&gt; % 의 모든 메서드로 저장됩니다 . &lt;code&gt;prototype&lt;/code&gt; , 즉 설정 값 및 값 가져 오기 등은 해당 배열 버퍼 주소에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="848fe3152ea8cf2213725f8d8f0cb1c72c7aeff9" translate="yes" xml:space="preserve">
          <source>When creating objects with the &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; syntax, a colon (&lt;code&gt;:&lt;/code&gt;) separates keys and values for the object's properties.</source>
          <target state="translated">과 오브젝트 생성시 &lt;a href=&quot;../operators/object_initializer&quot;&gt;오브젝트 초기화&lt;/a&gt; 구문을 콜론 ( &lt;code&gt;:&lt;/code&gt; ), 오브젝트의 속성에 대한 키와 값을 분리한다.</target>
        </trans-unit>
        <trans-unit id="811ae55de8ff23ccbb206ac9028d18485810a132" translate="yes" xml:space="preserve">
          <source>When creating your own class, JavaScript defaults to the &quot;Object&quot; tag:</source>
          <target state="translated">자신의 클래스를 만들 때 JavaScript는 기본적으로 &quot;Object&quot;태그로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="115da9b5a1b5c0a8d85c307063ade15b5ea130a8" translate="yes" xml:space="preserve">
          <source>When deconstructing an object, if a property is not accessed in itself, it will continue to look up along the prototype chain.</source>
          <target state="translated">객체를 분해 할 때 속성 자체에 액세스하지 않으면 프로토 타입 체인을 따라 계속 조회합니다.</target>
        </trans-unit>
        <trans-unit id="80a35fd88284260574b82c190c6810c0f4d57809" translate="yes" xml:space="preserve">
          <source>When defining non-writable properties with e.g. &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;super&lt;/code&gt; cannot overwrite the value of the property.</source>
          <target state="translated">예와 기록 불가능한 특성을 정의하면 &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; 를&lt;/a&gt; , &lt;code&gt;super&lt;/code&gt; 속성 값을 겹쳐 쓸 수 없다.</target>
        </trans-unit>
        <trans-unit id="f8b662c2041edd35c3fb67e22f3c61773eddc7f6" translate="yes" xml:space="preserve">
          <source>When destructuring an array, you can unpack and assign the remaining part of it to a variable using the rest pattern:</source>
          <target state="translated">배열을 구조 해제 할 때 나머지 패턴을 풀고 나머지 패턴을 사용하여 변수에 변수를 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3a2e8f2f363d4f7226449fe6785f1e5855fbb9e" translate="yes" xml:space="preserve">
          <source>When doing so:</source>
          <target state="translated">그럴 때 :</target>
        </trans-unit>
        <trans-unit id="05d53519e191f9772c933557ce0989e9f259738b" translate="yes" xml:space="preserve">
          <source>When formatting large numbers of dates, it is better to create an &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../datetimeformat/format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">많은 수의 날짜를 형식화 할 때는 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt; 객체 를 만들고 &lt;a href=&quot;../datetimeformat/format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt; 속성에서 제공하는 함수를 사용 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="f820910b8d9c3361890d13549d8d81063476127d" translate="yes" xml:space="preserve">
          <source>When formatting large numbers of dates, it is better to create an &lt;a href=&quot;../intl/datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../intl/datetimeformat/format&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">많은 수의 날짜 형식을 지정하는 경우 &lt;a href=&quot;../intl/datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt; 개체 를 만들고 &lt;a href=&quot;../intl/datetimeformat/format&quot;&gt; &lt;code&gt;format&lt;/code&gt; &lt;/a&gt; 속성에서 제공하는 함수를 사용 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="c06d87d5802844fdfc76a3ec1fd278898196877b" translate="yes" xml:space="preserve">
          <source>When formatting large numbers of numbers, it is better to create a &lt;a href=&quot;../intl/numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../intl/numberformat/format&quot;&gt;&lt;code&gt;NumberFormat.format&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">많은 수의 숫자 서식을 지정하는 경우 &lt;a href=&quot;../intl/numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체 를 만들고 해당 &lt;a href=&quot;../intl/numberformat/format&quot;&gt; &lt;code&gt;NumberFormat.format&lt;/code&gt; &lt;/a&gt; 속성에서 제공하는 함수를 사용 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="492dc853c99f4ea76af1f43ad96a8633c1800ed2" translate="yes" xml:space="preserve">
          <source>When formatting large numbers of numbers, it is better to create a &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object and use the function provided by its &lt;a href=&quot;../numberformat/format&quot;&gt;&lt;code&gt;NumberFormat.format&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">많은 수의 서식을 지정할 때는 &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체 를 만들고 &lt;a href=&quot;../numberformat/format&quot;&gt; &lt;code&gt;NumberFormat.format&lt;/code&gt; &lt;/a&gt; 속성에서 제공하는 함수를 사용 하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="4c9117db41c166291fc133ec408f22aae4de730f" translate="yes" xml:space="preserve">
          <source>When found, &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; is removed from the string, and the substrings are returned in an array.</source>
          <target state="translated">발견되면 &lt;code&gt;&lt;var&gt;separator&lt;/var&gt;&lt;/code&gt; 가 문자열에서 제거되고 하위 문자열이 배열로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="0ebdec7da01db2f6028dbcfdb1e980aa1f6f6050" translate="yes" xml:space="preserve">
          <source>When found, &lt;code&gt;separator&lt;/code&gt; is removed from the string and the substrings are returned in an array. If &lt;code&gt;separator&lt;/code&gt; is not found or is omitted, the array contains one element consisting of the entire string. If &lt;code&gt;separator&lt;/code&gt; is an empty string, &lt;code&gt;str&lt;/code&gt; is converted to an array of characters. If &lt;code&gt;separator&lt;/code&gt; appears at the beginning or end of the string, or both, the array begins, ends, or both begins and ends, respectively, with an empty string. Thus, if the string consists solely of one instance of &lt;code&gt;separator&lt;/code&gt;, the array consists of two empty strings.</source>
          <target state="translated">찾은 경우 문자열에서 &lt;code&gt;separator&lt;/code&gt; 가 제거되고 하위 문자열이 배열로 반환됩니다. 경우 &lt;code&gt;separator&lt;/code&gt; 발견되지 않거나 생략 배열은 전체 스트링으로 구성된 하나 개의 요소를 포함한다. 경우 &lt;code&gt;separator&lt;/code&gt; 빈 문자열, &lt;code&gt;str&lt;/code&gt; 문자의 배열로 변환됩니다. 경우 &lt;code&gt;separator&lt;/code&gt; 앞이나 캐릭터, 또는 둘 모두의 단부에 나타나는 어레이는, 단부를 시작하거나, 모두 빈 문자열로 각각 시작하고 종료한다. 따라서 문자열이 &lt;code&gt;separator&lt;/code&gt; 하나의 인스턴스로만 구성된 경우 배열은 두 개의 빈 문자열로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="7f7675777c0bfc04100fd6e62d73b4f740f908cb" translate="yes" xml:space="preserve">
          <source>When functions are used only once, a common pattern is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE (Immediately Invokable Function Expression)&lt;/a&gt;.</source>
          <target state="translated">함수가 한 번만 사용되는 경우 일반적인 패턴은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE (즉시 호출 할 수없는 함수 표현식)&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="058624d9a5bcc81b74f77895cc75ba1d531aadf5" translate="yes" xml:space="preserve">
          <source>When functions are used only once, a common pattern is an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE (Immediately Invoked Function Expression)&lt;/a&gt;.</source>
          <target state="translated">함수가 한 번만 사용되는 경우 일반적인 패턴은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE (Immediately Invoked Function Expression)&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="121d1592fbace9d681e06d1f59f98a3226bf0806" translate="yes" xml:space="preserve">
          <source>When importing a default export with &lt;a href=&quot;#Dynamic_Imports&quot;&gt;dynamic imports&lt;/a&gt;, it works a bit differently. You need to destructure and rename the &quot;default&quot; key from the returned object.</source>
          <target state="translated">&lt;a href=&quot;#Dynamic_Imports&quot;&gt;동적 가져&lt;/a&gt; 오기를 사용하여 기본 내보내기를 가져올 때 약간 다르게 작동합니다. 반환 된 개체에서 &quot;기본&quot;키의 구조를 해제하고 이름을 바꿔야합니다.</target>
        </trans-unit>
        <trans-unit id="49d001cb7886b88343943eb9d2b0c82cd43ba9ad" translate="yes" xml:space="preserve">
          <source>When importing statically significantly increases your program's memory usage and there is a low likelihood that you will need the code you are importing.</source>
          <target state="translated">정적으로 가져 오면 프로그램의 메모리 사용량이 크게 증가하고 가져 오는 코드가 필요할 가능성이 낮습니다.</target>
        </trans-unit>
        <trans-unit id="50f8d82831be9a8bfc9fbdbfa9b0886d8ecc763c" translate="yes" xml:space="preserve">
          <source>When importing statically significantly slows the loading of your code and there is a low likelihood that you will need the code you are importing, or you will not need it until a later time.</source>
          <target state="translated">정적으로 임포트하면 코드로드 속도가 상당히 느려지고 임포트중인 코드가 필요할 가능성이 낮거나 나중에 필요하지 않을 가능성이 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
