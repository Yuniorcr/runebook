<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="8d8b8dea2d9ce0de3f280f55b5962027b99c2877" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 프로토 타입 객체</target>
        </trans-unit>
        <trans-unit id="bdc9a10c4ce3956b173f85c40bba998db4c15ee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Generator.&lt;/code&gt;&lt;code&gt;prototype.&lt;/code&gt;&lt;code&gt;throw()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Generator.&lt;/code&gt;&lt;code&gt;prototype.&lt;/code&gt;&lt;code&gt;throw()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0891d6d3590fe26a942df231ac1d800f8283921a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneratorFunction&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="5bba2ce005ea7df2b74168d90dfac9cb2dd446b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneratorFunction&lt;/code&gt; instances inherit methods and properties from &lt;a href=&quot;generatorfunction/prototype&quot;&gt;&lt;code&gt;GeneratorFunction.prototype&lt;/code&gt;&lt;/a&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;GeneratorFunction&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; 인스턴스는 &lt;a href=&quot;generatorfunction/prototype&quot;&gt; &lt;code&gt;GeneratorFunction.prototype&lt;/code&gt; 의&lt;/a&gt; 메소드와 속성을 상속합니다 . 모든 생성자와 마찬가지로 생성자의 프로토 타입 객체를 변경하여 모든 &lt;code&gt;GeneratorFunction&lt;/code&gt; 인스턴스 를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d810624d23160371a811a024e853a9f6209db06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneratorFunction&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; 프로토 타입 객체</target>
        </trans-unit>
        <trans-unit id="58764e98c36f21b027b0ab48ca92e8e6eb2e090a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Global()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Global()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="0d32385030ee8beec68fa3259a0cbd7cd8c4c9af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Infinity&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;, or in other words, a variable in global scope.</source>
          <target state="translated">&lt;code&gt;Infinity&lt;/code&gt; 는 &lt;em&gt;전역 개체&lt;/em&gt; 의 속성 , 즉 전역 범위의 변수입니다.</target>
        </trans-unit>
        <trans-unit id="b26969c66c648bb1313da8c471ba5b7f7ca71dee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Infinity&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;. In other words, it is a variable in global scope.</source>
          <target state="translated">&lt;code&gt;Infinity&lt;/code&gt; 는 &lt;em&gt;전역 객체&lt;/em&gt; 의 속성입니다 . 즉, 전역 범위의 변수입니다.</target>
        </trans-unit>
        <trans-unit id="110f353eead031e96bb539a5bc629776ed4c5bdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Instance()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Instance()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="bb444c4695ab21faf84ab1b82dc4792a80161b85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Instance&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Instance&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="956ab59565ef88e68fca36f322a871adad7e17f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int16Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Int16Array()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Int16Array ()</target>
        </trans-unit>
        <trans-unit id="f36c6d867c261272f02299ebc80f0e78495d2001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int16Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Int16Array&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="7244f25230b1d64ed82fca4e48ecb74ff2bd23cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32Array()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Int32Array()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="0201e094703e3aea7488fe2d7cb3ad8e0e7a6796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Int32Array()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Int32Array ()</target>
        </trans-unit>
        <trans-unit id="c869ec7a2ce18a2b725e39385b02dfd6e348fe6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Int32Array&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="2177c222e057a48cf05a04ea8aef25d1702c5d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int8Array()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Int8Array()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="8a7df20b812af35a9900b05e2b56f8c76dc94cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int8Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Int8Array()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Int8Array ()</target>
        </trans-unit>
        <trans-unit id="d3e7af3ebd23b2d2f25c50a670dc78d2217e0095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int8Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Int8Array&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="42f5628be04b5ae2baf467371e133a19c52f8e5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IteratorResult&lt;/code&gt; object instead of throwing</source>
          <target state="translated">&lt;code&gt;IteratorResult&lt;/code&gt; 던지는 대신 IteratorResult 객체</target>
        </trans-unit>
        <trans-unit id="04d666850d0c866af9e699c434b1d4de2e994096" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IteratorResult&lt;/code&gt; object returned instead of throwing</source>
          <target state="translated">&lt;code&gt;IteratorResult&lt;/code&gt; 던지는 대신 반환 된 IteratorResult 객체</target>
        </trans-unit>
        <trans-unit id="99bf142591158d5669990d515492aeb7e19db9b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSON.parse()&lt;/code&gt; does not allow trailing commas</source>
          <target state="translated">&lt;code&gt;JSON.parse()&lt;/code&gt; 는 후행 쉼표를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="792a9827e85fda5fb0f2826880070cbba653fa1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSON.stringify()&lt;/code&gt; converts a value to JSON notation representing it:</source>
          <target state="translated">&lt;code&gt;JSON.stringify()&lt;/code&gt; 는 값을 나타내는 JSON 표기법으로 값을 변환합니다.</target>
        </trans-unit>
        <trans-unit id="99d15540bd179508a1b379ec775326d57dcda4ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinkError()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;LinkError()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="f357441cbb064efb2755affac7956b95367a80c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MIN_VALUE&lt;/code&gt; has a value of approximately &lt;code&gt;5e-324&lt;/code&gt;. Values smaller than &lt;code&gt;MIN_VALUE&lt;/code&gt; (&quot;underflow values&quot;) are converted to 0.</source>
          <target state="translated">&lt;code&gt;MIN_VALUE&lt;/code&gt; 의 값은 약 &lt;code&gt;5e-324&lt;/code&gt; 입니다. &lt;code&gt;MIN_VALUE&lt;/code&gt; 보다 작은 값 ( &quot;언더 플로우 값&quot;)은 0으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="8a7df267ea0fcc210d5cbe17b20827ba4b7c7078" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Map()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Map()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="7b1e5dd0c012303db962f4607a578c791b67434a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Map()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Map()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Map ()</target>
        </trans-unit>
        <trans-unit id="8318b22aa8d141e0724c8ed13eac5cb86e604c9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Map&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="c9f74064b2f4d39f2ff9a75fab30b8b76f7760e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.asinh&lt;/code&gt; can be emulated with the following function:</source>
          <target state="translated">&lt;code&gt;Math.asinh&lt;/code&gt; 는 다음 함수로 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a7bcd8cf43ec0c6188f2699c4935f40c7e3d138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.atan2()&lt;/code&gt; is passed separate &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; arguments, and &lt;code&gt;Math.atan()&lt;/code&gt; is passed the ratio of those two arguments.</source>
          <target state="translated">&lt;code&gt;Math.atan2()&lt;/code&gt; 에는 별도의 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 인수 가 전달 되고 &lt;code&gt;Math.atan()&lt;/code&gt; 에는이 두 인수의 비율이 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="aa268387b5ee5b06e13574d8c4522eba1a94f150" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.hypot&lt;/code&gt; also avoids overflow/underflow problems if the magnitude of your numbers is very large. The largest number you can represent in JS is &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;, which is around 10&lt;sup&gt;308&lt;/sup&gt;. If your numbers are larger than about 10&lt;sup&gt;154&lt;/sup&gt;, taking the square of them will result in Infinity. For example, &lt;code&gt;Math.sqrt(1e200*1e200 + 1e200*1e200) = Infinity&lt;/code&gt;. If you use &lt;code&gt;hypot()&lt;/code&gt; instead, you get better answer: &lt;code&gt;Math.hypot(1e200, 1e200) = 1.4142...e+200&lt;/code&gt; . This is also true with very small numbers. &lt;code&gt;Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) = 0&lt;/code&gt;, but &lt;code&gt;Math.hypot(1e-200, 1e-200) = 1.4142...e-200&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Math.hypot&lt;/code&gt; 은 또한 숫자의 크기가 매우 큰 경우 오버플로 / 언더 플로 문제를 방지합니다. 만약 JS를 대표 할 수있는 가장 큰 수이다 &lt;code&gt;Number.MAX_VALUE&lt;/code&gt; 약 10, &lt;sup&gt;308&lt;/sup&gt; . 숫자가 약 &lt;sup&gt;10154&lt;/sup&gt; 보다 크면 제곱을 취하면 무한대가됩니다. 예를 들어 &lt;code&gt;Math.sqrt(1e200*1e200 + 1e200*1e200) = Infinity&lt;/code&gt; 입니다. 당신이 사용하는 경우 &lt;code&gt;hypot()&lt;/code&gt; : 대신, 당신은 더 나은 답변을 얻을 &lt;code&gt;Math.hypot(1e200, 1e200) = 1.4142...e+200&lt;/code&gt; . 이것은 매우 작은 숫자에서도 마찬가지입니다. &lt;code&gt;Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) = 0&lt;/code&gt; 이지만 &lt;code&gt;Math.hypot(1e-200, 1e-200) = 1.4142...e-200&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4380e68cdd3c6b768be71b198599bf7c90c809f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.imul()&lt;/code&gt; allows for 32-bit integer multiplication with C-like semantics. This feature is useful for projects like &lt;a href=&quot;http://en.wikipedia.org/wiki/Emscripten&quot;&gt;Emscripten&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Math.imul()&lt;/code&gt; 은 C와 유사한 의미를 가진 32 비트 정수 곱셈을 허용합니다. 이 기능은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Emscripten&quot;&gt;Emscripten&lt;/a&gt; 과 같은 프로젝트에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="109bb4285faf535e17adad3f4a8c412db543cf11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.imul()&lt;/code&gt; allows for 32-bit integer multiplication with C-like semantics. This feature is useful for projects like &lt;a href=&quot;http://en.wikipedia.org/wiki/Emscripten&quot;&gt;Emscripten&lt;/a&gt;. Because &lt;code&gt;imul()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.imul()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor). If you use normal JavaScript floating point numbers in imul, you will experience a degrade in performance. This is because of the costly conversion from a floating point to an integer for multiplication, and then converting the multiplied integer back into a floating point. The reason imul exists is because it is faster in only one (so far) circumstance: AsmJS. AsmJS allows for JIST-optimizers to more easily implement internal integers in JavaScript. Multiplying two numbers stored internally as integers (which is only possible with AsmJS) with imul is the only potential circumstance where Math.imul may prove performant in current browsers.</source>
          <target state="translated">&lt;code&gt;Math.imul()&lt;/code&gt; 은 C와 같은 의미론으로 32 비트 정수 곱셈을 허용합니다. 이 기능은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Emscripten&quot;&gt;Emscripten&lt;/a&gt; 과 같은 프로젝트에 유용합니다 . 때문에 &lt;code&gt;imul()&lt;/code&gt; 의 정적 방법입니다 &lt;code&gt;Math&lt;/code&gt; , 당신은 항상로 사용 &lt;code&gt;Math.imul()&lt;/code&gt; 보다는의 방법으로 &lt;code&gt;Math&lt;/code&gt; 만든 객체 ( &lt;code&gt;Math&lt;/code&gt; 생성자가 아닙니다). imul에서 일반 JavaScript 부동 소수점 숫자를 사용하면 성능이 저하됩니다. 이는 곱하기 위해 부동 소수점에서 정수로 비용이 많이 들어간 다음 곱한 정수를 부동 소수점으로 다시 변환하기 때문입니다. imul이 존재하는 이유는 하나의 (지금까지) 상황에서 더 빠르기 때문입니다. AsmJS. AsmJS를 사용하면 JIST 최적화 프로그램이 JavaScript에서 내부 정수를보다 쉽게 ​​구현할 수 있습니다. 내부적으로 정수로 저장된 두 숫자 (AsmJS에서만 가능)에 imul을 곱하면 Math.imul이 현재 브라우저에서 성능을 발휘할 수있는 유일한 잠재적 상황입니다.</target>
        </trans-unit>
        <trans-unit id="bf70bf8c3da6f3b076bf5d954b331a7c10f7b309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.log1p&lt;/code&gt; may also have to be polyfilled; see &lt;a href=&quot;log1p&quot;&gt;Math.log1p&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;Math.log1p&lt;/code&gt; 도 폴리 필해야 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;log1p&quot;&gt;Math.log1p&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="59e190daf89959e7871e7b6b5951cf74fc9d783a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.min()&lt;/code&gt; is often used to clip a value so that it is always less than or equal to a boundary. For instance, this</source>
          <target state="translated">&lt;code&gt;Math.min()&lt;/code&gt; 은 종종 값이 항상 경계보다 작거나 같도록 값을 자르는 데 사용됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="0651dcff17c1e704a772d61ec8c4700f697a0006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.random()&lt;/code&gt;&lt;em&gt;does not&lt;/em&gt; provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues&quot;&gt;&lt;code&gt;window.crypto.getRandomValues()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Math.random()&lt;/code&gt; &lt;em&gt;은&lt;/em&gt; 암호로 안전한 난수를 제공 &lt;em&gt;하지 않습니다&lt;/em&gt; . 보안과 관련하여 사용하지 마십시오. 대신 Web Crypto API를 사용하십시오.보다 정확하게는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues&quot;&gt; &lt;code&gt;window.crypto.getRandomValues()&lt;/code&gt; &lt;/a&gt; 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="64bc8ee2d3f73b32c8edb3a065497b5ecc220daf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math.random()&lt;/code&gt;&lt;em&gt;does not&lt;/em&gt; provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues&quot;&gt;&lt;code&gt;window.crypto.getRandomValues()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Math.random()&lt;/code&gt; &lt;em&gt;은&lt;/em&gt; 암호화 보안 난수를 제공 &lt;em&gt;하지 않습니다&lt;/em&gt; . 보안과 관련된 어떤 용도로도 사용하지 마십시오. 대신 Web Crypto API를 사용하고보다 정확하게는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues&quot;&gt; &lt;code&gt;window.crypto.getRandomValues()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="28917bb98c98a66481cdaea4a6725b931811b706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; is a built-in object that has properties and methods for mathematical constants and functions. It&amp;rsquo;s not a function object.</source>
          <target state="translated">&lt;code&gt;Math&lt;/code&gt; 는 수학 상수 및 함수에 대한 속성과 메서드가있는 기본 제공 개체입니다. 함수 객체가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="95822a9f4600d3fa0ae62a6c435caa678bb649dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.</source>
          <target state="translated">&lt;code&gt;Math&lt;/code&gt; 은 수학 상수와 함수에 대한 속성과 메서드가있는 내장 객체입니다. 함수 객체가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="0e446ee8535cb8e95880ca018ff750027d302569" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Math&lt;/code&gt; works with the &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; type. It doesn't work with &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Math&lt;/code&gt; 은 &lt;a href=&quot;number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 유형 과 함께 작동 합니다. &lt;a href=&quot;bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 에서는 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="23cd3acb4a476bbff338277d7549d718c987b643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Memory()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Memory()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="5ffd35b10bd0b6e9c0b2cc76654fa2a5107ed68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Memory&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Memory&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="4725b15ca1c5ed1d6ec0bb57a59e940770274702" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Module()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="09818648bf65bb450f878315f5e3b4a6792d37da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Module&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="9ca2a82b57690975f17141a6943191dd87af3928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, divided by any negative value except &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, is &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; 제외한 모든 음의 값으로 나눈 &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; 가 있다 &lt;a href=&quot;positive_infinity&quot;&gt; &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d9a5a069c8d5d8c0ff92afc1ec360a194365aadd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, divided by any positive value except &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, is &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; &lt;a href=&quot;positive_infinity&quot;&gt; &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; 를&lt;/a&gt; 제외한 양수 값으로 나눈 NEGATIVE_INFINITY 는 &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="03e3277c88549dd5517a511556b8dd4a34ffe917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, divided by either &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; or &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; 를 &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; 또는 &lt;a href=&quot;positive_infinity&quot;&gt; &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; &lt;/a&gt; 로 나눈 값 은 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1aed53a23cf732a01d3f8f1616323f24c81e9467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFC&lt;/code&gt; &amp;mdash; Normalization Form Canonical Composition.</source>
          <target state="translated">&lt;code&gt;NFC&lt;/code&gt; &amp;mdash; 정규화 형식 정식 구성.</target>
        </trans-unit>
        <trans-unit id="aefdfca995a5c3358970ae35e74a52c6908211f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFD&lt;/code&gt; &amp;mdash; Normalization Form Canonical Decomposition.</source>
          <target state="translated">&lt;code&gt;NFD&lt;/code&gt; &amp;mdash; 정규 분해 형식 정규 분해입니다.</target>
        </trans-unit>
        <trans-unit id="0cef8f1d2d1df7b44adaf9efe1e591c487abb5d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFKC&lt;/code&gt; &amp;mdash; Normalization Form Compatibility Composition.</source>
          <target state="translated">&lt;code&gt;NFKC&lt;/code&gt; &amp;mdash; 정규화 양식 호환성 구성.</target>
        </trans-unit>
        <trans-unit id="1a0524020fef998da4773aad160c354b21d7f22a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFKD&lt;/code&gt; &amp;mdash; Normalization Form Compatibility Decomposition.</source>
          <target state="translated">&lt;code&gt;NFKD&lt;/code&gt; &amp;mdash; 정규화 양식 호환성 분해.</target>
        </trans-unit>
        <trans-unit id="bf3ea7fc9cefcbece612900ee2442560cc60defe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; can also be used as a key. Even though every &lt;code&gt;NaN&lt;/code&gt; is not equal to itself (&lt;code&gt;NaN !== NaN&lt;/code&gt; is true), the following example works because &lt;code&gt;NaN&lt;/code&gt;s are indistinguishable from each other:</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 도 키로 사용할 수 있습니다. 모든에도 불구하고 &lt;code&gt;NaN&lt;/code&gt; 의 자체 (동일하지 않습니다 &lt;code&gt;NaN !== NaN&lt;/code&gt; 사실이다) 때문에 다음 예제 작품 &lt;code&gt;NaN&lt;/code&gt; 이 들 서로 구별 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="a70c5bba79474ee06cb3b3cd2fca4d23cf4d3de2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; compares unequal (via &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, and &lt;code&gt;!==&lt;/code&gt;) to any other value -- including to another &lt;code&gt;NaN&lt;/code&gt; value. Use &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt; to most clearly determine whether a value is &lt;code&gt;NaN&lt;/code&gt;. Or perform a self-comparison: &lt;code&gt;NaN&lt;/code&gt;, and only &lt;code&gt;NaN&lt;/code&gt;, will compare unequal to itself.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 이는 (비아 부등 비교 &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;===&lt;/code&gt; 와 &lt;code&gt;!==&lt;/code&gt; 다른 값) - 서로를 포함 &lt;code&gt;NaN&lt;/code&gt; 값. 사용 &lt;a href=&quot;number/isnan&quot;&gt; &lt;code&gt;Number.isNaN()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN()&lt;/code&gt; &lt;/a&gt; 가장 명확하게 값이 있는지 여부를 확인하는 &lt;code&gt;NaN&lt;/code&gt; 가 . 또는 자기 비교를 수행합니다. &lt;code&gt;NaN&lt;/code&gt; , 그리고 &lt;code&gt;NaN&lt;/code&gt; 만 자신과 같지 않음을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="deab52786b21a86072697583a5ba813e578f3de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; compares unequal (via &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, and &lt;code&gt;!==&lt;/code&gt;) to any other value -- including to another NaN value. Use &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt; to most clearly determine whether a value is NaN. Or perform a self-comparison: NaN, and only NaN, will compare unequal to itself.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 이는 (비아 부등 비교 &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;===&lt;/code&gt; 와 &lt;code&gt;!==&lt;/code&gt; 다른 값) - NaN이 다른 값에 포함된다. 사용 &lt;a href=&quot;number/isnan&quot;&gt; &lt;code&gt;Number.isNaN()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;isnan&quot;&gt; &lt;code&gt;isNaN()&lt;/code&gt; &lt;/a&gt; 가장 명확하게 값이 NaN인지 여부를 확인합니다. 또는 자체 비교를 수행하십시오. NaN 만 NaN 만 비교합니다.</target>
        </trans-unit>
        <trans-unit id="0b88d9c66d6240394cb3095b6dfc791dbfa0fd4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 은 &lt;em&gt;전역 객체&lt;/em&gt; 의 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="6a5780d3e1049bb0db8be1c5dab6dbfa6d11212e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;. In other words, it is a variable in global scope.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 은 &lt;em&gt;전역 개체&lt;/em&gt; 의 속성입니다 . 즉, 전역 범위의 변수입니다.</target>
        </trans-unit>
        <trans-unit id="f2e3f2b7ca75dcbf8fe405a2df8910f266da1607" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; values are generated when arithmetic operations result in &lt;em&gt;undefined&lt;/em&gt; or &lt;em&gt;unrepresentable&lt;/em&gt; values. Such values do not necessarily represent overflow conditions. A &lt;code&gt;NaN&lt;/code&gt; also results from attempted coercion to numeric values of non-numeric values for which no primitive numeric value is available.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; 값은 산술 연산으로 &lt;em&gt;정의되지&lt;/em&gt; 않거나 &lt;em&gt;표현할 수없는&lt;/em&gt; 값이 생성 될 때 생성됩니다 . 이러한 값이 반드시 오버 플로우 조건을 나타내는 것은 아닙니다. &lt;code&gt;NaN&lt;/code&gt; 이는 또한 어떠한 프리미티브 숫자 값을 사용할 수없는 비 수치의 수치하려고 강제 기인.</target>
        </trans-unit>
        <trans-unit id="8698d16b49f0fe93fcc90ecd5a36ccc0c5623db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Number()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="1c798758854594309c025414c7607745062fa79f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; is &lt;code&gt;5e-324&lt;/code&gt;, i.e. the smallest positive number that can be represented within float precision, i.e. that's as close as you can get to zero. Values smaller than &lt;code&gt;MIN_VALUE&lt;/code&gt; (&quot;underflow values&quot;) are converted to 0.</source>
          <target state="translated">&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; 는 &lt;code&gt;5e-324&lt;/code&gt; 입니다 . 즉, float 정밀도 내에서 표현할 수있는 가장 작은 양수입니다. 즉, 0에 도달 할 수있는 가장 가까운 값입니다. &lt;code&gt;MIN_VALUE&lt;/code&gt; ( &quot;언더 플로우 값&quot;) 보다 작은 값은 0으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="4cb340c2033aa11e0e7e675fa69ea76928a5cdbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="a3f82156d866753edd6dfcd499f5ce12e4c9980e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive#Primitive_wrapper_objects_in_JavaScript&quot;&gt;primitive wrapper object&lt;/a&gt; used to represent and manipulate numbers like &lt;code&gt;37&lt;/code&gt; or &lt;code&gt;-9.25&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; 는 &lt;code&gt;37&lt;/code&gt; 또는 &lt;code&gt;-9.25&lt;/code&gt; 와 같은 숫자를 표현하고 조작하는 데 사용되는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive#Primitive_wrapper_objects_in_JavaScript&quot;&gt;기본 래퍼 객체&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f67156eb4019a290fb016ef4e691235840f5029a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt;: &lt;a href=&quot;../number/tolocalestring&quot;&gt;&lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; : &lt;a href=&quot;../number/tolocalestring&quot;&gt; &lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d842f2b08055813e139ebf0b5c3617888c210b14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="34769652aa34093f9c08e7ef970909ba62cbb1e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; instances inherit the following methods from their prototype:</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; 인스턴스는 프로토 타입에서 다음 메소드를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="377b596939f39bf7eb0c7cb9f88ae3a61617d06b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; instances inherit the following properties from their prototype:</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; 인스턴스는 프로토 타입에서 다음 속성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="76ca0a0d36ea66ea594e0d9ab86b24dacd583933" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NumberFormat&lt;/code&gt; outputs localized, opaque strings that cannot be manipulated directly:</source>
          <target state="translated">&lt;code&gt;NumberFormat&lt;/code&gt; 은 직접 조작 할 수없는 지역화 된 불투명 문자열을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="13109e15641430c48a9590fb201d669fb63ee7aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Object()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="d2b5dff67d51b9ec1c5d1504caea6a1cda4aedc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.defineProperties&lt;/code&gt;, in essence, defines all properties corresponding to the enumerable own properties of &lt;code&gt;props&lt;/code&gt; on the object &lt;code&gt;obj&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Object.defineProperties&lt;/code&gt; 본질적으로 Object.defineProperties 는 객체 &lt;code&gt;obj&lt;/code&gt; 객체 에서 &lt;code&gt;props&lt;/code&gt; 의 열거 가능한 자체 속성에 해당하는 모든 속성을 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="94a2599652b8e7a62613e83cefea75ec321bf6b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.entries()&lt;/code&gt; returns an array whose elements are arrays corresponding to the enumerable property &lt;code&gt;[key, value]&lt;/code&gt; pairs found directly upon &lt;code&gt;object&lt;/code&gt;. The ordering of the properties is the same as that given by looping over the property values of the object manually.</source>
          <target state="translated">&lt;code&gt;Object.entries()&lt;/code&gt; 는 요소가 &lt;code&gt;object&lt;/code&gt; 에서 직접 찾은 열거 가능한 속성 &lt;code&gt;[key, value]&lt;/code&gt; 쌍에 해당하는 배열 인 배열을 반환 합니다 . 속성의 순서는 객체의 속성 값을 수동으로 반복하여 주어진 순서와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b7c387c984d73cdf236970025ac1943f2502e4f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.entries()&lt;/code&gt; returns an array whose elements are arrays corresponding to the enumerable string-keyed property &lt;code&gt;[&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;]&lt;/code&gt; pairs found directly upon &lt;code&gt;object&lt;/code&gt;. The ordering of the properties is the same as that given by looping over the property values of the object manually.</source>
          <target state="translated">&lt;code&gt;Object.entries()&lt;/code&gt; 는 &lt;code&gt;object&lt;/code&gt; 에서 직접 찾은 열거 가능한 문자열 키 속성 &lt;code&gt;[&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;]&lt;/code&gt; 쌍에 해당하는 배열 요소가있는 배열을 반환 합니다 . 속성의 순서는 객체의 속성 값을 수동으로 반복하여 지정하는 것과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="d40fbd715a89dd871124c69df74ec60374407397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.fromEntries()&lt;/code&gt; performs the reverse of &lt;a href=&quot;entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Object.fromEntries()&lt;/code&gt; 는 &lt;a href=&quot;entries&quot;&gt; &lt;code&gt;Object.entries()&lt;/code&gt; &lt;/a&gt; 의 역을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="e0b5db9f890cafea46cfa59ec58bfa9f320c814c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; returns an array whose elements are strings corresponding to the enumerable &lt;em&gt;and non-enumerable&lt;/em&gt; properties found directly upon &lt;code&gt;obj&lt;/code&gt;. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (or by &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) over the properties of the object. The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined.</source>
          <target state="translated">&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; 는 요소가 &lt;code&gt;obj&lt;/code&gt; 에서 직접 찾을 수 있는 열거 가능 &lt;em&gt;하고&lt;/em&gt; 열거 &lt;em&gt;불가능한&lt;/em&gt; 속성에 해당하는 문자열 인 배열을 반환합니다 . 배열에서 열거 가능한 속성의 순서 는 객체의 속성에 &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 루프 (또는 &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; )에 의해 노출되는 순서와 일치 합니다. 배열에서 열거 할 수없는 특성과 열거 가능한 특성의 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="118ece4d5f880b8e4add7768a011a7fab44b5a91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly in a given object &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt;. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (or by &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt;) over the properties of the object. According to ES6, the integer keys of the object (both enumerable and non-enumerable) are added in ascending order to the array first, followed by the string keys in the order of insertion.</source>
          <target state="translated">&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; 는 주어진 객체 &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;&lt;/code&gt; 에서 직접 발견되는 열거 가능 및 비 열거 형 속성에 해당하는 문자열 요소가있는 배열을 반환합니다 . 배열에서 열거 가능한 속성의 순서 는 객체 속성에 &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 루프 (또는 &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; 의해 )에 의해 노출되는 순서와 일치 합니다. ES6에 따르면 객체의 정수 키 (열거 형 및 비 열거 형)가 먼저 배열에 오름차순으로 추가되고 삽입 순서대로 문자열 키가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="53f064df4675406d577e7f66f771574299c010d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.is()&lt;/code&gt; determines whether two values are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;the same value&lt;/a&gt;. Two values are the same if one of the following holds:</source>
          <target state="translated">&lt;code&gt;Object.is()&lt;/code&gt; 는 두 값이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;같은 값&lt;/a&gt; 인지 여부를 결정합니다 . 다음 중 하나에 해당하면 두 값이 동일합니다.</target>
        </trans-unit>
        <trans-unit id="3e427f28fbab3aa8e470ec28df4afbaf7e7795bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.is()&lt;/code&gt; determines whether two values are &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;the same value&lt;/a&gt;. Two values are the same if one of the following holds:</source>
          <target state="translated">&lt;code&gt;Object.is()&lt;/code&gt; 는 두 값이 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;동일한 값&lt;/a&gt; 인지 여부를 결정합니다 . 다음 중 하나가 유지되면 두 값이 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b77508a2284c935505a15ed0f03b6ce0ec32778c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; must return the same value as &lt;code&gt;Object.isExtensible(target)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; 는 &lt;code&gt;Object.isExtensible(target)&lt;/code&gt; 과 동일한 값을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="fbe59d99537dc4af1b79388ebb143c010f86aab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.keys()&lt;/code&gt; returns an array whose elements are strings corresponding to the enumerable properties found directly upon &lt;code&gt;object&lt;/code&gt;. The ordering of the properties is the same as that given by looping over the properties of the object manually.</source>
          <target state="translated">&lt;code&gt;Object.keys()&lt;/code&gt; 는 요소가 &lt;code&gt;object&lt;/code&gt; 에서 직접 찾을 수있는 열거 가능한 속성에 해당하는 문자열 인 배열을 반환 합니다 . 속성의 순서는 객체의 속성을 수동으로 반복하여 주어진 순서와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="c5c4e7bfe3f6de29f45845228f477545e9738ebe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.preventExtensions()&lt;/code&gt; only prevents addition of own properties. Properties can still be added to the object prototype.</source>
          <target state="translated">&lt;code&gt;Object.preventExtensions()&lt;/code&gt; 는 자체 속성 추가 만 방지합니다. 객체 프로토 타입에 속성을 계속 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33d843ac0aa426a5133fd2436e7e601dd94c0fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.preventExtensions(proxy)&lt;/code&gt; only returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object.preventExtensions(proxy)&lt;/code&gt; 만 반환 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;Object.isExtensible(proxy)&lt;/code&gt; 입니다 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b946c5927bb591acf9393952a5c14efb18bcf4ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; is in the ECMAScript 2015 specification. It is generally considered the proper way to set the prototype of an object, vs. the more controversial &lt;a href=&quot;proto&quot;&gt;&lt;code&gt;Object.prototype.__proto__&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; 는 ECMAScript 2015 사양에 있습니다. 일반적으로 논란의 여지가있는 &lt;a href=&quot;proto&quot;&gt; &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; &lt;/a&gt; 속성 과 비교하여 객체의 프로토 타입을 설정하는 적절한 방법으로 간주 됩니다.</target>
        </trans-unit>
        <trans-unit id="0d87c1851f78e910756e6741bd628fac708509ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object.values()&lt;/code&gt; returns an array whose elements are the enumerable property values found on the object. The ordering of the properties is the same as that given by looping over the property values of the object manually.</source>
          <target state="translated">&lt;code&gt;Object.values()&lt;/code&gt; 는 요소가 객체에서 찾을 수있는 열거 가능한 속성 값인 배열을 반환합니다. 속성의 순서는 객체의 속성 값을 수동으로 반복하여 주어진 순서와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="2525f02b3e1c3cb7023532b04c9f39b17b86a47c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; instances and &lt;code&gt;Object&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 인스턴스 및 &lt;code&gt;Object&lt;/code&gt; 프로토 타입 객체</target>
        </trans-unit>
        <trans-unit id="c60905a4d4b9d5726e0b58cbef176a723a644ca5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt;: &lt;a href=&quot;../object/tolocalestring&quot;&gt;&lt;code&gt;Object.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; : &lt;a href=&quot;../object/tolocalestring&quot;&gt; &lt;code&gt;Object.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9c7f8bbdabc1ea944f9d5966a3150769d5998e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, divided by any negative value except &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, is &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; 제외한 &lt;a href=&quot;negative_infinity&quot;&gt; &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; &lt;/a&gt; 값으로 나눈 POSITIVE_INFINITY 는 &lt;a href=&quot;negative_infinity&quot;&gt; &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="04e445a9260f94d24607c1c5d8a72f9ffca1e717" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, divided by any positive value except &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, is &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; 제외한 모든 양의 값으로 나눈 &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; 가 있다 &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2ff256e7e23ca1d80777bf5a5c3b7ae449c2c048" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, divided by either &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; 를 &lt;a href=&quot;negative_infinity&quot;&gt; &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; 로 나눈 값 은 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="55b5fff9b395ab1dcfd9539e7aee993be9fdf420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PluralRules&lt;/code&gt; instances inherit the following methods from their prototype:</source>
          <target state="translated">&lt;code&gt;PluralRules&lt;/code&gt; 인스턴스는 프로토 타입에서 다음 메소드를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="82703d16f2081e2d72446cf7d19775b6faacbbed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PluralRules&lt;/code&gt; instances inherit the following properties from their prototype:</source>
          <target state="translated">&lt;code&gt;PluralRules&lt;/code&gt; 인스턴스는 프로토 타입에서 다음 속성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="bedf737d9637942cc912fa1f169351a71d36a6ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Promise()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="de504afa9f2aa80378546578e789706d03a6bfef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all()&lt;/code&gt; will reject immediately upon &lt;strong&gt;any &lt;/strong&gt;of the input promises rejecting. In comparison, the promise returned by &lt;a href=&quot;allsettled&quot;&gt;&lt;code&gt;Promise.allSettled()&lt;/code&gt;&lt;/a&gt; will wait for all input promises to complete, regardless of whether or not one rejects. Consequently, it will always return the final result of every promise and function from the input iterable.</source>
          <target state="translated">&lt;code&gt;Promise.all()&lt;/code&gt; 즉시 거부 &lt;strong&gt;모든&lt;/strong&gt; 거부 입력 약속. 이에 비해 &lt;a href=&quot;allsettled&quot;&gt; &lt;code&gt;Promise.allSettled()&lt;/code&gt; &lt;/a&gt; 의해 반환 된 promise는 거부 여부에 관계없이 모든 입력 promise가 완료 될 때까지 기다립니다. 따라서 항상 입력 iterable에서 모든 약속과 함수의 최종 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c1ec4910ed70333ab471ee21bb61ba62ed12e54f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all&lt;/code&gt; fail-fast behaviour</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; 모든 빠른 동작</target>
        </trans-unit>
        <trans-unit id="ce6d2cf289580390a0516fe84e542dafae930633" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all&lt;/code&gt; is rejected if any of the elements are rejected. For example, if you pass in four promises that resolve after a timeout and one promise that rejects immediately, then &lt;code&gt;Promise.all&lt;/code&gt; will reject immediately.</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; 어떤 요소라도 거부되면 Promise.all 은 거부됩니다. 예를 들어, 시간 종료 후 해결되는 4 개의 약속과 즉시 거부하는 하나의 약속을 &lt;code&gt;Promise.all&lt;/code&gt; 하면 Promise.all 이 즉시 거부합니다.</target>
        </trans-unit>
        <trans-unit id="1779f1ce3e076528fe29025eec8de433c0f320e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Promise.all&lt;/code&gt; waits for all fulfillments (or the first rejection).</source>
          <target state="translated">&lt;code&gt;Promise.all&lt;/code&gt; 은 모든 이행 (또는 첫 번째 거부)을 기다립니다.</target>
        </trans-unit>
        <trans-unit id="a625dd03d23e3099e19df92140494934737b67c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Proxy()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Proxy()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="8103b45ff17330ca30e0658080a58009174f1b97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RangeError()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;RangeError()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="9f4343fae7508efe378b1bd8618bc224a943f270" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RangeError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="240f68857cb2a56a74e6bdf920bb36e5ff9c3a28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReferenceError()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;ReferenceError()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="06d89dab2fd0357de6930904b7a38260826a206f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReferenceError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;ReferenceError&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="fd0fdfd7cced3dc672976ed442f8f44890b2f0e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.construct()&lt;/code&gt; allows you to invoke a constructor with a variable number of arguments. (This would also be possible by using the &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread syntax&lt;/a&gt; combined with the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;Reflect.construct()&lt;/code&gt; 사용하면 가변 개수의 인수를 사용하여 생성자를 호출 할 수 있습니다. (이것은 &lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 연산자 와 결합 된 &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread 구문&lt;/a&gt; 을 사용하여 가능합니다 .)</target>
        </trans-unit>
        <trans-unit id="32fdd1b07f271312217740c97b19c393e76ea995" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.construct()&lt;/code&gt; vs &lt;code&gt;Object.create()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Reflect.construct()&lt;/code&gt; 대 &lt;code&gt;Object.create()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0005212f36f3af64abe52dfbde826f99406f9b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.construct&lt;/code&gt; allows you to invoke a constructor with a variable number of arguments (which would also be possible by using the &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread operator&lt;/a&gt; combined with the &lt;a href=&quot;../../operators/new&quot;&gt;new operator&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;Reflect.construct&lt;/code&gt; 를 사용하면 가변 개수의 인수로 생성자를 호출 할 수 있습니다 (이 &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;연산자&lt;/a&gt; 는 &lt;a href=&quot;../../operators/new&quot;&gt;new 연산자&lt;/a&gt; 와 결합 된 spread 연산자 를 사용하여 가능 ).</target>
        </trans-unit>
        <trans-unit id="a08fe7a7d6107a9ec2388db5830e7f61fe4ddc23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reflect.has&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; for any inherited properties, like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Reflect.has&lt;/code&gt; 는 &lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 연산자 와 같이 상속 된 속성에 대해 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="ea23ab9b01d0cfe7defbb0a6803b803f616e4457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;RegExp()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="b3d13e5e6e3252272976e4077c65e96a0381bce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.input&lt;/code&gt; (&lt;code&gt;$_&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.input&lt;/code&gt; ( &lt;code&gt;$_&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c5a6e56004d43ed90f7662c7348f8eafbb851351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.lastMatch&lt;/code&gt; (&lt;code&gt;$&amp;amp;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.lastMatch&lt;/code&gt; ( &lt;code&gt;$&amp;amp;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="e82214b185df399209fe38a4c764e6638f8fa6d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.lastParen&lt;/code&gt; (&lt;code&gt;$+&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.lastParen&lt;/code&gt; ( &lt;code&gt;$+&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="fe1706da132a2dc4ca5f40ca1cdad320ab2745c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.leftContext&lt;/code&gt; (&lt;code&gt;$`&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.leftContext&lt;/code&gt; ( &lt;code&gt;$`&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="22bdaf6cf0e6c7e8e144ef9cf93d72f4dd25dfc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp.rightContext&lt;/code&gt; (&lt;code&gt;$'&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;RegExp.rightContext&lt;/code&gt; ( &lt;code&gt;$'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="901e3ed9a19c003ba09bea4a74e0e24ea6e4b83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RegExp&lt;/code&gt; prototype objects and instances</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; 프로토 타입 객체 및 인스턴스</target>
        </trans-unit>
        <trans-unit id="ab009d3d930769a6206411674e56ca868feae25b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RuntimeError()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;RuntimeError()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="201f1da8c9bcadca98b84682cba79b6f3b42a6ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Seal&lt;/code&gt;-ed Arrays</source>
          <target state="translated">&lt;code&gt;Seal&lt;/code&gt; 배열을 -ed</target>
        </trans-unit>
        <trans-unit id="03afb3a1eb7aa8f96f2bb19e4cc53c5861633315" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Set()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="d61f06a37cebf33215f3a9cb8335e9f3c14d9519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Set()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기 없이 Set ()</target>
        </trans-unit>
        <trans-unit id="d6a80c9b6ae5f4647c03a1658debdf4e0a4b0021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 인스턴스 설정</target>
        </trans-unit>
        <trans-unit id="1f92b81cefbafeaa8650e7c3eefc1944acf4c0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Set&lt;/code&gt; objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the &lt;code&gt;Set&lt;/code&gt;&lt;strong&gt;may only occur once&lt;/strong&gt;; it is unique in the &lt;code&gt;Set&lt;/code&gt;'s collection.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 개체는 값의 모음입니다. 삽입 순서대로 세트의 요소를 반복 할 수 있습니다. &lt;code&gt;Set&lt;/code&gt; 의 값은 &lt;strong&gt;한 번만 발생할 수 있습니다&lt;/strong&gt; . &lt;code&gt;Set&lt;/code&gt; 컬렉션 에서 고유합니다 .</target>
        </trans-unit>
        <trans-unit id="9fce2994959b0a2cf78e24f9571af7a693d7743a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="0eb5ecf3461603f67c3f67cd2f47b959b3a673c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; accepted as buffer</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; 버퍼로 받아 들여지는 SharedArrayBuffer</target>
        </trans-unit>
        <trans-unit id="2fe9d5dcf0aaf6b3ed3111d726e2acaa0c80ed81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructors are required to be constructed with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. Calling a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructor as a function without &lt;code&gt;new&lt;/code&gt; will throw a &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; 생성자는 &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 연산자 로 구성해야합니다 . 호출 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 에 없는 함수로 생성자 &lt;code&gt;new&lt;/code&gt; 던져 것 &lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="694c118c1629579f247a93ffc7fd668d97bb1cc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; in &lt;code&gt;DataView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; 에서 &lt;code&gt;DataView&lt;/code&gt; 를</target>
        </trans-unit>
        <trans-unit id="ade1b689bf7cf96d39fcd871aa0d1d63000489bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances inherit from &lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt;. As with all constructors, you can change the constructor's prototype object to make changes to all &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; 인스턴스는 &lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt; 을 상속 합니다. 모든 생성자와 마찬가지로 생성자의 프로토 타입 객체를 변경하여 모든 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 인스턴스 를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8fc56ca15d004263ba5b1f48fa789e9512d92a38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrayBuffer&lt;/code&gt; prototype object</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; 프로토 타입 객체</target>
        </trans-unit>
        <trans-unit id="358db96534e930da46d15248e0771ea729f9e3cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;String()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="541fe17ffc5feb6b770cbfd3fc0d4488e46ffbe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.fromCodePoint()&lt;/code&gt;, on the other hand, can return 4-byte supplementary characters, as well as the more common 2-byte BMP characters, by specifying their code point (which is equivalent to the UTF-32 code unit):</source>
          <target state="translated">&lt;code&gt;String.fromCodePoint()&lt;/code&gt; 반면에 String.fromCodePoint () 는 코드 포인트 (UTF-32 코드 단위와 동일 함)를 지정하여 4 바이트 보조 문자와 더 일반적인 2 바이트 BMP 문자를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="026c37320625e09f6db4af1c40c338f8c8a2154f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.raw()&lt;/code&gt; is the only built-in tag function of template strings. It works just like the default template function and performs concatenation. You can even re-implement it with normal JavaScript code.</source>
          <target state="translated">&lt;code&gt;String.raw()&lt;/code&gt; 는 템플릿 문자열의 유일한 내장 태그 함수입니다. 기본 템플릿 함수처럼 작동하며 연결을 수행합니다. 일반 JavaScript 코드로 다시 구현할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd5b052c278a476ba803b4b1ad945f01d09c6da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String.raw()&lt;/code&gt; is the only built-in tag function of template strings; it works just like the default template function and performs concatenation. You can even re-implement it with normal JavaScript code.</source>
          <target state="translated">&lt;code&gt;String.raw()&lt;/code&gt; 는 템플릿 문자열의 유일한 내장 태그 함수입니다. 기본 템플릿 기능과 동일하게 작동하며 연결을 수행합니다. 일반 JavaScript 코드로 다시 구현할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d311077157d6496d82bad21613ee0fd7f94d723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt; generic methods</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 제네릭 메서드</target>
        </trans-unit>
        <trans-unit id="957f6d3c2e44b0fd76092286d9bef8d94dd4f558" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="ee2f64a7a60e1d8dda64b274f58d0013d5a297a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;'s &lt;a href=&quot;global_objects/string/@@iterator&quot;&gt;default iterator&lt;/a&gt; returns the string's code points one by one:</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 의 &lt;a href=&quot;global_objects/string/@@iterator&quot;&gt;기본 반복자&lt;/a&gt; 는 문자열의 코드 포인트를 하나씩 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ec85924b7b04029cd624feab4237ad86df2247d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StringView&lt;/code&gt; &amp;mdash; a C-like representation of strings based on typed arrays</source>
          <target state="translated">&lt;code&gt;StringView&lt;/code&gt; &amp;mdash; 형식화 된 배열을 기반으로하는 C와 같은 문자열 표현</target>
        </trans-unit>
        <trans-unit id="60b4ae79f4c4ca3aa84db8f03aebcd14d7363410" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol(&quot;foo&quot;) + &quot;bar&quot; &lt;/code&gt;throws a &lt;a href=&quot;typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (can't convert symbol to string). This prevents you from silently creating a new string property name from a symbol, for example.</source>
          <target state="translated">&lt;code&gt;Symbol(&quot;foo&quot;) + &quot;bar&quot; &lt;/code&gt; 는 &lt;a href=&quot;typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를 발생&lt;/a&gt; 시킵니다 (기호를 문자열로 변환 할 수 없음). 예를 들어 심볼에서 새 문자열 속성 이름을 자동으로 만들 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1dc1e462828d4f605f5aeaf3ce482a9527bc0e11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="c9a9b316ef591a13d2301c578627b2a8184b49b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Symbol&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="963a6c546f50b738589289258a5c772502b63d81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntaxError()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;SyntaxError()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="4a0fbdd60d6177c53a5d8b524c88338047bd6ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntaxError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;SyntaxError&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="393e41ca447aa46f70bfc53773c21010f27a3781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SyntaxError&lt;/code&gt;s are also generated in the following code examples which use &lt;code&gt;break&lt;/code&gt; statements within functions that are nested within a loop, or labeled block that the &lt;code&gt;break&lt;/code&gt; statements are intended to break out of.</source>
          <target state="translated">&lt;code&gt;SyntaxError&lt;/code&gt; 는 루프 내에 중첩 된 함수 내에서 &lt;code&gt;break&lt;/code&gt; 문 을 사용하는 다음 코드 예제 또는 &lt;code&gt;break&lt;/code&gt; 문이 중단하려는 레이블이 지정된 블록 에서도 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="c4c162c221ac4fb83c72b25ffbbfe5b1ffd6e42b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Table()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Table()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="7a1df3ead8a0aeaa592ae24a0b035af0bc7189d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Table&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;Table&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="a62bcbcff4c2e0bcb718fd7779a3dfd5bc4bf567" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeError()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;TypeError()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="185c2de94de6aeb9761d5ba13e0e86b799e248a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="d2fb3b3a17d823468e0d9433cfcedb993264cf7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;TypedArray()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지지 않은 TypedArray ()</target>
        </trans-unit>
        <trans-unit id="773caa00fe82d64d0260e842b2fc9e4d6cb87400" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray.from()&lt;/code&gt; uses &lt;code&gt;[[Put]]&lt;/code&gt; where &lt;code&gt;Array.from()&lt;/code&gt; uses &lt;code&gt;[[DefineProperty]]&lt;/code&gt;. Hence, when working with &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; objects, it calls &lt;a href=&quot;../proxy/proxy/set&quot;&gt;&lt;code&gt;handler.set&lt;/code&gt;&lt;/a&gt; to create new elements rather than &lt;a href=&quot;../proxy/proxy/defineproperty&quot;&gt;&lt;code&gt;handler.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TypedArray.from()&lt;/code&gt; 은 &lt;code&gt;[[Put]]&lt;/code&gt; 을 사용 하고 &lt;code&gt;Array.from()&lt;/code&gt; 은 &lt;code&gt;[[DefineProperty]]&lt;/code&gt; 를 사용 합니다. 따라서 &lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt; 객체로 작업 할 때 &lt;a href=&quot;../proxy/proxy/defineproperty&quot;&gt; &lt;code&gt;handler.defineProperty()&lt;/code&gt; &lt;/a&gt; 대신 새 요소를 생성하기 위해 &lt;a href=&quot;../proxy/proxy/set&quot;&gt; &lt;code&gt;handler.set&lt;/code&gt; &lt;/a&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="1b4bd4bfbd2ade293baa6571fc777f0c72400e9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray&lt;/code&gt; objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; constant contains the number of bytes each element in the given &lt;code&gt;TypedArray&lt;/code&gt; has.</source>
          <target state="translated">&lt;code&gt;TypedArray&lt;/code&gt; 객체는 요소 당 바이트 수와 바이트가 해석되는 방식이 서로 다릅니다. &lt;code&gt;BYTES_PER_ELEMENT&lt;/code&gt; 의 상수는 소정의 각 요소의 바이트 수 포함 &lt;code&gt;TypedArray&lt;/code&gt; 가진다.</target>
        </trans-unit>
        <trans-unit id="5bf82f0112a728b3aa1d32123c6535a3162ee9df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypedArray&lt;/code&gt; objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The &lt;code&gt;name&lt;/code&gt; property describes of what data type the array consists. The first part can be &lt;code&gt;Int&lt;/code&gt; for &quot;integer&quot; or &lt;code&gt;Uint&lt;/code&gt; for an &quot;unsigned integer&quot;, also &lt;code&gt;Float&lt;/code&gt; for &quot;floating point&quot; is used. The second part is a number describing the bit-size of the array. Finally, the object type is &lt;code&gt;Array&lt;/code&gt;, with &lt;code&gt;ClampedArray&lt;/code&gt; as a special case. Please see &lt;a href=&quot;../uint8clampedarray&quot;&gt;&lt;code&gt;Uint8ClampedArray&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;TypedArray&lt;/code&gt; 객체는 요소 당 바이트 수와 바이트 해석 방식이 서로 다릅니다. &lt;code&gt;name&lt;/code&gt; 속성은 데이터를 배열로 구성되어 입력 한 내용의 설명합니다. 첫 번째 부분은 &quot;정수&quot;의 경우 &lt;code&gt;Int&lt;/code&gt; 이거나 &quot;부호없는 정수&quot;의 경우 &lt;code&gt;Uint&lt;/code&gt; 일 수 있으며 &quot;부동 소수점&quot;의 경우 &lt;code&gt;Float&lt;/code&gt; 도 사용됩니다. 두 번째 부분은 배열의 비트 크기를 설명하는 숫자입니다. 마지막으로 객체 유형은 &lt;code&gt;Array&lt;/code&gt; 이며 &lt;code&gt;ClampedArray&lt;/code&gt; 는 특별한 경우입니다. 자세한 내용은 &lt;a href=&quot;../uint8clampedarray&quot;&gt; &lt;code&gt;Uint8ClampedArray&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="447d6374256296bf26fbc7b786c5e3f68e621761" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Typeof&lt;/code&gt; operator and &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Typeof&lt;/code&gt; 연산자와 &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ce41596ac632d894d8222e798b826827610096c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URIError()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;URIError()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="9346949e2074624e5362d491abdd876543e6023f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URIError&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;URIError&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="485d7b1ee3239b11791f99a4347c824bc0ab2f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTC()&lt;/code&gt; is a static method of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, so it's called as &lt;code&gt;Date.UTC()&lt;/code&gt; rather than as a method of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;UTC()&lt;/code&gt; 는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 의 정적 메서드 이므로 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 인스턴스 의 메서드가 아니라 &lt;code&gt;Date.UTC()&lt;/code&gt; 로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="bda763fc1cf6d424a141aa626488983c45c2ca10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTC()&lt;/code&gt; takes comma-delimited date and time parameters and returns the number of milliseconds between January 1, 1970, 00:00:00, universal time and the specified date and time.</source>
          <target state="translated">&lt;code&gt;UTC()&lt;/code&gt; 는 쉼표로 구분 된 날짜 및 시간 매개 변수를 사용하여 1970 년 1 월 1 일 00:00:00, 표준시 및 지정된 날짜 및 시간 사이의 밀리 초 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="54a0222ec25be2720a01373f3636d2978b84d8ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint16Array()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Uint16Array()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="7e6e7a5ffdffc9021c092c72ccaaba4f2e64fcbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint16Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint16Array()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Uint16Array ()</target>
        </trans-unit>
        <trans-unit id="74a1d80e3e57591d71e2205e004d0d02d85276bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint16Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint16Array&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="4c8e814c6371a0758d623c702025602fcc5928a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint32Array()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Uint32Array()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="611ad5dd041251513f59b98b814862ef0c0f3509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint32Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint32Array()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Uint32Array ()</target>
        </trans-unit>
        <trans-unit id="4a55b60c159dc73bd9dcc8397e5cd20dda0d1c0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint32Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint32Array&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="57d26d5791c35dfbe491dd5db9baad164e3b864a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8Array()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Uint8Array()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="c1b499796aa64d7c04a80ed44405eed3064fc43f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8Array()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint8Array()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Uint8Array ()</target>
        </trans-unit>
        <trans-unit id="31e72035046a0e9477a2259121e9a3e0b40f17b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8Array&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint8Array&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="c972df39997b34a6c0310e46ef259e0f5a1b5f11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8ClampedArray()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Uint8ClampedArray()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="a6957e8798c1c746c336c6d6ecaaa7eb1ae361dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8ClampedArray()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;Uint8ClampedArray()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 Uint8ClampedArray ()</target>
        </trans-unit>
        <trans-unit id="0bb1807b874692b9f5f2ec19b59c221125cfb6c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uint8ClampedArray&lt;/code&gt; prototype</source>
          <target state="translated">&lt;code&gt;Uint8ClampedArray&lt;/code&gt; 프로토 타입</target>
        </trans-unit>
        <trans-unit id="3f4c761b5e2888241d269b969f3a10984c07eca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Void&lt;/code&gt; operator and &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Void&lt;/code&gt; 연산자 및 &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0c1e4954b2e20c960af9358f0e0212b5bd5e971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;WeakMap()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="ba2a9fa90f329749427e6240e67bc971f9b9b621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap()&lt;/code&gt; without &lt;code&gt;new&lt;/code&gt; throws</source>
          <target state="translated">&lt;code&gt;WeakMap()&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; 던지기가 없는 WeakMap ()</target>
        </trans-unit>
        <trans-unit id="06853438c8ea15de5f6857455ca09cd186bdf823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap.prototype&lt;/code&gt; is itself just an ordinary object:</source>
          <target state="translated">&lt;code&gt;WeakMap.prototype&lt;/code&gt; 자체는 일반적인 객체입니다.</target>
        </trans-unit>
        <trans-unit id="5bff6adc35bafe83014779e372f5ec78848dbe3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; There is no method to obtain a list of the keys. If they were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 키 목록을 얻을 수있는 방법이 없습니다. 그렇다면 목록은 가비지 수집 상태에 따라 달라지며 비결 정성을 도입합니다. 키 목록이 필요하면 &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; 을&lt;/a&gt; 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b87d565c959998a4bd024f99645ab8acaa498666" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; and &lt;code&gt;WeakSet&lt;/code&gt; objects require object keys</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 및 &lt;code&gt;WeakSet&lt;/code&gt; 객체에는 객체 키가 필요합니다</target>
        </trans-unit>
        <trans-unit id="83c5e696b7470198277f00d16ad92acea89ede24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; in the JavaScript guide</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 자바 스크립트 가이드의 WeakMap</target>
        </trans-unit>
        <trans-unit id="1ca5b9af4fe2a0160dd07e19c618f1c599524fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakMap&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="b000a344d761e25504218f9b82d55629f3e08ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet()&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;WeakSet()&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="06dff1f18e6a87478f9e9d0096e88834d404f1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet.prototype&lt;/code&gt; is itself just an ordinary object:</source>
          <target state="translated">&lt;code&gt;WeakSet.prototype&lt;/code&gt; 자체는 일반적인 개체입니다.</target>
        </trans-unit>
        <trans-unit id="fac397a4016c006f74ce6d33be39720720eb2ad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt; instances</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="059de5eafbc88297797b683bee1abb4c63f54a7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt; objects are collections of objects. An object in the &lt;code&gt;WeakSet&lt;/code&gt; may occur only once; it is unique in the &lt;code&gt;WeakSet&lt;/code&gt;'s collection.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 객체는 객체의 모음입니다. &lt;code&gt;WeakSet&lt;/code&gt; 의 개체는 한 번만 발생할 수 있습니다. &lt;code&gt;WeakSet&lt;/code&gt; 의 컬렉션 에서 독특합니다 .</target>
        </trans-unit>
        <trans-unit id="9cfb49531f17908e2f314fe08aec439a3f5655b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt; objects are collections of objects. Just as with &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;s, each object in a &lt;code&gt;WeakSet&lt;/code&gt; may occur only once; all objects in a &lt;code&gt;WeakSet&lt;/code&gt;'s collection are unique.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 객체는 객체 모음입니다. &lt;a href=&quot;set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 &lt;code&gt;WeakSet&lt;/code&gt; 의 각 객체는 한 번만 발생할 수 있습니다. &lt;code&gt;WeakSet&lt;/code&gt; 컬렉션의 모든 개체 는 고유합니다.</target>
        </trans-unit>
        <trans-unit id="d481a1df4d52801b921dd1c0aaf64403ee49a864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt;s are collections of &lt;strong&gt;objects only&lt;/strong&gt;. They cannot contain arbitrary values of any type, as &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;s can.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 은 &lt;strong&gt;객체의&lt;/strong&gt; 모음입니다 . &lt;a href=&quot;set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 가 할 수있는 것처럼 임의의 유형의 값을 포함 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="30c4fc1f2d33cc015027e7da4bb77347eb56df72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakSet&lt;/code&gt;s are ideal for this purpose:</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 은 이러한 목적에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="d453c8b8014fa71df7de4e97471f2e8280d52f9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Writable&lt;/code&gt;: If this attribute set to &lt;code&gt;false&lt;/code&gt;, the value of the property cannot be changed.</source>
          <target state="translated">&lt;code&gt;Writable&lt;/code&gt; :이 속성이 &lt;code&gt;false&lt;/code&gt; 로 설정되면 특성 값을 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8edb0b191e85e764e4009acc85f62e49faf4a154" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\u&lt;var&gt;XXXX&lt;/var&gt;&lt;/code&gt; (where &lt;code&gt;&lt;var&gt;XXXX&lt;/var&gt;&lt;/code&gt; is 4 hex digits; range of &lt;code&gt;0x0000&lt;/code&gt;&amp;ndash;&lt;code&gt;0xFFFF&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;\u&lt;var&gt;XXXX&lt;/var&gt;&lt;/code&gt; (여기서 &lt;code&gt;&lt;var&gt;XXXX&lt;/var&gt;&lt;/code&gt; 는 4 자리 16 진수, 범위는 &lt;code&gt;0x0000&lt;/code&gt; &amp;ndash; &lt;code&gt;0xFFFF&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="6ca0ada46c2db337c3c466182bee5ed23890fa2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\u{&lt;var&gt;X&lt;/var&gt;}&lt;/code&gt; ... &lt;code&gt;\u{&lt;var&gt;XXXXXX&lt;/var&gt;}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\u{&lt;var&gt;X&lt;/var&gt;}&lt;/code&gt; ... &lt;code&gt;\u{&lt;var&gt;XXXXXX&lt;/var&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1704a7be629607f350b16ec85790ba13cfee3a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\u{X}&lt;/code&gt; ... &lt;code&gt;\u{XXXXXX}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\u{X}&lt;/code&gt; ... &lt;code&gt;\u{XXXXXX}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76f51741e9c758f6ba3a4fcb94e013e1a8f04e7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; and &lt;code&gt;\W&lt;/code&gt; only matches ASCII based characters; for example, &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;, and &lt;code&gt;_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 및 &lt;code&gt;\W&lt;/code&gt; 는 ASCII 기반 문자와 만 일치합니다. 예를 들어 &lt;code&gt;a&lt;/code&gt; ~ &lt;code&gt;z&lt;/code&gt; , &lt;code&gt;A&lt;/code&gt; ~ &lt;code&gt;Z&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; ~ &lt;code&gt;9&lt;/code&gt; , &lt;code&gt;_&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb904c02769fb826a92f1daca094dc3a49ecb987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; is very similar to &lt;a href=&quot;call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, except for the type of arguments it supports. You use an arguments array instead of a list of arguments (parameters). With &lt;code&gt;apply&lt;/code&gt;, you can also use an array literal, for example, &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, ['eat', 'bananas'])&lt;/code&gt;, or an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object, for example, &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, new Array('eat', 'bananas'))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 는 지원하는 인수 유형을 제외하고 &lt;a href=&quot;call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; 과 매우 유사 합니다. 인수 (매개 변수) 목록 대신 인수 배열을 사용합니다. 으로 &lt;code&gt;apply&lt;/code&gt; , 또한 예를 들어, 어레이 그대로 사용할 수 &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, ['eat', 'bananas'])&lt;/code&gt; 또는 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 오브젝트, 예를 들면, &lt;code&gt;&lt;em&gt;func&lt;/em&gt;.apply(this, new Array('eat', 'bananas'))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="834e7e8de444204025622dfff22dc4cc64d0c99d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; is very similar to &lt;a href=&quot;call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, except for the type of arguments it supports. You use an arguments array instead of a list of arguments (parameters). With &lt;code&gt;apply&lt;/code&gt;, you can also use an array literal, for example, &lt;code&gt;&lt;var&gt;func&lt;/var&gt;.apply(this, ['eat', 'bananas'])&lt;/code&gt;, or an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object, for example, &lt;code&gt;&lt;var&gt;func&lt;/var&gt;.apply(this, new Array('eat', 'bananas'))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 는 지원하는 인수 유형을 제외하고 &lt;a href=&quot;call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; 과 매우 유사 합니다. 인수 목록 (매개 변수) 대신 인수 배열을 사용합니다. 으로 &lt;code&gt;apply&lt;/code&gt; , 또한 예를 들어, 어레이 그대로 사용할 수 &lt;code&gt;&lt;var&gt;func&lt;/var&gt;.apply(this, ['eat', 'bananas'])&lt;/code&gt; 또는 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 오브젝트, 예를 들면, &lt;code&gt;&lt;var&gt;func&lt;/var&gt;.apply(this, new Array('eat', 'bananas'))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed94fe1714597ff99435ce3873d622e408f55825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; to the rescue!</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 구조에 적용 하십시오!</target>
        </trans-unit>
        <trans-unit id="1a40b9836c28a42eb40a6c4c4c03388261cef287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt; doesn't alias named function arguments</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 는 이름이 지정된 함수 인수의 별칭이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="11797c48fbe5569e9f59ce5c8a3248e8d916e8fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt;-like object accessible inside &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;functions&lt;/a&gt; that contains the values of the arguments passed to that function.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 는 해당 함수에 전달 된 인수의 값을 포함하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;함수&lt;/a&gt; 내에서 액세스 할 수 있는 &lt;code&gt;Array&lt;/code&gt; 과 유사한 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="1413a9600bc526c12a6896dab84d86e1cd12d220" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt;-like object accessible inside &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;functions&lt;/a&gt; that contains the values of the arguments passed to that function.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 는 해당 함수에 전달 된 인수 값을 포함하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;함수&lt;/a&gt; 내에서 액세스 할 수 있는 &lt;code&gt;Array&lt;/code&gt; 와 유사한 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="e9f26671650a450c1763ae9c5d95eb3d93087962" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arguments&lt;/code&gt;: always access function arguments via their name or perform a copy of the arguments object using:</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; : 항상 이름을 통해 함수 인수에 액세스하거나 다음을 사용하여 인수 오브젝트의 사본을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e56044c126ce7ea9ee354877ad51896735cadb59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="404a2b042516b952ef414e5a84429d8e6243569c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async function&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;async function&lt;/code&gt; 표현식</target>
        </trans-unit>
        <trans-unit id="043df3f43f3f4e40e685d8d3e646d4725a01ebb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="2db6404b54bf7bbb8ebcce50e8245f60f4e6cac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bind()&lt;/code&gt; is also helpful in cases where you want to create a shortcut to a function which requires a specific &lt;code&gt;this&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; 또한 특정에게 필요로하는 기능에 대한 바로 가기를 만들 경우에 도움이된다 &lt;code&gt;this&lt;/code&gt; 값입니다.</target>
        </trans-unit>
        <trans-unit id="55e2c210d071867bf1d329374d1e52d98bbaf2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byteLength&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="6978f11195abed41788f154dab42c60de2021bfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;byteOffset&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="23e35f4831a4b726b4898d17186ce1efe269dd34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call()&lt;/code&gt; provides a new value of &lt;code&gt;this&lt;/code&gt; to the function/method. With &lt;code&gt;call()&lt;/code&gt;, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.</source>
          <target state="translated">&lt;code&gt;call()&lt;/code&gt; 새로운 값을 제공하고 &lt;code&gt;this&lt;/code&gt; 기능 / 방법에있다. 로 &lt;code&gt;call()&lt;/code&gt; , 한 번 방법을 쓴 후 새 개체에 대한 방법을 다시 작성하지 않고, 다른 객체를 상속합니다.</target>
        </trans-unit>
        <trans-unit id="8102d9c9c43038d1f942c33abe1f578b86b0bbae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call()&lt;/code&gt; provides a new value of &lt;strong&gt;this&lt;/strong&gt; to the function/method. With &lt;code&gt;call&lt;/code&gt;, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.</source>
          <target state="translated">&lt;code&gt;call()&lt;/code&gt; 새로운 값을 제공하고 &lt;strong&gt;,이&lt;/strong&gt; 기능 / 방법에있다. &lt;code&gt;call&lt;/code&gt; 을 사용하면 메서드를 한 번 작성한 다음 새 개체의 메서드를 다시 쓰지 않고도 다른 개체에서 상속 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b34459a1e9fa83cb7a51ab21b17b2292f23ac00d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with 3 arguments:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 은 3 개의 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1b683124bcf90e20952715111bf3315fe756aae4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with &lt;strong&gt;three arguments&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 은 &lt;strong&gt;세 가지 인수&lt;/strong&gt; 로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d223df244085ecabc4844335dd03fa473224d2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 은 세 가지 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="8f1ce3797aea99bfd523db41b004b5bfb2fe7251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 은 요소의 값, 요소의 색인 및 순회되는 Array 객체의 세 가지 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="19cb9b2e0bdbec64e5ee2e03fc1f40f47bf02621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the array object being traversed.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 은 요소의 값, 요소의 색인 및 순회되는 배열 객체의 세 가지 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e8801a2e66e2d1f55761428f8e246b7301aadda1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; is invoked with three arguments: the value of the element, the index of the element, and the typed array object being traversed.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 은 요소의 값, 요소의 색인 및 순회되는 형식화 된 배열 객체의 세 가지 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7b5ce8375a4923fb5df1cd9966bc9fb3ff227bc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callee&lt;/code&gt; is a property of the &lt;code&gt;arguments&lt;/code&gt; object. It can be used to refer to the currently executing function inside the function body of that function. This is useful when the name of the function is unknown, such as within a function expression with no name (also called &quot;anonymous functions&quot;).</source>
          <target state="translated">&lt;code&gt;callee&lt;/code&gt; 는 &lt;code&gt;arguments&lt;/code&gt; 객체 의 속성입니다 . 해당 함수의 함수 본문 내에서 현재 실행중인 함수를 참조하는 데 사용할 수 있습니다. 이름이없는 함수 표현식 (예 : &quot;익명 함수&quot;) 내에서와 같이 함수 이름을 알 수없는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a912464486baab4e26f9669d4a567ab63b8397ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;case &lt;var&gt;valueN&lt;/var&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;case &lt;var&gt;valueN&lt;/var&gt;&lt;/code&gt; 선택 사항</target>
        </trans-unit>
        <trans-unit id="6c1a69880471124e8cb9d048188b49911990a81e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;case valueN&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;case valueN&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="9f56292d53f4a10e95780fd1c744b10f929891de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;caseFirst&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;caseFirst&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="72cc25137abaff335761bfdde99edaacb8ca9d8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch_statements_1&lt;/code&gt;, &lt;code&gt;catch_statements_2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;catch_statements_1&lt;/code&gt; , &lt;code&gt;catch_statements_2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15ae45fe31540f354cd2dcafd8238ff21b93520c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charCodeAt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if the given index is less than 0 or is equal to or greater than the length of the string.</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; 주어진 인덱스가 0보다 작거나 문자열의 길이보다 크거나 같은 경우 charCodeAt () 는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을&lt;/a&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5561ef4580972f409c7a7acdb87dc70250892c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charCodeAt()&lt;/code&gt; returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if the given index is less than &lt;code&gt;0&lt;/code&gt;, or if it is equal to or greater than the &lt;code&gt;length&lt;/code&gt; of the string.</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; 은 주어진 인덱스가 &lt;code&gt;0&lt;/code&gt; 보다 작거나 문자열 의 &lt;code&gt;length&lt;/code&gt; 보다 크거나 같은 경우 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 을&lt;/a&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="276aae309017edf2e8791e19cb51f0f15a6fc973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;childModule1.js&lt;/code&gt;: exporting &lt;code&gt;myFunction&lt;/code&gt; and &lt;code&gt;myVariable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;childModule1.js&lt;/code&gt; : &lt;code&gt;myFunction&lt;/code&gt; 및 &lt;code&gt;myVariable&lt;/code&gt; 내보내기</target>
        </trans-unit>
        <trans-unit id="09f8b5b707d773d5651bb0dc81bf4fc4faf11802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;childModule2.js&lt;/code&gt;: exporting &lt;code&gt;myClass&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;childModule2.js&lt;/code&gt; : &lt;code&gt;myClass&lt;/code&gt; 내보내기</target>
        </trans-unit>
        <trans-unit id="461b470fcfda3a7797856c9bca86ab7f8902ec4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; declaration</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 선언</target>
        </trans-unit>
        <trans-unit id="45206c79cec506b470947f6aa2660fcb15d1132a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 표현</target>
        </trans-unit>
        <trans-unit id="f49afc836f9ef9799e93bf3c927fbf2f9ef345e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; statement</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 성명</target>
        </trans-unit>
        <trans-unit id="fc7b9dfaf8c17862dbf3fed450c41f3ecb9c59e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareFunction(a, b)&lt;/code&gt; must always return the same value when given a specific pair of elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; as its two arguments. If inconsistent results are returned, then the sort order is undefined.</source>
          <target state="translated">&lt;code&gt;compareFunction(a, b)&lt;/code&gt; 는 두 인수로 특정 요소 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 쌍이 주어지면 항상 동일한 값을 반환해야합니다 . 일치하지 않는 결과가 반환되면 정렬 순서가 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cb33b070076760817bb0dea01f284644d7704346" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareFunction(a, b)&lt;/code&gt; must always return the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned then the sort order is undefined.</source>
          <target state="translated">&lt;code&gt;compareFunction(a, b)&lt;/code&gt; 는 두 개의 인수로 특정 요소 쌍 a와 b가 주어지면 항상 동일한 값을 반환해야합니다. 일치하지 않는 결과가 반환되면 정렬 순서가 정의되지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="4eaf8b79e4165f764a657b6e9689b842d9530f21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareFunction&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;compareFunction&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e133550631b748a8dcb720b26bbbed184e8bdbb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; and immutability</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 와 불변성</target>
        </trans-unit>
        <trans-unit id="6e472cacd6232538a972135f520492bb8074bb0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; 또는 &lt;code&gt;var&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="e01fa501b4322ef44ce95c0c175da63ae3bbd392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; , &lt;code&gt;break&lt;/code&gt; , &lt;code&gt;throw&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a25aea120629c5b5ea9988ec84a632696d656e63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b65412d24e8afe5c69c59b8f9f74d81f874963ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currentIndex&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;currentIndex&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e3862df225c9e8ff947612f8eee5b741056a97f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;date&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="c2555aecd5f6ec0d770f3fdb6bd2f086151603c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;day&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;day&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="eb02f953c91bdad6722f3d3783135f7290792dfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; keyword in &lt;code&gt;switch&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; &lt;code&gt;switch&lt;/code&gt; 기본 키워드</target>
        </trans-unit>
        <trans-unit id="7f3e7550c678520ca60f63db6b375ada90b056e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; keyword with &lt;code&gt;export&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; &lt;code&gt;export&lt;/code&gt; 기본 키워드</target>
        </trans-unit>
        <trans-unit id="ecabcd6884ed0583a484f96388a0606249e0622f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="da35f1ff7c6dd5e16e2d0b59152de7fae2689c36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete&lt;/code&gt; and the prototype chain</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 및 프로토 타입 체인</target>
        </trans-unit>
        <trans-unit id="d7553176536b328979b9e89f9c43e945f24dcf77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 연산자 삭제</target>
        </trans-unit>
        <trans-unit id="05980f17e4337db7f5c8c25437f5ff5b3b78bd53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deleteCount&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;deleteCount&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="6c446dc8939a859b73b187440b0e5c5353baebe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7887c816caf8050fa8cfb3b7e9983ce98ece533e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="4f4845f14c3933c5a299f4216e6180ea5ea01291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;document.all&lt;/code&gt; willful violation of the standard</source>
          <target state="translated">&lt;code&gt;document.all&lt;/code&gt; 고의적 인 표준 위반</target>
        </trans-unit>
        <trans-unit id="98c0d36da02b5598b2f2d0cde960f6b616e4cb6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;done&lt;/code&gt; (boolean)</source>
          <target state="translated">&lt;code&gt;done&lt;/code&gt; (부울)</target>
        </trans-unit>
        <trans-unit id="48cebe4d861a21baf77a09ab963fa2fee1d3abc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURI()&lt;/code&gt; differs from &lt;a href=&quot;encodeuricomponent&quot;&gt;&lt;code&gt;encodeURIComponent()&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="translated">&lt;code&gt;encodeURI()&lt;/code&gt; 상이 &lt;a href=&quot;encodeuricomponent&quot;&gt; &lt;code&gt;encodeURIComponent()&lt;/code&gt; &lt;/a&gt; 는 다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="7c423c9b97172f97ae484653ed99407b9f1ca361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURI()&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;encodeURI()&lt;/code&gt; 는 다음을 &lt;strong&gt;제외한&lt;/strong&gt; 모든 문자를 이스케이프합니다 .</target>
        </trans-unit>
        <trans-unit id="6d9f08e7012cddc9bb4aae7dc03dfb9d7c8c0699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURI&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;encodeURI&lt;/code&gt; 는 다음을 &lt;strong&gt;제외한&lt;/strong&gt; 모든 문자를 이스케이프합니다 .</target>
        </trans-unit>
        <trans-unit id="0b21bd24927735d5778208ba887405bc83796032" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent()&lt;/code&gt; differs from &lt;code&gt;encodeURI&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;encodeURIComponent()&lt;/code&gt; 는 다음과 같이 &lt;code&gt;encodeURI&lt;/code&gt; 와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="1fab764458ff93b0f2aac61af7740d7c11e0c1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent()&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;encodeURIComponent()&lt;/code&gt; 는 다음을 &lt;strong&gt;제외한&lt;/strong&gt; 모든 문자를 이스케이프합니다 .</target>
        </trans-unit>
        <trans-unit id="b6b3ec6e6a492e76b558de1a3d4bde2dfd341658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent&lt;/code&gt; differs from &lt;code&gt;encodeURI&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;encodeURIComponent&lt;/code&gt; 에서 다릅니다 &lt;code&gt;encodeURI&lt;/code&gt; 다음과 같다 :</target>
        </trans-unit>
        <trans-unit id="1b4027c5a1b271176f842f97cc4ba39af2defe6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encodeURIComponent&lt;/code&gt; escapes all characters &lt;strong&gt;except&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;encodeURIComponent&lt;/code&gt; 는 다음을 &lt;strong&gt;제외한&lt;/strong&gt; 모든 문자를 이스케이프합니다 .</target>
        </trans-unit>
        <trans-unit id="215ea8eb55071fe1cf9e4e79b9fbe718afa52c13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8b5b1b29b6a8ade130b7d7071b108d2daca6dedb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is a dangerous function, which executes the code it's passed with the privileges of the caller. If you run &lt;code&gt;eval()&lt;/code&gt; with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension. More importantly, a third-party code can see the scope in which &lt;code&gt;eval()&lt;/code&gt; was invoked, which can lead to possible attacks in ways to which the similar &lt;a href=&quot;function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; is not susceptible.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 은 위험한 함수로, 호출자의 권한으로 전달 된 코드를 실행합니다. 악의적 인 당사자의 영향을받을 수있는 문자열로 &lt;code&gt;eval()&lt;/code&gt; 을 실행 하면 웹 페이지 / 확장 권한으로 사용자의 컴퓨터에서 악의적 인 코드가 실행될 수 있습니다. 더 중요한 것은, 타사 코드는 &lt;code&gt;eval()&lt;/code&gt; 이 호출 된 범위를 볼 수 있으며, 이로 인해 유사한 &lt;a href=&quot;function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 가 취약하지 않은 방식으로 공격 이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d444ec6caafce939d286f3f1eb6742f337855da7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is a function property of the global object.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 은 전역 객체의 함수 속성입니다.</target>
        </trans-unit>
        <trans-unit id="00970df4a544864f72414b4fe0a99cc1510e380c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is also slower than the alternatives, since it has to invoke the JS interpreter, while many other constructs are optimized by modern JS engines.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 은 JS 인터프리터를 호출해야하기 때문에 대안보다 느리지 만 다른 많은 구문은 최신 JS 엔진에 의해 최적화됩니다.</target>
        </trans-unit>
        <trans-unit id="703776839e4af188e662e930ccb4c5749b90877a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is also slower than the alternatives, since it has to invoke the JavaScript interpreter, while many other constructs are optimized by modern JS engines.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 은 JavaScript 인터프리터를 호출해야하므로 다른 많은 구조가 최신 JS 엔진에 의해 최적화되어 있기 때문에 대안보다 느립니다.</target>
        </trans-unit>
        <trans-unit id="cf0f9927059fbe1fc1127829693be37c0a3a8dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; is slow and should be avoided whenever possible. Also, &lt;code&gt;strFormControl&lt;/code&gt; would have to hold an identifier, which is not required for names and &lt;code&gt;id&lt;/code&gt;s of form controls. It is better to use bracket notation instead:</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 은 느리므로 가능하면 피해야합니다. 또한 &lt;code&gt;strFormControl&lt;/code&gt; 은 양식 컨트롤의 이름과 &lt;code&gt;id&lt;/code&gt; 필요하지 않은 식별자를 보유해야 합니다. 대신 대괄호 표기법을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="89eac8b0f94f419df7d7b3c0485c55fef82a781b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval()&lt;/code&gt; returns the value of the last expression evaluated.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 은 마지막으로 평가 된 식의 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="600810b45ac04849e54a6d48db5380d1df16e701" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; as a string defining function requires &quot;(&quot; and &quot;)&quot; as prefix and suffix</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 문자열 정의 함수로서 eval 은 접 두부와 접미 부로 &quot;(&quot;및 &quot;)&quot;가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="608c30dcccba3dfc7943b5524689023a0fbb3ceb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt;: use it only if you know what you're doing</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; : 내가하고있는 일을 알고있는 경우에만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="37eb8fa0218312c3ee9899c3d31da19a58c268f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; acts like the &quot;for all&quot; quantifier in mathematics. In particular, for an empty array, it returns &lt;code&gt;true&lt;/code&gt;. (It is &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;vacuously true&lt;/a&gt; that all elements of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Empty_set#Properties&quot;&gt;empty set&lt;/a&gt; satisfy any given condition.)</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 는 수학에서 &quot;for all&quot;한정자처럼 작동합니다. 특히 빈 배열의 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Empty_set#Properties&quot;&gt;빈 집합&lt;/a&gt; 의 모든 요소가 주어진 조건을 충족 한다는 것은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;분명한 사실&lt;/a&gt; 입니다 .)</target>
        </trans-unit>
        <trans-unit id="55c5195c0cfda1cfa9da357fb761012eeb49aa77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; acts like the &quot;for all&quot; quantifier in mathematics. In particular, for an empty array, it returns true. (It is &lt;a href=&quot;http://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;vacuously true&lt;/a&gt; that all elements of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Empty_set#Properties&quot;&gt;empty set&lt;/a&gt; satisfy any given condition.)</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 것은 수학에서 &quot;모두를위한&quot;정량 자처럼 행동합니다. 특히 빈 배열의 경우 true를 반환합니다. ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Empty_set#Properties&quot;&gt;공백 세트&lt;/a&gt; 의 모든 요소가 주어진 조건을 만족 한다는 것은 &lt;a href=&quot;http://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;명백한 사실&lt;/a&gt; 입니다 .)</target>
        </trans-unit>
        <trans-unit id="891404fa41e6aae11b5779138b084a82fe81f62e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 는 그것이 호출되는 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9ccac465949f0e492ead02fef05e94ba6c4ec794" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 는 호출 된 형식화 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e3087b66f4b9e574f63c3fed9d188af769cc23e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; was added to the ECMA-262 standard in the 5&lt;sup&gt;th&lt;/sup&gt; edition, and it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;every&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 5에서 ECMA-262 표준에 첨가 하였다 &lt;sup&gt;번째&lt;/sup&gt; 버전, 그리고 표준의 다른 실시 예에 존재하지 않을 수있다. 스크립트 시작 부분에 다음 코드를 삽입하여이 문제를 해결할 수 있으며, 이를 기본적으로 지원하지 않는 &lt;code&gt;every&lt;/code&gt; 구현에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="99408d1717d0b5e5b375cff696ec223b859d9d87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;every&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;every&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values and that &lt;code&gt;callbackfn.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 것은 5 판에서 ECMA-262 표준에 추가되었습니다; 따라서 표준의 다른 구현에는 존재하지 않을 수 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 &lt;code&gt;every&lt;/code&gt; 구현을 사용할 수 있도록하여이 문제를 해결할 수 있습니다 . 이 알고리즘은 &lt;code&gt;Object&lt;/code&gt; 및 &lt;code&gt;TypeError&lt;/code&gt; 에 원래 값이 있고 &lt;code&gt;callbackfn.call&lt;/code&gt; 이 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt; 의 원래 값으로 평가 된다고 가정 할 때 ECMA-262, 5 판에 지정된 알고리즘입니다.</target>
        </trans-unit>
        <trans-unit id="5693b9d905ee483c02061dab44f0b7573db2bbe2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exception_var_1&lt;/code&gt;, &lt;code&gt;exception_var_2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exception_var_1&lt;/code&gt; , &lt;code&gt;exception_var_2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a3facaf044474f653c6aa42a5281dc1c816d34e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expr1&lt;/code&gt;, &lt;code&gt;expr2, expr3...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;expr1&lt;/code&gt; , &lt;code&gt;expr2, expr3...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8c2b372109f8df6e4890e3e96b9c114c9b22c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expr1&lt;/code&gt;, &lt;code&gt;expr2&lt;/code&gt;, &lt;code&gt;expr3&lt;/code&gt;...</source>
          <target state="translated">&lt;code&gt;expr1&lt;/code&gt; , &lt;code&gt;expr2&lt;/code&gt; , &lt;code&gt;expr3&lt;/code&gt; ...</target>
        </trans-unit>
        <trans-unit id="cc223973a504fc821ee91ae00447c7e6e5257008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exprT&lt;/code&gt;, &lt;code&gt;exprF&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exprT&lt;/code&gt; , &lt;code&gt;exprF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e634146ccb066a22c654e72d6518777b77cbe55c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false &amp;amp;&amp;amp; (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; is short-circuit evaluated to false.</source>
          <target state="translated">&lt;code&gt;false &amp;amp;&amp;amp; (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; 는 단락으로 거짓으로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="5e134ff37fc872f42a8b1e5eef59a551d6527ddf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the argument is (or will be coerced to) positive or negative &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 인수가 양수 또는 음수 &lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이거나 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 경우 false입니다 . 그렇지 않으면 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4390b42cc8144a9d2785547c1fe93b7e0127cb7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the argument is positive or negative &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 인수가 긍정 또는 부정 인 경우는 false &lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; ; 그렇지 않으면 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ab08eb4a28f7a7e73119b02f77d3ac35228a8e3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileName&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;fileName&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="0dc9688ea5ea1a0fcee112b9b829b8a277eae78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is a mutable method, it will change &lt;code&gt;this&lt;/code&gt; object itself, and return it, not just return a copy of it.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 은 변경 가능한 메소드이며, &lt;code&gt;this&lt;/code&gt; 객체 자체 를 변경 하고 사본 만 반환하는 것이 아니라 반환합니다.</target>
        </trans-unit>
        <trans-unit id="48f54546a2d209d77a06d2fef46bb0dd11ca0764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is a mutator method: it will change the array itself and return it, not a copy of it.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 은 mutator 메서드입니다. 배열 자체를 변경하고 복사본이 아닌 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2244ef1443d5b96b9e16546a26da7bd93f39dff3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is intentionally generic, it does not require that its &lt;code&gt;this&lt;/code&gt; value be an Array object.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 의도적으로 제네릭, 그것의 필요가 없습니다 &lt;code&gt;this&lt;/code&gt; 값이 Array 객체합니다.</target>
        </trans-unit>
        <trans-unit id="f4a3ca486fde38d256953f4821b7418b8489f960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt; is intentionally generic: it does not require that its &lt;code&gt;this&lt;/code&gt; value be an &lt;code&gt;Array&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 은 의도적으로 일반적입니다. &lt;code&gt;this&lt;/code&gt; 값이 &lt;code&gt;Array&lt;/code&gt; 객체 일 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="0e75a13d4dcb4c2b543db91637bdac58d1eb23b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; calls a provided &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each element in an array, and constructs a new array of all the values for which &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; returns &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;a value that coerces to &lt;code&gt;true&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; test are simply skipped, and are not included in the new array.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 제공된 호출 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 어레이의 각 요소의 기능을 한번하고있는 값보다도 새로운 배열 구축 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 반환 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;하는 강제 변환에 값을 &lt;code&gt;true&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 은 값이 할당 된 배열의 인덱스에 대해서만 호출됩니다. 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 테스트를 통과하지 못한 배열 요소 는 단순히 건너 뛰고 새 배열에 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9931eb055735f06ef92202cbff1c458a76c30a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in an array, and constructs a new array of all the values for which &lt;code&gt;callback&lt;/code&gt; returns &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;a value that coerces to &lt;code&gt;true&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the &lt;code&gt;callback&lt;/code&gt; test are simply skipped, and are not included in the new array.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 제공된 호출 &lt;code&gt;callback&lt;/code&gt; 어레이의 각 요소의 기능을 한번하고있는 값보다도 새로운 배열 구축 &lt;code&gt;callback&lt;/code&gt; 반환 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;하는 강제 변환에 값을 &lt;code&gt;true&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;callback&lt;/code&gt; 은 값이 할당 된 배열의 인덱스에 대해서만 호출됩니다. 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다. &lt;code&gt;callback&lt;/code&gt; 테스트를 통과하지 않은 배열 요소 는 간단히 건너 뛰어 새 배열에 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cb4070c4aa57dd9cc4cea03e95495a23fa00a0fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 는 호출 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0a8bc74b97e6a37b56b48708bcc6d54acffa7cbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 는 호출 된 형식화 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dcb7240b9b0c5996aed924c4d65ff740632936bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition. Therefore, it may not be present in all implementations of the standard.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 는 5 판에서 ECMA-262 표준에 추가되었습니다. 따라서 표준의 모든 구현에 존재하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="196ae0582902d699ef32320143b093b6f8a8e679" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;filter()&lt;/code&gt; in ECMA-262 implementations which do not natively support it. This algorithm is exactly equivalent to the one specified in ECMA-262, 5th edition, assuming that &lt;code&gt;fn.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind()&lt;/code&gt;&lt;/a&gt;, and that &lt;a href=&quot;push&quot;&gt;&lt;code&gt;Array.prototype.push()&lt;/code&gt;&lt;/a&gt; has its original value.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 가 5 판에서 ECMA-262 표준에 추가되었습니다. 따라서 표준의 모든 구현에 존재하지 않을 수도 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하면 기본적으로 지원하지 않는 ECMA-262 구현에서 &lt;code&gt;filter()&lt;/code&gt; 를 사용할 수 있습니다 . 이 알고리즘은 가정, ECMA-262, 5 판에 지정된 것과 정확히 동일하다 &lt;code&gt;fn.call&lt;/code&gt; 의 원래 값으로 평가 &lt;a href=&quot;../function/bind&quot;&gt; &lt;code&gt;Function.prototype.bind()&lt;/code&gt; &lt;/a&gt; , 그 &lt;a href=&quot;push&quot;&gt; &lt;code&gt;Array.prototype.push()&lt;/code&gt; &lt;/a&gt; 원래 값을 갖는다.</target>
        </trans-unit>
        <trans-unit id="ca6df0f89bd872fa089404a26641bda49ad386d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 는 호출 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4c7118cc9110fcbad2161e45e547d7d0573d2f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 는 호출 된 형식화 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="32f03428cf96c1472f765e850c9fa116c6b3524e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findIndex&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; 는 호출 된 형식화 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="11d5c35a35b4042381fd598510b58c08ec9985c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; was a non standard second argument only available in Gecko : &lt;var&gt;str&lt;/var&gt;.match(&lt;var&gt;regexp, flags&lt;/var&gt;)</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 Gecko에서만 사용 가능한 비표준 두 번째 인수입니다 : &lt;var&gt;str&lt;/var&gt; .match ( &lt;var&gt;regexp, flags&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="fa22972dd8b2049c3b74e2db623902d15ea6b989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; was a non standard second argument only available in Gecko : &lt;var&gt;str&lt;/var&gt;.search(&lt;var&gt;regexp, flags&lt;/var&gt;)</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 Gecko에서만 사용 가능한 비표준 두 번째 인수입니다 : &lt;var&gt;str&lt;/var&gt; .search ( &lt;var&gt;regexp, flags&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="6eb79e623cafc579061ffa3d7507c5996a293abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; was a non standard third argument only available in Gecko : &lt;var&gt;str&lt;/var&gt;.replace(&lt;var&gt;regexp&lt;/var&gt;|&lt;var&gt;substr&lt;/var&gt;, &lt;var&gt;newSubStr&lt;/var&gt;|&lt;var&gt;function, flags&lt;/var&gt;)</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 Gecko에서만 사용할 수있는 비표준 세 번째 인수입니다 : &lt;var&gt;str&lt;/var&gt; &lt;var&gt;newSubStr&lt;/var&gt; ( &lt;var&gt;regexp&lt;/var&gt; | &lt;var&gt;substr&lt;/var&gt; , newSubStr | &lt;var&gt;function, flags&lt;/var&gt; )</target>
        </trans-unit>
        <trans-unit id="fd5a8027993d656faa80570c5456d1dce5693040" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flatMap&lt;/code&gt; can be used as a way to add and remove items (modify the number of items) during a &lt;code&gt;map&lt;/code&gt;. In other words, it allows you to map &lt;em&gt;many items to many items&lt;/em&gt; (by handling each input item separately), rather than always &lt;em&gt;one-to-one&lt;/em&gt;. In this sense, it works like the opposite of &lt;a href=&quot;filter&quot;&gt;filter&lt;/a&gt;. Simply return a 1-element array to keep the item, a multiple-element array to add items, or a 0-element array to remove the item.</source>
          <target state="translated">&lt;code&gt;flatMap&lt;/code&gt; 은 추가하고시 항목 (항목 수를 수정)를 제거하는 방법으로 사용할 수있는 &lt;code&gt;map&lt;/code&gt; . 즉, 항상 &lt;em&gt;일대일이&lt;/em&gt; 아닌 각 입력 항목을 개별적으로 처리 &lt;em&gt;하여 많은 항목을 여러 항목&lt;/em&gt; 에 매핑 할 수 있습니다 . 이런 의미에서 &lt;a href=&quot;filter&quot;&gt;filter&lt;/a&gt; 의 반대처럼 작동합니다 . 항목을 유지하려면 요소가 1 개인 배열, 항목을 추가하려면 요소가 여러 개인 배열을, 항목을 제거하려면 요소가 0 개인 배열을 반환하면됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dadce4710263583bae4d6b17367b7bbc5b9b0b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; or not &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, or &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 는 &lt;code&gt;NaN&lt;/code&gt; 이거나 &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; , &lt;code&gt;3&lt;/code&gt; , &lt;code&gt;4&lt;/code&gt; , &lt;code&gt;5&lt;/code&gt; 또는 &lt;code&gt;0&lt;/code&gt; 이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="83e3ca26ee2fc73b8886ad494b8a3c91137c6e36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for await...of&lt;/code&gt; doesn't work with async iterators that are not async iterables.</source>
          <target state="translated">&lt;code&gt;for await...of&lt;/code&gt; 는 비동기 반복기가 아닌 비동기 반복기와 함께 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="55d9c567d1fb44edbb51b4f6e5fe2cd824f016ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for await...of&lt;/code&gt; loop also consumes sync iterables and generators. In that case it internally awaits emitted values before assign them to the loop control variable.</source>
          <target state="translated">&lt;code&gt;for await...of&lt;/code&gt; 루프는 동기화 이터 러블과 생성기를 소비합니다. 이 경우 루프 제어 변수에 할당하기 전에 방출 된 값을 내부적으로 기다립니다.</target>
        </trans-unit>
        <trans-unit id="621ea668ec4d59c0023fff8f56596614bf4f90d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 루프</target>
        </trans-unit>
        <trans-unit id="c684ce48c8d812f15369e4a493eca4e5496d6a46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; calls a provided &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each element in an array in ascending order. It is not invoked for index properties that have been deleted or are uninitialized. (For sparse arrays, &lt;a href=&quot;#sparseArray&quot;&gt;see example below&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 배열의 각 요소에 대해 제공된 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 함수를 오름차순으로 호출합니다 . 삭제되었거나 초기화되지 않은 인덱스 속성에 대해서는 호출되지 않습니다. (희소 배열의 경우 &lt;a href=&quot;#sparseArray&quot;&gt;아래 예를 참조하십시오&lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="61ac8916f2eb97628882e3c16c67a2d5584209d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; does not make a copy of the array before iterating.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 반복하기 전에 배열의 복사본을 만들지 않습니다.</target>
        </trans-unit>
        <trans-unit id="505e473e1c8501db66c179fe2b1fedcb11f696ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; does not mutate the array on which it is called (although &lt;code&gt;callback&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 그것이 호출되는 배열을 변경하지 않습니다 ( 호출되면 &lt;code&gt;callback&lt;/code&gt; 이 그렇게 할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="122cb2dd89516d084f4686e3ecf131715d2e7f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; does not mutate the array on which it is called. (However, &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; may do so)</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 호출 된 배열을 변경하지 않습니다. (단, &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 은 가능합니다)</target>
        </trans-unit>
        <trans-unit id="2c8f41d7ab222de50ea48c43d8c2fca696da45cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each array element; unlike &lt;a href=&quot;map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;reduce&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; it always returns the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and is not chainable. The typical use case is to execute side effects at the end of a chain.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 각 배열 요소에 대해 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 함수를 한 번씩 실행합니다 . &lt;a href=&quot;map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;reduce&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt; 와는 달리 항상 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값을 반환하고 체인 할 수 없습니다. 일반적인 사용 사례는 체인의 끝에서 부작용을 실행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="140bf08672d99e7b40deb6802e23f8969e7c2afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function once for each element in the &lt;code&gt;Set&lt;/code&gt; object; it does not return a value.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 &lt;code&gt;Set&lt;/code&gt; 객체의 각 요소에 대해 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 함수를 한 번씩 실행 합니다. 값을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8f318df590ff64ad8dd7b8d3ecdd2aef08f80d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each array element; unlike &lt;a href=&quot;map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;reduce&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; it always returns the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and is not chainable. The typical use case is to execute side effects at the end of a chain.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 각 배열 요소에 대해 &lt;code&gt;callback&lt;/code&gt; 함수를 한 번 실행합니다 . &lt;a href=&quot;map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;reduce&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt; 와 달리 항상 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값을 반환하며 체인 가능하지 않습니다. 일반적인 사용 사례는 체인 끝에서 부작용을 실행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="15d32f13145a9ff97ee2e682abbdd4776ccd249d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element in the &lt;code&gt;Set&lt;/code&gt; object; it does not return a value.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 &lt;code&gt;Set&lt;/code&gt; 객체의 각 요소에 대해 &lt;code&gt;callback&lt;/code&gt; 함수를 한 번 실행 합니다. 값을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e9e6d7b52dbc9c50a38e45b44bcab9cc49997800" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each typed array element; unlike &lt;a href=&quot;every&quot;&gt;&lt;code&gt;every()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;some&quot;&gt;&lt;code&gt;some()&lt;/code&gt;&lt;/a&gt; it, always returns the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 타입이 지정된 각 배열 요소에 대해 &lt;code&gt;callback&lt;/code&gt; 함수를 한 번 실행합니다 . &lt;a href=&quot;every&quot;&gt; &lt;code&gt;every()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;some&quot;&gt; &lt;code&gt;some()&lt;/code&gt; &lt;/a&gt;() 과 달리 항상 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6d99514785a66a9f4359da83a2ddc20e98c722d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; executes the provided &lt;code&gt;callback&lt;/code&gt; once for each element present in the array in ascending order. It is not invoked for index properties that have been deleted or are uninitialized (i.e. on sparse arrays).</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 배열에있는 각 요소에 대해 제공된 &lt;code&gt;callback&lt;/code&gt; 을 오름차순으로 실행합니다. 삭제되었거나 초기화되지 않은 인덱스 속성 (예 : 희소 배열)에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8d2c67472eea83a470614c382d174137cffcb87b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; was added to the ECMA-262 standard in the 5&lt;sup&gt;th&lt;/sup&gt; edition, and it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;forEach()&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 는 5 &lt;sup&gt;번째&lt;/sup&gt; 에디션 에서 ECMA-262 표준에 추가되었으며 표준의 모든 구현에 존재하지 않을 수 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 구현에서 &lt;code&gt;forEach()&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="38045490e0afb0ca144c992bf77a2cad99e4033d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;forEach()&lt;/code&gt; in implementations that don't natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;callback.call()&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 가 5 판 ECMA-262 표준에 추가되었습니다. 따라서 표준의 다른 구현에는 존재하지 않을 수 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 구현에서 &lt;code&gt;forEach()&lt;/code&gt; 를 사용할 수있게하여이 문제를 해결할 수 있습니다 . 이 알고리즘은 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 에&lt;/a&gt; 원래 값이 있고 &lt;code&gt;callback.call()&lt;/code&gt; 이 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; 의 원래 값으로 평가 된다고 가정 할 때 ECMA-262, 5 판에 지정된 알고리즘입니다 .</target>
        </trans-unit>
        <trans-unit id="b99ab58892f9484da11488a904d6063d972cd6bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; does not wait for promises. Kindly make sure you are aware of the implications while using promises(or async functions) as &lt;code&gt;forEach&lt;/code&gt; callback.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; 는 약속을 기다리지 않습니다. &lt;code&gt;forEach&lt;/code&gt; 콜백 으로 promise (또는 비동기 함수)를 사용하는 동안 의미를 알고 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="066c1e2d96d50172521b1ae46c75a9f2b8485324" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forEach&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element in the &lt;code&gt;Map&lt;/code&gt; object; it does not return a value.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; 는 &lt;code&gt;Map&lt;/code&gt; 객체의 각 요소에 대해 &lt;code&gt;callback&lt;/code&gt; 함수를 한 번 실행 합니다. 값을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ba33f3b489e4013319156f61afcc85d9e87bc69c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;freeze()&lt;/code&gt; returns the same object that was passed into the function. It &lt;em&gt;does not&lt;/em&gt; create a frozen copy.</source>
          <target state="translated">&lt;code&gt;freeze()&lt;/code&gt; 는 함수에 전달 된 것과 동일한 객체를 반환합니다. 그것은 &lt;em&gt;하지 않는&lt;/em&gt; 고정 된 복사본을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7e2f1ff38536e9c9e9a8136c2cdd2294572a1038" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fromIndex&amp;nbsp;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;fromIndex&amp;nbsp;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="bee6e19ad3c9099da8b9ab2424c4b2b5946d8cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fromIndex&lt;/code&gt; is greater than or equal to the array length</source>
          <target state="translated">&lt;code&gt;fromIndex&lt;/code&gt; 가 배열 길이보다 크거나 같습니다.</target>
        </trans-unit>
        <trans-unit id="6c937141dbd3191462f80c54be496e44e1992bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fromIndex&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;fromIndex&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="358cdb10e770108a8b2b3b281e873a6ad5335b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function*&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;function*&lt;/code&gt; 표현식</target>
        </trans-unit>
        <trans-unit id="90a85f3ea7f1c9dcc4a388cf90f234f42f13ff66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; (replacement)</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; (교체)</target>
        </trans-unit>
        <trans-unit id="d8799ddb01f20c5e14ad56d122cf4986814f3897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; declaration</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 선언</target>
        </trans-unit>
        <trans-unit id="4b1865c25c16f8ff52fcc0e153e75cf1961038e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 표현</target>
        </trans-unit>
        <trans-unit id="4a359f4c773eaf213776da6c135989fb617bed85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; Vs. &lt;code&gt;defineProperty&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 대를 얻을. &lt;code&gt;defineProperty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fbf2e02a7b2dc35a45872173748ff16b3bce11a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; vs. &lt;code&gt;defineProperty&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 대 &lt;code&gt;defineProperty&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53d3b8684e292ff6949ea8327e9c163e1bba65e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; must return an object or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; 는 객체 또는 &lt;code&gt;undefined&lt;/code&gt; 를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a675b0c321cf6b5904dc47877f2eec161a8731b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPrototypeOf&lt;/code&gt; method must return an object or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getPrototypeOf&lt;/code&gt; 메소드는 객체 또는 &lt;code&gt;null&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="801f0cf750aa9bea1079d2acc9918d26727d3ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; 은 이제 인스턴스 자체의 데이터 속성이 아닌 프로토 타입 접근 자 속성입니다.</target>
        </trans-unit>
        <trans-unit id="44f5763fb31f15b11a6fba466b8fb4cd8653a215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handler&lt;/code&gt;: an object that defines which operations will be intercepted and how to redefine intercepted operations.</source>
          <target state="translated">&lt;code&gt;handler&lt;/code&gt; : 가로채는 작업과 가로채는 작업을 재정의하는 방법을 정의하는 개체입니다.</target>
        </trans-unit>
        <trans-unit id="864a74d4da5b68e8fedfb93ead7e04a274d1b988" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hasOwnProperty&lt;/code&gt; returns true even if the value of the property is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hasOwnProperty&lt;/code&gt; 는 속성 값이 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 인 경우에도 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1784eeb21131a356713b8f2fc7dd33eab1982729" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fe1ee02a25dfb97bf42b7c74afece58cd943c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; , &lt;code&gt;second&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d7e43e3815d75bf8e8566e5254388513e8b3e43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hours&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;hours&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="9977172d403109221c163470004205c3655feb13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignoreCase&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;ignoreCase&lt;/code&gt; 는 이제 인스턴스 자체의 데이터 속성이 아닌 프로토 타입 접근 자 속성입니다.</target>
        </trans-unit>
        <trans-unit id="16f65165c4d8bc6321cfbce2d04807e2abe6c280" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, module declaration</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; , &lt;code&gt;export&lt;/code&gt; , 모듈 선언</target>
        </trans-unit>
        <trans-unit id="729f06e23eea04de4eb06501468f86352a9d8df4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="63089956eea3d1b5b12ee81c2484d81a752d0ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includes()&lt;/code&gt; method is intentionally generic. It does not require &lt;code&gt;this&lt;/code&gt; value to be an Array object, so it can be applied to other kinds of objects (e.g. array-like objects).</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; 메서드는 의도적으로 일반적입니다. &lt;code&gt;this&lt;/code&gt; 값 이 Array 객체 일 필요는 없으므로 다른 종류의 객체 (예 : 배열 유사 객체)에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7c7175c8b0be83e3f5c561485512895741c5f0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includes()&lt;/code&gt; method is intentionally generic. It does not require &lt;code&gt;this&lt;/code&gt; value to be an Array object, so it can be applied to other kinds of objects (e.g. array-like objects). The example below illustrates &lt;code&gt;includes()&lt;/code&gt; method called on the function's &lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; 메소드는 의도적으로 일반적입니다. &lt;code&gt;this&lt;/code&gt; 값 이 Array 객체 일 필요는 없으므로 다른 종류의 객체 (예 : 배열과 같은 객체)에 적용 할 수 있습니다. 아래 예제 는 함수의 &lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt; 객체 에서 호출 된 &lt;code&gt;includes()&lt;/code&gt; 메서드를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="379e18331c93ef94aa3c77faa0ac94bc7d417cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includes()&lt;/code&gt; used as a generic method</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; 일반적인 방법으로 사용되는 contains ()</target>
        </trans-unit>
        <trans-unit id="56e97b568cbc9fbfd601257310f762a373899fbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f0a72c71f73b90aaab7762c65221e8a0bf196685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; and case-sensitivity</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; 및 대소 문자 구분</target>
        </trans-unit>
        <trans-unit id="25533fe1dedd3d23ca89fb498c89238a1e15c359" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; compares &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; to elements of the Array using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality&quot;&gt;strict equality&lt;/a&gt; (the same method used by the &lt;code&gt;===&lt;/code&gt; or triple-equals operator).</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality&quot;&gt;완전 항등을&lt;/a&gt; 사용하여 &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; 를 Array의 요소와 비교합니다 ( &lt;code&gt;===&lt;/code&gt; 또는 triple-equals 연산자 에서 사용하는 것과 동일한 방법 ).</target>
        </trans-unit>
        <trans-unit id="66ff0e251d85a9886b9b96038a87352179a4ea29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the &lt;code&gt;===&lt;/code&gt; or triple-equals operator).</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; 는 &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;엄격한 동등성을&lt;/a&gt; 사용하여 &lt;code&gt;searchElement&lt;/code&gt; 를 Array의 요소와 비교합니다 ( &lt;code&gt;===&lt;/code&gt; 또는 triple-equals 연산자 에서 사용하는 것과 동일한 방법 ).</target>
        </trans-unit>
        <trans-unit id="fb945b69bce56c487bbd5ab28dc8600bdedc9b48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all browsers. You can work around this by utilizing the following code at the beginning of your scripts. This will allow you to use &lt;code&gt;indexOf()&lt;/code&gt; when there is still no native support. This algorithm matches the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../math/abs&quot;&gt;&lt;code&gt;Math.abs()&lt;/code&gt;&lt;/a&gt; have their original values.</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; 가 5 판에서 ECMA-262 표준에 추가되었습니다. 따라서 일부 브라우저에는 없을 수도 있습니다. 스크립트 시작 부분에 다음 코드를 사용하여이 문제를 해결할 수 있습니다. 그래도 네이티브 지원이없는 경우 &lt;code&gt;indexOf()&lt;/code&gt; 를 사용할 수 있습니다 . 이 알고리즘은 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../math/abs&quot;&gt; &lt;code&gt;Math.abs()&lt;/code&gt; &lt;/a&gt; 원래 값이 있다고 가정하고 ECMA-262, 5 판에 지정된 알고리즘과 일치 합니다.</target>
        </trans-unit>
        <trans-unit id="07b5bcc8ec621659ddc920118c5f84093d89b02d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf&lt;/code&gt; compares &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;indexOf&lt;/code&gt; 는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;완전 항등&lt;/a&gt; (=== 또는 삼중 항등 연산자에서 사용하는 것과 동일한 방법)을 사용 하여 &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; 를 유형이 지정된 배열의 요소와 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="1bd0640cfd2574c0ffeb45d92a4029c92577a53c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;indexOf&lt;/code&gt; 는 &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;엄격한 동등성을&lt;/a&gt; 사용하여 &lt;code&gt;searchElement&lt;/code&gt; 를 형식화 된 배열의 요소와 비교합니다 (=== 또는 triple-equals 연산자에서 사용하는 것과 동일한 방법).</target>
        </trans-unit>
        <trans-unit id="9f42a3aed7d7d9b7c92972f3e06ccc9b78cb9a51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialValue&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;initialValue&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="a492a507d4fb6b8bf3add697f0744aef2eb88479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt;: A &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object that contains all the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;instance&lt;/code&gt; : &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;내 보낸 WebAssembly 함수&lt;/a&gt; 가 모두 포함 된 &lt;a href=&quot;instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; &lt;/a&gt; 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="ceed7d000d9c56cb7c6c5a7157bded93d8365bec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance&lt;/code&gt;: A &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object that contains all the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly functions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;instance&lt;/code&gt; : &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;내 보낸&lt;/a&gt; 모든 WebAssembly 함수 를 포함 하는 &lt;a href=&quot;instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; &lt;/a&gt; 객체 .</target>
        </trans-unit>
        <trans-unit id="3f40adc2d9149e7d2788a10342a44a60c6112844" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceof&lt;/code&gt; and multiple context (e.g. frames or windows)</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; 및 다중 컨텍스트 (예 : 프레임 또는 창)</target>
        </trans-unit>
        <trans-unit id="06143afd51c718da002970cafe8b8e2ee936ec97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceof&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="765a0abe9ec887d90d01da8f0a01bea77faeb433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instanceof&lt;/code&gt; vs &lt;code&gt;isArray&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; vs &lt;code&gt;isArray&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="939c9dc0aaff8bb1d4fe5d5b9c115e46e8c4a06f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isFinite&lt;/code&gt; is a function property of the global object.</source>
          <target state="translated">&lt;code&gt;isFinite&lt;/code&gt; 는 전역 객체의 함수 속성입니다.</target>
        </trans-unit>
        <trans-unit id="08e2a027e362ac052d31a7654b0c37de6f2514f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isFinite&lt;/code&gt; is a top-level function and is not associated with any object.</source>
          <target state="translated">&lt;code&gt;isFinite&lt;/code&gt; 는 최상위 함수이며 어떤 객체와도 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="899d654d9872fce9b9b929b5bc4064e7c4fa5ae7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isPrototypeOf()&lt;/code&gt; differs from the &lt;a href=&quot;../../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt; operator. In the expression &quot;&lt;code&gt;object instanceof AFunction&lt;/code&gt;&quot;, the &lt;code&gt;object&lt;/code&gt; prototype chain is checked against &lt;code&gt;AFunction.prototype&lt;/code&gt;, not against &lt;code&gt;AFunction&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;isPrototypeOf()&lt;/code&gt; 는 &lt;a href=&quot;../../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt; 연산자 와 다릅니다 . &quot; &lt;code&gt;object instanceof AFunction&lt;/code&gt; &quot; 표현식 에서 &lt;code&gt;object&lt;/code&gt; 프로토 타입 체인은 &lt;code&gt;AFunction&lt;/code&gt; 자체가 아니라 &lt;code&gt;AFunction.prototype&lt;/code&gt; 에 대해 검사 됩니다.</target>
        </trans-unit>
        <trans-unit id="24981d89f983eafa2f7ed0ce22611f6a983b331b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isPrototypeOf()&lt;/code&gt; method, along with the &lt;a href=&quot;../../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt; operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.</source>
          <target state="translated">&lt;code&gt;isPrototypeOf()&lt;/code&gt; 메서드와 &lt;a href=&quot;../../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt; 연산자는 특히 특정 프로토 타입 체인에서 파생 된 개체를 처리 할 때만 작동 할 수있는 코드 (예 : 특정 메서드 또는 속성이 해당 개체에 존재 함)를 보장하는 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="643e854dbba61944e3251da5b8f1a5f3449c237a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;item1, item2, &lt;em&gt;...&lt;/em&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;item1, item2, &lt;em&gt;...&lt;/em&gt;&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="b34594d7601e63262cea8313640fe4f1931e6e5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; 는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;완전 항등&lt;/a&gt; (=== 또는 삼중 항등 연산자에서 사용하는 것과 동일한 방법)을 사용 하여 &lt;code&gt;&lt;var&gt;searchElement&lt;/var&gt;&lt;/code&gt; 를 유형이 지정된 배열의 요소와 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="abd9081c42cfb8c91e1feb43ab7884a70b776093" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; 는 &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;엄격한 동등성을&lt;/a&gt; 사용하여 &lt;code&gt;searchElement&lt;/code&gt; 를 Array의 요소와 비교합니다 (=== 또는 triple-equals 연산자에서 사용하는 것과 동일한 방법).</target>
        </trans-unit>
        <trans-unit id="853e89e96e9dcfddbfd8fdd2c68dbd41b39b2ccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the Array using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; 는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Using_the_Equality_Operators&quot;&gt;완전 같음&lt;/a&gt; (=== 또는 triple-equals 연산자에서 사용하는 것과 동일한 방법)을 사용 하여 &lt;code&gt;searchElement&lt;/code&gt; 를 Array의 요소와 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="d600a7491d52a042a3747106c14e80e1c228eb1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; compares &lt;code&gt;searchElement&lt;/code&gt; to elements of the typed array using &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;strict equality&lt;/a&gt; (the same method used by the ===, or triple-equals, operator).</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; 는 &lt;a href=&quot;../../operators/comparison_operators#Using_the_Equality_Operators&quot;&gt;엄격한 동등성을&lt;/a&gt; 사용하여 &lt;code&gt;searchElement&lt;/code&gt; 를 유형이 지정된 배열의 요소와 비교합니다 (=== 또는 트리플 등호 연산자에서 사용하는 것과 동일한 방법).</target>
        </trans-unit>
        <trans-unit id="c27aa6a59fc580db6f23a5fe5efe997412979d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastIndexOf&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;lastIndexOf&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../math/floor&quot;&gt;&lt;code&gt;Math.floor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../math/abs&quot;&gt;&lt;code&gt;Math.abs&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../math/min&quot;&gt;&lt;code&gt;Math.min&lt;/code&gt;&lt;/a&gt; have their original values.</source>
          <target state="translated">&lt;code&gt;lastIndexOf&lt;/code&gt; 는 5 판에서 ECMA-262 표준에 추가되었습니다. 따라서 표준의 다른 구현에는 존재하지 않을 수 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 구현에서 &lt;code&gt;lastIndexOf&lt;/code&gt; 를 사용할 수 있도록하여이 문제를 해결할 수 있습니다 . 이 알고리즘은 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../math/floor&quot;&gt; &lt;code&gt;Math.floor&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../math/abs&quot;&gt; &lt;code&gt;Math.abs&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../math/min&quot;&gt; &lt;code&gt;Math.min&lt;/code&gt; &lt;/a&gt; 이 원래 값을 갖는다 고 가정 할 때 ECMA-262, 5 판에 지정된 알고리즘입니다 .</target>
        </trans-unit>
        <trans-unit id="e1494054b2864371304dcf168fa269c57a88dc12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number excludes the &lt;a href=&quot;../../functions/rest_parameters&quot;&gt;rest parameter&lt;/a&gt; and only includes parameters before the first one with a default value. By contrast, &lt;a href=&quot;../../functions/arguments/length&quot;&gt;&lt;code&gt;arguments.length&lt;/code&gt;&lt;/a&gt; is local to a function and provides the number of arguments actually passed to the function.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 는 함수 객체의 속성이며 함수가 예상하는 인수 수, 즉 형식 매개 변수의 수를 나타냅니다. 이 숫자는 &lt;a href=&quot;../../functions/rest_parameters&quot;&gt;나머지 매개 변수를&lt;/a&gt; 제외하고 기본값이있는 첫 번째 매개 변수 이전의 매개 변수 만 포함합니다. 대조적으로 &lt;a href=&quot;../../functions/arguments/length&quot;&gt; &lt;code&gt;arguments.length&lt;/code&gt; &lt;/a&gt; 는 함수에 로컬이며 실제로 함수에 전달 된 인수의 수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f359b5e345426d9bf6ba59f0790a690636177b65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt; is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number excludes the &lt;a href=&quot;../../functions/rest_parameters&quot;&gt;rest parameter&lt;/a&gt; and only includes parameters before the first one with a default value. By contrast, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length&quot;&gt;&lt;code&gt;arguments.length&lt;/code&gt;&lt;/a&gt; is local to a function and provides the number of arguments actually passed to the function.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 는 함수 객체의 속성이며 함수에 필요한 인수 수, 즉 형식 매개 변수의 수를 나타냅니다. 이 숫자는 &lt;a href=&quot;../../functions/rest_parameters&quot;&gt;나머지 매개 변수를&lt;/a&gt; 제외하고 첫 번째 매개 변수 앞에 기본값이있는 매개 변수 만 포함합니다. 반대로, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length&quot;&gt; &lt;code&gt;arguments.length&lt;/code&gt; &lt;/a&gt; 는 함수에 국한되며 실제로 함수에 전달 된 인수 수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="61223d52bfa6ffb8d595751e1469103ccd1961ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the &lt;a href=&quot;var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; keyword, which defines a variable globally, or locally to an entire function regardless of block scope.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 당신이 사용되는 블록, 문, 또는 표현 범위가 제한되는 변수를 선언 할 수 있습니다. 이것은 블록 범위와 상관없이 변수를 전체적으로 또는 전체적으로 로컬로 정의하는 &lt;a href=&quot;var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt; 키워드 와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="822fcb1bfcb03aa68b4ab3d211f4de95c6048a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; allows you to declare variables that are limited to the scope of a &lt;a href=&quot;../statements/block&quot;&gt;block&lt;/a&gt; statement, or expression on which it is used, unlike the &lt;a href=&quot;../statements/var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; keyword, which declares a variable globally, or locally to an entire function regardless of block scope. The other difference between &lt;a href=&quot;../statements/var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;let&lt;/code&gt; is that the latter is initialized to a value only when a &lt;a href=&quot;#Temporal_dead_zone&quot;&gt;parser evaluates it (see below)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 을 사용하면 변수를 전역 적으로 선언하거나 블록 범위에 관계없이 전체 함수에 대해 로컬로 선언하는 &lt;a href=&quot;../statements/var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt; 키워드 와 달리 &lt;a href=&quot;../statements/block&quot;&gt;블록&lt;/a&gt; 문 또는 사용되는 표현식 의 범위로 제한되는 변수를 선언 할 수 있습니다 . &lt;a href=&quot;../statements/var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;let&lt;/code&gt; 의 다른 차이점 은 후자는 &lt;a href=&quot;#Temporal_dead_zone&quot;&gt;파서가 평가할&lt;/a&gt; 때만 값으로 초기화된다는 것입니다 (아래 참조) .</target>
        </trans-unit>
        <trans-unit id="28700d9a888e1b6a0cec7993d7cfde5ee80c0d86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; bindings are created at the top of the (block) scope containing the declaration, commonly referred to as &quot;hoisting&quot;. Unlike variables declared with &lt;code&gt;&lt;a href=&quot;var#var_hoisting&quot;&gt;var&lt;/a&gt;&lt;/code&gt;, which will start with the value &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; variables are &lt;em&gt;not&lt;/em&gt; initialized until their definition is evaluated. Accessing the variable before the initialization results in a &lt;code&gt;&lt;a href=&quot;../global_objects/referenceerror&quot;&gt;ReferenceError&lt;/a&gt;&lt;/code&gt;. The variable is in a &quot;temporal dead zone&quot; from the start of the block until the initialization is processed.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 바인딩 선언문을 포함하는 (블록) 범위의 상단에 생성되며, 일반적으로 &quot;ㅏ&quot;이라한다. 로 선언 된 변수와 달리 &lt;code&gt;&lt;a href=&quot;var#var_hoisting&quot;&gt;var&lt;/a&gt;&lt;/code&gt; 값으로 시작, &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; 변수가있다 &lt;em&gt;하지&lt;/em&gt; 그들의 정의가 평가 될 때까지 초기화. 초기화 전에 변수에 액세스하면 &lt;code&gt;&lt;a href=&quot;../global_objects/referenceerror&quot;&gt;ReferenceError&lt;/a&gt;&lt;/code&gt; 가 발생 합니다. 변수는 블록의 시작부터 초기화가 처리 될 때까지 &quot;임시 데드 존&quot;에 있습니다.</target>
        </trans-unit>
        <trans-unit id="6634b62facb18e92b00a216b96f06a1e139dc81a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, variable statement</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; , &lt;code&gt;const&lt;/code&gt; , 변수 문장</target>
        </trans-unit>
        <trans-unit id="e72e4b1e66e02de9140db23dd83df205ea597263" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="d7f9cffd4f74afa4801161ace29d01cb665195a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lineNumber&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;lineNumber&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="e712bfe6ecb688ba32226dbefb5354e6d725e103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locale&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; parameter definitions.</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt; 및 &lt;code&gt;option&lt;/code&gt; 매개 변수 정의.</target>
        </trans-unit>
        <trans-unit id="60a815eab185eaffdecdce195568be8a4df143ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locale&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8b1219aab945d5132e5f2b35f5244596fcaec49d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeCompare()&lt;/code&gt; enables case-insensitive sorting for an array.</source>
          <target state="translated">&lt;code&gt;localeCompare()&lt;/code&gt; 는 배열에 대해 대소 문자를 구분하지 않는 정렬을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="b20a44dfcca998c5ef503eff3becc16118b7b710" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeCompare&lt;/code&gt; enables a case-insensitive sort of an array.</source>
          <target state="translated">&lt;code&gt;localeCompare&lt;/code&gt; 는 대소 문자를 구분하지 않는 배열을 가능하게합니다.</target>
        </trans-unit>
        <trans-unit id="da6bd07002699a30e46870ede88d7a681743ae9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locales&lt;/code&gt; argument</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 인수</target>
        </trans-unit>
        <trans-unit id="49d2c825203adc463bf3d692bed66344507e517f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locales&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="c04fc9f45a7c9cb08466db65c0f83719b0340636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;flatMap()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map()&lt;/code&gt; 및 &lt;code&gt;flatMap()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7d933424e1b1c5d9493824146a1599d7add5d14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map()&lt;/code&gt; does not mutate the typed array on which it is called (although &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;map()&lt;/code&gt; 은 호출되는 형식화 된 배열을 변경하지 않습니다 ( &lt;code&gt;&lt;var&gt;mapFn&lt;/var&gt;&lt;/code&gt; 이 호출되면 그렇게 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="25b1070a11e663243cc897c90af46f99c6df445c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 및 &lt;code&gt;flatMap&lt;/code&gt; 지도</target>
        </trans-unit>
        <trans-unit id="e57a3fd231e88a7547f9de2db947f8cada7aef65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; calls a provided &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function &lt;strong&gt;once for each element&lt;/strong&gt; in an array, in order, and constructs a new array from the results. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is invoked only for indexes of the array which have assigned values (including &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 은 배열의 &lt;strong&gt;각 요소&lt;/strong&gt; 에 &lt;strong&gt;대해&lt;/strong&gt; 제공된 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 함수 를 순서대로 호출 하고 결과에서 새 배열을 생성합니다. &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 은 값이 할당 된 배열의 인덱스에 대해서만 호출됩니다 ( &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 포함 ).&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96cc5b436c888c25476cb2dbf8e94df66eabfc8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; calls a provided &lt;code&gt;callback&lt;/code&gt; function &lt;strong&gt;once for each element&lt;/strong&gt; in an array, in order, and constructs a new array from the results. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values, including &lt;a href=&quot;../undefined&quot;&gt;undefined&lt;/a&gt;. It is not called for missing elements of the array (that is, indexes that have never been set, which have been deleted or which have never been assigned a value).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 은 배열의 &lt;strong&gt;각 요소&lt;/strong&gt; 에 &lt;strong&gt;대해&lt;/strong&gt; 제공된 &lt;code&gt;callback&lt;/code&gt; 함수 를 순서대로 &lt;strong&gt;한 번&lt;/strong&gt; 호출 하고 결과에서 새 배열을 구성합니다. &lt;code&gt;callback&lt;/code&gt; 은 &lt;a href=&quot;../undefined&quot;&gt;undefined를&lt;/a&gt; 포함하여 값을 할당 한 배열의 인덱스에 대해서만 호출됩니다 . 배열의 누락 된 요소 (즉, 설정되지 않았거나 삭제되었거나 값이 지정되지 않은 인덱스)에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e0c23f070663cb2915f56370ea143dc4868c5938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; does not mutate the array on which it is called (although &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 은 호출되는 배열을 변경하지 않습니다 ( &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 이 호출되면 그렇게 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="e17ed71a37d5b65ffb0eeb6231a2013dd37931f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; does not mutate the array on which it is called (although &lt;code&gt;callback&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 은 그것이 호출되는 배열을 변경하지 않습니다 ( 호출되면 &lt;code&gt;callback&lt;/code&gt; 이 그렇게 할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="55e8ffd2f0cfc3a7a058db12dcbf51d63c959f0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; does not mutate the typed array on which it is called (although &lt;code&gt;callback&lt;/code&gt;, if invoked, may do so).</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 은 그것이 호출되는 타입이 지정된 배열을 변경하지 않습니다 ( 호출되면 &lt;code&gt;callback&lt;/code&gt; 이 그렇게 할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="cafa7ca5004263e211a23b1ac00fee8761e93337" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition. Therefore, it may not be present in all implementations of the standard.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 는 5 판에서 ECMA-262 표준에 추가되었습니다. 따라서 표준의 모든 구현에 존재하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5cc420628951d5ff30d148e62effd16d526a1f18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;map&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;callback.call&lt;/code&gt; evaluates to the original value of &lt;code&gt;&lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 는 5 판에서 ECMA-262 표준에 추가되었습니다. 따라서 표준의 모든 구현에 존재하지 않을 수도 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 구현에서 &lt;code&gt;map&lt;/code&gt; 을 사용할 수 있도록하여이 문제를 해결할 수 있습니다 . 이 알고리즘은 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; 에&lt;/a&gt; 원래 값이 있고 &lt;code&gt;callback.call&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 의 원래 값으로 평가 된다고 가정하고 ECMA-262, 5 판에 지정된 알고리즘입니다 .</target>
        </trans-unit>
        <trans-unit id="229ea5beb0c00342e4f861fcdb34073bc4227946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapFn&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;mapFn&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7423960ad7b7cd8782f87524a1f286508f9169eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="54687aeffccec4fbf3906cafca5811891cf8de0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;milliseconds&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;milliseconds&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7bec0eddee15fcea03a00fc66c2039b6f38a0780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minutes&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;minutes&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cab863f9c8e7a621ab3319be4113367dd1c08e73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again or shared via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; : 컴파일 된 WebAssembly 모듈을 나타내는 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; 객체입니다. 이 &lt;code&gt;Module&lt;/code&gt; 은 다시 인스턴스화하거나 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()&lt;/a&gt; 를 통해 공유 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5689a43f501cd71795d1d667f7206c15c2e1e8cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again or shared via &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; : 컴파일 된 WebAssembly 모듈을 나타내는 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; 개체입니다. 이 &lt;code&gt;Module&lt;/code&gt; 은 다시 인스턴스화하거나 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()&lt;/a&gt; 를 통해 공유 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="570037a5d65dbd849625a8cab9872a559b518e7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again, shared via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Caching_modules&quot;&gt;cached in IndexedDB&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; : 컴파일 된 WebAssembly 모듈을 나타내는 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; 객체입니다. 이 &lt;code&gt;Module&lt;/code&gt; 은 다시 인스턴스화 하거나 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()&lt;/a&gt; 를 통해 공유 하거나 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Caching_modules&quot;&gt;IndexedDB에 캐시&lt;/a&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fc134d6450f86e7a6724daf78b78adb312805c57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: A &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled WebAssembly module. This &lt;code&gt;Module&lt;/code&gt; can be instantiated again, shared via &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Caching_modules&quot;&gt;cached in IndexedDB&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; : 컴파일 된 WebAssembly 모듈을 나타내는 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; 개체입니다. 이 &lt;code&gt;Module&lt;/code&gt; 은 다시 인스턴스화 하거나 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt; &lt;code&gt;postMessage()&lt;/code&gt; &lt;/a&gt; 를 통해 공유 하거나 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Caching_modules&quot;&gt;IndexedDB에 캐시&lt;/a&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df19f489f733c86b7b7bcd72782bc7a2e1800a64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a1acc7d30a7c5dacbd2d1aab8b125592a7291c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiline&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;multiline&lt;/code&gt; 은 이제 인스턴스 자체의 데이터 속성이 아닌 프로토 타입 접근 자 속성입니다.</target>
        </trans-unit>
        <trans-unit id="e666c8f51154bbcf68f816b9dfc58ee28346e8a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mutable&lt;/code&gt;: A boolean value that determines whether the global is mutable or not. By default, this is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mutable&lt;/code&gt; : 전역이 변경 가능한지 여부를 결정하는 부울 값입니다. 기본적으로 이것은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="32a18f6c94a79fb46945b65f077d9c265b494b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="85f59cdf7d685517bc3f5651df6cf2d502964309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newSubStr&lt;/code&gt; (replacement)</source>
          <target state="translated">&lt;code&gt;newSubStr&lt;/code&gt; (교체)</target>
        </trans-unit>
        <trans-unit id="d17007687f3a99f714d9d260f795e29a2b0ec361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newTarget&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;newTarget&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="30d3fa6853f76c881084956d744a7e1c78f35fa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="4abe21d3341151eecd4969352592801fdea88152" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="5244ccb067ab9d4431750169d11696d9bf36936a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onFulfilled&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;onFulfilled&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="9f726bced0ba01ba4cfbd1e6ee1918fc41560308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onRejected&amp;nbsp;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;onRejected&amp;nbsp;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f881a71ea084724bb42dd595f47466ac0583c43c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onRejected&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;onRejected&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cb95c8ee705426c47ba89027128d9ef4168b36c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; argument</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수</target>
        </trans-unit>
        <trans-unit id="3210cfefc5d87bfad12d64d89fcf375275f108b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="4d5084bd7d4339ac2ccb75678c4a506c3a413f08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;padString&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;padString&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8088aff0e0317cef88623399f1d8160d8c5c6bff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parentModule.js&lt;/code&gt;: acting as an aggregator (and doing nothing else)</source>
          <target state="translated">&lt;code&gt;parentModule.js&lt;/code&gt; : 애그리 게이터 역할 (다른 작업은하지 않음)</target>
        </trans-unit>
        <trans-unit id="60a360387f23771e444dd7daeed80d461294ce6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse&lt;/code&gt;: ISO 8601 format</source>
          <target state="translated">&lt;code&gt;parse&lt;/code&gt; : ISO 8601 형식</target>
        </trans-unit>
        <trans-unit id="0947306acda4ddd1a5cf6f10a435ca59aa3ce255" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; and &lt;code&gt;BigInt&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 및 &lt;code&gt;BigInt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a8927b9e38c8bc77bf97f12457660717a0ab643" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; can also parse and return &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 &lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; 를&lt;/a&gt; 구문 분석하고 반환 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="09d1686c4d9e40c080766590b5d9888d77570f77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; can also parse and return the value &lt;code&gt;Infinity&lt;/code&gt;. You can use the &lt;a href=&quot;isfinite&quot;&gt;&lt;code&gt;isFinite&lt;/code&gt;&lt;/a&gt; function to determine if the result is a finite number (not &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, or &lt;code&gt;NaN&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 &lt;code&gt;Infinity&lt;/code&gt; 값을 구문 분석하고 반환 할 수도 있습니다 . &lt;a href=&quot;isfinite&quot;&gt; &lt;code&gt;isFinite&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 결과가 유한 수 ( &lt;code&gt;Infinity&lt;/code&gt; , &lt;code&gt;-Infinity&lt;/code&gt; 또는 &lt;code&gt;NaN&lt;/code&gt; 아님) 인지 판별 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="40fddb6d720adba759e183b974832e39d40b5e5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; converts &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; syntax to &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/a&gt;, losing precision. This happens because the trailing &lt;code&gt;n&lt;/code&gt; character is discarded.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 &lt;a href=&quot;bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 구문을 &lt;a href=&quot;number&quot;&gt; &lt;code&gt;Numbers&lt;/code&gt; &lt;/a&gt; 로 변환 하여 정밀도를 잃습니다. 이것은 후행 &lt;code&gt;n&lt;/code&gt; 문자가 삭제 되기 때문에 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="ed06ab8d1ef80cb9d0c2aecb83f1ac769b32d235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; is a function property of the global object.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 전역 개체의 함수 속성입니다.</target>
        </trans-unit>
        <trans-unit id="e833e009bf6d96e7580e00e81e79474c6101d516" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; is a top-level function and is not associated with any object.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 최상위 함수이며 어떤 객체와도 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="c752e1cc1ed89d3cc5b1e95b1fa353bbff053244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; is also able to parse an object if it has a &lt;code&gt;toString&lt;/code&gt; or &lt;code&gt;valueOf&lt;/code&gt; method defined. The returned value is the same as if &lt;code&gt;parseFloat&lt;/code&gt; had been called on the result of calling that method.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 &lt;code&gt;toString&lt;/code&gt; 또는 &lt;code&gt;valueOf&lt;/code&gt; 메소드가 정의 된 경우 오브젝트를 구문 분석 할 수도 있습니다 . 리턴 된 값은 해당 메소드 호출 결과에서 &lt;code&gt;parseFloat&lt;/code&gt; 가 호출 된 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="512af01629ed1f2f64dbc4d20a68658cce4d04cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; parses its argument, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 인수를 구문 분석하고 부동 소수점 숫자를 리턴합니다. 부호 (+ 또는-), 숫자 (0-9), 소수점 또는 지수 이외의 문자가 발견되면 해당 포인트까지 값을 리턴하고 해당 문자 및 모든 후속 문자를 무시합니다. 선행 및 후행 공백이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="dc4d1144569338664864cf74314032a54052defe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; returning &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; &lt;code&gt;NaN&lt;/code&gt; 을 반환하는 parseFloat</target>
        </trans-unit>
        <trans-unit id="c564d64ddcd2e6b477aebac437fd30fc7d3c9ab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; returning NaN</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; NaN을 반환하는 플로트 플로트</target>
        </trans-unit>
        <trans-unit id="7b82697d079ee451f8d08adc44b466d16a58f984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; returning a number</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 숫자를 반환</target>
        </trans-unit>
        <trans-unit id="debdd5e01ab62bc3885c17016a45f499580cae76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFloat&lt;/code&gt; will parse non-string objects if they have a &lt;a href=&quot;object/tostring&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;object/valueof&quot;&gt;&lt;code&gt;valueOf&lt;/code&gt;&lt;/a&gt; method. The returned value is the same as if &lt;code&gt;parseFloat&lt;/code&gt; had been called on the result of those methods.</source>
          <target state="translated">&lt;code&gt;parseFloat&lt;/code&gt; 는 &lt;a href=&quot;object/tostring&quot;&gt; &lt;code&gt;toString&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;object/valueof&quot;&gt; &lt;code&gt;valueOf&lt;/code&gt; &lt;/a&gt; 메서드 가있는 경우 문자열이 아닌 개체를 구문 분석 합니다. 반환 된 값은 해당 메서드의 결과에 대해 &lt;code&gt;parseFloat&lt;/code&gt; 가 호출 된 것과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b9cc97bca43306de8337457eb72736b3da3c5cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseInt&lt;/code&gt; doesn't work with &lt;a href=&quot;../lexical_grammar#Numeric_separators&quot;&gt;numeric separators&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; 는 &lt;a href=&quot;../lexical_grammar#Numeric_separators&quot;&gt;숫자 구분 기호&lt;/a&gt; 와 함께 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8ad844b7b48b7392f9e0839617c1cb44f0467d5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseInt&lt;/code&gt; understands exactly two signs: &lt;code&gt;+&lt;/code&gt; for positive, and &lt;code&gt;-&lt;/code&gt; for negative (since ECMAScript 1). It is done as an initial step in the parsing after whitespace is removed. If no signs are found, the algorithm moves to the following step; otherwise, it removes the sign and runs the number-parsing on the rest of the string.</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; 는 정확히 두 개의 기호를 이해합니다 : &lt;code&gt;+&lt;/code&gt; 는 양수, &lt;code&gt;-&lt;/code&gt; 는 음수 (ECMAScript 1부터). 공백이 제거 된 후 구문 분석의 초기 단계로 수행됩니다. 징후가 없으면 알고리즘은 다음 단계로 이동합니다. 그렇지 않으면 부호를 제거하고 나머지 문자열에서 숫자 구문 분석을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="88486a3a2be7fe33994788c2f4fac2845014952c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pop&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;pop&lt;/code&gt; 은 의도적으로 일반적입니다. 이 메소드는 배열과 유사한 객체에 &lt;a href=&quot;../function/call&quot;&gt;호출&lt;/a&gt; 하거나 &lt;a href=&quot;../function/apply&quot;&gt;적용&lt;/a&gt; 할 수 있습니다 . 연속적인 0부터 시작하는 일련의 숫자 속성에서 마지막을 반영 하는 &lt;code&gt;length&lt;/code&gt; 속성을 포함하지 않는 객체는 의미있는 방식으로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a8fa3c796449db4a213d5cc2b7b10858c8fdb79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&amp;nbsp;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;position&amp;nbsp;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="64dc41635d1bb28845a6ca824a743234d18c19d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;position&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="789e43667203fa7c1507d9c5e506e81f5e11b37f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="73937dff81681f8e5ee4b1551bdfbe4f70c2c3a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;property_name&lt;/code&gt; is a string. The string does not have to be a valid identifier; it can have any value, e.g. &quot;1foo&quot;, &quot;!bar!&quot;, or even &quot; &quot; (a space).</source>
          <target state="translated">&lt;code&gt;property_name&lt;/code&gt; 은 문자열입니다. 문자열은 유효한 식별자 일 필요는 없습니다. &quot;1foo&quot;, &quot;! bar!&quot;또는 &quot;&quot;(공백)과 같은 값을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e6c5a92bf165d55a69dcdd790ec75642103d7b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prototype&lt;/code&gt;: Ordinary object (ES2015)</source>
          <target state="translated">&lt;code&gt;prototype&lt;/code&gt; : 일반 객체 (ES2015)</target>
        </trans-unit>
        <trans-unit id="412cbba62e710f9fda920ebc4cc9a20a08e11e2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push&lt;/code&gt; is intentionally generic. This method can be used with &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; on objects resembling arrays. The &lt;code&gt;push&lt;/code&gt; method relies on a &lt;code&gt;length&lt;/code&gt; property to determine where to start inserting the given values. If the &lt;code&gt;length&lt;/code&gt; property cannot be converted into a number, the index used is 0. This includes the possibility of &lt;code&gt;length&lt;/code&gt; being nonexistent, in which case &lt;code&gt;length&lt;/code&gt; will also be created.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 는 의도적으로 일반적입니다. 이 메소드는 배열과 유사한 객체에서 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; 와 함께 사용할 수 있습니다 . &lt;code&gt;push&lt;/code&gt; 방법은 의존 &lt;code&gt;length&lt;/code&gt; 주어진 값을 삽입하기 시작하는 위치를 결정하는 특성. 상기 중간 &lt;code&gt;length&lt;/code&gt; 재산권 번호로 변환 될 수 없으며, 사용 지수 0은이 가능성 포함한다 &lt;code&gt;length&lt;/code&gt; 케이스되는 존재의 존재, &lt;code&gt;length&lt;/code&gt; 또한 생성 될 것이다.</target>
        </trans-unit>
        <trans-unit id="ff437e1d27781fa8fde8129f602fde7e4d2dfb7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduce()&lt;/code&gt; and &lt;code&gt;concat()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reduce()&lt;/code&gt; 및 &lt;code&gt;concat()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36091360e3739c71f986e08864dc9e15354071d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduce()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the array, excluding holes in the array, receiving four arguments:</source>
          <target state="translated">&lt;code&gt;reduce()&lt;/code&gt; 는 배열에있는 각 요소에 대해 &lt;code&gt;callback&lt;/code&gt; 함수를 한 번 실행하며 배열의 구멍을 제외하고 4 개의 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="1b3c57cbbdda6a36df177dbe374329222c4c22c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;concat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;reduce&lt;/code&gt; 및 &lt;code&gt;concat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19f7daca497866407a804d2515195e9b50de7a0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduceRight&lt;/code&gt; executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; 는 배열의 구멍을 제외하고 배열에있는 각 요소에 대해 콜백 함수를 한 번 실행하여 초기 값 (또는 이전 콜백 호출의 값), 현재 요소의 값, 현재 색인 및 반복이 일어나는 배열.</target>
        </trans-unit>
        <trans-unit id="e183bcee9fa0461929a460275eb46398543ac401" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reduceRight&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;reduceRight&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; 가 5 판의 ECMA-262 표준에 추가되었습니다. 따라서 표준의 모든 구현에 존재하지 않을 수도 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 구현에서 &lt;code&gt;reduceRight&lt;/code&gt; 를 사용할 수 있도록하여이 문제를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="33516876493d7ab271acd01e5cd4df9b508bb817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regexp&lt;/code&gt; (pattern)</source>
          <target state="translated">&lt;code&gt;regexp&lt;/code&gt; (패턴)</target>
        </trans-unit>
        <trans-unit id="3b50cdeee94225760e2f7747c9332b8825ee7e2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacer&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="8370a5faedcbe09d86c0241713208a1aca553593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reverse&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;reverse&lt;/code&gt; 는 의도적으로 일반적입니다. 이 메서드는 배열과 유사한 개체에 &lt;a href=&quot;../function/call&quot;&gt;호출&lt;/a&gt; 하거나 &lt;a href=&quot;../function/apply&quot;&gt;적용&lt;/a&gt; 할 수 있습니다 . 연속 된 0 기반 숫자 속성에서 마지막을 반영 하는 &lt;code&gt;length&lt;/code&gt; 속성을 포함하지 않는 객체는 의미있는 방식으로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="edf09657a6cd9369f4157f23ba0b5f27d5b6de5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reviver&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;reviver&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="f0e904f8c24ecf682a6f5e63458cb1cbcee9bac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seconds&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;seconds&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="ff83357cc1b6979bd79773394fe6ea40a346fe11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;separator&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;separator&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7170a35caeba3e97dec9aca1b6e4db73bc4bd2fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shift&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;shift&lt;/code&gt; 는 의도적으로 일반적입니다. 이 메소드는 배열과 유사한 객체에 &lt;a href=&quot;../function/call&quot;&gt;호출&lt;/a&gt; 하거나 &lt;a href=&quot;../function/apply&quot;&gt;적용&lt;/a&gt; 할 수 있습니다 . 연속적인 0부터 시작하는 일련의 숫자 속성에서 마지막을 반영 하는 &lt;code&gt;length&lt;/code&gt; 속성을 포함하지 않는 객체는 의미있는 방식으로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="daf9baeb2c55cc5db46ec106ce982f897f699f52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; also treats &lt;code&gt;NaN&lt;/code&gt; arguments as &lt;code&gt;0&lt;/code&gt;, but when it is given negative values it counts backwards from the end of the string to find the indexes.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; 는 &lt;code&gt;NaN&lt;/code&gt; 인수도 &lt;code&gt;0&lt;/code&gt; 으로 처리 하지만 음수 값이 주어지면 문자열 끝부터 역순으로 계산하여 인덱스를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="160dad759dd0e75b44cd564955c2cdc5c93e7148" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; 는 한 문자열에서 텍스트를 추출하여 새 문자열을 반환합니다. 한 문자열의 텍스트를 변경해도 다른 문자열에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="76c7627f2bf06346ac2769ec493e76edbc0bb0ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts up to but not including &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt;. &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.slice(1, 4)&lt;/code&gt; extracts the second character through the fourth character (characters indexed &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; 는 &lt;code&gt;&lt;var&gt;endIndex&lt;/var&gt;&lt;/code&gt; 까지만 추출합니다 . &lt;code&gt;&lt;var&gt;str&lt;/var&gt;.slice(1, 4)&lt;/code&gt; 는 두 번째 문자에서 네 번째 문자 ( &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; , &lt;code&gt;3&lt;/code&gt; 인덱싱 된 문자 )를 추출합니다 .</target>
        </trans-unit>
        <trans-unit id="c5f97bc4748414b9af188076accbb28e2bc86ead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice()&lt;/code&gt; extracts up to but not including &lt;code&gt;endIndex&lt;/code&gt;. &lt;code&gt;str.slice(1, 4)&lt;/code&gt; extracts the second character through the fourth character (characters indexed 1, 2, and 3).</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; 는 &lt;code&gt;endIndex&lt;/code&gt; 까지는 추출합니다 . &lt;code&gt;str.slice(1, 4)&lt;/code&gt; 는 네 번째 문자 (인덱스 1, 2 및 3)를 통해 두 번째 문자를 추출합니다.</target>
        </trans-unit>
        <trans-unit id="c3e1099202446c7e4ab7ef63ac55d9f8ec063f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; does not alter the original array. It returns a shallow copy of elements from the original array. Elements of the original array are copied into the returned array as follows:</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 는 원래 배열을 변경하지 않습니다. 원래 배열에서 얕은 요소 복사본을 반환합니다. 원래 배열의 요소는 다음과 같이 반환 된 배열로 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="179b14e482dd2bf02a96de7ee24337cd6514dc71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; method can also be called to convert Array-like objects / collections to a new Array. You just bind the method to the object. The &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; inside a function is an example of an 'array-like object'.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 와 같은 객체 / 컬렉션을 새로운 Array로 변환하기 위해 slice 메소드를 호출 할 수도 있습니다. 메소드를 객체에 바인딩하기 만하면됩니다. &lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 내부 의 인수 는 '배열 형 객체'의 예입니다.</target>
        </trans-unit>
        <trans-unit id="a233c16db0b04f34febcbccaa3c2964718da7174" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; method can also be called to convert Array-like objects/collections to a new Array. You just &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; the method to the object. The &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; inside a function is an example of an 'array-like object'.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 메서드를 호출하여 Array와 유사한 객체 / 컬렉션을 새 Array로 변환 할 수도 있습니다. 메서드를 개체에 &lt;a href=&quot;../function/bind&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt; 하기 만하면 됩니다. &lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 내부 의 인수 는 '배열 형 객체'의 예입니다.</target>
        </trans-unit>
        <trans-unit id="06c5dda2e59bbcd28149fa9d5e0afd8d273ac68e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; does not mutate the array on which it is called.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; 은 호출 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="11b28e4ba0863d328756279e3c3292205af51c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a &lt;em&gt;truthy&lt;/em&gt; value (a value that becomes true when converted to a Boolean). If such an element is found, &lt;code&gt;some()&lt;/code&gt; immediately returns &lt;code&gt;true&lt;/code&gt;. Otherwise, &lt;code&gt;some()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; 실행 &lt;code&gt;callback&lt;/code&gt; 은 하나가 발견 될 때까지, 상기 어레이의 각 요소에 대한 본 번 함수 &lt;code&gt;callback&lt;/code&gt; 반환 &lt;em&gt;truthy의&lt;/em&gt; 값 (부울로 변환 할 때 참이되는 값). 그러한 요소가 발견되면 &lt;code&gt;some()&lt;/code&gt; 즉시 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 그렇지 않으면 &lt;code&gt;some()&lt;/code&gt; 은 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 . &lt;code&gt;callback&lt;/code&gt; 은 값이 할당 된 배열의 인덱스에 대해서만 호출됩니다. 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="55765333c3af73f2cdee6fec903b8092522ffe32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; was added to the ECMA-262 standard in the 5&lt;sup&gt;th&lt;/sup&gt; edition, and it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;some()&lt;/code&gt; in implementations which do not natively support it.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; 은 5 &lt;sup&gt;번째&lt;/sup&gt; 에디션 에서 ECMA-262 표준에 추가되었으며 표준의 모든 구현에 존재하지 않을 수 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 구현에서 &lt;code&gt;some()&lt;/code&gt; 사용을 허용하여이 문제를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1794642ba04e4d6337bfd3f3640e4918152c675c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some()&lt;/code&gt; was added to the ECMA-262 standard in the 5th edition; as such it may not be present in all implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of &lt;code&gt;some()&lt;/code&gt; in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; have their original values and that &lt;code&gt;fun.call&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; 은 5 판에서 ECMA-262 표준에 추가되었습니다. 따라서 표준의 모든 구현에 존재하지 않을 수도 있습니다. 스크립트 시작 부분에 다음 코드를 삽입하여 기본적으로 지원하지 않는 구현 에 &lt;code&gt;some()&lt;/code&gt; 을 사용하면이 문제를 해결할 수 있습니다 . 이 알고리즘은 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 에&lt;/a&gt; 원래 값이 있고 &lt;code&gt;fun.call&lt;/code&gt; 이 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; 의 원래 값으로 평가 된다고 가정하고 ECMA-262, 5 판에 지정된 알고리즘입니다 .</target>
        </trans-unit>
        <trans-unit id="814c33c4bbb96e5e855c39b48aa6eebdeb69b0f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;some&lt;/code&gt; does not mutate the typed array on which it is called.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; 는 호출 된 형식화 된 배열을 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be6f45d77c2c5ad4e6d66e946743407f28d80e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; is now a prototype accessor property rather than an instance's own data property.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 는 이제 인스턴스 자체의 데이터 속성이 아닌 프로토 타입 접근 자 속성입니다.</target>
        </trans-unit>
        <trans-unit id="ec32f67a13e274cee41ce0b037a6bd6e20a67d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;space&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="facf33433b0c7fdcba36fd5d05001e4a2741b9cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="00e4a88804e5cd470ac0711199de74522ec38452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr()&lt;/code&gt; extracts &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; characters from a &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;, counting from the &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; index.</source>
          <target state="translated">&lt;code&gt;substr()&lt;/code&gt; 은 &lt;code&gt;&lt;var&gt;start&lt;/var&gt;&lt;/code&gt; 인덱스 에서 계산 하여 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 에서 &lt;code&gt;&lt;var&gt;length&lt;/var&gt;&lt;/code&gt; 문자를 추출 합니다.</target>
        </trans-unit>
        <trans-unit id="32bc7ebdd7a94be9c6d291b91bbee7e102177381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr()&lt;/code&gt; extracts &lt;code&gt;length&lt;/code&gt; characters from a &lt;code&gt;string&lt;/code&gt;, counting from the &lt;code&gt;start&lt;/code&gt; index.</source>
          <target state="translated">&lt;code&gt;substr()&lt;/code&gt; 은 &lt;code&gt;start&lt;/code&gt; 색인 부터 계산 하여 &lt;code&gt;string&lt;/code&gt; 에서 &lt;code&gt;length&lt;/code&gt; 문자를 추출 합니다.</target>
        </trans-unit>
        <trans-unit id="ba89e1d86344d4b9f6294322e48f8743d850e860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substr&lt;/code&gt; (pattern)</source>
          <target state="translated">&lt;code&gt;substr&lt;/code&gt; (패턴)</target>
        </trans-unit>
        <trans-unit id="0ea2b9dd54c521c8b0568f54307c19c64d1e9292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substring()&lt;/code&gt; extracts characters from &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; up to &lt;em&gt;but not including&lt;/em&gt;&lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt;. In particular:</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 추출물 문자 &lt;code&gt;&lt;var&gt;indexStart&lt;/var&gt;&lt;/code&gt; 까지 &lt;em&gt;하지만 포함되지 &lt;/em&gt; &lt;code&gt;&lt;var&gt;indexEnd&lt;/var&gt;&lt;/code&gt; 을 . 특히:</target>
        </trans-unit>
        <trans-unit id="74bf3cc5b028ce89b3830152d34219ed010da730" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;substring()&lt;/code&gt; extracts characters from &lt;code&gt;indexStart&lt;/code&gt; up to &lt;em&gt;but not including&lt;/em&gt;&lt;code&gt;indexEnd&lt;/code&gt;. In particular:</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 추출물 문자 &lt;code&gt;indexStart&lt;/code&gt; 까지 &lt;em&gt;하지만 포함되지 &lt;/em&gt; &lt;code&gt;indexEnd&lt;/code&gt; 을 . 특히:</target>
        </trans-unit>
        <trans-unit id="f44a4e0f38b52ecf0a8a2003b18a78ebea1791aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;super.prop&lt;/code&gt; cannot overwrite non-writable properties</source>
          <target state="translated">&lt;code&gt;super.prop&lt;/code&gt; 는 쓰기 불가능한 특성을 겹쳐 쓸 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8ec1da6f6f76d69f8e15863e8233f7a1bbd22277" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt;: the original object which you want to proxy</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; : 프록시 할 원본 객체</target>
        </trans-unit>
        <trans-unit id="7a5594874f7480f484387f72310ff0d93b8fc375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; in function calls</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 함수 호출에서</target>
        </trans-unit>
        <trans-unit id="2b5ee3fe1f8e0e75aa710db2fa0a27deb969033d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; on the object's prototype chain</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 객체의 프로토 타입 체인에</target>
        </trans-unit>
        <trans-unit id="b501381387afcdf844a20f96f0b6091228630172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; with a getter or setter</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; getter 또는 setter와 함께</target>
        </trans-unit>
        <trans-unit id="0d5e6c58c5cd9b050c7049083d44fd11c2eec388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;: only use &lt;code&gt;this&lt;/code&gt; when it refers to an object you created.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; : 생성 한 객체를 참조 할 때만 사용 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="779aceeb7270cdad00cb940de800bd7521481776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thisArg&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="5a08d5948b2def2607aed3f4f4280c011a8b47f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="cd6efa8c28d1b71498be4ed0b4c22dea950a0fb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toFixed()&lt;/code&gt; returns a string representation of &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; that does not use exponential notation and has exactly &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If the absolute value of &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; is greater or equal to &lt;code&gt;1e+21&lt;/code&gt;, this method simply calls &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; and returns a string in exponential notation.</source>
          <target state="translated">&lt;code&gt;toFixed()&lt;/code&gt; 의 문자열 표현을 반환 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; 지수 표기법을 사용하지 않고 정확히 한 &lt;code&gt;&lt;var&gt;digits&lt;/var&gt;&lt;/code&gt; 소수점 자리 이후 숫자는. 숫자는 필요한 경우 반올림되고 필요한 경우 소수 부분이 0으로 채워져 지정된 길이를 갖습니다. 의 절대 값 경우 &lt;code&gt;&lt;var&gt;numObj&lt;/var&gt;&lt;/code&gt; 이 크다거나 같음 &lt;code&gt;1e+21&lt;/code&gt; ,이 방법은 단순히 호출 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt; 지수 표현 문자열을 반환.</target>
        </trans-unit>
        <trans-unit id="a3e9c8c91a10a0289e722c74917e77510f78f592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toFixed()&lt;/code&gt; returns a string representation of &lt;code&gt;numObj&lt;/code&gt; that does not use exponential notation and has exactly &lt;code&gt;digits&lt;/code&gt; digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If &lt;code&gt;numObj&lt;/code&gt; is greater than &lt;code&gt;1e+21&lt;/code&gt;, this method simply calls &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Number.prototype.toString()&lt;/code&gt;&lt;/a&gt; and returns a string in exponential notation.</source>
          <target state="translated">&lt;code&gt;toFixed()&lt;/code&gt; 의 문자열 표현을 반환 &lt;code&gt;numObj&lt;/code&gt; 지수 표기법을 사용하지 않고 정확히 한 &lt;code&gt;digits&lt;/code&gt; 소수점 자리 이후 숫자는. 필요한 경우 숫자가 반올림되고 필요한 경우 분수 부분에 지정된 길이를 갖도록 0이 채워집니다. 경우 &lt;code&gt;numObj&lt;/code&gt; 이 보다 큰 &lt;code&gt;1e+21&lt;/code&gt; ,이 방법은 단순히 호출 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;Number.prototype.toString()&lt;/code&gt; &lt;/a&gt; 지수 표기법으로 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a8b651b9c77ed0ce1c0de403bac2282de958ed8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toJSON()&lt;/code&gt; behavior</source>
          <target state="translated">&lt;code&gt;toJSON()&lt;/code&gt; 동작</target>
        </trans-unit>
        <trans-unit id="80382765aecda671c63e02055ef7711dfa13c7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleDateString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleDateString&lt;/code&gt; : &lt;code&gt;timeZone&lt;/code&gt; 옵션의 IANA 시간대 이름</target>
        </trans-unit>
        <trans-unit id="1b752b34a5916bc298b5c8206b28f514ea8ff59f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleString&lt;/code&gt; : &lt;code&gt;timeZone&lt;/code&gt; 옵션의 IANA 시간대 이름</target>
        </trans-unit>
        <trans-unit id="6eb277cafd46f4159c896025370f12a2f6d64434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toLocaleTimeString&lt;/code&gt;: IANA time zone names in &lt;code&gt;timeZone&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;toLocaleTimeString&lt;/code&gt; : &lt;code&gt;timeZone&lt;/code&gt; 옵션의 IANA 시간대 이름</target>
        </trans-unit>
        <trans-unit id="f2357bc54ea5d43b9624cc032c23bbef3e951d3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; can be used with every object and (by default) allows you to get its class.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 은 모든 객체와 함께 사용할 수 있으며 (기본적으로) 해당 클래스를 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24c0e4e4bc808aeef7016fa7c11598fcba4dde6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; can be used with every object and allows you to get its class. To use the &lt;code&gt;Object.prototype.toString()&lt;/code&gt; with every object, you need to call &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; on it, passing the object you want to inspect as the first parameter called &lt;code&gt;thisArg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 은 모든 객체와 함께 사용할 수 있으며 클래스를 가져올 수 있습니다. 모든 객체에 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; 을 사용하려면 검사 할 객체를 &lt;code&gt;thisArg&lt;/code&gt; 라는 첫 번째 매개 변수로 전달하여 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ebaec00cdc4f2608e90c999113783bb2ce314eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toString()&lt;/code&gt; is a generic method, it does not require that its &lt;code&gt;this&lt;/code&gt; is a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance. However, it must have an internal &lt;code&gt;[[TimeValue]]&lt;/code&gt; property that can't be constructed using native javascript, so it's effectively limited to use with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instances. If called on a non&amp;ndash;Date instance, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 그것의 필요가 없습니다, 일반적인 방법 &lt;code&gt;this&lt;/code&gt; A는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 인스턴스입니다. 그러나 네이티브 자바 스크립트를 사용하여 구성 할 수없는 내부 &lt;code&gt;[[TimeValue]]&lt;/code&gt; 속성이 있어야하므로 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 인스턴스 와 함께 사용하도록 효과적으로 제한됩니다 . 날짜가 아닌 인스턴스에서 호출되면 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7ca2801f838535a0ed5aff213d7462469b98e89e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toStringTag&lt;/code&gt; available on all DOM prototype objects</source>
          <target state="translated">&lt;code&gt;toStringTag&lt;/code&gt; 모든 DOM 프로토 타입 객체에서 사용 가능한 toStringTag</target>
        </trans-unit>
        <trans-unit id="03e7516d03397c9f071fe8f614d35da9a8a7cb33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true || (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; is short-circuit evaluated to true.</source>
          <target state="translated">&lt;code&gt;true || (&lt;em&gt;anything)&lt;/em&gt;&lt;/code&gt; true로 평가 단락이다.</target>
        </trans-unit>
        <trans-unit id="3a75a9892ce646bf1a1c3e7454deee3185504855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; for all cases except when the property is an &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;own&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../errors/cant_delete&quot;&gt;&lt;code&gt;non-configurable&lt;/code&gt;&lt;/a&gt; property, in which case, &lt;code&gt;false&lt;/code&gt; is returned in non-strict mode.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 속성이 &lt;a href=&quot;../errors/cant_delete&quot;&gt; &lt;code&gt;non-configurable&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;own&lt;/code&gt; &lt;/a&gt; 한 속성 인 경우를 제외하고 모든 경우에 true 입니다 .이 경우 엄격하지 않은 모드에서 &lt;code&gt;false&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="38cbb75fcf75ae853ba9352668f45a213d129616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; for all cases except when the property is an &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;own&lt;/a&gt;&lt;a href=&quot;../errors/cant_delete&quot;&gt;non-configurable&lt;/a&gt; property, in which case, &lt;code&gt;false&lt;/code&gt; is returned in non-strict mode.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 속성이 &lt;a href=&quot;../errors/cant_delete&quot;&gt;구성 할 수없는 &lt;/a&gt;&lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;고유&lt;/a&gt; 속성 인 경우를 제외하고 모든 경우에 true 이며 ,이 경우 엄격하지 않은 모드에서 &lt;code&gt;false&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="43d49a42f4ac24a23d7b0dc480f52bb724400658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;Map&lt;/code&gt; object existed and has been removed, or &lt;code&gt;false&lt;/code&gt; if the element does not exist.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 의 요소 경우 &lt;code&gt;Map&lt;/code&gt; 개체가 존재하고 제거되었거나 &lt;code&gt;false&lt;/code&gt; 요소가 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="b52fa274694ea5a1179413a7e3384afacd0c8c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;Set&lt;/code&gt; object has been removed successfully; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt; 객체 의 요소가 성공적으로 제거 되면 true 이고; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ad47e78b85ff8fcadb3f477f5ee28babaf94f1aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;WeakMap&lt;/code&gt; object has been removed successfully. &lt;code&gt;false&lt;/code&gt; if the key is not found in the &lt;code&gt;WeakMap&lt;/code&gt; or if the key is not an object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;WeakMap&lt;/code&gt; 객체 의 요소가 성공적으로 제거 된 경우 true 입니다. &lt;code&gt;false&lt;/code&gt; 키가 발견되지 않는 경우 &lt;code&gt;WeakMap&lt;/code&gt; 경우, 또는 키는 개체가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="29b415aaceb085945bf44324421e03d6e9dd9d79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element in the &lt;code&gt;WeakSet&lt;/code&gt; object has been removed successfully. &lt;code&gt;false&lt;/code&gt; if the &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; is not found in the &lt;code&gt;WeakSet&lt;/code&gt; or if the &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; is not an object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;WeakSet&lt;/code&gt; 개체 의 요소가 성공적으로 제거 된 경우 true 입니다. &lt;code&gt;false&lt;/code&gt; 경우 생성 &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; 에서 발견되지 &lt;code&gt;WeakSet&lt;/code&gt; 경우 나 &lt;code&gt;&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; 목적이 아니다.</target>
        </trans-unit>
        <trans-unit id="d10e10b35c90a25c38dcec81ac0307fdb144459e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element with the specified key exists in the &lt;code&gt;Map&lt;/code&gt; object; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 지정된 키를 가진 요소가 &lt;code&gt;Map&lt;/code&gt; 객체 에 있으면 true 이고, 그렇지 않으면 false입니다 . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dbd4f5c319694e7739e297c51a6f63c48382b8ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이 프로퍼티 기술자의 형태가 변경 가능한 경우, 및 대응하는 객체로부터 프로퍼티가 삭제 될 수있는 경우에 한해 true</target>
        </trans-unit>
        <trans-unit id="a261c928f83c6ef114df5a7b67df45bdfdd4d65e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed (data descriptors only).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 속성과 관련된 값을 변경할 수있는 경우에만 true입니다 (데이터 설명 자만 해당).</target>
        </trans-unit>
        <trans-unit id="2998d7302bb6803e20e9c8b2bacf115cfee7be97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed with an &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;assignment operator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 속성과 관련된 값을 &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;할당 연산자&lt;/a&gt; 로 변경할 수있는 경우에만 true 입니다.</target>
        </trans-unit>
        <trans-unit id="d00d86a6d8a92e37edb6285755a29d872a473677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if the value associated with the property may be changed with an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 속성과 관련된 값이 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;할당 연산자&lt;/a&gt; 로 변경 될 수있는 경우에만 true 입니다.</target>
        </trans-unit>
        <trans-unit id="b9f79a7d054490db92eba9d372aa4b719752b605" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if and only if this property shows up during enumeration of the properties on the corresponding object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 해당 객체의 속성을 열거하는 동안이 속성이 표시되는 경우에만 true 입니다.</target>
        </trans-unit>
        <trans-unit id="4c3da4f0fa6fb277cb9092ad700602053d320d24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; function returns a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; value for every array element. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 함수가 모든 배열 요소에 대해 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;정확한&lt;/a&gt; 값을 반환 하면 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="67d3dd43c68d5e696a9e5641f1bcd93c50c6e202" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the callback function returns a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; value for at least one element in the array. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 콜백 함수가 배열의 하나 이상의 요소에 대해 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;진실&lt;/a&gt; 값을 반환하면 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c21a792f1196a7bf318d7ddda31a497ec72af276" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given argument is one of the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; views; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 주어진 인수가 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 뷰 중 하나 이면 true 이고; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="403ab8fef7185da9ea8f236690743212ee3f4511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given argument is one of the &lt;code&gt;ArrayBuffer&lt;/code&gt; views; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 제공된 인수가 &lt;code&gt;ArrayBuffer&lt;/code&gt; 보기 중 하나 인 경우 true입니다 . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2ad722b1a78f0b3aaa3ab9fc3122d01b5ab72196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given characters are found at the beginning of the string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 주어진 문자가 문자열의 시작 부분에서 발견되면 true 이고; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="599635e4a36f0da6f478ec8cea82bf84c7e4eba4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given characters are found at the end of the string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 주어진 문자가 문자열의 끝에서 발견되면 true ; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="efce8eb89437ea55e8a2d32953d36dcf92c4b621" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given value is &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 주어진 값이 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이면 true . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="342737374e8a91e88099d9b9c6cf35e172a22132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the search string is found anywhere within the given string; otherwise, &lt;code&gt;false&lt;/code&gt; if not.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 주어진 문자열 내에서 검색 문자열이 발견되면 true 이고; 그렇지 않으면, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b45b62d5368b4c0e9efcd190abd4657b28482aac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 이 속성 설명 자의 유형이 변경 될 수 있고 해당 개체에서 속성이 삭제 될 수 있으면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="9adc4051d3bc152ed3183c5026223536cde154b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the value associated with the property may be changed with an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 속성과 관련된 값이 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;할당 연산자&lt;/a&gt; 로 변경 될 수있는 경우 true 입니다.</target>
        </trans-unit>
        <trans-unit id="81c424b5f4868e1250efd5e39d0663d70bdfaf0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the value is an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 값이 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 이면 true . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="559a1263b837d64ca49563260ab655c8946e0b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if there is a match between the regular expression and the specified string; otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 정규식과 지정된 문자열이 일치하면 true 이고; 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5aa4fc19ff2fed2084866086fd95c9826c1eb21b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if there is a match between the regular expression and the string &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 정규식과 문자열 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; 사이에 일치하는 항목이 있으면 true 입니다. 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="77828a19827fbdc424b84d1895fdd02871afd19b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; is very useful, but it's not as versatile as might be required. For example, &lt;code&gt;typeof([])&lt;/code&gt; , is &lt;code&gt;'object'&lt;/code&gt;, as well as &lt;code&gt;typeof(new Date())&lt;/code&gt;, &lt;code&gt;typeof(/abc/)&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 는 매우 유용하지만 필요한만큼 다재다능하지는 않습니다. 예를 들어 &lt;code&gt;typeof([])&lt;/code&gt; 는 &lt;code&gt;'object'&lt;/code&gt; 이며 &lt;code&gt;typeof(new Date())&lt;/code&gt; , &lt;code&gt;typeof(/abc/)&lt;/code&gt; 등입니다.</target>
        </trans-unit>
        <trans-unit id="b06a8d0aa1f35f09637f0a833487b8ac3df2eaf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; operator</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 연산자</target>
        </trans-unit>
        <trans-unit id="a0e464a434c0829ccdda8e446f04c6aa52dfeef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;. That is, it is a variable in global scope. The initial value of &lt;code&gt;undefined&lt;/code&gt; is the primitive value &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 는 &lt;em&gt;전역 객체&lt;/em&gt; 의 속성입니다 . 즉, 전역 범위의 변수입니다. 의 초기 값 &lt;code&gt;undefined&lt;/code&gt; 프리미티브 값 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e39019e70685809a646df8badf13aa6fcb90f191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; is a property of the &lt;em&gt;global object&lt;/em&gt;; i.e., it is a variable in global scope. The initial value of &lt;code&gt;undefined&lt;/code&gt; is the primitive value &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 는 &lt;em&gt;전역 객체&lt;/em&gt; 의 속성입니다 . 즉, 글로벌 범위의 변수입니다. &lt;code&gt;undefined&lt;/code&gt; 의 초기 값은 기본 값 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Undefined&quot;&gt;undefined&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e32478874aacd9d501e1cb1554de2adde3425fe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="583f1a093d9e0daac2d6218f56fbe2b878d0a75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uneval()&lt;/code&gt; is a top-level function and is not associated with any object.</source>
          <target state="translated">&lt;code&gt;uneval()&lt;/code&gt; 은 최상위 함수이며 어떤 객체와도 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="32c095e38b4ee414da4e757f9bfe9348be4e3399" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unshift&lt;/code&gt; is intentionally generic. This method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property&amp;mdash;reflecting the last in a series of consecutive, zero-based numerical properties&amp;mdash;may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;unshift&lt;/code&gt; 는 의도적으로 일반적입니다. 이 메서드는 배열과 유사한 개체에 &lt;a href=&quot;../function/call&quot;&gt;호출&lt;/a&gt; 하거나 &lt;a href=&quot;../function/apply&quot;&gt;적용&lt;/a&gt; 할 수 있습니다 . &lt;code&gt;length&lt;/code&gt; 속성을 포함하지 않는 객체 ( 연속적인 0 기반 숫자 속성에서 마지막 속성을 반영)는 의미있는 방식으로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54ea170c667936dd460a01147aec68e0e36f24d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unshift&lt;/code&gt; is intentionally generic; this method can be &lt;a href=&quot;../function/call&quot;&gt;called&lt;/a&gt; or &lt;a href=&quot;../function/apply&quot;&gt;applied&lt;/a&gt; to objects resembling arrays. Objects which do not contain a &lt;code&gt;length&lt;/code&gt; property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.</source>
          <target state="translated">&lt;code&gt;unshift&lt;/code&gt; 는 의도적으로 일반적입니다. 이 메소드는 배열과 유사한 객체에 &lt;a href=&quot;../function/call&quot;&gt;호출&lt;/a&gt; 하거나 &lt;a href=&quot;../function/apply&quot;&gt;적용&lt;/a&gt; 할 수 있습니다 . 연속적인 0부터 시작하는 일련의 숫자 속성에서 마지막을 반영 하는 &lt;code&gt;length&lt;/code&gt; 속성을 포함하지 않는 객체는 의미있는 방식으로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="082c78c82d02cfa1aa55b9668629269cfe246e0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value1&lt;/code&gt;, &lt;code&gt;value2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;valueN&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;value1&lt;/code&gt; , &lt;code&gt;value2&lt;/code&gt; ,&amp;hellip;, &lt;code&gt;valueN&lt;/code&gt; 선택 사항</target>
        </trans-unit>
        <trans-unit id="d8fca77d17b58678670fbc0cae9a64a21cc517f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; - any JavaScript value returned by the iterator. Can be omitted when &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; - 반복자에 의해 반환 된 자바 스크립트 값입니다. 경우 생략 가능 &lt;code&gt;done&lt;/code&gt; 것입니다 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="719b0a44fa3a7cc390dda454c3238006d814f0f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/USVString&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; representing the data type of the global. This can be one of &lt;code&gt;i32&lt;/code&gt;, &lt;code&gt;i64&lt;/code&gt;, &lt;code&gt;f32&lt;/code&gt;, and &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; : 전역의 데이터 유형을 나타내는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/USVString&quot;&gt; &lt;code&gt;USVString&lt;/code&gt; &lt;/a&gt;이 중 하나가 될 수 있습니다 &lt;code&gt;i32&lt;/code&gt; , &lt;code&gt;i64&lt;/code&gt; , &lt;code&gt;f32&lt;/code&gt; 및 &lt;code&gt;f64&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e73f3f1f5fa4d6bd92c5a843d08920d8f064e14a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt;Optional</source>
          <target state="translated">&lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt;Optional</target>
        </trans-unit>
        <trans-unit id="b278bbc667f37602237e3f657c44d68ec7b00636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var1&lt;/code&gt;, &lt;code&gt;var2&lt;/code&gt;, &amp;hellip;, &lt;code&gt;varN&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;var1&lt;/code&gt; , &lt;code&gt;var2&lt;/code&gt; ,&amp;hellip;, &lt;code&gt;varN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5198c43a0a2c8e761576d62222bceee6d227648e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declarations, wherever they occur, are processed before any code is executed. This is called</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 선언은 발생하는 모든 곳에서 코드가 실행되기 전에 처리됩니다. 이것은 ... 불리운다</target>
        </trans-unit>
        <trans-unit id="185c9b3f09ed3b97953f5ab491884df10b2d1078" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declarations, wherever they occur, are processed before any code is executed. This is called hoisting, and is discussed further below.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 선언은 코드가 실행되기 전에 처리됩니다. 이를 호이 스팅이라고하며 아래에서 더 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="e29396e88101aa5c9c6e5b1a6ea79a0ca2383722" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1ab0381dcfa7096741dbbe819c3f0cd4e33a1de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt; , &lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; , &lt;code&gt;second&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a3d71da112f61025ed1ed587e449658a6dd9467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; check&lt;code&gt;: with(proxy) { (foo); }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 체크 &lt;code&gt;: with(proxy) { (foo); }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e21e2f9b82bc91902812d873f3f79cfae15e1f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="127e3bef85bcf72c62d28958d52e82b0eba14fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f44ca90616094f82848fbe5144c223df70db8b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield*&lt;/code&gt; is an expression, not a statement&amp;mdash;so it evaluates to a value.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 는 문이 아니라 표현식이므로 값으로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="e3c455c86448186ceb1938325bdc16b3566e6f09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield*&lt;/code&gt; is an expression, not a statement, so it evaluates to a value.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 는 명령문이 아닌 표현식이므로 값으로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="c4818477820572aa3eba10723060b580dabd13d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield&lt;/code&gt; can only be called directly from the generator function that contains it. It cannot be called from nested functions or from callbacks.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 는이를 포함하는 생성기 함수에서만 직접 호출 할 수 있습니다. 중첩 된 함수 나 콜백에서 호출 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="419dd5b8fccd2a6487579a6a8a9b5e7f19fe9565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;yield*&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; , &lt;code&gt;yield*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="341bf96f46b0c81adb002d295542211646e18d09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{a, b} = {a: 1, b: 2}&lt;/code&gt; is not valid stand-alone syntax, as the &lt;code&gt;{a, b}&lt;/code&gt; on the left-hand side is considered a block and not an object literal.</source>
          <target state="translated">&lt;code&gt;{a, b} = {a: 1, b: 2}&lt;/code&gt; 왼쪽 의 &lt;code&gt;{a, b}&lt;/code&gt; 가 객체 리터럴이 아닌 블록으로 간주되므로 {a, b} = {a : 1, b : 2} 는 유효한 독립형 구문 이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="5230ab5dda2ed412cc89baa47822f4d75125653e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(But if same object is created simply in different order -- at least in some implementations...)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(그러나 적어도 일부 구현에서 동일한 객체가 다른 순서로 간단하게 생성되면 ...)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c80e7c4a9494fcf16c8427fb8b64aa835e6b0f9c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(But if the same object is created simply in a different order -- at least in some implementations...)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(그러나 동일한 객체가 단순히 다른 순서로 생성되는 경우-적어도 일부 구현에서는 ...)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dfb02ceb026e6ae5ac6f0be402c1b301d7940564" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(In addition to all the string-related functions shown above, this also adds:)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(위에 표시된 모든 문자열 관련 기능 외에도 다음이 추가됩니다.)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2eef995cc95e10cdc733dccecfaa31698e73159" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;A simple common debugging function:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;간단한 일반적인 디버깅 기능 :&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5d5b905aab17381457ccd41c46671a2d91479799" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implementation-dependent&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Implementation-dependent&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7fa0ad8b5a8291adb411d07ca7859a1bddd190ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Not such simple results: (especially if silent error-trapping had hidden the error messages)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;간단한 결과는 아님 : (특히 자동 오류 트래핑이 오류 메시지를 숨긴 경우)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="717f3e3fcef4bcf703ec3a92b35b6d2e55c89b37" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;CompileError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;CompileError&lt;/code&gt; 의 생성자는하지만,이 프로토 타입 체인을 통해 몇 가지 방법을 상속하지, 자신의 어떤 방법을 포함하지 않는다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87700a667a6673156a97eafb30f14af47b5921a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;CompileError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;CompileError&lt;/code&gt; 의 생성자는하지만,이 프로토 타입 체인을 통해 일부 속성을 상속하지, 자신의 어떤 고유 한 속성을 포함하지 않는다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f15b7e992ab5dd1f13952a86ad0bf02cdea5df4b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;LinkError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;LinkError&lt;/code&gt; 의 생성자는하지만,이 프로토 타입 체인을 통해 몇 가지 방법을 상속하지, 자신의 어떤 방법을 포함하지 않는다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6c1ba8efd28bc55d3bdf90dfe77d00fb1c86e62d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;LinkError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;LinkError&lt;/code&gt; 의 생성자는하지만,이 프로토 타입 체인을 통해 일부 속성을 상속하지, 자신의 어떤 고유 한 속성을 포함하지 않는다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="81ab2d2c1255f7e1753ac01cc91d81c8f9c48501" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;RuntimeError&lt;/code&gt; constructor contains no methods of its own, however, it does inherit some methods through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;RuntimeError&lt;/code&gt; 에의 생성자는하지만,이 프로토 타입 체인을 통해 몇 가지 방법을 상속하지, 자신의 어떤 방법을 포함하지 않는다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="74095f42de4d7f5475ae1dbc4725b9be3544fd4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The &lt;code&gt;RuntimeError&lt;/code&gt; constructor contains no unique properties of its own, however, it does inherit some properties through the prototype chain.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;RuntimeError&lt;/code&gt; 에의 생성자는하지만,이 프로토 타입 체인을 통해 일부 속성을 상속하지, 자신의 어떤 고유 한 속성을 포함하지 않는다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8cb7b844be425a6fac5553f6a15fb2935cc155cf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TypedArray&lt;/em&gt;.length</source>
          <target state="translated">&lt;em&gt;TypedArray&lt;/em&gt;.length</target>
        </trans-unit>
        <trans-unit id="1c710b3236a880a923694bf6a06886ddbacad493" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;bufferSource&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;bufferSource&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fba8cd3f7f6217871e25861874ae318826487b9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;descriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;descriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="54072ae3218999871450d1ac7d5ccf9caab714d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;element&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;element&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="842439d5a5b16c0e40a6c0b28aaf23f3b2e8f80e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;fulfilled&lt;/em&gt;: meaning that the operation completed successfully.</source>
          <target state="translated">&lt;em&gt;충족 됨&lt;/em&gt; : 작업이 성공적으로 완료되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="9d5941e7369e2245ec8324630f746a5f579fa604" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;fulfilled&lt;/em&gt;: meaning that the operation was completed successfully.</source>
          <target state="translated">&lt;em&gt;fulfilled&lt;/em&gt; : 작업이 성공적으로 완료되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="dd168aa9d4ae49e271eef17edb16794501f68041" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a client browser in any other timezone.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;getTime ()은 항상 시간 표시에 UTC를 사용합니다. 예를 들어, 한 시간대의 클라이언트 브라우저 인 getTime ()은 다른 시간대의 클라이언트 브라우저와 같습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5202973f7bda6ae438bed3c03b95c200d8b18c2c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;importObject&lt;/em&gt;Optional</source>
          <target state="translated">&lt;em&gt;importObject&lt;/em&gt;Optional</target>
        </trans-unit>
        <trans-unit id="4bdbec4903c75d928d10089c854073ed37579d4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;index&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;index&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d7b87c5aff182ec43148180c5da2bc7e9cebaa8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;initial&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;initial&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="598521aec28dde71093d6bbc59ff5cfc1299ca0e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;maximum Optional&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;최대 옵션&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="934ace61f06798239432f0fa44e4ff08d6329c5a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;memoryDescriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;memoryDescriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="38e0f8032431764a059a1cb9cc659b02c68bf62d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;module&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cb30455a66424f3529cb89fcf9b7e15c3d5db894" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;number&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;number&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8d22cc104a692c502f9dcdf46a40697fc074e64" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;or&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;or&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c43da98eedb6185b4e71f1eec7e1639f100b2700" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pending&lt;/em&gt;: initial state, neither fulfilled nor rejected.</source>
          <target state="translated">&lt;em&gt;보류 중&lt;/em&gt; : 초기 상태이며 이행 또는 거부되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="62469c9ee4d6d79ce6f2f8d4741fef5526fd9e0a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;rejected&lt;/em&gt;: meaning that the operation failed.</source>
          <target state="translated">&lt;em&gt;거부 됨&lt;/em&gt; : 작업이 실패했음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="076c60f25ec5e538e4ed4f4fecd6fb1b67cb4534" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;sectionName&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;sectionName&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="24bcdb791ccc08a22b157d613997e10cb880d5ab" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;source&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="90915625bd23460bbd44a00cfa9cf6a30f7e2120" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;tableDescriptor&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;tableDescriptor&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10724613722309506661f9165cfb6951a5777c68" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;tagged template&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;태그가 지정된 템플릿&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57b94954efb552b29d0a51dd28abd1e100e2963d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;value&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;value&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="186298d2b51234bde601493ff83fbb5fe6dc2235" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity&quot;&gt;&lt;code&gt;Function.arity&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity&quot;&gt;&lt;code&gt;Function.arity&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="6029dc0e32d5181c9fba478ecc8d70c25b2353fa" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger&quot;&gt;&lt;code&gt;Number.toInteger()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger&quot;&gt;&lt;code&gt;Number.toInteger()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3d323408d32352f03d18541923ef7caf562d4d7d" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count&quot;&gt;&lt;code&gt;Object.prototype.__count__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count&quot;&gt;&lt;code&gt;Object.prototype.__count__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="21cd6cc7bf1095aefebe43ef37e8ced2ea2fbe4a" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval&quot;&gt;&lt;code&gt;Object.prototype.eval()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval&quot;&gt;&lt;code&gt;Object.prototype.eval()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="df274dbbedd00a1dd82f3a4a7d6246936b3a95f4" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/parent&quot;&gt;&lt;code&gt;Object.prototype.__parent__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/parent&quot;&gt;&lt;code&gt;Object.prototype.__parent__&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="22a2cc28c8fd46b420a8e8c936878a517cb20ea9" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote&quot;&gt;&lt;code&gt;String.prototype.quote()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote&quot;&gt;&lt;code&gt;String.prototype.quote()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="f519c17b9e05ab642f70b7f859003b50b27c3755" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear&quot;&gt;&lt;code&gt;WeakMap.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear&quot;&gt;&lt;code&gt;WeakMap.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="0af0f742385c87deb76114ccabb08706485d454d" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear&quot;&gt;&lt;code&gt;WeakSet.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear&quot;&gt;&lt;code&gt;WeakSet.prototype.clear()&lt;/code&gt;&lt;/a&gt; &lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3562043c28d38e818e1d9187523ab791d7e15d59" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all elements from the &lt;code&gt;WeakSet&lt;/code&gt; object.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;WeakSet&lt;/code&gt; 객체 에서 모든 요소를 ​​제거합니다 .&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="62be5d11388f2bf91d12309fb1a47e2b90a86249" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all key/value pairs from the &lt;code&gt;WeakMap&lt;/code&gt; object. Note that it is possible to implement a &lt;code&gt;WeakMap&lt;/code&gt;-like object that has a &lt;code&gt;.clear()&lt;/code&gt; method by encapsulating a &lt;code&gt;WeakMap&lt;/code&gt; object that hasn't it (see example on page &lt;a href=&quot;../weakmap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;)&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;WeakMap&lt;/code&gt; 객체 에서 모든 키 / 값 쌍을 제거합니다 . 그렇지 않은 &lt;code&gt;WeakMap&lt;/code&gt; 오브젝트를 캡슐화하여 .clear &lt;code&gt;.clear()&lt;/code&gt; 메소드 가 있는 &lt;code&gt;WeakMap&lt;/code&gt; 유사 오브젝트 를 구현할 수 있습니다 ( &lt;a href=&quot;../weakmap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt; 페이지의 예제 참조 ).&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="3c7aa0f3f104fcbc272e3a3584e844979b6c8c0f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Removes all key/value pairs from the &lt;code&gt;WeakMap&lt;/code&gt; object. Note that it is possible to implement a &lt;code&gt;WeakMap&lt;/code&gt;-like object that has a &lt;code&gt;.clear()&lt;/code&gt; method by encapsulating a &lt;code&gt;WeakMap&lt;/code&gt; object that hasn't it (see example on page &lt;a href=&quot;weakmap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;)&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt; &lt;code&gt;WeakMap&lt;/code&gt; 객체 에서 모든 키 / 값 쌍을 제거합니다 . 그렇지 않은 &lt;code&gt;WeakMap&lt;/code&gt; 오브젝트를 캡슐화하여 .clear &lt;code&gt;.clear()&lt;/code&gt; 메소드 가 있는 &lt;code&gt;WeakMap&lt;/code&gt; 유사 오브젝트 를 구현할 수 있습니다 ( &lt;a href=&quot;weakmap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt; 페이지의 예제 참조 ).&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="f336d80dafe45ae2ae62932e7bc01ae45e6a6a39" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;지정된 객체의 컨텍스트에서 JavaScript 코드 문자열을 평가하는 데 사용되지만 제거되었습니다.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="0bc2f9caec433cdab4e0c56b5932cc0751fa2a1f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to evaluate the passed value and convert it to an integer (or &lt;a href=&quot;infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;), but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;전달 된 값을 평가하고이를 정수 (또는 &lt;a href=&quot;infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt; ) 로 변환하는 데 사용 되지만 제거되었습니다.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="06147fd5b0330a3bd35221810117c0104614dc3b" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to point to an object's context, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;개체의 컨텍스트를 가리키는 데 사용되었지만 제거되었습니다.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="6df39bb87236c6a95814f2126d778ad77c7fb09b" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to return the number of enumerable properties directly on a user-defined object, but has been removed.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;사용자 정의 개체에서 직접 열거 가능한 속성 수를 반환하는 데 사용되지만 제거되었습니다.&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="06fd1cef6bdb79a0e58063eda9afba9011f52ad0" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to specifiy the number of arguments expected by the function, but has been removed. Use the &lt;a href=&quot;function/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property instead.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;함수가 예상하는 인수 수를 지정하는 데 사용되지만 제거되었습니다. 대신 &lt;a href=&quot;function/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 속성을 사용하십시오 .&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="265633d3d66ddc1de561025f67cfe5ba36aeb85a" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Used to specifiy the number of arguments expected by the function, but has been removed. Use the &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property instead.&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;함수가 예상하는 인수 수를 지정하는 데 사용되지만 제거되었습니다. 대신 &lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 속성을 사용하십시오 .&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="82c4c36b0afe843b69360745935e5cc612adb09e" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;Wraps the string in double quotes (&quot;&lt;code&gt;&quot;&lt;/code&gt;&quot;).&lt;/s&gt;</source>
          <target state="translated">&lt;s&gt;문자열을 큰 따옴표 ( &quot; &lt;code&gt;&quot;&lt;/code&gt; &quot;)로 묶습니다 .&lt;/s&gt;</target>
        </trans-unit>
        <trans-unit id="c2edd1d39238dfdee97d64fcceb59811e32c0b09" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.from' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .from'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ec21b87dec9278fc8594eefd0e2feb0afbe15dc4" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.of' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .of'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="50181da8c7ca3c3c77058e8d742194f188be30cb" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.entries()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.entries ()'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="93618b2469ae3ba1395c666fa06c56e602111c2a" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.find' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.find'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a9e67246a6424819b8bcc17c0b6092e768e1685d" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.findIndex' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.findIndex'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd6f4e0049a23c4bbca92eaa29f39479abb6cff8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.forEach' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.forEach'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9859be65b844ff2599639efb57bf72ca0f2591b" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.keys()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.keys ()'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="555530e63b597af98450a9d80fdf1ab621870a26" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.reduce' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.reduce'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a82a5ae53ccbde6340335955d077126e6c8107f9" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.reduceRight' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.reduceRight'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7f63a5a0facf86d23bc51132692430599e3505e8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.slice' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.slice'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="04b318feae6f39c1e4b739df7abff3764dccc63f" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype.values()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype.values ​​()'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2c67a3e5fb004d6ce59b555006262218dbe4b79c" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of '%TypedArray%.prototype[@@iterator]()' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 '% TypedArray % .prototype [@@ iterator] ()'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6b8b94313c26b169ad06a3892984eea7a1275836" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'Array.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'Array.prototype.toString'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="05f0d395a01f847edbb134cddbd70a230cd72ba0" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray prototype' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray 프로토 타입'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="aaf87eb60417d761e3d1bde5b784dd3965f4f7a2" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.buffer' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.buffer'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="041e9f1d779d6b664311d0decdc5c7422f8cc02c" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.byteLength' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.byteLength'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5b09b27abc95298efd70295bf57bb217c76c725e" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.byteOffset' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.byteOffset'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c9fb7375e045d8b7e636f00da7f6d87a9f5b45ad" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.copyWithin' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.copyWithin'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="498626fed36d12b550426d39d4185197eba02bc5" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.every' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.every'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2964fb1fedc0fc2fb8cf624c61dbc8c8dcbc8a46" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.fill' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.fill'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6880629eea61e0e7e26ff10d8d36960ce8e472b1" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.filter' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.filter'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="00dd7391b48af10ba809bd9c0714cd1f2d6af8f8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.includes' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.includes'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="22830ca445ed4afca15737a437b93580a3f8e624" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.indexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.indexOf'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3da3282a0b835f58d03e8f6a1d380259e47a0097" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.join' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.join'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ceedb06a6a4c3d0e33d4085fecbe7774c125920e" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.lastIndexOf' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.lastIndexOf'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="15f3571954f021e744e2c2871a084e198cf3beea" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.length' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.length'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d504b9133964d32f917280196b75ed9e5c33acb2" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.map' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.map'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="855c656d01612dc788a429a8d6753591ac413ab8" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.reverse' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.reverse'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="30bebe3efea7dfe7266798053e324280beb1bc59" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.set' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.set'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="84545422c6366771aa76bd4ef9c53e10164fb432" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.some' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.some'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34fca14ece1e544a703fd6b52d3f97dba54ac6a6" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.sort' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.sort'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="531d01a0bd87594f9ca5ae61086e88b35418c538" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.subarray' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.subarray'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b35e02e72a8f9d3d05d568b57e778b65d09f80b7" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.toLocaleString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.toLocaleString'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d21658e80923eecc6538b3617f1a3f50482446da" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'TypedArray.prototype.toString' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 사양에서 'TypedArray.prototype.toString'의 정의&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d0c8ecd9ee0131f54965f622aaaba0fcec001e26" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;The definition of 'get %TypedArray% [ @@species ]' in that specification.&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;해당 스펙에서 'get % TypedArray % [@@ species]'의 정의.&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8e3853505372fe592bda8804bbd1d24bacc08f84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a6d428e3c3bdac121ee984826a4318bc3046d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Non-standard&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Non-standard&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a1898e32517f0ac48473cf7b8bf5b7c1c216e9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Obsolete since Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Gecko 58 이후 사용되지 않음 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e23e7b16b1b356401be67f3b11f39c65f93e89ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; Obsolete&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; Obsolete&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="172ae4e6fbe9c24145f8a36e109db427455dec6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d371e0d12d95e7320be76e5fa753778071b3bcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; Warning:&lt;/strong&gt;&lt;code&gt;parseInt&lt;/code&gt; converts a &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; and loses precision in the process. This is because trailing non-numeric values, including &quot;&lt;code&gt;n&lt;/code&gt;&quot;, are discarded.</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 경고 :&lt;/strong&gt; &lt;code&gt;parseInt&lt;/code&gt; 는&lt;a href=&quot;bigint&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt; 를&lt;a href=&quot;number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 로 변환하고 프로세스에서 정밀도를 잃습니다. 이는 &quot; &lt;code&gt;n&lt;/code&gt; &quot;을포함하여 뒤에 오는 숫자가 아닌 값이 삭제되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="8eae18544e969ea1ae19359bce2f08c71a822945" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="192a9d0b0d4b42aeaf456019c947cee4aa7fb9bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript typed arrays&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript 유형 배열&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d85d7843cdb7df149eb099678f0570262bb69ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;https://tc39.es/ecma262/#table-49&quot;&gt;ECMAScript (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'TypedArray constructors' in that specification.&lt;/small&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://tc39.es/ecma262/#table-49&quot;&gt;ECMAScript (ECMA-262) &lt;br/&gt;&lt;small&gt;해당 사양에서 'TypedArray 생성자'의 정의.&lt;/small&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="82ef1555a226014cc707d85fff35e034455a34a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;typedarray/@@iterator&quot;&gt;&lt;code&gt;Int16Array.prototype[@@iterator]()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;typedarray/@@iterator&quot;&gt;&lt;code&gt;Int16Array.prototype[@@iterator]()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5a0d75516c25b530476ea55684eb6bf843042cce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;typedarray/tolocalestring&quot;&gt;&lt;code&gt;Int16Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;typedarray/tolocalestring&quot;&gt;&lt;code&gt;Int16Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51dd3dd05b5cdb95cc4486f7aea8876baa98b207" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;a href=&quot;typedarray/tostring&quot;&gt;&lt;code&gt;Int16Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;typedarray/tostring&quot;&gt;&lt;code&gt;Int16Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb813b811a0f9583c1dd4e86873f316e12ee9b48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Desktop&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Edge&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Internet Explorer&lt;/th&gt;
&lt;th&gt;Opera&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Int16Array&lt;/code&gt;&lt;/th&gt;
&lt;td&gt; 7&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 10&lt;/td&gt;
&lt;td&gt; 11.6&lt;/td&gt;
&lt;td&gt; 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt;&lt;code&gt;Int16Array()&lt;/code&gt; constructor&lt;/a&gt;&lt;/th&gt;
&lt;td&gt; 7&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 10&lt;/td&gt;
&lt;td&gt; 11.6&lt;/td&gt;
&lt;td&gt; 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Mobile&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Android webview&lt;/th&gt;
&lt;th&gt;Chrome for Android&lt;/th&gt;
&lt;th&gt;Firefox for Android&lt;/th&gt;
&lt;th&gt;Opera for Android&lt;/th&gt;
&lt;th&gt;Safari on iOS&lt;/th&gt;
&lt;th&gt;Samsung Internet&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Int16Array&lt;/code&gt;&lt;/th&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 18&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4.2&lt;/td&gt;
&lt;td&gt; 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt;&lt;code&gt;Int16Array()&lt;/code&gt; constructor&lt;/a&gt;&lt;/th&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 18&lt;/td&gt;
&lt;td&gt; 4&lt;/td&gt;
&lt;td&gt; 12&lt;/td&gt;
&lt;td&gt; 4.2&lt;/td&gt;
&lt;td&gt; 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Node.js&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;Int16Array&lt;/code&gt;&lt;/th&gt;
&lt;td&gt; 0.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt;&lt;code&gt;Int16Array()&lt;/code&gt; constructor&lt;/a&gt;&lt;/th&gt;
&lt;td&gt; 0.10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;데스크탑&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;크롬&lt;/th&gt; &lt;th&gt;가장자리&lt;/th&gt; &lt;th&gt;Firefox&lt;/th&gt; &lt;th&gt;인터넷 익스플로러&lt;/th&gt; &lt;th&gt;오페라&lt;/th&gt; &lt;th&gt;원정 여행&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt; &lt;code&gt;Int16Array&lt;/code&gt; &lt;/th&gt; &lt;td&gt; 7&lt;/td&gt; &lt;td&gt; 12&lt;/td&gt; &lt;td&gt; 4&lt;/td&gt; &lt;td&gt; 10&lt;/td&gt; &lt;td&gt; 11.6&lt;/td&gt; &lt;td&gt; 5.1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt; &lt;code&gt;Int16Array()&lt;/code&gt; 생성자&lt;/a&gt;&lt;/th&gt; &lt;td&gt; 7&lt;/td&gt; &lt;td&gt; 12&lt;/td&gt; &lt;td&gt; 4&lt;/td&gt; &lt;td&gt; 10&lt;/td&gt; &lt;td&gt; 11.6&lt;/td&gt; &lt;td&gt; 5.1&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;변하기 쉬운&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;안드로이드 웹뷰&lt;/th&gt; &lt;th&gt;Android 용 Chrome&lt;/th&gt; &lt;th&gt;Android 용 Firefox&lt;/th&gt; &lt;th&gt;Android 용 Opera&lt;/th&gt; &lt;th&gt;iOS의 Safari&lt;/th&gt; &lt;th&gt;삼성 인터넷&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt; &lt;code&gt;Int16Array&lt;/code&gt; &lt;/th&gt; &lt;td&gt; 4&lt;/td&gt; &lt;td&gt; 18&lt;/td&gt; &lt;td&gt; 4&lt;/td&gt; &lt;td&gt; 12&lt;/td&gt; &lt;td&gt; 4.2&lt;/td&gt; &lt;td&gt; 1.0&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt; &lt;code&gt;Int16Array()&lt;/code&gt; 생성자&lt;/a&gt;&lt;/th&gt; &lt;td&gt; 4&lt;/td&gt; &lt;td&gt; 18&lt;/td&gt; &lt;td&gt; 4&lt;/td&gt; &lt;td&gt; 12&lt;/td&gt; &lt;td&gt; 4.2&lt;/td&gt; &lt;td&gt; 1.0&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;섬기는 사람&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;Node.js&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt; &lt;code&gt;Int16Array&lt;/code&gt; &lt;/th&gt; &lt;td&gt; 0.10&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;a href=&quot;int16array/int16array&quot;&gt; &lt;code&gt;Int16Array()&lt;/code&gt; 생성자&lt;/a&gt;&lt;/th&gt; &lt;td&gt; 0.10&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e8f31cb3d7955b486489fd58e39cfdefd88275fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access (index into) an Array item&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열 항목에 액세스 (색인)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ef1aa2b0af88f29eaa02e667c11f0a596eb6784" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Access an Array item using the index position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;인덱스 위치를 사용하여 배열 항목에 액세스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d1954ee33201c308252226266e4dbe9d2091905" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add an item to the beginning of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열의 시작 부분에 항목 추가&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f44b98376b3b51d5d6d07c61bcc50bed6d74788" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add an item to the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열 끝에 항목 추가&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bdcb55dedfa87a860f62cc64679e147f49a4d6f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add to the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열의 끝에 추가&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="05ea62e60330916a6489b6ce7bb5b8dc0c78c4b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Add to the front of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열의 앞에 추가&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e633bdcc75b5a6296dc8a21f7a534980415f5537" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All&lt;/strong&gt; browsers include the &lt;code&gt;CustomError&lt;/code&gt; constructor in the stack trace when using a prototypal declaration.</source>
          <target state="translated">&lt;strong&gt;모든&lt;/strong&gt; 브라우저는 프로토 타입 선언을 사용할 때 스택 추적에 &lt;code&gt;CustomError&lt;/code&gt; 생성자를 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="33b02d206997d55697090cf6e35836cc1d3eaf90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All&lt;/strong&gt; browsers include the CustomError constructor in the stack trace when using a prototypal declaration.</source>
          <target state="translated">&lt;strong&gt;모든&lt;/strong&gt; 브라우저는 프로토 타입 선언을 사용할 때 스택 추적에 CustomError 생성자를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="3c72d46e3e32099dbea132c4b0fa513f2bc991b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any JSON text is a valid JavaScript expression...&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;모든 JSON 텍스트는 유효한 JavaScript 표현식입니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b683df0325a5c3aa0ff6b82a0efd33ff4fb848b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any JSON text is a valid JavaScript expression&lt;/strong&gt; &amp;ndash; but only in JavaScript engines that have implemented the &lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;proposal to make all JSON text valid ECMA-262&lt;/a&gt;. In engines that haven't implemented the proposal, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR are allowed in string literals and property keys in JSON; but their use in these features in JavaScript literals is a &lt;a href=&quot;syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;모든 JSON 텍스트는 유효한 JavaScript 표현식&lt;/strong&gt; 이지만 &lt;a href=&quot;https://github.com/tc39/proposal-json-superset&quot;&gt;모든 JSON 텍스트를 유효한 ECMA-262로 만들기&lt;/a&gt; 위한 제안을 구현 한 JavaScript 엔진에서만 가능 합니다 . 제안을 구현하지 않은 엔진에서 U + 2028 LINE SEPARATOR 및 U + 2029 PARAGRAPH SEPARATOR는 JSON의 문자열 리터럴 및 속성 키로 허용됩니다. 그러나 JavaScript 리터럴에서 이러한 기능에 사용되는 것은 &lt;a href=&quot;syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ea3e336bbbe349f686d1a7de34680c471c0c7441" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Any&lt;/strong&gt; object of which the value is not &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, including a &lt;code&gt;Boolean&lt;/code&gt; object whose value is &lt;code&gt;false&lt;/code&gt;, evaluates to &lt;code&gt;true&lt;/code&gt; when passed to a conditional statement. For example, the condition in the following &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement evaluates to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;값이 &lt;code&gt;false&lt;/code&gt; 인 &lt;code&gt;Boolean&lt;/code&gt; 객체를 포함 하여 값이 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 이 아닌 &lt;strong&gt;모든&lt;/strong&gt; 객체 는 조건문에 전달 될 때 &lt;code&gt;true&lt;/code&gt; 로 평가됩니다 . 예를 들어 다음 &lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 문의 조건은 &lt;code&gt;true&lt;/code&gt; 로 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b0c0be5998f55ce07f49b011955c83a425bf461" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arithmetic operators&lt;/strong&gt; take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).</source>
          <target state="translated">&lt;strong&gt;산술 연산자&lt;/strong&gt; 는 숫자 값 (리터럴 또는 변수)을 피연산자로 사용하고 단일 숫자 값을 반환합니다. 표준 산술 연산자는 더하기 (+), 빼기 (-), 곱하기 (*) 및 나누기 (/)입니다.</target>
        </trans-unit>
        <trans-unit id="d58761037eb102cdd483560e6c7d7030ff86f575" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array generics are non-standard, deprecated and will get removed in the near future&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;배열 제네릭은 비표준이며 더 이상 사용되지 않으며 가까운 시일 내에 제거됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b30cb3c4fca448be47cfe32dca81740b30ec763e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Array.prototype.values&lt;/strong&gt; is default implementation of &lt;strong&gt;Array.prototype[Symbol.iterator]&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Array.prototype.values&lt;/strong&gt; 는 &lt;strong&gt;Array.prototype [Symbol.iterator]&lt;/strong&gt; 의 기본 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="6efb3bf91a95bec8d1d30e9bea61156f9c22e13d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arrow Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;화살표 예 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="805aa3dec6c8b5cb37863bc74e5c0608ae28b5e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arrow functions&lt;/strong&gt; do&lt;strong&gt; not &lt;/strong&gt;default &lt;code&gt;this&lt;/code&gt; to the window &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;, rather they execute in the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt; they are created:</source>
          <target state="translated">&lt;strong&gt;화살표 함수&lt;/strong&gt; 는 &lt;code&gt;this&lt;/code&gt; 창 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;범위로&lt;/a&gt; 기본 설정 하지 &lt;strong&gt;않고&lt;/strong&gt; 생성 된 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;범위&lt;/a&gt; 에서 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="36c7566dc578690db6b36befa24d4cca31c20a6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a function&lt;/strong&gt;, it takes two parameters: the &lt;var&gt;key&lt;/var&gt; and the &lt;var&gt;value&lt;/var&gt; being stringified. The object in which the key was found is provided as the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt;'s &lt;code&gt;this&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;strong&gt;함수로서 &lt;/strong&gt; &lt;var&gt;key&lt;/var&gt; 와 문자열 화 되는 &lt;var&gt;value&lt;/var&gt; 의 두 가지 매개 변수를 사용합니다 . 애즈 키가 발견 된 개체는 제공된다 &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; 의 &lt;code&gt;this&lt;/code&gt; 파라미터.</target>
        </trans-unit>
        <trans-unit id="cfe77fb8f9d3ead7aa894195d340299d87c05d7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a function&lt;/strong&gt;, it takes two parameters: the &lt;var&gt;key&lt;/var&gt; and the &lt;var&gt;value&lt;/var&gt; being stringified. The object in which the key was found is provided as the replacer's &lt;code&gt;this&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;strong&gt;함수로서 &lt;/strong&gt; &lt;var&gt;key&lt;/var&gt; 와 문자열 &lt;var&gt;value&lt;/var&gt; 의 두 가지 매개 변수를 사용합니다 . 키를 찾은 객체는 교체기 &lt;code&gt;this&lt;/code&gt; 매개 변수 로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="c7ec23eb0448e3f81c2c2f60a57dc525e6125f5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Be careful.&lt;/strong&gt; While it is possible to use it as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;identifier&lt;/a&gt; (variable name) in any scope other than the global scope (because &lt;code&gt;undefined&lt;/code&gt; is not a &lt;a href=&quot;../lexical_grammar&quot;&gt;reserved word&lt;/a&gt;), doing so is a very bad idea that will make your code difficult to maintain and debug.</source>
          <target state="translated">&lt;strong&gt;조심해. &lt;/strong&gt;전역 범위가 아닌 다른 범위에서 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;식별자&lt;/a&gt; (변수 이름) 로 사용할 수 있지만 ( &lt;code&gt;undefined&lt;/code&gt; 는 &lt;a href=&quot;../lexical_grammar&quot;&gt;예약어&lt;/a&gt; 가 아니기 때문에 ) 그렇게하는 것은 코드를 유지 관리하고 디버그하기 어렵게 만드는 매우 나쁜 생각입니다.</target>
        </trans-unit>
        <trans-unit id="08de02d64d63b964ff314d3c7beb845b2d276f35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bitwise operators&lt;/strong&gt; treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;numbers&lt;/a&gt;&lt;/code&gt;. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.</source>
          <target state="translated">&lt;strong&gt;비트 연산자&lt;/strong&gt; 는 피연산자를 10 진수, 16 진수 또는 8 진수가 아닌 32 비트 (0과 1)의 시퀀스로 취급 &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;numbers&lt;/a&gt;&lt;/code&gt; . 예를 들어, 십진수 9는 1001의 이진 표현을 갖습니다. 비트 연산자는 이러한 이진 표현에 대한 작업을 수행하지만 표준 JavaScript 숫자 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1f68cd6401f243f6a15630c0fd88ba2ba9d0cc08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bonus:&lt;/strong&gt; use &lt;a href=&quot;../../operators/comparison_operators#Identity_strict_equality_(===)&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator to test if the original string was palindrome.</source>
          <target state="translated">&lt;strong&gt;보너스 : &lt;/strong&gt;&lt;a href=&quot;../../operators/comparison_operators#Identity_strict_equality_(===)&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt; 연산자를 사용 하여 원래 문자열이 회문인지 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="8d086d03331e84de998e1bf1a70efb9ec37db280" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bonus:&lt;/strong&gt; use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity_strict_equality_(===)&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; operator to test if the original string was a palindrome.</source>
          <target state="translated">&lt;strong&gt;보너스 : &lt;/strong&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Identity_strict_equality_(===)&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt; 연산자를 사용 하여 원래 문자열이 회문인지 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="0f12d95482e50bf60a5c3eccb3489d7df27695b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; If you need to support truly obsolete JavaScript engines that do not support &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Object/defineProperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, it is best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you cannot make them &lt;strong&gt;non-enumerable&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;주의 : &lt;/strong&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Object/defineProperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 지원하지 않는 완전히 사용되지 않는 JavaScript 엔진을 지원 해야하는 경우 &lt;code&gt;Array.prototype&lt;/code&gt; 메서드를 &lt;strong&gt;열거&lt;/strong&gt; 불가능하게 만들 수 없으므로 폴리 필하지 않는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="fc5dc729bef9476d8b9fa887d570ead303840acd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; In certain cases, &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; may not be the actual value seen by the method.</source>
          <target state="translated">&lt;strong&gt;주의 :&lt;/strong&gt; 특정 경우에 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 는 메서드에서 볼 수있는 실제 값이 아닐 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e57e3b48007a9688af856b535c037d2d8b0475f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; In strict mode, the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;. See below.</source>
          <target state="translated">&lt;strong&gt;주의 :&lt;/strong&gt; 엄격 모드에서의 값 &lt;code&gt;this&lt;/code&gt; 됩니다 &lt;code&gt;undefined&lt;/code&gt; . 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="50f91b49c0b3ad0d52d00d17e539c6788e8af3a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution&lt;/strong&gt;: Calling this method on an empty array returns &lt;code&gt;false&lt;/code&gt; for any condition!</source>
          <target state="translated">&lt;strong&gt;주의&lt;/strong&gt; : 빈 배열에서이 메서드를 호출하면 모든 조건에 대해 &lt;code&gt;false&lt;/code&gt; 가 반환 됩니다!</target>
        </trans-unit>
        <trans-unit id="0955feb1440a51e876ff4dcc97a71276f8119aa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution&lt;/strong&gt;: Calling this method on an empty array will return &lt;code&gt;true&lt;/code&gt; for any condition!</source>
          <target state="translated">&lt;strong&gt;주의&lt;/strong&gt; : 빈 배열에서이 메서드를 호출하면 모든 조건에 대해 &lt;code&gt;true&lt;/code&gt; 가 반환 됩니다!</target>
        </trans-unit>
        <trans-unit id="f05d85b02380728c9b8f869506264468b6420bed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Comparing traditional functions to arrow functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;기존 기능과 화살표 기능 비교&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="354d7cd920e22988d709c2fcafbfc3b986052128" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra: &lt;/strong&gt;Code using &lt;code&gt;with&lt;/code&gt; may not be forward compatible, especially when used with something other than a plain object. Consider this example:</source>
          <target state="translated">&lt;strong&gt;대비 : &lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; 를 사용 하는 코드 는 특히 일반 객체 이외의 다른 코드 와 함께 사용 하는 경우 호환되지 않을 수 있습니다. 이 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4b1d91dbcdb082d80f433f735c070501aa6f7059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement forces the specified object to be searched first for all name lookups. Therefore all identifiers that aren't members of the specified object will be found more slowly in a 'with' block. Where performance is important, 'with' should only be used to encompass code blocks that access members of the specified object.</source>
          <target state="translated">&lt;strong&gt;콘트라 : &lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; 문 힘 지정된 오브젝트는 모든 이름 조회를 위해 먼저 검색합니다. 따라서 지정된 객체의 멤버가 아닌 모든 식별자는 'with'블록에서 더 느리게 발견됩니다. 성능이 중요한 경우 'with'는 지정된 객체의 멤버에 액세스하는 코드 블록 만 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="fd571b82c00d35e92b4ad6f646719c1880c12581" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contra:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement makes it hard for a human reader or JavaScript compiler to decide whether an unqualified name will be found along the scope chain, and if so, in which object. So given this example:</source>
          <target state="translated">&lt;strong&gt;콘트라은 : &lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; 문은 규정되지 않은 이름이 범위 체인을 따라 발견할지 여부를 결정하기 위해 인간의 리더 또는 자바 스크립트 컴파일러 열심히 만들고, 그렇다면, 어떤 객체한다. 따라서이 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="0002fefd9f47b1f2fb792e23d2c9c3abaea8a1cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Copy an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열 복사&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9fc669e554526f585dd24406b20edb1293ae49d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Create an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열 만들기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e8d9129ebb409db374dea0252562001e3362acce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DO NOT rely on exact return values of -1 or 1. &lt;/strong&gt;Negative and positive integer results vary between browsers (as well as between browser versions) because the W3C specification only mandates negative and positive values. Some browsers may return -2 or 2 or even some other negative or positive value.</source>
          <target state="translated">&lt;strong&gt;-1 또는 1의 정확한 반환 값을 사용하지 마십시오&lt;/strong&gt; . W3C 사양은 음수 및 양수 값만 요구하므로 음수 및 양의 정수 결과는 브라우저마다 (브라우저 버전마다) 다릅니다. 일부 브라우저는 -2 또는 2 또는 다른 음수 또는 양수 값을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d10557d3984d83778d01243f0951be3fe40e695" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default function parameters&lt;/strong&gt; allow named parameters to be initialized with default values if no value or &lt;code&gt;undefined&lt;/code&gt; is passed.</source>
          <target state="translated">&lt;strong&gt;기본 함수 매개 변수를&lt;/strong&gt; 사용하면 값이 없거나 &lt;code&gt;undefined&lt;/code&gt; 경우 명명 된 매개 변수를 기본값으로 초기화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="75559a8556e3c27c5d912beff976b58d02107da3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Defaults to &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;기본값은 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 입니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3bfbcff8db90762ab7b7cbc62ec24a1263a90015" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deleting array elements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열 요소 삭제&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bbf74f16f95e0cf9b687fa6ce03d882c2fd5437e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Demonstration of the internal call:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;내부 전화 데모 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11376d94d46ae6467f3f97216bb3abcd3d09da55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated. Avoid these methods.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않습니다. 이러한 방법을 피하십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4a2d9d7036ccea7bde0ff0c57610643265b9bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53c5b98fc1bbd6480cc2a37258052f312d640c9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation warning:&lt;/strong&gt; Do not use &lt;code&gt;unwatch()&lt;/code&gt; and &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt;! These two methods were implemented only in Firefox prior to version 58, they're &lt;strong&gt;deprecated and removed in Firefox 58+&lt;/strong&gt;. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as &lt;code&gt;window&lt;/code&gt;. You can usually use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters and getters&lt;/a&gt; or &lt;a href=&quot;../proxy&quot;&gt;proxies&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;지원 중단 경고 : &lt;/strong&gt; &lt;code&gt;unwatch()&lt;/code&gt; 및 &lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; &lt;/a&gt; 사용하지 마십시오 ! 이 두 가지 방법은 버전 58 이전의 Firefox에서만 구현되었으며 &lt;strong&gt;더 이상 사용되지 않으며 Firefox&lt;/strong&gt; 58 &lt;strong&gt;이상에서 제거되었습니다&lt;/strong&gt; . 또한 감시 점을 사용하면 성능에 심각한 부정적인 영향을 미치며, 이는 &lt;code&gt;window&lt;/code&gt; 와 같은 전역 객체에 사용될 때 특히 그렇습니다 . 일반적으로 대신 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setter 및 getter&lt;/a&gt; 또는 &lt;a href=&quot;../proxy&quot;&gt;프록시&lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69de191aa06761f1ef525b205cd37c6dd77d7c9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation warning:&lt;/strong&gt; Do not use &lt;code&gt;watch()&lt;/code&gt; and &lt;a href=&quot;unwatch&quot;&gt;&lt;code&gt;unwatch()&lt;/code&gt;&lt;/a&gt;! These two methods were implemented only in Firefox prior to version 58, they're &lt;strong&gt;deprecated and removed in Firefox 58+&lt;/strong&gt;. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as &lt;code&gt;window&lt;/code&gt;. You can usually use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setters and getters&lt;/a&gt; or &lt;a href=&quot;../proxy&quot;&gt;proxies&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;지원 중단 경고 : &lt;/strong&gt; &lt;code&gt;watch()&lt;/code&gt; 및 &lt;a href=&quot;unwatch&quot;&gt; &lt;code&gt;unwatch()&lt;/code&gt; &lt;/a&gt; 사용하지 마십시오 ! 이 두 가지 방법은 버전 58 이전의 Firefox에서만 구현되었으며 &lt;strong&gt;더 이상 사용되지 않으며 Firefox&lt;/strong&gt; 58 &lt;strong&gt;이상에서 제거되었습니다&lt;/strong&gt; . 또한 감시 점을 사용하면 성능에 심각한 부정적인 영향을 미치며, 이는 &lt;code&gt;window&lt;/code&gt; 와 같은 전역 객체에 사용될 때 특히 그렇습니다 . 일반적으로 대신 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters&quot;&gt;setter 및 getter&lt;/a&gt; 또는 &lt;a href=&quot;../proxy&quot;&gt;프록시&lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c13e0b1023aac3ff5f304015f3a3d6767b8ab1ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Differences &amp;amp; Limitations:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;차이점 및 한계 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3685363e10992fdc7b2a54614f433adcc3e026c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Different ways to create an Int16Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Int16Array를 만드는 다양한 방법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f25933184a39ab3e6cd8618d81473fbf8cd9d07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do NOT rely on exact return values of &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;! &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;-1&lt;/code&gt; 또는 &lt;code&gt;1&lt;/code&gt; 의 정확한 반환 값에 의존하지 마십시오 !&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5715d4940925e6e262a8369986cf65e9ecbb1389" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ECMAScript 2016 and earlier:&lt;/strong&gt;&lt;em&gt;(&lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt; used to be required)&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;ECMAScript 2016 및 이전 : &lt;/strong&gt;&lt;em&gt;( &lt;/em&gt;&lt;em&gt;필요 &lt;/em&gt;&lt;strong&gt;했던 &lt;/strong&gt;&lt;em&gt; &lt;code&gt;&lt;var&gt;month&lt;/var&gt;&lt;/code&gt; &lt;/em&gt;&lt;em&gt; )&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e884d831e5e132f6ef9afd897a615ea2d905c763" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edge case alert:&lt;/strong&gt; Unlike other array methods such as &lt;a href=&quot;some&quot;&gt;&lt;code&gt;Array.some()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; is run even for indexes with unassigned values.</source>
          <target state="translated">&lt;strong&gt;에지의 경우 경고 :&lt;/strong&gt; 같은과 달리 다른 배열 방법 &lt;a href=&quot;some&quot;&gt; &lt;code&gt;Array.some()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;&lt;/code&gt; 도 지정되지 않은 값으로 인덱스에 대해 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="25222a23c95aa0f2d21abd7571810ca19e4c7730" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Find the index of an item in the Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열에서 항목의 인덱스 찾기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dcdd1b9ec2a97e86f7bd99f0a71c4f5d77cebf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Firefox now warns about the usage of &lt;code&gt;for each...in&lt;/code&gt; and it no longer works starting with Firefox 57.&lt;br/&gt; Please see &lt;a href=&quot;../errors/for-each-in_loops_are_deprecated&quot;&gt;Warning: JavaScript 1.6's for-each-in loops are deprecated&lt;/a&gt; for migration help.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;파이어 폭스는 현재의 사용에 대해 경고하지 &lt;code&gt;for each...in&lt;/code&gt; 과 더 이상 파이어 폭스 57로 시작하는 작품을 &lt;br/&gt;참조하십시오 &lt;a href=&quot;../errors/for-each-in_loops_are_deprecated&quot;&gt;경고 : 각-에 대한-루프되지 않습니다 자바 스크립트 1.6의&lt;/a&gt; 마이그레이션 도움.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="be8d6e51472f943aefdf0780162eb41648ba3c87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it is a number&lt;/strong&gt;, successive levels in the stringification will each be indented by this many space characters (up to 10).</source>
          <target state="translated">&lt;strong&gt;숫자&lt;/strong&gt; 인 &lt;strong&gt;경우&lt;/strong&gt; , 스트링 화의 연속 레벨은 각각이 많은 공백 문자 (최대 10 개)로 들여 쓰기됩니다.</target>
        </trans-unit>
        <trans-unit id="c1116add768a684f4e58eaf62c48388c556991ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it is a string&lt;/strong&gt;, successive levels will be indented by this string (or the first ten characters of it).</source>
          <target state="translated">&lt;strong&gt;문자열&lt;/strong&gt; 인 경우이 문자열 (또는 첫 10 자)이 연속 레벨을 들여 씁니다.</target>
        </trans-unit>
        <trans-unit id="f9f4496bc64957b286836cb0dca59830923c8967" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If it's absolutely necessary and performance is not a concern&lt;/strong&gt;, a far slower (but more specification-compliant solution) can be found at &lt;a href=&quot;https://github.com/Raynos/function-bind&quot;&gt;https://github.com/Raynos/function-bind&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;절대적으로 필요하고 성능이 문제가되지 않는 경우 &lt;/strong&gt;&lt;a href=&quot;https://github.com/Raynos/function-bind&quot;&gt;https://github.com/Raynos/function-bind&lt;/a&gt; 에서 훨씬 느리지 만 더 많은 사양을 준수하는 솔루션을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ef21b1de11bce68cd05ab1e28ca9d6039c56334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; Keep in mind that &lt;em&gt;the data itself&lt;/em&gt; is not cloned.</source>
          <target state="translated">&lt;strong&gt;중요 :&lt;/strong&gt; 것을 명심 &lt;em&gt;데이터 자체가&lt;/em&gt; 복제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="48c257781cc4b92a9f97156dca91f0debe711918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since compilation for large modules can be expensive, developers should only use the &lt;code&gt;Module()&lt;/code&gt; constructor when synchronous compilation is absolutely required; the asynchronous &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="translated">&lt;strong&gt;중요&lt;/strong&gt; : 큰 모듈에 대한 컴파일은 비용이 많이들 수 있으므로 개발자는 동기 컴파일이 절대적으로 필요한 경우 에만 &lt;code&gt;Module()&lt;/code&gt; 생성자를 사용해야합니다. 비동기 &lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt; 메소드는 다른 모든 시간에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="bd1aefe99b2310836321b557de98b25cf407e51f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Since instantiation for large modules can be expensive, developers should only use the &lt;code&gt;Instance()&lt;/code&gt; constructor when synchronous instantiation is absolutely required; the asynchronous &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method should be used at all other times.</source>
          <target state="translated">&lt;strong&gt;중요&lt;/strong&gt; : 큰 모듈의 인스턴스화는 비용이 많이들 수 있으므로 개발자는 동기 인스턴스화가 절대적으로 필요한 경우 에만 &lt;code&gt;Instance()&lt;/code&gt; 생성자를 사용해야합니다. 비동기 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메소드는 다른 모든 시간에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="14c42c01d279faea2c8328245769b59a152a811c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This method is not the most efficient way of fetching and instantiating wasm modules. If at all possible, you should use the newer &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method instead, which fetches, compiles, and instantiates a module all in one step, directly from the raw bytecode, so doesn't require conversion to an &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;중요&lt;/strong&gt; :이 방법은 wasm 모듈을 가져오고 인스턴스화하는 가장 효율적인 방법이 아닙니다. 가능하다면 최신 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 대신 사용해야합니다.이 메서드는 원시 바이트 코드에서 직접 모듈을 한 단계로 가져오고 컴파일하고 인스턴스화하므로 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 로 변환 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a9bf07972f40544b9b201abb81e01b4ac7dbd3dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This method is not the most efficient way of fetching and instantiating wasm modules. If at all possible, you should use the newer &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method instead, which fetches, compiles, and instantiates a module all in one step, directly from the raw bytecode, so doesn't require conversion to an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;중요&lt;/strong&gt; :이 방법은 wasm 모듈을 페치하고 인스턴스화하는 가장 효율적인 방법은 아닙니다. 가능하면 최신 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 대신 사용해야합니다.이 메서드는 원시 바이트 코드에서 직접 한 단계로 모듈을 가져 와서 컴파일하고 인스턴스화하므로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 로 변환 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="d8ff1f9032591ebf283b62753a8815882b515c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Input:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e04e672456b4ff723c5f9f6e53dc395cb83b4bac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Loop over an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열에 루프&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48dde77d098e09c30903fcaf542b212d7acfa42e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-configurable properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;구성 할 수없는 속성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5709d241af5f68117d5d8e9f9e8ba6cd6442579b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-standard. Do not use!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;비표준. 사용하지 마세요!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9cd8cdcde972ac7d0c144f44a32217226c13bf66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not to be confused with:&lt;/strong&gt; Several other languages have mechanisms for lazy evaluation and deferring a computation, which they also call &quot;promises&quot;, e.g. Scheme. Promises in JavaScript represent processes that are already happening, which can be chained with callback functions. If you are looking to lazily evaluate an expression, consider the &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow function&lt;/a&gt; with no arguments: &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; to create the lazily-evaluated expression, and &lt;code&gt;f()&lt;/code&gt; to evaluate.</source>
          <target state="translated">&lt;strong&gt;혼동하지 말 것 :&lt;/strong&gt; 다른 여러 언어에는 지연 평가 및 계산 지연을위한 메커니즘이 있으며,이를 &quot;약속&quot;이라고도합니다 (예 : Scheme). JavaScript의 약속은 이미 발생하고있는 프로세스를 나타내며 콜백 함수와 연결될 수 있습니다. 식을 느리게 평가하려는 경우 인수가없는 &lt;a href=&quot;../functions/arrow_functions&quot;&gt;화살표 함수&lt;/a&gt; 를 고려하십시오 . &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; 느리게 평가 된 식을 만들고 &lt;code&gt;f()&lt;/code&gt; 는 평가합니다.</target>
        </trans-unit>
        <trans-unit id="e3ac491f9ac5113b463db546a5ed84958fab0c7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Not to be confused with:&lt;/strong&gt; Several other languages have mechanisms for lazy evaluation and deferring a computation, which they also call &quot;promises&quot;, e.g. Scheme. Promises in JavaScript represent processes which are already happening, which can be chained with callback functions. If you are looking to lazily evaluate an expression, consider the &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow function&lt;/a&gt; with no arguments: &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; to create the lazily-evaluated expression, and &lt;code&gt;f()&lt;/code&gt; to evaluate.</source>
          <target state="translated">&lt;strong&gt;혼동하지 말아야 할 것 :&lt;/strong&gt; 몇몇 다른 언어에는 게으른 평가와 계산 지연을위한 메커니즘이 있는데,이를 &quot;계획&quot;과 같이 &quot;약속&quot;이라고합니다. JavaScript에서의 약속은 이미 일어나고있는 프로세스를 나타내며 콜백 함수와 연결될 수 있습니다. 표현식을 느리게 평가하려는 경우 인수가없는 &lt;a href=&quot;../functions/arrow_functions&quot;&gt;화살표 함수&lt;/a&gt; 를 고려하십시오 . &lt;code&gt;f = () =&amp;gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; 느리게 평가 된 표현식을 작성하고 &lt;code&gt;f()&lt;/code&gt; 를 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="d61ea3464cad9c0ab62e9b7e02009f31bada4249" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note :&lt;/strong&gt; In UTF-16, Unicode characters above &lt;code&gt;\uFFFF&lt;/code&gt; are encoded as two surrogate code units, of the range &lt;code&gt;\uD800&lt;/code&gt;-&lt;code&gt;\uDFFF&lt;/code&gt;. The value of each code unit is taken separately into account for the comparison. Thus the character formed by the surrogate pair &lt;code&gt;\uD655\uDE55&lt;/code&gt; will be sorted before the character &lt;code&gt;\uFF3A&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; UTF-16에서는 위의 유니 코드 문자 &lt;code&gt;\uFFFF&lt;/code&gt; 범위의 두 대리 코드 단위로 인코딩됩니다 &lt;code&gt;\uD800&lt;/code&gt; - &lt;code&gt;\uDFFF&lt;/code&gt; . 각 코드 단위의 값은 비교를 위해 별도로 고려됩니다. 따라서 대리 쌍 &lt;code&gt;\uD655\uDE55&lt;/code&gt; 의해 형성된 문자 는 문자 &lt;code&gt;\uFF3A&lt;/code&gt; 앞에 정렬됩니다 .</target>
        </trans-unit>
        <trans-unit id="a9ee1c1c79242cef0d6a8d6908b45f5bd0aa2279" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note for Mozilla developers:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Mozilla 개발자를위한 참고 사항 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d49e205123b74544e699dde5af47486480c8533" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: &lt;/strong&gt;&lt;code&gt;Math.ceil(&lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; returns integer 0 and does not give a &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Math.ceil(&lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; 은 정수 0을 반환하고 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 오류를 제공하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="11988984f50812d4be2739340bf8761830dab235" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: &lt;/strong&gt;&lt;code&gt;Math.floor(null)&lt;/code&gt; returns 0, not a &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Math.floor(null)&lt;/code&gt; 은 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이&lt;/a&gt; 아니라 0을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="266386213fc144f5ea42932675546d6395a6da7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: &lt;/strong&gt;&lt;code&gt;\d&lt;/code&gt; matches the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes&quot;&gt;character class&lt;/a&gt; for digits between 0 and 9.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;\d&lt;/code&gt; 는 0에서 9 사이의 숫자에 대한 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes&quot;&gt;문자 클래스&lt;/a&gt; 와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="220e1fbc78a51bbe255c0338790e6417361b15cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: =&amp;gt;&lt;/strong&gt; is not an operator, but the notation for &lt;a href=&quot;functions/arrow_functions&quot;&gt;Arrow functions&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : =&amp;gt;&lt;/strong&gt; 는 연산자가 아니라 &lt;a href=&quot;functions/arrow_functions&quot;&gt;화살표 함수&lt;/a&gt; 표기법입니다 .</target>
        </trans-unit>
        <trans-unit id="355567dbdd8638060c3a628610d64ffb90c96389" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; &amp;ldquo;Array-like&amp;rdquo; means that &lt;code&gt;arguments&lt;/code&gt; has a &lt;a href=&quot;arguments/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property and properties indexed from zero, but it doesn't have &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;'s built-in methods like &lt;a href=&quot;../global_objects/array/foreach&quot;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;#Description&quot;&gt;&amp;sect;Description&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; &quot;Array-like&quot;는 &lt;code&gt;arguments&lt;/code&gt; 에 &lt;a href=&quot;arguments/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 속성과 0부터 색인 된 속성이 있지만 &lt;a href=&quot;../global_objects/array/foreach&quot;&gt; &lt;code&gt;forEach()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 과 같은 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 의 내장 메서드가 없음을 의미 합니다. 자세한 내용은 &lt;a href=&quot;#Description&quot;&gt;&amp;sect; 설명&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="21af73758032257908f95eb10b99a3fa25edcefd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; &amp;ldquo;Array-like&amp;rdquo; means that &lt;code&gt;arguments&lt;/code&gt; has a &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; property and properties indexed from zero, but it doesn't have &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;'s built-in methods like &lt;code&gt;&lt;a href=&quot;../global_objects/array/foreach&quot;&gt;forEach&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../global_objects/array/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;#Description&quot;&gt;&amp;sect;Description&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; &quot;Array-like&quot;는 &lt;code&gt;arguments&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 속성과 속성이 0에서 색인화되어 있지만 &lt;code&gt;&lt;a href=&quot;../global_objects/array/foreach&quot;&gt;forEach&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../global_objects/array/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 과 같은 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 의 기본 제공 메소드 는 없습니다 . 자세한 내용은 &lt;a href=&quot;#Description&quot;&gt;&amp;sect; 설명&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fdbf3840a2f6f9eeaa020c7a23c885188c93bd94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A &lt;code&gt;throw&lt;/code&gt; (or returning a rejected promise) in the &lt;code&gt;finally&lt;/code&gt; callback will reject the new promise with the rejection reason specified when calling &lt;code&gt;throw()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 에 &lt;code&gt;throw&lt;/code&gt; 에서 (또는 거부 약속을 반환) &lt;code&gt;finally&lt;/code&gt; 호출 할 때 거부 사유와 새로운 약속을 거부합니다 콜백 지정 &lt;code&gt;throw()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="24948113914476639ee1466e70b24ea1653cfffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A &lt;code&gt;throw&lt;/code&gt; (or returning a rejected promise) in the &lt;code&gt;finally&lt;/code&gt; callback will reject the new promise with the rejection reason specified when calling &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;finally&lt;/code&gt; 콜백 의 &lt;code&gt;throw&lt;/code&gt; (또는 거부 된 약속 반환)는 &lt;code&gt;throw&lt;/code&gt; 호출시 지정된 거부 이유와 함께 새 약속을 거부합니다 .</target>
        </trans-unit>
        <trans-unit id="1925ccbf9ec06b8d3228b3952cf7825ef523dc72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As long as &lt;code&gt;test()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;lastIndex&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; reset&amp;mdash;even when testing a different string!</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 긴만큼 &lt;code&gt;test()&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;lastIndex&lt;/code&gt; 속성이 됩니다 &lt;em&gt;하지&lt;/em&gt; 재설정 심지어 다른 문자열을 테스트 할 때!</target>
        </trans-unit>
        <trans-unit id="0ec31a31990208b6eee691568983f588d9d526ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of ES5, this can be bypassed by using &lt;a href=&quot;object/create&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/a&gt;, but this is seldom done.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; ES5 &lt;a href=&quot;object/create&quot;&gt; &lt;code&gt;Object.create(null)&lt;/code&gt; &lt;/a&gt; 을 사용하여 우회 할 수 있지만 거의 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ba2d2aa8e4c5677b17e394010e4566e6c0629d2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Calling &lt;code&gt;watch()&lt;/code&gt; on an object for a specific property overrides any previous handler attached for that property.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 특정 속성에 대해 객체에서 &lt;code&gt;watch()&lt;/code&gt; 를 호출 하면 해당 속성에 연결된 이전 처리기가 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="c5e1b863217894f54f5c1996cbd75468632a7d09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Class &lt;strong&gt;expressions&lt;/strong&gt; are subject to the same hoisting restrictions as described in the &lt;a href=&quot;#Class_declarations&quot;&gt;Class declarations&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 클래스 &lt;strong&gt;표현식&lt;/strong&gt; 에는 &lt;a href=&quot;#Class_declarations&quot;&gt;클래스 선언&lt;/a&gt; 섹션에 설명 된 것과 동일한 호이 스팅 제한이 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="a03d1d8c57afa6faee49ee93b7f49ba08b9c218d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Classes are always strict mode code. Calling methods with an undefined &lt;code&gt;this&lt;/code&gt; will throw an error.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 클래스는 항상 엄격 모드 코드입니다. 정의되지 않은와 방법 호출 &lt;code&gt;this&lt;/code&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="88bba440ee116b0187025292f62bac9e6b3181db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Concatenating array(s)/value(s) will leave the originals untouched. Furthermore, any operation on the new array (except operations on elements which are object references) will have no effect on the original arrays, and vice versa.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 배열 / 값을 연결하면 원본이 그대로 유지됩니다. 또한 새 배열에 대한 작업 (객체 참조 인 요소에 대한 작업 제외)은 원래 배열에 영향을 미치지 않으며 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="f7ce291d511f0fc928b257e47c776f63c996ccb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; ECMAScript 2019 and older permitted implementations to have &lt;code&gt;typeof&lt;/code&gt; return any implementation-defined string value for non-callable non-standard exotic objects.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; ECMAScript 2019 및 이전 허용 구현에서는 호출 할 수없는 비표준 이국적인 객체에 대한 구현 정의 문자열 값을 반환하는 &lt;code&gt;typeof&lt;/code&gt; 를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="ce3b4b48eb733544d15ad2e35bdd85b6a5d52409" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; ECMAScript Internationalization API, implemented with Firefox 29, added the &lt;code&gt;locales&lt;/code&gt; argument to the &lt;code&gt;Number.toLocaleString()&lt;/code&gt; method. If the argument is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, this method returns localized digits specified by the OS, while the previous versions of Firefox returned&lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt; Western Arabic&lt;/a&gt; digits. This change has been reported as a regression affecting backward compatibility which might be fixed soon. (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=999003&quot;&gt;bug 999003&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Firefox 29로 구현 된 ECMAScript Internationalization API 는 &lt;code&gt;Number.toLocaleString()&lt;/code&gt; 메서드에 &lt;code&gt;locales&lt;/code&gt; 인수를 추가했습니다 . 인수가 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 인 경우이 메소드는 OS에서 지정한 현지화 된 숫자를 반환하지만 이전 버전의 Firefox는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt;서부 아랍어&lt;/a&gt; 숫자를 반환했습니다 . 이 변경 사항은 곧 수정 될 수있는 이전 버전과의 호환성에 영향을 미치는 회귀로보고되었습니다. ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=999003&quot;&gt;버그 999003&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="8b005bd4745ae59192a510679861adb544ac3246" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For another possible approach to strings in JavaScript, please read the article about &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView&quot;&gt;&lt;code&gt;StringView&lt;/code&gt; &amp;mdash; a C-like representation of strings based on typed arrays&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; JavaScript에서 문자열에 대한 다른 가능한 접근 방법 &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView&quot;&gt;은 형식화 된 배열을 기반으로하는 C의 문자열 표현 인 &lt;/a&gt; &lt;code&gt;StringView&lt;/code&gt; 에 대한 기사를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="49422b1f67b73c938af873bfc9a6d9fcd09fafa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For the Array method, see &lt;a href=&quot;../array/indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Array 메서드에 대해서는 &lt;a href=&quot;../array/indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fafbf00abcf5c63c2ca82ab257820e3938f88e17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For the String method, see &lt;a href=&quot;../string/indexof&quot;&gt;&lt;code&gt;String.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; String 메서드에 대해서는 &lt;a href=&quot;../string/indexof&quot;&gt; &lt;code&gt;String.prototype.indexOf()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="60ae19d75f16acd84824e590ac493d39c4b2e3e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is not provided, &lt;code&gt;reduce()&lt;/code&gt; will execute the callback function starting at index &lt;code&gt;1&lt;/code&gt;, skipping the first index. If &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; is provided, it will start at index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; 경우 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 제공되지 않고, &lt;code&gt;reduce()&lt;/code&gt; 인덱스에서 시작 콜백 함수를 실행 &lt;code&gt;1&lt;/code&gt; 제 인덱스 스킵. 경우 &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; 제공되며,이 인덱스에서 시작됩니다 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="86f89811eda018557eeb00403726d33bfa160377" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If &lt;code&gt;initialValue&lt;/code&gt; isn't provided, &lt;code&gt;reduce()&lt;/code&gt; will execute the callback function starting at index 1, skipping the first index. If &lt;code&gt;initialValue&lt;/code&gt; is provided, it will start at index 0.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; 경우 &lt;code&gt;initialValue&lt;/code&gt; 제공되지 않고, &lt;code&gt;reduce()&lt;/code&gt; 첫 번째 인덱스를 건너 뛰고 인덱스 1부터 콜백 함수를 실행한다. 경우 &lt;code&gt;initialValue&lt;/code&gt; 제공되며,이 인덱스 0에서 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="684ec8c40e719415d1bba76189c015fc69263264" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If needed, the full name of a day (&quot;&lt;code&gt;Monday&lt;/code&gt;&quot; for example) can be obtained by using &lt;a href=&quot;../intl/datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; with an &lt;code&gt;options&lt;/code&gt; parameter. Using this method, the internationalization is made easier:</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 필요한 경우 &lt;code&gt;options&lt;/code&gt; 매개 변수 와 함께 &lt;a href=&quot;../intl/datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt; 을 사용하여 하루의 전체 이름 ( 예 : &quot; &lt;code&gt;Monday&lt;/code&gt; &quot;)을 얻을 수 있습니다 . 이 방법을 사용하면 국제화가 더 쉬워집니다.</target>
        </trans-unit>
        <trans-unit id="e23fb56081f7a141997ed5ab497891b83d99e197" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If needed, the full name of a month (&lt;code&gt;January&lt;/code&gt; for example) can be obtained by using &lt;code&gt;&lt;a href=&quot;../intl/datetimeformat#Using_options&quot;&gt;Intl.DateTimeFormat()&lt;/a&gt;&lt;/code&gt; with an &lt;code&gt;options&lt;/code&gt; parameter. Using this method, internationalization is made easier:</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 필요한 경우 &lt;code&gt;options&lt;/code&gt; 매개 변수 와 함께 &lt;code&gt;&lt;a href=&quot;../intl/datetimeformat#Using_options&quot;&gt;Intl.DateTimeFormat()&lt;/a&gt;&lt;/code&gt; 을 사용하여 &lt;code&gt;January&lt;/code&gt; 의 전체 이름 ( 예 : 1 월 )을 가져올 수 있습니다 . 이 방법을 사용하면 국제화가 더 쉬워집니다.</target>
        </trans-unit>
        <trans-unit id="358de7eb45f10875788ff4438c63a1720a968f2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If passing the callback function uses an &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;arrow function expression&lt;/a&gt;, the &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; parameter can be omitted, since all arrow functions lexically bind the &lt;a href=&quot;../../operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">&lt;strong&gt;주 :&lt;/strong&gt; 콜백 함수를 전달하는 것은 사용하는 경우, &lt;a href=&quot;../../functions/arrow_functions&quot;&gt;화살표 함수식을&lt;/a&gt; 상기 &lt;code&gt;&lt;var&gt;thisArg&lt;/var&gt;&lt;/code&gt; 파라미터는, 모든 사람 화살표 기능 인드 전적으로 생략 될 수있다 &lt;a href=&quot;../../operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; &lt;/a&gt; 값.</target>
        </trans-unit>
        <trans-unit id="1bd4187a04e0a8e4bf553061e2ab071ddd4c5e3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are using an environment compatible with &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;, you could use &lt;code&gt;let orderedArray = Array.from(new Set(myArray))&lt;/code&gt; to get an array where duplicate items have been removed.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;from&quot;&gt; &lt;code&gt;Array.from()&lt;/code&gt; &lt;/a&gt; 과 호환되는 환경을 사용하는 경우 &lt;code&gt;let orderedArray = Array.from(new Set(myArray))&lt;/code&gt; 을 사용하여 중복 항목이 제거 된 배열을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7822b5aeb75f5d2a582a80d085cdebe05016e60b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you wish the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key).</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 당신이 원하는 경우 &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; (모두 키와 값으로 잠재적 대상으로 빈 문자열을 줄 것 때문에) 빈 문자열 속성을 키에서 초기 개체를 구별하기 위해, 당신은 경우 (반복 횟수를 추적해야합니다 첫 번째 반복을 넘어 서면 진짜 빈 문자열 키입니다).</target>
        </trans-unit>
        <trans-unit id="0606f016259513e72d37c5d9a393efa4b1bbb49c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you wish the replacer to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key).</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 대체자가 빈 문자열 속성을 가진 키와 초기 개체를 구별하도록하려면 빈 문자열을 키로, 잠재적으로 개체를 값으로 지정하기 때문에 반복 횟수를 추적해야합니다 ( 첫 번째 반복을 넘어서는 진정한 빈 문자열 키입니다).</target>
        </trans-unit>
        <trans-unit id="25fd065e6e03dfd2256bad0756539873eb842f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you're writing ES6 compatible code, then &lt;a href=&quot;rest_parameters&quot;&gt;rest parameters&lt;/a&gt; should be preferred.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; ES6 호환 코드를 작성하는 경우 &lt;a href=&quot;rest_parameters&quot;&gt;나머지 매개 변수&lt;/a&gt; 를 선호해야합니다.</target>
        </trans-unit>
        <trans-unit id="e74f245ac8626bc2488812fdb3f76579068c2d13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In IE8, it won't delete all when &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; is omitted.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; IE8에서는 &lt;code&gt;&lt;var&gt;deleteCount&lt;/var&gt;&lt;/code&gt; 가 생략 되어도 모두 삭제되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="cc7ec0a50ad5c171c36ec4b7997d54a3f65a816b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/performance&quot;&gt;Web Performance API&lt;/a&gt;'s high-resolution time feature, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt;&lt;code&gt;Performance.now()&lt;/code&gt;&lt;/a&gt; can provide more reliable and precise measurements of elapsed time than &lt;a href=&quot;date/now&quot;&gt;&lt;code&gt;Date.now()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/performance&quot;&gt;Web Performance API&lt;/a&gt; 의 고해상도 시간 기능 을 지원하는 브라우저 에서 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&quot;&gt; &lt;code&gt;Performance.now()&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;date/now&quot;&gt; &lt;code&gt;Date.now()&lt;/code&gt; &lt;/a&gt; 보다 더 안정적이고 정확한 경과 시간 측정을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd6287d6d9ed836fbba50b27a65c0f35a8c77248" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In order to display the content of an array in the console, you can use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/table&quot;&gt;&lt;code&gt;console.table()&lt;/code&gt;&lt;/a&gt;, which prints a formatted version of the array.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 콘솔에 배열의 내용을 표시하려면 배열 의 형식화 된 버전을 인쇄하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Console/table&quot;&gt; &lt;code&gt;console.table()&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4f976fd9fea9d5aa4ce715d9bf46bd7fa9796846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is a good idea to comment the intentional use of the empty statement, as it is not really obvious to distinguish between a normal semicolon. In the following example the usage is probably not intentional:</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 일반적인 세미콜론을 구분하는 것은 분명하지 않으므로 빈 명령문의 의도적 인 사용에 대해서는 언급하는 것이 좋습니다. 다음 예제에서 사용법은 의도하지 않은 것일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcfea8397f57ed908ca1ce86c587c0948329e841" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is not possible to know reflectively whether a particular object implements the iterator protocol. However, it is easy to create an object that satisfies &lt;em&gt;both&lt;/em&gt; the iterator and iterable protocols (as shown in the example below).</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 특정 개체가 반복기 프로토콜을 구현하는지 여부를 반영하여 알 수 없습니다. 그러나 반복기 및 반복 가능한 프로토콜을 &lt;em&gt;모두&lt;/em&gt; 충족하는 객체를 만드는 것은 쉽습니다 (아래 예 참조).</target>
        </trans-unit>
        <trans-unit id="6bfe1f5b870b1d60d48fcd5c7b5fcea78b71eb90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's important to keep in mind that while the time value at the heart of a Date object is UTC, the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Date 객체의 중심에있는 시간 값은 UTC이지만 날짜 및 시간 또는 해당 구성 요소를 가져 오는 기본 방법은 모두 로컬 (예 : 호스트 시스템) 표준 시간대 및 오프셋에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7f4bbacf6321e13f6eb99261e1d22c24b709b5c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; JavaScript &lt;code&gt;Date&lt;/code&gt; objects can only be instantiated by calling JavaScript &lt;code&gt;Date&lt;/code&gt; as a constructor: calling it as a regular function (i.e. without the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator) will return a string rather than a &lt;code&gt;Date&lt;/code&gt; object; unlike other JavaScript object types, JavaScript &lt;code&gt;Date&lt;/code&gt; objects have no literal syntax.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; JavaScript &lt;code&gt;Date&lt;/code&gt; 객체는 생성자로 JavaScript &lt;code&gt;Date&lt;/code&gt; 를 호출해야만 인스턴스화 할 수 있습니다 . 일반 함수로 호출하면 (예 : &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 연산자 없이 ) &lt;code&gt;Date&lt;/code&gt; 객체가 아닌 문자열이 반환됩니다 . 다른 JavaScript 객체 유형과 달리 JavaScript &lt;code&gt;Date&lt;/code&gt; 객체에는 리터럴 구문이 없습니다.</target>
        </trans-unit>
        <trans-unit id="cba716c445446c37823ee39ce035c3f7e61e130a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; JavaScript also has &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;a bitwise operator ^ (logical XOR)&lt;/a&gt;. &lt;code&gt;**&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt; are different (for example : &lt;code&gt;2 ** 3 === 8&lt;/code&gt; when &lt;code&gt;2 ^ 3 === 1&lt;/code&gt;.)</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; JavaScript에는 &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;비트 연산자 ^ (논리적 XOR)도&lt;/a&gt; 있습니다. &lt;code&gt;**&lt;/code&gt; 와 &lt;code&gt;^&lt;/code&gt; 는 다릅니다 (예 : &lt;code&gt;2 ^ 3 === 1&lt;/code&gt; &lt;code&gt;2 ** 3 === 8&lt;/code&gt; 때 2 ** 3 === 8 ).</target>
        </trans-unit>
        <trans-unit id="771025a125bb3c93ccfe202888079e1424a8e069" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Labeled loops or blocks are very uncommon. Usually function calls can be used instead of loop jumps.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 레이블이 지정된 루프 또는 블록은 매우 드 un니다. 일반적으로 루프 점프 대신 함수 호출을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="817378a03f44c8672a6044bd391916398bcb3fea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Many &lt;code&gt;Math&lt;/code&gt; functions have a precision that&amp;rsquo;s &lt;em&gt;implementation-dependent.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 많은 &lt;code&gt;Math&lt;/code&gt; 함수에는 &lt;em&gt;구현에 따라&lt;/em&gt; 정밀도가 &lt;em&gt;있습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c51f56c9c6eb301eeeac8ec59172e72208de14f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Many older browsers&amp;mdash;including Chrome &amp;lt;17 and Internet Explorer &amp;lt;9&amp;mdash;don't accept array-like objects, and will throw an exception.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Chrome &amp;lt;17 및 Internet Explorer &amp;lt;9를 포함한 많은 이전 브라우저는 배열과 유사한 개체를 허용하지 않으며 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1fac8f55feeec11dca5f652a1e6bc14af58f7c8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Month are 0-indexed when used as an argument of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; (thus 0 corresponds to January and 11 to December).</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 는 인수로 사용될 때 월이 0으로 색인화됩니다 (따라서 0은 1 월과 11에서 12 월에 해당).</target>
        </trans-unit>
        <trans-unit id="6aefc9efe8abe1e05cdb3d94a2c17571efaa3b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Objects in string contexts convert via the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method, which is different from &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; objects converting to string primitives using &lt;code&gt;valueOf&lt;/code&gt;. All objects have a string conversion, if only &quot;&lt;code&gt;[object &lt;em&gt;type&lt;/em&gt;]&lt;/code&gt;&quot;. But many objects do not convert to number, boolean, or function.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 문자열 컨텍스트의 객체는 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt; 메서드 를 통해 변환 되는데, 이는 &lt;code&gt;valueOf&lt;/code&gt; 를 사용하여 문자열 프리미티브로 변환하는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 객체 와 다릅니다 . &quot; &lt;code&gt;[object &lt;em&gt;type&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;type&lt;/em&gt; ] &quot; 만있는 경우 모든 객체는 문자열 변환을 갖습니다 . 그러나 많은 객체가 숫자, 부울 또는 함수로 변환되지 않습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6af260530dffa5616e1a97f776680caae737db0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 와 날짜 문자열의 구문 분석 &lt;code&gt;Date&lt;/code&gt; 생성자 (그리고 &lt;code&gt;Date.parse&lt;/code&gt; , 그들이 동일) 강하게 인해 브라우저 차이와 불일치 좋습니다.</target>
        </trans-unit>
        <trans-unit id="727266a08c0b936a62b4097f40ecb0ef35024e59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Parsing of strings with &lt;code&gt;Date.parse&lt;/code&gt; is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 브라우저 차이 및 불일치로 인해 &lt;code&gt;Date.parse&lt;/code&gt; 를 사용하여 문자열을 구문 분석 하는 것은 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0c6387929bf8e20366e124fb355a09268278b5c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;this guide&lt;/a&gt; for more explanations about regular expressions.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 참고 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;이 가이드를&lt;/a&gt; 정규 표현식에 대한 자세한 설명은.</target>
        </trans-unit>
        <trans-unit id="6dc36416db2a62f5b79c686618c268478b428ae4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See also &lt;a href=&quot;matchall&quot;&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags&quot;&gt;Advanced searching with flags&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;a href=&quot;matchall&quot;&gt; &lt;code&gt;String.prototype.matchAll()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags&quot;&gt;플래그를 사용한 고급 검색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b4d90c5d6d9b94a1f7230d93bf106368245455c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Spread syntax effectively goes one level deep while copying an array. Therefore, it may be unsuitable for copying multidimensional arrays as the following example shows (it's the same with &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and spread syntax).</source>
          <target state="translated">&lt;strong&gt;노트 :&lt;/strong&gt; 확산 구문은 배열을 복사하는 동안 효과적으로 한 수준 깊게 진행됩니다. 따라서 다음 예제와 같이 다차원 배열을 복사하는 데 적합하지 않을 수 있습니다 ( &lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; 및 스프레드 구문과 동일 함 ).</target>
        </trans-unit>
        <trans-unit id="b1e58dd8b5aa3a0080bb077a9ad00d39a01d1e04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Spread syntax effectively goes one level deep while copying an array. Therefore, it may be unsuitable for copying multidimensional arrays, as the following example shows. (The same is true with &lt;a href=&quot;../global_objects/object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; and spread syntax.)</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 스프레드 구문은 배열을 복사하는 동안 효과적으로 한 수준 깊이가됩니다. 따라서 다음 예제와 같이 다차원 배열을 복사하는 데 적합하지 않을 수 있습니다. ( &lt;a href=&quot;../global_objects/object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; 및 스프레드 구문도 마찬가지입니다 .)</target>
        </trans-unit>
        <trans-unit id="358e3ce297689d443eafc4cf6dc6e850fef804bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in JavaScript 1.8.5 &lt;code&gt;toString()&lt;/code&gt; called on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt;, and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt;, as defined in the 5th Edition of ECMAScript and a subsequent Errata. See &lt;a href=&quot;#Using_toString()_to_detect_object_class&quot;&gt;Using_toString()_to_detect_object_class&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; JavaScript 1.8.5부터 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 에서&lt;/a&gt; 호출 된 &lt;code&gt;toString()&lt;/code&gt; 은 &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;Null&lt;/em&gt; ]을 반환 하고 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;Undefined&lt;/em&gt; ]를 반환합니다&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt; , ECMAScript를의 5 판 및 후속 에라타에 정의 된 바와 같다. &lt;a href=&quot;#Using_toString()_to_detect_object_class&quot;&gt;Using_toString () _ to_detect_object_class를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a15d9c1ea2b0a0e1c267bed84cbe1cdc7fe69654" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting in JavaScript 1.8.5, &lt;code&gt;toString()&lt;/code&gt; called on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt;, and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt;, as defined in the 5&lt;sup&gt;th&lt;/sup&gt; Edition of ECMAScript and subsequent Errata.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; JavaScript 1.8.5부터 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 에서&lt;/a&gt; 호출 된 &lt;code&gt;toString()&lt;/code&gt; 은 &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;Null&lt;/em&gt; ]을 반환 하고 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 는 ECMAScript 의 5 &lt;sup&gt;번째&lt;/sup&gt; 에디션 및 후속 에라타에 정의 된대로 &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt; &lt;em&gt;Undefined&lt;/em&gt; ]를 반환합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="8d57bc72c11abaf69eb43644d025eb28d1419aee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Static methods are not properties of &lt;code&gt;this&lt;/code&gt;. They are properties of the class itself.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 정적 메서드는 &lt;code&gt;this&lt;/code&gt; . 그것들은 클래스 자체의 속성입니다.</target>
        </trans-unit>
        <trans-unit id="0e12c8b40a6c873368a85592313dce66b1e2b5dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; String objects are Type Object, not String! String objects are rarely used, so the following results might be surprising:</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 문자열 객체는 문자열이 아닌 유형 객체입니다! 문자열 객체는 거의 사용되지 않으므로 다음 결과는 놀랍습니다.</target>
        </trans-unit>
        <trans-unit id="61d22cf1bf09fb835287646ba1ff636d7d5dfd9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;has()&lt;/code&gt; uses the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;Same-value-zero&lt;/a&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 기술적으로 말하면 &lt;code&gt;has()&lt;/code&gt; 는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;Same-value-zero&lt;/a&gt; 알고리즘을 사용하여 주어진 요소가 있는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="84fe9a5fbe07ccdfcfe25ab1224f1a2b8b21eb68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;has()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 기술적으로 말하자면 &lt;code&gt;has()&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; 알고리즘을 사용하여 지정된 요소가 있는지 여부를 판별합니다.</target>
        </trans-unit>
        <trans-unit id="932b8bb42efb809689f0c3094f4532ecc539146e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;includes()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 기술적으로 말하자면, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; &lt;code&gt;includes()&lt;/code&gt; 는 sameValueZero 알고리즘을 사용하여 주어진 요소가 있는지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="a26e8f7c200274b339ac0e717593fe6705fc9661" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Technically speaking, &lt;code&gt;includes()&lt;/code&gt; uses the &lt;code&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; algorithm to determine whether the given element is found.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 기술적으로, &lt;code&gt;includes()&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;sameValueZero&lt;/a&gt;&lt;/code&gt; 알고리즘을 사용하여 주어진 요소가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="98b0a7fbbe7fc19a335dd9a46844842671c58994" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;Object.create()&lt;/code&gt; method used above is relatively new. For alternative methods, please consider one of the following approaches:</source>
          <target state="translated">&lt;strong&gt;주 : &lt;/strong&gt; &lt;code&gt;Object.create()&lt;/code&gt; 위에 사용 된 방법은 비교적 새로운. 다른 방법의 경우 다음 방법 중 하나를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="600193aeb66c423b3e68da8317526519bcbd1aab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;length&lt;/code&gt; property is used to control the number of object properties to be added. In the above example, &lt;code&gt;length:2&lt;/code&gt; indicates two properties has to be added.</source>
          <target state="translated">&lt;strong&gt;주 : &lt;/strong&gt; &lt;code&gt;length&lt;/code&gt; 속성이 객체 속성의 개수가 추가되도록 제어하는데 사용된다. 위의 예에서 &lt;code&gt;length:2&lt;/code&gt; 는 두 개의 속성을 추가해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="18120179463c581abf4bb091c97434a0b8908b11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;em&gt;strict equality&lt;/em&gt; operator (as opposed to the &lt;em&gt;standard equality&lt;/em&gt; operator) must be used here, because &lt;code&gt;x == undefined&lt;/code&gt; also checks whether &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, while strict equality doesn't. This is because &lt;code&gt;null&lt;/code&gt; is not equivalent to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;주 : &lt;/strong&gt;&lt;em&gt;항등&lt;/em&gt; (와 대향 연산자 &lt;em&gt;표준 항등&lt;/em&gt; 연산자), 여기에 사용되어야하기 때문에 &lt;code&gt;x == undefined&lt;/code&gt; 여부도 검사 &lt;code&gt;x&lt;/code&gt; 인 &lt;code&gt;null&lt;/code&gt; 항등하지 않지만. 이는 &lt;code&gt;null&lt;/code&gt; 이 &lt;code&gt;undefined&lt;/code&gt; 와 동일하지 않기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="2092b16cccf693b8d8fff7395070e011bb2ec6d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The argument &lt;code&gt;monthIndex&lt;/code&gt; is 0-based. This means that &lt;code&gt;January = 0&lt;/code&gt; and &lt;code&gt;December = 11&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;monthIndex&lt;/code&gt; 인수 는 0을 기준으로합니다. 이는 &lt;code&gt;January = 0&lt;/code&gt; 및 &lt;code&gt;December = 11&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="78e59a989e9e78fba04060c0dc59ccc7a4a2add3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The following is syntactically invalid despite its import equivalent:</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 다음은 해당 가져 오기 기능에도 불구하고 구문 상 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1955d1efaa1f8720eb71242a2a0fe4e7c8e0d0b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The reason for &lt;code&gt;unwatch()&lt;/code&gt; to take the property name &lt;em&gt;prop&lt;/em&gt; as its only parameter is due to the &quot;single handler allowing&quot; behavior of the &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 그 이유 &lt;code&gt;unwatch()&lt;/code&gt; 속성 이름 취할 &lt;em&gt;소품&lt;/em&gt; 유일한 매개 변수로 인해의 행동은 &quot;수 있도록 하나의 핸들러&quot;이다 &lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="40b2c17bd14e9e2f0d83c335e3a0b242c8caae4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; in strict mode. See below.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 의 값 &lt;code&gt;this&lt;/code&gt; 됩니다 &lt;code&gt;undefined&lt;/code&gt; Strict 모드에서. 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="28e45baa0bcb5c4340df55ba049e2a785cb346b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This also means that there is no list of current objects stored in the collection. &lt;code&gt;WeakSets&lt;/code&gt; are not enumerable.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이는 또한 컬렉션에 저장된 현재 개체 목록이 없음을 의미합니다. &lt;code&gt;WeakSets&lt;/code&gt; 은 열거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8c7727adbde630d97ded4c8afef19d6a4439e805" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This article describes the &lt;code&gt;Promise&lt;/code&gt; constructor and the methods and properties of such objects. To learn about the way promises work and how you can use them, we advise you to read &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;Using promises&lt;/a&gt; first. The constructor is primarily used to wrap functions that do not already support promises.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 문서에서는 &lt;code&gt;Promise&lt;/code&gt; 생성자와 이러한 개체의 메서드 및 속성에 대해 설명 합니다. 약속의 작동 방식과 사용 방법에 대해 배우려면 먼저 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;약속 사용&lt;/a&gt; 을 읽어보십시오 . 생성자는 주로 약속을 지원하지 않는 함수를 래핑하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="63e3c87f450a346f40b18eca582548e2deeb51f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is one of the few cases in JavaScript where &lt;strong&gt;the semicolon is mandatory&lt;/strong&gt;. Indeed, without the semicolon the line that follows the cycle declaration will be considered a statement.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;strong&gt;세미콜론이 필수 인&lt;/strong&gt; JavaScript의 경우 중 하나입니다 . 실제로 세미콜론이 없으면주기 선언 다음에 나오는 행이 명령문으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="d0ad1118a4dbbaf1b10c897edea38f62e7d5039e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This non-native &lt;code&gt;Function.construct&lt;/code&gt; method will not work with some native constructors; like &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, for example. In these cases you have to use the &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 기본이 아닌 &lt;code&gt;Function.construct&lt;/code&gt; 메서드는 일부 기본 생성자에서 작동하지 않습니다. 예를 들어 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 와 같습니다 . 이 경우 &lt;a href=&quot;bind&quot;&gt; &lt;code&gt;Function.prototype.bind&lt;/code&gt; &lt;/a&gt; 메서드 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f70fb05109e87bae7ee85aa0c96458c3ad964ea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This non-native &lt;code&gt;Function.construct&lt;/code&gt; method will not work with some native constructors; like &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, for example. In these cases you have to use the &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; method. For example, imagine having an array like the following, to be used with &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;[2012, 11, 4]&lt;/code&gt;; in this case you have to write something like: &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt;. This is not the best way to do things, and probably not to be used in any production environment.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 기본이 아닌 &lt;code&gt;Function.construct&lt;/code&gt; 메소드는 일부 기본 생성자와 작동하지 않습니다. 예를 들어 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 와 같습니다 . 이 경우 &lt;a href=&quot;bind&quot;&gt; &lt;code&gt;Function.prototype.bind&lt;/code&gt; &lt;/a&gt; 메서드 를 사용해야합니다 . 예를 들어 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 생성자 와 함께 사용할 배열을 다음과 같이 상상해보십시오 . &lt;code&gt;[2012, 11, 4]&lt;/code&gt; ; 이 경우 다음과 같이 작성해야합니다. &lt;code&gt;new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()&lt;/code&gt; 합니다. 이것은 작업을 수행하는 가장 좋은 방법은 아니며 프로덕션 환경에서는 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="24502e3f5823bcbfeccb81fd33ffa25b3f363c52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This operation only works with a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; and may not be allowed on the main thread.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 작업은 공유 &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; &lt;/a&gt; 에서만 작동합니다. 하며 기본 스레드에서는 허용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef427d917c001b1f4650cf5e5def0d0fc7c777bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This operation works with a shared &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; only.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 작업은 공유 &lt;a href=&quot;../int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; 에서&lt;/a&gt; 작동합니다. 에서만 합니다.</target>
        </trans-unit>
        <trans-unit id="e500d399515becb665391f5e8c5556e3dc0ddc69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Unlike &lt;code&gt;unshift()&lt;/code&gt;, this creates a new &lt;code&gt;arr1&lt;/code&gt;, and does not modify the original &lt;code&gt;arr1&lt;/code&gt; array in-place.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;unshift()&lt;/code&gt; 와 달리 이것은 새 &lt;code&gt;arr1&lt;/code&gt; 을 만들고 원래 &lt;code&gt;arr1&lt;/code&gt; 배열을 제자리에서 수정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="459514910373cc21fc85761c674b24cfc7d00d66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;Function&lt;/code&gt; constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Function&lt;/code&gt; 생성자를 사용하여 함수 를 작성하는 것은 일부 JS 엔진 최적화를 방해하고 다른 문제를 일으킬 수있는 문자열로 함수 본문이 필요하므로 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="725b65434e6935214fd79e2f1684e8b9c1ce58bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Using the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; 사용 이 일부 JS 엔진 최적화를 방지 할 수 있으며, 또한 다른 문제가 발생할 수 있습니다 문자열로 함수 본문을 필요로하기 때문에 함수를 생성하는 생성자는 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6cf46a3d7059d3673cfb92d7b3e5d229fd13029e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When comparing strings and characters, &lt;code&gt;includes()&lt;/code&gt; is &lt;em&gt;case-sensitive&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 문자열과 문자를 비교할 때 &lt;code&gt;includes()&lt;/code&gt; 는 &lt;em&gt;대소 문자를 구분&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="85c319751ff83b08966d7270386045fb1f98bd7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as &quot;$&quot;. Put the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; tag that loads the library before your code that uses it.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 라이브러리 (예 : jQuery)를로드 할 때 라이브러리 변수 (예 : &quot;$&quot;)에 액세스하기 전에 라이브러리를로드하십시오. 풋 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;/a&gt;라이브러리를 사용하는 코드 앞에 라이브러리를로드 태그를 .</target>
        </trans-unit>
        <trans-unit id="ad4e82294745878a54c69e55c811a42836c1ccaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as &quot;$&quot;. Put the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; tag that loads the library before your code that uses it.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 라이브러리 (예 : jQuery)를로드 할 때 &quot;$&quot;와 같은 라이브러리 변수에 액세스하기 전에로드되었는지 확인하십시오. 라이브러리를 사용하는 코드 앞에 라이브러리를로드 하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;/a&gt; 태그를 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="78a25d81475121b131542b82b7c0571e1ed01b13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the first argument is undefined or null a similar outcome can be achieved using the array &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 첫 번째 인수가 정의되지 않거나 null 인 경우 배열 &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;스프레드 구문을&lt;/a&gt; 사용하여 유사한 결과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0a681172ba1c89d6f086e8f2d83d03e01913d5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the non-standard property &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document#Properties&quot;&gt;document.all&lt;/a&gt;&lt;/code&gt; is used as an argument for this constructor, the result is a &lt;code&gt;Boolean&lt;/code&gt; object with the value &lt;code&gt;false&lt;/code&gt;. This property is legacy and non-standard and should not be used.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 비표준 속성 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document#Properties&quot;&gt;document.all&lt;/a&gt;&lt;/code&gt; 이이 생성자의 인수로 사용되면 결과는 값이 &lt;code&gt;false&lt;/code&gt; 인 &lt;code&gt;Boolean&lt;/code&gt; 객체입니다. . 이 속성은 레거시 및 비표준이므로 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="78fe89a73001c5f232175ca238a51a999dec2f14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When the string is empty, &lt;code&gt;split()&lt;/code&gt; returns an array containing one empty string, rather than an empty array. If the string and separator are both empty strings, an empty array is returned.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 문자열이 비어 있으면 &lt;code&gt;split()&lt;/code&gt; 은 빈 배열이 아닌 하나의 빈 문자열을 포함하는 배열을 반환합니다. 문자열과 구분 기호가 모두 빈 문자열이면 빈 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="a96e44fab969f1254bb7b66f556f52c2916c9cd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Where &lt;code&gt;Date&lt;/code&gt; is called as a constructor with more than one argument, if values are greater than their logical range (e.g. 13 is provided as the month value or 70 for the minute value), the adjacent value will be adjusted. E.g. &lt;code&gt;new Date(2013, 13, 1)&lt;/code&gt; is equivalent to &lt;code&gt;new Date(2014, 1, 1)&lt;/code&gt;, both create a date for &lt;code&gt;2014-02-01&lt;/code&gt; (note that the month is 0-based). Similarly for other values: &lt;code&gt;new Date(2013, 2, 1, 0, 70)&lt;/code&gt; is equivalent to &lt;code&gt;new Date(2013, 2, 1, 1, 10)&lt;/code&gt; which both create a date for &lt;code&gt;2013-03-01T01:10:00&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;주 : &lt;/strong&gt; &lt;code&gt;Date&lt;/code&gt; 값들이 논리 범위보다 큰 경우, 하나 개 이상의 인자를 생성자로 불린다 (예를 들면 13 분 값 월 값 70으로 제공된다), 인접하는 값을 조정한다. 예를 들어 &lt;code&gt;new Date(2013, 13, 1)&lt;/code&gt; 은 &lt;code&gt;new Date(2014, 1, 1)&lt;/code&gt; 와 동일하며 둘 다 &lt;code&gt;2014-02-01&lt;/code&gt; 의 날짜를 만듭니다 (월은 0을 기준으로 함). 다른 값의 경우와 유사하게 : &lt;code&gt;new Date(2013, 2, 1, 0, 70)&lt;/code&gt; 는 &lt;code&gt;new Date(2013, 2, 1, 1, 10)&lt;/code&gt; 하며 둘 다 &lt;code&gt;2013-03-01T01:10:00&lt;/code&gt; 의 날짜를 작성합니다 . .</target>
        </trans-unit>
        <trans-unit id="c376b19033b5623261bc5e616fe9c13de6b18217" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Where &lt;code&gt;Date&lt;/code&gt; is called as a constructor with more than one argument, the specified arguments represent local time. If UTC is desired, use &lt;code&gt;new Date(&lt;a href=&quot;date/utc&quot;&gt;&lt;code&gt;Date.UTC(...)&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; with the same arguments.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Date&lt;/code&gt; 하나 개 이상의 인수를 생성자로 호출됩니다, 지정된 인수는 현지 시간을 나타냅니다. UTC가 필요한 경우 동일한 인수로 &lt;code&gt;new Date(&lt;a href=&quot;date/utc&quot;&gt;&lt;code&gt;Date.UTC(...)&lt;/code&gt;&lt;/a&gt;)&lt;/code&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="483e9d92a6e22a6218f96269fd44e507007c34f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While the syntax of this function is almost identical to that of &lt;a href=&quot;apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;, the fundamental difference is that &lt;code&gt;call()&lt;/code&gt; accepts an &lt;strong&gt;argument list&lt;/strong&gt;, while &lt;code&gt;apply()&lt;/code&gt; accepts a &lt;strong&gt;single array of arguments&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;주 :&lt;/strong&gt; 이 함수의 구문과 거의 동일하지만 &lt;a href=&quot;apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; 의 근본적인 차이가있다 &lt;code&gt;call()&lt;/code&gt; 수용 &lt;strong&gt;인수 목록을&lt;/strong&gt; 하면서, &lt;code&gt;apply()&lt;/code&gt; 수용 &lt;strong&gt;인수 단일 어레이&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="45de165c548b297c79c481f99d672f8cf89f9257" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While the syntax of this function is almost identical to that of &lt;a href=&quot;call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt;, the fundamental difference is that &lt;code&gt;call()&lt;/code&gt; accepts an &lt;strong&gt;argument list&lt;/strong&gt;, while &lt;code&gt;apply()&lt;/code&gt; accepts a &lt;strong&gt;single array of arguments&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;주 :&lt;/strong&gt; 이 함수의 구문과 거의 동일하지만 &lt;a href=&quot;call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; 의 근본적인 차이가있다 &lt;code&gt;call()&lt;/code&gt; 수용 &lt;strong&gt;인수 목록을&lt;/strong&gt; 하면서, &lt;code&gt;apply()&lt;/code&gt; 수용 &lt;strong&gt;인수 단일 어레이&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="2d59bee38265027466360229e7e458140b2cc379" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You call this method directly on the &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; constructor rather than on an instance of type &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 당신은에이 메소드를 직접 호출 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 생성자가 아니라 형의 인스턴스에 &lt;code&gt;Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b6b52c30f35b960fa7e13f1a53aad477d6c88a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can always easily get the global object using the global &lt;a href=&quot;../global_objects/globalthis&quot;&gt;&lt;code&gt;globalThis&lt;/code&gt;&lt;/a&gt; property, regardless of the current context in which your code is running.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 코드가 실행중인 현재 컨텍스트에 관계없이 global &lt;a href=&quot;../global_objects/globalthis&quot;&gt; &lt;code&gt;globalThis&lt;/code&gt; &lt;/a&gt; 속성을 사용하여 항상 전역 개체를 쉽게 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a7493391a1888e76b1ca7eb3c4a37230bbebd6bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You cannot use the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; function to remove values from an array. If you return &lt;code&gt;undefined&lt;/code&gt; or a function then &lt;code&gt;null&lt;/code&gt; is used instead.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; 함수를 사용하여 배열에서 값을 제거 할 수 없습니다 . &lt;code&gt;undefined&lt;/code&gt; 또는 함수를 반환하면 대신 &lt;code&gt;null&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bd8ec3585d0563d461a40a712d9dd099952dd2e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You cannot use the &lt;code&gt;replacer&lt;/code&gt; function to remove values from an array. If you return &lt;code&gt;undefined&lt;/code&gt; or a function then &lt;code&gt;null&lt;/code&gt; is used instead.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;replacer&lt;/code&gt; 함수를 사용하여 배열에서 값을 제거 할 수 없습니다 . &lt;code&gt;undefined&lt;/code&gt; 또는 함수를 반환하면 대신 &lt;code&gt;null&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a9d59ed7fc798253e15c8a8e7e933de0f3f06878" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You cannot write a &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive in the body of a function definition that accepts rest, default, or destructured parameters. Doing so will throw &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params&quot;&gt;a syntax error&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 는 쓸 수 없습니다 . rest, default 또는 destructured 매개 변수를 허용하는 함수 정의 본문의 지시문. 그렇게하면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params&quot;&gt;구문 오류가 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="ad9f17cd84782a44036af0759ea462aad9301397" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You won't get a valid JSON representation of your Object.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 객체의 유효한 JSON 표현을 얻을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="5d742ca8820cc8f4f5c4af33dd908bfaf75b2050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if separator is an array, then Array is coerced to String and used as separator.</source>
          <target state="translated">&lt;strong&gt;노트 :&lt;/strong&gt; separator가 배열이면 Array는 String으로 강제 변환되고 구분자로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f0992c6b2919932b092fd0f7a0df506e469dfbe6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Date&lt;/code&gt; 생성자와 &lt;code&gt;Date.parse&lt;/code&gt; 와 동등한 날짜 문자열을 구문 분석 하는 것은 브라우저 차이와 불일치로 인해 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9b9dfd33cb91f3fcb5263a6223e75ed8d7fccfcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; parsing of date strings with the &lt;code&gt;Date&lt;/code&gt; constructor (and &lt;code&gt;Date.parse&lt;/code&gt;, they are equivalent) is strongly discouraged due to browser differences and inconsistencies. Support for RFC 2822 format strings is by convention only. Support for ISO 8601 formats differs in that date-only strings (e.g. &quot;1970-01-01&quot;) are treated as UTC, not local.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Date&lt;/code&gt; 생성자와 &lt;code&gt;Date.parse&lt;/code&gt; 와 동등한 날짜 문자열을 구문 분석 하는 것은 브라우저 차이와 불일치로 인해 권장하지 않습니다. RFC 2822 형식 문자열에 대한 지원은 규칙에 따릅니다. ISO 8601 형식 지원은 날짜 전용 문자열 (예 : &quot;1970-01-01&quot;)이 로컬이 아닌 UTC로 처리된다는 점에서 다릅니다.</target>
        </trans-unit>
        <trans-unit id="8c39a996edba84df7911753e2829b63a5f8e3c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/async_function&quot;&gt;&lt;code&gt;async functions&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they are always created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor was called. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for an async function expression.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;AsyncFunction&lt;/code&gt; 생성자로 만든 &lt;a href=&quot;../statements/async_function&quot;&gt; &lt;code&gt;async functions&lt;/code&gt; &lt;/a&gt; 는 해당 생성 컨텍스트에 대한 클로저를 생성하지 않습니다. 그들은 항상 글로벌 범위에서 만들어집니다. 그것들을 실행하면 &lt;code&gt;AsyncFunction&lt;/code&gt; 생성자가 호출 된 범위의 변수가 아닌 자체 로컬 변수 및 전역 변수에만 액세스 할 수 있습니다 . 이것은 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 을 사용하는 것과 다릅니다 비동기 함수 표현식을 위해 코드와 함께 .</target>
        </trans-unit>
        <trans-unit id="2eb6541f8ccf55c4468e1e49fcdb6938ff45e9ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/async_function&quot;&gt;async functions&lt;/a&gt; created with the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they are always created in the global scope.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;AsyncFunction&lt;/code&gt; 생성자로 생성 된 &lt;a href=&quot;../statements/async_function&quot;&gt;비동기 함수&lt;/a&gt; 는 생성 컨텍스트에 대한 클로저를 생성하지 않습니다. 항상 전역 범위에서 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="d82da84f38fe49ba1869bdfebddcc97658eb025b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator function&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor was called. This is different from using &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; with code for a generator function expression.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; 생성자로 생성 된 &lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator function&lt;/code&gt; &lt;/a&gt; 는 생성 컨텍스트에 대한 클로저를 생성하지 않습니다. 그들은 항상 글로벌 범위에서 만들어집니다. 그것들을 실행하면 &lt;code&gt;GeneratorFunction&lt;/code&gt; 생성자가 호출 된 범위의 변수가 아닌 자체 로컬 변수 및 전역 변수에만 액세스 할 수 있습니다 . 이것은 생성자 함수 표현식에 대해 코드와 함께 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 을 사용하는 것과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="d357069579fd95b82d03b53b937bff1269c19d78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator function&lt;/code&gt;&lt;/a&gt; created with the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor do not create closures to their creation contexts; they are always created in the global scope.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; 생성자로 생성 된 &lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator function&lt;/code&gt; &lt;/a&gt; 는 생성 컨텍스트에 대한 클로저를 생성하지 않습니다. 항상 전역 범위에서 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="495863d88fbf751d8ba6907c004a3f640c826674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; will return 2 and not 0, as fromIndex limits only the beginning of the match.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; 는 fromIndex가 일치의 시작 만 제한하므로 0이 아닌 2를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c3f63d30d20997aaae6a490d7c647f38e169899" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; will return &lt;code&gt;2&lt;/code&gt; and not &lt;code&gt;0&lt;/code&gt;, as &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; limits only the beginning of the match.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 는 일치의 시작 부분 만 제한 하므로 &lt;code&gt;'abab'.lastIndexOf('ab', 2)&lt;/code&gt; 는 &lt;code&gt;0&lt;/code&gt; 이 아닌 &lt;code&gt;2&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9a8f89b113bc9a50274099344d40a045c940ddd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt; is not a global object, but could be obtained from generator function instance (see &lt;a href=&quot;global_objects/generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt; for more detail).</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; 은 전역 객체는 아니지만 생성기 함수 인스턴스에서 얻을 수 있습니다 (자세한 내용은 &lt;a href=&quot;global_objects/generatorfunction&quot;&gt; &lt;code&gt;GeneratorFunction&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e58c973f9676387f338549e440d8a09c618f73e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;Object.assign()&lt;/code&gt; does not throw on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; sources.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;Object.assign()&lt;/code&gt; 은 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 소스 에서 발생하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="bf64f1863041dc269140d2615eaae0c0d9d7a47b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;charCodeAt()&lt;/code&gt; will always return a value that is less than &lt;code&gt;65536&lt;/code&gt;. This is because the higher code points are represented by &lt;em&gt;a pair&lt;/em&gt; of (lower valued) &quot;surrogate&quot; pseudo-characters which are used to comprise the real character.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;charCodeAt()&lt;/code&gt; 은 항상 &lt;code&gt;65536&lt;/code&gt; 보다 작은 값을 반환합니다 . 이는 높은 코드 포인트가 실제 문자를 구성하는 데 사용 되는 &lt;em&gt;한 쌍&lt;/em&gt; 의 (낮은 값) &quot;대리&quot;의사 문자로 표시되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="def3ad9fe5c564448194b0f63f7804b66d49b157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;for...in&lt;/code&gt; should not be used to iterate over an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; where the index order is important.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 인덱스 순서가 중요한 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;for...in&lt;/code&gt; 을 사용하여 반복해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="902116d4fd6f892124eb1f57a56121a9e95812bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;javascript:&lt;/code&gt; pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : &lt;code&gt;javascript:&lt;/code&gt; 의사 프로토콜은 눈에 거슬리지 않는 이벤트 핸들러와 같은 다른 대안보다 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="882cfe6315be7052cd357e441923163e031b87d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A WebAssembly page has a constant size of 65,536 bytes, i.e., 64KiB.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 웹 어셈블리 페이지의 크기는 65,536 바이트, 즉 64KiB입니다.</target>
        </trans-unit>
        <trans-unit id="a8fd1ef24f654d71e16ff8445c0538324825d038" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A promise is said to be &lt;em&gt;settled&lt;/em&gt; if it is either fulfilled or rejected, but not pending. You will also hear the term &lt;em&gt;resolved&lt;/em&gt; used with promises &amp;mdash; this means that the promise is settled or &amp;ldquo;locked in&amp;rdquo; to match the state of another promise. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;States and fates&lt;/a&gt; contains more details about promise terminology.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 약속은 이행 또는 거부되었지만 보류 중이 아닌 경우 &lt;em&gt;정산&lt;/em&gt; 됩니다. 또한 약속과 함께 사용 된 &lt;em&gt;해결&lt;/em&gt; 이라는 용어도들을 수 있습니다. 이는 약속이 다른 약속의 상태와 일치하도록 정해 지거나 &quot;고정&quot;되었음을 의미합니다. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;주와 운명&lt;/a&gt; 에는 약속 용어에 대한 자세한 내용이 들어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea4f7bcefb8aac710664b2121ecc43f91e37c33c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A promise is said to be &lt;em&gt;settled&lt;/em&gt; if it is either fulfilled or rejected, but not pending. You will also hear the term &lt;em&gt;resolved&lt;/em&gt; used with promises &amp;mdash; this means that the promise is settled or &amp;ldquo;locked-in&amp;rdquo; to match the state of another promise. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;States and fates&lt;/a&gt; contain more details about promise terminology.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 약속이 이행되거나 거부되었지만 보류 중이 아닌 경우 약속이 &lt;em&gt;해결&lt;/em&gt; 되었다고합니다 . 또한 promise와 함께 사용되는 &lt;em&gt;resolved&lt;/em&gt; 라는 용어를 듣게 될 것 입니다. 이것은 약속이 다른 약속의 상태와 일치하도록 &quot;고정&quot;되어 있음을 의미합니다. &lt;a href=&quot;https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md&quot;&gt;상태 및 운명&lt;/a&gt; 에는 약속 용어에 대한 자세한 내용이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="da18c4aef283b425565115d98ea8cafe9e4b7eab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For this to work, &lt;code&gt;.wasm&lt;/code&gt; files should be returned with an &lt;code&gt;application/wasm&lt;/code&gt; MIME type by the server.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; :이 작업을 수행 하려면 서버 에서 &lt;code&gt;application/wasm&lt;/code&gt; MIME 유형 과 함께 &lt;code&gt;.wasm&lt;/code&gt; 파일을 리턴해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b68110d5a709768ad094da32f390cd8a532bb582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Hashbang comments in JavaScript mimic &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;shebangs in Unix&lt;/a&gt; used to run files with proper interpreter.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : JavaScript의 Hashbang 주석은 적절한 인터프리터로 파일을 실행하는 데 사용되는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;Unix의 shebang을&lt;/a&gt; 모방 합니다.</target>
        </trans-unit>
        <trans-unit id="c76700c50c5fa16db7054238c2711b85fbd934f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 비 배열 객체의 속성은 특정 순서로 문자열 화 될 수 없습니다. 스트링 화 내에서 동일한 객체 내에서 속성의 순서에 의존하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="26b2b5a3e93fc7fc264fe77e39dc89a93f9c95c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: See also this &lt;a href=&quot;https://stackoverflow.com/questions/25574963/ies-tolocalestring-has-strange-characters-in-results&quot;&gt;StackOverflow thread&lt;/a&gt; for more details and examples.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 자세한 내용과 예제 는이 &lt;a href=&quot;https://stackoverflow.com/questions/25574963/ies-tolocalestring-has-strange-characters-in-results&quot;&gt;StackOverflow 스레드&lt;/a&gt; 를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="2f6afb69d4eebfc7e3036f03848bafb35d8fd458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Tables can currently only store function references, but this will likely be expanded in the future.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 테이블은 현재 함수 참조 만 저장할 수 있지만 향후 확장 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="b8f7874282f151cfbcdd89b40732976fc8043def" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;keys()&lt;/code&gt; method is an alias for this method (for similarity with &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; objects), hence the &lt;code&gt;keys()&lt;/code&gt; page redirecting here. It behaves exactly the same and returns &lt;strong&gt;values&lt;/strong&gt; of &lt;code&gt;Set&lt;/code&gt; elements.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : &lt;code&gt;keys()&lt;/code&gt; 메서드는이 메서드의 별칭 ( &lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 객체 와 유사 함을 위해 )이므로 여기 에서 &lt;code&gt;keys()&lt;/code&gt; 페이지를 리디렉션합니다. 정확히 동일하게 동작하며 &lt;code&gt;Set&lt;/code&gt; 요소의 &lt;strong&gt;값&lt;/strong&gt; 을 반환 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="730c3fbd9fa3f3ea98a713ccc6d273af0217ce1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This method returns &lt;code&gt;false&lt;/code&gt; for any condition put on an empty array.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; :이 메소드는 빈 배열에 놓인 조건에 대해 &lt;code&gt;false&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a15ca51ca715b47d988eb0b32907c1c0c57fc3ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This method returns &lt;code&gt;true&lt;/code&gt; for any condition put on an empty array.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; :이 메소드는 빈 배열에 놓인 모든 조건에 대해 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="268ad9f0404aa4d4c9f3de0de141d7fb9b970ee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also find this example as &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; on GitHub (&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;view it live also&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; :이 예제는 GitHub에서 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html &lt;/a&gt;&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;로도 볼 수&lt;/a&gt; 있습니다 ( 실제로보기 ).</target>
        </trans-unit>
        <trans-unit id="dabecf3ab82a6b52a81ab3fa4b0de9cf41a94cba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can also find this example at &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html&quot;&gt;index.html&lt;/a&gt; on GitHub (&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/&quot;&gt;view it live also&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; :이 예제는 GitHub의 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html&quot;&gt;index.html &lt;/a&gt;&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/&quot;&gt;에서도 볼 수&lt;/a&gt; 있습니다 ( 실제로보기 ).</target>
        </trans-unit>
        <trans-unit id="91bc1fdd36d938de9da490fa6cbe55d7c58f4983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You can see the example &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/global.html&quot;&gt;running live on GitHub&lt;/a&gt;; see also the &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.html&quot;&gt;source code&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/global.html&quot;&gt;GitHub에서 실행중인&lt;/a&gt; 예제를 볼 수 있습니다 . &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/global.html&quot;&gt;소스 코드&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="be682e2136e817b30ce287371c8a73287c26fcdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You'll probably want to use &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; in most cases, as it is more efficient than &lt;code&gt;compile()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 대부분의 경우 &lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt; 을 사용 하는 것이 좋습니다. &lt;code&gt;compile()&lt;/code&gt; 보다 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="9a46e1cbe0687c5ef74a0082002606802b10569f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: You'll probably want to use &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; in most cases, as it is more efficient than &lt;code&gt;instantiate()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 대부분의 경우 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 을 사용 하는 것이 좋습니다. &lt;code&gt;instantiate()&lt;/code&gt; 보다 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="cfe6590d93bda764d8848600573bf4b249233971" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: be aware of yielding rejected promises from sync generator. In such case &lt;code&gt;for await...of&lt;/code&gt; throws when consuming rejected promise and DOESN'T CALL &lt;code&gt;finally&lt;/code&gt; blocks within that generator. This can be undesireable if you need to free some allocated resources with &lt;code&gt;try/finally&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 동기화 생성기에서 거부 된 프라 미스를 생성하는 &lt;strong&gt;것에 유의하십시오&lt;/strong&gt; . 이러한 경우 거부 된 약속을 소비 할 때 &lt;code&gt;for await...of&lt;/code&gt; throws 및 DOES N'T CALL이 &lt;code&gt;finally&lt;/code&gt; 해당 생성기 내에서 차단됩니다. &lt;code&gt;try/finally&lt;/code&gt; 를 사용 하여 할당 된 리소스를 해제해야하는 경우 바람직하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c5f3eb9c75799b6711da351bfde82222637c772a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes&lt;/strong&gt;: The parentheses &lt;code&gt;( ... )&lt;/code&gt; around the assignment statement are required when using object literal destructuring assignment without a declaration.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 선언없이 객체 리터럴 파괴 할당을 사용하는 경우 할당 문 주위 의 괄호 &lt;code&gt;( ... )&lt;/code&gt; 가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a14401185f3ff5bd99f02a62b740692d031437ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Numbers&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="328dbb416ec43a5d5908babc2a4d818c1d1b4d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers&lt;/strong&gt;: Leading zeros are prohibited (in &lt;a href=&quot;json/stringify&quot;&gt;&lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/a&gt; zeros will be ignored, but in &lt;a href=&quot;json/parse&quot;&gt;&lt;code&gt;JSON.parse&lt;/code&gt;&lt;/a&gt; it will throw SyntaxError); a decimal point must be followed by at least one digit.</source>
          <target state="translated">&lt;strong&gt;숫자&lt;/strong&gt; : 선행 0은 금지됩니다 ( &lt;a href=&quot;json/stringify&quot;&gt; &lt;code&gt;JSON.stringify&lt;/code&gt; 에서는&lt;/a&gt; 0이 무시되지만 &lt;a href=&quot;json/parse&quot;&gt; &lt;code&gt;JSON.parse&lt;/code&gt; &lt;/a&gt; 에서는 SyntaxError가 발생 함). 소수점 뒤에 최소한 하나의 숫자가 와야합니다.</target>
        </trans-unit>
        <trans-unit id="159ea910cec98f0557276fc2767d13225aa489ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Objects and Arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;객체와 배열&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ece7382735109b62c363babb434637eaa506bff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Objects and Arrays&lt;/strong&gt;: Property names must be double-quoted strings; trailing commas are forbidden.</source>
          <target state="translated">&lt;strong&gt;객체 및 배열&lt;/strong&gt; : 속성 이름은 큰 따옴표로 묶은 문자열이어야합니다. 후행 쉼표는 금지되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1826f809cf822bd5667504e48b0c2d2304b96d8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old comprehensions syntax (do not use anymore!):&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;오래된 이해 구문 (더 이상 사용하지 마십시오!) :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="69bd1ed79ee9bc0bb621aeef86c416fd19b0ce7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One key difference:&lt;/strong&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt; returns the object or throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the property has not been successfully defined. &lt;code&gt;Reflect.defineProperty&lt;/code&gt;, however, simply returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully defined.</source>
          <target state="translated">&lt;strong&gt;한 가지 주요 차이점 : &lt;/strong&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; 는 객체를 반환하거나 속성이 성공적으로 정의되지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다. 그러나 &lt;code&gt;Reflect.defineProperty&lt;/code&gt; 는 속성이 성공적으로 정의되었는지 여부를 나타내는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f8d6139fc4fa8f83bc90057837ed73ede18b2f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Operator precedence&lt;/strong&gt; determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.</source>
          <target state="translated">&lt;strong&gt;연산자 우선 순위&lt;/strong&gt; 는 연산자가 서로에 대해 구문 분석되는 방법을 결정합니다. 우선 순위가 높은 연산자는 우선 순위가 낮은 연산자의 피연산자가됩니다.</target>
        </trans-unit>
        <trans-unit id="3ccfff51da82250c6945871fe29c0806ff574c48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Output:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52d9ccdbcabfbe2a23a0a89b1f853ca9fcd3e609" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Polyfill Notes:&lt;/strong&gt; This algorithm is exactly as specified in ECMA-262 6&lt;sup&gt;th&lt;/sup&gt; Edition (assuming &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; have their original values and that &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;.call()&lt;/code&gt; evaluates to the original value of &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;Polyfill 참고 :&lt;/strong&gt; 이 알고리즘은 ECMA-262 &lt;sup&gt;6th&lt;/sup&gt; Edition에 지정된 것과 정확히 일치합니다 ( &lt;code&gt;Object&lt;/code&gt; 및 &lt;code&gt;TypeError&lt;/code&gt; 가 원래 값을 가지고 있고 &lt;code&gt;&lt;var&gt;callback&lt;/var&gt;.call()&lt;/code&gt; 이 &lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call()&lt;/code&gt; &lt;/a&gt; 의 원래 값으로 평가 된다고 가정 ).</target>
        </trans-unit>
        <trans-unit id="68122dbb7070cbaf7691a8bb5160ae8529b51c44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pro:&lt;/strong&gt; The &lt;code&gt;with&lt;/code&gt; statement can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. The scope chain change required by 'with' is not computationally expensive. Use of 'with' will relieve the interpreter of parsing repeated object references. Note, however, that in many cases this benefit can be achieved by using a temporary variable to store a reference to the desired object.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;장점 &lt;strong&gt;: &lt;/strong&gt; &lt;code&gt;with&lt;/code&gt; 문은 성능 저하없이 긴 객체 참조를 반복 할 필요성을 줄여 파일 크기를 줄이는 데 도움 이 됩니다 . 'with'에 필요한 범위 체인 변경은 계산 비용이 많이 들지 않습니다. 'with'를 사용하면 반복되는 객체 참조를 구문 분석하는 인터프리터가 완화됩니다. 그러나 대부분의 경우이 변수는 임시 변수를 사용하여 원하는 객체에 대한 참조를 저장함으로써 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6b834226693d404aecf56319d99c8560bccf62c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Property accessors&lt;/strong&gt; provide access to an object's properties by using the dot notation or the bracket notation.</source>
          <target state="translated">&lt;strong&gt;속성&lt;/strong&gt; 접근자는 점 표기법 또는 대괄호 표기법을 사용하여 객체의 속성에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a7e2daf6ab78ab4941f50d31c4d73b3f5fe43db5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflect&lt;/strong&gt; is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of &lt;a href=&quot;proxy/handler&quot;&gt;proxy handlers&lt;/a&gt;. &lt;code&gt;Reflect&lt;/code&gt; is not a function object, so it's not constructible.</source>
          <target state="translated">&lt;strong&gt;Reflect&lt;/strong&gt; 는 인터셉트 가능한 JavaScript 조작을위한 메소드를 제공하는 내장 오브젝트입니다. 메소드는 &lt;a href=&quot;proxy/handler&quot;&gt;프록시 핸들러&lt;/a&gt; 와 동일 합니다. &lt;code&gt;Reflect&lt;/code&gt; 는 함수 객체가 아니므로 구성 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="47ffe6b9b671e8b4220d15217c304878663344ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reflect&lt;/strong&gt; is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of &lt;a href=&quot;proxy/proxy&quot;&gt;proxy handlers&lt;/a&gt;. &lt;code&gt;Reflect&lt;/code&gt; is not a function object, so it's not constructible.</source>
          <target state="translated">&lt;strong&gt;Reflect&lt;/strong&gt; 는 가로채는 JavaScript 작업을위한 메서드를 제공하는 기본 제공 개체입니다. 메서드는 &lt;a href=&quot;proxy/proxy&quot;&gt;프록시 처리기&lt;/a&gt; 의 메서드와 동일 합니다. &lt;code&gt;Reflect&lt;/code&gt; 는 함수 객체가 아니므로 구성 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="363799465d2aa7632d4980182a2fafaaec66a181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Relation with strict mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;엄격 모드와의 관계&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2968057f98255a54a356baa8a6298169e0b0da1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove an item by index position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;색인 위치별로 항목 제거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="836d4522c55df23783cf3a14d604005a6b553333" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove an item from the beginning of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열의 시작 부분에서 항목 제거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6ba0905a651cec43ed2e2b9063c36aa963060e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove an item from the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열 끝에서 항목 제거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e47fa095321df3a7f10f4fedbd3b9a8987634de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove from the end of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열의 끝에서 제거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2c08b8bf8fa04b2a3d5c5cdfdce58bcf6945232b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove from the front of an Array&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;어레이의 앞면에서 제거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dce4b02f92aa1d139f10dc83a34e567ed4967a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remove items from an index position&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;색인 위치에서 항목 제거&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2659efc4c4a02d37ec8a044e804f7ca9b1c07d17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns a localized string representing the array and its elements. See also &lt;a href=&quot;array/tolocalestring&quot;&gt;&lt;code&gt;Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열 및 해당 요소를 나타내는 지역화 된 문자열을 반환합니다. &lt;a href=&quot;array/tolocalestring&quot;&gt; &lt;code&gt;Array.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a8d7ecfc95623c2033f63fd590afd75b15836010" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns a new &lt;em&gt;array iterator&lt;/em&gt; object that contains the values for each index in the array.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;배열의&lt;/em&gt; 각 인덱스에 대한 값을 포함 하는 새 &lt;em&gt;배열 반복기&lt;/em&gt; 객체를 반환합니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50faf647e72a7f4c8c5501075b83bcc0eb62ebd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns a string representing the array and its elements. See also &lt;a href=&quot;array/tostring&quot;&gt;&lt;code&gt;Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;배열과 그 요소를 나타내는 문자열을 반환합니다. &lt;a href=&quot;array/tostring&quot;&gt; &lt;code&gt;Array.prototype.toString()&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0540c505c27086dc25fba77674774ebc1e5e656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Since ECMAScript 2017:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ECMAScript 2017 이후 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="364e95219afdc861c39574e473e8e92a19cd552a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Snippet:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Snippet:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="50772e896681591579a59c57654fcb7f272b94bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Specification&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Specification&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36538cd5dd56100c3fc7024ecb42c3b35b4d611a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spread syntax&lt;/strong&gt; (&lt;code&gt;...&lt;/code&gt;) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</source>
          <target state="translated">&lt;strong&gt;확산 구문&lt;/strong&gt; ( &lt;code&gt;...&lt;/code&gt; )을 사용하면 0 개 이상의 인수 (함수 호출 용) 또는 요소 (배열 리터럴 용)가 예상되는 위치에서 배열 표현식 또는 문자열과 같은 반복 가능 항목을 확장하거나 확장 할 객체 표현식을 사용할 수 있습니다. 0 개 이상의 키-값 쌍 (객체 리터럴 용)이 예상되는 위치입니다.</target>
        </trans-unit>
        <trans-unit id="b1d7a85c5e31389a97538ee981b219beb53784f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spread syntax&lt;/strong&gt; allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</source>
          <target state="translated">&lt;strong&gt;스프레드 구문을&lt;/strong&gt; 사용하면 0 개 이상의 인수 (함수 호출의 경우) 또는 요소 (배열 리터럴의 경우)가 예상되는 위치에서 배열 표현식 또는 문자열과 같은 반복 가능한 항목을 확장하거나 0 개 이상의 위치에서 오브젝트 표현식을 확장 할 수 있습니다. 키-값 쌍 (객체 리터럴)이 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="01304236fb3fbdd845e39d7a2be8f942c7fc22fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strict vs. non-strict mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;엄격하고 엄격하지 않은 모드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c9d22131e0b891bce0d6de6b15ad73403e3bc1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String generics are non-standard, deprecated and will get removed in the near future&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;문자열 제네릭은 비표준이며 더 이상 사용되지 않으며 조만간 제거 될 예정&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="900a3612f842cf82393dfc779b0606d885442dff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary&lt;/strong&gt;: Manually updating or setting the constructor can lead to differrent and sometimes confusing consequences. To prevent this, just define the role of &lt;code&gt;constructor&lt;/code&gt; in each specific case. In most cases, &lt;code&gt;constructor&lt;/code&gt; is not used and reassignment of it is not necessary.</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : 생성자를 수동으로 업데이트하거나 설정하면 다른 결과가 발생하고 때로는 혼란스러운 결과가 발생할 수 있습니다. 이를 방지하려면 각 특정 경우 에 &lt;code&gt;constructor&lt;/code&gt; 의 역할을 정의하기 만하면 됩니다. 대부분의 경우 &lt;code&gt;constructor&lt;/code&gt; 는 사용되지 않으며 다시 할당 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="f8fcf8539d8a98297d80b69a936a76ae9287a571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Summary&lt;/strong&gt;: manually updating or setting the constructor can lead to differrent and sometimes confusing consequences. To prevent this just define the role of constructor in each specific case. In most cases constructor is not used and reassignment of it is not necessary.</source>
          <target state="translated">&lt;strong&gt;요약&lt;/strong&gt; : 생성자를 수동으로 업데이트하거나 설정하면 차이가 생길 수 있으며 때로는 혼란 스러울 수 있습니다. 이를 막기 위해 각 특정 사례에서 생성자의 역할을 정의하십시오. 대부분의 경우 생성자는 사용되지 않으며 다시 할당 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="31a1b77662216c732a1cc2217e29d26879ca9806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The constructor function's&lt;/strong&gt; parameters are not enclosed between slashes but do use quotation marks.</source>
          <target state="translated">&lt;strong&gt;생성자 함수의&lt;/strong&gt; 매개 변수는 슬래시로 묶이지 않지만 따옴표를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1a6cfbd516cc2269ef92aff805f8c3609006b8a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The iterable protocol&lt;/strong&gt; allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a &lt;a href=&quot;statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; construct. Some built-in types are &lt;a href=&quot;#Built-in_iterables&quot;&gt;built-in iterables&lt;/a&gt; with a default iteration behavior, such as &lt;a href=&quot;global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, while other types (such as &lt;a href=&quot;global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;) are not.</source>
          <target state="translated">&lt;strong&gt;반복 가능한 프로토콜을&lt;/strong&gt; 사용하면 JavaScript 개체가 &lt;a href=&quot;statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; 구문 에서 반복되는 값과 같은 반복 동작을 정의하거나 사용자 지정할 수 있습니다. 일부 내장 유형은 &lt;a href=&quot;global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 과 같은 기본 반복 동작 이있는 &lt;a href=&quot;#Built-in_iterables&quot;&gt;내장 iterable&lt;/a&gt; 이지만 다른 유형 (예 : &lt;a href=&quot;global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; )은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27a3bd24feb600ef1f532bf3d1570bac82bef0bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The iterator protocol&lt;/strong&gt; defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.</source>
          <target state="translated">&lt;strong&gt;반복기 프로토콜&lt;/strong&gt; 은 값 시퀀스 (유한 또는 무한)를 생성하는 표준 방법을 정의하고 모든 값이 생성되었을 때 잠재적으로 반환 값을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="08ef9c91b9ae5e2f70c31a181b25e9d9b15ee64b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The literal notation's&lt;/strong&gt; parameters are enclosed between slashes and do not use quotation marks.</source>
          <target state="translated">&lt;strong&gt;리터럴 표기법의&lt;/strong&gt; 매개 변수는 슬래시로 묶여 있으며 따옴표를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9833331fd9a6aef6d0b22322f7e75ecf6f7892ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental&quot;&gt;experimental technology&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이것은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental&quot;&gt;실험 기술입니다&lt;/a&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17a05e908ffe0476bab1d69ee8f5ea9d7ca892ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Traditional Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;전통적인 예 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25ecbbdacf3e506b08947cf29bf7c078336b5206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Traditional functions&lt;/strong&gt; default &lt;code&gt;this&lt;/code&gt; to the window scope:</source>
          <target state="translated">&lt;strong&gt;전통적인 기능은&lt;/strong&gt; 기본 &lt;code&gt;this&lt;/code&gt; 창 범위를 :</target>
        </trans-unit>
        <trans-unit id="717bc18ee99931dbee84a9e8cb53beb20c99f5ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;big&amp;gt; element has been removed in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;사용 메모 :&lt;/strong&gt; &amp;lt;big&amp;gt; 요소는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; 에서 제거되었으며 더 이상 사용해서는 안됩니다. 대신 웹 개발자는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; 속성을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="348f7621b2818898cce4b82ca02a826dfbbe6c15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;big&amp;gt; element has been removed in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;사용 참고 :&lt;/strong&gt; &amp;lt;big&amp;gt; 요소는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; 에서 제거되었으며 더 이상 사용되지 않아야합니다. 대신 웹 개발자는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; 속성을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b64d0614cf0f35a92dc16f50aca15eb7c0be0a39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;font&amp;gt; element has been removed in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;사용 참고 사항 :&lt;/strong&gt; &amp;lt;font&amp;gt; 요소는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; 에서 제거되었으며 더 이상 사용해서는 안됩니다. 대신 웹 개발자는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; 속성을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="e4601d7cd12f611d7b1cb6a36d90b3d601b3b6db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage note:&lt;/strong&gt; The &amp;lt;font&amp;gt; element has been removed in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; and shouldn't be used anymore. Instead web developers should use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; properties.</source>
          <target state="translated">&lt;strong&gt;사용 참고 :&lt;/strong&gt; &amp;lt;font&amp;gt; 요소는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5&quot;&gt;HTML5&lt;/a&gt; 에서 제거되었으며 더 이상 사용되지 않아야합니다. 대신 웹 개발자는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; 속성을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f325a31580be62078e7fb5fe92896c3171b548f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Value&lt;/strong&gt;: there are no values stored in the array Iterator object; instead it stores the address of the array used in its creation and so depends on the values stored in that array.</source>
          <target state="translated">&lt;strong&gt;Value&lt;/strong&gt; : 배열 Iterator 객체에 저장된 값이 없습니다. 대신 생성에 사용 된 배열의 주소를 저장하므로 해당 배열에 저장된 값에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="f386da939ae3ec34638a5a475319e8fe20344697" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Be careful when using &lt;code&gt;Function.name&lt;/code&gt; and source code transformations, such as those carried out by JavaScript compressors (minifiers) or obfuscators. These tools are often used as part of a JavaScript build pipeline to reduce the size of a program prior to deploying it to production. Such transformations often change a function's name at build-time.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; JavaScript 압축기 (분압기) 또는 난독 처리기에서 수행 된 것과 같은 &lt;code&gt;Function.name&lt;/code&gt; 및 소스 코드 변환을 사용할 때는주의하십시오 . 이러한 도구는 종종 프로덕션에 배포하기 전에 프로그램의 크기를 줄이기 위해 JavaScript 빌드 파이프 라인의 일부로 사용됩니다. 이러한 변환은 빌드시 함수 이름을 변경하는 경우가 많습니다.</target>
        </trans-unit>
        <trans-unit id="55e70cb40ee5f019a59e614e90a54c1a2fc6b0b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Blinking text is frowned upon by several accessibility standards. The &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; element itself is non-standard and deprecated!</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 깜박임 텍스트는 몇 가지 접근성 표준에 의해 눈살을 찌푸립니다. &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; 요소 자체가 아닌 표준 및 사용되지 않는 것입니다!</target>
        </trans-unit>
        <trans-unit id="f2c5ca7243a79a7f8cb01c07d3ee075834da8402" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Changing the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is, by the nature of &lt;a href=&quot;https://mathiasbynens.be/notes/prototypes&quot;&gt;how modern JavaScript engines optimize property accesses&lt;/a&gt;, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in the &lt;code&gt;Object.setPrototypeOf(...)&lt;/code&gt; statement, but may extend to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; code that has access to any object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; has been altered.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 객체 의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 변경은 &lt;a href=&quot;https://mathiasbynens.be/notes/prototypes&quot;&gt;최신 JavaScript 엔진이 속성 액세스를 최적화하는 방식&lt;/a&gt; 의 특성상 현재 모든 브라우저 및 JavaScript 엔진에서 매우 느린 작업입니다. 또한, 변질 상속의 효과는 미묘한 광범위한이며에서 소요 단순히 시간에 한정되지 않는다 &lt;code&gt;Object.setPrototypeOf(...)&lt;/code&gt; 문, 이에 연장 될 수 &lt;strong&gt;&lt;em&gt;있는&lt;/em&gt;&lt;/strong&gt; 그 어떤 물체에 액세스 코드 &lt;code&gt;[[Prototype]]&lt;/code&gt; 이 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="1b5d0d7d0d2f5fe9dfc395db3dd646dfc2ae6e5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Changing the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in &lt;strong&gt;&lt;em&gt;every&lt;/em&gt;&lt;/strong&gt; browser and JavaScript engine. The effects on performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in &lt;code&gt;obj.__proto__ = ...&lt;/code&gt; statement, but may extend to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; code that has access to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; has been altered. If you care about performance you should avoid setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. Instead, create a new object with the desired &lt;code&gt;[[Prototype]]&lt;/code&gt; using &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 객체 의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 변경은 최신 JavaScript 엔진이 &lt;strong&gt;&lt;em&gt;모든&lt;/em&gt;&lt;/strong&gt; 브라우저 및 JavaScript 엔진 에서 속성 액세스를 최적화하는 방법 (매우 느리게 작동하는 특성)에 따라 다릅니다 . 상속 변경의 성능에 미치는 영향은 미묘하고 광범위하며 단순히 &lt;code&gt;obj.__proto__ = ...&lt;/code&gt; 문에 소요 된 시간으로 제한되지 않지만에 액세스 할 수 &lt;strong&gt;&lt;em&gt;있는 모든&lt;/em&gt;&lt;/strong&gt; 코드로 확장 될 수 있습니다&lt;strong&gt;&lt;em&gt; 어떤&lt;/em&gt;&lt;/strong&gt; 오브젝트 그의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 이 (가) 변경되었습니다. 성능에 관심이 있다면객체의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 설정을 피해야합니다. 대신에, 요구로 새로운 객체 생성 &lt;code&gt;[[Prototype]]&lt;/code&gt; 사용하여&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f84a273039ca68a151552997ce032eae196ac263" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Changing the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in &lt;strong&gt;&lt;em&gt;every&lt;/em&gt;&lt;/strong&gt; browser and JavaScript engine. The effects on performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in the &lt;code&gt;Object.setPrototypeOf(...)&lt;/code&gt; statement, but may extend to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; code that has access to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; has been altered. If you care about performance you should avoid setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. Instead, create a new object with the desired &lt;code&gt;[[Prototype]]&lt;/code&gt; using &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 객체 의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 변경은 최신 JavaScript 엔진이 &lt;strong&gt;&lt;em&gt;모든&lt;/em&gt;&lt;/strong&gt; 브라우저 및 JavaScript 엔진 에서 매우 느린 작업으로 속성 액세스를 최적화하는 방식에 따라 다릅니다 . 상속 변경 성능에 미치는 영향은 미묘하고 광범위하며 단순히 &lt;code&gt;Object.setPrototypeOf(...)&lt;/code&gt; 문에 소요 된 시간으로 제한되지 않지만에 액세스 할 수 &lt;strong&gt;&lt;em&gt;있는 모든&lt;/em&gt;&lt;/strong&gt; 코드로 확장 될 수 있습니다&lt;strong&gt;&lt;em&gt; 어떤&lt;/em&gt;&lt;/strong&gt; 누구의 객체 &lt;code&gt;[[Prototype]]&lt;/code&gt; 이 변경되었습니다. 성능에 관심이 있다면객체의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 설정을 피해야합니다. 원하는 대신에, 새로운 객체를 생성 &lt;code&gt;[[Prototype]]&lt;/code&gt; 사용&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7964cb103261810defa389e77079ccc22cb65f6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Changing the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in &lt;strong&gt;&lt;em&gt;every&lt;/em&gt;&lt;/strong&gt; browser and JavaScript engine. The effects on the performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in &lt;code&gt;obj.__proto__ = ...&lt;/code&gt; statements, but may extend to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; code that has access to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; object whose &lt;code&gt;[[Prototype]]&lt;/code&gt; has been altered. If you care about performance you should avoid setting the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. Instead, create a new object with the desired &lt;code&gt;[[Prototype]]&lt;/code&gt; using &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 객체 의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 변경은 최신 JavaScript 엔진이 속성 액세스를 최적화하는 방식의 특성상 &lt;strong&gt;&lt;em&gt;모든&lt;/em&gt;&lt;/strong&gt; 브라우저 및 JavaScript 엔진 에서 매우 느린 작업 입니다. 변질 상속의 성능에 미치는 영향은 미묘하고 멀리 떨어진하며에서 보낸 단순히 시간에 국한되지 않습니다 &lt;code&gt;obj.__proto__ = ...&lt;/code&gt; 문, 이에 연장 할 수 &lt;strong&gt;&lt;em&gt;있는&lt;/em&gt;&lt;/strong&gt; 에 액세스 할 수있는 코드가 &lt;strong&gt;&lt;em&gt;어떤&lt;/em&gt;&lt;/strong&gt; 누구의 객체 &lt;code&gt;[[Prototype]]&lt;/code&gt; 이 변경되었습니다. 성능에 관심이 있다면 개체 의 &lt;code&gt;[[Prototype]]&lt;/code&gt; 설정을 피해야 합니다. 대신 원하는 &lt;code&gt;[[Prototype]]&lt;/code&gt; 을 사용하여 새 개체를 만듭니다.&lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="18dd0f800e40f86aaabb796c180dca2b9b0e4ac3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use &lt;code&gt;eval()&lt;/code&gt;. See &lt;a href=&quot;#Never_use_eval!&quot;&gt;Never use eval()!&lt;/a&gt;, below.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 문자열에서 JavaScript를 실행하는 것은 엄청난 보안 위험입니다. &lt;code&gt;eval()&lt;/code&gt; 을 사용할 때 나쁜 행위자가 임의의 코드를 실행하는 것은 너무 쉽습니다 . &lt;a href=&quot;#Never_use_eval!&quot;&gt;eval () 사용 안 함을&lt;/a&gt; 참조하십시오 ! , 아래.</target>
        </trans-unit>
        <trans-unit id="2e85094cf11795c6f63aad79a4176e958d70dbd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Floating point numbers cannot represent all decimals precisely in binary. This can lead to unexpected results, such as &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; returning &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 부동 소수점 숫자는 모든 소수를 이진수로 정확하게 나타낼 수 없습니다. 이로 인해 &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; 를 반환하는 것과 같은 예기치 않은 결과가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="248749449464dd9efaec982a0437b9634b4e3780" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Never use a loop like this on arrays. Only use it on objects. See &lt;a href=&quot;for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 배열에서 이와 같은 루프를 사용하지 마십시오. 물체에만 사용하십시오. 자세한 내용 &lt;a href=&quot;for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="46ba90dc0e6bb8c05d0ffaf09a6a1e56a4e049a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Referring to &lt;code&gt;this&lt;/code&gt; before calling &lt;code&gt;super()&lt;/code&gt; will throw an error.</source>
          <target state="translated">&lt;strong&gt;경고 : &lt;/strong&gt; &lt;code&gt;super()&lt;/code&gt; 를 호출하기 전에 &lt;code&gt;this&lt;/code&gt; 참조 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bfb69c8eec1421056abb8beea5c19c0b31c53352" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The 5th edition of ECMAScript (ES5) forbids use of &lt;code&gt;arguments.callee()&lt;/code&gt; in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Strict_mode&quot;&gt;strict mode&lt;/a&gt;. Avoid using &lt;code&gt;arguments.callee()&lt;/code&gt; by either giving function expressions a name or use a function declaration where a function must call itself.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; ECMAScript (ES5) 5 판은 &lt;code&gt;arguments.callee()&lt;/code&gt; 사용을 금지합니다. 에서는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Strict_mode&quot;&gt;엄격 모드&lt;/a&gt; 에서 를 . 함수 표현식에 이름을 지정하거나 함수 자체를 호출해야하는 함수 선언을 사용 하여 &lt;code&gt;arguments.callee()&lt;/code&gt; 를 사용하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="ad4f51aaab05099d88692e1cde006304c24394d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The 5th edition of ECMAScript (ES5) forbids use of &lt;code&gt;arguments.callee()&lt;/code&gt; in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Strict_mode&quot;&gt;strict mode&lt;/a&gt;. Avoid using &lt;code&gt;arguments.callee()&lt;/code&gt; by either giving function expressions a name or use a function declaration where a function must call itself.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; ECMAScript (ES5) 5 판은 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Strict_mode&quot;&gt;엄격 모드&lt;/a&gt; 에서 &lt;code&gt;arguments.callee()&lt;/code&gt; 사용을 금지 합니다 . 함수 표현식에 이름을 지정하거나 함수가 자신을 호출해야하는 함수 선언을 사용 하여 &lt;code&gt;arguments.callee()&lt;/code&gt; 사용을 피하십시오 .</target>
        </trans-unit>
        <trans-unit id="f498e75f5d9e31af159052fc376e06d40082fac7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The script interpreter will set the built-in &lt;code&gt;Function.name&lt;/code&gt; property only if a function does not have an own property called &lt;em&gt;name&lt;/em&gt; (see section &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-setfunctionname&quot;&gt;9.2.11 of the ECMAScript2015 Language Specification&lt;/a&gt;). However, ES2015 specifies the &lt;em&gt;static&lt;/em&gt; keyword such that static methods will be set as OwnProperty of the class constructor function (ECMAScript2015, &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-classdefinitionevaluation&quot;&gt;14.5.14.21.b&lt;/a&gt; + &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer-runtime-semantics-propertydefinitionevaluation&quot;&gt;12.2.6.9&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 스크립트 인터프리터는 함수에 &lt;em&gt;name&lt;/em&gt; 이라는 자체 속성이없는 경우에만 내장 &lt;code&gt;Function.name&lt;/code&gt; 속성을 설정합니다 ( &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-setfunctionname&quot;&gt;ECMAScript2015 언어 사양&lt;/a&gt; 섹션 9.2.11 참조).&lt;em&gt;&lt;/em&gt; ). 그러나 ES2015는 &lt;em&gt;정적을&lt;/em&gt; 지정합니다.&lt;em&gt;&lt;/em&gt; 키워드가 클래스 생성자 함수 (ECMAScript2015, &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-classdefinitionevaluation&quot;&gt;14.5.14.21.b&lt;/a&gt; + &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer-runtime-semantics-propertydefinitionevaluation&quot;&gt;12.2.6.9&lt;/a&gt; )의 OwnProperty 로 설정되도록 키워드를 .</target>
        </trans-unit>
        <trans-unit id="5c745d6239349e8d5d523555b821c67826074919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This section demonstrates JavaScript capabilities and documents some edge cases of the &lt;code&gt;bind()&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 이 섹션에서는 JavaScript 기능을 보여주고 &lt;code&gt;bind()&lt;/code&gt; 메서드 의 몇 가지 주요 사례를 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="7f75778df4c35dd67da903044e9651178f5ebb11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This section demonstrates JavaScript capabilities and documents some edge cases of the &lt;code&gt;bind()&lt;/code&gt; method. The methods shown below are not the best way to do things and probably should not be used in any production environment.</source>
          <target state="translated">&lt;strong&gt;경고:&lt;/strong&gt; 이 단원에서는 JavaScript 기능을 보여주고 &lt;code&gt;bind()&lt;/code&gt; 메서드 의 몇 가지 중요한 경우를 설명합니다 . 아래에 표시된 방법은 작업을 수행하는 가장 좋은 방법이 아니므로 프로덕션 환경에서 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="f8edd84388c56ed250f5c50a100a3a210b61dfad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; When the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) is used as a separator, the string is &lt;strong&gt;not&lt;/strong&gt; split by &lt;em&gt;user-perceived characters&lt;/em&gt; (&lt;a href=&quot;https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries&quot;&gt;grapheme clusters&lt;/a&gt;) or unicode characters (codepoints), but by UTF-16 codeunits. This destroys &lt;a href=&quot;http://unicode.org/faq/utf_bom.html#utf16-2&quot;&gt;surrogate pairs&lt;/a&gt;. See &lt;a href=&quot;https://stackoverflow.com/a/34717402&quot;&gt;&amp;ldquo;How do you get a string to a character array in JavaScript?&amp;rdquo; on StackOverflow&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 빈 문자열 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; )을 구분자로 사용하면 문자열이 &lt;em&gt;사용자가 인식하는 문자&lt;/em&gt; ( &lt;a href=&quot;https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries&quot;&gt;grapheme clusters&lt;/a&gt; ) 또는 유니 코드 문자 (코드 포인트)로 분할 &lt;strong&gt;되지 않고&lt;/strong&gt; UTF-16 코드 단위로 분할됩니다 . 이것은 &lt;a href=&quot;http://unicode.org/faq/utf_bom.html#utf16-2&quot;&gt;서로 게이트 쌍을&lt;/a&gt; 파괴 합니다 . &lt;a href=&quot;https://stackoverflow.com/a/34717402&quot;&gt;&quot;JavaScript에서 문자열을 문자 배열로 가져 오는 방법&quot;을&lt;/a&gt; 참조하십시오. 에 StackOverflow .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a10eae4778a6e80dd66cdfbd34f4e810f358284c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; While &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; is supported today in most browsers, its existence and exact behavior has only been standardized in the ECMAScript 2015 specification as a legacy feature to ensure compatibility for web browsers. For better support, it is recommended that only &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt; be used instead.</source>
          <target state="translated">&lt;strong&gt;경고 :&lt;/strong&gt; 동안 &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; 오늘날 대부분의 브라우저에서 Object.prototype .__ proto__ 가 지원 ECMAScript 2015 사양에서는 웹 브라우저와의 호환성을 보장하기 위해 ECMAScript 2015 사양에서만 그 존재와 정확한 동작이 표준화되었습니다. 더 나은 지원을 위해서는 &lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt; 만 대신 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5b7f4fab08bb59d4616bd2fce594968e7f145d8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; While &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; is supported today in most browsers, its existence and exact behavior has only been standardized in the ECMAScript 2015 specification as a legacy feature to ensure compatibility for web browsers. For better support, use &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;경고 : &lt;/strong&gt; &lt;code&gt;Object.prototype.__proto__&lt;/code&gt; 는 오늘날 대부분의 브라우저에서 지원 되지만 그 존재와 정확한 동작은 웹 브라우저와의 호환성을 보장하기위한 레거시 기능으로 ECMAScript 2015 사양에서만 표준화되었습니다. 더 나은 지원을 위해 &lt;a href=&quot;getprototypeof&quot;&gt; &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; &lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="990856b6e7ab811cec9e31655324efe55cff20ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt;&lt;strong&gt;Do &lt;em&gt;not&lt;/em&gt; place the regular expression literal (or &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; constructor) within the &lt;code&gt;while&lt;/code&gt; condition! &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;경고 : &lt;/strong&gt;&lt;strong&gt;마 &lt;em&gt;하지&lt;/em&gt; 정규 표현식 리터럴 (또는 배치 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 내에서 생성자를) &lt;code&gt;while&lt;/code&gt; 의 조건!&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a5612383cfdef07dbdbaccf59a6815b748fc594" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Do not call &lt;code&gt;Promise.resolve&lt;/code&gt; on a thenable that resolves to itself. This will cause infinite recursion as it tries to flatten what seems to be an infinitely nested promise. An &lt;a href=&quot;https://stackblitz.com/edit/angular-promiseresovle-with-async-pipe?file=src/app/app.component.ts&quot;&gt;example&lt;/a&gt; would be using it along with the &lt;code&gt;async&lt;/code&gt; Pipe in Angular. Find more on that &lt;a href=&quot;https://angular.io/guide/template-syntax#avoid-side-effects&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;경고&lt;/strong&gt; : 음주 호출하지 &lt;code&gt;Promise.resolve&lt;/code&gt; 을 그 자체로 확인하는 thenable에. 이것은 무한히 중첩 된 약속처럼 보이는 것을 평평하게하려고 할 때 무한 재귀를 유발할 것입니다. &lt;a href=&quot;https://stackblitz.com/edit/angular-promiseresovle-with-async-pipe?file=src/app/app.component.ts&quot;&gt;예&lt;/a&gt; 와 함께 그것을 사용하는 것 &lt;code&gt;async&lt;/code&gt; Angular 비동기 파이프 . 자세한 내용은 &lt;a href=&quot;https://angular.io/guide/template-syntax#avoid-side-effects&quot;&gt;여기&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a9f32395d01e090845cd2b2405d5899dc04c443" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[BoundArguments]]&lt;/strong&gt; - a list of values whose elements are used as the first arguments to any call to the wrapped function.</source>
          <target state="translated">&lt;strong&gt;[[BoundArguments]]&lt;/strong&gt; -랩핑 된 함수를 호출 할 때 첫 번째 인수로 사용되는 요소의 값 목록입니다.</target>
        </trans-unit>
        <trans-unit id="1c457b9ae473d9a8e5d4eaa6ce3d27b852eb32db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[BoundTargetFunction]] &lt;/strong&gt;- the wrapped function object;</source>
          <target state="translated">&lt;strong&gt;[[BoundTargetFunction]] &lt;/strong&gt; -랩핑 된 함수 객체;</target>
        </trans-unit>
        <trans-unit id="efa00c9a92d0f0da9ba1722378f62c5f9d65f3dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[BoundThis]]&lt;/strong&gt; - the value that is always passed as &lt;strong&gt;this&lt;/strong&gt; value when calling the wrapped function.</source>
          <target state="translated">&lt;strong&gt;[[BoundThis]]&lt;/strong&gt; -항상 다음과 같이 전달되는 값&lt;strong&gt;&lt;/strong&gt; 랩핑 된 함수를 호출 할 때&lt;strong&gt; 이&lt;/strong&gt; 값으로 값입니다.</target>
        </trans-unit>
        <trans-unit id="577f5d8afff0a44a9df13b8bae9dde88197fd9df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[Call]]&lt;/strong&gt; - executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a &lt;strong&gt;this&lt;/strong&gt; value and a list containing the arguments passed to the function by a call expression.</source>
          <target state="translated">&lt;strong&gt;[[요구]]&lt;/strong&gt; -이 개체와 관련된 코드를 실행합니다. 함수 호출 표현식을 통해 호출됩니다. 내부 메소드에 대한 인수는 &lt;strong&gt;this&lt;/strong&gt; 값이며 호출 표현식에 의해 함수에 전달 된 인수를 포함하는 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ae7cb4a73e4dd561b5d7fc00661b50aa5c37f30d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reason:&lt;/strong&gt; When &lt;code&gt;next().done=true&lt;/code&gt; or &lt;code&gt;currentIndex&amp;gt;length&lt;/code&gt; the &lt;code&gt;for..of&lt;/code&gt; loop ends. See &lt;a href=&quot;../../iteration_protocols&quot;&gt;Iteration protocols.&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;이유 :&lt;/strong&gt; 시 &lt;code&gt;next().done=true&lt;/code&gt; 또는 &lt;code&gt;currentIndex&amp;gt;length&lt;/code&gt; &lt;code&gt;for..of&lt;/code&gt; 루프 끝. &lt;a href=&quot;../../iteration_protocols&quot;&gt;반복 프로토콜을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a1f965c5efb247e9f1ca771f32bbb0bebddb9805" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;true&lt;/strong&gt; if the given value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; and its type is &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;제공된 값이 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이고 유형이 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 경우 &lt;strong&gt;true&lt;/strong&gt; . 그렇지 않으면 &lt;strong&gt;false&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e3e5cc75c1ee99fc843d327a7bd84a06634ec132" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;code&gt;fromIndex&lt;/code&gt;&lt;/var&gt;Optional</source>
          <target state="translated">&lt;var&gt;&lt;code&gt;fromIndex&lt;/code&gt;&lt;/var&gt;Optional</target>
        </trans-unit>
        <trans-unit id="228dfd5f782ef2106d4a039fb5d023e738ebc476" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fromIndex&lt;/var&gt;Optional</source>
          <target state="translated">&lt;var&gt;fromIndex&lt;/var&gt;Optional</target>
        </trans-unit>
        <trans-unit id="7ff930fa6ee78c9cd2e66ff9e5033f26ff39845a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt;)</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt;)</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="6947818ac409551f11fbaa78f0ea6391960aa5b8" translate="yes" xml:space="preserve">
          <source>==</source>
          <target state="translated">==</target>
        </trans-unit>
        <trans-unit id="b64cc2760536699c09c33fd0c38b16350e500872" translate="yes" xml:space="preserve">
          <source>===</source>
          <target state="translated">===</target>
        </trans-unit>
        <trans-unit id="5bab61eb53176449e25c2c82f172b82cb13ffb9d" translate="yes" xml:space="preserve">
          <source>?</source>
          <target state="translated">?</target>
        </trans-unit>
        <trans-unit id="6be66c429c3c727cd324ae89b834ffe534a6d50d" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 15</source>
          <target state="translated">? &amp;mdash; 15</target>
        </trans-unit>
        <trans-unit id="a98a00019d88037faae9cad68367d907f7fac409" translate="yes" xml:space="preserve">
          <source>? &amp;mdash; 9</source>
          <target state="translated">? &amp;mdash; 9</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="33438fbb207f3814ad9d1d3dd93280603933fa16" translate="yes" xml:space="preserve">
          <source>A (possibly empty) array containing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; copies of the contents of all custom sections matching &lt;code&gt;sectionName&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 를&lt;/a&gt; 포함하는 (아마도 비어있는) 배열 일치하는 모든 사용자 정의 섹션의 내용을 복사 &lt;code&gt;sectionName&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="92a14ad6ed14659d6e4d9b4f06b9c42dd38a55ba" translate="yes" xml:space="preserve">
          <source>A (possibly empty) array containing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; copies of the contents of all custom sections matching &lt;code&gt;sectionName&lt;/code&gt;.</source>
          <target state="translated">함유 A (비어) 배열 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 에&lt;/a&gt; 일치하는 모든 사용자 정의 섹션의 내용을 복사 &lt;code&gt;sectionName&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="fdf4b0ddf701f0a261a049420bf2794fe00b49ba" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../errors/not_a_codepoint&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown if an invalid Unicode code point is given (e.g. &lt;code&gt;&quot;RangeError: NaN is not a valid code point&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;../../errors/not_a_codepoint&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 잘못된 유니 코드 코드 포인트가 주어지면 발생합니다 (예 : &lt;code&gt;&quot;RangeError: NaN is not a valid code point&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2bfbb4d84766b2b34712b399ea54b5d0ef56bec9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../statements/for...of&quot;&gt;for...of&lt;/a&gt; / &lt;a href=&quot;../../statements/for...in&quot;&gt;for...in&lt;/a&gt; loops</source>
          <target state="translated">&lt;a href=&quot;../../statements/for...of&quot;&gt;용의&lt;/a&gt; / &lt;a href=&quot;../../statements/for...in&quot;&gt;용의&lt;/a&gt; 루프</target>
        </trans-unit>
        <trans-unit id="053a7abfdbcf7d9b895fd54cebc0c7e4b5efa722" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../statements/for...of&quot;&gt;for...of&lt;/a&gt; loop</source>
          <target state="translated">ㅏ &lt;a href=&quot;../../statements/for...of&quot;&gt;용의&lt;/a&gt; 루프</target>
        </trans-unit>
        <trans-unit id="84f12357f8487d95cc0257115743a5b38de4fff7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../template_literals&quot;&gt;template string&lt;/a&gt;, optionally with substitutions (&lt;code&gt;${...}&lt;/code&gt;).</source>
          <target state="translated">선택적으로 대체가 있는 &lt;a href=&quot;../../template_literals&quot;&gt;템플릿 문자열&lt;/a&gt; &lt;code&gt;${...}&lt;/code&gt; )가</target>
        </trans-unit>
        <trans-unit id="2b3930bb8348a508fdb54c0020887be0f3785bc4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not setting the property was successful.</source>
          <target state="translated">ㅏ &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 속성을 설정할지 여부를 나타내는 성공했습니다.</target>
        </trans-unit>
        <trans-unit id="5260414e39e626cf5a9dbd296956bc4afd34a379" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; has the property.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 여부를 나타내는 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 속성을 가지고있다.</target>
        </trans-unit>
        <trans-unit id="06a8ff2390c96888656c4062d94bf43a017fd129" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given object is extensible.</source>
          <target state="translated">ㅏ &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 지정된 객체가 확장 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="13c6697fbe602dcae192f8dcc845ae9ab4207982" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given object is frozen.</source>
          <target state="translated">ㅏ &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 주어진 객체가 고정되어 있는지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="8601cb9e9f1154f2ab964d9e588eeeb3c5c2a758" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given object is sealed.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 지정된 오브젝트가 밀봉되어 있는지의 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="3843ab2b6ba6be1add2b690cce1819a1dccb7ebb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given value is a finite number.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 지정된 값이 유한 수 있는지의 여부를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="5109483ee5c933868d96d80dd336f7312b80822c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given value is a number that is a safe integer.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 주어진 값이 안전 정수 개수인지 여부를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="bf5065726fcac4c9533050ddcf27e1e32ed27061" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the given value is an integer.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 지정된 값이 정수인지의 여부를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="4b808b286549ba59f8f3c5071d19f3337b726b63" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the object has the specified property as own property.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체가 자신의 속성으로 지정된 속성이 있는지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="4efefca3b380f5db951ff7c20fcb46e9716a8785" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully defined.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 속성이 성공적으로 정의되었는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ce0f69c8908cf96c2359f44a2dcf5356276e2139" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully deleted.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 속성이 성공적으로 삭제되었는지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="294a9c25ebbb3040a39065ef8dde07c4ba94ecf2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the prototype was successfully set.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 프로토 타입이 성공적으로 설정되었는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="560eec06c5f5994e73c61896c4df515cb01f8b8d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the target has the property.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 대상이 속성이 있는지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="f263166801049c433aa11d6df481ee2d7e4fe2cf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the target is extensible.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 대상이 확장 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="6169a91c19a2f0a7c8ce1da8d9495da52b4cb48d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the target was successfully set to prevent extensions.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 대상이 성공적으로 확장을 방지하기 위해 설정되었는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8c0c304da546848f8bd08511c1595d81c9e894ce" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the two arguments are the same value.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 두 인수가 같은 값인지를 나타내는.</target>
        </trans-unit>
        <trans-unit id="15d7965c265aafad8cc8bee3c70112fdaa7ce321" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether the calling object lies in the prototype chain of the specified object.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 지정된 객체의 프로토 타입 체인에서 호출하는 객체의 거짓말 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="b7862e7910f50c683ca4dac57c31bb0247ac2083" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether the operation is lock free.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 작업이 무료 잠금 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="3748e765d557a5251ef3f5e01724509815c72391" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether the specified property is enumerable and is the object's own property.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 지정된 속성이 열거와 객체의 자신의 재산인지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="3564dcfc5fb3b8f6620d15d3682485bd0fbae055" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether the specified property is enumerable.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 지정된 속성이 열거 가능한지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f87e9900a6ac3ce5ee1e6cc8b9af2f1bc396440d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; which is &lt;code&gt;true&lt;/code&gt; if the value &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt; is found within the array (or the part of the array indicated by the index &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt;, if specified).</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 이다 &lt;code&gt;true&lt;/code&gt; 값 경우 &lt;code&gt;&lt;var&gt;valueToFind&lt;/var&gt;&lt;/code&gt; 은 어레이 내에있는 (또는, 어레이의 일부를 인덱스로 표시된다 &lt;code&gt;&lt;var&gt;fromIndex&lt;/var&gt;&lt;/code&gt; 로 지정된 경우).</target>
        </trans-unit>
        <trans-unit id="ecd33b59987796a772d1e0ba229850e91fc8bb00" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; which is &lt;code&gt;true&lt;/code&gt; if the value &lt;code&gt;searchElement&lt;/code&gt; is found within the array (or the part of the array beginning at the index &lt;code&gt;fromIndex&lt;/code&gt;, if specified). Values of zero are all considered to be equal regardless of sign (that is, -0 is considered to be equal to both 0 and +0), but &lt;code&gt;false&lt;/code&gt; is not considered to be the same as 0.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 이다 &lt;code&gt;true&lt;/code&gt; 값 경우 &lt;code&gt;searchElement&lt;/code&gt; 가 (또는 인덱스의 초기 배열의 부분 배열 내에 발견 &lt;code&gt;fromIndex&lt;/code&gt; 로 지정된 경우). 0의 값은 부호에 관계없이 모두 같은 것으로 간주됩니다 (즉, -0은 0과 +0과 같은 것으로 간주 됨). &lt;code&gt;false&lt;/code&gt; 는 0과 같은 것으로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a66270d224cc8bf2fa8d27d680e79fbbfe7f4411" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2db7cf0bf42425e60ea87710df41debe3fea586e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called if the &lt;code&gt;Promise&lt;/code&gt; is fulfilled. This function has one argument, the &lt;code&gt;fulfillment value&lt;/code&gt;. If it is not a function, it is internally replaced with an &quot;Identity&quot; function (it returns the received argument).</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 이 이행 되면 호출 되는 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 입니다. 이 함수에는 &lt;code&gt;fulfillment value&lt;/code&gt; 이라는 하나의 인수가 있습니다. 함수가 아닌 경우 내부적으로 &quot;Identity&quot;함수로 대체됩니다 (수신 된 인수를 리턴 함).</target>
        </trans-unit>
        <trans-unit id="cbfe09aafac5cb3179827c64b978f884c1925f95" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called if the &lt;code&gt;Promise&lt;/code&gt; is rejected. This function has one argument, the &lt;code&gt;rejection reason&lt;/code&gt;. If it is not a function, it is internally replaced with a &quot;Thrower&quot; function (it throws an error it received as argument).</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 이 거부 되면 호출 되는 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 입니다. 이 함수에는 &lt;code&gt;rejection reason&lt;/code&gt; 하나의 인수가 있습니다. 함수가 아닌 경우 내부적으로 &quot;스 로커&quot;함수로 대체됩니다 (인수로 수신 된 오류가 발생 함).</target>
        </trans-unit>
        <trans-unit id="dd5b8dd934e6350b0cf2d693a280a94187b707ee" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called when the &lt;code&gt;Promise&lt;/code&gt; is rejected. This function has one argument:</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 이 거부 될 때 호출 되는 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 입니다. 이 함수에는 하나의 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="09c8336afa2c0f03310b3bd721ff74a91274c2f7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; called when the &lt;code&gt;Promise&lt;/code&gt; is settled.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 이 확정 될 때 호출 되는 &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="48c6bb1eeac96194bbb9e1a5cfbbd1044a7ee089" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; object's read-only &lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; property indicates the function's name as specified when it was created, or &lt;code&gt;&quot;anonymous&quot;&lt;/code&gt; for functions created anonymously.</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 객체의 읽기 전용 &lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; 속성은이 생성 될 때 지정 또는 함수의 이름을 나타냅니다 &lt;code&gt;&quot;anonymous&quot;&lt;/code&gt; 익명 생성 기능.</target>
        </trans-unit>
        <trans-unit id="04b5b3627cc05aeaef677200d2ca03594a8ae2b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; object's read-only &lt;code&gt;name&lt;/code&gt; property indicates the function's name as specified when it was created, or it may be either &lt;code&gt;anonymous&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt; (an empty string) for functions created anonymously.</source>
          <target state="translated">&lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; 객체의 읽기 전용 &lt;code&gt;name&lt;/code&gt; 생성시로 지정된 속성은 함수의 이름을 나타냅니다, 또는 일 수도있다 &lt;code&gt;anonymous&lt;/code&gt; 또는 &lt;code&gt;''&lt;/code&gt; 익명으로 작성 기능 (빈 문자열).</target>
        </trans-unit>
        <trans-unit id="56a354f1c57ffdef2987affbea832125989711c3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../global_objects/promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; or any value to wait for.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; 이나 기다릴 값.</target>
        </trans-unit>
        <trans-unit id="2a9409986c75e586634b3c1a14ae67713dfe46c5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../global_objects/promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; which will be resolved with the value returned by the async function, or rejected with an exception thrown from, or uncaught within, the async function.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; 비동기 함수에 의해 리턴 된 값 분해 또는 발생에서 예외가 거부하거나 내의 캐치되지 않는 것, 비동기 기능.</target>
        </trans-unit>
        <trans-unit id="1c80d77bffcf8142f404e17f78525e7b54c16234" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;../module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; 의&lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="35975415f4e0e0e5a26be836b5c62773dfdf9df3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; representing the milliseconds elapsed since the UNIX epoch.</source>
          <target state="translated">&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 유닉스 시대부터 경과 한 밀리 세컨드 수를 나타내는.</target>
        </trans-unit>
        <trans-unit id="c72f514d5ea1869e64d0f1bc89c9c57ec95165e8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;. If the parameter is of a different type, it will get converted to a number or to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; if it cannot be converted.</source>
          <target state="translated">&lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; . 매개 변수가 다른 유형 인 경우 변환 할 수없는 경우 숫자 또는 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="90e69c14f902310947e3c38b04e08ebd2c85319c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that is rejected with the given reason.</source>
          <target state="translated">주어진 이유로 거절 되는 &lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6227ec584abbfb76dde45384e4e66d6abe4214dc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that is resolved with the given value, or the promise passed as value, if the value was a promise object.</source>
          <target state="translated">&lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; 값이 약속 객체가 있다면, 주어진 값, 또는 값으로 전달 약속으로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="b9a91fb791a6682e16518a8761044575d6b36084" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; (&quot;invalid language tag: xx_yy&quot;) is thrown if a &lt;code&gt;locale&lt;/code&gt; argument isn't a valid language tag.</source>
          <target state="translated">&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; ( &quot;잘못된 언어 태그 : xx_yy&quot;)는 경우에 발생합니다 &lt;code&gt;locale&lt;/code&gt; 인수가 유효한 언어 태그 아니다.</target>
        </trans-unit>
        <trans-unit id="b7986ca1a037ff7f8ae7007ac7b84d094da8a9c8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown if &lt;code&gt;form&lt;/code&gt; isn't one of the values specified above.</source>
          <target state="translated">&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 경우 발생합니다 &lt;code&gt;form&lt;/code&gt; 위에서 지정한 값 중 하나가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="4cc137914405f207b04e2bb42c2ecb3a32a9d966" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt;, if the &lt;code&gt;offset&lt;/code&gt; is set such as it would store beyond the end of the typed array.</source>
          <target state="translated">&lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 의 경우, &lt;code&gt;offset&lt;/code&gt; 은 형식화 어레이의 끝을지나 저장하는 것처럼 설정된다.</target>
        </trans-unit>
        <trans-unit id="3f558645b9de1e4e2da7498b8e61ea4d1488ef9c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object or literal. The match or matches are replaced with &lt;code&gt;&lt;var&gt;newSubstr&lt;/var&gt;&lt;/code&gt; or the value returned by the specified &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체 또는 리터럴. 일치 항목은 &lt;code&gt;&lt;var&gt;newSubstr&lt;/var&gt;&lt;/code&gt; 또는 지정된 &lt;code&gt;&lt;var&gt;function&lt;/var&gt;&lt;/code&gt; 반환 된 값으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="be6d9353dd183a4200cfb353cbbacdb730746840" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object or literal. The match or matches are replaced with &lt;code&gt;newSubStr&lt;/code&gt; or the value returned by the specified &lt;code&gt;function&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체 또는 리터럴. 일치하는 항목은 &lt;code&gt;newSubStr&lt;/code&gt; 또는 지정된 &lt;code&gt;function&lt;/code&gt; 반환 한 값으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="09e51ecccc0c015bb3a71a4169a8700f5747f19a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../statements/return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statement is reached. In this case, execution of the generator ends and an &lt;code&gt;IteratorResult&lt;/code&gt; is returned to the caller in which the &lt;code&gt;value&lt;/code&gt; is the value specified by the &lt;code&gt;return&lt;/code&gt; statement and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../statements/return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt; 문에 도달한다. 이 경우, 생성기의 실행이 종료되고 &lt;code&gt;IteratorResult&lt;/code&gt; 가 호출자에게 리턴되는데, 여기서 호출자에서 &lt;code&gt;value&lt;/code&gt; 은 &lt;code&gt;return&lt;/code&gt; 문으로 지정된 값 이고 &lt;code&gt;done&lt;/code&gt; 은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6e1aa954b278ec1663990456965e6048580d642d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; of the specified &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; with &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; applied from the start.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 지정의 &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; 는 처음부터 적용.</target>
        </trans-unit>
        <trans-unit id="50790a46d8164ee53132627ac511b4e1dd02aca2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; of the specified &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; with the &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; applied at the end of the current &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 지정된의 &lt;code&gt;&lt;var&gt;targetLength&lt;/var&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;var&gt;padString&lt;/var&gt;&lt;/code&gt; 는 현재의 끝 부분에 적용 &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d94099f13bcc9046ee189be6871175e002a0e79" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; of the specified length with the pad string applied at the end of the current string.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 패드 문자열로 지정된 길이는 현재 문자열의 끝 부분에 적용했다.</target>
        </trans-unit>
        <trans-unit id="18d9a51534f1f350de06c0937b0a55e28682578c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; of the specified length with the pad string applied from the start.</source>
          <target state="translated">시작부터 패드 문자열이 적용된 지정된 길이 의 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e619d2320e5ad77f52d56b8d7d547d0534e91e71" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object that's used to insert white space into the output JSON string for readability purposes.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 이나 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 가독성을 위해 출력 JSON 문자열로 공백을 삽입하는 데 사용되는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="a3d807fa0fea94c766a6c6572f0b90ef6d57c40e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is a target of the match.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 일치의 대상입니다.</target>
        </trans-unit>
        <trans-unit id="1f9628c09235d84d6c607c47ab7f0b35d2579237" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is a target of the replacement.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 교체의 대상입니다.</target>
        </trans-unit>
        <trans-unit id="31c6d9a58da4c9f834f057ef6fa796e72be6fa17" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is a target of the search.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 검색의 대상입니다.</target>
        </trans-unit>
        <trans-unit id="304317f55942a3503cae4260a97027921c1571a0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is to be replaced by &lt;code&gt;&lt;var&gt;newSubstr&lt;/var&gt;&lt;/code&gt;. It is treated as a literal string and is &lt;em&gt;not&lt;/em&gt; interpreted as a regular expression. Only the first occurrence will be replaced.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 입니다 대체 할 &lt;code&gt;&lt;var&gt;newSubstr&lt;/var&gt;&lt;/code&gt; . 리터럴 문자열로 처리되며 정규식으로 해석 &lt;em&gt;되지 않습니다&lt;/em&gt; . 첫 번째 항목 만 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="70d08401a35fd3d4dfe70bd6e1cce1b74421c152" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; that is to be replaced by &lt;code&gt;newSubStr&lt;/code&gt;. It is treated as a verbatim string and is &lt;em&gt;not&lt;/em&gt; interpreted as a regular expression. Only the first occurrence will be replaced.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 입니다 대체 할 &lt;code&gt;newSubStr&lt;/code&gt; . 완전 문자열로 취급되며 정규식으로 해석 &lt;em&gt;되지 않습니다&lt;/em&gt; . 첫 번째 항목 만 교체됩니다.</target>
        </trans-unit>
        <trans-unit id="ca459661381b77f41d22ce3c0494894ae4e1ba9d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; which is either &quot;&lt;code&gt;ok&lt;/code&gt;&quot;, &quot;&lt;code&gt;not-equal&lt;/code&gt;&quot;, or &quot;&lt;code&gt;timed-out&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 중 &quot;인 &lt;code&gt;ok&lt;/code&gt; &quot;, &quot; &lt;code&gt;not-equal&lt;/code&gt; &quot;또는 &quot; &lt;code&gt;timed-out&lt;/code&gt; &quot;.</target>
        </trans-unit>
        <trans-unit id="5206fa01860ba323314f7b5cb23869068e675be0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;invalid element in locales argument&quot;) is thrown if an array element isn't of type string.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 배열 요소 유형의 문자열이 아닌 경우 ( &quot;로케일 인수에 유효하지 않은 요소&quot;)가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2247216a7a1393502ff5b58f70d6da4ee07e55e4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception if the &lt;code&gt;propertiesObject&lt;/code&gt; parameter is &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or a non-primitive-wrapper object.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 생성 예외 &lt;code&gt;propertiesObject&lt;/code&gt; 의 파라미터가 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 또는 비 원시 래퍼 객체.</target>
        </trans-unit>
        <trans-unit id="71de3f580d90f2a856a9417fce77d2635344565c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown if &lt;code&gt;&lt;var&gt;prototypeObj&lt;/var&gt;&lt;/code&gt; is undefined or null.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 있는 경우 발생합니다 &lt;code&gt;&lt;var&gt;prototypeObj&lt;/var&gt;&lt;/code&gt; 가 정의되지는 null.</target>
        </trans-unit>
        <trans-unit id="be026a6500abab62c0f3c1a1ba06cd11a8f384d4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown if the first argument is not a well formed object.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 첫 번째 인수가 잘 형성 객체가 아닌 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8ea6550e87c19533be1b1b05083247fbab1affd2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown if the first argument is not a well-formed object.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 첫 번째 인수가 잘 형성 객체가 아닌 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea07a755143c730ed47d3beacdfc13a38ef990d8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown when attempts are made to change non-configurable property attributes (except &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;writable&lt;/code&gt;, if permitted) unless the current and new values are the same.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 시도를 구성 할 수없는 속성 속성을 변경하려고 할 때 (제외 발생합니다 &lt;code&gt;value&lt;/code&gt; 및 &lt;code&gt;writable&lt;/code&gt; 현재 값과 새 값이 동일하지 않는 한 허용 된 경우).</target>
        </trans-unit>
        <trans-unit id="6463d2c6731078f517b4e22a252369338a3097ce" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; is not an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; or if &lt;code&gt;&lt;var&gt;prototype&lt;/var&gt;&lt;/code&gt; is neither an object nor &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; , 경우에 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 아니 어서 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 또는 경우 &lt;code&gt;&lt;var&gt;prototype&lt;/var&gt;&lt;/code&gt; 객체도도 아닌 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cac0967d7d2f9f6ffffb8f3562b8103acf8e1eaa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; is not an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; , 경우에 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 아니 어서 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2279139d707f31041c549ee0285a86559669dadd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&lt;var&gt;newTarget&lt;/var&gt;&lt;/code&gt; are not constructors.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; ,이 경우 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;var&gt;newTarget&lt;/var&gt;&lt;/code&gt; 생성자 없습니다.</target>
        </trans-unit>
        <trans-unit id="972b69f66ebc9f00367b3e5530ed4825e43881ea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;target&lt;/code&gt; is not an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; or if &lt;code&gt;prototype&lt;/code&gt; is neither an object nor &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; , 경우에 &lt;code&gt;target&lt;/code&gt; 아니 어서 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 또는 경우 &lt;code&gt;prototype&lt;/code&gt; 객체도도 아닌 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e0bafdafc405566d9d7ce7f3627fc33d25478b42" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;target&lt;/code&gt; is not an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; , 경우에 &lt;code&gt;target&lt;/code&gt; 아니 어서 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fb25e77ff949453c52dedd7a3fa7b9e4563573ec" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;target&lt;/code&gt; or &lt;code&gt;newTarget&lt;/code&gt; are not constructors.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; ,이 경우 &lt;code&gt;target&lt;/code&gt; 또는 &lt;code&gt;newTarget&lt;/code&gt; 생성자 없습니다.</target>
        </trans-unit>
        <trans-unit id="1491a3ec350d12aecea2b1d725775ccdffd1b9fb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; is not callable.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 의 경우 &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7bb15c2753e0f618afb24d5a14ee6b5db238bcd6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, if the &lt;em&gt;target&lt;/em&gt; is not callable.</source>
          <target state="translated">&lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 의 경우 &lt;em&gt;대상은&lt;/em&gt; 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fee685859972af60789d465f8fb015138440f81c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;function&quot;&gt;function declaration&lt;/a&gt; is also limited in scope inside the block where the declaration occurs:</source>
          <target state="translated">&lt;a href=&quot;function&quot;&gt;함수 선언&lt;/a&gt; 선언이 발생하는 위치에는 내측 블록 범위가 제한된다 :</target>
        </trans-unit>
        <trans-unit id="c3a85985b63ce553463a294256a3b99359ec75d4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;global_objects/generator&quot;&gt;generator object&lt;/a&gt; is &lt;em&gt;both&lt;/em&gt; iterator and iterable:</source>
          <target state="translated">&lt;a href=&quot;global_objects/generator&quot;&gt;생성기 객체&lt;/a&gt; 입니다 &lt;em&gt;모두&lt;/em&gt; 반복자하고 반복 가능한 :</target>
        </trans-unit>
        <trans-unit id="54c8325a51827282f908faa46975e6ad3bbb3dc5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;global_objects/generator&quot;&gt;generator object&lt;/a&gt; is both, iterator and iterable:</source>
          <target state="translated">&lt;a href=&quot;global_objects/generator&quot;&gt;생성기 객체는&lt;/a&gt; 둘 다, 반복자 및 반복 가능한 :</target>
        </trans-unit>
        <trans-unit id="9687726c5be4bf3421292dc48ea0095ad087dd28" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; is an example of a built-in iterable object:</source>
          <target state="translated">&lt;a href=&quot;global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 의 예입니다 내장 된 반복 가능한 객체 :</target>
        </trans-unit>
        <trans-unit id="7a4d552f9e15f73d3e404f4fe0efc7a20b98e8b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream and compile.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 객체 또는 스트리밍 컴파일하려는 .wasm 모듈의 기본 소스를 대표하는 하나 충족하는 약속.</target>
        </trans-unit>
        <trans-unit id="4905e7c0c4ab4689a993b295b78420fffca1e446" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream, compile, and instantiate.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 객체 또는 스트림, 컴파일 및 인스턴스화하려는 .wasm 모듈의 기본 소스를 대표하는 하나 충족하는 약속.</target>
        </trans-unit>
        <trans-unit id="594c3ca6cf174be325d2d0ef16c5b85b3a5347c2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown if an invalid Unicode code point is given (e.g. &quot;RangeError: NaN is not a valid code point&quot;).</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 잘못된 유니 코드 코드 포인트가 주어지면 발생합니다 (예 : &quot;오류 RangeError : NaN의 유효한 코드 포인트 아니다&quot;).</target>
        </trans-unit>
        <trans-unit id="53ae6707d219d3eb2e8246151c524b14aa57a31b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; containing WebAssembly binary code to be validated.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;입력 어레이&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; WebAssembly 이진 코드를 포함하는이 검증된다.</target>
        </trans-unit>
        <trans-unit id="704e58931dfc471fd6ce93bd72109c41236ee60c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; containing the binary code of the .wasm module you want to compile.</source>
          <target state="translated">컴파일하려는 .wasm 모듈의 이진 코드를 포함 하는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6746a446d99dcd971da402aa449b7f521efaf633" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;code point&lt;/a&gt; is a value in the Unicode codespace; that is, the range of integers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;0x10FFFF&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;코드 포인트가&lt;/a&gt; 유니 코드 스페이스에서의 값이고; 즉, &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;0x10FFFF&lt;/code&gt; 사이의 정수 범위입니다 .</target>
        </trans-unit>
        <trans-unit id="1c620066ef288b8c2b029d6d5b17169fa27669a7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream and compile.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 객체 또는 스트리밍 컴파일하려는 .wasm 모듈의 기본 소스를 대표하는 하나 충족하는 약속.</target>
        </trans-unit>
        <trans-unit id="397c029cb2a3025103ce337b7fc71760d6f8bf72" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream, compile, and instantiate.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 객체 또는 스트림, 컴파일 및 인스턴스화하려는 .wasm 모듈의 기본 소스를 대표하는 하나 충족하는 약속.</target>
        </trans-unit>
        <trans-unit id="10cb79a2cbadc25bfefdbb505afc29c140b4ae64" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expression&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;정규 표현식&lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="0e95c4f3869393c21907f1480f0937f39e717bba" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Unary_plus&quot;&gt;(unary) plus sign&lt;/a&gt; can sometimes be used as a shorthand for &lt;code&gt;valueOf&lt;/code&gt;, e.g. in &lt;code&gt;+new Number()&lt;/code&gt;. Also see &lt;a href=&quot;#Using_unary_plus&quot;&gt;Using unary plus&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Unary_plus&quot;&gt;(단항) 더하기 기호가&lt;/a&gt; 때때로을위한 속기로 사용할 수 있습니다 &lt;code&gt;valueOf&lt;/code&gt; 에서 예를 들어, &lt;code&gt;+new Number()&lt;/code&gt; . &lt;a href=&quot;#Using_unary_plus&quot;&gt;단항 더하기 사용&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="13aa2d6e618fc96b9efaf90a5c4d02e85b883b9d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; containing the binary code of the .wasm module you want to compile.</source>
          <target state="translated">컴파일하려는 .wasm 모듈의 이진 코드를 포함 하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c1138ff85d38349b299a8cdd0d28fb428997c90f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; containing WebAssembly binary code to be validated.</source>
          <target state="translated">유효성을 검사 할 WebAssembly 바이너리 코드를 포함 하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e4241d9ed00504596a1dbe6e7ba4330e782dec06" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; or &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; containing the binary code of the .wasm module you want to compile.</source>
          <target state="translated">컴파일하려는 .wasm 모듈의 이진 코드를 포함 하는 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;형식화 된 배열&lt;/a&gt; 또는 &lt;a href=&quot;../arraybuffer&quot;&gt;ArrayBuffer&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="55fd0b75aaad9386e86ed8d4602a208acead2548" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; is thrown if the &lt;code&gt;length&lt;/code&gt; is larger than &lt;a href=&quot;number/max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; (&amp;gt;= 2 ** 53) or negative.</source>
          <target state="translated">&lt;a href=&quot;rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 경우 생성 슬로우 &lt;code&gt;length&lt;/code&gt; 보다 큰 &lt;a href=&quot;number/max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt; (&amp;gt; = 2 ** 53) 또는 음.</target>
        </trans-unit>
        <trans-unit id="7205bac44021b8d708776412ea558802ff4460d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is not allowed at the top of such functions per the ECMAScript specification.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 지시어는 ECMAScript를 사양에 따라 같은 기능의 상단에 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="04db161867abd892d1879650dd50a42a3241956f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive is written at the top of a function that has one of the following parameters:</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 지시어는 다음 매개 변수 중 하나가있는 함수의 상단에 기록됩니다</target>
        </trans-unit>
        <trans-unit id="36fa3b6ca02d560835a571b61d60a0be9ae0ff72" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; statement is called outside of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;function&lt;/a&gt;. Maybe there are missing curly brackets somewhere? The &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; statements must be in a function, because they end (or pause and resume) function execution and specify a value to be returned to the function caller.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; 문은 외부 호출 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;기능&lt;/a&gt; . 어딘가에 괄호가 빠졌습니까? &lt;code&gt;return&lt;/code&gt; 및 &lt;code&gt;yield&lt;/code&gt; 가 함수 호출자에게 반환 할 값을 종료 (또는 일시 정지 및 재개) 실행 기능과 지정하기 때문에 문은 함수에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="3bc1f12cc4610e6a640a36899a61f966c9beb9e3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; statement is called outside of a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;function&lt;/a&gt;. Maybe there are missing curly brackets somewhere? The &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; statements must be in a function, because they end (or pause and resume) function execution and specify a value to be returned to the function caller.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../statements/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../operators/yield&quot;&gt;yield&lt;/a&gt;&lt;/code&gt; 문은 외부 호출 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&quot;&gt;기능&lt;/a&gt; . 어딘가에 중괄호가 누락되었을 수 있습니까? &lt;code&gt;return&lt;/code&gt; 및 &lt;code&gt;yield&lt;/code&gt; 가 함수 호출자에게 반환 할 값을 종료 (또는 일시 정지 및 재개) 실행 기능과 지정하기 때문에 문은 함수에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="b5a5c49fef452a6040ad34681ccecffc50d13bda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;&lt;/code&gt; which will be resolved with the value returned by the async function, or rejected with an uncaught exception thrown from within the async function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;&lt;/code&gt; 비동기 함수에 의해 리턴 된 값으로 해결하거나 비동기 함수 내에서 발생 잡히지 않은 예외가 거부된다.</target>
        </trans-unit>
        <trans-unit id="ee2f9d9e32a76553f9da405c9dff57319320c2cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/code&gt; is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a &lt;em&gt;promise&lt;/em&gt; to supply the value at some point in the future.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/code&gt; 약속이 만들어 질 때 반드시 알려지지 않은 값에 대한 프록시입니다. 핸들러를 비동기 조치의 최종 성공 값 또는 실패 이유와 연관시킬 수 있습니다. 이를 통해 비동기 메소드는 동기 메소드와 같은 값을 리턴 할 수 있습니다. 비동기 메소드는 최종 값을 즉시 리턴하는 대신 미래의 어느 시점에서 값을 제공 할 &lt;em&gt;것을 약속&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="aadcbd699b9905adade866c2e59b1be431005843" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GlobalDescriptor&lt;/code&gt; dictionary object, which contains two properties:</source>
          <target state="translated">&lt;code&gt;GlobalDescriptor&lt;/code&gt; 두 개의 속성이 포함되어 사전 객체 :</target>
        </trans-unit>
        <trans-unit id="302d0f2581a34faed1323cc92dd5949b191e5b9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; does not contain any keys by default. It only contains what is explicitly put into it.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 기본적으로 모든 키를 포함하지 않습니다. 여기에는 명시 적으로 입력 된 내용 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="5200ff483f97e4666f3e1ef542a97c6bbf3a87d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;iterable&lt;/a&gt; and can thus be directly iterated, whereas iterating over an &lt;code&gt;Object&lt;/code&gt; requires obtaining its keys in some fashion and iterating over them.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 이고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;반복 가능한&lt;/a&gt; 따라서 직접 반복 반면, 반복 될 수있는 &lt;code&gt;Object&lt;/code&gt; 어떤 방식으로 그 키를 획득하고 반복이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="01c9f5f8b7410341962fa7d9e7bf78f9999cb745" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;iterable&lt;/a&gt;, so it can be directly iterated.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 있다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;반복자&lt;/a&gt; 가 직접 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb049fe93ca3b653d2fbae6338cee77ded205c54" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; may perform better in scenarios involving frequent addition and removal of key pairs.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 자주 추가 및 키 쌍의 제거를 포함하는 시나리오에서 더 잘 수행 할 수있다.</target>
        </trans-unit>
        <trans-unit id="dc73c071c929148729b9420be3041ca64eac8cf7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; object iterates its elements in insertion order &amp;mdash; a &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; loop returns an array of &lt;code&gt;[&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;]&lt;/code&gt; for each iteration.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 객체 삽입하기 요소를 반복 할 - &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; 루프 복귀 배열 &lt;code&gt;[&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt;]&lt;/code&gt; 각 반복에 대한.</target>
        </trans-unit>
        <trans-unit id="3560b3d3847df14e26f9c3ea9810d33ac4d21c46" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt; object iterates its elements in insertion order &amp;mdash; a &lt;a href=&quot;../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; loop returns an array of &lt;code&gt;[key, value]&lt;/code&gt; for each iteration.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 객체 삽입하기 요소를 반복 할 - &lt;a href=&quot;../statements/for...of&quot;&gt; &lt;code&gt;for...of&lt;/code&gt; &lt;/a&gt; 루프 복귀 배열 &lt;code&gt;[key, value]&lt;/code&gt; 각 반복에 대한.</target>
        </trans-unit>
        <trans-unit id="a7ba904943bf8419dbb280f39ddcf9c62fce0411" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&lt;/code&gt;'s keys can be any value (including functions, objects, or any primitive).</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 의 키 (함수, 객체, 또는 원시적 포함한) 임의의 값이 될 수있다.</target>
        </trans-unit>
        <trans-unit id="4ac1d45331418e486ac804b5e04469781abfba9c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; is in one of these states:</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 이 상태 중 하나입니다 :</target>
        </trans-unit>
        <trans-unit id="2b185f8ebf5ef7f3ba82db7735ad53af609f886d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; object is created using the &lt;code&gt;new &lt;/code&gt;keyword and its constructor. This constructor takes as its argument a function, called the &quot;executor function&quot;. This function should take two functions as parameters. The first of these functions (&lt;code&gt;resolve&lt;/code&gt;) is called when the asynchronous task completes successfully and returns the results of the task as a value. The second (&lt;code&gt;reject&lt;/code&gt;) is called when the task fails, and returns the reason for failure, which is typically an error object.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 객체는 사용하여 만든 &lt;code&gt;new &lt;/code&gt; 키워드와 생성자를. 이 생성자는 인수로 &quot;실행자 함수&quot;라는 함수를 사용합니다. 이 기능은 두 가지 기능을 매개 변수로 취해야합니다. 이 함수 중 첫 번째 함수 ( &lt;code&gt;resolve&lt;/code&gt; )는 비동기 작업이 성공적으로 완료 될 때 호출되며 작업 결과를 값으로 반환합니다. 두 번째 ( &lt;code&gt;reject&lt;/code&gt; )는 작업이 실패하면 호출되며 실패 이유 (일반적으로 오류 개체)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c6964b5866f2007ccb24c5905bc563e99dde8fb9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; that resolves to a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object representing the compiled module.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; (A)에 리졸 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; 의&lt;/a&gt; 목적은 컴파일 된 모듈을 나타내는.</target>
        </trans-unit>
        <trans-unit id="4de9b416e1fbc7481a27bb8429d6397a2254b14e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; that resolves to a &lt;code&gt;ResultObject&lt;/code&gt; which contains two fields:</source>
          <target state="translated">두 개의 필드를 포함 하는 &lt;code&gt;ResultObject&lt;/code&gt; 로 해석 되는 &lt;code&gt;Promise&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="00d05183f590cb4b14e769763ee8c647e28e7d60" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Promise&lt;/code&gt; that resolves to an &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 한다는로 확인 &lt;a href=&quot;instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; 의&lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="58bed01a455c63c2bacc8d30de36ebeceba3b281" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Proxy&lt;/code&gt; is created with two parameters:</source>
          <target state="translated">&lt;code&gt;Proxy&lt;/code&gt; 두 개의 매개 변수 생성됩니다 :</target>
        </trans-unit>
        <trans-unit id="7e6776eb1ba4361a0a1c3320bfcfd51905b52e43" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RangeError&lt;/code&gt; is thrown when trying to pass a value as an argument to a function that does not allow a range that includes the value.</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; 값을 포함하는 범위를 허용하지 않는 함수의 인수로 값을 통과 할 때 발생한다.</target>
        </trans-unit>
        <trans-unit id="1cfb25bd057c28192df1cb63abbb26d409cf50fa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RangeError&lt;/code&gt; is thrown when trying to pass a value as an argument to a function that does not allow a range that includes the value. This can be encountered when passing a value that is not one of the allowed string values to &lt;a href=&quot;string/normalize&quot;&gt;&lt;code&gt;String.prototype.normalize()&lt;/code&gt;&lt;/a&gt;, or when attempting to create an array of an illegal length with the &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; constructor, or when passing bad values to the numeric methods &lt;a href=&quot;number/toexponential&quot;&gt;&lt;code&gt;Number.toExponential()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;number/tofixed&quot;&gt;&lt;code&gt;Number.toFixed()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;number/toprecision&quot;&gt;&lt;code&gt;Number.toPrecision()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;RangeError&lt;/code&gt; 값을 포함하는 범위를 허용하지 않는 함수의 인수로 값을 통과 할 때 발생한다. 허용되는 문자열 값 중 하나가 아닌 값을 &lt;a href=&quot;string/normalize&quot;&gt; &lt;code&gt;String.prototype.normalize()&lt;/code&gt; &lt;/a&gt; 에 전달하거나 &lt;a href=&quot;array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 생성자를 사용하여 잘못된 길이의 배열을 만들려고 할 때 또는 잘못된 값을 숫자에 전달할 때 발생할 수 있습니다 방법 &lt;a href=&quot;number/toexponential&quot;&gt; &lt;code&gt;Number.toExponential()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;number/tofixed&quot;&gt; &lt;code&gt;Number.toFixed()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;number/toprecision&quot;&gt; &lt;code&gt;Number.toPrecision()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ed2befd856c4255cc5994cf904901277fc2776d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReferenceError&lt;/code&gt; is thrown when trying to dereference a variable that has not been declared.</source>
          <target state="translated">&lt;code&gt;ReferenceError&lt;/code&gt; 가이 선언되지 않은 변수를 역 참조하려고 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="be2a7b3a6debeb9c96cf1d10b1a0a4c542b3fa7b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; object can always be converted to its primitive counterpart with the &lt;a href=&quot;string/valueof&quot;&gt;&lt;code&gt;valueOf()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 객체는 항상과의 원시적 인 대응으로 변환 할 수 있습니다 &lt;a href=&quot;string/valueof&quot;&gt; &lt;code&gt;valueOf()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="8f87d17361da9b7795965121199c3f88b970071f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyntaxError&lt;/code&gt; is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.</source>
          <target state="translated">&lt;code&gt;SyntaxError&lt;/code&gt; 자바 스크립트 엔진의 만남은 토큰 또는 코드를 구문 분석 할 때 언어의 문법에 맞지 않는 토큰 순서 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ce36c6d1ef6544f01f6fb69c452e505dbbd0e818" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TypeError&lt;/code&gt; is thrown when an operand or argument passed to a function is incompatible with the type expected by that operator or function.</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; 함수에 전달 된 피연산자 또는 인수가 운영자 또는 기능에 의해 예상되는 유형과 호환되지 않는 경우에 발생한다.</target>
        </trans-unit>
        <trans-unit id="8c46622e068bd97ff39ba7c2f9991052ca2402ec" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TypeError&lt;/code&gt; may be thrown when:</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; 때 발생 될 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="6903451e264fc3512b6bd0a4d441040a526ae25d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URIError&lt;/code&gt; is thrown when the global URI handling functions are passed a malformed URI.</source>
          <target state="translated">&lt;code&gt;URIError&lt;/code&gt; 의이 기능을 처리하는 글로벌 URI가 잘못된 형식의 URI에 전달 될 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="98fc25d38ba5089b4c8b88bc8b8397aaa28c8500" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebAssembly.Global&lt;/code&gt; object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; instances. This allows dynamic linking of multiple modules.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Global&lt;/code&gt; 의 객체는 자바 스크립트와 하나 개 이상의에서 가져올 수 /의 내보낼 수 모두에서 액세스 할 수있는 전역 변수의 예를 나타냅니다 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; 의&lt;/a&gt; 인스턴스를. 이를 통해 여러 모듈을 동적으로 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="baea619bf22cc53ed4d9acabfd2cc6e2bbc53cc6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebAssembly.Instance&lt;/code&gt; object is a stateful, executable instance of a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Instance&lt;/code&gt; objects contain all the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;Exported WebAssembly functions&lt;/a&gt; that allow calling into WebAssembly code from JavaScript.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Instance&lt;/code&gt; 의 객체는의 상태, 실행 인스턴스입니다 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;Instance&lt;/code&gt; 객체에는 JavaScript에서 WebAssembly 코드를 호출 할 수 있는 모든 &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions&quot;&gt;내 보낸 WebAssembly 함수&lt;/a&gt; 가 포함되어 있습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
